import{_ as h,o as n,c as i,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},E={class:"review-content"};function C(a,e,l,p,r,s){return n(),i("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const S=h(k,[["render",C],["__scopeId","data-v-e1863c58"]]),I=JSON.parse('[{"question":"Given a text file called \\"reviews.txt\\" containing multiple lines of user reviews, write a function named `extract_positive_reviews` that: 1. Reads the file using Python\'s built-in file handling functions. 2. Filters the reviews containing the word \\"good\\" (case-insensitive). 3. Writes these positive reviews to a new file named \\"positive_reviews.txt\\". 4. Prints the number of positive reviews extracted. This exercise is designed to help you practice file handling operations, string manipulation, and basic text processing techniques in Python. **Function Signature:** ```python def extract_positive_reviews(file_path: str) -> int: pass ``` **Detailed Steps:** 1. Open \\"reviews.txt\\" in read mode and read its content line by line. 2. Check each line to see if it contains the word \\"good\\" in any case (i.e., \\"Good\\", \\"GOOD\\", \\"good\\"). 3. Collect all lines that contain the word \\"good\\". 4. Write the positive reviews to a new file called \\"positive_reviews.txt\\". 5. Print the count of positive reviews. 6. Return the count of positive reviews. **Note:** Make sure the text file \\"reviews.txt\\" is present in the current working directory. This file contains multiple lines of text representing user reviews, and you need to filter and write the reviews with the word \\"good\\" to a new file.","solution":"def extract_positive_reviews(file_path: str) -> int: positive_reviews = [] with open(file_path, \'r\') as file: reviews = file.readlines() for review in reviews: if \'good\' in review.lower(): positive_reviews.append(review) with open(\'positive_reviews.txt\', \'w\') as file: file.writelines(positive_reviews) positive_review_count = len(positive_reviews) print(f\\"Number of positive reviews: {positive_review_count}\\") return positive_review_count"},{"question":"You are required to write a function named `analyze_employee_performance` which takes a pandas DataFrame (`df`) as input. The DataFrame contains employee data including columns for `department`, `performance_score`, and `years_with_company`. The objective of this function is to create a bar plot showing the average performance score per department, and a line plot overlayed to show the average years with the company per department. Each department should be labeled on the x-axis. You will need to make use of the following libraries: - `matplotlib.pyplot` for plotting the data. - `pandas` for handling the DataFrame. The main steps are as follows: 1. Calculate the average performance score for each department. 2. Calculate the average years with the company for each department. 3. Create a bar plot for the average performance scores. 4. Overlay a line plot for the average years with the company. 5. Ensure that both plots use the same x-axis for the departments. 6. Save the plot to a file named `employee_performance_analysis.png`. **Function Signature:** ```python def analyze_employee_performance(df: pd.DataFrame) -> None: pass ``` **Example Usage:** ```python import pandas as pd data = { \'department\': [\'HR\', \'Engineering\', \'Marketing\', \'HR\', \'Engineering\', \'Marketing\'], \'performance_score\': [70, 80, 60, 75, 85, 65], \'years_with_company\': [3, 5, 2, 4, 6, 3] } df = pd.DataFrame(data) analyze_employee_performance(df) ``` The function should generate a bar plot showing the average performance scores for HR, Engineering, and Marketing departments, with a line plot overlayed showing the average years with the company for each department.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_employee_performance(df: pd.DataFrame) -> None: Analyzes employee performance by creating a bar plot for average performance score per department and a line plot for average years with the company per department. Args: df (pd.DataFrame): DataFrame containing employee data with \'department\', \'performance_score\', and \'years_with_company\' columns. # Calculate the average performance score per department avg_performance = df.groupby(\'department\')[\'performance_score\'].mean() # Calculate the average years with company per department avg_years = df.groupby(\'department\')[\'years_with_company\'].mean() # Create a bar plot for average performance scores fig, ax1 = plt.subplots() avg_performance.plot(kind=\'bar\', ax=ax1, color=\'skyblue\', position=1) ax1.set_ylabel(\'Average Performance Score\') # Create a secondary axis for the line plot ax2 = ax1.twinx() avg_years.plot(kind=\'line\', ax=ax2, color=\'green\', marker=\'o\') ax2.set_ylabel(\'Average Years with Company\') ax1.set_xlabel(\'Department\') ax1.set_title(\'Average Performance Score and Years with Company by Department\') # Save the plot to a file plt.savefig(\'employee_performance_analysis.png\') plt.close()"},{"question":"You are given an undirected graph represented as an adjacency matrix. Each cell in the matrix contains either a `0` (indicating no edge) or a positive integer (indicating the weight of the edge between the nodes). Your task is to write a Python function named `prims_algorithm` that takes this adjacency matrix as input and returns the minimum spanning tree (MST) of the graph using Prim\'s algorithm. Specifically, you need to: 1. Initialize a starting node and an empty list to store the edges of the MST. 2. Use a priority queue to keep track of the minimum edge weights. 3. Expand the MST by adding the minimum weight edges until all nodes are included. Function Signature: ```python def prims_algorithm(adj_matrix: List[List[int]]) -> List[Tuple[int, int, int]]: ``` Input: - `adj_matrix`: A list of lists representing the adjacency matrix of the graph, where `adj_matrix[i][j]` is the weight of the edge between node `i` and node `j`. Output: - A list of tuples representing the edges in the minimum spanning tree. Each tuple should be of the form (node1, node2, weight), where node1 and node2 are the connected nodes and weight is the weight of the connecting edge. Constraints: - The number of nodes in the graph does not exceed 100. - You can use the `heapq` library for the priority queue. Example: ```python import heapq from typing import List, Tuple def prims_algorithm(adj_matrix: List[List[int]]) -> List[Tuple[int, int, int]]: n = len(adj_matrix) visited = [False] * n mst_edges = [] min_heap = [(0, 0, 0)] while len(mst_edges) < n - 1: weight, node1, node2 = heapq.heappop(min_heap) if not visited[node2]: visited[node2] = True if node1 != node2: mst_edges.append((node1, node2, weight)) for next_node in range(n): if not visited[next_node] and adj_matrix[node2][next_node] != 0: heapq.heappush(min_heap, (adj_matrix[node2][next_node], node2, next_node)) return mst_edges adj_matrix = [ [0, 2, 0, 6, 0], [2, 0, 3, 8, 5], [0, 3, 0, 0, 7], [6, 8, 0, 0, 9], [0, 5, 7, 9, 0] ] print(prims_algorithm(adj_matrix)) ``` Expected Output: ``` [(0, 1, 2), (1, 2, 3), (1, 4, 5), (0, 3, 6)] ```","solution":"import heapq from typing import List, Tuple def prims_algorithm(adj_matrix: List[List[int]]) -> List[Tuple[int, int, int]]: n = len(adj_matrix) visited = [False] * n mst_edges = [] min_heap = [(0, 0, 0)] while len(mst_edges) < n - 1: weight, node1, node2 = heapq.heappop(min_heap) if not visited[node2]: visited[node2] = True if node1 != node2: mst_edges.append((node1, node2, weight)) for next_node in range(n): if not visited[next_node] and adj_matrix[node2][next_node] != 0: heapq.heappush(min_heap, (adj_matrix[node2][next_node], node2, next_node)) return mst_edges"},{"question":"You are tasked with creating a function `summarize_temperature_statistics` that takes a list of daily temperature readings and a time frame specified by a start date and an end date. This function will analyze the provided temperature data to determine various statistics for each month within the given time frame. The function should return a DataFrame with the summary statistics including average, minimum, maximum, and standard deviation of temperatures for each month. Use the `pandas` library to implement the function. It should adhere to the following requirements: 1. Generate a full range of dates between the start and end dates to ensure all months in the range are included. 2. Calculate the average, minimum, maximum, and standard deviation of temperatures for each month within the given time frame. 3. Summarize these statistics in a DataFrame. Here is the function signature: ```python import pandas as pd from datetime import datetime def summarize_temperature_statistics(temperatures: list, dates: list, start_date: datetime, end_date: datetime) -> pd.DataFrame: Summarize temperature statistics by calculating average, minimum, maximum, and standard deviation for each month within the specified date range. Parameters ---------- temperatures : list List of daily temperature readings (as floats or integers). dates : list List of dates corresponding to the temperature readings in \'YYYY-MM-DD\' format (as strings). start_date : datetime The start date of the period for which to calculate statistics. end_date : datetime The end date of the period for which to calculate statistics. Returns ------- df_stats : pd.DataFrame DataFrame containing the average, minimum, maximum, and standard deviation of temperatures for each month. ```","solution":"import pandas as pd from datetime import datetime def summarize_temperature_statistics(temperatures: list, dates: list, start_date: datetime, end_date: datetime) -> pd.DataFrame: Summarize temperature statistics by calculating average, minimum, maximum, and standard deviation for each month within the specified date range. Parameters ---------- temperatures : list List of daily temperature readings (as floats or integers). dates : list List of dates corresponding to the temperature readings in \'YYYY-MM-DD\' format (as strings). start_date : datetime The start date of the period for which to calculate statistics. end_date : datetime The end date of the period for which to calculate statistics. Returns ------- df_stats : pd.DataFrame DataFrame containing the average, minimum, maximum, and standard deviation of temperatures for each month. # Creating DataFrame from the given data df = pd.DataFrame({ \'Date\': pd.to_datetime(dates), \'Temperature\': temperatures }) # Filtering the DataFrame to include only data within the specified date range mask = (df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) df = df.loc[mask].copy() # Creating a \'Month\' column for grouping by each month df[\'Month\'] = df[\'Date\'].dt.to_period(\'M\') # Grouping by \'Month\' and calculating the required statistics df_stats = df.groupby(\'Month\').agg( Average_Temperature=(\'Temperature\', \'mean\'), Min_Temperature=(\'Temperature\', \'min\'), Max_Temperature=(\'Temperature\', \'max\'), StdDev_Temperature=(\'Temperature\', \'std\') ).reset_index() # Convert \'Month\' back to string for readability df_stats[\'Month\'] = df_stats[\'Month\'].astype(str) return df_stats"},{"question":"You are given a dataset containing information about different house sales, including features such as the size of the house, the number of bedrooms, the number of bathrooms, and other relevant attributes. Your task is to build a machine learning model to classify whether the price of a house will be above or below the median price of the dataset. We will use the `sklearn` package to implement this classification model. Specifically, you are required to use Logistic Regression for this task. **Requirements:** 1. Implement the function `classify_house_price(x_train, y_train, x_test, y_test)`. 2. This function should: - Train a Logistic Regression model on the training data. - Predict whether the house prices in the test set are above or below the median price from the training set. - Calculate the accuracy of the model on the test set. - Return the trained model and its accuracy. **Function Signature:** ```python from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score def classify_house_price(x_train, y_train, x_test, y_test): # Your code here ``` **Input:** - `x_train`: Training features (numpy array or pandas DataFrame). - `y_train`: Training target values indicating whether prices are above (1) or below (0) the median price (numpy array or pandas Series). - `x_test`: Testing features (numpy array or pandas DataFrame). - `y_test`: Testing target values indicating whether prices are above (1) or below (0) the median price (numpy array or pandas Series). **Output:** - A tuple with the trained Logistic Regression model and its accuracy: `(model, accuracy)`. **Example Usage:** ```python model, accuracy = classify_house_price(x_train, y_train, x_test, y_test) print(f\'Logistic Regression Model Accuracy: {accuracy}\') ``` Ensure that you preprocess the data appropriately before training the model, including handling missing values and encoding categorical variables if necessary.","solution":"from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score from sklearn.preprocessing import StandardScaler from sklearn.impute import SimpleImputer from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.preprocessing import OneHotEncoder import pandas as pd import numpy as np def classify_house_price(x_train, y_train, x_test, y_test): Train a Logistic Regression model to classify house price whether it\'s above or below the median price. Returns the trained model and its accuracy on the test set. Args: x_train (pd.DataFrame or np.array): Training features. y_train (pd.Series or np.array): Training target values. x_test (pd.DataFrame or np.array): Testing features. y_test (pd.Series or np.array): Testing target values. Returns: tuple: (model, accuracy) # Preprocessing for numerical and categorical features num_features = x_train.select_dtypes(include=[\'int64\', \'float64\']).columns cat_features = x_train.select_dtypes(include=[\'object\']).columns num_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'median\')), (\'scaler\', StandardScaler()) ]) cat_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'constant\', fill_value=\'missing\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\')) ]) preprocessor = ColumnTransformer( transformers=[ (\'num\', num_transformer, num_features), (\'cat\', cat_transformer, cat_features) ]) # Building the model pipeline model_pipeline = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'classifier\', LogisticRegression()) ]) # Fitting the model model_pipeline.fit(x_train, y_train) # Predicting the test set results y_pred = model_pipeline.predict(x_test) # Calculating accuracy accuracy = accuracy_score(y_test, y_pred) return model_pipeline, accuracy"},{"question":"You are a software engineer tasked with creating a Python function `find_anagrams` that takes a list of words and finds all subsets of words that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the words `listen` and `silent` are anagrams of each other. Your task is to: 1. Group the words that are anagrams of each other into sublists. 2. Return a list of these sublists, where each sublist contains words that are anagrams of each other. Requirements: - The solution should handle words in a case-insensitive manner (i.e., `Listen` and `silenT` should be considered as anagrams). - The function should have the following signature: ```python def find_anagrams(words): ``` # Example: ```python # Example usage words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\", \\"foo\\", \\"oof\\", \\"bar\\"] print(find_anagrams(words)) # Expected output: [[\\"listen\\", \\"silent\\", \\"enlist\\"], [\\"google\\", \\"gooegl\\"], [\\"foo\\", \\"oof\\"], [\\"bar\\"]] ``` Note: - The order of the sublists and the order of words within each sublist does not matter.","solution":"def find_anagrams(words): Groups the words that are anagrams of each other into sublists. :param words: List of words :return: List of lists, where each sublist contains words that are anagrams of each other from collections import defaultdict anagram_dict = defaultdict(list) for word in words: # Sort the word in a case-insensitive manner sorted_word = \'\'.join(sorted(word.lower())) # Add the word to the corresponding anagram list anagram_dict[sorted_word].append(word) # Convert the dictionary values to a list of lists return list(anagram_dict.values())"},{"question":"You are required to implement a function that verifies the validity of a Sudoku puzzle solution. Specifically, you need to write a function that takes a 9x9 grid and determines whether it represents a valid solved Sudoku. Here is what you need to do: 1. **Function Name**: `is_valid_sudoku` 2. **Parameters**: - `board`: a list of lists, where each inner list represents a row of the Sudoku board. Each element on the board is an integer between 1 and 9. 3. **Returns**: - A boolean value, `True` if the given Sudoku solution is valid and `False` otherwise. **Details**: - A Sudoku board is considered valid if: - Each row contains all numbers from 1 to 9 with no repetition. - Each column contains all numbers from 1 to 9 with no repetition. - Each of the nine 3x3 sub-grids contains all numbers from 1 to 9 with no repetition. **Steps**: 1. Check each row for duplicated numbers. 2. Check each column for duplicated numbers. 3. Check each 3x3 sub-grid for duplicated numbers. **Assumptions**: - You can assume the given input is always a 9x9 grid. - You do not need to check for elements outside the range of 1 to 9. Here’s a partial implementation to help you get started: ```python def is_valid_sudoku(board): def is_valid_block(block): seen = set() for num in block: if num in seen: return False seen.add(num) return True # Check rows for row in board: if not is_valid_block(row): return False # Check columns for col in range(9): if not is_valid_block([board[row][col] for row in range(9)]): return False # Check 3x3 sub-grids for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_block(block): return False return True ``` The `is_valid_block` helper function checks for duplicates in a block (row, column, or sub-grid).","solution":"def is_valid_sudoku(board): def is_valid_block(block): seen = set() for num in block: if num in seen: return False seen.add(num) return True # Check rows for row in board: if not is_valid_block(row): return False # Check columns for col in range(9): if not is_valid_block([board[row][col] for row in range(9)]): return False # Check 3x3 sub-grids for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_block(block): return False return True"},{"question":"Create a function named `hamming_distance` that computes the Hamming distance between two strings of equal length. The Hamming distance is the number of positions at which the corresponding symbols are different. Your function `hamming_distance` should: 1. Take two strings `str1` and `str2` as input arguments. 2. Raise a `ValueError` if the input strings do not have the same length, with the message \\"Strings must be of equal length\\". 3. Return the Hamming distance as an integer. Write a main block to test your function using a few examples, ensuring different scenarios like strings of equal length and unequal lengths are covered. Example: ```python def hamming_distance(str1, str2): if len(str1) != len(str2): raise ValueError(\\"Strings must be of equal length\\") distance = sum(1 for x, y in zip(str1, str2) if x != y) return distance # Testing the function if __name__ == \\"__main__\\": try: print(hamming_distance(\\"karolin\\", \\"kathrin\\")) # Output: 3 print(hamming_distance(\\"karolin\\", \\"kerstin\\")) # Output: 3 print(hamming_distance(\\"1011101\\", \\"1001001\\")) # Output: 2 print(hamming_distance(\\"2173896\\", \\"2233796\\")) # Output: 3 print(hamming_distance(\\"abc\\", \\"ab\\")) # Raises ValueError except ValueError as ve: print(ve) ``` Your task is to implement the `hamming_distance` function and ensure that it correctly calculates the Hamming distance for strings of equal length, while raising an appropriate error for strings of differing lengths.","solution":"def hamming_distance(str1, str2): Computes the Hamming distance between two strings of equal length. Raises a ValueError if the input strings do not have the same length. if len(str1) != len(str2): raise ValueError(\\"Strings must be of equal length\\") return sum(1 for x, y in zip(str1, str2) if x != y)"},{"question":"In this problem, you are required to complete the function `generate_prime_factors`. The goal of this function is to return the prime factors of a given positive integer `n`. The function should: 1. Find all prime factors of `n`. 2. Return a list of prime factors in ascending order. Here is a template of the code, with some parts left for you to complete: ```python def generate_prime_factors(n): Returns a list of prime factors of the given positive integer. Parameters: n (int): A positive integer to factorize. Returns: list: A list of prime factors of n in ascending order. factors = [] # Checking for the number of 2s that divide n # # Your code here # # n must be odd at this point so we can skip even numbers # # Your code here # # This condition is to check if n is a prime number greater than 2 # # Your code here # return factors ``` Test your function with the following inputs: ```python print(generate_prime_factors(56)) # Output should be [2, 2, 2, 7] print(generate_prime_factors(97)) # Output should be [97], since 97 is a prime number print(generate_prime_factors(100)) # Output should be [2, 2, 5, 5] ``` Write the `generate_prime_factors` function following the instructions and ensure it handles positive integers correctly.","solution":"def generate_prime_factors(n): Returns a list of prime factors of the given positive integer. Parameters: n (int): A positive integer to factorize. Returns: list: A list of prime factors of n in ascending order. factors = [] # Checking for the number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point so we can skip even numbers for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # This condition is to check if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"You are required to write a Python function `merge_sorted_lists(list1, list2)` that merges two pre-sorted lists into a single sorted list. Here are the detailed requirements: 1. The function should take two input parameters, `list1` and `list2`, both of which are lists of integers sorted in non-decreasing order. 2. The function should return a single list that contains all the integers from `list1` and `list2`, merged into a sorted sequence. The function signature should be: ```python def merge_sorted_lists(list1, list2): ``` # Example Suppose `list1` and `list2` are: ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] ``` The function `merge_sorted_lists(list1, list2)` should return: ```python [1, 2, 3, 4, 5, 6, 7, 8] ``` # Additional Notes - You may assume that neither `list1` nor `list2` are `None` and that both contain only integers. - The function should operate with a time complexity of `O(n + m)`, where `n` and `m` are the lengths of `list1` and `list2`, respectively.","solution":"def merge_sorted_lists(list1, list2): Merges two pre-sorted lists into a single sorted list. Parameters: list1 (List[int]): A list of integers sorted in non-decreasing order. list2 (List[int]): A list of integers sorted in non-decreasing order. Returns: List[int]: A single sorted list that contains all the integers from list1 and list2. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"** Write a function that takes a list of integers and a target sum, and returns a tuple of two integers from the list that add up to the target sum. The function should return `None` if no such pair exists. Your function should be named `find_pair_with_sum` and it should use an optimized approach for finding the pair (Hint: Use a dictionary to store the complements). Here are the details for your function: 1. **Function Name**: `find_pair_with_sum` 2. **Parameters**: - `numbers` (list of integers): A list of integers. - `target_sum` (integer): The target sum. 3. **Functionality**: - Return a tuple of two integers from the list that add up to the target sum. - If no such pair exists, return `None`. **Example**: ```python numbers = [2, 7, 11, 15] target_sum = 9 result = find_pair_with_sum(numbers, target_sum) # Expected output: (2, 7) numbers = [1, 2, 3, 4, 5] target_sum = 10 result = find_pair_with_sum(numbers, target_sum) # Expected output: None ``` **Constraints**: - The function should have a time complexity of O(n). **Libraries**: You are not allowed to use any external libraries for this problem. ---","solution":"def find_pair_with_sum(numbers, target_sum): Finds a pair of integers in the given list that add up to the target sum. Parameters: numbers: List of integers target_sum: Integer Returns: A tuple of two integers from the list that add up to the target sum, or None if no such pair exists. seen = {} for number in numbers: complement = target_sum - number if complement in seen: return (complement, number) seen[number] = True return None"},{"question":"** You are tasked with creating a Python function named `find_majority_element(lst)`. This function will identify if there is an element in the list `lst` that appears more than half the time. If such an element exists, the function should return it. If no such element exists, the function should return `None`. Here are the detailed steps and requirements for the function: 1. If the input list `lst` is empty, the function should return `None`. 2. The function should determine the length of the list `n`. 3. It should then count the occurrences of each element in the list. 4. If any element\'s count exceeds `n/2`, return that element. 5. If no such element is found, return `None`. 6. The function should run in linear time, O(n), and use constant space, if possible. Your task is to develop this function `find_majority_element(lst)`, implementing all functionalities mentioned, ensuring its efficiency and correctness according to the provided requirements. ```python def find_majority_element(lst): # Implement the function here ``` **","solution":"def find_majority_element(lst): Determines if there is an element in the list `lst` that appears more than half the time. Returns the element if it exists, otherwise returns `None`. if not lst: return None count = 0 candidate = None for num in lst: if count == 0: candidate = num count += (1 if num == candidate else -1) if lst.count(candidate) > len(lst) / 2: return candidate return None"},{"question":"You are tasked with creating a Python function that generates a list of prime numbers within a given range. The purpose of this problem is to understand and implement a basic algorithm to identify prime numbers, as well as manage user input and provide appropriately formatted output. **Function Specification:** - Name: `generate_primes` - Parameters: None - The function should: 1. Request the start and end of the range from the user through input. Ensure the start and end values are integers provided by the user. 2. Generate and return a list of all prime numbers within the specified range (inclusive). **Details:** - You should implement a helper function `is_prime(n)` that returns `True` if `n` is a prime number, and `False` otherwise. - A prime number is greater than 1 and has no divisors other than 1 and itself. - Handle edge cases where user input might not form a valid range (e.g., start greater than end). - Ensure proper exception handling for non-integer inputs. - The primary function should handle the user input and call the helper function to determine prime status of numbers within the range. **Example Usage:** ```python generate_primes() ``` **Expected Output:** - If the user provides a valid range (e.g., 10 to 50), it might print: ``` Prime numbers between 10 and 50: [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] ``` - If no primes exist in the given range, it should print: ``` No prime numbers found in the given range. ```","solution":"def is_prime(n): Check if a number is prime. :param n: Integer to check. :return: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def generate_primes(): Generate a list of prime numbers within a user-specified range. Request start and end values from the user. try: start = int(input(\\"Enter the start of the range: \\")) end = int(input(\\"Enter the end of the range: \\")) if start > end: print(\\"Invalid range: start should be less than or equal to end.\\") return [] primes = [i for i in range(start, end + 1) if is_prime(i)] if primes: print(f\\"Prime numbers between {start} and {end}: {primes}\\") else: print(\\"No prime numbers found in the given range.\\") return primes except ValueError: print(\\"Invalid input: Please enter valid integers for the range.\\") return [] # Example usage # generate_primes()"},{"question":"You are required to implement a function that simulates the process of assigning grades to students based on their scores. Given a list of tuples, where each tuple contains a student\'s name and their score, you need to assign grades according to the following scheme: - \\"A\\" for scores 90 and above, - \\"B\\" for scores between 80 and 89, - \\"C\\" for scores between 70 and 79, - \\"D\\" for scores between 60 and 69, - \\"F\\" for scores below 60. Additionally, you should determine the highest and lowest grades in the class, calculate the average score, and the execution time to perform this task using the `time.time` function. # Function Specification - **Function Name**: `assign_grades` - **Parameters**: - `students` (list of tuples): Each tuple contains the name of a student (string) and their score (integer). # Steps to Implement 1. Initialize a dictionary to store the grades for each student. 2. Iterate through the `students` list and assign grades based on the score. 3. Determine the highest and lowest grades in the class. 4. Calculate the average score. 5. Measure the execution time for the entire process using `time.time`. 6. Return a dictionary containing the students and their grades, the highest and lowest grades, and the average score. Print the execution time. # Example ```python students = [(\\"Alice\\", 85), (\\"Bob\\", 92), (\\"Charlie\\", 78), (\\"David\\", 65), (\\"Eve\\", 55)] grades_info = assign_grades(students) ``` In this example, `assign_grades` should return: ```python { \'grades\': {\'Alice\': \'B\', \'Bob\': \'A\', \'Charlie\': \'C\', \'David\': \'D\', \'Eve\': \'F\'}, \'highest_grade\': \'A\', \'lowest_grade\': \'F\', \'average_score\': 75.0 } ``` and print the execution time. # Constraints - Use the `time.time` function to measure the execution time. - Assume that all scores are between 0 and 100. # Notes - The returned dictionary should have the keys: \'grades\', \'highest_grade\', \'lowest_grade\', and \'average_score\'.","solution":"import time def assign_grades(students): start_time = time.time() grades = {} total_score = 0 # Grade assignment logic for name, score in students: if score >= 90: grade = \'A\' elif score >= 80: grade = \'B\' elif score >= 70: grade = \'C\' elif score >= 60: grade = \'D\' else: grade = \'F\' grades[name] = grade total_score += score # Determine highest and lowest grades all_grades = list(grades.values()) highest_grade = min(all_grades) lowest_grade = max(all_grades) # Calculate average score average_score = total_score / len(students) end_time = time.time() execution_time = end_time - start_time print(f\'Execution time: {execution_time} seconds\') return { \'grades\': grades, \'highest_grade\': highest_grade, \'lowest_grade\': lowest_grade, \'average_score\': average_score }"},{"question":"You are tasked with writing a function `generate_wave` that creates and returns a sine wave using numpy. This function will help you understand numerical operations and plotting using `numpy.sin` and `numpy.linspace`. The function `generate_wave` should take three parameters: - `amplitude` (float): the peak value of the sine wave. - `frequency` (float): the number of cycles the wave completes in one unit of time. - `samples` (int): the number of sample points to generate. The sine wave is given by the following formula: [ y = amplitude times sin(2 pi times frequency times t) ] where ( t ) represents the sampled time points between 0 and 1 (inclusive). Your function should: 1. Generate the time points using `numpy.linspace` from 0 to 1 with `samples` number of points. 2. Calculate the sine wave values using `numpy.sin`. 3. Return the sine wave values as a numpy array. __Example Usage:__ ```python # Example usage of the function sine_wave = generate_wave(1.0, 5.0, 100) print(sine_wave) # Expected output may be something similar to: # [ 0.00000000e+00 3.09016994e-01 5.87785252e-01 8.09016994e-01 # 9.51056516e-01 1.00000000e+00 9.51056516e-01 8.09016994e-01 # 5.87785252e-01 3.09016994e-01 1.22464680e-16 -3.09016994e-01 # -5.87785252e-01 -8.09016994e-01 -9.51056516e-01 -1.00000000e+00 # -9.51056516e-01 -8.09016994e-01 -5.87785252e-01 -3.09016994e-01 # ... ] ``` __Note__: Ensure that you use both `numpy.sin` and `numpy.linspace` as specified in the requirements.","solution":"import numpy as np def generate_wave(amplitude, frequency, samples): Generates a sine wave using the specified amplitude, frequency, and number of samples. Parameters: amplitude (float): the peak value of the sine wave. frequency (float): the number of cycles the wave completes in one unit of time. samples (int): the number of sample points to generate. Returns: numpy.ndarray: Array of sine wave values. t = np.linspace(0, 1, samples) wave = amplitude * np.sin(2 * np.pi * frequency * t) return wave"},{"question":"You are provided with a list of dictionaries where each dictionary contains details about a library book including \'title\', \'author\', \'publication_year\', and \'genre\'. Your task is to write a function that calculates and displays statistics on the books in the library. Specifically, you need to find the most common genre, the number of books published in each decade starting from 1900, and the most prolific author (the author with the most number of books). The function you need to implement is named `book_stats`, and it should take the list of dictionaries as input and print out the most common genre, a count of books published in each decade from 1900, and the most prolific author. Requirements: 1. Utilize the `collections.Counter` to easily count occurrences of genres and authors. 2. Calculate the decade for each book\'s publication year and count the number of books in each decade. 3. The statistics should be printed in a user-friendly format that mentions what the most common genre, the count of books per decade, and the most prolific author are. Expected Output Format: 1. The most common genre, printed in a readable format. 2. A count of books published in each decade, starting from 1900, formatted as a dictionary. 3. The most prolific author, printed in a readable format. Example: ```python books = [ {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'publication_year\': 1960, \'genre\': \'Fiction\'}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'publication_year\': 1949, \'genre\': \'Dystopian\'}, {\'title\': \'Animal Farm\', \'author\': \'George Orwell\', \'publication_year\': 1945, \'genre\': \'Political Satire\'}, {\'title\': \'Pride and Prejudice\', \'author\': \'Jane Austen\', \'publication_year\': 1813, \'genre\': \'Fiction\'}, {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'publication_year\': 1925, \'genre\': \'Fiction\'}, {\'title\': \'Brave New World\', \'author\': \'Aldous Huxley\', \'publication_year\': 1932, \'genre\': \'Dystopian\'} ] book_stats(books) ``` Output: ``` The most common genre is: Fiction Books published in each decade from 1900: {1900: 0, 1910: 0, 1920: 1, 1930: 1, 1940: 2, 1950: 0, 1960: 1, 1970: 0, 1980: 0, 1990: 0, 2000: 0, 2010: 0, 2020: 0} The most prolific author is: George Orwell ```","solution":"from collections import Counter def book_stats(books): if not books: print(\\"No book data available.\\") return genres = [book.get(\'genre\') for book in books] authors = [book.get(\'author\') for book in books] publication_years = [book.get(\'publication_year\') for book in books] genre_counter = Counter(genres) author_counter = Counter(authors) # Calculate books per decade starting from 1900 books_per_decade = {decade: 0 for decade in range(1900, 2030, 10)} for year in publication_years: if year >= 1900: decade = (year // 10) * 10 books_per_decade[decade] += 1 most_common_genre = genre_counter.most_common(1) most_prolific_author = author_counter.most_common(1) print(f\\"The most common genre is: {most_common_genre[0][0]}\\") print(f\\"Books published in each decade from 1900: {books_per_decade}\\") print(f\\"The most prolific author is: {most_prolific_author[0][0]}\\")"},{"question":"You have been asked to create a program that processes sales data to determine the top-selling product for a specific year. You are provided with a list of dictionaries, where each dictionary contains information about a single sale, including the `product_name`, `quantity` sold, and `sale_date`. Your task is to write a function that accepts the list of sale records and a year as arguments and returns the name of the product that had the highest quantity sold in that year. If there is a tie (multiple products with the same highest quantity sold), return the product name that appears first alphabetically. # Function Signature ```python def top_selling_product(sales_data, year): # your code here ``` # Parameters - `sales_data` (list of dict): A list of dictionaries, where each dictionary has the keys `product_name` (str), `quantity` (int), and `sale_date` (str in \'yyyy-mm-dd\' format). - `year` (int): The year for which the top-selling product is to be identified. # Returns - (str): The name of the top-selling product for the given year. # Example ```python sales_data = [ {\\"product_name\\": \\"Laptop\\", \\"quantity\\": 50, \\"sale_date\\": \\"2022-01-15\\"}, {\\"product_name\\": \\"Smartphone\\", \\"quantity\\": 80, \\"sale_date\\": \\"2022-05-21\\"}, {\\"product_name\\": \\"Laptop\\", \\"quantity\\": 30, \\"sale_date\\": \\"2021-03-17\\"}, {\\"product_name\\": \\"Headphones\\", \\"quantity\\": 50, \\"sale_date\\": \\"2022-07-24\\"} ] print(top_selling_product(sales_data, 2022)) # Output: # \\"Smartphone\\" ``` # Requirements: - Iterate through the provided `sales_data` and filter by the given `year`. - Sum the quantities of each product sold within that year. - Determine the top-selling product based on the total quantities. - Ensure to handle the tie case by returning the alphabetically first product name. - Assume the input data is correctly formatted and no validation is necessary.","solution":"def top_selling_product(sales_data, year): Returns the name of the top-selling product for the given year based on the sales data. In case of a tie, the product name that appears first alphabetically is returned. from collections import defaultdict product_sales = defaultdict(int) # Iterate over the sales data for sale in sales_data: sale_year = int(sale[\'sale_date\'][:4]) if sale_year == year: product_sales[sale[\'product_name\']] += sale[\'quantity\'] # Finding the top-selling product top_product = None max_quantity = 0 for product, quantity in product_sales.items(): if quantity > max_quantity or (quantity == max_quantity and product < top_product): top_product = product max_quantity = quantity return top_product"},{"question":"You are provided with a CSV file that contains information about students and their scores in different subjects. Your objective is to analyze this data to determine the average score of each student and their grade based on the average score. Finally, create a summary report that includes each student\'s average score and grade. Write a function named `analyze_student_scores` that takes in the filename of the CSV file as input and returns the summarized results as a dictionary. The function should use the `pandas` library to process the data. The CSV file has the following format: ``` StudentID,Name,Subject,Score 1,John,Math,85 1,John,Physics,90 2,Jane,Chemistry,78 2,Jane,Math,80 3,Emily,Physics,92 ... ``` The dictionary returned by the function should have the following format: ```python { \'summary\': [ { \'StudentID\': student_id_1, \'Name\': student_name_1, \'AverageScore\': average_score_1, \'Grade\': grade_1 }, { \'StudentID\': student_id_2, \'Name\': student_name_2, \'AverageScore\': average_score_2, \'Grade\': grade_2 }, ... ] } ``` **Instructions:** 1. Read the CSV file using pandas. 2. Calculate the average score for each student. 3. Assign grades based on the following criteria: - A: 90 and above - B: 80 to 89 - C: 70 to 79 - D: 60 to 69 - F: Below 60 4. Create a summary report of each student\'s average score and grade. 5. Return the results as a dictionary in the specified format. **Example:** If the CSV file contains: ``` StudentID,Name,Subject,Score 1,John,Math,85 1,John,Physics,90 2,Jane,Chemistry,78 2,Jane,Math,80 3,Emily,Physics,92 3,Emily,Math,88 ``` Calling the function `analyze_student_scores(\'student_scores.csv\')` should return: ```python { \'summary\': [ { \'StudentID\': 1, \'Name\': \'John\', \'AverageScore\': 87.5, \'Grade\': \'B\' }, { \'StudentID\': 2, \'Name\': \'Jane\', \'AverageScore\': 79.0, \'Grade\': \'C\' }, { \'StudentID\': 3, \'Name\': \'Emily\', \'AverageScore\': 90.0, \'Grade\': \'A\' } ] } ```","solution":"import pandas as pd def analyze_student_scores(filename): # Read CSV file df = pd.read_csv(filename) # Calculate average scores for each student avg_scores = df.groupby([\'StudentID\', \'Name\'])[\'Score\'].mean().reset_index() avg_scores = avg_scores.rename(columns={\'Score\': \'AverageScore\'}) # Assign grades based on average scores def assign_grade(score): if score >= 90: return \'A\' elif score >= 80: return \'B\' elif score >= 70: return \'C\' elif score >= 60: return \'D\' else: return \'F\' avg_scores[\'Grade\'] = avg_scores[\'AverageScore\'].apply(assign_grade) # Create the summary report summary = avg_scores.to_dict(orient=\'records\') return {\'summary\': summary}"},{"question":"You are required to write a Python function named `is_palindrome_permutation` that checks if any permutation of a given string can form a palindrome. A palindrome is a string that reads the same forwards and backwards, ignoring spaces and punctuation, and case-insensitivity. To solve this, the function should determine whether the input string can be rearranged to form such a palindrome. Function signature: ```python def is_palindrome_permutation(s: str) -> bool: pass ``` # Example: ```python >>> is_palindrome_permutation(\\"Tact Coa\\") True >>> is_palindrome_permutation(\\"Able was I ere I saw Elba\\") True >>> is_palindrome_permutation(\\"random\\") False ``` # Guidelines: 1. Ignore spaces, punctuation, and case when checking for palindromes. 2. Consider the order of letters irrelevant for the purpose of this function. 3. An empty string should be considered a palindrome. # Constraints: 1. The input string `s` will have at most length 1000. 2. Use Python’s built-in string methods for operations like case conversion and removal of non-alphabetic characters. # Explanation: In the first example, \\"Tact Coa\\" can be rearranged to form \\"taco cat\\", which is a palindrome. In the second example, \\"Able was I ere I saw Elba\\" can be rearranged to form itself when ignoring casing and spaces. In the third example, there is no permutation of \\"random\\" that forms a palindrome. # Requirements: 1. Ensure that the solution runs efficiently for strings of length up to 1000. 2. Utilize an appropriate data structure to count the occurrences of characters. 3. Return a boolean value indicating whether the string can be rearranged into a palindrome.","solution":"def is_palindrome_permutation(s: str) -> bool: Checks if any permutation of the string s can form a palindrome. # Normalize the string: remove spaces and non-alphabetic characters, convert to lowercase s = \'\'.join(char.lower() for char in s if char.isalpha()) # Dictionary to count the occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the counts: at most one character can have an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"You have been assigned to create a function called `calculate_separation_distance` in Python that calculates the Euclidean distance between two points in a 3-dimensional space. This is a common task in fields like computer graphics, computational geometry, and physics simulations. The Euclidean distance ( d ) between two points ( (x_1, y_1, z_1) ) and ( (x_2, y_2, z_2) ) in 3-dimensional space is given by: [ d = sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2 + (z_2 - z_1)^2} ] For this problem, you need to write a function that: 1. Takes six arguments: `x1`, `y1`, `z1`, `x2`, `y2`, `z2` which represent the coordinates of the two points in 3D space. 2. Computes the squared differences for each coordinate axis: ( (x_2 - x_1)^2 ), ( (y_2 - y_1)^2 ), and ( (z_2 - z_1)^2 ). 3. Sums these squared differences and then computes the square root of the sum using the `math.sqrt` function to get the Euclidean distance. 4. Returns the calculated Euclidean distance as a floating-point number. You must use the `math` library\'s `math.sqrt` function as specified above. Function signature: `def calculate_separation_distance(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float) -> float` Example: ```python # Example of input and expected output calculate_separation_distance(1, 2, 3, 4, 5, 6) # Expected output: 5.196152422706632 ```","solution":"import math def calculate_separation_distance(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float) -> float: Calculates the Euclidean distance between two points in 3-dimensional space. Args: x1 (float): X-coordinate of the first point. y1 (float): Y-coordinate of the first point. z1 (float): Z-coordinate of the first point. x2 (float): X-coordinate of the second point. y2 (float): Y-coordinate of the second point. z2 (float): Z-coordinate of the second point. Returns: float: The Euclidean distance between the two points. # Compute the squared differences dx = (x2 - x1) ** 2 dy = (y2 - y1) ** 2 dz = (z2 - z1) ** 2 # Compute the square root of the sum of squared differences distance = math.sqrt(dx + dy + dz) return distance"},{"question":"You are developing a Python program to parse and process CSV files. Implement a function named `summarize_csv` that takes a single argument, `csv_filename`, which is a string representing the name of a CSV file. The function should perform the following tasks: 1. Read the CSV file specified by `csv_filename`. 2. Calculate the sum of all numerical values in the second column, assuming the first row is a header. 3. Write the result to a new file named `summary.txt` in the format: `Sum of column 2: <calculated sum>`. Your function should handle the following conditions: - Assume the CSV file has a comma `,` as the delimiter. - Skip any rows where the second column is not a number. - Ensure the input file is properly closed after reading. **Requirements:** - Use Python\'s built-in `csv` module to handle CSV file reading. - Handle exceptions gracefully, such as cases where the file might not exist or contain invalid data. Here\'s the signature for the function you need to write: ```python def summarize_csv(csv_filename: str): Calculates the sum of the second column in a CSV file and writes the result to summary.txt. pass ```","solution":"import csv def summarize_csv(csv_filename: str): Calculates the sum of the second column in a CSV file and writes the result to summary.txt. total = 0 try: with open(csv_filename, \'r\') as csvfile: csvreader = csv.reader(csvfile) next(csvreader) # Skip the header for row in csvreader: try: total += float(row[1]) except (ValueError, IndexError): continue with open(\'summary.txt\', \'w\') as summary_file: summary_file.write(f\'Sum of column 2: {total}n\') except FileNotFoundError: with open(\'summary.txt\', \'w\') as summary_file: summary_file.write(\'Sum of column 2: 0n\')"},{"question":"Implement a function `calculate_statistics()` that takes a list of integers as input and returns a dictionary containing the following statistical properties: 1. The count of integers in the list. 2. The sum of all integers in the list. 3. The mean (average) value of the integers in the list. 4. The median value of the integers in the list. 5. The standard deviation of the integers in the list. The dictionary keys should be as follows: - \\"count\\" - \\"sum\\" - \\"mean\\" - \\"median\\" - \\"std_dev\\" Note: - You can assume that the input list will have at least one integer. - The mean is calculated as the sum of all integers divided by the count. - The median is the middle number in a sorted, odd-length list, or the average of the two middle numbers in an even-length list. - The standard deviation is calculated using the formula: [ std_dev = sqrt{frac{sum (x_i - mean)^2}{N}} ] where (x_i) represents each integer in the list and (N) is the count of integers. Example: ```python calculate_statistics([1, 2, 3, 4, 5, 6, 7]) # Output: # { # \\"count\\": 7, # \\"sum\\": 28, # \\"mean\\": 4.0, # \\"median\\": 4, # \\"std_dev\\": 2.0 # } ``` Your task is to implement the `calculate_statistics()` function to perform the above operations correctly.","solution":"import math def calculate_statistics(lst): Takes a list of integers and returns a dictionary with statistical properties. # Calculate count count = len(lst) # Calculate sum total_sum = sum(lst) # Calculate mean mean = total_sum / count # Calculate median sorted_lst = sorted(lst) if count % 2 == 0: median = (sorted_lst[count // 2 - 1] + sorted_lst[count // 2]) / 2 else: median = sorted_lst[count // 2] # Calculate standard deviation variance = sum((x - mean) ** 2 for x in lst) / count std_dev = math.sqrt(variance) return { \\"count\\": count, \\"sum\\": total_sum, \\"mean\\": mean, \\"median\\": median, \\"std_dev\\": std_dev }"},{"question":"You are asked to implement a matrix multiplication operation, which is a fundamental task in many scientific and engineering applications, including machine learning and graphics. Your task is to write a function `matrixMultiply(A, B)` that takes two matrices `A` and `B` and returns their product. The function should handle basic error checking, such as ensuring that the number of columns in `A` is equal to the number of rows in `B`. Here are the detailed steps and constraints: 1. Check if the inner dimensions of `A` and `B` match (i.e., the number of columns in `A` is equal to the number of rows in `B`). If not, return an appropriate error message. 2. If the matrices can be multiplied, perform the multiplication and return the resulting matrix. 3. Do not use any high-level libraries like `numpy`; instead, implement the multiplication using basic Python nested loops. # Example: Suppose the input matrices `A` and `B` are: ``` A = [[1, 2, 3], [4, 5, 6]] B = [[7, 8], [9, 10], [11, 12]] ``` The output should be: ``` [[58, 64], [139, 154]] ``` as the product of `A` and `B`. # Function Signature: ```python def matrixMultiply(A: list[list[int]], B: list[list[int]]) -> list[list[int]]: # your code here ``` # Constraints: - Handle edge cases where `A` or `B` are empty matrices. - You can assume that the provided matrices will contain only integers. - Optimize the function for both clarity and performance using fundamental programming constructs. # Notes: - Remember to validate the input matrices before proceeding with the multiplication. - Aim for a solution that clearly demonstrates your understanding of matrix multiplication logic.","solution":"def matrixMultiply(A, B): Multiplies two matrices A and B and returns their product matrix. If the number of columns in A is not equal to the number of rows in B, returns an appropriate error message. # Check if A and B are non-empty and have matching inner dimensions if not A or not B or len(A[0]) != len(B): return \\"Error: Matrices cannot be multiplied due to dimension mismatch\\" # Initialize the result matrix with dimensions len(A) x len(B[0]) result = [[0] * len(B[0]) for _ in range(len(A))] # Perform matrix multiplication for i in range(len(A)): for j in range(len(B[0])): for k in range(len(A[0])): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"# Problem Statement In graph theory, it\'s common to represent connections or relationships between entities using an adjacency matrix. You are required to write a function `is_connected(graph: List[List[int]]) -> bool` that determines whether a given undirected graph is connected or not. A graph is considered connected if there is a path between every pair of vertices. # Requirements 1. **Function Name**: `is_connected` 2. **Parameters**: - `graph`: A 2D list (adjacency matrix) representing an undirected graph, where `graph[i][j]` is 1 if there is an edge between vertices `i` and `j`, and 0 otherwise. Assume no self-loops (`graph[i][i] = 0` for all `i`). 3. **Returns**: A `bool` indicating whether the graph is connected (`True`) or not (`False`). # Background An adjacency matrix is a square matrix used to represent a finite graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph. # Constraints 1. The input graph is undirected and represented by a symmetric adjacency matrix. 2. The number of vertices (length of the adjacency matrix) will be at least 2 and at most 100. 3. Do not use any external libraries; only built-in Python functionalities are allowed. 4. Handle any input sizes appropriately by ensuring an efficient solution. # Example ```python # Example usage of is_connected: graph = [ [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0] ] # The graph described above is connected. print(is_connected(graph)) # Expected output: True graph = [ [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0] ] # The graph described above is not connected. print(is_connected(graph)) # Expected output: False ``` Implement the function `is_connected` according to the description and constraints given. Ensure your implementation is efficient and follows best practices when working with adjacency matrices in Python.","solution":"from typing import List def is_connected(graph: List[List[int]]) -> bool: def dfs(node, visited): for neighbor, connected in enumerate(graph[node]): if connected and neighbor not in visited: visited.add(neighbor) dfs(neighbor, visited) n = len(graph) visited = set() # Start DFS from the first node. visited.add(0) dfs(0, visited) # Check if all nodes are visited. return len(visited) == n"},{"question":"You are tasked with implementing a function to simulate a move in a game of Tic-Tac-Toe. The function will place a player\'s mark on the board at a specified position. The game board is represented as a 2D list where empty slots are marked with `\'-\'`, and players\' marks are `\'X\'` and `\'O\'`. Implement the function `make_move(board, row, column, player)`, where: - `board` is a 2D list representing the current state of the game board. - `row` is an integer (0-indexed) representing the row number where the current player wants to place their mark. - `column` is an integer (0-indexed) representing the column number where the current player wants to place their mark. - `player` is a character (`\'X\'` or `\'O\'`) representing the current player. The function should: 1. Check if the specified position on the board is empty (i.e., marked with `\'-\'`). 2. Place the current player\'s mark on the specified position. 3. Return the new state of the game board as a 2D list. 4. If the specified position is already occupied, return an error message saying \\"Position already taken.\\" without altering the board. Example: ```python board = [[\'-\', \'-\', \'-\'], [\'-\', \'X\', \'-\'], [\'O\', \'-\', \'X\']] new_board = make_move(board, 0, 1, \'O\') print(new_board) # Output: # [[\'-\', \'O\', \'-\'], # [\'-\', \'X\', \'-\'], # [\'O\', \'-\', \'X\']] ```","solution":"def make_move(board, row, column, player): Place the player\'s mark on the specified position on the Tic-Tac-Toe board. Args: - board: list of list of str, representing the game board. - row: int, the row index where the player wants to place their mark. - column: int, the column index where the player wants to place their mark. - player: str, the player\'s mark (\'X\' or \'O\'). Returns: - list of list of str: The updated game board with the player\'s mark placed. - str: \\"Position already taken.\\" if the position is not empty. if board[row][column] == \'-\': board[row][column] = player return board else: return \\"Position already taken.\\""},{"question":"You are asked to create a function `find_minimum_window` that finds the smallest contiguous subarray containing all the characters of a given target string `target` from the input string `source`. Both the input strings and the target string are composed of lowercase English letters. The function should return the smallest window in `source` that contains all the characters of `target`. If no such window exists, the function should return an empty string. The function should take two arguments: 1. `source`: The string to search within. 2. `target`: The string containing the characters to be matched. The function should perform the following steps: 1. Use a sliding window approach to identify all possible windows in `source` that contain all characters from `target`. 2. Track the current smallest window that meets the condition. 3. Return the smallest window as a string. **Function Signature** ```python def find_minimum_window(source, target): pass ``` **Requirements and Constraints** - Ensure that the function handles cases where `target` is longer than `source` by returning an empty string. - The characters in the window do not need to appear in the order they appear in `target`. - If there are multiple windows that qualify, return the first one that was found. - The function should have a time complexity that is reasonable for large input strings, preferably O(n). **Examples** ```python # Example 1 source = \\"ADOBECODEBANC\\" target = \\"ABC\\" find_minimum_window(source, target) # Output: \\"BANC\\" # Example 2 source = \\"a\\" target = \\"a\\" find_minimum_window(source, target) # Output: \\"a\\" # Example 3 source = \\"a\\" target = \\"aa\\" find_minimum_window(source, target) # Output: \\"\\" ```","solution":"from collections import Counter def find_minimum_window(source, target): if not source or not target or len(target) > len(source): return \\"\\" target_counter = Counter(target) current_counter = Counter() start, end = 0, 0 required_chars = len(target_counter) formed_chars = 0 min_window = float(\'inf\'), None, None l = 0 # Left boundary of window for r in range(len(source)): # Right boundary of window char = source[r] current_counter[char] += 1 if char in target_counter and current_counter[char] == target_counter[char]: formed_chars += 1 while l <= r and formed_chars == required_chars: char = source[l] if r - l + 1 < min_window[0]: min_window = (r - l + 1, l, r) current_counter[char] -= 1 if char in target_counter and current_counter[char] < target_counter[char]: formed_chars -= 1 l += 1 if min_window[0] == float(\'inf\'): return \\"\\" return source[min_window[1]:min_window[2]+1]"},{"question":"Write a function that takes a list of integers and returns a list of tuples, where each tuple contains three consecutive integers from the original list that are in strictly increasing order. The function should output: list: A list of tuples containing three consecutive integers in strictly increasing order. You should write self-contained code starting with: ``` def find_increasing_triplets(data_list): ```","solution":"def find_increasing_triplets(data_list): Takes a list of integers and returns a list of tuples, where each tuple contains three consecutive integers from the original list that are in strictly increasing order. result = [] for i in range(len(data_list) - 2): if data_list[i] < data_list[i + 1] < data_list[i + 2]: result.append((data_list[i], data_list[i + 1], data_list[i + 2])) return result"},{"question":"Write a function named `find_cluster_centroids` that calculates the centroids of clusters in a dataset. You will need to use the `numpy` library for array operations. # Function Signature ```python def find_cluster_centroids(data, labels, num_clusters): pass ``` # Inputs - `data`: A 2D numpy array where each row represents a data point, and each column represents a feature. - `labels`: A 1D numpy array of the same length as the number of rows in `data`, where each element is an integer representing the cluster label of the corresponding data point. - `num_clusters`: An integer representing the number of clusters. # Output - Returns a 2D numpy array of shape `(num_clusters, number_of_features)` containing the coordinates of the centroids for each cluster. # Requirements You must: 1. Use `numpy.zeros` to initialize the centroids array. 2. Iterate through the clusters to compute the mean of the data points assigned to each cluster to determine the centroid. # Example ```python import numpy as np data = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) labels = np.array([0, 0, 1, 1, 1]) num_clusters = 2 centroids = find_cluster_centroids(data, labels, num_clusters) print(centroids) ``` Expected Output: ``` [[2. 3.] [7. 8.]] ``` # Additional Information - Do not assume the size of the input arrays; your function must work for any valid `data` and `labels` inputs. - The centroids should be calculated as the mean of the data points assigned to each cluster.","solution":"import numpy as np def find_cluster_centroids(data, labels, num_clusters): Calculates the centroids of clusters in a dataset. Parameters: data (numpy.ndarray): 2D array where each row represents a data point, and each column represents a feature. labels (numpy.ndarray): 1D array of the same length as the number of rows in data, where each element is an integer representing the cluster label of the corresponding data point. num_clusters (int): An integer representing the number of clusters. Returns: numpy.ndarray: 2D array of shape (num_clusters, number_of_features) containing the coordinates of the centroids for each cluster. number_of_features = data.shape[1] centroids = np.zeros((num_clusters, number_of_features)) for cluster in range(num_clusters): cluster_data = data[labels == cluster] if cluster_data.size > 0: # Avoid division by zero if there are no points in the cluster centroids[cluster] = cluster_data.mean(axis=0) return centroids"},{"question":"You are given a list of dictionaries representing students and their scores in various subjects. Each student has a unique name and scores in subjects like Mathematics, Science, and English. Your task is to write a function that calculates the average score for each student and then ranks the students based on their average scores in descending order. If two students have the same average score, their names should be compared lexicographically to determine the order. The function `rank_students` should: 1. Accept a parameter `students`, which is a list of dictionaries. Each dictionary contains the following keys: - `name`: a string representing the student\'s name. - `math`, `science`, `english`: integers representing scores in respective subjects. 2. Compute the average score for each student. 3. Sort the students based on their average score in descending order. If two students have the same average score, use their names to break the tie (in lexicographical order). 4. Return a list of tuples where each tuple contains the student\'s name and their average score. Example Function Signature: ```python def rank_students(students): # Function implementation here ``` Example Input: ```python students = [ {\\"name\\": \\"Alice\\", \\"math\\": 95, \\"science\\": 92, \\"english\\": 88}, {\\"name\\": \\"Bob\\", \\"math\\": 91, \\"science\\": 85, \\"english\\": 95}, {\\"name\\": \\"Charlie\\", \\"math\\": 85, \\"science\\": 87, \\"english\\": 91} ] ``` Example Output: ```python [ (\\"Alice\\", 91.67), (\\"Bob\\", 90.33), (\\"Charlie\\", 87.67) ] ```","solution":"def rank_students(students): def average_score(student): return (student[\'math\'] + student[\'science\'] + student[\'english\']) / 3 ranked_students = sorted(students, key=lambda student: (-average_score(student), student[\'name\'])) return [(student[\'name\'], round(average_score(student), 2)) for student in ranked_students]"},{"question":"You are asked to create a function `find_duplicate_numbers(file_path: str) -> List[int]` that finds all the duplicate numbers in a CSV file containing a single column of integers. Each row in the CSV file represents one integer. # Requirements: 1. **Function Name**: `find_duplicate_numbers` 2. **Parameters**: - `file_path` (type: str) - The path to the CSV file containing the list of integers. 3. **Functionality**: The function should: - Read the contents of the CSV file. - Identify and return a list of all numbers that appear more than once. - If there are no duplicates, return an empty list. 4. **Libraries**: You must use the `csv.reader` from Python\'s csv module. # Example Usage: Suppose you have a CSV file located at \\"numbers.csv\\" with the following content: ``` Number 1 2 3 4 2 5 3 6 2 ``` The function call: ```python find_duplicate_numbers(\\"numbers.csv\\") ``` Should return: ```python [2, 3] ``` If there are no duplicates: ```python find_duplicate_numbers(\\"unique_numbers.csv\\") ``` Suppose \\"unique_numbers.csv\\" contains: ``` Number 1 2 3 4 5 6 ``` Should return: ```python [] ```","solution":"import csv from typing import List from collections import Counter def find_duplicate_numbers(file_path: str) -> List[int]: Reads a CSV file containing integers and returns a list of duplicate numbers. Parameters: file_path (str): The path to the CSV file. Returns: List[int]: A list of duplicates found in the file. numbers = [] with open(file_path, \'r\') as csvfile: reader = csv.reader(csvfile) next(reader) # Skip the header row for row in reader: number = int(row[0]) numbers.append(number) count = Counter(numbers) duplicates = [num for num, cnt in count.items() if cnt > 1] return duplicates"},{"question":"In computational graph theory, finding the shortest path between nodes in a weighted graph is a common problem. A well-known algorithm for this task is Dijkstra\'s algorithm. In this problem, you will implement a function named `shortest_path` that calculates the shortest path from a starting node to an ending node in a given directed graph using Dijkstra’s algorithm. You are provided with the following inputs: - `graph` (Dict[int, List[Tuple[int, int]]]): A dictionary where keys are node identifiers (integers) and values are lists of tuples, each representing an edge from the key node to another node with a specified weight `(destination_node, weight)`. - `start_node` (int): The starting node identifier. - `end_node` (int): The ending node identifier. The function should return the shortest path as a list of nodes starting from the `start_node` and ending at the `end_node`. If no such path exists, return an empty list. **Function Signature:** ```python def shortest_path(graph: Dict[int, List[Tuple[int, int]]], start_node: int, end_node: int) -> List[int]: pass ``` Input: - `graph` (dict): The graph represented as an adjacency list. - `start_node` (int): The starting node. - `end_node` (int): The ending node. Output: - `List[int]`: The shortest path from `start_node` to `end_node`. **Requirements:** - Use Dijkstra’s algorithm to find the shortest path. - Handle cases where there is no path between the start and end nodes appropriately. Example: ```python graph = { 0: [(1, 4), (2, 1)], 1: [(3, 1)], 2: [(1, 2), (3, 5)], 3: [] } shortest_path(graph, 0, 3) # Output: [0, 2, 1, 3] shortest_path(graph, 3, 0) # Output: [] ```","solution":"import heapq from typing import List, Dict, Tuple def shortest_path(graph: Dict[int, List[Tuple[int, int]]], start_node: int, end_node: int) -> List[int]: Finds the shortest path from start_node to end_node in a directed weighted graph using Dijkstra\'s algorithm. :param graph: A dictionary where keys are node identifiers and values are lists of (destination_node, weight) tuples. :param start_node: The starting node identifier. :param end_node: The ending node identifier. :return: The shortest path as a list of nodes from start_node to end_node. Returns an empty list if no path exists. # Priority queue to store nodes to explore priority_queue = [(0, start_node, [])] # Dictionary to store the shortest known distance to each node shortest_dist = {start_node: 0} while priority_queue: current_dist, current_node, path = heapq.heappop(priority_queue) # If we reached the end node, return the path with the end node if current_node == end_node: return path + [current_node] # If the current distance is greater than the known shortest distance, skip processing if current_dist > shortest_dist.get(current_node, float(\'inf\')): continue # Explore neighboring nodes for neighbor, weight in graph.get(current_node, []): distance = current_dist + weight if distance < shortest_dist.get(neighbor, float(\'inf\')): shortest_dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor, path + [current_node])) # Return an empty list if there\'s no path to the end node return []"},{"question":"You are given a dataset of user activities on an e-commerce platform. The dataset contains records of user actions, such as `view`, `click`, `purchase`, along with timestamps in a CSV file. You are required to create a Python function that analyzes this dataset to identify the peak activity hours for each type of user action. The function will output a dictionary where each key is an action type and the corresponding value is an integer representing the hour of the day (0-23) with the highest activity for that action. ```python import pandas as pd def peak_activity_hours(file_path): Analyzes a dataset of user activities to find peak activity hour for each action type. :param file_path: Path to the CSV file containing the dataset. :return: A dictionary with action types as keys and peak activity hour as values. # Code implementation here pass ``` The CSV file is structured as follows: - `user_id`: Unique identifier for each user. - `action`: The type of action performed by the user (e.g., `view`, `click`, `purchase`). - `timestamp`: The time when the action was performed, in ISO 8601 format (e.g., `2023-06-15T14:23:45Z`). Steps to implement the function: 1. Read the CSV file into a pandas DataFrame. 2. Convert the `timestamp` column to datetime objects. 3. Extract the hour from the `timestamp` column. 4. Group the data by `action` and `hour` to count the occurrences of each action per hour. 5. Determine the hour with the highest activity for each action type. 6. Create and return a dictionary containing the action types and their corresponding peak activity hours. Example usage: ```python peak_hours = peak_activity_hours(\'user_activities.csv\') print(peak_hours) # Output: {\'view\': 14, \'click\': 16, \'purchase\': 19} ``` When implementing your function, ensure you handle edge cases and provide necessary comments to explain your logic.","solution":"import pandas as pd def peak_activity_hours(file_path): Analyzes a dataset of user activities to find peak activity hour for each action type. :param file_path: Path to the CSV file containing the dataset. :return: A dictionary with action types as keys and peak activity hour as values. # Read the CSV file into a pandas DataFrame df = pd.read_csv(file_path) # Convert the `timestamp` column to datetime objects df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Extract the hour from the `timestamp` column df[\'hour\'] = df[\'timestamp\'].dt.hour # Group the data by `action` and `hour` to count the occurrences of each action per hour action_hour_counts = df.groupby([\'action\', \'hour\']).size().reset_index(name=\'counts\') # Determine the hour with the highest activity for each action type peak_hours = action_hour_counts.loc[action_hour_counts.groupby(\'action\')[\'counts\'].idxmax()] # Create and return a dictionary containing the action types and their corresponding peak activity hours peak_activity = peak_hours.set_index(\'action\')[\'hour\'].to_dict() return peak_activity"},{"question":"**Maze Pathfinding with Breadth-First Search** In this problem, you will implement a pathfinding algorithm to navigate through a maze. The maze is represented as a 2D grid where `1` represents passable paths and `0` represents walls. The objective is to find the shortest path from a starting point to an endpoint using the Breadth-First Search (BFS) algorithm. You are required to write a function named `find_shortest_path` that will take the maze grid, a starting point, and an endpoint as input, and return the length of the shortest path found. If no path exists, the function should return `-1`. Function Signature: ```python def find_shortest_path(maze, start, end): pass ``` Parameters: - `maze` is a list of lists representing a 2D grid of integers (`1` as passable paths and `0` as walls). - `start` is a tuple `(x, y)` representing the starting point coordinates. - `end` is a tuple `(x, y)` representing the endpoint coordinates. Conditions: - You can move up, down, left, or right, but not diagonally. - The starting and ending points are always within bounds and passable. Steps to Solve: 1. Create a queue to store the positions to be explored. 2. Use a set to keep track of the visited nodes. 3. Initialize the queue with the starting point and distance `0`. 4. Perform BFS by dequeuing a node, checking all possible moves, and enqueueing valid moves with the updated distance. 5. If the endpoint is reached, return the current distance. 6. If the queue is empty and the endpoint is not reached, return `-1`. Example Input: ```python maze = [ [1, 0, 1, 1, 1], [1, 1, 1, 0, 1], [0, 1, 0, 1, 1], [1, 1, 1, 1, 0], [0, 0, 1, 1, 1] ] start = (0, 0) end = (4, 4) ``` Example Output: ```python find_shortest_path(maze, start, end) # Output: 8 ``` Here, the shortest path has a length of `8`. If no such path exists, the function should return `-1`. This solution requires understanding of BFS and queue data structures to efficiently solve the problem within the constraints.","solution":"from collections import deque def find_shortest_path(maze, start, end): Finds the shortest path in a maze from start to end using BFS. :param maze: List of lists of integers (1 for paths, 0 for walls) :param start: Tuple (x, y) representing the starting coordinates :param end: Tuple (x, y) representing the ending coordinates :returns: Integer representing the length of the shortest path or -1 if no path exists if start == end: return 0 rows, cols = len(maze), len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and maze[nx][ny] == 1: if (nx, ny) == end: return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"In the realm of file manipulation, it is often necessary to analyze and summarize data from multiple files. One common task is to extract specific information from a series of text files and compile it into a single summary report. Consider you are given multiple text files, each containing lines formatted as \\"item_name: quantity\\". Your task is to consolidate this data into a single summary that indicates the total quantity for each unique item across all files. To achieve this, you need to create a function named `summarize_inventory` that takes a list of filenames as input and returns a dictionary. Each key in the dictionary should be an item name, and the corresponding value should be the total quantity of that item across all provided files. Here\'s an example to illustrate the task: Example: Assume you have three files, `file1.txt`, `file2.txt`, and `file3.txt` with the following content: `file1.txt`: ``` apple: 10 banana: 5 orange: 12 ``` `file2.txt`: ``` apple: 3 banana: 7 grape: 4 ``` `file3.txt`: ``` orange: 8 grape: 6 banana: 2 ``` Calling the function with these files should yield: ```python filenames = [\'file1.txt\', \'file2.txt\', \'file3.txt\'] inventory_summary = summarize_inventory(filenames) print(inventory_summary) # Output: {\'apple\': 13, \'banana\': 14, \'orange\': 20, \'grape\': 10} ``` Instructions: 1. Read each file line by line, extracting the `item_name` and `quantity`. 2. Accumulate the quantities for each `item_name` in a dictionary. 3. Return the final dictionary with all item names and their corresponding total quantities. Implement the `summarize_inventory` function to achieve this task.","solution":"def summarize_inventory(filenames): Consolidates the inventory from multiple files into a single summary. Args: filenames (list): List of filenames to read from. Returns: dict: Dictionary with item names as keys and their total quantities as values. inventory = {} for filename in filenames: with open(filename, \'r\') as file: for line in file: item, quantity = line.strip().split(\': \') quantity = int(quantity) if item in inventory: inventory[item] += quantity else: inventory[item] = quantity return inventory"},{"question":"We are writing a Python function to calculate the number of unique paths in a grid from the top-left corner to the bottom-right corner. The grid is defined by its width and height, and movement is only allowed to the right or down. The function should be named `unique_paths` and will take two arguments: - `width` (int): The width of the grid. - `height` (int): The height of the grid. **Requirements**: - Use a dynamic programming approach to solve the problem. - Handle edge cases where either width or height is zero. - The function should return an integer representing the number of unique paths. Example: ```python def unique_paths(width, height): if width == 0 or height == 0: return 0 dp = [[1] * width for _ in range(height)] for i in range(1, height): for j in range(1, width): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[height-1][width-1] # Example usages print(unique_paths(3, 3)) # should return 6 print(unique_paths(7, 3)) # should return 28 ```","solution":"def unique_paths(width, height): Calculates the number of unique paths in a grid from the top-left corner to the bottom-right corner. :param width: int, width of the grid :param height: int, height of the grid :return: int, number of unique paths if width == 0 or height == 0: return 0 # Initialize a 2D array dp with 1s for the first row and first column dp = [[1] * width for _ in range(height)] for i in range(1, height): for j in range(1, width): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[height-1][width-1]"},{"question":"You are tasked with developing a function that calculates and returns correlation coefficients between numerical variables within a given dataset. Specifically, you will work with a dataset containing various numerical variables and need to compute the pairwise Pearson correlation coefficients. This will help in understanding the linear relationships between each pair of variables in the dataset. To perform this task, we will use the `pandas` library to handle the data in a tabular format. You need to create a function named `correlation_matrix`: Function Signature: ```python def correlation_matrix(filename: str) -> pd.DataFrame: ... ``` Parameters: - `filename` (str): The path to the data file which is a CSV file containing the data. Returns: - `pd.DataFrame`: A dataframe containing the correlation coefficients between all pairs of numerical variables in the dataset. Details: 1. Load the data from the CSV file. The data will have a header and may contain various numerical columns. 2. Use `pandas` to bring the data into a DataFrame. 3. Calculate the Pearson correlation coefficients for each pair of numerical variables. 4. Return the correlation matrix as a pandas DataFrame. Example: If your CSV data (`example_data.csv`) looks like this: ``` A,B,C 1.2,4.5,7.8 2.3,5.6,8.9 3.4,6.7,9.0 4.5,7.8,10.1 ... ``` The resulting correlation matrix output dataframe of the function will look like: ``` A B C A 1.000000 1.000000 0.984774 B 1.000000 1.000000 0.995821 C 0.984774 0.995821 1.000000 ```","solution":"import pandas as pd def correlation_matrix(filename: str) -> pd.DataFrame: Loads data from a CSV file and computes the pairwise Pearson correlation coefficients for all numerical variables in the dataset. Parameters: filename (str): The path to the data file which is a CSV file containing the data. Returns: pd.DataFrame: A dataframe containing the correlation coefficients between all pairs of numerical variables. # Load data into a DataFrame df = pd.read_csv(filename) # Calculate and return the correlation matrix corr_matrix = df.corr(method=\'pearson\') return corr_matrix"},{"question":"Write a function `generate_prime_factors(number)` that takes an integer `number` as input and returns a list of its prime factors in ascending order. # Requirements: 1. The function should first check if the input number is less than or equal to 1. If so, return an empty list as prime factors are only defined for integers greater than 1. 2. To find the prime factors, start by testing for the smallest prime, which is 2, and then proceed to test for higher primes. 3. Divide the number by a prime factor as many times as possible until it is no longer divisible by that prime. 4. Once the number is no longer divisible by a particular prime, move on to the next larger prime and continue the process. 5. Continue this process until the number is reduced to 1. 6. Return the list of prime factors. **Function Signature:** ```python def generate_prime_factors(number: int) -> List[int]: ``` **Example:** ```python generate_prime_factors(56) # Output: [2, 2, 2, 7] generate_prime_factors(315) # Output: [3, 3, 5, 7] generate_prime_factors(1) # Output: [] generate_prime_factors(37) # Output: [37] ``` # Note: - Ensure that the function handles edge cases such as when the input number is 0, 1, or negative.","solution":"from typing import List def generate_prime_factors(number: int) -> List[int]: Generate a list of prime factors of the given number in ascending order. if number <= 1: return [] prime_factors = [] # Testing for smallest prime which is 2 while number % 2 == 0: prime_factors.append(2) number //= 2 # Testing for odd factors from 3 onwards divisor = 3 while divisor * divisor <= number: while number % divisor == 0: prime_factors.append(divisor) number //= divisor divisor += 2 # If number is a prime and greater than 2 if number > 2: prime_factors.append(number) return prime_factors"},{"question":"Implement a function named `find_island_count` that calculates the number of distinct islands in a given binary matrix. An island is a group of adjacent 1s (vertically or horizontally connected). The function should use a Depth-First Search (DFS) approach to count the islands. # Function Signature ```python def find_island_count(grid: List[List[int]]) -> int: ... ``` # Input - `grid` (List[List[int]]): A 2D list representing a binary matrix where 1 indicates land and 0 indicates water. # Output - (int): The number of distinct islands in the binary matrix. # Example ```python # Example usage: grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] print(find_island_count(grid)) # Output: 3 ``` In this example, `find_island_count` should identify and count three distinct islands: - The first island spans the top-left corner, - The second island is a single 1 in the middle, - The third island spans the bottom-right corner. # Requirements - Implement a helper function to perform depth-first search. - Traverse all cells of the grid to find the islands. # Hints - When you find a 1, use DFS to mark all connected 1s as visited. - Consider using a set to track visited cells, or modify the original grid to mark visited cells to avoid re-visiting them.","solution":"from typing import List def find_island_count(grid: List[List[int]]) -> int: def dfs(x, y): # If the current cell is out of bounds or is water, return immediately if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return # Mark the current cell as visited by setting it to 0 grid[x][y] = 0 # Explore neighboring cells in four possible directions dfs(x + 1, y) # down dfs(x - 1, y) # up dfs(x, y + 1) # right dfs(x, y - 1) # left island_count = 0 # Traverse the entire grid for i in range(len(grid)): for j in range(len(grid[0])): # If a land cell is found, it\'s the start of a new island if grid[i][j] == 1: island_count += 1 # Perform depth-first search to mark the entire island dfs(i, j) return island_count"},{"question":"In the realm of competitive programming, it\'s crucial to develop efficient algorithms for solving common problems. One such problem involves sorting file names with embedded numbers in a natural order. The challenge is to sort file names by considering the numerical values within the names. For instance, \\"file10.txt\\" should come after \\"file2.txt\\" when sorted naturally. You are tasked with implementing a natural sort algorithm in Python. The function should accept a list of file names and sort them such that any numeric content within the names is taken into account. Write a function named `natural_sort` that takes a list of file names as its only parameter and returns a new list with the file names sorted in natural order. The function should: - Extract numeric portions from the file names. - Sort the names based on their alphanumeric components, considering numerical values as integers for sorting purposes. Function Signature: ```python def natural_sort(files): pass ``` Example: ```python files = [\\"file10.txt\\", \\"file2.txt\\", \\"file1.txt\\", \\"file20.txt\\"] result = natural_sort(files) print(result) # Output: [\'file1.txt\', \'file2.txt\', \'file10.txt\', \'file20.txt\'] ``` Note: - You are not restricted to any particular library, but the use of Python\'s built-in capabilities is encouraged for simplicity and better performance. - Ensure your solution handles cases with no numbers gracefully, maintaining the lexicographical order.","solution":"import re def natural_sort(files): Sorts a list of file names in natural order, considering numeric portions as integers. def alphanum_key(key): Split the key into a list of string and number portions. return [int(text) if text.isdigit() else text.lower() for text in re.split(\'([0-9]+)\', key)] return sorted(files, key=alphanum_key)"},{"question":"You are asked to write a function that takes a list of integers and returns the list with duplicate elements removed while preserving the order of their first occurrence. This function should use the `collections.OrderedDict` to manage the unique elements efficiently. # Function Signature ```python def remove_duplicates(lst: list) -> list: ``` # Parameters - `lst` (list): A list of integers, which may contain duplicates. # Example ```python print(remove_duplicates([1, 3, 2, 3, 4, 1, 5])) ``` Expected output: ``` [1, 3, 2, 4, 5] ``` # Requirements Please ensure your solution utilizes the following from the collections module: - `collections.OrderedDict` # Constraints 1. The input list can contain up to 10,000 integers. 2. The integers can be both positive and negative. # Notes for Developers - The goal is to solidify understanding and usage of the `collections.OrderedDict`. - Refer to the Python Library Documentation for `collections.OrderedDict` for more details on its usage.","solution":"from collections import OrderedDict def remove_duplicates(lst: list) -> list: Removes duplicate elements from the provided list while preserving their order of first occurrence. Parameters: lst (list): A list of integers, which may contain duplicates. Returns: list: A list with duplicate elements removed, preserving the order of their first occurrence. return list(OrderedDict.fromkeys(lst))"},{"question":"Implement a function called `merge_sorted_arrays` that takes in two sorted arrays of integers (`arr1` and `arr2`) and returns a single sorted array containing all elements from both input arrays. The function should: 1. Initialize an empty list `merged` to hold the merged result. 2. Use two pointers, initially set at the start of their respective arrays. 3. Iterate through both arrays, comparing the elements at the pointer positions: - Append the smaller element to the `merged` list. - Move the pointer of the array from which the element was taken. 4. If one of the arrays is exhausted before the other, append all remaining elements of the non-exhausted array to the `merged` list. 5. Return the `merged` list which should be sorted. **Constraints:** - The input arrays `arr1` and `arr2` are guaranteed to be sorted in non-decreasing order. - The arrays may have different lengths. - The elements of the arrays are integers within the range of -10^9 to 10^9. - The function should have a time complexity of O(n + m) where n and m are the lengths of the two input arrays.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): First sorted array. arr2 (list of int): Second sorted array. Returns: list of int: Merged sorted array. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append remaining elements of arr1 if any while i < len(arr1): merged.append(arr1[i]) i += 1 # Append remaining elements of arr2 if any while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"You are tasked with writing a function that determines the time at which the next alarm should go off, given the current time and a list of alarms set during the day. This task will help you understand and use basic time comparisons and arithmetic within the context of hours and minutes. **Function Name:** `next_alarm_time` **Parameters:** 1. `current_time` (str): The current time in the format \\"HH:MM\\" (24-hour format). 2. `alarms` (list of str): A list of alarm times, each in the format \\"HH:MM\\" (24-hour format). **Returns:** - `str`: The time of the next alarm in the format \\"HH:MM\\". **Requirements:** - Convert the given times to minutes from \\"00:00\\" for ease of comparison. - Find the next alarm time that is closest to the current time. - If no alarms are ahead of the current time, return the first alarm of the next day. **Example Usage:** ```python next_alarm_time(\\"14:45\\", [\\"13:00\\", \\"15:30\\", \\"16:00\\", \\"07:45\\"]) # Should return \\"15:30\\" next_alarm_time(\\"23:20\\", [\\"01:15\\", \\"08:00\\", \\"21:00\\", \\"22:45\\"]) # Should return \\"01:15\\" next_alarm_time(\\"08:45\\", [\\"09:00\\", \\"10:15\\", \\"23:00\\"]) # Should return \\"09:00\\" next_alarm_time(\\"22:30\\", [\\"06:00\\"]) # Should return \\"06:00\\" ``` Create the function `next_alarm_time` as described above. Use basic time arithmetic to determine the next closest alarm from the given current time and list of alarms.","solution":"def next_alarm_time(current_time, alarms): Determines the time of the next alarm relative to the current time. Parameters: - current_time (str): The current time in \\"HH:MM\\" format (24-hour format). - alarms (list of str): A list of alarm times, each in \\"HH:MM\\" format (24-hour format). Returns: - str: The time of the next alarm in \\"HH:MM\\" format. current_minutes = int(current_time[:2]) * 60 + int(current_time[3:]) alarm_minutes = sorted(int(alarm[:2]) * 60 + int(alarm[3:]) for alarm in alarms) # Find the first alarm that is after the current time for alarm in alarm_minutes: if alarm > current_minutes: hours, minutes = divmod(alarm, 60) return f\\"{hours:02}:{minutes:02}\\" # If no alarm is ahead of the current time, return the first alarm of the next day first_alarm = alarm_minutes[0] hours, minutes = divmod(first_alarm, 60) return f\\"{hours:02}:{minutes:02}\\""},{"question":"You are required to implement a function named `can_partition` that determines if a given list of integers can be partitioned into two subsets such that the sum of the elements in both subsets is equal. # Function Signature ```python def can_partition(nums: List[int]) -> bool: ``` # Parameters - `nums`: A list of integers. # Return Value The function should return a boolean value: `True` if the list can be partitioned into two subsets with equal sum, and `False` otherwise. # Detailed Explanation The problem can be reduced to a subset sum problem: 1. Compute the total sum of the array. If it is odd, it\'s impossible to split the array into two equal subsets, hence return `False`. 2. If the total sum is even, find if there exists a subset with a sum equal to half of the total sum. You can solve this problem using dynamic programming. Define a boolean DP array `dp` such that `dp[i]` is `True` if a subset with sum `i` can be formed using elements from the list, otherwise `False`. # Constraints - Use dynamic programming to avoid an exhaustive search. - The length of `nums` will be in the range `[1, 200]`. - The elements of `nums` will be in the range `[1, 100]`. Here is an example to illustrate the expected output: ```python def can_partition(nums: List[int]) -> bool: total_sum = sum(nums) if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target] nums = [1, 5, 11, 5] print(can_partition(nums)) # Output: True ``` Explanation: - For the list `[1, 5, 11, 5]`, the total sum is `22`, which is even, and there exists a subset `[1, 5, 5]` with a sum of `11` which is half of `22`.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: total_sum = sum(nums) # If the total sum is odd, it\'s impossible to partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize dp array where dp[i] will be True if a subset with sum i can be formed dp = [False] * (target + 1) dp[0] = True # Process each number in the nums list for num in nums: # Update the dp array from back to front to avoid overwriting values needed for subsequent checks for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"You are tasked with implementing a simple command-line based ticket booking system for a movie theater. The system will manage the seat selection and ticket booking process for a single show. You will need to handle tasks such as showing available seats, booking seats, and displaying the seats\' status. You will implement a class named `TicketBookingSystem` that will have the following functionalities: 1. **__init__(self, rows, cols)**: Initialize the seating arrangement with the given number of rows and columns. All seats should be marked as available initially. 2. **display_seats(self)**: Print the current seating arrangement where available seats are marked as \'A\' and booked seats are marked as \'B\'. 3. **book_seat(self, row, col)**: Book a specific seat identified by its row and column number. If the seat is already booked or the seat position is invalid, print an appropriate message. 4. **available_seats(self)**: Print the total number of available seats. For the purpose of this problem, rows and columns are indexed starting from 1, and indexing is based on 1-based indexes (not 0-based). Here\'s an example of how your class should be used: ```python # Initialize the ticket booking system with a seating arrangement of 5 rows and 6 columns system = TicketBookingSystem(5, 6) # Display the current seating arrangement system.display_seats() # Expected Output: # A A A A A A # A A A A A A # A A A A A A # A A A A A A # A A A A A A # Book a seat at row 3, column 4 system.book_seat(3, 4) # Display the seating arrangement after booking a seat system.display_seats() # Expected Output: # A A A A A A # A A A A A A # A A A B A A # A A A A A A # A A A A A A # Try to book an already booked seat system.book_seat(3, 4) # Expected Output: # Seat already booked. # Try to book an invalid seat system.book_seat(6, 7) # Expected Output: # Invalid seat position. # Print the total number of available seats system.available_seats() # Expected Output: # Available seats: 29 ``` Ensure to handle edge cases such as invalid seat indexes and already booked seats appropriately.","solution":"class TicketBookingSystem: def __init__(self, rows, cols): Initialize the seating arrangement with the given number of rows and columns. All seats are marked as available initially (\'A\'). self.rows = rows self.cols = cols self.seats = [[\'A\' for _ in range(cols)] for _ in range(rows)] def display_seats(self): Print the current seating arrangement. Available seats are marked as \'A\' and booked seats are marked as \'B\'. for row in self.seats: print(\' \'.join(row)) def book_seat(self, row, col): Book a specific seat identified by its row and column number. If the seat is already booked or the position is invalid, print an appropriate message. if row < 1 or row > self.rows or col < 1 or col > self.cols: print(\\"Invalid seat position.\\") elif self.seats[row-1][col-1] == \'B\': print(\\"Seat already booked.\\") else: self.seats[row-1][col-1] = \'B\' def available_seats(self): Print the total number of available seats. count = sum(row.count(\'A\') for row in self.seats) print(f\\"Available seats: {count}\\")"},{"question":"Given an integer array, return all unique triplets in the array that sum up to zero. The function should output with: list[list[int]]: A list of lists, with each list containing a triplet of integers. You should write self-contained code starting with: ``` def find_triplets(nums): ```","solution":"def find_triplets(nums): Returns all unique triplets in the array that sum up to zero. :param nums: List[int] - input array of integers :return: List[List[int]] - list of unique triplets that sum to zero nums.sort() triplets = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: # skip duplicate value for i continue left, right = i + 1, length - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.append([nums[i], nums[left], nums[right]]) # Skip duplicate values for left and right while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets"},{"question":"You need to implement a function that simulates managing a simple banking system with multiple accounts. Each account can perform deposit, withdrawal, and balance inquiry operations. The function needs to handle user inputs robustly, verifying that inputs are in the correct format before processing. # Function Description Your task is to implement the function `simulate_bank_operations(operations, accounts)`, which takes in two parameters: 1. `operations`: A list of tuples, where each tuple contains a command and its corresponding data. The command can be `\'deposit\'`, `\'withdraw\'`, or `\'inquire\'`. Each tuple will also contain the account number and the amount (for `deposit` and `withdraw`) or just the account number (for `inquire`). 2. `accounts`: A dictionary where the key is the account number (integer) and the value is the starting balance (float). The function should: 1. For each command in the `operations` list: - If the command is `\'deposit\'`, add the amount to the account\'s balance. - If the command is `\'withdraw\'`, subtract the amount from the account\'s balance if sufficient funds are available; if not, print `\\"Insufficient funds\\"`. - If the command is `\'inquire\'`, print the current balance of the account. # Constraints - Assume account numbers are unique integers. - The deposit and withdrawal amounts are positive floats. - Handle edge cases such as operations on non-existent accounts gracefully, printing `\\"Account not found\\"`. # Example Usage ```python def simulate_bank_operations(operations, accounts): for operation in operations: command, acc_number, *amount = operation if command == \'deposit\': if acc_number in accounts: accounts[acc_number] += amount[0] print(f\\"Deposited: {amount[0]}\\") else: print(\\"Account not found\\") elif command == \'withdraw\': if acc_number in accounts: if accounts[acc_number] >= amount[0]: accounts[acc_number] -= amount[0] print(f\\"Withdrawn: {amount[0]}\\") else: print(\\"Insufficient funds\\") else: print(\\"Account not found\\") elif command == \'inquire\': if acc_number in accounts: print(f\\"Balance: {accounts[acc_number]}\\") else: print(\\"Account not found\\") # Example Parameters operations = [ (\'deposit\', 101, 150.0), (\'withdraw\', 101, 50.0), (\'inquire\', 101), (\'withdraw\', 101, 200.0), (\'inquire\', 102) ] accounts = { 101: 500.0, 102: 300.0 } simulate_bank_operations(operations, accounts) ``` # Expected Output ``` Deposited: 150.0 Withdrawn: 50.0 Balance: 600.0 Insufficient funds Balance: 300.0 ```","solution":"def simulate_bank_operations(operations, accounts): for operation in operations: command, acc_number, *amount = operation if command == \'deposit\': if acc_number in accounts: accounts[acc_number] += amount[0] print(f\\"Deposited: {amount[0]}\\") else: print(\\"Account not found\\") elif command == \'withdraw\': if acc_number in accounts: if accounts[acc_number] >= amount[0]: accounts[acc_number] -= amount[0] print(f\\"Withdrawn: {amount[0]}\\") else: print(\\"Insufficient funds\\") else: print(\\"Account not found\\") elif command == \'inquire\': if acc_number in accounts: print(f\\"Balance: {accounts[acc_number]}\\") else: print(\\"Account not found\\")"},{"question":"You are tasked with developing a function, `compare_csv_files(file1, file2)`, that will compare two CSV files and output the differences between them. Each CSV file contains rows of data with identical headers. The function needs to: 1. Read both input files and store their contents. 2. Compare the rows of the two files, considering each row to be similar if and only if all the fields in the row match exactly. 3. Identify the rows that are unique to each file and the rows that are common to both files. 4. Print three lists: - Rows unique to the first file. - Rows unique to the second file. - Rows common to both files. Assume that each CSV file can fit into memory and that the built-in `csv` module will be used for reading the files. Example: Given the following two CSV files: **file1.csv**: ``` id,name,age 1,Alice,30 2,Bob,25 3,Charlie,22 ``` **file2.csv**: ``` id,name,age 2,Bob,25 3,Charlie,23 4,David,24 ``` The function should print: ``` Unique to file1: [\'1,Alice,30\'] Unique to file2: [\'4,David,24\', \'3,Charlie,23\'] Common to both files: [\'2,Bob,25\'] ``` Function Signature: ```python def compare_csv_files(file1, file2): pass ```","solution":"import csv def compare_csv_files(file1, file2): # Read and store content of file1 with open(file1, newline=\'\') as f1: reader1 = list(csv.reader(f1)) # Read and store content of file2 with open(file2, newline=\'\') as f2: reader2 = list(csv.reader(f2)) header1 = reader1[0] header2 = reader2[0] # Check if the header rows are the same if header1 != header2: raise ValueError(\\"CSV files do not have the same headers\\") rows1 = {tuple(row) for row in reader1[1:]} # Convert rows to tuples and add to set rows2 = {tuple(row) for row in reader2[1:]} # Convert rows to tuples and add to set unique_to_file1 = rows1 - rows2 unique_to_file2 = rows2 - rows1 common_to_both = rows1 & rows2 print(\\"Unique to file1:\\") for row in unique_to_file1: print(\',\'.join(row)) print(\\"Unique to file2:\\") for row in unique_to_file2: print(\',\'.join(row)) print(\\"Common to both files:\\") for row in common_to_both: print(\',\'.join(row))"},{"question":"Design a function to organize a set of tasks into different groups based on their priorities and types. Each task has a priority (high, medium, low) and a type (work, personal, other). The function should take a list of tasks, where each task is represented as a tuple (task_name, priority, type), and output a dictionary where the keys are the priorities and the values are dictionaries. Each inner dictionary should have the task types as keys and lists of task names as values. The function signature should be: ``` def organize_tasks(tasks_list): ``` Example Input: ``` tasks_list = [ (\'Meeting\', \'high\', \'work\'), (\'Laundry\', \'medium\', \'personal\'), (\'Code Review\', \'high\', \'work\'), (\'Groceries\', \'low\', \'personal\'), (\'Workout\', \'medium\', \'personal\'), (\'Email\', \'high\', \'other\') ] ``` Example Output: ``` { \'high\': { \'work\': [\'Meeting\', \'Code Review\'], \'personal\': [], \'other\': [\'Email\'] }, \'medium\': { \'work\': [], \'personal\': [\'Laundry\', \'Workout\'], \'other\': [] }, \'low\': { \'work\': [], \'personal\': [\'Groceries\'], \'other\': [] } } ``` # Constraints: - Each task will always have a valid priority (\'high\', \'medium\', or \'low\') and a type (\'work\', \'personal\', or \'other\'). - The tasks_list can contain a large number of tasks, but each task will be a tuple of the correct format. - All task names are unique and non-empty strings. Implement the function to meet these requirements.","solution":"def organize_tasks(tasks_list): Organizes a list of tasks into a dictionary grouped by priority and type. priorities = [\'high\', \'medium\', \'low\'] types = [\'work\', \'personal\', \'other\'] # Initialize the dictionary with necessary structure result = {priority: {type_: [] for type_ in types} for priority in priorities} # Populate the dictionary with tasks for task_name, priority, type_ in tasks_list: result[priority][type_].append(task_name) return result"},{"question":"You are tasked with implementing an encryption and decryption system using a simple substitution cipher. A substitution cipher replaces each letter of the plaintext with a corresponding letter of the ciphertext alphabet. The encryption and decryption functions will use a predefined mapping for substitution. Your goal is to implement two functions `encrypt` and `decrypt` that will perform the following steps: 1. **Encrypt**: Replace each letter in the input string with the corresponding letter from the ciphertext alphabet. 2. **Decrypt**: Replace each letter in the encrypted string back to the original letter from the plaintext alphabet. The functions should use the following ciphertext alphabet: - `\'ZYXWVUTSRQPONMLKJIHGFEDCBA\'` (A maps to Z, B maps to Y, C maps to X, etc.) Your functions `encrypt` and `decrypt` should have the following signatures: ```python def encrypt(plaintext: str) -> str: def decrypt(ciphertext: str) -> str: ``` # Example Usage ```python plaintext = \\"HELLO\\" encrypted = encrypt(plaintext) print(encrypted) # Output: \\"SVOOL\\" decrypted = decrypt(encrypted) print(decrypted) # Output: \\"HELLO\\" ``` # Requirements: 1. Only uppercase alphabetic characters (A-Z) should be encrypted/decrypted. Non-alphabetic characters should remain unchanged. 2. The input strings can contain spaces or other non-alphabetic symbols, which must be preserved in the output. # Hints - Create a dictionary mapping each letter of the plaintext alphabet to the corresponding letter of the ciphertext alphabet for both encryption and decryption. - Use these dictionaries to transform each letter of the input string. In summary, the functions should correctly transform the plaintext string into the ciphertext string and vice versa, preserving non-alphabetic characters in their respective positions.","solution":"def encrypt(plaintext: str) -> str: Encrypts the given plaintext using a simple substitution cipher. ciphertext_alphabet = \'ZYXWVUTSRQPONMLKJIHGFEDCBA\' plaintext_alphabet = \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' substitution_dict = {plaintext_alphabet[i]: ciphertext_alphabet[i] for i in range(len(plaintext_alphabet))} encrypted_text = [] for char in plaintext: if char in substitution_dict: encrypted_text.append(substitution_dict[char]) else: encrypted_text.append(char) return \'\'.join(encrypted_text) def decrypt(ciphertext: str) -> str: Decrypts the given ciphertext using a simple substitution cipher. ciphertext_alphabet = \'ZYXWVUTSRQPONMLKJIHGFEDCBA\' plaintext_alphabet = \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' substitution_dict = {ciphertext_alphabet[i]: plaintext_alphabet[i] for i in range(len(ciphertext_alphabet))} decrypted_text = [] for char in ciphertext: if char in substitution_dict: decrypted_text.append(substitution_dict[char]) else: decrypted_text.append(char) return \'\'.join(decrypted_text)"},{"question":"You are provided with a string manipulation task involving the creation of palindromes. The goal is to create a function that, given an input string, generates the shortest possible palindrome by appending characters to the end of the input string. # Function Specification - **Function Name**: `shortest_palindrome` - **Parameters**: - `s` (str): The input string for which the shortest palindrome needs to be generated. - **Returns**: A string representing the shortest palindrome that can be formed by appending characters to the end of the input string. # Requirements - The function should consider all possible ways to append characters to the end of the given string in order to form a palindrome. - The goal is to minimize the total number of characters appended. # Instructions 1. Import the necessary modules (if any) at the beginning of your function. 2. Iterate through the input string to identify the longest possible prefix that also corresponds to a suffix of the string\'s reverse. 3. Append the minimal set of additional characters required to transform the input string into a palindrome. # Example Call ```python # Function call result = shortest_palindrome(\\"race\\") print(result) # Output: \\"racecar\\" result = shortest_palindrome(\\"abcd\\") print(result) # Output: \\"abcdcba\\" ``` # Note - A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). - The primary objective of this exercise is to familiarize with string manipulation techniques in Python, such as slicing and reversing strings. - Ensure that your function is efficient and handles edge cases such as an empty string or a string that is already a palindrome.","solution":"def shortest_palindrome(s): Returns the shortest palindrome that can be formed by appending characters to the end of the input string. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return s for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s + s[::-1]"},{"question":"You are asked to write a function that will simulate a simple book checkout system for a library. The library has a fixed catalog of books, each with a unique identifier (ID) and title. Users are allowed to check out multiple books, but a book can only be checked out to one user at a time. Your function will keep track of which books are checked out and to whom, and it should handle checkouts and returns. Here’s what you need to do: 1. Create a class named `Library` with the following methods: - `__init__(self, catalog)`: Initialize the library with a dictionary where keys are book IDs and values are book titles. Also initialize an empty dictionary to keep track of checked-out books. - `checkout(self, user, book_id)`: If the book is available (not currently checked out), mark it as checked out by the specified user and return a message stating that the book has been checked out to the user. If the book is not available, return a message stating that the book is currently not available. - `return_book(self, book_id)`: If the book is currently checked out, mark it as returned and return a message stating that the book has been returned. If the book is not checked out, return a message stating that the book was not checked out. - `status(self, book_id)`: Return the current status of the book (either \'Available\' or \'Checked out by [user]\'). 2. Ensure the class handles cases where users or book IDs do not exist gracefully. Here is a sample catalog dictionary: ```python catalog = { \'1\': \'1984\', \'2\': \'To Kill a Mockingbird\', \'3\': \'The Great Gatsby\', \'4\': \'The Catcher in the Rye\' } ``` # Class Signature: ```python class Library: def __init__(self, catalog): pass def checkout(self, user, book_id): pass def return_book(self, book_id): pass def status(self, book_id): pass ```","solution":"class Library: def __init__(self, catalog): Initialize the library with a catalog of books. :param catalog: Dictionary with book IDs as keys and book titles as values self.catalog = catalog self.checked_out_books = {} def checkout(self, user, book_id): Check out a book to a user if it is available. :param user: Name of the user :param book_id: ID of the book to be checked out :return: Message indicating whether the checkout was successful or not if book_id not in self.catalog: return f\\"Book ID {book_id} does not exist.\\" if book_id in self.checked_out_books: return f\\"The book \'{self.catalog[book_id]}\' is currently not available.\\" self.checked_out_books[book_id] = user return f\\"The book \'{self.catalog[book_id]}\' has been checked out to {user}.\\" def return_book(self, book_id): Return a book to the library if it is currently checked out. :param book_id: ID of the book to be returned :return: Message indicating whether the return was successful or not if book_id not in self.catalog: return f\\"Book ID {book_id} does not exist.\\" if book_id in self.checked_out_books: del self.checked_out_books[book_id] return f\\"The book \'{self.catalog[book_id]}\' has been returned.\\" return f\\"The book \'{self.catalog[book_id]}\' was not checked out.\\" def status(self, book_id): Return the current status of the book. :param book_id: ID of the book to check the status of :return: The status of the book (\'Available\' or \'Checked out by [user]\') if book_id not in self.catalog: return f\\"Book ID {book_id} does not exist.\\" if book_id in self.checked_out_books: return f\\"Checked out by {self.checked_out_books[book_id]}\\" return \\"Available\\""},{"question":"You need to write a function named `find_unique_integers` that finds unique integers from the sum of three given lists. The function should follow these steps: 1. **Input Processing**: Combine the three input lists into one list. 2. **Find Unique Values**: Identify the unique integers that appear exactly once among the combined list. 3. **Sorting**: Sort the unique integers in ascending order. 4. **Edge Case Handling**: If there are no unique integers, return the string \\"No unique integers found\\". # Input: - `list1` (0 leq len(list1) leq 10^4): A list of integers. - `list2` (0 leq len(list2) leq 10^4): A list of integers. - `list3` (0 leq len(list3) leq 10^4): A list of integers. # Output: - A sorted list of unique integers, or a string if no unique integers are found. # Function Signature: ```python def find_unique_integers(list1: list, list2: list, list3: list) -> list: ``` # Example: ```python >>> find_unique_integers([1, 2, 3], [3, 4, 5], [5, 6, 7]) [1, 2, 4, 6, 7] >>> find_unique_integers([1, 1, 1], [2, 2, 2], [3, 3, 3]) No unique integers found >>> find_unique_integers([], [], []) No unique integers found ``` To solve this problem, make use of Python built-in data structures and functions such as `set` for uniqueness and `sorted` for ordering. Use appropriate algorithms and handle edge cases as described in the specifications above.","solution":"def find_unique_integers(list1, list2, list3): from collections import Counter # Combine all the lists into one combined_list = list1 + list2 + list3 # Count the frequency of each number in the combined list frequency = Counter(combined_list) # Find all numbers that appear exactly once unique_integers = [num for num, count in frequency.items() if count == 1] # Sort the unique integers sorted_unique_integers = sorted(unique_integers) # Return the sorted unique integers or the specified string if there are none return sorted_unique_integers if sorted_unique_integers else \\"No unique integers found\\""},{"question":"Given a 2D grid of dimensions m x n and a starting cell `(start_row, start_col)`, implement a function `cascade_fill` that fills the 8 neighboring cells of the start cell with increasing integers, starting from 1. The fill pattern continues to propagate from each filled cell outward, but only to cells that have not been already filled. If a cell is out of bounds or has already been filled, it is skipped. To represent the grid, use a dictionary where the keys are `(row, col)` tuples and the values are the integers that you fill. # Function Signature: ```python def cascade_fill(m, n, start_row, start_col): pass ``` # Parameters: - `m` (int): Number of rows in the grid. - `n` (int): Number of columns in the grid. - `start_row` (int): Row index of the starting cell. - `start_col` (int): Column index of the starting cell. # Libraries to Use: - `collections.defaultdict` - `collections.deque` # Explanation of the Libraries: - `collections.defaultdict`: This provides a dictionary-like object which maps missing keys to a default value. - `collections.deque`: This provides a double-ended queue that supports adding and removing elements from both ends efficiently. # Example Usage: ```python grid = cascade_fill(5, 5, 2, 2) for r in range(5): for c in range(5): print(grid.get((r, c), \'.\'), end=\' \') print() ``` # Expected Output (formatted as rows and columns): ``` . . . . . . . 1 . . . 1 0 1 . . . 1 . . . . . . . ``` Where `. is printed if a cell is empty (not filled). Implement the function `cascade_fill` using the specified libraries.","solution":"from collections import defaultdict, deque def cascade_fill(m, n, start_row, start_col): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] queue = deque([(start_row, start_col, 0)]) grid = defaultdict(int) grid[(start_row, start_col)] = 0 while queue: r, c, value = queue.popleft() next_value = value + 1 # increment for the next step for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in grid: grid[(nr, nc)] = next_value queue.append((nr, nc, next_value)) return grid"},{"question":"In this problem, you need to implement a function `compress_string` that compresses a given string using a run-length encoding algorithm. The function should take a single parameter `s`, which is a string consisting of lowercase letters. The function should return a compressed version of the string where consecutive characters are replaced by the character followed by the count of its consecutive occurrences. If the compressed string is not shorter than the original string, return the original string. # Signature: ```python def compress_string(s: str) -> str: ``` # Parameters: - `s` (str): A string consisting of lowercase letters. # Returns: - `str`: The compressed string or the original string if compression does not reduce the string\'s length. # Example: Suppose you have the following string: ```python s = \\"aaabbccccaaa\\" ``` Then calling the function: ```python compress_string(s) ``` should return: ```python \\"a3b2c4a3\\" ``` If the input were a string with no benefit from compression: ```python s = \\"abcd\\" ``` Then calling the function: ```python compress_string(s) ``` should return: ```python \\"abcd\\" ``` # Explanation: - For the first example, the input string \\"aaabbccccaaa\\" is compressed to \\"a3b2c4a3\\" which is shorter than the original string. - For the second example, the input string \\"abcd\\" does not get compressed since the result would not be shorter. # Constraints: - The input string length is between 1 and 1000 characters. - The input string only contains lowercase alphabetical characters (a-z). # Notes: - Pay attention to the edge cases where the string length is 1. - Consider if the compression actually reduces the length of the string before finalizing the output.","solution":"def compress_string(s: str) -> str: Compresses a string using run-length encoding. Parameters: s (str): A string consisting of lowercase letters. Returns: str: The compressed string or the original string if compression does not reduce the string\'s length. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Append the last group compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) # Return the original string if compression does not reduce the length if len(compressed_string) >= len(s): return s return compressed_string"},{"question":"Your task is to implement a function named `circular_array_rotation` that rotates a given array a specified number of times and returns the element at a given set of indices after the rotations. # Function Signature ```python def circular_array_rotation(array, rotations, queries): pass ``` # Parameters: 1. `array` (list of int): A list of integers representing the array to rotate. 2. `rotations` (int): The number of times to rotate the array. Each rotation shifts the array to the right by one position. 3. `queries` (list of int): A list of indices for which the elements should be returned after the rotations. # Returns: - (list of int): A list of integers corresponding to the elements at the specified indices in `queries` after the array has been rotated. # Example: ```python array = [3, 8, 9, 7, 6] rotations = 3 queries = [0, 2, 4] print(circular_array_rotation(array, rotations, queries)) # Expected output: [9, 6, 8] ``` # Explanation: - The array [3, 8, 9, 7, 6] after 3 rotations becomes [7, 6, 3, 8, 9]. - The element at index 0 after rotations is 7. - The element at index 2 after rotations is 3. - The element at index 4 after rotations is 9. # Requirements: 1. Ensure the function handles input validation. 2. Optimize for performance, considering that the number of rotations can be large. Hint: Instead of rotating the entire array multiple times, think of an efficient way to determine the new positions of the elements after the given number of rotations.","solution":"def circular_array_rotation(array, rotations, queries): Rotates the array `rotations` times and then returns the values at indices specified in `queries`. Parameters: array (list): The list of integers to be rotated. rotations (int): The number of times the array should be rotated. queries (list): The list of indices to be retrieved after rotation. Returns: list: The list of integers corresponding to the queried indices after rotation. n = len(array) # To optimize, only perform rotations equal to rotations modulo array length effective_rotations = rotations % n # Create the rotated array using slicing rotated_array = array[-effective_rotations:] + array[:-effective_rotations] # Fetch and return the queried elements result = [rotated_array[i] for i in queries] return result"},{"question":"Suppose you are given a list of strings where each string represents a student\'s name, and you want to generate unique IDs for these students. To ensure the uniqueness of these IDs, your task is to implement a Python function called `generate_student_ids` that generates a unique ID for each student by appending an incremental number to their name if and only if the name has already appeared in the list. The unique ID should be in the format `name_x`, where `x` is the smallest integer greater than or equal to 1 that makes the ID unique. If the name has not appeared before, it should just remain as it is (without any appended numbers). For example, given the list `[\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Alice\\"]`, the output should be: `[\\"Alice\\", \\"Bob\\", \\"Alice_1\\", \\"Alice_2\\"]` Function Signature: ```python def generate_student_ids(names: List[str]) -> List[str]: pass ```","solution":"def generate_student_ids(names): Generates unique IDs for each student by appending an incremental number to their name if and only if the name has already appeared in the list. :param names: List of student names :return: List of unique student IDs name_counts = {} unique_ids = [] for name in names: if name in name_counts: name_counts[name] += 1 unique_ids.append(f\\"{name}_{name_counts[name]}\\") else: name_counts[name] = 0 unique_ids.append(name) return unique_ids"},{"question":"You need to implement a function that evaluates a postfix expression (also known as Reverse Polish Notation). Postfix notation is a mathematical notation in which operators follow their operands. For example, the postfix expression `3 4 +` evaluates to `7`, and `5 1 2 + 4 * + 3 -` evaluates to `14`. **Function Signature:** ```python def evaluate_postfix(expression: str) -> float: ``` **Parameters:** - `expression` (str): A string containing a valid postfix expression with space-separated tokens. Operands are real numbers and operators are `+`, `-`, `*`, `/`. **Returns:** - (float): The result of evaluating the postfix expression. **Instructions:** 1. Split the input string by spaces to obtain the tokens. 2. Use a stack to keep track of the operands. 3. Iterate through the tokens: - If the token is an operand (number), push it onto the stack. - If the token is an operator, pop the top two operands from the stack, apply the operator, and push the result back onto the stack. 4. The final result should be the only value left in the stack after evaluating the entire expression. **Example:** ```python expression = \\"3 4 +\\" print(evaluate_postfix(expression)) # Output: 7.0 expression = \\"5 1 2 + 4 * + 3 -\\" print(evaluate_postfix(expression)) # Output: 14.0 ``` **Note:** - Ensure your function handles multiple-digit numbers and decimal numbers correctly. - Handle the division by 0 cases appropriately, return `float(\'inf\')` to represent infinity when division by zero occurs.","solution":"def evaluate_postfix(expression: str) -> float: Evaluates a postfix (Reverse Polish Notation) expression. Parameters: expression (str): A string containing a valid postfix expression with space-separated tokens. Returns: float: The result of evaluating the postfix expression. stack = [] tokens = expression.split() for token in tokens: if token in \'+-*/\': b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': # Handle division by zero if b == 0: result = float(\'inf\') else: result = a / b stack.append(result) else: stack.append(float(token)) return stack[0] # Test cases to verify the solution print(evaluate_postfix(\\"3 4 +\\")) # Output: 7.0 print(evaluate_postfix(\\"5 1 2 + 4 * + 3 -\\")) # Output: 14.0"},{"question":"Write a function that takes a CSV string as input and returns a dictionary where the keys are column headers and the values are lists of column values. The function should handle any number of rows and columns and must raise an exception if the input is not well-formed or missing headers. The function should output with: ``` dict: A dictionary with column headers as keys and lists of column values. ``` You should write self-contained code starting with: ``` import csv from io import StringIO def parse_csv(csv_string): ```","solution":"import csv from io import StringIO def parse_csv(csv_string): Parses a CSV string and returns a dictionary with column headers as keys and lists of column values. :param csv_string: str - CSV formatted string :return: dict - A dictionary with column headers as keys and lists of column values :raises ValueError: If the input is not well-formed or missing headers # Initialize StringIO to read CSV string csv_file = StringIO(csv_string) try: # Use csv.DictReader to parse the CSV string reader = csv.DictReader(csv_file) if reader.fieldnames is None: raise ValueError(\\"Missing headers in CSV input\\") # Initialize a dictionary with empty lists for each header result = { header: [] for header in reader.fieldnames } # Iterate through rows and populate the lists for row in reader: for header in reader.fieldnames: result[header].append(row[header]) return result except csv.Error as e: raise ValueError(\\"Invalid CSV input: \\" + str(e))"},{"question":"Generate a list of random integers, count the frequency of each integer, and return a dictionary with the integers as keys and their frequencies as values. The function should output a dictionary with integers and their frequencies. You should write self-contained code starting with: ``` import random def task_func(n_integers=100): ```","solution":"import random from collections import defaultdict def task_func(n_integers=100): Generates a list of random integers and counts the frequency of each integer. Args: n_integers (int): The number of random integers to generate. Default is 100. Returns: dict: A dictionary with integers as keys and their frequencies as values. random_integers = [random.randint(1, 10) for _ in range(n_integers)] frequency_dict = defaultdict(int) for num in random_integers: frequency_dict[num] += 1 return dict(frequency_dict)"},{"question":"You are given two text files containing English sentences, one sentence per line. Your task is to find the common sentences between the two files and write them to an output file, while preserving their order from the first file (`file1`). Write a Python function `find_common_sentences(file1: str, file2: str, output_file: str)` that performs the following tasks: 1. Opens the two input text files (`file1` and `file2`) for reading. 2. Opens the output text file (`output_file`) for writing. 3. Reads the sentences from both input text files. 4. Finds the common sentences that appear in both files. 5. Writes the common sentences to the output file in the order they appear in `file1`. **Constraints:** - Assume each sentence in the files is on a new line. - Ignore any leading or trailing whitespace when comparing sentences. - You must process the files line by line due to their potential large size. #","solution":"def find_common_sentences(file1: str, file2: str, output_file: str): Finds the common sentences between two files and writes them to an output file in the order they appear in the first file. with open(file1, \'r\') as f1, open(file2, \'r\') as f2: sentences1 = [line.strip() for line in f1] sentences2 = set(line.strip() for line in f2) common_sentences = [sentence for sentence in sentences1 if sentence in sentences2] with open(output_file, \'w\') as of: for sentence in common_sentences: of.write(sentence + \\"n\\")"},{"question":"You are required to write a function that calculates the nth term of the Fibonacci sequence using dynamic programming. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should be named `nth_fibonacci`. The function signature should be: ```python def nth_fibonacci(n): pass ``` The function takes the following argument: 1. `n` (int): The position in the Fibonacci sequence (0-indexed). The function should return an integer representing the nth Fibonacci number. You should use an iterative approach with dynamic programming techniques (i.e., memoization) to efficiently compute the nth Fibonacci number. Avoid using a recursive approach due to its high time complexity for large `n`. Here\'s an example of the expected input and output: ```python assert nth_fibonacci(0) == 0 assert nth_fibonacci(1) == 1 assert nth_fibonacci(5) == 5 assert nth_fibonacci(10) == 55 ``` In this task, you will need to: - Create an array to store the Fibonacci numbers up to the nth term. - Initialize the first two terms of the Fibonacci sequence. - Use an iterative loop to fill in the array. - Return the nth Fibonacci number.","solution":"def nth_fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0], fib[1] = 0, 1 for i in range(2, n + 1): fib[i] = fib[i-1] + fib[i-2] return fib[n]"},{"question":"You are tasked with creating a function `query_api` that demonstrates the use of the `requests` library to make HTTP GET requests and handle JSON responses. **Function Specification:** - Name: `query_api` - Parameters: - `url` (str): The API endpoint to query. - Returns: - A dictionary containing the fields: - `status_code` (int): The HTTP status code of the response. - `data` (dict or None): The parsed JSON data if the response contains valid JSON; otherwise, `None`. - `error` (str or None): An error message if the request failed; otherwise, `None`. **Functionality:** The function should: 1. Send an HTTP GET request to the specified `url` using the `requests.get` method. 2. If the request is successful (status code 200), attempt to parse the response JSON using the `response.json()` method. 3. Return a dictionary containing the HTTP status code, the parsed JSON data (or `None` if parsing fails), and `None` for the error field. 4. If the request fails (any status code other than 200), return a dictionary containing the HTTP status code, `None` for the data field, and an appropriate error message. 5. Handle exceptions that may be raised due to connection issues or invalid JSON responses. **Libraries to Use:** - `requests`: To send the HTTP GET request and handle the response. **Example Output:** 1. On successful request and valid JSON response: ```python query_api(\\"https://jsonplaceholder.typicode.com/todos/1\\") # Output: # { # \\"status_code\\": 200, # \\"data\\": { # \\"userId\\": 1, # \\"id\\": 1, # \\"title\\": \\"delectus aut autem\\", # \\"completed\\": false # }, # \\"error\\": None # } ``` 2. On unsuccessful request: ```python query_api(\\"https://api.invalidendpoint\\") # Output: # { # \\"status_code\\": 0, # \\"data\\": None, # \\"error\\": \\"Connection error or invalid URL\\" # } ``` Ensure that your implementation correctly handles HTTP responses, JSON parsing, and various possible exceptions.","solution":"import requests def query_api(url): Sends an HTTP GET request to the specified URL and returns a dictionary with the status code, response data, and any error message. Args: url (str): The API endpoint to query. Returns: dict: A dictionary with the status code, data, and error message. try: response = requests.get(url) status_code = response.status_code if status_code == 200: try: data = response.json() except ValueError: data = None return { \\"status_code\\": status_code, \\"data\\": None, \\"error\\": \\"Invalid JSON response\\" } return { \\"status_code\\": status_code, \\"data\\": data, \\"error\\": None } else: return { \\"status_code\\": status_code, \\"data\\": None, \\"error\\": response.reason } except requests.RequestException as e: return { \\"status_code\\": 0, \\"data\\": None, \\"error\\": str(e) }"},{"question":"**Task**: Implement a function `chunk_and_pad(arr: List[int], chunk_size: int) -> List[List[int]]` that splits a list of integers `arr` into smaller chunks of a given size `chunk_size`. If the last chunk is smaller than the specified size, pad it with zeros until it reaches the chunk size. **Parameters**: - `arr`: A list of integers. - `chunk_size`: A strictly positive integer specifying the size of each chunk. **Functionality**: The function will work as follows: - Split `arr` into chunks of size `chunk_size`. - If the last chunk is smaller than `chunk_size`, pad the remaining values with zeros until the chunk reaches the required size. **Constraints**: - The length of `arr` can be arbitrary, including zero. - The `chunk_size` will always be a positive integer. **Example**: ```python def chunk_and_pad(arr: List[int], chunk_size: int) -> List[List[int]]: pass # implement the function # Example usage arr = [1, 2, 3, 4, 5, 6, 7] chunk_size = 3 chunks = chunk_and_pad(arr, chunk_size) print(chunks) # Should output [[1, 2, 3], [4, 5, 6], [7, 0, 0]] ``` **Output**: ``` [[1, 2, 3], [4, 5, 6], [7, 0, 0]] ``` Create a function that correctly handles chunking and padding as described. Ensure to handle edge cases and provide clear implementation of the requirements.","solution":"from typing import List def chunk_and_pad(arr: List[int], chunk_size: int) -> List[List[int]]: Splits the list into chunks of the given size and pads the last chunk with zeros if necessary. Parameters: - arr: List[int] - The list of integers to be chunked. - chunk_size: int - The size of each chunk. Returns: - List[List[int]] - A list of chunked lists, each of `chunk_size` length or padded with zeros. result = [] for i in range(0, len(arr), chunk_size): chunk = arr[i:i+chunk_size] if len(chunk) < chunk_size: chunk += [0] * (chunk_size - len(chunk)) result.append(chunk) return result"},{"question":"You are tasked with implementing a simplified text-based version of a shopping cart system. This system should take place within a single function `shopping_cart()`. Follow the provided guidelines to implement the logic flow and expected functionality. Your task is to complete the function `shopping_cart()` which performs the following actions: 1. Display a menu to the user with the following options: - Add item to cart - Remove item from cart - View cart - Checkout 2. When the user selects \\"Add item to cart\\": - Prompt the user to input the item name and its price. - Store the item and its price in a dictionary where the item\'s name is the key and the price is the value. - Print a confirmation message that the item has been added. 3. When the user selects \\"Remove item from cart\\": - Prompt the user to input the item name to be removed. - Remove the item from the dictionary if it exists. - Print a confirmation message if the item was successfully removed, or an error message if the item was not found in the cart. 4. When the user selects \\"View cart\\": - Print all items in the cart with their respective prices. - If the cart is empty, print a message indicating so. 5. When the user selects \\"Checkout\\": - Calculate and print the total cost of all items in the cart. - Terminate the program. 6. The menu should be displayed repeatedly after each action until the user decides to checkout. **Constraints**: - The item names in the cart should be unique. - Item prices should be non-negative numbers. **Function Signature**: ```python def shopping_cart(): pass ```","solution":"def shopping_cart(): cart = {} while True: print(\\"nMenu:\\") print(\\"1. Add item to cart\\") print(\\"2. Remove item from cart\\") print(\\"3. View cart\\") print(\\"4. Checkout\\") choice = input(\\"Choose an option: \\") if choice == \'1\': item_name = input(\\"Enter the item name: \\") item_price = float(input(\\"Enter the item price: \\")) if item_name in cart: print(f\\"Item \'{item_name}\' already exists in the cart.\\") else: cart[item_name] = item_price print(f\\"Item \'{item_name}\' added to cart.\\") elif choice == \'2\': item_name = input(\\"Enter the item name to remove: \\") if item_name in cart: del cart[item_name] print(f\\"Item \'{item_name}\' removed from cart.\\") else: print(f\\"Item \'{item_name}\' not found in the cart.\\") elif choice == \'3\': if cart: print(\\"Cart items:\\") for item_name, item_price in cart.items(): print(f\\"{item_name}: {item_price:.2f}\\") else: print(\\"Your cart is empty.\\") elif choice == \'4\': total = sum(cart.values()) print(f\\"Total cost: {total:.2f}\\") print(\\"Checking out. Goodbye!\\") break else: print(\\"Invalid option. Please try again.\\")"},{"question":"Your task is to create a function named `calculate_overlap_area` that computes the overlapping area of two rectangles defined by their coordinates. The function should take the coordinates of the two rectangles as inputs and return the area of their intersection. **Specifications** 1. Function Name: `calculate_overlap_area` 2. Inputs: - `rect1` (tuple): A tuple containing four integers `(x1, y1, x2, y2)` representing the coordinates of the bottom-left and top-right corners of the first rectangle. - `rect2` (tuple): A tuple containing four integers `(x1, y1, x2, y2)` representing the coordinates of the bottom-left and top-right corners of the second rectangle. 3. Output: - `int`: The area of the intersection of the two rectangles. If they do not overlap, return 0. # Example Usage Consider two rectangles with the following coordinates: Rectangle 1: bottom-left at (1, 1), top-right at (4, 4) Rectangle 2: bottom-left at (2, 2), top-right at (5, 5) ```python # Example call to the function result = calculate_overlap_area((1, 1, 4, 4), (2, 2, 5, 5)) print(result) # Output should be: 4 ``` # Additional Details The algorithm should follow these steps: - Identify the x and y coordinates of the intersection\'s bottom-left and top-right corners. - Determine the width and height of the overlap. - Compute the overlap area by multiplying the width and height. - If there is no overlap, the width or height will be zero, resulting in an area of zero. Write the `calculate_overlap_area` function following the given specifications.","solution":"def calculate_overlap_area(rect1, rect2): Calculate the overlapping area of two rectangles. Parameters: rect1 (tuple): A tuple containing four integers (x1, y1, x2, y2) representing the coordinates of the bottom-left and top-right corners of the first rectangle. rect2 (tuple): A tuple containing four integers (x1, y1, x2, y2) representing the coordinates of the bottom-left and top-right corners of the second rectangle. Returns: int: The area of the intersection of the two rectangles. If they do not overlap, return 0. x1 = max(rect1[0], rect2[0]) y1 = max(rect1[1], rect2[1]) x2 = min(rect1[2], rect2[2]) y2 = min(rect1[3], rect2[3]) width = x2 - x1 height = y2 - y1 if width <= 0 or height <= 0: return 0 return width * height"},{"question":"You are required to write a function `bubbleSortVisualization(arr)` that takes a list of integers `arr` and uses the `matplotlib` library to visualize each step of the Bubble Sort algorithm. The detailed steps for implementation are as follows: 1. Import the necessary functions from `matplotlib.pyplot`. 2. Create a plot that will be updated at each iteration of the sorting process. 3. Implement the Bubble Sort algorithm, and make sure to update the plot at each swap of elements. 4. Use the `pause` function to add a delay between updates, making the sorting process visually traceable. 5. Ensure that the updated plot highlights the elements being swapped in a different color for better visualization. Your task is to: 1. Set up the initial bar plot for the input list. 2. For each swap operation in the Bubble Sort algorithm, update the bar plot accordingly, highlighting the swapped elements. 3. Use `pause` to control the visualization speed. Note: The `matplotlib` library should be used for plotting. Ensure you handle the plot updates efficiently to capture each step of the sorting process. Here is the function signature you need to implement: ```python def bubbleSortVisualization(arr): # your implementation here ```","solution":"import matplotlib.pyplot as plt import numpy as np def bubbleSortVisualization(arr): def plot_bars(data, swap_pairs=None): plt.clf() bar_container = plt.bar(range(len(data)), data, color=\'blue\') if swap_pairs: bar_container[swap_pairs[0]].set_color(\'red\') bar_container[swap_pairs[1]].set_color(\'red\') plt.pause(0.5) n = len(arr) plt.ion() plot_bars(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] plot_bars(arr, (j, j + 1)) plt.ioff() plot_bars(arr) plt.show() # Example usage: # bubbleSortVisualization([64, 34, 25, 12, 22, 11, 90])"},{"question":"Write a function that takes a list of integers and formats them into groups of three numbers separated by commas, reversing the order of elements within each group. Additionally, if there are less than three elements in the final group, reverse them as well but keep them as is (do not add commas). Return the formatted string. For example: ``` task_func([1, 2, 3, 4, 5, 6, 7, 8]) -> \'3,2,1,6,5,4,7,8\' task_func([10, 20, 30, 40, 50]) -> \'30,20,10,50,40\' task_func([1, 2]) -> \'2,1\' ``` You should write self-contained code starting with: ``` def task_func(numbers): ```","solution":"def task_func(numbers): Formats a list of integers into groups of three numbers separated by commas, reversing the order of elements within each group. Args: numbers (list of int): The list of integers to format. Returns: str: The formatted string. result = [] i = 0 while i < len(numbers): group = numbers[i:i+3][::-1] result.extend(group) i += 3 return \',\'.join(map(str, result))"},{"question":"In this problem, you will implement a function `stock_price_moving_average` that computes the moving average of stock prices over a specified window. The function will take an array of stock prices and a window size as inputs, and it should return an array of the moving averages. To accomplish this task, you need to use the following specific functions and methods: 1. `numpy.convolve` to compute the moving average. 2. `numpy.ones` to create the window for convolution. Your function `stock_price_moving_average` should have the following signature: ```python def stock_price_moving_average(prices, window_size): pass ``` - `prices`: A list or NumPy array containing the stock prices (numerical values). - `window_size`: An integer representing the size of the window to compute the moving average. The function should handle edge cases, such as when the array of stock prices is empty or the window size is larger than the length of the array. The result should return an array of the same length as the input, filled with `None` for indices where the full window cannot be applied.","solution":"import numpy as np def stock_price_moving_average(prices, window_size): Computes the moving average of stock prices over a specified window. Args: prices (list or numpy array): List or array of stock prices. window_size (int): Size of the moving window. Returns: list: List of moving averages, with `None` for indices where the full window cannot be applied. if not prices or window_size > len(prices) or window_size <= 0: return [None] * len(prices) weights = np.ones(window_size) moving_avg = np.convolve(prices, weights, \'valid\') / window_size result = [None] * (window_size - 1) + list(moving_avg) return result"},{"question":"You have been given a dataset \\"transactions.csv\\" that contains details of purchases made in a store. Each row represents a transaction and includes information such as the transaction ID, customer ID, product ID, quantity, and timestamp. Our goal is to identify the top 5 most frequently purchased products and visualize their purchase frequency using a bar chart. Write a function named `visualize_top_products` that performs the following steps: 1. Reads the dataset \\"transactions.csv\\" into a DataFrame. 2. Cleans the data by removing rows with missing values in the \\"product_id\\" and \\"quantity\\" columns. 3. Converts the data type of the \\"quantity\\" column from string to integer. 4. Identifies the top 5 most frequently purchased products. 5. Creates a bar chart with the product IDs on the x-axis and their corresponding purchase frequencies on the y-axis. 6. Sets appropriate labels for the x and y axes and titles the chart \\"Top 5 Most Frequently Purchased Products\\". Use the `pandas` library for data manipulation and the `matplotlib` library for plotting. Here\'s a skeleton you can start with: ```python import pandas as pd import matplotlib.pyplot as plt def visualize_top_products(): # Your code here pass ```","solution":"import pandas as pd import matplotlib.pyplot as plt def visualize_top_products(): # Step 1: Read the dataset into a DataFrame df = pd.read_csv(\\"transactions.csv\\") # Step 2: Clean data by removing rows with missing values in \\"product_id\\" and \\"quantity\\" columns df.dropna(subset=[\'product_id\', \'quantity\'], inplace=True) # Step 3: Convert the data type of the \\"quantity\\" column from string to integer df[\'quantity\'] = df[\'quantity\'].astype(int) # Step 4: Identify the top 5 most frequently purchased products top_products = df.groupby(\'product_id\')[\'quantity\'].sum().nlargest(5) # Step 5: Create a bar chart top_products.plot(kind=\'bar\') # Step 6: Set appropriate labels and titles plt.xlabel(\'Product ID\') plt.ylabel(\'Purchase Frequency\') plt.title(\'Top 5 Most Frequently Purchased Products\') # Display the plot plt.show()"},{"question":"You are required to implement a function that analyzes a given list of integers to find the element that appears the most frequently. If multiple elements have the same highest frequency, return the smallest element among them. This task will test your ability to work with lists, dictionaries, and basic iteration in Python. Your task is to write a function named `most_frequent_smallest_number(nums)` which finds the most frequent number in the given list and, in case of a tie, returns the smallest number among the most frequent ones. To help you get started, here’s the function signature: ```python def most_frequent_smallest_number(nums): # Your code here ``` Where: - `nums` is a list of integers which can contain both positive and negative numbers. **Examples:** ```python print(most_frequent_smallest_number([1, 3, 2, 3, 2, 1, 1])) # should return 1 print(most_frequent_smallest_number([3, 3, 2, 2, 1])) # should return 2 print(most_frequent_smallest_number([4, -1, -1, 4, -1])) # should return -1 ``` # Constraints: - The list `nums` can be of any length, including zero. If the list is empty, the function should return `None`. - The list can contain both positive and negative integers. - The function should aim to be efficient in terms of time complexity.","solution":"def most_frequent_smallest_number(nums): Given a list of integers, find the element that appears the most frequently. If multiple elements have the same highest frequency, return the smallest element among them. If the list is empty, return None. if not nums: return None frequency = {} for num in nums: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 max_freq = max(frequency.values()) most_frequent_elements = [num for num, freq in frequency.items() if freq == max_freq] return min(most_frequent_elements)"},{"question":"You are required to create a Python function named `prime_multiprocessing` that uses the `multiprocessing` library to find prime numbers in a given range using multiple processes. The task is to parallelize the computation to improve performance for large ranges. **Requirements:** 1. The function `prime_multiprocessing` should take in two arguments: `start`, `end`, representing the range of numbers to check for primality. 2. Use the `multiprocessing.Pool` to create a pool of worker processes. The number of worker processes should be equal to the number of CPU cores available on the system. 3. Divide the range `[start, end)` into equal chunks and assign each chunk to a separate process for prime-checking. 4. Collect the results from all processes and combine them into a final list of prime numbers. 5. Ensure that the `multiprocessing.Pool` is properly closed and joined to clean up the processes after computation. **Function Signature:** ```python def prime_multiprocessing(start: int, end: int) -> list: pass ``` **Detailed Steps:** - Define a helper function `is_prime` that takes an integer and returns `True` if it is prime, `False` otherwise. - Divide the range `[start, end)` into chunks and distribute these chunks among the worker processes. - Use the `map` method of the pool to apply the `is_prime` function to each number in the range and collect the results. - Filter out non-prime numbers and return the list of primes. **Example Usage:** ```python # If the number of CPU cores is 4, the range will be divided into 4 chunks. primes = prime_multiprocessing(10, 50) print(primes) # Output might look like: [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] ``` Ensure to handle any potential exceptions during multiprocessing such as handling interruptions and cleanly terminating the pool.","solution":"import multiprocessing def is_prime(n): Helper function that returns True if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) for d in range(3, max_divisor + 1, 2): if n % d == 0: return False return True def prime_multiprocessing(start: int, end: int) -> list: Finds prime numbers between start and end using multiprocessing. if start >= end: return [] num_processes = multiprocessing.cpu_count() pool = multiprocessing.Pool(processes=num_processes) ranges = [] step = (end - start) // num_processes for i in range(num_processes): range_start = start + i * step if i == num_processes - 1: range_end = end else: range_end = range_start + step ranges.append(range(range_start, range_end)) prime_chunks = pool.map(check_primes_in_range, ranges) pool.close() pool.join() primes = [] for prime_chunk in prime_chunks: primes.extend(prime_chunk) return sorted(primes) def check_primes_in_range(num_range): Helper function to check for primes in a given range. return [n for n in num_range if is_prime(n)]"},{"question":"You need to implement a function `shortest_path_in_grid(grid)` that finds the shortest path from the top-left corner to the bottom-right corner of a grid. The grid is represented as a 2D array where blocked cells are denoted by `1` and free cells are denoted by `0`. You can move up, down, left, or right from a free cell to another free cell. If there is no valid path, the function should return -1. Function Signature: ```python def shortest_path_in_grid(grid: List[List[int]]) -> int: ``` **Parameters:** 1. `grid` (List[List[int]]): A 2D array of integers representing the grid. **Returns:** - (int): The length of the shortest path from the top-left to the bottom-right corner, or `-1` if no such path exists. **Example:** ```python # Example Input grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] # Example Output 9 ``` Explanation: 1. The shortest path from the top-left (0,0) to the bottom-right (4,4) is found through the cells `{(0,0), (1,0), (2,0), (2,1), (2,2), (1,2), (0,2), (0,3), (1,3), (2,3), (3,3), (4,3), (4,4)}`. 2. The length of this path is 13. 3. If no path exists due to blocking cells, return `-1`. --- Additional Notes: - You may assume the input grid is always a valid NxM grid. - The rows and columns of the grid will be between `2` and `100`. - You can utilize algorithms like Breadth-First Search (BFS) for solving this problem.","solution":"from typing import List, Tuple from collections import deque def shortest_path_in_grid(grid: List[List[int]]) -> int: Returns the length of the shortest path from the top-left to the bottom-right corner of the grid, or -1 if no such path exists. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (rows - 1, cols - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"--- You need to create a function called `find_anagrams`, which takes a list of words and returns a list of lists, where each sublist contains words that are anagrams of each other from the input list. The function signature is: ```python def find_anagrams(words): Groups words that are anagrams into sublists. Args: words (list): A list of strings to be checked for anagrams. Returns: list: A list of lists, where each sublist contains words that are anagrams of each other. # Your code here ``` # Specifications: 1. **Input List**: The function will receive a list of strings. 2. **Output List**: Each sublist should contain words that are anagrams of any other word in that sublist. 3. **Sorting**: - Utilize sorted versions of words to identify anagrams. 4. **Case-insensitive**: Consider anagrams in a case-insensitive manner. 5. **Return**: Return the list of anagram groups. # Example Usage: ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"rock\\", \\"cork\\", \\"stone\\", \\"notes\\"] anagrams = find_anagrams(words) print(anagrams) # Output: [[\'listen\', \'silent\', \'enlist\', \'inlets\'], [\'rock\', \'cork\'], [\'stone\', \'notes\']] ``` Ensure to efficiently group the words into anagram sets using suitable data structures.","solution":"def find_anagrams(words): Groups words that are anagrams into sublists. Args: words (list): A list of strings to be checked for anagrams. Returns: list: A list of lists, where each sublist contains words that are anagrams of each other. from collections import defaultdict anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word.lower())) anagram_map[sorted_word].append(word) return list(anagram_map.values())"},{"question":"You are required to develop a Python function that computes and displays the shortest path on a graph using Dijkstra\'s algorithm. The graph is represented as an adjacency matrix, and the function will visualize the path dynamically using `matplotlib` to animate the search process. Your function should be designed to visualize each step of the algorithm, updating the state of the graph at each iteration. The function should be named `visualize_dijkstra`, and it should take the following parameters: - `graph`: A 2D numpy array representing the adjacency matrix of the graph. - `start_node`: An integer representing the starting node for the shortest path computation. - `end_node`: An integer representing the target node to reach. - `fig`: A `matplotlib.figure.Figure` object for the visualization. - `ax`: A `matplotlib.axes.Axes` object for the plotting area. # Steps your function should perform: 1. Initialize the Dijkstra\'s algorithm with the starting node. 2. Set up the visualization with nodes and the initial state. 3. At each iteration, update the plot to reflect the changes in distances and paths. 4. Highlight the shortest path once the algorithm completes. 5. Use `matplotlib.animation.FuncAnimation` to animate the process and `matplotlib.pyplot.show` to display it. # Example Usage ```python import numpy as np import matplotlib.pyplot as plt # Sample adjacency matrix for a graph graph = np.array([ [0, 1, 4, 0, 0, 0], [1, 0, 4, 2, 7, 0], [4, 4, 0, 3, 5, 0], [0, 2, 3, 0, 4, 6], [0, 7, 5, 4, 0, 7], [0, 0, 0, 6, 7, 0] ]) start_node = 0 end_node = 5 fig, ax = plt.subplots() # Call the function to visualize Dijkstra\'s algorithm visualize_dijkstra(graph, start_node, end_node, fig, ax) ``` # Requirements - Implement Dijkstra\'s algorithm to find the shortest path. - Use `matplotlib.animation.FuncAnimation` to animate the search process. - Use distinct colors or markers to indicate nodes, edges, the frontier, and the final path.","solution":"import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation def visualize_dijkstra(graph, start_node, end_node, fig, ax): Visualizes the Dijkstra\'s algorithm to find the shortest path in the given graph. Parameters: graph (2D numpy array): Adjacency matrix of the graph. start_node (int): Starting node for Dijkstra\'s algorithm. end_node (int): Ending node for the shortest path calculation. fig (Figure): Matplotlib figure object for plotting. ax (Axes): Matplotlib axes object for plotting. num_nodes = len(graph) visited = [False] * num_nodes dist = [float(\'inf\')] * num_nodes dist[start_node] = 0 prev = [None] * num_nodes anim_plots = {\'nodes\': [], \'edges\': []} def update_plot(curr_node, next_node=None, is_final=False): ax.clear() ax.set_xlim(0, num_nodes) ax.set_ylim(0, num_nodes) for i in range(num_nodes): ax.plot(i, num_nodes - 1, \'ko\' if not visited[i] else \'ro\') if next_node: ax.plot([curr_node, next_node], [num_nodes - 1, num_nodes - 1], \'bo-\') if is_final: path_node = end_node while path_node is not None: ax.plot(path_node, num_nodes - 1, \'go\') if prev[path_node] is not None: ax.plot([path_node, prev[path_node]], [num_nodes - 1, num_nodes - 1], \'go-\') path_node = prev[path_node] plt.pause(0.1) def dijkstra_step(): min_distance = float(\'inf\') curr_node = None for i in range(num_nodes): if not visited[i] and dist[i] < min_distance: min_distance = dist[i] curr_node = i if curr_node is None: return True visited[curr_node] = True for neighbor in range(num_nodes): if graph[curr_node][neighbor] > 0 and not visited[neighbor]: new_dist = dist[curr_node] + graph[curr_node][neighbor] if new_dist < dist[neighbor]: dist[neighbor] = new_dist prev[neighbor] = curr_node update_plot(curr_node, neighbor) return curr_node == end_node fig.show() finished = False while not finished: finished = dijkstra_step() update_plot(end_node, is_final=True) if __name__ == \\"__main__\\": graph = np.array([ [0, 1, 4, 0, 0, 0], [1, 0, 4, 2, 7, 0], [4, 4, 0, 3, 5, 0], [0, 2, 3, 0, 4, 6], [0, 7, 5, 4, 0, 7], [0, 0, 0, 6, 7, 0] ]) start_node = 0 end_node = 5 fig, ax = plt.subplots() visualize_dijkstra(graph, start_node, end_node, fig, ax)"},{"question":"You are given a text file named `data.txt` that contains multiple lines of text. Your task is to write a function called `process_text` that performs various text processing tasks and outputs the results. The function should use the following built-in modules: - `os` for interacting with the file system - `collections` for handling the word count Here are the steps that your function should accomplish: 1. Open and read the content of the `data.txt` file using the `open` function. 2. Split the text into individual lines. 3. Count the total number of lines in the text file. 4. Count the total number of words in the text file. 5. Count the frequency of each unique word in the text file. 6. Identify and display the top 3 most frequent words along with their counts. 7. Create a new text file named `summary.txt` and write the total number of lines, total number of words, and the top 3 most frequent words with their counts into this file. The following utility functions are given for you to use inside your `process_text` function: ```python def count_lines(text): return len(text.split(\'n\')) def count_words(text): return len(text.split()) def word_frequencies(text): words = text.split() return collections.Counter(words) def top_n_words(counter, n): return counter.most_common(n) ``` # Your Task: Implement the `process_text` function. Ensure you follow all the steps and utilize the given utility functions and required modules correctly. # Requirements: - Use the `open` function to read from the `data.txt` file and write to the `summary.txt` file. - Use the provided utility functions to accomplish the tasks. - Handle file operations (reading and writing) properly. # Sample Usage of your Function: ```python def main(): process_text() main() ```","solution":"import os import collections def count_lines(text): return len(text.split(\'n\')) def count_words(text): return len(text.split()) def word_frequencies(text): words = text.split() return collections.Counter(words) def top_n_words(counter, n): return counter.most_common(n) def process_text(): # Step 1: Open and read the content of the `data.txt` file with open(\'data.txt\', \'r\') as file: content = file.read() # Step 2: Split the text into individual lines lines = content.split(\'n\') # Step 3: Count the total number of lines in the text file total_lines = count_lines(content) # Step 4: Count the total number of words in the text file total_words = count_words(content) # Step 5: Count the frequency of each unique word in the text file word_freq = word_frequencies(content) # Step 6: Identify and display the top 3 most frequent words along with their counts top_words = top_n_words(word_freq, 3) # Step 7: Create a new text file named `summary.txt` and write the required data to it with open(\'summary.txt\', \'w\') as summary_file: summary_file.write(f\'Total number of lines: {total_lines}n\') summary_file.write(f\'Total number of words: {total_words}n\') summary_file.write(\'Top 3 most frequent words:n\') for word, count in top_words: summary_file.write(f\'{word}: {count}n\') def main(): process_text() if __name__ == \\"__main__\\": main()"},{"question":"In this problem, you will create a simple simulation of a queue in Python. The queue will help manage customer service requests. You will implement a queue structure that supports standard enqueue and dequeue operations, as well as additional functionality to view the current state of the queue and check if it is empty. # Class Specification You need to write a class named `CustomerQueue` that does the following: 1. Initializes an empty queue. 2. Provides a method to add customers to the queue (enqueue operation). 3. Provides a method to remove customers from the queue (dequeue operation). 4. Provides a method to view the current state of the queue. 5. Provides a method to check if the queue is empty. # Function Signatures ```python class CustomerQueue: def __init__(self): pass def enqueue(self, customer: str) -> None: pass def dequeue(self) -> str: pass def view(self) -> list: pass def is_empty(self) -> bool: pass ``` - `__init__(self)`: Initializes an empty queue. - `enqueue(self, customer: str) -> None`: Adds a customer (represented by a string) to the end of the queue. - `dequeue(self) -> str`: Removes and returns the customer at the front of the queue. If the queue is empty, return the string \\"No customers\\". - `view(self) -> list`: Returns a list representing the current state of the queue. - `is_empty(self) -> bool`: Returns `True` if the queue is empty, and `False` otherwise. # Example Usage: ```python # Example usage cq = CustomerQueue() print(cq.is_empty()) # Expected output: True cq.enqueue(\'Alice\') cq.enqueue(\'Bob\') cq.enqueue(\'Charlie\') print(cq.view()) # Expected output: [\'Alice\', \'Bob\', \'Charlie\'] print(cq.dequeue()) # Expected output: \'Alice\' print(cq.view()) # Expected output: [\'Bob\', \'Charlie\'] print(cq.is_empty()) # Expected output: False print(cq.dequeue()) # Expected output: \'Bob\' print(cq.dequeue()) # Expected output: \'Charlie\' print(cq.dequeue()) # Expected output: \'No customers\' print(cq.is_empty()) # Expected output: True ``` **Explanation**: - The `enqueue` method adds customers to the queue. - The `dequeue` method removes customers from the front of the queue and returns their name; if the queue is empty, it returns \\"No customers\\". - The `view` method provides a snapshot of the current queue state. - The `is_empty` method checks whether the queue has no customers.","solution":"class CustomerQueue: def __init__(self): self.queue = [] def enqueue(self, customer: str) -> None: self.queue.append(customer) def dequeue(self) -> str: if self.queue: return self.queue.pop(0) else: return \\"No customers\\" def view(self) -> list: return self.queue def is_empty(self) -> bool: return len(self.queue) == 0"},{"question":"You are given a dataset containing timestamps and values representing sensor readings. Your task is to create a function `detect_anomalies` that will identify anomalous readings based on the Interquartile Range (IQR) method. Anomalies are defined as values that lie below Q1 - 1.5 * IQR or above Q3 + 1.5 * IQR, where Q1 is the first quartile and Q3 is the third quartile. Your function should: 1. Accept a DataFrame containing a column \'timestamp\' and a column \'value\'. 2. Compute the Q1 (25th percentile), Q3 (75th percentile), and IQR (Inter Quartile Range) of the \'value\' column. 3. Identify and return a DataFrame of the anomalous readings, including their timestamps and values. 4. Plot the \'value\' column over time, marking anomalies with a different color. **Note**: - Ensure your function handles any missing data appropriately. - Use `matplotlib` for plotting. Below is the function signature: ```python import pandas as pd import seaborn as sns import matplotlib.pyplot as plt def detect_anomalies(df): # Your code here ``` **Example Usage**: ```python import pandas as pd data = { \'timestamp\': [\'2023-01-01 10:00\', \'2023-01-01 10:01\', \'2023-01-01 10:02\', \'2023-01-01 10:03\', \'2023-01-01 10:04\'], \'value\': [10, 12, 9, 30, 11] } df = pd.DataFrame(data) anomalies = detect_anomalies(df) print(anomalies) ``` **Expected Output**: - The printed DataFrame should list the timestamps and values of the anomalous readings. - The plot should visually distinguish normal readings from anomalies.","solution":"import pandas as pd import matplotlib.pyplot as plt def detect_anomalies(df): Identifies anomalies in a dataframe of sensor readings. Parameters: df (pd.DataFrame): Input dataframe with \'timestamp\' and \'value\' columns. Returns: pd.DataFrame: Dataframe containing anomalies (timestamps and values). if \'timestamp\' not in df.columns or \'value\' not in df.columns: raise ValueError(\\"Input DataFrame must contain \'timestamp\' and \'value\' columns\\") # Drop rows with missing values in \'value\' column df = df.dropna(subset=[\'value\']) # Calculate Q1, Q3 and IQR Q1 = df[\'value\'].quantile(0.25) Q3 = df[\'value\'].quantile(0.75) IQR = Q3 - Q1 # Define low and high anomaly thresholds lower_bound = Q1 - 1.5 * IQR upper_bound = Q3 + 1.5 * IQR # Identifying anomalies anomalies = df[(df[\'value\'] < lower_bound) | (df[\'value\'] > upper_bound)] # Plotting the values over time plt.figure(figsize=(10, 6)) plt.plot(df[\'timestamp\'], df[\'value\'], label=\'Normal Readings\') plt.scatter(anomalies[\'timestamp\'], anomalies[\'value\'], color=\'red\', zorder=5, label=\'Anomalies\') plt.xlabel(\'Timestamp\') plt.ylabel(\'Sensor Value\') plt.legend() plt.title(\'Sensor Readings and Anomalies\') plt.xticks(rotation=45) plt.tight_layout() plt.show() return anomalies"},{"question":"In this problem, you are tasked with implementing a system to manage a library\'s book lending process. The library needs a function to process a series of operations related to borrowing and returning books. The library\'s collection of books and their availability are stored in a dictionary, where the keys are book titles and the values are integers representing the number of available copies. Your goal is to write a function named `manageLibrary` that: 1. Accepts two arguments: - `library`: A dictionary where keys are book titles (strings) and values are the number of available copies (integers). - `operations`: A list of tuples, where each tuple contains an operation (\'borrow\' or \'return\') and the book title it applies to. 2. Processes the operations in the order they are given, updating the library dictionary accordingly: - If the operation is \'borrow\', decrease the number of available copies of the book by 1, but only if the book is currently available (number of copies > 0). If the book is not available, do nothing. - If the operation is \'return\', increase the number of available copies of the book by 1. 3. Returns the updated library dictionary after processing all operations. Here is an example of the initial dictionary and list of operations: ```python def manageLibrary(library, operations): Your implementation here. # Example usage: initial_library = { \'The Great Gatsby\': 3, \'1984\': 2, \'To Kill a Mockingbird\': 1, \'The Catcher in the Rye\': 0 } operations = [ (\'borrow\', \'1984\'), (\'borrow\', \'To Kill a Mockingbird\'), (\'return\', \'The Catcher in the Rye\'), (\'borrow\', \'The Catcher in the Rye\'), (\'borrow\', \'1984\') ] updated_library = manageLibrary(initial_library, operations) print(updated_library) ``` Given the initial library state and operations list above, the `manageLibrary` function should output: ```python { \'The Great Gatsby\': 3, \'1984\': 0, \'To Kill a Mockingbird\': 0, \'The Catcher in the Rye\': 0 } ``` Implement the `manageLibrary` function according to the description provided.","solution":"def manageLibrary(library, operations): Processes borrowing and returning operations on the library\'s collection. Parameters: library (dict): A dictionary where the keys are book titles and values are the number of available copies. operations (list of tuples): A list of tuples, each containing an operation (\'borrow\' or \'return\') and a book title. Returns: dict: The updated library dictionary after processing all operations. for operation, title in operations: if operation == \'borrow\': if library.get(title, 0) > 0: library[title] -= 1 elif operation == \'return\': if title in library: library[title] += 1 else: library[title] = 1 return library"},{"question":"Create a new task that matches the style of the existing set of questions. Direct output the task, without adding question numbers or any other text in the beginning. You are provided with a dataset of customer purchases from an online retail store. The dataset includes information about each purchase such as the \'Purchase ID\', \'Customer ID\', \'Purchase Date\', and \'Amount Spent\'. Your task is to process this dataset to extract useful purchase-related information. Write a function named `load_and_analyze_purchases` that accomplishes the following: 1. Loads data from a specified CSV file into a Pandas DataFrame. 2. Converts the \'Purchase Date\' column from string format to a datetime object using `pandas.to_datetime`. 3. Calculates the total amount spent by each customer and adds it as a new column in the DataFrame. The new column should be named \'total_spent\'. 4. Filters out customers whose total amount spent is less than a specified threshold. The function signature is: ```python def load_and_analyze_purchases(file_path: str, threshold: float) -> pd.DataFrame: ``` - `file_path`: A string representing the file path of the CSV file. - `threshold`: A float representing the minimum total amount spent to keep a customer in the DataFrame. **Requirements:** - Use `pandas.to_datetime` to convert the \'Purchase Date\' column to a datetime object. - Use Pandas groupby and aggregation functions to calculate the total amount spent by each customer. # Example Assume the dataset is loaded from the file \'purchases.csv\' and contains the following content: | Purchase ID | Customer ID | Purchase Date | Amount Spent | |-------------|-------------|-----------------------|--------------| | 001 | C001 | 2021-01-15 13:45:21 | 150.75 | | 002 | C002 | 2021-02-20 10:15:34 | 200.00 | | 003 | C001 | 2021-03-12 08:20:57 | 300.90 | After processing with a threshold of 200.00, the DataFrame would look like: | Customer ID | total_spent | |-------------|-------------| | C001 | 451.65 | | C002 | 200.00 | whereas if the threshold were 450.00, the DataFrame would further filter to: | Customer ID | total_spent | |-------------|-------------| | C001 | 451.65 |","solution":"import pandas as pd def load_and_analyze_purchases(file_path: str, threshold: float) -> pd.DataFrame: Loads data from a CSV file, calculates total amount spent by each customer, and filters customers based on a given spending threshold. Args: file_path (str): Path to the CSV file containing purchase data. threshold (float): Minimum total amount a customer must have spent to be included in the result. Returns: pd.DataFrame: DataFrame containing \'Customer ID\' and \'total_spent\' columns for customers who spent above the threshold. # Load data from CSV file df = pd.read_csv(file_path) # Convert \'Purchase Date\' to datetime df[\'Purchase Date\'] = pd.to_datetime(df[\'Purchase Date\']) # Calculate total amount spent by each customer customer_totals = df.groupby(\'Customer ID\')[\'Amount Spent\'].sum().reset_index() customer_totals.rename(columns={\'Amount Spent\': \'total_spent\'}, inplace=True) # Filter customers based on the threshold filtered_customers = customer_totals[customer_totals[\'total_spent\'] >= threshold] return filtered_customers"},{"question":"You are developing an e-commerce website that needs to handle product reviews. You have a database of reviews, and each review consists of a `user_id`, a `product_id`, and a `rating` (an integer between 1 and 5). To provide better insights, you want to calculate and display the average rating for each product as well as the overall average rating. Your task is to write a function named `calculate_ratings` that takes the following parameters: - `reviews` (a list of tuples): Each tuple contains three elements - `user_id` (an integer), `product_id` (an integer), and `rating` (an integer between 1 and 5). The function should: 1. Calculate the average rating for each product. 2. Calculate the overall average rating across all products. To implement this task, you must use Python’s standard libraries and data structures. Function signature: ```python def calculate_ratings(reviews: List[Tuple[int, int, int]]) -> Tuple[Dict[int, float], float]: ``` The function should return two values: - `product_ratings`: A dictionary where the keys are `product_id` and the values are the average rating (a float) for that product. - `overall_average`: A float representing the overall average rating across all products.","solution":"from typing import List, Tuple, Dict def calculate_ratings(reviews: List[Tuple[int, int, int]]) -> Tuple[Dict[int, float], float]: Calculate the average rating for each product and the overall average rating. Parameters: reviews (list of tuples): Each tuple contains a user_id (int), product_id (int), and rating (int). Returns: A tuple containing: - A dictionary where keys are product_ids and values are the average rating for that product. - A float representing the overall average rating across all products. if not reviews: return {}, 0.0 product_ratings = {} product_count = {} total_rating = 0 total_count = 0 for user_id, product_id, rating in reviews: if product_id not in product_ratings: product_ratings[product_id] = 0.0 product_count[product_id] = 0 product_ratings[product_id] += rating product_count[product_id] += 1 total_rating += rating total_count += 1 for product_id in product_ratings: product_ratings[product_id] /= product_count[product_id] overall_average = total_rating / total_count if total_count else 0.0 return product_ratings, overall_average"},{"question":"You are required to design a Python function to manage a list of integers stored in a text file. The function should remove all occurrences of a specific integer and save the modified list back to the file. # Task: Create a function named `remove_integer_from_file(num)` that: 1. Takes an integer `num` as an input parameter. 2. Reads a list of integers from a file named `numbers.txt`. The integers are stored on a single line, separated by spaces. 3. Removes all occurrences of `num` from the list. 4. Saves the modified list of integers back to `numbers.txt`, maintaining the format where integers are separated by spaces. The structure of `numbers.txt` is as follows: ``` 3 5 2 6 3 4 2 3 7 ``` # Requirements: - Read the integers from `numbers.txt`. - Remove all occurrences of `num`. - Write the modified list back to `numbers.txt`. # Example Usage: Assume `numbers.txt` contains the following data: ``` 3 5 2 6 3 4 2 3 7 ``` If `remove_integer_from_file(3)` is called, the `numbers.txt` file should be updated to: ``` 5 2 6 4 2 7 ```","solution":"def remove_integer_from_file(num): Removes all occurrences of the specified integer from the file \'numbers.txt\' Parameters: num (int): The integer to be removed from the file. # Read the file content with open(\'numbers.txt\', \'r\') as file: numbers = file.read().strip().split() # Convert all elements to integers and filter out the specified number modified_numbers = [int(x) for x in numbers if int(x) != num] # Convert numbers back to strings and join them with spaces modified_numbers_str = \' \'.join(map(str, modified_numbers)) # Write the modified content back to the file with open(\'numbers.txt\', \'w\') as file: file.write(modified_numbers_str)"},{"question":"You are developing a feature for a library management system to track borrowed books. Implement a function to calculate the late fee for overdue books. The library has specific rules for calculating the late fee based on the number of overdue days. # Function Name You need to create a function `calculate_late_fee` which has the following signature: ```python def calculate_late_fee(days_overdue: int) -> float: ``` # Parameters 1. `days_overdue`: An integer representing the number of days the book is overdue. # Return The function should return the late fee calculated based on the following rules: - For the first 5 days, the fee is 0.50 per day. - For the next 5 days (6 to 10), the fee is 1.00 per day. - For any days beyond 10, the fee is 1.50 per day. # Example ```python print(calculate_late_fee(3)) # Output: 1.5 (3 * 0.50) print(calculate_late_fee(7)) # Output: 5.5 (5 * 0.50 + 2 * 1.00) print(calculate_late_fee(12)) # Output: 13.0 (5 * 0.50 + 5 * 1.00 + 2 * 1.50) ``` # Requirements Ensure that your function handles edge cases such as negative values. In such cases, the function should return 0, as there cannot be negative overdue days.","solution":"def calculate_late_fee(days_overdue: int) -> float: Calculates the late fee for overdue books based on the number of days overdue. Parameters: days_overdue (int): The number of days the book is overdue. Returns: float: The calculated late fee. if days_overdue <= 0: return 0.0 fee = 0.0 if days_overdue <= 5: fee = days_overdue * 0.50 elif days_overdue <= 10: fee = 5 * 0.50 + (days_overdue - 5) * 1.00 else: fee = 5 * 0.50 + 5 * 1.00 + (days_overdue - 10) * 1.50 return fee"},{"question":"You are tasked with writing a function `find_longest_subarray(arr: list) -> int` that computes the length of the longest contiguous subarray with an equal number of 0s and 1s. Here\'s a detailed explanation of the task: 1. **Input List**: The input `arr` is a list composed solely of 0s and 1s. 2. **Computation Task**: - You need to identify the longest contiguous subarray where the number of 0s and 1s are the same. - Return the length of this subarray. Details to consider: - You will be provided with varying lists of different lengths containing 0s and 1s as input. - Ensure the function operates efficiently even with larger input arrays. Examples: - `[0, 1, 0, 1]` -> 4 (The entire array itself) - `[0, 1, 1, 0, 0, 1, 1]` -> 6 (The subarray `[1, 0, 0, 1, 1]` or `[0, 1, 1, 0, 0, 1]`) - `[0, 0, 1, 1, 0]` -> 4 (The subarray `[0, 0, 1, 1]`) Your task is to implement the function `find_longest_subarray()` which performs the following steps: - Iterate through the list and compute the maximum length of contiguous subarray where the number of 0s and 1s are equal. - Return this length. The function signature should be as follows: ```python def find_longest_subarray(arr: list) -> int: ``` **Hint**: To efficiently solve this problem, consider using a hash map to keep track of the difference between the count of 1s and 0s encountered so far.","solution":"def find_longest_subarray(arr: list) -> int: Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. :param arr: List of 0s and 1s :return: Length of the longest subarray # Dictionary to store the first occurrence of a particular count difference count_map = {0: -1} max_length = 0 count = 0 # This will track the difference between the count of 1s and 0s for i, num in enumerate(arr): # Increment count for 1 and decrement for 0 if num == 1: count += 1 else: count -= 1 if count in count_map: # If this count has been seen before, a subarray with equal 0s and 1s is found max_length = max(max_length, i - count_map[count]) else: # Otherwise, store this count with its index count_map[count] = i return max_length"},{"question":"You are tasked with writing a Python function that simulates a vending machine. The vending machine should dispense the correct change using the least number of coins possible. The available coins are quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent). The function signature will be: ```python def get_change(amount): ``` - **amount:** An integer representing the amount of money (in cents) that needs to be dispensed as change. The function should return a dictionary with the count of each type of coin required to make up the change. The dictionary keys should be the coin names (`\'quarters\'`, `\'dimes\'`, `\'nickels\'`, `\'pennies\'`) and the values should be the respective counts of each coin. Here\'s a simple example to illustrate the input and output: ```python >>> get_change(87) {\'quarters\': 3, \'dimes\': 1, \'nickels\': 0, \'pennies\': 2} ``` In this case, to make up 87 cents, the machine should dispense 3 quarters, 1 dime, and 2 pennies. **Requirements:** - The solution should calculate the change using the least number of coins possible. - The function should handle any non-negative integer input value. **Hints:** - Use integer division and modulus operations to determine the count of each coin type.","solution":"def get_change(amount): Returns the least number of coins needed to make the given amount of change. :param amount: Integer amount of money in cents. :return: Dictionary with the count of each type of coin. # Dictionary to hold the count of each coin type change = { \'quarters\': 0, \'dimes\': 0, \'nickels\': 0, \'pennies\': 0 } # List of tuples with coin values and corresponding dictionary keys in descending order coin_values = [ (25, \'quarters\'), (10, \'dimes\'), (5, \'nickels\'), (1, \'pennies\') ] for value, key in coin_values: change[key] = amount // value amount %= value return change"},{"question":"# Objective Write a function to compute the Levenshtein distance between two strings. The Levenshtein distance is a measure of the difference between two sequences. It represents the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. # Function Specification **Function Name:** `levenshtein_distance` **Parameters:** - `s1`: A string (not necessarily of equal length to `s2`) - `s2`: A string (not necessarily of equal length to `s1`) **Returns:** - An integer representing the Levenshtein distance between `s1` and `s2`. **Detailed Description:** 1. Initialize a matrix `dist` where `dist[i][j]` represents the Levenshtein distance between the first `i` characters of `s1` and the first `j` characters of `s2`. 2. Populate the matrix `dist` using the following rules: - `dist[0][j]` should be `j` for all `j` (converting `\\"\\"` to the first `j` characters of `s2`). - `dist[i][0]` should be `i` for all `i` (converting the first `i` characters of `s1` to `\\"\\"`). - For each `dist[i][j]`, calculate it as `min(dist[i-1][j] + 1, dist[i][j-1] + 1, dist[i-1][j-1] + cost)`, where `cost` is `0` if `s1[i-1] == s2[j-1]` else `1`. 3. Return `dist[len(s1)][len(s2)]`. # Example: **Given:** ```python s1 = \\"kitten\\" s2 = \\"sitting\\" ``` **Function Call:** ```python distance = levenshtein_distance(s1, s2) ``` **Output:** ```python 3 ``` # Constraints: - Strings `s1` and `s2` can include any combination of characters. - Utilize efficient array operations to handle the computation within feasible time complexity, especially for longer strings. This problem tests your understanding of dynamic programming and string manipulation algorithms, specifically the Levenshtein distance algorithm.","solution":"def levenshtein_distance(s1, s2): Compute the Levenshtein distance between two strings. :param s1: First string :param s2: Second string :return: Levenshtein distance between s1 and s2 if len(s1) < len(s2): s1, s2 = s2, s1 if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"You are to develop a function to simulate a simplified version of the genetic algorithm to solve an optimization problem. This requires understanding of basic concepts in evolutionary algorithms such as selection, crossover, and mutation. The objective is to find the maximum value of a function within a given range. Here are the steps to implement the algorithm: 1. **Initialize a random population** within the given range. 2. **Evaluate the fitness** of each individual using the provided fitness function `fitness_fn`. 3. **Select parents** based on their fitness scores to create the next generation. 4. **Perform crossover** between pairs of parents to produce offspring. 5. **Apply mutation** to the offspring to maintain genetic diversity. 6. **Repeat** the process for a fixed number of generations or until convergence. Implement the function: ```python def solve_optimization_problem(pop_size, num_generations, range_limits, fitness_fn): # implementation details pass ``` - `pop_size`: number of individuals in the population. - `num_generations`: maximum number of generations to evolve the population. - `range_limits`: a tuple (low, high) specifying the range in which values are to be optimized. - `fitness_fn`: a function that calculates the fitness score of an individual. **Details**: - Initialize the population randomly within `range_limits`. - Select a proportion of the best-performing individuals as parents. - Crossover: Combine pairs of parents to create offspring. A simple one-point or two-point crossover is sufficient. - Mutation: Introduce small random changes in the offspring. - Return the best individual found after the specified number of generations. Your task is to write the function `solve_optimization_problem` that simulates this genetic algorithm, starting with an initial random population, and evolving it over multiple generations to find the maximum value of the fitness function.","solution":"import random def initialize_population(pop_size, range_limits): return [random.uniform(range_limits[0], range_limits[1]) for _ in range(pop_size)] def evaluate_fitness(population, fitness_fn): return [(individual, fitness_fn(individual)) for individual in population] def select_parents(evaluated_population, num_parents): evaluated_population.sort(key=lambda x: x[1], reverse=True) return [individual for individual, fitness in evaluated_population[:num_parents]] def crossover(parent_a, parent_b): crossover_point = random.uniform(0, 1) child = crossover_point * parent_a + (1 - crossover_point) * parent_b return child def mutate(individual, mutation_rate, range_limits): if random.random() < mutation_rate: mutation = random.uniform(-0.1, 0.1) * (range_limits[1] - range_limits[0]) individual = individual + mutation individual = min(max(individual, range_limits[0]), range_limits[1]) return individual def solve_optimization_problem(pop_size, num_generations, range_limits, fitness_fn, mutation_rate=0.01): population = initialize_population(pop_size, range_limits) for generation in range(num_generations): evaluated_population = evaluate_fitness(population, fitness_fn) parents = select_parents(evaluated_population, pop_size // 2) # Select half as parents next_generation = [] while len(next_generation) < pop_size: parent_a, parent_b = random.sample(parents, 2) child = crossover(parent_a, parent_b) child = mutate(child, mutation_rate, range_limits) next_generation.append(child) population = next_generation best_individual, best_fitness = max(evaluate_fitness(population, fitness_fn), key=lambda x: x[1]) return best_individual"},{"question":"You are tasked with creating a function called `analyze_file_contents` that processes the contents of a file in the following manner: 1. Reads the file line by line and stores only the unique lines in a list. 2. Provides functionality to swap two lines based on their indices. 3. Saves the modified list back to the file in reverse order. 4. Counts occurrences of a specified word across all lines. Here are the detailed steps to follow: - You will use the `open` function to read from and write to the file. - The function `analyze_file_contents` should accept three parameters: `filename` (the name of the file to read from and write to), `swap_indices` (a tuple containing two indices to swap), and `word` (a string to count occurrences of). - Open the file in read mode and read its contents line by line. - Store the unique lines in a list while preserving the order of their first appearance. - If `swap_indices` is provided, swap the lines in the list based on those indices (0-based index). - Save the modified list back to the same file, but in reverse order. - Calculate and return the total count of the specified word across the unique lines (case-sensitive). Here is a basic template for the function: ```python def analyze_file_contents(filename, swap_indices=None, word=\\"\\"): \'\'\' This function processes the contents of a file according to the rules outlined above. \'\'\' # Your code here ``` **Example Usage:** 1. For a file `test.txt` with the following content: ``` Hello world This is a test Hello world Python coding ``` Calling `analyze_file_contents(\'test.txt\', swap_indices=(0, 2), word=\'Hello\')` should: - Read the file and keep unique lines: [\'Hello world\', \'This is a test\', \'Python coding\'] - Swap lines at indices 0 and 2 (resulting list: [\'Python coding\', \'This is a test\', \'Hello world\']) - Reverse the order and save back to `test.txt` (saved content: [\'Hello world\', \'This is a test\', \'Python coding\']) - Return the word count: 1 Ensure that your function meets the outlined requirements and properly handles file operations.","solution":"def analyze_file_contents(filename, swap_indices=None, word=\\"\\"): \'\'\' This function processes the contents of a file according to the rules outlined above. \'\'\' with open(filename, \'r\') as file: lines = file.readlines() # Strip newline characters and store unique lines unique_lines = [] seen_lines = set() for line in lines: stripped_line = line.rstrip(\'n\') if stripped_line not in seen_lines: unique_lines.append(stripped_line) seen_lines.add(stripped_line) # Swap lines if swap_indices is provided if swap_indices: i, j = swap_indices if 0 <= i < len(unique_lines) and 0 <= j < len(unique_lines): unique_lines[i], unique_lines[j] = unique_lines[j], unique_lines[i] # Save the list back to the file in reverse order with open(filename, \'w\') as file: for line in reversed(unique_lines): file.write(line + \'n\') # Count occurrences of the specified word word_count = sum(line.count(word) for line in unique_lines) return word_count"},{"question":"# Calculating Sales Commission Based on Performance Data You are provided with sales performance data in a CSV file. Each row in the file represents the sales record of an individual salesperson. Your task is to process this data to calculate the sales commission for each salesperson based on specific rules. **Objective**: Implement the function `calculate_commission(filepath: str) -> pd.DataFrame` that performs the following: 1. Read the CSV file into a pandas DataFrame. 2. The DataFrame columns are assumed to be: `id`, `name`, `total_sales`, and `sales_target`. 3. Calculate the commission for each salesperson using the following rules: - If `total_sales` is greater than or equal to `sales_target`, the commission is 10% of `total_sales`. - If `total_sales` is less than `sales_target`, the commission is 5% of `total_sales`. 4. Add a new column `commission` to the DataFrame to store the calculated commission for each salesperson. 5. Ensure the DataFrame has readable column names and includes the new `commission` column. The function should return the processed DataFrame. # Example Usage Assume your CSV file `sales_data.csv` has the following content: ``` id,name,total_sales,sales_target 1,John Doe,12000,10000 2,Jane Smith,9000,10000 3,Bob Johnson,15000,15000 ``` The function should produce the following DataFrame: ``` id name total_sales sales_target commission 0 1 John Doe 12000 10000 1200.0 1 2 Jane Smith 9000 10000 450.0 3 3 Bob Johnson 15000 15000 1500.0 ``` **Library**: Make sure to use the `pandas` library to read the CSV file, process the data, and generate the DataFrame.","solution":"import pandas as pd def calculate_commission(filepath: str) -> pd.DataFrame: Calculate sales commissions based on the given CSV file. Parameters: filepath (str): The path to the CSV file containing sales performance data. Returns: pd.DataFrame: The DataFrame containing the sales data along with calculated commissions. # Read the CSV file into a DataFrame df = pd.read_csv(filepath) # Calculate the commission based on the rules provided df[\'commission\'] = df.apply(lambda row: row[\'total_sales\'] * 0.10 if row[\'total_sales\'] >= row[\'sales_target\'] else row[\'total_sales\'] * 0.05, axis=1) return df"},{"question":"# Principal Component Analysis for Dimensionality Reduction Principal Component Analysis (PCA) is a technique used for reducing the dimensionality of datasets, increasing interpretability while minimizing information loss. To understand how PCA can be used effectively, you will write a function that applies PCA on a given dataset to reduce it to a specified number of principal components, and then evaluate the reconstruction error of the reduced representation. # Task Write a function `apply_pca` that takes the following inputs: - `X`: numpy array or array-like, shape (n_samples, n_features) The dataset to be reduced. - `n_components`: int The number of principal components to keep. The function will return: - `X_reduced`: numpy array, shape (n_samples, n_components) The dataset transformed to the reduced dimensionality space. - `reconstruction_error`: float The mean squared error of the reconstructed data compared to the original data. # Function Signature ```python def apply_pca(X, n_components): # Your code here pass ``` # Requirements - Utilize the `PCA` class from `sklearn.decomposition` - Use the `mean_squared_error` function from `sklearn.metrics` to compute the reconstruction error The purpose of this function is to reduce the dimensionality of the dataset using PCA and evaluate how much information is lost through this reduction. # Example ```python import numpy as np from sklearn.datasets import load_iris from sklearn.decomposition import PCA from sklearn.metrics import mean_squared_error # Load a sample dataset data = load_iris() X = data.data # Apply PCA n_components = 2 X_reduced, recon_error = apply_pca(X, n_components) # Output the results print(\\"Reduced Data Shape:\\", X_reduced.shape) print(\\"Reconstruction Error:\\", recon_error) ``` # Implementation Hint To calculate the reconstruction error, you can use the `inverse_transform` method of the PCA instance to map the reduced data back to the original space and then compute the mean squared error between the original data and the reconstructed data.","solution":"import numpy as np from sklearn.decomposition import PCA from sklearn.metrics import mean_squared_error def apply_pca(X, n_components): Apply PCA to reduce the dimensionality of the dataset. Parameters: X (numpy array or array-like): The dataset to be reduced. n_components (int): The number of principal components to keep. Returns: X_reduced (numpy array): The dataset transformed to the reduced dimensionality space. reconstruction_error (float): The mean squared error of the reconstructed data compared to the original data. # Initialize PCA with the given number of components pca = PCA(n_components=n_components) # Fit PCA on the dataset and transform the dataset to the reduced dimensionality space X_reduced = pca.fit_transform(X) # Reconstruct the dataset from the reduced dimensionality space X_reconstructed = pca.inverse_transform(X_reduced) # Calculate the reconstruction error (mean squared error) reconstruction_error = mean_squared_error(X, X_reconstructed) return X_reduced, reconstruction_error"},{"question":"Create a function named `sum_of_evens` that takes a single parameter `nums`, which is a list of integers. The function should return the sum of all even numbers in the list. If the list is empty or contains no even numbers, the function should return 0. # Requirements: - Use a list comprehension to filter even numbers from the list. - Use the `sum` function to calculate the sum of the filtered even numbers. # Example Usage: ```python nums = [1, 2, 3, 4, 5, 6] print(sum_of_evens(nums)) # Should return 12 (2 + 4 + 6) nums = [1, 3, 5, 7] print(sum_of_evens(nums)) # Should return 0 since there are no even numbers ```","solution":"def sum_of_evens(nums): Returns the sum of all even numbers in the list nums. Parameters: nums (list): A list of integers. Returns: int: The sum of all even numbers in the list. return sum([num for num in nums if num % 2 == 0])"},{"question":"You are required to write a Python function named `minimum_window_substring(s, t)` that finds the smallest substring in `s` which contains all the characters of `t`. Both input strings `s` and `t` will only contain lowercase characters. Here are the specific requirements for the function: 1. The function accepts two string parameters `s` and `t`, where `s` is the main string and `t` is the string containing characters to be found in `s`. 2. The function must return the smallest substring of `s` that includes all characters in `t`. If there is no such substring, it should return an empty string \\"\\". 3. If there are multiple valid substrings with the same length, return the one which appears first in `s`. Your task is to implement the `minimum_window_substring(s, t)` function which fulfills these requirements efficiently. Function Signature: ```python def minimum_window_substring(s: str, t: str) -> str: # function body ``` [Constraints]: - The length of `s` will be between 1 and 10^5. - The length of `t` will be between 1 and 100. Example: ```python s = \\"ADOBECODEBANC\\" t = \\"ABC\\" minimum_window_substring(s, t) # returns \\"BANC\\" s = \\"a\\" t = \\"a\\" minimum_window_substring(s, t) # returns \\"a\\" s = \\"a\\" t = \\"aa\\" minimum_window_substring(s, t) # returns \\"\\" ``` [Hints] - You might want to use a sliding window approach to tackle this problem.","solution":"from collections import Counter def minimum_window_substring(s: str, t: str) -> str: if not s or not t: return \\"\\" need = Counter(t) missing = len(t) left = start = end = 0 for right, char in enumerate(s, 1): if need[char] > 0: missing -= 1 need[char] -= 1 if missing == 0: while left < right and need[s[left]] < 0: need[s[left]] += 1 left += 1 if not end or right - left < end - start: start, end = left, right need[s[left]] += 1 missing += 1 left += 1 return s[start:end]"},{"question":"Implement a function `longest_common_subsequence(s1: str, s2: str) -> int` that takes in two strings, `s1` and `s2`, and returns the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. Constraints: - Both strings `s1` and `s2` have a length of `n (1 <= n <= 1000)`. - The strings contain only lowercase English letters. Example: ```python def longest_common_subsequence(s1: str, s2: str) -> int: # Your code here # Example 1: # Input: s1 = \\"abcde\\", s2 = \\"ace\\" # Output: 3 # Explanation: The longest common subsequence is \\"ace\\" and its length is 3. # Example 2: # Input: s1 = \\"abc\\", s2 = \\"abc\\" # Output: 3 # Explanation: The longest common subsequence is \\"abc\\" and its length is 3. # Example 3: # Input: s1 = \\"abc\\", s2 = \\"def\\" # Output: 0 # Explanation: There is no common subsequence between \\"abc\\" and \\"def\\". ```","solution":"def longest_common_subsequence(s1: str, s2: str) -> int: Returns the length of the longest common subsequence between s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Create a function that reads a file containing a list of integers (one integer per line), sorts these integers in descending order, and writes the sorted list back to a new file. The function should handle the possibility of the input file being empty by raising a ValueError with an appropriate message. Additionally, the function should return the name of the output file where the sorted integers are written. The function should output: str: The name of the file that contains the sorted list of integers. You should write self-contained code starting with: ``` def sort_integers(input_file, output_file): ```","solution":"def sort_integers(input_file, output_file): Reads a file containing a list of integers (one integer per line), sorts these integers in descending order, and writes the sorted list back to a new file. Args: - input_file: str, the path to the input file. - output_file: str, the path to the output file. Returns: - str: The name of the file that contains the sorted list of integers. Raises: - ValueError: If the input file is empty. with open(input_file, \'r\') as infile: lines = infile.readlines() if not lines: raise ValueError(\\"The input file is empty.\\") integers = [int(line.strip()) for line in lines] sorted_integers = sorted(integers, reverse=True) with open(output_file, \'w\') as outfile: for num in sorted_integers: outfile.write(f\\"{num}n\\") return output_file"},{"question":"You need to write a function `remap_string(input_string: str, char_mapping: Dict[str, str]) -> str` that remaps characters in an input string based on a given character mapping. The function should: 1. Take two arguments: `input_string` as a string to be remapped and `char_mapping` as a dictionary where each key-value pair represents a character to be replaced and its replacement, respectively. 2. For each character in `input_string`, if the character is a key in `char_mapping`, it should be replaced with the corresponding value from `char_mapping`. 3. If the character is not a key in `char_mapping`, it should remain unchanged in the output string. 4. The function should maintain the original order of characters that are not remapped. **Requirements:** - You should use only built-in Python functions and data structures. Here is an example of how the function should behave: ```python # Provided character mapping dictionary and input string char_mapping = {\'a\': \'1\', \'b\': \'2\', \'c\': \'3\'} input_string = \\"abcxyz\\" # Call the function with the predefined dictionary result = remap_string(input_string, char_mapping) print(f\\"Remapped string: {result}\\") # Expected output: \\"123xyz\\" ```","solution":"def remap_string(input_string: str, char_mapping: dict) -> str: Remaps characters in input_string based on char_mapping. Parameters: input_string (str): The string to be remapped. char_mapping (dict): Dictionary where each key is a character to be replaced and the value is the replacement character. Returns: str: The remapped string. return \'\'.join([char_mapping.get(char, char) for char in input_string])"},{"question":"Create a Python class named `TemperatureConverter` with the following capabilities: 1. The class should have an initializer that accepts the initial temperature value and the temperature scale (\'C\' for Celsius or \'F\' for Fahrenheit). 2. Provide methods to convert temperatures between Celsius and Fahrenheit: - `to_celsius`: Converts the stored temperature to Celsius if it is in Fahrenheit. - `to_fahrenheit`: Converts the stored temperature to Fahrenheit if it is in Celsius. 3. Implement a method `set_temperature` to update the temperature value and scale. 4. Override the `__str__` method to output the temperature and its scale in a user-friendly format. Write the `TemperatureConverter` class with the above requirements and include suitable error checking for invalid scales and values. Demonstrate the usage of this class by converting 100 Fahrenheit to Celsius and 37 Celsius to Fahrenheit. Example usage: ```python tc1 = TemperatureConverter(100, \'F\') print(tc1) # Expected output: \\"100° Fahrenheit\\" print(tc1.to_celsius()) # Expected output: \\"37.7778° Celsius\\" tc2 = TemperatureConverter(37, \'C\') print(tc2) # Expected output: \\"37° Celsius\\" print(tc2.to_fahrenheit()) # Expected output: \\"98.6° Fahrenheit\\" tc1.set_temperature(212, \'F\') print(tc1) # Expected output: \\"212° Fahrenheit\\" print(tc1.to_celsius()) # Expected output: \\"100° Celsius\\" ```","solution":"class TemperatureConverter: def __init__(self, temperature, scale): self.set_temperature(temperature, scale) def to_celsius(self): if self.scale == \'F\': self.temperature = (self.temperature - 32) * 5/9 self.scale = \'C\' return f\\"{self.temperature:.4f}° Celsius\\" def to_fahrenheit(self): if self.scale == \'C\': self.temperature = self.temperature * 9/5 + 32 self.scale = \'F\' return f\\"{self.temperature:.4f}° Fahrenheit\\" def set_temperature(self, temperature, scale): if scale not in (\'C\', \'F\'): raise ValueError(\\"Invalid scale! Use \'C\' for Celsius or \'F\' for Fahrenheit.\\") if not isinstance(temperature, (int, float)): raise ValueError(\\"Temperature must be an integer or float.\\") self.temperature = temperature self.scale = scale def __str__(self): scale_full = \'Celsius\' if self.scale == \'C\' else \'Fahrenheit\' return f\\"{self.temperature}° {scale_full}\\" # Demonstrating the usage of the class tc1 = TemperatureConverter(100, \'F\') print(tc1) # Expected output: \\"100° Fahrenheit\\" print(tc1.to_celsius()) # Expected output: \\"37.7778° Celsius\\" tc2 = TemperatureConverter(37, \'C\') print(tc2) # Expected output: \\"37° Celsius\\" print(tc2.to_fahrenheit()) # Expected output: \\"98.6000° Fahrenheit\\" tc1.set_temperature(212, \'F\') print(tc1) # Expected output: \\"212° Fahrenheit\\" print(tc1.to_celsius()) # Expected output: \\"100.0000° Celsius\\""},{"question":"You are required to implement a function named `caloric_intake` that helps users track their daily caloric intake. The function should prompt the user to input the number of calories consumed in each meal throughout the day and then calculate and display the total number of calories consumed. 1. The function should keep asking the user for the number of calories consumed in their meal. 2. User should input a non-negative integer representing the calories consumed. 3. If the user inputs a negative number, the function should print \\"Invalid input. Please enter a non-negative number.\\" and prompt for the input again. 4. When the user inputs \'done\', the function should stop asking for further input and display the total calories consumed for the day. # Function Signature ```python def caloric_intake(): # your implementation ``` # Example ```plaintext Please enter the calories consumed in your meal (or type \'done\' to finish): > 500 Please enter the calories consumed in your meal (or type \'done\' to finish): > 300 Please enter the calories consumed in your meal (or type \'done\' to finish): > -100 Invalid input. Please enter a non-negative number. Please enter the calories consumed in your meal (or type \'done\' to finish): > 400 Please enter the calories consumed in your meal (or type \'done\' to finish): > done Total calories consumed today: 1200 ``` # Requirements - Use a loop to continuously prompt the user for the number of calories. - Validate user input to ensure it is a non-negative integer or the string \'done\'. - Accumulate the total calories consumed and display the total when the user types \'done\'.","solution":"def caloric_intake(): total_calories = 0 while True: user_input = input(\\"Please enter the calories consumed in your meal (or type \'done\' to finish):n> \\") if user_input.lower() == \'done\': break try: calories = int(user_input) if calories < 0: print(\\"Invalid input. Please enter a non-negative number.\\") else: total_calories += calories except ValueError: print(\\"Invalid input. Please enter a non-negative number.\\") print(f\\"Total calories consumed today: {total_calories}\\") # Example usage: # caloric_intake()"},{"question":"Implement a function to find the longest consecutive sequence of unique characters in a given string. The function should return the length of this longest sequence. The function should be named `longest_unique_substring_length`. The function will take the following parameter: - `s`: A string for which the longest unique character sequence is to be determined. Your function should efficiently compute the length of the longest substring that contains all unique characters. You may assume that the input string only contains ASCII characters. **Function Signature:** ```python def longest_unique_substring_length(s): pass ``` **Example:** ```python def main(): s1 = \\"abcabcbb\\" assert longest_unique_substring_length(s1) == 3 s2 = \\"bbbbb\\" assert longest_unique_substring_length(s2) == 1 s3 = \\"pwwkew\\" assert longest_unique_substring_length(s3) == 3 s4 = \\"\\" assert longest_unique_substring_length(s4) == 0 s5 = \\"abcdefg\\" assert longest_unique_substring_length(s5) == 7 print(\\"All tests passed.\\") if __name__ == \\"__main__\\": main() ```","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all unique characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are tasked with implementing a function to perform a depth-first search (DFS) on a graph to detect cycles. The graph is represented as an adjacency list. You need to determine whether there is a cycle in the graph. The function you need to write is `has_cycle(graph, n)`. It takes the following arguments: 1. `graph`: A dictionary where the keys are nodes and the values are lists of adjacent nodes. 2. `n`: An integer representing the number of nodes in the graph. The function should return `True` if there is a cycle in the graph, and `False` otherwise. # Example ```python graph = { 0: [1, 2], 1: [2], 2: [0, 3], 3: [3] } n = 4 print(has_cycle(graph, n)) # Output should be True ``` # Example ```python graph = { 0: [1, 2], 1: [2], 2: [3], 3: [] } n = 4 print(has_cycle(graph, n)) # Output should be False ``` # Constraints - The graph can be either directed or undirected. - The number of nodes, `n`, is at most `1000`. - Cycles in undirected graphs should only be detected if they involve at least three nodes (i.e., ignore trivial cycles between two nodes). # Note To efficiently detect cycles, you may use depth-first search with a recursive approach. Keep track of visited nodes, as well as nodes that are currently in the recursion stack, to identify back edges that indicate cycles.","solution":"def has_cycle(graph, n): Detects if there is a cycle in a graph represented as an adjacency list. Args: graph (dict): A dictionary where the keys are nodes and the values are lists of adjacent nodes. n (int): Number of nodes in the graph. Returns: bool: True if there is a cycle in the graph, False otherwise. def dfs(v): Helper function to perform DFS and detect cycle. visited[v] = True rec_stack[v] = True for neighbor in graph.get(v, []): if not visited[neighbor]: if dfs(neighbor): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False visited = [False] * n rec_stack = [False] * n for node in range(n): if not visited[node]: if dfs(node): return True return False"},{"question":"You are tasked with creating a function `smart_sort(lst, n)` that sorts a list of integers in a special way. The function should perform the following operations: 1. Separate the list into two sublists: one containing integers greater than `n` and the other containing integers less than or equal to `n`. 2. Sort each sublist individually (ascending order for both). 3. Merge the sorted sublists, placing the sublist with integers greater than `n` first, followed by the sublist with integers less than or equal to `n`. **Steps:** 1. Traverse through the input list to create two new lists: - `greater`: containing integers greater than `n`. - `less_or_equal`: containing integers less than or equal to `n`. 2. Sort both `greater` and `less_or_equal` lists in ascending order. 3. Concatenate the `greater` list with the `less_or_equal` list to get the final sorted list. 4. Return the concatenated list. **Function Signature:** ```python def smart_sort(lst, n): pass ``` **Input:** - `lst`: A list of integers to be sorted. - `n`: An integer threshold used to separate the list. **Output:** - `sorted_list`: A list of integers sorted as per the special sorting criteria described. **Example:** ```python # Example 1 lst = [3, 5, 2, 8, 1, 10] n = 5 # greater = [8, 10] # less_or_equal = [3, 5, 2, 1] # Sorted greater = [8, 10] # Sorted less_or_equal = [1, 2, 3, 5] # Final output = [8, 10, 1, 2, 3, 5] print(smart_sort(lst, n)) # Output: [8, 10, 1, 2, 3, 5] # Example 2 lst = [10, 20, 5, 15, 25] n = 15 # greater = [20, 25] # less_or_equal = [10, 5, 15] # Sorted greater = [20, 25] # Sorted less_or_equal = [5, 10, 15] # Final output = [20, 25, 5, 10, 15] print(smart_sort(lst, n)) # Output: [20, 25, 5, 10, 15] ``` **Hint:** - Use list comprehensions to efficiently create the `greater` and `less_or_equal` lists. - Use Python\'s built-in `sort` or `sorted` functions to sort the sublists.","solution":"def smart_sort(lst, n): Sorts the list such that elements greater than n come first in ascending order, followed by elements less than or equal to n also in ascending order. # Separate the list into two sublists greater = [x for x in lst if x > n] less_or_equal = [x for x in lst if x <= n] # Sort each sublist greater.sort() less_or_equal.sort() # Concatenate the two sorted sublists return greater + less_or_equal"},{"question":"Implement a function `calculate_edit_distance` that computes the minimum number of operations (insertions, deletions, or substitutions) required to convert one string into another. This metric is known as the Levenshtein distance or edit distance. Your function should take two strings as input and return an integer representing their edit distance. The edit distance can be calculated using dynamic programming whereby we construct a matrix `dp` of size `(m+1) x (n+1)` where `m` is the length of the first string and `n` is the length of the second string. The cell `dp[i][j]` in the matrix will hold the edit distance between the first `i` characters of the first string and the first `j` characters of the second string. Here is a breakdown of the operations: 1. Insert a character: Increases the distance by 1. 2. Delete a character: Increases the distance by 1. 3. Substitute a character: Increases the distance by 1 if the characters are different; otherwise, the distance remains the same. The function should follow these steps: 1. Initialize the matrix `dp` where `dp[0][0]` is 0 and the first row and first column are initialized to their indices (representing converting from/to empty substring). 2. Fill in the matrix using the minimum of the three possible operations (insert, delete, substitute). 3. Return the value in `dp[m][n]` which represents the edit distance between the full lengths of the two strings. Function signature: ```python def calculate_edit_distance(str1: str, str2: str) -> int: ``` **Example**: ```python print(calculate_edit_distance(\\"kitten\\", \\"sitting\\")) # Output should be 3 print(calculate_edit_distance(\\"flaw\\", \\"lawn\\")) # Output should be 2 ``` **Constraints**: - The length of the input strings will be between 1 and 1000. - All characters in the input strings will be lowercase English letters.","solution":"def calculate_edit_distance(str1: str, str2: str) -> int: m, n = len(str1), len(str2) # Create a matrix (dp) with dimensions (m+1)x(n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the first row and first column of the matrix for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill in the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if str1[i-1] == str2[j-1]: cost = 0 else: cost = 1 dp[i][j] = min(dp[i-1][j] + 1, # Deletion dp[i][j-1] + 1, # Insertion dp[i-1][j-1] + cost) # Substitution return dp[m][n]"},{"question":"In this problem, you are required to implement a basic perceptron-based AND logic gate function using the PyTorch library. A perceptron is a type of artificial neuron which functions as a binary classifier, evaluating whether some input values meet a certain criterion. Here, our perceptron will decide whether the logical AND condition is satisfied. You need to write a function `AND_gate` that takes two binary input values ( x1 ) and ( x2 ). The perceptron will use the weighted sum of inputs and a bias term to determine the output with the following specifics: - Use the weights [0.5, 0.5] for the inputs. - Use a bias of -0.7. The formula for determining the output is: [ text{temp} = (x1 times 0.5) + (x2 times 0.5) - 0.7 ] If `temp` is greater than or equal to 0, the function should return 1, indicating the AND condition is satisfied. Otherwise, it should return 0. Use the `torch.dot()` function to compute the dot product of the weight and input tensors. # Function Signature ```python def AND_gate(x1: int, x2: int) -> int: ``` # Example ```python # Example Usage print(AND_gate(0, 0)) # Expected output: 0 print(AND_gate(0, 1)) # Expected output: 0 print(AND_gate(1, 0)) # Expected output: 0 print(AND_gate(1, 1)) # Expected output: 1 ``` # Requirements - The function **must** use the `torch.dot()` function to compute the dot product of the weight and input tensors. - You can assume that inputs ( x1 ) and ( x2 ) are always binary (0 or 1). # Notes - The function should handle the inputs as PyTorch tensors. - Ensure that all required imports (e.g., `import torch`) are made within the function or at the module level.","solution":"import torch def AND_gate(x1: int, x2: int) -> int: Simulates an AND logic gate using a perceptron-based approach with the given weights and bias. Args: x1 (int): First binary input (0 or 1). x2 (int): Second binary input (0 or 1). Returns: int: Output of the AND gate (0 or 1). # Define the weights and bias weights = torch.tensor([0.5, 0.5]) bias = -0.7 # Create the input tensor inputs = torch.tensor([x1, x2], dtype=torch.float32) # Compute the temp value using dot product and bias temp = torch.dot(weights, inputs) + bias # Determine the output based on the temp value return 1 if temp >= 0 else 0"},{"question":"Generate a list of 1000 randomly chosen integers between 1 and 100 (inclusive). Compute and return the mean, median, and mode of the generated list. Ensure the random selection is reproducible by using a random seed. The function should output: tuple: A tuple containing: float: The mean of the list of integers. float: The median of the list of integers. int: The mode of the list of integers. You should write self-contained code starting with: ``` import random import statistics def task_func(seed=None): ```","solution":"import random import statistics def task_func(seed=None): Generates a list of 1000 randomly chosen integers between 1 and 100 (inclusive). Computes and returns the mean, median, and mode of the generated list. Parameters: seed (int, optional): The seed for the random number generator. Returns: tuple: A tuple containing: float: The mean of the list of integers. float: The median of the list of integers. int: The mode of the list of integers. if seed is not None: random.seed(seed) random_integers = [random.randint(1, 100) for _ in range(1000)] mean = statistics.mean(random_integers) median = statistics.median(random_integers) mode = statistics.mode(random_integers) return mean, median, mode"},{"question":"Create a function called `merge_sorted_linked_lists` that merges two singly linked lists that are already sorted in ascending order. The function should return a new linked list that contains all elements from both input lists, also sorted in ascending order. You are required to define a `ListNode` class to represent nodes in the linked list. # Function Signature ```python def merge_sorted_linked_lists(list1: \'ListNode\', list2: \'ListNode\') -> \'ListNode\': ``` # Class Definition ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` # Arguments - `list1` (ListNode): The head of the first sorted linked list. - `list2` (ListNode): The head of the second sorted linked list. # Return - Returns the head of a new sorted linked list that contains all elements from `list1` and `list2`. # Example **Input:** ```python # Creating a first linked list: 1 -> 3 -> 5 list1 = ListNode(1, ListNode(3, ListNode(5))) # Creating a second linked list: 2 -> 4 -> 6 list2 = ListNode(2, ListNode(4, ListNode(6))) # Merging the lists result = merge_sorted_linked_lists(list1, list2) ``` **Output:** The resulting linked list will be: ``` 1 -> 2 -> 3 -> 4 -> 5 -> 6 ``` # Requirements - Proper definition of the `ListNode` class for linked list nodes. - Merge the two input sorted linked lists into a new sorted linked list. - The function should handle edge cases where one or both input lists are empty.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sorted_linked_lists(list1: ListNode, list2: ListNode) -> ListNode: # Create a dummy node to act as the head of the merged linked list dummy = ListNode() current = dummy # Traverse both lists and merge them in sorted order while list1 and list2: if list1.val <= list2.val: current.next = list1 list1 = list1.next else: current.next = list2 list2 = list2.next current = current.next # If one of the lists is not empty, append it to the merged list if list1: current.next = list1 elif list2: current.next = list2 return dummy.next"},{"question":"You are given a Python function that simulates the behavior of an elevator system in a multi-story building. The function `elevator_simulator` takes in a list of requests, where each request is a tuple of the form `(start_floor, destination_floor)`, representing the floor where the request was made and the desired destination floor. Your task is to write a function named `elevator_simulator(requests, num_floors)` that performs the following tasks: 1. **Simulate the elevator moving between floors to fulfill each request.** 2. **Calculate the total distance traveled by the elevator.** 3. **Return a list representing the sequence of floors visited by the elevator.** The elevator always starts at the ground floor (floor 0), and you may assume that the building has a finite number of floors defined by `num_floors`. # Function Signature ```python def elevator_simulator(requests, num_floors): ``` # Parameters - `requests` (list of tuples): A list containing tuples representing the elevator requests. Each tuple is of the form `(start_floor, destination_floor)`. - `num_floors` (int): The total number of floors in the building. # Returns - `floors_visited` (list of int): A list representing the sequence of floors the elevator visited. # Example ```python requests = [(0, 3), (3, 1), (0, 2)] num_floors = 5 print(elevator_simulator(requests, num_floors)) # Output: [0, 3, 1, 0, 2] ``` # Additional Notes - The elevator starts at the ground floor (floor 0). - Assume no concurrent requests; the elevator processes each request in the order given. - The building has `num_floors` numbered from 0 to `num_floors - 1`. - The elevator stops on exactly the floors specified in the requests, in the order they are processed. # Hints - You may find it useful to implement a helper function to calculate the distance between two floors. - Remember to include the initial starting point (ground floor) in the sequence of floors visited. # Sample Input and Output ```python requests = [(2, 5), (5, 0), (0, 2)] num_floors = 6 print(elevator_simulator(requests, num_floors)) # Output: [0, 2, 5, 0, 2] ```","solution":"def elevator_simulator(requests, num_floors): Simulates the elevator moving between floors to fulfill each request. Calculates the total distance traveled by the elevator. Returns a list representing the sequence of floors visited by the elevator. Arguments: requests -- a list of tuples where each tuple is (start_floor, destination_floor) num_floors -- an integer representing the number of floors in the building Returns: A list of integers representing the sequence of floors visited by the elevator. current_floor = 0 floors_visited = [current_floor] for start, dest in requests: if start < 0 or dest < 0 or start >= num_floors or dest >= num_floors: raise ValueError(\\"Floor numbers must be within the range of the building.\\") if current_floor != start: floors_visited.append(start) current_floor = start floors_visited.append(dest) current_floor = dest return floors_visited"},{"question":"You are given a list of non-negative integers, representing the amount of money of each house. Each house is arranged in a line and you are a robber planning to rob houses along this line. However, you cannot rob two consecutive houses because the security system will automatically alert the police. Write a function called `rob_houses(nums)` that determines the maximum amount of money you can rob tonight without alerting the police. Use dynamic programming to solve this problem. The input is a list of non-negative integers `nums` where each integer represents the amount of money in each house. Example: ```python nums = [2, 7, 9, 3, 1] print(rob_houses(nums)) # Output: 12 ``` Constraints: - The number of houses will be at most 100. - Each house\'s monetary value will be between 0 and 4000. **Note**: Implement a dynamic programming approach to keep track of the maximum amount of money robbed up to each house.","solution":"def rob_houses(nums): Determines the maximum amount of money you can rob tonight without alerting the police. :param nums: List of non-negative integers representing the amount of money of each house. :return: The maximum amount of money you can rob tonight. if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1] # Example usage nums = [2, 7, 9, 3, 1] print(rob_houses(nums)) # Output: 12"},{"question":"You are required to write a Python function named `elementwise_multiplication` that computes the element-wise multiplication of two lists of numbers and returns the resulting list. The function should have two parameters: 1. `list1`: a list of integers or floats. 2. `list2`: a list of integers or floats. The function should perform the multiplication of corresponding elements from `list1` and `list2` and return a new list containing the results. If the two lists have different lengths, the function should return `None` and print \\"Lists are not of the same length\\". The relevant structure of the function is as follows: ```python def elementwise_multiplication(list1, list2): - Returns a list where each element is the product of the corresponding elements of the input lists. :param list1: first list of numbers. :param list2: second list of numbers. :return: a new list containing element-wise multiplication of the input lists, or None if the lists have different lengths. # Your implementation here. ``` **Example:** ```python # Input list1 = [1, 2, 3] list2 = [4, 5, 6] # Function call result = elementwise_multiplication(list1, list2) # Expected Output [4, 10, 18] # Input list1 = [1, 2] list2 = [3, 4, 5] # Function call result = elementwise_multiplication(list1, list2) # Expected Output None # And it should print: \\"Lists are not of the same length\\" ``` Your task is to implement the function `elementwise_multiplication` to correctly compute the element-wise products of the input lists or handle the error case where the input lists are of different lengths.","solution":"def elementwise_multiplication(list1, list2): - Returns a list where each element is the product of the corresponding elements of the input lists. :param list1: first list of numbers. :param list2: second list of numbers. :return: a new list containing element-wise multiplication of the input lists, or None if the lists have different lengths. if len(list1) != len(list2): print(\\"Lists are not of the same length\\") return None return [a * b for a, b in zip(list1, list2)]"},{"question":"You are required to implement a function `find_longest_subarray_by_sum(arr: List[int], target_sum: int) -> Tuple[int, int]` that uses a sliding window approach to find the longest contiguous subarray within a given list of integers, `arr`, whose sum equals the specified `target_sum`. If there are multiple subarrays with the same length, return the one that appears first. If no such subarray exists, return `(-1, -1)`. The operations to implement include: 1. Identifying the starting and ending indices of the longest subarray whose sum matches `target_sum`. 2. Utilizing an efficient algorithm to manage the subarray sums and check against the target sum. 3. Ensuring the function handles edge cases, such as an empty array or no valid subarray found. # Input: - `arr`: A list of integers. - `target_sum`: An integer representing the target sum. # Output: - A tuple consisting of: - Starting index of the longest subarray. - Ending index of the longest subarray. # Example: ```python from typing import List, Tuple def find_longest_subarray_by_sum(arr: List[int], target_sum: int) -> Tuple[int, int]: # Function implementation here # Example usage: arr = [1, 2, 3, 7, 5] target_sum = 12 print(find_longest_subarray_by_sum(arr, target_sum)) # Output: (1, 3) because the subarray [2, 3, 7] has the longest length with sum equal to 12. ```","solution":"from typing import List, Tuple def find_longest_subarray_by_sum(arr: List[int], target_sum: int) -> Tuple[int, int]: start_index = 0 curr_sum = 0 max_length = 0 best_start = -1 best_end = -1 for end_index, value in enumerate(arr): curr_sum += value while curr_sum > target_sum and start_index <= end_index: curr_sum -= arr[start_index] start_index += 1 if curr_sum == target_sum: if end_index - start_index + 1 > max_length: max_length = end_index - start_index + 1 best_start = start_index best_end = end_index return (best_start, best_end) if best_start != -1 else (-1, -1)"},{"question":"Write a Python function named `invert_dict(input_dict: dict) -> dict` that inverts the keys and values of a dictionary. If the input dictionary contains duplicate values, combine the keys into a list. The function should ensure that no information is lost during the inversion process. 1. **Iterate over the dictionary**: - Traverse through each key-value pair in the input dictionary sequentially. 2. **Check for duplicates**: - Before assigning the value as a key in the new dictionary, check if the value already exists as a key. If it does, append the key to the list of keys associated with that value; otherwise, create a new key-value pair where the value from the original dictionary becomes the key and the key from the original dictionary becomes the value. 3. **Maintain original data types**: - Ensure that if a value in the original dictionary appears only once, it should not be placed inside a list in the inverted dictionary. Your task is to implement the function to transform the given dictionary as described. **Function Signature:** ```python def invert_dict(input_dict: dict) -> dict: ``` **Example:** ```python # Example usage of invert_dict function input_dict = {\'a\': 1, \'b\': 2, \'c\': 1} inverted = invert_dict(input_dict) print(inverted) # This should print {1: [\'a\', \'c\'], 2: \'b\'} ``` Ensure to properly document the function, explaining the input parameters and return values.","solution":"def invert_dict(input_dict: dict) -> dict: Inverts the keys and values of the input dictionary. If the input dictionary contains duplicate values, it combines the keys into a list. Parameters: input_dict (dict): The input dictionary to be inverted. Returns: dict: The inverted dictionary where keys are values of the input dictionary and values are keys of the input dictionary. If a value in the input dictionary appears more than once, keys are combined into a list. inverted_dict = {} for key, value in input_dict.items(): if value in inverted_dict: # If the value is already a key in the inverted dictionary, append the key to the list if isinstance(inverted_dict[value], list): inverted_dict[value].append(key) else: inverted_dict[value] = [inverted_dict[value], key] else: # If the value is not a key in the inverted dictionary, add it inverted_dict[value] = key return inverted_dict"},{"question":"Write a function named `find_missing_numbers()` that takes in a list of integers and returns a list of the missing numbers from the smallest integer in the list to the largest integer in the list. The returned list should be sorted in ascending order. To accomplish this task, you need to: 1. Determine the smallest and largest integers in the input list. 2. Identify which numbers between the smallest and largest integers are missing from the input list. 3. Return a list of these missing numbers in ascending order. Here is the function signature: ```python def find_missing_numbers(nums: list) -> list: ``` **Example:** ```python numbers = [1, 3, 5, 6, 8] missing_numbers = find_missing_numbers(numbers) print(missing_numbers) # Output: [2, 4, 7] ``` **Constraints:** - The input list should contain at least one integer. - The integers in the list are assumed to be unique. - The integers can be positive or negative, and they are not necessarily sorted. **Hints:** - You may find the `range()` function useful for generating a list of numbers between two endpoints. - Consider using list comprehensions to filter and collect missing numbers.","solution":"def find_missing_numbers(nums): Finds the missing numbers between the smallest and largest integers in the input list. Args: nums (list): List of integers Returns: list: Sorted list of missing numbers if not nums: return [] min_num = min(nums) max_num = max(nums) return [num for num in range(min_num, max_num + 1) if num not in nums]"},{"question":"In this task, you will implement a binary search algorithm to efficiently find elements within a sorted list. Your goal is to create a function named `binary_search_indices` that performs the following steps: 1. Receives a sorted list of integers `sorted_list` and an integer `target`. 2. Returns a tuple containing two indices: the index of the first occurrence and the index of the last occurrence of the target in the list. 3. If the target is not found in the list, return `(-1, -1)`. The function must be implemented using an iterative approach (i.e., avoid recursion). The function signature should be: ```python def binary_search_indices(sorted_list: List[int], target: int) -> Tuple[int, int]: ``` The parameters are: - `sorted_list`: A list of integers that is already sorted in non-decreasing order. - `target`: An integer that you are searching for within `sorted_list`. Example: ```python # Example 1 sorted_list = [1, 2, 2, 2, 3, 4, 5] target = 2 # Returns: (1, 3) # Example 2 sorted_list = [1, 3, 4, 5, 8, 12, 13] target = 7 # Returns: (-1, -1) ```","solution":"from typing import List, Tuple def binary_search_indices(sorted_list: List[int], target: int) -> Tuple[int, int]: def find_first_occurrence(): left, right = 0, len(sorted_list) - 1 first_occurrence = -1 while left <= right: mid = left + (right - left) // 2 if sorted_list[mid] == target: first_occurrence = mid right = mid - 1 # continue searching in the left half elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return first_occurrence def find_last_occurrence(): left, right = 0, len(sorted_list) - 1 last_occurrence = -1 while left <= right: mid = left + (right - left) // 2 if sorted_list[mid] == target: last_occurrence = mid left = mid + 1 # continue searching in the right half elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return last_occurrence first_occurrence = find_first_occurrence() if first_occurrence == -1: return (-1, -1) last_occurrence = find_last_occurrence() return (first_occurrence, last_occurrence)"},{"question":"You are asked to implement a class named `EventScheduler` that helps in scheduling and managing events. This class should allow scheduling events with specific start times, and it should notify when an event is due to start by invoking a provided callback function. # Requirements: 1. **Class Definition**: Define a class named `EventScheduler`. 2. **Method to Schedule an Event**: Implement a method named `schedule_event` within the `EventScheduler` class that takes three arguments: - `event_time` (a datetime object representing the time when the event is to start) - `event_name` (a string representing the name of the event) - `callback` (a function to be called when the event is due) 3. **Checking for Due Events**: Implement a method named `check_events` within the `EventScheduler` class that checks for any due events (i.e., events where the current time is greater than or equal to the scheduled start time) and invokes the corresponding callback functions before removing those events from the schedule. 4. **Durations between Check Intervals**: Use the `time` module to wait for one second between checks inside a loop. 5. **Handling Multiple Events**: The class must be able to handle multiple events scheduled at different times. # Example Usage ```python from datetime import datetime, timedelta import time # Define callback function def event_callback(event_name): print(f\\"Event \'{event_name}\' is starting!\\") # Create instance of EventScheduler scheduler = EventScheduler() # Schedule events scheduler.schedule_event(datetime.now() + timedelta(seconds=5), \'Event 1\', event_callback) scheduler.schedule_event(datetime.now() + timedelta(seconds=10), \'Event 2\', event_callback) # Start checking for due events (use a separate thread or non-blocking method in practice) scheduler.check_events() ``` **Implementation Details:** - Use the `datetime` module to handle time comparisons. - Store the scheduled events in a list or dictionary within the `EventScheduler` class. - Ensure `schedule_event` allows adding new events and `check_events` continuously monitors and triggers due events.","solution":"import time from datetime import datetime class EventScheduler: def __init__(self): self.events = [] def schedule_event(self, event_time, event_name, callback): Schedule a new event. :param event_time: A datetime object representing the time when the event is to start. :param event_name: A string representing the name of the event. :param callback: A function to be called when the event is due. self.events.append((event_time, event_name, callback)) def check_events(self): Checks for any due events and invokes the corresponding callback functions. while self.events: current_time = datetime.now() for event in list(self.events): # Create a copy of the list to modify it during iteration event_time, event_name, callback = event if current_time >= event_time: callback(event_name) self.events.remove(event) time.sleep(1) # Wait for one second before the next check"},{"question":"You have been tasked to implement a function that processes and analyzes a list of student grades. Your function will identify various statistics and trends in the data. Implement a function called `analyze_grades` that performs the following operations: 1. **Calculate the average grade** from the list of grades. 2. **Identify the highest and lowest grades** in the list. 3. **Determine the count of grades above a specified threshold**. 4. **Generate a sorted list of grades in ascending order**. 5. **Compute the grade distribution** in terms of A, B, C, D, and F, assuming the following ranges: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: below 60 The function should return a dictionary with the following keys and values: - `\'average\'`: the average grade. - `\'highest\'`: the highest grade. - `\'lowest\'`: the lowest grade. - `\'above_threshold_count\'`: the count of grades above the specified threshold. - `\'sorted_grades\'`: the list of grades sorted in ascending order. - `\'grade_distribution\'`: a dictionary with keys `\'A\'`, `\'B\'`, `\'C\'`, `\'D\'`, and `\'F\'` corresponding to the count of grades in each category. # Function Signature ```python def analyze_grades(grades: list, threshold: int) -> dict: pass ``` # Example ```python grades = [85, 92, 78, 65, 88, 55, 91, 73, 80, 60] result = analyze_grades(grades, 75) # Should return: # { # \'average\': 76.7, # \'highest\': 92, # \'lowest\': 55, # \'above_threshold_count\': 6, # \'sorted_grades\': [55, 60, 65, 73, 78, 80, 85, 88, 91, 92], # \'grade_distribution\': { # \'A\': 2, # \'B\': 3, # \'C\': 2, # \'D\': 2, # \'F\': 1 # } # } ``` # Requirements - Ensure your function handles edge cases like an empty list of grades. - You can assume that all grades are integers between 0 and 100.","solution":"def analyze_grades(grades: list, threshold: int) -> dict: if not grades: return { \'average\': None, \'highest\': None, \'lowest\': None, \'above_threshold_count\': 0, \'sorted_grades\': [], \'grade_distribution\': {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0, \'F\': 0} } # Calculate average grade average = sum(grades) / len(grades) # Identify highest and lowest grades highest = max(grades) lowest = min(grades) # Count grades above the specified threshold above_threshold_count = sum(grade > threshold for grade in grades) # Generate sorted list of grades sorted_grades = sorted(grades) # Compute grade distribution grade_distribution = {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0, \'F\': 0} for grade in grades: if 90 <= grade <= 100: grade_distribution[\'A\'] += 1 elif 80 <= grade <= 89: grade_distribution[\'B\'] += 1 elif 70 <= grade <= 79: grade_distribution[\'C\'] += 1 elif 60 <= grade <= 69: grade_distribution[\'D\'] += 1 else: grade_distribution[\'F\'] += 1 return { \'average\': round(average, 1), \'highest\': highest, \'lowest\': lowest, \'above_threshold_count\': above_threshold_count, \'sorted_grades\': sorted_grades, \'grade_distribution\': grade_distribution }"},{"question":"You are tasked with creating a function named `find_nearest_smaller_numbers()` that processes a list of integers and returns a list of the nearest smaller numbers for each element in the original list. The nearest smaller number is the closest preceding element that is smaller than the current element. If no such element exists, return `None` for that position. # Steps: 1. Iterate over the input list. 2. For each element, find the nearest smaller preceding element. 3. If found, append the smaller element to the result list, otherwise append `None`. Your solution should consider performance and aim to solve the problem efficiently. # Example: If the input list is `[4, 2, 5, 3, 1, 7]`, the function should return `[None, None, 2, 2, None, 1]`. # Input: - A single list of integers, e.g., `[4, 2, 5, 3, 1, 7]`. # Output: - A list of the nearest smaller numbers or `None` if there is no preceding smaller number for each element. # Function Signature: ```python def find_nearest_smaller_numbers(nums: list[int]) -> list[Optional[int]]: ``` # Example: ```python print(find_nearest_smaller_numbers([4, 2, 5, 3, 1, 7])) # Output: [None, None, 2, 2, None, 1] ``` # Constraints: - The input list should have at least one element and at most `10^5` elements. - The input list elements range from `-10^9` to `10^9`.","solution":"def find_nearest_smaller_numbers(nums): This function returns a list of the nearest smaller numbers for each element in the original list. If no such element exists, it returns None for that position. result = [] stack = [] # This stack will store pairs of (index, number) in decreasing order for index, num in enumerate(nums): # Pop elements from the stack that are not smaller than the current number while stack and stack[-1][1] >= num: stack.pop() # If the stack is empty, no smaller number exists if not stack: result.append(None) else: # The top of the stack is the nearest smaller number result.append(stack[-1][1]) # Push the current number and its index onto the stack stack.append((index, num)) return result"},{"question":"Write a function that takes a list of strings and returns a dictionary where the keys are the sorted versions of the strings and the values are lists of strings that are anagrams of each other. The function should handle strings with varying cases and preserve the original casing in the output lists. For example, [\\"bat\\", \\"Tab\\", \\"eat\\", \\"Tea\\", \\"tan\\", \\"Nat\\"] should result in `{\\"abt\\": [\\"bat\\", \\"Tab\\"], \\"aet\\": [\\"eat\\", \\"Tea\\"], \\"ant\\": [\\"tan\\", \\"Nat\\"]}`. The function should start with: ``` def group_anagrams(words): ```","solution":"def group_anagrams(words): Given a list of strings, return a dictionary where the keys are the sorted versions of the strings and the values are lists of strings that are anagrams of each other. The function should handle strings with varying cases and preserve the original casing in the output lists. from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \\"\\".join(sorted(word.lower())) anagrams[sorted_word].append(word) return dict(anagrams)"},{"question":"**Context:** You are working on developing a query function for a database that retrieves all records matching a given criterion. This is an essential operation for any database-driven application, and efficient data retrieval is crucial for overall performance. Your goal is to write a function that processes a list of records (represented as dictionaries) and extracts only those matching a specified key-value criterion. This function will simulate a basic query on a dataset. **Task:** Write a function named `query_records` that takes a list of records and a key-value criterion, then returns a list of records that match the specified criterion. Specifically, you need to: 1. Iterate through the list of records. 2. Check if each record contains the specified key and if the value matches the criterion. 3. Collect and return all matching records. **Function Signature:** ```python def query_records(records: list, key: str, value) -> list: ``` **Inputs:** - `records`: A list of dictionary objects where each dictionary represents a record. - `key`: A string representing the key to query against within each record. - `value`: The value to match against the specified key in the records. **Outputs:** - A list of dictionaries representing the records that match the specified criterion. **Example Usage:** ```python records = [ {\'id\': 1, \'name\': \'Alice\', \'age\': 30}, {\'id\': 2, \'name\': \'Bob\', \'age\': 25}, {\'id\': 3, \'name\': \'Charlie\', \'age\': 30} ] result = query_records(records, \'age\', 30) # Should return: [{\'id\': 1, \'name\': \'Alice\', \'age\': 30}, {\'id\': 3, \'name\': \'Charlie\', \'age\': 30}] ``` **Note:** - Assume the provided list of records is well-formed, with each dictionary containing consistent key types. - Consider edge cases such as no records matching the criterion or an empty list of records.","solution":"def query_records(records: list, key: str, value) -> list: Returns a list of records where the key matches the specified value. :param records: List of dictionary objects representing the records. :param key: The key to query against within each record. :param value: The value to match against the specified key. :return: List of dictionaries representing the matching records. matching_records = [record for record in records if key in record and record[key] == value] return matching_records"},{"question":"You are required to implement a function that rotates a given matrix by 90 degrees in the clockwise direction. The function should be named `rotate_matrix`, and it must use the NumPy library to achieve this. The function will involve transposing the matrix and then reversing the order of columns. Function Signature: ```python def rotate_matrix(matrix: np.ndarray) -> np.ndarray: Rotates the given matrix by 90 degrees clockwise. Args: matrix (np.ndarray): The input 2D numpy array representing the matrix. Returns: np.ndarray: A new numpy array rotated by 90 degrees clockwise. ``` Input: - `matrix` (np.ndarray): A 2D numpy array representing the matrix. Output: - Returns a new numpy array that is the input matrix rotated by 90 degrees clockwise. Requirements: 1. Use `numpy.transpose` to transpose the input matrix. 2. Use array slicing to reverse the order of columns after transposing. Example: ```python import numpy as np matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) rotated_matrix = rotate_matrix(matrix) print(rotated_matrix) ``` Expected Output: ``` [[7 4 1] [8 5 2] [9 6 3]] ```","solution":"import numpy as np def rotate_matrix(matrix: np.ndarray) -> np.ndarray: Rotates the given matrix by 90 degrees clockwise. Args: matrix (np.ndarray): The input 2D numpy array representing the matrix. Returns: np.ndarray: A new numpy array rotated by 90 degrees clockwise. transposed_matrix = np.transpose(matrix) rotated_matrix = np.flip(transposed_matrix, axis=1) return rotated_matrix"},{"question":"You are required to write a Python function named `mergeAndSortLists` that takes two lists of integers, merges them into a single list, and returns the merged list sorted in descending order without using any built-in sorting functions. Here\'s what your function should do: 1. Accept two lists of integers as parameters. 2. Merge the two lists into a single list. 3. Sort the merged list in descending order using an appropriate sorting algorithm (such as bubble sort, insertion sort, or any other sorting algorithm). 4. Return the sorted list. For example, given the lists `[3, 1, 4]` and `[6, 5, 2]`, your function should return `[6, 5, 4, 3, 2, 1]`. **Function Signature:** ```python def mergeAndSortLists(list1: list, list2: list) -> list: pass ```","solution":"def mergeAndSortLists(list1: list, list2: list) -> list: Merges two lists and sorts the merged list in descending order using bubble sort. merged_list = list1 + list2 # Merge the two lists # Bubble sort the merged list in descending order n = len(merged_list) for i in range(n): for j in range(0, n - i - 1): if merged_list[j] < merged_list[j + 1]: merged_list[j], merged_list[j + 1] = merged_list[j + 1], merged_list[j] return merged_list"},{"question":"In this problem, you are asked to implement a function that uses the Quicksort algorithm to sort a given list of integers. Quicksort is a divide-and-conquer algorithm that works by selecting a \'pivot\' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. Write a function: ```python def quicksort(arr): Sorts an array of integers using the Quicksort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. ``` The function should: 1. Define the base case for the recursion: an empty array or an array with a single element is already sorted and should be returned as-is. 2. Select a pivot element from the array. You can choose the pivot randomly, as the first element, the last element, or the median - any consistent strategy is acceptable. 3. Partition the array into two sub-arrays: one with elements less than the pivot and one with elements greater than the pivot. 4. Recursively apply the Quicksort algorithm to both sub-arrays. 5. Combine the results from the two sorted sub-arrays along with the pivot to form the final sorted array. 6. Return the sorted array. Example Call: ```python sorted_array = quicksort([3, 6, 8, 10, 1, 2, 1]) # Output should be: [1, 1, 2, 3, 6, 8, 10] ``` Note: To ensure the quicksort function is efficient, proper selection of the pivot and partitioning strategy is crucial. You can utilize Python\'s built-in random module to select a random pivot if needed. Additionally, handling duplicates appropriately will maintain the stability of the sorting algorithm.","solution":"def quicksort(arr): Sorts an array of integers using the Quicksort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] # Choosing the middle element as the pivot less = [x for x in arr if x < pivot] equal = [x for x in arr if x == pivot] greater = [x for x in arr if x > pivot] return quicksort(less) + equal + quicksort(greater)"},{"question":"You are tasked with writing a function `find_duplicate_emails(file_path: str) -> List[str]` that reads a text file containing a list of email addresses, identifies all duplicate emails, and returns them as a list of strings. Each email address in the file is on a separate line. Here are the steps your function should follow: 1. Open and read the text file specified by `file_path`. 2. Use a data structure to store and count the occurrences of each email address. 3. Identify and collect email addresses that appear more than once. 4. Return a list of duplicate email addresses sorted in the order in which they first appeared in the file. Your function should look like this: ```python def find_duplicate_emails(file_path: str) -> List[str]: pass ```","solution":"from typing import List def find_duplicate_emails(file_path: str) -> List[str]: email_count = {} duplicate_emails = [] with open(file_path, \'r\') as file: for line in file: email = line.strip() if email in email_count: email_count[email] += 1 else: email_count[email] = 1 for email, count in email_count.items(): if count > 1: duplicate_emails.append(email) return duplicate_emails"},{"question":"You have been asked to create a function `stock_summary` that simulates the processing of stock price data. Your task is to generate a report summarizing the prices of a given stock over a specified period. The function should calculate the highest, lowest, average, and median prices from the provided data. Here’s what your function needs to do: 1. **Function Signature**: ```python def stock_summary(prices: list[float]) -> dict: ``` 2. **Parameters**: - `prices`: A list of float numbers representing the stock prices over a certain period. 3. **Behavior**: - Calculate the highest price in the list. - Calculate the lowest price in the list. - Calculate the average price of all the prices in the list. - Calculate the median price of the prices. (Assume the list is always non-empty) 4. **Return**: - The function will return a dictionary with the keys `\'highest\'`, `\'lowest\'`, `\'average\'`, and `\'median\'`, corresponding to the highest price, lowest price, average price, and median price, respectively. # Example ```python # Example stock prices prices = [100.5, 200.5, 150.0, 120.0, 180.0] # Generate the stock summary summary = stock_summary(prices) print(summary) # Output will be similar to: # { # \'highest\': 200.5, # \'lowest\': 100.5, # \'average\': 150.2, # \'median\': 150.0 # } ``` Write the function `stock_summary` according to the described specifications and return the summarized report as a dictionary.","solution":"def stock_summary(prices: list[float]) -> dict: Generate a summary report of stock prices. Parameters: prices (list of float): List of stock prices. Returns: dict: A dictionary with keys \'highest\', \'lowest\', \'average\', and \'median\'. import statistics highest = max(prices) lowest = min(prices) average = sum(prices) / len(prices) median = statistics.median(prices) return { \'highest\': highest, \'lowest\': lowest, \'average\': average, \'median\': median }"},{"question":"You are tasked with creating a function that takes a string as input and returns a dictionary where the keys are the words from the string and the values are the number of times each word appears in the string. The function should ignore punctuation and should not be case sensitive. Here is the required function signature: ```python def word_count(s): \'\'\' Takes a string `s` as input and returns a dictionary with word frequencies. Parameters: s (str): The input string. Returns: dict: A dictionary where the keys are words and the values are the counts of each word. \'\'\' ``` **Requirements:** 1. **String Manipulation**: You will need to split the string into words and remove any punctuation. 2. **Dictionary**: The output must be a dictionary containing words as keys and their respective counts as values. 3. **Case Insensitivity**: The function should be case insensitive, i.e., \'Word\' and \'word\' should be counted as the same word. **Example Usage:** ```python # Example Input input_string = \\"Hello, world! Hello again. World, hello.\\" # Generate word counts result = word_count(input_string) print(result) # Output should be: {\'hello\': 3, \'world\': 2, \'again\': 1} ``` #","solution":"import re from collections import defaultdict def word_count(s): \'\'\' Takes a string `s` as input and returns a dictionary with word frequencies. Parameters: s (str): The input string. Returns: dict: A dictionary where the keys are words and the values are the counts of each word. \'\'\' # Normalize the case and remove punctuation using regex s = re.sub(r\'[^ws]\', \'\', s).lower() words = s.split() # Use defaultdict to handle word counting word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"You need to implement a function called `longest_common_subsequence` to determine the length of the longest common subsequence between two strings. A subsequence is a sequence that appears in the same relative order but not necessarily consecutively. Specifically, the function will be provided with two strings `text1` and `text2`. Your task is to find the length of the longest common subsequence between the two given strings. Here are the details: 1. `text1`: A string with a maximum length of 1000. 2. `text2`: A string with a maximum length of 1000. Your function should return an integer representing the length of the longest common subsequence. To achieve this, you can use a dynamic programming approach, where you will: 1. Create a 2D table `dp` where `dp[i][j]` represents the length of the longest common subsequence of `text1[:i]` and `text2[:j]`. 2. Iterate over the strings and fill the table based on whether characters match or not. 3. The final value `dp[len(text1)][len(text2)]` will contain the length of the longest common subsequence. Please use the `numpy` library to initialize and manipulate the 2D table. Here is the function signature to use: ```python import numpy as np def longest_common_subsequence(text1, text2): Return the length of the longest common subsequence between two strings. Parameters ---------- text1 : str The first string with a maximum length of 1000. text2 : str The second string with a maximum length of 1000. Returns ------- int The length of the longest common subsequence. pass ```","solution":"import numpy as np def longest_common_subsequence(text1, text2): Return the length of the longest common subsequence between two strings. Parameters ---------- text1 : str The first string with a maximum length of 1000. text2 : str The second string with a maximum length of 1000. Returns ------- int The length of the longest common subsequence. m, n = len(text1), len(text2) dp = np.zeros((m + 1, n + 1), dtype=int) for i in range(1, m + 1): for j in range(1, n + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a Python function named `findBridgeWords` that takes two parameters: `sentence`, a string representing a sentence of words separated by spaces, and `separator`, a string representing a separator inserted between words to identify bridge words. Bridge words are words in the sentence that are connected by the given separator. The function should return a list of bridge words found in the sentence. Note that the order of bridge words should match the order of their appearance in the sentence, and each bridge word should include the separator. # Input: - `sentence`: a string of words separated by spaces. - `separator`: a string representing the separator. # Output: - A list of strings representing the bridge words in the sentence. # Constraints: - The input `sentence` will only contain lowercase alphabetic characters and spaces. - The `separator` will only contain lowercase alphabetic characters. - The separator will not be found at the beginning or end of any word in the sentence. # Example: ```python # Example Input sentence = \\"alpha bravo-chart delta-echo-foxtrot golf\\" separator = \\"-\\" # Expected Output [ \\"bravo-chart\\", \\"delta-echo\\", \\"echo-foxtrot\\" ] ```","solution":"def findBridgeWords(sentence, separator): Finds bridge words in a sentence where words are connected by a given separator. Args: sentence (str): A string of words separated by spaces. separator (str): A string representing the separator. Returns: List[str]: A list of bridge words found in the sentence. words = sentence.split() bridge_words = [] for word in words: if separator in word: bridge_words.append(word) return bridge_words"},{"question":"The function reads a JSON file containing a dictionary representing a collection of books. Each book is a dictionary with \'title\', \'author\', \'publication_year\', and \'pages\'. The function computes an additional key \'age\' for each book which is the difference between the current year and the \'publication_year\'. If the \'publication_year\' is greater than the current year, the function should raise a ValueError. The function should return the updated collection of books and a DataFrame containing the book details including the new \'age\' key. You should write self-contained code starting with: ``` import json import pandas as pd import datetime def process_books(json_file_path): ```","solution":"import json import pandas as pd import datetime def process_books(json_file_path): Reads a JSON file containing a dictionary of books, computes the \'age\' key for each book, and returns the updated collection of books and a DataFrame. Args: json_file_path (str): The path to the JSON file. Returns: tuple: A tuple containing the updated collection of books and a DataFrame. current_year = datetime.datetime.now().year # Read the JSON file with open(json_file_path, \'r\') as file: books_dict = json.load(file) # Process each book for book in books_dict: publication_year = book.get(\'publication_year\') if publication_year > current_year: raise ValueError(f\\"Publication year {publication_year} can\'t be in the future.\\") # Calculate the age of the book book[\'age\'] = current_year - publication_year # Create DataFrame from books dictionary books_df = pd.DataFrame(books_dict) return books_dict, books_df"},{"question":"In this problem, you are required to write a function, `analyze_word_frequencies(file_path, stop_words)`, which reads a text file and calculates word frequencies, ignoring specified stop words. The function should utilize the `collections.Counter` class to manage word counts and regular expressions to manage text cleanup. The function should: 1. Read the text file from the given `file_path`. 2. Convert the text to lowercase and remove punctuation. 3. Split the text into words and filter out any words found in the provided `stop_words` list. 4. Calculate the frequency of each remaining word. **Function Signature:** ```python def analyze_word_frequencies(file_path, stop_words): # Your code here ``` **Parameters:** - `file_path` (str): Path to the text file to be analyzed. - `stop_words` (set of str): A set of words to be ignored in the frequency analysis. **Returns:** - `word_frequencies` (collections.Counter): A Counter object containing word frequencies of the cleaned and filtered text. **Requirements:** - Use `open` to read the text file. - Use `collections.Counter` to count word frequencies. - Use `re.sub` to remove punctuation from the text. For example, given a text file at \'example.txt\' with the content: ``` Hello world! Hello everyone. This is a test text file. ``` and a stop words set: ```python stop_words = {\'is\', \'a\', \'this\'} ``` The function call: ```python analyze_word_frequencies(\'example.txt\', stop_words) ``` should return a Counter object: ```python Counter({\'hello\': 2, \'world\': 1, \'everyone\': 1, \'test\': 1, \'text\': 1, \'file\': 1}) ```","solution":"import re from collections import Counter def analyze_word_frequencies(file_path, stop_words): Reads a text file, processes the text to remove punctuation and stop words, and calculates word frequencies. :param file_path: Path to the text file to be analyzed. :param stop_words: A set of words to be ignored in the frequency analysis. :return: A Counter object containing word frequencies of the cleaned and filtered text. with open(file_path, \'r\') as file: text = file.read().lower() # Remove punctuation using regex text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Filter out stop words filtered_words = [word for word in words if word not in stop_words] # Calculate word frequencies word_frequencies = Counter(filtered_words) return word_frequencies"},{"question":"--- **Title**: Airline Flight Delay Data Analysis using Pandas and Requests **Objective**: Develop a function `analyze_flight_delays(year: int, feature: str) -> pd.DataFrame` that retrieves flight delay data for a specific year, processes it, and returns a Pandas DataFrame sorted by a specified feature. Use the `requests` library to fetch data from the open flight data API and the `pandas` library for data manipulation. **Details**: 1. **Inputs**: - `year` (`int`): The year for which flight delay data is to be retrieved (e.g., 2020). - `feature` (`str`): The feature by which to sort the DataFrame (e.g., \\"DepartureDelay\\"). 2. **Output**: - A Pandas DataFrame sorted based on the provided feature. **Steps**: 1. Use the provided `url` format to retrieve data for the given `year`. 2. Fetch and parse the JSON response using the `requests` library. 3. Convert the parsed JSON data into a Pandas DataFrame. 4. Sort the DataFrame by the specified feature (`feature`). 5. Return the sorted DataFrame. **Constraints**: - Ensure that the input `year` is an integer and `feature` is a string. - Handle cases where the specified feature might not be present in the data. ```python def analyze_flight_delays(year: int, feature: str) -> pd.DataFrame: Retrieve flight delay data for a specific year and sort the data by a given feature. Parameters: year (int): The year to retrieve flight delay data for. feature (str): The feature to order the DataFrame by. Returns: pd.DataFrame: A DataFrame of sorted flight delay data according to the given criteria. # Your code goes here ```","solution":"import requests import pandas as pd def analyze_flight_delays(year: int, feature: str) -> pd.DataFrame: Retrieve flight delay data for a specific year and sort the data by a given feature. Parameters: year (int): The year to retrieve flight delay data for. feature (str): The feature to order the DataFrame by. Returns: pd.DataFrame: A DataFrame of sorted flight delay data according to the given criteria. # Define the URL format to fetch data url = f\\"https://api.openflights.org/delay_data/{year}.json\\" # Fetch data from the API response = requests.get(url) # Raise an exception if the request failed response.raise_for_status() # Parse the JSON response into a dictionary data = response.json() # Convert the dictionary to a DataFrame df = pd.DataFrame(data) # Ensure the feature exists in the DataFrame if feature not in df.columns: raise ValueError(f\\"The feature \'{feature}\' is not present in the data.\\") # Sort the DataFrame by the specified feature df_sorted = df.sort_values(by=feature) return df_sorted"},{"question":"You are tasked with implementing a function `rle_encode(input_file: str, output_file: str) -> None` that performs Run-Length Encoding (RLE) on a given text file. - The function shall read the text from a file (input_file). - It should write the encoded text to another file (output_file). - Only alphabetic characters should be encoded; spaces, punctuation, and other characters should be written to the output file without modification. - Ensure that the encoded file maintains the case of the letters. Input: 1. `input_file`: A string representing the name of the file containing the text to be encoded (without the `.txt` extension). This file will be read but not altered during the process. 2. `output_file`: A string representing the name of the file where the encoded text will be written (without the `.txt` extension). Output: - None (The function writes to a file and returns nothing) Example: Consider the following example where we call: ```python rle_encode(\\"input\\", \\"output\\") ``` **input.txt** ``` AAAABBBCCDAA ``` **output.txt** ``` 4A3B2C1D2A ``` Your task is to correctly encode the contents of `input.txt` using the Run-Length Encoding method and write the encoded message to `output.txt`.","solution":"def rle_encode(input_file: str, output_file: str) -> None: with open(f\\"{input_file}.txt\\", \\"r\\") as infile: text = infile.read() encoded_text = [] i = 0 while i < len(text): count = 1 while i + 1 < len(text) and text[i] == text[i + 1] and text[i].isalpha(): count += 1 i += 1 if text[i].isalpha(): encoded_text.append(f\\"{str(count)}{text[i]}\\") else: encoded_text.append(text[i] * 1) i += 1 with open(f\\"{output_file}.txt\\", \\"w\\") as outfile: outfile.write(\\"\\".join(encoded_text))"},{"question":"In this problem, you will implement a function to traverse a binary tree using the Depth-First Search (DFS) algorithm. Specifically, you are tasked to write a function `dfs_traversal` that returns a list of nodes in the order they are visited. A binary tree node is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` You need to implement the function `dfs_traversal` which accepts the `root` of the binary tree and returns a list of integers representing the values of nodes visited using DFS (in pre-order). Function Signature: ```python def dfs_traversal(root): ... ``` **Requirements:** - Use an iterative approach with the help of a stack to traverse the tree. - Start from the root node and visit nodes in pre-order (root, left, right). Return the list of node values in the order they were visited. Example: ```python # Given Binary Tree: # 1 # / # 2 3 # / # 4 5 root = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3)) print(dfs_traversal(root)) # Output: [1, 2, 4, 5, 3] ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def dfs_traversal(root): Performs an iterative depth-first search (DFS) traversal of the binary tree starting from the root node in a pre-order manner (root, left, right). Args: root (TreeNode): The root node of the binary tree. Returns: List[int]: A list of node values in the order they were visited. if not root: return [] stack = [root] result = [] while stack: node = stack.pop() result.append(node.val) # Push right child first so that left child is processed first if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"You are developing a utility for managing employee records in a company. The objective is to implement a system that can store and retrieve employee information using Python\'s `csv` library. The system will handle the following tasks: 1. **Write a function called** `add_employee_to_csv` **that takes the following arguments:** - `employee` (a dictionary containing the employee\'s information) - `file_path` (a string specifying the path to the CSV file) Ensure the function appends the employee\'s information to the CSV file. Each employee dictionary will contain the following keys: \'name\', \'age\', \'department\', and \'salary\'. Use the `csv.DictWriter` method for writing to the CSV file. 2. **Write a function called** `get_employees_from_csv` **that takes a `file_path` as input and returns a list of dictionaries, where each dictionary represents an employee\'s information.** Use the `csv.DictReader` method for reading the CSV file. The CSV file should have the following headers: \'name\', \'age\', \'department\', and \'salary\'. Ensure your implementation handles the following error scenarios: - If the file cannot be opened or written to. - If the file cannot be found during read operations. Here is a sample employee dictionary you will work with: ```python employee = { \'name\': \'John Doe\', \'age\': 30, \'department\': \'Software Engineering\', \'salary\': 80000 } ``` Your task is to implement both functions such that: 1. `add_employee_to_csv(employee, file_path)` appends the employee information to the given CSV file. 2. `get_employees_from_csv(file_path)` reads the CSV content from the file and returns a list of dictionaries, each representing an employee. **Note**: Assume that the `file_path` is a valid path for writing and reading files.","solution":"import csv def add_employee_to_csv(employee, file_path): Appends a single employee\'s information to a CSV file. Args: employee (dict): A dictionary representing employee information. file_path (str): The file path to the CSV file. try: with open(file_path, mode=\'a\', newline=\'\') as file: writer = csv.DictWriter(file, fieldnames=[\'name\', \'age\', \'department\', \'salary\']) writer.writerow(employee) except IOError as e: print(f\\"Error writing to file {file_path}: {e}\\") def get_employees_from_csv(file_path): Reads employee information from a CSV file and returns a list of dictionaries. Args: file_path (str): The file path to the CSV file. Returns: list of dict: A list of dictionaries, each representing an employee. employees = [] try: with open(file_path, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: employees.append(row) except FileNotFoundError: print(f\\"File {file_path} not found.\\") except IOError as e: print(f\\"Error reading file {file_path}: {e}\\") return employees"},{"question":"In this problem, you need to create a function named `applyDiscount` that calculates the price of an item after applying a given discount rate. The discount rate is provided as a percentage. Ensure that the final price is rounded to two decimal places. Function Signature ```python def applyDiscount(price: float, discount: float) -> float: ``` Parameters: - `price` (float): The original price of the item. - `discount` (float): The discount rate in percentage to be applied. Returns: - `float`: The price of the item after applying the discount, rounded to two decimal places. # Requirements: 1. Calculate the amount of the discount. 2. Subtract the discount amount from the original price to find the discounted price. 3. Round the resulting price to two decimal places. 4. Return the final price. Example: ```python applyDiscount(100.00, 15.0) ``` Output: ```python 85.00 ``` # Constraints: - The input price and discount will always be non-negative values. - The discount rate will not exceed 100%. Use this problem to practice your understanding of basic arithmetic operations and rounding methods in Python.","solution":"def applyDiscount(price: float, discount: float) -> float: Calculate the price of an item after applying a given discount rate. :param price: The original price of the item. :param discount: The discount rate in percentage to be applied. :return: The price of the item after applying the discount, rounded to two decimal places. discount_amount = (price * discount) / 100 discounted_price = price - discount_amount return round(discounted_price, 2)"},{"question":"You are tasked with implementing a function `transpose_dict` in Python that transposes the structure of a given dictionary of lists. The transposition of a dictionary means converting its keys into indices and its values (lists) into values of new keys. The function will take a single argument: 1. `input_dict` (dict): A dictionary where each key maps to a list of values. Your task is to transpose this dictionary such that each value in the original lists becomes a key in the new dictionary, and the corresponding keys are the indices of these values in the lists. Here is a template for the `transpose_dict` function: ```python def transpose_dict(input_dict): Transposes the input dictionary of lists # Your code goes here ``` # Example ```python input_dict = { \'A\': [1, 2, 3], \'B\': [4, 5, 6], \'C\': [7, 8, 9] } result = transpose_dict(input_dict) print(result) ``` Upon execution, this should print: ```python { 0: {\'A\': 1, \'B\': 4, \'C\': 7}, 1: {\'A\': 2, \'B\': 5, \'C\': 8}, 2: {\'A\': 3, \'B\': 6, \'C\': 9} } ``` # Requirements - The function should handle cases where the lists associated with different keys are of unequal length by raising a `ValueError`. - The function should return a new dictionary representing the transposed structure. - The input dictionary should remain unchanged.","solution":"def transpose_dict(input_dict): Transposes the input dictionary of lists. Args: input_dict (dict): A dictionary where each key maps to a list of values. Returns: dict: A dictionary where each key is an index and each value is a dictionary with the corresponding values from the original dictionary. Raises: ValueError: If the lists associated with different keys are of unequal length. # Check if all lists are of the same length list_lengths = [len(lst) for lst in input_dict.values()] if len(set(list_lengths)) > 1: raise ValueError(\\"All lists must be of the same length.\\") # Number of lists and their length num_keys = len(input_dict) list_length = list_lengths[0] # Initialize the transposed dictionary transposed = {i: {} for i in range(list_length)} for key, values in input_dict.items(): for i, value in enumerate(values): transposed[i][key] = value return transposed"},{"question":"You are required to create a function that determines whether a given string representing a mathematical expression is valid. The expression will only contain digits, operators (`+`, `-`, `*`, `/`), and parentheses. The function should check for both syntactical and logical correctness, including balanced parentheses and valid operator placements. Function Specification - **Function Name**: `is_valid_expression` - **Parameters**: - `expression` (str): The input string representing the mathematical expression. - **Returns**: A boolean value indicating whether the expression is valid (`True`) or not (`False`). # Valid Input To consider the expression valid, ensure the following: 1. The parentheses are correctly balanced. 2. Operators are placed correctly with respect to the operands and parentheses. 3. The expression does not start or end with an operator. 4. There are no consecutive operators. 5. The expression does not contain any invalid characters. # Example Here is how your function should behave: ```python print(is_valid_expression(\\"3 + (2 * 4) - 5 / (7 + 1)\\")) # Output: True print(is_valid_expression(\\"3 + (2 * 4 - 5 / )7 + 1)\\")) # Output: False print(is_valid_expression(\\"3 * / 4\\")) # Output: False ``` # Hints 1. Use a stack to help with checking balanced parentheses. 2. Carefully analyze the positioning of operators to ensure validity.","solution":"def is_valid_expression(expression): Determines whether a given string representing a mathematical expression is valid. Args: expression (str): The input string representing the mathematical expression. Returns: bool: A boolean value indicating whether the expression is valid (True) or not (False). # Check if the parentheses are balanced using a stack stack = [] valid_characters = set(\\"0123456789+-*/() \\") operators = set(\\"+-*/\\") # Early exit if expression is empty if len(expression) == 0: return False last_char = \\"\\" # To store the last processed character for char in expression: if char not in valid_characters: return False if char == \\"(\\": stack.append(char) elif char == \\")\\": if not stack: return False stack.pop() elif char in operators: if last_char == \\"\\" or last_char in operators or last_char == \\"(\\": return False # Update last_char, ignoring white spaces if char != \\" \\": last_char = char if stack: return False if last_char in operators or last_char == \\"(\\": return False return True # Example usage print(is_valid_expression(\\"3 + (2 * 4) - 5 / (7 + 1)\\")) # True print(is_valid_expression(\\"3 + (2 * 4 - 5 / )7 + 1)\\")) # False print(is_valid_expression(\\"3 * / 4\\")) # False"},{"question":"Write a Python function `calculate_confusion_matrix` that computes the confusion matrix for a set of predictions made by a binary classifier. The function should take in two parameters: - `y_true`: A list or 1-dimensional NumPy array of shape (m, ) containing the ground truth binary labels (0 or 1). - `y_pred`: A list or 1-dimensional NumPy array of shape (m, ) containing the predicted binary labels (0 or 1). The function should return a 2x2 NumPy array `confusion_matrix` where: - The element at position [0, 0] represents the number of true negatives (TN). - The element at position [0, 1] represents the number of false positives (FP). - The element at position [1, 0] represents the number of false negatives (FN). - The element at position [1, 1] represents the number of true positives (TP). Make use of NumPy operations to optimize the calculations. # Example Usage ```python import numpy as np def calculate_confusion_matrix(y_true, y_pred): y_true = np.array(y_true) y_pred = np.array(y_pred) TP = np.sum((y_true == 1) & (y_pred == 1)) TN = np.sum((y_true == 0) & (y_pred == 0)) FP = np.sum((y_true == 0) & (y_pred == 1)) FN = np.sum((y_true == 1) & (y_pred == 0)) return np.array([[TN, FP], [FN, TP]]) y_true = [0, 1, 0, 1, 0, 1, 0, 1] y_pred = [0, 0, 0, 1, 0, 1, 1, 1] confusion_matrix = calculate_confusion_matrix(y_true, y_pred) print(confusion_matrix) ``` # Output Example ``` [[3 1] [1 3]] ```","solution":"import numpy as np def calculate_confusion_matrix(y_true, y_pred): Computes confusion matrix for binary classification. Args: y_true: A list or 1D numpy array of true binary labels (0 or 1). y_pred: A list or 1D numpy array of predicted binary labels (0 or 1). Returns: confusion_matrix: A 2x2 numpy array [[TN, FP], [FN, TP]]. y_true = np.array(y_true) y_pred = np.array(y_pred) TP = np.sum((y_true == 1) & (y_pred == 1)) TN = np.sum((y_true == 0) & (y_pred == 0)) FP = np.sum((y_true == 0) & (y_pred == 1)) FN = np.sum((y_true == 1) & (y_pred == 0)) return np.array([[TN, FP], [FN, TP]])"},{"question":"You are required to write a function that filters a list of dictionaries based on a specific condition involving the dictionary values. The function should be named `filter_dict_list`, accepting three arguments: the list of dictionaries, the key to filter by, and a threshold value. The function should return a new list of dictionaries that contain only those dictionaries where the value corresponding to the given key exceeds the threshold. **Function Signature:** ```python def filter_dict_list(dict_list, key, threshold): pass ``` **Parameters:** - `dict_list` (list of dict): The list of dictionaries to filter. - `key` (str): The key in the dictionaries to filter by. - `threshold` (int or float): The threshold value to filter the dictionaries. **Requirements:** 1. Filter the dictionaries based on whether the value corresponding to the specified key is greater than the given threshold. 2. If a dictionary does not contain the specified key, it should be excluded from the resulting list. 3. Return the new list of filtered dictionaries. **Example:** Given the following list of dictionaries: ```python data = [ {\\"name\\": \\"Alice\\", \\"age\\": 28, \\"score\\": 85}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"score\\": 92}, {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"score\\": 78}, {\\"name\\": \\"David\\", \\"age\\": 30, \\"score\\": 88}, {\\"name\\": \\"Eve\\", \\"age\\": 20} ] ``` Calling the function: ```python result = filter_dict_list(data, \'score\', 80) ``` Would return: ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 28, \\"score\\": 85}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"score\\": 92}, {\\"name\\": \\"David\\", \\"age\\": 30, \\"score\\": 88} ] ``` Write the `filter_dict_list` function to satisfy the above requirements.","solution":"def filter_dict_list(dict_list, key, threshold): Filters a list of dictionaries based on whether the value corresponding to the specified key is greater than the given threshold. Arguments: dict_list (list of dict): The list of dictionaries to filter. key (str): The key in the dictionaries to filter by. threshold (int or float): The threshold value to filter the dictionaries. Returns: list of dict: A new list of dictionaries that contain only those dictionaries where the value corresponding to the given key exceeds the threshold. return [d for d in dict_list if key in d and d[key] > threshold] # Example usage data = [ {\\"name\\": \\"Alice\\", \\"age\\": 28, \\"score\\": 85}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"score\\": 92}, {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"score\\": 78}, {\\"name\\": \\"David\\", \\"age\\": 30, \\"score\\": 88}, {\\"name\\": \\"Eve\\", \\"age\\": 20} ] result = filter_dict_list(data, \'score\', 80) print(result)"},{"question":"You are tasked with implementing a function `compare_lists` that compares two lists of integers and returns the elements that are in the first list but not in the second. The result should be sorted in ascending order, without duplicates. Function Signature: ```python def compare_lists(list1: list, list2: list) -> list: ... ``` Input: - `list1` (list): The first list of integers. - `list2` (list): The second list of integers. Output: - Returns a sorted list containing the elements that are in `list1` but not in `list2`. Constraints: 1. The length of both lists is between 1 and 1000. 2. All elements in the lists are integers between -10^6 and 10^6. 3. The returned list should not contain any duplicate elements. Examples: ```python list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] print(compare_lists(list1, list2)) # Output: [1, 2, 3] list1 = [10, 20, 20, 30] list2 = [5, 15, 10, 25] print(compare_lists(list1, list2)) # Output: [20, 30] ```","solution":"def compare_lists(list1: list, list2: list) -> list: Compares two lists and returns the elements that are in the first list but not in the second. The result is sorted in ascending order and without duplicates. set1 = set(list1) set2 = set(list2) result = set1 - set2 return sorted(result)"},{"question":"You are given the following code snippet that defines a function to compute the Euclidean distance between two points in a 2D space: ```python def euclidean_distance(point1, point2): return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5 ``` Your task is to implement a class named `Point` that represents a point in a 2-dimensional space and provides a method to calculate the Euclidean distance to another point. The class should include the following functionality: 1. Initialize the `Point` object with the given `x` and `y` coordinates. 2. Implement a method named `distance_to` that computes the Euclidean distance between the current point and another point provided as an argument. # Requirements: - The class should be named `Point`. - The class should initialize with `x` and `y` coordinates. - The `distance_to` method should take another `Point` object as an argument and return the Euclidean distance between the two points. ```python class Point: def __init__(self, x, y): Initialize a Point instance. Parameters: x (float): The x-coordinate of the point. y (float): The y-coordinate of the point. # Your implementation here def distance_to(self, other_point): Calculate the Euclidean distance to another point. Parameters: other_point (Point): Another point to which the distance is calculated. Returns: float: The Euclidean distance to the other point. # Your implementation here ``` # Examples: ```python point1 = Point(1, 2) point2 = Point(4, 6) distance = point1.distance_to(point2) print(distance) # Expected output: # 5.0 ```","solution":"class Point: def __init__(self, x, y): Initialize a Point instance. Parameters: x (float): The x-coordinate of the point. y (float): The y-coordinate of the point. self.x = x self.y = y def distance_to(self, other_point): Calculate the Euclidean distance to another point. Parameters: other_point (Point): Another point to which the distance is calculated. Returns: float: The Euclidean distance to the other point. return ((self.x - other_point.x) ** 2 + (self.y - other_point.y) ** 2) ** 0.5"},{"question":"You are tasked with simulating a delivery drone making deliveries in a city grid. Each second, the program will update and display the current status of the delivery, such as the drone\'s position, remaining battery, number of deliveries made, and distance traveled. The simulation should stop when all deliveries are made or the drone runs out of battery. The status updates need to be displayed every second using the following conditions: - **Drone\'s position (x, y)** is updated based on the velocity. - **Distance traveled (distance_traveled)** is the sum of all distances traveled in each second. - **Battery level (battery_level)** decreases by the power consumption rate per kilometer traveled. - **Deliveries made (deliveries)** increases by 1 when a delivery point is reached. You need to use the `time.ctime` and `time.sleep` functions from Python\'s `time` module to print the local time and to pause the loop for one second respectively. Create a function called **`simulate_drone_delivery`** which accepts the input parameters and continuously displays the current status until all deliveries are completed or the battery is depleted. Input Parameters: - **grid_size (tuple)**: The size of the city grid as (width, height). - **speed_per_second (float)**: The speed of the drone in kilometers per second. - **power_consumption (float)**: The rate of power consumption in percent per kilometer. - **deliveries (list)**: A list of delivery points as tuples of coordinates. Output: - Continuously printed statements with current status until either all deliveries are made or the battery level reaches zero. The function should simulate the delivery process and print the updated status every second. Here\'s the necessary code that should be used for printing each status update: ```python print(\\"Local Time: \\", time.ctime()) print(\\"Drone Position |\\" + str((x, y))) print(\\"_____________________|____________________________\\") print(\\"Grid Size |\\" + str(grid_size)) print(\\"_____________________|____________________________\\") print(\\"Speed Per Second |\\" + str(speed_per_second) + \\" Kilometer/Second\\") print(\\"_____________________|____________________________\\") print(\\"Battery Level |\\" + str(\'%.2f\' % battery_level) + \\" %\\") print(\\"_____________________|____________________________\\") print(\\"Deliveries Made |\\" + str(deliveries_made)) print(\\"_____________________|____________________________\\") print(\\"Distance Traveled |\\" + str(\'%.2f\' % distance_traveled) + \\" Kilometers\\") ```","solution":"import time import math def simulate_drone_delivery(grid_size, speed_per_second, power_consumption, deliveries): x, y = 0, 0 battery_level = 100.0 distance_traveled = 0.0 deliveries_made = 0 deliveries_to_make = len(deliveries) while deliveries and battery_level > 0: target_x, target_y = deliveries[0] distance = math.sqrt((target_x - x) ** 2 + (target_y - y) ** 2) travel_time = distance / speed_per_second if travel_time > 1: x += speed_per_second * (target_x - x) / distance y += speed_per_second * (target_y - y) / distance distance_traveled += speed_per_second battery_level -= power_consumption * speed_per_second else: x, y = target_x, target_y distance_traveled += distance battery_level -= power_consumption * distance deliveries.pop(0) deliveries_made += 1 print(\\"Local Time: \\", time.ctime()) print(\\"Drone Position |\\" + str((round(x, 2), round(y, 2)))) print(\\"_____________________|____________________________\\") print(\\"Grid Size |\\" + str(grid_size)) print(\\"_____________________|____________________________\\") print(\\"Speed Per Second |\\" + str(speed_per_second) + \\" Kilometer/Second\\") print(\\"_____________________|____________________________\\") print(\\"Battery Level |\\" + str(\'%.2f\' % battery_level) + \\" %\\") print(\\"_____________________|____________________________\\") print(\\"Deliveries Made |\\" + str(deliveries_made)) print(\\"_____________________|____________________________\\") print(\\"Distance Traveled |\\" + str(\'%.2f\' % distance_traveled) + \\" Kilometers\\") time.sleep(1) if battery_level <= 0: print(\\"Battery depleted\\") break"},{"question":"Given a list of integers `arr`, you are required to implement a function `find_subarray_with_max_sum(arr: list, k: int) -> List[int]`. This function should find the contiguous subarray of length `k` that has the maximum sum, and return that subarray. In this problem: - If there are multiple subarrays with the same maximum sum, return the first one. - The input list will have at least one element and `k` will be a positive integer less than or equal to the length of the list. Function Signature `def find_subarray_with_max_sum(arr: list, k: int) -> List[int]` Parameters - `arr` (list): A list of integers. - `k` (int): Length of the subarray. Returns - `List[int]`: The contiguous subarray of length `k` with the maximum sum. Example ```python def find_subarray_with_max_sum(arr: list, k: int) -> List[int]: max_sum = float(\'-inf\') current_sum = 0 start_index = 0 for i in range(len(arr)): current_sum += arr[i] if i >= k - 1: if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 current_sum -= arr[i - k + 1] return arr[start_index:start_index + k] # Test Case 1 arr1 = [1, 2, 3, 4, 5] k1 = 2 print(find_subarray_with_max_sum(arr1, k1)) # [4, 5] # Test Case 2 arr2 = [-5, 2, 3, -1, 5, -1, 2, 3] k2 = 3 print(find_subarray_with_max_sum(arr2, k2)) # [3, -1, 5] ```","solution":"from typing import List def find_subarray_with_max_sum(arr: List[int], k: int) -> List[int]: max_sum = float(\'-inf\') current_sum = 0 start_index = 0 for i in range(len(arr)): current_sum += arr[i] if i >= k - 1: if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 current_sum -= arr[i - k + 1] return arr[start_index:start_index + k]"},{"question":"You are given a list of transactions, each represented as a tuple `(item, price, quantity)`. Your task is to implement a function `total_sales(transactions: List[Tuple[str, float, int]]) -> float` that performs the following operations: 1. Calculate the total sales amount by multiplying the price and quantity for each transaction and summing up the results. 2. Ensure the total sales amount is rounded to two decimal places. **Function Signature:** ```python def total_sales(transactions: List[Tuple[str, float, int]]) -> float: ``` **Input:** - `transactions`: A list of tuples, where each tuple contains: - `item`: A string representing the name of the item. - `price`: A float representing the price of one unit of the item. - `quantity`: An integer representing the number of units sold for the item. **Output:** - Returns a float representing the total sales amount rounded to two decimal places. Here is an example transformation: **Example:** Given: ```python transactions = [ (\\"apple\\", 0.50, 20), (\\"banana\\", 0.30, 30), (\\"orange\\", 0.80, 10), ] ``` After processing: ```python result = 26.00 ``` Explanation: 1. Calculate sales for each transaction: - `apple`: 0.50 * 20 = 10.00 - `banana`: 0.30 * 30 = 9.00 - `orange`: 0.80 * 10 = 8.00 2. Sum up the sales amounts: 10.00 + 9.00 + 8.00 = 27.00 3. Rounded to two decimal places, the result is 27.00. In another example: Given: ```python transactions = [ (\\"milk\\", 1.75, 4), (\\"bread\\", 2.50, 2), (\\"butter\\", 3.20, 1), ] ``` After processing: ```python result = 14.70 ``` Explanation: 1. Calculate sales for each transaction: - `milk`: 1.75 * 4 = 7.00 - `bread`: 2.50 * 2 = 5.00 - `butter`: 3.20 * 1 = 3.20 2. Sum up the sales amounts: 7.00 + 5.00 + 3.20 = 15.20 3. Rounded to two decimal places, the result is 15.20.","solution":"from typing import List, Tuple def total_sales(transactions: List[Tuple[str, float, int]]) -> float: Calculate the total sales amount by multiplying the price and quantity for each transaction and summing up the results. The result is rounded to two decimal places. Parameters: transactions (List[Tuple[str, float, int]]): List of transactions. Returns: float: Total sales amount rounded to two decimal places. total = sum(price * quantity for _, price, quantity in transactions) return round(total, 2)"},{"question":"You are tasked with writing a function in Python that takes a list of integers and returns the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to a given integer `k`. # Function Signature: ```python def longest_subarray(nums: list[int], k: int) -> int: pass ``` # Requirements: 1. The function should take two arguments: `nums`, which is a list of integers, and `k`, which is an integer. 2. The function should return an integer representing the length of the longest contiguous subarray whose elements have pairwise absolute differences less than or equal to `k`. 3. The function should have linear time complexity in the average case. # Example: ```python nums_1 = [1, 3, 5, 7, 9] k_1 = 2 nums_2 = [1, 2, 2, 3, 1] k_2 = 1 nums_3 = [10, 12, 14, 7, 8] k_3 = 5 print(longest_subarray(nums_1, k_1)) # Output: 2 print(longest_subarray(nums_2, k_2)) # Output: 3 print(longest_subarray(nums_3, k_3)) # Output: 3 ``` # Explanation: - In `nums_1` with `k_1 = 2`, the longest subarray with all pairs having absolute differences <= 2 is `[1, 3]` or `[3, 5]`, thus the function returns `2`. - In `nums_2` with `k_2 = 1`, the longest subarray with all pairs having absolute differences <= 1 is `[2, 2, 3]`, thus the function returns `3`. - In `nums_3` with `k_3 = 5`, the longest subarray with all pairs having absolute differences <= 5 is `[10, 12, 14]` or `[7, 8]`, thus the function returns `3`. The key aspect of this problem is to efficiently manage the comparison of pairwise elements to find the longest contiguous subarray.","solution":"def longest_subarray(nums: list[int], k: int) -> int: if not nums: return 0 # Initialize the two pointers and variables to maintain current window properties left = 0 max_length = 0 for right in range(len(nums)): # While the range exceeds k, adjust left pointer while max(nums[left:right+1]) - min(nums[left:right+1]) > k: left += 1 # Update the maximum length found so far max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function named `calculate_running_median` that takes a list of integers as input and returns a new list containing the running median of the numbers as they are added to the list. The running median is defined as the median of all the elements seen so far during the iteration process. Here\'s how the function should work: - The function should iterate through the list of integers. - For each new integer added to the list, calculate the median of the current list (up to that point). - Store the median into the result list. - Return the result list of running medians. To calculate the median: - If the list has an odd number of elements, the median is the middle element. - If the list has an even number of elements, the median is the average of the two middle elements. Example: ```python def calculate_running_median(sequence): result = [] for i in range(len(sequence)): sorted_so_far = sorted(sequence[:i + 1]) if len(sorted_so_far) % 2 == 1: median = sorted_so_far[len(sorted_so_far) // 2] else: median = (sorted_so_far[len(sorted_so_far) // 2 - 1] + sorted_so_far[len(sorted_so_far) // 2]) / 2 result.append(median) return result # Example usage: print(calculate_running_median([2, 1, 5, 7, 2, 0, 5])) ``` Output: ``` [2, 1.5, 2, 3.5, 2, 2, 2] ``` Your task is to complete the `calculate_running_median` function, ensuring the correct median values for sequences of integers as they are processed.","solution":"def calculate_running_median(sequence): Calculates the running median for a given sequence of integers. :param sequence: List[int] A list of integers. :return: List[float] A list of running medians. result = [] for i in range(len(sequence)): sorted_so_far = sorted(sequence[:i + 1]) if len(sorted_so_far) % 2 == 1: median = sorted_so_far[len(sorted_so_far) // 2] else: median = (sorted_so_far[len(sorted_so_far) // 2 - 1] + sorted_so_far[len(sorted_so_far) // 2]) / 2 result.append(median) return result # Example usage: print(calculate_running_median([2, 1, 5, 7, 2, 0, 5])) # Should print [2, 1.5, 2, 3.5, 2, 2, 2]"},{"question":"You are tasked with writing a function `sparse_matrix_mult` that performs the multiplication of two sparse matrices. Sparse matrices are those with a majority of zero elements, and special methods can be used to handle them more efficiently in terms of both space and time. Your task is to implement a function using a dictionary-based representation of sparse matrices. Your function should conform to the following specification: # Function Signature ```python def sparse_matrix_mult(A: Dict[Tuple[int, int], int], B: Dict[Tuple[int, int], int], n: int) -> Dict[Tuple[int, int], int]: ``` # Parameters - `A` (Dict[Tuple[int, int], int]): A dictionary where keys are tuples (i, j) representing the non-zero indices in matrix A and values are the matrix entries. - `B` (Dict[Tuple[int, int], int]): A dictionary where keys are tuples (i, j) representing the non-zero indices in matrix B and values are the matrix entries. - `n` (int): The size of the matrices A and B (both are n x n). # Returns - `Dict[Tuple[int, int], int]`: A dictionary representing the resulting matrix of the multiplication, with the same format as the input matrices. # Instructions 1. Iterate over the keys of A to find the non-zero elements. 2. For each non-zero element in A at position (i, j), iterate over the valid positions in B where the row index matches j. 3. Perform the multiplication of the non-zero elements and accumulate the results in the appropriate positions of the result matrix. 4. Return the result in a dictionary format conserving only the non-zero elements. # Example ```python A = { (0, 1): 3, (1, 0): 2 } B = { (1, 0): 1, (1, 2): 4 } n = 3 result = sparse_matrix_mult(A, B, n) print(result) ``` Expected Output: ```python { (0, 0): 3, (0, 2): 12 } ``` # Required Libraries - `collections.defaultdict`: Recommended for easier accumulation of results. The function must efficiently handle the sparse representation, avoiding unnecessary computations involving zero elements.","solution":"from typing import Dict, Tuple def sparse_matrix_mult(A: Dict[Tuple[int, int], int], B: Dict[Tuple[int, int], int], n: int) -> Dict[Tuple[int, int], int]: Multiply two sparse matrices A and B. Args: - A: The first sparse matrix. - B: The second sparse matrix. - n: The size of the matrices (n x n). Returns: - A sparse matrix representation of the result of A * B. from collections import defaultdict result = defaultdict(int) for (i, j), valA in A.items(): for k in range(n): if (j, k) in B: result[i, k] += valA * B[j, k] # Filter out zero values and convert to dict return {key: val for key, val in result.items() if val != 0}"},{"question":"You are tasked with creating a function that calculates the sum of the boundary elements (elements located on the outermost row and column) of a given two-dimensional matrix. Your goal is to create a function called `sum_boundary_elements` that takes a matrix (list of lists) as input and returns the sum of its boundary elements. This function should: - Accept one parameter `matrix`, which is a list of lists containing integers. - Calculate the sum of the elements in the top row, the bottom row, the left column (excluding already included top and bottom elements), and the right column (excluding already included top and bottom elements). For example, given the matrix: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The boundary elements are `1, 2, 3, 6, 9, 8, 7, 4`, and their sum is `1 + 2 + 3 + 6 + 9 + 8 + 7 + 4 = 40`. Implement the function `sum_boundary_elements(matrix)`. ```python def sum_boundary_elements(matrix): if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) boundary_sum = 0 # Sum the top row boundary_sum += sum(matrix[0]) # Sum the bottom row if it is different from the top row if n > 1: boundary_sum += sum(matrix[-1]) # Sum the left and right columns excluding already included corners for i in range(1, n-1): boundary_sum += matrix[i][0] # Left column if m > 1: boundary_sum += matrix[i][-1] # Right column return boundary_sum ```","solution":"def sum_boundary_elements(matrix): if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) boundary_sum = 0 # Sum the top row boundary_sum += sum(matrix[0]) # Sum the bottom row if it is different from the top row if n > 1: boundary_sum += sum(matrix[-1]) # Sum the left and right columns excluding already included corners for i in range(1, n-1): boundary_sum += matrix[i][0] # Left column if m > 1: boundary_sum += matrix[i][-1] # Right column return boundary_sum"},{"question":"You are asked to implement a function `longest_subarray_with_sum` that finds the length of the longest contiguous subarray that sums up to a given target value. The function should take in a list of integers and the target sum as parameters. Here is the template for your function: ```python def longest_subarray_with_sum(nums: list, target: int) -> int: # Your implementation here pass ``` # Input: - `nums` (list): A list of integers. - `target` (int): The target sum of the subarray. # Output: - (int): The length of the longest contiguous subarray that sums up to the target value. If no such subarray exists, return 0. # Instructions: 1. Use a dictionary to keep track of the cumulative sum and its corresponding index. 2. Iterate through the list to compute the cumulative sum. 3. Check if the cumulative sum equals the target, or if the cumulative sum minus the target exists in the dictionary. 4. Update the length of the longest subarray when a subarray with the target sum is found. 5. Ensure that the program handles both positive and negative integers. # Example: ```python length = longest_subarray_with_sum([1, -1, 5, -2, 3], 3) print(length) # Expected output is 4 length = longest_subarray_with_sum([-2, -1, 2, 1], 1) print(length) # Expected output is 2 ``` # Note: Ensure your solution runs efficiently for large input lists by leveraging a single pass through the list and using a dictionary for cumulative sum tracking.","solution":"def longest_subarray_with_sum(nums: list, target: int) -> int: Finds the length of the longest contiguous subarray that sums up to a given target value. Parameters: nums: list of integers target: the target sum of the subarray Returns: int: the length of the longest subarray with the given sum, or 0 if no such subarray exists sum_index_map = {} cumulative_sum = 0 max_length = 0 for i, num in enumerate(nums): cumulative_sum += num if cumulative_sum == target: max_length = i + 1 if (cumulative_sum - target) in sum_index_map: max_length = max(max_length, i - sum_index_map[cumulative_sum - target]) if cumulative_sum not in sum_index_map: sum_index_map[cumulative_sum] = i return max_length"},{"question":"This function takes a list of integers and returns a tuple containing two elements: the first element is the count of unique integers in the list, and the second element is a list of those unique integers sorted in ascending order. The function should output: tuple: A tuple with the count of unique integers and a sorted list of these integers. You should write self-contained code starting with: ``` def unique_sorted_integers(numbers): ```","solution":"def unique_sorted_integers(numbers): Returns a tuple with the count of unique integers and a sorted list of these integers. Parameters: numbers (list of int): A list of integers. Returns: tuple: A tuple with the count of unique integers and a sorted list of these integers. unique_numbers = sorted(set(numbers)) return (len(unique_numbers), unique_numbers)"},{"question":"Create a Python function `find_missing_numbers(arr)` that identifies and returns a list of all the missing numbers from a given list of integers, `arr`. The input list `arr` contains numbers in the range from 1 to `n`, where `n` is the length of the list. The list can have duplicate numbers. The missing numbers are the numbers between 1 and `n` that are not present in the list. The function should adhere to the following specifications: 1. **Parameter**: - `arr`: a list of integers where each integer is in the range from 1 to `n`, and `n` is the length of the list. 2. **Returns**: - A list of integers representing the missing numbers in ascending order. You should try to achieve this with optimal time and space complexity. **Examples**: ```python find_missing_numbers([4, 3, 2, 7, 8, 2, 3, 1]) # returns [5, 6] find_missing_numbers([1, 1]) # returns [2] find_missing_numbers([2, 2]) # returns [1] ``` **Hints**: - Consider using a set to store and identify the missing numbers efficiently. - The final list of missing numbers should be sorted in ascending order.","solution":"def find_missing_numbers(arr): Identifies and returns a list of all the missing numbers from a given list of integers, arr. The input list arr contains numbers in the range from 1 to n, where n is the length of the list. Parameters: arr (list[int]): The input list of integers. Returns: list[int]: A list of integers representing the missing numbers in ascending order. n = len(arr) full_set = set(range(1, n+1)) arr_set = set(arr) missing_numbers = list(full_set - arr_set) missing_numbers.sort() return missing_numbers"},{"question":"Given an inventory management system, write a function `manage_inventory(inventory, actions)` to perform a series of actions on the inventory. The inventory is represented as a dictionary where keys are item names (strings) and values are their quantities (integers). The actions are represented as a list of dictionaries, each containing an action type (\\"add\\", \\"remove\\", \\"check\\") and the item name and quantity if applicable. Your function should support the following actions: 1. `\\"add\\"`: Adds the specified quantity of an item to the inventory. If the item does not exist in the inventory, add it. 2. `\\"remove\\"`: Removes the specified quantity of an item from the inventory. If the item does not exist or not enough quantity is available, raise a `ValueError`. 3. `\\"check\\"`: Returns the current quantity of the specified item in the inventory. If the item does not exist in the inventory, return 0. Here is the template for your function: ```python def manage_inventory(inventory, actions): for action in actions: if action[\\"type\\"] == \\"add\\": item = action[\\"item\\"] quantity = action[\\"quantity\\"] if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif action[\\"type\\"] == \\"remove\\": item = action[\\"item\\"] quantity = action[\\"quantity\\"] if item in inventory and inventory[item] >= quantity: inventory[item] -= quantity else: raise ValueError(f\\"Not enough {item} in inventory.\\") elif action[\\"type\\"] == \\"check\\": item = action[\\"item\\"] return inventory.get(item, 0) return inventory ``` You are required to return the updated inventory after executing all actions. If the `check` action is performed, the function should immediately return the quantity of the item specified.","solution":"def manage_inventory(inventory, actions): Manages an inventory based on a series of actions. Parameters: - inventory (dict): A dictionary representing the inventory with item names as keys and quantities as values. - actions (list): A list of dictionaries where each dictionary has a \'type\' key indicating the action type (\'add\', \'remove\', \'check\'), and \'item\' key indicating the item name, and optionally a \'quantity\' key indicating the quantity. Returns: - dict: The updated inventory after performing all actions, or an integer if the \'check\' action is performed. for action in actions: if action[\\"type\\"] == \\"add\\": item = action[\\"item\\"] quantity = action[\\"quantity\\"] if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif action[\\"type\\"] == \\"remove\\": item = action[\\"item\\"] quantity = action[\\"quantity\\"] if item in inventory and inventory[item] >= quantity: inventory[item] -= quantity else: raise ValueError(f\\"Not enough {item} in inventory.\\") elif action[\\"type\\"] == \\"check\\": item = action[\\"item\\"] return inventory.get(item, 0) return inventory"},{"question":"Given a list of stock prices for consecutive days, each element representing the price of a particular stock on that day, calculate the maximum profit that can be achieved from exactly one buy and one sell transaction. The function should return the maximum profit possible. If no profit can be achieved, return 0. The function should work with the following signature: ``` def max_profit(prices): ``` # Examples Example 1: Input: ``` prices = [7, 1, 5, 3, 6, 4] ``` Output: ``` 5 ``` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example 2: Input: ``` prices = [7, 6, 4, 3, 1] ``` Output: ``` 0 ``` Explanation: No profit can be achieved as the prices are continuously decreasing. # Constraints: * The length of the prices list will be between 1 and 10^5. * The prices will all be positive integers.","solution":"def max_profit(prices): Calculate the maximum profit achieved from exactly one buy and one sell transaction. If no profit can be achieved, return 0. :param prices: List of stock prices for consecutive days. :return: Maximum profit possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to merge two dictionaries such that, if a key exists in both dictionaries, the corresponding values are combined into a list. The function should return the merged dictionary. The function should output: Dict[str, Union[int, List[int]]]: The merged dictionary with combined values where necessary. You should write self-contained code starting with: ``` from typing import Dict, Union, List def merge_dicts(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, Union[int, List[int]]]: ```","solution":"from typing import Dict, Union, List def merge_dicts(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, Union[int, List[int]]]: Merge two dictionaries such that if a key exists in both, the values are combined into a list. Args: dict1: A dictionary with string keys and integer values. dict2: A dictionary with string keys and integer values. Returns: A merged dictionary with combined values where necessary. merged_dict = {} # Adding all items from dict1 to merged_dict for key, value in dict1.items(): if key in dict2: # If key exists in both dict1 and dict2, combine the values into a list merged_dict[key] = [value, dict2[key]] else: merged_dict[key] = value # Adding remaining items from dict2 that are not in dict1 for key, value in dict2.items(): if key not in merged_dict: merged_dict[key] = value return merged_dict"},{"question":"Given a list of student names and their grades, write a function to calculate the average grade of the class as well as identify the student(s) with the highest grade. The function should output these values as a tuple. The function should output a tuple with: float: The average grade of the class. list: A list of the names of the student(s) with the highest grade. You should write self-contained code starting with: ``` def calculate_grades(student_grades): ```","solution":"def calculate_grades(student_grades): Calculates the average grade of the class and identifies the student(s) with the highest grade. :param student_grades: List of tuples, where each tuple contains a student name and their grade. :return: A tuple with the average grade and a list of the names of the student(s) with the highest grade. if not student_grades: return (0.0, []) total_grades = sum(grade for _, grade in student_grades) average_grade = total_grades / len(student_grades) highest_grade = max(grade for _, grade in student_grades) highest_grade_students = [student_name for student_name, grade in student_grades if grade == highest_grade] return (average_grade, highest_grade_students)"},{"question":"You are required to create a Python function to analyze a string of text for certain characteristics using the `collections` library. The function should be named `text_analysis` and handle three different tasks: 1. When provided with a multi-line string `text`, it should return a dictionary containing the frequency count of each word in the text (case insensitive). 2. When provided with a multi-line string `text` and a word `word`, it should return the number of occurrences of `word` in the text (case insensitive). 3. When provided with a multi-line string `text`, it should return the most common word in the text and its frequency. In case of a tie, return the word which appears first in the text. Use the `collections.Counter` class to calculate word frequencies and other necessary methods. # Function Signature ```python from collections import Counter def text_analysis(text, word=None): pass ``` # Examples 1. **Frequency count of each word:** ```python text = \\"Hello world. Hello again, world.\\" print(text_analysis(text)) # Output: {\'hello\': 2, \'world\': 2, \'again,\': 1} ``` 2. **Occurrences of a specific word:** ```python text = \\"Hello world. Hello again, world.\\" word = \\"hello\\" print(text_analysis(text, word)) # Output: 2 ``` 3. **Most common word:** ```python text = \\"Hello world. Hello again, world.\\" print(text_analysis(text)) # Output: (\'hello\', 2) ``` Assumptions - The text consists of words and punctuation. - Words are separated by spaces. - The function should ignore case when counting word frequencies and checking for specific words. - Punctuation is considered part of the word.","solution":"from collections import Counter import re def text_analysis(text, word=None): Analyzes text to perform one of three tasks: 1. Returns a dictionary of word frequencies if no word is specified. 2. Returns the frequency of the specified word if a word is given. 3. Returns the most common word and its frequency if no word is specified. Parameters: text (str): The text to be analyzed. word (str, optional): The word for which to count occurrences. Returns: dict or int or tuple: Depending on the task, returns a dictionary of word frequencies, an integer count of a specific word, or the most common word and its count. # Normalize the text to lower case and split it into words words = re.findall(r\'bw+b\', text.lower()) word_counter = Counter(words) if word is None: # If no word is specified, return the word frequency dictionary directly return word_counter else: # If a word is specified, return its frequency return word_counter[word.lower()]"},{"question":"You are tasked with writing a function named `CalculateMedian` that takes a single argument: `numList` (a list of integers). This function will perform the following tasks: 1. Sort the list of integers in non-decreasing order. 2. Compute and return the median value of the list. The median is defined as: - The middle value of a sorted list if the number of elements is odd. - The average of the two middle values if the number of elements is even. Your function should handle edge cases such as an empty list by returning `None`. Requirements: - Do not use any external libraries other than the built-in Python library. - Assume that the elements of `numList` are all integers. Sample Usage: ```python print(CalculateMedian([3, 1, 4, 1, 5, 9, 2])) print(CalculateMedian([7, 3, 5, 1])) ``` Expected Output: ``` 3 4.0 ```","solution":"def CalculateMedian(numList): Returns the median value of a list of integers. if not numList: return None numList.sort() n = len(numList) if n % 2 == 1: # If odd, return the middle element return numList[n // 2] else: # If even, return the average of the two middle elements mid1 = numList[n // 2 - 1] mid2 = numList[n // 2] return (mid1 + mid2) / 2"},{"question":"Implement a function to generate a set of random points lying on a plane, and then use the k-means clustering algorithm to partition these points into a specified number of clusters. The function should plot the original points and their assigned cluster centroids using matplotlib and return the plot. The function should raise the exception for KeyError: If the number of clusters specified is more than the number of points. The function should output with: plt.Figure: A matplotlib figure containing the plot of the original data points and cluster centroids. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def task_func(): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def generate_and_cluster_points(num_points, num_clusters): Generates random points on a plane and applies the k-means clustering algorithm. Parameters: num_points (int): Number of points to generate. num_clusters (int): Number of clusters to form. Returns: plt.Figure: A matplotlib figure containing the plot of the original data points and cluster centroids. Raises: KeyError: If the number of clusters specified is more than the number of points. if num_clusters > num_points: raise KeyError(\\"Number of clusters specified is more than the number of points.\\") # Generate random points points = np.random.rand(num_points, 2) # Apply k-means clustering kmeans = KMeans(n_clusters=num_clusters) kmeans.fit(points) labels = kmeans.labels_ centroids = kmeans.cluster_centers_ # Plot fig, ax = plt.subplots() scatter = ax.scatter(points[:,0], points[:,1], c=labels, cmap=\'viridis\') ax.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', marker=\'x\') # Display a legend handles, _ = scatter.legend_elements() legend_labels = [f\\"Cluster {i}\\" for i in range(num_clusters)] ax.legend(handles, legend_labels) return fig"},{"question":"You are required to implement a simple inventory management system for a small store using Python. Write a class named `Inventory` with the following specifications: 1. An instance variable `items` which is a dictionary that holds item names as keys and their quantities as values. 2. A method `add_item(self, item_name, quantity)` which adds the specified quantity to the given item. If the item does not exist in the inventory, it should be added with the given quantity. 3. A method `remove_item(self, item_name, quantity)` which subtracts the specified quantity from the given item. If the remaining quantity drops to 0 or below, the item should be removed from the inventory. If the item does not exist, the method should do nothing. 4. A method `get_inventory(self)` which returns the current state of the inventory as a dictionary. Your task is to implement the `Inventory` class that meets the above specifications. # Class Definition ```python class Inventory: def __init__(self): self.items = {} def add_item(self, item_name, quantity): pass # your implementation here def remove_item(self, item_name, quantity): pass # your implementation here def get_inventory(self): pass # your implementation here ``` # Example Usage ```python # Create an inventory object store_inventory = Inventory() # Add items store_inventory.add_item(\\"apple\\", 50) store_inventory.add_item(\\"banana\\", 30) store_inventory.add_item(\\"apple\\", 20) # Remove items store_inventory.remove_item(\\"banana\\", 10) store_inventory.remove_item(\\"apple\\", 70) # Print the inventory print(store_inventory.get_inventory()) ``` # Expected Output ```python {\'banana\': 20} ``` # Constraints - The `add_item` and `remove_item` methods should handle negative or zero quantities appropriately (e.g., treat negative values as zero). - The `get_inventory` method should return a copy of the inventory to prevent external modification.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_name, quantity): if quantity <= 0: return if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def remove_item(self, item_name, quantity): if quantity <= 0 or item_name not in self.items: return self.items[item_name] -= quantity if self.items[item_name] <= 0: del self.items[item_name] def get_inventory(self): return self.items.copy()"},{"question":"You are given a set of tasks involving mathematical and data operations. Your goal is to write a function named `process_data` that: - Loads a dataset from a provided CSV file. - Calculates statistical information and performs specific transformations on the dataset. - Saves the transformed dataset into a new CSV file. # Dataset Specifications: The CSV file will contain numeric data in a tabular format with the following columns: - `A` - `B` - `C` - `D` Each column contains integer values. # Function Specifications: **`load_data(file_path)`**: - Loads the dataset from the CSV file located at `file_path`. - Returns a pandas DataFrame. **`save_data(data, file_path)`**: - Saves the provided DataFrame `data` into a CSV file located at `file_path`. # Instructions: 1. Define a function named `process_data(file_path_in, file_path_out)`. 2. Load the data from the input CSV file using `load_data`. 3. Calculate and print the mean and standard deviation of each column. 4. Add a new column `E` which is the sum of columns `B` and `D`. 5. Normalize the values in column `C` to have a range of [0, 1]. 6. Save the transformed DataFrame to the output CSV file using `save_data`. # Example: Here\'s how you can structure the `process_data` function: ```python import pandas as pd def load_data(file_path): return pd.read_csv(file_path) def save_data(data, file_path): data.to_csv(file_path, index=False) def process_data(file_path_in, file_path_out): # Load the data df = load_data(file_path_in) # Calculate and print mean and standard deviation for col in df.columns: print(f\\"Mean of {col}: {df[col].mean()}\\") print(f\\"Standard deviation of {col}: {df[col].std()}\\") # Add new column \'E\' df[\'E\'] = df[\'B\'] + df[\'D\'] # Normalize column \'C\' df[\'C\'] = (df[\'C\'] - df[\'C\'].min()) / (df[\'C\'].max() - df[\'C\'].min()) # Save the transformed data save_data(df, file_path_out) ``` Ensure that you have the required libraries installed, such as `pandas`, to execute these operations. # Note: - The input CSV file path is specified by `file_path_in`. - The output CSV file path is specified by `file_path_out`.","solution":"import pandas as pd def load_data(file_path): Load the dataset from the CSV file located at file_path. return pd.read_csv(file_path) def save_data(data, file_path): Save the provided DataFrame data into a CSV file located at file_path. data.to_csv(file_path, index=False) def process_data(file_path_in, file_path_out): 1. Load data from input CSV file at file_path_in. 2. Calculate and print mean and standard deviation of each column. 3. Add a new column E which is the sum of columns B and D. 4. Normalize the values in column C to have a range [0, 1]. 5. Save the transformed DataFrame to output CSV file at file_path_out. # Load data df = load_data(file_path_in) # Calculate and print mean and standard deviation for col in df.columns: mean = df[col].mean() std = df[col].std() print(f\\"Mean of {col}: {mean}\\") print(f\\"Standard deviation of {col}: {std}\\") # Add new column \'E\' df[\'E\'] = df[\'B\'] + df[\'D\'] # Normalize column \'C\' df[\'C\'] = (df[\'C\'] - df[\'C\'].min()) / (df[\'C\'].max() - df[\'C\'].min()) # Save transformed data save_data(df, file_path_out)"},{"question":"Write a Python function named `swap_list_elements` that takes a list `lst` and two integer indices `index1` and `index2`. The function should swap the elements at the two specified indices in the list and return the modified list. Additionally, handle the following cases: - If either index is out of bounds, return the original list without any changes. - The list can contain any data type. Below is a skeleton to guide the function definition: ```python def swap_list_elements(lst, index1, index2): # Check if either index is out of bounds # Swap the elements at the specified indices # Return the modified list ``` **Example Usage**: ```python # Example 1: Swapping elements within bounds print(swap_list_elements([1, 2, 3, 4], 1, 3)) # Output: [1, 4, 3, 2] # Example 2: Index out of bounds print(swap_list_elements([1, 2, 3, 4], 1, 5)) # Output: [1, 2, 3, 4] # Example 3: Index out of bounds print(swap_list_elements([1, 2, 3, 4], -1, 1)) # Output: [1, 2, 3, 4] ```","solution":"def swap_list_elements(lst, index1, index2): Swaps the elements at index1 and index2 in the list lst. Parameters: lst (list): The list of elements. index1 (int): The first index. index2 (int): The second index. Returns: list: The modified list with elements swapped, or the original list if any index is out of bounds. # Check if either index is out of bounds if index1 < 0 or index2 < 0 or index1 >= len(lst) or index2 >= len(lst): return lst # Swap the elements at the specified indices lst[index1], lst[index2] = lst[index2], lst[index1] return lst"},{"question":"Write a function named `processStrings` that takes a list of strings and returns a list of dictionaries. Each dictionary should contain the following keys: \'length\', \'uppercase_count\', \'lowercase_count\', and \'digit_count\', corresponding to the respective counts of characters in the string. The function should compute the length of the string, the number of uppercase letters, the number of lowercase letters, and the number of digits. # Function Signature ```python def processStrings(strings): pass ``` # Parameters - `strings` (list of str): A list of strings to be processed. # Returns - `list of dict`: A list where each dictionary contains the computed counts for the corresponding string in the input list. # Examples ```python strings = [\\"Hello123\\", \\"coding\\", \\"Python3.8\\"] result = processStrings(strings) ``` The expected output for the above example would be: ```python [ {\'length\': 8, \'uppercase_count\': 1, \'lowercase_count\': 4, \'digit_count\': 3}, {\'length\': 6, \'uppercase_count\': 0, \'lowercase_count\': 6, \'digit_count\': 0}, {\'length\': 9, \'uppercase_count\': 1, \'lowercase_count\': 5, \'digit_count\': 2} ] ``` # Notes - Use Python built-in functions and string methods to perform the necessary calculations. - Ensure that your function correctly handles an empty string by returning a dictionary with all counts set to 0.","solution":"def processStrings(strings): Processes a list of strings to calculate the length of the string, the number of uppercase letters, the number of lowercase letters, and the number of digits in each string. Parameters: strings (list of str): A list of strings to be processed. Returns: list of dict: A list where each dictionary contains the computed counts for the corresponding string in the input list. results = [] for string in strings: length = len(string) uppercase_count = sum(1 for char in string if char.isupper()) lowercase_count = sum(1 for char in string if char.islower()) digit_count = sum(1 for char in string if char.isdigit()) results.append({ \'length\': length, \'uppercase_count\': uppercase_count, \'lowercase_count\': lowercase_count, \'digit_count\': digit_count }) return results"},{"question":"Write a function that reads a text file containing a list of URLs (one URL per line), fetches the content of each URL, and saves the content to a new file in a specified directory. Each output file should be named after the domain of the URL (e.g., if the URL is `http://example.com/page`, the output file should be `example.com.txt`). The function should handle HTTP errors appropriately and skip any URLs that cannot be fetched. The function should return a dictionary with URLs as keys and the status of each fetch operation as values. The status should be either \\"success\\" or \\"failed\\" depending on whether the content was successfully fetched and saved. You should write self-contained code starting with: ``` import os import requests def fetch_and_save(urls_file, output_directory): ```","solution":"import os import requests def fetch_and_save(urls_file, output_directory): Reads a text file containing a list of URLs (one per line), fetches content from each URL, and saves the content to a new file named after the domain of the URL. Args: urls_file (str): The path to the text file containing URLs. output_directory (str): The directory where fetched contents will be stored. Returns: dict: A dictionary with URLs as keys and the status (\\"success\\" or \\"failed\\") as values. if not os.path.exists(output_directory): os.makedirs(output_directory) status = {} with open(urls_file, \'r\') as file: for line in file: url = line.strip() try: response = requests.get(url) response.raise_for_status() # Extract domain from URL to create the output file name domain = url.split(\\"//\\")[-1].split(\\"/\\")[0] file_path = os.path.join(output_directory, f\\"{domain}.txt\\") with open(file_path, \'w\', encoding=\'utf-8\') as output_file: output_file.write(response.text) status[url] = \\"success\\" except requests.RequestException: status[url] = \\"failed\\" return status"},{"question":"You are required to write a function named `vector_operations` to perform basic operations on vectors. The function should take two parameters: 1. `vec1`: A list representing the first vector. 2. `vec2`: A list representing the second vector. The function needs to compute the following operations: 1. Check if `vec1` and `vec2` are of the same length. If not, return the string \\"Vectors are of different lengths\\". 2. Perform element-wise addition of `vec1` and `vec2`. 3. Perform element-wise subtraction of `vec1` from `vec2`. 4. Compute the dot product of `vec1` and `vec2`. 5. Return a tuple with the results of the above operations in the following order: (addition, subtraction, dot product). For example: ```python add, sub, dot = vector_operations([1, 2, 3], [4, 5, 6]) print(\\"Addition:\\", add) print(\\"Subtraction:\\", sub) print(\\"Dot Product:\\", dot) ``` Expected output: ``` Addition: [5, 7, 9] Subtraction: [-3, -3, -3] Dot Product: 32 ``` If the lengths are different: ```python result = vector_operations([1, 2], [4, 5, 6]) print(result) ``` Expected output: ``` Vectors are of different lengths ``` Ensure your implementation handles necessary validations and operates efficiently on the vectors.","solution":"def vector_operations(vec1, vec2): Perform vector operations: addition, subtraction, and dot product. Parameters: vec1 : list of numbers - First vector vec2 : list of numbers - Second vector Returns: tuple - (addition, subtraction, dot product) if vectors are of the same length. Otherwise, returns a string \\"Vectors are of different lengths\\". if len(vec1) != len(vec2): return \\"Vectors are of different lengths\\" addition = [a + b for a, b in zip(vec1, vec2)] subtraction = [a - b for a, b in zip(vec1, vec2)] dot_product = sum(a * b for a, b in zip(vec1, vec2)) return (addition, subtraction, dot_product)"},{"question":"Write a Python function named `calculate_event_duration` that takes a list of dictionaries as input. Each dictionary represents an event with two keys: \'start\' and \'end\', where the values are strings in the \\"YYYY-MM-DD HH:MM\\" format. The function should perform the following tasks: 1. Calculate the duration in minutes for each event. 2. Return a list of durations in minutes for each event, in the same order as the input list. For this task, ensure to use the `datetime` module for parsing and calculating the times. Here is the partial implementation to guide you: ```python def calculate_event_duration(events): from datetime import datetime durations = [] for event in events: start_time = datetime.strptime(event[\'start\'], \\"%Y-%m-%d %H:%M\\") end_time = datetime.strptime(event[\'end\'], \\"%Y-%m-%d %H:%M\\") duration = (end_time - start_time).total_seconds() / 60 durations.append(duration) return durations ``` Please complete this function following the provided requirements.","solution":"def calculate_event_duration(events): from datetime import datetime durations = [] for event in events: start_time = datetime.strptime(event[\'start\'], \\"%Y-%m-%d %H:%M\\") end_time = datetime.strptime(event[\'end\'], \\"%Y-%m-%d %H:%M\\") duration = (end_time - start_time).total_seconds() / 60 durations.append(duration) return durations"},{"question":"You are tasked with writing a function, `invert_matrix(matrix)`, that computes the inverse of a given 2x2 matrix. The function should return the inverse matrix if it exists, otherwise, it should return `None`. A 2x2 matrix is represented as follows: [ text{matrix} = begin{bmatrix} a & b c & d end{bmatrix} ] The inverse of the matrix is given by: [ text{matrix}^{-1} = frac{1}{ad - bc} begin{bmatrix} d & -b -c & a end{bmatrix} ] if (ad - bc neq 0). # Requirements: - Define a function named `invert_matrix(matrix)` that takes a 2x2 matrix as a list of lists, `matrix`, where `matrix` is of the format `[[a, b], [c, d]]`. - Calculate the determinant of the matrix as ( det = ad - bc ). - If `det` is not zero, compute and return the inverse matrix as a list of lists. If `det` is zero, return `None`. # Example: ```python matrix = [[4, 7], [2, 6]] print(invert_matrix(matrix)) ``` The output should be: ``` [[0.6, -0.7], [-0.2, 0.4]] ``` # Notes: - You may assume the elements of the matrix are numerical (integers or floats). # Tips: - Make sure to handle division and potential zero division errors properly. - Test the function with various matrices to ensure accuracy, including edge cases where the determinant is zero.","solution":"def invert_matrix(matrix): Computes the inverse of a given 2x2 matrix if it exists, otherwise returns None. :param matrix: A 2x2 matrix as a list of lists, matrix is of the format [[a, b], [c, d]] :return: Inverted matrix as a list of lists if the inverse exists, otherwise None # Extract elements from the matrix provided a, b = matrix[0] c, d = matrix[1] # Calculate determinant det = a * d - b * c # If determinant is zero, the matrix is not invertible if det == 0: return None # Calculate the inverse using the formula inverse_matrix = [ [ d / det, -b / det], [-c / det, a / det] ] return inverse_matrix"},{"question":"Write a function that generates a random dataset with three features and a target variable. Each feature should have integer values between 1 and 20, and the target variable should be a polynomial combination of the features with added noise. Your task is to use polynomial regression to model the relationship between the features and the target variable and find the combination of features and their corresponding polynomial degrees that yield the highest R^2 score. Assume polynomial degrees range from 1 to 3. Requirements: - Use numpy to generate random data. - Use itertools to generate combinations of data features. - Use sklearn\'s PolynomialFeatures and LinearRegression to train the model and calculate the R^2 score. - Output the combination of features, polynomial degree, and R^2 score. The function should output: - best_combination: A tuple containing the indices of the features used. - best_degree: The degree of the polynomial regression (integer). - best_r2_score: The highest R^2 score (float). You should write self-contained code starting with: ``` import numpy as np from itertools import combinations from sklearn.preprocessing import PolynomialFeatures from sklearn.linear_model import LinearRegression def task_func(): ```","solution":"import numpy as np from itertools import combinations from sklearn.preprocessing import PolynomialFeatures from sklearn.linear_model import LinearRegression def generate_dataset(n_samples=100): np.random.seed(42) # for reproducibility X = np.random.randint(1, 21, (n_samples, 3)) noise = np.random.normal(0, 1, n_samples) y = 3*X[:, 0]**2 + 2*X[:, 1] + X[:, 2]**3 + noise return X, y def task_func(): X, y = generate_dataset() best_r2_score = -np.inf best_combination = None best_degree = None feature_indices = [0, 1, 2] for degree in range(1, 4): for combination in combinations(feature_indices, 3): poly = PolynomialFeatures(degree=degree) X_poly = poly.fit_transform(X[:, combination]) model = LinearRegression() model.fit(X_poly, y) r2_score = model.score(X_poly, y) if r2_score > best_r2_score: best_r2_score = r2_score best_combination = combination best_degree = degree return best_combination, best_degree, best_r2_score"},{"question":"Design a function `find_longest_substring` that takes two strings as input and returns the longest common substring shared between them. **Function Signature:** ```python def find_longest_substring(s1: str, s2: str) -> str: ``` **Parameters:** - `s1` (str): The first input string. - `s2` (str): The second input string. **Returns:** - A string representing the longest common substring shared between `s1` and `s2`. **Requirements:** 1. Utilize dynamic programming to solve the problem efficiently. 2. Handle cases where there are multiple longest common substrings by returning the one which appears first in `s1`. 3. Consider empty strings as valid inputs and handle them appropriately. **Example:** ```python # Sample input s1 = \\"ABABC\\" s2 = \\"BABCA\\" result = find_longest_substring(s1, s2) print(result) ``` **Expected Output:** ``` \\"BABC\\" ``` **Note:** - The function should work for various cases, including when strings are of different lengths or contain special characters. - Ensure the implementation has a good time complexity suitable for reasonably large strings.","solution":"def find_longest_substring(s1: str, s2: str) -> str: Returns the longest common substring shared between s1 and s2. m, n = len(s1), len(s2) # Create a DP table to store lengths of longest common suffixes of substrings dp = [[0] * (n + 1) for _ in range(m + 1)] # Length of the longest common substring length_of_longest = 0 # Ending index of the longest common substring in s1 ending_index_s1 = 0 # Build the DP table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > length_of_longest: length_of_longest = dp[i][j] ending_index_s1 = i # If there is no common substring, return an empty string if length_of_longest == 0: return \\"\\" # The longest common substring longest_substring = s1[ending_index_s1 - length_of_longest: ending_index_s1] return longest_substring"},{"question":"You are tasked with simulating a basic version of the board game \\"Snake and Ladders\\" using Python. Your objective is to write a function `simulate_game` that simulates a single playthrough of the game for one player and returns the number of dice rolls it took for the player to finish the game. The game board has 100 squares, and certain squares contain either a snake or a ladder. Landing on a square with a ladder will move the player up to a higher-numbered square, while landing on a square with a snake will move the player down to a lower-numbered square. The player starts at square 1 and wins by reaching square 100 exactly (if a roll overshoots 100, the player stays in place). Requirements: 1. Use a Python dictionary to represent the snakes and ladders. 2. Use the `random` module to simulate dice rolls, where a dice roll yields an integer from 1 to 6 (inclusive). 3. The function should: - Initialize the player at square 1. - Continue rolling the dice and moving the player accordingly until the player exactly reaches square 100. - Return the total number of dice rolls taken to reach square 100. Function Signature ```python def simulate_game(snakes: dict, ladders: dict) -> int: ``` Example Usage: ```python # Example snakes and ladders configuration snakes = {16: 6, 47: 26, 49: 11, 56: 53, 62: 19, 64: 60, 87: 24, 93: 73, 95: 75, 98: 78} ladders = {1: 38, 4: 14, 9: 31, 21: 42, 28: 84, 36: 44, 51: 67, 71: 91, 80: 100} number_of_dice_rolls = simulate_game(snakes, ladders) print(f\\"It took {number_of_dice_rolls} dice rolls to finish the game.\\") ``` In this example, the function `simulate_game` will simulate a single game and print the number of dice rolls taken for the player to reach square 100.","solution":"import random def simulate_game(snakes: dict, ladders: dict) -> int: position = 1 rolls = 0 while position < 100: roll = random.randint(1, 6) new_position = position + roll if new_position > 100: new_position = position # Check for snakes or ladders if new_position in snakes: new_position = snakes[new_position] elif new_position in ladders: new_position = ladders[new_position] position = new_position rolls += 1 return rolls"},{"question":"You are requested to write a function named `rotate_matrix` in Python, which rotates an (n times 3) matrix around the specified axis by a given angle. The function will rotate points in a 3D space where the matrix represents coordinates of the points. **Function Signature:** ```python def rotate_matrix(matrix: np.ndarray, axis: str, angle: float) -> np.ndarray: ``` **Parameters:** 1. `matrix` (np.ndarray): An (n times 3) NumPy array representing the input matrix. 2. `axis` (str): A string specifying the axis of rotation (\'x\', \'y\', or \'z\'). 3. `angle` (float): The rotation angle in degrees. **Returns:** - A new (n times 3) NumPy array that has been rotated around the specified axis by the given angle. **Implementation Requirements:** - Utilize the `numpy` library to handle matrix operations. - Convert the angle from degrees to radians using `numpy.radians` function. - Construct rotation matrices for rotations around the `x`, `y`, and `z` axes. - Compute the rotated coordinates by multiplying the original matrix by the corresponding rotation matrix. - The rotation should be performed counterclockwise when looking along the specified axis towards the origin. **Example:** ```python import numpy as np def rotate_matrix(matrix: np.ndarray, axis: str, angle: float) -> np.ndarray: angle_rad = np.radians(angle) if axis == \'x\': rotation_matrix = np.array([ [1, 0, 0], [0, np.cos(angle_rad), -np.sin(angle_rad)], [0, np.sin(angle_rad), np.cos(angle_rad)] ]) elif axis == \'y\': rotation_matrix = np.array([ [np.cos(angle_rad), 0, np.sin(angle_rad)], [0, 1, 0], [-np.sin(angle_rad), 0, np.cos(angle_rad)] ]) elif axis == \'z\': rotation_matrix = np.array([ [np.cos(angle_rad), -np.sin(angle_rad), 0], [np.sin(angle_rad), np.cos(angle_rad), 0], [0, 0, 1] ]) else: raise ValueError(\\"Invalid axis. Choose from \'x\', \'y\', or \'z\'.\\") rotated_matrix = matrix.dot(rotation_matrix) return rotated_matrix # Matrix before rotation matrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) # Rotation parameters axis = \'z\' angle = 90 rotated_matrix = rotate_matrix(matrix, axis, angle) print(rotated_matrix) ``` **Output:** ``` [[ 0. -1. 0.] [ 1. 0. 0.] [ 0. 0. 1.]] ```","solution":"import numpy as np def rotate_matrix(matrix: np.ndarray, axis: str, angle: float) -> np.ndarray: Rotates an n x 3 matrix around the specified axis by a given angle. Parameters: matrix (np.ndarray): An n x 3 NumPy array representing the input matrix. axis (str): A string specifying the axis of rotation (\'x\', \'y\', or \'z\'). angle (float): The rotation angle in degrees. Returns: np.ndarray: A new n x 3 NumPy array that has been rotated around the specified axis by the given angle. angle_rad = np.radians(angle) if axis == \'x\': rotation_matrix = np.array([ [1, 0, 0], [0, np.cos(angle_rad), -np.sin(angle_rad)], [0, np.sin(angle_rad), np.cos(angle_rad)] ]) elif axis == \'y\': rotation_matrix = np.array([ [np.cos(angle_rad), 0, np.sin(angle_rad)], [0, 1, 0], [-np.sin(angle_rad), 0, np.cos(angle_rad)] ]) elif axis == \'z\': rotation_matrix = np.array([ [np.cos(angle_rad), -np.sin(angle_rad), 0], [np.sin(angle_rad), np.cos(angle_rad), 0], [0, 0, 1] ]) else: raise ValueError(\\"Invalid axis. Choose from \'x\', \'y\', or \'z\'.\\") rotated_matrix = matrix.dot(rotation_matrix) return rotated_matrix"},{"question":"In this problem, you will create a function named `calculate_product_sales` to interact with an SQLite database and retrieve sales information based on user input. This exercise will help you practice database operations in Python, focusing on connecting to a database, executing SQL queries safely, and processing the results. Your function `calculate_product_sales` should prompt the user to enter a product name, and then perform the following actions: 1. **Connect to the Database**: Use the provided database file `sales_data.db`. 2. **Retrieve Sales Data**: Search for all sales records in the `sales` table where the `product_name` column matches the user input. Print each matching record, including the sale date, product name, and amount. 3. **Calculate Total Sales**: Sum the sales amount for the given product name and print the total with a specific message. Requirements: - Use the Python `sqlite3` library to handle database interaction. - Ensure SQL queries are executed safely using parameters to avoid SQL injection. - Properly handle any potential exceptions that may occur during database operations and print appropriate error messages. - Assume that the database and table exist and are formatted correctly. **Function Signature:** ```python def calculate_product_sales(): pass ```","solution":"import sqlite3 def calculate_product_sales(): Prompts the user for a product name, connects to the database \'sales_data.db\', retrieves sales data for the given product, and calculates the total sales amount. database = \'sales_data.db\' # Get product name input from the user product_name = input(\\"Enter the product name: \\") try: # Connect to the database conn = sqlite3.connect(database) cursor = conn.cursor() # Retrieve sales data for the given product query = \\"SELECT sale_date, product_name, amount FROM sales WHERE product_name = ?\\" cursor.execute(query, (product_name,)) rows = cursor.fetchall() # Print each matching record and calculate total sales total_sales = 0 for row in rows: print(f\\"Sale Date: {row[0]}, Product Name: {row[1]}, Amount: {row[2]}\\") total_sales += row[2] # Print the total sales amount print(f\\"Total sales amount for \'{product_name}\': {total_sales}\\") except sqlite3.Error as e: print(f\\"An error occurred: {e}\\") finally: if conn: conn.close()"},{"question":"You are required to create a function `find_unique_subsets(array)` that generates all unique subsets of a given array of numbers. Each subset should be in non-decreasing order, and the function should ensure that there are no duplicate subsets. # Specifications: 1. **Function Name**: `find_unique_subsets` 2. **Inputs**: - `array` (list of integers): A list of integers which may contain duplicates. 3. **Output**: - A list of lists, where each list is a unique subset of `array`, ordered in non-decreasing order and the subsets themselves are ordered lexicographically based on their contents. # Examples: ```python find_unique_subsets([1, 2, 2]) # Output: [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]] find_unique_subsets([4, 4, 4, 1, 4]) # Output: [[], [1], [1, 4], [1, 4, 4], [1, 4, 4, 4], [1, 4, 4, 4, 4], [4], [4, 4], [4, 4, 4], [4, 4, 4, 4]] find_unique_subsets([3, 3, 0, 3]) # Output: [[], [0], [0, 3], [0, 3, 3], [0, 3, 3, 3], [3], [3, 3], [3, 3, 3]] ``` # Conditions: 1. The solution must generate all possible subsets, including the empty set and the set itself. 2. Subsets within the result should not have any duplicates and should be sorted in non-decreasing order. 3. The result list should be sorted lexicographically by the subset contents. # Hints: 1. Consider using a backtracking approach to generate the subsets. 2. Utilize sorting and a visited set to handle duplicates effectively. Note: Use Python standard library functions whenever necessary.","solution":"def find_unique_subsets(array): Generates all unique subsets of a given array of numbers. Each subset is in non-decreasing order, and the function ensures that there are no duplicate subsets. :param array: List[int] - list of integers which may contain duplicates :return: List[List[int]] - list of unique subsets in lexicographical order def backtrack(start, path): subsets.append(path) for i in range(start, len(array)): if i > start and array[i] == array[i-1]: continue backtrack(i + 1, path + [array[i]]) array.sort() subsets = [] backtrack(0, []) return subsets"},{"question":"**Given an integer `n`, implement a function `is_symmetric(n)` that checks whether the decimal representation of `n` is symmetric. A number is considered symmetric if it reads the same forwards and backwards. # Requirements: - Convert the integer `n` to its string representation. - Check if the string representation is equal to its reverse. # Function Definition: ```python def is_symmetric(n): # Your code here ``` # Input: - `n` (int): A non-negative integer. # Output: - Returns `True` if the number is symmetric, `False` otherwise. # Examples: ```python print(is_symmetric(121)) # Output: True (reads the same forwards and backwards) print(is_symmetric(123)) # Output: False (does not read the same forwards and backwards) print(is_symmetric(1221)) # Output: True (reads the same forwards and backwards) print(is_symmetric(10)) # Output: False (does not read the same forwards and backwards) ```","solution":"def is_symmetric(n): Checks whether the decimal representation of n is symmetric. :param n: Integer, the number to check :return: Boolean, True if the number is symmetric, False otherwise # Convert the number to string str_n = str(n) # Check if the string is equal to its reverse return str_n == str_n[::-1]"},{"question":"You are required to create a function `find_palindromes(words)` that takes a list of strings called `words` and returns a list containing only the words that are palindromes. A palindrome is a word that reads the same backward as forward, irrespective of whether it is uppercase or lowercase. Your function should be case-insensitive but must return the words in their original case. Your task is to implement the required functionality in the `find_palindromes` function by following these steps: 1. Iterate through each word in the list. 2. Normalize the word to a common case (lowercase or uppercase) for comparison. 3. Check if the normalized word reads the same forward and backward. 4. Collect words that are palindromes into a result list, retaining their original case. 5. Return the result list. **Function Signature:** `def find_palindromes(words: list[str]) -> list[str]` # Example Usage ```python words = [\\"Racecar\\", \\"Level\\", \\"world\\", \\"Deified\\", \\"Python\\", \\"civic\\"] palindromes = find_palindromes(words) print(palindromes) ``` Expected Output: ``` [\'Racecar\', \'Level\', \'Deified\', \'civic\'] ``` **Note:** The above function should handle mixed-case words and still be able to identify them as palindromes. Hint: Utilize string slicing to check for palindrome property efficiently.","solution":"def find_palindromes(words): Returns a list of palindromes from the input list of words. A palindrome is a word that reads the same backward as forward, case insensitive. palindromes = [] for word in words: normalized_word = word.lower() if normalized_word == normalized_word[::-1]: palindromes.append(word) return palindromes"},{"question":"You are tasked with writing a function in Python that calculates the least common multiple (LCM) of a list of integers. The function you need to write is called `compute_lcm`. This function takes one argument: - `numbers` (List[int]): A list of positive integers for which to find the LCM. The least common multiple of two integers `a` and `b` is defined as: [ text{lcm}(a, b) = frac{|a times b|}{text{gcd}(a, b)} ] where `gcd` is the greatest common divisor. Your implementation should extend this to handle a list of integers by iteratively applying the LCM function to pairs of integers. **Function Signature**: ```python from typing import List def compute_lcm(numbers: List[int]) -> int: # Your implementation here ``` **Requirements**: 1. You must use `math.gcd` to find the greatest common divisor. 2. Ensure that the list has more than one integer; if it has fewer, raise a `ValueError`. **Example**: ```python compute_lcm([4, 5]) # Expected output: 20 compute_lcm([4, 5, 10]) # Expected output: 20 compute_lcm([1, 2, 3, 4, 5]) # Expected output: 60 ``` Make sure your function handles the input list correctly and provides accurate results for the given examples.","solution":"from typing import List import math def compute_lcm(numbers: List[int]) -> int: if len(numbers) < 2: raise ValueError(\\"List must contain at least two integers\\") def lcm(a, b): return abs(a * b) // math.gcd(a, b) lcm_result = numbers[0] for number in numbers[1:]: lcm_result = lcm(lcm_result, number) return lcm_result"},{"question":"You are working on a team project that involves analyzing text data for sentiment analysis. One of your tasks is to clean and preprocess the text data before feeding it into a machine learning model. The text data includes various formatting issues, such as extra spaces, special characters, and numbers that need to be removed. Additionally, you need to convert all characters to lowercase to maintain consistency. Write a function called `clean_text` that performs the following: 1. Takes a single parameter, `input_text`, which is a string containing the text to be processed. 2. Removes all numbers from the text. 3. Removes all special characters except for spaces (retain only alphabets and spaces). 4. Converts all characters to lowercase. 5. Removes any leading, trailing, or multiple consecutive spaces, ensuring that the words are separated by only a single space. You may find the following `re` (Regular Expression) functions helpful: `re.sub` and `re.compile`. Here is an example of how the function might be called: ```python input_text = \\"Hello!!! This is an example123 text with extra spaces, special #characters, and 123NUMBERS.\\" cleaned_text = clean_text(input_text) print(cleaned_text) # Output should be: \\"hello this is an example text with extra spaces special characters and numbers\\" ``` Implement the `clean_text` function using Python.","solution":"import re def clean_text(input_text): Cleans the input text according to the specified rules: - Removes all numbers. - Removes all special characters except for spaces (retain only alphabets and spaces). - Converts all characters to lowercase. - Removes any leading, trailing, or multiple consecutive spaces. :param input_text: string :return: cleaned string # Remove numbers text_no_numbers = re.sub(r\'d+\', \'\', input_text) # Remove special characters except spaces text_no_special_chars = re.sub(r\'[^a-zA-Zs]\', \'\', text_no_numbers) # Convert to lowercase text_lowercase = text_no_special_chars.lower() # Remove leading, trailing, and multiple consecutive spaces clean_text = re.sub(r\'s+\', \' \', text_lowercase).strip() return clean_text"},{"question":"You are required to write a function called `decision_tree_classifier` that trains a Decision Tree classifier using the `sklearn` library and returns the accuracy of the model on the test data. The function should take as input a dataframe (`df`) with the last column as the target variable, along with a test size parameter (`test_size`). **Parameters:** 1. `df` (pandas DataFrame): A dataframe where the last column is the target variable and the rest are features. 2. `test_size` (float): The proportion of the dataset to include in the test split (e.g., 0.2 for an 80-20 train-test split). **Function Signature:** ```python def decision_tree_classifier(df: pd.DataFrame, test_size: float) -> float: ``` **Requirements:** 1. Use `sklearn.model_selection.train_test_split` to split the dataframe into train and test sets. 2. Train a Decision Tree classifier using `sklearn.tree.DecisionTreeClassifier`. 3. Ensure the model is trained on the train set and tested on the test set. 4. Return the accuracy score of the model on the test set as a float. **Example Usage:** ```python import pandas as pd # Sample data data = { \'feature1\': [1, 2, 3, 4, 5], \'feature2\': [5, 4, 3, 2, 1], \'target\': [0, 1, 0, 1, 0] } df = pd.DataFrame(data) # Train the Decision Tree model and get the accuracy accuracy = decision_tree_classifier(df, 0.2) print(f\\"Accuracy: {accuracy}\\") ``` **Expected Output:** The expected output is a float representing the accuracy of the Decision Tree model on the test set, for example, 0.5.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score def decision_tree_classifier(df: pd.DataFrame, test_size: float) -> float: Trains a Decision Tree classifier and returns the accuracy on the test data. Parameters: df (pd.DataFrame): Dataframe with the last column as the target variable. test_size (float): The proportion of the dataset to include in the test split. Returns: float: Accuracy of the classifier on the test data. # Separate features and target X = df.iloc[:, :-1] y = df.iloc[:, -1] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42) # Train the Decision Tree classifier classifier = DecisionTreeClassifier(random_state=42) classifier.fit(X_train, y_train) # Predict on the test set y_pred = classifier.predict(X_test) # Calculate and return the accuracy accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"Write a function that receives a string containing a sentence and returns a dictionary where keys are unique words in the sentence and values are the counts of how often each word appears. This task tests the ability to manipulate strings, use loops, and understand data structures like dictionaries. The function should output: dict: A dictionary with words as keys and their frequencies as values. You should write self-contained code starting with: ``` def word_count(sentence): ```","solution":"def word_count(sentence): Returns a dictionary with words as keys and their frequencies as values. words = sentence.split() word_freq = {} for word in words: word = word.lower().strip(\'.,!?:;\'\\"()[]{}\') # Normalizing the word if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"You are tasked with implementing a scheduling algorithm to find the maximum number of non-overlapping intervals in a given list of intervals. This is an application of the \\"Activity Selection Problem,\\" a well-known Greedy algorithm problem. Write a function `max_non_overlapping_intervals(intervals)` that takes a list of tuples, where each tuple represents an interval. Each tuple contains two integers representing the start and end times of the interval. The goal is to choose the maximum number of non-overlapping intervals. **Function Signature:** ```python def max_non_overlapping_intervals(intervals: List[Tuple[int, int]]) -> int: ``` **Input:** - `intervals` (a list of tuples): Each tuple contains two integers, where the first integer is the start time and the second integer is the end time of the interval. **Output:** - An integer representing the maximum number of non-overlapping intervals that can be selected. **Examples:** ```python max_non_overlapping_intervals([(1, 3), (2, 4), (3, 5)]) ``` This should return: ```python 2 ``` **Explanation:** - Two of the maximum non-overlapping intervals that can be chosen are `(1, 3)` and `(3, 5)`. ```python max_non_overlapping_intervals([(7, 9), (0, 1), (4, 5), (8, 10), (5, 7)]) ``` This should return: ```python 4 ``` **Explanation:** - Four of the maximum non-overlapping intervals that can be chosen are `(0, 1)`, `(4, 5)`, `(5, 7)`, and `(7, 9)`. **Constraints:** - Each interval\'s start and end times are such that `0 <= start < end <= 10^5`. - The input list may contain up to `10^4` intervals. - The intervals may not necessarily be sorted.","solution":"from typing import List, Tuple def max_non_overlapping_intervals(intervals: List[Tuple[int, int]]) -> int: Finds the maximum number of non-overlapping intervals. :param intervals: List of tuples, where each tuple contains two integers representing the start and end times of an interval. :return: The maximum number of non-overlapping intervals. # Sort the intervals based on their end time. intervals.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping intervals. count = 0 # Initialize the end time of the last added interval to negative infinity. end_time = float(\'-inf\') # Iterate through each interval. for interval in intervals: # If the start time of the current interval is greater than # the end time of the last added interval, it means they do not overlap. if interval[0] >= end_time: # We can include this interval in our selection. count += 1 # Update the end time. end_time = interval[1] return count"},{"question":"Design a Python function called `aggregate_scores` which takes a list of dictionaries representing scores from multiple tests and returns a dictionary with the average, minimum, and maximum scores for each test. Each dictionary in the input list represents a student and contains their name along with their scores in different tests. The output dictionary should use the test names as keys and another dictionary as values which contain the keys `average`, `min`, and `max` with the corresponding calculated values. # Requirements: - Calculate the average score for each test. - Determine the minimum score for each test. - Determine the maximum score for each test. - The output dictionary should contain the test names as the keys and dictionaries containing `average`, `min`, and `max` as the values. # Parameters: - `sList` (List[Dict[str, Any]]): A list where each entry is a dictionary containing keys `name` (the name of the student) and various tests with their respective scores. # Example: ```python sList = [ {\\"name\\": \\"Alice\\", \\"test1\\": 85, \\"test2\\": 90}, {\\"name\\": \\"Bob\\", \\"test1\\": 78, \\"test2\\": 82}, {\\"name\\": \\"Charlie\\", \\"test1\\": 92, \\"test2\\": 88} ] result = aggregate_scores(sList) print(result) ``` This should return: ```python { \\"test1\\": {\\"average\\": 85.0, \\"min\\": 78, \\"max\\": 92}, \\"test2\\": {\\"average\\": 86.67, \\"min\\": 82, \\"max\\": 90} } ``` Note: The average scores should be rounded to two decimal places. Make sure to handle the case where not all students have scores for every test. In such cases, the function should only consider the available scores.","solution":"def aggregate_scores(sList): from collections import defaultdict import numpy as np # Initialize data structure to hold scores by each test scores = defaultdict(list) # Collect all scores per test for student in sList: for key, value in student.items(): if key != \'name\': scores[key].append(value) # Create result dictionary result = {} for test, vals in scores.items(): average = np.mean(vals) test_stats = { \'average\': round(average, 2), \'min\': min(vals), \'max\': max(vals) } result[test] = test_stats return result"},{"question":"You are tasked with writing a function named `merge_and_sort_files`. This function will read from multiple text files in a given directory, merge their contents, and sort the lines alphabetically before writing them to a new output file. All files in the directory should be processed, and the resulting sorted content should be stored in a file named `merged_sorted.txt`. Specific Requirements: 1. **Function Name:** `merge_and_sort_files` 2. **Inputs:** - `input_dir`: A string representing the path to the directory containing the text files. 3. **Output:** The function does not need to return anything, but it should create a new file named `merged_sorted.txt` in the `input_dir` directory containing the sorted content from all the text files. Functionality: 1. The function should list all files in the given directory using `os.listdir`. 2. It should read the contents of each file in the directory. 3. It should then merge and sort the lines from all files and write the sorted lines to a new file named `merged_sorted.txt` in the directory. 4. Non-text files and directories should be ignored. Usage Example: ```python input_dir = \\"path/to/your/text/files/directory\\" merge_and_sort_files(input_dir) ``` By calling this function, the script will read all text files in the specified directory, merge their contents, sort the lines alphabetically, and create (or overwrite) a file named `merged_sorted.txt` with the sorted content. Requirements: - You must use Python\'s `os` module, especially `os.listdir` to list directory contents and `os.path.isfile` to check if the pertinent items are files. - Use file handling methods to read and write the contents of the files.","solution":"import os def merge_and_sort_files(input_dir): Read all text files in a directory, merge their contents, sort the lines alphabetically, and write to a file named \'merged_sorted.txt\' in the same directory. all_lines = [] for filename in os.listdir(input_dir): filepath = os.path.join(input_dir, filename) if os.path.isfile(filepath) and filename.endswith(\'.txt\'): with open(filepath, \'r\') as file: all_lines.extend(file.readlines()) sorted_lines = sorted(all_lines) output_filepath = os.path.join(input_dir, \'merged_sorted.txt\') with open(output_filepath, \'w\') as output_file: output_file.writelines(sorted_lines)"},{"question":"In this problem, you are required to create a function `merge_sorted_files` that merges contents of multiple sorted text files into a single sorted output file. Each file contains integers sorted in ascending order, one per line. You will implement the following functionalities within your function: 1. **Handle Input Arguments**: Your function should take three parameters: - `input_files`: A list of file names, each containing sorted integers. - `output_file`: Name of the output file where the merged result should be saved. - `temp_dir`: A directory name for temporary files during processing (optional). 2. **Validation**: The function should: - Ensure all input files exist and are readable. - Ensure the specified directory for temporary files (if provided) exists. 3. **Merging Process**: - Read integers from each input file and merge them into a single sorted stream. - Write the sorted integers to the `output_file`. # Function Signature ```python def merge_sorted_files(input_files: List[str], output_file: str, temp_dir: str = \\"\\") -> None: pass ``` # Example Usage Suppose you have three files `file1.txt`, `file2.txt`, and `file3.txt`: - `file1.txt` contains: ``` 1 4 5 ``` - `file2.txt` contains: ``` 2 3 6 ``` - `file3.txt` contains: ``` 0 7 8 ``` Running the function should merge these into `output_file.txt` with the contents: ``` 0 1 2 3 4 5 6 7 8 ``` # Constraints - Handle large files efficiently to avoid memory issues. - Ensure the output file is written in correct sorted order. - Handle any exceptions or errors gracefully and provide meaningful error messages.","solution":"import os import heapq def merge_sorted_files(input_files, output_file, temp_dir=\\"\\"): Merges sorted integers from multiple files into a single sorted output file. Parameters: input_files (List[str]): List of file names containing sorted integers. output_file (str): Name of the output file where merged results will be saved. temp_dir (str): A directory name for temporary files during processing (optional). Returns: None # Validate input files for file in input_files: if not os.path.isfile(file): raise FileNotFoundError(f\\"Input file \'{file}\' does not exist or is not a file.\\") if temp_dir and not os.path.isdir(temp_dir): raise NotADirectoryError(f\\"Temporary directory \'{temp_dir}\' does not exist or is not a directory.\\") # Using a min-heap to merge the files min_heap = [] file_pointers = [] # Initialize file handles and heap try: for file in input_files: fp = open(file, \'r\') file_pointers.append(fp) number = fp.readline().strip() if number: heapq.heappush(min_heap, (int(number), file)) with open(output_file, \'w\') as output_fp: while min_heap: # Pop the smallest element from the heap number, file_name = heapq.heappop(min_heap) output_fp.write(f\\"{number}n\\") # Read the next number from the respective file for fp in file_pointers: if fp.name == file_name: next_number = fp.readline().strip() if next_number: heapq.heappush(min_heap, (int(next_number), file_name)) finally: # Close all file pointers for fp in file_pointers: fp.close()"},{"question":"Implement a function that simulates the movement of a projectile launched with a given initial velocity and angle, using basic physics equations. The function should compute and plot the projectile\'s trajectory, and return the maximum height and the horizontal distance traveled. The function should output with: tuple: A tuple containing the following: max_height (float): The maximum height reached by the projectile. horizontal_distance (float): The total horizontal distance traveled by the projectile. ax (matplotlib.axes._axes.Axes): Axes object of the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def projectile_motion(velocity, angle, g=9.81): ```","solution":"import numpy as np import matplotlib.pyplot as plt def projectile_motion(velocity, angle, g=9.81): Simulates the movement of a projectile launched with a given initial velocity and angle. Parameters: - velocity (float): Initial velocity of the projectile (m/s) - angle (float): Launch angle of the projectile (degrees) - g (float): Acceleration due to gravity (m/s^2), default is 9.81 Returns: - max_height (float): The maximum height reached by the projectile. - horizontal_distance (float): The total horizontal distance traveled by the projectile. - ax (matplotlib.axes._axes.Axes): Axes object of the plot. # Convert angle to radians angle_rad = np.radians(angle) # Initial velocity components vx = velocity * np.cos(angle_rad) vy = velocity * np.sin(angle_rad) # Time of flight total_time = 2 * vy / g # Time intervals t = np.linspace(0, total_time, num=1000) # X and Y coordinates x = vx * t y = vy * t - 0.5 * g * t**2 # Max height max_height = (vy**2) / (2 * g) # Horizontal distance horizontal_distance = vx * total_time # Plot the trajectory fig, ax = plt.subplots() ax.plot(x, y) ax.set_title(\'Projectile Motion\') ax.set_xlabel(\'Horizontal Distance (m)\') ax.set_ylabel(\'Vertical Height (m)\') return max_height, horizontal_distance, ax"},{"question":"You are required to write a function that generates a list of prime numbers up to a specified number `n` using the Sieve of Eratosthenes algorithm. This is a common algorithm to find all prime numbers in a range efficiently. The function to be written is: ```python def generate_primes(n: int) -> List[int]: Generates a list of all prime numbers up to and including \'n\'. :param n: The upper limit (inclusive) to generate prime numbers. :type n: int :return: A list of prime numbers up to \'n\'. :rtype: List[int] ``` In this function: 1. The parameter `n` is an integer representing the upper limit (inclusive) to generate prime numbers. 2. You need to use the Sieve of Eratosthenes algorithm to generate the prime numbers. 3. Initialize a list (or array) that will hold boolean values indicating whether a number is prime. 4. Mark non-prime numbers in the list and then extract the prime numbers from the list. Here\'s an example of how the function could be used: ```python n = 30 primes = generate_primes(n) print(primes) # Output should be: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ``` # Note: - You should handle edge cases, such as when `n` is less than 2. - The implementation should be efficient in terms of time complexity (O(n log log n)).","solution":"from typing import List def generate_primes(n: int) -> List[int]: Generates a list of all prime numbers up to and including \'n\'. :param n: The upper limit (inclusive) to generate prime numbers. :type n: int :return: A list of prime numbers up to \'n\'. :rtype: List[int] if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(2, n + 1) if is_prime[i]]"},{"question":"Create a function that: 1. Reads a CSV file and groups the data by a specified column, 2. Computes the sum of numerical values for each group, and 3. Returns the results as a dictionary where keys are the unique values from the specified column and values are the sums of numerical columns for each group. Note that: If the CSV file does not exist, raise a FileNotFoundError with the message \\"CSV file not found.\\" The function should output a dictionary of grouped sums. Example: input: ``` Name,Age,Salary Alice,30,100000 Bob,25,80000 Alice,31,110000 Bob,26,85000 ``` task_func(\\"example.csv\\", \\"Name\\") output: ``` { \'Alice\': {\'Age\': 61, \'Salary\': 210000}, \'Bob\': {\'Age\': 51, \'Salary\': 165000} } ``` You should write self-contained code starting with: ``` import csv import os def task_func(file_path, group_column): ```","solution":"import csv import os from collections import defaultdict def task_func(file_path, group_column): Reads a CSV file, groups the data by a specified column, computes the sum of numerical values for each group, and returns the results as a dictionary. if not os.path.exists(file_path): raise FileNotFoundError(\\"CSV file not found.\\") grouped_data = defaultdict(lambda: defaultdict(float)) with open(file_path, mode=\'r\') as file: csv_reader = csv.DictReader(file) for row in csv_reader: group_value = row[group_column] for key, value in row.items(): if key != group_column and value.isdigit(): grouped_data[group_value][key] += float(value) # Convert nested defaultdict to a regular dictionary final_data = {k: dict(v) for k, v in grouped_data.items()} return final_data"},{"question":"You are asked to implement a Python function named `find_kth_largest` that takes as input a list of integers (`nums`) and an integer (`k`). The goal of this function is to find the k-th largest element in the list. The function should follow these steps: 1. Use the Quickselect algorithm to partition the list. 2. Select the partition such that the k-th largest element is found efficiently. 3. Return the k-th largest element. **Function Signature:** ```python def find_kth_largest(nums: List[int], k: int) -> int: ``` **Example:** ```python nums = [3, 2, 1, 5, 6, 4] k = 2 result = find_kth_largest(nums, k) print(result) # Output should be 5 nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 result = find_kth_largest(nums, k) print(result) # Output should be 4 ```","solution":"from typing import List def partition(nums: List[int], left: int, right: int, pivot_index: int) -> int: pivot_value = nums[pivot_index] nums[pivot_index], nums[right] = nums[right], nums[pivot_index] # Move pivot to end store_index = left for i in range(left, right): if nums[i] < pivot_value: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 nums[right], nums[store_index] = nums[store_index], nums[right] # Move pivot to its final place return store_index def quickselect(nums: List[int], left: int, right: int, k: int) -> int: if left == right: # If the list contains only one element, return nums[left] # return that element pivot_index = left + (right - left) // 2 # Select a pivotIndex between left and right pivot_index = partition(nums, left, right, pivot_index) if k == pivot_index: return nums[k] elif k < pivot_index: return quickselect(nums, left, pivot_index - 1, k) else: return quickselect(nums, pivot_index + 1, right, k) def find_kth_largest(nums: List[int], k: int) -> int: size = len(nums) # kth largest is (size - k)th smallest in a 0-indexed array return quickselect(nums, 0, size - 1, size - k)"},{"question":"You are asked to implement a function `animate_plot` that takes a DataFrame and a numeric feature and animates the histogram showing the distribution of values over time. The function should: - Generate a histogram animation using the provided numeric feature. - Create each frame of the animation for a specific timeframe (hour, day, month, etc., depending on the granularity of the data). - Allow the user to specify the timeframe to be used for creating the animation frames. - Overlay the mean value of the numeric feature in each frame as a vertical line. For this task, ensure you use the `matplotlib` library for generating the animations. Your function should be named `animate_plot` and adhere to the following signature: ```python def animate_plot(df, feature, timeframe): Create an animated histogram for a specified numeric feature over time. Parameters: df (DataFrame): A pandas DataFrame that contains the data, must include a timestamp column for time reference. feature (str): The name of the numeric feature/column present in `df` that needs to be plotted. timeframe (str): The timeframe by which the animation frames are generated (e.g., \'hour\', \'day\', \'month\'). Returns: None # Input: - `df`: A `pandas` DataFrame containing customer data, must include a timestamp column. - `feature`: The name of the numeric feature/column to create the histogram for. - `timeframe`: The timeframe string indicating the granularity of the frames (\'hour\', \'day\', \'month\', etc.). # Output: - This function does not return any value but will display an animated histogram graphing the distribution of the numeric feature over time. # Requirements: - Utilize `matplotlib` to create and animate the histograms. - Overlay the mean of the numeric feature with a vertical line in each frame. - Handle different time granularities specified by the `timeframe` parameter. # Example Usage: ```python import pandas as pd # Sample data containing a timestamp and a numeric feature data = { \'timestamp\': pd.date_range(start=\'1/1/2022\', periods=100, freq=\'D\'), \'value\': [i + (i % 10) for i in range(100)] } df = pd.DataFrame(data) animate_plot(df, feature=\'value\', timeframe=\'day\') ``` You can use the following code snippet to start creating animated histograms. Ensure proper handling of cases where the timeframe is not granular enough to generate different frames for the animation.","solution":"import pandas as pd import matplotlib.pyplot as plt import matplotlib.animation as animation import numpy as np def animate_plot(df, feature, timeframe): Create an animated histogram for a specified numeric feature over time. Parameters: df (DataFrame): A pandas DataFrame that contains the data, must include a timestamp column for time reference. feature (str): The name of the numeric feature/column present in `df` that needs to be plotted. timeframe (str): The timeframe by which the animation frames are generated (e.g., \'hour\', \'day\', \'month\'). Returns: None # Ensure timestamp is datetime type df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Set timeframe grouping if timeframe == \'hour\': df[\'timeframe\'] = df[\'timestamp\'].dt.floor(\'H\') elif timeframe == \'day\': df[\'timeframe\'] = df[\'timestamp\'].dt.floor(\'D\') elif timeframe == \'month\': df[\'timeframe\'] = df[\'timestamp\'].dt.to_period(\'M\') else: raise ValueError(\\"Unsupported timeframe format. Use \'hour\', \'day\', or \'month\'.\\") # Create the figure and axis fig, ax = plt.subplots() def update(frame): current_time = sorted_frames[frame] current_data = df[df[\'timeframe\'] == current_time][feature] # Clear axis to redraw plot ax.clear() # Plot histogram ax.hist(current_data, bins=15, color=\'blue\', alpha=0.7) # Plot mean line mean_val = current_data.mean() ax.axvline(mean_val, color=\'red\', linestyle=\'dashed\', linewidth=2) # Set title ax.set_title(f\\"{feature} distribution for {current_time}\\") sorted_frames = sorted(df[\'timeframe\'].unique()) ani = animation.FuncAnimation(fig, update, frames=len(sorted_frames), repeat=False) plt.show()"},{"question":"You are required to write a function named `calculate_average_grades` which calculates the average grade for each student listed in a CSV formatted file. Each student has a CSV file named after them (e.g., `studentname.csv`) stored in a directory defined by `students_path`. The CSV file contains at least two columns: `subject` and `grade`. The function should read the grades from the file, calculate the average grade, and return it. The steps you need to follow are: 1. Open the CSV file associated with the student name. 2. Read the grades from the file. 3. Calculate the average grade. 4. Return the average grade. You must use the `csv` library for reading CSV data. # Function Signature ```python def calculate_average_grades(name: str) -> float: # Your code here ``` # Parameters - `name` (str): The name of the student. # Returns - `average_grade` (float): The calculated average grade of the student. # Example Assume `students_path` is set to `\'/path/to/students\'` and you have a student file `\'/path/to/students/janedoe.csv\'` with the following content initially: ```csv subject,grade Math,80 English,90 History,85 ``` Calling `calculate_average_grades(\'janedoe\')` should return: ```python 85.0 ``` Make sure you handle proper file opening and closing within your function.","solution":"import csv import os students_path = \'/path/to/students\' def calculate_average_grades(name: str) -> float: Calculates the average grade of a student given their name by reading the grades from a CSV file. Parameters: name (str): The name of the student. Returns: float: The average grade of the student. csv_file_path = os.path.join(students_path, f\\"{name}.csv\\") total_grades = 0 total_subjects = 0 with open(csv_file_path, mode=\'r\') as csvfile: csvreader = csv.DictReader(csvfile) for row in csvreader: total_grades += int(row[\'grade\']) total_subjects += 1 if total_subjects == 0: return 0.0 average_grade = total_grades / total_subjects return average_grade"},{"question":"In this problem, we are going to implement a simple parser to evaluate arithmetic expressions given as strings. The input expressions will contain non-negative integers and the operators `+`, `-`, `*`, and `/`. The input might also contain parentheses to indicate the order of operations. Your task is to evaluate the expression following the standard operator precedence and return the result. You are required to implement a Python function `evaluate_expression` that takes an arithmetic expression string and returns its evaluated result. The function signature should be: ```python def evaluate_expression(expression: str) -> float: # Your code here pass ``` # Input: - `expression`: A string representing the arithmetic expression. It will contain non-negative integers, the operators `+`, `-`, `*`, `/`, and parentheses `()`. The input string will be a valid expression, and do not contain any spaces. # Output: - The function should return a float representing the result of the evaluated expression. # Example: ```python print(evaluate_expression(\\"3+2*2\\")) # Output: 7.0 print(evaluate_expression(\\" 3/2 \\")) # Output: 1.5 print(evaluate_expression(\\"3+5 / 2\\")) # Output: 5.5 print(evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\")) # Output: 23.0 ``` # Constraints: - Use only basic Python data types and control structures. - Do not use the `eval` function or any third-party libraries for arithmetic evaluation. - Your function should handle operator precedence correctly (i.e., `*` and `/` have higher precedence than `+` and `-`). - Your function should handle parentheses correctly to override the default operator precedence where specified.","solution":"def evaluate_expression(expression: str) -> float: def operate(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a / b def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_ops(values, ops): right = values.pop() left = values.pop() op = ops.pop() values.append(operate(left, right, op)) def evaluate(expression): values = [] ops = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': ops.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 # since i will be incremented in next step elif expression[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': apply_ops(values, ops) ops.pop() # remove \'(\' else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(expression[i])): apply_ops(values, ops) ops.append(expression[i]) i += 1 while len(ops) != 0: apply_ops(values, ops) return values[-1] return evaluate(expression)"},{"question":"You are tasked with designing a Python function that normalizes a dictionary by combining all values associated with duplicate keys. The function should be named `normalize_dict` and will take one parameter: 1. `input_dict`: A dictionary where keys are strings, and values are lists of integers. The `normalize_dict` function should follow these steps: - Identify keys that are duplicate by comparing them case-insensitively. - Combine the values of these keys into a single list of integers. - Ensure that the resulting dictionary keys are all in lowercase. - Ensure that the values associated with each key in the resulting dictionary are unique and sorted in ascending order. Here is a template to help you get started: ```python def normalize_dict(input_dict): # your implementation pass ``` **Example Input:** ```python input_dict = { \'A\': [1, 2, 3], \'a\': [4, 5], \'B\': [6, 7], \'b\': [8], \'C\': [9] } print(normalize_dict(input_dict)) ``` **Example Output:** ``` { \'a\': [1, 2, 3, 4, 5], \'b\': [6, 7, 8], \'c\': [9] } ``` **Constraints:** - The input dictionary values will be non-empty lists of integers. - The integers within each list will be non-negative and unique within their respective lists. - If there are no duplicate keys when compared case-insensitively, the resultant dictionary should be the same as the input dictionary but with all keys in lowercase.","solution":"def normalize_dict(input_dict): normalized_dict = {} for key, values in input_dict.items(): lower_key = key.lower() if lower_key in normalized_dict: normalized_dict[lower_key].extend(values) else: normalized_dict[lower_key] = values for key in normalized_dict: normalized_dict[key] = sorted(set(normalized_dict[key])) return normalized_dict"},{"question":"You are tasked with writing a function `flip_vertical_numpy` that flips an image vertically using numpy library. The image will be provided as a 3-dimensional numpy array, where the third dimension represents the color channels (Red, Green, Blue). Your function must: 1. Take a 3-dimensional numpy array `img` as input, representing the pixel values of an image. 2. Create a new numpy array `flipped_img` with the same shape as the input image `img`. 3. Flip the image vertically by reversing the order of rows. 4. Return the vertically flipped image as a numpy array. For this problem, you may use numpy array slicing to achieve the vertical flip. **Function Signature:** ```python def flip_vertical_numpy(img: np.ndarray) -> np.ndarray: pass ``` **Example:** ```python import numpy as np import cv2 # Assuming img is a numpy array representing an image img = cv2.imread(\'path_to_your_image.jpg\') # Flip image vertically flipped_img = flip_vertical_numpy(img) # flipped_img is your vertically flipped image as a numpy array ```","solution":"import numpy as np def flip_vertical_numpy(img: np.ndarray) -> np.ndarray: Flips the given image vertically using numpy. Parameters: img (np.ndarray): A 3-dimensional numpy array representing the image. Returns: np.ndarray: The vertically flipped image. # Flipping the image vertically by reversing the rows. flipped_img = img[::-1, :, :] return flipped_img"},{"question":"Design a function `k_means_clustering(X, k, max_iters=100)` that implements the K-means clustering algorithm. Given a dataset `X` of shape `(m, n)`, your task is to assign the `m` points in `X` to one of `k` clusters, and find the `k` centroids that minimize the within-cluster sum of squares (WCSS). You are required to specifically use the following numpy functions in your implementation: `numpy.random.choice`, `numpy.linalg.norm`, `numpy.mean`, and `numpy.zeros`. The algorithm follows these steps: 1. Randomly initialize `k` centroids from the data points in `X`. 2. Alternate between the assignment and update steps: - **Assignment step**: Assign each point to the closest centroid. - **Update step**: Compute the new centroids as the mean of the points assigned to each centroid. 3. The algorithm converges when centroids do not change or after a fixed number of iterations (`max_iters`). The function should return: 1. `centroids`: The final centroid positions as a numpy array of shape `(k, n)`. 2. `labels`: A numpy array of shape `(m,)` containing the cluster index (ranging from 0 to k-1) for each point. **Function Signature:** ```python def k_means_clustering(X: np.array, k: int, max_iters: int = 100) -> Tuple[np.array, np.array]: pass ```","solution":"import numpy as np from typing import Tuple def k_means_clustering(X: np.array, k: int, max_iters: int = 100) -> Tuple[np.array, np.array]: m, n = X.shape centroids = X[np.random.choice(m, k, replace=False)] labels = np.zeros(m, dtype=int) for _ in range(max_iters): # Assignment step for i in range(m): distances = np.linalg.norm(X[i] - centroids, axis=1) labels[i] = np.argmin(distances) # Update step new_centroids = np.zeros((k, n)) for j in range(k): points = X[labels == j] if len(points) > 0: new_centroids[j] = np.mean(points, axis=0) # Check for convergence if np.array_equal(centroids, new_centroids): break centroids = new_centroids return centroids, labels"},{"question":"You are required to implement a function that simulates a simple inventory system for a store. The store keeps track of the quantities of various items it has in stock. Your task is to implement the `Inventory` class, which facilitates adding items, removing items, and checking the stock levels of items. Additionally, the class should handle cases where there are attempts to remove more items than are in stock or attempts to query or remove items that do not exist. # Class Interface `Inventory` - `add_item(item_name: str, quantity: int)` - Adds the specified quantity of the item to the inventory. - If the item does not exist, it adds the item to the inventory with the given quantity. - `remove_item(item_name: str, quantity: int)` - Removes the specified quantity of the item from the inventory. - If the item does not exist or if there are fewer items in stock than the quantity to be removed, raise a `ValueError` with appropriate message. - `check_stock(item_name: str) -> int` - Returns the quantity of the specified item in stock. - If the item does not exist, raise a `ValueError` with the message \\"Item not found\\". # Example Usage: ```python inventory = Inventory() inventory.add_item(\\"apple\\", 5) inventory.add_item(\\"banana\\", 10) inventory.add_item(\\"apple\\", 3) print(inventory.check_stock(\\"apple\\")) # Output: 8 print(inventory.check_stock(\\"banana\\")) # Output: 10 inventory.remove_item(\\"apple\\", 2) print(inventory.check_stock(\\"apple\\")) # Output: 6 try: inventory.remove_item(\\"banana\\", 15) except ValueError as e: print(e) # Output: Not enough stock for item banana try: inventory.check_stock(\\"orange\\") except ValueError as e: print(e) # Output: Item not found ``` # Constraints: - The item names are strings and are case-sensitive. - The quantity values are non-negative integers. - The methods should handle erroneous cases as specified. # Notes: - Ensure that all errors are properly raised with clear messages. - The code should not include any input/output operations outside the methods provided.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_name: str, quantity: int): if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def remove_item(self, item_name: str, quantity: int): if item_name not in self.items: raise ValueError(\\"Item not found\\") if self.items[item_name] < quantity: raise ValueError(f\\"Not enough stock for item {item_name}\\") self.items[item_name] -= quantity if self.items[item_name] == 0: del self.items[item_name] def check_stock(self, item_name: str) -> int: if item_name not in self.items: raise ValueError(\\"Item not found\\") return self.items[item_name]"},{"question":"Implement a function `scramble_string(s1: str, s2: str) -> bool` that determines if a string s2 is a scrambled version of a string s1. A string s2 is considered a scrambled version of string s1 if it can be obtained by recursively partitioning s1 into two non-empty substrings and swapping them any number of times. Parameters: - `s1` (str): The original string. - `s2` (str): The string to be checked if it is a scrambled version of `s1`. Return: - `True` if s2 is a scrambled version of s1, otherwise `False`. Example usage: ```python scramble_string(\\"great\\", \\"rgeat\\") => True scramble_string(\\"abcde\\", \\"caebd\\") => False ``` # Notes: - You can assume that both `s1` and `s2` have the same length and consist of lowercase English letters only. - The strings `s1` and `s2` do not have to be of the same length in intermediate recursive calls. - Use recursive approach to solve the problem.","solution":"def scramble_string(s1: str, s2: str) -> bool: Determines if s2 is a scrambled version of s1. # Base cases if len(s1) != len(s2): return False if s1 == s2: return True if sorted(s1) != sorted(s2): return False # Recursive case n = len(s1) for i in range(1, n): # Check if there is a split such that parts are scramble-compatible if (scramble_string(s1[:i], s2[:i]) and scramble_string(s1[i:], s2[i:])) or (scramble_string(s1[:i], s2[-i:]) and scramble_string(s1[i:], s2[:-i])): return True return False"},{"question":"Track the memory usage of a specific process over a defined period and determine if it surpasses a given threshold, logging an alert if exceeded. Note: The function monitors the memory usage at regular intervals for the specified process, identified by its PID. If the average memory usage of the process exceeds the threshold, log a warning. The check frequency is determined by the \'interval\' parameter, and the total monitoring duration is set by the \'duration\' parameter. The function should output: bool: True after logging an alert if the memory usage exceeds the threshold during the monitoring period, False otherwise. You should write self-contained code starting with: ``` import psutil import time import logging def monitor_memory_usage(pid, threshold, duration, interval=1): ```","solution":"import psutil import time import logging def monitor_memory_usage(pid, threshold, duration, interval=1): Monitors the memory usage of a specific process over a defined period, and logs a warning if the average memory usage exceeds the given threshold. Args: pid (int): Process ID of the process to monitor. threshold (float): Memory usage threshold in megabytes. duration (int): Total time to monitor in seconds. interval (int): Time interval between checks in seconds (default is 1 second). Returns: bool: True if the average memory usage exceeds the threshold, False otherwise. logging.basicConfig(level=logging.WARNING, format=\'%(levelname)s: %(message)s\') total_checks = duration // interval memory_usages = [] for _ in range(total_checks): try: process = psutil.Process(pid) mem_info = process.memory_info() memory_usage = mem_info.rss / (1024 * 1024) # Convert bytes to megabytes memory_usages.append(memory_usage) except (psutil.NoSuchProcess, psutil.AccessDenied): logging.warning(f\\"Process with PID {pid} not found or access denied.\\") return False time.sleep(interval) average_memory_usage = sum(memory_usages) / len(memory_usages) if average_memory_usage > threshold: logging.warning(f\\"Average memory usage ({average_memory_usage:.2f} MB) exceeds the threshold of {threshold} MB.\\") return True return False"},{"question":"You are required to create a Python function named `analyze_logs` that processes a list of log entries and extracts specific metrics. Each log entry is a string in the format \\"TIMESTAMP LEVEL MESSAGE\\", where: - `TIMESTAMP` is a string representing the time at which the log entry was created (formatted as YYYY-MM-DD HH:MM:SS), - `LEVEL` is one of the following strings: \\"INFO\\", \\"WARNING\\", \\"ERROR\\", \\"DEBUG\\", - `MESSAGE` is the actual log message, which can contain spaces. The function will take a single argument, `logs`, which is a list of log entry strings. The function should: 1. Count the total number of log entries. 2. Count the number of entries for each `LEVEL`. 3. Identify the most recent log entry (the one with the latest `TIMESTAMP`). 4. Collect all messages that have `LEVEL` \\"ERROR\\" in a list. The function should return a dictionary with the following structure: ```python { \\"total_entries\\": <int>, \\"level_counts\\": { \\"INFO\\": <int>, \\"WARNING\\": <int>, \\"ERROR\\": <int>, \\"DEBUG\\": <int> }, \\"most_recent_log\\": <str>, \\"error_messages\\": [<str>, ...] } ``` Implement the `analyze_logs` function to fulfill the described functionality.","solution":"from datetime import datetime def analyze_logs(logs): Processes a list of log entries and extracts specific metrics. Args: logs (list): A list of log entry strings. Returns: dict: A dictionary containing the metrics. level_counts = {\'INFO\': 0, \'WARNING\': 0, \'ERROR\': 0, \'DEBUG\': 0} total_entries = 0 most_recent_log = None error_messages = [] most_recent_timestamp = None for log in logs: total_entries += 1 parts = log.split(\' \', 2) timestamp_str = parts[0] + \' \' + parts[1] level = parts[2].split(\' \')[0] message = parts[2][len(level)+1:] level_counts[level] += 1 current_timestamp = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M:%S\\") if most_recent_timestamp is None or current_timestamp > most_recent_timestamp: most_recent_timestamp = current_timestamp most_recent_log = log if level == \'ERROR\': error_messages.append(message) return { \\"total_entries\\": total_entries, \\"level_counts\\": level_counts, \\"most_recent_log\\": most_recent_log, \\"error_messages\\": error_messages }"},{"question":"You are required to write a function `max_sum_in_range(arr: List[int], ranges: List[Tuple[int, int]]) -> List[int]` that takes in two parameters: a list of integers `arr` and a list of ranges `ranges`. Each range is represented as a tuple ((l_i, r_i)), where ( l_i ) and ( r_i ) denote the start and end indices (inclusive) of a subarray within `arr`. The function should compute the maximum sum of elements for each specified range and return the results in a list. # Requirements 1. The function should handle multiple ranges efficiently. 2. Ensure ( 0 leq l_i leq r_i < len(arr) ). 3. For each range, find the contiguous subarray with the maximum sum and add this sum to the result list. **Function Signature** ```python from typing import List, Tuple def max_sum_in_range(arr: List[int], ranges: List[Tuple[int, int]]) -> List[int]: ... ``` **Example** ```python # Examples: arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] ranges = [(0, 2), (3, 8), (0, 8)] assert max_sum_in_range(arr, ranges) == [1, 6, 6] arr = [1, -3, 2, 1, -1] ranges = [(0, 4), (1, 3)] assert max_sum_in_range(arr, ranges) == [3, 3] ``` **Explanation** - For the first example: - Range ((0, 2)): The subarray is `[-2, 1, -3]`, and the maximum sum of a contiguous subarray is `1`. - Range ((3, 8)): The subarray is `[4, -1, 2, 1, -5, 4]`, and the maximum sum of a contiguous subarray is `6` (from `[4, -1, 2, 1]`). - Range ((0, 8)): The subarray is `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, and the maximum sum of a contiguous subarray is `6` (from `[4, -1, 2, 1]`). - For the second example: - Range ((0, 4)): The subarray is `[1, -3, 2, 1, -1]`, and the maximum sum of a contiguous subarray is `3` (from `[2, 1]`). - Range ((1, 3)): The subarray is `[-3, 2, 1]`, and the maximum sum of a contiguous subarray is `3` (from `[2, 1]`).","solution":"from typing import List, Tuple def max_sum_in_range(arr: List[int], ranges: List[Tuple[int, int]]) -> List[int]: def max_subarray_sum(nums: List[int]) -> int: max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum results = [] for l, r in ranges: subarray = arr[l:r+1] results.append(max_subarray_sum(subarray)) return results"},{"question":"Implement a function called `are_anagrams` that takes two strings `s1` and `s2` as arguments and returns `True` if the two strings are anagrams of each other, and `False` otherwise. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Consider case sensitivity and ignore spaces in both strings during the comparison. Write the `are_anagrams` function such that: - It ignores all spaces in the input strings. - It considers uppercase and lowercase versions of the same character as equivalent. - It efficiently checks if the two strings have the same character counts for each character. To implement this function effectively, you might use a dictionary or collections.Counter from the collections module to keep track of character counts. ```python def are_anagrams(s1, s2): # Your implementation here # Example usage: # are_anagrams(\\"listen\\", \\"silent\\") should return True # are_anagrams(\\"Listen\\", \\"Silent\\") should return True # are_anagrams(\\"anagram\\", \\"nag a ram\\") should return True # are_anagrams(\\"rat\\", \\"car\\") should return False ``` **Function signature:** ```python def are_anagrams(s1: str, s2: str) -> bool: ``` **Constraints:** - The input strings `s1` and `s2` can contain spaces, and only alphabetic characters. - The function should ignore spaces and be case-insensitive. **Hints:** - Use a dictionary or collections.Counter to tally character frequencies. - Normalize the strings to a common case (e.g., all lowercase) and remove spaces before comparison.","solution":"from collections import Counter def are_anagrams(s1: str, s2: str) -> bool: Check if two given strings are anagrams of each other, ignoring case and spaces. Args: s1 (str): First string. s2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. # Remove spaces and convert to lowercase s1_cleaned = s1.replace(\\" \\", \\"\\").lower() s2_cleaned = s2.replace(\\" \\", \\"\\").lower() # Use Counter from collections to count the characters return Counter(s1_cleaned) == Counter(s2_cleaned)"},{"question":"In this problem, you are asked to implement a playlist manager. The manager helps in organizing songs into playlists and allows performing operations such as adding songs, removing songs, finding songs by name, and obtaining the top N most played songs. You will implement the `PlaylistManager` class with the following methods: # Method Signatures ```python class PlaylistManager: def __init__(self): Initializes the playlist manager with an empty playlist and track play counts. pass def add_song(self, song_id: int, song_name: str) -> None: Adds a song to the playlist. Args: song_id (int): The unique identifier for the song. song_name (str): The name of the song. Returns: None pass def remove_song(self, song_id: int) -> None: Removes a song from the playlist by its ID. Args: song_id (int): The unique identifier for the song to be removed. Returns: None pass def play_song(self, song_id: int) -> None: Increases the play count of the song by 1. Args: song_id (int): The unique identifier for the song to be played. Returns: None pass def find_song_by_name(self, song_name: str) -> int: Finds and returns the ID of the song by its name. Args: song_name (str): The name of the song to find. Returns: int: The unique identifier of the song. Returns -1 if the song is not found. pass def top_n_songs(self, N: int) -> list: Returns the IDs of the top N most played songs in the playlist. Args: N (int): The number of top played songs to retrieve. Returns: list: A list of song IDs of the top N played songs. pass ``` # Example ```python playlist_manager = PlaylistManager() playlist_manager.add_song(1, \\"SongA\\") playlist_manager.add_song(2, \\"SongB\\") playlist_manager.add_song(3, \\"SongC\\") playlist_manager.play_song(1) playlist_manager.play_song(1) playlist_manager.play_song(2) print(playlist_manager.find_song_by_name(\\"SongA\\")) # Output: 1 print(playlist_manager.find_song_by_name(\\"SongD\\")) # Output: -1 playlist_manager.remove_song(1) print(playlist_manager.top_n_songs(1)) # Output: [2] or [3] (since they have the same play count) print(playlist_manager.top_n_songs(3)) # Output: [2, 3] ``` # Explanation - **Input**: - Various method calls on the `PlaylistManager` class to add songs, remove songs, play songs, find songs by name, and get the top N most played songs. - **Output**: - Results of the `find_song_by_name` and `top_n_songs` methods are shown in the example. # Requirements - Use dictionaries to store songs and their play counts efficiently. - Ensure the `top_n_songs` method returns the most played songs in a consistent order in case of a tie (e.g., by ID). # Constraints - Song IDs are unique. - The number of songs in the system and the maximum play count can be large, so consider efficiency in your solutions.","solution":"class PlaylistManager: def __init__(self): self.songs = {} self.play_counts = {} def add_song(self, song_id: int, song_name: str) -> None: if song_id not in self.songs: self.songs[song_id] = song_name self.play_counts[song_id] = 0 def remove_song(self, song_id: int) -> None: if song_id in self.songs: del self.songs[song_id] del self.play_counts[song_id] def play_song(self, song_id: int) -> None: if song_id in self.songs: self.play_counts[song_id] += 1 def find_song_by_name(self, song_name: str) -> int: for song_id, name in self.songs.items(): if name == song_name: return song_id return -1 def top_n_songs(self, N: int) -> list: sorted_songs = sorted(self.play_counts.items(), key=lambda x: (-x[1], x[0])) return [song[0] for song in sorted_songs[:N]]"},{"question":"You are tasked with simulating a queue system in which customers arrive at random intervals and are served one at a time. Implement a discrete-event simulation where you can calculate the average waiting time for customers in the queue. The simulation should consider the following parameters: - Arrival rate ((lambda)): Average number of customers arriving per unit time. - Service rate ((mu)): Average number of customers served per unit time. - Total simulation time: Duration for which the simulation runs. You must generate random arrival and service times and simulate the queue to compute the average waiting time per customer. **Function Signature:** ```python def simulate_queue(lambda_rate, mu_rate, total_time): # lambda_rate: average arrival rate (customers per unit time) # mu_rate: average service rate (customers per unit time) # total_time: total time to run the simulation (time units) # returns average waiting time and the total number of customers served ``` **Instructions:** 1. Generate inter-arrival times for each customer using an exponential distribution with mean (1/lambda). 2. Generate service times for each customer using an exponential distribution with mean (1/mu). 3. Simulate the customer arrivals and service completions over the total time. 4. Calculate the waiting time for each customer as the difference between their arrival time and the completion time of the previous customer. 5. Compute the average waiting time of all customers. 6. Output the average waiting time and the total number of customers served. **Requirements:** - Use `numpy.random.exponential` to generate random arrival and service times. - Ensure the queue operates in a First-Come-First-Served (FCFS) manner. - Handle edge cases such as arrival times beyond the total simulation time. **Example Call:** ```python lambda_rate = 0.5 # 0.5 customers arriving per time unit mu_rate = 1.0 # 1 customer being served per time unit total_time = 100 # run the simulation for 100 time units average_waiting_time, total_customers_served = simulate_queue(lambda_rate, mu_rate, total_time) print(\\"Average Waiting Time:\\", average_waiting_time) print(\\"Total Customers Served:\\", total_customers_served) ```","solution":"import numpy as np def simulate_queue(lambda_rate, mu_rate, total_time): Simulate a queue system to calculate the average waiting time for customers. Args: lambda_rate (float): Average arrival rate (customers per unit time) mu_rate (float): Average service rate (customers per unit time) total_time (float): Total time to run the simulation (time units) Returns: tuple: (average waiting time, total number of customers served) # Initialize variables current_time = 0 arrival_times = [] service_times = [] departure_times = [] waiting_times = [] # Simulate arrivals and services while current_time < total_time: # Generate next arrival time inter_arrival_time = np.random.exponential(1 / lambda_rate) current_time += inter_arrival_time if current_time >= total_time: break arrival_times.append(current_time) # Generate service time service_time = np.random.exponential(1 / mu_rate) service_times.append(service_time) # Simulate the Queue for i in range(len(arrival_times)): if i == 0: departure_times.append(arrival_times[i] + service_times[i]) waiting_times.append(0) else: if arrival_times[i] > departure_times[i - 1]: departure_times.append(arrival_times[i] + service_times[i]) waiting_times.append(0) else: waiting_times.append(departure_times[i - 1] - arrival_times[i]) departure_times.append(departure_times[i - 1] + service_times[i]) # Calculate average waiting time total_customers_served = len(arrival_times) if total_customers_served == 0: average_waiting_time = 0 else: average_waiting_time = sum(waiting_times) / total_customers_served return average_waiting_time, total_customers_served"},{"question":"You are tasked with creating a function called `normalize_vector` using the `numpy` library, which normalizes a given vector. This function should take a 1-dimensional numpy array as input and return the corresponding normalized vector, such that the resulting vector has a magnitude (or Euclidean norm) of 1. The function should make use of the `numpy.linalg.norm` function to compute the magnitude of the vector and then divide each component of the vector by this magnitude to normalize it. The function should be defined as: ```python def normalize_vector(v): Normalizes a given vector to have a magnitude of 1. Parameters: v (numpy.ndarray): A 1-dimensional array representing the vector to be normalized. Returns: numpy.ndarray: A 1-dimensional array representing the normalized vector. # Your implementation here ``` # Example ```python import numpy as np v = np.array([3, 4, 0]) normalized_v = normalize_vector(v) print(normalized_v) ``` # Expected Output ``` [0.6 0.8 0. ] ``` # Requirements 1. Use the `numpy.linalg.norm` function to compute the magnitude of the vector. 2. Ensure that if the input vector has zero magnitude, the function returns the original zero vector. 3. Return the normalized vector as a `numpy.ndarray`. # Additional Notes - You may assume that the input is always a valid 1-dimensional numpy array. - Ensure that your function is well-documented and easy to understand, following best practices in Python programming.","solution":"import numpy as np def normalize_vector(v): Normalizes a given vector to have a magnitude of 1. Parameters: v (numpy.ndarray): A 1-dimensional array representing the vector to be normalized. Returns: numpy.ndarray: A 1-dimensional array representing the normalized vector. magnitude = np.linalg.norm(v) if magnitude == 0: return v return v / magnitude"},{"question":"Implement a function `min_window_substring(s, t)` that finds the minimum window substring of `s` which contains all the characters of string `t`. If there is no such substring, return an empty string. This problem can be solved using the sliding window technique. Ensure that the substring contains all characters including their frequency from string `t`. # Function Signature ```python def min_window_substring(s: str, t: str) -> str: ``` # Parameters - `s`: A string `s` - `t`: A string `t` # Returns - A string that represents the minimum window substring of `s` which contains all characters of `t`. If there\'s no valid window, return an empty string. # Constraints 1. Both strings `s` and `t` will only contain uppercase and lowercase English letters. 2. The length of `s` will be between 1 and 10000. 3. The length of `t` will be between 1 and 1000. # Example ```python s = \\"ADOBECODEBANC\\" t = \\"ABC\\" print(min_window_substring(s, t)) # Output: \\"BANC\\" s = \\"a\\" t = \\"aa\\" print(min_window_substring(s, t)) # Output: \\"\\" ``` # Notes 1. Utilize dictionaries to keep the frequency count of characters. 2. Use two pointers to represent the current window, and expand and contract as needed while iterating through `s`. 3. Keep track of the minimum window encountered that satisfies the requirement.","solution":"from collections import Counter, defaultdict def min_window_substring(s: str, t: str) -> str: if not s or not t: return \\"\\" # Dictionary to keep a count of all the unique characters in `t` dict_t = Counter(t) # Number of unique characters in t that need to be present in the window required = len(dict_t) # Left and Right pointer l, r = 0, 0 # formed is used to keep track of how many unique characters in `t` are present in the current window formed = 0 # Dictionary which keeps a count of all the unique characters in the current window window_counts = defaultdict(int) # Result tuple (window length, left, right) ans = float(\\"inf\\"), None, None while r < len(s): # Add one character from the right to the window char = s[r] window_counts[char] += 1 # If the frequency of the current character added equals the desired count in `t` if char in dict_t and window_counts[char] == dict_t[char]: formed += 1 # Try and contract the window till the point where it ceases to be \'desirable\' while l <= r and formed == required: char = s[l] # Save the smallest window until now if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) # The character at the position pointed by the `left` pointer is no longer a part of the window window_counts[char] -= 1 if char in dict_t and window_counts[char] < dict_t[char]: formed -= 1 # Move the left pointer ahead l += 1 # Keep expanding the window r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"**Problem:** Implement a function called `find_majority_element` in Python that finds the majority element from a list. The majority element is the element that appears more than half the number of times in the list. If no such element exists, return `None`. Construct the problem such that it works efficiently, considering both time and space complexity. # Function Signature: ```python def find_majority_element(arr): Find the majority element from the list if it exists. Parameters: arr (List[int]): The input list of integers. Returns: int or None: The majority element or `None` if no majority element exists. ``` # Instructions: 1. **Input:** - A list `arr` of length N containing integers. 2. **Output:** - The integer that is the majority element if it exists, otherwise `None`. 3. **Constraints**: - The function should have a time complexity of O(N). - The function should use O(1) extra space. 4. **Algorithm**: - Implement the Boyer-Moore Voting Algorithm to find the majority element. # Example: Here is an example call to `find_majority_element`: ```python print(find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4])) # Output: 4 print(find_majority_element([3, 3, 4, 2, 4, 4, 2, 4])) # Output: None ``` **Implementation of Boyer-Moore Voting Algorithm:** - Initialize two variables: one for storing the candidate majority element and one for its count. - Traverse through the list and adjust the candidate majority element and its count accordingly. - Finally, verify if the candidate is indeed the majority element by checking its count.","solution":"def find_majority_element(arr): Find the majority element from the list if it exists. Parameters: arr (List[int]): The input list of integers. Returns: int or None: The majority element or `None` if no majority element exists. if not arr: return None candidate = None count = 0 # Phase 1: Find a candidate using Boyer-Moore Voting Algorithm for num in arr: if count == 0: candidate = num count = 1 elif num == candidate: count += 1 else: count -= 1 # Phase 2: Verify if the candidate is indeed the majority element if arr.count(candidate) > len(arr) // 2: return candidate else: return None"},{"question":"Design a function `drawPolygon(sides: int, length: int)` that uses the `turtle` graphics library to draw a regular polygon with the specified number of sides and the length of each side. Please follow these steps for the function: 1. Import the `turtle` library. 2. Define `drawPolygon(sides: int, length: int)` which takes two parameters: - `sides` (integer): the number of sides of the polygon. - `length` (integer): the length of each side of the polygon. 3. Use the `forward()` and `right()` methods from the `turtle` library to draw the polygon. 4. Ensure that the angle for turning the turtle at each vertex is correctly calculated as `(360 / sides)` degrees. The function signature should be: ```python def drawPolygon(sides: int, length: int) -> None: pass ``` # Example: Suppose you have invoked the function as: ```python drawPolygon(5, 100) ``` The turtle should draw a pentagon where each side is 100 units long. Note: Make sure that your function handles cases where the number of sides is less than 3 by not drawing anything, as a polygon cannot have fewer than 3 sides.","solution":"import turtle def drawPolygon(sides: int, length: int) -> None: Draws a regular polygon with the specified number of sides and length of each side using the turtle graphics library. :param sides: int - Number of sides of the polygon :param length: int - Length of each side of the polygon if sides < 3: print(\\"A polygon must have at least 3 sides.\\") return angle = 360 / sides for _ in range(sides): turtle.forward(length) turtle.right(angle) turtle.done()"},{"question":"**Unique Word Counting in Text** In this problem, you are asked to write a Python function named `count_unique_words` that accepts a string of text and returns the count of unique words in the text. For this problem, a word is defined as any sequence of non-whitespace characters, and the text can contain punctuation and mixed case. The function should: 1. Convert the string to lowercase to ensure case insensitivity. 2. Remove any punctuation from the text to treat words with and without punctuation similarly. 3. Split the text into words based on whitespace. 4. Count the number of unique words in the cleaned text. You can use Python\'s `str` methods and the `re` library for regular expressions to implement this function. Here is the prototype of the function: ```python import re def count_unique_words(text): pass ``` **Example Usage:** ```python text = \\"Hello, world! Hello, Universe.\\" print(count_unique_words(text)) ``` **Expected Output:** ``` 3 ``` The three unique words in the text are \\"hello\\", \\"world\\", and \\"universe\\".","solution":"import re def count_unique_words(text): Counts the number of unique words in the given text. # Convert text to lowercase to ensure case insensitivity text = text.lower() # Remove punctuation text = re.sub(r\'[^ws]\', \'\', text) # Split the text into words based on whitespace words = text.split() # Count the number of unique words unique_words = set(words) return len(unique_words)"},{"question":"Write a function `generate_fibonacci_sequence(length, threshold)` that generates the Fibonacci sequence starting from 0 and 1, and continues until either the specified length is achieved, or an element exceeds the given threshold, whichever occurs first. The function should take in two parameters: 1. `length` (an integer): The maximum number of elements to generate in the sequence. 2. `threshold` (an integer): The threshold value that any element of the sequence should not exceed. Your implementation should incorporate a loop to generate the sequence and check the conditions. # Example Usage: ```python generate_fibonacci_sequence(10, 100) ``` This example will generate the Fibonacci sequence up to a maximum of 10 elements or stop early if any element exceeds 100. # Constraints: - `length` must be a non-negative integer. - `threshold` must be a non-negative integer. Make sure to handle the constraints appropriately, such as by validating the inputs and providing necessary error messages if the inputs are not valid. # **Note**: The generated sequence should be returned as a list. For example, calling `generate_fibonacci_sequence(5, 10)` should return `[0, 1, 1, 2, 3]`.","solution":"def generate_fibonacci_sequence(length, threshold): Generates the Fibonacci sequence up to the specified length or until an element exceeds the threshold. Args: length (int): The maximum number of elements to generate. threshold (int): The threshold value that any element of the sequence should not exceed. Returns: list: The generated Fibonacci sequence. if not isinstance(length, int) or length < 0: raise ValueError(\\"Length must be a non-negative integer.\\") if not isinstance(threshold, int) or threshold < 0: raise ValueError(\\"Threshold must be a non-negative integer.\\") if length == 0: return [] fibonacci_sequence = [0, 1] if length == 1: return [0] while len(fibonacci_sequence) < length: next_value = fibonacci_sequence[-1] + fibonacci_sequence[-2] if next_value > threshold: break fibonacci_sequence.append(next_value) return fibonacci_sequence[:length]"},{"question":"Write a Python function named `analyze_weather_data(filename)` that takes a single argument `filename`, which is the name of a CSV file. The CSV file contains daily weather information with columns \\"Date\\", \\"Temperature\\", and \\"Humidity\\". The function should: 1. Read the CSV file using the `pandas` library. 2. Extract the \\"Temperature\\" and \\"Humidity\\" columns, and convert them to NumPy arrays. 3. For each of the \\"Temperature\\" and \\"Humidity\\" columns, compute the following statistics using only NumPy functions: - Minimum (最小値) - Maximum (最大値) - Mean (平均値) - Median (中央値) - Standard deviation (標準偏差) 4. Return a dictionary with the keys \\"Temperature\\" and \\"Humidity\\". Each key should map to another dictionary containing the Japanese names of the statistics as keys and their corresponding computed values as values. For example, the function should return a dictionary structured like this: ```python { \\"Temperature\\": { \\"最小値\\": min_temp, \\"最大値\\": max_temp, \\"平均値\\": mean_temp, \\"中央値\\": median_temp, \\"標準偏差\\": std_temp }, \\"Humidity\\": { \\"最小値\\": min_hum, \\"最大値\\": max_hum, \\"平均値\\": mean_hum, \\"中央値\\": median_hum, \\"標準偏差\\": std_hum } } ``` Your function should look like this: ```python def analyze_weather_data(filename): # Your code here pass ```","solution":"import pandas as pd import numpy as np def analyze_weather_data(filename): Analyzes weather data from a CSV file and computes statistical metrics for Temperature and Humidity using the pandas and numpy libraries. :param filename: str, the name of the CSV file :return: dict, contains computed statistics for Temperature and Humidity # Read the CSV file with pandas data = pd.read_csv(filename) # Extract Temperature and Humidity columns as numpy arrays temperature = data[\'Temperature\'].to_numpy() humidity = data[\'Humidity\'].to_numpy() # Compute statistics for Temperature temperature_stats = { \\"最小値\\": np.min(temperature), \\"最大値\\": np.max(temperature), \\"平均値\\": np.mean(temperature), \\"中央値\\": np.median(temperature), \\"標準偏差\\": np.std(temperature) } # Compute statistics for Humidity humidity_stats = { \\"最小値\\": np.min(humidity), \\"最大値\\": np.max(humidity), \\"平均値\\": np.mean(humidity), \\"中央値\\": np.median(humidity), \\"標準偏差\\": np.std(humidity) } # Combine results into a dictionary and return result = { \\"Temperature\\": temperature_stats, \\"Humidity\\": humidity_stats } return result"},{"question":"Implement a function named `find_islands` which counts the number of islands in a given 2D grid map. An island is a group of `1`s (land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water (`0`s). Here’s the function signature: ```python def find_islands(grid): # Your implementation here pass ``` **Details:** 1. **Parameters:** - `grid`: A 2D list of integers, where `1` represents land and `0` represents water. Example: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] ``` 2. **Functionality:** - The function should traverse the 2D grid. - Implement Depth-First Search (DFS) or Breadth-First Search (BFS) to explore each island and mark the visited cells to avoid double counting. - Each time a new land cell (`1`) is found that is not visited, increase the island count and perform DFS/BFS to mark all connected land cells as visited. 3. **Requirements:** - The function should explore all nodes in the grid efficiently. - Make sure to handle grids with no land cells (`1`s) gracefully by returning `0`. # Example Usage: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] result = find_islands(grid) print(result) # Output should be 3 because there are three distinct islands ``` # Constraints: - The grid\'s dimensions will not exceed 100x100. - Each cell in the grid can only be either `0` (water) or `1` (land). # Additional Hints: - You might want to define a helper function within `find_islands` to perform DFS/BFS. - Consider using a set or a similar structure to keep track of visited cells. In summary, your task is to develop an efficient algorithm to count the number of islands in a grid, ensuring to utilize DFS/BFS for exploration and marking visited cells appropriately. This will help in understanding and practicing graph traversal techniques applied to a typical interview-like problem scenario.","solution":"def find_islands(grid): Returns the number of islands in the given grid. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = set() def dfs(r, c): if (r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0 or (r, c) in visited): return visited.add((r, c)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dr, dc in directions: dfs(r + dr, c + dc) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and (r, c) not in visited: island_count += 1 dfs(r, c) return island_count"},{"question":"Write a function named `sum_of_divisors` that calculates the sum of all proper divisors of a given positive integer. A proper divisor of a number is any divisor other than the number itself. The function `sum_of_divisors` should take one parameter: 1. `n` (int): A positive integer whose divisors are to be summed. The function should return the sum of all proper divisors of `n`. If `n` is 1, the function should return 0 (since 1 has no proper divisors). Examples: - `sum_of_divisors(6)` should return `6`, because the proper divisors of `6` are `1`, `2`, and `3`. - `sum_of_divisors(28)` should return `28`, because the proper divisors of `28` are `1`, `2`, `4`, `7`, and `14`. - `sum_of_divisors(1)` should return `0`, because 1 has no proper divisors.","solution":"def sum_of_divisors(n): Returns the sum of all proper divisors of the given positive integer n. Parameters: n (int): A positive integer whose proper divisors are to be summed. Returns: int: The sum of all proper divisors of n. if n == 1: return 0 proper_divisors_sum = 0 for i in range(1, n//2 + 1): if n % i == 0: proper_divisors_sum += i return proper_divisors_sum"},{"question":"Implement a class `GradeBook` that allows you to add and retrieve student grades for multiple subjects. The class should support the following methods: 1. `add_grade(self, student_id, subject, grade)`: Adds a grade for a specific student and subject. The `student_id` is a unique identifier for each student, `subject` is a string representing the name of the subject, and `grade` is an integer between 0 and 100 (both inclusive). 2. `get_average_grade(self, student_id, subject)`: Retrieves the average grade for a given student in a specific subject. If the student or subject does not exist, it should return `None`. 3. `get_student_average(self, student_id)`: Retrieves the average grade across all subjects for a given student. If the student does not exist, it should return `None`. 4. `get_subject_average(self, subject)`: Retrieves the average grade for all students in a specific subject. If the subject does not exist, it should return `None`. Your implementation should appropriately handle cases where grades for a student or subject have not been added yet. For example: ```python gradebook = GradeBook() gradebook.add_grade(\\"student1\\", \\"Math\\", 85) gradebook.add_grade(\\"student1\\", \\"Math\\", 90) gradebook.add_grade(\\"student1\\", \\"Science\\", 78) gradebook.add_grade(\\"student2\\", \\"Math\\", 92) gradebook.add_grade(\\"student2\\", \\"Science\\", 88) print(gradebook.get_average_grade(\\"student1\\", \\"Math\\")) # Output: 87.5 print(gradebook.get_student_average(\\"student1\\")) # Output: 84.33333333333333 print(gradebook.get_subject_average(\\"Math\\")) # Output: 89.0 ```","solution":"class GradeBook: def __init__(self): self.grades = {} def add_grade(self, student_id, subject, grade): if student_id not in self.grades: self.grades[student_id] = {} if subject not in self.grades[student_id]: self.grades[student_id][subject] = [] self.grades[student_id][subject].append(grade) def get_average_grade(self, student_id, subject): if student_id not in self.grades or subject not in self.grades[student_id]: return None return sum(self.grades[student_id][subject]) / len(self.grades[student_id][subject]) def get_student_average(self, student_id): if student_id not in self.grades: return None total_sum = 0 count = 0 for subject in self.grades[student_id]: total_sum += sum(self.grades[student_id][subject]) count += len(self.grades[student_id][subject]) return total_sum / count if count > 0 else None def get_subject_average(self, subject): total_sum = 0 count = 0 for student_id in self.grades: if subject in self.grades[student_id]: total_sum += sum(self.grades[student_id][subject]) count += len(self.grades[student_id][subject]) return total_sum / count if count > 0 else None"},{"question":"In server load balancing, one common task is to distribute incoming requests among multiple servers in a fair manner. One simple algorithm to achieve this is the \\"Round Robin\\" approach. Your goal is to create a function that simulates this load balancing technique. # Requirements: * **Function Name**: `round_robin_load_balancer` * **Function Signature**: `def round_robin_load_balancer(servers, num_requests):` # Function Details: - **Parameters**: - `servers`: A list of server names (strings) available to handle requests. - `num_requests`: An integer representing the total number of incoming requests. - **Returns**: - A list where each element is a tuple that represents a request. The tuple contains: - The request number (starting from 1 up to `num_requests`). - The server name that handled the request, assigned using the Round Robin method. # Implementation Notes: - The function should loop through the `servers` list in a cyclic manner to assign each request, ensuring an even distribution. - Use modular arithmetic to determine which server should handle each request. # Example: Below is an example of how the function could be used: ```python servers = [\'Server_A\', \'Server_B\', \'Server_C\'] num_requests = 7 result = round_robin_load_balancer(servers, num_requests) # Expected output: # [ # (1, \'Server_A\'), # (2, \'Server_B\'), # (3, \'Server_C\'), # (4, \'Server_A\'), # (5, \'Server_B\'), # (6, \'Server_C\'), # (7, \'Server_A\') # ] for req in result: print(f\\"Request {req[0]} is handled by {req[1]}\\") ```","solution":"def round_robin_load_balancer(servers, num_requests): Distributes incoming requests among multiple servers using the Round Robin method. Parameters: servers (list): A list of server names (strings). num_requests (int): Total number of incoming requests. Returns: list: A list of tuples where each tuple contains the request number and the assigned server. result = [] n = len(servers) for i in range(num_requests): server = servers[i % n] result.append((i + 1, server)) return result"},{"question":"You have been asked to design a function that simulates tossing a standard six-sided die multiple times and computes certain statistics based on the outcomes. The function should randomly generate die rolls and then determine the most frequently appearing number (mode) from the results. The task is to write a function called `die_roll_statistics` which: 1. Accepts one parameter `num_rolls`, which indicates the number of times the die should be rolled. 2. Uses `random.randint(1, 6)` to simulate each die roll, resulting in a list of integers representing the outcomes. 3. Computes the mode of the list of outcomes. In case of a tie (multiple numbers having the same highest frequency), return any one of the modes. 4. Returns a dictionary containing: - \'rolls\': the list of integers representing the outcomes of the die rolls. - \'mode\': the integer that appears most frequently in the list of outcomes. **Function Signature:** ```python def die_roll_statistics(num_rolls: int) -> dict: ``` **Example:** ```python num_rolls = 10 result = die_roll_statistics(num_rolls) print(result) ``` Possible output: ```python {\'rolls\': [1, 3, 4, 2, 6, 1, 5, 2, 2, 5], \'mode\': 2} ``` **Constraints:** - `num_rolls` is a positive integer. Use the `random.randint` method as required.","solution":"import random from collections import Counter def die_roll_statistics(num_rolls: int) -> dict: Simulates rolling a six-sided die `num_rolls` times. Computes and returns the most frequently appearing number (mode). Parameters: - num_rolls (int): Number of times to roll the die. Returns: - dict: A dictionary containing: - \'rolls\': List of integers representing the outcomes of the die rolls. - \'mode\': The integer that appears most frequently in the list of outcomes. if num_rolls <= 0: raise ValueError(\\"num_rolls must be a positive integer.\\") rolls = [random.randint(1, 6) for _ in range(num_rolls)] roll_counts = Counter(rolls) mode = roll_counts.most_common(1)[0][0] return { \'rolls\': rolls, \'mode\': mode }"},{"question":"Create a Python function that analyzes a given text and returns the top N most frequently occurring words along with their respective counts, sorted in descending order of frequency. Ignore case sensitivity and punctuation in your analysis. The function should: - Take two arguments: - `text`: A string containing the text to be analyzed. - `top_n`: An integer specifying the number of top frequent words to return. - Use regular expressions to clean the text of punctuation. - Ensure that the comparison is case insensitive. - Handle ties by sorting words with the same frequency in alphabetical order. - Raise a ValueError if `top_n` is less than 1. The function should output: A list of tuples, each containing a word and its count, sorted by count in descending order and then alphabetically in case of a tie. You should write self-contained code starting with: ```python import re from collections import Counter def top_n_words(text, top_n): ```","solution":"import re from collections import Counter def top_n_words(text, top_n): Analyzes the given text and returns the top N most frequently occurring words. Parameters: text (str): The text to be analyzed. top_n (int): The number of top frequent words to return. Returns: List[Tuple[str, int]]: A list of tuples containing the word and its count, sorted by count and alphabetically. if top_n < 1: raise ValueError(\\"top_n must be greater than 0\\") # Use regular expressions to remove punctuation and make everything lowercase text = re.sub(r\'[^ws]\', \'\', text).lower() # Split the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Sort the words by frequency and alphabetically sorted_word_counts = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Return the top N words return sorted_word_counts[:top_n]"},{"question":"In the realm of web development, it is critical to ensure that data input by users is sanitized and validated before it is used by the application. A common task is to check for the presence of forbidden words in user-generated content. We need to create a function named `sanitize_input` that will perform the following tasks: 1. Convert the user input to lowercase for uniformity. 2. Check the input for any forbidden words. 3. Replace any forbidden word found with asterisks (\'*\') equal to the length of the forbidden word. # Function Signature ```python def sanitize_input(input_text: str, forbidden_words: list) -> str: ``` # Parameters - `input_text` (str): A string representing user input. - `forbidden_words` (list): A list of forbidden words to be checked against the input text. # Returns - `str`: A sanitized string where all occurrences of forbidden words are replaced by asterisks. # Example Usage ```python input_text = \\"This is a very bad word example.\\" forbidden_words = [\\"bad\\", \\"word\\"] sanitized_text = sanitize_input(input_text, forbidden_words) print(sanitized_text) # Output: \\"This is a very *** **** example.\\" ``` # Constraints - The function should replace forbidden words regardless of their case (e.g., \\"bad\\" should match \\"Bad\\"). - Only whole words should be replaced (e.g., \\"bad\\" should not match \\"badge\\"). - Assume input text only contains alphabetic characters and spaces (no punctuation). - Forbidden words list is non-empty and contains only non-empty strings. # Note - You may use the `re.sub` function from the `re` module for the word replacement, ensuring to use word boundaries to match whole words. - Make sure that multiple spaces between words in the input are handled correctly during replacement.","solution":"import re def sanitize_input(input_text: str, forbidden_words: list) -> str: Sanitizes the input text by replacing forbidden words with asterisks. Parameters: - input_text (str): The user input text to be sanitized. - forbidden_words (list): A list of forbidden words to check against. Returns: - str: The sanitized string with forbidden words replaced by asterisks. # Convert input text to lowercase for uniformity input_text_lower = input_text.lower() # Create a copy of the original input text to apply replacements sanitized_text = input_text # Replace each forbidden word with asterisks for word in forbidden_words: asterisks = \'*\' * len(word) sanitized_text = re.sub(r\'b\' + re.escape(word) + r\'b\', asterisks, sanitized_text, flags=re.IGNORECASE) return sanitized_text"},{"question":"Write a function called `reverse_sublist(lst, start, end)` that takes in a list and two indices, and reverses the elements of the sublist from `start` to `end` (inclusive). The function should modify the original list in place. The function signature should be: ```python def reverse_sublist(lst, start, end): # Your code here ``` # Input - `lst`: A list of integers. - `start`: An integer indicating the starting index of the sublist to be reversed. - `end`: An integer indicating the ending index of the sublist to be reversed. # Output - The function does not return anything; it modifies the original list in place. # Constraints - `0 <= start <= end < len(lst)` # Example ```python lst = [10, 20, 30, 40, 50, 60] reverse_sublist(lst, 2, 4) print(lst) # Expected output: [10, 20, 50, 40, 30, 60] lst = [1, 2, 3, 4, 5] reverse_sublist(lst, 0, 4) print(lst) # Expected output: [5, 4, 3, 2, 1] ```","solution":"def reverse_sublist(lst, start, end): Reverses the sublist of lst from start to end (inclusive). Modifies lst in place. Parameters: lst (list): The list to be modified. start (int): The starting index of the sublist. end (int): The ending index of the sublist. while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1"},{"question":"You are tasked with creating a function to determine the shortest path in a weighted, undirected graph using Dijkstra\'s algorithm. The graph is represented as an adjacency matrix, where a cell value represents the weight of the edge between two nodes. If there is no direct edge between two nodes, the cell value is set to `float(\'inf\')`. Your function should be named `shortest_path`, and it should take the following parameters: 1. `graph`: A 2D list (list of lists) representing the adjacency matrix of the graph. 2. `start`: An integer representing the starting node. 3. `end`: An integer representing the target node. The function should: 1. Implement Dijkstra\'s algorithm to find the shortest path from the starting node to the target node. 2. Return a list of nodes representing the shortest path. If no path exists, return an empty list. **Function Signature:** ```python def shortest_path(graph: List[List[float]], start: int, end: int) -> List[int]: ``` **Example Usage:** ```python graph = [ [0, 1, 4, float(\'inf\')], [1, 0, 4, 2], [4, 4, 0, 3], [float(\'inf\'), 2, 3, 0] ] shortest_path(graph, 0, 3) # This should return the shortest path from node 0 to node 3 ```","solution":"import heapq from typing import List def shortest_path(graph: List[List[float]], start: int, end: int) -> List[int]: Returns the shortest path from `start` node to `end` node using Dijkstra\'s algorithm. If no path exists, returns an empty list. n = len(graph) dist = [float(\'inf\')] * n dist[start] = 0 prev = [None] * n # Array to store the path pq = [(0, start)] # Priority queue of (distance, node) while pq: d, u = heapq.heappop(pq) # If we reached the end node, we can construct the path if u == end: path = [] while u is not None: path.insert(0, u) u = prev[u] return path # If the distance in the PQ is greater than the found distance, skip processing if d > dist[u]: continue for v in range(n): if graph[u][v] != float(\'inf\'): alt = dist[u] + graph[u][v] if alt < dist[v]: dist[v] = alt prev[v] = u heapq.heappush(pq, (alt, v)) # If the end node was never reached, return an empty list return []"},{"question":"Write a function that generates a 10x10 matrix with random integers between 1 and 100. Then, calculate the sum of all the elements in the main diagonal (top-left to bottom-right). Use numpy for creating the matrix and computing the sum. Return the generated matrix and the sum of the main diagonal elements. Your function should start with: ``` import numpy as np def generate_and_sum_diagonal(): ```","solution":"import numpy as np def generate_and_sum_diagonal(): # Generate a 10x10 matrix with random integers between 1 and 100 matrix = np.random.randint(1, 101, size=(10, 10)) # Calculate the sum of the main diagonal elements diagonal_sum = np.trace(matrix) return matrix, diagonal_sum"},{"question":"You are asked to write a function in Python that processes a given list of integers by grouping the numbers into buckets based on their frequency and then sorting these buckets by the frequency of the integers in descending order. This question helps you understand the usage of collections module and basic list manipulations. Task: Write a function `frequency_buckets(nums)` that: 1. **Takes**: - `nums`: a list of integers. 2. **Returns**: - A list of lists, where each sub-list contains integers that have the same frequency, and the sub-lists are sorted in descending order of those frequencies. Within each sub-list, the integers should be sorted in ascending order. Example: ```python nums = [4, 5, 6, 5, 4, 3] buckets = frequency_buckets(nums) print(buckets) ``` Expected Output: ```plaintext [[4, 5], [3, 6]] ``` Requirements: - You must use the `collections` module\'s Counter for frequency counting. - Sort the resulting buckets based on their frequencies in descending order. - Ensure the integers within each frequency bucket are sorted in ascending order. - Handle edge cases such as empty list or list with all unique elements appropriately. - Avoid using any external libraries except for those provided in the Python standard library. Here is a template to help you start: ```python from collections import Counter def frequency_buckets(nums): # Your code goes here pass ```","solution":"from collections import Counter def frequency_buckets(nums): Processes a given list of integers by grouping them into buckets based on their frequency, then sorts these buckets by frequency in descending order. Parameters: nums (list of int): The list of integers to process. Returns: list of lists: A list where each sub-list contains integers that have the same frequency, and the sub-lists are sorted in descending order of those frequencies. Within each sub-list, the integers are sorted in ascending order. if not nums: return [] # Count the frequency of each number freq_counter = Counter(nums) # Create a dictionary where keys are frequencies and values are lists of numbers having those frequencies freq_dict = {} for num, freq in freq_counter.items(): if freq not in freq_dict: freq_dict[freq] = [] freq_dict[freq].append(num) # Sort each list of numbers for each frequency in ascending order for freq in freq_dict: freq_dict[freq].sort() # Create a list of these sorted lists, ordered by frequency in descending order sorted_buckets = sorted(freq_dict.items(), key=lambda x: x[0], reverse=True) # Extract only the lists of numbers from the sorted items result = [bucket for freq, bucket in sorted_buckets] return result"},{"question":"In this problem, you will create a function named `create_word_square`. Your goal is to generate a word square given a list of words using backtracking. **Function Signature:** `def create_word_square(words: List[str]) -> List[List[str]]:` **Requirements:** 1. A word square is a set of words arranged in a square such that the same words read vertically and horizontally. 2. The input will be a list of words, all having the same length. 3. Use a helper function to check if the current word can be placed in the square at the given position. 4. Use backtracking to explore different word combinations and construct the word square. 5. Return the word square as a list of lists; each sublist represents a row in the square. 6. If no valid word square exists, return an empty list. **Example:** For the list of words `[\\"ball\\", \\"area\\", \\"lead\\", \\"lady\\"]`: - The output should be: ``` [ [\\"ball\\", \\"area\\", \\"lead\\", \\"lady\\"] ] ``` **Notes:** - There can be multiple solutions; returning any one of them is acceptable. - Ensure the words in the input list all have the same length. - The words list provided will always be non-empty.","solution":"from typing import List def create_word_square(words: List[str]) -> List[List[str]]: def is_valid(square, word, position): for i in range(position): if square[i][position] != word[i]: return False return True def backtrack(square): # If the square is complete if len(square) == n: result.append(list(square)) return for word in words: if is_valid(square, word, len(square)): square.append(word) backtrack(square) square.pop() n = len(words[0]) result = [] for word in words: backtrack([word]) return result"},{"question":"You need to build a Python function called `evaluate_students` that reads a file named `students_scores.csv` and generates a performance report based on the students\' scores. The CSV file contains two columns: `StudentID` and `Score`. The `Score` is an integer representing each student\'s score in a test. Your function should produce three output files: 1. `passing_students.txt` - containing the IDs of students who scored at least 50, one per line. 2. `failing_students.txt` - containing the IDs of students who scored below 50, one per line. 3. `average_score.txt` - containing a single line with the average score of all students. Ensure you handle file exceptions properly and make sure to close all files correctly after operations. You can assume the input file is reasonably sized and contains no duplicate student IDs. Write the function `evaluate_students` to accomplish this task.","solution":"def evaluate_students(file_path): This function reads a file named `students_scores.csv` and generates three output files: - passing_students.txt: containing IDs of students who scored at least 50, one per line. - failing_students.txt: containing IDs of students who scored below 50, one per line. - average_score.txt: containing a single line with the average score of all students. try: with open(file_path, mode=\'r\') as file: lines = file.readlines() passing_students = [] failing_students = [] total_score = 0 student_count = 0 for line in lines: student_id, score = line.strip().split(\',\') score = int(score) total_score += score student_count += 1 if score >= 50: passing_students.append(student_id) else: failing_students.append(student_id) average_score = total_score / student_count if student_count > 0 else 0 with open(\'passing_students.txt\', mode=\'w\') as pass_file: pass_file.write(\'n\'.join(passing_students)) with open(\'failing_students.txt\', mode=\'w\') as fail_file: fail_file.write(\'n\'.join(failing_students)) with open(\'average_score.txt\', mode=\'w\') as avg_file: avg_file.write(f\'{average_score:.2f}\') except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Write a function that takes in a DataFrame and a list of column names and returns a new DataFrame with only the rows where all specified columns have unique values. The function should raise the following exceptions: ValueError: If any specified column name is not valid. ValueError: If there are no columns specified. The function should return: DataFrame: A DataFrame containing only the rows where all specified columns have unique values. You should write self-contained code starting with: ``` import pandas as pd def filter_unique_rows(df, columns): ```","solution":"import pandas as pd def filter_unique_rows(df, columns): Returns a DataFrame with only the rows where all specified columns have unique values. Parameters: df (pd.DataFrame): The input DataFrame. columns (list): The list of column names to check for uniqueness. Returns: pd.DataFrame: A DataFrame containing only the rows where all specified columns have unique values. Raises: ValueError: If any specified column name is not valid or if no columns are specified. if not columns: raise ValueError(\\"No columns specified.\\") for col in columns: if col not in df.columns: raise ValueError(f\\"Column \'{col}\' is not valid.\\") is_unique = df[columns].duplicated(keep=False) return df[~is_unique]"},{"question":"You are required to write a function named `process_string(s)` that processes the input string `s` based on the following rules: 1. If the string `s` contains only alphabetic characters and has a length greater than 5, return the string with all vowels removed. For the purposes of this question, vowels are \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase). 2. If the string `s` contains only digits, return the integer value of the string modulo 7. 3. If the string `s` contains a combination of alphabetic characters and digits, return a string where digits are moved to the front and alphabetic characters are moved to the back, preserving their relative order. 4. For any other input, return the string \\"INVALID INPUT\\". You are required to handle the string manipulations and conversions efficiently without using external libraries other than Python\'s built-in string methods.","solution":"def process_string(s): Processes the input string `s` based on specific rules: 1. If `s` contains only alphabetic characters and its length is greater than 5, return the string with all vowels removed. 2. If `s` contains only digits, return the integer value of the string modulo 7. 3. If `s` contains both alphabetic characters and digits, return a string with digits moved to the front and alphabetic characters moved to the back. 4. For any other input, return \\"INVALID INPUT\\". if s.isalpha(): if len(s) > 5: vowels = \\"aeiouAEIOU\\" return \\"\\".join([char for char in s if char not in vowels]) else: return s # Rule for length <= 5 is not explicitly defined, assume no change elif s.isdigit(): return int(s) % 7 elif s.isalnum(): digits = \'\'.join([char for char in s if char.isdigit()]) letters = \'\'.join([char for char in s if char.isalpha()]) return digits + letters else: return \\"INVALID INPUT\\""},{"question":"You are tasked with creating a function called `reverse_nested_dict` to manage and process nested dictionary data structures. This function will take a nested dictionary as its input, where the values are dictionaries containing further nested dictionaries or key-value pairs. Your goal is to reverse this structure, such that the nested levels are flattened, and the innermost keys become the top-level keys in the resulting dictionary. # Task Breakdown: 1. **Flattening the Dictionary**: Recursively navigate through the nested dictionary and flatten it such that: - The new top-level keys are a combination of previous keys joined by underscores. - Example: If the input dictionary is `{ \\"a\\": { \\"b\\": { \\"c\\": 1, \\"d\\": 2 }}, \\"e\\": { \\"f\\": 3 }}`, the resulting dictionary should be `{ \\"a_b_c\\": 1, \\"a_b_d\\": 2, \\"e_f\\": 3 }`. 2. **Recursive Traversal**: Write a helper function `flatten_dict` to handle the recursive traversal and flattening of the nested dictionary. 3. **Handling Edge Cases**: Ensure that the function can handle empty dictionaries and deeply nested dictionaries correctly. # Function Signature: ```python def reverse_nested_dict(nested_dict): pass ``` # Example Usage: ```python input_dict = { \\"a\\": {\\"b\\": {\\"c\\": 1, \\"d\\": 2}}, \\"e\\": {\\"f\\": 3} } output_dict = reverse_nested_dict(input_dict) print(output_dict) # Output: {\'a_b_c\': 1, \'a_b_d\': 2, \'e_f\': 3} ``` # Libraries Required: - None # Constraints: - Input dictionaries do not contain cycles or references to themselves. - Key names are strings and values can be either integers, strings, or further nested dictionaries. Implement the function `reverse_nested_dict` based on the detailed description provided.","solution":"def reverse_nested_dict(nested_dict): Flattens a nested dictionary by combining keys with underscores. def flatten_dict(d, parent_key=\'\'): items = [] for k, v in d.items(): new_key = f\\"{parent_key}_{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key).items()) else: items.append((new_key, v)) return dict(items) return flatten_dict(nested_dict)"},{"question":"You are tasked to write a function that takes as input a list of integers and returns a list of the same integers, but ordered to alternate between the smallest available integer and the largest available integer until all integers have been placed. The function should handle both positive and negative integers. The function should be named `alternate_min_max` and have the following parameter: - `numbers`: A list of integers. Function definition: ```python def alternate_min_max(numbers): # Your code here return ``` **Requirements:** 1. The returned list should alternate between the minimum and maximum remaining integers. 2. If the input list is empty, return an empty list. 3. The function should handle both sorted and unsorted input lists. Example: ```python input_list = [3, 1, 4, 1, 5, 9, 2, 6, 5] print(alternate_min_max(input_list)) # Output: [1, 9, 1, 6, 2, 5, 3, 5, 4] input_list = [-10, -3, 0, 2, 3, 5, 8] print(alternate_min_max(input_list)) # Output: [-10, 8, -3, 5, 0, 3, 2] ```","solution":"def alternate_min_max(numbers): This function takes a list of integers and returns a new list in which the numbers alternate between the smallest available integer and the largest available integer. if not numbers: return [] numbers.sort() result = [] while numbers: result.append(numbers.pop(0)) # Append the smallest number if numbers: result.append(numbers.pop(-1)) # Append the largest number return result"},{"question":"**You are required to write a Python function named `analyze_stock_prices` that reads a list of stock prices (each price is a float) from a file and calculates the highest stock price, the lowest stock price, the average stock price, and the median stock price. The function will then output these statistics. Assume the file contains one stock price per line. The steps are as follows: 1. Read the stock prices from a specified file. 2. Compute the highest stock price. 3. Compute the lowest stock price. 4. Compute the average stock price. 5. Compute the median stock price. 6. Print the stock prices and the calculated statistics in a formatted manner. Implement the function structure as follows: ```python def analyze_stock_prices(filename): # Your code here ``` You can use the built-in Python functions and the `statistics` module to aid in your computations. Example interaction with the file \\"stock_prices.txt\\" containing the following stock prices: ``` 5.5 3.2 6.7 9.1 4.8 5.6 7.2 4.1 ``` The expected output of the function call `analyze_stock_prices(\\"stock_prices.txt\\")` would be: ``` Stock Prices: [5.5, 3.2, 6.7, 9.1, 4.8, 5.6, 7.2, 4.1] ================== Highest Price: 9.1 Lowest Price: 3.2 Average Price: 5.775 Median Price: 5.55 ================== ```","solution":"import statistics def analyze_stock_prices(filename): with open(filename, \'r\') as file: stock_prices = [float(line.strip()) for line in file] highest_price = max(stock_prices) lowest_price = min(stock_prices) average_price = statistics.mean(stock_prices) median_price = statistics.median(stock_prices) print(f\\"Stock Prices: {stock_prices}\\") print(\\"==================\\") print(f\\"Highest Price: {highest_price}\\") print(f\\"Lowest Price: {lowest_price}\\") print(f\\"Average Price: {average_price}\\") print(f\\"Median Price: {median_price}\\") print(\\"==================\\")"},{"question":"You are tasked with creating a function named `draw_spiral_hexagons()` that uses the `turtle` library to draw a pattern of hexagons that gradually increase in size, forming a spiral pattern. Write the `draw_spiral_hexagons()` function that uses the `turtle.Turtle` and `turtle.Screen` components from the `turtle` library to perform the following steps: 1. Create a screen with a light blue background color. 2. Create a turtle named \\"leo\\" with the following attributes: - Speed of 5. - Blue color. 3. Use a loop to draw 20 hexagons, with each successive hexagon being 10 units larger than the previous one. 4. After completing each hexagon, move the turtle to the starting point of the next hexagon and rotate it by 18 degrees to create a spiral effect. 5. Ensure the window waits for a mouse click to close. # Instructions: - Use `turtle.Screen()` to create the screen. - Use `turtle.Turtle()` to create and manage the turtle. - The turtle should draw each hexagon by moving forward the current side length and turning 60 degrees, repeating this 6 times. - Increase the side length of each subsequent hexagon by 10 units from the previous hexagon. - Make sure that the `draw_spiral_hexagons()` function does not take any arguments and doesn\'t return any values. # Example of Expected Output: When executed, the program will open a turtle graphics window, fill the background with a light blue color, and draw a spiral pattern of hexagons that radiate outward from the center, gradually increasing in size, creating a visually appealing spiral hexagonal pattern. The window will close when clicked.","solution":"import turtle def draw_spiral_hexagons(): # Set up the screen screen = turtle.Screen() screen.bgcolor(\\"light blue\\") # Set up the turtle leo = turtle.Turtle() leo.speed(5) leo.color(\\"blue\\") # Initial side length for the hexagons side_length = 10 for i in range(20): # Draw a hexagon for _ in range(6): leo.forward(side_length) leo.right(60) # Move to the starting point of the next hexagon leo.penup() leo.right(18) leo.forward(10) leo.pendown() # Increase side length side_length += 10 # Wait for the user to click to close the window screen.exitonclick()"},{"question":"You are given a 2-dimensional grid representing a game board. Each cell of the grid is either a 0 or a 1, where 0 represents an empty cell and 1 represents a cell occupied by a player\'s marker. The goal is to determine whether there are any straight lines (either horizontal, vertical, or diagonal) of at least 4 consecutive \'1\'s on the board. Your task is to write a function `has_consecutive_four(board)` that takes a 2-dimensional list `board` as input and returns a boolean value `True` if there are any lines of 4 or more consecutive \'1\'s, and `False` otherwise. The function should check for: 1. Horizontal lines 2. Vertical lines 3. Diagonal lines (both left-to-right and right-to-left) # Example: ```python # Example board: # 0 1 2 3 4 # 0 [0 1 0 0 1] # 1 [1 1 1 1 0] # 2 [0 0 1 0 0] # 3 [0 1 1 1 1] # 4 [1 0 0 1 0] board = [ [0, 1, 0, 0, 1], [1, 1, 1, 1, 0], [0, 0, 1, 0, 0], [0, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] result = has_consecutive_four(board) print(result) # Expected output: True ``` # Note: - Ensure that the function handles different board sizes appropriately. - Consider edge cases where the board might have fewer than 4 rows or columns.","solution":"def has_consecutive_four(board): Check if there are any lines of 4 or more consecutive \'1\'s in the board. def check_horizontal(): for row in board: count = 0 for cell in row: if cell == 1: count += 1 if count >= 4: return True else: count = 0 return False def check_vertical(): num_cols = len(board[0]) num_rows = len(board) for col in range(num_cols): count = 0 for row in range(num_rows): if board[row][col] == 1: count += 1 if count >= 4: return True else: count = 0 return False def check_diagonal(): num_rows = len(board) num_cols = len(board[0]) # Check left-to-right diagonals for row in range(num_rows): for col in range(num_cols): if row + 3 < num_rows and col + 3 < num_cols: if board[row][col] == board[row+1][col+1] == board[row+2][col+2] == board[row+3][col+3] == 1: return True # Check right-to-left diagonals for row in range(num_rows): for col in range(num_cols): if row + 3 < num_rows and col - 3 >= 0: if board[row][col] == board[row+1][col-1] == board[row+2][col-2] == board[row+3][col-3] == 1: return True return False return check_horizontal() or check_vertical() or check_diagonal()"},{"question":"You are required to write a function named `find_common_elements` that finds common elements in multiple lists of integers and returns them in sorted order. This function should take a list of lists as input and return a sorted list of elements that are present in every sub-list provided. Specifically: - The function will take a single parameter `list_of_lists`, which is a list containing multiple lists of integers. - The function should return a sorted list of integers that are common to all sub-lists. - If no common elements are found, the function should return an empty list. You should ensure that your function is efficient and can handle various lengths of input lists. Here is an example of how your function will be used: ```python list_of_lists = [ [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6] ] print(find_common_elements(list_of_lists)) # Should output: [3, 4] ``` Another example for reference: ```python list_of_lists = [ [10, 20, 30, 40], [20, 30, 50, 60], [15, 20, 30, 70] ] print(find_common_elements(list_of_lists)) # Should output: [20, 30] ```","solution":"def find_common_elements(list_of_lists): Returns a sorted list of integers that are common to all sub-lists in list_of_lists. if not list_of_lists: return [] # Initialize the set with the first sublist\'s elements common_elements = set(list_of_lists[0]) # Intersect with subsequent lists\' elements for sublist in list_of_lists[1:]: common_elements.intersection_update(sublist) # Convert the set to a sorted list and return it return sorted(common_elements)"},{"question":"You are given a string containing digits from 2 to 9 inclusive. Each digit maps to a set of letters, similar to the mapping on telephone buttons. This mapping is represented as below: ``` 2 -> [\'a\', \'b\', \'c\'] 3 -> [\'d\', \'e\', \'f\'] 4 -> [\'g\', \'h\', \'i\'] 5 -> [\'j\', \'k\', \'l\'] 6 -> [\'m\', \'n\', \'o\'] 7 -> [\'p\', \'q\', \'r\', \'s\'] 8 -> [\'t\', \'u\', \'v\'] 9 -> [\'w\', \'x\', \'y\', \'z\'] ``` **Task:** Implement the `letter_combinations` function that returns all possible letter combinations that the number could represent. The function should take a single string argument `digits` and return a list of strings representing all combinations. **Function Signature:** ```python def letter_combinations(digits: str) -> list: pass ``` **Example:** ```python digits = \\"23\\" output = letter_combinations(digits) print(output) ``` Expected output: ``` [\'ad\', \'ae\', \'af\', \'bd\', \'be\', \'bf\', \'cd\', \'ce\', \'cf\'] ``` **Requirements:** - If the input digits string is empty, return an empty list. - Use Python\'s `itertools.product` to generate combinations efficiently. - Ensure the function runs with a time complexity suitable for short input sequences (1 to 4 digits).","solution":"from itertools import product def letter_combinations(digits: str) -> list: if not digits: return [] digit_to_char = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Generate the list of possible characters for each digit chars = [digit_to_char[digit] for digit in digits] # Use itertools.product to generate all possible combinations combinations = list(product(*chars)) # Join tuples to form strings return [\'\'.join(combination) for combination in combinations]"},{"question":"# Background Binary Search is a fundamental algorithm that efficiently finds the position of a target value within a sorted array. It operates by repeatedly dividing the search interval in half. If the target value is less than the value in the middle of the interval, the search continues in the lower half, otherwise, it continues in the upper half until the value is found or the interval is empty. # Objective Your task is to write a Python function named `find_closest` that finds the closest value to a given target in a sorted list of integers using a variation of the binary search algorithm. # Function Definition ```python def find_closest(nums, target): Return the value in the sorted list nums that is closest to the target. ``` # Parameters - `nums`: A list of integers sorted in ascending order. - `target`: An integer target value. # Return - A single integer representing the value in `nums` that is closest to `target`. # Requirements - Implement the function using a variation of the binary search algorithm. - Handle cases where the target value is out of the bounds of the list. # Example Usage ```python nums = [1, 3, 5, 7, 9, 11] target = 6 result = find_closest(nums, target) print(result) # Output should be 5 or 7 because both are equidistant to 6 target = 8 result = find_closest(nums, target) print(result) # Output should be 7 since it is the closest value to 8 ``` # Note You should ensure that your solution is efficient and leverages the sorted nature of the list to minimize the search time.","solution":"def find_closest(nums, target): if not nums: raise ValueError(\\"The input list is empty.\\") low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] == target: return nums[mid] elif nums[mid] < target: low = mid + 1 else: high = mid - 1 # Determine the closest value between nums[high] and nums[low] if low >= len(nums): return nums[high] if high < 0: return nums[low] if abs(nums[low] - target) < abs(nums[high] - target): return nums[low] else: return nums[high]"},{"question":"You are given a list of strings, where each string represents a line in a bug report. Each line of the bug report specifies an action performed (either \\"ADD\\" or \\"REMOVE\\") along with a unique identifier (ID) and an associated timestamp. Your task is to implement the `process_bug_report` function which will simulate the processing of these actions and output the final state of tracked bugs, where each bug is uniquely identified by its ID. Here\'s the detailed format for the bug report lines: - Each line starts with the action (\\"ADD\\" or \\"REMOVE\\"). - Follows the bug ID. - The timestamp of the action. For example: ``` ADD BUG001 2023-10-01T12:00:00Z REMOVE BUG002 2023-10-02T12:00:00Z ADD BUG003 2023-10-03T12:00:00Z REMOVE BUG001 2023-10-04T12:00:00Z ``` The final state of tracked bugs should only include the IDs of bugs that have been added but not removed. Bugs that are mentioned in REMOVE actions without a prior ADD action should be ignored. # Function Signature ```python def process_bug_report(bug_lines: list) -> set: ``` # Input - A list of strings `bug_lines` where each string specifies an action performed, a unique bug identifier, and the timestamp of the action. # Output - A set of strings representing the IDs of bugs that are still being tracked after processing all actions. # Example ```python bug_lines = [ \\"ADD BUG001 2023-10-01T12:00:00Z\\", \\"REMOVE BUG002 2023-10-02T12:00:00Z\\", \\"ADD BUG003 2023-10-03T12:00:00Z\\", \\"REMOVE BUG001 2023-10-04T12:00:00Z\\" ] result = process_bug_report(bug_lines) print(result) ``` The printed output should be: ``` {\'BUG003\'} ```","solution":"def process_bug_report(bug_lines: list) -> set: Processes a list of bug report lines with ADD and REMOVE actions and returns the final state of tracked bugs. Parameters: bug_lines (list): A list of strings where each string represents a line in the bug report with the format: \\"ACTION BUGID TIMESTAMP\\". ACTION can be \\"ADD\\" or \\"REMOVE\\". Returns: set: A set of strings representing the bug IDs that are still being tracked after processing all actions. tracked_bugs = set() for line in bug_lines: action, bug_id, timestamp = line.split() if action == \\"ADD\\": tracked_bugs.add(bug_id) elif action == \\"REMOVE\\": tracked_bugs.discard(bug_id) return tracked_bugs"},{"question":"In this problem, you are tasked with creating a function named `nested_json_parser(json_data: dict) -> dict` that will parse a nested JSON object to generate a flat dictionary. Each key in the flat dictionary will represent the path to the corresponding value in the original JSON object, with nested keys connected by periods (\'.\'). The function parameters are: - `json_data` (dict): The input JSON object to be parsed, represented as a Python dictionary. The function should: 1. Traverse the entire nested JSON object to extract all the key-value pairs, preserving the hierarchical structure in the keys. 2. For each key from the original JSON object, concatenate the keys at each level with a period (\'.\') to form the key in the flat dictionary. 3. Store each terminal value in the flat dictionary with its corresponding hierarchical key. Assume typical data types for values in the JSON object (e.g., strings, integers, lists, nested dictionaries). Here is an example of how the function might be used and the expected output: ```python input_json = { \\"name\\": \\"John\\", \\"address\\": { \\"city\\": \\"San Francisco\\", \\"state\\": \\"CA\\", \\"coordinates\\": { \\"lat\\": 37.7749, \\"long\\": -122.4194 } }, \\"emails\\": [\\"john.doe@example.com\\", \\"jd@example.com\\"] } output = nested_json_parser(input_json) expected_output = { \\"name\\": \\"John\\", \\"address.city\\": \\"San Francisco\\", \\"address.state\\": \\"CA\\", \\"address.coordinates.lat\\": 37.7749, \\"address.coordinates.long\\": -122.4194, \\"emails\\": [\\"john.doe@example.com\\", \\"jd@example.com\\"] } # The function should return the following dictionary: # { # \\"name\\": \\"John\\", # \\"address.city\\": \\"San Francisco\\", # \\"address.state\\": \\"CA\\", # \\"address.coordinates.lat\\": 37.7749, # \\"address.coordinates.long\\": -122.4194, # \\"emails\\": [\\"john.doe@example.com\\", \\"jd@example.com\\"] # } ``` Requirements: - You must use recursion to traverse the nested JSON object. - The function should handle any depth of nested structures. - Lists should be preserved as they are, without flattening.","solution":"def nested_json_parser(json_data: dict) -> dict: def flatten_dict(d, parent_key=\'\'): items = [] for k, v in d.items(): new_key = f\\"{parent_key}.{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key).items()) else: items.append((new_key, v)) return dict(items) return flatten_dict(json_data)"},{"question":"You are required to implement a class to encode a string using the Run-Length Encoding (RLE) method. Run-Length Encoding is a simple form of data compression where consecutive occurrences of the same character are replaced with a single instance of the character followed by the number of occurrences. Create a class named `RunLengthEncoder`. The class should include the following methods: 1. `encode(s: str) -> str`: This method takes a string `s` and returns its run-length encoded version. 2. `decode(s: str) -> str`: This method takes a run-length encoded string `s` and returns the original string. **Function Signature:** ```python class RunLengthEncoder: def encode(self, s: str) -> str: pass def decode(self, s: str) -> str: pass ``` **Parameters:** - `s` (str): Input string to be encoded or decoded. **Returns:** - `encode`: Returns the run-length encoded string. - `decode`: Returns the original string decoded from the run-length encoded string. **Example:** ```python rle = RunLengthEncoder() encoded_string = rle.encode(\\"aaabbbcc\\") print(encoded_string) # Output: \\"a3b3c2\\" decoded_string = rle.decode(\\"a3b3c2\\") print(decoded_string) # Output: \\"aaabbbcc\\" ``` **Constraints:** - The input string for encoding will only contain uppercase and lowercase letters. - The input string for decoding is guaranteed to be valid run-length encoded string.","solution":"class RunLengthEncoder: def encode(self, s: str) -> str: if not s: return \\"\\" encoded_str = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_str.append(s[i - 1]) encoded_str.append(str(count)) count = 1 # Append the last group encoded_str.append(s[-1]) encoded_str.append(str(count)) return \'\'.join(encoded_str) def decode(self, s: str) -> str: decoded_str = [] i = 0 while i < len(s): char = s[i] count = 0 i += 1 while i < len(s) and s[i].isdigit(): count = count * 10 + int(s[i]) i += 1 decoded_str.append(char * count) return \'\'.join(decoded_str)"},{"question":"In this problem, you are required to write a function called `flatten_json` that flattens a nested JSON object into a single level dictionary with key names representing the hierarchical path. You will implement a recursive function to handle the nested JSON structure. # Function Signature: ```python def flatten_json(nested_json: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: ``` # Parameters: - `nested_json` (dict): A nested JSON object. - `parent_key` (str, optional): The base key string. Defaults to \'\'. - `sep` (str, optional): The separator between levels of hierarchy in the key names. Defaults to \'.\'. # Returns: - `dict`: A flattened dictionary where each key represents the original hierarchical structure separated by `sep`. # Example: ```python nested_json = { \\"a\\": { \\"b\\": { \\"c\\": 1, \\"d\\": 2 }, \\"e\\": 3 }, \\"f\\": 4 } flattened_json = flatten_json(nested_json) print(flattened_json) ``` The output should be: ``` { \'a.b.c\': 1, \'a.b.d\': 2, \'a.e\': 3, \'f\': 4 } ```","solution":"def flatten_json(nested_json, parent_key=\'\', sep=\'.\'): Flattens a nested JSON object into a single level dictionary with key names representing the hierarchical path. Parameters: - nested_json (dict): A nested JSON object. - parent_key (str, optional): The base key string. Defaults to \'\'. - sep (str, optional): The separator between levels of hierarchy in the key names. Defaults to \'.\'. Returns: - dict: A flattened dictionary where each key represents the original hierarchical structure separated by `sep`. items = [] for k, v in nested_json.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_json(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function that takes in a directory path and recursively searches for all JSON files within that directory. For each JSON file found, read the JSON content and extract all keys and values that contain a specific substring. Collect these key-value pairs across all JSON files and return them as a single dictionary. If a key or value appears multiple times, store them in a list under the respective key in the result dictionary. The function should output: dict: A dictionary with keys containing the specified substring and their corresponding values across all JSON files. You should write self-contained code starting with: ``` import os import json def search_json_files(directory, substring): ```","solution":"import os import json def search_json_files(directory, substring): Recursively search for all JSON files in the given directory, read their content, and extract keys and values that contain a specific substring. Combine these key-value pairs into a single dictionary, grouping values under their respective keys in a list. :param directory: str, path to the directory to search :param substring: str, substring to search for in keys and values :return: dict, dictionary with keys containing the specified substring and their corresponding values result = {} # Recursively traverse the directory for root, _, files in os.walk(directory): for file in files: if file.endswith(\\".json\\"): file_path = os.path.join(root, file) # Read the JSON content with open(file_path, \'r\', encoding=\'utf-8\') as f: try: data = json.load(f) except json.JSONDecodeError: continue # Extract keys and values containing the substring extract_matching_pairs(data, substring, result) return result def extract_matching_pairs(data, substring, result): Recursively extract key-value pairs from JSON data that contain a specific substring. Combine these key-value pairs into the result dictionary. :param data: dict or list, JSON data to extract from :param substring: str, substring to search for in keys and values :param result: dict, dictionary to store the key-value pairs if isinstance(data, dict): for key, value in data.items(): if substring in key or (isinstance(value, str) and substring in value): if key not in result: result[key] = [] result[key].append(value) if isinstance(value, (dict, list)): extract_matching_pairs(value, substring, result) elif isinstance(data, list): for item in data: extract_matching_pairs(item, substring, result)"},{"question":"You are given a list of events, and each event contains a starting time and an ending time formatted as strings in \\"HH:MM\\" format. Your task is to implement a function that determines the maximum number of overlapping events at any given time. Additionally, you are provided with a utility function that converts the time string to the number of minutes from the start of the day. # Function Signature ```python def max_overlapping_events(events): # Your code here pass ``` # Input - `events`: A list of tuples, where each tuple contains two strings representing the start and end times of an event in \\"HH:MM\\" format. # Output - An integer representing the maximum number of events that overlap at any given time. # Example ```python events = [(\\"10:00\\", \\"11:30\\"), (\\"10:30\\", \\"12:00\\"), (\\"11:00\\", \\"12:30\\"), (\\"12:00\\", \\"13:00\\")] result = max_overlapping_events(events) print(result) # Should output 3, as the maximum overlap occurs between 11:00 and 11:30 ``` # Instructions 1. Implement the utility function `time_to_minutes` that converts a time string in \\"HH:MM\\" format to the number of minutes from the start of the day. 2. Implement the function `max_overlapping_events` to determine the maximum number of events overlapping at any given time. 3. Use sorting and a sweep line algorithm to efficiently calculate the maximum number of overlapping events. 4. Ensure proper handling of edge cases such as: - Events that start and end at the same time. - Events with zero duration. # Utility Function Implement the following utility function: ```python def time_to_minutes(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes ``` # Approach 1. Convert all event times to minutes using the utility function. 2. Create two separate lists: one for start times and one for end times. 3. Sort both lists. 4. Use a sweep line approach to count the number of active events at any point in time and update the maximum overlap count accordingly. 5. Return the maximum number of overlapping events.","solution":"def time_to_minutes(time_str): Converts a time string in \\"HH:MM\\" format to the number of minutes from the start of the day. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def max_overlapping_events(events): Determines the maximum number of overlapping events at any given time. times = [] for start, end in events: times.append((time_to_minutes(start), \'start\')) times.append((time_to_minutes(end), \'end\')) # Sort times first by time, then by type (end before start if same time) times.sort(key=lambda x: (x[0], x[1] == \'start\')) max_overlap = 0 current_overlap = 0 for time, type in times: if type == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap"},{"question":"Write a function named `merge_alternate` that merges elements from two input lists by alternating elements from each list. If one list is longer than the other, the remaining elements from the longer list should be appended at the end of the resultant list. # Details: 1. **Function signature:** ```python def merge_alternate(list1, list2): ... ``` 2. **Parameters:** - `list1` (list): The first input list. - `list2` (list): The second input list. 3. **Returns:** - A list containing elements merged alternately from `list1` and `list2`. 4. **Concepts to learn:** - List manipulation in Python. - Handling lists of unequal lengths. - Efficient iteration over multiple sequences. # Example: Consider the following input: ```python list1 = [1, 2, 3] list2 = [\'a\', \'b\', \'c\', \'d\', \'e\'] ``` The function should return: ```python [1, \'a\', 2, \'b\', 3, \'c\', \'d\', \'e\'] ``` Another example: ```python list1 = [\'x\', \'y\'] list2 = [7, 8, 9] ``` The function should return: ```python [\'x\', 7, \'y\', 8, 9] ``` # Implementation Tips: - Ensure that the function works correctly even if one of the input lists is empty. - Use list comprehensions or zip function for a clean and efficient solution. - You may use itertools.zip_longest for handling lists of different lengths.","solution":"def merge_alternate(list1, list2): Merges two lists by alternating elements. If one list is longer, appends remaining elements. :param list1: The first input list. :param list2: The second input list. :return: A list with elements merged alternately from list1 and list2. merged_list = [] length1, length2 = len(list1), len(list2) min_length = min(length1, length2) for i in range(min_length): merged_list.append(list1[i]) merged_list.append(list2[i]) if length1 > length2: merged_list.extend(list1[min_length:]) else: merged_list.extend(list2[min_length:]) return merged_list"},{"question":"# Implement a K-Means Clustering Algorithm on a Given Dataset **Objective:** Develop a function named `perform_kmeans` that applies the K-Means clustering algorithm to a dataset provided through a custom `Dataset` object. The function should return the K-Means model and the cluster assignments for each data point in the dataset. K-Means is an unsupervised learning algorithm used to partition data into K distinct clusters. **Function Definition:** ```python def perform_kmeans(dataset_object, n_clusters): ``` **Arguments:** - `dataset_object`: An instance of the `Dataset` class which includes the dataset to be clustered. - `n_clusters`: An integer representing the number of clusters to form. **Returns:** - A tuple containing: - The K-Means model trained on the dataset. - A `pandas.DataFrame` with an additional column named \'cluster\' indicating the cluster assignment for each data point. # Dataset Class (for reference) Assume the `Dataset` class is available with the following structure: ```python class Dataset: def __init__(self, frame): self.frame = frame # a pandas DataFrame ``` # Requirements: 1. Use the `KMeans` class from the `sklearn.cluster` module to perform the clustering. 2. Assign each data point to a cluster using the fitted K-Means model. 3. Return both the K-Means model and the dataset with cluster assignments. # Example Usage: Here\'s an example of how the `perform_kmeans` function is expected to be used: ```python import pandas as pd from sklearn.cluster import KMeans # Assume this is your data as a pandas DataFrame data = pd.DataFrame({ \'feature1\': [1, 2, 1, 4], \'feature2\': [1, 4, 1, 4], \'feature3\': [1, 2, 1, 4] }) # Create a Dataset object dataset = Dataset(data) # Perform K-Means clustering with 2 clusters kmeans_model, clustered_data = perform_kmeans(dataset, 2) # Output the clustered data and KMeans model print(clustered_data) print(kmeans_model.cluster_centers_) ``` Implement the `perform_kmeans` function so that it meets the requirements and follows the example usage correctly.","solution":"import pandas as pd from sklearn.cluster import KMeans class Dataset: def __init__(self, frame): self.frame = frame def perform_kmeans(dataset_object, n_clusters): Applies the K-Means clustering algorithm to the dataset provided through the Dataset object. Arguments: - dataset_object: An instance of the Dataset class which includes the dataset to be clustered. - n_clusters: An integer representing the number of clusters to form. Returns: - A tuple containing: - The K-Means model trained on the dataset. - A pandas DataFrame with an additional column named \'cluster\' indicating the cluster assignment for each data point. data = dataset_object.frame kmeans_model = KMeans(n_clusters=n_clusters, random_state=42) clusters = kmeans_model.fit_predict(data) clustered_data = data.copy() clustered_data[\'cluster\'] = clusters return kmeans_model, clustered_data"},{"question":"In many scenarios, especially in financial analysis and stock market predictions, it\'s essential to calculate the Weighted Moving Average (WMA) of a time series. The WMA assigns different weights to each element in the time series, typically more weight to recent data points. You are required to write a Python function `weighted_moving_average(values: np.ndarray, weights: np.ndarray) -> np.ndarray` that computes the weighted moving average of the given time series with the specified weights. Use relevant NumPy functions to implement the solution efficiently. # Requirements: 1. **Function Name**: `weighted_moving_average`. 2. **Function Arguments**: - `values` (np.ndarray): An array of numerical values representing the time series. - `weights` (np.ndarray): An array of weights of the same length as the window size. 3. **Returns**: A NumPy array of the weighted moving average values. # Steps: 1. Verify that the length of the weights array is less than or equal to the length of the values array. 2. Slide the weights window over the values array to calculate the weighted average for each position. 3. For each position of the window, multiply the corresponding values and weights, then sum the results. 4. Collect these summed values into a new array representing the weighted moving averages. **Note**: Ensure the function uses NumPy functions for efficient computation. # Example: ```python import numpy as np values = np.array([1, 2, 3, 4, 5, 6, 7, 8]) weights = np.array([0.1, 0.3, 0.6]) result = weighted_moving_average(values, weights) print(result) # Should print an array of the weighted moving average values. ``` # Example Output: For the above example, the output should consider the valid spans of the weights over the values array: ```python array([2.5, 3.5, 4.5, 5.5, 6.5]) # Example corresponding output array ```","solution":"import numpy as np def weighted_moving_average(values: np.ndarray, weights: np.ndarray) -> np.ndarray: Computes the weighted moving average of the given time series with specified weights. Args: values (np.ndarray): An array of numerical values representing the time series. weights (np.ndarray): An array of weights of the same length as the window size. Returns: np.ndarray: A NumPy array of the weighted moving average values. window_size = len(weights) if window_size > len(values): raise ValueError(\\"The length of the weights array must be less than or equal to the length of the values array\\") wma = np.convolve(values, weights[::-1], mode=\'valid\') return wma"},{"question":"**Title: Detecting Cycles in a Directed Graph** You are given a directed graph represented as an adjacency list. Your task is to write a function that detects whether there is at least one cycle in the graph. You need to implement the `has_cycle(graph)` function, which should follow the steps outlined below: 1. **Function Signature** ```python def has_cycle(graph): ``` 2. **Parameters**: - `graph`: A dictionary where keys are nodes and values are lists of nodes representing the directed edges from the key node. Example: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'E\'], \'D\': [\'F\'], \'E\': [\'A\'], # Cycle here A -> B -> C -> E -> A \'F\': [] } ``` 3. **Returns**: - A boolean value: `True` if there is at least one cycle in the graph, `False` otherwise. 4. **Algorithm**: - Use depth-first search (DFS) to detect cycles. - Maintain a visited set to keep track of nodes currently in the DFS stack. - If a node is revisited within the same DFS path, a cycle exists. - Use an additional set to keep track of fully explored nodes to improve efficiency. 5. **Constraints**: - The graph may have up to 10^4 nodes. - Nodes are represented by unique, case-sensitive strings. - Ensure that your solution handles multiple disconnected components efficiently. # Example Usage ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'E\'], \'D\': [\'F\'], \'E\': [\'A\'], # Cycle here A -> B -> C -> E -> A \'F\': [] } print(has_cycle(graph)) # Output: True graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\'], \'C\': [\'D\'], \'D\': [\'E\'], \'E\': [] } print(has_cycle(graph)) # Output: False ``` #","solution":"def has_cycle(graph): Detects if there is at least one cycle in the directed graph. Parameters: graph (dict): A dictionary where keys are nodes and values are lists of nodes representing the directed edges from the key node. Returns: bool: True if there is at least one cycle in the graph, False otherwise. visited = set() stack = set() def dfs(node): if node in stack: return True if node in visited: return False stack.add(node) visited.add(node) for neighbor in graph.get(node, []): if dfs(neighbor): return True stack.remove(node) return False for node in graph: if dfs(node): return True return False"},{"question":"You are given a DataFrame `df` that contains a column labeled \'Sales\', which includes the sale amounts for various transactions in a store. Your task is to create a function called `sales_analysis(df)` that calculates and displays the following statistics: 1. Total sales amount. 2. Average sales amount. 3. The highest sale amount and the corresponding row index. 4. The lowest sale amount and the corresponding row index. The function should print the results in a clear and formatted manner. To solve this problem, you must use the following Python standard library modules: - `pandas` - `time` Here is an outline of what your function should do: 1. Calculate the total sales amount by summing all values in the \'Sales\' column. 2. Calculate the average sales amount. 3. Identify the highest sale amount and its corresponding row index. 4. Identify the lowest sale amount and its corresponding row index. 5. Measure and print the total time taken for these calculations using `time.time`. # Example Usage: ```python import pandas as pd data = {\'Sales\': [250, 150, 350, 400, 180]} df = pd.DataFrame(data) sales_analysis(df) ``` Expected Output: ``` Calculating Sales Analysis... Total sales amount: 1330.00 Average sales amount: 266.00 Highest sale amount: 400.00 at index 3 Lowest sale amount: 150.00 at index 1 This took X seconds. ---------------------------------------- ```","solution":"import pandas as pd import time def sales_analysis(df): Calculate and display sales analysis statistics. Parameters: df (pandas.DataFrame): DataFrame containing \'Sales\' column. Prints: - Total sales amount - Average sales amount - Highest sale amount and the corresponding row index - Lowest sale amount and the corresponding row index - Time taken for the calculations print(\\"Calculating Sales Analysis...\\") start_time = time.time() total_sales = df[\'Sales\'].sum() avg_sales = df[\'Sales\'].mean() highest_sale_amount = df[\'Sales\'].max() highest_sale_index = df[\'Sales\'].idxmax() lowest_sale_amount = df[\'Sales\'].min() lowest_sale_index = df[\'Sales\'].idxmin() elapsed_time = time.time() - start_time print(f\\"Total sales amount: {total_sales:.2f}\\") print(f\\"Average sales amount: {avg_sales:.2f}\\") print(f\\"Highest sale amount: {highest_sale_amount:.2f} at index {highest_sale_index}\\") print(f\\"Lowest sale amount: {lowest_sale_amount:.2f} at index {lowest_sale_index}\\") print(f\\"nThis took {elapsed_time:.6f} seconds.\\") print(\\"----------------------------------------\\")"},{"question":"In data analysis and scientific computing, accurate numerical integration is critical for solving differential equations, computing areas, and other applications involving continuous functions. One of the simplest and most widely used techniques for numerical integration is Simpson\'s Rule. Your task is to write a Python function `simpsons_rule(f, a, b, n)` that approximates the definite integral of a given function ( f(x) ) from ( a ) to ( b ) using Simpson\'s Rule. # Parameters: - **f (function):** The integrand function ( f(x) ), a Python callable that takes a single argument ( x ) and returns a float. - **a (float):** The lower limit of integration. - **b (float):** The upper limit of integration. - **n (int):** The number of intervals to divide [a, b] into. Must be an even number. # Return: - **result (float):** The approximate value of the definite integral using Simpson\'s Rule. # Requirements: - The number of intervals ( n ) must be even. - Implement the Simpson\'s Rule formula: [ int_{a}^{b} f(x) ,dx approx frac{h}{3} left[f(a) + 4 sum_{i=1, 3, 5, ldots}^{n-1} f(a + ih) + 2 sum_{i=2, 4, 6, ldots}^{n-2} f(a + ih) + f(b)right] ] where ( h = frac{b - a}{n} ). # Example: ```python def simpsons_rule(f, a, b, n): if n % 2 != 0: raise ValueError(\\"Number of intervals must be even\\") h = (b - a) / n integral = f(a) + f(b) for i in range(1, n, 2): integral += 4 * f(a + i * h) for i in range(2, n-1, 2): integral += 2 * f(a + i * h) integral *= h / 3 return integral # Example usage import math # Define the function to integrate def func(x): return math.exp(-x**2) # Compute the integral from 0 to 1 with 10 intervals result = simpsons_rule(func, 0, 1, 10) print(f\\"The integral is approximately: {result}\\") ``` This function is useful for approximating integrals of continuous functions over a given interval, especially useful in scientific computing and data analysis tasks.","solution":"def simpsons_rule(f, a, b, n): if n % 2 != 0: raise ValueError(\\"Number of intervals must be even\\") h = (b - a) / n integral = f(a) + f(b) for i in range(1, n, 2): integral += 4 * f(a + i * h) for i in range(2, n, 2): integral += 2 * f(a + i * h) integral *= h / 3 return integral"},{"question":"You are tasked with writing a function called `flatten_nested_list` that flattens a nested list of integers into a single list of integers. The nested list may contain integers and other nested lists, and the depth of nesting is not fixed. The function should perform the following steps: 1. Traverse the nested list, identifying both individual integers and sublists. 2. Collect all integers into a new list such that the order of appearance in the original nested list is preserved. Write the function with the following signature: ```python def flatten_nested_list(nested_list: list) -> list: ``` # Example Given a nested list: ```python nested_list = [1, [2, [3, 4], 5], 6, [7, [8]], 9] ``` After executing `flatten_nested_list(nested_list)`, the function should return: ```python [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` # Requirements - The function should be able to handle deeply nested lists. - The function should preserve the order of integers as they appear in the original nested list. - Avoid using built-in functions that automatically flatten lists. Write a custom solution.","solution":"def flatten_nested_list(nested_list: list) -> list: Flattens a nested list of integers into a single list of integers. :param nested_list: A list which may contain integers and nested lists of integers. :return: A flattened list of all integers. flattened_list = [] def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item) else: flattened_list.append(item) flatten(nested_list) return flattened_list"},{"question":"You are asked to create a function that calculates the principal moments of inertia and the orientation of the principal axes of a rigid body in a three-dimensional space given its mass distribution. The moments of inertia need to be computed with respect to the principal axes through the center of mass. Write a function `compute_principal_inertia` that takes the following parameters: - `Ixx`, `Iyy`, `Izz`: Moments of inertia about the x, y, and z axes. - `Ixy`, `Ixz`, `Iyz`: Products of inertia. The function should return a tuple containing: 1. A list of the principal moments of inertia in ascending order. 2. The corresponding eigenvectors as columns of a 3x3 numpy array. Here\'s a breakdown of the required steps within your function: 1. Construct the inertia tensor as a 3x3 numpy array using the given moments and products of inertia. 2. Use numpy\'s linear algebra functions to compute the eigenvalues and eigenvectors of the inertia tensor. 3. Sort the eigenvalues and their corresponding eigenvectors in ascending order. 4. Return the sorted eigenvalues as the list of principal moments of inertia and the sorted eigenvectors as a 3x3 numpy array. ```python import numpy as np def compute_principal_inertia(Ixx, Iyy, Izz, Ixy, Ixz, Iyz): # Construct the inertia tensor inertia_tensor = np.array([ [Ixx, -Ixy, -Ixz], [-Ixy, Iyy, -Iyz], [-Ixz, -Iyz, Izz] ]) # Compute eigenvalues and eigenvectors eigenvalues, eigenvectors = np.linalg.eigh(inertia_tensor) # Sort the eigenvalues and eigenvectors idx = eigenvalues.argsort() principal_moments = eigenvalues[idx].tolist() principal_axes = eigenvectors[:, idx] return principal_moments, principal_axes ``` Make sure that the principles of linear algebra and numpy operations are adequately utilized in your implementation. Your function should only perform these computations and return the specified results in the required format.","solution":"import numpy as np def compute_principal_inertia(Ixx, Iyy, Izz, Ixy, Ixz, Iyz): Computes the principal moments of inertia and the orientation of the principal axes Args: Ixx, Iyy, Izz: Moments of inertia about the x, y, and z axes. Ixy, Ixz, Iyz: Products of inertia. Returns: - A list of the principal moments of inertia in ascending order. - A 3x3 numpy array where columns are the corresponding eigenvectors. # Construct the inertia tensor inertia_tensor = np.array([ [Ixx, -Ixy, -Ixz], [-Ixy, Iyy, -Iyz], [-Ixz, -Iyz, Izz] ]) # Compute eigenvalues and eigenvectors eigenvalues, eigenvectors = np.linalg.eigh(inertia_tensor) # Sort the eigenvalues and eigenvectors idx = eigenvalues.argsort() principal_moments = eigenvalues[idx].tolist() principal_axes = eigenvectors[:, idx] return principal_moments, principal_axes"},{"question":"You are required to implement a Python function that analyzes and processes chess game data in order to determine the frequency of opening moves. The input will be a list of strings, each representing the sequence of moves made in a chess game. The function should return a dictionary where the keys are the distinct opening moves (the first move of the game) and the values are the counts of how often each opening move appears. # Specification: - **Function Name**: `analyze_openings` - **Parameters**: - `games` (list of str): A list of chess games, where each game is represented by a space-separated string of moves, e.g., `\\"e4 e5 Nf3 Nc6 Bb5 a6\\"`. - **Returns**: (dict): A dictionary with the opening moves as keys and their frequencies as values. # Requirements: 1. The function should correctly parse the input list to identify the first move of each game. 2. The return value should be a dictionary with the opening moves as keys and integers representing the counts as values. 3. The function must handle the case of an empty input list by returning an empty dictionary. 4. Case sensitivity must be handled properly, treating moves like `\\"E4\\"` and `\\"e4\\"` as the same move. # Example: ```python games = [ \\"e4 e5 Nf3 Nc6 Bb5 a6\\", \\"d4 d5 c4 c6\\", \\"e4 c5 Nf3 d6\\", \\"e4 e6 d4 d5\\" ] result = analyze_openings(games) print(result) ``` This should output: ```python { \\"e4\\": 3, \\"d4\\": 1 } ``` # Note: - Ensure that your function correctly handles varying lengths of games. - You may assume that each string in the input list is a valid sequence of chess moves. - Consider using Python\'s `defaultdict` from the `collections` module for cleaner code when counting opening moves.","solution":"from collections import defaultdict def analyze_openings(games): Takes a list of chess game move strings and returns a dictionary with the frequency count of each opening move. Args: games (list of str): List of chess games, where each game is a string of space-separated moves. Returns: dict: A dictionary with opening moves as keys and their frequencies as values. opening_counts = defaultdict(int) for game in games: if game.strip(): # ensure the game is not just a whitespace string first_move = game.split()[0].lower() opening_counts[first_move] += 1 return dict(opening_counts)"},{"question":"You are tasked with creating a function named `find_lowest_price_products` that identifies products with the lowest price from a list of dictionaries, where each dictionary represents a product. The `find_lowest_price_products` function should take one argument: 1. `products`: A list of dictionaries, where each dictionary contains the keys `\'name\'` (the name of the product) and `\'price\'` (the price of the product as a float). **Requirements**: 1. Determine the lowest price among the products. 2. Collect all product names that have this lowest price. 3. Return a sorted list (in alphabetical order) of product names that have the lowest price. # Example Given the list of products: ```python products = [ {\\"name\\": \\"apple\\", \\"price\\": 1.0}, {\\"name\\": \\"banana\\", \\"price\\": 0.5}, {\\"name\\": \\"orange\\", \\"price\\": 1.0}, {\\"name\\": \\"kiwi\\", \\"price\\": 0.5} ] ``` The function call: ```python find_lowest_price_products(products) ``` Should return: ```python [\\"banana\\", \\"kiwi\\"] ``` # Constraints - Assume all product names are unique. - The function should handle the case where the list is empty by returning an empty list. - Consider edge cases where multiple products have the exact same price. # Note This function should not modify the original list of products.","solution":"def find_lowest_price_products(products): Identifies products with the lowest price from a list of dictionaries. Args: products (list of dict): A list of dictionaries, where each dictionary contains the keys \'name\' and \'price\'. Returns: list: A sorted list of product names that have the lowest price. if not products: return [] # Find the lowest price lowest_price = min(product[\'price\'] for product in products) # Collect all product names that have the lowest price lowest_price_products = [product[\'name\'] for product in products if product[\'price\'] == lowest_price] # Return the sorted list of product names return sorted(lowest_price_products)"},{"question":"You need to develop a function that takes an input string containing only alphabetic characters and spaces, and transforms it into a camelCase string. In camelCase, the first letter of each word is capitalized except for the first word, which is entirely in lowercase. All spaces should be removed in the resultant string. **Function Specification**: - Function Name: `convert_to_camel_case` - Parameters: - `input_string` (str): A string containing alphabetic characters and spaces. - Returns: - A string transformed into camelCase format. **Detailed Instructions**: 1. Split the input string by spaces to separate the words. 2. Convert the first word entirely to lowercase. 3. Capitalize the first letter of each subsequent word while keeping the rest of the characters in lowercase. 4. Concatenate all words together without any spaces to form the final camelCase string. 5. Return the resulting camelCase string. Example: ```python input_string = \\"hello world this is a test string\\" result = convert_to_camel_case(input_string) print(result) # Output: \\"helloWorldThisIsATestString\\" input_string = \\" This is an example \\" result = convert_to_camel_case(input_string) print(result) # Output: \\"thisIsAnExample\\" ```","solution":"def convert_to_camel_case(input_string): Convert a string containing alphabetic characters and spaces into camelCase format. Parameters: input_string (str): A string containing alphabetic characters and spaces. Returns: str: A string transformed into camelCase format. words = input_string.split() if not words: return \\"\\" # Convert the first word to lowercase camel_case_string = words[0].lower() # Capitalize the first letter of the subsequent words and concatenate for word in words[1:]: camel_case_string += word.capitalize() return camel_case_string"},{"question":"**Validating Sudoku Solution** A Sudoku puzzle is a 9x9 grid composed of 3x3 sub-grids (also known as \\"regions\\"), where the objective is to fill the grid with digits from 1 to 9. Each number must appear exactly once in each row, column, and region. Given a completed Sudoku puzzle, your task is to validate whether it’s correctly solved. You are required to implement the `is_valid_sudoku` function to check if the given Sudoku puzzle is valid. **Function Signature:** ```python def is_valid_sudoku(grid: [[int]]) -> bool: Validates if a given Sudoku grid is correctly solved. :param grid: 2D list representing a completed Sudoku puzzle (9x9 grid) containing digits 1 to 9. :return: True if the Sudoku puzzle is valid, False otherwise. ``` **Constraints:** 1. The grid will always be a 9x9 matrix. 2. All elements in the grid are integers from 1 to 9. **Hint:** - Check that each row, column, and 3x3 sub-grid contains all the digits from 1 to 9 exactly once.","solution":"def is_valid_sudoku(grid): def is_valid_block(block): # A valid block should contain digits 1 to 9 with no repetition return sorted(block) == list(range(1, 10)) for i in range(9): # Check rows if not is_valid_block(grid[i]): return False # Check columns if not is_valid_block([grid[j][i] for j in range(9)]): return False # Check 3x3 subgrids for row in range(0, 9, 3): for col in range(0, 9, 3): block = [] for i in range(3): for j in range(3): block.append(grid[row + i][col + j]) if not is_valid_block(block): return False return True"},{"question":"Write a function `passwordStrength` that evaluates the strength of a given password based on the following criteria: - At least 8 characters long. - Contains both uppercase and lowercase characters. - Includes at least one numerical digit. - Contains at least one special character (such as !, @, #, , etc.). The function should return `\\"Strong\\"` if the password meets all the conditions, `\\"Medium\\"` if it meets three of the four conditions, and `\\"Weak\\"` if it meets fewer than three conditions. Write the function `passwordStrength(password)` where: - The function takes a string `password` as its only argument. Use the following steps: 1. Validate the length of the password. 2. Check for the presence of uppercase and lowercase characters. 3. Check for the presence of digits. 4. Check for the presence of special characters. 5. Return `\\"Strong\\"`, `\\"Medium\\"`, or `\\"Weak\\"` based on the conditions met. Example: ```python def passwordStrength(password): # Your implementation here ``` For example, calling `passwordStrength(\\"P@ssw0rd123\\")` should return `\\"Strong\\"` and calling `passwordStrength(\\"weak\\")` should return `\\"Weak\\"`.","solution":"def passwordStrength(password): Evaluates the strength of a given password. Arguments: password -- the password string to evaluate Returns: \'Strong\' if the password meets all the conditions, \'Medium\' if it meets three of the four conditions, \'Weak\' if it meets fewer than three conditions. conditions_met = 0 # Check if the password is at least 8 characters long if len(password) >= 8: conditions_met += 1 # Check for the presence of both uppercase and lowercase characters if any(c.islower() for c in password) and any(c.isupper() for c in password): conditions_met += 1 # Check for the presence of at least one numerical digit if any(c.isdigit() for c in password): conditions_met += 1 # Check for the presence of at least one special character special_characters = \\"!@#%^&*()-_=+[]{}|;:\'\\",.<>?/`~\\" if any(c in special_characters for c in password): conditions_met += 1 # Determine the strength based on conditions met if conditions_met == 4: return \\"Strong\\" elif conditions_met == 3: return \\"Medium\\" else: return \\"Weak\\""},{"question":"You are tasked with writing a function `string_transform` that processes a given input string to perform transformations based on specific commands. The input string can contain two types of transformation commands: \\"reverse\\" or \\"replace\\". 1. A command with the format `\\"reverse(start, end)\\"` means it should match the pattern `reverse(n, m)` where `n` and `m` are starting and ending indices (inclusive) in the string. When this pattern is matched, the substring from index `n` to index `m` inclusive should be reversed in place. 2. A command with the format `\\"replace(old, new)\\"` means it should match the pattern `replace(\'old\', \'new\')` where `\'old\'` is a substring that needs to be found in the input string and replaced with `\'new\'`. The `\'old\'` substring will only be replaced once, at its first occurrence. Here\'s the prototype of the function you need to implement: ```python def string_transform(s: str, command: str) -> str: pass ``` # Requirements: - Assume indices for the \\"reverse\\" command are zero-based. - The `\'old\'` and `\'new\'` substrings for the \\"replace\\" command will not contain any special regex characters. # Example Usage: 1. Input: `(\\"abcdef\\", \\"reverse(1, 4)\\")` Output: `\\"aedcbf\\"` 2. Input: `(\\"hello world\\", \\"replace(\'world\', \'there\')\\")` Output: `\\"hello there\\"` # Constraints: - The input command will always be in one of the two specified formats. - For \\"reverse\\" commands, you can assume `0 <= start <= end < len(s)`. - For \\"replace\\" commands, the `\'old\'` substring will exist at least once in the input string. # Sample Implementation: ```python import re def string_transform(s: str, command: str) -> str: reverse_pattern = r\\"reverse((d+),s*(d+))\\" replace_pattern = r\\"replace(\'([^\']+)\'s*,s*\'([^\']+)\')\\" match = re.fullmatch(reverse_pattern, command) if match: start, end = map(int, match.groups()) s = s[:start] + s[start:end+1][::-1] + s[end+1:] return s match = re.fullmatch(replace_pattern, command) if match: old, new = match.groups() s = s.replace(old, new, 1) return s return s # Example usage print(string_transform(\\"abcdef\\", \\"reverse(1, 4)\\")) # Output: \\"aedcbf\\" print(string_transform(\\"hello world\\", \\"replace(\'world\', \'there\')\\")) # Output: \\"hello there\\" ```","solution":"import re def string_transform(s: str, command: str) -> str: reverse_pattern = r\\"reverse((d+),s*(d+))\\" replace_pattern = r\\"replace(\'([^\']+)\'s*,s*\'([^\']+)\')\\" match = re.fullmatch(reverse_pattern, command) if match: start, end = map(int, match.groups()) s = s[:start] + s[start:end+1][::-1] + s[end+1:] return s match = re.fullmatch(replace_pattern, command) if match: old, new = match.groups() s = s.replace(old, new, 1) return s return s"},{"question":"--- You need to write a function that calculates the Manhattan distance between two points in an N-dimensional space. The Manhattan distance between two points is the sum of the absolute differences of their corresponding coordinates. The function should be named `manhattan_distance`. It should take two parameters, `point1` and `point2`, both of which are lists or tuples of numerical values representing the coordinates of the points. Ensure that `point1` and `point2` have the same number of dimensions and raise an assertion error if they do not. Use list comprehension and the built-in `abs` function for the calculation. Function signature: ```python def manhattan_distance(point1, point2): pass ``` The formula for Manhattan Distance is: [ D = sum_{i=1}^{n} |point1_i - point2_i| ] where (n) is the number of dimensions in `point1` and `point2`. Constraints: - Both input lists/tuples will contain at least one element. - Elements of the input lists/tuples will be of numerical type (integer or float). Examples: ```python point1 = [1, 2, 3] point2 = [4, 0, -1] print(manhattan_distance(point1, point2)) # Output should be 9 point1 = [7, 6] point2 = [3, 1] print(manhattan_distance(point1, point2)) # Output should be 9 ```","solution":"def manhattan_distance(point1, point2): Calculate the Manhattan distance between two points in an N-dimensional space. Parameters: point1 (list or tuple): The coordinates of the first point. point2 (list or tuple): The coordinates of the second point. Returns: int or float: The Manhattan distance between the two points. Raises: AssertionError: If `point1` and `point2` do not have the same number of dimensions. assert len(point1) == len(point2), \\"Both points must have the same number of dimensions\\" return sum(abs(c1 - c2) for c1, c2 in zip(point1, point2))"},{"question":"You are required to implement a function to simulate the inventory management of a retail store. The store sells various products, and a record of sales needs to be maintained to track inventory levels accurately. **Instructions:** - Implement the function `update_inventory(products, transactions)`. - The function takes in two arguments: - `products`: A dictionary where keys are product names and values are the initial inventory levels of each product. - `transactions`: A list of tuples, where each tuple represents a sale transaction in the format `(product_name, quantity_sold)`. - The function should update the inventory levels in the `products` dictionary based on the sales transactions. If a transaction tries to sell more units than are available, it should not perform the transaction and print an error message indicating insufficient stock. **Guidelines:** - Iterate through the `transactions` list and for each transaction, update the corresponding product\'s inventory. - Ensure that the inventory level is never negative. - If a transaction cannot be completed due to insufficient stock, print the message: `\\"Error: Not enough stock for <product_name>\\"`. Here’s a full example of what the function should do: ```python # Function to implement def update_inventory(products, transactions): pass # Example usage: products = { \\"apple\\": 10, \\"banana\\": 5, \\"orange\\": 8 } transactions = [ (\\"apple\\", 3), (\\"banana\\", 6), # This should print an error message (\\"orange\\", 2), (\\"apple\\", 5) ] # After calling the function, products should be updated as follows: # products = { # \\"apple\\": 2, # \\"banana\\": 5, # \\"orange\\": 6 # } update_inventory(products, transactions) print(products) ``` Output: ``` Error: Not enough stock for banana {\'apple\': 2, \'banana\': 5, \'orange\': 6} ```","solution":"def update_inventory(products, transactions): for product_name, quantity_sold in transactions: if product_name in products: if products[product_name] >= quantity_sold: products[product_name] -= quantity_sold else: print(f\\"Error: Not enough stock for {product_name}\\") else: print(f\\"Error: Product {product_name} does not exist in inventory\\") return products"},{"question":"You are tasked to create a function named `filter_and_group_sales_data` that processes a CSV file containing sales data for a retail store. The goal of this function is to filter the data for a specific year and then group the filtered data by product category to calculate the total sales for each category. The CSV file will contain multiple columns, including \'year\', \'category\', and \'sales\'. In your implementation of the `filter_and_group_sales_data` function, you are required to: 1. Read the input CSV file using the `pandas.read_csv` function. 2. Filter the DataFrame to include only the rows where the \'year\' column matches the input parameter `target_year`. 3. Group the filtered DataFrame by the \'category\' column. 4. Calculate the total sales for each category by summing up the \'sales\' column within each group. 5. Return a new DataFrame with two columns: \'category\' and \'total_sales\', sorted by \'total_sales\' in descending order. Your function should take two parameters: `file_path` (the path to the CSV file) and `target_year` (the year to filter by). It should return the filtered and grouped DataFrame. Example: Given the following CSV file content (sales_data.csv): ``` year,category,product,sales 2022,Electronics,Laptop,1200 2022,Furniture,Chair,350 2021,Electronics,Tablet,800 2022,Electronics,Smartphone,600 2022,Furniture,Table,450 2021,Furniture,Sofa,700 ``` For `target_year = 2022`, your function should return: ``` category total_sales 0 Electronics 1800 1 Furniture 800 ``` Please ensure to use the `pandas.read_csv` function and the required DataFrame operations to match the specified output format.","solution":"import pandas as pd def filter_and_group_sales_data(file_path, target_year): # Read the input CSV file df = pd.read_csv(file_path) # Filter the DataFrame for the target year filtered_df = df[df[\'year\'] == target_year] # Group the filtered DataFrame by \'category\' grouped_df = filtered_df.groupby(\'category\', as_index=False).agg({\'sales\': \'sum\'}) # Rename the column for total sales grouped_df.rename(columns={\'sales\': \'total_sales\'}, inplace=True) # Sort the DataFrame by \'total_sales\' in descending order result_df = grouped_df.sort_values(by=\'total_sales\', ascending=False) return result_df"},{"question":"You are required to design a function that generates random passwords based on given complexity requirements. The passwords should contain a mix of uppercase letters, lowercase letters, digits, and special characters. The function should ensure that the generated passwords meet the specified length and complexity criteria. Here is the function signature you need to implement: ```python def generate_password(length, complexity): Generates a random password based on the specified length and complexity. Parameters: length (int): The desired length of the password. complexity (int): The complexity level of the password. 1 - Password contains only lowercase letters. 2 - Password contains lowercase and uppercase letters. 3 - Password contains letters and digits. 4 - Password contains letters, digits, and special characters. Returns: str: A randomly generated password. ``` # Requirements: 1. For complexity level 1, the password must contain only lowercase letters. 2. For complexity level 2, the password must contain both lowercase and uppercase letters. 3. For complexity level 3, the password must include lowercase letters, uppercase letters, and digits. 4. For complexity level 4, the password must include lowercase letters, uppercase letters, digits, and special characters. 5. The function should raise a ValueError if the specified length is less than the minimum complexity requirements (4 for level 4). # Example Input: ```python length = 12 complexity = 3 ``` # Example Output: A random password of length 12 containing a mix of lowercase and uppercase letters, and digits, e.g., `aBcD3F6gHi9J`. # Functionality: Use the `random` module to generate the password and ensure that the generated password meets the complexity requirements based on the specified level.","solution":"import random import string def generate_password(length, complexity): Generates a random password based on the specified length and complexity. Parameters: length (int): The desired length of the password. complexity (int): The complexity level of the password. 1 - Password contains only lowercase letters. 2 - Password contains lowercase and uppercase letters. 3 - Password contains letters and digits. 4 - Password contains letters, digits, and special characters. Returns: str: A randomly generated password. if length < 4: raise ValueError(\\"Password length must be at least 4 characters.\\") if complexity < 1 or complexity > 4: raise ValueError(\\"Complexity level must be between 1 and 4.\\") if complexity == 1: characters = string.ascii_lowercase elif complexity == 2: characters = string.ascii_letters elif complexity == 3: characters = string.ascii_letters + string.digits elif complexity == 4: characters = string.ascii_letters + string.digits + string.punctuation password = [random.choice(characters) for _ in range(length)] if complexity >= 2: # Ensure at least one uppercase letter for complexity 2 and above password[0] = random.choice(string.ascii_uppercase) if complexity >= 3: # Ensure at least one digit for complexity 3 and above password[1] = random.choice(string.digits) if complexity == 4: # Ensure at least one special character for complexity 4 password[2] = random.choice(string.punctuation) random.shuffle(password) return \'\'.join(password)"},{"question":"You are tasked with implementing a function to manage student records. Specifically, your goal is to create a function that takes a list of student dictionaries and sorts these students based on their grades. If two students have the same grade, they should be sorted alphabetically by their names. Each student dictionary has the following structure: - `name` (str): The name of the student. - `grade` (int): The grade received by the student. Your function, `sort_students`, should perform the following operations: 1. Sort the list of students primarily by `grade` in descending order. 2. In case of ties in `grade`, sort by `name` in ascending order. Function Signature: ```python def sort_students(students: List[Dict[str, Any]]) -> List[Dict[str, Any]]: pass ``` Parameters: - `students` (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents a student with `name` and `grade` keys. Returns: - List[Dict[str, Any]]: A new list of dictionaries representing the students, sorted by the specified criteria. Example Usage: ```python students = [ {\\"name\\": \\"Alice\\", \\"grade\\": 88}, {\\"name\\": \\"Bob\\", \\"grade\\": 95}, {\\"name\\": \\"Charlie\\", \\"grade\\": 88}, {\\"name\\": \\"David\\", \\"grade\\": 92} ] sorted_students = sort_students(students) print(sorted_students) # Expected Output: # [ # {\\"name\\": \\"Bob\\", \\"grade\\": 95}, # {\\"name\\": \\"David\\", \\"grade\\": 92}, # {\\"name\\": \\"Alice\\", \\"grade\\": 88}, # {\\"name\\": \\"Charlie\\", \\"grade\\": 88} # ] ```","solution":"from typing import List, Dict, Any def sort_students(students: List[Dict[str, Any]]) -> List[Dict[str, Any]]: # Sort by grade in descending order primarily, and by name in ascending order secondarily return sorted(students, key=lambda x: (-x[\'grade\'], x[\'name\']))"},{"question":"Create a function that takes a list of integers and returns the length of the longest subsequence such that the difference between any two consecutive elements is less than or equal to 1. The input list can contain both positive and negative integers and may have duplicates. The function should handle edge cases such as an empty list or a list with a single element. You should write self-contained code starting with: ``` def longest_subsequence(arr): ``` The function should output an integer representing the length of the longest valid subsequence.","solution":"def longest_subsequence(arr): if not arr: return 0 arr.sort() max_len = 1 current_len = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) <= 1: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 return max(max_len, current_len)"},{"question":"**Problem Statement:** Write a function `flatten_dictionary` that flattens a dictionary. A dictionary is considered \\"flattened\\" if it has no nested dictionaries and only scalar values (strings, numbers, etc.). Each key in the flattened dictionary should be a string representing the path to each value in the original dictionary, concatenated by dots (\'.\'). For example, given the input `{\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3}}}`, the flattened dictionary would be `{\\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3}`. **Function Signature:** ```python def flatten_dictionary(d: dict, parent_key: str = \'\', separator: str = \'.\') -> dict: pass ``` **Example:** ```python d = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": 4 } }, \\"g\\": 5 } print(flatten_dictionary(d)) # Output: {\\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"b.d.f\\": 4, \\"g\\": 5} ``` **Instructions:** 1. Write a recursive function `flatten_dictionary` that processes each key in the original dictionary. 2. For each nested dictionary encountered, append the parent key and a separator to each inner key while preserving the values. 3. Return a new dictionary where all nested structures are flattened into key-value pairs. **Constraints:** - Assume all keys are strings. - Assume that dictionaries will not have keys that contain dots (\'.\') already. - Dictionaries will only contain scalar values or other dictionaries.","solution":"def flatten_dictionary(d: dict, parent_key: str = \'\', separator: str = \'.\') -> dict: Flattens a nested dictionary. Keys in the flattened dictionary are created by concatenating the keys along the path separated by a given separator. Args: d (dict): The input dictionary to flatten. parent_key (str): The base key for the current level of recursion. separator (str): The separator to use for concatenation of nested keys. Returns: dict: A new dictionary with flattened keys. items = {} for k, v in d.items(): new_key = f\\"{parent_key}{separator}{k}\\" if parent_key else k if isinstance(v, dict): items.update(flatten_dictionary(v, new_key, separator)) else: items[new_key] = v return items"},{"question":"You are required to implement a function `minimum_swaps_to_sort` that takes in a list of unique integers and returns the minimum number of swaps needed to sort the array in ascending order. The approach should be based on the concept of graph cycles and their relationship to permutation sorting. A swap operation is defined as choosing any two indices `i` and `j` such that `0 <= i, j < len(arr)` and swapping the elements at `arr[i]` and `arr[j]`. Function Signature: ```python def minimum_swaps_to_sort(arr: list) -> int: pass ``` **Example:** ```python arr = [4, 3, 1, 2] # Sample Output: 3 # Explanation: # Swap 4 and 2: [2, 3, 1, 4] # Swap 4 and 1: [2, 3, 4, 1] # Swap 2 and 1: [1, 3, 4, 2] # Swap 3 and 1: [1, 2, 3, 4] # Therefore, it took a minimum of 3 swaps to sort the array. print(minimum_swaps_to_sort(arr)) # Output: 3 ``` **Requirements:** The function should be efficient to handle large input sizes, up to `10^5` elements, without exceeding time limits typical in competitive programming conditions.","solution":"def minimum_swaps_to_sort(arr: list) -> int: Returns the minimum number of swaps required to sort the array in ascending order. n = len(arr) arr_pos = list(enumerate(arr)) arr_pos.sort(key=lambda it: it[1]) visited = {i: False for i in range(n)} ans = 0 for i in range(n): if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Write a function that accepts a list of tuples, each containing two integers. For each tuple, find the greatest common divisor (GCD) and least common multiple (LCM) of the two numbers using `math.gcd` and a custom `lcm` function respectively. The function should return a list of tuples containing the GCD and LCM for each input tuple. The function should raise exceptions for: ValueError: If any tuple contains non-positive integers. TypeError: If the input is not a list of tuples of integers. The function should output with: list: A list of tuples, each containing the GCD and LCM of the corresponding input tuple. You should write self-contained code starting with: ``` import math def lcm(x, y): return abs(x * y) // math.gcd(x, y) def task_func(pairs): ```","solution":"import math def lcm(x, y): if x <= 0 or y <= 0: raise ValueError(\\"lcm function received non-positive integers\\") return abs(x * y) // math.gcd(x, y) def task_func(pairs): if not isinstance(pairs, list): raise TypeError(\\"Input should be a list\\") for pair in pairs: if not isinstance(pair, tuple) or len(pair) != 2: raise TypeError(\\"Each item in the list should be a tuple with exactly two integers\\") if not all(isinstance(n, int) and n > 0 for n in pair): raise ValueError(\\"Each tuple should contain strictly positive integers\\") result = [] for x, y in pairs: gcd_value = math.gcd(x, y) lcm_value = lcm(x, y) result.append((gcd_value, lcm_value)) return result"},{"question":"You are tasked with creating a function to analyze a list of dictionaries containing students\' grades and determine the student with the highest average grade. The goal is to identify the student name and their average grade, and then display this information. The function you need to write is named `highest_avg_grade`. It should take one parameter: - `grades`: a list of dictionaries, where each dictionary has the keys \'name\' (a string representing the student\'s name) and \'grades\' (a list of integers representing the grades of that student). The function `highest_avg_grade(grades)` should: 1. Calculate the average grade for each student. 2. Determine the student with the highest average grade. 3. Display the name of the student and their average grade. Here’s a template to help you get started: ```python def highest_avg_grade(grades): Determines the student with the highest average grade and displays their name and average grade. highest_avg = 0 top_student = \'\' for student in grades: avg_grade = sum(student[\'grades\']) / len(student[\'grades\']) if avg_grade > highest_avg: highest_avg = avg_grade top_student = student[\'name\'] print(f\'Top Student: {top_student}, Average Grade: {highest_avg}\') # Example usage: grades_list = [ {\'name\': \'Alice\', \'grades\': [88, 92, 85]}, {\'name\': \'Bob\', \'grades\': [78, 81, 79]}, {\'name\': \'Charlie\', \'grades\': [95, 90, 92]}, ] highest_avg_grade(grades_list) # Should output: Top Student: Charlie, Average Grade: 92.33 ``` **Requirements:** - Iterate through the list of dictionaries to calculate the average grade for each student. - Use basic operations like `sum` and `len` to compute the average. - Compare average grades to find the highest one. - Ensure the results are printed in the specified format with the student\'s name and their average grade. You can use a sample dataset structured as follows to test your function: ```python grades_list = [ {\'name\': \'Alice\', \'grades\': [88, 92, 85]}, {\'name\': \'Bob\', \'grades\': [78, 81, 79]}, {\'name\': \'Charlie\', \'grades\': [95, 90, 92]}, ] ``` Ensure that the function works correctly for any provided list of students and their corresponding grades.","solution":"def highest_avg_grade(grades): Determines the student with the highest average grade and displays their name and average grade. highest_avg = float(\'-inf\') top_student = \'\' for student in grades: avg_grade = sum(student[\'grades\']) / len(student[\'grades\']) if avg_grade > highest_avg: highest_avg = avg_grade top_student = student[\'name\'] print(f\'Top Student: {top_student}, Average Grade: {highest_avg:.2f}\') return top_student, round(highest_avg, 2) # Example usage: grades_list = [ {\'name\': \'Alice\', \'grades\': [88, 92, 85]}, {\'name\': \'Bob\', \'grades\': [78, 81, 79]}, {\'name\': \'Charlie\', \'grades\': [95, 90, 92]}, ] highest_avg_grade(grades_list) # Should output: Top Student: Charlie, Average Grade: 92.33"},{"question":"Your task is to write a Python function, `find_missing_number`, that identifies the missing number in a given list of consecutive integers. The list contains integers from `1` to `n` with one number missing, and no duplicates are present. For example: - Given the list `[2, 3, 1, 5]`, your function should return `4`. - Given the list `[1, 2, 4, 5, 6]`, your function should return `3`. **Function Signature:** ```python def find_missing_number(nums: List[int]) -> int: ``` **Input:** - `nums (List[int])`: A list of integers containing all but one of the integers from `1` to `n`. **Output:** - Returns the integer value of the missing number. You can assume that the input list `nums` contains integers ranging from `1` to `n` with only one integer missing, and the list is unsorted. Use efficient algorithms to find the missing number.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Finds the missing number in a list of consecutive integers from 1 to n with one number missing. Parameters: nums (List[int]): The list of integers ranging from 1 to n with one missing number. Returns: int: The missing number. n = len(nums) + 1 expected_sum = n * (n + 1) / 2 actual_sum = sum(nums) return int(expected_sum - actual_sum)"},{"question":"Write a Python function named `process_string` that takes a string of text and returns a dictionary with the frequency of each word in the string. The function should ignore punctuation and be case-insensitive. The function signature should be: ```python def process_string(text: str) -> dict: ``` **Parameters:** - `text`: A string containing the input text. **Output:** - A dictionary where the keys are words (converted to lowercase) and the values are integers representing the frequency of each word in the input text. **Requirements:** - Ignore any punctuation in the input text. - Treat words as case-insensitive, meaning \'Word\' and \'word\' should be considered the same. **Example Usage:** ```python text = \\"Hello, world! Hello, Python. Hello, hello?\\" word_freq = process_string(text) print(word_freq) # Output: {\'hello\': 4, \'world\': 1, \'python\': 1} ``` Your task is to implement the `process_string` function that processes the input text by removing punctuation, converting all words to lowercase, and counting the frequency of each word. This problem is designed to help you practice text processing and dictionary manipulation in Python.","solution":"import re from collections import defaultdict def process_string(text: str) -> dict: Processes the input text, removes punctuation, converts to lowercase, and counts the frequency of each word. Parameters: text (str): The input text to be processed. Returns: dict: A dictionary with words as keys (lowercase) and their frequencies as values. text = re.sub(r\'[^ws]\', \'\', text) # Remove punctuation words = text.lower().split() # Convert to lowercase and split into words word_freq = defaultdict(int) for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"You are required to create a function named `manage_dates` that will accept a list of dates (in string format `YYYY-MM-DD`). This function should utilize Python\'s `datetime` library to perform the following operations: 1. **Sort Dates**: - Sort the list of dates chronologically. 2. **Filter Weekend Dates**: - Identify the dates that fall on weekends (Saturday or Sunday) and output them in sorted order. 3. **Count Days Between**: - Calculate and output the number of days between the first and last date in the sorted list. **Example**: ```python dates = [\\"2023-10-12\\", \\"2022-03-17\\", \\"2023-04-01\\", \\"2023-01-01\\", \\"2023-11-15\\", \\"2022-07-24\\"] manage_dates(dates) ``` **Expected Output**: ``` Sorted Dates: 2022-03-17 2022-07-24 2023-01-01 2023-04-01 2023-10-12 2023-11-15 Weekend Dates: 2022-07-24 2023-01-01 2023-04-01 Days Between: 608 ``` Your function should correctly parse, sort, filter, and calculate the specified information using appropriate methods from the `datetime` library. Note that the output must strictly follow the format shown in the example.","solution":"from datetime import datetime def manage_dates(dates): Manage a list of dates by performing operations such as sorting, filtering for weekends, and calculating days between the first and last dates. Args: dates: list of date strings in the format \'YYYY-MM-DD\' # Convert date strings to datetime objects date_objects = [datetime.strptime(date, \'%Y-%m-%d\') for date in dates] # Sort the dates chronologically date_objects.sort() # Extract weekend dates (Saturday or Sunday) weekend_dates = [date for date in date_objects if date.weekday() >= 5] # Calculate number of days between the first and last dates if len(date_objects) > 1: days_between = (date_objects[-1] - date_objects[0]).days else: days_between = 0 # Print Sorted Dates print(\\"Sorted Dates:\\") for date in date_objects: print(date.strftime(\'%Y-%m-%d\')) # Print Weekend Dates print(\\"nWeekend Dates:\\") for date in weekend_dates: print(date.strftime(\'%Y-%m-%d\')) # Print the number of days between the first and last dates print(\\"nDays Between:\\") print(days_between) # Sample usage dates = [\\"2023-10-12\\", \\"2022-03-17\\", \\"2023-04-01\\", \\"2023-01-01\\", \\"2023-11-15\\", \\"2022-07-24\\"] manage_dates(dates)"},{"question":"In this problem, you are required to create a function `rearrange_string(s)` that takes a string `s` as input and reorders its characters so that no two adjacent characters are the same. If no such arrangement is possible, return an empty string. To achieve this, you can leverage the Python `collections` library, specifically `Counter`, to count the frequency of each character in the string. Use a max heap to ensure that the highest frequency characters are used first in constructing the new string, ensuring that they are placed as far apart as possible. **Function Specification:** - `rearrange_string(s: str) -> str` **Parameters:** - `s` (str): The input string to be rearranged. **Return Value:** - The function should return a rearranged string with no two adjacent characters being the same if possible. Otherwise, return an empty string. **Example:** ```python print(rearrange_string(\\"aabb\\")) # Output could be \'abab\' or \'baba\' print(rearrange_string(\\"aaab\\")) # Output is \'\' ```","solution":"from collections import Counter import heapq def rearrange_string(s): Reorders the characters of the input string so that no two adjacent characters are the same. Returns an empty string if such an arrangement is not possible. Args: s (str): The input string. Returns: str: The rearranged string or an empty string if no valid arrangement is possible. if not s: return \\"\\" # Count the frequency of each character counter = Counter(s) # Create a max heap based on the character frequencies max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If the previous character can be used again, push it back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_count, prev_char = count + 1, char rearranged = \'\'.join(result) # If the length of the rearranged string is not equal to the original string if len(rearranged) != len(s): return \\"\\" return rearranged"},{"question":"Design and implement a Python function that simulates a simplified banking system where a user can deposit and withdraw money from their account. Your task is to write this function using basic object-oriented programming principles. # Detailed Requirements: 1. **Class Name**: `BankAccount`. 2. **Instance Variables**: - `balance`: Holds the current balance of the account. 3. **Methods**: - `__init__(self)`: Initializes `balance` to 0. - `deposit(self, amount)`: Adds the specified amount to `balance`. Print a message showing the new balance. - `withdraw(self, amount)`: Deducts the specified amount from `balance` if sufficient funds are available. Print a message showing the new balance or an error message if funds are insufficient. - `get_balance(self)`: Returns the current `balance`. # Example Usage: ```python # Creating a bank account object account = BankAccount() # Depositing money account.deposit(100) # Expected Output: \\"Deposit successful! New balance: 100.00\\" # Withdrawing money with sufficient funds account.withdraw(50) # Expected Output: \\"Withdrawal successful! New balance: 50.00\\" # Withdrawing money with insufficient funds account.withdraw(60) # Expected Output: \\"Insufficient funds! Current balance: 50.00\\" # Checking the balance print(account.get_balance()) # Expected Output: 50 ``` The class `BankAccount` should encapsulate the balance and provide methods for depositing, withdrawing, and checking the balance, ensuring data encapsulation and correctness in the process.","solution":"class BankAccount: def __init__(self): Initializes a new bank account with a balance of 0. self.balance = 0.0 def deposit(self, amount): Deposits the specified amount to the account balance. Args: amount (float): The amount to be deposited. if amount <= 0: print(\\"Deposit amount must be positive!\\") return self.balance += amount print(f\\"Deposit successful! New balance: {self.balance:.2f}\\") def withdraw(self, amount): Withdraws the specified amount from the account balance if sufficient funds are available. Args: amount (float): The amount to be withdrawn. if amount <= 0: print(\\"Withdrawal amount must be positive!\\") return if self.balance >= amount: self.balance -= amount print(f\\"Withdrawal successful! New balance: {self.balance:.2f}\\") else: print(f\\"Insufficient funds! Current balance: {self.balance:.2f}\\") def get_balance(self): Returns the current account balance. Returns: float: The current account balance. return self.balance"},{"question":"Implement a function called `median_of_medians` that computes the k-th smallest element in an unsorted array. This should be done using the Median of Medians algorithm, an efficient selection algorithm that guarantees linear time complexity in the worst case. Avoid using libraries or functions that simplify the task, as the focus here is on implementing the algorithm itself. Function Signature: ```python def median_of_medians(arr: list, k: int) -> int: Computes the k-th smallest element in an array using the Median of Medians algorithm. Parameters: arr : list Input list of numbers. k : int The index of the k-th smallest element to find (0-based index). Returns: int The k-th smallest element in the list. pass ``` Requirements: 1. Implement the Median of Medians algorithm to ensure the solution is efficient and operates in linear time. 2. Ensure your function can handle duplicate values in the input array. 3. Validate that the provided `k` is within the bounds of the array length. 4. Do not use built-in functions for finding the median or sorting the array. Guidelines: - Divide the original array into subarrays of at most five elements each. - Find the median of each of these subarrays. - Use these medians to find an approximate median (pivot) of the entire array. - Partition the array around this pivot and recursively apply the process to find the k-th smallest element. - Optimize handling arrays where subarrays have less than five elements.","solution":"def median_of_medians(arr, k): Computes the k-th smallest element in an array using the Median of Medians algorithm. Parameters: arr : list Input list of numbers. k : int The index of the k-th smallest element to find (0-based index). Returns: int The k-th smallest element in the list. if len(arr) == 1: return arr[0] def partition(arr, pivot): low = [x for x in arr if x < pivot] high = [x for x in arr if x > pivot] return low, high def find_median(arr): arr.sort() return arr[len(arr) // 2] def select(arr, k): if len(arr) <= 5: arr.sort() return arr[k] medians = [] for i in range(0, len(arr), 5): subarr = arr[i:i + 5] medians.append(find_median(subarr)) median_of_medians = select(medians, len(medians) // 2) low, high = partition(arr, median_of_medians) if k < len(low): return select(low, k) elif k < len(arr) - len(high): return median_of_medians else: return select(high, k - (len(arr) - len(high))) return select(arr, k)"},{"question":"You are required to implement a function that determines whether a given string `s` is an anagram of another string `t`. Two strings are considered anagrams if they contain the same characters, with the same frequencies. For instance, \\"listen\\" and \\"silent\\" are anagrams, but \\"hello\\" and \\"billion\\" are not. # Function Specifications - **Function Name**: `is_anagram` - **Parameters**: - `s`: A string containing the first word. - `t`: A string containing the second word. - **Returns**: A boolean value indicating whether `t` is an anagram of `s`. # Constraints 1. The strings will only contain lowercase English letters. 2. The length of the strings will not exceed 100,000 characters. # Example Usage ```python >>> is_anagram(\\"listen\\", \\"silent\\") True >>> is_anagram(\\"hello\\", \\"billion\\") False >>> is_anagram(\\"anagram\\", \\"nagaram\\") True ``` # Notes 1. The function should ignore spaces and compare characters only. 2. Consider using collections.Counter from the Python standard library to help count character frequencies efficiently. # Tip Refer to the Python documentation for `collections.Counter` to understand how to use it effectively for counting character frequencies.","solution":"from collections import Counter def is_anagram(s: str, t: str) -> bool: Determines whether the string `t` is an anagram of the string `s`. Parameters: - s (str): The first string. - t (str): The second string. Returns: - bool: True if `t` is an anagram of `s`, False otherwise. return Counter(s) == Counter(t)"},{"question":"Given an input list of integers, write a function to sort the list in non-increasing order and return the median element. If the list has an even number of elements, return the average of the two middle elements as a float. The function should handle: - Empty list: Return None. - List with one element: Return that element as it is. The function should output: - int or float: The median of the sorted list. You should write self-contained code starting with: ``` def sort_and_find_median(input_list): ```","solution":"def sort_and_find_median(input_list): Sorts the input list in non-increasing order and returns the median element. If the list has an even number of elements, returns the average of the two middle elements as a float. Parameters: input_list (list): A list of integers. Returns: int or float: The median of the sorted list. None: If the list is empty. if not input_list: return None input_list.sort(reverse=True) n = len(input_list) if n % 2 == 1: return input_list[n//2] else: middle1 = input_list[n//2 - 1] middle2 = input_list[n//2] return (middle1 + middle2) / 2.0"},{"question":"**Objective**: To practice implementing a basic class in Python and ensure a proper understanding of class instances, methods, and inheritance. **Task**: Write a class called `Rectangle` that represents a rectangle. The class should have the following methods: 1. `__init__` method that initializes a rectangle object with `width` and `height` attributes. 2. `area` method that returns the area of the rectangle (width * height). 3. `perimeter` method that returns the perimeter of the rectangle (2 * (width + height)). 4. An `__str__` method that returns a string representation of the rectangle in the format: \\"Rectangle(width: <width>, height: <height>)\\". 5. A `Square` class that inherits from the `Rectangle` class but is initialized with only one side length. **Requirements**: 1. The `Square` class should call the `Rectangle` class\'s `__init__` method to set both the width and height to the given side length. 2. The `Square` class should be able to use the `area`, `perimeter`, and `__str__` methods from the `Rectangle` class. Below is an example of how the classes will be used: ```python class Rectangle: def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def perimeter(self): return 2 * (self.width + self.height) def __str__(self): return f\\"Rectangle(width: {self.width}, height: {self.height})\\" class Square(Rectangle): def __init__(self, side): super().__init__(side, side) def __str__(self): return f\\"Square(side: {self.width})\\" # Example usage rectangle = Rectangle(4, 5) print(rectangle) # Output: Rectangle(width: 4, height: 5) print(rectangle.area()) # Output: 20 print(rectangle.perimeter()) # Output: 18 square = Square(7) print(square) # Output: Square(side: 7) print(square.area()) # Output: 49 print(square.perimeter()) # Output: 28 ``` **Expected Output**: When the example usage is executed, the console should display the string representations and calculated areas/perimeters of both the `Rectangle` and `Square` instances.","solution":"class Rectangle: def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def perimeter(self): return 2 * (self.width + self.height) def __str__(self): return f\\"Rectangle(width: {self.width}, height: {self.height})\\" class Square(Rectangle): def __init__(self, side): super().__init__(side, side) def __str__(self): return f\\"Square(side: {self.width})\\""},{"question":"Write a function called `replace_and_estimate` that takes two arguments: a list of integers `numbers` and an integer `target`. The function should replace each occurrence of the `target` in the list with the mean (average) of its immediate neighbors. If the target is at the beginning or end of the list, replace it with the value of its single neighbor. Implement this function without using any external libraries. **Function Signature:** ```python def replace_and_estimate(numbers: List[int], target: int) -> List[float]: pass ``` **Inputs:** - `numbers`: List of integers where we need to replace occurrences of `target`. (`List[int]`) - `target`: The integer value in the list to be replaced. (`int`) **Output:** - A new list where each occurrence of `target` has been replaced with the mean of its immediate neighbors. **Conditions:** 1. If the target is at the first position, replace it with the value of the next element. 2. If the target is at the last position, replace it with the value of the previous element. **Examples:** ```python numbers = [2, 5, 5, 8, 2] target = 5 print(replace_and_estimate(numbers, target)) # Output: [2, 6.5, 6.5, 8, 2] numbers = [10, 5, 15, 5, 20] target = 5 print(replace_and_estimate(numbers, target)) # Output: [10, 12.5, 15, 17.5, 20] ```","solution":"from typing import List def replace_and_estimate(numbers: List[int], target: int) -> List[float]: Replaces each occurrence of the target in the list with the mean of its immediate neighbors. If the target is at the beginning or end of the list, replaces it with the value of its single neighbor. if not numbers: # Empty list case return [] # This list will hold the result with possible replacements result = numbers[:] for i in range(len(numbers)): if numbers[i] == target: if i == 0: # Target at the beginning result[i] = numbers[i+1] elif i == len(numbers) - 1: # Target at the end result[i] = numbers[i-1] else: # Target somewhere in the middle result[i] = (numbers[i-1] + numbers[i+1]) / 2.0 return result"},{"question":"You are required to implement a function that reads the content of a configuration file `config.json`, which holds various settings for a system. The file contains a JSON object with nested structures and arrays. Your function will read this file, validate the presence of specific keys, and ensure their values are of the expected types. The keys you must check for are: - `\\"name\\"`: a string - `\\"version\\"`: a string in the format `\\"<major>.<minor>.<patch>\\"` - `\\"features\\"`: an array of strings - `\\"settings\\"`: an object with the following keys: - `\\"resolution\\"`: a string in the format `\\"<width>x<height>\\"` - `\\"fullscreen\\"`: a boolean If any of these keys are missing or their values are not of the expected type, raise a `ValueError` with an appropriate error message. Otherwise, return a dictionary with the validated data. To parse JSON, use the `json` standard library. **Function Signature:** ```python def validate_config(file_name: str) -> dict: pass ``` **Requirements:** 1. The function should open and read the JSON file. 2. Parse the JSON data and check for the existence and types of the required keys. 3. Validate the format of the `\\"version\\"` and `\\"resolution\\"` values using regular expressions (`re` library is allowed). 4. Return a dictionary containing the validated data if all checks pass. 5. Raise `ValueError` with a descriptive message if any validation fails. **Example Input File (config.json):** ```json { \\"name\\": \\"MyApplication\\", \\"version\\": \\"1.2.3\\", \\"features\\": [\\"feature1\\", \\"feature2\\", \\"feature3\\"], \\"settings\\": { \\"resolution\\": \\"1920x1080\\", \\"fullscreen\\": true } } ``` **Example Output:** ```python { \\"name\\": \\"MyApplication\\", \\"version\\": \\"1.2.3\\", \\"features\\": [\\"feature1\\", \\"feature2\\", \\"feature3\\"], \\"settings\\": { \\"resolution\\": \\"1920x1080\\", \\"fullscreen\\": True } } ```","solution":"import json import re def validate_config(file_name: str) -> dict: with open(file_name, \'r\') as file: data = json.load(file) # Check \'name\' if \'name\' not in data or not isinstance(data[\'name\'], str): raise ValueError(\\"Missing or invalid \'name\' key.\\") # Check \'version\' with regex version_pattern = re.compile(r\'^d+.d+.d+\') if \'version\' not in data or not isinstance(data[\'version\'], str) or not version_pattern.match(data[\'version\']): raise ValueError(\\"Missing or invalid \'version\' key.\\") # Check \'features\' if \'features\' not in data or not isinstance(data[\'features\'], list) or not all(isinstance(feature, str) for feature in data[\'features\']): raise ValueError(\\"Missing or invalid \'features\' key.\\") # Check \'settings\' if \'settings\' not in data or not isinstance(data[\'settings\'], dict): raise ValueError(\\"Missing or invalid \'settings\' key.\\") # Check \'settings.resolution\' with regex resolution_pattern = re.compile(r\'^d+xd+\') if \'resolution\' not in data[\'settings\'] or not isinstance(data[\'settings\'][\'resolution\'], str) or not resolution_pattern.match(data[\'settings\'][\'resolution\']): raise ValueError(\\"Missing or invalid \'settings.resolution\' key.\\") # Check \'settings.fullscreen\' if \'fullscreen\' not in data[\'settings\'] or not isinstance(data[\'settings\'][\'fullscreen\'], bool): raise ValueError(\\"Missing or invalid \'settings.fullscreen\' key.\\") return data"},{"question":"You are asked to create a function named `pattern_matrix` that generates a two-dimensional binary matrix where the elements form a specific repetitive pattern. Your task is to implement this function in Python, which should return the matrix as a list of lists. The `pattern_matrix` function should satisfy the following requirements: 1. The matrix should have dimensions `n x n` (a square matrix). 2. The matrix should alternate between 1s and 0s both row-wise and column-wise, starting with 1 in the top-left corner. 3. The resulting pattern should resemble a checkerboard. The function definition is as follows: ```python def pattern_matrix(n): # Your implementation here ``` Parameters: - `n` (int): The size of the matrix. Example Usage: ```python matrix = pattern_matrix(4) for row in matrix: print(row) ``` Example Output: ``` [1, 0, 1, 0] [0, 1, 0, 1] [1, 0, 1, 0] [0, 1, 0, 1] ``` Output for `n = 5`: ``` [1, 0, 1, 0, 1] [0, 1, 0, 1, 0] [1, 0, 1, 0, 1] [0, 1, 0, 1, 0] [1, 0, 1, 0, 1] ``` The `pattern_matrix` function should return the matrix in the correct checkerboard pattern based on the size `n`.","solution":"def pattern_matrix(n): Generates a two-dimensional binary matrix of size n x n in a checkerboard pattern. Args: n (int): The size of the matrix. Returns: list: A list of lists representing the n x n checkerboard matrix. matrix = [] for i in range(n): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(1) else: row.append(0) matrix.append(row) return matrix"},{"question":"You are required to build a function that processes log files from a server and extracts meaningful statistics about the requests. The log file will contain multiple log entries, each representing a single request, in the following format: ``` <timestamp> <method> <url> <status_code> <response_time> ``` Here is an example of how the log entries might look: ``` 1609459200 GET /index.html 200 123 1609459201 POST /form 404 234 1609459202 GET /about 200 111 1609459203 GET /contact 503 345 ... ``` Your task is to implement a function that calculates and returns a summary of key statistics from the log file. Specifically, the function should compute: 1. The total number of requests. 2. The number of requests per HTTP method (e.g., GET, POST). 3. The number of requests per response status code (e.g., 200, 404, 503). 4. The average response time for all requests. Implement the following function: ```python def process_log_file(log_file_path: str) -> dict: pass ``` This function should: 1. Read and process the log file from the given `log_file_path`. 2. Compute the required statistics. 3. Return a dictionary containing the computed statistics with the following structure: ```python { \\"total_requests\\": int, \\"requests_per_method\\": { \\"GET\\": int, \\"POST\\": int, ... }, \\"requests_per_status\\": { 200: int, 404: int, ... }, \\"average_response_time\\": float } ``` **Example Usage:** ```python result = process_log_file(\'/path/to/logfile.log\') ``` If the log file contains the example entries mentioned above, the function should return: ```python { \\"total_requests\\": 4, \\"requests_per_method\\": { \\"GET\\": 3, \\"POST\\": 1 }, \\"requests_per_status\\": { 200: 2, 404: 1, 503: 1 }, \\"average_response_time\\": 203.25 } ```","solution":"def process_log_file(log_file_path: str) -> dict: total_requests = 0 requests_per_method = {} requests_per_status = {} total_response_time = 0 with open(log_file_path, \'r\') as file: for line in file: total_requests += 1 parts = line.split() method = parts[1] status_code = int(parts[3]) response_time = int(parts[4]) # Process method if method in requests_per_method: requests_per_method[method] += 1 else: requests_per_method[method] = 1 # Process status code if status_code in requests_per_status: requests_per_status[status_code] += 1 else: requests_per_status[status_code] = 1 # Aggregate response time total_response_time += response_time average_response_time = total_response_time / total_requests if total_requests > 0 else 0 return { \\"total_requests\\": total_requests, \\"requests_per_method\\": requests_per_method, \\"requests_per_status\\": requests_per_status, \\"average_response_time\\": average_response_time }"},{"question":"You are required to write a function named `text_analyzer` that will perform various text analysis operations on given input strings. This function should handle multiple types of analysis requests such as character count, word count, palindrome check, and word reversals. Specifically, the `text_analyzer` function will perform the following actions based on the input operation: 1. **Character Count**: When the operation is \'char_count\', the function will return the number of characters in the input string. 2. **Word Count**: When the operation is \'word_count\', the function will return the number of words in the input string. 3. **Palindrome Check**: When the operation is \'palindrome_check\', the function will return `True` if the input string is a palindrome and `False` otherwise. A palindrome is a string that reads the same forward and backward, ignoring case and spaces. 4. **Word Reversal**: When the operation is \'word_reverse\', the function will return a new string with the order of the words reversed but the words themselves in their original form. # Requirements: 1. The function `text_analyzer` should accept two arguments: `operation` and `input_string`. 2. The valid operations are \'char_count\', \'word_count\', \'palindrome_check\', and \'word_reverse\'. 3. Create four separate methods within a class `TextAnalyzer` to handle the respective operations: `char_count`, `word_count`, `palindrome_check`, and `word_reverse`. 4. Implement string manipulation techniques as shown in the following pseudo code: ```python if operation == \'char_count\': # handle character count elif operation == \'word_count\': # handle word count elif operation == \'palindrome_check\': # handle palindrome check elif operation == \'word_reverse\': # handle word reversal else: # handle invalid operation ``` 5. Ensure to handle edge cases such as empty strings and input validation within each method. # Example Usage: ```python analyzer = TextAnalyzer() print(analyzer.text_analyzer(\'char_count\', \'Hello, World!\')) # Output: 13 print(analyzer.text_analyzer(\'word_count\', \'Hello, World!\')) # Output: 2 print(analyzer.text_analyzer(\'palindrome_check\', \'Madam\')) # Output: True print(analyzer.text_analyzer(\'word_reverse\', \'Hello World\')) # Output: \'World Hello\' ```","solution":"class TextAnalyzer: def char_count(self, input_string): Returns the number of characters in the input string. return len(input_string) def word_count(self, input_string): Returns the number of words in the input string. return len(input_string.split()) def palindrome_check(self, input_string): Returns True if the input string is a palindrome, otherwise False. Ignores case and spaces. cleaned_string = \'\'.join(char.lower() for char in input_string if char.isalnum()) return cleaned_string == cleaned_string[::-1] def word_reverse(self, input_string): Returns a new string with the order of the words reversed. Words maintain their original form. words = input_string.split() reversed_words = \' \'.join(reversed(words)) return reversed_words def text_analyzer(self, operation, input_string): Perform text analysis based on the given operation. Valid operations are \'char_count\', \'word_count\', \'palindrome_check\', and \'word_reverse\'. if operation == \'char_count\': return self.char_count(input_string) elif operation == \'word_count\': return self.word_count(input_string) elif operation == \'palindrome_check\': return self.palindrome_check(input_string) elif operation == \'word_reverse\': return self.word_reverse(input_string) else: raise ValueError(\\"Invalid operation\\")"},{"question":"You are tasked with creating a function named `transform_points` that applies a given transformation matrix to a set of points in a 2D plane. The function takes in a matrix and an array of points, and it outputs the transformed coordinates of the points. **Function Signature:** ```python def transform_points(matrix: np.ndarray, points: np.ndarray) -> np.ndarray: ``` **Parameters:** - `matrix` (np.ndarray): A 2x2 transformation matrix. - `points` (np.ndarray): An Nx2 array representing N points to be transformed. **Returns:** - `transformed_points` (np.ndarray): An Nx2 array of the transformed points. **Instructions:** 1. Use the `numpy` library to perform matrix multiplication. 2. For each point in the array, multiply it by the transformation matrix to obtain the new coordinates. 3. Ensure the function is efficient and correctly leverages numpy for array operations. **Example:** ```python import numpy as np matrix = np.array([[2, 0], [0, 2]]) # Scaling matrix points = np.array([[1, 2], [3, 4], [5, 6]]) transformed_points = transform_points(matrix, points) print(transformed_points) # Expected output: [[ 2 4] # [ 6 8] # [10 12]] ```","solution":"import numpy as np def transform_points(matrix: np.ndarray, points: np.ndarray) -> np.ndarray: Applies a given transformation matrix to a set of points in a 2D plane. Parameters: - matrix (np.ndarray): A 2x2 transformation matrix. - points (np.ndarray): An Nx2 array representing N points to be transformed. Returns: - transformed_points (np.ndarray): An Nx2 array of the transformed points. # Perform matrix multiplication to transform the points transformed_points = np.dot(points, matrix.T) return transformed_points"},{"question":"Performs a k-means clustering analysis on a given dataset. The function reads a dataset from a CSV file, applies k-means clustering using scikit-learn, and returns the cluster labels. Note that: The dataset should contain various features but no target labels. The function will output the assigned cluster for each data point. The function should output: np.ndarray: An array of integers where each integer represents the cluster label for the corresponding data point. You should write self-contained code starting with: ``` import pandas as pd from sklearn.cluster import KMeans def task_func(csv_file_path, num_clusters): ```","solution":"import pandas as pd from sklearn.cluster import KMeans def perform_kmeans_clustering(csv_file_path, num_clusters): Reads a dataset from a CSV file, applies k-means clustering, and returns the cluster labels. Parameters: csv_file_path (str): The path to the CSV file containing the dataset. num_clusters (int): The number of clusters to form. Returns: np.ndarray: An array of integers where each integer represents the cluster label for the corresponding data point. # Read the dataset from the CSV file data = pd.read_csv(csv_file_path) # Initialize the KMeans model kmeans = KMeans(n_clusters=num_clusters) # Fit the model to the data and predict the cluster labels cluster_labels = kmeans.fit_predict(data) return cluster_labels"},{"question":"Write a function called `reverseWordsWithVowelCount` that takes a string `sentence` as input and returns a new string where the order of the words is reversed, and each word is followed by the number of vowels (a, e, i, o, u) in it. Words in the input sentence are separated by a single space. The function should: 1. Split the input string into words. 2. Reverse the order of words. 3. Count the number of vowels in each word. 4. Append the vowel count to each word. 5. Join the words back into a single string with a space separating each word. # Example of the Function Usage ```python reverseWordsWithVowelCount(\\"hello world\\") ``` This should return: ``` world1 hello2 ``` Explanation: \\"hello\\" has 2 vowels, and \\"world\\" has 1 vowel. Reversing the words results in \\"world hello\\", and then appending the vowel counts results in \\"world1 hello2\\". # Requirements - Define the function `reverseWordsWithVowelCount`. - Split the input sentence into words. - Reverse the order of these words. - For each word, count the vowels and append this count to the word. - Join the modified words back into a single string, separated by spaces. - Return the resulting string. # Instruction for Implementation - Implement the function using suitable string and list methods. - Make sure to handle cases where the input string might be empty or contain no vowels. - Use a loop or a list comprehension to process the words. # Example Usage ```python reverseWordsWithVowelCount(\\"this is a test\\") >>> \\"test1 a1 is1 this1\\" reverseWordsWithVowelCount(\\"example coding\\") >>> \\"coding2 example3\\" ```","solution":"def reverseWordsWithVowelCount(sentence): Reverses the order of the words in the sentence and appends the number of vowels to each word. Parameters: sentence (str): The input sentence composed of words separated by spaces. Returns: str: The processed sentence with words reversed and vowel counts appended. vowels = \'aeiouAEIOU\' def count_vowels(word): return sum(1 for char in word if char in vowels) words = sentence.split() reversed_words = reversed(words) words_with_vowel_counts = [f\\"{word}{count_vowels(word)}\\" for word in reversed_words] return \' \'.join(words_with_vowel_counts)"},{"question":"You are asked to write a function `unique_elements` that takes a list of integers and returns a list of unique integers while preserving the order of their first appearance in the input list. The objective is to help you practice working with collections and understand how to maintain order while eliminating duplicates. **Function Signature:** ```python def unique_elements(numbers: list) -> list: pass ``` **Requirements:** 1. Do not use any libraries or built-in functions specifically designed for this task (e.g., `collections.OrderedDict` or `set()`). 2. The input is a list of integers, and the output should be a list of integers where each integer from the input list appears only once, preserving the order of their first appearance. 3. Consider edge cases such as an empty list or a list with all elements being the same. **Example:** ```python numbers = [4, 5, 6, 4, 2, 6, 5] assert unique_elements(numbers) == [4, 5, 6, 2] ``` **Hints:** - You may use an auxiliary data structure to keep track of elements that have already been seen. - Think about how you can traverse the list once, maintaining an efficient solution.","solution":"def unique_elements(numbers: list) -> list: Returns a list of unique integers while preserving the order of their first appearance. :param numbers: List of integers. :return: List of unique integers. seen = [] result = [] for number in numbers: if number not in seen: seen.append(number) result.append(number) return result"},{"question":"In this problem, you are required to implement a function that generates and saves a scatter plot from given datasets of x and y coordinates. The function should make use of `matplotlib.pyplot.savefig` method to save the plot to a specified location. You need to create a function named `generate_scatter_plot` that accepts the following parameters: 1. `x_pts` (list): A list of numerical values for the x-axis coordinates. 2. `y_pts` (list): A list of numerical values for the y-axis coordinates. 3. `x_label` (str, optional): Label for the x-axis. Default is `None`. 4. `y_label` (str, optional): Label for the y-axis. Default is `None`. 5. `title` (str, optional): Title of the plot. Default is `None`. 6. `color` (list or str, optional): Color of points. It can be a single color format string or a sequence of colors. Default is `\'b\'` (blue). 7. `marker` (str, optional): Marker style for the points. Default is `\'o\'`. 8. `axis` (list, optional): Axis limits in the format `[xmin, xmax, ymin, ymax]`. Default is `None`. 9. `figure` (int, optional): Figure number for the plot. Default is `0`. 10. `show` (bool, optional): If `True`, display the plot. Default is `True`. 11. `filename` (str, optional): Filename for saving the figure. Default is `None`. The function should generate a scatter plot according to the given parameters and save it as a PNG file using `matplotlib.pyplot.savefig`. The file should be saved in a directory named `figures` with a default name based on the title or figure number if a filename is not provided. # Example Usage: ```python x_pts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_pts = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] generate_scatter_plot(x_pts, y_pts, x_label=\\"X-Axis\\", y_label=\\"Y-Axis\\", title=\\"Sample Scatter Plot\\", show=False, filename=\\"sample_scatter_plot\\") ``` Expected Output: The function should save the plot as `figures/sample_scatter_plot.png`. # Constraints: - Ensure that the specified directory (`figures`) exists or is created. - Utilize `matplotlib.pyplot.savefig` for saving the generated plot. Implement the `generate_scatter_plot` function based on the description provided.","solution":"import os import matplotlib.pyplot as plt def generate_scatter_plot(x_pts, y_pts, x_label=None, y_label=None, title=None, color=\'b\', marker=\'o\', axis=None, figure=0, show=True, filename=None): Generates and saves a scatter plot from given datasets of x and y coordinates. # Create figures directory if it doesn\'t exist if not os.path.exists(\\"figures\\"): os.makedirs(\\"figures\\") plt.figure(figure) plt.scatter(x_pts, y_pts, c=color, marker=marker) if x_label: plt.xlabel(x_label) if y_label: plt.ylabel(y_label) if title: plt.title(title) if axis: plt.axis(axis) if not filename: filename = title if title else f\\"figure_{figure}\\" filename = filename.replace(\\" \\", \\"_\\").lower() + \\".png\\" filepath = os.path.join(\\"figures\\", filename) plt.savefig(filepath) if show: plt.show() else: plt.close() return filepath"},{"question":"You are required to implement a function named `transform_and_aggregate` that takes a list of integers and a single integer threshold as input parameters. The function should perform the following operations: 1. **Filter and Transform**: Filter out the integers less than the threshold and double the values of the remaining integers. 2. **Aggregate**: Calculate the product of all the transformed integers. The resulting list of transformed integers and the calculated product should then be written to in-memory streams using the `StringIO` and `BytesIO` classes from the `io` module. The function should return a tuple containing the content of both streams. - **Input**: - `numbers: List[int]` - A list of integers. - `threshold: int` - An integer threshold. - **Output**: - Return a tuple with two elements: - A string representing the filtered and transformed list of integers. - A byte stream containing the product of the transformed integers. **Requirements**: - Use `io.StringIO` for the list of transformed integers. - Use `io.BytesIO` for the product of the integers. **Function Signature**: ```python def transform_and_aggregate(numbers: list, threshold: int) -> tuple: pass ``` **Examples**: ```python # Example 1: result = transform_and_aggregate([1, 5, 10, 15], 7) # Output -> (\'[10, 30]\', b\'300\') # Example 2: result = transform_and_aggregate([3, 6, 9], 5) # Output -> (\'[12, 18]\', b\'216\') ```","solution":"import io from functools import reduce from typing import List def transform_and_aggregate(numbers: List[int], threshold: int) -> tuple: # Filter and transform transformed = [num * 2 for num in numbers if num >= threshold] # Aggregate product = reduce(lambda x, y: x * y, transformed, 1) # Write to in-memory streams string_stream = io.StringIO(str(transformed)) bytes_stream = io.BytesIO(str(product).encode()) # Return contents of both streams return (string_stream.getvalue(), bytes_stream.getvalue())"},{"question":"You are required to write a function `calculate_factorial_sum(n: int) -> int` that computes the sum of the factorials of the digits of a given positive integer `n`. The function should follow these steps: 1. Convert the integer `n` to a string to iterate through its digits. 2. Define a helper function `factorial(x: int) -> int` that computes the factorial of a given non-negative integer `x`. 3. For each digit in the string representation of `n`, convert it back to an integer, compute its factorial using the helper function, and accumulate the sum of these factorials. 4. Return the final accumulated sum. **Example:** If `n = 145`, the function should compute the following: - The digits are 1, 4, and 5. - The factorial of 1 is 1. - The factorial of 4 is 24. - The factorial of 5 is 120. - The sum of the factorials is 1 + 24 + 120 = 145. So, `calculate_factorial_sum(145)` should return 145.","solution":"def calculate_factorial_sum(n: int) -> int: Computes the sum of the factorials of the digits of a given positive integer n. Parameters: n (int): The positive integer whose digits\' factorial sum is to be computed. Returns: int: The sum of the factorials of the digits of n. def factorial(x: int) -> int: Computes the factorial of a given non-negative integer x. Parameters: x (int): The non-negative integer whose factorial is to be computed. Returns: int: The factorial of x. if x == 0 or x == 1: return 1 result = 1 for i in range(2, x + 1): result *= i return result digit_str = str(n) factorial_sum = sum(factorial(int(digit)) for digit in digit_str) return factorial_sum"},{"question":"In this coding problem, create a function named `merge_dictionaries` that merges two dictionaries according to the following specifications: 1. If a key is present in both dictionaries, the values should be added together (assuming the values are integers). 2. If a key is present in only one dictionary, retain its value in the result dictionary. The function signature should be: ```python def merge_dictionaries(dict1: dict, dict2: dict) -> dict: ``` For example: ```python dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 3, \'c\': 4, \'d\': 5} result = merge_dictionaries(dict1, dict2) print(result) ``` The output for the above example should be: ``` {\'a\': 1, \'b\': 5, \'c\': 7, \'d\': 5} ``` Implementation details: 1. The function should iterate over both dictionaries and compute the merged result. 2. Ensure that your solution has the time complexity of O(n), where n is the total number of unique keys across both dictionaries. 3. Do not use any external libraries for this task, only built-in Python data structures and functions.","solution":"def merge_dictionaries(dict1: dict, dict2: dict) -> dict: Merges two dictionaries according to the specifications: - If a key is present in both dictionaries, the values should be added together. - If a key is present in only one dictionary, retain its value in the result dictionary. merged_dict = dict1.copy() # Start with the first dictionary for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value # Add values if key is in both dictionaries else: merged_dict[key] = value # Add new key-value pair return merged_dict"},{"question":"Create a Python function that takes a list of integers and returns a dictionary with the mean, median, and mode of the list. If there are multiple modes, return them all in a list. The function should output: dict: A dictionary containing keys \'mean\', \'median\', and \'mode\' with their respective values. You should write self-contained code starting with: ```python from statistics import mean, median, mode, multimode def statistics_summary(numbers): ```","solution":"from statistics import mean, median, multimode def statistics_summary(numbers): Returns a dictionary with the mean, median, and mode of a list of integers. If there are multiple modes, return them all in a list. if not numbers: raise ValueError(\\"The input list is empty.\\") mean_value = mean(numbers) median_value = median(numbers) mode_value = multimode(numbers) if len(mode_value) == 1: mode_value = mode_value[0] return { \'mean\': mean_value, \'median\': median_value, \'mode\': mode_value }"},{"question":"** Write a function `find_pairs_with_difference(nums, diff)` that takes a list of integers, `nums`, and an integer, `diff`, as input. This function should find all unique pairs of elements in the list where the absolute difference between the two elements is equal to `diff`. The function should return a list of tuples, each containing such a pair, sorted in ascending order. Your task is to ensure that each pair `(a, b)` where `a < b` is only included once in the result, and no element appears in more than one pair. **Function Signature:** ```python def find_pairs_with_difference(nums: List[int], diff: int) -> List[Tuple[int, int]]: ``` **Parameters:** - `nums` (List[int]): A list of integers to search for pairs. - `diff` (int): The target absolute difference between two elements. **Returns:** - `List[Tuple[int, int]]`: A list of tuples, each containing a pair of elements where the absolute difference is `diff`, sorted in ascending order. **Example:** ```python find_pairs_with_difference([1, 5, 3, 4, 2], 2) ``` Output: `[(1, 3), (3, 5), (2, 4)]` **Constraints:** - The length of `nums` will be at least 2. - Each element in `nums` is a positive integer. - Pairs should be unique and sorted in ascending order. **Guidelines:** 1. Ensure the function efficiently searches for pairs with the given absolute difference. 2. Sort the pairs in ascending order before returning the result. 3. Each integer from `nums` should not appear in more than one pair in the result. ---","solution":"def find_pairs_with_difference(nums, diff): Find all unique pairs of elements in \'nums\' where the absolute difference between the two elements is equal to \'diff\'. Returns a list of tuples, each containing such a pair, sorted in ascending order. nums = sorted(nums) pairs = [] seen = set() nums_set = set(nums) for num in nums: if (num + diff) in nums_set and (num, num + diff) not in seen: pairs.append((num, num + diff)) seen.add((num, num + diff)) return sorted(pairs)"},{"question":"You are required to write a Python function that works with file handling operations. Specifically, your function will create a file, write some contents to it, read the contents, append additional contents, read the updated contents, and then delete the file. Implement a function named `file_operations()` which performs the following operations: 1. Create a file named `sample.txt`. 2. Write the string `\\"Hello, World!\\"` to `sample.txt`. 3. Read the contents of `sample.txt` and print them. 4. Append the string `\\" Have a great day!\\"` to `sample.txt`. 5. Read the updated contents of `sample.txt` and print them. 6. Delete the `sample.txt` file. Your task involves using the following functions from Python\'s built-in `open` and `os` modules: - `open()` - `os.remove()` Ensure your function correctly follows these steps and uses the specified functions appropriately.","solution":"import os def file_operations(): filename = \'sample.txt\' # 1. Create a file named `sample.txt`. with open(filename, \'w\') as file: # 2. Write the string `\\"Hello, World!\\"` to `sample.txt`. file.write(\\"Hello, World!\\") # 3. Read the contents of `sample.txt` and print them. with open(filename, \'r\') as file: print(file.read()) # 4. Append the string `\\" Have a great day!\\"` to `sample.txt`. with open(filename, \'a\') as file: file.write(\\" Have a great day!\\") # 5. Read the updated contents of `sample.txt` and print them. with open(filename, \'r\') as file: print(file.read()) # 6. Delete the `sample.txt` file. os.remove(filename)"},{"question":"In this problem, you are required to write a Python function named `find_missing_number`. This function will identify the missing number in a given list of consecutive integers. The list will contain all integers within a specified range except for one missing number. Your function will have the following signature: ```python def find_missing_number(arr, start, end): # your code here ``` # Parameters: - `arr` (list of int): A list of consecutive integers with one number missing. - `start` (int): The starting integer of the range. - `end` (int): The ending integer of the range. # Return: - The function should return the missing integer. # Requirements: To solve this problem, you may use the following steps: 1. Calculate the expected sum of the range from `start` to `end` using the formula for the sum of an arithmetic series. 2. Calculate the actual sum of the elements in `arr`. 3. The missing number will be the difference between the expected sum and the actual sum. # Example: ```python arr = [1, 2, 4, 5] start = 1 end = 5 print(find_missing_number(arr, start, end)) # Output: 3 ```","solution":"def find_missing_number(arr, start, end): Finds the missing number in a list of consecutive integers. Parameters: arr (list of int): A list of consecutive integers with one number missing. start (int): The starting integer of the range. end (int): The ending integer of the range. Returns: int: The missing integer. expected_sum = sum(range(start, end + 1)) actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Develop a function that takes a dictionary representing a dataset of employees\' salaries categorized by different departments. The function computes and returns a dictionary with the mean, median, and standard deviation of the salaries for each department. The function should handle missing values by excluding them from the calculations. Assume the input dictionary has the following structure: ```python { \'department\': [\'Engineering\', \'HR\', \'Engineering\', \'Marketing\', \'HR\'], \'salary\': [95000, 58000, float(\'nan\'), 62000, 57000] } ``` The output should be a dictionary with the following structure: ```python { \'Engineering\': {\'mean\': 95000.0, \'median\': 95000.0, \'std\': 0.0}, \'HR\': {\'mean\': 57500.0, \'median\': 57500.0, \'std\': 500.0}, \'Marketing\': {\'mean\': 62000.0, \'median\': 62000.0, \'std\': 0.0} } ``` You should write self-contained code starting with: ```python import pandas as pd import numpy as np from typing import Dict def calculate_salary_statistics(data: Dict[str, list]) -> Dict[str, Dict[str, float]]: ```","solution":"import pandas as pd import numpy as np from typing import Dict def calculate_salary_statistics(data: Dict[str, list]) -> Dict[str, Dict[str, float]]: df = pd.DataFrame(data) # Remove rows with NaN values from salary. df = df.dropna(subset=[\'salary\']) # Initialize the result dictionary result = {} # Group the data by department grouped = df.groupby(\'department\')[\'salary\'] for department, salaries in grouped: mean_salary = salaries.mean() median_salary = salaries.median() std_salary = salaries.std(ddof=0) # Pandas std by default uses the sample standard deviation (ddof=1), change it to population std (ddof=0) # Add statistics to the result dictionary result[department] = { \'mean\': mean_salary, \'median\': median_salary, \'std\': std_salary } return result"},{"question":"You are asked to implement a function to calculate the Jaccard similarity coefficient, which measures the similarity between two sets. This function is particularly useful in applications such as text analysis, image analysis, and clustering. The function `jaccard_similarity(set1, set2)` should: - Accept two arguments: - `set1`: A list representing the first set. - `set2`: A list representing the second set. The Jaccard similarity coefficient is defined as the size of the intersection divided by the size of the union of the sample sets: [ text{Jaccard}(A, B) = frac{|A cap B|}{|A cup B|} ] The function should return a float representing the Jaccard similarity between the two sets. # Function Signature ```python def jaccard_similarity(set1, set2): pass ``` # Example Usage Suppose `set1` is `[1, 2, 3]` and `set2` is `[2, 3, 4]`: ```python set1 = [1, 2, 3] set2 = [2, 3, 4] print(jaccard_similarity(set1, set2)) # Expected output: 0.5 ``` # Constraints: - You can assume that both `set1` and `set2` will not have duplicate elements within them. - The elements of `set1` and `set2` can be of any hashable type. - The function should handle cases where one or both sets are empty. Your function should be efficient and handle typical edge cases (e.g., completely disjoint sets or identical sets).","solution":"def jaccard_similarity(set1, set2): Returns the Jaccard similarity coefficient between two sets. set1 = set(set1) set2 = set(set2) intersection = set1.intersection(set2) union = set1.union(set2) if not union: return 1.0 if not intersection else 0.0 return float(len(intersection)) / len(union) # Example of using the function set1 = [1, 2, 3] set2 = [2, 3, 4] print(jaccard_similarity(set1, set2)) # Expected output: 0.5"},{"question":"In this problem, you are required to handle and process a list of student records where each record is a dictionary. Your task is to write a function named `top_student` that identifies the student with the highest average score across all subjects. Each student record is structured as follows: ```python student = { \\"name\\": \\"student_name\\", \\"scores\\": { \\"math\\": 85, \\"science\\": 90, \\"english\\": 88, \\"history\\": 92 } } ``` The input to your function is a list of dictionaries where each dictionary represents a student\'s record. The function should return the name of the student with the highest average score. Here is the step-by-step procedure to complete the task: 1. Iterate over all student records in the input list. 2. For each student, calculate the average score across all subjects. 3. Keep track of the highest average score and the corresponding student\'s name. 4. After processing all the student records, return the name of the student with the highest average score. You may assume that: - The list contains at least one student record. - Each student has scores for the same set of subjects. - All scores are non-negative integers. Here’s an example to illustrate the function\'s behavior: ```python students = [ { \\"name\\": \\"Alice\\", \\"scores\\": { \\"math\\": 90, \\"science\\": 85, \\"english\\": 88, \\"history\\": 92 } }, { \\"name\\": \\"Bob\\", \\"scores\\": { \\"math\\": 80, \\"science\\": 88, \\"english\\": 84, \\"history\\": 85 } }, { \\"name\\": \\"Charlie\\", \\"scores\\": { \\"math\\": 85, \\"science\\": 87, \\"english\\": 89, \\"history\\": 91 } } ] result = top_student(students) print(result) # Output should be \\"Alice\\" ``` Write your function `top_student` to accomplish the described task.","solution":"def top_student(students): # Initialize variables to keep track of the best student and their average score highest_avg_score = -1 top_student_name = \\"\\" for student in students: # Calculate average score for each student scores = student[\\"scores\\"].values() average_score = sum(scores) / len(scores) # Update if the current student has the highest average score if average_score > highest_avg_score: highest_avg_score = average_score top_student_name = student[\\"name\\"] return top_student_name"},{"question":"In this problem, you will implement a function `next_higher_permutation` that finds the next lexicographical permutation of a given list of numbers. This permutation should be the immediate successor of the current sequence in the set of permutations sorted in lexicographical order. If the given list is the highest permutation (sorted in descending order), the function should return the lowest permutation (sorted in ascending order). The function signature is as follows: ```python def next_higher_permutation(nums): Finds the next lexicographical permutation of the given list of numbers. Parameters: nums (List[int]): A list of integers representing the current permutation Returns: List[int]: The next lexicographical permutation of the given integers ``` Requirements: - The function should find the next lexicographical order permutation using the algorithm below: 1. Identify the longest non-increasing suffix and find the pivot. 2. If the entire list is non-increasing, return the sorted list. 3. Find the rightmost successor to the pivot in the suffix. 4. Swap the pivot with the successor. 5. Reverse the suffix. - The function should handle lists of integers of any length. Example Usage: ```python # Example 1 nums = [1, 2, 3] print(next_higher_permutation(nums)) # Output: [1, 3, 2] # Example 2 nums = [3, 2, 1] print(next_higher_permutation(nums)) # Output: [1, 2, 3] # Example 3 nums = [1, 1, 5] print(next_higher_permutation(nums)) # Output: [1, 5, 1] ```","solution":"def next_higher_permutation(nums): Finds the next lexicographical permutation of the given list of numbers. Parameters: nums (List[int]): A list of integers representing the current permutation Returns: List[int]: The next lexicographical permutation of the given integers # Step 1: Identify the longest non-increasing suffix i = len(nums) - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 # If the entire array is non-increasing, reverse it to return the smallest permutation if i == -1: return nums[::-1] # Step 2: Find the rightmost successor to the pivot in the suffix j = len(nums) - 1 while nums[j] <= nums[i]: j -= 1 # Step 3: Swap the pivot with the successor nums[i], nums[j] = nums[j], nums[i] # Step 4: Reverse the suffix nums[i + 1:] = nums[i + 1:][::-1] return nums"},{"question":"You are provided with a function named `count_frequencies`, which accepts a list of words and returns a dictionary with each unique word as a key and its frequency as the value. Your task is to write this function using Python\'s standard library. The `count_frequencies` function should: 1. Take a list of words as input. 2. Return a dictionary mapping each word to its count (i.e., how many times it appeared in the list). **Function Signature:** ```python def count_frequencies(words: list) -> dict: pass ``` **Parameters:** - `words`: A list of strings, where each string is a word. **Requirements:** 1. Use a dictionary to store the word frequencies. 2. Iterate through the list of words and populate the dictionary with word counts. **Example Usage:** ```python words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"apple\\", \\"banana\\", \\"cherry\\"] frequency_dict = count_frequencies(words) print(frequency_dict) # Output: {\\"apple\\": 3, \\"banana\\": 2, \\"cherry\\": 1} ``` **Hint:** Make use of the dictionary `get` method to simplify incrementing the word counts.","solution":"def count_frequencies(words: list) -> dict: Returns a dictionary with each unique word as a key and its frequency as the value. frequencies = {} for word in words: frequencies[word] = frequencies.get(word, 0) + 1 return frequencies"},{"question":"You are tasked with writing a function in Python, `rotate_matrix_clockwise`, using the `numpy` library. The aim of this function is to rotate an NxN matrix 90 degrees clockwise. This rotation process involves swapping and shifting elements of the matrix to achieve the desired transformation. Here are the requirements: 1. The function should be named `rotate_matrix_clockwise`. 2. The function should accept a single parameter `matrix`, which is a 2D list (list of lists) of integers or floats, representing an NxN matrix. 3. The function should rotate the elements of the matrix 90 degrees clockwise. 4. The function should return the rotated matrix as a list of lists. To achieve the above, you are required to: 1. Use `numpy` to facilitate the matrix rotation. Here is the function signature you should implement: ```python import numpy as np def rotate_matrix_clockwise(matrix): # Your implementation here ``` Below is an example to illustrate the input and the output: **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_matrix = rotate_matrix_clockwise(matrix) print(rotated_matrix) ``` **Expected Output:** ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"import numpy as np def rotate_matrix_clockwise(matrix): Rotates an NxN matrix 90 degrees clockwise. Parameters: matrix (list of lists): 2D list representing the matrix to rotate Returns: list of lists: Rotated matrix np_matrix = np.array(matrix) rotated_matrix = np.rot90(np_matrix, -1) # NumPy rotates counter-clockwise, -1 rotates clockwise return rotated_matrix.tolist()"},{"question":"You are required to write a Python function named `list_files_in_directory`, which lists all the files in a given directory. Utilize the built-in `os` module, specifically the `os.listdir` function, to achieve this task. The function should filter out directories from the list and only include files. Requirements: - **Function Name**: `list_files_in_directory` - **Parameters**: - `directory` (str) – The path to the directory whose files are to be listed. - **Returns**: - A list of file names (List[str]) present in the specified directory. - **Functionality**: The function should take a directory path as input, retrieve the list of entries in the directory, filter out the directories, and return a list containing only the file names. Use the `os.listdir()` method to get all entries and `os.path.isfile()` method to check if an entry is a file. Example: ```python # Let\'s assume the directory \\"/home/user\\" contains the following entries: # \\"file1.txt\\", \\"file2.jpg\\", \\"documents\\" (a subdirectory), \\"photo.png\\" list_files_in_directory(\\"/home/user\\") ``` Expected Output: ```python [\'file1.txt\', \'file2.jpg\', \'photo.png\'] ``` Additional Note: - Ensure to properly handle the case where the provided directory path does not exist or is not accessible, by returning an empty list.","solution":"import os def list_files_in_directory(directory): Lists all files in the given directory, excluding subdirectories. Parameters: directory (str): The path to the directory whose files are to be listed. Returns: List[str]: A list of file names present in the specified directory. try: # Get all entries in the directory entries = os.listdir(directory) # Filter out directories and return only files files = [file for file in entries if os.path.isfile(os.path.join(directory, file))] return files except Exception as e: # In case of any exception (e.g., directory doesn\'t exist) return []"},{"question":"In this problem, you are tasked with implementing a function that performs k-fold cross-validation on a given dataset and classifier. This problem will help you understand the common practice of model evaluation by splitting the dataset into multiple folds and computing the average performance metric. You will implement the function `cross_validate_model(classifier, X, y, k)` that takes the following inputs: 1. `classifier`: An untrained classifier object with `fit` and `predict` methods (e.g., an instance of a classifier from `sklearn`). 2. `X`: A numpy array of shape (n_samples, n_features) containing the dataset features. 3. `y`: A numpy array of shape (n_samples,) containing the dataset labels. 4. `k`: An integer representing the number of folds for cross-validation. Your function should perform the following steps: 1. Split the data into `k` folds. 2. For each fold, use `k-1` parts for training and the remaining part for validation. 3. Train the classifier on the training set and evaluate its performance on the validation set. 4. Compute and return the average accuracy across all folds. **Constraints:** - You must use `numpy` for array operations. - You must not use any built-in cross-validation functions from libraries such as `sklearn`. Here is a template for your function: ```python import numpy as np def cross_validate_model(classifier, X, y, k): Performs k-fold cross-validation on the provided classifier and dataset. Args: classifier: An untrained classifier object with fit and predict methods. X: numpy array of shape (n_samples, n_features) containing the dataset features. y: numpy array of shape (n_samples,) containing the dataset labels. k: int representing the number of folds for cross-validation. Returns: float: The average accuracy across all folds. n_samples = X.shape[0] fold_size = n_samples // k indices = np.arange(n_samples) np.random.shuffle(indices) accuracies = [] for i in range(k): start, end = i * fold_size, (i + 1) * fold_size test_indices = indices[start:end] train_indices = np.concatenate((indices[:start], indices[end:])) X_train, X_test = X[train_indices], X[test_indices] y_train, y_test = y[train_indices], y[test_indices] classifier.fit(X_train, y_train) predictions = classifier.predict(X_test) accuracy = np.mean(predictions == y_test) accuracies.append(accuracy) return np.mean(accuracies) ``` You should ensure that the `numpy` library is imported properly, and your function should handle all the steps of k-fold cross-validation from splitting the dataset to computing the average accuracy.","solution":"import numpy as np def cross_validate_model(classifier, X, y, k): Performs k-fold cross-validation on the provided classifier and dataset. Args: classifier: An untrained classifier object with fit and predict methods. X: numpy array of shape (n_samples, n_features) containing the dataset features. y: numpy array of shape (n_samples,) containing the dataset labels. k: int representing the number of folds for cross-validation. Returns: float: The average accuracy across all folds. n_samples = X.shape[0] fold_size = n_samples // k indices = np.arange(n_samples) np.random.shuffle(indices) accuracies = [] for i in range(k): start, end = i * fold_size, (i + 1) * fold_size test_indices = indices[start:end] train_indices = np.concatenate((indices[:start], indices[end:])) X_train, X_test = X[train_indices], X[test_indices] y_train, y_test = y[train_indices], y[test_indices] classifier.fit(X_train, y_train) predictions = classifier.predict(X_test) accuracy = np.mean(predictions == y_test) accuracies.append(accuracy) return np.mean(accuracies)"},{"question":"# Employee Salary Calculation You are tasked with implementing a class `Employee` that stores an employee\'s name, base salary, and bonus. You will also create a function `calculate_total_salary(employees_list)` that takes a list of `Employee` objects and returns a dictionary with the total salary of each employee. An employee\'s total salary is calculated as base salary plus the bonus. Here\'s the partially defined `Employee` class: ```python class Employee: def __init__(self, name, base_salary, bonus): self.name = name self.base_salary = base_salary self.bonus = bonus def get_total_salary(self): return self.base_salary + self.bonus ``` You\'re required to: 1. Complete the `Employee` class definition. 2. Implement the function `calculate_total_salary(employees_list)` which returns a dictionary where the keys are employee names and the values are their corresponding total salaries. Example: ```python # Sample usage emp1 = Employee(\\"Alice\\", 50000, 5000) emp2 = Employee(\\"Bob\\", 60000, 7000) emp3 = Employee(\\"Charlie\\", 70000, 8000) employees_list = [emp1, emp2, emp3] total_salaries = calculate_total_salary(employees_list) print(total_salaries) # Output: {\'Alice\': 55000, \'Bob\': 67000, \'Charlie\': 78000} ``` # Requirements: 1. Ensure the `Employee` class is properly defined and can calculate the total salary. 2. Implement `calculate_total_salary(employees_list)` which takes a list of `Employee` objects and returns a dictionary with their total salaries. 3. Your implementation should match the usage example provided. Complete the function and class definition as described.","solution":"class Employee: def __init__(self, name, base_salary, bonus): self.name = name self.base_salary = base_salary self.bonus = bonus def get_total_salary(self): return self.base_salary + self.bonus def calculate_total_salary(employees_list): Given a list of Employee objects, returns a dictionary with employee names as keys and their total salary as values. total_salaries = {} for employee in employees_list: total_salaries[employee.name] = employee.get_total_salary() return total_salaries"},{"question":"You are given a list of words `words` and a target word `target`. Your task is to write a function called `custom_autocomplete(words, target)` that returns all words from the list which start with the given target word. The returned words should be sorted first by their lengths in ascending order, and then by alphabetical order if lengths are equal. # Function Signature ```python def custom_autocomplete(words: list[str], target: str) -> list[str]: pass ``` # Example ```python words = [\\"apple\\", \\"app\\", \\"application\\", \\"apply\\", \\"apricot\\", \\"banana\\"] target = \\"app\\" print(custom_autocomplete(words, target)) # Output: [\\"app\\", \\"apple\\", \\"apply\\", \\"application\\"] ``` # Constraints 1. The input list `words` will have at least one element. 2. Each word and the target will be non-empty strings consisting of lowercase alphabetic characters. # Requirements 1. Use list comprehensions to filter the words that start with the target. 2. Sort the filtered words first by their lengths and then alphabetically. # Additional Information - The function should efficiently handle the filtering and sorting of words. - You may use Python\'s built-in sorting functions. # Note - This problem will improve your handling of string manipulations and sorting techniques in Python.","solution":"def custom_autocomplete(words, target): Returns a list of words from the input list that start with the given target. The list is sorted first by length and then alphabetically. # Filter words that start with the target filtered_words = [word for word in words if word.startswith(target)] # Sort the filtered words first by length, then alphabetically filtered_words.sort(key=lambda x: (len(x), x)) return filtered_words"},{"question":"You are asked to create a function `filter_and_sort_dict` that takes a dictionary and a threshold as input. This function should perform the following tasks: 1. Filter the dictionary to keep only those key-value pairs where the value is greater than the specified threshold. 2. Return a list of tuples, where each tuple represents a filtered key-value pair. 3. The returned list should be sorted in descending order based on the values. The purpose of this exercise is to test your ability to manipulate dictionaries and sort data based on specific criteria. Function signature: ```python def filter_and_sort_dict(input_dict, threshold): # Your code here ``` **Inputs**: - `input_dict`: A dictionary where keys are strings and values are integers. - `threshold`: An integer representing the threshold value for filtering. **Outputs**: - A list of tuples, each containing a key-value pair from the dictionary that meets the threshold condition, sorted in descending order by value. **Example**: ```python input_dict = {\'a\': 5, \'b\': 12, \'c\': 7, \'d\': 3} threshold = 6 print(filter_and_sort_dict(input_dict, threshold)) ``` **Expected Output**: ``` [(\'b\', 12), (\'c\', 7)] ```","solution":"def filter_and_sort_dict(input_dict, threshold): Filters the dictionary to keep only those key-value pairs where the value is greater than the specified threshold. Returns a sorted list of tuples in descending order based on the values. Parameters: input_dict (dict): The input dictionary with string keys and integer values. threshold (int): The threshold for filtering values. Returns: list: A list of tuples sorted in descending order based on values. # Filtering the dictionary based on the threshold filtered_dict = {k: v for k, v in input_dict.items() if v > threshold} # Sorting the filtered dictionary by value in descending order sorted_list = sorted(filtered_dict.items(), key=lambda item: item[1], reverse=True) return sorted_list"},{"question":"**Background:** Graph traversal algorithms are commonly used in many areas of computer science, including social networks, web searching, and network routing. One such popular algorithm is Depth-First Search (DFS), which explores as far as possible along each branch before backtracking. **Objective:** Write a function `dfs_traversal(graph, start_node)` that performs a depth-first traversal on a graph starting from the given node and returns the order of visited nodes. **Function Signature:** ```python def dfs_traversal(graph, start_node): # Your code here ``` **Parameters:** 1. `graph` (dict): A dictionary where keys are node labels and values are lists of adjacent nodes. 2. `start_node` (str or int): The starting node for the DFS traversal. **Returns:** - Returns a list representing the order in which nodes are visited during the DFS traversal. **Details:** 1. You should implement the DFS traversal using a stack data structure. 2. Pay attention to avoiding infinite loops in cyclic graphs by keeping track of visited nodes. 3. The graph is represented as an adjacency list. 4. The traversal should visit all reachable nodes from the `start_node`. **Example:** ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } start_node = \'A\' print(dfs_traversal(graph, start_node)) # Expected Output: [\'A\', \'C\', \'F\', \'E\', \'B\', \'D\'] ``` **Notes:** 1. You may assume that all nodes in the graph are unique and the graph does not contain any self-loops. 2. The order of traversal can be influenced by the order of nodes in the adjacency list.","solution":"def dfs_traversal(graph, start_node): Performs a depth-first traversal on a graph starting from the given node. Parameters: graph (dict): A dictionary where keys are node labels and values are lists of adjacent nodes. start_node (str or int): The starting node for the DFS traversal. Returns: list: The order in which nodes are visited during the DFS traversal. visited = set() # Set to keep track of visited nodes traversal_order = [] # List to record the order of visited nodes stack = [start_node] # Stack for DFS while stack: node = stack.pop() if node not in visited: visited.add(node) traversal_order.append(node) # Add unvisited neighbors to the stack for neighbor in graph[node]: if neighbor not in visited: stack.append(neighbor) return traversal_order"},{"question":"Create a function that takes a string input representing a mathematical expression containing integers and the operators +, -, *, and /. The function should evaluate the expression and return the result as a float. You are not allowed to use the built-in eval function. Ensure the function handles whitespace and potential division by zero errors appropriately. The function should be structured as follows: ``` def evaluate_expression(expression): ``` Here are some example inputs and expected outputs: - evaluate_expression(\\"3 + 5\\") should return 8.0 - evaluate_expression(\\"10 + 2 * 6\\") should return 22.0 - evaluate_expression(\\"100 * 2 + 12\\") should return 212.0 - evaluate_expression(\\"100 * ( 2 + 12 )\\") should return 1400.0 - evaluate_expression(\\"100 * ( 2 + 12 ) / 14\\") should return 100.0","solution":"import operator import re def evaluate_expression(expression): def parse_tokens(expression): tokens = re.findall(r\'d+|[+-*/()]\', expression) return tokens def shunting_yard(tokens): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output_queue = [] operator_stack = [] for token in tokens: if token.isdigit(): output_queue.append(token) elif token in precedence: while (operator_stack and operator_stack[-1] in precedence and precedence[operator_stack[-1]] >= precedence[token]): output_queue.append(operator_stack.pop()) operator_stack.append(token) elif token == \'(\': operator_stack.append(token) elif token == \')\': while operator_stack and operator_stack[-1] != \'(\': output_queue.append(operator_stack.pop()) operator_stack.pop() while operator_stack: output_queue.append(operator_stack.pop()) return output_queue def evaluate_rpn(tokens): stack = [] ops = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.truediv } for token in tokens: if token.isdigit(): stack.append(float(token)) elif token in ops: rhs = stack.pop() lhs = stack.pop() if token == \'/\' and rhs == 0: return float(\'inf\') stack.append(ops[token](lhs, rhs)) return stack[0] tokens = parse_tokens(expression) rpn = shunting_yard(tokens) result = evaluate_rpn(rpn) return result"},{"question":"You need to write a Python function called `mergeArrays` that merges two sorted lists of integers into a single sorted list, without using the built-in sort function. The implementation should focus on maintaining efficiency in both time and space complexity. # Function Specification - **Function Name**: `mergeArrays` - **Parameters**: - `array1` (list): A sorted list of integers. - `array2` (list): Another sorted list of integers. - **Returns**: A single sorted list containing all elements from both input lists. # Requirements: 1. The function should not use Python\'s built-in sorting functions. 2. The function should efficiently merge the input lists into a single sorted list by exploiting the fact that both input lists are already sorted. 3. The function should handle cases where one or both input lists are empty. 4. Do not assume the length of the input lists. They can be of different lengths, including zero. # Example Usage ```python merged_list = mergeArrays([1, 3, 5], [2, 4, 6]) print(merged_list) # Output: [1, 2, 3, 4, 5, 6] merged_list = mergeArrays([1, 2, 3], []) print(merged_list) # Output: [1, 2, 3] merged_list = mergeArrays([], [4, 5, 6]) print(merged_list) # Output: [4, 5, 6] merged_list = mergeArrays([5, 10], [2, 8, 12]) print(merged_list) # Output: [2, 5, 8, 10, 12] ``` This task aims to test your understanding of merging algorithms and handling edge cases such as empty lists.","solution":"def mergeArrays(array1, array2): Merges two sorted lists into a single sorted list. Parameters: array1 (list): A sorted list of integers. array2 (list): Another sorted list of integers. Returns: list: A single sorted list containing all elements from both input lists. merged = [] i, j = 0, 0 # Traverse both arrays and insert the smaller element from arr1 or arr2 # into the merged array while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged.append(array1[i]) i += 1 else: merged.append(array2[j]) j += 1 # Collect remaining elements left in array1, if any while i < len(array1): merged.append(array1[i]) i += 1 # Collect remaining elements left in array2, if any while j < len(array2): merged.append(array2[j]) j += 1 return merged"},{"question":"You are implementing a function to merge two sorted singly linked lists into a single sorted singly linked list. The linked lists will only contain integers in ascending order. Your function should maintain this order in the resulting list without creating any new nodes, just by rearranging the existing ones. Here are the specifics: 1. **Function Name**: `merge_sorted_lists` 2. **Parameters**: - `list1`: The head node of the first sorted singly linked list. - `list2`: The head node of the second sorted singly linked list. 3. **Functionality**: - The function should take the head nodes of two sorted singly linked lists. - Merge these two lists into a single sorted linked list. - The merged list should be returned starting from its head node. 4. **Constraints**: - Both input lists are sorted in ascending order. - You should not create any new nodes, just rearrange the existing nodes. 5. **Definition for List Node**: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` **Example Usage**: ```python # List1: 1 -> 3 -> 5 list1 = ListNode(1, ListNode(3, ListNode(5))) # List2: 2 -> 4 -> 6 list2 = ListNode(2, ListNode(4, ListNode(6))) merged_head = merge_sorted_lists(list1, list2) current = merged_head merged_list = [] while current: merged_list.append(current.value) current = current.next # merged_list should now be [1, 2, 3, 4, 5, 6] ``` **Expected Output**: The function should return the head of the merged list: 1 -> 2 -> 3 -> 4 -> 5 -> 6","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def merge_sorted_lists(list1, list2): dummy = ListNode() tail = dummy while list1 and list2: if list1.value < list2.value: tail.next = list1 list1 = list1.next else: tail.next = list2 list2 = list2.next tail = tail.next if list1: tail.next = list1 elif list2: tail.next = list2 return dummy.next"},{"question":"Write a function that simulates a random walk and plots its path in a 2D space. The function should start at the origin (0,0) and take \'n\' steps, where each step is randomly chosen to be either up, down, left, or right. The user should be able to specify the number of steps and the random seed. The function should output: tuple: A tuple containing: - steps (ndarray): An array of the steps taken. - x_positions (ndarray): An array of the x coordinates of the path. - y_positions (ndarray): An array of the y coordinates of the path. - figure: The figure object containing the plot of the path. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def random_walk(n=100, random_seed=None): ```","solution":"import numpy as np import matplotlib.pyplot as plt def random_walk(n=100, random_seed=None): Simulates a random walk and plots its path in a 2D space. Parameters: n (int): Number of steps to take. random_seed (int): Seed for the random number generator. Returns: tuple: A tuple containing: - steps (ndarray): An array of the steps taken. - x_positions (ndarray): An array of the x coordinates of the path. - y_positions (ndarray): An array of the y coordinates of the path. - figure: The figure object containing the plot of the path. if random_seed is not None: np.random.seed(random_seed) # Possible steps: up, down, left, right step_options = np.array([[0, 1], [0, -1], [-1, 0], [1, 0]]) steps = step_options[np.random.choice(4, size=n)] x_positions = np.cumsum(steps[:, 0]) y_positions = np.cumsum(steps[:, 1]) # Insert the starting point (0,0) at the beginning x_positions = np.insert(x_positions, 0, 0) y_positions = np.insert(y_positions, 0, 0) # Plotting the random walk fig = plt.figure() plt.plot(x_positions, y_positions, marker=\'o\') plt.title(f\'Random Walk with {n} steps\') plt.xlabel(\'X Position\') plt.ylabel(\'Y Position\') plt.grid(True) return steps, x_positions, y_positions, fig"},{"question":"You are required to write a function that simulates a voting system using dictionaries and lists. The function should count votes for different candidates based on a list of votes cast. Each vote is represented by a string containing the candidate\'s name. Function Specifications - **Function Name**: count_votes - **Parameters**: - `votes` (List[str]): A list of strings where each string represents a vote for a candidate. The function should: 1. Create an empty dictionary to store the count of votes for each candidate. 2. Iterate through the list of votes. 3. For each vote, check if the candidate is already in the dictionary. - If the candidate is in the dictionary, increment their vote count by 1. - If the candidate is not in the dictionary, add the candidate to the dictionary with a vote count of 1. 4. Finally, return the dictionary containing all candidates and their corresponding vote counts. # Example Usage: ```python votes = [\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Eve\\", \\"Bob\\", \\"Alice\\"] result = count_votes(votes) print(result) # Should output: {\'Alice\': 3, \'Bob\': 2, \'Eve\': 1} ``` # Constraints: - The list `votes` will contain between 1 and 1000 votes. - Each candidate\'s name in the list will be a non-empty string containing alphabetic characters.","solution":"def count_votes(votes): Counts the votes for each candidate from a list of votes. Args: votes (List[str]): A list of strings where each string represents a vote for a candidate. Returns: dict: A dictionary where the keys are candidate names and the values are their corresponding vote counts. vote_count = {} for vote in votes: if vote in vote_count: vote_count[vote] += 1 else: vote_count[vote] = 1 return vote_count"},{"question":"You are tasked with implementing a function to perform data imputation and scaling using the `sklearn` library. Data imputation deals with missing values in the dataset, and scaling adjusts the feature values to a standard range. These steps are crucial for preparing the data for machine learning algorithms. You will be provided with a dataset and a separate test set, both in the form of pandas DataFrames. Your task is to write a function `impute_and_scale` that performs the following steps: 1. **Impute Missing Values**: Use `SimpleImputer` to fill in missing values in both datasets. Use the mean strategy provided by `SimpleImputer`. 2. **Feature Scaling**: Use `StandardScaler` to scale the features in both datasets to have zero mean and unit variance. 3. **Save Processed Data**: - Create a new DataFrame after imputation and scaling for the original dataset and the test dataset. - Save the processed original dataset to a CSV file named \'ImputedScaledTrain.csv\'. - Save the processed test dataset to another CSV file named \'ImputedScaledTest.csv\'. The function signature should be: ```python def impute_and_scale(data: pd.DataFrame, test: pd.DataFrame) -> None: ``` # Constraints - The input `data` and `test` are pandas DataFrames. - Use `SimpleImputer` from `sklearn.impute` with the mean strategy. - Use `StandardScaler` from `sklearn.preprocessing`. Here is an example of how `impute_and_scale` should work: ```python import pandas as pd import numpy as np # Sample data (not actual data, just a template) data = pd.DataFrame({ \'feature1\': [1.0, 2.0, np.nan, 4.0, 5.0], \'feature2\': [2.0, np.nan, 3.0, 4.0, 5.0], \'feature3\': [np.nan, np.nan, 3.0, 4.0, 5.0] }) test = pd.DataFrame({ \'feature1\': [5.0, 4.0, 3.0, np.nan, 1.0], \'feature2\': [5.0, np.nan, 3.0, 2.0, 1.0], \'feature3\': [5.0, 4.0, np.nan, np.nan, 1.0] }) impute_and_scale(data, test) ``` # Guidelines for Implementation - Ensure that you handle DataFrame columns correctly and apply imputation and scaling to each column. - Save the resulting DataFrames to CSV files as specified.","solution":"import pandas as pd from sklearn.impute import SimpleImputer from sklearn.preprocessing import StandardScaler def impute_and_scale(data: pd.DataFrame, test: pd.DataFrame) -> None: Fills in missing values and scales the features in both data and test DataFrames. The processed DataFrames are saved to \'ImputedScaledTrain.csv\' and \'ImputedScaledTest.csv\'. :param data: Original dataset as a pandas DataFrame :param test: Test dataset as a pandas DataFrame # Imputing missing values imputer = SimpleImputer(strategy=\'mean\') data_imputed = imputer.fit_transform(data) test_imputed = imputer.transform(test) # Scaling features scaler = StandardScaler() data_scaled = scaler.fit_transform(data_imputed) test_scaled = scaler.transform(test_imputed) # Creating DataFrames from processed data data_scaled_df = pd.DataFrame(data_scaled, columns=data.columns) test_scaled_df = pd.DataFrame(test_scaled, columns=test.columns) # Saving to CSV files data_scaled_df.to_csv(\'ImputedScaledTrain.csv\', index=False) test_scaled_df.to_csv(\'ImputedScaledTest.csv\', index=False)"},{"question":"You need to implement a function `calculate_top_earners` that processes employee salary data from a list of dictionaries. Each dictionary contains the `name` of the employee and their `salary`. The function should accept the following parameters: - `employee_data`: A list of dictionaries where each dictionary contains `name` (a string) and `salary` (an integer) keys. - `top_n`: An integer representing the number of top earners to retrieve. Your function should return a list of names of the top `top_n` earners, sorted by their salary in descending order. If two or more employees have the same salary, maintain their order as in the original list. # Function Signature ```python def calculate_top_earners(employee_data: list, top_n: int) -> list: ``` # Example Given the following `employee_data`: ```python [ {\\"name\\": \\"Alice\\", \\"salary\\": 70000}, {\\"name\\": \\"Bob\\", \\"salary\\": 48000}, {\\"name\\": \\"Charlie\\", \\"salary\\": 80000}, {\\"name\\": \\"Diana\\", \\"salary\\": 75000} ] ``` - If `top_n` is 2, the function should return: ```python [\\"Charlie\\", \\"Diana\\"] ``` - If `top_n` is 3, the function should return: ```python [\\"Charlie\\", \\"Diana\\", \\"Alice\\"] ``` # Constraints 1. The `employee_data` list will have at least 1 entry. 2. `top_n` will be a positive integer greater than 0 and less than or equal to the length of `employee_data`. 3. The salaries are unique positive integers.","solution":"def calculate_top_earners(employee_data: list, top_n: int) -> list: Returns a list of names of the top earning employees. :param employee_data: List of dictionaries with keys \\"name\\" and \\"salary\\". :param top_n: Number of top earners to retrieve. :return: List of names of top earners. # Sort the employee data by salary in descending order sorted_employees = sorted(employee_data, key=lambda x: x[\'salary\'], reverse=True) # Get the top_n employees top_earners = [employee[\\"name\\"] for employee in sorted_employees[:top_n]] return top_earners"},{"question":"As a software developer, you have been tasked with creating a mini calculator that performs basic arithmetic operations. The calculator should be able to handle addition, subtraction, multiplication, and division. You will create a function named `mini_calculator` that processes a string input containing two numbers and an operator. The function should: 1. Accept one parameter, `operation`, which is a string in the format \\"a operator b\\" where `a` and `b` are floating-point numbers, and `operator` is one of the following characters: `+`, `-`, `*`, `/`. 2. Parse the input string to extract the two numbers and the operator. 3. Perform the appropriate arithmetic operation based on the extracted operator. 4. Return the result of the arithmetic operation as a float. If the operator is division and the divisor is zero, return `None` to indicate an undefined operation. Assume the input will always be in the correct format and the values will be valid floating-point numbers. Function Signature: `def mini_calculator(operation: str) -> float` Example Usage: ```python result = mini_calculator(\\"10.0 + 5.0\\") print(result) # Output: 15.0 result = mini_calculator(\\"3.5 * 2.0\\") print(result) # Output: 7.0 result = mini_calculator(\\"8.0 / 0\\") print(result) # Output: None ```","solution":"def mini_calculator(operation: str) -> float: Returns the result of an arithmetic operation specified in the string format \\"a operator b\\", where `a` and `b` are floating-point numbers, and `operator` is one of +, -, *, /. If division by zero is attempted, the function returns None. # Split the input string to extract the two numbers and the operator parts = operation.split() a = float(parts[0]) operator = parts[1] b = float(parts[2]) # Perform the corresponding arithmetic operation based on the operator if operator == \'+\': return a + b elif operator == \'-\': return a - b elif operator == \'*\': return a * b elif operator == \'/\': if b == 0: return None return a / b"},{"question":"** You are tasked with creating a function that processes text data for sentiment analysis. The function should load text data from a given file, preprocess the text by removing punctuation and converting all words to lowercase, and then compute the frequency of each word. The function should return a dictionary where the keys are words and the values are their respective frequencies. The function should be named `process_text_data` and should take one argument: - `filename` (a string): The name of the text file containing the data. Your function should return a dictionary that contains the word frequencies. Specifically, your function should: 1. Load the text data from the specified file. 2. Remove punctuation from the text. 3. Convert all words to lowercase. 4. Compute the frequency of each word in the text. 5. Return the word frequency dictionary. **Example Data:** Assume the following is the content of the text file `data.txt`: ``` Hello world! Hello everyone. Welcome to the world of coding. Coding is fun. ``` **Example Function Call:** ```python word_frequencies = process_text_data(\'data.txt\') ``` **Expected Dictionary Output:** The function should return the following dictionary: ```python { \'hello\': 2, \'world\': 2, \'everyone\': 1, \'welcome\': 1, \'to\': 1, \'the\': 1, \'of\': 1, \'coding\': 2, \'is\': 1, \'fun\': 1 } ```","solution":"import string def process_text_data(filename): This function processes text data for sentiment analysis. Parameters: filename (str): Name of the text file containing the data. Returns: dict: Dictionary with word frequencies. with open(filename, \'r\') as file: text = file.read() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Convert to lowercase text = text.lower() # Split into words words = text.split() # Compute word frequencies word_frequencies = {} for word in words: if word in word_frequencies: word_frequencies[word] += 1 else: word_frequencies[word] = 1 return word_frequencies"},{"question":"You are provided with two sorted lists of integers. Your task is to write a function `merge_sorted_lists` that merges these two lists into a single sorted list without using any sorting functions. The resulting list should be sorted in ascending order. Function Signature: ```python def merge_sorted_lists(list1: list, list2: list) -> list: pass ``` **Requirements:** 1. The function should merge the two input lists efficiently. 2. The function should handle lists of different lengths. 3. The function should not use any built-in sorting functions. **Example:** ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8, 10] result = merge_sorted_lists(list1, list2) print(result) ``` Expected Output: ``` [1, 2, 3, 4, 5, 6, 7, 8, 10] ``` **Explanation:** - The function should iterate through both lists and append the smaller element to the result list. - Continue this process until all elements from both lists are added to the result list. - Ensure the final merged list maintains a sorted order throughout the process.","solution":"def merge_sorted_lists(list1: list, list2: list) -> list: Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and append the smaller element to the merged list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append the remaining elements of list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append the remaining elements of list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Implement a function `calculate_inventory_stats` that reads data from a file and processes the inventory records for a store. The file will contain information about various products and their stock levels over different months. The format of the file is structured as follows: 1. The first line contains an integer, `PRODUCT_COUNT`, which indicates the number of different products available. 2. The next `PRODUCT_COUNT` lines each describe a product with: - An integer `product_id`, which is the unique identifier of the product. - A string `product_name`, which is the name of the product. 3. The following line contains an integer `MONTH_COUNT`, which represents the number of months for which stock data is available. 4. The next `MONTH_COUNT` lines each describe the stock levels for a month, containing: - A string `month_name`, such as \\"January\\" or \\"February\\". - `PRODUCT_COUNT` pairs of integers where each pair consists of: - A `product_id` which corresponds to a product in the inventory. - An `opening_stock` which is the stock level at the beginning of the month. Your task is to implement the `calculate_inventory_stats(fin: TextIO) -> Tuple[int, List[Tuple[int, str]], int, Dict[str, Dict[int, int]]]` function that reads inventory data from the given file object `fin` and returns a tuple containing: 1. The integer `PRODUCT_COUNT`. 2. A list of tuples, each containing a product\'s ID and name. 3. The integer `MONTH_COUNT`. 4. A dictionary where the keys are month names and the values are dictionaries mapping `product_id` to its corresponding `opening_stock`. ```python from typing import TextIO, Tuple, List, Dict import itertools def calculate_inventory_stats(fin: TextIO) -> Tuple[int, List[Tuple[int, str]], int, Dict[str, Dict[int, int]]]: lines = fin.readlines() # Extract product count iterator = iter(lines) product_count = int(next(iterator).strip()) # Extract product information products = [] for _ in range(product_count): parts = next(iterator).strip().split(maxsplit=1) product_id = int(parts[0]) product_name = parts[1] products.append((product_id, product_name)) # Extract month count month_count = int(next(iterator).strip()) # Extract stock levels for each month month_stock = {} for _ in range(month_count): parts = next(iterator).strip().split() month_name = parts[0] stock = {} for i in range(1, len(parts), 2): product_id = int(parts[i]) opening_stock = int(parts[i + 1]) stock[product_id] = opening_stock month_stock[month_name] = stock return product_count, products, month_count, month_stock ```","solution":"from typing import TextIO, Tuple, List, Dict def calculate_inventory_stats(fin: TextIO) -> Tuple[int, List[Tuple[int, str]], int, Dict[str, Dict[int, int]]]: lines = fin.readlines() # Extract product count iterator = iter(lines) product_count = int(next(iterator).strip()) # Extract product information products = [] for _ in range(product_count): parts = next(iterator).strip().split(maxsplit=1) product_id = int(parts[0]) product_name = parts[1] products.append((product_id, product_name)) # Extract month count month_count = int(next(iterator).strip()) # Extract stock levels for each month month_stock = {} for _ in range(month_count): parts = next(iterator).strip().split() month_name = parts[0] stock = {} for i in range(1, len(parts), 2): product_id = int(parts[i]) opening_stock = int(parts[i + 1]) stock[product_id] = opening_stock month_stock[month_name] = stock return product_count, products, month_count, month_stock"},{"question":"Here\'s a coding assessment question designed to align with the examples provided: Design a function that cleans up a CSV file. The input will be a path to a CSV file, where each row contains comma-separated values. The function should remove any duplicate rows (keeping only the first occurrence) and save the cleaned data to a specified output file path. The function should ensure that the output CSV file has no extra spaces around the values. The function should return the number of rows in the cleaned CSV file. Assume that the input CSV file has a header row that should be preserved in the output. You should write self-contained code starting with: ``` import csv def clean_csv(input_csv_path: str, output_csv_path: str) -> int: ```","solution":"import csv def clean_csv(input_csv_path: str, output_csv_path: str) -> int: Remove duplicate rows from a CSV file (keeping only the first occurrence) and save the cleaned data to a specified output file path. Parameters: input_csv_path (str): Path to the input CSV file. output_csv_path (str): Path to the output CSV file where cleaned data will be saved. Returns: int: Number of rows in the cleaned CSV file. seen = set() cleaned_rows = [] # Read the input CSV file and clean the data with open(input_csv_path, mode=\'r\', newline=\'\') as infile: reader = csv.reader(infile) header = next(reader) cleaned_rows.append(header) for row in reader: # Join row elements to remove duplicates based on row content row_str = \',\'.join(item.strip() for item in row) if row_str not in seen: seen.add(row_str) cleaned_rows.append([item.strip() for item in row]) # Write the cleaned data to the output CSV file with open(output_csv_path, mode=\'w\', newline=\'\') as outfile: writer = csv.writer(outfile) writer.writerows(cleaned_rows) return len(cleaned_rows) - 1 # minus 1 to exclude the header"},{"question":"You are tasked with developing a function called `generate_sentence` that will take lists of subjects, verbs, and objects and produce all possible grammatical sentences. Each sentence should follow the structure `subject verb object`. The function should use itertoolsʼ `product` to generate combinations. **Function Specifications:** - The function should return a list of strings. Each string in the list should be a valid grammatical sentence of the form `subject verb object`. - The function should leverage `itertools.product` to create combinations of subjects, verbs, and objects. Specifically, the function should: 1. Generate all possible tuples `(subject, verb, object)` by computing the Cartesian product of the input lists. 2. Format these tuples into strings that follow the sentence structure `subject verb object`. 3. Return the list of these formatted strings. **Constraints**: - Each list can contain between 1 and 10 elements. - Each element in the lists will be a string containing alphabetic characters only. **Example**: Suppose you have the following input lists: ```python subjects = [\\"The cat\\", \\"A dog\\"] verbs = [\\"jumps over\\", \\"chases\\"] objects = [\\"the moon\\", \\"a mouse\\"] ``` A call to `generate_sentence(subjects, verbs, objects)` should return: ```python [ \\"The cat jumps over the moon\\", \\"The cat jumps over a mouse\\", \\"The cat chases the moon\\", \\"The cat chases a mouse\\", \\"A dog jumps over the moon\\", \\"A dog jumps over a mouse\\", \\"A dog chases the moon\\", \\"A dog chases a mouse\\" ] ```","solution":"from itertools import product def generate_sentence(subjects, verbs, objects): Generates all possible grammatical sentences from the given subjects, verbs, and objects. Each sentence follows the structure \'subject verb object\'. Parameters: subjects (list of str): List of subject strings. verbs (list of str): List of verb strings. objects (list of str): List of object strings. Returns: list of str: List of all possible grammatical sentences. # Use itertools.product to generate all combinations of subject, verb, and object sentences = [\' \'.join(item) for item in product(subjects, verbs, objects)] return sentences"},{"question":"You are given a dataset containing transaction records from an e-commerce platform. Each transaction consists of an `item_id`, `user_id`, `price`, `quantity`, and `timestamp`. Implement a function `high_value_customers` that identifies the top `k` users who have spent the most money on the platform. The function should perform the following tasks: 1. **Data Aggregation**: - Calculate the total amount spent by each user. This is obtained by summing the products of `price` and `quantity` for each transaction of the user. 2. **Ranking**: - Rank the users based on the total amount spent in descending order. 3. **Return Top `k` Customers**: - Select and return the top `k` users based on the total amount spent. **Input**: - `transactions`: A Pandas DataFrame containing the transaction records with columns `item_id`, `user_id`, `price`, `quantity`, and `timestamp`. - `k`: An integer representing the number of top spenders to return. **Output**: - A Pandas DataFrame containing the `user_id` and `total_spent` of the top `k` customers. **Function Signature**: ```python def high_value_customers(transactions: pd.DataFrame, k: int) -> pd.DataFrame: ``` **Example**: ```python import pandas as pd transactions = pd.DataFrame({ \'item_id\': [1, 2, 1, 3, 2], \'user_id\': [101, 102, 101, 101, 103], \'price\': [20, 15, 20, 10, 15], \'quantity\': [1, 2, 2, 1, 1], \'timestamp\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'] }) k = 2 top_customers = high_value_customers(transactions, k) ``` **Expected Output**: ```plaintext user_id total_spent 0 101 70 1 102 30 ``` **Requirements**: - Use Pandas for data manipulation. - Ensure that the function can handle a large number of transactions efficiently.","solution":"import pandas as pd def high_value_customers(transactions: pd.DataFrame, k: int) -> pd.DataFrame: Identifies the top `k` users who have spent the most money on the platform. Parameters: transactions (pd.DataFrame): DataFrame with transaction records. k (int): Number of top spenders to return. Returns: pd.DataFrame: DataFrame containing the `user_id` and `total_spent` of the top `k` customers. # Data Aggregation: Calculate total amount spent by each user transactions[\'total_spent\'] = transactions[\'price\'] * transactions[\'quantity\'] total_spent_per_user = transactions.groupby(\'user_id\')[\'total_spent\'].sum().reset_index() # Ranking: sort users based on total amount spent in descending order total_spent_per_user = total_spent_per_user.sort_values(by=\'total_spent\', ascending=False) # Return the top `k` customers top_k_customers = total_spent_per_user.head(k).reset_index(drop=True) return top_k_customers"},{"question":"Write a function `correct_spelling` that takes in an English sentence and a list of correct words, and returns the sentence with all misspelled words corrected. The corrected word should be the closest match from the list of correct words based on the minimum number of single-character edits (insertions, deletions, or substitutions). For this task, you will use the Levenshtein distance to determine the closest match for a misspelled word. # Function Signature: ```python def correct_spelling(sentence: str, correct_words: list) -> str: pass ``` # Arguments: - `sentence` (str): A string representing the sentence with possible misspellings. - `correct_words` (list): A list of correctly spelled words. # Returns: - `corrected_sentence` (str): The sentence with all misspelled words corrected. # Example: ```python sentence = \\"Thiss is a smple test\\" correct_words = [\\"This\\", \\"is\\", \\"a\\", \\"simple\\", \\"test\\"] correct_spelling(sentence, correct_words) # Output: \\"This is a simple test\\" ``` # Usage Requirements: - Implement the Levenshtein distance algorithm to find the closest match for misspelled words. - The function should handle case-insensitivity by treating words in a case-insensitive manner but preserving the original case in the output. # Algorithm: 1. Split the sentence into individual words. 2. For each word in the sentence: a. Compare it against each word in the list of correct words using the Levenshtein distance. b. Find the word with the minimum distance. c. Replace the misspelled word with the closest match. 3. Join the words back into a single string to form the corrected sentence. # Assumptions: - The list of correct words contains all the words necessary to correct any misspelled words in the sentence. - The sentence contains only alphabetic characters and spaces.","solution":"def levenshtein_distance(word1, word2): Calculate the Levenshtein distance between two words. len1, len2 = len(word1), len(word2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(len1 + 1): dp[i][0] = i for j in range(len2 + 1): dp[0][j] = j for i in range(1, len1 + 1): for j in range(1, len2 + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # deletion dp[i][j - 1] + 1, # insertion dp[i - 1][j - 1] + 1) # substitution return dp[len1][len2] def correct_spelling(sentence, correct_words): Correct the spelling in a given sentence using a list of correct words. words = sentence.split() corrected_words = [] for word in words: word_lower = word.lower() min_distance = float(\'inf\') closest_word = word for correct_word in correct_words: distance = levenshtein_distance(word_lower, correct_word.lower()) if distance < min_distance: min_distance = distance closest_word = correct_word corrected_words.append(closest_word) return \' \'.join(corrected_words)"},{"question":"Write a Python function named `reverse_string_preserve_case` that takes a single string as an argument and returns the string reversed while preserving the case of each character as it appeared in the original string. Specifically, if a character was uppercase in the original string, the character at the mirrored position in the reversed string should also be uppercase, and similarly for lowercase characters. You need to implement a function with the following signature: ```python def reverse_string_preserve_case(s: str) -> str: # Your implementation here pass ``` **Requirements:** 1. Reverse the string while maintaining the case of each character as it was in the original string. 2. Maintain the relative positioning of characters such that, for instance, the first character of the original string swaps places with the last character in the result. **Examples:** ```python print(reverse_string_preserve_case(\\"Hello\\")) # Should print \\"Olleh\\" print(reverse_string_preserve_case(\\"World\\")) # Should print \\"Dlrow\\" print(reverse_string_preserve_case(\\"Python\\")) # Should print \\"Nohtyp\\" ```","solution":"def reverse_string_preserve_case(s: str) -> str: Returns the input string reversed while preserving the case of each character as it appeared in the original string. reversed_s = s[::-1] # Reverse the string result = [] for i in range(len(s)): if s[i].isupper(): result.append(reversed_s[i].upper()) else: result.append(reversed_s[i].lower()) return \'\'.join(result)"},{"question":"** Create a function that mimics simple encrypted communication using the Caesar Cipher technique. The function should be able to both encrypt and decrypt messages by shifting each letter by a specified number of positions in the alphabet. **Function Specification:** - Function Name: `caesar_cipher` - Parameters: - `message` (str): The message to encrypt or decrypt. - `shift` (int): The number of positions to shift the letters. A positive value indicates encryption (shift to the right), and a negative value indicates decryption (shift to the left). - `mode` (str): Either \'encrypt\' or \'decrypt\'. If \'decrypt\', the function should negate the shift value. **Task:** Implement the `caesar_cipher` function to do the following: 1. Loop through each character in `message`. 2. Convert each letter to its corresponding ASCII code. 3. Shift the ASCII code by the specified `shift` value. Ensure that the shift wraps around the alphabet (both upper and lower case letters). 4. Re-convert the shifted ASCII code back to a character. 5. Maintain the case of each letter and leave non-alphabetic characters unchanged. **Considerations:** - The function should only alter the alphabetic characters. - Handle both upper case and lower case letters correctly. **Libraries to Use:** - None **Example Usage:** ```python print(caesar_cipher(\\"Hello, World!\\", 3, \'encrypt\')) # Outputs: \\"Khoor, Zruog!\\" print(caesar_cipher(\\"Khoor, Zruog!\\", 3, \'decrypt\')) # Outputs: \\"Hello, World!\\" print(caesar_cipher(\\"abcXYZ\\", -3, \'encrypt\')) # Outputs: \\"xyzUVW\\" print(caesar_cipher(\\"xyzUVW\\", -3, \'decrypt\')) # Outputs: \\"abcXYZ\\" ``` This function should encrypt a message by shifting each letter forward by the number of positions specified by `shift`, and decrypt a message when `mode` is \'decrypt\'. **","solution":"def caesar_cipher(message, shift, mode): Returns the encrypted or decrypted message using the Caesar Cipher technique. Args: - message (str): The message to be encrypted or decrypted. - shift (int): The number of positions to shift the letters. - mode (str): Either \'encrypt\' or \'decrypt\'. Returns: - The transformed message with letters shifted as specified. if mode == \'decrypt\': shift = -shift result = [] for char in message: if char.isalpha(): start = ord(\'A\') if char.isupper() else ord(\'a\') result.append(chr((ord(char) - start + shift) % 26 + start)) else: result.append(char) return \'\'.join(result)"},{"question":"In this task, you are required to write a Python function `find_reachable_nodes` that takes a list of edges representing an undirected graph and a starting node, and outputs a set of nodes that are reachable from the starting node using Depth First Search (DFS). The graph is represented by a list of tuples `edges`, where each tuple `(u, v)` indicates an undirected edge between nodes `u` and `v`. Write a function to perform a DFS traversal starting from the given starting node and return all nodes that can be reached from this initial node. Function Signature ```python def find_reachable_nodes(edges: List[Tuple[int, int]], start: int) -> Set[int]: pass ``` Constraints: - The graph can be disconnected, meaning there may be nodes not reachable from the starting node. - Nodes are identified by non-negative integers. Example ```python edges = [(0, 1), (0, 2), (1, 3), (3, 4), (5, 6)] start_node = 0 print(find_reachable_nodes(edges, start_node)) # Expected Output: {0, 1, 2, 3, 4} edges = [(0, 1), (2, 3), (4, 5)] start_node = 2 print(find_reachable_nodes(edges, start_node)) # Expected Output: {2, 3} ``` # Requirements: 1. Implement the DFS traversal algorithm. 2. Ensure that the result is a set of unique reachable nodes. 3. Return the set of reachable nodes.","solution":"from typing import List, Set, Tuple def find_reachable_nodes(edges: List[Tuple[int, int]], start: int) -> Set[int]: Given a list of edges in an undirected graph and a starting node, returns a set of all nodes that are reachable from the starting node using DFS. # Build adjacency list graph = {} for u, v in edges: if u not in graph: graph[u] = [] if v not in graph: graph[v] = [] graph[u].append(v) graph[v].append(u) # Depth First Search (DFS) to find all reachable nodes visited = set() def dfs(node): if node in visited: return visited.add(node) for neighbor in graph.get(node, []): dfs(neighbor) # Start DFS from the starting node dfs(start) return visited"},{"question":"You are developing a class named `MovieCatalogue` for organizing information about movies. The class should support adding new movies, removing existing ones, fetching information about a movie by its name, and listing all stored movies. The `MovieCatalogue` class should include the following: 1. An initializer method `__init__` to set up internal data structures. 2. A method `add_movie` that takes the name (string), genre (string), and year (integer) of a movie and adds it to the catalogue. 3. A method `remove_movie` that takes the name (string) of a movie and removes it from the catalogue. 4. A method `get_movie_info` that takes the name (string) of a movie and returns a dictionary with the movie\'s information (name, genre, year). If the movie does not exist, return `None`. 5. A method `list_movies` that returns a list of dictionaries, each containing information about a stored movie. # Example Usage ```python catalogue = MovieCatalogue() catalogue.add_movie(\\"Inception\\", \\"Sci-Fi\\", 2010) catalogue.add_movie(\\"The Godfather\\", \\"Crime\\", 1972) # Get info about a movie print(catalogue.get_movie_info(\\"Inception\\")) # Output: {\'name\': \'Inception\', \'genre\': \'Sci-Fi\', \'year\': 2010} # List all movies print(catalogue.list_movies()) # Output: [{\'name\': \'Inception\', \'genre\': \'Sci-Fi\', \'year\': 2010}, {\'name\': \'The Godfather\', \'genre\': \'Crime\', \'year\': 1972}] # Remove a movie catalogue.remove_movie(\\"The Godfather\\") # Try to get info about a removed movie print(catalogue.get_movie_info(\\"The Godfather\\")) # Output: None # List remaining movies print(catalogue.list_movies()) # Output: [{\'name\': \'Inception\', \'genre\': \'Sci-Fi\', \'year\': 2010}] ``` # Constraints - Movie names are unique within the catalogue. - Ensure methods handle invalid inputs gracefully (e.g., removing a non-existent movie).","solution":"class MovieCatalogue: def __init__(self): Initializes an empty movie catalogue. self.movies = {} def add_movie(self, name, genre, year): Adds a new movie to the catalogue. Parameters: name (str): The name of the movie. genre (str): The genre of the movie. year (int): The release year of the movie. if name in self.movies: return \\"Movie already exists.\\" self.movies[name] = { \'name\': name, \'genre\': genre, \'year\': year } def remove_movie(self, name): Removes a movie from the catalogue by its name. Parameters: name (str): The name of the movie to be removed. if name in self.movies: del self.movies[name] else: return \\"Movie not found.\\" def get_movie_info(self, name): Fetches information about a movie by its name. Parameters: name (str): The name of the movie. Returns: dict: A dictionary with keys \'name\', \'genre\', and \'year\' if movie exists. None: If movie does not exist. return self.movies.get(name, None) def list_movies(self): Lists all movies in the catalogue. Returns: list: A list of dictionaries, each containing movie information. return list(self.movies.values())"},{"question":"You are required to design a function that generates a summary report for a company\'s employee records. The function `employee_summary` will take in a data structure containing employee information and output key statistics, including the total number of employees, average age, average years of service, and count of employees in each department. Your task is to create a function named `summarize_employees` which follows the same guidelines. The structure of parameters and operations should be consistent, emphasizing the following points: 1. **Function Name:** `summarize_employees` 2. **Parameters:** - `employee_data`: A list of dictionaries, where each dictionary contains information about an employee with keys: `name` (string), `age` (integer), `years_of_service` (integer), and `department` (string). 3. **Output:** A dictionary containing the following information: - `total_employees`: Total number of employees. - `average_age`: Average age of employees. - `average_years_of_service`: Average years of service for employees. - `departments_count`: A dictionary where keys are department names and values are the number of employees in each department. Your implementation should correctly compute these statistics based on the provided employee data. Example usage: ```python employee_data = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"years_of_service\\": 5, \\"department\\": \\"HR\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"years_of_service\\": 3, \\"department\\": \\"Engineering\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"years_of_service\\": 10, \\"department\\": \\"Engineering\\"}, {\\"name\\": \\"Diana\\", \\"age\\": 40, \\"years_of_service\\": 15, \\"department\\": \\"Management\\"} ] result = summarize_employees(employee_data) ``` Expected output: ```python { \\"total_employees\\": 4, \\"average_age\\": 32.5, \\"average_years_of_service\\": 8.25, \\"departments_count\\": { \\"HR\\": 1, \\"Engineering\\": 2, \\"Management\\": 1 } } ```","solution":"def summarize_employees(employee_data): Generates a summary report of employee records. total_employees = len(employee_data) total_age = sum(employee[\'age\'] for employee in employee_data) total_years_of_service = sum(employee[\'years_of_service\'] for employee in employee_data) average_age = total_age / total_employees if total_employees > 0 else 0 average_years_of_service = total_years_of_service / total_employees if total_employees > 0 else 0 departments_count = {} for employee in employee_data: department = employee[\'department\'] if department in departments_count: departments_count[department] += 1 else: departments_count[department] = 1 return { \\"total_employees\\": total_employees, \\"average_age\\": average_age, \\"average_years_of_service\\": average_years_of_service, \\"departments_count\\": departments_count }"},{"question":"# Problem: Design a Class for Managing a Bank Account You are tasked with designing a simple banking system that can handle basic operations like deposit, withdrawal, and balance inquiry. Specifically, you need to create a class `BankAccount` that keeps track of a user\'s balance and supports the following operations: 1. `deposit(amount: float)`: Adds the given amount to the account balance. 2. `withdraw(amount: float)`: Deducts the given amount from the account balance if sufficient funds are available. If not, it should raise a `ValueError` with the message \\"Insufficient funds\\". 3. `get_balance() -> float`: Returns the current account balance. # Requirements: 1. The account balance should be initialized to 0 when a new `BankAccount` object is created. 2. The deposit and withdrawal amounts should always be positive numbers. 3. The class should include appropriate error handling for invalid operations. # Class Signature ```python class BankAccount: def deposit(self, amount: float) -> None: Adds the given amount to the account balance. :param amount: The amount to deposit into the account. def withdraw(self, amount: float) -> None: Deducts the given amount from the account balance if sufficient funds are available. :param amount: The amount to withdraw from the account. :raises ValueError: If there are insufficient funds in the account. def get_balance(self) -> float: Returns the current balance of the bank account. :return: The current account balance. ``` # Example ```python account = BankAccount() account.deposit(100.0) account.withdraw(40.0) balance = account.get_balance() print(balance) ``` Expected Output: ```plaintext 60.0 ``` # Notes: 1. The deposit method should add the specified amount to the current balance. 2. The withdraw method should check if the balance is sufficient before deducting the amount, and raise an error if not. 3. The get_balance method should return the current balance of the account.","solution":"class BankAccount: def __init__(self): self._balance = 0.0 def deposit(self, amount: float) -> None: if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self._balance += amount def withdraw(self, amount: float) -> None: if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self._balance: raise ValueError(\\"Insufficient funds\\") self._balance -= amount def get_balance(self) -> float: return self._balance"},{"question":"Write a function that monitors a directory for any new or modified files and logs the changes to a specified log file. The monitoring should be done in the background using a separate thread. If a new file is added, the log should include the text \\"File added: [filename]\\", and for a modified file, the log should include the text \\"File modified: [filename]\\". The function should terminate after monitoring for 1 hour. You should write self-contained code starting with: ``` import time import os import threading def monitor_directory(directory_path, log_file): ```","solution":"import time import os import threading from datetime import datetime def log_change(log_file, message): with open(log_file, \'a\') as f: f.write(f\\"{datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')} {message}n\\") def monitor_directory(directory_path, log_file): def monitor(): file_mod_times = {f: os.path.getmtime(os.path.join(directory_path, f)) for f in os.listdir(directory_path)} end_time = time.time() + 3600 # Monitor for 1 hour while time.time() < end_time: current_files = set(os.listdir(directory_path)) previous_files = set(file_mod_times.keys()) added_files = current_files - previous_files removed_files = previous_files - current_files common_files = current_files & previous_files for f in added_files: log_change(log_file, f\\"File added: {f}\\") file_mod_times[f] = os.path.getmtime(os.path.join(directory_path, f)) for f in common_files: current_mod_time = os.path.getmtime(os.path.join(directory_path, f)) if file_mod_times[f] != current_mod_time: log_change(log_file, f\\"File modified: {f}\\") file_mod_times[f] = current_mod_time for f in removed_files: file_mod_times.pop(f) time.sleep(1) monitor_thread = threading.Thread(target=monitor) monitor_thread.start() monitor_thread.join()"},{"question":"Write a function that takes in a list of integers, groups them by their parity (even or odd), sorts each group in ascending order, and then merges them to return a single list where the even numbers appear before the odd numbers. The function should produce an output list where all the even numbers are sorted in ascending order and come before all the odd numbers sorted in ascending order. You should write self-contained code starting with: ``` def group_and_sort_by_parity(numbers): ``` Example Input: ``` group_and_sort_by_parity([4, 1, 3, 2, 8, 5]) ``` Example Output: ``` [2, 4, 8, 1, 3, 5] ```","solution":"def group_and_sort_by_parity(numbers): Groups the numbers by their parity (even or odd), sorts each group in ascending order and merges them to return a single list where the even numbers appear before the odd numbers. Args: numbers: List of integers. Returns: List of integers grouped by parity with even numbers first and sorted in ascending order. evens = sorted([num for num in numbers if num % 2 == 0]) odds = sorted([num for num in numbers if num % 2 != 0]) return evens + odds"},{"question":"You are tasked with writing a Python function that counts the number of unique words in a given sentence. A word is defined as any sequence of characters separated by spaces. The function should be case-insensitive, meaning \'Python\' and \'python\' should be counted as the same word. Punctuation should be ignored; for example, \'python,\' and \'python\' should be considered the same word. Below are the specific requirements: - The function should be named `count_unique_words`. - It should accept a single parameter, `sentence`, which is a string representing the sentence to analyze. - The function should return an integer representing the number of unique words in the sentence. **Function Signature:** ```python def count_unique_words(sentence: str) -> int: ``` **Examples:** ```python count_unique_words(\\"Hello world!\\") -> 2 count_unique_words(\\"Python is great. python, python\\") -> 3 count_unique_words(\\"A man, a plan, a canal, Panama!\\") -> 5 ``` **Note:** - The function should handle punctuation by stripping it out of each word. - Use the `re` module for regular expressions to assist with punctuation removal and case normalization.","solution":"import re def count_unique_words(sentence: str) -> int: Returns the number of unique words in the given sentence. The comparison is case-insensitive and ignores punctuation. # Convert the sentence to lowercase sentence = sentence.lower() # Use regular expressions to remove all non-word characters (punctuation) sentence = re.sub(r\'[^ws]\', \'\', sentence) # Split the sentence into words words = sentence.split() # Get the unique words unique_words = set(words) return len(unique_words)"},{"question":"Design a function to find the kth most frequent elements in a list. This function should: 1. Take a list of elements and an integer k as input. 2. Output a list of the k most frequent elements in descending order of frequency. - If two elements have the same frequency, their order in the output list should be based on their first appearance in the original list. The function should output: list: The k most frequent elements based on their frequency. You should write self-contained code starting with: ``` def find_k_most_frequent(elements, k): from collections import Counter ```","solution":"def find_k_most_frequent(elements, k): from collections import Counter # Count the frequency of each element freq_counter = Counter(elements) # Sort elements by frequency (descending) and by first appearance in case of tie sorted_elements = sorted(freq_counter.keys(), key=lambda x: (-freq_counter[x], elements.index(x))) # Return the k most frequent elements return sorted_elements[:k]"},{"question":"# Normalizing a Vector Normalization is a process that adjusts the values in a vector to a common scale, often between 0 and 1, without distorting the differences in the ranges of values. A common formula used for normalization of a vector `v` is: [ v_i\' = frac{v_i - min(v)}{max(v) - min(v)} ] where ( v_i ) is an element in the vector `v`, ( min(v) ) is the smallest value in the vector, and ( max(v) ) is the largest value in the vector. Your task is to write a Python function named `normalize_vector` that takes a 1-dimensional NumPy array `v` and returns a new NumPy array containing the normalized values. The only required parameter for your function is: - `v`: A 1-dimensional NumPy array containing real numbers. The function should return a new NumPy array where each element is the normalized value of the corresponding element from the input array `v`. # Example Usage ```python import numpy as np v = np.array([1, 3, 5, 7]) result = normalize_vector(v) print(result) # Output should be [0.0, 0.33333333, 0.66666667, 1.0] ``` # Requirements - Use NumPy operations to perform the normalization. - Your function should handle input arrays where all elements are the same value (return a zero-vector in this case). - Do not use any other libraries except `numpy`.","solution":"import numpy as np def normalize_vector(v): Normalizes a 1-dimensional NumPy array. Parameters: v (np.array): A 1-dimensional array of real numbers Returns: np.array: A new 1-dimensional array with normalized values min_v = np.min(v) max_v = np.max(v) if min_v == max_v: return np.zeros_like(v) return (v - min_v) / (max_v - min_v)"},{"question":"Implement a function that takes a string representing a mathematical expression in postfix notation (also known as Reverse Polish Notation) and returns the calculated result. The function should handle the following operators: addition (+), subtraction (-), multiplication (*), and division (/). The function raises the exception for: - ValueError: If the input string is empty or if it contains invalid characters/operators. - ZeroDivisionError: If any division by zero is encountered during the calculation. The function should output: - float: The result of the postfix expression. You should write self-contained code starting with: ``` def evaluate_postfix(expression): ``` Example: ``` evaluate_postfix(\\"3 4 + 2 * 7 /\\") # Output: 2.0 evaluate_postfix(\\"5 1 2 + 4 * + 3 -\\") # Output: 14.0 ```","solution":"def evaluate_postfix(expression): Evaluates a postfix (Reverse Polish Notation) expression and returns the result. Handles addition (+), subtraction (-), multiplication (*), and division (/). Raises ValueError for invalid input and ZeroDivisionError for division by zero. if not expression: raise ValueError(\\"The input string is empty.\\") stack = [] operators = {\\"+\\", \\"-\\", \\"*\\", \\"/\\"} tokens = expression.split() for token in tokens: if token.lstrip(\'-\').replace(\'.\', \'\', 1).isdigit(): # Check if the token is a number stack.append(float(token)) elif token in operators: if len(stack) < 2: raise ValueError(f\\"Invalid expression: insufficient operands for operator \'{token}\'.\\") b = stack.pop() a = stack.pop() if token == \\"+\\": stack.append(a + b) elif token == \\"-\\": stack.append(a - b) elif token == \\"*\\": stack.append(a * b) elif token == \\"/\\": if b == 0: raise ZeroDivisionError(\\"Division by zero encountered.\\") stack.append(a / b) else: raise ValueError(f\\"Invalid character or operator: \'{token}\'.\\") if len(stack) != 1: raise ValueError(\\"Invalid expression: remaining operands without operators.\\") return stack.pop()"},{"question":"You are tasked with creating a function called `generate_report` that processes multiple text files located in a specified directory. Each file contains transaction data that needs to be aggregated into a summary report. The function will utilize the `os` and `re` libraries in Python. The function should: 1. **Read Input:** Open and read all text files in a directory named `transactions/`. Each file contains lines in the format: `transaction_id,transaction_amount,transaction_date`. 2. **Pattern Matching:** Use regular expressions to extract transaction amounts and dates. 3. **Aggregate Data:** Calculate the total transaction amount for each date. 4. **Write Output:** Write the summary report to a new file named `summary_report.csv` with columns: `transaction_date` and `total_amount`. You must use the following APIs in the function: - `os.listdir` - `os.path.join` - `re.findall` - `os.path.abspath` # Task Detail: 1. Create a function named `generate_report`. 2. Open and process all the text files in the `transactions/` directory. 3. Extract transaction amounts and dates using regular expressions. 4. Calculate the total amount per date. 5. Write the aggregated data to a new CSV file named `summary_report.csv`. Here is the example structure of transaction files: ```plaintext transaction_id,transaction_amount,transaction_date 1,50.00,2023-10-25 2,30.75,2023-10-25 3,25.00,2023-10-26 ... ``` # Example Usage: ```python generate_report() ```","solution":"import os import re from collections import defaultdict def generate_report(): directory = \'transactions/\' summary_report = \'summary_report.csv\' transaction_data = defaultdict(float) for filename in os.listdir(directory): filepath = os.path.join(os.path.abspath(directory), filename) if os.path.isfile(filepath): with open(filepath, \'r\') as file: for line in file: match = re.findall(r\'^d+,(?P<amount>d+.d+),(?P<date>d{4}-d{2}-d{2})\', line.strip()) if match: amount, date = match[0] transaction_data[date] += float(amount) with open(summary_report, \'w\') as report_file: report_file.write(\'transaction_date,total_amountn\') for date, total_amount in sorted(transaction_data.items()): report_file.write(f\'{date},{total_amount:.2f}n\')"},{"question":"You have been assigned to develop a function that simulates a basic calculator for simple arithmetic operations. The function will take a string representing a mathematical expression consisting of two integers and one of the following operators: `+`, `-`, `*`, or `/`. Your task is to compute and return the result of the expression. **Function Signature:** ```python def basic_calculator(expression: str) -> float: Compute the result of the given arithmetic expression. ``` **Function Requirements:** 1. The function should handle expressions containing exactly two integers and one operator. 2. The integers can be any positive or negative whole numbers. 3. The operators are limited to `+` (addition), `-` (subtraction), `*` (multiplication), and `/` (division). 4. The function must return the result as a floating-point number. 5. Division by zero should be handled gracefully by returning the string \\"Error: Division by zero\\". **Examples:** ```plaintext basic_calculator(\\"10 + 5\\") # Should return: 15.0 basic_calculator(\\"10 - 5\\") # Should return: 5.0 basic_calculator(\\"10 * 5\\") # Should return: 50.0 basic_calculator(\\"10 / 5\\") # Should return: 2.0 basic_calculator(\\"10 / 0\\") # Should return: \\"Error: Division by zero\\" ``` **Assumptions:** - The input string will always be properly formatted with spaces separating the integers and the operator. - The string will contain valid integers and supported operators only. Use string manipulation and the appropriate arithmetic operations to implement the function, ensuring correctness with edge cases such as division by zero.","solution":"def basic_calculator(expression: str) -> float: Compute the result of the given arithmetic expression. parts = expression.split() num1 = int(parts[0]) operator = parts[1] num2 = int(parts[2]) if operator == \'+\': return float(num1 + num2) elif operator == \'-\': return float(num1 - num2) elif operator == \'*\': return float(num1 * num2) elif operator == \'/\': if num2 == 0: return \\"Error: Division by zero\\" else: return float(num1 / num2) else: return \\"Error: Invalid operator\\""},{"question":"You are tasked with developing a feature for a library management system that ensures all ISBN-13 numbers in the database are valid. An ISBN-13 (International Standard Book Number) is a 13-digit number used to uniquely identify books. Each digit in an ISBN has a specific weight, and the last digit (check digit) is used to verify the validity of the ISBN. The formula to calculate the check digit is as follows: - Take the first 12 digits and multiply each digit alternately by 1 or 3. - Sum these products. - The check digit is calculated as `(10 - (sum % 10)) % 10`. You will write a function named `validate_isbn13(isbn)` that takes in an ISBN-13 number as a string and returns a boolean indicating whether it is valid or not. # Function Signature ```python def validate_isbn13(isbn: str) -> bool: ``` # Input - `isbn` (str): A string representing the ISBN-13 number. It will always contain exactly 13 digits. # Output - Returns `True` if the ISBN-13 number is valid, `False` otherwise. # Example ```python assert validate_isbn13(\\"9780306406157\\") == True # Valid ISBN assert validate_isbn13(\\"9780306406158\\") == False # Invalid ISBN ``` # Explanation For the first ISBN \\"9780306406157\\": - Calculate the sum of the first 12 digits: `9*1 + 7*3 + 8*1 + 0*3 + 3*1 + 0*3 + 6*1 + 4*3 + 0*1 + 6*3 + 1*1 + 5*3 = 93` - Calculate the check digit: `check_digit = (10 - (93 % 10)) % 10 = (10 - 3) % 10 = 7` - Since the check digit (7) matches the last digit of the ISBN, the function returns `True`. For the second ISBN \\"9780306406158\\": - The check digit calculation would be the same up until the final comparison where it fails as check digit (7) does not match the last digit (8), hence the function returns `False`.","solution":"def validate_isbn13(isbn: str) -> bool: Validate if the given ISBN-13 number is valid. :param isbn: A string representing the ISBN-13 number. :return: True if the ISBN is valid, False otherwise. if len(isbn) != 13 or not isbn.isdigit(): return False sum = 0 for i in range(12): digit = int(isbn[i]) if i % 2 == 0: sum += digit * 1 else: sum += digit * 3 check_digit = (10 - (sum % 10)) % 10 return check_digit == int(isbn[12])"},{"question":"You are asked to write a function that finds the longest contiguous subarray of equal elements in a given array of integers. If there are multiple subarrays with the same maximum length, return the one which appears first. To accomplish this, implement a function named `longest_contiguous_subarray` which takes a single argument, a list of integers `arr`. # Function Signature ```python def longest_contiguous_subarray(arr: list) -> list: ``` # Input - `arr`: A list of integers (1 ≤ len(arr) ≤ 1000, -10^9 ≤ arr[i] ≤ 10^9). # Output - A list representing the longest contiguous subarray of equal elements. # Example ```python assert longest_contiguous_subarray([1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 1]) == [2, 2, 2, 2] assert longest_contiguous_subarray([1, 1, 1, 2, 3, 4, 4, 4, 4]) == [4, 4, 4, 4] assert longest_contiguous_subarray([1]) == [1] ``` # Explanation The function should iterate through the list, keeping track of the current contiguous subarray of equal elements. When a streak ends (i.e., a different element is encountered), it should compare the length of the current streak with the longest streak found so far. If the current streak is longer, it should update the longest streak. If the longest streak is found multiple times, it should return the first occurrence.","solution":"def longest_contiguous_subarray(arr: list) -> list: if not arr: return [] max_length = 1 current_length = 1 max_subarray_start = 0 current_start = 0 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length max_subarray_start = current_start current_length = 1 current_start = i if current_length > max_length: max_length = current_length max_subarray_start = current_start return arr[max_subarray_start:max_subarray_start + max_length]"},{"question":"Your task is to implement a function named `grouped_barchart` using the `matplotlib` library in Python. This function is designed to create and display a grouped bar chart for up to 3 groups, where each group contains multiple bars. The function should accept the following parameters: 1. `group_labels`: A list of strings representing the labels for each group. 2. `group_values1`: A list of numerical values for the first group. 3. `group_values2`: A list of numerical values for the second group. 4. `group_values3`: A list of numerical values for the third group. 5. `bar_labels`: A list of strings representing the labels for each bar within the groups. The function should create a grouped bar chart where groups are represented on the x-axis and the bars within each group are color-coded with a corresponding legend. Each group\'s label should be displayed on the x-axis, and the y-axis should represent the numerical values. Here is the complete signature for the function you need to write: ```python def grouped_barchart(group_labels, group_values1=[], group_values2=[], group_values3=[], bar_labels=[]): ``` You must utilize the following `matplotlib` methods as part of your implementation: - `matplotlib.pyplot.bar` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` - `matplotlib.pyplot.legend` - `matplotlib.pyplot.show` The function should also print \\"Grouped Bar Chart\\" before displaying the plot. Example of function call: ```python grouped_barchart([\'Group 1\', \'Group 2\', \'Group 3\'], [1, 2, 3], [4, 5, 6], [7, 8, 9], [\'Bar 1\', \'Bar 2\', \'Bar 3\']) ```","solution":"import matplotlib.pyplot as plt import numpy as np def grouped_barchart(group_labels, group_values1=[], group_values2=[], group_values3=[], bar_labels=[]): Creates and displays a grouped bar chart. Parameters: - group_labels (List[str]): Labels for each group. - group_values1 (List[float]): Values for the first group. - group_values2 (List[float]): Values for the second group. - group_values3 (List[float]): Values for the third group. - bar_labels (List[str]): Labels for each bar within the groups. n_groups = len(group_labels) index = np.arange(n_groups) bar_width = 0.2 plt.bar(index, group_values1, bar_width, label=bar_labels[0] if len(bar_labels) > 0 else \\"Set 1\\") if group_values2: plt.bar(index + bar_width, group_values2, bar_width, label=bar_labels[1] if len(bar_labels) > 1 else \\"Set 2\\") if group_values3: plt.bar(index + (bar_width * 2), group_values3, bar_width, label=bar_labels[2] if len(bar_labels) > 2 else \\"Set 3\\") plt.xlabel(\'Groups\') plt.ylabel(\'Values\') plt.title(\'Grouped Bar Chart\') plt.xticks(index + bar_width, group_labels) plt.legend() print(\\"Grouped Bar Chart\\") plt.show()"},{"question":"You are working on a logging system for an application that processes large volumes of data. The system should allow logging messages of different severity levels (e.g., INFO, WARNING, ERROR) and should write the logs to a file. Your task is to implement a class called `Logger` that manages the logging process. The class should have the following functionalities: # Class Definition and Methods: 1. **Constructor (`__init__`)**: - Takes a single parameter, `file_name`, which is the path to a log file. - Initializes the file for writing logs. 2. **Methods**: - `log_info(message: str)`: - Logs a message with the severity \\"INFO\\". - `log_warning(message: str)`: - Logs a message with the severity \\"WARNING\\". - `log_error(message: str)`: - Logs a message with the severity \\"ERROR\\". Each log entry should be written to the log file in the following format: ``` [SEVERITY] timestamp: message ``` Where: - `SEVERITY` is either \\"INFO\\", \\"WARNING\\", or \\"ERROR\\". - `timestamp` is the current date and time when the log entry is being written. The `Logger` class should ensure the following: - Append mode should be used for writing to the log file. - Each method should handle any exceptions that might occur during file operations and print an appropriate error message if something goes wrong. # Example Usage: ```python logger = Logger(\'app.log\') logger.log_info(\'Application started.\') logger.log_warning(\'Low disk space.\') logger.log_error(\'An unexpected error occurred.\') ``` Assuming `app.log` was initially empty, the output file could look like: ``` [INFO] 2023-10-15 10:00:00: Application started. [WARNING] 2023-10-15 10:05:00: Low disk space. [ERROR] 2023-10-15 10:10:00: An unexpected error occurred. ``` # Constraints: - You should not use any external logging libraries; you must implement the logging functionality manually. - Use the `datetime` library to handle timestamps. - Make sure the class has proper exception-handling to manage potential file I/O errors. - Ensure to use file operations that prevent overwriting existing log entries and handle appending new entries instead.","solution":"import datetime class Logger: def __init__(self, file_name): self.file_name = file_name def _write_log(self, severity, message): timestamp = datetime.datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\') log_entry = f\'[{severity}] {timestamp}: {message}n\' try: with open(self.file_name, \'a\') as file: file.write(log_entry) except Exception as e: print(f\\"Error writing to log file: {e}\\") def log_info(self, message: str): self._write_log(\'INFO\', message) def log_warning(self, message: str): self._write_log(\'WARNING\', message) def log_error(self, message: str): self._write_log(\'ERROR\', message)"},{"question":"You are tasked with writing a function that calculates and returns the Fibonacci sequence up to the nth term using dynamic programming in Python. The Fibonacci sequence is a series of numbers in which each number (Fibonacci number) is the sum of the two preceding ones, usually starting with 0 and 1. The provided code snippet below requires you to implement a function that efficiently computes the Fibonacci sequence for a given `n`. Function Signature: ```python def fibonacci(n: int) -> List[int]: ``` # Instructions 1. Ensure that the function returns a list containing the Fibonacci sequence up to the nth term. 2. Use dynamic programming to store previously computed Fibonacci numbers to achieve an optimal runtime. 3. Handle edge cases such as when `n` is 0 or 1. # Example ```python fibonacci(5) ``` Expected Output: ```python [0, 1, 1, 2, 3] ``` # Requirements - You must use an iterative approach to achieve the solution, leveraging a dynamic programming table (list) to store intermediate results. - The function should efficiently handle larger values of `n`, demonstrating the benefits of dynamic programming over naive recursion.","solution":"def fibonacci(n: int) -> list: Returns the Fibonacci sequence up to the nth term using dynamic programming. :param n: the number of terms in the sequence to compute :return: A list containing the Fibonacci sequence up to the nth term if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] # Initialize the sequence with the first two terms for i in range(2, n): fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2]) return fib_sequence"},{"question":"In this task, you will implement a function that determines if a given list of integers is \\"shifted identical\\". A list is considered shifted identical to another if it can be turned into the other by performing a series of cyclic shifts (rotations). For example, the list `[1, 2, 3, 4]` can be shifted to become `[4, 1, 2, 3]`, `[3, 4, 1, 2]`, and `[2, 3, 4, 1]`. Your task is to write a function `is_shifted_identical(lst1, lst2)`, which accepts two list of integers `lst1` and `lst2`. The function should determine whether `lst2` can be obtained by performing a series of cyclic shifts on `lst1`. Here\'s the function signature: ```python def is_shifted_identical(lst1, lst2): # Your code here ``` # Examples ```python print(is_shifted_identical([1, 2, 3, 4], [3, 4, 1, 2])) # Output: True print(is_shifted_identical([1, 2, 3, 4], [4, 3, 2, 1])) # Output: False print(is_shifted_identical([1, 1, 1], [1, 1, 1])) # Output: True print(is_shifted_identical([1, 2, 3], [4, 1, 2])) # Output: False ``` # Notes: - A single cyclic shift moves the last element of the list to the front, while right shuffling all other elements. - Consider cases where `lst1` or `lst2` may be empty; an empty list is only equal to another empty list. - Lists of different lengths can never be identical by cyclic shifts. - Your solution should handle edge cases efficiently. Implement the function to accurately determine if one list can be formed by cyclically shifting another list.","solution":"def is_shifted_identical(lst1, lst2): Determines if lst2 can be obtained by performing a series of cyclic shifts on lst1. if len(lst1) != len(lst2): return False if lst1 == [] and lst2 == []: return True concatenated_lst1 = lst1 + lst1 return any(lst2 == concatenated_lst1[i:i + len(lst1)] for i in range(len(lst1)))"},{"question":"# Problem Statement You are tasked with creating a function `measure_time_complexity` that analyzes the time complexity of different sorting algorithms by measuring and plotting their execution times. This exercise involves handling random data generation, implementing or utilizing different sorting algorithms, and using Matplotlib for visualization. # Context 1. **Sorting Algorithms**: You need to analyze the following sorting algorithms: - `bubble_sort`: Implement or use a predefined function. - `merge_sort`: Implement or use a predefined function. - `quick_sort`: Implement or use a predefined function. 2. **Parameters**: ```python max_size: int - The maximum size of the input list. step_size: int - The increment for the input list size (default: 100). trials: int - Number of trials for averaging execution time (default: 5). show_plot: bool - Whether to display the plot (default: True). ``` # Task Implement the function `measure_time_complexity(max_size, step_size=100, trials=5, show_plot=True)` with the following steps: 1. **Generate Random Data**: For each list size from `step_size` to `max_size` (inclusive), generate a random list of integers. 2. **Apply Sorting Algorithms**: Measure the execution time of each sorting algorithm over the generated list. Perform this measurement for the specified number of `trials` and average the results. 3. **Plot Data**: - Use Matplotlib to plot the execution times of each algorithm against the list size. - Ensure the plot is properly labeled and includes a legend identifying the algorithms. # Guidelines - Use the `time` module to measure the execution times. - Make sure to handle any exceptions or edge cases, such as invalid input sizes. - Data points should be aggregated and averaged over the specified number of `trials` to ensure stability in measurements. # Additional Information - **Bubble Sort**: Known for its simplicity but poor performance on large lists. - **Merge Sort**: A more efficient, comparison-based algorithm with a stable complexity of O(n log n). - **Quick Sort**: Another efficient, comparison-based algorithm that, on average, performs better than merge sort but is not stable. # Example ```python def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 def quick_sort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) ``` # Function Signature ```python def measure_time_complexity(max_size, step_size=100, trials=5, show_plot=True): ```","solution":"import random import time import matplotlib.pyplot as plt def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 def quick_sort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def measure_time_complexity(max_size, step_size=100, trials=5, show_plot=True): sizes = list(range(step_size, max_size+1, step_size)) sorting_algorithms = { \'Bubble Sort\': bubble_sort, \'Merge Sort\': merge_sort, \'Quick Sort\': quick_sort } times = {algo: [] for algo in sorting_algorithms} for size in sizes: data = [random.randint(0, 1000) for _ in range(size)] for algo_name, algo in sorting_algorithms.items(): trial_times = [] for _ in range(trials): data_copy = data[:] start_time = time.time() algo(data_copy) end_time = time.time() trial_times.append(end_time - start_time) avg_time = sum(trial_times) / trials times[algo_name].append(avg_time) for algo_name, algo_times in times.items(): plt.plot(sizes, algo_times, label=algo_name) plt.xlabel(\'Input Size\') plt.ylabel(\'Execution Time (s)\') plt.title(\'Time Complexity of Sorting Algorithms\') plt.legend() if show_plot: plt.show()"},{"question":"**Problem:** Implementing a Function to Calculate the Fibonacci Sequence using Memoization The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. The sequence starts from 0 and 1, and the nth Fibonacci number is denoted as ( F(n) ). Specifically: [ F(n) = F(n-1) + F(n-2) ] With: [ F(0) = 0 ] [ F(1) = 1 ] In this problem, you are required to implement the `fibonacci` function using memoization to avoid redundant calculations and to improve performance. # Function Signature ```python def fibonacci(n, memo={}): # your code here pass ``` # Parameters - `n` (int): The position in the Fibonacci sequence to calculate. - `memo` (dict, optional): The memoization dictionary used to store already computed Fibonacci values. Defaults to an empty dictionary. # Returns - `int`: The Fibonacci number at position `n`. # Requirements - Use memoization to cache results of Fibonacci calculations to optimize performance. - Ensure the function handles the base cases of `n = 0` and `n = 1`. # Example ```python def fibonacci(n, memo={}): if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] # Example Usage print(fibonacci(0)) # Output: 0 print(fibonacci(1)) # Output: 1 print(fibonacci(10)) # Output: 55 print(fibonacci(50)) # Output: 12586269025 ```","solution":"def fibonacci(n, memo={}): Calculate the nth Fibonacci number using memoization for optimization. Parameters: n (int): The position in the Fibonacci sequence to calculate. memo (dict, optional): The memoization dictionary used to store already computed Fibonacci values. Defaults to an empty dictionary. Returns: int: The Fibonacci number at position n. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"You are tasked with writing a Python function that uses specific numpy and Python standard library features to find the distance between points in a 3D space. The function `calculate_distances` takes in one argument: 1. `points`: a 2D numpy array where each row represents a point in 3D space (i.e., each row contains three float numbers representing the x, y, and z coordinates of a point). The function should return a 2D numpy array `distances`, where `distances[i][j]` is the Euclidean distance between the points `points[i]` and `points[j]`. The Euclidean distance `d` between two points `(x1, y1, z1)` and `(x2, y2, z2)` in 3D space is given by: [ d = sqrt{{(x2 - x1)^2 + (y2 - y1)^2 + (z2 - z1)^2}} ] Use numpy operations to ensure efficient computation. **Function Signature:** ```python def calculate_distances(points: numpy.ndarray) -> numpy.ndarray: pass ``` **Example:** ```python import numpy as np points = np.array([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]) distances = calculate_distances(points) print(distances) ``` **Output:** ```python array([[0.0, 1.0, 1.0, 1.0], [1.0, 0.0, 1.41421356, 1.41421356], [1.0, 1.41421356, 0.0, 1.41421356], [1.0, 1.41421356, 1.41421356, 0.0]]) ```","solution":"import numpy as np def calculate_distances(points: np.ndarray) -> np.ndarray: Calculate the Euclidean distance between each pair of points in a 3D space. Parameters: points (numpy.ndarray): A 2D array where each row represents a point in 3D space. Returns: numpy.ndarray: A 2D array where element (i,j) represents the distance between points[i] and points[j]. # Calculate the difference matrix where diff[i, j, k] is the difference between the k-th coordinates of points i and j diff = points[:, np.newaxis, :] - points[np.newaxis, :, :] # Calculate the squared distances by summing the squares of the differences across the last dimension (the coordinate) sq_distances = np.sum(diff**2, axis=-1) # Return the square root of squared distances to get the Euclidean distances distances = np.sqrt(sq_distances) return distances"},{"question":"You are tasked with writing a function, `normalize_numerical_features`, that takes a Pandas DataFrame as input and normalizes its numerical features using Min-Max scaling. Normalization is a technique to adjust the range of features to a standard scale, typically [0, 1], which is essential for improving the performance of many machine learning algorithms. Your task is to: 1. Inspect all numerical features (i.e., columns in the DataFrame that are not of \\"object\\" type). 2. Apply Min-Max scaling to these numerical features, transforming their values to the range [0, 1]. - The formula for Min-Max scaling is: [ X_{scaled} = frac{X - X_{min}}{X_{max} - X_{min}} ] Where ( X ) is a numerical feature, ( X_{min} ) and ( X_{max} ) are the minimum and maximum values of ( X ) respectively. 3. Return the DataFrame with normalized numerical features. Here is the outline of the function you need to implement: ```python def normalize_numerical_features(df): This function takes in a dataframe and returns a dataframe with normalized numerical features. Parameters: df (pandas.DataFrame): Input dataframe with numerical features to be normalized. Returns: pandas.DataFrame: DataFrame with numerical features normalized to the range [0, 1]. # Your implementation here ``` # Example Usage Given the following DataFrame: ```python import pandas as pd data = { \'A\': [1, 2, 3, 4, 5], \'B\': [10, 20, 30, 40, 50], \'C\': [100, 200, 300, 400, 500], \'D\': [\'a\', \'b\', \'c\', \'d\', \'e\'] } df = pd.DataFrame(data) ``` After calling `normalize_numerical_features(df)`, the DataFrame should have its numerical features normalized to the range [0, 1]. # Constraints - You must use the mathematical formula for Min-Max scaling for normalization.","solution":"import pandas as pd def normalize_numerical_features(df): This function takes in a dataframe and returns a dataframe with normalized numerical features. Parameters: df (pandas.DataFrame): Input dataframe with numerical features to be normalized. Returns: pandas.DataFrame: DataFrame with numerical features normalized to the range [0, 1]. df_normalized = df.copy() numerical_columns = df.select_dtypes(exclude=\'object\').columns for column in numerical_columns: X_min = df[column].min() X_max = df[column].max() if X_max != X_min: df_normalized[column] = (df[column] - X_min) / (X_max - X_min) else: df_normalized[column] = 0.0 return df_normalized"},{"question":"Given a log file containing information about login attempts, write a function `count_successful_logins` to read the file and count the number of successful login attempts. The file is a plaintext file containing multiple lines, each representing a login attempt. Each line has the format `timestamp - user_id - status`, where: - `timestamp` is the time of the login attempt, - `user_id` is the identifier of the user, - `status` is either \\"SUCCESS\\" or \\"FAILURE\\". The function should read the file and count how many lines have the status \\"SUCCESS\\". **Parameters:** - `log_file` (str): The file path to the log file containing login attempt information. **Return:** - An integer representing the number of successful login attempts. # Example Suppose the log file `logins.txt` contains the following lines: ``` 2023-01-01 10:00:00 - user123 - SUCCESS 2023-01-01 10:05:00 - user456 - FAILURE 2023-01-01 10:10:00 - user123 - SUCCESS 2023-01-01 10:15:00 - user789 - FAILURE 2023-01-01 10:20:00 - user456 - SUCCESS ``` Then calling `count_successful_logins(\\"logins.txt\\")` should return: ```python 3 ``` # Detailed Steps 1. Open the file in read mode. 2. Iterate through each line of the file. 3. Split the line using \\" - \\" to extract the status. 4. Count the number of lines where the status is \\"SUCCESS\\". 5. Return the count of successful login attempts.","solution":"def count_successful_logins(log_file): Counts the number of successful login attempts in the log file. Parameters: log_file (str): The file path to the log file containing login attempt information. Returns: int: The number of successful login attempts. success_count = 0 with open(log_file, \'r\') as file: for line in file: parts = line.strip().split(\' - \') if len(parts) == 3 and parts[2] == \\"SUCCESS\\": success_count += 1 return success_count"},{"question":"You are given a dataset containing text documents, and your task is to develop a function that identifies the top 10 most frequent words in the dataset. The function should be named `get_top_ten_frequent_words`. Function to Implement: ```python def get_top_ten_frequent_words(documents): # Your code here pass ``` Requirements: 1. **Input Parameters**: - `documents`: A List of strings, where each string represents a text document. 2. **Library Requirements**: - Use the `Counter` class from the `collections` module to handle word frequency counting. 3. **Output**: - Return a list containing the top 10 most frequent words across all documents. # Steps to Follow: 1. **Tokenize the Documents**: Process each document to extract individual words. You can use simple whitespace-based splitting and lowercasing for this purpose. Ignore punctuation and special characters. 2. **Count Word Frequencies**: Utilize the `Counter` class to keep track of the frequency of each word. 3. **Extract Top Words**: Identify the top 10 words with the highest frequencies. 4. **Return the Result**: Return the top 10 words as a list. # Example Usage: ```python # Suppose you have the following input data documents = [ \\"This is a sample document.\\", \\"This document is another sample document.\\", \\"Sample document number three!\\" ] # Call the function top_words = get_top_ten_frequent_words(documents) print(top_words) # Expected Output (words order might vary depending on their frequency counts): # [\'document\', \'sample\', \'this\', \'is\', \'another\', \'number\', \'three\'] ``` # Constraints: - You can assume that the dataset always contains more than 10 unique words.","solution":"from collections import Counter import re def get_top_ten_frequent_words(documents): Returns the top ten most frequent words across all documents. Parameters: documents (List[str]): List of text documents. Returns: List[str]: List of the top ten most frequent words. word_counts = Counter() for doc in documents: # Tokenize the document using regex to extract words and convert to lower case words = re.findall(r\'bw+b\', doc.lower()) word_counts.update(words) # Get the top 10 most common words top_words = [word for word, count in word_counts.most_common(10)] return top_words"},{"question":"You are tasked with writing a function that simulates a simple text-based shopping cart for an e-commerce platform. The function will allow users to add, remove, and view items in their shopping cart. Each item in the cart should have a name, a price, and a quantity. Your function should be named `shopping_cart` and should perform the following operations: 1. Display a menu with options to add an item, remove an item, view the cart, and exit. 2. Handle user input to perform the specified operations. 3. Allow the user to add items with specified name, price, and quantity to the cart. 4. Allow the user to remove items by name. 5. Display the current items in the cart along with their prices, quantities, and total cost. 6. Exit the program when the user chooses the exit option. Here is the function signature for your reference: ```python def shopping_cart() -> None: pass ``` # Example Usage: ```python shopping_cart() ``` # Example Interaction: ``` Welcome to the Shopping Cart Program! 1. Add Item 2. Remove Item 3. View Cart 4. Exit Choose an option: 1 Item name: Apple Item price: 0.99 Item quantity: 3 Apple has been added to your cart. Choose an option: 1 Item name: Banana Item price: 0.49 Item quantity: 5 Banana has been added to your cart. Choose an option: 3 Your cart: - Apple: 0.99 x 3 - Banana: 0.49 x 5 Total cost: 4.92 Choose an option: 2 Item name: Apple Apple has been removed from your cart. Choose an option: 3 Your cart: - Banana: 0.49 x 5 Total cost: 2.45 Choose an option: 4 Thank you for using the Shopping Cart Program! ```","solution":"def shopping_cart() -> None: cart = {} def display_menu(): print(\\"n1. Add Item\\") print(\\"2. Remove Item\\") print(\\"3. View Cart\\") print(\\"4. Exit\\") def add_item(): item_name = input(\\"Item name: \\") item_price = float(input(\\"Item price: \\")) item_quantity = int(input(\\"Item quantity: \\")) if item_name in cart: cart[item_name][\\"quantity\\"] += item_quantity else: cart[item_name] = {\\"price\\": item_price, \\"quantity\\": item_quantity} print(f\\"{item_name} has been added to your cart.\\") def remove_item(): item_name = input(\\"Item name: \\") if item_name in cart: del cart[item_name] print(f\\"{item_name} has been removed from your cart.\\") else: print(f\\"{item_name} is not in your cart.\\") def view_cart(): if not cart: print(\\"Your cart is empty.\\") return total_cost = 0 print(\\"nYour cart:\\") for item_name, item_info in cart.items(): cost = item_info[\\"price\\"] * item_info[\\"quantity\\"] total_cost += cost print(f\\"- {item_name}: {item_info[\'price\']} x {item_info[\'quantity\']}\\") print(f\\"Total cost: {total_cost:.2f}\\") while True: display_menu() choice = input(\\"nChoose an option: \\") if choice == \'1\': add_item() elif choice == \'2\': remove_item() elif choice == \'3\': view_cart() elif choice == \'4\': print(\\"Thank you for using the Shopping Cart Program!\\") break else: print(\\"Invalid choice. Please choose a valid option.\\")"},{"question":"**Problem Statement:** You are given an undirected graph represented as an adjacency list, where each key is a node and the value is a list of nodes directly connected to it. Implement a function `is_connected(graph)` that takes in: - `graph`: A dictionary representing the adjacency list of the undirected graph. The function should return a boolean indicating whether the graph is connected or not. A graph is considered connected if there is a path between any pair of nodes. **Constraints:** 1. The graph might be empty, in which case it should be considered disconnected. 2. The graph does not contain any self-loops (edges from a node to itself). **Requirements:** - You must use Depth-First Search (DFS) or Breadth-First Search (BFS) to determine the connectivity of the graph. **Input:** ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\'], \'C\': [\'A\', \'D\'], \'D\': [\'B\', \'C\', \'E\'], \'E\': [\'D\'] } ``` **Output:** ```python True ``` **Function Signature:** ```python def is_connected(graph: Dict[str, List[str]]) -> bool: pass ```","solution":"def is_connected(graph): Returns True if the graph is connected, False otherwise. if not graph: return False # Choose an arbitrary starting point start = next(iter(graph)) visited = set() stack = [start] while stack: node = stack.pop() if node not in visited: visited.add(node) stack.extend(neighbor for neighbor in graph[node] if neighbor not in visited) return len(visited) == len(graph)"},{"question":"**Implement a function named `validate_brackets` to determine if the sequence of brackets in a given string is valid. The function should return True if the brackets are valid, and False otherwise. # Function Requirements: 1. **Function Name:** `validate_brackets` 2. **Parameters:** - `s` (string): A string containing any combination of the following brackets: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. 3. **Functionality:** - The function should use a stack data structure to keep track of the opening brackets. - For each closing bracket encountered in the string, it must check if it correctly matches the most recent opening bracket at the top of the stack. - If the stack is empty or does not correctly match the closing bracket, the sequence is deemed invalid. - At the end of the traversal, if the stack is not empty, the sequence is also invalid. - The function should return True if the sequence is valid, and False otherwise. # Example: Given the following inputs: ```python s = \\"{[()]}\\" ``` Your function should return: ```python True ``` Given the following inputs: ```python s = \\"{[(])}\\" ``` Your function should return: ```python False ``` # Constraints: - The input string will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - The length of the input string will be between 1 and 10^4. This problem focuses on the use of stack data structure to solve a common problem of validating the nesting and ordering of brackets in a string.","solution":"def validate_brackets(s): This function checks if the sequence of brackets in the given string is valid. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: return False # in case there are any other characters which should not be the case as per the constraints return stack == []"},{"question":"Write a function named `filter_numbers_within_range()` that filters numbers from a given list that fall within a specified range (inclusive) and returns them in a new list. If no numbers fall within the range, return an empty list. # Specifications: 1. **Function Name**: `filter_numbers_within_range` 2. **Parameters**: - `numbers`: A list of integers. - `min_value`: An integer representing the minimum value of the range. - `max_value`: An integer representing the maximum value of the range. 3. **Returns**: A list of integers that fall within the specified range (inclusive). # Constraints: 1. The list `numbers` can be empty, in which case the function should return an empty list. 2. `min_value` will always be less than or equal to `max_value`. **Hints**: - Use list comprehensions for concise filtering. # Example: ```python # Example 1 filter_numbers_within_range([1, 5, 8, 12, 20], 5, 15) # Output: [5, 8, 12] # Example 2 filter_numbers_within_range([2, 4, 6, 8, 10], 7, 9) # Output: [8] # Example 3 filter_numbers_within_range([], 1, 10) # Output: [] # Example 4 filter_numbers_within_range([20, 30, 40], 10, 15) # Output: [] ```","solution":"def filter_numbers_within_range(numbers, min_value, max_value): Returns a list of integers from the provided list that fall within the specified range (inclusive). Parameters: numbers (list of int): The list of integers to filter. min_value (int): The minimum value of the range. max_value (int): The maximum value of the range. Returns: list of int: A list of integers within the specified range. return [num for num in numbers if min_value <= num <= max_value]"},{"question":"# Context: In many applications of data analysis, sorting algorithms are crucial. One commonly used algorithm is the insertion sort. It\'s intuitive and works well for small datasets or nearly sorted datasets. # Objective: Write a function `insertion_sort(arr)` that sorts an array (or list) of numbers using the insertion sort algorithm. The insertion sort algorithm sorts a list by gradually creating a sorted section at the beginning and then extending it item by item until the entire list is sorted. # Function Signature: ```python def insertion_sort(arr: list) -> list: ... ``` # Instructions: 1. Initialize the sorted section with the first element of the array. 2. Iterate over the unsorted section, and insert each item into the correct position within the sorted section. 3. Return the sorted array. # Examples: 1. `insertion_sort([4, 2, 5, 1, 3])` should return `[1, 2, 3, 4, 5]`. 2. `insertion_sort([10, 7, 11, 5, 9])` should return `[5, 7, 9, 10, 11]`. 3. `insertion_sort([3, 1, 2])` should return `[1, 2, 3]`. 4. `insertion_sort([1])` should return `[1]`. # Additional Information: - **Input**: A non-empty list of numbers. - **Output**: A list of numbers in ascending order. # Requirements: - Use Python\'s built-in list operations to manipulate and access elements efficiently. - Ensure the function works for both small and reasonably sized datasets.","solution":"def insertion_sort(arr): Sorts an array of numbers using the insertion sort algorithm. Parameters: arr (list): A list of numbers to be sorted. Returns: list: The sorted list of numbers. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1] that are greater than key # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function named `decode_string` which decodes a string encoded in a specific format and returns the final decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated exactly `k` times. You may assume that the input string is always valid and follows the described encoding format. Your function must parse the encoding string and correctly decode the nested structure if needed. An encoded string may contain multiple layers of encoded sections. Here are detailed requirements of your implementation: 1. The input string `s` consists of digits, letters, and square brackets. 2. The function should consider all nested encodings, allowing for the correct decoding even if there are multiple layers. Example input and output: - Input: `\\"3[a]2[bc]\\"`, Output: `\\"aaabcbc\\"` - Input: `\\"3[a2[c]]\\"`, Output: `\\"accaccacc\\"` - Input: `\\"2[abc]3[cd]ef\\"`, Output: `\\"abcabccdcdcdef\\"` Please use the following function signature: ```python def decode_string(s: str) -> str: # Your implementation here ``` You can use a stack to help process the string and handle nested cases appropriately. Here are some example usages: ```python # Example usages print(decode_string(\\"3[a]2[bc]\\")) # Output: \\"aaabcbc\\" print(decode_string(\\"3[a2[c]]\\")) # Output: \\"accaccacc\\" print(decode_string(\\"2[abc]3[cd]ef\\"))# Output: \\"abcabccdcdcdef\\" ```","solution":"def decode_string(s: str) -> str: stack = [] current_num = 0 current_str = \'\' for ch in s: if ch.isdigit(): current_num = current_num * 10 + int(ch) elif ch == \'[\': # Push the current number and string on the stack stack.append(current_str) stack.append(current_num) # Reset the current string and number current_str = \'\' current_num = 0 elif ch == \']\': num = stack.pop() prev_str = stack.pop() current_str = prev_str + num * current_str else: current_str += ch return current_str"},{"question":"You are tasked with creating a function called `sorted_with_max_diff` that takes a list of integers and returns a tuple containing two elements: 1. A new list with the integers sorted in ascending order. 2. The maximum absolute difference between any two consecutive integers in the sorted list. The function should handle both positive and negative integers, as well as empty lists. # Function Signature ```python def sorted_with_max_diff(lst): pass ``` # Constraints - The input list can be empty or contain up to `10^4` integers. - Each integer in the list is within the range `[-10^9, 10^9]`. - The function should run in `O(n log n)` time complexity due to the sorting requirement. # Example Usage ```python # Example 1 lst1 = [3, 10, 6, 1, 5] # Sorted list: [1, 3, 5, 6, 10] # Differences: [2, 2, 1, 4] # Maximum difference: 4 print(sorted_with_max_diff(lst1)) # Output: ([1, 3, 5, 6, 10], 4) # Example 2 lst2 = [-10, 0, 5, -3] # Sorted list: [-10, -3, 0, 5] # Differences: [7, 3, 5] # Maximum difference: 7 print(sorted_with_max_diff(lst2)) # Output: ([-10, -3, 0, 5], 7) # Example 3 lst3 = [] # Sorted list: [] # Maximum difference: None print(sorted_with_max_diff(lst3)) # Output: ([], None) ``` # Explanation - The function should first sort the given list. - If the list is empty or contains a single element, the maximum difference should be returned as `None`. - The function should then compute the differences between consecutive integers in the sorted list and return the sorted list along with the maximum of these differences.","solution":"def sorted_with_max_diff(lst): Sorts the input list of integers and finds the maximum absolute difference between any two consecutive integers. Parameters: lst (list): A list of integers to be sorted. Returns: tuple: A tuple containing the sorted list and the maximum absolute difference between any two consecutive integers in the sorted list. Returns (sorted_list, None) if the input list is empty or has only one element. if len(lst) <= 1: return (sorted(lst), None if len(lst) == 0 else 0) sorted_lst = sorted(lst) max_diff = max(abs(sorted_lst[i] - sorted_lst[i - 1]) for i in range(1, len(sorted_lst))) return (sorted_lst, max_diff)"},{"question":"You are tasked with creating a function that calculates the total cost of items in a shopping cart. Each item in the cart is represented by a dictionary with `name`, `price`, and `quantity` fields. Additionally, you should be able to apply a discount (optional) to the total cost. **Function Signature:** ```python def calculate_total(cart: list, discount: float = 0) -> float: ``` **Input:** - `cart` (list): A list of dictionaries, where each dictionary represents an item with the keys: - `name` (str): The name of the item. - `price` (float): The price per unit of the item. - `quantity` (int): The number of units of the item. - `discount` (float, optional, default=0): A discount to be applied to the total cost, expressed as a percentage (e.g., 10 for 10%). **Output:** - Returns the total cost (float) after applying the discount. **Example:** ```python # Example input and output cart = [ {\\"name\\": \\"apple\\", \\"price\\": 0.5, \\"quantity\\": 10}, {\\"name\\": \\"banana\\", \\"price\\": 0.3, \\"quantity\\": 5} ] total_cost = calculate_total(cart, 10) # total_cost should be 6.75 ``` Note that the discount is applied to the total cost of all items in the cart. If the discount is 10%, you should reduce the total cost by 10%.","solution":"def calculate_total(cart, discount=0): Calculates the total cost of items in the shopping cart, with an optional discount. Args: - cart (list): A list of dictionaries, each representing an item with \'name\', \'price\', and \'quantity\'. - discount (float): An optional discount percentage to apply to the total cost. Returns: - float: The total cost after applying the discount. # Calculate the total cost without discount total_cost = sum(item[\'price\'] * item[\'quantity\'] for item in cart) # Apply the discount if discount > 0: total_cost *= (1 - discount / 100) return total_cost"},{"question":"You are required to write a Python function named `sort_dict_keys` that takes a dictionary as input, sorts its keys in ascending order, and returns a new dictionary with the keys sorted accordingly. The function should: 1. Accept a dictionary as input. 2. Sort the keys of the dictionary in ascending order. 3. Return a new dictionary where the entries are sorted by key. **Function Signature:** ```python def sort_dict_keys(input_dict: dict) -> dict: pass ``` # Guidelines: 1. Ensure the function accepts any dictionary and handles it appropriately. 2. Utilize the `sorted()` function to sort the dictionary keys. 3. Construct a new dictionary using a dictionary comprehension based on the sorted keys. 4. Ensure the original dictionary remains unchanged. # Example: If the input dictionary is: ```python { \\"banana\\": 3, \\"apple\\": 4, \\"cherry\\": 2 } ``` The function should return: ```python { \\"apple\\": 4, \\"banana\\": 3, \\"cherry\\": 2 } ``` If the input dictionary is: ```python { 3: \\"three\\", 1: \\"one\\", 2: \\"two\\" } ``` The function should return: ```python { 1: \\"one\\", 2: \\"two\\", 3: \\"three\\" } ``` # Note: - The function should not modify the input dictionary. - Ensure the function works correctly for both string and integer keys. - Preserve the values corresponding to each key during the sorting operation.","solution":"def sort_dict_keys(input_dict: dict) -> dict: Returns a new dictionary with keys sorted in ascending order. Parameters: input_dict (dict): The dictionary to be sorted by keys. Returns: dict: A new dictionary with keys sorted in ascending order. # Sort the keys of the dictionary sorted_keys = sorted(input_dict.keys()) # Create a new dictionary with entries sorted by key sorted_dict = {key: input_dict[key] for key in sorted_keys} return sorted_dict"},{"question":"You are provided with multiple series of time measurements for various events, and you need to analyze the relationship between these events and their corresponding timings to infer a linear relationship. The time measurements are subject to noise, and the analysis should handle outliers through robust linear fitting. You can use the `RANSACRegressor` from the `sklearn.linear_model` library for this purpose. Write a function `fit_time_relationship(time_events, time_measurements)` that accepts the following parameters: - `time_events`: A numpy array of shape (n_events,) representing the event indices. - `time_measurements`: A numpy array of shape (n_samples, n_events) representing the different samples of time measurements for each event. The function should: 1. Define a linear model ( text{linear_model}(x, a, b) = a cdot x + b ). 2. For each sample in `time_measurements`, use `RANSACRegressor` to fit the model to `time_events` vs. the respective time measurement. 3. Calculate the mean fitting parameters `a` and `b` across all samples. 4. Return the mean parameters `mean_params` as a numpy array of shape (2,) and an array `params_std` representing the standard deviation of these parameters across all samples. Use the following imports to implement your solution: ```python import numpy as np from sklearn.linear_model import RANSACRegressor ``` **Example Usage:** ```python time_events = np.array([1, 2, 3, 4]) time_measurements = np.array([ [2.2, 4.1, 6.1, 7.9], [2.0, 4.0, 6.0, 8.0], [2.1, 4.2, 6.0, 8.1] ]) mean_params, params_std = fit_time_relationship(time_events, time_measurements) print(\\"Mean Fitting Parameters:\\", mean_params) print(\\"Fitting Parameters Standard Deviation:\\", params_std) ``` **Expected Output:** ``` Mean Fitting Parameters: [2. 0.] Fitting Parameters Standard Deviation: [0.1 0.1] ```","solution":"import numpy as np from sklearn.linear_model import RANSACRegressor from sklearn.linear_model import LinearRegression def fit_time_relationship(time_events, time_measurements): Fits linear relationships to the provided time measurements using RANSAC. Parameters: - time_events: np.ndarray of shape (n_events, ) representing event indices. - time_measurements: np.ndarray of shape (n_samples, n_events) representing the time measurements for each event across different samples. Returns: - mean_params: np.ndarray of shape (2, ) containing the mean slope and intercept. - params_std: np.ndarray of shape (2, ) containing the standard deviation of slope and intercept. slopes = [] intercepts = [] for sample in time_measurements: # Reshape the data time_events_reshaped = time_events.reshape(-1, 1) sample_reshaped = sample.reshape(-1, 1) # Initialize RANSAC regressor ransac = RANSACRegressor(LinearRegression()) # Fit the model ransac.fit(time_events_reshaped, sample_reshaped) # Extract the slope and intercept slope = ransac.estimator_.coef_[0][0] intercept = ransac.estimator_.intercept_[0] slopes.append(slope) intercepts.append(intercept) # Calculate mean and standard deviation for parameters mean_slope = np.mean(slopes) mean_intercept = np.mean(intercepts) std_slope = np.std(slopes) std_intercept = np.std(intercepts) mean_params = np.array([mean_slope, mean_intercept]) params_std = np.array([std_slope, std_intercept]) return mean_params, params_std"},{"question":"You are tasked with implementing a matrix transformation function using the `numpy` library. This function will perform a singular value decomposition (SVD) on the input matrix, retain only the top `k` singular values, and reconstruct the matrix using these top components. Understanding and using the following numpy functions is critical for this task: `numpy.linalg.svd`, `numpy.dot`. Function name: `svd_reconstruct` **Function Signature:** ```python def svd_reconstruct(A: np.ndarray, k: int) -> np.ndarray: ``` **Parameters:** - `A` (numpy.ndarray): A NxM matrix to be decomposed and reconstructed. - `k` (int): The number of singular values (and corresponding vectors) to retain in the reconstruction. **Returns:** - A NxM matrix (numpy.ndarray) representing the reconstructed matrix using the top `k` singular values. **Instructions:** 1. Perform singular value decomposition on the input matrix `A` using `numpy.linalg.svd`. 2. Retain the top `k` singular values and their corresponding U and V matrices. 3. Reconstruct the matrix using the reduced components. 4. Return the reconstructed matrix. **Note:** Ensure that the `k` value does not exceed the smallest dimension of the input matrix `A`. **Example:** ```python import numpy as np A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) k = 2 reconstructed_A = svd_reconstruct(A, k) print(reconstructed_A) ```","solution":"import numpy as np def svd_reconstruct(A: np.ndarray, k: int) -> np.ndarray: Perform SVD on the matrix A, retain only the top k singular values, and reconstruct the matrix using these top components. U, S, Vt = np.linalg.svd(A, full_matrices=False) S = np.diag(S) S_reduced = S[:k, :k] U_reduced = U[:, :k] Vt_reduced = Vt[:k, :] reconstructed_A = np.dot(U_reduced, np.dot(S_reduced, Vt_reduced)) return reconstructed_A"},{"question":"Write a Python function `extract_dates_from_text` that extracts and returns all the dates in a given text string. The dates in the text string can be in any of the following formats: - `dd/mm/yyyy` - `dd-mm-yyyy` - `dd.mm.yyyy` The function should return a list of unique dates. The dates should be returned in the same format as they appear in the text. If no dates are found, the function should return an empty list. # Function Signature ```python def extract_dates_from_text(text: str) -> list[str]: pass ``` # Requirements 1. Use the `re` module to search for dates in the text string. 2. Ensure that the function finds dates in all the mentioned formats accurately. 3. Handle edge cases where the day (`dd`), month (`mm`), or year (`yyyy`) might be invalid or out of typical bounds for dates. 4. The list of dates should be unique (i.e., no duplicate dates should be in the list). # Example Usage ```python text = \\"The project deadlines are 27/08/2021 and 13-09-2022. I missed the meeting on 15.10.2022.\\" dates = extract_dates_from_text(text) print(dates) # Output: [\'27/08/2021\', \'13-09-2022\', \'15.10.2022\'] ``` # Notes - Use appropriate regular expressions to identify dates in the specified formats. - Consider the proper handling of cases where the input text might not have any dates or the formats are incorrect. # Constraints - Assume the text may contain other unrelated content and multiple dates scattered throughout the text. - Dates should be validated to ensure they are within normal calendar boundaries, e.g., `dd` can be from 01 to 31, `mm` from 01 to 12, and sensible ranges for `yyyy`.","solution":"import re from typing import List def extract_dates_from_text(text: str) -> List[str]: Extracts and returns all unique dates in the given text string in specified formats. :param text: The text from which dates are to be extracted. :return: A list of unique dates as strings found in the text. date_patterns = [ r\'b(?:[0-2][0-9]|3[0-1])/(?:0[1-9]|1[0-2])/d{4}b\', # dd/mm/yyyy r\'b(?:[0-2][0-9]|3[0-1])-(?:0[1-9]|1[0-2])-d{4}b\', # dd-mm-yyyy r\'b(?:[0-2][0-9]|3[0-1]).(?:0[1-9]|1[0-2]).d{4}b\' # dd.mm.yyyy ] dates = set() for pattern in date_patterns: matches = re.findall(pattern, text) for match in matches: dates.add(match) return list(dates)"},{"question":"You are tasked with implementing a Python function named `validate_ip_addresses` that processes a list of strings representing IPv4 addresses. The function should return a list of valid and invalid addresses in the form of a dictionary which contains two keys: `valid` and `invalid`. The criteria for a valid IPv4 address are as follows: - It consists of four decimal numbers separated by dots. - Each number must be between 0 and 255, inclusive. - Leading zeros are not allowed, except for the number zero itself. The function must utilize regular expressions from the `re` library to perform the validation. # Function Signature ```python def validate_ip_addresses(ip_addresses: list) -> dict: Validates a list of IPv4 addresses and categorizes them into valid and invalid. :param ip_addresses: A list of strings representing IPv4 addresses. :return: A dictionary with two keys \'valid\' and \'invalid\'. Each key maps to a list of IPv4 addresses that are valid or invalid respectively. ``` # Example Input ```python ip_addresses = [ \\"192.168.0.1\\", \\"255.255.255.255\\", \\"0.0.0.0\\", \\"256.0.0.0\\", \\"123.045.067.089\\" ] ``` # Example Output ```python { \\"valid\\": [\\"192.168.0.1\\", \\"255.255.255.255\\", \\"0.0.0.0\\"], \\"invalid\\": [\\"256.0.0.0\\", \\"123.045.067.089\\"] } ``` # Explanation - The IP address \\"192.168.0.1\\" is valid because all parts are within the range 0-255 and there are no leading zeros. - \\"255.255.255.255\\" is valid for the same reasons. - \\"0.0.0.0\\" is valid as all parts are correctly formatted zeros. - \\"256.0.0.0\\" is invalid because 256 is outside the valid range of 0-255. - \\"123.045.067.089\\" is invalid due to leading zeros in the segments \\"045\\" and \\"067\\" and \\"089\\". # Detailed Requirements 1. Split each IP address based on the dot `.` separator. 2. Ensure each of the four parts is a valid number without leading zeros. 3. Compile the regex pattern for matching valid IP segments and use it within the function. 4. Categorize each IP address as valid or invalid based on the defined criteria. # Constraints - The list of IP addresses can have a length ranging from 1 to 1000. - Each IP address must be a well-formed string according to the basic format; invalid formatting issues beyond the mentioned criteria can be ignored.","solution":"import re def validate_ip_addresses(ip_addresses: list) -> dict: Validates a list of IPv4 addresses and categorizes them into valid and invalid. :param ip_addresses: A list of strings representing IPv4 addresses. :return: A dictionary with two keys \'valid\' and \'invalid\'. Each key maps to a list of IPv4 addresses that are valid or invalid respectively. ip_segment_pattern = r\\"^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\" segment_regex = re.compile(ip_segment_pattern) valid_ips = [] invalid_ips = [] for ip in ip_addresses: parts = ip.split(\\".\\") if len(parts) == 4 and all(segment_regex.match(part) for part in parts): valid_ips.append(ip) else: invalid_ips.append(ip) return {\\"valid\\": valid_ips, \\"invalid\\": invalid_ips}"},{"question":"Write a function called `schedule_tasks` that takes two parameters: - `tasks`: a list of tuples, where each tuple contains the task name (string) and its respective duration in hours (integer). - `hours_per_day`: an integer representing the maximum number of hours available for tasks per day. Your task is to create a schedule that distributes the tasks across multiple days while ensuring that the total duration of tasks assigned to any single day does not exceed `hours_per_day`. The function should follow these steps: 1. Initialize an empty list `schedule`, where each element is a list representing a day\'s tasks. 2. Iterate through the `tasks` list and assign each task to the current day\'s list until adding the next task would exceed `hours_per_day`. 3. If adding a task exceeds the `hours_per_day`, start a new day (i.e., append a new list to `schedule` and assign the task to this new day\'s list). 4. Return the `schedule` list, where each inner list represents the tasks scheduled for that day. # Function Signature ```python def schedule_tasks(tasks: list, hours_per_day: int) -> list: pass ``` # Example Given the call `schedule_tasks([(\\"Task A\\", 2), (\\"Task B\\", 8), (\\"Task C\\", 4), (\\"Task D\\", 1), (\\"Task E\\", 3)], 10)`, the function should return: ```python [ [(\\"Task A\\", 2), (\\"Task B\\", 8)], [(\\"Task C\\", 4), (\\"Task D\\", 1), (\\"Task E\\", 3)] ] ``` # Constraints - All task durations are positive integers. - Task names are unique. - `hours_per_day` is a positive integer. # Required Libraries - No additional libraries needed.","solution":"def schedule_tasks(tasks, hours_per_day): Distributes tasks across multiple days without exceeding hours_per_day in any single day. Parameters: tasks (list): A list of tuples, each containing the task name (string) and its duration in hours (integer). hours_per_day (int): Maximum number of hours available for tasks per day. Returns: list: A list of lists representing the tasks scheduled for each day. schedule = [] current_day = [] current_hours = 0 for task in tasks: task_name, task_duration = task if current_hours + task_duration > hours_per_day: schedule.append(current_day) current_day = [task] current_hours = task_duration else: current_day.append(task) current_hours += task_duration if current_day: schedule.append(current_day) return schedule"},{"question":"You need to create a function that determines if a matrix is valid based on the following conditions: - The matrix must be square (number of rows equal to the number of columns). - Each element in the matrix should be a positive integer. - The sum of each row should be equal to the sum of each column. Write a function named `is_valid_matrix` that takes one argument: 1. `matrix`: A list of lists representing a 2D matrix of integers. Your function should return `True` if the matrix meets all the specified conditions; otherwise, return `False`. **Function Signature:** ```python def is_valid_matrix(matrix: List[List[int]]) -> bool: pass ``` **Constraints:** - The matrix size will be between 1x1 and 100x100. - All elements in the matrix will be positive integers less than or equal to 1000. **Example:** ```python matrix1 = [ [2, 3], [3, 2] ] is_valid_matrix(matrix1) # True matrix2 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] is_valid_matrix(matrix2) # False ```","solution":"def is_valid_matrix(matrix): Determines if a matrix is valid based on the conditions: - It must be square. - All elements must be positive integers. - Sums of rows must equal sums of columns. n = len(matrix) # Check if matrix is square for row in matrix: if len(row) != n: return False # Check if all elements are positive integers for row in matrix: for elem in row: if not isinstance(elem, int) or elem <= 0: return False # Check if sums of rows equal sums of columns row_sums = [sum(row) for row in matrix] col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)] return row_sums == col_sums"},{"question":"** Write a function called `calculate_mean_temperature` that takes a `file_path` pointing to a CSV file with weather data and a dictionary called `date_range` with keys `start_date` and `end_date`. The function will calculate the mean temperature over the given date range and for a specified location. The function workflow should be as follows: 1. Read the CSV file using Pandas, ensuring it has columns: `Date`, `Location`, `Temperature`. 2. Parse the `Date` column as datetime objects. 3. Prompt the user to enter a location. 4. Filter the data for the specified date range and location. 5. Calculate the mean temperature for the filtered data. 6. If the data frame is empty after filtering, handle this by printing an informative message. 7. Return the calculated mean temperature. **Required Libraries:** - Pandas Below is a brief example assuming the data file has the columns: `Date`, `Location`, `Temperature`. ```python def calculate_mean_temperature(file_path, date_range): pass ``` Note: Ensure the function handles scenarios where the CSV file is missing, the date range is invalid, or no data exists for the queried conditions. Prompt the user clearly to get the location input. **","solution":"import pandas as pd def calculate_mean_temperature(file_path, date_range): Calculate the mean temperature for a given date range and location from a CSV file. # Load the CSV file try: df = pd.read_csv(file_path) except FileNotFoundError: print(\\"The file was not found.\\") return None # Ensure the necessary columns are present if not {\'Date\', \'Location\', \'Temperature\'}.issubset(df.columns): print(\\"The required columns are not present in the CSV file.\\") return None # Parse the Date column as datetime df[\'Date\'] = pd.to_datetime(df[\'Date\'], errors=\'coerce\') # Prompt the user to enter a location location = input(\\"Please enter the location: \\") # Filter the data for the specified date range and location start_date, end_date = pd.to_datetime(date_range[\'start_date\']), pd.to_datetime(date_range[\'end_date\']) if start_date > end_date: print(\\"Invalid date range: start_date is later than end_date.\\") return None filtered_df = df[(df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) & (df[\'Location\'] == location)] # Check if the filtered data frame is empty if filtered_df.empty: print(\\"No data available for the specified location and date range.\\") return None # Calculate the mean temperature mean_temperature = filtered_df[\'Temperature\'].mean() return mean_temperature"},{"question":"** Given a CSV file `data/TransactionData.csv`, which contains records of financial transactions. Each row in the file represents a single transaction, where each transaction is described by several attributes such as transaction ID, amount, date, and category. The file follows these column headers: - `TransactionID`: A unique identifier for the transaction. - `Amount`: The amount of money involved in the transaction. - `Date`: The date of the transaction in `YYYY-MM-DD` format. - `Category`: The category of the transaction (e.g., Groceries, Utilities, Entertainment, etc.). Your task is to: 1. Read the file `data/TransactionData.csv` and load the data into a DataFrame. 2. Determine the total number of transactions. 3. Compute the total and average transaction amount. 4. Identify the transaction with the highest amount and record its ID. 5. Calculate the total amount spent per category. 6. Determine the category with the highest total expenditure. Implement a function `analyze_transactions` that performs the above tasks and returns the results in the form of a dictionary with the following structure: ```python { \'total_transactions\': int, \'total_amount\': float, \'average_amount\': float, \'max_transaction_id\': str, \'category_totals\': dict, \'max_category\': str } ``` Function signature: ```python def analyze_transactions(file_path: str) -> dict: ``` Example: ```python file_path = \\"data/TransactionData.csv\\" result = analyze_transactions(file_path) print(result) ``` Expected output: ```python { \'total_transactions\': 100, \'total_amount\': 4525.50, \'average_amount\': 45.26, \'max_transaction_id\': \'T1009\', \'category_totals\': { \'Groceries\': 1250.75, \'Utilities\': 1100.25, \'Entertainment\': 870.0, \'Transport\': 650.5, \'Misc\': 654.0 }, \'max_category\': \'Groceries\' } ``` **","solution":"import pandas as pd def analyze_transactions(file_path: str) -> dict: # Read CSV file df = pd.read_csv(file_path) # Calculate total number of transactions total_transactions = len(df) # Calculate total amount of transactions total_amount = df[\'Amount\'].sum() # Calculate average amount of transactions average_amount = df[\'Amount\'].mean() # Identify transaction with the highest amount and record its ID max_transaction_row = df[df[\'Amount\'] == df[\'Amount\'].max()] max_transaction_id = max_transaction_row.iloc[0][\'TransactionID\'] # Calculate total amount spent per category category_totals = df.groupby(\'Category\')[\'Amount\'].sum().to_dict() # Determine the category with the highest total expenditure max_category = max(category_totals, key=category_totals.get) return { \'total_transactions\': total_transactions, \'total_amount\': total_amount, \'average_amount\': average_amount, \'max_transaction_id\': max_transaction_id, \'category_totals\': category_totals, \'max_category\': max_category }"},{"question":"You are developing a system to analyze customer transactions and compute statistical figures. Your task is to write a function called `calculate_statistics` to process a list of transactions and return a dictionary containing several key statistics. Each transaction is represented as a dictionary with the following structure: ```python { \\"amount\\": float, # the total amount of the transaction \\"timestamp\\": str # the timestamp of the transaction in ISO 8601 format } ``` Your `calculate_statistics` function should take in one parameter: 1. `transactions` (list): A list of transaction dictionaries. The function should return a dictionary with the following keys and corresponding values: - `total_amount`: The sum of all transaction amounts. - `average_amount`: The average transaction amount, rounded to 2 decimal places. - `min_amount`: The minimum transaction amount. - `max_amount`: The maximum transaction amount. - `total_transactions`: The total number of transactions. If the input list is empty, all values should be `None` except `total_transactions`, which should be `0`. **Function Signature:** ```python from typing import List, Dict, Union, Any def calculate_statistics(transactions: List[Dict[str, Union[float, str]]]) -> Dict[str, Union[float, int, None]]: pass ``` **Examples:** ```python transactions = [ {\\"amount\\": 100.75, \\"timestamp\\": \\"2023-01-01T12:00:00Z\\"}, {\\"amount\\": 200.00, \\"timestamp\\": \\"2023-01-02T15:30:00Z\\"}, {\\"amount\\": 50.00, \\"timestamp\\": \\"2023-01-03T10:10:00Z\\"} ] calculate_statistics(transactions) # Expected output: # { # \'total_amount\': 350.75, # \'average_amount\': 116.92, # \'min_amount\': 50.0, # \'max_amount\': 200.0, # \'total_transactions\': 3 # } transactions = [] calculate_statistics(transactions) # Expected output: # { # \'total_amount\': None, # \'average_amount\': None, # \'min_amount\': None, # \'max_amount\': None, # \'total_transactions\': 0 # } ```","solution":"from typing import List, Dict, Union def calculate_statistics(transactions: List[Dict[str, Union[float, str]]]) -> Dict[str, Union[float, int, None]]: if not transactions: return { \'total_amount\': None, \'average_amount\': None, \'min_amount\': None, \'max_amount\': None, \'total_transactions\': 0 } total_amount = sum(t[\'amount\'] for t in transactions) min_amount = min(t[\'amount\'] for t in transactions) max_amount = max(t[\'amount\'] for t in transactions) average_amount = round(total_amount / len(transactions), 2) return { \'total_amount\': total_amount, \'average_amount\': average_amount, \'min_amount\': min_amount, \'max_amount\': max_amount, \'total_transactions\': len(transactions) }"},{"question":"You\'ve been given a publicly available API that provides real-time weather data for various cities around the world. You need to write a function that retrieves the current weather information for a list of cities and compiles this data into a pandas DataFrame. **Objective:** Write a function named `get_weather_data` that takes one parameter: 1. `cities` - a list of city names for which you want to fetch the weather data. The function should: 1. Send GET requests to the API for each city in the `cities` list to retrieve the current weather information. 2. Extract the relevant weather information from each city\'s response. 3. Compile all the extracted weather information into a pandas DataFrame with the columns: \'city\', \'temperature\', \'humidity\', \'weather_description\'. You can assume you have a helper function provided, `fetch_weather(city)`, which takes a city name and returns a JSON object with the weather data for that city. The JSON object contains the following key-value pairs: - \'city\': The name of the city. - \'temperature\': The current temperature in Celsius. - \'humidity\': The current humidity percentage. - \'weather_description\': A brief description of the current weather conditions. Your submitted function must use the `requests.get` and `pandas.DataFrame` methods. **Example:** ```python cities = [\'New York\', \'London\', \'Tokyo\', \'Sydney\'] weather_df = get_weather_data(cities) ``` **Assumptions:** - The `fetch_weather` function is already available for use and will work as described. - The API service is reliable and returns data in the expected format.","solution":"import pandas as pd def get_weather_data(cities): Retrieves current weather information for a list of cities and compiles it into a pandas DataFrame. Parameters: cities (list): A list of city names for which to fetch the weather data. Returns: pd.DataFrame: A DataFrame with the weather information of the requested cities. def fetch_weather(city): # This is a mock of the actual fetch_weather function. # The actual implementation would use requests.get to retrieve real data. mock_responses = { \\"New York\\": {\\"city\\": \\"New York\\", \\"temperature\\": 22, \\"humidity\\": 70, \\"weather_description\\": \\"clear sky\\"}, \\"London\\": {\\"city\\": \\"London\\", \\"temperature\\": 15, \\"humidity\\": 65, \\"weather_description\\": \\"cloudy\\"}, \\"Tokyo\\": {\\"city\\": \\"Tokyo\\", \\"temperature\\": 18, \\"humidity\\": 60, \\"weather_description\\": \\"sunny\\"}, \\"Sydney\\": {\\"city\\": \\"Sydney\\", \\"temperature\\": 25, \\"humidity\\": 55, \\"weather_description\\": \\"rainy\\"} } return mock_responses.get(city, {\\"city\\": city, \\"temperature\\": None, \\"humidity\\": None, \\"weather_description\\": \\"unknown\\"}) data = [] for city in cities: weather_data = fetch_weather(city) data.append(weather_data) df = pd.DataFrame(data, columns=[\'city\', \'temperature\', \'humidity\', \'weather_description\']) return df"},{"question":"You are given an integer array `arr` and a target integer `target`. Your task is to write a function called `find_pair_with_sum(arr, target)` that finds and returns the indices of the two numbers in the array that add up to the target. If no such numbers exist, the function should return `None`. Your implementation should also calculate the time taken by your function to execute using the `time.time` function from the `time` module. Here are the steps you need to follow: 1. Implement the function `find_pair_with_sum(arr, target)`. 2. Use the `time.time()` function to measure the time taken by `find_pair_with_sum(arr, target)` to execute. 3. Return the result and the time taken for execution. Your implementation should test the functionality with a provided array and target value and print the results. Here is the function signature you should use: ```python def find_pair_with_sum(arr: list, target: int) -> list: pass ``` **Example:** Given the array: `[2, 7, 11, 15]` and target: `9` The output should be: ``` Pair of indices: [0, 1] Execution time: 0.002 milliseconds ```","solution":"import time def find_pair_with_sum(arr: list, target: int) -> list: Finds two indices in `arr` that add up to `target`. Returns the indices as a list. If no such indices are found, returns None. Also, calculates the execution time. start_time = time.time() index_map = {} for i, num in enumerate(arr): complement = target - num if complement in index_map: end_time = time.time() execution_time = (end_time - start_time) * 1000 # in milliseconds return [index_map[complement], i], execution_time index_map[num] = i end_time = time.time() execution_time = (end_time - start_time) * 1000 # in milliseconds return None, execution_time"},{"question":"You are working on an e-commerce platform and need to implement a function that calculates the total price of items in a shopping cart after applying discounts and handling taxes. The items in the cart can have individual discounts, and there\'s an additional limited-time discount that applies a percentage reduction to the total after all individual discounts have been applied but before taxes are added. Your objective is to implement the `calculate_total` function, which accepts a list of dictionaries representing the items in the cart and returns the final total price after applying discounts and taxes. Each dictionary in the list has the following format: `{ \'name\': str, \'price\': float, \'quantity\': int, \'discount\': float }`. 1. Calculate the total price for each item considering its quantity and discount. 2. Sum these individual prices to get the subtotal. 3. Apply the additional discount to the subtotal. 4. Calculate the total price after adding a fixed tax rate of 8%. Here is an example of the list of items: ```python items = [ {\'name\': \'Laptop\', \'price\': 999.99, \'quantity\': 1, \'discount\': 0.1}, {\'name\': \'Mouse\', \'price\': 49.99, \'quantity\': 2, \'discount\': 0.05}, {\'name\': \'Keyboard\', \'price\': 79.99, \'quantity\': 1, \'discount\': 0.2}, ] ``` Additional constant for the function: ```python ADDITIONAL_DISCOUNT = 0.15 TAX_RATE = 0.08 ``` Function signature: ```python def calculate_total(items: list) -> float: ``` Your implementation should handle edge cases like an empty cart, and ensure floating-point arithmetic is handled accurately.","solution":"ADDITIONAL_DISCOUNT = 0.15 TAX_RATE = 0.08 def calculate_total(items: list) -> float: Calculates the final price of the shopping cart after applying individual item discounts, an additional discount, and adding taxes. :param items: List of dictionaries representing the items in the cart. Each dictionary contains \'name\', \'price\', \'quantity\', and \'discount\'. :return: The final total price. # Calculating the subtotal after individual discounts subtotal = 0 for item in items: item_total = item[\'price\'] * item[\'quantity\'] * (1 - item[\'discount\']) subtotal += item_total # Applying the additional discount discounted_total = subtotal * (1 - ADDITIONAL_DISCOUNT) # Adding taxes total_with_taxes = discounted_total * (1 + TAX_RATE) return round(total_with_taxes, 2)"},{"question":"You are working with a dataset that contains information on various car attributes and their fuel consumption rates (`mpg`). Your task is to develop a pipeline that preprocesses the data and evaluates the performance of a predictive model that estimates the miles per gallon (mpg) based on certain features. Specifically, you need to: 1. **Handle missing values** in the dataset by imputing them with the mean value of the column. 2. **Encode** categorical variables, if any, using one-hot encoding. 3. **Standardize** continuous features. 4. **Split** the dataset into training and testing subsets. 5. **Implement** and evaluate different regression models: Linear Regression and Support Vector Regressor. You are required to use the `sklearn.linear_model.LinearRegression` and `sklearn.svm.SVR` classes from the Scikit-Learn library to build these models. The function should return the Mean Absolute Error (MAE) for the training and test sets of each model. Write a function `evaluate_fuel_models(data: pd.DataFrame) -> dict` that performs the above steps and returns a dictionary with the MAE values for both models on the training and test datasets. # Function Signature ```python import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.linear_model import LinearRegression from sklearn.svm import SVR from sklearn.impute import SimpleImputer from sklearn.metrics import mean_absolute_error def evaluate_fuel_models(data: pd.DataFrame) -> dict: # Your code here pass ``` # Example Usage ```python # Assume `data` is a pandas DataFrame containing the dataset. results = evaluate_fuel_models(data) print(results) ``` # Constraints - Use data splitting ratio of 75% for training and 25% for testing. - Use random seed `42` for reproducibility. - Selected features for the model are: `\'cylinders\', \'displacement\', \'horsepower\', \'weight\', \'acceleration\'`.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.compose import ColumnTransformer from sklearn.linear_model import LinearRegression from sklearn.svm import SVR from sklearn.impute import SimpleImputer from sklearn.metrics import mean_absolute_error from sklearn.pipeline import Pipeline def evaluate_fuel_models(data: pd.DataFrame) -> dict: features = [\'cylinders\', \'displacement\', \'horsepower\', \'weight\', \'acceleration\'] target = \'mpg\' # Handling missing values for the target variable data = data.dropna(subset=[target]) X = data[features] y = data[target] # Preprocessing pipeline numeric_features = features numeric_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'mean\')), (\'scaler\', StandardScaler()) ]) preprocessor = ColumnTransformer( transformers=[ (\'num\', numeric_transformer, numeric_features) ]) # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42) # Linear Regression lr_pipeline = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'model\', LinearRegression()) ]) lr_pipeline.fit(X_train, y_train) y_train_pred_lr = lr_pipeline.predict(X_train) y_test_pred_lr = lr_pipeline.predict(X_test) lr_mae_train = mean_absolute_error(y_train, y_train_pred_lr) lr_mae_test = mean_absolute_error(y_test, y_test_pred_lr) # Support Vector Regressor svr_pipeline = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'model\', SVR()) ]) svr_pipeline.fit(X_train, y_train) y_train_pred_svr = svr_pipeline.predict(X_train) y_test_pred_svr = svr_pipeline.predict(X_test) svr_mae_train = mean_absolute_error(y_train, y_train_pred_svr) svr_mae_test = mean_absolute_error(y_test, y_test_pred_svr) return { \'LinearRegression\': { \'train_mae\': lr_mae_train, \'test_mae\': lr_mae_test }, \'SVR\': { \'train_mae\': svr_mae_train, \'test_mae\': svr_mae_test } }"},{"question":"You are required to write a function called `average_temperature` that calculates the average temperature from a list of dictionary records representing daily temperatures. Each dictionary contains the date and the temperature reading for that day. The average should be calculated only for dates present in the given date range. # Function Specification - **Function Name**: `average_temperature` - **Parameters**: - `records` (List[Dict[str, Union[str, float]]]): A list of dictionaries, each containing: - `date` (str): The date in the format \\"YYYY-MM-DD\\". - `temperature` (float): The temperature reading for that date. - `start_date` (str): The start date in the format \\"YYYY-MM-DD\\". - `end_date` (str): The end date in the format \\"YYYY-MM-DD\\". # Instructions 1. The function should iterate over the list of records and collect temperatures for dates within the specified range (inclusive). 2. If there are no records within the date range, the function should return `None`. 3. Otherwise, calculate and return the average temperature as a float. You can assume: - The dates in `start_date` and `end_date` will always be valid and `start_date` <= `end_date`. - Each record\'s date will also be a valid date in \\"YYYY-MM-DD\\" format. - The `records` list may be empty. # Example ```python def average_temperature(records: List[Dict[str, Union[str, float]]], start_date: str, end_date: str) -> Union[float, None]: pass # Your implementation here # Example usage: records = [ {\\"date\\": \\"2023-06-01\\", \\"temperature\\": 72.5}, {\\"date\\": \\"2023-06-02\\", \\"temperature\\": 75.0}, {\\"date\\": \\"2023-06-03\\", \\"temperature\\": 78.1}, {\\"date\\": \\"2023-06-04\\", \\"temperature\\": 71.3} ] start_date = \\"2023-06-02\\" end_date = \\"2023-06-04\\" print(average_temperature(records, start_date, end_date)) # Output: 74.8 ```","solution":"from typing import List, Dict, Union from datetime import datetime def average_temperature(records: List[Dict[str, Union[str, float]]], start_date: str, end_date: str) -> Union[float, None]: Calculates the average temperature from the given records within the specified date range. Args: records (List[Dict[str, Union[str, float]]]): List of dictionaries containing \'date\' and \'temperature\'. start_date (str): Start date in \'YYYY-MM-DD\' format. end_date (str): End date in \'YYYY-MM-DD\' format. Returns: Union[float, None]: The average temperature or None if no records are within the date range. start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") temperatures = [ record[\\"temperature\\"] for record in records if start <= datetime.strptime(record[\\"date\\"], \\"%Y-%m-%d\\") <= end ] if not temperatures: return None return sum(temperatures) / len(temperatures)"},{"question":"You are asked to implement a function `compute_principal_component_analysis` which performs Principal Component Analysis (PCA) on a given set of data points. Your task is to project the data onto a lower-dimensional subspace defined by the principal components, and visualize the results in a 2D plane by plotting the first two principal components. The function should: 1. Compute the principal components using the `PCA` class from the `sklearn.decomposition` module. 2. Transform the data into the principal component space. 3. Plot a scatter plot of the transformed data using the first two principal components, with points colored based on the labels provided. Parameters: - `X`: A 2D NumPy array of shape `(n_samples, n_features)` representing input data points. - `y`: A 1D NumPy array of shape `(n_samples,)` representing the labels of the input data points. - `n_components`: An integer representing the number of principal components to compute. Output: - The function should display a scatter plot of the transformed data in the 2D plane of the first two principal components, with points colored according to their labels. The function signature should be: ```python def compute_principal_component_analysis(X: np.ndarray, y: np.ndarray, n_components: int): pass ``` Requirements: - Use the `PCA` class from `sklearn.decomposition` to perform PCA. - Use the `matplotlib` library for plotting the results. - Ensure that different classes are visually distinguishable in the plot. #","solution":"import numpy as np from sklearn.decomposition import PCA import matplotlib.pyplot as plt def compute_principal_component_analysis(X: np.ndarray, y: np.ndarray, n_components: int): Perform Principal Component Analysis (PCA) on the given data and display a scatter plot of the transformed data in the first two principal components space, colored by labels. Parameters: - X (np.ndarray): Input data points, shape (n_samples, n_features) - y (np.ndarray): Labels for the data points, shape (n_samples,) - n_components (int): Number of principal components to compute. pca = PCA(n_components=n_components) X_pca = pca.fit_transform(X) plt.figure(figsize=(8, 6)) scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap=\'viridis\', edgecolor=\'k\', alpha=0.7) plt.xlabel(\'Principal Component 1\') plt.ylabel(\'Principal Component 2\') plt.title(\'PCA - 2D Projection\') plt.colorbar(scatter) plt.show()"},{"question":"You have been provided with a function called `sort_by_custom_order` that takes two lists as inputs: `custom_order` and `elements`. The function sorts the `elements` list based on the order specified in the `custom_order` list. For the elements that are not present in `custom_order`, they should be placed at the end of the sorted list in their original relative order. Your task is to write a function called `custom_sort` that performs the following: 1. Takes two input parameters: - `custom_order`: A list of elements that defines the desired order. - `elements`: A list of elements that needs to be sorted based on `custom_order`. 2. Sorts the `elements` list such that: - The order of elements in `custom_order` is maintained. - Elements not present in `custom_order` are placed at the end in their original relative order. # Function Definition ```python def custom_sort(custom_order, elements): pass ``` # Example ```python custom_order = [\'b\', \'c\', \'a\'] elements = [\'a\', \'c\', \'d\', \'b\', \'e\', \'f\', \'a\'] custom_sort(custom_order, elements) ``` *Expected Outcome*: ```python [\'b\', \'c\', \'a\', \'a\', \'d\', \'e\', \'f\'] ``` # Constraints - The length of `custom_order` will be less than or equal to the length of `elements`. - Each value in `elements` may or may not be present in `custom_order`. - The elements in `custom_order` and `elements` can be any hashable type. - The relative order of elements not in `custom_order` should be preserved. # Note - You must maintain the relative order of elements that are not present in `custom_order` in the output list.","solution":"def custom_sort(custom_order, elements): Sorts the elements list based on the order specified in the custom_order list. Elements not present in custom_order are placed at the end in original relative order. Args: custom_order (list): List that defines the desired order. elements (list): List of elements to be sorted. Returns: list: Sorted list of elements based on custom_order. custom_order_set = set(custom_order) order_dict = {item: index for index, item in enumerate(custom_order)} sorted_elements = sorted( elements, key=lambda x: (order_dict.get(x, float(\'inf\')), elements.index(x) if x not in custom_order_set else 0) ) return sorted_elements"},{"question":"You are required to write a function `validParentheses(s)` that checks whether a given string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. A string is considered valid if the brackets are closed in the correct order. Each type of bracket must close in the correct order, meaning that any opening bracket must have a corresponding closing bracket of the same type. The function signature should be: ```python def validParentheses(s: str) -> bool: pass ``` # Requirements: 1. Use a stack to keep track of opening brackets. 2. For each closing bracket, check if it matches the top of the stack. 3. If the stack is empty at the end, the string is valid. # Input: - A single string `s` containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. # Output: - A boolean value `True` if the string is valid, otherwise `False`. # Examples: ```python validParentheses(\\"()\\") -> True validParentheses(\\"()[]{}\\") -> True validParentheses(\\"(]\\") -> False validParentheses(\\"([)]\\") -> False validParentheses(\\"{[]}\\") -> True ``` # Constraints: - The length of `s` will be between `0` and `10^4`. - The given string will contain only the aforementioned characters. Ensure your function handles empty strings gracefully and checks for any mismatched or improperly ordered brackets.","solution":"def validParentheses(s: str) -> bool: Check if a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. :param s: A string with brackets. :return: True if the string is valid, False otherwise. # Stack to keep track of opening brackets stack = [] # Dictionary to map closing brackets to their corresponding opening brackets bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} # Traverse the string for char in s: # If it\'s an opening bracket, push to stack if char in bracket_map.values(): stack.append(char) # If it\'s a closing bracket, check if it matches the top of the stack elif char in bracket_map: if stack and stack[-1] == bracket_map[char]: stack.pop() else: return False # In the end, the stack should be empty if the string is valid return not stack"},{"question":"Create a Python function named `matrix_multiply(matrix1, matrix2)` that takes two arguments `matrix1` and `matrix2`, each representing a 2x2 matrix. The function should return the result of multiplying `matrix1` by `matrix2`. Matrix multiplication rules require that for two 2x2 matrices, the result is also a 2x2 matrix. Given: [ A = begin{bmatrix} a_{11} & a_{12} a_{21} & a_{22} end{bmatrix} ] [ B = begin{bmatrix} b_{11} & b_{12} b_{21} & b_{22} end{bmatrix} ] The resulting matrix C, from A * B, is calculated as: [ C = begin{bmatrix} c_{11} & c_{12} c_{21} & c_{22} end{bmatrix} ] where: [ c_{11} = a_{11}b_{11} + a_{12}b_{21} ] [ c_{12} = a_{11}b_{12} + a_{12}b_{22} ] [ c_{21} = a_{21}b_{11} + a_{22}b_{21} ] [ c_{22} = a_{21}b_{12} + a_{22}b_{22} ] **Requirements:** 1. Ensure that `matrix1` and `matrix2` are valid 2x2 matrices. 2. Use list comprehensions or loops to compute the result. 3. Return a nested list representing the resulting 2x2 matrix. 4. Include an example to demonstrate the function usage. Example: If [ text{{matrix1}} = begin{bmatrix} 1 & 2 3 & 4 end{bmatrix} ] and [ text{{matrix2}} = begin{bmatrix} 5 & 6 7 & 8 end{bmatrix} ] then the function should return: [ begin{bmatrix} 19 & 22 43 & 50 end{bmatrix} ]","solution":"def matrix_multiply(matrix1, matrix2): Multiplies two 2x2 matrices and returns the resulting 2x2 matrix. Parameters: - matrix1: List[List[int]] a 2x2 matrix - matrix2: List[List[int]] a 2x2 matrix Returns: - List[List[int]] the resulting 2x2 matrix of the multiplication if not all(len(row) == 2 for row in matrix1) or not len(matrix1) == 2: raise ValueError(\\"matrix1 is not a valid 2x2 matrix\\") if not all(len(row) == 2 for row in matrix2) or not len(matrix2) == 2: raise ValueError(\\"matrix2 is not a valid 2x2 matrix\\") result = [ [ matrix1[0][0]*matrix2[0][0] + matrix1[0][1]*matrix2[1][0], matrix1[0][0]*matrix2[0][1] + matrix1[0][1]*matrix2[1][1], ], [ matrix1[1][0]*matrix2[0][0] + matrix1[1][1]*matrix2[1][0], matrix1[1][0]*matrix2[0][1] + matrix1[1][1]*matrix2[1][1], ] ] return result # Example usage: # matrix1 = [[1, 2], [3, 4]] # matrix2 = [[5, 6], [7, 8]] # matrix_multiply(matrix1, matrix2) should return [[19, 22], [43, 50]]"},{"question":"In this task, you need to implement a function called `capitalize_words` which takes in a string and returns a new string where each word is capitalized. Function Requirements: 1. Function Name: `capitalize_words` 2. Inputs: - `sentence`: str - The input string containing one or more words separated by spaces. 3. Output: - The function should return a string where each word in the input string is capitalized. 4. Considerations: - Capitalize the first character of each word and ensure the rest are in lower case. - Do not use the `title` method of the string class directly. 5. Edge cases: - The input string may include punctuation marks. Only alphabetic characters should be affected by the capitalization. - Handle multiple spaces between words properly; they should remain in the output as they are in the input. **Example Usage:** ```python result = capitalize_words(\'hello world\') print(result) # Output: \'Hello World\' result = capitalize_words(\'aBc defG HIJKLMN opqrs!\') print(result) # Output: \'Abc Defg Hijklmn Opqrs!\' result = capitalize_words(\'this is an EXample\') print(result) # Output: \'This Is An Example\' ```","solution":"def capitalize_words(sentence): Capitalize the first character of each word and ensure the rest are in lower case. Parameters: sentence (str): The input string containing one or more words separated by spaces. Returns: str: New string where each word is capitalized. def capitalize_word(word): if word: return word[0].upper() + word[1:].lower() return word # to handle empty strings (words) due to consecutive spaces return \' \'.join(capitalize_word(word) for word in sentence.split(\' \'))"},{"question":"You have been selected to create an interactive number guessing game using Python\'s random module. The objective is to write a function that runs a game where the user has a limited number of attempts to guess a randomly generated number within a specified range. In this problem, you will write a function named `number_guessing_game(lower, upper, attempts)` which chooses a random number between `lower` and `upper` (inclusive) and allows the user to guess the number within a limited number of attempts defined by the `attempts` parameter. Here’s how you should approach this task: 1. **Generate Random Number**: Use the `random.randint()` function to generate a random number between `lower` and `upper`. 2. **Prompt the User**: Ask the user to input their guess. 3. **Validate the Input**: Ensure that the user\'s guess is within the defined range. If it is not, prompt them to guess again without counting against their attempt limit. 4. **Compare Guesses**: After each valid guess, provide feedback indicating if the guess is too high, too low, or correct. 5. **Track Attempts**: Keep track of the number of attempts remaining and end the game if the attempts run out. 6. **Output Result**: If the guess is correct within the allowed attempts, congratulate the user with a message. If not, reveal the randomly generated number. The `number_guessing_game()` function should be your main function and it should handle the game\'s logic and interactions.","solution":"import random def number_guessing_game(lower, upper, attempts): target = random.randint(lower, upper) print(f\\"Guess a number between {lower} and {upper}. You have {attempts} attempts.\\") while attempts > 0: try: guess = int(input(\\"Enter your guess: \\")) if guess < lower or guess > upper: print(f\\"Please enter a number within the range {lower}-{upper}.\\") continue if guess == target: print(\\"Congratulations! You guessed the number correctly.\\") return True elif guess < target: print(\\"Your guess is too low.\\") else: print(\\"Your guess is too high.\\") attempts -= 1 print(f\\"You have {attempts} attempts remaining.\\") except ValueError: print(\\"Invalid input. Please enter an integer.\\") print(f\\"Sorry, you\'ve run out of attempts. The number was {target}.\\") return False"},{"question":"** You are asked to write a function named `calculate_student_averages` that computes the average score of each student from a CSV file containing student test scores. The objective is to practice file handling and data manipulation using the `pandas` library. Here\'s what the function signature looks like: ```python def calculate_student_averages(file_path: str) -> pd.DataFrame: Calculates average test scores for each student from a CSV file. Args: file_path (str): Path to the CSV file containing student test scores. Returns: pd.DataFrame: Pandas DataFrame containing student names and their corresponding average scores. ``` **Instructions:** 1. **Read CSV File:** Use `pandas.read_csv` to load data from the CSV file located at `file_path`. Assume the file contains columns: \'Student\', \'Test\', and \'Score\'. 2. **Calculate Averages:** Group the data by \'Student\' and calculate the mean of the \'Score\' for each student. 3. **Return Result:** Create a new DataFrame that contains the \'Student\' names and their average scores, sorted in descending order of the average scores. **Example:** Given the `student_scores.csv` file with contents: ``` Student,Test,Score Alice,Math,85 Alice,Science,90 Bob,Math,78 Bob,Science,83 Charlie,Math,92 Charlie,Science,88 ``` Calling the function as follows: ```python file_path = \'student_scores.csv\' average_scores = calculate_student_averages(file_path) ``` The function should return a DataFrame that looks like: ``` Student AverageScore 0 Charlie 90.0 1 Alice 87.5 2 Bob 80.5 ``` **","solution":"import pandas as pd def calculate_student_averages(file_path: str) -> pd.DataFrame: Calculates average test scores for each student from a CSV file. Args: file_path (str): Path to the CSV file containing student test scores. Returns: pd.DataFrame: Pandas DataFrame containing student names and their corresponding average scores. # Read CSV file df = pd.read_csv(file_path) # Group by \'Student\' and calculate mean of \'Score\' averages = df.groupby(\'Student\')[\'Score\'].mean().reset_index() # Rename the column for better readability averages = averages.rename(columns={\'Score\': \'AverageScore\'}) # Sort the DataFrame by \'AverageScore\' in descending order averages = averages.sort_values(by=\'AverageScore\', ascending=False).reset_index(drop=True) return averages"},{"question":"You are required to write a function named `find_max_subarray` which identifies the contiguous subarray within a one-dimensional numeric array, `nums`, that has the largest sum. The function should return the sum of this subarray. This problem is a classic example of the \\"Maximum Subarray Problem.\\" # Description of the function: - **Function Name**: `find_max_subarray` - **Arguments**: - `nums`: A list of integers. - **Returns**: - `max_sum`: An integer representing the largest sum of a contiguous subarray within `nums`. # Requirements: 1. You are encouraged to use an efficient algorithm such as Kadane\'s Algorithm which runs in linear time. 2. The function should handle both positive and negative integers within the input list. # Example: ```python # Example call print(find_max_subarray([1, -3, 2, 1, -1, 3, 5, -2])) # Output should be 10 (subarray is [2, 1, -1, 3, 5]) print(find_max_subarray([-2, -3, 4, -1, -2, 1, 5, -3])) # Output should be 7 (subarray is [4, -1, -2, 1, 5]) print(find_max_subarray([-1, -2, -3, -4])) # Output should be -1 (subarray is [-1]) # Example 1 nums = [5, 4, -1, 7, 8] # max_sum = 5 + 4 + (-1) + 7 + 8 = 23 print(find_max_subarray(nums)) # Output should be 23 # Example 2 nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # max_sum = 4 + (-1) + 2 + 1 = 6 print(find_max_subarray(nums)) # Output should be 6 ``` Implement the function using an optimal approach to ensure efficiency, particularly for large input lists.","solution":"def find_max_subarray(nums): Finds the contiguous subarray within a one-dimensional numeric array that has the largest sum and returns the sum of this subarray. Args: nums: List[int] - a list of integers. Returns: int - the largest sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a string containing both lowercase and uppercase letters, write a function `is_palindrome_permutation(s: str) -> bool` that checks if the string is a permutation of a palindrome. A permutation of a palindrome has the same characters with the same frequencies, but the characters can be rearranged to form a palindrome. Consider only alphabet characters (ignore spaces, punctuation, and other special characters) and treat uppercase and lowercase letters as the same. **Function Signature**: ```python def is_palindrome_permutation(s: str) -> bool: pass ``` # Example Suppose you have the following string `s`: ``` s = \\"Tact Coa\\" ``` Calling `is_palindrome_permutation(s)` should return `True` because one of the permutations of this string is \\"taco cat\\", which is a palindrome. # Requirements - Use standard libraries to manipulate strings and characters. - Optimize the function such that it operates in linear time concerning the length of the string. # Hints - Consider using a data structure to count the frequency of each character. - Palindromes have at most one character with an odd frequency. This problem will help you practice fundamental string manipulation and character frequency counting, which are important skills for data processing and algorithmic challenges.","solution":"def is_palindrome_permutation(s: str) -> bool: Check if the given string is a permutation of a palindrome. # Normalize the string to ignore spaces and case differences. s = \'\'.join(filter(str.isalpha, s)).lower() # Count the frequency of each character. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters with odd counts. odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"Given an array of meeting time intervals consisting of start and end times `[[s1, e1], [s2, e2], ...]` (si < ei), determine if a person could attend all meetings. You need to implement the function `can_attend_meetings(intervals)` where: - `intervals` is a list of tuples representing the meeting time intervals. The function should return a boolean value indicating whether a person can attend all the meetings without any overlaps. Function signature: ```python def can_attend_meetings(intervals: List[Tuple[int, int]]) -> bool: ... ``` Example: ```python intervals = [(0, 30), (5, 10), (15, 20)] assert can_attend_meetings(intervals) == False intervals = [(7, 10), (2, 4)] assert can_attend_meetings(intervals) == True ``` # Guidelines: - Sort the intervals based on their start times. - Iterate through the sorted list and check for any overlapping intervals. - Return `False` if any overlapping intervals are found, otherwise return `True`. - Make use of efficient sorting and iteration techniques to ensure the solution performs well on large inputs.","solution":"from typing import List, Tuple def can_attend_meetings(intervals: List[Tuple[int, int]]) -> bool: Determines if a person could attend all meetings without overlap. Args: intervals (List[Tuple[int, int]]): List of meeting time intervals. Returns: bool: True if a person can attend all meetings, False otherwise. # Sort the intervals based on the start time intervals.sort(key=lambda x: x[0]) # Check for overlapping intervals for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"You are tasked with implementing a function `evaluar_rendimiento(estudiantes)`, which helps an instructor to evaluate the performance of their students in a course. This function should enable the instructor to perform the following actions: 1. Add a new student. 2. Record a student\'s grade for an assignment or exam. 3. Calculate the average grade for a student. 4. Display the list of all students along with their grades. 5. Exit Each student should be represented as an object with attributes `nombre` (student\'s first name), `apellidos` (student\'s last name), and `calificaciones` (a list of grades). The `estudiantes` parameter is a list of such student objects when the function is called. The function should allow the instructor to add new student objects to this list, record grades for the existing students, and compute the average of the grades of a specified student. When recording a student\'s grade, the function should log the details of the grade (student\'s name, type of the grade: assignment/exam, grade value, date, and time) in a text file named after the student. The format for naming the file should be \\"<Nombre>_<Apellidos>.txt\\", where \\"Nombre\\" and \\"Apellidos\\" correspond to the student\'s first and last names. Use the `time.strftime` function to log the current date and time in the file for every grade recorded. The date should be in the format \\"day/month/year\\" and the time in the format \\"hour:minute:second\\". Your task is to implement the function `evaluar_rendimiento(estudiantes)` as described above. **Note**: You should explicitly use the `time.strftime` function from the `time` module as described in its documentation.","solution":"import time class Estudiante: def __init__(self, nombre, apellidos): self.nombre = nombre self.apellidos = apellidos self.calificaciones = [] def add_student(estudiantes, nombre, apellidos): estudiante = Estudiante(nombre, apellidos) estudiantes.append(estudiante) return estudiante def record_grade(estudiantes, nombre, apellidos, grade): for estudiante in estudiantes: if estudiante.nombre == nombre and estudiante.apellidos == apellidos: estudiante.calificaciones.append(grade) filename = f\\"{nombre}_{apellidos}.txt\\" with open(filename, \'a\') as file: current_time = time.strftime(\\"%d/%m/%Y %H:%M:%S\\") file.write(f\\"{current_time} - Grade: {grade}n\\") return estudiante return None def calculate_average(estudiantes, nombre, apellidos): for estudiante in estudiantes: if estudiante.nombre == nombre and estudiante.apellidos == apellidos: if estudiante.calificaciones: return sum(estudiante.calificaciones) / len(estudiante.calificaciones) return None def display_students(estudiantes): return [(estudiante.nombre, estudiante.apellidos, estudiante.calificaciones) for estudiante in estudiantes]"},{"question":"You are required to implement a text-based simulation of a simple vending machine in Python. The vending machine stores a fixed selection of products, each with a specified price and quantity. The user interface will allow a customer to view the available products and prices, make a selection, input money, and receive change. Here is how you should structure your solution: 1. Define a `Product` class with the following attributes: - `name` (string): The name of the product. - `price` (float): The price of the product. - `quantity` (int): The quantity of the product in stock. 2. Define a `VendingMachine` class with the following functionality: - A method `add_product(product: Product)` to add a new product to the vending machine. - A method `display_products()` that prints the list of available products with their prices and quantities. - A method `purchase(product_name: str, money: float)` that attempts to purchase the specified product with the given amount of money. If the product is available and there is enough money: - Deduct the product\'s price from the money. - Reduce the product\'s quantity by one. - Return the remaining money as change. If the product is not available or there is not enough money, the method should return the money without any changes. 3. Implement a simple user interface that: - Continuously displays the list of products and prompts the user to make a selection. - Asks the user to input money for the selected product. - Calls the appropriate methods to handle the purchase and displays the result to the user. - Exits when the user decides to quit. # Example Usage: ```python # Adding some initial products vending_machine = VendingMachine() vending_machine.add_product(Product(\\"Soda\\", 1.50, 10)) vending_machine.add_product(Product(\\"Chips\\", 1.00, 5)) vending_machine.add_product(Product(\\"Candy\\", 0.65, 25)) # Simulating the user interface while True: vending_machine.display_products() choice = input(\\"Enter the name of the product you want to buy (or \'quit\' to exit): \\") if choice == \'quit\': break money = float(input(\\"Enter the amount of money you are inserting: \\")) change = vending_machine.purchase(choice, money) print(f\\"Change returned: {change:.2f}\\") ``` **Important Requirements:** - Ensure proper handling of invalid inputs, such as trying to purchase a product that does not exist or inserting insufficient funds. - Implement and use the `Product` and `VendingMachine` classes as described.","solution":"class Product: def __init__(self, name, price, quantity): self.name = name self.price = price self.quantity = quantity class VendingMachine: def __init__(self): self.products = {} def add_product(self, product): self.products[product.name] = product def display_products(self): for product in self.products.values(): print(f\\"{product.name}: {product.price:.2f} ({product.quantity} in stock)\\") def purchase(self, product_name, money): if product_name not in self.products: return money # product not found, return the money product = self.products[product_name] if product.quantity == 0: return money # out of stock, return the money if money < product.price: return money # not enough money, return the money product.quantity -= 1 change = money - product.price return change"},{"question":"Design a function called `generate_histogram` that takes a pandas DataFrame containing sales data and creates a histogram of sales counts grouped by product categories. The function should follow these steps: 1. **Check Input Validity**: Ensure the DataFrame contains the required columns: `\'product_id\'`, `\'category\'`, and `\'sales\'`. 2. **Group Data**: Group the data by the \'category\' column and compute the total sales for each category. 3. **Plot Histogram**: Use the matplotlib library to create a histogram of the total sales counts for each category. 4. **Display Plot**: Display the generated histogram. The function has the following signature: ```python def generate_histogram(sales_df: pd.DataFrame) -> None: pass ``` Assumptions: - The DataFrame `sales_df` will always contain columns named `\'product_id\'`, `\'category\'`, and `\'sales\'`. - The `sales` values are non-negative integers. - Utilize the pandas and matplotlib libraries to accomplish this task. Here is an example DataFrame input and the expected output: ```python import pandas as pd data = { \'product_id\': [1, 2, 3, 4, 5], \'category\': [\'A\', \'B\', \'A\', \'C\', \'B\'], \'sales\': [100, 150, 200, 300, 250] } sales_df = pd.DataFrame(data) # Example usage generate_histogram(sales_df) ``` The function should produce a histogram with categories \'A\', \'B\', and \'C\' on the x-axis and corresponding total sales on the y-axis.","solution":"import pandas as pd import matplotlib.pyplot as plt def generate_histogram(sales_df: pd.DataFrame) -> None: Generates a histogram of total sales counts grouped by product categories. Parameters: sales_df (pd.DataFrame): DataFrame containing sales data with columns [\'product_id\', \'category\', \'sales\']. # Check if the required columns are present required_columns = {\'product_id\', \'category\', \'sales\'} if not required_columns.issubset(sales_df.columns): raise ValueError(f\\"Input DataFrame must contain the following columns: {required_columns}\\") # Group data by \'category\' and compute the total sales for each category grouped_data = sales_df.groupby(\'category\')[\'sales\'].sum().reset_index() # Plot histogram plt.figure(figsize=(10, 6)) plt.bar(grouped_data[\'category\'], grouped_data[\'sales\'], color=\'skyblue\') plt.xlabel(\'Category\') plt.ylabel(\'Total Sales\') plt.title(\'Total Sales by Category\') plt.show()"},{"question":"**A company is developing a new recommendation engine to suggest products to users based on their browsing history. To evaluate the performance of their new algorithm, they need to compare the items recommended by the new algorithm against the items actually clicked by users. You need to write a function `evaluate_recommendations(recommended: List[str], clicked: List[str]) -> Tuple[int, float]` that calculates two key metrics: 1. The number of items recommended that were actually clicked by the user. 2. The precision of the recommendations, which is the ratio of the number of clicked items that were recommended to the total number of recommended items. The function should take two lists as input: - `recommended`: a list of items recommended by the new algorithm. - `clicked`: a list of items actually clicked by the user. Both lists will only contain item IDs as strings. An item in the `clicked` list can appear more than once if the user clicked it multiple times, but for the purpose of this evaluation, you should consider each unique item only once. **Function Signature:** ```python from typing import List, Tuple def evaluate_recommendations(recommended: List[str], clicked: List[str]) -> Tuple[int, float]: pass ``` **Example Usage:** ```python recommended = [\\"item1\\", \\"item2\\", \\"item3\\", \\"item4\\"] clicked = [\\"item2\\", \\"item3\\", \\"item3\\", \\"item5\\"] # evaluate_recommendations(recommended, clicked) should return (2, 0.5) result = evaluate_recommendations(recommended, clicked) print(result) ``` **Instructions:** 1. Implement the `evaluate_recommendations` function as described. 2. Remove duplicate entries from the `clicked` list to ensure unique item comparisons. 3. Calculate and return a tuple containing: - The number of items recommended that were actually clicked. - The precision of the recommendations, rounded to two decimal places. 4. Ensure proper handling of cases where there might be zero recommendations or zero clicks. 5. Document the key steps within the function to show your understanding of how the metrics are being computed.","solution":"from typing import List, Tuple def evaluate_recommendations(recommended: List[str], clicked: List[str]) -> Tuple[int, float]: Evaluates the recommendations by comparing against the clicked items. Parameters: recommended (List[str]): A list of recommended item IDs. clicked (List[str]): A list of clicked item IDs. Returns: Tuple[int, float]: A tuple containing the number of recommended items that were actually clicked and the precision of the recommendations. # Unique clicked items unique_clicked = set(clicked) # Count of relevant recommended items relevant_recommendations = sum(1 for item in recommended if item in unique_clicked) # Total number of recommended items total_recommended = len(recommended) # Calculating precision precision = 0.0 if total_recommended > 0: precision = round(relevant_recommendations / total_recommended, 2) return (relevant_recommendations, precision)"},{"question":"This function takes in a list of integers, calculates the nth Fibonacci number for each integer in the list, and plots these Fibonacci numbers against the original integers using a line plot. The function is perfect for understanding how to calculate Fibonacci numbers and visualize the relationship between the position in the Fibonacci sequence and the value of the Fibonacci number. The function should output with: ``` matplotlib.axes._axes.Axes: An Axes object representing the line plot of the Fibonacci numbers against the original integers. ``` You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(n-1): a, b = b, a + b return b def task_func(int_list): fib_numbers = [fibonacci(n) for n in int_list] fig, ax = plt.subplots() ax.plot(int_list, fib_numbers, marker=\'o\') ax.set_xlabel(\'Index in list\') ax.set_ylabel(\'Fibonacci Number\') ax.set_title(\'Fibonacci Numbers vs. Index\') return ax ```","solution":"import matplotlib.pyplot as plt def fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(n-1): a, b = b, a + b return b def task_func(int_list): fib_numbers = [fibonacci(n) for n in int_list] fig, ax = plt.subplots() ax.plot(int_list, fib_numbers, marker=\'o\') ax.set_xlabel(\'Original Integers\') ax.set_ylabel(\'Fibonacci Numbers\') ax.set_title(\'Fibonacci Numbers vs. Original Integers\') return ax"},{"question":"In this problem, you\'re asked to implement a Python class that simulates a simple bank account. The class should handle deposits, withdrawals, and maintaining the account balance, and it should keep a transaction history. Implement the `BankAccount` class with the following specifications: # Class Signature ```python class BankAccount: def __init__(self, initial_balance=0): Initialize the BankAccount instance. Parameters ---------- initial_balance : float, optional Initial balance of the bank account. Default is 0. pass def deposit(self, amount): Deposit a specified amount to the account. Parameters ---------- amount : float The amount to deposit. Must be positive. pass def withdraw(self, amount): Withdraw a specified amount from the account. Parameters ---------- amount : float The amount to withdraw. Must be positive and less than or equal to the current balance. pass def get_balance(self): Get the current balance of the account. Returns ------- float The current balance. pass def get_transaction_history(self): Get the transaction history. Returns ------- list of str A list where each entry is a string describing a transaction. pass ``` # Detailed Description 1. **`__init__(self, initial_balance=0)`**: - Initializes the bank account with an optional `initial_balance`. The default initial balance should be 0. - Initializes a transaction history list to keep track of deposits and withdrawals. 2. **`deposit(self, amount)`**: - Adds the `amount` to the account balance if the amount is positive. - Records the transaction in the history as \\"Deposited {amount}\\". 3. **`withdraw(self, amount)`**: - Subtracts the `amount` from the account balance if the amount is positive and less than or equal to the current balance. - If the withdrawal is successful, records the transaction in the history as \\"Withdrew {amount}\\". - If the withdrawal amount exceeds the current balance, it raises an appropriate exception. 4. **`get_balance(self)`**: - Returns the current balance of the account. 5. **`get_transaction_history(self)`**: - Returns the transaction history as a list of strings. # Task Implement the `BankAccount` class based on the detailed description provided. # Example Usage ```python # Initializing account with an initial balance of 100 account = BankAccount(100) # Making deposits account.deposit(50) account.deposit(25) # Making withdrawals account.withdraw(30) account.withdraw(20) # Getting current balance print(account.get_balance()) # Output: 125 # Getting transaction history print(account.get_transaction_history()) # Output: # [\'Deposited 50\', \'Deposited 25\', \'Withdrew 30\', \'Withdrew 20\'] ```","solution":"class BankAccount: def __init__(self, initial_balance=0): Initialize the BankAccount instance. Parameters ---------- initial_balance : float, optional Initial balance of the bank account. Default is 0. self.balance = initial_balance self.transaction_history = [] def deposit(self, amount): Deposit a specified amount to the account. Parameters ---------- amount : float The amount to deposit. Must be positive. if amount > 0: self.balance += amount self.transaction_history.append(f\\"Deposited {amount}\\") else: raise ValueError(\\"Deposit amount must be positive\\") def withdraw(self, amount): Withdraw a specified amount from the account. Parameters ---------- amount : float The amount to withdraw. Must be positive and less than or equal to the current balance. if amount > 0 and amount <= self.balance: self.balance -= amount self.transaction_history.append(f\\"Withdrew {amount}\\") elif amount > self.balance: raise ValueError(\\"Insufficient funds\\") else: raise ValueError(\\"Withdrawal amount must be positive\\") def get_balance(self): Get the current balance of the account. Returns ------- float The current balance. return self.balance def get_transaction_history(self): Get the transaction history. Returns ------- list of str A list where each entry is a string describing a transaction. return self.transaction_history"},{"question":"**Objective**: Create a class `MatrixOperations` with methods to perform matrix multiplication, matrix transpose, and computing the determinant of a square matrix using the numpy library. The class should have the following methods: - `matrix_multiplication(A, B)`: Multiplies two matrices `A` and `B` and returns the result. - `transpose_matrix(A)`: Returns the transpose of matrix `A`. - `compute_determinant(A)`: Returns the determinant of a square matrix `A`. **Requirements**: 1. Use the appropriate `numpy` functions for each operation. 2. Ensure the `matrix_multiplication` method checks that the matrices `A` and `B` can be multiplied based on their shapes. 3. Ensure the `compute_determinant` method validates that the input matrix `A` is square. 4. Provide a class instantiation and method usage examples to demonstrate the functionality. **Context**: Matrix operations are foundational in various fields including computer graphics, scientific computations, and machine learning. Efficiently performing these operations is crucial for handling large datasets and performing complex calculations. **Class Signature**: ```python class MatrixOperations: def matrix_multiplication(self, A, B): \'\'\' A: numpy array B: numpy array Returns: result: numpy array \'\'\' def transpose_matrix(self, A): \'\'\' A: numpy array Returns: result: numpy array \'\'\' def compute_determinant(self, A): \'\'\' A: numpy array Returns: det: float \'\'\' ``` **Example**: ```python import numpy as np class MatrixOperations: def matrix_multiplication(self, A, B): assert A.shape[1] == B.shape[0], \\"Incompatible shapes for matrix multiplication\\" return np.dot(A, B) def transpose_matrix(self, A): return np.transpose(A) def compute_determinant(self, A): assert A.shape[0] == A.shape[1], \\"Matrix must be square\\" return np.linalg.det(A) # Example A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) matrix_ops = MatrixOperations() result_mul = matrix_ops.matrix_multiplication(A, B) print(\\"Matrix Multiplication Result:n\\", result_mul) result_trans = matrix_ops.transpose_matrix(A) print(\\"Transpose of Matrix A:n\\", result_trans) det_A = matrix_ops.compute_determinant(A) print(\\"Determinant of Matrix A:\\", det_A) ```","solution":"import numpy as np class MatrixOperations: def matrix_multiplication(self, A, B): assert A.shape[1] == B.shape[0], \\"Incompatible shapes for matrix multiplication\\" return np.dot(A, B) def transpose_matrix(self, A): return np.transpose(A) def compute_determinant(self, A): assert A.shape[0] == A.shape[1], \\"Matrix must be square\\" return np.linalg.det(A) # Example A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) matrix_ops = MatrixOperations() result_mul = matrix_ops.matrix_multiplication(A, B) print(\\"Matrix Multiplication Result:n\\", result_mul) result_trans = matrix_ops.transpose_matrix(A) print(\\"Transpose of Matrix A:n\\", result_trans) det_A = matrix_ops.compute_determinant(A) print(\\"Determinant of Matrix A:\\", det_A)"},{"question":"You are given user activity data from a social media application that is stored in a CSV file. The data contains information about users\' posts, comments, and likes. Your task is to write a Python function named `analyze_user_engagement` to generate a user engagement report that includes the number of posts, comments, and likes for each user. The CSV file has the following columns: `user_id`, `activity_type`, and `timestamp`. The function should: 1. Read the CSV file into a pandas DataFrame. 2. Calculate the total number of posts, comments, and likes for each user. 3. Create a new DataFrame with columns: `user_id`, `posts`, `comments`, and `likes`. 4. Save this new DataFrame to a new CSV file named `user_engagement_report.csv`. The path to the input CSV file is passed as an argument to the function. Function signature: ```python def analyze_user_engagement(csv_path: str) -> None: pass ``` Example input CSV format: ``` user_id,activity_type,timestamp 1,post,2023-01-01 05:00:00 2,like,2023-01-01 06:00:00 1,comment,2023-01-01 07:00:00 3,post,2023-01-01 08:00:00 3,like,2023-01-01 09:00:00 1,post,2023-01-01 10:00:00 ``` Expected behavior: - The function reads the data from `activities.csv`. - Aggregates the counts for each user_id across the activity types: `post`, `comment`, and `like`. - Outputs a new CSV file `user_engagement_report.csv` such that: ``` user_id,posts,comments,likes 1,2,1,0 2,0,0,1 3,1,0,1 ``` Use the following API methods correctly: - `pandas.read_csv` - `pandas.DataFrame.groupby` - `pandas.DataFrame.to_csv`","solution":"import pandas as pd def analyze_user_engagement(csv_path: str) -> None: # Read the CSV file into a DataFrame df = pd.read_csv(csv_path) # Initialize a dictionary to store user engagement data user_engagement = {} # Process each row in the DataFrame for index, row in df.iterrows(): user_id = row[\'user_id\'] activity_type = row[\'activity_type\'] if user_id not in user_engagement: user_engagement[user_id] = {\'posts\': 0, \'comments\': 0, \'likes\': 0} if activity_type == \'post\': user_engagement[user_id][\'posts\'] += 1 elif activity_type == \'comment\': user_engagement[user_id][\'comments\'] += 1 elif activity_type == \'like\': user_engagement[user_id][\'likes\'] += 1 # Convert the user engagement dictionary to a DataFrame user_engagement_df = pd.DataFrame.from_dict(user_engagement, orient=\'index\').reset_index() user_engagement_df = user_engagement_df.rename(columns={\'index\': \'user_id\'}) # Save the DataFrame to a new CSV file user_engagement_df.to_csv(\'user_engagement_report.csv\', index=False)"},{"question":"You are tasked with creating a function that reverses and capitalizes the given words in a sentence. The function, named `reverse_and_capitalize`, should take a single sentence as input, process each word, and return a new sentence with each word reversed and capitalized. # Function Details: - **Function Name**: `reverse_and_capitalize` - **Parameters**: - `sentence`: a string representing the input sentence composed of words separated by spaces. # Example: Input: `reverse_and_capitalize(\\"hello world\\")` Output: `\\"Olleh Dlrow\\"` # Steps: 1. **Split** the input sentence into individual words. 2. **Reverse** each word and capitalize the first letter of the reversed word. 3. **Join** the processed words back into a single string with spaces separating them. 4. **Return** the resultant string. # Notes: - The input will only contain alphabetical characters and spaces. - Preserve the order of words as they appear in the input sentence. - Ensure the first letter of each reversed word is in uppercase and the rest are in lowercase. # Example Usage: ```python def reverse_and_capitalize(sentence): # Your code here ```","solution":"def reverse_and_capitalize(sentence): Reverses and capitalizes each word in the given sentence. Parameters: sentence (str): The input sentence composed of words separated by spaces. Returns: str: A new sentence with each word reversed and capitalized. words = sentence.split() processed_words = [word[::-1].capitalize() for word in words] return \\" \\".join(processed_words)"},{"question":"Create a function called `generate_maze_with_turtle` that utilizes the `turtle` graphical library to draw a random maze on a 20x20 grid. The function should take no parameters and include the following steps: 1. Use the `turtle.speed` function to set the drawing speed to the fastest mode. 2. Use the `turtle.delay` function to eliminate any delay in drawing. 3. Initialize the turtle screen to a grid of 400x400 pixels using `turtle.setworldcoordinates`. 4. Use the `turtle.getscreen` method to get the TurtleScreen object and prompt the user for the number of walls using the `textinput` method (input should be between 1 and 50). The function should then create the grid with a random arrangement of walls based on the user\'s input. Use helper functions `draw_wall` and `is_valid_wall` to ensure walls are within bounds and do not overlap: - `draw_wall(start_x, start_y, end_x, end_y)`: Draws a wall from the start coordinates to the end coordinates. - `is_valid_wall(start_x, start_y, end_x, end_y)`: Returns `True` if the wall can be drawn without violating grid limits or overlapping with existing walls, otherwise `False`. Your function should handle edge cases such as ensuring walls do not extend beyond the grid or intersect existing walls improperly. Constraints: 1. Use `turtle.speed` to set the speed to the fastest drawing mode. 2. Use `turtle.delay` to set the drawing delay to zero. 3. Use `turtle.getscreen` to get the TurtleScreen object for user input within valid limits. Write the `generate_maze_with_turtle` function according to the above requirements.","solution":"import turtle import random def draw_wall(start_x, start_y, end_x, end_y): turtle.penup() turtle.goto(start_x * 20, start_y * 20) turtle.pendown() turtle.goto(end_x * 20, end_y * 20) turtle.penup() def is_valid_wall(start_x, start_y, end_x, end_y, walls): if not (0 <= start_x <= 20 and 0 <= start_y <= 20 and 0 <= end_x <= 20 and 0 <= end_y <= 20): return False for wall in walls: if wall == (start_x, start_y, end_x, end_y) or wall == (end_x, end_y, start_x, start_y): return False return True def generate_maze_with_turtle(): turtle.speed(0) turtle.delay(0) turtle.setworldcoordinates(-20, -20, 420, 420) screen = turtle.getscreen() num_walls = int(screen.textinput(\\"Number of Walls\\", \\"Enter number of walls (1-50):\\")) if num_walls < 1 or num_walls > 50: num_walls = 10 walls = [] for _ in range(num_walls): valid_wall = False while not valid_wall: start_x = random.randint(0, 19) start_y = random.randint(0, 19) end_x = start_x + random.choice([-1, 1, 0, 0]) end_y = start_y + random.choice([0, 0, -1, 1]) if is_valid_wall(start_x, start_y, end_x, end_y, walls): draw_wall(start_x, start_y, end_x, end_y) walls.append((start_x, start_y, end_x, end_y)) valid_wall = True turtle.hideturtle() turtle.done()"},{"question":"You are tasked with writing a function named `find_largest_palindromic_substring` that takes a single string as an input and returns the longest palindromic substring within that string. A palindrome is a string that reads the same backward as forward, such as \\"racecar\\" or \\"madam\\". To achieve this, explicitly make use of dynamic programming to optimize the solution. # Function Signature ```python def find_largest_palindromic_substring(s: str) -> str: pass ``` # Example ```python print(find_largest_palindromic_substring(\\"babad\\")) # Output: \\"bab\\" or \\"aba\\" print(find_largest_palindromic_substring(\\"cbbd\\")) # Output: \\"bb\\" ``` # Constraints - The length of the string `s` is between 1 and 1000. - All characters in the string `s` are lowercase English letters. # Detailed Explanation 1. The function should create a 2D list `dp` where `dp[i][j]` will be `True` if the substring `s[i:j+1]` is a palindrome. 2. Initialize the 2D list with `False` values and lengths of 1 (single character palindromes). 3. Iterate over all possible substring lengths (starting from 2), and for each length, iterate over all possible starting indices. 4. For each starting index, determine the ending index and check if the substring is a palindrome, updating the 2D list accordingly. 5. Keep track of the maximum length palindrome found and its starting index. 6. Return the longest palindromic substring using the recorded starting index and length. This function will help understand the use of dynamic programming in optimizing solutions for problems involving substrings and sequential data.","solution":"def find_largest_palindromic_substring(s: str) -> str: n = len(s) if n == 0: return \\"\\" dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for sub-strings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Check if the substring is a palindrome if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True start = i max_length = length return s[start: start + max_length]"},{"question":"You are tasked with creating a function that processes a list of integers representing scores and returns a dictionary containing the highest score, the lowest score, and the average score rounded to two decimal places. Your function should be named `analyze_scores()`. The primary responsibility of this function is to provide useful statistical insights from the input list. To support this behavior, ensure your function correctly computes the required values and formats the average as specified. This task will help you understand basic list manipulation, arithmetic operations, and the usage of Python\'s dictionary data structure. Function Signature: ```python def analyze_scores(scores): pass ``` Example: ```python analyze_scores([98, 87, 93, 85, 92]) # should return {\'highest\': 98, \'lowest\': 85, \'average\': 91.0} ``` Please write the complete implementation for the `analyze_scores()` function.","solution":"def analyze_scores(scores): Processes a list of integers representing scores and returns a dictionary containing the highest score, the lowest score, and the average score rounded to two decimal places. Parameters: scores (list): The list of scores to analyze Returns: dict: A dictionary with keys \'highest\', \'lowest\', and \'average\' if not scores: return {\'highest\': None, \'lowest\': None, \'average\': None} highest = max(scores) lowest = min(scores) average = round(sum(scores) / len(scores), 2) return {\'highest\': highest, \'lowest\': lowest, \'average\': average}"},{"question":"Read data from a JSON file containing a list of dictionaries, normalize the data by ensuring all dictionaries have the same keys, filling missing keys with \'null\'. Then save the normalized data back to a new JSON file. If the input file is not found, raise a FileNotFoundError. The function should output: str: The file path to the newly created JSON file containing the normalized data. You should write self-contained code starting with: ``` import json def normalize_json(input_json_file, output_json_file): ```","solution":"import json from collections import defaultdict def normalize_json(input_json_file, output_json_file): Normalize the data by ensuring all dictionaries in the list have the same keys, filling missing keys with \'null\'. Then save the normalized data back to a new JSON file. Parameters: input_json_file (str): the path to the input JSON file. output_json_file (str): the path to the output JSON file. Returns: str: The file path to the newly created JSON file containing the normalized data. Raises: FileNotFoundError: if the input file is not found. try: with open(input_json_file, \'r\') as file: data = json.load(file) except FileNotFoundError: raise FileNotFoundError(f\\"The file {input_json_file} was not found.\\") # Find all unique keys in data all_keys = set() for entry in data: all_keys.update(entry.keys()) # Create a normalized list of dictionaries normalized_data = [] for entry in data: normalized_entry = defaultdict(lambda: \'null\', entry) normalized_data.append({key: normalized_entry[key] for key in all_keys}) # Write the normalized data to the output file with open(output_json_file, \'w\') as file: json.dump(normalized_data, file, indent=4) return output_json_file"},{"question":"You are given a list of non-negative integers representing the elevation map where the width of each bar is 1. Write a function `trap_water(height)` to return the maximum amount of water that it can trap after raining. The elevation map is represented by a list of integers where each integer represents the height of a bar. # Input: - `height`: A list of non-negative integers representing the elevation map. # Output: - An integer representing the maximum amount of water that can be trapped. # Constraints: 1. The length of the `height` list will be at most 10^4. 2. The height of each bar will be at most 10^5. # Example: ```python height = [0,1,0,2,1,0,1,3,2,1,2,1] # The maximum amount of water that can be trapped is 6. trap_water(height) # should return 6 ``` # Explanation: In the given example, - The water trapped at index 2 is 1 unit. - The water trapped at index 4 is 1 unit. - The water trapped at index 5 is 2 units. - The water trapped at index 6 is 1 unit. - The water trapped at index 9 is 1 unit. The total water trapped is 1+1+2+1+1 = 6 units.","solution":"def trap_water(height): Returns the maximum amount of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"You are working on an application that analyzes user-generated content to detect potential spam messages based on certain characteristics. One task in this process is to identify phrases that often appear in spam messages and calculate their relevance score. To complete this, you need to write a function named `identify_spam_phrases` that takes two arguments: 1. `messages` (a list of strings where each string is a user-generated message), 2. `spam_phrases` (a dictionary where keys are phrases, and values are their respective spam relevance scores). The function should return a dictionary where keys are the messages from the input list, and values are their respective spam scores. A message\'s spam score is determined by summing the relevance scores of the phrases (from the `spam_phrases` dictionary) that appear in the message. If a phrase appears multiple times in a message, its relevance score is added every time it appears. Here’s a step-by-step description of what your function should do: 1. Initialize a result dictionary (`message_scores`) where keys are messages and values are their spam scores (initiate score to 0 initially). 2. For each message: - Initialize its spam score to zero. - For each spam phrase in the `spam_phrases` dictionary: - Check if the phrase appears in the message (case-insensitive). - If it appears, add its relevance score to the message\'s spam score. 3. Return the dictionary with the spam scores of all messages. **Requirements:** - The check for phrase appearance should be case-insensitive. # Example Usage: ```python messages = [ \\"Win a free iPhone now!\\", \\"Don\'t miss this opportunity to earn big.\\", \\"Hello, how are you today?\\", \\"Earn money from home easily.\\" ] spam_phrases = { \\"win\\": 2.0, \\"free\\": 1.5, \\"iphone\\": 3.0, \\"don\'t miss\\": 2.5, \\"opportunity\\": 1.8, \\"earn\\": 2.2, \\"money\\": 3.5, \\"easily\\": 1.0 } scores = identify_spam_phrases(messages, spam_phrases) print(scores) # Example output # {\'Win a free iPhone now!\': 6.5, \\"Don\'t miss this opportunity to earn big.\\": 6.5, \'Hello, how are you today?\': 0.0, \'Earn money from home easily.\': 6.7} ``` # Constraints: - The `messages` input will contain between 1 and 1000 messages. - Each message will contain between 1 and 100 words. - The `spam_phrases` dictionary will have between 1 and 50 unique phrase entries. # Your function signature should be: ```python def identify_spam_phrases(messages: list, spam_phrases: dict) -> dict: ```","solution":"def identify_spam_phrases(messages, spam_phrases): Identifies spam phrases in messages and calculates their relevance score. Args: messages (list): List of user-generated messages (strings). spam_phrases (dict): Dictionary with phrases (keys) and their relevance scores (values). Returns: dict: Dictionary with messages (keys) and their respective spam scores (values). message_scores = {} for message in messages: score = 0.0 lower_message = message.lower() for phrase, relevance in spam_phrases.items(): lower_phrase = phrase.lower() score += lower_message.count(lower_phrase) * relevance message_scores[message] = score return message_scores"},{"question":"You are provided with a list `a` of unique integers and a list `b` also containing unique integers. Your task is to write a function called `merge_sum` that merges the two lists and then returns a new list which is sorted and contains the cumulative sum of the elements. The cumulative sum is defined as a new list where each element at index `i` is the sum of all elements in the merged list from index 0 to `i`, inclusive. Your implementation should efficiently merge the sorted lists and calculate the cumulative sum with a time complexity of O(n). # Function Signature ```python def merge_sum(a, b): # Write your code here ``` # Example ```python a = [1, 3, 5, 7] b = [2, 4, 6, 8] print(merge_sum(a, b)) # Output: [1, 3, 6, 10, 15, 21, 28, 36] a = [10, 15, 20] b = [5, 25, 30] print(merge_sum(a, b)) # Output: [5, 15, 30, 50, 75, 105] ``` # Constraints - Both input lists `a` and `b` are sorted in ascending order and contain unique integers. - The lengths of the lists `a` and `b` are at least one. - The cumulative sum calculation should be efficient with a time complexity of O(n). # Requirements - Efficiently merge the two sorted lists without using built-in sorting functions. - Calculate the cumulative sum after merging the lists.","solution":"def merge_sum(a, b): Merges two sorted lists a and b into a sorted list and returns the cumulative sum of the elements. Parameters: a (list): A sorted list of unique integers. b (list): A sorted list of unique integers. Returns: list: A list containing the cumulative sum of the merged lists. merged = [] i, j = 0, 0 # Merge the two lists while i < len(a) and j < len(b): if a[i] < b[j]: merged.append(a[i]) i += 1 else: merged.append(b[j]) j += 1 # Add remaining elements of a, if any while i < len(a): merged.append(a[i]) i += 1 # Add remaining elements of b, if any while j < len(b): merged.append(b[j]) j += 1 # Calculate the cumulative sum cumulative_sum = [] current_sum = 0 for num in merged: current_sum += num cumulative_sum.append(current_sum) return cumulative_sum"},{"question":"You have been tasked with creating a function that processes a log file containing information about system events. Develop a function named `process_log_file` that reads the log file, performs certain data transformations, and returns a list of event dictionaries. Your function should: 1. Read the log file line by line using the provided path. 2. Each line in the log file has the format: `timestamp|event_type|event_description|event_id`, where: - `timestamp` is a string in the format `YYYY-MM-DD HH:MM:SS` - `event_type` is a string indicating the type of event (e.g., \'INFO\', \'ERROR\') - `event_description` is a string detailing the event - `event_id` is an integer unique to each event 3. Parse each line and create a dictionary for each event with the keys: \'timestamp\', \'event_type\', \'event_description\', and \'event_id\'. 4. Handle any lines that do not adhere to the expected format by skipping them. 5. Sort the list of event dictionaries by the \'timestamp\' key in ascending order. 6. Return the sorted list of event dictionaries. **Function Signature:** ```python from typing import List, Dict def process_log_file(path: str) -> List[Dict[str, str]]: pass ``` **Example Usage:** ```python log_entries = process_log_file(\'path/to/logfile.log\') print(log_entries) ```","solution":"from typing import List, Dict def process_log_file(path: str) -> List[Dict[str, str]]: events = [] with open(path, \'r\') as file: for line in file: parts = line.strip().split(\'|\') if len(parts) != 4: continue # Skip lines that do not have exactly 4 parts timestamp, event_type, event_description, event_id = parts try: event_id = int(event_id) events.append({ \'timestamp\': timestamp, \'event_type\': event_type, \'event_description\': event_description, \'event_id\': event_id, }) except ValueError: continue # Skip lines where event_id is not an integer # Sort the list of events by the \'timestamp\' key events.sort(key=lambda event: event[\'timestamp\']) return events"},{"question":"Given a binary tree, you are tasked with identifying the node that is `k` levels deep and has the maximum value among all nodes at that level. If there are no nodes at the specified level, return `None`. Write a function `max_value_at_level(root: Optional[TreeNode], k: int) -> Optional[int]` that computes the maximum value at the specified level `k`. # Parameters: - `root` (Optional[TreeNode]): The root of the binary tree. A `TreeNode` has attributes `val`, `left`, and `right`. - `k` (int): The level to inspect in the tree (0-indexed). # Returns: - An integer representing the maximum value at level `k` if such a level exists, otherwise `None`. # Constraints: 1. The depth of the binary tree can be large but won\'t exceed 10^4 levels. 2. Each node\'s value is an integer in the range of `-10^5` to `10^5`. 3. The binary tree can be empty, in which case the result should be `None`. # Example: Consider the binary tree: ``` 1 / 2 3 /| | 4 5 6 7 ``` For `k = 2`, the values at this level are `[4, 5, 6, 7]`, and the maximum is `7`. ```python print(max_value_at_level(root, 2)) # Output should be 7 print(max_value_at_level(root, 3)) # Output should be None ``` # Instructions: 1. Implement a breadth-first search (BFS) or depth-first search (DFS) algorithm to traverse the tree level-by-level. 2. Ensure your solution efficiently handles the upper constraints mentioned. # Notes: - Define the `TreeNode` class to facilitate your implementation if not provided. - Handle edge cases such as an empty tree or levels that are beyond the depth of the tree. ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_value_at_level(root: Optional[TreeNode], k: int) -> Optional[int]: if not root: return None from collections import deque queue = deque([(root, 0)]) level_values = [] while queue: node, current_level = queue.popleft() if current_level == k: level_values.append(node.val) elif current_level > k: break if node.left: queue.append((node.left, current_level + 1)) if node.right: queue.append((node.right, current_level + 1)) return max(level_values) if level_values else None ```","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_value_at_level(root: Optional[TreeNode], k: int) -> Optional[int]: if not root: return None from collections import deque queue = deque([(root, 0)]) level_values = [] while queue: node, current_level = queue.popleft() if current_level == k: level_values.append(node.val) elif current_level > k: break if node.left: queue.append((node.left, current_level + 1)) if node.right: queue.append((node.right, current_level + 1)) return max(level_values) if level_values else None"},{"question":"# Overview: In this problem, you are required to parse and analyze a dataset containing user activity logs. Specifically, you will be focusing on calculating the total active time for each user within a given period. This analysis involves identifying active sessions for each user and summing the durations of their activities. # Objective: Write a function called `calculate_user_active_time` which takes a DataFrame as input. This DataFrame contains columns \'userid\', \'start_time\', and \'end_time\'. The function should: 1. Parse the \'start_time\' and \'end_time\' columns into datetime objects. 2. Calculate the duration in seconds for each activity session. 3. Compute the total active time for each user. 4. Return a DataFrame with columns \'userid\' and \'total_active_time\' sorted by \'userid\'. # Function Signature: ```python def calculate_user_active_time(df: pd.DataFrame) -> pd.DataFrame: pass ``` # Input: - `df` (pandas.DataFrame): A DataFrame containing columns \'userid\', \'start_time\', and \'end_time\'. # Output: - A pandas.DataFrame containing columns \'userid\' and \'total_active_time\' sorted by \'userid\'. # Requirements: - Ensure to convert \'start_time\' and \'end_time\' columns to datetime before performing calculations. # Example: Given a DataFrame `df`: ``` userid start_time end_time 0 1 2023-01-01 09:00:00 2023-01-01 09:30:00 1 2 2023-01-01 10:00:00 2023-01-01 10:15:00 2 1 2023-01-01 10:00:00 2023-01-01 10:45:00 3 2 2023-01-01 11:00:00 2023-01-01 11:45:00 4 1 2023-01-02 09:00:00 2023-01-02 09:15:00 ``` Your function should return: ``` userid total_active_time 0 1 5400 1 2 3600 ``` # Note: - Ensure that your calculations are accurate and account for cases where user sessions might overlap or be recorded in different days. - Active time should be summed across all sessions for each user.","solution":"import pandas as pd def calculate_user_active_time(df: pd.DataFrame) -> pd.DataFrame: Calculate the total active time for each user. Parameters: - df (pd.DataFrame): DataFrame containing \'userid\', \'start_time\', and \'end_time\' columns. Returns: - pd.DataFrame: DataFrame with \'userid\' and \'total_active_time\' columns. # Ensure \'start_time\' and \'end_time\' are in datetime format df[\'start_time\'] = pd.to_datetime(df[\'start_time\']) df[\'end_time\'] = pd.to_datetime(df[\'end_time\']) # Calculate duration in seconds df[\'active_duration\'] = (df[\'end_time\'] - df[\'start_time\']).dt.total_seconds() # Sum active durations for each user total_active_time_df = df.groupby(\'userid\')[\'active_duration\'].sum().reset_index() # Rename columns accordingly total_active_time_df.columns = [\'userid\', \'total_active_time\'] # Sort by \'userid\' total_active_time_df = total_active_time_df.sort_values(by=\'userid\').reset_index(drop=True) return total_active_time_df"},{"question":"** Design a function `order_items_by_price` that processes a list of products with their prices and returns the products sorted by their price in ascending order. Additionally, the function should filter out products priced below zero and ensure that the prices are rounded to two decimal places. A product should be represented as a dictionary with the following keys: - \'name\': the name of the product (a string) - \'price\': the price of the product (a float) Your function should: 1. Round prices to two decimal places for each product. 2. Filter out any products priced below zero. 3. Sort the remaining products by their rounded prices in ascending order. 4. Return the sorted list of products with prices after rounding. Assume the input list will be of the format: ```python products = [ {\\"name\\": \\"Product_A\\", \\"price\\": 10.012}, {\\"name\\": \\"Product_B\\", \\"price\\": -5.50}, {\\"name\\": \\"Product_C\\", \\"price\\": 3.499}, ... ] ``` Implement the function `order_items_by_price(products: list) -> list` to accomplish this task. **","solution":"def order_items_by_price(products): Processes a list of products with their prices, rounds prices to two decimal places, filters out any products with a price below zero, sorts the remaining products by prices in ascending order, and returns the sorted list of products. Parameters: products (list): A list of dictionaries, each containing \'name\' and \'price\' keys. Returns: list: A list of dictionaries sorted by their prices in ascending order, with prices rounded to two decimal places. # Round prices and filter out products with price below zero processed_products = [ {\\"name\\": product[\\"name\\"], \\"price\\": round(product[\\"price\\"], 2)} for product in products if product[\\"price\\"] >= 0 ] # Sort products by price in ascending order sorted_products = sorted(processed_products, key=lambda x: x[\\"price\\"]) return sorted_products"},{"question":"The task is to compute the frequency distribution of words in a given text file, ignoring case and punctuation, and save the frequency distribution as a JSON object to a new file. Additionally, identify and output the top 3 most frequent words. The function should output with: dict: A dictionary containing the word frequency distribution. You should write self-contained code starting with: ``` import json import string from collections import Counter def word_frequency(input_file_path: str, output_file_path: str) -> dict: ```","solution":"import json import string from collections import Counter def word_frequency(input_file_path: str, output_file_path: str) -> dict: Computes the frequency distribution of words in a given text file, ignoring case and punctuation. Saves the frequency distribution as a JSON object to a new file. Also identifies and outputs the top 3 most frequent words. Args: input_file_path (str): The path to the input text file. output_file_path (str): The path to the output JSON file. Returns: dict: A dictionary containing the word frequency distribution. # Read the input file with open(input_file_path, \'r\') as file: text = file.read() # Remove punctuation, make text lower case and split into words translator = str.maketrans(\'\', \'\', string.punctuation) words = text.translate(translator).lower().split() # Compute the word frequency distribution word_count = Counter(words) # Save the word frequency to a JSON file with open(output_file_path, \'w\') as outfile: json.dump(word_count, outfile) # Get the top 3 most frequent words top_3_words = word_count.most_common(3) print(f\\"Top 3 most frequent words: {top_3_words}\\") return dict(word_count)"},{"question":"Write a function to compute the n-th Fibonacci number using memoization technique. In this task, you will leverage dictionary data structure to cache intermediate results for efficiency. # Parameters: - `n`: An integer representing the position in the Fibonacci series (1-indexed). # Returns: - An integer representing the n-th Fibonacci number. # Constraints: - The Fibonacci sequence is defined as: - Fibonacci(1) = 0 - Fibonacci(2) = 1 - Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) for n > 2 - 1 ≤ n ≤ 30 # Example: ```python def memoized_fibonacci(n, memo={}): if n in memo: return memo[n] if n == 1: result = 0 elif n == 2: result = 1 else: result = memoized_fibonacci(n-1, memo) + memoized_fibonacci(n-2, memo) memo[n] = result return result # Example Usage print(memoized_fibonacci(10)) # Output: 34 print(memoized_fibonacci(15)) # Output: 377 ``` # Explanation: By using memoization, each Fibonacci number is only computed once and stored in a dictionary. This avoids redundant calculations and significantly speeds up the computation for larger `n`.","solution":"def memoized_fibonacci(n, memo=None): Returns the n-th Fibonacci number using memoization technique. Parameters: n (int): The position in the Fibonacci series (1-indexed). Returns: int: The n-th Fibonacci number. if memo is None: memo = {} if n in memo: return memo[n] if n == 1: result = 0 elif n == 2: result = 1 else: result = memoized_fibonacci(n-1, memo) + memoized_fibonacci(n-2, memo) memo[n] = result return result"},{"question":"Given a list of tuples `sales_data` where each tuple contains two elements: the name of a product (string) and the total sales of that product (integer), write a function named `bar_chart_sales` that generates and displays a bar chart showing the total sales for each product using the `matplotlib` library. Your task is to write the function `bar_chart_sales(sales_data)`, which takes in a list `sales_data` and performs the following steps: 1. Extract the product names and their corresponding sales from the list of tuples. 2. Use the `matplotlib.pyplot.bar` function to create a bar chart where the product names are on the x-axis and the total sales are on the y-axis. 3. Set appropriate labels and titles for the chart to clearly indicate what the bar chart represents. 4. Rotate the x-axis labels for better readability if there are many products. 5. Display the bar chart and include a grid for better clarity. Specifically, you are required to use the `matplotlib.pyplot.bar` function to generate the bar chart. Here is the required function signature: ```python def bar_chart_sales(sales_data): # Your code here ``` **Example:** Given the following list of tuples: ```python sales_data = [ (\'product_a\', 150), (\'product_b\', 300), (\'product_c\', 250), (\'product_d\', 100), (\'product_e\', 200) ] ``` Calling `bar_chart_sales(sales_data)` should produce a bar chart that shows the total sales for each product listed in the `sales_data`.","solution":"import matplotlib.pyplot as plt def bar_chart_sales(sales_data): Generates and displays a bar chart of total sales for each product using matplotlib. Parameters: sales_data (list of tuples): A list where each tuple contains a product name (str) and total sales (int). # Extract product names and their corresponding sales product_names = [product for product, sales in sales_data] total_sales = [sales for product, sales in sales_data] # Create a bar chart plt.figure(figsize=(10, 6)) plt.bar(product_names, total_sales, color=\'blue\') # Set labels and title plt.xlabel(\'Product\') plt.ylabel(\'Total Sales\') plt.title(\'Total Sales by Product\') # Rotate x-axis labels for better readability plt.xticks(rotation=45) # Add grid for clarity plt.grid(axis=\'y\', linestyle=\'--\', linewidth=0.7) # Display the chart plt.tight_layout() plt.show()"},{"question":"Given a list of students with their names and scores in three subjects, implement a function to calculate each student\'s average score and determine the student with the highest average score. The scores in the list can be out of 100, and some scores may be missing, represented by `None`. **Function Name**: `highest_avg_student` **Function Signature**: `def highest_avg_student(students: List[Dict[str, Union[str, int, None]]]) -> str:` **Input**: - `students` (List[Dict[str, Union[str, int, None]]]): A list of dictionaries where each dictionary represents a student and has the keys: - `\'name\'` (str): The name of the student. - `\'subject1\'` (int or None): Score in subject 1. - `\'subject2\'` (int or None): Score in subject 2. - `\'subject3\'` (int or None): Score in subject 3. **Output**: - A string representing the name of the student with the highest average score. **Requirements**: 1. Calculate the average score for each student, ignoring the `None` values. 2. If a student has only `None` scores, treat their average score as 0. 3. Return the name of the student with the highest average score. 4. If multiple students have the highest average score, return the name that comes first alphabetically. **Example Usage**: ```python students = [ {\\"name\\": \\"Alice\\", \\"subject1\\": 85, \\"subject2\\": 92, \\"subject3\\": None}, {\\"name\\": \\"Bob\\", \\"subject1\\": 88, \\"subject2\\": None, \\"subject3\\": 90}, {\\"name\\": \\"Charlie\\", \\"subject1\\": None, \\"subject2\\": 85, \\"subject3\\": 80}, {\\"name\\": \\"David\\", \\"subject1\\": None, \\"subject2\\": None, \\"subject3\\": None}, ] print(highest_avg_student(students)) # Expected output: # \\"Bob\\" ```","solution":"from typing import List, Dict, Union def highest_avg_student(students: List[Dict[str, Union[str, int, None]]]) -> str: def calculate_avg(student): scores = [score for score in (student[\\"subject1\\"], student[\\"subject2\\"], student[\\"subject3\\"]) if score is not None] if scores: return sum(scores) / len(scores) return 0 highest_avg = -1 best_student = None for student in students: avg = calculate_avg(student) if avg > highest_avg or (avg == highest_avg and student[\\"name\\"] < (best_student or \\"\\")): highest_avg = avg best_student = student[\\"name\\"] return best_student"},{"question":"You are provided with a list of URLs and a list of strings containing website content. Your goal is to extract links from the website content and identify which URLs they belong to. The function should return a dictionary where the keys are the given URLs and the values are lists of URLs that were extracted from the corresponding website content. The function you need to implement is `extract_links`. This function should take in two arguments: 1. `urls`: A list of strings where each string is a URL. 2. `contents`: A list of strings where each string contains the HTML content of a website corresponding to the URLs. The function should return a dictionary where: - Each key is a URL from the input list `urls`. - Each value is a list of URLs that were extracted from the respective website content from the `contents` list. # Function Signature: ```python def extract_links(urls: List[str], contents: List[str]) -> Dict[str, List[str]]: pass ``` # Constraints: - Each URL in the `urls` list has a corresponding content in the `contents` list at the same index. - The website content will be a string containing HTML tags. - The URLs extracted from the content will always be absolute URLs starting with `http` or `https`. # Example: ```python urls = [ \\"https://example.com\\", \\"https://anotherexample.com\\" ] contents = [ \'\'\' <html> <body> <a href=\\"https://link1.com\\">Link 1</a> <a href=\\"https://link2.com\\">Link 2</a> </body> </html> \'\'\', \'\'\' <html> <body> <a href=\\"https://anotherlink.com\\">Another Link</a> </body> </html> \'\'\' ] # Function call links = extract_links(urls, contents) # Expected output print(links) # { # \\"https://example.com\\": [\\"https://link1.com\\", \\"https://link2.com\\"], # \\"https://anotherexample.com\\": [\\"https://anotherlink.com\\"] # } ``` # Notes: - You can assume that the HTML content is well-formed. - Each URL in the `contents` list should be surrounded by double quotes and should start with `href=`. - It\'s recommended to use regular expressions (`re` module in Python) to extract URLs from the HTML content. Please write the function `extract_links` to achieve this.","solution":"import re from typing import List, Dict def extract_links(urls: List[str], contents: List[str]) -> Dict[str, List[str]]: Extracts links from the website content and maps them to the URLs they belong to. Args: urls (List[str]): A list of URLs contents (List[str]): A list of HTML content corresponding to the URLs Returns: Dict[str, List[str]]: A dictionary where keys are input URLs and values are lists of extracted URLs. links_dict = {} link_pattern = re.compile(r\'href=\\"(https?://[^\\"]+)\\"\') for url, content in zip(urls, contents): links = re.findall(link_pattern, content) links_dict[url] = links return links_dict"},{"question":"You are tasked with developing a function in Python that analyzes a text file and identifies the most frequently occurring word, along with its frequency count. Specifically: 1. The text file will contain several lines of text. 2. Your function should: - Read the contents of the file. - Normalize the text by converting it to lowercase and stripping out punctuation. - Split the text into individual words. - Identify the word that appears the most frequently. - If there are multiple words with the same highest frequency, return any one of them. - Return a tuple containing the most frequent word and its frequency count. Function signature: ```python def most_frequent_word(file_path: str) -> tuple: ``` - `file_path` - a string representing the path to the text file containing the data. You must use the `collections` library to manage the frequency count of the words. Here is the function signature. Example: Given a text file `example.txt` with the following content: ``` Hello world! This is a test. This test is simple. Hello again, world. This is another test. ``` Output: ```python (\'this\', 3) ```","solution":"import collections import string def most_frequent_word(file_path: str) -> tuple: Returns the most frequently occurring word in the text file along with its frequency count. :param file_path: Path to the text file. :return: A tuple containing the most frequent word and its frequency count. # Read the contents of the file with open(file_path, \'r\') as file: text = file.read() # Normalize the text translator = str.maketrans(\'\', \'\', string.punctuation) normalized_text = text.lower().translate(translator) # Split the text into words words = normalized_text.split() # Count the frequency of each word word_counts = collections.Counter(words) # Find the most frequent word most_frequent = word_counts.most_common(1)[0] # Returns a list of tuples [(word, count)] return most_frequent"},{"question":"You are tasked with writing a function named `get_top_n_products` that takes two arguments: `sales_data` and `n`. The `sales_data` argument is a list of dictionaries representing sales information for various products, and `n` is an integer representing the number of top-selling products to return. Each dictionary in the `sales_data` list contains the following keys: - `\'product_name\'`: a string representing the name of the product. - `\'units_sold\'`: an integer representing the number of units sold for the product. The function should return a list of the top `n` products based on the number of units sold, in descending order. If `n` is greater than the number of unique products in `sales_data`, return all products sorted by units sold. # Function Signature ```python def get_top_n_products(sales_data: list, n: int) -> list: ``` # Example ```python sales_data = [ {\'product_name\': \'ProductA\', \'units_sold\': 150}, {\'product_name\': \'ProductB\', \'units_sold\': 200}, {\'product_name\': \'ProductC\', \'units_sold\': 300}, {\'product_name\': \'ProductD\', \'units_sold\': 250}, {\'product_name\': \'ProductE\', \'units_sold\': 100} ] print(get_top_n_products(sales_data, 3)) ``` Output: ```python [ {\'product_name\': \'ProductC\', \'units_sold\': 300}, {\'product_name\': \'ProductD\', \'units_sold\': 250}, {\'product_name\': \'ProductB\', \'units_sold\': 200} ] ``` # Constraints - The `sales_data` list will contain at least one dictionary. - Each dictionary in the `sales_data` list will contain both `product_name` and `units_sold` keys. - `units_sold` will always be a non-negative integer. - `product_name` will be a non-empty string.","solution":"def get_top_n_products(sales_data, n): Returns a list of top n products based on the number of units sold, in descending order. Parameters: sales_data (list): A list of dictionaries with keys \'product_name\' and \'units_sold\'. n (int): The number of top-selling products to return. Returns: list: A list of dictionaries of the top n products sorted by \'units_sold\' in descending order. # Sort the sales_data based on \'units_sold\' in descending order sorted_data = sorted(sales_data, key=lambda x: x[\'units_sold\'], reverse=True) # Return the top n products return sorted_data[:n]"},{"question":"In this problem, you are required to implement a function named `find_connected_components`. This function will take in one argument, `graph`, which is represented as a dictionary where each key is a node and the corresponding value is a list of nodes connected to that node by an edge. The purpose of this function is to determine and return all the connected components in the graph. A connected component in a graph is a set of nodes such that there is a path between any two nodes in this set, and no node in the set is connected to a node outside the set. # Function Signature ```python def find_connected_components(graph: dict) -> list: ``` # Objective 1. **Initialize tracking structures**: A set to keep track of visited nodes. 2. **Perform a graph traversal**: (using either depth-first search (DFS) or breadth-first search (BFS)) to explore all nodes in each connected component. 3. **Collect connected components**: Each connected component should be represented as a sorted list of nodes, and all such lists should be collected in a list. # Example Usage ```python graph = { 0: [1, 2], 1: [0], 2: [0], 3: [4], 4: [3] } print(find_connected_components(graph)) # Output: [[0, 1, 2], [3, 4]] ``` # Notes 1. Each connected component should be sorted in ascending order before being added to the output list. 2. The nodes in the final output list of connected components should be ordered such that the first node of each component defines the order. 3. Ensure that the solution can handle cases where the input graph is empty.","solution":"def find_connected_components(graph): Returns all the connected components in the given graph. Each connected component is represented as a sorted list of nodes. # Helper function to perform a DFS def dfs(node, visited, component): stack = [node] while stack: curr = stack.pop() if curr not in visited: visited.add(curr) component.append(curr) for neighbor in graph.get(curr, []): if neighbor not in visited: stack.append(neighbor) visited = set() components = [] # Perform DFS for each node for node in graph: if node not in visited: component = [] dfs(node, visited, component) components.append(sorted(component)) return sorted(components, key=lambda x: x[0] if x else float(\'inf\')) # Example usage graph = { 0: [1, 2], 1: [0], 2: [0], 3: [4], 4: [3] } print(find_connected_components(graph)) # Output: [[0, 1, 2], [3, 4]]"},{"question":"You need to write a function named `find_anagrams` which takes two parameters: - `word`: A string representing the word to find anagrams of. - `word_list`: A list of strings representing a collection of words. The function should return a list containing the anagrams of the given `word` found in `word_list`. An anagram is a word or phrase formed by rearranging the characters of the original word, using all the original characters exactly once. The function should be case-insensitive and should ignore spaces and punctuation while determining anagrams. The results in the output list should be in the same order as they appear in `word_list`. **Function Signature:** ```python def find_anagrams(word: str, word_list: list) -> list: pass ``` **Example Usage:** ```python word = \\"listen\\" word_list = [\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"silent\\"] result = find_anagrams(word, word_list) print(result) # Output: [\'inlets\', \'silent\'] ``` **Constraints:** - The input word and word list can include lowercase and uppercase letters. - You can assume the necessary standard library imports, such as `string`, are available.","solution":"import string def find_anagrams(word: str, word_list: list) -> list: def preprocess(w): # Remove spaces and punctuations and convert to lower case return \'\'.join(sorted(c.lower() for c in w if c.isalpha())) word_processed = preprocess(word) return [w for w in word_list if preprocess(w) == word_processed]"},{"question":"You are required to write a function `count_unique_words(text: str) -> int` that takes a string containing multiple words and returns the number of unique words in it. The function should ignore case when determining uniqueness and treat any non-alphabetic characters as word separators (i.e., similar to spaces). **Function Signature:** ```python def count_unique_words(text: str) -> int: ``` Your implementation should: 1. Normalize the text to a consistent case (e.g., lower case). 2. Split the text into words using any non-alphabetic character as a delimiter. 3. Count and return the number of unique words. Example usage and output: ```python print(count_unique_words(\\"Hello, world! Hello... World?\\")) # Output: 2 print(count_unique_words(\\"A man, a plan, a canal, Panama\\")) # Output: 5 ``` **Constraints:** - The input string may contain any ASCII characters. - Words are defined as contiguous alphabetic characters (`a-z` or `A-Z`).","solution":"import re def count_unique_words(text: str) -> int: Returns the number of unique words in the input text. Words are separated by any non-alphabetic characters. :param text: str - input string containing multiple words :return: int - number of unique words # Normalize the text to lower case text = text.lower() # Split the text into words using non-alphabetic characters words = re.findall(r\'b[a-z]+b\', text) # Use a set to count unique words unique_words = set(words) return len(unique_words)"},{"question":"You are tasked with creating a function named `convert_temperature` that converts a given temperature from Fahrenheit to Celsius and Kelvin. The function should accept a single float input, `fahrenheit`, representing the temperature in Fahrenheit, and should return a tuple containing the temperature in both Celsius and Kelvin. The conversion formulas are as follows: - Celsius (C) = (Fahrenheit - 32) * 5 / 9 - Kelvin (K) = Celsius + 273.15 The function should round the calculated Celsius and Kelvin temperatures to two decimal places. **Requirements:** - Implement the function `convert_temperature(fahrenheit: float) -> tuple`. - Use Python\'s built-in `round` function to round the results to two decimal places. Example usage: ```python result = convert_temperature(98.6) # Result should be: (37.0, 310.15) ```","solution":"def convert_temperature(fahrenheit: float) -> tuple: Converts a given temperature from Fahrenheit to Celsius and Kelvin. Parameters: fahrenheit (float): The temperature in Fahrenheit. Returns: tuple: A tuple containing the temperature in Celsius and Kelvin, both rounded to two decimal places. celsius = (fahrenheit - 32) * 5 / 9 kelvin = celsius + 273.15 return round(celsius, 2), round(kelvin, 2)"},{"question":"You need to create a function that implements a simple token-based text processor for a mock programming language. The function will parse and process a given source code string by identifying different tokens such as keywords, identifiers, numbers, and operators. The function must then produce a formatted output detailing the tokens and their categories. Your task is to implement the function `tokenize_code`, which takes a single parameter: - `source_code`: A string containing the source code of the mock programming language. The function should identify the following token types: - Keywords: \'if\', \'else\', \'while\', \'return\', \'function\' - Identifiers: A sequence of alphanumeric characters and underscores, starting with an alphabetic character. - Numbers: Integer or floating-point numbers (e.g., `123`, `4.56`). - Operators: \'+\', \'-\', \'*\', \'/\', \'=\', \'==\', \'<\', \'>\', \'<=\', \'>=\' The function should return a list of tuples, each containing the token and its type in the format: `(token, type)`. Example function signature: ```python def tokenize_code(source_code: str) -> list: pass ``` Example: ```python source_code = \\"function add(x, y) { return x + y; }\\" print(tokenize_code(source_code)) ``` Expected output: ```python [ (\'function\', \'Keyword\'), (\'add\', \'Identifier\'), (\'(\', \'Operator\'), (\'x\', \'Identifier\'), (\',\', \'Operator\'), (\'y\', \'Identifier\'), (\')\', \'Operator\'), (\'{\', \'Operator\'), (\'return\', \'Keyword\'), (\'x\', \'Identifier\'), (\'+\', \'Operator\'), (\'y\', \'Identifier\'), (\';\', \'Operator\'), (\'}\', \'Operator\') ] ``` Ensure that the function handles spaces and other irrelevant characters appropriately, only returning relevant tokens. The mock language does not include comments or multi-character separators within this scope.","solution":"import re def tokenize_code(source_code: str) -> list: keywords = {\'if\', \'else\', \'while\', \'return\', \'function\'} operators = {\'+\', \'-\', \'*\', \'/\', \'=\', \'==\', \'<\', \'>\', \'<=\', \'>=\'} token_specification = [ (\'Keyword\', r\'b(?:if|else|while|return|function)b\'), # Keywords (\'Identifier\', r\'b[a-zA-Z_]w*b\'), # Identifiers (\'Number\', r\'bd+(.d+)?b\'), # Integer or decimal numbers (\'Operator\', r\'+=|==|<=|>=|<|>|=|+|-|/|*|(|)|{|}|;|,\'), # Operators and punctuation (\'Whitespace\', r\'s+\'), # Whitespace ] token_re = \'|\'.join(\'(?P<%s>%s)\' % pair for pair in token_specification) get_token = re.compile(token_re).finditer tokens = [] for mo in get_token(source_code): kind = mo.lastgroup value = mo.group() if kind != \'Whitespace\': tokens.append((value, kind)) return tokens"},{"question":"In this exercise, you will implement a function to calculate the shortest path in a weighted graph using Dijkstra\'s algorithm. This task will help you understand graph traversal techniques and how to efficiently determine the shortest distances between nodes in a graph. You are required to use the following structure: - A graph represented as an adjacency list. Each key in the dictionary represents a node, and its value is a list of tuples, where each tuple consists of a neighboring node and the weight of the edge connecting them. **Function to Implement:** - Name: `shortest_path` - Arguments: `graph` (A dictionary representing the adjacency list of the graph), `start` (The starting node for the shortest path search). - Returns: A dictionary where each key is a node in the graph, and its value is the shortest distance from the `start` node to that node. The function `shortest_path` should perform the following operations: 1. Initialize the distances from the start node to all other nodes as infinity, except for the start node itself which should be 0. 2. Use a priority queue to explore the nodes, updating the shortest distances as smaller distance paths are found. You can assume that the graph is connected and the weights of the edges are non-negative. **Function Signature:** ```python import heapq def shortest_path(graph, start): # Your implementation here pass ``` **Example:** Suppose the following example graph: ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } start = \'A\' distances = shortest_path(graph, start) ``` The variable `distances` should store a dictionary representing the shortest distances from node `A` to all other nodes: ```python { \'A\': 0, \'B\': 1, \'C\': 3, \'D\': 4 } ``` In this example, the shortest distance from `A` to `B` is 1, from `A` to `C` is 3, and from `A` to `D` is 4.","solution":"import heapq def shortest_path(graph, start): # Initialize distances with infinity and set the start node distance to 0 distances = {node: float(\'infinity\') for node in graph} distances[start] = 0 # Use a priority queue to store (distance, node) tuples priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If the extracted distance is greater than already known, skip it if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # If a shorter path is found if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"You are tasked with implementing a function that finds the longest subsequence of numbers in a given list where the difference between consecutive numbers is consistent. The function should return this longest arithmetic subsequence. **Function Signature:** ```python def longest_arith_seq_length(nums: List[int]) -> int: ``` **Parameters:** - `nums` (List[int]): A list of integers. **Returns:** - An integer representing the length of the longest arithmetic subsequence. **Requirements:** - Use a dynamic programming approach to keep track of the length of arithmetic subsequences with different differences. - Consider time and space complexity to ensure the solution is efficient for large inputs. **Example:** ```python nums = [3, 6, 9, 12] longest_arith_seq_length(nums) # Output: 4 nums = [9, 4, 7, 2, 10] longest_arith_seq_length(nums) # Output: 3 nums = [20, 1, 15, 3, 10, 5, 8] longest_arith_seq_length(nums) # Output: 4 ``` **Explanation:** 1. For the first example, the entire list is an arithmetic sequence with a common difference of 3. 2. In the second example, the longest arithmetic subsequence is [4, 7, 10] with a common difference of 3. 3. In the third example, the longest arithmetic subsequence is [20, 15, 10, 5] with a common difference of -5. 4. Track arithmetic subsequences by using a dictionary to map differences to their sequence lengths. 5. Ensure all pairs of elements are considered to find the maximum length arithmetic subsequence. *Note:* Always provide sample inputs and expected outputs to demonstrate the function usage clearly.","solution":"from typing import List def longest_arith_seq_length(nums: List[int]) -> int: if not nums: return 0 n = len(nums) if n == 1: return 1 dp = [{} for _ in range(n)] max_length = 2 for i in range(1, n): for j in range(i): diff = nums[i] - nums[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Create a function that receives a list of integers and returns the longest contiguous subarray that is strictly increasing. If multiple subarrays have the same length, return the first one. The function should return both the subarray and its length. The function should output with: List[int], int: The longest strictly increasing contiguous subarray and its length. You should write self-contained code starting with: ``` def find_longest_increasing_subarray(arr): ```","solution":"def find_longest_increasing_subarray(arr): This function receives a list of integers and returns the longest contiguous subarray that is strictly increasing and its length. If multiple subarrays have the same length, it returns the first one. :param arr: List[int] - a list of integers :return: Tuple[List[int], int] - the longest strictly increasing contiguous subarray and its length if not arr: return [], 0 longest_start = 0 longest_length = 1 current_start = 0 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: if current_length > longest_length: longest_length = current_length longest_start = current_start current_start = i current_length = 1 # Update the longest if the last segment was the longest. if current_length > longest_length: longest_length = current_length longest_start = current_start return arr[longest_start:longest_start + longest_length], longest_length"},{"question":"# Implementing a Custom Decorator for Caching You are required to write a custom Python decorator `cache_results` that adds caching functionality to any function it decorates. This decorator should store the results of the decorated function such that when it is called with the same arguments, it returns the cached result instead of executing the function again. Key points to consider: - The cached values should be stored in a dictionary where the keys are the arguments of the decorated function and the values are the results returned by the function. - The decorator should work on functions with any number of positional and keyword arguments. - If the decorated function is called with new arguments, it should execute and store the result in the cache for future calls. - The cache dictionary should be an attribute of the decorated function. Function Signature: ```python def cache_results(func): ``` Example Usage: ```python @cache_results def expensive_computation(a, b): import time time.sleep(2) # Simulate a time-consuming computation return a + b # First call with arguments (3, 4). This will take some time. result1 = expensive_computation(3, 4) # Second call with the same arguments. This should return immediately. result2 = expensive_computation(3, 4) # Call with new arguments (5, 6). This will take some time again. result3 = expensive_computation(5, 6) ``` In this scenario: - `result1` should take approximately 2 seconds to compute. - `result2` should return immediately, utilizing the cached result. - `result3` should take approximately 2 seconds to compute since it\'s called with a different set of arguments.","solution":"def cache_results(func): cache = {} def wrapper(*args, **kwargs): key = (args, frozenset(kwargs.items())) if key not in cache: cache[key] = func(*args, **kwargs) return cache[key] wrapper.cache = cache return wrapper @cache_results def expensive_computation(a, b): import time time.sleep(2) # Simulate a time-consuming computation return a + b"},{"question":"You are asked to implement a Python function `generatePossibleWords(digits: str) -> List[str]` that generates all possible letter combinations from a string of digits based on the mapping of digits to letters on a traditional phone keypad. The digit-to-letter mapping is as follows: - \'2\': \'abc\' - \'3\': \'def\' - \'4\': \'ghi\' - \'5\': \'jkl\' - \'6\': \'mno\' - \'7\': \'pqrs\' - \'8\': \'tuv\' - \'9\': \'wxyz\' Your function should take a string of digits as input and return a list of all possible letter combinations that the string could represent. The order of the combinations in the output list does not matter. # Example: ```python generatePossibleWords(\'23\') ``` Output: ``` [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ``` # Hints: - If the input string is empty, the function should return an empty list. - You can use recursive backtracking to generate the combinations. # Constraints: - The input string will only contain digits from \'2\' to \'9\'. - The length of the input string will be between 1 and 4, inclusive.","solution":"from typing import List def generatePossibleWords(digits: str) -> List[str]: Given an input string of digits, returns all possible letter combinations based on a traditional phone keypad. if not digits: return [] digit_to_char = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index: int, path: str): if index == len(digits): combinations.append(path) return possible_chars = digit_to_char[digits[index]] for char in possible_chars: backtrack(index + 1, path + char) combinations = [] backtrack(0, \\"\\") return combinations"},{"question":"Design a function `fit_polynomial(X, Y, degree, filename)` to fit a polynomial of a specified degree to provided data points and visually display the fitted polynomial. The function should: 1. Compute a polynomial of the given degree that best fits the provided data points using polynomial regression. 2. Plot this polynomial over a range of x-values using `matplotlib`. 3. Save the plot as an image file with the given filename. For the polynomial regression calculation, you can assume that the function `numpy.polyfit` and `numpy.poly1d` are available to fit the given data points and create the polynomial function. 1. **Function Signature:** ```python def fit_polynomial(X, Y, degree, filename): ... ``` 2. **Arguments:** - `X`: A list of x-coordinates of the data points. - `Y`: A list of y-coordinates of the data points. - `degree`: The degree of the polynomial to fit. - `filename`: The name of the file to save the plot. 3. **Requirements:** - Use `numpy.linspace` to generate a range of x-values from the minimum to the maximum x-coordinate with 200 points. - Use `matplotlib.pyplot.plot` to plot the fitted polynomial curve. - Use `plt.savefig(filename)` to save the plot as an image file with the given filename. # Example: Given `X = [0, 1, 2, 3]`, `Y = [1, 3, 2, 5]`, and `degree = 2`, calling `fit_polynomial(X, Y, degree, \'polynomial_fit.png\')` should generate and save a plot showing a polynomial of degree 2 that best fits these points.","solution":"import numpy as np import matplotlib.pyplot as plt def fit_polynomial(X, Y, degree, filename): Fits a polynomial of a specified degree to provided data points and saves the plot. Parameters: X (list): A list of x-coordinates of the data points. Y (list): A list of y-coordinates of the data points. degree (int): The degree of the polynomial to fit. filename (str): The name of the file to save the plot. # Fit the polynomial coeffs = np.polyfit(X, Y, degree) poly = np.poly1d(coeffs) # Generate x values for plotting the polynomial x_values = np.linspace(min(X), max(X), 200) y_values = poly(x_values) # Plot the data points and the polynomial curve plt.scatter(X, Y, color=\'blue\', label=\'Data Points\') plt.plot(x_values, y_values, color=\'red\', label=f\'Polynomial Fit (degree={degree})\') plt.xlabel(\'X\') plt.ylabel(\'Y\') plt.legend() # Save the plot as an image file plt.savefig(filename) plt.close()"},{"question":"You are given a string `s` consisting of lowercase English letters and you need to determine whether the string can be rearranged to form a palindrome. Write a function `can_form_palindrome(s: str) -> bool` that returns `True` if it is possible to rearrange the characters of `s` to form a palindrome, and `False` otherwise. To achieve this, you should follow these steps: 1. Count the frequency of each character in the string. 2. Check the number of characters that appear an odd number of times. A string can be rearranged into a palindrome if at most one character has an odd frequency (since in a palindrome, at most one character can be in the middle if the length of the string is odd). **Function Specifications:** - **Function Name:** `can_form_palindrome` - **Input:** - `s` (str): The input string consisting of lowercase English letters. - **Output:** A boolean value `True` or `False`. **Example:** ```python result = can_form_palindrome(\\"civic\\") print(result) # Output should be True result = can_form_palindrome(\\"ivicc\\") print(result) # Output should be True result = can_form_palindrome(\\"hello\\") print(result) # Output should be False ``` # Guidelines: - The function should handle strings of any length up to 10^6 characters. - Optimize for time and space complexity where possible.","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count the number of characters that have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"You are required to implement a function `binary_search` that performs a binary search on a sorted list of integers. This function should utilize recursion and must handle both even and odd-length lists effectively. Ensure to consider edge cases such as an empty list or the target element not being present in the list. Function Specification: **Function Name:** `binary_search` **Inputs:** 1. `arr` (list of integers): A sorted list of integers. 2. `low` (integer): The starting index of the section to search within `arr`. 3. `high` (integer): The ending index of the section to search within `arr`. 4. `x` (integer): The target integer to search for. **Output:** - An integer representing the index of `x` in the list `arr` if present; otherwise, returns -1. Requirements: 1. Use recursion to implement the binary search logic. 2. Ensure the function handles edge cases such as an empty list and the target not being found. Example: Input: ```python arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] low = 0 high = len(arr) - 1 x = 5 ``` Output: ```python 4 ``` Explanation: The target 5 is at index 4 in the given sorted list. Implementation template: ```python def binary_search(arr, low, high, x): # BASE CASE: If low index exceeds high index if low > high: return -1 # Compute the middle index mid = (low + high) // 2 # If the element is present at the middle itself if arr[mid] == x: return mid # If element is smaller than mid, then it can only be present in left subarray elif arr[mid] > x: return binary_search(arr, low, mid-1, x) # Else the element can only be present in right subarray else: return binary_search(arr, mid+1, high, x) ```","solution":"def binary_search(arr, low, high, x): Perform a binary search to find the target integer in the sorted list. Args: arr (list): A sorted list of integers. low (int): The starting index of the section to search within arr. high (int): The ending index of the section to search within arr. x (int): The target integer to search for. Returns: int: Index of x in arr if present; otherwise, -1. # BASE CASE: If low index exceeds high index if low > high: return -1 # Compute the middle index mid = (low + high) // 2 # If the element is present at the middle itself if arr[mid] == x: return mid # If element is smaller than mid, then it can only be present in left subarray elif arr[mid] > x: return binary_search(arr, low, mid-1, x) # Else the element can only be present in right subarray else: return binary_search(arr, mid+1, high, x)"},{"question":"You are given a code snippet that defines a class `Graph` used to represent an undirected graph. However, the code is incomplete, missing crucial methods to handle basic graph operations. Your task is to complete this class by implementing the `add_edge(v1: int, v2: int) -> None`, `remove_edge(v1: int, v2: int) -> None`, `has_edge(v1: int, v2: int) -> bool`, and `get_neighbors(v: int) -> List[int]` methods. The graph should be represented using an adjacency list. # Requirements: 1. **Class Name**: `Graph` 2. **Methods**: - `add_edge(v1: int, v2: int) -> None`: Adds an undirected edge between `v1` and `v2`. - `remove_edge(v1: int, v2: int) -> None`: Removes the undirected edge between `v1` and `v2`, if it exists. - `has_edge(v1: int, v2: int) -> bool`: Returns `True` if there is an edge between `v1` and `v2`, otherwise `False`. - `get_neighbors(v: int) -> List[int]`: Returns a list of all vertices that are directly connected to vertex `v`. 3. **Example Usage**: ```python from typing import List class Graph: def __init__(self): self.adj_list = {} def add_edge(self, v1: int, v2: int) -> None: if v1 not in self.adj_list: self.adj_list[v1] = [] if v2 not in self.adj_list: self.adj_list[v2] = [] if v2 not in self.adj_list[v1]: self.adj_list[v1].append(v2) if v1 not in self.adj_list[v2]: self.adj_list[v2].append(v1) def remove_edge(self, v1: int, v2: int) -> None: if v1 in self.adj_list and v2 in self.adj_list[v1]: self.adj_list[v1].remove(v2) if v2 in self.adj_list and v1 in self.adj_list[v2]: self.adj_list[v2].remove(v1) def has_edge(self, v1: int, v2: int) -> bool: return v1 in self.adj_list and v2 in self.adj_list[v1] def get_neighbors(self, v: int) -> List[int]: return self.adj_list[v] if v in self.adj_list else [] # Example usage: g = Graph() g.add_edge(1, 2) g.add_edge(1, 3) g.add_edge(2, 3) print(g.has_edge(1, 2)) # Output: True print(g.get_neighbors(1)) # Output: [2, 3] g.remove_edge(1, 2) print(g.has_edge(1, 2)) # Output: False ``` # Constraints: - Assume vertices are represented by non-negative integers. - Handle cases where vertices or edges do not exist gracefully (e.g., attempting to remove a non-existent edge should not raise an error). - The graph operations should be implemented to run efficiently with respect to time complexity. Ensure your implementation handles edge cases and utilizes Python data structures efficiently.","solution":"from typing import List class Graph: def __init__(self): self.adj_list = {} def add_edge(self, v1: int, v2: int) -> None: if v1 not in self.adj_list: self.adj_list[v1] = [] if v2 not in self.adj_list: self.adj_list[v2] = [] if v2 not in self.adj_list[v1]: self.adj_list[v1].append(v2) if v1 not in self.adj_list[v2]: self.adj_list[v2].append(v1) def remove_edge(self, v1: int, v2: int) -> None: if v1 in self.adj_list and v2 in self.adj_list[v1]: self.adj_list[v1].remove(v2) if v2 in self.adj_list and v1 in self.adj_list[v2]: self.adj_list[v2].remove(v1) def has_edge(self, v1: int, v2: int) -> bool: return v1 in self.adj_list and v2 in self.adj_list[v1] def get_neighbors(self, v: int) -> List[int]: return self.adj_list[v] if v in self.adj_list else []"},{"question":"You are given a sequence of integers `nums` and an integer `target`. Your task is to implement a function `count_subarrays` in Python that finds the number of contiguous subarrays within `nums` where the product of the elements in each subarray is less than the given `target`. The function should return an integer representing the count of such subarrays. The function signature should be: ```python def count_subarrays(nums, target): Count the number of contiguous subarrays where the product of the elements is less than the target. Parameters: - nums: list of integers - target: integer Returns: - count: integer representing the number of contiguous subarrays with product less than target pass ``` **Example:** ```python nums = [10, 5, 2, 6] target = 100 print(count_subarrays(nums, target)) # Output: 8 ``` **Notes:** - The function should handle edge cases such as when `nums` is empty or when no subarray meets the criteria. - Ensure the function is efficient to handle larger lists of up to 10^5 elements. - The product of elements in a subarray should be computed without encountering overflow errors.","solution":"def count_subarrays(nums, target): Count the number of contiguous subarrays where the product of the elements is less than the target. Parameters: - nums: list of integers - target: integer Returns: - count: integer representing the number of contiguous subarrays with product less than target if target <= 1: return 0 product = 1 left = 0 count = 0 for right in range(len(nums)): product *= nums[right] while product >= target: product //= nums[left] left += 1 count += (right - left + 1) return count"},{"question":"Your task is to implement a function `manage_inventory` that handles basic inventory management for a retail store. This exercise will help you practice working with dictionaries and common operations like adding new items, updating existing ones, and removing items. # Context: You have a dictionary `inventory` that stores items in the store, where each key is the item name (a string) and each value is another dictionary with two keys: `price` and `quantity`. # Task: Write a function `manage_inventory(inventory, operations)` that will: 1. Iterate through a list of tuples `operations`, where each tuple represents an operation to be performed on the inventory. Each tuple has three elements: the operation type (a string), the item name (a string), and a details dictionary with either the `price` and `quantity` keys or only the `quantity` key depending on the operation. 2. The function should support three types of operations: - `\\"add\\"`: Adds a new item to the inventory or updates the price and quantity of an existing item. - `\\"update\\"`: Updates the quantity of an existing item. - `\\"remove\\"`: Removes an item from the inventory. 3. After processing all operations, the function should return the updated inventory. # Function Signature: ``` def manage_inventory(inventory: dict, operations: list) -> dict: ``` # Requirements: - Handle adding new items and updating existing items with the `\\"add\\"` operation. - Handle updating the quantity of existing items with the `\\"update\\"` operation. - Handle removing items with the `\\"remove\\"` operation. - Return the updated inventory after all operations are performed. # Example: ```python inventory = { \'apple\': {\'price\': 0.5, \'quantity\': 10}, \'banana\': {\'price\': 0.2, \'quantity\': 25} } operations = [ (\'add\', \'orange\', {\'price\': 0.3, \'quantity\': 20}), (\'update\', \'apple\', {\'quantity\': 5}), (\'remove\', \'banana\', {}) ] result = manage_inventory(inventory, operations) ``` Output: ```python { \'apple\': {\'price\': 0.5, \'quantity\': 15}, \'orange\': {\'price\': 0.3, \'quantity\': 20} } ```","solution":"def manage_inventory(inventory, operations): Manage the inventory by performing a list of operations. Args: - inventory (dict): The initial inventory dictionary. - operations (list): A list of operations to perform. Returns: - dict: The updated inventory. for operation in operations: op_type, item, details = operation if op_type == \'add\': if item in inventory: inventory[item][\'price\'] = details[\'price\'] inventory[item][\'quantity\'] += details[\'quantity\'] else: inventory[item] = details elif op_type == \'update\': if item in inventory: inventory[item][\'quantity\'] += details[\'quantity\'] elif op_type == \'remove\': if item in inventory: del inventory[item] return inventory"},{"question":"Create a function that simulates the rolling of two dice 10,000 times and plots the resulting sums using Matplotlib. The plot should display: - A histogram of the sums with 11 bins (since the possible sums range from 2 to 12). - Appropriate labels for the x-axis (\\"Sum of Dice\\") and y-axis (\\"Frequency\\"). The function should output: Tuple: A tuple containing the list of sums from each roll and the bin edges from the histogram plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def roll_dice_simulation(): ```","solution":"import numpy as np import matplotlib.pyplot as plt def roll_dice_simulation(): Simulates the rolling of two six-sided dice 10,000 times and plots the resulting sums as a histogram. Also returns a tuple containing the list of sums and the bin edges. np.random.seed(0) rolls = np.random.randint(1, 7, (10000, 2)) sums = np.sum(rolls, axis=1) # Plot histogram plt.hist(sums, bins=np.arange(2, 14)-0.5, edgecolor=\'black\') plt.xlabel(\'Sum of Dice\') plt.ylabel(\'Frequency\') plt.title(\'Histogram of Dice Sums\') plt.grid(True) plt.show() # Retrieve the bin edges counts, bin_edges = np.histogram(sums, bins=np.arange(2, 14)-0.5) return sums.tolist(), bin_edges.tolist()"},{"question":"Given a list of integers, write a function that finds all unique triplets in the list which give the sum of zero. The solution set must not contain duplicate triplets. You need to implement the function `three_sum(nums: List[int]) -> List[List[int]]`. # Function Signature ```python def three_sum(nums: List[int]) -> List[List[int]]: ... ``` # Input - `nums` (List[int]): A list of integers. # Output - `List[List[int]]`: A list of unique triplets, each triplet being a list of integers `[a, b, c]`, that satisfy the condition `a + b + c = 0`. # Example ```python input_nums = [-1, 0, 1, 2, -1, -4] result = three_sum(input_nums) print(result) ``` Expected Output: ``` [[-1, -1, 2], [-1, 0, 1]] ``` # Requirements: - You must return unique triplets only. - The order of the triplets and the order of elements within each triplet does not matter. - Optimize the solution to have a better time complexity than O(n^3). # Additional Constraints: - `0 <= len(nums) <= 3000` - `-10^5 <= nums[i] <= 10^5` # Function Explanation The main goal is to find all unique triplets in the list which sum up to zero. The approach involves sorting the input list first and then using a three-pointer technique to find the triplets efficiently. Sorting helps in easily avoiding duplicates and allows applying the two-pointer method for finding pairs that sum to a specific value. This problem will test your ability to handle nested loops, use sorting to simplify the problem, and apply the two-pointer technique to optimize what would otherwise be a brute-force solution.","solution":"from typing import List def three_sum(nums: List[int]) -> List[List[int]]: nums.sort() triplets = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicate continue left, right = i + 1, n - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: triplets.append([nums[i], nums[left], nums[right]]) # Skip duplicates for left pointer while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicates for right pointer while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return triplets"},{"question":"In this problem, you are required to write a Python function named `find_order_of_courses` that determines the order in which a student should take a series of prerequisite-based courses. This is a classic topological sorting problem, and you will leverage the adjacency list representation of a graph to solve it. Here are the steps to implement the function: 1. Create a graph using an adjacency list where each node represents a course, and each directed edge represents a prerequisite relationship. 2. Perform topological sorting to determine the order in which to take the courses. # Function Signature ```python def find_order_of_courses(num_courses, prerequisites): ``` # Parameters - `num_courses`: Integer representing the total number of courses. - `prerequisites`: List of pairs [a, b], where `b` is a prerequisite for course `a`. # Returns - `List[int]`: A list representing the order of courses to be taken. If there are multiple valid orders, you can return any. If there is no possible order due to a cycle, return an empty list. # Example ```python num_courses = 4 prerequisites = [[1, 0], [2, 1], [3, 2]] order = find_order_of_courses(num_courses, prerequisites) print(order) # Should print a valid ordered list like [0, 1, 2, 3], or raise ValueError if no topological ordering exists. ``` # Requirements - You should use data structures like graphs and queues to manage the topological sorting. - Ensure that your solution accounts for the possibility of cycles and handles them appropriately by returning an empty list. # Hint - Utilize the Kahn\'s algorithm for topological sorting which uses in-degrees of nodes.","solution":"from collections import deque, defaultdict def find_order_of_courses(num_courses, prerequisites): Determine the order of courses to take based on prerequisites. Parameters: - num_courses: Integer, total number of courses (labeled from 0 to num_courses-1) - prerequisites: List of pairs [a, b], where b is a prerequisite for course a Returns: - List[int] representing the order of courses to be taken. If no such order exists due to a cycle, return an empty list. # Initialize the graph and in-degree array graph = defaultdict(list) in_degree = [0] * num_courses # Build the graph and populate in-degrees for course, prereq in prerequisites: graph[prereq].append(course) in_degree[course] += 1 # Initialize a queue with all courses having zero in-degree zero_in_degree_queue = deque([i for i in range(num_courses) if in_degree[i] == 0]) # List to store the result order = [] # Perform topological sort while zero_in_degree_queue: current_course = zero_in_degree_queue.popleft() order.append(current_course) for next_course in graph[current_course]: in_degree[next_course] -= 1 if in_degree[next_course] == 0: zero_in_degree_queue.append(next_course) # If we managed to order all the courses, return the order if len(order) == num_courses: return order else: # Otherwise, there is a cycle, return an empty list return []"},{"question":"You are given a sequence of integers that represent grades of students. Your task is to write a function that applies a curve to the grades such that the highest grade becomes 100 and all other grades are adjusted proportionally. The final grades should all be integers. # Your Task Write a function `curve_grades` that takes the following parameter: - `grades`: A list of integers representing grades before the curve is applied. The function should return a list of integers representing the curved grades. The highest grade in the curved list must be 100, and all other grades should maintain their relative scaling. If the input list is empty, return an empty list. ```python def curve_grades(grades): Apply a curve to the grades so that the highest grade is 100 and other grades are adjusted proportionally. Parameters ---------- grades : list of int A list of grades to be curved Returns ------- list of int A list of curved grades # Your implementation here pass ``` # Example Usage ```python grades = [70, 80, 90, 85, 75] curved_grades = curve_grades(grades) print(curved_grades) ``` # Expected Output For the provided `grades`, the function should return a list of the curved grades where the highest grade is 100 and all other grades are scaled accordingly. ```python [77, 88, 100, 94, 83] ``` # Requirements - Validate that the input list `grades` contains only integers. - Ensure that the output grades are integers. - Handle edge cases such as an empty input list.","solution":"def curve_grades(grades): Apply a curve to the grades so that the highest grade is 100 and other grades are adjusted proportionally. Parameters ---------- grades : list of int A list of grades to be curved Returns ------- list of int A list of curved grades if not grades: return [] max_grade = max(grades) if max_grade == 0: return [0] * len(grades) curved_grades = [(grade * 100) // max_grade for grade in grades] return curved_grades"},{"question":"You are required to design a function that takes a list of strings and combines them into a single string where each word is separated by a space. However, the function should also ensure that no consecutive spaces are present in the final string if the input strings contain trailing or leading spaces. # Requirements: 1. **Function Name**: `combine_strings` 2. **Input**: - `str_list`: A list of strings. 3. **Output**: - A single string where each word is separated by a single space. 4. Ensure that the function removes any leading or trailing spaces from the individual strings before combining them. 5. The function should handle an empty list and return an empty string if the input list is empty. # Example: ```python str_list = [\\" Hello\\", \\"world \\", \\" this is\\", \\" a test \\"] result = combine_strings(str_list) print(result) ``` Expected Output: ```python \\"Hello world this is a test\\" ``` This problem focuses on string manipulation in Python, requiring attention to detail in processing and combining strings correctly without introducing unnecessary spaces.","solution":"def combine_strings(str_list): Combines a list of strings into a single string with each word separated by a space. Removes any leading or trailing spaces from the individual strings. # Strip leading/trailing spaces from each string and filter out any empty strings cleaned_list = [s.strip() for s in str_list if s.strip()] # Join the cleaned strings with a single space combined_string = \' \'.join(cleaned_list) return combined_string"},{"question":"Develop a function that fetches and prints the current weather for a specified city using the OpenWeatherMap API. The API key should be stored in an environment variable. The function should output a dictionary containing the city\'s name, temperature in Celsius, humidity, and weather description. Your code should start with: ``` import os import requests def get_weather(city_name): ```","solution":"import os import requests def get_weather(city_name): Fetches and returns the current weather for a specified city using the OpenWeatherMap API. Args: city_name (str): The name of the city to fetch the weather for. Returns: dict: A dictionary containing the city\'s name, temperature in Celsius, humidity, and weather description. api_key = os.getenv(\\"OPENWEATHERMAP_API_KEY\\") base_url = \\"http://api.openweathermap.org/data/2.5/weather\\" params = { \'q\': city_name, \'appid\': api_key, \'units\': \'metric\' } response = requests.get(base_url, params=params) if response.status_code == 200: data = response.json() weather_info = { \'city\': data[\'name\'], \'temperature\': data[\'main\'][\'temp\'], \'humidity\': data[\'main\'][\'humidity\'], \'description\': data[\'weather\'][0][\'description\'] } return weather_info else: return None"},{"question":"You are provided with sales data of a store over a year, and your task is to calculate monthly sales statistics using the `pandas` library. Specifically, you need to write a function `monthly_sales_summary` that takes a DataFrame with daily sales data and returns a DataFrame containing the total and average sales for each month. The provided function signature is: ```python def monthly_sales_summary(df): ``` where: - `df` is a pandas DataFrame containing two columns: \'date\' (with datetime values) and \'sales\' (with sales amounts as floats). The returned DataFrame should have three columns: - \'month\' (formatted as \'YYYY-MM\'), - \'total_sales\' (sum of sales for the month), - \'average_sales\' (average sales per day for the month). Use the following methods from the `pandas` module: - `pd.to_datetime` to ensure the \'date\' column is in datetime format, - `DataFrame.groupby` to group data by month, - `DataFrame.agg` to compute total and average sales. **Example Usage:** ```python import pandas as pd data = { \'date\': [\'2023-01-01\', \'2023-01-02\', \'2023-02-01\', \'2023-02-02\', \'2023-02-03\'], \'sales\': [150.0, 200.0, 300.0, 250.0, 100.0] } df = pd.DataFrame(data) summary_df = monthly_sales_summary(df) print(summary_df) ``` **Expected Output:** ``` month total_sales average_sales 0 2023-01 350.0 175.000000 1 2023-02 650.0 216.666667 ```","solution":"import pandas as pd def monthly_sales_summary(df): # Ensure the \'date\' column is in datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Extract the month in \'YYYY-MM\' format df[\'month\'] = df[\'date\'].dt.to_period(\'M\').astype(str) # Group by the month and aggregate total and average sales grouped = df.groupby(\'month\')[\'sales\'].agg(total_sales=\'sum\', average_sales=\'mean\').reset_index() return grouped"},{"question":"You are tasked with creating a function that processes a list of integers to categorize them into three lists based on their divisibility by 2, 3, or neither. The function will return a dictionary with keys \'Divisible by 2\', \'Divisible by 3\', and \'Neither\', corresponding to the lists of integers that fall into each category. # Requirements: 1. **Function Name**: `categorize_integers` 2. **Parameters**: - `int_list`: A list of integers to be categorized. # Function Responsibilities: - The function should iterate over the list of integers and classify each number into one of the three categories: - `Divisible by 2`: Integers that are divisible by 2. - `Divisible by 3`: Integers that are divisible by 3 but not by 2. - `Neither`: Integers that are neither divisible by 2 nor by 3. - Return a dictionary with three keys (\'Divisible by 2\', \'Divisible by 3\', and \'Neither\') and corresponding lists of integers. # Example Usage: ```python # Example list of integers integers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15] # Usage of the function result = categorize_integers(integers) print(result) # Expected Output: # { # \'Divisible by 2\': [2, 4, 6, 8, 10, 12, 14], # \'Divisible by 3\': [3, 9, 15], # \'Neither\': [1, 5, 7] # } ```","solution":"def categorize_integers(int_list): Categorizes a list of integers into three lists based on their divisibility by 2, 3, or neither. Parameters: int_list (list): A list of integers to be categorized. Returns: dict: A dictionary with keys \'Divisible by 2\', \'Divisible by 3\', and \'Neither\'. divisible_by_2 = [] divisible_by_3 = [] neither = [] for number in int_list: if number % 2 == 0: divisible_by_2.append(number) elif number % 3 == 0: divisible_by_3.append(number) else: neither.append(number) return { \'Divisible by 2\': divisible_by_2, \'Divisible by 3\': divisible_by_3, \'Neither\': neither }"},{"question":"You are required to write a function that identifies the longest contiguous subsequence of distinct integers in a given list. The function should optimize for performance and handle large datasets efficiently. # Function Details Implement a function named `longest_distinct_subsequence` that takes a list of integers as input and returns the length of the longest subsequence where all elements are distinct. - A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Input - A list `numbers` containing `n` integers, where `1 <= n <= 10^5`. # Output - A single integer representing the length of the longest contiguous subsequence with all distinct elements. # Examples 1. For `numbers = [1, 3, 5, 3, 1, 5, 7]`, the function should return `4` (the subsequence `[3, 1, 5, 7]`). 2. For `numbers = [1, 1, 1, 1]`, the function should return `1` (the subsequence `[1]`). 3. For `numbers = [2, 2, 2, 3, 4, 5, 5, 6]`, the function should return `4` (the subsequence `[3, 4, 5, 6]`). # Requirements - Ensure that your function is efficient and can handle large input sizes within a reasonable time complexity. - Your function should be named `longest_distinct_subsequence`.","solution":"def longest_distinct_subsequence(numbers): Finds the length of the longest contiguous subsequence with all distinct elements. last_seen = {} max_length = 0 start = 0 for end, number in enumerate(numbers): if number in last_seen: start = max(start, last_seen[number] + 1) last_seen[number] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You need to write a function `generate_histogram` that takes a list of integers and displays a histogram based on the frequencies of these integers. The histogram should be displayed as a series of lines, where each line represents a unique integer in the list followed by a colon and the corresponding number of asterisks (`*`). Each asterisk represents a single instance of that integer in the list. The integers should be displayed in ascending order. Your function should follow this format: - Iteratively count the occurrences of each unique integer in the list. - Display each integer and the corresponding histogram line. **Function Signature:** ```python def generate_histogram(numbers: list[int]) -> None: pass ``` **Input:** - The function `generate_histogram` takes a single argument: - `numbers` (list): A list of integers for which the histogram is to be generated. **Output:** - The function should print the histogram directly to the console. **Example:** ```python generate_histogram([1, 4, 2, 2, 5, 3, 3, 3]) # Expected Output: # 1: * # 2: ** # 3: *** # 4: * # 5: * ``` Use appropriate data structures and algorithms to ensure the function handles inefficient use cases gracefully. For example, consider what happens with very large lists or very large ranges of integers.","solution":"def generate_histogram(numbers: list[int]) -> None: Given a list of integers, generates and prints a histogram based on the frequencies of these integers. Each line in the output contains an integer followed by a colon and a number of asterisks corresponding to its count in the list. from collections import Counter # Count the occurrences of each integer counter = Counter(numbers) # Sort the integers in ascending order and print the histogram for number in sorted(counter): print(f\\"{number}: {\'*\' * counter[number]}\\")"},{"question":"You are tasked with writing a Python function `rotate_2d_vector(vector, angle)` that rotates a 2-dimensional vector by a given angle. The function should use trigonometric functions from the `math` library to perform the rotation. The function should take the following parameters: - `vector`: A list or tuple of two floating-point numbers representing the x and y coordinates of the vector. - `angle`: A floating-point number representing the angle of rotation in degrees. The function should perform the following steps: 1. Convert the angle from degrees to radians using the `math.radians` function. 2. Calculate the rotated coordinates using the rotation matrix: [ text{new_x} = text{vector}[0] times cos(text{angle_radians}) - text{vector}[1] times sin(text{angle_radians}) ] [ text{new_y} = text{vector}[0] times sin(text{angle_radians}) + text{vector}[1] times cos(text{angle_radians}) ] 3. Return a tuple with the new x and y coordinates. Write the function to handle edge cases, such as an angle of 0 degrees (which should return the original vector), and ensure the function performs correctly for negative angles as well.","solution":"import math def rotate_2d_vector(vector, angle): Rotates a 2D vector by a given angle in degrees. :param vector: A list or tuple with two elements representing the x and y coordinates of the vector. :param angle: A floating point number representing the angle of rotation in degrees. :return: A tuple with the new x and y coordinates after the rotation. angle_radians = math.radians(angle) new_x = vector[0] * math.cos(angle_radians) - vector[1] * math.sin(angle_radians) new_y = vector[0] * math.sin(angle_radians) + vector[1] * math.cos(angle_radians) return (new_x, new_y)"},{"question":"You are assigned to create a function named `merge_sorted_arrays` which merges multiple sorted arrays into a single sorted array. The function should take a list of sorted arrays and return a single sorted array containing all the elements from the input arrays. The function `merge_sorted_arrays` should take one argument: 1. `sorted_arrays` (List[List[int]]): A list of sorted arrays. The function should return a single sorted array containing all the elements from the input arrays. Your task is to implement the `merge_sorted_arrays` function, with the following signature: ```python def merge_sorted_arrays(sorted_arrays: List[List[int]]) -> List[int]: pass ``` **Input:** - `sorted_arrays` is a list of lists, where each inner list contains sorted integers. **Output:** - A list of integers that merges all elements from the input arrays in sorted order. **Example:** ```python # Example usage: result = merge_sorted_arrays([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) print(result) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] result = merge_sorted_arrays([[1, 3, 5], [2, 4, 6]]) print(result) # Output: [1, 2, 3, 4, 5, 6] result = merge_sorted_arrays([[], [1], [2, 3]]) print(result) # Output: [1, 2, 3] ``` # Requirements: 1. The function must handle empty sub-arrays. 2. The input arrays are guaranteed to be sorted in non-decreasing order. 3. The resulting array must be in non-decreasing order.","solution":"from heapq import merge from typing import List def merge_sorted_arrays(sorted_arrays: List[List[int]]) -> List[int]: Merges multiple sorted arrays into a single sorted array. Args: sorted_arrays (List[List[int]]): A list of sorted arrays. Returns: List[int]: A single sorted array containing all elements from the input arrays. return list(merge(*sorted_arrays))"},{"question":"Create a function that processes a list of integers and returns a dictionary with the following information: 1. The number of even integers. 2. The number of odd integers. 3. The sum of the even integers. 4. The sum of the odd integers. 5. A list of unique integers sorted in ascending order. The function must handle empty lists gracefully by returning zero for counts and sums, and an empty list for the unique integers. You should include debug-level logs to trace the list\'s initial state and the steps of the processing. Your function should output with: dict: A dictionary with keys \\"even_count\\", \\"odd_count\\", \\"even_sum\\", \\"odd_sum\\", and \\"unique_sorted\\". You should write self-contained code starting with: ``` import logging def process_integers(int_list): ```","solution":"import logging logging.basicConfig(level=logging.DEBUG) def process_integers(int_list): Processes a list of integers and returns the number of evens and odds, their sums, and a sorted list of unique integers. :param int_list: List of integers :return: Dictionary with information about even and odd integers and unique sorted list even_count = 0 odd_count = 0 even_sum = 0 odd_sum = 0 unique_sorted = sorted(set(int_list)) logging.debug(f\\"Initial List: {int_list}\\") logging.debug(f\\"Unique Sorted List: {unique_sorted}\\") for num in int_list: if num % 2 == 0: even_count += 1 even_sum += num else: odd_count += 1 odd_sum += num result = { \\"even_count\\": even_count, \\"odd_count\\": odd_count, \\"even_sum\\": even_sum, \\"odd_sum\\": odd_sum, \\"unique_sorted\\": unique_sorted } logging.debug(f\\"Result: {result}\\") return result"},{"question":"You are developing a simple report generation function for a warehouse management system. This function will summarize the stock levels of various products and provide insights on which products need restocking. Your task is to write a function named `generate_stock_report` that performs the following: 1. Accepts a dictionary `stock_levels` where the keys are product names (strings) and the values are current stock levels (integers). 2. Iterates through the dictionary to identify products that have a stock level less than or equal to a restock threshold (`threshold`). 3. Generates and returns a list of product names that need restocking. Assume the threshold value is provided as an additional argument to the function. Here is the prototype of the function you need to implement: ```python def generate_stock_report(stock_levels, threshold): # Your implementation here ``` Example: ```python # Input stock_levels = {\\"apples\\": 50, \\"bananas\\": 20, \\"oranges\\": 5, \\"mangoes\\": 0, \\"pears\\": 10} threshold = 10 # Function call restock_list = generate_stock_report(stock_levels, threshold) # Output print(restock_list) # Output should be: [\'oranges\', \'mangoes\', \'pears\'] ```","solution":"def generate_stock_report(stock_levels, threshold): Returns a list of product names that need restocking. Parameters: stock_levels (dict): A dictionary where the keys are product names and the values are current stock levels. threshold (int): The stock level threshold to determine if restocking is needed. Returns: list: A list of product names that need restocking. return [product for product, level in stock_levels.items() if level <= threshold]"},{"question":"You are required to develop a function named `calculate_statistics` that processes a DataFrame containing sales data and computes several statistics related to the sales performance. The purpose of this problem is to practice the usage of the `pandas` library, focusing on data manipulation and basic statistical analysis. The function `calculate_statistics` should take one argument: 1. `sales_data` (pd.DataFrame): A DataFrame containing sales data with at least the following columns: - `Product`: The product name. - `Sales`: The sales amount for the corresponding product. The function should return a dictionary containing the following statistics: - `total_sales`: The sum of all sales amounts. - `mean_sales`: The mean (average) sales amount. - `max_sales`: The maximum sales amount. - `min_sales`: The minimum sales amount. - `product_with_max_sales`: The product that has the maximum sales amount. - `product_with_min_sales`: The product that has the minimum sales amount. **Instructions:** 1. Calculate the total sales by summing up the values in the `Sales` column. 2. Compute the mean sales amount using the appropriate aggregate function. 3. Identify the maximum and minimum sales amounts. 4. Determine the products corresponding to the maximum and minimum sales. 5. Construct and return the dictionary with the calculated statistics. **Hints:** - Use `pandas.DataFrame.sum` to calculate the total sales. - Use `pandas.DataFrame.mean` to compute the average sales amount. - Use `pandas.DataFrame.idxmax` and `pandas.DataFrame.idxmin` to find the indices of the maximum and minimum values. - Access the product names using the indices returned by `idxmax` and `idxmin`. ```python import pandas as pd def calculate_statistics(sales_data): # Your code here ``` Your goal is to correctly implement the `calculate_statistics` function. For testing purposes, assume that the DataFrame provided will contain at least the \'Product\' and \'Sales\' columns as specified.","solution":"import pandas as pd def calculate_statistics(sales_data): Processes a DataFrame containing sales data and computes several statistics related to the sales performance. Parameters: sales_data (pd.DataFrame): A DataFrame containing sales data with columns \'Product\' and \'Sales\'. Returns: dict: A dictionary containing the required sales statistics. total_sales = sales_data[\'Sales\'].sum() mean_sales = sales_data[\'Sales\'].mean() max_sales = sales_data[\'Sales\'].max() min_sales = sales_data[\'Sales\'].min() product_with_max_sales = sales_data.loc[sales_data[\'Sales\'].idxmax(), \'Product\'] product_with_min_sales = sales_data.loc[sales_data[\'Sales\'].idxmin(), \'Product\'] return { \'total_sales\': total_sales, \'mean_sales\': mean_sales, \'max_sales\': max_sales, \'min_sales\': min_sales, \'product_with_max_sales\': product_with_max_sales, \'product_with_min_sales\': product_with_min_sales }"},{"question":"You are required to write a function called `word_count_per_file` that reads multiple text files and counts the occurrences of each word across all files. The function will take a list of file paths, read each file\'s content, and update a dictionary where the keys are the words and the values are the counts of those words across all provided files. Words should be case-insensitive, meaning \'Python\' and \'python\' should be counted as the same word. Any non-alphabetic characters in words should be stripped out. You can assume that words are separated by whitespace in the files. Your task is to: 1. Implement the `word_count_per_file` function. 2. Use appropriate file handling and string manipulation techniques. 3. Ensure that the function returns a dictionary with the correct word counts. **Function Signature:** ```python def word_count_per_file(file_paths: List[str]) -> Dict[str, int]: ``` **Example:** Given files `file1.txt` with content \\"Hello World! Python programming is fun. Fun to learn Python.\\" and `file2.txt` with content \\"Hello again, Python learners. Learn and practice Python.\\", the function should produce the following dictionary: ```python { \\"hello\\": 2, \\"world\\": 1, \\"python\\": 4, \\"programming\\": 1, \\"is\\": 1, \\"fun\\": 2, \\"to\\": 1, \\"learn\\": 2, \\"again\\": 1, \\"learners\\": 1, \\"and\\": 1, \\"practice\\": 1 } ``` You can assume the file paths list will not be empty and that the files exist and are readable.","solution":"import re from typing import List, Dict def word_count_per_file(file_paths: List[str]) -> Dict[str, int]: word_count = {} word_pattern = re.compile(r\'bw+b\') # Matches words containing only alphanumeric characters and underscores for file_path in file_paths: with open(file_path, \'r\', encoding=\'utf-8\') as file: content = file.read().lower() words = word_pattern.findall(content) for word in words: word = re.sub(r\'[^a-z]\', \'\', word) # Strip out non-alphabetic characters if word: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"This function takes a list of integers and returns the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. The function should output: int: The length of the longest subarray. You should write self-contained code starting with: ``` def longest_subarray(arr: list) -> int: ```","solution":"def longest_subarray(arr: list) -> int: if not arr: return 0 longest = 0 current_start = 0 while current_start < len(arr): number_count = {arr[current_start]: 1} current_end = current_start + 1 while current_end < len(arr): if abs(arr[current_end] - arr[current_start]) > 1: break if arr[current_end] in number_count: number_count[arr[current_end]] += 1 else: number_count[arr[current_end]] = 1 if len(number_count) > 2: break current_end += 1 longest = max(longest, current_end - current_start) current_start += 1 return longest"},{"question":"You are tasked with writing a function named `validate_sudoku` that takes a single 9x9 grid (a list of lists) as input. This grid represents a Sudoku puzzle which needs to be validated. The function should: 1. Return `True` if the puzzle is valid, and `False` otherwise. A valid Sudoku puzzle satisfies the following conditions: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-grids must contain the digits 1-9 without repetition. Here is a template of the function you need to complete: ```python def validate_sudoku(grid): Validates whether the provided 9x9 Sudoku grid is valid. # To be implemented ``` **Example Usage:** If `grid = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ]`, - The function returns `True` because the grid represents a valid Sudoku puzzle. If `grid = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 9, 7] ]`, - The function returns `False` because the number `9` is repeated in the last row. **Constraints:** - The function must handle the input grid correctly, even if it uses additional helper functions for checking rows, columns, and sub-grids. - You can assume that the function will always receive a 9x9 grid as input.","solution":"def validate_sudoku(grid): Validates whether the provided 9x9 Sudoku grid is valid. def is_valid_group(group): elements = [elem for elem in group if elem != 0] return len(elements) == len(set(elements)) def get_subgrid(grid, row, col): subgrid = [] for i in range(3): for j in range(3): subgrid.append(grid[row + i][col + j]) return subgrid # Check rows and columns for i in range(9): if not is_valid_group([grid[i][j] for j in range(9)]) or not is_valid_group([grid[j][i] for j in range(9)]): return False # Check 3x3 sub-grids for row in range(0, 9, 3): for col in range(0, 9, 3): if not is_valid_group(get_subgrid(grid, row, col)): return False return True"},{"question":"Implement a function `find_longest_increasing_subsequence(arr)` that finds the length of the longest increasing subsequence (LIS) in a given list of integers. You need to use dynamic programming to solve this problem efficiently. # Function Signature ```python def find_longest_increasing_subsequence(arr: List[int]) -> int: pass ``` # Parameters - `arr`: A list of integers representing the sequence in which we need to find the longest increasing subsequence. # Returns - An integer representing the length of the longest increasing subsequence in the given list. # Example ```python arr = [10, 9, 2, 5, 3, 7, 101, 18] print(find_longest_increasing_subsequence(arr)) # Expected Output: 4 # Explanation: The longest increasing subsequence is [2, 3, 7, 101], so the length is 4. ``` # Constraints - The length of the input array `arr` will be between 1 and 2500. - Values in the array will be between -10^4 and 10^4. # Notes - Use a dynamic programming approach to ensure the solution is efficient.","solution":"from typing import List def find_longest_increasing_subsequence(arr: List[int]) -> int: if not arr: return 0 n = len(arr) dp = [1] * n # dp[i]will be the length of LIS ending at index i for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Your task is to implement a function `balanced_string` that determines if a given string containing only square brackets (`\'[\'` and `\']\'`) is balanced. A string is considered balanced if every opening bracket (`\'[\'`) has a corresponding closing bracket (`\']\'`) and the pairs of brackets are properly nested. The function should return a boolean value: `True` if the string is balanced, and `False` otherwise. **Function Signature:** ```python def balanced_string(s: str) -> bool: ``` **Parameters:** - `s`: A string consisting solely of the characters `[` and `]`. **Examples:** ```python print(balanced_string(\\"[]\\")) # Output: True print(balanced_string(\\"[[]]\\")) # Output: True print(balanced_string(\\"[][]\\")) # Output: True print(balanced_string(\\"[[[]]]\\")) # Output: True print(balanced_string(\\"][\\")) # Output: False print(balanced_string(\\"[][\\")) # Output: False print(balanced_string(\\"[[]]]\\")) # Output: False ``` **Explanation:** - The string `[]` contains one pair of matched brackets, so it is balanced. - The string `[[]]` contains properly nested pairs of brackets and is balanced. - The string `[][]` contains two adjacent pairs of brackets and is balanced. - The string `[[[]]]` has three levels of nested brackets and is balanced. - The string `][` starts with a closing bracket without a preceding opening bracket, so it is not balanced. - The string `[][[]` has an unbalanced opening bracket at the end, making it not balanced. - The string `[[]]]` has an extra closing bracket, making it not balanced. Write your implementation of the `balanced_string` function to determine if a given string of square brackets is balanced or not.","solution":"def balanced_string(s: str) -> bool: Returns True if the input string s containing only square brackets is balanced, otherwise returns False. stack = [] for char in s: if char == \'[\': stack.append(char) elif char == \']\': if not stack: return False stack.pop() return not stack"},{"question":"Load a text file containing several lines of sentences into a Python list. Calculate the frequency of each unique word in the entire text and then output a dictionary containing the frequency of the top N most common words in descending order. Ignore case and punctuation in the word count. The function should output: dict: A dictionary where keys are the top N most common words and values are their frequencies. You should write self-contained code starting with: ``` import string from collections import Counter def word_frequencies(text_file, N): ```","solution":"import string from collections import Counter def word_frequencies(text_file, N): Calculates the frequency of each unique word in the text file and returns the top N most common words along with their frequencies. Args: text_file (str): Path to the text file. N (int): The number of top common words to return. Returns: dict: A dictionary where keys are the top N most common words and values are their frequencies. # Initialize an empty list to store all words from the file all_words = [] # Open the file and process each line with open(text_file, \'r\') as file: for line in file: # Convert to lower case, remove punctuation and split into words line = line.lower() line = line.translate(str.maketrans(\'\', \'\', string.punctuation)) words = line.split() # Extend the all_words list with the words from this line all_words.extend(words) # Count the frequency of each word word_counts = Counter(all_words) # Get the top N most common words most_common = word_counts.most_common(N) # Convert the most common words list into a dictionary result = {word: count for word, count in most_common} return result"},{"question":"You are tasked with creating a Python function `analyze_expense_distribution(expenses, categories, metric)`. This function will take three parameters: 1. `expenses`: A list of dictionaries where each dictionary represents an expense with \'amount\' and \'category\' keys (e.g., [{\'amount\': 50, \'category\': \'Food\'}, {\'amount\': 100, \'category\': \'Transport\'}]) 2. `categories`: A list of categories to consider when analyzing expenses (e.g., [\'Food\', \'Transport\', \'Entertainment\']) 3. `metric`: A string indicating the metric to use for analysis, either \'total\' or \'average\'. Your function will analyze the expense distribution, either calculating the total or average expenses for each category specified. It should return a dictionary where keys are the categories and values are the calculated metric (total or average). For this, you are required to: 1. Filter the expenses to include only those that match the given categories. 2. Calculate the total or average expense for each category. 3. Return the results as a dictionary. # Task: Implement the `analyze_expense_distribution(expenses, categories, metric)` function, ensuring that it correctly filters, calculates and returns the required metrics. ```python def analyze_expense_distribution(expenses, categories, metric): # Your code here ``` # Example: ```python expenses = [ {\'amount\': 50, \'category\': \'Food\'}, {\'amount\': 100, \'category\': \'Transport\'}, {\'amount\': 200, \'category\': \'Food\'}, {\'amount\': 150, \'category\': \'Entertainment\'}, {\'amount\': 80, \'category\': \'Food\'} ] categories = [\'Food\', \'Transport\'] metric = \'total\' print(analyze_expense_distribution(expenses, categories, metric)) ``` Expected output: ```python {\'Food\': 330, \'Transport\': 100} ``` If `metric` was \'average\', the expected output would be: ```python {\'Food\': 110.0, \'Transport\': 100.0} ``` # Notes: - Ensure the function handles scenarios where no expenses match the given categories. - Validate that the `metric` parameter is either \'total\' or \'average\'. If not, raise a ValueError with the message \\"Invalid metric. Must be \'total\' or \'average\'.\\"","solution":"def analyze_expense_distribution(expenses, categories, metric): Analyzes the expense distribution based on the specified metric. Parameters: expenses (list): A list of dictionaries containing expense data. categories (list): A list of categories to consider. metric (str): The metric to use for analysis (\'total\' or \'average\'). Returns: dict: A dictionary with categories as keys and calculated metrics as values. if metric not in [\'total\', \'average\']: raise ValueError(\\"Invalid metric. Must be \'total\' or \'average\'.\\") filtered_expenses = [e for e in expenses if e[\'category\'] in categories] results = {} for category in categories: category_expenses = [e[\'amount\'] for e in filtered_expenses if e[\'category\'] == category] if metric == \'total\': results[category] = sum(category_expenses) elif metric == \'average\': results[category] = sum(category_expenses) / len(category_expenses) if category_expenses else 0 return results"},{"question":"You have been asked to write a function, `analyze_word_frequencies`, that analyzes the frequency of words in a given text file. The function should open and read the file, then count how often each word occurs, ignoring case and punctuation. Transform the text to lowercase and remove any punctuation before counting the words. Finally, return a dictionary where the keys are the words and the values are their counts. **Function Requirements:** - Name the function `analyze_word_frequencies(filename)`. - Handle the file reading using the `open` function. - Use the `string` and `collections` modules to assist with text processing and counting. - Ensure that the function ignores common punctuation marks: `.,!?:;\'\\"`. Assume the input file is a plain text file encoded in UTF-8. Here is a starting template for your function: ```python import string from collections import Counter def analyze_word_frequencies(filename): with open(filename, \'r\', encoding=\'utf-8\') as file: text = file.read() # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Count word frequencies word_counts = Counter(words) return dict(word_counts) ```","solution":"import string from collections import Counter def analyze_word_frequencies(filename): Reads a text file, counts frequency of each word ignoring case and punctuation, and returns a dictionary with words as keys and their counts as values. with open(filename, \'r\', encoding=\'utf-8\') as file: text = file.read() # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Count word frequencies word_counts = Counter(words) return dict(word_counts)"},{"question":"You need to create a function that simulates a simple game of \\"Guess the Number\\". The function will allow a user to guess a random number between 1 and 100, inclusive. The program should provide feedback after each guess until the user guesses the correct number. The feedback should inform the user if their guess was too high, too low, or correct. Function Signature: `def guess_the_number():` - Inside the function, generate a random number between 1 and 100. - Use the `random.randint` function from the `random` library. - Continuously prompt the user to enter a guess. - Use `input` to get the user\'s guess and convert it to an integer. - After each guess: - If the guess is higher than the target number, print \\"Too high!\\". - If the guess is lower than the target number, print \\"Too low!\\". - If the guess is correct, print \\"Congratulations! You guessed the correct number in X attempts!\\" where X is the number of guesses the user made, and then exit the loop. Use the following specific functions from the random library: - `random.randint` Example: ```python guess_the_number() ``` During execution, after calling `guess_the_number()`, the interaction in the console might appear as follows: ``` Enter your guess: 50 Too low! Enter your guess: 75 Too high! Enter your guess: 60 Too low! Enter your guess: 65 Congratulations! You guessed the correct number in 4 attempts! ```","solution":"import random def guess_the_number(): The function simulates a game where the user tries to guess a random number between 1 and 100. The function provides feedback: \'Too high!\', \'Too low!\', or \'Congratulations!\'. target_number = random.randint(1, 100) attempts = 0 while True: guess = int(input(\\"Enter your guess: \\")) attempts += 1 if guess > target_number: print(\\"Too high!\\") elif guess < target_number: print(\\"Too low!\\") else: print(f\\"Congratulations! You guessed the correct number in {attempts} attempts!\\") break"},{"question":"**Geometric Median with NumPy** The geometric median is a generalization of the median to multi-dimensional space. For a set of points in a multi-dimensional space, the geometric median minimizes the sum of Euclidean distances to all other points in the set. This problem requires you to find the geometric median of a given set of points using a computational approach in Python. **Objective:** You are to implement a function `geometric_median` that computes the geometric median for a given set of 2D points using the Weiszfeld algorithm. **Function Signature:** ```python def geometric_median(points): pass ``` **Inputs:** 1. `points` (2D NumPy array): A 2D array of shape (n, 2) where each row represents the coordinates of a point. **Output:** - A 1D NumPy array `median` containing the coordinates of the geometric median. **Requirements:** 1. Implement the function using NumPy library functions. 2. Use an iterative method to approximate the geometric median, such as the Weiszfeld algorithm. 3. Ensure the iteration stops when the change in the median is below a certain threshold (e.g., (1e-5)) or after a set number of iterations (e.g., 500). **Constraints:** - Your function should handle large arrays efficiently. - The function should return accurate results within a reasonable runtime. **Example:** ```python points = np.array([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]) median = geometric_median(points) print(median) # Output should be the coordinates of the geometric median ``` Note: Include necessary edge cases to test the robustness of your implementation, such as handling coinciding points and large datasets.","solution":"import numpy as np def geometric_median(points, tol=1e-5, max_iter=500): Computes the geometric median for a given set of 2D points using the Weiszfeld algorithm. Parameters: points (2D numpy array): A 2D array of shape (n, 2) where each row represents the coordinates of a point. tol (float): Tolerance for stopping condition. max_iter (int): Maximum number of iterations. Returns: 1D numpy array: The coordinates of the geometric median. if len(points) == 0: raise ValueError(\\"The input array is empty\\") # Initial guess for the median can be the centroid of the points median = np.mean(points, axis=0) for _ in range(max_iter): distances = np.linalg.norm(points - median, axis=1) non_zero_distances = distances > tol if not np.any(non_zero_distances): break weighted_sum = np.sum(points[non_zero_distances] / distances[non_zero_distances, None], axis=0) weights = np.sum(1 / distances[non_zero_distances]) new_median = weighted_sum / weights if np.linalg.norm(new_median - median) < tol: return new_median median = new_median return median"},{"question":"** You are required to implement a function that calculates the edit distance between two strings. Edit distance, also known as Levenshtein distance, is a measure of similarity between two strings by determining the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. The function should be implemented using dynamic programming to ensure efficiency. **Function Specification**: - **Function Name**: `editDistance` - **Parameters**: - `str1`: A string representing the first input string (e.g., `\\"kitten\\"`). - `str2`: A string representing the second input string (e.g., `\\"sitting\\"`). - **Returns**: - An integer representing the edit distance between the two strings. **Requirements**: 1. Create a 2D list (matrix) to store the intermediate results of the edit distance calculation. 2. Initialize the first row and the first column of the matrix with incremental values representing the cost of transformations. 3. Use nested loops to fill in the rest of the matrix based on the minimum cost of insertions, deletions, and substitutions. 4. The value in the bottom-right cell of the matrix represents the edit distance between `str1` and `str2`. 5. Return the computed edit distance. **Example**: ```python str1 = \\"kitten\\" str2 = \\"sitting\\" distance = editDistance(str1, str2) print(distance) ``` The expected output should be `3` since the edit distance between \\"kitten\\" and \\"sitting\\" involves three edits: substituting \'k\' with \'s\', substituting \'e\' with \'i\', and appending \'g\'. **Hint**: - Define the DP state `dp[i][j]` to be the edit distance between the first `i` characters of `str1` and the first `j` characters of `str2`. - For each cell `dp[i][j]`, you can either insert, delete, or substitute a character, thus the formula should take the minimum cost of these operations. **","solution":"def editDistance(str1, str2): Calculates the edit distance (Levenshtein distance) between two strings. n = len(str1) m = len(str2) # Create a 2D table to store results of subproblems dp = [[0] * (m + 1) for _ in range(n + 1)] # Initialize the first row and first column of the table for i in range(n + 1): dp[i][0] = i for j in range(m + 1): dp[0][j] = j # Fill the rest of the dp table for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1])# Substitution # The value in the bottom-right cell is the edit distance return dp[n][m]"},{"question":"# Context: You are given a dataset that consists of employee records within a company. The data is stored in a CSV file with the following columns: `Employee ID`, `Name`, `Department`, `Salary`, and `Join Date`. # Task: You need to write a function named `department_wise_salary_stats` that performs the following tasks using the pandas library: 1. Loads the data from the given CSV file. 2. Calculates the average salary for each department. 3. Determines the employee with the highest salary in each department. 4. Outputs a new DataFrame containing the department name, the average salary, and the name of the highest-paid employee in that department. # Function Signature: ```python def department_wise_salary_stats(file_path: str) -> pd.DataFrame: # Function implementation goes here. ``` # Input: 1. `file_path`: (str) Path to the CSV file containing employee records. # Output: - A pandas DataFrame with three columns: `Department`, `Average Salary`, and `Highest Paid Employee`. # Assumptions: - The \'Salary\' column contains numerical data. - The \'Join Date\' column is in a standard date format recognizable by pandas. - There are no duplicate employee IDs. # Example: Suppose the CSV file `employees.csv` contains the following data: ``` Employee ID, Name, Department, Salary, Join Date 1, John Smith, HR, 50000, 2020-01-15 2, Jane Doe, IT, 80000, 2019-05-20 3, Emily Davis, HR, 60000, 2018-07-25 4, Michael Brown, IT, 95000, 2017-02-15 5, Linda Wilson, Finance, 70000, 2016-03-12 ``` Executing the function: ```python result = department_wise_salary_stats(\'employees.csv\') ``` The `result` DataFrame should look something like this: ``` Department Average Salary Highest Paid Employee 0 HR 55000.0 Emily Davis 1 IT 87500.0 Michael Brown 2 Finance 70000.0 Linda Wilson ```","solution":"import pandas as pd def department_wise_salary_stats(file_path: str) -> pd.DataFrame: Loads the employee data from a CSV file and calculates department-wise salary statistics. Parameters: file_path (str): Path to the CSV file containing employee records. Returns: pd.DataFrame: A DataFrame with columns \'Department\', \'Average Salary\', and \'Highest Paid Employee\'. # Load the data from the CSV file df = pd.read_csv(file_path) # Calculate average salary per department avg_salary = df.groupby(\'Department\')[\'Salary\'].mean().reset_index() avg_salary.columns = [\'Department\', \'Average Salary\'] # Determine the highest paid employee in each department highest_paid = df.loc[df.groupby(\'Department\')[\'Salary\'].idxmax()] highest_paid = highest_paid[[\'Department\', \'Name\']] highest_paid.columns = [\'Department\', \'Highest Paid Employee\'] # Merge the two results result = pd.merge(avg_salary, highest_paid, on=\'Department\') return result"},{"question":"You are required to implement a function `empirical_probability` that calculates the empirical probability of a given event based on a series of experiments. The dataset will consist of a series of binary outcomes where `1` indicates the event occurred and `0` indicates it did not. The function should return the empirical probability as a floating-point number. The function signature should be: ```python def empirical_probability(outcomes): # Your code here ``` # Parameters: - `outcomes` (list of int): A list of binary outcomes (0s and 1s) representing the results of the experiments. # Returns: - A float representing the empirical probability of the event occurring. # Task: 1. Implement the `empirical_probability` function to calculate the ratio of the number of occurrences of the event to the total number of experiments. 2. Ensure that the function returns the result as a float, even when the probability is zero. # Example: Suppose, you call the function as: ```python prob = empirical_probability([0, 1, 1, 0, 1, 1, 0]) ``` The function should return: ```python 0.5714285714285714 ``` # Important Note: - Ensure that the outcomes list is not empty. If it\'s empty, return `0.0` as the probability (since a probability cannot be calculated from no experiments). # Constraints: - You can assume that the `outcomes` list will contain only binary values (0s and 1s).","solution":"def empirical_probability(outcomes): Calculates the empirical probability of a given event based on a series of binary outcomes. Parameters: outcomes (list of int): A list of binary outcomes (0s and 1s) representing the results of the experiments. Returns: float: The empirical probability of the event occurring. if not outcomes: return 0.0 num_occurrences = sum(outcomes) total_experiments = len(outcomes) return float(num_occurrences) / total_experiments"},{"question":"Create a function that takes a list of integers as an input and returns the list of integers sorted in non-decreasing order using quicksort algorithm. The function should also count the number of comparisons made during the sorting process and return that count along with the sorted list. Exception Handling: - Raises ValueError if the input is not a list. - Raises ValueError if the list contains any non-integer elements. The function should output: sorted_list (list): The list of integers sorted in non-decreasing order. comparisons (int): The number of comparisons made during the sorting process. You should write self-contained code starting with: ``` def quicksort(arr): ``` Use helper functions within the solution as needed to maintain a clear structure.","solution":"def quicksort(arr): if not isinstance(arr, list): raise ValueError(\\"Input should be a list\\") if any(not isinstance(x, int) for x in arr): raise ValueError(\\"All elements in the list should be integers\\") comparisons = [0] sorted_list = _quicksort(arr, comparisons) return sorted_list, comparisons[0] def _quicksort(arr, comparisons): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] comparisons[0] += (len(arr) - 1) # all comparisons in this call return _quicksort(left, comparisons) + middle + _quicksort(right, comparisons)"},{"question":"Design a function named `find_connected_components` that determines the number of connected components in an undirected graph. The input to this function will be an undirected graph represented as an adjacency list. The function should follow this signature: ```python def find_connected_components(graph): ``` - `graph`: A dictionary where the keys are node labels (strings or integers) and the values are lists of neighboring node labels. The function should utilize Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the graph and identify connected components. **Requirements:** 1. **Graph Traversal**: Implement a graph traversal algorithm (either DFS or BFS) that explores all nodes in a connected component. 2. **Component Counting**: Maintain a count of the number of connected components in the graph. 3. **Visited Nodes Tracking**: Use a set to track nodes that have been visited during the traversal process. 4. **Implementation**: Ensure the function correctly handles edge cases, such as an empty graph. **Example Usage:** ```python graph_1 = { \'A\': [\'B\'], \'B\': [\'A\', \'C\', \'D\'], \'C\': [\'B\'], \'D\': [\'B\'], \'E\': [\'F\'], \'F\': [\'E\'] } graph_2 = { 1: [2], 2: [1, 3], 3: [2], 4: [] } assert find_connected_components(graph_1) == 2 assert find_connected_components(graph_2) == 2 ``` **Objective**: - Implement the `find_connected_components` function to correctly determine and return the number of connected components for a given undirected graph.","solution":"def find_connected_components(graph): Determines the number of connected components in an undirected graph. Parameters: graph (dict): An adjacency list representation of the graph. Returns: int: The number of connected components in the graph. def dfs(node, visited): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) visited = set() components = 0 for node in graph: if node not in visited: visited.add(node) dfs(node, visited) components += 1 return components"},{"question":"You are asked to implement a basic command-line utility in Python that manipulates a text file. This exercise will test your ability to read from and write to files, as well as your understanding of string manipulation and command-line arguments in Python. Scenario: Your task is to create a Python script that reads a text file, processes its contents by reversing the order of the lines, and writes the reversed lines to a new file. Requirements: 1. Write a function named `reverse_file` that takes two arguments: `input_file` and `output_file`. 2. This function should read the contents of `input_file`, reverse the order of the lines, and write the reversed lines to `output_file`. 3. Ensure that the line order is reversed correctly, and that the contents of each line remain unchanged. The function name to implement: `reverse_file(input_file, output_file)` Example: Consider an input file `example.txt` with the following contents: ``` Line 1 Line 2 Line 3 Line 4 ``` If your function is called as follows: ```python reverse_file(\'example.txt\', \'reversed_example.txt\') ``` The `reversed_example.txt` file should contain: ``` Line 4 Line 3 Line 2 Line 1 ``` ```python def reverse_file(input_file, output_file): # Implement this function ``` Hints: - Use file handling (`open`, `read`, `write`) operations to read from and write to files. - Utilize Python\'s list operations to reverse the lines of the file. - Remember to handle potential exceptions, such as file-not-found errors.","solution":"def reverse_file(input_file, output_file): Reverses the order of lines in the input_file and writes them to the output_file. :param input_file: Path to the input file. :param output_file: Path to the output file where reversed lines will be written. try: with open(input_file, \'r\') as infile: lines = infile.readlines() reversed_lines = lines[::-1] with open(output_file, \'w\') as outfile: outfile.writelines(reversed_lines) except FileNotFoundError: print(f\\"The file {input_file} does not exist.\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are tasked with writing a Python function named `findOptimalProductSet` to assist an ecommerce company in identifying the optimal set of products to discount. The goal is to provide suggestions based on a user\'s purchase history and product similarities. You have two CSV files available: `purchases.csv` and `products.csv`. 1. `purchases.csv` contains user purchase data with two columns: `user_id` and `product_id`, where each row indicates a product purchased by a user. 2. `products.csv` contains product data with two columns: `product_id` and `similar_product_ids`, where `similar_product_ids` is a comma-separated string of product IDs that are similar to the `product_id`. Your task is to implement the `findOptimalProductSet(user_id: int) -> list` function that: 1. Reads the user purchase data from `purchases.csv` and product data from `products.csv` using pandas `read_csv` function. 2. Identifies all products purchased by the user with the specified `user_id`. 3. Finds the similar products for each purchased product using the `similar_product_ids` column in `products.csv`. 4. Aggregates the similar product IDs and counts their occurrences. 5. Sorts the similar products by their occurrence count in descending order. 6. Returns a list of the top five most frequently occurring similar product IDs. To implement this function, you must make use of the `pandas.read_csv` function and ensure the aggregation and counting is efficiently done using pandas or standard Python techniques. **Input:** - `user_id` (int): The ID of the user whose purchase history you will analyze to recommend similar products. **Output:** - A list of five product IDs that are most frequently similar to the products purchased by the user. Assume that `purchases.csv` and `products.csv` are correctly defined and formatted such that your function can operate without additional validation.","solution":"import pandas as pd from collections import Counter def findOptimalProductSet(user_id: int) -> list: # Load purchase data purchases = pd.read_csv(\'purchases.csv\') # Load product data products = pd.read_csv(\'products.csv\') # Get all products purchased by the user user_purchases = purchases[purchases[\'user_id\'] == user_id][\'product_id\'].tolist() # Get the similar products for each purchased product similar_products_all = [] for product in user_purchases: similar_product_ids_str = products[products[\'product_id\'] == product][\'similar_product_ids\'] if not similar_product_ids_str.empty: similar_product_ids = similar_product_ids_str.iloc[0].split(\',\') similar_products_all.extend(similar_product_ids) # Count occurrences of each similar product similar_product_count = Counter(similar_products_all) # Sort the similar products by their occurrence count in descending order sorted_similar_products = [product for product, count in similar_product_count.most_common(5)] return sorted_similar_products"},{"question":"You are tasked with designing a function that cleans up and normalizes a list of email addresses. Specifically, the function should remove duplicate email addresses while preserving the order of the first occurrence and ensuring that all the email addresses are converted to lowercase. Create the function `normalize_emails(emails: list) -> list` which will: 1. Accept a list of email addresses. 2. Remove any duplicates from the list. 3. Normalize all email addresses to lowercase. **Function Signature** ```python def normalize_emails(emails: list) -> list: ``` **Parameters** - `emails (list)`: A list of email addresses represented as strings. **Returns** - A list of email addresses with duplicates removed and all addresses converted to lowercase. **Instructions** 1. Use a set to track seen email addresses while preserving the order of their first occurrence. 2. Ensure each email is normalized to lowercase before checking for duplicates. 3. Return the cleaned and normalized list of email addresses. **Example** ```python emails = [\\"Test@example.com\\", \\"example@domain.com\\", \\"test@example.com\\", \\"user@domain.com\\"] normalize_emails(emails) ``` Should return: ```python [\\"test@example.com\\", \\"example@domain.com\\", \\"user@domain.com\\"] ``` **Important Notes** - The function should handle an empty list by returning an empty list. - The function should be case insensitive, i.e., \\"Test@example.com\\" and \\"test@example.com\\" are considered duplicates. - The order of the first occurrence of each unique email address should be preserved.","solution":"def normalize_emails(emails): Normalizes email addresses by converting them to lowercase and removing duplicates while preserving order. Parameters: emails (list): A list of email addresses represented as strings. Returns: list: A list of unique, normalized email addresses. seen = set() normalized_emails = [] for email in emails: email_lower = email.lower() if email_lower not in seen: seen.add(email_lower) normalized_emails.append(email_lower) return normalized_emails"},{"question":"You are tasked with writing a function to simulate a simplified traffic light system at a pedestrian crosswalk. The function should determine the state of the traffic light based on the current time and generate a schedule report over a specific duration in minutes. The traffic light has three states: \\"green\\", \\"yellow\\", and \\"red\\". The inputs to your function will be: - `cycle_duration`: An integer representing the total duration of one complete traffic light cycle (in seconds). Each cycle has the following phases: - Green Light: 50% of `cycle_duration` - Yellow Light: 10% of `cycle_duration` - Red Light: 40% of `cycle_duration` - `duration`: An integer representing the total duration over which the schedule report should be generated (in minutes). Your function `generate_traffic_light_schedule` should perform the following tasks: 1. **Convert the total duration** from minutes to seconds. 2. **","solution":"def generate_traffic_light_schedule(cycle_duration, duration): Generates a traffic light schedule report over a specific duration. Parameters: cycle_duration (int): Total duration of one complete traffic light cycle in seconds. duration (int): Total duration over which the schedule report should be generated, in minutes. Returns: list: A schedule report indicating the state of the traffic light at each second within the given duration. duration_in_seconds = duration * 60 cycle = [] green_duration = int(0.5 * cycle_duration) yellow_duration = int(0.1 * cycle_duration) red_duration = cycle_duration - green_duration - yellow_duration # Create one complete cycle cycle.extend([\'green\'] * green_duration) cycle.extend([\'yellow\'] * yellow_duration) cycle.extend([\'red\'] * red_duration) # Generate the schedule for the entire duration schedule = [] for t in range(duration_in_seconds): schedule.append(cycle[t % cycle_duration]) return schedule"},{"question":"You are tasked with writing a function that calculates the longest contiguous subsequence in a given integer array that forms an increasing sequence. This means that for each pair of consecutive elements in the subsequence, the latter element is strictly greater than the former element. Specifically, your goal is to implement the function `longest_increasing_subsequence(arr: List[int]) -> int`. This function takes a single parameter, `arr`, which is a list of integers. The function should return the length of the longest increasing subsequence. **Function Signature:** ```python from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: pass ``` # Constraints: - (1 leq len(arr) leq 2 times 10^4) - (-10^9 leq arr[i] leq 10^9) **Example:** ```python print(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18])) # Output: 4 (The longest increasing subsequence is [2, 3, 7, 101]) print(longest_increasing_subsequence([0, 1, 0, 3, 2, 3])) # Output: 4 (The longest increasing subsequence is [0, 1, 2, 3]) print(longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7])) # Output: 1 (Any single element is the longest increasing subsequence) ``` # Instructions: 1. Implement the function `longest_increasing_subsequence` to efficiently determine the length of the longest increasing subsequence within the provided constraints. 2. Consider using dynamic programming or other optimization techniques to handle large inputs effectively.","solution":"from typing import List import bisect def longest_increasing_subsequence(arr: List[int]) -> int: Function to find the length of the longest increasing subsequence. if not arr: return 0 # `sub` contains the smallest possible tail value for an increasing subsequence # of a given length sub = [] for num in arr: idx = bisect.bisect_left(sub, num) if idx == len(sub): sub.append(num) else: sub[idx] = num return len(sub)"},{"question":"``` Write a function that approximates the value of π using the Monte Carlo method. The function should take the number of iterations as an input and return the approximated value of π. The Monte Carlo method involves randomly generating points within a unit square and then determining the ratio of points that fall inside the quarter circle with radius 1. The function should look like this: ``` import random def estimate_pi(iterations=10000): ``` You should write self-contained code starting with: ``` import random def estimate_pi(iterations=10000): inside_circle = 0 for _ in range(iterations): x = random.uniform(0, 1) y = random.uniform(0, 1) if x**2 + y**2 <= 1: inside_circle += 1 pi_estimate = (inside_circle / iterations) * 4 return pi_estimate ```","solution":"import random def estimate_pi(iterations=10000): inside_circle = 0 for _ in range(iterations): x = random.uniform(0, 1) y = random.uniform(0, 1) if x**2 + y**2 <= 1: inside_circle += 1 pi_estimate = (inside_circle / iterations) * 4 return pi_estimate"},{"question":"Generate a list of prime numbers within a given range and return them as a sorted list. The function should identify all prime numbers between the minimum and maximum values provided (inclusive). Additionally, it should count the total number of prime numbers found and include it in the output. The function should output: list: A sorted list of prime numbers within the specified range. int: The total number of prime numbers found. You should write self-contained code starting with: ``` def find_primes(min_val=2, max_val=100): ```","solution":"def find_primes(min_val=2, max_val=100): Returns a sorted list of prime numbers within the given range from min_val to max_val (inclusive), and the total count of prime numbers found. if min_val < 2: min_val = 2 primes = [] for num in range(min_val, max_val + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes, len(primes)"},{"question":"Given an integer array `nums`, you need to return a new array where each element at index `i` is the product of all the elements in the original array except the one at `i`. Implement the function `product_except_self` that achieves this without using division and in linear time, O(n). **Function Signature:** ```python def product_except_self(nums: list[int]) -> list[int]: ``` **Requirements:** 1. Create an output list where each element represents the product of all elements in the input array except the one at the corresponding index. 2. Do not use the division operation to achieve the result. 3. Aim for a solution that runs in O(n) time. 4. The input list `nums` will contain at least two integers. **Example:** ```python nums = [1, 2, 3, 4] result = product_except_self(nums) # The expected output should be [24, 12, 8, 6] as: # For index 0, the product is 2 * 3 * 4 = 24 # For index 1, the product is 1 * 3 * 4 = 12 # For index 2, the product is 1 * 2 * 4 = 8 # For index 3, the product is 1 * 2 * 3 = 6 ```","solution":"def product_except_self(nums: list[int]) -> list[int]: n = len(nums) # create two arrays, left and right left = [1] * n right = [1] * n result = [1] * n # construct the left array left[0] = 1 for i in range(1, n): left[i] = left[i - 1] * nums[i - 1] # construct the right array right[n - 1] = 1 for j in range(n - 2, -1, -1): right[j] = right[j + 1] * nums[j + 1] # construct the result array for i in range(n): result[i] = left[i] * right[i] return result"},{"question":"You are given a list of intervals, each representing time ranges during which a person is busy. Your task is to determine the minimum number of meeting rooms required to accommodate all these intervals without overlap. Write a function `min_meeting_rooms` that takes the following input and produces the specified output: Input: 1. `intervals`: A list of pairs where each pair `[start, end]` represents the starting and ending times of a meeting. The `start` and `end` times are inclusive integers. Output: An integer representing the minimum number of meeting rooms required. Requirements: - Use Python’s built-in sort function. - Use a min-heap to track the end times of meetings currently occupying rooms. - Implement a helper function `add_meeting_to_heap(heap, meeting)` that adds a meeting to the min-heap. - Maintain code readability and efficiency, ensuring it runs in O(n log n) time complexity. Example: ```python intervals = [[0, 30], [5, 10], [15, 20]] result = min_meeting_rooms(intervals) print(result) # Output: 2 ``` # Hints: 1. Consider sorting the intervals by their start times before processing. 2. Use a min-heap to keep track of the earliest meeting end time. 3. Update the heap as you process each meeting to ensure you\'re accurately tracking room usage.","solution":"import heapq def add_meeting_to_heap(heap, meeting_end_time): Adds a meeting end time to the min-heap. heapq.heappush(heap, meeting_end_time) def min_meeting_rooms(intervals): Determines the minimum number of meeting rooms required to accommodate all the intervals without overlap. Args: intervals (List[List[int]]): A list of pairs where each pair [start, end] represents a meeting time. Returns: int: The minimum number of meeting rooms required. if not intervals: return 0 # Sort the intervals by their start time intervals.sort(key=lambda x: x[0]) # Initialize a min-heap to keep track of end times of meetings end_times_heap = [] for meeting in intervals: start, end = meeting # If the earliest meeting in the heap is done before the current meeting starts, pop it if end_times_heap and end_times_heap[0] <= start: heapq.heappop(end_times_heap) # Add the current meeting\'s end time to the heap add_meeting_to_heap(end_times_heap, end) # The size of the heap tells us the minimum number of meeting rooms required return len(end_times_heap)"},{"question":"You are required to write a Python function that processes a list of transactions and aggregates the total amount spent by each customer. Each transaction contains the following fields: 1. `date` (str): The date of the transaction in the format \\"YYYY-MM-DD\\". 2. `customer_id` (int): The unique identifier of the customer. 3. `amount` (float): The amount spent in the transaction. Your task is to implement the function: ```python def aggregate_transactions(transactions: list) -> dict: ``` **Input:** - `transactions` (list): A list of dictionaries, where each dictionary represents a transaction with the keys \'date\', \'customer_id\', and \'amount\'. **Output:** - `totals` (dict): A dictionary where each key is a `customer_id` and the corresponding value is the total amount spent by that customer. Your solution should handle the aggregation efficiently, even for large lists of transactions. # Example: **Input:** ```python transactions = [ {\\"date\\": \\"2023-01-14\\", \\"customer_id\\": 1, \\"amount\\": 150.0}, {\\"date\\": \\"2023-01-15\\", \\"customer_id\\": 2, \\"amount\\": 200.0}, {\\"date\\": \\"2023-01-16\\", \\"customer_id\\": 1, \\"amount\\": 100.0}, {\\"date\\": \\"2023-01-17\\", \\"customer_id\\": 3, \\"amount\\": 300.0}, {\\"date\\": \\"2023-01-18\\", \\"customer_id\\": 2, \\"amount\\": 50.0} ] ``` **Expected Output:** ```python { 1: 250.0, 2: 250.0, 3: 300.0 } ``` **Important Notes:** 1. Ensure that the function handles negative and zero transaction amounts correctly. 2. Test your function to ensure it can handle an empty list of transactions. The function should return an empty dictionary in such cases.","solution":"def aggregate_transactions(transactions): totals = {} for transaction in transactions: customer_id = transaction[\'customer_id\'] amount = transaction[\'amount\'] if customer_id in totals: totals[customer_id] += amount else: totals[customer_id] = amount return totals"},{"question":"Write a function that takes a list of integers and returns the length of the longest increasing subsequence. An increasing subsequence is a sequence of numbers where each number is larger than the previous one. Your solution should have a time complexity better than O(n^2). The function should output with: int: The length of the longest increasing subsequence. You should write self-contained code starting with: ``` def longest_increasing_subsequence(nums): ```","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the list of integers nums. This solution uses a dynamic programming approach with improved time complexity using binary search. if not nums: return 0 from bisect import bisect_left # dp array to store the increasing subsequence dp = [] for num in nums: # Find the position where \'num\' can replace in the dp array index = bisect_left(dp, num) if index == len(dp): dp.append(num) else: dp[index] = num return len(dp)"},{"question":"You need to implement a function named `balance_parentheses(s)` which takes a string `s` containing only the characters `\'(\'` and `\')\'` and determines the minimum number of parentheses additions needed to make the string valid. A string is considered valid if: 1. Each opening parenthesis `\'(\'` has a corresponding closing parenthesis `\')\'`. 2. The pairs of parentheses are properly nested. The function should return an integer representing the minimum number of insertions required to balance the parentheses in the string. # Examples: ```python s = \\"())\\" print(balance_parentheses(s)) # output should be 1 s = \\"(((\\" print(balance_parentheses(s)) # output should be 3 s = \\"()\\" print(balance_parentheses(s)) # output should be 0 s = \\"())(\\" print(balance_parentheses(s)) # output should be 2 ``` # Function Signature: ```python def balance_parentheses(s): pass ``` # Constraints: - The length of string `s` will be between 1 and 1000. - The string `s` will contain only the characters `\'(\'` and `\')\'`.","solution":"def balance_parentheses(s): Determines the minimum number of parentheses additions needed to make the string valid. # Counter for open and close parentheses open_count = 0 close_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_count += 1 return open_count + close_count"},{"question":"Generate a random time series data, apply a moving average filter with a specified window size, and plot both the original and the smoothed time series for visualization. The function should return: tuple: Containing the smoothed time series and the matplotlib Axes object. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def task_func(n_points=100, window_size=5, seed=7): ```","solution":"import numpy as np import matplotlib.pyplot as plt def task_func(n_points=100, window_size=5, seed=7): Generate a random time series data, apply a moving average filter, and plot both the original and the smoothed time series. Parameters: n_points (int): Number of data points in the time series. window_size (int): The window size for the moving average. seed (int): Seed for the random number generator. Returns: tuple: Containing the smoothed time series and the matplotlib Axes object. # Set the random seed for reproducibility np.random.seed(seed) # Generate random time series data time_series = np.random.randn(n_points) # Apply moving average filter smoothed_series = np.convolve(time_series, np.ones(window_size) / window_size, mode=\'valid\') # Create the plots fig, ax = plt.subplots() ax.plot(time_series, label=\'Original Series\') ax.plot(range(window_size-1, n_points), smoothed_series, label=\'Smoothed Series\') ax.legend() ax.set_title(\'Original and Smoothed Time Series\') plt.show() return smoothed_series, ax"},{"question":"Create a Python function that takes a list of dictionaries, each representing a student\'s grades across three subjects: \'Math\', \'Science\', and \'English\'. The function will compute the average grade for each student and then determine the class average for each subject. Finally, it will return a dictionary with each student’s name and their average grade, along with the class average for each subject. Each dictionary in the list has the following format: ``` { \'Name\': \'Student Name\', \'Math\': grade, \'Science\': grade, \'English\': grade } ``` Here\'s the function to start with: ``` def calculate_grades(students): # Compute average grade for each student student_averages = {} for student in students: student_averages[student[\'Name\']] = { \'Average\': (student[\'Math\'] + student[\'Science\'] + student[\'English\']) / 3 } # Compute class average for each subject total_math = 0 total_science = 0 total_english = 0 num_students = len(students) for student in students: total_math += student[\'Math\'] total_science += student[\'Science\'] total_english += student[\'English\'] class_averages = { \'Class_Average_Math\': total_math / num_students, \'Class_Average_Science\': total_science / num_students, \'Class_Average_English\': total_english / num_students, } return student_averages, class_averages # Example usage: students = [ {\'Name\': \'Alice\', \'Math\': 85, \'Science\': 90, \'English\': 78}, {\'Name\': \'Bob\', \'Math\': 75, \'Science\': 80, \'English\': 88}, {\'Name\': \'Charlie\', \'Math\': 95, \'Science\': 85, \'English\': 92} ] student_averages, class_averages = calculate_grades(students) print(student_averages) print(class_averages) ``` **Result:** The function should output a dictionary with each student’s average grade along with the class averages for each subject.","solution":"def calculate_grades(students): Compute the average grades for each student and the class averages for each subject (Math, Science, English). student_averages = {} total_math = 0 total_science = 0 total_english = 0 num_students = len(students) for student in students: # Compute individual student average average = (student[\'Math\'] + student[\'Science\'] + student[\'English\']) / 3 student_averages[student[\'Name\']] = {\'Average\': average} # Accumulate totals for class average calculation total_math += student[\'Math\'] total_science += student[\'Science\'] total_english += student[\'English\'] class_averages = { \'Class_Average_Math\': total_math / num_students, \'Class_Average_Science\': total_science / num_students, \'Class_Average_English\': total_english / num_students } return student_averages, class_averages # Example usage: # students = [ # {\'Name\': \'Alice\', \'Math\': 85, \'Science\': 90, \'English\': 78}, # {\'Name\': \'Bob\', \'Math\': 75, \'Science\': 80, \'English\': 88}, # {\'Name\': \'Charlie\', \'Math\': 95, \'Science\': 85, \'English\': 92} # ] # student_averages, class_averages = calculate_grades(students) # print(student_averages) # print(class_averages)"},{"question":"You are given an n x n matrix representing the height map of a terrain. Each element in the matrix denotes the elevation at that point in the grid. Water can flow from a cell to any of its four directly adjacent cells but only if the height of the destination cell is less than or equal to the height of the current cell. Your task is to determine the list of coordinates from where water can flow to both the Pacific and Atlantic oceans. The Pacific Ocean touches the left and top edges of the matrix, and the Atlantic Ocean touches the right and bottom edges. You need to implement a function `pacific_atlantic(matrix: List[List[int]]) -> List[Tuple[int, int]]`. This function takes the following parameter: - `matrix`: A list of lists where each sub-list represents a row of the matrix, and each element in the sub-list represents the height at that cell. The function should return a list of tuples. Each tuple represents the coordinates (row, column) of a cell from which water can flow to both oceans. # Example: ```python matrix = [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] output = pacific_atlantic(matrix) print(output) # Output: [(0, 4), (1, 3), (1, 4), (2, 2), (3, 0), (3, 1), (4, 0)] ``` In the above example, the coordinates in the output list represent the positions from where water can flow to both the Pacific and Atlantic Oceans. # Constraints: - The input matrix can have a maximum size of 200 x 200. - The heights are between -10^6 and 10^6. # Notes: - You can use Depth-First Search (DFS) or Breadth-First Search (BFS) to solve this problem. - Optimize to avoid redundant processing and ensure the function execution is within acceptable time limits for large matrices.","solution":"from typing import List, Tuple def pacific_atlantic(matrix: List[List[int]]) -> List[Tuple[int, int]]: if not matrix or not matrix[0]: return [] n, m = len(matrix), len(matrix[0]) pacific_reachable = [[False for _ in range(m)] for _ in range(n)] atlantic_reachable = [[False for _ in range(m)] for _ in range(n)] def dfs(r, c, reachable): reachable[r][c] = True for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not reachable[nr][nc] and matrix[nr][nc] >= matrix[r][c]: dfs(nr, nc, reachable) for i in range(n): dfs(i, 0, pacific_reachable) dfs(i, m - 1, atlantic_reachable) for j in range(m): dfs(0, j, pacific_reachable) dfs(n - 1, j, atlantic_reachable) result = [] for i in range(n): for j in range(m): if pacific_reachable[i][j] and atlantic_reachable[i][j]: result.append((i, j)) return result"},{"question":"Design and implement a function that takes a string containing an arithmetic expression and returns the result of evaluating the expression. The expression can contain integers, basic arithmetic operators (+, -, *, /), and parentheses. **Function Specification:** - **Function Name:** `evaluate_expression` - **Parameters:** - `expression` (str): A string representing an arithmetic expression to be evaluated. **Requirements:** 1. Use Python’s built-in capabilities to evaluate the given arithmetic expression. 2. Ensure that the function can handle operator precedence and parentheses correctly. 3. The function should return the computed result as a float or integer, depending on the input. **Example:** ```python example_expression_1 = \\"3 + 5 * 2\\" result_1 = evaluate_expression(example_expression_1) print(result_1) # Expected Output: 13 example_expression_2 = \\"(8 - 3) * 4 + 6 / 2\\" result_2 = evaluate_expression(example_expression_2) print(result_2) # Expected Output: 23.0 ``` In these examples, the input strings containing arithmetic expressions are correctly evaluated respecting arithmetic precedence and parentheses, and the resulting values are returned.","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression string and returns the result. :param expression: A string representing an arithmetic expression. :return: The result of evaluating the expression as a float or an integer. try: result = eval(expression, {\\"__builtins__\\": {}}) return result except (SyntaxError, NameError): raise ValueError(\\"Invalid arithmetic expression\\")"},{"question":"You are tasked with creating a function that evaluates the results from a series of mathematical functions based on given operations and constraints. Specifically, you will need to create a function, `evaluate_operations`, which takes a single dictionary argument. The dictionary contains different mathematical operations as keys and a list of tuples as values. Each tuple consists of two integers, representing the operands on which the operation will be performed. Your function needs to parse this dictionary and return a new dictionary where each key is the operation name and each value is a list of results corresponding to the operation applied to the operand pairs. Your implementation should handle the following operations: \\"add\\", \\"subtract\\", \\"multiply\\", \\"divide\\". If a division by zero is attempted, the result should be \\"undefined\\". **Function Signature:** ```python def evaluate_operations(operations_dict: dict) -> dict: pass ``` **Input:** - `operations_dict` (dict): A dictionary where the key is a string representing an operation and the value is a list of tuples, each containing two integers. **Output:** - Returns a dictionary where the key is a string representing the operation and the value is a list of integers or strings (\\"undefined\\" in case of division by zero). Example: ```python operations_dict = { \\"add\\": [(1, 2), (3, 4)], \\"subtract\\": [(10, 5), (5, 10)], \\"multiply\\": [(2, 3), (4, 5)], \\"divide\\": [(10, 2), (5, 0)] } print(evaluate_operations(operations_dict)) ``` Expected output: ```python { \\"add\\": [3, 7], \\"subtract\\": [5, -5], \\"multiply\\": [6, 20], \\"divide\\": [5.0, \\"undefined\\"] } ```","solution":"def evaluate_operations(operations_dict: dict) -> dict: Evaluates a series of mathematical operations on pairs of operands provided in a dictionary. Parameters: operations_dict (dict): A dictionary where each key is a string representing the operation (add, subtract, multiply, divide) and the value is a list of tuples, each containing two integers representing the operands. Returns: dict: A dictionary where each key is the operation name and each value is a list of results corresponding to the operation applied to the operand pairs. result_dict = {} for operation, pairs in operations_dict.items(): results = [] for x, y in pairs: if operation == \\"add\\": results.append(x + y) elif operation == \\"subtract\\": results.append(x - y) elif operation == \\"multiply\\": results.append(x * y) elif operation == \\"divide\\": if y == 0: results.append(\\"undefined\\") else: results.append(x / y) result_dict[operation] = results return result_dict"},{"question":"You are tasked with creating a function named `computeStringLengths` that calculates and returns the lengths of strings in a given list of strings. Specifically: 1. Iterate through each string in the input list and determine its length. 2. Store the lengths in a list. To implement this function, you must: - Initialize an empty list to hold the string lengths. - Use a `for` loop to iterate over each string in the input list. - Use the `len` function to compute the length of each string. # Function Signature ```python def computeStringLengths(str_list: list) -> list: pass ``` # Parameters - `str_list`: A list of strings for which the lengths need to be calculated. # Returns - `list`: A list containing the lengths of the strings in the same order as they appear in the input list. # Example ```python str_list = [\\"apple\\", \\"banana\\", \\"cherry\\"] result = computeStringLengths(str_list) print(result) # Expected Output: [5, 6, 6] ``` # Edge Cases Consider handling the following edge cases: - An empty input list should return an empty list. - Strings of varying lengths, including empty strings. Create the function ensuring it adheres to the requirements and effectively handles the described scenarios.","solution":"def computeStringLengths(str_list: list) -> list: Returns a list of lengths of the input strings. Parameters: - str_list (list): A list of strings for which the lengths need to be calculated. Returns: - list: A list containing the lengths of the strings in the same order as they appear in the input list. lengths = [] for string in str_list: lengths.append(len(string)) return lengths"},{"question":"Your task is to create a function `library_system()` that simulates a basic library management system. The purpose of this exercise is to understand the usage of Python dictionaries, user-defined classes, and several essential methods like `__init__`, `__str__`, and instance methods to manage book checkouts, returns, and status checks. **Function Requirements:** 1. **Class Name:** `Book` 2. **Class Properties:** - `title`: The title of the book (string). - `author`: The author of the book (string). - `available`: Boolean indicating if the book is available for checkout (default is `True`). 3. **Class Methods:** - `__init__(self, title, author)`: Initializes the book with the provided title and author, and sets it as available. - `__str__(self)`: Returns a string representation of the book in the format: `\\"Title: {title}, Author: {author}, Available: {available}\\"`. - `checkout(self)`: If the book is available, sets `available` to `False` and returns `True`; otherwise, returns `False`. - `return_book(self)`: Sets `available` to `True`. 4. **Function Name:** `library_system` 5. **Parameters:** The function should take two parameters: - `books_list`: A list of tuples, each containing the title and author of a book. - `commands`: A list of strings, each representing a command to the library system in one of the following formats: - `\\"checkout <title>\\"`: Checkout a book by its title. - `\\"return <title>\\"`: Return a book by its title. - `\\"status <title>\\"`: Check the availability of a book by its title. 6. **Function Tasks:** - Create a dictionary of `Book` instances using the provided `books_list`, with titles as keys. - Process each command in the `commands` list and print the appropriate message: - For a `\\"checkout\\"` command: If the checkout is successful, print `\\"Checked out: <title>\\"`; otherwise, `\\"Could not check out: <title>\\"`. - For a `\\"return\\"` command: If the book is returned successfully, print `\\"Returned: <title>\\"`; no other message for return. - For a `\\"status\\"` command: Print the status of the book in the format provided by the `__str__` method. **Example Usage:** ```python def library_system(books_list, commands): class Book: def __init__(self, title, author): self.title = title self.author = author self.available = True def __str__(self): return f\\"Title: {self.title}, Author: {self.author}, Available: {self.available}\\" def checkout(self): if self.available: self.available = False return True return False def return_book(self): self.available = True library = {title: Book(title, author) for title, author in books_list} for command in commands: action, title = command.split(maxsplit=1) if action == \\"checkout\\": if title in library and library[title].checkout(): print(f\\"Checked out: {title}\\") else: print(f\\"Could not check out: {title}\\") elif action == \\"return\\": if title in library: library[title].return_book() print(f\\"Returned: {title}\\") elif action == \\"status\\": if title in library: print(library[title]) else: print(f\\"Book not found: {title}\\") # Example test case books = [(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\"), (\\"1984\\", \\"George Orwell\\"), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\")] commands = [\\"checkout 1984\\", \\"status 1984\\", \\"return 1984\\", \\"status 1984\\"] library_system(books, commands) ``` **Expected Output:** ``` Checked out: 1984 Title: 1984, Author: George Orwell, Available: False Returned: 1984 Title: 1984, Author: George Orwell, Available: True ```","solution":"def library_system(books_list, commands): class Book: def __init__(self, title, author): self.title = title self.author = author self.available = True def __str__(self): return f\\"Title: {self.title}, Author: {self.author}, Available: {self.available}\\" def checkout(self): if self.available: self.available = False return True return False def return_book(self): self.available = True library = {title: Book(title, author) for title, author in books_list} output = [] for command in commands: action, title = command.split(maxsplit=1) if action == \\"checkout\\": if title in library and library[title].checkout(): output.append(f\\"Checked out: {title}\\") else: output.append(f\\"Could not check out: {title}\\") elif action == \\"return\\": if title in library: library[title].return_book() output.append(f\\"Returned: {title}\\") elif action == \\"status\\": if title in library: output.append(str(library[title])) else: output.append(f\\"Book not found: {title}\\") return output"},{"question":"You are tasked with writing a function to convert a list of word strings into a corresponding list of Morse code strings. Morse code encodes each letter of the alphabet as a series of dots and dashes. Your function, named `convert_to_morse`, should function as follows: 1. Receive one parameter: - `words` (list of strings): A list of words, where each word is a string that contains only alphabetic characters and is in lowercase. 2. Convert each word in `words` to its Morse code representation by replacing each letter with the corresponding Morse code symbols. The Morse code representations for each letter are detailed below: ``` A -> .- B -> -... C -> -.-. D -> -.. E -> . F -> ..-. G -> --. H -> .... I -> .. J -> .--- K -> -.- L -> .-.. M -> -- N -> -. O -> --- P -> .--. Q -> --.- R -> .-. S -> ... T -> - U -> ..- V -> ...- W -> .-- X -> -..- Y -> -.-- Z -> --.. ``` 3. Return a list of strings, where each string is the Morse code representation of the corresponding word in the input list. Here is a breakdown of the task: - Iterate through each word in the `words` list. - For each word, convert each letter into its Morse code equivalent. - Combine these Morse codes into a single string for that word. - Append the resulting Morse code string to the output list. Below is a guideline on how the function signature should look: ```python def convert_to_morse(words): # Your code here ``` **Constraints**: - You can assume that the input list `words` is not empty and contains only valid lowercase alphabetic strings. - The function should maintain the order of words as in the input list. - The Morse code letters should be concatenated with no separators. **Example**: Suppose you have the following input: ```python words = [\'hello\', \'world\'] ``` If you call `convert_to_morse(words)`, the function should return the list: ```python [\'.... . .-.. .-.. ---\', \'.-- --- .-. .-.. -..\'] ``` In this case: - \'hello\' is converted to \'.... . .-.. .-.. ---\' - \'world\' is converted to \'.-- --- .-. .-.. -..\'","solution":"def convert_to_morse(words): morse_code_dict = { \'a\': \'.-\', \'b\': \'-...\', \'c\': \'-.-.\', \'d\': \'-..\', \'e\': \'.\', \'f\': \'..-.\', \'g\': \'--.\', \'h\': \'....\', \'i\': \'..\', \'j\': \'.---\', \'k\': \'-.-\', \'l\': \'.-..\', \'m\': \'--\', \'n\': \'-.\', \'o\': \'---\', \'p\': \'.--.\', \'q\': \'--.-\', \'r\': \'.-.\', \'s\': \'...\', \'t\': \'-\', \'u\': \'..-\', \'v\': \'...-\', \'w\': \'.--\', \'x\': \'-..-\', \'y\': \'-.--\', \'z\': \'--..\' } result = [] for word in words: morse_word = \\" \\".join(morse_code_dict[char] for char in word) result.append(morse_word) return result"},{"question":"You are required to write a function `calculateMode` using Python. This function will help you brush up on your skills in basic list operations and condition handling. The function `calculateMode(numbers)` should work as follows: - **Input**: 1. `numbers`: A list of integers. - **Output**: - The function should return an integer that represents the mode of the list. The mode is the number that appears most frequently in the list. If there are multiple modes, return the smallest one. **Requirements**: - You must handle edge cases where the list may be empty—return `None` in such cases. - Use intrinsic Python functions and avoid using any libraries. Your implementation should consider scenarios with multiple numbers having the same highest frequency and ensure the smallest number among them is returned as the mode.","solution":"def calculateMode(numbers): Returns the mode of the list of integers. If there are multiple modes, return the smallest one. If the list is empty, return None. if not numbers: return None frequency = {} for number in numbers: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 max_freq = max(frequency.values()) modes = [num for num, freq in frequency.items() if freq == max_freq] return min(modes)"},{"question":"In this problem, you are required to implement a function named `most_frequent_characters` that takes a string as an input and returns a list of the three most frequent characters in the string. If there are ties, the characters should appear in the order of their first occurrence in the original string. You will need to: 1. Compute the frequency of each character in the provided string. 2. Sort these characters based on their frequency in descending order. 3. Handle ties by maintaining the original order of their first appearance. 4. Return a list of the three most frequent characters. If there are fewer than three unique characters in the string, return all the character(s) present. **Function Signature:** ```python def most_frequent_characters(s: str) -> list: pass ``` **Example Usage:** ```python result = most_frequent_characters(\\"abracadabra\\") print(result) # Output: [\'a\', \'b\', \'r\'] result = most_frequent_characters(\\"hello\\") print(result) # Output: [\'l\', \'h\', \'e\'] ``` **Constraints:** - The input string `s` will only contain lowercase alphabetic characters. - The length of the input string `s` will not exceed 1000 characters. **Note:** You may find the `collections.Counter` from the Python `collections` module useful for this task.","solution":"from collections import Counter def most_frequent_characters(s): Returns a list of the three most frequent characters in the string `s`. if not s: return [] char_count = Counter(s) sorted_chars = sorted(char_count, key=lambda x: (-char_count[x], s.index(x))) return sorted_chars[:3]"},{"question":"You are tasked with implementing a function named `flattenList` that takes a nested list of integers and returns a flattened (one-dimensional) list containing all the integers in the original nested list. Here\'s a more detailed breakdown of the requirements: - The function should take one argument: `nestedList`, which is a list that can contain integers or other lists that themselves can contain integers or further nested lists. - The function should return a new list that includes all the integers from the original nested structure, in their original order. - It should handle any level of nesting within the input list. - The function should utilize recursion to achieve the flattening. For example: ```python nestedList = [1, [2, [3, 4], 5], 6, [[7]], 8] flattened = flattenList(nestedList) print(flattened) # Output: [1, 2, 3, 4, 5, 6, 7, 8] ``` Here is a skeleton structure of the function: ```python def flattenList(nestedList): flat_list = [] def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item) else: flat_list.append(item) flatten(nestedList) return flat_list ``` Your goal is to complete the `flattenList` function following the specifications provided.","solution":"def flattenList(nestedList): Flattens a nested list of integers into a one-dimensional list of integers. Args: nestedList (list): A list that can contain integers or other nested lists. Returns: list: A new list that includes all the integers from the original nested structure. flat_list = [] def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item) else: flat_list.append(item) flatten(nestedList) return flat_list"},{"question":"You are developing a software for a logistics company that tracks the movement of trucks between different cities. The company uses a system where each truck movement is logged with the origin city, destination city, and distance traveled. Your job is to write a Python function `calculate_routes` that takes a list of these logs and calculates the total distance traveled for each unique route (origin to destination). **Function Signature:** ```python def calculate_routes(logs: list) -> dict: pass ``` **Parameters:** - `logs`: A list of tuples, where each tuple contains three elements: origin city (string), destination city (string), and distance traveled (integer). **Returns:** - A dictionary where the keys are tuples representing the unique routes (origin city, destination city), and the values are the total distances (integers) traveled on those routes. **Notes:** - Ensure each route is logged as `(origin city, destination city)` and not the reverse. - If the same route appears multiple times in the logs, sum up the distances for that route. # Example Usage: ```python logs = [ (\\"New York\\", \\"Los Angeles\\", 2800), (\\"Chicago\\", \\"Houston\\", 1080), (\\"New York\\", \\"Los Angeles\\", 2850), (\\"Chicago\\", \\"New York\\", 790), (\\"San Francisco\\", \\"Seattle\\", 810) ] result = calculate_routes(logs) ``` In this example: - The output `result` should be: ```python { (\\"New York\\", \\"Los Angeles\\"): 5650, (\\"Chicago\\", \\"Houston\\"): 1080, (\\"Chicago\\", \\"New York\\"): 790, (\\"San Francisco\\", \\"Seattle\\"): 810 } ```","solution":"def calculate_routes(logs: list) -> dict: Calculates the total distance traveled for each unique route (origin city to destination city). Parameters: logs: A list of tuples, where each tuple contains three elements: origin city (string), destination city (string), and distance traveled (integer). Returns: A dictionary where the keys are tuples representing the unique routes (origin city, destination city), and the values are the total distances (integers) traveled on those routes. routes = {} for origin, destination, distance in logs: route = (origin, destination) if route in routes: routes[route] += distance else: routes[route] = distance return routes"},{"question":"Design a function that will analyze a given text and produce a word frequency histogram. The histogram will represent the frequency of each unique word in the text in a graphical form. For this task, you are required to use the `matplotlib` library. Your task is to implement a function named `generate_word_frequency_histogram(text)` that will perform the following steps: 1. Preprocess the text by converting all characters to lowercase and removing punctuation. 2. Split the text into individual words. 3. Count the frequency of each unique word. 4. Create a histogram that displays the word frequencies using the `matplotlib` library. # Detailed Steps 1. **Preprocess the text**: - Convert the text to lowercase using `text.lower()`. - Remove punctuation from the text using `str.translate(str.maketrans(\'\', \'\', string.punctuation))`. 2. **Split text into words**: - Split the preprocessed text into a list of words using `text.split()`. 3. **Count word frequencies**: - Use a dictionary to count the frequency of each word in the list. 4. **Create histogram**: - Use `matplotlib.pyplot.bar()` to create a bar chart where the x-axis represents unique words and the y-axis represents their corresponding frequencies. - Ensure the x-axis labels are rotated for better readability (e.g., `plt.xticks(rotation=90)`). # Requirements - The text preprocessing must account for lowercase conversion and punctuation removal. - The histogram must clearly display the word frequencies with appropriate labeling. - Only use the `matplotlib.pyplot` module for plotting functions. Here is your function signature: ```python def generate_word_frequency_histogram(text): pass ``` # Example Usage ```python text = \\"Hello world! Hello Python. This is a test text, for testing the word frequency histogram.\\" generate_word_frequency_histogram(text) ``` Upon calling `generate_word_frequency_histogram(text)`, a bar chart should display showing the frequencies of words like \'hello\', \'world\', \'python\', \'this\', \'is\', \'a\', \'test\', \'text\', \'for\', \'testing\', \'the\', \'word\', and \'frequency\'.","solution":"import matplotlib.pyplot as plt import string def generate_word_frequency_histogram(text): # Preprocess the text by converting to lowercase and removing punctuation text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split the text into words words = text.split() # Count the frequency of each unique word word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 # Plot the histogram using matplotlib plt.figure(figsize=(10, 6)) plt.bar(word_freq.keys(), word_freq.values(), color=\'skyblue\') plt.xticks(rotation=90) plt.xlabel(\'Words\') plt.ylabel(\'Frequency\') plt.title(\'Word Frequency Histogram\') plt.show()"},{"question":"You are working on a sorting algorithm and need to implement a function that sorts a list of dictionaries based on a specified key. Each dictionary in the list contains the same set of keys with corresponding values. Given a list of dictionaries, your task is to sort the list in ascending order based on the values associated with one of the keys. # Requirements: 1. Write a function named `sort_dicts_by_key` that: - Takes two parameters: - A list of dictionaries `dict_list`. - A string `sort_key` which is the key by which the dictionaries should be sorted. - Returns a new list of dictionaries sorted based on the values for the specified key. 2. Use Python\'s built-in sorting capabilities, such as `sorted()` or list\'s `sort()` method. # Example Usage: ```python dict_list = [ {\\"name\\": \\"Alice\\", \\"age\\": 25, \\"score\\": 88.5}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"score\\": 92.0}, {\\"name\\": \\"Charlie\\", \\"age\\": 30, \\"score\\": 85.0} ] sort_key = \\"score\\" sorted_list = sort_dicts_by_key(dict_list, sort_key) # Expected Output: # [ # {\\"name\\": \\"Charlie\\", \\"age\\": 30, \\"score\\": 85.0}, # {\\"name\\": \\"Alice\\", \\"age\\": 25, \\"score\\": 88.5}, # {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"score\\": 92.0} # ] ``` # Constraints: - All dictionaries in the list are guaranteed to have the `sort_key` with valid values. - The `sort_key` can be associated with values of any type that supports comparison (e.g., integers, floats, strings). # Notes: - Ensure the function does not modify the original list. Return a new sorted list. - You can assume that the input list will have at least one dictionary and all dictionaries will have the same structure. Implement the `sort_dicts_by_key` function using the described behavior and constraints.","solution":"def sort_dicts_by_key(dict_list, sort_key): Sorts a list of dictionaries based on the specified key. Args: dict_list (list): A list of dictionaries to be sorted. sort_key (str): The key by which the dictionaries should be sorted. Returns: list: A new list of dictionaries sorted by the specified key. return sorted(dict_list, key=lambda d: d[sort_key])"},{"question":"You are given a list of sales transactions. Each transaction is a dictionary with keys \'customer_id\', \'date\', and \'amount\', representing the ID of the customer, the date of the transaction, and the transaction amount, respectively. Your task is to generate a report that summarizes the total sales amount for each customer, sorted in descending order by the total sales amount. The steps your function should perform are: 1. Parse the list of transactions and aggregate the total sales amount for each customer. 2. Sort the customers by their total sales amount in descending order. If two customers have the same total sales amount, they should be sorted by their customer ID in ascending order. 3. Return a list of tuples where each tuple contains the customer ID and their corresponding total sales amount. Write a function named `summarize_sales(transactions: list) -> list` that returns the summary report as described above. **Example Input**: ```python transactions = [ {\'customer_id\': 1, \'date\': \'2023-08-01\', \'amount\': 235.0}, {\'customer_id\': 2, \'date\': \'2023-08-01\', \'amount\': 150.0}, {\'customer_id\': 1, \'date\': \'2023-08-02\', \'amount\': 115.0}, {\'customer_id\': 3, \'date\': \'2023-08-01\', \'amount\': 175.0}, {\'customer_id\': 2, \'date\': \'2023-08-02\', \'amount\': 90.0}, ] ``` **Example Output**: ```python [(1, 350.0), (2, 240.0), (3, 175.0)] ``` **Requirements**: - The function should handle empty transactions list and return an empty list in such cases. - Ensure that the customer IDs and total sales amounts in the result are of appropriate types (integers for IDs and floats for amounts).","solution":"def summarize_sales(transactions): Summarizes the total sales amount for each customer, sorted in descending order by the total sales amount. Args: transactions (list): A list of sales transactions where each transaction is a dictionary. Returns: list: A list of tuples containing the customer ID and their corresponding total sales amount. from collections import defaultdict # Dictionary to hold the aggregated sales amounts per customer sales_summary = defaultdict(float) for transaction in transactions: customer_id = transaction[\'customer_id\'] amount = transaction[\'amount\'] sales_summary[customer_id] += amount # Convert the dictionary to a list of tuples and sort as required sorted_sales_summary = sorted(sales_summary.items(), key=lambda x: (-x[1], x[0])) return sorted_sales_summary"},{"question":"You are developing a simple messaging system where users can send and receive messages. Each message has a unique identifier, a sender, a recipient, and a content. Write a class `Message` to encapsulate the details of a message and a class `MessagingSystem` to manage sending, receiving, and viewing messages. The `MessagingSystem` class should use a dictionary to store messages by recipient. The `Message` class should have the following specifications: - **Class Name**: `Message` - **Attributes**: - `message_id` (int): Unique identifier for the message. - `sender` (str): Username of the sender. - `recipient` (str): Username of the recipient. - `content` (str): The message content. - **Methods**: - `__init__(self, message_id, sender, recipient, content)`: Initialize all attributes. The `MessagingSystem` class should have the following specifications: - **Class Name**: `MessagingSystem` - **Attributes**: - `messages` (dict): Dictionary to store messages, where keys are recipient usernames and values are lists of `Message` objects. - **Methods**: - `__init__(self)`: Initialize the `messages` dictionary. - `send_message(self, message)`: Add a message to the recipient\'s list of messages. - `receive_messages(self, recipient)`: Return a list of all messages for the given recipient. - `view_message(self, recipient, message_id)`: Return the message content for a specific message based on `message_id` and `recipient`, or `None` if the message is not found. Example: ```python # Creating message objects msg1 = Message(1, \'Alice\', \'Bob\', \'Hello Bob!\') msg2 = Message(2, \'Alice\', \'Charlie\', \'Hello Charlie!\') msg3 = Message(3, \'Bob\', \'Alice\', \'Hello Alice!\') # Creating MessagingSystem object and sending messages system = MessagingSystem() system.send_message(msg1) system.send_message(msg2) system.send_message(msg3) # Receiving and viewing messages print(system.receive_messages(\'Bob\')) # Output: [<Message object with content \'Hello Bob!\'>] print(system.view_message(\'Bob\', 1)) # Output: \'Hello Bob!\' print(system.view_message(\'Alice\', 3)) # Output: \'Hello Alice!\' print(system.view_message(\'Charlie\', 2)) # Output: \'Hello Charlie!\' ``` In summary: 1. Implement the `Message` class with its attributes and `__init__` method. 2. Implement the `MessagingSystem` class with the specified attributes and methods. 3. Ensure the methods in `MessagingSystem` handle sending, receiving, and viewing messages correctly.","solution":"class Message: def __init__(self, message_id, sender, recipient, content): self.message_id = message_id self.sender = sender self.recipient = recipient self.content = content class MessagingSystem: def __init__(self): self.messages = {} def send_message(self, message): if message.recipient not in self.messages: self.messages[message.recipient] = [] self.messages[message.recipient].append(message) def receive_messages(self, recipient): return self.messages.get(recipient, []) def view_message(self, recipient, message_id): for message in self.messages.get(recipient, []): if message.message_id == message_id: return message.content return None # Example usage: # msg1 = Message(1, \'Alice\', \'Bob\', \'Hello Bob!\') # msg2 = Message(2, \'Alice\', \'Charlie\', \'Hello Charlie!\') # msg3 = Message(3, \'Bob\', \'Alice\', \'Hello Alice!\') # system = MessagingSystem() # system.send_message(msg1) # system.send_message(msg2) # system.send_message(msg3) # print(system.receive_messages(\'Bob\')) # Output: [<Message object with content \'Hello Bob!\'>] # print(system.view_message(\'Bob\', 1)) # Output: \'Hello Bob!\' # print(system.view_message(\'Alice\', 3)) # Output: \'Hello Alice!\' # print(system.view_message(\'Charlie\', 2)) # Output: \'Hello Charlie!\'"},{"question":"Write a function named `merge_json_files` that takes two parameters: `file1` and `file2`, representing the filenames of two JSON files (without the extension). The function should read both JSON files into dictionaries using the `json.load` function and merge the contents of the two dictionaries. In case of key collisions, values from `file2` should overwrite those from `file1`. The function should save the merged dictionary into a new JSON file named `merged_file.json`. This exercise will help you practice reading and writing JSON files, as well as handling dictionary operations in Python. **Constraints/Requirements:** - You must use the `json` library, specifically the `json.load` function for reading JSON files and the `json.dump` function for writing JSON files. - The function should handle file paths correctly, treating the filenames appropriately to open and save files in the same directory. Here is an example of how the function should be used: ```python merge_json_files(\\"fileA\\", \\"fileB\\") # This function should read \\"fileA.json\\" and \\"fileB.json\\", merge their contents and create \\"merged_file.json\\" ```","solution":"import json def merge_json_files(file1, file2): Merges two JSON files. In case of key collisions, values from file2 overwrite those from file1. Parameters: file1 (str): The first JSON file to read (without .json extension). file2 (str): The second JSON file to read (without .json extension). The merged dictionary is saved to \'merged_file.json\'. with open(f\\"{file1}.json\\", \\"r\\") as f1: data1 = json.load(f1) with open(f\\"{file2}.json\\", \\"r\\") as f2: data2 = json.load(f2) # Merge the dictionaries. Values from data2 overwrite those in data1. merged_data = {**data1, **data2} # Write the merged dictionary to a new JSON file with open(\\"merged_file.json\\", \\"w\\") as f_out: json.dump(merged_data, f_out, indent=4)"},{"question":"Develop a function that takes a list of stock prices over time and calculates the maximum profit that could have been achieved by buying and then later selling the stock. The function should also return the days (indices) on which to buy and sell to achieve that maximum profit. If no profit can be made, the function should return 0 and None for the days. The function should raise the exception for: - ValueError: If the provided list is empty or contains less than two prices. The function should output: tuple: A tuple containing the maximum profit (int) and the tuple of days (buy day, sell day). If no profit can be made, return 0 and None. You should write self-contained code starting with: ``` def max_profit(stock_prices: list): ```","solution":"def max_profit(stock_prices: list): Calculate the maximum profit by buying and selling stock, along with days to buy and sell. Parameters: stock_prices (list): A list of stock prices over time. Returns: tuple: A tuple containing the maximum profit and a tuple of days (buy day, sell day). If no profit can be made, return 0 and None. If the input is invalid, raise ValueError. if not stock_prices or len(stock_prices) < 2: raise ValueError(\\"Need at least two stock prices to calculate profit\\") min_price = stock_prices[0] max_profit = 0 min_day = 0 buy_sell_days = None for current_day in range(1, len(stock_prices)): current_price = stock_prices[current_day] # Calculate profit if we sell at current_day potential_profit = current_price - min_price if potential_profit > max_profit: max_profit = potential_profit buy_sell_days = (min_day, current_day) # Update min_price if current_price is lower than min_price if current_price < min_price: min_price = current_price min_day = current_day if max_profit == 0: return 0, None return max_profit, buy_sell_days"},{"question":"You are given a list of words, and your task is to determine which words can be typed using letters of the alphabet on only one row of a QWERTY keyboard. The QWERTY keyboard rows are: - Row 1: \\"QWERTYUIOP\\" - Row 2: \\"ASDFGHJKL\\" - Row 3: \\"ZXCVBNM\\" Write a function `find_words_in_one_row` that takes a list of words and returns a list of words that can be typed using letters from only one row of the QWERTY keyboard. Here\'s the definition of the function: ```python def find_words_in_one_row(words): # Your code here pass ``` # Input - `words`: A list of strings representing the words to be evaluated. # Output - A list of strings representing the words that can be typed using only one row of the QWERTY keyboard. # Example ```python # Example input words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"] # Example output result = find_words_in_one_row(words) print(result) # Output: [\\"Alaska\\", \\"Dad\\"] ``` # Constraints 1. All words contain only alphabets. 2. Words are case insensitive, so \\"a\\" and \\"A\\" are considered the same. # Detailed Explanation - Convert each word to uppercase (or lowercase) for uniformity. - Determine which row(s) the letters of each word belong to. - Check if all characters in a word belong to the same row. - Return the list of words that can be typed using letters from only one row of the keyboard.","solution":"def find_words_in_one_row(words): Returns a list of words that can be typed using letters from only one row of the QWERTY keyboard. row1 = set(\\"QWERTYUIOP\\") row2 = set(\\"ASDFGHJKL\\") row3 = set(\\"ZXCVBNM\\") one_row_words = [] for word in words: upper_word = word.upper() # Check which row to use if set(upper_word).issubset(row1) or set(upper_word).issubset(row2) or set(upper_word).issubset(row3): one_row_words.append(word) return one_row_words"},{"question":"You are asked to design a Python function named `analyze_weather_patterns` that helps in visualizing weather data trends from different cities over a period of time. Using `matplotlib.pyplot` and `pandas` libraries, you will create a line plot that showcases the temperature trends and another plot that shows the rainfall trends. Specifically, your function should: 1. Create a figure with a size of 18x8 inches. 2. In the first subplot (top half), generate a line plot depicting the temperature trends for each city. The data for this plot is provided in a DataFrame named `temperature_df` which contains columns: \'date\', \'city\', and \'temperature\'. 3. In the second subplot (bottom half), generate a line plot depicting the rainfall trends for each city. The data for this plot is provided in a DataFrame named `rainfall_df` which contains columns: \'date\', \'city\', and \'rainfall\'. 4. Add appropriate titles, axis labels, and legends to both subplots to clearly explain the data being presented. The function signature should be: ```python def analyze_weather_patterns(temperature_df, rainfall_df): ``` Ensure that your function utilizes the following APIs from the `matplotlib.pyplot` package: - `figure` - `subplot` - `plot` - `title` - `xlabel` - `ylabel` - `legend` Here’s a brief overview of the dataframes: # `temperature_df` | date | city | temperature (float) | | ---------- | --------- | -------------------- | | 2023-01-01 | New York | -1.3 | | 2023-01-01 | Los Angeles | 15.5 | | ... | ... | ... | # `rainfall_df` | date | city | rainfall (float) | | ---------- | --------- | ---------------- | | 2023-01-01 | New York | 2.3 | | 2023-01-01 | Los Angeles | 0.0 | | ... | ... | ... |","solution":"import matplotlib.pyplot as plt import pandas as pd def analyze_weather_patterns(temperature_df, rainfall_df): This function visualizes the weather data trends over time for different cities. parameters: temperature_df (pd.DataFrame): A dataframe containing date, city, and temperature columns. rainfall_df (pd.DataFrame): A dataframe containing date, city, and rainfall columns. # Create figure and subplots fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(18, 8)) # Plot temperature trends for each city in the first subplot for city in temperature_df[\'city\'].unique(): city_data = temperature_df[temperature_df[\'city\'] == city] ax1.plot(city_data[\'date\'], city_data[\'temperature\'], label=city) # Add titles and labels for the temperature plot ax1.set_title(\'Temperature Trends Over Time\') ax1.set_xlabel(\'Date\') ax1.set_ylabel(\'Temperature (°C)\') ax1.legend(title=\'City\') # Plot rainfall trends for each city in the second subplot for city in rainfall_df[\'city\'].unique(): city_data = rainfall_df[rainfall_df[\'city\'] == city] ax2.plot(city_data[\'date\'], city_data[\'rainfall\'], label=city) # Add titles and labels for the rainfall plot ax2.set_title(\'Rainfall Trends Over Time\') ax2.set_xlabel(\'Date\') ax2.set_ylabel(\'Rainfall (mm)\') ax2.legend(title=\'City\') # Display the plot plt.tight_layout() plt.show()"},{"question":"Write a function that generates a multi-class classification dataset using given parameters and visualizes it using Matplotlib. The generated dataset should use make_classification from sklearn, and the plot should use a scatter plot to show different classes with different colors. The function should return the dataset arrays and the plot object. Note that: - The plot title is \\"Multi-class Classification Dataset\\". - The x-label of the plot is \\"Feature 1\\". - The y-label of the plot is \\"Feature 2\\". - Different classes are represented with different colors and markers in the plot. The function should output: numpy.ndarray: The feature array of shape (n_samples, n_features). numpy.ndarray: The target array of shape (n_samples,). matplotlib.figure.Figure: The figure object of the plot. matplotlib.axes.Axes: The axes object of the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import make_classification def task_func(num_samples, num_features, num_classes, num_clusters_per_class, random_state): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import make_classification def task_func(num_samples, num_features, num_classes, num_clusters_per_class, random_state): X, y = make_classification(n_samples=num_samples, n_features=num_features, n_informative=num_features, n_redundant=0, n_classes=num_classes, n_clusters_per_class=num_clusters_per_class, random_state=random_state) fig, ax = plt.subplots() scatter = ax.scatter(X[:, 0], X[:, 1], c=y, cmap=\'viridis\', marker=\'o\') ax.set_title(\'Multi-class Classification Dataset\') ax.set_xlabel(\'Feature 1\') ax.set_ylabel(\'Feature 2\') # Create a legend for different classes legend1 = ax.legend(*scatter.legend_elements(), title=\\"Classes\\") ax.add_artist(legend1) return X, y, fig, ax"},{"question":"# Context Natural language processing often involves tasks that require understanding and manipulating text data. One common task is word frequency analysis, where we analyze the frequency of each word in a given text. This is useful in many applications, such as text summarization, keyword extraction, and sentiment analysis. # Objective Your task is to develop a Python function `word_frequencies` that takes in a string of text `text` and returns a dictionary where the keys are words and the values are the number of times each word appears in the text. # Function Signature ```python def word_frequencies(text: str) -> Dict[str, int]: ``` # Input - `text`: A string representing the input text. The text can contain any characters, including punctuation and whitespace. # Output - A dictionary where the keys are words (represented as lowercase strings) and the values are integers representing the word frequencies. # Requirements 1. Convert all words to lowercase to ensure case-insensitive counting. 2. Ignore punctuation and special characters. Only consider alphanumeric characters as part of words. 3. Return the words in the dictionary in the order they first appear in the input text. 4. Handle the case where the input text is empty by returning an empty dictionary. # Hints - Use Python\'s `str.lower` method to convert text to lowercase. - Use regular expressions (via the `re` module) to split the text into words, considering only alphanumeric characters. # Example ```python text = \\"Hello, world! Hello... you: welcome.\\" word_freq = word_frequencies(text) print(word_freq) ``` # Expected Output ```python { \\"hello\\": 2, \\"world\\": 1, \\"you\\": 1, \\"welcome\\": 1 } ```","solution":"from typing import Dict import re from collections import defaultdict def word_frequencies(text: str) -> Dict[str, int]: Returns a dictionary of word frequencies from the given text. Parameters: text (str): The input text. Returns: Dict[str, int]: A dictionary where keys are words and values are their frequencies. # Convert text to lowercase text = text.lower() # Use regular expression to find all words words = re.findall(r\'bw+b\', text) # Initialize default dictionary to count words freq_dict = defaultdict(int) for word in words: freq_dict[word] += 1 # Convert defaultdict to regular dict before returning return dict(freq_dict)"},{"question":"You are required to write a single Python function called `process_and_write_transactions` that fetches data from a JSON endpoint, processes it, and writes the transaction details into a file named \\"transactions.txt\\". The data from the JSON endpoint contains a list of transactions with their IDs, amounts, and timestamps. Your task is to do the following: 1. Fetch the JSON data from the URL `http://example.com/api/transactions`. 2. Parse the JSON data using the `json.loads` function. 3. Convert the timestamps from ISO 8601 format to a more readable string format (\'YYYY-MM-DD HH:MM:SS\'). 4. Write these formatted strings into a file named \\"transactions.txt\\". Assume the JSON data format is as follows: ```json [ {\\"id\\": \\"trans1\\", \\"amount\\": 250.75, \\"timestamp\\": \\"2023-10-23T18:25:43.511Z\\"}, {\\"id\\": \\"trans2\\", \\"amount\\": 104.00, \\"timestamp\\": \\"2023-10-24T10:10:14.123Z\\"}, ... ] ``` Your function should follow these steps explicitly and make appropriate use of the `json.loads` function. Use Python\'s `datetime` module to parse and format the timestamps. Example of converting an ISO 8601 timestamp to the readable format: ```python from datetime import datetime def format_timestamp(timestamp): dt = datetime.fromisoformat(timestamp.replace(\\"Z\\", \\"+00:00\\")) formatted_time = dt.strftime(\'%Y-%m-%d %H:%M:%S\') return formatted_time ``` Ensure each line in \\"transactions.txt\\" has the following format: ``` Transaction ID: trans1, Amount: 250.75, Time: 2023-10-23 18:25:43 Transaction ID: trans2, Amount: 104.00, Time: 2023-10-24 10:10:14 ``` Your function should correctly handle and format each transaction record fetched from the URL and write them line-by-line into the output file.","solution":"import requests import json from datetime import datetime def format_timestamp(timestamp): Converts ISO 8601 timestamp to \'YYYY-MM-DD HH:MM:SS\' format. dt = datetime.fromisoformat(timestamp.replace(\\"Z\\", \\"+00:00\\")) formatted_time = dt.strftime(\'%Y-%m-%d %H:%M:%S\') return formatted_time def process_and_write_transactions(url): Fetches transactions from a JSON endpoint, processes them, and writes the formatted transaction details into \'transactions.txt\'. response = requests.get(url) transactions = json.loads(response.text) with open(\'transactions.txt\', \'w\') as file: for transaction in transactions: transaction_id = transaction[\'id\'] amount = transaction[\'amount\'] timestamp = transaction[\'timestamp\'] formatted_time = format_timestamp(timestamp) line = f\\"Transaction ID: {transaction_id}, Amount: {amount:.2f}, Time: {formatted_time}n\\" file.write(line)"},{"question":"You are tasked with developing a function that reads a list of URLs from a text file and checks if each URL is reachable by making a GET request. The function should write the results to another text file indicating whether each URL is valid (reachable) or invalid (not reachable). Function Signature ```python def check_urls(input_file: str, output_file: str) -> None: ``` Arguments - `input_file` (str): The path to the text file containing the list of URLs to be checked. - `output_file` (str): The path to the text file where the results should be written. Behavior - The function should: 1. Read the list of URLs from the `input_file`, each URL on a new line. 2. For each URL, make an HTTP GET request to check if it is reachable. 3. Write the results to the `output_file` in the format `URL: valid` if the request is successful (status code 200) and `URL: invalid` otherwise (any other status code or a connection error). Example Suppose `input_file` contains: ``` http://example.com http://nonexistentwebsite.com http://google.com ``` After running `check_urls(\'input.txt\', \'output.txt\')`, the contents of `output.txt` should be: ``` http://example.com: valid http://nonexistentwebsite.com: invalid http://google.com: valid ``` Objective Write the `check_urls` function to meet the described behavior, using the `requests` library for making HTTP GET requests.","solution":"import requests def check_urls(input_file: str, output_file: str) -> None: Reads URLs from `input_file`, checks their reachability via HTTP GET requests, and writes the results to `output_file`. with open(input_file, \'r\') as infile: urls = infile.readlines() results = [] for url in urls: url = url.strip() try: response = requests.get(url) if response.status_code == 200: results.append(f\\"{url}: valid\\") else: results.append(f\\"{url}: invalid\\") except requests.exceptions.RequestException: results.append(f\\"{url}: invalid\\") with open(output_file, \'w\') as outfile: for result in results: outfile.write(result + \'n\')"},{"question":"You need to write a function named `generate_primes` that takes an integer parameter `n` and returns a list of the first `n` prime numbers. Your function should have the following signature: ```python def generate_primes(n: int) -> list: ``` **Requirements:** 1. The function should be efficient and use the Sieve of Eratosthenes algorithm for generating the prime numbers. 2. The function should handle the case where `n` is 0 by returning an empty list. 3. Make sure your function only includes actual prime numbers in the result. 4. The function should handle cases where `n` is a smaller number efficiently without unnecessary computations. **Example Usage:** ```python print(generate_primes(5)) # Output: [2, 3, 5, 7, 11] print(generate_primes(10)) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] print(generate_primes(0)) # Output: [] ``` This should return a list of the first `n` prime numbers based on the value of `n` provided as input.","solution":"def generate_primes(n: int) -> list: Returns a list of the first n prime numbers using the Sieve of Eratosthenes algorithm. if n == 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"You are developing a game where a robotic arm sorts colored balls into different bins based on the ball\'s color. Each ball has a color represented by a string (\\"red\\", \\"green\\", \\"blue\\", etc.) and a position in 2D space represented by a tuple (x, y). The robotic arm has a fixed position at the origin (0, 0). Your task is to create a function `sort_balls` that takes in a list of balls with their colors and positions and sorts them into different bins. Each bin is represented by a key in a dictionary where the key is the color of the balls and the value is a list of their positions. The balls should be sorted into the bins in the order they are provided. ```python def sort_balls(ball_list): Sort balls into bins based on their color. Parameters: ----------- ball_list : list of tuples Each tuple contains a color (str) and position (tuple of two integers). Returns: -------- dict A dictionary where keys are colors and values are lists of positions. pass ``` **Example:** ```python ball_list = [(\\"red\\", (1, 2)), (\\"blue\\", (1, 3)), (\\"red\\", (2, 5)), (\\"green\\", (0, 0)), (\\"blue\\", (4, 1))] sorted_bins = sort_balls(ball_list) # Output: { # \\"red\\": [(1, 2), (2, 5)], # \\"blue\\": [(1, 3), (4, 1)], # \\"green\\": [(0, 0)] # } ``` - Each ball is represented as a tuple with the first element being the color and the second element the position in the format (x, y). - The function should create a dictionary where each color is a key, and the value is a list of tuples representing the positions of balls of that color. - The order of positions in each list should match the order they appear in the input list. **Hint:** Utilize a dictionary to store the balls based on their colors as you iterate through the input list.","solution":"def sort_balls(ball_list): Sort balls into bins based on their color. Parameters: ----------- ball_list : list of tuples Each tuple contains a color (str) and position (tuple of two integers). Returns: -------- dict A dictionary where keys are colors and values are lists of positions. bins = {} for color, position in ball_list: if color not in bins: bins[color] = [] bins[color].append(position) return bins"},{"question":"You are tasked with creating a function that identifies the next closest time using the same digits as the given time. This function can be useful for performing time calculations in digital applications or embedded systems. You\'ll be provided with a string representing a time in \\"HH:MM\\" format. The function should calculate the smallest time that can be formed using the same digits, which is strictly greater than the given time. If no such time exists on the same day, the function should wrap around to the next day. Your task is to implement the following function: ```python def next_closest_time(time_str): Finds the next closest time using the same digits as the given time. Parameters: time_str (str): The time in \\"HH:MM\\" format. Returns: str: The next closest time using the same digits. pass ``` **Requirements:** 1. Use only the digits in the input time string to form the next closest time. 2. Ensure the resulting time is in the \\"HH:MM\\" 24-hour format. 3. Handle the case where the next closest time is on the next day. # Example: ```python time_str = \\"19:34\\" result = next_closest_time(time_str) print(result) # Expected output: \\"19:39\\" time_str = \\"23:59\\" result = next_closest_time(time_str) print(result) # Expected output: \\"22:22\\" ``` In the first example, `next_closest_time(\\"19:34\\")` should return \\"19:39\\" as the next closest time using the same digits. In the second example, `next_closest_time(\\"23:59\\")` should return \\"22:22\\" because it\'s the smallest next time formed by the same digits, even though it\'s on the next day.","solution":"def next_closest_time(time_str): Finds the next closest time using the same digits as the given time. Parameters: time_str (str): The time in \\"HH:MM\\" format. Returns: str: The next closest time using the same digits. from itertools import product digits = set(time_str.replace(\':\', \'\')) current_minutes = int(time_str[:2]) * 60 + int(time_str[3:]) # Generate all possible times from the digits all_possible_times = sorted( set( (int(h1) * 10 + int(h2)) * 60 + (int(m1) * 10 + int(m2)) for h1, h2, m1, m2 in product(digits, repeat=4) if \'0\' <= h1 <= \'2\' and \'0\' <= m1 <= \'5\' and (h1 != \'2\' or h2 <= \'3\') ) ) # Find the next possible time for t in all_possible_times: if t > current_minutes: return f\'{t // 60:02}:{t % 60:02}\' # If no valid time is found, return the first valid time for the next day return f\'{all_possible_times[0] // 60:02}:{all_possible_times[0] % 60:02}\'"},{"question":"You are required to implement a function that simulates the Unix `diff` command, which compares two text files line-by-line and produces the differences between them. Create a function `diff(file_path1, file_path2)` that takes two arguments: 1. `file_path1` (a string): The file path of the first file to be compared. 2. `file_path2` (a string): The file path of the second file to be compared. The function should read the contents of both files and compare them line by line. For each line, if the lines are different, it should be recorded in a list of tuples where each tuple holds: - The line number (starting from 0). - The line from the first file. - The line from the second file. The function should return this list of differences. # Example Usage ```python # Let\'s assume we have the following two files: # file1.txt contents: # Line 1 # Line 2 # Line 3 # file2.txt contents: # Line 1 # Line Two # Line 3 result = diff(\'file1.txt\', \'file2.txt\') print(result) # Output: [(1, \'Line 2\', \'Line Two\')] ``` # Requirements - Implement the `diff` function. - Ensure the function reads from the given file paths and compares the files line by line. - Return the differences in the specified format.","solution":"def diff(file_path1, file_path2): Compare two text files line-by-line and return the differences. Args: file_path1 (str): Path to the first file. file_path2 (str): Path to the second file. Returns: list: A list of tuples, where each tuple contains: (line number, line from file_path1, line from file_path2). differences = [] with open(file_path1, \'r\') as file1, open(file_path2, \'r\') as file2: file1_lines = file1.readlines() file2_lines = file2.readlines() max_lines = max(len(file1_lines), len(file2_lines)) for line_num in range(max_lines): line_file1 = file1_lines[line_num] if line_num < len(file1_lines) else \'\' line_file2 = file2_lines[line_num] if line_num < len(file2_lines) else \'\' if line_file1 != line_file2: differences.append((line_num, line_file1.strip(), line_file2.strip())) return differences"},{"question":"Create a function named `draw_square()` that utilizes the Python `turtle` graphics library to draw a square. The function should follow these specific instructions: 1. Set the turtle\'s pen color to \\"blue\\". 2. Set the turtle\'s pen width to 5 units. 3. Ensure the turtle starts every new side facing right. 4. The turtle should draw a square with each side being 50 units in length. Use the following APIs from the `turtle` library to execute these actions: - `turtle.color` - `turtle.pensize` - `turtle.setheading` - `turtle.forward` - `turtle.right` The graphics window should display a blue square when the `draw_square()` function is called.","solution":"import turtle def draw_square(): Draws a blue square with each side being 50 units in length using turtle graphics. turtle.color(\\"blue\\") turtle.pensize(5) for _ in range(4): turtle.setheading(0) turtle.forward(50) turtle.right(90) # This is to ensure the graphics window stays open (especially useful in IDEs) turtle.done()"},{"question":"You are tasked with writing a function `countPaths` that counts all the possible paths from the top-left corner to the bottom-right corner of a m x n grid. You can only move either down or right at any point in time. This function is useful for understanding the dynamics of recursion, memoization, and combinatorial problems in grid traversal. **Function Specification**: - **Function Name**: `countPaths` - **Purpose**: To count all the possible paths from the top-left corner to the bottom-right corner in an m x n grid. - **Inputs**: 1. `m` (int): The number of rows in the grid. 2. `n` (int): The number of columns in the grid. - **Outputs**: 1. (int): The total number of possible paths from the top-left corner to the bottom-right corner. **Steps**: 1. Define a recursive function that takes the current position in the grid as parameters. 2. If the current position is the bottom-right corner, return 1. 3. If the current position is outside the grid boundaries, return 0. 4. Recursively move to the right and downward positions and sum their results. 5. Use an additional data structure (e.g., dictionary) to store already computed values for specific positions (memoization). 6. Return the computed number of paths for the top-left corner from the recursive function. **Requirements**: - Use a recursive approach with memoization to optimize the solution for larger grids. - Consider edge cases such as grids with one row or one column. # Example ```python print(countPaths(3, 3)) # Output: 6 ```","solution":"def countPaths(m, n, memo=None): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. Parameters: m (int): number of rows n (int): number of columns Returns: int: number of unique paths if memo is None: memo = {} if m == 1 or n == 1: return 1 if (m, n) in memo: return memo[(m, n)] memo[(m, n)] = countPaths(m-1, n, memo) + countPaths(m, n-1, memo) return memo[(m, n)]"},{"question":"You are given a dataset representing temperature variations over a year, with two lists: - `months` (a list of abbreviations for each month, e.g., \'Jan\', \'Feb\', \'Mar\', etc.) - `temperatures` (a list of average temperatures corresponding to each month) Your task is to implement a function `plot_temperature_trend` that utilizes the `matplotlib` library to create a single line plot visualizing these temperature variations over the year. The plot should: 1. Plot the dataset with `plt.plot`. 2. Label the x-axis with \'Month\'. 3. Label the y-axis with \'Average Temperature (°C)\'. 4. Enable the grid lines using `plt.grid()`. 5. Set an appropriate title for the plot. 6. Add annotations to highlight the highest and lowest temperatures in the year. The annotations should indicate the value and the corresponding month. 7. Use a distinct color for the line plot. Finally, make sure to display the figure using `plt.show()`. Function signature: `def plot_temperature_trend(months, temperatures):` Example usage: ```python plot_temperature_trend([\'Jan\', \'Feb\', \'Mar\', \'Apr\', \'May\', \'Jun\', \'Jul\', \'Aug\', \'Sep\', \'Oct\', \'Nov\', \'Dec\'], [5, 6, 10, 13, 18, 21, 25, 24, 20, 14, 9, 6]) ```","solution":"import matplotlib.pyplot as plt def plot_temperature_trend(months, temperatures): Plots the temperature trend over a year with annotations for the highest and lowest temperatures. Parameters: months (list of str): List of month abbreviations. temperatures (list of float): List of average temperatures corresponding to each month. # Ensure the months and temperatures lists are valid if not (months and temperatures) or len(months) != len(temperatures): raise ValueError(\\"Months and temperatures must be non-empty lists of the same length\\") # Determine the highest and lowest temperatures and their indices max_temp = max(temperatures) min_temp = min(temperatures) max_index = temperatures.index(max_temp) min_index = temperatures.index(min_temp) # Plot the temperature trend plt.figure(figsize=(10, 5)) plt.plot(months, temperatures, marker=\'o\', color=\'b\', linestyle=\'-\', linewidth=2, markersize=6) # Add axis labels and title plt.xlabel(\'Month\') plt.ylabel(\'Average Temperature (°C)\') plt.title(\'Temperature Trend Over the Year\') # Enable grid lines plt.grid(True) # Add annotations for the highest and lowest temperatures plt.annotate(f\'Highest: {max_temp}°C\', xy=(max_index, max_temp), xytext=(max_index, max_temp + 2), arrowprops=dict(facecolor=\'black\', shrink=0.05)) plt.annotate(f\'Lowest: {min_temp}°C\', xy=(min_index, min_temp), xytext=(min_index, min_temp - 2), arrowprops=dict(facecolor=\'black\', shrink=0.05)) # Display the plot plt.show()"},{"question":"You are required to create a program that simulates a simple banking system. Create a class named `BankAccount` that represents a user\'s account and supports the following functionalities: 1. Initialize the account with the user\'s name and initial balance. 2. Deposit an amount to increase the balance. 3. Withdraw an amount to decrease the balance, only if sufficient funds are available. 4. Check the current balance. 5. Transfer an amount from one `BankAccount` instance to another, ensuring the transfer only occurs if there are sufficient funds in the source account. **Function Signatures:** ```python class BankAccount: def __init__(self, user_name: str, initial_balance: float): # # Initialize with user_name and initial_balance. # def deposit(self, amount: float) -> None: # # Increase the balance by \'amount\'. # def withdraw(self, amount: float) -> bool: # # Decrease the balance by \'amount\' if sufficient funds are available. # Return True if withdrawal succeeds, else False. # def check_balance(self) -> float: # # Return the current balance. # def transfer(self, target_account: \'BankAccount\', amount: float) -> bool: # # Transfer \'amount\' from the current account to \'target_account\' # if there are sufficient funds. Return True if transfer succeeds, # else False. # ``` **Example Usage:** ```python # Create two bank accounts: account1 = BankAccount(\\"Alice\\", 1000.0) account2 = BankAccount(\\"Bob\\", 500.0) # Deposit funds: account1.deposit(200.0) # Check balance: print(account1.check_balance()) # Should output: 1200.0 # Withdraw funds: account1.withdraw(300.0) # Check balance: print(account1.check_balance()) # Should output: 900.0 # Transfer funds: result = account1.transfer(account2, 500.0) # Check balances after transfer: print(account1.check_balance()) # Should output: 400.0 print(account2.check_balance()) # Should output: 1000.0 ``` **Instructions:** 1. Define the `BankAccount` class with the specified methods. 2. Ensure that appropriate error checks are in place, such as ensuring no negative balances during withdrawals and transfers. 3. Implement the logic for each method within the class. 4. Provide sufficient comments within the code to explain the workings of each method.","solution":"class BankAccount: def __init__(self, user_name: str, initial_balance: float): Initialize with user_name and initial_balance. self.user_name = user_name self.balance = initial_balance def deposit(self, amount: float) -> None: Increase the balance by \'amount\'. self.balance += amount def withdraw(self, amount: float) -> bool: Decrease the balance by \'amount\' if sufficient funds are available. Return True if withdrawal succeeds, else False. if amount <= self.balance: self.balance -= amount return True return False def check_balance(self) -> float: Return the current balance. return self.balance def transfer(self, target_account: \'BankAccount\', amount: float) -> bool: Transfer \'amount\' from the current account to \'target_account\' if there are sufficient funds. Return True if transfer succeeds, else False. if self.withdraw(amount): target_account.deposit(amount) return True return False"},{"question":"You are to write a function named `string_permutations` that takes a single parameter `s`, which is a string. This function should return a list of all possible unique permutations of the characters in the string. The order of the permutations in the list does not matter. To achieve this, you need to use the `itertools.permutations` function from the `itertools` library in Python. Your function should follow this structure: ```python def string_permutations(s): # Implementation goes here ``` **Requirements:** 1. Use the `itertools.permutations` function to generate all possible permutations of the input string. 2. Ensure that the function returns only unique permutations, even if the input string contains duplicate characters. 3. Convert each permutation tuple back into a string before adding it to the results list. 4. The function should return the list of unique permutations. Here’s an example usage of the function: ```python # Call the function with the string \\"abc\\" print(string_permutations(\\"abc\\")) ``` Expected output (order does not matter): ``` [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` Make sure to test your function with strings containing duplicate characters to ensure that it returns only unique permutations.","solution":"from itertools import permutations def string_permutations(s): Returns a list of all unique permutations of the characters in the string s. perm_set = set(permutations(s)) return [\'\'.join(p) for p in perm_set]"},{"question":"You are asked to implement a function called `most_frequent_element` that identifies the most frequent element in a given list. If there are multiple elements with the same highest frequency, return the one which appears first in the list. # Function Signature ```python def most_frequent_element(elements: list) -> int: pass ``` # Input - `elements`: A list of integers which may contain positive, negative numbers, or zeros. # Output - Return an integer which is the most frequent element in the given list. # Requirements - Use a dictionary to keep track of the frequency of each element. - Ensure the function runs in linear time relative to the input size. # Example Given the input: ```python elements = [3, 1, 4, 4, 5, 1, 1, 2, 4, 3] result = most_frequent_element(elements) ``` The function should return: ``` 1 ``` as the element `1` appears the most frequently in the list (3 times), and appears before the other element with the same highest frequency (4).","solution":"def most_frequent_element(elements: list) -> int: Identifies the most frequent element in a given list. If there are multiple elements with the same highest frequency, returns the one which appears first in the list. Args: elements (list): A list of integers. Returns: int: The most frequent element. if not elements: return None # If the list is empty, return None frequency = {} max_count = 0 most_frequent = elements[0] for element in elements: if element in frequency: frequency[element] += 1 else: frequency[element] = 1 if frequency[element] > max_count: max_count = frequency[element] most_frequent = element elif frequency[element] == max_count: if elements.index(most_frequent) > elements.index(element): most_frequent = element return most_frequent"},{"question":"You need to design a Python function that generates a specified number of Fibonacci numbers and returns them as a list. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. To accomplish this task, you\'ll need to: 1. Handle the special case where the number of Fibonacci numbers requested (`n`) is less than or equal to zero by returning an empty list. 2. Initialize the first two Fibonacci numbers. 3. Generate the rest of the Fibonacci numbers up to `n` and store them in a list. 4. Return the list of Fibonacci numbers. The name of the function must be `generate_fibonacci`. **Function Signature:** ```python def generate_fibonacci(n: int) -> list: pass ``` **Example Usage:** When the function is called as follows: ```python generate_fibonacci(5) ``` It should return the list: ``` [0, 1, 1, 2, 3] ``` When the function is called as follows: ```python generate_fibonacci(10) ``` It should return the list: ``` [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` Ensure that your implementation handles edge cases, such as when `n` is zero or negative.","solution":"def generate_fibonacci(n: int) -> list: Generates a list of the first n Fibonacci numbers. Args: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"You are required to implement a function named `evaluate_boolean_expression` that evaluates a boolean expression provided as a string. The expression will only contain the operators AND (`&&`), OR (`||`), and NOT (`!`), along with boolean values (`True`, `False`). The expression may also contain parentheses to indicate the order of operations. The function should take one argument: - `expression`: A string representing the boolean expression. The expression is guaranteed to be a valid boolean expression. Use Python\'s built-in `eval` function with appropriate safeguards to evaluate the expression. Ensure that the use of `eval` is restricted to only evaluating boolean expressions to mitigate any security risks. # Example ```python expression = \\"True && False\\" print(evaluate_boolean_expression(expression)) # Output: # False expression = \\"True || False\\" print(evaluate_boolean_expression(expression)) # Output: # True expression = \\"!True || False\\" print(evaluate_boolean_expression(expression)) # Output: # False expression = \\"!(True && False) || (False && !False)\\" print(evaluate_boolean_expression(expression)) # Output: # True ``` # Function Signature ```python def evaluate_boolean_expression(expression: str) -> bool: pass ``` # Constraints 1. The `expression` string will have a maximum length of (10^3) characters. 2. The expression is guaranteed to be syntactically correct. 3. The `expression` will only contain the characters: `T`, `r`, `u`, `e`, `F`, `a`, `l`, `s`, `e`, `&`, `|`, `!`, `(`, `)`, and spaces. Your task is to implement `evaluate_boolean_expression`. ---","solution":"def evaluate_boolean_expression(expression: str) -> bool: Evaluates a boolean expression given as a string. Operators: - AND: && - OR: || - NOT: ! Args: expression (str): The boolean expression as a string. Returns: bool: The result of the evaluated expression. # Replace \'&&\', \'||\', and \'!\' with Python\'s \'and\', \'or\', and \'not\' expression = expression.replace(\'&&\', \' and \') expression = expression.replace(\'||\', \' or \') expression = expression.replace(\'!\', \' not \') # Use eval in a restricted scope allowed_names = {\\"True\\": True, \\"False\\": False} return eval(expression, {\\"__builtins__\\": None}, allowed_names)"},{"question":"You are given a CSV file `\'products.csv\'` containing information about products in an e-commerce store. Each product has a name, category, and price. Your task is to write a function named `average_price_per_category()` that calculates the average price of products for each category and returns the result as a dictionary. Specifically, you need to: 1. Read the CSV file `\'products.csv\'`. 2. Process the data to calculate the average price of products for each category. 3. Return a dictionary where the keys are the product categories, and the values are the average prices. The CSV file has the following columns: - `name`: The name of the product. - `category`: The category of the product. - `price`: The price of the product. Here is an example structure of the CSV data: ``` name,category,price Product1,Electronics,299.99 Product2,Clothing,49.99 Product3,Electronics,199.99 ... ``` Your function should return a dictionary like: ``` { \'Electronics\': 249.99, \'Clothing\': 49.99, ... } ``` Make sure to handle any potential issues with the data, such as missing values or different price formats.","solution":"import csv from collections import defaultdict def average_price_per_category(filename=\'products.csv\'): Calculates average price of products for each category in the CSV file. Parameters: filename (str): The path to the CSV file. Returns: dict: A dictionary with categories as keys and their average prices as values. categories = defaultdict(list) with open(filename, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: try: price = float(row[\'price\']) categories[row[\'category\']].append(price) except ValueError: # Skip rows with invalid price values continue average_prices = {category: sum(prices) / len(prices) for category, prices in categories.items()} return average_prices"},{"question":"You are tasked with developing a weather data processor that reads and transforms weather data from multiple cities. Your task is to create a function `process_weather_data` that performs the following steps: 1. Generates a dictionary `weather_data` where each key is a city name (string) and the value is a list of 7 random integer temperatures between -10 and 40 (representing a week\'s weather). 2. Filters out cities where any temperature is below 0 into a new dictionary `filtered_cities`. 3. Creates a pandas DataFrame from the `weather_data` dictionary, with city names as the index and days of the week (Day 1 to Day 7) as column headers. 4. Prints the name of the city along with its average temperature for the week. 5. Identifies and prints the city with the highest average temperature. Make sure to use the given library `pandas.DataFrame` correctly in your implementation. **Function Signature:** ```python def process_weather_data(): ```","solution":"import random import pandas as pd def process_weather_data(): cities = [\\"CityA\\", \\"CityB\\", \\"CityC\\", \\"CityD\\", \\"CityE\\"] weather_data = {city: [random.randint(-10, 40) for _ in range(7)] for city in cities} filtered_cities = {city: temps for city, temps in weather_data.items() if all(temp >= 0 for temp in temps)} df = pd.DataFrame.from_dict(weather_data, orient=\'index\', columns=[f\'Day {i+1}\' for i in range(7)]) for city, temps in weather_data.items(): avg_temp = sum(temps) / len(temps) print(f\\"{city}: Average Temperature = {avg_temp:.2f}\\") highest_avg_temp_city = max(weather_data, key=lambda city: sum(weather_data[city]) / len(weather_data[city])) print(f\\"City with the highest average temperature: {highest_avg_temp_city}\\") return weather_data, filtered_cities, df"},{"question":"You are tasked with developing a function that parses a JSON file containing information about books in a library and returns the data in a structured manner. The JSON file will have the following structure: ```json [ { \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960, \\"genres\\": [\\"Fiction\\", \\"Drama\\"] }, { \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949, \\"genres\\": [\\"Fiction\\", \\"Dystopian\\", \\"Science Fiction\\"] } ] ``` Each JSON object contains the book\'s title, author, year of publication, and genres. Your function should read this JSON file and return a list of dictionaries, where each dictionary represents a book with its details. To achieve this, you are required to use the `json` module from Python. **Function Name:** `read_books` **Input:** - `file_name`: Name of the JSON file (default is \\"books.json\\"). **Output:** - A list of dictionaries, where each dictionary contains the details of a book. **Instructions:** 1. Read the JSON file using the `json.load` function. 2. Parse the JSON data into a list of dictionaries. 3. Return the list of dictionaries. ```python # Example >>> read_books() [ { \'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'year\': 1960, \'genres\': [\'Fiction\', \'Drama\'] }, { \'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949, \'genres\': [\'Fiction\', \'Dystopian\', \'Science Fiction\'] } ] ```","solution":"import json def read_books(file_name=\\"books.json\\"): Reads a JSON file and returns a list of dictionaries, each representing a book. :param file_name: The name of the JSON file to read from. Default is \\"books.json\\". :return: A list of dictionaries representing the books. with open(file_name, \'r\') as file: books = json.load(file) return books"},{"question":"You are tasked with implementing a function to model and plot the exponential growth of a biological sample size over time, using the matplotlib library in Python. The goal is to practice using specific matplotlib functions for plotting and customizing the graph. Create a function named `plot_exponential_growth(initial_size: float, growth_rate: float, time_periods: int)` which takes in the following parameters: - `initial_size`: A float representing the initial size of the sample. - `growth_rate`: A float representing the growth rate per period. - `time_periods`: An integer representing the total number of time periods. The function should: 1. Calculate the size of the sample at each time period using the formula: `size = initial_size * (growth_rate ** t)`, where `t` is the time period. 2. Generate a list of sample sizes for every time period from 0 to `time_periods`. 3. Plot the sample sizes over the time periods. 4. Set the title of the graph to \'Exponential Growth of Biological Sample\'. 5. Label the x-axis as \\"Time Period\\" and the y-axis as \\"Sample Size\\". 6. Add a grid to the graph for better readability. 7. Display the graph. Use the following specific `matplotlib.pyplot` functions in your implementation: - `plot` - `title` - `xlabel` - `ylabel` - `grid` - `show` Note: Ensure you import the necessary components from the matplotlib library at the beginning of your function.","solution":"import matplotlib.pyplot as plt def plot_exponential_growth(initial_size: float, growth_rate: float, time_periods: int): Plots the exponential growth of a biological sample size over time. Parameters: initial_size (float): The initial size of the sample. growth_rate (float): The growth rate per period. time_periods (int): The total number of time periods. # Calculate sample sizes for each time period sample_sizes = [initial_size * (growth_rate ** t) for t in range(time_periods + 1)] # Plot the sample sizes plt.plot(sample_sizes, label=\'Sample Size\') # Set the title and labels plt.title(\'Exponential Growth of Biological Sample\') plt.xlabel(\'Time Period\') plt.ylabel(\'Sample Size\') # Add grid for better readability plt.grid(True) # Display the graph plt.show()"},{"question":"You are tasked with implementing a Python function named `normalize_vector` that takes a 1-D NumPy array as its input and returns a new array where each element is divided by the Euclidean norm (L2 norm) of the original array. The Euclidean norm is defined as the square root of the sum of the squares of the elements of the array. Specifically, you need to use the following NumPy functions to achieve this: - `numpy.linalg.norm` to compute the Euclidean norm of the array. - Broadcast division to normalize each element of the array. The function signature is: ```python import numpy as np def normalize_vector(arr: np.ndarray) -> np.ndarray: ``` # Example: ```python # Input array = np.array([1, 2, 3]) # Output array([0.26726124, 0.53452248, 0.80178373]) ``` In this example: - The Euclidean norm of the array [1, 2, 3] is calculated as √(1² + 2² + 3²) = √14 ≈ 3.74165739. - The normalized array is obtained by dividing each element of the original array by √14: - For `1`, the normalized value is `1 / 3.74165739 ≈ 0.26726124`. - For `2`, the normalized value is `2 / 3.74165739 ≈ 0.53452248`. - For `3`, the normalized value is `3 / 3.74165739 ≈ 0.80178373`. Ensure that your implementation correctly computes the Euclidean norm and normalizes the input array.","solution":"import numpy as np def normalize_vector(arr: np.ndarray) -> np.ndarray: Normalizes a 1-D NumPy array by its Euclidean norm (L2 norm). Parameters: arr (np.ndarray): A 1-D array of numbers to be normalized. Returns: np.ndarray: A new 1-D array where each element is divided by the Euclidean norm of the original array. norm = np.linalg.norm(arr) if norm == 0: return arr # Handle the case where the norm is zero (to avoid division by zero) return arr / norm"},{"question":"In this problem, you will create a function to fit a polynomial curve to a set of points using NumPy\'s `polyfit` and `polyval` functions, and then plot the results with Matplotlib. Your task is to complete the function `plot_polynomial_fit(x, y, degree)` which takes three parameters: `x` (a list or array of floats), `y` (a list or array of floats), and `degree` (an integer), and does the following: 1. Fits a polynomial of the given degree to the provided `(x, y)` data points using `numpy.polyfit`. 2. Evaluates the polynomial at a set of x points using `numpy.polyval`. 3. Plots the original data points as scatter `x` versus `y` with Matplotlib. 4. Plots the polynomial fit line over a range of x values from min(x) to max(x), with a step size of 0.1. Specifically, you should: - Use the `numpy.polyfit` function to compute the polynomial coefficients. - Use the `numpy.polyval` function to compute the polynomial values. - Use Matplotlib (`pyplot` submodule) to plot both the original data points and the fitted polynomial curve. # Requirements 1. Import the necessary libraries (`numpy` and `matplotlib.pyplot`). 2. Ensure the x-values for the polynomial line range from min(x) to max(x) with a step size of 0.1. 3. Use the `numpy.polyfit` function to fit the polynomial. 4. Use the `numpy.polyval` function to evaluate the polynomial. 5. Generate the plot showing both the original data points as scatter and the polynomial fit line. # Example ```python x = [1, 2, 3, 4, 5] y = [1, 4, 9, 16, 25] degree = 2 plot_polynomial_fit(x, y, degree) ``` Should generate a scatter plot of the original data points and a line plot of a quadratic fit to the data. # Function Signature ```python import numpy as np import matplotlib.pyplot as plt def plot_polynomial_fit(x: list or np.ndarray, y: list or np.ndarray, degree: int): # Your implementation here ```","solution":"import numpy as np import matplotlib.pyplot as plt def plot_polynomial_fit(x, y, degree): Fits a polynomial of the given degree to the provided (x, y) data points, evaluates the polynomial, and plots the original data points along with the polynomial fit curve. Parameters: x : list or np.ndarray A list or array of floats representing the x-coordinates of the data points. y : list or np.ndarray A list or array of floats representing the y-coordinates of the data points. degree : int The degree of the polynomial to fit to the data points. # Compute the polynomial coefficients coefficients = np.polyfit(x, y, degree) # Create a range of x values from min(x) to max(x) with a step size of 0.1 x_fit = np.arange(min(x), max(x) + 0.1, 0.1) # Compute the polynomial values for the x_fit values y_fit = np.polyval(coefficients, x_fit) # Plot the original data points as scatter plt.scatter(x, y, color=\'blue\', label=\'Data Points\') # Plot the polynomial fit line plt.plot(x_fit, y_fit, color=\'red\', label=f\'Polynomial Fit (degree {degree})\') # Set plot title and labels plt.title(\'Polynomial Fit\') plt.xlabel(\'x\') plt.ylabel(\'y\') plt.legend() # Show the plot plt.show()"},{"question":"You are tasked with creating a function that simulates the trajectory of a projectile launched with a specific initial velocity and angle. The equations of motion for a projectile under gravity are given by: [ x(t) = v_0 cos(theta) t ] [ y(t) = v_0 sin(theta) t - frac{1}{2} g t^2 ] where: - ( v_0 ) is the initial velocity in meters per second (m/s), - ( theta ) is the launch angle in degrees, - ( t ) is the time in seconds, - ( g ) is the acceleration due to gravity (9.81 m/s²). Write a function named `plot_projectile_trajectory` that performs the following steps: 1. **Input**: - The function takes two inputs: 1. A float `v0`, which denotes the initial velocity in m/s. 2. A float `theta`, which denotes the launch angle in degrees. 2. **Calculations and Visualization**: - Convert the angle `theta` from degrees to radians. - Create a time array `t` from 0 to the time of flight with increments of 0.01 seconds. The time of flight can be calculated using the formula ( T = frac{2 v_0 sin(theta)}{g} ). - Compute the x and y coordinates of the projectile for each time point. - Plot the trajectory (y vs x) using the `matplotlib` library. - Label the axes as \\"Distance [m]\\" for the x-axis and \\"Height [m]\\" for the y-axis. - Title the plot \\"Projectile Trajectory\\". 3. **Output**: - Display the plot using `matplotlib.pyplot.show()`. Use the functions `matplotlib.pyplot.figure` to create the figure and `matplotlib.pyplot.show` to display it. Here\'s a template to get you started: ```python import numpy as np import matplotlib.pyplot as plt def plot_projectile_trajectory(v0, theta): # Convert angle to radians theta_rad = np.radians(theta) # Constants g = 9.81 # Calculate time of flight T = (2 * v0 * np.sin(theta_rad)) / g # Create time array t = np.arange(0, T, 0.01) # Calculate trajectory x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 # Plot the trajectory plt.figure() plt.plot(x, y) plt.xlabel(\'Distance [m]\') plt.ylabel(\'Height [m]\') plt.title(\'Projectile Trajectory\') plt.grid(True) # Display the plot plt.show() # Example usage: # plot_projectile_trajectory(30, 45) ``` Ensure that your implementation is clean and follows best coding practices. Pay attention to computational accuracy and the visual presentation aspects such as proper labeling and clean plotting.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_projectile_trajectory(v0, theta): Plots the trajectory of a projectile launched with an initial velocity `v0` and launch angle `theta`. Parameters: v0 (float): Initial velocity in meters per second (m/s). theta (float): Launch angle in degrees. # Convert angle to radians theta_rad = np.radians(theta) # Constants g = 9.81 # acceleration due to gravity in m/s^2 # Calculate time of flight T = (2 * v0 * np.sin(theta_rad)) / g # Create time array t = np.arange(0, T, 0.01) # Calculate trajectory (x and y coordinates) x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 # Plot the trajectory plt.figure() plt.plot(x, y) plt.xlabel(\'Distance [m]\') plt.ylabel(\'Height [m]\') plt.title(\'Projectile Trajectory\') plt.grid(True) # Display the plot plt.show()"},{"question":"You have been hired to develop an application that helps a warehouse optimize its operations. The warehouse stores various items in a 2D grid, and each item is represented by distinct positive integers. Some cells in the grid may be empty, represented by 0. Your task is to implement a function `group_items_by_type` that identifies and groups the coordinates of each unique item type present in the grid. The function will take a 2D grid and output a dictionary where the keys are the unique item types, and the values are lists of tuples. Each tuple should represent the coordinates (row, column) of an occurrence of that item type in the grid. Function Signature: ```python def group_items_by_type(grid: list[list[int]]) -> dict[int, list[tuple[int, int]]]: pass ``` # Parameters: - **grid** (*list[list[int]]*): A 2D list representing the warehouse grid where `grid[r][c]` is either `0` (empty) or a positive integer corresponding to an item type. # Returns: - **dict[int, list[tuple[int, int]]]*: A dictionary with item types as keys and lists of coordinates as values. **Example:** ```python grid = [ [1, 2, 0, 3], [4, 1, 0, 2], [3, 4, 1, 0] ] result = group_items_by_type(grid) for item_type, coordinates in result.items(): print(f\\"Item type {item_type}: {coordinates}\\") ``` # Expected Output: ``` Item type 1: [(0, 0), (1, 1), (2, 2)] Item type 2: [(0, 1), (1, 3)] Item type 3: [(0, 3), (2, 0)] Item type 4: [(1, 0), (2, 1)] ``` # Explanation: In the provided `grid`: - Item type `1` is found at coordinates `(0, 0)`, `(1, 1)`, and `(2, 2)`. - Item type `2` is found at coordinates `(0, 1)` and `(1, 3)`. - Item type `3` is found at coordinates `(0, 3)` and `(2, 0)`. - Item type `4` is found at coordinates `(1, 0)` and `(2, 1)`. # Note: - Ensure the function handles grids of varying sizes. - The order of coordinates in the lists should match their appearance in the input grid, traversed from top-left to bottom-right.","solution":"def group_items_by_type(grid: list[list[int]]) -> dict[int, list[tuple[int, int]]]: item_groups = {} for row_idx, row in enumerate(grid): for col_idx, item in enumerate(row): if item != 0: if item not in item_groups: item_groups[item] = [] item_groups[item].append((row_idx, col_idx)) return item_groups"},{"question":"Given a list of integers, your task is to write a Python function `rotate_list` that rotates the elements of the list to the right by a specified number of steps. If the rotation number is greater than the length of the list, it should continue rotating from the starting element. For example: - Input: `lst = [1, 2, 3, 4, 5]`, `k = 2` - Output: `[4, 5, 1, 2, 3]` # Instructions: 1. Create a function `rotate_list(lst, k)` that takes a list of integers `lst` and an integer `k` (the number of steps to rotate). 2. Rotate the list to the right by `k` steps. 3. If `k` is zero or if `lst` is empty, return the list as is. 4. If `k` is greater than the length of the list, use the modulus operator to determine the effective rotation steps. 5. Do not use built-in list rotation functions or methods. **Function Signature:** ```python def rotate_list(lst, k): ``` # Example Input and Output: - Input: `lst = [1, 2, 3, 4, 5]`, `k = 2` Output: `[4, 5, 1, 2, 3]` - Input: `lst = [1, 2, 3, 4, 5, 6, 7]`, `k = 3` Output: `[5, 6, 7, 1, 2, 3, 4]` - Input: `lst = [1]`, `k = 3` Output: `[1]` # Guidelines: - You are allowed to use slicing to rearrange the elements of the list. - Use appropriate conditional statements to handle edge cases (e.g., when the list is empty or when `k` is zero). # Constraints: - The length of the list `lst` will not exceed 10^5. - The value of `k` may be large and may exceed the length of the list.","solution":"def rotate_list(lst, k): Rotates the list to the right by k steps. if not lst or k == 0: return lst n = len(lst) k = k % n # Handle cases where k > len(lst) return lst[-k:] + lst[:-k]"},{"question":"Write a function that takes a string of text and returns a dictionary where the keys are the words in the string and the values are the count of occurrences of each word. Words should be considered case-insensitive, and punctuation should be ignored. For example, the string \\"Hello, hello! How are you? Are you well?\\" should be processed as \'hello\', \'hello\', \'how\', \'are\', \'you\', \'are\', \'you\', \'well\'. The resulting dictionary should be `{\'hello\': 2, \'how\': 1, \'are\': 2, \'you\': 2, \'well\': 1}`. The function should handle edge cases such as an empty string or strings with only punctuation marks. You should write self-contained code starting with: ``` import re def word_count(text): ```","solution":"import re from collections import defaultdict def word_count(text): Takes a string of text and returns a dictionary where keys are the words and values are the count of occurrences of each word, case-insensitive, ignoring punctuation. # Convert text to lowercase text = text.lower() # Use regex to remove punctuation and split by whitespace words = re.findall(r\'bw+b\', text) # Use a defaultdict to count occurrences of each word count_dict = defaultdict(int) for word in words: count_dict[word] += 1 return dict(count_dict)"},{"question":"You are developing a module that processes a CSV file containing information about employees, such as their ID, name, department, and salary. Your task is to implement a function that reads the CSV file, processes the data, and returns some basic statistics about the salaries in each department. Your task is to implement the function `analyze_salaries(file_path)` that takes one argument: 1. `file_path`: A string representing the path to the CSV file. The CSV file has the following columns: `employee_id`, `name`, `department`, and `salary`. Assume the file does not have a header row, and each row contains valid data. The function should: - Read the CSV file from the given file path. - Calculate the total, average, minimum, and maximum salary for each department. - Return a dictionary where the keys are department names, and the values are dictionaries containing the calculated statistics (`total`, `average`, `min`, and `max`). # Requirements: Use the Python standard library to accomplish this task. - You may make use of the `csv` module for reading the CSV file. - The `statistics` module might be helpful for calculating the average. Here is the function signature you need to implement: ```python import csv from statistics import mean def analyze_salaries(file_path): # Your implementation here ```","solution":"import csv from statistics import mean def analyze_salaries(file_path): Analyzes salaries from a CSV file and returns statistics for each department. Args: file_path (str): Path to the CSV file. Returns: dict: A dictionary with departments as keys and statistics dictionaries as values. department_salaries = {} with open(file_path, newline=\'\') as csvfile: csvreader = csv.reader(csvfile) for row in csvreader: employee_id, name, department, salary = row salary = float(salary) if department not in department_salaries: department_salaries[department] = [] department_salaries[department].append(salary) department_statistics = {} for department, salaries in department_salaries.items(): department_statistics[department] = { \'total\': sum(salaries), \'average\': mean(salaries), \'min\': min(salaries), \'max\': max(salaries) } return department_statistics"},{"question":"In this problem, you will create a function called `word_frequency` that processes a given list of sentences. The function will calculate the frequency of each word across all sentences, sort these words by their frequencies in descending order, and return the word counts in a dictionary format. The required functionality is as follows: 1. Tokenize each sentence into words. Consider words to be separated by spaces and ignore punctuation. 2. Convert all words to lowercase to ensure case insensitivity. 3. Count the occurrences of each word across all sentences. 4. Sort the words by their frequencies in descending order. In case of ties, sort the words alphabetically. 5. Return the frequency counts as a dictionary where keys are words and values are their respective counts. Write the function `word_frequency(sentences)` to accomplish this. **Constraints:** - Assume the input `sentences` is a list of strings. - Each string contains words separated by spaces and can contain punctuation marks. - Convert punctuation (‘!’, ‘.’, ‘,’, etc.) to spaces before tokenizing and counting words. **Example:** ```python # Example List of Sentences sentences = [ \\"Hello, world! This is a test.\\", \\"This test is simple, yet effective.\\", \\"Effective solutions require proper testing.\\" ] result = word_frequency(sentences) # Expected output dictionary # {\'this\': 2, \'is\': 2, \'test\': 2, \'effective\': 2, \'hello\': 1, \'world\': 1, \'a\': 1, \'simple\': 1, \'solutions\': 1, \'require\': 1, \'proper\': 1, \'testing\': 1} ```","solution":"import re from collections import defaultdict def word_frequency(sentences): Calculate the frequency of each word across all sentences. Args: sentences (list of str): List of sentences to process. Returns: dict: A dictionary where keys are words and values are their respective counts. word_counts = defaultdict(int) for sentence in sentences: # Convert punctuation to spaces and convert to lowercase cleaned_sentence = re.sub(r\'[^ws]\', \' \', sentence).lower() words = cleaned_sentence.split() for word in words: word_counts[word] += 1 # Sort the words by frequency (descending) and alphabetically for ties sorted_word_counts = dict(sorted(word_counts.items(), key=lambda item: (-item[1], item[0]))) return sorted_word_counts"},{"question":"You are tasked with creating a function named `find_isograms` that takes a list of strings and returns a list of strings that are isograms. An isogram is a word in which no letter occurs more than once. The function should filter out any non-isograms and return only unique isograms in the order they first appear in the input list. Here are the detailed requirements for the `find_isograms` function: **Input:** - `words`: A list of strings, where each string is a word to be checked for being an isogram. **Output:** - A list of unique isogram strings in the same order as they appear in the input list. Additional constraints: - The function should be case insensitive, meaning \'A\' and \'a\' should be considered the same character. - The words in the resulting list must be in their original case as provided in the input. Here\'s an example to illustrate the function: ```python def find_isograms(words): # TODO: Implement the isogram finding logic here pass # Example usage: words_list = [\\"isogram\\", \\"programming\\", \\"lamp\\", \\"identification\\", \\"lamp\\", \\"abc\\", \\"Abc\\"] assert find_isograms(words_list) == [\\"isogram\\", \\"lamp\\", \\"abc\\"] ``` In the example above: - \\"isogram\\" is an isogram because no letter repeats. - \\"programming\\" is not an isogram because the letter \'r\' and \'g\' repeat. - \\"lamp\\" is an isogram and appears twice in the input list, but should only appear once in the output list. - \\"identification\\" is not an isogram because the letter \'i\' repeats. - \\"abc\\" is an isogram and should also appear only once. - \\"Abc\\" is considered the same as \\"abc\\" and should not be included again. Your task is to complete the function `find_isograms` to meet the above requirements.","solution":"def find_isograms(words): Returns a list of unique isograms from the provided list of words. Args: words (list of str): List of strings to be checked. Returns: list of str: List of unique isogram words in the same order as they appear in the input list. seen = set() isograms = [] for word in words: lower_word = word.lower() if lower_word not in seen and is_isogram(lower_word): seen.add(lower_word) isograms.append(word) return isograms def is_isogram(word): Check if the given word is an isogram. Args: word (str): The word to check. Returns: bool: True if the word is an isogram, False otherwise. return len(word) == len(set(word))"},{"question":"You are given a text and a set of words. Your task is to write a function `highlight_keywords(text, keywords)` that highlights the keywords in the text by enclosing them in square brackets. Your function will perform the following actions: 1. Identify and locate each occurrence of the keywords in the text (case-insensitive). 2. Enclose each keyword found in square brackets `[ ]`. 3. Return the modified text with the highlighted keywords. To complete this function, you may use the `re` library for regular expressions if needed. **Function Signature:** ```python def highlight_keywords(text, keywords): pass ``` # Parameters: - `text`: a string representing the input text. - `keywords`: a list of strings containing the words to be highlighted. # Requirements: - Highlight all occurrences of each keyword regardless of their case. - Ensure that substrings of longer words are not incorrectly highlighted. # Example Usage: ```python text = \\"Python is powerful. python can be used for data analysis, web development, automation, and more.\\" keywords = [\\"python\\", \\"data\\", \\"automation\\"] print(highlight_keywords(text, keywords)) ``` **Expected Output:** ``` \\"[Python] is powerful. [python] can be used for [data] analysis, web development, [automation], and more.\\" ```","solution":"import re def highlight_keywords(text, keywords): Highlights keywords in the text by enclosing them in square brackets. :param text: str, the text in which to highlight keywords. :param keywords: list of str, the keywords to highlight in the text. :return: str, the modified text with highlighted keywords. def replacement(match): return f\\"[{match.group(0)}]\\" # Sort keywords by length in descending order to handle substrings correctly keywords = sorted(keywords, key=len, reverse=True) for keyword in keywords: pattern = re.compile(re.escape(keyword), re.IGNORECASE) text = pattern.sub(replacement, text) return text"},{"question":"You are given a CSV file containing product sales data for a month. The file has two columns: \\"Date\\" and \\"Sales\\", representing the date and the corresponding sales amount for that day. Your task is to write a function `find_weekly_avg_sales(file_path: str) -> dict` that reads this CSV file using the `pandas` library and calculates the average sales for each week. You should assume that the month starts on a Monday and ends on a Sunday, which means each week consists of exactly 7 days. The process involves: 1. Reading the CSV file into a DataFrame using `pandas.read_csv`. 2. Converting the \\"Date\\" column to datetime format using `pandas.to_datetime`. 3. Grouping the data by weeks and calculating the average sales for each week. 4. Returning a dictionary where the keys are the week numbers (starting from 1) and the values are the average sales for those weeks. Use the following APIs to solve this problem: - `pandas.read_csv`: To read the CSV file into a DataFrame. - `pandas.to_datetime`: To convert the \\"Date\\" column to datetime format. - `pandas.Grouper`: To group the data by weeks. Your function should return a dictionary with the average sales for each week in the month.","solution":"import pandas as pd def find_weekly_avg_sales(file_path: str) -> dict: Reads product sales data from a CSV file and calculates average sales for each week. Args: file_path (str): The path to the CSV file containing sales data. Returns: dict: A dictionary where the keys are week numbers and the values are average sales for those weeks. # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Convert the \'Date\' column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Add a new column \'Week\' that represents the week number of the year df[\'Week\'] = df[\'Date\'].dt.isocalendar().week # Group by the \'Week\' column and calculate the average sales weekly_avg_sales = df.groupby(\'Week\')[\'Sales\'].mean() # Convert the result to a dictionary format result = weekly_avg_sales.to_dict() # Adjust the week numbers to start from 1 for the purpose of the task result = {k+1: v for k, v in enumerate(result.values())} return result"},{"question":"You are required to write a function `reverse_only_letters(s)` that reverses the characters in a string while leaving all non-letter characters in their original positions. # Function Signature ```python def reverse_only_letters(s: str) -> str: ``` # Parameters - `s` (str): A string containing letters and possibly other characters such as digits, spaces, and punctuation marks. # Returns - `str`: A string with all the letter characters reversed, while non-letter characters remain in their original position. # Example ```python >>> reverse_only_letters(\\"ab-cd\\") \\"dc-ba\\" >>> reverse_only_letters(\\"a-bC-dEf-ghIj\\") \\"j-Ih-gfE-dCba\\" >>> reverse_only_letters(\\"Test1ng-Leet=code-Q!\\") \\"Qedo1ct-eeLg=ntse-T!\\" ``` # Explanation - The function `reverse_only_letters` should iterate through the input string and identify all the letter characters. - Reverse the order of these letter characters. - Reconstruct the string while maintaining the original positions of all non-letter characters. # Constraints - All printable ASCII characters are included. - The function should run efficiently even for long strings. # Hints - You might find it helpful to use a stack or list to gather all the letters in the string and then use a two-pointer technique to reconstruct the result while maintaining non-letter characters in their positions.","solution":"def reverse_only_letters(s: str) -> str: Reverses the characters in the string `s` while leaving all non-letter characters in their original positions. # Extract letters from the string letters = [c for c in s if c.isalpha()] # Initialize the result list result = [] for c in s: if c.isalpha(): result.append(letters.pop()) else: result.append(c) return \'\'.join(result)"},{"question":"You have been tasked with writing a function `string_permutation_index` that determines the index of a given permutation of a string when all possible permutations of the string are sorted in lexicographical order. Here are the requirements: 1. **Function Definition**: Define a function `string_permutation_index` that accepts a single parameter: - `s`: A string consisting of unique lowercase alphabetical characters. 2. **Algorithm**: - Generate all possible permutations of the string `s`. - Sort these permutations in lexicographical order. - Determine the index (0-based) of the given string `s` in this sorted list of permutations. 3. **Return Value**: Return the integer index of the string `s` in the sorted list of permutations. # Example ```python s = \\"abc\\" index = string_permutation_index(s) print(index) # Output: 0 (since \'abc\' is the first permutation in sorted order) s = \\"cba\\" index = string_permutation_index(s) print(index) # Output: 5 (since \'cba\' is the last permutation in sorted order) ``` # Constraints - The string `s` will have at most 10 characters, ensuring computational feasibility given the factorial growth in permutations. Hints: - Consider using the `itertools.permutations` from the Python standard library to generate permutations. - Use efficient methods to avoid unnecessarily large computations, such as avoiding generating all permutations explicitly.","solution":"from itertools import permutations def string_permutation_index(s): Returns the index of the permutation `s` when all permutations are sorted lexicographically. # Generate all permutations of the string `s` perms = sorted(permutations(s)) # Convert each permutation tuple back to string perms = [\'\'.join(p) for p in perms] # Find the index of the string `s` return perms.index(s)"},{"question":"In this problem, you are required to write a function named `simulate_game(grid_size, steps)`. This function simulates a simple game where a player moves on a 2D grid based on a series of random steps, and returns the final position of the player. Specifically, your function should perform the following tasks: 1. **Initialize the player position** at the center of the grid. 2. **Generate random steps**: A step can be one unit in any of the four directions (up, down, left, right). 3. **Update the player position** based on the generated steps. 4. **Ensure the player remains within the bounds** of the grid. 5. **Return the final position** of the player after all the steps. # Detailed Steps: 1. **Initialize the Player Position**: Start the player at the center of a `grid_size x grid_size` grid. For example, if the grid size is 5, the initial position would be (2, 2). 2. **Generate Random Steps**: Generate `steps` number of random steps where each step can be one of: - Up: (0, 1) - Down: (0, -1) - Left: (-1, 0) - Right: (1, 0) 3. **Update the Player Position**: Adjust the player\'s position based on each generated step. 4. **Ensure Grid Boundaries**: Ensure the player stays within the grid boundaries, meaning if a step moves the player outside the grid, ignore that step. 5. **Return the Final Position**: After processing all steps, return the final position as a tuple (x, y). # Function Signature: ```python import random def simulate_game(grid_size: int, steps: int) -> tuple: pass ``` **Example Usage:** ```python grid_size = 5 steps = 10 final_position = simulate_game(grid_size, steps) print(final_position) ``` This will simulate 10 random moves starting from the center of a 5x5 grid, and print the final position of the player.","solution":"import random def simulate_game(grid_size: int, steps: int) -> tuple: Simulates a game where a player moves on a 2D grid based on random steps. :param grid_size: The size of the grid (grid_size x grid_size). :param steps: The number of steps to be taken. :return: The final position of the player as a tuple (x, y). # Initialize player at the center of the grid center = grid_size // 2 x, y = center, center # Define possible moves (up, down, left, right) moves = [(0, 1), (0, -1), (-1, 0), (1, 0)] for _ in range(steps): move = random.choice(moves) new_x = x + move[0] new_y = y + move[1] # Check boundaries and update position if within bounds if 0 <= new_x < grid_size and 0 <= new_y < grid_size: x, y = new_x, new_y return (x, y)"},{"question":"You are tasked with creating a function `generateMonthlySalesReport` that generates a monthly sales report given a set of sales data, and saves the report to a specified file. The function should utilize the `pandas` and `matplotlib` libraries to accomplish this task. Specifically, the function should: 1. Accept a DataFrame of sales data, where each row includes: - `Date` (datetime): The date of the sales. - `Product` (str): The name of the product sold. - `Quantity` (int): The quantity of the product sold. - `Price` (float): The price per unit of the product sold. 2. Group the data by month and product, then calculate the total revenue for each product for each month. 3. Create a bar plot with the months on the x-axis and the total revenue on the y-axis, with different colors for each product. 4. Save the bar plot to a file using `matplotlib.pyplot.savefig`. Function signature: ```python def generateMonthlySalesReport(sales_data: pd.DataFrame, fig_size: tuple, colors: list, title: str, save_fig: str): pass ``` # Parameters: - `sales_data` (pd.DataFrame): DataFrame containing columns `Date`, `Product`, `Quantity`, and `Price`. - `fig_size` (tuple): Size of the figure. - `colors` (list): List of colors for each product. - `title` (str): Title for the plot. - `save_fig` (str): File path for the saved figure, including file extension. # Example Usage: ```python import pandas as pd from datetime import datetime sales_data = pd.DataFrame({ \'Date\': [datetime(2023, 1, 5), datetime(2023, 1, 15), datetime(2023, 2, 5), datetime(2023, 2, 20)], \'Product\': [\'A\', \'B\', \'A\', \'B\'], \'Quantity\': [10, 20, 15, 25], \'Price\': [100.0, 200.0, 100.0, 200.0] }) fig_size = (12, 8) colors = [\'red\', \'blue\'] title = \'Monthly Sales Report\' save_fig = \'monthly_sales_report.png\' generateMonthlySalesReport(sales_data, fig_size, colors, title, save_fig) ``` # Output: The generated bar plot should display the total monthly revenue for each product, and should be saved to the specified file path.","solution":"import pandas as pd import matplotlib.pyplot as plt def generateMonthlySalesReport(sales_data: pd.DataFrame, fig_size: tuple, colors: list, title: str, save_fig: str): Generates a monthly sales report as a bar plot and saves it to a file. Parameters: sales_data (pd.DataFrame): DataFrame containing columns Date, Product, Quantity, and Price. fig_size (tuple): Size of the figure. colors (list): List of colors for each product. title (str): Title for the plot. save_fig (str): File path for the saved figure, including file extension. # Ensure the Date column is in datetime format sales_data[\'Date\'] = pd.to_datetime(sales_data[\'Date\']) # Extract the month and year from the Date column sales_data[\'Month\'] = sales_data[\'Date\'].dt.to_period(\'M\') # Calculate the total revenue sales_data[\'Revenue\'] = sales_data[\'Quantity\'] * sales_data[\'Price\'] # Group by Month and Product, and sum the Revenue monthly_sales = sales_data.groupby([\'Month\', \'Product\']).agg({\'Revenue\': \'sum\'}).reset_index() # Plotting fig, ax = plt.subplots(figsize=fig_size) monthly_sales_pivot = monthly_sales.pivot(index=\'Month\', columns=\'Product\', values=\'Revenue\') monthly_sales_pivot.plot(kind=\'bar\', ax=ax, color=colors) ax.set_title(title) ax.set_xlabel(\'Month\') ax.set_ylabel(\'Total Revenue\') plt.xticks(rotation=45) plt.tight_layout() plt.savefig(save_fig) plt.close()"},{"question":"In the context of text manipulation, consider the task of determining if a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). A string can be rearranged to form a palindrome if at most one character has an odd count. We need to create a function `can_form_palindrome(s: str) -> bool` that takes an input string ( s ). This function should return a boolean indicating whether or not the string can be rearranged to form a palindrome. # Function Signature: ```python def can_form_palindrome(s: str) -> bool: pass ``` # Parameters: - `s`: A string for which we need to determine if its characters can be rearranged to form a palindrome. # Returns: - A boolean indicating whether or not the input string can be rearranged to form a palindrome. # Example: ```python s = \\"civic\\" print(can_form_palindrome(s)) # Output should be True, since \\"civic\\" is already a palindrome s = \\"ivicc\\" print(can_form_palindrome(s)) # Output should be True, since \\"ivicc\\" can be rearranged to form \\"civic\\" s = \\"hello\\" print(can_form_palindrome(s)) # Output should be False, since \\"hello\\" cannot be rearranged to form a palindrome ``` # Notes: - Ignore spaces and consider only the characters in the string. - The function should be case insensitive, which means the uppercase and lowercase of a letter are considered the same. - You may use the `collections.Counter` to help count character occurrences.","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determines if the characters of the string `s` can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. # Convert the string to lower case and remove spaces s = s.replace(\\" \\", \\"\\").lower() count = Counter(s) # Count the number of characters that have an odd count odd_count = sum(1 for freq in count.values() if freq % 2 != 0) # A string can form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"You are tasked with creating a k-means clustering model to analyze a provided dataset and visualize the clustering results using `scikit-learn` for the model and `matplotlib` for plotting. The objective is to practice using these libraries to perform clustering analysis and visualize the outcomes. Write a function `kmeans_cluster_main(data_points, cluster_count)` which: 1. Uses the `sklearn.cluster.KMeans` class to fit a k-means model with the input data `data_points`. 2. Predicts the cluster for each data point in the dataset. 3. Visualizes the original data points colored by their cluster assignments and the cluster centroids using `matplotlib`. # Inputs: - `data_points`: A 2D list or 2D array of points where each point has two coordinates `[x, y]`. - `cluster_count`: An integer indicating the number of clusters to form. # Requirements: 1. Use `sklearn.cluster.KMeans` to create and fit the model. 2. Use `matplotlib.pyplot.scatter` to plot the original data points with different colors for different clusters. 3. Use `matplotlib.pyplot.scatter` to plot the cluster centroids. 4. Use `matplotlib.pyplot.show` to display the plot. # Example: ```python data_points = [[1, 2], [2, 3], [3, 3], [8, 7], [8, 8], [25, 80]] cluster_count = 2 kmeans_cluster_main(data_points, cluster_count) ``` The function should display a plot showing: - Data points colored by their cluster assignments. - Cluster centroids indicated with a different marker.","solution":"from sklearn.cluster import KMeans import matplotlib.pyplot as plt def kmeans_cluster_main(data_points, cluster_count): Fits a k-means clustering model to the provided data points with the specified number of clusters, predicts cluster assignments, and visualizes the data points colored by their cluster assignments along with cluster centroids. Parameters: - data_points: 2D list or 2D array with points where each point has two coordinates [x, y]. - cluster_count: Integer indicating the number of clusters to form. # Fit the KMeans model kmeans = KMeans(n_clusters=cluster_count, random_state=0) kmeans.fit(data_points) # Predict cluster for each data point cluster_assignments = kmeans.predict(data_points) # Get the cluster centroids centroids = kmeans.cluster_centers_ # Plot the data points colored by their cluster assignments plt.scatter( [point[0] for point in data_points], [point[1] for point in data_points], c=cluster_assignments, cmap=\'viridis\' ) # Plot the cluster centroids plt.scatter( centroids[:, 0], centroids[:, 1], s=300, c=\'red\', label=\'Centroids\', marker=\'X\' ) plt.title(\'K-Means Clustering\') plt.xlabel(\'X axis\') plt.ylabel(\'Y axis\') plt.legend() plt.show()"},{"question":"In this task, you are required to create a function named `filter_and_plot_sine_wave` that will filter out noise from a given noisy sine wave signal and plot both the noisy and filtered signals. Your function should generate a clean sine wave, add Gaussian noise to it, and then apply a moving average filter to remove the noise. Finally, it should visualize both signals using Matplotlib library. The key libraries you will need to use are: Numpy and Matplotlib. You are provided with the parameters `frequency` (frequency of the sine wave), `sampling_rate` (number of samples per second), `duration` (number of seconds for the signal), and `noise_std` (standard deviation of the Gaussian noise). Function Signature: ```python def filter_and_plot_sine_wave(frequency, sampling_rate, duration, noise_std): pass ``` Requirements: 1. Create a clean sine wave with the given frequency, sampling rate, and duration. 2. Add Gaussian noise to the sine wave using Numpy\'s `random.normal` function. 3. Implement a moving average filter to smooth the noisy signal. 4. Use `matplotlib.pyplot.figure` to create a figure of size 10x5. 5. Plot both the noisy and filtered signals on the same graph using `matplotlib.pyplot.plot`. 6. Include appropriate titles, legends, and labels for the plot. Here is the function template that you will need to fill out: ```python import numpy as np import matplotlib.pyplot as plt def filter_and_plot_sine_wave(frequency, sampling_rate, duration, noise_std): # Create time array t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False) # Generate clean sine wave clean_signal = np.sin(2 * np.pi * frequency * t) # Add Gaussian noise noisy_signal = clean_signal + np.random.normal(0, noise_std, clean_signal.shape) # Implement moving average filter window_size = int(sampling_rate / 10) # a window size of 1/10th of a second filtered_signal = np.convolve(noisy_signal, np.ones(window_size)/window_size, mode=\'valid\') # Create figure for plotting plt.figure(figsize=(10, 5)) # Plot noisy signal plt.plot(t, noisy_signal, label=\'Noisy Signal\', color=\'r\', alpha=0.5) # Plot filtered signal with adjusted time array due to convolution \'valid\' mode adjusted_t = t[:len(filtered_signal)] plt.plot(adjusted_t, filtered_signal, label=\'Filtered Signal\', color=\'b\', alpha=0.8) # Add title, legend, and labels plt.title(\\"Noisy and Filtered Sine Wave\\") plt.xlabel(\\"Time [s]\\") plt.ylabel(\\"Amplitude\\") plt.legend() # Display the plot plt.show() ```","solution":"import numpy as np import matplotlib.pyplot as plt def filter_and_plot_sine_wave(frequency, sampling_rate, duration, noise_std): Filters noise from a noisy sine wave signal and plots both the noisy and filtered signals. Parameters: frequency: float - Frequency of the sine wave. sampling_rate: float - Number of samples per second. duration: float - Number of seconds for the signal. noise_std: float - Standard deviation of the Gaussian noise. # Create time array t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False) # Generate clean sine wave clean_signal = np.sin(2 * np.pi * frequency * t) # Add Gaussian noise noisy_signal = clean_signal + np.random.normal(0, noise_std, clean_signal.shape) # Implement moving average filter window_size = int(sampling_rate / 10) # a window size of 1/10th of a second filtered_signal = np.convolve(noisy_signal, np.ones(window_size)/window_size, mode=\'valid\') # Create figure for plotting plt.figure(figsize=(10, 5)) # Plot noisy signal plt.plot(t, noisy_signal, label=\'Noisy Signal\', color=\'r\', alpha=0.5) # Plot filtered signal with adjusted time array due to convolution \'valid\' mode adjusted_t = t[:len(filtered_signal)] plt.plot(adjusted_t, filtered_signal, label=\'Filtered Signal\', color=\'b\', alpha=0.8) # Add title, legend, and labels plt.title(\\"Noisy and Filtered Sine Wave\\") plt.xlabel(\\"Time [s]\\") plt.ylabel(\\"Amplitude\\") plt.legend() # Display the plot plt.show()"},{"question":"You are tasked with implementing a function `rearrange_characters` that rearranges the characters in a given string such that no two adjacent characters are the same. If it\'s not possible to rearrange the characters in this way, return an empty string. # Input: - `s`: A string consisting of lowercase letters. # Output: - Return a new string where no two adjacent characters are the same, or an empty string if such an arrangement is not possible. # Requirements: - Utilize a priority queue (heap) for efficient character frequency management. - Ensure the function name is `rearrange_characters`. Implement the function `rearrange_characters` in Python: ```python from heapq import heappop, heappush from collections import Counter def rearrange_characters(s): # Your code here ``` # Example: ```python s = \\"aabbcc\\" print(rearrange_characters(s)) # Expected Output: \\"abcabc\\" or any valid arrangement s = \\"aaab\\" print(rearrange_characters(s)) # Expected Output: \\"\\" ```","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_characters(s): if not s: return \\"\\" # Count the frequency of each character in the string frequency = Counter(s) # Create a max heap based on the frequency of characters max_heap = [] for char, freq in frequency.items(): heappush(max_heap, (-freq, char)) # use negative frequency for max heap # Previous character initialized to none and previous count initialized to zero prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heappop(max_heap) # Get the character with the highest frequency # Append the current character to the result result.append(char) # Decrease the frequency of the current character if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Add the previous character back if there\'s still count left prev_char, prev_count = char, count + 1 if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"In this problem, you are tasked with writing a Python function `find_islands(grid)`. Island in this context is a collection of `1`s (land) surrounded by `0`s (water) in a 2D grid. The function should count the number of islands in the provided rectangular grid of `1`s and `0`s. Each cell can be connected horizontally or vertically but not diagonally. Here are the steps your function should follow: 1. Traverse through each cell in the grid. 2. Whenever a `1` is encountered, use Depth First Search (DFS) to mark all adjacent `1`s as visited. 3. Increase the island count for each DFS initiated from a `1`. Function Signature: ```python def find_islands(grid: List[List[int]]) -> int: pass ``` # Constraints: - The grid\'s dimensions are at most `100 x 100`. - The grid contains only `0`s and `1`s. # Example input and output: Example 1: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] print(find_islands(grid)) # Output: 3 ``` Example 2: ```python grid = [ [1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 1, 1] ] print(find_islands(grid)) # Output: 2 ```","solution":"def find_islands(grid): Finds the number of islands in the given grid. if not grid or not grid[0]: return 0 def dfs(x, y): # Boundary check and to ensure we stop on water or already visited land if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return # Mark the cell as visited by setting it to water grid[x][y] = 0 # Visit all adjacent cells (left, right, up, down) dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) island_count = 0 # Traverse each cell in the grid for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: island_count += 1 dfs(i, j) return island_count"},{"question":"Design a function that generates unique combinations of dictionary keys based on given sets of values, and maps these combinations to designated values. This is particularly useful in creating configuration dictionaries where all possible combinations need to be explored. Specifically, you should: 1. Receive a dictionary where keys are strings representing parameters, and values are lists of possible values for these parameters. 2. Use the `itertools.product` method to generate all possible combinations of these parameter values. 3. Create a new dictionary where each key is a combination (as a tuple) of the parameter values and the corresponding value is initialized as `None`. To clarify, you need to implement the function `generate_combinations` that: - Takes one argument: - `parameters_dict`: a dictionary where keys are strings and values are lists of possible values for those keys. - Uses `itertools.product` to generate all combinations of values from `parameters_dict`. - Returns a dictionary where: - Each key is a tuple of a unique combination of parameter values. - Each value is `None`. **Function Signature:** ```python def generate_combinations(parameters_dict: dict) -> dict: pass ``` **Example Usage:** ```python parameters_dict = { \'learning_rate\': [0.01, 0.1], \'batch_size\': [16, 32], \'optimizer\': [\'adam\', \'sgd\'] } combinations = generate_combinations(parameters_dict) ``` **Example Output:** ```python { (0.01, 16, \'adam\'): None, (0.01, 16, \'sgd\'): None, (0.01, 32, \'adam\'): None, (0.01, 32, \'sgd\'): None, (0.1, 16, \'adam\'): None, (0.1, 16, \'sgd\'): None, (0.1, 32, \'adam\'): None, (0.1, 32, \'sgd\'): None } ``` **Constraints:** - You should use the `itertools.product` from the `itertools` package to generate the combinations. - Assume that the values in `parameters_dict` are all non-empty lists and contain at least one item.","solution":"from itertools import product def generate_combinations(parameters_dict): Generates all unique combinations of dictionary keys based on given sets of values, and maps these combinations to None. :param parameters_dict: A dictionary with keys as parameters and values as lists of possible values for those parameters. :return: A dictionary where each key is a tuple representing a unique combination of parameter values and each value is None. keys = parameters_dict.keys() values = parameters_dict.values() combinations = product(*values) return {combination: None for combination in combinations}"},{"question":"** Write a function to solve the \\"Paint Fill\\" problem as seen in various paint programs. You are given a screen (represented by a two-dimensional array) and a point in the screen represented as a coordinate (x, y), and a new color. The function should fill the region with the new color. The region to be filled is defined as all points connected to the initial point by paths of the old color. You need to implement the function `paint_fill` that modifies the input screen in place and does not return anything. # Function Signature ```python def paint_fill(screen: List[List[int]], x: int, y: int, new_color: int) -> None: ``` # Parameters - **screen**: A two-dimensional list (list of lists) of integers representing the screen. - **x**: An integer representing the x-coordinate of the point where the fill starts. - **y**: An integer representing the y-coordinate of the point where the fill starts. - **new_color**: An integer representing the new color to fill. # Constraints - The integers in the screen represent different colors. - Assume valid indexes are always provided, i.e., 0 <= x < len(screen) and 0 <= y < len(screen[0]). - The input array is not empty. # Returns - The function modifies the screen in place and does not return anything. # Requirements 1. Use a helper function to perform the recursive fill. 2. Check and skip if the new color is the same as the old color to avoid infinite loops. # Example ```python screen = [ [1, 1, 1, 2, 2], [1, 1, 0, 2, 2], [1, 0, 0, 2, 2], [1, 1, 1, 1, 0] ] x, y = 1, 2 new_color = 3 paint_fill(screen, x, y, new_color) print(screen) ``` Expected Output: ```python [ [1, 1, 1, 2, 2], [1, 1, 3, 2, 2], [1, 3, 3, 2, 2], [1, 1, 1, 1, 0] ] ``` # Explanation In the example above, starting at point (1, 2), all connected regions (vertically and horizontally) with the integer 0 are filled with the new color 3. ---","solution":"from typing import List def paint_fill(screen: List[List[int]], x: int, y: int, new_color: int) -> None: old_color = screen[x][y] if old_color == new_color: return def fill(x, y): if x < 0 or x >= len(screen) or y < 0 or y >= len(screen[0]): return if screen[x][y] != old_color: return screen[x][y] = new_color fill(x + 1, y) fill(x - 1, y) fill(x, y + 1) fill(x, y - 1) fill(x, y)"},{"question":"You are working on implementing a version control system, similar to Git. Your task is to create a function that generates a unique identifier (or \\"hash\\") for the contents of a file. This unique identifier should change whenever the contents of the file change, even slightly, ensuring that each unique state of the file has a corresponding unique identifier. For simplicity, let\'s assume that we use SHA-256, a cryptographic hash function, to generate the unique identifier. You will need to read the file in binary mode and compute its SHA-256 hash. - **Function Name**: `generate_file_identifier` - **Parameters**: - `file_path` (str): Path to the file whose identifier needs to be generated. **Returns**: - A string representing the SHA-256 hash of the file content. **Example**: Given a `file_path` to a file whose content is \\"Hello, world!\\", the function: ```python generate_file_identifier(\'/path/to/file.txt\') ``` should return the corresponding SHA-256 hash, such as: ``` \\"315f5bdb76d078c43b8ac0064e4a016461b655ed282bfecd35d7971fd0e419bb\\" ``` Use the `hashlib` library to implement the function.","solution":"import hashlib def generate_file_identifier(file_path): Generates and returns the SHA-256 hash of the file content. Parameters: file_path (str): Path to the file Returns: str: SHA-256 hash of the file content sha256_hash = hashlib.sha256() with open(file_path, \\"rb\\") as f: for byte_block in iter(lambda: f.read(4096), b\\"\\"): sha256_hash.update(byte_block) return sha256_hash.hexdigest()"},{"question":"Design a function named `calculate_aggregates` that will process a given list of numbers and return a dictionary containing statistical aggregates of the data. Your function should accept the following parameters: 1. `data` (a list of integers or floats): The list of numerical data points to process. The function should compute and return a dictionary containing: - `mean`: The average of the numbers in the list. - `median`: The middle value of the numbers in the list (if the list is even-sized, the median is the average of the two middle numbers). - `variance`: The variance of the numbers. - `std_dev`: The standard deviation of the numbers. To achieve this, your function should: - Sort the list to compute the median. - Use basic mathematical operations and the `math` module to calculate mean, variance, and standard deviation. Each statistic should be calculated to three decimal places. Here is an example of how your function should behave: ```python data = [2, 4, 4, 4, 5, 5, 7, 9] result = calculate_aggregates(data) print(result) ``` Expected output: ```python { \'mean\': 5.000, \'median\': 4.500, \'variance\': 4.000, \'std_dev\': 2.000 } ```","solution":"import math def calculate_aggregates(data): Calculate statistical aggregates of the given list of numbers. Parameters: data (list): A list of integers or floats. Returns: dict: A dictionary containing `mean`, `median`, `variance`, and `std_dev`. if not data: raise ValueError(\\"The data list is empty.\\") # Calculate mean mean = sum(data) / len(data) # Calculate median data_sorted = sorted(data) n = len(data_sorted) if n % 2 == 0: median = (data_sorted[n//2 - 1] + data_sorted[n//2]) / 2 else: median = data_sorted[n//2] # Calculate variance mean_diff_squared = [(x - mean) ** 2 for x in data] variance = sum(mean_diff_squared) / len(data) # Calculate standard deviation std_dev = math.sqrt(variance) # Return dictionary return { \'mean\': round(mean, 3), \'median\': round(median, 3), \'variance\': round(variance, 3), \'std_dev\': round(std_dev, 3), }"},{"question":"You are tasked with creating a function that simulates a basic library\'s catalog system. This function will handle adding new books, borrowing books, returning books, and listing all available books. Each book in the catalog should be represented as a dictionary containing the following keys: - `\\"id\\"`: A unique identifier for the book. - `\\"title\\"`: The title of the book. - `\\"author\\"`: The author of the book. - `\\"borrowed\\"`: A boolean indicating if the book is currently borrowed. The library catalog system should support the following operations: 1. **Add a new book**: Add a dictionary representing a new book to the catalog. 2. **Borrow a book**: Mark a book as borrowed if it is available in the catalog. 3. **Return a book**: Mark a book as returned if it was previously borrowed. 4. **List available books**: Return a list of books that are currently not borrowed. Input The function signature should be: ```python def library_catalog(operations: list) -> list: ``` - `operations` (list): A list of operations, where each operation is a dictionary with the following structure: - `\\"operation\\"`: A string representing the operation type: `\\"add\\"`, `\\"borrow\\"`, `\\"return\\"`, or `\\"list\\"`. - Additional keys depend on the operation type: - For `\\"add\\"`: `\\"id\\"`, `\\"title\\"`, `\\"author\\"`. - For `\\"borrow\\"`, `\\"return\\"`: `\\"id\\"`. - For `\\"list\\"`: No additional keys. Output The function should return a list of results for the `\\"list\\"` operations. Each result should be a list of dictionaries representing the books that are currently available. For `\\"add\\"`, `\\"borrow\\"`, and `\\"return\\"` operations, the function should not return anything. Example ```python operations = [ {\\"operation\\": \\"add\\", \\"id\\": 1, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\"}, {\\"operation\\": \\"add\\", \\"id\\": 2, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\"}, {\\"operation\\": \\"borrow\\", \\"id\\": 1}, {\\"operation\\": \\"list\\"}, {\\"operation\\": \\"return\\", \\"id\\": 1}, {\\"operation\\": \\"list\\"} ] ``` Expected output: ```python [ [{\\"id\\": 2, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"borrowed\\": False}], [{\\"id\\": 1, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"borrowed\\": False}, {\\"id\\": 2, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"borrowed\\": False}] ] ``` Write a function to implement the library catalog system as described.","solution":"def library_catalog(operations: list) -> list: catalog = {} result = [] for operation in operations: op_type = operation[\'operation\'] if op_type == \'add\': book_id = operation[\'id\'] catalog[book_id] = { \'id\': book_id, \'title\': operation[\'title\'], \'author\': operation[\'author\'], \'borrowed\': False } elif op_type == \'borrow\': book_id = operation[\'id\'] if book_id in catalog and not catalog[book_id][\'borrowed\']: catalog[book_id][\'borrowed\'] = True elif op_type == \'return\': book_id = operation[\'id\'] if book_id in catalog and catalog[book_id][\'borrowed\']: catalog[book_id][\'borrowed\'] = False elif op_type == \'list\': available_books = [book for book in catalog.values() if not book[\'borrowed\']] result.append(available_books) return result"},{"question":"This function takes a list of strings and returns a dictionary where the keys are the lowercase versions of the strings and the values are lists containing all the strings from the input list that, when lowercased, match the key. The function should handle string casing uniformly and ignore any non-alphanumeric characters when grouping the strings. The function should output with: dict: A dictionary with lowercase keys and lists of matching strings as values. You should write self-contained code starting with: ``` import re def group_strings(string_list): ```","solution":"import re from collections import defaultdict def group_strings(string_list): Group strings by their lowercase versions, ignoring non-alphanumeric characters. Parameters: string_list (list of str): List of strings to be grouped. Returns: dict: A dictionary with lowercase keys and lists of matching strings as values. grouped_dict = defaultdict(list) for string in string_list: # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'W+\', \'\', string).lower() grouped_dict[cleaned_string].append(string) return dict(grouped_dict)"},{"question":"Write a Python function, `generate_report`, that reads sales data from a CSV file and generates a summary report. The file contains records with dates, product names, and quantities sold. The report should include the total quantity sold for each product and the total sales for each day. Function Signature: ```python def generate_report(csv_file_path: str) -> tuple: pass ``` Parameters: - `csv_file_path` (str): A string representing the path to the CSV file. Returns: - A tuple of two dictionaries: - The first dictionary mapping product names to the total quantities sold. - The second dictionary mapping dates to the total quantities sold on each day. CSV File Format: - The CSV file has the following columns: \\"date\\", \\"product_name\\", \\"quantity\\". - Example: ``` date,product_name,quantity 2023-01-01,Product A,10 2023-01-01,Product B,15 2023-01-02,Product A,7 2023-01-02,Product C,5 ``` It is guaranteed that: - The CSV file is properly formatted with valid data entries. - All necessary libraries are available, and you may use the `csv` library for parsing the file. Your task is to implement this function that reads the CSV file, processes the data, and returns the summary report as described.","solution":"import csv from collections import defaultdict def generate_report(csv_file_path: str) -> tuple: product_sales = defaultdict(int) daily_sales = defaultdict(int) with open(csv_file_path, mode=\'r\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: date = row[\'date\'] product_name = row[\'product_name\'] quantity = int(row[\'quantity\']) product_sales[product_name] += quantity daily_sales[date] += quantity return dict(product_sales), dict(daily_sales)"},{"question":"You are required to write a Python function named `find_unique_words` that reads a text file and returns a list of unique words within the file. The function must be able to handle punctuation and capitalization appropriately by ignoring case differences and removing punctuation from the words. Here are the requirements for the function: - The function should take one string parameter: - `file_path`: the path to the file to be read. - The function should: - Open and read the content of the file. - Normalize the text by converting it to lowercase. - Remove all punctuation marks from the words. - Split the text into words. - Identify unique words and store them in a list. - Return the list of unique words sorted in alphabetical order. **Function Signature:** ```python def find_unique_words(file_path: str) -> list: pass ```","solution":"import string def find_unique_words(file_path: str) -> list: Reads a text file and returns a list of unique words in the file. The words are normalized to lowercase, punctuation is removed, and then unique words are identified and sorted alphabetically. Parameters: file_path (str): The path to the file to be read. Returns: list: A list of unique words sorted alphabetically. with open(file_path, \'r\') as file: text = file.read() # Normalize text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Identify unique words unique_words = list(set(words)) # Sort unique words alphabetically unique_words.sort() return unique_words"},{"question":"**Educational Objective**: Utilization of dictionary data structures and string manipulations. You are tasked with creating a function that generates a dictionary from two given lists: one containing keys and the other containing corresponding values. The function should return the dictionary. You also need to write a function that takes the generated dictionary and a string, and replaces placeholders in the string with their corresponding values from the dictionary. # Requirements 1. **Function Names**: `create_mapping` and `replace_placeholders` 2. **Function Signatures**: - `create_mapping(keys: list, values: list) -> dict` - `replace_placeholders(text: str, mapping: dict) -> str` 3. **Parameters for `create_mapping`**: - `keys` (*list*): A list of keys for the dictionary. - `values` (*list*): A list of values corresponding to the keys. 4. **Parameters for `replace_placeholders`**: - `text` (*str*): A string containing placeholders in the format `{key}`. - `mapping` (*dict*): A dictionary where keys are strings to be replaced and values are their replacements. # Functionality Requirements for `create_mapping`: - Combine `keys` and `values` into a dictionary. - Raise a ValueError if the lengths of `keys` and `values` do not match. # Functionality Requirements for `replace_placeholders`: - Replace each placeholder in `text` in the format `{key}` with its corresponding value from `mapping`. - Raise a KeyError if a key in the placeholder does not exist in the mapping. # Example Usage ```python def create_mapping(keys, values): if len(keys) != len(values): raise ValueError(\\"The length of keys and values must be the same\\") return dict(zip(keys, values)) def replace_placeholders(text, mapping): for key in mapping: text = text.replace(f\'{{{key}}}\', mapping[key]) return text keys = [\\"name\\", \\"age\\"] values = [\\"Alice\\", \\"30\\"] mapping = create_mapping(keys, values) text = \\"My name is {name} and I am {age} years old.\\" print(replace_placeholders(text, mapping)) # Output: \\"My name is Alice and I am 30 years old.\\" ``` # Important Constraints 1. Use Python built-in functions and string methods for string manipulations. 2. Ensure that the `replace_placeholders` function appropriately handles cases where multiple placeholders refer to different or the same keys.","solution":"def create_mapping(keys, values): if len(keys) != len(values): raise ValueError(\\"The length of keys and values must be the same\\") return dict(zip(keys, values)) def replace_placeholders(text, mapping): for key, value in mapping.items(): text = text.replace(f\'{{{key}}}\', value) if \\"{\\" in text and \\"}\\" in text: raise KeyError(\\"Some placeholders in the text have no corresponding keys in the mapping\\") return text"},{"question":"**Title:** Distributing Food to a Grid of Animals **Objective:** The goal of this exercise is to write a function that randomly distributes food items to a grid of animals in a zoo. Each food item should be placed in a cell that already contains an animal, ensuring no food overlaps and every animal gets one food item. **Background Information:** You have two files: 1. `zoo_layout_file`: This file represents the layout of the zoo, which is loaded into a 2D list using the `file_to_list` function. Each element in the list represents a cell in the zoo, which can either be empty (`.`) or contain an animal (`A`). 2. `food_stats_file`: This file contains the statistics related to food items, loaded using the `pickle_to_list` function. `food_stats[0]` gives the possible types of food to be distributed, and you will randomly choose a food type from this list using `random.choice`. **Function to Implement:** ```python def distribute_food(zoo_layout_file, food_stats_file): ``` - **Parameters:** - `zoo_layout_file` (str): The path to the file representing the zoo layout. - `food_stats_file` (str): The path to the file containing food statistics. - **Requirements:** - Use `random.choice` to determine the types of food to be placed in the zoo. - Ensure food items are only placed in cells already occupied by animals (`A`), not in empty cells (`.`). - Each food type is represented by different characters, and they should be marked on the map without overlapping other food items. - **Additional Notes:** - `file_to_list(zoo_layout_file)` and `pickle_to_list(food_stats_file)` are assumed to be predefined functions that load the zoo layout and food statistics into lists, respectively. - `test_area(zoo_layout_file, pos, [\\"A\\"])` is assumed to be a predefined function that returns `0` if a position (`pos`) on the map is valid for placing food (i.e., contains an animal), otherwise returns a non-zero value. - `write_food(zoo_layout_file, pos, food)` is assumed to be a predefined function that writes the chosen food type to the given position (`pos`) on the zoo layout.","solution":"import random def distribute_food(zoo_layout_file, food_stats_file): Distributes food randomly to animals in the zoo layout. zoo_layout = file_to_list(zoo_layout_file) food_stats = pickle_to_list(food_stats_file) food_items = food_stats[0] animal_positions = [(r, c) for r, row in enumerate(zoo_layout) for c, val in enumerate(row) if val == \'A\'] for position in animal_positions: food = random.choice(food_items) write_food(zoo_layout_file, position, food)"},{"question":"You are required to implement a function named `merge_dicts` that takes two dictionaries as input and returns a single dictionary by merging them. In the case of key collisions, values from the second dictionary should overwrite those from the first. # Requirements: - Your function should correctly handle scenarios where both dictionaries have unique keys, and where they have overlapping keys. - The resulting dictionary should be a combination of both input dictionaries with proper handling of key collisions. # Function Signature: ```python def merge_dicts(dict1: dict, dict2: dict) -> dict: pass ``` # Parameters: - `dict1` (dict): The first input dictionary. - `dict2` (dict): The second input dictionary. # Returns: - Returns a merged dictionary containing all keys from both input dictionaries. In cases where both dictionaries contain the same key, the value from `dict2` should overwrite the value from `dict1`. # Example Usage: ```python def merge_dicts(dict1, dict2): merged = dict1.copy() merged.update(dict2) return merged # Example Dictionaries dict_a = {\'a\': 1, \'b\': 2, \'c\': 3} dict_b = {\'b\': 4, \'c\': 5, \'d\': 6} print(merge_dicts(dict_a, dict_b)) # Expected output: {\'a\': 1, \'b\': 4, \'c\': 5, \'d\': 6} ``` # Constraints: - Both input dictionaries are non-null and can contain any number of keys. - The keys in the dictionaries are unique within each dictionary but may overlap between the two. # Notes: Ensure that your function correctly combines the dictionaries and handles key collisions by favoring the second dictionary\'s values. Test the function to confirm it works as expected with both overlapping and non-overlapping keys.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries. In case of key collisions, values from dict2 overwrite those from dict1. :param dict1: The first dictionary :param dict2: The second dictionary :return: A new dictionary containing all keys from both input dictionaries with dict2\'s values overwriting dict1\'s in case of collisions. merged = dict1.copy() merged.update(dict2) return merged"},{"question":"In this problem, you are required to write a function called `analyze_time_series_data` that processes a given time series dataset and extracts meaningful insights. The function should utilize the `pandas`, `numpy`, and `matplotlib` libraries to handle the dataset and visualize results. Specifically, the function should: 1. Load a dataset from a CSV file containing time series data. 2. Parse the time stamps and set them as the index of the DataFrame. 3. Resample the data based on an hourly frequency, calculating the average for each hour. 4. Plot the resampled time series data to visualize trends over time. The function signature should be: ```python def analyze_time_series_data(file_path: str) -> None: ``` Where: - `file_path` is the path to the dataset (CSV file). The function should not return any value but should save the plot as an image file named \\"time_series_plot.png\\" in the current directory. The dataset will be assumed to have a column named `timestamp` in `YYYY-MM-DD HH:MM:SS` format and one or more columns representing the observed values. Example usage: ```python analyze_time_series_data(\\"path/to/timeseries.csv\\") ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def analyze_time_series_data(file_path: str) -> None: Processes a given time series dataset and extracts meaningful insights. # Load the dataset df = pd.read_csv(file_path) # Parse the time stamps and set them as the index df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) df.set_index(\'timestamp\', inplace=True) # Resample the data based on an hourly frequency df_resampled = df.resample(\'H\').mean() # Plot the resampled time series data plt.figure(figsize=(10, 5)) df_resampled.plot() plt.title(\'Resampled Time Series Data\') plt.xlabel(\'Time\') plt.ylabel(\'Values\') plt.grid(True) # Save the plot as an image file plt.savefig(\\"time_series_plot.png\\") plt.close()"},{"question":"You are tasked with writing a function `find_substring_index` that locates the starting index of a specified substring within a given string. If the specified substring does not exist in the original string, return -1. This task will require familiarity with string manipulation in Python. **Function Signature:** ```python def find_substring_index(source_text: str, substring: str) -> int: Finds the starting index of the first occurrence of the specified substring in the source string. If the substring is not found, returns -1. Parameters: - source_text (str): The original string to search within. - substring (str): The substring to find within the source string. Returns: - index (int): The starting index of the first occurrence of the substring, or -1 if the substring is not found. ``` **Requirements:** 1. Do not use built-in string methods such as `str.find()` or `str.index()`. 2. Search should be case-sensitive. 3. Provide a performance-efficient solution that avoids unnecessary comparisons. **Example:** ```python source_text = \\"Hello, welcome to the world of Python programming.\\" substring = \\"Python\\" index = find_substring_index(source_text, substring) # Expected index: 28 ``` Implement the `find_substring_index` function considering the factors outlined above.","solution":"def find_substring_index(source_text: str, substring: str) -> int: Finds the starting index of the first occurrence of the specified substring in the source string. If the substring is not found, returns -1. Parameters: - source_text (str): The original string to search within. - substring (str): The substring to find within the source string. Returns: - index (int): The starting index of the first occurrence of the substring, or -1 if the substring is not found. if not substring: return 0 if len(substring) > len(source_text): return -1 for i in range(len(source_text) - len(substring) + 1): if source_text[i:i+len(substring)] == substring: return i return -1"},{"question":"You are asked to implement the K-means clustering algorithm, an unsupervised learning method used to partition a dataset into K clusters. The goal is to assign each data point to the nearest cluster center and then update the cluster centers by computing the mean of the points in each cluster. This process repeats until the cluster centers converge. Write a function `kmeans(data, K, max_iters=100, tol=1e-4)` that performs the K-means clustering algorithm as follows: Function Signature: ```python def kmeans(data, K, max_iters=100, tol=1e-4): ``` # Arguments: - `data` (ndarray): A numpy matrix where each row represents a single data point. - `K` (int): The number of clusters. - `max_iters` (int, optional): The maximum number of iterations. Default is 100. - `tol` (float, optional): The tolerance for convergence. Default is 1e-4. # Returns: - A tuple where the first element is a list of cluster assignments and the second element is a numpy array representing the final cluster centers. # Note: Make sure to utilize the following `numpy` functions for certain operations: - `numpy.random.choice`: To randomly select initial cluster centers. - `numpy.linalg.norm`: To calculate the Euclidean distance between points. - `numpy.mean`: To compute the mean of points. # Hint: - Randomly initialize K cluster centers from the data points. - Assign each data point to the nearest cluster center. - Update cluster centers by computing the mean of all points assigned to each cluster. - Iterate the process until the cluster centers do not change more than the given tolerance `tol` or the number of iterations exceeds `max_iters`. # Example: ```python import numpy as np # Sample Data data = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [10.0, 10.0], [10.0, 11.0], [11.0, 11.0]]) assignments, centers = kmeans(data, 2) print(\\"Cluster Assignments:\\", assignments) print(\\"Cluster Centers:\\", centers) ``` # Implementation ```python import numpy as np def kmeans(data, K, max_iters=100, tol=1e-4): # Initialize the cluster centers randomly from the data points centers = data[np.random.choice(data.shape[0], K, replace=False)] for _ in range(max_iters): # Assign each point to the nearest cluster center distances = np.linalg.norm(data[:, np.newaxis] - centers[np.newaxis, :], axis=2) assignments = np.argmin(distances, axis=1) # Calculate new centers new_centers = np.array([data[assignments == k].mean(axis=0) for k in range(K)]) # Check for convergence if np.linalg.norm(new_centers - centers) < tol: break centers = new_centers return assignments.tolist(), centers # Sample Data data = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [10.0, 10.0], [10.0, 11.0], [11.0, 11.0]]) assignments, centers = kmeans(data, 2) print(\\"Cluster Assignments:\\", assignments) print(\\"Cluster Centers:\\", centers) ```","solution":"import numpy as np def kmeans(data, K, max_iters=100, tol=1e-4): # Initialize the cluster centers randomly from the data points centers = data[np.random.choice(data.shape[0], K, replace=False)] for _ in range(max_iters): # Assign each point to the nearest cluster center distances = np.linalg.norm(data[:, np.newaxis] - centers[np.newaxis, :], axis=2) assignments = np.argmin(distances, axis=1) # Calculate new centers new_centers = np.array([data[assignments == k].mean(axis=0) for k in range(K)]) # Check for convergence if np.linalg.norm(new_centers - centers) < tol: break centers = new_centers return assignments.tolist(), centers"},{"question":"You are tasked with creating a function `find_shortest_path(grid)` that finds the shortest path from the top-left corner to the bottom-right corner of a 2D grid. You can only move up, down, left, or right. The grid contains walls (`1`s) and open spaces (`0`s), and you cannot travel through walls. Given: - `grid`: A list of lists representing the 2D grid, where `1` indicates a wall and `0` indicates an open space. The function should return the length of the shortest path from the top-left to the bottom-right corner. If no path exists, return `-1`. # Approach: - Use a breadth-first search (BFS) algorithm to explore the grid and find the shortest path. - Use a queue to keep track of the cells to be explored, along with their distances from the start. - Maintain a set to keep track of visited cells to avoid revisiting them. # Example Usage: ```python grid = [ [0, 1, 1, 0], [0, 0, 1, 0], [1, 0, 1, 1], [0, 0, 0, 0] ] find_shortest_path(grid) ``` Expected Output: ``` 6 ``` # Constraints: - Assume the grid will be a non-empty list of lists where each list has the same length. - The top-left and bottom-right corners are always `0`. - Grid dimensions are at most 100x100. # Additional Requirements: - Handle edge cases where no path exists. - Ensure the function performs efficiently within the given constraints.","solution":"from collections import deque def find_shortest_path(grid): def is_valid(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0 if not grid or not grid[0]: return -1 m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 1)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are required to implement a function named `calculate_statistics` that computes basic statistics for a given list of numerical values. The function should return the mean, median, variance, and standard deviation of the list. If the list is empty, return `None` for each statistic. Function Signature: ```python def calculate_statistics(data: List[float]) -> Tuple[Optional[float], Optional[float], Optional[float], Optional[float]]: ``` Parameters: - `data`: A list of floating-point numbers for which statistics need to be calculated. Requirements: 1. Calculate the mean of the list. Use the formula: ( text{mean} = frac{sum_{i=1}^{n} x_i}{n} ) 2. Calculate the median of the list. If the list length is even, the median is the average of the two middle numbers. If the length is odd, the median is the middle number. 3. Calculate the variance. Use the formula: ( text{variance} = frac{sum_{i=1}^{n} (x_i - text{mean})^2}{n} ) 4. Calculate the standard deviation. Use the formula: ( text{standard deviation} = sqrt{text{variance}} ) 5. Return a tuple of four values: (mean, median, variance, standard deviation). If the list is empty, return `(None, None, None, None)`. Example: Here is how the function can be used: ```python data = [1.0, 2.0, 3.0, 4.0, 5.0] statistics = calculate_statistics(data) print(statistics) # Output: (3.0, 3.0, 2.0, 1.4142135623730951) ``` Another example with an empty list: ```python data = [] statistics = calculate_statistics(data) print(statistics) # Output: (None, None, None, None) ```","solution":"from typing import List, Tuple, Optional import math def calculate_statistics(data: List[float]) -> Tuple[Optional[float], Optional[float], Optional[float], Optional[float]]: if not data: return (None, None, None, None) n = len(data) # Calculate Mean mean = sum(data) / n # Calculate Median sorted_data = sorted(data) if n % 2 == 1: median = sorted_data[n // 2] else: median = (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2 # Calculate Variance variance = sum((x - mean) ** 2 for x in data) / n # Calculate Standard Deviation std_dev = math.sqrt(variance) return (mean, median, variance, std_dev)"},{"question":"You have a list of dictionaries representing student records. Each dictionary contains the name, marks in three subjects (Math, Science, and English), and the grade of the student. You need to create a function `calculate_highest_scorer(students)` that: 1. Takes a list of student records as input. 2. Calculates the total marks for each student. 3. Returns the name of the student with the highest total marks. If there are multiple students with the same highest total marks, return the name of the student who appears first in the list. Here is what the function signature should look like: ```python def calculate_highest_scorer(students: list) -> str: pass ``` Input - `students`: A list of dictionaries, where each dictionary represents a student\'s record with keys `name`, `math`, `science`, `english`, and `grade`. Output - The function returns a string which is the name of the student with the highest total marks. # Example ```python students = [ {\\"name\\": \\"Alice\\", \\"math\\": 85, \\"science\\": 92, \\"english\\": 88, \\"grade\\": \\"A\\"}, {\\"name\\": \\"Bob\\", \\"math\\": 90, \\"science\\": 85, \\"english\\": 95, \\"grade\\": \\"A\\"}, {\\"name\\": \\"Charlie\\", \\"math\\": 78, \\"science\\": 81, \\"english\\": 86, \\"grade\\": \\"B\\"} ] print(calculate_highest_scorer(students)) ``` Output: ``` Bob ``` # Constraints - Each student record is a dictionary with the keys `name`, `math`, `science`, `english`, and `grade`. - Assume that all subjects have non-negative integer marks.","solution":"def calculate_highest_scorer(students: list) -> str: Given a list of student records, calculates and returns the name of the student with the highest total marks. If there are multiple students with the same highest total marks, returns the name of the student who appears first in the list. :param students: List of dictionaries where each dictionary contains the name, marks in math, science, and english subjects, and the grade of a student. :return: The name of the student with the highest total marks. highest_scorer = \\"\\" highest_total = -1 for student in students: total = student[\'math\'] + student[\'science\'] + student[\'english\'] if total > highest_total: highest_total = total highest_scorer = student[\'name\'] return highest_scorer"},{"question":"You are tasked with writing a Python function named `get_diagonal_sum` that calculates the sum of the elements along the main diagonal of a square matrix. The matrix will be provided as a list of lists, where each inner list represents a row in the matrix. The matrix will always be square, meaning the same number of rows and columns (n x n). Your function should use list comprehension and basic Python functions to compute the sum of the diagonal elements. The function should adhere to the following specifications: - **Function Signature**: `def get_diagonal_sum(matrix: List[List[int]]) -> int:` - **Parameters**: - `matrix`: A list of lists representing an n x n matrix. - **Returns**: An integer representing the sum of the elements along the main diagonal of the matrix. You should not build the matrices interactively or handle input/output operations. Instead, focus on implementing just the function logic using list comprehension. # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] result = get_diagonal_sum(matrix) # result should be 15 (1 + 5 + 9 = 15) ``` Your task is to implement the `get_diagonal_sum` function within this problem\'s constraints.","solution":"from typing import List def get_diagonal_sum(matrix: List[List[int]]) -> int: Returns the sum of the elements along the main diagonal of a square matrix. return sum(matrix[i][i] for i in range(len(matrix)))"},{"question":"Create a function `transpose_lists_of_lists(matrix)` that takes a list of lists `matrix` and returns its transpose. The function should not use any external libraries or functions specifically designed to compute the transpose. Instead, it should manually construct the transposed matrix by rearranging the elements from the original matrix. Here is a template for the function signature: ```python def transpose_lists_of_lists(matrix): # Your code here ``` **Requirements:** 1. The input `matrix` is a list of lists, where each sublist represents a row of the matrix. 2. The transposed matrix should be constructed such that elements from the original rows become the columns in the new matrix. 3. You cannot use any built-in functions specifically designed for transposing (e.g., `zip(*matrix)` is not allowed). 4. Your implementation should handle matrices of different dimensions, including non-square matrices. **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] transposed_matrix = transpose_lists_of_lists(matrix) # transposed_matrix should be: # [ # [1, 4, 7], # [2, 5, 8], # [3, 6, 9] # ] matrix = [ [1, 2], [3, 4], [5, 6] ] transposed_matrix = transpose_lists_of_lists(matrix) # transposed_matrix should be: # [ # [1, 3, 5], # [2, 4, 6] # ] ```","solution":"def transpose_lists_of_lists(matrix): Returns the transpose of a given list of lists (matrix). if not matrix or not matrix[0]: return [] n_rows = len(matrix) n_cols = len(matrix[0]) transposed_matrix = [] for col in range(n_cols): new_row = [] for row in range(n_rows): new_row.append(matrix[row][col]) transposed_matrix.append(new_row) return transposed_matrix"},{"question":"# Matrix Transposition and Row Column Summation In this problem, you will implement a function `transpose_and_sum_matrix` that takes an input 2D numpy array (matrix) and performs two operations: 1. Transposes the matrix. 2. Computes the sum of each row of the transposed matrix. Your task is to: 1. Implement the `transpose_and_sum_matrix` function that takes a 2D numpy array `A` as its argument. 2. The function should return a 1D numpy array containing the sum of each row of the transposed matrix. Here is a brief description of the parameter: - `A`: A 2D numpy array representing the input matrix. **Constraints:** - Use numpy\'s built-in functions to perform matrix transposition and summation. **Function Signature:** ```python def transpose_and_sum_matrix(A): pass ``` **Example:** ```python import numpy as np A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) result = transpose_and_sum_matrix(A) print(result) # Expected output: # array([12, 15, 18]) A = np.array([[1, 2], [3, 4], [5, 6]]) result = transpose_and_sum_matrix(A) print(result) # Expected output: # array([ 9, 12]) ```","solution":"import numpy as np def transpose_and_sum_matrix(A): Transposes the input 2D numpy array and computes the sum of each row of the transposed matrix. Parameters: A (numpy.ndarray): A 2D numpy array representing the input matrix. Returns: numpy.ndarray: A 1D numpy array containing the sum of each row of the transposed matrix. # Transpose the matrix transposed_matrix = np.transpose(A) # Compute the sum of each row of the transposed matrix sum_of_rows = np.sum(transposed_matrix, axis=1) return sum_of_rows"},{"question":"You are asked to create a function `generate_invoice` to automate the production of invoices for a store\'s customers. This function will take a list of purchased items, their prices, quantities, and apply a tax to the total amount. # Function Specifications: - Function Name: `generate_invoice` - Input Parameters: - `customer_name` (str): The name of the customer. - `items` (list of dict): A list of dictionaries where each dictionary represents an item with keys `name` (str, the name of the item), `price` (float, the price of the item), and `quantity` (int, the quantity of the item purchased). - `tax_rate` (float): The tax rate to be applied, represented as a percentage (e.g., 10 for 10%). # Behavior: 1. The function should calculate the subtotal, which is the sum of the product of the price and quantity for all items. 2. It should calculate the tax amount by applying the tax rate to the subtotal. 3. The total amount should be the sum of the subtotal and the calculated tax. 4. The function should create a dictionary representing an invoice, including the customer\'s name, list of purchased items with their details, subtotal, tax amount, and total amount. 5. Return the invoice dictionary. # Example: ```python # Given the following input: customer_name = \\"John Doe\\" items = [ {\\"name\\": \\"apple\\", \\"price\\": 0.50, \\"quantity\\": 10}, {\\"name\\": \\"banana\\", \\"price\\": 0.30, \\"quantity\\": 5} ] tax_rate = 10 generate_invoice(customer_name, items, tax_rate) # Should return: { \\"customer_name\\": \\"John Doe\\", \\"items\\": [ {\\"name\\": \\"apple\\", \\"price\\": 0.50, \\"quantity\\": 10}, {\\"name\\": \\"banana\\", \\"price\\": 0.30, \\"quantity\\": 5} ], \\"subtotal\\": 6.5, \\"tax_amount\\": 0.65, \\"total_amount\\": 7.15 } ``` # Notes: - You can assume the input is always correctly formatted. - Ensure all numerical values (subtotal, tax amount, total amount) are rounded to two decimal places. - Consider the possibility of an empty items list, where subtotal, tax amount, and total amount would be 0.","solution":"def generate_invoice(customer_name, items, tax_rate): Generates an invoice for a customer with a list of purchased items and a tax rate. Parameters: - customer_name (str): The name of the customer. - items (list of dict): A list of dictionaries where each dictionary represents an item with keys: - name (str): The name of the item. - price (float): The price of the item. - quantity (int): The quantity of the item purchased. - tax_rate (float): The tax rate to be applied, represented as a percentage (e.g., 10 for 10%). Returns: - dict: A dictionary representing an invoice with customer\'s name, list of purchased items, subtotal, tax amount, and total amount. subtotal = sum(item[\'price\'] * item[\'quantity\'] for item in items) tax_amount = round(subtotal * (tax_rate / 100), 2) total_amount = round(subtotal + tax_amount, 2) invoice = { \\"customer_name\\": customer_name, \\"items\\": items, \\"subtotal\\": round(subtotal, 2), \\"tax_amount\\": tax_amount, \\"total_amount\\": total_amount } return invoice"},{"question":"You are tasked with developing a function to normalize specified numerical columns in a given dataset. Normalization rescales the values of the numerical features to a fixed range, typically [0, 1], making the dataset suitable for certain types of machine learning algorithms. Your function should be named `normalize_dataset` and it should use the `pandas` and `scikit-learn` libraries. Your goal is to implement normalization on the specified columns of a dataset, ensuring that: 1. The original dataset remains unaltered except for the normalized columns. 2. If a normalizer is provided, it should be used; otherwise, a new one should be trained. 3. Your function must return two objects: - The dataset with the specified columns normalized. - The trained normalizer for potential future transformations. **Function Signature:** ```python def normalize_dataset(dataset: pd.DataFrame, columns_to_normalize: List[str], normalizer: MinMaxScaler = None) -> Tuple[pd.DataFrame, MinMaxScaler]: pass ``` **Parameters:** - `dataset` (pd.DataFrame): A pandas DataFrame containing the dataset with unnormalized numerical columns. - `columns_to_normalize` (List[str]): A list of column names in `dataset` that need to be normalized. - `normalizer` (MinMaxScaler, optional): An instance of `MinMaxScaler` that has been previously trained. If `None`, a new instance should be created and trained. **Returns:** - `normalized_dataset` (pd.DataFrame): A new DataFrame with the specified columns normalized. - `trained_normalizer` (MinMaxScaler): The fitted `MinMaxScaler` instance. **Example Usage:** ```python import pandas as pd from sklearn.preprocessing import MinMaxScaler from typing import List, Tuple data = { \'weight\': [60, 72, 85, 90], \'height\': [1.65, 1.80, 1.75, 1.90], \'age\': [25, 34, 45, 50] } df = pd.DataFrame(data) columns = [\'weight\', \'height\'] normalized_df, normalizer = normalize_dataset(df, columns) ``` Use this function to prepare your datasets for training machine learning models that require normalized input features. Make sure to handle edge cases and verify the function’s correctness with various datasets.","solution":"import pandas as pd from sklearn.preprocessing import MinMaxScaler from typing import List, Tuple def normalize_dataset(dataset: pd.DataFrame, columns_to_normalize: List[str], normalizer: MinMaxScaler = None) -> Tuple[pd.DataFrame, MinMaxScaler]: Normalizes specified columns in a pandas DataFrame using MinMaxScaler. Parameters: dataset (pd.DataFrame): The input DataFrame containing the data. columns_to_normalize (List[str]): The list of column names to normalize. normalizer (MinMaxScaler, optional): An instance of MinMaxScaler to use. If None, a new instance is created. Returns: Tuple[pd.DataFrame, MinMaxScaler]: The DataFrame with normalized columns and the fitted MinMaxScaler object. # Creating a copy of the dataset to avoid modifying the original one normalized_dataset = dataset.copy() # If no normalizer provided, create a new MinMaxScaler if normalizer is None: normalizer = MinMaxScaler() # Fit the normalizer on the specified columns and transform them normalized_dataset[columns_to_normalize] = normalizer.fit_transform(normalized_dataset[columns_to_normalize]) return normalized_dataset, normalizer"},{"question":"In computational geometry, determining whether a point lies within a given polygon is a common problem. One efficient method to solve this is by using the ray-casting algorithm. The idea is to draw a horizontal ray to the right from the point in question and count how many times it intersects the polygon\'s edges. If the number of intersections is odd, the point lies inside the polygon; if even, it is outside. **Task**: Implement a function named `is_point_in_polygon` that takes two parameters: a list of tuples `polygon` representing the vertices of the polygon and a tuple `point` representing the coordinates of the point to be tested. Return `True` if the point is inside the polygon, `False` otherwise. The target function signature is: ```python def is_point_in_polygon(polygon: list[tuple[float, float]], point: tuple[float, float]) -> bool: ``` # Implementation Requirements: 1. The polygon vertices are provided as a list of tuples, where each tuple contains the x, y coordinates of a vertex. 2. The point to be tested is provided as a tuple containing the x, y coordinates. 3. Implement the ray-casting algorithm to determine if the point lies within the polygon. # Ray-casting Algorithm: To determine if a point ( P ) ( (px, py) ) is inside the polygon: 1. Initialize a count of intersections to zero. 2. For each edge of the polygon, determined by vertices ( V_i (vx_i, vy_i) ) and ( V_{i+1} (vx_{i+1}, vy_{i+1}) ): - Check if the horizontal ray from ( P ) intersects the edge. - If it intersects, increment the count. 3. If the total count of intersections is odd, ( P ) lies inside the polygon; otherwise, it lies outside. # Edge Cases: - The point lies exactly on one of the polygon\'s edges. - The point lies exactly on a polygon vertex. # Example: ```python polygon = [(0, 0), (5, 0), (5, 5), (0, 5)] point_inside = (3, 3) point_outside = (6, 6) point_on_edge = (5, 2.5) print(is_point_in_polygon(polygon, point_inside)) # Output: True print(is_point_in_polygon(polygon, point_outside)) # Output: False print(is_point_in_polygon(polygon, point_on_edge)) # Output: True ``` # Constraints: - Assume the polygon vertices are defined in a counter-clockwise order. - Assume there are no self-intersections in the polygon. This task evaluates your understanding of computational geometry, specifically the ray-casting algorithm, handling edge cases, and implementing geometric algorithms efficiently.","solution":"def is_point_in_polygon(polygon, point): Determine if a point is inside a polygon using the ray-casting algorithm. :param polygon: List[Tuple[float, float]] - a list of tuples representing the vertices of the polygon :param point: Tuple[float, float] - a tuple representing the coordinates of the point to be tested :return: bool - True if the point is inside the polygon, False otherwise px, py = point count = 0 n = len(polygon) for i in range(n): v1x, v1y = polygon[i] v2x, v2y = polygon[(i + 1) % n] # Check if the point is on an edge if min(v1y, v2y) < py <= max(v1y, v2y): if px <= max(v1x, v2x): if v1y != v2y: x_intersect = (py - v1y) * (v2x - v1x) / (v2y - v1y) + v1x if v1x == v2x or px <= x_intersect: count += 1 return count % 2 == 1"},{"question":"You are tasked with writing a Python function called `generate_number_sequence`. This function will generate a sequence of numbers from 1 to a given limit and replace certain numbers in the sequence based on specific rules. This function should: 1. Replace numbers divisible by 3 with the string \\"Fizz\\". 2. Replace numbers divisible by 5 with the string \\"Buzz\\". 3. Replace numbers divisible by both 3 and 5 with the string \\"FizzBuzz\\". 4. Return the sequence as a list. The sequence should be generated from 1 up to and including the provided limit. # Function Signature ```python def generate_number_sequence(limit: int) -> list: ``` # Example Usage ```python print(generate_number_sequence(15)) ``` # Example Output ``` [1, 2, \'Fizz\', 4, \'Buzz\', \'Fizz\', 7, 8, \'Fizz\', \'Buzz\', 11, \'Fizz\', 13, 14, \'FizzBuzz\'] ``` # Constraints - The `limit` will be a positive integer greater than 0. # Hints - Use a loop to generate the sequence of numbers. - Use conditional statements to apply the replacement rules.","solution":"def generate_number_sequence(limit: int) -> list: Generates a sequence of numbers from 1 to the given limit where: - Numbers divisible by 3 are replaced by \\"Fizz\\" - Numbers divisible by 5 are replaced by \\"Buzz\\" - Numbers divisible by both 3 and 5 are replaced by \\"FizzBuzz\\" - All other numbers remain unchanged. Args: limit (int): The upper limit of the sequence, inclusive. Returns: list: The generated sequence with the described replacements. sequence = [] for i in range(1, limit + 1): if i % 3 == 0 and i % 5 == 0: sequence.append(\'FizzBuzz\') elif i % 3 == 0: sequence.append(\'Fizz\') elif i % 5 == 0: sequence.append(\'Buzz\') else: sequence.append(i) return sequence"},{"question":"You are given a file named \\"transactions.json\\" which contains transactional data in JSON format. Each transaction has fields: \\"transaction_id\\", \\"user_id\\", \\"amount\\", and \\"category\\". Your task is to write a function named `analyze_transactions` that performs the following operations: 1. Load the JSON data from the file and parse it into a list of dictionaries. 2. Calculate the total transaction amount for each category. 3. Identify the user with the highest transaction amount sum and return their user_id. 4. Filter out transactions where the amount is negative or zero and return the filtered set of transactions. The function should return a dictionary with two keys: \'total_amount_by_category\' showing the total amount for each transaction category, and \'highest_spending_user\' showing the user_id of the highest spender. Additionally, return the filtered list of transactions. Here is the function signature: ```python def analyze_transactions(): # Your code here ```","solution":"import json def analyze_transactions(filename=\\"transactions.json\\"): with open(filename, \'r\') as file: transactions = json.load(file) total_amount_by_category = {} user_total = {} filtered_transactions = [] for transaction in transactions: category = transaction[\'category\'] user_id = transaction[\'user_id\'] amount = transaction[\'amount\'] # Summing up the transaction amounts by category. if category not in total_amount_by_category: total_amount_by_category[category] = 0 total_amount_by_category[category] += amount # Summing up the transaction amounts by user. if user_id not in user_total: user_total[user_id] = 0 user_total[user_id] += amount # Filtering transactions with positive amounts. if amount > 0: filtered_transactions.append(transaction) # Identifying the user with the highest transaction amount sum. highest_spending_user = max(user_total, key=user_total.get) return { \'total_amount_by_category\': total_amount_by_category, \'highest_spending_user\': highest_spending_user, \'filtered_transactions\': filtered_transactions }"},{"question":"You are tasked with writing a function called `merge_lists` that merges multiple lists of integers into a single sorted list without duplicates. The lists will be provided in a JSON file with the following structure: ```json { \\"lists\\": [[1, 3, 5], [1, 2, 3], [4, 6, 3], ...] } ``` Your function should take one argument: - `file_path` (str): The path to the JSON file. The function should perform the following operations: 1. Open the JSON file and load its contents using `json.load`. 2. Extract the lists of integers from the JSON content. 3. Merge all the lists into a single list, ensuring all integers are unique. 4. Sort the merged list in ascending order. 5. Write the sorted list back to the file, replacing the original list structure with: ```json { \\"merged_list\\": [1, 2, 3, 4, 5, 6, ...] } ``` Make sure to handle the following edge cases: - If the specified file does not exist, the function should return without doing anything. - If any of the lists contain non-integer values, they should be ignored in the merged list. Your task is to implement the `merge_lists` function focusing on the use of the `json` library, particularly `json.load` and `json.dump`, as well as list manipulation and sorting techniques in Python.","solution":"import json import os def merge_lists(file_path): if not os.path.exists(file_path): return with open(file_path, \'r\') as file: data = json.load(file) lists = data.get(\\"lists\\", []) merged_set = set() for lst in lists: for item in lst: if isinstance(item, int): merged_set.add(item) merged_list = sorted(merged_set) result = { \\"merged_list\\": merged_list } with open(file_path, \'w\') as file: json.dump(result, file)"},{"question":"** Write a function `next_largest_permutation(arr: List[int]) -> List[int]` that takes a list of integers and returns the next lexicographical permutation of the list. The next lexicographical permutation is the permutation that follows the current one in dictionary order. If the given permutation is the highest possible, your function should return the lowest possible permutation (sorted in ascending order). Implement the function without using built-in permutation generation functions or libraries, focusing instead on an efficient algorithm. **Function Signature**: ```python def next_largest_permutation(arr: List[int]) -> List[int]: pass ``` **Example Usage**: ```python # Example 1: arr = [1, 2, 3] print(next_largest_permutation(arr)) # Output: [1, 3, 2] # Example 2: arr = [3, 2, 1] print(next_largest_permutation(arr)) # Output: [1, 2, 3] # Example 3: arr = [1, 1, 5] print(next_largest_permutation(arr)) # Output: [1, 5, 1] ``` # Detailed Steps 1. Find the largest index `k` such that `arr[k] < arr[k + 1]`. If no such index exists, the permutation is the highest permutation. 2. Find the largest index `l` greater than `k` such that `arr[k] < arr[l]`. 3. Swap the value of `arr[k]` with that of `arr[l]`. 4. Reverse the sequence from `arr[k + 1]` up to and including the final element. # Constraints - Elements in the list can be any integers but the function should handle lists containing at least one element and up to 100 elements. # Notes - Pay attention to the edge cases where the list is fully sorted in descending order, where a direct reverse operation is required to get the lowest permutation. - Ensure the function has optimal time complexity to handle larger lists efficiently. **","solution":"from typing import List def next_largest_permutation(arr: List[int]) -> List[int]: Return the next lexicographical permutation of the list of integers. n = len(arr) if n <= 1: return arr # Step 1: Find the largest index `k` such that `arr[k] < arr[k + 1]`. k = n - 2 while k >= 0 and arr[k] >= arr[k + 1]: k -= 1 if k == -1: return sorted(arr) # Step 2: Find the largest index `l` greater than `k` such that `arr[k] < arr[l]`. l = n - 1 while arr[k] >= arr[l]: l -= 1 # Step 3: Swap the value of `arr[k]` with that of `arr[l]`. arr[k], arr[l] = arr[l], arr[k] # Step 4: Reverse the sequence from `arr[k + 1]` up to the final element. arr[k + 1:] = reversed(arr[k + 1:]) return arr"},{"question":"You are required to write a function called `find_tallest_building` that reads a file containing the heights of various buildings in a city and returns the name of the tallest building. Each line in the file represents one building and is formatted as follows: `building_name:height` (e.g., `Empire State:443`). The function should: 1. Open and read the file. 2. Parse each line to extract the building name and its height. 3. Compare the heights to determine the tallest building. 4. Return the name of the tallest building. The file path should be passed as an argument to the function. **Function Signature:** ```python def find_tallest_building(file_path: str) -> str: ``` **Requirements:** - Use file handling (open, read) to process the file. - Ensure the function handles possible exceptions (e.g., file not found, incorrect formatting). - The building\'s height can be assumed to be a positive integer. - In case of multiple buildings with the same height, return the first one encountered in the file.","solution":"def find_tallest_building(file_path: str) -> str: Reads a file containing the heights of various buildings and returns the name of the tallest building. The file contains lines formatted as \'building_name:height\'. try: tallest_building = None tallest_height = -1 with open(file_path, \'r\') as file: for line in file: name, height_str = line.strip().split(\':\') height = int(height_str) if height > tallest_height: tallest_height = height tallest_building = name return tallest_building except FileNotFoundError: return \\"File not found.\\" except ValueError: return \\"File content is not in correct format.\\""},{"question":"You are tasked with writing a function `plot_linear_regression` that creates a scatter plot of the data points and overlays the best-fit line computed from a linear regression model. Your function should: 1. Use the `matplotlib.pyplot` API to set up a figure for the plot. 2. Plot the data points using a scatter plot. 3. Compute the best-fit line based on the provided weight and bias values. 4. Plot the best-fit line on the same chart. 5. Show the plot using `plt.show`. The function should have the following signature: ```python def plot_linear_regression(dataX, dataY, weights, bias): # your implementation ``` # Inputs: - `dataX`: A Pandas DataFrame or NumPy array of shape (n_samples, 1) containing the X coordinates of the data points. - `dataY`: A Pandas DataFrame or NumPy array of shape (n_samples, 1) containing the Y coordinates of the data points. - `weights`: A float representing the slope of the best-fit line. - `bias`: A float representing the y-intercept of the best-fit line. # Expected Output: The function should create and display a Matplotlib plot with: - A scatter plot of the data points. - The best-fit line overlaid on the scatter plot. # Additional Requirements: - Use the `matplotlib.pyplot.scatter` function to create the scatter plot. - Compute the values for the best-fit line using the equation `y = weights * x + bias`. - Ensure the figure is properly labeled with axis titles and a legend.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_linear_regression(dataX, dataY, weights, bias): Plots a scatter plot of data points and overlays the best-fit line. Parameters: dataX: Pandas DataFrame or NumPy array of shape (n_samples, 1) dataY: Pandas DataFrame or NumPy array of shape (n_samples, 1) weights: float, slope of the best-fit line bias: float, y-intercept of the best-fit line if isinstance(dataX, np.ndarray): dataX = dataX.flatten() if isinstance(dataY, np.ndarray): dataY = dataY.flatten() plt.figure(figsize=(10, 6)) plt.scatter(dataX, dataY, color=\'blue\', label=\'Data points\') # Compute the best-fit line lineX = np.linspace(dataX.min(), dataX.max(), 100) lineY = weights * lineX + bias plt.plot(lineX, lineY, color=\'red\', label=\'Best-fit line\') plt.title(\'Linear Regression\') plt.xlabel(\'X\') plt.ylabel(\'Y\') plt.legend() plt.show()"},{"question":"Write a function named `parse_log_file(file_path)` that takes a file path (`file_path`) to a log file and returns a dictionary summarizing the number of occurrences of each error type in the log. The log file is a plain text file where each line represents an entry in the following format: ``` [DATE-TIME] ERROR_TYPE: Error description ``` For example: ``` [2023-01-01 14:32:15] TimeoutError: The request timed out. [2023-01-01 14:32:16] ConnectionError: Failed to establish a new connection. [2023-01-01 14:32:17] TimeoutError: The request timed out. ``` Your function should: 1. Read the contents of the log file specified by `file_path`. 2. Parse each line to extract the `ERROR_TYPE`. 3. Count the occurrences of each `ERROR_TYPE`. 4. Return a dictionary where the keys are the unique `ERROR_TYPE`s and the values are their respective counts. Your function should handle any reasonably formatted log file and make use of Python\'s string manipulation techniques to extract necessary information. Here is an example to illustrate the expected behavior: ```python # Sample log file content: # [2023-01-01 14:32:15] TimeoutError: The request timed out. # [2023-01-01 14:32:16] ConnectionError: Failed to establish a new connection. # [2023-01-01 14:32:17] TimeoutError: The request timed out. file_path = \\"path/to/log_file.txt\\" result = parse_log_file(file_path) # Expected Output: # { # \\"TimeoutError\\": 2, # \\"ConnectionError\\": 1 # } ``` **Note:** Assume all lines in the log file are correctly formatted as no error or exception handling for file reading or parsing is required for this task.","solution":"def parse_log_file(file_path): Parses a log file and returns a dictionary with counts of each error type. Args: file_path (str): The path to the log file. Returns: dict: A dictionary with error types as keys and their occurrence counts as values. error_counts = {} with open(file_path, \'r\') as file: for line in file: # Split the line to extract the ERROR_TYPE _, error_type_with_description = line.split(\'] \', 1) error_type = error_type_with_description.split(\':\')[0] # Update the count for this error type if error_type in error_counts: error_counts[error_type] += 1 else: error_counts[error_type] = 1 return error_counts"},{"question":"You are asked to design a task scheduler class in Python that manages tasks with different priorities. The scheduler should allow tasks to be added with a given priority and execute them in priority order. The highest priority tasks should be executed first, and tasks with the same priority should be executed in the order they were added. Specifically, you need to implement a `TaskScheduler` class with the following methods: 1. `add_task(task: str, priority: int)`: Adds a new task with the specified priority. 2. `get_next_task() -> str`: Retrieves and removes the highest priority task from the scheduler. If multiple tasks have the same highest priority, the one that was added first should be returned. If there are no tasks, return `None`. 3. `peek_next_task() -> str`: Retrieves but does not remove the highest priority task from the scheduler. If there are no tasks, return `None`. You may use any standard library data structures, but the implementation should be efficient in terms of operation time complexity. Function Signatures: ```python class TaskScheduler: def __init__(self): pass def add_task(self, task: str, priority: int) -> None: pass def get_next_task(self) -> str: pass def peek_next_task(self) -> str: pass ``` Here is an example of how your `TaskScheduler` class will be used: ```python tasks = TaskScheduler() tasks.add_task(\\"Write documentation\\", 2) tasks.add_task(\\"Implement feature\\", 1) tasks.add_task(\\"Fix bugs\\", 2) assert tasks.peek_next_task() == \\"Write documentation\\" assert tasks.get_next_task() == \\"Write documentation\\" assert tasks.get_next_task() == \\"Fix bugs\\" assert tasks.get_next_task() == \\"Implement feature\\" assert tasks.get_next_task() is None ``` You need to write the implementation of the `TaskScheduler` class methods as described above.","solution":"import heapq from collections import deque class TaskScheduler: def __init__(self): self.tasks = [] self.entry_count = 0 def add_task(self, task: str, priority: int) -> None: # Using negative priority for max-heap behavior with heapq heapq.heappush(self.tasks, (-priority, self.entry_count, task)) self.entry_count += 1 def get_next_task(self) -> str: if not self.tasks: return None return heapq.heappop(self.tasks)[-1] def peek_next_task(self) -> str: if not self.tasks: return None return self.tasks[0][-1]"},{"question":"Your task is to create a function named `smallest_subarray_sum(array, target_sum)`, which finds the length of the smallest contiguous subarray of which the sum is at least `target_sum`. If there is no such subarray, the function should return 0. To achieve this, you need to use a sliding window approach to minimize the length of the subarray efficiently. **Function Signature:** ```python def smallest_subarray_sum(array: List[int], target_sum: int) -> int: ... ``` **Parameters:** - `array` (List[int]): A list of positive integers. - `target_sum` (int): The target sum that the smallest subarray must equal or exceed. **Returns:** - `int`: The length of the smallest subarray with sum at least `target_sum`. Returns 0 if no such subarray exists. **Example:** ```python print(smallest_subarray_sum([2, 3, 1, 2, 4, 3], 7)) # Possible output: # 2 (The smallest subarray with a sum >= 7 is [4, 3]) print(smallest_subarray_sum([1, 1, 1, 1, 1], 5)) # Possible output: # 5 (The smallest subarray with a sum >= 5 is [1, 1, 1, 1, 1]) print(smallest_subarray_sum([1, 2, 3, 4, 5], 11)) # Possible output: # 3 (The smallest subarray with a sum >= 11 is [3, 4, 5]) print(smallest_subarray_sum([1, 2, 3], 10)) # Possible output: # 0 (There is no subarray with a sum >= 10) ```","solution":"from typing import List def smallest_subarray_sum(array: List[int], target_sum: int) -> int: n = len(array) min_length = float(\'inf\') window_start = 0 current_sum = 0 for window_end in range(n): current_sum += array[window_end] while current_sum >= target_sum: min_length = min(min_length, window_end - window_start + 1) current_sum -= array[window_start] window_start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are tasked with creating a function called `detect_palindrome_substrings` which aims to find all possible palindrome substrings in a given string and return them in a list. Here is a detailed breakdown of the requirements for `detect_palindrome_substrings`: 1. **Function Name:** `detect_palindrome_substrings` 2. **Inputs:** - `s`: A string (e.g., `\\"abba\\"`). 3. **Outputs:** - A list containing all unique palindrome substrings found in the input string. Your function should: 1. Identify all substrings of the given string. 2. Check whether each substring is a palindrome. 3. Collect and return all unique palindrome substrings in a list. # Example Suppose `s` is as follows: ```python s = \\"abba\\" ``` The function call `detect_palindrome_substrings(s)` should return: ```python [\\"a\\", \\"b\\", \\"bb\\", \\"abba\\"] ``` # Explanation - The substrings of `\\"abba\\"` are: - \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"ab\\", \\"bb\\", \\"ba\\", \\"abb\\", \\"bba\\", \\"abba\\" - Among these substrings, the unique palindromes are: - \\"a\\", \\"b\\", \\"bb\\", \\"abba\\" # Notes - A palindrome is a sequence of characters that reads the same backward as forward. - Ensure that the function detects single character palindromes as well. - The output list should not contain duplicate palindromes. - The order of substrings in the output does not matter. # Key Points to Address: - How to extract all substrings from a given string. - How to check if a substring is a palindrome. - How to ensure that duplicates are not included in the output list.","solution":"def detect_palindrome_substrings(s): Returns a list of all unique palindrome substrings in the given string s. palindromes = set() # Helper function to check if a string is a palindrome def is_palindrome(sub): return sub == sub[::-1] # Iterate over all possible substrings for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): palindromes.add(substring) return list(palindromes)"},{"question":"You are required to implement a Python function `is_palindrome_permutation(s)` that determines whether any permutation of a given string can form a palindrome. This function should help you understand string manipulation and hashing (using dictionaries) in Python. Here are the specific requirements for the function: - The function should ignore spaces and be case-insensitive. - You should use a dictionary to count the occurrences of each character (ignoring spaces). - A string can form a palindrome if at most one character has an odd count. Function Signature: ```python def is_palindrome_permutation(s: str) -> bool: ``` Example Usage: ```python print(is_palindrome_permutation(\\"Tact Coa\\")) # Output: True (Permutations: \\"tacocat\\", \\"atcocta\\", etc.) print(is_palindrome_permutation(\\"Hello\\")) # Output: False ```","solution":"def is_palindrome_permutation(s: str) -> bool: Determines if any permutation of the input string can form a palindrome. Args: s (str): The input string to check for palindrome permutation possibility. Returns: bool: True if any permutation of the string can form a palindrome, False otherwise. # Remove spaces and convert the string to lowercase s = s.replace(\\" \\", \\"\\").lower() # Create a dictionary to count the occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with odd occurrences odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can be permuted to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"You are tasked to implement the `path_finder(grid)` function which aims to find and return all possible unique paths from the top-left corner to the bottom-right corner of a given m x n grid. The solution should utilize specific Python libraries and functions to achieve efficient recursive backtracking. # Function Signature: ```python def path_finder(grid): ``` # Input: 1. `grid` (list of lists of ints): A 2D array where each element can be either `0` (an empty cell) or `1` (a blocked cell). You cannot traverse through cells marked as `1`. # Output: - A list of lists, where each inner list represents a unique path. Each path should be a list of tuples, where each tuple represents the coordinates (row, col) of a cell in the path from the top-left to the bottom-right. # Requirements: 1. Use recursion and backtracking to explore all possible paths. 2. The path should only include passing through cells marked as `0`. 3. You can move only rightward or downward at each step. 4. Use `deepcopy` to create new path instances when needed. # Example: Given: ```python grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` A possible output could be: ```python [ [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)], [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)], [(0, 0), (0, 1), (1, 1), (1, 2), (2, 2)], [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)], ] ``` # Notes: - Make sure that the function handles edge cases such as no possible paths or the grid being entirely blocked effectively. - Consider space complexity when designing the backtracking algorithm to ensure it does not create excessive overhead for large grids. - Assume a helper method `is_safe(grid, row, col)` is pre-defined and can be used to check if a cell (row, col) is within grid bounds and not blocked.","solution":"from copy import deepcopy def path_finder(grid): def is_safe(grid, row, col): return 0 <= row < len(grid) and 0 <= col < len(grid[0]) and grid[row][col] == 0 def find_paths(grid, row, col, path, all_paths): if not is_safe(grid, row, col): return path.append((row, col)) if row == len(grid) - 1 and col == len(grid[0]) - 1: all_paths.append(deepcopy(path)) else: grid[row][col] = -1 # Mark as visited # Move right if is_safe(grid, row, col + 1): find_paths(grid, row, col + 1, path, all_paths) # Move down if is_safe(grid, row + 1, col): find_paths(grid, row + 1, col, path, all_paths) grid[row][col] = 0 # Unmark as visited path.pop() if not grid or not grid[0]: return [] all_paths = [] find_paths(grid, 0, 0, [], all_paths) return all_paths"},{"question":"You are given the task of analyzing the performance of sorting algorithms on different datasets. The datasets will be stored in text files, where: - Each file contains a series of integers, one integer per line. - The filenames follow the structure: `dataset_size_n.txt`, for example, `dataset_size_100.txt`, indicating the number of integers (`n`) in the dataset. Your goal is to create a single function, `compare_sorting_algorithms()`, that reads these files, sorts the integers using three different sorting algorithms (e.g., quicksort, mergesort, and bubblesort), and measures the time taken by each algorithm. The function should then visualize the time complexities of the algorithms on these datasets using matplotlib. To achieve this, you will need to complete the following tasks in your function: 1. Load data from the files. 2. Sort the integers using quicksort, mergesort, and bubblesort. 3. Measure the time taken for each sorting algorithm. 4. Plot the time complexities of the sorting algorithms against the dataset sizes. 5. Display the plot. Use the Python library `time` for measuring the execution time of the sorting algorithms and `matplotlib.pyplot` for plotting the results. # Function Signature ```python def compare_sorting_algorithms(): ... ``` # Input None. The function will use hardcoded filenames and sizes. # Output - No return value, but the function will create and display a plot comparing the time complexities of the three sorting algorithms on the different datasets. # Example Usage After running your function, it should create and display a plot showcasing the time complexities for different sorting algorithms on datasets of various sizes. # Notes - Ensure to include a legend in the plot to differentiate the sorting algorithms. - Use matplotlib\'s `show()` function to display the plot at the end. - Use the `time` module to measure the execution time of each sorting algorithm.","solution":"import time import matplotlib.pyplot as plt import os def load_data(filename): with open(filename, \'r\') as file: data = [int(line.strip()) for line in file] return data def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def mergesort(arr): if len(arr) <= 1: return arr middle = len(arr) // 2 left = mergesort(arr[:middle]) right = mergesort(arr[middle:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result def bubblesort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def compare_sorting_algorithms(): dataset_sizes = [100, 500, 1000] files = [f\'dataset_size_{size}.txt\' for size in dataset_sizes] time_results = {\'quicksort\': [], \'mergesort\': [], \'bubblesort\': []} for file in files: data = load_data(file) for sort_func in [quicksort, mergesort, bubblesort]: start = time.time() sort_func(data.copy()) end = time.time() time_results[sort_func.__name__].append(end - start) for sort_func in time_results: plt.plot(dataset_sizes, time_results[sort_func], label=sort_func) plt.xlabel(\'Dataset Size\') plt.ylabel(\'Time (seconds)\') plt.title(\'Sorting Algorithm Time Complexity Comparison\') plt.legend() plt.show()"},{"question":"Design a function to train an SVM (Support Vector Machine) classifier using Scikit-learn. The function should accept training data and labels, train an SVM model, and return the trained model. 1. The function should accept: - `X_train`: a 2D numpy array where each row represents a sample and each column represents a feature. - `y_train`: a 1D numpy array representing the class labels for the samples in `X_train`. - `kernel`: a string specifying the kernel type to be used in the algorithm (‘linear’, ‘poly’, ‘rbf’, or ‘sigmoid’). Default should be \'linear\'. - `C`: a float specifying the regularization parameter. Default should be 1.0. 2. The SVM classifier should be implemented using Scikit-learn\'s `SVC` class. 3. The function must train the SVM model on the provided data and return the fitted model. Function Signature: ```python def train_svm_classifier(X_train: np.ndarray, y_train: np.ndarray, kernel: str = \'linear\', C: float = 1.0) -> SVC: ``` Constraints: 1. You must use the `SVC` class from `sklearn.svm` to implement the SVM classifier. 2. The function should handle basic error checking to ensure that `X_train` is a 2D array and `y_train` is a 1D array, and raise appropriate exceptions if this is not the case. 3. The default value for `kernel` should be \'linear\' and for `C` should be 1.0. # Example Usage: Assuming you have Scikit-learn installed, you can train an SVM model with: ```python import numpy as np from sklearn.svm import SVC # Sample data X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]]) y_train = np.array([0, 1, 0, 1]) # Train the model model = train_svm_classifier(X_train, y_train, kernel=\'rbf\', C=1.0) ``` In this example, `model` will be a trained SVM classifier using the RBF kernel and a regularization parameter `C` of 1.0.","solution":"import numpy as np from sklearn.svm import SVC def train_svm_classifier(X_train: np.ndarray, y_train: np.ndarray, kernel: str = \'linear\', C: float = 1.0) -> SVC: Trains an SVM classifier using the provided training data and labels. Parameters: - X_train: 2D numpy array with shape (n_samples, n_features) - y_train: 1D numpy array with shape (n_samples,) - kernel: string specifying the kernel type (\'linear\', \'poly\', \'rbf\', \'sigmoid\'). Default is \'linear\'. - C: float specifying the regularization parameter. Default is 1.0. Returns: - SVC: A trained SVC model. if not isinstance(X_train, np.ndarray) or not isinstance(y_train, np.ndarray): raise ValueError(\\"X_train and y_train must be numpy arrays\\") if len(X_train.shape) != 2: raise ValueError(\\"X_train must be a 2D numpy array with shape (n_samples, n_features)\\") if len(y_train.shape) != 1: raise ValueError(\\"y_train must be a 1D numpy array with shape (n_samples,)\\") # Initialize the SVM classifier with given kernel and C clf = SVC(kernel=kernel, C=C) # Train the model clf.fit(X_train, y_train) return clf"},{"question":"You are asked to write a function that reads a list of strings representing dates in various inconsistent formats and normalizes them into the ISO 8601 format (`YYYY-MM-DD`). Your function should identify the different date formats and convert them accordingly. The challenge is to handle a variety of common date formats. Your function should be named `normalize_dates` and will not use any specific date parsing libraries but rather rely on regular expressions for identifying the date parts. # Input - **dates**: A list of strings where each string is a date in one of several possible formats. # Output - A list of strings where each string is the date in the `YYYY-MM-DD` format. # Example: Given the list of dates: ```python dates = [ \\"March 5, 2021\\", \\"04/22/2019\\", \\"2020-06-15\\", \\"15th August, 2021\\", \\"07.19.1995\\", \\"1994.02.28\\" ] ``` Then calling `normalize_dates(dates)` should return: ```python [\'2021-03-05\', \'2019-04-22\', \'2020-06-15\', \'2021-08-15\', \'1995-07-19\', \'1994-02-28\'] ``` # Requirements: 1. Recognize and convert dates from common formats such as `\\"Month DD, YYYY\\"`, `\\"MM/DD/YYYY\\"`, `\\"YYYY-MM-DD\\"`, `\\"DDth Month, YYYY\\"`, `\\"MM.DD.YYYY\\"`, and `\\"YYYY.MM.DD\\"`. 2. Handle both full month names and abbreviations if they appear (e.g., \\"Jan\\", \\"January\\"). 3. Return the dates in a consistent `YYYY-MM-DD` format. 4. Assume all years are four digits and all months and days are valid (no need to handle invalid dates). The function assumes the input list contains dates in universally recognized formats, so there is no need to validate the correct meaning of the dates. # Constraints: - The function should not use any date parsing libraries like `dateutil` or `pandas`. - The function should handle mixed formats within the same list. - Ensure your solution uses regular expressions to identify parts of the dates and reformats them correctly.","solution":"import re def normalize_dates(dates): month_dict = { \\"January\\": \\"01\\", \\"Jan\\": \\"01\\", \\"February\\": \\"02\\", \\"Feb\\": \\"02\\", \\"March\\": \\"03\\", \\"Mar\\": \\"03\\", \\"April\\": \\"04\\", \\"Apr\\": \\"04\\", \\"May\\": \\"05\\", \\"June\\": \\"06\\", \\"Jun\\": \\"06\\", \\"July\\": \\"07\\", \\"Jul\\": \\"07\\", \\"August\\": \\"08\\", \\"Aug\\": \\"08\\", \\"September\\": \\"09\\", \\"Sep\\": \\"09\\", \\"October\\": \\"10\\", \\"Oct\\": \\"10\\", \\"November\\": \\"11\\", \\"Nov\\": \\"11\\", \\"December\\": \\"12\\", \\"Dec\\": \\"12\\" } normalized_dates = [] for date in dates: if match := re.match(r\'(w+)s+(d{1,2}),s+(d{4})\', date): month, day, year = match.groups() month = month_dict[month] normalized_date = f\\"{year}-{month}-{int(day):02}\\" elif match := re.match(r\'(d{2})/(d{2})/(d{4})\', date): month, day, year = match.groups() normalized_date = f\\"{year}-{month}-{day}\\" elif match := re.match(r\'(d{4})-(d{2})-(d{2})\', date): normalized_date = date # Already in correct format elif match := re.match(r\'(d{1,2})[a-z]{2}s+(w+),s+(d{4})\', date): day, month, year = match.groups() month = month_dict[month] normalized_date = f\\"{year}-{month}-{int(day):02}\\" elif match := re.match(r\'(d{2}).(d{2}).(d{4})\', date): month, day, year = match.groups() normalized_date = f\\"{year}-{month}-{day}\\" elif match := re.match(r\'(d{4}).(d{2}).(d{2})\', date): year, month, day = match.groups() normalized_date = f\\"{year}-{month}-{day}\\" else: raise ValueError(f\\"Unrecognized date format: {date}\\") normalized_dates.append(normalized_date) return normalized_dates"},{"question":"You are tasked with implementing a function to find the longest substring without repeating characters in a given string. The goal of this task is to understand how to use efficient methods, such as sliding windows or hash maps, to solve this type of problem, which is common in algorithm interviews. # Function Requirements: Implement the function `longest_substring_without_repeating(s)`. - **Parameters**: - `s`: A string `s` containing the sequence of characters. - **Returns**: - An integer representing the length of the longest substring without repeating characters. # Task Details: 1. You must iterate over the given string and keep track of the characters and their positions using a data structure like a hash map. 2. Use two pointers to define the start and end of the current window of examination. 3. As you iterate over the string, adjust the pointers to ensure the window contains only unique characters. 4. Update your maximum length as you find longer valid substrings. # Additional Notes: - Optimize your solution to run in linear time, O(n), where n is the length of the string. - Ensure your implementation handles edge cases such as an empty string or a string with all identical characters. This exercise is designed to improve your problem-solving abilities with strings and develop efficient algorithms using data structures and sliding window techniques. ```python def longest_substring_without_repeating(s): char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length ``` Complete the implementation of the function by walking through each character in the string and adjusting the pointers to find the longest substring without repeating characters.","solution":"def longest_substring_without_repeating(s): Returns the length of the longest substring without repeating characters. :param s: A string containing the sequence of characters. :return: An integer representing the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. In this problem, you will write a Python function to compute the nth Fibonacci number using a bottom-up dynamic programming approach. This helps in calculating large Fibonacci numbers efficiently without using recursion. Function Signature ```python def fibonacci(n: int) -> int: pass ``` Input - `n`: a non-negative integer indicating the position in the Fibonacci sequence (0-based index). Output - The Fibonacci number at the nth position. Example ```python print(fibonacci(0)) # Output: 0 print(fibonacci(1)) # Output: 1 print(fibonacci(10)) # Output: 55 print(fibonacci(20)) # Output: 6765 ``` # Requirements - Implement the function using a bottom-up dynamic programming approach, filling an array or using two variables to avoid extra space. - Ensure the function has a time complexity of O(n) and space complexity of O(1). # Additional Information - The Fibonacci sequence is mathematically defined as: [ F(0) = 0, quad F(1) = 1, ] [ F(n) = F(n-1) + F(n-2) quad text{for} quad n geq 2 ] # Constraints - 0 ≤ `n` ≤ 50 Implement the function `fibonacci` to solve these requirements.","solution":"def fibonacci(n: int) -> int: Computes the nth Fibonacci number using a bottom-up dynamic programming approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for i in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are tasked with creating a Python function that reads a file containing employee records and processes the data to return various metrics. Each record contains an employee\'s name, age, department, and salary, all separated by a comma. Your function should be able to: 1. **Parse Data**: Read and parse the data from a file where each line represents an employee\'s record. 2. **Calculate Average Age**: Calculate and return the average age of all employees. 3. **Department-wise Employee Count**: Count and return the number of employees in each department. 4. **Top Earners in Each Department**: Identify and return the employee with the highest salary in each department. Consider the file format as follows: ``` John Doe,30,Engineering,70000 Jane Smith,25,Marketing,55000 Albert Brown,31,Engineering,80000 Lucy Black,29,Sales,60000 ``` You should implement the following function: ```python def process_employee_data(file_path): # Implementation here ``` # Constraints: - You can assume the file is well-formatted (i.e., no missing fields). - All ages are integers, and salaries are float numbers. # Example Usage: ```python file_path = \'employees.txt\' print(process_employee_data(file_path)) ``` **Example Output**: ```python { \'average_age\': 28.75, \'department_counts\': { \'Engineering\': 2, \'Marketing\': 1, \'Sales\': 1 }, \'top_earners\': { \'Engineering\': \'Albert Brown\', \'Marketing\': \'Jane Smith\', \'Sales\': \'Lucy Black\' } } ``` # Explanation: - The average age of employees is calculated as `(30 + 25 + 31 + 29) / 4 = 28.75`. - The department counts indicate there are 2 employees in Engineering, 1 in Marketing, and 1 in Sales. - The top earners are identified based on the highest salary within each department.","solution":"def process_employee_data(file_path): Processes employee data to return various metrics. Args: file_path (str): The path to the file containing employee data. Returns: dict: A dictionary containing the average age, department counts, and top earners in each department. import csv employees = [] with open(file_path, \'r\') as file: reader = csv.reader(file) for row in reader: name, age, department, salary = row employees.append({ \'name\': name, \'age\': int(age), \'department\': department, \'salary\': float(salary) }) total_age = sum(employee[\'age\'] for employee in employees) average_age = total_age / len(employees) if employees else 0 department_counts = {} for employee in employees: department = employee[\'department\'] if department not in department_counts: department_counts[department] = 0 department_counts[department] += 1 top_earners = {} for employee in employees: department = employee[\'department\'] if department not in top_earners or employee[\'salary\'] > top_earners[department][1]: top_earners[department] = (employee[\'name\'], employee[\'salary\']) top_earners = {department: name for department, (name, _) in top_earners.items()} return { \'average_age\': average_age, \'department_counts\': department_counts, \'top_earners\': top_earners }"},{"question":"You are required to implement a function named `palindrome_permutation_check` in Python which checks if any permutation of the input string can form a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. # Function Signature ```python def palindrome_permutation_check(s): Parameters ---------- s : str Input string which may contain spaces, punctuation, and mixed case letters Returns ------- bool Returns True if any permutation of the input string can form a palindrome else returns False ``` # Inputs: - `s`: A string consisting of alphanumeric characters, spaces, and punctuation symbols. # Output: - Returns a boolean value, `True` or `False`. # Example: ```python # Example Input s = \\"Tact Coa\\" # Expected Output # True (Permutation: \\"taco cat\\", \\"atco cta\\", etc.) # Example Input s = \\"Hello\\" # Expected Output # False ``` # Constraints: - The function should be case insensitive, i.e., \'A\' and \'a\' should be considered the same character. - Spaces and punctuation should be ignored when determining if a permutation can form a palindrome. - Assume the input string is not empty and contains at least one alphanumeric character. Your implementation should ignore spaces and punctuation, normalize the case, and check for the possibility to rearrange the characters to form a palindrome efficiently.","solution":"import re from collections import Counter def palindrome_permutation_check(s): Checks if any permutation of the input string can form a palindrome. Parameters ---------- s : str Input string which may contain spaces, punctuation, and mixed case letters Returns ------- bool Returns True if any permutation of the input string can form a palindrome else returns False # Normalize the string by removing non-alphanumeric characters and converting to lowercase normalized_str = re.sub(r\'[^a-z0-9]\', \'\', s.lower()) # Count the frequency of each character char_count = Counter(normalized_str) # Check how many characters have odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be a permutation of a palindrome: # There can be at most one character with an odd count (for odd length palindromes) # For even length palindromes, all characters must have even counts return odd_count <= 1"},{"question":"You are tasked with implementing a simulation of a simple traffic light system at an intersection. The intersection has a north-south road and an east-west road, with traffic lights that can be red, yellow, or green. The traffic light system operates as follows: 1. The north-south light is green for a certain period, while the east-west light is red. 2. The north-south light then turns yellow for a brief period. 3. The north-south light becomes red, and the east-west light turns green. 4. The east-west light turns yellow after a certain period. 5. The east-west light then becomes red, and the cycle repeats. Your task is to create a function that simulates the traffic light system\'s behavior over time and prints the state of each traffic light at each time unit. The function name should be `simulate_traffic_lights`. It takes in four arguments: - `ns_green_duration`: An integer representing the duration (in time units) the north-south light stays green. - `ns_yellow_duration`: An integer representing the duration (in time units) the north-south light stays yellow. - `ew_green_duration`: An integer representing the duration (in time units) the east-west light stays green. - `ew_yellow_duration`: An integer representing the duration (in time units) the east-west light stays yellow. The function should print the status of the traffic lights at each time unit in the format: \\"Time X: NS = `<state>`, EW = `<state>`\\" For simulation purposes, assume a total cycle of 3 complete cycles of the traffic light system. Here is a template to get you started: ```python def simulate_traffic_lights(ns_green_duration, ns_yellow_duration, ew_green_duration, ew_yellow_duration): total_cycle_duration = ns_green_duration + ns_yellow_duration + ew_green_duration + ew_yellow_duration total_simulation_duration = total_cycle_duration * 3 for time in range(total_simulation_duration): period = time % total_cycle_duration if period < ns_green_duration: ns_state = \\"Green\\" ew_state = \\"Red\\" elif period < ns_green_duration + ns_yellow_duration: ns_state = \\"Yellow\\" ew_state = \\"Red\\" elif period < ns_green_duration + ns_yellow_duration + ew_green_duration: ns_state = \\"Red\\" ew_state = \\"Green\\" else: ns_state = \\"Red\\" ew_state = \\"Yellow\\" print(f\\"Time {time}: NS = {ns_state}, EW = {ew_state}\\") # Example usage: # simulate_traffic_lights(5, 2, 4, 2) ``` Implement the function to ensure it adheres to the specified behavior.","solution":"def simulate_traffic_lights(ns_green_duration, ns_yellow_duration, ew_green_duration, ew_yellow_duration): total_cycle_duration = ns_green_duration + ns_yellow_duration + ew_green_duration + ew_yellow_duration total_simulation_duration = total_cycle_duration * 3 for time in range(total_simulation_duration): period = time % total_cycle_duration if period < ns_green_duration: ns_state = \\"Green\\" ew_state = \\"Red\\" elif period < ns_green_duration + ns_yellow_duration: ns_state = \\"Yellow\\" ew_state = \\"Red\\" elif period < ns_green_duration + ns_yellow_duration + ew_green_duration: ns_state = \\"Red\\" ew_state = \\"Green\\" else: ns_state = \\"Red\\" ew_state = \\"Yellow\\" print(f\\"Time {time}: NS = {ns_state}, EW = {ew_state}\\")"},{"question":"You need to write a function named `transpose_nested_list` that takes in a nested list and returns its transposed version. The function should handle any possible non-uniform lengths within the inner lists by padding the shorter lists with `None`. # Inputs 1. **nested_list** (`List[List[Any]]`): A nested list where each inner list can have different lengths. # Outputs The function should return: 1. **transposed_list** (`List[List[Any]]`): The transposed version of the input nested list, with `None` used for padding. # Requirements - Use only standard Python libraries. - If some of the inner lists have fewer elements than others, pad them with `None` so that the transposed lists have equal lengths. # Example Usage ```python # Sample Nested List data = [ [1, 2, 3], [4, 5], [6, 7, 8, 9] ] transposed_data = transpose_nested_list(data) print(\\"Transposed Data:\\", transposed_data) ``` # Expected Output ```python [ [1, 4, 6], [2, 5, 7], [3, None, 8], [None, None, 9] ] ```","solution":"from typing import List, Any def transpose_nested_list(nested_list: List[List[Any]]) -> List[List[Any]]: Transposes a nested list, padding shorter lists with None. Args: nested_list (List[List[Any]]): The nested list to transpose. Returns: List[List[Any]]: The transposed nested list. if not nested_list: return [] # Calculate the maximum length of any inner list max_len = max(len(inner_list) for inner_list in nested_list) # Transpose the list with padding transposed_list = [ [nested_list[row][col] if col < len(nested_list[row]) else None for row in range(len(nested_list))] for col in range(max_len) ] return transposed_list"},{"question":"You are required to implement a function called `string_analyzer()` that performs various analyses on a given input string. 1. **Function Signature**: `def string_analyzer(input_string: str) -> dict:` 2. **Analysis Criteria**: - The function should analyze the input string and return a dictionary with the following keys and their corresponding values: - **length**: The length of the input string. - **num_vowels**: The number of vowels (a, e, i, o, u) in the input string, regardless of their case. - **num_consonants**: The number of consonants in the input string, regardless of their case. Spaces and special characters are not considered consonants. - **num_digits**: The number of digits in the input string. - **most_common_char**: The most common character in the input string. In case of a tie, return the character which appears first in alphabetical order. 3. **Example**: ```python input_string = \\"Hello World! 123\\" result = string_analyzer(input_string) # Output: result = { \\"length\\": 16, \\"num_vowels\\": 3, \\"num_consonants\\": 7, \\"num_digits\\": 3, \\"most_common_char\\": \\"1\\" } ``` This implementation will help you practice string manipulation, utilization of dictionaries for organizing results, and applying basic logic to count and identify characters within a string.","solution":"def string_analyzer(input_string: str) -> dict: vowels = set(\\"aeiouAEIOU\\") consonants = set(\\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\\") length = len(input_string) num_vowels = sum(1 for char in input_string if char in vowels) num_consonants = sum(1 for char in input_string if char in consonants) num_digits = sum(1 for char in input_string if char.isdigit()) char_count = {} for char in input_string: if char.isalnum(): # Consider only alphanumeric characters for the most common character char_count[char] = char_count.get(char, 0) + 1 if char_count: most_common_char = min(sorted(char_count.items(), key=lambda item: (-item[1], item[0])))[0] else: most_common_char = None return { \\"length\\": length, \\"num_vowels\\": num_vowels, \\"num_consonants\\": num_consonants, \\"num_digits\\": num_digits, \\"most_common_char\\": most_common_char }"},{"question":"Your task is to create a function, `generate_histogram`, which creates a histogram plot of a given dataset using the `matplotlib` and `numpy` libraries. The function should be capable of displaying the distribution of values within the dataset. The function signature should be as follows: ```python def generate_histogram(data, bins=10, title=\'Histogram\', xlabel=\'Value\', ylabel=\'Frequency\', density=False, color=\'blue\'): # Your code here ``` Given the inputs: - `data`: a 1-D numpy array or list representing the dataset. - `bins`: an integer representing the number of bins to use for the histogram (default is 10). - `title`: a string representing the title of the histogram (default is \'Histogram\'). - `xlabel`: a string representing the label for the x-axis (default is \'Value\'). - `ylabel`: a string representing the label for the y-axis (default is \'Frequency\'). - `density`: a boolean flag indicating whether to normalize the histogram (default is False). - `color`: a string representing the color of the histogram bars (default is \'blue\'). Your function should: 1. Validate that `data` is a 1-D array or list. 2. Set up the histogram using the provided number of bins, and apply normalization if `density` is set to `True`. 3. Utilize `matplotlib.pyplot` functions to: - Set the title, xlabel, and ylabel. - Plot the histogram using the specified color. 4. Display the histogram using `matplotlib.pyplot.show()`. 5. Return the plot object. Ensure your function is well-documented and follows best practices for clarity and readability.","solution":"import numpy as np import matplotlib.pyplot as plt def generate_histogram(data, bins=10, title=\'Histogram\', xlabel=\'Value\', ylabel=\'Frequency\', density=False, color=\'blue\'): Generates a histogram plot for the given dataset using matplotlib. Parameters: - data: 1-D numpy array or list representing the dataset. - bins: Integer representing the number of bins for the histogram (default 10). - title: String representing the title of the histogram (default \'Histogram\'). - xlabel: String representing the label for the x-axis (default \'Value\'). - ylabel: String representing the label for the y-axis (default \'Frequency\'). - density: Boolean flag indicating whether to normalize the histogram (default False). - color: String representing the color of the histogram bars (default \'blue\'). Returns: - matplotlib.axes._subplots.AxesSubplot: The subplot object for the histogram. if not isinstance(data, (list, np.ndarray)): raise ValueError(\\"Data should be a 1-D array or list.\\") if not isinstance(bins, int): raise ValueError(\\"Bins should be an integer.\\") data = np.asarray(data).ravel() # Ensure data is a 1-D array fig, ax = plt.subplots() ax.hist(data, bins=bins, density=density, color=color) ax.set_title(title) ax.set_xlabel(xlabel) ax.set_ylabel(ylabel) plt.show() return ax"},{"question":"Implement a function `longest_word_in_sentence(sentence)` that finds the longest word in a given sentence. The function should handle punctuation and whitespace correctly and consider capitalized and lower-case versions of the same word as equal. If two or more words have the same length, return the first one that appears. # Instructions: 1. Use the `re` module to remove punctuation and split the sentence into words. 2. Consider words as strings of alphabetical characters separated by whitespace. 3. Return the first occurrence of the longest word found, considering capitalization as equal. # Example Input: 1. `sentence` - A single string containing a sentence, e.g., `\\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin.\\"` # Example Output: 1. Output: `\\"troubled\\"` # Constraints: - Assume the input sentence is a non-empty string. - Handle sentences with mixed punctuation and spacing. - Maintain the order of words as they appear in the original sentence. # Hints: - Use the `re.sub` method to strip the sentence of punctuation. - Split the resulting clean sentence on whitespace characters to get a list of words. - Iterate through the words to find the longest one. # Function Signature: ```python import re def longest_word_in_sentence(sentence: str) -> str: ```","solution":"import re def longest_word_in_sentence(sentence: str) -> str: # Remove punctuation cleaned = re.sub(r\'[^ws]\', \'\', sentence) # Split the sentence into words words = cleaned.split() # Initialize variables to store the longest word and its length longest_word = \\"\\" max_length = 0 # Iterate through the words to find the longest one for word in words: if len(word) > max_length: longest_word = word max_length = len(word) return longest_word"},{"question":"--- **Context:** Graph traversal is a fundamental concept in computer science, commonly used in applications such as network analysis, pathfinding, and recommendation systems. One of the strategies for systematically exploring the nodes and edges of a graph is the Depth First Search (DFS) algorithm. This problem involves implementing the DFS algorithm to traverse a given graph represented as an adjacency list. **Task:** Write a function `depth_first_search(graph, start_node)` that takes a graph represented by an adjacency list and a start node as input, and returns a list of nodes visited in DFS order starting from the given node. **Function Signature:** ```python def depth_first_search(graph: dict, start_node: int) -> list: ``` **Example:** ```python # Example Input graph = { 1: [2, 3], 2: [4], 3: [5], 4: [], 5: [] } start_node = 1 # Expected Output output = depth_first_search(graph, start_node) print(output) # Output: # [1, 2, 4, 3, 5] ``` **Constraints:** 1. The graph is represented as a dictionary where keys are node identifiers and values are lists of adjacently connected nodes. 2. The start_node will always be a key in the graph. 3. Node identifiers are positive integers. 4. The maximum number of nodes in the graph is 10^3.","solution":"def depth_first_search(graph, start_node): Perform a Depth First Search (DFS) on a graph starting from the specified node. :param graph: A dictionary representing the graph adjacency list. :param start_node: The starting node for the DFS. :return: A list of nodes in the order they were visited during the DFS. visited = [] stack = [start_node] while stack: node = stack.pop() if node not in visited: visited.append(node) stack.extend(reversed(graph[node])) # Add adjacent nodes in reverse order to visit in correct order return visited"},{"question":"You are tasked with developing a Python function that simulates a simple traffic light system at an intersection. The function should determine which lights are red and which are green based on the current time step. # Specifications: 1. **Function name**: `traffic_light_simulation` 2. **Inputs**: - `current_time` (int): The current time in seconds. - `cycle_length` (int): The total length of the traffic light cycle in seconds. - `green_duration` (int): The duration of the green light in seconds for each direction. 3. **Output**: - The function should return a tuple of strings indicating the light color for the directions \\"North-South\\" and \\"East-West\\". # Requirements: - The cycle should follow a pattern where the North-South direction has a green light for `green_duration` seconds, followed by a red light for `cycle_length - green_duration` seconds. The East-West direction should have the opposite light (green when North-South is red and vice versa). - Ensure the function predicts the correct light color based on the current time. # Example Usage: ```python current_time = 75 cycle_length = 120 green_duration = 60 result = traffic_light_simulation(current_time, cycle_length, green_duration) print(result) # Output: (\'Red\', \'Green\') ```","solution":"def traffic_light_simulation(current_time, cycle_length, green_duration): Simulates a simple traffic light system at an intersection. Determines the light color for North-South and East-West directions based on the current time step. Parameters: - current_time (int): The current time in seconds. - cycle_length (int): The total length of the traffic light cycle in seconds. - green_duration (int): The duration of the green light in seconds for each direction. Returns: - tuple: A tuple of strings indicating the light color for the directions \\"North-South\\" and \\"East-West\\". time_in_cycle = current_time % cycle_length if time_in_cycle < green_duration: north_south_light = \\"Green\\" east_west_light = \\"Red\\" else: north_south_light = \\"Red\\" east_west_light = \\"Green\\" return (north_south_light, east_west_light)"},{"question":"Create a function that checks if all elements in a given list are unique. The function should return a boolean value: True if all elements are unique, and False otherwise. This task helps in understanding data structures and basic operations on lists. The function should output: bool: True if all elements are unique, False otherwise. You should write self-contained code starting with: ``` def task_func(input_list: list): ```","solution":"def task_func(input_list: list): Checks if all elements in the input_list are unique. Parameters: input_list (list): The list to check for uniqueness. Returns: bool: True if all elements are unique, False otherwise. return len(input_list) == len(set(input_list))"},{"question":"You are required to write a function `sum_nested_integers` that takes a nested list of integers (which can contain other nested lists) and returns the sum of all integers contained in the list, regardless of their nesting level. For example, given the nested list `[[1, 2, [3]], 4, [5, [6, [7]]]]`, the function should return `28` since `1 + 2 + 3 + 4 + 5 + 6 + 7 = 28`. Your function should be able to handle varying levels of nesting efficiently and should use recursion to solve the problem. Example Output: ``` sum_nested_integers([[1, 2, [3]], 4, [5, [6, [7]]]]) Output: 28 sum_nested_integers([1, [2, [3, 4]], 5]) Output: 15 ```","solution":"def sum_nested_integers(nested_list): Recursively sums all integers in a nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_integers(element) else: total += element return total"},{"question":"You need to create a function `group_and_transform` that takes a Pandas DataFrame `df`, a list of string `group_cols`, and a dictionary `agg_dict` as input. The DataFrame `df` represents a dataset with multiple columns, and you need to group the data by the columns specified in `group_cols`, and then apply aggregation functions specified in `agg_dict` to the grouped data. Your task is to: 1. **Group the data**: Use the columns specified in `group_cols` to group the DataFrame `df`. 2. **Apply aggregation functions**: Use the `agg_dict` to apply the specified aggregation functions to the grouped data. The keys in `agg_dict` are column names from `df`, and the values are the aggregation functions to be applied (as strings). **Function Signature:** ```python def group_and_transform(df: pd.DataFrame, group_cols: List[str], agg_dict: Dict[str, str]) -> pd.DataFrame: pass ``` **Parameters:** - `df`: Pandas DataFrame with shape `(n_samples, n_features)`. - `group_cols`: List of strings representing the column names to group by. - `agg_dict`: Dictionary where keys are column names from `df` and values are the aggregation functions (as strings) to apply to these columns. **Returns:** - A Pandas DataFrame containing the grouped and aggregated data. **Example Usage:** ```python import pandas as pd data = { \'A\': [\'foo\', \'foo\', \'foo\', \'bar\', \'bar\', \'bar\'], \'B\': [\'one\', \'one\', \'two\', \'two\', \'two\', \'one\'], \'C\': [1, 2, 3, 4, 5, 6], \'D\': [7, 8, 9, 10, 11, 12] } df = pd.DataFrame(data) group_cols = [\'A\', \'B\'] agg_dict = {\'C\': \'sum\', \'D\': \'mean\'} result = group_and_transform(df, group_cols, agg_dict) ``` **Expected Output:** ```python C D A B bar one 6.0 12.000000 two 9.0 10.500000 foo one 3.0 7.500000 two 3.0 9.000000 ```","solution":"import pandas as pd from typing import List, Dict def group_and_transform(df: pd.DataFrame, group_cols: List[str], agg_dict: Dict[str, str]) -> pd.DataFrame: Groups the DataFrame by the specified columns and applies the aggregation functions. Parameters: df (pd.DataFrame): The input DataFrame. group_cols (List[str]): List of column names to group by. agg_dict (Dict[str, str]): Dictionary where keys are column names and values are aggregation functions. Returns: pd.DataFrame: The grouped and aggregated DataFrame. grouped_df = df.groupby(group_cols).agg(agg_dict) return grouped_df"},{"question":"You are required to write a function named `sum_even_in_range` that calculates the sum of all even numbers within a given range (inclusive of both boundaries). Utilize basic looping constructs and conditional statements to accomplish this task. The function should be defined as follows: ```python def sum_even_in_range(start, end): # Your code here ``` **Parameters**: - `start` (int): The starting integer of the range. - `end` (int): The ending integer of the range. **Returns**: - An integer representing the sum of all even numbers within the specified range. To clarify, the function should: - Iterate through the numbers from `start` to `end` (inclusive). - Check whether each number is even. - Sum up all the even numbers found within this range and return the result. Here is an example usage that describes how it should function: **Example Usage**: ```python result = sum_even_in_range(1, 10) print(result) # Output should be 30, which is the sum of 2, 4, 6, 8, 10 ``` **Hints**: - Utilize the modulus operator `%` to determine if a number is even. - An even number is defined as an integer that is divisible by 2 with no remainder.","solution":"def sum_even_in_range(start, end): Returns the sum of all even numbers within a given range (inclusive of both boundaries). even_sum = 0 for num in range(start, end + 1): if num % 2 == 0: even_sum += num return even_sum"},{"question":"You are required to create a function `findLongestSubsequence` that takes a list of integers and returns the longest subsequence of numbers which are in strictly increasing order. If there are multiple longest subsequences with the same length, return the one that appears first. # Function Signature ```python def findLongestSubsequence(arr: list) -> list: Finds the longest subsequence of strictly increasing numbers in the given list. :param arr: List of integers :return: Longest subsequence of strictly increasing numbers pass ``` # Parameters - `arr` (list): A list of integers. # Returns - A list that contains the longest subsequence of strictly increasing numbers. # Instructions 1. Iterate through the list to identify all subsequences of strictly increasing numbers. 2. Keep track of the longest subsequence found. 3. If there are multiple subsequences of the same maximum length, return the first one. 4. The function should handle lists with duplicate numbers but should only consider strictly increasing subsequences. # Example Usage ```python arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] print(findLongestSubsequence(arr)) # Output: [10, 22, 33, 50, 60, 80] arr = [3, 10, 2, 1, 20] print(findLongestSubsequence(arr)) # Output: [3, 10, 20] arr = [3, 2] print(findLongestSubsequence(arr)) # Output: [3] or [2] arr = [50, 3, 10, 7, 40, 80] print(findLongestSubsequence(arr)) # Output: [3, 7, 40, 80] ``` # Notes - The input list may contain negative numbers. - The input list may be empty, in which case the function should return an empty list. - The solution should aim for an optimal approach in terms of time complexity.","solution":"def findLongestSubsequence(arr): Finds the longest subsequence of strictly increasing numbers in the given list. :param arr: List of integers :return: Longest subsequence of strictly increasing numbers if not arr: return [] n = len(arr) # Create a list to store the longest increasing subsequence ending at each index lis = [[] for _ in range(n)] # Initialize the first element of each list with the element of the array lis[0].append(arr[0]) for i in range(1, n): for j in range(i): # Compare elements to find increasing order if arr[i] > arr[j] and len(lis[i]) < len(lis[j]): # If it forms a longer subsequence, update it lis[i] = lis[j].copy() # Add arr[i] to the subsequence ending at index i lis[i].append(arr[i]) # Find the list with the maximum length longest_subsequence = [] for sublist in lis: if len(sublist) > len(longest_subsequence): longest_subsequence = sublist return longest_subsequence"},{"question":"Implement a Python function named `find_median_sorted_arrays` that takes as input two sorted arrays of integers and returns the median of the two sorted arrays. The overall run-time complexity should be O(log (m+n)), where m and n are the lengths of the two arrays respectively. Here is the function signature: ```python def find_median_sorted_arrays(nums1: List[int], nums2: List[int]) -> float: # your code here ``` # Constraints: 1. `nums1` and `nums2` are non-empty and are sorted in non-decreasing order. 2. The total number of elements between the two arrays combined is odd. **Example Usage:** ```python nums1 = [1, 3] nums2 = [2] print(find_median_sorted_arrays(nums1, nums2)) # Output: 2.0 nums1 = [1, 2] nums2 = [3, 4] print(find_median_sorted_arrays(nums1, nums2)) # Output: 2.5 ``` # Detailed Explanation: 1. If `nums1` is the smaller array, swap it with `nums2` to ensure `nums1` is the larger array. 2. Apply binary search on the smaller array `nums1`. 3. Calculate the left and right partitions for both arrays and compare their elements to find the median. 4. If the partition is correct, return the median based on the calculated partitions. 5. Adjust the binary search range based on the comparison of partition values. **Note:** - The length of the combined arrays will always be positive and odd. - The function should handle the input arrays efficiently and return the accurate median value.","solution":"from typing import List def find_median_sorted_arrays(nums1: List[int], nums2: List[int]) -> float: if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 m, n = len(nums1), len(nums2) imin, imax = 0, m while imin <= imax: i = (imin + imax) // 2 j = (m + n + 1) // 2 - i if i < m and nums1[i] < nums2[j - 1]: imin = i + 1 elif i > 0 and nums1[i - 1] > nums2[j]: imax = i - 1 else: if i == 0: max_of_left = nums2[j - 1] elif j == 0: max_of_left = nums1[i - 1] else: max_of_left = max(nums1[i - 1], nums2[j - 1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = nums2[j] elif j == n: min_of_right = nums1[i] else: min_of_right = min(nums1[i], nums2[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"# Introduction In this problem, you are going to simulate the movements of a robot on a 2D grid. The robot follows a series of commands to move either up, down, left, or right. # Problem Statement You need to write a function named `final_position` that takes an initial position tuple and a list of moves as arguments. The function will compute the final position of the robot after executing all the given moves. Each move is represented by a single character: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. The grid\'s initial position is given at coordinates `(0, 0)`. # Inputs - A tuple `initial_position` representing the starting coordinates (x, y) of the robot. - A list of characters `moves` representing the move sequence. # Outputs - A tuple representing the final coordinates (x, y) of the robot after all moves have been executed. # Specific Requirements 1. **The robot starts from the `initial_position` and moves according to the `moves` list.** 2. **Each move shifts the robot by 1 unit in the respective direction on the 2D grid.** # Function Signature ```python def final_position(initial_position: tuple, moves: list) -> tuple: # Your code here ``` # Example ```python initial_position = (0, 0) moves = [\'U\', \'D\', \'L\', \'R\', \'U\', \'U\', \'L\'] print(final_position(initial_position, moves)) # Output: (-1, 2) ``` In this example, the robot moves from (0, 0) as follows: - \'U\' -> (0, 1) - \'D\' -> (0, 0) - \'L\' -> (-1, 0) - \'R\' -> (0, 0) - \'U\' -> (0, 1) - \'U\' -> (0, 2) - \'L\' -> (-1, 2)","solution":"def final_position(initial_position: tuple, moves: list) -> tuple: Compute the final position of the robot after executing the moves. :param initial_position: A tuple (x, y) representing the initial coordinates. :param moves: A list of characters representing moves: \'U\', \'D\', \'L\', and \'R\'. :return: A tuple representing the final coordinates (x, y). x, y = initial_position for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return (x, y)"},{"question":"Write a function `sort_and_interleave_arrays` that merges two sorted arrays into one sorted array while maintaining the order of elements from both arrays. Each element from the resulting array should alternate between elements from the first and second input arrays as much as possible. The problem helps you practice merging sorted arrays and using interleaving techniques. **Function Signature:** ```python def sort_and_interleave_arrays(arr1: list, arr2: list) -> list: Args: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: A sorted list with elements interleaved from both arrays. ``` **Requirements:** 1. Ensure `arr1` and `arr2` are both sorted in ascending order. 2. Create a new array by interleaving elements from `arr1` and `arr2`. 3. If one array is longer than the other, append the remaining elements to the end of the new array. 4. Maintain the sorted order if arrays are of the same length. **Function Details:** - Iterate through both arrays simultaneously and add elements alternately to the new array. - If one array is exhausted before the other, append the rest of the elements from the remaining array. **Example:** ```python result = sort_and_interleave_arrays([1, 3, 5], [2, 4, 6]) # Output should be [1, 2, 3, 4, 5, 6] result = sort_and_interleave_arrays([1, 3], [2, 4, 6, 8]) # Output should be [1, 2, 3, 4, 6, 8] ```","solution":"def sort_and_interleave_arrays(arr1: list, arr2: list) -> list: Merges two sorted arrays into one sorted array while interleaving elements. Args: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: A sorted list with elements interleaved from both arrays. result = [] i, j = 0, 0 # Iterate over both arrays and interleave elements while i < len(arr1) and j < len(arr2): result.append(arr1[i]) result.append(arr2[j]) i += 1 j += 1 # Append remaining elements if any while i < len(arr1): result.append(arr1[i]) i += 1 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"You need to write a Python function `generate_html_table` that takes a 2D list of data, column names, and an output HTML file name as input, and generates an HTML file containing a well-formed table. Specifically, the function should: 1. Convert the provided 2D list of data into an HTML table format. 2. Each column name should be used as the header for the table. 3. Apply the following styles to the table: - The table should have a border of `1px solid black`. - All table cells should have padding of `8px`. - Apply alternating row colors: The first row should have a background color of `lightgray`, and the second row should have a background color of `white`. Repeat this pattern for the remaining rows. 4. Write the resulting HTML content to the specified file. **Function Signature:** ```python def generate_html_table(data: list, columns: list, output_filename: str) -> None: pass ``` **Parameters:** - `data`: A 2D list containing the tabular data. - `columns`: A list of column names for the table. - `output_filename`: The name of the HTML file to save the table to. # Example ```python data = [ [1, \'Alice\', \'Engineering\', 50000, \'NY\'], [2, \'Bob\', \'HR\', 45000, \'CA\'], [3, \'Charlie\', \'Finance\', 47000, \'TX\'], [4, \'Diana\', \'Engineering\', 51000, \'NY\'] ] columns = [\'ID\', \'Name\', \'Department\', \'Salary\', \'Location\'] output_filename = \'employee_data.html\' generate_html_table(data, columns, output_filename) ``` After running the function, an HTML file `employee_data.html` should be created with the specified table structure and styling applied. # Expected HTML Structure ```html <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <title>Employee Data</title> <style> table { border-collapse: collapse; width: 100%; } th, td { border: 1px solid black; padding: 8px; text-align: left; } tr:nth-child(even) { background-color: white; } tr:nth-child(odd) { background-color: lightgray; } </style> </head> <body> <table> <tr> <th>ID</th> <th>Name</th> <th>Department</th> <th>Salary</th> <th>Location</th> </tr> <tr> <td>1</td> <td>Alice</td> <td>Engineering</td> <td>50000</td> <td>NY</td> </tr> <tr> <td>2</td> <td>Bob</td> <td>HR</td> <td>45000</td> <td>CA</td> </tr> <!-- More rows as per the data --> </table> </body> </html> ``` # Libraries to Use - None. This problem should be solved using basic Python string manipulation and file I/O.","solution":"def generate_html_table(data: list, columns: list, output_filename: str) -> None: Convert a 2D list of data into an HTML table and save it to a file. Parameters: data: List of lists, where each inner list represents a row of data. columns: List of column names to be used as headers for the table. output_filename: The name of the HTML file to save the table to. # HTML Document Structure html_content = \'\'\' <!DOCTYPE html> <html lang=\\"en\\"> <head> <meta charset=\\"UTF-8\\"> <title>Generated Table</title> <style> table { border-collapse: collapse; width: 100%; } th, td { border: 1px solid black; padding: 8px; text-align: left; } tr:nth-child(even) { background-color: white; } tr:nth-child(odd) { background-color: lightgray; } </style> </head> <body> <table> <tr> \'\'\' # Adding column headers for col in columns: html_content += f\'<th>{col}</th>\' html_content += \'</tr>n\' # Adding data rows for row in data: html_content += \'<tr>\' for cell in row: html_content += f\'<td>{cell}</td>\' html_content += \'</tr>n\' # Closing tags html_content += \'\'\' </table> </body> </html> \'\'\' # Writing HTML content to the output file with open(output_filename, \'w\') as file: file.write(html_content)"},{"question":"You are writing a Python function to help manage the inventory of a store. The function `track_inventory(transactions, initial_stock)` should take the following parameters: - `transactions`: A list of tuples, where each tuple contains two elements: - A string, which is either \\"restock\\" or \\"sale\\". - An integer, representing the number of items added to or removed from the inventory. - `initial_stock`: An integer representing the initial number of items in stock. Your function should process each transaction in the order they appear: - If the transaction is a \\"restock\\", add the specified number to the stock. - If the transaction is a \\"sale\\", subtract the specified number from the stock. The function should return a list of the stock level after each transaction. If at any point the stock level would fall below zero due to a \\"sale\\" transaction, instead append `-1` to indicate an invalid transaction and break further processing. ```python def track_inventory(transactions, initial_stock): stock = initial_stock stock_history = [] for action, quantity in transactions: if action == \\"restock\\": stock += quantity elif action == \\"sale\\": stock -= quantity if stock < 0: stock_history.append(-1) break stock_history.append(stock) return stock_history ```","solution":"def track_inventory(transactions, initial_stock): Tracks inventory based on transactions. Args: transactions (list of tuple): A list of tuples with action (\\"restock\\" or \\"sale\\") and quantity. initial_stock (int): The initial number of items in stock. Returns: list: A list of stock levels after each transaction, or -1 if a sale leads to negative stock. stock = initial_stock stock_history = [] for action, quantity in transactions: if action == \\"restock\\": stock += quantity elif action == \\"sale\\": stock -= quantity if stock < 0: stock_history.append(-1) break stock_history.append(stock) return stock_history"},{"question":"You are tasked with creating a function designed to decode a given Base64-encoded string. More specifically, you need to use Python\'s built-in `base64` library to achieve this. Your goal is to implement the function `decode_b64(encoded_str: str, to_uppercase: bool = False) -> str` that takes the following inputs: 1. **encoded_str**: A string that has been Base64-encoded. 2. **to_uppercase**: A boolean flag indicating if the decoded string should be converted to uppercase. Default value is False. The steps your function should follow are: 1. Decode the `encoded_str` from Base64 format. 2. If `to_uppercase` is true, convert the decoded string to uppercase before returning it. 3. Return the decoded string. # Requirements: - Use the `base64` library for decoding the Base64-encoded string. - Implement the optional conversion to uppercase based on the `to_uppercase` flag. # Function Signature: ```python def decode_b64(encoded_str: str, to_uppercase: bool = False) -> str: pass ``` # Example: ```python encoded_str = \\"aGVsbG8gd29ybGQ=\\" to_uppercase = True decoded = decode_b64(encoded_str, to_uppercase) print(decoded) # Output will be \\"HELLO WORLD\\" ```","solution":"import base64 def decode_b64(encoded_str: str, to_uppercase: bool = False) -> str: Decodes a Base64-encoded string. Optionally converts the decoded string to uppercase. :param encoded_str: The Base64-encoded string to decode. :param to_uppercase: Boolean flag to convert the decoded string to uppercase. :return: Decoded string, optionally converted to uppercase. # Decode the base64 encoded string decoded_bytes = base64.b64decode(encoded_str) decoded_str = decoded_bytes.decode(\'utf-8\') # Convert to uppercase if the flag is set if to_uppercase: decoded_str = decoded_str.upper() return decoded_str"},{"question":"Implement a function that reads a given JSON file into a dictionary, extracts a specific key\'s value, and then transforms the extracted value by applying a given lambda function to it. Assume the JSON file is formatted such that the key exists at the top level of the dictionary. Return the transformed value. The function signature should be: ``` import json from typing import Any, Callable def transform_json_value(file_path: str, key: str, transform_func: Callable[[Any], Any]) -> Any: ``` You should write self-contained code starting with the given function signature, including necessary imports. The function should: - Read the JSON file from the provided file path. - Extract the value of the specified key. - Apply the `transform_func` lambda function to the extracted value. - Return the transformed value.","solution":"import json from typing import Any, Callable def transform_json_value(file_path: str, key: str, transform_func: Callable[[Any], Any]) -> Any: Reads a JSON file, extracts the value for a given key, and applies a transformation function to this value. Args: - file_path (str): Path to the JSON file. - key (str): The key whose value needs to be extracted and transformed. - transform_func (Callable): A function to apply to the extracted key\'s value. Returns: - The transformed value. with open(file_path, \'r\') as file: data = json.load(file) if key not in data: raise KeyError(f\\"Key \'{key}\' not found in JSON file.\\") value = data[key] transformed_value = transform_func(value) return transformed_value"},{"question":"You are given a list of transaction records in a text file where each line contains a transaction detail in the format \\"timestamp, type, amount\\". The timestamp follows the format \\"YYYY-MM-DD HH:MM:SS\\", the type is either \\"credit\\" or \\"debit\\", and the amount is a floating-point number. Write a function that reads the transactions from the file, calculates the balance at the end of each day, and saves the daily balances to a new text file. The resulting file should contain lines in the format \\"date, balance\\", ordered chronologically by date. Assumptions: 1. The input file is properly formatted according to the given specifications. 2. The transactions in the input file are sorted chronologically. Your function should: 1. Read the transactions from the specified input file. 2. Calculate the balance at the end of each day, starting with an initial balance of zero. 3. Write the daily balances to a new output file in the specified format. Function arguments: - `input_file`: A string representing the path to the input file containing transaction records. - `output_file`: A string representing the path to the output file where the daily balances will be saved. Function signature: ``` def calculate_daily_balances(input_file: str, output_file: str): ``` You should write self-contained code starting with: ``` from datetime import datetime def calculate_daily_balances(input_file: str, output_file: str): ```","solution":"from datetime import datetime def calculate_daily_balances(input_file: str, output_file: str): Reads transaction records from the input file, calculates the daily balances, and writes them to the output file. daily_balances = {} with open(input_file, \'r\') as file: for line in file: timestamp, trans_type, amount = line.strip().split(\', \') date_str = timestamp.split(\' \')[0] amount = float(amount) if trans_type == \'debit\': amount = -amount if date_str in daily_balances: daily_balances[date_str] += amount else: daily_balances[date_str] = amount # Write daily balances to the output file with open(output_file, \'w\') as file: for date in sorted(daily_balances): file.write(f\\"{date}, {daily_balances[date]:.2f}n\\")"},{"question":"You are required to implement a function called `matrix_rotation` that takes a 2D matrix and an integer `k` as input and returns the matrix rotated 90 degrees clockwise `k` times. The input matrix will always be a square matrix (n x n), where `n` is the number of rows and columns. # Function Signature: ```python def matrix_rotation(matrix, k): Rotate the given matrix 90 degrees clockwise k times. Parameters: matrix (list of list of int): 2D square matrix (n x n) k (int): Number of 90-degree rotations to perform Returns: list of list of int: Matrix rotated k times pass ``` # Example ```python matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] k = 1 rotated_matrix = matrix_rotation(matrix, k) print(rotated_matrix) # Expected Output: # [[7, 4, 1], # [8, 5, 2], # [9, 6, 3]] k = 2 rotated_matrix = matrix_rotation(matrix, k) print(rotated_matrix) # Expected Output: # [[9, 8, 7], # [6, 5, 4], # [3, 2, 1]] ``` # Constraints - The input matrix will always be square (n x n), where 1 ≤ n ≤ 100. - The integer `k` will always be a non-negative integer. # Goals - Correctly perform the matrix rotations based on the number of rotations specified. - Ensure the function handles the case when `k` is 0 or greater than 1.","solution":"def matrix_rotation(matrix, k): Rotate the given matrix 90 degrees clockwise k times. Parameters: matrix (list of list of int): 2D square matrix (n x n) k (int): Number of 90-degree rotations to perform Returns: list of list of int: Matrix rotated k times def rotate_90_clockwise(mat): n = len(mat) new_mat = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): new_mat[j][n-i-1] = mat[i][j] return new_mat k = k % 4 # since rotating 4 times is the same as the original matrix for _ in range(k): matrix = rotate_90_clockwise(matrix) return matrix"},{"question":"You are asked to implement a Python function that tracks the inventory of books in a small library using an SQLite database. The database contains a table `books`, which stores information about each book including the title, author, genre, and quantity available. Your function should allow users to add new books, borrow books, and return books. # Function Requirements - **Function Name**: `manage_inventory` - **Parameters**: - `action` (string): The action to be performed which can be \\"add\\", \\"borrow\\", or \\"return\\". - `title` (string): The title of the book. - `author` (string): The author of the book. - `genre` (string): The genre of the book. - `quantity` (int): The number of books to be added, borrowed, or returned. # Database Table (`books`) - `title` (TEXT): The title of the book. - `author` (TEXT): The author of the book. - `genre` (TEXT): The genre of the book. - `quantity` (INTEGER): The quantity of the book available. # Instructions 1. If the action is \\"add\\": - Check if the book already exists in the database. - If it does, increment the quantity available by the specified number. - If it does not, add a new entry for the book with the given details and quantity. 2. If the action is \\"borrow\\": - Check if the book exists and if the quantity is sufficient. - If it is, decrement the quantity available by the specified number. - If not, return `0` to indicate the borrow action could not be completed. 3. If the action is \\"return\\": - Check if the book exists. - If it does, increment the quantity available by the specified number. - If it does not, return `0` to indicate the return action could not be completed. 4. Return `1` if the operation is successful. # Example: Assume we have the following entry in the `books` table: | title | author | genre | quantity | |-----------------|--------------|--------|----------| | The Great Gatsby | F. Scott Fitzgerald | Fiction | 3 | Calling `manage_inventory(\\"add\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", \\"Fiction\\", 2)` should increment the quantity to `5`. Calling `manage_inventory(\\"borrow\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", \\"Fiction\\", 2)` should decrement the quantity to `3`. Calling `manage_inventory(\\"return\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", \\"Fiction\\", 1)` should increment the quantity to `4`.","solution":"import sqlite3 def manage_inventory(action, title, author, genre, quantity): connection = sqlite3.connect(\'library.db\') cursor = connection.cursor() if action == \\"add\\": cursor.execute(\\"SELECT quantity FROM books WHERE title=? AND author=? AND genre=?\\", (title, author, genre)) result = cursor.fetchone() if result: current_quantity = result[0] cursor.execute(\\"UPDATE books SET quantity=? WHERE title=? AND author=? AND genre=?\\", (current_quantity + quantity, title, author, genre)) else: cursor.execute(\\"INSERT INTO books (title, author, genre, quantity) VALUES (?, ?, ?, ?)\\", (title, author, genre, quantity)) elif action == \\"borrow\\": cursor.execute(\\"SELECT quantity FROM books WHERE title=? AND author=? AND genre=?\\", (title, author, genre)) result = cursor.fetchone() if result and result[0] >= quantity: current_quantity = result[0] cursor.execute(\\"UPDATE books SET quantity=? WHERE title=? AND author=? AND genre=?\\", (current_quantity - quantity, title, author, genre)) else: connection.close() return 0 elif action == \\"return\\": cursor.execute(\\"SELECT quantity FROM books WHERE title=? AND author=? AND genre=?\\", (title, author, genre)) result = cursor.fetchone() if result: current_quantity = result[0] cursor.execute(\\"UPDATE books SET quantity=? WHERE title=? AND author=? AND genre=?\\", (current_quantity + quantity, title, author, genre)) else: connection.close() return 0 connection.commit() connection.close() return 1"},{"question":"You are asked to write a function called `summarize_transactions` that processes a file of bank transactions. Your function will receive a single parameter, `transactions_file`, which is the path to a text file containing the transactions. The file will contain multiple lines, each representing a transaction in the format: ``` date,amount,type ``` where: - `date` is the transaction date in the format `YYYY-MM-DD` - `amount` is the transaction amount, a positive or negative float - `type` is either `deposit` or `withdrawal` Your function needs to check if the file exists. If it does not, it should print an appropriate error message and terminate the function. If the file exists, the function will: 1. Read the transactions from the file. 2. Calculate the total deposit amount and the total withdrawal amount. 3. Print the total deposits and withdrawals. # Specifications: - Define a function named `summarize_transactions(transactions_file)`. - Handle file I/O operations and string manipulations to parse the transactions. # Example of File Content: **transactions.txt** ``` 2023-01-01,100.0,deposit 2023-01-03,-50.0,withdrawal 2023-01-05,200.0,deposit ``` # Function Signature ```python def summarize_transactions(transactions_file: str) -> None: pass ``` By solving this problem, you will learn to handle file reading, string processing, and basic data aggregation in Python.","solution":"import os def summarize_transactions(transactions_file): Reads a file of bank transactions and prints the total deposits and withdrawals. Args: transactions_file (str): The path to the transactions file. if not os.path.exists(transactions_file): print(\\"Error: File does not exist.\\") return total_deposits = 0.0 total_withdrawals = 0.0 with open(transactions_file, \'r\') as file: for line in file: date, amount, t_type = line.strip().split(\',\') amount = float(amount) if t_type == \'deposit\': total_deposits += amount elif t_type == \'withdrawal\': total_withdrawals += abs(amount) print(f\'Total Deposits: {total_deposits}\') print(f\'Total Withdrawals: {total_withdrawals}\')"},{"question":"Write a Python function named `calculate_degree_of_freedom()` that will calculate the degrees of freedom for various statistical tests based on given inputs. The function should accept two parameters: `sample_type` and a dictionary `parameters`. The function should ensure that the inputs are valid and output the correct degrees of freedom based on the following rules. `sample_type` will be a string that can take one of the following values: 1. \\"one_sample_t\\" 2. \\"two_sample_t\\" 3. \\"chi_square\\" 4. \\"anova_one_way\\" 5. \\"anova_two_way\\" The dictionary `parameters` will have keys depending on the `sample_type` as follows: 1. For \\"one_sample_t\\", the dictionary should contain: - \'n\': the sample size (an integer greater than 1) 2. For \\"two_sample_t\\", the dictionary should contain: - \'n1\': the size of the first sample (an integer greater than 1) - \'n2\': the size of the second sample (an integer greater than 1) 3. For \\"chi_square\\", the dictionary should contain: - \'categories\': the number of categories or levels (an integer greater than 1) 4. For \\"anova_one_way\\", the dictionary should contain: - \'groups\': the number of groups (an integer greater than 1) - \'total_samples\': the total number of samples (an integer greater than the number of groups) 5. For \\"anova_two_way\\", the dictionary should contain: - \'rows\': the number of rows (an integer greater than 1) - \'columns\': the number of columns (an integer greater than 1) - \'total_samples\': the total number of samples (an integer greater than the product of rows and columns) The function should calculate the degrees of freedom as follows: 1. For \\"one_sample_t\\": ( n - 1 ) 2. For \\"two_sample_t\\": ( n1 + n2 - 2 ) 3. For \\"chi_square\\": ( categories - 1 ) 4. For \\"anova_one_way\\": ( groups - 1 ) and ( total_samples - groups ) 5. For \\"anova_two_way\\": - ( (rows - 1) ) for row factor - ( (columns - 1) ) for column factor - ( (rows - 1) times (columns - 1) ) for interaction - ( total_samples - (rows times columns) ) for error The function should return the degrees of freedom in the form of a dictionary with appropriate labels for each case. Handle invalid input values or keys gracefully by raising a `ValueError` with a descriptive message. **Example:** For `calculate_degree_of_freedom(\'anova_one_way\', {\'groups\': 3, \'total_samples\': 15})`, the output should be ```python {\'between_groups\': 2, \'within_groups\': 12} ``` Please implement the function `calculate_degree_of_freedom()` as described.","solution":"def calculate_degree_of_freedom(sample_type, parameters): Calculate degrees of freedom based on sample type and provided parameters. Args: - sample_type (str): Type of the statistical test. - parameters (dict): A dictionary containing necessary parameters for the calculation. Returns: - dict: A dictionary with calculated degrees of freedom. if sample_type == \\"one_sample_t\\": n = parameters.get(\'n\') if n is None or n <= 1: raise ValueError(\\"Invalid input: \'n\' should be greater than 1 for \'one_sample_t\'.\\") return {\'degrees_of_freedom\': n - 1} elif sample_type == \\"two_sample_t\\": n1 = parameters.get(\'n1\') n2 = parameters.get(\'n2\') if n1 is None or n2 is None or n1 <= 1 or n2 <= 1: raise ValueError(\\"Invalid input: \'n1\' and \'n2\' should be greater than 1 for \'two_sample_t\'.\\") return {\'degrees_of_freedom\': n1 + n2 - 2} elif sample_type == \\"chi_square\\": categories = parameters.get(\'categories\') if categories is None or categories <= 1: raise ValueError(\\"Invalid input: \'categories\' should be greater than 1 for \'chi_square\'.\\") return {\'degrees_of_freedom\': categories - 1} elif sample_type == \\"anova_one_way\\": groups = parameters.get(\'groups\') total_samples = parameters.get(\'total_samples\') if groups is None or total_samples is None or groups <= 1 or total_samples <= groups: raise ValueError(\\"Invalid input: \'groups\' should be greater than 1 and \'total_samples\' should be greater than \'groups\' for \'anova_one_way\'.\\") return {\'between_groups\': groups - 1, \'within_groups\': total_samples - groups} elif sample_type == \\"anova_two_way\\": rows = parameters.get(\'rows\') columns = parameters.get(\'columns\') total_samples = parameters.get(\'total_samples\') if rows is None or columns is None or total_samples is None or rows <= 1 or columns <= 1 or total_samples <= (rows * columns): raise ValueError(\\"Invalid input: \'rows\' and \'columns\' should be greater than 1 and \'total_samples\' should be greater than the product of \'rows\' and \'columns\' for \'anova_two_way\'.\\") return { \'row_factor\': rows - 1, \'column_factor\': columns - 1, \'interaction\': (rows - 1) * (columns - 1), \'error\': total_samples - (rows * columns) } else: raise ValueError(\\"Invalid sample type provided.\\")"},{"question":"In this problem, you will implement the Principal Component Analysis (PCA) algorithm to reduce the dimensionality of a given data matrix. PCA is a technique used to emphasize variation and capture strong patterns in a dataset by transforming the data into a set of linearly uncorrelated components. PCA is often used in the field of machine learning and data visualization to simplify the complexity of high-dimensional data while retaining the most significant features. You will be provided with a high-dimensional data matrix ( X ) and the desired number of principal components ( k ). Your task is to implement the `PCA` function that reduces the data to ( k ) principal components. **Function Signature:** ```python def PCA(X: np.ndarray, k: int) -> np.ndarray: \'\'\' Given a NxD data matrix and the number of desired principal components, return the data matrix transformed to the top k principal components. :param X: NxD data matrix. :param k: the number of principal components. :return: N x k data point matrix transformed to k principal components. \'\'\' ``` # Required Libraries - `numpy`: A fundamental package for scientific computing in Python, used for array and linear algebra operations. # Requirements 1. Implement the `PCA` function in Python. 2. Use the required APIs: - `numpy.mean`: To compute the mean of the data. - `numpy.cov`: To calculate the covariance matrix. - `numpy.linalg.eig`: To compute the eigenvalues and eigenvectors. - `numpy.dot`: For matrix multiplication. # Example ```python import numpy as np # Sample N x D data matrix X = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]]) # Desired number of principal components k = 1 # Apply PCA reduced_X = PCA(X, k) print(reduced_X) ``` # Expected Output The output will be an `N x k` matrix where (N) is the number of data points and (k) is the number of principal components. The exact values will depend on the input matrix but should reflect the transformed data in the new basis defined by the principal components.","solution":"import numpy as np def PCA(X: np.ndarray, k: int) -> np.ndarray: \'\'\' Given a NxD data matrix and the number of desired principal components, return the data matrix transformed to the top k principal components. :param X: NxD data matrix. :param k: the number of principal components. :return: N x k data point matrix transformed to k principal components. \'\'\' # Step 1: Center the data by subtracting the mean of each feature X_meaned = X - np.mean(X, axis=0) # Step 2: Compute the covariance matrix of the centered data covariance_matrix = np.cov(X_meaned, rowvar=False) # Step 3: Perform eigenvalue decomposition on the covariance matrix eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix) # Step 4: Sort the eigenvectors by decreasing eigenvalues sorted_indices = np.argsort(eigenvalues)[::-1] sorted_eigenvalues = eigenvalues[sorted_indices] sorted_eigenvectors = eigenvectors[:, sorted_indices] # Step 5: Select the top \'k\' eigenvectors top_k_eigenvectors = sorted_eigenvectors[:, :k] # Step 6: Transform the data onto the new subspace reduced_data = np.dot(X_meaned, top_k_eigenvectors) return reduced_data"},{"question":"You are tasked with creating a function that simulates a bookstore inventory management system. The system allows users to add new books, remove books, and search for books by title. The inventory is represented by a dictionary `inventory` where the keys are book titles (strings) and the values are dictionaries containing the book\'s `author` (string) and `quantity` (integer). Your task is to write a function `manage_inventory(inventory: dict) -> None` that: 1. Allows the user to add a new book by providing the title, author, and quantity. 2. Allows the user to remove a book by providing the title. 3. Allows the user to search for a book by title and returns the author and quantity if the book is found, or a message saying the book is not found. 4. Each operation should be conducted based on user input until the user chooses to exit. The function should have an interactive menu system that guides the user through these operations. # Function Signature: ```python def manage_inventory(inventory: dict) -> None: ... ``` # Example: ```python inventory = { \\"The Great Gatsby\\": {\\"author\\": \\"F. Scott Fitzgerald\\", \\"quantity\\": 3}, \\"1984\\": {\\"author\\": \\"George Orwell\\", \\"quantity\\": 5} } manage_inventory(inventory) ``` # Sample Interaction: ```text Choose an operation: 1. Add a new book 2. Remove a book 3. Search for a book by title 4. Exit 1 Enter book title: To Kill a Mockingbird Enter author name: Harper Lee Enter quantity: 4 Book added successfully! Choose an operation: 1. Add a new book 2. Remove a book 3. Search for a book by title 4. Exit 3 Enter book title: 1984 Author: George Orwell, Quantity: 5 Choose an operation: 1. Add a new book 2. Remove a book 3. Search for a book by title 4. Exit 4 Exiting... ``` # Constraints: - The book title should be unique in the inventory. - Appropriate checks should be in place to handle invalid inputs. - Use standard input/output functions for user interaction. - The system should handle case sensitivity of titles efficiently.","solution":"def manage_inventory(inventory: dict) -> None: while True: print(\\"nChoose an operation:\\") print(\\"1. Add a new book\\") print(\\"2. Remove a book\\") print(\\"3. Search for a book by title\\") print(\\"4. Exit\\") choice = input(\\"Enter the number of the chosen operation: \\") if choice == \'1\': title = input(\\"Enter book title: \\").strip() author = input(\\"Enter author name: \\").strip() try: quantity = int(input(\\"Enter quantity: \\").strip()) if title in inventory: print(\\"Book already exists in the inventory.\\") else: inventory[title] = {\\"author\\": author, \\"quantity\\": quantity} print(\\"Book added successfully!\\") except ValueError: print(\\"Invalid quantity. Please enter an integer value.\\") elif choice == \'2\': title = input(\\"Enter book title to remove: \\").strip() if title in inventory: del inventory[title] print(\\"Book removed successfully!\\") else: print(\\"Book not found.\\") elif choice == \'3\': title = input(\\"Enter book title to search: \\").strip() if title in inventory: book_info = inventory[title] print(f\\"Author: {book_info[\'author\']}, Quantity: {book_info[\'quantity\']}\\") else: print(\\"Book not found.\\") elif choice == \'4\': print(\\"Exiting...\\") break else: print(\\"Invalid choice. Please choose a valid operation.\\") # Example usage: # inventory = { # \\"The Great Gatsby\\": {\\"author\\": \\"F. Scott Fitzgerald\\", \\"quantity\\": 3}, # \\"1984\\": {\\"author\\": \\"George Orwell\\", \\"quantity\\": 5} # } # manage_inventory(inventory)"},{"question":"# Problem: Longest Consecutive Subsequence Given an unsorted list of integers, your task is to write a function that finds the length of the longest consecutive elements sequence. # Function Signature: ```python def longest_consecutive(nums: List[int]) -> int: ``` # Parameters: - `nums`: A list of integers, where each integer can be positive, negative, or zero. # Returns: - The length of the longest sequence of consecutive integers in `nums`. # Example Usage: ```python assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4 # The longest consecutive sequence is [1, 2, 3, 4]. assert longest_consecutive([9, 1, -1, 6, 8, 7, 3, 2]) == 2 # The longest consecutive sequence is [1, 2] or [-1, 0, 1] assert longest_consecutive([]) == 0 # An empty list results in a longest sequence of length 0. assert longest_consecutive([1, 2, 0, 1]) == 3 # The longest consecutive sequence is [0, 1, 2]. ``` # Constraints: 1. You must achieve a time complexity of O(n), where n is the number of elements in the list. 2. Avoid using sorting techniques, focus on using data structures that allow for fast lookups. 3. The input list can be empty, in which case the result should be 0. 4. Each integer in the list may appear more than once, but duplicates should not be counted in the consecutive sequence. # Task: Implement the `longest_consecutive` function. This challenge helps you understand and work efficiently with data structures such as sets or hash maps to solve problems related to sequences and series in linear time complexity.","solution":"def longest_consecutive(nums): Finds the length of the longest consecutive elements sequence in the given list of integers `nums`. :param nums: List of integers :return: Length of the longest consecutive sequence if not nums: return 0 num_set = set(nums) # Create a set for O(1) lookups longest_streak = 0 for num in num_set: # Only check for the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Simulate flipping a fair coin 1000 times. Count the number of occurrences of \'Heads\' and \'Tails\', and visualize these counts as a pie chart using matplotlib. This exercise is intended to introduce basic usage of the random module for simulations and matplotlib for creating pie charts. The function should output with: tuple: Containing a dictionary of \'Heads\' and \'Tails\' counts and the matplotlib Axes object. You should write self-contained code starting with: ``` import random import matplotlib.pyplot as plt def task_func(): ```","solution":"import random import matplotlib.pyplot as plt def task_func(): Simulates flipping a fair coin 1000 times, counts the occurrences of \'Heads\' and \'Tails\', and visualizes these counts as a pie chart using matplotlib. Returns: tuple: a tuple containing a dictionary of \'Heads\' and \'Tails\' counts, and the matplotlib Axes object for the pie chart. results = {\'Heads\': 0, \'Tails\': 0} for _ in range(1000): flip = random.choice([\'Heads\', \'Tails\']) results[flip] += 1 fig, ax = plt.subplots() ax.pie(results.values(), labels=results.keys(), autopct=\'%1.1f%%\', startangle=90) ax.axis(\'equal\') # Equal aspect ratio ensures that pie is drawn as a circle. return results, ax"},{"question":"In this problem, you are required to write a function that takes a list of integers and returns a dictionary. The dictionary should have the unique integers from the list as keys, and the values should be the frequency of each integer in the list. # Here are the detailed requirements for the function: 1. **Function Name**: `count_frequencies` 2. **Parameters**: - `lst`: A list of integers. 3. **Returns**: - A dictionary with the unique integers from the list as keys and their respective frequencies as the values. # Example: ```python def count_frequencies(lst): freq_dict = {} for num in lst: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict # Example usage input_list = [1, 2, 2, 3, 1, 4, 2, 5, 3, 3, 4, 4, 4] output = count_frequencies(input_list) print(output) # Output: {1: 2, 2: 3, 3: 3, 4: 4, 5: 1} ``` The function should correctly handle an empty list by returning an empty dictionary.","solution":"def count_frequencies(lst): Returns a dictionary with the unique integers from the list as keys and their respective frequencies as values. freq_dict = {} for num in lst: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"You are required to write a Python function named `draw_hexagon` that uses the `matplotlib` library to create a graphical representation of a regular hexagon centered at the origin, with each side having a default length of 1. The function should also take an optional `length` parameter that can scale the sides of the hexagon. By default, this `length` parameter should be set to 1. Your function should: 1. Calculate the coordinates of the vertices of the hexagon based on the given `length`. 2. Use the `matplotlib.pyplot.plot` function to plot the hexagon on a graph. 3. Ensure that the hexagon is centered at the origin, ((0, 0)). Input: - An optional parameter `length` (default value is 1), which is a float or an integer that indicates the length of each side of the hexagon. Output: - The function does not return any output but displays the plot of the hexagon. Below are a few examples to illustrate the expected behavior: Example 1: ```python draw_hexagon() ``` This should display a plot with a hexagon centered at the origin, with each side having a length of 1. Example 2: ```python draw_hexagon(length=2) ``` This should display a plot with a hexagon centered at the origin, with each side having a length of 2.","solution":"import matplotlib.pyplot as plt import numpy as np def draw_hexagon(length=1): Draws a hexagon centered at the origin with each side of the given length. Parameters: - length (float or int): The length of each side of the hexagon. # Calculate the angles for the hexagon vertices angles = np.linspace(0, 2 * np.pi, 6, endpoint=False) # Determine the x and y coordinates of the vertices x_coords = length * np.cos(angles) y_coords = length * np.sin(angles) # Close the hexagon by repeating the first vertex at the end x_coords = np.append(x_coords, x_coords[0]) y_coords = np.append(y_coords, y_coords[0]) # Plot the hexagon plt.plot(x_coords, y_coords) plt.gca().set_aspect(\'equal\') plt.gca().spines[\'top\'].set_visible(False) plt.gca().spines[\'right\'].set_visible(False) plt.gca().spines[\'bottom\'].set_position(\'zero\') plt.gca().spines[\'left\'].set_position(\'zero\') plt.grid(True) plt.show()"},{"question":"You are asked to implement a Python function that checks the usage of duplicate words in a text document and replaces them with a provided replacement word. The text file contains lines of text, where each line can have multiple words separated by spaces. The function should identify if any word in any line is repeated consecutively and replace the repeated occurrences with the given replacement word. Requirements: 1. Write the function `replace_duplicate_words(file_path: str, replacement_word: str) -> None` where: * `file_path` is the path to the text file containing the text data. * `replacement_word` is the word to replace any detected consecutive duplicates. 2. The function should: * Read the contents of the file line by line. * Identify consecutive duplicate words in each line. * Replace all occurrences of consecutive duplicates in the entire file with the `replacement_word`. * Save the modified content back to the original file. Example: Given a file `text.txt` with the content: ``` hello hello world this is is a test test case ``` Calling `replace_duplicate_words(\'text.txt\', \'REPLACE\')` should modify the file to: ``` REPLACE world this REPLACE a REPLACE case ``` Instructions: 1. Open the file and read its content while processing line by line. 2. Use string and list manipulation techniques to detect and replace consecutive duplicate words. 3. Save the modified lines back to the file. Implement the `replace_duplicate_words` function to replace consecutive duplicate words in a given text file with the provided replacement word.","solution":"def replace_duplicate_words(file_path: str, replacement_word: str) -> None: Reads a file line by line, and replaces any consecutive duplicate words with the given replacement word. Writes the modified content back to the file. :param file_path: The path to the text file. :param replacement_word: The word to replace consecutive duplicate words. with open(file_path, \'r\') as file: lines = file.readlines() modified_lines = [] for line in lines: words = line.split() if not words: modified_lines.append(line) continue new_line = [] i = 0 while i < len(words): if i < len(words) - 1 and words[i] == words[i + 1]: new_line.append(replacement_word) while i < len(words) - 1 and words[i] == words[i + 1]: i += 1 else: new_line.append(words[i]) i += 1 modified_lines.append(\' \'.join(new_line) + \'n\') with open(file_path, \'w\') as file: file.writelines(modified_lines)"},{"question":"You will be writing a Python function named `categorize_numbers` that takes a list of integers and classifies them into three categories: \'low\', \'medium\', and \'high\'. The function should return a dictionary containing three keys (\'low\', \'medium\', \'high\') with each key mapping to a list of integers that fall into that category. The classification criteria are as follows: 1. Numbers from 1 to 33 (inclusive) are classified as \'low\'. 2. Numbers from 34 to 66 (inclusive) are classified as \'medium\'. 3. Numbers from 67 to 100 (inclusive) are classified as \'high\'. The function `categorize_numbers` should: 1. Iterate over the input list of integers. 2. Categorize each integer based on the criteria above. 3. Store the integers in their respective lists within the dictionary. 4. Return the dictionary containing categorized numbers. Example: ```python input_list = [10, 45, 67, 32, 55, 78, 99] expected_output = { \\"low\\": [10, 32], \\"medium\\": [45, 55], \\"high\\": [67, 78, 99] } result = categorize_numbers(input_list) # result should be: # { # \\"low\\": [10, 32], # \\"medium\\": [45, 55], # \\"high\\": [67, 78, 99] # } ``` **Requirements:** - You should handle the edge cases where the input list can be empty. - The function should not assume that the input list contains only valid integers between 1 and 100. If integers are out of this range, they should be ignored. - Implement and test this in Python version 3.x. ```python def categorize_numbers(numbers): pass # Implement function here ```","solution":"def categorize_numbers(numbers): Categorizes numbers from the input list into \'low\', \'medium\', and \'high\' based on predefined ranges. Args: numbers (list of int): List of integers to categorize. Returns: dict: Dictionary with keys \'low\', \'medium\', and \'high\' and corresponding lists of integers. categorized = { \\"low\\": [], \\"medium\\": [], \\"high\\": [] } for number in numbers: if 1 <= number <= 33: categorized[\\"low\\"].append(number) elif 34 <= number <= 66: categorized[\\"medium\\"].append(number) elif 67 <= number <= 100: categorized[\\"high\\"].append(number) return categorized"},{"question":"You are tasked with creating a function named `calculate_span` that constructs an array `span` representing the span of stock prices for each day. The span of the stock\'s price on a given day is defined as the maximum number of consecutive days just before the given day, for which the stock price was less than or equal to its price on the given day. To achieve this, you will need to: 1. Receive a list of integers representing the daily stock prices. 2. Implement an efficient algorithm to calculate the span for each day\'s stock price. 3. Return the result as a list of integers where each element corresponds to the span of the stock price on that day. # Function Signature: ```python def calculate_span(prices): ``` # Constraints: - 1 <= len(prices) <= 10^5 - 1 <= prices[i] <= 10^5 # Example: ```python prices = [100, 80, 60, 70, 60, 75, 85] calculate_span(prices) ``` # Output: ```python [1, 1, 1, 2, 1, 4, 6] ``` # Notes: - The first element always has a span of 1 since there are no days before it. - Implement an efficient algorithm, preferably linear time complexity. - You can use a stack data structure to help keep track of the prices and the corresponding spans.","solution":"def calculate_span(prices): This function takes a list of stock prices and returns a list of spans. The span of the stock\'s price on a given day is the maximum number of consecutive days just before the given day, for which the stock price was less than or equal to its price on the given day. :param prices: List of integers representing daily stock prices. :return: List of integers representing the span of stock prices for each day. n = len(prices) span = [0] * n stack = [] # Stores indexes of the days for i in range(n): while stack and prices[stack[-1]] <= prices[i]: stack.pop() if not stack: span[i] = i + 1 else: span[i] = i - stack[-1] stack.append(i) return span"},{"question":"Write a Python function `calculate_grade(scores_dict)` that takes a dictionary as input, where the keys are student names and the values are lists of their scores in various subjects. Each list of scores contains integers ranging from 0 to 100. The function should calculate the average score for each student and assign a letter grade based on the average score according to the following criteria: - 90 <= average score <= 100: \'A\' - 80 <= average score < 90: \'B\' - 70 <= average score < 80: \'C\' - 60 <= average score < 70: \'D\' - average score < 60: \'F\' The function should return a new dictionary where each key is a student\'s name and each value is their corresponding letter grade. Here is the required function signature: ```python def calculate_grade(scores_dict): # Your implementation here ``` For example: Given a dictionary `scores` as shown below: ```python scores = { \'Alice\': [85, 90, 78, 92], \'Bob\': [70, 68, 65, 72], \'Charlie\': [95, 100, 100, 98], \'Diana\': [50, 45, 60, 58] } ``` When you call `calculate_grade(scores)`, it should return: ```python { \'Alice\': \'B\', \'Bob\': \'D\', \'Charlie\': \'A\', \'Diana\': \'F\' } ```","solution":"def calculate_grade(scores_dict): Calculates the average score for each student and assigns a letter grade based on the average score. :param scores_dict: Dictionary with student names as keys and lists of scores as values. :return: Dictionary with student names as keys and letter grades as values. grade_dict = {} for student, scores in scores_dict.items(): avg_score = sum(scores) / len(scores) if 90 <= avg_score <= 100: grade = \'A\' elif 80 <= avg_score < 90: grade = \'B\' elif 70 <= avg_score < 80: grade = \'C\' elif 60 <= avg_score < 70: grade = \'D\' else: grade = \'F\' grade_dict[student] = grade return grade_dict"},{"question":"You are required to write a function `normalize_vector(vec)` that normalizes the input vector `vec` such that the resultant vector has a magnitude (or Euclidean norm) of 1. This is a common operation in various fields such as machine learning, where normalized vectors are often used. The Euclidean norm of a vector ( vec{x} ) is defined as: [ | vec{x} | = sqrt{x_1^2 + x_2^2 + cdots + x_n^2} ] The normalized vector ( vec{y} ) is then calculated as: [ vec{y} = frac{vec{x}}{| vec{x} |} ] # Specific Requirements: 1. You must use the `numpy.linalg.norm` function to calculate the Euclidean norm of the input vector. 2. The function should accept a NumPy array `vec` as input and return a NumPy array representing the normalized vector. 3. If the input vector has a norm of 0 (i.e., is a zero vector), the function should return a vector of the same shape with all elements being zero. 4. You should explicitly leverage `numpy` during your implementation. Here is a Python signature for the function you need to write: ```python def normalize_vector(vec: np.ndarray) -> np.ndarray: # Your code goes here pass ``` # Example: ```python import numpy as np vec = np.array([3, 4], dtype=np.float64) print(normalize_vector(vec)) # Expected output: array([0.6, 0.8], dtype=float64) vec = np.array([0, 0, 0], dtype=np.float64) print(normalize_vector(vec)) # Expected output: array([0, 0, 0], dtype=float64) ``` # Requirements: - You should rely on the `numpy.linalg.norm` function to calculate the Euclidean norm. - Ensure the function handles the case where the input is a zero vector appropriately.","solution":"import numpy as np def normalize_vector(vec: np.ndarray) -> np.ndarray: Normalizes the input vector vec so that it has a magnitude of 1. If the vector is a zero vector, returns a vector of the same shape with all elements being zero. Parameters: vec (np.ndarray): Input vector to be normalized. Returns: np.ndarray: Normalized vector with a magnitude of 1. norm = np.linalg.norm(vec) if norm == 0: return np.zeros_like(vec) return vec / norm"},{"question":"You are required to write a Python function `student_grades` that helps manage student grades. The function should store and manipulate student grades by performing various operations such as adding new students, updating grades, removing students, and displaying all student records. Each student has a unique ID, a name, and a grade. The functionalities needed are: 1. Adding a new student with a unique ID, name, and initial grade. 2. Updating the grade of an existing student based on their ID. 3. Removing a student from the records using their ID. 4. Displaying all student records in a sorted manner by their IDs. **Function Signature:** ```python def student_grades(option: int, student_id: int = None, name: str = None, grade: int = None) -> None: pass ``` **Parameters:** - `option` (int): An integer representing the action to perform: - \\"1\\": Add a new student. - \\"2\\": Update the grade of an existing student. - \\"3\\": Remove a student from the records. - \\"4\\": Display all student records. - `student_id` (int, optional): The unique ID of the student for relevant operations. - `name` (str, optional): The name of the student for relevant operations. - `grade` (int, optional): The grade of the student for relevant operations. For each option, use the `student_id`, `name`, and `grade` parameters if required (e.g., when adding or updating student records). Implement necessary validations, such as checking if a student already exists when adding or if a student ID is valid when updating or removing records. Handle edge cases gracefully, such as trying to update or remove a student who does not exist.","solution":"# A dictionary to keep track of student records students = {} def student_grades(option: int, student_id: int = None, name: str = None, grade: int = None) -> None: if option == 1: # Add a new student if student_id in students: print(f\\"Student with ID {student_id} already exists.\\") else: students[student_id] = {\'name\': name, \'grade\': grade} print(f\\"Added student with ID {student_id}.\\") elif option == 2: # Update the grade of an existing student if student_id in students: students[student_id][\'grade\'] = grade print(f\\"Updated grade for student with ID {student_id}.\\") else: print(f\\"Student with ID {student_id} does not exist.\\") elif option == 3: # Remove a student from records if student_id in students: del students[student_id] print(f\\"Removed student with ID {student_id}.\\") else: print(f\\"Student with ID {student_id} does not exist.\\") elif option == 4: # Display all student records sorted by student_id for sid in sorted(students): print(f\\"ID: {sid}, Name: {students[sid][\'name\']}, Grade: {students[sid][\'grade\']}\\") else: print(\\"Invalid option.\\")"},{"question":"Create a function named `mean_temperature_by_city(df)` that calculates and visualizes the mean temperature for each city provided in the dataset using a bar chart. The function should: 1. Take a pandas DataFrame `df` as input, which contains at least the columns `City` and `Temperature`. 2. Group the DataFrame by the `City` column and compute the mean temperature for each city. 3. Use the `matplotlib` library to create a bar chart where: - The x-axis represents the cities. - The y-axis represents the mean temperature of each city. - Each bar is colored blue. 4. Label the x-axis as \\"City\\". 5. Label the y-axis as \\"Mean Temperature\\". 6. Set a title for the chart as \\"Mean Temperature by City\\". 7. Display the plot. The objective of this exercise is to practice using group-by operations in pandas and visualizing aggregated data using bar charts with `matplotlib.pyplot`.","solution":"import pandas as pd import matplotlib.pyplot as plt def mean_temperature_by_city(df): Calculates and visualizes the mean temperature for each city. Parameters: df (pd.DataFrame): DataFrame containing at least the columns `City` and `Temperature`. Returns: None # Grouping the DataFrame by `City` and calculating the mean temperature for each city mean_temps = df.groupby(\'City\')[\'Temperature\'].mean() # Plotting the data mean_temps.plot(kind=\'bar\', color=\'blue\') # Setting labels and title plt.xlabel(\\"City\\") plt.ylabel(\\"Mean Temperature\\") plt.title(\\"Mean Temperature by City\\") # Display the plot plt.show()"},{"question":"Your task is to implement a function `generate_synthetic_data` that generates a synthetic dataset for polynomial regression given the specification of the polynomial degree and the number of data points. The goal is to help in testing regression algorithms with a known underlying polynomial model. # Function Signature ```python def generate_synthetic_data(degree: int, num_points: int, noise_std: float) -> Tuple[np.array, np.array]: pass ``` # Inputs: - `degree (int)`: The degree of the polynomial used to generate the synthetic data. - `num_points (int)`: The number of data points to generate. - `noise_std (float)`: The standard deviation of the Gaussian noise to be added to the output values. # Output: - A tuple of two numpy arrays `(X, Y)`: - `X (np.array)`: A 1D numpy array of shape `(num_points,)` representing the input values. - `Y (np.array)`: A 1D numpy array of shape `(num_points,)` representing the output values with added noise. # Steps to Follow: 1. **Generate Random Input Values**: Generate `num_points` uniformly spaced input values in the range [0, 1]. 2. **Generate Polynomial Coefficients**: Randomly generate the coefficients of the polynomial of the specified degree. 3. **Compute True Output Values**: Compute the output values for the generated input values using the polynomial function. 4. **Add Gaussian Noise**: Add Gaussian noise with a mean of 0 and standard deviation `noise_std` to the output values. # Example: ```python import numpy as np from typing import Tuple def generate_synthetic_data(degree: int, num_points: int, noise_std: float) -> Tuple[np.array, np.array]: np.random.seed(42) X = np.linspace(0, 1, num_points) coefficients = np.random.randn(degree + 1) Y_true = sum(c * X**i for i, c in enumerate(coefficients)) noise = np.random.normal(0, noise_std, num_points) Y = Y_true + noise return X, Y # Example Usage degree = 3 num_points = 100 noise_std = 0.1 X, Y = generate_synthetic_data(degree, num_points, noise_std) print(X[:5]) # Expected: [0. 0.01010101 0.02020202 0.03030303 0.04040404] print(Y[:5]) # Example output, actual values will vary due to randomness ``` Note: Make sure to use the `numpy` library for generating random numbers and performing array operations. Adjust the random seed to ensure reproducibility if needed.","solution":"import numpy as np from typing import Tuple def generate_synthetic_data(degree: int, num_points: int, noise_std: float) -> Tuple[np.ndarray, np.ndarray]: Generates a synthetic dataset for polynomial regression. Parameters: - degree (int): The degree of the polynomial used to generate the data. - num_points (int): The number of data points to generate. - noise_std (float): The standard deviation of the Gaussian noise added to the output values. Returns: - Tuple[np.ndarray, np.ndarray]: Tuple containing array of input values and output values with added noise. np.random.seed(42) # Ensuring reproducibility X = np.linspace(0, 1, num_points) coefficients = np.random.randn(degree + 1) Y_true = sum(c * X**i for i, c in enumerate(coefficients)) noise = np.random.normal(0, noise_std, num_points) Y = Y_true + noise return X, Y"},{"question":"In this coding exercise, you are required to write a function that computes the optimal launch angle `theta` (in radians) for a projectile to achieve a given range `R` on level ground, considering gravitational acceleration `g` and initial speed `u`. The function should implement an analytical solution based on the following relationship derived from the kinematic equations: [ R = frac{u^2 sin(2theta)}{g} ] To isolate `theta`, you can utilize the arcsin (inverse sine) function. **Function Signature:** ```python def optimal_launch_angle(R, u, g): Calculates the optimal launch angle theta required to achieve a given range R. Parameters: R (float): Target range (meters). u (float): Initial speed (meters/second). g (float): Gravitational acceleration (meters/second^2). Returns: float: The optimal launch angle theta in radians. ``` **Input:** - `R` (float): Target range (m). - `u` (float): Initial speed (m/s). - `g` (float): Gravitational acceleration (m/s²). **Output:** - A float value representing the optimal launch angle `theta` in radians. Constraints: - Ensure that it is physically possible to hit the target, i.e., the equation has a solution. You may assume all inputs are valid, but handle possible calculation errors gracefully. Use the following NumPy functions: - `numpy.arcsin` - `numpy.sin` Make sure to handle inputs appropriately so that your computation remains within the valid domain for the arcsin function.","solution":"import numpy as np def optimal_launch_angle(R, u, g): Calculates the optimal launch angle theta required to achieve a given range R. Parameters: R (float): Target range (meters). u (float): Initial speed (meters/second). g (float): Gravitational acceleration (meters/second^2). Returns: float: The optimal launch angle theta in radians. if R < 0 or u <= 0 or g <= 0: raise ValueError(\\"Invalid input values: ensure R >= 0, and u, g > 0.\\") argument = (R * g) / (u ** 2) if argument < 0 or argument > 1: raise ValueError(\\"No real solution for theta with given inputs.\\") theta = 0.5 * np.arcsin(argument) return theta"},{"question":"Create a function named `find_largest_consecutive_sum` that finds the largest sum of consecutive integers in a list. The function should be efficient, having a time complexity of O(n). This problem is typically known as finding the maximum subarray sum. The function signature should be: ```python def find_largest_consecutive_sum(nums: List[int]) -> int: pass ``` **Parameters:** 1. `nums` (List[int]): A list of integers. **Returns:** - `int`: Returns the largest sum of consecutive integers from the list. **Requirements:** - Use an efficient algorithm such as Kadane\'s algorithm to achieve the desired time complexity. - Handle edge cases such as an empty list (in which case the sum should be 0) and lists with negative and positive integers. Here is an example of how the function should behave: ```python nums = [1, -2, 3, 5, -1, 2] result = find_largest_consecutive_sum(nums) print(result) # Expected output: 9 (3 + 5 + -1 + 2) nums = [-3, -2, -1, -4] result = find_largest_consecutive_sum(nums) print(result) # Expected output: -1 (largest single element) ```","solution":"from typing import List def find_largest_consecutive_sum(nums: List[int]) -> int: if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Process a list of integers to group consecutive numbers into sublists. For example, the list `[1, 2, 3, 7, 8, 10]` should become `[[1, 2, 3], [7, 8], [10]]`. The function should return: ```python list: A list of lists, where each sublist contains consecutive integers from the original list. ``` You should write self-contained code starting with: ```python def group_consecutive(lst): ```","solution":"def group_consecutive(lst): Process a list of integers to group consecutive numbers into sublists. Parameters: lst (List[int]): The input list of integers. Returns: List[List[int]]: A list of lists, where each sublist contains consecutive integers from the original list. if not lst: return [] # Initialize variables result = [] current_sublist = [lst[0]] # Traverse the list starting from the second element for i in range(1, len(lst)): if lst[i] == lst[i - 1] + 1: # If the current element is consecutive, add it to current sublist current_sublist.append(lst[i]) else: # If not, add the current sublist to the result and start a new sublist result.append(current_sublist) current_sublist = [lst[i]] # Add the last sublist to the result result.append(current_sublist) return result"},{"question":"In this problem, you will practice manipulating strings and utilizing lists to manage data. You are tasked to create a function that formats a list of items into a readable sentence. Write a function called `format_list(items)` that takes a list of strings `items` as input and returns a string that formats the items in a grammatically correct way. The function should follow these rules: 1. If the list is empty, return an empty string. 2. If the list contains only one item, return that item. 3. If the list contains two items, join them with the word \\"and\\". 4. If the list contains three or more items, join all items with commas, except for the last item, which should be preceded by \\"and\\". # Example: ```python format_list([\\"apples\\", \\"bananas\\", \\"oranges\\"]) ``` This should return the string: `\\"apples, bananas, and oranges\\"` # Requirements: Use string concatenation and list slicing techniques to construct the final sentence. # Constraints: - Assume all items in the list are non-empty strings. - Be sure to account for various list lengths as specified in the rules.","solution":"def format_list(items): Formats a given list of items into a readable sentence. Parameters: items (list of str): A list of strings to format. Returns: str: A formatted string based on the length of the list. if not items: return \\"\\" elif len(items) == 1: return items[0] elif len(items) == 2: return f\\"{items[0]} and {items[1]}\\" else: return \\", \\".join(items[:-1]) + \\", and \\" + items[-1]"},{"question":"You are tasked with writing a function that analyzes product sales data from a pandas DataFrame and visualizes the sales trends over time using a line chart. The line chart should display the total sales for each month, with a clear differentiation between sales from different product categories using distinct colors and markers. # Function Signature ```python def visualize_sales_trends(df): Displays a line chart of product sales trends over time from the given DataFrame. Parameters: df (pd.DataFrame): A pandas DataFrame that contains the following columns: - \'date\': Date of the sale (in \'YYYY-MM-DD\' format). - \'sales\': Sales amount. - \'category\': Product category. Returns: None ``` # Requirements 1. **DataFrame:** The input `df` is a pandas DataFrame containing at least three columns: `\'date\'`, `\'sales\'`, and `\'category\'`. 2. **Line Chart:** Use the Matplotlib library to create the line chart. 3. **Monthly Sales:** Aggregate the total sales for each month. 4. **Visualization:** The line chart should have the following features: - Different lines for each product category. - Distinct colors and markers for each category. - Labels for the x-axis (months) and y-axis (sales). - A legend indicating the product categories. - A title that says \\"Monthly Sales Trends\\". - Grid for better readability. 5. **Output:** The function should display the chart using the `matplotlib.pyplot.show` method. # Example Given the following DataFrame: ```python import pandas as pd data = { \'date\': [\'2023-01-15\', \'2023-01-22\', \'2023-02-10\', \'2023-02-23\', \'2023-03-01\', \'2023-03-15\', \'2023-04-05\', \'2023-04-20\'], \'sales\': [200, 300, 150, 400, 250, 100, 300, 450], \'category\': [\'Electronics\', \'Furniture\', \'Electronics\', \'Furniture\', \'Electronics\', \'Furniture\', \'Electronics\', \'Furniture\'] } df = pd.DataFrame(data) ``` Calling the `visualize_sales_trends(df)` function should display a line chart with the monthly sales trends for each product category. # Libraries You will need to use the following: - `pandas` - `matplotlib.pyplot` # Tips - Utilize `pandas` for data manipulation to aggregate sales by month and category. - Check the Matplotlib documentation for customizing line styles, markers, and colors. - Ensure the date column is properly parsed as datetime using `pd.to_datetime`.","solution":"import pandas as pd import matplotlib.pyplot as plt def visualize_sales_trends(df): Displays a line chart of product sales trends over time from the given DataFrame. Parameters: df (pd.DataFrame): A pandas DataFrame that contains the following columns: - \'date\': Date of the sale (in \'YYYY-MM-DD\' format). - \'sales\': Sales amount. - \'category\': Product category. Returns: None df[\'date\'] = pd.to_datetime(df[\'date\']) df[\'month\'] = df[\'date\'].dt.to_period(\'M\') monthly_sales = df.groupby([\'month\', \'category\'])[\'sales\'].sum().unstack() markers = [\'o\', \'s\', \'D\', \'*\', \'^\', \'v\', \'<\', \'>\'] colors = plt.cm.get_cmap(\'tab10\') plt.figure(figsize=(10, 6)) for idx, category in enumerate(monthly_sales.columns): plt.plot(monthly_sales.index.astype(str), monthly_sales[category], marker=markers[idx % len(markers)], color=colors(idx), label=category) plt.title(\'Monthly Sales Trends\') plt.xlabel(\'Month\') plt.ylabel(\'Total Sales\') plt.legend(title=\'Category\') plt.grid(True) plt.show()"},{"question":"You are required to write a function named `plot_exp_log_functions()` that plots the exponential and natural logarithm functions on the same graph using Matplotlib and NumPy libraries. The specifications for the plot are as follows: 1. The figure size should be 8 inches wide and 5 inches tall, with a resolution of 100 dots per inch (DPI). 2. The plot should have a grid of 1x1. 3. The x-values should range from 0.1 to 5, computed with 300 sample points. 4. The y-values should be the exponential and natural logarithm of the x-values. 5. The exponential function should be plotted in green with a dashed line of width 2 pixels. 6. The natural logarithm function should be plotted in magenta with a dashed line of width 2 pixels. 7. The x-axis limits should be set to [0, 5]. 8. The ticks on the x-axis should be at 1, 2, 3, 4, 5 with custom labels. 9. The y-axis limits should be set appropriately to display all computed y-values. 10. The ticks on the y-axis should be at -2, 0, 2, 4, 6 with custom labels. The function should utilize the following Matplotlib functions: `figure`, `subplot`, and `gca`. # Function Signature ```python def plot_exp_log_functions(): pass ``` # Example Output Executing the `plot_exp_log_functions()` should generate and show a plot with the described characteristics.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_exp_log_functions(): # Generate x-values x = np.linspace(0.1, 5, 300) # Compute y-values y_exp = np.exp(x) y_log = np.log(x) # Create a new figure with specified size and resolution plt.figure(figsize=(8, 5), dpi=100) # Plot the exponential function plt.plot(x, y_exp, \'g--\', linewidth=2, label=\\"exp(x)\\") # Plot the natural logarithm function plt.plot(x, y_log, \'m--\', linewidth=2, label=\\"log(x)\\") # Add grid to the plot plt.grid(True) # Set x and y limit plt.xlim([0, 5]) # Setting the x-ticks and y-ticks with corresponding labels plt.xticks([1, 2, 3, 4, 5], [\'One\', \'Two\', \'Three\', \'Four\', \'Five\']) plt.yticks([-2, 0, 2, 4, 6], [\'Negative Two\', \'Zero\', \'Two\', \'Four\', \'Six\']) # Displaying the legend plt.legend() # Show the plot plt.show()"},{"question":"You are given a list of orders, where each order is represented as a tuple containing the item\'s name, order quantity, and price per unit. Your task is to write a Python function named `generate_order_summary` that does the following: 1. Takes the list of orders as input. 2. Aggregates the total quantity and total price for each item. 3. Returns a dictionary where the keys are the item names and the values are another dictionary containing the total quantity and total price for that item. The input list of orders has the following structure: - Each order is a tuple in the format (item_name, quantity, price_per_unit). The function should output a dictionary in the following structure: - The keys are item names (strings). - The values are dictionaries with keys \'total_quantity\' and \'total_price\', corresponding to the aggregated quantity and total price for each item. To accomplish this, you need to iterate through the list of orders, update the cumulative quantity and price for each item, and construct the final summary dictionary. Detailed instructions: - Your function should be named `generate_order_summary`. - Take the list of orders as input and initialize an empty dictionary to hold the summary. - For each order, update the total quantity and total price for the corresponding item in the summary dictionary. - Ensure the prices are accurately calculated by multiplying order quantities with their respective prices. **Input:** - A list of tuples, with each tuple containing an item\'s name (string), quantity (int), and price per unit (float). Example of input: ```python orders = [ (\\"apple\\", 5, 0.5), (\\"banana\\", 10, 0.2), (\\"apple\\", 7, 0.5), (\\"orange\\", 3, 0.8), (\\"banana\\", 4, 0.2) ] ``` **Output:** - A dictionary summarizing the orders with aggregated quantities and prices. Example of output based on the above input: ```python { \\"apple\\": {\\"total_quantity\\": 12, \\"total_price\\": 6.0}, \\"banana\\": {\\"total_quantity\\": 14, \\"total_price\\": 2.8}, \\"orange\\": {\\"total_quantity\\": 3, \\"total_price\\": 2.4} } ``` **Notes:** - Ensure that the total price is calculated using floating point arithmetic and rounded to two decimal places if necessary.","solution":"def generate_order_summary(orders): Generates a summary of orders with total quantity and total price for each item. Parameters: orders (list of tuples): A list where each tuple contains (item_name, quantity, price_per_unit). Returns: dict: A dictionary with item names as keys and another dictionary as values containing \'total_quantity\' and \'total_price\' for each item. summary = {} for item_name, quantity, price_per_unit in orders: if item_name not in summary: summary[item_name] = {\'total_quantity\': 0, \'total_price\': 0.0} summary[item_name][\'total_quantity\'] += quantity summary[item_name][\'total_price\'] += quantity * price_per_unit # Optional: Rounding total_price to 2 decimal places for item in summary: summary[item][\'total_price\'] = round(summary[item][\'total_price\'], 2) return summary"},{"question":"You need to build a function that schedules tasks in such a way that each task has a cooling period before it can be executed again. For example, given a list of tasks represented by characters and a cooling interval `n`, you must determine the minimum number of time units that the CPU will take to execute all tasks with the given constraints. Your task is to implement a function `task_scheduler(tasks, n)`. This function should: 1. Take in two parameters: - `tasks`: A list of characters representing the tasks. For example, `[\'A\', \'A\', \'A\', \'B\', \'B\', \'B\']`. - `n`: An integer representing the cooling interval between the same type of tasks. 2. Use a priority queue to manage the most frequent tasks first and a deque to keep track of the cooldown period for each task. 3. Output the minimum number of time units required to execute all tasks with the given cooling interval constraints. **Function Signature:** ```python from collections import deque from heapq import heappush, heappop def task_scheduler(tasks, n): pass ``` **Example:** ```python tasks = [\'A\', \'A\', \'A\', \'B\', \'B\', \'B\'] n = 2 print(task_scheduler(tasks, n)) # Output: 8 ``` **Explanation:** One possible way to schedule the `tasks` with `n = 2` is: `A -> B -> idle -> A -> B -> idle -> A -> B` In this way, `8` time units are required. **Constraints:** - All tasks are represented by capital English letters. - The cooling interval `n` is a non-negative integer and will not exceed the length of the tasks list. - The length of the tasks list will be at most 10^4.","solution":"from collections import Counter, deque from heapq import heappush, heappop def task_scheduler(tasks, n): if n == 0: return len(tasks) task_counts = Counter(tasks) max_heap = [] for count in task_counts.values(): heappush(max_heap, -count) time = 0 cooldown = deque() while max_heap or cooldown: time += 1 if max_heap: current_task_count = -heappop(max_heap) - 1 if current_task_count: cooldown.append((current_task_count, time + n)) if cooldown and cooldown[0][1] == time: ready_task = cooldown.popleft()[0] heappush(max_heap, -ready_task) return time"},{"question":"Implement a function to perform matrix multiplication using the Strassen algorithm, which is more efficient than the traditional matrix multiplication method for large matrices. You need to handle matrices that are of size `n x n` where `n` is a power of 2. # Function Signature ```python def strassen_matrix_multiplication(A, B): Perform matrix multiplication using the Strassen algorithm. Parameters: A (list of lists of int): The first n x n matrix to multiply. B (list of lists of int): The second n x n matrix to multiply. Returns: list of lists of int: The resulting n x n matrix product of A and B. ``` # Detailed Steps 1. **Base Case**: - Base case for the recursive method is when `n == 1`, simply multiply the single elements. 2. **Matrix Splitting**: - If `n > 1`, split matrices A and B into four sub-matrices each: ``` A = | A11 A12 | | A21 A22 | B = | B11 B12 | | B21 B22 | ``` 3. **Strassen\'s Formulas**: - Compute the seven products as defined by the Strassen algorithm: ``` M1 = (A11 + A22) * (B11 + B22) M2 = (A21 + A22) * B11 M3 = A11 * (B12 - B22) M4 = A22 * (B21 - B11) M5 = (A11 + A12) * B22 M6 = (A21 - A11) * (B11 + B12) M7 = (A12 - A22) * (B21 + B22) ``` 4. **Constructing the Resulting Matrix**: - Combine these products to get the resulting matrix sub-matrices, then merge them: ``` C11 = M1 + M4 - M5 + M7 C12 = M3 + M5 C21 = M2 + M4 C22 = M1 + M3 - M2 + M6 ``` 5. **Combining Sub-matrices**: - Combine `C11`, `C12`, `C21`, and `C22` to form the resultant matrix `C`. Implement the required functions and use list comprehensions where appropriate to handle the sub-matrices.","solution":"def add_matrix(A, B): Adds two matrices element-wise. n = len(A) return [[A[i][j] + B[i][j] for j in range(n)] for i in range(n)] def sub_matrix(A, B): Subtracts two matrices element-wise. n = len(A) return [[A[i][j] - B[i][j] for j in range(n)] for i in range(n)] def split_matrix(A): Splits a given matrix into four sub-matrices. n = len(A) // 2 A11 = [[A[i][j] for j in range(n)] for i in range(n)] A12 = [[A[i][j] for j in range(n, 2*n)] for i in range(n)] A21 = [[A[i][j] for j in range(n)] for i in range(n, 2*n)] A22 = [[A[i][j] for j in range(n, 2*n)] for i in range(n, 2*n)] return A11, A12, A21, A22 def merge_matrix(C11, C12, C21, C22): Merges four sub-matrices into a single matrix. n = len(C11) C = [[0 for _ in range(2*n)] for _ in range(2*n)] for i in range(n): for j in range(n): C[i][j] = C11[i][j] C[i][j+n] = C12[i][j] C[i+n][j] = C21[i][j] C[i+n][j+n] = C22[i][j] return C def strassen_matrix_multiplication(A, B): Perform matrix multiplication using the Strassen algorithm. n = len(A) if n == 1: return [[A[0][0] * B[0][0]]] A11, A12, A21, A22 = split_matrix(A) B11, B12, B21, B22 = split_matrix(B) M1 = strassen_matrix_multiplication(add_matrix(A11, A22), add_matrix(B11, B22)) M2 = strassen_matrix_multiplication(add_matrix(A21, A22), B11) M3 = strassen_matrix_multiplication(A11, sub_matrix(B12, B22)) M4 = strassen_matrix_multiplication(A22, sub_matrix(B21, B11)) M5 = strassen_matrix_multiplication(add_matrix(A11, A12), B22) M6 = strassen_matrix_multiplication(sub_matrix(A21, A11), add_matrix(B11, B12)) M7 = strassen_matrix_multiplication(sub_matrix(A12, A22), add_matrix(B21, B22)) C11 = add_matrix(sub_matrix(add_matrix(M1, M4), M5), M7) C12 = add_matrix(M3, M5) C21 = add_matrix(M2, M4) C22 = add_matrix(sub_matrix(add_matrix(M1, M3), M2), M6) return merge_matrix(C11, C12, C21, C22)"},{"question":"Write a function that accepts a string and returns the number of unique characters in the string. This function is useful for basic text analysis and can help in identifying the uniqueness of characters in any given string. The function should output with: int: The number of unique characters in the given string. You should write self-contained code starting with: ``` def count_unique_characters(s): ```","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s. Parameters: s (str): The string to analyze. Returns: int: The number of unique characters in the string. return len(set(s))"},{"question":"You need to develop a function called `fetch_random_joke` that retrieves a random joke from the JokeAPI. The function should send an HTTP GET request to the JokeAPI endpoint and handle the response appropriately. The goal is to return a formatted string containing the joke. The function should execute the following steps: 1. Construct a request to the JokeAPI endpoint to fetch a random joke. 2. Handle the API response: - If the API returns a setup and delivery type joke (having both \\"setup\\" and \\"delivery\\" fields), the function should return the joke in the format: \\"Setup: {setup}nDelivery: {delivery}\\". - If the API returns a single-part joke (only having a \\"joke\\" field), the function should return the joke as is. - If the API returns an error, the function should raise an exception with the error message provided by the API. The function should return the formatted joke as a string. To achieve this, you must use the `requests` library for sending GET requests to the API and handle JSON responses. **Function Signature:** ```python def fetch_random_joke() -> str: pass ``` **Example Usage:** ```python joke = fetch_random_joke() print(joke) ``` **Requirements:** - Use the `requests.get` method as the primary means of making HTTP GET requests. - Handle the response by parsing it as JSON and following the given logic for different types of jokes and errors. **Constraints:** - Assume the request URL is \\"https://v2.jokeapi.dev/joke/Any\\".","solution":"import requests def fetch_random_joke(): Fetches a random joke from the JokeAPI and returns it formatted. Returns: str: Formatted joke from the API. Raises: Exception: If the API returns an error. url = \\"https://v2.jokeapi.dev/joke/Any\\" response = requests.get(url) if response.status_code != 200: raise Exception(f\\"Failed to fetch joke with status code {response.status_code}\\") joke_data = response.json() if joke_data.get(\'error\'): raise Exception(joke_data.get(\'message\', \'Unknown error occurred\')) if \'setup\' in joke_data and \'delivery\' in joke_data: setup = joke_data[\'setup\'] delivery = joke_data[\'delivery\'] return f\\"Setup: {setup}nDelivery: {delivery}\\" if \'joke\' in joke_data: return joke_data[\'joke\'] raise Exception(\\"Unexpected API response format\\")"},{"question":"In this problem, you are asked to implement a function that simulates a simplified elevator system in a building with a given number of floors. The function should determine the sequence of stops the elevator will make based on a list of requested floors and the initial starting position of the elevator. The elevator has the following rules: - It starts at the ground floor (0). - It can only move up and down between the floors. - It must visit each requested floor in the order of the requests list. - If there are multiple requests for the same floor, it should treat them as separate stops. Your task is to write the function `elevator_sequence` that takes two parameters: 1. `floors`: a list of integers representing the floors requested by the users. 2. `starting_floor`: an integer representing the initial starting floor of the elevator. The function should return a list of integers representing the sequence of floors the elevator will stop at. **Function Signature:** ```python def elevator_sequence(floors: [int], starting_floor: int) -> [int]: # Implement the required functionality pass ``` **Example:** ```python floors = [2, 0, 5, 3, 2, 1] starting_floor = 0 result = elevator_sequence(floors, starting_floor) print(result) # Output: [2, 0, 5, 3, 2, 1] ``` **Explanation:** In the example above: - The elevator starts at floor 0. - It then visits each requested floor in the order given (2, 0, 5, 3, 2, 1). Here is a sample structure of the function to get you started: ```python def elevator_sequence(floors: [int], starting_floor: int) -> [int]: # Initialize the result list with the starting floor result = [] # Iterate over each requested floor and add to the result list for floor in floors: result.append(floor) return result ``` **Requirements:** - The function should work for any list of requested floors provided as input. - The function should handle cases where the starting floor is different from zero. **Test your function:** ```python floors = [4, 1, 3, 4, 2] starting_floor = 2 result = elevator_sequence(floors, starting_floor) print(result) # Output: [4, 1, 3, 4, 2] ``` In this test case, the elevator starts at floor 2 and meets the floor requests in the order provided.","solution":"def elevator_sequence(floors: [int], starting_floor: int) -> [int]: Returns the sequence of floors the elevator will stop at starting from the starting floor. The elevator will visit each requested floor in the same order as they appear in the input list `floors`. # Initialize the result list with the starting floor result = [] # Iterate over each requested floor and add to the result list for floor in floors: result.append(floor) return result"},{"question":"You are required to write a Python function named `is_prime` that determines if a given integer `n` is a prime number. A prime number is defined as a number greater than 1 that has no divisors other than 1 and itself. # Function Signature ```python def is_prime(n: int) -> bool: pass ``` # Input - A single integer `n` which is guaranteed to be greater than or equal to 2. # Output - Returns `True` if `n` is a prime number, otherwise returns `False`. # Example ```python print(is_prime(2)) # Output: True (since 2 is a prime number) print(is_prime(4)) # Output: False (since 4 has divisors 1, 2, and 4) print(is_prime(13)) # Output: True (since 13 is a prime number) print(is_prime(21)) # Output: False (since 21 has divisors 1, 3, 7, and 21) ``` # Requirements - You must ensure the function efficiently checks for prime status, aiming for a time complexity better than O(n). - The function should be accurate for all integers starting from 2 upwards. # Notes - You might want to consider that for non-prime `n`, there must be at least one factor less than or equal to the square root of `n`. - Proper handling of edge cases (like very small values of `n`) is essential for the robustness of the solution.","solution":"import math def is_prime(n: int) -> bool: Check if a number is a prime number. Args: n (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False sqrt_n = int(math.sqrt(n)) for i in range(2, sqrt_n + 1): if n % i == 0: return False return True"},{"question":"You are required to implement a Python function that generates the Fibonacci sequence up to a given number of terms. This function will help you practice working with loops and list operations. The function you need to write is `generate_fibonacci(n)`, where `n` is the number of terms to generate in the Fibonacci sequence. Specifically, your task is to write a function `generate_fibonacci(n)` which: 1. Takes a single argument `n`, which is an integer representing the number of terms to generate in the Fibonacci sequence. 2. Uses a loop to generate the Fibonacci sequence. 3. Returns a list containing the Fibonacci sequence up to `n` terms. **Function Signature:** ```python def generate_fibonacci(n: int) -> list: ``` **Example Usage:** ```python result = generate_fibonacci(5) print(result) # Output should be [0, 1, 1, 2, 3] ``` Note: - The first two terms of the Fibonacci sequence are 0 and 1. - Ensure your implementation strictly follows the function signature provided above. - If `n` is 0, return an empty list. If `n` is 1, return [0]. - Make sure to account for cases where `n` is less than or equal to 0.","solution":"def generate_fibonacci(n): Returns a list containing the first n terms of the Fibonacci sequence. Parameters: n (int): The number of terms in the Fibonacci sequence to generate. Returns: list: A list of the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: next_term = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_term) return fibonacci_sequence[:n]"},{"question":"You are given an input string consisting of digits and lowercase letters. Your task is to implement a function named `group_and_sort_string` that groups all digits and lowercase letters separately, sorts each group in ascending order, and then combines them such that all sorted digits come before sorted letters in the final output. **Requirements:** 1. The function should accept a single string as input. 2. The function should return a new string with all digits grouped, sorted, and placed before all letters grouped and sorted. **Function Signature:** ```python def group_and_sort_string(s: str) -> str: ``` **Example:** ```python result = group_and_sort_string(\\"d3b2a1c4e5\\") print(result) ``` **Expected Output:** ```plaintext \\"12345abcde\\" ``` Make sure to implement your function using appropriate sorting algorithms or Python built-in functions to achieve the desired result efficiently. The implementation should focus on clarity and correctness.","solution":"def group_and_sort_string(s: str) -> str: Groups digits and lowercase letters separately, sorts each group in ascending order, and combines them such that all sorted digits come before sorted letters. Params: s (str): input string consisting of digits and lowercase letters. Returns: str: new string with sorted digits followed by sorted letters. digits = sorted([char for char in s if char.isdigit()]) letters = sorted([char for char in s if char.isalpha()]) return \'\'.join(digits + letters)"},{"question":"You are required to write a function that processes temperature data from a given API and returns the average temperature over a specified number of days. The function will access the temperature data from a provided URL endpoint, calculate the average temperature over the specified days, and return the result. Function Signature: ```python def get_average_temperature(url: str, days: int, auth: Tuple[str, str], start_date: str, verbose: bool = False) -> float: pass ``` Parameters: - `url` (str): The URL endpoint to fetch the temperature data from. - `days` (int): The number of days over which to calculate the average temperature. - `auth` (Tuple[str, str]): A tuple containing a username and password for API authentication. - `start_date` (str): The start date in the format \'YYYY-MM-DD\'. - `verbose` (bool, default=False): If set to True, the function should print each day\'s temperature data fetched from the API. Returns: - `average_temp` (float): The average temperature over the specified number of days. The function should: 1. Construct the appropriate URL to fetch the temperature data. 2. Use `requests.get` to retrieve the temperature data from the constructed URL. 3. Parse the response assuming it contains temperature data as a list of daily temperatures. 4. Calculate the average temperature for the number of specified days. 5. Optionally print each day\'s temperature if the `verbose` parameter is set to True. Sample usage of the function may look like: ```python url = \\"https://api.weatherdata.com/temperature\\" days = 7 auth = (\\"user\\", \\"password\\") start_date = \\"2023-10-01\\" average_temp = get_average_temperature(url, days, auth, start_date) ```","solution":"import requests from typing import Tuple, List import datetime def get_average_temperature(url: str, days: int, auth: Tuple[str, str], start_date: str, verbose: bool = False) -> float: Fetches temperature data from the given URL and calculates the average temperature over the specified number of days. Parameters: - url: str : The API endpoint URL to fetch temperature data from. - days: int : Number of days over which to calculate the average temperature. - auth: Tuple[str, str] : Username and password for API authentication. - start_date: str : The start date in the format \'YYYY-MM-DD\'. - verbose: bool : If True, prints each day\'s temperature data. Returns: - average_temp: float : The average temperature over the specified number of days. temperatures = [] current_date = datetime.datetime.strptime(start_date, \\"%Y-%m-%d\\") for day in range(days): query_date = current_date + datetime.timedelta(days=day) formatted_date = query_date.strftime(\\"%Y-%m-%d\\") response = requests.get(url, auth=auth, params={\\"date\\": formatted_date}) if response.status_code == 200: daily_data = response.json() temp = daily_data[\\"temperature\\"] # Assume the API returns a dictionary with a \\"temperature\\" key temperatures.append(temp) if verbose: print(f\\"Date: {formatted_date}, Temperature: {temp}\\") else: raise ValueError(f\\"Failed to fetch data for date: {formatted_date}, Status Code: {response.status_code}\\") if not temperatures: raise ValueError(\\"No temperature data available to calculate average.\\") average_temp = sum(temperatures) / len(temperatures) return average_temp"},{"question":"You are required to develop a function that performs a recursive binary search on a sorted array. Unlike a traditional binary search, which returns the index of a found element, this variant should identify the first and last positions of a given target element, forming a range. Your implementation will define the function `recursive_binary_search_range(nums, target)`. The task must employ recursive logic and handle edge cases efficiently. The function should: 1. **Input**: - Accept a `nums` parameter as a sorted list of integers. - Accept a `target` parameter as an integer representing the element to find. 2. **Output**: - Return a list containing two integers representing the start and end indices of the target element in `nums`. - If the target is not found, return `[-1, -1]`. 3. **Process**: - Implement the search logic recursively: One to find the leftmost occurrence and another for the rightmost occurrence. - Develop two helper functions `find_left` and `find_right` within the main function. - Use base cases to stop recursion when low index exceeds high index. **Constraints**: - Ensure to handle edge cases such as an empty input array or a target element that does not exist in the list. - The input array `nums` is sorted in non-decreasing order. - Employ recursive logic rather than loops. You must include the recursive approach in the solution design.","solution":"def recursive_binary_search_range(nums, target): def find_left(nums, target, low, high): if low > high: return -1 mid = (low + high) // 2 if (mid == 0 or nums[mid-1] < target) and nums[mid] == target: return mid elif nums[mid] < target: return find_left(nums, target, mid + 1, high) else: return find_left(nums, target, low, mid - 1) def find_right(nums, target, low, high): if low > high: return -1 mid = (low + high) // 2 if (mid == len(nums) - 1 or nums[mid+1] > target) and nums[mid] == target: return mid elif nums[mid] > target: return find_right(nums, target, low, mid - 1) else: return find_right(nums, target, mid + 1, high) left = find_left(nums, target, 0, len(nums) - 1) right = find_right(nums, target, 0, len(nums) - 1) return [left, right]"},{"question":"You are asked to implement a function that simulates a simple banking system with multiple accounts. The system allows for basic operations like creating an account, depositing funds, withdrawing funds, and transferring money between accounts. The system should manage account balances, enforce a minimum balance of 100, and maintain a transaction history for each account. Write a function `banking_system(operations)` where `operations` is a list of operations to be performed on the banking system. Each operation is a dictionary with the following structure: ```python { \\"operation\\": \\"create\\" | \\"deposit\\" | \\"withdraw\\" | \\"transfer\\" | \\"history\\", \\"account_id\\": int, \\"amount\\": float, # Only for deposit and withdraw operations \\"source_account_id\\": int, # Only for transfer operation \\"target_account_id\\": int # Only for transfer operation } ``` Implement the following constraints: 1. The \\"create\\" operation initializes an account with a balance of 0 and returns a success message. 2. The \\"deposit\\" operation adds the specified amount to the account balance and returns the new balance. 3. The \\"withdraw\\" operation deducts the specified amount from the account balance if the resulting balance does not fall below 100; otherwise, it returns a failure message. 4. The \\"transfer\\" operation moves the specified amount from the source account to the target account if the source account\'s balance remains above the minimum balance. Both accounts\' balances should be returned after the transfer. 5. The \\"history\\" operation returns the transaction history for the specified account. Here’s an example of how the function might be structured: ```python def banking_system(operations): accounts = {} minimum_balance = 100 for operation in operations: if operation[\\"operation\\"] == \\"create\\": accounts[operation[\\"account_id\\"]] = {\\"balance\\": 0, \\"history\\": []} return f\\"Account {operation[\'account_id\']} created successfully.\\" elif operation[\\"operation\\"] == \\"deposit\\": account_id = operation[\\"account_id\\"] amount = operation[\\"amount\\"] if account_id in accounts: accounts[account_id][\\"balance\\"] += amount accounts[account_id][\\"history\\"].append(f\\"Deposited {amount}\\") return accounts[account_id][\\"balance\\"] else: return f\\"Account {account_id} does not exist.\\" elif operation[\\"operation\\"] == \\"withdraw\\": account_id = operation[\\"account_id\\"] amount = operation[\\"amount\\"] if account_id in accounts: if accounts[account_id][\\"balance\\"] - amount >= minimum_balance: accounts[account_id][\\"balance\\"] -= amount accounts[account_id][\\"history\\"].append(f\\"Withdrew {amount}\\") return accounts[account_id][\\"balance\\"] else: return f\\"Insufficient funds. Withdrawal would breach minimum balance.\\" else: return f\\"Account {account_id} does not exist.\\" elif operation[\\"operation\\"] == \\"transfer\\": source_account_id = operation[\\"source_account_id\\"] target_account_id = operation[\\"target_account_id\\"] amount = operation[\\"amount\\"] if source_account_id in accounts and target_account_id in accounts: if accounts[source_account_id][\\"balance\\"] - amount >= minimum_balance: accounts[source_account_id][\\"balance\\"] -= amount accounts[target_account_id][\\"balance\\"] += amount accounts[source_account_id][\\"history\\"].append(f\\"Transferred {amount} to {target_account_id}\\") accounts[target_account_id][\\"history\\"].append(f\\"Received {amount} from {source_account_id}\\") return (accounts[source_account_id][\\"balance\\"], accounts[target_account_id][\\"balance\\"]) else: return f\\"Insufficient funds. Transfer would breach minimum balance.\\" else: return f\\"One or both accounts do not exist.\\" elif operation[\\"operation\\"] == \\"history\\": account_id = operation[\\"account_id\\"] if account_id in accounts: return accounts[account_id][\\"history\\"] else: return f\\"Account {account_id} does not exist.\\" else: return \\"Invalid operation.\\" # Example usage: operations = [ {\\"operation\\": \\"create\\", \\"account_id\\": 1}, {\\"operation\\": \\"deposit\\", \\"account_id\\": 1, \\"amount\\": 500}, {\\"operation\\": \\"withdraw\\", \\"account_id\\": 1, \\"amount\\": 200}, {\\"operation\\": \\"transfer\\", \\"source_account_id\\": 1, \\"target_account_id\\": 2, \\"amount\\": 100}, {\\"operation\\": \\"history\\", \\"account_id\\": 1} ] print(banking_system(operations)) ```","solution":"def banking_system(operations): accounts = {} minimum_balance = 100 def create_account(account_id): accounts[account_id] = {\\"balance\\": 0, \\"history\\": []} return f\\"Account {account_id} created successfully.\\" def deposit(account_id, amount): if account_id in accounts: accounts[account_id][\\"balance\\"] += amount accounts[account_id][\\"history\\"].append(f\\"Deposited {amount}\\") return accounts[account_id][\\"balance\\"] else: return f\\"Account {account_id} does not exist.\\" def withdraw(account_id, amount): if account_id in accounts: if accounts[account_id][\\"balance\\"] - amount >= minimum_balance: accounts[account_id][\\"balance\\"] -= amount accounts[account_id][\\"history\\"].append(f\\"Withdrew {amount}\\") return accounts[account_id][\\"balance\\"] else: return f\\"Insufficient funds. Withdrawal would breach minimum balance.\\" else: return f\\"Account {account_id} does not exist.\\" def transfer(source_account_id, target_account_id, amount): if source_account_id in accounts and target_account_id in accounts: if accounts[source_account_id][\\"balance\\"] - amount >= minimum_balance: accounts[source_account_id][\\"balance\\"] -= amount accounts[target_account_id][\\"balance\\"] += amount accounts[source_account_id][\\"history\\"].append(f\\"Transferred {amount} to {target_account_id}\\") accounts[target_account_id][\\"history\\"].append(f\\"Received {amount} from {source_account_id}\\") return (accounts[source_account_id][\\"balance\\"], accounts[target_account_id][\\"balance\\"]) else: return f\\"Insufficient funds. Transfer would breach minimum balance.\\" else: return f\\"One or both accounts do not exist.\\" def get_history(account_id): if account_id in accounts: return accounts[account_id][\\"history\\"] else: return f\\"Account {account_id} does not exist.\\" results = [] for operation in operations: if operation[\\"operation\\"] == \\"create\\": result = create_account(operation[\\"account_id\\"]) elif operation[\\"operation\\"] == \\"deposit\\": result = deposit(operation[\\"account_id\\"], operation[\\"amount\\"]) elif operation[\\"operation\\"] == \\"withdraw\\": result = withdraw(operation[\\"account_id\\"], operation[\\"amount\\"]) elif operation[\\"operation\\"] == \\"transfer\\": result = transfer(operation[\\"source_account_id\\"], operation[\\"target_account_id\\"], operation[\\"amount\\"]) elif operation[\\"operation\\"] == \\"history\\": result = get_history(operation[\\"account_id\\"]) else: result = \\"Invalid operation.\\" results.append(result) return results"},{"question":"You are developing a Python program that simulates a basic calculator capable of performing simple arithmetic operations. Implement a function named `calculator()` that will: 1. Run continuously until the user decides to quit. 2. Prompt the user to enter an arithmetic operation in the form: `operand1 operator operand2` (e.g., `3 + 4`). 3. Parse the input and perform the operation, supporting addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). 4. Display the result of the operation. 5. Handle invalid inputs gracefully by printing an appropriate message and prompting the user to try again. 6. Provide an option for the user to quit the program. Ensure the function can handle unexpected user inputs, divide-by-zero errors for division, and maintain a user-friendly interaction loop. Here is the template of the required function for your reference: ```python def calculator(): while True: user_input = input(\\"Enter operation (or \'q\' to quit): \\") if user_input.lower() == \'q\': print(\\"Goodbye!\\") break try: operand1, operator, operand2 = user_input.split() operand1, operand2 = float(operand1), float(operand2) if operator == \'+\': result = operand1 + operand2 elif operator == \'-\': result = operand1 - operand2 elif operator == \'*\': result = operand1 * operand2 elif operator == \'/\': result = operand1 / operand2 else: raise ValueError(\\"Invalid operator\\") print(f\\"The result is: {result}\\") except ValueError as ve: print(f\\"Error: {ve}\\") except ZeroDivisionError: print(\\"Error: Division by zero is not allowed.\\") except Exception as e: print(f\\"Unexpected error: {e}\\") ``` Feel free to add additional error handling or functionality to enhance user experience if desired.","solution":"def calculator(): while True: user_input = input(\\"Enter operation (or \'q\' to quit): \\") if user_input.lower() == \'q\': print(\\"Goodbye!\\") break try: operand1, operator, operand2 = user_input.strip().split() operand1, operand2 = float(operand1), float(operand2) if operator == \'+\': result = operand1 + operand2 elif operator == \'-\': result = operand1 - operand2 elif operator == \'*\': result = operand1 * operand2 elif operator == \'/\': if operand2 == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") result = operand1 / operand2 else: raise ValueError(\\"Invalid operator\\") print(f\\"The result is: {result}\\") except ValueError as ve: print(f\\"Error: {ve}. Please enter a valid operation like \'3 + 2\'.\\") except ZeroDivisionError as zde: print(f\\"Error: {zde}\\") except Exception as e: print(f\\"Unexpected error: {e}\\")"},{"question":"Write a Python function that takes a list of integers and an integer n as inputs, and returns the smallest possible positive integer x such that the sum of x and exactly n distinct integers from the list is not present in the list. If n is greater than the number of distinct integers in the list, the function should raise a `ValueError`. The function should raise the exception for: `ValueError` if n is greater than the number of distinct integers in the list. The function should output with: int: The smallest positive integer x that satisfies the given condition. You should write self-contained code starting with: ``` def find_smallest_missing_sum(nums, n): ```","solution":"def find_smallest_missing_sum(nums, n): Returns the smallest positive integer x such that the sum of x and exactly n distinct integers from the list is not present in the list. Parameters: nums (list of int): The list of integers. n (int): The number of distinct integers. Returns: int: The smallest positive integer x that satisfies the condition. Raises: ValueError: If n is greater than the number of distinct integers in the list. nums_set = set(nums) if n > len(nums_set): raise ValueError(\\"n is greater than the number of distinct integers in the list\\") distinct_nums = list(nums_set) distinct_nums.sort() x = 1 while True: combinations_found = False for i in range(len(distinct_nums) - n + 1): for j in range(i + 1, len(distinct_nums) - n + 2): if sum(distinct_nums[i:j]) + x not in nums_set: combinations_found = True break if combinations_found: break if combinations_found: break x += 1 return x"},{"question":"You are required to write a Python function `compute_grade_statistics` that reads student grade data from a specified CSV file, processes it, and returns key statistics. The required statistics include the average grade, highest grade, lowest grade, and the standard deviation of the grades. The function should utilize the Pandas library for data manipulation and analysis. 1. **Function Signature**: ```python def compute_grade_statistics(file_path: str) -> dict: ``` - **Parameters**: - `file_path` (str): Path to the CSV file containing the student grades. - **Returns**: - `dict` containing the computed statistics with keys \'mean\', \'max\', \'min\', and \'std\'. 2. **Functionality**: - Load the CSV data file into a Pandas DataFrame. - Ensure that the DataFrame contains a column named \'Grade\' which holds the student grades. - Compute the mean, maximum, minimum, and standard deviation of the grades using appropriate Pandas functions. - Return the computed statistics in a dictionary format. 3. **Data Assumptions**: - The CSV file contains a column \'Grade\' where each entry is a numerical grade (integer or float). 4. **Important**: - Handle potential issues such as missing values in the \'Grade\' column appropriately. - Ensure that the CSV file path provided is valid and the file can be read correctly using Pandas. Below is an example call to your function: ```python grade_stats = compute_grade_statistics(r\\"C:path_to_filesstudent_grades.csv\\") # Example output: {\'mean\': 85.5, \'max\': 98, \'min\': 73, \'std\': 6.25} ```","solution":"import pandas as pd def compute_grade_statistics(file_path: str) -> dict: Computes key statistics from a CSV file containing student grades. Args: file_path (str): Path to the CSV file containing the student grades. Returns: dict: A dictionary containing the mean, max, min, and std of the grades. # Load the CSV file into a Pandas DataFrame df = pd.read_csv(file_path) # Check if the \'Grade\' column exists if \'Grade\' not in df.columns: raise ValueError(\\"The CSV file must contain a \'Grade\' column.\\") # Drop missing values in the \'Grade\' column grades = df[\'Grade\'].dropna() # Compute the statistics mean_grade = grades.mean() max_grade = grades.max() min_grade = grades.min() std_grade = grades.std() # Return the computed statistics in a dictionary return { \'mean\': mean_grade, \'max\': max_grade, \'min\': min_grade, \'std\': std_grade }"},{"question":"Create a function that takes a list of strings and returns a dictionary with the length of the words as keys and corresponding lists of words as values. The function should group the words by their lengths. If the input list is empty, return an empty dictionary. The function should output with: dict: A dictionary containing the word lengths and their corresponding lists of words. You should write self-contained code starting with: ``` def task_func(words): ```","solution":"def task_func(words): Takes a list of strings and returns a dictionary with the length of the words as keys and corresponding lists of words as values. :param words: List of strings. :return: Dictionary with lengths as keys and lists of words as values. result = {} for word in words: key = len(word) if key not in result: result[key] = [] result[key].append(word) return result"},{"question":"You are required to write a function using the `numpy` and `math` libraries to generate a 3x3 rotation matrix for rotating a vector in 3D space about the z-axis by a given angle. This operation is commonly used in computer graphics and robotics. The rotation matrix is a fundamental tool and should be computed to enable the transformation of vectors in 3D space. The function signature you need to implement is as follows: ```python def rotz(ang): Create a 3x3 numpy rotation matrix about the z axis. The three columns represent the new basis vectors in the global coordinate system of a coordinate system rotated by this matrix. Args: ang: angle for rotation in radians Returns: The 3D rotation matrix about the z axis ``` # Requirements: 1. **numpy.array**: Use this function to create and return the rotation matrix. 2. **math.cos**: Use this function to compute the cosine of the rotation angle. 3. **math.sin**: Use this function to compute the sine of the rotation angle. The 3D rotation matrix about the z-axis is defined as follows: [ R_z(theta) = begin{bmatrix} cos(theta) & -sin(theta) & 0 sin(theta) & cos(theta) & 0 0 & 0 & 1 end{bmatrix} ] # Example: If the input angle `ang` is π/6 radians, the function `rotz(π/6)` should return: [ begin{bmatrix} cos(frac{pi}{6}) & -sin(frac{pi}{6}) & 0 sin(frac{pi}{6}) & cos(frac{pi}{6}) & 0 0 & 0 & 1 end{bmatrix} ] # Note: - Ensure that you import the necessary libraries (`math` and `numpy`) in your function. - The angle provided will be in radians.","solution":"import numpy as np from math import cos, sin def rotz(ang): Create a 3x3 numpy rotation matrix about the z axis. The three columns represent the new basis vectors in the global coordinate system of a coordinate system rotated by this matrix. Args: ang: angle for rotation in radians Returns: The 3D rotation matrix about the z axis return np.array([ [cos(ang), -sin(ang), 0], [sin(ang), cos(ang), 0], [0, 0, 1] ])"},{"question":"You are given a list of events represented by pairs of strings where the first string of each pair is an event name and the second string is a timestamp in the format \\"YYYY-MM-DD\\". The task is to implement a function `group_events_by_month(events)` that groups the events by the month and year they occurred, and then sorts each group alphabetically by the event name. The function should return a dictionary where the keys are strings in the format \\"YYYY-MM\\" and the values are lists of event names sorted alphabetically. # Requirements: 1. **Input Parameters**: - `events` (List[Tuple[str, str]]): A list of tuples where each tuple contains: - An event name (string). - A timestamp (string) in the format \\"YYYY-MM-DD\\". 2. **Output**: - A dictionary where the keys are strings in the format \\"YYYY-MM\\" representing the year and month, and the values are lists of event names sorted alphabetically for that particular month. 3. **Function Signature**: ```python def group_events_by_month(events: List[Tuple[str, str]]) -> Dict[str, List[str]]: pass ``` # Example: ```python events = [ (\\"Event_A\\", \\"2023-03-21\\"), (\\"Event_B\\", \\"2023-03-15\\"), (\\"Event_C\\", \\"2023-04-09\\"), (\\"Event_D\\", \\"2023-03-11\\"), (\\"Event_E\\", \\"2022-12-25\\") ] print(group_events_by_month(events)) ``` # Expected Output: ```python { \\"2023-03\\": [\\"Event_A\\", \\"Event_B\\", \\"Event_D\\"], \\"2023-04\\": [\\"Event_C\\"], \\"2022-12\\": [\\"Event_E\\"] } ``` # Constraints: - The input list of events could be empty. - Event names within a particular month should be listed in alphabetical order, while the monthly groups themselves can be listed in any order in the dictionary. - The events list could contain more than one event on the same day.","solution":"def group_events_by_month(events): from collections import defaultdict # Dictionary to hold the grouped events by \'YYYY-MM\' grouped_events = defaultdict(list) for event_name, timestamp in events: # Extract \'YYYY-MM\' part from timestamp year_month = timestamp[:7] # Append the event to the appropriate list in the dictionary grouped_events[year_month].append(event_name) # Sort the events in each \'YYYY-MM\' group alphabetically for key in grouped_events: grouped_events[key].sort() return dict(grouped_events)"},{"question":"You are required to implement a function that takes a string consisting of words separated by spaces and returns a new string such that each word is reversed, but the order of the words remains the same. The function should also preserve multiple spaces between the words as in the original string. Your task is to write a function named `reverse_words_preserving_spaces(sentence)` that processes a string `sentence` according to the described rules. Example: ```python sentence = \\"Hello world this is a test\\" ``` Given the above `sentence`, the function should return: ``` \\"olleH dlrow siht si a tset\\" ``` # Requirements: - You must use Python\'s built-in string manipulation methods. - Preserve multiple spaces between words exactly as they appear in the input string. # Instructions: 1. Define the function `reverse_words_preserving_spaces(sentence)`. 2. Split the `sentence` into words and spaces while preserving the separating spaces. 3. Reverse each word while preserving the spaces in their original positions. 4. Join the parts back together to form the final string. # Constraints: - The input string `sentence` will only contain alphanumeric characters and spaces. Signature: ```python def reverse_words_preserving_spaces(sentence: str) -> str: ``` # Example: ```python sentence = \\"Python programming is fun\\" ``` Output: ``` \\"nohtyP gnimmargorp si nuf\\" ```","solution":"def reverse_words_preserving_spaces(sentence: str) -> str: Returns a new string with each word reversed while preserving the original spaces and their positions. # Split the sentence into a list of words and spaces while preserving the spaces. import re parts = re.split(r\'(s+)\', sentence) # Reverse the letters of each word in the list. reversed_parts = [part[::-1] if not part.isspace() else part for part in parts] # Join the list back into a single string. return \'\'.join(reversed_parts)"},{"question":"You need to write a function that reads a text file containing a list of names, one per line, and outputs another text file with the names sorted alphabetically. This exercise will help you practice file I/O operations and basic sorting techniques in Python. The function you will create is named `sort_names`. It should perform the following: 1. Read a given text file containing names. 2. Sort the names alphabetically. 3. Write the sorted names to a new text file. Here are the details you need to follow: - **Function name**: `sort_names` - **Parameters**: - `input_filename` (str): The path to the input text file. - `output_filename` (str): The path to the output text file. Write the function `sort_names` to accomplish this task, ensuring proper file handling to avoid unnecessary errors or data loss. **Example usage**: ```python sort_names(\'names.txt\', \'sorted_names.txt\') ``` This reads \'names.txt\', sorts the names alphabetically, and writes the sorted names to \'sorted_names.txt\'.","solution":"def sort_names(input_filename, output_filename): Reads a text file containing names, sorts the names alphabetically, and writes the sorted names to a new text file. Parameters: input_filename (str): The path to the input text file. output_filename (str): The path to the output text file. # Step 1: Read names from the input file with open(input_filename, \'r\') as input_file: names = input_file.readlines() # Step 2: Strip whitespace and sort the names names = [name.strip() for name in names] names.sort() # Step 3: Write the sorted names to the output file with open(output_filename, \'w\') as output_file: for name in names: output_file.write(name + \'n\')"},{"question":"You are given a dataset representing the number of hours students have studied (`hours_studied`) and their corresponding scores (`scores`) on a test. Your task is to visualize this data using the `matplotlib` library. Specifically, you need to create a function `plot_student_performance()` that accomplishes the following: 1. Parses the data to obtain the `hours_studied` and `scores` arrays. 2. Uses matplotlib to plot this data as green triangles. 3. Adds labels to the x-axis (\\"Hours Studied\\") and y-axis (\\"Test Score\\"). 4. Plots a red solid line from (0, 50) to (5, 90) to represent a trend line. 5. Displays the plot. The code structure including the function `plot_student_performance()` is provided below: ```python def plot_student_performance(): # Step 1: Parse the data hours_studied, scores = parse_data() # Assume parse_data() returns two lists: [hours_studied], [scores] # Step 2: Create the plot plt.plot(hours_studied, scores, \'g^\') # \'g^\': green triangles # Step 3: Add axis labels plt.xlabel(\'Hours Studied\') plt.ylabel(\'Test Score\') # Step 4: Add trend line plt.plot([0, 5], [50, 90], \'r-\', lw=2) # \'r-\': red solid line # Step 5: Display the plot plt.show() ``` The function `parse_data()` is mock implemented to return hypothetical data for this problem: ```python def parse_data(): return [1, 2, 3, 4, 5], [55, 60, 65, 70, 90] ``` **Task**: Complete the function `plot_student_performance()` using the `matplotlib` library as described above.","solution":"import matplotlib.pyplot as plt def parse_data(): return [1, 2, 3, 4, 5], [55, 60, 65, 70, 90] def plot_student_performance(): # Step 1: Parse the data hours_studied, scores = parse_data() # Assume parse_data() returns two lists: [hours_studied], [scores] # Step 2: Create the plot plt.plot(hours_studied, scores, \'g^\') # \'g^\': green triangles # Step 3: Add axis labels plt.xlabel(\'Hours Studied\') plt.ylabel(\'Test Score\') # Step 4: Add trend line plt.plot([0, 5], [50, 90], \'r-\', lw=2) # \'r-\': red solid line with line width 2 # Step 5: Display the plot plt.show()"},{"question":"Suppose you are working on a robotics project, and one of the tasks is to navigate a robot through a grid-based obstacle course. Each cell in the grid is either passable or impassable. The robot can move one step at a time, up, down, left, or right, but cannot move diagonally. Your goal is to determine if the robot can reach the target cell starting from the initial cell. You are required to implement a function `can_reach_target(grid, start, target)` that checks if the robot can reach the target cell from the start cell. You should use an algorithm like Breadth-First Search (BFS) to explore the grid. The function should use the following parameters: - `grid`: A 2D list of 0s and 1s where 0 represents a passable cell and 1 represents an impassable cell. - `start`: A tuple `(x, y)` representing the starting cell. - `target`: A tuple `(x, y)` representing the target cell. The function should return `True` if the robot can reach the target cell, otherwise `False`. **Function Signature:** ```python def can_reach_target(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> bool: pass ``` **Example:** Suppose `grid = [ [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0] ]`, `start = (0, 0)` and `target = (4, 4)`, then `can_reach_target(grid, (0, 0), (4, 4))` should return `True` as there is a path from the start to the target cell. **Explanation:** 1. The robot starts at the top left corner. 2. It navigates through the passable cells avoiding the obstacles (cells with `1`) to reach the bottom right corner. The valid path could be (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (3,4) -> (4,4).","solution":"from collections import deque from typing import List, Tuple def can_reach_target(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> bool: if not grid or not grid[0] or grid[start[0]][start[1]] == 1 or grid[target[0]][target[1]] == 1: return False rows, cols = len(grid), len(grid[0]) queue = deque([start]) visited = set(start) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right while queue: current = queue.popleft() if current == target: return True for d in directions: new_row, new_col = current[0] + d[0], current[1] + d[1] if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: queue.append((new_row, new_col)) visited.add((new_row, new_col)) return False"},{"question":"In this task, you are required to define a Python function named `compress_and_decompress_string` that demonstrates the use of run-length encoding (RLE) for compressing a string and subsequently decompressing it. Your task involves implementing both the compression and decompression algorithms. You are provided with the following input parameters: 1. `input_string`: A string consisting of uppercase alphabetic characters (A-Z) that needs to be compressed and then decompressed. Your task is to: 1. Implement a function to compress the `input_string` using run-length encoding. In run-length encoding, consecutive occurrences of the same character are replaced by the character followed by the number of occurrences. 2. Implement a function to decompress a run-length encoded string back to its original form. 3. The `compress_and_decompress_string` function should first compress the `input_string` and then decompress the compressed string back to its original form. 4. Return a tuple containing the compressed string and the decompressed string in that order. Example function signature: ```python def compress_and_decompress_string(input_string): # Your code here ``` **Example:** ```python result = compress_and_decompress_string(\\"AAABBBCCDAA\\") print(result) # Output: (\'A3B3C2D1A2\', \'AAABBBCCDAA\') ``` Ensure that the compression and decompression processes are correctly implemented and the decompressed string matches the original input string.","solution":"def compress_and_decompress_string(input_string): def compress(string): if not string: return \\"\\" compressed_str = [] current_char = string[0] count = 1 for char in string[1:]: if char == current_char: count += 1 else: compressed_str.append(current_char + str(count)) current_char = char count = 1 compressed_str.append(current_char + str(count)) return \'\'.join(compressed_str) def decompress(compressed_string): if not compressed_string: return \\"\\" decompressed_str = [] char = \'\' count = \'\' for ch in compressed_string: if ch.isalpha(): if char and count: decompressed_str.append(char * int(count)) char = ch count = \'\' else: count += ch if char and count: decompressed_str.append(char * int(count)) return \'\'.join(decompressed_str) compressed = compress(input_string) decompressed = decompress(compressed) return (compressed, decompressed)"},{"question":"**A concert hall plans to implement a novel ticket booking system for its upcoming event. You are required to design a function that will allocate seats to participants based on their preferences. The concert hall layout consists of a certain number of rows with a fixed number of seats in each row. Participants can indicate their preference for a seat in a specific row and position. The system should handle booking requests and return updated seating arrangements. # Function Requirements 1. **Function Name**: `book_seats` 2. **Inputs**: - `rows` (integer): Number of rows in the concert hall. - `seats_per_row` (integer): Number of seats in each row. - `preferences` (list of tuples): Each tuple contains three elements - - `participant_name` (string): The name of the participant. - `preferred_row` (integer): The row number where the participant prefers to sit (1-based index). - `preferred_seat` (integer): The seat number in the specified row where the participant prefers to sit (1-based index). 3. **Outputs**: - Returns a dictionary with row numbers as keys and lists of strings as values. Each list contains the names of participants seated in that row. If a seat is not yet booked, it should contain an empty string. # Example Usage ```python result = book_seats(3, 5, [(\\"Alice\\", 1, 3), (\\"Bob\\", 2, 1), (\\"Charlie\\", 1, 3)]) # Expected result: # {1: [\'\', \'\', \'Charlie\', \'\', \'\'], 2: [\'Bob\', \'\', \'\', \'\', \'\'], 3: [\'\', \'\', \'\', \'\', \'\']} ``` # Constraints - If a requested seat is already taken, the next available seat in the same row should be allocated to the participant. - If the row is fully booked, the participant should not be seated. - Ensure the seating arrangement is updated for every booking request in the order they appear in the preferences list. - Optimize the function for clarity and maintainability. # Additional Information - Assume input values for rows and seats_per_row are always positive integers greater than zero. - Each participant will only appear once in the preferences list. - Rows and seats are numbered starting from 1 for user-friendly input, but internal processing can use zero-based indexing if preferred.","solution":"def book_seats(rows, seats_per_row, preferences): # Initialize seating arrangement seating = {row: [\'\' for _ in range(seats_per_row)] for row in range(1, rows + 1)} for participant_name, preferred_row, preferred_seat in preferences: row = seating.get(preferred_row) if not row: continue seat_index = preferred_seat - 1 # If preferred seat is taken, find the next available seat while seat_index < len(row) and row[seat_index]: seat_index += 1 # If there\'s an available seat in the specified row, book it if seat_index < len(row): row[seat_index] = participant_name return seating"},{"question":"You are required to implement a function to solve a problem of finding the two largest distinct elements in an array of integers. The objective is to return these two largest numbers as a sorted tuple (second largest, largest). If there are not enough distinct elements in the array, the function should return `None`. **Function Name**: `find_two_largest` **Parameters**: 1. `nums` (list): A list of integers. **Functionality**: - The function should iterate through the list and identify the two largest distinct numbers. - If the array contains fewer than two distinct elements, the function should return `None`. - Return the two numbers in ascending order as a tuple (second largest, largest). **Requirements**: - Handle edge cases where the input list is empty or contains less than two distinct numbers. - The implementation should be efficient, with a time complexity of O(n). **Constraints**: - The input list may contain both positive and negative integers as well as duplicates. - The input list `nums` can be empty or contain up to 10^6 integers. **Example**: ```python # Example 1 nums = [3, 1, 4, 1, 5, 9, 2, 6, 5] result = find_two_largest(nums) # Expected Output: (6, 9) # Example 2 nums = [1, 1, 1] result = find_two_largest(nums) # Expected Output: None # Example 3 nums = [7] result = find_two_largest(nums) # Expected Output: None # Example 4 nums = [] result = find_two_largest(nums) # Expected Output: None ``` Implement the function `find_two_largest` as described above to find and return the two largest distinct numbers in the input array.","solution":"def find_two_largest(nums): if len(nums) < 2: return None # Use a set to find distinct elements distinct_nums = list(set(nums)) if len(distinct_nums) < 2: return None # Sort and return the last two elements distinct_nums.sort() return (distinct_nums[-2], distinct_nums[-1])"},{"question":"You are required to write a function that processes transaction logs and calculates the final account balance for a group of customers. Each transaction log entry contains a customer ID, transaction type (either \'credit\' or \'debit\'), and the transaction amount. The transaction logs are provided as a list of strings in the following format: \\"customer_id,transaction_type,amount\\". Your function should read the transaction logs, maintain a running balance for each customer, and return a dictionary mapping each customer ID to their final balance. Assume all transaction amounts are valid floating-point numbers. Your function should be named `calculate_balances` and should accept a single parameter, `transaction_logs`, which is a list of strings representing the transaction logs. Here\'s the specific requirement: - **Handle both \'credit\' and \'debit\' transactions appropriately.** **Function Signature:** ```python def calculate_balances(transaction_logs: list) -> dict: ``` **Example:** ```python logs = [ \\"123,credit,100.00\\", \\"124,credit,150.00\\", \\"123,debit,50.00\\", \\"125,credit,200.00\\", \\"124,debit,50.00\\" ] result = calculate_balances(logs) print(result) # Example output: {\'123\': 50.0, \'124\': 100.0, \'125\': 200.0} ``` The function should parse each log entry, update the balances accordingly, and return the final account balances for all customers.","solution":"def calculate_balances(transaction_logs): Calculates the final account balance for each customer based on transaction logs. Args: transaction_logs (list) : List of strings representing the transaction logs. Returns: dict : A dictionary mapping each customer ID to their final balance. balances = {} for log in transaction_logs: customer_id, transaction_type, amount = log.split(\',\') amount = float(amount) if customer_id not in balances: balances[customer_id] = 0.0 if transaction_type == \'credit\': balances[customer_id] += amount elif transaction_type == \'debit\': balances[customer_id] -= amount return balances"},{"question":"**Context:** In natural language processing, it\'s common to compute the term frequency (TF) of words in a document. The term frequency is a measure of how frequently a word appears in a document. Given a list of documents, your task is to compute the term frequency for each document and return the results as a list of dictionaries, where each dictionary represents the term frequency of words in a single document. **Objective:** Create a function named `computeTF` which accepts one parameter: 1. `documents`: A list of strings, where each string represents a document. The function should: 1. Tokenize each document into words. You can assume words are separated by spaces. 2. Compute the term frequency for each word in a document. 3. Return a list of dictionaries, where each dictionary contains the term frequencies for a document. The keys of the dictionary should be the words and the values should be their respective term frequencies. **Function Signature:** ```python def computeTF(documents: list) -> list: # Your implementation here ``` # Example: ```python # Sample data documents = [ \\"this is a sample document\\", \\"this document is a sample\\" ] tf_list = computeTF(documents) print(tf_list) # Output should be: # [{\'this\': 1, \'is\': 1, \'a\': 1, \'sample\': 1, \'document\': 1}, # {\'this\': 1, \'document\': 1, \'is\': 1, \'a\': 1, \'sample\': 1}] ``` # Constraints: 1. Each document in `documents` contains at most 1000 words. 2. Words are case-sensitive (e.g., \\"Sample\\" and \\"sample\\" are considered different words). 3. Punctuation can be ignored, and words are separated by spaces. **Note:** Ensure your implementation correctly processes each document independently and returns the term frequencies appropriately.","solution":"def computeTF(documents: list) -> list: Compute the term frequency for each document in the given list of documents. Parameters: documents (list): A list of strings, where each string represents a document. Returns: list: A list of dictionaries, where each dictionary contains the term frequencies for a document. tf_list = [] for doc in documents: words = doc.split() term_freq_dict = {} for word in words: if word in term_freq_dict: term_freq_dict[word] += 1 else: term_freq_dict[word] = 1 tf_list.append(term_freq_dict) return tf_list"},{"question":"You are tasked with implementing a simple URL shortener service. Write a function named `url_shortener` to generate unique short URLs and decode them back to the original long URLs. Here is a detailed breakdown of the requirements: 1. Write a class named `URLShortener` with the following methods: - `encode(long_url)`: This method should: - Take a string `long_url` representing the original URL. - Generate a unique short URL for the `long_url` (you can use a hash function or a counter to ensure uniqueness). - Store a mapping of the short URL to the `long_url`. - Return the short URL. - `decode(short_url)`: This method should: - Take a string `short_url` representing the short version of the URL. - Retrieve and return the original `long_url` mapped to the given `short_url`. - If the `short_url` does not exist in the mapping, return an appropriate message indicating that the URL is not found. 2. Ensure that the encoding and decoding methods provide a unique and reversible mapping between long URLs and short URLs. 3. Write unit tests for your `URLShortener` class to verify that the `encode` and `decode` methods work correctly. Here\'s a base template to start with: ```python class URLShortener: def __init__(self): self.url_mapping = {} self.counter = 0 def encode(self, long_url): # Implement the logic to generate a short URL pass def decode(self, short_url): # Implement the logic to retrieve the original long URL using the short URL pass # Example usage: shortener = URLShortener() short_url = shortener.encode(\'https://www.example.com\') print(f\'Short URL: {short_url}\') original_url = shortener.decode(short_url) print(f\'Original URL: {original_url}\') # Example unit test def test_url_shortener(): shortener = URLShortener() url = \'https://www.example.com\' short_url = shortener.encode(url) assert shortener.decode(short_url) == url print(\\"Test passed!\\") test_url_shortener() ``` Implement the necessary logic and ensure your solution is functional and well-tested.","solution":"class URLShortener: def __init__(self): self.url_mapping = {} self.short_to_long = {} self.counter = 0 self.base_url = \\"http://short.url/\\" def encode(self, long_url): self.counter += 1 short_url = self.base_url + str(self.counter) self.url_mapping[long_url] = short_url self.short_to_long[short_url] = long_url return short_url def decode(self, short_url): if short_url in self.short_to_long: return self.short_to_long[short_url] else: return \\"URL not found\\" # Example usage: # shortener = URLShortener() # short_url = shortener.encode(\'https://www.example.com\') # original_url = shortener.decode(short_url) # print(f\'Short URL: {short_url}\') # print(f\'Original URL: {original_url}\')"},{"question":"In this problem, you\'ll be using Python to manipulate strings and perform basic text analysis. You are required to write a function named `longest_word` that takes a single parameter: 1. `sentence`: A string representing a single sentence. The function should return the longest word in the given sentence. If there are multiple words with the same maximum length, return the first one that appears. Words are separated by spaces in the sentence. **Example:** ```python longest_word(\\"The quick brown fox jumps over the lazy dog\\") ``` This should return `\'jumps\'` as it is the first word with the greatest length (5 characters). **Requirements:** - Ignore punctuation (words contain only alphabetic characters). - The input sentence will contain at least one word. - Words are separated by a single space, and the sentence does not start or end with a space.","solution":"def longest_word(sentence): Returns the longest word in the given sentence. If there are multiple words with the same maximum length, returns the first one that appears. words = sentence.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"You are tasked with developing a small Python function to generate a \\"number guessing game\\". In this game, a player has to guess a randomly generated integer between 1 and 100. The game should provide feedback for each guess, informing the player whether the guess was too high or too low, and continue until the correct number is guessed. The game should also count the number of attempts taken by the player to guess the number correctly. You need to create a function called `number_guessing_game()`, which will: 1. Generate a random integer between 1 and 100 and store it as the target number. 2. Prompt the player to input their guess. 3. Provide feedback indicating if the guess is too high, too low, or correct. 4. If the guess is correct, print a congratulatory message along with the number of attempts taken and end the game. 5. If the guess is incorrect, repeat steps 2-4 until the correct guess is made. Use the following provided APIs: - `random.randint(a, b)`: Generates a random integer between `a` and `b` (inclusive). - `input(prompt)`: Prompts the user to input a value. - `print(message)`: Outputs a message to the screen. Create the `number_guessing_game` function to handle the logic described above.","solution":"import random def number_guessing_game(): A number guessing game that generates a random integer between 1 and 100. The player has to guess the number, and the game provides feedback for each guess. It continues until the correct number is guessed. target_number = random.randint(1, 100) attempts = 0 print(\\"Welcome to the Number Guessing Game!\\") print(\\"I have selected a random number between 1 and 100.\\") while True: guess = int(input(\\"Please enter your guess: \\")) attempts += 1 if guess < target_number: print(\\"Your guess is too low.\\") elif guess > target_number: print(\\"Your guess is too high.\\") else: print(f\\"Congratulations! You\'ve guessed the correct number {target_number} in {attempts} attempts.\\") break"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Use the Sieve of Eratosthenes algorithm to identify the prime numbers in the given list. The function should output: list: A list containing only the prime integers from the input list. You should write self-contained code starting with: ``` def sieve_primes(int_list): ```","solution":"def sieve_primes(int_list): Returns a list of prime numbers from the input list using the Sieve of Eratosthenes algorithm. if not int_list: return [] max_num = max(int_list) # Find the maximum number in the list sieve = [True] * (max_num + 1) # Initialize the sieve sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(max_num**0.5) + 1): if sieve[start]: for multiple in range(start*start, max_num + 1, start): sieve[multiple] = False return [num for num in int_list if sieve[num]]"},{"question":"In this problem, you are tasked with creating a function named `replace_values_with_square` that takes in a NumPy array and replaces each value in the array with its square, but only if the value is positive. If the value is negative or zero, it should remain unchanged. This problem requires proficiency with NumPy\'s array operations and conditional logic. # Requirements: - **Function Name:** `replace_values_with_square` - **Parameters:** - `arr` (a NumPy array): This is the input array which may contain positive, negative numbers, and zero. - **Output:** The modified NumPy array where each positive value is replaced by its square. # Example: ```python import numpy as np arr = np.array([1, -2, 3, 0, -5, 6]) result = replace_values_with_square(arr) # Output: array([ 1, -2, 9, 0, -5, 36]) ``` In this example, only the positive numbers (`1`, `3`, and `6`) are squared, resulting in `1`, `9`, and `36` respectively, while negative numbers and zero remain unchanged. Ensure the use of efficient array operations inherent in the NumPy library to perform this task.","solution":"import numpy as np def replace_values_with_square(arr): Replaces each positive value in the NumPy array with its square. Negative values and zero are left unchanged. Parameters: arr (numpy.ndarray): Input array containing the values. Returns: numpy.ndarray: Modified array with positive values squared. result = np.where(arr > 0, arr**2, arr) return result"},{"question":"Design a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. You should implement a helper function to check if a number is prime. The function should raise a ValueError if the input is not a list of integers. The function should output: List: A new list containing only the prime numbers from the input list. You should write self-contained code starting with: ``` def task_func(nums): ```","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # No other even number can be prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def task_func(nums): Returns a list of prime numbers from the input list of integers. Raises a ValueError if the input is not a list of integers. if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): raise ValueError(\\"Input must be a list of integers\\") return [num for num in nums if is_prime(num)]"},{"question":"You are required to write a function named `group_students_by_subject(students)`. This function takes a list of dictionaries which contain student names and their favorite subjects and groups the students by their favorite subjects. **Function Prototype:** ```python def group_students_by_subject(students: list) -> dict: ``` # Parameters: - **students (list):** A list where each element is a dictionary with the keys: - \\"name\\" (str): the student\'s name. - \\"subject\\" (str): the student\'s favorite subject. # Requirements: 1. Group students by their favorite subjects. 2. Return a dictionary where each key is a subject and the corresponding value is a list of names of students who have that subject as their favorite. 3. The resulting dictionary should have subjects as keys in alphabetical order. # Assumptions: - Every student has exactly one favorite subject. - There are no duplicate student names in the list. # Example: Consider the following input: ```python students = [ {\\"name\\": \\"Alice\\", \\"subject\\": \\"Math\\"}, {\\"name\\": \\"Bob\\", \\"subject\\": \\"Science\\"}, {\\"name\\": \\"Carol\\", \\"subject\\": \\"Math\\"}, {\\"name\\": \\"Dave\\", \\"subject\\": \\"History\\"} ] ``` The function should return: ```python { \\"History\\": [\\"Dave\\"], \\"Math\\": [\\"Alice\\", \\"Carol\\"], \\"Science\\": [\\"Bob\\"] } ```","solution":"def group_students_by_subject(students: list) -> dict: Groups students by their favorite subjects. Parameters: students (list): A list where each element is a dictionary with the keys: - \\"name\\" (str): the student\'s name. - \\"subject\\" (str): the student\'s favorite subject. Returns: dict: A dictionary where each key is a subject and the corresponding value is a list of names of students who have that subject as their favorite. from collections import defaultdict subject_dict = defaultdict(list) for student in students: subject_dict[student[\\"subject\\"]].append(student[\\"name\\"]) # Convert defaultdict to a regular dict and sort by keys return dict(sorted(subject_dict.items()))"},{"question":"You are tasked with creating a function that implements the Dijkstra\'s algorithm using the `heapq` library for priority queue operations. The function should find the shortest path from a source node to all other nodes in a graph represented as an adjacency list. # Requirements: 1. **Function Name:** `dijkstra` 2. **Input:** - An integer `n` representing the number of nodes in the graph. - A list of tuples `edges` where each tuple `(u, v, w)` represents an edge from node `u` to node `v` with weight `w`. - An integer `src` representing the source node. 3. **Output:** A list of integers where the value at the ith index represents the shortest distance from the source node to node `i`. 4. **Constraints:** - Use the `heapq` library to manage the priority queue. - Assume all nodes are numbered from 0 to n-1. - If a node is not reachable from the source, its distance should be `float(\'inf\')`. - The graph can have up to 1000 nodes and 10,000 edges. # Description: - Parse the input `edges` to construct an adjacency list representation of the graph. - Initialize a priority queue to manage nodes being explored based on their current shortest distance. - Implement the main loop of Dijkstra\'s algorithm to update the shortest path estimates. - Return the list of shortest distances. Your task is to complete the implementation of `dijkstra` so that it correctly computes and returns the shortest path from the source node to all other nodes in the given graph.","solution":"import heapq def dijkstra(n, edges, src): Implements Dijkstra\'s algorithm to find the shortest path from source node to all other nodes in the graph. Parameters: - n (int): Number of nodes in the graph. - edges (list of tuples): List of edges where each tuple represents (u, v, w) meaning there\'s an edge from u to v with weight w. - src (int): The source node. Returns: - list: Shortest distance from the source node to each node. # Build the adjacency list adj_list = {i: [] for i in range(n)} for u, v, w in edges: adj_list[u].append((v, w)) adj_list[v].append((u, w)) # if the graph is undirected; remove if directed # Initialize distances and priority queue dist = [float(\'inf\')] * n dist[src] = 0 priority_queue = [(0, src)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in adj_list[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist"},{"question":"You are required to write a function named `find_palindromes` that identifies all palindromic words in a sentence. The function should: 1. Take a single argument, `sentence`, which is a string containing a sequence of words separated by spaces. 2. Split the sentence into individual words. 3. Check each word to determine if it reads the same backward as forward (a palindrome). 4. Collect all palindromic words in a list, ensuring each word is case-insensitive for the palindrome check. 5. Return the list of palindromic words. A palindromic word reads the same sequence of letters backward as it does forward, disregarding case. **Instruction Summary:** - Split the sentence into words. - Check each word for being a palindrome. - Return a list containing all palindromic words. **Example:** Suppose the input sentence is: ``` \\"A man a plan a canal Panama Madam Eve lived\\" ``` Calling `find_palindromes(\\"A man a plan a canal Panama Madam Eve lived\\")` should return: ```python [\'A\', \'a\', \'a\', \'a\', \'Madam\', \'Eve\'] ```","solution":"def find_palindromes(sentence): Finds and returns all palindromic words in a given sentence. A palindromic word reads the same backward as forward, disregarding case. Parameters: - sentence (str): A string containing a sequence of words separated by spaces. Returns: - list: A list of palindromic words found in the sentence. words = sentence.split() palindromes = [] for word in words: # Check if the word is a palindrome by comparing it to its reverse, case-insensitively if word.lower() == word[::-1].lower(): palindromes.append(word) return palindromes"},{"question":"You are required to write a function in Python that computes the greatest common divisor (GCD) of an array of integers. The function should be named `find_gcd` and should accept one parameter: - `array`: A list of integers for which the GCD needs to be calculated. The function should: 1. Handle an empty list by returning 0. 2. Handle lists containing only one integer by returning that integer. 3. Use the Euclidean algorithm to compute the GCD for a list of integers. # Constraints: - The integers in the list can be positive or negative but the output should always be a positive integer. - The input list can contain up to 100,000 integers, and each integer can be in the range of [-10^9, 10^9]. The math library documentation indicates: - `math.gcd(a, b)`: Returns the greatest common divisor of the integers `a` and `b`. **Function Signature:** ```python def find_gcd(array): ``` # Examples: ```python array1 = [10, 20, 30, 50] print(find_gcd(array1)) # Output: 10 array2 = [-4, 8, 16] print(find_gcd(array2)) # Output: 4 array3 = [7] print(find_gcd(array3)) # Output: 7 array4 = [] print(find_gcd(array4)) # Output: 0 ``` # Requirements: - Use the `math.gcd` function to compute the GCD of two integers. - Implement the Euclidean algorithm to generalize the GCD for multiple integers.","solution":"import math from functools import reduce def find_gcd(array): Returns the greatest common divisor (GCD) of an array of integers. if not array: return 0 return abs(reduce(math.gcd, array))"},{"question":"You are asked to implement a function `process_bank_transactions(transactions, initial_balance)` to compute the final bank balance after processing a series of transactions. Here are the requirements for the function: 1. **Function Name**: `process_bank_transactions` 2. **Arguments**: The function should take two arguments: - `transactions`: A list of dictionaries where each dictionary represents a transaction with the following keys: - `\'type\'`: A string that can either be `\'deposit\'` or `\'withdraw\'`. - `\'amount\'`: A float representing the amount of money to be deposited or withdrawn. - `initial_balance`: A float representing the initial amount of money in the bank account. 3. **Behavior**: - Iterate through each transaction in the `transactions` list. - If the transaction type is `\'deposit\'`, add the transaction amount to the balance. - If the transaction type is `\'withdraw\'`, subtract the transaction amount from the balance. - If a withdrawal would result in a negative balance, log a message using the `print()` function in the format: \\"Insufficient funds for withdrawal of X\\" where X is the amount attempted to be withdrawn, and do not process this transaction. 4. **Return Value**: The final balance after all the transactions have been processed. 5. **Example**: ```python transactions = [ {\'type\': \'deposit\', \'amount\': 100.0}, {\'type\': \'withdraw\', \'amount\': 50.0}, {\'type\': \'withdraw\', \'amount\': 60.0}, {\'type\': \'deposit\', \'amount\': 20.0} ] initial_balance = 50.0 result = process_bank_transactions(transactions, initial_balance) print(result) # Output should be 120.0 ``` **Note**: The function should handle the transactions in the order they are listed in the `transactions` list.","solution":"def process_bank_transactions(transactions, initial_balance): Computes the final bank balance after processing a series of transactions. Parameters: transactions (list): A list of transaction dictionaries. initial_balance (float): The initial balance of the bank account. Returns: float: The final balance after processing all transactions. balance = initial_balance for transaction in transactions: transaction_type = transaction[\'type\'] amount = transaction[\'amount\'] if transaction_type == \'deposit\': balance += amount elif transaction_type == \'withdraw\': if balance >= amount: balance -= amount else: print(f\\"Insufficient funds for withdrawal of {amount}\\") return balance"},{"question":"You are required to implement a function that evaluates the potential energy of a molecular system and identifies the atom with the highest potential energy. The function needs to make use of the libraries `math.sqrt` and `operator.itemgetter`. Function Description Your function, `findHighestEnergyAtom`, will take one argument: 1. `atoms`: a list of tuples, where each tuple contains three elements - the x, y, and z coordinates of an atom. Function Requirements The behavior of the function should be described as follows: 1. Calculate the potential energy of each atom using the formula `E = sqrt(x^2 + y^2 + z^2)`, where `x`, `y`, and `z` are the coordinates of the atom. 2. Track the potential energy of each atom in a list of tuples, where each tuple contains the atom (as a tuple of coordinates) and its computed energy. 3. Sort this list of tuples by the potential energy in descending order using `operator.itemgetter(1)`. 4. Return the first element of the sorted list, which corresponds to the atom with the highest potential energy. # Signature ```python def findHighestEnergyAtom(atoms): pass ``` # Example Usage ```python atoms = [(2, 3, 6), (1, 1, 1), (5, 5, 5), (10, 1, 1)] result = findHighestEnergyAtom(atoms) print(result) # Expected: ((2, 3, 6), 7.0) ``` You should use the documentation available for `math.sqrt` and `operator.itemgetter` while implementing this function.","solution":"import math import operator def findHighestEnergyAtom(atoms): Returns the atom with the highest potential energy and the energy value. Parameters: atoms (list of tuples): A list where each tuple contains the x, y, z coordinates of an atom. Returns: tuple: A tuple where the first element is the atom (as a tuple of coordinates) and the second element is its computed potential energy. energies = [] for atom in atoms: x, y, z = atom energy = math.sqrt(x**2 + y**2 + z**2) energies.append((atom, energy)) highest_energy_atom = max(energies, key=operator.itemgetter(1)) return highest_energy_atom"},{"question":"You are required to write a function named `find_substring_indexes` that takes two input arguments: 1. `text`: A non-empty string in which to search for substrings. 2. `pattern`: A non-empty string that represents the substring pattern to search for within `text`. The function should: 1. Identify all starting indexes of the `pattern` within the `text`. 2. Return a list of integers representing these starting indexes, in ascending order. Consider the following example: ```python find_substring_indexes(\\"abracadabra\\", \\"abra\\") ``` The output should be: ```python [0, 7] ``` **Function Signature:** ```python def find_substring_indexes(text: str, pattern: str) -> list: pass ``` **Constraints:** - The input `text` will be a non-empty string with a maximum length of 1000 characters. - The input `pattern` will be a non-empty string with a maximum length of 100 characters. - The pattern is guaranteed to appear at least once in the text.","solution":"def find_substring_indexes(text: str, pattern: str) -> list: Identifies all starting indexes of the pattern within the text. Args: text: A non-empty string in which to search for substrings. pattern: A non-empty string that represents the substring pattern to search for within text. Returns: A list of integers representing the starting indexes of the pattern within the text, in ascending order. indexes = [] pattern_len = len(pattern) for i in range(len(text) - pattern_len + 1): if text[i:i + pattern_len] == pattern: indexes.append(i) return indexes"},{"question":"You are required to write a function called `sum_of_odds_in_range` that computes the sum of all odd integers within a specified range inclusive of the boundaries. This problem aids in familiarizing you with basic iteration and conditional checks in Python. Here’s the detailed description of the function `sum_of_odds_in_range`: 1. The function should take two integers, `start` and `end`, which define the range. 2. Iterate through all integers within the given range, including the `start` and `end` values. 3. Check if an integer in this range is odd. 4. If the integer is odd, add it to a cumulative sum. 5. Return the cumulative sum after the iteration is complete. **Function Signature:** ```python def sum_of_odds_in_range(start: int, end: int) -> int: ``` **Constraints**: - The `start` and `end` values will be integers, and `start` will always be less than or equal to `end`. - The range defined by `start` and `end` will include at least one number. **Example**: ```python sum_of_odds_in_range(1, 10) # Returns 25, since the odd numbers are 1, 3, 5, 7, 9 and 1+3+5+7+9 = 25 sum_of_odds_in_range(5, 9) # Returns 21, since the odd numbers are 5, 7, 9 and 5+7+9 = 21 ```","solution":"def sum_of_odds_in_range(start: int, end: int) -> int: Computes the sum of all odd integers within the range inclusive of start and end. Args: start (int): The starting integer of the range. end (int): The ending integer of the range. Returns: int: The sum of all odd integers within the specified range. return sum(i for i in range(start, end + 1) if i % 2 != 0)"}]'),F={name:"App",components:{PoemCard:S},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},R={class:"search-container"},D={class:"card-container"},P={key:0,class:"empty-state"},z=["disabled"],Y={key:0},N={key:1};function j(a,e,l,p,r,s){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",R,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",D,[(n(!0),i(b,null,w(s.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",N,"Loading...")):(n(),i("span",Y,"See more"))],8,z)):u("",!0)])}const O=h(F,[["render",j],["__scopeId","data-v-afbf34bd"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/35.md","filePath":"chatai/35.md"}'),L={name:"chatai/35.md"},B=Object.assign(L,{setup(a){return(e,l)=>(n(),i("div",null,[x(O)]))}});export{U as __pageData,B as default};
