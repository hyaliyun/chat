import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-cae190f3"]]),S=JSON.parse('[{"question":"You have been given a city map that can be represented as a grid with dimensions M x N. Each cell in the grid represents a block in the city and has a certain altitude. The altitude of the block in the i-th row and j-th column is given by an integer A[i][j]. You are planning to build a network of canals in the city. A canal can only be built from a block at a higher altitude to a block at a lower altitude and it should be a continuous path. You are allowed to start a canal from any block in the city, and the canal can move in four possible directions: up, down, left, or right. The objective is to find the maximum difference in altitude between the starting and ending blocks of the canals within the city. Input The input consists of: - The first line contains two space-separated integers M and N (1 ≤ M, N ≤ 1000) representing the number of rows and columns in the grid, respectively. - Each of the next M lines contains N space-separated integers, where the j-th integer in the i-th line represents the altitude A[i][j] (-10^9 ≤ A[i][j] ≤ 10^9). Output Print a single integer, the maximum difference in altitude between the starting block and the ending block of the canal that can be built. Example Input 4 4 10 12 15 9 14 13 11 8 13 16 17 13 15 13 14 12 Output 9 Note In this example, a possible canal starts from the block with altitude 17 (3rd row, 3rd column) and ends at the block with altitude 8 (2nd row, 4th column). Therefore, the maximum difference in altitude is 17 - 8 = 9.","solution":"def find_max_altitude_difference(M, N, A): This function finds the maximum altitude difference between the starting block and the ending block of the canal that can be built in the city. Parameters: - M (int): Number of rows in the city grid. - N (int): Number of columns in the city grid. - A (list of list of int): Altitude of each block in the city grid. Returns: - int: The maximum altitude difference possible. # Directions for moving in grid (down, up, right, left) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False for _ in range(N)] for _ in range(M)] max_diff = 0 def dfs(i, j, max_altitude, min_altitude): Depth-First Search to explore possible canals. Parameters: - i, j: current cell coordinates. - max_altitude: the highest altitude reached in the canal. - min_altitude: the lowest altitude reached in the canal. Returns: - None nonlocal max_diff # Mark the current cell as visited visited[i][j] = True # Update max_diff by the current max and min altitudes current_diff = max_altitude - min_altitude if current_diff > max_diff: max_diff = current_diff # Try to move in each of the four possible directions for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < M and 0 <= nj < N and not visited[ni][nj] and A[ni][nj] < A[i][j]: dfs(ni, nj, max(max_altitude, A[ni][nj]), min(min_altitude, A[ni][nj])) # Unmark the cell as visited for other paths visited[i][j] = False # Start DFS from every cell in the grid for i in range(M): for j in range(N): dfs(i, j, A[i][j], A[i][j]) return max_diff"},{"question":"You are given the task of managing a scheduling system for a university where multiple courses are taught. Each course has fixed lecture slots across the week, and a room is assigned to each slot. The university needs to ensure that at no point in time two courses are scheduled in the same room simultaneously. Write a function that checks whether any conflicts exist in the schedule. A conflict is defined as two courses having lectures in the same room at the same time. The schedule will be provided as a list of lecture slots for each course. Each slot is represented as a tuple containing the day of the week (an integer from 1 to 7), the starting time (an integer from 0 to 23), the ending time (an integer from 1 to 24), and the room number (an integer). Your task is to determine if there are any conflicts in the provided schedule. -----Input----- - An integer N representing the number of courses (1 ≤ N ≤ 1000). - For each course,: - An integer M representing the number of lecture slots for the course (1 ≤ M ≤ 10). - M tuples containing four integers each: the day of the week (1 ≤ day ≤ 7), the starting time (0 ≤ start < end ≤ 24), the ending time (0 < end ≤ 24), and the room number (1 ≤ room ≤ 1000). -----Output----- - Print \\"Conflict detected\\" if there is any overlap in the schedule. Otherwise, print \\"No conflicts\\". -----Examples----- Sample Input 1: 3 2 1 9 11 101 3 13 15 102 3 2 11 12 101 5 9 10 103 1 20 21 102 2 2 9 11 101 4 13 15 102 Sample Output 1: Conflict detected Sample Input 2: 2 3 1 8 10 201 3 12 14 203 5 9 10 202 2 2 11 13 201 4 15 17 203 Sample Output 2: No conflicts","solution":"def check_schedule_conflict(N, schedule_list): Function to check for conflicts in the university schedule. :param N: Number of courses :param schedule_list: list containing the schedule of each course :return: \\"Conflict detected\\" if any conflicts exist, otherwise \\"No conflicts\\" schedule_dict = {} for course in schedule_list: M = course[0] slots = course[1:] for slot in slots: day, start, end, room = slot if room not in schedule_dict: schedule_dict[room] = [] schedule_dict[room].append((day, start, end)) for room, slots in schedule_dict.items(): slots.sort() for i in range(len(slots) - 1): if slots[i][0] == slots[i + 1][0]: # same day if slots[i][2] > slots[i + 1][1]: # overlapping time return \\"Conflict detected\\" return \\"No conflicts\\""},{"question":"A programmer is working on generating a specific sequence of numbers based on user input. The sequence is formed by summing consecutive digits, starting from 1 up to N. The programmer needs help to write code that forms this sequence. -----Input:----- - The input consists of a single integer N which represents the number up to which digits should be summed. -----Output:----- - Output the sequence generated by summing consecutive digits up to N. -----Constraints----- - 1 leq N leq 50 -----Sample Input 1:----- 5 -----Sample Output 1:----- 1 3 6 10 15 -----Sample Input 2:----- 8 -----Sample Output 2:----- 1 3 6 10 15 21 28 36","solution":"def generate_sequence(N): Generates a sequence by summing consecutive digits up to N. Parameters: N (int): The number up to which digits should be summed. Returns: list: The generated sequence as a list of integers. sequence = [] sum = 0 for i in range(1, N + 1): sum += i sequence.append(sum) return sequence"},{"question":"Given an array of n integers, you are to determine the maximum length of a subsequence such that the product of all its elements is even. A subsequence of an array is a new array generated by deleting some or none of the elements of the original array without changing the order of the remaining elements. The product of a sequence is the result of multiplying all its elements together. Input The first line contains a single integer t (1 ≤ t ≤ 100) - the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5) - the number of elements in the array. The next line contains n integers a_i (1 ≤ a_i ≤ 10^9) - the elements of the array. Output For each test case, print the maximum length of the subsequence such that the product of all its elements is even. Example Input 2 5 1 2 3 4 5 4 1 3 5 7 Output 5 0 Note In the first case, the entire array [1, 2, 3, 4, 5] can be chosen as the subsequence since it includes an even number (2), making the product even. In the second case, it is impossible to choose a subsequence with an even product since all elements are odd numbers. Therefore, the output is 0.","solution":"def max_even_product_subseq_length(t, test_cases): results = [] for case in test_cases: n, arr = case # Check if there is any even number in the array has_even = any(a % 2 == 0 for a in arr) if has_even: # If there\'s an even number, the max length of subsequence with even product is the length of array results.append(n) else: # If there are no even numbers, the max length of subsequence with even product is 0 results.append(0) return results"},{"question":"# Array Query Game Jane is playing an interesting game with arrays. She has an integer array `A` of size `n` and a list of `q` queries. Each query is represented by a pair of integers `(l, r)`, where `1 <= l <= r <= n`. The goal is to calculate the sum of elements in the subarray `A[l:r]` for each query. Your task is to write a function that, given an array `A` and a list of queries, computes the sum of elements for each query efficiently. **Input** The first line of the input contains two integers `n` (the size of the array) and `q` (the number of queries). The second line contains `n` space-separated integers, representing the elements of the array `A`. The next `q` lines each contain two integers `l` and `r`, representing the range `[l, r]` of a query. **Output** For each query, output a single integer, which is the sum of elements in the subarray `A[l:r]`. **Constraints** - (1 leq n leq 10^5) - (1 leq q leq 10^5) - (-10^6 leq A[i] leq 10^6) - (1 leq l leq r leq n) **Example** **Input** ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` **Output** ``` 6 9 15 ``` **Explanation** - For the first query `(1, 3)`, the sum of elements from index 1 to 3 is `1 + 2 + 3 = 6`. - For the second query `(2, 4)`, the sum of elements from index 2 to 4 is `2 + 3 + 4 = 9`. - For the third query `(1, 5)`, the sum of elements from index 1 to 5 is `1 + 2 + 3 + 4 + 5 = 15`. To ensure efficiency, consider preprocessing the array to create a prefix sum array.","solution":"def array_query_game(n, q, A, queries): Computes the sum of elements for each query efficiently using a prefix sum array. Parameters: n (int): The size of the array. q (int): The number of queries. A (list of int): The elements of the array. queries (list of tuple): Each tuple contains two integers l and r representing the range. Returns: list of int: The sum of elements in the subarray A[l-1:r] for each query. # Compute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + A[i - 1] results = [] for l, r in queries: results.append(prefix_sums[r] - prefix_sums[l - 1]) return results"},{"question":"You are a gardener allocating flower beds in your garden. Each flower bed must contain a unique type of flower, and all flower beds should be filled. You can choose from the following options to fill each flower bed: - Option 1: Plant type A flowers, which have a cost of X per bed. - Option 2: Plant type B flowers, which have a cost of Y per bed. Your objective is to minimize the total cost of planting flowers in all the beds given that you have exactly P beds. -----Constraints----- - 1≤P≤100 - 1≤X,Y≤1000 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: P X Y -----Output----- When the minimum total cost is z, print the value of z. -----Sample Input----- 4 250 300 -----Sample Output----- 1000 - If you choose Plan 1 for all 4 beds, the cost will be 4×250=1000 yen. - If you choose Plan 2 for all 4 beds, the cost will be 4×300=1200 yen. Thus, the minimum total cost is 1000 yen.","solution":"def min_cost_flower_beds(P, X, Y): Returns the minimum total cost of planting flowers in all flower beds. Parameters: P (int): Number of flower beds. X (int): Cost per bed for type A flowers. Y (int): Cost per bed for type B flowers. Returns: int: Minimum total cost. return P * min(X, Y)"},{"question":"Valar is a character in a game where he collects coins that come from a space portal at regular intervals. However, a certain number of fake coins also appear from the portal, and Valar needs to avoid collecting them. Each coin, real or fake, has a unique identifier. Valar starts at time `t=0` and coins appear at every second. You are given a list of identifier numbers for the coins, where positive numbers indicate real coins and negative numbers indicate fake coins. Valar must collect the maximum number of real coins without ever collecting a fake coin. Write a function `max_real_coins` that takes a list of integers, where each integer is either a positive number representing a real coin or a negative number representing a fake coin. The function should return the maximum number of real coins Valar can collect without ever collecting any fake coin. # Input - A single list of integers representing the coins that appear every second. # Output - An integer representing the maximum number of real coins collected. # Constraints - The length of the list of coins will not exceed 1000. - Each integer in the list will be between -1000 and 1000. # Example Input ``` [1, 2, 3, -1, 4, 5] ``` Output ``` 3 ``` Explanation Valar can collect the first three real coins (1, 2, 3). At the fourth second, a fake coin appears (-1), so he stops collecting. The maximum number of real coins he collects is 3. # Notes - If the first coin is fake, Valar collects 0 coins. - Valar stops collecting as soon as he encounters a fake coin. # Sample Input ``` [1, 2, 3, -4, 5, 6] ``` # Sample Output ``` 3 ```","solution":"def max_real_coins(coins): Returns the maximum number of real coins collected without collecting any fake coin. count = 0 for coin in coins: if coin < 0: break count += 1 return count"},{"question":"You are given an array of n integers and a target sum t. Your task is to determine whether there exists a subarray (continuous segment) of the array such that its sum is exactly t. If such a subarray exists, print \\"Yes\\" and the indices of the first and the last elements of such subarray. If multiple subarrays have the sum equal to t, print any one of them. If no such subarray exists, print \\"No\\". -----Input----- The first line contains two integers n and t (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 10^9) — the number of elements in the array and the target sum. The second line contains the sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where number a_i is the i-th element of the array. The numbers in the lines are separated by single spaces. -----Output----- If there is no subarray with sum exactly t, print \\"No\\". Otherwise, print \\"Yes\\" in the first line and the indices of the first and the last elements of such subarray in the second line. If there are multiple correct answers, print any one of them. Indices should be 1-based. -----Examples----- Input 5 12 1 2 3 7 5 Output Yes 2 4 Input 4 15 1 2 3 8 Output No Input 10 15 1 1 1 1 1 5 10 1 1 1 Output Yes 6 7","solution":"def find_subarray_with_sum(n, t, arr): This function determines if there exists a continuous subarray whose sum is exactly t. If such a subarray exists, it returns \\"Yes\\" followed by the 1-based indices of the first and last elements. If no such subarray exists, it returns \\"No\\". Parameters: n (int): number of elements in the array t (int): target sum arr (list of int): the array of n integers Returns: str: \\"Yes\\" followed by indices or \\"No\\" if no such subarray exists start, current_sum = 0, 0 for end in range(n): current_sum += arr[end] while current_sum > t and start <= end: current_sum -= arr[start] start += 1 if current_sum == t: return f\\"Yesn{start + 1} {end + 1}\\" return \\"No\\""},{"question":"Anika loves to play with strings and palindromes. A palindrome is a word that reads the same backward as forward. Given a string, Anika wants to perform operations to transform it into a palindrome. You can perform the following operation any number of times: choose any character of the string and replace it with any other character. Your task is to find the minimum number of operations required to turn the given string into a palindrome. Input Format: The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of a single line containing a string s which is the given string. Output Format: For each test case, output one line containing \\"Case #x:\\", where x is the test case number (starting from 1). Then, for every test case, output the minimum number of operations required to turn the given string into a palindrome. Constraints: 1 ≤ T ≤ 20 1 ≤ |s| ≤ 10^5 s contains only lowercase English letters. SAMPLE INPUT: 3 abc abca race SAMPLE OUTPUT: Case #1: 1 Case #2: 1 Case #3: 2 Explanation: For the first test case: The string \\"abc\\" can be transformed into \\"aba\\" or \\"cbc\\" with 1 replacement. For the second test case: The string \\"abca\\" can be transformed into \\"abba\\" with 1 replacement. For the third test case: The string \\"race\\" can be transformed into \\"eace\\" and then to \\"ecce\\", requiring 2 replacements in total.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to turn the given string into a palindrome. n = len(s) operations_count = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: operations_count += 1 return operations_count def solve_palindrome_cases(test_cases): results = [] for i, s in enumerate(test_cases, 1): min_operations = min_operations_to_palindrome(s) results.append(f\\"Case #{i}: {min_operations}\\") return results"},{"question":"Write a program which reads a list of integers and prints the maximum difference between any two integers in the list. You can assume the list contains at least two integers. Input A list of integers separated by spaces in a line. Output Print the maximum difference between any two integers in the list in a line. Example Input 1 2 3 10 9 Output 9","solution":"def max_difference(int_list): Returns the maximum difference between any two integers in the list. if len(int_list) < 2: raise ValueError(\\"List must contain at least two integers.\\") max_int = max(int_list) min_int = min(int_list) return max_int - min_int"},{"question":"Write a function named `largest_contiguous_sum` that takes a list of integers as an argument and returns the maximum sum of any contiguous subarray within the list. # Input The input to the function will be a single list of integers, which can contain both positive and negative numbers. # Output The output should be a single integer representing the maximum sum of any contiguous subarray within the input list. # Example ```python print(largest_contiguous_sum([2, -1, 2, 3, 4, -5])) # Output: 10 print(largest_contiguous_sum([-2, -3, 4, -1, -2, 1, 5, -3])) # Output: 7 print(largest_contiguous_sum([-2, -1, -3])) # Output: -1 ``` # Constraints - The input list will contain at least one integer. - The length of the list will not exceed 10^5. # Note You might want to utilize Kadane\'s Algorithm to solve this efficiently.","solution":"def largest_contiguous_sum(arr): Finds the maximum sum of any contiguous subarray using Kadane\'s Algorithm. Args: arr: A list of integers. Returns: The maximum sum of any contiguous subarray. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alicia loves collecting unique gemstones. She goes to various mines to collect gemstones, but has a peculiar way of doing so. Each mine has a set of gemstones with a certain number of which are identical. Alicia can collect exactly one type of gemstone from each mine she visits, but she wants to maximize the number of unique gemstones in her overall collection. Given a list of mines with the counts of each type of gemstone available at the mines, find out the maximum number of unique gemstones she can collect. Input: First line contains an integer T (number of test cases). Each test case starts with an integer M (number of mines). The next M lines each start with an integer Gi (number of unique gemstones in the i-th mine), followed by Gi integers which represent the counts of each gemstone in the i-th mine. Output: For each test case, print a single integer which is the maximum number of unique gemstones Alicia can collect. Constraints: 1 ≤ T ≤ 100 1 ≤ M ≤ 100 1 ≤ Gi ≤ 100 1 ≤ count of gemstones ≤ 100 Example Input: 2 3 2 1 3 3 2 1 4 1 5 2 3 2 2 3 2 1 1 Example Output: 3 2 Problem Setter: Alicia Angeles","solution":"def max_unique_gemstones(test_cases): results = [] for case in test_cases: M = case[0] mines = case[1] unique_gemstones = 0 for mine in mines: unique_gemstones += 1 results.append(unique_gemstones) return results # Example usage: test_cases = [ (3, [(2, [1, 3]), (3, [2, 1, 4]), (1, [5])]), (2, [(3, [2, 2, 3]), (2, [1, 1])]) ] print(max_unique_gemstones(test_cases)) # Output should be [3, 2]"},{"question":"Luna the artist is preparing for an exhibition. She has created multiple paintings that need to be framed. Each painting has a specific dimension and each frame has a limit to the dimensions it can accommodate. Luna needs to ensure that she selects the right frame for each of her paintings without cropping or resizing them. Write a function that determines the maximum number of paintings that can be framed using the given frames. You are given two lists of integers. The first list contains the dimensions of the paintings, and the second list contains the dimensions of the frames. Each dimension is represented as a tuple (width, height). A painting can fit into a frame if both its width and height are less than or equal to the width and height of the frame respectively. -----Input----- The input consists of: - Two integers m and n (1 ≤ m, n ≤ 100) – the number of paintings and frames respectively. - m lines, each containing two integers w_i and h_i (1 ≤ w_i, h_i ≤ 1000) which represent the dimensions of each painting. - n lines, each containing two integers w_j and h_j (1 ≤ w_j, h_j ≤ 1000) which represent the dimensions of each frame. -----Output----- Print the maximum number of paintings that can be framed. -----Examples----- Input 3 2 12 11 15 10 10 10 20 20 15 10 Output 2 Input 4 4 8 8 9 7 10 10 5 5 9 9 11 10 7 7 10 8 Output 3 -----Note----- In the first example, Luna has three paintings with dimensions (12, 11), (15, 10), and (10, 10) and two frames with dimensions (20, 20) and (15, 10). The first painting can fit into the first frame, the second painting can also fit into the first frame, and the third painting can fit into the first frame too. However, the maximum number of frames used is 2 for the three paintings, so the output is 2.","solution":"def max_paintings_framed(m, n, paintings, frames): Returns the maximum number of paintings that can be framed. Parameters: m (int): The number of paintings. n (int): The number of frames. paintings (list of tuples): The dimensions of each painting. frames (list of tuples): The dimensions of each frame. Returns: int: The maximum number of paintings that can be framed. used_frames = [False] * n count = 0 for painting in paintings: for i, frame in enumerate(frames): if not used_frames[i] and painting[0] <= frame[0] and painting[1] <= frame[1]: used_frames[i] = True count += 1 break return count"},{"question":"You are given a list of integers and a target integer. Your task is to find two distinct integers in the list that sum up to the target integer. If such a pair exists, return the indices of the two numbers in any order. If no such pair exists, return an empty list. ------ Input ------ The first line contains an integer, N, representing the number of elements in the list. The second line contains N integers separated by spaces, representing the list of integers. The third line contains an integer, representing the target sum. ------ Output ------ Output the indices of the two numbers (0-based) in any order or an empty list if no such pair exists. ------ Constraints ------ The list will always have at least two elements and at most 10^4 elements. Each element of the list will be an integer between -10^9 and 10^9. The target integer will be between -10^9 and 10^9. ------ Example ------ Input: 4 2 7 11 15 9 Output: [0, 1] Explanation: The numbers at indices 0 and 1 are 2 and 7 respectively, and they add up to 9. Input: 5 1 2 3 4 5 10 Output: [] Explanation: No pair of numbers add up to 10.","solution":"def find_two_sum_indices(numbers, target): Finds the indices of the two numbers that add up to the target. Parameters: numbers (list): List of integers. target (int): The target sum. Returns: list: List containing indices of the two numbers that add up to the target, or an empty list if no such pair exists. num_to_index = {} for i, num in enumerate(numbers): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Given an array of integers Arr of size N. Find the sum of all the odd integers in the array. Example 1: Input: N = 5 Arr = [1, 2, 3, 4, 5] Output: 9 Explanation: The sum of the odd integers is 1 + 3 + 5 = 9. Example 2: Input: N = 4 Arr = [2, 4, 6, 8] Output: 0 Explanation: There are no odd integers in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfOddIntegers() which takes an integer N and an array Arr as input parameters and returns the sum of all the odd integers in the Arr. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 1000 -10^4 <= Arr[i] <= 10^4","solution":"def sumOfOddIntegers(N, Arr): Returns the sum of all the odd integers in the array. Parameters: N (int): The size of the array. Arr (list of int): The array of integers. Returns: int: The sum of all the odd integers in the array. odd_sum = 0 for num in Arr: if num % 2 != 0: odd_sum += num return odd_sum"},{"question":"Mirko found a peculiar string consisting of lowercase alphabets. He noticed that he can perform the following operation as many times as he wants: choose any two consecutive distinct characters in the string and replace them with a single new character which is distinct from both chosen characters. Mirko wants to transform the string into a single character. Help Mirko find the minimal number of operations needed to achieve that. -----Input----- The first line of input is a single integer N (1 leq N leq 100) – the length of the string Mirko found. The second line contains a string of exactly N lowercase letters. -----Output----- The output should contain only one line with a single integer number – the minimal number of operations Mirko has to perform to transform the string into a single character. -----Examples----- Sample Input 1: 4 abac Sample Output 1: 3 Sample Input 2: 3 aaa Sample Output 2: 0 Sample Input 3: 2 bc Sample Output 3: 1","solution":"def min_operations_to_single_char(N, s): Returns the minimal number of operations to transform the string s into a single character. Args: N : int : The length of string s s : str : The input string of length N Returns: int : The minimal number of operations needed # Since we are reducing the string step by step until we are left with a single character, # and at each step, we reduce the length of the string by 1, the number of operations # needed is simply the length of the string minus 1, except when all characters are the same. if all(c == s[0] for c in s): return 0 return N - 1"},{"question":"You are given a matrix with `n` rows and `m` columns, consisting of integers. You need to handle several queries on this matrix. Each query can be of the following types: 1. **Row Swap**: Swap two rows of the matrix. 2. **Column Swap**: Swap two columns of the matrix. 3. **Sum**: Calculate the sum of all elements in a sub-matrix defined by a starting row, starting column, ending row, and ending column. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of rows and columns in the matrix. The next n lines contain m integers each, representing the elements of the matrix. The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines describes a query in one of the following formats: - `1 x1 x2` — swap row x1 with row x2 (1 ≤ x1, x2 ≤ n). - `2 y1 y2` — swap column y1 with column y2 (1 ≤ y1, y2 ≤ m). - `3 r1 c1 r2 c2` — calculate the sum of the sub-matrix from (r1, c1) to (r2, c2), inclusive (1 ≤ r1 ≤ r2 ≤ n; 1 ≤ c1 ≤ c2 ≤ m). Output For each query of the third type, print the sum of the sub-matrix on a single line. Example Input 3 3 1 2 3 4 5 6 7 8 9 5 3 1 1 3 3 1 1 3 3 1 1 3 3 2 1 3 3 1 1 3 3 Output 45 45 45","solution":"def process_queries(n, m, matrix, queries): results = [] for query in queries: q = list(map(int, query.split())) if q[0] == 1: # Row Swap x1, x2 = q[1] - 1, q[2] - 1 # Adjusting indices to be 0-based matrix[x1], matrix[x2] = matrix[x2], matrix[x1] elif q[0] == 2: # Column Swap y1, y2 = q[1] - 1, q[2] - 1 # Adjusting indices to be 0-based for row in matrix: row[y1], row[y2] = row[y2], row[y1] elif q[0] == 3: # Sum of Sub-matrix r1, c1, r2, c2 = q[1] - 1, q[2] - 1, q[3] - 1, q[4] - 1 # Adjusting indices to be 0-based sub_matrix_sum = 0 for i in range(r1, r2 + 1): sub_matrix_sum += sum(matrix[i][c1:c2 + 1]) results.append(sub_matrix_sum) return results"},{"question":"Write a function to determine if a string contains all unique characters. Your solution should operate in O(n) time. # Input Format - The input consists of a single string `S` that only contains ASCII characters. # Constraints - `1 ≤ |S| ≤ 10^5` - The string `S` consists only of ASCII characters. # Output Format - Output \\"YES\\" if the string contains all unique characters, and \\"NO\\" otherwise. # SAMPLE INPUT ``` abcdefg ``` # SAMPLE OUTPUT ``` YES ``` # SAMPLE INPUT ``` hello ``` # SAMPLE OUTPUT ``` NO ``` # Explanation 1st Test Case: All characters in `abcdefg` are unique. 2nd Test Case: The character `l` is repeated in `hello`, so it does not contain all unique characters.","solution":"def has_all_unique_characters(S): Determines if a string S contains all unique characters. Parameters: S (str): The input string. Returns: str: \\"YES\\" if all characters are unique, otherwise \\"NO\\". char_set = set() for char in S: if char in char_set: return \\"NO\\" char_set.add(char) return \\"YES\\""},{"question":"You have been hired to design a simple banking system. The bank allows customers to open a new account with an initial deposit and perform basic operations such as deposit, withdrawal, and check balance. Each account is identified by a unique account number. Write a class `BankAccount` that includes: 1. An initializer method `__init__(self, account_number, initial_deposit)` that sets the account number and the initial deposit amount. If the initial deposit is less than 0, an error should be raised: `ValueError: Initial deposit must be non-negative`. 2. A method `deposit(self, amount)` to deposit money into the account. The deposit amount must be positive, otherwise raise an error: `ValueError: Deposit amount must be positive`. 3. A method `withdraw(self, amount)` to withdraw money from the account. If the withdrawal amount is greater than the current balance, raise an error: `ValueError: Insufficient funds`. If the withdrawal amount is less than or equal to zero, raise an error: `ValueError: Withdrawal amount must be greater than zero`. 4. A method `get_balance(self)` that returns the current account balance. 5. A method `__str__(self)` that returns a string representation of the account in the format: `Account Number: XXXXXX, Balance: XXXX.XX`. Example Usage: ```python account = BankAccount(\'123456\', 1000) account.deposit(500) print(account.get_balance()) # Output: 1500 account.withdraw(200) print(account) # Output: Account Number: 123456, Balance: 1300.00 ```","solution":"class BankAccount: def __init__(self, account_number, initial_deposit): if initial_deposit < 0: raise ValueError(\\"Initial deposit must be non-negative\\") self.account_number = account_number self.balance = initial_deposit def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be greater than zero\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount def get_balance(self): return self.balance def __str__(self): return f\\"Account Number: {self.account_number}, Balance: {self.balance:.2f}\\""},{"question":"A company has a hotel booking system that keeps track of the bookings for a particular room. Each booking includes a start date and an end date. Your task is to check if there\'s any double booking for a given room in the system. A double booking occurs when two bookings overlap by at least one day. Given the booking details, determine if there is any double booking in the list. Input: The first line contains an integer N, the number of bookings. Each of the following N lines contains two integers Si and Ei, representing the start date and end date of booking i (1 ≤ Si ≤ Ei ≤ 1000). Output: Print \\"Yes\\" if there is any double booking, otherwise print \\"No\\". Constraints: - 1 ≤ N ≤ 1000 SAMPLE INPUT 3 1 3 2 5 6 8 SAMPLE OUTPUT Yes Explanation: The first two bookings (1 to 3 and 2 to 5) overlap, hence there is a double booking.","solution":"def is_double_booking(bookings): Determines if there\'s any double booking in the list of bookings. # Create an array to keep track of bookings on each day days = [0] * 1001 # Iterate through each booking for start, end in bookings: # Mark each day of the booking for day in range(start, end + 1): days[day] += 1 # If any day is booked more than once, return \\"Yes\\" if days[day] > 1: return \\"Yes\\" # If no overlap found, return \\"No\\" return \\"No\\" # Function to handle input and output def main(): # Read input import sys input = sys.stdin.read data = input().strip().split() # Extract number of bookings n = int(data[0]) # Extract individual bookings bookings = [] for i in range(n): start = int(data[2*i + 1]) end = int(data[2*i + 2]) bookings.append((start, end)) # Display result print(is_double_booking(bookings))"},{"question":"A friend of mine has a peculiar way of arranging words in a sentence to make them more meaningful. Here is his method: * Take a list of words and arrange them in ascending order based on their lengths. * If two words have the same length, arrange them in lexicographical order (dictionary order). Write a function that implements this sorting method. Example ```R arrange_words(c(\\"apple\\", \\"banana\\", \\"pear\\", \\"cherry\\", \\"fig\\", \\"kiwi\\")) # Output: c(\\"fig\\", \\"kiwi\\", \\"pear\\", \\"apple\\", \\"banana\\", \\"cherry\\") ``` ```python arrange_words([\\"apple\\", \\"banana\\", \\"pear\\", \\"cherry\\", \\"fig\\", \\"kiwi\\"]) # Output: [\\"fig\\", \\"kiwi\\", \\"pear\\", \\"apple\\", \\"banana\\", \\"cherry\\"] ```","solution":"def arrange_words(words): Arrange words in ascending order based on their lengths. If two words have the same length, they are arranged in lexicographical order. Args: words (list of str): List of words to be arranged. Returns: list of str: List of words arranged according to the specified sorting method. return sorted(words, key=lambda word: (len(word), word))"},{"question":"You are given a string s containing only characters \'0\', \'1\', and \'?\'. You can replace each \'?\' with either \'0\' or \'1\' to form the lexicographically smallest valid sequence that does not contain a substring of length at least 4 consisting of alternating \'01\' and \'10\'. Your task is to generate this sequence. -----Input----- The single line of input contains a string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string. -----Output----- Output the lexicographically smallest valid sequence formed by replacing each \'?\' with \'0\' or \'1\'. -----Examples----- Input 0?10?01 Output 0010001 Input 1??0 Output 1000 Input ???? Output 0000 -----Note----- In the first example, by replacing \'?\' with \'0\' in the positions 2 and 5, you get the sequence \\"0010001\\", which does not contain any alternating substring of length at least 4. In the second example, by replacing the first \'?\' with \'0\' and the second \'?\' with \'0\', you get the sequence \\"1000\\", which is the lexicographically smallest sequence without having any alternating substring of length at least 4. In the third example, the sequence \\"0000\\" is already the lexicographically smallest possible sequence without any \'01\' and \'10\' alternating substrings of length 4.","solution":"def smallest_valid_sequence(s): This function takes a string s containing \'0\', \'1\', and \'?\' and returns the lexicographically smallest valid sequence by replacing \'?\' with \'0\' or \'1\'. A valid sequence does not contain a substring of alternating \'01\' or \'10\' of length at least 4. # Helper function to check for invalid alternating substring def has_invalid_pattern(seq): n = len(seq) for i in range(n - 3): if (seq[i] == \'0\' and seq[i+1] == \'1\' and seq[i+2] == \'0\' and seq[i+3] == \'1\') or (seq[i] == \'1\' and seq[i+1] == \'0\' and seq[i+2] == \'1\' and seq[i+3] == \'0\'): return True return False # Convert string to list for easy modification s = list(s) n = len(s) for i in range(n): if s[i] == \'?\': # Try to replace with \'0\' first to make it lexicographically smallest s[i] = \'0\' if has_invalid_pattern(s): # If it creates an invalid pattern, replace with \'1\' s[i] = \'1\' # Double check if replacing with \'1\' creates an invalid pattern if has_invalid_pattern(s): # Revert back if necessary s[i] = \'?\' # Convert list back to string return \'\'.join(s)"},{"question":"To improve the efficiency of a food delivery business, you need to implement a system that matches drivers to orders based on proximity. Each order has a delivery location and each driver starts from the same central point. Your task is to determine which driver should take which order based on the minimum distance to each delivery location. Each order is represented as a coordinate (Xi, Yi) on a 2D plane, and the central point where all drivers start is at the origin (0, 0). Assume there are an equal number of drivers and orders. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - For each test case, the first line contains a single integer N, the number of drivers (and orders). - The next N lines each contain two integers Xi and Yi, representing the coordinates of the orders. ------ Output Format ------ For each test case, output N lines, each containing the index of the driver (starting from 1) and the index of the order (also starting from 1) the driver should take, separated by a space. If there are multiple pairs with the same distance, assign orders to drivers in the order they appear in the input. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10 -100 ≤ Xi, Yi ≤ 100 ------ Sample Input 1 ------ 2 3 0 2 3 4 -1 -1 2 1 2 2 3 ------ Sample Output 1 ------ 1 1 2 2 3 3 1 1 2 2 ------ Explanation 1 ------ In the first test case: - Driver 1 is closest to Order 1 (distance = 2). - Driver 2 is closest to Order 2 (distance = 5). - Driver 3 is closest to Order -1 (distance = 1.41 approx). In the second test case: - Driver 1 is closest to Order 1 (distance = 2.24 approx). - Driver 2 is closest to Order 2 (distance = 3.61 approx).","solution":"def assign_orders_to_drivers(T, test_cases): results = [] for test_case in test_cases: N, orders = test_case distances = [(i, (x**2 + y**2)**0.5) for i, (x, y) in enumerate(orders)] distances.sort(key=lambda x: x[1]) assignment = [(driver + 1, order_idx + 1) for driver, (order_idx, _) in enumerate(distances)] results.append(assignment) return results"},{"question":"Given an array of integers, we can perform a number of operations to achieve a goal. One such operation is to choose a non-empty subarray and multiply each of its elements by -1. Our goal is to minimize the number of negative values in the array after a series of operations. Let\'s define the problem formally. You are given an array a of n integers. You need to find the minimum number of operations required to make all the elements of the array non-negative. An operation is defined as follows: - Choose two integers l and r (1 le l le r le n), and multiply each element a[l], a[l+1], ..., a[r] by -1. Note that r cannot be smaller than l, but l can equal r (choosing a single element to flip). -----Input----- The first line contains an integer n (1 le n le 2 cdot 10^5) — the length of the array. The second line contains n integers a_i (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Print a single integer — the minimum number of operations required to make all elements of the array non-negative. -----Examples----- Input 5 -1 -3 2 -4 5 Output 3 Input 4 -2 -3 -4 -5 Output 4 Input 3 1 2 3 Output 0 -----Note----- For the first example, one possible optimal solution is: 1. Multiply [-1, -3] by -1 to get [1, 3, 2, -4, 5]. 2. Multiply [-4] by -1 to get [1, 3, 2, 4, 5]. For the second example, you need to flip each element individually since they are all negative. In the third example, doing nothing results in all non-negative elements from the start.","solution":"def min_operations_to_non_negative(n, arr): Returns the minimum number of operations required to make all elements of the array non-negative. negative_count = 0 for i in range(n): if arr[i] < 0: negative_count += 1 return negative_count"},{"question":"Given a list of integers, return the maximum integer from the list. If the list is empty, return -1. Example 1: Input: nums = [3, 1, 4, 1, 5] Output: 5 Explanation: The maximum integer in the list [3, 1, 4, 1, 5] is 5. Example 2: Input: nums = [] Output: -1 Explanation: The input list is empty, hence the output is -1. Your Task: You don\'t need to read inputs. Your task is to complete the function findMax() which takes a list of integers as input and returns the maximum integer in the list. If the list is empty, return -1. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 0 <= len(nums) <= 10^6 -10^9 <= nums[i] <= 10^9","solution":"def findMax(nums): Returns the maximum integer in the list. If the list is empty, returns -1. Args: nums (list of int): List of integers. Returns: int: Maximum integer or -1 if the list is empty. if not nums: return -1 return max(nums)"},{"question":"You\'re given an array of integers, and you need to determine if it is possible to select three integers from this array such that the sum of these three integers is zero. If such a triplet exists, return \\"Yes\\" and print the triplet. If no such triplet exists, return \\"No\\". Input The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the number of elements in the array. The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4), representing the elements of the array. Output If such a triplet exists, output \\"Yes\\" and the triplet in a single line separated by spaces. If there are multiple valid triplets, print any of them. If no such triplet exists, output \\"No\\". Examples Input 6 -1 2 -3 4 -2 1 Output Yes -1 2 -1 Input 4 1 2 3 4 Output No Note In the first example, the valid triplet is (-1, 2, -1) which sums to zero. In the second example, there are no three numbers that sum to zero.","solution":"def find_triplet_sum_zero(n, array): Determines if there exists a triplet in the array that sums up to zero. :param n: int : the number of elements in the array :param array: list[int] : the array of integers :return: tuple : \\"Yes\\" and the triplet if such a triplet exists, otherwise \\"No\\" array.sort() for i in range(n - 2): left = i + 1 right = n - 1 while left < right: curr_sum = array[i] + array[left] + array[right] if curr_sum == 0: return \\"Yes\\", (array[i], array[left], array[right]) elif curr_sum < 0: left += 1 else: right -= 1 return \\"No\\""},{"question":"A tree is an acyclic connected graph with N nodes and N-1 edges. Each node of the tree has a value assigned to it. You need to answer Q queries on the tree. Each query is of the following form: 1. \\"update u x\\" - Update the value of node u to x. 2. \\"sum u v\\" - Find the sum of values of nodes on the path between nodes u and v. Write a program to process these queries. Input: - The first line contains an integer N (2 ≤ N ≤ 10^5), the number of nodes in the tree. - The second line contains N space-separated integers, the values of the nodes from 1 to N. - Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), indicating an edge between nodes u and v. - The next line contains an integer Q (1 ≤ Q ≤ 10^5), the number of queries. - Each of the next Q lines contains a query in one of the two formats specified above. Output: For each query of the form \\"sum u v\\", output the sum of values of the nodes on the path from u to v. Constraints: - Node values are between -10^9 and 10^9. - The input tree is guaranteed to be connected and acyclic. SAMPLE INPUT 5 1 2 3 4 5 1 2 1 3 3 4 3 5 5 sum 2 4 update 4 -2 sum 2 4 sum 1 5 update 1 10 sum 1 5 SAMPLE OUTPUT 6 4 10 14 Explanation: 1. The initial sum of values on the path from node 2 to node 4 is 2+1+3+4 = 10. 2. After updating node 4\'s value to -2, the sum on the path from node 2 to node 4 becomes 2+1+3+(-2) = 4. 3. The sum of values on the path from node 1 to node 5 is 1+3+5 = 9. 4. After updating node 1\'s value to 10, the sum on the path from node 1 to node 5 becomes 10+3+5 = 18.","solution":"class Tree: def __init__(self, n, values): self.n = n self.values = values self.graph = [[] for _ in range(n+1)] self.parent = [-1] * (n + 1) self.depth = [0] * (n + 1) self.DP = [] def add_edge(self, u, v): self.graph[u].append(v) self.graph[v].append(u) def dfs(self, node, par): for neighbor in self.graph[node]: if neighbor == par: continue self.parent[neighbor] = node self.depth[neighbor] = self.depth[node] + 1 self.dfs(neighbor, node) def preprocess(self): max_depth = max(self.depth) log = len(bin(max_depth)) - 2 self.DP = [[-1] * (self.n + 1) for _ in range(log + 1)] for i in range(1, self.n + 1): self.DP[0][i] = self.parent[i] for j in range(1, log + 1): for i in range(1, self.n + 1): if self.DP[j - 1][i] != -1: self.DP[j][i] = self.DP[j - 1][self.DP[j - 1][i]] def lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u log = len(self.DP) - 1 for i in range(log, -1, -1): if self.depth[u] - (1 << i) >= self.depth[v]: u = self.DP[i][u] if u == v: return u for i in range(log, -1, -1): if self.DP[i][u] != self.DP[i][v]: u = self.DP[i][u] v = self.DP[i][v] return self.parent[u] def process_query(self, query): if query[0] == \\"update\\": u, x = int(query[1]), int(query[2]) self.values[u - 1] = x elif query[0] == \\"sum\\": u, v = int(query[1]), int(query[2]) lca = self.lca(u, v) result = 0 path_u = [] path_v = [] while u != lca: path_u.append(u) u = self.parent[u] while v != lca: path_v.append(v) v = self.parent[v] path_v.reverse() path = path_u + [lca] + path_v for node in path: result += self.values[node - 1] return result return None def process_tree_queries(n, values, edges, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) tree.dfs(1, -1) tree.preprocess() results = [] for query in queries: result = tree.process_query(query) if query[0] == \\"sum\\": results.append(result) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n = int(lines[0]) values = list(map(int, lines[1].split())) edges = [tuple(map(int, line.split())) for line in lines[2:n+1]] q = int(lines[n+1]) queries = [line.split() for line in lines[n+2:]] return n, values, edges, queries def main(input_string): n, values, edges, queries = parse_input(input_string) results = process_tree_queries(n, values, edges, queries) return \\"n\\".join(map(str, results))"},{"question":"Given an integer array `A` of length `N`, return the length of the longest subarray with all elements equal. If there are multiple such subarrays, return the length of the first one that appears. -----Constraints----- - 1 <= N <= 10^5 - -10^6 <= A[i] <= 10^6 -----Input----- The first line contains an integer, `N`, the length of the array. The second line contains `N` integers separated by spaces representing the elements of the array `A`. -----Output----- Output the length of the longest subarray with all elements equal. -----Sample Input----- 8 4 4 4 3 3 3 3 2 -----Sample Output----- 4 The longest subarray with all elements equal is [3, 3, 3, 3]. Its length is 4.","solution":"def longest_subarray_of_equal_elements(arr): Returns the length of the longest subarray with all elements equal. If there are multiple such subarrays, returns the length of the first one that appears. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length)"},{"question":"Given a string s and a dictionary of words wordDict, return the length of the longest sequence in which each word in the sequence is formed by adding one character to the previous word from the dictionary and all intermediate steps are valid words in the dictionary as well. Note: - You may assume the dictionary does not contain duplicate words. - All words are of lowercase alphabets. Example: Input: s = \\"a\\" wordDict = [\\"a\\", \\"at\\", \\"bat\\", \\"batman\\", \\"man\\", \\"an\\", \\"ant\\"] Output: 3 Explanation: The longest sequence is \\"a\\" -> \\"an\\" -> \\"ant\\", which has length 3. Input: s = \\"a\\" wordDict = [\\"a\\", \\"ar\\", \\"art\\", \\"tar\\", \\"tart\\", \\"artist\\", \\"artists\\"] Output: 4 Explanation: The longest sequence is \\"a\\" -> \\"ar\\" -> \\"art\\" -> \\"tart\\", which has length 4.","solution":"def longest_sequence_length(s, wordDict): Returns the length of the longest sequence where each word in the sequence is formed by adding one character to the previous word from the dictionary, and all intermediate steps are valid words in the dictionary as well. wordSet = set(wordDict) if s not in wordSet: return 0 # A helper function to find the next word by adding one character def find_next_words(current_word): res = [] for i in range(len(current_word) + 1): for ch in \'abcdefghijklmnopqrstuvwxyz\': new_word = current_word[:i] + ch + current_word[i:] if new_word in wordSet: res.append(new_word) return res # A dictionary to keep track of the longest sequence ending with a specific word longest = {s: 1} # A queue to perform BFS queue = [s] max_length = 1 while queue: current_word = queue.pop(0) next_words = find_next_words(current_word) for next_word in next_words: if next_word not in longest or longest[next_word] < longest[current_word] + 1: longest[next_word] = longest[current_word] + 1 queue.append(next_word) max_length = max(max_length, longest[next_word]) return max_length"},{"question":"Alice has to navigate a rectangular grid of dimensions **m x n**. She starts at the top-left corner (0, 0) and wants to reach the bottom-right corner (m-1, n-1). There are obstacles on the grid that may block her path. Design a function **find_paths** to help Alice determine the number of unique paths she can take to reach her destination. She can only move either down or right at any point in time. Keep in mind: * If **m < 1** or **n < 1**, return 0. * If the starting point or the destination point is an obstacle, return 0. * Obstacles are represented as \'1\' and empty spaces are represented as \'0\' in a 2D list grid. Examples: find_paths(3, 3, [[0, 0, 0], [0, 1, 0], [0, 0, 0]]) Output: 2 find_paths(2, 2, [[0, 1], [0, 0]]) Output: 1","solution":"def find_paths(m, n, grid): if m < 1 or n < 1 or grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function `generate_fibonacci(n)` that returns a list containing the first `n` numbers of the Fibonacci sequence, where `n` is a non-negative integer. The Fibonacci sequence starts with [0, 1], and each subsequent number is the sum of the previous two. Examples: `generate_fibonacci(0) --> []` `generate_fibonacci(1) --> [0]` `generate_fibonacci(5) --> [0, 1, 1, 2, 3]` `generate_fibonacci(10) --> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]` Special case: If `n` is 0, return an empty list.","solution":"def generate_fibonacci(n): Generate a list containing the first `n` numbers of the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to generate Returns: List[int]: A list of the first `n` Fibonacci numbers if n == 0: return [] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) return fibonacci_sequence[:n]"},{"question":"Given an array of integers, write a function to find the index of the first occurrence of a specified target integer. If the target integer is not found in the array, return -1. You are required to implement this function effectively. Input: First line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. - The third line contains an integer X, the target element whose first occurrence index needs to be found. Output: For each test case, output a single line containing the index of the first occurrence of the target integer in the array. If the target integer is not in the array, return -1. User Task: Complete the function findFirstOccurrence(arr, X) that takes in an array of integers and the target integer, and returns the index of the first occurrence of X in the array. If X is not found, the function should return -1. Constraints: 1 <= T <= 100 1 <= N <= 1000 -10^5 <= array elements <= 10^5 -10^5 <= X <= 10^5 Example: Input: 2 5 1 2 3 4 5 3 4 5 4 3 2 6 Output: 2 -1 Explanation: Testcase 1: Element 3 is found at index 2 (0-based indexing). Testcase 2: Element 6 is not found in the array, thus the output is -1.","solution":"def findFirstOccurrence(arr, X): Returns the index of the first occurrence of X in the array arr. If X is not found, returns -1. try: return arr.index(X) except ValueError: return -1 def process_test_cases(test_cases): Processes multiple test cases. test_cases: List of tuples, where each tuple contains (N, arr, X) Returns a list of results for each test case. results = [] for N, arr, X in test_cases: results.append(findFirstOccurrence(arr, X)) return results"},{"question":"In a parallel universe, there exists a unique structure made of interconnected nodes, known as the HyperTree. The HyperTree is a rooted tree where each node may contain zero or more child nodes, and each child node can have its own children, and so on. The nodes are uniquely indexed from 1 to N, with node 1 being the root. Professor Hyperon is fascinated by this structure and wants you to help analyze the depth of each node in the HyperTree. The depth of a node is defined as the number of edges from the root node to that node. Given the structure of the HyperTree, write a program that calculates and outputs the depth of each node. # Input The input consists of a single dataset with the following format: - An integer N (1 ≤ N ≤ 100000), the number of nodes in the HyperTree. - N-1 lines, each containing two integers u and v (1 ≤ u, v ≤ N), representing an edge between nodes u and v. Nodes are indexed from 1 to N. # Output The output should consist of N lines, where the i-th line contains the depth of node i. # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 ``` Output ``` 0 1 1 2 2 2 2 ``` # Explanation - Node 1 is the root and has a depth of 0. - Nodes 2 and 3 are directly connected to the root and have a depth of 1. - Nodes 4 and 5 are children of node 2 and have a depth of 2. - Nodes 6 and 7 are children of node 3 and have a depth of 2.","solution":"def calculate_depths(n, edges): from collections import deque, defaultdict def bfs(root, n): depths = [-1] * n depths[root - 1] = 0 queue = deque([root]) while queue: node = queue.popleft() current_depth = depths[node - 1] for neighbor in graph[node]: if depths[neighbor - 1] == -1: # if not visited depths[neighbor - 1] = current_depth + 1 queue.append(neighbor) return depths graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) return bfs(1, n)"},{"question":"You have a bakery that produces `n` different types of pastries. Each type of pastry has a specific cost `ci` and a specific number of units `ui` available. There are `m` events each day, and each event can be one of two types: 1. An order, where a customer can purchase up to `p` pastries, prioritizing by type and keeping within their budget `b`. 2. A restock, where a specific type of pastry receives additional units. Each event is defined as follows: - `Order`: `O p b`, where `p` is the maximum number of pastries a customer can purchase, and `b` is the maximum budget the customer has. - `Restock`: `R t x`, where `t` is the type of pastry being restocked, and `x` is the number of additional units. For an order, the customer will first try to buy the most expensive pastry type available within their budget. If multiple types have the same cost, they will buy the one with the largest available units first. The customer proceeds to the next available type once they can no longer buy within their budget or have reached their maximum purchase limit. For a restock, the units of the specified pastry type increase by the given amount. Write a program to process the events and print the number of pastries purchased for each order event. Input The first line contains the positive integer `n` (1 ≤ n ≤ 10^5) - the number of types of pastries. Each of the following `n` lines contains two integers `ci` and `ui` (1 ≤ ci, ui ≤ 10^9) - the cost and units available for each pastry type. The next line contains the positive integer `m` (1 ≤ m ≤ 10^5) - the number of events. Each of the following `m` lines describes an event: - `O p b` (1 ≤ p ≤ 10^5, 1 ≤ b ≤ 10^9) for an order event. - `R t x` (1 ≤ t ≤ n, 1 ≤ x ≤ 10^9) for a restock event. Output For each order event, print the number of pastries purchased by the customer. Example Input 3 5 10 3 5 8 2 4 O 4 15 R 2 10 O 5 30 O 2 5 Output 2 5 1 Note In the first example, the events are processed as follows: 1. Order event: Customer can buy up to 4 pastries with a budget of 15. They buy 2 pastries of type 3 (8 each) totaling 16 which exceeds the budget, hence they buy 2 pastries within the budget. 2. Restock event: 10 more units of type 2 pastries are added. 3. Order event: Customer can buy up to 5 pastries with a budget of 30. They buy 2 pastries of type 3 (8 each) and 3 pastries of type 1 (5 each) totaling 31 which exceeds the budget, hence they buy 5 pastries within the budget. 4. Order event: Customer can buy up to 2 pastries with a budget of 5. They buy 1 pastry of type 1 (5 each) within the budget.","solution":"import heapq def bakery_operations(n, pastries, m, events): # Build the available pastries list, adding index for each type for restock purposes available_pastries = [(-ci, -ui, i) for i, (ci, ui) in enumerate(pastries)] heapq.heapify(available_pastries) # Units store to keep track of current units of each type units = [ui for _, ui in pastries] results = [] for event in events: if event[0] == \'O\': p, b = event[1], event[2] purchased = 0 temp_pastries = [] while available_pastries and p > 0 and b > 0: neg_ci, neg_ui, i = heapq.heappop(available_pastries) ci, ui = -neg_ci, -neg_ui if ui > units[i]: # More units than they really are heapq.heappush(temp_pastries, (neg_ci, -units[i], i)) continue can_buy = min(p, units[i], b // ci) if can_buy > 0: purchased += can_buy p -= can_buy b -= can_buy * ci units[i] -= can_buy if units[i] > 0: heapq.heappush(temp_pastries, (-ci, -units[i], i)) for item in temp_pastries: heapq.heappush(available_pastries, item) results.append(purchased) elif event[0] == \'R\': t, x = event[1]-1, event[2] units[t] += x heapq.heappush(available_pastries, (-pastries[t][0], -units[t], t)) return results"},{"question":"You are given a list of n houses numbered from 1 to n on a straight line street. Each house has a mailbox. There are delivery trucks that carry packages and they have to deliver a certain number of packages to specific houses efficiently. You are provided with a list of deliveries where each delivery is described by a pair [h, p] indicating house h needs p packages. Write a function to calculate the total distance the truck will travel if it starts at the first house (house numbered 1) and stops to deliver all packages at respective houses as described in the deliveries list. The truck can only move in one direction (right to left) and cannot go backward. The truck returns to the starting point (house 1) after delivering all packages. Example 1: Input: houses = 5, deliveries = [[2, 3], [4, 2], [5, 1]] Output: 8 Explanation: The truck starts at house 1, travels to house 2 to deliver 3 packages, then to house 4 to deliver 2 packages, and finally to house 5 to deliver 1 package. It then returns back to house 1. The total distance traveled is 1+2+1+4=8 units. Example 2: Input: houses = 3, deliveries = [[1, 2], [3, 3]] Output: 4 Explanation: The truck starts at house 1 and delivers 2 packages, then it travels to house 3 to deliver 3 packages, and finally returns back to house 1. The total distance traveled is 0+2+2=4 units. Example 3: Input: houses = 7, deliveries = [[3, 10], [6, 5], [7, 2]] Output: 10 Explanation: The truck starts at house 1, travels to house 3 to deliver 10 packages, then to house 6 to deliver 5 packages, and finally to house 7 to deliver 2 packages. It then returns back to house 1. The total distance traveled is 2+3+1+4=10 units. Constraints: 1 <= houses <= 10^5 1 <= deliveries.length <= 10^5 1 <= h <= houses 1 <= p <= 10^4","solution":"def calculate_total_distance(houses, deliveries): Calculate the total distance the truck will travel to deliver all packages. Args: houses (int): The number of houses. deliveries (List[List[int]]): A list of deliveries where each element is a list [h, p]. Returns: int: The total distance traveled by the truck. if not deliveries: return 0 max_house_number = max(delivery[0] for delivery in deliveries) return max_house_number * 2"},{"question":"Complete the function to find the first missing positive integer from an unordered array. Example 1: Input: [1, 2, 0] Output: 3 Example 2: Input: [3, 4, -1, 1] Output: 2 Example 3: Input: [7, 8, 9, 11, 12] Output: 1 Your Task: The task is to complete the function findFirstMissingPositive() which takes an array of integers as input parameter and returns the first missing positive integer. The newline is automatically appended by the driver code. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= Length of the array <= 10^6 -10^9 <= Elements of the array <= 10^9","solution":"def findFirstMissingPositive(nums): n = len(nums) for i in range(n): # while the current number is in the range [1, n] and not in its correct position while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap the element nums[i] with its correct position nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # After reorganization, find the first missing positive for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, the missing positive is the next one return n + 1"},{"question":"Tanya has a collection of N books that she\'s eager to read. Each book fits into exactly one of M different genres. Moreover, each book has a specific reading time associated with it. Tanya wants to determine the minimum total reading time required to read at least one book from each genre. Input The first line contains two integers N and M (1 ≤ N, M ≤ 100,000) — the number of books and the number of genres. Each of the next N lines contains two integers g_i and t_i (1 ≤ g_i ≤ M, 1 ≤ t_i ≤ 10,000) — the genre of the i-th book and the time it takes to read the i-th book. Output Print a single integer — the minimum total reading time needed to read at least one book from each genre. Examples Input 5 3 1 10 2 5 3 7 2 8 1 6 Output 18 Input 4 2 1 9 2 4 1 3 2 6 Output 7 Note In the first example, Tanya can read the book with time 10 from genre 1, the book with time 5 from genre 2, and the book with time 7 from genre 3. In the second example, she can read the book with time 3 from genre 1 and the book with time 4 from genre 2.","solution":"def minimum_reading_time(N, M, books): Returns the minimum total reading time needed to read at least one book from each genre. Parameters: - N: int, number of books - M: int, number of genres - books: list of tuples, where each tuple contains (g_i, t_i), the genre and time to read the book Returns: - int: minimum total reading time import collections genre_times = collections.defaultdict(list) # Collect the minimum reading time for each genre for genre, time in books: genre_times[genre].append(time) # For each genre, select the minimum time min_times = [] for time_list in genre_times.values(): min_times.append(min(time_list)) # Sum of all minimum times return sum(min_times)"},{"question":"In a small rural town, there is a simple weather station that monitors daily temperatures. The station records temperatures in degrees Celsius for each day. The data is stored in an array where each element represents the temperature of a specific day. The town\'s residents are particularly interested in how often the temperature rises compared to the previous day. Your task is to write a function that takes in an array of daily temperatures and returns the count of days where the temperature is higher than the day before. ``` Input: Array of integers Output: Integer Function Signature: def count_increasing_days(temperatures: List[int]) -> int Examples: Input: [20, 21, 19, 22, 25] Output: 3 (Explanation: The temperatures rose on days 2, 4, and 5) Input: [15, 15, 15, 15, 15] Output: 0 (Explanation: The temperature did not rise on any day) Input: [12, 14, 13, 15, 17] Output: 3 (Explanation: The temperatures rose on days 2, 4, and 5) ```","solution":"from typing import List def count_increasing_days(temperatures: List[int]) -> int: Returns the count of days where the temperature is higher than the previous day. if not temperatures or len(temperatures) == 1: return 0 count = 0 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: count += 1 return count"},{"question":"You are part of the team developing a new analytics software for a logistics company. One of the core features they need is the ability to calculate optimal delivery routes for their truck fleet. Given a list of delivery points with their respective coordinates, your task is to determine the minimum total distance required for a single truck to start from a specified depot, visit each delivery point exactly once, and return to the depot. This problem is essentially a classic Travelling Salesman Problem (TSP). -----Input----- The input consists of: - One line with one integer n (2 le n le 15), the number of delivery points. - One line with two real numbers x_ d and y_ d (-1000.0 le x_ d, y_ d le 1000.0), the coordinates of the depot. - n lines, each with two real numbers x_ i and y_ i (-1000.0 le x_ i, y_ i le 1000.0), the coordinates of the delivery points. -----Output----- Output one real number, the minimum total distance required to visit all delivery points exactly once and return to the depot. The result should be accurate to within an absolute error of 10^{-6}. -----Examples----- Sample Input: 3 0.0 0.0 1.0 1.0 1.0 0.0 0.0 1.0 Sample Output: 4.000000","solution":"import itertools import math def tsp_min_distance(n, depot, points): def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) all_points = [depot] + points min_dist = float(\'inf\') for perm in itertools.permutations(range(1, n+1)): current_dist = 0 # From depot to the first point current_dist += distance(depot, all_points[perm[0]]) # Traveling through each point in the permutation for i in range(len(perm) - 1): current_dist += distance(all_points[perm[i]], all_points[perm[i + 1]]) # Returning to the depot current_dist += distance(all_points[perm[-1]], depot) # Updating the minimum distance min_dist = min(min_dist, current_dist) return min_dist"},{"question":"Given a string S and a pattern T, determine if T is a subsequence of S. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, \\"abc\\", \\"abg\\", \\"bdf\\" are subsequences of \\"abcdefg\\". -----Input----- The input contains several test cases. Each test case consists of two strings S (1 <= |S| <= 10^5) and T (1 <= |T| <= 10^5). Input is terminated by a single line containing a pound character \\"#\\". -----Output----- For each test case, output \\"YES\\" if T is a subsequence of S, otherwise output \\"NO\\". -----Example----- Input: abcdefg abc abcdefg bdf abcdefg xyz # Output: YES YES NO","solution":"def is_subsequence(S, T): Determine if T is a subsequence of S. iter_S = iter(S) return all(char in iter_S for char in T) def process_input(input_lines): Process the provided list of input lines and returns the results for each test case. results = [] for line in input_lines: if line.strip() == \\"#\\": break S, T = line.split() results.append(\\"YES\\" if is_subsequence(S, T) else \\"NO\\") return results"},{"question":"You are given an m x n matrix board, representing the state of a board in a game of life. The board is connected both vertically and horizontally into a continuous space where any board[i][j] is connected to board[i-1][j], board[i+1][j], board[i][j-1], and board[i][j+1]. The cells in the board can either be alive (1) or dead (0). According to the game’s rules, each cell’s state is updated simultaneously in each generation based on the following rules: 1. Any live cell with fewer than two live neighbors dies because of under-population. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies because of over-population. 4. Any dead cell with exactly three live neighbors becomes a live cell because of reproduction. Write a function `gameOfLife` that will update the grid to the next state according to the rules of the game. Example: Input: board = [ [0,1,0], [0,0,1], [1,1,1], [0,0,0] ] Output: [ [0,0,0], [1,0,1], [0,1,1], [0,1,0] ] Your Task: You don\'t need to read input or print anything. Your task is to complete the function gameOfLife() which takes the matrix board as input and returns the next state of the board after applying the rules of the game. Constraints: m == board.length n == board[i].length 1 <= m, n <= 100 board[i][j] is 0 or 1.","solution":"def gameOfLife(board): Update the board to the next state according to the rules of the game. m, n = len(board), len(board[0]) def count_lives(i, j): Count live neighbors for board[i][j] directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for direction in directions: ni, nj = i + direction[0], j + direction[1] if 0 <= ni < m and 0 <= nj < n and abs(board[ni][nj]) == 1: count += 1 return count for i in range(m): for j in range(n): live_neighbors = count_lives(i, j) if board[i][j] == 1 and (live_neighbors < 2 or live_neighbors > 3): board[i][j] = -1 # -1 means the cell was alive and is now dead if board[i][j] == 0 and live_neighbors == 3: board[i][j] = 2 # 2 means the cell was dead and is now alive for i in range(m): for j in range(n): if board[i][j] > 0: board[i][j] = 1 else: board[i][j] = 0 return board"},{"question":"You are given a list of integers. Your task is to find the smallest value in the list that is larger than the mean of the list. If no such value exists, return `None`. # Input A list of integers. The list will always have at least one integer. # Output An integer representing the smallest value larger than the mean, or `None` if no such value exists. # Examples #1: ``` Input: [1, 3, 5, 7] Output: 5 ``` Explanation: The mean value of the list is (1 + 3 + 5 + 7) / 4 = 4. So, the smallest value larger than 4 is 5. #2: ``` Input: [10, 20, 30, 40, 50] Output: 30 ``` Explanation: The mean value of the list is (10 + 20 + 30 + 40 + 50) / 5 = 30. No number in the list is smaller than 30, so the next number meeting the condition is 30 itself. #3: ``` Input: [5, 5, 5, 5] Output: None ``` Explanation: The mean value of the list is (5 + 5 + 5 + 5) / 4 = 5. Since all numbers are equal to the mean value, there is no number in the list larger than the mean. Thus, the result is `None`.","solution":"def smallest_value_larger_than_mean(lst): Returns the smallest value in the list that is larger than the mean of the list. If no such value exists, return None. if not lst: return None mean_value = sum(lst) / len(lst) eligible_values = [num for num in lst if num > mean_value] return min(eligible_values) if eligible_values else None"},{"question":"Given an array of integers nums and an integer k, return the maximum product of any three numbers in the array such that the product is less than or equal to k. If no such triplet exists, return -1. Example 1: Input: nums = [1, 2, 3, 4], k = 24 Output: 24 Explanation: The triplet (1, 3, 4) has the maximum product 12 which is less than or equal to 24. Example 2: Input: nums = [-5, -2, 1, 3], k = -1 Output: -1 Explanation: There is no triplet whose product is less than or equal to -1.","solution":"from itertools import combinations import math def maximumProduct(nums, k): Returns the maximum product of any three numbers in the array nums such that the product is less than or equal to k. If no such triplet exists, return -1. max_product = -1 for triplet in combinations(nums, 3): product = math.prod(triplet) if product <= k: max_product = max(max_product, product) return max_product"},{"question":"Nina is a software engineer who loves to play with numbers. She recently encountered an interesting problem while designing an algorithm for number pattern analysis. Given a number mathbf{N}, she needs to find out the count of distinct, non-empty substrings of the binary representation of mathbf{N}. The binary representation should be treated as a string of \'0\'s and \'1\'s. For example, for mathbf{N = 5}, the binary representation is \\"101\\", and the distinct non-empty substrings are \\"1\\", \\"0\\", \\"10\\", \\"01\\", \\"101\\". So, the count of distinct non-empty substrings is 5. To solve the problem, Nina must handle very large numbers efficiently, as the value of mathbf{N} can go up to 10^{18}. She needs your help to write a code that can compute the count of distinct non-empty substrings for any given mathbf{N} in a reasonable amount of time. Input Format The first line of input contains a single integer mathbf{T}, denoting the number of test cases. Each of the next mathbf{T} lines contains a single integer mathbf{N}. Output Format Output consists of mathbf{T} lines, each containing the count of distinct non-empty substrings of the binary representation of the corresponding mathbf{N}. Constraints mathbf{1 leq T leq 10^5} mathbf{1 leq N leq 10^{18}} Sample Input 3 5 13 7 Sample Output 5 6 6 Explanation For mathbf{N = 5} (binary: \\"101\\"), there are 5 distinct non-empty substrings: \\"1\\", \\"0\\", \\"10\\", \\"01\\", \\"101\\". For mathbf{N = 13} (binary: \\"1101\\"), distinct non-empty substrings are: \\"1\\", \\"0\\", \\"11\\", \\"10\\", \\"01\\", \\"110\\", \\"101\\", \\"1101\\". For mathbf{N = 7} (binary: \\"111\\"), distinct non-empty substrings are: \\"1\\", \\"11\\", \\"111\\".","solution":"def count_distinct_substrings(N): Returns the count of distinct non-empty substrings of the binary representation of N. binary_rep = bin(N)[2:] # Get binary representation of N and remove \'0b\' prefix substrings = set() # Use a set to store distinct substrings # Generate all non-empty substrings of the binary representation for i in range(len(binary_rep)): for j in range(i + 1, len(binary_rep) + 1): substrings.add(binary_rep[i:j]) return len(substrings) def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(count_distinct_substrings(N)) return results"},{"question":"Dr. Doom is known for his meticulous plans and intricate strategies. Recently, he has devised a new encryption algorithm to secure his plans from his enemies. The algorithm works by shifting each character in a given string by a certain number of positions in the alphabet. Your task is to help Dr. Doom by writing a program that performs this encryption. For simplicity, only shift alphabetic characters while keeping the non-alphabet characters unchanged. Both uppercase and lowercase letters should be shifted, taking into account the wrapping of the alphabet (i.e., \'z\' shifted by 1 becomes \'a\'). -----Input----- The first line of the input contains a single integer s (1 ≤ s ≤ 25) — the number of positions each letter should be shifted. The second line of the input contains a string str (1 ≤ len(str) ≤ 100) — the string to be encrypted. -----Output----- Print the encrypted string according to the described encryption algorithm. -----Examples----- Input 3 Hello, World! Output Khoor, Zruog! Input 1 Attack at dawn. Output Buubdl bu ebxo.","solution":"def encrypt_string(s, string): def shift_char(c, s): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + s) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + s) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, s) for c in string) # Basic test case if __name__ == \\"__main__\\": s = 3 string = \\"Hello, World!\\" result = encrypt_string(s, string) print(result) # Expected: Khoor, Zruog!"},{"question":"Write a function that takes a list of integer grades as input and returns the average grade rounded to the nearest integer. If the input list is empty, the function should return 0. For example: ``` [70, 80, 90] --> 80 [50, 65, 85, 75] --> 69 [] --> 0 ```","solution":"def average_grade(grades): Returns the average grade rounded to the nearest integer. If the input list is empty, returns 0. if not grades: return 0 return round(sum(grades) / len(grades))"},{"question":"You are given an integer array A of length N. You need to determine if there exists an element that appears more than N/2 times in the array. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ A[i] ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N A1 A2 A3 ... AN -----Output----- If there exists an element that appears more than N/2 times, print that element. If there are multiple such elements, print the smallest one. If no such element exists, print -1. -----Sample Input----- 5 3 3 4 2 3 -----Sample Output----- 3 The element 3 appears 3 times which is more than 5//2 = 2 times.","solution":"def majority_element(n, A): Determines if there exists an element in array A that appears more than n/2 times. Args: n (int): Length of the array A. A (list of int): List of integers. Returns: int: The majority element if it exists, otherwise -1. from collections import Counter count = Counter(A) majority_count = n // 2 for elem in count: if count[elem] > majority_count: return elem return -1"},{"question":"Your task is to determine and return the number of unique words in a given sentence. Ignore case sensitivity and punctuation. For example: ```python count_unique_words(\\"Hello, world! Hello.\\") => 2 count_unique_words(\\"Testing, testing, 1 2 3!\\") => 4 ``` Note: 1. You should take care of punctuation marks and ignore them. 2. Consider words with different cases as the same word (e.g., \\"Hello\\" and \\"hello\\" are considered the same). 3. You can use Python string functions to clean the words and make them uniform before counting the unique words. Here is a list of punctuation marks you should consider: [\'.\', \',\', \'!\', \'?\', \';\', \':\', \'-\', \'_\', \'(\', \')\', \'[\', \']\', \'{\', \'}\', \'\\"\', \\"\'\\", \'...\'] P.S. You can assume the input sentence is a non-empty string.","solution":"import re def count_unique_words(sentence): Returns the number of unique words in a given sentence. Args: sentence (str): The input sentence to count unique words from. Returns: int: The number of unique words. # Convert the sentence to lower case sentence = sentence.lower() # Remove the punctuation using regex sentence = re.sub(r\'[^ws]\', \'\', sentence) # Split the sentence into words words = sentence.split() # Create a set of unique words unique_words = set(words) # Return the number of unique words return len(unique_words)"},{"question":"You are an environmental scientist analyzing the data collected from different sensors located in various regions. Each sensor records the daily temperature at its respective location. However, due to some technical issues, some sensors randomly report inaccurate temperatures. Your task is to identify and report the maximum and minimum temperature recorded by the sensors each day, while excluding any temperatures that are deemed inaccurate based on certain criteria. A temperature recording is considered: - Accurate if it is within the inclusive range of -100 to 100 degrees Fahrenheit. - Inaccurate and needs to be excluded if it falls outside this range. Write a program that reads the daily recorded temperatures from multiple sensors and reports the maximum and minimum accurate temperatures for each day. If all recorded temperatures for a day are inaccurate, return \\"NA\\" for both maximum and minimum temperatures on that day. -----Input----- Input begins with a line containing an integer D (1 le D le 100), the number of days. The next D lines each contain an integer S (1 le S le 1000), followed by S integers representing the temperatures recorded by S sensors on that day. -----Output----- For each day, output two integers: the maximum and minimum accurate temperatures, separated by a space. If there are no accurate temperatures, output \\"NA NA\\". -----Examples----- Sample Input: 3 5 32 45 200 15 -93 4 105 -101 80 77 3 -150 200 250 Sample Output: 45 -93 80 77 NA NA","solution":"def find_daily_max_min(D, temperature_data): results = [] for day in temperature_data: S, *temps = day accurate_temps = [temp for temp in temps if -100 <= temp <= 100] if accurate_temps: max_temp = max(accurate_temps) min_temp = min(accurate_temps) results.append(f\\"{max_temp} {min_temp}\\") else: results.append(\\"NA NA\\") return results"},{"question":"Given a string S and a pattern P, check if all characters of the pattern P are present in the string S in the same order. You can assume that the string S and pattern P consist of only lowercase alphabets. Example 1: Input: S = \\"codingassessment\\" P = \\"cat\\" Output: True Explanation: The characters \'c\', \'a\', and \'t\' appear in the string S in the same order as in the pattern P, thus the output is true. Example 2: Input: S = \\"codingassessment\\" P = \\"cts\\" Output: False Explanation: The characters \'c\', \'t\', and \'s\' do not all appear in the same order in the string S, thus the output is false. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isSubsequence(S, P) which takes the string S and the pattern P as inputs and returns if P is a subsequence of S. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5 1 ≤ |P| ≤ 10^5","solution":"def isSubsequence(S, P): Checks if all characters of the pattern P are present in the string S in the same order. it = iter(S) return all(char in it for char in P)"},{"question":"Given a string `s`, you need to remove the minimum number of parentheses `(` or `)` so that the resulting string is valid and return any valid string. A string is considered valid if it meets the following criteria: 1. It is the empty string, or 2. It can be written as `AB` where `A` and `B` are valid strings, or 3. It can be written as `(A)` where `A` is a valid string. # Input The input consists of a string `s` (1 ≤ |s| ≤ 10^5) containing only characters `(`, `)`, and lowercase English letters. # Output Output a string with the minimum number of parentheses removed so that the resulting string is valid. If there are multiple valid outputs, you are allowed to return any of them. # Examples Input ``` lee(t(c)o)de) ``` Output ``` lee(t(c)o)de ``` or ``` lee(t(c)o)d ``` Input ``` a)b(c)d ``` Output ``` ab(c)d ``` Input ``` ))(( ``` Output ``` \\"\\" ``` # Note In the first example, you need to remove one `)` at the end to make the string valid. In the second example, you need to remove the first `)` at index 1. In the third example, removing all parentheses makes the string valid. There can be multiple solutions to this problem, as long as the result is valid.","solution":"def minRemoveToMakeValid(s: str) -> str: # First pass: remove invalid closing parentheses open_paren_stack = [] s_list = list(s) for i, char in enumerate(s_list): if char == \'(\': open_paren_stack.append(i) elif char == \')\': if open_paren_stack: open_paren_stack.pop() else: s_list[i] = \'\' # Mark invalid closing parenthesis for removal # Second pass: remove invalid opening parentheses left in stack while open_paren_stack: s_list[open_paren_stack.pop()] = \'\' return \'\'.join(s_list)"},{"question":"Adam is an aspiring software developer who recently started learning about different sorting algorithms. He has decided to practice by sorting arrays using the Bubble Sort algorithm. Adam knows the theory but wants to create a function to sort arrays while counting the number of swaps performed. He needs your help to implement this. Your task is to write a function that takes an array of integers and sorts it using Bubble Sort algorithm, and also returns the number of swaps performed during the sorting process. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. -----Output----- Print the sorted array on the first line. Print the number of swaps performed during the sorting process on the second line. -----Examples----- Input 5 5 3 1 4 2 Output 1 2 3 4 5 7 Input 4 4 3 2 1 Output 1 2 3 4 6 -----Note----- In the first sample, the array is sorted in 7 swaps using Bubble Sort. In the second sample, the array is sorted in 6 swaps using Bubble Sort.","solution":"def bubble_sort_with_swaps(arr): Sorts an array using the Bubble Sort algorithm and counts the number of swaps. Parameters: arr (list of int): The array to sort. Returns: tuple: A tuple containing the sorted array and the number of swaps. n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swap_count += 1 return arr, swap_count"},{"question":"Amy has to perform an operation on sequences of integers and produce a modified sequence as output. -----Description----- Given a sequence of non-negative integers, your task is to transform it into a new sequence based on the following rules: 1. If an element is even, replace it with half of that element. 2. If an element is odd, replace it with three times that element plus one. Repeat the transformation until all elements in the sequence become 1. -----Input----- The first line of input contains an integer N — the number of test cases. N tests follow. For each test case: - The first line contains an integer M — the length of the sequence. - The second line contains M space-separated non-negative integers — the sequence of integers. -----Output----- For each test case, output the transformed sequence as space-separated integers on a single line. -----Constraints----- - 1 ≤ N ≤ 10 - 1 ≤ M ≤ 1000 - Each integer in the sequence is between 0 and 10^6, inclusive. -----Subtasks----- - Sub task #1 (20 points): The length of the sequence does not exceed 10. - Sub task #2 (30 points): The maximum integer in the sequence does not exceed 1000. - Sub task #3 (50 points): Original constraints. -----Example----- Input: 2 3 6 0 7 2 1 2 Output: 1 0 1 1 1","solution":"def transform_sequence(seq): def transform(n): if n == 0: return 0 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 return n return [transform(x) for x in seq] def process_test_cases(test_cases): results = [] for seq in test_cases: result = transform_sequence(seq) results.append(result) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) index += 1 test_cases = [] for _ in range(N): M = int(data[index]) index += 1 sequence = list(map(int, data[index:index+M])) index += M test_cases.append(sequence) results = process_test_cases(test_cases) for result in results: print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Exercise Write a function `flattenDictionary` that takes a dictionary as input where the keys are strings and the values can be either another dictionary or a string. Your function should return a new dictionary where all nested keys are flattened into a single level. The keys in the new dictionary should be the fully qualified path of the original keys separated by dots (\'.\'). For example: ```python input_dict = { \\"user\\": { \\"name\\": \\"John\\", \\"address\\": { \\"city\\": \\"New York\\", \\"zipcode\\": \\"10001\\" } }, \\"website\\": \\"example.com\\" } ``` The function should return: ```python { \\"user.name\\": \\"John\\", \\"user.address.city\\": \\"New York\\", \\"user.address.zipcode\\": \\"10001\\", \\"website\\": \\"example.com\\" } ``` # Guidelines - You can assume all input dictionaries are valid. - The keys that point to a dictionary in the input can have both dictionary and non-dictionary values. - The order of keys in the output dictionary does not matter. Create the function `flattenDictionary` to solve this problem.","solution":"def flattenDictionary(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. The keys in the new dictionary are the fully qualified path of the original keys separated by dots. :param d: Nested dictionary to flatten :param parent_key: The base key for nested dictionaries (used internally for recursion) :param sep: Separator for keys (default is \'.\') :return: Flattened dictionary items = [] for k, v in d.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): items.extend(flattenDictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Mira is developing a motion sensing security system for her home. The system processes continuous data from sensors, which capture motion as a sequence of integers. Each integer represents the motion strength recorded at a specific time. A segment with high motion is detected if the sum of the values in the segment exceeds or equals a given threshold T. Mira wants to determine the length of the shortest contiguous segment of data that has a sum of at least T. She needs your help to write a program that achieves this. -----Input----- The first line contains two integers n and T (1 ≤ n ≤ 10^5, 1 ≤ T ≤ 10^9) - the number of motion data points and the threshold value respectively. The second line contains n space-separated integers a_1, a_2, ..., a_n where a_i (1 ≤ a_i ≤ 1000) represents the strength of motion recorded at time i. -----Output----- Output a single integer representing the length of the shortest contiguous segment with a sum of at least T. If no such segment exists, output -1. -----Examples----- Input 5 7 1 2 3 4 5 Output 2 Input 8 15 1 2 3 4 5 1 2 3 Output 5 Input 3 10 1 1 1 Output -1 -----Note----- In the first example, the shortest segment with a sum of at least 7 is [3, 4] which has a length of 2. In the second example, the segment [2, 3, 4, 5, 1] is the shortest with the required sum, having a length of 5. In the third example, no segment sum equals or exceeds 10, so the output is -1.","solution":"def shortest_contiguous_segment(n, T, motion_data): Finds the length of the shortest contiguous segment with a sum of at least the threshold T. Returns -1 if no such segment exists. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += motion_data[right] while current_sum >= T: min_length = min(min_length, right - left + 1) current_sum -= motion_data[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a linked list and a positive integer n. Your task is to find the nth node from the end of the linked list and return its value. If the linked list has fewer than n nodes, return -1. Example 1: Input: head = [1, 2, 3, 4, 5] n = 2 Output: 4 Explanation: The linked list is [1, 2, 3, 4, 5] and the 2nd node from the end is 4. Example 2: Input: head = [10, 5, 100] n = 1 Output: 100 Explanation: The linked list is [10, 5, 100] and the 1st node from the end is 100. Example 3: Input: head = [8, 9, 7, 15] n = 5 Output: -1 Explanation: The linked list is [8, 9, 7, 15] which has only 4 nodes, so the output is -1. Your Task: You don\'t need to read input or print anything. Complete the function get_nth_from_end() that takes the head of the linked list and n as input parameters and return the value of the nth node from the end. Expected time complexity: O(n) Expected space complexity: O(1) Constraints: 1 <= number of nodes <= 1000 1 <= node value <= 10000 1 <= n <= 1000","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def get_nth_from_end(head, n): Returns the value of the nth node from the end of the linked list. If the linked list is shorter than n nodes, return -1. # Initialize two pointers, both starting at the head first = head second = head # Move the first pointer n steps ahead for _ in range(n): if first is None: return -1 first = first.next # Move both pointers until the first one hits the end while first is not None: first = first.next second = second.next return second.value if second is not None else -1"},{"question":"In a distant galaxy, there exists a matrix called the \\"Galaxy Matrix\\". The matrix has N rows and M columns. The Galactic Council has decided to introduce a special operation for the Galaxy Matrix: 1. Select any submatrix from the Galaxy Matrix. 2. Reverse the order of elements in every row of this submatrix. Formally, if you select a submatrix that starts at (r1, c1) and ends at (r2, c2), for every row i such that r1 ≤ i ≤ r2, all elements from c1 to c2 in that row will be reversed. The Galactic Council wants to perform this operation K times on the initial Galaxy Matrix to transform it into the Galaxy Matrix that is provided as input to you. ------ Input Format ------ - The first line contains two integers, N and M, representing the number of rows and columns in the Galaxy Matrix. - The next N lines contain M space-separated integers representing the initial Galaxy Matrix. - The next N lines contain M space-separated integers representing the target Galaxy Matrix. ------ Output Format ------ Output \\"POSSIBLE\\" if it is feasible to transform the initial Galaxy Matrix to the target Galaxy Matrix using exactly K operations. Otherwise, output \\"IMPOSSIBLE\\". ------ Constraints ------ - 1 ≤ N, M ≤ 100 - 1 ≤ K ≤ 100 - Each element in the matrices is an integer in the range 0 ≤ text{element} ≤ 1000. ----- Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 3 2 1 6 5 4 9 8 7 ----- Sample Output 1 ------ POSSIBLE ----- Explanation 1 ------ One possible set of submatrix operations is: 1. Reverse the first row: [3 2 1]. 2. Reverse the second row: [6 5 4]. 3. Reverse the third row: [9 8 7]. Since the number of operations is exactly 3, which matches K, the output is \\"POSSIBLE\\". ----- Sample Input 2 ------ 2 3 1 2 3 4 5 6 6 5 4 1 2 3 ----- Sample Output 2 ------ IMPOSSIBLE ----- Explanation 2 ------ There is no sequence of exactly K = 1 operations that will transform the initial Galaxy Matrix into the target Galaxy Matrix. Therefore, the output is \\"IMPOSSIBLE\\".","solution":"def are_matrices_equal(mat1, mat2): Check if two matrices are equal. return mat1 == mat2 def is_transformation_possible(n, m, initial_matrix, target_matrix, k): Determine if the target matrix can be obtained from the initial matrix with exactly k row-reversing submatrix operations. # A straightforward solution to check if we can transform using exactly \'k\' operations. # Check if reversing each row individually will get to the target. # This is because performing a reverse operation on a row twice will undo the changes. for _ in range(k): # Simulate one reversal operation on each row if needed for i in range(n): initial_matrix[i] = list(reversed(initial_matrix[i])) return \'POSSIBLE\' if are_matrices_equal(initial_matrix, target_matrix) else \'IMPOSSIBLE\' # Example usage: n = 3 m = 3 initial_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] target_matrix = [ [3, 2, 1], [6, 5, 4], [9, 8, 7] ] k = 3 print(is_transformation_possible(n, m, initial_matrix, target_matrix, k)) # Should print \\"POSSIBLE\\""},{"question":"In a distant land, the Fibonacci bunnies have taken over. These special bunnies have an extraordinary reproduction cycle that follows the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1. You\'re given the task to determine the total number of bunny pairs present after `n` months, given an initial pair of bunnies. Write a function `fibonacci_bunnies(n: int) -> int` that calculates the number of bunny pairs after `n` months. The function should be efficient and handle large values of `n`. For example: - If `n = 0`, the output should be `0` (no bunnies initially). - If `n = 1`, the output should be `1` (one pair of bunnies). - If `n = 5`, the output should be `5` (following the sequence 0, 1, 1, 2, 3, 5). Note: - You may assume that `n` can be as large as 10^5. - Your solution should be efficient and ideally have a time complexity of O(log n).","solution":"def fibonacci_bunnies(n: int) -> int: Returns the number of bunny pairs after n months using an efficient matrix exponentiation method. if n == 0: return 0 if n == 1: return 1 def matrix_multiply(A, B): return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_power(matrix, power): result = [[1, 0], [0, 1]] # Identity matrix base = matrix while power > 0: if power % 2 == 1: result = matrix_multiply(result, base) base = matrix_multiply(base, base) power //= 2 return result F = [[1, 1], [1, 0]] fib_matrix = matrix_power(F, n-1) return fib_matrix[0][0]"},{"question":"Tim is organizing his bookshelf. He wants to arrange his books in such a way that the books with the same title are placed together. Tim is cautious of the exact order in which books with the same title appear. Books are represented by a list of strings, where each string is a title of a book. Your task is to arrange the books such that all books with the same title are adjacent to each other, while maintaining the original order of their first occurrences. Write a function `organize_books(books)` that takes a list of strings `books` as input and returns a list of strings where the books are rearranged according to the given condition. # Input format - A list `books` containing strings, where each string is a title of a book. # Output format - A rearranged list of strings where books with the same title are adjacent and in the original first occurrence order. # Constraints - 1 ≤ |books| ≤ 10^5 - Each title in `books` has at most length 100 and contains only uppercase and lowercase English letters. # Sample Input `[\\"HarryPotter\\", \\"LOTR\\", \\"HarryPotter\\", \\"Bible\\", \\"LOTR\\", \\"Bible\\", \\"HarryPotter\\"]` # Sample Output `[\\"HarryPotter\\", \\"HarryPotter\\", \\"HarryPotter\\", \\"LOTR\\", \\"LOTR\\", \\"Bible\\", \\"Bible\\"]` # Explanation Tim wants all the \\"HarryPotter\\" books to be together, all the \\"LOTR\\" books to be together, and all the \\"Bible\\" books to be together. The order of the first occurrence is \\"HarryPotter\\" -> \\"LOTR\\" -> \\"Bible\\". Therefore, we collect all \\"HarryPotter\\" books first, then all \\"LOTR\\" books, and finally all \\"Bible\\" books.","solution":"def organize_books(books): Arrange the books such that books with the same title are adjacent to each other while maintaining the original order of their first occurrences. from collections import defaultdict, OrderedDict book_count = defaultdict(int) order_dict = OrderedDict() for book in books: if book not in order_dict: order_dict[book] = 1 book_count[book] += 1 result = [] for book in order_dict: result.extend([book] * book_count[book]) return result"},{"question":"A new restaurant in town, Pasta Paradise, has a peculiar system for determining the popularity of their pasta dishes. Each pasta dish has a unique identification number from 1 to n and a rating score that can change over time. A customer can either give a positive review to increase the rating of a dish or a negative review to decrease the rating. The restaurant wants to track the final rating for each dish after all reviews have been counted. --Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of pasta dishes and the number of reviews respectively. Each of the next m lines contains a character \'+\' or \'-\', an integer d representing the dish identification number (1 ≤ d ≤ n), and an integer s representing the score change (1 ≤ s ≤ 100). Record \\"+ d s\\" means a customer gives a positive review that increases the rating of dish d by s points, and record \\"- d s\\" means a customer gives a negative review that decreases the rating of dish d by s points. --Output Print n space-separated integers representing the final ratings of the dishes from dish 1 to dish n after all reviews. --Examples Input 3 5 + 1 5 + 2 10 - 3 2 + 1 3 - 2 1 Output 8 9 -2 Input 4 3 + 1 4 + 3 20 - 1 2 Output 2 0 20 0 --Note In the first sample, there are 3 dishes initially with ratings 0. After the first review, dish 1\'s rating becomes 5. The second review increases dish 2\'s rating to 10. The third review decreases dish 3\'s rating by 2. The fourth review increases dish 1\'s rating by 3, making it 8. The fifth review decreases dish 2\'s rating by 1, making it 9. In the second sample, there are 4 dishes. The first review increases dish 1\'s rating by 4, making it 4. The second review increases dish 3\'s rating by 20. The third review decreases dish 1\'s rating by 2, resulting in a final rating of 2 for dish 1.","solution":"def calculate_final_ratings(n, m, reviews): Calculate the final ratings of pasta dishes after all reviews. :param n: Number of pasta dishes :param m: Number of reviews :param reviews: A list of tuples, each containing a character (\'+\' or \'-\'), an integer d (dish id) and an integer s (score change) :return: List of final ratings for each dish ratings = [0] * n # Initialize ratings of all dishes to 0 # Process each review for review in reviews: sign, d, s = review if sign == \'+\': ratings[d-1] += s elif sign == \'-\': ratings[d-1] -= s return ratings"},{"question":"You are given an array of integers `arr` and a number `k`. Your task is to find the length of the smallest contiguous subarray whose sum is greater than or equal to `k`. If no such subarray exists, return `-1`. Example: Input: ``` arr: [2, 3, 1, 2, 4, 3] k: 7 ``` Output: ``` 2 ``` Explanation: The smallest subarray with a sum greater than or equal to 7 is `[4, 3]`. Constraints: - The length of the array will be between 1 and (10^5). - Each element of the array will be between 1 and (10^4). - The value of `k` will be between 1 and (10^9). Function Signature: ```python def smallest_subarray_with_sum(arr: List[int], k: int) -> int: pass ```","solution":"from typing import List def smallest_subarray_with_sum(arr: List[int], k: int) -> int: n = len(arr) min_length = float(\'inf\') start = 0 current_sum = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"The Jupiter Exploration Company has a fleet of drones that collect data on gas concentrations across a 3D space. Each drone returns its coordinates and the gas concentration level measured at that point. Your task is to determine which drone detected the higher concentration of gas for each pair of drones. -----Input:----- The first line of the data set for this problem is an integer representing the number of collections of data that follow. Each collection contains 7 integers: the x-coordinate, y-coordinate, z-coordinate, and gas concentration of drone A followed by the x-coordinate, y-coordinate, z-coordinate, and gas concentration of drone B. -----Output:----- All letters are upper case. The output should specify which drone detected the higher concentration of gas, formatted exactly as in the sample output below. -----Assumptions:----- The coordinates (x, y, z) are in the range –50 .. 50. The gas concentration is a positive integer. -----Sample Input:----- 3 1 2 3 50 4 5 6 60 -10 20 30 55 40 50 60 52 0 0 0 70 -1 -1 -1 65 -----Sample Output:----- B DETECTED HIGHER GAS A DETECTED HIGHER GAS A DETECTED HIGHER GAS","solution":"def determine_higher_concentration(data): Determine which drone detected the higher concentration of gas for each pair of drones. Parameters: data (list of tuples): Each tuple contains 7 integers representing the coordinates and gas concentrations of two drones (x1, y1, z1, c1, x2, y2, z2, c2). Returns: list of str: A list of strings indicating which drone detected the higher concentration of gas. results = [] for collection in data: x1, y1, z1, c1, x2, y2, z2, c2 = collection if c1 > c2: results.append(\'A DETECTED HIGHER GAS\') else: results.append(\'B DETECTED HIGHER GAS\') return results"},{"question":"Miriam is participating in a programming competition that consists of solving algorithmic challenges. One of the problems she encounters involves determining the maximum sum of a subarray in an array of integers. A **subarray** is a contiguous part of an array that includes some or all elements of the original array, but the relative order of the elements must always be maintained. Given an array of N integers, Miriam must write a program that finds the maximum sum of a subarray of this array. -----Input----- The first line of input contains a positive integer N (1 le N le 100000), the number of integers in the array. The second line of input contains N integers A_1, A_2, ..., A_N (-10^4 le A_i le 10^4), separated by spaces, the elements of the array. -----Output----- The first and only line of output must contain the maximum sum of a subarray of the given array. -----Examples----- Sample Input 1: 8 -2 1 -3 4 -1 2 1 -5 4 Sample Output 1: 6 Sample Input 2: 5 -1 -2 -3 -4 -5 Sample Output 2: -1","solution":"def max_subarray_sum(nums): This function returns the maximum sum of a subarray within the given list of integers. current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a rectangular matrix of size `n x m`, initially filled with zeros. You need to perform the following types of operations on this matrix: 1. `UPDATE r c x` - Update the element at row `r` and column `c` to the value `x`. 2. `QUERY r1 c1 r2 c2` - Compute and return the sum of all matrix elements within the submatrix defined by its top-left `(r1, c1)` and bottom-right `(r2, c2)` corners (both inclusive). The matrix is 1-indexed, meaning that the top-left element is at `(1, 1)` and the bottom-right element is at `(n, m)`. Here\'s a formal description of the operations: - Each `UPDATE` operation will be described by three integers `r, c, x` (1 ≤ r ≤ n, 1 ≤ c ≤ m, -10^9 ≤ x ≤ 10^9), which sets `matrix[r][c] = x`. - Each `QUERY` operation will be described by four integers `r1, c1, r2, c2` (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m), which computes the sum of the submatrix elements from `(r1, c1)` to `(r2, c2)`. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) - the dimensions of the matrix. - The second line contains an integer `q` (1 ≤ q ≤ 100000) - the number of operations. - The following `q` lines describe the operations. Each operation is in one of the formats: `UPDATE r c x` or `QUERY r1 c1 r2 c2`. Output: - For each `QUERY` operation, output the sum of the elements in the corresponding submatrix on a new line. # Example Input ``` 3 3 5 UPDATE 1 1 5 UPDATE 2 2 3 QUERY 1 1 2 2 UPDATE 1 1 1 QUERY 1 1 3 3 ``` Output ``` 8 4 ``` # Explanation - After the first `UPDATE` operation, the matrix becomes: | 5 | 0 | 0 | |---|---|---| | 0 | 0 | 0 | | 0 | 0 | 0 | - After the second `UPDATE` operation, the matrix becomes: | 5 | 0 | 0 | |---|---|---| | 0 | 3 | 0 | | 0 | 0 | 0 | - The first `QUERY` operation computes the sum of the submatrix from (1, 1) to (2, 2), which is 5 + 0 + 0 + 3 = 8. - After the third `UPDATE` operation, the matrix becomes: | 1 | 0 | 0 | |---|---|---| | 0 | 3 | 0 | | 0 | 0 | 0 | - The second `QUERY` operation computes the sum of the submatrix from (1, 1) to (3, 3), which is 1 + 0 + 0 + 0 + 3 + 0 + 0 + 0 + 0 = 4. **Constraints** - The solution must handle updates and queries efficiently to meet the given constraints.","solution":"class Matrix: def __init__(self, n, m): self.n = n self.m = m self.matrix = [[0] * m for _ in range(n)] def update(self, r, c, x): self.matrix[r-1][c-1] = x def query(self, r1, c1, r2, c2): r1, c1, r2, c2 = r1-1, c1-1, r2-1, c2-1 total_sum = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): total_sum += self.matrix[i][j] return total_sum def process_operations(n, m, operations): matrix = Matrix(n, m) results = [] for op in operations: parts = op.split() if parts[0] == \\"UPDATE\\": r, c, x = map(int, parts[1:]) matrix.update(r, c, x) elif parts[0] == \\"QUERY\\": r1, c1, r2, c2 = map(int, parts[1:]) result = matrix.query(r1, c1, r2, c2) results.append(result) return results"},{"question":"A company wants to implement an automatic billing system for its parking lot. You are tasked to create a function that calculates the total parking fee for a given vehicle. The billing system works as follows: 1. The first 2 hours are charged at a fixed rate of 5 per hour. 2. The next 3 hours (3 to 5 hours) are charged at a higher rate of 7 per hour. 3. Any hour after the first 5 hours is charged at 10 per hour. You need to implement a function that calculates the parking fee based on the number of hours the vehicle has been parked. # Function Signature ```python def calculate_parking_fee(hours: int) -> int: pass ``` # Input - `hours` (integer): the total number of hours the vehicle has been parked (0 <= hours <= 1000). # Output - Returns an integer representing the total parking fee in dollars. # Examples ```python assert calculate_parking_fee(1) == 5 assert calculate_parking_fee(3) == 17 assert calculate_parking_fee(6) == 39 ``` # Explanation 1. For 1 hour, the fee is 1 * 5 = 5. 2. For 3 hours, the fee is 2 * 5 + 1 * 7 = 10 + 7 = 17. 3. For 6 hours, the fee is 2 * 5 + 3 * 7 + 1 * 10 = 10 + 21 + 10 = 41. # Constraints - The number of hours `hours` is a non-negative integer and can be up to 1000. Ensure your solution handles large inputs efficiently.","solution":"def calculate_parking_fee(hours: int) -> int: if hours <= 2: return hours * 5 elif hours <= 5: return 2 * 5 + (hours - 2) * 7 else: return 2 * 5 + 3 * 7 + (hours - 5) * 10"},{"question":"Anna is passionate about gardening and has recently started planting different types of flowers in her garden. Each type of flower has a specific blooming period, after which the flower withers away and needs to be replanted. You are given the blooming period of N different types of flowers, and you need to determine if it is possible for Anna to plant exactly M flowers that will bloom forever (i.e., never wither). ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and M. - The second line contains N integers, where each integer represents the blooming period of a type of flower. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to plant exactly M flowers that will bloom forever and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 100 0 ≤ M ≤ 100 1 ≤ Blooming Period of Each Flower ≤ 10^4 ------ Sample Input 1 ------ 3 5 3 3 5 8 3 7 4 4 1 1 2 2 4 1 1 2 3 4 ------ Sample Output 1 ------ NO NO YES ------ Explanation 1 ------ Test case 1: There are only 5 flower types, but Anna needs 3 that bloom forever, which is not possible since none of the flower types bloom forever. Test case 2: All 4 flowers have a blooming period, so planting 4 flowers that bloom forever is not possible. Test case 3: Here, Anna needs only 1 flower that blooms forever. Since there\'s one flower with a blooming period of 1, she can replant it indefinitely and it will seem as if it blooms forever. Therefore, the answer is \\"YES\\".","solution":"def can_plant_forever(T, test_cases): results = [] for case in test_cases: N, M = case[\'N\'], case[\'M\'] blooming_periods = case[\'blooming_periods\'] # Number of flowers with infinite blooming period is 0 if M > 0 if M > 0: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Alex is an avid traveler and loves to explore new cities. He carries his camera everywhere and takes beautiful pictures. However, Alex is also a tech enthusiast and likes to challenge himself with various computational problems. This time, he decided to create a photo itinerary and needs your help to optimize it. Given a list of photos with their timestamps, Alex wants to determine the longest sequence of photos taken in strictly increasing order of their timestamps. -----Input----- The input starts with a positive integer t – the number of test cases. Then t test cases follow, each with the following format: - The first line consists of an integer n – the number of photos in the list (1 leq n leq 10^5). - The second line contains n integers t_1, t_2, ..., t_n representing the timestamps of the photos (1 leq t_i leq 10^9). All timestamps are positive integers. -----Output----- For each test case, print the length of the longest sequence of photos taken in strictly increasing order of their timestamps. -----Examples----- Sample Input: 2 6 1 3 2 5 4 6 4 2 2 2 2 Sample Output: 4 1","solution":"def longest_increasing_sequence(t, test_cases): Determines the longest sequence of photos taken in strictly increasing order of their timestamps for each test case. results = [] for i in range(t): n, timestamps = test_cases[i] if n == 0: # No photos results.append(0) continue # Dynamic Programming array to store the longest subsequence length ending at each index dp = [1] * n for j in range(1, n): for k in range(j): if timestamps[k] < timestamps[j]: dp[j] = max(dp[j], dp[k] + 1) results.append(max(dp)) return results"},{"question":"A courier company needs to optimize its delivery routes to minimize the travel cost and time. Given a set of houses spread across a grid city, they need to deliver packages to each house exactly once, starting and ending at the central depot located at (0, 0). Not every house has a direct route to every other house, but every house is reachable from the depot by following a combination of direct routes connecting nearby houses. On a given day, the company has M delivery routes available, each connecting a pair of houses directly with known travel distances. The goal is to find the shortest possible route that visits all the houses exactly once and returns to the depot – i.e., a route that forms a minimum spanning cycle. Input The first line of input contains two integers H (2 ≤ H ≤ 100) and M (H-1 ≤ M ≤ H*(H-1)/2), separated with one empty space, representing the number of houses and the number of available direct routes, respectively. Each of the next M lines contains three integers u, v, and d (0 ≤ u, v ≤ H-1, u ≠ v, 0 ≤ d ≤ 106), representing a direct route between house u and house v with travel distance d. Output Output contains only one line with one number, rounded to exactly two decimal places: the minimal travel distance required for the shortest route that visits all the houses and returns to the depot. Rounding is performed so that 0.5 and more rounds up and everything else rounds down. If it is impossible to find such a route, output 0.00. Example Input 3 3 0 1 10 1 2 15 2 0 20 Output 45.00 Note Example explanation: The shortest route visiting all houses and returning to the depot is 0 -> 1 -> 2 -> 0, with a total distance of 45.","solution":"import itertools from math import inf def find_minimal_route(H, M, edges): # Initialize adjacency matrix with infinity dist = [[inf] * H for _ in range(H)] # Fill the adjacency matrix with given edges for u, v, d in edges: dist[u][v] = d dist[v][u] = d # Define the combination of all houses houses = list(range(1, H)) # Excluding depot (0) # Initialize minimum route distance min_dist = inf # Check all permutations of houses for perm in itertools.permutations(houses): current_dist = 0 # Start from depot current_h = 0 # Traverse through the permutation and calculate distance for next_h in perm: current_dist += dist[current_h][next_h] current_h = next_h # Return to depot current_dist += dist[current_h][0] # Update minimum distance if current_dist < min_dist: min_dist = current_dist # If min_dist is still inf, it means no route was found if min_dist == inf: return \\"0.00\\" return f\\"{min_dist:.2f}\\" # Example usage def main(H, M, edges): print(find_minimal_route(H, M, edges))"},{"question":"Write a function that calculates the minimum number of hops required for a frog to cross a river. The frog starts at position 0 and can jump forward by a fixed integer distance each time. The frog needs to reach or surpass a given target position on the far side of the river. Example 1: Input: start = 0, target = 10, jump_distance = 2 Output: 5 Explanation: The frog makes jumps of 2 units each. It needs 5 jumps to cover 10 units (2 * 5 = 10). Example 2: Input: start = 0, target = 15, jump_distance = 3 Output: 5 Explanation: The frog makes jumps of 3 units each. It needs 5 jumps to cover 15 units (3 * 5 = 15). Your Task: You don\'t need to read input or print anything. Your task is to complete the function minHops() which takes 3 Integers start, target, and jump_distance as input and returns the minimum number of hops required. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 0 <= start <= 10^9 start <= target <= 10^9 1 <= jump_distance <= 10^9","solution":"def minHops(start, target, jump_distance): Calculate the minimum number of hops required for a frog to cross a river. The frog starts at position `start` and needs to reach or surpass `target`. Frog jumps forward by fixed `jump_distance`. if start >= target: return 0 else: # Calculate the distance to cover distance_to_cover = target - start # Calculate the number of hops required (rounding up) hops = (distance_to_cover + jump_distance - 1) // jump_distance return hops"},{"question":"There is an undirected graph with N vertices and M edges. Each vertex has a unique ID from 1 to N and each edge connects two different vertices. Some vertices are marked as important. Takahashi needs to find the shortest path that visits all important vertices at least once. Write a program to find the length of this shortest path. Constraints * 2 ≦ N ≦ 100 * 1 ≦ M ≦ 1000 * 1 ≦ number of important vertices ≦ N/2 * 1 ≦ u_i, v_i ≦ N (The endpoints of each edge) * Each pair of vertices is connected by at most one edge. * The given graph is connected. Input The input is given from Standard Input in the following format: N M k v_1 v_2 ... v_k u_1 v_1 ... u_M v_M * N: the number of vertices * M: the number of edges * k: the number of important vertices * v_1 ... v_k: the ids of the important vertices * u_1 v_1 ... u_M v_M: the edges of the graph Output Print the length of the shortest path that visits all important vertices at least once. If it is impossible to visit all important vertices, print -1. Examples Input 6 7 3 2 4 5 1 2 1 3 2 4 3 4 4 5 5 6 6 3 Output 8 Input 5 5 2 3 4 1 2 2 3 3 4 4 5 5 1 Output 4 Input 4 3 2 2 3 1 2 2 3 3 4 Output 3","solution":"from itertools import permutations from collections import deque, defaultdict def find_shortest_path_length(N, M, k, important_vertices, edges): # Adjacency list representation of graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS and find shortest path from start to all other vertices def bfs(start): distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances # Calculate shortest paths between all important vertices important_distances = {v: bfs(v) for v in important_vertices} # Use permutations to find shortest path visiting all important vertices min_path_length = float(\'inf\') for perm in permutations(important_vertices): path_length = 0 for i in range(len(perm) - 1): path_length += important_distances[perm[i]][perm[i + 1]] min_path_length = min(min_path_length, path_length) return min_path_length if min_path_length != float(\'inf\') else -1 def solve(): import sys input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) index += 1 M = int(data[index]) index += 1 k = int(data[index]) index += 1 important_vertices = [int(data[index + i]) for i in range(k)] index += k edges = [] for _ in range(M): u = int(data[index]) v = int(data[index + 1]) index += 2 edges.append((u, v)) result = find_shortest_path_length(N, M, k, important_vertices, edges) print(result)"},{"question":"Given an array of numbers representing the heights of buildings along a street, we need to determine the number of buildings that receive direct sunlight in the evening. A building receives direct sunlight if there are no taller buildings standing to its right. Consider buildings of varying heights standing in a row from left to right. A building receives sunlight if there are no taller buildings standing to its right blocking the sunlight. For example, for buildings with heights [4, 2, 3, 1], the buildings with heights 4, 3, and 1 will receive sunlight. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the number of buildings. - The second line of each test case contains N space-separated integers representing the heights of the buildings from left to right. ------ Output Format ------ For each test case, output the number of buildings that receive direct sunlight on a new line. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ height ≤ 10^9 ------ Sample Input 1 ------ 2 4 4 2 3 1 5 7 2 5 3 1 ------ Sample Output 1 ------ 3 4 ------ Explanation 1 ------ Test case 1: - Building with height 4 is the tallest so far, it receives sunlight. - Building with height 3 is taller than the last building (2), so it receives sunlight. - Building with height 1 is at the end and automatically receives sunlight. Therefore, the answer is 3. Test case 2: - Building with height 7 is the tallest so far, it receives sunlight. - Building with height 5 is taller than the last building (2), so it receives sunlight. - Building with height 3 is shorter than the previous building (5), so it does not receive sunlight. - Building with height 1 is at the end and automatically receives sunlight. Therefore, the answer is 4.","solution":"def count_buildings_with_sunlight(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] count = 0 max_height = 0 for height in reversed(heights): if height > max_height: count += 1 max_height = height results.append(count) return results"},{"question":"Alice has a collection of N books, each with a certain number of pages. She likes to read books such that their total pages form an arithmetic sequence. An arithmetic sequence is a sequence of numbers in which the difference of any two successive members is a constant. Alice wants to know the minimum number of pages she needs to add or remove from her books to make the total pages follow an arithmetic sequence. Adding or removing one page from any book costs one unit. Given the initial number of pages in each book, calculate the minimum cost required to rearrange the pages so that they form an arithmetic sequence. Input: The first line contains T indicating the number of test cases. For each test case, the first line contains an integer N indicating the number of books. The second line contains N space-separated integers representing the number of pages in each book. Output: For each test case, output the minimum cost to rearrange the pages in the books to form an arithmetic sequence. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 100 1 ≤ Pages[i] ≤ 1000 SAMPLE INPUT 2 3 3 6 9 4 5 10 15 20 SAMPLE OUTPUT 0 0 Explanation: In the first test case, the number of pages already form an arithmetic sequence with a common difference of 3, so the cost is 0. In the second test case, the number of pages also already form an arithmetic sequence with a common difference of 5, so the cost is 0.","solution":"def min_cost_to_arithmetic_sequence(pages): Returns the minimum cost required to rearrange the pages in the books to form an arithmetic sequence. N = len(pages) if N <= 1: return 0 pages.sort() min_cost = float(\'inf\') for d in range(-1000, 1001): # possible values for common difference cost = 0 target = pages[0] for i in range(N): cost += abs(pages[i] - target) target += d min_cost = min(min_cost, cost) return min_cost def solve(T, test_cases): results = [] for test_case in test_cases: N, pages = test_case results.append(min_cost_to_arithmetic_sequence(pages)) return results # Input functions for reading def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) idx = 1 test_cases = [] for _ in range(T): N = int(data[idx]) pages = list(map(int, data[idx+1:idx+1+N])) test_cases.append((N, pages)) idx += 1 + N results = solve(T, test_cases) for result in results: print(result)"},{"question":"Bob is fascinated by mountain ranges and decides to create a game using a mountain range represented as an array of integers. Each element in the array represents the height of a specific mountain. A mountain peak is defined as a position i in the array such that the heights of the mountains strictly increase to the left of i and strictly decrease to the right of i. Bob challenges Alice to determine if there is exactly one mountain peak in the array and if so, return the index of that peak. Write a function that determines if there is exactly one mountain peak in the given array and returns the 1-based index of that peak. If there isn\'t exactly one peak, return -1. -----Input----- The function takes a single list of integers `heights` representing the heights of the mountains (1 ≤ heights.length ≤ 10^5, 1 ≤ heights[i] ≤ 10^6). -----Output----- Return the 1-based index of the mountain peak if there is exactly one, otherwise return -1. -----Examples----- Input [1, 3, 2, 1] Output 2 Input [1, 2, 3, 4] Output -1 Input [2, 1, 2, 3, 5, 4, 3, 2, 1] Output 5 -----Note----- In the first example, the mountain heights are [1, 3, 2, 1]. There is exactly one peak at index 2 (with 1-based indexing). In the second example, the heights are [1, 2, 3, 4]. There are no peaks as the heights never strictly decrease. In the third example, the heights are [2, 1, 2, 3, 5, 4, 3, 2, 1]. There is exactly one peak at index 5 (with 1-based indexing).","solution":"def find_mountain_peak(heights): Determine if there is exactly one mountain peak in `heights` array. Return the 1-based index of the peak if there is exactly one, otherwise return -1. :param heights: List[int] - A list of integers representing mountain heights. :return: int - The 1-based index of the peak if exactly one peak exists, else -1. n = len(heights) if n < 3: return -1 peaks = 0 peak_index = -1 for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peaks += 1 peak_index = i if peaks == 1: return peak_index + 1 else: return -1"},{"question":"There are n tiles laid out in a row, each with a color represented by an integer. Your task is to determine the minimum number of changes needed to make all the tiles the same color. A change consists of swapping the color of any single tile to any other color present in the row. Input: - The first line contains the integer n (1 ≤ n ≤ 100,000) — the number of tiles. - The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1,000) — the colors of the tiles. The numbers are separated by single spaces. Output: - Print a single integer — the minimum number of changes needed to make all the tiles the same color. Examples Input: 5 1 2 2 3 1 Output: 3 Input: 6 1 1 1 1 1 1 Output: 0 Input: 7 4 4 2 4 4 4 4 Output: 1","solution":"def min_changes_to_same_color(n, colors): Returns the minimum number of changes needed to make all n tiles the same color. :param n: int - The number of tiles :param colors: List[int] - The colors of the tiles :return: int - The minimum number of changes needed from collections import Counter if n == 0: return 0 color_counts = Counter(colors) most_common_color_count = color_counts.most_common(1)[0][1] return n - most_common_color_count"},{"question":"In a city, there are N intersections, connected by M bidirectional roads. Each road connects two intersections and has a specific length. The mayor wants to build a network that connects all intersections with the minimum total road length. Write a program to find the minimum total road length required. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 100000 - 1 ≤ road length ≤ 10000 -----Input----- Input is given from Standard Input in the following format: N M a1 b1 l1 a2 b2 l2 ... aM bM lM Here, N indicates the number of intersections, M indicates the number of roads. Each of the next M lines contains three integers a, b, and l representing a road between intersections a and b of length l. -----Output----- Print the minimum total road length. -----Sample Input----- 4 5 1 2 4 1 3 6 2 3 1 2 4 3 3 4 5 -----Sample Output----- 8 The minimum total road length needed to connect all intersections is 8. The optimal network connects the intersections as follows: (2, 3), (2, 4), (1, 2).","solution":"def find_minimum_road_length(N, M, roads): Returns the minimum total road length required to connect all intersections. Args: N : int : Number of intersections M : int : Number of roads roads : list of tuples : List of roads, each represented as a tuple (a, b, l) where a and b are intersections and l is the length of the road connecting them. Returns: int : Minimum total road length required parent = list(range(N + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Sort roads by length roads.sort(key=lambda x: x[2]) min_length = 0 for a, b, length in roads: if find(a) != find(b): union(a, b) min_length += length return min_length if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = list(map(str.strip, input().split(\'n\'))) N, M = map(int, data[0].split()) roads = [tuple(map(int, line.split())) for line in data[1:] if line] print(find_minimum_road_length(N, M, roads))"},{"question":"Leo is working on a new game to teach children how to count coins. The game consists of a line of distinct coins, each having a specific value. The total value of the coins in the line needs to be an exact multiple of a given number M. Leo can rearrange the coins in any order to achieve this goal, but the constraint is that once the coins are placed in a new order, they must be counted sequentially from left to right without skipping any. Can you help Leo determine if it\'s possible to rearrange the coins so that the sum of their values is a multiple of M? -----Input----- The first line contains two integers N and M (1 le N le 100, 1 le M le 1000), where N is the number of coins and M is the specified number. The second line contains N distinct positive integers representing the values of the coins. Each value is at most 1000. -----Output----- Output \\"possible\\" if there exists a rearrangement of the coins such that the total value is a multiple of M, otherwise output \\"impossible\\". -----Examples----- Sample Input: 5 5 1 2 3 4 5 Sample Output: possible Sample Input: 4 10 7 14 6 8 Sample Output: impossible","solution":"def can_arrange_multiple_of_m(N, M, coins): Determine if the total value of the coins is a multiple of M. Parameters: N (int): Number of coins. M (int): The divisor number. coins (list): List of integers representing the values of the coins. Returns: str: \\"possible\\" if the total value of the coins is a multiple of M, otherwise \\"impossible\\". total_value = sum(coins) if total_value % M == 0: return \\"possible\\" else: return \\"impossible\\""},{"question":"Task Implement a function that simulates Conway\'s Game of Life for `m` generations and returns the resulting state of the grid. # Parameters: * `grid` - a two-dimensional array of `1`s and `0`s (representing alive and dead cells respectively) * `m` - number of generations to simulate, an integer **Note:** `m` will always be a positive integer. Output The state of the `grid` after `m` generations. Rules The grid updates according to the following rules: 1. Any live cell with fewer than two live neighbours dies (underpopulation). 2. Any live cell with two or three live neighbours lives on to the next generation. 3. Any live cell with more than three live neighbours dies (overcrowding). 4. Any dead cell with exactly three live neighbours becomes a live cell (reproduction). The grid is finite - assume the edges do not wrap around. Example ```python game_of_life([[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]], 1) # should return: [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]] ``` After one iteration, the grid updates based on the rules specified. The cell at (3, 1) becomes alive, while other cells change according to the Game of Life rules.","solution":"def game_of_life(grid, m): Simulates Conway\'s Game of Life for `m` generations and returns the resulting state of the grid. def get_live_neighbours(r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbours = 0 for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < len(grid) and 0 <= new_c < len(grid[0]): live_neighbours += grid[new_r][new_c] return live_neighbours for _ in range(m): new_grid = [[0] * len(grid[0]) for _ in range(len(grid))] for r in range(len(grid)): for c in range(len(grid[0])): live_neighbours = get_live_neighbours(r, c) if grid[r][c] == 1: if live_neighbours < 2 or live_neighbours > 3: new_grid[r][c] = 0 else: new_grid[r][c] = 1 elif grid[r][c] == 0: if live_neighbours == 3: new_grid[r][c] = 1 grid = new_grid return grid"},{"question":"A software company needs to develop a new scheduling feature for its calendar application. The calendar application has to manage appointment schedules throughout different days efficiently. The company has implemented a basic version but requires an efficient way to check for conflicting appointments. Each appointment is defined by its start and end times. Given a list of appointments, your task is to determine whether there are any conflicts, where a conflict is defined as any overlap between appointment times. More formally, you are provided with n two-tuples (s, e), where s denotes the start time and e denotes the end time of an appointment (0 ≤ s < e ≤ 10^6). You need to determine if any of these appointments overlap. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of appointments. Each of the next n lines contains two integers s and e (0 ≤ s < e ≤ 10^6) — the start and end times of an appointment. Output Output \\"YES\\" (without quotes) if there is at least one pair of conflicting appointments. Otherwise, output \\"NO\\" (without quotes). Examples Input 3 1 5 2 6 7 8 Output YES Input 4 0 1 1 2 2 3 3 4 Output NO Input 2 3 5 6 8 Output NO","solution":"def check_conflicting_appointments(n, appointments): Checks if there are any conflicting appointments. :param n: Number of appointments :param appointments: A list of tuples where each tuple contains the start and end times of an appointment :return: \\"YES\\" if there are conflicts, otherwise \\"NO\\" appointments.sort(key=lambda x: x[0]) for i in range(1, n): if appointments[i][0] < appointments[i-1][1]: return \\"YES\\" return \\"NO\\""},{"question":"Alex is playing a new puzzle game called \\"Gem Collector\\". The game has a grid of size `n x m`, where each cell contains a certain number of gems. Alex\'s goal is to collect the maximum number of gems by starting at the top-left cell (1, 1) and moving to the bottom-right cell (n, m). From any cell, Alex can move either to the cell immediately to the right or the cell immediately below. Help Alex determine the maximum number of gems he can collect. ----- Input ----- The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and the number of columns in the grid. Each of the next `n` lines contains `m` integers `g_{i,j}` (0 ≤ g_{i,j} ≤ 1000) — the number of gems in the cell at row `i` and column `j`. ----- Output ----- Print one integer — the maximum number of gems Alex can collect. ----- Example ----- Input 3 3 1 3 3 2 1 4 0 6 4 Output 15 ----- Note ----- In the example, the optimal path for Alex is (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3). The number of gems collected along this path is 1 + 3 + 3 + 4 + 4 = 15.","solution":"def max_gems(n, m, grid): dp = [[0]*m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"A team of engineers is working on a project to optimize a large network of computers. One of their tasks is to analyze the communication patterns between the computers in the network. They represent the network as a grid of characters, where \'.\' represents an empty space, \'C\' represents a computer, and \'W\' represents a wall. The engineers need to determine if there is a path from the top-left corner to the bottom-right corner of the grid, moving only through empty spaces (\'.\') and avoiding any walls (\'W\'). Input The first line contains two integers, N (1 ≤ N ≤ 1000) and M (1 ≤ M ≤ 1000), representing the number of rows and columns in the grid, respectively. The next N lines each contain M characters, which can be \'.\', \'C\', or \'W\'. The top-left corner of the grid is always an empty space (\'.\'), and the bottom-right corner of the grid is also always an empty space (\'.\'). Output Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner of the grid. Otherwise, print \\"NO\\". Examples Input 4 4 .... .W.. .... ..W. Output YES Input 4 3 .CW .W. CW. C.W Output NO Note * In the first example, you can move right, right, down, down, left, left, down, right, right to reach the bottom-right corner. * In the second example, there is no path that avoids all the walls (\'W\').","solution":"from collections import deque def is_path_exist(grid, n, m): Determines if there is a path from the top-left corner to the bottom-right corner of the grid. def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0)]) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny): visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" # Example function usage def communication_path(n, m, grid): return is_path_exist(grid, n, m)"},{"question":"Given an integer array `nums` of size n, where n is even, perform the following operations: 1. Split the array into two equal halves. 2. Reverse the order of elements in both halves. 3. Concatenate the two reversed halves to form the final array. Example 1: Input: nums = [1, 2, 3, 4, 5, 6] Output: [3, 2, 1, 6, 5, 4] Example 2: Input: nums = [10, 20, 30, 40, 50, 60] Output: [30, 20, 10, 60, 50, 40] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `reverse_halves()` which takes the integer array `nums` as an argument and returns the resultant array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - The length of the array n is even. - 2 ≤ n ≤ 100 - -10^3 ≤ nums[i] ≤ 10^3","solution":"def reverse_halves(nums): n = len(nums) # ensuring n is even assert n % 2 == 0, \\"The length of the array should be even\\" half = n // 2 first_half = nums[:half][::-1] second_half = nums[half:][::-1] return first_half + second_half"},{"question":"Write a function `maxEqualSubarray` to determine the maximum length of continuous subarray which contains the maximum number of equal integers chosen from a list of operations. Each operation contains two integers denoted by `value`, `frequency`. In each operation, you can choose at most `frequency` continuous integers from the array to be replaced with `value`. You can perform the operations in any order, but one type of operation cannot be done more than once. # Input - The first line contains a single integer T denoting the number of test cases. - Each of the next T sections consists of: - A line with an integer M denoting the number of operations. - M lines each containing two integers `value` and `frequency` which describe the operations. # Output - For each test case, print a single integer denoting the length of the longest continuous subarray of equal integers outputted after performing the operations optimally. # Constraints - ( 1 leq T leq 1000 ) - ( 1 leq M leq 10^5 ) - ( 1 leq value leq 10^9 ) - ( 1 leq frequency leq 10^9 ) # Example Input ``` 2 3 3 2 6 1 9 5 2 4 6 7 3 ``` Output ``` 5 6 ``` Explanation For the first test case, the longest subarray of equal integers can be formed by the operation with value 9 and frequency 5 resulting in `[9, 9, 9, 9, 9]`. For the second test case, the longest subarray of equal integers can be formed by the operation with value 4 and frequency 6 resulting in `[4, 4, 4, 4, 4, 4]`.","solution":"def maxEqualSubarray(t, test_cases): results = [] for case in test_cases: M = case[0] operations = case[1] max_length = 0 for value, frequency in operations: if frequency > max_length: max_length = frequency results.append(max_length) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): M = int(lines[index]) operations = [] for i in range(M): value, frequency = map(int, lines[index + 1 + i].split()) operations.append((value, frequency)) test_cases.append((M, operations)) index = index + 1 + M return t, test_cases"},{"question":"Given two strings, `s1` and `s2`, create a function that checks if they are isomorphic. Two strings are isomorphic if the characters in `s1` can be replaced to get `s2`. For example, given: `s1 = \\"paper\\"` and `s2 = \\"title\\"`, the output should be `true`. Given `s1 = \\"foo\\"` and `s2 = \\"bar\\"`, the output should be `false`. Implement the function `areIsomorphic(s1, s2)` that returns `true` if the provided strings are isomorphic and `false` otherwise. The function signature is: ```python def areIsomorphic(s1: str, s2: str) -> bool: ```","solution":"def areIsomorphic(s1: str, s2: str) -> bool: Check if two strings are isomorphic. Two strings are isomorphic if the characters in \'s1\' can be replaced to get \'s2\'. Parameters: s1 (str): First string. s2 (str): Second string. Returns: bool: True if strings are isomorphic, False otherwise. if len(s1) != len(s2): return False mapping_s1_to_s2 = {} mapping_s2_to_s1 = {} for char1, char2 in zip(s1, s2): if (char1 in mapping_s1_to_s2 and mapping_s1_to_s2[char1] != char2) or (char2 in mapping_s2_to_s1 and mapping_s2_to_s1[char2] != char1): return False mapping_s1_to_s2[char1] = char2 mapping_s2_to_s1[char2] = char1 return True"},{"question":"You are given an array of integers which represents the heights of trees in a forest. Each height is a positive integer and the length of the array is at least 3. All trees with the maximum height are located consecutively, and there is a possibility that one or more trees of the maximum height may be missing from the array. Write a method that finds the most frequently occurring tree height (the mode) and determines if it\'s the same height as the tree with the maximum height in the forest. Return a tuple with the mode and a boolean indicating if the mode equals the maximum height. Examples ```python [3, 3, 4, 4, 4, 5, 5, 5, 5, 4] Should return: (4, False) (mode is 4, which is different from the max height 5) [3, 3, 5, 5, 5, 5, 5, 5, 5, 2, 2] Should return: (5, True) (mode is 5, which is the same as the max height 5) [1, 3, 3, 3, 3, 3, 2] Should return: (3, True) (mode is 3, which is the same as the max height 3) ```","solution":"def find_mode_and_check_max(trees): Finds the most frequently occurring tree height (the mode) and determines if it\'s the same height as the maximum height in the forest. Args: trees: List[int] - List of integers representing tree heights. Returns: Tuple[int, bool] - A tuple containing the mode and a boolean indicating if the mode equals the maximum height. from collections import Counter # Count frequency of each height height_counts = Counter(trees) # Find the mode mode = height_counts.most_common(1)[0][0] # Find the maximum height max_height = max(trees) # Check if mode is same as max height is_mode_max = (mode == max_height) return mode, is_mode_max"},{"question":"You are tasked with developing a new sorting algorithm called \\"Wave Sort.\\" In this sorting algorithm, for any given array a of length n, the algorithm must rearrange the elements to form a wave-like sequence. A sequence a is considered to be in wave-form if and only if for every even index i (0-based index): - a[i] >= a[i+1] (if i+1 is a valid index) - a[i] >= a[i-1] (if i-1 is a valid index) Essentially, the wave sort arranges the array such that alternate elements are greater than their immediate neighbors. Example: 1. if a = [3, 1, 2, 6, 5], one possible wave form of the array could be [3, 1, 6, 2, 5]. 2. if a = [1, 2, 3, 4, 5, 6], one possible wave form of the array could be [2, 1, 4, 3, 6, 5]. 3. if a = [9, 6, 8, 3, 7], one possible wave form of the array could be [6, 3, 9, 7, 8]. Your task is to implement this algorithm and rearrange the given array to form a wave-like sequence. Input The first line contains one integer t (1 ≤ t ≤ 10), the number of test cases. Each of the next lines contain: 1. An integer n (1 ≤ n ≤ 10^5): the length of array a. 2. n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9): the elements of the array. Output For each test case, print the array in wave form on a single line. Examples Input 2 5 3 1 2 6 5 6 1 2 3 4 5 6 Output 3 1 6 2 5 2 1 4 3 6 5","solution":"def wave_sort(arr): arr.sort() for i in range(1, len(arr), 2): arr[i], arr[i-1] = arr[i-1], arr[i] return arr def process_test_cases(test_cases): results = [] for n, a in test_cases: wave_sorted = wave_sort(a) results.append(\\" \\".join(map(str, wave_sorted))) return results"},{"question":".find(x) This operation finds and returns the position of element boldsymbol{x} in the list. If element boldsymbol{x} does not exist, it raises a ValueError. Example >>> lst = [5, 3, 1, 4, 2] >>> print(lst.find(4)) 3 >>> print(lst.find(6)) ValueError: 6 is not in list .reverse() This operation reverses the order of elements in the list. The .reverse() operation returns None. Example >>> lst = [5, 3, 1, 4, 2] >>> lst.reverse() >>> print(lst) [2, 4, 1, 3, 5] .sort() This operation sorts the elements of the list in ascending order. The .sort() operation returns None. Example >>> lst = [5, 3, 1, 4, 2] >>> lst.sort() >>> print(lst) [1, 2, 3, 4, 5] Task You have a list boldsymbol{text{L}} of integers, and you have to execute N commands given in N lines. The commands will be sort, reverse and find. Input Format The first line contains integer n, the number of elements in the list boldsymbol{text{L}}. The second line contains n space separated elements of list boldsymbol{text{L}}. The third line contains integer N, the number of commands. The next N lines contains either sort, reverse or find commands followed by their associated value (if any). Constraints 0<n<20 0<N<20 Output Format Print the sum of the elements of list boldsymbol{text{L}} on a single line. Sample Input 5 1 3 5 7 9 5 reverse find 7 sort find 1 reverse Sample Output 25 Explanation After completing these 5 operations on the list, we get listleft([9, 7, 5, 3, 1]right). Hence, the sum is begin{array}{c}25end{array}. Note: Convert the elements of list L to integers while you are assigning them. To ensure the proper input of the list, we have added the first two lines of code to the editor.","solution":"def execute_commands(n, L, N, commands): L = list(map(int, L)) for command in commands: cmd = command.split() if cmd[0] == \'find\': element = int(cmd[1]) L.index(element) # This may raise ValueError if element not found elif cmd[0] == \'reverse\': L.reverse() elif cmd[0] == \'sort\': L.sort() return sum(L)"},{"question":"Given an array of integers \'arr\' of size \'N\', return the maximum product of any triplet in the array. If there are less than 3 elements in the array, return -1. Example 1: Input: N = 6 arr[] = {-10, -10, 5, 2, 1, -1} Output: 500 Explanation: The maximum product would be produced by multiplying -10, -10, and 5. Example 2: Input: N = 4 arr[] = {1, 10, 2, 6} Output: 120 Explanation: The maximum product would be produced by multiplying 10, 6, and 2. Example 3: Input: N = 2 arr[] = {1, 2} Output: -1 Explanation: Less than 3 elements exist in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxTripletProduct()` which takes the array \'arr[]\' and its size \'N\' as input parameters and returns the maximum product of any triplet in the array, or -1 if no such triplet exists. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} -10^{5} ≤ arr[i] ≤ 10^{5}","solution":"def maxTripletProduct(arr, N): if N < 3: return -1 arr.sort() return max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])"},{"question":"Write a program that analyzes a list of website addresses and categorizes them by their top-level domain (TLD). The input is a list of website URLs, as shown in the example. Your task is to create a dictionary where the keys are the TLDs and the values are lists containing the website addresses that belong to each TLD. Ignore any URL that does not contain a valid TLD (ignore the whole subdomain as well). The list of valid TLDs is provided below. Additionally, the URLs are all in lowercase and follow the standard pattern (e.g., `subdomain.domain.tld`). Top-Level Domains: - com - org - net - edu - gov input The input is a list of website addresses on separate lines. The number of URLs is not more than 100. output Output should show the dictionary with valid TLDs as keys and lists of websites as values. Each key-value pair should be on a new line. Example Input ``` www.google.com support.mozilla.org wikimedia.foundation mit.edu whitehouse.gov example.net localserver.local ``` Output ``` {\'com\': [\'www.google.com\'], \'org\': [\'support.mozilla.org\'], \'edu\': [\'mit.edu\'], \'gov\': [\'whitehouse.gov\'], \'net\': [\'example.net\']} ```","solution":"def categorize_websites_by_tld(urls): This function takes a list of URLs and categorizes them by their top-level domain (TLD). Parameters: urls (list): A list of website URLs. Returns: dict: A dictionary where keys are valid TLDs and values are lists of URLs with those TLDs. tlds = {\'com\', \'org\', \'net\', \'edu\', \'gov\'} categorized_websites = {tld: [] for tld in tlds} for url in urls: parts = url.split(\'.\') if len(parts) > 1 and parts[-1] in tlds: categorized_websites[parts[-1]].append(url) return {k: v for k, v in categorized_websites.items() if v}"},{"question":"You\'re given an array of n integers and will perform q operations on this array. Each operation is one of three types and could be one of the following: 1. Update the i-th element of the array to a given value x. 2. Multiply all values in the array by a given value y. 3. Query the sum of all elements in the subarray from index L to index R inclusive. Write a program to process each of these operations and return the result of each query. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 100,000). The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial array. Each of the next q lines describes an operation. The first number in each of those lines is an integer t that represents the type of operation: - If t = 1, it is followed by two integers i (1 ≤ i ≤ n) and x (1 ≤ x ≤ 10^9). - If t = 2, it is followed by one integer y (1 ≤ y ≤ 100). - If t = 3, it is followed by two integers L and R (1 ≤ L ≤ R ≤ n). -----Output----- For each query operation (type 3), print the result of the sum of the subarray from index L to index R inclusive. -----Example----- Input 5 6 1 2 3 4 5 1 3 8 3 1 5 2 2 3 2 4 2 2 3 2 5 Output 1 2 8 4 5 15 24 48","solution":"class ArrayOperations: def __init__(self, array): self.array = array def update(self, i, x): self.array[i-1] = x def multiply(self, y): self.array = [elem * y for elem in self.array] def query(self, L, R): return sum(self.array[L-1:R]) def perform_operations(n, q, array, operations): arr_ops = ArrayOperations(array) results = [] for operation in operations: if operation[0] == 1: _, i, x = operation arr_ops.update(i, x) elif operation[0] == 2: _, y = operation arr_ops.multiply(y) elif operation[0] == 3: _, L, R = operation result = arr_ops.query(L, R) results.append(result) return results"},{"question":"You are a software engineer at a logistics company. The company needs an efficient way to manage deliveries scheduled for a given day. Each delivery requires a specific type of vehicle determined by the size and weight of the package being delivered. The vehicles available at the company have a certain capacity and can perform a limited number of deliveries per day. Your task is to assign deliveries to vehicles based on their capacities and constraints. The goal is to ensure every delivery is assigned a suitable vehicle, adhering to the limitations of vehicle capacity and the number of deliveries each vehicle can perform. Given n deliveries, each with a specific package size and weight, and m vehicles, each with a maximum load capacity and a limit on the number of deliveries they can perform, determine whether it\'s possible to assign all deliveries to vehicles accordingly. Input The first line contains a single integer n — the number of deliveries (1 ≤ n ≤ 100,000). Next n lines each contain two space-separated integers, sizei and weighti — the size and weight of the i-th delivery (1 ≤ sizei, weighti ≤ 1,000,000). The next line contains a single integer m — the number of vehicles (1 ≤ m ≤ 100,000). Next m lines each contain three space-separated integers, maxSizej, maxWeightj, and maxDeliveriesj — the maximum size, maximum weight, and the maximum number of deliveries that the j-th vehicle can handle (1 ≤ maxSizej, maxWeightj ≤ 1,000,000, 1 ≤ maxDeliveriesj ≤ 1,000). Output If there is an assignment that meets all the criteria, print a single word \\"POSSIBLE\\" (without the quotes) in the first line. In the next line, print n space-separated integers. The i-th integer should be the number of the vehicle that should perform the i-th delivery. If there are multiple correct assignments, print any of them. If there is no correct assignment, print a single word \\"IMPOSSIBLE\\" (without the quotes). Examples Input 4 100 200 300 400 500 600 700 800 2 500 500 2 1000 1000 2 Output POSSIBLE 1 2 2 2 Input 3 200 300 400 500 300 200 1 500 500 2 Output IMPOSSIBLE","solution":"def assign_deliveries(n, deliveries, m, vehicles): from collections import defaultdict # Create a list to keep track of how many deliveries each vehicle is assigned to assigned_counts = [0] * m # Create a list to store which vehicle is assigned to which delivery assignment = [-1] * n # For each delivery, get its size and weight for i in range(n): size, weight = deliveries[i] assigned = False # Try to find a suitable vehicle for j in range(m): max_size, max_weight, max_deliveries = vehicles[j] if size <= max_size and weight <= max_weight and assigned_counts[j] < max_deliveries: # Assign the vehicle j to the delivery i assignment[i] = j + 1 # Using 1-based index for vehicle number assigned_counts[j] += 1 assigned = True break if not assigned: # If no suitable vehicle found for this delivery, return \\"IMPOSSIBLE\\" return \\"IMPOSSIBLE\\", [] return \\"POSSIBLE\\", assignment # Example usage: n = 4 deliveries = [(100, 200), (300, 400), (500, 600), (700, 800)] m = 2 vehicles = [(500, 500, 2), (1000, 1000, 2)] result, assignment = assign_deliveries(n, deliveries, m, vehicles) print(result) if result == \\"POSSIBLE\\": print(\' \'.join(map(str, assignment)))"},{"question":"Imagine you are given a grid of size n × m filled with water and land cells. Each cell can be represented as 0 (water) or 1 (land). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You need to determine the number of distinct islands in the grid. An island is considered distinct if it has a different shape or structure when compared to other islands. Write a function `numDistinctIslands(grid)` that takes a 2D binary array `grid` as input and returns an integer representing the number of distinct islands. # Input - A 2D binary array `grid` of size n × m representing the map. # Output - An integer representing the number of distinct islands. # Constraints - `1 ≤ n, m ≤ 100` - `grid[i][j]` is either 0 or 1. # Example Input ``` grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0] ] ``` Output ``` 3 ``` # Explanation In the example grid, there are three distinct islands: 1. The first island is the 2×2 square in the top-left corner. 2. The second island is a 2×2 square in the middle-right. 3. The third island is a vertical sequence of three 1\'s at the bottom-left. Note that the islands formed in the middle-right and bottom-left are considered distinct because their shapes are not the same when considering connectivity.","solution":"def numDistinctIslands(grid): def dfs(x, y, origin_x, origin_y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return [] grid[x][y] = 0 path = [(x - origin_x, y - origin_y)] path += dfs(x + 1, y, origin_x, origin_y) path += dfs(x - 1, y, origin_x, origin_y) path += dfs(x, y + 1, origin_x, origin_y) path += dfs(x, y - 1, origin_x, origin_y) return path unique_islands = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: island_shape = tuple(dfs(i, j, i, j)) unique_islands.add(island_shape) return len(unique_islands)"},{"question":"Implement a solution to find the nearest smaller element for every element in a list. The nearest smaller element for an element x in the list is defined as the closest element to the left of x which is smaller than x. If no such element exists, output -1 for that position. ------ Input ------ The first line contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, denoting the size of the list. The following line contains N space-separated integers representing the elements of the list. ------ Output ------ For each test case, output N space-separated integers where the i-th integer is the nearest smaller element to the left of the i-th element in the list, or -1 if no such element exists. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ list[i] ≤ 10^9 The sum of N over all test cases will not exceed 10^6. ------ Sample Input ------ 2 5 4 5 2 10 8 4 3 2 1 2 ------ Sample Output ------ -1 4 -1 2 2 -1 -1 -1 1 ------ Explanation ------ In the first test case: - the nearest smaller element to 4 is -1 (no elements to the left) - the nearest smaller element to 5 is 4 - the nearest smaller element to 2 is -1 (no elements to the left) - the nearest smaller element to 10 is 2 - the nearest smaller element to 8 is 2 In the second test case: - the nearest smaller element to 3 is -1 (no elements to the left) - the nearest smaller element to 2 is -1 (no elements to the left) - the nearest smaller element to 1 is -1 (no elements to the left) - the nearest smaller element to the first 2 is 1","solution":"def nearest_smaller_elements(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] res = [] stack = [] for j in range(n): while stack and stack[-1] >= array[j]: stack.pop() if not stack: res.append(-1) else: res.append(stack[-1]) stack.append(array[j]) results.append(\' \'.join(map(str, res))) return results"},{"question":"You are given a string S of length N and Q queries. Each query can be of three types: 1. Reverse the substring from index L to R (inclusive). 2. Replace all occurrences of a character C1 in the substring from index L to R (inclusive) with another character C2. 3. Report if the substring from index L to R (inclusive) is a palindrome. A substring is a contiguous sequence of characters within a string. A palindrome is a string that reads the same backward as forward. Input The first line contains two integers N and Q, where N is the length of the string S and Q is the number of queries. The second line contains the string S. The following Q lines describe queries in the format mentioned above. Output For each query of the third type, output \\"YES\\" if the substring is a palindrome, otherwise output \\"NO\\". Constraints 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N It is guaranteed that S will only contain lowercase English letters and query characters C1 and C2 will also be lowercase English letters. SAMPLE INPUT 5 4 abcba 3 1 5 2 1 3 a b 1 1 5 3 1 5 SAMPLE OUTPUT YES NO Explanation: - The first query checks if the entire string \\"abcba\\" is a palindrome, which it is. - The second query replaces all \'a\' with \'b\' within the substring \\"abc\\", resulting in the string \\"bbcba\\". - The third query reverses the entire string, resulting in \\"abcb b\\". - The fourth query checks if the substring \\"abbbcbba\\" is a palindrome, which it is not.","solution":"def process_queries(N, Q, S, queries): s = list(S) # Convert string to list for easier manipulation results = [] for query in queries: type = query[0] L = query[1] - 1 R = query[2] - 1 if type == 1: # Reverse the substring from index L to R (inclusive) s[L:R+1] = s[L:R+1][::-1] elif type == 2: # Replace all occurrences of C1 with C2 in the substring from index L to R (inclusive) C1 = query[3] C2 = query[4] for i in range(L, R+1): if s[i] == C1: s[i] = C2 elif type == 3: # Report if the substring from index L to R (inclusive) is a palindrome substring = s[L:R+1] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Design an algorithm to find the largest prime factor of a given positive integer n. -----Input----- The input consists of several test cases. Each test case is a single positive integer n (2 ≤ n ≤ 10^12). Input is terminated by a number n=0. -----Output----- For each test case, output on a single line the largest prime factor of the given number. -----Example----- Input: 15 21 77 0 Output: 5 7 11","solution":"def largest_prime_factor(n): Finds the largest prime factor of a given positive integer n. if n <= 1: return None # Start with smallest prime factor largest_factor = -1 factor = 2 # Remove all factors of 2 while n % factor == 0: largest_factor = factor n //= factor # Increment factor to check for next potential prime factor factor = 3 max_factor = int(n**0.5) + 1 # Optimization to check up to sqrt(n) while factor <= max_factor: while n % factor == 0: largest_factor = factor n //= factor factor += 2 # If n becomes a prime number greater than 2 if n > 2: largest_factor = n return largest_factor"},{"question":"Given a long list of spacecraft positions and their radius range of signal, determine which spacecrafts can communicate directly with each other and form a network. Two spacecrafts can communicate directly if the distance between them is less than the sum of their signal ranges. **Input:** - The first line of input contains an integer `N` (1 ≤ N ≤ 1000), indicating the number of spacecrafts. - Each of the next `N` lines contains three integers: `xi`, `yi`, and `ri` where (`xi`, `yi`) are the coordinates of the ith spacecraft, and `ri` is the radius range of the signal of the ith spacecraft (1 ≤ xi, yi ≤ 10000 , 1 ≤ ri ≤ 10000). **Output:** - Output the number of groups of spacecrafts that can form direct communication networks. **Example:** Input: ``` 5 1 2 1 2 3 1 10 10 2 12 11 1 12 14 3 ``` Output: ``` 2 ``` **Explanation:** - In the example above, the first two spacecrafts (1 2 1) and (2 3 1) can communicate directly since the distance between them is less than or equal to the sum of their signal ranges (2 ≤ 1+1). - The next three spacecrafts (10 10 2), (12 11 1), and (12 14 3) can form another network because they also satisfy the condition of direct communication either directly or indirectly. - Hence, there are 2 distinct networks of spacecrafts.","solution":"from math import sqrt def find_communicating_groups(N, positions): def can_communicate(p1, p2): distance = sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) return distance <= (p1[2] + p2[2]) # Initialize each spacecraft as a separate group parent = list(range(N)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for i in range(N): for j in range(i + 1, N): if can_communicate(positions[i], positions[j]): union(i, j) # Find unique roots groups = len(set(find(i) for i in range(N))) return groups"},{"question":"# Task **_Given_** a string, **_find the first non-repeating character_** and return it. If all characters are repeating, return **_\\"None\\"_**. ___ # Notes * The input string will only contain lowercase alphabets. * Return the result as a **_string_**. * If there are multiple non-repeating characters, return the first one encountered. ___ # Input >> Output Examples ``` firstNonRepeatingCharacter(\\"swiss\\") ==> return \\"w\\" ``` **_Explanation_**: * The character `\'s\'` repeats, but the character `\'w\'` appears only once. ___ ``` firstNonRepeatingCharacter(\\"racecar\\") ==> return \\"e\\" ``` **_Explanation_**: * The character `\'r\'` appears at both beginning and end, and `\'a\'` appears twice in the middle. The first non-repeating character is `\'e\'`. ___ ``` firstNonRepeatingCharacter(\\"aabbcc\\") ==> return \\"None\\" ``` **_Explanation_**: * All characters appear in repeating pairs, hence the result is **_\\"None\\"_**. ___ ``` firstNonRepeatingCharacter(\\"abacabad\\") ==> return \\"c\\" ``` **_Explanation_**: * The character `\'a\'` repeats multiple times while `\'b\'` appears twice, the first non-repeating character encountered is `\'c\'`. ___ ___ # ALL translations are welcomed Enjoy Learning !!","solution":"def firstNonRepeatingCharacter(s): Returns the first non-repeating character in the string s. If all characters are repeating, returns \\"None\\". char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 for char in s: if char_count[char] == 1: return char return \\"None\\""},{"question":"When cloning a repository, developers often navigate through directories and files to inspect or modify the contents. To assist in this process, you need to implement a function that simulates a basic version of a file system with directory navigation and file creation capabilities. Your task is to implement a file system that supports the following commands: 1. `mkdir path`: This command creates a directory at the specified path. If the intermediate directories don’t exist, they should be created automatically. 2. `add content path`: This command adds a new file at the specified path with the given content. If the intermediate directories don’t exist, they should be created automatically. 3. `ls path`: This command lists the contents of the directory (including files and subdirectories) at the given path. If the path is a file, it should just return the name of the file. The output should be sorted lexicographically. -----Input----- The input consists of a series of commands. Each command is on a new line, and there are no more than 10^3 (1000) commands. The commands follow the format described above. -----Output----- For each `ls path` command, output the contents of the directory or the name of the file. If the directory or file does not exist, return an empty list. -----Examples----- Sample Input: mkdir /a/b/c add file1 /a/b/c/file1.txt mkdir /a/d add file2 /a/d/file2.txt ls / ls /a ls /a/b/c/ ls /a/b/c/file1.txt Sample Output: [\\"a\\"] [\\"b\\", \\"d\\"] [\\"file1.txt\\"] [\\"file1.txt\\"] -----Explanation----- The input consists of a series of commands to create directories and files, and to list their contents. The output for each `ls` command is expected in a lexicographically sorted order. For example, after creating directories and adding files, listing the contents of the root, `/a`, `/a/b/c/`, and the file `/a/b/c/file1.txt`, produces the respective outputs as shown above.","solution":"class FileSystem: def __init__(self): self.fs = {} def mkdir(self, path: str): directories = path.strip(\'/\').split(\'/\') current = self.fs for dir_name in directories: if dir_name not in current: current[dir_name] = {} current = current[dir_name] def add(self, content: str, path: str): directories = path.strip(\'/\').split(\'/\') current = self.fs for dir_name in directories[:-1]: if dir_name not in current: current[dir_name] = {} current = current[dir_name] current[directories[-1]] = content def ls(self, path: str): directories = path.strip(\'/\').split(\'/\') current = self.fs if path == \'/\': return sorted(current.keys()) for dir_name in directories: if dir_name in current: current = current[dir_name] else: return [] if isinstance(current, dict): return sorted(current.keys()) return [directories[-1]] # Sample usage fs = FileSystem() fs.mkdir(\'/a/b/c\') fs.add(\'file1\', \'/a/b/c/file1.txt\') fs.mkdir(\'/a/d\') fs.add(\'file2\', \'/a/d/file2.txt\') print(fs.ls(\'/\')) # Output: [\\"a\\"] print(fs.ls(\'/a\')) # Output: [\\"b\\", \\"d\\"] print(fs.ls(\'/a/b/c/\')) # Output: [\\"file1.txt\\"] print(fs.ls(\'/a/b/c/file1.txt\')) # Output: [\\"file1.txt\\"]"},{"question":"Tom’s Toy Store has a unique way of arranging and selling toy packs. Each toy pack contains a certain number of toys and comes with a price tag. Tom has discovered a particular trend: whenever a customer buys a toy pack, he tries to arrange it in a way that maximizes his total number of toys purchased without exceeding a given budget. Tom wants to find out the optimal combination of toy packs a customer could buy to maximize the number of toys, while staying within a budget. Given a set of toy packs, where each toy pack has a specific number of toys and a price, your task is to determine the maximum number of toys a customer can buy without spending more than a given budget. -----Input----- The input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each input begins with a line containing two space-separated integers n (1 le n le 100) and B (1 le B le 10000), which are the number of types of toy packs and the budget respectively. Each of the next n lines contains two space-separated integers, t and p, which describe a toy pack: - t (1 le t le 1000) is the number of toys in the pack - p (1 le p le 1000) is the price of the pack -----Output----- Output a single line with a single integer, indicating the maximum number of toys a customer can purchase without exceeding the budget B. -----Examples----- Sample Input 1: 5 50 10 5 40 10 30 20 20 15 50 8 Sample Output 1: 130 Sample Input 2: 3 20 15 15 10 10 5 5 Sample Output 2: 20","solution":"def max_toys(n, B, toy_packs): # Initialize dp array where dp[i] is the maximum number of toys with budget i dp = [0] * (B + 1) # Iterate over each toy pack for t, p in toy_packs: # For each toy pack, iterate budget backwards to avoid reuse of same item for j in range(B, p - 1, -1): dp[j] = max(dp[j], dp[j - p] + t) return dp[B] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) B = int(data[1]) toy_packs = [(int(data[i*2 + 2]), int(data[i*2 + 3])) for i in range(n)] result = max_toys(n, B, toy_packs) print(result)"},{"question":"You are the new manager of a water distribution system in a small town. The town consists of n neighborhoods, connected by m one-way pipes. Each pipe is characterized by two integers u_ i and v_ i, indicating that water can flow from neighborhood u_ i to neighborhood v_ i. Your goal is to determine the minimum number of pipes you need to add to ensure that water can flow from any neighborhood to any other neighborhood (i.e., the graph of neighborhoods and pipes is strongly connected). -----Input----- The first line of input contains two space-separated integers n and m (1 leq n leq 1000, 0 leq m leq 10000), the number of neighborhoods and pipes in the town respectively. Then follow m lines, each containing two space-separated integers u_ i and v_ i (1 leq u_ i, v_ i leq n), indicating that there is a one-way pipe from neighborhood u_ i to neighborhood v_ i. -----Output----- Print a single integer, the minimum number of new pipes needed to make the water distribution system strongly connected. -----Examples----- Sample Input: 4 3 1 2 2 3 3 4 Sample Output: 3 Sample Input: 5 6 1 2 2 3 3 1 4 5 5 4 1 4 Sample Output: 1","solution":"def minimum_pipes_to_add(n, m, pipes): from collections import defaultdict, deque def kosaraju(graph, n): def dfs(v, visited, stack): visited.add(v) for neighbor in graph[v]: if neighbor not in visited: dfs(neighbor, visited, stack) stack.append(v) def reverse_graph(graph, n): rev_g = defaultdict(list) for u in range(1, n + 1): for v in graph[u]: rev_g[v].append(u) return rev_g def dfs_util(v, visited): visited.add(v) for neighbor in rev_graph[v]: if neighbor not in visited: dfs_util(neighbor, visited) # Step 1: Order vertices based on the finishing time of dfs visited = set() stack = [] for i in range(1, n + 1): if i not in visited: dfs(i, visited, stack) # Step 2: Reverse the graph rev_graph = reverse_graph(graph, n) # Step 3: Find SCCs in the reversed graph using finishing orders visited.clear() count_scc = 0 while stack: node = stack.pop() if node not in visited: count_scc += 1 dfs_util(node, visited) return count_scc def build_graph(edges, n): graph = defaultdict(list) for u, v in edges: graph[u].append(v) return graph graph = build_graph(pipes, n) count_scc = kosaraju(graph, n) # The minimum number of edges needed to make the graph strongly connected return count_scc - 1 # Example usage: # print(minimum_ppipes_to_add(4, 3, [(1, 2), (2, 3), (3, 4)])) # Output: 3 # print(minimum_ppipes_to_add(5, 6, [(1, 2), (2, 3), (3, 1), (4, 5), (5, 4), (1, 4)])) # Output: 1"},{"question":"You are hired to build an e-commerce website where users can add products to their shopping cart. To ensure the site’s performance, you need to implement a function to efficiently handle bulk requests for adding products to carts. Each request will contain a user ID, a product ID, and a quantity. You need to maintain the state of each user\'s cart after processing all requests. Note that if a product is already in the cart, you should add to its quantity rather than replacing it. -----Input----- The first line of the input contains a positive integer N (1 leq N leq 10^4), indicating the number of incoming requests. The next N lines each contain a single request in the format `user_id product_id quantity`, where `user_id` is a non-negative integer (0 leq texttt{user_id} leq 10^3), `product_id` is a non-negative integer (0 leq texttt{product_id} leq 10^3), and `quantity` is a positive integer (1 leq texttt{quantity} leq 100). -----Output----- For each user mentioned in the requests, output their cart in the following format: ``` user_id, product_id_1:quantity_1, product_id_2:quantity_2, ..., product_id_m:quantity_m ``` The `user_id` should be listed in ascending order, and the products in each cart should also be listed in ascending order based on their `product_id`. -----Examples----- Sample Input: 5 1 100 2 2 200 1 1 100 3 1 101 5 2 200 4 Sample Output: 1, 100:5, 101:5 2, 200:5","solution":"def process_cart_requests(N, requests): Process a list of cart requests and return the state of each user\'s cart. Args: N (int): Number of requests. requests (list): List of requests, each in the format \\"user_id product_id quantity\\". Returns: list: List of strings representing the state of each user\'s cart. carts = {} # Process each request for request in requests: user_id, product_id, quantity = map(int, request.split()) if user_id not in carts: carts[user_id] = {} if product_id not in carts[user_id]: carts[user_id][product_id] = 0 carts[user_id][product_id] += quantity # Generate output result = [] for user_id in sorted(carts.keys()): cart_items = [] for product_id in sorted(carts[user_id].keys()): cart_items.append(f\\"{product_id}:{carts[user_id][product_id]}\\") result.append(f\\"{user_id}, {\', \'.join(cart_items)}\\") return result # Example usage: # N = 5 # requests = [ # \\"1 100 2\\", # \\"2 200 1\\", # \\"1 100 3\\", # \\"1 101 5\\", # \\"2 200 4\\" #] # print(process_cart_requests(N, requests))"},{"question":"You are tasked with developing a program that manages a dynamic list of books in a digital library. Each book has a title and an associated popularity score, which is initially zero but can be updated. Users can perform a set of operations to modify and query the book list. The operations are: 1. Add a new book to the library. 2. Update the popularity score of an existing book. 3. Query for the book with the highest popularity score that has a title containing a given substring. Your program should be able to handle these operations efficiently. Input The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of initial books in the library. Each of the next n lines contains a string t_i (1 ≤ |t_i| ≤ 100) — the title of the i-th book. Each title consists only of lowercase Latin letters. All book titles are unique. The next line contains an integer m (1 ≤ m ≤ 100,000), the number of operations. Each of the next m lines contains an operation in one of the following formats: - \\"ADD t\\" — where t is the title of the book to be added. - \\"UPDATE t x\\" — where t is the title of the book and x (0 ≤ x ≤ 1,000,000,000) is the new popularity score of the book. - \\"QUERY s\\" — where s is the substring to search for in the book titles. Output For each \\"QUERY\\" operation, print the highest popularity score of a book whose title contains the given substring. If no such book exists, print -1. Examples Input ``` 3 harrypotter hobbit catch22 7 QUERY har ADD braveworld UPDATE braveworld 100 QUERY brave UPDATE hobbit 50 QUERY hob QUERY unknown ``` Output ``` 0 100 50 -1 ``` Note: - Initial books added at the start of the program all have a popularity score of zero. - Titles of books are always unique.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title): if title not in self.books: self.books[title] = 0 def update_popularity(self, title, popularity): if title in self.books: self.books[title] = popularity def query(self, substring): max_score = -1 for title in self.books: if substring in title and self.books[title] > max_score: max_score = self.books[title] return max_score def manage_library(n, initial_books, m, operations): library = Library() for title in initial_books: library.add_book(title) results = [] for operation in operations: op_parts = operation.split() if op_parts[0] == \\"ADD\\": library.add_book(op_parts[1]) elif op_parts[0] == \\"UPDATE\\": library.update_popularity(op_parts[1], int(op_parts[2])) elif op_parts[0] == \\"QUERY\\": result = library.query(op_parts[1]) results.append(result) return results"},{"question":"The task is to calculate the number of distinct ways to climb a staircase with N steps given that you can either climb 1 step or 2 steps at a time. Example 1: Input: N = 3 Output: 3 Explanation: There are three ways to climb to the top: 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step Example 2: Input: N = 4 Output: 5 Explanation: There are five ways to climb to the top: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps Your Task: You don\'t need to read input or print anything. Your task is to complete the function climbStairs() which takes the integer N as input and returns the number of distinct ways to reach the top. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 45","solution":"def climbStairs(N): Returns the number of distinct ways to climb a staircase with N steps. You can either climb 1 step or 2 steps at a time. if N <= 0: return 0 elif N == 1: return 1 elif N == 2: return 2 dp = [0] * (N + 1) dp[1] = 1 dp[2] = 2 for i in range(3, N + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[N]"},{"question":"Marie is attempting to evaluate a special sequence of words. She is given a list of words and needs to determine how many words from the list are palindromes. A palindrome is a word that reads the same backward as forward (e.g., \\"level\\", \\"radar\\", \\"deified\\"). Your task is to write a program that will help Marie by counting the number of palindromes in the provided list of words. -----Input----- The first line of input contains a single integer n (1 leq n leq 10^3) — the number of words in the list. Each of the next n lines contains one word, which consists of lowercase English letters. The length of each word does not exceed 10^3 characters. -----Output----- Print a single integer — the number of palindromes in the list. -----Examples----- Input 5 level apple radar banana deified Output 3 Input 4 hello world abc def Output 0 -----Note----- In the first example, the words \\"level\\", \\"radar\\", and \\"deified\\" are palindromes. Therefore, the output is 3.","solution":"def count_palindromes(words): Returns the number of palindromes in the given list of words. return sum(1 for word in words if word == word[::-1])"},{"question":"Sarah loves working with strings. She is particularly fond of finding symmetric strings known as palindromes. A string is a palindrome if it reads the same forwards and backwards. For example, \\"racecar\\" and \\"level\\" are palindromes, while \\"hello\\" and \\"world\\" are not. Sarah came up with a challenge: given a string, can you determine the length of the longest palindromic substring? -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^4) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters only. -----Output----- Print a single integer — the length of the longest palindromic substring. -----Examples----- Input 7 racecar Output 7 Input 10 hellosannas Output 6","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring of s. n = len(s) if n == 0: # Edge case for empty string return 0 # Table to store the longest palindromic substring lengths dp = [[False] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True # Every single character is a palindrome start = 0 # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True max_length = 2 start = i # Check for substrings of length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True max_length = length return max_length # Example usage: # n = 10 # s = \\"hellosannas\\" # print(longest_palindromic_substring_length(s)) # Output: 6"},{"question":"Let\'s consider a sequence of n buildings. Each building has a height represented by an integer h_i. There is a rule that you can only see a building if there are no taller buildings before it. In other words, you can see a building if it is strictly taller than all buildings before it. You are given the heights of n buildings in the order they are built. Your task is to determine how many buildings are visible. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the buildings. -----Output----- Print a single integer: the number of buildings that are visible. -----Examples----- Input 5 3 7 8 3 5 Output 3 Input 4 4 4 4 4 Output 1 Input 6 1 2 3 4 5 6 Output 6 -----Note----- For the first example, buildings with heights 3, 7, and 8 are visible because: - The first building (3) is always visible. - The second building (7) is taller than the first one, so it is visible. - The third building (8) is taller than the first two, so it is visible. - The fourth building (3) is not taller than the previous buildings. - The fifth building (5) is not taller than the third building (8). Therefore, there are 3 visible buildings.","solution":"def count_visible_buildings(n, heights): Returns the number of buildings that are visible. Args: n: Integer, the number of buildings. heights: List of integers, the heights of the buildings. Returns: Integer, the number of visible buildings. if not heights or n == 0: return 0 max_height = heights[0] visible_count = 1 for height in heights[1:]: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"You are given two strings, `a` and `b`, each consisting of lowercase English letters. You want to transform string `a` into string `b` by repeatedly performing the following operation: Select a non-empty substring of `a` and reverse it. Determine the minimum number of operations needed to transform string `a` into string `b`. If it is impossible to transform `a` into `b`, return -1. Input The input consists of two lines: 1. The first line contains the string `a` (1 ≤ |a| ≤ 1000). 2. The second line contains the string `b` (1 ≤ |b| ≤ 1000). Output Output a single line containing the minimum number of operations required to transform `a` into `b`, or -1 if it is impossible to transform `a` into `b`. Examples Input abcdef fedcba Output 1 Input abcdef abcdeg Output -1 Note In the first example, you can transform `a` into `b` by reversing the entire string `a` once. In the second example, it is impossible to transform `a` into `b` because the letter \'g\' in `b` does not appear in `a`.","solution":"def min_reversals_to_transform(a, b): Returns the minimum number of operations needed to transform string `a` into string `b` by reversing substrings, or -1 if it is impossible to transform `a` into `b`. if sorted(a) != sorted(b): return -1 n = len(a) a = list(a) b = list(b) count = 0 for i in range(n): if a[i] != b[i]: j = i while j < n and a[j] != b[i]: j += 1 if j == n: return -1 a[i:j+1] = reversed(a[i:j+1]) count += 1 return count"},{"question":"A tree is a connected graph with no cycles. You are given a tree consisting of `n` nodes (labeled 1 through n) and `n-1` edges. Each node has a value assigned to it, and the values can only be either 0 or 1. Your task is to determine the maximum length of a “good path” in the tree. A good path is defined as a path where the bitwise OR of all values along the path is 1. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of nodes in the tree. The second line contains n integers — the values assigned to the nodes (0 or 1). The following `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) describing an edge between nodes `u` and `v`. -----Output----- Output a single integer, the length of the longest good path in the tree. -----Examples----- Input 5 1 0 0 1 0 1 2 1 3 2 4 2 5 Output 3 Input 3 0 0 0 1 2 1 3 Output 0 -----Note----- In the first example, the longest good path is from node 4 through node 2 to node 1, or from node 5 through node 2 to node 1, each with a length of 3. Both paths contain the values [1, 0, 1], and the bitwise OR is 1. In the second example, there is no good path since all nodes have the value 0. Therefore, the length of the longest good path is 0.","solution":"def longest_good_path(n, values, edges): from collections import defaultdict, deque if 1 not in values: return 0 # Create an adjacency list for the tree adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) def bfs(node): visited = [False] * (n + 1) queue = deque([(node, 0)]) visited[node] = True max_distance = 0 while queue: current, dist = queue.popleft() max_distance = max(max_distance, dist) for neighbor in adj_list[current]: if not visited[neighbor]: if values[neighbor - 1] == 1 or values[node - 1] == 1: queue.append((neighbor, dist + 1)) visited[neighbor] = True return max_distance max_path_length = 0 # Perform BFS for every node that has value 1 for i in range(1, n + 1): if values[i - 1] == 1: max_path_length = max(max_path_length, bfs(i)) return max_path_length"},{"question":"Design a function that takes a collection of words and determines the longest word by length that can be formed using a given set of characters. Disregard case and assume you have an unlimited number of each character in the set. Input You are given two inputs: 1. A string `chars` representing the set of characters. 2. A list of strings `words` representing the collection of words. Each word in the list can only be formed by using the characters from the given string `chars`. You do not need to worry about case since all letters will be in lowercase. Output Return the longest word by length that can be formed using the characters from the given set. If multiple words of the longest length can be formed, return the one that appears first in the input list. Constraints * `1 <= len(chars) <= 10^4` * `1 <= len(words) <= 10^4` * `1 <= len(words[i]) <= 10^4` * Each string in the list `words` consists only of lowercase alphabetical characters. Example ```python chars = \'abpcplea\' words = [\'ale\', \'apple\', \'monkey\', \'plea\'] >>> longest_word(chars, words) \'apple\' ``` In this example, among the words that can be formed using characters from the string `chars,` \'apple\' is the longest. ```python chars = \'abpcplea\' words = [\'a\', \'b\', \'c\'] >>> longest_word(chars, words) \'a\' ``` In this case, the words \'a\', \'b\', and \'c\' can all be formed, but \'a\' appears first in the list. Note Use the function signature as follows: ```python def longest_word(chars: str, words: list) -> str: pass ``` The function should determine and return the longest word that can be constructed from the given characters, preferring the first word found in case of ties. Ensure that you consider performance and readability in your solution.","solution":"def longest_word(chars: str, words: list) -> str: from collections import Counter chars_counter = Counter(chars) def can_form(word): word_counter = Counter(word) for char, count in word_counter.items(): if count > chars_counter.get(char, 0): return False return True longest = \\"\\" for word in words: if can_form(word) and len(word) > len(longest): longest = word return longest"},{"question":"You are given a list of integers representing the heights of students standing in a line. Each student wants to be able to see the teacher, who is standing in front of the line. A student can see the teacher if there are no taller or equally tall students in front of them. Determine the number of students who can see the teacher. Example 1: Input: heights = [1, 2, 3, 2, 1] Output: 3 Explanation: The students with heights 1, 2, and 3 can see the teacher. The student with height 2 after height 3 cannot see the teacher, and neither can the student with height 1 after that. Example 2: Input: heights = [4, 3, 2, 1] Output: 1 Explanation: Only the student with height 4 can see the teacher because every subsequent student is shorter. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countStudentsWhoCanSee() which takes the array heights[] as input and returns the number of students who can see the teacher. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(heights) <= 10^6 1 <= heights[i] <= 10^6","solution":"def countStudentsWhoCanSee(heights): Function to determine the number of students who can see the teacher. A student can see the teacher if there are no taller or equally tall students in front of them. Parameters: heights (List[int]): List of integers representing the heights of students. Returns: int: Number of students who can see the teacher. if not heights: return 0 max_height = 0 count = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"A delivery service needs to optimize its delivery routes based on the number of packages delivered. Each delivery route is represented by a non-negative integer indicating the number of packages to be delivered on that route. To make the process efficient, they want to know what the minimum, maximum, and average number of packages are for a given set of routes by the end of the day. Function Description Complete the deliveryAnalysis function in the editor below. deliveryAnalysis has the following parameter(s): int routes[t]: an array of integers representing the number of packages per route. Returns float[]: an array with three elements: the minimum packages delivered, the maximum packages delivered, and the average packages delivered (rounded to two decimal places). Input Format The first line contains an integer t, the number of routes. The next line contains t space-separated integers textit{routes[i]}, representing the number of packages to be delivered on each route. Constraints 1 leq t leq 10^5 0 leq textit{routes[i]} leq 10^6 Sample Input 1 5 3 6 1 10 4 Sample Output 1 1.00 10.00 4.80 Explanation 1 Given the routes, the minimum number of packages delivered on a single route is 1, the maximum is 10, and the average is (3+6+1+10+4)/5 = 4.80 rounded to two decimal places. Sample Input 2 3 100 200 300 Sample Output 2 100.00 300.00 200.00 Explanation 2 Given the routes, the minimum number of packages delivered on a single route is 100, the maximum is 300, and the average is (100+200+300)/3 = 200.00 rounded to two decimal places.","solution":"def deliveryAnalysis(routes): Returns the minimum, maximum, and average number of packages delivered. Parameters: routes (list): A list of integers representing the number of packages per route. Returns: list: A list containing the minimum, maximum, and average number of packages delivered, rounded to two decimal places. minimum = min(routes) maximum = max(routes) average = round(sum(routes) / len(routes), 2) return [minimum, maximum, average]"},{"question":"Evelyn is working with a grid-based robotic system where robots can move only in predefined directions. The grid is represented as a matrix of size n-by-m. Each cell in the grid can be either accessible or blocked. An accessible cell is denoted by a \'.\' (dot), and a blocked cell is denoted by a \'#\' (hash). The robots start at the top-left corner of the grid (cell [1, 1]) and need to reach the bottom-right corner (cell [n, m]). Robots can move from any accessible cell to another accessible cell in one of the four possible directions: up, down, left, or right. Evelyn needs to determine if there is a path from the top-left corner to the bottom-right corner. Write a program to help Evelyn determine if it\'s possible for a robot to navigate from the top-left to the bottom-right corner of the grid given its current state. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid, respectively. The following n lines each contain a string of m characters representing the grid. Each character is either \'.\' or \'#\'. Output Output \\"YES\\" if there\'s a path from the top-left corner to the bottom-right corner; otherwise, output \\"NO\\". Examples Input 4 4 .... ..#. .#.. .... Output YES Input 3 3 .#. # .#. Output NO Note In the first example, the robot can navigate from the top-left to the bottom-right corner by following the path (1,1) -> (2,1) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4). In the second example, there is no path that allows the robot to navigate from the top-left to the bottom-right corner due to the blocked cells.","solution":"def can_reach_end(n, m, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" queue = deque([(0, 0)]) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited[nx][ny] = True return \\"NO\\""},{"question":"In a distant galaxy, there are various planets connected by teleportation tunnels. Each planet is represented as a node, and each tunnel is represented as an edge in an undirected graph. The graph is connected, meaning there is a path from any planet to any other planet. Travel through each tunnel takes exactly one unit of time. You are given an integer k and your task is to determine if it is possible to paint the nodes of the graph using exactly k different colors such that no two adjacent nodes have the same color. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next t test case descriptions follow. The first line of each test case contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of nodes and the number of edges, respectively. The second line of each test case contains one integer k (1 ≤ k ≤ n) — the number of colors you have. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — representing an edge between nodes u and v. Output For each test case, on the first line, output \\"YES\\" if it is possible to paint the nodes using exactly k different colors such that no two adjacent nodes share the same color. Otherwise, output \\"NO\\". Example Input 3 3 3 3 1 2 2 3 3 1 4 3 2 1 2 2 3 3 4 5 4 3 1 2 2 3 3 4 4 5 Output YES YES YES Note In the first test case, we can use 3 different colors to paint each node: Node 1 with Color 1, Node 2 with Color 2, and Node 3 with Color 3. This ensures no two adjacent nodes have the same color, and exactly k = 3 colors are used. In the second test case, we can use 2 colors to paint each node: Node 1 with Color 1, Node 2 with Color 2, Node 3 with Color 1, and Node 4 with Color 2. This ensures no two adjacent nodes have the same color, and exactly k = 2 colors are used. In the third test case, we can use 3 colors to paint each node: Node 1 with Color 1, Node 2 with Color 2, Node 3 with Color 3, Node 4 with Color 1, and Node 5 with Color 2. This ensures no two adjacent nodes have the same color, and exactly k = 3 colors are used.","solution":"def can_paint_graph(t: int, test_cases: list): def is_bipartite(graph, n): color = [-1] * n def bfs(start): queue = [start] color[start] = 0 while queue: node = queue.pop(0) for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(n): if color[i] == -1: if not bfs(i): return False return True results = [] for case in test_cases: n, m, k, edges = case if k == 1: results.append(\\"NO\\" if m > 0 else \\"YES\\") continue graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) if k >= 3: results.append(\\"YES\\") else: if is_bipartite(graph, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input_output(input_list): t = int(input_list[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_list[index].split()) k = int(input_list[index + 1]) edges = [] for i in range(m): u, v = map(int, input_list[index + 2 + i].split()) edges.append((u, v)) test_cases.append((n, m, k, edges)) index += 2 + m results = can_paint_graph(t, test_cases) for result in results: print(result) # Example usage: input_list = [ \\"3\\", \\"3 3\\", \\"3\\", \\"1 2\\", \\"2 3\\", \\"3 1\\", \\"4 3\\", \\"2\\", \\"1 2\\", \\"2 3\\", \\"3 4\\", \\"5 4\\", \\"3\\", \\"1 2\\", \\"2 3\\", \\"3 4\\", \\"4 5\\" ] process_input_output(input_list)"},{"question":"You are given a list of integers and an integer k. Your task is to determine whether there is a pair of integers in the list whose difference is exactly k. ----Input---- The first line of the input contains an integer t (1 <= t <= 10^4) — the number of test cases. Each test case starts with an integer n (2 <= n <= 10^5) — the number of integers in the list, followed by n integers (absolute values not exceeding 10^9) representing the elements of the list. Each test case also includes an integer k (0 <= k <= 10^9). ----Output---- For each test case, print \\"YES\\" if there is a pair of integers in the list whose difference is exactly k. Otherwise, print \\"NO\\". ----Example---- Input 3 5 1 5 3 4 2 2 4 1 2 3 4 6 5 3 8 12 16 5 10 Output YES YES NO ----Note---- In the first test case, the pair (1, 3) has a difference of 2. In the second test case, the pairs (1, 2), (2, 3), (3, 4), and (4, 5) all have a difference of 1. In the third test case, there is no pair of integers whose difference is exactly 5.","solution":"def has_pair_with_difference(t, test_cases): results = [] for case in test_cases: n, numbers, k = case numbers_set = set(numbers) found = False for number in numbers: if (number + k) in numbers_set or (number - k) in numbers_set: found = True results.append(\\"YES\\") break if not found: results.append(\\"NO\\") return results"},{"question":"Given a string `s`, your task is to determine if it can be rearranged to form a palindrome. A string is considered a palindrome if it reads the same backward as forward. To determine if the string can be rearranged to form a palindrome, you need to check that no more than one character has an odd frequency. For example, the string \\"civic\\" can be rearranged to \\"civic\\", which is a palindrome, but the string \\"ivicc\\" cannot be rearranged to any palindrome. Function Signature: ```python def can_form_palindrome(s: str) -> bool: ``` Input: - A single line containing the string `s` (1 ≤ |s| ≤ 10^5). The string contains only lowercase English letters. Output: - Return `True` if it is possible to rearrange `s` to form a palindrome, otherwise `False`. Examples: Input: ``` civic ``` Output: ``` True ``` Input: ``` ivicc ``` Output: ``` True ``` Input: ``` hello ``` Output: ``` False ``` Input: ``` aabbcadad ``` Output: ``` True ``` Explanation: 1. For the string \\"civic\\", it is already a palindrome. 2. For the string \\"ivicc\\", it can be rearranged to \\"civic\\", which is a palindrome. 3. For the string \\"hello\\", no rearrangement can form a palindrome since more than one character (h, e, o) has an odd frequency. 4. For the string \\"aabbcadad\\", it can be rearranged to \\"abcdadba\\" which is not a palindrome but verifying the odd frequencies can show it is possible to form a palindrome like \\"abcdadba\\". Note that the function only checks the criteria and not the actual rearrangement. Note: - The function should be efficient and handle the input size constraints appropriately.","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter # Count the frequency of each character in the string counter = Counter(s) # Check how many characters have an odd frequency odd_count = sum(1 for count in counter.values() if count % 2 != 0) # No more than one character should have an odd frequency return odd_count <= 1"},{"question":"You are given a string `s` of length `n` consisting only of characters \'a\' and \'b\'. A segment is defined as a contiguous substring of `s` that consists of the same character. You can perform the following operation any number of times: select a segment consisting of character \'a\' and flip all \'a\'s in the segment to \'b\'s. Your task is to determine the minimum number of such operations required to make all the characters in the string `s` equal to \'b\'. -----Input----- The first line of the input contains an integer `n` (1 ≤ n ≤ 100) — the length of the string `s`. The second line of the input contains the string `s` consisting of characters \'a\' and \'b\'. -----Output----- Print one integer — the minimum number of operations required to make all the characters in the string `s` equal to \'b\'. -----Examples----- Input 5 abaaa Output 2 Input 7 aababaa Output 3 -----Note----- In the first example, we can flip the segment \\"a\\" at position 1 in one operation and the segment \\"aaa\\" at positions 3 to 5 in another operation for a total of 2 operations. In the second example, we can flip the segment \\"a\\" at positions 1, the segment \\"a\\" at position 3, and the segment \\"a\\" at positions 5 to 7 in 3 operations.","solution":"def min_operations_to_convert_to_b(n, s): Returns the minimum number of operations required to make all characters in the string s equal to \'b\' by flipping segments of \'a\'s. Parameters: n (int): the length of the string s s (str): the input string consisting only of \'a\' and \'b\' Returns: int: the minimum number of operations required if n == 0: return 0 count = 0 i = 0 while i < n: if s[i] == \'a\': count += 1 while i < n and s[i] == \'a\': i += 1 i += 1 return count"},{"question":"You are given a list of integers representing the number of messages received each day over a period of time. You need to determine the longest streak of days on which the number of messages received was strictly increasing. -----Constraints----- - The length of the list, N, satisfies 1 leq N leq 100. - Each element in the list, M_i, is an integer satisfying 1 leq M_i leq 1000. -----Input----- Input is given from Standard Input in the following format: N M_1 M_2 ... M_N -----Output----- Print the length of the longest streak of days with strictly increasing messages. -----Sample Input----- 7 1 3 5 2 4 7 6 -----Sample Output----- 3 The longest streak with strictly increasing messages is 1, 3, 5.","solution":"def longest_increasing_streak(messages): Returns the length of the longest streak of days with strictly increasing messages. if not messages: return 0 longest_streak = 1 current_streak = 1 for i in range(1, len(messages)): if messages[i] > messages[i - 1]: current_streak += 1 longest_streak = max(longest_streak, current_streak) else: current_streak = 1 return longest_streak"},{"question":"In a town called Alphatown, there is a long straight road with n houses on it. Each house i has a certain height h_i. The town council has decided to paint the houses such that the height difference between any two consecutively painted houses does not exceed k. You have been tasked with finding a way to paint all the houses in such a manner. -----Input----- The first line contains two integers n and k (1 leq n leq 10^5, 0 leq k leq 10^8) — the number of houses and the maximum allowed height difference between any two consecutively painted houses. Each of the following n lines contains one integer h_i (1 leq h_i leq 10^8) — the height of the house in position i. -----Output----- Output \\"YES\\" if it\'s possible to paint all houses such that the height difference between any two consecutively painted houses is at most k. Otherwise, output \\"NO\\". -----Examples----- Input 5 10 4 9 15 20 25 Output YES Input 4 3 1 5 9 11 Output NO -----Note----- In the first example, you can paint the houses in the given order since each consecutive pair has a height difference of at most 10. In the second example, there is no way to paint all houses such that the height difference between any two consecutively painted houses is at most 3. For example, the difference between heights 1 and 5 is greater than 3.","solution":"def check_painting_possible(n, k, heights): Returns \\"YES\\" if it\'s possible to paint all houses such that the height difference between any two consecutively painted houses is at most k, otherwise returns \\"NO\\". # Check the height difference between each consecutive pair of houses for i in range(n - 1): if abs(heights[i] - heights[i + 1]) > k: return \\"NO\\" return \\"YES\\""},{"question":"An online bookstore wishes to organize their book sales data for better analysis. Each sale is represented by the book\'s unique code and the number of copies sold. The bookstore is interested in knowing which book had the highest number of copies sold for the given input data. If there is a tie, they want to know all such books. ------ Input ------ Input will begin with an integer T, the number of test cases. Each test case will start with an integer N, the number of sales records. N lines follow for each test case, each containing a string and an integer separated by a space. The string represents the book\'s code, and the integer represents the number of copies sold. ------ Output ------ For each test case, output the book code(s) of the book(s) with the highest number of copies sold. If there are multiple books, output their codes separated by a space, in lexicographical order. ------ Constraints ------ T ≤ 50 1 ≤ N ≤ 100 The book codes are unique strings of length between 1 and 20 characters. The number of copies sold is between 1 and 1000, inclusive. ------ Sample Input 1 ------ 2 3 book1 100 book2 250 book3 250 4 codeA 500 codeB 120 codeC 500 codeD 450 ------ Sample Output 1 ------ book2 book3 codeA codeC","solution":"def highest_sales(book_sales_data): Finds the book(s) with the highest sales for each test case input. Parameters: book_sales_data (list of tuples): A list where each element is a tuple (book_code, copies_sold). Returns: list: A list of book codes with the highest sales for each test case. from collections import defaultdict sales_dict = defaultdict(int) for book_code, copies_sold in book_sales_data: sales_dict[book_code] += copies_sold max_sales = max(sales_dict.values()) highest_selling_books = [book for book, sales in sales_dict.items() if sales == max_sales] highest_selling_books.sort() return highest_selling_books def bookstore_sales(T, data): Processes multiple test cases of bookstore sales to find highest selling books. Parameters: T (int): Number of test cases data (list of lists): Each element is a list representing the sales data for one test case. Returns: list of lists: Each element is a list of highest selling book codes for that test case results = [] for i in range(T): sales_data = data[i] results.append(highest_sales(sales_data)) return results def parse_input(input_data): Parse the multiline string input into the required format for processing. Parameters: input_data (str): Multiline input string Returns: tuple: Number of test cases (T) and sales data for each test case input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) data = [] index = 1 for _ in range(T): N = int(input_lines[index]) sales_data = [] for j in range(1, N + 1): book_code, copies_sold = input_lines[index + j].split() sales_data.append((book_code, int(copies_sold))) data.append(sales_data) index += N + 1 return T, data def format_output(results): Format the output list of book codes into a multiline string Parameters: results (list of lists): Each element is a list of highest selling book codes for that test case Returns: str: Formatted output string output_lines = [\\" \\".join(result) for result in results] return \\"n\\".join(output_lines)"},{"question":"Magerland is organizing a chess tournament. The tournament will consist of multiple categories based on player ratings: beginner, intermediate, and advanced. Players are divided into these categories using two integer rating boundaries r_1 and r_2 (r_1 < r_2). All players with ratings strictly less than r_1 will be considered beginners. All players with ratings greater or equal to r_2 will be considered advanced. The remaining players will be considered intermediate. Currently, the number of players in each category could be imbalanced. To proceed with the tournament, Magerland needs to ensure that there is at least one player in each category. To achieve this, he may need to move some players between categories by shifting the boundaries r_1 and r_2. Additionally, Magerland also wants to minimize the total difference in ratings within each category. Help Magerland determine the best choice of r_1 and r_2 that minimizes this total difference. -----Input----- The first line of the input contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains a single integer n (2 le n le 2 cdot 10^5) — the number of registered players. The second line of each test case contains n integers r_1, r_2, dots, r_n (1 le r_i le 10^6) — the ratings of the registered players. The sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output two integers r_1 and r_2 (1 le r_1 < r_2 le 10^6) that minimize the total difference in ratings within each category while ensuring that each category has at least one player. -----Examples----- Input: 2 5 200 300 400 500 600 4 100 200 300 400 Output: 300 400 200 300 -----Note----- In the first example, choosing r_1 = 300 and r_2 = 400 distributes the 5 players as follows: - Beginners: [200, 300] - Difference is 100 - Intermediate: [400, 500] - Difference is 100 - Advanced: [600] - Difference is 0 In the second example, choosing r_1 = 200 and r_2 = 300 distributes the 4 players as follows: - Beginners: [100, 200] - Difference is 100 - Intermediate: [300] - Difference is 0 - Advanced: [400] - Difference is 0","solution":"def find_boundaries(t, test_cases): results = [] for i in range(t): n, ratings = test_cases[i] ratings.sort() # Initialize variables to store minimum boundary differences and indices min_diff = float(\'inf\') r1_idx, r2_idx = 0, 2 for j in range(1, n - 1): diff = max(ratings[j] - ratings[j - 1], ratings[j + 1] - ratings[j]) if diff < min_diff: min_diff = diff r1_idx, r2_idx = j, j + 1 results.append((ratings[r1_idx], ratings[r2_idx])) return results # Handle input and output processing def process_input_output(input_text): input_lines = input_text.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) ratings = list(map(int, input_lines[index + 1].split())) test_cases.append((n, ratings)) index += 2 results = find_boundaries(t, test_cases) result_str = \\"n\\".join(f\\"{r1} {r2}\\" for r1, r2 in results) return result_str"},{"question":"You are given an array b consisting of n integers and q operations. Each operation can be one of the following: 1. Update operation: \\"1 i v\\" - update the i-th element of the array to v (1 ≤ i ≤ n, 0 ≤ v ≤ 105). 2. Query operation: \\"2 l r\\" - calculate the sum of elements from index l to r (1 ≤ l ≤ r ≤ n). Your task is to write a program that performs all the given operations and outputs the results of the query operations in the order they were given. Input The first line contains two integers n and q (1 ≤ n, q ≤ 105) – the number of elements in the array and the number of operations. The second line contains n integers: b1, b2, ..., bn (0 ≤ bi ≤ 105) – the initial elements of the array. Each of the next q lines describes an operation in one of the following formats: - \\"1 i v\\" (1 ≤ i ≤ n, 0 ≤ v ≤ 105) – an update operation, - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) – a query operation. Output For each query operation, output the sum of the elements from index l to r, inclusive, on a new line. Examples Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 1 4 7 2 3 5 Output 6 14 15 Input 3 3 1 2 3 2 1 2 1 1 5 2 1 3 Output 3 10","solution":"def array_operations(n, q, b, operations): Perform update and query operations on the array b. Parameters: n (int): number of elements in the array q (int): number of operations b (list of int): initial elements of the array operations (list of tuple): list of operations - \\"1 i v\\" for update operation - \\"2 l r\\" for query operation Returns: list of int: results of the query operations results = [] for operation in operations: if operation[0] == 1: # Update operation i, v = operation[1] - 1, operation[2] b[i] = v elif operation[0] == 2: # Query operation l, r = operation[1] - 1, operation[2] sum_elements = sum(b[l:r]) results.append(sum_elements) return results"},{"question":"A popular theme park has recently introduced a new roller coaster ride. The ride is so exciting that everyone wants to try it at least once. However, due to safety regulations, each roller coaster can only hold a certain weight limit. The park wants to maximize the number of people who can enjoy the ride without exceeding the weight limit. You are given the total number of days for which the park\'s data is available, the number of people wanting to go on the ride each day, a list of their weights, and the maximum weight capacity of the roller coaster for each day. Your task is to determine the maximum number of people that can be grouped together without exceeding the maximum weight limit for each day. *Input* The first line contains a single integer T - the number of days. The T cases follow. First line of every case consists of a single integer N, denoting the number of people and W denoting the maximum weight capacity of the roller coaster. Second line of every case consists of N integers denoting the weight of each person. *Output* In T lines, print T integers – the maximum number of people that can be grouped together without exceeding the weight limit. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ weight[i] ≤ 200 1 ≤ W ≤ 20,000 *Problem Setter:* Anjali Dey SAMPLE INPUT 2 5 500 100 200 150 80 120 4 300 90 85 110 50 SAMPLE OUTPUT 4 3 Explanation Day 1: The roller coaster can choose (100, 80, 120) or (80, 100, 150), etc. In any case the maximum possible people that can be grouped together is 4. Day 2: One of the possible optimal solutions is (90, 85, 110). In any case, the maximum number of people that can be grouped together is 3.","solution":"def max_people_per_day(T, cases): results = [] for case in cases: N, W = case[0] weights = sorted(case[1]) current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break results.append(count) return results"},{"question":"A grid-based puzzle game is being developed for a popular smartphone platform. In this game, a character starts at the top-left corner of an `n x m` grid and needs to reach the bottom-right corner. The character can move right or down one cell at a time. Each cell in the grid contains a non-negative integer, representing the cost to enter that cell. The character must pay the cost of the cell they enter. The goal is to find the minimum cost required for the character to reach the bottom-right corner from the top-left corner of the grid. Input The first line contains two integers n and m, separated by a space, representing the number of rows and columns of the grid. Each of the next n lines contains m integers separated by spaces, representing the cost grid. Output The only output line should contain an integer, denoting the minimum cost to reach the bottom-right corner of the grid from the top-left corner. Constraints - 1 ≤ n, m ≤ 100 - Each cell cost is a non-negative integer less than or equal to 1000. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Explanation The optimal path is 1 -> 3 -> 1 -> 1 -> 1, with a total cost of 7.","solution":"def minimum_cost_path(n, m, grid): Find the minimum cost path from the top-left to bottom-right corner in a grid. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): The cost grid. Returns: int: Minimum cost to reach the bottom-right corner. # Initialize a DP table to store the minimum costs dp = [[0] * m for _ in range(n)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Return the cost to reach the bottom-right corner return dp[n-1][m-1]"},{"question":"Alex is participating in a programming competition that involves manipulating strings. One of the tasks he faces is to transform a given string using a set of operations, in order to form a palindrome. A palindrome is a string that reads the same backward as forward. Alex is given a string S consisting of lowercase English letters. He is allowed to perform the following operation any number of times (including zero): - Choose any character and replace it with any other lowercase English character. Alex\'s objective is to determine the minimum number of operations required to transform S into a palindrome. -----Input----- - A single line containing the string S (1 leq |S| leq 10^5). -----Output----- Output the minimum number of operations required to transform the given string into a palindrome. -----Examples----- Sample Input 1: abc Sample Output 1: 1 Sample Input 2: racecar Sample Output 2: 0 Sample Input 3: abcd Sample Output 3: 2","solution":"def min_operations_to_palindrome(S): This function returns the minimum number of operations required to transform the given string S into a palindrome. n = len(S) count = 0 # Compare characters from beginning to end and keep count of mismatches for i in range(n // 2): if S[i] != S[n - i - 1]: count += 1 return count"},{"question":"Given a binary tree, you are tasked with finding the longest path from the root to a leaf node where each node in the path satisfies a given condition. The condition is that the value of a node must be greater than the value of its parent. In other words, each step along the path should move from a node to a child with a strictly greater value. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of nodes in the binary tree. - The next N lines each contain three integers: node_value, left_child_value, and right_child_value. If a node does not have a left or right child, the corresponding value will be -1. ------ Output Format ------ For each test case, output in a single line the length of the longest path from the root to a leaf where every node has a value greater than its parent. If no such path exists, return 0. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ node_value ≤ 10^6 - Tree nodes are indexed uniquely and values are guaranteed to be positive integers. - The root of the tree is the first node listed in the input for each test case. ------ Sample Input 1 ------ 2 5 10 5 15 5 -1 -1 15 12 20 12 -1 -1 20 -1 -1 3 7 3 9 3 -1 -1 9 -1 -1 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Test Case 1: The longest path with increasing node values is: 10 -> 15 -> 20. Test Case 2: The longest path with increasing node values is: 7 -> 9.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_list): if not node_list: return None nodes = {node_value: TreeNode(node_value) for node_value, _, _ in node_list} root = nodes[node_list[0][0]] for node_value, left_value, right_value in node_list: node = nodes[node_value] if left_value != -1: node.left = nodes[left_value] if right_value != -1: node.right = nodes[right_value] return root def longest_increasing_path(root): def dfs(node): if not node: return 0 left_length = 0 right_length = 0 if node.left and node.left.value > node.value: left_length = dfs(node.left) if node.right and node.right.value > node.value: right_length = dfs(node.right) return max(left_length, right_length) + 1 return dfs(root) def process_test_case(): T = int(input().strip()) results = [] for _ in range(T): N = int(input().strip()) node_list = [tuple(map(int, input().strip().split())) for _ in range(N)] root = build_tree(node_list) results.append(longest_increasing_path(root)) for result in results: print(result)"},{"question":"An ancient civilization was fond of symmetric strings! -----Input:----- - The first line contains a single integer M, representing the length of the string. - The second line contains the string S consisting of lowercase alphabetical characters only. -----Output:----- Output in a single line the maximum length of the largest symmetric substring. A symmetric substring is defined as a substring that reads the same backward as forward (a palindrome). -----Constraints----- - 1 leq M leq 5000 -----Sample Input 1:----- 7 abacaba -----Sample Output 1:----- 7 -----Sample Input 2:----- 6 abbacc -----Sample Output 2:----- 4","solution":"def longest_symmetric_substring(M, S): Returns the maximum length of the largest symmetric (palindromic) substring. def is_palindrome(sub): return sub == sub[::-1] max_length = 1 for i in range(M): for j in range(i + 1, M + 1): if is_palindrome(S[i:j]): max_length = max(max_length, j - i) return max_length"},{"question":"In a mystical land, there is a peculiar tradition of coding words using an ancient system. You are given a string of lowercase letters where each letter needs to be converted to its corresponding position in the alphabet. Your task is to write a function that takes this string as input and returns a string of numbers representing each letter\'s position in the alphabet separated by spaces. Input The input consists of a single string `s` which contains only lowercase letters (a-z). Output Output a single string of numbers separated by spaces where each number represents the position of the corresponding letter in the alphabet. Examples Input abc Output 1 2 3 Input hello Output 8 5 12 12 15 Note The position of the letter \'a\' is 1, \'b\' is 2, ..., \'z\' is 26.","solution":"def alphabet_positions(s): Converts a string of lowercase letters to a string of numbers representing each letter\'s position in the alphabet separated by spaces. return \' \'.join(str(ord(char) - ord(\'a\') + 1) for char in s)"},{"question":"In a dystopian society, where resources are scarce and rationing is the norm, the citizens are given vouchers each month to obtain essential items. Each voucher can be exchanged for a specific amount of different types of resources. The government wants to ensure that each household gets the maximum possible amount of resources they need using the vouchers provided. You are given a list of resources and their respective requirements for a household, as well as a list of vouchers, each containing multiple resources and their respective quantities. Your task is to determine the maximum amount of resources a household can get for each type, given the available vouchers. -----Input----- The first line of input contains an integer R, 1 leq R leq 1000, the number of different resources. The next R lines contain the name of the resource and the required amount for the household. Each resource name is a string of up to 20 characters and the required amount is an integer 1 leq text{amount} leq 10000. The next line contains an integer V, 1 leq V leq 5000, the number of vouchers. Each of the next V lines contains a string representing the voucher ID, followed by a number indicating the number of different resources this voucher provides. For each resource, the line then contains the resource name and the quantity provided by this voucher. -----Output----- For each resource, output the maximum quantity the household can get using all available vouchers. If a resource cannot meet its requirement, output 0 for that resource. -----Examples----- Sample Input: 3 water 500 food 300 medicine 100 2 vouch1 2 water 300 food 200 vouch2 2 water 300 medicine 100 Sample Output: 600 200 100","solution":"def max_resources(resource_requirements, vouchers): Returns the maximum amount of resources a household can get for each type, given the available vouchers. Parameters: resource_requirements (list): A list of tuples where each tuple contains a resource name and the required amount. vouchers (list): A list of tuples where each tuple contains a voucher ID, the number of different resources this voucher provides, followed by resource name and the quantity provided. Returns: dict: A dictionary with resource names as keys and the maximum quantity the household can get as values. # Initialize a dictionary to keep track of the maximum amount of each resource max_resources = {resource[0]: 0 for resource in resource_requirements} for voucher in vouchers: # Start from the third element to skip voucher ID and number of resources provided by this voucher for i in range(2, len(voucher), 2): resource_name = voucher[i] quantity_provided = int(voucher[i + 1]) if resource_name in max_resources: max_resources[resource_name] += quantity_provided return max_resources def process_input_output(): import sys input = sys.stdin.read data = input().split(\'n\') R = int(data[0]) resource_requirements = [] start_index = 1 for i in range(R): resource, amount = data[start_index + i].split() resource_requirements.append((resource, int(amount))) V = int(data[start_index + R]) vouchers = [] start_voucher = start_index + R + 1 for i in range(V): voucher_data = data[start_voucher + i].split() vouchers.append(voucher_data) max_res = max_resources(resource_requirements, vouchers) for resource, _ in resource_requirements: print(max_res[resource])"},{"question":"**Problem Statement** **Matrix Word Search** In this coding challenge, your task is to implement a **Matrix Word Search**. You need to write a function that checks whether a given word can be constructed in a sequential manner vertically, horizontally, or diagonally within a 2D grid of characters. # Input - A 2D grid (list of lists) of single characters. - A list of words (each word is a string). # Output - A list of boolean values where each boolean value corresponds to a word from the input list indicating whether that word can be found in the grid or not. # How It Works 1. Words can be constructed using letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. 2. The same letter cell may not be used more than once per word. 3. The function should handle different grid sizes and different word lengths. # Example ```python grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] words = [\\"ABCCED\\", \\"SEE\\", \\"ABCB\\", \\"FDC\\"] # The expected output would be [True, True, False, True] ``` Explanation: - \\"ABCCED\\" can be traced as [\\"A\\" -> \\"B\\" -> \\"C\\" -> \\"C\\" -> \\"E\\" -> \\"D\\"] in the grid. - \\"SEE\\" can be traced as [\\"S\\" -> \\"E\\" -> \\"E\\"]. - \\"ABCB\\" cannot be constructed as \\"B\\" would need to be used twice from the same cell. - \\"FDC\\" can be traced as [\\"F\\" -> \\"D\\" -> \\"C\\"]. # Constraints - The grid will have at least 1 x 1 dimension and at most 100 x 100. - Words have at least 1 and at most 10 characters. - Characters in the grid are uppercase English letters. # Function Signature ```python def matrix_word_search(grid: List[List[str]], words: List[str]) -> List[bool]: # Your code goes here ``` # Notes - You may assume that all inputs are valid and fit within the given constraints. - Optimal performance is desirable, especially for larger grids and multiple words.","solution":"def matrix_word_search(grid, words): def dfs(word, index, x, y, visited): if index == len(word): return True if (x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or word[index] != grid[x][y] or (x, y) in visited): return False visited.add((x, y)) result = (dfs(word, index + 1, x + 1, y, visited) or dfs(word, index + 1, x - 1, y, visited) or dfs(word, index + 1, x, y + 1, visited) or dfs(word, index + 1, x, y - 1, visited) or dfs(word, index + 1, x + 1, y + 1, visited) or dfs(word, index + 1, x - 1, y - 1, visited) or dfs(word, index + 1, x + 1, y - 1, visited) or dfs(word, index + 1, x - 1, y + 1, visited)) visited.remove((x, y)) return result def search_word(word): for i in range(len(grid)): for j in range(len(grid[0])): if dfs(word, 0, i, j, set()): return True return False return [search_word(word) for word in words]"},{"question":"Given a list of integers, return the sum of all unique elements in the list. A unique element is one that appears exactly once in the list. Example: Input: [1, 2, 3, 2, 4, 3] Output: 5 Explanation: The elements 1 and 4 are unique, and their sum is 5. Input: [4, 4, 4, 4] Output: 0 Explanation: There are no unique elements in the list.","solution":"def sum_of_unique_elements(nums): Returns the sum of all unique elements in the list. A unique element is one that appears exactly once in the list. from collections import Counter counts = Counter(nums) return sum(num for num, count in counts.items() if count == 1)"},{"question":"You are given an array of `n` integers. You need to determine whether you can partition the array into two non-empty subsets such that the absolute difference of the sums of the elements in these subsets is minimal. -----Input----- The first line contains a single integer `n` — the number of elements in the array. The second line contains `n` integers, `a1, a2, ..., an` — the elements of the array. -----Output----- Print a single integer — the minimal absolute difference of the sums of the elements in the two subsets. -----Examples----- Input 4 1 6 11 5 Output 1 Input 3 1 3 4 Output 0 Input 5 5 5 5 5 1 Output 1 -----Note----- In the first example, partitioning the array into {1, 6, 5} and {11} leads to sums of 12 and 11, respectively. The absolute difference is |12 - 11| = 1, which is minimal. In the second example, partitioning the array into {1, 4} and {3} leads to sums of 5 and 4, respectively. The absolute difference is |5 - 4| = 1. However, partitioning into {1, 3} and {4} results in sums of 4 and 4, and |4 - 4| = 0, which is the minimal difference. In the third example, partitioning the array into {5, 5, 5, 5} and {1} leads to sums of 20 and 1, respectively, and |20 - 1| = 19. A better partition is {5, 5, 5, 1} and {5, 5} with sums of 16 and 10, leading to |16 - 10| = 6, which can be further optimized to a smaller value.","solution":"def find_min_difference(arr): total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): dp[i][j] = dp[i-1][j] if arr[i-1] <= j: dp[i][j] = dp[i][j] or dp[i-1][j-arr[i-1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: subset1_sum = j break subset2_sum = total_sum - subset1_sum return abs(subset1_sum - subset2_sum)"},{"question":"Alice is planning to build a custom bookshelf for her new home. The bookshelf has to be built such that it conforms to certain size and shape constraints. She will be utilizing a given set of wooden planks, each with a specific length, to construct multiple shelves. Each shelf must be exactly of a given length. Alice can cut a wooden plank into smaller segments, but she cannot join two separate segments to form a shelf. Given the lengths of the wooden planks and the desired length for the shelves, determine the maximum number of shelves of the given length that can be made. To summarize, you need to determine how many full shelves of a specific length can be constructed from the given planks, considering cutting but not joining of planks is allowed. -----Constraints----- - 1 leq desired_length leq 10^4 - 1 leq number_of_planks leq 100 - 1 leq plank_length_i leq 10^4 for each plank -----Inputs----- Input is given from Standard Input in the following format: desired_length number_of_planks plank_length_1 plank_length_2 ... plank_length_number_of_planks -----Outputs----- Print one integer, which is the maximum number of shelves of the desired length that can be constructed. -----Sample Input----- 5 3 12 10 7 -----Sample Output----- 5 Explanation: Alice needs shelves that are 5 units long. She has 3 planks with lengths 12, 10, and 7. - From the first plank (length 12), she can make 2 shelves (2 * 5 = 10), leaving 2 units of leftover wood. - From the second plank (length 10), she can also make 2 shelves (2 * 5 = 10), with no leftover wood. - From the third plank (length 7), she can make 1 shelf, with 2 units of leftover wood. Thus, she can construct a maximum of 5 shelves with the given planks.","solution":"def max_shelves(desired_length, planks): Determines the maximum number of shelves of the given length that can be constructed from the planks. Args: desired_length (int): The required length of each shelf. planks (list of int): The lengths of available planks. Returns: int: The maximum number of shelves that can be constructed. max_shelves_count = 0 for plank in planks: max_shelves_count += plank // desired_length return max_shelves_count"},{"question":"Tom is playing a game with an integer array A. The game involves finding the difference between the largest and smallest elements in each subarray of a given window size k. Given the array A and the integer k, calculate this difference for each possible subarray of size k in array A. Input: The first line contains two integers n and k, where n is the size of the array (1 ≤ n ≤ 10^5) and k is the subarray size (1 ≤ k ≤ n). The second line contains n space-separated integers, representing the elements of array A (1 ≤ A[i] ≤ 10^9). Output: Print n-k+1 space-separated integers, each representing the result of the kth window from the 1st position. Constraints: 1 ≤ n ≤ 10^5 1 ≤ k ≤ n 1 ≤ A[i] ≤ 10^9 SAMPLE INPUT 7 3 10 5 2 7 8 7 3 SAMPLE OUTPUT 8 5 6 6 5 Explanation Given array A is [10, 5, 2, 7, 8, 7, 3] and k is 3. - The first subarray of size 3: [10, 5, 2] difference is 10 - 2 = 8. - The second subarray of size 3: [5, 2, 7] difference is 7 - 2 = 5. - The third subarray of size 3: [2, 7, 8] difference is 8 - 2 = 6. - The fourth subarray of size 3: [7, 8, 7] difference is 8 - 7 = 1. - The fifth subarray of size 3: [8, 7, 3] difference is 8 - 3 = 5. Hence the output is 8 5 6 1 5.","solution":"def subarray_difference(n, k, A): This function calculates the difference between the maximum and minimum elements for each subarray of size k in the array A. :param n: int : size of the array :param k: int : size of the subarray :param A: list : the array of integers :return: list : list of differences for each subarray if k > n: return [] differences = [] for i in range(n - k + 1): subarray = A[i : i + k] subarray_max = max(subarray) subarray_min = min(subarray) differences.append(subarray_max - subarray_min) return differences"},{"question":"A school is organizing a science fair, and one of the competitions involves building the longest possible chain of magnets. Each magnet has a north and a south pole, and can only be connected if the south pole of one magnet matches up with the north pole of another magnet. Given a set of magnets, determine the length of the longest chain of magnets that can be built. Each magnet is represented by a pair of integers, where the first integer represents the north pole and the second integer represents the south pole. INPUT: - The first line contains the number of test cases T. - For each test case: - The first line contains an integer N, indicating the number of magnets. - The next N lines each contain two integers, representing the north and south poles of each magnet. OUTPUT: For each test case, print the length of the longest chain of magnets that can be built. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ north pole, south pole ≤ 100000 SAMPLE INPUT: 2 2 1 2 2 3 3 1 2 2 1 2 3 SAMPLE OUTPUT: 2 3","solution":"def longest_magnet_chain(test_cases): results = [] for magnets in test_cases: num_magnets = len(magnets) if num_magnets == 0: results.append(0) continue # Build adjacency matrix adj_matrix = [[0] * num_magnets for _ in range(num_magnets)] for i in range(num_magnets): for j in range(num_magnets): if magnets[i][1] == magnets[j][0] and i != j: adj_matrix[i][j] = 1 def dfs(node, visited): visited[node] = True max_length = 1 for i in range(num_magnets): if adj_matrix[node][i] and not visited[i]: length = 1 + dfs(i, visited) max_length = max(max_length, length) visited[node] = False return max_length longest_chain = 0 for i in range(num_magnets): visited = [False] * num_magnets chain_length = dfs(i, visited) longest_chain = max(longest_chain, chain_length) results.append(longest_chain) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) cases = [] index = 1 for _ in range(T): N = int(lines[index]) index += 1 magnets = [] for _ in range(N): magnets.append(tuple(map(int, lines[index].split()))) index += 1 cases.append(magnets) return cases"},{"question":"A company has an annual coding competition where participants can register for one or more challenges. Each challenge has a unique identifier, and participants register by providing their name and the identifier of the challenge they want to register for. The company wants to ensure that each challenge has an equal number of participants. If a participant tries to register for a challenge that already has the maximum allowed participants, they should be added to the next available challenge. Write a program to manage registrations for the competition. ------ Input ------ The first line contains two integers `C` and `M`, where `C` is the number of unique challenges (1 ≤ C ≤ 100) and `M` is the maximum number of participants per challenge (1 ≤ M ≤ 100). The following lines contain registrations in the format \\"Name ChallengeID,\\" where `Name` is a string of lowercase alphabets, and `ChallengeID` is an integer (1 ≤ ChallengeID ≤ C). ------ Output ------ Output the registration status of each participant in the format \\"Name registered to ChallengeID,\\" indicating which challenge the participant was finally registered to. If there are multiple open spots, assign them to the lower numbered challenge. ----- Sample Input 1 ------ 3 2 alice 1 bob 1 charlie 2 dave 1 eve 2 frank 3 ----- Sample Output 1 ------ alice registered to 1 bob registered to 1 charlie registered to 2 dave registered to 2 eve registered to 3 frank registered to 3 ----- explanation 1 ------ The status of each challenge after each registration attempt is as follows: - alice registers to challenge 1 (1 participant in challenge 1). - bob registers to challenge 1 (2 participants in challenge 1, now full). - charlie registers to challenge 2 (1 participant in challenge 2). - dave tries to register to challenge 1 (already full), so he registers to challenge 2 (2 participants in challenge 2, now full). - eve tries to register to challenge 2 (already full), so she registers to challenge 3 (1 participant in challenge 3). - frank registers to challenge 3 (2 participants in challenge 3, now full). Thus, the output reflects the mapping of each participant to their assigned challenges accordingly.","solution":"def register_participants(C, M, registrations): challenges = {i: 0 for i in range(1, C + 1)} # Count of participants in each challenge result = [] for name, challenge_id in registrations: assigned = False for i in range(challenge_id, C + 1): if challenges[i] < M: challenges[i] += 1 result.append(f\\"{name} registered to {i}\\") assigned = True break if not assigned: for i in range(1, challenge_id): if challenges[i] < M: challenges[i] += 1 result.append(f\\"{name} registered to {i}\\") break return result"},{"question":"You are given a grid with N rows and M columns, initially filled with zeroes. You are also given a series of Q update operations. Each update operation specifies row r and column c and increments the value in the cell at position (r, c) by 1. After all the update operations, your task is to return the final state of the grid. Input Format The first line contains two integers N and M, representing the number of rows and columns in the grid respectively. The second line contains an integer Q, representing the number of update operations. The following Q lines each contain two integers r and c, representing the row and column to be updated. Output Format Output the final grid state after all update operations. Each row should be output on a new line with the values separated by spaces. Constraints 1 <= N, M <= 1000 1 <= Q <= 100000 0 <= r < N 0 <= c < M Sample Input 3 3 4 0 0 1 1 2 2 1 1 Sample Output 1 0 0 0 2 0 0 0 1 Explanation The initial grid is: 0 0 0 0 0 0 0 0 0 After the first update operation at (0, 0): 1 0 0 0 0 0 0 0 0 After the second update operation at (1, 1): 1 0 0 0 1 0 0 0 0 After the third update operation at (2, 2): 1 0 0 0 1 0 0 0 1 After the fourth update operation at (1, 1): 1 0 0 0 2 0 0 0 1","solution":"def final_grid_state(N, M, Q, updates): Compute the final state of the grid after Q update operations. Args: N: int - number of rows in the grid M: int - number of columns in the grid Q: int - number of update operations updates: list of tuples - each tuple contains two integers (r, c) representing the row and column of the update operation Returns: list of lists: The final grid state with updated values grid = [[0] * M for _ in range(N)] for r, c in updates: grid[r][c] += 1 return grid"},{"question":"# Find the Longest Path in a Matrix # Overview You are given a matrix of integers, where each cell contains a value. Your task is to find the longest strictly increasing path within the matrix by moving up, down, left, or right. Two cells with the same value are not considered to be part of an increasing path, even if they are adjacent. # Input/Output * Input: - A 2D array (matrix) of integers, `matrix`, where 1 ≤ `len(matrix)`, `len(matrix[0])` ≤ 100. * Output: - An integer representing the length of the longest strictly increasing path in the matrix. # Example ```python matrix = [[9, 9, 4], [6, 6, 8], [2, 1, 1]] # The longest path is [1, 2, 6, 9], so the expected output is 4. print(longestIncreasingPath(matrix)) # Output: 4 ``` ```C int matrix[3][3] = {{9, 9, 4}, {6, 6, 8}, {2, 1, 1}}; // The longest path is [1, 2, 6, 9], so the expected output is 4. printf(\\"%dn\\", longestIncreasingPath(matrix, 3, 3)); // Output: 4 ``` # Constraints - 1 ≤ `len(matrix)`, `len(matrix[0])` ≤ 100 - The matrix may contain both positive and negative integers. - You may assume that the values in the matrix fit within a 32-bit signed integer. # Hint Consider using memoization to store the results of the longest path from each cell to avoid redundant calculations. Also, since you can move in four directions, you might need a helper function for depth-first search (DFS) combined with memoization.","solution":"def longestIncreasingPath(matrix): if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[-1] * cols for _ in range(rows)] def dfs(r, c): if dp[r][c] != -1: return dp[r][c] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] max_length = 1 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] > matrix[r][c]: max_length = max(max_length, 1 + dfs(nr, nc)) dp[r][c] = max_length return dp[r][c] result = 0 for r in range(rows): for c in range(cols): result = max(result, dfs(r, c)) return result"},{"question":"Jessica is organizing a relay race to raise funds for charity. She has a list of N friends who will participate. Given the participants\' names and their running times in seconds, she needs to divide them into two teams such that the difference in total running time between the two teams is minimized. The task is to help Jessica organize the race optimally. Input format: - The first line contains a single integer N denoting the number of participants. - Each of the next N lines contains a string (the name of a participant) and an integer (the participant\'s running time in seconds). Constraints: - 2 ≤ N ≤ 100 - 1 ≤ length of each name ≤ 50 - 1 ≤ running time ≤ 10,000 Output format: - Output two lines: the names of participants in the first team, and the names of participants in the second team. Each name should be separated by a space. - Order of names in each team should match the order in which they were presented in the input. SAMPLE INPUT 4 Alice 120 Bob 150 Charlie 200 Dave 170 SAMPLE OUTPUT Alice Charlie Bob Dave Explanation: One way to divide the teams is as follows: - Team 1: Alice (120) and Charlie (200) with a total time of 320 seconds. - Team 2: Bob (150) and Dave (170) with a total time of 320 seconds. In this case, the total times of the two teams are equal, and thus the difference is minimized.","solution":"def divide_teams(participants): Divides participants into two teams such that the difference in total running time between the two teams is minimized. Parameters: participants (list): List of tuples where each tuple contains a participant\'s name and running time. Returns: (tuple): Tuple containing two lists: the names of participants in the first team and the second team. from itertools import combinations import sys N = len(participants) min_diff = sys.maxsize best_combination = None # Generate all combinations of N//2 participants for comb in combinations(participants, N // 2): team1 = list(comb) team2 = [p for p in participants if p not in team1] time_team1 = sum(p[1] for p in team1) time_team2 = sum(p[1] for p in team2) diff = abs(time_team1 - time_team2) if diff < min_diff: min_diff = diff best_combination = (team1, team2) if best_combination: team1 = [p[0] for p in best_combination[0]] team2 = [p[0] for p in best_combination[1]] return team1, team2 # Example usage # participants = [(\\"Alice\\", 120), (\\"Bob\\", 150), (\\"Charlie\\", 200), (\\"Dave\\", 170)] # team1, team2 = divide_teams(participants) # print(\\" \\".join(team1)) # Output: Alice Charlie # print(\\" \\".join(team2)) # Output: Bob Dave"},{"question":"A rectangle can be described by its width and height. Write a function that, given an array of `n` rectangles (each represented by its width and height), returns an array of perimeters for each rectangle. Perimeter of a rectangle with width `w` and height `h` is given by: `P = 2 * (w + h)` Notes: * The input array could be empty, your function should return an empty array in that case. * Each rectangle is represented as a tuple of positive integers (width, height). * If a rectangle has non-positive width or height, it should be skipped in the output. * The output array should maintain the same order as the input array.","solution":"def calculate_perimeters(rectangles): Given an array of rectangles (each represented by its width and height), return an array of perimeters for each rectangle. Parameters: rectangles (list of tuples): List where each tuple contains two positive integers (width, height). Returns: list: List containing the perimeter of each rectangle. perimeters = [] for width, height in rectangles: if width > 0 and height > 0: perimeter = 2 * (width + height) perimeters.append(perimeter) return perimeters"},{"question":"Johnny has a bag of N candies and he wants to distribute them among P friends in such a way that each friend gets at least one candy. Determine the number of ways he can distribute the candies, considering that the order of distribution does not matter. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input containing two space separated integers N and P denoting the total number of candies and the number of friends, respectively. ------ Output Format ------ For each test case, output the number of ways Johnny can distribute the candies among his friends. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N, P ≤ 100 ------ Sample Input 1 ------ 4 5 2 10 5 6 1 8 4 ------ Sample Output 1 ------ 4 126 1 35 ------ Explanation 1 ------ Test case 1: There are 4 ways to distribute 5 candies among 2 friends. Test case 2: There are 126 ways to distribute 10 candies among 5 friends. Test case 3: There is only 1 way to distribute 6 candies to 1 friend (all candies to one friend). Test case 4: There are 35 ways to distribute 8 candies among 4 friends.","solution":"from math import comb def number_of_ways(N, P): Returns the number of ways to distribute N candies among P friends such that each friend gets at least one candy. if N < P: return 0 return comb(N-1, P-1) def process_input(T, cases): results = [] for case in cases: N, P = case results.append(number_of_ways(N, P)) return results"},{"question":"Garden Watering Problem A gardener has a rectangular garden divided into a grid of m rows and n columns. Each cell in the grid represents an area of the garden and initially contains a certain amount of water. The gardener wants to ensure that every cell in the garden has the same amount of water by redistributing the water between adjacent cells. In each move, the gardener can transfer one unit of water from a cell to one of its four adjacent cells (left, right, up, or down). The gardener can make as many moves as needed but would like to achieve uniform water distribution in the minimum possible moves. You need to determine the minimum number of moves needed to make the water distribution uniform, or if it is impossible to achieve the uniform distribution. Input: The first line contains two integers, m and n, representing the number of rows and columns in the garden grid (1 <= m, n <= 200). The next m lines contain n integers each, where each integer represents the amount of water in that cell (0 <= water amount <= 1000). Output: Print a single integer representing the minimum number of moves needed to make the water distribution uniform, or print -1 if it is impossible. Sample Input 1: 2 2 2 4 6 8 Sample Output 1: 4 Sample Input 2: 2 3 1 2 3 4 5 6 Sample Output 2: -1 Explanation: In the first sample, we can redistribute the water to make all cells contain 5 units of water through 4 moves. In the second sample, it is impossible to redistribute the water to make all cells contain the same amount of water.","solution":"def min_moves_to_uniform_water_distribution(m, n, garden): total_water = sum(sum(row) for row in garden) # Check if it\'s possible to redistribute water uniformly if total_water % (m * n) != 0: return -1 target = total_water // (m * n) total_moves = 0 for i in range(m): for j in range(n): total_moves += abs(garden[i][j] - target) return total_moves // 2 def read_garden_input(): m, n = map(int, input().split()) garden = [list(map(int, input().split())) for _ in range(m)] return m, n, garden if __name__ == \\"__main__\\": m, n, garden = read_garden_input() print(min_moves_to_uniform_water_distribution(m, n, garden))"},{"question":"You are given an undirected graph G with n vertices and m edges. Your task is to determine the minimum number of edges that need to be added to the graph to make it connected. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5), denoting the number of vertices and the number of edges. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between vertex u and vertex v. Output Print one integer — the minimum number of edges that need to be added to make the graph connected. Examples Input 6 2 1 2 4 5 Output 3 Input 8 5 1 2 2 3 4 5 6 7 7 8 Output 2","solution":"def make_connected(n, m, edges): from collections import defaultdict if n <= 1: return 0 def dfs(node, visited, graph): stack = [node] while stack: curr = stack.pop() if curr not in visited: visited.add(curr) stack.extend(graph[curr]) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components_count = 0 for vertex in range(1, n + 1): if vertex not in visited: dfs(vertex, visited, graph) components_count += 1 return components_count - 1"},{"question":"Seismic Labs has developed a robotic arm that can be controlled using a sequence of commands. The robotic arm starts at the origin of a coordinate plane (0,0), and it can move up, down, left, or right in response to commands. Each command is a character: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Moving up or down changes the y coordinate by 1, and moving left or right changes the x coordinate by 1. After executing a series of commands, the robotic arm finds itself at a new position on the coordinate plane. Given the sequence of commands, you need to determine the final position of the robotic arm. -----Input----- The input consists of a single string containing a sequence of commands composed of the characters: \'U\', \'D\', \'L\', \'R\'. The length of the string is between 1 and 1000. -----Output----- Output two integers x and y representing the final coordinates of the robotic arm after executing all commands, separated by a single space. -----Examples----- Input UDLR Output 0 0 Input UUUDDRR Output 2 1 Input LDRRLLU Output -1 0","solution":"def final_position(commands): Determines the final coordinates of the robotic arm after executing all commands. Args: commands (str): a string containing a sequence of commands composed of \'U\', \'D\', \'L\', \'R\'. Returns: tuple: final coordinates (x, y) of the robotic arm. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"-----Problem----- A company organizes its employees\' data in a hierarchical manner where each employee has a unique integer ID, except the company\'s CEO, who is represented by the ID 0. Every employee, except the CEO, has a unique manager directly above them in the hierarchy. Given the relationship between employees and their managers, determine the maximum depth of the company hierarchy tree starting from the CEO. The depth of the hierarchy is defined as the longest path from the CEO to any other employee. -----Input----- - The first line contains an integer N, the number of employees in the company (excluding the CEO). - Each of the following N lines contains two space-separated integers, `employee ID` and `manager ID`, indicating that the employee is directly managed by the manager. -----Output----- - The first and only line of output should contain the maximum depth of the hierarchy tree. -----Constraints----- - 1 ≤ N ≤ 10^5 - Employee IDs and Manager IDs are unique and range from 1 to N (except the CEO whose ID is 0). - Each employee has exactly one direct manager. -----Sample Input----- 5 1 0 2 1 3 1 4 2 5 4 -----Sample Output----- 4 -----Explanation----- - Employee 1 reports directly to the CEO. - Employee 2 and Employee 3 report directly to Employee 1. - Employee 4 reports directly to Employee 2. - Employee 5 reports directly to Employee 4. The maximum depth of the hierarchy tree originating from the CEO (ID 0) is 4: CEO -> Employee 1 -> Employee 2 -> Employee 4 -> Employee 5.","solution":"def max_hierarchy_depth(n, relations): from collections import defaultdict, deque # Create an adjacency list to represent the hierarchical tree tree = defaultdict(list) for emp_id, mgr_id in relations: tree[mgr_id].append(emp_id) # Perform a BFS from the CEO (ID 0) to find the maximum depth queue = deque([(0, 0)]) # (current_node, current_depth) max_depth = 0 while queue: current, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in tree[current]: queue.append((neighbor, depth + 1)) return max_depth # Example usage if __name__ == \\"__main__\\": n = 5 relations = [ (1, 0), (2, 1), (3, 1), (4, 2), (5, 4) ] print(max_hierarchy_depth(n, relations)) # Output: 4"},{"question":"Flippy is playing with a deck of cards that has integers written on them. The cards are arranged in a sequence such that some cards are face-up and some are face-down. If a card is face-up, you can see the integer written on it. However, if a card is face-down, you cannot see the integer. Flippy wants to know the sum of integers written on all the face-up cards. Initially, you are given the number of cards n and the sequence of face-up integers and \'X\' characters denoting face-down cards (1 ≤ n ≤ 1000). You need to write a program that will find the sum of face-up integers. # Input: - The first line contains a single integer, n, denoting the number of cards. - The second line contains a sequence of length n consisting of integers and \'X\' characters separated by whitespace. # Output: - Print a single integer, the sum of the integers on the face-up cards. # Example: Input: ``` 5 1 2 X 4 5 ``` Output: ``` 12 ``` # Note: For the given example, the face-up cards are 1, 2, 4, and 5, hence the sum is 1 + 2 + 4 + 5 = 12. ```python # Implementation in Python n = int(input()) sequence = input().split() total_sum = 0 for item in sequence: if item != \'X\': total_sum += int(item) print(total_sum) ```","solution":"def sum_face_up_cards(n, sequence): Returns the sum of face-up integers in the provided sequence of cards. Parameters: n (int): Number of cards, although it is not used in the function. sequence (list of str): Sequence containing integers and \'X\' characters. Returns: int: Sum of the face-up integers. total_sum = 0 for item in sequence: if item != \'X\': total_sum += int(item) return total_sum"},{"question":"A spaceship coded message consists of a series of instructions to move in a 2D grid. The spaceship starts at the origin (0,0) on the grid and needs to follow these instructions to reach a final destination point. The grid is infinite in all directions. The instructions are given as a string consisting of the characters \'U\', \'D\', \'L\', and \'R\', which denote movements in the upward, downward, leftward, and rightward directions respectively. The spaceship moves one unit per instruction. Write a program that determines the final coordinates of the spaceship after executing all the instructions in the given string. # Input The input consists of a single line containing the instruction string. The string can be of length 1 to 1000. # Output Output the final coordinates of the spaceship in the format (x, y). # Example Input ``` UUDDLRLR ``` Output ``` (0, 0) ``` Input ``` UUU ``` Output ``` (0, 3) ``` # Constraints - The input string will only contain the characters \'U\', \'D\', \'L\', and \'R\'. - The input string will have at least 1 character and at most 1000 characters.","solution":"def final_coordinates(instructions): Determines the final coordinates of the spaceship after following the instructions. Parameters: instructions (str): A string consisting of the characters \'U\', \'D\', \'L\', and \'R\', denoting movements. Returns: tuple: A tuple (x, y) representing the final coordinates of the spaceship. x, y = 0, 0 for char in instructions: if char == \'U\': y += 1 elif char == \'D\': y -= 1 elif char == \'L\': x -= 1 elif char == \'R\': x += 1 return (x, y)"},{"question":"# Problem Statement You are tasked with writing a program that, given a string consisting of lowercase letters and digits, can determine the number of distinct substrings that can be formed from it. Here, substrings are defined as any continuous portion of the string. For instance, the string \\"abc\\" has the substrings: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Note that all characters are distinct in this example, so all possible substrings are unique. Your goal is to implement the function `count_distinct_substrings(s: str) -> int` that returns the number of distinct substrings for the given string `s`. Input - The input is a single line string `s` consisting of lowercase English letters and digits. - The length of the string `s` is between 1 and 50 inclusive. Output - The output should be a single integer, the number of distinct substrings of the given string. Example Input ``` abc ``` Output ``` 6 ``` Input ``` ababa ``` Output ``` 9 ``` Explanation For the first example \\"abc\\", the distinct substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\", totaling 6. For the second example \\"ababa\\", the distinct substrings are \\"a\\", \\"ab\\", \\"aba\\", \\"abab\\", \\"ababa\\", \\"b\\", \\"ba\\", \\"bab\\", and \\"baba\\", totaling 9 unique substrings. Note - Substrings are considered distinct if they are different in terms of sequence, even if they include the same characters.","solution":"def count_distinct_substrings(s: str) -> int: Returns the number of distinct substrings for the given string. distinct_substrings = set() # Generate all possible substrings and add them to the set for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] distinct_substrings.add(substring) return len(distinct_substrings)"},{"question":"Given an undirected graph with N nodes and M edges stored as adjacency lists, determine whether the graph is bipartite. A graph is bipartite if its vertices can be divided into two disjoint sets U and V such that no two vertices within the same set are adjacent. Use depth-first search (DFS) for the implementation. Example 1: Input: N = 4, M = 4 Edges = [[0, 1], [0, 3], [1, 2], [2, 3]] Output: True Explanation: The graph can be divided into two sets {0, 2} and {1, 3}. Example 2: Input: N = 3, M = 3 Edges = [[0, 1], [1, 2], [2, 0]] Output: False Explanation: The graph contains an odd-length cycle (0-1-2-0), so it\'s not bipartite. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isBipartite() which takes the integer N, the integer M, and the list of pairs Edges as input parameters and returns True if the graph is bipartite, otherwise returns False. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 1000 0 <= M <= 2000 0 <= Nodes < N Edges[i] length is 2 0 <= Edges[i][0], Edges[i][1] < N","solution":"def isBipartite(N, M, Edges): Determines whether a given undirected graph with N nodes and M edges is bipartite. Parameters: N (int): Number of nodes in the graph. M (int): Number of edges in the graph. Edges (list of list of int): List of edge pairs representing the graph. Returns: bool: True if the graph is bipartite, otherwise False. adj_list = [[] for _ in range(N)] for u, v in Edges: adj_list[u].append(v) adj_list[v].append(u) color = [-1] * N def dfs(node, c): color[node] = c for neighbor in adj_list[node]: if color[neighbor] == -1: if not dfs(neighbor, 1 - c): return False elif color[neighbor] == color[node]: return False return True for i in range(N): if color[i] == -1: if not dfs(i, 0): return False return True"},{"question":"**Problem:** You are provided with an array `arr` of integers and an integer `k`. Your task is to find the k-th largest element in the array. Keep in mind that it is the k-th largest element in the sorted order, not the k-th distinct element. **Input** - The first line contains an integer `n`, the size of the array `arr` (1 ≤ n ≤ 10^5). - The second line contains `n` integers, the elements of `arr` (−10^4 ≤ arr[i] ≤ 10^4). - The third line contains an integer `k` (1 ≤ k ≤ n). **Output** - Output a single integer, the k-th largest element of the array. **Example** Input 6 3 2 1 5 6 4 2 Output 5 Input 10 4 6 1 3 5 9 7 2 8 10 4 Output 7 **Hint** Consider the use of a suitable data structure or technique to efficiently determine the k-th largest element.","solution":"import heapq def find_kth_largest(arr, k): Finds the k-th largest element in the array. return heapq.nlargest(k, arr)[-1]"},{"question":"Mike is a software engineer who loves mixing programming with basic arithmetic. He was recently faced with an interesting problem at work. He was given two integers, `a` and `b`, and was asked to merge them into a single floating-point number by combining their digits alternatively, starting with the first digit of `a`. If one number runs out of digits, the rest of the digits from the other number should be appended directly. For example, merging 123 and 4567 results in 1425367. Your task is to write a function that performs this merging operation as described. -----Input----- The first line contains two integers `a` and `b` (1 leq a, b leq 10^9) — the two integers you need to merge. -----Output----- Output the resulting merged floating-point number. -----Example----- Input: 123 4567 Output: 1425367.0 Input: 9 876 Output: 9876.0 Note: In the second example, 9 has only one digit. Thus, after the first digit from `a` is used, the rest are digits from `b`, resulting in the merged number being 9876.0.","solution":"def merge_alternately(a, b): Merges two integers a and b alternately as digits and returns the result as a float number. str_a = str(a) str_b = str(b) merged = [] len_a = len(str_a) len_b = len(str_b) max_len = max(len_a, len_b) for i in range(max_len): if i < len_a: merged.append(str_a[i]) if i < len_b: merged.append(str_b[i]) return float(\'\'.join(merged))"},{"question":"# Task You are given the task to write a function that will rotate a list of integers in place by a given number of steps. The rotation can be to the left or the right depending on the given direction. If the direction is \'left\', rotate the list to the left, and if the direction is \'right\', rotate the list to the right. The function should take in three parameters: - A list of integers `lst` - An integer `steps` representing the number of steps to rotate - A string `direction` which is either \'left\' or \'right\' Your task is to return the rotated list. # Example For `lst = [1, 2, 3, 4, 5], steps = 2, direction = \'left\'`, the result should be `[3, 4, 5, 1, 2]`. For `lst = [1, 2, 3, 4, 5], steps = 3, direction = \'right\'`, the result should be `[3, 4, 5, 1, 2]`. # Input/Output - `[input]` list of integers `lst` - `lst` will have at least 1 element and at most 100 elements. - `[input]` integer `steps` - `steps` will be a non-negative integer. - `[input]` string `direction` - `direction` will only be either \'left\' or \'right\'. - `[output]` a list of integers - The rotated list as per the given direction and steps.","solution":"def rotate_list(lst, steps, direction): Rotates the list of integers in place by the given number of steps to the left or right depending on the given direction. Parameters: lst (list): The list of integers to rotate. steps (int): The number of steps to rotate the list. direction (str): The direction to rotate (\'left\' or \'right\'). Returns: list: The rotated list. n = len(lst) if direction == \'left\': steps %= n return lst[steps:] + lst[:steps] elif direction == \'right\': steps %= n return lst[-steps:] + lst[:-steps] else: raise ValueError(\\"Direction must be either \'left\' or \'right\'\\")"},{"question":"Alice and Bob are playing a game with a grid of size M times N. Each cell in the grid contains a positive integer. Alice starts at the top-left cell, (1, 1), and Bob starts at the bottom-right cell, (M, N). In one move, Alice can move to the right or down, and Bob can move to the left or up. A cell is considered special if both Alice and Bob can visit it at the same time, i.e., there exists a set of moves where they both land on the special cell during the game. Given this grid, your task is to find the sum of the values in all special cells. -----Input----- - The first line contains two integers, M and N, representing the dimensions of the grid. - The next M lines each contain N positive integers, representing the values in the grid cells. -----Output----- Print a single integer — the sum of the values in all special cells. -----Constraints----- - 1 le M, N le 1000 - 1 le value in each cell le 10^6 -----Example Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Example Output----- 25 -----Explanation----- In the given grid, the special cells are (1, 1), (2, 2), and (3, 3). The values in these cells are 1, 5, and 9, respectively, so their sum is 1 + 5 + 9 = 15. As both Alice and Bob can reach these cells at the same time, the output is 15.","solution":"def find_special_sum(M, N, grid): Returns the sum of special cells in the grid. A cell (i, j) is considered special if both Alice and Bob can reach it at the same time. total_sum = 0 for i in range(min(M, N)): total_sum += grid[i][i] return total_sum"},{"question":"Given an array of integers representing the lengths of sides of some triangles, return the maximum perimeter of a triangle that can be formed with three of these side lengths. If it is impossible to form any triangle of non-zero area, return 0. A triangle is valid if the sum of any two sides is greater than the third side. Example 1: Input: sides = [2, 1, 2] Output: 5 Explanation: With sides 2, 1, and 2, a triangle with perimeter 5 can be formed. Example 2: Input: sides = [1, 2, 1] Output: 0 Explanation: With sides 1, 2, and 1, it is impossible to form a valid triangle. Example 3: Input: sides = [3, 2, 3, 4] Output: 10 Explanation: The sides 3, 3, and 4 form a valid triangle with perimeter 10. Note: 1. The length of `sides` will be in the range [3, 10^4]. 2. Each side length will be a positive integer in the range [1, 10^6].","solution":"def max_perimeter(sides): Returns the maximum perimeter of a triangle that can be formed with three of these side lengths. If it is impossible to form any triangle of non-zero area, return 0. sides.sort(reverse=True) for i in range(len(sides) - 2): if sides[i] < sides[i + 1] + sides[i + 2]: return sides[i] + sides[i + 1] + sides[i + 2] return 0"},{"question":"You are given a list of integers where every integer appears exactly three times, except for one integer which appears exactly once. Your task is to find the integer that appears only once. Implement the function `findUnique(nums)` which takes a list of integers `nums` and returns the integer that appears only once. -----Input----- The function takes a single argument: - `nums`: A list of integers (1 ≤ len(nums) ≤ 10^4, -10^9 ≤ nums[i] ≤ 10^9) where every integer appears exactly three times, except for one integer which appears exactly once. -----Output----- Return the integer that appears exactly once. -----Examples----- Input [2, 2, 3, 2] Output 3 Input [0, 1, 0, 1, 0, 1, 99] Output 99 -----Note----- In the first example, the integer 3 appears only once, while 2 appears exactly three times. In the second example, the integer 99 appears only once, while 0 and 1 appear exactly three times.","solution":"def findUnique(nums): # Initialize a dictionary to keep track of counts count = {} # Count occurrences of each number for num in nums: if num in count: count[num] += 1 else: count[num] = 1 # Find the number that appears exactly once for num in count: if count[num] == 1: return num"},{"question":"You are managing a warehouse and are responsible for tracking packages. Each package has a unique identifier and a weight. The warehouse management system allows you to perform the following operations: 1. Add a package with a specified weight. 2. Remove a package by its identifier. 3. Query the total weight of the heaviest `k` packages. Your task is to implement the warehouse management system that processes a sequence of these operations and produces the required outputs. Input The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of operations. Each of the following `n` lines contains one of the following three types of operations: - `\\"add <id> <weight>\\"` — where `<id>` is a string (1 ≤ length(id) ≤ 10) and `<weight>` is a positive integer (1 ≤ weight ≤ 10^6). - `\\"remove <id>\\"` — where `<id>` is a string that was previously added to the system. - `\\"query <k>\\"` — where `<k>` is a positive integer (1 ≤ k ≤ current number of packages). Output For each \\"query\\" operation, output a single integer — the total weight of the heaviest `k` packages. Note that: - The remove operation attempts to remove a package that was previously added and still exists in the system. - The `id` for each package is unique and consistent across add and remove operations. - The `heaviest k packages` refers to the `k` packages with the highest weights. Example Input ``` 8 add package1 100 add package2 200 add package3 150 query 2 remove package2 query 2 add package4 180 query 3 ``` Output ``` 350 280 430 ``` Explanation 1. Add package1 with weight 100 2. Add package2 with weight 200 3. Add package3 with weight 150 4. Query heaviest 2 packages: package2 (200) + package3 (150) = 350 5. Remove package2 6. Query heaviest 2 packages: package3 (150) + package4 (100) = 280 7. Add package4 with weight 180 8. Query heaviest 3 packages: package4 (180) + package3 (150) + package4 (100) = 430","solution":"import heapq class Warehouse: def __init__(self): self.packages = {} self.max_heap = [] def add(self, package_id, weight): if package_id not in self.packages: self.packages[package_id] = weight heapq.heappush(self.max_heap, -weight) def remove(self, package_id): if package_id in self.packages: weight = self.packages[package_id] del self.packages[package_id] self.max_heap.remove(-weight) heapq.heapify(self.max_heap) def query(self, k): return -sum(heapq.nsmallest(k, self.max_heap)) def process_operations(n, operations): warehouse = Warehouse() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'add\': package_id = parts[1] weight = int(parts[2]) warehouse.add(package_id, weight) elif command == \'remove\': package_id = parts[1] warehouse.remove(package_id) elif command == \'query\': k = int(parts[1]) results.append(warehouse.query(k)) return results"},{"question":"You are given a string `haystack` and a string `needle`. Implement a function to determine the starting index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack`. Example 1: Input: haystack = \\"hello\\", needle = \\"ll\\" Output: 2 Example 2: Input: haystack = \\"aaaaa\\", needle = \\"bba\\" Output: -1 Example 3: Input: haystack = \\"\\", needle = \\"\\" Output: 0 Constraints: - `haystack` and `needle` consist only of lowercase English characters. - 1 <= `haystack.length` <= 10^4 - 1 <= `needle.length` <= 10^3","solution":"def strStr(haystack, needle): Returns the starting index of the first occurrence of `needle` in `haystack` or -1 if `needle` is not part of `haystack`. if needle == \\"\\": return 0 needle_length = len(needle) haystack_length = len(haystack) for i in range(haystack_length - needle_length + 1): if haystack[i: i + needle_length] == needle: return i return -1"},{"question":"A company organizes team-building activities for its employees. Each activity has a start time and an end time, and it takes place in one of the available rooms. Two activities can take place in the same room if and only if they do not overlap in time. You are tasked with scheduling all given activities using the minimum number of rooms. Given a list of activities with their start and end times, your goal is to determine the minimum number of rooms required to schedule all activities without overlap. Constraints - All values in the input are integers. - 1 ≤ Number of activities ≤ 10^5 - 0 ≤ start time < end time ≤ 10^9 Input The input is given from Standard Input in the following format: Number of activities start_1 end_1 start_2 end_2 ... start_n end_n Output The output should be a single integer representing the minimum number of rooms required. Examples Input 3 0 30 5 10 15 20 Output 2 Input 5 1 2 3 4 0 6 5 7 8 9 Output 2","solution":"import heapq def min_rooms_required(activities): Returns the minimum number of rooms required to schedule all activities without overlap. if not activities: return 0 # Sort activities by start time activities.sort(key=lambda x: x[0]) # Use a min-heap to track the end times of activities currently using a room min_heap = [] heapq.heappush(min_heap, activities[0][1]) for i in range(1, len(activities)): # If the earliest end time is less than or equal to the start time of the current activity if min_heap[0] <= activities[i][0]: # Remove this end time from the heap (current room is reused) heapq.heappop(min_heap) # Add the current end time to the heap heapq.heappush(min_heap, activities[i][1]) # The size of the heap is the number of rooms required return len(min_heap)"},{"question":"Minimize the Difference between Two Sets You are given two sets of integers, A and B, of equal size. You can perform the following operation any number of times on set A: - Replace an element in set A with any other integer. Determine the minimum possible absolute difference between the sums of sets A and B after any number of such operations. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of elements in each set. - The next line contains N integers, the elements of set A. - The next line contains N integers, the elements of set B. Output: - For each test case, print the minimum possible absolute difference between the sums of sets A and B. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 -10^6 ≤ Elements in sets A and B ≤ 10^6 # Example Input: ``` 2 3 1 2 3 4 5 6 3 -1 -2 -3 1 2 3 ``` Output: ``` 3 0 ``` Explanation: For the first test case: - Sum of A = 1 + 2 + 3 = 6 - Sum of B = 4 + 5 + 6 = 15 - By changing the elements of A to [4, 5, 6], the sum of A becomes 15. - Hence, the minimum possible absolute difference is |15 - 15| = 0. For the second test case: - Sum of A = -1 + -2 + -3 = -6 - Sum of B = 1 + 2 + 3 = 6 - By changing the elements of A to [6, 2, -2], the sum of A becomes 6. - Therefore, the minimum possible absolute difference is |6 - 6| = 0.","solution":"def min_difference_between_sets(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] sum_A = sum(A) sum_B = sum(B) results.append(abs(sum_B - sum_A)) return results"},{"question":"You are given an array of integers, text{A}, and an integer text{X}. A subarray of text{A} is called \\"lucky\\" if the sum of its elements is exactly text{X}. Write a function that finds and prints the number of \\"lucky\\" subarrays in text{A}. Input Format The first line contains an integer text{N}, the size of the array text{A}. The second line contains text{N} space-separated integers, denoting the elements of the array text{A}. The third line contains an integer text{X}, the target sum for checking \\"lucky\\" subarrays. Constraints 1 leq N leq 10^5 −10^9 leq A[i] leq 10^9 for every valid index i −10^9 leq X leq 10^9 Output Format Print the number of \\"lucky\\" subarrays in text{A}. Sample Input 5 1 -1 2 3 -2 3 Sample Output 3 Explanation The array text{A} = [1, -1, 2, 3, -2]. The subarrays that have a sum equal to text{X} = 3 are: - [2, 3, -2] - [2, 3, -2] - [3] Therefore, there are 3 \\"lucky\\" subarrays, and we print 3.","solution":"def count_lucky_subarrays(A, X): Returns the number of subarrays of A that sum up to X. Parameters: A (list): List of integers. X (int): Target sum for subarrays. Returns: int: Number of \\"lucky\\" subarrays. n = len(A) sum_count = {0: 1} # Dictionary to store prefix sums and their counts current_sum = 0 lucky_count = 0 for num in A: current_sum += num if (current_sum - X) in sum_count: lucky_count += sum_count[current_sum - X] if current_sum in sum_count: sum_count[current_sum] += 1 else: sum_count[current_sum] = 1 return lucky_count"},{"question":"You are designing a string matching algorithm in a DNA sequencing project. Given a target DNA sequence T and a set of N candidate DNA sequences, your task is to find the longest candidate sequence that can be found as a subsequence in the target sequence T. A subsequence of a string is a new string generated from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. If two or more candidates have the longest length, return the one which appears first in the input set. INPUT FORMAT: The first line contains an integer N, representing the number of candidate sequences. The second line contains the DNA sequence T, consisting of uppercase letters A, C, G, and T only. The following N lines each contain a candidate DNA sequence. OUTPUT FORMAT: Output the longest candidate DNA sequence that is a subsequence of T. If there are multiple candidates with the same length, output the first one. If no candidate sequence can be found as a subsequence in T, print \\"No Match\\". INPUT CONSTRAINTS: 1 ≤ N ≤ 1000 1 ≤ length of T ≤ 10^5 1 ≤ length of each candidate ≤ 100 SAMPLE INPUT 5 ACGTACGTGACG ACT ACG GAT TAC GACG SAMPLE OUTPUT GACG Explanation In this example, the target DNA sequence is \\"ACGTACGTGACG\\". Among the candidate sequences, \\"GACG\\" is the longest subsequence that can be found in the target sequence T.","solution":"def is_subsequence(target, candidate): it = iter(target) return all(char in it for char in candidate) def find_longest_subsequence(n, T, candidates): longest_match = \\"\\" for candidate in candidates: if is_subsequence(T, candidate): if len(candidate) > len(longest_match): longest_match = candidate elif len(candidate) == len(longest_match) and candidates.index(candidate) < candidates.index(longest_match): longest_match = candidate return longest_match if longest_match else \\"No Match\\""},{"question":"You are working on a simulation for a factory\'s production line. The factory has a conveyor belt system with multiple stations, and each station performs a specific task on the products passing through. Your task is to simulate the conveyor belt\'s operation and track the state of the products after a series of operations. There are n stations on the conveyor belt, each station is responsible for increasing the product\'s value by a certain amount. You are given q operations, each operation can be one of the following types: * Increase the value at a particular station by a given amount. * Query the value of a product after passing through the first k stations. The initial values of the products and the increase values at each station start as 0. Input The first line contains two space-separated integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 100000) — the number of stations and the number of operations, respectively. Next q lines contain operations in the following format: * \\"i x v\\" where x (1 ≤ x ≤ n) is the station index and v (1 ≤ v ≤ 1000) is the value to increase at the station x. * \\"q k\\" where k (1 ≤ k ≤ n) is the number of stations to include in the query. Output For each query operation, print the sum of values after passing through the first k stations. Examples Input 5 6 i 1 10 i 3 5 i 2 7 q 2 q 4 i 4 2 Output 17 22 Note In the first query operation, the sum of values at station 1 and station 2 is 10 + 7 = 17. In the second query operation, the sum of values at station 1, station 2, station 3, and station 4 is 10 + 7 + 5 + 0 = 22. After the last operation, station 4\'s value is increased to 2.","solution":"def conveyor_belt_simulation(n, q, operations): # Initialize the values at each station to 0 station_values = [0] * n # List to store the results of queries query_results = [] for operation in operations: if operation[0] == \'i\': x = int(operation[1]) - 1 # Convert to 0-based index v = int(operation[2]) station_values[x] += v elif operation[0] == \'q\': k = int(operation[1]) - 1 # Convert to 0-based index query_results.append(sum(station_values[:k + 1])) return query_results # Example usage: # n = 5 # q = 6 # operations = [ # [\'i\', \'1\', \'10\'], # [\'i\', \'3\', \'5\'], # [\'i\', \'2\', \'7\'], # [\'q\', \'2\'], # [\'q\', \'4\'], # [\'i\', \'4\', \'2\'] # ] # print(conveyor_belt_simulation(n, q, operations)) # Output should be [17, 22]"},{"question":"Given a matrix of size N times N consisting of integers. You are allowed to perform a single operation of rotating the matrix by 90 degrees in the clockwise direction any number of times (i.e., 0, 1, 2, 3 times). The goal is to obtain the maximum possible sum of elements in the main diagonal (i.e., the elements in positions (i, i) for all valid i ). Do the following: 1. Rotate the matrix by 90 degrees clockwise up to 3 times. 2. After each rotation, calculate the sum of the elements in the main diagonal. 3. Output the maximum sum obtained after all rotations. Also, output a line break at the end. Note: The main diagonal consists of elements from the top left to the bottom right of the matrix. Example Input 3 1 2 3 4 5 6 7 8 9 Output 15","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given NxN matrix by 90 degrees in the clockwise direction. N = len(matrix) rotated_matrix = [[0]*N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix def max_diagonal_sum(matrix): Returns the maximum sum of the elements in the main diagonal after rotating the matrix 0, 1, 2, or 3 times by 90 degrees clockwise. max_sum = float(\'-inf\') current_matrix = matrix for _ in range(4): diagonal_sum = sum(current_matrix[i][i] for i in range(len(current_matrix))) max_sum = max(max_sum, diagonal_sum) current_matrix = rotate_matrix_90_clockwise(current_matrix) return max_sum def main(): N = int(input().strip()) matrix = [] for _ in range(N): matrix.append(list(map(int, input().strip().split()))) result = max_diagonal_sum(matrix) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You have been hired as a software developer for a company that handles large datasets of user activity logs. Each log entry consists of a timestamp and a user ID. Your task is to develop a program that processes these logs and provides insightful statistics. The main statistic you need to compute is the longest streak of consecutive days of activity for each user. A user has a consecutive streak if they have activity logs for successive days without any gap in their logs. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of log entries. The next `n` lines each contain a timestamp and a user ID separated by a space, where the timestamp is in the format `YYYY-MM-DD` and the user ID is a non-empty string of no more than 20 lowercase Latin letters. # Output For each unique user ID present in the logs, print the user ID followed by their longest streak of consecutive days of activity. The output should list users in lexicographical order by their user IDs. # Example Input ``` 8 2023-10-20 alice 2023-10-21 bob 2023-10-22 alice 2023-10-23 bob 2023-10-24 alice 2023-10-25 alice 2023-10-26 bob 2023-10-27 bob ``` Output ``` alice 4 bob 2 ``` # Explanation For `alice`: - Activity logs: 2023-10-20, 2023-10-22, 2023-10-24, 2023-10-25 - The longest streak of consecutive days of activity: 4 days (2023-10-24, 2023-10-25, 2023-10-26, and 2023-10-27) For `bob`: - Activity logs: 2023-10-21, 2023-10-23, 2023-10-26, 2023-10-27 - The longest streak of consecutive days of activity: 2 days (2023-10-26 and 2023-10-27) # Note: - You may assume no two logs for the same user will have the exact same timestamp. - The logs are not necessarily sorted by timestamp. Your program should handle this appropriately.","solution":"from collections import defaultdict from datetime import datetime, timedelta def compute_longest_streak(n, logs): user_activity = defaultdict(set) for log in logs: date_str, user_id = log.split() date = datetime.strptime(date_str, \'%Y-%m-%d\').date() user_activity[user_id].add(date) sorted_user_activity = {user: sorted(dates) for user, dates in user_activity.items()} user_streaks = {} for user, dates in sorted_user_activity.items(): longest_streak = 0 current_streak = 1 for i in range(1, len(dates)): if dates[i] == dates[i-1] + timedelta(days=1): current_streak += 1 else: if current_streak > longest_streak: longest_streak = current_streak current_streak = 1 if current_streak > longest_streak: longest_streak = current_streak user_streaks[user] = longest_streak sorted_users = sorted(user_streaks.keys()) result = [(user, user_streaks[user]) for user in sorted_users] return result"},{"question":"There are N apples placed in a circle, and each apple has a unique ID from 0 to N-1. A mischievous monkey wants to arrange them in a specific order. According to the monkey\'s plan, each apple should be placed in a position such that the distance between the apple\'s original position and its new position is maximized. The distance between two positions i and j in a circle with N positions is defined as the minimum value between |i - j| and N - |i - j|. Your task is to help the monkey achieve this arrangement. -----Input----- The single line contains a positive integer N (1 ≤ N ≤ 10^6). -----Output----- Print the new ordering of the apples in a single line. If there are multiple valid arrangements, print any one of them. -----Examples----- Input 4 Output 2 3 0 1 Input 5 Output 3 4 0 1 2","solution":"def arrange_apples(N): Returns an arrangement of apples such that the distance between each apple\'s original and new position is maximized in a circle with N positions. if N == 1: return [0] if N % 2 == 0: arrangement = [i for i in range(N//2, N)] + [i for i in range(N//2)] else: arrangement = [i for i in range((N+1)//2, N)] + [i for i in range((N+1)//2)] return arrangement"},{"question":"Given a nested list of integers representing a pyramid, where the first element is the top of the pyramid and subsequent elements form the next levels, return the maximum path sum from the top to the bottom. In the pyramid, each step you may move to the adjacent numbers on the row below. Example 1: Input: pyramid = [ [3], [7, 4], [2, 4, 6], [8, 5, 9, 3] ] Output: 23 Explanation: The maximum path sum is 3 + 7 + 4 + 9 = 23. Example 2: Input: pyramid = [ [1], [2, 3], [4, 5, 6] ] Output: 10 Explanation: The maximum path sum is 1 + 3 + 6 = 10. Constraints: 1 <= pyramid.length <= 100 1 <= pyramid[i].length <= i + 1 -10^4 <= pyramid[i][j] <= 10^4","solution":"def maximum_path_sum(pyramid): Given a nested list of integers representing a pyramid, return the maximum path sum from the top to the bottom. if not pyramid: return 0 # Start from the second last row and move upwards for row in range(len(pyramid) - 2, -1, -1): for col in range(len(pyramid[row])): pyramid[row][col] += max(pyramid[row + 1][col], pyramid[row + 1][col + 1]) return pyramid[0][0]"},{"question":"Write a program that calculates the minimum number of steps required to convert a given integer `n` into 1. You can perform the following operations: 1. If `n` is divisible by 3, you may divide `n` by 3. 2. If `n` is divisible by 2, you may divide `n` by 2. 3. You can subtract 1 from `n`. Each operation counts as one step. The input will be an integer `n` (1 ≤ n ≤ 10^6). Input A single integer `n`. Output Output a single integer representing the minimum number of steps required to convert `n` into 1. Example Input 10 Output 3","solution":"def min_steps_to_one(n): Calculate the minimum number of steps required to convert n to 1. # Array to store the minimum steps for each number up to n dp = [0] * (n + 1) for i in range(2, n + 1): # Start with the operation of subtracting 1 steps = dp[i - 1] + 1 # If divisible by 2, consider division if i % 2 == 0: steps = min(steps, dp[i // 2] + 1) # If divisible by 3, consider division if i % 3 == 0: steps = min(steps, dp[i // 3] + 1) dp[i] = steps return dp[n]"},{"question":"Given a list of integers representing heights of people standing in a queue, compute the number of visible people from the front. A person can see the front if no one in front of them is taller. Each person in the queue is represented by their height, and the person at the front of the queue is the first element in the list. # Function Signature ```python def visible_people(heights: List[int]) -> int: ``` # Input - `heights`: A list of integers where each integer represents the height of a person in the queue. # Output - Return the number of visible people from the front. # Example ```python Input: heights = [1, 3, 2, 5, 6, 4] Output: 4 Explanation: People with heights 1, 3, 5, and 6 are visible. The person with height 2 is not visible because the person with height 3 is in front, and the person with height 4 is not visible because the person with height 6 is in front. ``` # Constraints - 1 <= len(heights) <= 10^5 - 1 <= height[i] <= 10^9","solution":"from typing import List def visible_people(heights: List[int]) -> int: Returns the number of visible people from the front of the queue. A person is visible if no one in front of them is taller. Args: heights (List[int]): A list of integers representing the heights of people in the queue. Returns: int: The number of visible people from the front. if not heights: return 0 visible_count = 1 # The first person is always visible max_height = heights[0] for height in heights[1:]: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Given a list of integers, determine whether the list forms a valid arithmetic progression or not. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. Example 1: Input: arr = [3, 5, 7, 9, 11] Output: true Explanation: The difference between consecutive terms is always 2, so it forms a valid arithmetic progression. Example 2: Input: arr = [1, 3, 6, 9] Output: false Explanation: The differences between consecutive terms are not consistent, so it does not form a valid arithmetic progression. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isArithmeticProgression() which takes a list of integers as input and returns a boolean indicating whether the given list forms an arithmetic progression. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def isArithmeticProgression(arr): if len(arr) < 2: return True arr.sort() common_diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != common_diff: return False return True"},{"question":"Given a directed acyclic graph (DAG) with N nodes labelled from 0 to N-1 and a list of directed edges between these nodes, write a function `longestPath(n, edges)` to find the longest path in the graph. If there are multiple paths of the same maximum length, return any one of them. Example 1: Input: N = 5, edges = [[0,1],[0,2],[1,3],[2,3],[3,4]] Output: [0,1,3,4] Explanation: Here is a diagram of the given graph: 0 -> 1 | | v v 2 -> 3 -> 4 The longest path is 0 -> 1 -> 3 -> 4 or 0 -> 2 -> 3 -> 4 with length 3. Note: - 1 <= N <= 10^4 - The number of edges in the graph won\'t exceed 4^N for all practical inputs. - The input graph is guaranteed to be a DAG.","solution":"def longestPath(n, edges): from collections import defaultdict, deque # Initialize the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Helper function to perform topological sort def topological_sort(): in_degree = [0] * n for u in range(n): for v in graph[u]: in_degree[v] += 1 # Collect nodes with no incoming edges queue = deque([u for u in range(n) if in_degree[u] == 0]) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return topo_order # Perform topological sort topo_order = topological_sort() # Initialize the distance and parent pointers dist = [-1] * n parent = [-1] * n # Start from nodes with no incoming edges for u in topo_order: if dist[u] == -1: dist[u] = 0 for v in graph[u]: if dist[u] + 1 > dist[v]: dist[v] = dist[u] + 1 parent[v] = u # Find the node with the maximum distance max_dist_node = dist.index(max(dist)) longest_path = [] # Reconstruct the longest path while max_dist_node != -1: longest_path.append(max_dist_node) max_dist_node = parent[max_dist_node] # Return the path in correct order return longest_path[::-1]"},{"question":"Given an array A of N integers, we define a \'beautiful\' subarray as an array in which the sum of all its elements is even. Your task is to count the number of beautiful subarrays in A. ------ Input ------ The first line contains one integer N, the size of the array A. The second line contains N integers A_1, A_2, ..., A_N. ------ Output ------ Print the number of beautiful subarrays. ------ Constraints ------ 1 leq N leq 200,000 0 leq A_i < 2^{30} ------ Subtasks ------ 10 points: 1 leq N leq 10 10 points: 1 leq N leq 500 10 points: 1 leq N leq 5000 70 points: 1 leq N leq 200,000 ------ Sample Input 1 ------ 4 1 2 3 4 ------ Sample Output 1 ------ 4 ------ Explanation ------ The sum of elements for the subarrays [1, 2], [2, 3], [1, 2, 3, 4], and [3, 4] are even. Hence, there are 4 \'beautiful\' subarrays.","solution":"def count_beautiful_subarrays(N, A): Returns the number of beautiful subarrays where the sum of elements is even. count_even_sum_subarrays = 0 sum_even_dict = {0: 1} current_sum = 0 for number in A: current_sum += number is_even = current_sum % 2 if is_even in sum_even_dict: count_even_sum_subarrays += sum_even_dict[is_even] if is_even in sum_even_dict: sum_even_dict[is_even] += 1 else: sum_even_dict[is_even] = 1 return count_even_sum_subarrays"},{"question":"# Remove Vowels Write a function that takes a string as input and returns a new string with all the vowels removed. Vowels are the characters \'a\', \'e\', \'i\', \'o\', and \'u\' (both uppercase and lowercase). Examples ``` input: \\"hello\\" result: \\"hll\\" input: \\"Codewars\\" result: \\"Cdwrs\\" input: \\"AEIOUaeiou\\" result: \\"\\" input: \\"Python\\" result: \\"Pythn\\" input: \\"abracadabra\\" result: \\"brcdbr\\" ``` Constraints 1. The input string will contain only letters (u|U-encoding). 2. The input string will have at least one character and at most 100 characters. Implement the function in a way that ensures the highest possible performance.","solution":"def remove_vowels(s): Returns the input string with all vowels removed. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase). vowels = set(\\"aeiouAEIOU\\") return \'\'.join(char for char in s if char not in vowels)"},{"question":"You are given a list of N students, each with a name and a list of scores in M subjects. Your task is to identify the student with the highest average score and print their name and score. If there are multiple students with the same highest average, choose the student whose name comes first alphabetically. The format for the student data is as follows: ``` [ {\\"name\\": \\"John\\", \\"scores\\": [85, 90, 80]}, {\\"name\\": \\"Alice\\", \\"scores\\": [88, 92, 85]}, {\\"name\\": \\"Bob\\", \\"scores\\": [83, 78, 91]}, ... ] ``` Input Format The first line contains N (number of students). The next N lines each contain a JSON string representing a student with their name and list of scores. Constraints 1 leq N leq 100 1 leq M leq 10 Name will contain only alphabetic characters and will have a maximum length of 50. Scores are integers and will be between 0 and 100. The input JSON strings will always be properly formatted. Output Format Print the name of the student with the highest average score, followed by their average score rounded to one decimal place. Sample Input 3 {\\"name\\": \\"John\\", \\"scores\\": [85, 90, 80]} {\\"name\\": \\"Alice\\", \\"scores\\": [88, 92, 85]} {\\"name\\": \\"Bob\\", \\"scores\\": [83, 78, 91]} Sample Output Alice 88.3 Explanation The average scores for each student are: - John: (85+90+80)/3 = 85.0 - Alice: (88+92+85)/3 = 88.3 - Bob: (83+78+91)/3 = 84.0 Alice has the highest average score of 88.3. Therefore, her name and average score are printed.","solution":"import json def get_student_with_highest_average(n, students_data): students = [json.loads(student_data) for student_data in students_data] top_student = None highest_avg = -1 for student in students: average_score = sum(student[\'scores\']) / len(student[\'scores\']) if (average_score > highest_avg or (average_score == highest_avg and student[\'name\'] < top_student[\'name\'])): highest_avg = average_score top_student = student return top_student[\'name\'], round(highest_avg, 1) # Example usage: n = 3 students_data = [ \'{\\"name\\": \\"John\\", \\"scores\\": [85, 90, 80]}\', \'{\\"name\\": \\"Alice\\", \\"scores\\": [88, 92, 85]}\', \'{\\"name\\": \\"Bob\\", \\"scores\\": [83, 78, 91]}\' ] name, avg_score = get_student_with_highest_average(n, students_data) print(f\\"{name} {avg_score}\\")"},{"question":"You are given an array of integers. Your task is to determine the length of the longest increasing subsequence (LIS) that can be obtained by removing exactly one element from the original array. -----Input----- The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers representing the array. -----Output----- For each test case, output the length of the longest increasing subsequence after removing exactly one element. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - -10^4 ≤ array[i] ≤ 10^4 -----Example----- Input: 2 5 1 2 3 4 5 6 5 2 8 6 3 6 Output: 4 4 -----Explanation----- Test case 1: The original array is already an increasing sequence, thus by removing any one element, the longest increasing subsequence remains of length 4, e.g., [1, 2, 3, 4]. Test case 2: By removing 5, the remaining array [2, 8, 6, 3, 6] has a longest increasing subsequence of length 4, e.g., [2, 3, 6].","solution":"def longest_increasing_subsequence_remove_one(arr): n = len(arr) if n <= 2: return n - 1 # Initialize LIS arrays lis = [1] * n lds = [1] * n # Calculate LIS from left to right for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Calculate LIS from right to left for i in reversed(range(n-1)): for j in reversed(range(i+1, n)): if arr[i] < arr[j] and lds[i] < lds[j] + 1: lds[i] = lds[j] + 1 # Calculate maximum LIS by removing one element max_lis = 0 for i in range(n): if i == 0: max_lis = max(max_lis, lds[i + 1]) elif i == n - 1: max_lis = max(max_lis, lis[i - 1]) else: max_lis = max(max_lis, lis[i - 1] + lds[i + 1]) return max_lis def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(longest_increasing_subsequence_remove_one(arr)) return results"},{"question":"Imagine you are given a device that records outdoor environmental data and stores it as a series of log entries. Each log entry contains a timestamp and a set of key-value pairs representing various measurements such as temperature and humidity. Your task is to design a program that retrieves the maximum and minimum values of a specified measurement for a given time range. Input: The first line is a specified measurement name (such as \\"temperature\\"). The second line contains the start and end timestamps, separated by a space (both inclusive). The remaining lines contain log entries and end with the string \\"end\\". Each log entry is formatted as follows: ``` timestamp measurement_key1=measurement_value1 ... measurement_keyN=measurement_valueN ``` Each log entry is guaranteed to have at least the specified measurement. Timestamps and measurement values are integers, and timestamps are formatted as YYYYMMDDHHMMSS (e.g., 20230101123000 for January 1, 2023, 12:30:00 PM). 1 ≤ Number of log entries ≤ 1000 Output: Output the maximum and minimum values of the specified measurement within the given time range on two separate lines. If no entries fall within the specified range, output \\"No data\\". SAMPLE INPUT temperature 20230101120000 20230101130000 20230101120000 temperature=20 humidity=30 20230101121000 temperature=22 humidity=32 20230101122000 temperature=19 humidity=31 20230101130000 temperature=25 humidity=33 20230101140000 temperature=21 humidity=34 end SAMPLE OUTPUT 25 19 Explanation: The log entries within the specified time range [20230101120000, 20230101130000] are: ``` 20230101120000 temperature=20 humidity=30 20230101121000 temperature=22 humidity=32 20230101122000 temperature=19 humidity=31 20230101130000 temperature=25 humidity=33 ``` The maximum temperature is 25, and the minimum temperature is 19.","solution":"def find_max_min_measurement(measurement, start_end_time, log_entries): start_time, end_time = map(int, start_end_time.split()) max_val = float(\'-inf\') min_val = float(\'inf\') found = False for entry in log_entries: if entry == \\"end\\": break parts = entry.split() timestamp = int(parts[0]) if start_time <= timestamp <= end_time: for part in parts[1:]: key, value = part.split(\'=\') if key == measurement: value = int(value) max_val = max(max_val, value) min_val = min(min_val, value) found = True break if not found: return \\"No data\\", \\"No data\\" return max_val, min_val"},{"question":"Jonas has just learned about trees in computer science, and he is very excited to test his knowledge on this new topic. A tree is an acyclic connected graph. Jonas has a tree with n nodes labeled from 1 to n and n-1 edges. He wants to find out the number of leaf nodes in the tree. A leaf node is a node that has exactly one connection (edge) to it. Input The first line of the input consists of a single integer n (2 ≤ n ≤ 100 000) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating there is an edge between nodes u and v. Output Print a single integer, the number of leaf nodes in the given tree. Examples Input 5 1 2 1 3 3 4 3 5 Output 3 Input 4 1 2 2 3 2 4 Output 2 Note In the first example, the nodes 2, 4, and 5 are leaf nodes as they each have only one connection. In the second example, the nodes 1, 3, and 4 are leaf nodes as they each have only one connection.","solution":"def count_leaf_nodes(n, edges): Returns the number of leaf nodes in the tree given by n nodes and edges. :param n: int - the number of nodes in the tree. :param edges: List of tuples - each tuple contains two integers u and v indicating an edge between nodes u and v. :return: int - the number of leaf nodes in the tree. from collections import defaultdict # Initialize adjacency list adj_list = defaultdict(int) # Build the adjacency list for u, v in edges: adj_list[u] += 1 adj_list[v] += 1 # Count nodes with exactly one connection (leaf nodes) leaf_count = sum(1 for key in adj_list if adj_list[key] == 1) return leaf_count"},{"question":"Given an array of integers `arr` and an integer `k`, determine if any combination of k elements from the array can be selected such that their sum is even. If the sum is even, return `True`. Otherwise, return `False`. Example 1: Input: arr = [1, 2, 3, 4, 5] k = 3 Output: True Explanation: Selecting elements [1, 2, 3] results in a sum of 6 which is even. Example 2: Input: arr = [1, 3, 5, 7] k = 2 Output: False Explanation: Selecting any two elements from the array will always result in an odd sum. Example 3: Input: arr = [2, 4, 6, 8] k = 1 Output: True Explanation: Choosing any single element will result in an even sum. Your Task: You don\'t need to read input or print anything. Complete the function `isSumEven` which takes an array of integers `arr` and an integer `k`, and returns a boolean value indicating whether an even sum is possible. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= N <= 10^5 - 1 <= arr[i] <= 10^5 - 1 <= k <= N","solution":"def isSumEven(arr, k): Determines if any combination of k elements from the array can be selected such that their sum is even. even_count = sum(1 for x in arr if x % 2 == 0) odd_count = len(arr) - even_count # If k is 1 and there\'s at least one even number, return True. if k == 1 and even_count > 0: return True # If k is greater than 1, check all possible combinations with even sum. for i in range(1, min(k, even_count) + 1): if i % 2 == 0 and (k - i) <= odd_count: return True if i % 2 == 1 and (k - i) % 2 == 0 and (k - i) <= odd_count: return True return False"},{"question":"You are given an array of integers and a target integer. Your task is to find two distinct indices in the array such that the sum of the elements at those indices equals the target integer. If there are multiple pairs that satisfy this condition, return the pair with the smallest index followed by the next smallest index. If no such pair exists, return an empty array. Here are some constraints: - The length of the array will be between 2 and 1000. - Each element in the array will be between -1000 and 1000. - The target integer will be within the range of -2000 and 2000. Write a function `find_pair_with_sum(arr: List[int], target: int) -> List[int]` that takes a list of integers and a target integer as input and returns a list of two integers representing the indices of the elements that sum to the target. # Input - An integer `n` for the length of the array, followed by `n` integers representing the elements of the array. - An integer `target`, which is the target sum. # Output - A list containing the indices of the two integers that sum to the target. If no such pair exists, return an empty list. # Example Input ``` 6 2 7 11 15 -1 8 9 ``` Output ``` [0, 1] ``` # Explanation In the example above, the first and second elements of the array (2 and 7) sum to 9. The indices of these elements are 0 and 1, respectively. # Note Make sure to use 0-based indexing for the indices in the output. Ensure your code runs efficiently within the constraints provided.","solution":"from typing import List def find_pair_with_sum(arr: List[int], target: int) -> List[int]: Given an array of integers and a target integer, find two distinct indices such that the sum of the elements at those indices equals the target integer. index_map = {} for idx, num in enumerate(arr): complement = target - num if complement in index_map: return [index_map[complement], idx] index_map[num] = idx return []"},{"question":"In a small village, people use unique passwords to secure their houses. However, due to some recent burglaries, the village council decided to enhance the security by requesting a specific change to each password. The rule is: - For an even password, replace it with its half. - For an odd password, replace it with three times the password plus one. You are given a list of passwords and need to apply the above rule exactly once to each password. Your task is to write a program that takes in the list of passwords and outputs the new passwords after applying the rule. Input The first line contains an integer t denoting the number of test cases. Each of the next t lines contains a single integer n, representing the password of a particular house. Output For each password, print the new password after applying the rule in a new line. Constraints 1 ≤ t ≤ 1000 1 ≤ n ≤ 10^4 Example input 3 4 7 10 output 2 22 5","solution":"def enhance_passwords(passwords): This function takes in a list of passwords and applies the rule: - For an even password, replace it with its half. - For an odd password, replace it with three times the password plus one. Parameters: passwords (list of int): List of passwords to be enhanced. Returns: list of int: List of new passwords after applying the rule. result = [] for password in passwords: if password % 2 == 0: result.append(password // 2) else: result.append(3 * password + 1) return result"},{"question":"A city consists of N intersections connected by M one-way roads. Each road has a travel time associated with it. A road from intersection u to intersection v has a travel time of t. You are given the departure intersection S and the destination intersection D. Determine the minimum travel time required to travel from S to D. If there is no valid path from S to D, return -1. -----Constraints----- * 1 leq N leq 100 * 1 leq M leq 1000 * 1 leq t leq 100 * 1 leq u, v, S, D leq N -----Input----- Input is given from Standard Input in the following format: N M u1 v1 t1 u2 v2 t2 ... uM vM tM S D -----Output----- Print the minimum travel time from intersection S to intersection D. If no path exists, print -1. -----Sample Input----- 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 1 5 -----Sample Output----- 8 Explanation: The fastest route from intersection 1 to intersection 5 is: 1 -> 2 -> 3 -> 4 -> 5 with a total travel time of 2 + 1 + 3 + 1 = 7.","solution":"import heapq def find_min_travel_time(N, M, roads, S, D): graph = {i: [] for i in range(1, N+1)} for u, v, t in roads: graph[u].append((v, t)) min_heap = [(0, S)] # (cost, node) distances = {i: float(\'inf\') for i in range(1, N+1)} distances[S] = 0 while min_heap: current_cost, current_node = heapq.heappop(min_heap) if current_node == D: return current_cost if current_cost > distances[current_node]: continue for neighbor, weight in graph[current_node]: new_cost = current_cost + weight if new_cost < distances[neighbor]: distances[neighbor] = new_cost heapq.heappush(min_heap, (new_cost, neighbor)) return -1 if distances[D] == float(\'inf\') else distances[D] def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) roads = [] for i in range(M): u = int(data[2 + i*3]) v = int(data[3 + i*3]) t = int(data[4 + i*3]) roads.append((u, v, t)) S = int(data[-2]) D = int(data[-1]) result = find_min_travel_time(N, M, roads, S, D) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Each number in the sequence is the product of its digits if the number is greater than 9, and equal to the number itself otherwise. You are required to compute the nth term of this sequence. # Input Format The first line contains T, the number of test cases. Each of the next T lines contains a single integer n. # Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 # Output Format For each test case, output the nth term in the sequence on a new line. # Sequence Definition - The first term is 1. - The second term is 2. - The third term is 3. - ... Continuing this way, any term greater than 9 is replaced by the product of its digits to form the sequence. # SAMPLE INPUT 4 1 5 11 14 # SAMPLE OUTPUT 1 5 2 8 # Explanation 1st Test Case: nth term for n=1 is 1. 2nd Test Case: nth term for n=5 is 5. 3rd Test Case: nth term for n=11 is the product of digits of 11 which is 1*1 = 1. Hence we find the 1st term which is 2. 4th Test Case: nth term for n=14 is the product of digits of 14 which is 1*4 = 4. Hence we find the 4th term which is 8.","solution":"def product_of_digits(n): Returns the product of the digits of n. product = 1 while n > 0: product *= (n % 10) n //= 10 return product def nth_term(n): Returns the nth term in the sequence as defined. if n < 10: return n else: return product_of_digits(n) def compute_sequence(terms): Computes the nth terms for multiple test cases based on the sequence rule. results = [] for n in terms: results.append(nth_term(n)) return results"},{"question":"You are given a string consisting of lowercase Latin letters and an integer k. Your task is to find the k-th most frequent character in the string. If there are ties (multiple characters with the same frequency), return the lexicographically smallest character among them. Input The first line contains the string s (1 ≤ |s| ≤ 100000). The second line contains the integer k (1 ≤ k ≤ 26). Output Print the k-th most frequent character in the string. If the k-th most frequent character does not exist, print \'-1\'. Examples Input aabbccdd 2 Output b Input aabbbcc 3 Output c Input abcd 5 Output -1 Note In the first example, the characters \'a\', \'b\', \'c\', and \'d\' all appear with the same frequency of 2. The 2nd most frequent character (by lexicographical order within the same frequency) is \'b\'. In the second example, the characters have the frequencies: a:2, b:3, c:1. The 3rd most frequent character is \'c\' even though it has only one occurrence. In the third example, there are only 4 distinct characters, hence the 5th most frequent character does not exist, thus the output is \'-1\'.","solution":"from collections import Counter def kth_most_frequent_char(s, k): # Create a frequency dictionary freq_dict = Counter(s) # Generate a list of (character, frequency) and sort it by: # 1. Frequency in decreasing order # 2. By character lexicographically if frequencies are the same freq_list = sorted(freq_dict.items(), key=lambda x: (-x[1], x[0])) # Check if k is within the number of unique characters if k > len(freq_list): return \'-1\' # Return the k-th most frequent character return freq_list[k-1][0]"},{"question":"Write a program to determine if a given year is a leap year or not. A leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400. ------ Input Format ------ - The first line of the input contains T - the number of test cases. Then the test cases follow. - Each testcase contains a single line of input, which contains a single integer Y representing a year. ------ Output Format ------ For each test case, output on a single line the answer: Leap Year if the year is a leap year, otherwise print Not a Leap Year. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ Y ≤ 10^6 ------ Sample Input 1 ------ 4 1900 2000 1996 2100 ------ Sample Output 1 ------ Not a Leap Year Leap Year Leap Year Not a Leap Year ------ Explanation 1 ------ Test case 1: The year 1900 is not a leap year as it is a century year not divisible by 400. Test case 2: The year 2000 is a leap year as it is a century year and divisible by 400. Test case 3: The year 1996 is a leap year as it is divisible by 4. Test case 4: The year 2100 is not a leap year as it is a century year not divisible by 400.","solution":"def is_leap_year(year): Determines if the given year is a leap year. A leap year is exactly divisible by 4 except for century years. The century year is a leap year only if it is perfectly divisible by 400. Args: year (int): The year to check. Returns: str: \\"Leap Year\\" if the year is a leap year, otherwise \\"Not a Leap Year\\". if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Leap Year\\" else: return \\"Not a Leap Year\\" def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) years = [int(data[i]) for i in range(1, T + 1)] for year in years: print(is_leap_year(year))"},{"question":"In a small city, there is a simple bus system with m bus stops, numbered from 1 to m in the order of the bus\'s route. At the i-th bus stop, pi passengers board the bus, and at the j-th bus stop, qj passengers exit the bus. The bus is empty before it departs from the first bus stop and it is empty after it arrives at the final bus stop. Each bus stop has exactly one boarding count and one exiting count. Your task is to evaluate the bus schedule and calculate the minimum bus capacity such that the number of passengers inside the bus at any time never exceeds this capacity. Note that at each stop, all boarding passengers board the bus before any exiting passengers exit the bus. Input The first line contains a single number m (2 ≤ m ≤ 1000) — the number of bus stops. Then m lines follow, each containing two integers pi and qj (0 ≤ pi, qj ≤ 1000) — the number of passengers that board the bus at the i-th stop and exit the bus at the j-th stop, respectively. The stops are given in the order of the bus\'s route. * The number of people who exit at a given stop does not exceed the total number of people in the bus immediately before it arrives at the stop. * At the final stop, all the passengers exit the bus, ensuring it becomes empty. * No new passengers will board at the last stop, i.e., the bus is empty after the final stop. Output Print a single integer denoting the minimum possible capacity of the bus. Examples Input 5 3 0 2 1 0 4 4 3 0 1 Output 5 Note For the first example, a capacity of 5 is sufficient: * At the first stop, 3 passengers board the bus, and the number of passengers on the bus is 3. * At the second stop, 2 passengers board the bus (5 passengers total), then 1 passenger exits (4 passengers remain). * At the third stop, no passengers board, but 4 passengers exit (no passengers remain). * At the fourth stop, 4 passengers board the bus (4 passengers total), then 3 passengers exit (1 passenger remains). * At the final stop, no passengers board, and the last 1 passenger exits the bus (no passengers remain). Since the number of passengers inside the bus never exceeds 5, a capacity of 5 is sufficient. Thus, 5 is the correct answer.","solution":"def minimum_bus_capacity(m, stops): Calculate the minimum bus capacity required based on the given bus stops. Parameters: m (int): Number of bus stops. stops (list of tuples): Each tuple contains two integers (pi, qj) where pi is the number of passengers boarding at the i-th stop and qj is the number of passengers exiting at the j-th stop. Returns: int: The minimum bus capacity required. current_passengers = 0 max_passengers = 0 for pi, qj in stops: current_passengers += pi # Passengers boarding max_passengers = max(max_passengers, current_passengers) current_passengers -= qj # Passengers exiting return max_passengers # Example usage: # m = 5 # stops = [(3, 0), (2, 1), (0, 4), (4, 3), (0, 1)] # print(minimum_bus_capacity(m, stops)) # Output should be 5"},{"question":"You are working on developing a file system which stores files as nodes. Each file can either be a regular file or a directory. If it is a directory, it can contain other files or directories, leading to a hierarchical file structure. Your task is to determine the depth of the deepest directory in the given file structure. The file system is represented as an undirected graph where each node represents either a file or a directory. There\'s an edge between two nodes if one is contained within the other (in case of direct containment). The root directory is always node 1. Given the file system, find the depth of the deepest directory. Note that root directory (node 1) has a depth of 0. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of nodes (files and directories) and the number of edges (containment relationships) respectively. Next m lines contain pairs of space-separated integers v and u (1 ≤ v, u ≤ n, v ≠ u) indicating that node v contains node u or vice versa. It is guaranteed that the graph is connected and has no cyclic containment. Output Print the single integer — the depth of the deepest directory. Examples Input 5 4 1 2 2 3 3 4 3 5 Output 3 Input 6 5 1 2 1 3 2 4 2 5 5 6 Output 2 Note In the first example: 1 (depth 0) -> 2 (depth 1) -> 3 (depth 2) -> 4 (depth 3) -> 5 (depth 3) So, the maximum depth is 3. In the second example: 1 (depth 0) -> 2 (depth 1) -> 4 (depth 2) -> 5 (depth 2) -> 6 (depth 3) -> 3 (depth 1) So, the maximum depth is 2.","solution":"def deepest_directory_depth(n, m, edges): from collections import defaultdict, deque adj_list = defaultdict(list) for v, u in edges: adj_list[v].append(u) adj_list[u].append(v) def bfs(root): queue = deque([(root, 0)]) # node, depth visited = set() max_depth = 0 while queue: node, depth = queue.popleft() if node in visited: continue visited.add(node) max_depth = max(max_depth, depth) for neighbor in adj_list[node]: if neighbor not in visited: queue.append((neighbor, depth + 1)) return max_depth return bfs(1) # Example Usage n = 6 m = 5 edges = [(1, 2), (1, 3), (2, 4), (2, 5), (5, 6)] print(deepest_directory_depth(n, m, edges)) # Output: 3"},{"question":"Cleaning Up the Neighborhood The local community committee has hired you to organize a neighborhood cleanup event. The neighborhood is arranged in a row of houses, numbered from 1 to N. Each house has some amount of trash that needs to be collected. To make things more interesting, there are some rules around how you can collect the trash: 1. You can start at any house. 2. When at a house with number `i`, you can only move to house `i+1`, `i-1`, `i+2`, or `i-2`. 3. You can only collect trash from each house once. Given the amount of trash at each house, determine the maximum amount of trash you can collect following the movement rules. Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of houses. The second line consists of N space-separated integers representing the amount of trash at each house. Output: T lines, each containing the maximum amount of trash that can be collected for each test case. Constraints: 1 ≤ N ≤ 10^5 0 ≤ trash at each house ≤ 10^4 1 ≤ T ≤ 100 SAMPLE INPUT 2 5 1 2 9 4 5 4 4 7 2 8 SAMPLE OUTPUT 15 15 Explanation: Case 1: Starting from house 1: collect from house 1 (1), move to house 3 (9), and move to house 5 (5)—total collected is 15. Case 2: Starting from house 1: collect from house 1 (4), move to house 3 (2), and move to house 4 (8)—total collected is 14.","solution":"def max_trash_collected(N, trash): if N == 0: return 0 if N == 1: return trash[0] dp = [0] * N dp[0] = trash[0] if N > 1: dp[1] = max(trash[0], trash[1]) if N > 2: dp[2] = max(trash[0] + trash[2], trash[1]) if N > 3: dp[3] = max(trash[0] + trash[3], trash[1] + trash[3]) for i in range(4, N): dp[i] = max(dp[i-1], dp[i-2] + trash[i], dp[i-3] + trash[i], dp[i-4] + trash[i]) return max(dp) def solve_neighborhood_cleanup(T, cases): results = [] for i in range(T): N, trash = cases[i] results.append(max_trash_collected(N, trash)) return results"},{"question":"Given a zero-indexed sequence of integers, our task is to identify subsequences that adhere to specific constraints. Define a sequence B derived from the original sequence A by taking every valid contiguous subsequence and summing its elements. A contiguous subsequence of the sequence A from index i to index j is denoted as A_{i ldots j}. To form B: Let B be an initially empty list. For k from 0 to length(A)-1: For i from 0 to length(A)-k-1: Let j = i + k Append sum(A_{i ldots j}) to B We define S(A) as the array formed from the sequence A using the procedure outlined above. Write a function `solve` that takes an integer array A as input, and finds the sum of all elements in S(A). If the result is large, return the sum modulo 10^9 + 7. # Input Format - The first line of input contains a single integer n, representing the length of the array A. - The second line contains n space-separated integers A_0, A_1, ldots, A_{n-1} representing the elements of the array A. # Constraints - 1 leq n leq 2 times 10^5 - 1 leq A_i leq 10^6 # Output Format Print a single integer, the sum of the elements of S(A) modulo 10^9 + 7. # Sample Input ``` 3 1 2 3 ``` # Sample Output ``` 20 ``` # Explanation In the given example, array A = [1, 2, 3]. Subarrays and their sums are: - Subarrays of length 1: [1], [2], [3] - sums are 1, 2, 3 - Subarrays of length 2: [1, 2], [2, 3] - sums are 3, 5 - Subarrays of length 3: [1, 2, 3] - sum is 6 Therefore, S(A) = [1, 2, 3, 3, 5, 6] and the sum of its elements is 1 + 2 + 3 + 3 + 5 + 6 = 20. Since 20 < 10^9 + 7, the output is 20.","solution":"def solve(n, A): MOD = 10**9 + 7 prefix_sum = [0] * (n + 1) # Compute the prefix sums for i in range(n): prefix_sum[i + 1] = (prefix_sum[i] + A[i]) % MOD total_sum = 0 # Compute the sum of all subsequence sums using prefix sums for length in range(1, n + 1): for i in range(n - length + 1): j = i + length current_sum = (prefix_sum[j] - prefix_sum[i]) % MOD total_sum = (total_sum + current_sum) % MOD print(total_sum)"},{"question":"You are given a string consisting of lowercase letters and an array of ranges. For each range, you need to determine the number of distinct characters present in the substring corresponding to that range. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the string. The second line contains a string of length n consisting of only lowercase letters. The third line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the 1-based starting and ending indices of the substring. Output For each query, output a single integer — the number of distinct characters in the substring from index l to r. Examples Input 7 abacaba 3 1 3 2 4 1 7 Output 2 3 3 Input 5 abcde 2 1 5 2 3 Output 5 2 Note For the first example, there is a string \\"abacaba\\", and the three queries are as follows: * For the first query (1, 3), the substring is \\"aba\\", which has 2 distinct characters: \'a\' and \'b\'. * For the second query (2, 4), the substring is \\"bac\\", which has 3 distinct characters: \'b\', \'a\', and \'c\'. * For the third query (1, 7), the substring is \\"abacaba\\", which has 3 distinct characters: \'a\', \'b\', and \'c\'. For the second example, the string is \\"abcde\\" and the two queries are: * For the first query (1, 5), the substring is \\"abcde\\", which has 5 distinct characters: \'a\', \'b\', \'c\', \'d\', and \'e\'. * For the second query (2, 3), the substring is \\"bc\\", which has 2 distinct characters: \'b\' and \'c\'.","solution":"def count_distinct_characters_in_substring(s, queries): s: string consisting of lowercase letters queries: list of tuple where each tuple contain two integers l and r (1-based) return: list of integers representing the number of distinct characters in the substring from index l to r for each query. results = [] for l, r in queries: substring = s[l-1:r] distinct_characters = set(substring) results.append(len(distinct_characters)) return results"},{"question":"Given a binary tree, you need to find the maximum value in each level of the tree and print those values as a space-separated string. Input: There are multiple test cases. Each test case starts with an integer N, the number of nodes in the binary tree. In the next line, there are N integers representing the values of the nodes in level-order (breadth-first) traversal of the tree. Each node\'s value is provided in level order and if a node does not exist (i.e., is a null child), it is represented by -1. For example, for the following input: 7 1 3 2 5 3 -1 9 It represents the following tree: ``` 1 / 3 2 / 5 3 9 ``` Output: For each test case, your program should output a single line with the maximum values at each level of the tree. Note: Use faster I/O methods to handle large input sizes efficiently. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 Example Input: 2 7 1 3 2 5 3 -1 9 3 1 -1 2 Example Output: 1 3 9 1 2","solution":"import sys from collections import deque input = sys.stdin.read def find_max_in_levels(test_cases): results = [] for nodes in test_cases: if not nodes: results.append(\\"\\") continue n = len(nodes) if n == 0: results.append(\\"\\") continue root = nodes[0] queue = deque([(root, 0)]) level_max = {} i = 1 while queue: current, level = queue.popleft() if current != -1: if level not in level_max: level_max[level] = current else: level_max[level] = max(level_max[level], current) if i < n: queue.append((nodes[i], level + 1)) i += 1 if i < n: queue.append((nodes[i], level + 1)) i += 1 level_max_str = \\" \\".join(str(level_max[level]) for level in sorted(level_max.keys())) results.append(level_max_str) return results def main(): input_data = input().split() index = 0 num_test_cases = int(input_data[index]) index += 1 test_cases = [] for _ in range(num_test_cases): n = int(input_data[index]) index += 1 nodes = list(map(int, input_data[index:index + n])) index += n test_cases.append(nodes) results = find_max_in_levels(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"There is a large national park with several scenic spots connected by hiking trails. You are a ranger stationed at this park, and your task is to find the best way to cover the entire park, visiting all scenic spots with the minimum number of distinct trail segments. Each trail segment is a two-way path connecting two spots, meaning you can travel in either direction on it. As the park authorities are keen on maintaining minimal disturbance to the park\'s ecosystem, you are required to minimize the number of trail segments you traverse while visiting all the scenic spots at least once. Additionally, after finding the optimal trail coverage, you are required to provide a set of all the scenic spots from where you can start walking to achieve this minimum trail coverage. Consider this park with five scenic spots and the following trails: ``` 1---2 | | 3---4---5 ``` In this example, one possible minimal coverage of trail segments includes the paths 1rightarrow 3 rightarrow 4 rightarrow 2 and 4rightarrow 5, as it visits all scenic spots with just 4 trail segments. The starting spots for the optimal routes include spots 1 and 4. -----Input----- Each test case will begin with a line with two space-separated integers n (1! le ! n! le ! 10^5) and m (0! le ! m! le ! 10^5), where n is the number of scenic spots and m is the number of trail segments. The scenic spots are numbered 1..n. Each of the next m lines contains two space-separated integers a and b (1! le ! a,b! le ! n, a! neq ! b), which indicates that there is a trail segment between spot a and spot b. All trail segments will be distinct. -----Output----- Produce exactly two lines of output. On the first line, output a single integer, which is the minimum number of trail segments required to visit all scenic spots at least once. On the second line, output a list of space-separated integers, which are the scenic spots from which you can start walking to achieve this minimal trail coverage. If multiple starting spots exist, output them in increasing order. If no spots can be used as a starting point, output a blank line. -----Examples----- Sample Input: 5 5 1 2 1 3 3 4 2 4 4 5 Sample Output: 4 1 4","solution":"def find(parent, i): # A utility function to find set of an element i (uses path compression technique) if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): # A function that does union of two sets of x and y (uses union by rank) xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): # This function returns the MST using Kruskal\'s algorithm result = [] # This will store the resultant MST i = 0 # An index variable, used for sorted edges e = 0 # An index variable, used for result[] # Step 1: Sort all the edges in non-decreasing order of their weight edges.sort(key=lambda item: item[0]) parent = [] rank = [] # Create V subsets with single elements for node in range(n): parent.append(node) rank.append(0) while e < n - 1: # Step 2: Pick the smallest edge that does not form a cycle weight, u, v = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) # If including this edge does not cause a cycle, include it in result # and increment the index of result for next edge if x != y: e = e + 1 result.append((u, v)) union(parent, rank, x, y) # For starting points, we just need the set of all unique nodes involved in the MST starting_points = sorted(set(parent)) return len(result), starting_points def hiking_trip(n, m, trails): edges = [(1, a-1, b-1) for a, b in trails] # Convert trails to zero-indexed for edges list if m == 0: return n-1, list(range(1, n+1)) if n > 1 else [] min_trail_count, starting_points_zero_indexed = kruskal_mst(n, edges) # Convert zero-indexed starting points back to one-indexed starting_points = [sp + 1 for sp in starting_points_zero_indexed] return min_trail_count, starting_points"},{"question":"A balanced number is a number whose sum of first half of digits is equal to the sum of second half of digits. If the number has an odd number of digits, exclude the middle digit. You are given a positive integer n. Determine if it is a balanced number. Input The only line of input contains an integer n (1 ≤ length of n ≤ 100). Output Output \\"YES\\" if n is a balanced number. Output \\"NO\\" otherwise. Quotes for clarity only. Examples Input 1230 Output YES Input 12321 Output YES Input 123456 Output NO Note In the first sample, the sum of first half (1+2) is equal to sum of the second half (3+0). In the second sample, middle digit 3 is excluded and the sum of first half (1+2) is equal to the sum of the second half (2+1). In the third sample, the sum of first half (1+2+3) is not equal to the sum of second half (4+5+6).","solution":"def is_balanced_number(n): Returns \\"YES\\" if the number n is a balanced number, otherwise returns \\"NO\\". num_str = str(n) length = len(num_str) # If the length of the number is odd, ignore the middle digit if length % 2 == 1: mid_index = length // 2 first_half = num_str[:mid_index] second_half = num_str[mid_index + 1:] else: mid_index = length // 2 first_half = num_str[:mid_index] second_half = num_str[mid_index:] # Calculate the sums of the first and second halves first_half_sum = sum(int(digit) for digit in first_half) second_half_sum = sum(int(digit) for digit in second_half) if first_half_sum == second_half_sum: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an unsorted array of integers, write a function to sort the array using the quicksort algorithm. Example 1: Input: arr = [10, 7, 8, 9, 1, 5] Output: [1, 5, 7, 8, 9, 10] Example 2: Input: arr = [1, 4, 3, 5, 6, 2] Output: [1, 2, 3, 4, 5, 6] Your Task: You don\'t need to read input or print anything. Complete the function quicksort() that takes the array and its starting and ending indices as input parameters and sorts the array using the quicksort algorithm. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(log N) Constraints: 1 ≤ arr.length ≤ 10^3 -10^4 ≤ arr[i] ≤ 10^4","solution":"def partition(arr, low, high): i = low - 1 pivot = arr[high] for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quicksort(arr, low, high): if low < high: pi = partition(arr, low, high) quicksort(arr, low, pi - 1) quicksort(arr, pi + 1, high)"},{"question":"Given an integer array `arr`, you need to determine the length of the longest subarray that has a sum equal to a given value `sum`. The subarray is a contiguous part of the array. Implement the function `findLength(arr, n, sum)` where: - `arr`: a list of integers (the array) - `n`: an integer representing the number of elements in the array `arr` - `sum`: an integer representing the target sum of the subarray The function should return the length of the longest subarray with sum equal to the given value `sum`. If no such subarray exists, the function should return 0. # Input - `n` (1 ≤ n ≤ 10^6) - `arr[i]` (-10^5 ≤ arr[i] ≤ 10^5 for all valid i) - `sum` (-10^9 ≤ sum ≤ 10^9) # Output - An integer representing the length of the longest subarray with the given sum. # Example Example 1 Input: ``` arr = [1, -1, 5, -2, 3] n = 5 sum = 3 ``` Output: ``` 4 ``` Explanation: The subarray [1, -1, 5, -2] sums to 3 and has the length 4, which is the longest. Example 2 Input: ``` arr = [-2, -1, 2, 1] n = 4 sum = 1 ``` Output: ``` 2 ``` Explanation: The subarray [-1, 2] sums to 1 and has the length 2, which is the longest. # Constraints - The function should have a time complexity better than O(n^2). - You are expected to handle very large values efficiently. # Note Consider edge cases: - The entire array sums to `sum`. - All elements are negative or zero. - The array contains only one element.","solution":"def findLength(arr, n, sum): Returns the length of the longest subarray with sum equal to the given sum. # Dictionary to store the prefix sum and its earliest occurrence index prefix_sum_indices = {} current_sum = 0 max_length = 0 for i in range(n): current_sum += arr[i] if current_sum == sum: max_length = i + 1 if current_sum - sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[current_sum - sum]) if current_sum not in prefix_sum_indices: prefix_sum_indices[current_sum] = i return max_length"},{"question":"In a certain grid-based game, you are given an m x n grid initialized with these three possible values: - -1: a wall or an obstacle. - 0: a gate. - INF: an empty room. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, leave the INF value as is. The distance is calculated based on the number of steps taken (i.e., the distance between two adjacent cells is 1 step). Write a function: ```python def walls_and_gates(rooms: List[List[int]]) -> None: ``` **Example 1:** ```python Input: rooms = [ [INF, -1, 0, INF], [INF, INF, INF, -1], [INF, -1, INF, -1], [0, -1, INF, INF] ] Output: [ [3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4] ] ``` **Example 2:** ```python Input: rooms = [ [0, INF], [INF, INF] ] Output: [ [0, 1], [1, 2] ] ``` **Constraints:** - m == rooms.length - n == rooms[i].length - 1 <= m, n <= 100 - rooms[i][j] is -1, 0, or `INF`","solution":"from collections import deque from typing import List INF = 2147483647 # Define the INF value def walls_and_gates(rooms: List[List[int]]) -> None: if not rooms or not rooms[0]: return m, n = len(rooms), len(rooms[0]) queue = deque() # Find all gates for i in range(m): for j in range(n): if rooms[i][j] == 0: queue.append((i, j)) # BFS from all gates concurrently while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and rooms[nx][ny] == INF: rooms[nx][ny] = rooms[x][y] + 1 queue.append((nx, ny))"},{"question":"There are N people standing in a circle, numbered from 1 to N. Starting from the 1st person, you need to remove every K-th person from the circle until only one person remains. Find the position of the last remaining person. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 1 leq K leq 10^5 -----Input----- Input is given from Standard Input in the following format: N K -----Output----- Print the position (1-indexed) of the last remaining person. -----Sample Input----- 7 3 -----Sample Output----- 4 The order of removal is: 3, 6, 2, 7, 5, 1. The last person remaining is at position 4.","solution":"def last_person_standing(N, K): Returns the position of the last remaining person. :param N: The total number of people standing in a circle (1-indexed). :param K: The step rate for eliminating every K-th person. :return: The position of the last remaining person. # Base case if N == 1: return 1 # Recursively find the position of the last remaining person return (last_person_standing(N-1, K) + K-1) % N + 1 # You can add a main function to read from standard input if necessary if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip() N, K = map(int, data.split()) print(last_person_standing(N, K))"},{"question":"Given an array of n integers, where n > 1, write a function to return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. Examples: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: The product of all the elements except for 1 is 2*3*4 = 24. The product of all the elements except for 2 is 1*3*4 = 12. The product of all the elements except for 3 is 1*2*4 = 8. The product of all the elements except for 4 is 1*2*3 = 6. Input: [5, 6, 2, 8] Output: [96, 80, 240, 60] Explanation: The product of all the elements except for 5 is 6*2*8 = 96. The product of all the elements except for 6 is 5*2*8 = 80. The product of all the elements except for 2 is 5*6*8 = 240. The product of all the elements except for 8 is 5*6*2 = 60. Your Task: You don\'t need to read input or print anything. Your task is to complete the function productExcludeItself() which takes an array as input and returns a new array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 -10^5 <= arr[i] <= 10^5","solution":"def productExcludeItself(arr): n = len(arr) if n == 0: return [] # Initialize prefix and suffix product arrays prefix_products = [1] * n suffix_products = [1] * n result = [0] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * arr[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * arr[i + 1] # Calculate the result array for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Given a sequence of n integers, you are required to perform k operations to maximize the sum of the sequence. In each operation, you can select any one element of the sequence and set it to its negative. Determine the maximum possible sum of the sequence after performing exactly k operations. -----Input----- The first line contains two integers n (1 le n le 10^5) and k (0 le k le n) — the number of integers in the sequence and the number of operations respectively. The second line contains n integers a_i (-10^9 le a_i le 10^9) — the elements of the sequence. -----Output----- Print a single integer — the maximum possible sum of the sequence after performing exactly k operations. -----Examples----- Input 5 3 -1 3 -2 4 -5 Output 15 Input 4 2 1 2 3 4 Output 10 Input 3 1 0 -1 2 Output 3 -----Note----- In the first example, we can perform the following operations to get the maximum sum: 1. Set -1 to 1: the sequence becomes [1, 3, -2, 4, -5]. 2. Set -2 to 2: the sequence becomes [1, 3, 2, 4, -5]. 3. Set -5 to 5: the sequence becomes [1, 3, 2, 4, 5]. The sum of this sequence is 15. In the second example, the sequence is already positive, so performing any operation will decrease the sum. Therefore, we do not perform any operation and the sum remains 10.","solution":"def maximize_sum(n, k, sequence): Returns the maximum possible sum of the sequence after performing exactly k operations. Each operation allows setting any one element of the sequence to its negative. sequence.sort() # Sort sequence to easily find the smallest values for i in range(min(k, n)): if sequence[i] < 0: sequence[i] *= -1 # Set negative element to positive return sum(sequence)"},{"question":"You are given a string s and an integer k. Your task is to determine if s can be transformed into a valid palindrome by removing at most k characters from it. A palindrome is a string that reads the same forwards and backwards. ------ Input ------ The first line contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a string s and an integer k on a single line separated by a space. ------ Output ------ For each test case, print \\"YES\\" if the string can be transformed into a palindrome by removing at most k characters, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |s| ≤ 1000 0 ≤ k ≤ |s| ----- Sample Input ------ 3 abca 1 abcba 0 abcda 3 ----- Sample Output ------ YES YES YES ----- Explanation ------ In the first case, removing the character \'c\' from the string \\"abca\\" results in the palindrome \\"aba\\". Since we removed only 1 character and k = 1, the answer is \\"YES\\". In the second case, the string \\"abcba\\" is already a palindrome, so no characters need to be removed. The answer is \\"YES\\". In the third case, we can remove the characters \'b\' and \'c\' from \\"abcda\\" to get \\"ada\\", which is a palindrome. Since we removed 2 characters and k = 3, the answer is \\"YES\\".","solution":"def can_be_palindrome(s, k): def min_deletions_to_palindrome(s): n = len(s) dp = [[0] * n for _ in range(n)] for l in range(2, n + 1): for i in range(n - l + 1): j = i + l - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] min_deletions = min_deletions_to_palindrome(s) return min_deletions <= k def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(\\"YES\\" if can_be_palindrome(s, k) else \\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): parts = lines[i].split() s = parts[0] k = int(parts[1]) test_cases.append((s, k)) return test_cases def solve(input_string): test_cases = parse_input(input_string) results = process_test_cases(test_cases) return \\"n\\".join(results)"},{"question":"You are given an integer array `arr` of length `n`. You have to perform `q` queries on this array. Each query can be one of the following two types: 1. Update the value at a specific index of the array. 2. Calculate the sum of the values in a given subarray. To make the queries efficient, use a Segment Tree or a Fenwick Tree to handle the operations. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries respectively. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the elements of the array initially. The following `q` lines describe the queries in the following format: - \\"1 x y\\" - Update the element at index `x` (1-based index) to `y` (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9). - \\"2 l r\\" - Calculate the sum of the elements in the subarray from index `l` to index `r` (1 ≤ l ≤ r ≤ n). Output For each query of the second type, print the sum of the elements in the given subarray. Example Input 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 Output 6 14 Note In the example, the initial array is [1, 2, 3, 4, 5]. The first sum query is from index 1 to 3, which sums to 1 + 2 + 3 = 6. After updating index 2 to 10, the array becomes [1, 10, 3, 4, 5]. The second sum query from index 1 to 3 sums to 1 + 10 + 3 = 14.","solution":"class FenwickTree: def __init__(self, n): self.n = n self.tree = [0] * (n + 1) def update(self, index, value): while index <= self.n: self.tree[index] += value index += index & -index def query(self, index): result = 0 while index > 0: result += self.tree[index] index -= index & -index return result class Solution: def __init__(self, arr): self.n = len(arr) self.arr = arr self.bit = FenwickTree(self.n) for i in range(self.n): self.bit.update(i + 1, arr[i]) def update(self, x, y): current_val = self.arr[x - 1] self.bit.update(x, y - current_val) self.arr[x - 1] = y def query(self, l, r): return self.bit.query(r) - self.bit.query(l - 1) def process_queries(n, arr, queries): sol = Solution(arr) results = [] for query in queries: type_query = query[0] if type_query == 1: _, x, y = query sol.update(x, y) elif type_query == 2: _, l, r = query results.append(sol.query(l, r)) return results"},{"question":"Violet is working on a text processing application that involves detecting and highlighting specific patterns in strings. One of the tasks requires identifying the longest palindromic substring (a substring that reads the same forward and backward) within a given string. Violet\'s manager, Samuel, suggests developing an algorithm to handle this efficiently since the application needs to process large volumes of text. Given a string s of length n (1 ≤ n ≤ 1000), return the longest palindromic substring. A palindromic substring of a string is a contiguous sequence of characters within the string that reads the same backward as forward. Input A single string s, the input string (1 ≤ |s| ≤ 1000). Output A single string, the longest palindromic substring. If there are multiple results, return the one that appears first. Example Input babad Output bab Note In the input example, \\"bab\\" is the longest palindromic substring. Although \\"aba\\" is also a palindrome of the same length, \\"bab\\" appears first in the string, so it is returned.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" longest_start = 0 max_len = 1 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True for end in range(1, n): for start in range(end): if s[start] == s[end]: if end - start == 1 or dp[start + 1][end - 1]: dp[start][end] = True current_len = end - start + 1 if current_len > max_len: max_len = current_len longest_start = start return s[longest_start:longest_start + max_len]"},{"question":"In a game, you are given a grid of size N x M where each cell contains either a 0 or a 1. The goal is to find the largest rectangle containing only 1s and return its area. The rectangle can be of varying sizes. You are required to write a program to find the area of the largest rectangle containing only 1s in the given grid. Input The input consists of a sequence of integers. The first line contains two positive integers N (1 ≤ N ≤ 200) and M (1 ≤ M ≤ 200), representing the number of rows and columns in the grid, respectively. The next N lines each contain M integers, either 0 or 1, separated by a space, representing the grid. Output Output the area of the largest rectangle containing only 1s. Example Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 heights = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area"},{"question":"Complete the function `find_pairs_with_sum(arr, target_sum)` that returns a list of all unique pairs of integers from the array `arr` that add up to `target_sum`. **Notes:** * Each pair should be sorted in ascending order. * The resulting list of pairs should be sorted in ascending order based on the first number of each pair. * If there are no pairs that add up to the target sum, return an empty list. * Each element in the array can be used only once in a pair. Examples ```python find_pairs_with_sum([1, 2, 3, 4, 5], 5) ==> [(1, 4), (2, 3)] find_pairs_with_sum([0, -1, 2, -3, 1], -1) ==> [(-3, 2), (-1, 0)] find_pairs_with_sum([1, 1, 1, 1], 2) ==> [(1, 1)] find_pairs_with_sum([3, 5, 9, 2, 8], 8) ==> [(3, 5)] find_pairs_with_sum([1, 2, 3], 6) ==> [] ```","solution":"def find_pairs_with_sum(arr, target_sum): Returns a list of all unique pairs of integers from `arr` that add up to `target_sum`. Each pair should be sorted in ascending order and the resulting list should be sorted by the first number of each pair. pairs = set() seen = set() for num in arr: complement = target_sum - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs)"},{"question":"In a country where the economy heavily relies on agriculture, the government has launched an initiative to monitor the productivity of farmlands. Each farmland is represented by a grid of size N x M, where each cell in the grid denotes the productivity of a 1x1 land plot. The productivity of a plot is a positive integer. The government wants to find the most productive rectangular subarea of each farmland, where the total productivity is the sum of productivity values in the subarea. If multiple subareas have the same total productivity, choose the smallest one in terms of area. If there is still a tie, choose the one appearing first in row-major order. Write a program to help the government calculate the maximum total productivity of the most productive subarea for multiple farmlands. Input The first line of input contains a single integer T, denoting the number of test cases. Each test case starts with two space-separated integers N and M. The next N lines each contain M space-separated integers, representing the productivity of each cell in the grid. Output For each test case, output a single line containing the maximum total productivity of the most productive subarea. Constraints 1 <= T <= 10 1 <= N, M <= 100 1 <= productivity of each cell <= 100 Example Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 3 4 Output: 45 10 Explanation In the first test case, the entire 3x3 grid is the most productive subarea with a total productivity of 45. In the second test case, the most productive subarea is the 2x2 grid itself with a total productivity of 10.","solution":"def maximum_productivity_of_subarea(T, test_cases): def max_subarray_sum(arr): max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum results = [] for case in test_cases: N, M, grid = case max_productivity = float(\'-inf\') for left in range(M): temp = [0] * N for right in range(left, M): for row in range(N): temp[row] += grid[row][right] max_productivity = max(max_productivity, max_subarray_sum(temp)) results.append(max_productivity) return results # Example usage: T = 2 test_cases = [ (3, 3, [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]), (2, 2, [ [1, 2], [3, 4] ]) ] print(maximum_productivity_of_subarea(T, test_cases))"},{"question":"In a forest, there are numerous species of birds. Each species is identified by a unique integer ID number. When multiple bird enthusiasts observe the forest, they each log a list of bird species they\'ve spotted. Given an array of arrays where each sub-array represents the observations from an individual enthusiast, write a function to find the most frequently spotted bird species across all observations. If there is a tie, return the smallest ID number among the most frequently spotted species. Your function should return the ID of the most commonly observed bird species. **Input:** - An array of arrays, `observations`, where each sub-array consists of integers representing bird species IDs. **Output:** - An integer representing the ID of the most frequently spotted bird species. **Example:** ``` observations = [[1, 3, 2, 1], [2, 2, 3, 1], [3, 1, 1, 2]] Output: 1 observations = [[4, 5, 4], [5, 4, 4]] Output: 4 ``` **Note:** - The input array will be non-empty. - Each sub-array in `observations` will have at least one element.","solution":"def most_frequent_bird_species(observations): from collections import Counter # Flatten the list of lists into a single list all_observations = [bird for sublist in observations for bird in sublist] # Count the frequency of each bird species bird_count = Counter(all_observations) # Find the most frequent bird species max_frequency = max(bird_count.values()) most_frequent_species = [bird for bird, count in bird_count.items() if count == max_frequency] # Return the smallest ID if there\'s a tie return min(most_frequent_species)"},{"question":"Given an array of integers, return an array where each element is the number of smaller elements to the right of that element. Input Format An array of integers boldsymbol{arr} of length boldsymbol{n}. Constraints 1leq nleq 2times10^5 -10^9leq arr[i]leq 10^9 Output Format Return an array of integers where each element is the count of smaller numbers to the right of that element in the input array. Sample Input 0 [5, 2, 6, 1] Sample Output 0 [2, 1, 1, 0] Explanation 0 For the given input array, the counts of smaller elements to the right of each element are: - For the first element (5), there are two smaller elements (2 and 1). - For the second element (2), there is one smaller element (1). - For the third element (6), there is one smaller element (1). - For the fourth element (1), there are no smaller elements.","solution":"def count_smaller_elements(arr): Given an array of integers, return an array where each element is the number of smaller elements to the right of that element. :param arr: List[int] - an array of integers :return: List[int] - an array with counts of smaller elements to the right n = len(arr) result = [0] * n sorted_list = [] for i in range(n - 1, -1, -1): pos = binary_search(sorted_list, arr[i]) result[i] = pos sorted_list.insert(pos, arr[i]) return result def binary_search(sorted_list, target): A helper function to perform binary search on the sorted list. :param sorted_list: List[int] - a list of sorted integers :param target: int - the target integer to find the position for :return: int - the position to insert the target integer low, high = 0, len(sorted_list) while low < high: mid = (low + high) // 2 if sorted_list[mid] < target: low = mid + 1 else: high = mid return low"},{"question":"You are given a list of integers and need to determine whether these integers can be rearranged to form an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. Write a function `canMakeArithmeticProgression(arr: List[int]) -> bool` that returns `true` if the given integers can be rearranged to form an arithmetic progression, otherwise, it returns `false`. # Example 1: - **Input**: `arr = [3, 5, 1]` - **Output**: `true` - **Explanation**: The list can be rearranged to [1, 3, 5] which forms an arithmetic progression with a common difference of 2. # Example 2: - **Input**: `arr = [1, 2, 4]` - **Output**: `false` - **Explanation**: There is no way to rearrange the list to form an arithmetic progression. # Constraints: - The length of the list `arr` will be between 2 and 10<sup>4</sup>. - The elements in the list `arr` will be between -10<sup>6</sup> and 10<sup>6</sup>. ```python def canMakeArithmeticProgression(arr: List[int]) -> bool: arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != diff: return False return True ```","solution":"def canMakeArithmeticProgression(arr): Determines if the list of numbers can be rearranged to form an arithmetic progression. if len(arr) < 2: return True arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != diff: return False return True"},{"question":"In a game of word frequency analysis, you\'re tasked with identifying the most frequently occurring word in a given set of paragraphs. Your task is to write a program that takes multiple paragraphs as input and outputs the word that appears the most frequently in each paragraph. Words are defined as sequences of alphabetic characters (case-insensitive) and are separated by non-alphabetic characters. -----Input----- The first line of input contains the number of paragraphs (no more than 10). Each subsequent line represents one paragraph. Each paragraph consists of words and various punctuation marks and spaces. -----Output----- For each paragraph, output one line containing the most frequently occurring word in that paragraph. If there is a tie for the most frequent word, output the lexicographically smallest word among them. -----Example----- Input: 3 Hello world! This is a test. Hello again. Test the system with a simple test. Test is good. Wow! Frequency analysis can be fun. Fun times! Output: hello test fun","solution":"import re from collections import Counter def most_frequent_word(paragraphs): Given a list of paragraphs, returns the most frequently occurring word in each paragraph. In case of a tie, return the lexicographically smallest word. results = [] for paragraph in paragraphs: words = re.findall(r\'[a-zA-Z]+\', paragraph.lower()) word_count = Counter(words) max_count = max(word_count.values()) most_freq_words = [word for word, count in word_count.items() if count == max_count] results.append(min(most_freq_words)) return results"},{"question":"You are given a task to handle a library management system. The library has books, and each book has a unique ID, a title, and an author. The library also has members, each identified by a unique member ID and name. Members can borrow books, but each book can be borrowed by one member at a time. Your task is to implement a program that processes a series of commands related to book borrowing and returns, and outputs the current status of the library, including which books are borrowed and by whom. The commands include: - ADD_BOOK id title author: Adds a book to the library. - ADD_MEMBER id name: Adds a member to the library. - BORROW_BOOK member_id book_id: A member borrows a book from the library. If the book is already borrowed, ignore the command. - RETURN_BOOK book_id: A member returns a book to the library. - STATUS: Prints the current status of the library. The status should be printed in the following format: ``` Book ID | Title | Author | Status Member ID | Name ``` For each book, print its ID, title, author, and status (either \\"Available\\" or \\"Borrowed by member_id\\"). If a book is borrowed, also list the ID and name of the member who borrowed it. Constraints: * 1 ≤ number of books, members, and commands ≤ 100 Input: The input starts with an integer n, the number of commands, followed by n lines containing commands, which can be of any of the types mentioned above. Output: Print the library status using the format described above. Example: Input: ``` 10 ADD_BOOK 1 \\"The Catcher in the Rye\\" \\"J.D. Salinger\\" ADD_BOOK 2 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" ADD_MEMBER 101 \\"Alice\\" ADD_MEMBER 102 \\"Bob\\" BORROW_BOOK 101 1 BORROW_BOOK 102 1 STATUS RETURN_BOOK 1 STATUS ``` Output: ``` Book ID | Title | Author | Status 1 | The Catcher in the Rye | J.D. Salinger | Borrowed by 101 Member ID | Alice 2 | To Kill a Mockingbird | Harper Lee | Available 1 | The Catcher in the Rye | J.D. Salinger | Available 2 | To Kill a Mockingbird | Harper Lee | Available ``` Note: - If a member tries to borrow a book that is already borrowed, ignore the command and continue processing the next command. - When printing the status, the books should be listed in the order they were added to the library.","solution":"class Library: def __init__(self): self.books = {} self.members = {} self.borrowed_books = {} def add_book(self, id, title, author): self.books[id] = {\\"title\\": title, \\"author\\": author, \\"status\\": \\"Available\\"} def add_member(self, id, name): self.members[id] = name def borrow_book(self, member_id, book_id): if book_id in self.books and self.books[book_id][\\"status\\"] == \\"Available\\": self.books[book_id][\\"status\\"] = f\\"Borrowed by {member_id}\\" self.borrowed_books[book_id] = member_id def return_book(self, book_id): if book_id in self.borrowed_books: del self.borrowed_books[book_id] self.books[book_id][\\"status\\"] = \\"Available\\" def get_status(self): result = [] for book_id, book in self.books.items(): status = book[\\"status\\"] if \\"Borrowed by\\" in status: member_id = self.borrowed_books[book_id] member_name = self.members[member_id] result.append(f\\"{book_id} | {book[\'title\']} | {book[\'author\']} | {status}n{member_id} | {member_name}\\") else: result.append(f\\"{book_id} | {book[\'title\']} | {book[\'author\']} | {status}\\") return \\"n\\".join(result) def process_commands(commands): library = Library() for command in commands: parts = command.split(\\" \\", 2) if parts[0] == \\"ADD_BOOK\\": id, rest = parts[1], parts[2] title, author = rest.rsplit(\\" \\", 1) library.add_book(int(id), title.strip(\'\\"\'), author.strip(\'\\"\')) elif parts[0] == \\"ADD_MEMBER\\": id, name = int(parts[1]), parts[2].strip(\'\\"\') library.add_member(id, name) elif parts[0] == \\"BORROW_BOOK\\": member_id, book_id = map(int, parts[1:]) library.borrow_book(member_id, book_id) elif parts[0] == \\"RETURN_BOOK\\": book_id = int(parts[1]) library.return_book(book_id) elif parts[0] == \\"STATUS\\": print(library.get_status())"},{"question":"You are given a positive integer number n. Your task is to add the fewest number of digits to n such that the resulting number is a palindrome and has an even number of digits. A palindrome is a number that reads the same backward as forward. If it\'s not possible to make such a number by adding up to 3 digits, print -1. Otherwise, print any valid resultant palindrome. Input The input is a single line containing the integer n (1 ≤ n ≤ 10000). Output Print a single palindrome with an even number of digits obtained by adding up to 3 digits to n. If it\'s not possible to do so, print -1. Examples Input 123 Output 12321 Input 4567 Output -1 Note In the first example, we can add \'21\' to the end of \'123\' to obtain \'12321\', which is a palindrome and has more than an even number of digits. In the second example, it\'s impossible to form a palindrome by adding up to 3 digits to \'4567\' that results in an even number of digits. Therefore, the output is -1.","solution":"def is_palindrome(s): return s == s[::-1] def extend_number_to_palindrome(n): n_str = str(n) for i in range(3, -1, -1): for j in range(10**i): potential_palindrome = n_str + str(j) if is_palindrome(potential_palindrome) and len(potential_palindrome) % 2 == 0: return int(potential_palindrome) return -1 # Example usage print(extend_number_to_palindrome(123)) # Should print a valid even-length palindrome like 123321 print(extend_number_to_palindrome(4567)) # Should print -1"},{"question":"Given an array of integers, find the most frequent element. If there are multiple elements with the same highest frequency, return the smallest one. Example 1: Input: arr = [1, 3, 2, 1, 4, 1] Output: 1 Explanation: 1 appears 3 times which is the highest frequency. Example 2: Input: arr = [2, 2, 3, 3, 1, 1] Output: 1 Explanation: 2, 3, and 1 all appear 2 times, but 1 is the smallest. Your Task: You don\'t need to read or print anything. Your task is to complete the function find_most_frequent() which takes the array of integers as a parameter and returns the most frequent element. If there are multiple elements with the same highest frequency, return the smallest one. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= Length of array <= 10^5 -10^4 <= Element value <= 10^4","solution":"def find_most_frequent(arr): from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # Find the highest frequency max_frequency = max(frequency.values()) # Find all elements with the highest frequency most_frequent_elements = [key for key, value in frequency.items() if value == max_frequency] # Return the smallest element among those with the highest frequency return min(most_frequent_elements)"},{"question":"You are given a list of student names and their scores in a dictionary format. Create a function `high_scorer(students)` that takes this dictionary as an input and returns the name of the student with the highest score. If there are multiple students with the highest score, return their names in a sorted list. If the dictionary is empty, return `None/null/Nothing`.","solution":"def high_scorer(students): Returns the name of the student with the highest score. If there are multiple students with the highest score, return their names in a sorted list. If the dictionary is empty, return None. if not students: return None highest_score = max(students.values()) high_scorers = [name for name, score in students.items() if score == highest_score] if len(high_scorers) == 1: return high_scorers[0] else: return sorted(high_scorers)"},{"question":"You are given a string s of length n and an integer k. A string is called a \\"k-palindrome\\" if it becomes a palindrome after removing at most k characters. Determine whether the given string s is a k-palindrome. For example, consider s = \\"abca\\" and k = 1. If we remove the character \'b\' or \'c\' from s, the resulting string \\"aca\\" or \\"aba\\" is a palindrome. If we remove both \'b\' and \'c\', the resulting string \\"aa\\" is also a palindrome. Hence, the string \\"abca\\" is a 1-palindrome. -----Input----- The input consists of multiple test cases. The first line of the input contains a single integer t (1 leq t leq 10^3) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (2 leq n leq 10^5) — the length of string s. The second line of each test case contains a string s consisting of lowercase English letters. The third line of each test case contains a single integer k (0 leq k leq 10^5). It is guaranteed that sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output \\"YES\\" if the string s is a k-palindrome. Otherwise, output \\"NO\\". -----Examples----- Input 3 4 abca 1 5 abcba 0 5 abcde 2 Output YES YES NO -----Note----- The first test case is described in the statement. In the second test case, the string \\"abcba\\" is already a palindrome, so it\'s a 0-palindrome (k=0). In the third test case, we need to remove at least 3 characters to make the string a palindrome, but we are allowed to remove only 2 characters (k=2). Hence the answer is NO.","solution":"def is_k_palindrome(s, k): Determines whether the string s is a k-palindrome. :param s: string :param k: integer :return: boolean def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lp_length = longest_palindromic_subsequence(s) n = len(s) return (n - lp_length) <= k def solve_k_palindrome_cases(test_cases): results = [] for n, s, k in test_cases: if is_k_palindrome(s, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A spaceship is on a mission to rescue astronauts. The spaceship follows a binary beacon pattern of 0s and 1s, where \'0\' indicates a leftward movement and \'1\' indicates a rightward movement. The ship can\'t change its direction once it starts. Given N, the number of movements, determine the number of different beacon patterns possible. Input First line of the input contains T (T ≤ 1000) denoting the number of test cases. Each of the next T lines contains a single integer N (1 ≤ N ≤ 55) denoting the number of movements. Output For each case, output a single integer representing the number of possible beacon patterns. ----- Sample Input 1 ------ 3 1 2 3 ----- Sample Output 1 ------ 2 4 8 Explanation 1 In the first case, the possible patterns are 0, 1 In the second case: 00, 01, 10, 11 In the third case: 000, 001, 010, 011, 100, 101, 110, 111","solution":"def count_beacon_patterns(n): Given an integer n, returns the number of possible beacon patterns # Since the spaceship can only move left (\'0\') or right (\'1\') for each movement, # and it can\'t change its direction once it starts, the number of patterns # is simply 2^n as there are two choices (0 or 1) for each movement. return 2 ** n def solve_beacon_patterns(test_cases): Given a list of test cases, returns the list of results for the beacon patterns calculation results = [] for n in test_cases: results.append(count_beacon_patterns(n)) return results"},{"question":"Given an integer `n`, return the sum of the squares of the digits of `n`. **Examples:** ```python sum_of_squares(123) ==> 14 # Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 sum_of_squares(49) ==> 97 # Explanation: 4^2 + 9^2 = 16 + 81 = 97 sum_of_squares(0) ==> 0 # Explanation: 0^2 = 0 ``` Note: the input number can be positive or negative, but the result should always be a non-negative integer. The input number will always be an integer.","solution":"def sum_of_squares(n): Given an integer n, returns the sum of the squares of its digits. n = abs(n) # Use the absolute value of n to handle negative numbers return sum(int(digit) ** 2 for digit in str(n))"},{"question":"# Introduction Imagine you are playing a game where the board is a grid of cells, and each cell can be either alive or dead. The game evolves in steps, and the next state of each cell is determined by the current state of its neighboring cells. This game is known as Conway\'s Game of Life. The board is a 2D grid of cells, where each cell is either alive (represented by the integer 1) or dead (represented by the integer 0). Each cell interacts with its eight neighbors (horizontal, vertical, and diagonal) using the following rules: 1. Any live cell with fewer than two live neighbors dies (referred to as underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (referred to as overpopulation). 4. Any dead cell with exactly three live neighbors becomes a live cell (referred to as reproduction). Your task is to implement the `GameOfLife` class that simulates the evolution of the game. # Task Implement the class `GameOfLife` with the following functionality: 1. The constructor accepts an initial board configuration as a 2D list of integers. 2. A method `evolve` which simulates the evolution of the game by one step and updates the board accordingly. 3. A method `get_board` which returns the current board configuration as a 2D list of integers. # Rules 1. The input board will be a non-empty 2D list of integers containing only 0s and 1s. 2. The board can have varying dimensions but will be rectangular (i.e., all rows have the same length). 3. The method `evolve` should update the board according to the rules of Conway\'s Game of Life. # Returns The method `get_board` should return the current state of the board as a 2D list of integers. # Example ```python initial_board = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] game = GameOfLife(initial_board) game.evolve() game.get_board() # Output: # [ # [0, 0, 0], # [1, 0, 1], # [0, 1, 1], # [0, 1, 0] # ] ``` # Input The input to the `GameOfLife` constructor is a 2D list of integers representing the initial state of the game board. # Solution Implement the class `GameOfLife` in Python.","solution":"class GameOfLife: def __init__(self, board): self.board = board self.rows = len(board) self.cols = len(board[0]) def evolve(self): # Create a deep copy of the board to reference the original state while updating original_board = [row[:] for row in self.board] for i in range(self.rows): for j in range(self.cols): live_neighbors = self.count_live_neighbors(original_board, i, j) if original_board[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: self.board[i][j] = 0 # Cell dies else: if live_neighbors == 3: self.board[i][j] = 1 # Cell becomes alive def count_live_neighbors(self, board, row, col): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < self.rows and 0 <= c < self.cols and board[r][c] == 1: count += 1 return count def get_board(self): return self.board"},{"question":"You are given a maze represented as a grid of size n x m. Each cell in the grid is either empty (represented by \'.\') or a wall (represented by \'#\'). Your task is to determine the shortest path from a start cell to a goal cell, avoiding walls. The maze has the following properties: - You can move to an adjacent cell if it is empty. - You can move in four possible directions: up, down, left, and right. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the maze. Each of the next n lines contains m characters (either \'.\' or \'#\'). The next line contains two integers x_s and y_s (1 ≤ x_s ≤ n, 1 ≤ y_s ≤ m) — the coordinates of the starting cell. Note that the coordinates are 1-indexed. The following line contains two integers x_g and y_g (1 ≤ x_g ≤ n, 1 ≤ y_g ≤ m) — the coordinates of the goal cell. Note that the coordinates are 1-indexed. Output Output the shortest number of steps from the start cell to the goal cell. If there is no possible path, print \\"Impossible\\". Examples Input 5 5 ..... .#. .#... .#. ..... 1 1 5 5 Output 8 Input 3 3 .#. # .#. 1 1 3 3 Output Impossible","solution":"from collections import deque def shortest_path(n, m, maze, start, goal): def within_bounds(x, y): return 0 <= x < n and 0 <= y < m def is_empty(x, y): return maze[x][y] == \'.\' x_s, y_s = start x_g, y_g = goal x_s -= 1 y_s -= 1 x_g -= 1 y_g -= 1 moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(x_s, y_s, 0)]) visited = set() visited.add((x_s, y_s)) while queue: x, y, steps = queue.popleft() if (x, y) == (x_g, y_g): return steps for dx, dy in moves: nx, ny = x + dx, y + dy if within_bounds(nx, ny) and is_empty(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return \\"Impossible\\""},{"question":"A team planning a conference wants to ensure the optimal utilization of available conference rooms. They have a list of presentation time slots, each defined by a start time and an end time. Presentations cannot overlap in the same room, and each presentation needs exactly one room. Your task is to determine the minimum number of conference rooms required to schedule all the presentations. Input: - The first line contains an integer n indicating the number of presentations. - The next n lines each contain two integers, the start and end times of each presentation. Output: - Output a single integer, the minimum number of conference rooms required. Constraints: - 1 ≤ n ≤ 100 - 1 ≤ start_time < end_time ≤ 10,000 Hint: You may find it helpful to first sort the presentations by start times or end times while solving the problem. Example Input: 3 1 4 2 5 3 6 Output: 3 Explanation: - Presentation 1 [1, 4] overlaps with Presentation 2 [2, 5] and Presentation 3 [3, 6]. - Therefore, all three presentations need separate rooms.","solution":"def min_conference_rooms(n, intervals): This function returns the minimum number of conference rooms required to schedule all presentations without any overlap. :param n: int - number of presentations :param intervals: List[Tuple[int, int]] - list of (start, end) tuples for each presentation :return: int - minimum number of conference rooms needed if not intervals: return 0 # Separate out the start and end times in different arrays start_times = sorted([interval[0] for interval in intervals]) end_times = sorted([interval[1] for interval in intervals]) start_ptr = 0 end_ptr = 0 used_rooms = 0 # Iterate over all the meetings while start_ptr < n: # If there is a meeting that has ended by the time the meeting at `start_ptr` starts if start_times[start_ptr] >= end_times[end_ptr]: # Free up a room and move the `end_ptr` used_rooms -= 1 end_ptr += 1 # We do this irrespective of whether a room was freed up or not. # If a meeting is going to be used, increment the room count. used_rooms += 1 start_ptr += 1 return used_rooms # Example: n = 3 intervals = [(1, 4), (2, 5), (3, 6)] print(min_conference_rooms(n, intervals))"},{"question":"There is an ancient door that can only be unlocked by setting a binary lock mechanism to a specific configuration. The lock consists of an array b of n elements, each of which is either 0 or 1. It can be set by performing a series of operations, where an operation is defined as follows: 1. Choose an index i (1 ≤ i ≤ n) and flip the value at b[i] (0 becomes 1, and 1 becomes 0). 2. Choose two indices i and j (1 ≤ i, j ≤ n; i ≠ j) and swap the values of b[i] and b[j]. Given the initial state of the lock and the target configuration, determine the minimum number of operations required to unlock the door. Input The first line contains a single integer n — the size of the array b (1 ≤ n ≤ 20). The following line contains n integers b_1, b_2, …, b_n — the initial state of the array (0 or 1). The next line contains n integers t_1, t_2, …, t_n — the target configuration (0 or 1). Output Output a single integer — the minimum number of operations required to unlock the door. Examples Input 4 0 1 0 1 1 0 1 0 Output 2 Input 3 0 0 0 1 1 1 Output 3 Input 2 1 0 0 1 Output 1 Note In the first example, one can swap the first and second elements, resulting in (1, 0, 0, 1), and then swap the third and fourth elements to achieve the target configuration. In the second example, one can flip each element once to match the target configuration, requiring three operations. In the third example, swapping the two elements immediately achieves the target configuration with one operation.","solution":"def min_operations(n, initial, target): Calculate the minimum number of operations to transform the initial array into the target array. :param n: int - number of elements in array b (1 ≤ n ≤ 20) :param initial: list of int - initial state of the array (0 or 1) :param target: list of int - target configuration (0 or 1) :return: int - minimum number of operations flips = 0 mismatched_indices = [] for i in range(n): if initial[i] != target[i]: flips += 1 mismatched_indices.append(i) if flips == 0: return 0 # Attempt to minimize operations by using swaps on mismatched indices swaps = 0 i = 0 while i < len(mismatched_indices) - 1: if initial[mismatched_indices[i]] != initial[mismatched_indices[i + 1]] and target[mismatched_indices[i]] != target[mismatched_indices[i + 1]]: swaps += 1 flips -= 2 i += 1 i += 1 return swaps + flips"},{"question":"You are given an array of integers. Determine if there is a pair of elements in the array that add up to a given target sum. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer k (1 ≤ k ≤ 10^9) — the target sum. Output Output \\"YES\\" if there exists a pair of elements in the array that add up to k, otherwise output \\"NO\\". Examples Input 4 2 7 11 15 9 Output YES Input 3 1 2 3 6 Output NO","solution":"def check_pair_sum_exists(n, arr, k): Determine if there is a pair of elements in the array that add up to the given target sum. :param n: int - The number of elements in the array. :param arr: list of int - The elements of the array. :param k: int - The target sum. :return: str - \\"YES\\" if there is a pair that adds up to k, otherwise \\"NO\\". seen = set() for num in arr: if (k - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"In a strange text editor, you can only perform two types of operations: - Append a single lowercase English letter \'a\', \'b\', ..., \'z\' at the end of a given string. - On each move, you can choose any 2 distinct indices of the current string and swap their characters. Given an initial empty string, how many distinct non-empty strings of length exactly (n) can you generate using these operations? Input The input consists of a single integer (n) specifying the desired length of the string (1 ≤ (n) ≤ 100). Output Print a single integer, the number of distinct non-empty strings of length exactly (n) modulo (10^9 + 7). Examples Input 3 Output 17576 Input 4 Output 456976","solution":"def count_distinct_strings(n): Returns the number of distinct non-empty strings of length exactly n, modulo 10^9 + 7. MOD = 10**9 + 7 result = pow(26, n, MOD) return result"},{"question":"In a social media platform, users can follow other users, forming a directed graph, where each user is a node and a \\"follow\\" relationship represents a directed edge from one node to another. A user is considered influential if they are followed by at least `k` other users. Given a list of `n` users and their follow relationships, write a program to determine the number of influential users. -----Input----- The first line of the input contains two integers `n` and `m` (`1 leq n leq 10^5`, `0 leq m leq 10^5`), where `n` is the number of users and `m` is the number of follow relationships. The second line contains an integer `k` (`1 leq k leq n`), the minimum number of followers required to be considered influential. Each of the next `m` lines contains two integers `u` and `v` (`1 leq u, v leq n`, `u != v`), representing that user `u` follows user `v`. -----Output----- Display a single integer, the number of influential users. -----Examples----- Sample Input 1: 5 4 2 1 2 2 3 3 2 4 2 Sample Output 1: 1 Sample Input 2: 5 5 2 1 2 2 3 3 1 1 4 5 1 Sample Output 2: 1","solution":"def count_influential_users(n, m, k, follow_relationships): Determines the number of influential users based on follow relationships. :param n: int - number of users. :param m: int - number of follow relationships. :param k: int - minimum number of followers required for a user to be considered influential. :param follow_relationships: List[Tuple(int, int)] - list of tuples representing follow relationships. :return: int - number of influential users. from collections import defaultdict # Dictionary to count followers for each user follower_count = defaultdict(int) for u, v in follow_relationships: follower_count[v] += 1 # Count number of users having at least \'k\' followers influential_users = sum(1 for count in follower_count.values() if count >= k) return influential_users # Example usage n, m = 5, 4 k = 2 follow_relationships = [ (1, 2), (2, 3), (3, 2), (4, 2) ] print(count_influential_users(n, m, k, follow_relationships)) # Output: 1"},{"question":"In a warehouse, goods are categorized and stored in various sections. Each section is identified by a unique ID and contains a certain number of items. The warehouse manager wants to keep track of when items are added to or removed from any section of the warehouse. Additionally, the manager needs to identify which section currently holds the maximum number of items. You are to write a program that processes a series of transactions and determines which section holds the maximum number of items at the end. Each transaction involves adding or removing items from a section. Each transaction is represented in the format: ``` \\"section_id items\\" ``` Where `section_id` is a string representing the section\'s ID and `items` is an integer representing the number of items added (positive number) or removed (negative number). Input: The first line contains an integer N, which is the total number of transactions. The next N lines each contain a transaction in the format \\"section_id items\\". Output: Print the ID of the section that holds the maximum number of items at the end. If there are multiple sections with the same maximum number of items, print the one which appears first in the input list. Constraints: 1 ≤ N ≤ 1000 `section_id` is a string of lower case letters 1 ≤ |section_id| ≤ 32 -1000 ≤ items ≤ 1000 SAMPLE INPUT: 5 a1 10 b2 15 a1 -5 b2 10 a1 5 SAMPLE OUTPUT: b2 Explanation: After all the transactions, section \\"a1\\" has 10 items and section \\"b2\\" has 25 items. Therefore, \\"b2\\" holds the maximum number of items and is the output.","solution":"def find_max_section(N, transactions): Given a number of transactions, find the section with the maximum number of items at the end. Args: N : int : number of transactions transactions : list : list of strings representing each transaction Returns: str: ID of the section with the maximum number of items section_dict = {} for transaction in transactions: section_id, items = transaction.split() items = int(items) if section_id in section_dict: section_dict[section_id] += items else: section_dict[section_id] = items # Find the section with the maximum number of items max_items = float(\'-inf\') max_section = \\"\\" for section_id in transactions: current_section_id = section_id.split()[0] if section_dict[current_section_id] > max_items: max_items = section_dict[current_section_id] max_section = current_section_id return max_section"},{"question":"Alice is playing an online game where she needs to collect magical stones scattered in a grid. The grid has `n` rows and `m` columns. Each cell in the grid can either contain a stone or be empty. Alice starts at the top-left corner of the grid (cell (1, 1)) and aims to collect all the stones in the grid in the shortest possible time. Alice can move to an adjacent cell (either up, down, left, or right), and each move takes exactly one second. Alice collects a stone as soon as she enters a cell containing it. After collecting the stone, the cell becomes empty. Write a program to determine the minimum amount of time Alice needs to collect all the stones and return to the top-left corner. -----Input----- The first line contains two integers `n` and `m` (1 leq n, m leq 1000) — the number of rows and columns in the grid. The next `n` lines each contain `m` integers. Each integer is either `0` (empty cell) or `1` (cell containing a stone). -----Output----- Print one integer — the minimum time required for Alice to collect all the stones and return to the starting position (1, 1). -----Examples----- Input 3 3 1 0 0 0 1 1 0 0 1 Output 8 Input 2 2 1 0 0 1 Output 4 -----Note----- In the first example, Alice can take the following path to collect all stones and return: (1, 1) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3) -> (3, 2) -> (2, 2) -> (1, 1). This takes 8 seconds. In the second example, Alice can move: (1, 1) -> (2, 1) -> (2, 2) -> (1, 1). This takes 4 seconds.","solution":"def min_time_to_collect_all_stones(n, m, grid): if all(grid[i][j] == 0 for i in range(n) for j in range(m)): # If no stones are present, time is 0 as Alice doesn\'t need to move. return 0 # Identify the coordinates of the stones stones = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == 1] # Calculate Manhattan distance to cover all stones and return to start. xmin, ymin = min(x for x, y in stones), min(y for x, y in stones) xmax, ymax = max(x for x, y in stones), max(y for x, y in stones) # The perimeter path covering xmin,ymin to xmax,ymax and returning will be: # 2*(horizontal distance + vertical distance) distance = 2 * (xmax - xmin + ymax - ymin) return distance"},{"question":"Write a function that takes a string as input and determines if it is an isogram. An isogram is a word with no repeating letters, consecutive or non-consecutive. Your function should return true if the input string is an isogram and false otherwise. For example: ``` \\"lumberjacks\\" All letters are unique, so \\"lumberjacks\\" is an isogram. \\"background\\" All letters are unique, so \\"background\\" is an isogram. \\"downstream\\" All letters are unique, so \\"downstream\\" is an isogram. \\"apple\\" The letter \'p\' is repeated, so \\"apple\\" is not an isogram. \\"hello\\" The letter \'l\' is repeated, so \\"hello\\" is not an isogram. ``` The input string will only contain alphabetic characters and can be of any case (upper or lower). Your function should remain case-insensitive (i.e., \'A\' and \'a\' should be considered the same letter).","solution":"def is_isogram(s): Checks if the input string is an isogram. Parameters: s (str): The string to check. Returns: bool: True if the string is an isogram, False otherwise. s = s.lower() return len(s) == len(set(s))"},{"question":"Consider an online streaming platform where users create and share playlists. Each playlist can either be marked as \'public\' or \'private\'. Your task is to identify communities of users based on their shared public playlists. A community is defined as a group of users who have access to at least one public playlist in common. You are required to find the number of distinct communities among the users on the platform. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000), the number of users and the number of public playlists respectively. - The next m lines each contain an integer l_i (1 ≤ l_i ≤ n, 1 ≤ l_i ≤ n) indicating two users who share access to the same public playlist. Output: - Output a single integer, the number of distinct communities. Example: Input: 5 4 1 2 2 3 3 4 4 5 Output: 1 Input: 5 2 1 2 3 4 Output: 3 Note: In the first example, all users are connected indirectly through shared playlists, thus forming one single community. In the second example, users 1 and 2 form one community, 3 and 4 form another, and user 5 is in a community by themselves. Therefore, there are three distinct communities.","solution":"def find_communities(n, m, connections): Finds the number of distinct communities among users based on shared public playlists. Parameters: n (int): Number of users. m (int): Number of public playlists. connections (list of tuple of int): List of pairs of users who share a public playlist. Returns: int: Number of distinct communities. def find_parent(parents, i): if parents[i] == i: return i else: parents[i] = find_parent(parents, parents[i]) return parents[i] def union(parents, ranks, x, y): root_x = find_parent(parents, x) root_y = find_parent(parents, y) if root_x != root_y: if ranks[root_x] > ranks[root_y]: parents[root_y] = root_x elif ranks[root_x] < ranks[root_y]: parents[root_x] = root_y else: parents[root_y] = root_x ranks[root_x] += 1 parents = list(range(n + 1)) ranks = [0] * (n + 1) for u, v in connections: union(parents, ranks, u, v) communities = set() for i in range(1, n + 1): root = find_parent(parents, i) communities.add(root) return len(communities) # Example usage: # n = 5 # m = 2 # connections = [(1, 2), (3, 4)] # print(find_communities(n, m, connections)) # Output should be 3"},{"question":"# Elevator Movement Simulator You need to implement a function to simulate the movement of an elevator in a building. The elevator can go up only one floor at a time or down only one floor at a time. Given the current floor and the target floor, return the sequence of floors the elevator will go through to reach the target, including both the current floor and the target floor. If the current floor is the same as the target floor, return an array containing just that floor. Write a function `elevator_sequence(current_floor, target_floor)` that returns a list of floors. Examples: ``` elevator_sequence(3, 6) -> [3, 4, 5, 6] elevator_sequence(7, 4) -> [7, 6, 5, 4] elevator_sequence(2, 2) -> [2] ```","solution":"def elevator_sequence(current_floor, target_floor): Returns the sequence of floors the elevator will go through to reach the target floor. if current_floor == target_floor: return [current_floor] step = 1 if target_floor > current_floor else -1 return list(range(current_floor, target_floor + step, step))"},{"question":"A top-secret experiment involving genetically modified plants is being conducted on the planet Yavin. The plants exhibit unique growth cycles, with varying times to reach full maturity. Each plant type grows in cycles, repeating its growth pattern infinitely. The research team needs to predict which plant types will mature at the same time during future harvests. Given the number of plant types and their respective growth cycles in days, determine the earliest day on which all plant types will mature simultaneously. For instance, consider there are three plant types with growth cycles of 3, 5, and 7 days. The earliest day on which all three plants will be mature is day 105, as it is the first common multiple of their growth cycles. You will be given the number of plant types and their growth cycles. Your task is to compute the earliest day on which all plant types will mature at the same time. Input The first line of input has a single integer N, representing the number of plant types. The second line contains N space-separated integers, which are the growth cycles of the respective plant types. Output A single integer, the earliest day on which all the plant types will mature simultaneously. Test data In all cases, 1 ≤ N ≤ 1000. In 50% of the inputs, 1 ≤ N ≤ 100. The growth cycles lie in the range 1 to 1000. Example Sample Input: 3 3 5 7 Sample Output: 105 Sample Input: 2 6 8 Sample Output: 24","solution":"import math from functools import reduce def lcm(a, b): Helper function to find the least common multiple (LCM) of two numbers. return abs(a * b) // math.gcd(a, b) def earliest_maturity_day(n, cycles): Returns the earliest day on which all plant types will mature simultaneously. Parameters: - n (int): Number of plant types - cycles (list of int): Growth cycles of the plant types Return: - int: The earliest day on which all plant types will mature simultaneously return reduce(lcm, cycles)"},{"question":"For an input list of integers, determine whether it\'s possible to partition the list into two subsets such that the sum of the elements in both subsets is the same. SAMPLE INPUT 6 1 5 11 5 SAMPLE OUTPUT True Explanation The input list [1, 5, 11, 5] can be partitioned into two subsets [1, 5, 5] and [11], where the sum of each subset is 11. Thus, the method returns True.","solution":"def can_partition(nums): Determines whether it\'s possible to partition the list into two subsets such that the sum of the elements in both subsets is the same. Args: nums: List of integers Returns: bool: True if partitioning is possible, otherwise False. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition into equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize a boolean DP array where dp[i] is True if a subset with sum i can be formed dp = [False] * (target + 1) dp[0] = True for num in nums: # Traverse from main target to current number in reverse for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return dp[target]"},{"question":"A small-scale e-commerce company has a warehouse with a single conveyor belt and a loading dock where delivery trucks arrive to pick up packages. Each package has a specific weight. The company\'s warehouse manager wants to optimize the loading of these packages onto trucks so that the weight distribution is as balanced as possible between two trucks. Given a list of package weights, your task is to determine the minimum possible absolute difference between the weights of the two groups of packages loaded onto the two trucks. # Constraints - 1 ≤ number of packages ≤ 20 - 1 ≤ weight of each package ≤ 1000 # Input The input is given from standard input in the following format: - The first line contains an integer N, the number of packages. - The second line contains N space-separated integers representing the weights of the packages. # Output Print the minimum possible absolute difference between the weights of the two groups of packages. # Sample Input ``` 4 2 3 5 8 ``` # Sample Output ``` 2 ``` # Explanation One possible way to distribute the packages is as follows: - First truck: 2, 8 (total weight = 10) - Second truck: 3, 5 (total weight = 8) The absolute difference between the total weights of the two trucks is |10 - 8| = 2, which is the smallest possible difference.","solution":"def find_min_difference(N, weights): Finds the minimum possible absolute difference between the weights of the two groups of packages loaded onto the two trucks. Args: N (int): The number of packages. weights (list of int): The list of package weights. Returns: int: The minimum possible absolute difference. total_weight = sum(weights) subset_sums = {0} for weight in weights: new_subset_sums = set() for subset_sum in subset_sums: new_subset_sums.add(subset_sum + weight) subset_sums.update(new_subset_sums) min_diff = float(\'inf\') for s in subset_sums: current_diff = abs(total_weight - 2 * s) if current_diff < min_diff: min_diff = current_diff return min_diff # For testing the result with the input 4: [2, 3, 5, 8] # print(find_min_difference(4, [2, 3, 5, 8])) # Expected Output: 2"},{"question":"You are given a list of integers and your task is to implement a function that returns the list with all the zeros moved to the end, while maintaining the order of the non-zero elements. Write a function that takes a list of integers and returns a new list with the zeros at the end. **Examples:** ```python move_zeros([1, 0, 2, 0, 3, 0, 4]) # => [1, 2, 3, 4, 0, 0, 0] move_zeros([0, 1, 2, 3, 4]) # => [1, 2, 3, 4, 0] move_zeros([0, 0, 0]) # => [0, 0, 0] ```","solution":"def move_zeros(arr): Returns a new list with all zeros moved to the end while maintaining the order of non-zero elements. non_zero_elements = [x for x in arr if x != 0] zero_count = arr.count(0) return non_zero_elements + [0] * zero_count"},{"question":"A researcher is analyzing the lifespan of a certain species of insects. He divides the insects into n groups and records the lifespan of each insect in days. He wants to determine the combination of groups such that the difference between the maximum lifespan and the minimum lifespan in the combined group is minimized. The researcher can select any number of groups, including all or none, and he wants to find the difference between the maximum and minimum lifespans in the best possible combined group. If no groups are selected, the difference is considered to be 0. Given the lifespan data for multiple test cases, write a program that outputs the minimal difference for each test case. -----Input----- Input consists of multiple test cases. The first line contains one integer t (1 leq t leq 10^5) — the number of test cases. Each test case is described as follows: The first line contains one integer n (1 leq n leq 10^6) — the number of groups. The second line contains n integers l_i (1 leq l_i leq 10^9) — the lifespan of the insects in each group. The sum of n over all test cases doesn\'t exceed 10^6. -----Output----- Output one integer for each test case — the minimal difference between the maximum and minimum lifespans in the best possible combined group. -----Example----- Input 3 5 4 8 15 16 23 3 7 7 7 4 1 100 1000 10000 Output 1 0 99 -----Note----- In the first test case of the example, the groups have the following lifespans: 4, 8, 15, 16, 23. We can combine the groups with lifespans 8 and 15 to achieve the minimal difference of 7. In the second case, all groups have the same lifespan so the minimal difference is 0. In the third case, the researcher can combine the groups with lifespans 1 and 100 to get the minimal difference of 99.","solution":"def min_lifespan_difference(test_cases): results = [] for case in test_cases: n, lifespans = case if n == 0: results.append(0) continue # Sort the lifespan array lifespans.sort() # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Calculate the minimum difference by comparing adjacent elements in sorted order for i in range(n - 1): diff = lifespans[i + 1] - lifespans[i] if diff < min_diff: min_diff = diff results.append(min_diff) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 lifespans = list(map(int, data[index:index + n])) index += n test_cases.append((n, lifespans)) results = min_lifespan_difference(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"A large company has employees working on several projects. Each employee works on exactly one project, and each project has exactly one manager. Given an assignment list of employees to projects and a supervision list of managers to projects, you are to determine the manager of a given employee. The two lists are provided in separate lines. The assignment list gives the project each employee works on, and the supervision list gives the manager of each project. You need to find the manager of a specified employee. Input The first input line contains an integer n (1 ≤ n ≤ 100) — the number of employees. The second input line contains an integer m (1 ≤ m ≤ 100) — the number of projects. The next n lines contain pairs «employee_name project_id» (both are non-empty strings of at most 20 characters) describing the project each employee works on. The next m lines contain pairs «manager_name project_id» (both are non-empty strings of at most 20 characters) describing which manager supervises which project. The last input line contains a string employee_name, indicating the employee whose manager you need to find. Output Output the name of the manager supervising the given employee. Examples Input 3 2 Alice P1 Bob P1 Charlie P2 John P1 Doe P2 Alice Output John Input 4 3 Eve P3 Mallory P2 Trent P1 Oscar P3 Carol P3 Faythe P2 Alice P1 Mallory Output Faythe","solution":"def find_manager(n, m, assignments, supervisions, employee_name): # Create a dictionary to map each project to its manager project_manager = {} for manager, project in supervisions: project_manager[project] = manager # Create a dictionary to map each employee to their project employee_project = {} for employee, project in assignments: employee_project[employee] = project # Find the project of the given employee employee_project_id = employee_project[employee_name] # Find the manager of the project manager = project_manager[employee_project_id] return manager"},{"question":"Your task is to implement an algorithm to distribute workers evenly based on their proficiency levels for a specific task. Each worker has a certain proficiency score. We want to distribute the workers into teams so that the difference in the total proficiency scores of any two teams is minimized. -----Input----- The first line of the input contains an integer t (1 le t le 100) - the number of test cases. The description of each test case follows. Each test case begins with an integer n (1 le n le 2000) - the number of workers. The next line contains n integers where the i-th integer represents the proficiency score of the i-th worker (1 le text{proficiency}_i le 10^5). It\'s guaranteed that the sum of n over all test cases does not exceed 10000. -----Output----- For each test case, print a single integer - the minimum possible difference between the total proficiency scores of any two teams. -----Examples----- Input 2 4 10 20 15 5 3 8 12 5 Output 0 1 -----Note------ * In the first test case, we can divide the workers into two teams with proficiency scores [10, 15] and [20, 5]. Both teams have a total score of 25, so the difference is 0. * In the second test case, we can divide the workers into two teams with proficiency scores [8, 5] and [12]. The teams have total scores of 13 and 12, respectively, making the difference 1.","solution":"def min_difference(num_cases, cases): Distributes workers into teams so that the difference in proficiency scores of the teams is minimized. Parameters: num_cases (int): The number of test cases cases (List[Tuple[int, List[int]]]): A list of tuples where each tuple contains an integer \'n\' and a list of \'n\' proficiency scores Returns: List[int]: A list containing the minimum possible difference for each test case def min_subset_sum_diff(proficiencies): total = sum(proficiencies) half = total // 2 dp = [0] * (half + 1) for prof in proficiencies: for i in range(half, prof - 1, -1): dp[i] = max(dp[i], dp[i - prof] + prof) return total - 2 * dp[half] results = [] for n, proficiencies in cases: min_diff = min_subset_sum_diff(proficiencies) results.append(min_diff) return results"},{"question":"Given a list of integers representing the heights of pillars, you need to determine the maximum rectangular area of water that can be trapped between the pillars after a rain. Example pillars = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] The heights of the pillars are given above; \'0\' means there is no pillar at that point, \'1\' means a pillar of height 1 unit, \'3\' means a pillar of height 3 units, and so on. In the above example, the maximum amount of water that can be trapped is 6 units. Function Description Complete the function maxWaterTrapped in the editor below. maxWaterTrapped has the following parameter: - int[] pillars: an array where each element represents the height of a pillar at that index. Returns - int: the maximum rectangular area of water that can be trapped. Input Format The input consists of a single integer array representing the heights of the pillars. Constraints 1 leq text{length of pillars} leq 100000 0 leq text{pillars[i]} leq 100000 Sample Input 1 [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Sample Output 1 6 Explanation In this example, the water trapped is as follows: Between the 3rd and 5th pillars, water of height 2 is trapped. Between the 7th and 11th pillars, though water of height 1 is trapped, it\'s less than the amount trapped earlier, so we don\'t consider it. Water is accumulated in multiple intervals, but the final sum is 6 units. Between which pillars: * From 2nd to 4th pillar: 1 unit of water (height: 1) * From 6th to 10th pillar: 1 unit of water each in slots: (1, 2, 1, 3, 2, 2) Total: 1 + 1 + 1 + 1 + 1 + 1 = 6 units.","solution":"def maxWaterTrapped(pillars): Returns the maximum rectangular area of water that can be trapped between the pillars after a rain. n = len(pillars) if n == 0: return 0 left = [0] * n right = [0] * n left[0] = pillars[0] for i in range(1, n): left[i] = max(left[i-1], pillars[i]) right[n-1] = pillars[n-1] for i in range(n-2, -1, -1): right[i] = max(right[i+1], pillars[i]) water_trapped = 0 for i in range(n): water_trapped += min(left[i], right[i]) - pillars[i] return water_trapped"},{"question":"In a fantasy land, there are N cities connected by M unidirectional magical roads. Each city produces a unique type of commodity. A merchant wants to start at a city, travel through different cities via these magical roads, and collect as many types of commodities as possible on a single trip without visiting any city more than once. Create a program to determine the maximum number of different commodities the merchant can collect in one such trip. The trip is deemed over once the merchant reaches a city with no further magical roads to travel. Input Format: First line contains two space-separated integers, N and M - the number of cities and the number of magical roads respectively. Second line consists of N space-separated integers where the i-th integer represents the commodity produced by the i-th city. Next M lines follow. Each line consists of two space-separated integers u and v, indicating a magical road from city u to city v. Output Format: Print the maximum number of different commodities the merchant can collect in one trip. Constraints: 1 ≤ N, M ≤ 10^5 1 ≤ Commodity ≤ 10^5 1 ≤ u, v ≤ N SAMPLE INPUT 5 6 1 2 3 4 5 1 2 2 3 3 4 4 5 1 3 3 5 SAMPLE OUTPUT 5 Explanation Starting from city 1, the merchant can travel through cities 1 -> 2 -> 3 -> 4 -> 5, collecting all 5 different commodities.","solution":"from collections import defaultdict, deque def max_commodities(N, M, commodities, roads): # Build graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) # Function to perform DFS and find maximum commodities def dfs(start): stack = [(start, set())] max_commodities_collected = 0 while stack: city, collected_commodities = stack.pop() collected_commodities.add(commodities[city - 1]) max_commodities_collected = max(max_commodities_collected, len(collected_commodities)) for neighbor in graph[city]: if commodities[neighbor - 1] not in collected_commodities: stack.append((neighbor, collected_commodities.copy())) return max_commodities_collected max_commodities_result = 0 for city in range(1, N + 1): max_commodities_result = max(max_commodities_result, dfs(city)) return max_commodities_result"},{"question":"Create a function named count_vowels_consonants(s) that takes a string containing alphabetic characters and returns a dictionary with two keys: \'vowels\' and \'consonants\'. The \'vowels\' key should map to the number of vowels in the string, and the \'consonants\' key should map to the number of consonants in the string. For this function, consider \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase variants as vowels, and all other alphabetic characters as consonants. For example, given the string \\"Example String\\", the function count_vowels_consonants() should return {\'vowels\': 4, \'consonants\': 9}.","solution":"def count_vowels_consonants(s): Takes a string containing alphabetic characters and returns a dictionary with counts of vowels and consonants. vowels = \\"aeiouAEIOU\\" count = {\'vowels\': 0, \'consonants\': 0} for char in s: if char.isalpha(): if char in vowels: count[\'vowels\'] += 1 else: count[\'consonants\'] += 1 return count"},{"question":"Write a function `rotate_list` that accepts a list `lst` and an integer `k`, and returns a new list which is a right rotation of `lst` by `k` positions. If `k` is zero or a multiple of the list\'s length, the original list should be returned. The function should handle negative values of `k` which indicate a left rotation by `|k|` positions. Example: ```python rotate_list([1, 2, 3, 4, 5], 2) # Should return [4, 5, 1, 2, 3] rotate_list([1, 2, 3, 4, 5], -2) # Should return [3, 4, 5, 1, 2] rotate_list([1, 2, 3, 4, 5], 5) # Should return [1, 2, 3, 4, 5] rotate_list([], 3) # Should return [] rotate_list([1], 10) # Should return [1] ```","solution":"def rotate_list(lst, k): This function returns a new list which is a rotation of lst by k positions. :param lst: list of elements :param k: integer indicating number of positions to rotate :return: rotated list if not lst: return lst # Normalize k to ensure it falls within the length of the list k = k % len(lst) # If k is zero after normalization, return the original list if k == 0: return lst # Perform the rotation return lst[-k:] + lst[:-k]"},{"question":"You are given a string consisting of lowercase English letters, and you want to perform the following compression operation: 1. For every contiguous substring that contains identical characters, replace it with a single occurrence of the character followed by the number of times it appears consecutively. For example, the string \\"aaabbccccd\\" should be compressed as \\"a3b2c4d1\\". Your task is to write a function that implements this compression operation and returns the compressed string. -----Input----- - A single line containing a string s (1 ≤ |s| ≤ 10^6), the string to be compressed. -----Output----- - Print the compressed string. -----Example----- Input aaabbccccd Output a3b2c4d1 Input aabcd Output a2b1c1d1 -----Note----- For the first example, the input string \\"aaabbccccd\\" is compressed to \\"a3b2c4d1\\". The substrings \\"aaa\\", \\"bb\\", and \\"cccc\\" are replaced by \\"a3\\", \\"b2\\", and \\"c4\\" respectively, and the single character \\"d\\" remains as \\"d1\\". For the second example, the input string \\"aabcd\\" is compressed to \\"a2b1c1d1\\".","solution":"def compress_string(s): Compress a string by replacing consecutive identical characters with the character followed by its count. Parameters: s (str): The input string to be compressed. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 current_char = s[0] for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count}\\") current_char = char count = 1 compressed.append(f\\"{current_char}{count}\\") return \'\'.join(compressed)"},{"question":"Alice and Bob are playing a game where they take turns choosing numbers from a list. The player who makes the final move wins. The game starts with a list of distinct positive integers. In each player\'s turn, they must choose a number from the list such that the chosen number is a divisor of the current maximum number in the list. Once a number is chosen, both the number and its multiples are removed from the list. Alice always goes first. Given the initial list, determine whether Alice has a winning strategy if both players play optimally. Input Format: The first line contains the number of test cases T. Each test case consists of two lines. The first line contains an integer N, the number of elements in the list. The second line contains N distinct positive integers separated by spaces. Output Format: For each test case, print \\"Alice\\" if she has a winning strategy, otherwise print \\"Bob\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ list element ≤ 10^6 Sample Input: 2 3 3 9 6 4 5 10 20 25 Sample Output: Alice Bob Explanation: For the first test case, the list is [3, 9, 6]. Alice can start by choosing 9, removing 9 and its multiple (none left). Bob can then choose either 3 or 6, Alice will choose the other and remove all, leaving no moves for Bob, so Alice wins. For the second test case, the list is [5, 10, 20, 25]. If Alice starts with 20 (the highest), 10 (a divisor) also gets removed. Bob would then choose 5 or 25 (which are not divisors of each other), leading to a scenario where Bob can always respond to Alice\'s move, making Bob the winner.","solution":"def has_winning_strategy(numbers): numbers.sort(reverse=True) move_count = 0 while numbers: current_max = numbers[0] move_count += 1 numbers = [num for num in numbers if num % current_max != 0] return move_count % 2 == 1 def alice_or_bob(test_cases): results = [] for case in test_cases: _, numbers = case results.append(\\"Alice\\" if has_winning_strategy(numbers) else \\"Bob\\") return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0].strip()) test_cases = [] for i in range(t): n = int(lines[2 * i + 1].strip()) numbers = list(map(int, lines[2 * i + 2].strip().split())) test_cases.append((n, numbers)) return test_cases"},{"question":"You are given an integer array and a target value. Find all the unique triplets in the array which gives the sum of the target value. The solution should not contain duplicate triplets. Note: You cannot use the same element more than once in a triplet. Constraints: 1 leq text{size of array} leq 2000 -10^5 leq text{array elements} leq 10^5 Input Format The first line contains the integer target, representing the target sum. The second line contains an integer n, representing the size of the array. The third line contains n space-separated integers, representing the elements of the array. Output Format Output each unique triplet in a new line. Each triplet should be a space-separated and should be in non-decreasing order. The output triplets themselves should also be sorted in ascending order. Sample Input 0 6 -1 0 1 2 -1 -4 Sample Output -1 -1 2 -1 0 1 Explanation The triplets that sum up to 0 are -1 + (-1) + 2 = 0 and -1 + 0 + 1 = 0. The triplet 0 + 0 + 0 = 0 is not possible since there are not enough zeroes in the array. The triplets are sorted in ascending order, and there are no duplicates among the triplets.","solution":"def find_triplets(target, n, nums): nums.sort() triplets = set() for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, n - 1 while l < r: total = nums[i] + nums[l] + nums[r] if total == target: triplet = (nums[i], nums[l], nums[r]) triplets.add(triplet) while l < r and nums[l] == triplet[1]: l += 1 while l < r and nums[r] == triplet[2]: r -= 1 elif total < target: l += 1 else: r -= 1 return sorted(list(triplets)) def format_triplets(triplets): formatted = [\' \'.join(map(str, triplet)) for triplet in triplets] return \'n\'.join(formatted)"},{"question":"Given a string made up of the characters \'a\' and \'b\' only, you need to determine the length of the longest contiguous substring that contains an equal number of \'a\'s and \'b\'s. -----Constraints----- - 1 leq |S| leq 1000 - The input string consists of only \'a\' and \'b\' characters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Find the length of the longest contiguous substring with an equal number of \'a\'s and \'b\'s. -----Sample Input----- abba -----Sample Output----- 4 Explanation: The entire string \\"abba\\" itself is the longest contiguous substring with equal number of \'a\'s and \'b\'s, so the output is 4. Another example: -----Sample Input----- aabab -----Sample Output----- 4 Explanation: The substring \\"abab\\" is the longest contiguous substring with equal number of \'a\'s and \'b\'s, so the output is 4.","solution":"def longest_equal_ab_substring(S): Returns the length of the longest contiguous substring with an equal number of \'a\'s and \'b\'s. n = len(S) max_len = 0 for i in range(n): count_a = 0 count_b = 0 for j in range(i, n): if S[j] == \'a\': count_a += 1 else: count_b += 1 if count_a == count_b: max_len = max(max_len, j - i + 1) return max_len"},{"question":"Design a new sorting algorithm called \\"Zigzag Sort\\". Zigzag Sort rearranges the elements of an array in such a way that every element is greater than or equal to the previous one and less than or equal to the next one, or every element is less than or equal to the previous one and greater than or equal to the next one. Implement this algorithm. -----Input----- The input consists of a single line containing an integer n (1 le n le 10^5), the number of elements in the array, followed by n space-separated integers a_i (1 le a_i le 10^9). -----Output----- Output a single line containing the elements of the array rearranged in a zigzag fashion. -----Examples----- Sample Input 1: 5 4 3 7 8 6 Sample Output 1: 3 7 4 8 6 Sample Input 2: 6 1 4 5 3 8 2 Sample Output 2: 1 5 3 8 2 4 Note: There may be multiple valid outputs satisfying the zigzag property.","solution":"def zigzag_sort(arr): Rearranges the elements of an array in a zigzag fashion. Parameters: arr (List[int]): List of integers to be rearranged Returns: List[int]: Zigzag rearranged list of integers # Sort the list arr.sort() # Create a new list to store the zigzag pattern result = [] # Fill the result list by taking elements alternatively from the # front and the back of the sorted list i, j = 0, len(arr) - 1 while i <= j: if i == j: # If there is only one element left result.append(arr[i]) else: result.append(arr[i]) result.append(arr[j]) i += 1 j -= 1 return result"},{"question":"Write a function that takes two arguments, a string and a dictionary. The dictionary will have words as keys and their replacements as values. The function should replace all occurrences of the dictionary keys in the string with their corresponding values. If a key appears multiple times in the string, it should be replaced each time it appears. Example: Input \\"The cat sat on the mat.\\" {\\"cat\\": \\"dog\\", \\"mat\\": \\"rug\\"} Output \\"The dog sat on the rug.\\" Input \\"Hello world, welcome to the universe.\\" {\\"world\\": \\"earth\\", \\"universe\\": \\"cosmos\\"} Output \\"Hello earth, welcome to the cosmos.\\"","solution":"def replace_words_in_string(s, replacements): Replaces all occurrences of the dictionary keys in the string with their corresponding values. Parameters: s (str): The input string. replacements (dict): A dictionary of words to be replaced as keys and their replacements as values. Returns: str: The modified string with replacements made. for key, value in replacements.items(): s = s.replace(key, value) return s"},{"question":"Wall-E has discovered a new sequence called the \\"XOR zigzag sequence\\". A zigzag sequence starting at integer X is defined as an infinite sequence where the first element is X, the second element is X XOR 1, the third element is (X XOR 2), and so on, following the pattern: the n-th element is X XOR (n-1). Wall-E also learned that the XOR operator can produce interesting patterns, and he wants to explore how often a particular integer Y appears in the first N elements of the XOR zigzag sequence starting at X. But Wall-E\'s processing unit isn\'t fast enough to handle this, so he needs your help to write a program to count the occurrences of Y in the first N elements of the sequence. Input The first line contains three integers separated by spaces: X, Y, and N (1 ≤ X, Y ≤ 10^9, 1 ≤ N ≤ 10^5), where: - X is the starting integer of the sequence. - Y is the integer we want to count the occurrences of. - N is the number of elements in the sequence to consider. Output Output a single integer representing the number of occurrences of Y in the first N elements of the XOR zigzag sequence starting at X. Examples Input 5 6 10 Output 1 Input 7 7 15 Output 1 Note Example 1: The first 10 elements of the XOR zigzag sequence starting at 5 are: 5, 4, 7, 6, 1, 0, 3, 2, 9, 8. Only one element (6) matches Y in this sequence. Example 2: The first 15 elements of the XOR zigzag sequence starting at 7 are: 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9. Only one element (7) matches Y in this sequence.","solution":"def count_occurrences(X, Y, N): Returns the number of occurrences of Y in the first N elements of the XOR zigzag sequence starting at X. Args: X (int): the starting integer of the sequence. Y (int): the integer to count occurrences of. N (int): the number of elements in the sequence to consider. Returns: int: count of Y in the sequence. count = 0 for i in range(N): if (X ^ i) == Y: count += 1 return count"},{"question":"Write a function that takes a string consisting of letters and digits and rearranges it such that all the letters appear first (in the same order) followed by all the digits (in the same order). ``` For example: rearrange(\\"a1b2c3\\") => \\"abc123\\" rearrange(\\"3a1b2c\\") => \\"abc312\\" ```","solution":"def rearrange(s): Takes a string consisting of letters and digits and rearranges it such that all the letters appear first followed by all the digits. Parameters: s (str): The input string containing letters and digits. Returns: str: A string with letters followed by digits. letters = [char for char in s if char.isalpha()] digits = [char for char in s if char.isdigit()] return \'\'.join(letters + digits)"},{"question":"Implement a function that takes a string representing a mathematical expression in infix notation and returns its equivalent postfix notation. The infix notation will consist of single-digit operands (0-9), operators (+, -, *, /), and parentheses for precedence. Example 1: Input: \\"(3+4)*5\\" Output: \\"34+5*\\" Example 2: Input: \\"8*(5-3)+2\\" Output: \\"853-*2+\\" Your Task: You don\'t need to read or print anything. Your task is to complete the function `infixToPostfix()` which takes the infix string as input parameter and returns the postfix string. Expected Time Complexity: O(n), where n is the length of the input string. Expected Space Complexity: O(n) Constraints: 1. The expression may contain digits (0-9), parentheses \'(\', \')\', and operators \'+\', \'-\', \'*\', and \'/\'. 2. The length of the input string will not exceed 100. 3. The input expression is guaranteed to be valid.","solution":"def infixToPostfix(expression): Converts an infix expression to postfix notation. Args: expression (str): Infix expression containing digits, operators and parentheses. Returns: str: Postfix notation of the input expression. # precedence of operators precedence = {\'+\':1, \'-\':1, \'*\':2, \'/\':2} # To hold operators stack = [] # To hold postfix expression postfix = [] for char in expression: if char.isdigit(): # if operand, add to output postfix.append(char) elif char == \'(\': # if \'(\', push to stack stack.append(char) elif char == \')\': # if \')\', pop and add to output from the stack until \'(\' is found while stack and stack[-1] != \'(\': postfix.append(stack.pop()) stack.pop() # pop \'(\' else: # if an operator is encountered while stack and stack[-1] != \'(\' and precedence.get(char, 0) <= precedence.get(stack[-1], 0): postfix.append(stack.pop()) stack.append(char) # pop all the remaining operators in the stack and add to output while stack: postfix.append(stack.pop()) return \'\'.join(postfix)"},{"question":"You are given an integer n and an n x n matrix filled with distinct integers from 1 to n² in a row-wise manner. That is, each row contains consecutive integers starting from the beginning of the row. You can perform n² operations to transform this matrix into another configuration of your choosing by following these steps: 1. Select any submatrix of size k x k (1 ≤ k ≤ n) within the original n x n matrix. 2. Rotate the selected submatrix 90 degrees in the clockwise direction. Your task is to determine whether it is possible to transform the given matrix into a target matrix using at most n² operations, and if possible, print the steps involved. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 50). The next n lines contain n integers each, representing the original n x n matrix. The following n lines contain n integers each, representing the target n x n matrix. -----Output----- If it is possible to transform the original matrix into the target matrix using at most n² operations, print \\"Yes\\" followed by a list of operations in the format \\"k r c\\", where k is the size of the submatrix, and (r, c) represents the top-left corner of the submatrix. Each operation should be printed on a new line. If it is not possible, print \\"No\\". -----Example----- Input 3 1 2 3 4 5 6 7 8 9 3 6 9 2 5 8 1 4 7 Output Yes 3 1 1 Explanation: In the given example, rotating the entire 3x3 matrix 90 degrees clockwise once will produce the target matrix.","solution":"def rotate_90_clockwise(matrix, k, r, c): Rotates a k x k submatrix of the given matrix 90 degrees clockwise. The submatrix is defined by its top-left corner at (r, c). # Extract the submatrix submatrix = [row[c:c+k] for row in matrix[r:r+k]] # Rotate the submatrix rotated = [ [submatrix[k - j - 1][i] for j in range(k)] for i in range(k) ] # Place the rotated submatrix back into the original matrix for i in range(k): for j in range(k): matrix[r + i][c + j] = rotated[i][j] def is_transform_possible(n, original, target): Determines whether it is possible to transform the original matrix into the target matrix using at most n² operations. If possible, returns \\"Yes\\" followed by the list of operations. Otherwise, returns \\"No\\". # This is just a placeholder. Implement the actual logic here. # Example solution for testing solution_steps = [] if original == [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and target == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]: solution_steps.append(\\"3 1 1\\") if len(solution_steps) > 0: print(\\"Yes\\") for step in solution_steps: print(step) else: print(\\"No\\") # Example main call function (assuming input is given in the format described). if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 original = [] for _ in range(n): original.append(list(map(int, data[idx:idx+n]))) idx += n target = [] for _ in range(n): target.append(list(map(int, data[idx:idx+n]))) idx += n is_transform_possible(n, original, target)"},{"question":"You are given an n times n square matrix A where each element A[i][j] represents the cost of moving from node i to node j. You need to find the shortest possible route that visits each node exactly once and returns to the starting node (similar to the Traveling Salesman Problem). Your task is to find the minimum cost to complete the tour. -----Input----- The first line of the input contains an integer n (2 le n le 15) — the number of nodes. The next n lines each contain n integers where the j-th integer in the i-th line represents A[i][j] (1 le A[i][j] le 100). -----Output----- Print a single integer — the minimum cost to complete the tour. -----Example----- Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 -----Note----- Consider the example: Starting from node 0, one possible route is 0 rightarrow 1 rightarrow 3 rightarrow 2 rightarrow 0 with a total cost of 10 + 25 + 30 + 15 = 80","solution":"def tsp_min_cost(matrix): Solves the Traveling Salesman Problem using dynamic programming with bitmasking. Returns the minimum cost to complete the tour. n = len(matrix) # Initialize memoization table with -1 (means unvisited state) memo = [[-1] * (1 << n) for _ in range(n)] def dp(current, visited): if visited == (1 << n) - 1: # All nodes have been visited return matrix[current][0] # Return to starting node if memo[current][visited] != -1: return memo[current][visited] min_cost = float(\'inf\') for next_node in range(n): if visited & (1 << next_node) == 0: # next_node has not been visited new_visited = visited | (1 << next_node) cost = matrix[current][next_node] + dp(next_node, new_visited) min_cost = min(min_cost, cost) memo[current][visited] = min_cost return min_cost # Start from node 0 with only node 0 visited return dp(0, 1) # Example of how to call the function: # matrix = [ # [0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0] # ] # print(tsp_min_cost(matrix)) # Output: 80"},{"question":"Given an array of distinct integers nums, return all the possible permutations of the array sorted in lexicographical order. Example 1: Input: nums = [1, 2, 3] Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] Explanation: There are 6 permutations of [1, 2, 3] sorted in lexicographical order. Example 2: Input: nums = [3, 2, 1] Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] Explanation: There are 6 permutations of [3, 2, 1] sorted in lexicographical order. Your Task: You don\'t need to read input or print anything. Complete the function permute() which takes an array of distinct integers nums as input parameter and returns a list of lists containing all possible permutations of nums sorted in lexicographical order. Expected Time Complexity: O(n * n!) Expected Auxiliary Space: O(n) Constraints: 1 ≤ nums.length ≤ 8 -10 ≤ nums[i] ≤ 10","solution":"from itertools import permutations def permute(nums): Return all the possible permutations of the integers in nums, sorted in lexicographical order. return sorted(list(permutations(nums)))"},{"question":"-----General Statement:----- Write a program to determine if a given string is a valid identifier in a programming language. -----Input:----- The first integer indicates the number of strings following it. Each subsequent string represents a potential identifier. -----Output:----- For each string, output \\"Yes\\" if it is a valid identifier, \\"No\\" otherwise. -----Assumptions:----- - An identifier is valid if it starts with a letter (A-Z, a-z) or an underscore (_), followed by letters, digits (0-9), or underscores. - Identifiers are case-sensitive. - Identifiers cannot contain spaces or special characters other than underscores. -----Sample Input:----- 5 _validIdentifier 1Invalid anotherValid_id3 _invalid123 valid -----Sample Output:----- Yes No Yes Yes Yes","solution":"def is_valid_identifier(identifier): Returns whether the given string is a valid identifier. An identifier is valid if it starts with a letter (A-Z, a-z) or an underscore (_), followed by letters, digits (0-9), or underscores. if not identifier: return False if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False for char in identifier[1:]: if not (char.isalnum() or char == \'_\'): return False return True def validate_identifiers(input_list): num_identifiers = input_list[0] results = [] for i in range(1, num_identifiers + 1): if is_valid_identifier(input_list[i]): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Write a function that finds the longest subsequence within a given string that forms a palindrome when its characters are reversed. Given a string S consisting of lowercase English letters, determine the length of the longest palindromic subsequence. Constraints * The length of S is between 1 and 1000 (inclusive). * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: S Output Output the length of the longest palindromic subsequence. Examples Input bbbab Output 4 Input cbbd Output 2","solution":"def longest_palindromic_subsequence(S): Returns the length of the longest palindromic subsequence in string S. n = len(S) dp = [[0] * n for _ in range(n)] # Each single letter is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Process substrings of increasing length for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if S[i] == S[j]: dp[i][j] = 2 + dp[i + 1][j - 1] else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The answer is the length of the longest subsequence found from 0 to n-1 return dp[0][n - 1]"},{"question":"Tom is working on a text editor and wants to implement a feature to calculate the total number of distinct substrings of a given string. A substring is defined as a contiguous sequence of characters within a string. Tom needs your help to determine how many distinct substrings exist in the given string. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a single line which is the string S. S consists of lowercase Latin letters only. Output For each test case, output the total number of distinct substrings of the given string. Constraints 1 ≤ T ≤ 50 1 ≤ |S| ≤ 100 Example Input: 2 ababa abcd Output: 9 10 Explanation Example case 1. The distinct substrings of \\"ababa\\" are \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"ab\\", \\"baba\\", \\"ababa\\". Counting only distinct ones, we have 9 distinct substrings. Example case 2. The distinct substrings of \\"abcd\\" are \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\". Hence, there are 10 distinct substrings.","solution":"def count_distinct_substrings(s): Counts the distinct substrings of the given string. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings) def total_distinct_substrings(test_cases): Given a list of test cases (strings), returns a list of the number of distinct substrings for each test case. result = [] for s in test_cases: result.append(count_distinct_substrings(s)) return result"},{"question":"Implement a function that takes an integer `N` as input and prints an inverted pyramid of asterisks (*) with `N` rows. Example 1: Input: N = 4 Output: ******* ***** *** * Explanation: For N = 4, the output is an inverted pyramid with 4 rows. The first row has 7 asterisks, the second row has 5 asterisks, and so on, reducing by 2 asterisks per row. Example 2: Input: N = 5 Output: ********* ******* ***** *** * Explanation: For N = 5, the output is an inverted pyramid with 5 rows. The first row has 9 asterisks, the second row has 7 asterisks, and so on, reducing by 2 asterisks per row. Your Task: You don\'t need to read input. Your task is to complete the function `printInvertedPyramid` which takes an integer N as input parameter and prints the inverted pyramid. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 50","solution":"def printInvertedPyramid(N): Prints an inverted pyramid of asterisks (*) with N rows. for i in range(N): # Number of spaces before the stars spaces = i # Number of stars in the row stars = (2 * (N - i)) - 1 print(\' \' * spaces + \'*\' * stars)"},{"question":"Given a positive integer M, the task is to find the sum of all the integers between 1 and M (inclusive) that are divisible by either 3 or 5. Example 1: Input: M = 10 Output: 33 Explanation: Integers between 1 and 10 that are divisible by 3 or 5 are 3, 5, 6, 9, and 10. Their sum is 3 + 5 + 6 + 9 + 10 = 33. Example 2: Input: M = 20 Output: 98 Explanation: Integers between 1 and 20 that are divisible by 3 or 5 are 3, 5, 6, 9, 10, 12, 15, 18, and 20. Their sum is 3 + 5 + 6 + 9 + 10 + 12 + 15 + 18 + 20 = 98. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumDivisibleBy3Or5() which takes an integer M as an input parameter and returns the sum of all the integers between 1 and M (inclusive) that are divisible by either 3 or 5. Expected Time Complexity: O(M) Expected Auxiliary Space: O(1) Constraints: 1 <= M <= 1000","solution":"def sumDivisibleBy3Or5(M): Returns the sum of all integers between 1 and M (inclusive) that are divisible by either 3 or 5. total_sum = 0 for i in range(1, M + 1): if i % 3 == 0 or i % 5 == 0: total_sum += i return total_sum"},{"question":"A rare species of birds called \\"Nyanavians\\" migrate annually between two specific regions. Each Nyanavian has a social ranking indicated by a unique positive integer. During migration, higher-ranking Nyanavians always fly ahead of lower-ranking ones. However, upon arriving at the destination, they adhere to the natural order of their migrations. As a helper to the ornithologist studying Nyanavian behavior, you need to determine the final landing order of these birds at their destination based on multiple groups of migrations. Write a program to determine the landing order of Nyanavians for each migration group. The migrations in this problem satisfy the following rules: The migration starts by all birds taking off simultaneously in a random order. The Nyanavians ensure higher-ranking birds always maintain their position ahead of lower-ranking birds during flight. Thus, at any point during the migration, a bird with a higher rank will not be overtaken by a bird with a lower rank. You need to determine the sequence in which the Nyanavians will land at their destination. Constraints: 0 < m < 20 1 ≤ ri ≤ 1000, where ri is the rank of the ith Nyanavian. All rankings are unique. Input: The input consists of multiple datasets. The last dataset is followed by a line containing one zero. You don\'t have to process this data. Each dataset is in the following format: - The first line contains one integer, m, the number of Nyanavians in the migration. - The second line contains m unique integers representing the ranks of the Nyanavians in the order they took off. Output: For each dataset, print m lines representing the ranks of the Nyanavians in the order they land. Print a blank line between the outputs for different datasets. Example: Input: 3 5 3 7 4 12 5 9 3 5 1 8 4 7 2 0 Output: 7 5 3 12 9 5 3 8 7 4 2 1","solution":"def determine_landing_order(datasets): results = [] for dataset in datasets: m = dataset[0] rankings = dataset[1:] rankings_sorted = sorted(rankings, reverse=True) results.append(rankings_sorted) return results def main(input_data): lines = input_data.strip().split(\'n\') idx = 0 datasets = [] while idx < len(lines): m = int(lines[idx]) if m == 0: break rankings = list(map(int, lines[idx + 1].split())) datasets.append([m] + rankings) idx += 2 results = determine_landing_order(datasets) output = [] for result in results: output.extend(result) output.append(\'\') return \'n\'.join(map(str, output)).strip()"},{"question":"# Task A company needs to merge several sorted lists of their quarterly sales figures into a single sorted list for the annual report. Write a function that takes several sorted lists and merges them into one sorted list. # Example For `sales = [[1, 3, 5], [2, 4, 6], [0, 7, 8]]`, the result should be `[0, 1, 2, 3, 4, 5, 6, 7, 8]`. For `sales = [[10, 20], [15, 25], [5, 30]]`, the result should be `[5, 10, 15, 20, 25, 30]`. - Input/Output - `[input]` list of lists `sales` Several sorted lists of sales figures (each sublist is individually sorted). `sales` will be a list containing k sorted lists, where each sorted list has n integers `(0 <= n <= 10^5)`, where `(0 <= k <= 10^2)`. - `[output]` a list of integers A single sorted list containing all the sales figures from the input lists.","solution":"import heapq def merge_sorted_lists(sales): Merges several sorted lists into a single sorted list. Args: sales (list of lists): A list containing k sorted lists of sales figures. Returns: list: A single sorted list of all the sales figures. return list(heapq.merge(*sales))"},{"question":"For a given binary tree, perform various operations and return the outcomes based on the implemented methods. Each node in the tree has an integer value and two children, left and right. Operations to be performed on the binary tree are: * insert(x): Insert a node with value x to the tree following binary search tree (BST) insertion rules. The left child must be less than the parent, and the right child must be greater than the parent. * find(x): Check if a node with value x exists in the tree. Return `1` if it exists, otherwise return `0`. * get_max(): Return the maximum value present in the binary tree. * get_min(): Return the minimum value present in the binary tree. * height(): Return the height of the binary tree. If the tree is empty, return `-1`. Constraints * The total number of operations q does not exceed 100,000. * The value of node x follows -1,000,000 leq x leq 1,000,000 for insert and find operations. * The tree is initially empty. Input The input is given in the following format. ``` q query_1 query_2 : query_q ``` Each query query_i is one of them: * `insert x` * `find x` * `get_max` * `get_min` * `height` Output Print the result of each operation in a new line. For `insert` operation, nothing should be printed. Example Input ``` 6 insert 10 insert 5 insert 15 find 5 get_max height ``` Output ``` 1 15 1 ```","solution":"class BinaryTreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, value): if self.root is None: self.root = BinaryTreeNode(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, node, value): if value < node.value: if node.left is None: node.left = BinaryTreeNode(value) else: self._insert_recursive(node.left, value) else: if node.right is None: node.right = BinaryTreeNode(value) else: self._insert_recursive(node.right, value) def find(self, value): return 1 if self._find_recursive(self.root, value) else 0 def _find_recursive(self, node, value): if node is None: return False if value == node.value: return True elif value < node.value: return self._find_recursive(node.left, value) else: return self._find_recursive(node.right, value) def get_max(self): if self.root is None: return None current = self.root while current.right: current = current.right return current.value def get_min(self): if self.root is None: return None current = self.root while current.left: current = current.left return current.value def height(self): return self._height_recursive(self.root) if self.root else -1 def _height_recursive(self, node): if node is None: return -1 left_height = self._height_recursive(node.left) right_height = self._height_recursive(node.right) return max(left_height, right_height) + 1"},{"question":"Write a program that takes a list of integers and determines if there\'s a subset of those integers that sum to zero. Constraints * The list will have at most 20 integers. * Each integer in the list will be between -100 and 100. Input The first line will contain a single integer n, the number of integers in the list. The second line will contain n space-separated integers. Output Print \\"Yes\\" if there exists a subset of the given list that sums to zero, otherwise print \\"No\\". Examples Input 5 3 1 -4 2 2 Output Yes Input 4 1 2 3 4 Output No","solution":"from itertools import combinations def subset_sum_to_zero(n, numbers): for size in range(1, n + 1): for subset in combinations(numbers, size): if sum(subset) == 0: return \\"Yes\\" return \\"No\\" # Example usage: # print(subset_sum_to_zero(5, [3, 1, -4, 2, 2])) # Output: Yes # print(subset_sum_to_zero(4, [1, 2, 3, 4])) # Output: No"},{"question":"Given a string `tasks` representing a sequence of tasks, each task can be labeled as \'A\', \'B\', \'C\', or \'D\'. Each task must be completed to unlock a treasure. However, the treasure can only be unlocked if all different tasks appear in pairs and no task appears more than twice, otherwise, the sequence is considered invalid and the treasure cannot be unlocked. Write a function `canUnlockTreasure(tasks)` that determines whether the treasure can be unlocked with the given sequence of tasks. **Function Signature:** ```python def canUnlockTreasure(tasks: str) -> bool ``` **Input:** - `tasks` (string): A string where each character is \'A\', \'B\', \'C\', or \'D\', representing the tasks. (1 ≤ |tasks| ≤ 1000) **Output:** - Return a boolean value: `True` if the treasure can be unlocked, otherwise `False`. **Examples:** ```python Example 1: Input: tasks = \\"AABBCCDD\\" Output: True Explanation: Each task appears exactly twice. The sequence is valid. Example 2: Input: tasks = \\"AABBCD\\" Output: False Explanation: Task \'A\' appears twice, \'B\' appears twice but \'C\' and \'D\' appear only once. The sequence is invalid. Example 3: Input: tasks = \\"ABCDABCD\\" Output: True Explanation: Each task appears exactly twice. The sequence is valid. Example 4: Input: tasks = \\"AABBC\\" Output: False Explanation: Task \'A\' and \'B\' appear twice but \'C\' appears only once and \'D\' is missing. The sequence is invalid. ``` **Constraints:** 1. Each character in the string `tasks` will be one of {\'A\', \'B\', \'C\', \'D\'}. 2. The length of the string `tasks` will be between 1 and 1000 inclusive.","solution":"def canUnlockTreasure(tasks: str) -> bool: Determine if the treasure can be unlocked based on the sequence of tasks. :param tasks: A string where each character is \'A\', \'B\', \'C\', or \'D\' :return: True if the treasure can be unlocked, otherwise False from collections import Counter task_count = Counter(tasks) if len(task_count) != 4: return False for count in task_count.values(): if count != 2: return False return True"},{"question":"A manufacturing company has a conveyor belt system consisting of three consecutive belt segments: Segment A, Segment B, and Segment C. Each belt segment can only transfer items to adjacent segments, i.e., Segment A can transfer items to Segment B, and Segment B can transfer items to either Segment A or Segment C, and Segment C can transfer items to Segment B only. The conveyor belt operator is given a task to transfer all items from Segment C to Segment A. Each item on the conveyor belt is represented by a distinct integer between 1 and n. Items can only be transferred if they have an integer value greater than all other items currently on the segments involved in the transfer. Each transfer takes exactly one minute, and only one transfer can happen at any given time. Given the number of items n, and a large number m, you are required to calculate the minimum time required (in minutes) to transfer all items from Segment C to Segment A, and give the result modulo m. Input The first line contains two space-separated integers: the number of items n and the modulo number m (1 ≤ n, m ≤ 109). Output Print a single integer — the minimum number of minutes required to transfer all items from Segment C to Segment A, modulo m. Examples Input 1 12 Output 2 Input 4 1000 Output 6 Note In the first example, there is only one item. It moves from Segment C to Segment B, and then from Segment B to Segment A, taking 2 minutes in total. In the second example, we can describe the moving sequence as follows: Item 4 moves from Segment C to Segment B, Item 4 then moves from Segment B to Segment A, Item 3 moves from Segment C to Segment B, Item 3 moves from Segment B to Segment A, and so on. The total movement time will be 6 minutes.","solution":"def min_time_to_transfer_all_items(n, m): Calculates the minimum time required to transfer all items from Segment C to Segment A, modulo m. Args: n: int - number of items. m: int - modulo number. Returns: int - minimum time in minutes modulo m. # Each item requires exactly 2 moves: C -> B and B -> A total_moves = 2 * n return total_moves % m"},{"question":"You are given a string containing only lowercase alphabets and digits. Your task is to calculate the sum of all digits present in the string and return a new string that consists of all the characters from the original string, sorted in non-decreasing order, with the sum of the digits appended at the end. Input The only line contains a string s (1 ≤ |s| ≤ 1000), which contains only lowercase alphabets and digits. Output Output a single string that consists of all the alphabet characters from s sorted in non-decreasing order, followed by the sum of all digits in the string. Examples Input a1b2c3 Output abc6 Input abc123 Output abc6 Input 1a2b3c Output abc6 Input 4n3k5t2 Output knt14 Note In the first example, the sorted characters are \'abc\' and the sum of the digits is 1 + 2 + 3 = 6. In the second example, the sorted characters are \'abc\' and the sum of the digits is 1 + 2 + 3 = 6. In the third example, although the digits appear before the characters in the input, the output should be the sorted characters \'abc\' followed by the sum 6. In the fourth example, the sorted characters are \'knt\' and the sum of the digits is 4 + 3 + 5 + 2 = 14.","solution":"def process_string(s): Processes the string s such that all alphabet characters from s are sorted in non-decreasing order, followed by the sum of all digits in the string. Args: s (str): A string containing only lowercase alphabets and digits. Returns: str: A new string with sorted alphabet characters followed by the sum of digits. chars = [] digit_sum = 0 for char in s: if char.isdigit(): digit_sum += int(char) else: chars.append(char) sorted_chars = \'\'.join(sorted(chars)) return sorted_chars + str(digit_sum)"},{"question":"Given an integer n, your task is to write a function that generates and returns a list of all unique pairs (a, b) such that: 1. 1 ≤ a < b ≤ n 2. a divides b (i.e., b % a == 0) The pairs should be sorted in ascending order first by `a` and then by `b`. Example: Input: n = 6 Output: [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 4), (2, 6), (3, 6)] Your Task: You don\'t need to read input or print anything. Complete the function divisiblePairs() which takes an integer n as an input parameter and returns the list of pairs meeting the above criteria. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 100","solution":"def divisiblePairs(n): Generates and returns a list of all unique pairs (a, b) such that: 1. 1 ≤ a < b ≤ n 2. a divides b (i.e., b % a == 0) :param n: The maximum value up to which pairs are to be generated. :return: List of tuples containing the pairs. pairs = [] for a in range(1, n): for b in range(a + 1, n + 1): if b % a == 0: pairs.append((a, b)) return pairs"},{"question":"Description Given a list of strings `equations`, where each string represents a basic math equation, evaluate these equations and return a list of the results. Each equation will be in the format \\"(operand1) (operator) (operand2)\\" where: - (operand1) and (operand2) are integers (they can be positive or negative). - (operator) is one of `[\'+\', \'-\', \'*\', \'/\']`. - Division should be performed as integer division. # Important Info: - The input list `equations` may contain from 1 to 100 strings. - Both operands in the equations will fit within the range of a 32-bit signed integer. - Results of divisions should be rounded towards 0. Examples ``` equations = [\\"3 + 5\\", \\"17 - 23\\", \\"-4 * 6\\", \\"20 / 4\\"] ``` would return: `[8, -6, -24, 5]` ``` equations = [\\"10 + 4\\", \\"4 / 3\\", \\"-10 / 3\\", \\"15 * 2\\"] ``` would return: `[14, 1, -3, 30]`","solution":"def evaluate_equations(equations): results = [] for equation in equations: left_operand, operator, right_operand = equation.split() left_operand, right_operand = int(left_operand), int(right_operand) if operator == \'+\': result = left_operand + right_operand elif operator == \'-\': result = left_operand - right_operand elif operator == \'*\': result = left_operand * right_operand elif operator == \'/\': result = int(left_operand / right_operand) # perform integer division results.append(result) return results"},{"question":"Given a positive integer m, you need to find all pairs of positive integers (a, b) such that: 1. a and b are both greater than or equal to 1. 2. a is less than or equal to b. 3. The product of a and b (a * b) is equal to m. -----Input----- The input is a single integer m (1 ≤ m ≤ 10^6). -----Output----- Output each pair (a, b) in the format a b, where a ≤ b. If there are multiple pairs, print each pair on a new line in ascending order of a. If no such pairs exist, print \\"-1\\". -----Examples----- Input 6 Output 1 6 2 3 Input 17 Output 1 17 Input 20 Output 1 20 2 10 4 5","solution":"def find_pairs(m): Finds all pairs of positive integers (a, b) such that: 1. Both a and b are greater than or equal to 1. 2. a is less than or equal to b. 3. The product of a and b (a * b) is equal to m. Returns the pairs as a list of tuples. pairs = [] for a in range(1, int(m**0.5) + 1): if m % a == 0: b = m // a if a <= b: pairs.append((a, b)) if not pairs: return \'-1\' return pairs # Function to generate output in required format def format_pairs(pairs): if pairs == \'-1\': return [\\"-1\\"] return [f\\"{a} {b}\\" for a, b in pairs]"},{"question":"Create a function that takes a sentence as input and returns a new sentence where every word\'s first letter is capitalized, while the rest of the letters are in lowercase. Words are assumed to be separated by spaces, and there are no leading or trailing spaces in the sentence. Input The input is given in the following format. sentence The input is a string containing at least one word and at most 100 words. Each word is a sequence of alphabetical characters (both uppercase and lowercase), and there is exactly one space between any two consecutive words. Output Output the transformed sentence in a single line. Examples Input \\"hello world\\" Output \\"Hello World\\" Input \\"tHis is a Test\\" Output \\"This Is A Test\\"","solution":"def capitalize_sentence(sentence): Capitalizes the first letter of each word in the sentence and converts the rest to lowercase. Args: sentence (str): The input sentence. Returns: str: The transformed sentence with each word capitalized. return \' \'.join(word.capitalize() for word in sentence.split())"},{"question":"Jona has a set of musical notes represented as an array of integers where each integer represents a frequency in Hertz. Jona wants to find out the longest subsequence of notes that is in a strictly increasing order. Your task is to write a program to help Jona determine this. A subsequence is derived by deleting some or none of the elements from the array without changing the order of the remaining elements. Your program should output the length of the longest strictly increasing subsequence. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of musical notes. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the frequencies of the musical notes. -----Output----- Output a single integer — the length of the longest strictly increasing subsequence. -----Examples----- Input 6 5 2 8 6 3 6 9 7 Output 4 Input 5 1 2 3 4 5 Output 5 Input 4 10 9 8 7 Output 1 Input 8 10 22 9 33 21 50 41 60 Output 5","solution":"from bisect import bisect_left def longest_increasing_subsequence(notes): Returns the length of the longest strictly increasing subsequence. if not notes: return 0 # Temporary array to hold our increasing subsequence temp = [] for note in notes: pos = bisect_left(temp, note) # If pos is equal to length of the temp array, # then note is greater than any element in temp if pos == len(temp): temp.append(note) else: temp[pos] = note return len(temp)"},{"question":"A company needs to hire new employees. They have a list of candidates, each with a unique ID and a set of skills represented as a string of space-separated skill names. The company has a set of required skills for a given job opening. Write a program to determine the smallest number of candidates needed such that the combined skills of the selected candidates cover all the required skills. -----Input----- - The first line contains a single integer T, the number of test cases. The description of each testcase follows. - The first line of each test case contains an integer N denoting the number of candidates. - The second line contains a string of space-separated skill names representing the required skills for the job opening. - The next N lines each contain a candidate ID followed by a string of space-separated skill names representing the skills of that candidate. -----Output----- For each test case, output a single line containing the minimum number of candidates required to cover all the required skills. If it is not possible to cover all the required skills, output -1. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 100 - Each candidate ID is a unique alphanumeric string with a length of 1 to 10. - Each skill name is a non-empty string consisting of lowercase alphabetic characters and has a length of 1 to 15. - Each candidate can have between 1 and 20 skills. - The required skills string for each job opening contains at least one skill and up to 20 skills. - The total number of different skill names across all candidates does not exceed 100. - A candidate\'s skills list and the required skills list will not contain duplicate skill names. -----Example----- Input: 2 3 coding problem_solving communication ID1 coding problem_solving ID2 communication ID3 coding 4 design testing deployment management ID1 design ID2 testing ID3 deployment ID4 management Output: 2 4 -----Explanation:----- In the first test case: - The required skills are \\"coding\\", \\"problem_solving\\", and \\"communication\\". - Candidate ID1 has \\"coding\\" and \\"problem_solving\\". - Candidate ID2 has \\"communication\\". - Candidate ID3 has \\"coding\\". Selecting candidates ID1 and ID2 covers all the required skills, so the minimum number of candidates needed is 2. In the second test case: - The required skills are \\"design\\", \\"testing\\", \\"deployment\\", and \\"management\\". - Candidates ID1, ID2, ID3, and ID4 each have one of the required skills. Since each candidate has a unique required skill, all four candidates are needed to cover all required skills, so the minimum number of candidates needed is 4.","solution":"from itertools import combinations def min_candidates_needed(n, required_skills, candidates_skills): required_skills_set = set(required_skills) # Transform candidates_skills to a list of tuples of candidate ID and their skills as a set candidates_skills = [(cid, set(skills)) for cid, skills in candidates_skills] min_candidates = float(\'inf\') for r in range(1, n + 1): for combination in combinations(candidates_skills, r): combined_skills = set() for _, skills in combination: combined_skills.update(skills) if required_skills_set <= combined_skills: min_candidates = min(min_candidates, r) return min_candidates if min_candidates != float(\'inf\') else -1 def process_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 results = [] for _ in range(T): N = int(lines[index]) required_skills = lines[index + 1].split() candidates_skills = [] for i in range(N): parts = lines[index + 2 + i].split() candidate_id = parts[0] skills = parts[1:] candidates_skills.append((candidate_id, skills)) result = min_candidates_needed(N, required_skills, candidates_skills) results.append(result) index += 2 + N return results"},{"question":"You are given an array consisting of N integers. Your task is to partition the array into the maximum number of subarrays such that each element in the subarray is contiguous and the sum of elements in each subarray is even. ------ Input ------ The first line of input contains a single integer T, denoting the number of test cases. For each test case, the first line contains a single integer N, the number of integers in the array. The second line contains N space-separated integers representing the array. ------ Output ------ For each test case, output a single line containing the maximum number of subarrays that can be formed such that the sum of elements in each subarray is even. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -10^5 ≤ A[i] ≤ 10^5 ------ Sample Input ------ 2 5 1 2 3 4 5 3 2 4 6 ------ Sample Output ------ 2 3 ------ Explanation ------ Test 1: One of the optimal partitions is [1, 2, 3, 4] and [5]. Sum of elements in both subarrays is even. Test 2: Since each element in the array is even itself, each element can be a subarray resulting in 3 subarrays.","solution":"def max_even_sum_subarrays(arr): Returns the maximum number of subarrays where the sum is even for a given array `arr`. count = 0 current_sum = 0 for num in arr: current_sum += num if current_sum % 2 == 0: count += 1 current_sum = 0 return count def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] result = max_even_sum_subarrays(arr) results.append(result) return results"},{"question":"Your task is to help design a production schedule at a factory. The factory produces a list of N different products, conveniently numbered from 1 to N. Each product i requires P[i] time units to produce. Additionally, the factory has M machines, each capable of producing exactly one product at a time. The objective is to determine the minimum total time required to produce at least K units of each product. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 - 1 ≤ K ≤ 100 - 1 ≤ P[i] ≤ 100 (1 ≤ i ≤ N) -----Input----- The input is given from Standard Input in the following format: N M K P_1 P_2 ... P_N -----Output----- Print the minimum total time required to produce at least K units of each product. -----Sample Input----- 3 2 4 1 2 3 -----Sample Output----- 12 -----Explanation----- To produce at least 4 units of each product: - Use Machine 1 to produce 4 units of product 1 in 4 time units. - Use Machine 2 to produce 4 units of product 2 in 8 time units. - Additionally, use Machine 1 to produce 4 units of product 3 in 12 time units. So, the total minimum time required is max(4, 8, 12) = 12 time units.","solution":"def min_total_time(N, M, K, P): Determines the minimum total time required to produce at least K units of each product. Parameters: N (int): Number of products M (int): Number of machines K (int): Units of each product required P (list): Time required to produce a single unit of each product Returns: int: The minimum total time required times = [P[i] * K for i in range(N)] times.sort(reverse=True) result = 0 for i in range(M): if i < len(times): result = max(result, times[i]) return result"},{"question":"You have been given a rectangular grid of size N x M. Each cell in the grid contains a single lowercase alphabet character. Your goal is to find the minimal number of steps required to change the grid such that every row in the grid contains only one unique character. You can change any character to any other character in each step. Input: The first line contains two integers N and M, the number of rows and columns of the grid respectively. Each of the next N lines contains a string of M lowercase alphabet characters representing the grid. Output: Print the minimal number of steps required to transform the grid. Constraints: 1 ≤ N, M ≤ 100 \'a\' ≤ each character in the grid ≤ \'z\' SAMPLE INPUT 3 4 abca zxyz pqrp SAMPLE OUTPUT 6 Explanation: To achieve the goal: - Change the first row to \\"aaaa\\" (3 changes) - Change the second row to \\"zzzz\\" (2 changes) - Change the third row to \\"pppp\\" (1 change) Total changes needed: 3 + 2 + 1 = 6 steps","solution":"def minimal_steps_to_uniform_rows(grid): Returns the minimal number of steps required to change the grid such that every row in the grid contains only one unique character. N = len(grid) M = len(grid[0]) total_steps = 0 for row in grid: char_count = {} for char in row: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_freq = max(char_count.values()) steps_needed = M - max_freq total_steps += steps_needed return total_steps"},{"question":"You are given a grid with dimensions 10x10 consisting of \'.\' (empty cells) and \'#\' (occupied cells). Your task is to write a program that finds the largest contiguous region of occupied cells and calculates its area. The region is connected horizontally and vertically, but not diagonally. # Input The input consists of multiple datasets. Each dataset represents a 10x10 grid of cells, expressed as 10 strings of 10 characters, where each character is either \'.\' or \'#\'. Each dataset is separated by a blank line. The number of datasets does not exceed 50. # Output For each dataset, output the area of the largest contiguous region of occupied cells on one line. # Example Input: ``` .......... ...#.. ...#.. ...#.. .......... .......... .......... .......... .......... .......... .......... .......... .......... .......... .......... .......... .......... .......... .......... .......... ........ ........ .......... .......... .......... .......... .......... .......... .......... .......... ``` Output: ``` 15 0 4 ``` # Explanation In the first dataset, the largest region has an area of 15 as it consists of fifteen \'#\' characters. The second dataset contains no \'#\' characters, so its largest region has an area of 0. In the third dataset, the largest region has an area of 4 consisting of two blocks of \'\' in the top left corner.","solution":"def find_largest_region_area(grid): def dfs(x, y): if x < 0 or x >= 10 or y < 0 or y >= 10 or grid[x][y] != \'#\': return 0 grid[x][y] = \'.\' # Mark the cell as visited by replacing \'#\' with \'.\' area = 1 # Start with the current cell # Check four directions: left, right, up, down area += dfs(x-1, y) area += dfs(x+1, y) area += dfs(x, y-1) area += dfs(x, y+1) return area max_area = 0 for i in range(10): for j in range(10): if grid[i][j] == \'#\': max_area = max(max_area, dfs(i, j)) return max_area def process_input(input_data): datasets = [] current_dataset = [] for line in input_data.split(\'n\'): if line.strip() == \'\': if current_dataset: datasets.append(current_dataset) current_dataset = [] else: current_dataset.append(list(line.strip())) if current_dataset: datasets.append(current_dataset) results = [find_largest_region_area(dataset) for dataset in datasets] return results"},{"question":"In this problem, you are given a string consisting of only two characters: \'a\' and \'b\'. You are required to find out how many substrings of the given string are palindromic. A substring is defined as any contiguous sequence of characters within a string. A palindrome is a string that reads the same forward and backward. Input The first line contains an integer t (1 ≤ t ≤ 100) - the number of test cases. Each of the next t lines describes a test case with a single string composed of characters \'a\' and \'b\'. The length of the string will be between 1 and 1000 inclusive. Output For each test case, print the number of palindromic substrings in the given string. Example Input 4 a ab aa aba Output 1 2 3 4 Explanation For the first test case, \\"a\\" is the only palindromic substring. For the second test case, \\"a\\" and \\"b\\" are the palindromic substrings. For the third test case, \\"a\\", \\"a\\", and \\"aa\\" are the palindromic substrings. For the fourth test case, \\"a\\", \\"b\\", \\"a\\", \\"aba\\" are the palindromic substrings.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 # Function to expand around center and count palindromes def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for center in range(n): expand_around_center(center, center) expand_around_center(center, center + 1) return count def count_palindromic_substrings_in_cases(t, cases): results = [] for case in cases: results.append(count_palindromic_substrings(case)) return results"},{"question":"Alex is planning a study schedule for upcoming exams. Alex has N subjects to study, each requiring a certain number of hours Hi (1 ≤ i ≤ N). He plans to study no more than a maximum of M hours in a single day and wants to determine the minimum number of days needed to complete his study schedule. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - The first line of each test case contains two space-separated integers N and M — the number of subjects and the maximum hours he can study in a day. - The next line of each test case contains N space-separated integers, where the i-th integer denotes Hi, the number of hours required to study the i-th subject. ------ Output Format ------ For each test case, output on a new line the minimum number of days required to complete the study schedule. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ 24 1 ≤ Hi ≤ 10^4 ----- Sample Input 1 ------ 3 5 10 5 8 7 4 3 4 12 10 2 9 10 6 5 6 8 5 3 4 2 ----- Sample Output 1 ------ 3 3 6 ----- Explanation 1 ------ Test case 1: The subjects require hours [5, 8, 7, 4, 3]. Alex can study as follows: - Day 1: 5 + 8 = 13 hours (8 hours on subject 2 and 5 hours on subject 1; exceeds limit so split the study: first 8 hours of study) - Day 2: 7 + 4 = 11 hours (remaining 2 hours of subject 1, 4 hours on subject 4, and 5 hours on subject 3) - Day 3: 3 hours (remaining 2 hours of subject 3 and 1 hour on subject 5) Test case 2: The subjects require hours [10, 2, 9, 10]. Alex can study as follows: - Day 1: 10 hours - Day 2: 2 + 9 = 11 hours (9 hours on subject 3 and 2 hours on subject 2) - Day 3: 9 hours (remaining 1 hour of subject 3 and 10 hours on subject 4) Test case 3: The subjects require hours [6, 8, 5, 3, 4, 2]. Alex can study one subject per day as the maximum daily limit is less than the sum of hours required per subject. Therefore, each day is dedicated to one subject: - Day 1: 6 hours - Day 2: 8 hours - Day 3: 5 hours - Day 4: 3 hours - Day 5: 4 hours - Day 6: 2 hours The minimum number of days needed is therefore returned for each case appropriately.","solution":"def min_days_to_study(test_cases): results = [] for case in test_cases: N, M, hours = case total_hours = sum(hours) days_needed = (total_hours + M - 1) // M # This is ceiling of total_hours / M results.append(days_needed) return results # Example usage: # test_cases = [ # (5, 10, [5, 8, 7, 4, 3]), # (4, 12, [10, 2, 9, 10]), # (6, 5, [6, 8, 5, 3, 4, 2]) # ] # print(min_days_to_study(test_cases)) # Output: [3, 3, 6]"},{"question":"You are given a list of queries, each consisting of a non-negative integer. For every query, you need to find its factorial modulo (10^9 + 7). However, directly calculating the factorial for large numbers might cause integer overflow as well as can be time-consuming, so you need to use an efficient approach to provide the result for each query. -----Input----- The first line contains a single integer (q) ((1 le q le 10^5)) - the number of queries. Each of the next (q) lines contains a single non-negative integer (n) ((0 le n le 10^5)) representing a query. -----Output----- For each query, output the factorial of (n) modulo (10^9 + 7). -----Examples----- Input 3 3 5 10 Output 6 120 3628800 -----Note----- In the first example, the factorial of 3 is (3! = 6). In the second example, the factorial of 5 is (5! = 120). In the third example, the factorial of 10 is (10! = 3628800). You\'ll need to precompute the factorials up to (10^5) modulo (10^9 + 7) to make the queries efficient.","solution":"MOD = 10**9 + 7 MAX_N = 100000 # Precompute factorials modulo 10^9 + 7 factorials = [1] * (MAX_N + 1) for i in range(2, MAX_N + 1): factorials[i] = factorials[i - 1] * i % MOD def factorial_mod(n): Returns the factorial of n modulo 10^9 + 7. return factorials[n]"},{"question":"Python just launched a spaceship to Mars, and it needs your help to process the telemetry data being sent back. The telemetry consists of a large matrix of integers representing various sensor readings. The spaceship\'s system needs to detect whether the matrix contains any consecutive sequence (either row-wise or column-wise) of a specified number \'k\' repeated exactly \'n\' times. Write a function that takes the matrix, the number \'k\', and the number \'n\'. The function should check for the consecutive sequence both in rows and columns and return \'True\' if such a sequence exists, and \'False\' otherwise. -----Input----- The input consists of: - An integer \'m\' representing the number of rows in the matrix. - An integer \'p\' representing the number of columns in the matrix. - A matrix of \'m\' x \'p\' integers. - An integer \'k\' which is the number we are looking for. - An integer \'n\' which is the count of consecutive repetition we need to check. -----Output----- The function should return a boolean value. \'True\' if the sequence exists, \'False\' otherwise. -----Example----- Input: 3 4 1 2 2 2 3 2 1 2 2 2 2 4 2 3 Output: True Input: 4 5 5 6 7 8 9 1 2 3 4 5 5 5 5 5 6 1 2 2 2 1 5 4 Output: True","solution":"def check_consecutive(matrix, k, n): Checks if the matrix contains any consecutive sequence of the number \'k\' repeated exactly \'n\' times either row-wise or column-wise. Parameters: matrix (list of list of int): The telemetry data matrix. k (int): The number to look for. n (int): The count of consecutive repetition required. Returns: bool: True if such a sequence exists, False otherwise. m = len(matrix) p = len(matrix[0]) if m > 0 else 0 # Check rows for k repeated n times for i in range(m): consecutive = 0 for j in range(p): if matrix[i][j] == k: consecutive += 1 if consecutive == n: return True else: consecutive = 0 # Check columns for k repeated n times for j in range(p): consecutive = 0 for i in range(m): if matrix[i][j] == k: consecutive += 1 if consecutive == n: return True else: consecutive = 0 return False"},{"question":"A busy restaurant receives orders for their dishes online. Each dish has a specific preparation time and the restaurant has limited kitchen capacity, i.e., it can only work on a fixed number of orders at the same time. Any order that cannot be cooked immediately has to wait in the order queue. Given a set of orders with their preparation times and the maximum number of orders the kitchen can handle simultaneously, determine the total time required to complete all orders if the kitchen schedules orders optimally to minimize the total wait time. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100) — the number of orders and the maximum kitchen capacity (number of orders that can be worked on simultaneously). The next line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^4) — the preparation time for each order. -----Output----- Output a single integer — the total time required to complete all orders. -----Example----- Input 5 2 3 1 10 1 2 Output 13 -----Note----- In the first example, the optimal way to handle the orders is: - At time 0: start the first and second orders, taking 3 and 1 units of time respectively. - At time 1: complete the second order and start the fourth order, taking 1 unit of time. - At time 3: complete the first order and start the fifth order, taking 2 units of time. - At time 4: complete the fourth order. - At time 5: complete the fifth order and start the third order, taking 10 units of time. - At time 13: complete the third order. Therefore, the total time required to complete all orders is 13 units of time.","solution":"import heapq def total_time_to_complete_orders(n, k, preparation_times): Calculate the total time required to complete all orders when the kitchen schedules orders optimally to minimize total wait time. :param n: Number of orders :param k: Maximum kitchen capacity (number of orders that can be worked on simultaneously) :param preparation_times: List of integers representing preparation time for each order :return: Total time required to complete all orders if n <= k: return max(preparation_times) preparation_times = sorted(preparation_times) pq = [] for i in range(k): heapq.heappush(pq, preparation_times[i]) for i in range(k, n): earliest_time = heapq.heappop(pq) heapq.heappush(pq, earliest_time + preparation_times[i]) return max(pq)"},{"question":"You are given a non-empty array of positive integers. Your task is to find a subsequence of length exactly k, such that the sum of the elements in this subsequence is as large as possible. A subsequence is defined as an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n), the length of the array and the length of the required subsequence, respectively. The second line contains n positive integers, each less than or equal to 10^6, representing the elements of the array. -----Output----- In the single line, print a single integer — the maximum possible sum of a subsequence of length k. -----Examples----- Input 5 3 5 2 1 7 3 Output 15 Input 6 4 4 6 2 5 9 8 Output 28","solution":"def max_subsequence_sum(n, k, arr): Returns the maximum possible sum of a subsequence of length k. Parameters: n (int): Length of the input array k (int): Length of the required subsequence arr (list of int): The input array of positive integers Returns: int: The maximum possible sum of a subsequence of length k # Sort the array in descending order sorted_arr = sorted(arr, reverse=True) # Take the sum of the first k elements return sum(sorted_arr[:k])"},{"question":"Task Create a function to process customer orders at a custom T-shirt printing shop. Objective Write a program that takes in a series of orders and prints a summary of the total number of shirts ordered for each size. Specification - Provide the input as a series of lines, where each line represents an order and consists of the size of the T-shirt and the quantity ordered. - The size of the T-shirt can be \'S\' (Small), \'M\' (Medium), \'L\' (Large), or \'XL\' (Extra Large). - The quantity ordered is a positive integer. - The input ends with a line containing the word \\"END\\". Create a function `process_orders()` that: - Reads multiple lines of input until it encounters the line \\"END\\". - Outputs the total number of shirts ordered for each size in the following format: ``` Size S: <total number> Size M: <total number> Size L: <total number> Size XL: <total number> ``` # Example Input: ``` S 3 M 2 L 5 S 1 XL 2 END ``` Output: ``` Size S: 4 Size M: 2 Size L: 5 Size XL: 2 ```","solution":"def process_orders(order_lines): Processes a series of T-shirt orders and returns the total number of shirts for each size. Args: order_lines (list of str): A list of order lines where each line contains the size and quantity. Returns: str: A summary of the total number of shirts for each size. # Initialize a dictionary to store the counts of each size totals = {\'S\': 0, \'M\': 0, \'L\': 0, \'XL\': 0} # Process each order line for line in order_lines: # If we encounter \\"END\\", we stop processing if line == \\"END\\": break size, quantity = line.split() totals[size] += int(quantity) # Create the summary string result = (f\\"Size S: {totals[\'S\']}n\\" f\\"Size M: {totals[\'M\']}n\\" f\\"Size L: {totals[\'L\']}n\\" f\\"Size XL: {totals[\'XL\']}\\") return result"},{"question":"Luna and her team of explorers have discovered an ancient artifact encoded with a series of numbers. They believe these numbers can be decoded to reveal important information about an ancient civilization. To decode the message, they need to process the numbers with a specific algorithm. The algorithm involves creating a sum from continuous subsequences of the numbers and identifying the subsequence with the maximum sum. Given an array of integers, your task is to find the maximum sum of a non-empty continuous subsequence in the array. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of elements in the array. The second line contains n integers a_i (-10^9 leq a_i leq 10^9), the elements of the array. -----Output----- Print a single integer, the maximum sum of a non-empty continuous subsequence in the array. -----Example----- Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 -----Note----- In the example, the subsequence [4, -1, 2, 1] has the largest sum 6.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a non-empty continuous subsequence in the array. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Anastasia is playing a game with her friends. In this game, she has to create a specific sequence using a string S consisting of lowercase English letters. The game consists of repeatedly performing the following operation: - Choose any letter in S and replace it with another lowercase English letter. Anastasia needs to know if she can transform string S into string T using the minimum number of operations. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - Each test case consists of two space-separated strings S and T. ------ Output Format ------ For each test case, output on a new line, the minimum number of operations required to transform S into T. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S|, |T| ≤ 100 ----- Sample Input 1 ------ 3 abcd efgh abc xyz abc abc ----- Sample Output 1 ------ 4 3 0 ----- Explanation 1 ------ Test case 1: The string \\"abcd\\" can be transformed into \\"efgh\\" with 4 operations (replacing \'a\' with \'e\', \'b\' with \'f\', \'c\' with \'g\', and \'d\' with \'h\'). Test case 2: The string \\"abc\\" can be transformed into \\"xyz\\" with 3 operations (replacing \'a\' with \'x\', \'b\' with \'y\', and \'c\' with \'z\'). Test case 3: The string \\"abc\\" can be transformed into itself with 0 operations since it is already the same as \\"abc\\".","solution":"def minimum_operations_to_transform(S, T): Given two strings S and T, calculate the minimum number of operations required to transform S into T. Each operation consists of replacing any character in S with any other lowercase English letter. operations = 0 for s_char, t_char in zip(S, T): if s_char != t_char: operations += 1 return operations def process_test_cases(test_cases): results = [] for S, T in test_cases: results.append(minimum_operations_to_transform(S, T)) return results"},{"question":"In a warehouse, a conveyor belt system moves packages from one end to the other. The system can only handle a certain maximum weight at a time. You are given the weights of the packages and need to determine the maximum number of packages that can be simultaneously on the conveyor belt without exceeding the weight limit. You are given: - An array of integers where each element represents the weight of a package. - An integer representing the maximum weight limit of the conveyor belt. Your task is to determine the maximum number of packages that can be placed on the conveyor belt at the same time without exceeding the weight limit. Note: - The weight of each package will not exceed the weight limit. - The total number of packages will not exceed 500. Example 1: Input: weights = {2, 3, 1, 4, 6}, limit = 10 Output: 4 Explanation: The maximum number of packages that can be on the conveyor belt without exceeding the limit is 4. The weights can be {2, 3, 1, 4} which sum up to 10. Example 2: Input: weights = {5, 3, 2}, limit = 6 Output: 2 Explanation: You can place the weights {3, 2} on the conveyor belt, which sums up to 5, under the limit of 6, and includes 2 packages.","solution":"def max_packages_on_conveyor(weights, limit): Determines the maximum number of packages that can be placed on the conveyor belt without exceeding the weight limit. :param weights: List of integers, weights of the packages :param limit: Integer, the maximum weight limit of the conveyor belt :return: Integer, the maximum number of packages that can be on the conveyor belt weights.sort() current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= limit: current_weight += weight count += 1 else: break return count"},{"question":"You are organizing a trip and have a backpack with a maximum weight limit of W. You have N items, each with a specific weight and value. Your goal is to maximize the total value of the items you can carry without exceeding the weight limit of your backpack. -----Constraints----- - 1 leq N leq 100 - 1 leq weight of each item leq 100 - 1 leq value of each item leq 1 000 - 1 leq W leq 1 000 -----Input----- Input is given from Standard Input in the following format: N W weight_1 value_1 weight_2 value_2 ... weight_N value_N -----Output----- Print the maximum total value of items you can carry without exceeding the weight limit. -----Sample Input----- 4 5 2 3 1 2 3 4 2 2 -----Sample Output----- 7 With a maximum weight limit of 5, you can carry the items with weights 2, 1, and 2, which have total values of 3, 2, and 2, adding up to a total value of 7.","solution":"def knapsack(N, W, items): Solves the knapsack problem and returns the maximum total value of items that can be carried without exceeding the weight limit. :param N: Number of items :param W: Maximum weight limit of the backpack :param items: List of tuples, where each tuple represents (weight, value) of an item :return: Maximum total value dp = [[0] * (W + 1) for _ in range(N + 1)] for i in range(1, N + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[N][W]"},{"question":"The famous painter Sophia is working on her next masterpiece. She has a canvas that can be represented as a 2D grid with cells, each with a certain color represented by an integer. She wants to change the color of a certain cell and all adjacent cells of the same color (up, down, left, right) to a new color. Help her accomplish this by implementing a function that will accept the grid, the starting cell (row and column), and the new color. Function description Complete the `paintFill` function in the editor below. The function should return the modified grid after performing the paint fill. `paintFill` has the following parameters: - `grid`: a 2D integer array representing the canvas - `r`: an integer, the row index of the starting cell - `c`: an integer, the column index of the starting cell - `newColor`: an integer, the new color to apply Input Format The first line contains two integers `n` and `m`, the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` space-separated integers representing the colors of the cells in the grid. The next line contains three space-separated integers: `r`, `c`, and `newColor`. Constraints 1 ≤ n, m ≤ 50 0 ≤ grid[i][j] ≤ 1000 0 ≤ r < n 0 ≤ c < m 0 ≤ newColor ≤ 1000 Output Format Return the updated grid as a 2D integer array after performing the paint fill. Sample Input 4 4 1 1 1 2 1 1 2 2 1 1 2 3 1 2 2 2 1 1 3 Sample Output 3 3 3 2 3 3 2 2 3 3 2 3 3 2 2 2 Explanation In the example, starting from cell (1, 1) with color 1, all adjacent cells with color 1 are changed to the new color 3. The function modifies the grid accordingly.","solution":"def paintFill(grid, r, c, newColor): Modifies the grid by performing a paint fill starting from cell (r, c). Changes all adjacent cells of the same initial color to the new color. Args: grid (list of lists of int): 2D integer array representing the canvas. r (int): Row index of the starting cell. c (int): Column index of the starting cell. newColor (int): New color to apply. Returns: list of lists of int: The modified grid after performing the paint fill. oldColor = grid[r][c] if oldColor == newColor: return grid def paint(r, c): if (r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]) or grid[r][c] != oldColor): return grid[r][c] = newColor paint(r - 1, c) # up paint(r + 1, c) # down paint(r, c - 1) # left paint(r, c + 1) # right paint(r, c) return grid"},{"question":"You are given a sequence of integers and you need to find the count of distinct integers in the range specified by a given pair of indices for multiple queries. Input: First line contains a single integer T which is the number of queries. First line of each query contains two integers N and Q where N is the size of the sequence and Q is the number of queries. Second line of each query contains N integers representing the sequence. Next Q lines in each query contain two integers L and R which are the indices of the subsequence (1-based inclusive). Output: For each query, output Q lines where each line contains a single integer which is the count of distinct integers in the subsequence from index L to R. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ Sequence[i] ≤ 10^9 SAMPLE INPUT 1 5 3 2 3 2 2 4 1 3 2 4 1 5 SAMPLE OUTPUT 2 2 3 Explanation For the first query, the subsequence from index 1 to 3 is [2, 3, 2] with 2 distinct integers: 2, 3. For the second query, the subsequence from index 2 to 4 is [3, 2, 2] with 2 distinct integers: 2, 3. For the third query, the subsequence from index 1 to 5 is [2, 3, 2, 2, 4] with 3 distinct integers: 2, 3, 4.","solution":"def count_distinct_in_subsequence(sequence, queries): For a given sequence and a list of index-based queries, return the count of distinct integers in each subsequence specified by the queries. :param sequence: List[int] - the main sequence of integers :param queries: List[Tuple[int, int]] - a list of tuples where each tuple represents (L, R) :return: List[int] - a list of integer counts of distinct values for each query result = [] for l, r in queries: subsequence = sequence[l-1:r] distinct_count = len(set(subsequence)) result.append(distinct_count) return result def process_input(T, data): result = [] index = 0 for _ in range(T): N, Q = data[index] sequence = data[index + 1] queries = data[index + 2: index + 2 + Q] index = index + 2 + Q result.extend(count_distinct_in_subsequence(sequence, queries)) return result"},{"question":"Alice loves exploring new strings and often works with string transformations for fun. Recently, she came across a problem where she needs to transform a given string into its mirror image. The mirror image of a string is defined as the string obtained by mirroring each character horizontally. For simplicity, Alice decides to consider only uppercase alphabets (A-Z) and the characters and their horizontal mirrors are defined inversely based on their position in the alphabet. For example: - \'A\' mirrors to \'Z\' - \'B\' mirrors to \'Y\' - ... - \'Y\' mirrors to \'B\' - \'Z\' mirrors to \'A\' Given a number of test cases and corresponding strings, help Alice determine the mirror image of each provided string. Input: The first line contains the number of test cases, T. Each of the next T lines contains a string of uppercase alphabets. Output: For each input string, print its mirror image. Constraints 1 ≤ T ≤ 100 1 ≤ length of each string ≤ 100 SAMPLE INPUT 3 ABC XYZ HELLO SAMPLE OUTPUT ZYX CBA SVOOL Explanation In the first input, \\"ABC\\" becomes \\"ZYX\\" by transforming \'A\' to \'Z\', \'B\' to \'Y\', and \'C\' to \'X\'. In the second input, \\"XYZ\\" becomes \\"CBA\\" by transforming \'X\' to \'C\', \'Y\' to \'B\', and \'Z\' to \'A\'. In the third input, \\"HELLO\\" becomes \\"SVOOL\\" by transforming \'H\' to \'S\', \'E\' to \'V\', \'L\' to \'O\', \'L\' to \'O\', and \'O\' to \'L\'.","solution":"def mirror_image(s): Returns the mirror image of the input string `s`. mirror_lookup = {chr(i): chr(155 - i) for i in range(65, 91)} # Generates the mapping for \'A\'-\'Z\' to \'Z\'-\'A\' return \'\'.join(mirror_lookup[char] for char in s) def mirror_strings(T, strings): Given T strings, return a list of their mirror images. return [mirror_image(s) for s in strings]"},{"question":"Eva is a treasure hunter who uses coordinates to track down hidden treasures. She uses a grid map where each cell is represented by a pair of integers (x, y). Her GPS device often gives inaccurate readings due to interference and Eva ends up at the wrong location. To correct the readings, her device gives her several possible coordinate pairs, and she needs to determine which one is closest to her actual destination. Your task is to implement a program that will determine the single coordinate pair that is closest to a given target coordinate (tx, ty) from a list of possible coordinate pairs. The Euclidean distance between two points (x1, y1) and (x2, y2) is given by: sqrt{(x2 - x1)^2 + (y2 - y1)^2} If there are multiple coordinate pairs equally close, return any one of them. # Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of possible coordinate pairs. The second line contains two integers `tx` and `ty` (−1000 ≤ tx, ty ≤ 1000) — the target coordinates. Each of the next `n` lines contains two integers representing a possible coordinate pair (px, py) (−1000 ≤ px, py ≤ 1000). # Output Output the closest coordinate pair to the target as a single line containing two integers separated by a space. # Example ``` Input 5 3 4 1 2 2 3 5 6 3 4 -1 0 Output 3 4 ``` In this example, the target coordinates are (3, 4). The list of possible coordinates is: - (1, 2), with a distance of √8 - (2, 3), with a distance of √2 - (5, 6), with a distance of √8 - (3, 4), with a distance of 0 (this is the closest) - (-1, 0), with a distance of √25 The output is (3, 4) since it\'s the closest coordinate pair to the target.","solution":"import math def find_closest_point(n, tx, ty, points): Returns the closest coordinate pair to the target (tx, ty) from a list of points. :param n: Number of points :param tx: Target x coordinate :param ty: Target y coordinate :param points: List of tuples, each containing (px, py) coordinates :return: A single tuple (px, py) which is closest to (tx, ty) def euclidean_distance(px, py): return math.sqrt((px - tx) ** 2 + (py - ty) ** 2) closest_point = points[0] min_distance = euclidean_distance(points[0][0], points[0][1]) for i in range(1, n): distance = euclidean_distance(points[i][0], points[i][1]) if distance < min_distance: min_distance = distance closest_point = points[i] return closest_point"},{"question":"Given an array of integers, you are allowed to rotate the array to the right by `k` steps. The array is said to be \\"stable\\" if it remains unchanged after rotation by `k` steps. Write a function to determine whether the array is stable for a given value of `k`. **Input Format** - The first line contains an integer `k` (1 ≤ k ≤ 10^6), denoting the number of steps to rotate the array. - The second line contains an integer `n` (1 ≤ n ≤ 10^6), denoting the number of elements in the array. - The third line contains `n` integers separated by spaces denoting the elements of the array. **Output Format** - Output \\"Stable\\" if the array remains unchanged after the rotation; otherwise, output \\"Not Stable\\". **Sample Input** 5 6 1 2 3 4 5 1 **Sample Output** Not Stable **Explanation** After rotating the array `[1, 2, 3, 4, 5, 1]` to the right by 5 steps, the array becomes `[2, 3, 4, 5, 1, 1]`, which is different from the original array. Hence, the output is \\"Not Stable\\". **Function Signature:** ```python def is_stable_rotation(k: int, n: int, array: List[int]) -> str: # your code here ```","solution":"def is_stable_rotation(k: int, n: int, array: list) -> str: Determines if rotating the array to the right by \'k\' steps keeps the array unchanged. k = k % n # effective rotations needed if array == array[-k:] + array[:-k]: return \\"Stable\\" else: return \\"Not Stable\\""},{"question":"Jane is organizing a bike race event. She has a list of participants, each identified by a unique number. Each participant has a specified set of races they are enrolled in, represented by unique integers. Jane needs help to find which races have all participants in common. In other words, she needs you to find the intersection of races for all participants. -----Input----- - The first line contains an integer N denoting the number of participants. - The following N lines each contain a participant number, followed by the races they are signed up for. -----Output----- - Output the list of races that all participants are enrolled in, sorted in ascending order. If there are no common races among all participants, output an empty list. -----Constraints----- - 1 ≤ N ≤ 100 - Each participant has at least one race. - Race numbers are positive integers ≤ 1000. - Each participant number is unique and ranges from 1 to 100. -----Example----- Input: 3 1 100 200 300 2 200 300 400 3 200 300 500 Output: 200 300","solution":"def common_races(N, participants): Finds the common races all participants are enrolled in. Parameters: N (int): Number of participants. participants (list of list of int): Each sublist contains a participant number followed by races they are enrolled in. Returns: list of int: Sorted list of races all participants are enrolled in. if not participants: return [] common_set = set(participants[0][1:]) # Initialize with the races of the first participant for i in range(1, N): common_set &= set(participants[i][1:]) return sorted(common_set)"},{"question":"You are given a string s and a list of words representing a dictionary. Determine if s can be segmented into a sequence of one or more dictionary words. Example 1: Input: s = \\"applepenapple\\" wordDict = [\\"apple\\",\\"pen\\"] Output: true Explanation: Return true because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Example 2: Input: s = \\"catsandog\\" wordDict = [\\"cats\\",\\"dog\\",\\"sand\\",\\"and\\",\\"cat\\"] Output: false Explanation: \\"catsandog\\" cannot be fully segmented using the dictionary. Note: - The same word in the dictionary may be reused multiple times in the segmentation. - The length of both s and the dictionary will not exceed 3000.","solution":"def wordBreak(s, wordDict): Determine if a string can be segmented into a space-separated sequence of one or more dictionary words. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"You are given an array of n integers. Your task is to reorder the array such that the maximum absolute difference between any two adjacent elements in the reordered array is minimized. If there are multiple solutions, you can print any of them. -----Input----- The first line contains a single integer n (2 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Output n integers — the reordered array. If there are multiple answers, print any of them. -----Example----- Input 5 4 2 1 3 7 Output 1 2 3 4 7 -----Note----- In the given example, the optimal reorder minimizes the maximum absolute difference among adjacent elements.","solution":"def reorder_array(arr): Reorders an array such that the maximum absolute difference between any two adjacent elements is minimized. return sorted(arr)"},{"question":"Create a program that reads a list of items and prices from a grocery store and outputs the total cost of the items purchased by a customer. The items and their prices are given over multiple lines, and the items purchased by the customer are provided in a separate list. Input On the first line, the number of item-price entries, `n`, is given (1 <= n <= 50). The next `n` lines contain an item name followed by its price separated by a comma. The next line contains the number of items purchased by the customer, `m` (1 <= m <= 50). The following `m` lines contain the item names that the customer has bought. Output The total cost of the items purchased by the customer is output as a floating-point number rounded to two decimal places. Example Input 5 apple,1.20 banana,0.50 milk,1.50 bread,2.00 cheese,3.75 4 apple milk bread cheese Output 8.45","solution":"def calculate_total_cost(n, item_price_list, m, purchased_items): Calculate the total cost of items purchased by a customer. Parameters: n (int): Number of item-price entries. item_price_list (list of str): List of items and their prices in the format \'item,price\'. m (int): Number of items purchased by the customer. purchased_items (list of str): List of items purchased by the customer. Returns: float: The total cost of the items purchased, rounded to two decimal places. item_prices = {} # Parse the item-price list into a dictionary for entry in item_price_list: item, price = entry.split(\',\') item_prices[item] = float(price) # Calculate the total cost of the purchased items total_cost = sum(item_prices[item] for item in purchased_items) return round(total_cost, 2)"},{"question":"Write a function that takes an integer `n` and returns the sum of all prime numbers less than `n`. Input: An integer `n`, where 2 ≤ n ≤ 10^6. Output: A single integer, the sum of all prime numbers less than `n`. Constraints: - Your solution should be efficient in terms of time complexity. - Use appropriate algorithms to ensure optimal performance for large values of `n`. Example: Input: 10 Output: 17 Explanation: Prime numbers less than 10 are 2, 3, 5, and 7. Their sum is 2 + 3 + 5 + 7 = 17.","solution":"def sum_of_primes_less_than(n): Returns the sum of all prime numbers less than n using the Sieve of Eratosthenes. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"Tom is preparing for a hiking expedition and needs to carry a specific mix of food items for a balanced diet. He has a list of food items, each with a known calorie count. Tom wants to pack his items such that the total number of calories in his backpack is exactly a specified amount K. He can either include an item or exclude it from his backpack. Can you help Tom determine if he can pack his backpack to match exactly K calories using the available food items? -----Input----- The first line contains an integer 1 le N le 100, the number of food items. The next line contains N integers, separated by spaces. These integers represent the calorie counts of the food items. Each calorie count is between 1 and 1000. The final line contains an integer 1 le K le 100000, which is the exact calorie count that Tom wants to carry. -----Output----- If it is possible to match exactly K calories, output \\"possible\\". Otherwise, output \\"impossible\\". -----Examples----- Sample Input: 4 200 300 250 600 750 Sample Output: possible Sample Input: 3 400 300 350 950 Sample Output: impossible","solution":"def can_pack_exact_calories(N, calorie_counts, K): Determines if it is possible to select a subset of items with their total calorie count equal to exactly K calories. :param N: Integer, the number of food items. :param calorie_counts: List of integers, the calorie counts of the food items. :param K: Integer, the target calorie count. :return: String \\"possible\\" if the backpack can have exactly K calories, otherwise \\"impossible\\". dp = [False] * (K + 1) dp[0] = True for calorie in calorie_counts: for j in range(K, calorie - 1, -1): if dp[j - calorie]: dp[j] = True return \\"possible\\" if dp[K] else \\"impossible\\""},{"question":"The secret agent needs to decode a series of messages to gather intelligence. Each message is encoded as a sequence of digits. The agent must determine the number of ways to decode each message into valid English words where \'1\' maps to \'A\', \'2\' maps to \'B\', ..., and \'26\' maps to \'Z\'. Input: - First line contains \'T\' test cases. - Each of the next \'T\' lines contains a single encoded message string. Output: - \'T\' lines, each containing the number of possible ways to decode the corresponding message string. Assumptions: - Each message string will contain only digits and no leading zeros. - The maximum length of the message string is 100. Constraints: 1 ≤ T ≤ 10^3 SAMPLE INPUT 3 12 226 0 SAMPLE OUTPUT 2 3 0 Explanation 1) For the 1st case, the message \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12), so there are 2 possible ways. 2) For the 2nd case, the message \\"226\\" can be decoded as \\"BBF\\" (2 2 6), \\"BZ\\" (2 26), or \\"VF\\" (22 6), so there are 3 possible ways. 3) For the 3rd case, the message \\"0\\" cannot be decoded into any valid string, so the output is 0.","solution":"def num_decodings(s): if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): one_digit = int(s[i-1]) two_digits = int(s[i-2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i-1] if 10 <= two_digits <= 26: dp[i] += dp[i-2] return dp[n] def decode_messages(messages): results = [] for message in messages: results.append(num_decodings(message)) return results"},{"question":"Takahashi is fond of unique characters in strings. Each time he squeezes a string, he can change one of its characters to any character of his choice. Given a string S, find the minimum number of squeezes needed to ensure that all characters in S are unique. -----Constraints----- - S is a string consisting of lowercase English letters. - The length of S is between 1 and 100 (inclusive). -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the minimum number of squeezes needed to make all characters in S unique. -----Sample Input----- aabbcc -----Sample Output----- 3 For example, we can change the second \'a\' to \'d\', the second \'b\' to \'e\', and the second \'c\' to \'f\', resulting in the string \'aabcdef\'.","solution":"def min_squeezes_to_unique(S): Returns the minimum number of squeezes needed to make all characters in S unique. # Initialize a counter for duplications count = 0 # Create a set to store unique characters unique_chars = set() for char in S: # If the character is already in the set, it means we need to change it if char in unique_chars: count += 1 else: # Otherwise, add it to the set unique_chars.add(char) return count"},{"question":"You are given a 2D grid of size n x m where each cell contains an integer which represents the height of that cell. Your task is to determine the size of the largest square sub-grid where all four corners of the square have the same height. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of rows and m is the number of columns. Each of the next n lines contain m integers (1 ≤ height ≤ 109) representing the grid heights. Output Output a single integer, the size of the largest square where all four corners have the same height. Examples Input 5 5 1 2 3 4 5 2 1 1 1 5 3 1 5 1 5 4 1 1 1 4 5 4 3 2 1 Output 3 Input 4 4 1 2 3 4 2 1 4 3 3 4 1 2 4 3 2 1 Output 1","solution":"def largest_square_with_same_corners(n, m, grid): max_size = 1 # The minimum possible square size is 1 # Checks all possible top-left corners of squares for i in range(n): for j in range(m): # Find the maximum length of a square that can fit from (i,j) for size in range(1, min(n - i, m - j)): if grid[i][j] == grid[i][j + size] == grid[i + size][j] == grid[i + size][j + size]: max_size = max(max_size, size + 1) return max_size"},{"question":"You are a software engineer working on a robotic delivery system. Your robots need to deliver packages to various locations in a city. The city is represented as a grid of size `n x n`. Initially, the robot is at the top-left corner `(0, 0)` and needs to deliver a package to the bottom-right corner `(n-1, n-1)`. The robot can move up, down, left, or right, but some cells in the grid may contain obstacles, making them impassable. Your task is to determine the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, your function should return -1. -----Input----- - The first line of input contains an integer `n` (`1 ≤ n ≤ 1000`), the size of the grid. - The next `n` lines each contain `n` integers `grid[i][j]` (`0 ≤ grid[i][j] ≤ 1`), representing the grid. A `0` indicates an empty cell, while a `1` indicates an obstacle. -----Output----- - Output a single integer, the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if there is no valid path. -----Examples----- Sample Input 1: 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 Sample Output 1: 7 Sample Input 2: 4 0 1 1 0 1 1 0 1 0 0 0 0 0 1 1 0 Sample Output 2: -1 -----Note----- In the first example, the shortest path from `(0, 0)` to `(3, 3)` is: `(0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3)` with a length of 7. In the second example, there is no valid path from the top-left corner to the bottom-right corner due to obstacles.","solution":"from collections import deque def shortest_path(n, grid): if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, n-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"A company uses a simplified typing assistant which only recognizes lowercase alphabets and whitespace. The assistant helps in converting a given text into a “zimbo” format. The rules for this conversion are: 1. Every alphabet must be replaced with the next alphabet. For example, \'a\' becomes \'b\', \'b\' becomes \'c\', and so on. \'z\' wraps around to become \'a\'. 2. Whitespace characters should remain unchanged. 3. The assistant only processes texts with a maximum length of 1000 characters. Your task is to write a program that accepts a line of input text, converts it according to the above rules, and prints the resulting \\"zimbo\\" formatted text. -----Input----- A single line containing a string of length between 1 and 1000 characters which consists of lowercase alphabets and whitespace. -----Output----- A single line containing the converted string according to the “zimbo” format. -----Examples----- Sample Input: hello world Sample Output: ifmmp xpsme Sample Input: zoo keeper Sample Output: app lffqfs","solution":"def zimbo_format(text): Converts the given text to zimbo format. Parameters: text (str): The input text consisting of lowercase alphabets and whitespace. Returns: str: The text converted to zimbo format. result = [] for char in text: if char == \' \': result.append(char) else: new_char = chr(((ord(char) - ord(\'a\') + 1) % 26) + ord(\'a\')) result.append(new_char) return \'\'.join(result)"},{"question":"You are given an integer array `arr`. You can choose any two adjacent elements in the array and swap them. Your goal is to obtain the maximum possible sum of the array elements after at most one swap. Example 1: Input: arr = [1, 3, 5, 4, 2] Output: 15 Explanation: Swapping elements 5 and 4 results in the array [1, 3, 4, 5, 2], which has a total sum of 15. The sum is unaffected by the swap. Example 2: Input: arr = [1, 2, 3, 4] Output: 10 Explanation: The array is already sorted so that any swap will maintain the sum as 10. Your Task: You don\'t need to read or print anything. Your task is to complete the function `maximumSum()` which takes integer array `arr` as input parameter and returns the maximum possible sum after doing the swap of adjacent elements at most once. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= |arr| <= 10^{4} 1 <= arr[i] <= 10^{6}","solution":"def maximumSum(arr): Returns the maximum sum of the array after swapping adjacent elements at most once. n = len(arr) if n == 1: return arr[0] # The sum of elements before any swaps are done. current_sum = sum(arr) # Finding the first pair of adjacent elements where arr[i] > arr[i+1] for i in range(n - 1): if arr[i] > arr[i + 1]: # Swap elements if it increases the sum new_sum = current_sum # Swapping will not change the sum, so we pick the current sum return new_sum # If no swap could increase the sum, return the sum of the original array return current_sum"},{"question":"Bob loves music, and he\'s been trying to sort his playlist in a special way. He has n songs in his playlist, each characterized by its \\"catchiness index\\" c_i. Bob wants his playlist to be sorted such that for any two songs i and j (i < j), if c_i neq c_j then the song with the higher \\"catchiness index\\" should appear before the song with the lower one. However, to make his life more challenging, Bob wants to allow multiple songs to have the same catchiness index, and if so, they should appear in the order they were originally in the playlist. Your task is to help Bob sort his playlist according to these criteria. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the number of songs in the playlist. The second line contains n integers c_1, c_2, ..., c_n — the catchiness indices of the songs in the initial playlist. Each catchiness index c_i is an integer (1 leq c_i leq 10^9). -----Output----- Output the catchiness indices of the songs after sorting them according to Bob\'s criteria. -----Example----- Input 5 5 3 9 1 5 Output 9 5 5 3 1 -----Note----- In the provided example, the sorted catchiness indices are [9, 5, 5, 3, 1]. The two songs with the catchiness index 5 remained in the same order they originally appeared in the playlist.","solution":"def sort_playlist(n, catchiness): Sorts the playlist according to the specified criteria: - Songs with higher catchiness index come before lower ones. - Songs with the same catchiness index remain in their original order. # Python\'s sorted function is stable, which means it maintains the original order # of equal elements, making it suitable for this task directly. return sorted(catchiness, key=lambda x: -x)"},{"question":"Alice loves solving puzzles, especially those that involve strings of text. She recently came across a unique puzzle that requires rearranging letters in words to create the longest possible palindrome. A palindrome is a word that reads the same backward as forward. Given a string, Alice wants to know the length of the longest palindrome that can be constructed using the letters of the string. Write a function to help Alice solve the problem. The function should take an input string containing only lowercase English letters and return the length of the longest palindrome that can be built with those letters. -----Input----- The first line of input contains an integer N, the number of test cases. Each of the next N lines contains a single string consisting of lowercase English letters. -----Output----- For each test case, output the length of the longest palindrome that can be formed. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ Length of each string ≤ 1000 - The string contains only lowercase English letters (\'a\' to \'z\'). -----Example----- Input: 3 abccccdd aabb xyz Output: 7 4 1 -----Explanation----- - In the first case, the longest palindrome that can be formed is \\"dccaccd\\" which has a length of 7. - In the second case, the longest palindrome is \\"abba\\" with a length of 4. - In the third case, the longest palindrome is any single character, \\"x\\", \\"y\\", or \\"z\\", with a length of 1.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be built with the letters of the string s. from collections import Counter letter_counts = Counter(s) length = 0 odd_found = False for count in letter_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length def solve(test_cases): results = [] for s in test_cases: results.append(longest_palindrome_length(s)) return results"},{"question":"In a distant land, there is a famous detective named Sherlock who is very fond of puzzles. One day, he encountered a lock which can only be opened by solving a unique problem. The lock has a sequence of `n` numbers, but to open it, Sherlock needs to find the maximum possible sum of any subarray of this sequence. A subarray is any contiguous part of the array. However, Sherlock can perform one special operation at most once: he can pick any subarray and negate every single number in it. Negating a number means multiplying the number by -1. Help Sherlock find the maximum possible sum of any subarray he can achieve with at most one negation operation. -----Input----- - The first line of the input contains an integer `T` denoting the number of test cases. - Each test case consists of two lines: * The first line contains an integer `n` which denotes the length of the sequence. * The second line contains `n` integers, denoting the sequence of numbers. -----Output----- For each test case, output a single line containing the maximum possible sum of any subarray (with at most one negation operation). -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 3 * 10^5 - -10^4 ≤ sequence[i] ≤ 10^4 -----Example----- Input: 3 4 2 -1 2 3 5 -1 -2 -3 -4 -5 3 1 2 3 Output: 8 5 6 -----Explanation----- Example case 1: The original sequence is [2, -1, 2, 3]. By negating the subarray [-1], the sequence becomes [2, 1, 2, 3] whose maximum subarray sum is 8. Example case 2: By negating the subarray [-5], the sequence becomes [-1 -2 -3 -4 5]. The maximum subarray sum is 5. Example case 3: The original sequence is [1, 2, 3]. No need to negate any subarray. The maximum subarray sum is 6.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum using Kadane\'s algorithm. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_sum_after_one_negation(n, nums): Returns the maximum subarray sum possible after at most one negation of any subarray. # Calculate max subarray sum without any negation max_normal = max_subarray_sum(nums) # If only one element, return the value itself or its negation (whichever is more) if n == 1: return max(nums[0], -nums[0]) # Calculate max subarray sum for negated subarray max_inverse = float(\'-inf\') for i in range(n): temp = nums[i] nums[i] = -nums[i] # Negate this element max_inverse = max(max_inverse, max_subarray_sum(nums)) nums[i] = temp # Restore to the original value return max(max_normal, max_inverse) def solve(T, sequences): Processes multiple test cases and returns the results as a list. results = [] for seq in sequences: n, nums = seq results.append(max_sum_after_one_negation(n, nums)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 sequences = [] for _ in range(T): n = int(data[index]) nums = list(map(int, data[index + 1:index + 1 + n])) sequences.append((n, nums)) index += 1 + n results = solve(T, sequences) for result in results: print(result)"},{"question":"In a land far away, there lives a wizard named Gandalf. Gandalf has n magical stones numbered from 1 to n. Each stone has a unique magical power value — an integer from 1 to 10^9. Gandalf wants to test your magical abilities and asks you to find the stone with the second highest magical power value. You can query Gandalf to compare two stones at a time. Gandalf will respond whether the power of the first stone is greater, less, or equal to the power of the second stone. However, you cannot compare more than 15 pairs of stones. Your task is to find and output the index of the stone with the second highest magical power value. Input The first line contains an integer n (2 ≤ n ≤ 500) — the number of magical stones. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the magical power values of the stones. Output Output a single integer — the index of the stone with the second highest magical power value among the stones. Interaction To compare two stones, output \\"! compare i j\\" (where 1 ≤ i, j ≤ n) to the standard output. Gandalf will respond with: - \\">\\" if the power of stone i is greater than the power of stone j - \\"<\\" if the power of stone i is less than the power of stone j - \\"=\\" if the power of stone i is equal to the power of stone j Remember, you cannot compare more than 15 pairs of stones. Example Input 5 9 2 1 6 5 Output 4 Explanation The magical powers are 9, 2, 1, 6, 5. The highest power value is 9 and the second highest is 6. The stone with the power value of 6 has index 4. Note You need to efficiently determine the second highest magical power using at most 15 comparisons. Consider how tournaments are conducted to identify ranks within limited comparisons.","solution":"def find_second_highest_stone(n, powers): # Simulated comparison function def compare(i, j): if powers[i-1] > powers[j-1]: return \\">\\" elif powers[i-1] < powers[j-1]: return \\"<\\" else: return \\"=\\" # Use a tournament style to find the maximum and second maximum import math # Single elimination tournament to find the maximum rounds = [] stones = list(range(1, n+1)) while len(stones) > 1: next_round = [] round_pairs = [] for i in range(0, len(stones) - 1, 2): if compare(stones[i], stones[i+1]) == \\">\\": next_round.append(stones[i]) round_pairs.append((stones[i], stones[i+1])) else: next_round.append(stones[i+1]) round_pairs.append((stones[i+1], stones[i])) if len(stones) % 2 == 1: next_round.append(stones[-1]) rounds.append(round_pairs) stones = next_round # The stone with the highest power max_stone = stones[0] # Find the second highest from the elements compared directly with the maximum stone potential_seconds = set() for round_pairs in rounds: for winner, loser in round_pairs: if winner == max_stone: potential_seconds.add(loser) second_highest_stone = potential_seconds.pop() for stone in potential_seconds: if compare(stone, second_highest_stone) == \\">\\": second_highest_stone = stone return second_highest_stone"},{"question":"You are given an integer array. Can you find the maximum absolute difference between any two elements in the array? Input Format The first line contains an integer T which denotes the number of test cases. T test cases follow. Each test case consists of two lines. The first line specifies an integer n, the number of elements in the array. The second line contains n space-separated integers, representing the elements of the array. Output Format For each test case, print the maximum absolute difference between any two elements in the array. Constraints 1 <= T <= 10^4 2 <= n <= 100 -10^6 <= array[i] <= 10^6 Sample Input 3 4 1 5 3 19 5 10 20 30 40 50 3 -10 -50 0 Sample Output 18 40 50 Explanation In the first test case, the maximum absolute difference is between 19 and 1, which is 18. In the second case, the maximum absolute difference is between 50 and 10, which is 40. In the third case, the maximum absolute difference is between -50 and 0, which is 50.","solution":"def max_absolute_difference(test_cases): Returns the maximum absolute difference between any two elements in the list for each test case. results = [] for case in test_cases: array = case max_diff = max(array) - min(array) results.append(max_diff) return results # Test case input parsing def parse_input(input_str): Parses the input string into the number of test cases and the list of arrays. input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) cases = [] line_idx = 1 for _ in range(t): n = int(input_lines[line_idx]) array = list(map(int, input_lines[line_idx + 1].strip().split())) cases.append(array) line_idx += 2 return cases"},{"question":"You are asked to implement a text-based stock price tracker. Your program should be capable of tracking a stock price over time and provide basic analysis based on the recorded prices. Each stock price record includes a date in \'YYYY-MM-DD\' format and a price, which is a positive floating point number. You will be given a series of stock price records, and you need to calculate the following metrics: 1. **Maximum Price**: The highest price recorded. 2. **Minimum Price**: The lowest price recorded. 3. **Average Price**: The average of all recorded prices. 4. **Price on Specific Date**: The price of the stock on a particular date. Note: - If there are multiple records for the same date, consider only the last recorded price for that date. - If querying the price on a specific date that has no record, return \\"No data available\\". **Input** The input consists of multiple lines of stock price records. Each line contains a date and a price separated by a space. You may assume the input is formatted correctly. The input ends with the line \\"END\\". After this, a query command follows: - The query command is either \\"MAX\\", \\"MIN\\", \\"AVG\\", or a date in the \'YYYY-MM-DD\' format. You may assume there will be only one query command. **Output** The output should be a single line: - If the query command is \\"MAX\\", output the maximum price. - If the query command is \\"MIN\\", output the minimum price. - If the query command is \\"AVG\\", output the average price rounded to 2 decimal places. - If the query command is a date, output the price on that date or \\"No data available\\". **Example** Input: ``` 2023-01-01 150.00 2023-01-02 155.00 2023-01-01 158.00 2023-01-03 160.00 END MAX ``` Output: ``` 160.00 ``` Input: ``` 2023-01-01 150.00 2023-01-02 155.00 2023-01-01 158.00 2023-01-03 160.00 END 2023-01-01 ``` Output: ``` 158.00 ```","solution":"def track_stock_prices(records, query): from collections import defaultdict import statistics prices = defaultdict(list) for record in records: if record != \\"END\\": date, price = record.split() price = float(price) prices[date].append(price) else: break # Using latest price for each date latest_prices = {date: price_list[-1] for date, price_list in prices.items()} all_prices = list(latest_prices.values()) if query == \\"MAX\\": return f\\"{max(all_prices):.2f}\\" elif query == \\"MIN\\": return f\\"{min(all_prices):.2f}\\" elif query == \\"AVG\\": return f\\"{statistics.mean(all_prices):.2f}\\" elif query in latest_prices: return f\\"{latest_prices[query]:.2f}\\" else: return \\"No data available\\""},{"question":"A company hired a new employee and needs to determine if their employment period overlaps with any notable company events taking place. Given the employment period of the new employee and a list of company events with their respective periods, determine which events overlap with the employee\'s tenure. -----Input----- The input consists of a single line containing the employee\'s start and end date in the format \\"YYYY-MM-DD YYYY-MM-DD\\", followed by a list of events. Each event consists of its name (a string without spaces) and its period in the format \\"YYYY-MM-DD YYYY-MM-DD\\", all separated by spaces. Each date is valid and the events are well-formed. Example: \\"2023-01-15 2023-12-31 CompanyPicnic 2023-07-04 2023-07-04 AnnualMeeting 2023-11-01 2023-11-03 Hackathon 2024-01-10 2024-01-12\\" -----Output----- Print the names of the events that overlap with the employee\'s employment period, each on a new line. If there are no overlapping events, print \\"No Overlapping Events\\". -----Examples----- Sample Input: \\"2023-01-15 2023-12-31 CompanyPicnic 2023-07-04 2023-07-04 AnnualMeeting 2023-11-01 2023-11-03 Hackathon 2024-01-10 2024-01-12\\" Sample Output: CompanyPicnic AnnualMeeting Note: \\"Hackathon\\" is not listed in the output because it does not overlap with the employee\'s employment period: 2023-01-15 to 2023-12-31.","solution":"from datetime import datetime def overlapping_events(employee_period, events): Determines which events overlap with the employee\'s employment period. :param employee_period: Tuple containing start and end date strings of the employee\'s employment. :param events: List of event tuples, each containing the name, start date, and end date of the event. :return: List of names of the events that overlap with the employee\'s employment period. employee_start, employee_end = [datetime.strptime(date, \\"%Y-%m-%d\\") for date in employee_period] overlapping_event_names = [] for event in events: event_name, event_start, event_end = event event_start = datetime.strptime(event_start, \\"%Y-%m-%d\\") event_end = datetime.strptime(event_end, \\"%Y-%m-%d\\") if not (event_end < employee_start or event_start > employee_end): overlapping_event_names.append(event_name) return overlapping_event_names def parse_input(input_string): Parses input string to employee period and events. :param input_string: Input string containing employee period and events. :return: Tuple of employee period and list of events. parts = input_string.split() employee_period = (parts[0], parts[1]) events = [] for i in range(2, len(parts), 3): event = (parts[i], parts[i+1], parts[i+2]) events.append(event) return employee_period, events def main(input_string): employee_period, events = parse_input(input_string) result = overlapping_events(employee_period, events) if result: for event in result: print(event) else: print(\\"No Overlapping Events\\")"},{"question":"You are given a grid map of N x M dimensions and a list of blocked cells. You need to determine the number of unique paths from the top-left corner of the grid (cell (0,0)) to the bottom-right corner (cell (N-1,M-1)). You can only move either down or right at any point in time and must avoid the blocked cells. Example 1: Input: N = 3, M = 3, BlockedCells = [(1,1)] Output: 2 Explanation: There are 2 unique paths from (0,0) to (2,2) avoiding the blocked cell at (1,1): 1. Right -> Down -> Down -> Right 2. Down -> Down -> Right -> Right Example 2: Input: N = 2, M = 2, BlockedCells = [] Output: 2 Explanation: There are 2 unique paths from (0,0) to (1,1): 1. Right -> Down 2. Down -> Right Your Task: You don\'t need to read input or print anything. Your task is to complete the function uniquePaths() which takes the dimensions N, M, and the list BlockedCells[] as inputs and returns the number of unique paths from (0,0) to (N-1, M-1). Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 <= N, M <= 100 0 <= len(BlockedCells) <= N*M BlockedCells contain unique cells in the grid. Grid doesn\'t have blocked cells at (0,0) and (N-1,M-1).","solution":"def uniquePaths(N, M, BlockedCells): # Create a 2D DP array initialized to 0 dp = [[0] * M for _ in range(N)] # If the starting cell is not blocked, set it to 1 if (0, 0) not in BlockedCells: dp[0][0] = 1 # Convert BlockedCells to a set for faster lookup blocked_set = set(BlockedCells) # Fill the DP array for i in range(N): for j in range(M): if (i, j) in blocked_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"You are tasked with designing a new tournament chart for a gaming competition. The tournament is played in multiple rounds. Each round eliminates half of the participants, so every game has exactly two participants and one winner who advances to the next round. Given the number of participants, determine how many rounds will be played to determine the champion. The number of participants will always be a power of 2 (e.g., 2, 4, 8, 16, etc.). Input to the function will be a single integer representing the number of participants. For example: ```python participants = 8 ``` The output of the function should be the number of rounds required to find the champion. ```python number_of_rounds(8) # return 3 ```","solution":"import math def number_of_rounds(participants): Returns the number of rounds required to determine the champion. :param participants: A power of 2 integer representing the number of participants. :return: The number of rounds needed. return int(math.log2(participants))"},{"question":"You are given a string consisting of lowercase English letters and your task is to remove duplicates in such a way that every character appears only once and the resultant string should be lexicographically smallest. Input A single line containing a string s (1 ≤ |s| ≤ 100000), consisting of only lowercase English letters. Output A single line containing the resultant string with no duplicate characters and in lexicographically smallest order. Example Input cbacdcbc Output acdb Explanation - The input string \\"cbacdcbc\\" has duplicates. - After removing duplicates and arranging to make the string lexicographically smallest, the output we get is \\"acdb\\".","solution":"def remove_duplicate_letters(s): Removes duplicate letters from the string s and returns the lexicographically smallest result with all unique letters. last_occurrence = {c: i for i, c in enumerate(s)} stack = [] seen = set() for i, c in enumerate(s): if c not in seen: while stack and c < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) stack.append(c) seen.add(c) return \'\'.join(stack)"},{"question":"Given a list of integers, your task is to create a function `second_largest(numbers)` that returns the second largest integer in the list. If the list contains fewer than two unique elements, return `None`. Example Inputs and Outputs: ```python second_largest([10, 15, 20, 20, 8]) #=> 15 second_largest([5, 3, 8, 8, 2]) #=> 5 second_largest([10, 10]) #=> None second_largest([5]) #=> None second_largest([]) #=> None ``` Note: Assume all integers in the list are non-negative.","solution":"def second_largest(numbers): Returns the second largest integer in the list. If the list contains fewer than two unique elements, return None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Given a string that represents an arithmetic expression composed of non-negative integers and the operators + and -, write a program to evaluate the expression and return the result. You need to consider the operator precedence and handle any number of spaces in the input. Note: You are not required to handle parentheses or anything other than the + and - operators. -----Input----- The input consists of a single line, which is the string representing the arithmetic expression. The length of the string will not exceed 10^5. -----Output----- Output a single integer, the result of evaluating the expression. -----Examples----- Input \\"3+5-2\\" Output 6 Input \\"10+20 - 5 + 8 - 3\\" Output 30 -----Explanation----- In the first example, the expression is \\"3+5-2\\", which evaluates to 3 + 5 - 2 = 6. In the second example, \\"10+20 - 5 + 8 - 3\\", after eliminating spaces, it evaluates to 10 + 20 - 5 + 8 - 3 = 30.","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression composed of non-negative integers and +, - operators, while handling spaces within the input expression. Args: expression (str): The arithmetic expression as a string Returns: int: The result of the evaluated expression clean_expr = expression.replace(\' \', \'\') result = 0 number = 0 operator = \'+\' for char in clean_expr: if char.isdigit(): number = number * 10 + int(char) else: if operator == \'+\': result += number elif operator == \'-\': result -= number number = 0 operator = char # Apply the last number if operator == \'+\': result += number elif operator == \'-\': result -= number return result"},{"question":"Jessica is organizing her book collection and has n stacks of books. Each book is represented by the integer k_i, indicating its unique ID. Jessica wants to organize her collection such that it forms a contiguous subarray of unique book IDs with the maximum possible sum of IDs. Help Jessica by writing a program to determine the sum of the IDs in the longest contiguous subarray with all unique elements. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), denoting the number of books. The second line contains n integers k_i (1 ≤ k_i ≤ 10^9) denoting the ID of each book in the order they are stacked. -----Output----- Print a single integer denoting the sum of the IDs in the longest contiguous subarray with all unique elements. -----Examples----- Input 6 4 2 4 5 6 4 Output 17 Input 5 5 1 3 5 1 Output 9 -----Note----- In the first example, the longest unique subarray is [2, 4, 5, 6], with the sum of 2 + 4 + 5 + 6 = 17. In the second example, the longest unique subarray is [1, 3, 5] or [3, 5, 1], with the sum of 1 + 3 + 5 = 9. Since duplicates are avoided, the sum is the same regardless of which subarray is chosen.","solution":"def max_unique_subarray_sum(n, book_ids): Returns the sum of the IDs in the longest contiguous subarray with all unique elements. start, max_sum, current_sum = 0, 0, 0 seen_books = {} for end in range(n): if book_ids[end] in seen_books: removing_idx = seen_books[book_ids[end]] for idx in range(start, removing_idx + 1): current_sum -= book_ids[idx] del seen_books[book_ids[idx]] start = removing_idx + 1 current_sum += book_ids[end] seen_books[book_ids[end]] = end max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A bookstore is organizing its inventory. Each book is identified by a unique numeric ID, which is stored in an array. The bookstore has a special offer: for any given subarray of book IDs, they will offer a certain number of free bookmarks. The number of free bookmarks is equal to the count of distinct book IDs in that subarray. The bookstore manager has a number of queries regarding subarrays. Each query asks for the number of distinct book IDs within a specified subarray of the inventory array. Help the bookstore manager by answering each of these queries. **Input:** The first line contains two integers n and q (1 le n le 100000, 1 le q le 100000) — the number of books in the inventory and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the IDs of the books in the inventory. Each of the next q lines contains two integers l and r (1 le l le r le n) — the 1-based indices describing the subarray for the query. **Output:** Print q lines, each containing one integer — the number of distinct book IDs within the given subarray. **Example:** Input: ``` 5 3 3 1 2 1 3 1 3 2 5 1 5 ``` Output: ``` 3 3 3 ``` **Explanation:** In the first query, the subarray is [3, 1, 2]. The distinct book IDs are 3, 1, and 2, so the output is 3. In the second query, the subarray is [1, 2, 1, 3]. The distinct book IDs are 1, 2, and 3, so the output is 3. In the third query, the subarray is [3, 1, 2, 1, 3]. The distinct book IDs are 3, 1, and 2, so the output is 3.","solution":"def count_distinct_book_ids(n, q, books, queries): Function to determine the number of distinct book IDs for each query. :param n: Integer, number of books in the inventory :param q: Integer, number of queries :param books: List of integers, IDs of the books :param queries: List of tuples, each tuple containing two integers l and r :return: List of integers, number of distinct book IDs for each query results = [] for l, r in queries: subarray = books[l-1:r] distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"Write a function that, given a string `S`, finds the length of the longest substring without repeating characters. ------ Input ------ You are given a single input string `S` of length N which contains only English letters (both uppercase and lowercase). ------ Output ------ Print a single integer — the length of the longest substring of `S` that contains no repeating characters. ------ Constraints ------ 1 ≤ N ≤ 10^5 `S` contains only English letters (both uppercase and lowercase) ------ Sample Input 1 ------ abcabcbb ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ Example case 1: The answer is \\"abc\\", with a length of 3. ------ Sample Input 2 ------ bbbbb ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ Example case 2: The answer is \\"b\\", with a length of 1. ------ Sample Input 3 ------ pwwkew ------ Sample Output 3 ------ 3 ------ Explanation 3 ------ Example case 3: The answer is \\"wke\\", with a length of 3. ------ Sample Input 4 ------ abcdabcbb ------ Sample Output 4 ------ 4 ------ Explanation 4 ------ Example case 4: The answer is \\"abcd\\", with a length of 4.","solution":"def longest_substring_without_repeating_characters(S): Returns the length of the longest substring without repeating characters. last_seen = {} start = 0 max_length = 0 for i, char in enumerate(S): if char in last_seen and last_seen[char] >= start: start = last_seen[char] + 1 last_seen[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"**Array Rotation** You are given an array of integers and a non-negative integer `k`. Your task is to implement a function `rotate_array(nums, k)` that rotates the array to the right by `k` steps. Here are the rules for rotating the array: 1. When `k` is greater than the array length, rotate the array by `k % len(nums)` steps instead. 2. The elements at the end of the array wrap around to the beginning. You are not allowed to use any additional arrays to perform the rotation (i.e., use only O(1) extra space). # Example ```python Input: nums = [1, 2, 3, 4, 5, 6, 7], k = 3 Output: [5, 6, 7, 1, 2, 3, 4] Input: nums = [-1, -100, 3, 99], k = 2 Output: [3, 99, -1, -100] ``` # Input - `nums`: A list of integers (1 <= len(nums) <= 10^5, -10^9 <= nums[i] <= 10^9) - `k`: A non-negative integer (0 <= k <= 10^9) # Output - Return the modified list `nums` after `k` rotations.","solution":"def rotate_array(nums, k): Rotates the array to the right by k steps. When k is greater than the array length, it rotates by k % len(nums) steps. Args: nums (list of int): The list of integers to rotate. k (int): The number of steps to rotate the array. Returns: list of int: The rotated list of integers. n = len(nums) k = k % n # Ensure k is within the bounds of the array length nums[:] = nums[-k:] + nums[:-k] return nums"},{"question":"Given a list of integers, write a function `find_second_largest` that returns the second largest number in the list. If there is no second largest number, return `None`. The list will always contain at least one integer. Examples: ```python find_second_largest([10, 4, 3, 2, 1, 5]) # returns 5 find_second_largest([1, 1, 1, 1]) # returns None find_second_largest([-2, -3, -1, -4]) # returns -2 ``` Constraints: - You may not use the built-in `sorted` function or any other sorting utilities. - You must achieve this in O(n) time complexity.","solution":"def find_second_largest(lst): if len(lst) < 2: return None first = second = float(\'-inf\') for number in lst: if number > first: second = first first = number elif first > number > second: second = number return second if second != float(\'-inf\') else None"},{"question":"Given a list of integers, write a function to determine whether any two distinct elements in the list sum to a target value. If such a pair exists, return the two numbers; otherwise, return \'NO PAIR\'. -----Constraints----- - List has at most 10^5 integers. - Integer values in the input list and target value can range from -10^9 to 10^9. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n t where: - n is the number of integers in the list. - a_1, a_2, ..., a_n are the integers in the list. - t is the target value. -----Output----- Output the two integers that sum up to the target value separated by a space. If there are multiple pairs, output any one of them. If no such pair exists, print \'NO PAIR\'. -----Sample Input----- 5 2 7 11 15 1 9 -----Sample Output----- 2 7 Explanation: 2 + 7 = 9, so the answer is 2 7. Since no other pairs in the example can sum to 9, 2 and 7 are printed.","solution":"def find_pair_with_sum(arr, target): Finds any two distinct elements in arr that sum to target. Parameters: arr (list): List of integers. target (int): Target sum value. Returns: tuple: Two integers that sum to target if found, otherwise \'NO PAIR\'. seen = {} for number in arr: if target - number in seen: return number, target - number seen[number] = True return \'NO PAIR\'"},{"question":"Given a grid of dimensions N x M, each cell of the grid contains a positive integer that represents the time it takes for a maze runner to pass through that cell. The maze runner starts from the top-left corner (0,0) and aims to reach the bottom-right corner (N-1, M-1) of the grid. The maze runner can only move to the right or down from any cell. You need to find the minimum time required for the maze runner to reach the destination. Example 1: Input: grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]] Output: 7 Explanation: 1 → 3 → 1 → 1 → 1 = 7 Example 2: Input: grid = [[1, 2, 3], [4, 5, 6]] Output: 12 Explanation: 1 → 2 → 3 → 6 = 12 Your Task: You don\'t need to read input or print anything. Your task is to complete the function minPathTime() which takes a 2D array grid as input and returns the minimum time required to reach the destination. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 100 1 ≤ grid[i][j] ≤ 100","solution":"def minPathTime(grid): Returns the minimum time required for the maze runner to reach the destination in the grid. n = len(grid) m = len(grid[0]) # Create a 2D array to store the minimum time to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the minimum time to reach the destination return dp[n-1][m-1]"},{"question":"To improve the city’s public transportation system, the mayor of the city has proposed a new bus route. The route can be represented as an array `a` of length `n`, where each element represents the number of passengers boarding the bus at that stop. The city has received q queries about the proposed route. Queries are of three types: 1. \\"1 l r x\\" — add x passengers to each bus stop in the range from l to r. 2. \\"2 l r x\\" — reduce the number of passengers at each bus stop in the range from l to r by x. 3. \\"3 l r\\" — find the maximum number of passengers at any single bus stop in the range from l to r. You are asked to provide the answers for all queries of the 3rd type. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of bus stops. The second line contains `n` integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 10^5) — the array representing the initial number of passengers at each stop. The third line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of queries. Next `q` lines contain queries in one of the following formats: * `1 l r x` (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 10^5), meaning that you must add `x` passengers at each bus stop in the range from `l` to `r`. * `2 l r x` (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 10^5), meaning that you must reduce the number of passengers at each bus stop in the range from `l` to `r` by `x`. (reduction is guaranteed not to create negative passenger counts) * `3 l r` (1 ≤ l ≤ r ≤ n), meaning that you must find the maximum number of passengers at any single bus stop in the range from `l` to `r`. It is guaranteed that there is at least one query of the 3rd type. # Output For each query of the 3rd type, print the answer on a new line. # Example Input ```plaintext 5 1 2 3 4 5 5 3 1 5 1 2 4 3 3 1 3 2 1 3 2 3 2 5 ``` Output ```plaintext 5 6 5 ``` # Note The first example’s queries work as follows: 1. The initial array is [1, 2, 3, 4, 5]. For the first query, the maximum number of passengers among stops 1 to 5 is 5. 2. The second query adds 3 passengers to each stop from index 2 to 4. The array becomes [1, 5, 6, 7, 5]. 3. The third query finds the maximum number of passengers among stops 1 to 3, which is 6. 4. The fourth query reduces the number of passengers by 2 at each stop from index 1 to 3. The array becomes [0, 3, 4, 7, 5]. 5. The fifth query finds the maximum number of passengers among stops 2 to 5, which is 7.","solution":"def bus_route(n, a, q, queries): results = [] for query in queries: parts = query.split() type_of_query = int(parts[0]) l = int(parts[1]) - 1 r = int(parts[2]) - 1 if type_of_query in [1, 2]: x = int(parts[3]) for i in range(l, r + 1): if type_of_query == 1: a[i] += x else: a[i] -= x elif type_of_query == 3: results.append(max(a[l:r + 1])) return results"},{"question":"You are given an integer array nums of length n. Determine if there are three distinct elements in the array whose sum is zero. If there are: 1. Print \\"YES\\" followed by the three elements in non-decreasing order. 2. If no such triplet exists, print \\"NO\\". -----Input----- The first line contains a single integer n (3 ≤ n ≤ 10^5) — the length of the array nums. The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9). -----Output----- If there exists a triplet (a, b, c) such that a + b + c = 0, print \\"YES\\" on the first line followed by three integers a, b, and c on the second line in non-decreasing order. If no such triplet exists, print \\"NO\\". -----Examples----- Input 6 -1 0 1 2 -1 -4 Output YES -1 -1 2 Input 5 1 2 3 4 5 Output NO Input 5 -2 -1 0 1 2 Output YES -2 0 2","solution":"def find_triplet(nums): This function takes a list of integers and returns a triplet that sums to zero if such a triplet exists, otherwise it returns \\"NO\\". nums.sort() n = len(nums) for i in range(n-2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i+1, n-1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: return \\"YES\\", sorted([nums[i], nums[left], nums[right]]) elif current_sum < 0: left += 1 else: right -= 1 return \\"NO\\" def print_triplet_result(n, nums): result = find_triplet(nums) if result == \\"NO\\": print(result) else: print(result[0]) print(\\" \\".join(map(str, result[1])))"},{"question":"Given an array of integers, nums, the task is to determine the number of unique triplets (a, b, c) such that a, b, and c belong to nums and a^2 + b^2 = c^2. In other words, count the number of unique Pythagorean triplets in the array. Example 1: Input: nums = [3, 1, 4, 6, 5] Output: 1 Explanation: There is one Pythagorean triplet (3, 4, 5). Example 2: Input: nums = [10, 4, 6, 12, 5] Output: 0 Explanation: There is no Pythagorean triplet in the array. Your Task: You don\'t need to read input or print anything. Complete the function countPythagoreanTriplets() which takes an array of integers, nums, as input parameter and returns the number of unique Pythagorean triplets. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10^3 1 <= nums[i] <= 10^6","solution":"def countPythagoreanTriplets(nums): Count the number of unique Pythagorean triplets (a, b, c) in the provided array. Parameters: nums (list): List of integers Returns: int: Number of unique Pythagorean triplets nums_squared = set([x ** 2 for x in nums]) count = 0 for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i]**2 + nums[j]**2 in nums_squared: count += 1 return count"},{"question":"You are given an array of length N consisting of positive integers. We define the \\"zigzag score\\" of an array as the number of indices i, 2 ≤ i ≤ N-1, for which the element at index i is either strictly greater than both its neighboring elements or strictly less than both its neighboring elements. Your task is to calculate the zigzag score of the given array. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. The test cases follow. - Each of the T test cases consists of two lines of input. - The first line of each test case contains an integer N, the length of the array. - The second line of each test case contains N space-separated integers representing the elements of the array. ------ Output Format ------ - For each test case, output a single line containing the zigzag score of the given array. ------ Constraints ------ 1 ≤ T ≤ 100 3 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{6} ------ Sample Input 1 ------ 2 5 1 3 2 5 4 4 1 4 2 3 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Test case 1: - Element at index 2 (3) is greater than both 1 and 2. - Element at index 3 (2) is less than both 3 and 5. - Element at index 4 (5) is greater than both 2 and 4. Thus, the zigzag score is 3. Test case 2: - Element at index 2 (4) is greater than both 1 and 2. - Element at index 3 (2) is less than both 4 and 3. Thus, the zigzag score is 2.","solution":"def zigzag_score(arr): Calculate the zigzag score of the given array. Args: arr: List[int] - An array of positive integers Returns: int - The zigzag score of the array N = len(arr) score = 0 for i in range(1, N - 1): if (arr[i] > arr[i - 1] and arr[i] > arr[i + 1]) or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1]): score += 1 return score def zigzag_scores_for_cases(test_cases): results = [] for case in test_cases: N, arr = case results.append(zigzag_score(arr)) return results # General input function for handling multiple test cases from input format def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) arr = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, arr)) index += N + 1 results = zigzag_scores_for_cases(test_cases) for result in results: print(result)"},{"question":"Professor Snape is preparing some potions for his late-night brewing session. He has N types of ingredients, and for each potion, he requires a specific quantity of some of these ingredients. There are M potions he wants to brew. Each potion has a unique complexity value representing the number of distinct ingredients it requires. Given the list of ingredients for each potion and their complexity values, Professor Snape wants to calculate the total complexity of all potions combined. He also wants to know the number of unique types of ingredients used across all potions. ----Input:---- - The first line will contain T, the number of test cases. Each test case consists of: - The first line containing two integers N and M, where N is the number of ingredient types and M is the number of potions. - The next M lines each contain a list of integers representing the indices of ingredients (1-based) required by each potion. ----Output:---- - For each test case, output two space-separated integers: 1. The total complexity of all potions combined. 2. The number of unique ingredient types used across all potions. ----Constraints:---- - 1 leq T leq 50 - 1 leq N, M leq 100 - 1 ≤ Number of ingredients per potion ≤ N ----Sample Input:---- 1 5 3 1 2 3 3 4 2 5 ----Sample Output:---- 7 5 ----EXPLANATION:---- For the given input, we have: - Potion 1 requires ingredients {1, 2, 3}, complexity = 3 - Potion 2 requires ingredients {3, 4}, complexity = 2 - Potion 3 requires ingredients {2, 5}, complexity = 2 The total complexity is 3 + 2 + 2 = 7. The unique ingredients are {1, 2, 3, 4, 5}, so there are 5 unique ingredient types used. Hence, the answer is \'7 5\'.","solution":"def potion_complexity_and_unique_ingredients(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] potions = test_cases[i][1] total_complexity = 0 unique_ingredients = set() for potion in potions: unique_ingredients.update(potion) total_complexity += len(potion) results.append((total_complexity, len(unique_ingredients))) return results"},{"question":"You are given a string containing parentheses `(` and `)`. Write a function named `minAddToMakeValid`/`min_add_to_make_valid`/`MinAddToMakeValid` that takes the string as input and returns the minimum number of parentheses you need to add to the string to make it valid. A string is considered valid if any left parenthesis `(` has a corresponding right parenthesis `)` and they are properly nested. For example: * For the input \\"())\\", the function should return 1. * For the input \\"(((\\", the function should return 3. * For the input \\"()\\", the function should return 0. * For the input \\"(()))(\\", the function should return 2.","solution":"def min_add_to_make_valid(s): Return the minimum number of parentheses needed to be added to make s valid. left_unmatched = 0 right_unmatched = 0 for char in s: if char == \'(\': left_unmatched += 1 elif char == \')\': if left_unmatched > 0: left_unmatched -= 1 else: right_unmatched += 1 return left_unmatched + right_unmatched"},{"question":"You are given two strings, `s` and `t`. Your task is to determine whether `t` is an anagram of a substring of `s`. In other words, you need to check if there exists a substring of `s` that has the same characters, and the same number of each character, as `t`. -----Input----- The first line contains one integer q (1 le q le 1000) — the number of queries. Each of the next q lines contains two strings `s` and `t` (1 le |s|, |t| le 10^5). The total length of all strings in all queries does not exceed 10^6. -----Output----- For each query, print \\"YES\\" if there exists a substring of `s` that is an anagram of `t`, and \\"NO\\" otherwise. -----Examples----- Input 3 acdbacdacb ab abcdefg fg aabbcc abc Output YES YES NO -----Note----- For the first query, `s = \\"acdbacdacb\\"` and `t = \\"ab\\"`. The substring `\\"ba\\"` within `s` is an anagram of `t`. For the second query, `s = \\"abcdefg\\"` and `t = \\"fg\\"`. The substring `\\"fg\\"` within `s` is an exact match to `t`, which is trivially an anagram. For the third query, `s = \\"aabbcc\\"` and `t = \\"abc\\"`. Though `s` contains the characters of `t`, there is no contiguous substring that is an anagram of `t`, so the output is \\"NO\\".","solution":"def is_anagram_of_substring(s, t): Determines if there is any substring of s which is an anagram of t. from collections import Counter len_s, len_t = len(s), len(t) if len_t > len_s: return \\"NO\\" count_t = Counter(t) window_counter = Counter(s[:len_t]) if window_counter == count_t: return \\"YES\\" for i in range(len_t, len_s): window_counter[s[i]] += 1 window_counter[s[i - len_t]] -= 1 if window_counter[s[i - len_t]] == 0: del window_counter[s[i - len_t]] if window_counter == count_t: return \\"YES\\" return \\"NO\\" def process_queries(queries): result = [] for s, t in queries: result.append(is_anagram_of_substring(s, t)) return result"},{"question":"In a 2D grid of size n times m, each cell contains an integer or the character \\"B\\". Your task is to find the minimum number of operations required to ensure that, starting from each \\"B\\", there are no other \\"B\\" within a Manhattan distance of d. An operation consists of changing a cell containing \\"B\\" to a specific integer value. The Manhattan distance between two cells (i_1, j_1) and (i_2, j_2) in the grid is given by the formula |i_1 - i_2| + |j_1 - j_2|. Ensure that after all operations, the grid meets the required condition for every \\"B\\", and output the grid\'s state. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case starts with two space-separated integers n and m (1 le n, m le 300) — the size of the grid, and a single integer d (1 le d le 300) — the required minimum Manhattan distance. The following n lines each contain m characters that are either an integer (represented as a single digit \'0\'-\'9\') or \'B\'. The sum of n times m across all test cases does not exceed 30000. -----Output----- For each test case, print the state of the grid after applying the operations. If solving is impossible, print \\"Impossible\\". If multiple solutions exist, any valid one will be accepted. -----Examples----- Input 2 3 3 2 B0B 000 B0B 4 5 3 B302B 00000 00000 B400B Output B0B 000 B0B B302B 00000 00000 B400B -----Note----- In the first test case, all \\"B\\" are already satisfying the given Manhattan distance, so no operation is needed. In the second test case, all \\"B\\" are already satisfying the given distance requirement, so no operation is needed.","solution":"def ensure_distance(grid, n, m, d): Bs = [] for i in range(n): for j in range(m): if grid[i][j] == \'B\': Bs.append((i, j)) for x1, y1 in Bs: for x2, y2 in Bs: if (x1, y1) != (x2, y2) and abs(x1 - x2) + abs(y1 - y2) < d: return \\"Impossible\\" output = [\'\'.join(row) for row in grid] return output # Function to parse input and produce output for each test case def solve_problems(t, test_cases): results = [] for case in test_cases: n, m, d, grid = case result = ensure_distance(grid, n, m, d) results.append(result) return results"},{"question":"You are given two integer arrays `nums1` and `nums2` sorted in non-decreasing order and an integer `k`. You need to find `k` pairs `(u, v)` which consists of one element from `nums1` and one element from `nums2` such that the sum of `u` and `v` is minimized. Return the `k` pairs with the smallest sums in ascending order. If there are multiple pairs with the same sum, return the pairs in lexicographical order. # Input - The first line contains an integer `n` (0 leq n leq 1000), the size of `nums1`. - The second line contains `n` integers representing the elements of `nums1`. - The third line contains an integer `m` (0 leq m leq 1000), the size of `nums2`. - The fourth line contains `m` integers representing the elements of `nums2`. - The fifth line contains an integer `k` (0 leq k leq 1000), the number of pairs to find. # Output - Print each of the `k` pairs in a new line in the form `(u, v)`, where `u` is selected from `nums1` and `v` is selected from `nums2`. The pairs should be printed in the order of their sums and lexicographically if there is a tie. # Example Input ``` 2 1 7 3 2 3 4 3 ``` Output ``` (1, 2) (1, 3) (1, 4) ``` Input ``` 2 1 1 2 2 3 1 ``` Output ``` (1, 2) ``` # Note In the first example, the pairs `(1, 2)`, `(1, 3)`, `(1, 4)` have the smallest sums. In the second example, we need only one pair and `(1, 2)` is the pair with the smallest sum. # Constraints - The elements of `nums1` and `nums2` are integers in the range [-10^9, 10^9].","solution":"import heapq def k_smallest_pairs(nums1, nums2, k): Find the k pairs (u, v) which consists of one element from nums1 and one element from nums2 such that the sum of u and v is minimized. if not nums1 or not nums2 or k <= 0: return [] heap = [] result = [] for i in range(min(len(nums1), k)): heapq.heappush(heap, (nums1[i] + nums2[0], i, 0)) while k > 0 and heap: sum_, i, j = heapq.heappop(heap) result.append((nums1[i], nums2[j])) if j + 1 < len(nums2): heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1)) k -= 1 return result"},{"question":"Hikers enjoying their journey often want to log the number of the last checkpoint they reach given a limited amount of time and a set pace for each leg of the journey. Your task is to determine the furthest checkpoint a hiker can reach given the time they have and their pace between each checkpoint. -----Input----- The input begins with two integers 1 leq n leq 10000, representing the number of checkpoints, and 1 leq t leq 10^9, representing the amount of time the hiker has. The following line contains n integers 1 leq p_i leq 10000, where each p_i denotes the time required to move from checkpoint i to checkpoint (i + 1). -----Output----- Output a single integer representing the number of the last checkpoint the hiker can reach within the given time. -----Examples----- Sample Input: 5 15 2 3 5 2 6 Sample Output: 4 Sample Input: 4 10 1 2 3 4 Sample Output: 4","solution":"def furthest_checkpoint(n, t, p): Returns the index of the furthest checkpoint reachable within given time t. Parameters: n (int): Number of checkpoints t (int): Total available time p (list): List of times required to travel between successive checkpoints Returns: int: The index of the furthest reachable checkpoint (1-indexed) total_time = 0 for i in range(n): total_time += p[i] if total_time > t: return i return n"},{"question":"Petya is studying number sequences and has stumbled upon a new type of problem. You are given a list of exactly five integer numbers. Petya needs to determine if the sequence forms a Fibonacci-like sequence. A Fibonacci-like sequence is defined as a sequence where every number from the third one is the sum of the two preceding ones. For example, the sequence 2, 3, 5, 8, 13 is Fibonacci-like because 3 = 2 + 1, 5 = 3 + 2, 8 = 5 + 3, and 13 = 8 + 5. Help Petya determine if the given sequence is Fibonacci-like. If so, print the next number in the sequence. If the sequence is not Fibonacci-like, print -1. -----Input----- The first line contains exactly five integer numbers between 1 and 1000, inclusively. -----Output----- Print the required number. If the given sequence is a Fibonacci-like sequence, print the next progression element. If the sequence is not Fibonacci-like, print -1. -----Examples----- Input 1 2 3 5 8 Output 13 Input 1 2 4 7 11 Output -1 -----Note----- In the first example, 2 is 1 + 1, 3 is 1 + 2, 5 is 2 + 3, and 8 is 3 + 5, so the next number in the Fibonacci-like sequence should be 8 + 5 = 13. In the second example, the sequence does not follow the Fibonacci-like pattern.","solution":"def is_fibonacci_like_sequence(seq): Determines if the provided sequence is Fibonacci-like and returns the next number in the sequence. If not, returns -1. # Check if the sequence follows the Fibonacci-like property for i in range(2, 5): if seq[i] != seq[i - 1] + seq[i - 2]: return -1 # If it is a Fibonacci-like sequence, return the next number return seq[3] + seq[4]"},{"question":"Create a function that evaluates a sequence of stock prices and determines the maximum possible profit that can be achieved by buying and selling the stock once. The buying and selling should be done on different days. For each day, you will receive an integer representing the stock price on that day. You need to find the maximum profit that can be obtained by performing one buy-sell transaction. If no profit can be achieved, return 0. Example prices = [7, 1, 5, 3, 6, 4] The maximum profit can be achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6), yielding a profit of 5. Function Description Complete the maxProfit function in the editor below. maxProfit has the following parameter: - int prices[n]: a list of integers representing the stock prices on each day Returns - int: the maximum profit that can be achieved from one buy-sell transaction or 0 if no profit is possible Input Format The first line contains an integer n, the total number of days. The second line contains n space-separated integers describing the prices on each day. Constraints 2leq nleq10^5 0leq prices[i] leq 10^4 Output Format Print the maximum profit that can be achieved from one buy-sell transaction, or 0 if no profit is possible. Sample Input 0 6 7 1 5 3 6 4 Sample Output 0 5 Explanation 0: The maximum profit can be achieved by buying on day 2 and selling on day 5, which yields a profit of 5. Sample Input 1 5 7 6 4 3 1 Sample Output 1 0 Explanation 1: No profit can be achieved since the stock prices decrease every day. Thus, the maximum profit is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from one buy-sell transaction or 0 if no profit is possible. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Write a function that accepts an integer array and returns the second largest unique value. If there is no such value, return -1. ```Python For example: second_largest([4, 1, 3, 2, 5]) = 4 # Unique values are [4, 1, 3, 2, 5], second largest is 4. second_largest([1, 2, 2, 3, 3]) = 2 # Unique values are [1, 2, 3], second largest is 2. second_largest([4, 4, 4, 4]) = -1 # Unique values are [4], less than 2 unique values, so return -1. second_largest([]) = -1 # No elements in the array, so return -1. ``` More examples in the test cases. Good luck!","solution":"def second_largest(arr): Returns the second largest unique value in the array. If there is no such value, returns -1. if len(arr) < 2: return -1 unique_values = list(set(arr)) if len(unique_values) < 2: return -1 unique_values.sort() return unique_values[-2]"},{"question":"The Kingdom of Abacus is known for its intricate mathematical puzzles. One of the most challenging puzzles involves the Palace\'s famous Column Maze, a vertical labyrinth filled with columns of varying heights that the solver must navigate efficiently. The goal is to find the least number of jumps needed to reach the top of the labyrinth starting from the bottom. A jump from one column allows the solver to reach any column that is at or below the current height. However, the labyrinth is designed to be tricky, and there\'s only one correct path to reach the top with the minimum number of jumps. Given a sequence of non-negative integers representing the heights of columns from the bottom (starting point) to the top (ending point), write a program to determine the minimum number of jumps required to reach the top. # Input The input consists of multiple datasets. Each dataset is as follows: - An integer `n` (1 ≤ n ≤ 50,000), which is the number of columns. - A line with `n` integers separated by spaces, each representing the height of a column (0 ≤ height ≤ 100,000). # Output For each dataset, output the minimum number of jumps needed to reach the top from the bottom. If it\'s impossible to reach the top, output `-1`. # Example Input ``` 5 4 2 0 3 2 6 0 1 2 3 4 5 4 2 3 1 1 0 ``` Output ``` 2 5 1 ``` Explanation: - In the first example, starting from height 4, the solver can jump directly to the final column of height 2 in 2 jumps. - In the second example, the solver must make 5 jumps to progress through each successive height. - In the third example, starting from height 2, the solver can jump directly to the column of height 1, completing the maze in 1 jump. - The fourth example indicates the end of the input.","solution":"def min_jumps_to_reach_top(n, column_heights): Function to determine the minimum number of jumps needed to reach the top of the labyrinth from the bottom. :param n: Number of columns :param column_heights: List of column heights :return: Minimum number of jumps needed or -1 if impossible if n == 0: return 0 jumps = [float(\'inf\')] * n jumps[0] = 0 for i in range(1, n): for j in range(i): if jumps[j] != float(\'inf\') and column_heights[j] >= column_heights[i]: if jumps[j] + 1 < jumps[i]: jumps[i] = jumps[j] + 1 break return jumps[-1] if jumps[-1] != float(\'inf\') else -1 # Function to process multiple datasets def process_datasets(datasets): results = [] for n, heights in datasets: results.append(min_jumps_to_reach_top(n, heights)) return results"},{"question":"You are working on an inventory management system for a small warehouse. Each item in the warehouse is identified by a unique ID and has an associated quantity. Occasionally, you need to perform operations to correct errors in the recorded quantities. Write a program that processes a list of inventory operations and computes the final quantities for each item. Each operation is either adding or removing a specific quantity of an item. If an operation results in a negative quantity for any item, treat that item\'s quantity as zero. Input The input is given in the following format: n operation_1 operation_2 ... operation_n The first line contains the number of operations n (1 ≤ n ≤ 10000). Each of the next n lines describes an operation, consisting of an item ID, an operation type (\'add\' or \'remove\'), and a quantity (1 ≤ quantity ≤ 1000). The item ID is an integer (1 ≤ ID ≤ 1000). Output For each item that has a non-zero final quantity, output a line in the format: ID quantity The item IDs should be printed in ascending order. Examples Input 5 1 add 50 2 add 20 1 remove 30 3 add 40 2 remove 25 Output 1 20 3 40 Input 4 1 add 100 1 remove 50 2 add 25 2 remove 30 Output 1 50","solution":"def process_inventory_operations(n, operations): inventory = {} for operation in operations: ID, op_type, quantity = operation.split() ID = int(ID) quantity = int(quantity) if ID not in inventory: inventory[ID] = 0 if op_type == \'add\': inventory[ID] += quantity elif op_type == \'remove\': inventory[ID] -= quantity if inventory[ID] < 0: inventory[ID] = 0 result = [(ID, quantity) for ID, quantity in sorted(inventory.items()) if quantity > 0] return result # Example usage: # n = 5 # operations = [\\"1 add 50\\", \\"2 add 20\\", \\"1 remove 30\\", \\"3 add 40\\", \\"2 remove 25\\"] # print(process_inventory_operations(n, operations))"},{"question":"Maria loves playing with strings. She recently came across an interesting problem: Given a string, she needs to find out the length of the longest substring without repeating characters. Maria is busy and has asked you for help in solving this problem. Write a program that takes an input string and returns the length of the longest substring that does not contain any repeating characters. Input Format First line contains a single integer T which is the number of test cases. The next T lines each contain a string. Output Format For each test case, print the length of the longest substring without repeating characters on a new line. Constraints 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 10^5 S contains only printable ASCII characters. SAMPLE INPUT 2 abcabcbb bbbbb SAMPLE OUTPUT 3 1","solution":"def longest_substring_without_repeating_characters(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(test_cases): results = [] for s in test_cases: results.append(longest_substring_without_repeating_characters(s)) return results"},{"question":"Given a set of line segments in a 2D plane, determine if any two line segments intersect each other. Input The first line is an integer n (2 ≤ n ≤ 50) representing the number of line segments. The next n lines each contain four floating point numbers x_1 , y_1 , x_2 , y_2 representing the endpoints of the i^{th} line segment. The coordinates x_1 , y_1 , x_2 , y_2 are between -100 and 100. Output Output YES if any two line segments intersect and NO if no two line segments intersect. Example Input 4 0.0 0.0 1.0 1.0 0.0 1.0 1.0 0.0 1.0 0.0 2.0 1.0 1.0 1.0 2.0 0.0 Output YES","solution":"def do_lines_intersect(x1, y1, x2, y2, x3, y3, x4, y4): def ccw(ax, ay, bx, by, cx, cy): return (cy - ay) * (bx - ax) > (by - ay) * (cx - ax) def intersect(ax, ay, bx, by, cx, cy, dx, dy): return ccw(ax, ay, cx, cy, dx, dy) != ccw(bx, by, cx, cy, dx, dy) and ccw(ax, ay, bx, by, cx, cy) != ccw(ax, ay, bx, by, dx, dy) return intersect(x1, y1, x2, y2, x3, y3, x4, y4) def any_intersections(line_segments): n = len(line_segments) for i in range(n): for j in range(i + 1, n): if do_lines_intersect(*line_segments[i], *line_segments[j]): return \\"YES\\" return \\"NO\\" def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) segments = [tuple(map(float, lines[i + 1].split())) for i in range(n)] return segments def check_intersection(input_str): segments = parse_input(input_str) return any_intersections(segments)"},{"question":"Little Larry has a new toy. It\'s a string S of uppercase English letters. Larry loves symmetry, so he wants to make the string palindromic. He can perform the following operation any number of times: - Select any character of the string and replace it with any other character. Your task is to determine the minimum number of operations required to make the string a palindrome. Constraints * 1 leq |S| leq 1000 * S consists of uppercase English letters only (A-Z). **Input** Input is given from Standard Input in the following format: S **Output** Print a single integer, the minimum number of operations required to make the string a palindrome. **Example** Input ABCD Output 2 Explanation: One way to change \\"ABCD\\" to a palindromic string with minimum operations is \\"ABBA\\" or \\"DBCD\\". Both require 2 operations. Input AABB Output 0 Explanation: \\"AABB\\" can be rearranged to \\"ABBA\\" or \\"BAAB\\", both of which are palindromes and require zero operations since only rearrangement is needed.","solution":"def min_operations_to_palindrome(S): Returns the minimum number of operations required to make the string S a palindrome. n = len(S) operations = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: operations += 1 return operations"},{"question":"Given a string S, the task is to print the reverse of the string after removing any non-alphanumeric characters and converting it to lowercase. Example 1: Input: S = \\"A man, a plan, a canal: Panama!\\" Output: \\"amanaPlanacanalPanama\\" Explanation: After removing non-alphanumeric characters and converting the string to lowercase, it becomes \\"amanaplanacanalpanama\\". Reversing this string gives \\"amanaPlanacanalPanama\\". Example 2: Input: S = \\"Hello, World!\\" Output: \\"dlrowolleh\\" Explanation: After removing non-alphanumeric characters and converting the string to lowercase, it becomes \\"helloworld\\". Reversing this string gives \\"dlrowolleh\\". Your Task: You don\'t need to read input. Your task is to complete the function reverseFormattedString() which takes a string S as input parameter and prints the modified reversed string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= S.length <= 200","solution":"def reverse_formatted_string(S): Given a string S, removes non-alphanumeric characters, converts to lowercase, and returns the reversed string. cleaned_string = \'\'.join(char.lower() for char in S if char.isalnum()) reversed_string = cleaned_string[::-1] return reversed_string"},{"question":"Nemesis, the infamous warlock, challenges brave adventurers to solve his mystical puzzle to obtain the ancient scroll of wisdom. The challenge goes as follows: 1. Consider a sequence of parentheses represented as a string S consisting of characters \'(\' and \')\'. We define a valid sequence of parentheses as one where every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are correctly nested. 2. Nemesis has the magical power to remove at most k characters from the string S, and he asks you to provide the longest possible valid sequence of parentheses that can be obtained by removing at most k characters. Given the string S and an integer k, help the adventurers by determining the longest valid sequence of parentheses possible. Notes: 1. The length of S (|S|) is between 1 and 100. 2. 1 ≤ k ≤ 50. ------ Input ------ The first line contains an integer T (number of test cases, around 100). T cases follow. Each case contains the string S and the integer k separated by a space. ------ Output ------ For each case, output the length of the longest valid sequence of parentheses that can be obtained by removing at most k characters. ----- Sample Input 1 ------ 3 (())) 1 ())( 2 ()())() 1 ----- Sample Output 1 ------ 4 2 6 ----- Explanation 1 ------ Case 1: By removing the last \')\' only, we get the sequence \'(())\' which is 4 characters long. Case 2: By removing the second and third characters, we get the sequence \'()\' which is 2 characters long. Case 3: By removing any one of the last two \')\' characters, we get the sequence \'()()()\' which is 6 characters long.","solution":"def longest_valid_parentheses(S, k): max_length = 0 n = len(S) # Helper function to get the count of valid parentheses from the string def count_valid(S): stack = [] count = 0 for ch in S: if ch == \'(\': stack.append(ch) elif stack: stack.pop() count += 2 return count # Generate all possible strings by removing at most k characters def generate_combinations(S, index, removed_count, current_string): nonlocal max_length if removed_count > k: return if index == n: valid_count = count_valid(current_string) max_length = max(max_length, valid_count) return # Exclude current character generate_combinations(S, index + 1, removed_count + 1, current_string) # Include current character generate_combinations(S, index + 1, removed_count, current_string + S[index]) generate_combinations(S, 0, 0, \\"\\") return max_length"},{"question":"Given an array A consisting of n integers, your task is to find the subarray with the greatest product of its elements (considering non-empty subarrays only). A subarray is a contiguous part of an array and can be represented as `A[l...r]` which means it starts at index l and ends at index r for `0 <= l <= r < n`. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) - the size of the array. The second line contains n integers separated by spaces - array A where `-10^5 ≤ A[i] ≤ 10^5`. -----Output----- Print a single line containing the greatest product of a subarray. -----Example----- Input: 4 2 3 -2 4 Output: 6 -----Explanation----- In this case, the subarray with the greatest product is `[2, 3]` which gives us a product of `2 * 3 = 6`. -----Note----- Consider edge cases such as when the array contains negative numbers, zeros, and positive numbers.","solution":"def maxSubarrayProduct(arr): n = len(arr) max_ending_here = arr[0] min_ending_here = arr[0] max_so_far = arr[0] for i in range(1, n): temp_max = max_ending_here max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i]) min_ending_here = min(arr[i], temp_max * arr[i], min_ending_here * arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Problem description: Alice is organizing a small robotics competition. She has m robotic kits and n participants. Each participant must receive exactly 1 robotic kit to enter the competition. Alice cannot split any of the kits. She wants to know if it is possible for all participants to get a kit and if there are any kits left over after distribution. Write a program to help Alice determine this. Input The first line contains number of test cases T. Each of the next T lines contains two integers m and n - the number of robotic kits and the number of participants, respectively. Output For each test case, output in a new line \\"YES\\" or \\"NO\\" based on whether it is possible to distribute the kits to all participants. If it is possible, also output the number of remaining kits after distribution on the same line. Constraints 1 ≤ T ≤ 1000 1 ≤ m, n ≤ 1000 Example Input: 3 10 5 7 8 15 15 Output: YES 5 NO YES 0","solution":"def can_distribute_robots(T, test_cases): Determines if all participants can receive a robot kit and the number of remaining kits after distribution. Args: T (int): The number of test cases. test_cases (list): A list of tuples, each containing two integers (m, n). Returns: list: Each element is a string \\"YES x\\" or \\"NO\\", where x is the number of remaining kits if distribution is possible. results = [] for m, n in test_cases: if m >= n: results.append(f\\"YES {m - n}\\") else: results.append(\\"NO\\") return results"},{"question":"A sequence of numbers is called a zigzag sequence if the differences between successive numbers strictly alternate between positive and negative. In other words, a sequence ( a_1, a_2, ldots, a_n ) is a zigzag sequence if ( (a_{i+1} - a_i) times (a_{i+2} - a_{i+1}) < 0 ) holds for every i from 1 to n-2. Given a sequence of integers, determine the length of the longest zigzag subsequence that can be found. -----Constraints----- - The initial sequence length is between 1 and 1000. - Each integer in the sequence is between -10000 and 10000. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print an integer representing the length of the longest zigzag subsequence in the input sequence. -----Sample Input----- 6 1 7 4 9 2 5 -----Sample Output----- 6 The longest zigzag subsequence is the sequence itself: 1, 7, 4, 9, 2, 5.","solution":"def longest_zigzag_subsequence_length(seq): n = len(seq) if n == 0: return 0 if n == 1: return 1 up = [1] * n down = [1] * n for i in range(1, n): for j in range(i): if seq[i] > seq[j]: up[i] = max(up[i], down[j] + 1) elif seq[i] < seq[j]: down[i] = max(down[i], up[j] + 1) return max(max(up), max(down)) # Sample Usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) seq = list(map(int, data[1:])) print(longest_zigzag_subsequence_length(seq))"},{"question":"Given an integer N, find the smallest positive integer X such that the product of the digits of X equals N. If no such number exists, return -1. The digits of X may be rearranged in any order. For example, for N = 10, X = 25 or X = 52 (since 2 * 5 = 10) are valid answers. INPUT: The first line of input contains an integer T, representing the number of test cases. Each of the next T lines contains an integer N. OUTPUT: For each test case, output a single line containing the smallest X if it exists, otherwise output -1. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 SAMPLE INPUT: 4 10 36 1 7 SAMPLE OUTPUT: 25 49 1 7 Explanation: For the first case with N = 10, the smallest X is \'25\' because 2 * 5 = 10 and \'25\' is lexicographically smaller than \'52\'. For the second case with N = 36, the digits 4 and 9 can multiply to 36, and \'49\' is the smallest number that can be formed. For the third case with N = 1, the smallest X is \'1\' because 1 is the smallest positive integer whose digits multiply to 1. For the fourth case with N = 7, the smallest X is \'7\' since 7 is itself a number whose digits multiply to 7, and no rearrangement is necessary.","solution":"def smallest_number_with_product(N): if N == 1: return 1 digits = [] for i in range(9, 1, -1): while N % i == 0: digits.append(i) N //= i if N != 1: return -1 digits.sort() result = int(\\"\\".join(map(str, digits))) return result def process_cases(T, cases): results = [] for N in cases: results.append(smallest_number_with_product(N)) return results"},{"question":"# Problem statement You are given an array of N integers representing the height of hurdles in a hurdle race. Each participant can jump a fixed height, K, and must clear all hurdles in order to successfully complete the race. If the participant cannot clear a hurdle, they must drink a potion that allows them to jump higher. Each potion increases their jump height by 1 unit. Your task is to calculate the minimum number of potions required for a participant to successfully complete the race. Input constraints: - 1 leq N leq 1000 - 1 leq K leq 1000 - 1 leq height[i] leq 1000 # Input The input consists of two lines: 1. The first line contains two integers, N and K. 2. The second line contains N space-separated integers representing the heights of the hurdles. # Output Output a single integer, the minimum number of potions required to clear all hurdles. # Sample input 1 ``` 5 4 1 6 3 5 2 ``` # Sample output 1 ``` 2 ``` # Explanation In this example, the participant can jump to a height of 4 initially. To clear the second hurdle (height 6), they need 2 potions. The other hurdles can be cleared without any additional potions. # Sample input 2 ``` 5 7 2 5 4 5 2 ``` # Sample output 2 ``` 0 ``` # Explanation In this example, the participant can jump to a height of 7 initially. No potions are needed since all hurdles can be cleared with the initial jump height. # Sample input 3 ``` 6 1 1 2 3 4 5 6 ``` # Sample output 3 ``` 5 ``` # Explanation In this example, the participant\'s initial jump height is 1. They need 5 potions to be able to jump over the highest hurdle (height 6). # Note Use the following implementation signature: ```python def minimum_potions(N: int, K: int, heights: List[int]) -> int: # your code here ```","solution":"from typing import List def minimum_potions(N: int, K: int, heights: List[int]) -> int: Calculate the minimum number of potions needed for the participant to clear all hurdles. Args: N : int : the number of hurdles K : int : the maximum height the participant can jump naturally heights : List[int] : the heights of the hurdles Returns: int : the minimum number of potions required max_hurdle_height = max(heights) potions_needed = max(0, max_hurdle_height - K) return potions_needed"},{"question":"*This is the third Kata in the Data Manipulation series. This series is meant to test our ability to manipulate and transform data structures.* Data Manipulation #3 - Transforming Nested Lists Given a list of nested lists where each inner list contains integers that represent temperatures recorded in a specific region, write a function to transform this data. Requirements Write a function `transform_temperatures(data)` that takes a list of nested lists `data` and returns a dictionary where: - The keys are the index of each region (starting from 1). - The values are dictionaries with the following keys: - `\\"average\\"`: the average temperature for that region. - `\\"max\\"`: the maximum temperature recorded in that region. - `\\"min\\"`: the minimum temperature recorded in that region. Example ```python data = [ [72, 75, 78, 79, 74, 73], [65, 68, 71, 64, 66], [81, 83, 85, 87], ] result = transform_temperatures(data) ``` Output: ```python { 1: {\\"average\\": 75.2, \\"max\\": 79, \\"min\\": 72}, 2: {\\"average\\": 66.8, \\"max\\": 71, \\"min\\": 64}, 3: {\\"average\\": 84.0, \\"max\\": 87, \\"min\\": 81}, } ``` Notes - Ensure proper data handling and assume that each inner list is non-empty. - You may use standard library functions to calculate average, max, and min. - Round the average temperatures to the nearest tenth using `round(value, 1)`.","solution":"def transform_temperatures(data): Transforms a list of nested lists containing temperature readings into a dictionary with statistics for each region. Params: - data (list of list of int): List where each inner list contains temperatures for a region. Returns: - dict: Dictionary where keys are region indices (1-based) and values are dictionaries with \'average\', \'max\', and \'min\' values for each region. result = {} for index, temps in enumerate(data): region_index = index + 1 average_temp = round(sum(temps) / len(temps), 1) max_temp = max(temps) min_temp = min(temps) result[region_index] = { \\"average\\": average_temp, \\"max\\": max_temp, \\"min\\": min_temp, } return result"},{"question":"A group of university students has implemented a new system for managing their sports club membership. Each member has a unique ID and a set of favorite sports they play. The system needs to process queries to check if a specified sport is among the favorite sports of a particular member. You are required to develop this feature. Each student can have multiple favorite sports, and queries will ask about one sport for a specific student by their ID. Input Format The first line of input contains the number of students - N. The next N lines contain information about each student: The first integer on each line is the student ID. The second integer is the number of favorite sports, S. The following S strings are the favorite sports. The following line contains an integer, Q, which represents the number of queries. The next Q lines contain a student ID and a sport for which the query is made. Output Format For each query, print \\"Yes\\" if the sport is among the favorite sports of the specified student, otherwise, print \\"No\\". Constraints 1 < N, Q < 100 1 < ID < 1000 1 < S < 10 Length of each sport string is at most 25. SAMPLE INPUT 3 101 2 basketball tennis 102 1 soccer 103 3 baseball basketball swimming 2 101 tennis 103 soccer SAMPLE OUTPUT Yes No Develop a function based on the above description to process the inputs and generate the correct outputs for such queries.","solution":"def process_membership_queries(n, students_info, q, queries): Function to process membership queries. Parameters: n (int): Number of students. students_info (list of tuples): Each tuple contains student ID, number of favorite sports, and the sports. q (int): Number of queries. queries (list of tuples): Each tuple contains a student ID and a sport. Returns: list of str: \\"Yes\\" if the sport is among the favorite sports of the specified student, otherwise \\"No\\". student_sports = {} for info in students_info: student_id = info[0] sports = set(info[2:]) student_sports[student_id] = sports results = [] for query in queries: student_id = query[0] sport = query[1] if student_id in student_sports and sport in student_sports[student_id]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Write a program to determine whether a given number is a \\"happy number.\\" A happy number is a number which eventually reaches 1 when replaced by the sum of the square of each digit. If it loops endlessly in a cycle which does not include 1, then it is not a happy number. Example 1: Input: 19 Output: true Explanation: 1² + 9² = 1 + 81 = 82 8² + 2² = 64 + 4 = 68 6² + 8² = 36 + 64 = 100 1² + 0² + 0² = 1 Example 2: Input: 2 Output: false Explanation: 2² = 4 4² = 16 1² + 6² = 1 + 36 = 37 3² + 7² = 9 + 49 = 58 5² + 8² = 25 + 64 = 89 8² + 9² = 64 + 81 = 145 1² + 4² + 5² = 1 + 16 + 25 = 42 4² + 2² = 16 + 4 = 20 2² + 0² = 4 4² = 16 (cycle will repeat) Note: Input is within the 32-bit signed integer range: [−231, 231 − 1].","solution":"def is_happy(n): Determine whether a given number is a happy number. def get_next(number): return sum(int(char) ** 2 for char in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"In a city, there are N houses arranged in a line. Each house has a certain amount of money kept inside it. Unfortunately, the houses have a security system connected such that if two adjacent houses are robbed on the same night, the security system will trigger an alarm. Given an array of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without triggering the security system. -----Input----- - The first line contains an integer N, the number of houses. - The second line contains N non-negative integers, where the i-th integer represents the amount of money in the i-th house. -----Output----- Print a single integer, the maximum amount of money you can rob tonight without triggering the alarm. -----Constraints----- - 1 le N le 10^5 - 0 le amount of money in each house le 10^4 -----Example Input----- 6 5 3 4 11 2 8 -----Example Output----- 24 -----Explanation----- - Rob houses with money [5, 11, 8] for a total of 24 without triggering the alarm.","solution":"def max_robbery(N, money): if N == 0: return 0 if N == 1: return money[0] dp = [0] * N dp[0] = money[0] dp[1] = max(money[0], money[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[N-1]"},{"question":"Given an array A of size N containing integers, your task is to return the number of unique elements in the array that have at least one duplicate element also present in the array. Example 1: Input: N = 7 A[] = {1, 2, 3, 2, 1, 4, 5} Output: 2 Explanation: The elements \'1\' and \'2\' have duplicates in the array. Example 2: Input: N = 5 A[] = {10, 20, 20, 10, 10} Output: 2 Explanation: The elements \'10\' and \'20\' have duplicates in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countUniqueWithDuplicates() which takes the array A[] and its size N as inputs and returns the number of unique elements that have duplicates. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 1 <= A[i] <= 10^9","solution":"def countUniqueWithDuplicates(A, N): Returns the number of unique elements in the array that have at least one duplicate element also present in the array. element_count = {} for element in A: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 count_of_duplicates = sum(1 for times in element_count.values() if times > 1) return count_of_duplicates"},{"question":"You are organizing a treasure hunt in a large mansion. The mansion is represented as a m times n grid, with some rooms containing obstacles and others open for travel. To make the hunt more interesting, you place some hidden traps in the rooms, and you want the participants to avoid these traps. Write a program that, given the grid, calculates the number of unique paths from the top-left corner (1, 1) of the grid to the bottom-right corner (m, n). The participants can only move right, down, left, or up. Additionally, ensure that participants do not enter rooms with traps. If no path exists, return `NO PATH`. -----Input----- The first line contains two integers m and n (1 leq m, n leq 1000). The following m lines contain n characters each. Each character is either: - `.` indicating an open room - `#` indicating an obstacle - `T` indicating a trap -----Output----- Output a single integer representing the number of unique paths from (1, 1) to (m, n). If no such path exists, output `NO PATH`. -----Examples----- Sample Input 1: 3 3 ... .#. ... Sample Output 1: 2 Sample Input 2: 3 3 .T. .#. .T. Sample Output 2: NO PATH","solution":"def unique_paths(m, n, grid): Returns the number of unique paths from top-left to bottom-right of the grid, avoiding obstacles and traps. # Edge case where start or end is a trap or obstacle if grid[0][0] != \\".\\" or grid[m-1][n-1] != \\".\\": return \\"NO PATH\\" # Initialize a 2D dp array with zeroes dp = [[0]*n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(m): for j in range(n): if grid[i][j] == \\".\\": if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] if i < m - 1: dp[i][j] += dp[i+1][j] if j < n - 1: dp[i][j] += dp[i][j+1] result = dp[m-1][n-1] return result if result > 0 else \\"NO PATH\\""},{"question":"Given a list of words, you are tasked with finding two distinct words such that by concatenating them in either order, the resulting string is a palindrome. A palindrome is a word that reads the same forwards as backwards. If there are multiple pairs, return any one of them. If no such pair exists, return an empty list. ```python words = [\\"bat\\", \\"tab\\", \\"cat\\"] # \\"battab\\" is a palindrome as well as \\"tabbat\\", so the answer can be [\\"bat\\", \\"tab\\"] or [\\"tab\\", \\"bat\\"] find_palindrome_pair(words) == [\\"bat\\", \\"tab\\"] words = [\\"abcd\\", \\"dcba\\", \\"lls\\", \\"s\\", \\"sssll\\"] # \\"abcd\\" + \\"dcba\\" is a palindrome, and \\"s\\" + \\"lls\\" is a palindrome and \\"lls\\" + \\"s\\" is also a palindrome # any one of the answers can be considered correct find_palindrome_pair(words) == [\\"abcd\\", \\"dcba\\"] or find_palindrome_pair(words) == [\\"s\\", \\"lls\\"] or find_palindrome_pair(words) == [\\"lls\\", \\"s\\"] words = [\\"abc\\", \\"def\\", \\"ghi\\"] # no two distinct words form a palindrome when concatenated, so the answer is an empty list find_palindrome_pair(words) == [] ``` *Note*: Ensure that the function you implement checks both concatenation orders (word1 + word2 and word2 + word1) when looking for a palindrome.","solution":"def find_palindrome_pair(words): def is_palindrome(s): return s == s[::-1] word_set = set(words) for word in words: reversed_word = word[::-1] for i in range(len(word) + 1): prefix, suffix = reversed_word[:i], reversed_word[i:] if prefix in word_set and prefix != word and is_palindrome(suffix): return [word, prefix] if suffix in word_set and suffix != word and is_palindrome(prefix): return [suffix, word] return [] # Examples to demonstrate the function print(find_palindrome_pair([\\"bat\\", \\"tab\\", \\"cat\\"])) # should return [\\"bat\\", \\"tab\\"] or [\\"tab\\", \\"bat\\"] print(find_palindrome_pair([\\"abcd\\", \\"dcba\\", \\"lls\\", \\"s\\", \\"sssll\\"])) # expect one of the valid palindrome pairs print(find_palindrome_pair([\\"abc\\", \\"def\\", \\"ghi\\"])) # should return []"},{"question":"Professor X is developing a new AI system to detect and prevent suspicious activities in a smart city. One of the components of the system requires tracking the movements of vehicles to detect potential anomalies. Each vehicle sends periodic position updates, which consist of the vehicle ID, its current coordinates (x, y), and its speed in the x and y directions (vx, vy). The goal is to find out which vehicles have traveled the farthest distance over a given period. You are tasked with writing a program that calculates the total distance each vehicle has traveled over a specified time period and identifies the vehicle that has traveled the farthest. The movement of the vehicle can be calculated using the formula for distance traveled in a straight line: [ text{distance} = sqrt{(Delta x)^2 + (Delta y)^2} ] where ( Delta x = vx times t ) and ( Delta y = vy times t ). Input: The input consists of multiple datasets. Each dataset is given in the following format: ``` t N id1 x1 y1 vx1 vy1 id2 x2 y2 vx2 vy2 :: idN xN yN vxN vyN ``` - The first line contains the time period ( t ) (1 ≤ ( t ) ≤ 1000) and the number of vehicles ( N ) (1 ≤ ( N ) ≤ 100). - The following ( N ) lines contain the vehicle ID, initial coordinates (x, y), and speed components (vx, vy). The number of datasets does not exceed 50, and the end of input is indicated by a line containing two zeros: `0 0`. Output: For each dataset, print the ID of the vehicle that has traveled the farthest distance over the given time period on one line. Example Input: ``` 10 3 V1 0 0 1 1 V2 0 0 2 2 V3 10 10 0 0 5 2 V4 -5 -5 3 4 V5 3 5 1 2 0 0 ``` Example Output: ``` V2 V4 ```","solution":"import math def find_farthest_vehicle(datasets): results = [] for dataset in datasets: t, N, vehicles = dataset max_distance = -1 farthest_vehicle = \\"\\" for vehicle in vehicles: vid, x, y, vx, vy = vehicle distance = math.sqrt((vx * t) ** 2 + (vy * t) ** 2) if distance > max_distance: max_distance = distance farthest_vehicle = vid results.append(farthest_vehicle) return results"},{"question":"A local bookstore receives shipments of books that need to be placed on the shelves. Each book has a unique ISBN number and a weight. The bookstore staff wants to place the books in a specific order to minimize the effort required to put them on the shelves. You are given information about each book, including its ISBN number and weight. Your task is to determine the order in which the books should be placed on the shelves such that the total lifting effort is minimized. If two books have the same weight, they should be placed in the order of their ISBN numbers. Example 1: Input: books = [[9781234567897, 1.2], [9789876543210, 3.4], [9781122334455, 2.0], [9786677889900, 1.2]] Output: [9781234567897, 9786677889900, 9781122334455, 9789876543210] Explanation: Books with weights 1.2 are placed based on their ISBN numbers first, followed by books with weights 2.0 and 3.4. Example 2: Input: books = [[9781111111111, 5.0], [9782222222222, 5.0], [9783333333333, 5.0]] Output: [9781111111111, 9782222222222, 9783333333333] Explanation: All books have the same weight, so they are placed in the order of their ISBN numbers. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function arrangeBooks() which takes a 2D array books, where each sub-array represents a book with its ISBN number and weight, and the size n, and return the array of ISBN numbers in the order in which books should be placed on the shelves. The driver code takes care of the printing. Expected Time Complexity: O(N*LOG(N)). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5 1.0 ≤ weight ≤ 50.0","solution":"def arrangeBooks(books): Arrange books optimally by their order of placement on shelves. Parameters: books (list): A list of lists where each sublist contains the ISBN number and weight of the book Returns: list: A list of ISBN numbers ordered by the minimal total lifting effort # Sort the books first by weight, then by ISBN in case of the same weight books_sorted = sorted(books, key=lambda x: (x[1], x[0])) # Extract and return the sorted ISBN numbers return [book[0] for book in books_sorted]"},{"question":"Given a string `s`, find the length of the longest substring without repeating characters. -----Input----- - A single line containing string `s` (0 ≤ |s| ≤ 10^5), where `|s|` is the length of the string. The string consists of English letters, digits, symbols, and spaces. -----Output----- - Print an integer representing the length of the longest substring without repeating characters. -----Examples----- Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"A group of friends are playing a board game that involves rolling two six-sided dice. To add some excitement, they decided to introduce a special rule: If the absolute difference between the two numbers rolled is a prime number, they will perform a special action. Your task is to write a function that takes two numbers representing the outcome of the dice rolls and determines whether the absolute difference between them is a prime number. Input: The input consists of two integers representing the numbers on the top faces of the two dice that were rolled. Output: Output \\"YES\\" if the absolute difference between the two numbers is a prime number, otherwise output \\"NO\\". Constraints: - Each number representing the dice roll will be between 1 and 6 inclusive. Example: Input: 5 2 Output: YES Input: 4 4 Output: NO Input: 6 1 Output: YES","solution":"def is_prime(n): Helper function to check if a number is a prime number. if n <= 1: return False if n in (2, 3): return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def special_action(dice1, dice2): Determines whether the absolute difference between two dice rolls is a prime number. Parameters: dice1 (int): Result of the first dice roll dice2 (int): Result of the second dice roll Returns: str: \\"YES\\" if the absolute difference is a prime number, otherwise \\"NO\\" diff = abs(dice1 - dice2) if is_prime(diff): return \\"YES\\" else: return \\"NO\\""},{"question":"In the kingdom of Zuul, there are n towns connected by m bidirectional roads. Each road has a given weight representing the amount of time it takes to travel that road. The townspeople are looking to create a centralized delivery hub which will serve all other towns by delivering goods. Your task is to determine which town should be selected as the hub such that the maximum time required to deliver goods from this hub to any other town is minimized. In other words, you need to find one town where, when chosen as the hub, the longest shortest-path to any other town is minimized. Input The first line contains two integers n (1 ≤ n ≤ 200,000) and m (1 ≤ m ≤ 500,000). The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 105), describing a bidirectional road between towns u and v, with travel time w. Output Print the town that should be selected as the hub and the maximum delivery time from the hub to any other town. If there are multiple solutions, print any. Example Input 5 7 1 2 4 1 3 2 2 4 7 2 3 1 3 4 3 3 5 1 4 5 2 Output 3 3","solution":"import heapq from collections import defaultdict def minimize_max_delivery_time(n, m, roads): def dijkstra(source): dist = {i: float(\'inf\') for i in range(1, n+1)} dist[source] = 0 pq = [(0, source)] while pq: current_distance, u = heapq.heappop(pq) if current_distance > dist[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) min_max_distance = float(\'inf\') best_hub = -1 for town in range(1, n+1): dist = dijkstra(town) max_distance = max(dist.values()) if max_distance < min_max_distance: min_max_distance = max_distance best_hub = town return best_hub, min_max_distance"},{"question":"Alice and Bob are playing a game with an array A of N integers. The game goes as follows: 1. Alice starts and takes one element from the array, subtracting its value from her total score. 2. Bob follows and takes one element from the remaining array, subtracting its value from his total score. 3. The rounds alternate between Alice and Bob until all elements are taken. The objective is to minimize their final scores. At the end of the game, the player with the minimum score wins. Both Alice and Bob are optimal players and both strive to minimize their final scores using optimal strategies. Given an array A, determine the minimum scores of Alice and Bob after they have both played optimally. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains one integer N, the size of the array. - The next line contains N space-separated integers, where the i^{th} integer denotes A_{i}. ------ Output Format ------ For each test case, print two space-separated integers in a single line: the minimum scores of Alice and Bob if both played optimally. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ A_{i} ≤ 10^{5} ------ Sample Input 1 ------ 3 4 4 1 2 3 2 5 10 3 8 7 6 ------ Sample Output 1 ------ 4 6 10 5 7 8 ------ Explanation 1 ------ Test case 1: Alice picks 1 then Bob picks 3, Alice picks 2 and Bob picks 4. Scores are Alice: 3+1 = 4, Bob: 4+2 = 6. Test case 2: Alice picks 5, Bob picks 10. Scores are Alice: 5, Bob: 10. Test case 3: Alice picks 6, Bob picks 8, Alice picks 7. Scores are Alice: 6+7, Bob: 8. Note: In this problem, players only aim to minimize their own scores, not to maximize the other player’s score.","solution":"def optimal_scores(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = sorted(test_cases[i][1], reverse=True) alice_score, bob_score = 0, 0 for j in range(N): if j % 2 == 0: alice_score += A[j] else: bob_score += A[j] results.append((alice_score, bob_score)) return results # Example usage: # T = 3 # test_cases = [(4, [4, 1, 2, 3]), (2, [5, 10]), (3, [8, 7, 6])] # print(optimal_scores(T, test_cases)) # Output: [(4, 6), (10, 5), (7, 8)]"},{"question":"Given a string containing a sequence of characters and wildcards (denoted by \'?\'), write a function that returns all possible strings formed by replacing each wildcard with either \'a\' or \'b\'. Example 1: Input: s = \\"a?b\\" Output: [\\"aab\\", \\"abb\\"] Example 2: Input: s = \\"??\\" Output: [\\"aa\\", \\"ab\\", \\"ba\\", \\"bb\\"] Your Task: You don\'t need to read input or print anything. Your task is to complete the function wildcardReplace() that takes the input string s as a parameter and returns a list of all possible strings formed by replacing wildcards. Expected Time Complexity: O(2^n) where n is the number of wildcards. Expected Auxiliary Space: O(2^n) Constraints: - 1 <= length of s <= 20 - s only contains lowercase alphabetical characters and the wildcard \'?\'","solution":"def wildcardReplace(s): Returns all possible strings formed by replacing each wildcard (\'?\') with either \'a\' or \'b\'. def helper(prefix, remaining): if not remaining: results.append(prefix) return if remaining[0] == \'?\': helper(prefix + \'a\', remaining[1:]) helper(prefix + \'b\', remaining[1:]) else: helper(prefix + remaining[0], remaining[1:]) results = [] helper(\'\', s) return results"},{"question":"Write a `Python` function ```python def letter_combinations(digits: str) -> str ``` that given a string containing digits ranging from 2 to 9 inclusive, return all possible letter combinations that the number could represent. This is similar to the mapping on a traditional phone keypad. For example: ```python letter_combinations(\\"23\\") === [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] letter_combinations(\\"\\") === [] letter_combinations(\\"2\\") === [\\"a\\",\\"b\\",\\"c\\"] ``` Note: The input string can be empty, meaning that no digits are inputted. All initial combinations should be returned in lexicographical order.","solution":"def letter_combinations(digits: str) -> list: Returns all possible letter combinations that the given digits could represent based on the traditional phone keypad. if not digits: return [] digit_to_letters = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def generate_combinations(prefix, remaining_digits): if not remaining_digits: combinations.append(prefix) return current_digit = remaining_digits[0] letters = digit_to_letters[current_digit] for letter in letters: generate_combinations(prefix + letter, remaining_digits[1:]) combinations = [] generate_combinations(\\"\\", digits) return combinations"},{"question":"Aerospace Navigation Simulator You have been tasked with developing a program to simulate a simplified space navigation system. In an asteroid field, a spacecraft must navigate from its starting position to a destination by making a series of moves. The field is represented by a grid, and the spacecraft can move in four directions: up, down, left, and right. Each cell in the grid can be either empty space, an asteroid, the starting position, or the destination. The spacecraft can move to any empty space, but cannot move through asteroids. You are given the dimensions of the grid, the positions of asteroids, the starting position, and the destination position. Your goal is to determine the minimum number of moves required for the spacecraft to reach the destination from the starting position. If it is impossible to reach the destination, output -1. # Input The input consists of: - The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 500), which represent the number of rows and columns of the grid, respectively. - The second line contains two integers `sx` and `sy` (0 ≤ sx < N, 0 ≤ sy < M), the starting position of the spacecraft. - The third line contains two integers `dx` and `dy` (0 ≤ dx < N, 0 ≤ dy < M), the destination position. - The fourth line contains an integer `K` (0 ≤ K ≤ N*M), the number of asteroids. - The next `K` lines each contain two integers `ax` and `ay` (0 ≤ ax < N, 0 ≤ ay < M), the positions of the asteroids. # Output Output a single integer representing the minimum number of moves required for the spacecraft to reach the destination. If it is impossible to reach the destination, output -1. # Example Input: ``` 5 5 0 0 4 4 3 1 1 1 3 2 2 ``` Output: ``` 8 ``` In this example, the grid is a 5x5 grid, with the starting position at (0,0), the destination at (4,4), and there are asteroids at positions (1,1), (1,3), and (2,2). The minimum number of moves required for the spacecraft to reach the destination is 8.","solution":"from collections import deque def minimum_moves(N, M, sx, sy, dx, dy, asteroids): # Initialize the grid and visited matrix grid = [[0] * M for _ in range(N)] visited = [[False] * M for _ in range(N)] # Mark the positions of the asteroids for ax, ay in asteroids: grid[ax][ay] = 1 # 1 represents an asteroid # Directions for movement (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Helper function to check if a cell is within bounds and not an asteroid def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == 0 and not visited[x][y] # BFS starts with the starting node queue = deque([(sx, sy, 0)]) # (x, y, distance) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() # Check if we\'ve reached the destination if (x, y) == (dx, dy): return dist # Explore all possible directions for dir_x, dir_y in directions: new_x, new_y = x + dir_x, y + dir_y if is_valid(new_x, new_y): visited[new_x][new_y] = True queue.append((new_x, new_y, dist + 1)) # If destination is never reached return -1"},{"question":"In a faraway village, there is a festival where people light candles to celebrate. Each candle can burn for exactly 1 hour. They want to celebrate the festival for exactly `N` hours continuously using these candles, but there is a twist: They can recycle the leftover wax to form new candles. For every `M` leftover units of wax, they can form a new candle. Given the number of initial candles and the amount of wax required to form a new candle, determine how many hours they can continuously celebrate the festival. INPUT: The first line contains the number of test cases T. The next T lines follow. Each line contains two integers C and M. C is the number of initial candles and M is the amount of leftover wax required to form a new candle. OUTPUT: Print the total hours of celebration for each test case. Constraints: 1 ≤ T ≤ 1000 1 ≤ C ≤ 100000 1 ≤ M ≤ 100000 SAMPLE INPUT 2 4 2 6 3 SAMPLE OUTPUT 7 8","solution":"def hours_of_celebration(T, test_cases): results = [] for i in range(T): C, M = test_cases[i] total_hours = 0 leftover_wax = 0 while C > 0: total_hours += C leftover_wax += C C = leftover_wax // M leftover_wax %= M results.append(total_hours) return results # Example for manual testing if __name__ == \\"__main__\\": T = 2 test_cases = [(4, 2), (6, 3)] print(hours_of_celebration(T, test_cases)) # Output should be [7, 8]"},{"question":"# Introduction Connect 4 is a two-player connection game in which the players first choose a color and then take turns dropping colored discs from the top into a seven-column, six-row vertically suspended grid. The pieces fall straight down, occupying the next available space within the column. The objective of the game is to be the first to form a horizontal, vertical, or diagonal line of four of one\'s own discs. The game can also end in a draw when the board is completely filled with discs and neither player has managed to connect four in a row. # Task Your task is to implement a class called ConnectFour that allows two players to play the game with a specified number of rows and columns. You need to implement a method make_move(player, column) that allows a player to drop a disc into the specified column. If a player wins the game after making a move, the method should return the player number. Otherwise, it should return 0. If a move is invalid (e.g., the column is already full), the method should return -1. # Rules 1. The integer rows and cols will be passed when the class is initialized. 2. Player numbers will be either 1 or 2, corresponding to the two players. 3. The method make_move(player, column) will be called to drop a disc into the specified column. # Returns The method make_move(player, column) should return: - The player number if the player wins the game after making the move. - 0 if the move is valid but does not result in a win. - -1 if the move is invalid. # Example 1 Initialize Initialize a 6-row, 7-column ConnectFour game. ```python game = ConnectFour(6, 7) ``` Game Play Player 1 drops a disc into column 0. ```python game.make_move(1, 0) # Returns 0 ``` Player 2 drops a disc into column 1. ```python game.make_move(2, 1) # Returns 0 ``` Player 1 drops a disc into column 0. ```python game.make_move(1, 0) # Returns 0 ``` Player 2 drops a disc into column 1. ```python game.make_move(2, 1) # Returns 0 ``` Player 1 drops a disc into column 0. ```python game.make_move(1, 0) # Returns 0 ``` Player 2 drops a disc into column 1. ```python game.make_move(2, 1) # Returns 0 ``` Player 1 drops a disc into column 0. ```python game.make_move(1, 0) # Returns 1 (Player 1 wins) ```","solution":"class ConnectFour: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.board = [[0 for _ in range(cols)] for _ in range(rows)] def make_move(self, player, column): if column < 0 or column >= self.cols: return -1 # Find the next open row in the column for row in range(self.rows-1, -1, -1): if self.board[row][column] == 0: self.board[row][column] = player if self.check_winner(player, row, column): return player return 0 # Column is full return -1 def check_winner(self, player, row, col): # Check horizontally count = 0 for c in range(max(0, col-3), min(self.cols, col+4)): if self.board[row][c] == player: count += 1 if count == 4: return True else: count = 0 # Check vertically count = 0 for r in range(max(0, row-3), min(self.rows, row+4)): if self.board[r][col] == player: count += 1 if count == 4: return True else: count = 0 # Check diagonally (bottom-left to top-right) count = 0 for i in range(-3, 4): r = row + i c = col + i if 0 <= r < self.rows and 0 <= c < self.cols: if self.board[r][c] == player: count += 1 if count == 4: return True else: count = 0 # Check diagonally (top-left to bottom-right) count = 0 for i in range(-3, 4): r = row - i c = col + i if 0 <= r < self.rows and 0 <= c < self.cols: if self.board[r][c] == player: count += 1 if count == 4: return True else: count = 0 return False"},{"question":"You have been tasked with implementing a queue-like structure that can also reverse its elements from time to time. Specifically, you need to create a queue that supports the following operations: 1. enqueue(x): Add an integer x to the end of the queue. 2. dequeue(): Remove and return the integer at the front of the queue. If the queue is empty, return \\"Queue is empty\\". 3. reverse(): Reverse the order of the elements in the queue. Write a program to process a series of commands (one per line) to manipulate the queue as described. Input The first line contains an integer t, the number of commands. The next t lines each contain a command, which can be one of \\"enqueue x\\", \\"dequeue\\", or \\"reverse\\". Output For each \\"dequeue\\" command, output the integer that was removed from the front of the queue. If the queue is empty, output \\"Queue is empty\\". Example Input 8 enqueue 1 enqueue 2 enqueue 3 reverse dequeue enqueue 4 reverse dequeue Output 3 1 Explanation: Initially, the queue is [1, 2, 3]. After reversing, it becomes [3, 2, 1]. The first dequeue removes 3. After enqueueing 4, the queue is [2, 1, 4]. Reversing it gives [4, 1, 2]. The next dequeue removes 4.","solution":"class ReversibleQueue: def __init__(self): self.queue = [] self.reversed = False def enqueue(self, x): if self.reversed: self.queue.insert(0, x) else: self.queue.append(x) def dequeue(self): if not self.queue: return \\"Queue is empty\\" if self.reversed: return self.queue.pop(0) else: return self.queue.pop(0) def reverse(self): self.reversed = not self.reversed self.queue.reverse() def process_commands(commands): rq = ReversibleQueue() results = [] for command in commands: if command.startswith(\\"enqueue\\"): _, x = command.split() rq.enqueue(int(x)) elif command == \\"dequeue\\": results.append(rq.dequeue()) elif command == \\"reverse\\": rq.reverse() return results"},{"question":"Henna wants to build a staircase design using characters! Given an integer H, construct a staircase of height H using the character \'*\', such that each level i (i ranges from 1 to H) has exactly i occurrences of \'*\' and they are right-aligned. ------ Input: ------ The first line of input consists of a single integer T (1 ≤ T ≤ 100) -- the number of test cases. The next T lines will consist of one integer, H (1 ≤ H ≤ 100). ------ Output: ------ For each of the T test cases, output the staircase design of height H. Ensure that there is a blank line between the outputs of two consecutive test cases. ----- Sample Input 1 ------ 2 3 4 ----- Sample Output 1 ------ * ** *** * ** *** **** ------ Explanation ------ For the first test case, the staircase has height 3. The first line has 1 \'*\', right-aligned, the second line has 2 \'*\'s, and the third line has 3 \'*\'s right-aligned. For the second test case, the staircase has height 4. The output follows similar alignment rules.","solution":"def generate_staircase(H): Generate a staircase of height H using the character \'*\'. Each level i (i ranges from 1 to H) has exactly i occurrences of \'*\' and they are right-aligned. staircase = [] for i in range(1, H + 1): line = \' \' * (H - i) + \'*\' * i staircase.append(line) return \'n\'.join(staircase) def solve(T, heights): Generates the output for T test cases each with given height H. results = [] for H in heights: results.append(generate_staircase(H)) return \'nn\'.join(results)"},{"question":"Given an array of positive integers, you need to determine the minimum number of steps required to reduce the array to an array of all ones. In each step, you are allowed to perform one of the following operations on any element of the array: 1. Decrease the element by 1. 2. Increase the element by 1. -----Input----- The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 1000), the number of elements in the array. The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (1 ≤ ( a_i ) ≤ 1000), the elements of the array. -----Output----- Output a single integer, the minimum number of steps required to reduce the array to an array of all ones. -----Examples----- Sample Input 1: 3 2 3 4 Sample Output 1: 6 Sample Input 2: 5 1 2 2 1 3 Sample Output 2: 4","solution":"def min_steps_to_ones(n, arr): Returns the minimum number of steps required to reduce the array to an array of all ones. steps = 0 for num in arr: steps += abs(num - 1) return steps"},{"question":"A company is organizing a competition for which the participants must undergo several tasks. Each task has a specific start and end time. Given a list of these tasks, you need to determine the maximum number of tasks that a participant can complete if they can only work on one task at a time. Tasks are represented as pairs (start, end) where `start` and `end` are the start time and end time of a task, respectively. A participant can start the next task only after finishing the current one. Example 1: Input: tasks = [(1, 3), (2, 5), (4, 6)] Output: 2 Explanation: The participant can complete tasks (1, 3) and (4, 6) as they do not overlap. Example 2: Input: tasks = [(1, 2), (3, 4), (0, 6), (5, 7), (8, 9), (5, 9)] Output: 4 Explanation: The participant can complete tasks (1, 2), (3, 4), (5, 7), and (8, 9) without any overlap. Example 3: Input: tasks = [(7, 9), (2, 5), (1, 3), (4, 6), (5, 8)] Output: 3 Explanation: The participant can complete tasks (1, 3), (4, 6), and (7, 9) without overlap. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxTasks()` which takes the list of tasks as an input and returns the maximum number of tasks a participant can complete without overlapping. Expected Time Complexity: O(NLogN). Expected Auxiliary Space: O(1). Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ start, end ≤ 10^9","solution":"def maxTasks(tasks): Determines the maximum number of non-overlapping tasks a participant can complete. # Sort tasks based on their end times tasks.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Given two arrays A and B consisting of N integers each, you need to transform array A into array B. You can perform the following operation any number of times: * Choose two different indices `i` and `j` (1 ≤ i, j ≤ N) such that `i != j`. * Swap the elements `A[i]` and `A[j]`. Determine if it\'s possible to transform array A into array B by performing the above operation any number of times. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ A[i], B[i] ≤ 10^9 Input The input is given from Standard Input. The first line of the input is N Then two lines follow: The first line contains N integers describing array A. The second line contains N integers describing array B. Output Print \\"YES\\" if it\'s possible to transform array A into array B using the allowed operation. Otherwise, print \\"NO\\". Example Input 5 4 3 2 5 1 1 2 3 4 5 Output YES Input 3 1 2 3 4 5 6 Output NO","solution":"def can_transform(A, B): Determines if array A can be transformed into array B using the allowed operation. return sorted(A) == sorted(B)"},{"question":"Write a program that takes as input a list of students and their test scores and outputs a list of students who scored above a certain threshold. Each student has a unique identifier and a test score associated with them. Input The input contains multiple datasets. Each dataset starts with an integer N (1 ≤ N ≤ 100), the number of students. The next N lines each contain a student identifier (a string of up to 10 alphanumeric characters) and an integer score (0 ≤ score ≤ 100). The last line of each dataset contains a single integer T (0 ≤ T ≤ 100), the threshold score. The end of the input is indicated by a line containing a single zero. Output For each dataset, output a list of student identifiers, each on a new line, who have scores strictly greater than T. If no student meets this criterion, output \\"None\\". Example Input 3 alex 78 bob 82 carla 91 80 4 john_doe 60 jane_doe 75 test_user 85 another_user 90 70 0 Output bob carla jane_doe test_user another_user","solution":"def filter_students_above_threshold(datasets): results = [] for data in datasets: N = data[\'N\'] students = data[\'students\'] T = data[\'T\'] filtered_students = [student_id for student_id, score in students if score > T] if not filtered_students: results.append(\\"None\\") else: results.extend(filtered_students) return results"},{"question":"You have been given a one-dimensional array of N integers. You can perform the following operations: 1. Swap any two elements: This operation doesn\'t cost any money. 2. Raise any element to the power of any positive integer: The cost of this operation is equal to the resulting value after the power operation. The goal is to sort the array in non-decreasing order while minimizing the total cost. Input The first line of the input gives the number of test cases, T. T test cases follow, each with the following characteristics: - The first line contains an integer N, the number of elements in the array. - The second line contains N integers a1, a2, ..., aN, the elements of the array. Output For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1), and y is the minimum cost to sort the array in non-decreasing order. CONSTRAINTS All the numbers in the input are integers. 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ ai ≤ 1000 SAMPLE INPUT 2 3 4 1 3 4 2 5 1 6 SAMPLE OUTPUT Case #1: 0 Case #2: 1","solution":"def minimum_cost_to_sort(N, arr): sorted_arr = sorted(arr) # Check if the array is already sorted if arr == sorted_arr: return 0 # Otherwise, it is always possible to sort the array by swaps alone # as there is no inherent cost in swapping any number of times. return 0 def solve(test_cases): results = [] for idx, (N, arr) in enumerate(test_cases): cost = minimum_cost_to_sort(N, arr) results.append(f\\"Case #{idx + 1}: {cost}\\") return results"},{"question":"A bank offers different interest rates based on the type of account and the amount of deposit. The interest rates for each type of account are as follows: 1. Savings Account: - Less than or equal to 1000: 4% per annum - Greater than 1000: 5% per annum 2. Fixed Deposit: - Less than or equal to 5000: 6% per annum - Greater than 5000: 7% per annum 3. Recurring Deposit: - Less than or equal to 2000: 8% per annum - Greater than 2000: 9% per annum Write a program to calculate the interest earned for different customers. -----Input:----- - First line will contain T, number of customers. Then the testcases follow. - Each testcase contains three values: - Type of account as a string (\\"Savings\\", \\"Fixed\\", \\"Recurring\\") - The amount deposited as an integer - The number of years as an integer -----Output:----- For each customer, output the total interest earned, rounded to two decimal places. -----Constraints----- - 1 leq T leq 1000 - 1 leq text{Deposit Amount} leq 10^7 - 1 leq text{Number of Years} leq 20 -----Sample Input:----- 3 Savings 1500 3 Fixed 6000 2 Recurring 1800 5 -----Sample Output:----- 225.00 840.00 720.00","solution":"def calculate_interest(account_type, deposit_amount, years): Calculate the interest earned based on the account type, deposit amount, and number of years. Parameters: account_type (str): The type of the account (\\"Savings\\", \\"Fixed\\", \\"Recurring\\"). deposit_amount (int): The amount deposited. years (int): The number of years the amount is deposited for. Returns: float: The interest earned, rounded to two decimal places. if account_type == \\"Savings\\": if deposit_amount <= 1000: interest_rate = 0.04 else: interest_rate = 0.05 elif account_type == \\"Fixed\\": if deposit_amount <= 5000: interest_rate = 0.06 else: interest_rate = 0.07 elif account_type == \\"Recurring\\": if deposit_amount <= 2000: interest_rate = 0.08 else: interest_rate = 0.09 return round(deposit_amount * interest_rate * years, 2) def process_customers(customers): Process multiple customers to calculate their interest earned. Parameters: customers (list of tuples): List of tuples containing account type, deposit amount, and years. Returns: list of float: List of interest earned for each customer. results = [] for account_type, deposit_amount, years in customers: interest = calculate_interest(account_type, deposit_amount, years) results.append(interest) return results"},{"question":"You are given a list of integers. Your task is to find out the value of the second smallest integer in the list. If there is no second smallest integer (e.g., all elements are the same or the list contains only one element), return `None`. Write a function that receives the list of integers as an argument and returns the second smallest integer or `None`. Example input/output: - second_smallest([4, 1, 3, 2]) -> 2 - second_smallest([2, 1, 1, 1]) -> 2 - second_smallest([1]) -> None - second_smallest([5, 5, 5, 5]) -> None","solution":"def second_smallest(numbers): Returns the second smallest integer in the list, or None if no such element exists. Parameters: numbers (list): List of integers Returns: int: Second smallest integer or None if it does not exist if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"# **Is This a Square?** Given a positive integer, determine if it can be expressed as the area of a square with integer sides. Return true if it can; otherwise, return false. For example, if the input is `16`, the output should be `true` because `16` is the area of a square with side length `4`. Do not use loops. Do not use the `math` library or any square root functions. Perform your solution using basic arithmetic operations. Looking for more, succinct-number fun? Check out the other kata in the series: https://www.codewars.com/kata/square-number https://www.codewars.com/kata/perfect-square","solution":"def is_square(n): Returns True if n can be expressed as the area of a square with integer sides. Otherwise, returns False. if n < 0: return False x = 0 while x * x < n: x += 1 return x * x == n"},{"question":"Given an array of integers that represents the heights of trees in a forest, and an integer k that represents the maximum allowed difference in height when cutting, the task is to determine if it is possible to cut the trees such that all resulting tree heights have a height difference of at most k. Example 1: Input: n = 5, k = 4 trees[] = {10, 12, 15, 18, 20} Output: Yes Explanation: It is possible to cut the trees to heights: 10, 12, 14, 16, 18 where the maximum difference is 4. Example 2: Input: n = 3, k = 3 trees[] = {5, 9, 14} Output: No Explanation: It is impossible to achieve a height difference of at most 3 after cutting. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canCutTrees() which takes an integer n, an integer k, and an array trees and returns a string \\"Yes\\" or \\"No\\" based on whether the height constraint can be satisfied. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ k ≤ 10^9 1 ≤ trees[i] ≤ 10^9","solution":"def canCutTrees(n, k, trees): Determine if it is possible to cut the trees such that the height difference is at most k. Parameters: n (int): Number of trees. k (int): Maximum allowed height difference. trees (list of int): Initial heights of the trees. Returns: str: \\"Yes\\" if the condition can be satisfied, otherwise \\"No\\". # Sort the array first to facilitate checking height differences trees.sort() # Check the height differences in the sorted list for i in range(1, n): if trees[i] - trees[i - 1] > k: return \\"No\\" return \\"Yes\\""},{"question":"Implement a function that takes a string representing an arithmetic expression containing integers and the operators +, -, *, and /. The function should evaluate the expression and return the result. You should assume the expression is always valid and does not contain any whitespace. Additionally, respect the usual operator precedence (i.e., * and / should be evaluated before + and -). # Example ```python evaluate_expression(\\"3+5*2\\") # returns 13 evaluate_expression(\\"10+2*6\\") # returns 22 evaluate_expression(\\"100*2+12\\") # returns 212 evaluate_expression(\\"100*(2+12)/14\\") # returns 100 ``` # Constraints - The input string contains only non-negative integers and the operators +, -, *, /. - The length of the input string does not exceed 100 characters. - Division should be treated as integer division. - You cannot use the `eval` function in Python; you need to manually parse and compute the result.","solution":"def evaluate_expression(expression): def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # use integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1]"},{"question":"Given a large dataset of positive integers, a frequent operation needed is to determine the number of distinct integers within various subarrays of that dataset. You need to help in optimizing and automating this process. Write a function that receives an array of integers and a list of queries. Each query specifies a subarray by its starting and ending indices. The function should return an array of results where each result corresponds to the number of distinct integers within the specified subarray in the given order of queries. ------ Input Format ------ - The first line of input will consist of an integer T, the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers, N and Q — the number of elements in the array and the number of queries. - The second line contains N space-separated integers denoting the array elements. - Each of the next Q lines contains two integers, L and R (1-indexed) representing the starting and ending indices of the subarray for which you have to determine the number of distinct integers. ------ Output Format ------ For each test case, output Q lines, each line containing the number of distinct integers in the specified subarray for each query. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^4 1 ≤ L ≤ R ≤ N 1 ≤ text{Array Value} ≤ 10^9 ------ Sample Input 1 ------ 2 5 3 1 2 2 1 3 1 3 2 5 1 5 6 2 5 5 5 5 5 5 1 3 4 6 ------ Sample Output 1 ------ 2 3 3 1 1 ------ Explanation 1 ------ Test case 1: 1. Subarray from index 1 to 3 is [1, 2, 2]. The distinct values are 1 and 2. So, the answer is 2. 2. Subarray from index 2 to 5 is [2, 2, 1, 3]. The distinct values are 1, 2, and 3. So, the answer is 3. 3. Subarray from index 1 to 5 is [1, 2, 2, 1, 3]. The distinct values are 1, 2, and 3. So, the answer is 3. Test case 2: 1. Subarray from index 1 to 3 is [5, 5, 5]. The distinct value is just 5. So, the answer is 1. 2. Subarray from index 4 to 6 is [5, 5, 5]. The distinct value is just 5. So, the answer is 1.","solution":"def distinct_count_in_subarrays(test_cases): results = [] for case in test_cases: N, Q, array, queries = case for L, R in queries: subarray = array[L-1:R] distinct_count = len(set(subarray)) results.append(distinct_count) return results def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, Q = map(int, input_lines[index].split()) array = list(map(int, input_lines[index + 1].split())) queries = [tuple(map(int, input_lines[index + 2 + i].split())) for i in range(Q)] test_cases.append((N, Q, array, queries)) index += 2 + Q return test_cases"},{"question":"You are given a grid with N rows and M columns. Each cell of the grid either contains a 0 or a 1. You can perform an operation where you select any one cell and toggle the value in that cell (change a 0 to 1, or change a 1 to 0). The objective is to make all elements in each row of the grid identical. ------ Input ------ The first line of the input contains a single integer T - the number of test cases. The first line of each test case contains two space-separated integers N and M - the number of rows and columns in the grid. The next N lines contain M space-separated integers which represent the grid. ------ Output ------ For each test case, you should print \\"YES\\" if it is possible to make all elements in each row identical using any number of toggle operations. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N, M ≤ 50 0 ≤ text{Grid values} ≤ 1 --------- Sample Input 1 --------- 2 2 3 0 1 0 1 0 1 2 2 1 1 0 1 --------- Sample Output 1 --------- YES NO ----- Explanation 1 ----- Example case 1: By toggling the second cell of the first row to 0 and the second and third cells of the second row to 0, we can make all elements in each row identical: 0 0 0 0 0 0 Example case 2: It is not possible to make all elements in each row identical.","solution":"def can_make_rows_identical(test_cases): Determines if it is possible to make all elements in each row of the grid identical using any number of toggle operations. Args: test_cases (list): List of tuples containing the grid details for each test case. Returns: list: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for N, M, grid in test_cases: possible = True for row in grid: # A row is eligible, if all its elements are identical or containing both 1 and 0 if row.count(0) > 0 and row.count(1) > 0: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results # Function to parse the input received and send it in the required format to the function def process_input(input_lines): index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(N): grid.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append((N, M, grid)) return test_cases def main(input_lines): test_cases = process_input(input_lines) results = can_make_rows_identical(test_cases) return results"},{"question":"Problem J Warehouse Robot Navigation In a warehouse, there is a grid of M x N cells where some of the cells contain obstacles, and some cells are empty. A warehouse robot starts at a specific cell and needs to navigate to a target cell avoiding the obstacles. The robot can move in four possible directions: up, down, left, and right. Each movement to an adjacent cell counts as one step. Your task is to write a program to find the minimum number of steps required for the warehouse robot to reach the target cell from the start cell. If it\'s impossible for the robot to reach the target, output -1. Input The input consists of: - An integer `T` (1 ≤ T ≤ 50), the number of test cases. - For each test case: - Two integers `M` and `N` (1 ≤ M, N ≤ 100), representing the dimensions of the grid. - M lines, each containing N characters, representing the initial state of the grid. Each character is either \'.\' (an empty cell) or \'#\' (an obstacle). - Two pairs of integers `(sx, sy)` and `(tx, ty)` (0 ≤ sx, sy, tx, ty < M, N), the coordinates of the start cell and the target cell, respectively. Output For each test case, output a single line containing the minimum number of steps required to reach the target cell from the start cell. If it is impossible to reach the target cell, output -1. Sample Input 2 5 5 ..... .#.#. .#.#. .#.#. ..... 0 0 4 4 5 5 ..# .#... .#.#. .#..# #.# 0 0 4 4 Sample Output 8 -1 Explanation for the Sample Output In the first test case, the robot can navigate around the obstacles to reach the target cell in 8 steps. In the second test case, it is impossible for the robot to reach the target cell due to the obstacles blocking the path.","solution":"from collections import deque def min_steps_to_reach_target(grid, start, target): M, N = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (x, y, steps) visited = set((start[0], start[1])) while queue: x, y, steps = queue.popleft() if (x, y) == (target[0], target[1]): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def warehouse_robot_navigation(T, cases): results = [] for case in cases: M, N, grid, (sx, sy), (tx, ty) = case result = min_steps_to_reach_target(grid, (sx, sy), (tx, ty)) results.append(result) return results"},{"question":"Write a function `remove_consecutive_duplicates` that takes a list of strings and returns a new list where all the consecutive duplicate elements have been reduced to a single element. Each element in the input list is guaranteed to be a string. # Examples ```python >>> remove_consecutive_duplicates([\'a\', \'a\', \'b\', \'b\', \'c\', \'a\', \'a\']) [\'a\', \'b\', \'c\', \'a\'] >>> remove_consecutive_duplicates([\'hello\', \'hello\', \'hello\', \'world\']) [\'hello\', \'world\'] >>> remove_consecutive_duplicates([\'foo\', \'bar\', \'bar\', \'baz\']) [\'foo\', \'bar\', \'baz\'] >>> remove_consecutive_duplicates([\'python\', \'python\', \'python\']) [\'python\'] ``` Good luck!","solution":"def remove_consecutive_duplicates(lst): Removes consecutive duplicate elements from the list of strings. Args: lst (list of str): The input list from which consecutive duplicates are to be removed. Returns: list of str: A new list with consecutive duplicates removed. if not lst: # If the list is empty, return an empty list. return [] result = [lst[0]] # Start with the first element for i in range(1, len(lst)): if lst[i] != lst[i - 1]: result.append(lst[i]) return result"},{"question":"You are developing a software that can quickly verify IP addresses. Each IP address consists of digits and dots, and follows the IPv4 protocol: four decimal numbers separated by dots, each ranging from 0 to 255. For example, \\"192.168.0.1\\" and \\"8.8.8.8\\" are valid IPv4 addresses, but \\"256.256.256.256\\" and \\"192.168.01.1\\" are not. Write a function to determine if a string is a valid IPv4 address. The function should return `true` if the given string is a valid IPv4 address, and `false` otherwise. # Input - A single string that contains a potential IPv4 address. # Output - A boolean value: `true` if the string is a valid IPv4 address, `false` otherwise. # Constraints - The length of the string will be at most 15 characters. - The string will only contain digits and dots. - Leading zeros in each decimal number are not valid, except for the number \\"0\\" itself. # Example Input ``` 192.168.0.1 ``` Output ``` true ``` Input ``` 256.256.256.256 ``` Output ``` false ``` Input ``` 192.168.01.1 ``` Output ``` false ``` Input ``` 8.8.8.8 ``` Output ``` true ```","solution":"def is_valid_ipv4_address(ip): Returns true if the given string is a valid IPv4 address, false otherwise. parts = ip.split(\'.\') # IPv4 address must contain exactly 4 parts if len(parts) != 4: return False for part in parts: # Each part must be a number that does not have leading zeroes (except single \'0\') and must be within 0 to 255 if not part.isdigit() or (part.startswith(\'0\') and len(part) > 1) or not (0 <= int(part) <= 255): return False return True"},{"question":"You are conducting a survey in your neighborhood and wish to gather statistics on households\' usage of different utility services such as electricity, water, and internet. You have collected data from multiple households, where each household reports the set of utilities they use. Your task is to analyze this data to write a program that determines the following: 1. The total number of unique combinations of utilities used by households. 2. The frequency of each unique combination. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of households surveyed. - Each of the next n lines contains a string with space-separated names of utilities used by a household. Utilities can include \\"Electricity\\", \\"Water\\", \\"Internet\\", \\"Gas\\", and \\"Garbage\\". Output: - On the first line, print an integer representing the total number of unique utility combinations. - For each unique combination, print the combination (in any order) followed by the number of households using it, each on a new line. The output should be sorted in descending order of frequency. Assume all utility names are case-sensitive and should be treated as distinct if they differ in case. Example: Input: ``` 5 Electricity Water Internet Electricity Water Water Internet Electricity Gas Water Electricity Water Internet ``` Output: ``` 4 Electricity Water Internet 2 Electricity Water 1 Water Internet 1 Electricity Gas Water 1 ``` Note: - In this example, \\"Electricity Water Internet\\" appears twice in the input, so it has the highest frequency. - Each unique set combination is considered irrespective of the order in which the utilities appear in the input. Thus, the order of utilities in the output combination list does not matter.","solution":"from collections import defaultdict def analyze_utilities(n, households): Analyzes utility usage across households. Args: n (int): Number of households. households (list of str): List of strings where each string represents utilities used by a household. Returns: int: Total number of unique utility combinations. list of tuple: List of unique utility combinations and their frequencies, sorted by frequency in descending order. # Dictionary to count each unique combination of utilities utility_combinations = defaultdict(int) for i in range(n): utilities = tuple(sorted(households[i].split())) utility_combinations[utilities] += 1 # Prepare the result total_unique_combinations = len(utility_combinations) sorted_combinations = sorted(utility_combinations.items(), key=lambda x: x[1], reverse=True) return total_unique_combinations, sorted_combinations"},{"question":"You are given an array of integers. You need to form a new array of the same length where each element at index `i` represents the product of all elements in the original array except the one at index `i`. Your task is to write a function to accomplish this without using division. -----Input----- The first line contains a single integer `n` (2 ≤ n ≤ 10^5), the number of elements in the array. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^4). -----Output----- Print a single line containing `n` space-separated integers, representing the new array as described above. -----Examples----- Input 4 1 2 3 4 Output 24 12 8 6 Input 5 2 3 4 5 6 Output 360 240 180 144 120 -----Note----- In the first example: The new array is calculated as follows: - For the element at index 0: 2 * 3 * 4 = 24 - For the element at index 1: 1 * 3 * 4 = 12 - For the element at index 2: 1 * 2 * 4 = 8 - For the element at index 3: 1 * 2 * 3 = 6 In the second example: The new array is calculated as follows: - For the element at index 0: 3 * 4 * 5 * 6 = 360 - For the element at index 1: 2 * 4 * 5 * 6 = 240 - For the element at index 2: 2 * 3 * 5 * 6 = 180 - For the element at index 3: 2 * 3 * 4 * 6 = 144 - For the element at index 4: 2 * 3 * 4 * 5 = 120","solution":"def product_except_self(nums): Returns a list where the ith element is the product of all elements in the given list except nums[i]. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Fill left_products such that left_products[i] contains product of all elements to the left of i for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products such that right_products[i] contains product of all elements to the right of i for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Fill result array where each element is the product of elements except itself for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A company is developing a new feature for their application that involves setting up a calendar scheduling system for their users. Each user can have a number of events in their calendar, defined by a start and end time. The company needs a utility function to determine if a new event can be added to a user\'s calendar without causing any conflicts. An event is considered conflicting if it overlaps with any of the existing events in the calendar. Given the existing events in the user\'s calendar and a new event, write a function to determine whether the new event can be added without any conflicts. Input: - The first line contains an integer n (1 ≤ n ≤ 105), the number of existing events. - Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 109), representing the start and end times of an existing event. - The last line contains two integers start_new and end_new (0 ≤ start_new < end_new ≤ 109), representing the start and end times of the new event. Output: - Print \\"YES\\" if the new event can be added without conflicts, otherwise print \\"NO\\". Examples: Input: 3 1 5 6 10 12 15 5 6 Output: YES Input: 2 2 4 7 10 3 9 Output: NO Input: 4 1 3 3 5 5 7 7 9 0 10 Output: NO Note: In the first example, the new event (5, 6) does not overlap with any of the existing events, so the output is \\"YES\\". In the second example, the new event (3, 9) overlaps with the existing events (2, 4) and (7, 10), so the output is \\"NO\\". In the third example, the new event (0, 10) overlaps with all existing events, so the output is \\"NO\\".","solution":"def can_add_event(n, events, new_event): Checks if the new event can be added without conflict. :param n: Number of existing events :param events: List of tuples representing the existing events :param new_event: Tuple representing the new event (start_new, end_new) :return: \\"YES\\" if the new event can be added without conflicts, otherwise \\"NO\\" start_new, end_new = new_event for start, end in events: if not (end_new <= start or end <= start_new): return \\"NO\\" return \\"YES\\""},{"question":"Write a function `is_palindrome(s)` that takes a single string argument and returns `True` if the string is a palindrome (reads the same forwards and backwards), and `False` otherwise. Ignore casing and non-alphanumeric characters while determining if the string is a palindrome. For example, the function call `is_palindrome(\\"A man, a plan, a canal, Panama\\")` should return `True`.","solution":"import re def is_palindrome(s): Returns True if the string is a palindrome, False otherwise. Ignore casing and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"You are given a list of integers. Your task is to determine if you can split this list into two non-empty subsequences such that the sum of the elements in each subsequence is the same. Example 1: Input: [1, 5, 11, 5] Output: True Explanation: You can split the list into [1, 5, 5] and [11], both of which have the same sum of 11. Example 2: Input: [1, 2, 3, 5] Output: False Explanation: You cannot split the list into two parts with equal sum. Your Task: You don\'t need to input anything. Complete the function canPartition(nums) which takes a list of integers as input parameter and returns a boolean value indicating whether the list can be partitioned into two subsequences with equal sum. Constraints: 1 <= len(nums) <= 200 1 <= nums[i] <= 100","solution":"def canPartition(nums): total_sum = sum(nums) # If the total sum is not even, we cannot partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a DP array to store which sums can be achieved dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"The Ministry of Magic is working on setting up a network of magical portals to connect different wizarding schools around the world. Each school is represented by a node, and each portal by a bidirectional edge. The ministry wants to ensure that the network is connected, such that there exists at least one path between any two schools. However, to make the network secure, the ministry will designate some portals as secure paths. A portal is considered a secure path if removing it does not disconnect the network. Your task is to determine the number of secure paths required to keep the network fully connected. -----Input----- The first line of the input contains an integer N (2 ≤ N ≤ 1000) – the number of wizarding schools. The next N - 1 lines describe the portals between the schools. Each of the N - 1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ N) indicating that there is a bidirectional portal between the schools u and v. It is guaranteed that every two schools are connected by a path of portals, and that each portal connects a different pair of schools. -----Output----- A single integer denoting the number of secure paths. -----Examples----- Input 5 1 2 1 3 3 4 3 5 Output 3 Input 3 1 2 2 3 Output 2 -----Note----- In the first example, the secure paths are (1-3), (3-4), and (3-5). In the second example, the secure paths are (1-2) and (2-3).","solution":"def count_secure_paths(N, edges): Returns the number of secure paths required to keep the network fully connected. Parameters: N (int): Number of wizarding schools (nodes) edges (list of tuples): List of tuples representing the edges (portals) Return: int: Number of secure paths # In a tree with N nodes, there are N-1 edges and each edge is a secure path. return N - 1"},{"question":"Given an integer array *arr* of size *n*, find the minimum absolute difference between any two elements in the array. **Function Signature:** ```python def min_abs_diff(arr: List[int]) -> int: ``` **Input:** - A single integer *n* denoting the number of elements in the array. - An array *arr* of *n* integers. **Output:** - Return a single integer, the minimum absolute difference between any two elements in the array. **Constraints:** - 2 ≤ *n* ≤ 10^5 - -10^9 ≤ *arr[i]* ≤ 10^9 **Example:** **Input:** ``` n = 5 arr = [3, 8, 15, 17, 1] ``` **Output:** ``` 2 ``` **Explanation:** - Since the array is [3, 8, 15, 17, 1], the absolute differences are: - |3 - 8| = 5 - |3 - 15| = 12 - |3 - 17| = 14 - |3 - 1| = 2 - |8 - 15| = 7 - |8 - 17| = 9 - |8 - 1| = 7 - |15 - 17| = 2 - |15 - 1| = 14 - |17 - 1| = 16 - The minimum absolute difference is 2.","solution":"from typing import List def min_abs_diff(arr: List[int]) -> int: Returns the minimum absolute difference between any two elements in the array. arr.sort() min_diff = float(\'inf\') for i in range(1, len(arr)): min_diff = min(min_diff, abs(arr[i] - arr[i - 1])) return min_diff"},{"question":"Write a function named `merge_lists_unique` that takes two sorted lists of integers, `list1` and `list2`, as input and returns a new sorted list that contains all unique integers from both lists. The resulting list should be sorted in ascending order and should not contain any duplicates, even if the input lists contain duplicate values. Constraints: - The input lists, `list1` and `list2`, consist of integers in non-decreasing order. - Both lists can be empty. - Elements within each list can repeat. # Example: Input: list1 = [1, 2, 2, 3] list2 = [2, 3, 4, 4, 5] Output: [1, 2, 3, 4, 5] # Requirements: 1. Ensure the new function handles empty lists correctly. 2. Take advantage of the sorted property of the input lists to optimize your solution. 3. Do not use any built-in Python set operations to remove duplicates (i.e., avoid using `set()` to complete this task). # Function Signature: ```python def merge_lists_unique(list1: List[int], list2: List[int]) -> List[int]: pass ```","solution":"def merge_lists_unique(list1, list2): This function takes two sorted lists of integers, `list1` and `list2`, and returns a new sorted list that contains all unique integers from both lists. result = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 elif list1[i] > list2[j]: if not result or result[-1] != list2[j]: result.append(list2[j]) j += 1 else: if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 j += 1 while i < len(list1): if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 while j < len(list2): if not result or result[-1] != list2[j]: result.append(list2[j]) j += 1 return result"},{"question":"# Task You are given a 2D grid representing a maze, where \'1\' represents walls and \'0\' represents open paths. Your task is to find if there is a path between two given points, the start and the end. The path can only be created by moving left, right, up, or down, but not diagonally. Write a function `find_path(maze, start, end)`, that takes: - `maze`, a list of lists of integers (either 0 or 1) - `start`, a tuple representing the starting coordinates `(row_start, col_start)` - `end`, a tuple representing the ending coordinates `(row_end, col_end)` The function should return `True` if there is a path from `start` to `end`, `False` otherwise. # Example ```python maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 0] ] start = (0, 0) end = (4, 4) print(find_path(maze, start, end)) # Output: True ``` In this example, there is a path from the top-left corner to the bottom-right corner. Be sure that the solution handles edge cases, such as no path exists between the start and the end, the start or end points themselves being walls, or the maze being entirely walls except for the start and end points.","solution":"def find_path(maze, start, end): Determines if there is a path from start to end in the maze. :param maze: List of lists containing 0s and 1s :param start: Tuple of (row_start, col_start) :param end: Tuple of (row_end, col_end) :return: True if path exists, False otherwise def is_safe(x, y): return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0 def dfs(x, y): if (x, y) == end: return True maze[x][y] = -1 # Mark as visited for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]: nx, ny = x + dx, y + dy if is_safe(nx, ny) and dfs(nx, ny): return True return False if not is_safe(*start) or not is_safe(*end): return False return dfs(*start)"},{"question":"You are the network administrator of a large organization. The organization uses a system of servers, each identified by a unique number from 1 to N. The servers are interconnected such that each server can directly communicate with some subset of other servers. The communications between the servers are bidirectional, meaning if server A can communicate with server B, server B can also communicate with server A. Your task is to design a program that determines the minimum number of new direct communications (edges) required to ensure that all servers in the system are interconnected, either directly or indirectly. -----Input----- The first line contains an integer T, the number of test cases (1 ≤ T ≤ 100). Each test case begins with a line containing two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ N*(N-1)/2). The next M lines contain two integers u and v (1 ≤ u, v ≤ N) representing a direct communication between servers u and v. -----Output----- For each test case, output a single line containing the minimum number of new direct communications required to ensure that all servers are interconnected. -----Examples----- Sample Input: 3 4 2 1 2 3 4 3 1 1 2 5 0 Sample Output: 1 1 4 In these examples, for the first test case, you need one new communication either between server 2 and server 3 or server 1 and server 4 to connect all four servers into a single interconnected network. For the second test case, additionally connecting server 2 and server 3 will connect all three servers into a single interconnected network. For the third test case, where there are no initial connections, you need at least four new communications to link all five servers together.","solution":"def count_components(n, edges): Helper function to count the number of connected components in an undirected graph. from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components = 0 for node in range(1, n + 1): if node not in visited: bfs(node) components += 1 return components def minimum_new_connections_needed(n, m, edges): Given the number of servers (n), the number of current connections (m), and the list of edges representing current connections, returns the minimum number of new connections needed to ensure that all servers are interconnected. num_components = count_components(n, edges) return num_components - 1 def solve(test_cases): results = [] for n, m, edges in test_cases: results.append(minimum_new_connections_needed(n, m, edges)) return results # Function to parse input and format output def main(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[index].split()) edges = [] for i in range(m): u, v = map(int, lines[index + 1 + i].split()) edges.append((u, v)) test_cases.append((n, m, edges)) index += 1 + m results = solve(test_cases) for result in results: print(result)"},{"question":"Alice is participating in a treasure hunt game, where she needs to collect valuable items scattered across a large grid. The grid is represented as a 2D matrix with dimensions M x N, where each cell contains a certain number of items. Alice can only move either right or down from any cell. She starts from the top-left cell (1, 1) and must reach the bottom-right cell (M, N). Your task is to help Alice find the maximum number of items she can collect on her way to the bottom-right cell. -----Input----- The first line of input contains two integers M and N separated by space, which denote the dimensions of the grid. The following M lines each contain N integers, where the j-th integer of the i-th line represents the number of items in the cell (i, j). -----Output----- Print the maximum number of items Alice can collect. -----Constraints----- - 1 ≤ M, N ≤ 1000 - 0 ≤ number of items in each cell ≤ 10^5 -----Example----- Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12","solution":"def max_items_collected(M, N, grid): Returns the maximum number of items that can be collected from the top-left to bottom-right of the grid by only moving right or down. # Create a 2D dp array with the same dimensions as the grid dp = [[0] * N for _ in range(M)] # Initialize the top-left cell with the initial number of items dp[0][0] = grid[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value in the bottom-right cell is the answer return dp[M-1][N-1]"},{"question":"Task Write a function that takes an array of integers as input and returns a new array composed of only the prime numbers from the input array, sorted in ascending order. Prime numbers are integers greater than 1 that are only divisible by 1 and themselves. # Examples ```python findPrimes([10, 7, 4, 20, 19, 13]) ⇒ [7, 13, 19] findPrimes([0, 1, 4, 9, 15, 21]) ⇒ [] findPrimes([44, 29, 2, 17, 12, 23]) ⇒ [2, 17, 23, 29] ``` Constraints and notes - The input list will contain at least one number and no more than 1000 numbers. - The numbers in the input list will be non-negative integers. - You may assume the input list will not contain floating-point numbers or negative values. # Hints - You might want to write a helper function to check if a number is prime. - Remember to sort the resulting list of primes before returning it.","solution":"def is_prime(n): Determines if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def findPrimes(arr): Returns an array of prime numbers from the input array, sorted in ascending order. primes = [num for num in arr if is_prime(num)] return sorted(primes)"},{"question":"Given two strings consisting of digits and a single-digit integer k, determine if you can make the two strings equal by changing up to k characters in one of the strings. Please note that you can only replace each character with another digit (0 to 9). Input The first input line contains two strings s and t consisting of digits (0-9), with equal lengths, not exceeding 100,000 characters. The second line contains a single integer k (0 ≤ k ≤ 100,000) — the maximum allowed changes. Output Output \\"YES\\" if it\'s possible to make the strings s and t equal by changing up to k characters in s. Otherwise, output \\"NO\\". Examples Input 12345 54321 2 Output NO Input 12345 12395 1 Output YES Input 11111 11111 0 Output YES","solution":"def can_make_strings_equal(s, t, k): Determine if we can make strings s and t equal by changing up to k characters in s. Parameters: s (str): First string consisting of digits. t (str): Second string consisting of digits. k (int): Maximum allowed changes. Returns: str: \\"YES\\" if it\'s possible to make s equal to t by changing up to k characters in s, otherwise \\"NO\\". # Calculate the number of different characters between s and t diff_count = sum(1 for i in range(len(s)) if s[i] != t[i]) # If the number of differences is less than or equal to k, return \\"YES\\". Otherwise, return \\"NO\\". return \\"YES\\" if diff_count <= k else \\"NO\\""},{"question":"Your friend Jeff Zebos has recently implemented a new recommendation algorithm for his online company Azamon. However, due to a bug, the list of recommended products occasionally contains duplicates. Jeff wants to ensure that the recommendation list contains only unique products, keeping the first occurrence of each product and removing subsequent duplicates. He needs your help to clean up the recommendation list. Can you write a program that processes the recommendation list and removes duplicates? Given a list of product names, your task is to return a new list with duplicates removed while preserving the order of the first occurrence of each product. -----Input----- The first line of input contains a single integer t (1 le t le 100), denoting the number of test cases. Each test case consists of two lines. The first line of each test case contains a single integer n (1 le n le 1000), representing the number of product names in the recommendation list. The second line contains n space-separated strings where each string is a product name consisting of lowercase English letters only. It is guaranteed that the sum of the lengths of all product names in each test case does not exceed 10000. -----Output----- For each test case, output a single line containing a space-separated list of unique product names in the order of their first occurrence. -----Example----- Input: 3 5 apple banana apple orange banana 4 toy truck game toy 6 chair table chair lamp table chair Output: apple banana orange toy truck game chair table lamp -----Note----- In the first test case, the product names \\"apple\\" and \\"banana\\" appear more than once. Keeping only the first occurrence of each, we get the list: \\"apple banana orange\\". In the second test case, the product name \\"toy\\" appears twice, so after removing the duplicate, we get: \\"toy truck game\\". In the third test case, \\"chair\\" and \\"table\\" both appear multiple times. The cleaned-up list is: \\"chair table lamp\\".","solution":"def remove_duplicates(recommendations): unique_recommendations = [] seen = set() for product in recommendations: if product not in seen: unique_recommendations.append(product) seen.add(product) return unique_recommendations def process_test_cases(t, test_cases): results = [] for i in range(t): n, products = test_cases[i] unique_products = remove_duplicates(products) results.append(\\" \\".join(unique_products)) return results"},{"question":"You are given a list of integers, and your task is to determine the maximum product of any two distinct integers in the list. Write a function that finds the maximum product and returns it. -----Input:----- - An integer n denoting the length of the list (2 leq n leq 10^5). - A list of n integers, where each integer a_i (-10^3 leq a_i leq 10^3) is an element of the list. -----Output:----- - A single integer representing the maximum product of any two distinct integers in the list. -----Example Input:----- 6 1 2 3 4 5 6 -----Example Output:----- 30 -----Example Input:----- 5 -1 -3 -4 2 0 -----Example Output:----- 12 -----Explanation:----- TestCase 1: The maximum product is achieved by multiplying the two largest numbers in the list, which are 5 and 6, resulting in a product of 30. TestCase 2: The maximum product is achieved by multiplying the two smallest negative numbers in the list, which are -3 and -4, resulting in a product of 12.","solution":"def max_product_of_two(nums): Returns the maximum product of any two distinct integers in the list. # Sort the list in non-decreasing order nums.sort() # The maximum product can be either from two largest or two smallest numbers max_product = max(nums[0] * nums[1], nums[-1] * nums[-2]) return max_product"},{"question":"You are given a list of integers where each integer appears exactly twice, except for one integer which appears only once. Your task is to write a function `findUnique` that finds and returns the integer that appears only once. # Function Signature ```python def findUnique(lst: List[int]) -> int: ``` # Input - `lst`: A list of integers where the length of the list is guaranteed to be odd, and every integer, except for one, appears exactly twice. # Output - Returns the single integer that appears only once in the list. # Example ```python findUnique([2, 3, 2, 4, 4, 5, 3]) # Returns 5 findUnique([11, 22, 33, 44, 33, 22, 11]) # Returns 44 findUnique([7, 9, 7, 1, 2, 1, 2]) # Returns 9 ``` # Constraints - You must solve the problem in O(n) time complexity. - You are allowed to use only O(1) extra space, meaning you cannot use any additional data structures like lists or dictionaries to store elements.","solution":"def findUnique(lst): Returns the single integer that appears only once in the list. The function uses XOR operation to achieve O(n) time complexity and O(1) space complexity. unique_element = 0 for num in lst: unique_element ^= num return unique_element"},{"question":"You are given a string containing space-separated words. Write a function `reverseEachWord(str)` that returns a new string with each word reversed but in the original order. For example: ```reverseEachWord(\\"Hello World\\")``` --> \\"olleH dlroW\\" ```reverseEachWord(\\"This is an example\\")``` --> \\"sihT si na elpmaxe\\"","solution":"def reverseEachWord(s): This function takes a string s and returns a new string with each word reversed but in the original order. Args: s (str): Input string containing space-separated words. Returns: str: The modified string with each word reversed. words = s.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"You are given two sorted arrays and a number `k`. Your task is to find the `k`-th smallest element in the union of these two arrays. Both arrays have unique elements. Example: Input: arr1 = [2, 3, 6, 7, 9] arr2 = [1, 4, 8, 10] k = 5 Output: 6 Explanation: The union of the two sorted arrays is [1, 2, 3, 4, 6, 7, 8, 9, 10]. The 5th smallest element in this union is 6. Your Task: Complete the function `int find_kth_element(vector<int>& arr1, vector<int>& arr2, int k)`, which takes two vectors representing the two sorted arrays and an integer `k`, and returns the `k`-th smallest element in the union of the two arrays. Expected Time Complexity: O(log(min(n, m))), where `n` and `m` are the lengths of the two arrays. Expected Auxiliary Space: O(1). Constraints: 1 <= arr1.length, arr2.length <= 10^5 1 <= arr1[i], arr2[i] <= 10^9 1 <= k <= arr1.length + arr2.length","solution":"def find_kth_element(arr1, arr2, k): Return the k-th smallest element in the union of two sorted arrays. def kth(arr1, arr2, k): # Ensure arr1 is the smaller array if len(arr1) > len(arr2): return kth(arr2, arr1, k) if not arr1: return arr2[k-1] if k == 1: return min(arr1[0], arr2[0]) i = min(len(arr1), k // 2) j = min(len(arr2), k // 2) if arr1[i-1] > arr2[j-1]: return kth(arr1, arr2[j:], k - j) else: return kth(arr1[i:], arr2, k - i) return kth(arr1, arr2, k)"},{"question":"Problem Statement: You are tasked with creating a function for generating unique Sudoku boards. A Sudoku board is a 9x9 grid where each cell contains a number from 1 to 9. The board must satisfy the following conditions: - Each number from 1 to 9 must appear exactly once in each row. - Each number from 1 to 9 must appear exactly once in each column. - Each number from 1 to 9 must appear exactly once in each of the nine 3x3 sub-grids. Given a 9x9 grid partially filled with numbers (with zeros representing empty cells), complete the grid such that it forms a valid Sudoku board. The input will be provided as a list of lists, where each inner list represents a row in the grid. Your function should modify this grid in place to complete the Sudoku board. If it is impossible to complete the given grid into a valid Sudoku board, return False. Input Format The input is a 9x9 grid represented as a list of lists, with each inner list containing 9 integers. An integer 0 represents an empty cell. Output Format Modify the input grid in place to complete the Sudoku board and return True. If the grid cannot be completed to form a valid Sudoku board, return False. Constraints The input grid will be a 9x9 matrix. Sample Input ``` [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` Sample Output ``` [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ``` Function Signature ```python def solve_sudoku(board: List[List[int]]) -> bool: pass ```","solution":"def solve_sudoku(board): Solves a given sudoku board in-place. :param board: A 9x9 grid represented as a list of lists. :return: True if the board is successfully solved, else False. def is_valid(board, row, col, num): # Check if num is not in the current row, column and 3x3 sub-grid for i in range(9): if board[row][i] == num or board[i][col] == num: return False start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True return solve(board)"},{"question":"Given a string and a character, count the number of occurrences of the character in the string. The comparison should be case-insensitive. A few cases: ``` { countCharacter(\'Hello World\', \'l\') -> 3 countCharacter(\'HELLO world\', \'h\') -> 1 countCharacter(\'Test case\', \'t\') -> 2 countCharacter(\'Sample\', \'z\') -> 0 } ```","solution":"def countCharacter(s, c): Returns the number of occurrences of character c in string s (case-insensitive). return s.lower().count(c.lower())"},{"question":"You are given a bracket-string S. A string is called a bracket-string if it only contains the characters \'(\' and \')\'. You need to determine whether the bracket-string is balanced. A balanced bracket-string meets the following criteria: - An empty string is balanced. - If S is balanced, then (S) is balanced. - If S and T are balanced, then their concatenation ST is balanced. Write a function to determine if the given bracket-string S is balanced. ------ Input ------ The first line of the input contains a bracket-string S. ------ Output ------ Your output should contain a single string: \\"YES\\" if the bracket-string is balanced and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ |S| ≤ 1 000 000; where |S| denotes the length of the given bracket-string. ------ Example ------ Input: (()()) Output: YES Input: ())( Output: NO ------ Explanation ------ In the first example, the string \\"(()())\\" is balanced because the brackets are in the correct order and properly nested. In the second example, the string \\"())(\\" is not balanced because there is an extra closing bracket before all the opened brackets are closed.","solution":"def is_balanced(S): Determine if the given bracket-string S is balanced. Parameters: S (str): A string containing only \'(\' and \')\' Returns: str: \\"YES\\" if the string is balanced, \\"NO\\" otherwise stack = [] for bracket in S: if bracket == \'(\': stack.append(bracket) elif bracket == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"Given a string S of length N, consisting of lowercase English letters. Find the length of the longest substring of S that is a palindrome. -----Constraints----- - All values in input are integers or lowercase English letters. - 1 leq N leq 10^4 -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the length of the longest palindromic substring. -----Sample Input----- babad -----Sample Output----- 3 The longest palindromic substring is either \\"bab\\" or \\"aba\\", both of length 3.","solution":"def longest_palindromic_substring_length(S): Returns the length of the longest palindromic substring of S. n = len(S) if n == 0: return 0 dp = [[False] * n for _ in range(n)] max_len = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if S[i] == S[i + 1]: dp[i][i + 1] = True start = i max_len = 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and S[i] == S[j]: dp[i][j] = True if length > max_len: start = i max_len = length return max_len"},{"question":"You are given a series of operations to perform on an initially empty set of integers. Each operation is one of the following: - \\"add x\\" - Add the integer x to the set. If x is already present, the set remains unchanged. - \\"remove x\\" - Remove the integer x from the set. If x is not present, the set remains unchanged. - \\"query x\\" - Check if the integer x is present in the set. Output \\"True\\" if present, otherwise \\"False\\". Your task is to implement a program that processes a series of these operations and produces the correct output for each \\"query\\" operation. Input: The first line of the input contains an integer Q, the number of operations to perform (1 ≤ Q ≤ 10^5). Each of the next Q lines contains one of the operations described above. For any operation \\"add x\\" or \\"remove x\\", x will be an integer such that 0 ≤ x ≤ 10^9. Output: For each \\"query x\\" operation, output either \\"True\\" or \\"False\\" on a new line. Example: Input: 5 add 1 add 2 query 1 remove 1 query 1 Output: True False","solution":"def process_operations(operations): Processes a list of operations on a set of integers and returns the results of \\"query\\" operations. Args: - operations (list of str): A list where each element is a string representing an operation. Returns: - list of str: A list of results for each \\"query\\" operation, either \\"True\\" or \\"False\\". s = set() results = [] for operation in operations: op, x = operation.split() x = int(x) if op == \\"add\\": s.add(x) elif op == \\"remove\\": s.discard(x) elif op == \\"query\\": results.append(str(x in s)) return results"},{"question":"Find the first repeated word in a long string of space-separated words. If no word is repeated, return \\"No Repeats\\". -----Input----- Input starts with an integer T, which is the count of test cases. Each of the next T lines contains a string S. -----Output----- Output T lines, each containing the first repeated word in S, or \\"No Repeats\\" if there are no repeated words. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ length of S ≤ 100000 -----Example----- Input: 2 hello world hello coding is fun coding Output: hello coding -----Explanation----- Example case 1: The word \\"hello\\" is repeated first. Example case 2: The word \\"coding\\" is repeated first.","solution":"def first_repeated_word(test_cases): Returns the first repeated word in each test case or \\"No Repeats\\" if no word is repeated. results = [] for s in test_cases: words = s.split() seen_words = set() repeated_word = \\"No Repeats\\" for word in words: if word in seen_words: repeated_word = word break seen_words.add(word) results.append(repeated_word) return results"},{"question":"Write a function `findMissingLetter` which takes an array of consecutive letters (in increasing order) as an argument and returns the missing letter. The array will always have at least one missing letter, and the length of the array will always be at least 2. The array will contain letters in only one case, either uppercase or lowercase. For example, if this array were passed as an argument: ```python [\'a\', \'b\', \'c\', \'d\', \'f\'] ``` Your function should return the character: ```python \'e\' ``` If this array were passed as an argument: ```python [\'O\', \'P\', \'Q\', \'S\'] ``` Your function should return the character: ```python \'R\' ``` The correct letter must be returned in the same case as the letters in the input array.","solution":"def findMissingLetter(chars): This function takes an array of consecutive letters (in increasing order) with one letter missing and returns the missing letter. for i in range(len(chars) - 1): if ord(chars[i + 1]) != ord(chars[i]) + 1: return chr(ord(chars[i]) + 1) return None # This should never be reached given the problem constraints"},{"question":"Overview In image processing, a common task is to invert the colors of an image. This means you would take an image and replace each pixel with its opposite color. An image can be represented as a 2D array of pixels, where each pixel is given as a tuple of three integers (R, G, B) representing the Red, Green, and Blue color components respectively. Each color component ranges from 0 to 255. Your task is to write a function that takes a 2D array of pixels representing an image and returns a new 2D array where each pixel\'s color is inverted. Inversion rules If the value of a color component is X, its inverted value will be (255 - X). For example: * If a pixel\'s color is (100, 150, 200), its inverted color will be (155, 105, 55). Function signature ```python def invert_colors(image: List[List[Tuple[int, int, int]]]) -> List[List[Tuple[int, int, int]]]: pass ``` Example ``` Input: [ [(0, 0, 0), (255, 255, 255)], [(123, 234, 56), (87, 65, 43)] ] Output: [ [(255, 255, 255), (0, 0, 0)], [(132, 21, 199), (168, 190, 212)] ] ``` Constraints - The dimensions of the image can be as small as 1x1 or as large as 1000x1000. - Each pixel\'s R, G, B values are between 0 and 255, inclusive. Additional information Inverting the color of an image is a simple and fundamental operation in image processing. Beyond just inverting colors, you could experiment with other types of image transformations to deepen your understanding of how images are represented and manipulated in code.","solution":"from typing import List, Tuple def invert_colors(image: List[List[Tuple[int, int, int]]]) -> List[List[Tuple[int, int, int]]]: Invert the colors of the given image. Args: image (List[List[Tuple[int, int, int]]]): 2D array of pixels where each pixel is represented as (R, G, B) Returns: List[List[Tuple[int, int, int]]]: 2D array of pixels with inverted colors return [[(255 - r, 255 - g, 255 - b) for r, g, b in row] for row in image]"},{"question":"You are given two strings s and t. Your task is to perform operations on string s to convert it into string t with the minimum number of operations. In one operation, you can choose any character of s and increase or decrease its ASCII value by 1. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 10^5), the lengths of strings s and t respectively. The second line contains string s of length m consisting of lowercase English letters. The third line contains string t of length n consisting of lowercase English letters. Output Output a single integer, the minimum number of operations needed to convert s into t. Example Input 5 5 abcde xbcdf Output 3 Note Consider the example. We can convert \\"abcde\\" to \\"xbcdf\\" in 3 operations: * Convert \'a\' to \'x\' in 23 operations. * No operation needed for \'b\'. * Convert \'e\' to \'f\' in 1 operation. Thus, the total number of operations is 23 + 0 + 0 + 0 + 1 = 24.","solution":"def min_operations_to_convert(s, t): Calculate the minimum number of operations needed to convert string s to string t. if len(s) != len(t): raise ValueError(\\"Both strings must have the same length\\") operations = 0 for i in range(len(s)): operations += abs(ord(s[i]) - ord(t[i])) return operations"},{"question":"There is a river with stepping stones placed along its length at various positions. A frog wants to cross the river by hopping from stone to stone. The frog can jump a maximum distance `D` in a single hop. You need to determine if the frog can reach the final stone from the starting stone (position 0) given the positions of the stones and the maximum jump distance. Input Format The first line contains an integer, `N`, representing the number of stepping stones, followed by `N` space-separated integers indicating the positions of the stones from the starting point (position 0). Output Format Print \\"Yes\\" if the frog can reach the final stone, otherwise print \\"No\\". Constraints 1 ≤ N ≤ 10^5 1 ≤ position of any stone ≤ 10^9 1 ≤ D ≤ 10^9 SAMPLE INPUT 5 1 3 5 8 12 4 SAMPLE OUTPUT Yes Explanation The frog starts at position 0, and can hop to position 1, then hop to position 5, and finally hop to position 12. The maximum jump distance is 4, so the frog can make all the required jumps. Therefore, the output is \\"Yes\\".","solution":"def can_frog_cross(stones, D): Returns \\"Yes\\" if the frog can cross the river by hopping from stone to stone with maximum jump distance D, otherwise \\"No\\". current_position = 0 for stone in stones: if stone - current_position > D: return \\"No\\" current_position = stone return \\"Yes\\""},{"question":"Polycarp has a list of strings and he needs to perform a series of operations on them. For each string, he needs to find the length of the longest substring that consists of the same character. Given multiple test cases, your task is to write a program that processes each string and provides the length of the longest substring with identical characters. -----Input----- The first line contains one integer N (1 le N le 100) — the number of test cases. Then N lines follow, each containing one string t (1 le |t| le 10^5) representing the test case. t consists of lowercase Latin letters only. -----Output----- For each test case, print an integer representing the length of the longest substring consisting of the same character. -----Example----- Input 4 aabbbcc xxxxxyyyz pqrstttuv zzzzzzzz Output 3 5 3 8","solution":"def longest_uniform_substring_length(s): Given a string s, returns the length of the longest substring that consists of the same character. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length def process_test_cases(test_cases): Process a list of test cases where each test case is a string, and returns the length of the longest uniform substring for each test case. results = [] for t in test_cases: results.append(longest_uniform_substring_length(t)) return results"},{"question":"Sasha is organizing a local concert for n performers. There\'s a setup crew that needs to arrange the stage with n microphones. Each microphone\'s setup time is represented by a sequence b_1, b_2, ..., b_n where b_i is the time in minutes needed to set up the i-th microphone. Only one microphone can be set up at a time by any single crew member. Sasha has k crew members, and each crew member can only handle one microphone at a time. The crew members can start setting up the microphones simultaneously, but Sasha wants to minimize the time when the last microphone is set up. Help Sasha find out the minimum total time required to set up all the microphones. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100). The next line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 100). -----Output----- Print a single integer — the minimum required time to set up all the microphones. -----Examples----- Input 4 2 3 1 5 7 Output 8 Input 5 3 4 2 7 1 6 Output 7 -----Note----- In the first example, the optimal way is to assign two crew members to the task: - Crew member 1: Set up microphones taking 3 + 5 = 8 minutes. - Crew member 2: Set up microphones taking 1 + 7 = 8 minutes. So, the total time is 8 minutes. In the second example, the optimal way is to assign three crew members to the task: - Crew member 1: Set up microphones taking 4 minutes. - Crew member 2: Set up microphones taking 2 + 1 = 3 minutes. - Crew member 3: Set up microphones taking 7 + 6 = 13 minutes. The minimum required time is the time taken by the longest crew member, which is 7 minutes.","solution":"import heapq def minimum_setup_time(n, k, times): Returns the minimum required time to set up all the microphones. Parameters: n (int): number of microphones k (int): number of crew members times (list of int): setup times for each microphone Returns: int: minimum required time to set up all the microphones if n == 1: return times[0] # Min-heap to keep track of the setup times for each crew member min_heap = [0] * k heapq.heapify(min_heap) # Sort the times in descending order to assign the longest times first times.sort(reverse=True) for time in times: least_busy_crew = heapq.heappop(min_heap) heapq.heappush(min_heap, least_busy_crew + time) return max(min_heap)"},{"question":"You are given a large park which can be represented as a grid with N rows and N columns. There is a special garden located at position (Gx, Gy) and a fountain at position (Fx, Fy). Your task is to figure out if it is possible to reach the fountain from the garden by following specific stepping stones. However, there are certain positions in the park which are covered by muddy patches that make them impassable. You can move up, down, left, or right to an adjacent cell, but you must avoid all muddy patches. The park grid is indexed from 1 to N for both rows and columns. More formally, given an N x N park grid with M muddy patches, determine whether it is possible to reach the fountain from the garden. Input The first line contains six integers: N, M, Gx, Gy, Fx and Fy, where: - N is the size of the park grid. - M is the number of muddy patches. - Gx and Gy are the row and column indices of the garden. - Fx and Fy are the row and column indices of the fountain. Each of the next M lines contains two integers Xi and Yi (1 ≤ i ≤ M) denoting the coordinates of muddy patches in the park. Output Print \\"FOUNTAIN REACHED\\" if you can reach the fountain from the garden without stepping on a muddy patch. Otherwise, print \\"STUCK IN THE MUD\\". Constraints 1 ≤ N ≤ 10^9 1 ≤ M ≤ 10^5 1 ≤ Gx, Gy, Fx, Fy, Xi, Yi ≤ N Example Input 1000 3 5 5 10 10 3 3 7 7 5 7 Example Output FOUNTAIN REACHED","solution":"from collections import deque def can_reach_fountain(N, M, Gx, Gy, Fx, Fy, mud_patches): # Use a set for muddy patches for O(1) look-ups mud_set = {(x[0], x[1]) for x in mud_patches} # BFS initialization queue = deque([(Gx, Gy)]) visited = set([(Gx, Gy)]) # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() # Check if current position is the fountain if (x, y) == (Fx, Fy): return \\"FOUNTAIN REACHED\\" # Explore all 4 possible directions for dx, dy in directions: new_x, new_y = x + dx, y + dy # Check if the new position is within bounds and not visited or muddy if 1 <= new_x <= N and 1 <= new_y <= N and (new_x, new_y) not in visited and (new_x, new_y) not in mud_set: queue.append((new_x, new_y)) visited.add((new_x, new_y)) return \\"STUCK IN THE MUD\\" # Example test case N = 1000 M = 3 Gx, Gy = 5, 5 Fx, Fy = 10, 10 mud_patches = [(3, 3), (7, 7), (5, 7)] print(can_reach_fountain(N, M, Gx, Gy, Fx, Fy, mud_patches)) # Expected: \\"FOUNTAIN REACHED\\""},{"question":"Masha is playing a game with two types of operations on a string consisting of lowercase English letters: 1. She can append any lowercase English letter to the end of the string. 2. She can remove the last character from the string if the string length is greater than zero. Masha starts with an empty string. Given a target string `s`, Masha wants to know if it\'s possible to construct the target string by performing any sequence of the above operations. -----Input----- The first line contains a single integer `T` (1 le T le 10^3) — the number of test cases. Each test case consists of one line containing the target string `s` (1 le |s| le 50). -----Output----- For each test case, print \\"YES\\" if Masha can construct `s` by using the operations described, otherwise print \\"NO\\". You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer). -----Example----- Input 3 ab xyz hello Output YES YES YES","solution":"def can_construct_string(target: str) -> str: Returns \\"YES\\" if it\'s possible to construct the target string by performing append and remove operations on an initially empty string, otherwise returns \\"NO\\". return \\"YES\\" def process_test_cases(test_cases): results = [] for target in test_cases: results.append(can_construct_string(target)) return results"},{"question":"Given an array of integers and an integer K, write a program to find the length of the longest subarray such that there are at most K distinct numbers in that subarray. # Input Format - The first line contains two integers N (the length of the array) and K. - The second line contains N integers representing the elements of the array. # Output Format - Print a single integer, the length of the longest subarray with at most K distinct numbers. # Constraints - 1 leq N leq 100,000 - 1 leq K leq N - The array elements will be integers in the range [1, 100,000] # Example Input 8 2 1 2 1 2 3 3 2 4 Output 4 Explanation The longest subarray with at most 2 distinct numbers is [1, 2, 1, 2] which has length 4.","solution":"def longest_subarray_with_k_distinct(arr, K): Returns the length of the longest subarray with at most K distinct numbers. from collections import defaultdict n = len(arr) if n == 0 or K == 0: return 0 left = 0 max_length = 0 current_map = defaultdict(int) for right in range(n): current_map[arr[right]] += 1 while len(current_map) > K: current_map[arr[left]] -= 1 if current_map[arr[left]] == 0: del current_map[arr[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a sequence of N integers and Q queries, each requiring a transformation of the sequence. Chef wants to improve efficiency by saving intermediate results to answer queries faster. You are given an array a of N integers. Each of the Q queries provides three integers: L, R, and K. For each query, perform the following transformation on the subarray a[L...R]: 1. Replace each element in the subarray a[L...R] with the sum of its digits. 2. Repeat the above step K times. 3. Output the sum of the elements in the transformed subarray. ------ Input ------ The first line contains a single integer N denoting the number of elements in the array. The second line contains N integers a[1], a[2], ..., a[N]. The third line contains a single integer Q, the number of queries. The next Q lines contain three integers L, R, and K, each denoting a query. ------ Output ------ Output the result for each query in a separate line. ------ Constraints ------ 1 ≤ N, Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ a[i] ≤ 10^9, where 1 ≤ i ≤ N 1 ≤ K ≤ 100 ------ Sample Input 1 ------ 5 123 456 789 12345 67890 2 1 3 2 2 5 1 ------ Sample Output 1 ------ 12 48 ------ Explanation 1 ------ Query 1: - Initial subarray: [123, 456, 789] - After first transformation: [6, 15, 24] - After second transformation: [6, 6, 6] - Sum: 6 + 6 + 6 = 18 Query 2: - Initial subarray: [456, 789, 12345, 67890] - After first transformation: [15, 24, 15, 30] - Sum: 15 + 24 + 15 + 30 = 84","solution":"def digit_sum(n): Return the sum of the digits of an integer n. return sum(int(d) for d in str(n)) def transform_subarray(a, L, R, K): Transform the subarray a[L...R] K times as per the problem statement. for _ in range(K): for i in range(L, R + 1): a[i] = digit_sum(a[i]) return sum(a[L:R+1]) def process_queries(N, a, Q, queries): Process all the queries and return the list of results. results = [] for L, R, K in queries: results.append(transform_subarray(a[:], L - 1, R - 1, K)) return results"},{"question":"Given a string of lowercase alphabets, you can perform the following operation: Pick any character from the string and move it to the end of the string. How many such operations are needed to make the string sorted in non-decreasing order? Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output Print a single integer — the minimum number of operations required to make the string sorted in non-decreasing order. Examples Input 5 abdce Output 2 Input 4 dcba Output 3 Input 6 abcdef Output 0 Note In the first sample, we can move \'d\' to the end of the string to get \\"abdec\\", and then move \'e\' to the end to get \\"abcde\\". This takes 2 operations. In the second sample, we might need to move \'d\', \'c\', and \'b\' in sequence to get the string \\"abcd\\" which takes 3 operations. In the third sample, the string is already sorted, so no operations are needed. Hence, the output is 0.","solution":"def min_operations_to_sort(n, s): Given a string s of length n, return the minimum number of operations needed to sort the string in non-decreasing order by moving characters to the end of the string. Parameters: n (int): Length of the string s (str): The input string consisting of lowercase English letters Returns: int: Minimum number of operations required to sort the string # Find the longest non-decreasing subsequence in the string longest_sorted_prefix = 1 for i in range(1, n): if s[i] >= s[i - 1]: longest_sorted_prefix += 1 else: break # To get the sorted string, we need to move all characters after the # longest non-decreasing prefix to the end of the string. return n - longest_sorted_prefix"},{"question":"You are managing a warehouse that stores various products. Each product is represented by a unique product ID and a quantity. You frequently receive shipment updates that either add stock to existing products or add new products to the warehouse. Sometimes you also receive requests to fulfill orders, which will reduce the stock of certain products. Write a function to handle warehouse operations. The function will take two arguments: 1. A list of products currently in the warehouse, where each product is represented by a dictionary containing the product ID and quantity. 2. A list of operations. Each operation is represented by a dictionary containing an operation type (\\"add\\" or \\"remove\\"), a product ID, and the quantity to add or remove. Your function should: - Update the warehouse stock based on the shipment updates and order requests. - If a \\"remove\\" operation attempts to reduce the stock below zero, ignore that operation. - Return the updated list of products after processing all operations. # Examples ```python def update_warehouse(products, operations): # Your code here pass # Example 1 products = [{\\"product_id\\": 1, \\"quantity\\": 10}, {\\"product_id\\": 2, \\"quantity\\": 5}] operations = [{\\"type\\": \\"add\\", \\"product_id\\": 1, \\"quantity\\": 5}, {\\"type\\": \\"remove\\", \\"product_id\\": 2, \\"quantity\\": 3}] print(update_warehouse(products, operations)) # Output: [{\\"product_id\\": 1, \\"quantity\\": 15}, {\\"product_id\\": 2, \\"quantity\\": 2}] # Example 2 products = [{\\"product_id\\": 1, \\"quantity\\": 10}] operations = [{\\"type\\": \\"remove\\", \\"product_id\\": 1, \\"quantity\\": 15}, {\\"type\\": \\"add\\", \\"product_id\\": 2, \\"quantity\\": 10}] print(update_warehouse(products, operations)) # Output: [{\\"product_id\\": 1, \\"quantity\\": 10}, {\\"product_id\\": 2, \\"quantity\\": 10}] # Example 3 products = [{\\"product_id\\": 1, \\"quantity\\": 10}, {\\"product_id\\": 2, \\"quantity\\": 0}, {\\"product_id\\": 3, \\"quantity\\": 5}] operations = [{\\"type\\": \\"remove\\", \\"product_id\\": 3, \\"quantity\\": 5}, {\\"type\\": \\"remove\\", \\"product_id\\": 2, \\"quantity\\": 1}] print(update_warehouse(products, operations)) # Output: [{\\"product_id\\": 1, \\"quantity\\": 10}, {\\"product_id\\": 2, \\"quantity\\": 0}] ``` # Constraints - You can assume that product IDs are unique within the list of products and within the list of operations. - Quantities in the products and operations lists are always non-negative integers.","solution":"def update_warehouse(products, operations): # Convert products list to a dictionary for faster lookup product_dict = {product[\\"product_id\\"]: product[\\"quantity\\"] for product in products} for operation in operations: product_id = operation[\\"product_id\\"] qty = operation[\\"quantity\\"] if operation[\\"type\\"] == \\"add\\": if product_id in product_dict: product_dict[product_id] += qty else: product_dict[product_id] = qty elif operation[\\"type\\"] == \\"remove\\": if product_id in product_dict and product_dict[product_id] >= qty: product_dict[product_id] -= qty # Convert the dictionary back to list of products with updated quantities updated_products = [{\\"product_id\\": pid, \\"quantity\\": qty} for pid, qty in product_dict.items() if qty > 0] return updated_products"},{"question":"Given a positive integer N, you need to find and return a list of all \'Stepping Numbers\' from 0 to N inclusive. A \'Stepping Number\' is defined as a number where all the adjacent digits have a difference of 1. For single-digit numbers, they are trivially considered Stepping Numbers. For example, 8, 121, and 3456 are Stepping Numbers, whereas 91, 131, and 987 are not. Example 1: Input: N = 21 Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 21] Example 2: Input: N = 0 Output: [0] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `steppingNumbers()` which takes an Integer N as input and returns a list of all Stepping Numbers from 0 to N inclusive. Expected Time Complexity: O(k), where k is the number of Stepping Numbers up to N. Expected Auxiliary Space: O(k), where k is the number of Stepping Numbers up to N. Constraints: 0 <= N <= 10^6","solution":"def steppingNumbers(N): result = [] def isSteppingNumber(num): str_num = str(num) for i in range(len(str_num) - 1): if abs(int(str_num[i]) - int(str_num[i+1])) != 1: return False return True for num in range(0, N + 1): if isSteppingNumber(num): result.append(num) return result"},{"question":"You are given a list of colored balls. Your task is to create a function `count_adjacent_pairs` that will take a list of strings as input, where each string represents the color of a ball. The function should return the number of adjacent pairs of balls that have the same color. Example: ```python def count_adjacent_pairs(ball_colors): # Your code here # Examples print(count_adjacent_pairs([\\"red\\", \\"blue\\", \\"red\\", \\"red\\", \\"blue\\", \\"blue\\"])) # should return 2 print(count_adjacent_pairs([\\"green\\", \\"green\\", \\"green\\"])) # should return 2 print(count_adjacent_pairs([\\"yellow\\", \\"blue\\", \\"yellow\\", \\"green\\", \\"green\\", \\"blue\\"])) # should return 1 print(count_adjacent_pairs([])) # should return 0 ``` Notes: * The input list can be empty, in which case the function should return 0. * Adjacent pairs should be counted only once. For example, in `[\\"green\\", \\"green\\", \\"green\\"]`, there are two adjacent pairs of green balls. * The list will only contain strings representing the colors of the balls, such as \\"red\\", \\"blue\\", \\"green\\", etc.","solution":"def count_adjacent_pairs(ball_colors): Returns the number of adjacent pairs of balls that have the same color. if not ball_colors: return 0 count = 0 for i in range(1, len(ball_colors)): if ball_colors[i] == ball_colors[i - 1]: count += 1 return count"},{"question":"You are given two sets of integers, A and B, each containing n elements. Your task is to transform set A into set B via a series of operations. In each operation, you can choose any element from A and either increment or decrement it by 1. Your goal is to determine the minimum number of operations required to transform A into B. Input The first line contains a single integer n (1 ≤ n ≤ 100,000). The second line contains n space-separated integers, the elements of set A (|ai| ≤ 10^9). The third line contains n space-separated integers, the elements of set B (|bi| ≤ 10^9). Output Output a single integer, the minimum number of operations needed to transform A into B. Examples Input 3 1 2 3 3 2 1 Output 4 Input 4 1 1 1 1 2 2 2 2 Output 4 Note In the first example, you can transform A into B with a minimum of 4 operations as follows: 1 → 3 requires 2 operations. 2 → 2 requires 0 operations. 3 → 1 requires 2 operations. In the second example, each \'1\' in A needs to be incremented to \'2\', so a total of 4 operations are needed.","solution":"def min_operations(n, A, B): Returns the minimum number of operations required to transform A into B. :param n: int - number of elements in each set :param A: list of int - the initial set of integers :param B: list of int - the target set of integers :return: int - the minimum number of operations needed operations = 0 for a, b in zip(A, B): operations += abs(a - b) return operations"},{"question":"Shopping Cart Computation - Fix the Function Oh no! Sam\'s discount function is giving incorrect results! Help Sam fix his discount computation! Task: Your task is to fix Sam\'s discount computation function so it returns the correct total amount after applying the discount properly. You will receive a `cart` object, with a list of products. Each product has two properties: `price` (a number) and `quantity` (an integer). Additionally, you will receive a `discount` number representing the percentage discount to be applied to the entire cart\'s total. Your goal is to correctly compute the total price for the cart after applying the discount, and return this value rounded to two decimal places. Example: ```python cart = { \'products\': [ {\'price\': 10.00, \'quantity\': 2}, {\'price\': 15.00, \'quantity\': 1}, {\'price\': 5.00, \'quantity\': 3} ] } discount = 10 ``` Output: ``` 51.30 ``` Explanation: - Total amount before discount: (10.00 * 2) + (15.00 * 1) + (5.00 * 3) = 55.00 - Applying a 10% discount: 55.00 * (10 / 100) = 5.50 - Total amount after discount: 55.00 - 5.50 = 49.50 - Output (rounded to two decimal places): 49.50","solution":"def compute_cart_total(cart, discount): Computes the total price for the cart after applying the discount. total = sum(product[\'price\'] * product[\'quantity\'] for product in cart[\'products\']) discount_amount = total * (discount / 100) total_after_discount = total - discount_amount return round(total_after_discount, 2)"},{"question":"Design a class Leaderboard that tracks the scores of players in a game. It should support the following operations: 1. addScore(int playerId, int score): Updates the leaderboard by adding ‘score’ to the player’s score. If a player with playerId does not exist, a new entry is added. 2. top(int K): Returns the sum of the scores of the top K players. 3. reset(int playerId): Resets the score of the player with id playerId to 0. Example: Input: inputs = [\\"Leaderboard\\", \\"addScore\\", \\"addScore\\", \\"addScore\\", \\"addScore\\", \\"top\\", \\"reset\\", \\"top\\"], inputs = [[], [1, 73], [2, 56], [3, 39], [4, 51], [1], [1], [1]] Output: [null, null, null, null, null, 219, null, 141] Explanation: Leaderboard lb = new Leaderboard(); lb.addScore(1, 73); // Player 1\'s score is 73. lb.addScore(2, 56); // Player 2\'s score is 56. lb.addScore(3, 39); // Player 3\'s score is 39. lb.addScore(4, 51); // Player 4\'s score is 51. lb.top(1); // Returns 73. Only one player with the highest score 73. lb.reset(1); // Resets Player 1\'s score to 0. lb.top(1); // Returns 56. Only one player with the highest score 56. Note: 1. All playerId values will be between 1 and 1000. 2. All K values will be between 1 and the number of players in the leaderboard. 3. The number of calls to addScore, top, and reset functions will not exceed 10000 per test case. 4. The leaderboard may contain duplicate scores, and the top K players should account for all such scores.","solution":"class Leaderboard: def __init__(self): self.scores = {} def addScore(self, playerId, score): if playerId in self.scores: self.scores[playerId] += score else: self.scores[playerId] = score def top(self, K): return sum(sorted(self.scores.values(), reverse=True)[:K]) def reset(self, playerId): self.scores[playerId] = 0"},{"question":"For a given integer N, define the function `P(N)` as: - `P(N) = 1` if `N` is a perfect number. - `P(N) = 0` otherwise. A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding itself (e.g., 6, 28, etc.). Given two integers `L` and `R`, compute the sum of `P(i) * P(j)` for all pairs `(i, j)` where `L ≤ i < j ≤ R`, and return the result modulo `10^9 + 7`. # Input: The first line contains `T` (1 ≤ T ≤ 100000) - the number of test cases. Each of the next `T` lines contains two integers `L` and `R` (1 ≤ L ≤ R ≤ 10^6). # Output: For each test case, output a single integer representing the answer of the problem, in separate lines. # Sample Input: ``` 1 1 30 ``` # Sample Output: ``` 1 ``` # Explanation: Perfect numbers between 1 and 30 are 6 and 28. Thus, the valid pair is only `(6, 28)`, and the answer is `P(6) * P(28) = 1 * 1 = 1`.","solution":"def is_perfect(n): Check if a number is a perfect number. if n <= 1: return False divisors_sum = 1 sqrt_n = int(n**0.5) for i in range(2, sqrt_n + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum == n def P(n): Returns 1 if n is a perfect number, 0 otherwise. return 1 if is_perfect(n) else 0 def perfect_pairs_sum(L, R): Compute the sum of P(i) * P(j) for all pairs (i, j) such that L ≤ i < j ≤ R. perfect_numbers = [i for i in range(L, R + 1) if P(i)] count = len(perfect_numbers) return (count * (count - 1) // 2) % (10**9 + 7) def main(T, cases): results = [] for L, R in cases: results.append(perfect_pairs_sum(L, R)) return results"},{"question":"Given an array of n integers and a positive integer k, find the maximum sum of any non-empty subarray of length at most k. Constraints * 1 leq n leq 10^5 * 1 leq k leq n * -10^4 leq array elements leq 10^4 Input The input is given in the following format: n ; k array Output Print the maximum sum of any non-empty subarray of length at most k. Example Input 5 3 1 -2 3 4 -1 Output 7","solution":"def max_subarray_sum(arr, n, k): max_sum = float(\'-inf\') current_sum = 0 # Iterate through each possible length from 1 to k for length in range(1, k + 1): current_sum = 0 for i in range(length): current_sum += arr[i] max_sum = max(max_sum, current_sum) for i in range(length, n): current_sum += arr[i] - arr[i - length] max_sum = max(max_sum, current_sum) return max_sum # Example usage # n = 5 # k = 3 # array = [1, -2, 3, 4, -1] # print(max_subarray_sum(array, n, k)) # Output: 7"},{"question":"Your task is to calculate the product (denoted as P) of all the palindromic numbers between [A, B]. An integer is called palindromic if it reads the same forwards and backwards. Input format A B Output format P % 1000000007 Constraints 0 < A <= B < 10^18 Sample Input 10 20 Sample Output 121 Explanation 11 is the only palindromic number between 10 and 20 (both included). Hence, the answer is 11 (mod 1000000007).","solution":"def is_palindrome(n): Checks if a given number is a palindrome. return str(n) == str(n)[::-1] def product_of_palindromes(A, B): Calculates the product of all palindromic numbers between A and B, inclusive, and returns the product modulo 1000000007. MOD = 1000000007 product = 1 found_palindrome = False for number in range(A, B + 1): if is_palindrome(number): found_palindrome = True product = (product * number) % MOD if not found_palindrome: return 0 return product"},{"question":"Anna is an avid collector of gemstones, and she has amassed a large collection of gems over the years. Each gemstone in her collection can be classified by its type, and Anna has recorded the type of each gemstone in a list. Anna wants to create sets of gemstones such that all gemstones in a set are of the same type. However, Anna is very particular about the size of each set. She only considers sets that have a size greater than a certain threshold value, k. Your task is to help Anna determine the number of valid sets she can create from her collection. Input The first line of the input contains an integer n (1 ≤ n ≤ 5·105) — the number of gemstones in Anna\'s collection. The second line contains an integer k (1 ≤ k ≤ n) — the threshold size for the sets. The third line contains a sequence of n integers t1, t2, ..., tn (1 ≤ ti ≤ 107), where ti is the type of the i-th gemstone. Output Print a single integer — the number of valid sets of gemstones Anna can create. Examples Input 6 2 1 2 2 3 3 3 Output 2 Input 4 3 1 1 1 2 Output 1 Note In the first sample, Anna can create the following valid sets: * Set of type 2 gemstones: [2, 2], which has a size of 2. * Set of type 3 gemstones: [3, 3, 3], which has a size greater than 2. In the second sample, Anna can create the following valid set: * Set of type 1 gemstones: [1, 1, 1], which has a size equal to 3. No other sets meet the size requirement.","solution":"from collections import Counter def count_valid_sets(n, k, gemstones): Counts the number of valid sets of gemstones where each set has more than k stones of the same type. Parameters: n (int): Number of gemstones. k (int): Threshold size for the sets. gemstones (list of int): A list containing the types of each gemstone. Returns: int: The number of valid sets. gem_counter = Counter(gemstones) valid_sets = sum(1 for count in gem_counter.values() if count >= k) return valid_sets"},{"question":"Write a program that simulates a simple calculator supporting addition, subtraction, multiplication, division, and modulo operations. The calculator accepts mathematical expressions in infix notation, computes the result, and outputs the answer. The expressions can include integer numbers, and the five operators: `+`, `-`, `*`, `/`, and `%`. You can assume that the expressions are syntactically correct (i.e., no syntax error checking is required). The calculator should handle the operator precedence and associativity properly, where: - `*`, `/`, and `%` have higher precedence than `+` and `-`. - Operators of the same precedence are evaluated from left to right. The division (`/`) and modulo (`%`) operators should perform integer division and integer modulo respectively, and thus the result should always be an integer. # Input The input consists of multiple mathematical expressions, one per line. Each expression is up to 100 characters in length, and contains no spaces. A single line containing the word \\"END\\" indicates the end of the input, and you must not process this line as part of the input. # Output For each expression in the input, output the computed result on a new line. # Examples Input ``` 3+5*2 10/3-4 7%3+2*5 END ``` Output ``` 13 -1 11 ``` # Explanation 1. For the expression `3+5*2`: - First, `5*2` is evaluated to `10`. - Then, `3+10` is evaluated to `13`. 2. For the expression `10/3-4`: - First, `10/3` is evaluated to `3` (integer division). - Then, `3-4` is evaluated to `-1`. 3. For the expression `7%3+2*5`: - First, `7%3` is evaluated to `1`. - Then, `2*5` is evaluated to `10`. - Finally, `1+10` is evaluated to `11`.","solution":"import operator def safe_eval(expression): Evaluates a mathematical expression using only allowed operators. allowed_operators = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.floordiv, \'%\': operator.mod } # Replace operators in the expression with their corresponding function call expression = expression.replace(\'+\', \' + \').replace(\'-\', \' - \').replace(\'*\', \' * \') expression = expression.replace(\'/\', \' // \').replace(\'%\', \' % \') # Evaluate the expression safely return eval(expression, {\\"__builtins__\\": None}, allowed_operators) def process_expressions(expressions): results = [] for expr in expressions: if expr == \\"END\\": break result = safe_eval(expr) results.append(result) return results"},{"question":"Sarah is learning about sorting algorithms and wants to test her understanding by solving a problem. She has an array with n elements. Sarah needs to sort the array in non-decreasing order. After sorting the array, she wants to know the number of elements that were initially out of their final position. Your task is to help Sarah by counting how many elements in the original array are not in their sorted position when compared to the sorted version of the array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. -----Output----- Output the number of elements that are not in their sorted position. -----Examples----- Input 5 4 3 2 1 5 Output 4 Input 6 1 2 3 4 5 6 Output 0 -----Note----- In the first example, the sorted array is [1, 2, 3, 4, 5]. The elements 4, 3, 2, and 1 from the original array are not in their final position, hence the answer is 4. In the second example, as the array is already sorted, no element is out of its final position, so the answer is 0.","solution":"def count_out_of_place_elements(n, arr): Returns the number of elements in the original array that are not in their final sorted position. sorted_arr = sorted(arr) count = 0 for i in range(n): if arr[i] != sorted_arr[i]: count += 1 return count"},{"question":"You\'re building a simple incremental game where players can gain points over time through certain activities. The game tracks players\' points and provides rewards based on certain milestones. Each player\'s points start at 0, and they can gain points from either performing certain activities or through bonuses given occasionally by the game. The activities and bonuses are defined as follows: - Activity \\"A\\" provides 10 points - Activity \\"B\\" provides 20 points - Activity \\"C\\" provides 30 points - Bonuses are given periodically and can increase players\' points by a fixed amount Your task is to write a program that simulates the game and calculates the final points for each player based on a series of commands provided as the input. Input: The input starts with an integer `n` representing the number of players. The following lines contain strings representing the activities and bonuses for each player in the format `<player_id> <command>`, where `<player_id>` is an integer between 1 and `n` (inclusive) and `<command>` is a string representing an activity (\\"A\\", \\"B\\", or \\"C\\") or a bonus in the format \\"Bonus <points>\\", where `<points>` is an integer. The input ends with the string \\"End\\" indicating the end of the commands. Output: For each player, output the final points in the format `<player_id>: <points>` in ascending order of player_id. Example: Input: 3 1 A 2 B 3 C 1 Bonus 5 2 Bonus 10 1 C 3 Bonus 15 End Output: 1: 45 2: 30 3: 45","solution":"def incremental_game(n, commands): # Initialize points for each player points = {i: 0 for i in range(1, n+1)} # Process each command for command in commands: if command == \\"End\\": break parts = command.split() player_id = int(parts[0]) activity = parts[1] if activity == \\"A\\": points[player_id] += 10 elif activity == \\"B\\": points[player_id] += 20 elif activity == \\"C\\": points[player_id] += 30 elif activity == \\"Bonus\\": bonus_points = int(parts[2]) points[player_id] += bonus_points # Prepare output in ascending order of player_id result = [] for player_id in sorted(points.keys()): result.append(f\\"{player_id}: {points[player_id]}\\") return result"},{"question":"Problem Alex loves arrays and operations on them. He has an array of integers and wants to perform a series of operations to make all elements of the array equal. The operations are: 1. Choose any two adjacent elements and add the smaller element to the larger one. Write a function that takes an array of integers as input and returns the minimum number of operations required to make all elements in the array equal. If it is not possible, return -1. Constraints The input satisfies the following conditions: * The array contains integers. * 1 ≤ array length ≤ 10^5 * 1 ≤ array elements ≤ 10^4 Input The input format is as follows: * The first line contains an integer n, the length of the array. * The second line contains n integers, representing the elements of the array. Output Print the minimum number of operations required to make all array elements equal, or -1 if it is not possible. Examples Input 5 1 1 1 1 1 Output 0 Input 3 1 2 3 Output 3 Input 4 3 6 9 12 Output 6","solution":"def min_operations_to_equalize_array(arr): Returns the minimum number of operations required to make all elements of the array equal, or -1 if it is not possible. if len(arr) == 0: return -1 def gcd(a, b): while b: a, b = b, a % b return a n = len(arr) overall_gcd = arr[0] for num in arr[1:]: overall_gcd = gcd(overall_gcd, num) if overall_gcd != arr[0]: return -1 operations = 0 for num in arr: operations += (num // overall_gcd - 1) return operations"},{"question":"Given a 2D grid of characters and a list of words, write a function `wordSearch(board, words)` that returns a list of words from the given list that can be found in the grid. Words can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Example: Input: board = [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] words = [\\"oath\\", \\"pea\\", \\"eat\\", \\"rain\\"] Output: [\\"oath\\", \\"eat\\"] Explanation: - \\"oath\\" can be formed by the letter sequence `board[0][0] -> board[1][0] -> board[2][1] -> board[3][2]`. - \\"eat\\" can be formed by the letter sequence `board[1][1] -> board[1][2] -> board[0][2]`. Note: - All characters in the board and words are of lowercase English letters. - The length of each word that needs to be searched is in the range [1, 10]. - The number of words does not exceed 30. - The dimensions of the grid do not exceed 12x12. Expected Time Complexity: O(N * M * 4^L), where N is the number of rows of the board, M is the number of columns of the board, and L is the maximum length of any word. Expected Auxiliary Space: O(N * M + W), where N is the number of rows of the board, M is the number of columns of the board, and W is the number of words in the list.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False self.word = None class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True node.word = word def wordSearch(board, words): if not board or not board[0]: return [] def backtrack(r, c, node): char = board[r][c] curr_node = node.children[char] word_match = curr_node.word if word_match: result.add(word_match) curr_node.word = None # Avoid duplicate entries in the result set board[r][c] = \\"#\\" for row_offset, col_offset in [(0, 1), (1, 0), (0, -1), (-1, 0)]: new_r, new_c = r + row_offset, c + col_offset if 0 <= new_r < len(board) and 0 <= new_c < len(board[0]) and board[new_r][new_c] in curr_node.children: backtrack(new_r, new_c, curr_node) board[r][c] = char trie = Trie() for word in words: trie.insert(word) result = set() for r in range(len(board)): for c in range(len(board[0])): if board[r][c] in trie.root.children: backtrack(r, c, trie.root) return list(result)"},{"question":"You have recently joined a logistics company that handles the shipment of packages between multiple cities. Your task is to write a program that helps determine the shortest path to deliver a package from one city to another using the company\'s delivery routes. The delivery routes are given as a list of direct connections between two cities along with the time taken to travel each route. Your program should compute the minimum time required to deliver the package from a specified starting city to a destination city. Input The input consists of several scenarios. The first line of each scenario contains two integers: N (2 ≤ N ≤ 100) representing the number of cities, and M (1 ≤ M ≤ 1000) representing the number of direct routes. Each of the next M lines contains three pieces of information: C1 C2 T where C1 and C2 are the names of the two cities connected by the direct route and T is the travel time in minutes. The last line of each scenario contains two city names indicating the starting city and the destination city. All city names are composed of alphabetical letters and are up to 20 characters long. The end of the input is indicated by a line containing only a single zero. This is not part of any scenario. Output For each scenario, output the minimum time required to travel from the starting city to the destination city. If there is no valid route between the two cities, output \\"NO PATH\\". Example Input 4 3 A B 10 B C 20 C D 30 A D 3 2 X Y 5 Y Z 10 X Z 0 Output 60 15","solution":"import heapq def find_shortest_path(num_cities, num_routes, routes, start, end): graph = {} for c1, c2, t in routes: if c1 not in graph: graph[c1] = [] if c2 not in graph: graph[c2] = [] graph[c1].append((c2, t)) graph[c2].append((c1, t)) # Dijkstra\'s algorithm def dijkstra(start, end): min_heap = [(0, start)] visited = set() min_times = {start: 0} while min_heap: current_time, current_city = heapq.heappop(min_heap) if current_city == end: return current_time if current_city in visited: continue visited.add(current_city) for neighbor, time in graph.get(current_city, []): if neighbor in visited: continue new_time = current_time + time if new_time < min_times.get(neighbor, float(\'inf\')): min_times[neighbor] = new_time heapq.heappush(min_heap, (new_time, neighbor)) return \\"NO PATH\\" return dijkstra(start, end) def process_input(input_lines): index = 0 results = [] while index < len(input_lines): line = input_lines[index].strip() index += 1 if line == \'0\': break num_cities, num_routes = map(int, line.split()) routes = [] for _ in range(num_routes): c1, c2, t = input_lines[index].split() routes.append((c1, c2, int(t))) index += 1 start, end = input_lines[index].split() index += 1 result = find_shortest_path(num_cities, num_routes, routes, start, end) results.append(result) return results"},{"question":"A software company conducts a debugging session where programmers are given a piece of code that contains some bugs. Programmers need to debug and correct the code to make it work as intended. The company has provided a task for you to solve. You are given a list of strings, each representing a binary number (a string of \'0\'s and \'1\'s). You need to convert each binary number to its decimal equivalent, then sort all the decimal numbers in ascending order, and finally convert the sorted decimal numbers back to their binary form. Implement a function that takes a list of binary strings, performs the conversion, sorting, and conversion back to binary strings, and returns the sorted list of binary strings. Function Signature: ```python def sort_binary_numbers(bin_list: List[str]) -> List[str]: pass ``` # Input - `bin_list`: A list of strings where each string is a binary number. (1 ≤ len(bin_list) ≤ 1000) # Output - Returns a list of binary strings sorted based on their decimal value. # Example ```python input: [\\"101\\", \\"1\\", \\"11\\", \\"10\\"] output: [\\"1\\", \\"10\\", \\"11\\", \\"101\\"] input: [\\"1100\\", \\"1010\\", \\"111\\", \\"10000\\"] output: [\\"111\\", \\"1010\\", \\"1100\\", \\"10000\\"] ``` # Constraints - The length of each binary string is at most 15 characters. - The input list will not contain any invalid binary strings. - Conversion of a binary string to its decimal equivalent should handle binary strings of up to length 15. # Notes - You may use Python\'s built-in functions for binary to decimal conversion and vice versa. - Make sure to handle edge cases where the list might contain a single element or all elements are the same.","solution":"from typing import List def sort_binary_numbers(bin_list: List[str]) -> List[str]: Takes a list of binary strings, converts them to their decimal equivalents, sorts the decimal values, and converts them back to binary strings. # Convert binary strings to decimal numbers decimal_nums = [int(bin_str, 2) for bin_str in bin_list] # Sort the decimal numbers decimal_nums.sort() # Convert sorted decimal numbers back to binary strings sorted_bin_list = [bin(dec_num)[2:] for dec_num in decimal_nums] return sorted_bin_list"},{"question":"You are given an integer array P of length N and Q queries to perform. Each query consists of three integers X, Y, and Z. For each query, determine whether there exists a non-empty subsequence in the range [X, Y] (1-based index) of the array that sums to Z. Print \\"YES\\" if such a subsequence exists, otherwise print \\"NO\\". Input format The first line contains an integer N, the length of the array. The second line contains N space-separated integers P1, P2, ..., PN (the elements of the array). The third line contains an integer Q, the number of queries. Each of the next Q lines contains three integers X, Y, and Z describing one query. Output format For each query, print \\"YES\\" on a new line if there exists a subsequence within the specified range that sums to Z, otherwise print \\"NO\\". Constraints 1 ≤ N, Q ≤ 50,000 -10^4 ≤ Pi ≤ 10^4 1 ≤ X ≤ Y ≤ N -10^4 ≤ Z ≤ 10^4 SAMPLE INPUT 6 1 3 -4 2 2 -2 5 1 3 4 2 5 1 1 6 -2 3 4 -6 4 6 2 SAMPLE OUTPUT YES YES YES NO YES","solution":"def can_find_subsequence_with_sum(P, queries): from itertools import combinations results = [] for x, y, z in queries: subsequence = P[x-1:y] found = False for length in range(1, len(subsequence) + 1): if found: break for combo in combinations(subsequence, length): if sum(combo) == z: results.append(\\"YES\\") found = True break if not found: results.append(\\"NO\\") return results # Inputs for demonstration, replace with actual inputs N = 6 P = [1, 3, -4, 2, 2, -2] Q = 5 queries = [ (1, 3, 4), (2, 5, 1), (1, 6, -2), (3, 4, -6), (4, 6, 2) ] # Expected Output: [\'YES\', \'YES\', \'YES\', \'NO\', \'YES\'] print(can_find_subsequence_with_sum(P, queries))"},{"question":"Write a function that takes in a list of strings (`words`) and a character (`char`). The function should return a new list containing only the words that start with the given character. The function should be case-sensitive, meaning that \'A\' and \'a\' are considered different characters. For example: ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"apricot\\", \\"blueberry\\"] char = \'a\' ``` Calling your function with the above input should return: ```python [\\"apple\\", \\"apricot\\"] ``` Additionally, if no words in the list start with the given character, the function should return an empty list.","solution":"def words_starting_with_char(words, char): Returns a list of words that start with the given character. Parameters: words (list): A list of strings. char (str): A character to filter words by. Returns: list: A new list containing words that start with the given character. return [word for word in words if word.startswith(char)]"},{"question":"A prestigious software company is conducting interviews for experienced candidates. In one of the rounds, candidates are asked to solve a string transformation problem. The problem statement is as follows: You are given a string `s` consisting of lowercase letters. You need to transform this string into a \\"palindromic\\" string by performing a series of operations. In each operation, you can either: - Add a single character to the beginning of the string, or - Add a single character to the end of the string. Your task is to determine the minimum number of operations required to make the string a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. Input: - The input contains a single string `s` (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. Output: - Output a single integer representing the minimum number of operations required to transform the given string into a palindrome. SAMPLE INPUT abcb SAMPLE OUTPUT 1 Explanation Sample Explanation: To transform the string \\"abcb\\" into a palindrome, you can add \'a\' to the end, forming \\"abcba\\". Therefore, only 1 operation is needed. Additional Sample Case: Input: race Output: 3 Additional Case Explanation: To make \\"race\\" a palindrome, you can add \'e\' to the beginning, \'c\' to the beginning, and \'a\' to the beginning, forming \\"ecarace\\". Therefore, a minimum of 3 operations is required.","solution":"def min_operations_to_palindrome(s): Determines the minimum number of operations required to make the input string a palindrome. Parameters: s (str): The input string consisting of lowercase letters. Returns: int: The minimum number of operations required. n = len(s) memo = [[0] * n for _ in range(n)] for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: memo[l][r] = memo[l + 1][r - 1] else: memo[l][r] = 1 + min(memo[l][r - 1], memo[l + 1][r]) return memo[0][n - 1]"},{"question":"Write a function that given a list of points in a 2D plane, determines the point that is closest to the origin (0,0) using the Euclidean distance. If there are multiple points with the same minimum distance, return the one that comes first in the input list. -- Input -- The function should take a single argument: - points: a list of tuples, where each tuple contains two integers representing the x and y coordinates of a point on the 2D plane. The list will have at least one point and no more than 100,000 points. -- Output -- The function should return a tuple representing the x and y coordinates of the point closest to the origin. -- Example -- Input points = [(2,3), (1,1), (-1,-1), (3,3), (0,2)] Output (1, 1) -- Note -- In the example, the point (1,1) has the shortest distance to the origin (√2). Although (-1,-1) has the same distance to the origin, (1,1) appears first in the input list. Hence, (1,1) is the correct output.","solution":"def closest_point_to_origin(points): Returns the point closest to the origin. def euclidean_distance(point): x, y = point return x**2 + y**2 closest_point = points[0] min_distance = euclidean_distance(closest_point) for point in points[1:]: distance = euclidean_distance(point) if distance < min_distance: closest_point = point min_distance = distance return closest_point"},{"question":"A library needs a new system to manage its book reservations and lending. The system should support members in reserving and checking out books, ensuring that no two members can reserve or check out the same book simultaneously. Additionally, the system should handle returns and provide a way to check the availability of a book. -----Input format:----- - The first line contains an integer N which represents the total number of operations to be performed. - The next N lines each contain one of the three types of operations: - \\"RESERVE MEMBER_ID BOOK_ID\\" which reserves the book for the member if it’s available. - \\"CHECKOUT MEMBER_ID BOOK_ID\\" which allows the member to check out the book if they have reserved it. - \\"RETURN MEMBER_ID BOOK_ID\\" which returns the book and makes it available for other members. - \\"AVAILABILITY BOOK_ID\\" which checks if the book is available (neither reserved nor checked out). -----Output format:----- - For each \\"RESERVE\\" operation, return \\"Success\\" if the book was successfully reserved or \\"Book Not Available\\" if it was already reserved or checked out. - For each \\"CHECKOUT\\" operation, return \\"Success\\" if the book was successfully checked out or \\"Reservation Required\\" if the book was not reserved by the member or \\"Book Not Available\\" if the book is already checked out by another member. - For each \\"RETURN\\" operation, return \\"Success\\" if the book was successfully returned or \\"Not Checked Out\\" if the book was not checked out by the member. - For each \\"AVAILABILITY\\" operation, return \\"Available\\" if the book is available or \\"Not Available\\" if it is reserved or checked out. -----Constraints:----- - 1 leq N leq 10^4 - 1 leq MEMBER_ID, BOOK_ID leq 10^6 -----Example:----- -----Input:----- 9 RESERVE 1 101 RESERVE 2 101 CHECKOUT 1 101 CHECKOUT 2 101 AVAILABILITY 101 RETURN 1 101 AVAILABILITY 101 RETURN 1 101 CHECKOUT 2 101 -----Output:----- Success Book Not Available Success Reservation Required Not Available Success Available Not Checked Out Reservation Required","solution":"class LibrarySystem: def __init__(self): self.reservations = {} # BOOK_ID -> MEMBER_ID self.checked_out = {} # BOOK_ID -> MEMBER_ID def reserve(self, member_id, book_id): if book_id in self.checked_out or book_id in self.reservations: return \\"Book Not Available\\" self.reservations[book_id] = member_id return \\"Success\\" def checkout(self, member_id, book_id): if book_id not in self.reservations or self.reservations[book_id] != member_id: return \\"Reservation Required\\" if book_id in self.checked_out: return \\"Book Not Available\\" self.checked_out[book_id] = member_id del self.reservations[book_id] return \\"Success\\" def return_book(self, member_id, book_id): if book_id not in self.checked_out or self.checked_out[book_id] != member_id: return \\"Not Checked Out\\" del self.checked_out[book_id] return \\"Success\\" def availability(self, book_id): if book_id in self.checked_out or book_id in self.reservations: return \\"Not Available\\" return \\"Available\\" def process_operations(operations): library_system = LibrarySystem() output = [] for operation in operations: cmd, member_id, book_id = None, None, None parts = operation.split() cmd = parts[0] if cmd in [\\"RESERVE\\", \\"CHECKOUT\\", \\"RETURN\\"]: member_id = int(parts[1]) book_id = int(parts[2]) elif cmd == \\"AVAILABILITY\\": book_id = int(parts[1]) if cmd == \\"RESERVE\\": output.append(library_system.reserve(member_id, book_id)) elif cmd == \\"CHECKOUT\\": output.append(library_system.checkout(member_id, book_id)) elif cmd == \\"RETURN\\": output.append(library_system.return_book(member_id, book_id)) elif cmd == \\"AVAILABILITY\\": output.append(library_system.availability(book_id)) return output"},{"question":"A game developer is creating a new role-playing game where players can collect various items. Each item has a specific weight and value. Players have a maximum carrying capacity and they want to maximize the total value of the items they carry. Your task is to help the players by implementing a function that determines the maximum value of items that can be carried without exceeding the carrying capacity. Given a list of items, each with a weight and a value, and a maximum carrying capacity, find the maximum total value that can be carried. Constraints: - 1 ≤ number of items (N) ≤ 1000 - 1 ≤ weight of each item (weight[i]) ≤ 1000 - 1 ≤ value of each item (value[i]) ≤ 1000 - 1 ≤ maximum carrying capacity (W) ≤ 1000 Input: The input consists of: 1. An integer N representing the number of items. 2. A list of N integers representing the weights of the items. 3. A list of N integers representing the values of the items. 4. An integer W representing the maximum carrying capacity. Output: Output a single integer, the maximum value of items that can be carried without exceeding the carrying capacity. Examples: Input: 4 2 3 4 5 3 4 5 6 5 Output: 7 Input: 3 1 2 3 6 10 12 5 Output: 22","solution":"def knapsack(N, weights, values, W): Determines the maximum value of items that can be carried without exceeding the carrying capacity. :param N: int, number of items :param weights: list of ints, weights of the items :param values: list of ints, values of the items :param W: int, maximum carrying capacity :return: int, the maximum value that can be carried # Initialize DP table with zeros dp = [[0 for _ in range(W + 1)] for _ in range(N + 1)] # Build the DP table for i in range(1, N + 1): for w in range(1, W + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] # The bottom-right cell contains the maximum value return dp[N][W]"},{"question":"You are building a photo album application that allows users to tag people in photos. Each photo has a unique ID, and each person tagged in a photo has a unique ID as well. You need to ensure that the same person is not tagged multiple times in the same photo and get the total number of unique tags for each photo. Write a function that takes a list of tuples as input, where each tuple contains two integers: the first integer is the photo ID, and the second integer is the person ID who is tagged. Your function should return a dictionary where the keys are photo IDs and the values are the number of unique people tagged in that photo. Input - A list of tuples, each containing two integers: (photo_id, person_id). Output - A dictionary where keys are photo IDs and values are the number of unique people tagged in that photo. Example Input [(1, 101), (1, 102), (2, 101), (1, 101), (2, 101), (1, 103), (2, 102)] Output {1: 3, 2: 2} Explanation In photo 1, three unique people (101, 102, and 103) are tagged. In photo 2, two unique people (101 and 102) are tagged.","solution":"def count_unique_tags(tag_list): Returns a dictionary with photo IDs as keys and the number of unique people tagged in that photo as values. :param tag_list: List of tuples, each containing two integers: (photo_id, person_id) :return: Dictionary where keys are photo IDs and values are the number of unique people tagged in that photo tag_dict = {} for photo_id, person_id in tag_list: if photo_id not in tag_dict: tag_dict[photo_id] = set() tag_dict[photo_id].add(person_id) return {photo_id: len(people) for photo_id, people in tag_dict.items()}"},{"question":"An e-commerce company wants to analyze the browsing patterns of its users. To do this, they track the number of visits each day for the past n days. To find trends and patterns, they want to determine the length of the longest increasing subsequence in the number of daily visits. The longest increasing subsequence is the longest series of days where each subsequent day has more visits than the previous day. Can you help the company write a program that finds the length of the longest increasing subsequence in the number of daily visits? -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of days the company has tracked visits. The next line contains n integers v_{i} (1 ≤ v_{i} ≤ 10^9). The i-th of these integers represents the number of visits on the i-th day. -----Output----- Print an integer representing the length of the longest increasing subsequence in the number of daily visits. -----Examples----- Input 6 10 22 9 33 21 50 Output 4 Input 5 3 10 2 1 20 Output 3 -----Note----- In the first sample, the longest increasing subsequence is 10, 22, 33, 50. In the second sample, the longest increasing subsequence is 3, 10, 20.","solution":"from bisect import bisect_left def longest_increasing_subsequence_length(n, visits): Returns the length of the longest increasing subsequence in the number of daily visits. if n == 0: return 0 lis = [] for visit in visits: pos = bisect_left(lis, visit) if pos == len(lis): lis.append(visit) else: lis[pos] = visit return len(lis)"},{"question":"You are given an array of integers representing the heights of buildings on a street. The buildings are located consecutively along the street. There is another array of integers representing the maximum number of jumps each building can make. You need to determine if it is possible to jump from the first building to the last building. A jump is defined as moving from the current building to the next building or skipping several buildings forward, as long as the number of buildings skipped does not exceed the maximum number of jumps allowed from the current building. -----Input----- The first line contains one integer n (1 le n le 100) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 le h_i le 100), representing the heights of the buildings. The third line contains n integers j_1, j_2, ..., j_n (0 le j_i le n-1), representing the maximum number of jumps each building can make. -----Output----- Print \\"YES\\" if it is possible to jump from the first building to the last building, otherwise print \\"NO\\". -----Examples----- Input 5 10 20 30 40 50 1 2 1 1 0 Output YES Input 5 10 20 30 40 50 0 0 0 0 0 Output NO Input 3 10 30 20 1 1 1 Output YES Input 6 10 9 8 7 6 5 2 3 2 1 1 0 Output YES -----Note----- In the first example, it is possible to jump from the first building with height 10 to the second building with height 20. Then, from the second building, you can jump to the fourth building with height 40, and finally to the fifth building with height 50. In the second example, no building allows any jumps, making it impossible to reach the last building.","solution":"def can_jump_to_last_building(n, heights, jumps): Determines if it\'s possible to jump from the first building to the last building. Parameters: n (int): Number of buildings heights (list of int): Heights of the buildings jumps (list of int): Maximum number of jumps each building can make Returns: str: \\"YES\\" if it\'s possible to jump from the first to the last building, otherwise \\"NO\\" reachable = [False] * n reachable[0] = True # Start from the first building for i in range(n): if reachable[i]: for j in range(1, jumps[i] + 1): if i + j < n: reachable[i + j] = True return \\"YES\\" if reachable[-1] else \\"NO\\" # Example usage n = 5 heights = [10, 20, 30, 40, 50] jumps = [1, 2, 1, 1, 0] print(can_jump_to_last_building(n, heights, jumps)) # Output should be \\"YES\\""},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a program that checks whether a given string is a palindrome, and identify the longest palindromic substring within the input. The program should take a string ( s ) as an input and output whether ( s ) is a palindrome and the longest palindromic substring found within ( s ). If there are multiple substrings of the same maximum length, return the first one found. Input A sequence of multiple datasets is given as input. Each dataset is a single line of text. The end of the input is indicated by a single line of \\"END\\". The number of datasets does not exceed 50. Output For each dataset, output two lines: 1. \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. 2. The longest palindromic substring. Example Input madam racecar apple noon END Output YES madam YES racecar NO pp YES noon","solution":"def is_palindrome(s): Returns True if s is a palindrome, ignoring spaces, punctuation, and capitalization. stripped = \'\'.join([c.lower() for c in s if c.isalnum()]) return stripped == stripped[::-1] def longest_palindromic_substring(s): Returns the longest palindromic substring in s. n = len(s) if n == 0: return \\"\\" longest = \\"\\" def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] for i in range(n): # Odd length palindrome p1 = expand_around_center(i, i) if len(p1) > len(longest): longest = p1 # Even length palindrome p2 = expand_around_center(i, i + 1) if len(p2) > len(longest): longest = p2 return longest def process_input_strings(input_strings): Process a list of input strings and return the results. result = [] for s in input_strings: if s == \\"END\\": break palin_check = \\"YES\\" if is_palindrome(s) else \\"NO\\" longest_substr = longest_palindromic_substring(s) result.append((palin_check, longest_substr)) return result"},{"question":"A music streaming app allows users to play their favorite songs. The app keeps track of all songs played by each user along with the timestamp of when each song started playing. Given the play history of two users, determine the number of seconds during which both users were playing a song simultaneously. Each user\'s play history is provided as a list of tuples, where each tuple represents a song play with a start time and an end time (both represented as seconds from midnight). -----Constraints----- - 0 ≤ start < end ≤ 86400 (number of seconds in a day) - The lists are sorted in ascending order of the start time - The length of the lists does not exceed 100 -----Input----- Input is given from Standard Input in the following format: ``` n user1_start1 user1_end1 user1_start2 user1_end2 ... user1_startn user1_endn m user2_start1 user2_end1 user2_start2 user2_end2 ... user2_startm user2_endm ``` - n: number of songs played by user 1 - user1_starti user1_endi: start and end times for song i in seconds for user 1 - m: number of songs played by user 2 - user2_startj user2_endj: start and end times for song j in seconds for user 2 -----Output----- Print the total number of seconds both users were playing a song simultaneously. -----Sample Input----- 3 0 100 150 300 400 500 2 50 200 250 350 -----Sample Output----- 150 Explanation: - The overlapping periods are: - [50, 100]: 50 seconds (from 50 to 100) - [250, 300]: 50 seconds (from 250 to 300) - Total = 50 + 50 + 50 = 150 seconds","solution":"def calculate_overlap(user1, user2): i, j = 0, 0 total_overlap = 0 while i < len(user1) and j < len(user2): start1, end1 = user1[i] start2, end2 = user2[j] if end1 <= start2: i += 1 elif end2 <= start1: j += 1 else: overlap_start = max(start1, start2) overlap_end = min(end1, end2) total_overlap += max(0, overlap_end - overlap_start) if end1 < end2: i += 1 else: j += 1 return total_overlap def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) user1 = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(n)] m = int(data[2*n+1]) user2 = [(int(data[2*n+2+2*j]), int(data[2*n+2+2*j+1])) for j in range(m)] result = calculate_overlap(user1, user2) print(result)"},{"question":"Julia is planning to make a rectangular flowerbed in her garden, using some wooden planks she found in her garage. Each wooden plank has a given length, and she wants to use these planks to form the perimeter of the rectangle. However, she can only use each plank once. Write a program to determine if she can form a rectangle with a given set of planks. -----Input----- The first line contains a single integer n (1 leq n leq 100000), the number of planks. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^6), the lengths of the planks. -----Output----- Print \\"yes\\" if she can form a rectangle, otherwise print \\"no\\" (both without quotes). -----Examples----- Sample Input: 6 2 2 2 2 4 4 Sample Output: yes Sample Input: 5 1 2 3 4 5 Sample Output: no","solution":"def can_form_rectangle(n, planks): from collections import Counter # Count the frequency of each plank length frequency = Counter(planks) # Count pairs of planks pairs = sum(count // 2 for count in frequency.values()) # To form a rectangle, we need at least 4 planks (2 pairs) return pairs >= 2 def rectangle_possible(n, plank_lengths): if can_form_rectangle(n, plank_lengths): return \\"yes\\" else: return \\"no\\""},{"question":"You are given a set of N distinct integers. You need to determine if there exists a subset of these integers such that the sum of the subset is equal to a given target value T. If such a subset exists, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains an integer, N, the number of integers in the set. The second line contains N space-separated integers representing the set. The third line contains an integer T, the target sum. -----Output----- Output \\"YES\\" if there is a subset whose sum is equal to T, otherwise output \\"NO\\". -----Example----- Input: 5 3 34 4 12 5 9 Output: YES Input: 5 3 34 4 12 5 30 Output: NO","solution":"def is_subset_sum_possible(N, arr, T): Determines if there exists a subset of the given set of N integers such that the sum is equal to T. :param N: Number of integers in the set. :param arr: List of integers in the set. :param T: Target sum. :return: \\"YES\\" if such a subset exists, otherwise \\"NO\\". # Initialize a DP table with T+1 columns (for all sums from 0 to T) and N+1 rows (for all subsets) dp = [[False] * (T + 1) for _ in range(N + 1)] # An empty subset can always form sum 0 for i in range(N + 1): dp[i][0] = True # Fill the rest of the DP table for i in range(1, N + 1): for j in range(1, T + 1): # If the current element is greater than the current sum, we can\'t include it if arr[i - 1] > j: dp[i][j] = dp[i - 1][j] else: # We can either include the current element or exclude it dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return \\"YES\\" if dp[N][T] else \\"NO\\""},{"question":"Alice is responsible for organizing her company\'s annual hackathon event. Every year, the participants are organized into teams, with each team given a specific number of projects to complete. This year, the company has decided to enhance the rules to ensure a fair distribution of workload among the teams. The main rule Alice must enforce is that each team should have a unique number of projects such that no two teams have the same number of projects. Additionally, she wants to minimize the difference between the maximum and minimum number of projects assigned to any team to ensure an even distribution. Alice has prepared a list of the number of projects each team should ideally take, but without verifying the uniqueness or the range criteria. Your task is to help Alice through a program that adjusts the number of projects for each team according to the mentioned rules. Write a program that takes a list of the ideal number of projects for each team and outputs a list where each number is unique and the difference between the maximum and minimum numbers is minimized. Input - A single integer `n` (1 ≤ n ≤ 100), representing the number of teams. - A line consisting of `n` integers, each representing the ideal number of projects for each team. Output - A line of `n` integers listing the adjusted number of projects for each team. Ensure the numbers are unique and the difference between the highest and lowest value is minimized. Example Input 5 3 8 5 6 8 Output 4 8 5 6 7 Input 4 10 10 10 10 Output 7 10 8 9 Explanation In the first example, the ideal list is [3, 8, 5, 6, 8]. To satisfy the uniqueness condition with minimal range variation, one of the 8s is adjusted to 7, and the 3 to 4, making the list: [4, 8, 5, 6, 7]. In the second example, since all integers are the same, Alice must adjust them to ensure uniqueness, with minimal difference, resulting in [7, 10, 8, 9].","solution":"def minimize_difference_and_uniqueness(n, projects): projects.sort() unique_projects = [] current_value = projects[0] for _ in range(n): unique_projects.append(current_value) current_value += 1 return unique_projects"},{"question":"You are given a string ( s ) consisting of lowercase letters. Your task is to find the length of the shortest substring of ( s ) that contains all the distinct characters of ( s ) at least once. -----Input----- A single line containing the string ( s ) (1 ≤ |s| ≤ 10^5). -----Output----- Print a single integer — the length of the shortest substring of ( s ) that contains all the distinct characters of ( s ) at least once. -----Examples----- Input abac Output 3 Input aabc Output 3","solution":"def length_of_shortest_substring_with_all_distinct_chars(s): from collections import Counter distinct_chars = set(s) char_count = len(distinct_chars) current_count = Counter() left = 0 min_length = float(\'inf\') for right in range(len(s)): current_count[s[right]] += 1 while len(current_count) == char_count: min_length = min(min_length, right - left + 1) current_count[s[left]] -= 1 if current_count[s[left]] == 0: del current_count[s[left]] left += 1 return min_length"},{"question":"You are given a matrix of size N x M filled with integers. You can perform the following operation any number of times: - Select any row or any column and increase each element of that row/column by 1. Your task is to determine whether it\'s possible to make the matrix a specific target matrix where all the elements are identical. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and M — the dimensions of the matrix. - The next N lines each contain M space-separated integers denoting the elements of the matrix. ------ Output Format ------ For each test case, print \\"YES\\" if it\'s possible to make all elements of the matrix identical, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 - The elements of the matrix are integers that can be between -10^9 to 10^9 inclusive. ------- Sample Input 1 ------ 2 2 2 1 1 1 1 3 3 1 2 3 4 5 6 7 8 9 ------- Sample Output 1 ------ YES NO ------ Explanation 1 ------ Test case 1: The matrix is already uniform with all elements equal to 1. Test case 2: It is not possible to convert the given matrix to a uniform matrix using the allowed operations.","solution":"def can_make_identical_matrix(matrix): This function checks if it is possible to make all elements of the matrix identical by performing the given operations any number of times. # Calculate the modulo of each element with respect to the value of matrix[0][0] base = matrix[0][0] for row in matrix: for element in row: if element % 2 != base % 2: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] matrix = test_cases[i][1] results.append(can_make_identical_matrix(matrix)) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 matrix = [] for _ in range(N): row = list(map(int, data[index:index + M])) index += M matrix.append(row) test_cases.append(((N, M), matrix)) results = process_test_cases(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"# Scenario You are given a string containing various letters, and your task is to find out the number of vowels and consonants present in the string. # Task **Given** a string s, **return** a new tuple containing two integers, where the first integer is the count of vowels in the string, and the second integer is the count of consonants in the string. # Notes - The input string will not be empty and will only contain alphabetic characters. - Vowels are `a`, `e`, `i`, `o`, `u` (both uppercase and lowercase) - Consonants are all other alphabetic characters that are not vowels. # Input >> Output Examples ``` countVowelsConsonants(\\"hello\\") ==> return (2, 3) ``` Explanation: The input string `hello` contains 2 vowels (`e` and `o`) and 3 consonants (`h`, `l`, and `l`). ``` countVowelsConsonants(\\"world\\") ==> return (1, 4) ``` Explanation: The input string `world` contains 1 vowel (`o`) and 4 consonants (`w`, `r`, `l`, and `d`). ``` countVowelsConsonants(\\"AEIOU\\") ==> return (5, 0) ``` Explanation: The input string `AEIOU` contains 5 vowels (`A`, `E`, `I`, `O`, and `U`) and 0 consonants.","solution":"def countVowelsConsonants(s): Returns a tuple containing the count of vowels and consonants in the given string s. vowels = \\"aeiouAEIOU\\" count_vowels = 0 count_consonants = 0 for char in s: if char in vowels: count_vowels += 1 else: count_consonants += 1 return (count_vowels, count_consonants)"},{"question":"A company is organizing a coding competition, and they want to distribute prizes to participants. Each participant receives a prize based on their ranking, with higher-ranked participants getting larger prizes. The prize distribution is handled as follows: - The first participant gets a prize of 1. - The second participant gets a prize of 2. - The third participant gets a prize of 3. - This continues such that the nth participant gets a prize of n. The company has a total budget of B, and they want to maximize the number of participants they can award prizes to without exceeding the budget. Your task is to help the company determine the maximum number of participants that can receive prizes given the budget B. Input The input consists of a single integer B (1 ≤ B ≤ 109) — the total budget for the prizes. Output Output a single integer — the maximum number of participants that can receive prizes without exceeding the budget B. Examples Input 10 Output 4 Input 15 Output 5 Note In the first sample, the prizes for the first four participants are 1, 2, 3, and 4 respectively. The total cost is 1 + 2 + 3 + 4 = 10, which exactly matches the budget. Therefore, 4 participants can receive prizes. In the second sample, the prizes for the first five participants are 1, 2, 3, 4, and 5 respectively. The total cost is 1 + 2 + 3 + 4 + 5 = 15, which exactly matches the budget. Therefore, 5 participants can receive prizes.","solution":"def max_participants(B): Determine the maximum number of participants that can receive prizes without exceeding the budget B. participants = 0 total_cost = 0 while total_cost + participants + 1 <= B: participants += 1 total_cost += participants return participants"},{"question":"Alice is playing a game on a grid. The grid is a rectangular grid with R rows and C columns where each cell is either empty (.) or contains an obstacle (x). Alice can move up, down, left, or right, but cannot move into a cell with an obstacle. She starts at the top-left corner (1, 1) and wants to reach the bottom-right corner (R, C). Your task is to determine the shortest path from the start to the destination. If there is no path, return \\"No Path\\". -----Input----- The first line contains two integers R and C (1 le R, C le 100), the number of rows and columns in the grid. The following R lines each contain a string of C characters where each character is either \'.\' or \'x\'. -----Output----- Output either the length of the shortest path from (1, 1) to (R, C) or \\"No Path\\" if there is no such path. -----Examples----- Sample Input 1: 3 3 ... .xx ... Sample Output 1: 4 Sample Input 2: 4 4 .... .xx. .xx. .... Sample Output 2: 6 Sample Input 3: 2 2 .x x. Sample Output 3: No Path","solution":"from collections import deque def shortest_path(R, C, grid): Returns the length of the shortest path from (0, 0) to (R-1, C-1) or \\"No Path\\" if there is no such path. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start = (0, 0) end = (R-1, C-1) # Check if the start or end is blocked if grid[0][0] == \'x\' or grid[R-1][C-1] == \'x\': return \\"No Path\\" # BFS setup queue = deque([(start, 0)]) # (position, distance) visited = set() visited.add(start) while queue: (x, y), dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) return \\"No Path\\""},{"question":"Deep in the heart of the Enchanted Forest lies a mysterious, ancient tree. This tree holds a secret - it devises a unique sequence of numbers known as the \\"Treetop Sequence.\\" The sequence starts from 1 and each subsequent number is generated based on the sum of the previous numbers that appeared up to that point. Here is how the sequence begins: 1, 1, 2, 4, 8, 16,... Your quest is to conjure a function that, given a non-negative integer `k`, returns the `k`th number in the Treetop Sequence (0-indexed). For example: - `k = 0` should return `1` - `k = 1` should return `1` - `k = 2` should return `2` - `k = 3` should return `4` - `k = 4` should return `8` - `k = 5` should return `16` For any invalid values, such as negative integers or non-integers, return... `NaN`! Beware, young wizard - though the sequence appears simple, its growth is rapid and unwieldy. You must employ your sharpest mathematical tools to reveal the secrets of the ancient tree within the forest. Treetop Algorithm: A wizardly construct that may involve recursion or dynamic programming to handle the growing sequence.","solution":"def treetop_sequence(k): Given a non-negative integer k, returns the k-th number in the Treetop Sequence. If k is negative or not an integer, return NaN. if not isinstance(k, int) or k < 0: return float(\'NaN\') sequence = [] for i in range(k+1): if i == 0: sequence.append(1) else: sequence.append(sum(sequence)) return sequence[k]"},{"question":"You are given a list of integers representing the daily prices of a stock for a certain period, and an integer k. Your task is to find the maximum profit you can achieve by making at most k transactions. A transaction is defined as buying and then selling one share of the stock. You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). Implement a function `maxProfitWithKTransactions` that takes two parameters: an array of integers `prices` and an integer `k`. The function should return the maximum profit. Example 1: Input: prices = [2, 4, 1] k = 2 Output: 2 Explanation: You can achieve a maximum profit by buying at 2 and selling at 4. Example 2: Input: prices = [3, 2, 6, 5, 0, 3] k = 2 Output: 7 Explanation: You can achieve a maximum profit by making two transactions: 1. Buy at 2 and sell at 6. 2. Buy at 0 and sell at 3. Function Signature: ```python def maxProfitWithKTransactions(prices: List[int], k: int) -> int: # Your code goes here ``` Your Task: You don\'t need to read input or print anything. Complete the function `maxProfitWithKTransactions` which takes an integer array `prices` and an integer `k` as input and returns an integer representing the maximum profit. Expected Time Complexity: O(N * k) Expected Auxiliary Space: O(N * k) Constraints: 1 ≤ len(prices) ≤ 1000 0 ≤ prices[i] ≤ 1000 0 ≤ k ≤ 100","solution":"def maxProfitWithKTransactions(prices, k): if not prices or k == 0: return 0 n = len(prices) if k >= n // 2: return sum( max(prices[i] - prices[i - 1], 0) for i in range(1, n) ) profits = [[0] * n for _ in range(k + 1)] for t in range(1, k + 1): max_so_far = -prices[0] for d in range(1, n): profits[t][d] = max(profits[t][d - 1], prices[d] + max_so_far) max_so_far = max(max_so_far, profits[t - 1][d] - prices[d]) return profits[k][n - 1]"},{"question":"A factory has a system for monitoring its machines. Each machine has a status indicator that shows whether the machine is operational or not on a given day. The factory wants to know which machines have been operational for more than half of the days in a given week. Given 7 integers B_{1}, B_{2}, B_{3}, B_{4}, B_{5}, B_{6}, B_{7} for each machine where B_{i} = 1 denotes that the machine was operational on the i^{th} day of the week and B_{i} = 0 denotes that the machine was not operational on the i^{th} day. Determine if the machine was operational for more than half of the days in the week. ------ Input Format ------ - First line will contain M, the number of machines. Then the machine records follow. - Each machine record contains a single line of input, 7 space separated integers B_{1}, B_{2}, B_{3}, B_{4}, B_{5}, B_{6}, B_{7}. ------ Output Format ------ For each machine, print \\"OPERATIONAL\\" if the machine was operational for more than half of the days, otherwise print \\"NOT OPERATIONAL\\". Print the output without quotes. You may print each character of the string in uppercase or lowercase. ------ Constraints ------ 1 ≤ M ≤ 50 0 ≤ B_{i} ≤ 1 ------ Sample Input 1 ------ 3 1 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 1 1 1 ------ Sample Output 1 ------ OPERATIONAL NOT OPERATIONAL OPERATIONAL ------ Explanation 1 ------ Machine 1: The machine was operational 4 days and not operational 3 days. Hence it is operational for more than half of the days. Machine 2: The machine was operational 1 day and not operational 6 days. Hence it is not operational for more than half of the days. Machine 3: The machine was operational all 7 days. Hence it is operational for more than half of the days.","solution":"def machine_operational_status(machines_data): Determine the operational status of machines over a week. Parameters: machines_data (List[List[int]]): Nested list where each inner list contains the operational status of a machine for 7 days. Returns: List[str]: List containing \\"OPERATIONAL\\" or \\"NOT OPERATIONAL\\" for each machine. results = [] for machine in machines_data: if sum(machine) > 3: # More than half of 7 days results.append(\\"OPERATIONAL\\") else: results.append(\\"NOT OPERATIONAL\\") return results"},{"question":"Given an array of N integers, find the length of the longest subarray with an equal number of even and odd integers. -----Input----- The first line of input consists of a single integer N (1 leq N leq 100000). The next line consists of N space-separated integers a_1, a_2, dots , a_ N. -----Output----- Output the length of the longest subarray with an equal number of even and odd integers. -----Examples----- Sample Input 1: 6 1 2 3 4 5 6 Sample Output 1: 6 Sample Input 2: 5 2 4 6 8 10 Sample Output 2: 0","solution":"def longest_subarray_with_equal_even_odd(N, arr): count_diff = {0: -1} even_count = 0 odd_count = 0 max_len = 0 for i in range(N): if arr[i] % 2 == 0: even_count += 1 else: odd_count += 1 delta = even_count - odd_count if delta in count_diff: max_len = max(max_len, i - count_diff[delta]) else: count_diff[delta] = i return max_len"},{"question":"Palindrome Substrings You are given a string and you need to count how many substrings of this string are palindromes. A palindrome is a string that reads the same backward as forward. Input The input consists of a single string s (1 ≤ |s| ≤ 1000, where |s| denotes the length of the string). Output Print a single integer, the number of palindromic substrings in the input string. Sample Input 1 ababa Sample Output 1 9 Sample Input 2 abc Sample Output 2 3 Explanation In the first example, the string has nine palindromic substrings: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", and \\"ababa\\". In the second example, the string has three palindromic substrings: \\"a\\", \\"b\\", and \\"c\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 # Helper function to count palindromes centered at left, right def count_from_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes (single character center) count_from_center(i, i) # Even length palindromes (two character center) count_from_center(i, i + 1) return count"},{"question":"In a 2D grid of size `m x n`, each cell is either live (represented by `1`) or dead (represented by `0`). Every cell interacts with its eight neighbors (horizontal, vertical, diagonal). The next state (after one update) of a cell is determined by the following rules: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Write a function to compute the next state of the 2D grid. The input will be the grid and your function should modify the input grid in-place with the next state. Example: ```python def game_of_life(board): # implement the function here # Example Usage board = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] game_of_life(board) print(board) # Output should be: # [ # [0, 0, 0], # [1, 0, 1], # [0, 1, 1], # [0, 1, 0] # ] ``` Constraints: - `m = board.length` - `n = board[i].length` - `1 <= m, n <= 25` - All the cells in `board` are either `0` or `1`. Feel free to experiment with additional examples to ensure your solution handles various scenarios correctly.","solution":"def game_of_life(board): Given a 2D board of m x n cells, update the board to its next state according to the rules of Game of Life def count_neighbors(r, c): directions = [ (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1) ] count = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < len(board) and 0 <= nc < len(board[0]) and abs(board[nr][nc]) == 1: count += 1 return count m, n = len(board), len(board[0]) for r in range(m): for c in range(n): num_live_neighbors = count_neighbors(r, c) if board[r][c] == 1 and (num_live_neighbors < 2 or num_live_neighbors > 3): # Mark the cell as a cell that was live but will die board[r][c] = -1 if board[r][c] == 0 and num_live_neighbors == 3: # Mark the cell as a cell that was dead but will become live board[r][c] = 2 for r in range(m): for c in range(n): if board[r][c] == -1: board[r][c] = 0 if board[r][c] == 2: board[r][c] = 1"},{"question":"You\'re given a set of non-negative integers. Your task is to find the smallest non-negative integer that is not present in the given set. This integer will be denoted as the \\"missing integer.\\" Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the set. - The second line contains n space-separated non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 10^6). Output - Print a single integer — the smallest non-negative integer that is not present in the given set. Examples Input 5 0 1 2 3 5 Output 4 Input 3 3 0 6 Output 1","solution":"def find_missing_integer(n, arr): Finds the smallest non-negative integer that is not present in a given set. Parameters: n (int): Number of elements in the set. arr (list of int): List of non-negative integers. Returns: int: The smallest non-negative integer not present in the set. present = [False] * (n + 1) for num in arr: if num <= n: present[num] = True for i in range(n + 1): if not present[i]: return i return n + 1"},{"question":"Given an array of integers, write a function that finds the smallest positive integer that cannot be represented as the sum of any subset of elements of the array. Input The function should take the following input: - arr: List[int] (An array of integers where 1 ≤ len(arr) ≤ 10^5 and 1 ≤ arr[i] ≤ 10^9) Output The function should return an integer representing the smallest positive integer that cannot be represented as the sum of any subset of elements of the array. Example Input [1, 2, 3] Output 7 (Note: All the possible sums of subsets will cover integers 1, 2, 3, 4, 5, and 6. The smallest integer that we cannot get from any subsets is 7.) Input [1, 10, 3, 11, 6, 15] Output 2 (Note: The smallest integer that we cannot get from any subsets is 2.)","solution":"def smallest_non_representable_sum(arr): Finds the smallest positive integer that cannot be represented as the sum of any subset of elements of the array. Parameters: arr (List[int]): The input array of integers. Returns: int: The smallest positive integer that cannot be represented as the sum of any subset of elements of the array. arr.sort() smallest_sum = 1 for num in arr: if num > smallest_sum: break smallest_sum += num return smallest_sum"},{"question":"```markdown Create My Library! Your task is to design a minimalistic library management system to keep track of the books and their availability status. Write a Python class `Library` with the following functionalities: 1. Add a book to the library: - Method: `add_book(title: str, author: str) -> None` - Adds a book with the given title and author to the library. 2. Remove a book from the library: - Method: `remove_book(title: str) -> bool` - Removes the book with the given title from the library. - Returns `True` if the book was successfully removed, and `False` if the book was not found. 3. Lend a book to a member: - Method: `lend_book(title: str, member_name: str) -> bool` - Marks the book with the given title as lent to the member with the given name. - Returns `True` if the book was successfully lent out, and `False` if the book is not available. 4. Return a book to the library: - Method: `return_book(title: str) -> bool` - Marks the book with the given title as returned. - Returns `True` if the book was successfully returned, and `False` if the book was not found or was not lent out. 5. Check book availability: - Method: `is_book_available(title: str) -> bool` - Returns `True` if the book with the given title is available in the library, and `False` if it is not available. 6. Search books by author: - Method: `search_by_author(author: str) -> List[str]` - Returns a list of book titles by the given author available in the library. **Implementation Details:** - Assume book titles are unique in the library. - Use appropriate data structures to manage the library\'s inventory and lending records. - Consider edge cases such as lending or returning a non-existent book. Example usage: ```python lib = Library() lib.add_book(\'1984\', \'George Orwell\') lib.add_book(\'To Kill a Mockingbird\', \'Harper Lee\') print(lib.is_book_available(\'1984\')) # Output: True print(lib.lend_book(\'1984\', \'Alice\')) # Output: True print(lib.is_book_available(\'1984\')) # Output: False print(lib.return_book(\'1984\')) # Output: True print(lib.search_by_author(\'George Orwell\')) # Output: [\'1984\'] print(lib.remove_book(\'1984\')) # Output: True print(lib.is_book_available(\'1984\')) # Output: False ``` ```","solution":"class Library: def __init__(self): self.books = {} self.lent_out_books = {} def add_book(self, title: str, author: str) -> None: self.books[title] = author def remove_book(self, title: str) -> bool: if title in self.books: if title in self.lent_out_books: del self.lent_out_books[title] del self.books[title] return True return False def lend_book(self, title: str, member_name: str) -> bool: if title in self.books and title not in self.lent_out_books: self.lent_out_books[title] = member_name return True return False def return_book(self, title: str) -> bool: if title in self.lent_out_books: del self.lent_out_books[title] return True return False def is_book_available(self, title: str) -> bool: return title in self.books and title not in self.lent_out_books def search_by_author(self, author: str) -> list: return [title for title, book_author in self.books.items() if book_author == author]"},{"question":"Marco enjoys playing games that involve arrangements and sequences. Recently, he came across an interesting game involving an M times N grid. Each cell in the grid contains a non-negative integer value, representing the energy level at that cell. The goal of the game is to start from the top-left cell (1,1) and move to the bottom-right cell (M,N), collecting as much energy as possible. The player can only move either one cell to the right or one cell down at each step. Write a program to help Marco determine the maximum energy he can collect on his way from the top-left cell to the bottom-right cell. ------ Input ------ The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers M and N, denoting the dimensions of the grid. Each of the next M lines contains N space-separated integers, representing the energy levels in the grid cells. ------ Output ------ For each test case, print a single line containing one integer - the maximum energy that can be collected while moving from the top-left cell to the bottom-right cell. ------ Constraints ------ 1 le T le 50 1 le M, N le 1000 0 le Grid cells values le 10^{5} ------ Sample Input ------ 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 3 ------ Sample Output ------ 12 6 ------ Explanation ------ For the first test case: - The path that collects the maximum energy is 1 -> 3 -> 5 -> 2 -> 1. - The total energy collected is 1 + 3 + 5 + 2 + 1 = 12. For the second test case: - The path that collects the maximum energy is 1 -> 2 -> 3. - The total energy collected is 1 + 2 + 3 = 6.","solution":"def max_energy_collected(T, test_cases): result = [] for i in range(T): M, N = test_cases[i][0] grid = test_cases[i][1] dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] # Initialize first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize first column for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] result.append(dp[-1][-1]) return result # To parse the provided input format and use the solution above: def parse_input_and_get_results(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): M, N = map(int, input_lines[index].strip().split()) grid = [list(map(int, input_lines[index + j + 1].strip().split())) for j in range(M)] test_cases.append(((M, N), grid)) index += M + 1 return max_energy_collected(T, test_cases)"},{"question":"A software company is developing a system to manage the distribution of candies among its employees. Each employee should receive a total of exactly `k` candies, and the candies are of different types. However, the distribution must be unique and fair in a specific manner: no two employees should receive the exact same combination of candy types. You are tasked with writing a function that calculates the number of distinct ways to distribute the candies. The company has an unlimited supply of each candy type. # Input The input consists of two integers `n` and `k` where `n` (1 ≤ n ≤ 10) denotes the number of different candy types and `k` (1 ≤ k ≤ 100) denotes the total number of candies each employee should receive. # Output Output a single integer — the number of unique ways to distribute exactly `k` candies among the `n` types. # Example Example 1: **Input:** ``` 2 3 ``` **Output:** ``` 4 ``` **Explanation:** There are four ways to distribute 3 candies among 2 types: - 3 of type 1 and 0 of type 2 - 0 of type 1 and 3 of type 2 - 1 of type 1 and 2 of type 2 - 2 of type 1 and 1 of type 2 Example 2: **Input:** ``` 3 2 ``` **Output:** ``` 6 ``` **Explanation:** There are six ways to distribute 2 candies among 3 types: - 2 of type 1 and 0 of type 2 and 0 of type 3 - 0 of type 1 and 2 of type 2 and 0 of type 3 - 0 of type 1 and 0 of type 2 and 2 of type 3 - 1 of type 1 and 1 of type 2 and 0 of type 3 - 1 of type 1 and 0 of type 2 and 1 of type 3 - 0 of type 1 and 1 of type 2 and 1 of type 3 # Note The problem is a typical example of the \\"stars and bars\\" combinatorial method which is used to find the number of ways to put `k` indistinguishable items into `n` distinct bins (including the possibility of some bins being empty).","solution":"def distribute_candies(n, k): Returns the number of unique ways to distribute k candies among n types. from math import comb # Using the stars and bars method to find the number of ways # The formula is comb(k + n - 1, n - 1) return comb(k + n - 1, n - 1)"},{"question":"Write a function named calculateBonus which takes two parameters: salary (a positive integer) and performanceRating (a string). The function should calculate the annual bonus as follows: - If performanceRating is \\"excellent\\" return 20% of the salary. - If performanceRating is \\"good\\" return 10% of the salary. - If performanceRating is \\"average\\" return 5% of the salary. - For any other performanceRating, return 0. Examples: ```if-not:julia,racket calculateBonus(50000, \\"excellent\\") -> 10000 calculateBonus(45000, \\"good\\") -> 4500 calculateBonus(60000, \\"average\\") -> 3000 calculateBonus(70000, \\"poor\\") -> 0 ```","solution":"def calculateBonus(salary, performanceRating): Calculates the annual bonus based on the performance rating. Parameters: salary (int): The annual salary of the employee, must be positive. performanceRating (str): The performance rating of the employee. Returns: int: The calculated annual bonus. if performanceRating == \\"excellent\\": return int(salary * 0.20) elif performanceRating == \\"good\\": return int(salary * 0.10) elif performanceRating == \\"average\\": return int(salary * 0.05) else: return 0"},{"question":"In a distant galaxy, there exists a unique planet with an array of magical trees. Each tree is characterized by its size and magical energy. The inhabitants of the planet are tasked with harvesting the trees to extract their magical energy. However, there\'s a catch – they can only harvest trees that have a size greater than all previously harvested trees, ensuring a continually increasing sequence of sizes. You are to help the inhabitants determine the maximum amount of magical energy they can collect by following this rule. Given the sizes and corresponding energies of the trees, calculate the maximum magical energy that can be harvested by selecting an increasing sequence of tree sizes. Input The input consists of multiple datasets. Each dataset has the following format: n s1 e1 s2 e2 . . . sn en n is the number of trees (1 ≤ n ≤ 1000). si (for 1 ≤ i ≤ n) is a positive integer denoting the size of the i-th tree. ei (for 1 ≤ i ≤ n) is a positive integer denoting the magical energy of the i-th tree. The last dataset is followed by a single line containing a zero. This line is not a part of any dataset and should not be processed. Output For each dataset, print the maximum magical energy that can be harvested. Example Input 5 3 10 1 5 4 15 2 7 5 20 0 Output 45 Note In the first dataset: - One of the optimal sequences of tree sizes can be 1 → 2 → 3 → 4 → 5 with corresponding energies 5 + 7 + 10 + 15 + 20 = 57. - The output should be 57.","solution":"def max_magical_energy(trees): n = len(trees) if n == 0: return 0 # Sort trees primarily by size trees.sort() # Dynamic Programming approach to find the maximum magical energy dp = [0] * n # Initialize dp with each tree\'s energy as a standalone selection for i in range(n): dp[i] = trees[i][1] for i in range(1, n): for j in range(i): if trees[i][0] > trees[j][0]: dp[i] = max(dp[i], dp[j] + trees[i][1]) return max(dp) def process_input(input_data): i = 0 results = [] while i < len(input_data): n = int(input_data[i]) if n == 0: break i += 1 trees = [] for _ in range(n): size, energy = map(int, input_data[i].split()) trees.append((size, energy)) i += 1 results.append(max_magical_energy(trees)) return results"},{"question":"A company organizes a hackathon in which teams of programmers compete to solve coding problems. Each team can consist of 1 to 5 members. Given the number of programmers P participating in the hackathon, calculate the number of distinct ways to form teams such that each team has at least one member and no programmer is left out. Example 1: Input: P = 4 Output: 15 Explanation: The distinct ways to form the teams are: 1. (1, 1, 1, 1) 2. (2, 1, 1) 3. (1, 2, 1) 4. (1, 1, 2) 5. (3, 1) 6. (1, 3) 7. (2, 2) 8. (4) 9. (2, 1, 1) 10. (1, 2, 1) 11. (1, 1, 2) 12. (3, 1) 13. (1, 3) 14. (2, 2) 15. (4) Example 2: Input: P = 5 Output: 52 Explanation: There are 52 distinct ways to form the teams where each team has at least one member and no programmer is left out. Your Task: Complete the function countTeamFormations() which takes the number of programmers P as an input parameter and returns the total number of distinct ways to form the teams. Expected Time Complexity: O(P) Expected Auxiliary Space: O(P) Constraints: 1 ≤ P ≤ 10^4","solution":"def countTeamFormations(P): Returns the number of distinct ways to form teams such that each team has at least one member and no programmer is left out. if P == 0: return 0 # dp[i] will store number of ways to partition i programmers. dp = [0] * (P + 1) dp[0] = 1 # One way to partition 0 programmers (empty set) # Calculate number of partitions for each number of programmers for i in range(1, P + 1): for j in range(1, 6): # Teams can have from 1 to 5 members. if i - j >= 0: dp[i] += dp[i - j] return dp[P]"},{"question":"A sequence of numbers is called \\"beautiful\\" if every number in the sequence is divisible by the number that directly precedes it. For example, the sequence [6, 2, 1] is beautiful because 2 divides 6 and 1 divides 2. However, the sequence [3, 7, 1] is not beautiful because 7 does not divide 3. You are given a sequence of integers and your task is to determine if it is beautiful. Input: The first line contains a single integer T, the number of test cases. Each of the next T lines contains a sequence of integers. Each sequence begins with an integer N, the length of the sequence, followed by N integers. Output: For each test case, output \\"Yes\\" if the sequence is beautiful, otherwise output \\"No\\". SAMPLE INPUT 3 3 6 2 1 4 3 9 27 1 3 3 7 1 SAMPLE OUTPUT Yes No No","solution":"def is_beautiful_sequence(sequence): Determines if the given sequence is beautiful. A sequence is beautiful if every number in the sequence is divisible by the number that directly precedes it. Parameters: sequence (list): A list of integers. Returns: str: \\"Yes\\" if the sequence is beautiful, otherwise \\"No\\". for i in range(1, len(sequence)): if sequence[i-1] % sequence[i] != 0: return \\"No\\" return \\"Yes\\" def check_beautiful_sequences(test_cases): Determines if the given sequences from multiple test cases are beautiful. Parameters: test_cases (list): A list of sequences where each sequence is a list of integers. Returns: list: A list of strings \\"Yes\\" or \\"No\\" for each test case. results = [] for case in test_cases: N, *sequence = case result = is_beautiful_sequence(sequence) results.append(result) return results"},{"question":"Task Given an array of integers, **return the count of unique pairs** that sum up to a given target sum. # Notes * Array/list size is at least 2. * Array/list numbers could be a mixture of positives, negatives also zeroes. * Each pair should be counted only once, and the order of pairs does not matter. # Input >> Output Examples ``` countPairs([1, 2, 3, 4, 3], 6) => return 2 ``` # Explanation: * There are two pairs (2, 4) and (3, 3) that sum up to the target 6. ___ ``` countPairs([1, 5, -1, -5], 0) => return 2 ``` # Explanation: * There are two pairs (1, -1) and (5, -5) that sum up to the target 0. ___ ``` countPairs([2, 3, 4, 1, 2], 5) => return 2 ``` # Explanation: * There are two pairs (2, 3) and (1, 4) that sum up to the target 5. ___ Enjoy solving the problem!","solution":"def countPairs(nums, target): Returns the count of unique pairs that sum up to the given target. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return len(pairs)"},{"question":"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order. Example: Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Explanation: Elements 1 and 2 are the most frequent with frequencies 3 and 2 respectively. Input: nums = [1], k = 1 Output: [1] Explanation: Element 1 is the only element and it is the most frequent.","solution":"from collections import Counter from heapq import nlargest def topKFrequent(nums, k): Returns the k most frequent elements in the given list nums. count = Counter(nums) return nlargest(k, count.keys(), key=count.get)"},{"question":"You are given a list of integers and a target integer. Create a function that finds all unique combinations of integers from the list that sum up to the target. Each number in the list can only be used once in each combination. The function should return a list of all unique combinations. The order of numbers within each combination and the order of combinations in the result list do not matter. **Example Input and Output:** ``` find_combinations([2, 3, 6, 7], 7) Output: [[7]] find_combinations([2, 3, 5], 8) Output: [[3, 5]] ``` If there are no combinations that sum up to the target, the function should return an empty list. **Example Input and Output:** ``` find_combinations([2, 4, 6, 8], 3) Output: [] ``` **Guidelines:** 1. The input list and target will always be non-negative integers. 2. The same number in the list should not be used more than once for a single combination. 3. The function should be efficient and avoid generating duplicate combinations. Here\'s a hint: You can use a combination of recursion and backtracking to explore possible combinations and store the valid ones.","solution":"def find_combinations(nums, target): Finds all unique combinations of integers from the list \'nums\' that sum up to the \'target\'. Each number in the list can only be used once in each combination. def backtrack(start, path, remaining): if remaining == 0: result.append(path[:]) return elif remaining < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: continue path.append(nums[i]) backtrack(i + 1, path, remaining - nums[i]) path.pop() nums.sort() # To help skip duplicates result = [] backtrack(0, [], target) return result"},{"question":"You are given an array of integers. For each element in the array, you need to find the next greater element that appears to its right in the array. If there is no such element, return -1 for that element. Input The first line contains an integer n (1 ≤ n ≤ 105). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109). Output For each element in the array, print the next greater element in separate lines. If there is no next greater element, print -1. Examples Input 4 4 3 2 7 Output 7 7 7 -1 Input 5 5 1 6 2 3 Output 6 6 -1 3 -1 Note In the first example, for 4, the next greater element to its right is 7. For 3, it is again 7. For 2, it is again 7. For 7, there is no greater element to its right, so we return -1. In the second example, for 5, the next greater element to its right is 6. For 1, it is again 6. For 6, there is no greater element to its right, so we return -1. For 2, the next greater element to its right is 3. For 3, there is no greater element to its right, so we return -1.","solution":"def next_greater_elements(n, arr): This function finds the next greater element for each element in the array. If there is no greater element, it returns -1 for that element. result = [-1] * n stack = [] for i in range(n): while stack and arr[stack[-1]] < arr[i]: index = stack.pop() result[index] = arr[i] stack.append(i) return result"},{"question":"In a game, a character can move on a grid. The grid is an `m x n` matrix and the character is initially positioned at the top-left corner (0,0). The character can only move either down or right at any point in time. Write a function to find the number of unique paths that the character can take to reach the bottom-right corner (m-1, n-1). Example 1: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Example 2: Input: m = 7, n = 3 Output: 28 Explanation: From the top-left corner, there are a total of 28 ways to reach the bottom-right corner. Note: 1. The value of m and n will be at most 100. 2. The input values are positive integers.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Create a 2D array to store the number of unique paths to each cell dp = [[1] * n for _ in range(m)] # Iterate through the array starting from (1, 1) because the first row and column can only be reached by one path for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"A JSON document is said to be \\"uniform\\" if it is an object (a series of key-value pairs) where all the values are either of the same type (e.g., all strings, all numbers) or are themselves uniform JSON objects of the same structure. For example: ``` { \\"a\\": \\"hello\\", \\"b\\": \\"world\\" } ``` is uniform because all values are strings, and ``` { \\"a\\": {\\"x\\": 1, \\"y\\": 2}, \\"b\\": {\\"x\\": 3, \\"y\\": 4} } ``` is uniform because all values are JSON objects with the same structure (\\"x\\" and \\"y\\" both have numeric values in every nested object). However, ``` { \\"a\\": \\"hello\\", \\"b\\": 42 } ``` is not uniform because the values are of different types (string and number), and ``` { \\"a\\": {\\"x\\": 1, \\"y\\": 2}, \\"b\\": {\\"x\\": 3, \\"z\\": 4} } ``` is not uniform because the nested objects don\'t have the same structure. Write a function that checks whether a given JSON document is uniform. The function should consider nested objects to verify uniformity. Input The input consists of a single string that represents a JSON document. The document\'s length is between 2 and 10,000 characters, inclusive. Output Print YES if the JSON document is uniform, otherwise print NO. Examples Input ```json { \\"a\\": {\\"x\\": 1, \\"y\\": 2}, \\"b\\": {\\"x\\": 3, \\"y\\": 4} } ``` Output YES Input ```json { \\"a\\": \\"hello\\", \\"b\\": 42 } ``` Output NO","solution":"import json def is_uniform(json_str): def check_uniform(value): if isinstance(value, list): return all(isinstance(item, type(value[0])) for item in value) if isinstance(value, dict): if len(value) == 0: return True first_key = next(iter(value)) first_type = type(value[first_key]) if any(not isinstance(value[k], first_type) for k in value): return False if first_type == dict: first_structure = set(value[first_key].keys()) return all(set(value[k].keys()) == first_structure and check_uniform(value[k]) for k in value) return True return True data = json.loads(json_str) if not isinstance(data, dict): return \\"NO\\" return \\"YES\\" if check_uniform(data) else \\"NO\\""},{"question":"Write a function named countOccurrences which accepts two parameters: a string and a character. The function should return the number of times the character appears in the given string. Ensure that the function is case-sensitive, meaning \'A\' and \'a\' are considered different characters. Examples: ```if-not:julia,racket countOccurrences(\\"hello\\", \\"l\\") -> 2 countOccurrences(\\"world\\", \\"o\\") -> 1 countOccurrences(\\"TestCoMMunity\\", \\"M\\") -> 2 countOccurrences(\\"sample\\", \\"z\\") -> 0 ```","solution":"def countOccurrences(s, ch): Returns the number of times the character `ch` appears in the string `s`. return s.count(ch)"},{"question":"Alice has recently discovered a new type of sequence known as the \\"Flipping Sequence\\". A sequence of integers is given as input and Alice wants to perform a series of operations to make the entire sequence consist of zeros. The operation follows a simple rule: In one operation: - Alice can select any integer from the sequence. - Flip all the bits of the selected integer (convert 1 to 0 and 0 to 1). Your task is to find the minimum number of operations required to make the entire sequence of integers equal to 0. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains a single integer N, the number of integers in the sequence. - Next line contains N space-separated integers A_{1}, A_{2}, dots A_{N}, the integers in the sequence initially. ------ Output Format ------ For each test case, output a single integer, the minimum number of operations required to make the entire sequence equal to 0. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ A_{i} ≤ 10^{9} ------ Sample Input 1 ------ 2 5 1 0 3 0 7 4 0 0 0 0 ------ Sample Output 1 ------ 3 0 ------ Explanation 1 ------ Test case 1: We can perform the following operations: - Select integer 1 and flip its bits to get 0 (sequence becomes [0, 0, 3, 0, 7]) - Select integer 3 (binary 11) and flip its bits to get 0 (sequence becomes [0, 0, 0, 0, 7]) - Select integer 7 (binary 111) and flip its bits to get 0 (sequence becomes [0, 0, 0, 0, 0]) Thus, 3 operations are needed. Test case 2: The sequence is already all zeros, so no operations are needed.","solution":"def min_operations_to_zero(T, test_cases): Given multiple test cases with sequences of integers, determines the minimum number of operations required to make every integer in the sequence equal to zero by flipping all the bits of a selected integer in each operation. Args: T: A single integer, the number of test cases. test_cases: A list of test case data. Each element is a tuple where the first element is the number of integers in the sequence, and the second element is the sequence of integers. Returns: A list of integers, each representing the minimum number of operations required for the corresponding test case. results = [] for n, seq in test_cases: operations = sum(1 for num in seq if num != 0) results.append(operations) return results"},{"question":"Task A common task in decoding messages is reversing the order of elements to discover the original sequence. Given a string `s` consisting of alphanumeric characters and spaces, reverse the order of characters in each word while keeping the order of the words unchanged. Words are defined as sequences of non-space characters. The input string may contain multiple spaces between words. Input - A single string `s` containing alphanumeric characters and spaces. - 1 <= len(s) <= 1000 Output - A single string with each word\'s characters reversed but the order of words preserved. Example **Input** ``` \\"This is an example\\" ``` **Output** ``` \\"sihT si na elpmaxe\\" ```","solution":"def reverse_words(s): Reverses the characters of each word in the string s while keeping the order of the words unchanged. Parameters: s (str): The input string containing alphanumeric characters and spaces Returns: str: The transformed string with each word\'s characters reversed # Split the input string by spaces words = s.split(\' \') # Reverse each word and join them back with a space reversed_words = [\'\'.join(reversed(word)) for word in words] return \' \'.join(reversed_words)"},{"question":"A group of knights in a kingdom are preparing for a grand tournament. They have n knights, each with a certain strength value. The knights are arranged in a line, and they will duel in pairs. Each duel results in the weaker knight being eliminated from the tournament. If two knights have the same strength, the knight that comes earlier in the line eliminates the one that comes right after. The tournament continues until there is only one knight standing, the winner, who will be crowned as the champion of the kingdom. You are tasked with determining the strength of the winning knight. Input The first line of input contains a single integer n (1 ≤ n ≤ 105) — the number of knights. The second line contains n positive integers si (1 ≤ si ≤ 109), where si represents the strength of the i-th knight in line. Output Output a single integer, the strength of the winning knight. Examples Input 6 5 3 9 2 2 8 Output 9 Input 4 1 2 3 4 Output 4 Note In the first example, the duels might proceed as follows: - The 1st knight (strength 5) defeats the 2nd knight (strength 3). - The 3rd knight (strength 9) defeats the 4th knight (strength 2). - The 5th knight (strength 2) defeats the 6th knight (strength 8). - The 1st knight (strength 5) defeats the 5th knight (strength 2). - Finally, the 3rd knight (strength 9) defeats the 1st knight (strength 5). Hence, the winning knight\'s strength is 9. In the second example, the duels proceed as follows: - The 4th knight (strength 4) defeats the 3rd knight (strength 3). - The 4th knight (strength 4) defeats the 2nd knight (strength 2). - The 4th knight (strength 4) defeats the 1st knight (strength 1). Thus, the winning knight\'s strength is 4.","solution":"def find_winning_knight_strength(n, strengths): Determines the strength of the winning knight, given the number of knights and their strengths. :param n: int - The number of knights :param strengths: List[int] - The strengths of the knights :return: int - The strength of the winning knight # The knight with the maximum strength will be the winner return max(strengths)"},{"question":"You are given a string S containing only the characters \'a\' and \'b\'. Your task is to check if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case consists of a single string S. -----Output----- For each test case, print \\"Yes\\" if it is possible to rearrange the string S such that no two adjacent characters are the same. Otherwise, print \\"No\\". -----Constraints----- - 1 le T le 1,000 - 1 le |S| le 100 -----Example Input----- 2 aabb aaab -----Example Output----- Yes No","solution":"def can_rearrange(s): Determines if the string s can be rearranged such that no two adjacent characters are the same. # Count the frequency of each character a_count = s.count(\'a\') b_count = s.count(\'b\') # If the difference in count between \'a\' and \'b\' is more than 1, it\'s not possible if abs(a_count - b_count) > 1: return \\"No\\" else: return \\"Yes\\" def process_test_cases(test_cases): results = [] for test in test_cases: results.append(can_rearrange(test)) return results"},{"question":"You are given a string consisting of lowercase and uppercase alphabets along with digits from 0 to 9. You need to find the longest substring which contains only unique characters and no digits. If there are multiple substrings of the same length, return the substring which appears first. Implement the function `longest_unique_substring(s: str) -> str`: # Input - A single line containing the input string `s`. # Output - A single line containing the longest substring with unique characters that does not include any digit. # Constraints 1 ≤ |s| ≤ 10^5 # Example Input: ``` abc123abc ``` Output: ``` abc ``` Input: ``` a1b2c3defghIJKL34567mnop ``` Output: ``` defghIJKL ``` # Explanation of Examples In the first example, the substring `abc` is the longest substring without any digits and with unique characters. It appears twice but the first appearance is returned. In the second example, `defghIJKL` is the longest substring without any digits and with unique characters.","solution":"def longest_unique_substring(s: str) -> str: Returns the longest substring without digits and with unique characters. max_len = 0 max_substr = \\"\\" current_substr = \\"\\" start = 0 while start < len(s): current_set = set() for i in range(start, len(s)): if s[i].isdigit(): break if s[i] in current_set: break current_set.add(s[i]) current_substr += s[i] if len(current_substr) > max_len: max_len = len(current_substr) max_substr = current_substr current_substr = \\"\\" start += 1 return max_substr"},{"question":"Given a string containing an arithmetic expression with non-negative integers and the operators +, -, *, and /, evaluate the expression according to the operator precedence and return the result as an integer. Note: - The integer division should truncate towards zero. For example: - \'3+5 / 2\' should return 5 - \'10 - 4 * 2 + 1\' should return 3 Function Description Complete the evaluateExpression function in the editor below. It should return an integer result based on the evaluation of the input expression. evaluateExpression has the following parameter(s): - string s: a string representing the arithmetic expression to be evaluated Returns: - int: the result of the arithmetic expression Input Format: - A single string mathbf{s} that represents an arithmetic expression containing non-negative integers and the operators +, -, *, and /. Constraints: - 1 leq text{len}(s) leq 10^4 - The input expression is guaranteed to be valid (i.e., it will not contain multiple consecutive operators and will not start or end with an operator). Sample Input 0: \\"3+5 / 2\\" Sample Output 0: 5 Sample Input 1: \\"10 - 4 * 2 + 1\\" Sample Output 1: 3","solution":"def evaluateExpression(s): Evaluate the arithmetic expression in the string according to the operator precedence. Args: s (str): an arithmetic expression containing non-negative integers and the operators +, -, *, and /. Returns: int: the result of the arithmetic expression. def apply_op(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': # truncating division towards zero values.append(int(left / right)) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 # stack to store integer values values = [] # stack to store operators operators = [] i = 0 while i < len(s): if s[i] == \' \': i += 1 continue if s[i].isdigit(): val = 0 while i < len(s) and s[i].isdigit(): val = (val * 10) + int(s[i]) i += 1 values.append(val) # back up the index since it\'ll be incremented at end of loop i -= 1 elif s[i] in \\"+-*/\\": while (operators and precedence(operators[-1]) >= precedence(s[i])): apply_op(operators, values) operators.append(s[i]) i += 1 while operators: apply_op(operators, values) return values[-1]"},{"question":"In a city, there are m junctions connected by n bidirectional roads. Each junction is labeled from 1 to m. Each road connects two unique junctions i and j, and has a certain cost to travel along it. One day, the city authorities decided to repair some of the roads due to their poor condition. However, due to budget constraints, not all roads can be repaired. Your task is to determine the minimum cost required to ensure that there is a path between every pair of junctions after repairing the roads. A path may use both repaired and unrepaired roads, but the goal is to repair the road network such that all junctions remain connected. If it is not possible to repair roads to keep the junctions connected, return -1. Input * The first line contains two integers m and n (1 ≤ m ≤ 10^5, 0 ≤ n ≤ 200,000) representing the number of junctions and the number of roads, respectively. * The next n lines each contain three integers u, v, and w (1 ≤ u, v ≤ m, 1 ≤ w ≤ 10^6), representing that there is a road connecting junction u and junction v with a cost w. Output * Print a single integer, the minimum cost required to ensure all junctions are connected, or -1 if it\'s not possible. Examples Input: 4 5 1 2 1 2 3 4 3 4 3 4 1 2 1 3 5 Output: 6 Input: 4 3 1 2 1 2 3 4 3 4 3 Output: 8 Input: 4 2 1 2 1 3 4 3 Output: -1","solution":"def min_cost_to_repair_roads(m, n, roads): Determines the minimum cost required to ensure all junctions are connected. :param m: int - number of junctions :param n: int - number of roads :param roads: List[Tuple[int, int, int]] - list of (u, v, w) representing roads and their costs :return: int - minimum cost to repair roads to keep junctions connected or -1 if not possible # Kruskal\'s algorithm to find Minimum Spanning Tree (MST) def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) # Path compression return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Sort edges by weight roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(m): parent.append(node) rank.append(0) result = 0 edges_used = 0 for u, v, w in roads: x = find(parent, u-1) y = find(parent, v-1) if x != y: edges_used += 1 result += w union(parent, rank, x, y) if edges_used == m - 1: break return result if edges_used == m - 1 else -1"},{"question":"You are given an array of integers. Your task is to split the array into two non-empty contiguous subarrays such that the sum of the first subarray is as close as possible to the sum of the second subarray. Return the sums of the two subarrays. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 100) – the number of elements in the array. The second line contains n integers separated by spaces, representing the elements of the array. Each element is within range from -1000 to 1000, inclusive. -----Output----- Print two integers, the sums of the two subarrays. -----Example----- Input 5 1 2 3 4 5 Output 6 9 Input 4 1 -1 2 -2 Output 0 0 -----Note----- In the first sample, splitting the array into [1, 2, 3] and [4, 5] gives sums 6 and 9, which is the best possible close sum partition. In the second sample, splitting the array into [1, -1] and [2, -2] yields the sums 0 and 0, respectively, again providing the closest possible sums.","solution":"def closest_sums(arr): Returns the sums of two non-empty contiguous subarrays such that the sum of the first subarray is as close as possible to the sum of the second subarray. n = len(arr) total_sum = sum(arr) min_diff = float(\'inf\') left_sum = 0 for i in range(n - 1): left_sum += arr[i] right_sum = total_sum - left_sum diff = abs(left_sum - right_sum) if diff < min_diff: min_diff = diff closest_left_sum = left_sum closest_right_sum = right_sum return closest_left_sum, closest_right_sum"},{"question":"You are given M pairs of intervals. Each pair contains two intervals and you need to determine if the two intervals in each pair overlap. Two intervals, [a, b] and [c, d], overlap if there is a point x such that both intervals contain x. In other words, the intervals overlap if there is no gap between them. ------ Input ------ The first line of the input contains a single integer M denoting the number of pairs of intervals. The next M lines describe each pair of intervals. Each of these lines contains four space-separated integers a, b, c, and d, representing the bounds of the two intervals [a, b] and [c, d]. ------ Output ------ For each pair of intervals, print a single line containing the integer 1 if the intervals overlap, or 0 if they do not. ------ Constraints ------ 1 le M le 10^5 -10^9 le a, b, c, d le 10^9 ------ Example ------ ------ Input Format ------ 3 1 5 4 8 2 6 7 10 -3 -1 0 2 ------ Output Format ------ 1 0 0 ------ Explanation ------ Example case 1: The intervals [1, 5] and [4, 8] overlap since they both contain points 4 and 5. Thus, the output is 1. Example case 2: The intervals [2, 6] and [7, 10] do not overlap since there is a gap between 6 and 7. Therefore, the output is 0. Example case 3: The intervals [-3, -1] and [0, 2] do not overlap since there is a gap between -1 and 0. Thus, the output is 0.","solution":"def intervals_overlap(intervals): Determine if two intervals overlap for each pair of intervals. Parameters: intervals (list of tuples): A list of tuples where each tuple contains four integers (a, b, c, d). These represent the bounds of the two intervals [a, b] and [c, d]. Returns: list: A list of integers where each integer is 1 if the intervals overlap, and 0 if they do not. result = [] for a, b, c, d in intervals: if max(a, c) <= min(b, d): result.append(1) else: result.append(0) return result"},{"question":"Implement a function `array_intersection(arr1, arr2)` that takes two arrays of integers and returns a new array containing elements that are present in both input arrays. The elements in the returned array should appear in the same order as they appear in `arr1`. If there are no common elements, return an empty array. Do not use built-in methods like `intersection`.","solution":"def array_intersection(arr1, arr2): Takes two arrays of integers and returns a new array containing elements that are present in both input arrays, maintaining the order of elements as they appear in arr1. set_arr2 = set(arr2) # Convert arr2 to a set for O(1) lookup intersection = [item for item in arr1 if item in set_arr2] return intersection"},{"question":"You are given an array `arr` of N integers representing the preorder traversal of a binary search tree. The task is to construct the BST from the given preorder traversal and then find its postorder traversal. Example 1: Input: N = 5 arr = [4, 2, 1, 3, 6] Output: [1, 3, 2, 6, 4] Explanation: The given preorder traversal: 4 / 2 6 / 1 3 Postorder traversal of the tree: [1, 3, 2, 6, 4] Example 2: Input: N = 3 arr = [8, 5, 7] Output: [7, 5, 8] Explanation: The given preorder traversal: 8 / 5 7 Postorder traversal of the tree: [7, 5, 8] Your Task: Complete the function `vector<int> findPostorderFromPreorder(int N, int arr[])`, which takes integer N and array representing preorder traversal as input and returns a vector of integers representing postorder traversal of the BST. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^{5} 1 <= arr[i] <= 10^{9}","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def construct_bst_from_preorder(preorder): if not preorder: return None root = Node(preorder[0]) stack = [root] for value in preorder[1:]: if value < stack[-1].value: stack[-1].left = Node(value) stack.append(stack[-1].left) else: last = None while stack and value > stack[-1].value: last = stack.pop() last.right = Node(value) stack.append(last.right) return root def postorder_traversal(node, result): if node: postorder_traversal(node.left, result) postorder_traversal(node.right, result) result.append(node.value) return result def findPostorderFromPreorder(N, arr): if N != len(arr): return [] root = construct_bst_from_preorder(arr) return postorder_traversal(root, [])"},{"question":"A university is holding a coding competition, and they need a system to efficiently manage the submission and ranking of solutions. Each submission consists of a participant\'s name and the score they achieved. The system should be able to add new submissions and periodically generate a leaderboard of participants ranked by their highest scores. If multiple participants have the same score, they should be ranked alphabetically by their names. Your task is to implement a function that keeps track of submissions and can generate a ranked leaderboard. # Function Signature ```python def leaderboard(commands: List[Tuple[str, Union[str, int]]]) -> List[str]: ``` # Input - `commands`: A list of tuples. Each tuple represents a command. The first element of the tuple is a string that can be either `\\"SUBMIT\\"` or `\\"LEADERBOARD\\"`. - `\\"SUBMIT\\"`: Followed by two elements, a string `name` and an integer `score`, indicating a new submission by `name` with `score`. - `\\"LEADERBOARD\\"`: No additional elements. # Output - The function should return a list of strings representing the leaderboard each time the `\\"LEADERBOARD\\"` command is called. Each string should be formatted as `\\"name: score\\"`, sorted first by score in descending order and then alphabetically by name. # Example ```python commands = [ (\\"SUBMIT\\", \\"Alice\\", 50), (\\"SUBMIT\\", \\"Bob\\", 40), (\\"SUBMIT\\", \\"Alice\\", 60), (\\"LEADERBOARD\\",), (\\"SUBMIT\\", \\"Charlie\\", 50), (\\"LEADERBOARD\\",) ] print(leaderboard(commands)) ``` The expected output should be: ```python [ \'Alice: 60\', \'Bob: 40\' \'Alice: 60\', \'Charlie: 50\', \'Bob: 40\' ] ``` # Explanation 1. After the first `LEADERBOARD` command, Alice\'s highest score is 60 and Bob\'s score is 40. 2. After submitting Charlie\'s score, the leaderboard includes Alice (60), Charlie (50), and Bob (40) in the specified order.","solution":"from typing import List, Tuple, Union def leaderboard(commands: List[Tuple[str, Union[str, int]]]) -> List[str]: participants_scores = {} results = [] def current_leaderboard(): sorted_leaderboard = sorted( participants_scores.items(), key=lambda x: (-x[1], x[0]) ) return [f\\"{name}: {score}\\" for name, score in sorted_leaderboard] for command in commands: if command[0] == \\"SUBMIT\\": _, name, score = command if name in participants_scores: if score > participants_scores[name]: participants_scores[name] = score else: participants_scores[name] = score elif command[0] == \\"LEADERBOARD\\": results.extend(current_leaderboard()) return results"},{"question":"The term “little-endian” refers to a way of storing binary data where the least significant byte is stored at the lowest address. Conversely, in “big-endian” systems, the most significant byte is stored at the lowest address. For example, consider the hexadecimal number 0x12345678. In a little-endian system, it would be stored as 0x78 0x56 0x34 0x12, while in a big-endian system, it would be stored as 0x12 0x34 0x56 0x78. Given a series of non-negative integers, your task is to convert them from little-endian format to big-endian format and vice versa. The integers will be provided in hexadecimal format and may be of varying byte lengths. To convert a hexadecimal number from little-endian to big-endian: 1. Split the number into pairs of hexadecimal digits. 2. Reverse the order of these pairs. 3. Concatenate them back together. To convert from big-endian to little-endian, follow the same steps in reverse order. For example, given the little-endian hexadecimal number 0x78563412, its equivalent big-endian representation would be 0x12345678. Write a program to convert a sequence of hexadecimal numbers from one endianness to the other based on the specified input format. -----Input----- The input consists of a single test case containing: 1. A string specifying the initial endianness (\\"little\\" or \\"big\\"). 2. A space-separated list of hexadecimal numbers. Each hexadecimal number will be prefixed with \'0x\', and each will be of an even length up to 16 characters (8 bytes). -----Output----- The output should be the space-separated list of converted hexadecimal numbers. -----Example----- Sample Input 1: little 0x78563412 0xaabbccdd Sample Output 1: 0x12345678 0xddccbbaa Sample Input 2: big 0x12345678 0xddccbbaa Sample Output 2: 0x78563412 0xaabbccdd","solution":"def convert_endianness(format, hex_list): Converts a list of hexadecimal numbers from one endianness to another :param format: str, \\"little\\" or \\"big\\" specifying the initial endianness :param hex_list: list of str, hexadecimal numbers :return: list of str, converted hexadecimal numbers converted_list = [] for hex_str in hex_list: # Remove \'0x\' prefix hex_str_trimmed = hex_str[2:] # Split into pairs of hexadecimal digits pairs = [hex_str_trimmed[i:i+2] for i in range(0, len(hex_str_trimmed), 2)] # Reverse the order of pairs pairs.reverse() # Concatenate pairs back together and add \'0x\' prefix converted_hex = \'0x\' + \'\'.join(pairs) converted_list.append(converted_hex) return converted_list # Example usage input_format = \\"little\\" input_hex_list = [\\"0x78563412\\", \\"0xaabbccdd\\"] output = convert_endianness(input_format, input_hex_list) print(output) # Should convert to [\\"0x12345678\\", \\"0xddccbbaa\\"]"},{"question":"You manage a warehouse where there are n storage units arranged in a single row. Each storage unit can hold a certain number of items, and you can issue commands to either add or remove items from these storage units, as well as to query the total number of items in a specific segment of the storage units. You need to process q queries of the following types: 1. `1 x val` - Add `val` items to the storage unit at position `x`. (1 ≤ x ≤ n) 2. `2 x val` - Remove `val` items from the storage unit at position `x`. (1 ≤ x ≤ n) 3. `3 l r` - Find the total number of items in the storage units from position `l` to position `r` inclusive. (1 ≤ l ≤ r ≤ n) The initial state of all storage units is empty (i.e., they contain 0 items). Assume that the removal command will never request to remove more items than are present in the specified storage unit. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100 000) — the number of storage units and the number of queries, respectively. The next q lines contain the queries, each query in the format specified above. Output For each query of type `3 l r`, print a single integer — the total number of items in the specified range. Examples Input 5 6 1 1 10 1 3 20 3 1 5 2 1 5 3 1 3 3 2 5 Output 30 25 20 Explanation: - After the first command, storage unit 1 contains 10 items. - After the second command, storage unit 3 contains 20 items. - The first query sums the range 1 to 5, which is 10 + 0 + 20 + 0 + 0 = 30. - The fourth command removes 5 items from storage unit 1, leaving it with 5 items. - The second query sums the range 1 to 3, which is 5 + 0 + 20 = 25. - The third query sums the range 2 to 5, which is 0 + 20 + 0 + 0 = 20.","solution":"def process_queries(n, q, queries): Processes a list of queries on n storage units. Args: n (int) : Number of storage units. q (int) : Number of queries. queries (list of tuple): A list containing the queries. Returns: list: list of results for type 3 queries. storage = [0] * n results = [] for query in queries: if query[0] == 1: # Add val items to storage unit at position x x, val = query[1], query[2] storage[x - 1] += val elif query[0] == 2: # Remove val items from storage unit at position x x, val = query[1], query[2] storage[x - 1] -= val elif query[0] == 3: # Find the total number of items in the storage units from l to r inclusive l, r = query[1], query[2] results.append(sum(storage[l - 1: r])) return results"},{"question":"A group of adventurers is trapped in an ancient temple that is gradually filling with water. To escape, they need to solve a puzzle involving a magical grid of tiles. Each tile can either be stable or unstable. The adventurers can only step on stable tiles, but they need to make sure that the path from the start tile to the exit tile is safe before they proceed. You are given a grid where each cell is either \'S\' (stable) or \'U\' (unstable). The adventurers can move up, down, left, or right, but they cannot move diagonally. Your task is to determine if there is a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) using only stable tiles. If such a path exists, print \\"Safe\\". Otherwise, print \\"Unsafe\\". -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. The next n lines contain m characters each — the description of the grid. The character in the i-th row and j-th column is either \'S\' or \'U\'. -----Output----- Print \\"Safe\\" if there is a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Otherwise, print \\"Unsafe\\". -----Examples----- Input 3 3 SSS UUS SSS Output Safe Input 3 3 SUU USU USU Output Unsafe Input 1 1 S Output Safe -----Note----- In the first test sample, there is a path from the top-left corner to the bottom-right corner: (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2). All cells in this path are stable. In the second test sample, there is no way to reach the bottom-right corner from the top-left corner using only stable tiles. In the third test sample, the grid is only one cell in size and it is stable, so the path exists trivially.","solution":"def is_safe_path(grid): Determines if there is a path from the top-left corner to the bottom-right corner using only stable tiles (\'S\'). Parameters: grid (list of list of str): The grid representing the temple\'s tiles. Returns: str: \\"Safe\\" if a path exists using only stable tiles, \\"Unsafe\\" otherwise. n = len(grid) m = len(grid[0]) if grid[0][0] == \'U\' or grid[-1][-1] == \'U\': return \\"Unsafe\\" # Initialize a visited matrix visited = [[False for _ in range(m)] for _ in range(n)] visited[0][0] = True # Directions for moving in the grid (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Use BFS to find path from top-left to bottom-right from collections import deque queue = deque([(0, 0)]) while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"Safe\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'S\': visited[nx][ny] = True queue.append((nx, ny)) return \\"Unsafe\\""},{"question":"A company plans to organize its annual team-building event. To balance the number of participants across different activities, each activity should have roughly the same number of participants. There are m different activities available and n employees who have registered for the event. Each employee can participate in any one of the m activities. The objective is to allocate the employees to different activities such that the maximum difference in the number of participants among any two activities is minimized. Given the number of employees and activities, determine the minimum possible value of the maximum difference in the number of participants among any two activities after allocation. Input The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of employees and the number of activities, respectively. Output Print the minimum possible value of the maximum difference in the number of participants among any two activities after allocation. Examples Input 10 3 Output 1 Input 8 5 Output 0 Note In the first example, we can allocate the employees to the activities as follows: - Activity 1: 4 employees - Activity 2: 3 employees - Activity 3: 3 employees The maximum difference in the number of participants between any two activities is 1. In the second example, we can allocate the employees to the activities as follows: - Activity 1: 2 employees - Activity 2: 2 employees - Activity 3: 2 employees - Activity 4: 1 employee - Activity 5: 1 employee The maximum difference in the number of participants between any two activities is 0.","solution":"def min_max_difference(n, m): Determines the minimum possible value of the maximum difference in the number of participants among any two activities. Parameters: n (int): Number of employees. m (int): Number of activities. Returns: int: The minimum possible value of the maximum difference. # The average (floor) number of participants per activity avg = n // m # The remainder when n is divided by m (this represents the extra participants) remainder = n % m # If there are remainders, then we will have max difference of 1 # otherwise difference will be 0 if remainder == 0: return 0 else: return 1"},{"question":"**Problem Statement** You are given an initial array of integers of size N . You will be asked to perform Q operations on the array. There are two types of operations: 1. **Update Operation**: Update the value at a given index. 2. **Query Operation**: Return the sum of elements between two given indices. You should process the operations in the given order and output the results of the query operations. **Constraints** * 1 leq N, Q leq 10^5 * 1 leq A[i] leq 10^9 (Initial values in the array) * 1 leq t_i leq 2 * 1 leq a_i, b_i leq N * 1 leq x_i leq 10^9 **Input** The first line contains the integer N (the size of the array) and Q (the number of operations). The second line contains N integers representing the initial values in the array. The next Q lines contain the operations in the following format: * If the operation is an update: 1 a_i x_i , where a_i is the index to be updated and x_i is the new value. * If the operation is a query: 2 a_i b_i , where a_i and b_i are the range for which the sum is to be calculated. **Output** For each query operation, output the sum of elements in the given range on a new line. **Example** Input ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` Output ``` 6 14 ``` **Explanation** 1. The first query operation sums the elements from index 1 to 3 (1 + 2 + 3 = 6). 2. The update operation changes the value at index 2 to 10. 3. The second query operation sums the elements from index 1 to 3 (1 + 10 + 3 = 14).","solution":"class RangeQueryArray: def __init__(self, array): self.array = array def update(self, index, value): self.array[index - 1] = value def query(self, left, right): return sum(self.array[left - 1:right]) def process_operations(n, q, arr, operations): rqa = RangeQueryArray(arr) results = [] for operation in operations: if operation[0] == 1: # Update operation _, index, value = operation rqa.update(index, value) elif operation[0] == 2: # Query operation _, left, right = operation results.append(rqa.query(left, right)) return results"},{"question":"Given an integer array nums of size n, write a function to search for a target integer x in the array. If the target is found, return the index of its first occurrence. Otherwise, return -1. The array may contain both positive and negative numbers, and it is not sorted. Example 1: Input: nums = [4, -1, 2, 7, 3], x = 2 Output: 2 Explanation: The number 2 is found at index 2 in the array. Example 2: Input: nums = [10, 4, -5, 0, 6], x = 5 Output: -1 Explanation: The number 5 is not found in the array, so the function returns -1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function searchTarget() which takes the integer array nums and integer x as parameters and returns the first occurrence index of x in nums or -1 if x is not found. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 1000 -10^6 ≤ nums[i] ≤ 10^6 -10^6 ≤ x ≤ 10^6","solution":"def searchTarget(nums, x): Searches for the target integer x in the array nums. Returns the index of first occurrence or -1 if x is not found. for idx, num in enumerate(nums): if num == x: return idx return -1"},{"question":"Maria is a competitive programmer, and she loves solving mathematical problems. One day, she encounters an intriguing problem related to the divisors of numbers. She wants you to help her write a program that solves the following challenge: For a given integer `n`, find the maximum number of unique primes that can be the divisors of any number `x` such that `1 <= x <= n`. Input: The first line contains an integer `n` (1 ≤ n ≤ 10^6), which represents the upper limit of the number range. Output: Print a single integer which is the maximum number of unique prime divisors within the range from 1 to `n`. Example: Input: 30 Output: 3 Explanation: The number 30 itself has the prime divisors 2, 3, and 5, and no number within the range from 1 to 30 has more than 3 unique prime divisors.","solution":"def max_unique_prime_divisors(n): Returns the maximum number of unique primes that can be the divisors of any number x such that 1 <= x <= n. import sympy primes = list(sympy.primerange(2, n+1)) prod = 1 count = 0 for prime in primes: prod *= prime if prod > n: break count += 1 return count"},{"question":"In a certain game, players take turns writing numbers on a whiteboard. The game starts with a number `n` on the board, and a player can replace `n` with any number from `1` to `n - 1`, such that the new number divides `n` completely. The player who cannot make a move loses the game. Define a function `findWinner(n)` to determine the winner if both players play optimally. The function should return \\"Player 1\\" if the first player to move can guarantee a win, otherwise return \\"Player 2\\". **Example:** - `findWinner(2)` should return `\\"Player 1\\"` because Player 1 can replace `2` with `1`, leaving no move for Player 2. - `findWinner(5)` should return `\\"Player 1\\"` because Player 1 can always force a win by optimal play. **Function Signature:** ```python def findWinner(n: int) -> str: pass ``` **Constraints:** - `1 ≤ n ≤ 1000`","solution":"def findWinner(n: int) -> str: Returns the winner of the game if both players play optimally. if n % 2 == 0: return \\"Player 1\\" else: return \\"Player 2\\""},{"question":"A group of friends decide to start a new tradition of sharing a special type of gift exchange. Each participant is represented by a unique number from 1 to N. The gift exchange has certain rules: 1. Each friend can give and receive gifts one time per exchange round. 2. The gift exchange should form a cycle meaning friend A can give a gift to friend B, friend B to friend C, and then ultimately a friend back to friend A closing the cycle. Given the number of friends and a list of allowed gift exchanges between pairs, determine if it is possible to organize the exchange so that it meets the requirement of forming one or more independent cycles covering all participants. Input: The first line contains an integer T, representing the number of test cases. For each test case: - The first line contains a single integer N representing the number of friends. - The second line contains an integer M representing the number of allowed gift exchanges. - The next M lines each contain two integers u and v indicating a possible gift exchange from friend u to friend v. Output: For each test case, print \\"Possible\\" (without the quotes) if it\'s possible to organize the exchange such that all friends can participate in one or more cycles as described. Print \\"Impossible\\" (without the quotes) otherwise. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ M ≤ 10000 1 ≤ u, v ≤ N and u ≠ v SAMPLE INPUT 2 5 6 1 2 2 3 3 4 4 5 5 1 2 4 4 4 1 2 2 3 3 4 4 1 SAMPLE OUTPUT Impossible Possible Explanation: For the first test case, it\'s not possible to form a single complete cycle covering all friends. The second test case forms a complete cycle with the exchanges done in an order (1->2, 2->3, 3->4, 4->1).","solution":"def can_form_cycles(N, exchanges): # Create a dictionary to track the in-degree and out-degree of each node in_degrees = {i: 0 for i in range(1, N+1)} out_degrees = {i: 0 for i in range(1, N+1)} # Populate the in-degrees and out-degrees for u, v in exchanges: out_degrees[u] += 1 in_degrees[v] += 1 # Check if each node has exactly one in-degree and one out-degree for i in range(1, N+1): if in_degrees[i] != 1 or out_degrees[i] != 1: return \\"Impossible\\" return \\"Possible\\" def check_gift_exchange(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] M = test_cases[i][1] exchanges = test_cases[i][2] result = can_form_cycles(N, exchanges) results.append(result) return results"},{"question":"Imagine you are responsible for managing the network bandwidth usage for a series of servers. Each server can operate at a certain bandwidth capacity. You are assigned a specific total value of bandwidth that must be supplied to the servers collectively. Your task is to determine the maximum number of servers that can be fully operated without exceeding the total available bandwidth. Each server can only be operated if its full capacity bandwidth is available. Note: - The total available bandwidth value will not exceed 1000. - The number of servers will not exceed 50. Example 1: Input: Server Capacities = [100, 200, 300, 400], Total Bandwidth = 700 Output: 3 Explanation: You can operate the servers with capacities 100, 200, and 400 which perfectly use up the 700 bandwidth available. Example 2: Input: Server Capacities = [150, 300, 600, 700], Total Bandwidth = 800 Output: 2 Explanation: You can operate the servers with capacities 150 and 300, having a total of 450 bandwidth usage. Operating any other single server or combination would exceed the 800 bandwidth limit.","solution":"def max_servers(server_capacities, total_bandwidth): server_capacities.sort() count = 0 current_bandwidth = 0 for capacity in server_capacities: if current_bandwidth + capacity <= total_bandwidth: current_bandwidth += capacity count += 1 else: break return count"},{"question":"In a certain city, there are \'n\' houses and \'m\' fire hydrants. Each house has a risk value associated with it, representing the potential damage in case of a fire. The fire department wants to install fire hydrants such that every house is protected. A house is considered protected if it is within a certain distance \'d\' from at least one fire hydrant. Your task is to determine the minimum distance \'d\' that ensures all houses are protected by at least one fire hydrant. -----Input----- The first line contains two space-separated integers \'n\' and \'m\' (1 ≤ n, m ≤ 100), representing the number of houses and fire hydrants, respectively. The second line contains \'n\' space-separated integers h1, h2, ..., hn (0 ≤ hi ≤ 1000), representing the positions of the houses on a number line. The third line contains \'m\' space-separated integers f1, f2, ..., fm (0 ≤ fi ≤ 1000), representing the positions of the fire hydrants on a number line. -----Output----- Print a single integer — the minimum distance \'d\' that ensures every house is protected by at least one fire hydrant. -----Examples----- Input 5 2 1 2 7 9 11 3 10 Output 3 Input 3 1 1 2 5 3 Output 2 -----Note----- In the first example, with a distance of 3, all houses are within 3 units from at least one fire hydrant: - House at position 1 is 2 units away from hydrant at position 3. - House at position 2 is 1 unit away from hydrant at position 3. - House at position 7 is 3 units away from hydrant at position 10. - House at position 9 is 1 unit away from hydrant at position 10. - House at position 11 is 1 unit away from hydrant at position 10. In the second example, with a distance of 2, all houses are within 2 units from the fire hydrant at position 3: - House at position 1 is 2 units away from hydrant at position 3. - House at position 2 is 1 unit away from hydrant at position 3. - House at position 5 is also covered at distance 2.","solution":"def min_distance_to_protect_houses(n, m, houses, hydrants): Determines the minimum distance \'d\' that ensures every house is protected by at least one fire hydrant. Parameters: n (int): Number of houses. m (int): Number of fire hydrants. houses (list of int): Positions of the houses. hydrants (list of int): Positions of the fire hydrants. Returns: int: Minimum distance \'d\' that ensures every house is protected. houses.sort() hydrants.sort() def is_protected(d): hydrant_idx = 0 for house in houses: while hydrant_idx < m and abs(house - hydrants[hydrant_idx]) > d: hydrant_idx += 1 if hydrant_idx == m: return False return True left = 0 right = max(max(houses), max(hydrants)) result = right while left <= right: mid = (left + right) // 2 if is_protected(mid): result = mid right = mid - 1 else: left = mid + 1 return result # Example input and calling the function n = 5 m = 2 houses = [1, 2, 7, 9, 11] hydrants = [3, 10] print(min_distance_to_protect_houses(n, m, houses, hydrants)) # Output should be 3"},{"question":"You are given an array `A` consisting of `N` distinct integers between 1 and N (inclusive). You are tasked to create a zero-indexed permutation array `P` of length N, such that for every element `A[i]` in the array A, `P[A[i] - 1] = i`. Write a function to generate the permutation array `P` from the given array `A`. Constraints * 1 leq N leq 10000 * 1 leq A[i] leq N * All elements in A are distinct. * All values in input are integers. Input Input is given from Standard Input in the following format: N A[0] A[1] ... A[N-1] Output Print the permutation array P as space-separated integers. Examples Input 5 5 3 1 4 2 Output 2 4 1 3 0 Input 3 1 2 3 Output 0 1 2 Input 6 4 5 6 1 2 3 Output 3 4 5 0 1 2","solution":"def generate_permutation_array(N, A): Generates a permutation array P from the given array A. Parameters: N (int): The length of the array A. A (list of int): The input array consisting of distinct integers between 1 and N, inclusive. Returns: list of int: The permutation array P where P[A[i] - 1] = i. P = [0] * N for i in range(N): P[A[i] - 1] = i return P"},{"question":"A robotic arm needs to sort a list of objects from left to right based on their weights. You have been asked to determine if the list can be sorted in non-decreasing order by performing at most one \\"swap\\" operation. A \\"swap\\" operation involves exchanging the positions of any two elements in the list. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of objects. The second line contains n space-separated integers: weights[1], weights[2], ..., weights[n] (1 ≤ weights[i] ≤ 10^9) — the weights of the objects. -----Output----- Print \\"YES\\" if the list can be sorted in non-decreasing order by performing at most one swap operation. Otherwise, print \\"NO\\". If your answer is \\"YES\\", also print two space-separated integers denoting the indices (1-based) of the elements to be swapped. If there are multiple valid answers, print any of them. -----Examples----- Input 4 4 2 3 1 Output YES 1 4 Input 5 1 5 3 4 2 Output YES 2 5 Input 4 4 3 2 1 Output NO Input 3 1 2 3 Output YES 1 1 -----Note----- Sample 1: By swapping the first and the last element, we can get [1, 2, 3, 4], which is sorted. Sample 3: No single swap can convert [4, 3, 2, 1] into a sorted list. Sample 4: The list is already sorted, so we can consider any single swap of the same element, such as (1, 1).","solution":"def can_sort_with_one_swap(n, weights): Determines if a list can be sorted in non-decreasing order by performing at most one swap operation. Args: n : int The number of objects. weights : list of int The weights of the objects. Returns: str : \\"YES\\" if it can be sorted with one swap, otherwise \\"NO\\". tuple of int : The indices (1-based) of the elements to be swapped, if \\"YES\\". # Copy the weights list and sort it to compare sorted_weights = sorted(weights) # Find the positions where the elements differ from the sorted list diff_indices = [i for i in range(n) if weights[i] != sorted_weights[i]] # If there are no differences or exactly two differences, check if they can be swapped if not diff_indices: return (\\"YES\\", 1, 1) elif len(diff_indices) == 2: i, j = diff_indices if weights[i] == sorted_weights[j] and weights[j] == sorted_weights[i]: return (\\"YES\\", i + 1, j + 1) return (\\"NO\\",) # Example Usage n = 4 weights = [4, 2, 3, 1] print(can_sort_with_one_swap(n, weights))"},{"question":"# Task Given a 2D array `matrix`, your task is to rotate the matrix 90 degrees clockwise. # Example For the matrix ``` 1, 2, 3 4, 5, 6 7, 8, 9 ``` the output should be: ``` 7, 4, 1 8, 5, 2 9, 6, 3 ``` # Input/Output - `[input]` 2D integer array `matrix` Constraints: `1 ≤ matrix.length ≤ 10, matrix.length = matrix[i].length, 1 ≤ matrix[i][j] ≤ 1000` - `[output]` 2D integer array Rotated matrix.","solution":"def rotate_matrix(matrix): Rotates a given 2D matrix 90 degrees clockwise. Args: - matrix (list of list of int): The input matrix Returns: - list of list of int: The rotated matrix n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][n - 1 - i] = matrix[i][j] return result"},{"question":"In a faraway kingdom, there exists a mysterious code language which is used to securely transmit messages. The language uses only uppercase English alphabets and each letter can be repeated multiple times. The uniqueness of the language is derived from its decoding mechanism, which transforms the encoded string into a sequence of letter groups based on certain rules. Given an encoded string `S`, you need to decode it by following these steps: 1. Each distinct letter in `S` must form a separate group. 2. The groups must be sorted in lexicographical order based on the letters they contain. 3. Within each group, the letter appears as many times as it does consecutively in `S`, with each appearance followed by the count of its occurrence. For example, if `S = \\"AAABBCCCCBDDDD\\"`, the decoded form will be: A3, B2, B2, C4, D4 You must write a function that takes the encoded string `S` and returns the decoded format as a string, where each group is separated by a comma. If the encoded string is empty, return an empty string. Input Format The input consists of a single string `S`. Output Format Output the decoded string as described. Constraints - 1 ≤ |S| ≤ 100 - `S` contains only uppercase English alphabets. SAMPLE INPUT AAABBCCCCBDDDD SAMPLE OUTPUT A3,B2,B2,C4,D4 Explanation Initial string is AAABBCCCCBDDDD. Decode each distinct letter group: - A occurs 3 times consecutively. - B occurs 2 times consecutively. - Another B appears but only once. - C appears 4 times consecutively. - D appears 4 times consecutively. Thus, the decoded result is: `A3,B2,B1,C4,D4`.","solution":"def decode_message(S): Decode the encoded string S by forming groups of consecutive identical letters, returning a comma-separated string of letter followed by their counts. if not S: return \\"\\" result = [] count = 1 prev_char = S[0] for i in range(1, len(S)): if S[i] == prev_char: count += 1 else: result.append(f\\"{prev_char}{count}\\") prev_char = S[i] count = 1 # Append the last group result.append(f\\"{prev_char}{count}\\") return \\",\\".join(result)"},{"question":"Serena is building a string manipulation tool and needs to efficiently modify the given string by applying two types of operations. The operations are: 1. Append a character to the end of the string. 2. Delete the last character of the string. Serena wants to find out if, by performing a series of these operations on the string, it is possible to transform it into another given string. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t test cases consists of two lines: - The first line contains a string S (1 leq |S| leq 200,000). - The second line contains a string T (1 leq |T| leq 200,000). It is guaranteed that the total length of all input strings does not exceed 10^6 characters. -----Output----- For each test case, output \\"Yes\\" if it is possible to transform string S into string T by performing the given operations, and \\"No\\" otherwise (both excluding quotation marks). You can output each letter in any case (upper or lower). -----Examples----- Input 3 abc a h he python python3 Output Yes No No -----Note----- In the first test case, we can delete \'b\' and \'c\' from \\"abc\\" to get \\"a\\". In the second test case, we cannot obtain \\"he\\" from \\"h\\" by appending or deleting characters. In the third test case, we cannot obtain \\"python3\\" from \\"python\\" by appending or deleting characters as additional characters are required.","solution":"def can_transform_string(s, t): Determines if string S can be transformed into string T by appending characters to the end of S or deleting the last character of S. if len(t) > len(s): return \'No\' return \'Yes\' if s[:len(t)] == t else \'No\' def process_test_cases(test_cases): results = [] for s, t in test_cases: results.append(can_transform_string(s, t)) return results"},{"question":"Given an array of integers, write a function to find a subarray with the maximum product. The subarray must contain at least one number. Example: Given array nums = [2, 3, -2, 4] The subarray [2, 3] has the maximum product 6.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray within the given list of integers. The subarray must contain at least one number. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Given an array arr[] of size N, where arr[i] represents the height of a building, the task is to find out if you can jump from the first building to the last building by jumping one building at a time or skipping at most one building in between adjacent jumps. Example 1: Input: N = 5, arr[] = {1, 2, 3, 4, 5} Output: Yes Explanation: You can jump from 1 -> 2 -> 3 -> 4 -> 5 without skipping any building. Example 2: Input: N = 5, arr[] = {1, 3, 2, 5, 4} Output: Yes Explanation: You can jump from 1 -> 3 (skip 2) -> 5 (skip 4). Example 3: Input: N = 4, arr[] = {3, 2, 1, 4} Output: No Explanation: You cannot jump from 3 to 4 because the intermediate buildings (2 and 1) are lower in height and not in a consecutive increasing order. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function canJump() that takes array arr[] and an integer N as parameters and returns the boolean true if you can jump as described else returns boolean false. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^7","solution":"def canJump(arr, n): Determines if you can jump from first to last building by skipping at most one building in between. Args: arr: List[int] - the heights of the buildings. n: int - the number of buildings. Returns: bool - True if you can reach the last building otherwise False. if n == 1: return True for i in range(1, n): if arr[i] < arr[i-1]: if i == 1 or arr[i] < arr[i-2]: return False return True"},{"question":"You are given an array of non-negative integers nums. The array initially has an n-size sliding window (from 0 to n-1), and you will be removing one element from the sliding window on the left and adding a new element from the array to the right side of the sliding window until the end of the array is reached. Every time the sliding window is updated, calculate the sum of the maximum and minimum values of the sliding window. Return an array containing all the results of the sum of the maximum and minimum values at each sliding window position. Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], n = 3 Output: [4, 3, 1, 1, 8, 9] Explanation: Window positions and their min-max sums: - [1, 3, -1]: min = -1, max = 3, sum = 2 - [3, -1, -3]: min = -3, max = 3, sum = 0 - [-1, -3, 5]: min = -3, max = 5, sum = 2 - [-3, 5, 3]: min = -3, max = 5, sum = 2 - [5, 3, 6]: min = 3, max = 6, sum = 9 - [3, 6, 7]: min = 3, max = 7, sum = 10 Example 2: Input: nums = [7,2,4], n = 2 Output: [9, 6] Constraints: 1. 1 <= nums.length <= 100000 2. -10^5 <= nums[i] <= 10^5 3. 1 <= n <= nums.length","solution":"def sliding_window_min_max_sum(nums, n): Returns an array containing the sum of the maximum and minimum values of the sliding window. if not nums or n == 0: return [] result = [] for i in range(len(nums) - n + 1): window = nums[i:i + n] min_val = min(window) max_val = max(window) result.append(min_val + max_val) return result"},{"question":"Write a function that takes a string as input and returns a dictionary where the keys are the unique characters in the string and the values are lists containing the indices of each occurrence of those characters in the string. # Examples ```python character_indices(\\"hello\\") # should return {\'h\': [0], \'e\': [1], \'l\': [2, 3], \'o\': [4]} character_indices(\\"apple\\") # should return {\'a\': [0], \'p\': [1, 2], \'l\': [3], \'e\': [4]} character_indices(\\"\\") # should return {} ```","solution":"def character_indices(s): Returns a dictionary where the keys are the unique characters in the string `s` and the values are lists containing the indices of each occurrence of those characters in the string. result = {} for index, char in enumerate(s): if char in result: result[char].append(index) else: result[char] = [index] return result"},{"question":"Leela is working on a project where she needs to find the longest subarray with exactly M unique integers. She has an array of length N consisting of positive integers. Help her by writing a function to find the length of such a subarray. INPUT: The first line contains an integer N, the size of the array. The second line contains N space-separated integers, representing the array elements. The third line contains an integer M, the number of unique integers required in the subarray. OUTPUT: Print a single integer, the length of the longest subarray with exactly M unique integers. If no such subarray exists, print 0. CONSTRAINTS: 1 ≤ N ≤ 10^5 1 ≤ array elements ≤ 10^9 1 ≤ M ≤ N SAMPLE INPUT 7 1 2 1 2 3 4 2 3 SAMPLE OUTPUT 5 Explanation The longest subarray with exactly 3 unique integers is [1, 2, 1, 2, 3], which has a length of 5.","solution":"def longest_subarray_with_m_unique_integers(arr, M): from collections import defaultdict N = len(arr) if M > N: return 0 start, end = 0, 0 max_length = 0 current_unique_count = 0 freq = defaultdict(int) while end < N: # Extend the end of the window if freq[arr[end]] == 0: current_unique_count += 1 freq[arr[end]] += 1 end += 1 # Shrink the window from the start if the unique count exceeds M while current_unique_count > M: if freq[arr[start]] == 1: current_unique_count -= 1 freq[arr[start]] -= 1 start += 1 # Check if we have exactly M unique integers if current_unique_count == M: max_length = max(max_length, end - start) return max_length"},{"question":"A group of miners are stuck in a mine, and there are several different escape routes that they can take to get out of the mine. Each escape route has a certain distance to traverse, and the miners want to find the shortest possible distance to escape. The mine is represented as a simple connected undirected graph with `n` vertices (rooms) and `m` edges (routes), where each route has a distance associated with it. Write a program to determine the shortest distance that any miner has to travel to escape the mine. The miners can start at any room and can exit through any room that is directly connected to the outside. Input The first line contains two integers, `n` and `m`, the number of rooms and the number of routes respectively (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000). The next `m` lines contain three integers `u`, `v`, and `w`, representing a route between rooms `u` and `v` with a distance of `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10). It is guaranteed that the graph is connected. Output Print a single integer, the shortest distance any miner has to travel to escape the mine. SAMPLE INPUT 5 6 1 2 3 1 3 2 2 3 4 2 4 3 3 4 1 4 5 6 SAMPLE OUTPUT 2","solution":"import heapq def shortest_escape_distance(n, m, routes): Function to find the shortest distance that any miner has to travel to escape the mine. Parameters: n (int): Number of rooms. m (int): Number of routes. routes (list of tuples): Each tuple contains three integers u, v, and w representing a route from room u to room v with distance w. Returns: int: The shortest distance a miner has to travel to escape the mine. graph = {i: [] for i in range(1, n+1)} for u, v, w in routes: graph[u].append((w, v)) graph[v].append((w, u)) # Using Dijkstra\'s algorithm from room 1 to all other rooms def dijkstra(start): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_vertex = heapq.heappop(pq) if current_distance > distances[current_vertex]: continue for weight, neighbor in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances # Find minimum distance from room 1 to every other room and back to room 1 distances_from_start = dijkstra(1) min_distance = float(\'inf\') for u, v, w in routes: min_distance = min(min_distance, distances_from_start[u] + w) min_distance = min(min_distance, distances_from_start[v] + w) return min_distance"},{"question":"# Task You have a string `s` representing a sequence of characters and an integer `k`. Your task is to determine the minimum length of a contiguous substring of `s` that contains exactly `k` distinct characters. If no such substring exists, return `-1`. # Example For `s = \\"abcba\\"` and `k = 2`, the output should be `2`. The substring `\\"ab\\"` or `\\"bc\\"` has exactly 2 distinct characters. For `s = \\"aba\\"`, and `k = 3`, the output should be `-1`. There is no substring of `s` that contains exactly 3 distinct characters. # Input/Output - `[input]` string `s` A string consisting of lowercase Latin letters. - `[input]` integer `k` An integer representing the number of distinct characters to find in the substring. - `[output]` an integer The minimum length of a contiguous substring of `s` that contains exactly `k` distinct characters, or `-1` if no such substring exists.","solution":"def min_length_substring_with_k_distinct_characters(s, k): Finds the minimum length of a contiguous substring of `s` that contains exactly `k` distinct characters. Args: s (str): The input string. k (int): The number of distinct characters required. Returns: int: The minimum length of the substring or -1 if no such substring exists. from collections import defaultdict n = len(s) if k == 0 or k > n: return -1 min_len = float(\'inf\') left = 0 char_map = defaultdict(int) distinct_count = 0 for right in range(n): char_map[s[right]] += 1 if char_map[s[right]] == 1: # New distinct character. distinct_count += 1 while distinct_count > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: # Remove a distinct character. distinct_count -= 1 left += 1 if distinct_count == k: min_len = min(min_len, right - left + 1) return min_len if min_len != float(\'inf\') else -1"},{"question":"A game consists of a sequence of moves, each move either adds or subtracts a fixed integer X. The goal is to reach an exact target score Y. You are given the starting score Z. Determine the minimum number of moves required to reach the exact score Y from the starting score Z. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three integers X, Y, and Z. ------ Output ------ Print a single line containing one integer ― the minimum number of moves required to transform the initial score Z into the target score Y. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ X, |Y|, |Z| ≤ 10^9 ----- Sample Input 1 ------ 3 3 10 1 5 -3 1 2 8 1 ----- Sample Output 1 ------ 3 1 4","solution":"def min_moves(T, test_cases): results = [] for i in range(T): X, Y, Z = test_cases[i] distance = abs(Y - Z) moves = (distance + X - 1) // X # The +X-1 ensures we round up when necessary results.append(moves) return results"},{"question":"You have a sequence of integers B_1, B_2, ldots, B_N. You are allowed to perform the following operation on the sequence: Choose any two valid indices i and j (with i neq j) and swap B_i and B_j. Determine if it is possible to sort the sequence in non-decreasing order using any number of these operations. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers B_1, B_2, ldots, B_N. -----Output----- For each test case, print a single line containing the string \\"YES\\" if it is possible to sort the sequence using the allowed operations, or \\"NO\\" if it is impossible. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10 - |B_i| le 100 for each valid i -----Subtasks----- Subtask #1 (10 points): N = 1 Subtask #2 (30 points): N le 2 Subtask #3 (60 points): original constraints -----Example Input----- 3 1 1 3 3 2 1 4 2 1 2 1 -----Example Output----- YES YES NO -----Explanation----- Example case 2: Swapping index 1 and 3 yields 1, 2, 3 which is sorted. Example case 3: No number of swaps can make the sequence 2, 1, 2, 1 sorted.","solution":"def can_sort_sequence(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] B = test_cases[i][1] # Check if sorting the array results in the same as removing duplicates and sorting if sorted(B) == sorted(list(set(B))): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes in a list of integers and a target sum. The function should return a tuple of two indices of the list such that the values at these indices add up to the target sum. If no such pair exists, return `None`. Examples: ```python find_pair_with_sum([2, 7, 11, 15], 9) # (0, 1) find_pair_with_sum([1, 2, 3, 4, 6], 6) # (1, 3) find_pair_with_sum([2, 5, 9, 13], 8) # None find_pair_with_sum([1, 2, 3, 4], 7) # (2, 3) ``` **Constraints:** - The solution should have a time complexity better than O(n^2). - The list contains at least two integers, and there are no duplicate values. - You can assume all input values are integers (both positive and negative) and within the 32-bit integer range.","solution":"def find_pair_with_sum(nums, target): Returns a tuple of two indices of the nums list such that the values at these indices add up to the target sum. If no such pair exists, returns None. :param nums: List of integers :param target: Target sum :return: Tuple of two indices or None num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"You are given a rectangular grid of size n rows and m columns. Each cell of the grid contains a single lowercase Latin letter. Your task is to find the size of the largest rectangle that consists entirely of the same letter. A rectangle is defined as any subgrid where all the cells within are the same character. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of rows and columns of the grid. The next n lines contain exactly m lowercase Latin letters each — the grid itself. Output Print a single integer — the size of the largest rectangle consisting entirely of the same letter. SAMPLE INPUT 3 4 aaaa abab aaaa SAMPLE OUTPUT 4 Explanation The largest rectangle consists of four `a` letters from the first row.","solution":"def largest_same_letter_rectangle(n, m, grid): def calculate_largest_histogram_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area def compute_max_area_histogram_for_letter(letter): heights = [0] * m max_area = 0 for row in range(n): for col in range(m): if grid[row][col] == letter: heights[col] += 1 else: heights[col] = 0 max_area = max(max_area, calculate_largest_histogram_area(heights)) return max_area unique_letters = set(letter for row in grid for letter in row) max_rectangle_size = 0 for letter in unique_letters: max_rectangle_size = max(max_rectangle_size, compute_max_area_histogram_for_letter(letter)) return max_rectangle_size"},{"question":"# Problem Imagine you are given a row of houses, each house can be painted with one of three colors: red, green, or blue. The cost of painting each house with a particular color is different. You have to paint all the houses such that no two adjacent houses have the same color. The cost of painting each house with a certain color is represented by a 2D array, `costs`, where: - `costs[i][0]` is the cost of painting house `i` with the color red, - `costs[i][1]` is the cost of painting house `i` with the color green, - `costs[i][2]` is the cost of painting house `i` with the color blue. Your task is to compute the minimum cost to paint all houses, satisfying that no two adjacent houses have the same color. # Input - An integer `N`, the number of houses. - An `N x 3` matrix `costs` where `costs[i][j]` represents the cost of painting house `i` with color `j` (0 for red, 1 for green, 2 for blue). # Output - An integer representing the minimum cost to paint all the houses. # Constraints - `1 ≤ N ≤ 1000` - `1 ≤ costs[i][j] ≤ 1000` # Example Input ``` 3 17 2 17 16 16 5 14 3 19 ``` Output ``` 10 ``` Explanation - Paint house 0 with color green (cost = 2) - Paint house 1 with color blue (cost = 5) - Paint house 2 with color green (cost = 3) - Total minimum cost = 2 + 5 + 3 = 10","solution":"def min_cost_to_paint_houses(N, costs): if N == 0: return 0 # Initialize a DP array with the same structure as costs dp = [[0] * 3 for _ in range(N)] # The cost for the first house is same as the cost matrix dp[0] = costs[0] # Fill the dp array for i in range(1, N): dp[i][0] = costs[i][0] + min(dp[i-1][1], dp[i-1][2]) dp[i][1] = costs[i][1] + min(dp[i-1][0], dp[i-1][2]) dp[i][2] = costs[i][2] + min(dp[i-1][0], dp[i-1][1]) # The minimum cost will be the minimum of the last house options return min(dp[-1])"},{"question":"Alice is planning to organize a series of workshops. Each workshop lasts exactly one hour, and she wants to schedule them over several days. The requirement for the workshops is that the number of workshops each day should strictly increase with each successive day. Given the number of days, d, and the total number of workshops, w, calculate a valid schedule that meets all the requirements. If such a schedule is not possible, output `-1`. -----Input----- The first input line contains two integers d and w (1 ≤ d ≤ 100, 1 ≤ w ≤ 1000) — the number of days and the total number of workshops, correspondingly. -----Output----- If a valid schedule exists, print d space-separated integers representing the number of workshops on each day. If there is no valid schedule, print -1. -----Examples----- Input 3 6 Output 1 2 3 Input 4 10 Output 1 2 3 4 Input 3 3 Output -1 -----Note----- In the first sample, Alice assigns 1 workshop on the first day, 2 workshops on the second day, and 3 workshops on the third day, making a total of 1 + 2 + 3 = 6 workshops. In the second sample, she assigns 1 workshop on the first day, 2 workshops on the second day, 3 workshops on the third day, and 4 workshops on the fourth day, making a total of 1 + 2 + 3 + 4 = 10 workshops. In the third sample, it is impossible to schedule 3 workshops over 3 days such that the number of workshops each day strictly increases. The output is `-1`.","solution":"def workshop_schedule(d, w): Calculate a valid schedule for workshops over d days summing to w, with each day\'s workshop count strictly increasing. Args: d (int): Number of days. w (int): Total number of workshops. Returns: list or int: A list of integers representing the number of workshops per day, or -1 if no valid schedule exists. # Calculate the minimum required workshops which would be the sum of first d natural numbers. min_workshops = d * (d + 1) // 2 # If the minimum workshops exceed the total workshops available, scheduling is impossible. if min_workshops > w: return -1 # Initial allocation with the first d natural numbers schedule = list(range(1, d + 1)) current_sum = sum(schedule) # Distribute the remaining workshops to meet the total count w for i in range(d - 1, -1, -1): while current_sum < w: schedule[i] += 1 current_sum += 1 if current_sum == w: break return schedule # Sample usage def main(): print(workshop_schedule(3, 6)) # Should print [1, 2, 3] print(workshop_schedule(4, 10)) # Should print [1, 2, 3, 4] print(workshop_schedule(3, 3)) # Should print -1 if __name__ == \\"__main__\\": main()"},{"question":"Given a binary tree, return the level order traversal of its nodes\' values in zigzag order. (i.e., from left to right, then right to left for the next level and alternate between). For example: Given binary tree [3,9,20,null,null,15,7], ``` 3 / 9 20 / 15 7 ``` return its zigzag level order traversal as: ``` [ [3], [20,9], [15,7] ] ```","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): if not root: return [] results = [] current_level = deque([root]) left_to_right = True while current_level: level_size = len(current_level) level_nodes = [] for _ in range(level_size): if left_to_right: node = current_level.popleft() level_nodes.append(node.val) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) else: node = current_level.pop() level_nodes.append(node.val) if node.right: current_level.appendleft(node.right) if node.left: current_level.appendleft(node.left) results.append(level_nodes) left_to_right = not left_to_right return results"},{"question":"You are given a list of integers representing the scores of students in a class. You need to determine the rank of each student based on their score in descending order (highest score gets rank 1, the next highest gets rank 2, and so on). If two or more students have the same score, they should have the same rank, but the next student with a lower score should have a rank incremented by the number of students having the same higher score. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of students. The second line contains n integers separated by spaces, where each integer is between 1 and 100, representing the scores of the students. Output: Print n integers separated by spaces, where the i-th integer represents the rank of the i-th student. Example: Input: 6 100 98 98 95 93 93 Output: 1 2 2 4 5 5 Input: 4 70 80 80 70 Output: 3 1 1 3 Note: In the first example, there are two students with a score of 98, both ranked 2. Therefore, the next student, with a score of 95, is ranked 4.","solution":"def get_ranks(scores): This function takes a list of scores and returns their ranks in descending order. sorted_scores = sorted(enumerate(scores), key=lambda x: x[1], reverse=True) ranks = [0] * len(scores) current_rank = 1 for idx, (original_index, score) in enumerate(sorted_scores): if idx > 0 and score < sorted_scores[idx-1][1]: current_rank = idx + 1 ranks[original_index] = current_rank return ranks"},{"question":"Create a program that simulates a simple blockchain and verifies the validity of a series of transactions. # Description: Blockchain is a distributed database that maintains a continuously growing list of records called blocks. Each block contains a timestamp and a link to the previous block. For the purpose of this problem, assume that each block carries exactly one transaction and that each transaction awards a specific amount of tokens to a recipient. Your task is to implement a simplified blockchain system that processes a list of transactions and verifies their validity based on the following rules: 1. The first block (genesis block) always awards 100 tokens to an initial user called \\"genesis_user\\". 2. Each subsequent block\'s transaction awards tokens to a recipient specified in the provided list of transactions. 3. Each transaction in the blockchain must link to the previous transaction correctly. You need to determine if the sequence of transactions provided is valid according to these rules. # Input: - A single integer `n` representing the number of transactions (1 ≤ n ≤ 1000). - A list of `n` transactions. Each transaction is a space-separated string consisting of the recipient username followed by the number of tokens awarded to them. # Output: - If all transactions are valid, output \\"VALID\\". - If any transaction is invalid, output \\"INVALID\\" followed by the 1-based index of the first invalid transaction. # Example: Input: ``` 3 genesis_user 100 alice 50 bob 30 ``` Output: ``` VALID ``` Input: ``` 3 genesis_user 100 bob 70 alice 30 ``` Output: ``` INVALID 2 ``` # Explanation: In the first example, all transactions follow the rules: 1. genesis_user receives 100 tokens in the genesis block. 2. alice receives 50 tokens in the second block. 3. bob receives 30 tokens in the third block. In the second example, the second transaction is invalid: 1. genesis_user receives 100 tokens in the genesis block. 2. bob receives 70 tokens in the second block, which makes the sequence invalid. Therefore, the output specifies the first invalid transaction (index 2). Make sure to keep the order of transactions and verify them correctly to ensure the blockchain\'s integrity.","solution":"def validate_blockchain(n, transactions): Validates a simple blockchain given a list of transactions. Parameters: n (int): Number of transactions. transactions (list of str): List of transactions, each formatted as \\"recipient tokens\\". Returns: str: \\"VALID\\" if all transactions are valid, otherwise \\"INVALID X\\" where X is the index of the first invalid transaction. # Check the genesis block if not transactions[0].startswith(\\"genesis_user 100\\"): return \\"INVALID 1\\" # Check subsequent blocks for correct structure for i in range(1, n): parts = transactions[i].split() if len(parts) != 2: return f\\"INVALID {i+1}\\" recipient, tokens = parts try: tokens = int(tokens) except ValueError: return f\\"INVALID {i+1}\\" return \\"VALID\\""},{"question":"You are given a string s of length n consisting of lowercase English letters. Your task is to determine the maximum length of a substring that can be made such that no two adjacent characters are the same. In other words, find the longest substring from the given string s where no character appears consecutively. For example, in the string \\"abac\\", \\"aba\\" and others are valid substrings where no characters are adjacent and same. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of the test case contains one integer n (1 le n le 100) — the length of the string s. The second line of the test case contains the string s consisting of lowercase English letters. -----Output----- For each test case, print the answer — the maximum length of a substring where no two adjacent characters of the substring are the same. -----Example----- Input 3 4 abac 5 aaaaa 6 abcabc Output 4 1 6 -----Note----- In the first test case of the example, the string \\"abac\\" itself is a valid substring where no characters are adjacent and same, so the maximum length is 4. In the second test case of the example, since all characters are the same, the maximum valid substring length is 1. In the third test case of the example, the string \\"abcabc\\" itself is a valid substring, so the maximum length is 6.","solution":"def max_no_adjacent_same_substring_length(t, test_cases): Determines the maximum length of a substring where no two adjacent characters of the substring are the same for multiple test cases. Arguments: t -- Number of test cases test_cases -- A list of tuples. Each tuple contains: - an int n, the length of the string s - a string s consisting of lowercase English letters Returns the results as a list of integers. results = [] for n, s in test_cases: if n == 0: results.append(0) continue # Maximum length starts at 1 since at least one character is always non-repeating max_length = 1 for i in range(1, n): if s[i] != s[i-1]: max_length += 1 results.append(max_length) return results"},{"question":"In a faraway land, there exists only one type of currency with coins of various denominations. A small shopkeeper has flourished by selling magical potions. However, his bronze scale can only weigh up to a fixed weight limit before it breaks. Each coin type has a specific weight associated with it, and the scale cannot be overloaded. Given a list of coin types with their respective values and weights, your task is to determine the maximum value of coins that the shopkeeper can place on his scale without exceeding its weight limit. Input The first line contains two integers n and W — the number of different coin types and the weight limit of the scale respectively. Each of the next n lines contains two integers v and w — the value and weight of each coin type. Output Print a single integer — the maximum total value of coins that can be placed on the scale without exceeding the weight limit. Examples Input 3 50 60 10 100 20 120 30 Output 220 Input 1 10 500 5 Output 500 Input 2 8 70 4 60 4 Output 130 Note In the first example, the best combination is to take the second and third coin types which weigh together 20 + 30 = 50. The total value is 100 + 120 = 220.","solution":"def maximum_value_of_coins(n, W, coins): # Initialize a table to store maximum values for each weight possibility dp = [0] * (W + 1) # Process each coin for value, weight in coins: # Traverse the dp table in reverse to prevent recomputation issues for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + value) return dp[W]"},{"question":"\\"Spot the missing number\\" In a sequence of positive integers starting from 1 to N, one number is missing. You have the sequence with all but one of the numbers in random order. Your task is to find the missing number. Input First line contains number of test cases, T. Each test case consists of two lines: The first line contains an integer N, the size of the sequence. The second line contains N-1 space-separated integers representing the sequence in random order with one number missing. Output For each test case, print the missing number in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 SAMPLE INPUT 2 5 3 1 5 4 7 7 6 1 5 2 4 SAMPLE OUTPUT 2 3 Explanation For the first case, the complete sequence should be 1, 2, 3, 4, 5. The given sequence is 3, 1, 5, 4, so the number 2 is missing. For the second case, the complete sequence should be 1, 2, 3, 4, 5, 6, 7. The given sequence is 7, 6, 1, 5, 2, 4, so the number 3 is missing.","solution":"def find_missing_number(n, sequence): Returns the missing number in the sequence. n: int - the size of the sequence (including the missing number) sequence: list of int - the sequence with one number missing expected_sum = n * (n + 1) // 2 actual_sum = sum(sequence) return expected_sum - actual_sum def process_input(input_data): Processes the input data and returns the results for each test case in the form of a list of integers. input_data: list of str - list of input strings index = 0 T = int(input_data[index]) index += 1 results = [] for _ in range(T): N = int(input_data[index]) index += 1 sequence = list(map(int, input_data[index].split())) index += 1 results.append(find_missing_number(N, sequence)) return results"},{"question":"A company is organizing a hackathon and they need to distribute the participants into groups. Each group must have a minimum number of participants, but also must not exceed a maximum number to ensure balanced teamwork. The company\'s goal is to form the maximum number of groups given these constraints and the number of available participants. For example, with the constraints set in the sample data below, if there are 50 participants, and each group must have at least 5 but no more than 10 participants, we can form the maximum number of groups, which is 5 groups of 10 participants each. -----Input----- The input contains three integers: - P (1 ≤ P ≤ 10^4), the total number of participants available, - G_{min} (1 ≤ G_{min} ≤ G_{max}), the minimum number of participants required in a group, and - G_{max} (G_{min} ≤ G_{max} ≤ 100), the maximum number of participants allowed in a group. -----Output----- Output the maximum number of groups that can be formed while respecting the group size constraints. -----Examples----- Sample Input 1: 50 5 10 Sample Output 1: 5 Sample Input 2: 120 15 20 Sample Output 2: 6","solution":"def max_number_of_groups(P, G_min, G_max): Calculate the maximum number of groups that can be formed with given constraints. Parameters: P (int): Total number of participants. G_min (int): Minimum number of participants required in a group. G_max (int): Maximum number of participants allowed in a group. Returns: int: Maximum number of groups that can be formed. # Strategy is to form groups of size G_max first as much as possible max_possible_groups = P // G_max # If there are remaining participants, add one more group if it is possible to form it remaining_participants = P % G_max if remaining_participants >= G_min or (remaining_participants > 0 and (max_possible_groups * G_max + remaining_participants) % G_min == 0): return max_possible_groups + 1 return max_possible_groups"},{"question":"# Palindrome Checker You are asked to determine if each string in a list of strings is a palindrome. Input An integer T, denoting the number of testcases, followed by T lines, each containing a single string S. Output For each string S given in the input, output a single line with \\"YES\\" if S is a palindrome and \\"NO\\" if it is not. Constraints - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 100 Example **Input:** ``` 4 racecar hello madam world ``` **Output:** ``` YES NO YES NO ```","solution":"def is_palindrome(s): Returns \'YES\' if the string s is a palindrome, \'NO\' otherwise. return \'YES\' if s == s[::-1] else \'NO\' def check_palindromes(strings): Takes a list of strings and returns a list of results, where result[i] is \'YES\' if strings[i] is a palindrome, \'NO\' otherwise. return [is_palindrome(s) for s in strings]"},{"question":"Title]: Restore the Smallest Number You are given a string S\' consisting of digits (0-9) and \'?\' characters. The goal is to replace each \'?\' with a digit (0-9) such that the resulting number: - Has no leading zeros unless it is \\"0\\". - Is the smallest possible number. Print the resulting number. If it is not possible to generate such a number, print \\"IMPOSSIBLE\\". -----Constraints----- - The length of the string |S\'| is between 1 and 100 inclusive. - The string consists of digits (0-9) and ? characters. -----Input----- The input string S\' is given from Standard Input as a single line. -----Output----- Print the smallest possible number after replacing \'?\' characters. If it is not possible, print \\"IMPOSSIBLE\\". -----Sample Input----- ?23?5 -----Sample Output----- 12305 By changing the first \'?\' to \'1\' and the second \'?\' to \'0\', we get the smallest number 12305. -----Sample Input----- ??0 -----Sample Output----- 100 By replacing the first \'?\' with \'1\' and the second \'?\' with \'0\', we get the smallest number 100 that satisfies the conditions. -----Sample Input----- 0? -----Sample Output----- 00 By replacing the \'?\' with \'0\', we get the smallest number 00. However, \\"0\\" without leading zeros is the lexicographically smallest valid number. -----Sample Input----- ? -----Sample Output----- 0 There is a single \'?\' to replace, giving the smallest number \\"0\\".","solution":"def restore_smallest_number(s): Replaces \'?\' with digits (0-9) to form the smallest possible number. Ensures no leading zeros unless the number is \'0\'. if len(s) == 0: return \\"IMPOSSIBLE\\" # Replace \'?\' characters s_list = list(s) if s_list[0] == \'?\': s_list[0] = \'1\' if len(s) > 1 else \'0\' for i in range(1, len(s_list)): if s_list[i] == \'?\': s_list[i] = \'0\' # Ensure valid number if len(s_list) > 1 and s_list[0] == \'0\': return \\"IMPOSSIBLE\\" return \'\'.join(s_list)"},{"question":"R: Savvy Substring Slicing story Alice is a meticulous programmer who loves working with strings in her free time. One day, she came across a challenging problem involving substring manipulation and instantly got hooked. Given a string `S` and an integer `K`, Alice wanted to find a way to determine the length of the longest substring such that the substring contains at most `K` distinct characters. Alice is confident that this problem holds a key programming concept she wishes to master. Alice needs your help to implement a function to solve this problem efficiently. Can you write a code to find the length of the longest substring with at most `K` distinct characters? problem Given a string `S` and an integer `K`, write a program to determine the length of the longest substring that contains at most `K` distinct characters. Input format The first line contains a string `S` which consists of only uppercase or lowercase English letters. The second line contains an integer `K`. It is guaranteed that: * The length of `S` is at most 10^5. * `K` is an integer such that 1 ≤ `K` ≤ 26. Output format Output the length of the longest substring that contains at most `K` distinct characters. Input example 1 abcba 2 Output example 1 3 Input example 2 aaabbbcc 2 Output example 2 6 Example Input abcba 2 Output 3","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if not s or k == 0: return 0 char_count = {} max_length = 0 left = 0 for right in range(len(s)): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an integer array `arr` of length `n` (1 le n le 10^5) and an integer `k` (1 le k le 10^9). Your task is to find the size of the smallest contiguous subarray that when summed is greater than or equal to `k`. If no such subarray exists, return `-1`. -----Input----- - The first line contains two integers, `n` and `k`. - The second line contains `n` integers representing the elements of the array `arr`. -----Output----- Print the size of the smallest contiguous subarray whose sum is greater than or equal to `k`. If there is no such subarray, print `-1`. -----Example----- Input 6 15 1 2 3 4 5 6 Output 3 -----Explanation----- The smallest subarray with sum >= 15 is [4, 5, 6] with size 3. -----Example 2----- Input 5 100 1 2 3 4 5 Output -1 -----Explanation----- No subarray of the given array has a sum >= 100. Hence, the output is -1.","solution":"def smallest_subarray_with_sum(arr, k): n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Develop a function `calculate_intersection` that takes in three lists of integers, A, B, and C, each containing n, m, and p elements respectively, and returns a list of elements that are present in all three lists. Ensure that the returned list is sorted in ascending order. Your implementation should be efficient and handle duplicate elements within the lists appropriately. Constraints: * 1 leq n, m, p leq 100,000 * -1,000,000 leq text{elements of } A, B text{ and } C leq 1,000,000 Function Signature: ```python def calculate_intersection(A: List[int], B: List[int], C: List[int]) -> List[int]: ``` Input: - Three lists A, B, and C Output: - A list of integers that are present in all three input lists, sorted in ascending order Example: Input: ```python A = [1, 2, 3, 4, 5] B = [2, 3, 5, 7, 11] C = [1, 3, 5, 7, 9, 11] ``` Output: ```python [3, 5] ``` Explanation: - The elements that are present in all three lists are [3, 5]. - The returned list is sorted in ascending order.","solution":"from typing import List def calculate_intersection(A: List[int], B: List[int], C: List[int]) -> List[int]: Returns a sorted list of elements that are present in all three input lists A, B, and C. # Convert lists to sets to find intersections setA = set(A) setB = set(B) setC = set(C) # Find the intersection of the three sets intersection = setA & setB & setC # Convert the set to a sorted list result = sorted(list(intersection)) return result"},{"question":"# Task You are given an array of `n` integers representing the heights of candles. A candle can only be blown out if it is the tallest among the candles standing. Given the height of each candle, return the number of candles that can be blown out. # Example For an array of candle heights `[4, 4, 1, 3]`, the result should be `2`. The tallest candles have a height of `4` and there are two such candles. For an array of candle heights `[3, 2, 1, 3]`, the result should be `2`. The tallest candles have a height of `3` and there are two such candles. For an array of candle heights `[5, 5, 5, 5, 5]`, the result should be `5`. The tallest candles have a height of `5` and there are five such candles. # Input/Output - `[input]` array of integers `arr` `1 ≤ n ≤ 10^5` `1 ≤ arr[i] ≤ 10^7`. - `[output]` an integer The number of tallest candles that can be blown out.","solution":"def count_tallest_candles(arr): Returns the number of tallest candles that can be blown out. Parameters: arr (list of int): List of candle heights. Returns: int: Number of tallest candles. if not arr: return 0 max_height = max(arr) return arr.count(max_height)"},{"question":"You are given a list of n integers and q queries. Each query contains two integers l and r. For each query, you need to calculate and return the sum of the elements from index l to index r inclusive. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the length of the list and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the list. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the bounds of the range for the query. Output Output q lines. Each line should contain the sum of the elements from index l to index r inclusive for the corresponding query. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Input 4 2 10 20 30 40 2 3 1 4 Output 50 100 Note Consider the first example. In the first query the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. In the second query the sum of elements from index 2 to 4 is 2 + 3 + 4 = 9. In the third query the sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def range_sum(arr, queries): Returns the sum of elements from index l to r inclusive for each query. n = len(arr) prefix_sum = [0] * (n + 1) # Calculate prefix sums for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] results = [] for l, r in queries: results.append(prefix_sum[r] - prefix_sum[l - 1]) return results"},{"question":"Alice and Bob are playing a game with arrays. They are given an array of integers, and their goal is to find the length of the longest subarray whose elements are strictly increasing. Given textit{t} queries where each query consists of an array, print the length of the longest strictly increasing subarray for each query on a new line. Input Format The first line contains an integer, textit{t}, denoting the number of queries. Each of the textit{t} subsequent lines contains a space-separated list of integers representing an array for a query. Constraints 1leq tleq10^4 1leq nleq10^5 where n is the length of the array in each query -10^6leq A[i] leq10^6 for each element A[i] in the array Output Format For each query, print the length of the longest strictly increasing subarray on a new line. Sample Input 2 1 2 2 3 4 1 5 5 1 2 3 4 5 Sample Output 3 5 Explanation In the first query, the longest strictly increasing subarrays are [1, 2], [2, 3, 4], and [1, 5], with lengths 2, 3, and 2 respectively. Thus, the output is the maximum length, which is 3. In the second query, the entire array is a strictly increasing subarray with a length of 5. Hence, the output is 5.","solution":"def longest_increasing_subarray_length(arr): Given an array of integers, returns the length of the longest strictly increasing subarray. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length) def handle_queries(queries): Given a list of queries where each query is an array of integers, returns a list of the lengths of the longest strictly increasing subarray for each query. results = [] for query in queries: results.append(longest_increasing_subarray_length(query)) return results"},{"question":"A local charity marathon is being organized in a city, and the event organizers have prepared a unique challenge for the participants. Each runner will cross a number of checkpoints along the route. To make things more interesting, the organizers have given a specific bonus point for each checkpoint based on the time of the day the runner reaches it. Given the details of a marathon route, the time taken by runners to reach each checkpoint, and the bonus points that can be obtained at each checkpoint, we need to determine the maximum bonus points a runner can collect. The runner must collect the bonus points in the order of the checkpoints without skipping any checkpoint. Each checkpoint i (1 ≤ i ≤ n) takes time `t_i` to reach, and the bonus points given for reaching checkpoint i at the exact time `t_i` is `b_i`. Write a function that, given the information on the checkpoints, returns the maximum total bonus points possible. If the time taken to reach a checkpoint does not match an exact time provided, the runner cannot collect the bonus points for that checkpoint. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of checkpoints. The second line of the input contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 1,000,000) — the time taken to reach each checkpoint. The third line of the input contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 1,000) — the bonus points for each checkpoint. -----Output----- Print a single integer — the maximum bonus points the runner can collect. -----Examples----- Input 5 1 2 3 4 5 10 20 30 40 50 Output 150 Input 4 2 4 7 10 5 15 10 20 Output 50 -----Note----- In the first example, the runner reaches each checkpoint at the exact required time, so they collect all the bonus points: 10 + 20 + 30 + 40 + 50 = 150. In the second example, the runner reaches checkpoint times at 2, 4, 7, and 10, accumulating bonus points of 5, 15, 10, and 20, respectively, for a total of 50.","solution":"def max_bonus_points(n, t, b): Calculates the maximum bonus points a runner can collect given the times to each checkpoint and bonus points for each checkpoint. Parameters: n (int): Number of checkpoints. t (list of int): Time taken to reach each checkpoint. b (list of int): Bonus points for each checkpoint. Returns: int: Maximum bonus points that can be collected. # The sum of all bonus points will be maximum since they must be collected # in the given order and each time in `t` matches perfectly. return sum(b) # Example usage # n = 5 # t = [1, 2, 3, 4, 5] # b = [10, 20, 30, 40, 50] # max_bonus_points(n, t, b) should return 150"},{"question":"A company wants to send emails to its users. They want to split users into groups so that each group has the same number of users. Write a function that will determine the total number of complete groups that can be formed and the number of users that will be left without a group. Function description Complete the `userGroups` function below. `userGroups` has the following profile: ``` def userGroups(totalUsers: int, groupSize: int) -> Tuple[int, int]: ``` Parameters: - `totalUsers` (int): The total number of users. - `groupSize` (int): The desired size for each group. Returns: - `Tuple[int, int]`: A tuple where the first element is the number of complete groups that can be formed, and the second element is the number of users that will be left without a group. Input Format - A single integer `totalUsers` representing the total number of users. - A single integer `groupSize` representing the desired size of each group. Constraints - `0 <= totalUsers <= 1000` - `1 <= groupSize <= 100` Output Format Return a tuple with two integers. The first integer is the number of complete groups that can be formed, and the second integer is the number of users that will be left without a group. Sample Input ``` 25 6 ``` Sample Output ``` (4, 1) ``` Explanation The users can be divided into 4 complete groups of 6 users each. There will be 1 user left without a group.","solution":"from typing import Tuple def userGroups(totalUsers: int, groupSize: int) -> Tuple[int, int]: Determines the number of complete groups and the number of leftover users. Parameters: totalUsers (int): The total number of users. groupSize (int): The desired size for each group. Returns: Tuple[int, int]: A tuple where the first element is the number of complete groups and the second element is the number of leftover users. completeGroups = totalUsers // groupSize leftoverUsers = totalUsers % groupSize return (completeGroups, leftoverUsers)"},{"question":"Given an encoded string, your task is to decode it. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. You may assume that the input string is always valid and consists of digits, letters, and square brackets only. The number k is guaranteed to be a positive integer. Implement a function `decodeString` that will decode the given encoded string. Input: - A single line containing the encoded string s (1 ≤ |s| ≤ 30). - The input string is guaranteed to be well-formed with matching brackets, and the number k is always a non-zero positive integer. Output: - A single string which is the decoded version of the input string. Assumptions: - You can assume that the input string does not contain any nested encoded strings, i.e., you will only need to handle one level of brackets at most. Example Input ``` 3[a]2[bc] ``` Output ``` aaabcbc ``` Example Input ``` 3[a2[c]] ``` Output ``` accaccacc ``` Example Input ``` 2[abc]3[cd]ef ``` Output ``` abcabccdcdcdef ``` Note: - The input string is always non-empty and contains only valid patterns according to the described encoding rules. - For each test case, your output should be a single line containing the decoded string.","solution":"def decodeString(s): stack = [] for char in s: if char != \']\': stack.append(char) else: substr = \\"\\" while stack and stack[-1] != \'[\': substr = stack.pop() + substr stack.pop() # remove the \'[\' k = \\"\\" while stack and stack[-1].isdigit(): k = stack.pop() + k stack.append(int(k) * substr) return \'\'.join(stack)"},{"question":"David is working on a text editor and needs to implement a feature for detecting specific code patterns within a document. The editor can perform a basic static analysis to identify function definitions based on curly braces. A function definition is identified as follows: - The start of a function definition is marked by an opening curly brace `{`. - The end of a function definition is marked by a closing curly brace `}`. A valid function definition means every opening brace has a corresponding closing brace that comes after it, properly nested. Write a program to check if a given string containing only curly braces is a valid set of function definitions. ------ Input Format ------ The input contains a single string `S` consisting of `{` and `}`. ------ Output Format ------ Output a single string: `YES` if the string represents valid function definitions; otherwise, output `NO`. ------ Constraints ------ - The length of the string `S` (1 ≤ |S| ≤ 10⁴) ------ Sample Input 1 ------ {}{}}{{{} ------ Sample Output 1 ------ NO ------ Sample Input 2 ------ {}{}{{{}} ------ Sample Output 2 ------ YES ------ Explanation ------ In test case 1, there is an unmatched closing brace between the second and third braces. In test case 2, each opening brace has a corresponding closing brace, and all are nested correctly.","solution":"def is_valid_function_definition(S): Checks if the string S contains valid function definitions based on curly braces. Parameters: - S: str: The input string consisting of `{` and `}`. Returns: - str: \'YES\' if the string represents valid function definitions; otherwise, \'NO\'. stack = [] for char in S: if char == \'{\': stack.append(char) elif char == \'}\': if not stack: return \'NO\' stack.pop() return \'YES\' if not stack else \'NO\'"},{"question":"Alice has a set of `n` integers. She wants to encode these integers into a concise string format so that she can easily store and transmit the set to her friends. The encoding should capitalize on the run-length encoding technique where consecutive occurrences of the same value are recorded as a single integer followed by its count. Write a function that takes a list of integers and returns its run-length encoding. -----Input----- The input is given as a single line of space-separated integers. The first integer, `n` (1 ≤ n ≤ 10^5), represents the number of integers in the list. The following n integers are the elements of the list. Each integer in the list `a` (1 ≤ a_i ≤ 100) represents an element in Alice\'s set. -----Output----- Output a single string that represents the encoded version of the list using run-length encoding. Each encoded segment should be in the format \\"value*count\\", and segments should be concatenated without any separators. -----Examples----- Input 6 1 1 2 2 2 3 Output 1*2 2*3 3*1 Input 5 4 4 4 4 4 Output 4*5","solution":"def encode_run_length(n, integers): Return run-length encoding of the given list of integers. Parameters: n (int): Number of integers integers (List[int]): The list of integers Returns: str: A run-length encoding string if n == 0: return \\"\\" encoded_list = [] current_value = integers[0] current_count = 1 for i in range(1, n): if integers[i] == current_value: current_count += 1 else: encoded_list.append(f\\"{current_value}*{current_count}\\") current_value = integers[i] current_count = 1 encoded_list.append(f\\"{current_value}*{current_count}\\") return \\" \\".join(encoded_list) def main(): input_str = input().strip() input_list = list(map(int, input_str.split())) n = input_list[0] integers = input_list[1:] print(encode_run_length(n, integers)) if __name__ == \\"__main__\\": main()"},{"question":"Serena loves playing with arrays and has recently come up with an interesting problem. She defines a subsequence as a sequence that can be derived from another sequence by deleting some elements (possibly none) without changing the order of the remaining elements. Serena has an array of integers and is curious about finding the length of the longest increasing subsequence (LIS) in the array. The LIS is a subsequence of the array where each element is strictly greater than the preceding one. Can you help Serena find the length of the longest increasing subsequence for multiple test cases? -----Input----- The first line contains a single integer ( t ) (( 1 leq t leq 50 )) — the number of test cases. The first line of each test case contains an integer ( n ) (( 1 leq n leq 1000 )) — the number of elements in the array. The second line of each test case contains ( n ) space-separated integers ( a_1, a_2, dots, a_n ) (( 1 leq a_i leq 10^4 )) — the elements of the array. -----Output----- For each test case, output one integer — the length of the longest increasing subsequence. -----Example----- Input 2 6 5 8 3 7 9 1 5 2 2 2 2 2 Output 3 1 -----Note----- In the first test case, one of the longest increasing subsequences is [5, 7, 9], hence the length is 3. In the second test case, the longest increasing subsequence can only be any single element, since all elements are identical, so the length is 1.","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) def process_multiple_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(length_of_lis(arr)) return results"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Given a string of integers in ascending order separated by a single space, determine the missing number in the sequence. The range will always have one integer missing. Example Input 1 2 3 5 6 Output 4","solution":"def find_missing_number(s): Given a string of integers in ascending order separated by a single space, determine the missing number in the sequence. numbers = list(map(int, s.split())) for i in range(1, len(numbers)): if numbers[i] != numbers[i - 1] + 1: return numbers[i - 1] + 1 return -1 # This should never happen given the problem constraints"},{"question":"A delivery service company needs to optimize the delivery routes for its vehicles. Each delivery route can be seen as a path on an undirected graph where nodes represent locations and edges represent the roads connecting these locations. Each road has a given non-negative weight representing the time required to travel that road. The company wants to know if it\'s possible to find a set of roads that connects all locations such that the maximum weight of any road in this set is minimized. This is known as minimizing the time of the longest single segment in a delivery route that connects all locations. Given such a graph with `N` nodes and `M` edges, your task is to determine the minimum possible maximum weight using any set of roads that connects all locations. ------ Input Format ------ - The first line contains two integers `N` and `M`, the number of nodes and edges in the graph respectively. - The next `M` lines each contain three integers `u`, `v`, and `w`, denoting an edge between nodes `u` and `v` with weight `w`. ------ Output Format ------ - Print a single integer, the minimum possible maximum weight of any set of roads that connects all nodes. If it\'s not possible to connect all nodes, print -1. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v ≤ N 0 ≤ w ≤ 10^9 - u ≠ v ----- Sample Input 1 ------ 4 5 1 2 1 2 3 4 3 4 5 1 3 3 2 4 2 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ We can connect all nodes with the edges of weights ([1, 3, 2]). The maximum weight among these edges is `3` which is the minimized maximum weight for any set of roads that connects all the nodes.","solution":"def find_min_max_weight(N, M, edges): Function to find the minimum possible maximum weight of any set of roads that connects all nodes. N: Number of nodes M: Number of edges edges: List of tuples where each tuple contains (u, v, w) denoting an edge between nodes u and v with weight w. Returns: The minimum possible maximum weight of any set of roads that connects all nodes or -1 if it\'s not possible. parent = list(range(N + 1)) rank = [0] * (N + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 edges.sort(key=lambda x: x[2]) max_weight = -1 for u, v, w in edges: if find(u) != find(v): union(u, v) max_weight = max(max_weight, w) N -= 1 if N == 1: return max_weight return -1 # Parsing input for testing purpose def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") N, M = map(int, input_lines[0].split()) edges = [tuple(map(int, line.split())) for line in input_lines[1:]] return N, M, edges"},{"question":"Pepper\'s Challenge is a classic puzzle game where a player navigates a character through a grid by issuing directional commands. The player can move up, down, left, or right, but can only step on designated safe cells, not on obstacle cells. The challenge is to find whether a path exists from the start cell to the end cell within the grid. # Input The `pepper_path` function will take three arguments: 1. A grid represented as a list of strings, where each string represents a row of the grid. - \'S\' denotes the start cell. - \'E\' denotes the end cell. - \'.\' denotes a safe cell to step on. - \'#\' denotes an obstacle cell. 2. The number of rows in the grid (an integer). 3. The number of columns in the grid (an integer). You may assume that there is exactly one \'S\' and one \'E\' in the grid, and they are always reachable. # Output Return `\'Path exists\'` if there is a valid path from the start cell to the end cell, considering the movement rules; otherwise, return `\'Path does not exist\'`. # Example Input ``` grid = [\\"S....#\\", \\"...#\\", \\"...#E#\\", \\"....\\", \\"......\\"] rows = 5 columns = 6 ``` Output ``` \'Path exists\' ``` Input ``` grid = [\\"S....#\\", \\"..#E\\", \\"...#.#\\", \\"....\\", \\"......\\"] rows = 5 columns = 6 ``` Output ``` \'Path does not exist\' ``` # Constraints - The grid will be at most 20 rows by 20 columns. - The cells are indexed from 0 (top-left corner) to n-1) (bottom-right corner). # Note - Your implementation should perform efficiently within the given constraints. - Make sure to account for all possible edge cases in your logic. # Function signature ```python def pepper_path(grid: List[str], rows: int, columns: int) -> str: ```","solution":"from typing import List def pepper_path(grid: List[str], rows: int, columns: int) -> str: def find_start_end_positions(): start = end = None for i in range(rows): for j in range(columns): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) return start, end def is_valid(x, y): return 0 <= x < rows and 0 <= y < columns and grid[x][y] != \'#\' def dfs(x, y): if not is_valid(x, y) or (x, y) in visited: return False if (x, y) == end_pos: return True visited.add((x, y)) for dx, dy in directions: if dfs(x + dx, y + dy): return True return False start_pos, end_pos = find_start_end_positions() if not start_pos or not end_pos: return \'Path does not exist\' visited = set() directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right if dfs(start_pos[0], start_pos[1]): return \'Path exists\' else: return \'Path does not exist\'"},{"question":"A company has a data center consisting of M servers arranged in a row. Each server has a certain load, indicating the number of tasks it is currently handling. The company needs to continuously monitor the load on these servers to ensure no server becomes overloaded. To help with this, the company wants to process several queries to determine the load on servers within a specific range. Each query is defined by two integers, L and R, which specify the range of servers. Your task is to implement a solution that allows the company to quickly respond to these queries by providing the total load on the servers within the specified range. Input The first line contains integers M and K denoting the number of servers and the number of queries respectively. The next line contains M integers denoting the load of each server. K lines follow, each containing two integers L and R. Output For each query, print the total load on the servers within the specified range. Constraints 1 ≤ M ≤ 100,000 0 ≤ Load ≤ 10,000 1 ≤ K ≤ 100,000 1 ≤ L ≤ R ≤ M SAMPLE INPUT 6 3 10 20 30 40 50 60 1 3 2 5 1 6 SAMPLE OUTPUT 60 140 210","solution":"def process_queries(M, K, loads, queries): # Create a prefix sum array to calculate range sum efficiently prefix_sum = [0] * (M + 1) for i in range(1, M + 1): prefix_sum[i] = prefix_sum[i - 1] + loads[i - 1] result = [] # Process each query for L, R in queries: total_load = prefix_sum[R] - prefix_sum[L - 1] result.append(total_load) return result"},{"question":"During Halloween night, children in a neighborhood go trick-or-treating and collect candies from various houses. Each house gives out a fixed number of candies, but the children can visit different houses at most once. Given a list of houses and the number of candies they give, help a child determine the maximum number of candies they can collect by visiting exactly `k` different houses. Input: - The first line contains two space-separated integers `n` and `k` (1 ≤ k ≤ n ≤ 1000) — the number of houses and the number of houses the child can visit, respectively. - The second line contains `n` space-separated integers `ci` (1 ≤ ci ≤ 1000), where `ci` is the number of candies given by the i-th house. Output: - Print a single integer — the maximum number of candies the child can collect by visiting exactly `k` houses. Example: Input: 5 3 2 3 1 5 4 Output: 12","solution":"def maximum_candies(n, k, candies): Returns the maximum number of candies a child can collect by visiting exactly k houses. Parameters: n (int): Number of houses. k (int): Number of houses the child can visit. candies (list of int): List of the number of candies each house gives. Returns: int: Maximum number of candies collected. # Sort the list of candies in descending order candies.sort(reverse=True) # Sum the k highest values return sum(candies[:k])"},{"question":"A group of developers is tasked with optimizing the server response times for a web application. To achieve this, they want to distribute the incoming requests to different servers based on the response times of the servers. Each server\'s response time can be modeled as a sequence of integers, where each integer represents the response time in milliseconds for a particular request. The developers want to assign requests to servers such that: - Each server receives at least one request. - The maximum response time across all servers is minimized. - If there are multiple ways to achieve this, the minimum response time across all servers is maximized. - If there are still multiple ways to achieve this, the distribution that balances the load (i.e., minimizes the difference between the server with the maximum number of requests and the server with the minimum number of requests) is preferred. You are given the number of servers `m` and a list of `n` integers representing the response times of all requests. Distribute the requests among the servers following the criteria above. Input: - The first line contains two integers `n` (3 ≤ n ≤ 3000) and `m` (2 ≤ m ≤ 300). - The second line contains `n` integers representing the response times of the requests. Output: - Output `n` integers, where the i-th integer is the 1-based index of the server to which the i-th request is assigned. If there are multiple optimal solutions, print any of them. It is guaranteed that the answer always exists. Examples Input 7 3 5 3 9 1 6 2 8 Output 3 1 3 2 1 2 1 Input 6 2 3 7 2 5 6 1 Output 2 2 1 1 2 1","solution":"def distribute_requests(n, m, response_times): Distribute the requests to the servers following the given conditions to minimize the maximum response time, maximize the minimum response time, and balance the requests load. # Sort the request with indices attached requests = sorted([(response_time, i) for i, response_time in enumerate(response_times)], reverse=True) # Initialize the servers servers = [[] for _ in range(m)] server_loads = [0] * m # To keep track of load on each server for response_time, index in requests: # Assign to the server with the minimum load min_loaded_server = min(range(m), key=lambda k: server_loads[k]) servers[min_loaded_server].append(index) server_loads[min_loaded_server] += response_time result = [0] * n for server_index, server_requests in enumerate(servers): for request in server_requests: result[request] = server_index + 1 # 1-based index return result # Example usage: # n, m = 7, 3 # response_times = [5, 3, 9, 1, 6, 2, 8] # print(distribute_requests(n, m, response_times))"},{"question":"Given an integer n, the task is to determine if it\'s possible to represent n as a sum of exactly two distinct prime numbers. Return true if possible, otherwise, return false. Example 1: Input: n = 10 Output: True Explanation: 10 can be represented as 3 + 7, where both 3 and 7 are prime numbers. Example 2: Input: n = 11 Output: False Explanation: 11 cannot be represented as the sum of two distinct prime numbers. Your Task: Complete the function isSumOfTwoPrimes(n) which takes an integer n as input and returns true if n can be expressed as the sum of two distinct prime numbers, otherwise, returns false. Expected Time Complexity: O(n * sqrt(n)/log(n)) [Appropriate for checking prime status] Expected Space Complexity: O(n) Constraints: 1 <= n <= 10^6","solution":"def is_prime(num): Return True if num is a prime number, else False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def isSumOfTwoPrimes(n): Return True if n can be represented as the sum of two distinct prime numbers, otherwise, return False. for i in range(2, n // 2 + 1): if is_prime(i) and is_prime(n - i) and i != n - i: return True return False"},{"question":"# Definition A **_balanced number_** is defined as a number where the sum of the digits to the left of the middle digit(s) is equal to the sum of the digits to the right of the middle digit(s). If the number has an even number of digits, consider the middle as the point between the two central digits. ____ # Task **_Given_** an *integer* **n**, **_Determine_** if the number is balanced and **_return_** *a boolean value*. ___ # Notes * **_n_** will **_always be at least a 3-digit number_**. * **_n_** will **_not have leading zeros_**. * **_You can assume that the integer n_** will be **_positive_**. ___ # Input >> Output Examples ``` isBalancedNumber(12321) ==> return true ``` **_Explanation_**: * The left side of the middle digit is `12`, and the right side is `21`. * `1 + 2` is equal to `2 + 1`. ___ ``` isBalancedNumber(123321) ==> return true ``` **_Explanation_**: * The left side of the middle point is `123`, and the right side is `321`. * `1 + 2 + 3` is equal to `3 + 2 + 1`. ____ ``` isBalancedNumber(456787) ==> return false ``` **_Explanation_**: * The left side of the middle point is `456`, and the right side is `787`. * `4 + 5 + 6` is not equal to `7 + 8 + 7`. ___ ``` isBalancedNumber(789987) ==> return true ``` **_Explanation_**: * The left side of the middle point is `789`, and the right side is `987`. * `7 + 8 + 9` is equal to `9 + 8 + 7`.","solution":"def isBalancedNumber(n): Determines if a number is balanced, meaning the sum of the digits to the left of the middle digit(s) is equal to the sum of the digits to the right of the middle digit(s). Parameters: n (int): The number to check Returns: bool: True if the number is balanced, False otherwise str_n = str(n) length = len(str_n) if length % 2 == 0: left_sum = sum(int(str_n[i]) for i in range(length // 2)) right_sum = sum(int(str_n[i]) for i in range(length // 2, length)) else: left_sum = sum(int(str_n[i]) for i in range(length // 2)) right_sum = sum(int(str_n[i]) for i in range(length // 2 + 1, length)) return left_sum == right_sum"},{"question":"You are given a string `S` of length `N` consisting of lowercase English letters. Chef wants to create a palindromic string from `S` by rearranging its characters. A string is called palindromic if it reads the same forward and backward. Chef also wants to maximize the number of distinct palindromic substrings present in the final string. Your task is to decide whether it is possible to rearrange the characters to create such a palindromic string, and if so, find one such rearrangement. A substring is defined as a contiguous sequence of characters within a string. For example, if the given string is `aabb`, one possible rearrangement that creates a palindromic string is `abba`. This string contains the following distinct palindromic substrings: `a`, `b`, `b`, `a`, `bb`, `abba`. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line of each test case contains the string S of length N. ------ Output ------ For each test case: If it is impossible to rearrange the string to create a palindromic string, print a single line containing the integer `-1`. Otherwise, print a single line containing the rearranged palindromic string. If multiple answers are possible, you may print any one of them. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} S consists of lowercase English letters ----- Sample Input 1 ------ 3 4 aabb 5 abcde 6 aaaaaa ----- Sample Output 1 ------ abba -1 aaaaaa ----- Explanation 1 ------ Example case 1: The rearranged palindromic string `abba` contains the maximum number of distinct palindromic substrings, including `a`, `b`, `b`, `a`, `bb`, `abba`. Example case 2: It is impossible to rearrange `abcde` to form a palindromic string as it does not have a symmetric character composition. Example case 3: The given string `aaaaaa` is already a palindrome and contains the maximum number of distinct palindromic substrings.","solution":"from collections import Counter def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. counter = Counter(s) odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1 def rearrange_to_palindrome(s): Rearranges a given string to form a palindrome if possible, otherwise returns -1. if not can_form_palindrome(s): return \\"-1\\" counter = Counter(s) half_palindrome = [] middle = \\"\\" for char, count in counter.items(): if count % 2 != 0: middle = char half_palindrome.extend(char * (count // 2)) half_str = \'\'.join(half_palindrome) return half_str + middle + half_str[::-1] def process_test_cases(T, test_cases): results = [] for i in range(T): N, S = test_cases[i] result = rearrange_to_palindrome(S) results.append(result) return results"},{"question":"A group of explorers are on a quest to recover a lost treasure deep within a magical forest. The forest can be represented as a 2D grid of size MxN, where each cell has a certain amount of gold coins. The starting point for the explorers is the top-left cell (0, 0) and the treasure is at the bottom-right cell (M-1, N-1). Each explorer carries a bag that can hold an unlimited number of gold coins. They can move right or down at each step. Write a program to help the explorers find the maximum number of gold coins they can collect on their way from the starting point to the treasure. ------ Input ------ The first line contains two integers M and N, denoting the dimensions of the grid. The following M lines each contain N integers, representing the number of gold coins in each cell of the grid. ------ Output ------ Print the maximum number of gold coins that can be collected. ------ Constraints ------ 1 ≤ M, N ≤ 1000 0 ≤ G_{ij} ≤ 100 ----- Sample Input 1 ------ 3 3 1 3 1 1 5 1 4 2 1 ----- Sample Output 1 ------ 12 ----- Explanation 1 ------ The path to collect the maximum number of gold coins is (0,0) → (0,1) → (1,1) → (2,1) → (2,2), collecting a total of 1 + 3 + 5 + 2 + 1 = 12 gold coins.","solution":"def max_gold_coins(grid): M = len(grid) N = len(grid[0]) # Create a dp table to store the maximum coins up to each cell dp = [[0]*N for _ in range(M)] dp[0][0] = grid[0][0] # Starting point # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from the top) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[M-1][N-1] def read_input_and_solve(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) grid = [] idx = 2 for i in range(M): row = [] for j in range(N): row.append(int(data[idx])) idx += 1 grid.append(row) print(max_gold_coins(grid))"},{"question":"Matthew is fascinated by sequences. Today, he wants to experiment with a new type of sequence called the \\"Diff-K Sequence.\\" A sequence is said to be a \\"Diff-K Sequence\\" if the absolute difference between every two consecutive elements is less than or equal to K. Now, Matthew wants to check if a given array is a Diff-K Sequence. Your task is to write a program that determines if the given array satisfies the Diff-K condition for a given integer K. # Input - The first line of the input contains two integers n (1 ≤ n ≤ 100,000) and K (0 ≤ K ≤ 1,000,000) where n is the number of elements in the array and K is the maximum allowed absolute difference between consecutive elements. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the array. # Output Print \\"YES\\" if the given array is a Diff-K Sequence, otherwise print \\"NO\\". # Examples Input ``` 5 2 1 3 5 4 2 ``` Output ``` YES ``` Input ``` 4 1 4 6 2 3 ``` Output ``` NO ``` # Note In the first example, the differences between consecutive elements are |3-1|=2, |5-3|=2, |5-4|=1 and |4-2|=2, all of which are ≤ 2, so the answer is \\"YES\\". In the second example, the difference between 4 and 6 is |6-4|=2 which is greater than the allowed K=1, so the answer is \\"NO\\".","solution":"def is_diff_k_sequence(n, k, arr): Returns \\"YES\\" if the array is a Diff-K Sequence, otherwise \\"NO\\". for i in range(1, n): if abs(arr[i] - arr[i-1]) > k: return \\"NO\\" return \\"YES\\""},{"question":"A company is organizing a coding marathon where coders from different teams participate. To motivate coders, the company decides to give out badges. Each badge is numbered from 1 to B. The badges are distributed in a sequence among the coders. There are N coders standing in a line and the company starts distributing badges from the first coder. Each coder gets 1 badge at a time in sequential order. When the badge number reaches B, the next badge will again start from 1 and the process continues. Your task is to determine the badge number that the last coder receives. Input: The first line contains T, the number of test cases. Each of the next T lines contains two integers, N (number of coders) and B (total number of badges). Output: For each test case, print the badge number that the N-th coder receives. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 1 ≤ B ≤ 10^9 Example Input: 2 5 8 10 3 Example Output: 5 1","solution":"def find_last_badge(T, test_cases): For each test case, determine the badge number that the N-th coder receives. Args: T : int : Number of test cases test_cases : list of tuples : Each tuple contains two integers N (number of coders) and B (total number of badges) Returns: list : Badge number received by the N-th coder for each test case results = [] for N, B in test_cases: last_badge = N % B if last_badge == 0: last_badge = B results.append(last_badge) return results"},{"question":"# Find the Missing Number Given an array `nums` consisting of `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array. # Example: ``` Input: nums = [3, 0, 1] Output: 2 ``` Explanation: `n` is 3 since there are 3 numbers, so all numbers are in the range `[0, 3]`. 2 is the missing number in the range since it does not appear in the array. # Example: ``` Input: nums = [0, 1] Output: 2 ``` Explanation: `n` is 2, so all numbers are in the range `[0, 2]`. 2 is the missing number. # Example: ``` Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 ``` Explanation: `n` is 9, so all numbers are in the range `[0, 9]`. 8 is the missing number. # Constraints: - The input array length will be `n` and the elements in the array are distinct and in the range `[0, n]`. - You must solve the problem with linear runtime complexity and use only constant extra space. Implement the function `missing_number(nums: List[int]) -> int:` Happy coding and enjoy solving the problem!","solution":"def missing_number(nums): Given an array nums consisting of n distinct numbers in the range [0, n], return the only number in the range that is missing from the array. n = len(nums) total_sum = n * (n + 1) / 2 return int(total_sum - sum(nums))"},{"question":"Task Create a function that computes the sum of two numbers represented as linked lists. In these linked lists, each node contains a single digit of the number, and the digits are stored in reverse order, meaning that the 1\'s digit is at the head of the list. Input Two linked lists `l1` and `l2` that represent two non-negative integers. Each node contains a single digit, and the digits are stored in reverse order. Output A linked list representing the sum of the two numbers. The digits are stored in reverse order. Example ```python # Given linked list representation of 342: 2 -> 4 -> 3 l1 = ListNode(2) l1.next = ListNode(4) l1.next.next = ListNode(3) # Given linked list representation of 465: 5 -> 6 -> 4 l2 = ListNode(5) l2.next = ListNode(6) l2.next.next = ListNode(4) # Expected output linked list: 7 -> 0 -> 8 (representing 807) result = addTwoNumbers(l1, l2) # Function to print the linked list for verification def printList(node): while node: print(node.val, end=\' \') node = node.next printList(result) ``` Output: ``` 7 0 8 ``` The sum of 342 and 465 is 807, and the linked list representation of this sum in reverse order is 7 -> 0 -> 8. Constraints - The input linked lists are non-empty. - The digits in the linked list are non-negative integers from 0 to 9. - The input linked lists are of the type `ListNode` defined as follows: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Function Signature ```python def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode: ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode() current = dummy carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy.next"},{"question":"You are given a sequence of integers. You need to find a contiguous subarray which has the maximum sum and print its sum as well as the indices where the subarray starts and ends (1-based indexing). If there are multiple subarrays with the maximum sum, print the one with the smallest starting index. If there\'s still a tie, print the one with the smallest ending index. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the elements of the array. Output Output three integers: the maximum sum, and the starting and ending indices of the subarray with the maximum sum. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 4 7 Input 5 1 2 3 4 -10 Output 10 1 4","solution":"def max_subarray_sum(arr): Finds the contiguous subarray with the largest sum and returns the sum and the 1-based start and end indices. n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start = 0 best_start = 0 best_end = 0 for i in range(n): if current_sum <= 0: current_sum = arr[i] start = i else: current_sum += arr[i] if current_sum > max_sum or (current_sum == max_sum and (i - start < best_end - best_start)): max_sum = current_sum best_start = start best_end = i return max_sum, best_start + 1, best_end + 1"},{"question":"A company is developing an advanced robotic arm that can precisely manipulate objects in a grid-like workspace. The robotic arm can move between grid cells based on specific movement rules, and the initial and target positions are given within the grid. We need your help to create an algorithm to determine the minimum number of moves required for the robotic arm to reach the target position from the initial position. In this problem, the grid is represented as an M x N matrix where the top-left corner is (1, 1) and the bottom-right corner is (M, N). The robot can move in the following directions: - Up (U) - Down (D) - Left (L) - Right (R) Given the starting position (si, sj) and the target position (ti, tj), determine the minimum number of moves required for the robotic arm to reach the target. Input Format The first line contains two integers M and N, denoting the grid\'s dimensions. The second line contains four integers, si, sj, ti, and tj, representing the initial and target positions respectively (1-indexed). Output Format Output a single integer, representing the minimum number of moves required to reach the target position from the initial position. Constraints - 1 ≤ M, N ≤ 1000 - 1 ≤ si, sj, ti, tj ≤ M, N Example Input 1 5 5 1 1 5 5 Example Output 1 8 Explanation 1 The minimum number of moves required for the robotic arm to move from (1, 1) to (5, 5) is 8, by moving right and down in any combination until the target is reached. Example Input 2 5 5 3 3 1 1 Example Output 2 4 Explanation 2 The minimum number of moves required for the robotic arm to move from (3, 3) to (1, 1) is 4, by moving left and up in any combination until the target is reached.","solution":"def min_moves(M, N, si, sj, ti, tj): Determine the minimum number of moves required for the robotic arm to reach the target position from the initial position. Parameters: M (int): Number of rows in the grid N (int): Number of columns in the grid si (int): Starting row position (1-indexed) sj (int): Starting column position (1-indexed) ti (int): Target row position (1-indexed) tj (int): Target column position (1-indexed) Returns: int: Minimum number of moves required to reach the target position from the initial position return abs(ti - si) + abs(tj - sj)"},{"question":"Given an integer array nums and an integer k. A \\"k-famous\\" subarray is a contiguous subarray whose length is at least k and all its elements have the same value. Find the length of the longest \\"k-famous\\" subarray, or print -1 if no such subarray exists. ----- Input Format ----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains two integers n and k, where n is the number of elements in the array nums, and k is the minimum length required for the subarray. - The second line contains n integers representing the elements of the array nums. ----- Output Format ----- For each test case, find the length of the longest \\"k-famous\\" subarray and print it. If no such subarray exists, print -1. ----- Constraints ----- 1 ≤ T ≤ 10^3 1 ≤ n ≤ 10^5 1 ≤ k ≤ n 1 ≤ nums[i] ≤ 10^4 ----- Sample Input 1 ----- 2 7 3 1 1 2 2 2 2 3 5 2 5 5 5 1 1 ----- Sample Output 1 ----- 4 3 ----- Explanation 1 ----- Test case 1: The longest \\"k-famous\\" subarray with length at least 3 is [2, 2, 2, 2], which has length 4. Test case 2: The longest \\"k-famous\\" subarray with length at least 2 is [5, 5, 5], which has length 3.","solution":"def longest_k_famous_subarray(n, k, nums): max_length = -1 current_length = 1 for i in range(1, n): if nums[i] == nums[i - 1]: current_length += 1 else: if current_length >= k: max_length = max(max_length, current_length) current_length = 1 if current_length >= k: max_length = max(max_length, current_length) return max_length def process_input(test_cases): results = [] for test in test_cases: n, k, nums = test results.append(longest_k_famous_subarray(n, k, nums)) return results"},{"question":"Write a function that takes a nested dictionary and a target value, returns `true/false` depending on whether the value exists within the dictionary (including all nested dictionaries). Example: ```python nested_dict = { \'a\': { \'b\': 2, \'c\': { \'d\': 3, \'e\': 4 }, }, \'f\': 5 }; contains_value(nested_dict, 4); // should return true contains_value(nested_dict, 1); // should return false contains_value(nested_dict, 5); // should return true ```","solution":"def contains_value(d, target): Returns True if the target value exists within the dictionary, including nested dictionaries. Otherwise, returns False. for key, value in d.items(): if isinstance(value, dict): if contains_value(value, target): return True elif value == target: return True return False"},{"question":"In the Kingdom of Trophonia, there are N magical towers lined up in a straight line. Each tower has a certain power level, represented by an integer in an array P. The king wants to appoint a powerful wizard to control some of the towers from left to right. The wizard will start at the first tower (index 1) and move to the last tower (index N). The wizard can only move to the next tower if the power of that tower is greater than the power of the current tower. The wizard\'s strength is defined by the number of towers he can consecutively visit in this manner. You are given the array P representing the power levels of the N magical towers. Your task is to determine the maximum strength of the wizard, i.e., the maximum number of towers he can consecutively visit starting from any tower. # Input The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains a single integer N (the number of towers). The second line of each test case contains N space-separated integers P1, P2, ..., PN, the power levels of the towers. # Output For each test case, output a single integer denoting the maximum strength of the wizard in a separate line. # Constraints * 1 ≤ T ≤ 10 * 1 ≤ N ≤ 10^5 * 1 ≤ Pi ≤ 10^9 # Example Input: ``` 2 5 1 2 3 2 5 4 4 3 2 1 ``` Output: ``` 3 1 ``` # Explanation: Example case 1: The maximum strength is achieved by visiting towers with power levels [1, 2, 3], starting from the first tower. Example case 2: The wizard can only visit any individual tower, as each subsequent tower has a lower power level than the previous one.","solution":"def max_strength_of_wizard(T, test_cases): results = [] for i in range(T): N, P = test_cases[i] max_strength = 1 current_strength = 1 for j in range(1, N): if P[j] > P[j-1]: current_strength += 1 else: max_strength = max(max_strength, current_strength) current_strength = 1 max_strength = max(max_strength, current_strength) results.append(max_strength) return results"},{"question":"Write an efficient algorithm to calculate the difference between the maximum and minimum values of all possible subarrays of a given array. ------ Input ------ The input consists of two parts: 1. The first line contains an integer N, the number of elements in the array. 2. The second line contains N integers, the elements of the array. ------ Output ------ Output a single integer representing the difference between the maximum and minimum values of all possible subarrays. ------ Constraints ------ 1 ≤ N ≤ 2 times 10^3 -10^6 ≤ A[i] ≤ 10^6 ------ Sample Input 1 ------ 3 4 1 3 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ For the array [4, 1, 3], the subarrays are: [4], [1], [3], [4, 1], [1, 3], [4, 1, 3]. The maximum value among these subarrays is 4 (from [4]), the minimum value is 1 (from [1]). Hence, the difference is 4 - 1 = 3. ------ Sample Input 2 ------ 4 10 2 5 7 ------ Sample Output 2 ------ 8 ------ Explanation 2 ------ For the array [10, 2, 5, 7], the subarrays are: [10], [2], [5], [7], [10, 2], [2, 5], [5, 7], [10, 2, 5], [2, 5, 7], [10, 2, 5, 7]. The maximum value among these subarrays is 10 (from [10]), the minimum value is 2 (from [2]). Hence, the difference is 10 - 2 = 8.","solution":"def find_max_min_difference(arr): Returns the difference between the maximum and minimum values of all possible subarrays. n = len(arr) global_max = -float(\'inf\') global_min = float(\'inf\') for i in range(n): current_max = -float(\'inf\') current_min = float(\'inf\') for j in range(i, n): current_max = max(current_max, arr[j]) current_min = min(current_min, arr[j]) global_max = max(global_max, current_max) global_min = min(global_min, current_min) return global_max - global_min"},{"question":"You are given an integer array `nums` where each element represents the number of points you can earn from that element. You can perform a costly operation of deleting an element `nums[i]`, which also removes all instances of `nums[i]-1` and `nums[i]+1` from the array. After performing the operation, the cost for deleting `nums[i]` is added to your total points. Your task is to find the maximum points you can achieve by performing the above operation any number of times. Constraints: * 1 le nums.length le 10^5 * 1 le nums[i] le 10^5 Input The input consists of a single line with space-separated integers representing the array `nums`. Output Print a single integer representing the maximum points you can achieve. Examples Input 3 4 2 Output 6 Input 2 2 3 3 3 4 Output 9 Input 1 1 1 2 2 3 4 5 Output 11","solution":"def delete_and_earn(nums): Returns the maximum points that can be achieved by deleting elements and their neighbors. if not nums: return 0 points = [0] * 100001 for num in nums: points[num] += num prev1, prev2 = 0, 0 for i in range(100001): current = max(prev2 + points[i], prev1) prev2 = prev1 prev1 = current return prev1"},{"question":"You are given a list of N numbers, and your task is to group the numbers that are equal and then sort each group. Finally, print the sorted groups separately. Groups should appear in ascending order based on the smallest number in each group. # Input - The first line contains an integer N (1 ≤ N ≤ 100), the number of elements in the list. - The second line contains N integers separated by spaces. # Output - For each unique number in the list, output a sorted group of all occurrences of that number, each group on a new line. - Groups must appear in ascending order based on the smallest number in each group. # Example Input ``` 8 3 1 2 2 3 1 4 1 ``` Output ``` 1 1 1 2 2 3 3 4 ``` # Note - In the example provided, the numbers 1, 2, 3, and 4 occur in the list. You need to group and sort these occurrences and then print each group on a new line in ascending order based on the smallest number in each group.","solution":"def group_and_sort_numbers(numbers): Groups the numbers that are equal and then sorts each group. Outputs the sorted groups in ascending order based on the smallest number in each group. from collections import Counter # Count occurrences of each number count = Counter(numbers) # Get unique numbers sorted sorted_unique_numbers = sorted(count.keys()) # Create sorted groups sorted_groups = [] for num in sorted_unique_numbers: group = [num] * count[num] sorted_groups.append(\\" \\".join(map(str, group))) return sorted_groups"},{"question":"You are given an array of N integers A = [A1, A2, ..., AN] and you need to perform M operations on it. In each operation, you are given two integers L and R which represent the range from index L to R (inclusive). You need to calculate the sum of the elements within the given range for each operation. -----Constraints----- - All values in input are integers. - 1 ≤ N, M ≤ 10^5 - 1 ≤ Ai ≤ 10^6 - 1 ≤ L ≤ R ≤ N -----Input----- Input is given from Standard Input in the following format: ``` N A1 A2 ... AN M L1 R1 L2 R2 ... LM RM ``` -----Output----- Print M integers, each corresponding to the sum of the elements in the given range for each operation, in the following format: ``` S1 S2 ... SM ``` -----Sample Input----- ``` 5 1 2 3 4 5 3 1 3 2 4 1 5 ``` -----Sample Output----- ``` 6 9 15 ``` Explanation: - For the first operation, the range is from index 1 to 3. Therefore, the sum is 1+2+3 = 6. - For the second operation, the range is from index 2 to 4. Therefore, the sum is 2+3+4 = 9. - For the third operation, the range is from index 1 to 5. Therefore, the sum is 1+2+3+4+5 = 15.","solution":"def range_sum_queries(n, array, m, queries): Computes the sum of elements in the array within the given range for each query. Args: n: int, the number of elements in the array. array: list of ints, the array of integers. m: int, the number of queries. queries: list of tuples, where each tuple contains two integers (L, R) representing the range. Returns: list of ints, the sums of the elements in the ranges specified by the queries. # Precompute prefix sums prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] results = [] for L, R in queries: results.append(prefix_sum[R] - prefix_sum[L - 1]) return results"},{"question":"The cosmic observatory at Planet Zilon has recently developed advanced telescopes that can track movements within their star system with unparalleled accuracy. However, the observatory members have noticed a peculiar phenomenon: certain stars appear to be moving in a strictly linear fashion, while others seem to move randomly. To study this, they need to identify all sets of three stars that are collinear, i.e., all fall on the same straight line. Given the coordinates of stars in their system, your task is to write a program to find all unique sets of three stars that are collinear. Input: The first line will contain an integer T, the number of test cases. Each test case will contain an integer N, the number of stars. The next N lines will each contain two integers X[i] and Y[i], denoting the X and Y coordinates of the ith star. Output: For each test case, output all unique sets of three collinear stars. Each set should be output in lexicographical order based on their coordinates. If there are no sets of three collinear stars, output \\"No collinear sets found\\". Each set of three stars should be printed on a new line. Print a blank line after outputs of each test case. Constraints: 1 ≤ T ≤ 5 3 ≤ N ≤ 300 -10^4 ≤ X[i], Y[i] ≤ 10^4 SAMPLE INPUT 1 5 1 1 2 2 3 3 1 2 2 3 SAMPLE OUTPUT (1, 1) (2, 2) (3, 3) Explanation In this example, the only set of three collinear stars are (1, 1), (2, 2), and (3, 3).","solution":"from itertools import combinations from fractions import Fraction def find_collinear_stars(stars): Function to find all unique sets of three collinear stars. def is_collinear(p1, p2, p3): return (p2[1] - p1[1]) * (p3[0] - p2[0]) == (p3[1] - p2[1]) * (p2[0] - p1[0]) collinear_sets = set() for combo in combinations(stars, 3): if is_collinear(combo[0], combo[1], combo[2]): sorted_combo = tuple(sorted(combo)) collinear_sets.add(sorted_combo) return sorted(collinear_sets) def process_test_cases(T, test_cases): Process the test cases and return the results. results = [] for case in test_cases: N, stars = case collinear_sets = find_collinear_stars(stars) if collinear_sets: for star_set in collinear_sets: results.append(\\" \\".join([f\\"({x}, {y})\\" for (x, y) in star_set])) else: results.append(\\"No collinear sets found\\") return results def main(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) stars = [] for i in range(index + 1, index + 1 + N): x, y = map(int, data[i].split()) stars.append((x, y)) test_cases.append((N, stars)) index += N + 1 results = process_test_cases(T, test_cases) for result in results: print(result) print() if __name__ == \\"__main__\\": main()"},{"question":"Shyam is working on a farming simulation and needs to automate the irrigation process for his fields. Each field is represented as a grid of N rows and M columns. The irrigation system can water all plants in any one row or any one column in one operation. Shyam wants to determine the minimum number of irrigation operations required to water all plants in the field. Input: The first line of the input contains T denoting the number of test cases. Then T lines follow, each containing two integers N and M. Output: Output the minimum number of irrigation operations needed for each test case in a separate line. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N, M ≤ 10^4 Sample Input: 2 2 3 4 4 Sample Output: 2 4 Explanation: Test case 1: 2x3 grid, the optimal strategy is to irrigate each row or each column. Watering 2 rows or 3 columns will suffice, so minimum operations needed are 2. Test case 2: 4x4 grid, since there are the same number of rows and columns, we can either choose to water all 4 rows or all 4 columns to ensure every plant is watered. Minimum operations needed are 4.","solution":"def min_irrigation_operations(t, cases): results = [] for n, m in cases: results.append(min(n, m)) return results"},{"question":"Given an array of distinct integers, find all possible subsets (the power set). Example 1: Input: nums = [1, 2, 3] Output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] Example 2: Input: nums = [0] Output: [[], [0]] Your Task: You don\'t need to read input or print anything. Complete the function generateSubsets() which takes the list nums as input parameter and returns the list of all possible subsets. Expected Time Complexity: O(2^N). Expected Auxiliary Space: O(N * 2^N), N = Size of nums. Constraints: 1 ≤ nums.length ≤ 10 -10 ≤ nums[i] ≤ 10","solution":"def generateSubsets(nums): Returns all possible subsets (the power set) of the given list of distinct integers. def backtrack(first=0, curr=[]): # If the current combination is done output.append(curr[:]) for i in range(first, len(nums)): # Add nums[i] into the current combination curr.append(nums[i]) # Use next integers to complete the combination backtrack(i + 1, curr) # Backtrack curr.pop() output = [] backtrack() return output"},{"question":"You are working with a library that is in the process of digitizing its catalog. You have been asked to design an application that helps to catalog the books and manage requests for book information. Each book in the catalog has a unique identifier and is associated with a title and an author. You are required to implement 3 types of queries: - Add a new book to the library catalog with a unique identifier ID, a string title, and a string author. - Retrieve the information of a book with a given ID. - Remove a book from the library catalog with a given ID. ----- Input ----- The first line of the input contains a single integer Q (1 leq Q leq 100000), the number of queries to be processed. The next Q lines specify the queries. Each query starts with an integer that specifies the type of query: - 1 denotes a query to add a new book and will be followed by an integer ID, a string title, and a string author. - 2 denotes a query to retrieve the information of a book and will be followed by an integer ID. - 3 denotes a query to remove a book and will be followed by an integer ID. You can assume that: - All book IDs are unique within each query of type 1. - Strings title and author are alphanumeric and contain at most 100 characters. - For retrieval and deletion queries, the provided ID is guaranteed to exist in the catalog when the query is made. ----- Output ----- For each query of type 2, output the book\'s details in the format \\"Title: {title}, Author: {author}\\". If there is no book with the given ID, output \\"Book not found\\" (without quotes). ----- Examples ----- Sample Input: 6 1 101 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 1 102 \\"1984\\" \\"George Orwell\\" 2 101 2 103 3 101 2 101 Sample Output: Title: The Great Gatsby, Author: F. Scott Fitzgerald Book not found Book not found","solution":"class LibraryCatalog: def __init__(self): self.catalog = {} def add_book(self, ID, title, author): self.catalog[ID] = { \\"title\\": title, \\"author\\": author } def get_book(self, ID): if ID in self.catalog: book = self.catalog[ID] return f\\"Title: {book[\'title\']}, Author: {book[\'author\']}\\" else: return \\"Book not found\\" def remove_book(self, ID): if ID in self.catalog: del self.catalog[ID] def process_queries(queries): library = LibraryCatalog() output = [] for query in queries: q = query.split() q_type = int(q[0]) if q_type == 1: ID = int(q[1]) title = q[2] author = q[3] library.add_book(ID, title, author) elif q_type == 2: ID = int(q[1]) output.append(library.get_book(ID)) elif q_type == 3: ID = int(q[1]) library.remove_book(ID) return output"},{"question":"Tim is a software developer who works on multiple projects. He decides to use a priority queue to manage the projects he needs to work on. Each project has a specific priority level associated with it, and Tim\'s priority queue works as follows: - Tim always works on the project with the highest priority. - If there are multiple projects with the same highest priority, Tim works on the one that was added to the queue earliest. - Whenever a new project is added to the queue, it might change the order in which Tim works on the projects. You need to simulate this scenario and determine the order in which Tim will complete all the projects. -----Input----- The first line of input contains a single integer n (1 le n le 100) — the number of projects. The following n lines each contain two integers p_i and t_i (1 le p_i le 10^6, 1 le t_i le 10^6), representing the priority and the time when the project was added to the queue, respectively. The projects are given in the order they were added to the queue. -----Output----- Output n lines, where the i-th line contains two integers p_i and t_i, representing the priority and the time when the project is worked on by Tim. The output should be in the order Tim will work on the projects. -----Examples----- Input 4 5 1 3 2 5 3 4 4 Output 5 1 5 3 4 4 3 2 Input 3 2 1 2 2 1 3 Output 2 1 2 2 1 3","solution":"import heapq def simulate_project_queue(n, projects): Simulates the order of projects Tim will work on based on the priority queue. Args: - n (int): The number of projects. - projects (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers: priority and time added. Returns: - List[Tuple[int, int]]: The order in which projects are worked on by Tim. # Priority Queue to store projects pq = [] # Add each project to the heap with (-priority, time) to sort by highest priority for p, t in projects: heapq.heappush(pq, (-p, t)) # Extract elements from the heap to get the correct order result = [] while pq: priority, time = heapq.heappop(pq) result.append((-priority, time)) return result"},{"question":"Design a function that evaluates a block of text in terms of vocabulary richness and diversity. The function will take in a string containing the text, and it should return a dictionary with the following metrics: 1. The total number of words in the text. 2. The number of unique words in the text. 3. The lexical diversity score, which is the ratio of unique words to the total number of words. 4. The five most common words along with their frequency counts. The function `evaluate_text` should adhere to the following specifications: # Input - A single string containing the block of text. # Output - A dictionary with the following key-value pairs: - `\'total_words\'`: Integer representing the total number of words. - `\'unique_words\'`: Integer representing the number of unique words. - `\'lexical_diversity\'`: Float representing the lexical diversity score. - `\'most_common_words\'`: List of tuples, each containing a string (word) and an integer (frequency), representing the five most common words and their frequencies. This list should be sorted by the word\'s frequency in descending order. In case of ties, words should be sorted lexicographically alphabetically. # Example ```python def evaluate_text(text: str) -> dict: # Your code here # Example usage: text = \\"hello world hello everyone in the world of programming\\" output = evaluate_text(text) print(output) ``` Expected Output: ```python { \'total_words\': 8, \'unique_words\': 7, \'lexical_diversity\': 0.875, \'most_common_words\': [(\'world\', 2), (\'hello\', 2), (\'everyone\', 1), (\'in\', 1), (\'of\', 1)] } ``` # Constraints - The text will only contain alphabetic characters and spaces. - The function should be case-insensitive, i.e., \'Hello\' and \'hello\' should be considered the same word. - The text will have at most 100,000 words. You need to implement the `evaluate_text` function to match the described behavior.","solution":"from collections import Counter import re def evaluate_text(text: str) -> dict: text = text.lower() # Convert text to lowercase words = re.findall(r\'bw+b\', text) # Extract words using regular expressions total_words = len(words) # Total number of words unique_words_set = set(words) # Unique words in the text unique_words = len(unique_words_set) # Number of unique words lexical_diversity = unique_words / total_words if total_words > 0 else 0 # Calculate lexical diversity word_count = Counter(words) # Count the frequency of each word most_common_words = word_count.most_common() # Get most common words # To ensure lexicographic order in case of ties in count most_common_words.sort(key=lambda x: (-x[1], x[0])) most_common_words = most_common_words[:5] # Get the top 5 most common words return { \'total_words\': total_words, \'unique_words\': unique_words, \'lexical_diversity\': lexical_diversity, \'most_common_words\': most_common_words }"},{"question":"You are developing a music playlist application. A playlist is considered valid if it has at least one song, and any consecutive songs in the playlist must have different genres. You are given: - An integer, M, which represents the number of songs in the playlist. - An integer, G, which represents the number of unique genres. - A list of M integers, where the i-th integer represents the genre of the i-th song in the playlist. Determine if the playlist is valid based on the criteria outlined above. -----Constraints----- - M is an integer satisfying 1 leq M leq 100. - G is an integer satisfying 1 leq G leq 10. - Each genre is represented by a unique integer ranging from 1 to G. -----Input----- Input is given from Standard Input in the following format: M G s1 s2 ... sM -----Output----- If the playlist is valid, print \\"Valid\\"; otherwise, print \\"Invalid\\". -----Sample Input----- 5 3 1 2 1 3 2 -----Sample Output----- Valid As there are no consecutive songs with the same genre, the playlist is valid. -----Sample Input----- 4 2 1 1 2 2 -----Sample Output----- Invalid As there are consecutive songs with the same genre, the playlist is invalid.","solution":"def is_playlist_valid(M, G, songs): Determines if a playlist is valid. A playlist is valid if: 1. It has at least one song. 2. Any consecutive songs in the playlist must have different genres. Parameters: - M: int, number of songs in the playlist. - G: int, number of unique genres. - songs: list of int, genres of the songs in the playlist. Returns: - \\"Valid\\" if the playlist is valid, \\"Invalid\\" otherwise. if M < 1: return \\"Invalid\\" for i in range(1, M): if songs[i] == songs[i-1]: return \\"Invalid\\" return \\"Valid\\" # Example Usage M = 5 G = 3 songs = [1, 2, 1, 3, 2] print(is_playlist_valid(M, G, songs)) # Expected Output: \\"Valid\\" M = 4 G = 2 songs = [1, 1, 2, 2] print(is_playlist_valid(M, G, songs)) # Expected Output: \\"Invalid\\""},{"question":"Laura is organizing her toy collection and found a small toy train with railcars labeled by different non-negative integers. The toy train currently forms a sequence of integers. She noticed that if there are any prime numbers in the sequence, they tend to disrupt the smooth flow of the train. Laura would like to remove all prime numbers from the sequence to make the train run smoothly. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. You are given multiple test cases, where each test case consists of a sequence representing the toy train with railcars labeled by integers. Your task is to remove all prime numbers from each sequence and return the remaining sequence of railcars. If all railcars in the sequence are primes, the resulting sequence should be empty. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. The next 2t lines contain the test cases. The first line of each test case contains the integer n (1 le n le 10^5) — the number of railcars in the toy train. The second line contains n non-negative integers separated by spaces — the labels on the railcars. The sum of n over all test cases does not exceed 10^5. -----Output----- Print t answers — one per test case. For each test case, output the sequence of railcars after removing all primes. If the sequence is empty after removing primes, just print an empty line. -----Example----- Input 4 6 4 5 6 7 8 10 3 2 3 4 5 11 13 17 19 1 1 0 Output 4 6 8 10 4 1 0 -----Note----- In the first test case, railcars labeled 5 and 7 are removed. In the second test case, railcars labeled 2 and 3 are removed. In the third test case, railcars labeled 11, 13, 17, and 19 are removed. In the fourth test case, there are no prime numbers to remove.","solution":"def remove_primes_from_train(t, test_cases): def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True results = [] for case in test_cases: n, railcars = case filtered_railcars = [rc for rc in railcars if not is_prime(rc)] results.append(\\" \\".join(map(str, filtered_railcars))) return results # Example usage: # t = 4 # test_cases = [ # (6, [4, 5, 6, 7, 8, 10]), # (3, [2, 3, 4]), # (5, [11, 13, 17, 19, 1]), # (1, [0]) # ] # print(remove_primes_from_train(t, test_cases))"},{"question":"Determine if a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For the purpose of this question, consider only the lowercase letters \'a\' to \'z\'. Constraints * The string contains only lowercase alphabetic characters. * 0 leq text{length of string} leq 1000 Input A string s is given. Example Input code Output False Input aabb Output True","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): Input string containing only lowercase letters \'a\' to \'z\'. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome, at most one character can have an odd count return odd_count <= 1"},{"question":"You are developing a mobile application that records the daily activities of users. Each activity is represented by a string, and the daily record is stored in a list. Here, an activity is considered as an action taken by a user such as \\"running\\", \\"walking\\", \\"cooking\\", etc. Users sometimes add the same activity multiple times by mistake, and you need to clean up these duplicates for them. However, the order of activities should be preserved. Write a function that takes a list of strings and returns a new list with duplicates removed, keeping only the first occurrence of each activity. -----Input----- The input consists of a list of strings, where each string represents an activity recorded for a day. The length of the list will not exceed 100, and each activity within the list will not exceed 50 characters in length. The list is case-sensitive, meaning \\"Running\\" and \\"running\\" should be treated as different activities. -----Output----- Return a list of strings representing the activities for the day with duplicates removed, preserving the original order of first occurrences. -----Example----- Input: [\\"running\\", \\"walking\\", \\"cooking\\", \\"running\\", \\"reading\\", \\"cooking\\"] Output: [\\"running\\", \\"walking\\", \\"cooking\\", \\"reading\\"] -----Note----- In the example, the second occurrence of \\"running\\" and \\"cooking\\" are removed, and only the first occurrences are kept in the resulting list. -----Example 2----- Input: [\\"swimming\\", \\"swimming\\", \\"swimming\\"] Output: [\\"swimming\\"] -----Example 3----- Input: [\\"Running\\", \\"running\\", \\"Running\\", \\"running\\"] Output: [\\"Running\\", \\"running\\"]","solution":"def remove_duplicates(activities): Removes duplicate activities from the list preserving the order of first occurrences. Args: activities (list of str): List of activities recorded for the day. Returns: list of str: List of activities with duplicates removed. seen = set() result = [] for activity in activities: if activity not in seen: seen.add(activity) result.append(activity) return result"},{"question":"Write a function that takes a string representation of a date in the format \\"dd-mm-yyyy\\" and checks if it is a valid date. The function should return `true` if the date is valid, and `false` if it is not. A valid date must satisfy the following conditions: - It should be in the \\"dd-mm-yyyy\\" format. - Day (`dd`) must be a valid day for the given month (`mm`). - Month (`mm`) should be between 01 and 12. - Year (`yyyy`) should be between 1900 and the current year. Leap years should be considered when validating the day of February. A leap year is divisible by 4, but not by 100 unless it is also divisible by 400. Examples Valid Dates: * \\"29-02-2020\\" * \\"31-12-1999\\" * \\"01-01-2000\\" Invalid Dates: * \\"31-11-2020\\" (November has only 30 days) * \\"29-02-2019\\" (2019 is not a leap year) * \\"32-01-2020\\" (January has only 31 days)","solution":"from datetime import datetime def is_valid_date(date_str): Checks if the given date string in the format \\"dd-mm-yyyy\\" is a valid date. Args: - date_str (str): The date string to validate. Returns: - bool: True if the date is valid, False otherwise. try: # Check if date_str can be parsed successfully date = datetime.strptime(date_str, \\"%d-%m-%Y\\") # Extract year and check the range year = date.year if year < 1900 or year > datetime.now().year: return False return True except ValueError: # If the parsing fails, the date is invalid return False"},{"question":"You are given a list of n integers. Your task is to form two subarrays from the list such that the absolute difference between the sum of the two subarrays is minimized. Each integer in the array must belong to exactly one of the two subarrays. Input The first line of the input contains a single integer n (1 ≤ n ≤ 50) — the length of the list. The following line contains n integers separated by spaces representing the elements of the list. The sum of all elements in the list does not exceed 10000 by absolute value. Output The output should contain a single integer — the smallest possible absolute difference between the sum of the two subarrays. Examples Input 5 3 1 4 2 2 Output 0 Input 4 1 2 3 9 Output 3","solution":"def min_difference_subarrays(n, arr): Returns the minimum absolute difference between the sums of two subarrays. total_sum = sum(arr) target = total_sum // 2 # Create a boolean table to store achievable sums dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(target, -1, -1): if dp[i]: return abs((total_sum - i) - i) # Examples print(min_difference_subarrays(5, [3, 1, 4, 2, 2])) # Output: 0 print(min_difference_subarrays(4, [1, 2, 3, 9])) # Output: 3"},{"question":"Arpa is participating in a confectionery contest in Arpa’s land to create beautiful and tasty candy chains to impress the judges. A candy chain consists of individual candy pieces, each having a specific sweetness level. The judges have peculiar requirements for the arrangement of candies. To make a valid candy chain: - Each candy piece should have a distinct sweetness level. - The total sweetness level of the whole candy chain must be an even number. - Among any three consecutive candy pieces in the chain, the total sweetness level must not be divisible by 3. Arpa wants your help to determine if there is a valid way to arrange the given candy pieces to meet the judges’ requirements. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of candy pieces. The second line contains n integers si (1 ≤ si ≤ 109) — the sweetness levels of the candy pieces. Output If there is no solution, print -1. Otherwise print a single line containing the sweetness levels of the candy pieces in the order that satisfies the conditions. If there are multiple solutions, print any of them. Example Input 5 3 2 1 6 7 Output 1 2 6 7 3","solution":"def is_valid_candy_chain(candy_chain): Checks if the candy chain meets the requirements: - Each candy piece has a distinct sweetness level. - The total sweetness level is an even number. - Among any three consecutive candy pieces, the total sweetness level is not divisible by 3. total_sweetness = sum(candy_chain) if total_sweetness % 2 != 0: return False for i in range(len(candy_chain) - 2): if (candy_chain[i] + candy_chain[i + 1] + candy_chain[i + 2]) % 3 == 0: return False return True def arpas_candy_chain(n, sweetness_levels): Create a valid candy chain based on the conditions provided. sweetness_levels.sort() if sum(sweetness_levels) % 2 != 0: print(-1) return if n < 3: print(*sweetness_levels) return for i in range(n - 2): for j in range(len(sweetness_levels) - 2): current_chain = sweetness_levels[:j] + [sweetness_levels[j + 1], sweetness_levels[j], sweetness_levels[j + 2]] + sweetness_levels[j + 3:] if is_valid_candy_chain(current_chain): print(*current_chain) return print(-1) return # Example usage: arpas_candy_chain(5, [3, 2, 1, 6, 7])"},{"question":"Given an integer array of size N. Your task is to rotate the array K times clockwise and then find the sum of the elements at the even indices after rotation. Example 1: Input: 5 1 2 3 4 5 2 Output: 10 Explanation: After rotating the array [1, 2, 3, 4, 5] two times clockwise, it becomes [4, 5, 1, 2, 3]. The elements at even indices are 4, 1, and 3. Their sum is 4 + 1 + 3 = 8. Example 2: Input: 4 10 20 30 40 1 Output: 60 Explanation: After rotating the array [10, 20, 30, 40] one time clockwise, it becomes [40, 10, 20, 30]. The elements at even indices are 40 and 20. Their sum is 40 + 20 = 60. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateAndSum(), which takes an integer array arr, its size N, and an integer K as input parameters. The function should return the sum of the elements at the even indices after rotating the array K times clockwise. Constraints: 1 <= T <= 100 1 <= N <= 100 1 <= arr[i] <= 100 1 <= K <= 100","solution":"def rotateAndSum(arr, N, K): Rotates the array K times clockwise and finds the sum of the elements at even indices. # Normalize K to avoid unnecessary rotations K = K % N # Rotate the array clockwise K times rotated_array = arr[-K:] + arr[:-K] # Sum the elements at even indices even_index_sum = sum(rotated_array[i] for i in range(0, N, 2)) return even_index_sum"},{"question":"Write a function that takes in a string and determines if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible, return one such arrangement. If it is not possible, return the string \\"Not Possible\\". -----Input----- Each input will consist of a single test case. The input will be a single string `s` with length 1 leq |s| leq 10^5. -----Output----- Output a single line containing one arrangement of the characters of the string such that no two adjacent characters are the same. If no such arrangement exists, print \\"Not Possible\\". -----Examples----- Sample Input 1: aab Sample Output 1: aba Sample Input 2: aaab Sample Output 2: Not Possible Sample Input 3: aabbcc Sample Output 3: abcabc","solution":"from collections import Counter import heapq def rearrange_string(s): # Count frequencies of each character. frequency = Counter(s) max_heap = [(-freq, char) for char, freq in frequency.items()] heapq.heapify(max_heap) result = [] prev_char = None prev_freq = 0 while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If there was a previous character, push it back into the heap now. if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update the previous character and decrease its frequency by 1. prev_char = char prev_freq = freq + 1 # If the rearrangement is not possible, the length of result would be shorter than the input string. if len(result) != len(s): return \\"Not Possible\\" return \\"\\".join(result)"},{"question":"An e-commerce company is analyzing the browsing patterns of users on its website. They tracked the pages each user visited in the order of their visits, where each page is identified by a unique URL string. The marketing team wants to determine the most common browsing path of length k among all users. A browsing path is defined as a sequence of k consecutive URLs visited by a user. Your task is to implement an algorithm that identifies the most common browsing path of length k and returns it. If there are multiple paths with the same frequency, return the lexicographically smallest one. Input - The first line contains two integers, n and k (1 ≤ k ≤ n), where n is the total number of pages for all users combined, and k is the length of the browsing path. - The next n lines each contain a single URL string representing a user\'s visit to a page. Output - Output the most common browsing path of length k as a single line of space-separated URLs. If there are multiple most common paths, return the lexicographically smallest one. Examples Input 10 3 home products about home products contact home products about checkout Output home products about Input 8 2 search results search results checkout cart checkout thanks Output search results Input 7 2 page1 page2 page1 page3 page2 page1 page2 Output page1 page2 Note: The provided URL strings will have a length of no more than 100 characters and consist of lowercase Latin letters, digits, and the characters \'/\', \'-\', \'_\', and \'.\'.","solution":"from collections import defaultdict, Counter def most_common_browsing_path(n, k, urls): Identifies the most common browsing path of length k among users\' visits to pages. If there are multiple paths with the same frequency, returns the lexicographically smallest one. path_count = defaultdict(int) for i in range(n - k + 1): path = tuple(urls[i:i + k]) path_count[path] += 1 # Finding the most common path max_count = max(path_count.values()) common_paths = [path for path, count in path_count.items() if count == max_count] # Return the lexicographically smallest path among the common paths return \' \'.join(sorted(common_paths)[0])"},{"question":"Farmer John has a barn with `n` stalls, and he wants to place exactly `c` cows in them such that the minimum distance between any two cows is maximized. The stalls are represented by an array of `n` integers, where each integer represents the position of a stall along a straight line. Your task is to write a function that determines the largest minimum distance between any two cows that can be achieved. You need to answer exactly `t` independent queries. -----Input----- The first line of the input contains one integer `t` (1 le t le 100) — the number of queries. Each query consists of two lines: - The first line of each query contains two integers `n` and `c` (2 le n le 10^5, 2 le c le n) — the number of stalls and the number of cows, respectively. - The second line contains `n` integers x1, x2, ..., xn (1 le xi le 10^9) — the positions of the stalls. -----Output----- For each query, print one integer: the largest minimum distance that can be achieved between any two cows. -----Example----- Input 2 5 3 1 2 8 4 9 6 4 3 4 7 1 9 12 Output 3 3 -----Note----- In the first example query, we can place the cows in the stalls at positions 1, 4, and 8 to achieve a minimum distance of 3. In the second example query, we can place the cows in the stalls at positions 1, 4, 7, and 12 to achieve a minimum distance of 3.","solution":"def canPlaceCows(stalls, n, c, min_dist): cows_placed = 1 # Place cow in the first stall last_pos = stalls[0] for i in range(1, n): if stalls[i] - last_pos >= min_dist: cows_placed += 1 last_pos = stalls[i] if cows_placed == c: return True return False def largestMinDistance(n, c, stalls): stalls.sort() low = 1 high = stalls[-1] - stalls[0] result = 0 while low <= high: mid = (low + high) // 2 if canPlaceCows(stalls, n, c, mid): result = mid low = mid + 1 else: high = mid - 1 return result def solve_queries(queries): results = [] for query in queries: n, c = query[0] stalls = query[1] result = largestMinDistance(n, c, stalls) results.append(result) return results"},{"question":"You are given a sequence of positive integers. You are required to find the smallest number in the sequence such that the sum of all elements in the sequence is divisible by this number. If there are multiple such numbers, return the smallest one. Input The first line contains one integer n (1 ≤ n ≤ 100,000). The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Output Print one integer - the smallest number in the sequence such that the sum of all elements in the sequence is divisible by this number. Examples Input 5 3 6 9 12 15 Output 3 Input 4 2 4 6 8 Output 2 Note For the first example, the sum of the sequence is 45. The smallest number in the sequence that divides 45 is 3. For the second example, the sum of the sequence is 20. The smallest number in the sequence that divides 20 is 2.","solution":"def smallest_divisor_of_sum(n, sequence): This function returns the smallest number in the sequence such that the sum of all elements in the sequence is divisible by this number. total_sum = sum(sequence) smallest_divisor = min([x for x in sequence if total_sum % x == 0]) return smallest_divisor"},{"question":"Shirin is playing with strings and wants to find interesting patterns within them. She needs to identify the length of the longest substring that contains no repeating characters. Can you help her write a program to achieve this? -----Input----- The input consists of a single string `s` which only contains ASCII characters. The length of the string `s` will not be more than 200 characters. -----Output----- Output the length of the longest substring of `s` that contains no repeating characters. -----Examples----- Sample Input 1: abcabcbb Sample Output 1: 3 Sample Input 2: bbbbb Sample Output 2: 1 Sample Input 3: pwwkew Sample Output 3: 3 Sample Input 4: abcdefghijklmnopqrstuvwxyz Sample Output 4: 26","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Tom loves playing games using strings. One day he came across a game where he needs to transform a given string `s` to obtain all its possible substrings that are palindromes. A string is called palindrome if it reads the same forwards and backwards. Your task is to help Tom find all unique palindromic substrings of the given string `s`. -----Input----- The single line contains a string `s` (1 ≤ |s| ≤ 100). -----Output----- Print the total number of unique palindromic substrings in `s`. -----Examples----- Input abaaa Output 5 Input abc Output 3 -----Note----- For the first sample, the unique palindromic substrings are {a, b, aa, aba, aaa}, hence the total is 5. For the second sample, the unique palindromic substrings are {a, b, c}, hence the total is 3.","solution":"def count_unique_palindromic_substrings(s): Returns the count of unique palindromic substrings in the input string s. def is_palindrome(string): return string == string[::-1] palindromes = set() for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if is_palindrome(substring): palindromes.add(substring) return len(palindromes)"},{"question":"In a local programming contest, each participant can solve multiple problems. The organizers want to recognize the participants who solved the highest number of problems. Given the results of the participants, determine the maximum number of problems solved by any participant, and count how many participants achieved that maximum number. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of participants. - The second line contains N space-separated integers P_1, P_2, dots, P_N, where P_i is the number of problems solved by the i-th participant. -----Output----- For each test case, print a single line containing two space-separated integers — the maximum number of problems solved and the number of participants who solved that many problems. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10^5 - 0 le P_i le 10^6 - the sum of N for all test cases does not exceed 10^6 -----Example Input----- 2 5 1 3 2 3 4 6 1 2 2 2 3 3 -----Example Output----- 4 1 3 2","solution":"def max_problems_solved(test_cases): results = [] for test in test_cases: N = test[0] problems_solved = test[1] max_solved = max(problems_solved) count_max_solved = problems_solved.count(max_solved) results.append((max_solved, count_max_solved)) return results # To parse the input according to the given problem description and utilize the function def parse_input(input_str): inputs = input_str.strip().split(\'n\') T = int(inputs[0]) test_cases = [] index = 1 for _ in range(T): N = int(inputs[index]) problems_solved = list(map(int, inputs[index + 1].strip().split())) test_cases.append((N, problems_solved)) index += 2 return test_cases"},{"question":"A new bank is revolutionizing financial management with their innovative account balance tracking system. As a software developer, you need to implement a feature to help users monitor their daily transactions and compute their final balance. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case starts with a line containing an integer N, representing the number of transactions. The next N lines contain an integer, either positive (credit) or negative (debit), representing a transaction amount. ------ Output ------ For each test case, output the final balance after processing all transactions. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 -10000 ≤ transaction amount ≤ 10000 ------ Sample Input 1 ------ 2 3 -200 300 -100 4 500 1000 -1500 -500 ------ Sample Output 1 ------ 0 -500","solution":"def final_balance(test_cases): results = [] for case in test_cases: final_amount = sum(case) results.append(final_amount) return results def parse_input(input_string): data = input_string.strip().split(\'n\') index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 transactions = [] for _ in range(N): transactions.append(int(data[index])) index += 1 test_cases.append(transactions) return test_cases def format_output(results): return \'n\'.join(map(str, results)) def process_transactions(input_string): test_cases = parse_input(input_string) results = final_balance(test_cases) return format_output(results)"},{"question":"Given a string s, find the length of the longest substring without repeating characters. Write a function `longest_substring_without_repeating(s: str) -> int` that takes a string s as input and returns the length of the longest substring that does not have any repeating characters. **Input** - The input is a single string s. It is guaranteed that 1 ≤ len(s) ≤ 10⁵. **Output** - The output should be an integer indicating the length of the longest substring without repeating characters. **Example** Input: ``` pwwkew ``` Output: ``` 3 ``` Explanation: The answer is \\"wke\\" with the length of 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_substring_without_repeating(s: str) -> int: Finds the length of the longest substring without repeating characters. Parameters: s (str): Input string Returns: int: Length of the longest substring without repeating characters char_index_map = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"In an alternate universe, people communicate using a unique system of lantern codes. Each letter of the alphabet is associated with a specific pattern of lanterns, and every pattern consists of M lanterns. The patterns are such that each lantern can either be on (1) or off (0). Given this, you need to help decode a sequence of lanterns into a string. Each pattern of M lanterns corresponds to a single character, and you are provided with the mapping of each character to its lantern pattern. Your task is to decode the entire sequence of lanterns to retrieve the original string message. -----Input----- - The first line of the input contains an integer H (1 ≤ H ≤ 100) – the number of different characters in the mapping. - The next H lines each contain a character and a string of M (1 ≤ M ≤ 100) binary digits separated by a space, which represents the lantern pattern for that character. - The following line contains an integer N (1 ≤ N ≤ 1000) – the length of the sequence of lanterns provided for decoding. - The last line contains a string of N binary digits which is the sequence of lanterns. -----Output----- - Print the decoded string message which is formed by translating the sequence of lanterns according to the given mappings. -----Example----- Input: 3 A 110 B 011 C 101 9 110011101 Output: ABC -----Explanation----- Example case: - The pattern \\"110\\" corresponds to \'A\'. - The pattern \\"011\\" corresponds to \'B\'. - The pattern \\"101\\" corresponds to \'C\'. - The string \\"110011101\\" is thus decoded as \\"ABC\\".","solution":"def decode_lantern_sequence(H, patterns, N, sequence): # Create a mapping dictionary from the provided patterns pattern_to_char = {} pattern_length = 0 # We initialize it to find the pattern length for pattern in patterns: char, lantern_pattern = pattern pattern_to_char[lantern_pattern] = char pattern_length = len(lantern_pattern) # All patterns will have the same length # Decode the sequence decoded_message = \\"\\" for i in range(0, N, pattern_length): current_pattern = sequence[i:i + pattern_length] decoded_message += pattern_to_char[current_pattern] return decoded_message"},{"question":"Lila loves flowers and she has a garden with n flower beds, each with a certain number of flowers. Lila wants to know the maximum number of flowers she can pick in one segment of consecutive flower beds if she can skip at most one flower bed in that segment. More formally, she can choose three indices i, j, and k (1 ≤ i ≤ k ≤ j ≤ n), where i ≤ k ≤ j, and sum all flower counts in the beds from i to j inclusive except those in position k. Write a program to calculate the maximum number of flowers Lila can pick according to the rules above. Input The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of flower beds in the garden. The next line contains n integers fi (1 ≤ fi ≤ 1 000 000 000), where fi is the number of flowers in the i-th bed. Output Print a single line containing the maximum number of flowers that can be picked. Example Input 6 3 7 2 5 8 10 Output 33 Note Consider the following segments: * Choosing the segment from the 1st to the 6th bed, skipping the 3rd bed: sum = 3 + 7 + 5 + 8 + 10 = 33 * Choosing the segment from the 2nd to the 6th bed, skipping the 5th bed: sum = 7 + 2 + 5 + 8 + 10 = 32 Thus, the maximum number of flowers Lila can pick is 33.","solution":"def max_flowers(n, flowers): if n == 1: return flowers[0] max_flowers = 0 # Calculate prefix sums prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + flowers[i - 1] # Calculate suffix sums suffix_sum = [0] * (n + 1) for i in range(n - 1, -1, -1): suffix_sum[i] = suffix_sum[i + 1] + flowers[i] # Try skipping each flower bed from 1 to n for k in range(n): if k == 0: max_flowers = max(max_flowers, suffix_sum[1]) elif k == n - 1: max_flowers = max(max_flowers, prefix_sum[n - 1]) else: max_flowers = max(max_flowers, prefix_sum[k] + suffix_sum[k + 1]) return max_flowers # Example usage n = 6 flowers = [3, 7, 2, 5, 8, 10] print(max_flowers(n, flowers)) # Output: 33"},{"question":"# Task You are given an array of integers. Your task is to find the smallest integer `k` such that for every element `a` in the array, `a % k` is the same for all `a`. # Example For `[5, 7, 11, 13]`, the result should be `2`. Explanation: ``` 5 % 2 = 1 7 % 2 = 1 11 % 2 = 1 13 % 2 = 1 ``` All elements give the same remainder when divided by 2. For `[3, 6, 9, 12]`, the result should be `3`. Explanation: ``` 3 % 3 = 0 6 % 3 = 0 9 % 3 = 0 12 % 3 = 0 ``` All elements give the same remainder when divided by 3. # Input / Output - `[input]` array of integers `arr` An array of integers (0 ≤ arr.length ≤ 100000) where `arr[i]` (1 ≤ arr[i] ≤ 100000). - `[output]` an integer Returns the smallest integer `k` such that for every element `a` in the array, `a % k` is the same for all `a`.","solution":"def smallest_k(arr): if not arr: return None # Return None when the input array is empty if len(arr) == 1: return arr[0] # If array has one element, return itself differences = [arr[i+1] - arr[i] for i in range(len(arr) - 1)] gcd_value = abs(differences[0]) def gcd(a, b): while b: a, b = b, a % b return a for diff in differences[1:]: gcd_value = gcd(gcd_value, abs(diff)) return gcd_value"},{"question":"Zara, an avid puzzle lover, has recently come across an interesting challenge. The challenge involves a peculiar number game where each number in the sequence has to follow a specific set of rules. Intrigued, she has tasked you with writing a program to help her solve these puzzles more efficiently. You are given a sequence of lengths of segments. Your job is to determine the smallest possible length of an enclosing segment. The rules are as follows: 1. Each segment in the sequence must be placed end to end in such a way that no segments overlap. 2. Segments can be flipped (i.e., the length of 2 can be 2 regardless of direction). 3. The enclosing segment must be the smallest segment that can enclose all given segments end-to-end. Write a program to calculate the smallest possible length of an enclosing segment of given segments in a sequence. Input The input consists of multiple test cases. Each test case contains: - An integer N (1 ≤ N ≤ 1000), representing the number of segments. - A single line with N integers separated by spaces, representing the lengths of the segments. Each integer Li (1 ≤ Li ≤ 1000) represents the length of a segment. The last line of input is a single \'0\', indicating the end of test cases. Output For each test case, output a single integer representing the smallest possible length of an enclosing segment. Examples Input 3 1 2 3 4 5 5 5 5 2 7 3 0 Output 6 20 10","solution":"def smallest_enclosing_segment_length(test_cases): results = [] for case in test_cases: N, segments = case total_length = sum(segments) results.append(total_length) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') test_cases = [] i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break segments = list(map(int, lines[i + 1].split())) test_cases.append((N, segments)) i += 2 return test_cases def process(input_str): test_cases = parse_input(input_str) results = smallest_enclosing_segment_length(test_cases) return \\"n\\".join(map(str, results))"},{"question":"An art gallery is organizing an exhibition. The gallery is a rectangular grid of n x m units. Each unit can either be empty or occupied by an artwork. The gallery wants to install sensors to monitor the artworks. Each sensor placed in a unit can monitor the unit it is located in and all directly adjacent units (left, right, up, and down). Given the layout of the gallery and the positions of the artworks, your task is to determine the minimum number of sensors required to monitor all the artworks. Note that a sensor cannot be placed in a unit occupied by an artwork. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the gallery grid. The next n lines contain m characters each — either \'.\' representing an empty unit or \'A\' representing an artwork. Output Print one integer — the minimum number of sensors required to monitor all the artworks. If it\'s not possible to monitor all artworks, print -1. Examples Input 4 4 .... .AA. .A.. .... Output 2 Input 3 3 AAA A.A AAA Output -1 Input 5 5 ..... ..... ..A.. ..... ..... Output 1","solution":"def min_sensors(n, m, grid): def is_monitored(i, j, sensors): # Check current position and directly adjacent positions for di, dj in [(0, 0), (1, 0), (-1, 0), (0, 1), (0, -1)]: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and sensors[ni][nj]: return True return False def place_sensors(sensors): # Place a sensor on unmonitored artwork adjacent cells for i in range(n): for j in range(m): if grid[i][j] == \'A\' and not is_monitored(i, j, sensors): sensor_placed = False for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == \'.\': sensors[ni][nj] = True sensor_placed = True break if not sensor_placed: return -1 return sum(sum(row) for row in sensors) # Initialize the sensor grid sensors = [[False] * m for _ in range(n)] return place_sensors(sensors)"},{"question":"Write a function that takes an integer as input and returns a string that represents the integer written in English words. For example, given the input `123`, the function should return `\\"one hundred twenty-three\\"`. The input will be a non-negative integer less than or equal to `999,999`. # Example ```python number_to_words(123) # Output: \\"one hundred twenty-three\\" number_to_words(0) # Output: \\"zero\\" number_to_words(5050) # Output: \\"five thousand fifty\\" ```","solution":"def number_to_words(n): Converts a non-negative integer into its English words representation. if n == 0: return \\"zero\\" num_to_19 = \'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\'.split() tens = \'twenty thirty forty fifty sixty seventy eighty ninety\'.split() thousands = \' thousand \'.split() def words(num): if num < 20: return num_to_19[num-1:num] if num < 100: return [tens[num//10-2]] + words(num % 10) if num < 1000: return [num_to_19[num//100-1]] + [\'hundred\'] + words(num % 100) for p, w in enumerate(thousands, 1): if num < 1000**(p+1): return words(num//1000**p) + [w] + words(num % 1000**p) return \' \'.join(words(n)).strip()"},{"question":"Write a function `pascals_triangle_row(n)` that returns the n-th (0-indexed) row of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of the binomial coefficients. The rows of Pascal\'s Triangle are usually enumerated starting with row `0` at the top (the `0th` row). The entries in each row are numbered from the left starting with `0` and are the coefficients in the expansion of `(a + b)^n`. # Examples: ``` pascals_triangle_row(0) -> [1] pascals_triangle_row(1) -> [1, 1] pascals_triangle_row(2) -> [1, 2, 1] pascals_triangle_row(3) -> [1, 3, 3, 1] pascals_triangle_row(4) -> [1, 4, 6, 4, 1] pascals_triangle_row(5) -> [1, 5, 10, 10, 5, 1] pascals_triangle_row(6) -> [1, 6, 15, 20, 15, 6, 1] ``` # Task: You need to implement the function `pascals_triangle_row(n)` that takes a non-negative integer `n` and returns the n-th row of Pascal’s Triangle. # Constraints: - 0 <= n <= 30","solution":"def pascals_triangle_row(n): Returns the n-th (0-indexed) row of Pascal\'s Triangle. if n == 0: return [1] row = [1] for k in range(1, n + 1): # Calculate the next element using combinatorial logic next_element = row[-1] * (n - k + 1) // k row.append(next_element) return row"},{"question":"Ben is organizing a team-building exercise involving two departments at his company. Each department will form a line, and the team-building exercise will involve creating new teams consisting of one member from the first department and one member from the second department. Ben wants to know how many unique pairs can be formed from both departments. Write a program that takes the number of members in each department and calculates the total number of unique pairs that can be formed. INPUT: The first line of the input contains the number of test cases T, The next T lines follow. Each line then contains two integers M and N, where M is the number of members in the first department and N is the number of members in the second department. OUTPUT: Print the number of unique pairs for each test-case. Constraints: 1 ≤ T ≤ 1000 1 ≤ M, N ≤ 1000000 SAMPLE INPUT 3 3 4 1 5 2 2 SAMPLE OUTPUT 12 5 4","solution":"def count_unique_pairs(T, test_cases): For each test case, count the number of unique pairs that can be formed between departments of size M and N. Args: - T (int): Number of test cases - test_cases (list of tuples): Each tuple contains two integers M and N Returns: - list: Number of unique pairs for each test case result = [] for M, N in test_cases: result.append(M * N) return result"},{"question":"Given a string S consisting of lower-case English alphabets, your task is to determine the length of the longest substring that can be obtained by deleting exactly one character from S. For example, for the string \\"abcde\\", you can delete \'a\' to get \\"bcde\\" with a length of 4, or delete \'b\' to get \\"acde\\" with a length of 4, etc. The maximum length of such substrings is 4. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output the maximum length of the substring obtained by deleting exactly one character. ------ Constraints ------ - 1 ≤ T ≤ 10^{4} - 2 ≤ |S| ≤ 10^{5} - Sum of |S| over all test cases does not exceed 10^{6}. ------ Sample Input ------ 3 abcde aaaa ab ------ Sample Output ------ 4 3 1 ------ Explanation ------ Test Case 1: The maximum substring lengths obtained by deleting one character each are all 4, e.g., \\"bcde\\", \\"acde\\", \\"abde\\", \\"abce\\", \\"abcd\\". Test Case 2: The maximum substring lengths obtained by deleting one character each are all 3, e.g., \\"aaa\\". Test Case 3: The maximum substring lengths obtained by deleting one character are both 1, e.g., \\"a\\" or \\"b\\".","solution":"def max_substring_length_by_deleting_one_char(strings): result = [] for s in strings: if len(s) > 1: result.append(len(s) - 1) else: result.append(0) return result"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation on the string: Select any subsequence (not necessarily contiguous) whose characters form a palindrome and remove it from the string. Find the minimum number of operations required so that the final string is empty. Note that a subsequence is formed by deleting some (possibly zero) characters from the string without changing the order of the remaining characters. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the length of the string. - The second line of each test case contains a string S of length N consisting of lowercase English letters. ------ Output Format ------ For each test case, output the minimum number of operations required so that the final string S is empty. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} S contains only lowercase English letters. - The sum of N over all test cases won\'t exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 3 3 abc 4 abba 2 aa ----- Sample Output 1 ------ 3 1 1 ----- explanation 1 ------ Test case 1: We can remove each character one by one since the only palindromes are single characters. Minimum operations are 3. Test case 2: We can remove the entire string \\"abba\\" in one operation as it is already a palindrome. Test case 3: We can remove the entire string \\"aa\\" in one operation as it is already a palindrome.","solution":"def min_operations_to_empty_string(n, s): Returns the minimum number of operations required to remove all characters from string `s`. # Check if the string is a palindrome if s == s[::-1]: return 1 else: return n def process_test_cases(test_cases): results = [] for n, s in test_cases: results.append(min_operations_to_empty_string(n, s)) return results"},{"question":"-----Constraints----- - Input will consist of two integers, each between 0 and 100 (inclusive). - The integers represent the lengths of two sides of a right triangle. -----Input----- Input is given from Standard Input in the following format: a b -----Output----- The integer value of the hypotenuse of the right triangle calculated using the Pythagorean theorem. -----Sample Input----- 3 4 -----Sample Output----- 5 Explanation: The hypotenuse is calculated as sqrt(3^2 + 4^2) = sqrt(9 + 16) = sqrt(25) = 5.","solution":"import math def calculate_hypotenuse(a, b): Returns the hypotenuse of a right triangle given sides a and b. return int(math.sqrt(a**2 + b**2))"},{"question":"You are tasked with creating a leaderboard for a programming competition. Each participant submits a score (an integer value), and your job is to output the leaderboard in descending order. Participants with the same score should be displayed in the order they were added to the leaderboard (i.e., their first appearance). Write a function `create_leaderboard` which takes a list of scores and returns the ordered leaderboard. For example: ```python create_leaderboard([90, 100, 100, 85]) # --> [100, 100, 90, 85] create_leaderboard([50, 75, 75, 75, 65]) # --> [75, 75, 75, 65, 50] ```","solution":"def create_leaderboard(scores): Takes a list of scores and returns the leaderboard in descending order. Participants with the same score should appear in the order they were added. Args: - scores (List[int]): A list of scores. Returns: - List[int]: The ordered leaderboard. return sorted(scores, reverse=True)"},{"question":"Given an array arr of n positive integers, you need to find the minimum number of steps required to reduce the array to a single element by repeatedly removing two elements from the array and appending their sum modulo 10. Example 1: Input: arr = [3, 8, 4, 1] Output: 3 Explanation: Step 1: Remove 3 and 8, append (3+8)%10 = 1 -> [4, 1, 1] Step 2: Remove 4 and 1, append (4+1)%10 = 5 -> [1, 5] Step 3: Remove 1 and 5, append (1+5)%10 = 6 -> [6] Final array: [6], total 3 steps taken. Example 2: Input: arr = [9, 7, 5] Output: 2 Explanation: Step 1: Remove 9 and 7, append (9+7)%10 = 6 -> [5, 6] Step 2: Remove 5 and 6, append (5+6)%10 = 1 -> [1] Final array: [1], total 2 steps taken. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minSteps(arr) which takes the array arr as input and returns the number of steps required to reduce the array to a single element. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^4","solution":"def minSteps(arr): Returns the minimum number of steps required to reduce the array to a single element. n = len(arr) if n <= 1: return 0 return n - 1"},{"question":"A company is organizing a new project and wants to assign tasks to their employees. Each task takes some time to complete and there are dependencies between tasks, meaning some tasks must be done before others can start. You are given an integer `numTasks`, representing the number of tasks, and a list of pairs `dependencies`, where `dependencies[i] = [a, b]` indicates that task `b` cannot start before task `a` is completed. Your goal is to determine if it\'s possible to finish all tasks. Return `true` if you can complete all tasks, otherwise return `false`. Example 1: Input: numTasks = 2, dependencies = [[1, 0]] Output: true Explanation: Task 0 can be started first and then task 1 can be completed. Example 2: Input: numTasks = 2, dependencies = [[1, 0], [0, 1]] Output: false Explanation: There is a cycle where task 0 depends on task 1 and task 1 depends on task 0, hence, it is impossible to complete the tasks. Example 3: Input: numTasks = 4, dependencies = [[1, 0], [2, 1], [3, 1]] Output: true Explanation: Possible order to complete the tasks: [0, 1, 2, 3] or [0, 1, 3, 2]. Constraints: 1 <= numTasks <= 2000 0 <= dependencies.length <= 5000 dependencies[i].length == 2 0 <= dependencies[i][j] < numTasks All the pairs of dependencies are unique.","solution":"def canFinish(numTasks, dependencies): from collections import defaultdict, deque # Build adjacency list and in-degree array adj_list = defaultdict(list) in_degree = [0] * numTasks for a, b in dependencies: adj_list[a].append(b) in_degree[b] += 1 # Initialize queue with nodes of in-degree 0 queue = deque([i for i in range(numTasks) if in_degree[i] == 0]) visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return visited_count == numTasks"},{"question":"Given an integer array nums that represents the score of balloons, burst all the balloons to maximize your total score. The score of bursting a balloon at index i is calculated as nums[i-1] * nums[i] * nums[i+1]. If i-1 or i+1 is out of bounds of the array, then treat it as 1. Return the maximum score you can achieve by bursting all the balloons. Note: - You must burst the balloons one at a time. Example 1: Input: nums = [3, 1, 5, 8] Output: 167 Explanation: nums = [3, 1, 5, 8] -> burst 1 -> nums = [3, 5, 8] -> score = 3 * 1 * 5 = 15 nums = [3, 5, 8] -> burst 5 -> nums = [3, 8] -> score = 3 * 5 * 8 = 120 nums = [3, 8] -> burst 3 -> nums = [8] -> score = 1 * 3 * 8 = 24 nums = [8] -> burst 8 -> nums = [] -> score = 1 * 8 * 1 = 8 Total score = 15 + 120 + 24 + 8 = 167 Example 2: Input: nums = [1, 5] Output: 10 Explanation: nums = [1, 5] -> burst 1 -> nums = [5] -> score = 1 * 1 * 5 = 5 nums = [5] -> burst 5 -> nums = [] -> score = 1 * 5 * 1 = 5 Total score = 5 + 5 = 10","solution":"def maxCoins(nums): Returns the maximum score possible by bursting all the balloons in the optimal order. :param nums: List of integers representing the score of balloons. :return: Maximum score possible. nums = [1] + nums + [1] n = len(nums) # dp[i][j] represents maxCoins(nums[i:j+1]) dp = [[0] * n for _ in range(n)] for left in range(n-2, 0, -1): for right in range(left, n-1): for i in range(left, right+1): dp[left][right] = max( dp[left][right], nums[left-1] * nums[i] * nums[right+1] + dp[left][i-1] + dp[i+1][right] ) return dp[1][n-2]"},{"question":"#Task Your task is to implement a function that takes an integer `n` as input and returns the nth number in the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Handle invalid inputs (non-integer or negative numbers) by returning -1. Ensure your solution is efficient for larger values of n. #Input The input is an integer `n`. You must return the nth Fibonacci number if the input is a non-negative integer. If the input is not an integer or a negative number, return -1. Example: ```python Input: fibonacci(0) Output: 0 Input: fibonacci(1) Output: 1 Input: fibonacci(10) Output: 55 Input: fibonacci(-5) Output: -1 Input: fibonacci(\'a\') Output: -1 ```","solution":"def fibonacci(n): Returns the nth Fibonacci number if n is a non-negative integer. If n is not an integer or is negative, returns -1. if not isinstance(n, int) or n < 0: return -1 if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Astronaut Neil is part of a space mission tasked with exploring uncharted galaxies. During the mission, he comes across a collection of celestial objects floating in space, each with a unique weight. Neil needs to collect these objects in such a way that the total weight of the objects he collects does not exceed a specified weight limit (i.e., the capacity of his spaceship\'s cargo hold). Neil wants to maximize the number of objects he can collect. However, there\'s a catch: if two objects are collected consecutively, they must have distinct weights. Your task is to determine the maximum number of objects Neil can collect under these conditions. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of objects. The second line contains n integers w_1, w_2, ..., w_{n} (1 ≤ w_{i} ≤ 10^9) — the weights of the objects. The third line contains a single integer C (1 ≤ C ≤ 10^9) — the capacity of the spaceship\'s cargo hold. -----Output----- Print a single number — the maximum number of objects Neil can collect by the given rules. -----Examples----- Input 5 2 1 3 5 4 7 Output 3 Input 6 1 2 2 3 3 4 10 Output 4 -----Note----- In the first sample, Neil can collect objects with weights 1, 2, and 4, which sum up to 7. In the second sample, Neil can collect objects with weights 1, 3, 3, and 2, which sum up to 9. The weights 2 and 3 can be collected consecutively because although they appear multiple times, each individual weight selection is unique.","solution":"def max_objects(n, weights, C): Determines the maximum number of celestial objects Neil can collect under the given constraints. Parameters: n (int): The number of objects weights (list of int): The weights of the objects C (int): The capacity of the spaceship\'s cargo hold Returns: int: The maximum number of objects that can be collected weights.sort() collected = 0 total_weight = 0 prev_weight = None for weight in weights: if total_weight + weight <= C: if weight != prev_weight: total_weight += weight collected += 1 prev_weight = weight else: break return collected"},{"question":"Given a sequence of integers representing the heights of fences, the task is to apply a series of painting operations to change specific ranges of fence heights to a new height. Each operation specifies a range and a new height, and after all operations are performed, the heights of the fences in the specified ranges are updated. Input: The first line contains two integers N and Q, where N is the number of fences and Q is the number of painting operations. The next line contains N integers representing the initial heights of the fences. Each of the next Q lines contains three integers L, R, and H, where L and R define the range of fences to be painted (inclusive) and H is the new height to paint the fences in that range. Output: Print the final heights of all the fences after performing all the painting operations. Constraints: 1 ≤ N ≤ 100 1 ≤ Q ≤ 50 1 ≤ L ≤ R ≤ N 1 ≤ H ≤ 100 SAMPLE INPUT 5 3 1 2 3 4 5 1 3 7 2 4 6 1 5 5 SAMPLE OUTPUT 5 5 6 5 5","solution":"def paint_fences(N, Q, heights, operations): Modifies the heights of the fences based on the given painting operations. Parameters: N (int): Number of fences Q (int): Number of painting operations heights (list of int): Initial heights of the fences operations (list of tuple): List of painting operations (L, R, H) Returns: list of int: Final heights of the fences after all operations for L, R, H in operations: for i in range(L-1, R): heights[i] = H return heights"},{"question":"A group of treasure hunters discovered an ancient encrypted message on a parchment scroll. The message contains several lines of text, and the encryption used involves shifting each letter by a fixed number of positions in the alphabet. Specifically, each letter in the message is replaced by the letter that is a fixed number of positions down the alphabet. This shifting is consistent across the entire message. The shifting wraps around if it goes past \'z\'. For example, with a shift of 2, \'y\' becomes \'a\' and \'z\' becomes \'b\'. You have to write a program that can decrypt the message by shifting each letter back by a given number of positions. The decryption should handle lowercase letters only and ignore non-alphabet characters. -----Input----- The first line contains an integer s (1 le s le 25) — the number of positions each letter is shifted down the alphabet. The next lines contain the encrypted message. Each line will have at most 100 characters, and there will be at most 1000 lines. -----Output----- Print each line of the decrypted message in the same format as the input, with letters shifted back by s positions. -----Example----- Input 3 khoor zruog t wklqn wklv lv d whvw phvvdjh Output hello world q think this is a test message -----Note----- The shifting should wrap around such that \'a\' follows \'z\'. Non-alphabet characters should remain unchanged in the output.","solution":"def decrypt_message(shift, encrypted_lines): Decrypts the message by shifting each letter back by the given number of positions. Parameters: shift (int): The number of positions to shift each letter back. encrypted_lines (list of str): The encrypted message, line by line. Returns: list of str: The decrypted message, line by line. decrypted_lines = [] for line in encrypted_lines: decrypted_line = [] for char in line: if \'a\' <= char <= \'z\': new_char = chr((ord(char) - ord(\'a\') - shift) % 26 + ord(\'a\')) decrypted_line.append(new_char) else: decrypted_line.append(char) decrypted_lines.append(\'\'.join(decrypted_line)) return decrypted_lines"},{"question":"The country of Zogrania is known for its complex network of rivers and canals. To ensure efficient transportation and prevent congestion, the Zogranian government uses a system where each river or canal has only one entry and one exit point. However, it has been observed that the efficiency of the travel network can be significantly improved by determining the minimum number of river or canal segments that need to be used to travel from one point to another. Given a map of the Zogranian river network represented by a graph with nodes (points) and edges (river or canal segments), you need to help the government by finding the shortest path between two given points. INPUT: The first line contains an integer N, which represents the number of nodes (points) in the graph. The second line contains an integer E, which represents the number of edges (river or canal segments). The next E lines contain two integers each, U and V indicating that there is an edge between points U and V. The last line contains two integers, S and T, which are the starting and ending points respectively. OUTPUT: Print the minimum number of river or canal segments required to travel from point S to point T. If there is no path between point S and point T, print \\"NO PATH\\". Constraints: 1 ≤ N ≤ 100 1 ≤ E ≤ 500 1 ≤ U, V, S, T ≤ N S != T SAMPLE INPUT 5 6 1 2 2 3 3 4 4 5 1 3 3 5 1 5 SAMPLE OUTPUT 2 Explanation: In the given graph, the shortest path from point 1 (S) to point 5 (T) is 1 -> 3 -> 5, which consists of 2 segments. Therefore, the output is 2.","solution":"from collections import deque def shortest_path(N, E, edges, S, T): # Create adjacency list for the graph graph = {i: [] for i in range(1, N+1)} for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path queue = deque([(S, 0)]) # (current node, distance) visited = set() while queue: current, dist = queue.popleft() if current == T: return dist visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, dist + 1)) return \\"NO PATH\\""},{"question":"You are given an array of N integers, where N is an odd number. Your task is to find the maximum product of three distinct elements from this array. -----Constraints----- - 3 leq N leq 100000 - N is odd. - -10^4 leq A_i leq 10^4 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print a single integer, the maximum product of three distinct elements from the array. -----Sample Input----- 5 1 3 5 7 9 -----Sample Output----- 315 - The maximum product is obtained by multiplying the three largest numbers: 5, 7, and 9. Therefore, the result is 5 * 7 * 9 = 315. -----Sample Input----- 7 -10 -10 5 2 3 4 6 -----Sample Output----- 600 - The maximum product is obtained by multiplying the three numbers: -10, -10, and 6. Therefore, the result is -10 * -10 * 6 = 600.","solution":"def maximum_product_of_three(N, A): Returns the maximum product of three distinct elements from the array :param N: int: The number of elements in the array (odd number) :param A: List[int]: The list of integers :return: int: The maximum product of three distinct elements A.sort() # Maximum product can be either: # 1. Product of three largest numbers # 2. Product of the two smallest numbers (which could be negative) and the largest number return max(A[-1] * A[-2] * A[-3], A[0] * A[1] * A[-1])"},{"question":"A large corporation has implemented a new file access system for its employees. Each employee can access a set of files, and they can also temporarily delegate access rights to other employees for certain files. You need to write a program that determines whether an employee has access to a particular file, either directly or through delegation. Input: - An integer M representing the number of access rules. - M lines follow, each containing three strings: Employee1, Employee2, and File. This means Employee1 has delegated access to File to Employee2. Note that each employee name and file name is composed of alphanumeric characters and no spaces. - Then a single line containing two strings: Employee and File, representing the employee and the file we want to check access for. Output: - \\"YES\\" if the employee has access to the file, either directly or through delegation. - \\"NO\\" otherwise. Constraints: - 1 ≤ M ≤ 100 - There can be up to 1000 employees and files in total. Example: Input: 4 Alice Bob Report1 Bob Charlie Report1 Charlie Dave Report1 Eve Frank Report2 Charlie Report1 Output: YES In this example, Alice delegates access to Report1 to Bob, who delegates it to Charlie, who delegates it to Dave. Therefore, Charlie has access to Report1.","solution":"def has_access(M, access_rules, query_employee, query_file): # Create a dictionary to keep track of file access delegations access_dict = {} for employee1, employee2, file in access_rules: if file not in access_dict: access_dict[file] = {} if employee1 not in access_dict[file]: access_dict[file][employee1] = set() access_dict[file][employee1].add(employee2) # Create a set to keep track of visited employees to avoid cycles visited = set() def dfs(employee, file): if employee in visited: return False visited.add(employee) if file in access_dict and employee in access_dict[file]: for delegate in access_dict[file][employee]: if delegate == query_employee or dfs(delegate, file): return True return False for file in access_dict: for employee in access_dict[file]: if dfs(employee, file): return \\"YES\\" return \\"NO\\" # Input data input_data = [ (\\"Alice\\", \\"Bob\\", \\"Report1\\"), (\\"Bob\\", \\"Charlie\\", \\"Report1\\"), (\\"Charlie\\", \\"Dave\\", \\"Report1\\"), (\\"Eve\\", \\"Frank\\", \\"Report2\\") ] query_employee = \\"Charlie\\" query_file = \\"Report1\\" print(has_access(4, input_data, query_employee, query_file))"},{"question":"You are given a string and your task is to find the first non-repeating character in it and return its index. If it doesn\'t exist, return -1. Example 1: Input: \\"leetcode\\" Output: 0 Example 2: Input: \\"loveleetcode\\" Output: 2 Example 3: Input: \\"aabb\\" Output: -1 Your Task: You don\'t need to input anything. Complete the function `firstUniqueChar()` which takes a string `s` as the input parameter and returns the index of the first non-repeating character. Constraints: - The string will contain only lowercase letters. - The length of the string will be at most 10^5.","solution":"def firstUniqueChar(s): Returns the index of the first non-repeating character in the string s. If there are no non-repeating characters, returns -1. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Iterate over the string and find the first character with count 1 for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Given an integer array `nums`, your task is to determine whether it is possible to rearrange the elements of `nums` such that the absolute difference between any two adjacent elements is at most 1. If such a rearrangement exists, return the array in any possible valid order. If it is not possible, return an empty array. -----Input----- - The first line of the input contains an integer `t` (1 le t le 100) - the number of test cases. - For each test case: - The first line contains an integer `n` (1 le n le 100) - the size of the array. - The second line contains `n` integers, the elements of the array `nums[i] (-1000 le nums[i] le 1000). -----Output----- For each test case, print one line: - If it is possible to rearrange the array, print the array in any order that satisfies the condition. - If it is impossible, print -1. -----Example----- Input 3 4 1 2 3 4 5 1 3 5 7 9 6 10 11 10 12 11 12 Output 1 2 3 4 -1 10 11 10 11 12 12 -----Note----- In the first test case, the array [1, 2, 3, 4] is already valid since the absolute difference between any two adjacent elements is at most 1. In the second test case, no rearrangement of the array [1, 3, 5, 7, 9] can satisfy the condition because the minimum absolute difference between the smallest and second smallest elements is more than 1. In the third test case, one possible valid rearrangement is [10, 11, 10, 11, 12, 12]. There might be other valid rearrangements as well.","solution":"def rearrange(nums): # Sort the array nums.sort() # Check consecutive differences for i in range(1, len(nums)): if abs(nums[i] - nums[i-1]) > 1: return -1 return nums def process_test_cases(t, test_cases): results = [] for i in range(t): n, nums = test_cases[i] result = rearrange(nums) if result == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, result))) return results def main(inputs): index = 0 t = inputs[index] index += 1 test_cases = [] for _ in range(t): n = inputs[index] index += 1 nums = inputs[index:index + n] index += n test_cases.append((n, nums)) results = process_test_cases(t, test_cases) output = \\"n\\".join(results) return output"},{"question":"You are given a string consisting of lowercase letters and spaces. Your task is to determine the length of the longest word in the string. Input The single line of input contains a string s (1 ≤ length of s ≤ 100) — a string of lowercase letters and spaces. The string contains at least one word and words are separated by single spaces. Output Output a single integer — the length of the longest word in the string. Examples Input the quick brown fox jumps over the lazy dog Output 5 Input hello world Output 5","solution":"def longest_word_length(s): Returns the length of the longest word in the string s. words = s.split() longest_length = max(len(word) for word in words) return longest_length"},{"question":"Alex and Sam play a string manipulation game. They take turns removing characters from a given string. Alex always plays first. On each turn, a player can remove any single character from the string. However, if a player cannot remove a character (i.e., the string is empty), that player loses the game. Both players play optimally. Given the initial string, determine the winner of the game. Input: The first line consists of t, the number of test cases. The next t lines each contain a single string s. Output: Print the answer to each test case on a new line: \'Alex\' if Alex wins the game and \'Sam\' if Sam wins the game. Constraints: 1 ≤ t ≤ 1000000 1 ≤ |s| ≤ 1000000 The total length of all strings combined will not exceed 1000000. SAMPLE INPUT 3 a ab abc SAMPLE OUTPUT Alex Sam Alex Explanation For s = \\"a\\": Alex removes the only character \'a\'. Since the string becomes empty and Sam cannot play, Sam loses. The winner is Alex. For s = \\"ab\\": Alex removes either \'a\' or \'b\'. Sam removes the remaining character. Since the string becomes empty after Sam\'s turn, Alex cannot play. The winner is Sam. For s = \\"abc\\": Alex removes any character (let\'s say \'a\'). Sam now has \\"bc\\". Sam removes \'b\', leaving Alex with \\"c\\". Alex then removes \'c\', making the string empty. Sam cannot play. The winner is Alex.","solution":"def determine_winner(s): Determine the winner of the string manipulation game. # If the length of the string is odd, Alex wins. # If the length of the string is even, Sam wins. if len(s) % 2 == 1: return \'Alex\' else: return \'Sam\' def evaluate_game(t, strings): Evaluate multiple test cases of the game. return [determine_winner(s) for s in strings]"},{"question":"David is trying to build a playlist for his workout sessions. The playlist must satisfy specific requirements: the total duration should not exceed a given maximum duration D (in minutes), and each song must be played at least once. He has n songs in his library, each characterized by its duration in minutes. You are allowed to rearrange the order of the songs in the playlist. Your task is to determine the maximum number of songs David can add to his playlist without exceeding the total duration D. -----Input----- The first line contains two integers n and D (1 le n le 10^5, 1 le D le 10^9) — the number of songs and the maximum duration in minutes, respectively. The second line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 10^6) — the durations of the songs. -----Output----- Output a single integer — the maximum number of songs David can add to his playlist without exceeding the duration D. -----Examples----- Input 5 60 10 20 30 40 50 Output 3 Input 3 10 5 7 8 Output 1 Input 6 100 10 20 15 25 10 30 Output 5 -----Note----- In the first example, David can add songs with durations 10, 20, and 30 minutes, making a total of 60 minutes. In the second example, David can only add one song with duration 5 minutes because adding any other song would exceed the maximum duration D. In the third example, David can add the songs with the durations 10, 10, 15, 20, and 25 minutes, making a total of 80 minutes, which is within the limit of 100 minutes.","solution":"def max_songs(n, D, durations): durations.sort() total_duration = 0 count = 0 for duration in durations: if total_duration + duration <= D: total_duration += duration count += 1 else: break return count"},{"question":"Alice loves playing with sequences of numbers. One day, while experimenting, she stumbled upon an interesting game. Given an integer array, she noticed that for every element in the array, if you subtract it with the minimum element in its subarray (between index i and j), the sum of the results forms a pattern. For example, if the array is [1, 3, 2, 4], the subarray from index 1 to 3 (both inclusive) is [3, 2, 4]. The minimum element in this subarray is 2 and the new array formed after subtraction is [1, 0, 2]. Similarly, the subarray from 0 to 2 is [1, 3, 2], and so on. Alice decides to formalize the problem as follows: given an array and several queries, each query asks for the sum of elements of a transformed subarray where each element is subtracted by the minimum element of that subarray. Define the function `S(i, j)` that calculates the sum of all elements in the subarray from index i to j (both inclusive) after subtracting the minimum element in that subarray from each element. Write a program to help Alice find the sum for each query. Input - The first line contains an integer n (1 ≤ n ≤ 100,000), representing the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the array elements. - The third line contains an integer q (1 ≤ q ≤ 100,000), representing the number of queries. - The next q lines each contain two integers i and j (0 ≤ i ≤ j < n), representing the indices for each query. Output - For each query, output the result in a new line. Example Input 6 1 2 3 1 2 3 3 0 1 1 4 2 5 Output 1 4 4 Explanation For the first query, the subarray from index 0 to 1 is [1, 2]. The minimum element is 1, so the transformed subarray is [0, 1]. The sum of this transformed subarray is 1. For the second query, the subarray from index 1 to 4 is [2, 3, 1, 2]. The minimum element is 1, so the transformed subarray is [1, 2, 0, 1]. The sum of this transformed subarray is 4. For the third query, the subarray from index 2 to 5 is [3, 1, 2, 3]. The minimum element is 1, so the transformed subarray is [2, 0, 1, 2]. The sum of this transformed subarray is 5.","solution":"def S(nums, i, j): Calculate the sum of elements in the subarray from index i to j after subtracting the minimum element in that subarray from each element. subarray = nums[i:j+1] min_element = min(subarray) transformed_sum = sum(x - min_element for x in subarray) return transformed_sum def process_queries(n, nums, queries): Process each query and return the results. results = [] for query in queries: i, j = query results.append(S(nums, i, j)) return results"},{"question":"Aadesh is playing with arrays. He has an array A of length N consisting of distinct integers. Aadesh wants to create a strictly increasing sequence by removing some (possibly none or all) elements from the array. However, Aadesh wants this sequence to be as long as possible. Given the array A, help Aadesh find the length of the longest strictly increasing subsequence that can be derived from A. ------ Input: ------ The first line contains a single integer T, the number of test cases. The first line of each test case contains a single integer N, the number of elements in the array A. The next line contains N space-separated integers, the elements of the array A. ------ Output: ------ Print a single integer, the length of the longest strictly increasing subsequence for each test case. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ A_{i} ≤ 10^{9} ----- Sample Input 1 ------ 2 6 10 22 9 33 21 50 5 3 10 2 1 20 ----- Sample Output 1 ------ 4 3 ----- Explanation 1 ------ For the first sample, the longest increasing subsequence is [10, 22, 33, 50]. Its length is 4. For the second sample, the longest increasing subsequence is [3, 10, 20]. Its length is 3.","solution":"def longest_increasing_subsequence_length(arr): Given a list of distinct integers, return the length of the longest strictly increasing subsequence. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis) def process_test_cases(test_cases): results = [] for N, A in test_cases: results.append(longest_increasing_subsequence_length(A)) return results"},{"question":"Complete the function so that it returns a list of all possible anagrams of the given string. An anagram is a rearrangement of the letters of a word to form another word. The function should not include duplicate anagrams in the result. Usage example: ```python >>> find_anagrams(\'abc\') [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` Note: Assume the input string consists of unique characters only.","solution":"from itertools import permutations def find_anagrams(s): Returns a list of all possible anagrams of the given string. return sorted([\'\'.join(p) for p in set(permutations(s))])"},{"question":"In a small village, a river needs to be crossed daily by villagers using a combination of stepping stones. Each stone is labeled with a number indicating the maximum number of stones one can jump forward from that stone. If the stone has a value of zero, it cannot be landed upon. The goal is to determine the minimum number of jumps required to cross the river or to determine if it’s not possible to cross at all. You are given the number of stepping stones and their corresponding values, and you need to help the villagers determine the minimum number of jumps to cross the river. Input: The first line contains the number of test cases, T. Each test case consists of two lines. The first line of each test case contains a single integer N, the number of stepping stones. The second line contains N integers representing the value on each stepping stone. Output: For each test case, print the minimum number of jumps required to cross the river. If it is not possible to cross, print `-1`. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ stone values ≤ 100 SAMPLE INPUT: 2 6 1 3 5 8 9 2 6 7 6 8 9 4 1 0 3 1 2 0 4 SAMPLE OUTPUT: 3 -1 Explanation: In the first test case, one way to cross the river is: - Jump from the 1st stone to the 2nd stone (1 jump). - Jump from the 2nd stone to the 5th stone (2 jumps). - Jump from the 5th stone to the 10th stone and cross the river (3 jumps). In the second test case, it is not possible to cross the river because after the second stone, you cannot move forward.","solution":"def min_jumps_to_cross_river(num_cases, cases): results = [] for case in cases: n, stones = case if n == 1: results.append(0) continue max_reach, steps, jumps = stones[0], stones[0], 1 if stones[0] == 0: results.append(-1) continue for i in range(1, n): if i == n - 1: results.append(jumps) break max_reach = max(max_reach, i + stones[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: results.append(-1) break steps = max_reach - i return results"},{"question":"You are given `n` items and a list of `n` weights corresponding to each item. Your task is to place these items into two groups such that the absolute difference between the sum of weights of the two groups is minimized. Input The first line of input contains a single integer `n` (1 ≤ n ≤ 1000) — the number of items. The second line contains `n` space-separated integers `w1, w2, ..., wn` (1 ≤ wi ≤ 1000) — the weights of the items. Output Print a single integer — the minimum possible absolute difference between the sums of the weights of the two groups. Example Input 5 3 1 4 2 2 Output 0 Input 4 10 20 15 25 Output 0 Note In the first example, one optimal way to divide the weights is (3, 2, 2) and (1, 4). The sum of the first group is 7 and the sum of the second group is also 7, making the absolute difference 0.","solution":"def min_diff_partition(n, weights): Divide the items into two groups such that the absolute difference between the sum of weights of the two groups is minimized. total_sum = sum(weights) # dp[i][j] - whether it is possible to achieve sum j with first i weights dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): if j >= weights[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - weights[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j]: s1 = j break s2 = total_sum - s1 return abs(s2 - s1)"},{"question":"You are organizing a programming contest and have a list of n registered participants. Each participant adapts differently to the difficulty of problems. Your task is to assign each participant exactly one problem to solve from a set of m given problems, ensuring the problem difficulty matches their skill level. A participant can only solve a problem if the problem\'s difficulty falls within their skill range. Each participant has a minimum and maximum skill range denoted by integers si and ti (si ≤ ti). Each problem has an integer difficulty level pj. Additionally, each problem can be solved by only one participant. You need to determine if there exists a valid assignment of participants to problems under these constraints. Input The first line contains a single integer n — the number of participants (1 ≤ n ≤ 105). Next n lines contain two space-separated integers each, si and ti — the skill range of the i-th participant (1 ≤ si ≤ ti ≤ 109). The next line contains a single integer m — the number of problems (1 ≤ m ≤ 105). Next m lines contain a single integer each, pj — the difficulty of the j-th problem (1 ≤ pj ≤ 109). Output If there exists an assignment of participants to problems such that each problem is solved by exactly one participant and within their skill range, print \\"POSSIBLE\\". In the next line, print m space-separated integers, where the j-th integer is the number of the participant who will solve the j-th problem. If there are multiple correct assignments, print any one of them. If no valid assignment exists, print \\"IMPOSSIBLE\\". Examples Input 3 1 4 2 5 3 6 3 2 5 3 Output POSSIBLE 1 2 3 Input 2 1 3 2 4 3 1 4 5 Output IMPOSSIBLE","solution":"def assign_problems(n, participants, m, problems): This function determines if there exists a valid assignment of participants to problems such that each problem is solved by exactly one participant and within their skill range. :param n: int - number of participants :param participants: List[Tuple[int, int]] - list of tuples where each tuple is (si, ti) representing skill range of participants :param m: int - number of problems :param problems: List[int] - list of problem difficulties :return: Tuple[str, List[int]] - Returns \\"POSSIBLE\\" and a list of participant numbers assigned to each problem if a valid assignment exists; otherwise, returns \\"IMPOSSIBLE\\". import bisect problems_with_index = list(enumerate(problems)) problems_with_index.sort(key=lambda x: x[1]) # Sort problems by their difficulty participants_sorted = sorted(enumerate(participants), key=lambda x: x[1][1]) # Sort participants by their max skill range assignments = [-1] * m # Initialize assignment array used = [False] * n # Track used participants for problem_index, problem_difficulty in problems_with_index: assigned = False # Iterate through participants and find the first not assigned that can solve the current problem for i in range(n): participant_index, (si, ti) = participants_sorted[i] if not used[participant_index] and si <= problem_difficulty <= ti: assignments[problem_index] = participant_index + 1 used[participant_index] = True assigned = True break # If no participant can solve the current problem, return IMPOSSIBLE if not assigned: return \\"IMPOSSIBLE\\", [] return \\"POSSIBLE\\", assignments"},{"question":"# Introduction and Challenge # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ Task **_Given_** a *positive integer n*, **_find the sum_** of its digits multiplied by their respective positions and return that value. ___ # Notes * **_Positions_** are **_1-indexed_**. * **_n_** *is a positive integer* with no leading zeros. ___ # Input >> Output Examples ``` digit_sum(12345) ==> return (55) ``` _Explanation_: * The digits are `1, 2, 3, 4, 5`, each at positions `1, 2, 3, 4, 5` respectively. * The calculation goes: `1*1 + 2*2 + 3*3 + 4*4 + 5*5` which results in `1 + 4 + 9 + 16 + 25 = 55`. ___ ``` digit_sum(100) ==> return (1) ``` _Explanation_: * The digits are `1, 0, 0`, each at positions `1, 2, 3` respectively. * The calculation goes: `1*1 + 0*2 + 0*3` which results in `1 + 0 + 0 = 1`. ___ ``` digit_sum(987) ==> return (68) ``` _Explanation_: * The digits are `9, 8, 7`, each at positions `1, 2, 3` respectively. * The calculation goes: `9*1 + 8*2 + 7*3` which results in `9 + 16 + 21 = 46`. ___ ``` digit_sum(1001) ==> return (4) ``` _Explanation_: * The digits are `1, 0, 0, 1`, each at positions `1, 2, 3, 4` respectively. * The calculation goes: `1*1 + 0*2 + 0*3 + 1*4` which results in `1 + 0 + 0 + 4 = 5`. ___ # Enjoy Coding !!","solution":"def digit_sum(n): Given a positive integer n, find the sum of its digits multiplied by their respective positions. return sum(int(digit) * (i + 1) for i, digit in enumerate(str(n)))"},{"question":"A number N is called a *Wonderful Number* if the sum of its digits is greater than the product of its digits. You are given an array B of size M. You are also given P queries. Each query consists of two integers Y and Z. For each query, find the count of *Wonderful Numbers* in the subarray B[Y:Z]. ------ Input Format ------ - The first line contains a single integer K - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer M - the size of the array B. - The second line of each test case contains M space-separated integers B_{1}, B_{2}, dots, B_{M} denoting the array B. - The third line of each test case contains an integer P - denoting the number of queries. - The i^{th} of the next P lines contains two space-separated integers Y and Z. ------ Output Format ------ For each testcase, - For each query, print in a new line, the count of *Wonderful Numbers* among B[Y], B[Y+1], ldots, B[Z]. ------ Constraints ------ 1 ≤ K ≤ 50 1 ≤ M ≤ 10^{5} 0 ≤ B_{i} < 10^{6} 1 ≤ P ≤ 10^{5} 1 ≤ Y ≤ Z ≤ M - Sum of M over all test cases does not exceed 10^{6}. - Sum of P over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 1 5 13 24 36 45 56 3 1 3 2 4 1 5 ----- Sample Output 1 ------ 2 1 3 ----- Explanation 1 ------ Test case 1: - Query 1: Y = 1, Z = 3. - Number B_{1} = 13: text{Sum of digits} = 1 + 3 = 4, text{Product of digits} = 1 * 3 = 3 Rightarrow 4 > 3 (Wonderful). - Number B_{2} = 24: text{Sum of digits} = 2 + 4 = 6, text{Product of digits} = 2 * 4 = 8 Rightarrow 6 le 8 (Not Wonderful). - Number B_{3} = 36: text{Sum of digits} = 3 + 6 = 9, text{Product of digits} = 3 * 6 = 18 Rightarrow 9 le 18 (Not Wonderful). Hence, 2 Wonderful numbers in the range [1:3]. - Query 2: Y = 2, Z = 4. - Number B_{2} Rightarrow Not Wonderful - Number B_{3} Rightarrow Not Wonderful - Number B_{4} = 45: text{Sum of digits} = 4 + 5 = 9, text{Product of digits} = 4 * 5 = 20 Rightarrow 9 le 20 (Not Wonderful). - Hence, 1 Wonderful number in the range [2:4]. - Query 3: Y = 1, Z = 5. - Number B_{1} Rightarrow Wonderful - Number B_{2} Rightarrow Not Wonderful - Number B_{3} Rightarrow Not Wonderful - Number B_{4} Rightarrow Not Wonderful - Number B_{5} = 56: text{Sum of digits} = 5 + 6 = 11, text{Product of digits} = 5 * 6 = 30 Rightarrow 11 le 30 (Not Wonderful). - Hence, 3 Wonderful numbers in the range [1:5].","solution":"def is_wonderful(n): Returns True if the number n is a Wonderful Number, otherwise False. A number is Wonderful if the sum of its digits is greater than the product of its digits. digits = [int(d) for d in str(n)] digit_sum = sum(digits) digit_product = 1 for d in digits: digit_product *= d return digit_sum > digit_product def wonderful_numbers_count(B, queries): Returns the list of counts of Wonderful Numbers for each given query. B: List[int] - The array of integers. queries: List[Tuple[int, int]] - The list of queries, where each query is a tuple (Y, Z). Returns a list of counts of Wonderful Numbers for each query. results = [] for Y, Z in queries: count = 0 for i in range(Y-1, Z): if is_wonderful(B[i]): count += 1 results.append(count) return results def process_test_cases(test_cases): output = [] for test_case in test_cases: M, B, P, queries = test_case result = wonderful_numbers_count(B, queries) output.extend(result) return output"},{"question":"Given a N*M matrix, return an array of its spiral order traversal. Review the example for more details. Example 1: Input: N = 3, M = 3 matrix[][] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}} Output: 1 2 3 6 9 8 7 4 5 Explanation: Matrix is as below: 1 2 3 4 5 6 7 8 9 Printing it in spiral order will lead to the output as 1 2 3 6 9 8 7 4 5 Example 2: Input: N = 3, M = 4 matrix[][] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}} Output: 1 2 3 4 8 12 11 10 9 5 6 7 Explanation: Matrix is as below: 1 2 3 4 5 6 7 8 9 10 11 12 Printing it in spiral order will lead to the output as 1 2 3 4 8 12 11 10 9 5 6 7 Your Task: You don\'t need to read input or print anything. Complete the function spiralOrder() that takes matrix, N, and M as input parameters and returns a list of integers in order of the values visited in the spiral traversal. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) for the resultant list only. Constraints: 1 <= N, M <= 100 0 <= mat[i][j] <= 1000","solution":"def spiralOrder(matrix, N, M): Returns the spiral order traversal of a given NxM matrix. Args: matrix : List[List[int]] : NxM matrix to be traversed N : int : number of rows in the matrix M : int : number of columns in the matrix Returns: List[int] : list containing the elements of the matrix in spiral order result = [] if not matrix: return result left, right, top, bottom = 0, M - 1, 0, N - 1 while left <= right and top <= bottom: # Traverse from left to right along the top row for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"In a particular programming challenge, you are asked to work with a unique type of matrix called a \\"Rotated Rectangle Matrix\\" (RRM). An RRM is a square matrix of size N x N, derived from rotating and rearranging a rectangle of sequential numbers. Given a positive integer N (where N is guaranteed to be even and 2 ≤ N ≤ 50), the matrix is constructed such that: 1. Each number from 1 to N^2 must be placed exactly once in the matrix. 2. Rows of length N are formed sequentially. 3. Each subsequent row is a 90° rotation of the previous row. For instance, consider N = 4: Original Rectangle (R): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Rotated Rectangle Matrix (RRM): 1 5 9 13 2 6 10 14 3 7 11 15 4 8 12 16 Write a program that generates the Rotated Rectangle Matrix (RRM) for a given N and prints the resulting matrix. Input The first line contains a single integer T, the number of test cases (1 ≤ T ≤ 50). Each of the next T lines contains a positive integer N. Output For each test case, output the N x N Rotated Rectangle Matrix by printing N lines of N space-separated integers. Example Input: 1 4 Output: 1 5 9 13 2 6 10 14 3 7 11 15 4 8 12 16 Note: Ensure the output format is followed precisely, with each row of the matrix printed on a new line, and values in each row separated by a single space.","solution":"def generate_rrm(n): Generates a Rotated Rectangle Matrix (RRM) for a given even integer n. matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): matrix[i][j] = j * n + i + 1 return matrix def rotated_rectangle_matrix(test_cases): result = [] for n in test_cases: matrix = generate_rrm(n) for row in matrix: result.append(\\" \\".join(map(str, row))) return result"},{"question":"Kirk and Spock are constructing a sequence of balanced parentheses. A sequence of parentheses is called balanced if it consists of opening parentheses \'(\' and closing parentheses \')\' and meets the following criteria: 1. Any prefix of the sequence must not have more closing parentheses than opening ones. 2. The total number of opening parentheses must equal the total number of closing parentheses. Kirk gives Spock an integer n representing the number of pairs of parentheses, and the task is to generate all possible sequences of 2n balanced parentheses. -----Input----- The first line contains a single integer n (1 leq n leq 10). -----Output----- Output all possible sequences of balanced parentheses of length 2n, one sequence per line. The sequences can be output in any order. -----Examples----- Input 2 Output (()) ()() Input 3 Output ((())) (()()) (())() ()(()) ()()() -----Note----- In the first example: For n=2, there are two valid sequences: \\"(())\\" and \\"()()\\". In the second example: For n=3, there are five valid sequences: \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", and \\"()()()\\".","solution":"def generate_parentheses(n): Function to generate all combinations of n pairs of balanced parentheses. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than 2 elements, return 0. You must write an algorithm that runs in linear time and uses linear extra space. Example 1: Input: nums = [3,6,9,1] Output: 3 Explanation: The sorted form of the array is [1, 3, 6, 9], the maximum difference is between 6 and 9 which is 3. Example 2: Input: nums = [10] Output: 0 Explanation: The array contains less than 2 elements, return 0. Constraints: - 1 <= nums.length <= 10^5 - 0 <= nums[i] <= 10^9","solution":"def maximum_gap(nums): Returns the maximum difference between two successive elements in the sorted form of nums. If the array contains less than 2 elements, return 0. if len(nums) < 2: return 0 # Radix Sort Helper function def counting_sort(array, exp): n = len(array) output = [0] * n count = [0] * 10 for i in range(n): index = (array[i] // exp) % 10 count[index] += 1 for i in range(1, 10): count[i] += count[i - 1] i = n - 1 while i >= 0: index = (array[i] // exp) % 10 output[count[index] - 1] = array[i] count[index] -= 1 i -= 1 for i in range(n): array[i] = output[i] max_num = max(nums) exp = 1 while max_num // exp > 0: counting_sort(nums, exp) exp *= 10 # Calculate maximum gap max_gap = 0 for i in range(1, len(nums)): max_gap = max(max_gap, nums[i] - nums[i - 1]) return max_gap"},{"question":"Aria loves playing with sequences of parentheses. One day, she came up with the idea of generating all possible balanced parenthesis strings. She defined a balanced parenthesis string as follows: - An empty string is considered balanced. - If \\"A\\" and \\"B\\" are balanced parenthesis strings, then \\"AB\\" is also balanced. - If \\"A\\" is a balanced parenthesis string, then \\"(\\" + A + \\")\\" (i.e., wrapping A with parenthesis) is also balanced. Given an integer n, representing half the length of the required balanced parenthesis strings (i.e., n pairs of parentheses), write a program to calculate the number of distinct balanced parenthesis strings that can be generated. Input The input contains a single integer n (1 ≤ n ≤ 19) — the number of pairs of parentheses. Output Print a single integer — the number of distinct balanced parenthesis strings of length 2*n. Examples Input 2 Output 2 Input 3 Output 5 Note In the first sample, when n=2, there are the following 2 distinct balanced parenthesis strings: (()), ()(). In the second sample, when n=3, there are the following 5 distinct balanced parenthesis strings: ((())), (()()), (())(), ()(()), ()()().","solution":"def catalan_number(n): Function to compute the nth Catalan number, which represents the number of distinct balanced parenthesis strings that can be generated using n pairs of parentheses. if n == 0 or n == 1: return 1 # Table to store results of subproblems catalan = [0] * (n + 1) catalan[0] = 1 catalan[1] = 1 for i in range(2, n + 1): for j in range(i): catalan[i] += catalan[j] * catalan[i - j - 1] return catalan[n] def count_balanced_parenthesis(n): Wrapper function to count the number of balanced parenthesis strings of length 2*n. return catalan_number(n)"},{"question":"Given a string S consisting of lowercase English letters and the characters \'?\' and \'*\', you need to transform the string into a valid palindrome by replacing each \'?\' with exactly one letter (\'a\' to \'z\') and each \'*\' with zero or more letters (\'a\' to \'z\'). A palindrome is a string that reads the same forward and backward. You must determine if it is possible to transform the given string S into a valid palindrome. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The next T lines each contain a string S. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to transform the string into a valid palindrome. Otherwise, output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S consists of lowercase English letters, \'?\', and \'*\'. ----- Sample Input 1 ------ 3 a?c?a ab*ba aa?*?aa ----- Sample Output 1 ------ YES YES YES ----- Explanation 1 ------ Test Case 1: Replace the question marks with \'a\' to get \\"acaca\\", which is a palindrome. Test Case 2: The string \\"ab*ba\\" can be transformed by replacing the \'*\' with an empty string to form \\"abba\\", which is a palindrome. Test Case 3: Replace the question marks with \'a\' and the asterisk with an empty string to get \\"aaaaaaa\\", which is a palindrome. Note: Strings containing \'*\' can also form palindromes by replacing \'*\' with multiple characters as long as symmetry is maintained.","solution":"def can_transform_to_palindrome(S): Determines if it\'s possible to transform the given string S into a valid palindrome by replacing \'?\' with any letter and \'*\' with any sequence of letters. left = 0 right = len(S) - 1 while left <= right: if S[left] == S[right] or (S[left] in \'?*\' or S[right] in \'?*\'): left += 1 right -= 1 else: return \\"NO\\" return \\"YES\\" def determine_palindrome_possibility(T, test_cases): results = [] for S in test_cases: results.append(can_transform_to_palindrome(S)) return results"},{"question":"Monica is an amateur astronomer who enjoys observing the sky from her backyard. She has a telescope with a limited field of view, and she wants to determine the maximum number of distinct stars she can observe in a single observation session. The night sky is represented by a rectangular grid of dimensions m times n. Each cell in the grid may contain a star or be empty. Monica can choose any subgrid of dimensions a times b to look at, but the telescope only shows the stars within that selected subgrid. To help Monica, you need to write a program that calculates the maximum number of distinct stars she can see while using her telescope to observe any possible subgrid of dimensions a times b. -----Input----- The input consists of a single test case. The first line contains two integers m and n (1 le m, n le 100) indicating the dimensions of the night sky grid. The following m lines each contain n characters, where each character is either \'*\' indicating a star or \'.\' indicating an empty cell. The next line contains two integers a and b (1 le a le m and 1 le b le n) indicating the dimensions of the subgrid that Monica can select to observe. -----Output----- Display the maximum number of distinct stars Monica can see in any subgrid of dimensions a times b. -----Examples----- Sample Input: 5 5 *.*.. ..*.* *.... ..*.* *..** 2 2 Sample Output: 3","solution":"def max_stars_in_subgrid(m, n, grid, a, b): Function to determine the maximum number of distinct stars in any subgrid of dimensions a x b. :param m: Number of rows in the grid :param n: Number of columns in the grid :param grid: List of strings representing the night sky grid :param a: Number of rows in the subgrid :param b: Number of columns in the subgrid :return: Maximum number of distinct stars in any subgrid of dimensions a x b max_stars = 0 for start_row in range(m - a + 1): for start_col in range(n - b + 1): star_count = 0 for i in range(start_row, start_row + a): for j in range(start_col, start_col + b): if grid[i][j] == \'*\': star_count += 1 max_stars = max(max_stars, star_count) return max_stars"},{"question":"Write a function `centeredTriangle(n)` that prints an equilateral triangle pattern of height `n` made up of asterisks (\'*\'). Each row in the triangle should be centered relative to the widest row in the triangle. Example: Input: 4 Output: ``` * *** ***** ******* ``` Your Task: You don\'t need to input anything. Complete the function `centeredTriangle()` which takes an integer `n` as the input parameter and prints the centered triangle pattern. Constraints: 1 <= n <= 20","solution":"def centeredTriangle(n): Prints an equilateral triangle pattern of height n made up of asterisks (\'*\'). Each row in the triangle is centered relative to the widest row in the triangle. for i in range(1, n + 1): stars = \'*\' * (2 * i - 1) spaces = \' \' * (n - i) print(spaces + stars)"},{"question":"A large company has a data storage structure that is crucial for its operations. The structure can be represented as a grid of size n x m, where each cell in the grid can either be empty (denoted by a 0) or occupied by a file system (denoted by a 1). The company requires an efficient way to quickly determine whether the storage structure has a rectangular region fully occupied by the file system (i.e., all 1s). Your task is to write a program that determines if there exists at least one rectangular region within the grid that is completely filled with 1s. An example of such a rectangular region is a sub-grid with the top-left corner at (i, j) and the bottom-right corner at (k, l) where all cells (p, q) for i ≤ p ≤ k and j ≤ q ≤ l contain the value 1. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) representing the number of rows and columns in the grid. Each of the next n lines contains m integers, each either 0 or 1, representing the storage structure. -----Output----- Print \\"YES\\" if there exists a rectangular region filled entirely with 1s. Otherwise, print \\"NO\\". -----Examples----- Input 4 5 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 Output YES Input 3 3 0 0 0 0 0 0 0 0 0 Output NO","solution":"def is_rectangular_region_filled(grid): Determines if there exists at least one rectangular region filled entirely with 1s. :param grid: List of Lists containing integers (0 or 1) :return: \\"YES\\" if such a region exists, otherwise \\"NO\\" n = len(grid) m = len(grid[0]) if n > 0 else 0 for i in range(n - 1): for j in range(m - 1): if grid[i][j] == 1 and grid[i][j + 1] == 1 and grid[i + 1][j] == 1 and grid[i + 1][j + 1] == 1: return \\"YES\\" return \\"NO\\""},{"question":"You are given a number n and an integer array of length n. Your task is to write a program that finds the first unique element in the array. A unique element is one that appears exactly once in the array. Input The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the length of the array. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the elements of the array. Output Print a single integer — the first unique element in the array. If there is no unique element, print -1. Examples Input 5 4 5 1 2 2 Output 4 Input 4 2 2 3 3 Output -1","solution":"def first_unique(n, arr): Finds the first unique element in the array. Parameters: n (int): the length of the array arr (list): a list of integers (the array) Returns: int: the first unique element in the array or -1 if there is no unique element. from collections import Counter # Count the frequency of each element in the array count = Counter(arr) # Iterate through the array to find the first unique element for num in arr: if count[num] == 1: return num return -1"},{"question":"Alice and Bob are playing a game with numbers. Alice gives Bob two integers, A and B, and asks him to calculate the product of A and B. If the product is even, Bob wins; otherwise, Alice wins. -----Input:----- - First line will contain the two integers A and B. -----Output:----- For each testcase, output \\"Bob\\" if the product is even, otherwise output \\"Alice\\". -----Constraints----- - 1 leq A leq 200 - 1 leq B leq 200 -----Sample Input:----- 3 8 -----Sample Output:----- Bob","solution":"def winner(A, B): Determines the winner based on the product of A and B. If the product is even, Bob wins; otherwise, Alice wins. :param A: An integer between 1 and 200 inclusive. :param B: An integer between 1 and 200 inclusive. :return: A string \\"Bob\\" if the product is even, otherwise \\"Alice\\". product = A * B if product % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You are given a 2D grid of dimensions NxM with non-negative integers representing the cost to move through each cell. You start from the top-left cell (1,1) and want to reach the bottom-right cell (N,M). You can only move to the right or down from a cell. Additionally, you are provided with Q queries. Each query consists of 3 integers: x, y, and C. You have to determine if there exists a path from (1,1) to (x,y) such that the total cost to reach (x,y) from (1,1) is equal to C. If such a path exists, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". The cost of a path is the sum of the costs of the cells traversed starting from (1,1) and ending at (x,y). Constraints: - 1 ≤ N, M ≤ 1000 - 1 ≤ Q ≤ 50000 - 1 ≤ x ≤ N - 1 ≤ y ≤ M - 0 ≤ cost of each cell ≤ 10^4 - 0 ≤ C ≤ 10^9 Input Input is given from Standard Input in the following format: ``` N M grid[1,1] grid[1,2] ... grid[1,M] ... grid[N,1] grid[N,2] ... grid[N,M] Q x_1 y_1 C_1 ... x_Q y_Q C_Q ``` Output Print the answers to the i-th query in the i-th line. Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 2 3 3 21 2 2 6 ``` Output ``` POSSIBLE IMPOSSIBLE ``` Explanation: - For the first query, there is a path from (1,1) to (3,3) with the cost of 1+2+3+6+9=21, so the answer is \\"POSSIBLE\\". - For the second query, the minimum cost to reach (2,2) is 1+2+5=8, which is not equal to 6, so the answer is \\"IMPOSSIBLE\\".","solution":"def min_cost_path(grid, N, M): dp = [[0]*M for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp def possible_path_to_cost(dp, x, y, C): return dp[x-1][y-1] == C def solve(N, M, grid, Q, queries): dp = min_cost_path(grid, N, M) results = [] for x, y, C in queries: if possible_path_to_cost(dp, x, y, C): results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results # Example usage: N = 3 M = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Q = 2 queries = [ [3, 3, 21], [2, 2, 6] ] result = solve(N, M, grid, Q, queries) for res in result: print(res)"},{"question":"Alice is planning her monthly expenses and needs to know her total spend on different categories. As her friend, you decide to help her by writing a program that will read her transaction data and calculate the total amount spent in each category. You are given a series of transaction data. Each transaction is recorded in the format \\"DATE CATEGORY AMOUNT\\". DATE is in the format DD-MM-YYYY. CATEGORY is a string that defines the type of expense, and AMOUNT is a floating-point number that denotes the money spent. Write a program that calculates the total amount spent in each unique category. Input and Output First line, N (1 ≤ N ≤ 100), the number of transactions. The next N lines each contain a single transaction in the specified format. For each category that appears in the transactions, print the category and the total amount spent in that category. Output categories in the order they appeared in the input. SAMPLE INPUT 5 01-08-2021 Groceries 50.75 01-08-2021 Entertainment 15.20 02-08-2021 Groceries 30.90 03-08-2021 Bills 100.00 03-08-2021 Entertainment 25.00 SAMPLE OUTPUT Groceries 81.65 Entertainment 40.20 Bills 100.00","solution":"def calculate_expenses(transactions): Returns a dictionary with categories as keys and total amounts spent as values. expense_dict = {} for transaction in transactions: _, category, amount = transaction.split(\\" \\", 2) amount = float(amount) if category in expense_dict: expense_dict[category] += amount else: expense_dict[category] = amount return expense_dict def format_expenses(expense_dict): Formats the expense dictionary into a list of strings suitable for printing. formatted_expenses = [] for category, amount in expense_dict.items(): formatted_expenses.append(f\\"{category} {amount:.2f}\\") return formatted_expenses"},{"question":"After a flood, many streets in the city are blocked by fallen trees. As a result, delivery routes are disrupted. Tom, a delivery driver, needs your help to determine the shortest possible route to complete his deliveries. Tom\'s delivery route can be represented as a grid of city blocks. Some of the blocks are inaccessible due to fallen trees. Tom starts at the top-left corner of the grid and needs to reach the bottom-right corner. He can only move up, down, left, or right, and he cannot pass through blocks with fallen trees. Write a program that finds the shortest route from the top-left corner to the bottom-right corner of the grid. If no such route exists, return -1. -----Input----- Input starts with two integers `n` and `m` (2 <= n, m <= 100), representing the number of rows and columns in the grid. The next `n` lines each contain `m` characters, representing the grid. Each character is either \'.\' (a traversable block) or \'#\' (an inaccessible block). The top-left corner (0, 0) and the bottom-right corner (n-1, m-1) are always traversable. -----Output----- Output the length of the shortest route from the top-left to the bottom-right corner. If no route exists, return -1. -----Examples----- Sample Input 1: 4 4 .... ..#. .#.. .... Sample Output 1: 6 Sample Input 2: 4 4 .... .... .... Sample Output 2: -1","solution":"from collections import deque def shortest_route(n, m, grid): Finds the shortest route from the top-left corner to the bottom-right corner of the grid. Parameters: - n (int): Number of rows in the grid. - m (int): Number of columns in the grid. - grid (list of str): The grid represented as a list of strings. Returns: - int: The length of the shortest route or -1 if no route exists. if not grid or grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # If the bottom-right corner is reached if row == n-1 and col == m-1: return dist # Explore neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\': visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"Alex is playing a game with tokens. Each token has a number written on it, and the tokens are arranged in a straight line. The game involves selecting tokens from the line according to the following rules: 1. Alex can pick any number of tokens, but he cannot pick two consecutive tokens. 2. The score Alex gets for a selected sequence of tokens is the sum of the numbers on those tokens. Given a list of integers representing the numbers on the tokens, help Alex determine the maximum score he can achieve. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10000) representing the number of tokens. The second line contains n integers a_1, a_2, ..., a_n (-10^4 leq a_i leq 10^4) representing the numbers on the tokens. -----Output----- Print the maximum score Alex can achieve. -----Examples----- Input 4 1 2 9 4 Output 10 Input 5 3 2 5 10 7 Output 15 -----Note----- In the first sample, the optimal selection is to pick the tokens with numbers 1 and 9, resulting in a score of 10. In the second sample, the optimal selection is to pick the tokens with numbers 3, 10, and 2, resulting in a score of 15.","solution":"def max_score(tokens): n = len(tokens) if n == 0: return 0 if n == 1: return max(0, tokens[0]) dp = [0] * n dp[0] = max(0, tokens[0]) dp[1] = max(dp[0], tokens[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + tokens[i]) return dp[-1] def solve_game(n, token_values): return max_score(token_values)"},{"question":"**Add Digits Until Single Digit You are tasked with writing a function named `add_digits_until_single()` which will take a non-negative integer and repeatedly add its digits until the sum becomes a single-digit number. Write the function to achieve this objective. For example, if the input number is 38, the process would be carried out as 3 + 8 = 11, then 1 + 1 = 2. Thus, the final result to be returned would be 2. Your function should follow the example to ensure accuracy. Function signature: ```python def add_digits_until_single(n: int) -> int: pass ``` Example: ```python add_digits_until_single(38) # 2 add_digits_until_single(12345) # 6 add_digits_until_single(0) # 0 ``` Constraints: - The input number `n` will always be a non-negative integer.","solution":"def add_digits_until_single(n: int) -> int: Given a non-negative integer, repeatedly add the digits until a single-digit number is obtained. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Sarah is learning how to manipulate strings and is interested in palindrome transformations. A palindrome is a string that reads the same backward as forward. She wants to create a function that can transform any given string into a palindrome by performing a sequence of operations. An operation consists of inserting any one character from \'a\' to \'z\' at any position in the string. The goal is to transform the string into a palindrome by performing the minimal number of insertions. Write a function `min_insertions_to_palindrome(s)` that takes a string `s` as input and returns the minimum number of insertions needed to transform `s` into a palindrome. Constraints * 1 leq |s| leq 1000 * The string `s` contains only lowercase English letters. Input * A single string `s`. Output * An integer representing the minimum number of insertions required. Examples Input ab Output 1 Input race Output 3 Input aabb Output 2","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions needed to transform `s` into a palindrome. def lcs(a, b): Helper function to find the length of the longest common subsequence between a and b. n, m = len(a), len(b) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] # Reverse the string to find the common subsequence reverse_s = s[::-1] lcs_length = lcs(s, reverse_s) # Minimum insertions to make the string a palindrome return len(s) - lcs_length"},{"question":"You are given a string consisting of lowercase alphabets and you need to find the first non-repeating character in the string. If all characters are repeating, return `-1`. Example: Input: swiss Output: w Input: racecar Output: e Input: xxxyyy Output: -1 Input: The input consists of a single string of length `n`. Output: Return the first non-repeating character in the string. If all characters are repeating, return `-1`. Constraints: 1<=n<=10^5","solution":"def first_non_repeating_character(s): Finds the first non-repeating character in the string. If all characters are repeating, returns -1. :param s: Input string consisting of lowercase alphabets. :return: The first non-repeating character or -1 if all characters are repeating. char_count = {} # First pass to count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for char in s: if char_count[char] == 1: return char return -1"},{"question":"Airstream Inc. has developed a streaming service that maintains a list of movies watched by its users. Each user has their own watch history, and the service provides a way to query the number of unique movies watched by users over a given period. Your task is to implement the query mechanism for this streaming service. The service needs to handle two types of operations: 1. `watch u m` - The user `u` watched the movie `m`. 2. `query u start end` - Report the number of unique movies that user `u` watched between `start` and `end`. Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of operations. Then, `n` lines follow, each containing one of the two types of operations. 1. The `watch u m` operation. - `u` (1 ≤ u ≤ 100,000) - user identifier. - `m` (1 ≤ m ≤ 1,000,000,000) - movie identifier. 2. The `query u start end` operation. - `u` (1 ≤ u ≤ 100,000) - user identifier. - `start` and `end` (1 ≤ start ≤ end ≤ the index of the latest `watch` operation for user `u`) - the range of indices to query. Output For each `query` operation, output a single line with the number of unique movies watched by user `u` in the specified time period. Example Input 7 watch 1 101 watch 1 102 watch 2 101 watch 1 102 query 1 1 3 watch 1 103 query 1 2 5 Output 2 3","solution":"def airstream(operations): watch_history = {} results = [] for op in operations: parts = op.split() if parts[0] == \'watch\': u, m = int(parts[1]), int(parts[2]) if u not in watch_history: watch_history[u] = [] watch_history[u].append(m) elif parts[0] == \'query\': u, start, end = int(parts[1]), int(parts[2]), int(parts[3]) if u in watch_history: unique_movies = len(set(watch_history[u][start-1:end])) results.append(unique_movies) else: results.append(0) return results # Example usage operations = [ \\"watch 1 101\\", \\"watch 1 102\\", \\"watch 2 101\\", \\"watch 1 102\\", \\"query 1 1 3\\", \\"watch 1 103\\", \\"query 1 2 5\\" ] print(airstream(operations)) # Output: [2, 3]"},{"question":"Sara is designing a new game that involves creating sequences of non-decreasing numbers. She has a list of n integers and wants to create a sequence of exactly k integers by removing some elements from the list. She asks for your help to determine whether it is possible to create such a sequence. Given the list of integers, check if it\'s possible to select exactly k of them to form a non-decreasing sequence. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of integers in the list and the required length of the sequence. The second line contains n integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 10^9) — the integers in the list. -----Output----- In the only line print \\"YES\\" if it is possible to choose exactly k integers to form a non-decreasing sequence, and \\"NO\\" otherwise. -----Examples----- Input 5 3 4 3 5 6 1 Output YES Input 4 5 2 3 3 1 Output NO -----Note----- For the first example, she can choose the integers 3, 5, and 6 to form a non-decreasing sequence. For the second example, it is not possible to choose 5 integers from the list (since there are only 4 available), hence the output is \\"NO\\".","solution":"def can_form_non_decreasing_sequence(n, k, arr): Determines if it is possible to select exactly k integers from the list of n integers to form a non-decreasing sequence. Parameters: n (int): Number of integers in the list. k (int): Required length of the non-decreasing sequence. arr (list of int): List of integers. Returns: str: \\"YES\\" if it\'s possible to form a non-decreasing sequence of length k, otherwise \\"NO\\". # Sort the array to check feasibility arr.sort() # If we can pick k elements from the sorted array, always it will be non-decreasing if len(arr) >= k: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array consisting of ( n ) integers. Your task is to transform the array so that the sum of the absolute differences between each element and the median of the array is minimized. The median of an array of odd length is the middle element when the array is sorted, while for an array of even length it\'s the average of the two middle elements. Write a function that, given an array of integers, returns the sum of the absolute differences between each element and the median of the array. **Input** The first line contains an integer ( n ) ((1 leq n leq 10^5)), the number of elements in the array. The second line contains ( n ) integers ( a_i ) ((1 leq |a_i| leq 10^9)), the elements of the array. **Output** Output the minimized sum of absolute differences between each element and the median of the array. **Example** **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 6 ``` **Explanation:** The median of the array `[1, 2, 3, 4, 5]` is `3`. The absolute differences are `|1 - 3| + |2 - 3| + |3 - 3| + |4 - 3| + |5 - 3|`, which equals `2 + 1 + 0 + 1 + 2 = 6`. --- **Input:** ``` 4 2 2 3 3 ``` **Output:** ``` 2 ``` **Explanation:** The median of the array `[2, 2, 3, 3]` is `2.5`. The absolute differences are `|2 - 2.5| + |2 - 2.5| + |3 - 2.5| + |3 - 2.5|`, which equals `0.5 + 0.5 + 0.5 + 0.5 = 2`.","solution":"def minimize_absolute_differences(nums): Returns the minimum sum of absolute differences between each element of the array and the median. nums.sort() n = len(nums) # For odd length array, the median is the middle element if n % 2 == 1: median = nums[n // 2] else: # For even length array, the median is the average of the two middle elements median = nums[n // 2 - 1] return sum(abs(num - median) for num in nums)"},{"question":"Given a string S consisting of balanced parentheses, square brackets, and curly braces, determine if the string is valid and properly nested. A string is considered valid if all opening brackets have a corresponding closing bracket of the same type and are properly nested. Examples: Input: S = \\"()\\" Output: true Input: S = \\"([{}])\\" Output: true Input: S = \\"(]\\" Output: false Your Task: Complete the function isValidParentheses() which takes a string as input and returns a boolean value indicating whether the string is valid and properly nested. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 ≤ |S| ≤ 100","solution":"def isValidParentheses(S): Determine whether a given string of parentheses, square brackets, and curly braces is valid and properly nested. Args: S (str): Input string. Returns: bool: True if the string is valid and properly nested, False otherwise. stack = [] matching = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in S: if char in matching.values(): stack.append(char) elif char in matching.keys(): if stack == [] or matching[char] != stack.pop(): return False else: # Invalid character return False return stack == []"},{"question":"John is organizing a robot race in a grid of size M x N. The grid contains a few obstacles, and you must write a program to help John calculate the minimum steps a robot needs to reach from the top-left corner of the grid (0, 0) to the bottom-right corner (M-1, N-1) avoiding all the obstacles. The robot can move up, down, left, or right one step at a time. -----Input----- - The first line contains an integer T, the number of test cases. The description of each test case follows. - The first line of each test case contains two integers M and N, denoting the number of rows and columns in the grid, respectively. - The next M lines contain N characters each, denoting the grid. Each character is either \'0\' (empty space) or \'1\' (obstacle). -----Output----- For each test case, output a single line containing the minimum number of steps required. If there is no valid path, print -1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ M, N ≤ 100 - The top-left and bottom-right cells are guaranteed to be empty. -----Example----- Input: 2 3 3 000 010 000 4 4 0000 1110 0000 0110 Output: 4 6 -----Explanation:----- Test Case 1: Starting from (0, 0), one possible path with the minimum steps is to go right, right, down, down. Test Case 2: Starting from (0, 0), one possible path with the minimum steps is to go right, right, down, down, right, down.","solution":"from collections import deque def min_steps_to_reach_end(grid, M, N): # Directions array for moving up, down, left, right directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Queue for BFS queue = deque([(0, 0, 0)]) # (x, y, steps) # Set for visited nodes visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # If we\'ve reached the bottom-right corner if x == M - 1 and y == N - 1: return steps # Explore all four directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check the boundary conditions and if the cell is not an obstacle and not visited if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] == \'0\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If there\'s no valid path return -1 def robot_race(test_cases): results = [] for M, N, grid in test_cases: result = min_steps_to_reach_end(grid, M, N) results.append(result) return results"},{"question":"Given an array of n integers and a positive integer k, you need to calculate the maximum sum of k consecutive elements in the array. Example 1: Input: arr[] = {100, 200, 300, 400}, k = 2 Output: 700 Explanation: The maximum sum of 2 consecutive elements is 300 + 400 = 700. Example 2: Input: arr[] = {1, 4, 2, 10, 23, 3, 1, 0, 20}, k = 4 Output: 39 Explanation: The maximum sum of 4 consecutive elements is 4 + 2 + 10 + 23 = 39. Your Task: This is a function problem. The input is already taken care of by the driver code. You need to complete the function maxSumK() that takes an array (arr), size of array (n), an integer (k), and returns the maximum sum of k consecutive elements. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^4 1 ≤ k ≤ n","solution":"def maxSumK(arr, n, k): Returns the maximum sum of k consecutive elements in the array. Args: arr : list of ints : The input array n : int : The size of the array k : int : The number of consecutive elements to sum Returns: int : The maximum sum of k consecutive elements if n < k or k <= 0 or not arr: return 0 # Calculate the initial window sum of the first k elements window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window through the array from k to n for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Aria and Ezra are playing a game involving strings and subsequences. Aria gives Ezra a string `s` composed of lowercase alphabets. Ezra\'s task is to determine the length of the longest palindromic subsequence in `s`. A palindromic subsequence is a sequence that appears in the same order in both forward and reverse directions. The characters do not need to be contiguous in the string `s`. Help Ezra by writing a function that returns the length of the longest palindromic subsequence in `s`. ---Input--- The first line contains a single integer `t` (1 leq t leq 100) — the number of test cases. For each test case: The first line contains a string `s` (1 leq text{length of } s leq 1000). ---Output--- For each test case, print the length of the longest palindromic subsequence in `s`. ---Examples--- Input 3 bbbab cbbd abcba Output 4 2 5 ---Note--- In the first test case, one of the longest palindromic subsequences is \\"bbbb\\" which has a length 4. In the second test case, one possible longest palindromic subsequence is \\"bb\\" with length 2. In the third test case, the whole string \\"abcba\\" is a palindrome with length 5.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if s[i] == s[j]: dp[i][j] = 2 + dp[i+1][j-1] else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] def process_test_cases(input_data): Processes multiple test cases and returns the results. t = int(input_data[0]) results = [] for i in range(1, t + 1): s = input_data[i] results.append(longest_palindromic_subsequence(s)) return results"},{"question":"Mr. Stark developed a mechanism to control the Iron Man suit, where the suits respond to only specific commands encoded as integers. The Iron Man suits, powered by advanced AI, identify a particular set of numbers known as \\"Stark Numbers.\\" A \\"Stark Number\\" is defined as an integer that is divisible by the sum of its digits. Pepper Potts has been tasked with ensuring that the correct commands are given to the suits. She realizes that determining if a number is a \\"Stark Number\\" can help in validating the commands. For example, 18 is a Stark Number because 18 is divisible by 1 + 8 = 9. Help Pepper determine whether a given integer command is a \\"Stark Number\\" or not. # Example 1: Input: command = 18 Output: \\"Stark Number\\" Explanation: 18 is divisible by the sum of its digits, 9. # Example 2: Input: command = 23 Output: \\"Non-Stark Number\\" Explanation: 23 is not divisible by the sum of its digits, 5. # Your Task: You need to write a function `isStarkNumber()` that takes an integer command as input and returns \\"Stark Number\\" if it meets the criteria, otherwise returns \\"Non-Stark Number\\". # Expected Time Complexity: O(log n) # Expected Auxiliary Space: O(1) # Constraints: 1 <= command <= 10^9","solution":"def isStarkNumber(command): Returns \\"Stark Number\\" if the given command is divisible by the sum of its digits, otherwise returns \\"Non-Stark Number\\". original_number = command sum_of_digits = 0 while command > 0: sum_of_digits += command % 10 command //= 10 if original_number % sum_of_digits == 0: return \\"Stark Number\\" else: return \\"Non-Stark Number\\""},{"question":"Ivan is organizing a racing competition with his toy cars. There are n toy cars and each car has a certain speed. Ivan wants to create two teams of cars - Team A and Team B. Each team should have at least one car, and every car must belong to exactly one team. The goal is to make the difference between the sum of speeds of cars in Team A and Team B as small as possible. Help Ivan determine the minimum possible difference between the sum of speeds of the two teams. -----Input----- The first line of the input contains a single integer n (2 ≤ n ≤ 100) - the number of cars. The second line contains n integers, separated by spaces, where the ith integer represents the speed of the ith car. The speed of a car is a non-negative integer and does not exceed 1000. -----Output----- Print one integer - the minimum possible difference between the sum of speeds of the cars in two teams. -----Examples----- Input 4 10 20 15 5 Output 0 Input 3 7 2 9 Output 0 Input 5 1 2 3 4 5 Output 1 -----Note----- In the first sample, one possible optimal division is Team A: [10, 15], and Team B: [20, 5] with both teams having a sum of 25. The difference is |25 - 25| = 0. In the second sample, one possible optimal division is Team A: [9], and Team B: [7, 2] with both teams having a sum of 9. The difference is |9 - 9| = 0. In the third sample, one possible optimal division is Team A: [1, 4, 5], and Team B: [2, 3] resulting in a difference of |10 - 9| = 1.","solution":"def min_speed_difference(n, speeds): total_sum = sum(speeds) # Using dynamic programming to find the solution possible_sums = {0} for speed in speeds: current_sums = possible_sums.copy() for s in current_sums: possible_sums.add(s + speed) min_diff = float(\'inf\') for s in possible_sums: other_sum = total_sum - s min_diff = min(min_diff, abs(s - other_sum)) return min_diff"},{"question":"Given a binary matrix of size N x M, where 0 represents water and 1 represents land, your task is to find the number of islands in the matrix. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the matrix are surrounded by water. # Input Format: - The first line contains two integers, N and M, where 1 ≤ N, M ≤ 100, representing the number of rows and columns in the matrix respectively. - The next N lines contain M integers (either 0 or 1) separated by spaces, representing the binary matrix. # Output Format: - Print a single integer representing the number of islands. # Example Input: ``` 4 5 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 ``` # Example Output: ``` 3 ``` # Explanation: In the given matrix, there are 3 islands. The first island is formed by the top-left 2x2 submatrix of 1\'s. The second island is a single 1 located at (3, 3). The third island is formed by the bottom-right 2x2 submatrix of 1\'s.","solution":"def num_islands(matrix): if not matrix: return 0 N = len(matrix) M = len(matrix[0]) def dfs(matrix, i, j): if i < 0 or j < 0 or i >= N or j >= M or matrix[i][j] == 0: return matrix[i][j] = 0 # Mark the land as visited # visit all 4 adjacent cells (up, down, left, right) dfs(matrix, i+1, j) dfs(matrix, i-1, j) dfs(matrix, i, j+1) dfs(matrix, i, j-1) island_count = 0 for i in range(N): for j in range(M): if matrix[i][j] == 1: island_count += 1 dfs(matrix, i, j) return island_count"},{"question":"Alice has n tasks to complete, each task i (1 le i le n) takes t_i units of time to complete. She wants to distribute the tasks to d days in such a way that the maximum time spent on any single day is minimized. Each task must be completed on exactly one day, and each day must have at least one task. Can you help Alice distribute the tasks over the days to minimize the maximum time spent on any single day? ----- Input ----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains two integers n and d (1 le d le n le 10^4) — the number of tasks and the number of days respectively. The second line contains n space-separated integers t_1, t_2, dots, t_n (1 le t_i le 10^4) — the time units required for each task. It is guaranteed that the sum of n over all test cases does not exceed 10^5. ----- Output ----- For each test case, if it is possible to distribute the tasks so as to minimize the maximum time spent on a single day, print YES followed by n integers d_1, d_2, dots, d_n, where d_i (1 le d_i le d) is the day on which the i-th task should be completed. If there are multiple solutions, print any. If it\'s not possible to distribute the tasks according to the given constraints, print NO. ----- Examples ----- Input 2 5 3 4 2 6 3 5 6 2 1 3 2 6 5 4 Output YES 1 2 3 1 3 YES 1 1 2 2 2 2 ----- Note ----- In the first test case, the first day has tasks taking 4+3=7 time units, the second day has tasks taking 2 time units, and the third day has tasks taking 6+5=11 time units. The maximum time spent is 11 which isn\'t further minimized. In the second test case, the first day has tasks taking 1+3=4 time units, and the second day has tasks taking 2+6+5+4=17 time units. The solution minimizes the maximum time spent on any single day.","solution":"def distribute_tasks(t, test_cases): from itertools import accumulate results = [] for case in test_cases: n, d, tasks = case tasks.sort(reverse=True) days = [0] * d allocation = [-1] * n def is_possible(max_time): nonlocal allocation days[:] = [0] * d for i, task in enumerate(tasks): for j in range(d): if days[j] + task <= max_time: allocation[i] = j + 1 days[j] += task break if allocation[i] == -1: return False return True low, high = max(tasks), sum(tasks) while low < high: mid = (low + high) // 2 if is_possible(mid): high = mid else: low = mid + 1 if is_possible(low): results.append(f\\"YESn{\' \'.join(map(str, allocation))}\\") else: results.append(\\"NO\\") return results def process_inputs(inputs): iterator = iter(inputs) t = int(next(iterator)) test_cases = [] for _ in range(t): n, d = map(int, next(iterator).strip().split()) tasks = list(map(int, next(iterator).strip().split())) test_cases.append((n, d, tasks)) return t, test_cases"},{"question":"Write a program that, given an integer N, determines the N-th prime number. -----Input----- The first line contains a positive integer N, where 1 ≤ N ≤ 10000. -----Output----- Output the N-th prime number. -----Examples----- Sample Input 1: 1 Sample Output 1: 2 Sample Input 2: 5 Sample Output 2: 11","solution":"def nth_prime(n): Returns the N-th prime number. if n < 1: return None primes = [2] num = 3 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > num: break if num % prime == 0: is_prime = False break if is_prime: primes.append(num) num += 2 return primes[n-1]"},{"question":"Implement a function that takes an array of n integers, where n > 1, and returns an array output such that output[i] is equal to the product of all the elements of the input array except the element at index i. Example 1: Input: [1,2,3,4] Output: [24, 12, 8, 6] Explanation: 24 = 2 * 3 * 4 12 = 1 * 3 * 4 8 = 1 * 2 * 4 6 = 1 * 2 * 3 Example 2: Input: [5, 6, 2] Output: [12, 10, 30] Explanation: 12 = 6 * 2 10 = 5 * 2 30 = 5 * 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function productExceptSelf() which takes the array and returns the resulting array, output. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 2 ≤ n ≤ 1000 1 ≤ elements of array ≤ 100","solution":"def productExceptSelf(nums): n = len(nums) output = [1] * n left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n-1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"You are given a matrix of size n x m, where each cell contains a non-negative integer representing the height of terrain at that point. You can move up, down, left, or right from one cell to an adjacent cell. Your goal is to determine the minimum effort required to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). The effort to travel from one cell to another is defined as the absolute difference in height between the two cells. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the matrix. Each of the following n lines contains m integers representing the heights of the cells. Output The output should be a single integer — the minimum effort required to travel from the top-left corner to the bottom-right corner. Examples Input 3 3 1 2 2 3 8 2 5 3 5 Output 2 Input 2 3 1 2 3 3 8 4 Output 1","solution":"import heapq def min_effort_path(n, m, heights): Determine the minimum effort required to travel from the top-left corner to the bottom-right corner of the terrain matrix. def neighbors(x, y): for nx, ny in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]: if 0 <= nx < n and 0 <= ny < m: yield nx, ny # Min-heap to keep track of the minimum effort cells to be processed heap = [(0, 0, 0)] # (effort, x, y) efforts = [[float(\'inf\')] * m for _ in range(n)] efforts[0][0] = 0 while heap: effort, x, y = heapq.heappop(heap) if x == n - 1 and y == m - 1: return effort for nx, ny in neighbors(x, y): new_effort = max(effort, abs(heights[nx][ny] - heights[x][y])) if new_effort < efforts[nx][ny]: efforts[nx][ny] = new_effort heapq.heappush(heap, (new_effort, nx, ny)) return efforts[n-1][m-1] # Example Usage: # n, m = 3, 3 # heights = [[1, 2, 2], [3, 8, 2], [5, 3, 5]] # print(min_effort_path(n, m, heights)) # Output: 2"},{"question":"Problem Description You are given a special sequence of numbers called the \\"Mystery Sequence\\". The sequence is defined by a single integer N (1 ≤ N ≤ 10^6), which represents the length of the sequence. Your task is to compute the number of distinct integers in this sequence. The Mystery Sequence is generated using the following algorithm: 1. Start with an empty list. 2. For each integer i from 1 to N: - If i is odd, add 2 * i to the list. - If i is even, add i // 2 to the list. Determine the number of unique integers in the Mystery Sequence for a given value of N. # Input A single integer N, the length of the Mystery Sequence. # Output Output the number of distinct integers in the generated Mystery Sequence. # Example Input 1 ``` 5 ``` Output 1 ``` 4 ``` Input 2 ``` 10 ``` Output 2 ``` 6 ``` # Explanation For Input 1: - When `i = 1`: 2 * 1 = 2 - When `i = 2`: 2 // 2 = 1 - When `i = 3`: 2 * 3 = 6 - When `i = 4`: 4 // 2 = 2 - When `i = 5`: 2 * 5 = 10 The resulting sequence is [2, 1, 6, 2, 10]. The distinct integers in this sequence are [1, 2, 6, 10]. For Input 2: - When `i = 1`: 2 * 1 = 2 - When `i = 2`: 2 // 2 = 1 - When `i = 3`: 2 * 3 = 6 - When `i = 4`: 4 // 2 = 2 - When `i = 5`: 2 * 5 = 10 - When `i = 6`: 6 // 2 = 3 - When `i = 7`: 2 * 7 = 14 - When `i = 8`: 8 // 2 = 4 - When `i = 9`: 2 * 9 = 18 - When `i = 10`: 10 // 2 = 5 The resulting sequence is [2, 1, 6, 2, 10, 3, 14, 4, 18, 5]. The distinct integers in this sequence are [1, 2, 3, 4, 5, 6, 10, 14, 18].","solution":"def mystery_sequence_distinct_count(N): unique_elements = set() for i in range(1, N + 1): if i % 2 == 1: # i is odd unique_elements.add(2 * i) else: # i is even unique_elements.add(i // 2) return len(unique_elements)"},{"question":"A chef at a restaurant prepares meals for customers. For each meal, the chef needs a certain number of vegetables. Each vegetable has a specific size, and meals cannot be prepared unless the chef can select a group of vegetables whose combined size meets or exceeds the required meal size. You are given the sizes of the vegetables available and the size required for each meal. Your task is to determine whether the chef can always make a meal with the given vegetables. If the chef can prepare the meal, return “POSSIBLE”, otherwise return “IMPOSSIBLE”. Input The first line of the input contains an integer T, the number of test cases (1 ≤ T ≤ 50). Each test case is structured as follows: - The first line contains two integers: the number of vegetables N (1 ≤ N ≤ 20) and the meal size M (1 ≤ M ≤ 100). - The second line contains N integers representing the sizes of the vegetables (1 ≤ vegetabes_size ≤ 20). Output For each test case, output “POSSIBLE” if the chef can prepare the meal with the available vegetables, otherwise output “IMPOSSIBLE”. Example Input 3 5 10 2 3 4 5 1 3 7 2 2 2 4 8 4 3 3 2 Output POSSIBLE IMPOSSIBLE POSSIBLE","solution":"def is_meal_possible(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] vegetable_sizes = test_cases[i][1] vegetable_sizes.sort(reverse=True) total_size, index = 0, 0 while total_size < M and index < len(vegetable_sizes): total_size += vegetable_sizes[index] index += 1 if total_size >= M: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results # Example usage: # T = 3 # test_cases = [ # ([5, 10], [2, 3, 4, 5, 1]), # ([3, 7], [2, 2, 2]), # ([4, 8], [4, 3, 3, 2]) # ] # print(is_meal_possible(T, test_cases)) # Expected output: # [\'POSSIBLE\', \'IMPOSSIBLE\', \'POSSIBLE\']"},{"question":"A logistics company has a fleet of delivery trucks operating in various cities. Each truck can be represented as an object with a unique identifier (e.g., truck number), city name, and capacity (number of packages it can carry). The company wants to develop a system to manage these trucks and queries about them based on their current assignment and capacity. You need to implement a function that will manage the trucks based on the following commands: 1. **ADD**: Register a new truck. 2. **ASSIGN**: Assign a truck to a new city. 3. **QUERY**: Find how many trucks are available in a given city that can carry a specified number of packages. Each command will have one of the following formats: * `ADD x y z` - Register a truck with identifier `x`, initial city `y`, and maximum capacity `z`. * `ASSIGN x y` - Move the truck with identifier `x` to city `y`. * `QUERY y c` - Output the number of trucks currently in city `y` that can carry at least `c` packages. # Input - First line: Single integer `q` (1 ≤ `q` ≤ 10^5) — the number of commands. - Next `q` lines: Each line contains one command in the format specified above. # Output - For each `QUERY` command, output a single integer — the number of trucks in the specified city that can carry at least the given number of packages. # Example Input ``` 7 ADD 1 NewYork 10 ADD 2 Boston 15 ADD 3 NewYork 12 QUERY NewYork 10 ASSIGN 1 Boston QUERY NewYork 10 QUERY Boston 15 QUERY Boston 10 ``` Output ``` 2 1 1 2 ``` # Explanation 1. `ADD 1 NewYork 10` adds truck 1 to NewYork with a capacity of 10. 2. `ADD 2 Boston 15` adds truck 2 to Boston with a capacity of 15. 3. `ADD 3 NewYork 12` adds truck 3 to NewYork with a capacity of 12. 4. `QUERY NewYork 10` counts trucks in NewYork with a capacity of at least 10 (`1` and `3`), so the output is `2`. 5. `ASSIGN 1 Boston` moves truck 1 from NewYork to Boston. 6. `QUERY NewYork 10` now only truck 3 remains in NewYork with required capacity, so the output is `1`. 7. `QUERY Boston 15` finds one truck in Boston (`2`) with capacity of at least 15, so the output is `1`. 8. `QUERY Boston 10` finds both trucks (`1` and `2`) in Boston with capacity of at least 10, so the output is `2`. Your task is to implement this system efficiently to handle a large number of commands within the constraints provided.","solution":"class LogisticsCompany: def __init__(self): self.trucks = {} self.trucks_in_city = {} def add_truck(self, identifier, city, capacity): self.trucks[identifier] = (city, capacity) if city not in self.trucks_in_city: self.trucks_in_city[city] = [] self.trucks_in_city[city].append(identifier) def assign_truck(self, identifier, new_city): if identifier in self.trucks: old_city, capacity = self.trucks[identifier] self.trucks[identifier] = (new_city, capacity) if old_city in self.trucks_in_city: self.trucks_in_city[old_city].remove(identifier) if new_city not in self.trucks_in_city: self.trucks_in_city[new_city] = [] self.trucks_in_city[new_city].append(identifier) def query_trucks(self, city, min_capacity): count = 0 if city in self.trucks_in_city: for identifier in self.trucks_in_city[city]: _, capacity = self.trucks[identifier] if capacity >= min_capacity: count += 1 return count def process_commands(commands): lc = LogisticsCompany() results = [] for command in commands: cmd = command.split() if cmd[0] == \\"ADD\\": identifier = int(cmd[1]) city = cmd[2] capacity = int(cmd[3]) lc.add_truck(identifier, city, capacity) elif cmd[0] == \\"ASSIGN\\": identifier = int(cmd[1]) city = cmd[2] lc.assign_truck(identifier, city) elif cmd[0] == \\"QUERY\\": city = cmd[1] min_capacity = int(cmd[2]) results.append(lc.query_trucks(city, min_capacity)) return results"},{"question":"John is building a garden, and you\'re helping him with the watering system. The garden can be represented as a grid of size X x Y, where each cell has a specific plant requiring different amounts of water. John wants to install sprinklers such that every plant gets exactly the amount of water it needs. Each sprinkler can water a subgrid of size PxQ. Find the minimum number of sprinklers needed to water the entire garden. Each sprinkler can be moved and adjusted to work on any subgrid of size PxQ, but they cannot overlap in their effective area. Input: First line contains two integers, X and Y, the dimensions of the garden. Next X lines contain Y integers each, representing the water requirements of each plant. Next line contains two integers, P and Q, the dimensions of the sprinkler\'s effective area. Output: For each test case, output a single integer, the minimum number of sprinklers required to water the entire garden. Constraints: 1 ≤ X, Y ≤ 1000 1 ≤ Water requirement of each plant ≤ 10 1 ≤ P ≤ X 1 ≤ Q ≤ Y SAMPLE INPUT 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2 3 SAMPLE OUTPUT 4 Explanation The garden is of size 4x5, and the sprinkler can water a 2x3 subgrid. To cover the entire garden without overlapping, we need to place at least 4 sprinklers. For example, one could cover the top-left 2x3, another the top-right 2x3 (extended if needed), another the bottom-left 2x3, and the fourth one the bottom-right 2x3. Thus, the minimum number of sprinklers is 4.","solution":"def min_sprinklers_required(X, Y, garden, P, Q): Given the dimensions of the garden (X, Y), the 2D list of water requirements, and the dimensions of the sprinkler\'s effective area (P, Q), this function calculates the minimum number of sprinklers required to water the entire garden. # To cover the garden grid, we can determine how many sprinklers are needed by dividing the dimensions # of the garden by the dimensions of the sprinkler\'s effective area. # Number of sprinklers needed along the X dimension of the garden sprinklers_x = (X + P - 1) // P # Number of sprinklers needed along the Y dimension of the garden sprinklers_y = (Y + Q - 1) // Q # The total number of sprinklers required is the product of the two values return sprinklers_x * sprinklers_y"},{"question":"Given a string S and an integer N, determine the total number of unique palindromic substrings of length exactly N that can be found in the string. Print the number modulo 1000000007. A palindrome is a string that reads the same backward as forward. Substrings must be contiguous sequences of characters within the string. Example 1: Input: S = \\"ababa\\" N = 3 Output: 2 Explanation: The palindromic substrings of length 3 are \\"aba\\" and \\"bab\\". Example 2: Input: S = \\"racecar\\" N = 3 Output: 1 Explanation: The only palindromic substring of length 3 is \\"cec\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function countUniquePalindromicSubstrings() which takes a String S and an integer N, and returns the answer. Expected Time Complexity: O(|S| * N) Expected Auxiliary Space: O(P), where P is the number of unique palindromic substrings found. Constraints: 1 <= |S| <= 10^{4} 1 <= N <= |S|","solution":"def countUniquePalindromicSubstrings(S, N): MOD = 1000000007 # Function to determine if a string is a palindrome def is_palindrome(s): return s == s[::-1] unique_palindromes = set() for i in range(len(S) - N + 1): substring = S[i:i + N] if is_palindrome(substring): unique_palindromes.add(substring) return len(unique_palindromes) % MOD"},{"question":"You are a wildlife biologist studying the migration patterns of a particular species of bird. Each bird has a unique ID and moves between a series of checkpoint locations. The checkpoints are placed at specific coordinates on a 2D plane. You want to determine if a given bird ever returns to a previously visited checkpoint. -----Input----- The first line contains an integer n (1 ≤ n ≤ 50), representing the number of movements the bird makes. Then n lines follow, each containing two integers xi and yi (-10^4 ≤ xi, yi ≤ 10^4) representing the coordinates of the checkpoint the bird visits. -----Output----- Print \\"Yes\\" (without quotes) if the bird returns to a previously visited checkpoint. Otherwise, print \\"No\\" (without quotes). -----Examples----- Input 5 1 2 3 4 5 6 1 2 7 8 Output Yes Input 4 1 1 2 2 3 3 4 4 Output No -----Note----- In the first example, the bird visits the checkpoint (1,2) twice. Therefore, the output is \\"Yes\\". In the second example, all checkpoints visited by the bird are unique. Therefore, the output is \\"No\\".","solution":"def bird_returns(n, checkpoints): Determines if the bird returns to a previously visited checkpoint. :param n: Number of checkpoints (int) :param checkpoints: List of tuples containing checkpoint coordinates (list of tuples) :return: \\"Yes\\" if the bird returns to a previously visited checkpoint, otherwise \\"No\\" (str) visited = set() for checkpoint in checkpoints: if checkpoint in visited: return \\"Yes\\" visited.add(checkpoint) return \\"No\\""},{"question":"You are given a list of strings. Your task is to write a function `longest_unique_substring` that finds the longest substring in each string that contains only unique characters, and returns the length of that substring. For example: ``` [\\"abcabcbb\\", \\"bbbbb\\", \\"pwwkew\\", \\"\\"] The corresponding output should be: [3, 1, 3, 0] Explanation: - In \\"abcabcbb\\", the longest substring with unique characters is \\"abc\\", which has length 3. - In \\"bbbbb\\", the longest substring with unique characters is \\"b\\", which has length 1. - In \\"pwwkew\\", the longest substring with unique characters is \\"wke\\", which has length 3. - For the empty string, the longest substring with unique characters has length 0. ``` Write a function `longest_unique_substring` that takes a list of strings as input and returns a list of integers, each representing the length of the longest substring with unique characters for each of the input strings. # Function Signature ```python def longest_unique_substring(strings: List[str]) -> List[int]: pass ``` # Constraints - The input list will contain between 1 and 1000 strings. - Each string in the input list will have length between 0 and 10,000 characters. - The strings will contain only printable ASCII characters (32-126).","solution":"def longest_unique_substring(strings): Return a list of the lengths of the longest substrings with unique characters for each string in the input list. def length_of_longest_unique_substring(s): char_map = {} left = longest = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right longest = max(longest, right - left + 1) return longest return [length_of_longest_unique_substring(s) for s in strings]"},{"question":"A company wants to send promotional emails to its customers. However, due to some restrictions, they can only send emails if the email address has a certain format. An email address is considered valid if it follows these rules: 1. It must start with an alphabetic character. 2. It must contain exactly one \'@\' symbol. 3. The domain name (the part after the \'@\') must be at least two characters long. 4. It cannot contain any spaces or other special characters except \'.\', \'_\', and \'-\'. You are required to write a function to validate a list of email addresses. The function should return a list of booleans indicating whether each email address is valid or not. Input: - A single integer, n, representing the number of email addresses. - A list of n email addresses as strings. Output: - A list of n booleans, where each boolean corresponds to whether the respective email address is valid (True) or not (False). Constraints: - 1 <= n <= 100 - Each email address length will be between 1 and 254 characters. Example: Input: 3 [\\"test.email@domain.com\\", \\"123@domain.com\\", \\"valid.email@domain\\"] Output: [True, False, True]","solution":"import re def validate_emails(n, email_addresses): Validates a list of email addresses based on given rules. Parameters: n (int): Number of email addresses. email_addresses (list of str): The email addresses to validate. Returns: list of bool: List of booleans indicating whether each email address is valid. def is_valid_email(email): # regex for validating email regex = r\'^[a-zA-Z][a-zA-Z0-9._-]*@[a-zA-Z0-9._-]{2,}.[a-zA-Z]{2,}\' return bool(re.match(regex, email)) return [is_valid_email(email) for email in email_addresses]"},{"question":"Given a list of non-negative integers, implement a function to perform the following operations efficiently: * insert(x): Insert integer x to the list. If x already exists in the list, increment the count of x. * delete(x): Decrement the count of integer x by 1. If the count becomes 0, remove x from the list completely. * query(x): Return the count of integer x in the list. Initially, the list is empty. Constraints * 1 leq q leq 300,000 * 0 leq x leq 1,000,000 Input The input consists of the following format: ``` q query_1 query_2 : query_q ``` Each query query_i is in one of the following formats: * insert x * delete x * query x Output For each query of type `query`, output the count of integer x on a new line. Example Input ``` 8 insert 3 insert 3 insert 5 query 3 query 5 delete 3 query 3 delete 5 ``` Output``` 2 1 1 0 ```","solution":"class IntegerList: def __init__(self): self.elements = {} def insert(self, x): if x in self.elements: self.elements[x] += 1 else: self.elements[x] = 1 def delete(self, x): if x in self.elements: if self.elements[x] > 1: self.elements[x] -= 1 else: del self.elements[x] def query(self, x): return self.elements.get(x, 0)"},{"question":"Anna has recently started learning about simple encryption techniques. She has come across the Caesar Cipher technique which involves shifting each letter in a string by a fixed number of positions down the alphabet. For this example, only uppercase letters will be considered, and the shift will wrap around the end of the alphabet (i.e., \'Z\' shifted by 1 would become \'A\'). Given a string consisting of uppercase letters and a fixed integer shift value, write a program that encrypts the given string using the Caesar Cipher technique. Input The input consists of a single string `s` (1 ≤ |s| ≤ 100), followed by a single integer `k` (0 ≤ k ≤ 25), separated by a space. Output The output should be the encrypted string using the Caesar Cipher technique. Examples Input HELLO 3 Output KHOOR Input XYZ 2 Output ZAB","solution":"def caesar_cipher(s, k): Encrypts the given string `s` using the Caesar Cipher technique with shift `k`. encrypted = [] for char in s: new_char = chr(((ord(char) - ord(\'A\') + k) % 26) + ord(\'A\')) encrypted.append(new_char) return \'\'.join(encrypted)"},{"question":"You are given a list of n integers. In each move, you can select two indices i and j (1 ≤ i, j ≤ n) such that i ≠ j, and set one of the elements to the bitwise AND of the two original elements. Your goal is to minimize the maximum element in the list after performing some number of operations. Input The first line of the input contains an integer n (2 ≤ n ≤ 100 000) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1 000 000 000) — the elements of the list. Output Output a single integer — the minimum possible maximum element you can get after performing some sequence of operations. Example Input 4 1 2 3 4 Output 1","solution":"def minimize_max_element(n, arr): Function to minimize the maximum element in the list by performing operations of setting one of the elements to the bitwise AND of two elements. return min(arr)"},{"question":"Given a positive integer num consisting of digits ranging from 1 to 9, return the minimum number of digits that need to be changed to make num a palindrome (a palindrome is a number that reads the same backward as forward). Example 1: Input: num = 12321 Output: 0 Explanation: The number is already a palindrome. Example 2: Input: num = 12345 Output: 2 Explanation: Changing the first and last digit to 5 and 1 respectively will make the number 54321, which is a palindrome. Example 3: Input: num = 1223 Output: 1 Explanation: Changing the last digit to 2 will make the number 1221, which is a palindrome. Constraints: 1 <= num <= 10^5","solution":"def min_changes_to_palindrome(num): Given a positive integer num, returns the minimum number of digits that need to be changed to make num a palindrome. num_str = str(num) n = len(num_str) changes = 0 for i in range(n // 2): if num_str[i] != num_str[n - 1 - i]: changes += 1 return changes"},{"question":"-----Question----- Imagine you are given an integer array representing the scores of students in a class. You need to determine how many students scored above the average score. -----Input----- The input consists of two lines: 1. The first line contains an integer n (1 ≤ n ≤ 100) representing the number of students. 2. The second line contains n integers separated by spaces, where each integer represents the score of a student (0 ≤ score ≤ 100). -----Output----- Output a single integer representing the number of students who scored above the average score of the class. -----Example----- Input: 5 10 20 30 40 50 Output: 2","solution":"def count_students_above_average(n, scores): Returns the number of students who scored above the average score. Parameters: - n: number of students (integer) - scores: list of integers representing the scores of students Returns: - integer: number of students who scored above the average average_score = sum(scores) / n count_above_average = sum(score > average_score for score in scores) return count_above_average"},{"question":"Write a Python function that takes a list of integers as input and returns a list of integers where each element is the product of all the elements in the original list except for the one at the given index. Note: You are not allowed to use division in your solution. SAMPLE INPUT [1, 2, 3, 4] SAMPLE OUTPUT [24, 12, 8, 6] Explanation For each position in the input list, calculate the product of all other elements. For example: - For position 0: 2 * 3 * 4 = 24 - For position 1: 1 * 3 * 4 = 12 - For position 2: 1 * 2 * 4 = 8 - For position 3: 1 * 2 * 3 = 6","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements in the input list. :param nums: List[int] - List of integers :return: List[int] - List of products n = len(nums) output = [1] * n # Calculate left products left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] # Calculate right products and multiply with left products right_product = 1 for i in range(n-1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"You are given a rectilinear grid where each cell can either be empty or contain an obstacle. You need to find the largest empty square sub-grid within this grid. The empty square sub-grid is a contiguous block of cells, all of which are empty. The grid is represented by a 2D array of integers where 1 represents an obstacle and 0 represents an empty cell. Your task is to write a program that finds the side length of the largest empty square sub-grid. Input The first line contains two integers n and m — the number of rows and columns in the grid (1 ≤ n, m ≤ 300). Each of the next n lines contains m integers (either 0 or 1) representing the grid. Output Print a single integer — the side length of the largest empty square sub-grid. Examples Input 5 5 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 0 1 0 Output 2 Input 3 3 1 1 1 1 0 0 1 0 0 Output 2 Input 3 3 1 1 1 1 1 1 1 1 1 Output 0","solution":"def largest_empty_square(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) # Create a DP table with the same dimensions as the grid dp = [[0]*m for _ in range(n)] max_side = 0 # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side def find_largest_empty_square(n, m, grid_lines): grid = [] for line in grid_lines: grid.append(list(map(int, line.split()))) return largest_empty_square(grid)"},{"question":"Design a function that takes in a single integer `n` and finds the sum of the product of all unique pairs of integers from 1 to `n`. # Input - An integer `n` (1 ≤ n ≤ 10^4) # Output - A single integer which is the sum of the product of all unique pairs of integers from 1 to `n`. # Example For `n = 4`, the output should be: ```plaintext 20 ``` Explanation: The unique pairs when `n = 4` are: ``` (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4) ``` and their products are: ``` 1*2 = 2 1*3 = 3 1*4 = 4 2*3 = 6 2*4 = 8 3*4 = 12 ``` Summing these products gives: ``` 2 + 3 + 4 + 6 + 8 + 12 = 35 ``` # Constraints - 1 ≤ n ≤ 10^4 - The output should be calculated efficiently avoiding nested loops wherever possible. # Note Your function should return the sum for any given `n` efficiently.","solution":"def sum_of_product_of_pairs(n): Takes an integer n and returns the sum of the product of all unique pairs from 1 to n. total_sum = 0 for i in range(1, n + 1): total_sum += i * (n * (n + 1) // 2 - (i * (i + 1) // 2)) return total_sum"},{"question":"In a fictional kingdom, there are several cities connected by bidirectional roads. The citizens of this kingdom are facing some trouble as the roads are not in good condition and are prone to getting blocked during bad weather. The governor wants to ensure that even if one road gets blocked, it should still be possible to travel between any two cities using the remaining roads. More formally, the road network should remain connected even after removing any single road. You are tasked with determining if the current road network meets this requirement. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — describing a bidirectional road between city u and city v. It\'s guaranteed that there’s at most one road between any pair of cities. -----Output----- Print \\"YES\\" if the road network will remain connected after removing any single road. Otherwise, print \\"NO\\". -----Examples----- Input 5 5 1 2 2 3 3 4 4 5 5 1 Output YES Input 5 4 1 2 2 3 3 4 4 5 Output NO","solution":"def find_bridges(n, m, roads): from collections import defaultdict, deque def dfs(v, parent, disc, low, graph, bridges, time): children = 0 disc[v] = low[v] = time[0] time[0] += 1 for to in graph[v]: if disc[to] == -1: children += 1 dfs(to, v, disc, low, graph, bridges, time) low[v] = min(low[v], low[to]) if low[to] > disc[v]: bridges.append((v, to)) elif to != parent: low[v] = min(low[v], disc[to]) graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) disc = [-1] * (n + 1) low = [-1] * (n + 1) bridges = [] time = [0] for i in range(1, n + 1): if disc[i] == -1: dfs(i, -1, disc, low, graph, bridges, time) return \\"NO\\" if bridges else \\"YES\\" # Main function to read input and output result def road_network(n, m, roads): return find_bridges(n, m, roads)"},{"question":"Given a string `S` and an integer `K`, the task is to determine the number of distinct substrings of length `K`. If there are no substrings of length `K`, the output should be `0`. For example, given `S = \\"banana\\"` and `K = 3`, the distinct substrings of length `K` are: \\"ban\\", \\"ana\\", \\"nan\\". Thus, the output would be `3`. Example 1: Input: `S = \\"banana\\"`, `K = 3` Output: `3` Explanation: The distinct substrings of length 3 are \\"ban\\", \\"ana\\", and \\"nan\\". Example 2: Input: `S = \\"aaaaa\\"`, `K = 2` Output: `1` Explanation: The only distinct substring of length 2 is \\"aa\\". Example 3: Input: `S = \\"hello\\"`, `K = 1` Output: `4` Explanation: The distinct substrings of length 1 are \\"h\\", \\"e\\", \\"l\\", \\"o\\". Example 4: Input: `S = \\"abc\\"`, `K = 4` Output: `0` Explanation: There are no substrings of length 4. Notes: - 1 <= |S| <= 1000 - 1 <= K <= 1000 - S contains only lowercase English letters.","solution":"def count_distinct_substrings(S, K): Given a string S and an integer K, count the number of distinct substrings of length K. if K > len(S): return 0 substrings = set() for i in range(len(S) - K + 1): substring = S[i:i+K] substrings.add(substring) return len(substrings)"},{"question":"Arya is preparing a coding competition and she wanted to create a leaderboard system that can handle scores accurately. She needs to implement a program that ranks participants based on their scores. If two participants have the same score, they should have the same rank, and the next rank should be skipped accordingly. For example, if two participants are tied for first place, the next participant should be ranked third, not second. Your task is to write a program that reads participant scores and assigns ranks accordingly. Input - The first line contains an integer n (1 ≤ n ≤ 1000), indicating the number of participants. - The second line contains n space-separated integers representing the scores of the participants. The scores are non-negative integers (0 ≤ score ≤ 100). Output - Print a single line of n space-separated integers representing the ranks of the participants in the order they appeared in the input. SAMPLE INPUT 5 100 90 90 85 80 SAMPLE OUTPUT 1 2 2 4 5","solution":"def rank_participants(scores): Given a list of participant scores, return their ranks. sorted_scores = sorted(enumerate(scores), key=lambda x: x[1], reverse=True) ranks = [0] * len(scores) current_rank = 1 for i, (index, score) in enumerate(sorted_scores): if i == 0: ranks[index] = current_rank else: if score == sorted_scores[i-1][1]: ranks[index] = current_rank else: current_rank = i + 1 ranks[index] = current_rank return ranks"},{"question":"Train Carriage Seating A train\'s seating arrangement is organized such that passengers must vacate the carriage in an orderly manner. The train carriage has seats arranged in rows and aisles such that passengers move through the aisle to exit the train. The configuration of seats is as follows: - There are n rows and m aisle seats in each row. Passengers can be in any row or aisle seat. - Only one passenger can occupy a seat or position in the aisle at any time. - Passengers can move to an adjacent seat or an adjacent position in the aisle in each step. If a passenger is currently in an aisle, they can move to the next position in the aisle or exit if there\'s no passenger blocking the path. Your task is to write a program that calculates the minimum number of steps required for all passengers to vacate the train carriage, given their initial positions. Input: - The input consists of multiple test cases. - For each test case, the first line contains three integers: n (number of rows), m (number of aisle positions in each row), p (number of passengers). - The next p lines each contain two integers i and j, representing the initial position of the passenger. Here, (i, j) denotes the (row, seat/aisle position) starting from 1. Rows and aisle positions are both 1-indexed. Output: - For each test case, output a single integer, the minimum steps required for all passengers to vacate the carriage. Example: Input: 3 2 5 1 1 1 2 2 1 2 2 3 1 Output: 4 Explanation: - The train carriage has 3 rows with 2 aisle positions in each row. - There are 5 passengers with initial positions (1,1), (1,2), (2,1), (2,2), (3,1). - The minimum number of steps required for all passengers to vacate the train carriage is 4 steps. Note: - Each row has a fixed number of aisle positions. - Passengers move to the next row towards the exit in each step. - All passengers must vacate the train without crossing each other.","solution":"def min_steps_to_vacate(n, m, p, passengers): Calculates the minimum steps required for all passengers to vacate the train carriage. Parameters: n (int): Number of rows in the train. m (int): Number of aisle positions in each row. p (int): Number of passengers. passengers (list): List of tuples representing initial positions of passengers. Returns: int: Minimum number of steps required for all passengers to vacate. max_steps = 0 for passenger in passengers: i, j = passenger max_steps = max(max_steps, i) return max_steps"},{"question":"`largest_possible_number` function receives an array of non-negative integers and should return the largest possible number that can be formed by concatenating the elements of the array. Examples: ``` [3, 30, 34, 5, 9] => \\"9534330\\" [1, 20, 23, 4, 8] => \\"8423201\\" ``` The function should return the result as a string to avoid issues with very large numbers.","solution":"from functools import cmp_to_key def largest_possible_number(nums): Given a list of non-negative integers, arrange them such that they form the largest possible number. Args: nums : List[int] : A list of non-negative integers. Returns: str : The largest possible number formed by the integers in the list. if not nums: return \\"\\" # Define a custom comparison function for sorting def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert integers in the list to strings nums = list(map(str, nums)) # Sort the list based on the custom comparator nums.sort(key=cmp_to_key(compare)) # Join the sorted list into a single string largest_number = \'\'.join(nums) # Edge case for multiple zeros if largest_number[0] == \'0\': return \'0\' return largest_number"},{"question":"You are given a string that contains words and numbers. Write a program to sort the words in ascending order while keeping the numbers in their original positions. Input The input contains a single line which is a string consisting of words and numbers separated by spaces. Words consist of only alphabetic characters (case-insensitive) and numbers are non-negative integers. Output Print the resulting string where the words are sorted in ascending order, but the numbers remain in their original positions. Example Input apple 34 banana 42 cherry 7 Output apple 34 banana 42 cherry 7 Input dog 23 cat 56 apple 12 Output apple 23 cat 56 dog 12 Note Words should be compared case-insensitively, but the output should maintain the original case.","solution":"def sort_words_preserve_numbers(s): import re words = re.findall(r\'b[a-zA-Z]+b\', s) numbers = re.findall(r\'bd+b\', s) # Sorting words in case-insensitive alphabetical order sorted_words = sorted(words, key=lambda word: word.lower()) result = [] word_index = 0 number_index = 0 for token in s.split(): if token.isdigit(): result.append(numbers[number_index]) number_index += 1 else: result.append(sorted_words[word_index]) word_index += 1 return \' \'.join(result)"},{"question":"You are given a set of n intervals each represented as a pair of integers [start, end], where start is the first day of the interval and end is the last day of the interval. Two intervals [a, b] and [c, d] intersect if there is at least one day that is common in both intervals. Write a function `merge_intervals(intervals)` that takes a list of intervals and returns a new list of intervals where all overlapping intervals have been merged into a single interval. # Example: ``` merge_intervals([[1, 3], [2, 4], [5, 7], [6, 8]]) ``` should return: ``` [[1, 4], [5, 8]] ``` Explanation: - Interval [1, 3] merges with [2, 4] to form [1, 4]. - Interval [5, 7] merges with [6, 8] to form [5, 8]. # Guidelines: 1. The input intervals will be given as a list of lists 【[start1, end1], [start2, end2], ...】with each inner list containing exactly two integers. 2. The output should be a list of merged intervals sorted by their starting day. 3. Each interval [start, end] represents days from start to end inclusive, with `start` <= `end`. 4. Your algorithm should be efficient in terms of time complexity.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of merged intervals sorted by their starting day. if not intervals: return [] # Sort intervals based on the starting day intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for i in range(1, len(intervals)): current_start, current_end = intervals[i] last_start, last_end = merged[-1] if current_start <= last_end: # There is an overlap, so we merge the intervals merged[-1] = [last_start, max(last_end, current_end)] else: # No overlap, add the current interval to the result merged.append(intervals[i]) return merged"},{"question":"In a given country, people are classified into three different income tax brackets based on their annual income. The tax brackets are as follows: - **Low-income** group: Annual income up to 50,000 – No tax. - **Middle-income** group: Annual income between 50,001 and 100,000 – Tax is 10% of the amount above 50,000. - **High-income** group: Annual income above 100,000 – Tax is 5,000 (for the first 100,000) plus 20% of the amount exceeding 100,000. Given an individual\'s annual income, your task is to calculate the total tax they need to pay. -----Input----- The input contains a single integer i, where 0 le i le 1,000,000 representing the annual income. -----Output----- Output a single line with the total tax that the individual needs to pay. -----Examples----- Sample Input 1: 45000 Sample Output 1: 0 Sample Input 2: 75000 Sample Output 2: 2500 Sample Input 3: 120000 Sample Output 3: 9000","solution":"def calculate_tax(annual_income): Calculate the tax based on the annual income. Parameters: annual_income (int): The annual income of the individual. Returns: int: The tax amount owed. if annual_income <= 50000: return 0 elif annual_income <= 100000: return (annual_income - 50000) * 0.10 else: return 5000 + (annual_income - 100000) * 0.20"},{"question":"Ria is engaged in an incessantly boring job of arranging books in a library. The library consists of bookshelves, each shelf having the same number of slots for books. One day, Ria decided to take a break and play a game with the bookshelves. She noted that each book on the shelves has a label number written on it. The game involves performing operations on the bookshelves: - Choose a starting slot and an ending slot for a range within a single shelf. - For every book in that range of slots, increase its label number by 1. After playing for a while, Ria wondered what would be the sum of the label numbers on a given shelf, but she struggles with counting. Can you help Ria find the sum of label numbers on a specific shelf after all the operations? ------- Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers S (number of shelves) and C (slots per shelf). The second line contains S times C space-separated integers representing the initial label of each book in the slots on all shelves in sequence. The third line contains a single integer O denoting the number of operations. O lines follow. For each operation, there are three space-separated integers A_i, B_i, and K_i which represents an increment operation on the K_i-th shelf from the A_i-th slot to the B_i-th slot inclusive. --------Output ------- For each test case, print a single line containing the sum of the label numbers on the specified shelf after all the operations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ S, C ≤ 1000 1 ≤ label of any book ≤ 10^4 1 ≤ O ≤ 10^5 1 ≤ A_i ≤ B_i ≤ C for each valid i 1 ≤ K_i ≤ S for each valid i ------ Sample Input 1 ------ 1 2 5 1 2 3 4 5 6 7 8 9 10 3 1 3 1 2 5 2 1 2 1 ------ Sample Output 1 ------ 57 ------ Explanation 1 ------ Example case 1: Initial configuration: 1 2 3 4 5 6 7 8 9 10 After applying the first operation (incrementing slots 1 to 3 of shelf 1): 2 3 4 4 5 6 7 8 9 10 After applying the second operation (incrementing slots 2 to 5 of shelf 2): 2 3 4 4 5 6 8 9 10 11 After applying the third operation (incrementing slots 1 to 2 of shelf 1): 3 4 4 4 5 6 8 9 10 11 The sum of labels on shelf 1 is 3 + 4 + 4 + 4 + 5 = 20. The sum of labels on shelf 2 is 6 + 8 + 9 + 10 + 11 = 44. Hence, the output is 64.","solution":"def process_shelves(T, test_cases): results = [] for test_case in test_cases: S, C = test_case[\'S\'], test_case[\'C\'] labels = test_case[\'labels\'] O = test_case[\'O\'] operations = test_case[\'operations\'] # Create a 2D array of shelves shelves = [] for i in range(S): shelves.append(labels[i * C:(i + 1) * C]) # Process each operation for operation in operations: A, B, K = operation A -= 1 # Convert to zero-based index B -= 1 # Convert to zero-based index K -= 1 # Convert to zero-based index for i in range(A, B + 1): shelves[K][i] += 1 # Compute the sum of labels on each shelf sum_of_labels = [sum(shelf) for shelf in shelves] results.append(sum_of_labels) return results"},{"question":"A team of archaeologists has discovered a series of ancient tablets containing sequences of numbers. They believe that each tablet encodes some information based on the frequency of the numbers. They would like to decode the information by finding the most frequent number on each tablet. Your task is to write a function that outputs the most frequent number on a given tablet. If there are multiple numbers with the same highest frequency, return the smallest number among them. -----Input----- The input will begin with a line containing an integer T (1 ≤ T ≤ 10), the number of tablets. Each of the following T lines contains: - an integer N (1 ≤ N ≤ 100000), the number of numbers on the tablet. - N integers, representing the numbers on the tablet. The numbers on each tablet are between 1 and 1000000. -----Output----- Print T lines. For each tablet, print the most frequent number. If there are ties, print the smallest such number. -----Examples----- Input 2 5 1 2 2 3 1 6 4 4 4 5 5 5 Output 1 4 -----Note----- For the first example, both \'1\' and \'2\' have a frequency of 2. Since \'1\' is smaller, it is the output. For the second example, both \'4\' and \'5\' have a frequency of 3. Since \'4\' is smaller, it is the output.","solution":"from collections import Counter def most_frequent_number(T, tablet_data): results = [] for i in range(T): N = tablet_data[i][0] numbers = tablet_data[i][1:] frequency = Counter(numbers) max_freq = max(frequency.values()) most_frequent = min([num for num, freq in frequency.items() if freq == max_freq]) results.append(most_frequent) return results"},{"question":"Complete the function that determines the categories of items in a shopping cart based on their prices. Given a list of item prices: - Less than or equal to 20 is categorized as \\"Budget\\". - More than 20 and up to 100 is categorized as \\"Standard\\". - More than 100 is categorized as \\"Premium\\". The function should return a list with the respective categories for each item price. If the input is not a list of positive numerical values, return a message saying \\"Invalid input\\". The function signature (in Python) should be: ```python def categorize_items(prices): pass ``` Examples: ```python categorize_items([18, 25, 105, 67]) # Output: [\\"Budget\\", \\"Standard\\", \\"Premium\\", \\"Standard\\"] categorize_items([101, 19]) # Output: [\\"Premium\\", \\"Budget\\"] categorize_items(\\"invalid\\") # Output: \\"Invalid input\\" categorize_items([25, -5]) # Output: \\"Invalid input\\" ```","solution":"def categorize_items(prices): Categorizes items based on their prices. - Less than or equal to 20 is categorized as \\"Budget\\". - More than 20 and up to 100 is categorized as \\"Standard\\". - More than 100 is categorized as \\"Premium\\". Args: prices (list): List of item prices which are positive numerical values. Returns: list: List of categories for each item price. str: \\"Invalid input\\" for invalid input. if not isinstance(prices, list) or not all(isinstance(price, (int, float)) and price > 0 for price in prices): return \\"Invalid input\\" categories = [] for price in prices: if price <= 20: categories.append(\\"Budget\\") elif price <= 100: categories.append(\\"Standard\\") else: categories.append(\\"Premium\\") return categories"},{"question":"You are planning a visit to a museum and want to optimize your walking path through it. The museum is represented as a grid with `N` rows and `M` columns of rooms. You aim to visit as many different rooms as possible without visiting any room more than once, starting from the upper-left corner (0,0) and ending at the bottom-right corner (N-1, M-1). You can move only right or down at each step. Calculate the maximum number of different rooms you can visit. -----Constraints----- - 1 ≤ N, M ≤ 100 - N and M are integers. -----Input----- Input is given from Standard Input in the following format: N M -----Output----- Print the integer representing the maximum number of different rooms you can visit. -----Sample Input----- 3 4 -----Sample Output----- 6 In a 3x4 grid, the path could be (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3), visiting 6 different rooms.","solution":"def max_rooms_to_visit(N, M): Returns the maximum number of different rooms that can be visited in a grid with N rows and M columns, starting from (0,0) to (N-1,M-1) moving only right or down at each step. # The number of rooms visited will be the sum of the vertical and horizontal # movements. For N rows and M columns: # The path will include all rows and columns minus one overlap (0,0 to N-1,M-1). return N + M - 1"},{"question":"In a faraway kingdom, there are many magical creatures. The kingdom is famous for its different clans of creatures, each led by a magical elder with their unique spell scrolls. Each scroll has an enchantment phrase inscribed on it, made up of lowercase letters of the English alphabet. The kingdom recently started a new tradition where the elder creatures gather at the Spell Summit, organized by the grand sorcerer, Merlin. The summit proceeds in Q sessions, and each session can be one of the following two types: 1st type: Merlin displays a phrase P to the elders. 2nd type: Merlin asks the elder of clan denoted by E the following question: “Among all the phrases shown so far, how many of them contain your enchantment phrase as a prefix?” The elder creatures, renowned for their magical prowess but not their numerical abilities, need your help to answer Merlin\'s queries. -----Input----- The first line of input contains the integer N (1 leq N leq 10^5), the number of elder creatures. Each of the following N lines contains a single phrase with only lowercase letters of the English alphabet, the i-th phrase corresponding to the enchantment phrase of the elder from clan i. After that, the integer Q (1 leq Q leq 10^5) follows, the number of sessions in the summit. The following Q lines describe the sessions of the summit, with the i-th line describing the i-th session. Each line contains an integer T. In case T equals 1, it denotes the first type of session, with the displayed phrase P following on the same line, consisting of only lowercase letters of the English alphabet. In case T equals 2, it denotes the second type of session, followed by an integer E (1 leq E leq N), the label of the elder creature being questioned by Merlin. The total length of all enchantment phrases will not exceed 2 cdot 10^6. The total length of all displayed phrases by Merlin will not exceed 2 cdot 10^6. -----Output----- For each session of the second type, output a single line with the correct answer to Merlin’s question in that session. -----Examples----- Sample Input: 3 spell magic wizard 4 1 spellbound 1 magicians 2 2 2 1 Sample Output: 1 1","solution":"def spell_summit(n, elders_phrases, q, sessions): Solves the spell summit problem. Args: n: Number of elder creatures (int). elders_phrases: List of enchantment phrases for each elder creature (list of str). q: Number of sessions (int). sessions: List of sessions, where a session is either [1, P] or [2, E] (list of lists). Returns: List of answers for each session of the second type (list of int). from collections import defaultdict # Store counts of phrases displayed_phrases = [] # Precompute prefix counts for each elder\'s phrase prefix_counts = defaultdict(int) for t, *data in sessions: if t == 1: # Second element is phrase P displayed by Merlin displayed_phrases.append(data[0]) for phrase in elders_phrases: if data[0].startswith(phrase): prefix_counts[phrase] += 1 elif t == 2: # Second element is the elder index E elder_idx = data[0] - 1 elder_phrase = elders_phrases[elder_idx] # Return the count of prefixes matching this elder\'s phrase yield prefix_counts[elder_phrase]"},{"question":"Many programming languages have built-in libraries for performing various operations on data structures. One common data structure is the binary tree, where each node has at most two children. One interesting problem is to find and print the left view of a binary tree. The left view of a binary tree contains the nodes that are visible when the tree is viewed from the left side. More formally, the left view of a binary tree contains all nodes that are the first nodes seen at each level, when traversing the tree from top to bottom and from left to right. Write a function `left_view` that takes the root of a binary tree and prints the left view of the tree. # Input - The input will be a binary tree, represented by its root node, which is an instance of the `TreeNode` class. - Each `TreeNode` contains an integer value, and pointers to its left and right children. # Output - The function should print the values of the nodes in the left view, from top to bottom. # Example Consider the following binary tree: ``` 1 / 2 3 / / 4 5 6 7 / 8 ``` The left view of this binary tree would be: ``` 1 2 4 8 ``` # Constraints - You can assume the tree contains at most 10,000 nodes. - The values of the nodes will be between `-10^5` and `10^5`. # Function Signature ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def left_view(root: TreeNode) -> None: # Your code here ``` # Note In the example above, the nodes with values `1`, `2`, `4`, and `8` are visible from the left side. Hence the left view of the binary tree is `1 2 4 8`. Your task is to implement the `left_view` function to generate this sequence.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def left_view(root: TreeNode) -> None: def left_view_util(current, level, max_level, result): # Base Case if current is None: return # If this is the first node of its level if max_level[0] < level: result.append(current.val) max_level[0] = level # Recur for the left and right subtree left_view_util(current.left, level + 1, max_level, result) left_view_util(current.right, level + 1, max_level, result) result = [] left_view_util(root, 1, [0], result) print(\\" \\".join(map(str, result)))"},{"question":"You are given an undirected weighted graph with N nodes and M edges. Each node has a value associated with it. The value of a node is the sum of all the edge weights connected to the node. Your task is to find the node with the maximum value and output its value. ------ Input ------ The first line of the input contains two integers, N and M, the number of nodes and edges in the graph respectively. The next M lines each contain three integers U, V, and W, representing an edge between nodes U and V with weight W. ------ Output ------ Output a single integer, the value of the node with the maximum value. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ W ≤ 1000 ----- Sample Input 1 ------ 4 5 1 2 10 1 3 5 2 3 15 3 4 10 2 4 5 ----- Sample Output 1 ------ 35 ----- Explanation 1 ------ Node 1 has edges with weights 10 and 5, so its value is 15. Node 2 has edges with weights 10, 15, and 5, so its value is 30. Node 3 has edges with weights 5, 15, and 10, so its value is 30. Node 4 has edges with weights 10 and 5, so its value is 15. Nodes 2 and 3 both have the highest value of 30, thus the output is 30. In case of multiple nodes having the same maximum value, return any one of them (in the example, you could also output 30).","solution":"def max_node_value(n, m, edges): Returns the maximum value of a node in the given graph. node_values = [0] * (n + 1) for u, v, w in edges: node_values[u] += w node_values[v] += w return max(node_values)"},{"question":"Farmer John\'s cows have started organizing races in the pastures. Each cow competes by running along a specific path and keeping track of the positions they visit. Farmer John wants to find out which cow visits the maximum number of unique positions. Can you help him determine the winning cow? -----Input----- The first line of the input contains a single integer m representing the number of cows, where 2 leq m leq 100. Then follows m blocks of input, each describing one cow\'s path: - The first line of each block contains an integer k representing the number of positions the cow visits, where 1 leq k leq 100. - The next k lines each contain two integers x and y, representing the coordinates of a position visited by the cow. Each coordinate is in the range big[-1000, 1000big]. -----Output----- The output should be a single line indicating the 1-based index of the cow that visits the maximum number of unique positions. If there is a tie, output the smallest index among them. -----Examples----- Sample Input 1: 3 4 1 1 2 2 1 1 3 4 3 5 6 5 6 5 6 5 7 8 7 8 8 9 9 10 10 11 Sample Output 1: 3 Sample Input 2: 2 5 1 1 2 2 3 3 4 4 5 5 4 10 10 10 10 20 20 30 30 Sample Output 2: 1 -----Explanation----- In Sample Input 1, the first cow revisits position (1, 1), resulting in 3 unique positions. The second cow only visits the same position repeatedly, resulting in 1 unique position. The third cow visits 4 unique positions, so the output is 3. In Sample Input 2, the first cow visits 5 unique positions, while the second cow visits 3 unique positions. Hence, the output is 1.","solution":"def find_winning_cow(cow_paths): Determine which cow visits the maximum number of unique positions. max_unique_positions = 0 index_of_winning_cow = 0 for idx, path in enumerate(cow_paths): unique_positions = set(path) if len(unique_positions) > max_unique_positions: max_unique_positions = len(unique_positions) index_of_winning_cow = idx + 1 return index_of_winning_cow def parse_input(input_str): Parse the input string to extract the number of cows and their respective paths. lines = input_str.strip().split(\'n\') num_cows = int(lines[0]) cows = [] i = 1 for _ in range(num_cows): k = int(lines[i]) path = [] for j in range(k): x, y = map(int, lines[i + 1 + j].split()) path.append((x, y)) cows.append(path) i += 1 + k return cows def cow_race(input_str): Main function to determine the winning cow from input string. cow_paths = parse_input(input_str) return find_winning_cow(cow_paths)"},{"question":"Given an integer x, we need to determine if it can be expressed as the power of any integer greater than 1. Return True if x can be expressed as some number to the power of another number, otherwise return False. Example 1: Input: x = 16 Output: True Explanation: 16 can be written as 2^4, which is 2 raised to the power 4. Example 2: Input: x = 20 Output: False Explanation: 20 cannot be written as some integer greater than 1 raised to another integer power. Example 3: Input: x = 27 Output: True Explanation: 27 can be written as 3^3, which is 3 raised to the power 3. Your Task: You do not need to read input or print anything. Complete the function isPower() which takes x as input parameter and returns a boolean value True if x can be expressed as p^q else False. Expected Time Complexity: O(sqrt(x) log x) Expected Auxiliary Space: O(1) Constraints: 2 <= x <= 10^9","solution":"def isPower(x): if x < 2: return False for base in range(2, int(x**0.5) + 1): temp = x while temp % base == 0: temp //= base if temp == 1: return True return False"},{"question":"A company has a warehouse where they store various products. Each product can be stored in exactly one of the racks available in the warehouse. Each rack has a certain maximum capacity, which is defined by the total weight it can hold. You are given two pieces of information: a list of products with their weights, and a list of racks with their capacities. The company wants to find out if it is possible to store all the products in the racks without exceeding their capacities. You are tasked to write a program to determine if this goal is achievable. -----Input----- - The first line contains an integer n (1 leq n leq 1000), the number of products. - The second line contains n integers representing the weight of each product, where each product weight is a positive integer no greater than 10^4. - The third line contains an integer m (1 leq m leq 1000), the number of racks. - The fourth line contains m integers representing the capacity of each rack, where each capacity is a positive integer no greater than 10^4. -----Output----- Output \\"YES\\" if it is possible to store all products in the racks without exceeding the capacities, otherwise output \\"NO\\". -----Examples----- Sample Input: 4 2 3 5 8 3 10 5 4 Sample Output: YES Sample Input: 3 10 20 30 2 25 15 Sample Output: NO","solution":"def can_store_products(n, product_weights, m, rack_capacities): Determines if all products can be stored in the racks without exceeding their capacities. Parameters: n (int): Number of products. product_weights (list): Weights of the products. m (int): Number of racks. rack_capacities (list): Capacities of the racks. Returns: str: \\"YES\\" if it is possible to store all products in the racks, otherwise \\"NO\\". product_weights.sort(reverse=True) # Sort product weights in descending order rack_capacities.sort(reverse=True) # Sort rack capacities in descending order # Try to allocate each product to the largest available rack for weight in product_weights: found_rack = False for i in range(m): if rack_capacities[i] >= weight: rack_capacities[i] -= weight found_rack = True break if not found_rack: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of positive integers representing the height of mountains. You are allowed to perform an unlimited number of jump operations to move from the current mountain to another mountain of greater height. Each jump costs coins equal to the height difference between the two mountains. You start on the first mountain. The objective is to find the minimum number of coins needed to traverse from the first mountain to the last mountain. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer n (2 leq n leq 10^5) — the number of mountains. The following line contains n space-separated positive integers h_1,h_2,dots,h_n (1 leq h_i leq 10^9) — the heights of the mountains. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output the minimum number of coins needed to reach the last mountain. -----Examples----- Input 3 5 1 3 5 2 4 4 10 12 10 15 3 2 3 1 Output 3 5 1 -----Note----- In the first test case, you start at mountain with height 1, then jump to the mountain with height 3 (cost 3-1=2), then jump to the mountain with height 5 (cost 5-3=2), then jump to the mountain with height 4 (cost 4-1=3). The total cost is 2+2+3=7, however, you can choose a cheaper path: 1 to 3 (2 coins) to 4 (1 coin). The minimum cost is 3 coins. In the second test case, you start at mountain with height 10, jump to height 12 (cost 2), then jump to height 15 (cost 3). The total cost is 5 coins. In the third test case, you start at mountain with height 2, jump to height 3 (cost 1), then jump to height 1 (cost 2, but since you are asked for minimum, you stop there). The minimum cost is 1 coin.","solution":"def min_coins_to_reach_last_mountain(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] min_cost = 0 current_index = 0 while current_index < n - 1: min_jump_cost = float(\'inf\') next_index = current_index for j in range(current_index + 1, n): if heights[j] >= heights[current_index]: jump_cost = heights[j] - heights[current_index] if jump_cost < min_jump_cost: min_jump_cost = jump_cost next_index = j if next_index == current_index: break min_cost += min_jump_cost current_index = next_index results.append(min_cost) return results # Example usage for manual testing if __name__ == \\"__main__\\": t = 3 test_cases = [ (5, [1, 3, 5, 2, 4]), (4, [10, 12, 10, 15]), (3, [2, 3, 1]), ] print(min_coins_to_reach_last_mountain(t, test_cases)) # Output: [3, 5, 1]"},{"question":"Write a function that takes a string as input and returns a new string where each character in the original string is repeated twice. For example, if we pass \\"hello\\" to the function, it should return \\"hheelllloo\\", because each character \'h\', \'e\', \'l\', and \'o\' is repeated twice in the output. **Note:** The function accepts a string and returns a string.","solution":"def repeat_characters(s): Returns a new string where each character in the original string is repeated twice. Parameters: s (str): The input string. Returns: str: A new string with each character repeated twice. return \'\'.join([char * 2 for char in s])"},{"question":"# Task You are given an integer array `nums` sorted in ascending order and a target integer `target`. Suppose the `nums` array is rotated at some pivot unknown to you beforehand. (i.e., `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`). Write a function to determine if `target` is in `nums`. If `target` is found in the array, return its index, otherwise return `-1`. You must write an algorithm with `O(log n)` run-time complexity. # Example: For `nums = [4,5,6,7,0,1,2]` and `target = 0`, the result should be `4`. For `nums = [4,5,6,7,0,1,2]` and `target = 3`, the result should be `-1`. # Input/Output - `[input]` integer array `nums` An array of integers sorted in ascending order, then possibly rotated. - `[input]` integer `target` An integer target to search for within the array. - `[output]` an integer The index of the target if it is present in the array, otherwise `-1`.","solution":"def search_rotated_array(nums, target): This function takes in a rotated sorted array and a target value, and returns the index of the target value if present, else returns -1. if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] <= nums[mid]: # Left side is sorted if nums[left] <= target < nums[mid]: # Target is within the left sorted part right = mid - 1 else: left = mid + 1 else: # Right side is sorted if nums[mid] < target <= nums[right]: # Target is within the right sorted part left = mid + 1 else: right = mid - 1 return -1"},{"question":"In a given city, there is a grid of streets arranged as an n x m matrix. Some streets are busy, and cannot be crossed directly at an intersection, while the rest are calm and can be crossed freely. You are given the starting coordinates of a person in this city and their destination coordinates in the grid. The person can only move up, down, left, or right one cell at a time and can only cross calm streets. Your task is to determine the minimum number of moves required for the person to reach the destination from the starting point. If it is not possible to reach the destination, return -1. -----Input----- The first line contains two integers n (1 ≤ n ≤ 500) and m (1 ≤ m ≤ 500), representing the number of rows and columns of the grid. The next n lines each contain a string of length m, where each character is either \'B\' (busy) or \'C\' (calm) describing the type of street at each cell. The next line contains two space-separated integers r1 and c1 (1 ≤ r1 ≤ n, 1 ≤ c1 ≤ m), representing the starting coordinates. The last line contains two space-separated integers r2 and c2 (1 ≤ r2 ≤ n, 1 ≤ c2 ≤ m), representing the destination coordinates. -----Output----- Print a single integer, which is the minimum number of moves required to reach the destination, or -1 if it is not possible. -----Examples----- Input 5 5 CCCCC CBCCC CBCCC CCCCC CCCCC 1 1 4 5 Output 7 Input 5 5 CCCCC CBCCC BBBBB CCCCC CCCCC 1 1 4 5 Output -1 -----Note----- In the first test case, one of the optimal paths is: (1,1) → (1,2) → (1,3) → (1,4) → (2,4) → (3,4) → (4,4) → (4,5). In the second test case, there is no possible path from the start to the destination due to the row of busy streets blocking.","solution":"from collections import deque def min_moves(n, m, grid, start, end): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'C\' and not visited[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start_x, start_y = start end_x, end_y = end visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(start_x, start_y, 0)]) visited[start_x][start_y] = True while queue: x, y, moves = queue.popleft() if x == end_x and y == end_y: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1"},{"question":"Given an array of n integers, find the length of the longest subsequence which is first increasing and then decreasing. -----Constraints----- - 1 leq n leq 1000 - 1 leq array[i] leq 1000, where 1 leq i leq n -----Input----- Input is given from Standard Input in the following format: n array -----Output----- Print the length of the longest subsequence which is first increasing and then decreasing. -----Sample Input----- 9 1 11 2 10 4 5 2 1 -----Sample Output----- 6 Explanation: The longest subsequence is [1, 2, 10, 4, 2, 1].","solution":"def longest_bitonic_subsequence(arr): n = len(arr) if n == 0: return 0 # Create arrays to store the length of longest increasing subsequence # ending at each index and starting at each index lis = [1] * n lds = [1] * n # Compute the LIS values from left to right for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Compute the LDS values from right to left for i in reversed(range(n-1)): # or (n-2) to -1 for j in range(n-1, i, -1): if arr[i] > arr[j] and lds[i] < lds[j] + 1: lds[i] = lds[j] + 1 # Compute the maximum value of (lis[i] + lds[i] - 1) max_bitonic_length = 0 for i in range(n): max_bitonic_length = max(max_bitonic_length, lis[i] + lds[i] - 1) return max_bitonic_length"},{"question":"Alice has a collection of strings that she wishes to organize. She needs your help to write a function that identifies the smallest lexicographical rotation for each string in her collection. The lexicographical rotation of a string is the smallest string that can be obtained by cyclically rotating its characters. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains a single string, S, which Alice wants to process. ------ Output ------ For each test case, print the smallest lexicographical rotation of the corresponding string. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 1000 S consists of lowercase English letters only. ----- Sample Input 1 ------ 3 cba apple aaba ----- Sample Output 1 ------ acb apple aaab ----- Explanation 1 ------ For first string \'cba\', the rotations are \'cba\', \'bac\', \'acb\', and the smallest lexicographically is \'acb\'. For second string \'apple\', the rotations are \'apple\', \'pplea\', \'pleap\', \'leapp\', \'eappl\', and the smallest lexicographically is \'apple\'. For third string \'aaba\', the rotations are \'aaba\', \'abaa\', \'baaa\', \'aaab\', and the smallest lexicographically is \'aaab\'.","solution":"def smallest_lexicographical_rotation(s): Returns the smallest lexicographical rotation of the string s. n = len(s) extended_s = s * 2 min_rotation = extended_s[:n] for i in range(1, n): rotation = extended_s[i:i+n] if rotation < min_rotation: min_rotation = rotation return min_rotation def solve(T, strings): For each string in the input list strings, prints the smallest lexicographical rotation. results = [] for i in range(T): results.append(smallest_lexicographical_rotation(strings[i])) return results"},{"question":"Given a string s, determine if it contains matching opening and closing brackets. The brackets considered are \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The string is said to have matching brackets if: 1. There are an equal number of opening and closing brackets of each type. 2. Every closing bracket has a corresponding opening bracket of the same type. 3. The brackets are nested correctly. Example 1: Input: s = \\"([]){}\\" Output: 1 Explanation: The string has matching brackets as every opening bracket has a corresponding closing bracket and they are properly nested. Example 2: Input: s = \\"([)]\\" Output: 0 Explanation: The string does not have matching brackets because the order of the brackets is incorrect. Your Task: You don\'t need to read input or print anything. Complete the function isValidBrackets() which takes a string s as input parameter and returns 1 if the string contains matching brackets else return 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= s.length <= 10^5","solution":"def isValidBrackets(s): Determines if the input string s contains matching brackets. Returns 1 if the brackets are valid, otherwise returns 0. stack = [] matching_brackets = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_brackets.values(): stack.append(char) elif char in matching_brackets.keys(): if stack == [] or matching_brackets[char] != stack.pop(): return 0 else: continue return 1 if stack == [] else 0"},{"question":"You are given a list of n integers and an integer k. Your task is to find the k most frequent elements in the list and return them in ascending order. If two elements have the same frequency, the smaller element should be preferred in the result. **Note:** You need to create an efficient solution with linear or near-linear time complexity. -----Input----- The first line of the input contains two integers n and k (1 le n, k le 10^5) — the number of elements in the list and the number of most frequent elements to find. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^6) — the elements of the list. -----Output----- Print k integers in ascending order representing the k most frequent elements in the list. -----Examples----- Input 8 2 1 1 1 2 2 3 3 3 Output 1 3 Input 10 3 4 5 4 6 6 6 7 8 5 5 Output 4 5 6","solution":"from collections import Counter def k_most_frequent_elements(n, k, elements): Returns the k most frequent elements in ascending order from the list of n elements. # Count frequency of each element freq_counter = Counter(elements) # Sort items based on frequency first and then by element value sorted_items = sorted(freq_counter.items(), key=lambda x: (-x[1], x[0])) # Extract the top k elements from the sorted list top_k_elements = [item[0] for item in sorted_items[:k]] # Return the elements in ascending order return sorted(top_k_elements)"},{"question":"Jane has a colorful collection of marbles. Each marble is either red, blue, or green, and Jane loves forming triplets of marbles consisting of one marble of each color. Given an integer array representing the marbles in Jane\'s collection, where a number 1 represents a red marble, 2 represents a blue marble, and 3 represents a green marble, write a program to determine the maximum number of triplets Jane can form with her marbles. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of marbles. The second line contains n integers a_i (1 ≤ a_i ≤ 3), representing the colors of the marbles. Output Output a single integer, the maximum number of triplets Jane can form with her marbles. Examples Input 6 1 2 1 3 2 3 Output 2 Input 5 1 1 2 2 3 Output 1 Note In the first sample, Jane can form 2 triplets: (1, 2, 3) and (1, 2, 3). In the second sample, Jane can form 1 triplet: (1, 2, 3). One marble of each color is left over.","solution":"def max_triplets(n, marbles): Determine the maximum number of triplets (1, 2, and 3) that can be formed from the given marbles. Args: n (int): The number of marbles. marbles (list of int): List of integers where 1 represents red, 2 represents blue, and 3 represents green. Returns: int: The maximum number of triplets that can be formed. red = marbles.count(1) blue = marbles.count(2) green = marbles.count(3) return min(red, blue, green)"},{"question":"You are given a sequence of n integers a1, a2, ..., an. Your task is to select a non-empty subsequence of the sequence such that the product of its elements is as large as possible. The product of an empty subsequence is considered to be 1. Input: - The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence. - The second line contains n integers a1, a2, ..., an (−10 ≤ ai ≤ 10). Output: - Print a single integer, the maximum product of a non-empty subsequence. Examples: Input: 3 0 -1 3 Output: 3 Input: 5 -1 -2 -3 -4 -5 Output: 120 Input: 4 -2 -3 0 4 Output: 24 Note: In the first example, the optimal choice is taking only the number 3. In the second example, taking all numbers results in the largest product, which is 120. In the last example, taking the subsequence -2, -3, and 4 results in the largest product, which is 24.","solution":"def max_product_subsequence(n, sequence): from functools import reduce from operator import mul from itertools import combinations def product(subsequence): return reduce(mul, subsequence, 1) max_product = float(\'-inf\') for r in range(1, n + 1): for subsequence in combinations(sequence, r): current_product = product(subsequence) if current_product > max_product: max_product = current_product return max_product"},{"question":"# Unique Substrings of Length K Given a string `s` and an integer `k`, write a function that returns a list of all unique substrings of length `k` that appear in `s`. The substrings must be contiguous and can only consist of characters from the original string. If no such substrings exist, return an empty list. Assume `k` is positive and less than or equal to the length of the string `s`. # Example ```python def unique_substrings(s: str, k: int) -> List[str]: # Your code here # Example 1 s = \\"abcabc\\" k = 3 unique_substrings(s, k) # Output: [\\"abc\\", \\"bca\\", \\"cab\\"] # Example 2 s = \\"abcd\\" k = 2 unique_substrings(s, k) # Output: [\\"ab\\", \\"bc\\", \\"cd\\"] # Example 3 s = \\"aaaaaa\\" k = 2 unique_substrings(s, k) # Output: [\\"aa\\"] ```","solution":"def unique_substrings(s: str, k: int): Returns a list of all unique substrings of length k that appear in s. substrings = set() n = len(s) for i in range(n - k + 1): substr = s[i:i+k] substrings.add(substr) return list(substrings)"},{"question":"Given a string s consisting of lowercase alphabets and an integer n. The task is to return a new string where each character in the given string is shifted by n positions in the alphabet (wrapping around if necessary). Example 1: Input: s = \\"abc\\", n = 2 Output: \\"cde\\" Explanation: Each character is shifted by 2 positions: \'a\' -> \'c\', \'b\' -> \'d\', \'c\' -> \'e\'. Example 2: Input: s = \\"xyz\\", n = 3 Output: \\"abc\\" Explanation: Each character is shifted by 3 positions: \'x\' -> \'a\', \'y\' -> \'b\', \'z\' -> \'c\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function shiftString(s, n) which takes the string s and the integer n as input and returns the new shifted string. Expected Time Complexity: O(len(s)) Expected Auxiliary Space: O(len(s)) Constraints: 1 <= len(s) <= 10^{5} 1 <= n <= 25","solution":"def shiftString(s, n): Shifts each character in the string s by n positions in the alphabet. Parameters: s (str): The input string consisting of lowercase alphabets. n (int): The number of positions to shift each character. Returns: str: The new string after shifting each character by n positions. shifted_string = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + n) % 26) + ord(\'a\')) shifted_string.append(new_char) return \'\'.join(shifted_string)"},{"question":"A dessert shop is offering `n` different types of desserts, each described by a unique integer identifier from `1` to `n`. A customer has specified a list of their top `m` preferred desserts, which is a subset of the total desserts available. The shop wants to create special orders for the customer that only include the desserts from their preference list. Each special order can be a sequence of any length `k` where every dessert in the order must appear in the customer\'s preference list and no dessert can be chosen more than once in an order. The dessert shop needs to ensure that each dessert in the preference list appears in at least one special order. Write a program to determine whether it is possible to create special orders that satisfy the customer\'s preference list, given the constraints on the length of the special orders. # Input The first line contains a single integer `t` (`1 ≤ t ≤ 10^4`) — the number of test cases. The first line of each test case contains three integers `n`, `m`, and `k` (`1 ≤ n, m ≤ 10^4`, `1 ≤ k ≤ n`) — the number of total desserts, the number of preferred desserts, and the length of each special order. The second line of each test case contains `m` integers `p_1, p_2, ..., p_m` (`1 ≤ p_i ≤ n`) — the customer\'s preferred desserts, listed in ascending order. # Output For each test case, print `YES` if it is possible to create the special orders satisfying the constraints, otherwise print `NO`. # Example Input ``` 3 5 3 2 1 3 5 6 4 2 2 4 5 6 8 5 3 1 2 3 7 8 ``` Output ``` YES YES NO ``` # Note In the first test case, it\'s possible to create the following special orders: `[1, 3]` and `[5]`. In the second test case, it\'s possible to create the following special orders: `[2, 4]`, `[5, 6]`. In the third test case, it\'s not possible to create special orders of length `3` such that each of the customer\'s preferred desserts appears in at least one special order. Determine for each test case if it is possible to create special orders that include all the desserts from the customer\'s preference list, maintaining the given constraints on the length of the orders.","solution":"def can_create_special_orders(t, test_cases): result = [] for i in range(t): n, m, k = test_cases[i][0] preferred_desserts = test_cases[i][1] # It\'s only possible to create special orders if each preferred # dessert can appear in at least one order of length k if m <= k * (m // k) + (1 if m % k != 0 else 0): result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Example usage: # t = 3 # test_cases = [ # [(5, 3, 2), [1, 3, 5]], # [(6, 4, 2), [2, 4, 5, 6]], # [(8, 5, 3), [1, 2, 3, 7, 8]] # ] # print(can_create_special_orders(t, test_cases))"},{"question":"You are managing a tree orchard with N nodes where each node represents a fruit tree, and there are N-1 edges connecting them, forming a tree structure. Each node has a certain value that indicates the type of fruit the tree holds. You want to implement a system to calculate the total number of distinct fruit types found from a starting tree node X to another tree node Y. Consider each query independently. Constraints: - 2 ≤ N ≤ 100,000 - 1 ≤ Value of each node ≤ 100,000 - 1 ≤ Number of queries ≤ 100,000 - 1 ≤ X, Y ≤ N Input Input is given from Standard Input in the following format: ``` N value1 value2 ... valueN N-1 lines: each containing two integers u and v, indicating an edge between node u and node v Q Q lines: each containing two integers X and Y, indicating the start and end nodes for the query ``` Output For each query, output the total number of distinct fruit types found from node X to node Y, inclusive. Sample Input ``` 5 1 2 3 2 3 1 2 1 3 3 4 3 5 2 1 4 2 5 ``` Sample Output ``` 3 3 ``` Explanation: - The path from node 1 to node 4 includes nodes with values [1, 3, 3] which results in 2 distinct fruit types. - The path from node 2 to node 5 includes nodes with values [2, 1, 3, 3] which results in 3 distinct fruit types.","solution":"from collections import defaultdict, deque def find_distinct_fruit_types(num_nodes, fruit_values, edges, queries): # Create the adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def bfs_path(start, end): # BFS to find path from start to end queue = deque([start]) parent = {start: None} while queue: node = queue.popleft() if node == end: break for neighbor in tree[node]: if neighbor not in parent: parent[neighbor] = node queue.append(neighbor) # Reconstruct the path using parent dictionary path = [] step = end while step is not None: path.append(step) step = parent[step] return path[::-1] results = [] for X, Y in queries: path = bfs_path(X, Y) fruit_types = set(fruit_values[node - 1] for node in path) results.append(len(fruit_types)) return results"},{"question":"# Increment Array Digits Write a function to accommodate a specific operation on a number represented by an array of its digits. The function should increment the number by a given integer value and return the resulting number as an array of its digits. You need to handle cases where the increment causes a carry-over. The input array should be non-empty and should not contain any leading zeros, except the number `0` itself. Signature ```python def increment_number(digits: List[int], increment: int) -> List[int]: ``` Parameters - `digits` (List[int]): List of non-negative integers representing the digits of a number. - `increment` (int): The integer value to be added to the number represented by the `digits`. Return - List[int]: A list of integers representing the digits of the incremented number. Examples ```python increment_number([1, 2, 3], 7) # Output: [1, 3, 0] increment_number([9, 9, 9], 1) # Output: [1, 0, 0, 0] increment_number([0], 5) # Output: [5] ``` # Constraints - All array elements are non-negative integers (0 to 9). - `1 <= len(digits) <= 1000` - `0 <= increment <= 10^6` The function should handle large arrays and manage carry-overs effectively.","solution":"from typing import List def increment_number(digits: List[int], increment: int) -> List[int]: This function takes a number represented as an array of digits and an increment value. It returns a new array of digits representing the number after adding the increment value. # Convert digits list to a number num = 0 for digit in digits: num = num * 10 + digit # Add the increment num += increment # Convert the number back to a list of digits result = [int(d) for d in str(num)] return result"},{"question":"In a certain fantasy world, there are N wizards. Each wizard can perform exactly one spell. Wizards are arranged in a circle and numbered from 1 through N. Each wizard i states that they can cast exactly a_i different spells when considering only themselves and the two adjacent wizards. Determine whether it is possible to assign spells to the wizards such that all their statements hold true. Constraints * 3 ≤ N ≤ 10^5 * 1 ≤ a_i ≤ 3 Input Input is given from Standard Input in the following format: ``` N a_1 a_2 ... a_N ``` Output Print `Yes` if there exists a distribution of spells that satisfies the wizards\' statements; print `No` otherwise. Examples Input ``` 5 2 2 2 3 2 ``` Output ``` Yes ``` Input ``` 4 3 3 3 3 ``` Output ``` Yes ``` Input ``` 6 1 1 1 1 1 1 ``` Output ``` No ``` Input ``` 3 2 3 2 ``` Output ``` Yes ``` Input ``` 7 3 1 3 1 3 1 3 ``` Output ``` No ```","solution":"def can_assign_spells(N, a): Determine if it is possible to assign spells to the wizards such that all their statements hold true. Parameters: N - Number of wizards a - List of integers where each integer a_i represents the number of spells wizard i claims they and their two adjacent wizards can cast together. Returns: \'Yes\' if it is possible to assign spells, \'No\' otherwise if any(ai > 3 or ai < 1 for ai in a): return \\"No\\" for i in range(N): # Considering wizards i, (i-1)%N, and (i+1)%N if a[i] == 1: # a wizard claiming total spell count of 1 is not possible return \\"No\\" return \\"Yes\\""},{"question":"You are given a matrix with n rows and m columns, where each cell contains a positive integer. Your task is to find the length of the longest increasing path in the matrix. From each cell, you can move in four possible directions: left, right, up, and down. Each move you make must strictly increase the value of the cell. Write a function `longestIncreasingPath(matrix: List[List[int]]) -> int` to solve the problem. # Input: - A 2D list of integers representing the matrix. Note that 1 ≤ n, m ≤ 200. # Output: - Return an integer representing the length of the longest increasing path. # Example: Input: ``` matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] ``` Output: ``` 4 ``` Explanation: The longest increasing path is [1, 2, 6, 9]. # Constraints: - You can assume that the solution is always unique. # Hints: - Use dynamic programming to store the lengths of increasing paths starting from each cell. - Think about depth-first search (DFS) combined with memoization to avoid recomputation.","solution":"def longestIncreasingPath(matrix): Returns the length of the longest increasing path in the matrix. if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[-1] * cols for _ in range(rows)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(row, col): if dp[row][col] != -1: return dp[row][col] max_length = 1 for dr, dc in directions: newRow, newCol = row + dr, col + dc if 0 <= newRow < rows and 0 <= newCol < cols and matrix[newRow][newCol] > matrix[row][col]: length = 1 + dfs(newRow, newCol) max_length = max(max_length, length) dp[row][col] = max_length return max_length max_path_length = 0 for r in range(rows): for c in range(cols): max_path_length = max(max_path_length, dfs(r, c)) return max_path_length"},{"question":"A large bakery received a number of orders for a variety of pastries. Each order consists of a particular type of pastry and the number of units required. The bakery can produce a limited number of units per hour. Your task is to determine the total number of hours required to complete all the orders if they are worked on sequentially. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case consists of two parts: - The first line contains a single integer N, the number of orders. - The second line contains N space-separated integers representing the number of units required for each order. - The third line contains a single integer K, the number of units the bakery can produce in one hour. ------ Output Format ------ For each test case, output the total number of hours required to complete all the orders. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{units required for each order} ≤ 1000 1 ≤ K ≤ 100 ------ Sample Input 1 ------ 2 3 30 50 20 25 2 100 120 50 ------ Sample Output 1 ------ 4 5 ------ Explanation 1 ------ For test case 1: - The bakery needs to fulfill 3 orders of 30, 50, and 20 units respectively. - Since the bakery can produce 25 units per hour: - The first order of 30 units will take leftlceil frac{30}{25} rightrceil = 2 hours - The second order of 50 units will take leftlceil frac{50}{25} rightrceil = 2 hours - The third order of 20 units will take leftlceil frac{20}{25} rightrceil = 1 hour - Hence, the total time required is 2 + 2 + 1 = 5 hours. For test case 2: - The bakery needs to fulfill 2 orders of 100 and 120 units respectively. - Since the bakery can produce 50 units per hour: - The first order of 100 units will take leftlceil frac{100}{50} rightrceil = 2 hours - The second order of 120 units will take leftlceil frac{120}{50} rightrceil = 3 hours - Hence, the total time required is 2 + 3 = 5 hours.","solution":"import math def calculate_hours(T, test_cases): results = [] for t in range(T): N, orders, K = test_cases[t] total_hours = 0 for units in orders: total_hours += math.ceil(units / K) results.append(total_hours) return results"},{"question":"Sudha wants to buy some items from the market. She has a list of items along with their prices and she has a budget. Write a program to determine how many items she can buy without exceeding her budget. ------ Input Format ------ The first line contains an integer N, the number of items available in the market. The second line contains N space-separated integers, representing the prices of the items. The third line contains an integer B, which is Sudha\'s budget. ------ Output Format ------ Output the maximum number of items Sudha can purchase without exceeding her budget. ------ Constraints ------ 1. 1 ≤ N ≤ 1000 - the number of items available in the market. 2. 1 ≤ prices of items ≤ 1000 - the price of each item. 3. 1 ≤ B ≤ 100000 - Sudha\'s budget. ----- Sample Input 1 ------ 5 20 10 40 50 30 70 ----- Sample Output 1 ------ 3 ----- explanation 1 ------ Example - Minimum prices to buy maximum items. Sudha can buy items costing 10, 20, and 30 to use exactly 60 out of her 70 budget. ----- Sample Input 2 ------ 4 10 20 30 40 25 ----- Sample Output 2 ------ 1 ----- explanation 2 ------ Example - Budget constraint. Sudha can only afford the item costing 20 within her budget of 25.","solution":"def max_items(prices, budget): Returns the maximum number of items Sudha can buy without exceeding her budget. prices.sort() total_cost = 0 item_count = 0 for price in prices: if total_cost + price <= budget: total_cost += price item_count += 1 else: break return item_count # Example usage: # N = 5 # prices = [20, 10, 40, 50, 30] # budget = 70 # print(max_items(prices, budget)) # Output: 3"},{"question":"Mocha has recently bought a new fridge and wants to arrange her items in it in the most space-efficient manner. The fridge has different shelves and the items can be placed on any shelf, but to fit everything properly, she needs to ensure that the total weight on each shelf does not exceed its weight limit. Given a list of shelves and their weight limits, and a list of items with their weights, determine if Mocha can fit all the items into the fridge without exceeding the weight limit of any shelf. -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 le t le 50) — the number of test cases. Each test case consists of three lines. The first line contains a single integer m (1 le m le 100) — the number of shelves. The second line contains m integers w_1, w_2, ldots, w_m (1 le w_i le 10000) — the weight limits of the shelves. The third line contains m integers i_1, i_2, ldots, i_m (1 le i_j le 1000) — the weights of the items. It is guaranteed that the number of shelves and the number of items is the same for each test case, i.e., m. -----Output----- For each test case, print \\"YES\\" if Mocha can fit all the items into the fridge without exceeding any shelf\'s weight limit, otherwise, print \\"NO\\". -----Examples----- Input 2 3 10 20 30 5 10 15 4 15 25 10 20 5 15 10 25 Output YES NO -----Note----- In the first test case, all shelves can fit their corresponding items without exceeding the weight limits, hence the output is \\"YES\\". In the second test case, the second shelf\'s weight limit is 25, which is less than the third item\'s weight of 10. Thus, the output is \\"NO\\".","solution":"def can_fit_items(t, test_cases): results = [] for case in test_cases: m, weight_limits, item_weights = case can_fit = all(item_weights[i] <= weight_limits[i] for i in range(m)) results.append(\\"YES\\" if can_fit else \\"NO\\") return results"},{"question":"In a forest, there are several trees, and on each tree, there might be a number of fruits. Each fruit has a sweetness value associated with it. Your goal is to find the tree with the maximum total sweetness of its fruits. You are given an array `tree` where `tree[i]` represents a list of integers corresponding to the sweetness values of the fruits on the ith tree. Your task is to find the maximum total sweetness among all the trees. Write a function `max_sweetness(tree: List[List[int]]) -> int` that takes the 2D list `tree` as input and returns an integer representing the maximum total sweetness of any single tree. # Input - An array `tree` where `tree[i]` is a list of integers representing the sweetness values of fruits on the ith tree. - Each sublist (i.e., tree[i]) contains at least one integer. # Output - An integer representing the maximum total sweetness of any single tree. # Example Input: ``` tree = [ [4, 5, 6], [1, 2], [10, 11, 12, 13] ] ``` Output: ``` 46 ``` Explanation: - The total sweetness of the first tree: 4 + 5 + 6 = 15 - The total sweetness of the second tree: 1 + 2 = 3 - The total sweetness of the third tree: 10 + 11 + 12 + 13 = 46 Therefore, the maximum total sweetness is 46. # Note - You can assume that the input `tree` array contains at least one tree and each tree has at least one fruit.","solution":"from typing import List def max_sweetness(tree: List[List[int]]) -> int: Returns the maximum total sweetness of any single tree. :param tree: List of lists containing sweetness values of fruits on each tree. :return: An integer representing the maximum total sweetness of any single tree. return max(sum(fruits) for fruits in tree)"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string s, you need to modify at most one character to make it a palindrome. Output if it is possible to make the string a palindrome by modifying at most one character. -----Input----- The first line of the input contains an integer t (1 leq t leq 1000) — the number of test cases. Each of the following t lines contains a string which consists of lowercase English letters. -----Output----- Output t lines, each of which contains the answer to the corresponding test case. Output \\"YES\\" if it is possible to make the given string a palindrome by modifying at most one character, and \\"NO\\" otherwise. You can output the answer in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will be recognized as a positive answer). -----Examples----- Input 3 abca abcd racecar Output YES NO YES -----Note----- In the first test case, changing the character \'b\' to \'a\' will result in the palindrome \\"acaa\\", so the answer is \\"YES\\". In the second test case, it is not possible to make \\"abcd\\" a palindrome by modifying just one character, so the answer is \\"NO\\". In the third test case, \\"racecar\\" is already a palindrome, so the answer is \\"YES\\".","solution":"def can_be_palindrome_with_one_change(s): Returns \\"YES\\" if the string can be made a palindrome by modifying at most one character, else \\"NO\\". n = len(s) left, right = 0, n - 1 changes_needed = 0 while left < right: if s[left] != s[right]: changes_needed += 1 if changes_needed > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" def solve(test_cases): Solve the problem for all the given test cases. results = [] for s in test_cases: results.append(can_be_palindrome_with_one_change(s)) return results"},{"question":"Given a sequence of integers, Chef wants to split it into a set of contiguous subsequences (subarrays) such that each subsequence is sorted in non-decreasing order. They can then choose one of the largest elements from these subsequences and sum them up. However, Chef can only choose an integer from each subsequence if it is unique in that subsequence. Chef needs help to determine the minimum number of splits required to satisfy such conditions. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output ------ For each test case, print a single line containing the minimum number of splits required for each sequence. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100,000 1 ≤ A_{i} ≤ 10^{9} ------ Subtasks ------ Subtask #1 (20 points): the sum of N over all test cases does not exceed 1,000 Subtask #2 (80 points): original constraints ----- Sample Input ------ 3 5 1 2 3 4 5 4 2 1 3 4 6 4 5 5 4 3 2 ----- Sample Output ------ 1 2 5 ------ Explanation ------ Example case 1: The entire sequence is already non-decreasing, there is no need to split. Example case 2: By splitting the sequence into [2], [1, 3, 4] we can satisfy the condition. Example case 3: We can split the sequence into [4], [5], [5], [4], [3], [2] to meet the requirement.","solution":"def min_splits(arr): Calculate the minimum number of splits required to divide the sequence into contiguous subsequences such that each subsequence is sorted in non-decreasing order and each element in the subsequence is unique. if not arr: return 0 splits = 1 previous = arr[0] seen = {arr[0]} for i in range(1, len(arr)): if arr[i] in seen or arr[i] < previous: splits += 1 seen = {arr[i]} else: seen.add(arr[i]) previous = arr[i] return splits def solve(test_cases): results = [] for case in test_cases: results.append(min_splits(case)) return results"},{"question":"Two robots are on a grid, each starting from the same cell (0, 0) and they need to move to the bottom-right cell (n-1, m-1). The grid has some cells that are walkable (represented by \'O\') and some that are obstacles (represented by \'X\'). Both robots must follow the **same path** from the start to the end though they cannot occupy the same cell at the same time. If they find themselves in the same cell, they must continue moving in the same direction. Write a function `robots_path(grid: List[List[str]]) -> List[Tuple[int, int]]` that returns the path they should follow if there is one, otherwise return an empty list. The path should be stored as a list of tuples where each tuple contains the coordinates (row, column) of the cells in the path from the top-left to the bottom-right. # Constraints - The grid is represented by a 2D list of strings - The grid dimensions (n, m) will be at most 50x50 - There is always at least one valid path for a single robot (ignoring the blocking rule) from the top-left to the bottom-right cell. # Example Function Signature ```python from typing import List, Tuple def robots_path(grid: List[List[str]]) -> List[Tuple[int, int]]: # Implement your function here pass ``` # EXAMPLES ```python robots_path([ [\'O\', \'O\', \'X\'], [\'O\', \'X\', \'O\'], [\'O\', \'O\', \'O\'] ]) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)] robots_path([ [\'O\', \'X\', \'O\'], [\'O\', \'X\', \'O\'], [\'O\', \'O\', \'O\'] ]) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)] robots_path([ [\'O\', \'O\', \'O\'], [\'X\', \'X\', \'O\'], [\'O\', \'O\', \'O\'] ]) == [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)] robots_path([ [\'O\', \'O\'], [\'X\', \'X\'], [\'O\', \'O\'] ]) == [] ```","solution":"from typing import List, Tuple def robots_path(grid: List[List[str]]) -> List[Tuple[int, int]]: n = len(grid) m = len(grid[0]) # Directions - Right and Down only directions = [(0, 1), (1, 0)] def valid(cell: Tuple[int, int]) -> bool: x, y = cell return 0 <= x < n and 0 <= y < m and grid[x][y] == \'O\' # Store visited states and paths visited = set() def dfs(x: int, y: int, path: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if (x, y) == (n-1, m-1): return path + [(x, y)] visited.add((x, y)) for d in directions: nx, ny = x + d[0], y + d[1] if valid((nx, ny)) and (nx, ny) not in visited: res = dfs(nx, ny, path + [(x, y)]) if res: return res visited.remove((x, y)) return [] return dfs(0, 0, []) if grid[0][0] == \'O\' else []"},{"question":"In a parallel universe, the currency system is quite different. There are n different denominations of coins, and each denomination is represented by a positive integer value a_i (1 ≤ a_i ≤ 10^9). The king of this universe has recently decreed that they want to minimize the number of coins required to form a specific value mg of gold. You are required to determine the minimum number of coins needed to form the value mg using the given denominations. If it is not possible to form the value mg using the given coins, return -1. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of different coin denominations. The second line contains n space-separated integers denoting the value of each denomination. The third line contains a single integer mg (1 ≤ mg ≤ 10^5) — the required amount of gold to be formed. Output Output a single integer — the minimum number of coins needed to form the value mg, or -1 if it is not possible. Example Input 3 1 3 4 6 Output 2 Explanation In this case, you can use two coins of denomination 3 to form 6 units of gold. Input 2 5 7 1 Output -1 Explanation In this case, it is not possible to form 1 unit of gold using the given denominations.","solution":"def min_coins(n, denominations, mg): Returns the minimum number of coins required to form mg value of gold using the given n denominations. Returns -1 if it\'s not possible. :param n: int - number of denominations :param denominations: list of ints - values of the denominations :param mg: int - the required amount of gold to be formed :return: int - minimum number of coins needed or -1 if not possible # Initialize DP array with a large number representing infinity dp = [float(\'inf\')] * (mg + 1) dp[0] = 0 for coin in denominations: for x in range(coin, mg + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[mg] if dp[mg] != float(\'inf\') else -1"},{"question":"Problem: You are given a grid with m rows and n columns. Each cell in the grid contains a single lowercase alphabet letter. You are also given a list of k words. Your task is to implement a function that checks if each word in the list can be formed by a sequence of adjacent cells in the grid, where \\"adjacent\\" cells are horizontally or vertically neighboring. Each cell can only be used once per word. The function should return the number of words from the list that can be found in the grid. Constraints The input satisfies the following constraints: - 1 ≤ m, n ≤ 100 - 1 ≤ k ≤ 500 - 1 ≤ length of each word ≤ m * n - All words consist of lowercase English letters Input The input is given in the following format: m n grid k words On the first line, m and n are given, separated by a blank. On the next m lines, n characters, separated by blanks, represent the grid. On the next line, the integer k is given. On the next k lines, each line contains one word. Output Output the number of words from the list that can be found in the grid according to the specified rules. Examples Input 3 4 a b c e s f c s a d e e 2 abcced see Output 2 Input 2 2 a b c d 3 abc ab abcd Output 1","solution":"def word_exists(grid, word, m, n): def dfs(x, y, pos): if pos == len(word): return True if x < 0 or x >= m or y < 0 or y >= n or word[pos] != grid[x][y]: return False tmp, grid[x][y] = grid[x][y], \'#\' found = (dfs(x + 1, y, pos + 1) or dfs(x - 1, y, pos + 1) or dfs(x, y + 1, pos + 1) or dfs(x, y - 1, pos + 1)) grid[x][y] = tmp return found for i in range(m): for j in range(n): if grid[i][j] == word[0] and dfs(i, j, 0): return True return False def count_valid_words(m, n, grid, k, words): grid = [row.split() for row in grid] valid_count = 0 for word in words: if word_exists(grid, word, m, n): valid_count += 1 return valid_count"},{"question":"In a remote village of Nayawa, each household has traditionally relied on battery-operated radios to stay informed and connected. The batteries used are old and often have unpredictable energy levels, but the villagers have figured out a unique way to ensure they can make the most out of the available batteries. Each battery is characterized by a positive integer representing its energy level. When a radio is powered, it requires exactly one unit of energy per hour to function. If a battery still has energy left after powering a radio for a certain number of hours, the remaining energy can be used by another radio. The challenge is to determine the maximum number of hours a given number of radios can be operated with the available batteries. Given the number of batteries and their respective energy levels, as well as the number of radios, write a program to calculate the maximum number of hours all radios combined can be operated. Input The input is given in the following format: N M e_1 e_2 ... e_N The first line provides the number of batteries N (1 ≤ N ≤ 10^5) and the number of radios M (1 ≤ M ≤ 10^5). The second line provides the energy levels of the N batteries. Output Output the maximum number of hours all the radios can be operated. Examples Input 5 3 4 5 2 3 7 Output 7 Input 4 2 1 2 3 4 Output 5 Explanation In the first example, the five batteries have energy levels 4, 5, 2, 3, and 7. The maximum hours the three radios can be operated is 7. The distribution could be as follows: - Use battery with energy 7 to operate one of the radios for 7 hours. - Use battery with energy 5 to operate another radio for 5 hours, and then switch to the battery with energy 4 for the remaining 2 hours.","solution":"def max_operating_hours(N, M, energy_levels): Calculates the maximum hours all radios combined can be operated. Args: N : int : number of batteries M : int : number of radios energy_levels : list of int : energy levels of the batteries Returns: int : maximum number of hours all radios combined can be operated total_energy = sum(energy_levels) return total_energy // M"},{"question":"Write a function that takes a string as an input and returns the string reversed while maintaining the position of any spaces. Example: ```python reverse_string_with_spaces(\\"hello world\\") # => returns \\"dlrow olleh\\" ``` ```f# reverseStringWithSpaces \\"hello world\\" // => returns \\"dlrow olleh\\" ``` Ensure that any spaces in the original string remain in their original positions in the reversed string.","solution":"def reverse_string_with_spaces(s): Returns the reversed string while maintaining the position of any spaces. s_list = list(s) i, j = 0, len(s_list) - 1 while i < j: if s_list[i] == \' \': i += 1 elif s_list[j] == \' \': j -= 1 else: s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 return \'\'.join(s_list)"},{"question":"You have been hired to implement a new ordering system for a fast food chain. The system should manage customer orders and ensure that their food is prepared in the correct order of priority. Each order has a unique identifier and a priority level, where a lower number indicates higher priority. Orders are processed in ascending order of priority, and for orders with the same priority level, they are processed in the order they were received. Your task is to write a program that simulates this ordering system. -----Input----- The first line of input contains an integer t (1leq t leq 1000), representing the number of operations. Each of the next t lines describes an operation, which will be one of the following: - `\\"ORDER id priority\\"`: Adds an order with the given id (a string of 1 to 10 alphanumeric characters) and priority (an integer between 1 and 100, where 1 is the highest priority). - `\\"PROCESS\\"`: Processes and removes the order with the highest priority that was added earliest. If there are no orders to process, this operation should return `\\"NO ORDER\\"`. -----Output----- For every `\\"PROCESS\\"` operation, output the id of the processed order. If there are no orders to process, output `\\"NO ORDER\\"`. -----Example----- Sample Input: 6 ORDER A1 3 ORDER B2 1 ORDER C3 2 PROCESS PROCESS PROCESS Sample Output: B2 C3 A1 Sample Input: 4 PROCESS ORDER A3 2 PROCESS PROCESS Sample Output: NO ORDER A3 NO ORDER","solution":"import heapq class FastFoodOrderingSystem: def __init__(self): self.order_queue = [] self.order_counter = 0 def order(self, id, priority): heapq.heappush(self.order_queue, (priority, self.order_counter, id)) self.order_counter += 1 def process(self): if not self.order_queue: return \\"NO ORDER\\" _, _, order_id = heapq.heappop(self.order_queue) return order_id def process_commands(commands): system = FastFoodOrderingSystem() results = [] for command in commands: parts = command.split() if parts[0] == \\"ORDER\\": system.order(parts[1], int(parts[2])) elif parts[0] == \\"PROCESS\\": results.append(system.process()) return results"},{"question":"Given an array of integers nums, return all the triplets [nums[i], nums[j], nums[k]] such that i ≠ j, i ≠ k, and j ≠ k, and nums[i] + nums[j] + nums[k] == 0. Note: The solution set must not contain duplicate triplets. Example 1: Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] Example 2: Input: nums = [] Output: [] Example 3: Input: nums = [0] Output: [] Your Task: You need to complete the function threeSum() that takes an array nums and returns a 2D array containing all unique triplets that sum up to zero. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 0 <= nums.length <= 10^4 -10^5 <= nums[i] <= 10^5","solution":"def threeSum(nums): nums.sort() result = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"In a specific grid-based computer game, the player can move through the grid either horizontally or vertically but cannot move diagonally. Your task is to determine the shortest path the player should take to move from the top-left corner (0, 0) to the bottom-right corner (n, m) of the grid. The grid has some cells which are blocked, and the player cannot move through these cells. The grid is represented as a 2D list where \'1\' indicates a blocked cell and \'0\' indicates an open cell. Write a function that takes a grid (as a list of lists) as an input and returns the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, return -1. The player cannot move outside the boundaries of the grid. Function signature: `def shortestPath(grid: List[List[int]]) -> int:` Example 1: Input: ``` grid = [ [0, 1, 0, 0], [0, 0, 1, 1], [1, 0, 0, 0], [0, 0, 0, 0] ] ``` Output: 7 Explanation: The shortest path is (0,0) -> (1,0) -> (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). Example 2: Input: ``` grid = [ [0, 1], [1, 0] ] ``` Output: -1 Explanation: There is no path to the bottom-right corner. Note: - You can assume the grid has at least one cell (n, m ≥ 1). - The function should traverse the grid intelligently to find the shortest path, possibly utilizing common pathfinding algorithms such as BFS (Breadth-First Search).","solution":"from collections import deque from typing import List def shortestPath(grid: List[List[int]]) -> int: Find the shortest path in a grid from (0, 0) to (n-1, m-1), where some cells are blocked. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # Initialize queue with starting position (0, 0) and path length 1 visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"A bakery wants to organize its pastry selection so that it forms symmetrical patterns. Given a number N, help the bakery to display an N x N matrix where each element is either 0 or 1. The matrix forms a symmetric pattern with respect to its middle row and column. If a cell is at a distance \\"d\\" from the center (both in terms of row and column), it is filled with 1 if \\"d\\" is less than or equal to floor(N/2), otherwise it is filled with 0. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the N x N matrix as described. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 - N is always odd -----Sample Input:----- 2 3 5 -----Sample Output:----- 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 -----EXPLANATION:----- The first test case with N=3 forms a completely filled matrix because the distance from the center to any cell is at most 1. The second test case with N=5 also forms a completely filled matrix by the same logic. For larger values of N, the center cells would be filled with 1, while the cells further from the center would be filled with 0.","solution":"def generate_symmetric_matrix(N): Generates an N x N symmetric matrix based on the given problem conditions. A cell is filled with 1 if its distance from the center is less than or equal to floor(N/2), otherwise it is filled with 0. Parameters: N (int): The size of the matrix, must be an odd integer. Returns: List[List[int]]: N x N matrix of 0s and 1s. center = N // 2 matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): if abs(i - center) <= center and abs(j - center) <= center: matrix[i][j] = 1 else: matrix[i][j] = 0 return matrix def generate_matrices_for_test_cases(T, test_cases): Generates the matrices for multiple test cases. Parameters: T (int): Number of test cases. test_cases (List[int]): A list of integers representing the size of the matrix for each test case. Returns: List[List[List[int]]]: A list of matrices corresponding to each test case. results = [] for N in test_cases: results.append(generate_symmetric_matrix(N)) return results"},{"question":"Two players, Alice and Bob, are playing a game on a rectangular grid of size NxM. Initially, Alice is at the top-left corner of the grid (1, 1) and Bob is at the bottom-right corner (N, M). The game proceeds as follows: - Alice can only move either right or down. - Bob can only move either left or up. Both players move simultaneously and must move exactly once every turn. They win the game if they meet at the same grid cell at the same time. Determine whether Alice and Bob can meet at the same cell after some moves. -----Input----- - The first line contains a single integer T, the number of test cases. - The first and only line of each test case contains two space-separated integers N and M, the dimensions of the grid. -----Output----- For each test case, print a single line containing the string \\"Yes\\" if Alice and Bob can meet or \\"No\\" if they cannot meet (without quotes). -----Constraints----- - 1 le T le 1,000 - 1 le N, M le 10^9 -----Example Input----- 5 2 2 3 3 2 3 4 6 5 7 -----Example Output----- Yes Yes No Yes Yes -----Explanation----- Example case 1: Alice can move right to (1, 2), and Bob can move up to (2, 2), so they meet at (2, 2). Example case 3: Alice\'s possible destinations are all cells in the form (2, k) or (3, k) and Bob\'s possible destinations are all cells in the form (k, 1) or (k, 2), so they cannot both meet at a common cell.","solution":"def can_meet(N, M): Determines if Alice and Bob can meet in the grid. Parameters: - N : int : number of rows in the grid - M : int : number of columns in the grid Returns: - str : \\"Yes\\" if Alice and Bob can meet, \\"No\\" otherwise if (N % 2 == M % 2): return \\"Yes\\" else: return \\"No\\" def solve(test_cases): results = [] for N, M in test_cases: results.append(can_meet(N, M)) return results"},{"question":"The kingdom of Flooglehorn is famous for its intricate waterways and bridges. The capital city, Rivermouth, is crisscrossed by several rivers, and the only way to travel between the districts is through a series of bridges. However, not all bridges are built the same. Some can only handle a certain weight before they collapse, and others are already broken. The King of Flooglehorn wants a system that will help residents to find out if they can safely travel from one district to another given their weight and a list of working bridges that will support that weight. Input The first line of the input contains three space-separated integers, n, m, and w (1 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ w ≤ 20), representing the number of districts, the number of bridges, and the different weight classes respectively. The next m lines each contain four space-separated integers u, v, t, and limit (1 ≤ u, v ≤ n, 1 ≤ t ≤ w, 1 ≤ limit ≤ 10000) describing a bridge from district u to district v, with a weight class t (weight classes are integers from 1 to w), and a maximum weight limit that the bridge can support. The bridges are bidirectional. The following line contains a single integer q (1 ≤ q ≤ 10000), representing the number of queries. Each of the next q lines contains three space-separated integers x, y, and p (1 ≤ x, y ≤ n, 1 ≤ p ≤ 10000), representing a query asking if a resident weighing p kilograms can travel from district x to district y. Output Your program should print q lines. The i-th line should be \\"YES\\" if the resident can travel from district x to district y without any bridge collapse, and \\"NO\\" otherwise. Example Input: 5 7 3 1 2 1 3 1 3 2 8 2 3 3 5 3 4 1 6 2 5 2 7 4 5 3 10 1 4 2 9 3 1 5 6 2 4 8 3 4 7 Output: YES NO YES Explanation In the given example, there are 5 districts and 7 bridges. The first bridge connects district 1 and district 2, and it is of weight class 1 with a weight limit of 3. For the given queries: 1. A resident of weight 6 can travel from district 1 to district 5 passing through bridges that can support their weight. 2. A resident of weight 8 cannot travel from district 2 to district 4 because bridge 2-3 of class 3 cannot support the weight. 3. A resident of weight 7 can travel from district 3 to district 4 directly with a bridge that supports the weight. Notes - Ensure that the resident can use the bridges considering their weight. - Weight class implies different types of restrictions or different sets of bridges, so you need to find the correct pathways that match the resident\'s weight. - Use efficient algorithms to handle the constraints effectively.","solution":"from collections import defaultdict, deque def can_travel(n, m, w, bridges, queries): def build_graph(weight_class): graph = defaultdict(list) for u, v, t, limit in bridges: if t <= weight_class: graph[u].append((v, limit)) graph[v].append((u, limit)) return graph def bfs(graph, start, end, max_weight): queue = deque([start]) visited = set([start]) while queue: node = queue.popleft() if node == end: return True for neighbor, limit in graph[node]: if neighbor not in visited and limit >= max_weight: visited.add(neighbor) queue.append(neighbor) return False max_weight_class = max(weight for _, _, weight, _ in bridges) results = [] for x, y, p in queries: can_reach = False for weight_class in range(1, max_weight_class + 1): graph = build_graph(weight_class) if bfs(graph, x, y, p): can_reach = True break results.append(\\"YES\\" if can_reach else \\"NO\\") return results # Reading inputs and handling the output accordingly def process_input_output(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]); index += 1 m = int(data[index]); index += 1 w = int(data[index]); index += 1 bridges = [] for _ in range(m): u = int(data[index]); index += 1 v = int(data[index]); index += 1 t = int(data[index]); index += 1 limit = int(data[index]); index += 1 bridges.append((u, v, t, limit)) q = int(data[index]); index += 1 queries = [] for _ in range(q): x = int(data[index]); index += 1 y = int(data[index]); index += 1 p = int(data[index]); index += 1 queries.append((x, y, p)) results = can_travel(n, m, w, bridges, queries) for result in results: print(result)"},{"question":"You are working on a financial software system that processes records of daily stock prices. Each record contains the stock symbol, the date, and the stock price for that date. Your task is to calculate the average stock price for each stock symbol, based on the provided dataset. Write a program that reads the stock price records, processes them, and outputs the average stock price for each stock symbol in alphabetical order. Input The input is a sequence of datasets, and each dataset is given in the following format. ``` N symbol1 date1 price1 symbol2 date2 price2 ... symbolN dateN priceN ``` The first line is the number of records N in the dataset (1 ≤ N ≤ 1000). The N lines that follow contain information about one stock price record in each line. The stock symbol is a string of up to 5 uppercase letters, the date is given in the format YYYY-MM-DD (e.g., 2023-07-15), and the price is a positive floating-point number. The end of the input is represented by a line containing only one zero. Output For each dataset, output the stock symbols and their average prices, one for each row, in alphabetical order of the stock symbols. Each average price should be displayed with two decimal places. After the output of each dataset, output one line consisting of only \\"#\\". Example Input ``` 5 AAPL 2023-07-14 145.87 GOOGL 2023-07-14 2725.82 MSFT 2023-07-14 289.67 AAPL 2023-07-15 148.56 GOOGL 2023-07-15 2700.30 4 TSLA 2023-07-14 652.81 TSLA 2023-07-15 648.00 FB 2023-07-14 342.50 FB 2023-07-15 339.58 0 ``` Output ``` AAPL 147.22 GOOGL 2713.06 MSFT 289.67 # FB 341.04 TSLA 650.40 #","solution":"def calculate_average_stock_prices(datasets): result = [] for dataset in datasets: stock_data = {} for record in dataset: symbol, date, price = record.split() price = float(price) if symbol in stock_data: stock_data[symbol].append(price) else: stock_data[symbol] = [price] # Calculate average prices and sort symbols averages = {symbol: sum(prices) / len(prices) for symbol, prices in stock_data.items()} sorted_symbols = sorted(averages.keys()) for symbol in sorted_symbols: result.append(f\\"{symbol} {averages[symbol]:.2f}\\") result.append(\\"#\\") return result # Parsing the input from multi-line string to structured format def parse_input(input_string): lines = input_string.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break dataset = [] for j in range(i + 1, i + 1 + n): dataset.append(lines[j]) datasets.append(dataset) i += n + 1 return datasets"},{"question":"You will be given an integer array and your task is to find the smallest missing positive integer. The algorithm should run in linear time and use constant space. For example, given `[1, 2, 0]`, the function should return `3` because it is the smallest positive integer missing from the array. For example: ```python solve([1, 2, 0]) = 3 solve([3, 4, -1, 1]) = 2 solve([7, 8, 9, 11, 12]) = 1 ``` More examples in the test cases. Good luck! If you like this problem, try [Finding Missing Elements](https://www.codewars.com/kata/5a6b24d4e626c59e1d0001ad)","solution":"def find_smallest_missing_positive(nums): Finds the smallest missing positive integer in the given list. n = len(nums) # First, make all numbers out of range (negative numbers and numbers > n) to a large value, e.g., n + 1 for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Use the index as a hash to record the presence of numbers. for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # The first index with a positive value is the missing positive integer. for i in range(n): if nums[i] > 0: return i + 1 # If no positive value is found, then the missing integer is n + 1 return n + 1"},{"question":"Rohan is organizing a charity event and needs to assign volunteers to different tasks. Each task starts and ends at a specific time. If two tasks overlap, the same volunteer cannot be assigned to both tasks. Given the schedule of tasks, determine the minimum number of volunteers required. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of tasks. The next n lines contain two integers si and ei (0 ≤ si < ei ≤ 10^9), the start and end times of the i-th task. Output Print a single integer, the minimum number of volunteers required to manage all tasks. Examples Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 1","solution":"def min_volunteers_required(tasks): Determines the minimum number of volunteers required to manage all tasks. Parameters: tasks (list of tuples): List of tuples where each tuple (si, ei) represents a task\'s start and end time. Returns: int: Minimum number of volunteers required. events = [] for start, end in tasks: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() # Sort primarily by time and secondarily by type (\'end\' should come before \'start\' if times are equal) max_volunteers = 0 current_volunteers = 0 for time, event in events: if event == \'start\': current_volunteers += 1 max_volunteers = max(max_volunteers, current_volunteers) else: current_volunteers -= 1 return max_volunteers # Example usage: # tasks = [(1, 3), (2, 5), (4, 6)] # print(min_volunteers_required(tasks)) # Output: 2"},{"question":"You are given a log file consisting of multiple entries, each entry detailing an event in a system. Each entry has the format: \\"YYYY-MM-DD HH:MM:SS <Event_Type> <Event_Description>\\". Your task is to write a program that outputs a summary report of the events. The summary should contain the number of occurrences of each event type for each hour in the log file, ordered by date and hour. Input A single log file containing multiple entries. Each entry is on a new line and follows the format mentioned above. The log entries are sorted by date and time. The input terminates with a line containing the string \\"END\\". Output A summary report in the format \\"YYYY-MM-DD HH <Event_Type_1>: <Count>, <Event_Type_2>: <Count>, ...\\". The Event_Types should be sorted alphabetically within each hour. If an hour has no events, it should not appear in the summary. Examples Input ``` 2023-10-01 08:23:45 LOGIN User123 logged in 2023-10-01 08:47:12 LOGOUT User123 logged out 2023-10-01 09:00:01 LOGIN User456 logged in 2023-10-01 10:15:05 LOGIN User789 logged in 2023-10-01 10:45:30 LOGOUT User456 logged out 2023-10-02 08:00:00 LOGIN User123 logged in 2023-10-02 08:30:00 LOGOUT User123 logged out END ``` Output ``` 2023-10-01 08 LOGIN: 1, LOGOUT: 1 2023-10-01 09 LOGIN: 1 2023-10-01 10 LOGIN: 1, LOGOUT: 1 2023-10-02 08 LOGIN: 1, LOGOUT: 1 ```","solution":"def parse_log(log_lines): from collections import defaultdict from itertools import groupby event_summary = defaultdict(lambda: defaultdict(int)) for line in log_lines: if line.strip() == \\"END\\": break date, time, event_type, *event_description = line.split(maxsplit=3) hour = time[:2] event_key = f\\"{date} {hour}\\" event_summary[event_key][event_type] += 1 return event_summary def format_summary(event_summary): result = [] for date_hour, events in sorted(event_summary.items()): events_str = \\", \\".join(f\\"{event}: {count}\\" for event, count in sorted(events.items())) result.append(f\\"{date_hour} {events_str}\\") return \\"n\\".join(result) def generate_summary(log_lines): event_summary = parse_log(log_lines) return format_summary(event_summary)"},{"question":"In a kingdom far away, there existed a dense enchanted forest where magical creatures lived in harmony. The forest was divided into various regions marked by unique trees called \\"root nodes.\\" These trees served as the central points of magical energy that protected the regions from external threats. However, as time passed, some root nodes grew old and started losing their magical powers. To maintain the protective barrier, the kingdom’s wizard council decided to connect these root nodes using magical paths to form a network of protection. The main objective is to ensure that the entire forest remains connected through these root nodes, and the magical energy can flow seamlessly between them. To achieve this, the wizard council needs to construct paths between pairs of root nodes in such a way that the total length of all paths is minimized. Since the paths can only be built between existing root nodes, each path is a straight line connecting two root nodes. Your job is to write a program that finds the minimum total length of paths needed to connect all the root nodes in the forest. # Input The input consists of multiple datasets. Each dataset is given in the following format: ``` N x1 y1 x2 y2 ... xN yN ``` The first line consists of a single integer `N` representing the number of root nodes. Each of the following `N` lines consists of two integers `xi` and `yi`, representing the coordinates of the `i-th` root node. You can assume `1 ≤ N ≤ 100` and `-1000 ≤ xi, yi ≤ 1000`. The end of the input consists of a single line containing zero. # Output For each dataset, output the minimum total length of all paths required to ensure that the entire forest remains connected. The output value should be displayed with an accuracy of 6 decimal places. # Example Input ``` 4 0 0 0 1 1 0 1 1 3 0 0 2 2 3 3 0 ``` Output ``` 3.000000 4.242641 ``` # Explanation In the first dataset of the sample input, the minimum total length of paths to connect all the root nodes can be visualized as connecting the points in a grid: ``` (0,1) - (1,1) | | (0,0) - (1,0) ``` The total length of the paths is 1+1+1=3.000000. In the second dataset, the minimum spanning tree can be a straight line connecting the points in a sequence: ``` (0,0) - (2,2) - (3,3) ``` The total length of the paths approximates to 4.242641.","solution":"import sys import math import heapq def calculate_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def prim_mst(points): N = len(points) if N == 0: return 0.0 in_mst = [False] * N min_edge = [(0, 0)] total_length = 0.0 edges_count = 0 while edges_count < N: weight, node = heapq.heappop(min_edge) if in_mst[node]: continue in_mst[node] = True total_length += weight edges_count += 1 for next_node in range(N): if not in_mst[next_node]: dist = calculate_distance(points[node], points[next_node]) heapq.heappush(min_edge, (dist, next_node)) return total_length def solve(): input = sys.stdin.read data = input().strip().split() index = 0 result = [] while index < len(data): N = int(data[index]) index += 1 if N == 0: break points = [] for i in range(N): x = int(data[index]) y = int(data[index + 1]) points.append((x, y)) index += 2 mst_length = prim_mst(points) result.append(f\\"{mst_length:.6f}\\") for res in result: print(res)"},{"question":"You are given an array of N integers. You need to perform an operation exactly K times: - In each operation, you can choose any two distinct indices i and j (1-based index) such that i ≠ j, and add the value at index j to the value at index i. This means performing the operation `array[i] := array[i] + array[j]`. After exactly K operations, print the maximum possible value that can be obtained at any index in the array. If multiple indices can have the maximum value, return the smallest index (1-based). --- Input Format --- - The first line contains a single integer T, the number of test cases. - Each test case consists of two parts: 1. The first line contains two space-separated integers N and K – the size of the array and the number of operations respectively. 2. The second line contains N space-separated integers, denoting the elements of the array. --- Output Format --- For each test case, print a single line containing two space-separated integers: - The maximum possible value that can be obtained at any index in the array after exactly K operations. - The 1-based index of the first occurrence of this maximum value. --- Constraints --- 1 ≤ T ≤ 1000 2 ≤ N ≤ 100 1 ≤ K ≤ 100 -1000 ≤ array[i] ≤ 1000 --- Sample Input 1 --- 3 3 1 1 2 3 4 2 -1 -2 -3 -4 3 3 5 5 5 --- Sample Output 1 --- 3 3 -1 1 15 1 --- Explanation 1 --- Test Case 1: - Operations: (1 + 2) = 3 at index 1 or 2. - Maximum value obtained is 3 at index 3. Test Case 2: - Operations: Any addition does not change the order of negative values significantly if maximum value we can match is -1. So, as multiple indices have the same highest value after operations, first occurrence of this is at index 1. Test Case 3: - Operations: Any addition keeps boosting values cyclic. Here, we set at index 1 as all being same initially and it reaches to it first.","solution":"def max_value_after_k_operations(T, test_cases): results = [] for test_case in test_cases: N, K = test_case[0] arr = test_case[1] max_value = sum(arr) smallest_index = 1 results.append((max_value, smallest_index)) return results"},{"question":"A research team is working on a communication protocol for a new generation of Internet of Things (IoT) devices. These devices synchronize their operations by periodically broadcasting their unique ID to their neighbors. Each device knows the IDs of its immediate neighbors, which can form a network. The problem is to verify if the network formed by these devices is connected. A network is considered connected if there is a path between any pair of devices. Given a set of devices and their neighbor lists, write a program to determine if the network is connected. Input: - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of devices. - The following N lines each contain a list of space-separated integers. The first integer of each line is the ID of the device, followed by the IDs of its neighbors. Output: - For each test case, print \\"Connected\\" if the network is connected and \\"Not Connected\\" otherwise. Constraints: - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - Each device ID is a unique integer between 1 and N. SAMPLE INPUT 2 4 1 2 3 2 1 4 3 1 4 2 3 1 2 2 1 3 3 2 SAMPLE OUTPUT Connected Connected Explanation: - In the first test case, the network consists of devices with IDs 1, 2, 3, and 4. The connections are as follows: 1 is connected to 2 and 3, 2 is connected to 1 and 4, 3 is connected to 1, and 4 is connected to 2. All devices are reachable from each other, so the network is connected. - In the second test case, the network consists of devices with IDs 1, 2, and 3. The connections are as follows: 1 is connected to 2, 2 is connected to 1 and 3, and 3 is connected to 2. All devices are reachable from each other, so the network is connected.","solution":"def is_network_connected(T, test_cases): Determines if the network of devices is connected for each test case. Parameters: - T (int): Number of test cases. - test_cases (list of tuples): Each tuple contains the number of devices and their neighbor lists. Returns: - list: Results for each test case in the form of \\"Connected\\" or \\"Not Connected\\". from collections import deque, defaultdict def bfs_check_connected(N, adjacency_list): visited = set() queue = deque([1]) # Start BFS from any node, here we choose node with ID 1 visited.add(1) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) == N # All nodes must be visited for the graph to be connected results = [] for case in test_cases: N, neighbors = case adjacency_list = defaultdict(list) for neighbor_list in neighbors: device = neighbor_list[0] for neighbor in neighbor_list[1:]: adjacency_list[device].append(neighbor) if bfs_check_connected(N, adjacency_list): results.append(\\"Connected\\") else: results.append(\\"Not Connected\\") return results"},{"question":"In a small village, there is a narrow circular road that is exactly N meters long. Starting at one point on this road, you need to plant M trees such that each pair of consecutive trees is exactly P meters apart. Define the first tree\'s position as 0. If it is not possible to plant M trees under the given conditions, return -1. Otherwise, return the positions of the M trees in a list. Input: The first line will contain integer T - number of test cases. Each of the next T lines will contain three space-separated integers: N - length of the circular road in meters, M - number of trees, P - distance in meters between each pair of consecutive trees. Output: For each test case, return a list of M integers indicating the positions of the trees along the circular road. If planting M trees with the given distance P is not possible, return -1. Constraints: 1 ≤ T ≤ 10000 1 ≤ N ≤ 1000000000 (10^9) 2 ≤ M ≤ 1000 1 ≤ P ≤ 1000000 (10^6) Example Input: 3 100 4 25 90 4 25 50 10 5 Example Output: [0, 25, 50, 75] -1 [0, 5, 10, 15, 20, 25, 30, 35, 40, 45] Explanation: In the first test case, it is possible to plant 4 trees at positions 0, 25, 50, and 75 meters, respectively. In the second test case, it is not possible to plant 4 trees each 25 meters apart on a 90-meter long circular road because the last distance would not fit within 90 meters. In the third test case, it is possible to plant 10 trees each 5 meters apart on a 50-meter long circular road, looping back to positions starting from 0 once the distance exceeds 50 meters.","solution":"def plant_trees(N, M, P): Determines the positions of M trees along a circular road of length N with each pair of consecutive trees exactly P meters apart. Args: N (int): Length of the circular road in meters. M (int): Number of trees to be planted. P (int): Distance in meters between each pair of consecutive trees. Returns: list: A list of M integers indicating the positions of the trees along the road if possible, otherwise returns -1. # If the total distance for (M-1) gaps exceeds the road length N, it\'s impossible if M * P > N: return -1 positions = [(i * P) % N for i in range(M)] return positions def solve(T, test_cases): results = [] for case in test_cases: N, M, P = case result = plant_trees(N, M, P) results.append(result) return results"},{"question":"Given a list of non-negative integers representing stock prices for each day, your task is to calculate the maximum profit you can achieve by executing at most one buy and one sell operation. You must buy before you sell. If no profit can be achieved, return 0. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of days. The second line contains n space-separated integers representing the stock prices for each day. Output Print a single integer, the maximum profit you can achieve. Example Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0","solution":"def max_profit(prices): Calculate the maximum profit that can be achieved by executing at most one buy and one sell operation. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"# Expression Converter In many programming tasks, you might need to convert mathematical expressions from one form to another. One common conversion is from infix notation to postfix notation (also known as Reverse Polish Notation, RPN). In infix notation, operators are written between operands (e.g., `a + b`). In postfix notation, operators are written after their operands (e.g., `a b +`). Postfix notation makes it easier to evaluate expressions without the need for parentheses to dictate the order of operations. Here\'s a quick illustrative example: - Infix notation: `(a + b) * c` - Postfix notation: `a b + c *` Given an infix expression, your task is to write a function `to_postfix(expression: str) -> str` that converts the given infix expression to a postfix expression. Operators & Precedence The valid operators and their precedence (from lowest to highest) are: - `+` and `-` (lowest precedence) - `*` and `/` (medium precedence) - `^` (highest precedence) Parentheses `()` can be used to override usual operator precedence. Assumptions - The input expression will be a valid infix expression. - The expression will consist of single-letter variable operands `a` to `z`, operators `+`, `-`, `*`, `/`, `^`, and parentheses `(` and `)`. Examples ```python assert to_postfix(\\"a + b\\") == \\"ab +\\" assert to_postfix(\\"(a + b) * c\\") == \\"ab + c *\\" assert to_postfix(\\"a + b * c\\") == \\"abc * +\\" assert to_postfix(\\"(a + b) ^ (c - d)\\") == \\"ab + cd - ^\\" assert to_postfix(\\"a ^ b ^ c\\") == \\"abc ^ ^\\" ``` Function Signature ```python def to_postfix(expression: str) -> str: pass ``` Your implementation must correctly convert infix expressions to postfix notation while respecting operator precedence and associativity rules.","solution":"def to_postfix(expression: str) -> str: precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2, \'^\': 3} associativity = {\'+\': \'L\', \'-\': \'L\', \'*\': \'L\', \'/\': \'L\', \'^\': \'R\'} result = [] stack = [] for char in expression: if char.isalpha(): result.append(char) elif char in precedence: while (stack and stack[-1] != \'(\' and (precedence[stack[-1]] > precedence[char] or (precedence[stack[-1]] == precedence[char] and associativity[char] == \'L\'))): result.append(stack.pop()) stack.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': result.append(stack.pop()) stack.pop() # pop the \'(\' while stack: result.append(stack.pop()) return \' \'.join(result)"},{"question":"You\'re given the task of arranging a series of meeting times with clients. Meetings are represented by a list of intervals where each interval consists of a start and end time. Your goal is to determine the maximum number of non-overlapping meetings that can be scheduled. Input: First line contains an integer T, the number of test cases. (1 ≤ T ≤ 100). Each test case starts with an integer N, the number of meetings. (1 ≤ N ≤ 10^5). The next N lines each contain two integers, start[i] and end[i], representing the start and end times of a meeting (0 ≤ start[i] < end[i] ≤ 10^9). Output: For each test case, output a single integer, the maximum number of non-overlapping meetings that can be scheduled. SAMPLE INPUT 2 3 1 2 2 3 3 4 4 1 3 2 4 3 5 6 8 SAMPLE OUTPUT 3 3 Explanation **Sample Input** 2 3 1 2 2 3 3 4 4 1 3 2 4 3 5 6 8 **Output:** 3 3 **Explanation** In the first test case, you can schedule all three meetings since they do not overlap: 1-2, 2-3 and 3-4. In the second test case, the maximum number of non-overlapping meetings are: 1-3, 3-5 and 6-8. (2-4 overlaps with both 1-3 and 3-5 so it cannot be included). The result is 3 non-overlapping meetings for both test cases.","solution":"def max_non_overlapping_meetings(T, test_cases): result = [] for i in range(T): N, meetings = test_cases[i] # Sort meetings by their end times meetings.sort(key=lambda x: x[1]) count, last_end_time = 0, 0 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end result.append(count) return result"},{"question":"In a digital library system, books are kept in shelves that are represented as arrays. Each book has a thickness, which is represented as a positive integer. The goal of the system is to ensure the optimal use of shelf space by aligning books properly so that the height of books will not exceed the shelf\'s maximum thickness capacity. Given an array representing the thickness of books on a shelf and an integer representing the maximum thickness capacity of the shelf, write a program that divides the array into the minimum number of contiguous non-empty subarrays such that the sum of the thicknesses of the books in each subarray does not exceed the thickness capacity. For example, if the array is [2, 1, 3, 4, 5] and the thickness capacity is 5, the division should be [2, 1], [3], [4], [5] because the sum of [2, 1] is 3, which is less than or equal to 5, the sum of [3] is 3, and so on. Each subarray should contain book thicknesses that together do not exceed the thickness capacity. Input: - `n`, an integer (1 ≤ n ≤ 1000), the number of books. - `arr`, an array of `n` integers representing the thickness of each book (1 ≤ arr[i] ≤ 1000). - `max_thickness`, an integer (1 ≤ max_thickness ≤ 1000), the maximum allowable thickness capacity of the shelf. Output: - The minimum number of contiguous non-empty subarrays (shelves) needed to store all the books within the thickness capacity. Examples: Input 5 [2, 1, 3, 4, 5] 5 Output 4 Input 7 [10, 10, 10, 10, 10, 10, 10] 20 Output 4 Input 6 [1, 2, 3, 4, 5, 6] 9 Output 3 Input 8 [5, 5, 5, 5, 5, 5, 5, 5] 10 Output 4","solution":"def min_shelves_needed(n, arr, max_thickness): Function to divide books into minimum number of contiguous subarrays such that sum of thicknesses in each subarray does not exceed the maximum thickness capacity. Parameters: n - number of books arr - list of integers representing thickness of each book max_thickness - maximum allowable thickness capacity of the shelf Returns: int - minimum number of shelves needed shelves = 0 current_shelf_sum = 0 for thickness in arr: if current_shelf_sum + thickness > max_thickness: shelves += 1 current_shelf_sum = thickness else: current_shelf_sum += thickness if current_shelf_sum > 0: shelves += 1 return shelves"},{"question":"You are given an n times n grid of blank cells and two players, Alice and Bob, who play a game with the following rules: 1. Alice always goes first and places her symbol \'A\' in any blank cell. 2. Bob then places his symbol \'B\' in any blank cell. 3. The game alternates between Alice and Bob until the entire grid is filled. The objective is to determine if there exists a sequence of moves such that Alice can ensure that no three \'A\' symbols (placed by Alice) form an unbroken line horizontally, vertically, or diagonally. -----Input----- - The first and only line of the input contains a single integer n (3 le n le 20), the size of the grid. -----Output----- - Print \\"YES\\" if there exists a sequence of moves such that Alice can ensure no three \'A\' symbols form an unbroken line. Otherwise, print \\"NO\\". -----Examples----- Input 3 Output NO Input 4 Output YES -----Note----- In a 3x3 grid, there is no sequence of moves by which Alice can prevent forming a triplet of \'A\'s in a row, column, or diagonal if Bob plays optimally. However, in a 4x4 grid, Alice can avoid such triplets by placing her symbols intelligently.","solution":"def can_alice_avoid_triplets(n): Determines if Alice can ensure that no three \'A\' symbols form an unbroken line in an n x n grid when Alice and Bob take turns filling the grid. if n < 3: return \\"NO\\" # If n >= 4, Alice can avoid placing \'A\' in a way that would form any three in a row. # By placing \'A\' in a checkerboard pattern, Alice can ensure that no three \'A\'s are in a line. if n >= 4: return \\"YES\\" # If n is exactly 3, there\'s no way for Alice to avoid forming a triplet somewhere on the grid. return \\"NO\\""},{"question":"Given a string and a pattern, your task is to implement a function that finds all the starting indices of the pattern\'s anagrams in the given string. The function should return the list of these starting indices, sorted in ascending order. An anagram of a pattern is a permutation of the pattern. The string consists of lowercase English letters only. Function Signature: ```python def find_anagrams(s: str, p: str) -> List[int]: ``` Input: 1. `s`: A non-empty string of lowercase English letters with a length up to 10^5. 2. `p`: A non-empty string of lowercase English letters with a length up to 10^4. Output: - A list of integers representing the starting indices of the pattern\'s anagrams in the string `s`. Example: Input: ``` s = \\"cbaebabacd\\" p = \\"abc\\" ``` Output: ``` [0, 6] ``` Explanation: - The substring starting at index 0 (\\"cba\\") is an anagram of \\"abc\\". - The substring starting at index 6 (\\"bac\\") is an anagram of \\"abc\\". Input: ``` s = \\"abab\\" p = \\"ab\\" ``` Output: ``` [0, 1, 2] ``` Explanation: - The substring starting at index 0 (\\"ab\\") is an anagram of \\"ab\\". - The substring starting at index 1 (\\"ba\\") is an anagram of \\"ab\\". - The substring starting at index 2 (\\"ab\\") is an anagram of \\"ab\\". Note: - You may assume the string and pattern contain only lowercase letters. The function should have a time complexity better than O(n^2). Your function should be optimized for performance and exhibit an efficient solution. The focus should be on sliding window techniques or similar algorithms to ensure a fast computation time.","solution":"from typing import List from collections import Counter def find_anagrams(s: str, p: str) -> List[int]: Returns the starting indices of the anagrams of pattern p in string s. p_len = len(p) s_len = len(s) if p_len > s_len: return [] p_count = Counter(p) s_count = Counter() result = [] for i in range(s_len): # add the current character to the window s_count[s[i]] += 1 # remove the character left behind as the window slides forward if i >= p_len: if s_count[s[i - p_len]] == 1: del s_count[s[i - p_len]] else: s_count[s[i - p_len]] -= 1 # check if current window matches pattern\'s character count if p_count == s_count: result.append(i - p_len + 1) return result"},{"question":"A popular online multi-player card game features a wide variety of cards. Each card has a name and an effect. The power level of each card is determined based on the class, rarity, and various other factors. You, as a player, often find yourself wondering about the potential power of a deck of given cards. Your task is to write a program to calculate the combined power of all the cards in a given deck. Each card has a base power, and the total power of a card is calculated by multiplying its base power by its rarity multiplier. ----- Card Rarity Multipliers ----- - Common: 1 - Rare: 1.5 - Epic: 2 - Legendary: 3 Each card\'s data is provided as a string in the format: \\"<name>, <base_power>, <rarity>\\". The base power is an integer between 1 and 1000. There are a total of N cards, and you need to calculate the combined power of the entire deck. ----- Input ----- The first line contains one positive integer 1 leq N leq 100, giving the number of cards in the deck. The next N lines contain one card description each in the format: \\"<name>, <base_power>, <rarity>\\". ----- Output ----- Output the total power of the deck as a single integer. ----- Examples ----- Sample Input: 4 Dragon, 300, Legendary Wizard, 150, Epic Knight, 200, Rare Archer, 100, Common Sample Output: 1150 Explanation: - Dragon: 300 (base) * 3 (Legendary) = 900 - Wizard: 150 (base) * 2 (Epic) = 300 - Knight: 200 (base) * 1.5 (Rare) = 300 - Archer: 100 (base) * 1 (Common) = 100 Total power = 900 + 300 + 300 + 100 = 1600","solution":"def calculate_deck_power(cards): Calculate the total power of a given deck of cards. :param cards: List of strings where each string represents a card in the format \\"<name>, <base_power>, <rarity>\\" :return: Total power of the deck as a single integer # Dictionary to hold the multiplier for each rarity rarity_multipliers = { \\"Common\\": 1, \\"Rare\\": 1.5, \\"Epic\\": 2, \\"Legendary\\": 3 } total_power = 0 for card in cards: name, base_power, rarity = card.split(\\", \\") base_power = int(base_power) multiplier = rarity_multipliers[rarity] total_power += base_power * multiplier return int(total_power)"},{"question":"# Instructions You are given a list of integers that represents the heights of obstacles in a training field. A robot needs to jump over these obstacles and its jump height must be uniform for each run. Write a function `optimal_jump_height(obstacles: List[int]) -> int` that finds the minimum jump height that will allow the robot to clear all obstacles. The robot can only jump straight up and every obstacle must be cleared in a single jump during its run. If the robot\'s jump height equals the height of an obstacle, it will clear the obstacle. **Input:** - A list of integers representing the heights of obstacles. **Output:** - An integer representing the minimum uniform jump height sufficient to clear all obstacles. **Example:** Given the following list of obstacles: ``` [5, 1, 2, 3, 7] ``` The function should return: ``` 8 ``` Since 8 is the minimum jump height capable of clearing all obstacles.","solution":"def optimal_jump_height(obstacles): Returns the minimum jump height that will allow the robot to clear all obstacles. Parameters: - obstacles (List[int]): List of integers representing the heights of obstacles. Returns: - int: Minimum jump height sufficient to clear all obstacles. if not obstacles: return 0 return max(obstacles) + 1"},{"question":"Alice and Bob are playing a game with an array of integers. The array has N elements, and they take turns picking numbers from the array until there are no numbers left. Alice always goes first and picks any number she wants. Bob then picks any number he wants from the remaining numbers. They alternate turns until the array is empty. Alice wins if the sum of the numbers she picks is greater than the sum of the numbers Bob picks. Bob wins if the sum of the numbers he picks is greater than or equal to the sum of the numbers Alice picks. Given the array, determine if Alice can guarantee a win if both players play optimally. -----Constraints----- - 1 ≦ N ≦ 5000 - -10^9 ≦ array element ≦ 10^9 -----Input----- The input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Print \\"ALICE\\" if Alice can guarantee a win, otherwise print \\"BOB\\". -----Sample Input----- 5 3 9 1 2 7 -----Sample Output----- ALICE Alice can pick 9, then in the next round, she can pick 3 or 7 and guarantee a win with optimal play.","solution":"def can_alice_guarantee_win(n, a): Determines if Alice can guarantee a win given the array and optimal play. Parameters: n (int): The number of elements in the array. a (list): The list of integers. Returns: str: \\"ALICE\\" if Alice can guarantee a win, otherwise \\"BOB\\". total_sum = sum(a) if total_sum % 2 != 0: return \\"ALICE\\" a_sorted = sorted(a, reverse=True) alice_sum = 0 bob_sum = 0 for i in range(n): if i % 2 == 0: alice_sum += a_sorted[i] else: bob_sum += a_sorted[i] if alice_sum > bob_sum: return \\"ALICE\\" else: return \\"BOB\\""},{"question":"A company has a network of `n` servers connected by `m` bidirectional cables. Each cable has a bandwidth capacity. The IT team wants to determine the minimum capacity of the cable that should be upgraded to ensure that the data transfer between the server with minimum capacity and maximum capacity is optimized. Only one cable should be upgraded, and it should be the cable that contributes to the bottleneck in the overall network. Each server is labeled from 1 to n. # Input - The first line contains two integers `n` and `m` `(2 ≤ n ≤ 1000, 1 ≤ m ≤ 10^4)`, representing the number of servers and cables, respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` `(1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4)`, denoting a cable between server `u` and server `v` with capacity `w`. # Output - Print an integer representing the minimum capacity of the cable that should be upgraded. If upgrading any cable cannot affect the data transfer between the minimum and maximum capacity servers, print `-1`. # Example Input ``` 5 6 1 2 3 2 3 2 3 4 4 4 5 6 1 3 8 2 5 5 ``` Output ``` 2 ``` # Explanation The minimum capacity of the cable that should be upgraded to optimize the data transfer will be identified based on the network\'s bottleneck. In this example, the minimum cable capacity in the path forming the bottleneck is `2`. Upgrading this cable will improve the overall network capacity most effectively.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_cable_to_upgrade(n, m, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] i, e = 0, 0 while e < n - 1 and i < len(edges): u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result.append((u, v, w)) union(parent, rank, x, y) if len(result) != n - 1: return -1 min_bottleneck = min(result, key=lambda x: x[2])[2] return min_bottleneck"},{"question":"In a village, there are multiple villagers, and each of them has a certain number of gold coins. Every villager can either give one coin to another villager or take one coin from another villager. You are the chief of the village, and you want to make sure that every two adjacent villagers have an equal number of gold coins. There are two questions you often encounter: 1. Given the initial number of coins each villager has, is it possible to make the number of coins equal for all adjacent pairs of villagers using a series of allowed operations? 2. If it\'s possible, what is the minimum number of coin transfer operations required to achieve this? Write a program that takes in the number of villagers and their initial coin counts, and outputs whether it\'s possible to equalize the coins for all adjacent villagers and, if it is possible, the minimum number of operations required. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100) - the number of villagers. The second line contains n space-separated integers c[i] (0 ≤ c[i] ≤ 1000) - the initial number of coins each villager has. -----Output----- If it is possible to make the number of coins equal for all adjacent pairs of villagers, print \\"YES\\" on the first line. If it\'s not possible, print \\"NO\\". If the answer is \\"YES\\", also print the minimum number of operations required on the second line. -----Examples----- Input: 3 3 1 2 Output: YES 1 Input: 4 2 3 5 7 Output: NO Input: 2 5 5 Output: YES 0","solution":"def equalize_coins(n, coins): total_sum = sum(coins) if total_sum % n != 0: return (\\"NO\\",) target = total_sum // n operations = 0 for coin in coins: if coin > target: operations += coin - target return (\\"YES\\", operations) # Example usage # print(equalize_coins(3, [3, 1, 2])) # Output: (\\"YES\\", 1) # print(equalize_coins(4, [2, 3, 5, 7])) # Output: (\\"NO\\",) # print(equalize_coins(2, [5, 5])) # Output: (\\"YES\\", 0)"},{"question":"You are given two strings, and you need to transform the first string into the second string using a sequence of operations. In one operation, you can either: 1. Insert a character. 2. Delete a character. 3. Replace one character with another character. Your task is to determine the minimum number of operations required to transform the first string into the second string. Input: The first line of the input contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case consists of two lines: The first line contains the first string S1 (1 ≤ |S1| ≤ 1000). The second line contains the second string S2 (1 ≤ |S2| ≤ 1000). Output: For each test case, output the minimum number of operations required. SAMPLE INPUT 3 horse ros intention execution abcd abc SAMPLE OUTPUT 3 5 1 Explanation: For the first test case, you can convert \\"horse\\" to \\"ros\\" with the following operations: 1. Remove \'h\': \\"horse\\" -> \\"orse\\" 2. Replace \'o\' with \'r\': \\"orse\\" -> \\"rrse\\" 3. Remove \'r\': \\"rrse\\" -> \\"rse\\" For the second test case, you can convert \\"intention\\" to \\"execution\\" with the following operations: 1. Replace \'i\' with \'e\': \\"intention\\" -> \\"entention\\" 2. Replace \'n\' with \'x\': \\"entention\\" -> \\"extention\\" 3. Replace \'t\' with \'e\': \\"extention\\" -> \\"execution\\" 4. Remove \'n\': \\"execution\\" -> \\"executio\\" 5. Remove \'t\': \\"executio\\" -> \\"executio\\" For the third test case, \\"abcd\\" can be converted to \\"abc\\" by deleting the last character (\'d\').","solution":"def min_operations(str1, str2): Returns the minimum number of operations required to transform str1 into str2. Operations include insert, delete, replace. m = len(str1) n = len(str2) # Create a table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last char # and recur for the remaining substring elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character are different, consider all # possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] def find_min_operations(test_cases): results = [] for str1, str2 in test_cases: results.append(min_operations(str1, str2)) return results"},{"question":"**Balanced String Shuffle** You are given a string that contains only two types of characters: lowercase \'a\' and lowercase \'b\'. You need to determine if you can shuffle the characters of the string in such a way that no two consecutive characters are the same. If it is possible, return one such shuffled string. If it is not possible, return the string \\"Not Possible\\". -----Input----- A single line containing the string S (1 ≤ |S| ≤ 1000) consisting of only \'a\' and \'b\'. -----Output----- If it is possible to shuffle the string such that no two consecutive characters are the same, output one such shuffled string. If it is not possible, output \\"Not Possible\\". -----Examples----- Input aabb Output abab Input aaab Output Not Possible Input abba Output abab -----Note----- In the first example, one possible shuffled string is \\"abab\\". In the second example, it is not possible to shuffle the characters such that no two consecutive characters are the same. In the third example, one possible shuffled string is \\"abab\\". Another valid output could be \\"baba\\".","solution":"def balanced_string_shuffle(s): Returns a shuffled version of the string s such that no two consecutive characters are the same. If not possible, returns \\"Not Possible\\". count_a = s.count(\'a\') count_b = s.count(\'b\') # Check if the shuffle is possible if abs(count_a - count_b) > 1: return \\"Not Possible\\" # Initialize result list result = [] # Decide starting character based on counts char_a, char_b = (\'a\', \'b\') if count_a >= count_b else (\'b\', \'a\') count_a, count_b = max(count_a, count_b), min(count_a, count_b) while count_a > 0 and count_b > 0: result.append(char_a) result.append(char_b) count_a -= 1 count_b -= 1 # Append remaining characters if any if count_a > 0: result.append(char_a) return \'\'.join(result)"},{"question":"A baker is preparing for a big event and needs to bake a lot of cakes. Each cake requires a specific number of eggs. Given a set number of eggs he has and the number of cakes he needs to bake, determine whether he has enough eggs to bake all the cakes. Return True if he has enough eggs, False otherwise. Function signature: ```python def can_bake_cakes(total_eggs: int, cakes: int, eggs_per_cake: int) -> bool: ``` Example: ```python assert can_bake_cakes(20, 5, 4) == True assert can_bake_cakes(20, 6, 4) == False assert can_bake_cakes(50, 10, 5) == True assert can_bake_cakes(18, 4, 5) == False ```","solution":"def can_bake_cakes(total_eggs: int, cakes: int, eggs_per_cake: int) -> bool: Determines whether there are enough eggs to bake the required number of cakes. Parameters: total_eggs (int): The total number of eggs available. cakes (int): The number of cakes to bake. eggs_per_cake (int): The number of eggs required per cake. Returns: bool: True if there are enough eggs to bake the cakes, False otherwise. required_eggs = cakes * eggs_per_cake return total_eggs >= required_eggs"},{"question":"_High Number Detector_ Overview In this challenge, you are going to design a class that will detect the highest number in a sequence of numbers provided. The class should be able to remember the highest number seen so far and provide various functionalities to interact with the sequence. The Goal ```python class HighNumberDetector: def __init__(self): self.highest = None self.sequence = [] def add_number(self, number): if self.highest is None or number > self.highest: self.highest = number self.sequence.append(number) def get_highest(self): if self.highest is not None: return self.highest raise ValueError(\\"No numbers in sequence yet\\") def get_sequence(self): return self.sequence # Usage Example detector = HighNumberDetector() detector.add_number(3) detector.add_number(5) print(detector.get_highest()) # Prints 5 detector.add_number(2) detector.add_number(10) print(detector.get_highest()) # Prints 10 print(detector.get_sequence()) # Prints [3, 5, 2, 10] ``` Specifications - The `HighNumberDetector` class must be implemented as shown in the sample code above. - The implemented class must have: - A constructor method `__init__` should initialize the highest number as `None` and sequence as an empty list. - An instance method `add_number` which takes a `number` argument and adds it to the sequence. If the `number` is higher than the current highest number, update the highest number. - An instance method `get_highest` which returns the highest number seen so far. If no numbers have been added, it should raise a `ValueError` with the message \\"No numbers in sequence yet\\". - An instance method `get_sequence` which returns the sequence of numbers added so far. Notes - The `HighNumberDetector` should support any integer and float numbers. - Be sure to handle cases where `get_highest` is called before any numbers have been added to avoid invalid operations.","solution":"class HighNumberDetector: def __init__(self): self.highest = None self.sequence = [] def add_number(self, number): if self.highest is None or number > self.highest: self.highest = number self.sequence.append(number) def get_highest(self): if self.highest is not None: return self.highest raise ValueError(\\"No numbers in sequence yet\\") def get_sequence(self): return self.sequence"},{"question":"You are given an array of `n` integers, where each integer represents the height of a building. You need to select two buildings such that the amount of water trapped between them is maximized if it starts raining. The water trapped can be calculated as the distance between the two buildings multiplied by the height of the shorter building. Write a function `maxWaterTrapped` that takes in an array of integers and returns the maximum water trapped between any two buildings. -----Input------ - An array of integers `heights` of length `n` (2 ≤ n ≤ 10^5), where each integer (0 ≤ heights[i] ≤ 10^4) represents the height of a building. -----Output----- - A single integer representing the maximum water trapped between two buildings. -----Examples----- Input [1, 8, 6, 2, 5, 4, 8, 3, 7] Output 49 Input [1, 1] Output 1 Input [4, 3, 2, 1, 4] Output 16 -----Note----- In the first test case, the maximum trapped water is between buildings with heights 8 and 7, and the distance between them is 7 units, thus trapping 7 * 7 = 49 units of water. In the second test case, the only two buildings have the same height, thereby trapping 1 * 1 = 1 unit of water. In the third test case, the maximum trapped water is between the first and the last building, with height 4 and a distance of 4 units, thus trapping 4 * 4 = 16 units of water.","solution":"def maxWaterTrapped(heights): Returns the maximum amount of water trapped between any two buildings. :param heights: List[int] - list of building heights. :return: int - maximum water trapped between two buildings. left = 0 right = len(heights) - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"A sequence of numbers is called a zigzag sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference could be either positive or negative. You are given a sequence of integers. Determine the maximal length of a subsequence that forms a zigzag sequence. A subsequence is obtained by deleting some, none, or all of the elements from the sequence without changing the order of the remaining elements. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the elements of the sequence. Output Output a single integer — the length of the longest zigzag subsequence. Example Input 6 1 7 4 9 2 5 Output 6 Input 7 1 17 5 10 13 15 10 5 16 8 Output 7","solution":"def max_zigzag_length(sequence): n = len(sequence) if n == 0: return 0 # Initialize dp arrays up = [1] * n down = [1] * n max_len = 1 for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: up[i] = max(up[i], down[j] + 1) elif sequence[i] < sequence[j]: down[i] = max(down[i], up[j] + 1) max_len = max(max_len, up[i], down[i]) return max_len"},{"question":"You are working for a renowned taxi service company. The company is expanding rapidly, and they want a system to monitor the rides taken by customers. Specifically, they are interested in the total distance traveled by all customers during a day. The distance of each ride is represented as a string in the format `km:meters`, where `km` is the distance covered in kilometers and `meters` is the additional distance covered in meters. For instance, the string `\'2:350\'` represents a ride that covered 2 kilometers and 350 meters. Write a function that takes an array of these ride distances and calculates the total distance covered in kilometers and meters. For example: - `[\'2:350\', \'1:200\']` should result in `3:550` - `[\'5:800\', \'3:250\', \'0:950\']` should result in `10:0` **Input:** - A single integer `n` (1 le n le 100,000) — the number of rides. - An array of `n` strings where each string is in the format `km:meters` (0 le km, meters le 10^6). **Output:** - A single string representing the total distance in the format `km:meters`. **Examples:** ``` Input 3 2:350 1:200 3:450 Output 6:0 ``` ``` Input 2 5:800 4:300 Output 10:100 ```","solution":"def total_distance(rides): Calculate the total distance covered in kilometers and meters from a list of rides. Args: rides : List[str] : list of ride distances in the format \\"km:meters\\" Returns: str : total distance in the format \\"km:meters\\" total_km = 0 total_meters = 0 for ride in rides: km, meters = map(int, ride.split(\':\')) total_km += km total_meters += meters # Convert total meters to kilometers if there are 1000 or more meters total_km += total_meters // 1000 total_meters = total_meters % 1000 return f\\"{total_km}:{total_meters}\\""},{"question":"Alice is an avid gardener and spends a lot of time in her garden taking care of her plants. Her garden consists of a grid of cells, where each cell may contain a plant or be empty. Alice wants to ensure that there\'s enough sunlight reaching each of her plants. For this, she uses a special type of transparent roof that can slide in from the top and stop only when it hits a plant or the ground. Given the initial configuration of Alice\'s garden, where \'P\' denotes a plant and \'.\' denotes an empty cell, your task is to determine the minimum height to which the transparent roof must be slid down such that it completely covers all plants vertically in each column. The roof will start to slide from the top row of the grid, and it will stop when it meets a plant or the bottom-most row of the garden in the respective column. Once the roof is slid down, no sunlight will pass through if it hits a plant. Write a program that calculates the height each column\'s roof needs to be slid down to cover the tallest plant in that column. Input The first line of input consists of two integers n and m, separated by a single space, representing the number of rows and columns of the garden grid, respectively. The next n lines consist of m characters each, representing the garden\'s initial configuration. Each character will be either \'P\' for plant or \'.\' for an empty cell. Output Output m space-separated integers, where each integer represents the height the transparent roof must be slid down in the corresponding column. Example Input 5 4 .... .P.. .... ..P. .... Output 4 2 1 5 Explanation: - In the first column, there are no plants, so the roof must be slid down to the bottom-most row (4th row). - In the second column, the highest plant is in the 2nd row, so the roof must be slid down to the 2nd row. - In the third column, the highest plant is in the 4th row, so the roof must be slid down to the 3rd row. - In the fourth column, there are no plants, so the roof must be slid down to the bottom-most row (4th row). Thus, the output is \\"4 2 1 5\\".","solution":"def calculate_roof_heights(n, m, garden): Calculates the height to which the transparent roof must be slid down in each column to cover all plants vertically. :param n: Number of rows in the garden grid. :param m: Number of columns in the garden grid. :param garden: List of strings representing the garden grid. :return: List of integers representing the minimum height the roof must be slid down in each column. heights = [] for col in range(m): max_height = 0 for row in range(n): if garden[row][col] == \'P\': max_height = row + 1 break if max_height == 0: max_height = n heights.append(max_height) return heights"},{"question":"You are given a series of ladders, each with a certain number of steps, and you need to calculate the total number of different ways you can climb to the top of each ladder. You can take either one step or two steps at a time. Input The first line in the data set consists of an integer N (1 leq N leq 100). N describes the number of ladders. The following N lines describe the ladders. The i-th line contains an integer S_i (1 leq S_i leq 45) which describes the number of steps on the i-th ladder. Output For each ladder, print on a new line the total number of ways to climb to the top of that ladder. Example Input 3 2 3 4 Output 2 3 5 Explanation For a ladder with 2 steps, the ways to climb are: (1, 1) and (2). Hence, there are 2 ways. For a ladder with 3 steps, the ways to climb are: (1, 1, 1), (1, 2), and (2, 1). Hence, there are 3 ways. For a ladder with 4 steps, the ways to climb are: (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (2, 1, 1), and (2, 2). Hence, there are 5 ways.","solution":"def count_ways_to_climb_ladders(steps): Given a list of steps for ladders, return a list of the number of ways to climb each ladder. Each ladder can be climbed one or two steps at a time. def count_ways(n): if n == 0 or n == 1: return 1 ways = [0] * (n + 1) ways[0], ways[1] = 1, 1 for i in range(2, n + 1): ways[i] = ways[i - 1] + ways[i - 2] return ways[n] return [count_ways(s) for s in steps]"},{"question":"Given an integer n, write a program to generate all possible binary strings of length n where no two 1\'s are adjacent. Example 1: Input: n = 2 Output: [\'00\', \'01\', \'10\'] Explanation: All possible binary strings of length 2 without consecutive 1s are \'00\', \'01\', and \'10\'. Example 2: Input: n = 3 Output: [\'000\', \'001\', \'010\', \'100\', \'101\'] Explanation: All possible binary strings of length 3 without consecutive 1s are \'000\', \'001\', \'010\', \'100\', and \'101\'. Your Task: You don\'t need to read or print anything. Your task is to complete the function generateStrings() which takes an integer n as input and returns a list containing all possible binary strings of length n without consecutive 1s. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 20","solution":"def generateStrings(n): Generate all possible binary strings of length n where no two 1\'s are adjacent. Args: n: Length of the binary strings to generate. Returns: list of strings: List of all possible binary strings of length n without consecutive 1s. result = [] def backtrack(current_string): if len(current_string) == n: result.append(current_string) return # Append \'0\' and continue backtrack(current_string + \'0\') # Append \'1\' and continue only if the last character is not \'1\' if not current_string or current_string[-1] != \'1\': backtrack(current_string + \'1\') backtrack(\\"\\") return result"},{"question":"You are given a matrix M of size n times m where each element is either \'1\' or \'0\'. Your task is to find the largest square containing only \'1\'s and return its area. The area of a square is its side length squared. -----Input----- The first line of input consists of two integers n and m (1 le n, m le 100) — the number of rows and columns in the matrix M. The next n lines each contain m characters, either \'1\' or \'0\', representing the matrix M. -----Output----- Print a single integer — the area of the largest square containing only \'1\'s. -----Examples----- Input 4 5 10100 10111 11111 10010 Output 4 Input 3 3 111 111 111 Output 9 Input 2 2 00 00 Output 0 -----Note----- In the first example, the largest square containing only \'1\'s has side length 2, thus its area is 2 times 2 = 4. In the second example, the largest square containing only \'1\'s has side length 3, thus its area is 3 times 3 = 9. In the third example, there are no \'1\'s, so the area of the largest square containing only \'1\'s is 0.","solution":"def maximal_square(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"Given an array arr[ ] of n integers and an integer k, rotate the array to the right by k steps. Note: - Try to solve the problem by using only O(1) extra space. Example 1: Input: n = 5 arr[] = {1, 2, 3, 4, 5} k = 2 Output: 4 5 1 2 3 Explanation: After rotating the array by 2 steps to the right, we get [4, 5, 1, 2, 3]. Example 2: Input: n = 7 arr[] = {1, 2, 3, 4, 5, 6, 7} k = 3 Output: 5 6 7 1 2 3 4 Explanation: After rotating the array by 3 steps to the right, we get [5, 6, 7, 1, 2, 3, 4]. Your task: Your task is to complete the function rotate_array(arr, n, k) which takes three parameters: the array arr, the size of the array n, and the integer k denoting the number of steps. This function returns the rotated array as a list of integers. Expected time complexity: O(n) Expected space complexity: O(1) Constraints: 1 <= n <= 10^{5} 1 <= arr[i] <= 10^{9} 0 <= k <= 10^{5}","solution":"def rotate_array(arr, n, k): Rotates the array to the right by k steps. Parameters: arr (list): The array to be rotated. n (int): The size of the array. k (int): The number of steps to rotate the array. Returns: list: The rotated array. k = k % n # Handle the case when k is greater than n return arr[-k:] + arr[:-k]"},{"question":"In a galaxy far, far away, there are planets connected by a network of hyperspace routes. Luke Skywalker is on a mission to deliver vital information from his base on planet A to the rebel alliance headquarters on planet B. The network is represented by an acyclic directed graph, where the vertices represent planets and the edges represent hyperspace routes, each with a travel time. Luke wants to find the shortest travel time from planet A to planet B to ensure the delivery is timely. Given a directed acyclic graph with N planets and M routes, find the shortest time required to travel from planet A to planet B. If there is no path from A to B, return -1. INPUT: - The first line contains two integers, N and M, representing the number of planets and the number of hyperspace routes respectively. - The next M lines each contain three integers, U, V, and W, representing a hyperspace route from planet U to planet V with a travel time of W. - The last line contains two integers, A and B, representing the starting planet and the ending planet respectively. OUTPUT: A single line containing the shortest travel time from planet A to planet B. If there is no path, print -1. CONSTRAINTS: 1 ≤ N ≤ 100000 0 ≤ M ≤ 500000 0 ≤ W ≤ 1000 1 ≤ U, V, A, B ≤ N SAMPLE INPUT: 5 6 1 2 1 1 3 3 2 3 1 2 4 6 3 4 2 3 5 4 1 4 SAMPLE OUTPUT: 4","solution":"import heapq def find_shortest_time(N, M, routes, A, B): from collections import defaultdict import heapq # Create adjacency list graph = defaultdict(list) for U, V, W in routes: graph[U].append((V, W)) # Initialize distances with infinity distances = {i: float(\'inf\') for i in range(1, N+1)} distances[A] = 0 # Min-heap to store (distance, planet) heap = [(0, A)] while heap: current_distance, current_node = heapq.heappop(heap) # If we reach planet B, return the distance if current_node == B: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) # If planet B is not reachable return -1 # Example usage: # N, M = 5, 6 # routes = [ # (1, 2, 1), # (1, 3, 3), # (2, 3, 1), # (2, 4, 6), # (3, 4, 2), # (3, 5, 4) # ] # A, B = 1, 4 # print(find_shortest_time(N, M, routes, A, B)) # Output: 4"},{"question":"A new gaming company wants to implement a new feature in its game which involves treasure hunting on an island represented as an n x m grid. Each cell in the grid contains a certain amount of gold, which can be a positive or zero value. A player can start from any cell in the leftmost column and move to the rightmost column. From a given cell, the player can move to the right, right-up, or right-down cell. The goal is to determine the maximum amount of gold a player can collect from the leftmost column to the rightmost column. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers n and m separated by a space, where n is the number of rows and m is the number of columns. The next n lines contain m integers each, where the j-th integer in the i-th line denotes the amount of gold in the (i, j)th cell. -----Output----- For each test case, output a new line with an integer corresponding to the maximum amount of gold a player can collect. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n, m ≤ 100 - 0 ≤ amount of gold in each cell ≤ 100 -----Example----- Input 2 3 3 1 3 1 3 2 1 4 0 6 4 4 1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2 Output 12 16 -----Explanation----- Example 1. There are multiple ways to collect the maximum gold (12), but one valid path is starting at (2, 1) -> (1, 2) -> (0, 3). Example 2. One way to collect the maximum gold (16) is starting at (2, 1) -> (3, 2) -> (2, 3) -> (1, 4).","solution":"def max_gold(grid): Returns the maximum amount of gold a player can collect from the leftmost column to the rightmost column. n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] for col in range(m-1, -1, -1): for row in range(n): right = dp[row][col+1] if col < m-1 else 0 right_up = dp[row-1][col+1] if row > 0 and col < m-1 else 0 right_down = dp[row+1][col+1] if row < n-1 and col < m-1 else 0 dp[row][col] = grid[row][col] + max(right, right_up, right_down) return max(dp[row][0] for row in range(n)) def max_gold_collected(test_cases): results = [] for n, m, grid in test_cases: results.append(max_gold(grid)) return results"},{"question":"Write a function that takes a string s as input and returns a new string that has been modified based on the following rules: - If s contains only alphabetic characters (a-z, A-Z), reverse the string and change the case of each letter (uppercase to lowercase and vice versa). - If s contains only digits (0-9), return the sum of these digits as a string. - If s contains a mix of alphabetic characters and digits, replace the alphabetic characters with their respective positions in the alphabet (a/A=1, b/B=2, etc.) and keep the digits unchanged. - If s is an empty string, return \\"Empty String\\". - For any other cases (such as special characters), return \\"Invalid Input\\". The function should handle both upper and lower case letters equivalently in all cases.","solution":"def modify_string(s): Modify the input string based on the specified rules. if not s: return \\"Empty String\\" if s.isalpha(): reversed_s = s[::-1] return \'\'.join([char.lower() if char.isupper() else char.upper() for char in reversed_s]) if s.isdigit(): return str(sum(int(char) for char in s)) if all(char.isalnum() for char in s): result = [] for char in s: if char.isalpha(): position = ord(char.lower()) - ord(\'a\') + 1 result.append(str(position)) else: result.append(char) return \'\'.join(result) return \\"Invalid Input\\""},{"question":"A fictional social media network keeps a record of a user\'s interaction sessions. Each session is represented as an interval on the timeline of the user\'s day. If a session starts at time `t1` and ends at time `t2`, we represent it as `[t1, t2]`. Due to overlapping interactions, it\'s possible that multiple sessions overlap in time, and we want to merge all the overlapping intervals into a single session. For example, if the sessions are `[1, 3]`, `[2, 6]`, and `[8, 10]`, the merged result would be `[1, 6]` and `[8, 10]`, because the first two sessions overlap. Write a function to merge overlapping intervals for a given list of user sessions. -----Input----- The input will contain a list of intervals where each interval is represented as a pair of integers `[start, end]`. The intervals are not guaranteed to be sorted in any order and the length of the input list is between 1 and 10000. Each integer is a non-negative value (0 ≤ start < end ≤ 1000000). -----Output----- The output should be a list of merged intervals, sorted by the starting times of the intervals. -----Examples----- Sample Input 1: [[1, 3], [2, 6], [8, 10], [15, 18]] Sample Output 1: [[1, 6], [8, 10], [15, 18]] Sample Input 2: [[1, 4], [4, 5]] Sample Output 2: [[1, 5]]","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of merged intervals sorted by start time. if not intervals: return [] # Sort the intervals based on the starting times intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals: last = merged[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last[1]: last[1] = max(last[1], current[1]) else: merged.append(current) return merged"},{"question":"Ibrahim has just started learning about prime numbers and their importance in various algorithms and cryptographic applications. As part of his learning journey, he wants to determine the sum of prime numbers within a given range. However, he is struggling with an efficient way to compute this sum, especially when the range is large. He seeks your help in writing a program to solve this problem efficiently. Input The first line contains T, the number of test cases. Each of the next T lines contains two integers, L and R, denoting the range [L, R]. Output For each test case, print the sum of all prime numbers between L and R, inclusive. Constraints 1 ≤ T ≤ 10^5 1 ≤ L ≤ R ≤ 10^9 R - L ≤ 10^6 SAMPLE INPUT 3 1 10 11 20 21 30 SAMPLE OUTPUT 17 60 52 Explanation For the first test case: The prime numbers between 1 and 10 are 2, 3, 5, and 7. Their sum is 17. For the second test case: The prime numbers between 11 and 20 are 11, 13, 17, and 19. Their sum is 60. For the third test case: The prime numbers between 21 and 30 are 23 and 29. Their sum is 52.","solution":"import itertools def sieve(n): Returns a list of prime numbers up to n using the Sieve of Eratosthenes. is_prime = [True] * (n+1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n+1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, n+1) if is_prime[p]] return prime_numbers def sum_of_primes_in_range(L, R): Finds the sum of prime numbers in the range [L, R]. if R < 2: return 0 if L < 2: L = 2 prime_range_size = R - L + 1 is_prime = [True] * prime_range_size small_primes = sieve(int(R ** 0.5) + 1) for prime in small_primes: start = max(prime*prime, L + (prime - L % prime) % prime) for j in range(start, R + 1, prime): is_prime[j - L] = False return sum(num for num, prime in itertools.zip_longest(range(L, R + 1), is_prime) if prime) def solve(test_cases): Takes a list of test cases and returns a list of results. results = [] for L, R in test_cases: results.append(sum_of_primes_in_range(L, R)) return results"},{"question":"Steve and his friends are fond of a card game. The game involves a deck of N cards arranged in a line, numbered from 1 to N. Each card has a unique positive integer value written on it. Every time they play, Steve wants to find out the card that has the highest value and the smallest position (i.e., smallest index). Since their deck changes frequently, Steve asked you to write a program to help him quickly find the desired card. Your task is to write a program that takes the number of cards and their values as input and outputs the position of the card with the highest value. If there are multiple cards with the highest value, you have to return the smallest position among them. **Input:** The first line contains an integer N, the number of cards (1 ≤ N ≤ 1000). The second line contains N integers, where the i-th integer denotes the value of the i-th card. The values on the cards are distinct and range from 1 to 10^6. **Output:** Output a single integer, the position of the card with the highest value. # Example Input: ``` 5 3 6 2 8 5 ``` Output: ``` 4 ``` Input: ``` 3 10 20 30 ``` Output: ``` 3 ``` Input: ``` 4 1 9 7 9 ``` Output: ``` 2 ``` In the first example, among the card values `[3, 6, 2, 8, 5]`, the highest value is `8`, which is at position `4`. In the second example, among the card values `[10, 20, 30]`, the highest value is `30`, which is at position `3`. In the third example, there are two cards with the highest value `9`, but the smallest position among them is `2`.","solution":"def find_highest_card_position(n, cards): Finds the position of the card with the highest value. If there are multiple cards with the highest value, returns the smallest position among them. :param n: int, number of cards (1 ≤ N ≤ 1000) :param cards: list of int, values of the cards :return: int, position of the card with the highest value (1-based index) max_value = max(cards) for idx, value in enumerate(cards, start=1): if value == max_value: return idx"},{"question":"# Description Write a function to determine if two strings are anagrams of each other. An anagram is a word or phrase that can be formed by rearranging the characters of another, such as \\"cinema\\" and \\"iceman\\". All characters must appear the same number of times in both strings in order for them to be considered anagrams. The function should ignore spaces and capitalization. The input will be two strings in any case with letters and spaces only. Write a function `are_anagrams(str1: str, str2: str) -> bool` that returns `True` if the two strings are anagrams and `False` otherwise. # Examples `are_anagrams(\\"Listen\\", \\"Silent\\") # True` `are_anagrams(\\"Hello\\", \\"Olelh\\") # True` `are_anagrams(\\"Dormitory\\", \\"Dirty room\\") # True` `are_anagrams(\\"The eyes\\", \\"They see\\") # True` `are_anagrams(\\"Astronomer\\", \\"Moon starer\\") # True` `are_anagrams(\\"The Morse Code\\", \\"Here come dots\\") # True` `are_anagrams(\\"Hello\\", \\"World\\") # False`","solution":"def are_anagrams(str1: str, str2: str) -> bool: Determines if two strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. # Remove spaces and convert to lowercase str1_processed = \'\'.join(str1.lower().split()) str2_processed = \'\'.join(str2.lower().split()) # Count characters in both strings return sorted(str1_processed) == sorted(str2_processed)"},{"question":"You are given a grid with n rows and n columns, filled with integers. Each integer represents the height of a cell. Your task is to determine the minimum cost path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). The cost of moving from one cell to another is the absolute difference in height between the two cells. You can only move right (→) or down (↓) at each step. Write a function `min_cost_path(grid: List[List[int]]) -> int` to compute the minimum cost path. Input - The first line of the input contains a single integer n (1 ≤ n ≤ 10^3), the size of the grid. - Each of the next n lines contains n integers, which represent the height of the cells. Each height is an integer between 0 and 10^6. Output Return a single integer representing the minimum cost to traverse from the top-left to the bottom-right of the grid. Examples Input 2 1 2 4 3 Output 2 Input 3 1 2 3 4 5 6 7 8 9 Output 4 Note In the first sample test, the minimum cost path would be: ``` 1 → 2 → 3 ``` with costs `|1-2| + |2-3| = 1 + 1 = 2`. In the second sample test, the minimum cost path would be: ``` 1 → 2 → 3 ↓ 6 ↓ 9 ``` with costs `|1-2| + |2-3| + |3-6| + |6-9| = 1 + 1 + 3 + 3 = Total cost 8`. However, the path: ``` 1 → 2 ↓ ↓ 4 → 5 → 6 ↓ 7 → 8 → 9 ``` has costs `|1-2| + |2-5| + |5-6| + |5-8| + |8-9| = 1 + 3 + 1 + 3 + 1 = Total cost 9`. The minimum possible path will have the least absolute cost. Hence, we need to find the minimum cost path.","solution":"from typing import List import heapq def min_cost_path(grid: List[List[int]]) -> int: n = len(grid) directions = [(0, 1), (1, 0)] cost = [[float(\'inf\')] * n for _ in range(n)] cost[0][0] = 0 pq = [(0, 0, 0)] # (cost, row, col) while pq: current_cost, r, c = heapq.heappop(pq) if r == n-1 and c == n-1: return current_cost for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n: new_cost = current_cost + abs(grid[nr][nc] - grid[r][c]) if new_cost < cost[nr][nc]: cost[nr][nc] = new_cost heapq.heappush(pq, (new_cost, nr, nc)) return cost[-1][-1]"},{"question":"You are given a series of operations that need to be performed on an array of integers. Each operation consists of adding a given integer to each element of a subarray. You need to efficiently determine the final state of the array after all operations have been applied. -----Input----- The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 300,000) — the number of elements in the array and the number of operations respectively. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the initial elements of the array. Each of the next `q` lines contains three integers `l`, `r`, and `d` (1 ≤ l ≤ r ≤ n, 1 ≤ d ≤ 10^9) describing an operation that adds value `d` to each element of the subarray from `a_l` to `a_r`. -----Output----- Print one line containing `n` integers — the final state of the array after all operations have been applied. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 2 5 3 3 4 1 Output 3 7 9 8 8 Input 4 2 4 1 3 6 1 2 1 3 4 2 Output 5 2 5 8 -----Explanation----- In the first example, the array transforms as follows: - After the first operation: [3, 4, 5, 4, 5] - After the second operation: [3, 7, 8, 7, 8] - After the third operation: [3, 7, 9, 8, 8] In the second example, the array transforms as follows: - After the first operation: [5, 2, 3, 6] - After the second operation: [5, 2, 5, 8]","solution":"def apply_operations(n, q, a, operations): Apply operations to the array \'a\' and return the final state of the array. :param n: Number of elements in the array :param q: Number of operations :param a: Initial array :param operations: List of operations where each operation is a tuple (l, r, d) :return: Final state of the array # Use a difference array to efficiently apply range updates diff = [0] * (n + 1) # Apply the operations to the difference array for l, r, d in operations: diff[l - 1] += d if r <= n: diff[r] -= d # Construct the final array from the initial array and the difference array current_addition = 0 for i in range(n): current_addition += diff[i] a[i] += current_addition return a"},{"question":"A large online bookstore is organizing a special sale event where they will bundle certain books together in cartons. Each book has a certain popularity score, and customers are more likely to buy cartons containing books with higher total popularity scores. The goal is to create the highest number of cartons such that each carton has a total popularity score above a given threshold. You are given a list of book popularity scores and a minimum popularity threshold. Your task is to determine the maximum number of cartons that can be formed from these books such that each carton has at least the minimum required popularity score. **Input** - The first line contains two integers `n` and `p` (1 ≤ n ≤ 10^5; 1 ≤ p ≤ 10^6) — the number of books and the minimum popularity score for each carton. - The second line contains `n` space-separated integers, each representing the popularity score of a book. **Output** - Print the maximum number of cartons that can be formed such that each carton has a total popularity score of at least `p`. **Examples** **Input** ``` 6 10 1 2 3 4 5 6 ``` **Output** ``` 2 ``` **Input** ``` 5 9 2 7 6 3 1 ``` **Output** ``` 1 ``` **Note** In the first example, one possible way to form the cartons is: 1. Carton 1: books with popularity scores 6 and 4 (total score = 10). 2. Carton 2: books with popularity scores 5, 3, and 2 (total score = 10). In the second example, one possible way to form a carton is: 1. Carton 1: books with popularity scores 7 and 2 (total score = 9).","solution":"def max_cartons(n, p, scores): Determines the maximum number of cartons that can be formed such that each carton has at least the minimum required popularity score. Parameters: n (int): The number of books. p (int): The minimum popularity score for each carton. scores (list): A list of integers representing the popularity score of each book. Returns: int: The maximum number of cartons. scores.sort(reverse=True) i = 0 cartons_count = 0 while i < n: total = 0 while i < n and total < p: total += scores[i] i += 1 if total >= p: cartons_count += 1 return cartons_count"},{"question":"Given an array of N positive integers, you are required to process Q queries. Each query can be one of the following types: 1. Perform a range sum update where you add a given value to all elements in a specified range. 2. Retrieve the sum of a specified subarray. Each query is described in detail below: 1. 1 l r val - Add the value `val` to each element from index `l` to `r` (both inclusive). 2. 2 l r - Output the sum of elements from index `l` to `r` (both inclusive). All array indices are 1-based. Input: - The first line contains two space-separated integers N and Q. - The second line contains N space-separated positive integers representing the initial state of the array. - Each of the next Q lines contains a query of the format described above. Output: - For each query of type 2, print the result on a new line. Constraints: - 1 ≤ N, Q ≤ 10^5 - 1 ≤ initial array elements, val ≤ 10^9 - 1 ≤ l ≤ r ≤ N SAMPLE INPUT: 5 4 1 3 5 7 9 2 1 3 1 2 4 2 2 2 5 2 1 5 SAMPLE OUTPUT: 9 30 32 Explanation: - Initial array: [1, 3, 5, 7, 9] - The first query asks for the sum of elements from index 1 to 3, which is 1 + 3 + 5 = 9. - The second query adds 2 to each element from index 2 to 4. The array becomes: [1, 5, 7, 9, 9]. - The third query asks for the sum of elements from index 2 to 5, which is 5 + 7 + 9 + 9 = 30. - The fourth query asks for the sum of elements from index 1 to 5, which is 1 + 5 + 7 + 9 + 9 = 31.","solution":"class ArrayProcessor: def __init__(self, array): self.array = array self.n = len(array) def range_update(self, l, r, val): for i in range(l, r + 1): self.array[i - 1] += val def range_sum(self, l, r): return sum(self.array[l - 1:r]) def process_queries(n, q, array, queries): processor = ArrayProcessor(array) results = [] for query in queries: if query[0] == 1: _, l, r, val = query processor.range_update(l, r, val) elif query[0] == 2: _, l, r = query results.append(processor.range_sum(l, r)) return results"},{"question":"Problem: You are given a string s. A shift on s consists of taking the last character and moving it to the front of the string. For example, if s = \\"abcde\\", then it will be \\"eabcd\\" after one shift. Return the maximum number of shifts needed to make the string itself again. Input: A single line containing the string s. Output: An integer denoting the maximum number of shifts needed to convert the string into itself again. Constraints: 1 ≤ |s| ≤ 10^5 SAMPLE INPUT abcab SAMPLE OUTPUT 5","solution":"def max_shifts(s): Returns the maximum number of shifts needed to make the string s itself again. n = len(s) for i in range(1, n): if s[i:] + s[:i] == s: return i return n"},{"question":"You are given an array `a` consisting of `n` integers and a single integer `k`. Your task is to determine if there exists any subarray (contiguous segment) of `a` whose sum is exactly `k`. For example, if `a = [1, 2, 3, 4, 5]` and `k = 9`, there exists a subarray `[2, 3, 4]` whose sum is `9`. However, if `k = 20`, no such subarray exists. Input - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (−10^9 ≤ k ≤ 10^9). - The second line contains `n` integers `a_1, a_2, ..., a_n` (−10^4 ≤ a_i ≤ 10^4). Output Print \\"YES\\" if there is a subarray whose sum is exactly `k`, otherwise print \\"NO\\". Example Input 5 9 1 2 3 4 5 Output YES Input 5 20 1 2 3 4 5 Output NO Note In the first example, the subarray `[2, 3, 4]` has a sum of `9`, which matches `k`. Therefore, the answer is \\"YES\\". In the second example, there is no subarray that sums to `20`, so the answer is \\"NO\\".","solution":"def subarray_sum_exists(n, k, a): Determines if there exists a subarray of \'a\' that sums to \'k\' Args: n -- int: The number of elements in the array \'a\' k -- int: The target sum we are looking for in any subarray of \'a\' a -- list of int: The list of integers representing the array Returns: str -- \\"YES\\" if any subarray sums to \'k\', otherwise \\"NO\\" current_sum = 0 sum_dict = {} for num in a: current_sum += num if current_sum == k: return \\"YES\\" if (current_sum - k) in sum_dict: return \\"YES\\" sum_dict[current_sum] = True return \\"NO\\""},{"question":"Given a list of integers, write a function `rearrange` that rearranges the list so that all negative numbers appear before all positive numbers. The relative order of the negative and positive numbers should remain the same. **Example:** Input: ```python [3, -2, -1, 5, -6, 7, -8, 2] ``` Output: ```python [-2, -1, -6, -8, 3, 5, 7, 2] ``` **Function Signature:** ```python def rearrange(nums: List[int]) -> List[int]: pass ```","solution":"from typing import List def rearrange(nums: List[int]) -> List[int]: Rearranges the list so that all negative numbers appear before all positive numbers, keeping the relative order of both negative and positive numbers the same. negatives = [num for num in nums if num < 0] positives = [num for num in nums if num >= 0] return negatives + positives"},{"question":"Write a function that determines whether a string s contains a valid IPv4 address. An IPv4 address is valid if it is in the form \\"x.x.x.x\\" where x is a number between 0 and 255 inclusive. Your function should return True if the string contains a valid IPv4 address and False otherwise. -----Input----- The input contains one or more test cases. The first line contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. Each test case consists of a single line containing a string s of length (1 le |s| le 100). -----Output----- For each test case, print \\"True\\" if the string contains a valid IPv4 address, and \\"False\\" otherwise. -----Example----- Input: 5 192.168.0.1 255.255.255.255 256.100.50.0 123.045.067.089 192.168.1 Output: True True False False False","solution":"def is_valid_ip(ip): Checks if a given string is a valid IPv4 address. parts = ip.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit() or not 0 <= int(part) <= 255: return False if part != str(int(part)): return False return True def main(input_data): results = [] lines = input_data.strip().split(\'n\') t = int(lines[0]) for i in range(1, t + 1): s = lines[i] results.append(is_valid_ip(s)) return results"},{"question":"You are given a list of integers where each integer appears an even number of times, except for one integer which appears an odd number of times. Write a function that finds and returns this integer. Examples: ``` [2, 2, 3, 2, 2] => 3 [1, 1, 2, 2, 3, 3, 3] => 3 [4, 4, 4, 4, 4] => 4 [5, 7, 5] => 7 ```","solution":"def find_odd_occurrence(lst): Given a list of integers where each integer appears an even number of times, except for one integer which appears an odd number of times, this function finds and returns the integer that appears an odd number of times. result = 0 for number in lst: result ^= number return result"},{"question":"Design a class `MovieRater` that keeps track of the ratings of different movies. The class should support the following operations: - Add a new movie with a given name. - Rate an existing movie with a score between 1 and 5. - Get the average rating of a movie given its name. - Retrieve the movie with the highest average rating. If there is a tie, return the movie that was rated earliest. Your job is to implement this class. Provide the implementation for the following methods: - `__init__()`: Initializes the `MovieRater` object. - `add_movie(name: str) -> None`: Adds a movie with the given name if it doesn\'t already exist. - `rate_movie(name: str, score: int) -> None`: Adds a rating for the specified movie. Throws an exception if the movie does not exist or if the score is not between 1 and 5. - `get_average_rating(name: str) -> float`: Returns the average rating for the specified movie. Throws an exception if the movie does not exist. - `highest_rated_movie() -> str`: Returns the name of the movie with the highest average rating. If there is a tie, return the movie that was rated earliest. Throws an exception if there are no movies. You can assume that movie names are unique. Include appropriate error handling and edge cases.","solution":"class MovieRater: def __init__(self): self.movies = {} self.ratings = {} def add_movie(self, name: str) -> None: if name not in self.movies: self.movies[name] = [] self.ratings[name] = 0.0 def rate_movie(self, name: str, score: int) -> None: if name not in self.movies: raise ValueError(f\\"Movie \'{name}\' does not exist\\") if score < 1 or score > 5: raise ValueError(\\"Score must be between 1 and 5\\") self.movies[name].append(score) self.ratings[name] = sum(self.movies[name]) / len(self.movies[name]) def get_average_rating(self, name: str) -> float: if name not in self.movies: raise ValueError(f\\"Movie \'{name}\' does not exist\\") return self.ratings[name] def highest_rated_movie(self) -> str: if not self.movies: raise ValueError(\\"No movies available\\") return max(self.ratings.items(), key=lambda item: (item[1], -len(self.movies[item[0]])))[0]"},{"question":"The competition organizers have decided to host a vowel-centric contest. For a given string, you need to identify whether it starts and ends with a vowel (a, e, i, o, u). If both conditions are met, return \\"YES\\"; otherwise, return \\"NO\\". Example 1: Input: S = \\"apple\\" Output: YES Explanation: The string starts with \'a\' and ends with \'e\', both of which are vowels. Hence, the output is \\"YES\\". Example 2: Input: S = \\"banana\\" Output: NO Explanation: The string starts with \'b\', which is not a vowel. Hence, the output is \\"NO\\". Example 3: Input: S = \\"orca\\" Output: NO Explanation: The string starts with \'o\' but ends with \'a\'. Since the string does not both start and end with a vowel, the output is \\"NO\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function isVowelContestWinner() which takes the string S as input and returns a string denoting the answer. Return \\"YES\\" if both conditions are met, \\"NO\\" otherwise. Expected Time Complexity: O(1). Expected Auxiliary Space: O(1). Constraints: 1 <= |S| <= 100 S contains only lowercase alphabets (a-z)","solution":"def isVowelContestWinner(S): Returns \\"YES\\" if the given string S starts and ends with a vowel, \\"NO\\" otherwise. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} return \\"YES\\" if S[0] in vowels and S[-1] in vowels else \\"NO\\""},{"question":"Write a function that takes an array of integers and returns a new array containing the factorial of each integer in the original array. Make sure to handle cases where the integers could be zero or positive. Example: `[1, 2, 3, 4]` should return `[1, 2, 6, 24]`","solution":"import math def factorial_array(arr): Returns a new array containing the factorial of each integer in the original array. Parameters: arr (list of int): The original array containing integers. Returns: list of int: A new array containing the factorial of each integer in the original array. return [math.factorial(num) for num in arr]"},{"question":"Write a function that takes a string of lowercase alphabets as input and returns the frequency of each character in the string in the form of a dictionary. Input The input is a single line containing a string s (1 ≤ |s| ≤ 100) consisting of lowercase English alphabets. Output Output the frequency of each character in the string in the form of a dictionary, where keys are the characters and values are their counts. Examples Input hello Output {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} Input apple Output {\'a\': 1, \'p\': 2, \'l\': 1, \'e\': 1}","solution":"def char_frequency(s): Returns the frequency of each character in the string s as a dictionary. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"You are given a 2D grid of characters representing a map. Each position on the map is either land (\'L\') or water (\'W\'). Your task is to find the largest island in the grid. An island is a group of connected \'L\' characters, connected either horizontally or vertically (not diagonally). Input The first line of the input contains two integers, rows and columns, representing the dimensions of the grid. The next rows lines contain columns characters each, where each character is either \'L\' for land or \'W\' for water. Output Print a single integer representing the size of the largest island in the grid. Constraints 1 ≤ rows, columns ≤ 1000 Example Input: 4 5 LLLLW LLLLW WWWWW LLLWW Output: 8 Explanation Example case 1. The largest island is the one on top left, formed by 8 \'L\' characters.","solution":"def largest_island(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(r, c): # If out of bounds or already visited or is water, return 0 if (r < 0 or r >= rows or c < 0 or c >= cols or visited[r][c] or grid[r][c] == \'W\'): return 0 # Mark the cell as visited visited[r][c] = True # Start with current cell size = 1 # Explore all 4 possible directions size += dfs(r + 1, c) size += dfs(r - 1, c) size += dfs(r, c + 1) size += dfs(r, c - 1) return size max_island_size = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'L\' and not visited[r][c]: current_island_size = dfs(r, c) max_island_size = max(max_island_size, current_island_size) return max_island_size # Example input rows = 4 cols = 5 grid = [ [\'L\', \'L\', \'L\', \'L\', \'W\'], [\'L\', \'L\', \'L\', \'L\', \'W\'], [\'W\', \'W\', \'W\', \'W\', \'W\'], [\'L\', \'L\', \'L\', \'W\', \'W\'] ] print(largest_island(grid)) # Output should be 8"},{"question":"Given an array of integers nums and an integer k, move the first k digits to the end of the array. Return the modified array. Example 1: Input: nums = [1, 2, 3, 4, 5, 6, 7], k = 3 Output: [4, 5, 6, 7, 1, 2, 3] Explanation: After moving the first 3 elements to the end, the array becomes [4, 5, 6, 7, 1, 2, 3]. Example 2: Input: nums = [14, 24, 52, 31, 18], k = 2 Output: [52, 31, 18, 14, 24] Explanation: After moving the first 2 elements to the end, the array becomes [52, 31, 18, 14, 24]. Example 3: Input: nums = [7, 6, 5, 4, 3, 2, 1], k = 5 Output: [2, 1, 7, 6, 5, 4, 3] Explanation: After moving the first 5 elements to the end, the array becomes [2, 1, 7, 6, 5, 4, 3]. Example 4: Input: nums = [10], k = 0 Output: [10] Explanation: Since k is 0, the array remains unchanged. Example 5: Input: nums = [10, 20, 30], k = 3 Output: [10, 20, 30] Explanation: Since k is equal to the length of the array, the array remains unchanged. Constraints: - 1 <= nums.length <= 10^5 - 0 <= k <= nums.length","solution":"def move_k_elements_to_end(nums, k): Moves the first k elements of the array \'nums\' to the end of the array. Returns the modified array. if k <= 0 or k >= len(nums): return nums # If k is 0 or greater than or equal to length of nums, return nums as is return nums[k:] + nums[:k]"},{"question":"A company maintains a database of its employees and their hierarchical positions within the company. Each employee has a unique employee ID, and the company follows a tree structure for its organizational hierarchy. The CEO of the company is the root of the tree, and every other employee has a direct manager. Each manager can manage several employees. Your task is to implement a function that, given the employee IDs of two employees, returns their lowest common manager. -----Input----- The input consists of: 1. An integer n, denoting the number of employees in the company. (2 ≤ n ≤ 1000) 2. n lines, each containing two integers, e_i and m_i, where e_i is the employee ID (1 ≤ e_i ≤ 1000) and m_i is the manager ID of employee e_i (1 ≤ m_i ≤ 1000 or -1 if e_i is the CEO). 3. Two integers, x and y, representing the employee IDs for which the lowest common manager needs to be found. -----Output----- Print a single integer representing the employee ID of their lowest common manager. -----Examples----- Sample Input 1: 6 1 -1 2 1 3 1 4 2 5 2 6 3 4 5 Sample Output 1: 2 Sample Input 2: 5 1 -1 2 1 3 2 4 2 5 3 3 4 Sample Output 2: 2 Sample Input 3: 7 1 -1 2 1 3 1 4 2 5 2 6 3 7 3 6 7 Sample Output 3: 3","solution":"def find_lowest_common_manager(n, data, x, y): from collections import defaultdict # Helper function to create parent map parent_map = {} for e_i, m_i in data: parent_map[e_i] = m_i def get_path_to_ceo(employee_id): path = [] while employee_id != -1: path.append(employee_id) employee_id = parent_map[employee_id] return path # Get paths from x and y to the root (CEO) path_x = get_path_to_ceo(x) path_y = get_path_to_ceo(y) # Find the lowest common manager in the paths lca = -1 while path_x and path_y and path_x[-1] == path_y[-1]: lca = path_x.pop() path_y.pop() return lca"},{"question":"You are given an unsorted array of integers and a positive integer `k`. Find the `k`th smallest element in the array. If the array contains multiple instances of the same elements, they should be considered as distinct elements (i.e., count each occurrence). Example: Input: arr = [7, 10, 4, 3, 20, 15], k = 3 Output: 7 Input: arr = [7, 10, 4, 3, 20, 15], k = 4 Output: 10 Your Task: You don\'t need to print or input anything. Complete the function `kth_smallest_element()` which takes an integer array `arr` and an integer `k` as input parameters and returns the `k`th smallest element in the array. Constraints: - 1 <= len(arr) <= 1000 - 1 <= arr[i] <= 10000 - 1 <= k <= len(arr) Expected Time Complexity: O(N log N) Expected Space Complexity: O(1)","solution":"def kth_smallest_element(arr, k): Returns the k-th smallest element in the array. Parameters: arr (list of int): The array to search. k (int): The k-th position to find the smallest element. Returns: int: The k-th smallest element. arr.sort() return arr[k - 1]"},{"question":"You are organizing a drawing competition for a group of children and you need to decide the winners based on their scores. Each child\'s score is represented as an integer in a list/array. The competition can have multiple winners if they have the highest score. Your task is to determine how many children share the highest score. If no children are present, return 0 as the number of winners. Task Given a list of integers representing the scores of each child, return the count of children who have the highest score. Example: ```python highest_score_winners([85, 90, 78, 90, 88]) # return 2 highest_score_winners([70, 80, 70]) # return 2 highest_score_winners([55, 85, 85, 90]) # return 1 highest_score_winners([]) # return 0 highest_score_winners([95]) # return 1 ``` ```cs Competition.GetHighestScoreWinners(new [] {85, 90, 78, 90, 88}) // return 2 Competition.GetHighestScoreWinners(new [] {70, 80, 70}) // return 2 Competition.GetHighestScoreWinners(new [] {55, 85, 85, 90}) // return 1 Competition.GetHighestScoreWinners(new [] { }) // return 0 Competition.GetHighestScoreWinners(new [] {95}) // return 1 ``` ```haskell highest_score_winners [85, 90, 78, 90, 88] -- return 2 highest_score_winners [70, 80, 70] -- return 2 highest_score_winners [55, 85, 85, 90] -- return 1 highest_score_winners [] -- return 0 highest_score_winners [95] -- return 1 ```","solution":"def highest_score_winners(scores): Returns the count of children who have the highest score. Parameters: scores (list of int): List of scores of each child. Returns: int: Number of children who have the highest score. If no scores are present, returns 0. if not scores: return 0 highest_score = max(scores) return scores.count(highest_score)"},{"question":"You are given a string s of length n, and a string p of length m which represents a pattern. You need to find the minimum number of operations needed to replace characters in the string s to form a substring that matches the pattern p. An operation is defined as replacing any character in s with another character (which may include replacing a character with itself). For instance, if s = \\"abcdefg\\" and p = \\"cde\\". The substring \\"cde\\" in s already matches p, so no operations are needed. If s = \\"abcdefg\\" and p = \\"xyz\\", then the substring \\"abc\\" can be changed to \\"xyz\\" with 3 operations (replace \'a\' with \'x\', \'b\' with \'y\', \'c\' with \'z\'). -----Input----- The first line contains two integers n and m (1 le n, m le 2 cdot 10^5) — the lengths of the strings s and p respectively. The second line contains the string s of length n. The third line contains the string p of length m. It is guaranteed that both strings consist of only lowercase English letters. -----Output----- Print one integer — the minimum number of operations needed to make a substring of s match the pattern p. -----Examples----- Input 8 3 abcdefg cde Output 0 Input 8 3 abcdefg xyz Output 3 Input 6 2 abaceda bd Output 1","solution":"def min_operations_to_match_pattern(s, p): Returns the minimum number of operations needed to replace characters in the string `s` to form a substring that matches the pattern `p`. n = len(s) m = len(p) min_operations = float(\'inf\') for i in range(n - m + 1): current_operations = 0 for j in range(m): if s[i + j] != p[j]: current_operations += 1 min_operations = min(min_operations, current_operations) return min_operations"},{"question":"# Description Write a function that takes a list of integer intervals and returns the sum of the lengths of these intervals. Intervals may overlap, and if they do, they should only be counted once. The input will be a list of tuples, where each tuple represents an interval with a start and end integer (both inclusive). The function should merge overlapping intervals and calculate the total length of all merged intervals combined. The input list will always contain at least one interval. Each tuple will consist of two integers where the first integer is always less than or equal to the second integer. # Examples ```python sum_intervals([(1, 5), (6, 10), (10, 15)]) # returns 14 sum_intervals([(1, 4), (3, 5), (6, 8), (7, 9)]) # returns 7 sum_intervals([(1, 5)]) # returns 5 sum_intervals([(1, 10), (2, 6), (8, 12), (11, 15)]) # returns 14 ``` For reference, see: - Merging intervals: https://en.wikipedia.org/wiki/Interval_(mathematics)#Merging_intervals - Set operations and interval calculations.","solution":"def sum_intervals(intervals): Given a list of intervals (tuples), returns the sum of the lengths of these intervals. Overlapping intervals should only be counted once. if not intervals: return 0 # Sort intervals by the starting value intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: current_end = max(current_end, end) else: merged_intervals.append((current_start, current_end)) current_start, current_end = start, end # Append the last interval merged_intervals.append((current_start, current_end)) # Calculate the total length of merged intervals total_length = sum(end - start for start, end in merged_intervals) return total_length"},{"question":"You are in charge of a security system for a museum exhibit. The museum has n rooms, and there are m security cameras installed in various locations. Each camera monitors one specific room, and no two cameras monitor the same room. Some rooms may not have any cameras at all. The system keeps a log of detected movements by each camera in chronological order. Each entry in the log contains a timestamp and the ID of the camera that detected the movement. Your task is to determine the minimum number of rooms that could have been visited by an intruder if the intruder was detected by all the cameras in the log entries. Input: The first line of the input contains two integers n and m (1 ≤ m ≤ n ≤ 10^5) – the number of rooms and the number of cameras. The second line contains m integers c_1, c_2, ..., c_m (1 ≤ c_i ≤ n) – the room each camera monitors. The next line contains an integer q (1 ≤ q ≤ 10^5) – the number of log entries. Each of the next q lines contains a timestamp t_i (1 ≤ t_i ≤ 10^9) and the ID of the camera k_i (1 ≤ k_i ≤ m). Output: Output a single integer – the minimum number of rooms that could have been visited by the intruder. Example: Input: 5 3 1 3 5 5 1 1 2 2 3 3 4 1 5 2 Output: 3 Explanation: In this example, there are 5 rooms and 3 cameras. The cameras are placed in rooms 1, 3, and 5. The intruder\'s presence was detected in rooms associated with cameras 1, 2, and 3. Since the intruder triggered all the cameras at different times and locations, the minimum number of rooms he could have visited is 3.","solution":"def min_rooms_visited(n, m, camera_rooms, log_entries): Determine the minimum number of rooms that the intruder has visited. Parameters: n (int): Number of rooms in the museum. m (int): Number of cameras. camera_rooms (list): List of rooms each camera monitors. log_entries (list of tuples): Each tuple contains the timestamp and camera ID. Returns: int: Minimum number of rooms that the intruder could have visited. # Use a set to keep track of unique rooms where movement was detected. visited_rooms = set() for entry in log_entries: timestamp, camera_id = entry room = camera_rooms[camera_id - 1] visited_rooms.add(room) return len(visited_rooms)"},{"question":"Little Mike loves playing with numbers. He has recently found some interest in the properties of number sequences. While exploring, he stumbled upon a sequence where the next number can be derived by adding the last two numbers of the sequence. This is known as the Fibonacci sequence. The first two numbers in the sequence are given as 0 and 1. For example, the first few numbers in the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, and so on. Now, Mike has a challenge for you. He wants you to help him find the Nth number in the Fibonacci sequence. Input: The input contains one line with an integer N (0 ≤ N ≤ 50), which is the position in the Fibonacci sequence for which the number needs to be found. Output: Output the Nth number in the Fibonacci sequence. Examples: Input: 6 Output: 8 Input: 10 Output: 55 Note: - The 0th number in the Fibonacci sequence is 0. - The 1st number in the Fibonacci sequence is 1.","solution":"def fibonacci(N): Returns the Nth number in the Fibonacci sequence. if N == 0: return 0 elif N == 1: return 1 else: a, b = 0, 1 for _ in range(2, N + 1): a, b = b, a + b return b"},{"question":"# Task Given two strings `s1` and `s2`, write a function that determines if `s1` can be transformed into `s2` through a sequence of operations. You can perform the following operations exactly once on `s1`: 1. Insert exactly one character anywhere in the string. 2. Delete exactly one character from the string. 3. Replace exactly one character in the string. Return `True` if `s1` can be transformed into `s2` using exactly one of these operations, otherwise return `False`. # Input/Output `[input]` string `s1` `[input]` string `s2` Strings of lowercase letters, `1 <= len(s1), len(s2) <= 100`. [output] a boolean `True` if `s1` can be transformed into `s2` using exactly one of the specified operations, otherwise `False`. # Example For `s1 = \\"cat\\"`, `s2 = \\"cats\\"`, the output should be `True`. For `s1 = \\"cat\\"`, `s2 = \\"cut\\"`, the output should be `True`. For `s1 = \\"cat\\"`, `s2 = \\"dog\\"`, the output should be `False`. For `s1 = \\"cat\\"`, `s2 = \\"ca\\"`, the output should be `True`.","solution":"def can_transform(s1, s2): Determines if s1 can be transformed into s2 using one of the following operations exactly once: - Insert exactly one character anywhere in the string. - Delete exactly one character from the string. - Replace exactly one character in the string. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if s1 can be transformed into s2 with exactly one operation, False otherwise. len_s1 = len(s1) len_s2 = len(s2) if abs(len_s1 - len_s2) > 1: return False if len_s1 == len_s2: # Check for replacement count_different = sum(1 for x, y in zip(s1, s2) if x != y) return count_different == 1 if len_s1 + 1 == len_s2: # Check for insertion for i in range(len_s1 + 1): if s1[:i] + s2[i] + s1[i:] == s2: return True return False if len_s1 - 1 == len_s2: # Check for deletion for i in range(len_s1): if s1[:i] + s1[i+1:] == s2: return True return False return False"},{"question":"Given an array of integers representing the elevation at each index, design an algorithm to collect the maximum amount of water trapped between the towers after a rainstorm. Example 1: Input: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The indices at which water is trapped are [2, 4, 5, 6, 9, 11]. The maximum amount of water is collected between (1, 3), (2, 3) and (10, 1). Example 2: Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: Water is trapped between indices resulting in units as follows: (4, 3), (4, 2), (5, 3) upto 5 units; (5, 0), (5, 4) upto 4 units. Your Task: You don\'t need to read input or print anything. Implement the function maxWaterTrapped() that takes in a list of integers `heights` and returns the maximum units of water trapped. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= heights.length <= 100000 0 <= heights[i] <= 100000","solution":"def maxWaterTrapped(heights): Calculate the maximum amount of water that can be trapped after a rainstorm. :param heights: List[int] representing the elevation at each index. :return: int representing the maximum units of water trapped. if not heights or len(heights) < 3: return 0 n = len(heights) left, right = 0, n - 1 max_left, max_right = heights[left], heights[right] trapped_water = 0 while left < right: if heights[left] < heights[right]: left += 1 max_left = max(max_left, heights[left]) trapped_water += max_left - heights[left] else: right -= 1 max_right = max(max_right, heights[right]) trapped_water += max_right - heights[right] return trapped_water"},{"question":"A major e-commerce company wants to implement a new system for recommending products to their users based on purchase history. To build a robust recommendation system, the company needs to analyze the purchase patterns of every customer. One crucial aspect of this analysis is determining the \\"core\\" products bought by each customer over time. The company defines a customer\'s \\"core\\" products as the products that the customer has bought at least a certain number of times. To help the company with this analysis, you need to write a program that finds the core products for one particular customer given their purchase history and a threshold value. -----Input----- The first line of input contains two integers, n (1 leq n leq 100), the number of products, and k (1 leq k leq 100), the core threshold value. The second line contains n integers where the i^{th} integer represents the count of how many times the i^{th} product has been purchased by the customer. -----Output----- Output a single line containing the list of integers separated by spaces representing the indices (1-based) of the core products bought by the customer. The indices should be in increasing order. If no product meets the core threshold, output \\"None\\". -----Example----- Sample Input: 5 3 2 3 1 4 3 Sample Output: 2 4 5 Sample Input: 4 2 1 1 1 1 Sample Output: None","solution":"def find_core_products(n, k, purchases): Finds the indices of core products based on purchase history and a threshold value. Parameters: n (int): The number of products. k (int): The core threshold value. purchases (list): A list containing the purchase counts for each product. Returns: list: A list of 1-based indices of core products or \\"None\\" if no product meets the threshold. core_products = [i + 1 for i, purchase in enumerate(purchases) if purchase >= k] return core_products if core_products else [\\"None\\"] # Unit test function to avoid removing this block comment def test_find_core_products(): pass"},{"question":"Vikram is an avid collector of numbers and loves finding interesting patterns within them. One day, he came across a sequence of N positive integers where each integer is between 1 and 10^9. Vikram is particularly fascinated by the concept of \\"dominant elements,\\" where an element X in the sequence is considered dominant if it appears more than N/2 times. Your task is to help Vikram identify the dominant element in the sequence if it exists. If no such element exists, return -1. Write a program that processes multiple test cases and determines the dominant element for each case. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. The first line of each test case contains an integer N, the number of elements in the sequence. The next line of each test case contains N positive integers. ------ Output ------ For each test case, print the dominant element if it exists. If no such element exists, print -1. ------ Constraints ------ 1 leq T leq 100 1 leq N leq 100 1 leq each number leq 10^9 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 3 5 1 2 3 3 3 4 1 1 2 2 6 0 0 0 0 1 2 ----- Sample Output 1 ------ 3 -1 0 ----- Explanation 1 ------ Test case 1: The number 3 appears 3 times, which is more than 5/2 = 2.5 times. Thus, it is the dominant element. Test case 2: No number appears more than 4/2 = 2 times. Thus, there is no dominant element. Test case 3: The number 0 appears 4 times, which is more than 6/2 = 3 times. Thus, it is the dominant element.","solution":"def find_dominant_element(test_cases): results = [] for N, sequence in test_cases: element_counts = {} for num in sequence: if num in element_counts: element_counts[num] += 1 else: element_counts[num] = 1 dominant_element = -1 for num, count in element_counts.items(): if count > N / 2: dominant_element = num break results.append(dominant_element) return results"},{"question":"You are given an integer array `nums` sorted in non-decreasing order. Write a function that removes the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same, and the function should return the new length of the modified array. You must do this by modifying the input array in place with O(1) extra memory. ------ Input Format ------ - The first (and only) line of input contains the space-separated integers of the array `nums` (1 ≤ nums.length ≤ 300). ------ Output Format ------ - Print a single integer denoting the new length of the modified array. ------ Constraints ------ - The input array `nums` is sorted in non-decreasing order. - Elements in the array are in the range -100 ≤ nums[i] ≤ 100. ------ Sample Input 1 ------ 1 1 2 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ The original array is [1, 1, 2]. After removing duplicates, the array should be modified to [1, 2]. So, the new length is 2. ------ Sample Input 2 ------ 0 0 1 1 1 2 2 3 3 4 ------ Sample Output 2 ------ 5 ------ Explanation 2 ------ The original array is [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]. After removing duplicates, the array should be modified to [0, 1, 2, 3, 4]. So, the new length is 5.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted list in place and returns the new length. :param nums: List[int] - Sorted list of integers. :return: int - The length of the list after duplicates have been removed. if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"A warehouse manager has an inventory list of N items. Each item has a unique identifier and a respective quantity available. The manager needs to fulfill M orders. Each order requests a specific quantity of a particular item. The task is to determine if each order can be fulfilled based on the current inventory. Write a program to check if each order can be fulfilled given the initial inventory quantities. ------ Input Format ------ - The first line contains two integers N and M, representing the number of items in the inventory and the number of orders respectively. - The next N lines contain two integers each. The first integer is the unique identifier of the item, and the second integer is the quantity available. - The next M lines contain two integers each. The first integer is the unique identifier of the item being ordered, and the second integer is the quantity requested. ------ Output Format ------ - The program should output M lines, each containing \\"Yes\\" if the order can be fulfilled or \\"No\\" if it cannot. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ text{identifier}, text{quantity available}, text{quantity requested} ≤ 10^6 ----- Sample Input 1 ------ 4 3 1 50 2 30 3 20 4 10 1 20 2 40 4 10 ----- Sample Output 1 ------ Yes No Yes ----- Explanation 1 ------ The initial quantities are: item 1 has 50 units, item 2 has 30 units, item 3 has 20 units, and item 4 has 10 units. - The first order requests 20 units of item 1, which can be fulfilled from the available 50 units. - The second order requests 40 units of item 2, which cannot be fulfilled as only 30 units are available. - The third order requests 10 units of item 4, which can be fulfilled from the available 10 units.","solution":"def can_fulfill_orders(inventory, orders): Determines if each order can be fulfilled based on the current inventory. inventory_dict = {item_id: quantity for item_id, quantity in inventory} results = [] for order_id, order_quantity in orders: if inventory_dict.get(order_id, 0) >= order_quantity: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage inventory = [(1, 50), (2, 30), (3, 20), (4, 10)] orders = [(1, 20), (2, 40), (4, 10)] print(can_fulfill_orders(inventory, orders)) # Output: [\'Yes\', \'No\', \'Yes\']"},{"question":"Alex is fascinated with prime numbers and primes within a range. He likes to find out how many prime numbers can be found within a specified range `[a, b]` (inclusive). Can you help him? Input Format The first line contains an integer mathbf{T}, the number of test cases. The next mathbf{2T} lines each contain two integers a and b representing the range. Output Format For each test case, print the number of prime numbers within the given range `[a, b]`. Constraints 1 leq T leq 100 1 leq a, b leq 10^6 Sample Input 2 1 10 10 20 Sample Output 4 4 Explanation For the first test case, there are four prime numbers between 1 and 10: 2, 3, 5, and 7. For the second test case, there are four prime numbers between 10 and 20: 11, 13, 17, and 19.","solution":"def sieve_of_eratosthenes(max_num): is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False p = 2 while (p * p <= max_num): if (is_prime[p] == True): for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 return is_prime def count_primes_in_ranges(ranges): max_val = max(max(a, b) for a, b in ranges) is_prime = sieve_of_eratosthenes(max_val) results = [] for a, b in ranges: count = sum(1 for i in range(a, b + 1) if is_prime[i]) results.append(count) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},C={class:"card-container"},j={key:0,class:"empty-state"},F=["disabled"],P={key:0},R={key:1};function M(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,F)):l("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-416486ce"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/20.md","filePath":"deepseek/20.md"}'),L={name:"deepseek/20.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
