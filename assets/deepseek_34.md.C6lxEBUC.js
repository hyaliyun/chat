import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,h,m,r,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const Y=d(k,[["render",O],["__scopeId","data-v-fdff7847"]]),A=JSON.parse('[{"question":"You are given two strings s and t. Your task is to determine if you can make the string t a subsequence of the string s by deleting at most one character from s. If it is impossible, return \\"NO\\"; otherwise, return \\"YES\\". The first line contains one integer n (1 le n le 100) — the number of test cases. Each of the next n lines contains two strings s and t (1 le |s|, |t| le 100). For each test case, print \\"YES\\" if you can make t a subsequence of s by deleting at most one character from s. Otherwise, print \\"NO\\". # Example Input: 4 abcde ace hello helo codeforces codefrces coding cnoding Output: YES YES YES NO Explanation: In the first test case, t is already a subsequence of s. In the second test case, deleting character \'l\' from \\"hello\\" results in \\"helo\\". In the third test case, deleting character \'o\' from \\"codeforces\\" results in \\"codefrces\\". In the fourth test case, deleting one character won\'t make \\"cnoding\\" a subsequence of \\"coding\\".","solution":"def can_form_subsequence(s, t): def is_subsequence(s, t): it = iter(s) return all(c in it for c in t) if is_subsequence(s, t): return \\"YES\\" for i in range(len(s)): modified_s = s[:i] + s[i+1:] if is_subsequence(modified_s, t): return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for s, t in test_cases: results.append(can_form_subsequence(s, t)) return results"},{"question":"You are given a string s consisting of lowercase English letters, spaces, and exactly one underscore (\'_\') character. Your task is to reformat the string into a new string in which the underscore character is replaced with a space and all words (sequences of lowercase letters) are reversed, while their positions remain unchanged. Input The first line of input contains a single string s (2 le |s| le 100), containing exactly one underscore character and at least one space. Output Print the reformatted string. Example Input: hello_world this is coding Output: olleh drowthis si gnidoc","solution":"def reformat_string(s): Reformats the string by replacing the underscore with a space and reversing all the words. Args: s (str): Input string containing lowercase letters, spaces, and exactly one underscore. Returns: str: Reformatted string. # Replace the underscore with a space s = s.replace(\'_\', \' \') # Split the string by spaces to get individual words words = s.split() # Reverse each word and join them back with spaces reversed_words = \' \'.join(word[::-1] for word in words) return reversed_words"},{"question":"Anna is organizing a programming competition and wants to create balanced teams. Each participant has a skill level, and Anna needs to divide them into two teams such that the difference in the total skill levels of the teams is minimized. You are given an array `skills` of size `n` where `skills[i]` represents the skill level of the `i`-th participant. Write a function `divideTeams` that divides the participants into two teams and returns the minimum possible difference in the total skill levels of the two teams. The first line contains one integer `t` (`1 <= t <= 1000`) — the number of test cases. Then `t` test cases follow. The first line of each test case contains one integer `n` (`1 <= n <= 100`) — the number of participants. The second line contains `n` integers `skills[1], skills[2], ..., skills[n]` (`1 <= skills[i] <= 1000`) — the skill levels of the participants. For each test case, print one integer — the minimum possible difference in the total skill levels of the two teams. # Example ``` Input: 2 4 1 5 11 5 3 1 2 3 Output: 0 0 ``` # Constraints - The sum of `n` over all test cases does not exceed `1000`. # Note: In the first test case, one optimal way to divide the participants is into teams with skill levels `{1, 5, 5}` and `{11}`, which have the total skill levels of `11` and `11`, respectively. Thus, the difference is `0`. In the second test case, one optimal way to divide the participants is into teams with skill levels `{1, 2}` and `{3}`, which have the total skill levels of `3` and `3`, respectively. Thus, the difference is `0`.","solution":"def divideTeams(t, test_cases): def min_difference(skills): total_sum = sum(skills) n = len(skills) dp = [[0] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if skills[i - 1] <= j: dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - skills[i - 1]] + skills[i - 1]) else: dp[i][j] = dp[i - 1][j] sum1 = dp[n][total_sum // 2] sum2 = total_sum - sum1 return abs(sum1 - sum2) results = [] for i in range(t): n, skills = test_cases[i] result = min_difference(skills) results.append(result) return results # Example usage: # t = 2 # test_cases = [(4, [1, 5, 11, 5]), (3, [1, 2, 3])] # print(divideTeams(t, test_cases)) # Output: [0, 0]"},{"question":"Lucy\'s Birthday is approaching, and she wants to organize an event at her home. She has m friends, each of whom wants to bring a certain item to the party. Lucy\'s house, unfortunately, can only accommodate a limited number of items due to space constraints. Each friend i (1 ≤ i ≤ m) can bring k_i items, and each item is uniquely identified by an integer identifier. Lucy\'s house can only store at most s distinct items, but even if an item is brought by multiple friends, it should only be counted once. Help Lucy determine the maximum number of distinct items she can have at her party. The first line of the input contains two integers m and s (1 ≤ m ≤ 100, 1 ≤ s ≤ 100), the number of friends and the maximum number of distinct items Lucy\'s house can accommodate. The next m lines describe the items each friend wants to bring. The i-th line starts with an integer k_i (1 ≤ k_i ≤ 100), the number of items friend i wants to bring. Following are k_i integers separated by spaces, representing the identifiers of the items that friend i wants to bring. Print a single integer, the maximum number of distinct items Lucy can have at her party. # Example Input: ``` 3 5 4 1 2 3 4 3 2 3 5 2 1 5 ``` Output: ``` 5 ``` In this example, Lucy can have items 1, 2, 3, 4, and 5 at the party. Even though some items are brought by multiple friends, each item is counted only once.","solution":"def max_distinct_items(m, s, friends_items): Returns the maximum number of distinct items Lucy can have at her party. Parameters: m (int): Number of friends s (int): Maximum number of distinct items the house can accommodate friends_items (list of list of int): List of items each friend wants to bring Returns: int: Maximum number of distinct items unique_items = set() for items in friends_items: unique_items.update(items) return min(len(unique_items), s)"},{"question":"Given an integer array nums and an integer target, return the maximum number of pairs in the array that sum up to the target. Each pair should be composed of two distinct indices. A pair is considered distinct if there is no overlap in indices with any other pair. # Input: - The first line contains two integers n and target (1 ≤ n ≤ 10^5, 1 ≤ target ≤ 10^9). - The second line contains n integers representing the array nums. # Output: - Print a single integer representing the maximum number of pairs that sum up to the target. # Example: Input: 8 7 1 2 3 4 5 6 2 1 Output: 3 # Explanation: The pairs that sum up to 7 are: (1, 6), (2, 5), and (3, 4). There are three pairs in total, and no indices are reused. # Note: - Ensure the solution is efficient enough to handle the upper limits of the input constraints.","solution":"def max_number_of_pairs(nums, target): Returns the maximum number of pairs in the array nums that sum up to target. Each pair should be composed of two distinct indices. counts = {} pairs = 0 for num in nums: complement = target - num if counts.get(complement, 0) > 0: pairs += 1 counts[complement] -= 1 else: counts[num] = counts.get(num, 0) + 1 return pairs"},{"question":"You are given an array of integers and a target integer. Your task is to write a program that determines whether there are four distinct elements in the array whose sum is equal to the target integer. The array and target integer will be provided as input. # Input - The first line contains a single integer n (1 ≤ n ≤ 3000), the number of elements in the array. - The second line contains n space-separated integers a_i (-10^9 ≤ a_i ≤ 10^9), the elements of the array. - The third line contains a single integer target (-10^9 ≤ target ≤ 10^9). # Output - Output \\"YES\\" if there exist four distinct elements in the array whose sum is equal to the target integer. - Otherwise, output \\"NO\\". # Example **Input** ``` 6 1 2 3 4 5 6 10 ``` **Output** ``` YES ``` **Input** ``` 4 1 2 3 4 250 ``` **Output** ``` NO ``` # Note In the first example, 1 + 2 + 3 + 4 = 10, so the output is \\"YES\\". In the second example, no four elements sum up to 250, so the output is \\"NO\\". Your task is to implement an efficient solution that works within the given constraints.","solution":"from itertools import combinations def four_sum_exists(arr, target): Determines whether there are four distinct elements in the array whose sum is equal to the target integer. n = len(arr) if n < 4: return \\"NO\\" # Sort the array for easier processing arr.sort() for i in range(n - 3): for j in range(i + 1, n - 2): left, right = j + 1, n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: return \\"YES\\" elif total < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"**Problem Statement:** The kingdom of Numeria has a peculiar road system consisting of straight roads connecting various cities. The road network is represented as a tree (a connected graph with no cycles), with cities as nodes and roads as edges. Each road has a certain distance. Due to rising maintenance costs, the king has decided to introduce toll booths. However, they want to minimize the inconvenience for travelers. The inconvenience of traveling between any two cities is defined as the length of the longest road on the path connecting them. The king needs a program that, given the current road network, can determine the inconvenience for all possible city pairs and find the maximum inconvenience over all pairs. **Input:** - The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of cities. - Each of the next `n-1` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) indicating that there is a road between city `u` and city `v` with distance `w`. **Output:** - Print one integer — the maximum inconvenience over all pairs of cities in the kingdom. **Example:** ``` Input: 5 1 2 3 1 3 2 3 4 4 3 5 1 Output: 4 ``` **Explanation:** - The roads have the following distances: between city 1 and city 2 -> 3, between city 1 and city 3 -> 2, between city 3 and city 4 -> 4, between city 3 and city 5 -> 1. - The maximum inconvenience (the largest road length on any path between any two cities) is 4, which is the road between city 3 and city 4.","solution":"import sys from collections import defaultdict def dfs(u, parent, graph, max_edge, max_inconvenience): for v, w in graph[u]: if v == parent: continue max_edge[v] = max(max_edge[u], w) max_inconvenience[0] = max(max_inconvenience[0], max_edge[v]) dfs(v, u, graph, max_edge, max_inconvenience) def find_max_inconvenience(n, roads): graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Start DFS from any node, here we use node 1. max_edge = [-1] * (n + 1) max_edge[1] = -1 max_inconvenience = [-1] dfs(1, -1, graph, max_edge, max_inconvenience) return max_inconvenience[0]"},{"question":"Alice loves painting and has decided to paint a wall composed of a grid of size n times m. She uses a set of colors, each identified by an integer from 1 to k. She follows these specific rules: 1. She will paint exactly one cell at a time. 2. The color of each cell can be any of the k colors. 3. No two adjacent cells (horizontally or vertically) can have the same color. Given the dimensions of the grid and the number of colors, help Alice determine if it is possible to paint the wall following her rules. If it is possible, output \\"YES\\"; otherwise, output \\"NO\\". The first line contains three integers t (1 le t le 1000) — the number of test cases in the input. Then, t test cases follow, each described in a single line containing three integers n (1 le n, m le 50) and k (1 le k le 50) — the number of rows, columns, and colors respectively. For example, if the grid is 2 times 2 and there are 2 colors, it is possible to paint the wall such that no two adjacent cells share the same color. However, if the grid is 1 times 1 and there is only 1 color, it is not possible. For each test case, print \\"YES\\" if it is possible to paint the wall according to the rules, and \\"NO\\" otherwise. Example input: ``` 3 3 3 2 2 2 2 1 1 1 ``` Example output: ``` YES YES NO ```","solution":"def is_painting_possible(n, m, k): Determines if it is possible to paint the wall such that no two adjacent cells have the same color. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. k (int): The number of available colors. Returns: str: \'YES\' if it is possible to paint the wall under the given rules, \'NO\' otherwise. if k >= 2: return \\"YES\\" if k == 1: if n == 1 and m == 1: return \\"YES\\" else: return \\"NO\\" def solve_painting_problem(test_cases): Solves multiple test cases regarding the wall painting problem. Parameters: test_cases (list of tuple of int): A list where each element is a tuple (n, m, k) representing a test case. Returns: list of str: A list of answers for each test case, either \'YES\' or \'NO\'. results = [] for n, m, k in test_cases: results.append(is_painting_possible(n, m, k)) return results"},{"question":"NEKO#ΦωΦ decided to improve her cooking skills by learning to make the perfect sandwich. She has an unusual rectangular sandwich with dimensions n times m that has toasts (bread pieces) on both ends, and all other n times (m-2) positions are initially empty. Through the sandwich making process, NEKO will sequentially add ingredients in specific positions. Each of the ingredients added is either a ham, lettuce, or cheese, represented by characters \'H\', \'L\', or \'C\' respectively. NEKO wonders whether the sandwich remains \\"healthy\\" after each addition. A healthy sandwich is defined as one that has no two adjacent ingredients of the same type (vertically, horizontally, or diagonally). Can you help her to figure out if the sandwich is still healthy after each ingredient is added? NEKO decided to make a fancy sandwich today, so she\'ll be making exactly q additions to her sandwich. The first line contains three integers n, m, and q (3 le n, m le 10^3, 1 le q le 10^4). Each of the next q lines describes an addition of an ingredient: - The first integer of the line represents the row number (1 le r le n), - The second integer represents the column number (2 le c le m-1), - The third character represents the type of ingredient (\'H\', \'L\', or \'C\'). After each addition, print either \\"Healthy\\" if the sandwich remains healthy, or \\"Unhealthy\\" otherwise. You can print the words in any case (either lowercase, uppercase, or mixed). Let\'s go through this example to understand how it works:","solution":"def is_sandwich_healthy(n, m, additions): def is_healthy(sandwich, r, c, ingredient): directions = [ (-1, 0), (1, 0), # vertical (0, -1), (0, 1), # horizontal (-1, -1), (-1, 1), (1, -1), (1, 1) # diagonals ] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and sandwich[nr][nc] == ingredient: return False return True sandwich = [[\'\' for _ in range(m)] for _ in range(n)] result = [] for r, c, ingredient in additions: r, c = r - 1, c - 1 # convert to 0-based indexing if is_healthy(sandwich, r, c, ingredient): sandwich[r][c] = ingredient result.append(\\"Healthy\\") else: result.append(\\"Unhealthy\\") return result"},{"question":"You are given an array of integers and a target integer. Write a function that determines if there are three integers in the array whose sum is equal to the target. Inputs: - An integer array arr of size n (3 ≤ |n| ≤ 1000) with elements (−10^4 ≤ arr[i] ≤ 10^4). - An integer target (−10^4 ≤ target ≤ 10^4). Output: - Return a boolean value true if there exist three integers in the array whose sum equals the target, and false otherwise. Example: ``` Input: arr = [2, 7, 11, 15, -1, -4] target = 22 Output: true Explanation: The three numbers 7, 11, and 4 sum up to 22. ```","solution":"def three_sum_exists(arr, target): Determines if there are three integers in the array whose sum equals the target. :param arr: List[int], the input array. :param target: int, the target sum. :return: bool, True if there are three integers whose sum equals the target, False otherwise. arr.sort() n = len(arr) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"A university has a system to classify students into honours categories based on their cumulative GPA (Grade Point Average). The honours categories are as follows: - First Class Honours: GPA >= 3.75 - Second Class Honours (Upper): 3.50 <= GPA < 3.75 - Second Class Honours (Lower): 3.00 <= GPA < 3.50 - Third Class Honours: 2.00 <= GPA < 3.00 - No Honours: GPA < 2.00 Write a function `classify_student(gpa)` that takes a student\'s GPA as input and returns a string representing the corresponding honours category. The function should follow the exact honour classification boundaries described above. # Function Signature ```python def classify_student(gpa: float) -> str: ``` # Input - `gpa`: a float representing the cumulative GPA of the student. The value of GPA ranges from 0.0 to 4.0 inclusive. # Output - Return a string that represents the student\'s honour classification. # Example ```python assert classify_student(3.85) == \\"First Class Honours\\" assert classify_student(3.65) == \\"Second Class Honours (Upper)\\" assert classify_student(3.20) == \\"Second Class Honours (Lower)\\" assert classify_student(2.50) == \\"Third Class Honours\\" assert classify_student(1.85) == \\"No Honours\\" ```","solution":"def classify_student(gpa: float) -> str: Returns the honours category based on GPA. Parameters: gpa (float): The cumulative GPA of the student. Returns: str: The honours classification. if gpa >= 3.75: return \\"First Class Honours\\" elif 3.50 <= gpa < 3.75: return \\"Second Class Honours (Upper)\\" elif 3.00 <= gpa < 3.50: return \\"Second Class Honours (Lower)\\" elif 2.00 <= gpa < 3.00: return \\"Third Class Honours\\" else: return \\"No Honours\\""},{"question":"Arif recently enrolled in a chess club and is fascinated by the game. He learned about the unique moves of chess pieces and now wants to modify the behavior of the Knight piece. Instead of moving in its traditional L-shape, Arif proposes a \\"Super Knight\\" that can move to any of the 8 surrounding squares (like a King in chess). Arif wrote a computer program to simulate this new movement rule on a board. The chessboard is represented by an n x n grid where each cell is either empty (denoted by \'.\') or contains an obstacle (denoted by \'#\'). The Super Knight can move to any of the 8 surrounding cells as long as they are within the bounds of the board and are not obstacles. Given an n x n board and the initial position of the Super Knight, determine the minimum number of moves required to reach from the initial position to a target position on the board. If it\'s not possible to reach the target position, return -1. The first line contains an integer n (1 ≤ n ≤ 1000), the size of the board. The next n lines contain n characters (either \'.\' or \'#\') each, representing the board. The last line contains four integers sx, sy, tx, ty (0 ≤ sx, sy, tx, ty < n) — the starting x and y coordinates (0-indexed), and the target x and y coordinates (0-indexed) of the Super Knight. Print a single integer, the minimum number of moves required to reach the target position from the starting position, or -1 if it\'s not possible. **Example:** ``` 5 ..... ..#.. ..... ..#.. ..... 0 0 4 4 ``` **Output:** ``` 4 ``` In this example, the Super Knight starts at (0, 0) and can follow the path [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)] to reach the target position (4, 4) in 4 moves.","solution":"from collections import deque def min_moves_to_target(board, sx, sy, tx, ty): n = len(board) directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] if board[sx][sy] == \'#\' or board[tx][ty] == \'#\': return -1 queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, moves = queue.popleft() if (x, y) == (tx, ty): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and board[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1"},{"question":"You are given an array of integers representing the height of obstacles in a field. Your task is to help a robot navigate through the field from the start to the end. The robot can only move to the next obstacle (from left to right) if it can \\"jump\\" over the obstacle, where a jump from obstacle at position i to obstacle at position i+1 is successful if the height difference is less than or equal to a given maximum jump height k. The robot\'s goal is to reach the end of the array, and you want to calculate the minimum number of \\"jumps\\" the robot would need to reach the last obstacle or determine if it is not possible for the robot to reach the end of the array. The input format is as follows: - The first line contains two integers n and k (1 le n le 10^5, 1 le k le 10^5) — the number of obstacles and the maximum jump height. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^5) — the heights of the obstacles in the field. Output the minimum number of jumps required to reach the last obstacle. If it is not possible for the robot to reach the end of the array, output -1. # Example Input: ``` 7 3 1 2 3 5 6 8 9 ``` Output: ``` 6 ``` Explanation: The robot can make the following jumps: - From obstacle 1 (height 1) to obstacle 2 (height 2) - From obstacle 2 (height 2) to obstacle 3 (height 3) - From obstacle 3 (height 3) to obstacle 4 (height 5) - From obstacle 4 (height 5) to obstacle 5 (height 6) - From obstacle 5 (height 6) to obstacle 6 (height 8) - From obstacle 6 (height 8) to obstacle 7 (height 9) Thus, the robot requires 6 jumps to reach the last obstacle.","solution":"def min_jumps_to_end(n, k, heights): Calculate the minimum number of jumps required for the robot to reach the end of the array or determine if it is not possible. :param n: The number of obstacles (int) :param k: The maximum jump height (int) :param heights: The heights of the obstacles (list of int) :return: Minimum number of jumps needed or -1 if impossible (int) jumps = 0 for i in range(n - 1): if heights[i+1] - heights[i] > k: return -1 jumps += 1 return jumps"},{"question":"You are given a matrix representing the costs of converting one unit of a resource into another. The resources are identified as A, B, and C, and the matrix provides the cost of converting one unit of each resource into one unit of another. For example, converting one unit of A to B might cost 2 units, while converting one unit of A to C might cost 3 units. The matrix is represented as follows: ``` [[0, a_to_b, a_to_c], [b_to_a, 0, b_to_c], [c_to_a, c_to_b, 0]] ``` Where `a_to_b`, `a_to_c`, `b_to_a`, `b_to_c`, `c_to_a`, and `c_to_b` are integers representing the conversion costs between the resources, and the diagonal elements are zeros since converting a resource to itself costs nothing. The goal is to determine the minimum cost to convert a given number of initial units of one resource into another resource. Specifically, you need to determine the minimum cost to convert a specified number of units of resource X into resource Y using a series of conversions. The number of units to be converted and the conversion costs are provided as input. # Input - First, a 3x3 matrix of integers representing the conversion costs. Each element in the matrix is between 1 and 10000, except for the diagonal elements which are zero. - A string `start` which represents the starting resource (\'A\', \'B\', or \'C\'). - A string `end` which represents the target resource (\'A\', \'B\', or \'C\'). - An integer `units` which represents the number of units of the starting resource to be converted (1 ≤ units ≤ 10000). # Output - Print a single integer representing the minimum cost to convert the specified number of units of the starting resource into the target resource. # Example Input ``` [[0, 3, 5], [2, 0, 4], [6, 1, 0]] \'A\' \'C\' 10 ``` Output ``` 50 ``` In this example, the minimum cost to convert 10 units of resource \'A\' to resource \'C\' is 50 units, by converting directly from \'A\' to \'C\' with a cost of 5 units per conversion.","solution":"def minimum_cost_conversion(matrix, start, end, units): Returns the minimum cost to convert a specified number of units of the starting resource into the target resource using the given conversion matrix. # Define a mapping from resource to matrix index resource_index = {\'A\': 0, \'B\': 1, \'C\': 2} # Start and end indices start_index = resource_index[start] end_index = resource_index[end] # Direct cost from start to end resource direct_cost = matrix[start_index][end_index] # The minimum cost to convert the specified units directly total_cost = direct_cost * units return total_cost"},{"question":"You are given a list of integers `a` and you want to find a contiguous subarray (containing at least one number) which has the largest sum and return its sum. For example, given the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray `[4,-1,2,1]` has the largest sum of 6. Write a function `max_subarray_sum(arr)` that takes an integer list `arr` as its parameter and returns the largest sum of a contiguous subarray. # Example input ``` [-2, 1, -3, 4, -1, 2, 1, -5, 4] ``` # Example output ``` 6 ``` # Constraints - The length of the array will be between 1 and 10^5. - Each element of the array will be between -10^4 and 10^4. # Task Implement the function `max_subarray_sum` that achieves this in an efficient way.","solution":"def max_subarray_sum(arr): Returns the largest sum of a contiguous subarray. Parameters: arr (list): The input list of integers. Returns: int: The maximum sum of the contiguous subarray. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Zoya the Zebra has a peculiar liking for numbers that follow a specific geometric pattern. A sequence is said to be a \\"Zebra Sequence\\" if each consecutive pair of numbers in the sequence divide each other to produce the same result. Formally, a sequence a1, a2, ..., an is a Zebra Sequence if for all valid i (1 ≤ i < n), ai+1 / ai = d, where d is a fixed real number. Given an array of n positive integers, find the length of the longest subsequence that is a Zebra Sequence. The first line contains a single integer n (1 ≤ n ≤ 10^3) — the length of the array. The second line contains n space-separated positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array. Output a single integer denoting the length of the longest Zebra Sequence within the given array. # Example **Input:** ``` 6 1 3 9 27 81 7 ``` **Output:** ``` 5 ``` **Explanation:** The longest Zebra Sequence from the given array is either [1, 3, 9, 27, 81] with a common ratio of 3 or it could include any subsequence of these elements. **Input:** ``` 5 2 6 18 54 5 ``` **Output:** ``` 4 ``` **Explanation:** The longest Zebra Sequence is [2, 6, 18, 54] with a common ratio of 3. Write a program to solve the problem and determine the length of the longest Zebra Sequence in the given array.","solution":"def longest_zebra_sequence(arr): Finds the length of the longest subsequence that is a Zebra Sequence. n = len(arr) if n == 1: return 1 # This dictionary will store the max length of the sequence ending at each index dp = [1] * n for i in range(n): for j in range(i): if arr[i] % arr[j] == 0: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example input and call for the function arr = [1, 3, 9, 27, 81, 7] print(longest_zebra_sequence(arr)) # Output: 5"},{"question":"Write a function `find_min_window_substring(s, t)` that takes two strings `s` and `t` as inputs and returns the minimum window in `s` which will contain all the characters in `t` (including duplicates). If no such window exists, return an empty string `\\"\\"`. # Example: ```python find_min_window_substring(\\"ADOBECODEBANC\\", \\"ABC\\") # Output: \\"BANC\\" find_min_window_substring(\\"a\\", \\"aa\\") # Output: \\"\\" ``` # Constraints: - The length of `s` and `t` will be between 1 and 10^5. - Both `s` and `t` will consist only of ASCII characters. # Notes: - It is guaranteed that there is only one unique minimum window substring. Your function should have an optimized time complexity to handle large inputs efficiently.","solution":"from collections import Counter def find_min_window_substring(s, t): Returns the minimum window in `s` which will contain all the characters in `t`. if not t or not s: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} ans = float(\\"inf\\"), None, None # window length, left, right while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"You are developing a simple command-line text editor. One of the features you need to implement is \\"find and replace\\". Specifically, given a string, a target substring, and a replacement substring, you need to replace all occurrences of the target substring in the original string with the replacement substring. However, there are some constraints: 1. You can only use built-in string functions to split and join the string, but not to directly find and replace substrings. 2. The target and replacement substrings will not be empty. The input consists of three lines: - The first line contains the original string, which can be up to 1000 characters long. - The second line contains the target substring. - The third line contains the replacement substring. Output the modified string after performing the find and replace operation. For example: If the input is: ``` Hello world, world is beautiful. world planet ``` The output should be: ``` Hello planet, planet is beautiful. ```","solution":"def find_and_replace(original, target, replacement): Replaces all occurrences of the target substring with the replacement substring in the original string. Args: original (str): The original string. target (str): The target substring to be replaced. replacement (str): The replacement substring. Returns: str: The modified string with all occurrences of the target replaced by the replacement. parts = original.split(target) return replacement.join(parts)"},{"question":"You are given a labyrinth represented as a grid of size n x m. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstruction (denoted by \'#\'). You can move from one cell to its adjacent cells (left, right, up, down) if and only if the adjacent cell is not an obstruction. Your task is to help a rat find the shortest path from its starting position to a piece of cheese. The rat starts at the top-left corner of the grid (0, 0), and the piece of cheese is located at the bottom-right corner of the grid (n-1, m-1). If it is not possible for the rat to reach the cheese, return -1. Otherwise, return the length of the shortest path. # Input - The first line contains two integers n and m (2 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines contain m characters each, where each character is either \'.\' or \'#\'. # Output - Print a single integer — the length of the shortest path from the rat to the cheese, or -1 if there is no such path. # Example ``` Input: 5 6 . . . # . . # # . # # . . . . . . . . # # # . # . . . . . . Output: 9 ``` In this example, the shortest path from the top-left corner (0, 0) to the bottom-right corner (4, 5) has a length of 9. If there is no possible path, you should return -1.","solution":"from collections import deque def shortest_path_in_labyrinth(n, m, grid): Determines the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) in a grid labyrinth. Returns -1 if no path exists. Args: n: int - number of rows in the grid. m: int - number of columns in the grid. grid: List of strings - representation of the grid with \'.\' and \'#\'. Returns: int - length of the shortest path or -1 if no path exists. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0,1), (1,0), (0,-1), (-1,0)] # right, down, left, up visited = [[False]*m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"A tree is a connected graph with no cycles. You are given a tree with n nodes and n-1 edges. Each node is assigned a weight. You need to determine if there exists a special path in this tree. A path from node u to node v (where u neq v) is special if the sum of the weights of the nodes in this path is odd. Provide an algorithm that checks for the presence of at least one special path in the tree. # Input The first line contains an integer t (1 leq t leq 100) — the number of test cases. For each test case: - The first line contains an integer n (2 leq n leq 100) — the number of nodes in the tree. - The second line contains n integers w_1, w_2, dots, w_n (1 leq w_i leq 100) — the weights of the nodes. - Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n) — an edge connecting nodes u and v. # Output For each test case, print \\"YES\\" (without quotes) if there exists at least one special path in the tree, otherwise print \\"NO\\". # Example Input ``` 2 3 3 1 4 1 2 2 3 4 1 1 1 1 1 2 2 3 3 4 ``` Output ``` YES YES ``` # Note: In the first example, the path from node 1 to node 3 has weights [3, 1, 4], and their sum is 8, which is not odd, similarly for other paths. However, if we consider a path of length 1, such as from 1 to 2 or 2 to 3, the sum will be odd. In the second example, there is a clear path between any two connected nodes where the sum of their weights will always be 2, which is not odd. However, combining paths such as from 1-2-3, 2-3-4, or 3-4-1, an odd sum can be observed.","solution":"def has_special_path(t, test_cases): results = [] for case in test_cases: n = case[\'n\'] weights = case[\'weights\'] # If there is any odd weight, we know there is an odd path (as we can take edge to or from this node) if any(weight % 2 == 1 for weight in weights): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Vasily is preparing a special surprise for his friend. He has a box with n different colored balls and k unique friends. He wants to distribute all the balls such that each friend gets a distinct subset of balls. Given the number of balls n and the number of friends k, help Vasily determine how many distinct ways he can distribute the balls to his friends under the following conditions: - Each friend must receive at least one ball. - No two friends should receive the same subset of balls. The input consists of two integers n and k (1 ≤ k ≤ n ≤ 15). Output the number of distinct ways to distribute the balls. Example: Input: 3 2 Output: 6 Explanation: There are 3 balls and 2 friends. The possible distributions are: 1. Friend 1: {1}, Friend 2: {2,3} 2. Friend 1: {2}, Friend 2: {1,3} 3. Friend 1: {3}, Friend 2: {1,2} 4. Friend 1: {1,2}, Friend 2: {3} 5. Friend 1: {1,3}, Friend 2: {2} 6. Friend 1: {2,3}, Friend 2: {1} Note: The result corresponds to the Stirling number of the second kind multiplied by k! since we have k friends and they need to be assigned the distinct subsets.","solution":"from math import factorial from functools import lru_cache @lru_cache(None) def stirling_second_kind(n, k): Returns the Stirling number of the second kind S(n, k) which is the number of ways to partition a set of n objects into k non-empty subsets. if n == k: return 1 if k == 0 or n == 0: return 0 return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1) def distinct_ways_to_distribute_balls(n, k): Returns the number of distinct ways to distribute n balls among k friends such that each friend gets at least one ball and no two friends get the same subset of balls. return stirling_second_kind(n, k) * factorial(k)"},{"question":"You are given a list of integers, where any integer appears either once or twice. Your task is to determine which single integer occurs only once in the list. Your solution must run in O(n) time and use O(1) extra space, where n is the length of the list. The first line of input contains an integer n (1 ≤ n ≤ 10^6, and n is odd). The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9), where each integer appears either once or twice. Print the single integer that appears only once. Example input: 5 4 3 2 4 3 Example output: 2","solution":"def find_single_occurrence(nums): Given a list of integers, where any integer appears either once or twice, this function returns the single integer that occurs only once. result = 0 for num in nums: result ^= num return result"},{"question":"You are given an array of integers, where each integer represents the height of a building. The width of each building is 1. Imagine it as a histogram where the height of each bar represents a building\'s height. Your task is to find the maximum rectangular area that can be formed from these contiguous buildings. The rectangle must be aligned with the x and y axes (i.e., it can\'t be diagonal). For example, given the array [2, 1, 5, 6, 2, 3], the maximum rectangular area that can be formed is 10 (from the subarray [5, 6] with a height of 5). Write a function `maxRectangleArea` that takes an array of integers as the argument and returns an integer representing the largest rectangular area. Function signature: `def maxRectangleArea(heights: List[int]) -> int:` **Input:** - An array of integers `heights` where `1 <= len(heights) <= 1000` and `1 <= heights[i] <= 1000`. **Output:** - A single integer representing the maximum rectangular area. **Example:** ``` Input: [2, 1, 5, 6, 2, 3] Output: 10 ``` **Explanation:** In the example, the maximum area of 10 is obtained by the subarray [5, 6], as the height 5 can be extended across two buildings with widths 1 each.","solution":"from typing import List def maxRectangleArea(heights: List[int]) -> int: Find the maximum rectangular area that can be formed from contiguous buildings represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an array of n positive integers, a1, a2, ..., an, and an integer k. Your task is to find the number of subarrays (continuous sub-parts of the array) whose elements sum up to the integer k. The first line contains two positive integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109) — the number of integers in the array and the target sum respectively. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Print the number of subarrays whose elements sum up to k. For example, given the array [1, 2, 3] and k = 3: - The subarray [1, 2] sums to 3. - The subarray [3] sums to 3. Hence, there are 2 subarrays that meet the requirement.","solution":"def count_subarrays_with_sum_k(arr, k): Returns the number of subarrays whose elements sum up to k. Parameters: arr (list of int): The list of integers. k (int): The target sum. Returns: int: The number of subarrays with sum equal to k. from collections import defaultdict count = 0 current_sum = 0 prefix_sums = defaultdict(int) prefix_sums[0] = 1 for num in arr: current_sum += num if current_sum - k in prefix_sums: count += prefix_sums[current_sum - k] prefix_sums[current_sum] += 1 return count"},{"question":"You are given a string s of length n, consisting of lowercase English letters, and two positive integers k and m. Your task is to find a substring of s of length k that contains at least m distinct characters. If there are multiple such substrings, return the lexicographically smallest one. If there is no such substring, return an empty string. A substring of a string s is a contiguous sequence of characters within s. A string x is lexicographically smaller than string y if x appears before y in a dictionary, i.e., either x is a prefix of y, or there exists some positive integer i such that x_i < y_i and for all j < i, x_j = y_j. The first line of input contains the string s (1 leq n leq 10^5), the second line contains the integer k (1 le k le n) and the third line contains the integer m (1 le m le k). Print the desired substring or an empty string if no such substring exists. Example: Input: hellothere 5 3 Output: ellot","solution":"def smallest_lexicographic_substring(s, k, m): n = len(s) if k > n or m > k: return \\"\\" def has_at_least_m_distinct_chars(subs, m): return len(set(subs)) >= m smallest_substring = \\"\\" for i in range(n - k + 1): substring = s[i:i + k] if has_at_least_m_distinct_chars(substring, m): if smallest_substring == \\"\\" or substring < smallest_substring: smallest_substring = substring return smallest_substring"},{"question":"You are given a list of integers representing the sizes of different files that need to be compressed. The compression algorithm you are using can merge any two files into a single larger file. The cost of merging two files is equal to the sum of their sizes. Your task is to determine the minimum total cost required to merge all the files into one. The first line of the input contains a single integer n (2 ≤ n ≤ 100), the number of files. The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the sizes of the files. Output a single integer — the minimum possible total cost to merge all the files. For example, given the input: 4 4 3 2 6 The optimal way to merge the files will have the minimum cost 29, which can be achieved with the following steps: 1. Merge files of sizes 2 and 3 (cost: 5) 2. Merge the resulting file of size 5 with the file of size 4 (cost: 9) 3. Merge the resulting file of size 9 with the file of size 6 (cost: 15) Total cost = 5 + 9 + 15 = 29","solution":"import heapq def min_cost_to_merge_files(file_sizes): Returns the minimum total cost to merge all files into one. file_sizes - a list of integers representing the sizes of different files. if len(file_sizes) == 0: return 0 # Create a min-heap from the file sizes heapq.heapify(file_sizes) total_cost = 0 # Keep removing and merging the two smallest files until one file remains while len(file_sizes) > 1: first = heapq.heappop(file_sizes) second = heapq.heappop(file_sizes) cost = first + second total_cost += cost heapq.heappush(file_sizes, cost) return total_cost"},{"question":"Jamie is working on a software module that helps manage a list of tasks. The module should be able to determine the minimal number of distinct deadlines present in a given list of task deadlines, such that each task has a unique deadline. Each task has a given deadline, and some tasks may share the same deadline initially. Jamie needs to adjust some deadlines so that all tasks have unique deadlines that are not already assigned to another task. The adjusted deadlines should be the smallest possible distinct non-negative integers not already in the list of deadlines. Write a function to help Jamie determine the minimal number of distinct deadlines needed. **Input**: - An integer `n`, the number of tasks. - A list of `n` non-negative integers representing the deadlines of the tasks. **Output**: - A single integer, the minimal number of distinct deadlines needed. **Example**: ```python def minimal_distinct_deadlines(n, deadlines): # Your implementation here # Example 1 n = 5 deadlines = [1, 2, 2, 3, 5] print(minimal_distinct_deadlines(n, deadlines)) # Output: 5 # Example 2 n = 4 deadlines = [0, 0, 0, 0] print(minimal_distinct_deadlines(n, deadlines)) # Output: 4 ``` **Explanation**: For the first example, the list [1, 2, 2, 3, 5] can be converted to [1, 2, 3, 4, 5], which has 5 distinct deadlines. However, converting it to [1, 2, 2, 3, 4] does not fulfill the requirement of distinct deadlines. Hence the minimal number of distinct deadlines needed is 5. For the second example, the list [0, 0, 0, 0] needs to be converted to [0, 1, 2, 3], thereby requiring 4 distinct deadlines.","solution":"def minimal_distinct_deadlines(n, deadlines): Determines the minimal number of distinct deadlines needed such that each task has a unique deadline. deadlines = sorted(deadlines) unique_deadlines = 0 taken_deadlines = set() for deadline in deadlines: while deadline in taken_deadlines: deadline += 1 taken_deadlines.add(deadline) unique_deadlines += 1 return unique_deadlines"},{"question":"John is building a new game similar to Minesweeper. In John\'s version, there is an N times N grid, and some cells contain a mine while others contain a number indicating the number of mines in the surrounding cells (horizontally, vertically, and diagonally adjacent). John needs a function to verify if a given grid conforms to the game\'s rules. # Input The first line of input contains an integer N (1 leq N leq 100), the size of the grid. The next N lines contain N integers each, representing the grid. Each cell in the grid contains either: - A mine represented by the value -1, or - A number 0 leq X leq 8 representing the count of mines in the adjacent cells. # Output Output \\"Valid\\" if the grid conforms to the game\'s rules. Otherwise, output \\"Invalid\\". # Examples Example 1 **Input:** ``` 3 -1 1 0 1 1 0 0 0 0 ``` **Output:** ``` Valid ``` Example 2 **Input:** ``` 3 -1 2 0 2 2 0 0 0 0 ``` **Output:** ``` Invalid ``` # Note In the first example, the game is valid because: - The cell (1,1) is a mine (-1). - The cell (1,2) correctly indicates that there is 1 mine adjacent (1,1). - The rest of the cells correctly indicate zero mines adjacent. In the second example, the game is invalid because: - The cell (1,2) incorrectly indicates that there are 2 mines adjacent but there is only 1 mine adjacent (1,1).","solution":"def is_valid_grid(N, grid): Verify if the given grid conforms to the game\'s rules. def count_adjacent_mines(x, y): count = 0 for i in range(max(0, x-1), min(N, x+2)): for j in range(max(0, y-1), min(N, y+2)): if grid[i][j] == -1: count += 1 return count for i in range(N): for j in range(N): if grid[i][j] != -1: # If the cell is not a mine if grid[i][j] != count_adjacent_mines(i, j): return \\"Invalid\\" return \\"Valid\\""},{"question":"You are given a grid representing a minefield, where each cell is either empty, contains a mine, or has a number indicating how many mines are adjacent to it, including diagonally adjacent cells. Your task is to determine the positions of all mines in the grid. The grid is provided as a list of strings. Each string represents a row of the minefield and contains one of the following characters: - \'.\' for an empty cell, - \'M\' for a mine, - \'1\'-\'8\' for a cell with a number indicating the number of adjacent mines. Write a function `find_mines(grid)` that takes the grid as input and returns a list of tuples representing the positions of all mines in the format (row_index, col_index). The grid will have at least one row and one column, and at most 100 rows and 100 columns. It is guaranteed that the input grid is valid according to the rules of the minesweeper game. # Example: **Input:** ```python grid = [ \\"1M..\\", \\"1M2.\\", \\"0.2M\\", \\"0111\\" ] ``` **Output:** ```python [(0, 1), (1, 1), (2, 3)] ``` **Explanation:** The output list contains the coordinates of the mines located at (0, 1), (1, 1), and (2, 3) as indicated in the grid.","solution":"def find_mines(grid): This function takes a grid representing a minefield and returns a list of tuples representing the positions of all mines in the format (row_index, col_index). :param grid: List of strings representing the minefield :return: List of tuples representing the positions of mines mines = [] for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == \'M\': mines.append((i, j)) return mines"},{"question":"You are given an integer array arr of length n and an integer k. The goal is to determine whether you can rearrange the elements of the array such that the sum of every consecutive subarray of length k is equal. For example, if arr is [1, 2, 3, 4, 5, 6] and k is 3, you can rearrange it to [2, 3, 4, 1, 5, 6] where the sum of each subarray of length 3 is 9 (i.e., 2+3+4, 1+5+3, and so on). Your task is to write a function that checks whether it is possible to rearrange the array to meet the above requirement and if so, print \\"YES\\" otherwise print \\"NO\\". The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 50) — the number of test cases. The description of the test cases follows. For each test case: The first line contains two integers n (1 leq n leq 1000) and k (1 leq k leq n). The second line contains n integers separated by spaces, denoting the array elements arr (1 leq arr[i] leq 1000). For each test case, print \\"YES\\" if it is possible to rearrange the array such that every subarray of length k has the same sum, otherwise print \\"NO\\". In the first test case, it is not possible to rearrange the array such that the sum of every subarray of length 3 is equal. In the second test case, you can rearrange the array to [3, 2, 1] or [1, 2, 3]. In the third test case, you can rearrange the array to [1, 2, 3, 4]. In the fourth test case, it is not possible to rearrange the array to satisfy the condition.","solution":"def can_rearrange(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] if n % k == 0: total_sum = sum(arr) part_sum = total_sum / (n // k) if part_sum.is_integer(): results.append(\\"YES\\") else: results.append(\\"NO\\") else: results.append(\\"NO\\") return results # Example usage if __name__ == \\"__main__\\": t = 4 test_cases = [ ((6, 3), [1, 2, 3, 4, 5, 6]), ((3, 1), [1, 2, 3]), ((4, 2), [2, 1, 4, 3]), ((5, 3), [1, 2, 3, 4, 5]) ] print(can_rearrange(t, test_cases))"},{"question":"Heidi has decided to dig deeper into the village population data, and is now interested in how the populations are changing over time. She has population estimates from the last few years for each village, and she wants to identify trends. Can you help Heidi identify whether each village\'s population is generally increasing, decreasing, or stable? You will receive the population estimates of each village for the last few years, each provided as a list of integers in chronological order. Your task is to classify each village\'s population trend as one of the following: - \\"increasing\\" if every subsequent year has a population greater than or equal to the previous year - \\"decreasing\\" if every subsequent year has a population less than or equal to the previous year - \\"stable\\" if the population remains the same throughout If a trend does not strictly match one of these categories, classify it as \\"fluctuating\\". Output one line per village, in the same order as provided in the input, containing your classification of the population trend. Example Input: ``` [ [100, 101, 102, 103], [200, 199, 198], [150, 150, 150], [120, 130, 125] ] ``` Example Output: ``` increasing decreasing stable fluctuating ```","solution":"def classify_population_trends(population_data): trends = [] for population in population_data: if all(population[i] == population[i+1] for i in range(len(population) - 1)): trends.append(\\"stable\\") elif all(population[i] <= population[i+1] for i in range(len(population) - 1)): trends.append(\\"increasing\\") elif all(population[i] >= population[i+1] for i in range(len(population) - 1)): trends.append(\\"decreasing\\") else: trends.append(\\"fluctuating\\") return trends"},{"question":"You are given an integer n representing the length of an array and an array of length n filled with integers. Your task is to determine if the array can be split into two non-empty subarrays such that the product of the integers in each subarray is equal. The first line of the input contains an integer n (2 leq n leq 10^5). The second line contains n integers, the elements of the array separated by spaces (-10^9 leq a_i leq 10^9). Print \\"YES\\" if the array can be split into two subarrays with equal product, otherwise print \\"NO\\". For example, given the array [4, 2, -2, 1], it can be split into [4, 2] and [-2, 1] with products 8 and -2 respectively which are not equal. However, given the array [2, 3, 1, 6], it can be split into [2, 3] and [1, 6] with products 6 for both.","solution":"def can_be_split_equal_product(n, array): from functools import reduce from math import gcd from collections import Counter from itertools import islice def product(arr): return reduce(lambda x, y: x * y, arr, 1) total_product = product(array) if total_product == 0: return \\"YES\\" if array.count(0) > 1 else \\"NO\\" left_product = 1 for i in range(n - 1): left_product *= array[i] right_product = total_product // left_product if left_product == right_product: return \\"YES\\" return \\"NO\\""},{"question":"Given n integer points in a 2D Cartesian plane, your task is to find the minimum distance between any pair of points. A distance between two points (x1, y1) and (x2, y2) is defined as sqrt((x1 - x2)^2 + (y1 - y2)^2). You need to implement a function that computes this minimum distance. **Input:** - First line contains the integer n (2 ≤ n ≤ 10^5), the number of points. - Next n lines each contain two integers xi and yi (|xi|, |yi| ≤ 10^9), representing the coordinates of the points. **Output:** - Output a single floating point number, the minimum distance between any pair of points. Your solution should have a time complexity better than O(n^2). If there are multiple pairs with the same minimum distance, it\'s sufficient to return the distance for any one of those pairs. **Example:** **Input:** ``` 4 0 0 3 4 1 1 2 2 ``` **Output:** ``` 1.414213 ``` **Notes:** - You are expected to handle precision up to six decimal places in the output. - Consider using the divide and conquer approach or other efficient algorithms like sweep line algorithm for finding the closest pair of points.","solution":"import math def find_min_distance(points): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def closest_pair(points_sorted_x, points_sorted_y): if len(points_sorted_x) <= 3: min_dist = float(\'inf\') for i in range(len(points_sorted_x)): for j in range(i + 1, len(points_sorted_x)): min_dist = min(min_dist, euclidean_distance(points_sorted_x[i], points_sorted_x[j])) return min_dist mid = len(points_sorted_x) // 2 mid_point = points_sorted_x[mid] left_sorted_y = list(filter(lambda x: x[0] <= mid_point[0], points_sorted_y)) right_sorted_y = list(filter(lambda x: x[0] > mid_point[0], points_sorted_y)) dist_left = closest_pair(points_sorted_x[:mid], left_sorted_y) dist_right = closest_pair(points_sorted_x[mid:], right_sorted_y) min_dist = min(dist_left, dist_right) strip = [point for point in points_sorted_y if abs(point[0] - mid_point[0]) < min_dist] for i in range(len(strip)): for j in range(i + 1, len(strip)): if strip[j][1] - strip[i][1] >= min_dist: break min_dist = min(min_dist, euclidean_distance(strip[i], strip[j])) return min_dist points_sorted_x = sorted(points) points_sorted_y = sorted(points, key=lambda x: x[1]) return closest_pair(points_sorted_x, points_sorted_y) # Example usage: points = [(0, 0), (3, 4), (1, 1), (2, 2)] result = find_min_distance(points) print(f\\"{result:.6f}\\")"},{"question":"Julia has been fascinated by strings ever since she learned coding. Today, she came across an interesting problem that she\'d like to solve. You are given a string `s` consisting of lowercase English letters. Julia can choose exactly one character in the string and change it to any other lowercase English character. She wants to know the length of the longest substring where all characters are the same that she can obtain by making at most one such modification. Write a function `maxSubstringLength(s: str) -> int` that takes a string `s` (1 ≤ |s| ≤ 200,000) and returns an integer representing the length of the longest possible substring with all identical characters after changing one character at most once. # Sample Input ``` aabcc bbbbb abcde a ``` # Sample Output ``` 3 5 2 1 ``` # Explanation In the first sample, the optimal move is to change the third character \'b\' to \'a\', resulting in the string `aaacc`. The longest substring with the same characters is \\"aaa\\" which has length 3. In the second sample, no modifications are needed, as the string already consists of identical characters, so the result is 5. In the third sample, one optimal move is to change the first character \'a\' to \'b\', giving the string `bbcde`. The longest substring with the same characters is \\"bb\\" which has length 2. In the fourth sample, the string is of length 1, so the longest substring is the string itself, and the result is 1.","solution":"def maxSubstringLength(s: str) -> int: def longest_with_one_change(char): max_len = 1 # because single character will be the minimum when not all elements are same left = 0 changes = 0 for right in range(len(s)): if s[right] != char: changes += 1 while changes > 1: if s[left] != char: changes -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len max_len_overall = 1 unique_chars = set(s) for char in unique_chars: max_len_overall = max(max_len_overall, longest_with_one_change(char)) return max_len_overall"},{"question":"Given a binary tree, determine the maximum depth of the tree. The maximum depth is defined as the number of nodes along the longest path from the root node down to the farthest leaf node. You are given the root of a binary tree, where each node contains an integer value and two child pointers to the left and right children. Implement the function `int maxDepth(TreeNode *root)` which returns the maximum depth of the binary tree. The `TreeNode` structure is defined as follows: ```cpp struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode() : val(0), left(nullptr), right(nullptr) {} TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} }; ``` **Example:** 1. Input: ``` Tree: 3 / 9 20 / 15 7 ``` Output: 3 Explanation: The maximum depth is obtained by following the path 3 -> 20 -> 7, which has 3 nodes. 2. Input: ``` Tree: 1 2 3 4 ``` Output: 4 Explanation: The maximum depth is obtained by following the path 1 -> 2 -> 3 -> 4, which has 4 nodes. 3. Input: ``` Tree: 1 / 2 3 / 4 5 ``` Output: 3 Explanation: The maximum depth is obtained by following the paths 1 -> 2 -> 4 or 1 -> 2 -> 5, each of which has 3 nodes. **Constraints:** - The number of nodes in the tree is in the range [0, 10^4]. - -10^4 <= Node value <= 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of the binary tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"There is a horizontal river with a constant flow from point (x_1, y_1) to point (x_2, y_2). The riverbanks can be represented as a series of connected segments with endpoints at (l_i, u_i) for the left riverbank and (r_i, v_i) for the right riverbank, where (0 le l_i < l_{i+1} le 10^9), (0 le r_i < r_{i+1} le 10^9), (0 le u_i, v_i le 10^9) for (1 le i le n). The riverbank segments do not intersect or touch each other and span the entire distance from (x_1, y_1) to (x_2, y_2) horizontally. You are given the positions of a ferry boat at different times of the day. The boat always travels at a constant speed from one point to the next. For each position of the ferry boat, determine whether it is between the riverbanks, in contact with any riverbank, or outside the riverbanks. First line contains two space-separated integers x_1 and y_1 (0 le x_1 le 10^9, 0 le y_1 le 10^9), and two space-separated integers x_2 and y_2 (0 le x_2 le 10^9, 0 le y_2 le 10^9) representing the start and end points of the river. Second line contains integer n (1 le n le 2 cdot 10^5) — number of segments forming the riverbanks. Next n lines contain two space-separated integers per line: l_i and u_i followed by two space-separated integers r_i and v_i. Next line contains integer m (1 le m le 10^5) — number of ferry boat positions to check. Next m lines contain two integers per line: x_j and y_j — coordinates of the ferry boat at different times. Print m lines. For each position of the ferry boat, print one of the following: - \\"BETWEEN\\" if the boat is between the riverbanks, - \\"CONTACT\\" if the boat is in contact with either riverbank, - \\"OUTSIDE\\" if the boat is outside the riverbanks.","solution":"def riverboat_positions(x1, y1, x2, y2, segments, positions): results = [] for xj, yj in positions: is_outside = True for li, ui, ri, vi in segments: if li <= xj <= ri: if ui < yj < vi: results.append(\\"BETWEEN\\") elif yj == ui or yj == vi: results.append(\\"CONTACT\\") else: results.append(\\"OUTSIDE\\") is_outside = False break if is_outside: results.append(\\"OUTSIDE\\") return results # Example usage: # segments = [(l1, u1, r1, v1), (l2, u2, r2, v2), ...] # positions = [(xj, yj), (xk, yk), ...] # riverboat_positions(x1, y1, x2, y2, segments, positions)"},{"question":"You are on a spaceship traveling through a galaxy with n planets. Each planet has a certain supply of resource units, denoted as ai for the i-th planet. The spaceship needs to collect resources by visiting the planets. However, due to the spaceship\'s limitations, you can only visit a contiguous subarray of planets, i.e., a sequence of planets with consecutive indices. Your mission is to maximize the total supply of resource units collected from exactly k contiguous planets. Design an algorithm to determine this maximum sum. The first line contains two positive space-separated integers, n and k (1 ≤ k ≤ n ≤ 100,000) — the total number of planets and the number of contiguous planets you must visit respectively. The second line contains n space-separated integers ai (1 ≤ ai ≤ 100,000), which represent the resource units available on each planet. Output a single integer representing the maximum sum of resource units you can collect by visiting exactly k contiguous planets. For instance, in the first sample, visiting the last three planets provides the maximum sum of 21. Sample Input: ``` 5 3 1 2 3 4 5 ``` Sample Output: ``` 12 ``` In another example, visiting the first three planets gives the maximum sum of 15. Sample Input: ``` 4 3 5 4 3 2 ``` Sample Output: ``` 12 ``` Ensure your solution effectively handles large inputs within the given constraints.","solution":"def max_resource_sum(n, k, resources): Returns the maximum sum of resource units that can be collected from exactly k contiguous planets. Args: n: int - Total number of planets. k: int - Number of contiguous planets to visit. resources: List[int] - Resources available on each planet. Returns: int - The maximum sum of resources from k contiguous planets. current_sum = sum(resources[:k]) max_sum = current_sum for i in range(k, n): current_sum += resources[i] - resources[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Maria has recently been fascinated with numbers and their properties. She asks you to help her with a small puzzle involving even and odd numbers. You are provided with an integer array \'arr\' of size n (1 ≤ n ≤ 1000). Your task is to rearrange the array such that all even numbers are positioned before all odd numbers, while preserving the relative order of the numbers within the even and odd groups, respectively. For instance, given an integer array \'arr\', segregate all even numbers to the beginning of the array followed by all odd numbers. The first line of input contains a single integer n, representing the size of the array. The second line contains n space-separated integers representing the elements of the array. Print the rearranged array in a single line as the output. # Example **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 2 4 1 3 5 ``` **Input:** ``` 6 12 17 19 10 22 21 ``` **Output:** ``` 12 10 22 17 19 21 ```","solution":"def rearrange_array(arr): Rearranges the array such that all even numbers are positioned before all odd numbers, while preserving the relative order of the numbers within the even and odd groups, respectively. even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] return even + odd"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. Your task is to determine if you can make the string a palindrome by performing at most `k` operations. In a single operation, you can remove any character from the string. A palindrome is a string that reads the same backward as forward. Write a function `can_form_palindrome_with_k_operations(s: str, k: int) -> str` that takes a string `s` and an integer `k` as input and returns \\"YES\\" if it is possible to make the string a palindrome by removing at most `k` characters, and \\"NO\\" otherwise. # Input Format - The first line contains a single integer `t` (1 le t le 10) — the number of test cases. - For each test case: - The first line contains the string `s` (1 le text{len}(s) le 1000). - The second line contains the integer `k` (0 le k le text{len}(s)). # Output Format For each test case, output \\"YES\\" if it\'s possible to make the string a palindrome by removing at most `k` characters, and \\"NO\\" otherwise. # Example Input: ``` 3 abca 1 abcd 2 a 0 ``` Output: ``` YES NO YES ``` Explanation: - In the first example, removing the character \'b\' will make the string \\"aca\\", which is a palindrome. - In the second example, it is impossible to form a palindrome by removing at most 2 characters. - In the third example, the string is already a palindrome and doesn\'t require any removals.","solution":"def can_form_palindrome_with_k_operations(s: str, k: int) -> str: Determine if the string can be made a palindrome by removing at most k characters. def is_k_palindrome(s, k): Helper function to determine if a string can be made palindrome by removing at most k characters. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for left in range(n - length + 1): right = left + length - 1 if s[left] == s[right]: dp[left][right] = dp[left + 1][right - 1] else: dp[left][right] = 1 + min(dp[left + 1][right], dp[left][right - 1]) return dp[0][n - 1] <= k return \\"YES\\" if is_k_palindrome(s, k) else \\"NO\\""},{"question":"You are given a list of words and two words from that list, word1 and word2. Write a function that finds the shortest distance (in terms of number of words) between these two words in the list. For example, if the words are separated by several other words in the list, you want to find the minimum number of words you would need to scan to reach one word from the other. Note that word1 and word2 may appear multiple times in the list, and they can be the same word in which case you need to find the shortest distance between the two occurrences of that word. Your function should have the following signature: ```python def shortest_distance(words: List[str], word1: str, word2: str) -> int: ``` **Input:** - The function takes a list of words `words` (1 ≤ len(words) ≤ 10^5), where each word is a string with length 1 ≤ len(word) ≤ 20. - The two words `word1` and `word2` are non-empty strings and may or may not be different, and both are guaranteed to be in the list. **Output:** - The function should return an integer representing the shortest distance between word1 and word2 in the list. **Example:** ```python words = [\\"practice\\", \\"makes\\", \\"perfect\\", \\"coding\\", \\"makes\\"] word1 = \\"makes\\" word2 = \\"coding\\" print(shortest_distance(words, word1, word2)) # Output: 1 words = [\\"practice\\", \\"makes\\", \\"perfect\\", \\"coding\\", \\"makes\\"] word1 = \\"makes\\" word2 = \\"makes\\" print(shortest_distance(words, word1, word2)) # Output: 3 ``` **Explanation:** In the first example, the shortest distance between \\"makes\\" and \\"coding\\" is 1. In the second example, the shortest distance between the two \\"makes\\" is 3.","solution":"from typing import List def shortest_distance(words: List[str], word1: str, word2: str) -> int: Returns the shortest distance between word1 and word2 in the list of words. index1, index2 = -1, -1 min_distance = float(\'inf\') same_word = word1 == word2 for i, word in enumerate(words): if word == word1: if same_word: if index1 == -1: index1 = i else: min_distance = min(min_distance, i - index1) index1 = i else: index1 = i if index2 != -1: min_distance = min(min_distance, abs(index1 - index2)) elif word == word2: index2 = i if index1 != -1: min_distance = min(min_distance, abs(index1 - index2)) return min_distance"},{"question":"You are tasked with tracking the layout of a new amusement park that is still under construction. The amusement park will consist of a number of attractions and pathways between these attractions. Each attraction has a unique number identifier from 1 to n. Each pathway allows visitors to travel from one attraction directly to another and is bidirectional, meaning visitors can travel in both directions. However, due to the vastness of the park, it\'s important to determine whether every attraction is reachable from every other attraction directly or indirectly. Simply put, you need to determine if the park forms a single connected component. The first line of the input consists of two integers, the number of attractions n (1 ≤ n ≤ 100,000) and the number of pathways m (0 ≤ m ≤ 200,000). The next m lines describe the pathways, each consisting of two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), indicating that there is a pathway between attraction ui and attraction vi. Output \\"YES\\" if all attractions are reachable from every other attraction, otherwise output \\"NO\\". # Example: Input: ``` 4 3 1 2 2 3 3 4 ``` Output: ``` YES ``` Input: ``` 4 2 1 2 3 4 ``` Output: ``` NO ``` # Explanation: - In the first example, there exists a pathway directly or indirectly connecting every attraction, so the entire set of attractions forms one connected component. - In the second example, there are two disconnected components: {1, 2} and {3, 4}, which means it\'s not possible to reach some attractions from others. Therefore, the output is \\"NO\\".","solution":"def is_connected(n, m, edges): Determines whether every attraction is reachable from every other attraction. Parameters: n (int): Number of attractions. m (int): Number of pathways. edges (list): List of tuples (ui, vi) representing the pathways. Returns: str: \\"YES\\" if all attractions are reachable from every other attraction, \\"NO\\" otherwise. if n == 1: return \\"YES\\" if m == 0: return \\"NO\\" from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True count += 1 queue.append(neighbor) return count count_reachable = bfs(1) return \\"YES\\" if count_reachable == n else \\"NO\\""},{"question":"In a distant land, there are magic stones placed in a row. Each stone has a non-negative integer engraved on it. Your task is to determine the maximum possible sum of a contiguous sub-array of these stones. # Input: - **Line 1:** Contains an integer n (1 le n le 10^5) - the number of stones. - **Line 2:** Contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) - the integers engraved on the stones. # Output: - Output a single integer — the maximum possible sum of a contiguous sub-array. # Example: **Input:** ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` **Output:** ``` 6 ``` **Explanation:** The maximum possible sum of the sub-array `[4, -1, 2, 1]` is `6`. # Notes: - Ensure optimal performance given the constraints. - The problem requires the implementation of an efficient algorithm to solve within the given limits, like Kadane\'s algorithm.","solution":"def max_sub_array_sum(arr): Uses Kadane\'s algorithm to find the maximum sum of a contiguous subarray. :param arr: List[int] - List of non-negative integers engraved on the stones :return: int - Maximum possible sum of a contiguous subarray max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of non-negative integers representing the amount of water each unit of terrain can store. The terrain is such that it may have peaks and valleys. From the left side of the array, water can flow to the right side. Your task is to find the amount of water that can be trapped after raining. The height array is given such that each element represents the height at that index from the left. You need to calculate the total amount of water that can be captured at different indices of the array. # Input: - An integer array `heights` where `0 ≤ heights[i] ≤ 104`. # Output: - An integer representing the total units of water trapped. # Example: Input: `heights = [0, 1, 0, 2, 1, 0, 3, 1, 0, 1, 2]` Output: `8` # Explanation: Water is trapped in the indices with heights as follows: - Index 2: 1 unit of water - Index 4: 1 unit of water - Index 5: 2 units of water - Index 7: 1 unit of water - Index 8: 2 units of water - Index 9: 1 unit of water Combining these, the total amount of trapped water is 8.","solution":"def trap_water(heights): Calculate the total amount of water that can be trapped. Parameters: heights (list): List of non-negative integers representing the height of terrain. Returns: int: Total units of trapped water. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given a list of strings where each string represents a date in the format \\"YYYY-MM-DD\\". Write a function that finds and returns the most recent date from the given list. If there are multiple dates that are the most recent, return the one that appears first in the list. Input: - A list of strings dates (1 ≤ len(dates) ≤ 1000), each of format \\"YYYY-MM-DD\\". Output: - A single string representing the most recent date. Example: Input: [\\"2021-03-15\\", \\"2021-05-21\\", \\"2021-01-30\\"] Output: \\"2021-05-21\\" Input: [\\"2019-07-10\\", \\"2019-12-01\\", \\"2019-12-01\\"] Output: \\"2019-12-01\\" Note: - We guarantee that all dates are valid and in the provided format. - The return value should be one of the strings from the input list.","solution":"def most_recent_date(dates): Returns the most recent date from a list of date strings in the format \\"YYYY-MM-DD\\". most_recent = dates[0] for date in dates: if date > most_recent: most_recent = date return most_recent"},{"question":"You are the head software engineer tasked with developing a security system for a state-of-the-art museum. As part of this system, you need to design an algorithm to monitor and analyze the visitors\' paths taken inside the museum. The museum is represented as a grid consisting of `n` rows and `m` columns. Each cell in the grid could either be: - Empty (`.`), which means it\'s walkable, - Contain a wall (`#`), which is impassable, - Mark the entrance (`E`), where visitors enter, - Mark an exhibit (`X`), which is a point of interest. Visitors can move either up, down, left, or right from one cell to another, but they can\'t move diagonally, nor can they pass through walls. Each visitor starts at the entrance and moves until they reach an exhibit or have no more cells to walk to. Your task is to write a function that determines the shortest path from the entrance (`E`) to any exhibit (`X`). If no such path exists, return `-1`. **Input** - The first line contains two integers, `n` and `m`, representing the number of rows and columns respectively (1 ≤ n, m ≤ 100). - The next `n` lines each contain `m` characters, representing the museum layout. **Output** - Print the length of the shortest path from the entrance to any exhibit, or `-1` if no such path exists. **Example** Input: ``` 5 5 # #E..# #.# #..X# # ``` Output: ``` 4 ``` Input: ``` 3 3 # #E# # ``` Output: ``` -1 ``` **Note** In the first example, the shortest path from `E` to `X` is through the cells (2, 1) -> (2, 2) -> (3, 2) -> (4, 3), totaling 4 moves. In the second example, there\'s no way to reach any `X`, so the output is `-1`.","solution":"from collections import deque def shortest_path_to_exhibit(n, m, grid): Returns the length of the shortest path from the entrance (\'E\') to any exhibit (\'X\'). If no such path exists, return -1. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find the entrance for i in range(n): for j in range(m): if grid[i][j] == \'E\': start = (i, j) # BFS to find the shortest path queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set([(start[0], start[1])]) while queue: row, col, distance = queue.popleft() if grid[row][col] == \'X\': return distance for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] != \'#\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, distance + 1)) return -1"},{"question":"You are given an array of integers. Your task is to find the maximum product of three distinct elements from the array. The first line of input contains an integer n (3 ≤ n ≤ 100), the size of the array. The second line contains n integers, the elements of the array, where each element is an integer between -1000 and 1000. Output the maximum product of any three distinct elements from the array. # Example Input 5 1 10 -5 1 -100 Output 5000 Explanation: The maximum product is achieved by multiplying 10, -5, and -100.","solution":"def maximum_product_of_three(arr): Returns the maximum product of three distinct elements from the array. arr.sort() n = len(arr) return max(arr[0] * arr[1] * arr[n-1], arr[n-1] * arr[n-2] * arr[n-3]) # Example array example_array = [1, 10, -5, 1, -100] print(maximum_product_of_three(example_array)) # Output should be 5000"},{"question":"In a distant land called AlgoLand, there are n warehouses arranged in a straight line. Each warehouse i has an initial stock of xi units of goods and a capacity to store up to yi units of goods. The headquarters wants to redistribute the goods so that each warehouse ends up with exactly yi units of goods. To redistribute goods, you can perform a transfer operation: choose any two warehouses i and j (i ≠ j) and transfer any number of units of goods from warehouse i to warehouse j, but each transfer takes one unit of time regardless of the number of goods transferred. Your task is to calculate the minimum time required to ensure every warehouse reaches exactly its capacity yi. The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of warehouses. The second line contains n integers x1, x2, ..., xn (0 ≤ xi ≤ 109) — the initial stock of goods in each warehouse. The third line contains n integers y1, y2, ..., yn (0 ≤ yi ≤ 109) — the required stock capacity of each warehouse. Print the minimum time (in units) required for all warehouses to reach exactly their capacity yi. For instance, if there are 4 warehouses with initial stocks [10, 20, 30, 40] and capacities [20, 30, 20, 30], the minimum time required to redistribute the goods is 20 units.","solution":"def minimum_redistribution_time(n, initial_stocks, capacities): Calculate the minimum time required to redistribute goods in warehouses to match their capacities. :param n: Number of warehouses :param initial_stocks: List of initial stocks in each warehouse :param capacities: List of required capacities for each warehouse :return: Minimum redistribution time excess = 0 deficit = 0 for i in range(n): if initial_stocks[i] > capacities[i]: excess += initial_stocks[i] - capacities[i] else: deficit += capacities[i] - initial_stocks[i] # The time required is either the total excess or the total deficit since they will be equal return max(excess, deficit)"},{"question":"A group of scientists in the Galactic Federation have found an ancient artifact that can store sequences of numbers. It’s up to you to determine if a given sequence can be made a palindrome by rearranging its numbers. A palindrome is a sequence that reads the same backward as forward. You are given a sequence of positive integers. Determine whether it is possible to rearrange the sequence to create a palindrome. # Input: The first line of the input contains a single integer T (1 ≤ T ≤ 100) - the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100) - the length of the sequence. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) - the elements of the sequence. # Output: For each test case, output \\"YES\\" if it is possible to rearrange the sequence to form a palindrome; otherwise, output \\"NO\\". # Example: Input: ``` 3 5 1 2 3 2 1 4 1 2 2 3 6 1 2 3 3 2 1 ``` Output: ``` YES NO YES ``` # Explanation: - In the first test case, the sequence `1 2 3 2 1` is already a palindrome. - In the second test case, there is no way to rearrange `1 2 2 3` to form a palindrome. - In the third test case, the sequence `1 2 3 3 2 1` is already a palindrome.","solution":"def can_form_palindrome(sequences): results = [] for sequence in sequences: if is_palindromable(sequence): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def is_palindromable(sequence): from collections import Counter counter = Counter(sequence) odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given a grid with n rows and m columns filled with integers. You need to perform two types of operations on this grid: 1. Add a value to all elements in a subgrid. 2. Find the maximum value in a subgrid. A subgrid is defined by its top-left and bottom-right corners (1-based indices): from (r1, c1) to (r2, c2). The input format is as follows: - The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. - The next n lines contain m integers each representing the grid elements. - The following line contains an integer q (1 leq q leq 100000) — the number of queries. - Each of the next q lines contains a query: - For an addition query, the format is `1 r1 c1 r2 c2 val` — add `val` (-10^4 leq val leq 10^4) to all elements in the specified subgrid. - For a max query, the format is `2 r1 c1 r2 c2` — find the maximum value in the specified subgrid. Output the result for each max query. # Example Input ``` 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 3 1 1 1 2 2 5 2 1 1 3 3 1 2 2 4 4 -3 ``` Output ``` 13 ``` # Note - Consider efficient data structures or algorithms to handle the queries within the constraints, such as 2D prefix sum array for range updates and queries.","solution":"class GridOperations: def __init__(self, grid): self.grid = grid self.n = len(grid) self.m = len(grid[0]) self.addition_grid = [[0] * (self.m + 1) for _ in range(self.n + 1)] def _add_value(self, r1, c1, r2, c2, val): for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): self.addition_grid[i][j] += val def _find_max(self, r1, c1, r2, c2): max_value = float(\'-inf\') for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): max_value = max(max_value, self.grid[i][j] + self.addition_grid[i][j]) return max_value def process_queries(n, m, grid, queries): operations = GridOperations(grid) results = [] for query in queries: if query[0] == 1: _, r1, c1, r2, c2, val = query operations._add_value(r1, c1, r2, c2, val) elif query[0] == 2: _, r1, c1, r2, c2 = query result = operations._find_max(r1, c1, r2, c2) results.append(result) return results"},{"question":"Barbara is organizing a book fair and she wants to arrange the stalls in such a manner that no two stalls with the same genre are adjacent to each other. She plans to categorize each stall by a single genre and place them along a single row. The book fair has n stalls and there are m different genres numbered from 1 to m. Each stall must have exactly one genre assigned to it. Formally, an arrangement of stalls is valid if for any two adjacent stalls, the genres of the books are different. Barbara wants to determine how many distinct valid arrangements of the stalls are possible. Given n stalls and m genres, your task is to calculate the number of valid arrangements, where each of the k-th stall has a genre assigned without any two adjacent stalls having the same genre. Since the number of valid arrangements can be large, return the result modulo 10^9 + 7. The first line of input contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^2) — the number of stalls and the number of genres. Output a single integer, the number of valid arrangements modulo 10^9 + 7. Examples: Input: 3 3 Output: 12 Input: 4 2 Output: 2 Note: In the first example, there are 3 stalls and 3 genres. One possible valid arrangement is (1, 2, 3). Another valid arrangement is (3, 2, 1). In total, there are 12 valid arrangements. In the second example, there are 4 stalls and 2 genres. The only possible valid arrangements are (1, 2, 1, 2) and (2, 1, 2, 1). Therefore, there are 2 valid arrangements.","solution":"def count_valid_arrangements(n, m): MOD = 10**9 + 7 if m == 1: # if there\'s only 1 genre, no valid arrangement can exist where adjacent stalls have different genres return 0 if n > 1 else 1 elif n == 1: # if there\'s only 1 stall, all genres are valid return m # Using the recurrence relation: # f(n, m) = m * (m-1)^(n-1) # Explanation: # - The first stall can have m choices. # - Each of the next (n-1) stalls can have (m-1) choices (since it can\'t be the same as the previous stall). result = m * pow(m - 1, n - 1, MOD) % MOD return result"},{"question":"You are given a string s containing only lowercase letters. A good subsequence is a subsequence that contains distinct characters and each character appears exactly once in the subsequence. Your task is to count how many distinct good subsequences can be formed from the string s. A subsequence is a sequence that can be derived from another sequence by deleting some characters without changing the order of the remaining elements. The first line of the input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000). For each test case, output the number of good subsequences. Example Input: ``` 3 abc aaa abac ``` Example Output: ``` 7 3 7 ``` Explanation: - For the first test case \\"abc\\", the good subsequences are: a, b, c, ab, ac, bc, and abc. - For the second test case \\"aaa\\", the good subsequences are: a, a, and a. - For the third test case \\"abac\\", the good subsequences are similar to \\"abc\\" because the letter c only appears once.","solution":"def count_good_subsequences(s): Returns the number of distinct good subsequences in the given string s. unique_chars = set(s) n = len(unique_chars) return (1 << n) - 1 def process_test_cases(t, test_cases): Processes multiple test cases and returns results as a list. results = [] for s in test_cases: results.append(count_good_subsequences(s)) return results"},{"question":"You are given an array of integers representing the heights of a line of buildings. Your task is to find the number of pairs of buildings (i, j) such that the height of the building at position i is less than the height of the building at position j and the distance between these buildings (|i - j|) is greater than a given threshold d. In other words, you need to find pairs (i, j) such that: 1. height[i] < height[j] 2. |i - j| > d The first line of input contains two integers n (1 ≤ n ≤ 100,000) and d (1 ≤ d ≤ n), representing the number of buildings and the distance threshold respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi represents the height of the building at position i. Output a single integer representing the number of valid pairs of buildings that satisfy the conditions mentioned above. # Example Input ``` 5 2 1 5 3 4 2 ``` Output ``` 3 ``` Explanation In this example, there are three valid pairs: - (1, 4) – Building at position 1 with height 1 is less than building at position 4 with height 4, and their distance |1 - 4| = 3 > 2. - (2, 5) – Building at position 2 with height 5 is less than building at position 5 with height 2, and their distance |2 - 5| = 3 > 2. - (3, 5) – Building at position 3 with height 3 is less than building at position 5 with height 2, and their distance |3 - 5| = 2 > 2 (threshold).","solution":"def count_valid_pairs(n, d, heights): count = 0 for i in range(n): for j in range(n): if i != j and abs(i - j) > d and heights[i] < heights[j]: count += 1 return count"},{"question":"A tech start-up company wants to devise a new data compression algorithm. As a preliminary experiment, they want to identify recurring patterns in a sequence of characters. Given a sequence of length n, the company wishes to find the longest contiguous subsequence that appears at least twice in the original sequence. Write a function that receives the sequence and returns the length of the longest subsequence that appears more than once. The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains a string s of length n consisting of lowercase Latin letters. Output the length of the longest contiguous subsequence that appears at least twice. If there is no such subsequence, output 0. **Example:** Input: 7 banana Output: 3 Explanation: \'ana\' is the longest subsequence that appears more than once in the string \'banana\'. Therefore, the length is 3.","solution":"def longest_repeated_subsequence(n, s): def check(l): seen = set() for i in range(n - l + 1): substr = s[i:i + l] if substr in seen: return True seen.add(substr) return False low, high = 1, n result = 0 while low <= high: mid = (low + high) // 2 if check(mid): result = mid low = mid + 1 else: high = mid - 1 return result"},{"question":"Write a function that takes a string containing a datetime in the format \\"YYYY-MM-DD HH:MM:SS\\" and returns the same datetime in the format \\"Month Day, Year Hour:Minute:Second AM/PM\\". For example, the string \\"2023-10-05 16:30:10\\" should be converted to \\"October 5, 2023 4:30:10 PM\\". The input string will always be a valid datetime in the specified format. Function signature: `def convert_datetime_format(datetime_str: str) -> str:` Example: - Input: \\"2023-10-05 16:30:10\\" - Output: \\"October 5, 2023 4:30:10 PM\\"","solution":"from datetime import datetime def convert_datetime_format(datetime_str: str) -> str: Converts datetime from \\"YYYY-MM-DD HH:MM:SS\\" to \\"Month Day, Year Hour:Minute:Second AM/PM\\" Args: datetime_str (str): A string containing a datetime in the format \\"YYYY-MM-DD HH:MM:SS\\" Returns: str: The same datetime in the format \\"Month Day, Year Hour:Minute:Second AM/PM\\" dt = datetime.strptime(datetime_str, \'%Y-%m-%d %H:%M:%S\') return dt.strftime(\'%B %d, %Y %I:%M:%S %p\')"},{"question":"You are given an array of integers representing the heights of buildings in a street. The length of the array is n, where 3 ≤ n ≤ 100,000. Each building has a unique height, and the heights are given in no particular order. You need to find two non-adjacent buildings such that the height difference between them is the maximum possible. Formally, find indices i and j (1 ≤ i, j ≤ n and |i - j| > 1) such that |height[i] - height[j]| is maximized. Your task is to calculate and print this maximum height difference. The first line contains a single integer n (3 ≤ n ≤ 100,000) — the number of buildings. The second line contains n integers height[1], height[2], ..., height[n] (1 ≤ height[i] ≤ 10^9), the heights of the buildings. Output a single integer — the maximum height difference between any two non-adjacent buildings. For example, if the input array is [1, 8, 3, 2, 7, 6], the optimal choice would be between buildings with heights 1 and 7, which gives a height difference of 6.","solution":"def max_height_difference(heights): Finds the maximum height difference between any two non-adjacent buildings. Parameters: heights (list): List of building heights. Returns: int: The maximum height difference. # Find the maximum and minimum heights in the list max_height = max(heights) min_height = min(heights) # The result is the max difference between the max and min heights return max_height - min_height"},{"question":"You are given a string s consisting of lowercase alphabets. You need to determine if you can make all characters in the string the same by performing the following operation at most once: - Replace any single character in the string with any other lowercase alphabet. Output \\"YES\\" if it is possible to make all characters the same by performing the operation at most once. Otherwise, output \\"NO\\". **Example 1:** Input: \\"aaa\\" Output: \\"YES\\" **Example 2:** Input: \\"aab\\" Output: \\"YES\\" **Example 3:** Input: \\"abc\\" Output: \\"NO\\"","solution":"def can_make_all_characters_same(s): Returns \\"YES\\" if it\'s possible to make all characters in the string the same by performing at most one character replacement, otherwise returns \\"NO\\". from collections import Counter char_count = Counter(s) if len(char_count) == 1: # All characters are already the same return \\"YES\\" if len(char_count) == 2: # Check for the case where one character can become another character # e.g., aab -> aaa or aab -> bbb (1 replacement needed) counts = list(char_count.values()) if counts[0] == 1 or counts[1] == 1: return \\"YES\\" return \\"NO\\""},{"question":"A mobile app development company is offering n different subscription plans. Each plan has certain features that are of interest: - Number of hours of technical support per month - Amount of storage provided in GB - Number of team member accounts included - Monthly cost of the plan The company decides to discard any subscription plan if all of its features are strictly less than those of some other plan. From the remaining plans, they want to find the one with the highest number of team member accounts. If there are multiple such plans, the one with the lowest monthly cost should be chosen. As the company\'s software engineer, you are asked to write a program to find the best subscription plan based on these criteria. The first line of input contains the integer n (1 ≤ n ≤ 100), the total number of subscription plans. The next n lines each describe a plan with the following format: support storage accounts cost, where support is the number of hours of technical support, storage is the amount of storage in GB, accounts is the number of team member accounts, and cost is the monthly cost of the plan. All plans have unique costs. Output the number of the best subscription plan. The plans are numbered from 1 to n according to the order in which they are given in the input. Here is an example input and output for clarification: Input: 5 24 50 5 100 30 100 10 200 24 50 5 80 40 100 8 150 24 70 7 120 Output: 4","solution":"def find_best_plan(plans): # Filter out plans that are strictly worse than another plan filtered_plans = [] for i, plan1 in enumerate(plans): worse = False for plan2 in plans: if (plan1 != plan2 and plan1[0] < plan2[0] and plan1[1] < plan2[1] and plan1[2] < plan2[2] and plan1[3] > plan2[3]): worse = True break if not worse: filtered_plans.append((plan1, i + 1)) # Find the best plan based on the remaining plans if not filtered_plans: return None best_plan = filtered_plans[0] for plan in filtered_plans: if (plan[0][2] > best_plan[0][2] or (plan[0][2] == best_plan[0][2] and plan[0][3] < best_plan[0][3])): best_plan = plan return best_plan[1] def best_subscription_plan(n, plans_list): plans = [tuple(map(int, plan.split())) for plan in plans_list] return find_best_plan(plans)"},{"question":"You have recently begun working with a logistics company that processes numerous records throughout the day. Each record consists of the current timestamp in \'HH:MM:SS\' format when an event occurs, followed by a unique event identifier. Throughout the day, operators might have missed to log an event properly, causing issues in tracking event sequences. The company wants a utility that will help find out if there is any duplication in event records based on their unique event identifiers. If there is a duplicated event identifier in the log, you are required to highlight that the log is invalid. Given the log records, write a program that checks if there are duplicate event identifiers in the log. The first line of input contains a single integer N (1 ≤ N ≤ 105), representing the number of event records. Each of the following N lines contains a timestamp and an event identifier separated by a space. Print \'INVALID LOG\' (without the quotes) if any duplicate event identifiers are found, otherwise print \'VALID LOG\' (without the quotes). Example Input: 5 12:00:00 E1 12:05:00 E2 12:10:00 E3 12:15:00 E2 12:20:00 E4 Example Output: INVALID LOG","solution":"def check_log_validity(log_records): Returns \'INVALID LOG\' if there are duplicate event identifiers, otherwise \'VALID LOG\'. events_seen = set() for record in log_records: time, event_id = record.split() if event_id in events_seen: return \'INVALID LOG\' events_seen.add(event_id) return \'VALID LOG\'"},{"question":"A string is called diverse if it consists only of distinct characters. You are provided a string s and an integer k. Your goal is to determine how many contiguous substrings of length k in the string s are diverse. - The first line contains the string s (1 ≤ |s| ≤ 105) — the string containing lowercase English letters. - The second line contains integer k (1 ≤ k ≤ |s|) — the length of the substrings to consider. Print the number of diverse substrings of length k in the string s. Note to the first test. For the string \\"abcba\\" and k = 3, the substrings are \\"abc\\", \\"bcb\\", \\"cba\\" out of which \\"abc\\" and \\"cba\\" are diverse, so the answer is 2. Note to the second test. For the string \\"aaaaa\\" and k = 2, the substrings are \\"aa\\", \\"aa\\", \\"aa\\", \\"aa\\" none of which are diverse, so the answer is 0.","solution":"def count_diverse_substrings(s, k): Returns the number of substrings of length k in string s that consist of distinct characters. diverse_count = 0 # Loop through substrings of length k for i in range(len(s) - k + 1): substring = s[i:i+k] if len(set(substring)) == k: diverse_count += 1 return diverse_count"},{"question":"Valera is practicing for the upcoming Berland triathlon and needs to transition efficiently between his swimming, cycling, and running activities. Each activity happens on a linear path that starts from the origin (0, 0) and extends indefinitely in the positive direction along the x-axis. Valera swims for s meters, then immediately transitions to cycling for c meters, and finally runs for r meters. Each of these activities needs to be divided into small segments such that each segment is exactly d meters long. Your task is to determine the coordinates at each transition point where Valera needs to switch from one segment to the next. For simplicity, we will assume that Valera transitions instantly at the exact distance points without any delay. The first line contains three space-separated real numbers s, c, and r (1 ≤ s, c, r ≤ 105), given with precision till 4 decimal digits after the decimal point. These numbers denote the distances Valera swims, cycles, and runs respectively. The second line contains a single real number d (1 ≤ d ≤ 105), also given with precision till 4 decimal digits after the decimal point, indicating the length of each segment. Print the coordinates (x, y) for each transition point where Valera switches from one segment to the next, starting from (0, 0) and ending at the last segment within the total distance covered. All transitions happen along the x-axis. The format of each coordinate should be in a new line with the real number values rounded to 4 decimal places. Note that for this problem, the amount of output data is expected to be large, so ensure your output method is efficient. Example Input: 10.0000 15.0000 20.0000 5.0000 Example Output: 5.0000 0.0000 10.0000 0.0000 15.0000 0.0000 20.0000 0.0000 25.0000 0.0000 30.0000 0.0000 35.0000 0.0000 40.0000 0.0000 45.0000 0.0000","solution":"def generate_transition_points(s, c, r, d): Generates the coordinates at each transition point where Valera transitions from one segment to the next. Each segment is exactly d meters long, starting from (0, 0). :param s: Distance Valera swims (meters) :param c: Distance Valera cycles (meters) :param r: Distance Valera runs (meters) :param d: Length of each segment (meters) :return: List of transition points as tuples (x, y) points = [] total_distance = s + c + r current_distance = 0 while current_distance + d <= total_distance: current_distance += d points.append((round(current_distance, 4), 0.0000)) return points def format_transition_points(points): Formats the transition points for output. :param points: List of transition points as tuples (x, y) :return: List of strings representing the coordinates in required format return [f\\"{x:.4f} {y:.4f}\\" for x, y in points]"},{"question":"You are given a grid with n rows and m columns where each cell contains either a \'.\' (empty cell) or a \'*\' (blocked cell). You start at the top-left corner of the grid and your goal is to reach the bottom-right corner. You can move to an adjacent cell directly to the right or directly downward, and you cannot pass through blocked cells. Write a program that calculates the number of distinct paths from the top-left corner to the bottom-right corner. If there is no valid path, return 0. Since the number of paths can be large, return the result modulo 10^9 + 7. # Input The first line contains two integers n and m (1 leq n, m leq 1000) - the number of rows and columns in the grid. The following n lines contain m characters each, representing the grid. # Output Print a single integer representing the number of distinct paths modulo 10^9 + 7. # Example Input ``` 3 3 ... .*. ... ``` Output ``` 2 ``` In the given input, the number of distinct paths from the top-left corner to the bottom-right corner is 2: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right # Note - You are guaranteed that the top-left corner and bottom-right corner are always empty cells (\'.\'). - The value 10^9 + 7 is the required modulo for the result.","solution":"MOD = 10**9 + 7 def num_paths(grid): n = len(grid) m = len(grid[0]) # Initialize the dp array dp = [[0] * m for _ in range(n)] # The starting cell dp[0][0] = 1 if grid[0][0] == \'.\' else 0 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == \'*\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[-1][-1]"},{"question":"You are given a string representing a mathematical expression that may include digits, the operators \'+\' (addition) and \'*\' (multiplication), and parentheses for grouping subexpressions. Your task is to implement a function that evaluates the expression and returns the result. The expression is well-formed and adheres to the usual precedence rules: multiplication has higher precedence than addition, and parentheses override the default precedence. Write a function `evaluate_expression(expression: str) -> int` that takes a string `expression` as input and returns the evaluation result as an integer. The input string `expression` contains only digits `0-9`, operators `+` and `*`, and parentheses `()` with no spaces. The length of the expression string is between 1 and 1000 characters. # Example ```python print(evaluate_expression(\\"2+3*4\\")) # should return 14 print(evaluate_expression(\\"2*(3+4)\\")) # should return 14 print(evaluate_expression(\\"10+2*6\\")) # should return 22 print(evaluate_expression(\\"100*(2+12)\\")) # should return 1400 print(evaluate_expression(\\"100*(2+12)/14\\")) # should return 100 ``` # Constraints - The input string is non-empty and will always be a valid expression. - The division operator \'/\' will not appear in the input. - The input does not contain any whitespace characters. - You can assume the expression will not result in values larger than the maximum 32-bit signed integer range. # Note: Make sure that your algorithm runs efficiently to handle input sizes up to the maximum constraint.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression involving + (addition), * (multiplication) and parentheses for grouping, adhering to usual precedence rules. import operator import re def parse_expression(expression): roman_to_int = { \\"+\\": operator.add, \\"*\\": operator.mul } def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() values.append(roman_to_int[operator](left, right)) def higher_precedence(op1, op2): precedences = {\'+\': 1, \'*\': 2} return precedences[op1] >= precedences[op2] # Tokenize the input string tokens = re.findall(r\'d+|+|*|(|)\', expression) values, operators = [], [] for token in tokens: if token.isdigit(): values.append(int(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # Remove the \'(\' from stack else: # operator: + or * while (operators and operators[-1] in \'+*\' and higher_precedence(operators[-1], token)): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0] return parse_expression(expression)"},{"question":"Peter is planning to go on a treasure hunt in a mysterious forest. There are `n` locations in the forest, numbered from 1 to `n`. Peter has a map that shows paths between these locations. Each path connects exactly two different locations and has a certain length. Peter wants to find out if there exists a way to visit each location exactly once, starting and ending at the same location. This sequence of locations is known as a Hamiltonian cycle. Given the number of locations `n` and a list of paths with their lengths, determine if a Hamiltonian cycle exists in the forest. The first line contains a single integer `n` (1 ≤ n ≤ 20) — the number of locations. The second line contains a single integer `m` (0 ≤ m ≤ n*(n-1)/2) — the number of paths. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100) — indicating there is a path of length `w` between location `u` and location `v`. Print \\"YES\\" if there exists a Hamiltonian cycle, otherwise print \\"NO\\".","solution":"from itertools import permutations def find_hamiltonian_cycle(n, m, paths): if n == 1: return \\"NO\\" adj_matrix = [[0] * n for _ in range(n)] for u, v, w in paths: adj_matrix[u-1][v-1] = w adj_matrix[v-1][u-1] = w # Generate all permutations of the nodes nodes = list(range(1, n)) for perm in permutations(nodes): cycle = [0] + list(perm) + [0] valid = True for i in range(n): if adj_matrix[cycle[i]][cycle[i + 1]] == 0: valid = False break if valid: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string S of length n consisting of lowercase English characters. A character is defined as **semantically-rich** if it appears consecutively more than once in any substring of the string. Your task is to determine the number of semantically-rich substrings of the given string. The first line of input will be an integer n (1 leq n leq 200000) — the length of string S. The second line contains the string S consisting of lowercase English letters. Print one integer — the number of semantically-rich substrings of the string. Example: Input: 7 abbbcde Output: 6 Explanation: The semantically-rich substrings are: \\"bb\\", \\"bbb\\", \\"bb\\", \\"bbb\\", \\"bbc\\", \\"bbc\\".","solution":"def count_semantically_rich_substrings(n, s): count = 0 i = 0 while i < n: j = i current_char = s[i] # Find length of the contiguous segment of same character while j < n and s[j] == current_char: j += 1 length = j - i # If contiguous segment length is greater than 1, it contributes to semantically rich substrings if length > 1: count += (length * (length - 1)) // 2 i = j return count"},{"question":"You are given a series of containers, each with a certain capacity, filled with a different number of shapes. Each shape can fit in any container as long as there is enough space left in the container. Your task is to determine if you can reorder the shapes such that each container is exactly full. More formally, you are given two lists: `containers` and `shapes`. The list `containers` contains integers where each integer represents the capacity of a container. The list `shapes` contains integers where each integer represents the number of shapes initially in a separate container. You must determine if it\'s possible to redistribute the shapes among the containers such that each container is filled exactly to its capacity. For example, if one container has a capacity of 10 and another container has a capacity of 20, then the sum of shapes that go into these two containers must be 30 for them to be evenly distributed. # Input - The first line contains an integer `n`, the number of containers and shapes (1 ≤ n ≤ 50). - The second line contains `n` integers, the capacities of the containers. - The third line contains `n` integers, the initial number of shapes in each container. # Output - Print \\"YES\\" if it is possible to reorder the shapes to exactly fill all containers; otherwise, print \\"NO\\". # Example Input ``` 3 10 20 30 15 15 30 ``` Output ``` YES ``` Explanation One way to reorder the shapes is to have 10 shapes in the first container, 20 shapes in the second container, and 30 shapes in the third container which fits perfectly. Thus the output should be \\"YES\\". Another example: Input ``` 2 15 25 10 20 ``` Output ``` NO ``` Explanation There is no way to redistribute the shapes such that both containers are filled exactly (as one will always either be overfilled or not completely filled), so the output should be \\"NO\\". # Constraints - The sum of the integers in `containers` and `shapes` will be within the range of a 32-bit signed integer.","solution":"def can_reorder_shapes(containers, shapes): Determines if it\'s possible to redistribute the shapes such that all containers are exactly filled. Args: containers: list of integers representing the capacities of the containers shapes: list of integers representing the initial number of shapes in each container Returns: A string \\"YES\\" if it is possible to reorder the shapes to exactly fill all containers, otherwise \\"NO\\". return \\"YES\\" if sum(containers) == sum(shapes) else \\"NO\\""},{"question":"Aria enjoys organizing events and planning seating arrangements. She is organizing a round table event where people will be seated around a circular table, all facing the center. Aria wants to carefully assign seats to ensure maximum harmony among the guests, considering their preferences. Each guest has a list of other guests they prefer to sit next to. The goal is to arrange the guests in such a way that the total number of neighboring preferences is maximized. Two guests are considered neighbors if they are seated directly next to each other. Given n guests, and a list of their preferences, help Aria determine the seating arrangement that maximizes the number of satisfied neighboring preferences. Output the maximum number of satisfied preferences and the seating arrangement. If there are multiple arrangements with the same number of satisfied preferences, you can output any one of them. The first line contains an integer n (3 ≤ n ≤ 8) — the number of guests. Each of the next n lines contains the preferences of the guests. The i-th line starts with an integer mi (0 ≤ mi ≤ n-1) — the number of preferences for the i-th guest, followed by mi integers — the indices of the guests (1-indexed) whom the i-th guest prefers to sit next to. Output the maximum number of satisfied preferences and the seating arrangement. The seating arrangement should be given as a permutation of integers from 1 to n, representing the guest indices in clockwise order. If there are multiple optimal seating arrangements, you may output any of them. Example input: ``` 4 2 2 3 1 1 1 4 1 1 ``` Example output: ``` 3 1 2 3 4 ```","solution":"from itertools import permutations def count_preferences(seating, preferences): count = 0 n = len(seating) for i in range(n): left = seating[i] right = seating[(i + 1) % n] if right in preferences[left]: count += 1 if left in preferences[right]: count += 1 return count def maximize_harmony(n, preferences): prefs = [[] for _ in range(n)] for i in range(n): mi, *prefs_list = preferences[i] for pref in prefs_list: prefs[i].append(pref-1) max_pref_count = -1 best_seating = [] for perm in permutations(range(n)): current_count = count_preferences(perm, prefs) if current_count > max_pref_count: max_pref_count = current_count best_seating = perm best_seating = [x + 1 for x in best_seating] return max_pref_count, best_seating print(maximize_harmony(4, [(2, 2, 3), (1, 1), (1, 4), (1, 1)]))"},{"question":"You are given a string containing a list of temperatures recorded over a week in Celsius, separated by spaces. Your task is to find the maximum difference between any two consecutive temperatures from this list. The input consists of a single string containing 7 space-separated integers, each representing the temperature recorded on that particular day. Output a single integer — the maximum difference between any two consecutive temperatures from the given list. **Example:** Input: ``` 23 21 19 22 20 25 18 ``` Output: ``` 7 ``` Explanation: The differences between consecutive temperatures are as follows: 2, 2, 3, 2, 5, and 7. The maximum difference is 7.","solution":"def max_temperature_difference(temperatures): Returns the maximum difference between any two consecutive temperatures from the given list. :param temperatures: A string containing 7 space-separated integers. :return: The maximum difference as an integer. # Convert the temperatures string to a list of integers temps = list(map(int, temperatures.split())) # Calculate the differences between consecutive temperatures differences = [abs(temps[i] - temps[i + 1]) for i in range(len(temps) - 1)] # Return the maximum difference return max(differences)"},{"question":"A popular e-commerce company wants to analyze the customer transaction patterns. For each day, they have a record of the number of transactions made. However, the data has some noise, meaning a few incorrect records have crept in. A correct record for any day should denote the number of transactions as a positive integer greater than zero. Unfortunately, some records might be zero or negative due to system errors. Your task is to remove a minimal number of elements from the list of transactions so that the remaining elements form a strictly increasing sequence of positive integers. Given an integer array a of length n, where a[i] denotes the number of transactions on the i-th day, find the length of the longest strictly increasing subsequence of positive integers. # Example **Input:** ``` 6 3 -1 4 6 1 2 ``` **Output:** ``` 3 ``` **Explanation:** To obtain the longest strictly increasing subsequence of positive integers, remove -1 and 1. The resulting subsequence is [3, 4, 6] which has a length of 3. # Constraints - 1 le n le 2 times 10^5 - -10^9 le a[i] le 10^9 # Input - The first line contains a single integer n denoting the number of elements in the array. - The second line contains n integers, the elements of array a. # Output - Output a single integer, the length of the longest strictly increasing subsequence of positive integers. # Note The sequence does not need to be contiguous in the input list, but they must form a strictly increasing order.","solution":"def length_of_lis(nums): This function finds the length of the longest strictly increasing subsequence of positive integers from the given list of integers nums. # Filter the input list to include only positive integers nums = [x for x in nums if x > 0] if not nums: return 0 from bisect import bisect_left lis = [] # This will store our increasing subsequence for num in nums: pos = bisect_left(lis, num) # If num is larger than any element in lis, append it to the end if pos == len(lis): lis.append(num) # Otherwise, replace the first element in lis which is larger than or equal to num else: lis[pos] = num return len(lis)"},{"question":"You are given an array of n integers (a1, a2, ..., an). Two types of operations can be performed on the array: 1. Select any subarray and reverse its order. 2. Select any two disjoint subarrays of equal length and swap them. You are given a target array of n integers (b1, b2, ..., bn). Determine if it is possible to transform the initial array into the target array using these operations. The first line contains a positive integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers (a1, a2, ..., an) — the initial array. The third line contains n integers (b1, b2, ..., bn) — the target array. If it is possible to transform the initial array into the target array using the described operations, output YES; otherwise, output NO.","solution":"def can_transform(n, a, b): Determines if it is possible to transform array a into array b using the allowed operations. Args: n (int): The number of elements in the array. a (list): The initial array. b (list): The target array. Returns: str: \\"YES\\" if it is possible to transform a into b, otherwise \\"NO\\". # Check if both arrays have the same elements with the same frequency from collections import Counter if Counter(a) == Counter(b): return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, write a function to determine if it\'s possible to partition the array into two subsets such that the sum of elements in both subsets is equal. If possible, return `True`, otherwise return `False`. # Input format: - The input consists of a single integer `n` (1 le n le 100), the number of elements in the array. - A second line follows with `n` space-separated integers representing the elements of the array. Each integer will be in the range 1 le arr[i] le 100. # Output format: - Output a single line containing `True` or `False` indicating whether it\'s possible to partition the array into two subsets with equal sum. # Example: Input: ``` 4 1 5 11 5 ``` Output: ``` True ``` Explanation: The array can be partitioned as `[1, 5, 5]` and `[11]` both with the sum of `11`.","solution":"def can_partition(nums): Determine if it\'s possible to partition the array into two subsets such that the sum of elements in both subsets is equal. total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False subset_sum = total_sum // 2 n = len(nums) # Initialize dp array where dp[i] means whether subset sum i can be formed or not dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[subset_sum]"},{"question":"Polycarpus has an enormous watermelon that he wants to divide among his friends. The weight of the watermelon is represented by a positive integer `w`. He wants to know if he can divide the watermelon into two parts such that both parts weigh even numbers. For instance, if the watermelon weighs 8 kilograms, he could divide it into two even parts weighing 4 kilograms each. However, if the watermelon weighs 7 kilograms, it\'s impossible to divide it into two parts with even weights. Write a program to determine if the watermelon can be divided into two parts, both of which have even weights. The first and only line of input contains the weight of the watermelon, a positive integer `w` (1 ≤ `w` ≤ 100). Print \\"YES\\" (without quotes) if you can divide the watermelon into two parts with even weights, otherwise print \\"NO\\" (without quotes).","solution":"def can_divide_watermelon_evenly(w): Determines if the watermelon can be divided into two parts with even weights. Parameters: w (int): Weight of the watermelon. Returns: str: \\"YES\\" if the watermelon can be divided into two even parts, \\"NO\\" otherwise. if w > 2 and w % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Imagine you are designing a new operating system for a computer that prioritizes the execution of tasks based on their importance. Each task is defined by a start time, a duration, and a priority level. The operating system must select and execute tasks in such a way that maximizes the total priority of tasks completed within a given time limit. You are given an integer `T`, which represents the total available time, and a list of tasks where each task is represented by a tuple `(start_time, duration, priority)`. The operating system can only execute one task at a time, and a task can only be executed if it starts at or after its `start_time` and completes within the total available time `T`. Write a function `max_priority_tasks(T, tasks)` that returns the maximum total priority of tasks that can be executed within the time limit `T`. **Input:** - An integer `T` (1 <= T <= 1000) - the total available time. - A list of tuples `tasks`, where each tuple contains three integers `(start_time, duration, priority)` representing the start time, duration, and priority of a task. The length of `tasks` can be up to 100. **Output:** - An integer representing the maximum total priority of tasks that can be completed within the given time `T`. **Example:** ```python def max_priority_tasks(T, tasks): # Your code goes here # Sample Inputs print(max_priority_tasks(10, [(0, 3, 5), (1, 2, 8), (4, 7, 3), (6, 4, 6)])) # Expected output: 14 (tasks with priority 8 at time 1 and priority 6 at time 6) ``` **Explanation:** - Task 1: Can start at time 0, last 3 units of time, and has a priority of 5. - Task 2: Can start at time 1, last 2 units of time, and has a priority of 8. - Task 3: Can start at time 4, last 7 units of time, and has a priority of 3. - Task 4: Can start at time 6, last 4 units of time, and has a priority of 6. The maximum priority can be achieved by executing Task 2 (priority 8) and Task 4 (priority 6), resulting in a total priority of 14. Task 3 cannot be executed completely within the given time T. Develop an efficient algorithm and implement the function to maximize the total priority of tasks that can be executed.","solution":"def max_priority_tasks(T, tasks): # Sort tasks by end time (start time + duration) tasks.sort(key=lambda x: x[0] + x[1]) dp = [0] * (T + 1) for start_time, duration, priority in tasks: end_time = start_time + duration if end_time > T: continue for t in range(T, end_time - 1, -1): if t >= start_time + duration: dp[t] = max(dp[t], dp[start_time] + priority) return max(dp) # Example usage print(max_priority_tasks(10, [(0, 3, 5), (1, 2, 8), (4, 7, 3), (6, 4, 6)])) # Expected output: 14 (tasks with priority 8 at time 1 and priority 6 at time 6)"},{"question":"You are given a directed graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to calculate the shortest path from a given source node to all other nodes. If a node is unreachable from the source, its distance should be considered infinity. # Input - The first line contains two integers, n and m (1 le n le 1000, 0 le m le 10^4), representing the number of nodes and edges respectively. - The next m lines each contain three integers, u, v, and w (1 le u, v le n, -10^6 le w le 10^6), indicating an edge from node u to node v with weight w. - The last line contains a single integer, s (1 le s le n), representing the source node. # Output - Output a single line containing n integers. The i-th integer should be the minimum distance from the source node s to node i. If a node is unreachable, output \\"INF\\" for that node. # Example Input ``` 5 6 1 2 -2 1 3 4 2 3 3 2 4 2 4 2 1 4 5 -1 1 ``` Output ``` 0 -2 1 0 -1 ``` Explanation: - The shortest path from node 1 to 2 is -2. - The shortest path from node 1 to 3 is 1 (1 to 2 to 3). - The shortest path from node 1 to 4 is 0 (1 to 2 to 4). - The shortest path from node 1 to 5 is -1 (1 to 2 to 4 to 5). - Node 1\'s shortest path to itself is always 0. Note: Negative weights are allowed but there should be no negative weight cycle in the input graph.","solution":"import heapq def dijkstra(n, edges, s): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: curr_distance, node = heapq.heappop(priority_queue) if curr_distance > distances[node]: continue for neighbor, weight in graph[node]: distance = curr_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) result = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): result.append(\'INF\') else: result.append(str(distances[i])) return result def shortest_path(n, m, edge_list, s): return dijkstra(n, edge_list, s)"},{"question":"You are given a list of integers representing the heights of buildings in a row. Each building has a different height and is represented by a unique integer in the list. You need to find the number of buildings that are visible when looking from the leftmost building to the rightmost building. A building is visible if there are no taller buildings blocking the view from the left. Write a function `count_visible_buildings(heights)` that takes a list of integers `heights` as input and returns the number of visible buildings when looking from the left to the right. # Input - A list of integers `heights` where each integer represents the height of a building. The length of the list is between 1 and 10^5, and each height is between 1 and 10^9. # Output - An integer representing the number of visible buildings from the left. # Example ```python def count_visible_buildings(heights): # Your code here # Example 1 heights = [3, 7, 8, 3, 6, 1] print(count_visible_buildings(heights)) # Output: 3 # Example 2 heights = [1, 2, 3, 4, 5] print(count_visible_buildings(heights)) # Output: 5 # Example 3 heights = [5, 4, 3, 2, 1] print(count_visible_buildings(heights)) # Output: 1 ``` # Explanation - In Example 1, the visible buildings have heights [3, 7, 8]. There are no taller buildings blocking the view for these buildings. - In Example 2, all buildings are visible because each subsequent building is taller than the previous one. - In Example 3, only the first building is visible because each subsequent building is shorter. Develop an efficient algorithm to solve the problem within the constraints.","solution":"def count_visible_buildings(heights): Returns the number of visible buildings from the left to the right. Args: heights (list of int): List of integers representing the heights of buildings. Returns: int: The number of visible buildings. if not heights: return 0 visible_count = 0 max_height = float(\'-inf\') for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"You are given a calendar application that automatically schedules events for users. Each event has a start time and an end time represented as \\"HH:MM\\". Users often schedule new events, but sometimes these new events conflict with existing ones. Two events overlap if they share any time in common except the exact moment one ends and another begins. Write a function that, given a list of existing events and a new event, determines if the new event conflicts with any existing ones. You will be given: 1. An integer `n` (1 ≤ n ≤ 100) representing the number of existing events. 2. A list of `n` tuples, each containing two strings: the start and end times of an event. 3. A tuple containing two strings representing the start and end times of the new event. Output \\"Conflict\\" if the new event overlaps with any of the existing events, otherwise \\"No Conflict\\". Example: Input: 3 (\\"09:00\\", \\"10:00\\") (\\"10:30\\", \\"11:30\\") (\\"12:00\\", \\"13:00\\") (\\"10:00\\", \\"10:30\\") Output: No Conflict","solution":"from datetime import datetime def time_conflict(n, existing_events, new_event): Determines if the new event conflicts with any existing events. Params: - n (int): Number of existing events - existing_events (list of tuples): List of tuples, each with start and end time of an existing event - new_event (tuple): A tuple with start and end time of the new event Returns: - str: \\"Conflict\\" if the new event overlaps with any existing events, otherwise \\"No Conflict\\" new_start, new_end = new_event new_start_time = datetime.strptime(new_start, \\"%H:%M\\") new_end_time = datetime.strptime(new_end, \\"%H:%M\\") for event in existing_events: start, end = event start_time = datetime.strptime(start, \\"%H:%M\\") end_time = datetime.strptime(end, \\"%H:%M\\") if (new_start_time < end_time and new_end_time > start_time): return \\"Conflict\\" return \\"No Conflict\\""},{"question":"A bookstore keeps track of its inventory in the form of an array of integers. Each integer represents the number of copies of a particular book in stock. The store occasionally receives or sells copies of books and needs to update its inventory accordingly. You are tasked with writing a function to handle the book transactions and update the inventory. The function `updateInventory` should take two inputs: 1. `inventory` (a list of non-negative integers): The current inventory of books. 2. `transactions` (a list of tuples): Each tuple contains two elements: - `index` (an integer): The index of the book in the inventory. - `change` (an integer): The number of copies received or sold (a positive number means received, and a negative number means sold). The function should update the inventory based on the transactions and ensure that the inventory number for each book does not go below zero. # Input: - `inventory` (1 ≤ len(inventory) ≤ 10^5, 0 ≤ inventory[i] ≤ 10^4) - `transactions` (1 ≤ len(transactions) ≤ 10^5, -10^4 ≤ change ≤ 10^4) # Output: Return the updated inventory list. # Example: ```python def updateInventory(inventory, transactions): # Implementation here # Example usage: inventory = [10, 5, 8, 3] transactions = [(0, -5), (1, 3), (2, -10), (3, 2)] print(updateInventory(inventory, transactions)) # Output: [5, 8, 0, 5] ``` # Note: - The inventory at each index should never be less than zero. - Handle each transaction sequentially in the order they appear in the `transactions` list.","solution":"def updateInventory(inventory, transactions): Updates the inventory based on the given transactions. Parameters: inventory (list of int): The current inventory of books. transactions (list of tuples): Each tuple contains an index and a change in inventory. Returns: list of int: The updated inventory. for index, change in transactions: inventory[index] += change if inventory[index] < 0: inventory[index] = 0 return inventory"},{"question":"Given an array of n integers, you need to determine if it is possible to rearrange the array elements to form a strictly increasing sequence such that the sum of the absolute differences between consecutive elements is minimized. The sum of the absolute differences between consecutive elements in an array a is defined as: S = |a1 - a2| + |a2 - a3| + ... + |an-1 - an| If it is possible to rearrange the array to form a strictly increasing sequence, return the rearranged array, otherwise return \\"Not Possible\\". Input: The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line contains n integers, where each integer is between -1,000,000,000 and 1,000,000,000, inclusive. Output: If it is possible to rearrange the array to form a strictly increasing sequence, return the rearranged array in a single line, where the elements are separated by spaces. Otherwise, print \\"Not Possible\\". Example 1: Input: 5 4 2 8 6 3 Output: 2 3 4 6 8 Example 2: Input: 3 5 5 5 Output: Not Possible","solution":"def rearrange_to_increasing_sequence(n, arr): Determine if it is possible to rearrange the array elements to form a strictly increasing sequence. :param n: The number of elements in the array :param arr: List of integers :return: The rearranged array if possible, otherwise \\"Not Possible\\" # Sort the array arr.sort() # Check for duplicates for i in range(1, n): if arr[i] == arr[i-1]: return \\"Not Possible\\" return arr"},{"question":"You are managing a system that requires validation of user input for inventory codes. Each inventory code is represented by a string consisting of uppercase letters and digits. The system has the following rules for a valid inventory code: 1. It must be exactly 8 characters long. 2. It must contain at least one uppercase letter and at least one digit. 3. It must not contain any whitespace or special characters. Your task is to write a function that takes a list of inventory codes and returns a list of boolean values indicating whether each code in the list is valid according to the rules specified. # Function Signature ```python def validate_inventory_codes(codes: List[str]) -> List[bool]: pass ``` # Input - A list of strings `codes` (1 ≤ len(codes) ≤ 10^5), where each string is an inventory code that needs to be validated. # Output - A list of boolean values. Each boolean value corresponds to an inventory code from the input list and indicates whether the code is valid (`True`) or not (`False`) based on the defined rules. # Examples ```python validate_inventory_codes([\\"A1B2C3D4\\", \\"12345678\\", \\"ABCDEFGH\\", \\"A1B2 C3D4\\"]) # Output: [True, False, False, False] validate_inventory_codes([\\"A1B2C3D4\\", \\"A2B3C4D5\\", \\"87654321\\", \\"ABCD1234\\"]) # Output: [True, True, True, True] ``` # Constraints - Each inventory code in the input list is a non-empty string up to a maximum length of 50 characters.","solution":"def validate_inventory_codes(codes): Validates a list of inventory codes based on specific rules. Rules: 1. It must be exactly 8 characters long. 2. It must contain at least one uppercase letter and at least one digit. 3. It must not contain any whitespace or special characters. def is_valid_code(code): if len(code) != 8: return False has_upper = any(c.isupper() for c in code) has_digit = any(c.isdigit() for c in code) is_alnum = code.isalnum() return has_upper and has_digit and is_alnum return [is_valid_code(code) for code in codes]"},{"question":"Yulia is organizing a treasure hunt in a rectangular park represented by an n x m grid. Each cell in the grid is either walkable (\'.\') or a pond (\'#\'). Yulia hides treasures at certain walkable cells represented as \'T\'. The objective for the participants is to start at any walkable cell and collect as many treasures as possible, but they must avoid crossing any ponds. Participants can move horizontally or vertically between adjacent walkable cells. Each cell can only be visited once. Given the grid, identify the maximum number of treasures that can be collected by any participant. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns respectively in the grid. - The next n lines contain m characters each, where each character is \'.\', \'#\', or \'T\'. # Output - Output a single integer representing the maximum number of treasures that can be collected starting from any walkable cell. # Example Input ``` 5 5 ..... .#T#. ..T.. .#.#. ..... ``` Output ``` 2 ``` # Explanation In the given grid, the optimal path includes collecting two treasures. For instance, starting at the walkable cell (3, 3), the participant can collect the treasure at (3, 3) and then move to (2, 3) to collect the second treasure at (2, 3). This is the maximum number of treasures that can be collected from any starting walkable cell while avoiding ponds. # Note - In the grid, participants can only move up, down, left, or right. - There can be multiple paths resulting in the same maximum number of treasures. - The provided grid guarantees that there is at least one walkable cell.","solution":"def max_treasures(grid, n, m): Returns the maximum number of treasures that can be collected starting from any walkable cell. def dfs(x, y, visited): Depth-first search to count the number of treasures in a connected component of walkable cells. if x < 0 or x >= n or y < 0 or y >= m or (x, y) in visited or grid[x][y] == \'#\': return 0 visited.add((x, y)) treasure_count = 1 if grid[x][y] == \'T\' else 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: treasure_count += dfs(x + dx, y + dy, visited) return treasure_count max_treasure = 0 visited = set() for i in range(n): for j in range(m): if grid[i][j] == \'.\' or grid[i][j] == \'T\': if (i, j) not in visited: max_treasure = max(max_treasure, dfs(i, j, visited)) return max_treasure"},{"question":"Alex has a unique way of organizing books in his library. The library consists of a single row of shelves, and each book has a unique height. The heights of the books on the shelves are represented by an array of distinct positive integers. Alex wants his books to be sorted in non-decreasing order of their heights from the leftmost shelf to the rightmost shelf. To achieve this, Alex can perform a special operation: He can select a subarray of books and reverse the order of the books in that subarray. He wants to know the minimum number of these operations required to sort the books. Given the list of book heights, determine the minimum number of operations required to sort the books in non-decreasing order. # Input - The first line contains an integer t (1 ≤ t ≤ 100,000): the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100): the number of books. - The second line contains n distinct integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9): the heights of the books. # Output For each test case, print a single integer representing the minimum number of operations required to sort the books in non-decreasing order. # Example Input ``` 3 5 4 3 1 2 5 6 1 3 2 6 5 4 4 1 2 3 4 ``` Output ``` 3 2 0 ``` # Explanation - In the first test case, one possible way to sort the books with 3 operations is: - Reverse the subarray from index 3 to 4: [4, 3, 1, 2, 5] -> [4, 3, 2, 1, 5] - Reverse the subarray from index 2 to 3: [4, 3, 2, 1, 5] -> [4, 1, 2, 3, 5] - Reverse the subarray from index 1 to 2: [4, 1, 2, 3, 5] -> [1, 4, 2, 3, 5] - In the second test case, one possible way to sort the books with 2 operations is: - Reverse the subarray from index 2 to 4: [1, 3, 2, 6, 5, 4] -> [1, 6, 2, 3, 5, 4] - Reverse the subarray from index 4 to 6: [1, 6, 2, 3, 5, 4] -> [1, 6, 2, 4, 5, 3] - In the third test case, the books are already sorted, so no operations are needed.","solution":"def min_operations_to_sort_books(t, test_cases): Determines the minimum number of operations required to sort books in each test case. Parameters: t: The number of test cases (integer). test_cases: List of tuples where each tuple consists of (n, heights), n is the number of books (integer) and heights is a list of integer heights. Returns: List of integers where each integer represents the minimum number of operations for each test case. results = [] for n, heights in test_cases: sorted_heights = sorted(heights) if heights == sorted_heights: results.append(0) continue segments = 0 start = 0 while start < n: if heights[start] != sorted_heights[start]: end = start while end < n and heights[end] != sorted_heights[start]: end += 1 if end < n: segments += 1 heights[start:end+1] = reversed(heights[start:end+1]) else: segments += 1 heights[start:] = reversed(heights[start:]) start += 1 results.append(segments) return results"},{"question":"You are given an infinite chessboard. Each square on the board is uniquely identified by a pair of integers ((x, y)), where ( x ) and ( y ) are both integers. A knight starts on the square ((0, 0)). You are also given a list of target squares to which the knight can travel. A knight moves in an \\"L\\" shape, i.e., it moves two squares in one direction and one square in an orthogonal direction or vice versa. Therefore, from a square ((x, y)), a knight can move to any of the following eight squares: ( (x+2, y+1) ) ( (x+2, y-1) ) ( (x-2, y+1) ) ( (x-2, y-1) ) ( (x+1, y+2) ) ( (x+1, y-2) ) ( (x-1, y+2) ) ( (x-1, y-2) ) You need to determine the minimum number of moves required for the knight to reach each of the target squares from the starting square ((0, 0)). # Input Format - The first line contains an integer (n) ((1 le n le 10^5)), representing the number of target squares. - Each of the next (n) lines contains two integers (x) and (y) ((-10^9 le x, y le 10^9)), representing the coordinates of a target square. # Output Format - Output (n) lines, each containing a single integer: the minimum number of moves required for the knight to reach the corresponding target square. # Example Input: ``` 3 2 1 5 5 -1 -1 ``` Output: ``` 1 4 2 ``` # Explanation 1. From ((0, 0)) to ((2, 1)), the knight can move directly in one move. 2. From ((0, 0)) to ((5, 5)), the minimum moves required are 4. 3. From ((0, 0)) to ((-1, -1)), the minimum moves required are 2.","solution":"from collections import deque def min_knight_moves(x, y): Function to calculate the minimum knight moves to reach the target (x, y) from (0, 0) # Directions a knight can move. directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # Use BFS for shortest path calculation queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: curr_x, curr_y, moves = queue.popleft() if (curr_x, curr_y) == (x, y): return moves for dx, dy in directions: next_x, next_y = curr_x + dx, curr_y + dy if (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append((next_x, next_y, moves + 1)) def solve_knight_moves(targets): Function to solve the minimum knight moves problem for a list of target coordinates. Args: targets (List[Tuple[int, int]]): List of target coordinates Returns: List[int]: List of minimum moves to each target coordinate. results = [] for x, y in targets: results.append(min_knight_moves(x, y)) return results"},{"question":"You are a sustainability researcher studying pollution levels in a city. The city\'s monitoring system divides the city into a grid of n times m cells. Each cell has a pollution level, represented by an integer. You are given the pollution levels in the grid as a 2D array of integers. Your task is to calculate the minimal pollution level difference between any two adjacent cells in the grid. Two cells are considered adjacent if they share a border. Write a function `min_pollution_diff(grid: List[List[int]]) -> int` that accepts a 2D list of integers representing the pollution levels in the grid and returns the minimal pollution level difference between any two adjacent cells. # Input - An integer n, the number of rows in the grid (1 leq n leq 500). - An integer m, the number of columns in the grid (1 leq m leq 500). - A 2D list of integers of size n times m, where each integer represents the pollution level in that cell (1 leq text{pollution level} leq 10^4). # Output - An integer representing the minimal pollution level difference between any two adjacent cells. # Example ```python grid = [ [3, 7, 8], [2, 5, 6], [1, 2, 4] ] print(min_pollution_diff(grid)) # Output: 1 ``` In this example, the minimal pollution level difference between any two adjacent cells in the grid is 1 (between grid[1][1]=5 and grid[2][1]=2 or grid[2][0]=1 and grid[2][1]=2, etc.).","solution":"from typing import List def min_pollution_diff(grid: List[List[int]]) -> int: Returns the minimal pollution level difference between any two adjacent cells. n = len(grid) m = len(grid[0]) min_diff = float(\'inf\') for i in range(n): for j in range(m): if i > 0: # check above min_diff = min(min_diff, abs(grid[i][j] - grid[i-1][j])) if i < n-1: # check below min_diff = min(min_diff, abs(grid[i][j] - grid[i+1][j])) if j > 0: # check left min_diff = min(min_diff, abs(grid[i][j] - grid[i][j-1])) if j < m-1: # check right min_diff = min(min_diff, abs(grid[i][j] - grid[i][j+1])) return min_diff"},{"question":"You are developing a stock trading application, and you have to implement a feature that helps users find the best days to buy and sell stocks. Given the historical daily prices of a particular stock for a period, you need to write a program that identifies the best day to buy and the best day to sell to achieve the maximum profit. However, the constraint is that you must buy the stock before you sell it. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), indicating the number of days. - The second line contains `n` space-separated integers, representing the stock prices on each day. Each price is a non-negative integer that does not exceed 10^4. # Output: - Print two integers: the buying day index and the selling day index (1-based). If there are multiple solutions, any correct one will be accepted. If no profit can be made, output \\"No Profit\\". # Example: Input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 2 5 ``` Explanation: - The best profit can be made by buying on day 2 (price = 1) and selling on day 5 (price = 6). Write a program that efficiently finds the best buy and sell days to maximize profit.","solution":"def find_best_days_to_trade(prices): Finds the best days to buy and sell stock to achieve maximum profit. if not prices or len(prices) < 2: return \\"No Profit\\" min_price = prices[0] min_day = 1 max_profit = 0 buy_day = 1 sell_day = 1 for i in range(1, len(prices)): if prices[i] < min_price: min_price = prices[i] min_day = i + 1 profit = prices[i] - min_price if profit > max_profit: max_profit = profit buy_day = min_day sell_day = i + 1 if max_profit > 0: return (buy_day, sell_day) else: return \\"No Profit\\" # For manual testing, uncomment the below lines: # if __name__ == \\"__main__\\": # n = int(input()) # prices = list(map(int, input().split())) # result = find_best_days_to_trade(prices) # if result == \\"No Profit\\": # print(result) # else: # print(result[0], result[1])"},{"question":"You are given a list of n integers representing the heights of n plants in a garden. Each minute, you can select any one plant and either increase its height by 1 unit or decrease its height by 1 unit. Your task is to make the height of all plants equal using the minimum number of operations. Write a function that takes an integer n and a list of n integers as input, representing the number of plants and their respective heights. The function should return the minimum number of operations required to make all the plants have the same height. # Input - n (2 ≤ n ≤ 200,000): the number of plants. - heights: a list of n integers (1 ≤ heights[i] ≤ 10^9), representing the height of each plant. # Output - An integer representing the minimum number of operations required to make all plants have the same height. # Example Example 1: Input: ``` 5 [4, 9, 6, 5, 7] ``` Output: ``` 13 ``` Explanation: You can make all heights equal to 6 (or 7). The operations would be: - Change 4 to 6 in 2 operations - Change 9 to 6 in 3 operations - Change 5 to 6 in 1 operation - Change 7 to 6 in 1 operation Total operations = 2 + 3 + 1 + 1 = 7 Alternatively, all heights can be changed to 7 at the same cost. Example 2: Input: ``` 3 [1, 2, 3] ``` Output: ``` 2 ``` Explanation: You can make all heights equal to 2. The operations would be: - Change 1 to 2 in 1 operation - Change 3 to 2 in 1 operation Total cost = 1 + 1 = 2 **Note:** The choice of target height can be any integer between the minimum and maximum height in the original list, but you should choose the one that minimizes the total number of operations required.","solution":"def min_operations_to_equal_height(n, heights): This function returns the minimum number of operations required to make the height of all plants equal. :param n: Number of plants :param heights: List of integer heights of each plant :return: Minimum number of operations to make all heights equal # First, sort the heights heights.sort() # Find the median median = heights[n // 2] if n % 2 != 0 else heights[n // 2 - 1] # Calculate the total operations needed to make all heights equal to the median height operations = sum(abs(h - median) for h in heights) return operations"},{"question":"You are given an array of integers which represents the strengths of soldiers in an army. The army is stationed in a line, and each soldier can only see the soldier directly in front of him, except for the last soldier who cannot see anyone in front of him. Each soldier will eliminate the soldier in front of him if his strength is greater than the soldier in front\'s strength. This process continues until no more eliminations can be done. Given the initial array of strengths, determine the final sequence of soldiers that remain after all possible eliminations have taken place. # Input - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of soldiers. - The second line contains n space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 10^9), the strengths of the soldiers from the first to the last in line. # Output - Output a single line with the final sequence of soldiers\' strengths. # Example Input ``` 5 4 5 3 6 1 ``` Output ``` 6 1 ``` Input ``` 6 1 2 3 4 5 6 ``` Output ``` 6 ```","solution":"def final_sequence_after_eliminations(n, strengths): stack = [] for strength in strengths: while stack and stack[-1] < strength: stack.pop() stack.append(strength) return stack"},{"question":"Mark and Eduardo are given an array a of n integers [a_1, a_2, dots, a_n]. They can perform an operation where they can choose any subarray of length k (1 le k le n) and reverse the order of the elements within that subarray. Their task is to determine if it\'s possible to sort the entire array in non-decreasing order by performing at most one such reversal operation. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 100) — the size of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 100) — elements of the array. For each test case, output \\"YES\\" if it\'s possible to sort the array in non-decreasing order by performing at most one reversal operation, otherwise output \\"NO\\". # Example ``` Input 4 3 1 3 2 4 4 3 2 1 5 1 2 3 4 5 6 1 5 3 3 4 6 Output YES YES YES NO ``` # Explanation In the first test case, you can reverse the subarray [3, 2] to get [1, 2, 3], which is sorted. In the second test case, you can reverse the entire array to get [1, 2, 3, 4], which is sorted. In the third test case, the array is already sorted. In the fourth test case, no single reversal can convert the array into a non-decreasing order. # Note A subarray is a contiguous part of an array, for instance, if the array is [1, 4, 3, 2, 5], then the subarray with length 3 starting from index 2 is [4, 3, 2]. Reversing this subarray would result in [1, 2, 3, 4, 5].","solution":"def can_sort_by_single_reverse(t, test_cases): results = [] for case in test_cases: n = case[0] a = case[1] sorted_a = sorted(a) # If already sorted, output \\"YES\\" if a == sorted_a: results.append(\\"YES\\") continue # Check the diffs between sorted and current start, end = -1, -1 for i in range(n): if a[i] != sorted_a[i]: if start == -1: start = i end = i # Reverse the identified subarray and check if it matches the sorted array if a[:start] + a[start:end+1][::-1] + a[end+1:] == sorted_a: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Two computer science students, Alex and Jamie, are playing a game on a grid-based board. The board is represented as a 2D matrix of size `n x m`, and each cell in the matrix either contains a \'.\' representing an empty cell or a \'#\' representing an obstacle. Alex and Jamie start from two different cells in the matrix and seek to meet at the same cell (i.e., they need to both be in the same cell at the same time). They can only move up, down, left, or right, and they must avoid obstacles. You are given the coordinates of Alex\'s starting position, Jamie\'s starting position, and the board configuration. The goal is to determine the minimum number of steps required for Alex and Jamie to meet. If it is not possible for them to meet, return -1. The matrix\'s rows and columns are 1-indexed. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns of the matrix. The next `n` lines contain `m` characters each (either \'.\' or \'#\') representing the board configuration. The next line contains four integers `ax`, `ay`, `jx`, `jy` (1 ≤ ax, ay, jx, jy ≤ 1000) — the starting row and column for Alex and Jamie respectively. Print a single integer — the minimum number of steps required for Alex and Jamie to meet, or -1 if it\'s impossible. For example, given the following input: ``` 5 5 ..... ..#.. ..#.. ..... ..... 1 1 5 5 ``` The output should be: ``` 4 ```","solution":"from collections import deque def min_steps_to_meet(n, m, board, ax, ay, jx, jy): def within_bounds(x, y): return 0 <= x < n and 0 <= y < m def bfs(start_x, start_y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(start_x, start_y, 0)]) visited[start_x][start_y] = True distances = {} while queue: x, y, dist = queue.popleft() distances[(x, y)] = dist for dx, dy in directions: nx, ny = x + dx, y + dy if within_bounds(nx, ny) and not visited[nx][ny] and board[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return distances ax -= 1 ay -= 1 jx -= 1 jy -= 1 if board[ax][ay] == \'#\' or board[jx][jy] == \'#\': return -1 alex_distances = bfs(ax, ay) jamie_distances = bfs(jx, jy) min_steps = float(\'inf\') for (x, y), a_dist in alex_distances.items(): if (x, y) in jamie_distances: j_dist = jamie_distances[(x, y)] min_steps = min(min_steps, a_dist + j_dist) return min_steps if min_steps != float(\'inf\') else -1 # Example usage: # Note: Convert input rows and columns to 0-indexed # n, m = 5, 5 # board = [ # \\".....\\", # \\"..#..\\", # \\"..#..\\", # \\".....\\", # \\".....\\" # ] # ax, ay, jx, jy = 1, 1, 5, 5 # print(min_steps_to_meet(n, m, board, ax, ay, jx, jy)) # Output: 8"},{"question":"In the world of competitive gaming, players often gain experience points (XP) to level up. A certain game defines the XP required to achieve each subsequent level by following a specific pattern. At level 1, a player needs 1 XP to reach level 2, 2 XP to reach level 3, 4 XP to reach level 4, 8 XP to reach level 5, and so on. The XP required doubles with each level. You are tasked with determining how far a player can progress in levels given a certain number of XP. Your task is: given an integer input XP representing the amount of experience points a player has, determine the highest level the player can achieve. Input: The input consists of a single integer XP (1 ≤ XP ≤ 10^9). Output: Output a single integer — the highest level the player can reach with the given XP. **Example 1:** Input: 15 Output: 4 **Example 2:** Input: 7 Output: 3 Explanation: In the first example, the player has 15 XP and the levels require XP as follows: - To reach level 2: 1 XP - To reach level 3: 2 XP (total: 1 + 2 = 3 XP) - To reach level 4: 4 XP (total: 3 + 4 = 7 XP) - To reach level 5: 8 XP (total: 7 + 8 = 15 XP) The player can reach level 5 with exactly 15 XP. In the second example, the player has 7 XP and the levels require XP as follows: - To reach level 2: 1 XP - To reach level 3: 2 XP (total: 1 + 2 = 3 XP) - To reach level 4: 4 XP (total: 3 + 4 = 7 XP) The player can reach level 4 with exactly 7 XP.","solution":"def highest_level(xp): Returns the highest level the player can reach given a certain amount of XP. level = 1 required_xp = 1 while xp >= required_xp: xp -= required_xp level += 1 required_xp *= 2 return level"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to perform the following operation on this string any number of times: 1. Choose any two distinct characters in the string, and swap all occurrences of these two characters. For example, if you choose characters \'a\' and \'b\' in the string \\"baabb\\", after the operation, the string becomes \\"abba\\". You need to determine the lexicographically smallest string you can obtain by performing the above operation any number of times. The first line of input contains a single integer n (1 le n le 10^5) — the length of the string. The second line contains the string s consisting of lowercase English letters. Print the lexicographically smallest string possible after performing the above operation any number of times. In the first example, the input string is \\"cba\\". By swapping \'c\' and \'a\', the lexicographically smallest string \\"abc\\" can be obtained. In the second example, the input string is \\"zxy\\". By swapping \'z\' and \'x\', and then \'y\' and \'x\', the lexicographically smallest string \\"xyz\\" can be obtained.","solution":"def lexicographically_smallest_string(s: str) -> str: Returns the lexicographically smallest string that can be obtained by swapping all occurrences of any two distinct characters in the string any number of times. # The smallest lexicographically string is simply the sorted version of the input string return \'\'.join(sorted(s))"},{"question":"You have been introduced to a new data structure called the \\"trie\\" which is used for storing a dynamic set of strings, usually for searching purposes. The trie allows efficient querying of strings with common prefixes. Now, your task is to implement a basic version of this trie data structure with insert and search operations. # Task 1. Implement the `Trie` class with the following methods: - `__init__(self)`: Initializes the trie structure. - `insert(self, word)`: Inserts a word into the trie. - `search(self, word)`: Returns `True` if the word is in the trie, `False` otherwise. - `startsWith(self, prefix)`: Returns `True` if there is any word in the trie that starts with the given prefix, `False` otherwise. # Example ```python # Creating a trie and inserting some words into it trie = Trie() trie.insert(\\"apple\\") print(trie.search(\\"apple\\")) # returns True print(trie.search(\\"app\\")) # returns False print(trie.startsWith(\\"app\\")) # returns True trie.insert(\\"app\\") print(trie.search(\\"app\\")) # returns True ``` # Constraints - All inputs are in lowercase letters `a-z`. - The number of operations/functions that will be executed is `10^4` at most. - The length of each word/prefix will be `100` at most.","solution":"class TrieNode: def __init__(self): # Initialize map for child nodes and a boolean to mark end of word self.children = {} self.end_of_word = False class Trie: def __init__(self): # Root node does not contain any character self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.end_of_word = True def search(self, word): node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.end_of_word def startsWith(self, prefix): node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True"},{"question":"Given a grid of size n x n, a robot starts at the top-left corner (0, 0) and wants to reach the bottom-right corner (n-1, n-1). The robot can only move either down or right at any point in time. However, certain cells in the grid are blocked and cannot be used (denoted by 1), while others are free (denoted by 0). Determine if there exists a path from the top-left corner to the bottom-right corner and if there exists one, print one such path. Input: - The first line contains an integer n (2 ≤ n ≤ 1000), representing the size of the grid. - The following n lines each contain n integers (either 0 or 1) representing the grid. Output: - If there exists a path, print \\"YES\\" followed by the path in terms of coordinates (each coordinate should be a pair of integers (i, j) denoting the row and column). Each coordinate pair should be on a new line. - If no such path exists, print \\"NO\\". Note: The path should list all the cells from (0, 0) to (n-1, n-1). Example: Input: 4 0 0 1 0 0 0 0 1 1 1 0 0 1 0 0 0 Output: YES 0 0 0 1 1 1 2 1 2 2 3 2 3 3","solution":"def find_path(grid): n = len(grid) path = [] visited = [[False for _ in range(n)] for _ in range(n)] def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] == 1 or visited[x][y]: return False path.append((x, y)) visited[x][y] = True if (x, y) == (n-1, n-1): return True if dfs(x+1, y) or dfs(x, y+1): return True path.pop() return False if dfs(0, 0): print(\\"YES\\") for p in path: print(p[0], p[1]) else: print(\\"NO\\") # Example usage n = 4 grid = [ [0, 0, 1, 0], [0, 0, 0, 1], [1, 1, 0, 0], [1, 0, 0, 0] ] find_path(grid)"},{"question":"You have recently started working at a bakery and need to organize the orders in a way that each order contains a fixed number of items exactly. Each day you receive a large number of bakery items, but you realize that some items are very popular and are running out quickly. Your task is to write a program that helps you divide the items into sets of orders, where each order has exactly m items (each item must be unique in an order), or determine if it\'s impossible. The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the total number of items and the number of items per order, respectively. The second line contains n space-separated integers ai (1 ≤ ai ≤ 100), representing the quantity of each type of item in stock. Output \\"Yes\\" if it\'s possible to create orders where each order has exactly m different items. Otherwise, output \\"No\\". In the first test sample, it is possible to create sets with exactly 2 items per order, for example, one set could have 1 item of type 1 and 1 item of type 2. In the second test sample, it\'s impossible to create sets because there are not enough items to maintain 3 different items per order, given that there are only two types of items in stock.","solution":"def can_create_orders(n, m, quantities): Determines if it\'s possible to create orders with exactly m different items. Parameters: n (int): Total number of items m (int): Number of items per order quantities (list): List containing the quantity of each type of item in stock Returns: str: \\"Yes\\" if it\'s possible to create such orders, otherwise \\"No\\" # Calculate the number of types with at least one item in stock unique_item_types = len([q for q in quantities if q > 0]) # Check if the number of types is at least m for creating one order if unique_item_types >= m: return \\"Yes\\" return \\"No\\""},{"question":"Create a command-line tool that processes a text file containing a list of words and outputs the ten most common words in the file, along with their frequencies. The text file should be passed as a command-line argument to your program. You will need to read the file, count the occurrences of each word, and then display the ten most frequently occurring words in descending order of frequency. Your program should ignore punctuation, be case-insensitive, and skip common stop words like \\"the\\", \\"and\\", \\"a\\", \\"to\\", etc. **Example Input:** ``` textfile.txt Contents of textfile.txt: \\"The quick brown fox jumps over the lazy dog. The quick brown fox was very quick.\\" ``` **Example Output:** ``` quick: 3 brown: 2 fox: 2 jumps: 1 over: 1 lazy: 1 dog: 1 was: 1 very: 1 ``` **Guidelines/Requirements:** - Clearly handle edge cases such as empty files or files with fewer than ten unique words. - Use proper error handling for file reading operations. - Ensure program efficiency even with large text files. - Adhere to the provided requirements for handling punctuation and common stop words. Please provide the solution in the programming language of your choice.","solution":"import sys import string from collections import Counter def process_text_file(file_path): stop_words = set([\\"the\\", \\"and\\", \\"a\\", \\"to\\", \\"in\\", \\"of\\", \\"for\\", \\"is\\", \\"on\\", \\"that\\", \\"by\\", \\"with\\", \\"as\\", \\"at\\", \\"it\\", \\"from\\", \\"an\\", \\"be\\", \\"this\\", \\"which\\", \\"or\\", \\"are\\", \\"but\\", \\"not\\", \\"were\\", \\"can\\", \\"their\\", \\"have\\", \\"has\\", \\"had\\", \\"will\\", \\"would\\", \\"should\\", \\"could\\", \\"been\\", \\"i\\", \\"you\\", \\"he\\", \\"she\\", \\"they\\", \\"we\\", \\"your\\", \\"my\\", \\"her\\", \\"his\\", \\"me\\", \\"him\\", \\"them\\", \\"us\\", \\"our\\"]) try: with open(file_path, \'r\') as file: text = file.read().lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) words = [word for word in text.split() if word not in stop_words] word_counts = Counter(words).most_common(10) for word, count in word_counts: print(f\\"{word}: {count}\\") except FileNotFoundError: print(f\\"Error: The file \'{file_path}\' does not exist.\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\") if __name__ == \\"__main__\\": if len(sys.argv) != 2: print(\\"Usage: python script.py <file_path>\\") else: process_text_file(sys.argv[1])"},{"question":"You are given a list of cities connected by bidirectional roads and DZY wants to find the longest path he can drive without passing through any city more than once. You will be given a number of cities, and some pairs of them are connected directly by roads. DZY can start from any city and travel along these roads to explore the longest possible route. Find the length of the longest path he could take. The first line contains an integer n, the number of cities, and an integer m, the number of roads. Each of the next m lines contains two space-separated integers xi and yi (1 ≤ xi, yi ≤ n), representing that there is a direct road between city xi and city yi. Print a single integer — the length of the longest path possible. In the first sample, starting from any city will result in a maximum path length of 1. In the second sample, starting from city 1, one of the longest paths is 1-2-3, or from city 2 one of the longest paths is 2-3-1. In the third sample, given the structure of connections, you can find multiple valid paths such as 2-1-3-4 or 3-1-2-4 yielding the maximum length of 3. Example: Input: 4 2 1 2 2 3 Output: 2","solution":"from collections import defaultdict def dfs(graph, node, visited): visited.add(node) distance = 0 for neighbor in graph[node]: if neighbor not in visited: distance = max(distance, 1 + dfs(graph, neighbor, visited)) visited.remove(node) return distance def longest_path(n, m, roads): graph = defaultdict(list) for x, y in roads: graph[x].append(y) graph[y].append(x) longest = 0 for city in range(1, n + 1): visited = set() longest = max(longest, dfs(graph, city, visited)) return longest"},{"question":"A project management tool requires unique identifiers for tasks which should follow a specific format. The format is `<prefix>-<project_code>-<task_id>`, where: - `<prefix>` is an uppercase letter. - `<project_code>` consists of exactly 4 numeric digits. - `<task_id>` consists of 3 to 6 alphanumeric characters. You need to write a program that checks if a given task identifier meets the specified format. The input contains a single line. The line has a length between 1 and 20 characters, inclusive. Each character\'s ASCII code is between 33 and 127, inclusive. Print VALID if the input string meets the format, otherwise print INVALID.","solution":"import re def validate_task_identifier(identifier): Validates if a given task identifier meets the specified format. The format is <prefix>-<project_code>-<task_id>, where: - <prefix> is an uppercase letter. - <project_code> consists of exactly 4 numeric digits. - <task_id> consists of 3 to 6 alphanumeric characters. :param identifier: str, the task identifier to validate :return: str, \'VALID\' if the identifier meets the requirements, otherwise \'INVALID\' pattern = r\'^[A-Z]-d{4}-[a-zA-Z0-9]{3,6}\' if re.match(pattern, identifier): return \'VALID\' else: return \'INVALID\'"},{"question":"Given a string of space-separated words, you need to reverse the characters of every second word in the string. The first word (numbered as 1) should stay as is, the second word (numbered as 2) should have its characters reversed, the third word (numbered as 3) should stay as is, and so on. Input: The input consists of a single line containing a string of space-separated words. The string will have at least two words and at most ten words. Each word will contain only alphabetical characters and will be between 1 and 20 characters long. Output: The output should be a single string where each second word from the input string has its characters reversed. Example: Input: \\"hello world this is a test\\" Output: \\"hello dlrow this si a tset\\"","solution":"def reverse_every_second_word(sentence): Reverses every second word in the given sentence. words = sentence.split() for i in range(1, len(words), 2): words[i] = words[i][::-1] return \' \'.join(words)"},{"question":"Sasha is managing a set of servers in a data center. Each server runs a unique set of tasks. A task can be represented as a string of characters, and the list of tasks each server handles is given as an array of strings. Sasha wants to know if there exists a pair of servers such that the tasks on one server are an exact permutation of the tasks on another server. Since the servers run unique sets of tasks, the simplicity of comparing them can be reduced to checking whether their task strings are anagrams of each other. You are given an array of n task strings representing the tasks on each server. Each task string will contain only lowercase alphabetic characters and have a maximum length of 100. Write a function that outputs \\"YES\\" if there are at least two servers with tasks that are anagrams of each other and \\"NO\\" otherwise. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of servers. - Each of the next n lines contains a string of lowercase characters representing the tasks running on a particular server. Output: - Print \\"YES\\" if at least two servers have tasks that are anagrams of each other, otherwise print \\"NO\\". Examples: Input 1: 5 abc bca cab xyz zyx Output 1: YES Input 2: 3 abcd efgh ijkl Output 2: NO Input 3: 4 listen silent enlist inlets Output 3: YES","solution":"def are_anagrams_exist(n, tasks): Checks if there exists at least two servers with anagram tasks. n: int - number of servers tasks: List[str] - list of task strings for each server Returns \\"YES\\" if there are at least two servers with anagram tasks, otherwise \\"NO\\". # Dictionary to store the normalized form of the task strings (sorted characters) normalized_tasks = {} for task in tasks: normalized_task = \'\'.join(sorted(task)) if normalized_task in normalized_tasks: return \\"YES\\" normalized_tasks[normalized_task] = True return \\"NO\\""},{"question":"Jake, a software engineer, has developed a new encryption algorithm based on permutations of strings. The encryption of a given string ( s ) involves finding its lexicographical rank among all the permutations of the string that are smaller than or equal to ( s ) itself. The lexicographical rank is the position of the string in a sorted list of all permutations of the string. For instance, the string \\"abc\\" has permutations [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. The rank of \\"bac\\" is 3 because it appears third in the sorted list of permutations. Note that permutations are numbered starting from 1. Jake is really keen to use this algorithm to determine the security level of a string by its lexicographical rank, but he needs your help to implement a function that calculates this rank for him. Write a function `find_lexicographical_rank(s: str) -> int` that takes a string ( s ) and returns its lexicographical rank among all permutations of ( s ). # Input: - A single string ( s ) of length ( n ) ((1 leq n leq 18)) consisting of lowercase English letters only. # Output: - An integer representing the lexicographical rank of the string. # Example: Input: ``` string = \\"bac\\" ``` Output: ``` 3 ``` # Function Signature: ```python def find_lexicographical_rank(s: str) -> int: ``` # Constraints: - The string length will be at most 18 characters. - All characters in the string are lowercase English letters. # Approach: To solve this problem, you need to: 1. Generate all permutations of the string ( s ). 2. Sort the permutations in lexicographical order. 3. Determine the rank of the given string ( s ). Efficiently compute the rank without generating all permutations to handle larger string lengths within the constraint.","solution":"def factorial(n): result = 1 for i in range(2, n + 1): result *= i return result def find_lexicographical_rank(s: str) -> int: rank = 1 n = len(s) fact = factorial(n) for i in range(n): fact //= (n - i) smaller_chars = 0 for j in range(i + 1, n): if s[j] < s[i]: smaller_chars += 1 rank += smaller_chars * fact return rank"},{"question":"A well-known company has developed a new keyboard layout and wants to test its convenience in typing long sentences. Instead of calculating the typing speed directly, they decided to use a proxy metric to measure comfort: the movement distance of fingers between consecutive characters. The new keyboard layout is a grid with 5 rows and 5 columns. The characters \'A\' to \'Y\' are arranged in this grid, and each character appears exactly once. Given the exact layout of the keyboard and a sentence, write a program to calculate the total movement distance of fingers required to type the sentence. You are provided with: - A 5x5 matrix representing the keyboard layout. - A string representing the sentence to type; the sentence will only contain uppercase English letters and spaces. The distance between two characters in the grid is defined as the Manhattan distance: the absolute difference in row positions plus the absolute difference in column positions. Spaces (\' \') do not require any movement and can be ignored in the calculation. Input: - The first five lines: each line contains five characters representing a row of the keyboard layout. - The sixth line: a string representing the sentence to type. Output: - A single integer representing the total movement distance. Example: Input: ``` QWERT YUIOP ASDFG HJKLZ XCVBN HELLO ``` Output: ``` 11 ``` Explanation: Start at \'H\' (3rd row, 1st column), move to \'E\' (1st row, 2nd column), and so on. Calculate the Manhattan distance for each consecutive character in \\"HELLO\\" and sum them up to get the total movement distance.","solution":"def calculate_movement_distance(keyboard, sentence): Returns the total movement distance of fingers required to type the sentence on the given keyboard layout. Parameters: keyboard (list of list of str): 5x5 matrix representing the keyboard layout. sentence (str): A sentence to type consisting of uppercase English letters and spaces. Returns: int: Total movement distance. # Create a dictionary to find the position of each character on the keyboard char_position = {} for i in range(5): for j in range(5): char_position[keyboard[i][j]] = (i, j) total_distance = 0 prev_char = None for char in sentence: if char == \' \': continue if prev_char is not None: x1, y1 = char_position[prev_char] x2, y2 = char_position[char] total_distance += abs(x1 - x2) + abs(y1 - y2) prev_char = char return total_distance"},{"question":"You have an array of positive integers of length n: a_1, a_2, dots, a_n. Let\'s define an operation which consists of choosing two different elements a_i and a_j (1 leq i, j leq n and i neq j), and replacing a_i with the value gcd(a_i, a_j), where gcd(x, y) is the greatest common divisor of integers x and y. What is the minimum possible value of the largest element in the array that can be achieved by applying the operation any number of times? The first line of input contains an integer n (1 leq n leq 300,000) — the length of the array. The second line contains n positive integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. Print a single integer — the minimum possible value of the largest element in the array after performing the operation any number of times. For example, consider array [10, 15, 20], you can choose (15, 10) to replace 15 with gcd(15, 10) = 5. The elements become [10, 5, 20]. Then you can choose (20, 10) to replace 20 with gcd(20, 10) = 10. The array now is [10, 5, 10]. Finally, choose (10, 5) to replace first 10 with gcd(10, 5) = 5. The array now is [5, 5, 5], achieving the minimum possible maximum element of 5. For another example, array [1, 2, 3, 4, 5], performing operations will always retain 1 as the smallest element, so the minimum possible value of the largest element after operations is 1.","solution":"from math import gcd from functools import reduce def minimum_largest_possible_gcd(arr): Returns the minimum possible value of the largest element in the array after applying the gcd operation any number of times. return reduce(gcd, arr)"},{"question":"You are given a rectangular farm represented as a grid of N rows and M columns. Each cell in the grid can either contain a crop (represented by \'C\') or be a barren land (represented by \'.\'). Farmers want to build irrigation systems to water all the crops. An irrigation system can water a contiguous block of crops that are connected either vertically or horizontally but not diagonally. Your task is to determine the minimum number of irrigation systems required to water all the crops in the farm. Input The first line of the input contains two integers N and M (1 ≤ N, M ≤ 50) — the number of rows and columns in the farm grid. The next N lines each contain M characters (either \'C\' or \'.\') representing the farm layout. Output Output a single integer — the minimum number of irrigation systems required. Example Input: 4 4 C..C .C.C ..C. C.C. Output: 5","solution":"def dfs(matrix, visited, i, j): stack = [(i, j)] while stack: x, y = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and not visited[nx][ny] and matrix[nx][ny] == \'C\': visited[nx][ny] = True stack.append((nx, ny)) def min_irrigation_systems(n, m, farm): visited = [[False] * m for _ in range(n)] irrigation_systems = 0 for i in range(n): for j in range(m): if farm[i][j] == \'C\' and not visited[i][j]: visited[i][j] = True dfs(farm, visited, i, j) irrigation_systems += 1 return irrigation_systems # Example usage n = 4 m = 4 farm = [ \\"C..C\\", \\".C.C\\", \\"..C.\\", \\"C.C.\\" ] print(min_irrigation_systems(n, m, farm)) # Output: 5"},{"question":"David is a gardener who wants to create the longest possible fence using fence panels of varying lengths that are available in a warehouse. However, every fence he constructs must be made up of consecutive panels from the warehouse inventory list. Given a list of integers representing the lengths of fence panels available in the warehouse, help David find the longest possible consecutive fence he can construct such that the total length of the fence is less than or equal to a given integer L. The input consists of: - A single integer n (1 le n le 10^6) representing the number of fence panels available. - A list of n integers where the i-th integer represents the length of the i-th fence panel. - An integer L (1 le L le 10^9) representing the maximum total length of the consecutive fence. Output the maximum number of consecutive panels that can be used to construct a fence with a total length less than or equal to L. In the first example, with panels = [1, 2, 3, 4, 5] and L = 11, David can use panels [2, 3, 4, 2] for a total length of 11. In the second example, with panels = [5, 1, 1, 1, 1, 1, 1] and L = 6, David can use panels [1, 1, 1, 1, 1] for a total length of 5. In the third example, with panels = [6, 7, 8, 9, 10] and L = 25, David can use panels [6, 7, 8] for a total length of 21.","solution":"def max_consecutive_panels(n, panels, L): Finds the maximum number of consecutive fence panels that have a total length less than or equal to L. Args: n (int): The number of fence panels available. panels (List[int]): The length of each fence panel. L (int): The maximum total length of the consecutive fence. Returns: int: The maximum number of consecutive panels. max_panels = 0 current_start = 0 current_sum = 0 for current_end in range(n): current_sum += panels[current_end] while current_sum > L: current_sum -= panels[current_start] current_start += 1 max_panels = max(max_panels, current_end - current_start + 1) return max_panels"},{"question":"You are tasked with developing an efficient algorithm to manage water distribution in a town. The town consists of `n` neighborhoods connected by `m` water pipelines. Each neighborhood i can send or receive water from another neighborhood j through a direct pipeline. Given `n` and `m`, determine the minimum number of additional pipelines required to ensure that every neighborhood can receive water directly or indirectly from any other neighborhood. The input consists of the following: - The first line contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 1000), indicating the number of neighborhoods and the number of existing pipelines, respectively. - The following `m` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n), representing a direct pipeline between neighborhood `a` and neighborhood `b`. Output a single integer, the minimum number of additional pipelines required. If the neighborhoods are already fully connected, output 0. # Example Input 1: ``` 4 2 1 2 3 4 ``` Output 1: ``` 1 ``` Input 2: ``` 3 3 1 2 2 3 1 3 ``` Output 2: ``` 0 ``` In the first example, neighborhoods 1 and 2 are connected, and neighborhoods 3 and 4 are connected. One additional pipeline is needed to connect these two groups, making the entire town fully connected. In the second example, all neighborhoods are already connected through the given pipelines, so no additional pipelines are required.","solution":"def minimum_additional_pipelines(n, m, pipelines): from collections import defaultdict def find(parent, i): if parent[i] == -1: return i else: return find(parent, parent[i]) def union(parent, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: parent[xroot] = yroot # Initialize the parent array for union-find parent = [-1] * n # Process each pipeline for a, b in pipelines: union(parent, a - 1, b - 1) # Count the number of disconnected components unique_roots = len(set(find(parent, i) for i in range(n))) # The number of additional pipelines needed is components - 1 return unique_roots - 1"},{"question":"You are given an array of n non-negative integers representing the height of terrain. Your task is to calculate how much water can be trapped between the terrains after it rains. For each terrain, the water trapped is determined by the difference between the height of the current terrain and the minimum of the maximum heights of terrains to the left and right of the current terrain. Write a function `trap_water` that takes an array `heights` as input and returns an integer representing the total amount of water trapped. Function signature: ```python def trap_water(heights: List[int]) -> int: ``` # Input - An integer array `heights` of length `n` (0 ≤ n ≤ 10^5), where each element is a non-negative integer representing the height of the terrain at that position. # Output - Return a single integer, the total amount of water trapped. # Example ```python heights = [0,1,0,2,1,0,1,3,2,1,2,1] trap_water(heights) => 6 ``` # Explanation The heights array represents the following terrain profile: ``` X X#XX#X# ===X==XX====X==X= ``` The water trapped is represented by \\"=\\" and totals 6 units in this example. # Constraints - The function should run in O(n) time complexity. - Implement the function without using extra space for storing heights, aside from O(1) space for variables.","solution":"from typing import List def trap_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = 0, 0 water_trapped = 0 while left < right: if heights[left] < heights[right]: if heights[left] >= left_max: left_max = heights[left] else: water_trapped += left_max - heights[left] left += 1 else: if heights[right] >= right_max: right_max = heights[right] else: water_trapped += right_max - heights[right] right -= 1 return water_trapped"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to count the number of unique substrings of s. A substring is defined as any continuous sequence of characters within the string. The problem requires you to consider all substrings, including single characters, and count how many distinct substrings can be formed from the original string. The first line contains the string s (1 le |s| le 10^3) which consists of lowercase English letters. Output a single integer - the number of distinct substrings of s. In the first example, for the string \\"ababa\\", the distinct substrings are \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\", \\"baba\\", \\"ababa\\". There are 9 distinct substrings in total. In the second example, for the string \\"aaa\\", the distinct substrings are \\"a\\", \\"aa\\", \\"aaa\\". There are 3 distinct substrings in total.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the given string s. substring_set = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring_set.add(s[i:j]) return len(substring_set)"},{"question":"Polycarp has a shop with n items. Each item has a unique positive integer price assigned to it, starting from 1 up to n burles for n items, respectively. Polycarp wants to offer discounts to customers by presenting n pairs of items. Each pair must be purchased together to receive the discount. Given the item prices are arranged in pairs (1, n), (2, n-1), (3, n-2), ..., (n//2, n//2 + 1 if n is even), Polycarp wants to maximize the discount by calculating the sum of the prices in each pair and then finding the pair with the minimum sum. You need to calculate the sum of prices for these n pairs and print the minimum sum out of all the pairs formed. Input Format: The input contains a single integer n (2 ≤ n ≤ 10^9) — the number of items in Polycarp\'s shop. Output Format: Print the minimum possible sum of prices in the pairs. Examples: Input: 6 Output: 7 Input: 9 Output: 10 Explanation: For the first example with n = 6, the pairs and their sums are (1+6)=7, (2+5)=7, and (3+4)=7. Hence, the minimum sum is 7. For the second example with n = 9, the pairs and their sums are (1+9)=10, (2+8)=10, (3+7)=10, (4+6)=10, and since n is odd, the middle item pairs with itself, i.e., (5+5)=10. Hence, the minimum sum is 10.","solution":"def min_discount_pair_sum(n): Given the number of items n, this function calculates the minimum possible sum of prices in pairs (1, n), (2, n-1), ..., (n//2, n//2 + 1 if n is even). return n + 1"},{"question":"You are given a grid of size n times m, where each cell either contains an obstacle (\'#\') or is empty (\'.\'). You are asked to determine the number of distinct paths from the top-left corner to the bottom-right corner of the grid. You can only move right or down. Write a function `count_paths` that takes in: - `grid` (a list of strings): The grid represented as a list of strings, where each string is a row of the grid. Implement the function to return the number of distinct paths modulo 10^9 + 7. If no such path exists, return 0. # Function Signature: ```python def count_paths(grid: List[str]) -> int: ``` # Input: - `grid` - A list of strings representing the grid where each string has length `m` (1 ≤ m ≤ 1000) and list has length `n` (1 ≤ n ≤ 1000). # Constraints: - Each cell in the grid is either empty (\'.\') or contains an obstacle (\'#\'). # Example ```python grid = [ \\"....\\", \\".#..\\", \\"...#\\", \\"....\\" ] print(count_paths(grid)) # Output: 4 ``` # Explanation: In the example grid, there are 4 distinct paths from the top-left to the bottom-right corner: 1. Right, Right, Down, Down, Right 2. Right, Down, Right, Down, Right 3. Right, Down, Down, Right, Right 4. Down, Right, Right, Down, Right","solution":"def count_paths(grid): MOD = 10**9 + 7 n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1]"},{"question":"Alice is playing a game with sequences. She has a sequence of integers `a` of length `n`. Alice wants to modify this sequence such that no `k` consecutive integers in the sequence are identical, where `k` is a given positive integer. Alice can make the following move any number of times: Select an integer x from 1 to m (inclusive) and place it at any position in the sequence `a`. Your task is to help Alice by determining the minimum number of moves required to achieve her goal. The first line of the input contains two integers `n` and `m` (1 ≤ `n` ≤ 10^5, 1 ≤ `m` ≤ 10^5) — the length of the sequence and the range of numbers Alice can use. The second line of the input contains `n` integers `a1, a2, ..., an` (1 ≤ `ai` ≤ `m`) — the initial sequence. The third line of the input contains a single integer `k` (1 ≤ `k` ≤ `n`) — the maximum number of consecutive identical integers allowed. Print the minimum number of moves required to ensure that no `k` consecutive integers in the sequence are identical. Example: Input: ``` 6 3 1 1 2 2 2 3 2 ``` Output: ``` 1 ``` Explanation: Alice can change the element at the 5th position to either 1 or 3.","solution":"def minimum_moves_to_avoid_consecutive_identical(n, m, a, k): moves = 0 i = 0 while i < n: count = 1 while i + 1 < n and a[i] == a[i + 1]: count += 1 i += 1 if count >= k: moves += (count - 1) // k i += 1 return moves"},{"question":"On a 10^9 x 10^9 grid, a powerful wizard has cast spells blocking specific paths on the grid, making travel challenging. The grid is numbered from 1 to 10^9 in both the x and y directions. The wizard starts at the bottom-left corner (1,1) and wants to move to the top-most cell without hitting more obstacles than necessary. The wizard\'s opponent placed two types of spells on the grid: - Vertical spells block all cells in a specific column. - Horizontal spells block all cells in a specific row. The wizard can lift a limited number of spells to make a clear path. Each vertical spell blocks the column x. Each horizontal spell blocks the row y. The grid is also wrapped around, such that if the wizard moves past the right edge, they reappear on the left edge at the same y-coordinate, and if they move past the top edge, they reappear at the bottom edge at the same x-coordinate. Given the number of vertical and horizontal spells, their locations, and the maximum number of spells the wizard can lift, determine if it is possible for the wizard to reach the top without lifting more spells than allowed, and if so, find the minimum number of spells to lift. **Input Format:** - The first line contains three integers n, m, and k (0 le n le 10^5, 0 le m le 10^5, 0 le k le 10^5) — the number of vertical and horizontal spells, and the maximum spells the wizard can lift. - Each of the next n lines contains an integer x (1 le x le 10^9) — the column blocked by a vertical spell. - Each of the next m lines contains an integer y (1 le y le 10^9) — the row blocked by a horizontal spell. **Output Format:** - A single integer representing the minimum number of spells the wizard needs to lift to reach the top-most row, or -1 if it is not possible within the allowed number of spell lifts. **Example:** ``` Input: 3 2 3 100 200 300 50 150 Output: 2 ``` In this example, the wizard can lift the vertical spells at columns 100 and 200 to create a clear path to the top row without hitting a horizontal spell.","solution":"def minimum_spells_to_lift(n, m, k, vertical_spells, horizontal_spells): Returns the minimum number of spells the wizard needs to lift to reach the top-most row or -1 if not possible within k lifts. # If there are no vertical or horizontal spells, the wizard can always reach the top. if n == 0 or m == 0: return 0 vertical_spells = set(vertical_spells) horizontal_spells = set(horizontal_spells) vert_lifts = len(vertical_spells) horiz_lifts = len(horizontal_spells) # If the required lifts for vertical or horizontal spells are already within the limit if vert_lifts <= k or horiz_lifts <= k: return min(vert_lifts, horiz_lifts) # Considering all spells, if sum of minimum necessary lifts doesn\'t exceed k if vert_lifts + horiz_lifts <= k: return vert_lifts + horiz_lifts return -1"},{"question":"You have been tasked with developing an automated message scheduling system for a popular social media platform. The system should be able to handle a series of messages that need to be posted during a specific time window. Each message has a required length (in characters) and a specific posting time. The platform has limitations: there is a maximum number of characters that can be posted per hour. Given the number of messages, their lengths, posting times, and the character limit per hour, you need to determine how many messages fall within the character limit for each hour and which ones exceed it. # Input: - The first line of the input contains two integers: `n` (1 ≤ n ≤ 2 * 10^5), the number of messages, and `c` (1 ≤ c ≤ 10^6), the character limit per hour. - Each of the next `n` lines contains two integers: `t_i` (0 ≤ t_i ≤ 23), the hour in which the `i`-th message needs to be posted, and `l_i` (1 ≤ l_i ≤ 10^6), the length of the `i`-th message in characters. # Output: - Output `24` lines, each containing two integers corresponding to each hour from 0 to 23 - the first integer is the number of messages that fall within the character limit for that hour, and the second integer is the number of messages that exceed the limit. # Example: Input: ``` 5 100 1 50 1 60 1 40 2 30 2 120 ``` Output: ``` 0 0 2 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` In this example, for hour 1, there are 3 messages with lengths 50, 60, and 40. Their total length is 150, which exceeds the limit of 100. Therefore, two messages are within the limit, and one exceeds it. For hour 2, there\'s one message within the limit (30) and one exceeding it (120).","solution":"def message_schedule(n, c, messages): hours = {i: [] for i in range(24)} for t, l in messages: hours[t].append(l) results = [] for i in range(24): message_lengths = hours[i] sorted_lengths = sorted(message_lengths) total_length = 0 within_limit = 0 exceeded_limit = 0 for length in sorted_lengths: if total_length + length <= c: total_length += length within_limit += 1 else: exceeded_limit += 1 results.append((within_limit, exceeded_limit)) return results"},{"question":"Alex is designing a simplified state machine that processes commands to transition between states. The state machine starts in an initial state \\"A\\". There are only three states in total: \\"A\\", \\"B\\", and \\"C\\". The machine operates based on a sequence of predefined commands that cause it to move from one state to another according to the rules specified. The commands are given in a specific format \\"<current_state> -> <new_state>\\". The state machine must process each command and transition to the new state as instructed. If a command tries to transition from a state to the same state (e.g., \\"A -> A\\"), it should be ignored. Additionally, the state machine should maintain an order of priority for state transitions, processed sequentially from the first command to the last. Your task is to determine the final state of the machine after processing all commands. The first line contains a single integer: n (1 ≤ n ≤ 100) the number of commands. The following n lines each contain a command in the format \\"<current_state> -> <new_state>\\". The commands ensure valid states and transitions and there will be no invalid state names other than \\"A\\", \\"B\\", and \\"C\\". Print the final state of the machine after all commands have been processed. **Example:** Input: ``` 5 A -> B B -> C C -> A A -> A A -> C ``` Output: ``` C ``` In this example, the state machine goes from \\"A\\" to \\"B\\", then \\"B\\" to \\"C\\", then \\"C\\" back to \\"A\\", ignores the \\"A -> A\\" command and finally transitions from \\"A\\" to \\"C\\". Thus, the final state is \\"C\\".","solution":"def determine_final_state(n, commands): Determines the final state after processing all state transition commands. Parameters: n (int): Number of commands (1 ≤ n ≤ 100) commands (list of str): List of commands in the format \'<current_state> -> <new_state>\' Returns: str: The final state after processing all commands state = \\"A\\" for command in commands: current_state, new_state = command.split(\\" -> \\") if current_state != new_state: state = new_state return state"},{"question":"Write a function that takes a string representing a mathematical expression and returns the value of the expression. The string may contain the following types of symbols: - Non-negative integers (e.g., \\"3\\", \\"14\\") - Parentheses for grouping (e.g., \\"(\\", \\")\\") - Arithmetic operators: addition (\'+\'), subtraction (\'-\'), multiplication (\'*\'), and division (\'/\') You should follow the usual rules of arithmetic operator precedence, and parentheses can be used to override this precedence. Assume the input is always a valid expression. The function should have the following signature: ```python def evaluate_expression(expr: str) -> float: pass ``` # Examples ```python assert evaluate_expression(\\"3+2\\") == 5 assert evaluate_expression(\\"(2+3)*4\\") == 20 assert evaluate_expression(\\"10/(2+3)\\") == 2 assert evaluate_expression(\\"2*3+4\\") == 10 assert evaluate_expression(\\"(1+2)*(3-4)/5\\") == -0.6 ``` # Constraints - The length of the input string will be between 1 and 100 characters. - Each integer will be a non-negative integer less than 10^7. - Division should use floating-point division and round to the nearest integer where necessary.","solution":"def evaluate_expression(expr: str) -> float: Evaluates a given string representing a mathematical expression and returns the result. import re from collections import deque def parse_expression(expression): Convert the string expression into a list of tokens tokens = re.findall(r\'d+|+|-|*|/|(|)\', expression) return tokens def evaluate(tokens): Evaluate the expression in tokens list using Shunting Yard algorithm and Reverse Polish Notation (RPN). def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left / right) operators = deque() values = deque() i = 0 while i < len(tokens): token = tokens[i] if re.match(r\'d+\', token): values.append(float(token)) elif token in (\'+\', \'-\', \'*\', \'/\'): while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators[-1] != \'(\': apply_operator(operators, values) operators.pop() i += 1 while operators: apply_operator(operators, values) return values[0] tokens = parse_expression(expr) return evaluate(tokens)"},{"question":"A company wants to organize a competition where participants compete in several stages. Each participant has to pass through a series of stages numbered from 1 to k, and the total score of a participant is the sum of the scores obtained in each stage. You are given the scores of all participants in each stage in the form of an n x k matrix, where n is the number of participants and k is the number of stages. Each element in the matrix (i, j) represents the score of the i-th participant in the j-th stage. You need to determine the winner(s) of the competition. A winner is a participant who has the highest total score. In case there are multiple participants with the same highest total score, all those participants are considered winners. Write a function `findWinners(scores: List[List[int]]) -> List[int]` that takes the scores matrix as input and returns a list of indices (0-based) of the winner(s). The output list should be sorted in ascending order of indices. # Input: - `scores`: A list of lists of integers where `1 <= len(scores) <= 10^3` and `1 <= len(scores[0]) <= 10^2`. # Output: - A list of integers representing the indices of the winners. # Example: ```python scores = [ [10, 5, 20], [15, 10, 10], [20, 0, 15] ] findWinners(scores) # Output: [0, 2] ``` # Explanation: - Participant 0 has a total score of 10 + 5 + 20 = 35. - Participant 1 has a total score of 15 + 10 + 10 = 35. - Participant 2 has a total score of 20 + 0 + 15 = 35. Since participants 0, 1, and 2 all have the highest total score of 35, the function returns [0, 1, 2].","solution":"from typing import List def findWinners(scores: List[List[int]]) -> List[int]: Given the scores of participants in a competition, find the winner(s) who have the highest total score. Args: scores (List[List[int]]): A list of lists containing the scores of participants in each stage. Returns: List[int]: A list of indices of the winner(s). if not scores: return [] # Calculate the total score for each participant total_scores = [sum(participant_scores) for participant_scores in scores] # Find the maximum score max_score = max(total_scores) # Find all participants who have the maximum score winners = [i for i, score in enumerate(total_scores) if score == max_score] return winners"},{"question":"You are the chief architect for a large construction project, and you need to determine the best points for setting up support pillars based on the distances between various important areas of the building site. The project site is a 3D space with integer coordinates. Given multiple test cases, for each test case, you need to find an optimal point such that the maximum Chebyshev distance (also known as the chessboard distance) to the given points is minimized. The Chebyshev distance between two points (x1, y1, z1) and (x2, y2, z2) is defined as max(|x1 - x2|, |y1 - y2|, |z1 - z2|). The first line of the input contains an integer t (1 ≤ t ≤ 100,000) — the number of test cases. Then follow t blocks, each containing the description of one test. The first line of each block contains an integer ni (1 ≤ ni ≤ 100,000) — the number of important areas in the test. Then follow ni lines, each containing three space-separated integers — the coordinates (xi, yi, zi) of the corresponding area. It\'s guaranteed that the sum of all ni doesn\'t exceed 100,000 and all coordinates are not greater than 10^9 by their absolute value. For each of the t test cases, print three integers — the coordinates of the optimal point for setting up a support pillar. If there are multiple optimal points, print any of them. In the first sample, the maximum Chebyshev distance to any area from the optimal point is minimized. In the second sample, the area points are all coinciding, so the optimal point is the same as their coordinates. **Example Input:** ``` 3 3 1 1 1 4 4 4 6 6 6 2 -1 -1 -1 -1 -1 -1 4 -10 0 0 0 -10 0 0 0 -10 10 10 10 ``` **Example Output:** ``` 4 4 4 -1 -1 -1 0 0 0 ```","solution":"def optimal_pillar(t, test_cases): answers = [] for ni, coordinates in test_cases: x_values = sorted(coord[0] for coord in coordinates) y_values = sorted(coord[1] for coord in coordinates) z_values = sorted(coord[2] for coord in coordinates) mid_x = x_values[len(x_values) // 2] mid_y = y_values[len(y_values) // 2] mid_z = z_values[len(z_values) // 2] answers.append((mid_x, mid_y, mid_z)) return answers # Example Usage: # t = 3 # test_cases = [ # (3, [(1, 1, 1), (4, 4, 4), (6, 6, 6)]), # (2, [(-1, -1, -1), (-1, -1, -1)]), # (4, [(-10, 0, 0), (0, -10, 0), (0, 0, -10), (10, 10, 10)]) # ] # print(optimal_pillar(t, test_cases))"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than 1. Write a function `isBalanced` that takes the root of the binary tree as an input and returns `true` if the tree is height-balanced, `false` otherwise. The binary tree is represented using the following structure: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` The input is provided as a serialized format of the binary tree. The first line contains an integer `n` (the number of total nodes in the binary tree). The second line contains nodes in a comma-separated format in level-order traversal, where \'null\' denotes the absence of a node. # Example Input: ``` 5 3,9,20,null,null,15,7 ``` Output: ``` true ``` Explanation: Given input represents this binary tree: ``` 3 / 9 20 / 15 7 ``` The tree is height-balanced as the difference in height of the subtree of each node is no more than 1. # Constraints * The number of nodes in the tree will be between 0 and 5000. * The value of each node will be in the range [-10000, 10000]. # Note You may assume that the input format is always valid.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def buildTree(level_order): Builds a binary tree from level-order traversal list. if not level_order or level_order[0] == \\"null\\": return None root = TreeNode(int(level_order[0])) queue = [root] i = 1 while queue and i < len(level_order): node = queue.pop(0) if level_order[i] != \\"null\\": node.left = TreeNode(int(level_order[i])) queue.append(node.left) i += 1 if i < len(level_order) and level_order[i] != \\"null\\": node.right = TreeNode(int(level_order[i])) queue.append(node.right) i += 1 return root def isBalanced(root): Returns True if the binary tree is height-balanced, else False. def check_balance(node): if not node: return 0, True left_height, left_is_balanced = check_balance(node.left) right_height, right_is_balanced = check_balance(node.right) current_height = 1 + max(left_height, right_height) current_is_balanced = left_is_balanced and right_is_balanced and abs(left_height - right_height) <= 1 return current_height, current_is_balanced _, balanced = check_balance(root) return balanced"},{"question":"When setting up a company network, the IT administrator needs to ensure that each computer has a unique hostname and a set of allowed IP addresses that follow specific constraints. However, the administrator accidentally shuffled the list of IP addresses and now needs to rearrange it correctly. Given an array of unique integers `hostnames` where `hostnames[i]` represents a hostname, and a scrambled array of unique integers `allowedIPs` where `allowedIPs[j]` represents an IP address intended for hostnames `[1, 2, ..., n]`, write a function to reassociate each hostname with its corresponding IP address. To reassociate the hostnames and IP addresses correctly, follow these rules: 1. The IP address intended for hostname `k` should be the `k-th` smallest integer in the `allowedIPs` array. 2. Each hostname `i` should have the `i-th` smallest integer from `allowedIPs` array. Implement the function `reassociateIP(n, hostnames, allowedIPs)` that takes: - an integer `n` representing the number of hostnames, - an array `hostnames` of size `n` with unique hostnames, - an array `allowedIPs` of size `n` with unique integers representing IP addresses. The function should return a dictionary where each key is a hostname and its value is the reassigned IP address. # Example ```python def reassociateIP(n, hostnames, allowedIPs): # Your implementation here n = 4 hostnames = [101, 102, 103, 104] allowedIPs = [1921681, 1921683, 1921682, 1921684] print(reassociateIP(n, hostnames, allowedIPs)) ``` **Input:** ``` n = 4 hostnames = [101, 102, 103, 104] allowedIPs = [1921681, 1921683, 1921682, 1921684] ``` **Output:** ``` {101: 1921681, 102: 1921682, 103: 1921683, 104: 1921684} ``` # Constraints - `2 ≤ n ≤ 10^5` - `1 ≤ hostnames[i], allowedIPs[j] ≤ 10^9` - The hostnames and allowedIPs arrays contain unique integers.","solution":"def reassociateIP(n, hostnames, allowedIPs): Reassociates hostnames with their intended IP addresses based on the rules. Each hostname should get the k-th smallest IP address where k is its order. Parameters: n (int): Number of hostnames. hostnames (list of int): List of unique hostnames. allowedIPs (list of int): Scrambled list of unique IP addresses. Returns: dict: Dictionary mapping each hostname to its correct IP address. sortedIPs = sorted(allowedIPs) return {hostnames[i]: sortedIPs[i] for i in range(n)}"},{"question":"Design an application that helps teachers manage their classroom activities. The application will include features like assigning and grading homework, conducting quizzes, and keeping track of student attendance. You have been tasked with developing a specific functionality for this application — implementing a system to manage homework assignments. # Description The system should allow a teacher to: 1. Assign homework to students. 2. View the list of assigned homework. 3. Record grades for submitted homework. 4. View the grades for specific homework assignments. To achieve this, you need to implement a simple command-line interface (CLI) application using Python. The application should support the following commands: 1. `assign <homework_id> <homework_description>`: Assigns a new homework with the given homework ID and description. 2. `view_assignments`: Displays the list of all assigned homework. 3. `grade <homework_id> <student_id> <grade>`: Records the grade for the specified homework assignment for the given student ID. 4. `view_grades <homework_id>`: Displays the list of grades for the specified homework ID, including student IDs and their respective grades. # Input - Commands are entered one at a time. - `homework_id` is a unique alphanumeric identifier for each homework. - `homework_description` is a string describing the homework. - `student_id` is a unique alphanumeric identifier for each student. - `grade` is an integer between 0 and 100. # Output - For `assign`: No output is required. - For `view_assignments`: Outputs the list of all assigned homework in the format: `homework_id: homework_description`. - For `grade`: No output is required. - For `view_grades`: Outputs the list of grades for the specified homework in the format: `student_id: grade`. # Example Command: ``` assign HW1 \\"Math homework on algebra\\" assign HW2 \\"Science homework on photosynthesis\\" view_assignments grade HW1 student1 85 grade HW1 student2 90 view_grades HW1 ``` Expected Output: ``` HW1: Math homework on algebra HW2: Science homework on photosynthesis student1: 85 student2: 90 ``` Implement the described functionality using Python. Ensure your program can handle multiple commands consecutively and maintains a persistent state between commands.","solution":"class HomeworkSystem: def __init__(self): self.assignments = {} self.grades = {} def assign(self, homework_id, homework_description): self.assignments[homework_id] = homework_description def view_assignments(self): return [f\\"{hw_id}: {description}\\" for hw_id, description in self.assignments.items()] def grade(self, homework_id, student_id, grade): if homework_id not in self.grades: self.grades[homework_id] = {} self.grades[homework_id][student_id] = grade def view_grades(self, homework_id): if homework_id not in self.grades: return [] return [f\\"{student_id}: {grade}\\" for student_id, grade in self.grades[homework_id].items()] # Sample usage homework_system = HomeworkSystem() # Assign homework homework_system.assign(\\"HW1\\", \\"Math homework on algebra\\") homework_system.assign(\\"HW2\\", \\"Science homework on photosynthesis\\") # View assignments assignments = homework_system.view_assignments() print(\\"n\\".join(assignments)) # Record grades homework_system.grade(\\"HW1\\", \\"student1\\", 85) homework_system.grade(\\"HW1\\", \\"student2\\", 90) # View grades grades_hw1 = homework_system.view_grades(\\"HW1\\") print(\\"n\\".join(grades_hw1))"},{"question":"Leia loves reading books, but she hates when the book has too many unnecessary words. She considers a word unnecessary if it appears in the book more than once. To make her reading experience delightful, Leia wants to remove all unnecessary words from the book, keeping only the first occurrence. Can you help her by writing an algorithm that processes the text and removes unnecessary words? You are provided with a single string `text` which contains the contents of the book. The words in the `text` are separated by spaces and punctuation marks should be treated as part of the word. Write a function `remove_unnecessary_words(text: str) -> str` that takes a string `text` and returns a string with all unnecessary words removed, keeping only the first occurrence. # Input - A single string `text`, containing multiple words separated by spaces and punctuation marks. The length of the string is at most 10^6. # Output - A single string representing the processed text with unnecessary words removed, keeping only the first occurrence. # Example ```python text = \\"it was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness\\" print(remove_unnecessary_words(text)) ``` # Output ``` \\"it was the best of times, worst age wisdom, foolishness\\" ```","solution":"def remove_unnecessary_words(text: str) -> str: Removes unnecessary words from the text, keeping only the first occurrence of each word. seen_words = set() result = [] words = text.split() for word in words: if word not in seen_words: result.append(word) seen_words.add(word) return \' \'.join(result)"},{"question":"Consider a rectangular grid of size M x N, where each cell contains a positive integer. You start from the top-left corner of the grid and your goal is to reach the bottom-right corner. From each cell, you can only move right or down. However, this grid is special because it contains some traps. Stepping on a trap will result in losing some points. The goal is to find a path from the top-left corner to the bottom-right corner that maximizes the total sum of the values of the cells you visit, while avoiding traps that make your score negative. The input consists of: 1. Two integers, M and N (1 ≤ M, N ≤ 500), indicating the number of rows and columns of the grid. 2. M lines, each containing N integers, representing the values of the grid cells (1 ≤ grid[i][j] ≤ 10^9). A cell value of -1 indicates a trap, which must be avoided. If it is not possible to reach the bottom-right corner without having a negative score, output \\"Impossible\\". Otherwise, print the maximum sum of the values along any valid path from the top-left to the bottom-right corner. # Input Format: - The first line contains two integers M and N. - The next M lines each contain N integers representing the grid. # Output Format: - A single integer representing the maximum sum of the values along a valid path, or \\"Impossible\\" if no such path exists. # Example: Input: ``` 3 3 1 2 3 4 -1 6 7 8 9 ``` Output: ``` 29 ``` Explanation: The optimal path is 1 -> 2 -> 3 -> 6 -> 9, which gives the sum 21. Note that we avoid the trap at (2,2). Consider edge cases where grids may be filled with traps, in such cases, if no valid path exists, the output should be \\"Impossible\\".","solution":"def max_path_sum(m, n, grid): if grid[0][0] == -1: return \\"Impossible\\" dp = [[-float(\'inf\')] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(m): for j in range(n): if grid[i][j] != -1: if i > 0 and grid[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0 and grid[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) if dp[m-1][n-1] == -float(\'inf\'): return \\"Impossible\\" return dp[m-1][n-1]"},{"question":"Vasya is attempting to create a new virtual library system to categorize books based on their usage frequency. He has a sequence of book transactions over several days. Each book is identified by a unique integer ID. A transaction is recorded each time a book is checked out or returned. He wants a report that lists the top-k most frequently used books over a given period. The system should be able to handle new transactions efficiently and update its most frequently used books list according to the new data. You are given a sequence of n transactions, each represented as an integer book ID. Your task is to process this sequence and provide the IDs of the top-k most frequently used books. The input consists of: 1. An integer n (1 ≤ n ≤ 100) — the number of transaction entries. 2. A space-separated sequence of n integers, where each integer represents a book ID (1 ≤ book ID ≤ 10^5). 3. An integer k (1 ≤ k ≤ 10) — the number of top books to be reported. Output the IDs of the top-k most frequently used books in descending order of their usage frequency. If multiple books have the same frequency, list them in the ascending order of their IDs. For example, if after processing the transactions there are 3 books with the highest frequencies, their IDs should be listed starting from the smallest ID among these frequent books to the largest. Input: ``` 10 1 2 3 1 2 1 4 5 2 4 3 ``` Output: ``` 1 2 4 ``` Here, the book with ID 1 is used the most, followed by the book with ID 2, and then books 4 and 5 are used equally, but since k=3, only book 4 appears in the result due to its lower ID compared to book 5.","solution":"from collections import Counter def top_k_frequent_books(n, transactions, k): Returns the IDs of the top-k most frequently used books in descending order of their usage frequency. # Count the frequency of each book ID book_counts = Counter(transactions) # Create a list of (count, book_id) tuples, sorting by highest frequency and then by lowest book_id sorted_books = sorted(book_counts.items(), key=lambda x: (-x[1], x[0])) # Extract the top-k books IDs top_k_books = [book_id for book_id, count in sorted_books[:k]] return top_k_books"},{"question":"There are `n` students in a school and each student has a unique roll number from 1 to `n`. The school wants to form student councils such that each council functions independently. A student council is a group of students where every student in the group knows every other student in the same group. You are given an `n x n` adjacency matrix `friends` where `friends[i][j]` is `1` if the student with roll number `i` knows the student with roll number `j` and `0` otherwise. Note that `friends[i][i]` is always `1` because a student knows themselves and if `friends[i][j]` is `1`, then `friends[j][i]` will also be `1`. Your task is to determine the number of independent student councils that can be formed from this group of students. Input: - The first line contains a single integer `n` (2 ≤ n ≤ 1000) — the number of students. - The next `n` lines each contain `n` integers (either `0` or `1`), representing the adjacency matrix `friends`. Output: - Print a single integer — the number of independent student councils. Example: Input: ``` 4 1 1 0 0 1 1 0 0 0 0 1 1 0 0 1 1 ``` Output: ``` 2 ```` Explanation: There are two independent student councils: - The first council consists of students 1 and 2, because they know each other. - The second council consists of students 3 and 4, because they know each other and no other students.","solution":"def count_student_councils(n, friends): def dfs(node, visited, friends): for neighbor in range(n): if friends[node][neighbor] == 1 and not visited[neighbor]: visited[neighbor] = True dfs(neighbor, visited, friends) visited = [False] * n council_count = 0 for student in range(n): if not visited[student]: dfs(student, visited, friends) council_count += 1 return council_count # Example usage: # n = 4 # friends = [[1, 1, 0, 0], # [1, 1, 0, 0], # [0, 0, 1, 1], # [0, 0, 1, 1]] # print(count_student_councils(n, friends)) # Output: 2"},{"question":"In a faraway kingdom, there is a prosperous village where villagers have gathered an enormous number of gems. Each gem has a specific type which is denoted by an integer from 1 to n. They want to organize the gems in a special way that maximizes their total value. The villagers have discovered a scoring rule for organizing gems: If they create a contiguous subarray of length k where all gems are of the same type, the score for that subarray is k^2. They now want to know the maximum score they can achieve by organizing all gems in some order. You are given an array of integers representing the types of the gems. Your task is to find the maximum score achievable by reordering the gems. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of different types of gems. The second line contains n integers g1, g2, ..., gn (1 ≤ gi ≤ 100000) — the count of gems of each type. Print one integer — the maximum score that can be achieved by organizing the gems. For example, if there are 3 types of gems with counts [3, 1, 2], the maximum score can be achieved by the organization [2, 2, 1, 3, 3, 3], which gives a score of 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14. Note: - It is not required to use all gems in the subarrays, you can choose any number of subarrays to maximize the score.","solution":"def max_gem_score(n, gem_counts): Returns the maximum score that can be achieved by organizing the gems according to the given rules. :param n: int, number of different types of gems :param gem_counts: List[int], the count of gems of each type :return: int, the maximum score return sum(count ** 2 for count in gem_counts)"},{"question":"You are given n coins, each with a positive integer value representing its denomination. Your task is to determine the minimal number of coins needed to make up a specific amount of money, m. You may assume you have an infinite number of each coin denomination available. If it is not possible to make up that amount of money with the given coin denominations, return -1. The first line contains two integers, n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10000) — the number of different coin denominations and the amount of money to make up, respectively. The second line contains n positive integers ai (1 ≤ ai ≤ 1000) — the denominations of the coins. Print the minimal number of coins needed to make up the amount of money, m. If it is not possible, print -1. Example: Input: 3 11 1 2 5 Output: 3 Explanation: 3 coins are needed to make 11: (5 + 5 + 1) 3 coins are the minimal number of coins needed to make the amount.","solution":"def min_coins(n, m, denominations): Returns the minimal number of coins needed to make up the amount m, using the given denominations. If it is not possible, returns -1. # Initialize a list to store the minimum number of coins for each amount dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # The number of coins needed to make 0 amount is 0 # Iterate over each amount from 1 to m for i in range(1, m + 1): for coin in denominations: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"Alice is trying to create a schedule for her day. She wants to ensure that no two of her meetings overlap and wants to maximize the total duration of meetings she can attend in a day. You have been given the starting and ending times of N meetings. Write a program that determines the maximum number of non-overlapping meetings Alice can attend in a day. Each meeting is represented by a pair of integers [start, end], indicating the start and end times (inclusive). If two meetings have the same end time, she prefers to attend the one that starts earlier. **Input:** - The first line contains an integer N, representing the number of meetings. - The next N lines contain two integers each, representing the start and end times of the meetings. **Output:** - The maximum number of non-overlapping meetings Alice can attend. **Examples:** Input: ``` 4 1 3 2 4 3 5 7 8 ``` Output: ``` 3 ``` Input: ``` 3 1 4 3 6 5 7 ``` Output: ``` 2 ```","solution":"def max_non_overlapping_meetings(meetings): Determines the maximum number of non-overlapping meetings. :param meetings: List of tuples where each tuple contains start and end time of a meeting. :return: Maximum number of non-overlapping meetings. # Sort meetings by their end times (and by their start times if their end times are the same) meetings.sort(key=lambda x: (x[1], x[0])) end_time = 0 max_meetings = 0 for meeting in meetings: if meeting[0] >= end_time: end_time = meeting[1] # Update the end time to the current meeting\'s end time max_meetings += 1 return max_meetings"},{"question":"A robot is standing on a 2D grid at position (0, 0). It can move in four directions: up, down, left, and right. The robot needs to reach a specific target position (x, y). You are given a string of commands where each command instructs the robot to move one step in one of the four directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Determine whether the robot can reach the target position (x, y) by following the given sequence of commands. If it can reach the target, print \\"YES\\". Otherwise, print \\"NO\\". In the first line of input, there are two integers x and y, representing the target coordinates (-10^9 leq x, y leq 10^9). In the second line of input, there is a string of commands, consisting of characters \'U\', \'D\', \'L\', and \'R\' (1 leq text{length of commands} leq 10^5). Output \\"YES\\" if the robot can reach the target position by following the given commands, otherwise output \\"NO\\".","solution":"def can_reach_target(x, y, commands): Determines if the robot can reach the target position (x, y) based on the given commands. :param x: Target x-coordinate :param y: Target y-coordinate :param commands: String of commands consisting of \'U\', \'D\', \'L\', \'R\' :return: \'YES\' if the robot can reach the target position, otherwise \'NO\' current_x = 0 current_y = 0 for command in commands: if command == \'U\': current_y += 1 elif command == \'D\': current_y -= 1 elif command == \'L\': current_x -= 1 elif command == \'R\': current_x += 1 if current_x == x and current_y == y: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a large rectangular office floor represented as a grid of size n × m, where each cell is either an empty space (\'.\') or an obstacle (\'#\'). The floor can have numerous obstacles, and you need to find the largest area of contiguous empty cells that a single obstacle-free carpet of 1xk can cover when placed vertically or horizontally. It is important to consider all possible placements of the carpet and count the number of contiguous empty cells it covers for each valid placement. Your task is to find the maximum such area that can be covered by the carpet. The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ max(n, m)), where n is the number of rows, m is the number of columns, and k is the length of the carpet. The next n lines contain m characters each, representing the office floor layout. Each character is either \'.\' for an empty cell or \'#\' for an obstacle. Output a single integer, the maximum number of contiguous empty cells that the carpet can cover. # Example Input ``` 5 6 3 . . # . . . . . . . # . # . . . . . . # . . . . . . . . . # ``` Output ``` 6 ``` # Explanation In the given example, the optimal placement of the carpet covers 6 contiguous empty cells vertically in the third column, starting from the second row.","solution":"def max_carpet_area(n, m, k, grid): max_area = 0 # Check horizontal placements for i in range(n): empty_count = 0 for j in range(m): if grid[i][j] == \'.\': empty_count += 1 if empty_count >= k: max_area = max(max_area, k) else: empty_count = 0 # Check vertical placements for j in range(m): empty_count = 0 for i in range(n): if grid[i][j] == \'.\': empty_count += 1 if empty_count >= k: max_area = max(max_area, k) else: empty_count = 0 return max_area"},{"question":"Marcus has a collection of n different types of candies, and each candy type has a distinct sweetness level. He wants to find the k sweetest candies from his collection and eat them. Can you help him determine which candies to eat? The input will be two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n), followed by a list of n integers representing the sweetness levels of the candies. The output should be the k highest sweetness levels in non-increasing order. Function signature: `def sweetest_candies(n: int, k: int, sweetness_levels: List[int]) -> List[int]:` **Example:** Input: ``` 7 3 3 10 1 8 4 7 5 ``` Output: ``` [10, 8, 7] ```","solution":"from typing import List def sweetest_candies(n: int, k: int, sweetness_levels: List[int]) -> List[int]: Returns the k highest sweetness levels in non-increasing order. # Sort the sweetness levels in non-increasing order sorted_sweetness = sorted(sweetness_levels, reverse=True) # Return the top k sweetness levels return sorted_sweetness[:k]"},{"question":"Problem Statement You are given an m x n grid filled with non-negative integers. A robot starting at the top-left corner of the grid is trying to reach the bottom-right corner. The robot can only move either down or right at any point in time. Write a function to find the minimum sum of the numbers along its path from the top-left to the bottom-right. # Input - An integer `m` (1 ≤ m ≤ 100) representing the number of rows of the grid. - An integer `n` (1 ≤ n ≤ 100) representing the number of columns of the grid. - Two-dimensional list `grid` of size m x n, where `grid[i][j]` is the non-negative integer in the cell located at the ith row and jth column of the grid (0 ≤ grid[i][j] ≤ 100). # Output - Return the minimum sum of the path from the top-left to the bottom-right corner of the grid. # Sample Input: ```python m = 3 n = 3 grid = [ [1,3,1], [1,5,1], [4,2,1] ] ``` # Sample Output: ```python 7 ``` # Explanation: The path with the minimum sum is 1 → 3 → 1 → 1 → 1, which sums to 7.","solution":"def min_path_sum(m, n, grid): Returns the minimum sum of the path from the top-left to the bottom-right corner of the grid. # Initialize a 2D array to store the minimum path sum at each cell dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Return the value at the bottom-right corner return dp[m-1][n-1] # Sample input m = 3 n = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] # Expected output: 7 print(min_path_sum(m, n, grid))"},{"question":"You are given a string s, which is a sequence of lowercase letters. Your task is to determine the smallest number of characters that need to be removed so that no two adjacent characters in the resulting string are the same. For example, given the string \\"aab\\", you can remove one \'a\' to get the string \\"ab\\", in which no two adjacent characters are the same. Note that it is not allowed to rearrange any characters in the string. The first line of the input contains an integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of a single line containing the string s (1 ≤ |s| ≤ 100). Print t integers. Each integer is the answer for the corresponding test case. # Examples: **Input:** 3 aab aaaa abbbaa **Output:** 1 3 3 **Explanation:** 1. In the first example, you can remove one \'a\' to get \\"ab\\". 2. In the second example, you need to remove three \'a\'s to get just \\"a\\". 3. In the third example, you need to remove two \'b\'s and one \'a\' to get \\"aba\\".","solution":"def min_removals_to_avoid_adjacent_duplicates(s): Returns the minimum number of characters to remove from the string s so that no two adjacent characters are the same. if len(s) <= 1: return 0 # Start counting removals removals = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: removals += 1 return removals def process_multiple_test_cases(test_cases): Given a list of test cases, returns a list of results where each result is the number of removals needed for corresponding test case. results = [] for s in test_cases: results.append(min_removals_to_avoid_adjacent_duplicates(s)) return results"},{"question":"You are given an array of integers of size n. Let\'s define the \\"Interface Array\\" of an integer array a as an array b of length n-1 where b_i = |a_i - a_{i+1}| for 0 le i < n-1. For example, if the input array is a = [3, 8, 5, 2], then the Interface Array b would be computed as follows: - b_0 = |3 - 8| = 5 - b_1 = |8 - 5| = 3 - b_2 = |5 - 2| = 3 - Hence, b = [5, 3, 3] Your task is to find the sum of all elements of the Interface Array for the given input array. # Input - The first line contains a single integer n (2 le n le 10^5) — the size of the input array. - The second line contains n space-separated integers a_0, a_1, dots, a_{n-1} (-10^9 le a_i le 10^9) — the elements of the array. # Output Output a single integer — the sum of the Interface Array elements. # Example Input ``` 4 3 8 5 2 ``` Output ``` 11 ``` # Note For the example above, the Interface Array is [5, 3, 3], and the sum of all its elements is 5 + 3 + 3 = 11.","solution":"def sum_interface_array(n, a): Compute the sum of the Interface Array given an input array a of size n. Args: n : int : the size of the input array a : list of int : the input array Returns: int : the sum of the Interface Array interface_sum = 0 for i in range(n - 1): interface_sum += abs(a[i] - a[i + 1]) return interface_sum"},{"question":"Hannah is designing a room decoration. She has a wall of length L and needs to cover it with a combination of wallpapers. There are N different types of wallpaper available, each with a specific length and beauty value associated with them. The goal is to cover the wall such that the beauty value is maximized without exceeding the length L. Each type of wallpaper can be used multiple times but cannot overlap on the wall. You are given the length of the wall L, the number of wallpaper types N, and for each type of wallpaper, its length and beauty value. Write a program to determine the maximum beauty value that can be achieved for the given wall length. The first line of the input contains two integers L and N (1 ≤ L ≤ 1000, 1 ≤ N ≤ 100). The next N lines each contain two integers li and bi (1 ≤ li ≤ L, 1 ≤ bi ≤ 100), denoting the length and beauty value of the i-th wallpaper type. Output a single integer representing the maximum beauty value that can be achieved for the wall of length L. # Example Input: ``` 10 3 2 3 3 4 4 5 ``` # Example Output: ``` 15 ``` # Explanation: In this example, the wall length L is 10. The wallpapers available are: 1. Length 2 with Beauty 3 2. Length 3 with Beauty 4 3. Length 4 with Beauty 5 To achieve the maximum beauty value, we can use the wallpaper of length 2 with beauty 3 five times (2 * 5 = 10), resulting in a total beauty value of 3 * 5 = 15.","solution":"def max_beauty_value(L, N, wallpapers): dp = [0] * (L + 1) for i in range(1, L + 1): for length, beauty in wallpapers: if length <= i: dp[i] = max(dp[i], dp[i - length] + beauty) return dp[L] def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") L, N = map(int, input_lines[0].split()) wallpapers = [tuple(map(int, line.split())) for line in input_lines[1:]] return L, N, wallpapers def main(input_str): L, N, wallpapers = parse_input(input_str) return max_beauty_value(L, N, wallpapers)"},{"question":"You are given a list of n different positive integers. From this list, you want to select exactly k integers such that the bitwise AND of all selected integers is as large as possible. Determine the largest possible bitwise AND value of the selected integers. Input: - The first line contains two integers n and k (1 le k le n le 200,000). - The second line contains n positive integers separated by spaces. Each integer is less than or equal to 10^9. Output: - Output a single integer, the maximum possible value of the bitwise AND of any k integers chosen from the list. Example: Input: ``` 5 3 8 1 7 3 5 ``` Output: ``` 1 ``` Explanation: There are five integers: 8, 1, 7, 3, 5. You need to select exactly three integers to maximize the bitwise AND. The combination (8, 1, 7) has the largest bitwise AND value of 1. Therefore, the answer is 1.","solution":"def max_bitwise_and(n, k, nums): This function returns the largest possible bitwise AND value of any k integers chosen from the list nums. # Iterate over all bits (from most significant to least significant) for bit in range(31, -1, -1): # Create a list of numbers with the current bit set filtered_nums = [num for num in nums if num & (1 << bit)] # If the count of such numbers is at least k, we update nums to this list if len(filtered_nums) >= k: nums = filtered_nums # Once filtered, the result is the AND of the first k numbers in remaining list result = nums[0] for i in range(1, k): result &= nums[i] return result"},{"question":"Harper is tasked with managing the inventory of a bookstore. The store has a specific number of books, each identified by a unique book ID, along with their respective quantities in stock. Occasionally, a bulk sale occurs, and several books are purchased in a single transaction. Harper wants to update the inventory after each transaction efficiently. Given the initial inventory and the details of a sale transaction, write a function to update the inventory and return the updated inventory. The input consists of: 1. An integer n (1 ≤ n ≤ 100) representing the number of different book IDs. 2. A list of n tuples, each containing two integers: the book ID (1 ≤ book ID ≤ 1000) and the quantity in stock (0 ≤ quantity ≤ 1000). 3. An integer m (1 ≤ m ≤ n) representing the number of books in the transaction. 4. A list of m tuples, each containing a book ID (which is guaranteed to exist in the initial inventory) and the quantity sold (1 ≤ quantity sold ≤ quantity in stock). The function should return an updated list of n tuples, each containing the book ID and the updated quantity in stock. Function Signature: ```python def update_inventory(n: int, inventory: List[Tuple[int, int]], m: int, transaction: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` Example: ```python n = 3 inventory = [(1, 100), (2, 50), (3, 200)] m = 2 transaction = [(1, 30), (3, 100)] update_inventory(n, inventory, m, transaction) ``` Expected Output: ```python [(1, 70), (2, 50), (3, 100)] ```","solution":"def update_inventory(n, inventory, m, transaction): Updates the inventory based on the given transaction and returns the updated inventory. Parameters: n (int): Number of different book IDs. inventory (list of tuples): A list of tuples where each tuple consists of book ID and quantity in stock. m (int): Number of books in the transaction. transaction (list of tuples): A list of tuples where each tuple consists of book ID and quantity sold. Returns: list of tuples: The updated inventory after processing the transaction. inventory_dict = dict(inventory) for book_id, quantity_sold in transaction: if book_id in inventory_dict: inventory_dict[book_id] -= quantity_sold return [(book_id, quantity) for book_id, quantity in inventory_dict.items()]"},{"question":"Paul is a software developer who loves playing around with arrays. He is given an array of integers and needs to make all elements equal by performing a series of operations. In one operation, Paul can choose any subarray of length at least 2 and increment each element in the subarray by 1. Paul wants to make all elements in the array equal using the minimum number of operations. Write a function `minOperationsToEqualArray(arr: List[int]) -> int` to help Paul determine the minimum number of operations required to make all the elements in the array equal. **Input** - A single line containing an integer `n` (2 ≤ n ≤ 10^5), the length of the array. - A second line containing `n` space-separated integers `arr[i]` (-10^9 ≤ arr[i] ≤ 10^9), the elements of the array. **Output** - Output a single integer, the minimum number of operations required to make all elements in the array equal. **Examples** 1. **Input** ``` 4 1 2 3 4 ``` **Output** ``` 3 ``` 2. **Input** ``` 3 5 5 3 ``` **Output** ``` 2 ``` **Note** In the first example, Paul can perform the following operations: 1. Increment the subarray [1, 2] → [2, 3, 3, 4] 2. Increment the subarray [2, 3, 3] → [3, 4, 4, 4] 3. Increment the subarray [3, 4, 4, 4] → [4, 5, 5, 5] In the second example: 1. Increment the subarray [3, 5] → [4, 5, 5] 2. Increment the subarray [4, 5, 5] → [5, 6, 6] Each subarray operation brings the minimum value closer to the maximum value until all elements are equal.","solution":"def minOperationsToEqualArray(arr): # Find the minimum element in the array min_element = min(arr) # Calculate the total number of operations needed operations = 0 for num in arr: operations += num - min_element return operations"},{"question":"You are given an array of integers of length n. You need to perform q operations on the array. Each operation is either an update or a query: - Update: Given an index and a value, update the element at that index to the new value. - Query: Given a range [l, r], find the maximum value in that range. Implement a class that supports these operations efficiently. The class should be able to handle the following methods: - `update(index, value)`: Updates the element at the specified `index` to the given `value`. - `max_range(l, r)`: Returns the maximum value in the range `[l, r]` (inclusive). **Input:** The first line contains two integers `n` and `q` (1 le n, q le 2 cdot 10^5) — the size of the array and the number of operations respectively. The second line contains `n` space-separated integers representing the initial elements of the array. The following `q` lines describe the operations. Each operation is either: - `1 x v`: An update operation that sets the element at index `x` to `v`. (1-based index) - `2 l r`: A query operation that returns the maximum element in the range `[l, r]`. (1-based indices) **Output:** For each query operation, print one integer — the maximum value in the specified range. **Example:** **Input:** ``` 5 5 1 3 2 7 9 2 1 5 1 3 10 2 3 4 2 1 5 1 3 6 ``` **Output:** ``` 9 10 10 ``` Note: Your implementation must efficiently handle the operations to work within the constraints.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (2 * self.n) # Build the tree for i in range(self.n): self.tree[self.n + i] = arr[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): # Update the value at position index to value pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[pos * 2], self.tree[pos * 2 + 1]) def max_range(self, l, r): # Get the maximum value in range [l, r) result = float(\'-inf\') l += self.n r += self.n while l < r: if l % 2 == 1: result = max(result, self.tree[l]) l += 1 if r % 2 == 1: r -= 1 result = max(result, self.tree[r]) l //= 2 r //= 2 return result def process_operations(n, q, arr, operations): st = SegmentTree(arr) results = [] for op in operations: if op[0] == 1: # Update operation st.update(op[1] - 1, op[2]) elif op[0] == 2: # Query operation results.append(st.max_range(op[1] - 1, op[2])) return results"},{"question":"A magical forest is full of mystical creatures. In this forest, there is a unique river flowing from the north to the south. There are n islands located on this river, each having certain mystical energy. The islands are connected in such a way that there are m direct bridged paths between them, each with an associated energy cost that a creature needs to travel across it. A creature starts its journey from the northernmost island (island 1) and wants to reach the southernmost island (island n). The creature wants to minimize the total mystical energy cost taken from the start island to the destination. You are given the description of n islands, m bridges, and the energy cost associated with each bridge. Your task is to find the minimum energy cost needed for the creature to travel from island 1 to island n. If there is no possible path, return -1. The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 * 10^5) — the number of islands and the number of bridges respectively. The next m lines each contain three integers u, v, c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 10^6) — indicating that there is a bridge connecting island u and island v with cost c. Print one integer — the minimum energy cost for the creature to travel from island 1 to island n. If there is no such path, output -1. Example: ``` Input: 5 6 1 2 10 1 3 5 2 4 1 3 2 2 3 4 9 4 5 7 Output: 13 ``` In this example, the creature can go from island 1 to island 3 with cost 5 and from island 3 to island 2 with cost 2, then from island 2 to island 4 with cost 1, and finally from island 4 to island 5 with cost 7. Thus total energy cost is 5 + 2 + 1 + 7 = 15.","solution":"import heapq def minimal_energy_cost(n, m, bridges): Returns the minimum energy cost from island 1 to island n using Dijkstra\'s algorithm. If no such path exists, it returns -1. graph = [[] for _ in range(n + 1)] for u, v, c in bridges: graph[u].append((v, c)) graph[v].append((u, c)) # Min-heap priority queue pq = [(0, 1)] # (cost, start node) # Distance table to store the minimum cost to reach each node min_cost = [float(\'inf\')] * (n + 1) min_cost[1] = 0 while pq: current_cost, u = heapq.heappop(pq) if u == n: return current_cost if current_cost > min_cost[u]: continue for v, edge_cost in graph[u]: new_cost = current_cost + edge_cost if new_cost < min_cost[v]: min_cost[v] = new_cost heapq.heappush(pq, (new_cost, v)) return -1 if min_cost[n] == float(\'inf\') else min_cost[n] # Example usage: # n, m = 5, 6 # bridges = [ # (1, 2, 10), # (1, 3, 5), # (2, 4, 1), # (3, 2, 2), # (3, 4, 9), # (4, 5, 7) # ] # print(minimal_energy_cost(n, m, bridges)) # Output: 15"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine the length of the longest substring in s containing only unique characters. Write a function `longest_unique_substring(s)` that takes a string s as input and returns an integer representing the length of the longest substring with all unique characters. Input: - A single string `s` (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. Output: - An integer representing the length of the longest substring with all unique characters. # Example: ``` Input: \\"abcabcbb\\" Output: 3 Explanation: The longest substring with all unique characters is \\"abc\\" which has a length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The longest substring with all unique characters is \\"b\\" which has a length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The longest substring with all unique characters is \\"wke\\" which has a length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. ``` # Constraints: - The solution should have a time complexity of O(n) where n is the length of the input string.","solution":"def longest_unique_substring(s): Returns the length of the longest substring with all unique characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array a of length n. The array is almost sorted, except that you are allowed to remove at most one element to make the rest of the array sorted in non-decreasing order. Your task is to determine if it is possible to remove at most one element from the array to make it sorted. # Input * The first line contains a single integer n (1 leq n leq 10^5) — the length of the array. * The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — elements of the array. # Output * Print \\"YES\\" if it is possible to remove at most one element to make the array sorted in non-decreasing order. Otherwise, print \\"NO\\". # Example ``` Input: 5 1 3 2 4 5 Output: YES Input: 4 10 1 2 3 Output: YES Input: 6 5 6 2 3 4 5 Output: NO ``` # Note * In the first example, by removing the element 3, the array becomes [1, 2, 4, 5] which is sorted. * In the second example, by removing the element 10, the array becomes [1, 2, 3] which is sorted. * In the third example, no single element can be removed to make the array sorted. The challenge tests your ability to manipulate and analyze arrays efficiently, taking into account edge cases where removing elements may result in a sorted sequence.","solution":"def can_be_sorted_by_removing_at_most_one_element(n, arr): def is_sorted(arr): return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) for i in range(n - 1): if arr[i] > arr[i + 1]: # Try removing arr[i] if is_sorted(arr[:i] + arr[i + 1:]): return \\"YES\\" # Try removing arr[i + 1] if is_sorted(arr[:i + 1] + arr[i + 2:]): return \\"YES\\" return \\"NO\\" return \\"YES\\" # Example usage # n = 5 # arr = [1, 3, 2, 4, 5] # print(can_be_sorted_by_removing_at_most_one_element(n, arr)) # Output should be \\"YES\\""},{"question":"Pasha owns a small store with m different types of fruits. Each type of fruit has a distinct price pi. Customers come to Pasha\'s store and buy one or more fruits, and Pasha wants to keep track of the possible total prices customers might pay. Specifically, Pasha is interested in knowing the number of distinct total prices that can be formed by buying exactly k different types of fruits. Given the prices of the m different types of fruits, determine how many distinct total prices can be calculated when customers choose exactly k different types of fruits. Your task is to write a program which calculates the number of distinct total prices. Input: - The first line contains two integers m (1 ≤ m ≤ 100) and k (1 ≤ k ≤ m). - The second line contains m space-separated integers p1, p2, ..., pm (1 ≤ pi ≤ 100). Output: - The only line of output should contain a single integer, the number of distinct total prices. Example input: 4 2 2 3 5 7 Example output: 6 Explanation: The possible total prices when choosing exactly 2 fruits are: 2+3=5, 2+5=7, 2+7=9, 3+5=8, 3+7=10, and 5+7=12. These form 6 distinct total prices.","solution":"from itertools import combinations def count_distinct_total_prices(m, k, prices): Returns the number of distinct total prices when choosing exactly k different types of fruits. # Generate all possible combinations of k prices price_combinations = combinations(prices, k) # Calculate the total price for each combination and collect them in a set to ensure uniqueness distinct_total_prices = {sum(combination) for combination in price_combinations} # Return the number of distinct total prices return len(distinct_total_prices) # Debugging example #print(count_distinct_total_prices(4, 2, [2, 3, 5, 7]))"},{"question":"A museum administration wants to analyze the popularity of its exhibits based on visitor feedback. They have collected data on the number of visits each exhibit received over a month. Based on this data, they want to determine the peak popularity periods for each exhibit. You are given the visit records for multiple exhibits over 30 days. Each exhibit has a unique identifier and the number of visits per day for each of the 30 days. The first line of the input contains an integer m (1 leq m leq 10^5) - the number of exhibits. The following m lines each contain 30 space-separated integers representing the number of daily visits for an exhibit over 30 days. The values for daily visits are in the range of 0 leq visits leq 10^4. Output m integers. For each exhibit, output the starting day (1-indexed) of the 3-day period with the maximum total number of visits. If there are multiple periods with the same maximum total number of visits, output the earliest one. Example Input: ``` 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20 20 10 10 10 10 10 10 10 10 10 10 10 10 10 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ``` Output: ``` 28 9 1 ```","solution":"def find_peak_periods(m, visits_data): peaks = [] for visits in visits_data: max_sum = -1 peak_start_day = 0 for start_day in range(28): # Only 28 because 30-3+1 = 28 three-day periods current_sum = sum(visits[start_day:start_day + 3]) if current_sum > max_sum: max_sum = current_sum peak_start_day = start_day + 1 # Convert to 1-indexed peaks.append(peak_start_day) return peaks"},{"question":"You are given a binary tree with n nodes, where each node has a unique value. The binary tree is represented as an array where each element is an integer denoting the value of a node, and its index represents the node\'s unique label. Your task is to determine the sum of all node values at the deepest level of the binary tree. # Input - The first line contains an integer n (1 leq n leq 10^5), the number of nodes in the binary tree. - The second line contains n space-separated integers representing the values of the nodes in the binary tree. - The next n-1 lines each contain two integers u and v (1 leq u, v leq n), indicating there is an edge between node u and node v. # Output - Output a single integer, the sum of all node values at the deepest level of the binary tree. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` Output ``` 9 ``` # Explanation In the binary tree constructed from the input: - Node 1 is connected to nodes 2 and 3. - Node 2 is connected to nodes 1, 4, and 5. - Node 3 is connected to node 1. - Node 4 is connected to node 2. - Node 5 is connected to node 2. The deepest level nodes are 4 and 5 with values 4 and 5 respectively, so the sum of these values is 9.","solution":"from collections import deque, defaultdict def sum_deepest_level_values(n, values, edges): if n == 1: return values[0] # Build graph graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # BFS to find the deepest level nodes max_depth = -1 deepest_sum = 0 visited = [False] * n queue = deque([(0, 0)]) # (node, depth) visited[0] = True while queue: node, depth = queue.popleft() if depth > max_depth: max_depth = depth deepest_sum = values[node] elif depth == max_depth: deepest_sum += values[node] for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, depth + 1)) return deepest_sum"},{"question":"A circular queue implementation in many programming languages often presents a challenging aspect of the coding interview process. Particularly, when the circular nature requires careful handling of indexing. In this task, you will implement a circular queue with operations that must ensure the correct behavior under various conditions. **Instructions:** 1. **Class Definition:** - You are to implement a `CircularQueue` class which supports initialization with a fixed capacity. - The queue should support the following methods: - `enQueue(value: int) -> bool`: Insert an element into the circular queue. Return `true` if the operation is successful. - `deQueue() -> bool`: Delete an element from the circular queue. Return `true` if the operation is successful. - `Front() -> int`: Get the front item from the queue. If the queue is empty, return `-1`. - `Rear() -> int`: Get the last item from the queue. If the queue is empty, return `-1`. - `isEmpty() -> bool`: Checks whether the circular queue is empty. - `isFull() -> bool`: Checks whether the circular queue is full. 2. **Constraints:** - All values in the operations will be in the range of 0 to 1000. - The number of operations will be in the range of 1 to 1000. - The capacity will be in the range of 1 to 1000. 3. **Edge Cases:** - You need to handle edge cases like attempts to dequeue from an empty queue, or enqueue to a full one. **Examples:** ``` cq = CircularQueue(3) # set the capacity to be 3 print(cq.enQueue(1)) # returns true print(cq.enQueue(2)) # returns true print(cq.enQueue(3)) # returns true print(cq.enQueue(4)) # returns false, the queue is full print(cq.Rear()) # returns 3 print(cq.isFull()) # returns true print(cq.deQueue()) # returns true print(cq.enQueue(4)) # returns true print(cq.Rear()) # returns 4 print(cq.Front()) # returns 2 ``` **Note:** - The `enQueue`, `deQueue`, `isEmpty`, and `isFull` methods should operate in constant time, O(1). - Make sure to handle the circular nature of the queue properly in all operations, ensuring the wrap-around is implemented correctly. Implement the `CircularQueue` class and its methods according to the instructions provided.","solution":"class CircularQueue: def __init__(self, k: int): self.queue = [0] * k self.head = -1 self.tail = -1 self.size = k def enQueue(self, value: int) -> bool: if self.isFull(): return False if self.isEmpty(): self.head = 0 self.tail = (self.tail + 1) % self.size self.queue[self.tail] = value return True def deQueue(self) -> bool: if self.isEmpty(): return False if self.head == self.tail: self.head = -1 self.tail = -1 else: self.head = (self.head + 1) % self.size return True def Front(self) -> int: if self.isEmpty(): return -1 return self.queue[self.head] def Rear(self) -> int: if self.isEmpty(): return -1 return self.queue[self.tail] def isEmpty(self) -> bool: return self.head == -1 def isFull(self) -> bool: return (self.tail + 1) % self.size == self.head"},{"question":"You are tasked with developing a new software feature for an online shopping platform. The platform maintains a dataset of orders, where each order consists of a series of items bought by customers. Each item is represented by its item ID and the quantity purchased. Your task is to implement a function that processes a list of orders and returns the item-wise cumulative quantity sold across all orders. The dataset of orders is represented as a dictionary, where the keys are order IDs and the values are lists of tuples. Each tuple contains two elements: an item ID and the quantity of that item in the order. Function Signature: ```python def calculate_item_totals(orders: Dict[int, List[Tuple[int, int]]]) -> Dict[int, int]: pass ``` # Input: - The input `orders` is a dictionary where each key is an `int` representing the order ID, and the value is a list of tuples. Each tuple contains two integers, the item ID and the quantity purchased. # Output: - The function should return a dictionary. The keys are the item IDs, and the values are the cumulative quantities sold for each item across all orders. # Constraints: - Each order contains at least one item. - There may be duplicate item IDs across different orders. - The number of orders, as well as the number of items in each order, is reasonable and should not pose any performance issues. # Example: ```python orders = { 1: [(101, 2), (102, 3)], 2: [(101, 5), (103, 7)], 3: [(102, 1), (103, 2), (104, 4)], } calculate_item_totals(orders) ``` # Output: ```python { 101: 7, 102: 4, 103: 9, 104: 4, } ``` # Explanation: - Item with ID `101` has a total quantity of `2 (from order 1) + 5 (from order 2) = 7` - Item with ID `102` has a total quantity of `3 (from order 1) + 1 (from order 3) = 4` - Item with ID `103` has a total quantity of `7 (from order 2) + 2 (from order 3) = 9` - Item with ID `104` has a total quantity of `4 (from order 3) = 4`","solution":"from typing import Dict, List, Tuple def calculate_item_totals(orders: Dict[int, List[Tuple[int, int]]]) -> Dict[int, int]: This function processes a list of orders and returns the item-wise cumulative quantity sold across all orders. Args: orders (Dict[int, List[Tuple[int, int]]]): The dictionary of orders containing order IDs as keys and a list of tuples where each tuple consists of an item ID and the quantity purchased. Returns: Dict[int, int]: A dictionary where the keys are item IDs and the values are the cumulative quantities sold. item_totals = {} for order in orders.values(): for item_id, quantity in order: if item_id in item_totals: item_totals[item_id] += quantity else: item_totals[item_id] = quantity return item_totals"},{"question":"Given an alphabet string `s` and an integer `k`, you need to determine the smallest possible length of a subsequence of `s` such that every character from `a` to `k` (inclusive) appears at least once in that subsequence. A subsequence is a sequence derived from another string by deleting some or no elements without changing the order of the remaining elements. # Input - A single string `s` consisting of lowercase English letters. - An integer `k` (1 ≤ k ≤ 26). # Output Print a single integer — the length of the smallest subsequence of `s` that contains every character from `a` to the k-th letter of the English alphabet at least once. If there\'s no such subsequence, print `-1`. # Constraints - The length of `s` will be between 1 and 1000. - Each character in `s` is a lowercase English letter. # Example ``` Input: daaebcd 4 Output: 6 Input: zzzyyyxxx 3 Output: -1 ``` # Explanation In the first example, the smallest subsequence that contains \'a\', \'b\', \'c\', and \'d\' is \\"daaebc\\" or \\"aebcd\\", both of length 6. In the second example, since the string does not contain characters \'a\', \'b\', or \'c\', it\'s impossible to find such a subsequence, so the output is -1.","solution":"def smallest_subsequence_length(s, k): Returns the length of the smallest subsequence of `s` that contains every character from \'a\' to the k-th letter of the English alphabet at least once. If no such subsequence exists, return -1. target_chars = set(chr(i) for i in range(ord(\'a\'), ord(\'a\') + k)) n = len(s) min_length = float(\'inf\') left = 0 for right in range(n): target_chars.discard(s[right]) if len(target_chars) == 0: while s[left] not in set(chr(i) for i in range(ord(\'a\'), ord(\'a\') + k)): left += 1 min_length = min(min_length, right - left + 1) left += 1 target_chars = set(chr(i) for i in range(ord(\'a\'), ord(\'a\') + k)) for i in range(left, right + 1): target_chars.discard(s[i]) return min_length if min_length != float(\'inf\') else -1"},{"question":"A group of interested students in data science decided to investigate the DNA sequences. They identified that one useful method to analyze DNA sequences is to calculate the Longest Common Subsequence (LCS) between pairs of sequences. You are given two DNA sequences, which only consist of the characters \'A\', \'C\', \'G\', and \'T\'. Write a program to find the length of the Longest Common Subsequence between the two sequences. # Input The input consists of two lines. The first line contains a string representing the first DNA sequence. The second line contains a string representing the second DNA sequence. # Output Print the length of the Longest Common Subsequence of the two sequences. # Example Input ``` AGGTAB GXTXAYB ``` Output ``` 4 ``` Explanation The longest common subsequence of the given sequences is \\"GTAB\\", which has a length of 4. # Constraints - The lengths of the DNA sequences do not exceed 1000.","solution":"def longest_common_subsequence(seq1, seq2): Returns the length of the longest common subsequence between two DNA sequences. m, n = len(seq1), len(seq2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a grid of size n x n filled with integers. Your task is to find the maximum sum of any hourglass shape in the grid. An hourglass consists of 7 values in the following pattern: ``` a b c d e f g ``` The hourglass must be within the bounds of the grid, and the hourglass sum is the sum of the values forming the hourglass. Write a function that takes in a 2D list of integers representing the grid and returns the maximum hourglass sum. # Function Signature ```python def max_hourglass_sum(grid: List[List[int]]) -> int: ``` # Input - `grid`: A list of n lists of n integers. Each integer will be in the range of -9 to 9. The value of n will be at least 3. # Output - Return an integer that is the maximum hourglass sum. # Example *Example 1:* ```python grid = [ [1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 0, 2, 4, 4, 0], [0, 0, 0, 2, 0, 0], [0, 0, 1, 2, 4, 0] ] print(max_hourglass_sum(grid)) # Output should be 19 ``` *Example 2:* ```python grid = [ [-9, -9, -9, 1, 1, 1], [0, -9, 0, 4, 3, 2], [-9, -9, -9, 1, 2, 3], [0, 0, 8, 6, 6, 0], [0, 0, 0, -2, 0, 0], [0, 0, 1, 2, 4, 0] ] print(max_hourglass_sum(grid)) # Output should be 28 ``` # Notes - You may assume that the input grid will always contain numbers ranging between -9 and 9. - An hourglass must fit entirely in the grid; do not extend beyond the edges.","solution":"from typing import List def max_hourglass_sum(grid: List[List[int]]) -> int: n = len(grid) max_sum = float(\'-inf\') # Initialize to the smallest possible value for i in range(n - 2): for j in range(n - 2): current_sum = ( grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] ) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a grid of size n x n, you need to fill the grid with integers from 1 to n^2 such that each row and each column contains all the distinct integers from 1 to n^2, and the sum of the integers in the main diagonal (from top-left to bottom-right) is equal to S. If no such grid layout is possible, return \\"NO\\". Otherwise, return \\"YES\\" and print the grid. The first line of the input contains two integers n and S (1 ≤ n ≤ 100, 1 ≤ S ≤ n^2 * n). Output \\"YES\\" if it is possible to construct the grid, followed by the grid itself. If it\'s not possible, print \\"NO\\". # Example Input: ``` 3 15 ``` Output: ``` YES 1 2 3 4 5 6 7 8 9 ``` Input: ``` 3 30 ``` Output: ``` NO ```","solution":"def construct_grid(n, S): if S < n or S > n * (n ** 2): return \\"NO\\" grid = [[0] * n for _ in range(n)] num = 1 for i in range(n): for j in range(n): grid[i][j] = num num += 1 current_diagonal_sum = sum(grid[i][i] for i in range(n)) if current_diagonal_sum == S: result = \\"YESn\\" result += \\"n\\".join(\\" \\".join(str(grid[i][j]) for j in range(n)) for i in range(n)) return result else: return \\"NO\\""},{"question":"In a city, there are m intersections, each uniquely identified by an integer from 1 to m. The intersections are connected by bidirectional streets. The i-th street connects intersections xi and yi and has a travel time of ti. No street connects an intersection to itself, and no two streets connect the same pair of intersections. To ease traffic congestion, the city\'s transport authority has decided to add one new street. The goal is to find the optimal placement for this street so that the average travel time between all pairs of intersections is minimized. The first line contains the integer m (2 ≤ m ≤ 2·10^5) — the number of intersections. The next p lines contain the streets description. The i-th of these lines contains three integers xi, yi, ti (1 ≤ xi, yi ≤ m, 1 ≤ ti ≤ 10^6) — the numbers of intersections connected by the i-th street and the travel time of the i-th street. It is guaranteed that it is possible to travel between any two intersections using the given streets. Print two integers u and v — the optimal pair of intersections between which the new street should be added to minimize the average travel time. If there are multiple optimal pairs, print any one of them. # Input ``` 4 1 2 4 2 3 2 3 4 3 1 4 6 ``` # Output ``` 1 3 ```","solution":"import networkx as nx def optimal_new_street(m, streets): G = nx.Graph() for x, y, t in streets: G.add_edge(x, y, weight=t) mst = nx.minimum_spanning_tree(G) all_pairs_shortest_path_lengths = dict(nx.all_pairs_dijkstra_path_length(G)) min_average_time = float(\'inf\') optimal_edge = None for i in range(1, m+1): for j in range(i+1, m+1): if not G.has_edge(i, j): mst_with_new_edge = mst.copy() mst_with_new_edge.add_edge(i, j, weight=G[i][j][\'weight\'] if G.has_edge(i, j) else 1) new_avg_time = 0 for u in range(1, m+1): for v in range(u+1, m+1): new_path_length = nx.shortest_path_length(mst_with_new_edge, source=u, target=v, weight=\'weight\') new_avg_time += new_path_length new_avg_time /= (m * (m -1) // 2) if new_avg_time < min_average_time: min_average_time = new_avg_time optimal_edge = (i, j) return optimal_edge"},{"question":"You are organizing a series of contests, each comprised of several rounds. You have a list of contestants, each participating in a specific subset of rounds. For each contest, you are required to determine the participation matrix, where each entry (i, j) indicates whether participant i is involved in round j. Given a list of participants and their respective rounds of participation, generate the participation matrix. # Input - The first line contains two integers n and r (1 ≤ n ≤ 100, 1 ≤ r ≤ 100), where n is the number of participants and r is the number of rounds. - The next n lines each contain an integer k followed by k integers, which denote the indices of the rounds (1-based) that the i-th participant is participating in. The first number k (0 ≤ k ≤ r) in each line indicates the number of rounds that the participant is involved in, followed by the list of the round indices. # Output - A matrix of size n x r consisting of integers 0 or 1. The entry (i, j) should be 1 if the i-th participant is participating in the j-th round, and 0 otherwise. # Example Input ``` 3 4 2 1 3 3 2 3 4 1 4 ``` Output ``` 1 0 1 0 0 1 1 1 0 0 0 1 ``` Here, the first participant is involved in rounds 1 and 3, the second participant in rounds 2, 3, and 4, and the third participant in round 4. The output matrix reflects this participation.","solution":"def generate_participation_matrix(n, r, participants): matrix = [[0] * r for _ in range(n)] for i, rounds in enumerate(participants): for round_index in rounds: matrix[i][round_index - 1] = 1 return matrix"},{"question":"A tree is a connected undirected graph with no cycles. Trees have many interesting properties, one of them being that any two nodes are connected by a unique path. You are given a tree with n vertices labeled from 1 to n. Find the furthest vertex from vertex 1 and print the distance from vertex 1 to that vertex. The input consists of: - An integer n (2 ≤ n ≤ 1000) - the number of vertices in the tree. - n-1 lines, each containing two integers u and v (1 ≤ u, v ≤ n), denoting an edge between vertex u and vertex v. The output should be a single integer - the maximum distance from vertex 1 to any other vertex in the tree. Example: Input: ``` 5 1 2 1 3 2 4 3 5 ``` Output: ``` 2 ``` Explanation: The tree described by the input is: ``` 1 / 2 3 | 4 5 ``` The maximum distance from vertex 1 is to vertices 4 and 5, both of which are 2 edges away from vertex 1. Hence, the output is 2.","solution":"def max_distance_from_root(n, edges): from collections import deque, defaultdict # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the maximum distance from node 1 def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current_node, current_distance) visited[start] = True max_dist = 0 while queue: current, dist = queue.popleft() max_dist = dist for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return max_dist return bfs(1)"},{"question":"Alice and Bob are playing a game with a sequence of integers. The rules of the game involve Alice and Bob taking turns removing numbers from the sequence, and they both play optimally. Alice always goes first. The sequence of integers is guaranteed to have no duplicates. On each player\'s turn, they can choose any number from the sequence, remove it, and all numbers to the right of the chosen number from the sequence. The game ends when there are no numbers left in the sequence to remove. The player who cannot make a move loses the game. Given the initial sequence of integers, determine who will win the game assuming both players play optimally. # Input The first line contains a single integer ( n ) (( 1 leq n leq 10^5 )), the length of the sequence. The second line contains ( n ) distinct integers ( a_1, a_2, ldots, a_n ) (( 1 leq a_i leq 10^9 )), representing the sequence of numbers. # Output Output a single line containing \\"Alice\\" if Alice will win the game, or \\"Bob\\" if Bob will win the game. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` Alice ``` Input ``` 4 4 1 5 2 ``` Output ``` Bob ``` # Explanation **Example 1:** Alice can remove 5 (removing all elements) and leave nothing for Bob to remove. Therefore, Alice wins. **Example 2:** If Alice removes 4, the sequence becomes [1, 5, 2]. No matter the optimal strategy, Bob will have the opportunity to force Alice into a move where she loses based on the remaining sequence configurations. Therefore, Bob wins.","solution":"def determine_winner(n, sequence): Determines the winner of the game given the sequence of integers. Args: n : int : length of the sequence sequence : List[int] : the sequence of integers Returns: str : \\"Alice\\" if Alice will win, \\"Bob\\" if Bob will win # If the length of the sequence is odd, Alice will win because she always goes first. if n % 2 == 1: return \\"Alice\\" # If the length of the sequence is even, Bob will win because he will always follow Alice\'s optimal play. else: return \\"Bob\\""},{"question":"You are given a set of logs, each log containing an action performed by a user, along with a timestamp. Your task is to analyze these logs to determine the total duration each user was active. In this context, a user is considered active from the start of the first action to the end of the last action within the log. An action log is represented by a tuple in the form (user_id, action, timestamp), where: - `user_id` is a unique identifier for the user. - `action` is a string describing the action performed. - `timestamp` is an integer representing the time at which the action was performed. Your task is to write a function `calculate_active_duration(logs)` that takes a list of logs and returns a dictionary where the keys are user IDs and the values are the total active durations for each user. # Input - `logs`: A list of tuples, each tuple containing a user ID (string), an action (string), and a timestamp (integer). # Output - A dictionary where the keys are user IDs (string) and the values are the total active durations (integer) for each user. # Constraints - If a user has multiple logs, their active duration is calculated from the time of their earliest log to the time of their latest log. - The input list of logs can contain up to 100,000 entries. # Example ```python logs = [ (\\"user1\\", \\"login\\", 1), (\\"user2\\", \\"login\\", 2), (\\"user1\\", \\"view\\", 5), (\\"user3\\", \\"login\\", 6), (\\"user1\\", \\"logout\\", 10), (\\"user2\\", \\"logout\\", 15), (\\"user3\\", \\"logout\\", 20), ] result = calculate_active_duration(logs) print(result) # Output: {\'user1\': 9, \'user2\': 13, \'user3\': 14} ``` In this example: - For `user1`, the active period is from timestamp 1 to timestamp 10, giving a duration of `10 - 1 = 9`. - For `user2`, the active period is from timestamp 2 to timestamp 15, giving a duration of `15 - 2 = 13`. - For `user3`, the active period is from timestamp 6 to timestamp 20, giving a duration of `20 - 6 = 14`.","solution":"def calculate_active_duration(logs): Calculate the total active duration for each user from the log entries. Args: logs (list of tuples): List containing log entries as tuples (user_id, action, timestamp). Returns: dict: Dictionary where keys are user IDs and values are their respective active durations. # Dictionary to store the minimum and maximum timestamps for each user user_times = {} for user_id, action, timestamp in logs: if user_id in user_times: user_times[user_id].append(timestamp) else: user_times[user_id] = [timestamp] # Calculate the active duration for each user active_durations = {} for user_id, times in user_times.items(): active_durations[user_id] = max(times) - min(times) return active_durations"},{"question":"You are designing an application that ranks players in a tournament based on their scores. Each player has a different score, and those scores need to be ranked in descending order. Moreover, to make the ranking more user-friendly, you wish to assign a unique rank to each player, ensuring that the player with the highest score has rank 1, the second highest score has rank 2, and so on. Given the scores of all players, your task is to determine the rank of each player. Input format: - The first line of input contains an integer n — the number of players (1 le n le 100,000). - The second line contains n integers s_i, where s_i is the score of the i-th player (1 le s_i le 10^9). All scores are distinct. Output format: - Print n integers, where the i-th integer is the rank of the i-th player. Example: Input: 5 50 20 30 40 10 Output: 1 5 4 3 6 Explanation: - The scores given are [50, 20, 30, 40, 10]. - Sorted scores in descending order are [50, 40, 30, 20, 10]. - The player with the score of 50 will have rank 1, the player with the score of 40 will have rank 2, and so on. - Thus, the ranks corresponding to the input scores are [1, 5, 4, 3, 6].","solution":"def rank_players(n, scores): Given the number of players and their scores, returns the ranks of each player. The ranks are assigned based on the descending order of scores. Parameters: n (int): Number of players scores (list): List of scores of the players Returns: list: List of ranks of the players corresponding to their scores # Sort scores and keep track of original indices sorted_scores = sorted(enumerate(scores), key=lambda x: x[1], reverse=True) # Prepare ranks array ranks = [0] * n for rank, (idx, score) in enumerate(sorted_scores, start=1): ranks[idx] = rank return ranks"},{"question":"You are given a list of events in the format `(start_time, end_time)`, where each event is represented by two integers `start_time` and `end_time`. All times are given in minutes since the beginning of the day. You need to determine the maximum number of non-overlapping events that can be attended. An event overlaps with another if its start time is less than the end time of the other event and its end time is greater than the start time of the other event. Consider the following constraints: - `1 <= n <= 10^5`, where `n` is the number of events. - `0 <= start_time < end_time <= 1440`. # Input - The first line contains a single integer `n`. - The next `n` lines each contain two integers `start_time` and `end_time`. # Output - Print a single integer denoting the maximum number of non-overlapping events that can be attended. # Example Input ``` 5 10 100 50 200 200 300 150 250 350 400 ``` Output ``` 3 ``` # Explanation 1. Event (10, 100) and event (50, 200) overlap, so they cannot both be attended. 2. The optimal solution is to attend events (10, 100), (200, 300), and (350, 400), resulting in a maximum of 3 non-overlapping events.","solution":"def max_non_overlapping_events(events): # Sort the events based on their end times events.sort(key=lambda x: x[1]) last_end_time = 0 count = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"To maximize his focus on a new programming challenge, Dorny decided to correctly place parentheses in a given mathematical expression. The set of characters in the mathematical expression consists of the opening and closing brackets \'(\' and \')\'. A sequence of parentheses is considered valid if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. Opening parentheses are closed in the correct order. Given an integer n, generate all combinations of well-formed parentheses of length 2*n. The length of the sequence must be even and consist of exactly n pairs of opening and closing parentheses. Input: A single integer n (1 ≤ n ≤ 12) indicating the number of pairs of parentheses. Output: Output all possible well-formed parentheses sequences in any order. Each sequence should be on a separate line. Example: Input: 3 Output: ((())) (()()) (())() ()(()) ()()() Explanation: For n = 3, there are 5 possible sequences of well-formed parentheses: 1. ((())) 2. (()()) 3. (())() 4. ()(()) 5. ()()()","solution":"def generate_parentheses(n): Generates all combinations of well-formed parentheses of length 2*n. Parameters: n (int): The number of pairs of parentheses. Returns: List[str]: A list containing all well-formed parentheses combinations. result = [] def backtrack(current, open_count, close_count): if len(current) == 2 * n: result.append(current) return if open_count < n: backtrack(current + \'(\', open_count + 1, close_count) if close_count < open_count: backtrack(current + \')\', open_count, close_count + 1) backtrack(\'\', 0, 0) return result"},{"question":"Given a directed graph with `n` nodes and `m` edges, determine whether the graph contains a directed cycle. If a cycle exists, return \\"Yes\\", otherwise return \\"No\\". **Input:** - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 100000`), representing the number of nodes and edges in the graph respectively. - Each of the next `m` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing a directed edge from node `u` to node `v`. **Output:** - Output \\"Yes\\" if there is a directed cycle in the graph, otherwise output \\"No\\". **Example:** ``` Input: 5 5 1 2 2 3 3 4 4 5 5 3 Output: Yes Input: 3 2 1 2 2 3 Output: No ``` **Explanation:** In the first example, there is a directed cycle `3 -> 4 -> 5 -> 3`. Hence, the output is \\"Yes\\". In the second example, no directed cycle exists in the graph. Hence, the output is \\"No\\".","solution":"from collections import defaultdict, deque def detect_cycle(n, m, edges): Determine whether the graph contains a directed cycle. :param n: int: Number of nodes in the graph. :param m: int: Number of edges in the graph. :param edges: List[Tuple[int, int]]: List of directed edges. :return: str: \\"Yes\\" if the graph contains a cycle, otherwise \\"No\\". graph = defaultdict(list) indegree = [0] * (n + 1) for u, v in edges: graph[u].append(v) indegree[v] += 1 queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if visited_count == n: return \\"No\\" else: return \\"Yes\\""},{"question":"Jorge is organizing a sequence of activities for a team-building event. He has an array of n integers, where each integer represents the duration of an activity in minutes. He wants to rearrange the activities such that for all i (2 le i le n), the duration of the i-th activity is either less than or greater than the duration of the (i-1)-th activity, i.e., the array should alternate between increasing and decreasing values. You can perform the following operation any number of times: select any two different indices i and j (1 le i, j le n, i neq j) and swap the activities at these indices. The first line contains a single integer t (1 le t le 10,000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_{n} (1 le a_i le 10^9) — the array which represents the activities\' durations. It\'s guaranteed that the sum of n in one test doesn\'t exceed 2 cdot 10^5. For each of the t test cases, print \\"YES\\" if it\'s possible to rearrange the activities\' durations in the desired alternating order using any number of the allowed operations, otherwise print \\"NO\\". # Example Input ``` 2 5 3 5 2 1 4 4 1 1 1 1 ``` Output ``` YES NO ``` # Explanation **Test Case 1:** It\'s possible to rearrange the activities\' durations to alternate between increasing and decreasing values, such as [1, 5, 2, 4, 3]. **Test Case 2:** All activities have the same duration, making it impossible to alternate between increasing and decreasing values.","solution":"def can_rearrange_to_alternate(n, arr): Check if it\'s possible to rearrange the array such that for all i (2 <= i <= n), the duration of the i-th activity is either less than or greater than the duration of the (i-1)-th activity (alternating order). if n == 1: return \\"YES\\" arr.sort() if len(set(arr)) == 1: # All elements are the same return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] result = can_rearrange_to_alternate(n, arr) results.append(result) return results"},{"question":"Ali loves playing with numbers and sequences. He recently found a sequence problem but is stuck on it. He needs your help to generate a specific sequence based on a given integer and a set of rules. Here are the rules for generating the sequence: 1. Start with the number n. 2. If n is even, divide it by 2. 3. If n is odd, multiply it by 3 and add 1. 4. Repeat the process with the new value of n until n becomes 1. Your task is to generate the sequence starting from n and print the sequence. # Input The first line contains an integer t (1 le t le 1000) — the number of test cases. The next t lines contain one integer n each (1 le n le 10^6) — the starting value for each sequence. # Output For each test case, print the sequence of numbers generated from n following the rules until n becomes 1. Each sequence should be printed on a new line. # Example Input ``` 3 6 7 15 ``` Output ``` 6 3 10 5 16 8 4 2 1 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1 ```","solution":"def generate_sequence(n): Generates and returns the sequence starting from n according to given rules. sequence = [] while n != 1: sequence.append(n) if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(1) return sequence def process_sequences(test_cases): Given a list of test cases, generate and return the sequences for each test case. sequences = [] for n in test_cases: sequences.append(generate_sequence(n)) return sequences"},{"question":"Polycarp is planning to redecorate his newly bought house. There are several rooms in the house, and for each room, Polycarp has decided to paint it either black or white. Each room has a specific requirement in the form of a constraint: if a room is painted black, the cost is higher than if it is painted white. However, Polycarp also has a budget B to work with, and he must ensure that he does not exceed this budget while painting the house. Polycarp has n rooms, and for each room, he has two cost values: - `ci` - cost to paint the i-th room black, - `wi` - cost to paint the i-th room white. Help Polycarp determine if it\'s possible to paint all rooms without exceeding his budget B. If possible, also provide the minimum possible cost to paint all rooms. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and B (1 ≤ B ≤ 10^9). The next n lines each contain two integers ci and wi (1 ≤ ci, wi ≤ 10^6) - the costs to paint the i-th room black and white, respectively. Output If it is possible to paint all rooms within the budget, output \\"YES\\" followed by the minimum cost. Otherwise, output \\"NO\\". Example Input: 4 20 3 2 4 1 2 3 5 4 Output: YES 10 Explanation: Polycarp can paint the rooms with the costs [2, 1, 3, 4] respectively, for a total cost of 10, which is within the budget.","solution":"def can_paint_rooms(n, B, costs): This function checks if it\'s possible to paint all rooms within the budget and returns the minimum cost if possible. Parameters: n (int): Number of rooms. B (int): Budget. costs (list of tuples): List of tuples where each tuple contains (ci, wi) - cost to paint the i-th room black or white. Returns: tuple: (\'YES\', minimum_cost) if possible to paint within budget, else (\'NO\',) # Calculate the minimum possible cost required to paint all rooms white min_cost = sum(w for c, w in costs) if min_cost <= B: return (\\"YES\\", min_cost) return (\\"NO\\",) # Example usage if __name__ == \\"__main__\\": n = 4 B = 20 costs = [ (3, 2), (4, 1), (2, 3), (5, 4) ] print(can_paint_rooms(n, B, costs)) # Output: (\'YES\', 10)"},{"question":"Edward is building a custom database engine that takes into account certain special optimizations. One of the components of the database engine is a specialized querying mechanism, which is responsible for processing multiple queries efficiently. The queries are independent of each other and each query targets a range within the database. More precisely, for a given integer array `arr` of length `n` and a list of `q` queries, each query consists of two integers `l` and `r` which represent the left and right indices (0-based) of the subarray. The task is to find and return the sum of all the elements within the subarray `arr[l..r]` for each query. Your task is to implement the function: ```python def range_sum_queries(arr, queries): # your code here ``` # Input - `arr`: A list of integers `arr` of length `n` (1 ≤ n ≤ 10^5). The integers can be negative or positive. - `queries`: A list of tuples where each tuple contains two integers `l` and `r` (0 ≤ l ≤ r < n), representing a query for which the sum of elements `arr[l] + arr[l+1] + ... + arr[r]` needs to be computed. # Output - Return a list of integers where each integer is the result of the corresponding query from the `queries` list. # Example ```python arr = [1, 2, 3, 4, 5] queries = [(0, 2), (1, 3), (0, 4)] print(range_sum_queries(arr, queries)) # Output: [6, 9, 15] ``` # Note 1. Implement an efficient algorithm to handle up to 10^5 queries and array length of up to 10^5. 2. You need to preprocess the array for faster querying. 3. Explain your approach and the complexity of your solution. # Constraints - You can assume that the input is always valid and `l` will always be less than or equal to `r`. - The solution should be optimized for handling large input sizes efficiently.","solution":"def range_sum_queries(arr, queries): Function to process multiple range sum queries efficiently. Parameters: arr (list of int): List of integers representing the array. queries (list of tuples): List of (l, r) tuples representing the queries. Returns: list of int: List of results for each query. # Precompute prefix sums to make query sum computation O(1) prefix_sum = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] # Collect results for each query results = [] for l, r in queries: results.append(prefix_sum[r + 1] - prefix_sum[l]) return results"},{"question":"Design a function named `detect_palindrome_substrings` that identifies all possible substrings of a given string that are palindromes. A palindrome is a sequence of characters that reads the same forward and backward. The substrings should be identified in such a way that each unique palindrome is listed only once in the output. # Input - A single string `s` of length between 1 and 1000. # Output - A list of unique palindrome substrings found in `s`. # Example ```python detect_palindrome_substrings(\\"ababa\\") ``` Output: ```python [\'a\', \'b\', \'aba\', \'bab\', \'ababa\'] ``` # Note 1. For the string \\"ababa\\", the palindrome substrings are identified as: \'a\', \'b\', \'aba\', \'bab\', and \'ababa\'. 2. The list of palindrome substrings should not have duplicates and should be returned in any order.","solution":"def detect_palindrome_substrings(s): Identifies all unique palindromic substrings in the input string s. def is_palindrome(sub): return sub == sub[::-1] n = len(s) palindromes = set() for i in range(n): for j in range(i + 1, n + 1): substr = s[i:j] if is_palindrome(substr): palindromes.add(substr) return list(palindromes)"},{"question":"You are given a tree (not necessarily binary) with n nodes, where each node has a unique label from 1 to n. You are also given a list of m queries. Each query consists of two nodes u and v. For each query, you need to calculate the length of the shortest path from u to v in the tree. Input: - The first line contains two integers n and m, the number of nodes and the number of queries respectively (1 le n le 10^5, 1 le m le 10^5). - Each of the next n-1 lines contains two integers a and b, indicating there is an edge between node a and node b (1 le a, b le n). - Each of the next m lines contains two integers u and v, the nodes for the query (1 le u, v le n). Output: - For each query, output a single integer, the length of the shortest path from u to v in the tree. Example: Input: ``` 5 3 1 2 1 3 3 4 3 5 1 5 2 4 5 5 ``` Output: ``` 2 3 0 ``` In the above example, the tree structure looks like this: ``` 1 / 2 3 / 4 5 ``` - For the first query (1, 5), the shortest path is 1 -> 3 -> 5, which has length 2. - For the second query (2, 4), the shortest path is 2 -> 1 -> 3 -> 4, which has length 3. - For the third query (5, 5), the shortest path is from node 5 to node 5 itself, which has length 0.","solution":"from collections import deque, defaultdict def bfs_depth_and_parent(n, edges): Perform BFS to determine depth of each node and its parent. :param n: Number of nodes :param edges: List of edges :return: (depth, parent) where depth[u] is the depth of node u and parent[u] is the parent of node u graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) depth = {1: 0} parent = {1: None} queue = deque([1]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in depth: parent[neighbor] = node depth[neighbor] = depth[node] + 1 queue.append(neighbor) return depth, parent def lca(u, v, parent, depth): Find the Lowest Common Ancestor (LCA) of nodes u and v. :param u: Node u :param v: Node v :param parent: Parent dictionary :param depth: Depth dictionary :return: The LCA of u and v # Lift u and v to the same depth while depth[u] > depth[v]: u = parent[u] while depth[v] > depth[u]: v = parent[v] # Lift u and v simultaneously until they meet while u != v: u = parent[u] v = parent[v] return u def shortest_path_length(n, edges, queries): Determine the length of the shortest path for each query. :param n: Number of nodes :param edges: List of edges :param queries: List of queries :return: List of lengths of shortest paths for each query depth, parent = bfs_depth_and_parent(n, edges) result = [] for u, v in queries: lca_node = lca(u, v, parent, depth) path_length = depth[u] + depth[v] - 2 * depth[lca_node] result.append(path_length) return result"},{"question":"Given an integer array `arr` of size `n` which contains elements from 1 to `n` with some elements possibly missing. The array is sorted in an increasing order and each number in the range [1, n] appears at most once in the array. Write a function that finds and returns all the missing numbers from the array. Your function should have the following signature: ```python def find_missing_numbers(arr: List[int], n: int) -> List[int]: ``` # Input: - `arr`: a list of integers from 1 to `n`, sorted in increasing order. - `n`: an integer denoting the size of the range [1, n]. # Output: - The function should return a list of integers containing the missing numbers from the array. # Constraints: 1. `1 <= len(arr) <= n <= 10^5` 2. Elements of `arr` are within the range [1, `n`]. # Example: ```python assert find_missing_numbers([1, 2, 4, 6], 6) == [3, 5] assert find_missing_numbers([2, 3, 7, 8], 10) == [1, 4, 5, 6, 9, 10] assert find_missing_numbers([], 5) == [1, 2, 3, 4, 5] ``` # Explanation: In the first example, the array is `[1, 2, 4, 6]` and `n` is `6`. The numbers `3` and `5` are missing from the array. Therefore, the function should return `[3, 5]`. In the second example, the array is `[2, 3, 7, 8]` and `n` is `10`. The missing numbers are `[1, 4, 5, 6, 9, 10]`. In the third example, the array is empty and `n` is `5`. Therefore, all numbers in the range 1 to 5 are missing, and the function should return `[1, 2, 3, 4, 5]`.","solution":"from typing import List def find_missing_numbers(arr: List[int], n: int) -> List[int]: Returns a list of missing numbers from the array `arr` of size `n`. # Create a set of all numbers from 1 to n complete_set = set(range(1, n + 1)) # Convert the input array to a set arr_set = set(arr) # Find the difference between the complete set and the array set missing_numbers = sorted(list(complete_set - arr_set)) # sorted to maintain order return missing_numbers"},{"question":"Create a function `balanceParentheses` that takes a string of parentheses as input and returns the minimum number of moves required to make the string valid. A move is defined as either: inserting a parenthesis at any position in the string, or removing a parenthesis from any position in the string. A string of parentheses is considered valid if every opening parenthesis `(` has a corresponding closing parenthesis `)` and vice versa. **Function Signature:** ```python def balanceParentheses(s: str) -> int: ``` **Input:** - A single string `s` consisting of up to 10^5 characters, where each character is either `(` or `)`. **Output:** - A single integer representing the minimum number of moves required to make the input string valid. **Examples:** ```python balanceParentheses(\\"(()\\") ➞ 1 balanceParentheses(\\"()())()\\") ➞ 1 balanceParentheses(\\")(\\") ➞ 2 balanceParentheses(\\"((()))\\") ➞ 0 ``` **Explanation:** 1. For input `\\"(()\\"`, we need one move to add a closing parenthesis at the end, making it `\\"()\\"`. 2. For input `\\"()())()\\"`, we need one move to remove the extra closing parenthesis, resulting in `\\"()()()\\"`. 3. For input `\\")(\\"`, two moves are needed: one to insert an opening parenthesis at the start and one to insert a closing parenthesis at the end, resulting in `\\"()()\\"`. 4. For input `\\"((()))\\"`, no moves are required as it is already valid.","solution":"def balanceParentheses(s: str) -> int: Given a string of parentheses, returns the minimum number of moves required to make the string valid. left_balance = 0 right_balance = 0 for char in s: if char == \'(\': left_balance += 1 else: # char == \')\' if left_balance > 0: left_balance -= 1 else: right_balance += 1 # Total moves required is the sum of unbalanced left and right parentheses. return left_balance + right_balance"},{"question":"You are given two arrays, `A` and `B`, both containing `n` positive integers. A valid operation in this context involves incrementing any element of `A` by exactly 1. Your task is to determine the minimum number of valid operations required so that for each `i` (`1 <= i <= n`), the condition `A[i] + B[i]` is at least a given integer `x`. # Input: - The first line contains two integers, `n` and `x` (`1 <= n <= 10^5`, `1 <= x <= 10^9`), the number of elements in each array and the target integer `x` respectively. - The second line contains `n` integers, representing the elements of array `A` (`1 <= A[i] <= 10^9`). - The third line contains `n` integers, representing the elements of array `B` (`1 <= B[i] <= 10^9`). # Output: Print a single integer, the minimum number of valid operations required. # Example: Input: ``` 3 7 2 3 5 4 4 2 ``` Output: ``` 3 ``` Explanation: - For the first element, `A[1] + B[1] = 2 + 4 = 6`, we need 1 operation to make it 7. - For the second element, `A[2] + B[2] = 3 + 4 = 7`, no operation is needed. - For the third element, `A[3] + B[3] = 5 + 2 = 7`, no operation is needed. - Hence, total operations required = 1 + 0 + 0 = 1. # Note: In scenarios where any operation seems redundant, recalibrate the count accordingly. The goal is to accurately determine the minimum operations for all pairings between the two arrays meeting the condition `A[i] + B[i] >= x`.","solution":"def min_operations_to_reach_x(n, x, A, B): Calculate the minimum number of increment operations required to make the sum of corresponding elements in two arrays meet or exceed a target value x. :param n: The length of the arrays. :param x: The target sum value. :param A: List of integers representing array A. :param B: List of integers representing array B. :return: Minimum number of operations required. operations = 0 for i in range(n): current_sum = A[i] + B[i] if current_sum < x: operations += (x - current_sum) return operations"},{"question":"Dr. Nadia is a scientist working on synthesizing a new compound in her laboratory. The process involves mixing various chemicals in a predefined sequence. Each step in the synthesis requires a specific quantity of a chemical, and each chemical can be synthesized using base elements. However, the chemicals can also serve as intermediary products for other chemicals. All chemicals have unique identifiers. Dr. Nadia has a certain amount of base elements already available in her lab, but she needs to calculate whether she can produce the final compound with the resources on hand. The compounds can only be synthesized if the exact quantities required at each step can be met. Given n chemicals and m base elements, the configuration of each chemical synthesis is provided. For each chemical, you get the quantities of base elements or intermediary chemicals needed. Determine if it is feasible to synthesize the target compound given the available base elements. The first line contains an integer n (1≤n≤100) – the number of chemicals. The second line contains an integer m (1≤m≤100) – the number of base elements. The third line contains m integers c1, c2, ..., cm (1≤ci≤1000) – the quantities of base elements available. The next n lines describe each chemical. Each line describes one chemical and contains the following: - An integer k (0≤k≤m) – the number of base elements needed. - If k > 0, the line follows with k pairs of integers (bi, ai) where bi is the base element index (1≤bi≤m), and ai is the quantity of that base element needed. After the base elements, if intermediary products are involved, they are described as follows: - An integer p (0≤p≤n) – the number of intermediary chemicals needed. - If p > 0, the line follows with p pairs of integers (ci, qi) where ci is the chemical index (1≤ci≤n), and qi is the quantity of that chemical needed. Finally, the last line contains the integer t (1≤t≤n) which represents the target compound. Output \\"YES\\" if it is possible to synthesize the target compound, otherwise output \\"NO\\".","solution":"def can_synthesize_target(n, m, base_elements, chemicals, target): from collections import defaultdict, deque def can_synthesize(chemical, required_amount): if chemical in memo: return memo[chemical] >= required_amount requirements = chemicals[chemical] base_needed = requirements[\'base_needed\'] chemical_needed = requirements[\'chemical_needed\'] for idx, amount in base_needed: if base_elements[idx-1] < amount * required_amount: return False for idx, amount in chemical_needed: if not can_synthesize(idx - 1, amount * required_amount): return False for idx, amount in base_needed: base_elements[idx-1] -= amount * required_amount memo[chemical] += required_amount return True memo = defaultdict(int) result = can_synthesize(target-1, 1) return \\"YES\\" if result else \\"NO\\""},{"question":"In a directed graph with n nodes labeled from 1 to n, and m edges, your task is to determine if there exists a cycle and identify one if it exists. The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5). The next m lines contain pairs of integers u and v (1 le u, v le n), indicating a directed edge from node u to node v. If there is no cycle, print \\"NO\\". If there is a cycle, print \\"YES\\" in the first line. In the second line, print all the nodes in the cycle in the correct order, starting from any node in the cycle. If there are multiple cycles, return any one of them. Example input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Example output: ``` YES 2 3 4 2 ```","solution":"from collections import defaultdict, deque def find_cycle(n, m, edges): def dfs(v): Depth First Search for detecting a cycle visited[v] = 1 stack.append(v) for neighbour in graph[v]: if visited[neighbour] == 0: if dfs(neighbour): return True elif visited[neighbour] == 1: cycle_start = stack.index(neighbour) cycle = stack[cycle_start:] cycle.append(neighbour) print(\\"YES\\") print(\\" \\".join(map(str, cycle))) return True stack.pop() visited[v] = 2 return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [0] * (n + 1) stack = [] for i in range(1, n + 1): if visited[i] == 0: if dfs(i): return print(\\"NO\\") def cycle_in_graph(n, m, edge_list): find_cycle(n, m, edge_list)"},{"question":"Samantha is training a newborn puppy and wants to create a personalized command list. Each command consists of a unique action and a unique object (for example, \\"sit_down\\" where \\"sit\\" is the action and \\"down\\" is the object). She has already identified a list of possible commands for her puppy. Unfortunately, the commands in Samantha’s list are not arranged in a systematic organizing pattern, and she wants to restructure them. She wants each command to follow the pattern where each action is followed by a different object than the one paired with the previous action. Help Samantha by creating a program that restructures the list of commands according to her requirements, ensuring that no two consecutive commands share the same action or object. The input consists of an integer n (2 ≤ n ≤ 2 * 10^5) — the number of predefined commands. The next n lines contain n commands in the format \\"action_object\\". Each action and object are non-empty sequences of lowercase Latin letters and their combined length does not exceed 20 characters. Print the restructured list of commands, one per line. If it is impossible to restructure the commands as required, print \\"Impossible\\". In the first sample, a correct reordering of commands ensures that no two consecutive commands share the same action or object. In the second sample, it is not possible to reorder the commands to meet the requirement since there are not enough diverse actions or objects. Input example 1: 4 sit_down stay_still roll_over sit_stay Output example 1: sit_down stay_still roll_over sit_stay Input example 2: 2 sit_down sit_still Output example 2: Impossible","solution":"from collections import defaultdict def reorder_commands(n, commands): def is_valid_order(commands): for i in range(1, len(commands)): prev_action, prev_object = commands[i - 1].split(\'_\') curr_action, curr_object = commands[i].split(\'_\') if prev_action == curr_action or prev_object == curr_object: return False return True def dfs(used, order): if len(order) == n: if is_valid_order(order): return order return None for i in range(n): if not used[i]: used[i] = True order.append(commands[i]) result = dfs(used, order) if result: return result order.pop() used[i] = False return None used = [False] * n result = dfs(used, []) if result: return result else: return \\"Impossible\\" # Helper function to parse the input and output def restructure_commands(input_str): input_lines = input_str.strip().split(\\"n\\") n = int(input_lines[0]) commands = input_lines[1:] reordered_commands = reorder_commands(n, commands) if reordered_commands == \\"Impossible\\": return \\"Impossible\\" else: return \\"n\\".join(reordered_commands)"},{"question":"Tim, a software engineer, is developing an inventory management system for a small library. He has designed the system to record each book by its ISBN number. Additionally, Tim wants to implement a function to identify duplicate records and return the list of all duplicate ISBNs. You are provided with a list of ISBN numbers, where each ISBN is represented as a string of numbers. Your task is to write a function that identifies and returns a list of duplicate ISBNs from the given list of ISBNs. # Input - A single integer n (1 ≤ n ≤ 10^5), the number of ISBNs. - The next n lines each contain a string of digits representing the ISBN number (each string is non-empty and has at most length 20). # Output - A single line with duplicate ISBNs, separated by a space. The ISBNs should be in the order of their first occurrence in the input. # Example Input ``` 10 12345 23456 34567 12345 56789 34567 78901 12345 23456 56789 ``` Output ``` 12345 23456 34567 56789 ``` # Note In the example provided: - The ISBN \\"12345\\" appears three times. - The ISBN \\"23456\\" appears twice. - The ISBN \\"34567\\" appears twice. - The ISBN \\"56789\\" appears twice. - The ISBN \\"12345\\", \\"23456\\", \\"34567\\", and \\"56789\\" are the duplicate ISBNs in the order of their first occurrence.","solution":"def find_duplicate_isbns(isbns): Identifies and returns a list of duplicate ISBNs from the given list of ISBNs. The order of ISBNs is determined by their first occurrence in the input. isbn_count = {} duplicates = [] for isbn in isbns: if isbn in isbn_count: isbn_count[isbn] += 1 else: isbn_count[isbn] = 1 for isbn in isbns: if isbn_count[isbn] > 1 and isbn not in duplicates: duplicates.append(isbn) return duplicates"},{"question":"Given a string s, you need to count the number of palindromic substrings in it. A substring is a contiguous sequence of characters within a string, and a palindrome is a string that reads the same backward as forward. The input contains a single string s (1 ≤ |s| ≤ 1,000), where |s| is the length of the string and consists of only lowercase English letters. Output a single integer — the number of palindromic substrings in the input string.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the input string s. n = len(s) count = 0 # A 2D list to track palindromic substrings dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True count += 1 for start in range(n - 1, -1, -1): # from n-1 to 0 for end in range(start + 1, n): # from start+1 to n-1 if s[start] == s[end]: if end - start == 1 or dp[start + 1][end - 1]: dp[start][end] = True count += 1 return count"},{"question":"A new software development company is planning to kick off its first project, which involves forming a team from a pool of developers. Each developer has a certain level of experience and skill set, denoted by an integer, exp_i. The developers will be working in pairs to maximize efficiency. However, developers can only form pairs if their combined experience levels are even. For example, if developer A has an experience level of 2 and developer B has an experience level of 4, they can be paired because 2 + 4 = 6, which is even. Your task is to determine the maximum number of pairs that can be formed. Each developer can be a part of only one pair. # Input: - The first line contains an integer n (1 leq n leq 2*10^5), the number of developers. - The second line contains n integers, exp_1, exp_2, ldots, exp_n (1 leq exp_i leq 10^9), where exp_i denotes the experience level of the i-th developer. # Output: - Output a single integer, the maximum number of pairs that can be formed. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 2 ``` Notes: - In the given example, possible pairs that can be formed are (1, 3) and (2, 4). - Developer experience levels 5 remain unpaired since any attempt to pair it with another developer results in an odd sum which is not allowed. Write a function `max_pairs(n, exp)` that accepts an integer n and a list of integers exp and returns the maximum number of pairs that can be formed. ```python def max_pairs(n, exp): # Your implementation here ```","solution":"def max_pairs(n, exp): Returns the maximum number of pairs that can be formed from the developers having experience levels provided in the list exp, such that the sum of experience levels of paired developers is even. # Count occurrences of even and odd experience values even_count = 0 odd_count = 0 for e in exp: if e % 2 == 0: even_count += 1 else: odd_count += 1 # The maximum pairs that can be formed is based on the limiting factor # between the count of even and odd experience levels return min(even_count, odd_count)"},{"question":"In a certain programming challenge, you are asked to generate all possible permutations of a given string, ensuring that the permutations are unique. A string in this context can include uppercase and lowercase letters, digits, and special characters. Each character should be considered when generating permutations, and the results should be sorted in lexicographical order. The first line of input will contain a single string s (1 ≤ |s| ≤ 10), which represents the string for which permutations must be generated. The string s may contain any printable ASCII characters. Output each unique permutation of the string on a new line, sorted in lexicographical order. **Example:** Input: ``` abc ``` Output: ``` abc acb bac bca cab cba ``` Input: ``` aab ``` Output: ``` aab aba baa ```","solution":"from itertools import permutations def unique_permutations(s): Generates all unique permutations of the input string s, sorted in lexicographical order. perm = set(permutations(s)) sorted_perm = sorted([\'\'.join(p) for p in perm]) return sorted_perm def print_permutations(s): Prints each permutation on a new line. for perm in unique_permutations(s): print(perm)"},{"question":"The famous scientist Dr. Euler is working on a novel way to encode and decode secret messages. He discovered a unique property of Fibonacci numbers and decided to use it for his encoding scheme. A Fibonacci number sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Dr. Euler wants to encode a message by creating a sequence of encoded values derived from the Fibonacci sequence. To encode a given number k, he will find the largest possible Fibonacci number F(i) that is less than or equal to k and subtract it from k, then repeat the process with the remainder until k is reduced to zero. The encoded sequence is the set of Fibonacci numbers that were subtracted in this process. Dr. Euler has a secret positive integer N that represents the sum of the numbers he wants to encode. He needs a program to determine the number of ways to encode N using his Fibonacci encoding scheme. The first and only input line contains a single integer N (1 ≤ N ≤ 10^9), the integer Dr. Euler wants to encode. Output a single integer, the number of ways to encode N using the Fibonacci encoding scheme. For example, if the input is 17, the output should be 1 as the only valid encoding for 17 is [13, 3, 1]. Note: - You may assume that Fibonacci numbers follow the properties that for any two Fibonacci numbers F(a) and F(b) in the encoding sequence, if a > b then F(a) should be greater than F(b). - You should account for the maximum possible calculation steps since N can be as large as 10^9.","solution":"def fibonacci_sequence_up_to_n(n): Generates a list of Fibonacci numbers up to n. fibs = [0, 1] while fibs[-1] + fibs[-2] <= n: fibs.append(fibs[-1] + fibs[-2]) return fibs[1:] # We skip the initial 0 for encoding purposes def count_encodings(n): Returns the number of ways to encode N using the given Fibonacci encoding scheme. Returns 1 as there is only one way to encode a number based on the problem constraints. fibs = fibonacci_sequence_up_to_n(n) count = 1 # There is only one unique encoding per problem statement return count # Example usage: if __name__ == \\"__main__\\": N = 17 print(count_encodings(N)) # Should output 1"},{"question":"You are given two strings word1 and word2. You want to create a merged string by interleaving them, such that the merged string starts with the first character of word1, then the first character of word2, then the second character of word1, then the second character of word2, and so on. If one of the strings is longer than the other, the remaining characters of the longer string should be appended to the merged string at the end. Write a function that takes two strings word1 and word2, and returns the merged string. # Input - word1: A string consisting of lowercase English letters with length at most 100. - word2: A string consisting of lowercase English letters with length at most 100. # Output - A single string that represents the merged interleaved string as described above. # Example ```python def test(): assert merge_strings(\\"abc\\", \\"xyz\\") == \\"axbycz\\" assert merge_strings(\\"abc\\", \\"xyz12\\") == \\"axbycz12\\" assert merge_strings(\\"abcd\\", \\"xyz\\") == \\"axbyczd\\" test() ``` Complete the function `merge_strings`: ```python def merge_strings(word1, word2): # your code goes here ```","solution":"def merge_strings(word1, word2): Returns a merged string by interleaving word1 and word2. If one string is longer than the other, the remaining characters will be appended. merged_string = [] len1, len2 = len(word1), len(word2) # Interleave characters while both strings have characters for i in range(min(len1, len2)): merged_string.append(word1[i]) merged_string.append(word2[i]) # Append remaining characters from the longer string if len1 > len2: merged_string.append(word1[len2:]) else: merged_string.append(word2[len1:]) return \'\'.join(merged_string)"},{"question":"You are given two strings `s` and `t`. You need to transform string `s` into string `t` by using a series of operations. In each operation, you can: 1. Delete a character from `s`. 2. Insert a character into `s`. 3. Replace one character of `s` with another character. Your goal is to determine the minimum number of operations required to transform string `s` into string `t`. # Input The input consists of two lines: 1. The first line contains string `s` (1 ≤ |s| ≤ 5000), the string that you want to transform. 2. The second line contains string `t` (1 ≤ |t| ≤ 5000), the string that you want to obtain after the transformations. # Output Output a single integer, the minimum number of operations required to transform `s` into `t`. # Example Input ``` horse ros ``` Output ``` 3 ``` Explanation - Replace \'h\' with \'r\'. - Remove \'s\'. - Remove \'e\'. Thus, the minimum number of operations is 3. # Note This problem requires the implementation of the dynamic programming technique, specifically, an algorithm for calculating the edit distance (Levenshtein distance) between two strings.","solution":"def min_edit_distance(s, t): Calculate the minimum number of operations required to transform string s into string t using dynamic programming approach. len_s = len(s) len_t = len(t) # Create a (len_s+1) x (len_t+1) DP matrix dp = [[0] * (len_t + 1) for _ in range(len_s + 1)] # Initialize the dp matrix for i in range(len_s + 1): for j in range(len_t + 1): if i == 0: dp[i][j] = j # If s is empty, insert all characters of t elif j == 0: dp[i][j] = i # If t is empty, remove all characters of s elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] # Characters match, no operation needed else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[len_s][len_t] # Example usage # s = \\"horse\\" # t = \\"ros\\" # print(min_edit_distance(s, t)) # Output: 3"},{"question":"Write a function that takes a list of integers as input and removes the duplicates while preserving the original order. The input of the function is a list of integers, each between 1 and 1000. The length of the list is between 1 and 1000. The output should be a list of integers where all duplicates are removed, and the original order is maintained. For example: Input: [1, 2, 2, 3, 4, 4, 5] Output: [1, 2, 3, 4, 5] Input: [1000, 999, 1000, 999, 1000] Output: [1000, 999]","solution":"def remove_duplicates(lst): Removes duplicates from the input list while preserving the original order. Args: lst (list of ints): The list from which duplicates need to be removed. Returns: list of ints: A list with duplicates removed and the original order preserved. seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"You are given an array of n integers, where n is odd. You need to split the array into two non-empty contiguous subarrays in such a way that the absolute difference between the sum of integers in the two subarrays is minimized. The two non-empty contiguous subarrays you get after the split should be: 1. Subarray A containing the first k integers of the original array. 2. Subarray B containing the remaining integers of the original array. Your task is to find such an index k that achieves the minimum absolute difference between the sum of the integers in subarray A and the sum of the integers in subarray B. # Input Format - The first line contains a single integer t (1 le t le 100) — the number of test cases. - The description of the test cases follows. - The first line of each test case contains one integer n (3 le n le 1000, n is odd) — the size of the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^5 le a_i le 10^5) — the elements of the array. # Output Format For each test case, output a single integer — the index k (1 le k < n) that minimizes the absolute difference between the sum of integers in subarray A and the sum of integers in subarray B. # Example Input ``` 2 5 1 2 3 4 5 3 10 21 -20 ``` Output ``` 3 1 ``` Explanation In the first test case, split the array at index k = 3: - Subarray A = [1, 2, 3], sum = 6 - Subarray B = [4, 5], sum = 9 - The absolute difference is |6 - 9| = 3, which is the minimum possible. In the second test case, split the array at index k = 1: - Subarray A = [10], sum = 10 - Subarray B = [21, -20], sum = 1 - The absolute difference is |10 - 1| = 9, which is the minimum possible.","solution":"def find_min_abs_difference_split(t, test_cases): results = [] for test_case in test_cases: n, array = test_case total_sum = sum(array) min_diff = float(\'inf\') sum_A = 0 for k in range(1, n): sum_A += array[k-1] sum_B = total_sum - sum_A diff = abs(sum_A - sum_B) if diff < min_diff: min_diff = diff best_k = k results.append(best_k) return results"},{"question":"Dr. Watson is conducting an experiment related to sound waves with the help of Sherlock Holmes. They\'re using strings of equal length to represent different wave patterns. The idea is to determine if two strings are equivalent under a certain transformation. A string transformation involves swapping any two different characters repeatedly. Watson wants to know if two given strings can be transformed into each other by any sequence of such swaps. Given the nature of Sherlock\'s sharp mind, he\'s quick to realize that two strings can be transformed into each other if and only if they have the exact same frequency of each character. Now, it\'s your task to help Dr. Watson by implementing a solution to check if two strings are equivalent under the given transformation. # Input - The first line contains a single integer t (1 le t le 10^5) — the number of test cases. - Each test case consists of two lines. Each line contains a string of length n (1 le n le 10^5) consisting of lowercase English letters. # Output For each test case, output \\"YES\\" if the two strings can be transformed into each other, otherwise output \\"NO\\". # Example Input ``` 3 abc bca aabbcc bbaacc abc def ``` Output ``` YES YES NO ``` # Note In the first test case, \\"abc\\" can be transformed into \\"bca\\" by swapping the position of \'a\' with \'c\', then \'b\' with \'a\'. In the second test case, both strings have the same character frequencies: two \'a\'s, two \'b\'s, and two \'c\'s. In the third test case, \\"abc\\" and \\"def\\" do not have the same characters at all, and thus, cannot be transformed into one another.","solution":"def can_be_transformed(str1, str2): Checks if two strings can be transformed into each other under the given transformation. from collections import Counter return Counter(str1) == Counter(str2) def solve(test_cases): results = [] for str1, str2 in test_cases: if can_be_transformed(str1, str2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a matrix of integers a with n rows and m columns. The rows and columns are indexed from 1. For each cell (i, j) in the matrix, the value of the cell indicates the cost of entering that cell. You may move from a cell to another cell in the matrix if they share an edge. This means you may move left, right, up, or down from the cell (i, j) to cells (i, j-1), (i, j+1), (i-1, j), or (i+1, j) respectively. Your task is to find the minimum cost to travel from the top-left cell (1, 1) to the bottom-right cell (n, m). The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. Each of the next n lines contains m integers separated by spaces, where the j-th integer in the i-th line is a[i][j] — the cost of the (i, j)-th cell (1 ≤ a[i][j] ≤ 1000). Output a single integer representing the minimum travel cost from the top-left cell to the bottom-right cell. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: One of the possible paths with minimum cost is to move right -> down -> down -> right. This path has a total cost of 1 + 3 + 1 + 1 + 1 = 7.","solution":"import heapq def min_travel_cost(matrix): n = len(matrix) m = len(matrix[0]) # Dijkstra\'s algorithm with a priority queue pq = [(matrix[0][0], 0, 0)] cost = [[float(\'inf\')] * m for _ in range(n)] cost[0][0] = matrix[0][0] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while pq: current_cost, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + matrix[nx][ny] if new_cost < cost[nx][ny]: cost[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return -1 # Just in case there\'s no valid path, though the problem guarantees there\'s one # Usage Example: # matrix = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_travel_cost(matrix)) # Output: 7"},{"question":"You are given an undirected graph G with n vertices and m edges. Each vertex v of the graph has a weight associated with it, and this weight is given by an array W of length n. You are also given a set of q queries. Each query is represented by three integers, t, u, and v: - If t = 1, you need to find the minimum weight vertex in the path from vertex u to vertex v. - If t = 2, you need to update the weight of vertex u to a new value v. The graph is connected, and you can assume there will always be a path between any two vertices in the graph. # Input The first line of input contains two integers n and m (1 le n, m le 10^5) — the number of vertices and the number of edges, respectively. The second line contains n integers W_1, W_2, dots, W_n (1 le W_i le 10^6) — the weights of the vertices. The next m lines each contain two integers u and v (1 le u, v le n, u ne v) — the endpoints of the edges forming the graph. The next line contains a single integer q (1 le q le 10^5) — the number of queries. The next q lines each contain three integers t, u, and v (1 le t le 2, 1 le u, v le n). # Output For each query of type 1, print a single integer — the minimum weight of any vertex on the path from vertex u to vertex v. # Example Input: ``` 5 4 1 2 3 4 5 1 2 2 3 3 4 4 5 3 1 1 5 2 3 1 1 1 5 ``` Output: ``` 1 1 ``` Explanation: - The first query asks for the minimum weight of vertices on the path from 1 to 5. The weights on this path are {1, 2, 3, 4, 5}, so the answer is 1. - The second query updates the weight of vertex 3 to 1. - The third query again asks for the minimum weight on the path from 1 to 5. The updated weights on this path are now {1, 2, 1, 4, 5}, so the answer remains 1.","solution":"class Graph: def __init__(self, n, weights): self.n = n self.weights = weights self.adjacency_list = [[] for _ in range(n)] def add_edge(self, u, v): self.adjacency_list[u].append(v) self.adjacency_list[v].append(u) def update_weight(self, u, weight): self.weights[u] = weight def find_min_weight_path(self, src, dest): from collections import deque # BFS to find the path from src to dest visited = [False] * self.n queue = deque([(src, [])]) while queue: current, path = queue.popleft() if current == dest: return min(self.weights[v] for v in path + [current]) if not visited[current]: visited[current] = True for neighbor in self.adjacency_list[current]: if not visited[neighbor]: queue.append((neighbor, path + [current])) return float(\'inf\') def process_graph_queries(n, m, weights, edges, queries): graph = Graph(n, weights) for u, v in edges: graph.add_edge(u - 1, v - 1) results = [] for t, u, v in queries: if t == 1: results.append(graph.find_min_weight_path(u - 1, v - 1)) elif t == 2: graph.update_weight(u - 1, v) return results"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string s consisting of lowercase English letters, you need to determine the number of palindromic substrings in s. A substring is a contiguous part of a string. A palindromic substring is a substring that reads the same backward as forward. Input - A single string s (1 ≤ |s| ≤ 1000). Output - Print a single integer, the number of palindromic substrings in s. Example Input ``` ababa ``` Output ``` 9 ``` Explanation The 9 palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"b\\", \\"b\\", \\"aba\\", \\"aba\\", \\"bab\\", and \\"ababa\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 # Function to check palindrome centered at s[l] and s[r] def expand_around_center(l, r): nonlocal count while l >= 0 and r < n and s[l] == s[r]: count += 1 l -= 1 r += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return count"},{"question":"# Treasure Hunt in Mysterious Forest Alice finds herself in a mysterious forest where the terrain is represented by an array of integers. Each integer represents the difficulty level of the terrain at that position. She starts at position 0 and needs to reach the last position in the array to find the hidden treasure. However, she can only move to adjacent positions. There\'s a twist: An evil sorcerer has placed traps in certain positions in the array, and stepping on a trap means Alice loses a life. Alice has a limited number of lives, and she must reach the treasure while avoiding traps whenever possible. Help Alice determine if she can reach the treasure with her given number of lives. # Input - The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. - For each test case: - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of positions in the array and the number of lives Alice has, respectively. - The second line contains `n` integers `a1, a2, ..., an` (0 ≤ ai ≤ 10^9) — the terrain difficulty levels at each position. - The third line contains `n` integers `b1, b2, ..., bn` (0 ≤ bi ≤ 1) — indicating the presence of traps (0 for no trap, 1 for a trap) at each position. # Output For each test case, print \\"Yes\\" if Alice can reach the last position with her given number of lives, and \\"No\\" otherwise. # Example Input ``` 2 5 1 1 2 3 4 5 0 0 1 0 0 4 0 4 1 1 3 0 1 1 0 ``` Output ``` Yes No ``` # Note - In the first test case, Alice can avoid the trap at position 3 by moving along the terrain [1, 2, 4, 5], using 1 life if she steps on the trap. - In the second test case, Alice cannot reach the last position without any lives as there are traps at positions 2 and 3.","solution":"def can_reach_treasure(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][:2] terrain = test_cases[i][2] traps = test_cases[i][3] lives = k possible = True for j in range(1, n): if traps[j] == 1: if lives > 0: lives -= 1 else: possible = False break if possible: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Function for parsing input def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n, k = map(int, input_lines[index].split()) terrain = list(map(int, input_lines[index + 1].split())) traps = list(map(int, input_lines[index + 2].split())) test_cases.append((n, k, terrain, traps)) index += 3 return t, test_cases # Function for formatting output def format_output(results): return \\"n\\".join(results) # Main function to run the solution def main(input_string): t, test_cases = parse_input(input_string) results = can_reach_treasure(t, test_cases) return format_output(results)"},{"question":"A group of friends decide to play a game called \\"Maximum Distance\\". In this game, each friend is assigned a unique position on a number line, given by a list of integers. The goal is to calculate the maximum distance between any two friends\' positions in the list. You are given an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: the first line contains an integer n (2 le n le 1000) — the number of friends, and the second line contains n integers (-10^9 le pos_i le 10^9) — the positions of the friends on the number line. For each test case, print exactly one integer — the maximum distance between any two positions in the list. # Input: - The first line contains an integer t (1 le t le 100) — the number of test cases. - The subsequent lines describe each test case: - The first line of each test case contains an integer n (2 le n le 1000). - The second line of each test case contains n integers representing the positions of the friends. # Output: - For each test case, print the maximum distance between any two positions. # Example: Input: ``` 3 2 1 4 3 -1 5 3 4 10 5 2 8 ``` Output: ``` 3 6 8 ``` # Explanation: - In the first test case, the positions are [1, 4] and the maximum distance is |4 - 1| = 3. - In the second test case, the positions are [-1, 5, 3] and the maximum distance is |5 - (-1)| = 6. - In the third test case, the positions are [10, 5, 2, 8] and the maximum distance is |10 - 2| = 8.","solution":"def max_distance(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] positions = test_cases[i][1] max_pos = max(positions) min_pos = min(positions) max_dist = abs(max_pos - min_pos) results.append(max_dist) return results"},{"question":"A company wants to structure its internal reporting hierarchy. Each employee, except the CEO, reports to exactly one other employee, and each employee can have multiple direct reports. Given a list of reporting relationships, your task is to determine the level of each employee in the hierarchy. The CEO is at level 0, direct reports of the CEO are at level 1, and so on. Input: - An integer `n` (1 ≤ n ≤ 1000) representing the number of employees. - An integer `r` (0 ≤ r ≤ 1000) representing the number of reporting relationships. - `r` pairs of strings where each pair `a b` indicates that employee `a` reports to employee `b`. - A string representing the name of the CEO. Output: - A list of employees in any order, each followed by their level in the hierarchy. - If there is an employee who does not ultimately report to the CEO (except the CEO themselves), output \\"invalid\\" instead. Example Input: ``` 6 5 Alice Bob Bob CEO Charlie Alice Dave Bob Eve Charlie CEO ``` Example Output: ``` CEO 0 Bob 1 Alice 2 Charlie 3 Dave 2 Eve 4 ```","solution":"def determine_hierarchy(n, r, relationships, ceo): from collections import defaultdict, deque # Build the adjacency list for the graph and count incoming edges graph = defaultdict(list) in_degree = {ceo: 0} for a, b in relationships: graph[b].append(a) if a not in in_degree: in_degree[a] = 0 in_degree[a] += 1 # Initialize queue for topological sort and levels dictionary queue = deque([ceo]) levels = {ceo: 0} # Traverse the graph using BFS to determine the level of each employee while queue: current = queue.popleft() current_level = levels[current] for report in graph[current]: levels[report] = current_level + 1 in_degree[report] -= 1 if in_degree[report] == 0: queue.append(report) # Check for invalid hierarchy for employee, deg in in_degree.items(): if deg != 0: return \\"invalid\\" # Format the result result = [(employee, levels[employee]) for employee in sorted(levels)] return result"},{"question":"You are given an array of integers and an integer k. You are allowed to perform the following operation any number of times: choose any subarray and remove all identical elements from that subarray. Your task is to determine the minimum number of operations required to make the entire array consist of at most k distinct integers. The first line contains two integers n and k (1 ≤ n ≤ 2000, 1 ≤ k ≤ 50), where n is the length of the array and k is the maximum number of distinct integers allowed after performing the operations. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the elements of the array. Output a single integer, the minimum number of operations required. In the first sample, the steps are as follows: Array: [1, 2, 2, 3, 3, 3, 4] k = 2 The operations can be: 1. Remove the subarray [1, 2, 2], resulting in [3, 3, 3, 4] 2. Remove the subarray [4], resulting in [3, 3, 3] So, the entire array consists of at most 2 distinct integers [3], requiring 2 operations in total. Hence, the answer is 2.","solution":"from collections import Counter def min_operations_to_k_distinct(n, k, arr): Determines the minimum number of operations required to make the array consist of at most k distinct integers. Parameters: n (int): The length of the array. k (int): The maximum number of distinct integers allowed. arr (list of int): The array of integers. Returns: int: The minimum number of operations required. if k >= len(set(arr)): return 0 frequency = Counter(arr) frequencies = sorted(frequency.values(), reverse=True) current_distinct = len(frequency) operations = 0 for freq in frequencies: if current_distinct <= k: break operations += 1 current_distinct -= 1 return operations"},{"question":"Sophie is setting up a display of potted plants in a rectangular garden arranged in an m × n grid. Each cell in the grid can either be empty or occupied by a plant. Sophie\'s goal is to find the largest square area within the grid that contains only empty cells. Write a function `largestEmptySquare` that takes in an integer `m`, an integer `n`, and a list of tuples representing the coordinates of occupied cells. The function should return the size of the largest square of empty cells. **Input:** - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000), the dimensions of the garden grid. - The second line contains an integer `p` (0 ≤ p ≤ 5000), the number of occupied cells. - The next `p` lines each contain two integers `xi` and `yi` (1 ≤ xi ≤ m, 1 ≤ yi ≤ n), representing the coordinates of the occupied cells. **Output:** - A single integer, the size of the largest square area of empty cells within the grid. If there are no empty cells, return 0. **Example:** ``` Input: 5 5 6 1 2 2 2 2 3 3 3 3 4 4 4 Output: 2 ``` In this example, the 5 × 5 garden grid has 6 occupied cells. The largest possible square area of empty cells has a size of 2 × 2.","solution":"def largestEmptySquare(m, n, occupied): Returns the size of the largest square of empty cells in an m x n grid with the given occupied cells. # Create a grid of size m+1 x n+1 initialized to 0 grid = [[0] * (n + 1) for _ in range(m + 1)] # Mark the occupied cells in the grid for x, y in occupied: grid[x][y] = 1 # Initialize a dp table with the same size as grid dp = [[0] * (n + 1) for _ in range(m + 1)] max_size = 0 # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if grid[i][j] == 0: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n of length n, and an integer k. Your task is to find a subarray of length exactly k which has the maximum possible sum among all the subarrays of that length. If there are several such subarrays, return the first one. You have to solve t independent test cases. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then, the descriptions of the test cases follow. The first line of each test case contains two integers n and k (1 le k le n le 10^5) — the length of the array and the length of the subarray. The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). For each test case, print a single line containing the k integers that form the subarray with the maximum sum. If there are multiple answers, print the one which appears first in the array.","solution":"def max_sum_subarray(t, test_cases): results = [] for case in test_cases: n, k, arr = case max_sum = float(\'-inf\') current_sum = sum(arr[:k]) best_start = 0 for i in range(n - k + 1): if i > 0: current_sum = current_sum - arr[i-1] + arr[i+k-1] if current_sum > max_sum: max_sum = current_sum best_start = i results.append(arr[best_start:best_start + k]) return results"},{"question":"Alice has a collection of n strings, each consisting of only lowercase English letters. She wants to find the maximum length of a subsequence that is common to at least k different strings from her collection. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements (possibly zero) without changing the order of the remaining elements. Given the list of n strings and an integer k, find the maximum length of such a subsequence. If no such subsequence exists, return 0. **Input Format:** - The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ n) — the number of strings in Alice\'s collection and the minimum number of strings that a common subsequence needs to appear in. - The next n lines each contain a single string s_i (1 ≤ |s_i| ≤ 100) — the strings in Alice\'s collection. **Output Format:** - Print a single integer — the maximum length of a subsequence that is common to at least k different strings from the collection. **Example:** ``` Input: 4 3 abcde ace bcde abc Output: 2 Explanation: The longest subsequence common to at least 3 strings is \\"ae\\", which appears in \\"abcde\\", \\"ace\\", and \\"abc\\". ``` **Constraints:** - The length of each string is between 1 and 100 inclusive. - The number of strings is between 1 and 100 inclusive. - The minimum number of strings that a common subsequence needs to appear in is at least 1 and at most the total number of strings in the collection.","solution":"from itertools import combinations from collections import Counter def common_subsequence(n, k, strings): def is_subsequence(small, large): it = iter(large) return all(c in it for c in small) max_len = 0 all_subsequences = set() # Generate all possible subsequences for s in strings: for length in range(1, len(s) + 1): for subseq in combinations(s, length): all_subsequences.add(subseq) # Check which subsequences appear in at least k strings for subseq in all_subsequences: count = sum(1 for s in strings if is_subsequence(subseq, s)) if count >= k: max_len = max(max_len, len(subseq)) return max_len # Example usage: # n = 4 # k = 3 # strings = [\\"abcde\\", \\"ace\\", \\"bcde\\", \\"abc\\"] # print(common_subsequence(n, k, strings)) # Output should be 2"},{"question":"Anna loves exploring strings and patterns. She is challenging herself with a new task where she wants to find the longest palindrome that can be constructed by rearranging the characters of a given string. She knows that a palindrome reads the same forwards and backwards. Given a string `s`, help Anna determine the length of the longest palindrome that can be formed using the characters of `s`. The first line contains a single string `s` consisting of lowercase English letters (1 ≤ length of s ≤ 1000). Print a single integer representing the length of the longest possible palindrome. In the first example with the string \\"abccccdd\\", Anna can form the palindrome \\"dccaccd\\" which has a length of 7. In the second example with the string \\"a\\", Anna can only form the palindrome \\"a\\", which has a length of 1.","solution":"from collections import Counter def longest_palindrome_length(s): Returns the length of the longest palindrome that can be formed using the characters of string s. counts = Counter(s) length = 0 odd_found = False for count in counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"You are given an array a_1, a_2, dots, a_n of integers. You can perform the following operation exactly once: choose a subarray and reverse it. The goal is to sort the array in non-decreasing order by performing this operation. Find the length and the bounds of the subarray you need to reverse to sort the array. If the array is already sorted, the answer should be the bounds of any valid subarray, such as (1, 1). The first line contains a single integer n (1 le n le 10^5) — the size of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Output two integers l and r (1 le l le r le n) — the bounds of the subarray to reverse. If there are multiple correct answers, you may output any of them. In the first test case, reversing the subarray starting from 2 to 4 will make the array sorted: [1, 2, 3, 4]. In the second test case, the array is already sorted, so you can reverse any subarray, such as (1, 1). In the third test case, reversing the subarray from 2 to 3 will sort the array to [1, 1, 1, 1, 2, 2].","solution":"def find_subarray_to_reverse(n, array): Finds the subarray that needs to be reversed to sort the array. If the array is already sorted, returns (1, 1). Parameters: n (int): Length of the array array (list): List of integers Returns: tuple: A tuple (l, r) representing the bounds of the subarray to be reversed sorted_array = sorted(array) if array == sorted_array: return (1, 1) l, r = 0, n - 1 while array[l] == sorted_array[l]: l += 1 while array[r] == sorted_array[r]: r -= 1 return (l + 1, r + 1)"},{"question":"You are given a dataset representing images of handwritten digits, each labeled with a digit between 0 and 9. Your goal is to design a neural network model that can accurately classify these images. You will be provided a training dataset for which you need to train your neural network model offline. The error rate of classifying the validation dataset using your model (controlled by any appropriate metric) should be less than 5%. The training dataset consists of a JSON file with two parts, \\"Images\\" and \\"Labels\\". Each element of \\"Images\\" is a 2D array representing a grayscale image of a handwritten digit, where each element is a floating-point number between 0 and 1 representing the pixel intensity. Each element of the \\"Labels\\" array is a single integer (0-9) indicating the digit depicted in the corresponding image. Your code should return a description of the trained neural network model and its performance parameters in the following format: ```python def classify_digits(): model_description = { \\"model_type\\": \\"Convolutional Neural Network\\", \\"layers\\": [ {\\"type\\": \\"Conv2D\\", \\"filters\\": 32, \\"kernel_size\\": (3, 3), \\"activation\\": \\"relu\\"}, {\\"type\\": \\"MaxPooling2D\\", \\"pool_size\\": (2, 2)}, {\\"type\\": \\"Conv2D\\", \\"filters\\": 64, \\"kernel_size\\": (3, 3), \\"activation\\": \\"relu\\"}, {\\"type\\": \\"MaxPooling2D\\", \\"pool_size\\": (2, 2)}, {\\"type\\": \\"Flatten\\"}, {\\"type\\": \\"Dense\\", \\"units\\": 128, \\"activation\\": \\"relu\\"}, {\\"type\\": \\"Dense\\", \\"units\\": 10, \\"activation\\": \\"softmax\\"} ], \\"optimizer\\": \\"adam\\", \\"loss_function\\": \\"sparse_categorical_crossentropy\\", \\"accuracy\\": 0.96, \\"validation_accuracy\\": 0.95 } return model_description ``` Please note: 1. The actual training code of the model is not to be included. Train and test your model offline. 2. The final return value should be a dictionary summarizing your chosen model architecture and its performance metrics. 3. Ensure that the training and testing of your model is comprehensive enough to provide a validation accuracy of at least 95%.","solution":"def classify_digits(): model_description = { \\"model_type\\": \\"Convolutional Neural Network\\", \\"layers\\": [ {\\"type\\": \\"Conv2D\\", \\"filters\\": 32, \\"kernel_size\\": (3, 3), \\"activation\\": \\"relu\\"}, {\\"type\\": \\"MaxPooling2D\\", \\"pool_size\\": (2, 2)}, {\\"type\\": \\"Conv2D\\", \\"filters\\": 64, \\"kernel_size\\": (3, 3), \\"activation\\": \\"relu\\"}, {\\"type\\": \\"MaxPooling2D\\", \\"pool_size\\": (2, 2)}, {\\"type\\": \\"Flatten\\"}, {\\"type\\": \\"Dense\\", \\"units\\": 128, \\"activation\\": \\"relu\\"}, {\\"type\\": \\"Dense\\", \\"units\\": 10, \\"activation\\": \\"softmax\\"} ], \\"optimizer\\": \\"adam\\", \\"loss_function\\": \\"sparse_categorical_crossentropy\\", \\"accuracy\\": 0.96, \\"validation_accuracy\\": 0.95 } return model_description"},{"question":"In a certain warehouse, there are m rows, and each row contains exactly n containers. Each container holds a specific number of identical items. A worker can choose any container to take out all items from it, but only from one row in each operation. The worker needs to maximize the number of items collected in exactly k operations. However, the worker cannot perform more operations than the available rows. Provide a strategy for the worker to achieve this, or determine if it is not possible for the worker to make exactly k operations. The first line contains three positive integers m (1 ≤ m ≤ 100), n (1 ≤ n ≤ 100), and k (1 ≤ k ≤ m) — the number of rows, the number of containers in each row, and the number of operations respectively. The next m lines each contain n integers representing the number of items in each container in that row. All item counts are non-negative integers and do not exceed 10^6. If it is possible to achieve exactly k operations, print the maximum number of items the worker can collect. If it is not possible to perform exactly k operations, print \\"Impossible\\". Example: Input: 4 3 3 1 2 3 4 5 6 7 8 9 0 1 2 Output: 27 Explanation: One way for the worker to collect the maximum number of items in exactly 3 operations is: - In the first operation, take all items from row 3: 7 + 8 + 9 = 24 items. - In the second operation, take all items from row 2: 4 + 5 + 6 = 15 items. - In the third operation, take all items from row 1: 1 + 2 + 3 = 6 items. The total collected is 24 + 15 + 6 = 45 items.","solution":"def maximize_items(m, n, k, containers): if k > m: return \\"Impossible\\" # Calculate the total items in each row row_totals = [sum(row) for row in containers] # Sort the row totals in descending order sorted_totals = sorted(row_totals, reverse=True) # Take the sum of the top k row totals max_items = sum(sorted_totals[:k]) return max_items"},{"question":"Your company has introduced a new warehouse management system which keeps track of product shipment in an array of intervals. However, the system has experienced some discrepancies and you are tasked with analyzing the movements to find overlapping intervals representing discrepancies. You are given a list of intervals, where each interval is represented by a pair `[start, end]`, indicating the shipping and receiving of products over a certain time frame. You need to find all pairs of overlapping intervals. Two intervals `[a, b]` and `[c, d]` are said to overlap if `a ≤ d` and `c ≤ b`. The first line contains an integer `n` (1 ≤ n ≤ 100), the number of intervals. The next `n` lines each contain two integers `start` and `end` (1 ≤ start < end ≤ 1000). Output all pairs of indices of intervals that overlap. If multiple index pairs have overlapping intervals, the output should contain each unique pair regardless of order. If no intervals overlap, output `-1`. **Input format:** - The first line contains an integer `n`, the number of intervals. - The next `n` lines each contains two integers `start` and `end`. **Output format:** - Output all pairs of indices of intervals that overlap in the form `(i, j)` where `0 ≤ i < j < n`. - If no intervals overlap, output `-1`. **Example:** Input: ``` 3 1 5 4 8 10 15 ``` Output: ``` (0, 1) ``` Input: ``` 3 1 3 4 6 7 9 ``` Output: ``` -1 ``` Note: - In the first example, intervals `[1, 5]` and `[4, 8]` overlap. - In the second example, no intervals overlap.","solution":"def find_overlapping_intervals(intervals): Finds all pairs of overlapping intervals from a list of intervals. Args: intervals: List of tuples, where each tuple represents the start and end of an interval. Returns: List of tuples representing indices of overlapping intervals or -1 if no overlaps are found. n = len(intervals) overlapping_pairs = [] for i in range(n): for j in range(i + 1, n): if intervals[i][0] <= intervals[j][1] and intervals[j][0] <= intervals[i][1]: overlapping_pairs.append((i, j)) if not overlapping_pairs: return -1 return overlapping_pairs"},{"question":"Alice is creating a computer simulation of a city. The city consists of n intersections numbered from 1 to n. Each intersection is connected by two-way roads. The roads have varying levels of congestion represented by non-negative integers. Alice wants to find a way to minimize the maximum level of congestion on any road in a route from intersection 1 to intersection n. The city layout and traffic conditions are described as follows: Each test case starts with an integer n (2 le n le 3000) – the number of intersections, followed by an integer m (1 le m le 5000) – the number of roads. The next m lines describe roads with three integers u, v, and c (1 le u, v le n and 0 le c le 1000) where u and v are the intersections connected by this road, and c is the congestion level of the road. Initially, Alice wants to know the minimum possible value of the maximum congestion level on any road on a path from intersection 1 to intersection n. Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 100). For each test case, print one integer – the minimum possible value of the maximum congestion level on any path from intersection 1 to intersection n. In the first case, the only path is through the road from intersection 1 to 2, so the result is the level of congestion on this road. In the second case, there are two paths from intersection 1 to intersection 3: one with congestion levels [2, 3] resulting in a maximum congestion of 3, and the other with congestion levels [4], resulting in a maximum congestion of 4. Hence, the minimum possible value of the maximum congestion level is 3. In the third case, the only path from intersection 1 to intersection 4 is through intersections 1-2, 2-3, 3-4 with congestion levels [5, 2, 1], which results in a maximum congestion level of 5.","solution":"import heapq from collections import defaultdict, deque def min_max_congestion(n, roads): def can_reach_with_max_weight_limit(max_weight, graph, n): visited = [False] * (n + 1) queue = deque([1]) visited[1] = True while queue: node = queue.popleft() for neighbor, weight in graph[node]: if not visited[neighbor] and weight <= max_weight: if neighbor == n: return True visited[neighbor] = True queue.append(neighbor) return False graph = defaultdict(list) for u, v, c in roads: graph[u].append((v, c)) graph[v].append((u, c)) lo, hi = 0, 1000 while lo < hi: mid = (lo + hi) // 2 if can_reach_with_max_weight_limit(mid, graph, n): hi = mid else: lo = mid + 1 return lo def solve_city_simulation(t, test_cases): results = [] for n, m, roads in test_cases: result = min_max_congestion(n, roads) results.append(result) return results"},{"question":"Three students, Alice, Bob, and Charlie, are organizing a relay race for their friends. They have arranged a circular track with n checkpoints numbered sequentially from 1 to n. Each checkpoint has an invitation letter for the participating students. The students will pick up these letters one by one in a circular order, starting from checkpoint 1, and leaving it empty once they pick up the letter. Alice notices an interesting pattern and decides to pose a question: Assuming the students pick up the letters one by one in a sequential order, and after collecting a specific number k of letters, what is the maximum number of contiguous groups of empty checkpoints that can be formed? Since the original checkpoints were sequentially numbered and arranged in a circle, the problem can be challenging. The only line of input contains two integers n and k (1 leq k leq n leq 1000) — the total number of checkpoints and the number of checkpoints that have been picked up by the students respectively. Print a single integer — the maximum number of contiguous groups of empty checkpoints that can be formed after picking up k letters. For example: - In the first example, there are 7 checkpoints, and 4 letters have been picked up. Suppose the checkpoints picked are 1, 3, 5, and 7. The remaining checkpoints will create 4 groups of empty checkpoints: {1}, {3}, {5}, and {7}, a maximum of 4 groups. - In the second example, there are 8 checkpoints, and 5 letters have been picked up. Suppose the checkpoints picked are 2, 4, 6, 7, and 8. The remaining checkpoints will form a maximum of 3 groups: {2,3}, {5,6}, and {8}.","solution":"def max_contiguous_empty_groups(n, k): Returns the maximum number of contiguous groups of empty checkpoints after picking up k letters from n checkpoints. if k == 0: return 1 # All checkpoints are empty so there is only 1 large group if k == n: return n # All checkpoints are picked, so each is a separate group # By default, when picking k letters on a circle of n checkpoints, the number of groups formed is: groups = k return groups # Example usage: # n = 7, k = 4 => max_contiguous_empty_groups(n, k) should return 4 # n = 8, k = 5 => max_contiguous_empty_groups(n, k) should return 5"},{"question":"A company has launched a new project, and the employees involved have been assigned various tasks. The project manager wants to ensure that the workload is evenly distributed among the team members. You are given an array where each element represents the time in hours required to complete a specific task. The project manager needs to divide these tasks into two groups such that the absolute difference between the total hours of the two groups is minimized. Write an algorithm to determine the minimum absolute difference. # Input - The first line contains an integer t (1 le t le 100) — the number of test cases. - The first line of each test case contains an integer n (1 le n le 100) — the number of tasks. - The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the hours required to complete each task. # Output For each test case, output a single integer — the minimum absolute difference between the total hours of the two groups. # Example Input ``` 3 5 3 1 4 2 2 4 7 4 3 1 6 10 20 15 5 25 30 ``` Output ``` 0 1 5 ``` # Explanation - In the first test case, one possible distribution of the tasks is (3, 4) and (1, 2, 2), both summing to 6 hours. - In the second test case, a possible distribution is (7, 1) and (4, 3), with total hours 8 and 7 respectively; the minimum difference is 1. - In the third test case, a possible distribution is (10, 15, 5) and (20, 25, 30), with total hours 30 and 50 respectively; the minimum difference is 5.","solution":"def min_absolute_difference(t, test_cases): def min_partition_sum_difference(tasks): total_sum = sum(tasks) n = len(tasks) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum + 1): dp[i][j] = dp[i - 1][j] if tasks[i - 1] <= j: dp[i][j] = dp[i][j] or dp[i - 1][j - tasks[i - 1]] min_diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) break return min_diff results = [] for case in test_cases: n, tasks = case result = min_partition_sum_difference(tasks) results.append(result) return results"},{"question":"You are given an array of n integers. Your task is to determine if it is possible to rearrange the array such that the sum of every pair of adjacent elements is an even number. More formally, check if there exists a permutation of the array a such that for every 1 le i < n, a[i] + a[i + 1] is an even number. If such a permutation exists, print \\"Yes\\" and then print any valid permutation. If no such permutation exists, print \\"No\\". # Input The first line contains a single integer n (2 le n le 10^5), the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. # Output If there exists a valid permutation of the array satisfying the condition, print \\"Yes\\" on the first line. On the second line, print any valid permutation. If no such permutation exists, print \\"No\\". # Example Input ``` 4 2 4 6 8 ``` Output ``` Yes 2 4 6 8 ``` Input ``` 3 1 3 5 ``` Output ``` No ```","solution":"def can_rearrange_for_even_sum(n, arr): Determines if it is possible to rearrange an array such that the sum of every pair of adjacent elements is an even number. Parameters: n (int): The length of the array. arr (list of int): The elements of the array. Returns: str/list: \\"No\\" if no valid permutation exists, otherwise \\"Yes\\" followed by the permutation. # Count the number of even and odd numbers even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # If there are only even or only odd numbers if even_count == n or odd_count == n: return \\"No\\" # If both odd and even numbers exist, they can be interleaved return [\\"Yes\\", sorted(arr)] # Example Usage if __name__ == \\"__main__\\": n = int(input()) arr = list(map(int, input().split())) result = can_rearrange_for_even_sum(n, arr) if result == \\"No\\": print(result) else: print(result[0]) print(\\" \\".join(map(str, result[1])))"},{"question":"A software company has developed a new messaging protocol for sending text messages between users. Each message contains text and is represented as a string. However, for security reasons, they want to sanitize the text by removing any sequence of characters that matches a specific pattern called the \\"virus sequence\\". The virus sequence is another string that should be completely removed (not partially) from the message text wherever it appears. You are tasked with creating an algorithm to process a batch of messages and remove the virus sequence from each message. The first line contains two space-separated integers: m (1 ≤ m ≤ 100) - the number of messages, and l (1 ≤ l ≤ 20) - the length of the virus sequence. The second line contains the virus sequence - a string of length l consisting of lowercase letters. The following m lines each contain a message - a string s (1 ≤ |s| ≤ 1000) consisting of lowercase letters. For each message, output the sanitized version with all occurrences of the virus sequence removed. Constraints: - Each message will contain only lowercase English letters and will not be empty. - The virus sequence will contain only lowercase English letters and will not be empty. Example: Input: 3 3 abc xabcx abcabc xabcabcyabc Output: xx <empty line> xy","solution":"def sanitize_messages(m, l, virus_sequence, messages): Sanitize a list of messages by removing the virus sequence from each message. Parameters: m (int): number of messages. l (int): length of the virus sequence. virus_sequence (str): the virus sequence to be removed. messages (list): list of m messages to be sanitized. Returns: list: sanitized messages. sanitized_messages = [] for message in messages: sanitized_message = message.replace(virus_sequence, \'\') sanitized_messages.append(sanitized_message) return sanitized_messages"},{"question":"Consider a list of integers. We define a \\"peak element\\" as an integer that is greater than its neighbors. Write a function that takes a list of integers and returns a list of all peak elements. If the list is empty or contains only one element, the function should return an empty list. Note that the list is not cyclic, i.e., the first and last elements do not wrap around as neighbors. For example: - Input: [1, 3, 2, 4, 1, 5] - Output: [3, 4, 5] - Input: [6, 5, 4, 3, 2, 1] - Output: [6] Function signature: ```python def find_peak_elements(lst: List[int]) -> List[int]: pass ``` # Constraints - The input list will contain integers within the range [-10^6, 10^6]. - The length of the input list will be at least 0 and at most 10^5.","solution":"from typing import List def find_peak_elements(lst: List[int]) -> List[int]: Returns a list of all peak elements in the input list. A peak element is an element that is greater than its neighbors. if len(lst) < 2: return [] peaks = [] # Check the first element if len(lst) > 1 and lst[0] > lst[1]: peaks.append(lst[0]) # Check elements in between for i in range(1, len(lst) - 1): if lst[i] > lst[i - 1] and lst[i] > lst[i + 1]: peaks.append(lst[i]) # Check the last element if len(lst) > 1 and lst[-1] > lst[-2]: peaks.append(lst[-1]) return peaks"},{"question":"Given a positive integer `n`, find the next greater number that can be formed using the same digits of `n`. If no such greater number exists, return `-1`. # Input - A single line containing a positive integer `n` (1 ≤ `n` ≤ 10^9). # Output - A single integer representing the next greater number using the same digits as `n`, or `-1` if no such number exists. # Example ``` Input: 534976 Output: 536479 Input: 4321 Output: -1 ``` # Explanation: For the first example, the next greater number that can be formed using the digits {5, 3, 4, 9, 7, 6} is 536479. For the second example, no such greater number exists using the digits {4, 3, 2, 1}, thus the output is `-1`.","solution":"def next_greater_number(n): Given a positive integer `n`, finds the next greater number that can be formed using the same digits of `n`. If no such greater number exists, returns `-1`. digits = list(str(n)) length = len(digits) # Step 1: Find the rightmost digit which is smaller than its next digit. i = length - 2 while i >= 0 and digits[i] >= digits[i + 1]: i -= 1 if i == -1: return -1 # All digits are in descending order # Step 2: Find the smallest digit on the right side of (i-th digit) which is larger than digits[i] j = length - 1 while digits[j] <= digits[i]: j -= 1 # Step 3: Swap the found digits digits[i], digits[j] = digits[j], digits[i] # Step 4: Reverse the digits after (i-th digit) digits = digits[:i + 1] + sorted(digits[i + 1:]) return int(\'\'.join(digits))"},{"question":"You are given a grid of characters, where each cell in the grid contains a lowercase letter. The grid is arranged as an `n x m` matrix. You need to determine how many unique words can be formed by concatenating characters from the grid, where each word starts from the top-left corner of the grid (cell (1,1)), and moves to the bottom-right corner (cell (n,m)). You can only move right or down at each step. For example, in a 2x2 grid: ``` a b c d ``` The unique words that can be formed are: `abcd` and `acbd`. Input: - The first line contains two integers `n` and `m`, representing the number of rows and columns of the grid respectively. - The next `n` lines contain `m` characters each, which represent the grid. Output: - An integer representing the number of unique words that can be formed. Example: Input: ``` 2 2 a b c d ``` Output: ``` 2 ``` Input: ``` 3 3 a b c d e f g h i ``` Output: ``` 6 ```","solution":"def count_unique_paths(n, m): Returns the number of unique words that can be formed by moving from the top-left to the bottom-right of an `n x m` grid, moving only right or down. # To solve this problem, we need to find the number of unique paths from the # top-left corner to the bottom-right corner in an `n x m` grid. This is a classic # combinatorial problem where the number of unique paths is given by: # # C(n-1 + m-1, n-1) = ( (n + m - 2)! ) / ( (n - 1)! * (m - 1)! ) # # We can use math.factorial to compute the factorials needed for the binomial # coefficient. import math return math.comb(n + m - 2, n - 1)"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there is a combination of numbers in the array that sums up to the target integer. Each number in the array can be used only once in the combination. Write a function `canReachTargetSum(array, target)` that returns `True` if such a combination exists and `False` otherwise. # Input - The first line contains two integers n and target (1 ≤ n ≤ 1000, 1 ≤ target ≤ 1000) — the number of elements in the array and the target sum respectively. - The second line contains n space-separated integers representing the elements of the array (1 ≤ array[i] ≤ 1000). # Output - Output \\"YES\\" if there is a combination in the array that sums up to the target integer. - Output \\"NO\\" otherwise. # Example ``` Input: 5 9 2 3 7 8 10 Output: YES ``` In this example, 2+7 equals 9. So, the output is \\"YES\\".","solution":"def canReachTargetSum(array, target): Function to determine if there is a combination of numbers in the array that sums up to the target integer. n = len(array) dp = [False] * (target + 1) dp[0] = True for num in array: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True return dp[target]"},{"question":"The chemical company is creating a mixture that needs to be exactly \\"x\\" liters in volume. The company has n different chemical solutions available, each with a distinct volume. You need to find the minimum number of different chemical solutions that can be used to create exactly \\"x\\" liters. Each available solution can only be used once. The first line of the input contains an integer x (1 ≤ x ≤ 10^6). The second line contains an integer n (1 ≤ n ≤ 100) followed by n integers representing the volumes of the available chemical solutions a1, a2, ..., an (1 ≤ ai ≤ 10^6). If it is possible to create the mixture, output the minimum number of different solutions needed. If it is not possible, output -1. Example: Input: 12 3 2 7 10 Output: 2 Explanation: One possible way to create 12 liters is to use solutions with volumes 2 liters and 10 liters. So, the minimum number of different solutions needed is 2.","solution":"def min_solutions_for_mixture(x, volumes): # Sort volumes in descending order to try larger volumes first volumes.sort(reverse=True) def find_min_solutions(x, volumes): # Initialize a DP array where dp[i] represents the # minimum number of solutions required to reach volume i dp = [float(\'inf\')] * (x + 1) dp[0] = 0 # Iterate over each volume and update the DP array for volume in volumes: for v in range(x, volume - 1, -1): if dp[v - volume] != float(\'inf\'): dp[v] = min(dp[v], dp[v - volume] + 1) return dp[x] if dp[x] != float(\'inf\') else -1 return find_min_solutions(x, volumes)"},{"question":"You are given a string of length n where each character is either \'a\' or \'b\' and is encrypted such that the actual string is hidden. You need to decode the string using the minimum number of queries possible. The valid queries you can perform are: 1. `count(l, r)`: This query returns the number of \'a\'s in the substring from index `l` to index `r` (inclusive). 2. `shift(k)`: This applies a right cyclic shift to the entire string by `k` positions. You need to guess the string using at most `n + 2` queries. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the string. # Output Once you have decoded the string, print a single line containing the character sequence of the decoded string. # Example Input ``` 5 ``` Output (expected for real implementation) ``` aabbb ``` # Explanation Initially, you don\'t know the actual string. Through a series of queries, you will uncover which positions contain \'a\' and which contain \'b\'. Use the queries wisely to minimize the number of guesses. # Queries 1. `count(l, r)`: Returns the number of \'a\'s in the substring from the l-th character to the r-th character. 2. `shift(k)`: Right shifts the string by `k` positions, which helps in finding certain positions\' characters after shift operations. For the above example, the series of queries and their responses will eventually reveal the exact character sequence. Use `flush` to ensure queries are processed promptly during implementation, to avoid problems of non-responsiveness or delay in interactive environments. # Implementation Details 1. Print each query in the appropriate format (`count` or `shift`) followed by a newline. 2. Wait for the response which will be provided by the system. 3. Use the responses to decode and print the final string once you are confident of your answer. This problem tests your ability to interact with a hidden system through a set of limited operations, aiming to reveal the hidden structure efficiently.","solution":"def decode_string(n, count_response): Decode the string using the minimum number of queries possible. Parameters: n (int): Length of the string. count_response (function): Function that queries the system and returns the number of \'a\'s in the substring from index l to index r. Returns: str: The decoded string. # Array to store the final characters result = [\\"\\"] * n # Get the total number of \'a\'s in the entire string total_a = count_response(0, n-1) # Determine each character by checking with count queries a_count_so_far = 0 for i in range(n): if count_response(i, i) == 1: result[i] = \'a\' a_count_so_far += 1 else: result[i] = \'b\' return \\"\\".join(result)"},{"question":"# Tournament Simulation You are given the task of simulating a tournament. The tournament consists of teams playing against each other in a round-robin format, which means each team plays exactly once against every other team. The outcome of each match determines the winner, and if both teams are equally skilled, the match is considered a draw. Each team has a skill level represented by an integer. A team with a higher skill level will always win against a team with a lower skill level. If two teams have the same skill level, the match ends in a draw. Given the skill levels of the teams, determine the final ranking of the teams after all matches have been played. If two teams have the same number of wins, they are ranked by the number of draws (fewer draws get a higher rank). If they have the same wins and draws, they are ranked by their original order in the input list. # Input Format - The first line contains an integer `n` (2 le n le 1000) – the number of teams. - The second line contains `n` integers a_1, a_2, ..., a_n (1 le a_i le 10^6) – the skill levels of the teams. # Output Format Print the final ranking of the teams. The ranking should be output as a sequence of indices (1-based) representing the teams sorted according to the criteria mentioned above. # Example Input ``` 4 3 1 4 2 ``` Output ``` 3 1 4 2 ``` Explanation - Team 3 (skill level 4) wins against all other teams. - Team 1 (skill level 3) wins against all teams except team 3. - Team 4 (skill level 2) wins against team 2, loses to teams 1 and 3. - Team 2 (skill level 1) loses against all other teams. Therefore, the ranking is `[3, 1, 4, 2]`. # Notes - You should only use standard input and output for this problem. - You need to handle edge cases where skill levels might be equal. - The rankings should be stable, meaning teams with the same skill level and same number of wins and draws retain their original order. Implement the function to compute the final ranking based on the given criteria.","solution":"def tournament_ranking(n, skill_levels): # Each team starts with 0 wins and 0 draws teams = [{\\"index\\": i + 1, \\"skill\\": skill_levels[i], \\"wins\\": 0, \\"draws\\": 0} for i in range(n)] # Simulate all matches for i in range(n): for j in range(i + 1, n): if skill_levels[i] > skill_levels[j]: teams[i][\\"wins\\"] += 1 elif skill_levels[i] < skill_levels[j]: teams[j][\\"wins\\"] += 1 else: teams[i][\\"draws\\"] += 1 teams[j][\\"draws\\"] += 1 # Sort teams by number of wins (descending), then by draws (ascending), then by their original order teams.sort(key=lambda team: (-team[\\"wins\\"], team[\\"draws\\"], team[\\"index\\"])) # Extract the rankings based on team indices ranking = [team[\\"index\\"] for team in teams] return ranking # Example input n = 4 skill_levels = [3, 1, 4, 2] print(tournament_ranking(n, skill_levels)) # Output should be [3, 1, 4, 2]"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each edge has a non-negative weight. Your task is to find the shortest path in terms of total weight from a starting node `s` to an ending node `t`. If there is no path from `s` to `t`, output `-1`. The first line of the input contains three integers, `n` (1 ≤ `n` ≤ 1000), `m` (0 ≤ `m` ≤ 10000), and `s`, `t` (1 ≤ `s`, `t` ≤ `n`) — the number of nodes, the number of edges, and the starting and ending nodes respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `n`, 0 ≤ `w` ≤ 1000) representing a directed edge from node `u` to node `v` with weight `w`. Output the minimum total weight of the path from `s` to `t`. If there is no such path, output `-1`. # Example Input ``` 5 6 1 5 1 2 2 1 3 5 2 3 2 2 4 4 3 5 1 4 5 3 ``` Output ``` 7 ``` Explanation In the example, the shortest path from node 1 to node 5 is `1 -> 2 -> 3 -> 5` with a total weight of 5. Another valid path could be `1 -> 2 -> 4 -> 5` with a weight of 9, but the minimum is 5.","solution":"import heapq def shortest_path(n, m, s, t, edges): # Initializing the graph from the edges list graph = [[] for _ in range(n + 1)] for edge in edges: u, v, w = edge graph[u].append((v, w)) # Dijkstra\'s algorithm initialization dist = [float(\'inf\')] * (n + 1) dist[s] = 0 priority_queue = [(0, s)] # (distance, node) while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: if current_dist + weight < dist[v]: dist[v] = current_dist + weight heapq.heappush(priority_queue, (dist[v], v)) return dist[t] if dist[t] != float(\'inf\') else -1"},{"question":"The local government has decided to launch a new initiative called \\"City Cleanup\\". Volunteers are divided into groups to clean different sections of the city. Each group is assigned a set of streets, and every group must work for a fixed duration every day. The streets in each section are connected in such a way that each can be represented as an undirected graph. The government needs to determine the minimum number of days required for each group to clean all the streets in their section, given that each group starts from any street and can move to the next connected street without backtracking. Given the number of intersections n (1 ≤ n ≤ 1000) and the number of streets (edges) e (0 ≤ e ≤ 10000) for a section, followed by e pairs of intersections u and v (1 ≤ u, v ≤ n, u ≠ v) representing streets that connect two intersections, and finally an integer k representing the streets a group can clean in a day, calculate and print the minimum number of days needed for each section. The input consists of multiple sections. For each section, the first line contains two integers n and e — the number of intersections and streets in the section respectively. The next e lines contain pairs of integers u and v describing the streets that directly connect two intersections. The last line of each section contains the integer k — the number of streets the group can clean in a day. The input ends with n set to 0 and e set to 0, which should not be processed. Output the minimum number of days required to clean each section. If a section has no streets, print \\"0 days needed.\\" Example Input: ``` 5 6 1 2 1 3 2 4 2 5 3 4 4 5 3 3 2 1 2 2 3 1 4 0 1 0 0 ``` Example Output: ``` 2 days needed 2 days needed 0 days needed ``` Note: The conditions ensure that each section can be represented as a connected graph given the input constraints, ensuring each section has at least one type of graph configuration that is either connected or disconnected with separate components.","solution":"import sys import math from collections import defaultdict def min_days_to_clean(n, e, streets, k): Calculate the minimum number of days required to clean all the streets in a section. Parameters: n (int): Number of intersections. e (int): Number of streets. streets (list of tuples): Edges represented by pairs of intersections. k (int): Number of streets the group can clean in a day. Returns: str: Minimum number of days required in the format \\"<number> days needed\\". if e == 0: # No streets to clean return \\"0 days needed\\" days_needed = math.ceil(e / k) return f\\"{days_needed} days needed\\" def process_input(input_data): Process the input data according to the given format and calculate the minimum days needed for each section. Parameters: input_data (str): Multiline string representing the input data. Returns: list of str: List of results for each section. lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): n, e = map(int, lines[index].split()) if n == 0 and e == 0: break index += 1 streets = [] for _ in range(e): u, v = map(int, lines[index].split()) streets.append((u, v)) index += 1 k = int(lines[index]) index += 1 result = min_days_to_clean(n, e, streets, k) results.append(result) return results"},{"question":"You are tasked with designing an application that manages a forest of trees. Each tree in the forest may have multiple branches, and each branch can have multiple leaves. You need to implement operations to add branches to a tree, add leaves to a branch, and compute the total number of leaves in a specific tree. Class Structure: 1. Tree: This class should have the following functionalities: - `add_branch(branch)`: Adds a new branch to the tree. - `total_leaves()`: Returns the total number of leaves in the tree. 2. Branch: This class should have the following functionalities: - `add_leaf()`: Adds a new leaf to the branch. - `leaf_count()`: Returns the number of leaves in the branch. Write the `Tree` and `Branch` classes such that they can be utilized to perform the described operations. # Input - The first line contains an integer Q (1 le Q le 10^4) representing the number of operations. - Each of the next Q lines describes an operation. The operations can be of the following types: - `\\"NEW_TREE t\\"`: Create a new tree with identifier `t`. - `\\"ADD_BRANCH t\\"`: Add a new branch to the tree with identifier `t`. - `\\"ADD_LEAF t b\\"`: Add a new leaf to branch `b` of the tree `t`. - `\\"TOTAL_LEAVES t\\"`: Print the total number of leaves in the tree with identifier `t`. # Output For each `\\"TOTAL_LEAVES\\"` operation, print the total number of leaves in the specified tree. # Example Input: ``` 8 NEW_TREE 1 ADD_BRANCH 1 ADD_BRANCH 1 ADD_LEAF 1 0 ADD_LEAF 1 1 ADD_LEAF 1 1 TOTAL_LEAVES 1 NEW_TREE 2 ``` Output: ``` 3 ``` # Implementation Guidelines - Use dictionaries to manage the trees and their branches. - Ensure efficient computation for up to 10^4 operations. Implement the `Tree` and `Branch` classes along with the logic to perform the operations described above.","solution":"class Branch: def __init__(self): self.leaves = 0 def add_leaf(self): self.leaves += 1 def leaf_count(self): return self.leaves class Tree: def __init__(self): self.branches = [] def add_branch(self, branch): self.branches.append(branch) def total_leaves(self): return sum(branch.leaf_count() for branch in self.branches) class Forest: def __init__(self): self.trees = {} def process_commands(self, commands): output = [] for command in commands: parts = command.split() action = parts[0] if action == \\"NEW_TREE\\": t_id = int(parts[1]) self.trees[t_id] = Tree() elif action == \\"ADD_BRANCH\\": t_id = int(parts[1]) if t_id in self.trees: self.trees[t_id].add_branch(Branch()) elif action == \\"ADD_LEAF\\": t_id = int(parts[1]) b_id = int(parts[2]) if t_id in self.trees and b_id < len(self.trees[t_id].branches): self.trees[t_id].branches[b_id].add_leaf() elif action == \\"TOTAL_LEAVES\\": t_id = int(parts[1]) if t_id in self.trees: output.append(self.trees[t_id].total_leaves()) return output # Sample input processing def process_input(input_lines): Q = int(input_lines[0].strip()) commands = [line.strip() for line in input_lines[1:Q+1]] forest = Forest() return forest.process_commands(commands)"},{"question":"You are tasked with finding the total number of distinct substrings of a given length that end in the same manner as another given suffix string. The first input line will have three integers: `n`, `m`, and `l` (1 leq l leq m leq n leq 200,000). The second line contains a binary string of length `n`, and the third line has a binary string suffix of length `l`. You need to determine how many distinct substrings of length `m` from the given string end with the binary string suffix. # Input: - The first line contains three integers: `n`, `m`, and `l`. - The second line contains a binary string `s` of length `n`. - The third line contains a binary string `suffix` of length `l`. # Output: - Output one integer, the number of distinct substrings of length `m` that end with the suffix string. # Example: Input: ``` 10 5 3 0011011010 110 ``` Output: ``` 3 ``` # Explanation: In the given example, there are three distinct substrings of length 5 that end with the suffix string \\"110\\": 1. \\"01110\\" 2. \\"10110\\" 3. \\"01110\\" Only \\"01110\\" and \\"10110\\" are distinct. Therefore, the output is 2.","solution":"def count_distinct_substrings(n, m, l, s, suffix): Returns the count of distinct substrings of length m that end with the given suffix string. Parameters: n (int): Length of the binary string `s` m (int): Length of the substrings to consider l (int): Length of the suffix string s (str): Binary string suffix (str): Suffix string to match Returns: int: Number of distinct substrings of length `m` ending with `suffix` suffix_length = len(suffix) needed_prefix_length = m - suffix_length substrings_set = set() # Iterate through possible starting positions of substrings of length `m` for i in range(n - m + 1): candidate_substring = s[i:i + m] if candidate_substring.endswith(suffix): substrings_set.add(candidate_substring) return len(substrings_set) # Example usage # print(count_distinct_substrings(10, 5, 3, \\"0011011010\\", \\"110\\")) # Output should be 2"},{"question":"Polycarp is organizing a coding competition and needs to ensure the smooth conduction of the event. There are n participants and m problems. Each participant has a unique id and each problem has a difficulty level. To ensure the event is fair, Polycarp decides to assign problems to participants such that: 1. Each participant solves exactly one problem. 2. Each problem should be solved by exactly one participant. 3. The sum of the differences between a participant\'s id and the difficulty level of the assigned problem should be minimized. Help Polycarp find the best assignment of problems to participants to achieve the minimal sum of differences. # Input - The first line contains an integer t (1 le t le 10^3) — the number of test cases. - The first line of each test case contains an integer n (1 le n le 3 cdot 10^3) — the number of participants and problems. - The next line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^9) — the ids of the participants. - The third line contains n integers d_1, d_2, dots, d_n (1 le d_i le 10^9) — the difficulties of the problems. # Output For each test case, print a single integer — the minimal sum of differences between a participant\'s id and the difficulty level of the assigned problem. # Example Input ``` 2 3 1 2 3 2 3 4 4 4 2 1 3 1 2 4 3 ``` Output ``` 1 0 ``` Explanation In the first test case, the optimal assignment could be: - Participant with id 1 solves problem with difficulty 2: Difference = |1 - 2| = 1 - Participant with id 2 solves problem with difficulty 3: Difference = |2 - 3| = 1 - Participant with id 3 solves problem with difficulty 4: Difference = |3 - 4| = 1 Total sum of differences = 1 + 1 + 1 = 3 In the second test case, the optimal assignment could be: - Participant with id 1 solves problem with difficulty 1: Difference = |1 - 1| = 0 - Participant with id 2 solves problem with difficulty 2: Difference = |2 - 2| = 0 - Participant with id 3 solves problem with difficulty 3: Difference = |3 - 3| = 0 - Participant with id 4 solves problem with difficulty 4: Difference = |4 - 4| = 0 Total sum of differences = 0","solution":"def minimize_sum_of_differences(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] participants = sorted(test_cases[i][1]) problems = sorted(test_cases[i][2]) min_sum = 0 for j in range(n): min_sum += abs(participants[j] - problems[j]) results.append(min_sum) return results"},{"question":"You are given an array of integers. Your task is to find the length of the longest contiguous subarray such that all elements in the subarray are distinct. A contiguous subarray is a subarray created by deleting zero or more elements from the beginning and zero or more elements from the end without changing the order of the remaining elements. A subarray is a contiguous part of an array. Write a function `longest_contiguous_distinct_subarray(arr)` that takes a list of integers `arr` as input and returns an integer representing the length of the longest contiguous subarray with all distinct elements. # Input - **arr**: A list of integers (1 ≤ len(arr) ≤ 1000) # Output - Return a single integer, the length of the longest contiguous subarray with all distinct elements. # Example ```python >>> longest_contiguous_distinct_subarray([1, 2, 1, 3, 4, 2, 3]) 4 # The subarray is [1, 3, 4, 2] >>> longest_contiguous_distinct_subarray([5, 5, 5, 5]) 1 # The subarray is [5] >>> longest_contiguous_distinct_subarray([2, 1, 3, 4, 1, 5, 3, 2]) 5 # The subarray is [2, 1, 3, 4, 1] ``` # Constraints: - The elements in the array can be positive or negative integers. - Aim for an efficient solution that minimizes time complexity.","solution":"def longest_contiguous_distinct_subarray(arr): Returns the length of the longest contiguous subarray with all distinct elements. n = len(arr) if n == 0: return 0 max_length = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"**Problem: Path Traversal in Weighted Grid** In this problem, you need to determine the minimum cost path from the top-left corner to the bottom-right corner in a given weighted grid. The grid is represented as an n x m matrix, where each cell contains a non-negative integer indicating the cost to traverse that cell. You are allowed to move either down or right at any point in time. The task is to write a program that takes as input the dimensions of the grid and the grid itself, computes the minimum cost to reach the bottom-right corner from the top-left, and outputs the minimum cost. Your program should read from standard input and output the minimum cost. **Input Format:** - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. - The next n lines each contain m integers separated by spaces, representing the cost values of the grid cells. **Output Format:** - Print a single integer representing the minimum cost to traverse from the top-left corner (1, 1) to the bottom-right corner (n, m). **Example:** ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 ``` **Explanation:** The minimum cost path is 1 → 3 → 1 → 1 → 1 (1 + 3 + 1 + 1 + 1 = 7). Note: - You can move only either down or right at any point in time. - The grid will always have at least one cell.","solution":"def min_cost_path(n, m, grid): Calculate the minimum cost path from the top-left corner to the bottom-right corner of the grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: 2D list representing the cost values of the grid cells :return: Minimum cost to traverse from the top-left corner to the bottom-right corner # Initialize a 2D dp array with the same dimensions as the grid dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # Example of usage: # n, m = 3, 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_cost_path(n, m, grid)) # Output: 7"},{"question":"Given a list of non-negative integers representing heights of buildings, your task is to determine the maximum amount of water that can be trapped after raining between the buildings. Each element in the list represents the height of a building. Water can only be trapped between buildings that have higher height than the current building. # Input - A single line containing a list of non-negative integers, where each integer represents the height of a building. The list will have at least two elements and at most 1000 elements. The height of each building will be between 0 and 1000. # Output - Print an integer representing the maximum amount of water that can be trapped. # Example ```text Input: [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The maximum amount of water that can be trapped is 6 units between the buildings. ``` # Note If the list is `[4, 2, 0, 3, 2, 5]`, the output should be `9`. Water trapped is calculated by considering the largest building on the left and right to each building and subtracting the current building\'s height from the minimum height of those two.","solution":"def trap(height): Given a list of non-negative integers representing the height of buildings, calculates the maximum amount of water that can be trapped. if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"A logistics company has a project to optimize the packing of items into a set of packages. Each item has a specific weight, and each package has a maximum weight capacity. Your task is to determine the minimum number of packages required to pack all the items without exceeding the weight capacity of any package. The input consists of: 1. An integer `n` (1 ≤ n ≤ 1000) representing the number of items. 2. An integer `m` (1 ≤ m ≤ 10000) representing the weight capacity of each package. 3. A list of `n` integers where each integer `wi` (1 ≤ wi ≤ 10000) represents the weight of the `i`-th item. Output a single integer representing the minimum number of packages required to pack all the items. Note: - It is guaranteed that the weight of no single item exceeds the weight capacity of a package. - You must use each item exactly once. Input example: ``` 5 10 4 8 1 2 6 ``` Output example: ``` 3 ``` Explanation: - One optimal way to pack the items is: [4, 6], [8, 2], and [1], so the answer is 3 packages.","solution":"def min_packages(n, m, weights): Determine the minimum number of packages required to pack all items. Args: n: int : number of items m: int : weight capacity of each package weights: List[int] : list of weights of the items Returns: int : minimum number of packages required weights.sort(reverse=True) packages = 0 while weights: packages += 1 remaining_capacity = m items_to_remove = [] for i, weight in enumerate(weights): if weight <= remaining_capacity: remaining_capacity -= weight items_to_remove.append(i) for i in sorted(items_to_remove, reverse=True): weights.pop(i) return packages"},{"question":"You are given an array of n integers and an integer k. Your task is to calculate the number of contiguous subarrays of length k with distinct elements. Consider the following example: array = [1, 2, 1, 3, 4] and k = 3. The contiguous subarrays of length 3 are [1, 2, 1], [2, 1, 3], and [1, 3, 4]. Out of these, only [2, 1, 3] and [1, 3, 4] have distinct elements. Hence, the correct answer is 2. Input * The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10⁵) — the length of the array and the length of the subarrays, respectively. * The second line contains n integers aᵢ (1 ≤ aᵢ ≤ 10⁵) — the elements of the array. Output * Print a single integer — the number of contiguous subarrays of length k that contain distinct elements. Example Input: 5 3 1 2 1 3 4 Output: 2 Explanation: The subarrays of length 3 are [1, 2, 1], [2, 1, 3], and [1, 3, 4]. The subarrays [2, 1, 3] and [1, 3, 4] contain only distinct elements. Therefore, the correct answer is 2.","solution":"def count_distinct_subarrays(arr, k): Returns the number of contiguous subarrays of length k with distinct elements. n = len(arr) if k > n: return 0 count = 0 freq_map = {} for i in range(k): freq_map[arr[i]] = freq_map.get(arr[i], 0) + 1 if len(freq_map) == k: count += 1 for i in range(k, n): # Remove the first element of the previous subarray if freq_map[arr[i - k]] == 1: del freq_map[arr[i - k]] else: freq_map[arr[i - k]] -= 1 # Add the new element freq_map[arr[i]] = freq_map.get(arr[i], 0) + 1 if len(freq_map) == k: count += 1 return count"},{"question":"You are given a sequence of commands for a robot to move on a grid. The robot starts at position (0, 0), and each command belongs to one of the four types: \'U\' (Up), \'D\' (Down), \'L\' (Left), and \'R\' (Right). Each command moves the robot by exactly one unit in the specified direction. Your task is to determine if the robot returns to the origin (0, 0) after executing all the given commands. Write a function `def robot_returns(commands: str) -> str:` that takes a string `commands`, representing the sequence of commands. The function should return \\"YES\\" if the robot returns to the origin after executing all the commands, otherwise it should return \\"NO\\". # Input - A single string `commands` (1 ≤ len(commands) ≤ 10^5), where each character is \'U\', \'D\', \'L\', or \'R\'. # Output - Return \\"YES\\" if the robot returns to the origin, otherwise return \\"NO\\". # Examples Example 1: **Input:** ```python commands = \\"UD\\" ``` **Output:** ```python \\"YES\\" ``` Example 2: **Input:** ```python commands = \\"LL\\" ``` **Output:** ```python \\"NO\\" ``` Example 3: **Input:** ```python commands = \\"UDLR\\" ``` **Output:** ```python \\"YES\\" ``` # Explanation In the first example, the robot moves up once and then down once, returning to the origin. In the second example, the robot moves left twice, thus ending up at position (-2, 0). In the third example, the robot moves up, down, left, and right, returning to the origin.","solution":"def robot_returns(commands: str) -> str: Determines if the robot returns to the origin after executing all commands. Args: commands (str): A string of \'U\', \'D\', \'L\', \'R\' commands. Returns: str: \\"YES\\" if the robot returns to the origin, otherwise \\"NO\\". x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"You are given an undirected graph with n nodes and m edges. Each node i has an integer weight w_i. A tree in this graph is defined as a connected acyclic subgraph of the original graph. The beauty of a tree is defined as the sum of weights of all its nodes. Your task is to find the maximum beauty value of any tree in this graph. The first line contains two integers n (1 le n le 2 cdot 10^5) — the number of nodes in the graph, and m (0 le m le 2 cdot 10^5) — the number of edges in the graph. The second line contains n integers w_1, w_2, ..., w_n (1 le w_i le 10^9), where w_i is the weight of the i-th node. Each of the next m lines contains two integers u and v (1 le u, v le n), representing an edge between node u and node v. Print one integer — the maximum beauty of any tree in the graph. **Example:** Input: ``` 5 4 1 2 3 4 5 1 2 1 3 1 4 1 5 ``` Output: ``` 15 ``` In this example, the entire graph is a tree, so the maximum beauty value is the sum of all node weights: 1 + 2 + 3 + 4 + 5 = 15.","solution":"def find_max_beauty(n, m, weights, edges): Finds the maximum beauty of any tree in the graph. Parameters: n (int): Number of nodes m (int): Number of edges weights (list of int): Weights of the nodes edges (list of (int, int)): Edges of the graph Returns: int: The maximum beauty of any tree in the graph from collections import defaultdict import sys sys.setrecursionlimit(300000) def dfs(node, visited): visited.add(node) total_weight = weights[node - 1] for neighbor in graph[node]: if neighbor not in visited: total_weight += dfs(neighbor, visited) return total_weight # Construction of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize visited set and max beauty visited = set() max_beauty = 0 # Run DFS from each non-visited node for i in range(1, n + 1): if i not in visited: max_beauty = max(max_beauty, dfs(i, visited)) return max_beauty"},{"question":"In a land of dragons, each dragon has a power level represented by a positive integer. The dragons are organized in a non-decreasing order of their power levels, forming a sequence. A brave knight named Aran has been tasked to defeat these dragons. However, to maintain the prestige and integrity of the kingdom, the knight must defeat the dragons in a specific and honorable manner. Aran can defeat dragons that are within a certain power level range that he feels comfortable with. Every day, the knight can select an inclusive range of indices in the sequence and perform a certain number of battles within that range. For each battle, he can defeat one dragon from the selected range. However, he can only perform a maximum number of battles each day before he tires out. Given the power levels of the dragons and the maximum number of battles the knight can perform each day, determine how many days are required for the knight to defeat all the dragons. The first line contains a single integer t (1 le t le 10) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 10^5, 1 le k le n) — the number of dragons and the maximum number of battles the knight can perform each day. The second line contains an array of n integers a (1 le a[i] le 10^9) — the power levels of the dragons in non-decreasing order. For each test case, output the minimum number of days required for the knight to defeat all the dragons. # Example Input ``` 2 10 3 1 2 2 3 4 4 5 6 7 8 4 1 2 2 3 6 ``` Output ``` 4 4 ``` # Explanation In the first test case: - The knight can defeat at most 3 dragons per day. - Minimum number of days required to defeat all 10 dragons is 4. In the second test case: - The knight can defeat at most 1 dragon per day. - Minimum number of days required to defeat all 4 dragons is 4.","solution":"def minimum_days_to_defeat_dragons(t, test_cases): results = [] for case in test_cases: n, k = case[\'n\'], case[\'k\'] power_levels = case[\'power_levels\'] days_needed = (n + k - 1) // k # Ceiling of n divided by k results.append(days_needed) return results def parse_input(input_data): lines = input_data.split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, k = map(int, lines[index].split()) power_levels = list(map(int, lines[index + 1].split())) test_cases.append({\'n\': n, \'k\': k, \'power_levels\': power_levels}) index += 2 return t, test_cases def output_result(results): return \\"n\\".join(map(str, results))"},{"question":"You are part of a team working on a project that involves analyzing sequences. You have been tasked with developing a function to determine whether a given sequence of integers can be re-ordered such that it forms an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers in which the difference between any two consecutive terms is constant. Given a sequence of integers, you need to write a function `can_form_arithmetic_progression` that determines whether it is possible to reorder the elements of the sequence to form an AP. # Input: - An integer `n` (2 ≤ n ≤ 10000), the length of the sequence. - A list of `n` integers representing the sequence. # Output: - Print \\"YES\\" (without quotes) if it is possible to reorder the sequence to form an arithmetic progression. - Print \\"NO\\" (without quotes) if it is not possible. # Example Input: ``` 5 3 1 7 5 9 ``` Output: ``` YES ``` Input: ``` 4 1 2 4 5 ``` Output: ``` NO ``` # Explanation: In the first example, the sequence can be reordered to [1, 3, 5, 7, 9], which forms an arithmetic progression with a common difference of 2. In the second example, no reordering of the sequence can form an arithmetic progression. Write the function `can_form_arithmetic_progression(lst: List[int]) -> str` to solve the problem.","solution":"def can_form_arithmetic_progression(lst): Determines if the elements of the list can be reordered to form an arithmetic progression. Parameters: lst (List[int]): The list of integers to be checked Returns: str: \\"YES\\" if the list can be reordered to form an arithmetic progression, \\"NO\\" otherwise if len(lst) < 2: return \\"NO\\" lst.sort() common_difference = lst[1] - lst[0] for i in range(2, len(lst)): if lst[i] - lst[i - 1] != common_difference: return \\"NO\\" return \\"YES\\""},{"question":"You are given a 2D grid consisting of characters \'1\' and \'0\'. Your task is to find the number of islands in the grid. An island is surrounded by water (represented by \'0\') and is formed by connecting adjacent lands (represented by \'1\') horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function `numIslands(grid: List[List[str]]) -> int` that takes the 2D grid as input and returns the number of islands. The first line of input contains two integers, n (1 ≤ n ≤ 300) and m (1 ≤ m ≤ 300), representing the number of rows and columns, respectively. The following n lines each contain m characters (\'1\' or \'0\') representing the grid. Example: Input: 4 5 11000 11000 00100 00011 Output: 3 Explanation: There are three islands in the given grid: - One island consists of the land cells marked by 1\'s in the top left corner. - The second island consists of the single land cell marked by 1 in the center of the grid. - The third island consists of the connected land cells marked by 1\'s in the bottom right corner.","solution":"def numIslands(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] def dfs(i, j): if i < 0 or j < 0 or i >= n or j >= m or grid[i][j] == \'0\' or visited[i][j]: return visited[i][j] = True # Explore the four adjacent neighbors dfs(i-1, j) dfs(i+1, j) dfs(i, j-1) dfs(i, j+1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: island_count += 1 dfs(i, j) return island_count"},{"question":"You are given an array of integers where each element appears exactly twice, except for one element which appears exactly once. Your task is to find the element that appears only once. Input: The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the array. The second line contains n space-separated integers. Output: Output the single element that appears only once. Example: Input: 5 2 3 2 4 4 Output: 3","solution":"def find_unique_element(arr): Returns the element that appears only once in the array. unique_element = 0 for num in arr: unique_element ^= num return unique_element # This function uses bitwise XOR operation to find the unique element. # Since every element appears exactly twice except one, XOR-ing all elements # results in canceling out elements appearing in pairs and leaving the unique element."},{"question":"John is very passionate about digital photography, and one day he decided to write a program to help sort and categorize his photos. He wants to categorize the photos based on their dimensions. Specifically, he wants to identify if a photo is in portrait mode, landscape mode, or square mode. You are given a list of photos, where each photo is represented by its width and height. A photo is in: - Portrait mode if its height is greater than its width. - Landscape mode if its width is greater than its height. - Square mode if its width is equal to its height. Your task is to write a program that categorizes each photo and prints out the total counts of photos in each mode. The first line of the input contains a single integer n (1 ≤ n ≤ 1000), the number of photos. Each of the next n lines contains two space-separated integers w and h (1 ≤ w, h ≤ 10000), the width and height of the respective photo. Print three integers on a single line, representing the total counts of photos in portrait mode, landscape mode, and square mode, respectively. Sample Input: 4 800 600 600 800 500 500 1200 700 Sample Output: 1 2 1","solution":"def categorize_photos(photos): portrait_count = 0 landscape_count = 0 square_count = 0 for w, h in photos: if h > w: portrait_count += 1 elif w > h: landscape_count += 1 else: square_count += 1 return portrait_count, landscape_count, square_count"},{"question":"In a galaxy far, far away, there were two planets, Planet A and Planet B, which communicated through a series of satellites. These satellites formed a communication network represented as a tree with `n` satellites. Each satellite is connected by `n-1` bidirectional communication channels. One day, a new channel between two non-adjacent satellites was introduced to improve communication efficiency. Unfortunately, this introduced a cycle in the network. Your task is to identify and remove the added channel to restore the tree structure. You are given a list of pairs of integers representing the channels between satellites. Exactly one of these channels, which should be removed, closes the cycle. # Input Format The first line contains a single integer `n` (3 leq n leq 10^4), the number of satellites. The next `n` lines each contains two integers `u` and `v` (1 leq u, v leq n, u neq v), representing a bidirectional communication channel between satellites `u` and `v`. # Output Format Print exactly one line containing two integers `u` and `v` (in any order), representing the channel that should be removed to eliminate the cycle. # Example Input: ``` 5 1 2 1 3 2 3 3 4 4 5 ``` Output: ``` 2 3 ``` # Explanation The given network forms a tree with an extra channel (2, 3) that introduces a cycle. Removing this channel restores the original tree structure. # Note - The given network is always connected and contains exactly one cycle. - If there are multiple solutions, any valid pair can be printed. Implement a function to solve this problem.","solution":"def find_redundant_connection(n, edges): Find the redundant connection that, when removed, restores the tree structure. parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY return True return False for u, v in edges: if not union(u, v): return [u, v] # Example Usage n = 5 edges = [ [1, 2], [1, 3], [2, 3], [3, 4], [4, 5] ] print(find_redundant_connection(n, edges)) # Output: [2, 3] or [3, 2]"},{"question":"Write a function that takes an integer `n` as input. This integer `n` represents the number of elements in a list. Following this, the input contains `n` integers separated by space. Your task is to return the maximum value obtained by adding two different elements from the list. Each element in the list must be between 1 and 1000, inclusive. If the list has less than two elements, return 0. Example: ``` Input: 5 3 1 9 7 5 Output: 16 Input: 3 1 5 2 Output: 7 Input: 1 8 Output: 0 ```","solution":"def max_sum_two_elements(n, elements): Returns the maximum value obtained by adding two different elements from the list. If the list has less than two elements, returns 0. if n < 2: return 0 maximum = second_max = float(\'-inf\') for num in elements: if num > maximum: second_max = maximum maximum = num elif num > second_max: second_max = num return maximum + second_max"},{"question":"John has a list of integers representing the workload of different tasks he needs to distribute among k workers. He wants to assign tasks to workers such that each worker gets at least one task and the workload is as evenly distributed as possible. The workload distribution should be fair, meaning the difference between the maximum workload and the minimum workload assigned to any worker should be minimized. The first line of input contains two space-separated integers n (1 ≤ n ≤ 100), the number of tasks, and k (1 ≤ k ≤ n), the number of workers. The second line contains n space-separated integers representing the workload of each task. Print k lines, where each line represents the list of workloads assigned to each worker. The exact sequence within each line does not matter, but the difference between the highest and lowest total workload assigned to any worker should be as small as possible. If there are multiple optimal distributions, print any of them. Example: Input: 5 2 4 1 2 2 3 Output: 4 2 1 3 2","solution":"def distribute_workload(n, k, workloads): # Sorting workloads in descending order to distribute the largest workloads first workloads.sort(reverse=True) # Initialize worker workloads workers = [[] for _ in range(k)] total_workloads = [0] * k # Distribute workloads for load in workloads: # Find the worker with the minimum current workload min_index = total_workloads.index(min(total_workloads)) workers[min_index].append(load) total_workloads[min_index] += load return workers def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n, k = map(int, lines[0].split()) workloads = list(map(int, lines[1].split())) return n, k, workloads def format_output(workers): return \\"n\\".join(\\" \\".join(map(str, worker)) for worker in workers)"},{"question":"You have two arrays of integers, `arr1` and `arr2`. An element of `arr1` is said to be \\"dominant\\" if it appears more frequently in `arr1` than any other element in `arr2`. Your task is to determine the number of dominant elements in `arr1`. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) - the sizes of the arrays `arr1` and `arr2`, respectively. The second line contains `n` integers representing the elements of `arr1`. The third line contains `m` integers representing the elements of `arr2`. Output a single integer representing the number of dominant elements in `arr1`. For example, consider the following input: ``` 5 6 1 2 2 3 3 1 1 2 2 2 3 ``` Here, both 2 and 3 appear twice in `arr1`, but 2 appears more frequently in `arr2`, so the only dominant element in `arr1` is 3. Thus, the output should be: ``` 1 ```","solution":"from collections import Counter def count_dominant_elements(arr1, arr2): Returns the number of dominant elements in arr1, where a dominant element appears more frequently in arr1 than any other element in arr2. count_arr1 = Counter(arr1) count_arr2 = Counter(arr2) dominant_count = 0 for element in count_arr1: if count_arr1[element] > count_arr2[element]: dominant_count += 1 return dominant_count"},{"question":"You are given a list of non-negative integers and an integer target value. Your task is to determine if there are any three integers in the list that sum up to the target value. If such a combination exists, print any one of those combinations. If no such combination exists, print an empty list. The first line of input contains two integers n (the length of the list) and target (the desired sum). The second line contains n non-negative integers representing the elements in the list. Constraints: - 3 <= n <= 10^3 - 0 <= list[i] <= 10^6 - 0 <= target <= 3*10^6 Output any three integers that sum up to the target value, or an empty list if no such three integers exist. Example 1: Input: 6 19 2 7 4 9 13 5 Output: [2, 7, 10] Example 2: Input: 5 20 8 1 6 2 15 Output: []","solution":"def find_three_sum(nums, target): Finds any three integers in the list nums that sum up to target. Returns the combination if found, otherwise returns an empty list. nums.sort() n = len(nums) for i in range(n): # Two-pointer approach left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return [nums[i], nums[left], nums[right]] elif current_sum < target: left += 1 else: right -= 1 return [] # Example usage: # find_three_sum([2, 7, 4, 9, 14, 5], 19)"},{"question":"Terragram is a specialist in network communication and has come across a challenging problem while working on a new networking algorithm. She needs to find the shortest path to transmit data between two nodes in a network represented as a weighted directed graph. You must help Terragram by writing an algorithm that determines the shortest path between two specified nodes, considering that some nodes may be temporarily inactive and should be ignored during the path calculation. You will be presented with the following data: - The number of nodes `n` (1 ≤ n ≤ 1000) in the graph. - The number of edges `m` (1 ≤ m ≤ 10000) in the graph. - The list of `inactive_nodes` (1 ≤ count ≤ n), which are nodes that should be ignored during the path calculation. - A list of edges where each edge is represented by three integers `u`, `v`, and `w` meaning there is a directed edge from node `u` to node `v` with weight `w` (1 ≤ u, v ≤ n and 1 ≤ w ≤ 1000). - Two integers `src` and `dest` (1 ≤ src, dest ≤ n) representing the source and destination nodes for the data transmission. Your task is to determine the shortest path from the source node `src` to the destination node `dest`, taking into account the inactive nodes. If there is no path available due to the inactive nodes or other constraints, return -1. **Input:** - The number of nodes `n`. - The number of edges `m`. - A list of inactive nodes. - A list of edges, each consisting of three integers: starting node `u`, ending node `v`, and edge weight `w`. - Two integers, the source node `src` and the destination node `dest`. **Output:** - A single integer representing the shortest path distance. If no such path exists, output -1. **Example:** Input: ``` 6 7 2 4 1 2 10 2 3 10 3 6 10 1 3 20 4 5 10 5 6 5 3 4 1 1 6 ``` Output: ``` 30 ``` In this example, nodes 2 and 4 are inactive, so the shortest path from node 1 to node 6 is through edges 1 -> 3, 3 -> 6, making the total weight 30.","solution":"import heapq def shortest_path(n, m, inactive_nodes, edges, src, dest): from collections import defaultdict import sys INF = sys.maxsize # Create adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) # Initialize distances with infinity and set distance to src as 0 dist = {node: INF for node in range(1, n+1)} dist[src] = 0 # Priority queue for Dijkstra\'s algorithm pq = [(0, src)] while pq: current_dist, current_node = heapq.heappop(pq) # If the node is one of the inactive nodes, ignore it if current_node in inactive_nodes: continue # If the current node\'s distance is greater than the recorded distance, continue if current_dist > dist[current_node]: continue # Explore the neighbors for neighbor, weight in graph[current_node]: if neighbor in inactive_nodes: continue distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # If there is no path to the destination, return -1 return dist[dest] if dist[dest] != INF else -1"},{"question":"Alice and Bob are playing a game with a sequence of integers. They take turns to remove exactly one integer from either end of the sequence. Alice will go first. The player who makes the total sum of integers collected by both players odd, wins. If the total sum is already odd when it\'s the player\'s turn, that player can also choose to pass their turn. Given an array of integers representing the sequence, determine if there is a winning strategy for Alice, and output \\"YES\\" if Alice can guarantee a win or \\"NO\\" if she cannot. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100), the length of the sequence. - The second line contains n integers a_i (1 ≤ a_i ≤ 1000), the elements of the sequence. **Output:** - Output a single line \\"YES\\" if Alice can guarantee a win, or \\"NO\\" otherwise. **Example:** - Input: ``` 3 1 2 3 ``` - Output: ``` YES ``` **Explanation:** In the example, the initial sum is already even, and Alice can make the total sum of integers collected odd by taking 1 (the first element) on her first turn. Afterwards, the sum of collected integers is odd (1). Hence, Alice guarantees a win.","solution":"def alice_wins(sequence): Determines if Alice can guarantee a win. Returns \'YES\' if Alice can guarantee a win, \'NO\' otherwise. # Calculate the sum of the sequence total_sum = sum(sequence) # If the initial total sum is already odd if total_sum % 2 == 1: return \\"YES\\" # If any number in the sequence is odd for num in sequence: if num % 2 == 1: return \\"YES\\" # If all numbers are even return \\"NO\\""},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can either be empty, represented by \'.\', or blocked, represented by \'#\'. Polycarp can move up, down, left, or right between empty cells but cannot move through blocked cells. Polycarp starts at the top-left corner of the grid (1, 1) and wants to reach the bottom-right corner of the grid (n, m). He has a special ability to jump over at most k blocked cells. A jump allows him to move to an adjacent cell over a blocked cell, essentially \\"teleporting\\" to an empty cell adjacent to the blocked cell. However, he can only jump over a blocked cell if both the starting and ending cells of the jump are valid moves. Determine the minimum number of steps Polycarp must take to reach the bottom-right corner of the grid from the top-left corner. If it is impossible to reach the bottom-right corner, return -1. The first line of input contains three integers n, m, and k (2 ≤ n, m ≤ 500, 0 ≤ k ≤ n + m), representing the number of rows, the number of columns, and the maximum number of blocked cells Polycarp can jump over. The next n lines each contain m characters (either \'.\' or \'#\'), describing the state of each cell in the grid. The output should be a single integer representing the minimum number of steps Polycarp must take, or -1 if it is impossible. Input: 4 4 1 .... .. ..#. .... Output: 6 Input: 3 3 1 . # .#. Output: -1 Explanation: In the first case, Polycarp can reach the bottom-right corner by moving around the blocked cells or jumping over one blocked cell. In the second case, it is impossible for Polycarp to reach the bottom-right corner within the given constraints.","solution":"from collections import deque def min_steps_to_reach(n, m, k, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0, 0)]) # (x, y, steps, jumps) visited = {(0, 0): 0} while queue: x, y, steps, jumps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, steps + 1, jumps)) visited[(nx, ny)] = jumps if jumps < k: for dx, dy in directions: nx, ny = x + dx, y + dy nnx, nny = nx + dx, ny + dy if is_valid(nx, ny) and is_valid(nnx, nny) and (nnx, nny) not in visited: queue.append((nnx, nny, steps + 2, jumps + 1)) visited[(nnx, nny)] = jumps + 1 return -1"},{"question":"Albert is working on a grid-based game where he needs to navigate through a grid from the top-left corner to the bottom-right corner. Given a grid of size `n x m`, each cell has a certain number of points associated with it. Albert can only move either right or down at any point in time. He wants to find the maximum points he can collect when moving from the top-left to the bottom-right corner. The game grid is represented by a 2D array `grid` of size `n x m` where `grid[i][j]` is the points he collects if he lands on cell `(i, j)`. Given the dimensions of the grid and the grid itself, your task is to write a program that computes the maximum points Albert can collect. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next `n` lines each contain `m` integers representing the grid where the `j-th` integer in the `i-th` line is the points at cell `(i, j)`. # Output: - Print a single integer, the maximum points Albert can collect. # Example: Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` Explanation: From the top-left corner, Albert can follow the path `1 → 3 → 5 → 2 → 1` to collect a total of `12` points. Other paths may collect fewer points, so `12` is the maximum. # Constraints: - All grid values will be non-negative integers not exceeding `1000`. Your task is to implement a function: ```python def max_points(n: int, m: int, grid: List[List[int]]) -> int: pass ``` You might find dynamic programming helpful to solve this problem within the given constraints.","solution":"from typing import List def max_points(n: int, m: int, grid: List[List[int]]) -> int: # Create a 2D DP array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from the top) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Vasya is working on his next challenge and wants you to help him. Vasya has come up with a new kind of puzzle involving a stack of containers. There are n containers labeled from 1 to n, each with a certain weight. Initially, the containers are stacked in a specific order. Vasya wants to reorder them in a reverse order, meaning the container at the top should be at the bottom and vice versa. You can only move one container at a time, and only from the top of the stack to one of three possible positions: 1. Another stack (there are two auxiliary stacks available in addition to the primary stack). 2. Directly to its final position in the reverse-ordered stack. Your task is to find the sequence of moves needed to reorder the containers. The first line contains one integer n (1 leq n leq 20), the number of containers. The second line contains n integers w_1, w_2, ldots, w_n (1 leq w_i leq 1000), the weights of the containers in the initial order from top to bottom. The required output is as follows: First, print a single integer k which indicates the number of moves. The next k lines each contain two integers s and d, describing a move of the top container from stack s to stack d. Here, s and d can be 1, 2, or 3, representing the primary stack and the two auxiliary stacks respectively. The goal is to end up with the containers in reverse order on the primary stack. **Example:** Input: ``` 3 3 2 1 ``` Output: ``` 7 1 3 1 2 3 2 1 3 2 1 2 3 1 3 ``` (Note: This sequence of moves places the containers in reverse order. Your solution may have a different sequence of moves but should achieve the same effect.)","solution":"def generate_moves(n, source, target, auxiliary, moves): if n == 1: moves.append((source, target)) return generate_moves(n - 1, source, auxiliary, target, moves) moves.append((source, target)) generate_moves(n - 1, auxiliary, target, source, moves) def reorder_containers(n, weights): moves = [] generate_moves(n, 1, 3, 2, moves) move_count = len(moves) return move_count, moves"},{"question":"Given an array of n integers and q queries, your task is to support the following operations efficiently: 1. Update a subarray with a given value. For each element ai in the range specified in the query, replace ai with the given value. 2. Increment a subarray by a given value. For each element ai in the range specified in the query, add the given value to ai. 3. Query the sum of a subarray. The operations you need to support are as follows: - `1 a b x`: Replace each element in the range [a, b] with x. - `2 a b x`: Add x to each element in the range [a, b]. - `3 a b`: Print the sum of the elements in the range [a, b]. # Input format - The first line of input contains two integers, n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100,000), the number of elements in the array and the number of queries, respectively. - The second line contains n integers, the initial elements of the array. - Each of the next q lines contains a query in one of the three formats described above. # Output format - For each query of type `3 a b`, print a single integer, the sum of the subarray from a to b. # Example Input: ``` 6 5 10 20 30 40 50 60 3 1 3 2 2 3 5 3 2 4 1 1 2 15 3 1 3 ``` Output: ``` 60 85 60 ``` # Explanation 1. Initially, the array is [10, 20, 30, 40, 50, 60]. 2. The first query, `3 1 3`, asks for the sum from index 1 to 3, which is 10 + 20 + 30 = 60. 3. The second query, `2 2 3 5`, adds 5 to each element in the range [2, 3], resulting in the array [10, 25, 35, 40, 50, 60]. 4. The third query, `3 2 4`, asks for the sum from index 2 to 4, which is 25 + 35 + 40 = 100. 5. The fourth query, `1 1 2 15`, sets each element in the range [1, 2] to 15, resulting in the array [15, 15, 35, 40, 50, 60]. 6. The fifth query, `3 1 3`, asks for the sum from index 1 to 3, which is 15 + 15 + 35 = 65. Note: Indices in queries are 1-based.","solution":"class ArrayOperations: def __init__(self, n, arr): self.n = n self.arr = arr def update_subarray(self, a, b, x): for i in range(a - 1, b): self.arr[i] = x def increment_subarray(self, a, b, x): for i in range(a - 1, b): self.arr[i] += x def query_sum(self, a, b): return sum(self.arr[a - 1:b])"},{"question":"Given an undirected graph, determine if it contains a Hamiltonian cycle. A Hamiltonian cycle is a cycle that visits every vertex exactly once and returns to the starting vertex. The first line contains two integers, n and m, which denote the number of vertices and edges in the graph, respectively (1 leq n leq 20, 0 leq m leq dfrac{n cdot (n-1)}{2}). The next m lines contain two integers each, u and v, representing an undirected edge between vertices u and v (1 leq u, v leq n, u neq v). Print \\"YES\\" if the graph contains a Hamiltonian cycle, otherwise print \\"NO\\". Example input: ``` 4 5 1 2 1 3 2 3 3 4 4 2 ``` Example output: ``` YES ```","solution":"def has_hamiltonian_cycle(n, edges): def is_valid(v, pos, path): # Check if this vertex is an adjacent vertex of the previously added vertex. if not graph[path[pos - 1]][v]: return False # Check if the vertex has already been included. if v in path: return False return True def ham_cycle_util(path, pos): # base case: if all vertices are included in the path if pos == n: # And if there is an edge from the last included vertex to the first vertex if graph[path[pos - 1]][path[0]]: return True else: return False # Try different vertices as the next candidate in Hamiltonian Cycle. for v in range(1, n): if is_valid(v, pos, path): path[pos] = v if ham_cycle_util(path, pos + 1) == True: return True # Remove current vertex if it doesn\'t lead to a solution path[pos] = -1 return False # initialize the graph from edges graph = [[0]*n for _ in range(n)] for edge in edges: u, v = edge graph[u-1][v-1] = 1 graph[v-1][u-1] = 1 path = [-1] * n path[0] = 0 # Start from vertex 0 # Check if there is a Hamiltonian Cycle if ham_cycle_util(path, 1) == True: return \\"YES\\" else: return \\"NO\\" # Function to parse input and call the main function def hamiltonian_cycle_checker(n, m, edges): return has_hamiltonian_cycle(n, edges)"},{"question":"You are tasked with a grid-based puzzle game that involves moving from the top-left corner to the bottom-right corner. The grid is represented by an n times m matrix. Some of the cells in the matrix contain obstacles that you cannot pass through. Your objective is to find the number of distinct paths that move only rightward or downward and do not pass through obstacles. If there is no valid path, the result should be 0. Given n rows and m columns, we will provide the grid as an n-length list where each element is a string with \'1\' representing an obstacle and \'0\' representing a free space. The first line contains two integers n and m (1 le n, m le 100) – the number of rows and columns in the grid. The next n lines contain strings of length m each consisting of \'0\' and \'1\', representing the grid. Print a single integer – the number of distinct paths from the top-left corner to the bottom-right corner. Example: Input: ``` 3 3 000 010 000 ``` Output: ``` 2 ``` Explanation: There are two ways to move from the top-left corner to the bottom-right corner without stepping on an obstacle: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"def distinct_paths(n, m, grid): # If the starting or ending cell has an obstacle, no path is possible if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return 0 # Initialize DP table with all zeros dp = [[0] * m for _ in range(n)] # Set the start position to 1 if it is not an obstacle dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == \'1\': dp[i][j] = 0 # No path through obstacles else: if i > 0: dp[i][j] += dp[i - 1][j] # Add paths from above if j > 0: dp[i][j] += dp[i][j - 1] # Add paths from the left return dp[n-1][m-1]"},{"question":"A company is organizing a team-building activity and wants to arrange the participants in a large circle. Each participant is either an engineer or a manager. The company\'s goal is to maximize the number of adjacent pairs consisting of one engineer and one manager. You are given the number of engineers `e` and the number of managers `m`. Determine the optimal arrangement of engineers (E) and managers (M) in the circle to achieve the goal. Note that positions in the circle are considered adjacent in both clockwise and counterclockwise directions. Input: The single line of the input contains two integers `e` and `m` (1 ≤ e, m ≤ 100), separated by a space. Output: Print a string of length `e + m` representing the arrangement in the circle where the characters \\"E\\" represent engineers and \\"M\\" represent managers. If there are multiple optimal solutions, any of them is acceptable. For example: Input: 3 3 Output: EMEMEM Input: 2 4 Output: MEMEMM","solution":"def optimal_arrangement(e, m): Determine the optimal arrangement of engineers (E) and managers (M) in a circle to maximize the number of adjacent pairs consisting of one engineer and one manager. :param e: Number of engineers :param m: Number of managers :return: A string representing the arrangement of engineers and managers arrangement = [] # Determine the larger and smaller group if e > m: larger, smaller = \'E\', \'M\' diff = e - m else: larger, smaller = \'M\', \'E\' diff = m - e while e > 0 and m > 0: arrangement.append(larger) arrangement.append(smaller) e -= 1 m -= 1 # Add remaining elements of the larger group arrangement.extend([larger] * (e + m)) return \\"\\".join(arrangement)"},{"question":"Erin is trying to navigate through a grid filled with obstacles. The grid is represented as an m times n 2D array where each cell is either an empty space (`0`) or an obstacle (`1`). Erin starts at the top-left corner (cell `(0,0)`) and wants to reach the bottom-right corner (cell `(m-1,n-1)`). Erin can only move either down or right at any point in time. She cannot move to a cell that contains an obstacle. Write a function that determines if there is a path from the top-left corner to the bottom-right corner. If there is such a path, return `True`; otherwise, return `False`. **Input:** * A 2D list `grid` containing `m` rows and `n` columns, where each element is either `0` (empty space) or `1` (obstacle). `m` and `n` are both positive integers and do not exceed `100`. **Output:** * A boolean value indicating if there\'s a path from the top-left to the bottom-right corner. **Example:** ``` Input: grid = [ [0, 0, 1], [0, 1, 0], [0, 0, 0] ] Output: True Input: grid = [ [0, 1], [1, 0] ] Output: False ``` **Note:** - If the starting cell or the destination cell contains an obstacle, Erin cannot make the journey. In such a case, return `False`.","solution":"def is_path(grid): Determines if there\'s a path from the top-left corner to the bottom-right corner. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False m, n = len(grid), len(grid[0]) def dfs(x, y): if x == m - 1 and y == n - 1: return True if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 1: return False grid[x][y] = 1 # Mark as visited # Move down or right return dfs(x + 1, y) or dfs(x, y + 1) return dfs(0, 0)"},{"question":"There are n students in a class, each with a distinct height. The teacher wants to arrange them in a line such that for each student, the number of students taller than them to the left is the same as the number of students shorter than them to the right. A permutation of students\' heights meets this criterion if, for some student at position i, the number of students taller than the student at position i in the left half ([0, i-1]) is equal to the number of students shorter in the right half ([i+1, n-1]). Given the heights of the students, determine if there exists at least one valid permutation that satisfies the criteria, and return that permutation. If no such permutation exists, return an empty list. The first line contains an integer n (1 leq n leq 10^5) — the number of students. The second line contains n integers h_1, h_2, ..., h_n (1 leq h_i leq 10^9) — the heights of the students. Output a valid permutation if one exists, otherwise an empty list. Example: ``` Input: 5 1 2 3 4 5 Output: [2, 1, 3, 5, 4] ``` In this example, for the student at position 2 (height 3), there is 1 taller student (height 4) to the left and 1 shorter student (height 2) to the right. Thus, the permutation satisfies the criteria.","solution":"def find_valid_permutation(n, heights): Returns a valid permutation of student heights that satisfies the given criterion. If no such permutation exists, returns an empty list. if n == 1: return heights heights.sort() mid = n // 2 if n % 2 == 1: mid += 1 left = heights[:mid] right = heights[mid:] permutation = [] i, j = 0, 0 while i < len(left) or j < len(right): if i < len(left): permutation.append(left[i]) i += 1 if j < len(right): permutation.append(right[j]) j += 1 if len(permutation) != n: return [] return permutation"},{"question":"A game development company is creating a new game where players can establish alliances based on specific rules. The game has `k` players, and each player is identified by a unique ID from 1 to `k`. Players can form alliances of any size, but there are some rules. For instance, if player `i` wants to ally with player `j`, then `i` and `j` must be in the same alliance. Additionally, two players can only be part of one alliance. The alliances must be formed such that no player belongs to more than one alliance. You are tasked with finding a valid way to establish these alliances given some constraints. The first line of input contains integers `k` and `r` (1 ≤ k ≤ 50, 0 ≤ r ≤ min(100, k*(k-1)/2)). The next `r` lines each contain a pair of integers `pi, qi` (1 ≤ pi < qi ≤ k) — the pair `pi, qi` indicates that player `pi` and player `qi` want to be in the same alliance. Output how many alliances were formed on the first line. On the subsequent lines, list each alliance as a space-separated list of player IDs. Each player ID should be part of exactly one alliance. If it\'s not possible to form the alliances based on the given constraints, print `-1`. Here is an example of input and output: **Example Input:** ``` 6 4 1 2 2 3 4 5 5 6 ``` **Example Output:** ``` 2 1 2 3 4 5 6 ``` Note that if there are multiple valid ways to form the alliances, any valid output will be accepted.","solution":"def find_alliances(k, r, pairs): This function determines the alliances based on the given constraints. Parameters: k (int): Number of players. r (int): Number of constraints. pairs (list): List of pairs representing constraints. Returns: int, list: A tuple containing the number of alliances and the list of alliances or -1 if not possible. # Union-Find data structure to keep track of connected components parent = list(range(k + 1)) rank = [1] * (k + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x == root_y: return if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Apply the union-find algorithm on the pairs for p, q in pairs: union(p, q) # Collect alliances by root alliances = {} for player in range(1, k + 1): root = find(player) if root not in alliances: alliances[root] = [] alliances[root].append(player) # Forming the output based on the alliances formed result = [len(alliances)] result.extend(list(alliance) for alliance in alliances.values()) return result # Example usage k = 6 r = 4 pairs = [(1, 2), (2, 3), (4, 5), (5, 6)] print(find_alliances(k, r, pairs)) # This is expected to output something similar to example output, as shown in the problem statement"},{"question":"In a small town, there is a popular game among the local children called \\"Candy Boxes\\". Each child has a box of candies, and each candy has a specific weight. The kids have come up with a fun competition where they try to divide their candies into two groups such that the absolute difference in total weight between the two groups is minimized. Given an array of integers representing the weights of the candies, your task is to determine the minimum possible absolute difference between the sums of the weights in the two groups. The first line contains an integer n (1 ≤ n ≤ 100), the number of candies. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 100) – the weights of the candies. Output one integer, the minimum possible absolute difference between the sums of the two groups. Example: Input: 5 1 2 3 4 5 Output: 1 Explanation: One optimal way to split the candies is to have one group with candies [1, 4, 5] and another group with [2, 3]. The absolute difference between the sums of these two groups is |(1 + 4 + 5) - (2 + 3)| = 1, which is the minimum possible difference.","solution":"def min_difference_partition(n, weights): total_sum = sum(weights) dp = [False] * (total_sum + 1) dp[0] = True for weight in weights: for j in range(total_sum, weight - 1, -1): if dp[j - weight]: dp[j] = True min_diff = float(\'inf\') for i in range(total_sum // 2 + 1): if dp[i]: min_diff = min(min_diff, total_sum - 2 * i) return min_diff"},{"question":"Write a program that determines the minimum number of rotations needed to make every element in an array of integers equal. You can rotate the array to the right or to the left. A rotation to the right on an array shifts each of the array\'s elements one unit to the right. For example, if the array is [1, 2, 3, 4, 5], a right rotation will produce [5, 1, 2, 3, 4]. Similarly, a rotation to the left on an array shifts each of the array\'s elements one unit to the left. For example, if the array is [1, 2, 3, 4, 5], a left rotation will produce [2, 3, 4, 5, 1]. Input data contains multiple test cases. The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers ai (1 ≤ ai ≤ 10^9) — the elements of the array. For each test case, print an integer k — the minimum number of rotations needed to make every element in the array equal, or -1 if it\'s not possible. Example: Input: 2 5 1 2 3 4 5 4 3 3 3 3 Output: 4 0","solution":"def min_rotations_to_equal_elements(t, test_cases): results = [] for case in test_cases: n = case[0] array = case[1] if len(set(array)) == 1: results.append(0) else: results.append(n) return results def process_input(data): t = data[0] test_cases = [] index = 1 for _ in range(t): n = data[index] index += 1 array = data[index:index + n] index += n test_cases.append((n, array)) return t, test_cases"},{"question":"You are given a 2D grid representing a map of a group of islands and water. Each cell in the grid is either an island (denoted by \'1\') or water (denoted by \'0\'). An island is formed by connecting adjacent land cells horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a program to determine the number of distinct islands in the grid. Two islands are considered distinct if and only if they are disconnected, meaning there is no direct horizontal or vertical path of \'1\'s connecting them. Here are the guidelines for your task: **Input:** - The first line contains two integers, m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns in the grid respectively. - The following m lines each contain n characters (\'0\' or \'1\'), where each character represents either land or water in the grid. **Output:** - Print a single integer representing the number of distinct islands. **Example:** ``` Input: 4 5 11000 11000 00100 00011 Output: 3 ``` Explanation: There are three distinct islands in the grid represented by the cells with value \'1\'. Note that adjacent \'1\'s (horizontally or vertically) form a single island, and diagonal adjacency does not count. ``` Input: 4 4 1111 0111 1110 0000 Output: 1 ``` Explanation: There is one large island in the grid. The islands are connected vertically and horizontally but not diagonally. In your solution, you may choose any approach such as Depth-First Search (DFS) or Breadth-First Search (BFS) to traverse and mark the cells of each island. Please ensure that your program efficiently handles grids of the maximum size allowed.","solution":"def num_islands(grid): if not grid: return 0 def dfs(grid, row, col): if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == \'0\': return grid[row][col] = \'0\' dfs(grid, row + 1, col) dfs(grid, row - 1, col) dfs(grid, row, col + 1) dfs(grid, row, col - 1) islands_count = 0 for row in range(len(grid)): for col in range(len(grid[0])): if grid[row][col] == \'1\': islands_count += 1 dfs(grid, row, col) return islands_count def parse_input(input_lines): first_line = input_lines[0].strip().split() m = int(first_line[0]) n = int(first_line[1]) grid = [] for i in range(1, m + 1): grid.append(list(input_lines[i].strip())) return grid def main(input_lines): grid = parse_input(input_lines) result = num_islands(grid) return result"},{"question":"You are given a list of integers representing the scores of students in a class. The scores are in the range 0 to 100. Your task is to determine how many students scored at least a certain threshold. The first line contains an integer n (1 le n le 100,000) — the number of students in the class. The second line contains n integers s_1, s_2, dots, s_n (0 le s_i le 100) — the scores of the students. The third line contains a single integer t (0 le t le 100) — the threshold score. Print the number of students who scored greater than or equal to the threshold. **Example:** Input: ``` 5 60 70 80 90 100 75 ``` Output: ``` 3 ``` In the example, there are five students with scores 60, 70, 80, 90, and 100. The threshold score is 75. Therefore, 3 students scored at least 75 (80, 90, and 100).","solution":"def count_students_above_threshold(n, scores, t): Counts how many students scored greater than or equal to the threshold score t. Args: n (int): The number of students in the class. scores (list of int): List of student scores. t (int): The threshold score. Returns: int: The number of students scoring at least t. return sum(score >= t for score in scores)"},{"question":"In a mystical land, there exists a unique game played with magical stones. Each magical stone has a positive integer strength and can be combined with other stones to form a new stone with the combined strength of the two stones being their sum. A wise old wizard wants to perform as many combinations as possible with the given stones such that each combination always results in a stone with strength divisible by a given integer k. The wizard seeks your help to find out the highest number of possible combinations he can perform. You are given a list of n positive integers, where each integer represents the strength of a magical stone, and an integer k which represents the divisor. Formulate a function that computes the maximum number of combinations of two stones such that their combined strength is divisible by k. First line of input contains an integer n (1 ≤ n ≤ 100) — the number of stones. Next line contains n integers, each representing the strength of a stone (1 ≤ strength ≤ 1000). The third line contains an integer k (1 ≤ k ≤ 100). Output a single integer — the maximum number of combinations that can be made where the sum of strengths of each combination is divisible by k. Example Input: 5 2 3 7 8 12 5 Example Output: 2","solution":"def max_combinations(n, strengths, k): Computes the maximum number of combinations of two stones such that their combined strength is divisible by k. Args: n : int : the number of stones strengths : List[int] : the strengths of the stones k : int : the divisor Returns: int : the maximum number of combinations remainder_counts = [0] * k for strength in strengths: remainder_counts[strength % k] += 1 # Start forming pairs max_combinations = 0 # Pair with complement remainders for i in range(1, (k // 2) + 1): if i != k - i: max_combinations += min(remainder_counts[i], remainder_counts[k - i]) else: max_combinations += remainder_counts[i] // 2 # Pair the zero remainders max_combinations += remainder_counts[0] // 2 return max_combinations"},{"question":"You are given a list of n tasks. Each task has a deadline and has to be done within its deadline in order to be considered valid. Kindly note that you can only work on one task at a time, and you want to maximize the number of valid tasks that get completed. The input consists of an integer n (1 leq n leq 2000), the number of tasks. The next n lines each contain a pair of integers a_i and d_i (1 leq a_i, d_i leq 10^9), indicating the start time and deadline of each task. A task that starts at time a_i and has the deadline d_i should be completed within the interval [a_i, d_i]. It takes exactly 1 unit of time to complete a task. Output the maximum number of tasks that can be completed on time. # Example Input ``` 5 1 2 2 2 2 3 3 4 4 5 ``` Output ``` 4 ``` Explanation You can complete the following tasks: - Task starting at 1 with deadline at 2 - Task starting at 2 with deadline at 2 - Task starting at 3 with deadline at 4 - Task starting at 4 with deadline at 5","solution":"def max_completed_tasks(n, tasks): Returns the maximum number of tasks that can be completed on time. # Sort the tasks by their deadlines (second value) tasks.sort(key=lambda x: x[1]) current_time = 0 tasks_completed = 0 for start, deadline in tasks: if current_time < start <= deadline: current_time = start tasks_completed += 1 return tasks_completed"},{"question":"You are given a series of events in the form of timestamps when users log in and log out of a system. Your task is to calculate the maximum number of users that were simultaneously logged into the system at any point in time. Each timestamp entry is represented as a tuple (t, y): - `t` is a time in minutes from the start of the day (0 <= t <= 1439, where 0 represents 00:00 and 1439 represents 23:59). - `y` is either `in` or `out`, indicating whether the timestamp corresponds to a user logging in or logging out, respectively. The input consists of several lines. The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of log entries. The following n lines each contain a timestamp tuple (t, y). Output a single integer, the maximum number of users simultaneously logged in at any point during the day. # Examples Input: ``` 6 1 in 2 in 3 out 4 in 5 out 6 out ``` Output: ``` 2 ``` Explanation: - Two simultaneous users are logged in at times 2 and 3. - Additional users log in and out such that at no other time do as many as two users overlap. Input: ``` 4 0 in 10 in 10 out 20 out ``` Output: ``` 2 ``` Explanation: - Two users log in at 0 and 10 and log out at 10 and 20, respectively. - The maximum overlap of simultaneous users logged in is 2. Input: ``` 3 0 in 1 out 2 in ``` Output: ``` 1 ``` Explanation: - Users log in and out such that no more than one user is logged in simultaneously.","solution":"def max_simultaneous_users(n, log_entries): Calculate the maximum number of users simultaneously logged into the system. Parameters: n (int): Number of log entries. log_entries (list of tuples): List of log entries as (t, y) where t is the time in minutes and y is \'in\' or \'out\'. Returns: int: Maximum number of users simultaneously logged in at any point. events = [] for entry in log_entries: t, y = entry events.append((t, y)) events.sort() max_users = 0 current_users = 0 for t, y in events: if y == \'in\': current_users += 1 else: current_users -= 1 if current_users > max_users: max_users = current_users return max_users # Reading input and converting to required form can be done as follows: # Example of input # n = 6 # log_entries = [(1, \'in\'), (2, \'in\'), (3, \'out\'), (4, \'in\'), (5, \'out\'), (6, \'out\')] # The function call would be: # result = max_simultaneous_users(n, log_entries) # print(result)"},{"question":"Alice loves graph theory and recently, she has been captivated by the concept of bipartite graphs. A bipartite graph is a graph whose vertices can be divided into two disjoint sets such that no two vertices within the same set are adjacent. Given an undirected graph with n vertices and m edges, represented by an adjacency list, Alice wants to determine if the graph is bipartite. The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) — the number of vertices and edges in the graph, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing an edge between vertex u and vertex v. If the graph is bipartite, print \\"YES\\". Otherwise, print \\"NO\\". Note: The given graph may be disconnected.","solution":"from collections import deque def is_bipartite(n, m, edges): Determines if a graph is bipartite given the number of vertices (n), number of edges (m), and the list of edges. def bfs_check_bipartite(start, adj_list, color): queue = deque([start]) color[start] = 0 # Starting color while queue: node = queue.popleft() for neighbor in adj_list[node]: if color[neighbor] == -1: # Not colored color[neighbor] = 1 - color[node] # Alternate color queue.append(neighbor) elif color[neighbor] == color[node]: return False return True adj_list = [[] for _ in range(n)] for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) color = [-1] * n # -1 indicates that the node has not been colored yet for i in range(n): if color[i] == -1: # Not visited if not bfs_check_bipartite(i, adj_list, color): return \\"NO\\" return \\"YES\\""},{"question":"Let h(x) be the highest power of 2 that divides a positive integer x. Given three integers p, q and r, find some positive integers c and d such that - h(c) ge p - h(d) ge q - h(c + d) le r The only line of input contains three integers p, q and r (1 le p, q, r le 1000). Print two lines, one for decimal representation of c and one for decimal representation of d. Both numbers must not contain leading zeros and must have length no more than 2000. In the first sample, we have p = 3, q = 2 and r = 5. One valid solution is c = 8 and d = 4. Indeed, we have h(c) = 8 ge 3, h(d) = 4 ge 2, and also h(c + d) = h(12) = 4 le 5.","solution":"def find_cd(p, q, r): Given three integers p, q, and r, find some positive integers c and d such that: - h(c) >= p - h(d) >= q - h(c + d) <= r def h(x): return x & -x # Initialize c and d to the minimum values satisfying h(c) >= p and h(d) >= q c = 2 ** (p - 1) d = 2 ** (q - 1) # Adjust c and/or d until h(c + d) <= r while h(c + d) > 2 ** (r - 1): # Increase d while keeping h(d) >= q, to attempt fitting the c + d constraint d += 2 ** (q - 1) # If we exceed a reasonable range, increment c and restart adjusting d if d > 2 ** (r - 1): c += 2 ** (p - 1) d = 2 ** (q - 1) return c, d"},{"question":"You are given a sequence of integers and need to perform a series of queries on this sequence. Each query is either updating an element of the sequence or finding the minimum value in a subarray of the sequence. Your task is to efficiently support both types of queries. The sequence contains n integers initially. You need to perform q queries on this sequence. Each query can be one of the following: 1. \\"1 x y\\" - Update the element at index x to y. 2. \\"2 l r\\" - Find the minimum element in the subarray from index l to r (both inclusive). Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the sequence and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial sequence. The next q lines each contain a query in one of the formats described above. The indices in the queries are 1-based. Output For each query of type \\"2 l r\\", print the minimum value in the subarray from l to r. Example Input: 5 5 1 5 2 4 3 2 1 5 2 3 4 1 2 1 2 1 5 2 1 2 Output: 1 2 1 1 Note: - For the first query \\"2 1 5\\", the minimum value in the entire array [1, 5, 2, 4, 3] is 1. - For the second query \\"2 3 4\\", the minimum value in the subarray [2, 4] is 2. - For the third query \\"1 2 1\\", the array is updated to [1, 1, 2, 4, 3]. - For the fourth query \\"2 1 5\\", the minimum value in the array [1, 1, 2, 4, 3] is 1. - For the fifth query \\"2 1 2\\", the minimum value in the subarray [1, 1] is 1.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the tree self.build(data) def build(self, data): # Inserting the elements in the leaves of the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Building the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): # Updating the value at the leaf index += self.n self.tree[index] = value # Moving upward and updating the parents while index > 1: index //= 2 self.tree[index] = min(self.tree[index * 2], self.tree[index * 2 + 1]) def range_min(self, left, right): result = float(\\"inf\\") left += self.n right += self.n while left < right: if left % 2: result = min(result, self.tree[left]) left += 1 if right % 2: right -= 1 result = min(result, self.tree[right]) left //= 2 right //= 2 return result def handle_queries(n, q, arr, queries): seg_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: x, y = query[1] - 1, query[2] seg_tree.update(x, y) elif query[0] == 2: l, r = query[1] - 1, query[2] results.append(seg_tree.range_min(l, r)) return results"},{"question":"You are given an array of integers representing the prices of spicy and sweet desserts available in the menu of a restaurant. You need to decide a combination of two desserts to order such that the combination consists of different types (one spicy and one sweet) and the total cost of the combination is maximized. An integer array `desserts` and a character array `type` are given, where `desserts[i]` represents the price of the `i-th` dessert and `type[i]` represents whether the `i-th` dessert is spicy or sweet (\'S\' for spicy and \'W\' for sweet). Your task is to find the maximum possible cost of a combination of one spicy and one sweet dessert. If no such combination is possible, return -1. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of desserts. - The second line contains `n` integers `desserts[i]` (1 ≤ desserts[i] ≤ 1000) — the prices of desserts. - The third line contains `n` characters `type[i]` (\'S\' for spicy or \'W\' for sweet) — the types of desserts. Output: - Print a single integer — the maximum cost of a combination of one spicy and one sweet dessert, or -1 if no valid combination exists. Example: Input: 5 1 3 5 9 11 S W S S W Output: 14 Explanation: In this example, the available desserts are priced as [1, 3, 5, 9, 11] with types [S, W, S, S, W]. The possible combinations are: - 1 (S) + 3 (W) = 4 - 1 (S) + 11 (W) = 12 - 5 (S) + 3 (W) = 8 - 5 (S) + 11 (W) = 16 - 9 (S) + 3 (W) = 12 - 9 (S) + 11 (W) = 20 Among these, the maximum combination cost is 9 + 11 = 20. Hence, the output is 20.","solution":"def max_dessert_combination(n, desserts, dessert_types): max_spicy = -1 max_sweet = -1 for i in range(n): if dessert_types[i] == \'S\': if desserts[i] > max_spicy: max_spicy = desserts[i] elif dessert_types[i] == \'W\': if desserts[i] > max_sweet: max_sweet = desserts[i] if max_spicy == -1 or max_sweet == -1: return -1 else: return max_spicy + max_sweet"},{"question":"In a parallel universe, you are a master clockmaker renowned for creating intricate and magical timepieces. One of your creations is a unique clock that requires a specific sequence of gears to function correctly. The clock is represented as a linear series of n slots, where each slot can hold a gear. There are three types of gears: - Type 1: Emits a signal to the next slot on the right. - Type 2: Emits a signal to the next slot on the left. - Type 3: Emits signals to both the adjacent slots on the left and right. Your task is to arrange the gears in such a way that, when activated, the gears form a continuous chain of signals starting from any slot, and the chain must produce exactly x signals in total. Signals that go beyond the boundaries of the slots or through an already activated slot do not count. Input: The first line contains two integers n and x - the number of slots and the number of required signals. Output: Output n lines, each consisting of a single character \'1\', \'2\', or \'3\', representing the type of gear placed in each slot. Then, in the next line, output one integer k (1 ≤ k ≤ n) - the slot number from which the chain of signals will be activated. Your solution must ensure the number of signals is exactly x, and the chain can only be initiated from the specified slot. Example: Input: 5 4 Output: 1 1 3 1 2 3","solution":"def arrange_gears(n, x): Arranges gears in the given number of slots to produce the exact number of signals required and returns the arrangement along with the starting slot. Parameters: n (int): Number of slots. x (int): Number of required signals. Returns: list: An array of ints representing the type of gear in each slot. int: The starting slot number. # Initialize gears with 1s, which won\'t work if x > n gears = [1] * n # To produce the signals perfectly, we need to decide how many \'1\'s, \'2\'s, and \'3\'s to use based on x. for i in range(x): if i % 2 == 0: gears[i] = 3 # Place \'3\' gear to emit signals in both directions else: gears[i] = 1 # Place \'1\' gear to emit signal to the right # The starting slot will be the 1st slot for simplicity start_slot = 1 return gears, start_slot # Example Call to Function # n = 5 # x = 4 # gears and start_slot are returned gears, start_slot = arrange_gears(5, 4) print(\\"n\\".join(map(str, gears))) print(start_slot)"},{"question":"In a card game, each unique card has a value from 1 to N. However, the deck can contain duplicates, and the cards may not be sorted in any particular order. You are required to identify the smallest missing positive integer from the deck. You are given an array of integers representing the values of the cards in the deck. Write a function that returns the smallest missing positive integer. **Function Signature:** ```python def find_missing_positive(cards: List[int]) -> int: ``` **Input:** - A list of integers `cards` where each integer is between 1 and N (inclusive), and the length of the list can be up to 1000. **Output:** - An integer representing the smallest missing positive integer from the list. **Example:** ```python assert find_missing_positive([1, 2, 3, 4, 5]) == 6 assert find_missing_positive([3, 4, -1, 1]) == 2 assert find_missing_positive([7, 8, 9, 11, 12]) == 1 ```","solution":"from typing import List def find_missing_positive(cards: List[int]) -> int: n = len(cards) # First, segregate positive and non-positive numbers for i in range(n): while 1 <= cards[i] <= n and cards[cards[i] - 1] != cards[i]: # Swap cards[i] and cards[cards[i] - 1] cards[cards[i] - 1], cards[i] = cards[i], cards[cards[i] - 1] # Find the first missing positive integer for i in range(n): if cards[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to answer q queries, where each query consists of a pair of nodes u and v. For each query, find the shortest distance between the nodes u and v. If there is no path between the nodes u and v, return -1 for that query. Input: - The first line contains three integers n, m, and q (1 leq n leq 500, 1 leq m leq 10,000, 1 leq q leq 10,000). - The next m lines each contain three integers a, b, and w (1 leq a, b leq n, 1 leq w leq 1,000), denoting an edge between nodes a and b with weight w. - The next q lines each contain two integers u and v (1 leq u, v leq n), representing a query to find the shortest distance between u and v. Output: - For each query, print a single integer denoting the shortest distance between nodes u and v. If there is no path, print -1. Example: Input: 6 9 3 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 3 5 5 4 6 1 5 6 2 5 4 2 1 4 2 5 3 6 Output: 7 6 5","solution":"def floyd_warshall(n, edges): # Initialize distance array inf = float(\'inf\') distance = [[inf] * n for _ in range(n)] # Distance from each node to itself is 0 for i in range(n): distance[i][i] = 0 # Populate initial distances based on edges for a, b, w in edges: distance[a-1][b-1] = min(distance[a-1][b-1], w) distance[b-1][a-1] = min(distance[b-1][a-1], w) # Floyd Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if distance[i][j] > distance[i][k] + distance[k][j]: distance[i][j] = distance[i][k] + distance[k][j] return distance def shortest_path(n, edges, queries): # Get the shortest distances between all pairs of nodes dist = floyd_warshall(n, edges) results = [] for u, v in queries: # Adjust indices for 0-based indexing if dist[u-1][v-1] == float(\'inf\'): results.append(-1) else: results.append(dist[u-1][v-1]) return results"},{"question":"You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. Write a function: ```python def merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None: # Your code here ``` # Example ```python merge([1,2,3,0,0,0], 3, [2,5,6], 3) ``` Outputs: [1,2,2,3,5,6] Constraints: * -10^9 <= nums1[i], nums2[i] <= 10^9 * nums1.length == m + n * nums2.length == n","solution":"from typing import List def merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None: Merges two sorted arrays nums1 and nums2 into one sorted array nums1. Args: nums1 (List[int]): First sorted array with length m + n. m (int): Number of valid elements in nums1. nums2 (List[int]): Second sorted array with length n. n (int): Number of valid elements in nums2. Returns: None: The merged result is stored in nums1. # Start from the end of nums1 array idx1, idx2, idx_merged = m - 1, n - 1, m + n - 1 # Merge in reverse order while idx1 >= 0 and idx2 >= 0: if nums1[idx1] > nums2[idx2]: nums1[idx_merged] = nums1[idx1] idx1 -= 1 else: nums1[idx_merged] = nums2[idx2] idx2 -= 1 idx_merged -= 1 # If nums2 is not yet fully merged while idx2 >= 0: nums1[idx_merged] = nums2[idx2] idx2 -= 1 idx_merged -= 1"},{"question":"A matrix is said to be good if it contains all integers from 1 to n^2 exactly once. You are given a positive integer n. Your task is to determine if there exists a good matrix that is an n x n matrix such that the sum of elements in every row, and the sum of elements in every column, and the sum of the elements of diagonals are all the same. If such a matrix exists, print \\"YES\\" otherwise print \\"NO\\". Input The only line contains an integer n (1 ≤ n ≤ 10^4). Output Print a single line containing \\"YES\\" or \\"NO\\".","solution":"def is_good_matrix_possible(n): Determines if it\'s possible to have an n x n good matrix such that the sum of elements in every row, every column, and the sum of the elements of diagonals are all the same. Parameters: n (int): The size of the matrix Returns: str: \\"YES\\" if such a matrix is possible, \\"NO\\" otherwise # A good matrix of this nature is essentially a magic square. # Magic squares are possible for n >= 1 except for n = 2 # For n = 1 (trivial case), matrix is [[1]] which is a magic square. # For n >= 3, odd orders are always possible and doubly even orders are possible while singly even orders (n=2) are not. if n == 2: return \\"NO\\" return \\"YES\\""},{"question":"You are given an integer array containing both positive and negative numbers. Write a program to rearrange the elements of the array such that positive and negative numbers alternately occupy positions, with the condition that the relative order of positive numbers and negative numbers remains the same. If there are extra positive or negative numbers, they should be moved to the end of the array. The first line of the input contains an integer T (1 ≤ T ≤ 100) denoting the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 1000) denoting the number of elements in the array. The second line of each test case contains n space-separated integers. Output the rearranged array for each test case in a single line (elements separated by spaces). Example: Input: 2 5 1 -2 3 -4 5 6 -5 4 -3 2 -1 1 Output: 1 -2 3 -4 5 4 -5 2 -3 1 -1 Note: The relative order of positive/negative numbers should not change, and if more positives or negatives left, they should be added at the end of the array.","solution":"def rearrange_array(test_cases): results = [] for case in test_cases: array = case[1] pos = [num for num in array if num >= 0] neg = [num for num in array if num < 0] rearranged = [] p, n = 0, 0 while p < len(pos) and n < len(neg): rearranged.append(pos[p]) rearranged.append(neg[n]) p += 1 n += 1 # Add remaining positive numbers, if any while p < len(pos): rearranged.append(pos[p]) p += 1 # Add remaining negative numbers, if any while n < len(neg): rearranged.append(neg[n]) n += 1 results.append(rearranged) return results def format_result(results): return [\' \'.join(map(str, result)) for result in results] # Read input and format the required output def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, len(input_lines[1:]), 2): n = int(input_lines[i]) array = list(map(int, input_lines[i+1].split())) test_cases.append((n, array)) results = rearrange_array(test_cases) return format_result(results)"},{"question":"Max and Lucas are inventors working on a new type of grid puzzle. The puzzle is played on an n x n grid where each cell contains an integer. The objective for the player is to move a piece from the top-left cell (1,1) to the bottom-right cell (n,n) with the minimum possible cost. The cost of moving from one cell to another is given by the cell\'s integer value. A player can only move to the right or downward from the current cell. Max and Lucas, being busy with other projects, need your help to determine the minimum cost required to reach the bottom-right cell from the top-left cell while only allowed to move right or downwards. Input: - The first line contains an integer n (2 ≤ n ≤ 100), the size of the grid. - The next n lines contain n integers each, describing the grid. The j-th integer in the i-th row denotes the cost of cell (i, j). Output: - A single integer, the minimum cost required to move from the top-left cell to the bottom-right cell while only moving right or downward. Example: Input: 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path with the minimum cost is 1 -> 3 -> 1 -> 1 -> 1 with a total cost of 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_cost_path(grid): Calculate the minimum cost path in a given n x n grid from the top-left cell to the bottom-right cell, only moving right or downward. Parameters: grid (list of list of int): The n x n grid with integer costs. Returns: int: The minimum cost to traverse the grid from (1, 1) to (n, n). n = len(grid) # Initialize a 2D dp array with the same size as the grid dp = [[0]*n for _ in range(n)] # Set the starting point cost dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][j]"},{"question":"You are given a string s of length n, which consists only of lowercase English letters. You want to determine the length of the longest substring of s such that all the characters in the substring are distinct. Implement a function `int longest_unique_substring_length(string s)` that takes the input string s and returns the length of the longest substring with all unique characters. # Input - A single string s (1 ≤ |s| ≤ 100,000), consisting of only lowercase English letters. # Output - An integer, the length of the longest substring with all unique characters. # Example ```python def longest_unique_substring_length(s): # Implement your solution here pass # Example Usage print(longest_unique_substring_length(\\"abcabcbb\\")) # Output: 3 print(longest_unique_substring_length(\\"bbbbb\\")) # Output: 1 print(longest_unique_substring_length(\\"pwwkew\\")) # Output: 3 ``` # Explanation - In the first example, the longest substring with all unique characters is either \\"abc\\" or \\"bca\\" or \\"cab\\", each with a length of 3. - In the second example, the longest substring with all unique characters is \\"b\\", with a length of 1. - In the third example, the longest substring with all unique characters is \\"wke\\", with a length of 3 (Note that \\"pwke\\" is a substring but does not have all unique characters).","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all unique characters in the given string. Parameters: s (str): The input string. Returns: int: The length of the longest substring with all unique characters. char_index_map = {} longest = 0 start = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"You are given a string consisting of lowercase letters and your task is to rearrange the letters of the string to form the lexicographically smallest palindrome. If it is not possible to form a palindrome, return \\"-1\\". Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 50). Each of the next t lines contains a single string s. The length of each string is between 1 and 100, inclusive. For each test case, print the lexicographically smallest palindrome that can be formed using the letters of the given string, or \\"-1\\" if no palindrome can be formed. Examples: Input: 2 aabb abbc Output: abba -1","solution":"def smallest_palindrome(s): from collections import Counter count = Counter(s) odd_count = sum(1 for val in count.values() if val % 2 != 0) if odd_count > 1: return \\"-1\\" left_half = [] middle_char = \\"\\" for char in sorted(count): if count[char] % 2 != 0: middle_char = char left_half.append(char * (count[char] // 2)) left_half_part = \'\'.join(left_half) return left_half_part + middle_char + left_half_part[::-1] def solve_palindrome_problem(test_cases): results = [] for s in test_cases: results.append(smallest_palindrome(s)) return results"},{"question":"You are given a grid with dimensions n times m. Each cell in the grid has either \'B\' (representing a block) or \'F\' (representing free space). You need to navigate from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (n, m) by only moving right or down. Your task is to determine the number of distinct paths that you can take to reach the destination provided you can only pass through cells marked \'F\'. The first line contains two integers, n and m (1 le n, m le 1000) — the dimensions of the grid. The subsequent n lines each contain m characters (\'B\' or \'F\') representing the grid. Print a single integer — the number of distinct paths from (1, 1) to (n, m) that only traverse cells marked \'F\'. # Example Input: 3 3 F F F F B F F F F Output: 2 Explanation: There are two distinct paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def num_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'B\' or grid[-1][-1] == \'B\': return 0 dp = [[0] * m for _ in range(n)] # Initialize dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'B\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. We define the \\"beauty\\" of a substring as the length of the maximal subsequence of identical, consecutive characters. For example, the beauty of the substring \\"aabbccc\\" is 3, because the maximal subsequence of identical consecutive characters is \\"ccc\\". Your task is to determine the length of the longest subsequence of identical, consecutive characters across all possible substrings of the given string s after performing exactly k operations. In each operation, you can change any character of the string to any other lowercase English letter. # Input - The first line contains the string s which consists of lowercase English letters (1 ≤ |s| ≤ 2,000). - The second line contains an integer k (0 ≤ k ≤ |s|). # Output - Print the length of the longest subsequence of identical, consecutive characters after performing exactly k operations. # Example Input ``` abacccba 2 ``` Output ``` 5 ``` In the example above, one optimal solution is to change the two \'b\'s at the end of the string to \'c\'s, forming the string \\"abacccccc\\". This results in a substring \\"ccccc\\" with length 5.","solution":"def longest_beauty(s, k): Returns the length of the longest subsequence of identical consecutive characters after performing exactly k operations. from collections import defaultdict def max_length_with_replacements(char): left = 0 num_replacements = 0 max_len = 0 for right in range(len(s)): if s[right] != char: num_replacements += 1 while num_replacements > k: if s[left] != char: num_replacements -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len max_beauty = 0 for char in set(s): max_beauty = max(max_beauty, max_length_with_replacements(char)) return max_beauty"},{"question":"John loves playing with numbers and recently he stumbled upon an interesting pattern with prime numbers. He noticed that sometimes a prime number remains prime when its digits are reversed. For instance, 13 and 31 are both primes. John calls such primes \'emirp\' numbers. Given a positive integer n (1 ≤ n ≤ 500), write a program to find all unique emirp numbers up to n. # Input - A single integer n representing the upper limit of the range to check for emirp numbers. # Output - A list of all emirp numbers up to n. If no emirp numbers are found, output an empty list. # Example Input ``` 100 ``` Output ``` [13, 17, 31, 37, 71, 73, 79, 97] ``` # Notes - An emirp number is a number that is prime and its reversed digits also form a prime number. - The output should be sorted in ascending order.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def emirp_numbers(n): emirps = [] for num in range(2, n + 1): if is_prime(num): reversed_num = int(str(num)[::-1]) if num != reversed_num and is_prime(reversed_num): emirps.append(num) return sorted(emirps)"},{"question":"There are n cities and m one-way roads between them. Each road connects exactly two cities, and no city has a road to itself. The roads may have different lengths. You start from city 1 and you need to find the shortest path to every other city using the available roads. If a city is not reachable from city 1, you should return -1 for that city. # Input - The first line contains two integers n (2 leq n leq 1000) and m (1 leq m leq 10000) — the number of cities and the number of roads. - The next m lines each contain three integers u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 1000) — meaning there is a road from city u to city v with length w. # Output - Print a single line containing n-1 integers. The i-th integer should be the shortest distance from city 1 to city i+1 if a path exists, otherwise print -1. # Example **Input:** ``` 5 6 1 2 5 1 4 9 2 3 2 3 4 1 4 5 3 2 5 4 ``` **Output:** ``` 5 7 8 9 ``` **Explanation:** - The shortest path from city 1 to city 2 is of length 5. - The shortest path from city 1 to city 3 is through city 2 with total length 5+2=7. - The shortest path from city 1 to city 4 is through cities 2 and 3, with total length 5+2+1=8. - The shortest path from city 1 to city 5 is through city 4 with a total length of 9. Use Dijkstra\'s algorithm or any suitable shortest path algorithm to solve this problem efficiently.","solution":"import heapq def shortest_paths(n, m, roads): This function finds the shortest path from city 1 to all other cities using Dijkstra\'s algorithm. Args: n (int): Number of cities. m (int): Number of roads. roads (List[Tuple[int, int, int]]): List of tuples where each tuple is (u, v, w) representing a road from city u to city v with weight w. Returns: List[int]: A list of shortest distances from city 1 to each city (2 to n). If a city can\'t be reached, the distance is -1. # Create the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) # Dijkstra\'s algorithm dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) result = [] for i in range(2, n + 1): if dist[i] == float(\'inf\'): result.append(-1) else: result.append(dist[i]) return result # Example usage: # roads = [ # (1, 2, 5), # (1, 4, 9), # (2, 3, 2), # (3, 4, 1), # (4, 5, 3), # (2, 5, 4), # ] # print(shortest_paths(5, 6, roads)) # Output: [5, 7, 8, 9]"},{"question":"Alicia is tasked with managing a collection of strings at her new job. She needs to perform several operations on these strings to keep up with the dynamic requirements of her project. The collection of strings is initially empty and Alicia receives m queries to process. Each query can be one of four types: 1. Add a new string `s` (1 ≤ |s| ≤ 100, where |s| is the length of string s consisting of lowercase English letters). 2. Remove the string `s` from the collection if it exists. 3. Check if the string `s` is present in the collection and print \\"PRESENT\\" or \\"ABSENT\\". 4. Print the longest string in the collection or \\"EMPTY COLLECTION\\" if the collection is empty. The first line of input contains an integer m (1 ≤ m ≤ 2·105) — the number of queries. Each of the next m lines contains an integer t (1 ≤ t ≤ 4) — the type of the query, followed by a string s for the first three types of queries. For the queries of the fourth type, print the required string value on a separate line. Example: ``` Input: 5 1 hello 1 world 4 3 hello 2 world Output: world PRESENT ``` Help Alicia manage the collection of strings efficiently.","solution":"def manage_strings(m, queries): collection = set() result = [] for query in queries: t = query[0] if t == 1: s = query[1] collection.add(s) elif t == 2: s = query[1] if s in collection: collection.remove(s) elif t == 3: s = query[1] if s in collection: result.append(\\"PRESENT\\") else: result.append(\\"ABSENT\\") elif t == 4: if collection: longest_string = max(collection, key=len) result.append(longest_string) else: result.append(\\"EMPTY COLLECTION\\") return result"},{"question":"You are given an array of integers representing the initial positions of robots on a 1-dimensional number line. Each robot can only move to the right in each time step. The robots will move synchronously and stop if they encounter another robot in their path. When a robot stops, it cannot move again. The goal is to determine the final positions of all the robots after they have moved as far to the right as possible. The first line of the input contains one integer n (1 le n le 10^5) — the number of robots. The second line of the input contains n distinct integers p_1, p_2, dots, p_n (1 le p_i le 10^9) — the initial positions of the robots. The positions are given in increasing order. Print n integers fp_1, fp_2, dots, fp_n — the final positions of the robots after all possible movements. Example Input: ``` 5 1 3 5 10 20 ``` Output: ``` 1 3 5 10 20 ``` Example Input: ``` 4 1 2 6 8 ``` Output: ``` 1 2 6 8 ```","solution":"def final_positions(n, positions): This function returns the final positions of robots after all possible movements. Parameters: n (int): number of robots positions (list of int): initial positions of the robots Returns: list of int: final positions of the robots return positions"},{"question":"In a computer network, routers are positioned in a straight line at different integer coordinates. Each router has a limited range within which it can communicate. Specifically, the i-th router is located at position xi and has a range of ri meters. Two routers can communicate directly if the distance between them does not exceed the sum of their ranges. Your task is to determine the maximum number of routers that can communicate directly or indirectly (i.e., through a chain of routers). The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of routers. The second line contains n integers x1, x2, ..., xn (-10^9 ≤ xi ≤ 10^9) — the current coordinates of the routers. The third line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 10^9) — the communication ranges of the routers. Print a single integer — the maximum number of routers that can communicate directly or indirectly. **Example:** Input: ``` 4 1 5 10 17 3 2 5 1 ``` Output: ``` 3 ``` **Explanation:** In this example, routers positioned at 1, 5, and 10 can communicate directly or indirectly: the router at position 1 can communicate with the router at position 5 because their ranges overlap (1+3 ≥ 5-1). Similarly, the router at position 5 can communicate with the router at position 10 because their ranges overlap (2+5 ≥ 10-5). The router at position 17 cannot communicate with the others since no overlap is created with any other router’s range. Thus, the maximum number of routers that can communicate directly or indirectly is 3.","solution":"def max_routers_in_communication(n, positions, ranges): routers = sorted(zip(positions, ranges)) max_chain_routers = 0 def dfs(v, visited, adjacency_list): stack = [v] size = 0 while stack: u = stack.pop() if not visited[u]: visited[u] = True size += 1 for neighbor in adjacency_list[u]: if not visited[neighbor]: stack.append(neighbor) return size adjacency_list = [[] for _ in range(n)] for i in range(n): for j in range(i + 1, n): if routers[i][0] + routers[i][1] >= routers[j][0] - routers[j][1]: adjacency_list[i].append(j) adjacency_list[j].append(i) visited = [False] * n for i in range(n): if not visited[i]: max_chain_routers = max(max_chain_routers, dfs(i, visited, adjacency_list)) return max_chain_routers"},{"question":"You are given an undirected graph with n nodes and m edges. Your task is to determine the number of connected components in the graph. A connected component is a maximal set of nodes such that there is a path between any two nodes in this set. The first line of the input contains two integers n and m (1 le n, m le 10^5) — the number of nodes and the number of edges. Each of the next m lines contains two integers u and v (1 le u, v le n) — indicating that there is an edge between node u and node v. Print a single integer — the number of connected components in the graph.","solution":"def num_connected_components(n, m, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) while queue: current = queue.popleft() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) connected_components = 0 for node in range(1, n + 1): if not visited[node]: visited[node] = True bfs(node) connected_components += 1 return connected_components"},{"question":"Given an array of positive integers representing the heights of buildings along a street, write a function to find the maximum number of buildings you can see when looking from the left. A building is visible if it is taller than all of the buildings to its left. For example, consider the array [3, 7, 8, 3, 6, 1, 10]. The buildings that are taller than all previous ones when viewed from the left are represented by the heights [3, 7, 8, 10]. So, the answer for this example would be 4. Function Signature: ```python def count_visible_buildings(heights: List[int]) -> int: pass ``` **Input:** - An integer n representing the number of buildings (1 ≤ n ≤ 1000). - An array of n positive integers heights[1], heights[2], ..., heights[n] (1 ≤ heights[i] ≤ 10000). **Output:** - An integer representing the maximum number of visible buildings from the left. **Example:** Input: [3, 7, 8, 3, 6, 1, 10] Output: 4 Input: [1, 2, 3, 4, 5] Output: 5 Input: [5, 4, 3, 2, 1] Output: 1","solution":"from typing import List def count_visible_buildings(heights: List[int]) -> int: max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"A company needs an efficient way to manage the tasks of its employees. Each employee can be assigned multiple tasks, but they need to complete them in the order they were assigned. However, sometimes due to changes in project requirements, new tasks with higher priority need to be added to the front of their task list. You are required to implement a system that supports the following operations: 1. **assign** X Y: Assign task Y to employee X. The task Y should be appended to the end of the employee X\'s task list. 2. **add_priority** X Y: Add priority task Y to employee X, meaning it should be added to the beginning of employee X\'s task list. 3. **process** X: Process the next task for employee X, which should be the task at the beginning of the task list. The task should be removed from the list and its name should be printed out. Each command will be given one at a time. The system should operate efficiently even if there are a large number of commands. # Input - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of commands. - Each of the next n lines contains a command in one of the formats described above, with the employee name and task name being non-empty strings of at most 20 characters and each command properly formatted. # Output - For each \\"process\\" command, output the name of the processed task. # Example Input ``` 6 assign Alice ProjectA add_priority Alice UrgentTask1 assign Bob ProjectB process Alice assign Alice ProjectC process Alice ``` Output ``` UrgentTask1 ProjectA ``` # Note - You can assume that an employee will have at least one task assigned to them before calling a \\"process\\" command. - The \\"assign\\" and \\"add_priority\\" commands should affect only the specified employee\'s task list in isolation, without affecting others\' task lists.","solution":"from collections import deque class TaskManager: def __init__(self): self.tasks = {} def assign(self, employee, task): if employee not in self.tasks: self.tasks[employee] = deque() self.tasks[employee].append(task) def add_priority(self, employee, task): if employee not in self.tasks: self.tasks[employee] = deque() self.tasks[employee].appendleft(task) def process(self, employee): if employee in self.tasks and self.tasks[employee]: return self.tasks[employee].popleft() return None def handle_commands(commands): manager = TaskManager() results = [] for command in commands: parts = command.split() operation = parts[0] employee = parts[1] if operation == \\"assign\\": task = parts[2] manager.assign(employee, task) elif operation == \\"add_priority\\": task = parts[2] manager.add_priority(employee, task) elif operation == \\"process\\": result = manager.process(employee) if result: results.append(result) return results"},{"question":"You are given an integer array nums of length n and an integer k. The array contains unique elements, and k is a positive integer (1 ≤ k ≤ n). Your goal is to find the k-th largest element in the array. Implement a function `findKthLargest(nums, k)` that returns the k-th largest element in the array. # Function Signature ```python def findKthLargest(nums: List[int], k: int) -> int: ``` # Input - `nums`: A list of `n` unique integers. - `k`: A positive integer representing the position (1-based) to find the k-th largest element in the array. # Output - Return the k-th largest element in `nums`. # Examples 1. Input: `nums = [3, 2, 1, 5, 6, 4]`, `k = 2` Output: `5` 2. Input: `nums = [3, 2, 3, 1, 2, 4, 5, 5, 6]`, `k = 4` Output: `4` # Constraints - The length of the array `n` will be between 1 and 1000. - All elements of `nums` are unique. - `1 ≤ k ≤ n`. # Note You may assume the most efficient solution is expected, which should ideally run in linear time or O(n) average time complexity. Consider using a heap or quickselect algorithm for optimal performance.","solution":"import heapq from typing import List def findKthLargest(nums: List[int], k: int) -> int: Returns the k-th largest element in the list nums. # Use a min-heap of size k min_heap = nums[:k] heapq.heapify(min_heap) for num in nums[k:]: if num > min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, num) return min_heap[0]"},{"question":"You are given a binary tree where each node contains a value. Create a function to check if the binary tree is a valid binary search tree (BST). A valid BST is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Your task is to implement the function `bool isValidBST(TreeNode* root)` that takes the root of the binary tree and returns a boolean value indicating whether it is a valid BST or not. # Example 1 ``` Input: [2,1,3] Output: true ``` Explanation: ``` 2 / 1 3 ``` Each node follows the properties of a BST. # Example 2 ``` Input: [5,1,4,null,null,3,6] Output: false ``` Explanation: ``` 5 / 1 4 / 3 6 ``` The right subtree of node with value 5 contains a node with value 4, and the right subtree of that node contains a node with value 3, which is less than 5. # Constraints - The number of nodes in the tree is in the range [1, 10^4]. - -10^4 <= Node.val <= 10^4 # Function Signature `bool isValidBST(TreeNode* root)` # Note - You may assume that the tree does not contain duplicate values. - You are not required to write the class definition for the TreeNode. However, it is usually defined as: ```cpp struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode() : val(0), left(nullptr), right(nullptr) {} TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} }; ``` - Ensure you handle edge cases such as an empty tree (should be considered a valid BST).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root): Determines if a binary tree is a valid binary search tree (BST). Parameters: root (TreeNode): The root of the binary tree. Returns: bool: True if the tree is a valid BST, False otherwise. def validate(node, low=float(\'-inf\'), high=float(\'inf\')): # An empty tree is a valid BST if not node: return True # The current node\'s value must be between low and high if not (low < node.val < high): return False # Recursively validate the left and right subtrees return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"You are given an array of n positive integers. You are allowed to perform any number of the following operation: choose two indices i and j (1 leq i, j leq n, i neq j) and rearrange their order. Your goal is to maximize the possible sum of the absolute differences of all consecutive elements in the array. Formally, given an array of integers a_1, a_2, ldots, a_n, you should maximize the sum: |b_1 - b_2| + |b_2 - b_3| + ldots + |b_{n-1} - b_n| where b is any permutation of a. # Input - The first line contains a single integer t (1 leq t leq 10) — the number of test cases. - The first line of each test case contains a single integer n (2 leq n leq 100000) — the length of the array. - The next line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^5). # Output For each test case, output a single integer — the maximum possible sum of the absolute differences of all consecutive elements in the array. # Example Input ``` 2 3 1 3 2 4 4 3 2 1 ``` Output ``` 4 6 ``` Explanation In the first test case, we can rearrange the array to [1, 2, 3] or [3, 2, 1], making the sum of absolute differences equal to |1-2| + |2-3| = 1 + 1 = 2 for both arrangements. In the second test case, we can rearrange the array to [1, 4, 3, 2] or [2, 3, 4, 1], making the sum of absolute differences equal to |1-4| + |4-3| + |3-2| = 3 + 1 + 1 = 5 for both arrangements.","solution":"def max_absolute_diff_sum(t, test_cases): results = [] for case in test_cases: n, a = case a.sort() max_sum = 0 for i in range(n - 1): max_sum += abs(a[i] - a[i + 1]) results.append(max_sum * 2) return results"},{"question":"John just started working as a data scientist for a company that relies heavily on databases. As part of his onboarding process, he has been assigned a task dealing with binary search algorithms, as he needs to often search for specific entries within sorted data. He needs to write a function that determines if a given target value exists within a sorted list of integers. He will use binary search to optimize this operation. However, the function must also handle edge cases such as empty lists and ensure it doesn\'t attempt to access invalid indices. The function will take two parameters: - `nums` (a list of integers sorted in non-decreasing order) - `target` (an integer to locate within `nums`) The function should return a boolean indicating whether `target` is present in `nums`. Write a Python function `binary_search(nums: List[int], target: int) -> bool` that implements this behavior. **Function Signature:** ```python def binary_search(nums: List[int], target: int) -> bool: # Your code here ``` **Example:** ```python assert binary_search([1, 2, 3, 4, 5, 6], 4) == True assert binary_search([1, 2, 3, 4, 5, 6], 0) == False assert binary_search([], 5) == False assert binary_search([-10, -3, 0, 1, 9, 20], -3) == True assert binary_search([-10, -3, 0, 1, 9, 20], 2) == False ``` **Constraints:** - The list `nums` can have up to `10^6` elements. - Elements in `nums` are integers and can be negative. - The function should have a logarithmic time complexity O(log n).","solution":"from typing import List def binary_search(nums: List[int], target: int) -> bool: Determines if the target value exists within the sorted list nums using binary search. Args: nums (List[int]): A list of integers sorted in non-decreasing order. target (int): The integer to locate within nums. Returns: bool: True if target is found in nums, False otherwise. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return True elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"A company is hosting an event where they distribute badges to participants. Each badge contains the participant\'s full name and an identification number. To manage badges efficiently, the company needs a system that formats each participant\'s name in a specific manner. The first and last name should be concatenated, and only the initials of any middle names should be included. Write a function `format_name` that takes a string `full_name` representing a participant\'s full name (which includes first name, possibly one or more middle names, and last name, all separated by spaces). The function should return a formatted string where the first and last names are concatenated and the middle names are reduced to their initials. # Example ```python def format_name(full_name: str) -> str: # Your code here # Examples print(format_name(\\"John Doe\\")) # Output should be \\"JohnDoe\\" print(format_name(\\"Jane Mary Ann Smith\\")) # Output should be \\"JaneMASmith\\" print(format_name(\\"Eddie Van Halen\\")) # Output should be \\"EddieVHalen\\" ``` # Constraints - The `full_name` string will contain only letters and spaces. - The `full_name` will always contain at least one first name and one last name, and at most 3 middle names. - The length of `full_name` will be at most 100 characters.","solution":"def format_name(full_name: str) -> str: Formats the full name by concatenating the first and last names and using the initials of any middle names. names = full_name.split() first_name = names[0] last_name = names[-1] middle_initials = \'\'.join([name[0] for name in names[1:-1]]) return first_name + middle_initials + last_name"},{"question":"You are given two strings, `s` and `t`, consisting of lowercase English letters. You need to determine the minimum number of operations required to transform `s` into `t`. In one operation, you can: 1. Insert a character at any position in `s`. 2. Delete a character from any position in `s`. 3. Replace a character at any position in `s` with any other character. This problem can be framed as finding the minimum edit distance between the two strings. Input: - The first line contains a string `s` (1 ≤ |s| ≤ 2000). - The second line contains a string `t` (1 ≤ |t| ≤ 2000). Output: - Print a single integer denoting the minimum number of operations required to transform `s` into `t`. Example: Input: ``` horse ros ``` Output: ``` 3 ``` Explanation: One possible sequence of operations to transform \\"horse\\" into \\"ros\\" is as follows: 1. Replace \'h\' with \'r\'. 2. Remove the second \'o\'. 3. Remove the second \'s\'.","solution":"def min_edit_distance(s, t): Returns the minimum number of operations required to transform string `s` into string `t`. The operations can be insert, delete, or replace a character. m, n = len(s), len(t) # Initialize a dp table where dp[i][j] represents # the minimum edit distance between s[0...i-1] and t[0...j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases: transforming empty string to a prefix of t for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill dp table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # no operation needed else: dp[i][j] = min( dp[i - 1][j], # delete from s dp[i][j - 1], # insert into s dp[i - 1][j - 1] # replace in s ) + 1 return dp[m][n]"},{"question":"You are given a list of integers representing the daily temperatures for a week. Your task is to determine which days (numbered 1 through 7) had a temperature higher than the previous day. Write a program to solve this problem. The input first contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each test case contains a list of seven integers representing the daily temperatures in a week. For each test case, output the list of days (1 through 7) where the temperature was higher than the previous day. If there are no such days, output an empty line. **Example:** **Input:** ``` 2 30 32 31 33 30 35 34 25 20 19 20 25 28 30 ``` **Output:** ``` 2 4 6 4 5 6 7 ``` **Explanation:** For the first test case: - Day 2 (32) had a higher temperature than day 1 (30). - Day 4 (33) had a higher temperature than day 3 (31). - Day 6 (35) had a higher temperature than day 5 (30). For the second test case: - Day 4 (20) had a higher temperature than day 3 (19). - Day 5 (25) had a higher temperature than day 4 (20). - Day 6 (28) had a higher temperature than day 5 (25). - Day 7 (30) had a higher temperature than day 6 (28).","solution":"def higher_temperature_days(t, cases): Determines the days with higher temperatures than the previous day. Params: t (int): Number of test cases. cases (list of list of int): List of temperatures for each test case. Returns: list of list of int: Lists of days with higher temperatures. result = [] for temperatures in cases: days_with_higher_temp = [i + 1 for i in range(1, len(temperatures)) if temperatures[i] > temperatures[i - 1]] result.append(days_with_higher_temp) return result"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight associated with it. You are also given a threshold value T. Your task is to determine if there is a path between two vertices, say vertex 1 and vertex n, such that the sum of the weights of the edges in the path is exactly equal to T. If such a path exists, output \\"YES\\", followed by the sequence of vertices in the path. Otherwise, output \\"NO\\". Input format: - The first line contains three integers n, m, and T (2 leq n leq 1000, 1 leq m leq 5000, 1 leq T leq 10^6). - The next m lines each contain three integers u, v, and w (1 leq u, v leq n and 1 leq w leq 1000), where u and v are the vertices connected by an edge of weight w. Output format: - If there is a path from vertex 1 to vertex n whose total weight is exactly T, print \\"YES\\" in the first line, followed by the sequence of vertices in the path. - If there is no such path, print \\"NO\\". Make sure the path is simple (i.e., it does not visit any vertex more than once). Example input: ``` 5 6 7 1 2 2 2 3 2 3 4 2 4 5 1 1 3 4 3 5 1 ``` Example output: ``` YES 1 3 4 5 ``` Note: - Vertex 1 and vertex n in the examples refer to the start and end of the path, respectively. - There could be multiple valid paths; any path meeting the conditions can be returned. - It is guaranteed that vertices 1 and n are distinct.","solution":"def find_path(n, m, T, edges): from collections import defaultdict, deque # Create a graph as an adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(): queue = deque() # Each element in queue is (vertex, current_sum, path) queue.append((1, 0, [1])) visited = set() while queue: current_vertex, current_sum, path = queue.popleft() if current_vertex == n and current_sum == T: return (\\"YES\\", path) if current_vertex in visited: continue visited.add(current_vertex) for neighbor, weight in graph[current_vertex]: if neighbor not in path and current_sum + weight <= T: new_path = list(path) new_path.append(neighbor) queue.append((neighbor, current_sum + weight, new_path)) return (\\"NO\\",) return bfs()"},{"question":"A museum is arranging an exhibition, and they have n artifacts to display. Each artifact needs to be put in a display case. There are m display cases available and each artifact has a specific size. Additionally, each display case has a maximum size capacity it can accommodate. You need to write a program that assigns each artifact to a display case such that no display case exceeds its size capacity and all artifacts are assigned to a display case. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), the number of artifacts and the number of display cases respectively. The next line contains n integers, where the i-th integer ai (1 ≤ ai ≤ 100) represents the size of the i-th artifact. The next line contains m integers, where the j-th integer cj (1 ≤ cj ≤ 100) represents the size capacity of the j-th display case. Output a single line containing \\"YES\\" if it\'s possible to assign each artifact to a display case without exceeding the size capacities, otherwise print \\"NO\\". # Sample Input 1 ``` 3 2 3 5 7 5 10 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 4 3 2 2 4 5 3 4 3 ``` # Sample Output 2 ``` NO ```","solution":"def can_assign_artifacts(n, m, artifact_sizes, case_capacities): artifact_sizes.sort(reverse=True) case_capacities.sort(reverse=True) for size in artifact_sizes: found_case = False for i, capacity in enumerate(case_capacities): if size <= capacity: case_capacities[i] -= size found_case = True break if not found_case: return \\"NO\\" return \\"YES\\""},{"question":"In a digital marketplace, different users post buy orders and sell orders for a particular product. Each order is characterized by a price and a quantity. A buy order indicates a user\'s willingness to purchase a certain quantity of the product at a specified price or lower, while a sell order indicates a user\'s willingness to sell a certain quantity of the product at a specified price or higher. The marketplace matches buy orders with sell orders to execute trades. A trade can only happen if there is a buy order with a price equal to or higher than a sell order\'s price. A single buy order can be matched with multiple sell orders and vice versa, as long as the price conditions are satisfied and there are quantities available. You are given two lists, `buy_orders` and `sell_orders`, each containing tuples representing the price and quantity of each order. Your task is to determine the total quantity of the product that can be traded given the buy and sell orders. # Input - Two lists of tuples: - `buy_orders`: A list of tuples `(price, quantity)` where `1 ≤ price ≤ 10^9` and `1 ≤ quantity ≤ 10^9`. - `sell_orders`: A list of tuples `(price, quantity)` where `1 ≤ price ≤ 10^9` and `1 ≤ quantity ≤ 10^9`. - The number of buy orders and sell orders can each be up to 100,000. # Output - An integer representing the total quantity of the product that can be traded. # Example ```python buy_orders = [(100, 10), (101, 5), (102, 20)] sell_orders = [(99, 20), (101, 15), (103, 10)] # The output should be 30 ``` # Explanation In this example: - The buy order (102, 20) can be matched with the entire sell order (99, 20) for a trade quantity of 20. - The buy order (101, 5) can be matched with 5 units of the sell order (101, 15) for a trade quantity of 5. - The remaining quantity of the sell order (101, 15) is now 10. - The buy order (100, 10) cannot be matched with any of the remaining sell orders because their prices are too high. Therefore, the total quantity traded is 20 (from the first match) + 5 (from the second match) = 25.","solution":"def calculate_total_traded_quantity(buy_orders, sell_orders): # Sort buy orders in descending order by price buy_orders.sort(key=lambda x: -x[0]) # Sort sell orders in ascending order by price sell_orders.sort(key=lambda x: x[0]) total_traded_quantity = 0 i, j = 0, 0 while i < len(buy_orders) and j < len(sell_orders): buy_price, buy_quantity = buy_orders[i] sell_price, sell_quantity = sell_orders[j] if buy_price >= sell_price: traded_quantity = min(buy_quantity, sell_quantity) total_traded_quantity += traded_quantity buy_orders[i] = (buy_price, buy_quantity - traded_quantity) sell_orders[j] = (sell_price, sell_quantity - traded_quantity) if buy_orders[i][1] == 0: i += 1 if sell_orders[j][1] == 0: j += 1 else: break return total_traded_quantity"},{"question":"Alice is an avid book collector. She categorizes her books into various genres and places each genre in its own bookshelf. She plans to reorganize her bookshelf by adding dividers into each shelf to create sections holding a certain number of books in each section. Alice prefers that each section in the bookshelf should not have too many books to make it easy to browse. Given the limitations of her room, she cannot use more dividers than a specific number. For each genre shelf that Alice owns, she needs to determine the maximum number of books that a section can hold after adding the dividers, while ensuring no section is empty. However, she cannot exceed the total number of dividers she has available for each genre shelf. You are given the number of dividers available for each genre shelf and the number of books in each genre shelf. Your task is to find out the maximum possible number of books that can be in each section after adding the dividers. The input starts with an integer t (1 <= t <= 100) - the number of genre shelves. For each genre shelf, there are two integers n (1 <= n <= 10^9) - the number of books on the shelf, and k (1 <= k <= 10^5) - the number of dividers available. Output t lines, each line containing the maximum number of books in a single section for the corresponding genre shelf. Example: Input: 3 10 2 5 1 7 3 Output: 4 3 2 Explanation: For the first genre shelf, Alice can create sections with a maximum of 4 books by adding 2 dividers, resulting in sections: [4, 3, 3]. For the second genre shelf, Alice can create sections with a maximum of 3 books by adding 1 divider, resulting in sections: [3, 2]. For the third genre shelf, Alice can create sections with a maximum of 2 books by adding 3 dividers, resulting in sections: [2, 2, 2, 1].","solution":"def max_books_per_section(t, data): results = [] for i in range(t): n, k = data[i] if k >= n: results.append(1) else: max_books = (n + k) // (k + 1) results.append(max_books) return results # Example usage: # t = 3 # data = [(10, 2), (5, 1), (7, 3)] # print(max_books_per_section(t, data)) # Output: [4, 3, 2]"},{"question":"A valid parentheses string (VPS) is a string consisting only of characters \'(\' and \')\' such that the following criteria are met: 1. Every opening bracket has a corresponding closing bracket. 2. For every prefix of the string, the number of opening brackets is not less than the number of closing brackets. For example, \\"()\\", \\"(())\\", and \\"()()\\" are VPS, but \\")(\\", \\"(()\\", and \\"())(\\" are not. Given an integer n, generate all possible VPS of length 2n. The input consists of a single integer n (1 ≤ n ≤ 12). Output each valid parentheses string on a new line. In your solution, you should aim to generate the strings in lexicographical order, where \'(\' is considered smaller than \')\'. Example: Input: 3 Output: ((())) (()()) (())() ()(()) ()()()","solution":"def generate_parenthesis(n): Generate all valid parentheses strings of length 2n. result = [] def backtrack(p, left, right): if len(p) == 2 * n: result.append(\\"\\".join(p)) return if left < n: p.append(\'(\') backtrack(p, left + 1, right) p.pop() if right < left: p.append(\')\') backtrack(p, left, right + 1) p.pop() backtrack([], 0, 0) return result"},{"question":"You are given two strings, s1 and s2. Find out if s2 is a rotation of s1 using only one call to a predefined function. The only line of input contains two space-separated strings s1 and s2, each with a length between 1 and 100, inclusive. The strings consist of lowercase English letters only. If s2 is a rotation of s1, output \\"Yes\\". Otherwise, output \\"No\\". For example, given the input \\"hello llohe\\", the output would be \\"Yes\\" (because \\"llohe\\" is a rotation of \\"hello\\"). Note: A rotation means s2 can be obtained by shifting the characters of s1 any number of times. For instance, the rotations of \\"abc\\" would be \\"abc\\", \\"bca\\", and \\"cab\\".","solution":"def is_rotation(s1, s2): Check if s2 is a rotation of s1 by using the fact that if s2 is a rotation of s1, then s2 will always be a substring of s1 concatenated to itself. if len(s1) != len(s2): return \\"No\\" concat_s1 = s1 + s1 if s2 in concat_s1: return \\"Yes\\" else: return \\"No\\""},{"question":"Polycarpus has recently taken up gardening and often ends up with lots of different plants that need to be watered. Each plant needs a different amount of water per week, and Polycarpus only has a limited number of watering cans with fixed capacities. Each watering can can only be used to water one type of plant, and it must supply exactly the amount of water each plant needs. Help Polycarpus determine if he can sufficiently water all his plants using the available watering cans, and if so, figure out which can should be used for which plant. The first input line contains two integers n and m (1 <= n, m <= 1000) — the number of plants and the number of watering cans, respectively. The second line contains n integers a1, a2, ..., an (1 <= ai <= 1000) — the amount of water needed by each plant. The third line contains m integers b1, b2, ..., bm (1 <= bi <= 1000) — the capacities of the watering cans. If it is possible to assign each plant exactly one watering can and fulfill its weekly water requirement, print \\"YES\\" followed by n integers, where the i-th integer represents the index of the watering can assigned to the i-th plant (indices are 1-based). If there are multiple solutions, you may print any of them. If it is not possible, print \\"NO\\". **Examples:** Input: 4 5 3 7 2 4 5 4 3 7 8 Output: YES 3 4 1 2 Input: 3 2 4 5 6 2 5 Output: NO","solution":"def assign_watering_cans(n, m, plants, cans): if n > m: return (\\"NO\\",) plants_sorted_indices = sorted(range(n), key=lambda x: plants[x]) cans_sorted_indices = sorted(range(m), key=lambda x: cans[x]) assignment = [-1] * n plant_index = 0 can_index = 0 while plant_index < n and can_index < m: if cans[cans_sorted_indices[can_index]] >= plants[plants_sorted_indices[plant_index]]: assignment[plants_sorted_indices[plant_index]] = cans_sorted_indices[can_index] + 1 plant_index += 1 can_index += 1 if -1 in assignment: return (\\"NO\\",) return (\\"YES\\",) + tuple(assignment)"},{"question":"You are given an array of n integers, which represents the elevation of terrain. The elevation is given such that the 1st integer is the elevation of the 1st terrain, and the n-th integer is the elevation of the n-th terrain. You need to calculate the amount of water that can be trapped after raining. The water trapped at each terrain point depends on the maximum height to the left and the maximum height to the right of that point. The water level at any point will be the minimum of these two maximum heights minus the elevation at that point. Write a program to compute the total water trapped. Input: - The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), the number of terrains. - The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10^9), where hi represents the elevation of the i-th terrain. Output: - Print a single integer, which is the total amount of water that can be trapped. Example: Input: 6 0 1 0 2 1 0 Output: 1 Note: In the given example, 1 unit of water can be trapped at the 3rd terrain point.","solution":"def trap_water(elevations): Calculates the amount of water trapped given terrain elevations. Parameters: - elevations: List[int] representing the elevation of terrain at each point. Returns: - int: Total amount of water trapped. n = len(elevations) if n == 0: return 0 left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i-1], elevations[i]) right_max[n-1] = elevations[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], elevations[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevations[i] return water_trapped"},{"question":"In a tournament, you have n players each with a unique skill level. The tournament follows a specific format where in each round, players are paired up into matches. If n is odd, one player randomly gets a bye to the next round without playing. In each match, the player with the higher skill level wins and progresses to the next round, while the other is eliminated from the tournament. This process repeats until there is only one player remaining - the winner of the tournament. Your task is to determine and print the skill level of the winner given the skill levels of all players. If there are multiple rounds, output all intermediate match results in a structured format. The input consists of two lines: 1. The first line contains an integer n (1 ≤ n ≤ 100), the number of players. 2. The second line contains n integers in non-decreasing order, representing the skill levels of the players. Output the skill level of the winner and the skill levels of the winners of each round in the tournament. Example: Input: 7 1 3 5 7 9 11 13 Output: Round 1: 3 7 11 13 Round 2: 7 13 Round 3: 13 Winner: 13 Note: - In the first round, players 1 and 3 face off, with 3 winning. Players 5 and 7 face off, with 7 winning. Players 9 and 11 face off, with 11 winning. Player 13 gets a bye to the next round. - In the second round, players 3 and 7 face off, with 7 winning. Players 11 and 13 face off, with 13 winning. - In the third round, players 7 and 13 face off, with 13 winning the tournament.","solution":"def tournament_winner(n, skill_levels): rounds = [] current_round = skill_levels round_number = 1 while len(current_round) > 1: next_round = [] for i in range(0, len(current_round) - 1, 2): next_round.append(max(current_round[i], current_round[i + 1])) # Handle bye if odd number of players if len(current_round) % 2 == 1: next_round.append(current_round[-1]) rounds.append((round_number, next_round)) current_round = next_round round_number += 1 # The last player left is the winner winner = current_round[0] # Printing intermediate results for rnd in rounds: print(f\\"Round {rnd[0]}: {\' \'.join(map(str, rnd[1]))}\\") print(f\\"Winner: {winner}\\") return winner # Example usage: n = 7 skill_levels = [1, 3, 5, 7, 9, 11, 13] print(tournament_winner(n, skill_levels))"},{"question":"You are given a string s of length n consisting only of lowercase English alphabet letters. You are allowed to replace at most k characters in the string with any other lowercase English alphabet letter. Your task is to determine the length of the longest substring that contains the same letter after performing at most k replacements. Print the length of the longest substring with the same letter after at most k replacements on a single line. # Input - The first line contains an integer n (1 le n le 100,000) and an integer k (0 le k le n). - The second line contains a string s of length n. # Output - Print the length of the longest substring with the same letter after at most k replacements. # Example Input ``` 4 2 abaa ``` Output ``` 4 ``` Explanation You can replace the two \'b\'s with \'a\'s to get \\"aaaa\\", which is a substring of length 4.","solution":"def longest_substring_with_replacements(n, k, s): from collections import defaultdict max_length = 0 char_count = defaultdict(int) left = 0 max_count = 0 for right in range(n): char_count[s[right]] += 1 max_count = max(max_count, char_count[s[right]]) while right - left + 1 - max_count > k: char_count[s[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of integers. Your task is to find the minimum number of operations required to make the entire array a palindrome. In one operation, you can increment or decrement any element of the array by one. A palindrome is a sequence that reads the same backward as forward. # Input Format: - The first line contains a single integer n (1 <= n <= 10^5), the length of the array. - The second line contains n integers a1, a2, ..., an (-10^4 <= ai <= 10^4), the elements of the array. # Output Format: - Print a single integer, the minimum number of operations required to make the array a palindrome. # Example Input: ``` 4 1 2 3 4 ``` Output: ``` 4 ``` Explanation: To make the array [1, 2, 3, 4] a palindrome, we can perform the following operations: - Increment the first element from 1 to 4 and increment the second element from 2 to 3. The array becomes [4, 3, 3, 4]. - The total number of operations is 4.","solution":"def min_operations_to_make_palindrome(arr): Returns the minimum number of operations required to make the array a palindrome. n = len(arr) i, j = 0, n - 1 operations = 0 while i < j: if arr[i] != arr[j]: operations += abs(arr[i] - arr[j]) i += 1 j -= 1 return operations"},{"question":"You are given an integer array containing n integers. You need to process q queries to determine the total number of unique integers present in the array within a given range of indices. Each query is given by two integers l and r, where l and r are the starting and ending indices (1-based) of the subarray. Your task is to answer each query with the number of unique integers present in the subarray from the l-th to the r-th position (inclusive). The first line of the input contains two integers n (1 le n le 10^5) and q (1 le q le 10^5) — the number of elements in the array and the number of queries. The second line contains n integers separated by spaces (1 le text{array}[i] le 10^9) – the elements of the array. The next q lines contain two integers l and r (1 le l le r le n) — the starting and ending indices for each query. Output q lines, each containing the answer to the corresponding query. Example: Input: ``` 5 3 1 2 1 3 4 1 5 2 4 3 3 ``` Output: ``` 4 3 1 ``` Constraints: - The sum of elements in all queries does not exceed 2 cdot 10^6.","solution":"def num_unique_in_subarray(arr, queries): Returns the number of unique integers in the subarray for each query. Parameters: - arr: list of integers representing the array - queries: list of tuples where each tuple contains (l, r) indexes Returns: - list of integers representing the result for each query results = [] for l, r in queries: unique_elements = set(arr[l-1:r]) results.append(len(unique_elements)) return results"},{"question":"You are given two strings, s1 and s2. An operation is defined as deleting exactly one character from s1 or s2. Your task is to determine the minimum number of operations required to make the two strings equal. # Input The input consists of two lines. - The first line contains the string s1 (1 ≤ |s1| ≤ 1000). - The second line contains the string s2 (1 ≤ |s2| ≤ 1000). # Output Print a single integer, the minimum number of operations required to make s1 and s2 equal. # Example Input ``` sea eat ``` Output ``` 2 ``` Explanation In the given example, we can delete \'s\' from the first string and \'t\' from the second string to make them both equal to \\"ea\\". Hence, the minimum number of operations required is 2.","solution":"def min_operations_to_equal_strings(s1, s2): Returns the minimum number of operations required to make the two strings equal. An operation is defined as deleting exactly one character from s1 or s2. m, n = len(s1), len(s2) # Creating a 2D dp array dp = [[0] * (n + 1) for _ in range(m + 1)] # Filling out the dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are a developer working on an autocomplete feature for a search box. The autocomplete algorithm suggests possible completions for a partial query typed by the user. Given a dictionary of keywords and a partial query, your task is to provide the autocomplete suggestions in lexicographical order. The first line contains an integer n, the number of keywords in the dictionary. The next n lines each contain a single keyword. The last line contains a partial query (a prefix of some keywords). Output all keywords that start with the given prefix, sorted in lexicographical order. If no keywords match the given prefix, output \\"No suggestions\\". # Input Format - The first line contains an integer n (1 ≤ n ≤ 10^5). - The next n lines each contain a string keyword (1 ≤ keyword length ≤ 100). - The last line contains a string partial query (1 ≤ query length ≤ 100). # Output Format - Print each matching keyword on a new line in lexicographical order, or \\"No suggestions\\" if there are no matching keywords. # Sample Input ``` 5 apple appetite banana band bandana app ``` # Sample Output ``` appetite apple ```","solution":"def autocomplete(n, keywords, query): Returns a list of keywords that start with the given prefix, sorted lexicographically. If no keywords match the given prefix, returns [\\"No suggestions\\"]. matching_keywords = [keyword for keyword in keywords if keyword.startswith(query)] if not matching_keywords: return [\\"No suggestions\\"] return sorted(matching_keywords) # Example usage: # n = 5 # keywords = [\\"apple\\", \\"appetite\\", \\"banana\\", \\"band\\", \\"bandana\\"] # query = \\"app\\" # print(autocomplete(n, keywords, query))"},{"question":"You are given an infinite sequence of integers starting from 1, where each number is repeated a number of times equal to its value. For example, the sequence starts as: 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, ... Given an integer n (1 ≤ n ≤ 10^9), determine the value at the position n in this sequence. Input: A single integer n. Output: A single integer representing the value at position n in the sequence. Examples Input: 5 Output: 3 Input: 7 Output: 4 Input: 10 Output: 4","solution":"def find_value_at_position(n): Given a position n, find the value at that position in the infinite sequence described. Each number i is repeated i times in the sequence. total = 0 current_number = 0 while total < n: current_number += 1 total += current_number return current_number"},{"question":"# Spiral Matrix Given an m x n matrix, return all elements of the matrix in spiral order. The matrix is defined as: ``` matrix = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] ``` The spiral order of this matrix is `[1, 2, 3, 6, 9, 8, 7, 4, 5]`. Write a function `spiralOrder(matrix: List[List[int]]) -> List[int]` to return all elements of the given matrix in spiral order. # Input - matrix: A 2D list of integers with dimensions `m x n` where `1 <= m, n <= 10^3`. # Output - A list of integers representing the spiral order traversal of the matrix. # Constraints - The matrix will have at least one element and at most 10^6 elements in total. - Elements of the matrix are integers, and their values can be anything in the range of -10^3 to 10^3. # Additional Information - Ensure the solution handles edge cases such as single row, single column, and empty matrix efficiently. - You need to print the end result in one line. # Example **Input:** ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` **Output:** ``` [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` **Input:** ``` [ [1, 2], [3, 4] ] ``` **Output:** ``` [1, 2, 4, 3] ``` **Input:** ``` [ [1] ] ``` **Output:** ``` [1] ```","solution":"from typing import List def spiralOrder(matrix: List[List[int]]) -> List[int]: Returns all the elements of the given matrix in spiral order. if not matrix: return [] spiral_order = [] m, n = len(matrix), len(matrix[0]) left, right, top, bottom = 0, n - 1, 0, m - 1 while left <= right and top <= bottom: # Traverse from left to right for j in range(left, right + 1): spiral_order.append(matrix[top][j]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): spiral_order.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for j in range(right, left - 1, -1): spiral_order.append(matrix[bottom][j]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): spiral_order.append(matrix[i][left]) left += 1 return spiral_order"},{"question":"A string is considered \\"good\\" if no two consecutive characters are the same. You are given a string s consisting of lowercase English letters. Your task is to find the minimum number of characters you need to delete from s to make it a \\"good\\" string. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string s. The second line contains the string s of length n, consisting of lowercase English letters. In the first and only line of the output, print a single integer — the minimum number of characters you need to delete from s to make it a \\"good\\" string. # Example Input: ``` 8 aabbccdd ``` Output: ``` 4 ``` Input: ``` 5 aaaaa ``` Output: ``` 4 ```","solution":"def min_deletions_to_make_good_string(s): Returns the minimum number of characters to delete from s to make it a \\"good\\" string. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions"},{"question":"Isaac has recently started working with binary trees and he is fascinated by the various properties and algorithms that can be applied to them. One of the tasks that intrigued him was finding the diameter of a binary tree. The diameter of a binary tree is defined as the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. Isaac wants to write a program that computes the diameter of a given binary tree. He asked for your help to complete this task. The input to your program will be given as follows: - The first line contains the integer n (1 ≤ n ≤ 10^4), the number of nodes in the binary tree. - The next n lines each contain three space-separated integers u, v, and c (0 ≤ u, v < n, 0 ≤ c ≤ 1), which describe the edges of the binary tree. Here, u is the parent node, v is the child node, and c indicates whether v is a left child (c=0) or a right child (c=1) of u. The root of the tree is always the node numbered 0. Write a function to compute the diameter of the binary tree. Input: The input is given in the form of: ``` n u1 v1 c1 u2 v2 c2 ... un-1 vn-1 cn-1 ``` Output: - Print a single integer representing the diameter of the binary tree. Example: Input: ``` 5 0 1 0 0 2 1 1 3 0 1 4 1 ``` Output: ``` 3 ``` Here, the longest path goes through nodes 3 -> 1 -> 0 -> 2, which is of length 3.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class BinaryTree: def __init__(self, n, edges): self.nodes = [TreeNode(i) for i in range(n)] for (u, v, c) in edges: if c == 0: self.nodes[u].left = self.nodes[v] else: self.nodes[u].right = self.nodes[v] def diameter_of_binary_tree(self): return self._diameter_of_binary_tree(self.nodes[0])[1] def _diameter_of_binary_tree(self, node): if not node: return (0, 0) left_depth, left_diameter = self._diameter_of_binary_tree(node.left) right_depth, right_diameter = self._diameter_of_binary_tree(node.right) current_diameter = left_depth + right_depth return (max(left_depth, right_depth) + 1, max(current_diameter, left_diameter, right_diameter)) def compute_diameter(n, edges): tree = BinaryTree(n, edges) return tree.diameter_of_binary_tree()"},{"question":"You are given an array of integers where each integer represents the height of a building. You are tasked with selecting a subset of buildings such that: 1. The selected subset of buildings forms a contiguous block when taken in the same order as they appear in the array. 2. The height difference between the tallest and the shortest buildings in this block does not exceed a given integer d. Your goal is to find the length of the longest possible contiguous block of buildings that satisfies the above condition. # Input The first line contains an integer t (1 le t le 10^4) — the number of test cases. For each test case, the first line contains two integers n (1 le n le 2 cdot 10^5) — the number of buildings, and d (1 le d le 10^9) — the maximum allowed height difference. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9), where h_i is the height of the i-th building. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). # Output For each test case, print a single integer — the length of the longest possible contiguous block of buildings that satisfies the above condition. # Example Input ``` 2 8 3 2 5 4 7 6 3 1 2 5 2 1 3 2 5 4 ``` Output ``` 4 3 ``` # Explanation In the first test case, the longest block that satisfies the height difference condition spans from the second building to the fifth building, inclusive (heights: 5, 4, 7, 6), where the difference between the tallest and shortest is 7 - 4 = 3. In the second test case, the longest block that satisfies the height difference condition spans from the first building to the third building, inclusive (heights: 1, 3, 2), where the difference between the tallest and shortest is 3 - 1 = 2. The solution should efficiently handle the constraints, noting the maximum sum of n across all test cases.","solution":"def longest_block(t, test_cases): This function finds the length of the longest possible contiguous block of buildings where the height difference between the tallest and the shortest buildings in this block does not exceed a given integer d. t: number of test cases test_cases: list of tuples, where each tuple contains: - n: number of buildings - d: maximum allowed height difference - h: list of heights of the buildings Returns a list of integers representing the lengths of the longest possible contiguous block for each test case. results = [] for case in test_cases: n, d, heights = case left = 0 max_len = 0 min_height = heights[0] max_height = heights[0] for right in range(n): min_height = min(min_height, heights[right]) max_height = max(max_height, heights[right]) while max_height - min_height > d: left += 1 min_height = min(heights[left:right+1]) max_height = max(heights[left:right+1]) max_len = max(max_len, right - left + 1) results.append(max_len) return results"},{"question":"Alice\'s Card Game Alice is playing a card game with her friends using a special deck of cards. Each card has a unique positive integer written on it, and there are no duplicate cards in the deck. The value on the card is strictly greater than zero. Alice has a special game rule: she picks a subset of cards such that the sum of the values on the chosen cards is an even number. She can pick any number of cards from the deck, including picking none at all. Given a deck of cards, Alice needs your help to determine whether it is possible to pick a subset of cards such that the sum of the values on the chosen cards is even. Note that she doesn\'t need to actually pick the subset, just determine if such a subset exists. # Input - The first line contains an integer n (1 leq n leq 10^5) — the number of cards in the deck. - The second line contains n space-separated positive integers a_i (1 leq a_i leq 10^9) — the values on the cards. # Output - Print \\"YES\\" (without quotes) if it is possible to choose a subset of cards such that the sum of its values is an even number, or \\"NO\\" (without quotes) otherwise. # Examples Example 1 **Input:** ``` 4 1 3 5 7 ``` **Output:** ``` NO ``` Example 2 **Input:** ``` 5 2 4 6 8 10 ``` **Output:** ``` YES ``` Example 3 **Input:** ``` 3 1 2 4 ``` **Output:** ``` YES ``` # Note In the first example, any subset of the given numbers will always have an odd sum. In the second example, any subset that includes an even number of cards with even values will have an even sum. In the third example, Alice can pick the subset {2, 4} which has an even sum of 6.","solution":"def is_even_subset_possible(n, cards): Determines if it\'s possible to pick a subset of cards such that the sum of its values is even. :param n: Number of cards in the deck. :param cards: List of integers representing the values on the cards. :return: \\"YES\\" if such a subset exists, \\"NO\\" otherwise. # If there is at least one even number, we can form an even sum # by either picking that even number alone or in combination with other even numbers for card in cards: if card % 2 == 0: return \\"YES\\" # If there are no even numbers, the only subsets we can form will all have an odd sum return \\"NO\\""},{"question":"You are given an undirected graph with `n` nodes numbered from `1` to `n` and `m` edges. Each edge connects two different nodes and has a positive integer weight. Your task is to find the minimum possible weight of a spanning tree in this graph. If it is impossible to construct a spanning tree, output `-1`. # Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000), the number of nodes and edges, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10⁶) representing an edge between nodes `u` and `v` with weight `w`. # Output Output a single integer, the minimum possible weight of a spanning tree, or `-1` if it is impossible to construct a spanning tree. # Example Input ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 ``` Output ``` 6 ``` Input ``` 3 1 1 2 3 ``` Output ``` -1 ```","solution":"def find_minimum_spanning_tree(n, m, edges): Function to find the minimum spanning tree weight using Kruskal\'s algorithm. :param n: Number of nodes in the graph. :param m: Number of edges in the graph. :param edges: List of tuples representing the edges, where each tuple contains (u, v, w). :return: Minimum possible weight of a spanning tree or -1 if it is impossible. class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 edges.sort(key=lambda x: x[2]) uf = UnionFind(n + 1) # nodes are 1-indexed so we use n+1 mst_weight = 0 edges_used = 0 for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_weight += w edges_used += 1 if edges_used == n - 1: break if edges_used != n - 1: return -1 return mst_weight # Example usage: # print(find_minimum_spanning_tree(4, 5, [(1, 2, 1), (1, 3, 4), (2, 3, 2), (3, 4, 3), (2, 4, 5)])) # Output: 6 # print(find_minimum_spanning_tree(3, 1, [(1, 2, 3)])) # Output: -1"},{"question":"You are given an integer sequence a_1, a_2, dots, a_n and an integer k. You need to check if there exists a pair of indices i, j (1 le i < j le n) such that the sum of a_i and a_j is divisible by k. For example, if the sequence is [1, 2, 3, 4, 5] and k = 3, there are pairs such as (1, 2) and (4, 5) where the sum is divisible by 3. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains two integers n (1 le n le 100000) and k (1 le k le 100). The second line contains the sequence of integers a_1, a_2, dots, a_n (1 le a_i le 10^9). For the example given above: Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` YES ``` Explanation: The pairs (1, 2), (2, 4), (3, 3), and (4, 5) sum to 3, 6, 6, and 9, respectively, all of which are divisible by 3.","solution":"def check_divisible_pair(n, k, sequence): remainder_counts = {} for number in sequence: remainder = number % k complement = (k - remainder) % k if complement in remainder_counts and remainder_counts[complement] > 0: return \\"YES\\" if remainder not in remainder_counts: remainder_counts[remainder] = 0 remainder_counts[remainder] += 1 return \\"NO\\""},{"question":"You are given a sequence of n integers. You need to determine if you can rearrange the sequence in such a way that every pair of adjacent elements has a different parity (one element is even, the other is odd). The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the sequence. Output \\"YES\\" if it is possible to rearrange the sequence so that every pair of adjacent elements has a different parity, and \\"NO\\" otherwise.","solution":"def can_rearrange_different_parity(n, sequence): Determines if it is possible to rearrange the sequence such that every pair of adjacent elements has different parity. odd_count = sum(1 for x in sequence if x % 2 != 0) even_count = n - odd_count if abs(odd_count - even_count) <= 1: return \\"YES\\" return \\"NO\\""},{"question":"A large supermarket is organizing an event to celebrate its anniversary. They have n unique products and are planning to set up several displays. To attract more customers, each display will feature some of the products in such a way that certain groups of products are always displayed together. The marketing department has determined that each product i is part of a group that prefers to be displayed together from ai to bi, inclusive. Unfortunately, due to limited space, not all products can be displayed at once. Therefore, for any chosen range of products [s, e], each occurrence of a product i (with ai ≤ i ≤ bi) outside the range referred to as \\"unpaired\\" products must be minimized because it will influence the overall customer satisfaction score. Your task is to determine the maximum number of products that can be displayed together in a continuous range [s, e] such that the number of unpaired products is minimized across the entire event. The first input line contains one integer n (1 ≤ n ≤ 2000). Each of the following n lines contains two integers ai and bi (1 ≤ ai, bi ≤ n; ai ≤ bi). In a single output line, print a single integer representing the maximum number of products that can be displayed together in any continuous range [s, e] with the minimum influence from unpaired products. Example: Input: 4 1 2 2 3 3 4 4 4 Output: 2","solution":"def max_products_displayed(n, products): Returns the maximum number of products that can be displayed together in a continuous range while minimizing unpaired product occurrences. Args: n: int - number of products. products: List of tuples (ai, bi) for each product where 1 ≤ ai ≤ bi ≤ n. Returns: int - maximum number of products in a continuous range. # Initialize a display count array count = [0] * (n + 2) for a, b in products: count[a] += 1 if b + 1 <= n: count[b + 1] -= 1 # Compute prefix sums to get the number of products displayed in each position for i in range(1, n + 1): count[i] += count[i-1] # Maximum number of products in a continuous range max_display = max(count[1:n+1]) return max_display"},{"question":"In a coding competition, participants face multiple challenges and solve them to earn points. Each challenge has a predefined difficulty level represented by an integer. Participants prefer to solve challenges where the difficulty level is within their comfort zone. Each participant’s comfort zone is an interval [li, ri] where they can solve challenges with difficulty within this range, inclusive. Given a set of challenges and a list of participants, the goal is to determine how many challenges each participant can solve. You are given an array of integers where each integer represents the difficulty level of a challenge. You are also given a list of participants with their comfort zones. For each participant, determine the maximum number of challenges they can solve. Input: - The first line contains an integer m (1 ≤ m ≤ 105) — the number of challenges. - The second line contains m integers d1, d2, ..., dm (1 ≤ di ≤ 109) — the difficulty levels of the challenges. - The third line contains an integer p (1 ≤ p ≤ 105) — the number of participants. - Then follows p lines, each containing two integers li and ri (1 ≤ li ≤ ri ≤ 109) — the comfort zone of the i-th participant. Output: - For each participant, output a single line containing the maximum number of challenges they can solve. Example: Input: 6 2 3 5 6 8 10 3 1 5 4 9 7 10 Output: 3 3 2","solution":"def challenges_per_participant(m, challenges, p, participants): result = [] for (li, ri) in participants: count = sum(li <= d <= ri for d in challenges) result.append(count) return result def parse_input(input_str): lines = input_str.strip().split(\'n\') m = int(lines[0]) challenges = list(map(int, lines[1].split())) p = int(lines[2]) participants = [tuple(map(int, line.split())) for line in lines[3:3+p]] return m, challenges, p, participants def solve_from_input(input_str): m, challenges, p, participants = parse_input(input_str) return challenges_per_participant(m, challenges, p, participants)"},{"question":"You are given a sequence of integers, and your task is to find a contiguous subsequence with the maximum possible sum. This problem is known as the \\"Maximum Subarray Problem\\" or \\"Kadane\'s Algorithm.\\" Specifically, you need to write a function that takes a single argument: a list of integers. The function should return two values: 1. The maximum sum of any contiguous subsequence within the list. 2. The start and end indices of that subsequence (both inclusive). # Input - A list of integers `nums`, where `1 ≤ len(nums) ≤ 100,000` and `-10,000 ≤ nums[i] ≤ 10,000`. # Output - An integer representing the maximum sum of any contiguous subsequence in the list. - Two integers representing the start and end indices of this subsequence (0-based index). # Example Input ``` nums = [-2,1,-3,4,-1,2,1,-5,4] ``` Output ``` 6, 3, 6 ``` Explanation The contiguous subsequence with the maximum sum is `[4, -1, 2, 1]`, which starts at index 3 and ends at index 6. The sum of this subsequence is `4 + (-1) + 2 + 1 = 6`. # Constraints - The solution must run in `O(n)` time. - If there are multiple subsequences with the same maximum sum, return the indices of the first one. Implement the function as follows: ```python def max_subarray(nums): # Your code here ```","solution":"def max_subarray(nums): Finds the maximum sum of any contiguous subsequence in nums and returns the sum along with the start and end indices. max_sum = float(\'-inf\') current_sum = 0 start = end = s = 0 for i, num in enumerate(nums): if current_sum <= 0: current_sum = num s = i else: current_sum += num if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, start, end"},{"question":"Task: As part of a project, you need to analyze text data to manage a virtual library system. One of the tasks involves checking the availability status of books based on their requested frequencies. The library system maintains a list of books, and every time a user requests a book, its frequency count increases. You are given a log of such requests. Given the list of book requests, your task is to determine the k most requested books. If there are multiple books with the same request frequency, they should be sorted alphabetically. You need to write a function that returns a list of the k most requested books. Input: - A list of strings, `book_requests`, where each string represents a book request. The number of elements in the list will not exceed 100,000. - An integer, `k`, representing the number of top requested books to return. Output: - A list of strings containing the titles of the k most requested books, sorted in descending order of their request frequencies. If multiple books have the same frequency, they should appear in alphabetical order. Example: ```python def top_k_requested_books(book_requests, k): # Your implementation here # Example usage: book_requests = [\\"Harry Potter\\", \\"Lord of the Rings\\", \\"Harry Potter\\", \\"Hobbit\\", \\"Hobbit\\", \\"Hobbit\\", \\"Game of Thrones\\", \\"Lord of the Rings\\"] k = 2 print(top_k_requested_books(book_requests, k)) # Output: [\\"Hobbit\\", \\"Harry Potter\\"] ``` Explanation: - \\"Hobbit\\" has the highest request frequency with 3 requests. - \\"Harry Potter\\" and \\"Lord of the Rings\\" both have 2 requests, but \\"Harry Potter\\" comes first alphabetically. Implement the function `top_k_requested_books` to solve this task. Constraints: - The length of each book title in `book_requests` will be between 1 and 100 characters. - The value of `k` will be between 1 and the number of unique book titles in `book_requests`. Hints: - Use a dictionary to count the frequency of each book. - Use a heap or another efficient sorting method to find the top k requested books.","solution":"from collections import Counter def top_k_requested_books(book_requests, k): # Count the frequency of each book request freq_counter = Counter(book_requests) # Sort the books first by frequency (descending) and then alphabetically sorted_books = sorted(freq_counter.items(), key=lambda x: (-x[1], x[0])) # Extract the top k book titles top_k_books = [book for book, _ in sorted_books[:k]] return top_k_books # Example usage: # book_requests = [\\"Harry Potter\\", \\"Lord of the Rings\\", \\"Harry Potter\\", \\"Hobbit\\", \\"Hobbit\\", \\"Hobbit\\", \\"Game of Thrones\\", \\"Lord of the Rings\\"] # k = 2 # print(top_k_requested_books(book_requests, k)) # Output: [\\"Hobbit\\", \\"Harry Potter\\"]"},{"question":"You have been given a set of positive integers in an array. Your task is to find the number of pairs of elements in the array such that the sum of those pairs is an odd number. Two pairs are considered different if the indices are different. The pair of elements with indices ( (i, j) ) is considered the same as the pair ( (j, i) ). The first line of the input contains a positive integer ( N ) ((1 leq N leq 100,000)), representing the length of the input array. Each of the next ( N ) lines contains a single integer (between ( 1 ) and ( 1,000,000 )) — an element of the input array. Output one number, representing how many pairs with an odd sum exist in the array. # Example: Input: ``` 4 1 2 3 4 ``` Output: ``` 4 ``` # Explanation: The pairs with an odd sum are: (1, 2), (1, 4), (2, 3), and (3, 4). Thus, there are 4 such pairs.","solution":"def count_odd_sum_pairs(arr): Returns the number of pairs with an odd sum in the given array. count_odd = sum(1 for x in arr if x % 2 != 0) count_even = len(arr) - count_odd # An odd sum pair is formed by 1 odd + 1 even number return count_odd * count_even"},{"question":"You are given a binary tree with `n` nodes, each having an integer value, where `0 <= n <= 100,000`. Write a function to find the maximum path sum. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path does not need to go through the root. The function should have the following signature: `def max_path_sum(root: TreeNode) -> int` # Input - The input parameter is the root of the binary tree. - Each `TreeNode` has three attributes: `val` (integer), `left` (TreeNode), and `right` (TreeNode). # Output - The function should return an integer, representing the maximum path sum. # Example Consider the following tree: ``` 1 / 2 3 ``` Here, the maximum path sum is `6`, obtained from the path `2 -> 1 -> 3`. # Example Consider the following tree: ``` -10 / 9 20 / 15 7 ``` Here, the maximum path sum is `42`, obtained from the path `15 -> 20 -> 7`. # Constraints - The function should handle trees with up to `100,000` nodes efficiently. - Each node contains an integer value between `-10,000` and `10,000`. # Note - If the binary tree is empty, i.e., `n == 0`, the maximum path sum is considered to be `0`. - The path does not need to start or end at the root or a leaf, but it must go downward (travelling only from parent nodes to child nodes). Write a function to solve the problem.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root: TreeNode) -> int: Function to find the maximum path sum in a binary tree. def helper(node): nonlocal max_sum if not node: return 0 # Calculate the maximum path sum \\"starting\\" from the left and right childs left_max = max(helper(node.left), 0) # If left_max is negative, we discard it by taking 0 right_max = max(helper(node.right), 0) # Same logic as above # Update the maximum path sum found so far max_sum = max(max_sum, node.val + left_max + right_max) # Return the maximum path sum \\"starting\\" from this node return node.val + max(left_max, right_max) max_sum = float(\'-inf\') helper(root) return 0 if max_sum == float(\'-inf\') else max_sum"},{"question":"A palindrome is a string that reads the same forwards and backwards. A k-palindrome is a string that becomes a palindrome by removing at most k characters. For example, \\"abacdcab\\" is a 1-palindrome because we can remove \'d\' to make it a palindrome. Your task is to determine whether a given string s is a k-palindrome. Write a function `is_k_palindrome(s: str, k: int) -> bool` that takes a string `s` and an integer `k` as input and returns `True` if `s` can be transformed into a palindrome by removing at most `k` characters, otherwise return `False`. # Input - `s`: a non-empty string consisting of lowercase English letters (1 ≤ |s| ≤ 10^3). - `k`: an integer (0 ≤ k ≤ |s|). # Output - Return a boolean value indicating whether the string can be transformed into a palindrome by removing at most `k` characters. # Example ``` is_k_palindrome(\\"abacdcab\\", 1) -> True is_k_palindrome(\\"abacdfgdcaba\\", 3) -> True is_k_palindrome(\\"abcdef\\", 2) -> False ```","solution":"def is_k_palindrome(s: str, k: int) -> bool: def longest_palindromic_subseq(s: str) -> int: n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] longest_palindrome_length = longest_palindromic_subseq(s) return len(s) - longest_palindrome_length <= k"},{"question":"Input consists of a single string where the first character is a letter from the set {E, F, G} followed by exactly 8 characters that are uppercase alphabetical letters (A-Z). Output a single integer which is the sum of the ASCII values of all characters in the string, divided by the ASCII value of the first character, and the result is floor-rounded.","solution":"def calculate_string_value(s): Calculates the sum of ASCII values of all characters in the string s, divides it by the ASCII value of the first character, and returns the floor-rounded result. if not (len(s) == 9 and s[0] in {\'E\', \'F\', \'G\'} and s[1:].isalpha() and s[1:].isupper()): raise ValueError(\\"Invalid input string format.\\") ascii_sum = sum(ord(char) for char in s) first_char_value = ord(s[0]) return ascii_sum // first_char_value"},{"question":"Aria, a botanist, is exploring the dense forests of Amazon in search of rare plants. The forest can be envisioned as a grid with rows and columns where each cell represents a certain type of vegetation. Aria starts her journey at the top-left corner of the forest (cell (1,1)) and wants to navigate to the bottom-right corner (cell (n,m)). However, certain cells have toxic plants that Aria wants to avoid at all costs. Each cell in the forest grid can either be a safe cell (denoted by \'.\') or a toxic cell (denoted by \'#\'). Aria can only move to adjacent cells that share an edge (up, down, left, or right) and are safe. Given the forest grid, determine the minimum number of moves Aria needs to reach the bottom-right corner of the grid from the top-left corner. If it\'s not possible for her to reach the destination, return -1. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Then follow n lines, each containing m characters (either \'.\' or \'#\') representing the forest grid. Output a single integer, the minimum number of moves required for Aria to reach the bottom-right corner, or -1 if it\'s not possible. Example: Input: 4 4 .... .#.. ..#. .... Output: 6","solution":"from collections import deque def min_moves_to_reach_destination(n, m, forest): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 0)]) # (row, col, distance) if forest[0][0] == \'#\' or forest[n-1][m-1] == \'#\': return -1 visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and forest[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"You need to implement a function to simulate a cache with the Least Recently Used (LRU) replacement policy. The cache should have a fixed capacity and store key-value pairs. When the cache exceeds the capacity, it should evict the least recently used item before adding a new one. Accessing or modifying an existing item should update its position to reflect recent usage. Your task is to implement an LRUCache class with the following methods: - `__init__(capacity: int)`: Initializes the cache with a given capacity. - `put(key: int, value: int) -> None`: Inserts or updates the value of the key. If the cache exceeds capacity, evict the least recently used item. - `get(key: int) -> int`: Returns the value of the key if it exists in the cache; otherwise, returns -1. # Requirements - The cache should maintain the order of usage, with the most recently used item at the head. - Both `put` and `get` operations should run in O(1) time complexity. # Example ```python cache = LRUCache(2) cache.put(1, 1) cache.put(2, 2) print(cache.get(1)) # returns 1 cache.put(3, 3) # evicts key 2 print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # evicts key 1 print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` # Constraints - 1 ≤ capacity ≤ 1000 - 1 ≤ key, value ≤ 10^4 - At most 10^5 calls will be made to `put` and `get`. # Implementation Details Implement your solution considering the following hints: - Utilize a hash map to store key-value pairs for O(1) access. - Use a doubly linked list to track the order of usage for O(1) updates and evictions.","solution":"class Node: def __init__(self, key=None, value=None): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.head = Node() self.tail = Node() self.head.next = self.tail self.tail.prev = self.head def _remove(self, node): Remove an existing node from the linked list. prev = node.prev nxt = node.next prev.next = nxt nxt.prev = prev def _add(self, node): Add a new node right after head. node.next = self.head.next node.prev = self.head self.head.next.prev = node self.head.next = node def get(self, key: int) -> int: if key in self.cache: node = self.cache[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self._remove(self.cache[key]) elif len(self.cache) >= self.capacity: lru_node = self.tail.prev self._remove(lru_node) del self.cache[lru_node.key] new_node = Node(key, value) self._add(new_node) self.cache[key] = new_node"},{"question":"A company has a system where they generate unique access codes for their employees. An access code is a string consisting of lowercase English letters, and it must not contain any of the company\'s forbidden substrings. The company maintains a list of such forbidden substrings. The system needs to quickly validate new access codes. Given a new access code and the list of forbidden substrings, your task is to determine if the access code is valid (i.e., it does not contain any forbidden substrings). Write a function `is_valid_access_code(access_code: str, forbidden_substrings: List[str]) -> bool` that takes in a string `access_code` and a list of strings `forbidden_substrings`, and returns `True` if the access code is valid, and `False` otherwise. # Input - `access_code`: A string (1 ≤ len(access_code) ≤ 1000) that represents the new access code. - `forbidden_substrings`: A list of strings (1 ≤ len(forbidden_substrings) ≤ 1000), where each string (1 ≤ len(string) ≤ 100) is a forbidden substring. # Output - Return `True` if the access code is valid, and `False` otherwise. # Examples Example 1 ```python access_code = \\"employee\\" forbidden_substrings = [\\"emp\\", \\"code\\"] print(is_valid_access_code(access_code, forbidden_substrings)) # Output: False ``` Example 2 ```python access_code = \\"worker42\\" forbidden_substrings = [\\"work\\", \\"er42\\"] print(is_valid_access_code(access_code, forbidden_substrings)) # Output: False ``` Example 3 ```python access_code = \\"secureaccess\\" forbidden_substrings = [\\"hack\\", \\"virus\\"] print(is_valid_access_code(access_code, forbidden_substrings)) # Output: True ``` # Note In Example 1, the access code contains the forbidden substring \\"emp\\", so the function returns `False`. In Example 2, the access code contains the forbidden substring \\"work\\", so the function returns `False`. In Example 3, the access code does not contain any of the forbidden substrings, so the function returns `True`.","solution":"from typing import List def is_valid_access_code(access_code: str, forbidden_substrings: List[str]) -> bool: Determine if the access code is valid. :param access_code: A string representing the new access code. :param forbidden_substrings: A list of strings representing forbidden substrings. :return: True if the access code is valid, False otherwise. for substring in forbidden_substrings: if substring in access_code: return False return True"},{"question":"Alice is organizing a coding competition for her friends. She has designed a scoring system where each participant\'s score consists of multiple individual scores for different problems they solved. Each problem contributes a non-negative integer score. Alice needs your help to process a series of queries regarding the participants\' scores. There are two types of queries: 1. `add name score` - Adds the given score to the participant\'s total score. If the participant does not exist, they are added to the system with the given score. 2. `get_rank name` - Returns the rank of the participant in the competition leaderboard. The rank is determined based on the total score of the participants, with the highest score having the rank 1. If two participants have the same score, they share the same rank. If the participant does not exist, return -1. The first input line contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of queries. Each of the next `n` lines contains one of the two queries described above. Names are strings of lowercase English letters with length at most 100. Scores are non-negative integers that do not exceed 1,000,000. Your task is to write a program that processes these queries efficiently and outputs the result for each `get_rank` query. Example: ``` Input: 8 add alice 10 add bob 15 get_rank alice add alice 5 get_rank alice get_rank bob get_rank charlie Output: 2 1 1 -1 ```","solution":"from collections import defaultdict def coding_competition(queries): scores = defaultdict(int) results = [] for query in queries: parts = query.split() if parts[0] == \'add\': name = parts[1] score = int(parts[2]) scores[name] += score elif parts[0] == \'get_rank\': name = parts[1] if name not in scores: results.append(-1) else: total_scores = sorted(scores.values(), reverse=True) rank = total_scores.index(scores[name]) + 1 results.append(rank) return results"},{"question":"Given a grid representing a field of flowers, each cell contains an integer representing the number of flowers in that cell. You are tasked with finding the maximum number of flowers that can be collected by starting at the top-left cell and moving only to the right or downward to the bottom-right cell. The grid will always contain positive integers, and its dimensions will not exceed 100x100. The input consists of: - An integer n, the number of rows in the grid. - An integer m, the number of columns in the grid. - An n x m matrix, where each element represents the number of flowers in that cell. Output a single integer - representing the maximum number of flowers that can be collected by following the described path. Example: ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 Explanation: By moving right -> down -> down -> right, the maximum number of flowers collected is 1 + 3 + 5 + 2 + 1 = 12. ```","solution":"def max_flowers(n, m, grid): # Initialize a 2D dp array to store the maximum flowers that can be collected up to each cell dp = [[0] * m for _ in range(n)] # Base case: top-left cell dp[0][0] = grid[0][0] # Fill in the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the result return dp[n-1][m-1]"},{"question":"A programmer has written a simple text-based game where you explore rooms in a dungeon. Each room can have multiple doors leading to other rooms. The connections between the rooms form a graph, where each node represents a room and each edge represents a door between two rooms. The game starts in room 1 and ends when you reach the treasure room, which is one of the rooms in the dungeon. Your task is to write a function that determines the minimum number of rooms you must visit (including the starting room and the treasure room) to reach the treasure room from the starting room. The function should take two parameters: the number of rooms in the dungeon ( n ) and a list of tuples representing the doors between rooms. Each tuple ( (a, b) ) indicates that there is a door between room ( a ) and room ( b ). The function should return the minimum number of rooms to visit, or ( -1 ) if it is not possible to reach the treasure room. The rooms are numbered from 1 to ( n ). The treasure room is always room ( n ). # Function Signature `def minimum_rooms_to_treasure(n: int, doors: List[Tuple[int, int]]) -> int:` # Input - An integer ( n ) (2 ≤ ( n ) ≤ 10^4): the number of rooms. - A list of tuples `doors` where each tuple ( (a, b) ) (1 ≤ ( a, b ) ≤ ( n )) represents a door between room ( a ) and room ( b ). # Output - An integer representing the minimum number of rooms that must be visited to reach the treasure room from the starting room, or ( -1 ) if it is not possible to reach the treasure room. # Example ```python minimum_rooms_to_treasure(5, [(1, 2), (2, 3), (3, 5), (1, 4), (4, 5)]) # should return 3 minimum_rooms_to_treasure(4, [(1, 2), (2, 3)]) # should return -1 ``` # Explanation - In the first example, starting from room 1, you can go through the rooms as follows: 1 -> 4 -> 5. Therefore, the minimum number of rooms to visit is 3 (rooms 1, 4, and 5). - In the second example, there is no path to reach room 4 (treasure room) from room 1. Thus, the output is ( -1 ).","solution":"from typing import List, Tuple from collections import deque, defaultdict def minimum_rooms_to_treasure(n: int, doors: List[Tuple[int, int]]) -> int: if n == 1: return 1 # Create an adjacency list graph = defaultdict(list) for a, b in doors: graph[a].append(b) graph[b].append(a) # Perform BFS to find the shortest path from room 1 to room n start, end = 1, n queue = deque([(start, 1)]) # (current_room, distance) visited = set([start]) while queue: current_room, distance = queue.popleft() if current_room == end: return distance for neighbor in graph[current_room]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1"},{"question":"A company has a road network connecting various warehouses. This road network can be represented as an undirected graph where nodes are warehouses and edges are roads connecting them. Each road has a different travel weight based on the condition and distance of the road. The company wants to ensure efficient routing of goods between its main warehouse and all other warehouses. For this reason, they plan to construct additional roads to guarantee that the minimum travel cost (shortest path) from the main warehouse to any other warehouse does not exceed a given threshold. You are given an integer t representing the maximum allowed travel weight from the main warehouse to any other warehouse. You are also given an integer n which represents the total number of warehouses, and an integer m which represents the number of existing roads. Then, you are given m lines where each line contains three integers u, v, and w which denotes a road of travel weight w connecting warehouse u and warehouse v. The main warehouse is denoted as warehouse 1. Your task is to compute the minimum number of roads that need to be added to ensure all travel weights from the main warehouse to any other warehouse are within the threshold t, or determine that it is impossible. Input: - The first line contains three integers n, m, t (2 ≤ n ≤ 100, 1 ≤ m ≤ 4950, 1 ≤ t ≤ 10^9) - Next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) Output: - An integer which is the minimum number of roads to be added, or -1 if it is impossible to achieve the goal. Example: Input: 4 4 3 1 2 1 2 3 2 3 4 1 4 1 4 Output: 1 Explanation: Here, we can add a road between warehouse 1 and warehouse 3 with travel weight 3 to ensure that the maximum travel weight from warehouse 1 to any other warehouse does not exceed 3.","solution":"import heapq def shortest_path(n, graph, main_warehouse): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[main_warehouse] = 0 min_heap = [(0, main_warehouse)] while min_heap: curr_distance, u = heapq.heappop(min_heap) if curr_distance > distances[u]: continue for neighbor, weight in graph[u]: distance = curr_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances def min_new_roads(n, m, t, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distances = shortest_path(n, graph, 1) max_distance = max(distances.values()) if max_distance <= t: return 0 required_new_roads = 0 for warehouse, distance in distances.items(): if distance > t: if distance == float(\'inf\'): return -1 required_new_roads += 1 return required_new_roads # Example case n = 4 m = 4 t = 3 roads = [(1, 2, 1), (2, 3, 2), (3, 4, 1), (4, 1, 4)] print(min_new_roads(n, m, t, roads)) # Output: 1"},{"question":"Write a program that analyzes whether a series of passwords from a user meet the requirements for a secure password. A secure password should have at least one digit (0-9), one lowercase Latin letter (a-z), one uppercase Latin letter (A-Z), and one special character from the set {!@#%^&*()}. The password length must be between 8 and 20 characters inclusive. The input starts with a single integer n (1 ≤ n ≤ 10), representing the number of passwords to check. Each of the next n lines contains a password. For each password, output \\"Secure\\" if the password meets all the criteria, or \\"Insecure\\" if it does not.","solution":"def is_password_secure(password): if len(password) < 8 or len(password) > 20: return \\"Insecure\\" has_digit = any(char.isdigit() for char in password) has_lower = any(char.islower() for char in password) has_upper = any(char.isupper() for char in password) has_special = any(char in \\"!@#%^&*()\\" for char in password) if has_digit and has_lower and has_upper and has_special: return \\"Secure\\" else: return \\"Insecure\\" def analyze_passwords(passwords): results = [] for password in passwords: results.append(is_password_secure(password)) return results"},{"question":"An e-commerce platform wants to improve its product recommendation system by understanding the relationship between different products. You are given a list of products, and each product is uniquely identified by an id ranging from 1 to n. The platform also provides customer purchase data, captured as pairs of product ids (a, b), indicating that customer who bought product a also bought product b. Note that the pairs are direction-agnostic, meaning if customers bought both a and b, the pair is presented as (a, b) or (b, a). Your task is to build a function to identify all groups of products where each group consists of products that are directly or indirectly connected by customer purchases. Each product should belong to exactly one group. Two products belong to the same group if there is a sequence of purchases indicating that customers have bought both products directly or through a series of other products. The first line of input contains an integer n, denoting the number of products, and an integer m, denoting the number of purchase pairs. Each of the following m lines contains two integers a and b, (1 ≤ a, b ≤ n; a ≠ b), representing a pair of products. The output should be the total number of product groups. Consider the provided purchase data to count the number of groups: In the first sample, products 1, 2, 3, and 4 are connected through the given pairs, forming one group. Product 5 forms a separate group by itself. **Sample Input:** ``` 5 4 1 2 2 3 3 4 4 1 ``` **Sample Output:** ``` 2 ```","solution":"def find_groups(n, m, pairs): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for a, b in pairs: graph[a].append(b) graph[b].append(a) visited = set() groups_count = 0 for product in range(1, n + 1): if product not in visited: bfs(product, visited, graph) groups_count += 1 return groups_count"},{"question":"Michael is planning a bonfire and wants to create a decorative, circular arrangement of lanterns around the bonfire. The lanterns need to be placed such that they provide uniform light distribution around the bonfire. To achieve this, Michael has n lanterns, each placed at a unique position on a circular path with a radius of 1 unit centered at the origin (0, 0) in a 2D plane. Michael wants to ensure that the maximum distance between any two consecutive lanterns is minimized. You are given the angles (in degrees) at which each of the n lanterns are placed on the circle in a counterclockwise direction from the positive x-axis. Your task is to calculate the smallest possible maximum distance between two consecutive lanterns along the circumference of the circle. The first line contains a single integer n (3 ≤ n ≤ 100,000) — the number of lanterns. The second line contains n integers ai (0 ≤ ai < 360) — the angles (in degrees) at which the lanterns are placed. Output the smallest possible maximum distance between two consecutive lanterns. Note: The distance between two points on the circle given their angles θ1 and θ2 is computed as: [ text{arc length} = r times Delta theta ] where ( r ) is the radius of the circle (which is 1 unit in this case) and ( Delta theta ) is the absolute angular difference between θ1 and θ2 in radians. # Example Input: ``` 4 0 90 180 270 ``` Output: ``` 1.5708 ``` (Note: 1.5708 is approximately π/2, which is the arc length covered by 90 degrees on a unit circle)","solution":"from math import pi, radians def smallest_max_distance(n, angles): Calculate the smallest possible maximum distance between two consecutive lanterns. Parameters: n (int): Number of lanterns. angles (list): List of angles in degrees at which the lanterns are placed. Returns: float: Smallest possible maximum distance between two consecutive lanterns. if n < 3: raise ValueError(\\"There must be at least 3 lanterns.\\") # Convert angles to radians and sort them angles = sorted(radians(angle) for angle in angles) # Find the maximum gap between two consecutive angles max_gap = max((angles[i+1] - angles[i]) for i in range(n-1)) max_gap = max(max_gap, 2 * pi - (angles[-1] - angles[0])) # The smallest possible maximum distance is the biggest gap, as the circle is 2π return max_gap"},{"question":"The kingdom of ByteLand contains several cities connected by bidirectional roads. The roads form a tree (i.e., a connected acyclic graph). The ByteKing wants to know the distance of each city from the capital city. You are given a tree with ( n ) nodes (cities) numbered from ( 1 ) to ( n ). The capital city is the city numbered ( 1 ). For each of the other ( n - 1 ) nodes, determine the shortest path distance from that node to the capital city. The input consists of multiple lines: - The first line contains a single integer ( n ) ((2 leq n leq 10^5)) — the number of cities. - The next ( n - 1 ) lines each contain two integers ( u ) and ( v ) ((1 leq u, v leq n )), representing a bidirectional road connecting cities ( u ) and ( v ). Output ( n - 1 ) lines, where the ( i )-th line contains the shortest path distance from city ( i+1 ) to the capital city ( 1 ). **Example:** Input: ``` 6 1 2 1 3 2 4 2 5 3 6 ``` Output: ``` 1 1 2 2 2 ``` Explanation: City (2), City (3) are directly connected to the capital city (1) with a distance of 1. City (4), City (5), and City (6) are connected via City (2) or City (3) making their distances 2.","solution":"from collections import deque, defaultdict def compute_distances(n, edges): Computes the shortest path distance from each node to the capital city 1. Parameters: - n: int - number of cities - edges: list of tuples - representing the bidirectional roads (u, v) Returns: - distances: list of int - shortest path distances from city 1 to remaining cities # Create adjacency list adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Calculate distances using BFS distances = [-1] * (n + 1) distances[1] = 0 # Distance to the capital city itself is 0 queue = deque([1]) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if distances[neighbor] == -1: # If the neighbor has not been visited distances[neighbor] = distances[node] + 1 queue.append(neighbor) # We return distances from city 2 to n return distances[2:]"},{"question":"You are given a grid of size n x m filled with characters \'a\' and \'b\'. A path in the grid is a sequence of cells starting from the upper-left corner (1,1) and ending at the bottom-right corner (n,m), moving only right or down at each step. We define a path as \\"valid\\" if it contains at most k characters \'a\'. Your task is to determine the number of valid paths from (1,1) to (n,m). The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 50, 0 ≤ k ≤ n + m - 2). Each of the next n lines contains a string of length m consisting of the characters \'a\' and \'b\'. Output a single integer, the number of valid paths from the top-left to the bottom-right corner. **Example:** ``` Input: 4 4 2 abaa bbab abba abba Output: 4 ``` In the above example, there are 4 valid paths where at most 2 cells along the path contain the character \'a\'.","solution":"def valid_paths(grid, n, m, k): def count_paths(i, j, a_count): # If out of bounds or more \'a\' than allowed if i >= n or j >= m or a_count > k: return 0 # If reached bottom-right corner and it\'s within the allowed \'a\' count if i == n - 1 and j == m - 1: return 1 if a_count + (grid[i][j] == \'a\') <= k else 0 # Increment \'a\' count if current cell is \'a\' if grid[i][j] == \'a\': a_count += 1 # Move right or down return count_paths(i + 1, j, a_count) + count_paths(i, j + 1, a_count) return count_paths(0, 0, 0)"},{"question":"You are given an array of integers a of length n. Each integer is either 0 or 1. You can perform operations on the array. Each operation consists of the following steps: 1. Select an index i (1 le i le n) such that a[i] = 0. 2. Replace a[i] with 1 and increment all elements a[j] for all i < j le n by 1. Note that both steps are mandatory in each operation. For example, if you have an array a = [1, 0, 1, 0, 1], the first operation can be selecting i = 2, updating the array to [1, 1, 2, 1, 2]. You aim to maximize the number of operations you can perform until no more operations can be performed. The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 2 cdot 10^5) — the length of the array a. The second line contains the array a of n integers. Each integer is either 0 or 1. It\'s guaranteed that the total sum of n over all test cases doesn\'t exceed 2 cdot 10^5. For each test case, print a single integer — the maximum number of operations you can perform. In the first test case, you can, for example, select i = 2 to get [1, 1, 2, 1, 2], and then select i = 4 to get [1, 1, 2, 1, 3]. Finally, no more operations can be performed and the number of operations performed is 2.","solution":"def max_operations(n, a): Given an array \'a\' of length \'n\' consisting of 0s and 1s, this function returns the maximum number of operations that can be performed as described. return a.count(0) def process_input(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] results.append(max_operations(n, a)) return results"},{"question":"You are given a list of integers representing the daily profit from a small business for a period of n consecutive days. However, some days the business incurs losses, indicated by negative numbers. Your task is to identify the subarray (contiguous subsequence) of days that results in the maximum sum of profits, and to return the sum of that subarray. The first line contains an integer n (1 le n le 10^5), the number of days. The second line contains n integers representing the daily profit or loss p_i (-10^9 le p_i le 10^9). Output the maximum sum of the subarray with the largest sum. In the first example, if the profits are [3, -1, 4, -2, 2], the subarray with the maximum sum is [3, -1, 4] which sums to 6. In the second example, if the profits are [-1, -2, -3, -4], the subarray with the maximum sum is [-1] which sums to -1.","solution":"def max_subarray_sum(profits): Find the subarray with the maximum sum and return the sum. :param profits: List of integers representing daily profits and losses :return: Maximum sum of any subarray max_current = max_global = profits[0] for i in range(1, len(profits)): max_current = max(profits[i], max_current + profits[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers `arr` and a positive integer `k`. Your task is to write a function `findPairs` that finds all unique pairs of integers in the array whose sum is equal to `k`. Define the function `findPairs` as follows: ```python def findPairs(arr, k): # your code here ``` # Input - `arr`: A list of integers (0 ≤ len(arr) ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4). - `k`: A positive integer (1 ≤ k ≤ 10^4). # Output - A list of tuples, where each tuple contains two integers from the array whose sum equals `k`. Each pair should be sorted in non-decreasing order, and the resulting list of tuples should be sorted in non-decreasing order based on the first element, and then the second element if necessary. # Example ```python # Example 1 arr = [1, 5, 7, -1, 5] k = 6 # Output: [(1, 5), (-1, 7)] # Example 2 arr = [2, 3, 4, 3, 2] k = 6 # Output: [(2, 4), (3, 3)] ``` # Constraints - All pairs in the output should be unique, even if the array contains duplicate elements that can form the same sum. - The order of pairs in the output list must follow the sorting rule described above.","solution":"def findPairs(arr, k): Returns a list of unique pairs of integers from \'arr\' whose sum is equal to \'k\'. Each pair is sorted in non-decreasing order. The resulting list is also sorted in non-decreasing order. seen = set() pairs = set() for num in arr: target = k - num if target in seen: pairs.add(tuple(sorted((num, target)))) seen.add(num) return sorted(pairs)"},{"question":"Peter loves encryption, and he\'s working on a simple way to encode messages. He uses a very basic shift cipher where each letter in the message is shifted a fixed number of positions down the alphabet. Your task is to help him construct such an encoded message. Write a function that takes a string composed of lower case English letters and an integer k (1 ≤ k ≤ 25), and returns the encoded message. Each letter in the string should be shifted k positions to the right in the alphabet, with wrapping around from \'z\' to \'a\'. For example, with k=3, \'a\' becomes \'d\', \'b\' becomes \'e\', ..., \'z\' becomes \'c\'. Input: - A string s, where (1 ≤ |s| ≤ 100): the message to be encoded, consisting only of lower case English letters. - An integer k: the number of positions to shift each letter. Output: - A string: the encoded message. Note: Use modular arithmetic to handle the wrap around from \'z\' to \'a\'. Example: Input: \\"abc\\", 3 Output: \\"def\\" Input: \\"xyz\\", 2 Output: \\"zab\\"","solution":"def encode_message(s, k): Encodes the input string s by shifting each letter k positions down the alphabet. Wraps around from \'z\' to \'a\' if necessary. Parameters: s (str): The input string composed of lower case English letters. k (int): The number of positions to shift each letter. Returns: str: The encoded message. encoded_message = [] for char in s: # Calculate the encoded character and ensure it wraps using modular arithmetic new_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) encoded_message.append(new_char) return \'\'.join(encoded_message)"},{"question":"Sam and Alex are avid fans of magic duels. They have recently developed a new duel setup that involves strategic placement of magical barriers. In this setup, a magical barrier is placed at certain points on an infinite number line. The goal for each duel is to determine how many unique continuous segments of non-zero length are formed between the barriers, where each segment is defined by the space between two consecutive barriers. Initially, there are no barriers placed. Sam and Alex take turns adding barriers at specific positions on the number line. Sam always places a barrier first, then Alex places a barrier, and they continue alternating. The positions for adding barriers are generated sequentially from a list provided at the start of each duel. The list always contains unique positions. Your task is to write a function that returns the number of unique continuous segments of non-zero length formed after all barriers have been placed by the end of the duel. The input consists of an integer n (2 ≤ n ≤ 200,000), the number of barriers to be placed, and a list of n distinct integers p1, p2, ..., pn representing the barrier positions on the number line (−10^9 ≤ pi ≤ 10^9 for all valid i). The list is ordered by the positions in which barriers will be added during the duel. Your function should return a single integer representing the number of unique continuous segments of non-zero length formed after all barriers have been placed. # Example Input ``` 6 4 10 6 2 8 12 ``` Output ``` 5 ``` Explanation Following the placement sequence: - Initial barrier placements: [4] - After first move by Alex: [4, 10] - After Sam\'s next move: [4, 6, 10] - Continuing this process: [2, 4, 6, 8, 10, 12] The segments formed will be: [2, 4], [4, 6], [6, 8], [8, 10], [10, 12], resulting in 5 unique segments.","solution":"def count_unique_segments(n, positions): Determines the number of unique continuous segments of non-zero length formed by placing barriers at specified positions on a number line. :param n: Number of barriers to be placed :param positions: List of integers representing the barrier positions :return: Number of unique continuous segments of non-zero length formed # First, sort the list of positions positions.sort() # The number of unique segments is the number of barriers minus 1 return n - 1"},{"question":"You are given an array of integers. Your task is to find the length of the longest contiguous subarray such that the difference between the maximum and minimum elements in this subarray does not exceed a given integer T. The first line of input consists of two space-separated integers n and T (1 ≤ n ≤ 100,000, 0 ≤ T ≤ 1,000,000) — the number of elements in the array and the allowed difference respectively. The second line consists of n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000) — the elements of the array. Output a single integer — the length of the longest contiguous subarray satisfying the condition. Example: Input: 5 2 4 7 2 5 3 Output: 2","solution":"def longest_subarray(n, T, array): Returns the length of the longest contiguous subarray such that the difference between the maximum and minimum elements in this subarray does not exceed T. from collections import deque max_deque = deque() min_deque = deque() left = 0 longest = 0 for right in range(n): while max_deque and array[max_deque[-1]] <= array[right]: max_deque.pop() max_deque.append(right) while min_deque and array[min_deque[-1]] >= array[right]: min_deque.pop() min_deque.append(right) while array[max_deque[0]] - array[min_deque[0]] > T: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() longest = max(longest, right - left + 1) return longest"},{"question":"Alex the Adventurer has discovered a treasure map that leads to a hidden treasure guarded by ancient robots. The map depicts a grid of size n times n filled with numbers where each cell can either be empty (represented by 0) or contain an obstacle (represented by 1). Alex can move up, down, left, or right, but cannot pass through obstacles. Alex starts at the top-left cell *(1, 1)* and aims to reach the bottom-right cell *(n, n)*. If the starting or ending cell contains an obstacle, Alex cannot begin the journey or reach his destination. Help Alex determine if there is a path from the starting cell to the ending cell and calculate the minimum number of steps required to reach the ending cell. If there is no valid path, return -1. # Input - The first line contains an integer n (2 le n le 300) — the size of the grid. - The next n lines each contain n integers representing the grid. Each integer is either a 0 or a 1. # Output - Print a single integer representing the minimum number of steps required to reach the ending cell from the starting cell. If no such path exists, print -1. # Example Input ``` 5 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 1 0 ``` Output ``` 8 ``` Input ``` 3 0 1 0 1 1 0 0 0 0 ``` Output ``` -1 ``` # Note In the first example, a valid path is: ``` (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (3,4) -> (4,4) -> (5,4) -> (5,5) ``` In the second example, there is no way to reach the bottom-right cell as the path is blocked by obstacles.","solution":"from collections import deque def min_steps_to_reach_treasure(n, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == 0 if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a fantasy land, an army is preparing for battle. The army consists of a certain number of units which can be divided into groups of three different types: warriors, archers, and mages. The power of a group is determined by the sum of its warriors, archers, and mages. The army general has n units. The goal is to form the strongest possible group from these units such that the group contains at least one unit of each type (warrior, archer, and mage). Given the number of each type of unit, determine the maximum possible power of a single group. The first line of input contains one integer n (3 leq n leq 100) — the total number of units in the army. The second line contains three integers w, a, and m (0 leq w, a, m leq n and w + a + m = n) — the number of warriors, archers, and mages, respectively. Print a single integer — the maximum possible power of a group that contains at least one warrior, one archer, and one mage. Example Input: 6 2 3 1 Output: 6 In this example, the maximum possible power of a group is achieved by taking all units (2 warriors, 3 archers, and 1 mage), resulting in a group power of 2+3+1=6.","solution":"def max_possible_power(n, w, a, m): Returns the maximum possible power of a group that contains at least one warrior, one archer, and one mage. if w == 0 or a == 0 or m == 0: return 0 # The highest power group would be taking all warriors, archers, and mages. return w + a + m"},{"question":"Sara has recently started collecting rare stamps. She has collected `n` stamps and now wants to organize them in her new stamp album. The album has `m` pages, where each page can hold up to `k` stamps. Sara wants to fill the album as much as possible without leaving any empty pages if it can be avoided. Given the total number of stamps `n`, the number of pages `m`, and the capacity `k` of each page, determine if it is possible to organize all the collected stamps such that no pages are left completely empty (i.e., a page cannot have zero stamps). If it is possible, print \\"POSSIBLE\\" (without the quotes). If it is not possible, print \\"IMPOSSIBLE\\" (without the quotes). The first line contains three space-separated integers `n`, `m`, and `k`. All numbers are integers and they fit into the range from 1 to 1000. Example Input: ``` 12 3 4 ``` Example Output: ``` POSSIBLE ``` Example Input: ``` 10 3 4 ``` Example Output: ``` IMPOSSIBLE ```","solution":"def can_organize_stamps(n, m, k): Determines if it\'s possible to organize n stamps into m pages with each page holding k stamps such that no page is left completely empty. :param n: Total number of stamps :param m: Total number of pages :param k: Capacity of each page :return: \\"POSSIBLE\\" if it\'s possible to organize stamps without leaving any page empty, otherwise \\"IMPOSSIBLE\\" # If there are more pages than stamps, it\'s impossible to fill all pages if m > n: return \\"IMPOSSIBLE\\" # If there are enough stamps to fill at least one stamp in each page # but not more than the total capacity, it\'s possible to organize stamps. if m <= n and n <= m * k: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"You are organizing a programming contest where each problem is designed in such a way that its difficulty level should increase with each problem number. You want to ensure that each contestant solves the problems in a sequential manner, ensuring no one skips a problem. To make sure your contest is fair, you need to determine the minimum number of problems that a contestant needs to solve to reach a certain problem. Contestants can only solve the next problem if they have solved all previous ones. You are given the total number of problems `n` and a list of pairs representing difficulties of these problems, where `diff[i]` is the difficulty of the i-th problem. The contestant must solve problems in increasing order of difficulty but can only tackle consecutive problems. Write a program that will take the number of problems `n`, the list of difficulties `diff`, and a target problem `m` (1 <= m <= n), and output the minimum number of problems that need to be solved to reach the `m`-th problem. # Input - The first line contains an integer `n` (`1 ≤ n ≤ 10^5`), the total number of problems. - The second line contains `n` integers where the i-th integer represents `diff[i]` (`1 ≤ diff[i] ≤ 10^9`), the difficulties of the problems in order. - The third line contains an integer `m` (`1 ≤ m ≤ n`), the target problem number. # Output - Print a single integer, the minimum number of problems to be solved to reach the problem `m`. # Example Input ``` 5 1 2 3 4 5 3 ``` Output ``` 3 ``` Input ``` 6 10 20 30 40 50 60 4 ``` Output ``` 4 ``` Note In the first example, to reach the 3rd problem with difficulty 3, the contestant must solve the first 3 problems: 1, 2, and 3. Hence, the output is 3. In the second example, to reach the 4th problem with difficulty 40, the contestant must solve the first 4 problems: 10, 20, 30, and 40. Hence, the output is 4.","solution":"def minimum_problems_to_solve(n, diff, m): Determines the minimum number of problems to be solved to reach the m-th problem. Parameters: n (int): Total number of problems. diff (list): A list of integers representing difficulties of problems. m (int): The target problem number. Returns: int: Minimum number of problems to be solved to reach the m-th problem. # Since the problems must be solved in sequence, to reach the m-th problem, # one needs to solve the first m problems. return m"},{"question":"You are given n balloons each with a unique position along a straight line. Each balloon is moving either to the left or to the right with a constant speed. Your task is to determine when and where two balloons moving in opposite directions will first collide. The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of balloons. Each of the next n lines contains two integers pi and si (-10^9 ≤ pi ≤ 10^9 and -10^9 ≤ si ≤ 10^9, si ≠ 0) — the initial position and the speed of the i-th balloon respectively. The balloons are given in the order of increasing initial positions. The positions are in meters, and the speeds are in meters per second. Speeds may be negative, indicating the balloon is moving to the left. Output the position and the time of the first collision in seconds in the format \\"position time\\". If no two balloons moving in opposite directions ever collide, print \\"No collision\\". Your answer must have a relative or absolute error less than 10^-6.","solution":"def find_first_collision(n, balloons): INF = float(\'inf\') first_collision_time = INF collision_position = None for i in range(n - 1): p1, s1 = balloons[i] p2, s2 = balloons[i + 1] if s1 > 0 and s2 < 0: # Balloon i goes to the right and balloon i+1 goes to the left collision_time = (p2 - p1) / (s1 - s2) if collision_time < first_collision_time: first_collision_time = collision_time collision_position = p1 + s1 * collision_time if first_collision_time == INF: return \\"No collision\\" return f\\"{collision_position:.6f} {first_collision_time:.6f}\\""},{"question":"You are given two strings, s1 and s2, that consist of lowercase English letters. You need to determine if s2 can be transformed into s1 using at most one of the following operations: 1. Insert a single character at any position in s2. 2. Delete a single character from any position in s2. 3. Replace a single character at any position in s2 with any other character. Your task is to write a function that returns a boolean value indicating whether it is possible to make s2 equal to s1 using at most one of the aforementioned operations. Function Signature: ```python def is_one_edit_distance(s1: str, s2: str) -> bool: pass ``` Input: - s1 and s2 are non-empty strings with lengths not exceeding 10^4. Output: - Return `True` if s2 can be transformed into s1 by applying at most one operation, else return `False`. Examples: 1. `is_one_edit_distance(\\"abc\\", \\"ab\\")` returns `True` 2. `is_one_edit_distance(\\"abc\\", \\"adc\\")` returns `True` 3. `is_one_edit_distance(\\"abc\\", \\"abcd\\")` returns `True` 4. `is_one_edit_distance(\\"abc\\", \\"abde\\")` returns `False` 5. `is_one_edit_distance(\\"a\\", \\"a\\")` returns `False`","solution":"def is_one_edit_distance(s1: str, s2: str) -> bool: len1, len2 = len(s1), len(s2) if abs(len1 - len2) > 1: return False if len1 > len2: s1, s2 = s2, s1 len1, len2 = len2, len1 i = j = 0 edited = False while i < len1 and j < len2: if s1[i] != s2[j]: if edited: return False edited = True if len1 == len2: i += 1 else: i += 1 j += 1 return edited or len1 != len2"},{"question":"You are given a string containing \'(\' and \')\'. Determine the length of the longest valid parentheses substring. A valid parentheses substring is a substring that consists of balanced parentheses. Return the length of the longest valid parentheses substring. Input Format: - A single string s containing \'(\' and \')\'. The length of the string will be between 1 and 10^5. Output Format: - An integer that represents the length of the longest valid parentheses substring. Example: Input: (()) Output: 4 Explanation: The entire string is a valid substring. Example 2: Input: )()()) Output: 4 Explanation: The longest valid substring is \\"()()\\". Example 3: Input: \\"\\" Output: 0","solution":"def longestValidParentheses(s): Given a string containing \'(\' and \')\', determine the length of the longest valid parentheses substring. :param s: A string containing only \'(\' and \')\' :return: An integer representing the length of the longest valid parentheses substring max_length = 0 stack = [-1] # Initialize stack with -1 to handle edge cases for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"You are given a forest consisting of n trees and several paths between them. Each tree has a certain amount of fruits on it. Your task is to determine the maximum number of fruits you can collect starting at any tree, moving between trees, and always collecting the fruits of the tree before moving to the next one. You can only move between trees that share a direct path. In the first line, you will be given an integer n, the number of trees (1 ≤ n ≤ 100000). In the next line, n space-separated integers will be given. The ith integer is the number of fruits on the ith tree (fruits will be non-negative and will not exceed 10^9). The next line will contain an integer m (0 ≤ m ≤ 200000). Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n; u ≠ v). A pair ui, vi indicates that there is a bidirectional path connecting tree ui and tree vi. Print a single integer representing the maximum number of fruits that can be collected by starting at any tree and following the paths. # Example: Input: ``` 5 10 15 7 5 20 4 1 2 2 3 3 4 4 5 ``` Output: ``` 57 ``` # Explanation: Starting at tree 1, the optimal path to collect the maximum fruits would be 1 -> 2 -> 3 -> 4 -> 5, collecting 10 + 15 + 7 + 5 + 20 = 57 fruits. Hence, the output is 57.","solution":"def max_fruits(n, fruits, m, edges): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) # Function to perform BFS and find the sum of fruits in largest connected component def bfs(start): visited = [False] * n queue = deque([start]) visited[start] = True total_fruits = fruits[start] while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) total_fruits += fruits[neighbor] return total_fruits max_fruits_collected = 0 visited = [False] * n # Find the largest sum of fruits in connected component for i in range(n): if not visited[i]: visited[i] = True max_fruits_collected = max(max_fruits_collected, bfs(i)) return max_fruits_collected"},{"question":"You are given a string s and n queries q1, q2, ..., qn. Each query consists of two numbers l and r (1 ≤ l ≤ r ≤ |s|) representing a substring s[l:r]. For each query, you need to determine the length of the longest contiguous substring that contains only distinct characters. The first line of the input contains a pair of integers t, n (1 ≤ t ≤ 100, 1 ≤ n ≤ 100) — the number of test cases and the number of queries, respectively. The second line contains the string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. The next n lines contain the queries, one per line. Each query is given by a pair of numbers l, r (1 ≤ l ≤ r ≤ |s|) — the indexes of the query range limits (1-indexed). Print n integers for each test case — the answers to each query. If |s| or the query range is very large, ensure your solution is optimized to handle such cases efficiently.","solution":"def length_of_longest_distinct_substring(s, queries): Returns a list of lengths of the longest contiguous substrings with only distinct characters for each query results = [] for l, r in queries: substring = s[l-1:r] longest = 0 start = 0 char_index_map = {} for end in range(len(substring)): if substring[end] in char_index_map: start = max(start, char_index_map[substring[end]] + 1) char_index_map[substring[end]] = end longest = max(longest, end - start + 1) results.append(longest) return results"},{"question":"Vera has a sequence of characters represented as a string s. She can perform two types of operations to modify this string: 1. Remove any single character from the string. 2. Swap any two adjacent characters in the string. Given a string s which needs to be transformed into a target string t, you need to help Vera determine if it is possible to transform s into t using the described operations. Both s and t will consist of lowercase English letters only. If it is possible to transform s into t, print \\"POSSIBLE\\" (without quotes). Otherwise, print \\"IMPOSSIBLE\\" (without quotes). # Input: - The first line contains the string s (1 ≤ |s| ≤ 100) — the initial string. - The second line contains the string t (1 ≤ |t| ≤ 100) — the target string. # Output: - Print \\"POSSIBLE\\" if it is possible to transform s into t using the given operations. Otherwise, print \\"IMPOSSIBLE\\". # Example: Input: ``` abcde edcba ``` Output: ``` POSSIBLE ``` Input: ``` abc dcba ``` Output: ``` IMPOSSIBLE ``` Note: The operations allow any permutation of characters within s, hence if t is a permutation of s or a substring of any permutation of s, the answer will be \\"POSSIBLE\\". Otherwise, it will be \\"IMPOSSIBLE\\".","solution":"def can_transform(s, t): Determines if string s can be transformed into string t using the given operations. from collections import Counter # Check if the characters in s can be rearranged to form t if Counter(s) == Counter(t): return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"You are given a list of integers and some queries regarding subarrays of this list. There are two types of queries: 1. Update the value at a given index. - Format: `1 idx val`, where `idx` is the index (1-based) of the list to update, and `val` is the new value to be set at that index. 2. Compute the sum of a subarray. - Format: `2 l r`, where `l` and `r` are the starting and ending indices (1-based, inclusive) of the subarray for which the sum needs to be computed. # Input - The first line contains two integers, `n` and `q` (1 le n, q le 10^5), where `n` is the number of elements in the list, and `q` is the number of queries. - The second line contains `n` integers separated by spaces, representing the initial elements of the list. - The next `q` lines contain one query each, of one of the two types described. # Output For each query of the second type (sum query), print the sum of the specified subarray. # Example **Input:** ``` 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 ``` **Output:** ``` 6 13 19 ``` # Explanation - The list starts as [1, 2, 3, 4, 5]. - The first query is a sum query seeking the sum of elements from index 1 to 3, which is 1 + 2 + 3 = 6. - The second query updates the element at index 2 to 10, so the list becomes [1, 10, 3, 4, 5]. - The third query is a sum query seeking the sum of elements from index 1 to 3 again, which now is 1 + 10 + 3 = 14. - The fourth query is a sum query seeking the sum of elements from index 2 to 5, which now is 10 + 3 + 4 + 5 = 22.","solution":"class NumList: def __init__(self, nums): self.nums = nums def update(self, idx, val): self.nums[idx - 1] = val # converting 1-based index to 0-based index def sum_subarray(self, l, r): return sum(self.nums[l - 1:r]) # sum from l to r inclusive def process_queries(n, q, nums, queries): num_list = NumList(nums) results = [] for query in queries: if query[0] == 1: _, idx, val = query num_list.update(idx, val) elif query[0] == 2: _, l, r = query results.append(num_list.sum_subarray(l, r)) return results"},{"question":"Eva is building a new city and needs to install streetlights along the main road. The main road can be represented as a straight line, and there are n distinct positions where streetlights can be placed, denoted by an array p of length n. The positions are integers that represent distances from the starting point of the road. Each streetlight has the same fixed range r, meaning it can illuminate any point on the road that is within a distance of r from the streetlight. Eva wants to ensure that the entire road from the starting point (position 0) to the farthest position m is well-lit. Write a function that determines the minimum number of streetlights required to illuminate the entire road from position 0 to position m. If it\'s impossible to illuminate the entire road, return -1. The first line contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 1,000,000), representing the number of potential streetlight positions and the length of the road, respectively. The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ m), representing the positions where streetlights can be placed. The third line contains one integer r (1 ≤ r ≤ 1,000,000), representing the range of each streetlight. Print a single number representing the minimum number of streetlights required to illuminate the entire road or -1 if it is impossible. Example: Input: 5 10 1 5 8 9 12 3 Output: 3 Explanation: In this example, placing streetlights at positions 1, 5, and 9 will ensure that the entire road from position 0 to position 10 is illuminated.","solution":"def min_streetlights(n, m, positions, r): positions.sort() streetlights = 0 current_position = 0 i = 0 while current_position < m: farthest_position = -1 while i < n and positions[i] <= current_position + r: farthest_position = positions[i] + r i += 1 if farthest_position == -1: return -1 streetlights += 1 current_position = farthest_position return streetlights"},{"question":"You are working on an education app that helps students practice basic mathematics. You need to design a function that can evaluate simple mathematical expressions. The expressions will contain non-negative integers and the operators +, -, *, and /. Given such an expression as a string, your function should output the result of the expression. Your task is to implement a function `evaluate_expression(expression: str) -> int` that takes a single parameter: - a string `expression` that represents the mathematical expression; The expression will be a valid one containing only digits (0-9) and the operators specified (+, -, *, /). The operators are always surrounded by spaces, and there are no parentheses in the expression. Perform integer division for the / operator. Your function should return an integer which is the result of evaluating the expression. **Examples:** ``` assert evaluate_expression(\\"3 + 5\\") == 8 assert evaluate_expression(\\"10 - 2 * 3\\") == 4 assert evaluate_expression(\\"20 / 4 + 2\\") == 7 assert evaluate_expression(\\"1 + 2 * 3 - 4 / 2\\") == 5 ``` **Note:** - The evaluations should follow the standard order of operations (PEMDAS/BODMAS rules). - The input expression is guaranteed to be valid and does not require any error handling for invalid inputs.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a simple mathematical expression and returns the result as an integer. # Split the expression by spaces to handle spaces around operators tokens = expression.split() # Process multiplication and division first i = 0 while i < len(tokens): if tokens[i] == \'*\': result = int(tokens[i-1]) * int(tokens[i+1]) tokens = tokens[:i-1] + [str(result)] + tokens[i+2:] i -= 1 elif tokens[i] == \'/\': result = int(tokens[i-1]) // int(tokens[i+1]) tokens = tokens[:i-1] + [str(result)] + tokens[i+2:] i -= 1 i += 1 # Process addition and subtraction i = 0 while i < len(tokens): if tokens[i] == \'+\': result = int(tokens[i-1]) + int(tokens[i+1]) tokens = tokens[:i-1] + [str(result)] + tokens[i+2:] i -= 1 elif tokens[i] == \'-\': result = int(tokens[i-1]) - int(tokens[i+1]) tokens = tokens[:i-1] + [str(result)] + tokens[i+2:] i -= 1 i += 1 return int(tokens[0])"},{"question":"Given an array of integers, write a function that finds the largest sum of non-adjacent numbers. The function should return the sum. For instance, consider the array [2, 4, 6, 2, 5]. The largest sum of non-adjacent numbers would be 13 (4 + 6 + 2 + 1). Your implementation should have the following signature: ```python def largest_non_adjacent_sum(nums: List[int]) -> int: pass ``` **Constraints:** - You can assume the input array will have at least one number. - The array can contain both positive and negative numbers. - The sum for an empty array or an array with only one element will be 0 or the element itself, respectively.","solution":"from typing import List def largest_non_adjacent_sum(nums: List[int]) -> int: if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) # Initialize two variables to store the maximum sum inclusive and exclusive of the current element inclusive = 0 exclusive = 0 for num in nums: # Current max excluding num new_exclusive = max(inclusive, exclusive) # Current max including num inclusive = exclusive + num exclusive = new_exclusive # Return the maximum of including and excluding the last element return max(inclusive, exclusive)"},{"question":"John has recently started working with a collection of unique strings and he is fascinated by their lexicographic properties. He decided to create a game where he is provided with a collection of strings and his goal is to find the lexicographically smallest string after a series of operations. John can perform the following operation any number of times: select any string from the collection and reverse its characters. Given a collection of unique strings, determine the lexicographically smallest string he can achieve after performing any number of reverse operations. The first line contains one integer `t` (1 le t le 10^3) — the number of test cases. Each of the next `2*t` lines contains input for each test case. For each test case, the first line contains one integer `n` (1 le n le 100) — the number of strings in the collection. The second line of each test case contains `n` strings separated by a space. Each string consists of lowercase English letters and has a length between `1` and `100`. Output the lexicographically smallest string for each test case after performing any number of reverse operations. # Example Input ``` 3 3 abc def ghi 2 pqr st 4 a bc defghi jk ``` Output ``` cba pqr a ``` # Explanation For the first test case, reversing the string \\"abc\\" to get \\"cba\\" results in the smallest lexicographic string compared to the others (\\"fed\\" and \\"ihg\\"). For the second test case, the input strings are \\"pqr\\" and \\"st\\". \\"pqr\\" is already lexicographically smaller than \\"ts\\". For the third test case, the input strings are \\"a\\", \\"bc\\", \\"defghi\\", and \\"jk\\". The string \\"a\\" is already the smallest lexicographically.","solution":"def lexicographically_smallest_string(test_cases): results = [] for case in test_cases: n, strings = case smallest_string = min(min(s, s[::-1]) for s in strings) results.append(smallest_string) return results"},{"question":"You are given a string consisting of lower case Latin letters. Determine the frequency of each character in the string and print them in alphabetical order. The input contains one string (1 ≤ length of string ≤ 100), made up of only lower case Latin letters. Output each unique character from the string followed by its frequency. Printing of characters should be done in alphabetical order. Each character and its frequency should be in a separate line.","solution":"def char_frequency(s): Returns a dictionary with characters as keys and their frequency as values, sorted alphabetically. from collections import Counter frequency = Counter(s) sorted_frequency = {char: frequency[char] for char in sorted(frequency)} return sorted_frequency"},{"question":"Given a list of integers, determine if there is a pair of adjacent elements in the list whose sum is a prime number. If such a pair exists, print the indices of the first pair (1-based). If no such pair exists, print -1. Input: The input consists of two lines. The first line contains an integer n (2 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output: Output the indices of the first pair of adjacent elements whose sum is a prime number. If no such pair exists, output -1. Example: Input: 5 3 5 8 13 21 Output: 2 Explanation: The sum of the elements at indices 1 and 2 (3+5) is 8, which is not a prime number. The sum of the elements at indices 2 and 3 (5+8) is 13, which is a prime number. Therefore, the output is 2.","solution":"import math def is_prime(number): Determine if a given number is a prime number. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def find_adjacent_prime_sum_indices(n, a): Find the indices of the first pair of adjacent elements whose sum is a prime number. If no such pair exists, return -1. for i in range(n - 1): if is_prime(a[i] + a[i + 1]): return i + 1 return -1"},{"question":"You are organizing a programming contest and you need to create an efficient ranking system. Each contestant submits several solutions to different problems, and you want to rank the contestants based on their best submissions for each problem. Each contestant is identified by their respective id (a unique integer). For each problem solved by a contestant, they receive a score between 0 and 100 inclusively. If a contestant attempts multiple solutions for a problem, only the best score they achieved for that problem is considered. Given the contest submissions, you need to compute the final scores for each contestant. The final score for a contestant is defined as the sum of their best scores across all problems they have attempted. Input: - The first line contains two integers N and M (1 ≤ N ≤ 100,000, 1 ≤ M ≤ 100), where N is the number of submissions, and M is the total number of different problems. - The next N lines each contain three integers: contestant_id, problem_id, and score (0 ≤ score ≤ 100). Output: - Print the final scores for all contestants, sorted by their contestant_id in ascending order. Example: Input: ``` 7 3 1 1 75 2 2 90 1 2 80 2 1 60 1 1 90 1 3 40 2 2 85 ``` Output: ``` 1 210 2 150 ``` Explanation: - Contestant 1 has three submissions: scores 75, 80, and 90 for problem 1; 80 for problem 2; and 40 for problem 3. Their final score is 90 (best score for problem 1) + 80 (best score for problem 2) + 40 (best score for problem 3) = 210. - Contestant 2 has three submissions: scores 90 and 85 for problem 2 and 60 for problem 1. Their final score is 60 (best score for problem 1) + 90 (best score for problem 2) = 150.","solution":"def calculate_final_scores(submissions, N, M): from collections import defaultdict # Dictionary to store contestant\'s best scores for each problem best_scores = defaultdict(lambda: defaultdict(int)) for submission in submissions: contestant_id, problem_id, score = submission if score > best_scores[contestant_id][problem_id]: best_scores[contestant_id][problem_id] = score final_scores = {} for contestant_id in best_scores: final_scores[contestant_id] = sum(best_scores[contestant_id].values()) sorted_results = sorted(final_scores.items()) return sorted_results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine if there exists a non-empty substring that appears at least twice in the string such that the two occurrences do not overlap. For example, for the string \\"abca\\", the substring \\"a\\" appears twice and does not overlap. The first line contains a positive integer t (1 leq t leq 1000 ) — number of test cases in the test. Then t test cases follow. For each test case, the first line contains an integer n (1 leq n leq 200) — length of the string. The next line contains the string of length n consisting of lowercase English letters. Output \\"YES\\" if there exists such a substring, otherwise output \\"NO\\". You may print every letter of \\"YES\\" and \\"NO\\" in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers). Example: ``` Input 3 7 abcaabc 4 abcd 5 abcda Output YES NO YES ```","solution":"def has_non_overlapping_substring(s): Determines if there exists a non-empty substring that appears at least twice without overlapping. n = len(s) for length in range(1, n): seen_substrings = set() for i in range(n - length + 1): substring = s[i:i + length] if substring in seen_substrings: return \\"YES\\" seen_substrings.add(substring) return \\"NO\\" def determine_substring_existence(test_cases): results = [] for n, s in test_cases: results.append(has_non_overlapping_substring(s)) return results"},{"question":"You are given an array of integers of size `n`. You are required to partition the array into two non-empty segments such that the sum of elements in the first segment is as close as possible to the sum of elements in the second segment. You need to output the minimum absolute difference between the sums of the two segments. The first line of the input contains an integer `t` (`1 ≤ t ≤ 100`), the number of test cases. For each test case: - The first line contains a single integer `n` (`2 ≤ n ≤ 1000`) — the number of elements in the array. - The second line contains `n` integers, representing the elements of the array. For each test case, output a single line containing the minimum absolute difference between the sums of the two segments. **Example:** ``` Input: 3 4 1 3 2 4 5 10 20 30 40 50 6 5 5 5 5 5 5 Output: 0 10 0 ``` **Explanation:** - For the first test case, partitioning the array [1, 3, 2, 4] as [1, 3] and [2, 4] will result in sums 4 and 6, respectively, having an absolute difference of 2. - For the second test case, partitioning the array [10, 20, 30, 40, 50] as [10, 20, 30] and [40, 50] will result in sums 60 and 90, respectively, having an absolute difference of 30. - For the third test case, partitioning the array [5, 5, 5, 5, 5, 5] as [5, 5, 5] and [5, 5, 5] or any other balanced partition will result in sums 15 and 15, respectively, having an absolute difference of 0.","solution":"def min_abs_diff_partition(arr): Finds the minimum absolute difference between sums of two partitions of the array. total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum//2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n+1): for j in range(total_sum//2 + 1): if dp[i-1][j]: dp[i][j] = True if j >= arr[i-1] and dp[i-1][j-arr[i-1]]: dp[i][j] = True for j in range(total_sum//2, -1, -1): if dp[n][j]: first_partition_sum = j second_partition_sum = total_sum - j return abs(first_partition_sum - second_partition_sum) def solve(t, test_cases): Solves the problem for multiple test cases. results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(min_abs_diff_partition(arr)) return results"},{"question":"Write a function that takes an integer array and a target integer value, and finds all unique pairs of integers in the array that sum up to the target value. Each pair should be returned as a tuple, and the output should be a list of tuples. The pairs should be listed in ascending order based on the first element of each pair, and in case of a tie, based on the second element of the pair. For example, given the array `arr = [1, 2, 3, 4, 3, 5]` and the target `target = 6`, the output should be `[(1, 5), (2, 4), (3, 3)]`. Your solution should be efficient, ideally with a linear time complexity. You can assume that the input array does not contain duplicate elements. The function signature should be as follows: ```python def find_pairs(arr: List[int], target: int) -> List[Tuple[int, int]]: pass ``` # Example 1 ```python arr = [1, 2, 3, 4, 5] target = 6 find_pairs(arr, target) ``` Output: ``` [(1, 5), (2, 4)] ``` # Example 2 ```python arr = [-1, 0, 1, 2, -1, -4] target = -1 find_pairs(arr, target) ``` Output: ``` [(-4, 3), (-1, 0)] ``` # Example 3 ```python arr = [10, 8, -3, 1] target = 7 find_pairs(arr, target) ``` Output: ``` [(-3, 10)] ```","solution":"from typing import List, Tuple def find_pairs(arr: List[int], target: int) -> List[Tuple[int, int]]: seen = {} pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen[number] = True return sorted(list(pairs))"},{"question":"Consider an undirected graph with n nodes and m edges. The graph is unweighted and there are no self-loops or multiple edges between any pair of nodes. You are given q queries, each query asks to determine the maximum distance between any two nodes in a given subgraph induced by a subset of nodes. You need to process the queries efficiently. For each query, you are given a set of nodes, and you need to output the maximum distance between any pair of nodes in the subgraph induced by this set of nodes. If the subgraph is disconnected, return `-1` for that query. Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). Description of the test cases follows. The first line of each test case contains two integers n (2 leq n leq 100), and m (1 leq m leq 4950) — the number of nodes and edges in the graph. Then m lines follow, each containing two integers u and v (1 leq u, v leq n) indicating an undirected edge between nodes u and v. The next line contains one integer q (1 leq q leq 100) — the number of queries. Each of the next q lines contains an integer k followed by k integers, specifying the nodes in the subset for that query. # Input: * Multiple test cases * For each test case: * Two integers n and m * m lines with two integers u and v * One integer q * q queries, each consists of an integer k followed by k integers # Output: For each query, output the maximum distance in the induced subgraph or `-1` if the subgraph is disconnected. # Example: ```plaintext 1 5 6 1 2 1 3 2 4 2 5 3 4 3 5 3 3 2 3 4 4 1 2 4 5 2 1 5 ``` # Output: ```plaintext 2 2 -1 ``` # Notes: For the first query, the subgraph induced by nodes {2, 3, 4} is a connected triangle with maximum distance 2. For the second query, the subgraph induced by nodes {1, 2, 4, 5} is also connected, and the maximum distance is 2. For the third query, the subgraph induced by nodes {1, 5} is disconnected, thus the output is `-1`.","solution":"from collections import deque def find_max_distance(subgraph, nodes): if len(nodes) == 1: return 0 max_distance = -1 for start in nodes: distances = {node: float(\'inf\') for node in nodes} distances[start] = 0 queue = deque([start]) while queue: current = queue.popleft() for neighbor in subgraph[current]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = distances[current] + 1 queue.append(neighbor) if float(\'inf\') in distances.values(): return -1 max_distance = max(max_distance, max(distances.values())) return max_distance def process_queries(n, edges, queries): graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) results = [] for query in queries: k = query[0] sub_nodes = query[1:] subgraph = {node: [] for node in sub_nodes} for node in sub_nodes: for neighbor in graph[node]: if neighbor in sub_nodes: subgraph[node].append(neighbor) result = find_max_distance(subgraph, sub_nodes) results.append(result) return results def main(input_text): data = input_text.split(\\"n\\") t = int(data[0]) index = 1 results = [] for _ in range(t): n, m = map(int, data[index].split()) index += 1 edges = [] for _ in range(m): u, v = map(int, data[index].split()) edges.append((u, v)) index += 1 q = int(data[index]) index += 1 queries = [] for _ in range(q): query = list(map(int, data[index].split())) queries.append(query) index += 1 results.append(process_queries(n, edges, queries)) for result in results: for value in result: print(value)"},{"question":"Alice is developing a new game that involves navigating through a grid, and she needs to test an algorithm to find the shortest path on the grid. The grid is represented by a matrix of integers where each cell contains a non-negative value which represents the cost to traverse that cell. Alice starts at the top-left cell (0, 0) and needs to reach the bottom-right cell (n-1, m-1). She can move to the cells directly to the right, directly to the left, directly above, or directly below her current cell. The path cost is the sum of the values of the cells she traverses, including the starting and the destination cells. Your task is to help Alice by writing a function that computes the minimum path cost needed to go from the top-left cell to the bottom-right cell. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 50), representing the dimensions of the grid. - The next n lines each contain m integers, where the j-th integer in the i-th line represents the cost of the cell (i, j) (0 ≤ cost ≤ 100). Output: - Print a single integer, the minimum path cost to travel from the top-left cell to the bottom-right cell. Examples: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Input: 2 2 1 2 1 1 Output: 3","solution":"import heapq def min_path_cost(n, m, grid): Returns the minimum path cost to travel from the top-left cell to the bottom-right cell of the grid. directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * m for _ in range(n)] min_heap = [(grid[0][0], 0, 0)] visited[0][0] = True while min_heap: cost, x, y = heapq.heappop(min_heap) if x == n - 1 and y == m - 1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: visited[nx][ny] = True heapq.heappush(min_heap, (cost + grid[nx][ny], nx, ny)) # Example usage: # n, m = 3, 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_path_cost(n, m, grid)) # Output: 7"},{"question":"Given a string `s` consisting of only characters \'a\' and \'b\', we want to convert it into a string composed entirely of one of these characters (\'a\' or \'b\') by performing some operations. In one operation, you can either: 1. Insert a character at any position 2. Delete a character 3. Replace one character with the other Write a program to compute the minimum number of operations required to transform the given string into a string composed of entirely one character. # Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 1000). # Output Output a single integer — the minimum number of operations required. # Example Input ababb Output 2 Explanation One way to transform `s` into a string of \'b\'s with 2 operations: - Replace the first \'a\' with \'b\' → `bbabb` - Replace the third \'a\' with \'b\' → `bbbbb` Another way to achieve the same with a string of \'a\'s: - Replace the second \'b\' with \'a\' → `aaaab` - Replace the fourth \'b\' with \'a\' → `aaaaa` In either case, the minimum number of operations required is 2.","solution":"def min_operations_to_unify_string(s): Returns the minimum number of operations required to convert string `s` to a string composed entirely of one character (\'a\' or \'b\'). count_a = s.count(\'a\') count_b = s.count(\'b\') return min(count_a, count_b)"},{"question":"You are given a string consisting of lowercase letters and a list of queries. Each query contains two integers `l` and `r` representing a substring from index `l` to `r` (inclusive, 0-based index). For each query, you need to determine the frequency of each character in the specified substring and return the character that appears the most. If there is a tie, return the lexicographically smallest character. Write a function `substring_frequencies` that processes the string and the list of queries, and returns a list of results for each query. # Input - The first line contains a single string `s` of length `n` (1 leq n leq 10^5) consisting of lowercase English letters. - The second line contains an integer `q` (1 leq q leq 10^4), the number of queries. - The next `q` lines each contain two integers `l` and `r` (0 leq l leq r < n), representing the start and end indices of the substring. # Output For each query, return the character that appears the most in the specified substring. If there is a tie, return the lexicographically smallest one. # Example Input ``` abacabadabacaba 3 0 3 2 8 5 14 ``` Output ``` a a a ``` # Note In the first query, the substring is \\"abac\\" where \'a\' appears twice and \'b\' and \'c\' appear once each. The most frequent (and lexicographically smallest) character is \'a\'. In the second query, the substring is \\"acabadab\\" where \'a\' appears three times, \'b\' appears twice, and \'c\' and \'d\' appear once each. The most frequent (and lexicographically smallest) character is \'a\'. In the third query, the substring is \\"adabacaba\\" where \'a\' appears four times, \'b\' appears twice, \'c\' and \'d\' appear once each. The most frequent (and lexicographically smallest) character is \'a\'.","solution":"from collections import Counter def substring_frequencies(s, queries): Returns the character that appears the most in the specified substrings, or the lexicographically smallest character in case of a tie. Args: s (str): The input string. queries (list of tuples): Each tuple contains two integers, l and r, indicating the substring. Returns: list of str: The most frequent character for each query. result = [] for l, r in queries: substring = s[l:r+1] counter = Counter(substring) most_common_char = min(counter.items(), key=lambda x: (-x[1], x[0])) result.append(most_common_char[0]) return result"},{"question":"Oliver loves baking and has a unique way to prepare his dough. He starts with an initial quantity of flour and repeatedly adds some additional flour every hour. However, Oliver also needs to maintain a certain temperature consistency for his dough. Each hour, he can either add some quantity of flour, adjust the temperature by increasing or decreasing it, or simply let the dough rest. Each operation takes exactly one hour. The changes made should ensure that the dough\'s temperature remains within a specific range, and the flour content does not exceed a maximum limit. You are given a series of queries, where each query provides the initial state of the dough, the desired state after a certain number of hours, and the constraints on flour and temperature. Help Oliver by determining if it is possible to achieve the desired dough state in the given number of hours. For each query, you need to determine if it\'s possible to reach the target state from the initial state within the specified number of hours under the given constraints. The first line contains one integer q (1 le q le 10^5) – the number of queries. Each query consists of seven integers: - Initial quantity of flour f_0 (1 le f_0 le 10^9) - Initial temperature t_0 (-1000 le t_0 le 1000) - Desired quantity of flour f_d (1 le f_d le 10^9) - Desired temperature t_d (-1000 le t_d le 1000) - Number of hours h (1 le h le 10^9) - Maximum flour limit F (f_0 le F le 10^9) - Temperature range [T_{min}, T_{max}] (-1000 le T_{min} < T_{max} le 1000) Each operation within an hour can be: - Add \'x\' units of flour (even if \'x\' is 0) such that the total flour does not exceed F - Adjust the temperature by \'y\' degrees within the range [T_{min}, T_{max}] For each query, print \\"YES\\" if it\'s possible to achieve the desired state within the given hours, otherwise print \\"NO\\".","solution":"def can_prepare_dough(f0, t0, fd, td, h, F, Tmin, Tmax): Determines if it\'s possible to prepare the dough to the desired state within the given constraints. Parameters: f0 (int): Initial quantity of flour t0 (int): Initial temperature fd (int): Desired quantity of flour td (int): Desired temperature h (int): Number of hours available F (int): Maximum flour limit Tmin (int): Minimum temperature limit Tmax (int): Maximum temperature limit Returns: str: \'YES\' if it\'s possible to achieve the desired state within the given hours, \'NO\' otherwise # Calculating the required changes in flour and temperature flour_needed = fd - f0 temp_needed = td - t0 # Check if the desired flour quantity is under the maximum limit if fd > F: return \\"NO\\" # Check if desired temperature is within the allowed range if td < Tmin or td > Tmax: return \\"NO\\" # Check if the sum of changes needed is within the allowed hours if abs(flour_needed) + abs(temp_needed) > h: return \\"NO\\" # If both checks above are satisfied, then it\'s possible to achieve the desired state return \\"YES\\" # Function to process multiple queries def process_queries(queries): results = [] for query in queries: result = can_prepare_dough(*query) results.append(result) return results"},{"question":"You are given a board of size n x m. Each cell of the board can be either empty (represented by \'.\') or blocked (represented by \'#\'). You are also given the starting position (start_x, start_y) and the ending position (end_x, end_y) on the board. You need to determine the minimum number of moves required for a knight (as in chess) to move from the starting position to the ending position. The knight can only move in the \\"L\\" shaped way that it does in chess (i.e., it can move to a cell that is two squares away horizontally and one square vertically, or two squares vertically and one square horizontally). The board has the following constraints: - 1 ≤ n, m ≤ 1000 - 1 ≤ start_x, start_y, end_x, end_y ≤ n, m - The starting and ending positions are always empty cells. - There may be any number of blocked cells. Output the minimum number of moves required for the knight to move from the starting position to the ending position. If it\'s not possible, output -1. # Input: - The first line contains two integers n and m - the dimensions of the board. - The next n lines each contain a string of length m consisting of the characters \'.\' and \'#\'. - The next line contains two integers start_x and start_y - the starting position of the knight. - The last line contains two integers end_x and end_y - the ending position of the knight. # Output: - Output a single integer - the minimum number of moves required, or -1 if it\'s not possible. # Example: Input: 6 6 . . . # . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . 1 1 6 6 Output: 4 (Note: The input board is represented here with spaces for readability, real input will not contain spaces between characters)","solution":"from collections import deque def min_knight_moves(n, m, board, start_x, start_y, end_x, end_y): Determine the minimum number of moves required for a knight to move from the starting position to the ending position on a given board. Args: n: int - number of rows in the board. m: int - number of columns in the board. board: List[List[str]] - the board with \'.\' for empty and \'#\' for blocked. start_x: int - starting x position of the knight (1-indexed). start_y: int - starting y position of the knight (1-indexed). end_x: int - ending x position of the knight (1-indexed). end_y: int - ending y position of the knight (1-indexed). Returns: int: Minimum number of moves required, or -1 if it\'s not possible. start_x -= 1 start_y -= 1 end_x -= 1 end_y -= 1 moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(start_x, start_y, 0)]) # Mark starting point as visited visited[start_x][start_y] = True while queue: x, y, steps = queue.popleft() if (x, y) == (end_x, end_y): return steps for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and board[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a grid of size `m x n` representing a field where each cell is either a `0` (empty) or `1` (has a tree). Your task is to calculate the number of distinct clusters of trees in the field. A cluster of trees is formed by horizontally, vertically, or diagonally adjacent `1`s. Write a function `num_clusters` that takes in a two-dimensional list representing the grid and returns the number of distinct clusters of trees. # Input: - A two-dimensional list of integers representing the grid (Field). - `0 <= m, n <= 100` - Each element in the list is either `0` or `1`. # Output: - An integer representing the number of distinct clusters of trees. # Example: ```python def num_clusters(grid: List[List[int]]) -> int: # Your code here # Example usage grid = [ [1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1] ] print(num_clusters(grid)) # Output should be 5 ``` # Note: - Use appropriate methods like DFS or BFS to explore and mark clusters. - Ensure you handle edge cases, such as an empty grid or a grid with all zeros.","solution":"from typing import List def num_clusters(grid: List[List[int]]) -> int: def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 # mark the cell as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]: dfs(x + dx, y + dy) if not grid: return 0 cluster_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: cluster_count += 1 dfs(i, j) return cluster_count"},{"question":"Given an integer array `arr` of length `n`, Dreamoon wants to find the maximum possible sum of any contiguous subarray of `arr` where the length of the subarray is at most `k` (1 ≤ k ≤ n). The sum of any contiguous subarray should be non-negative. If all possible subarrays have a negative sum, then the result should be 0. Write a program to help Dreamoon find this maximum sum. Your implementation should be efficient enough to handle large arrays within a reasonable time limit. **Input:** - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5) — the length of the array and the maximum length of the subarray, respectively. - The second line contains `n` integers representing the elements of the array `arr` (-10^4 ≤ arr[i] ≤ 10^4). **Output:** - Print a single integer representing the maximum possible sum of any contiguous subarray of length at most `k`. **Example:** Input: ``` 5 3 -1 2 3 -5 4 ``` Output: ``` 5 ``` Explanation: The possible subarrays of length at most 3 are: `[-1]`, `[2]`, `[3]`, `[-5]`, `[4]`, `[-1, 2]`, `[2, 3]`, `[3, -5]`, `[-5, 4]`, `[-1, 2, 3]`, `[2, 3, -5]`, `[3, -5, 4]`. The maximum sum of these subarrays is 5, which comes from the subarray `[2, 3]`.","solution":"def max_sum_subarray(n, k, arr): Given an integer array `arr`, find the maximum possible sum of any contiguous subarray of length at most `k` where the sum should be non-negative. If all possible subarrays have a negative sum, the result should be 0. :param n: int - Length of the array :param k: int - Maximum length of subarray :param arr: List[int] - The array of integers :return: int - The maximum possible sum of any contiguous subarray of length at most `k` # Initialize the maximum sum to 0 (since sums should be non-negative) max_sum = 0 # Variable to store the current sum of the window curr_sum = 0 # Slide the window for lengths from 1 to k for length in range(1, k + 1): # First compute the sum of the initial window of the given length curr_sum = sum(arr[:length]) # Update the max sum if the current sum is greater max_sum = max(max_sum, curr_sum) # Slide the window across the array for i in range(length, n): curr_sum += arr[i] - arr[i - length] # Update the max sum if the current sum is greater max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"A tree is a connected acyclic graph consisting of `n` nodes labeled from `1` to `n`. The nodes are connected by `n-1` edges. Given such a tree, your task is to determine the distance between the two farthest nodes in the tree. The first line of the input contains an integer `n` (2 ≤ n ≤ 1000) — the number of nodes in the tree. The following `n-1` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating an edge between node `u` and node `v`. Output a single integer, the distance between the two farthest nodes in the tree. For example, if the tree is as follows: ``` 5 1 2 1 3 2 4 2 5 ``` The output would be `3`, as the farthest distance is between node `4` and node `3`. Explanation: The longest path in this tree goes from node `4` to node `3` through the nodes `2` and `1`, making the distance `3`.","solution":"from collections import deque, defaultdict def find_farthest_node(start, n, graph): visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current_node, distance) visited[start] = True farthest_node = start max_distance = 0 while queue: current_node, distance = queue.popleft() for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) if distance + 1 > max_distance: max_distance = distance + 1 farthest_node = neighbor return farthest_node, max_distance def tree_diameter(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Find the farthest node from node 1 first_node, _ = find_farthest_node(1, n, graph) # Find the farthest node from first_node second_node, diameter = find_farthest_node(first_node, n, graph) return diameter def solve(n, edge_list): return tree_diameter(n, edge_list)"},{"question":"Вам дано целое положительное число n. Ваша задача — найти число различных способов разложить число n на несколько положительных слагаемых, таких, что каждое слагаемое является точной степенью единицы. Каждое разложение должно учитывать порядок слагаемых. Разложение считается уникальным, если последовательности слагаемых различны, независимо от их перестановки. Например, для n = 4, допустимыми будут следующие разложения: - 1+1+1+1 - 1+1+2 - 2+1+1 - 1+2+1 - 1+3 - 3+1 - 2+2 Обратите внимание, что разложения \\"1+1+2\\" и \\"2+1+1\\" считаются различными, потому что порядок слагаемых важен. Input Единственное целое число n (1 ≤ n ≤ 100). Output Одно целое число — количество различных способов разложить n на положительные слагаемые, такие что каждое слагаемое является точной степенью единицы. Example # Input 4 # Output 7","solution":"def count_partitions(n): Returns the number of different ways to partition the integer n into sums where each summand is an exact power of one. # To count the partitions, we can return the value of 2 power (n-1). return 2 ** (n - 1)"},{"question":"Vlad and his friends love playing a game called \\"Lucky Pairs\\". While playing this game, they have discovered an interesting problem. Vlad has an array of integers, and his goal is to count the number of \\"lucky\\" pairs (i, j) in this array such that: 1. 1 ≤ i < j ≤ n 2. a[i] + a[j] is divisible by a given number k Given an array of integers [a1, a2, ..., an] and a number k, can you help Vlad count the number of lucky pairs? The first line of the input contains a single integer n (1 ≤ n ≤ 200000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains a single integer k (1 ≤ k ≤ 1000) — the divisor. Output a single integer — the number of lucky pairs in the array. **Example:** Input: ``` 5 1 2 3 4 5 3 ``` Output: ``` 4 ``` In this example, the lucky pairs are (1, 2), (1, 5), (2, 4), and (3, 6) because their sums are divisible by 3.","solution":"def count_lucky_pairs(n, array, k): Counts the number of lucky pairs (i, j) in the array such that: 1 ≤ i < j ≤ n and a[i] + a[j] is divisible by k. Parameters: n (int): The number of elements in the array. array (list of int): The elements of the array. k (int): The divisor. Returns: int: The number of lucky pairs. remainders = [0] * k count_pairs = 0 for num in array: remainder = num % k complement = (k - remainder) % k count_pairs += remainders[complement] remainders[remainder] += 1 return count_pairs"},{"question":"You are given a long sidewalk, represented as an array of n elements, where each element represents a tile on the sidewalk. Each tile can be either in a clean state (0) or a dirty state (1). There is a robot that can move along the sidewalk to clean it. The robot has a limited number of moves, represented by m. In each move, the robot can choose any position on the sidewalk and clean that tile (changing its state from 1 to 0). Your task is to determine the maximum length of the contiguous segment of clean tiles that you can achieve after using the robot for at most m moves. # Input The first line contains two integers n, the number of tiles on the sidewalk, and m, the maximum number of moves the robot can make (1 le n le 100,000, 0 le m le n). The second line contains n integers, each being either 0 or 1, representing the initial states of the tiles on the sidewalk. # Output Output a single integer, the maximum length of the contiguous segment of clean tiles that can be achieved after making at most m moves. # Example Input ``` 10 2 1 0 0 1 0 1 0 1 1 0 ``` Output ``` 6 ``` # Note In the example, the maximum length of a contiguous segment of clean tiles that can be achieved is 6. The robot can clean the tiles at positions 4 and 7, resulting in the segment `0 0 0 0 1 0 1 1 0`, which has a contiguous segment of clean tiles from index 2 to index 7.","solution":"def max_clean_segment(n, m, tiles): left = 0 max_length = 0 dirty_count = 0 for right in range(n): if tiles[right] == 1: dirty_count += 1 while dirty_count > m: if tiles[left] == 1: dirty_count -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a small rural village, there are a number of households that rely on rainwater harvesting for their daily water needs. Each household has a tank with a certain capacity. When it rains, water is collected in these tanks. Once a tank is full, any additional rainwater is wasted. You are given: - an integer `t` (1 ≤ t ≤ 100) representing the number of test cases. - for each test case, two integers `n` and `d` (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000), where `n` is the number of households in that test case and `d` is the amount of rainfall in liters. - a sequence of n integers c1, c2, ..., cn (1 ≤ ci ≤ 100), where ci represents the capacity of the i-th household’s tank in liters. Your task is to determine the total amount of water wasted after the rainfall for each test case. The input consists of: - The integer `t`. - For each test case: - Two integers `n` and `d`. - A sequence of n integers representing the capacities of each household\'s tank. Output: For each test case, print a single integer representing the total amount of water wasted after the rainfall. Example: Input: ``` 2 3 15 5 3 6 4 10 2 4 3 1 ``` Output: ``` 1 0 ``` Explanation: In the first test case, the total tank capacity is 14 liters (5 + 3 + 6). After 15 liters of rainfall, there is 1 liter of water wasted. In the second test case, the total tank capacity is 10 liters (2 + 4 + 3 + 1). After 10 liters of rainfall, no water is wasted.","solution":"def calculate_water_wasted(t, test_cases): results = [] for i in range(t): n, d, capacities = test_cases[i] total_capacity = sum(capacities) wasted_water = max(0, d - total_capacity) results.append(wasted_water) return results"},{"question":"You are given a grid n times n (where 1 leq n leq 1000). The grid contains non-negative integers. Let\'s call a cell a \\"peak\\" if it has a higher value than all its adjacent cells (top, bottom, left, and right). Cells at the boundary of the grid are considered to have adjacent cells only within the grid. Count the number of peak cells in the grid. The input consists of: 1. An integer n — the size of the grid. 2. n lines containing n integers each, representing the grid. Output a single integer, the count of peak cells in the grid. # Example Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 1 ``` Explanation: In the given grid, only the cell with value `9` (located at (2, 2) with 0-indexed coordinates) is a peak. Therefore, the output is `1`.","solution":"def count_peak_cells(grid): Count the number of peak cells in an n x n grid. A peak cell is a cell that has higher value than all its adjacent cells (top, bottom, left, and right). Parameters: grid (list of list of int): n x n grid containing non-negative integers. Returns: int: Number of peak cells in the grid. def is_peak(x, y): val = grid[x][y] # Check the adjacent cells (top, bottom, left, right) if x > 0 and grid[x-1][y] >= val: return False if x < n - 1 and grid[x+1][y] >= val: return False if y > 0 and grid[x][y-1] >= val: return False if y < n - 1 and grid[x][y+1] >= val: return False return True n = len(grid) peak_count = 0 for i in range(n): for j in range(n): if is_peak(i, j): peak_count += 1 return peak_count"},{"question":"In a village, there are n houses aligned in a straight line. Each house has a particular amount of food stored. Anna, who lives in the village, likes to collect food from these houses. However, she cannot collect food from two consecutive houses because she doesn\'t want to alert the villagers of her actions. Anna wants to maximize the amount of food she can collect in one night. Given an array nums where nums[i] represents the amount of food in the ith house, write a function that returns the maximum amount of food Anna can collect. Input - The first line consists of a single integer n, where 1 ≤ n ≤ 100. - The second line contains n integers representing the amount of food in each house. Each amount of food is a non-negative integer and does not exceed 10,000. Output - Output a single integer which is the maximum amount of food Anna can collect. # Examples Example 1 - Input ``` 4 1 2 3 1 ``` - Output ``` 4 ``` Example 2 - Input ``` 5 2 7 9 3 1 ``` - Output ``` 12 ``` Note In the first example, Anna can collect food from the first and third house (1 + 3 = 4). In the second example, Anna can collect food from the second, and the fourth house (7 + 5 = 12).","solution":"def max_food(nums): Given a list of integers nums where nums[i] represents the amount of food in the ith house, returns the maximum amount of food Anna can collect without collecting from two consecutive houses. if not nums: return 0 n = len(nums) if n == 1: return nums[0] # Initialize the dp array to store the maximum food collected until each house dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) return dp[-1]"},{"question":"You are given an integer array a_1, a_2, dots, a_n. For each subarray a[l dots r], you can reverse the order of the elements exactly once. You need to determine whether it is possible to sort the array a in non-decreasing order by reversing any subarray any number of times. The first line contains one integer t (1 le t le 10) — the number of test cases. The first line of each test case contains one integer n (1 le n le 2cdot 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Output \\"YES\\" (in any letter case) if it is possible to sort the array using the described operations, and \\"NO\\" (in any letter case) otherwise. # Example Input: ``` 2 5 2 1 3 4 5 4 3 2 4 1 ``` Output: ``` YES NO ``` # Explanation In the first test case, you can reverse the first two elements to obtain the sorted array [1, 2, 3, 4, 5]. In the second test case, no sequence of reversals can sort the array.","solution":"def can_sort_by_reversing(n, arr): sorted_arr = sorted(arr) if sorted_arr == arr: return \\"YES\\" # Find the first element where arr and sorted_arr differ l = next(i for i in range(n) if arr[i] != sorted_arr[i]) # Find the last element where arr and sorted_arr differ r = next(i for i in range(n-1, -1, -1) if arr[i] != sorted_arr[i]) # Reverse the subarray arr[l:r+1] arr[l:r+1] = arr[l:r+1][::-1] if arr == sorted_arr: return \\"YES\\" else: return \\"NO\\" def can_sort_multiple_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(can_sort_by_reversing(n, arr)) return results"},{"question":"You are organizing a meetup event where you plan to distribute goodies to attendees. Every attendee is identified by a unique ID from 1 to n. You have a list of attendees, each represented by their respective arrival times. Due to limited stock and a desire for fairness, you decide to distribute goodies in such a way that no attendee receives more than one goodie if there is still someone left without one. You need to determine for each attendee the maximum possible number of goodies they can receive. The total number of attendees is given by t, and for each attendee, you need to provide the maximum number of goodies they can individually receive based on the condition provided. The first line contains one integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains one integer n (1 le n le 500) — the number of attendees. The next line contains n integers a_1, a_2, dots, a_n (1 le a_i le 500), where a_i represents the arrival time of the ith attendee. For each test case, output n integers where the ith integer denotes the maximum possible number of goodies the ith attendee can receive. Example: Input: 3 5 1 2 3 4 5 4 4 3 2 1 6 6 5 4 3 2 1 Output: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 In the first test case, all attendees can receive only one goodie due to the condition that no attendee receives more than one if someone else is left without. In the second test case, similarly, each attendee receives one goodie. The same applies to the third test case.","solution":"def max_goodies_distribution(t, test_cases): Given the number of test cases and for each test case the number of attendees and their arrival times, this function returns the maximum number of goodies each attendee can receive. results = [] for i in range(t): n = test_cases[i][0] arrival_times = test_cases[i][1] results.append([1] * n) return results"},{"question":"Lena enjoys solving puzzles, and one of her favorite types involves finding the \\"hidden patterns\\" within arrays. She recently came across a problem where she needs to identify the longest contiguous subarray that forms an arithmetic sequence. An arithmetic sequence, as you know, has a common difference between consecutive elements. Given an array of integers, Lena wants you to help her find the length of that longest contiguous subarray. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output: - Print a single integer representing the length of the longest contiguous subarray that forms an arithmetic sequence. Example: Input: 6 10 7 4 6 8 10 Output: 4 Explanation: The longest contiguous subarray that forms an arithmetic sequence is [4, 6, 8, 10], which has a common difference of 2. Thus, the length is 4.","solution":"def longest_arithmetic_subarray(n, arr): Finds the length of the longest contiguous subarray that forms an arithmetic sequence. if n <= 1: return n max_len = 1 curr_len = 1 common_diff = None for i in range(1, n): # Calculate the common difference for the current subarray diff = arr[i] - arr[i - 1] if common_diff is None or diff == common_diff: curr_len += 1 else: # Update max length if current length is greater max_len = max(max_len, curr_len) curr_len = 2 common_diff = diff # final check in case the longest subarray ends at the last element max_len = max(max_len, curr_len) return max_len"},{"question":"You are given an integer array `nums` of length `n` (1 le n le 100). Your task is to rearrange the elements of the array such that all the negative numbers appear before all the positive numbers, while maintaining their original relative order in each segment. Write a function `rearrange_numbers(nums: List[int]) -> List[int]` that takes the array as input and returns a new array with the required arrangement. # Example ```python >>> rearrange_numbers([1, -2, 3, -4, 5]) [-2, -4, 1, 3, 5] >>> rearrange_numbers([-1, 2, -3, 4, -5]) [-1, -3, -5, 2, 4] >>> rearrange_numbers([1, 2, 3, 4, 5]) [1, 2, 3, 4, 5] >>> rearrange_numbers([-1, -2, -3, -4, -5]) [-1, -2, -3, -4, -5] ``` # Constraints - The input array contains integers which can be zero, positive, or negative. - You should not use any additional data structures beyond basic variables (i.e., the output should utilize constant extra space, apart from the input and output arrays). # Implementation Implement the following function in Python: ```python from typing import List def rearrange_numbers(nums: List[int]) -> List[int]: # Your code here ```","solution":"from typing import List def rearrange_numbers(nums: List[int]) -> List[int]: Rearrange the elements of the array such that all negative numbers appear before all positive numbers, maintaining their original relative order. negatives = [num for num in nums if num < 0] non_negatives = [num for num in nums if num >= 0] return negatives + non_negatives"},{"question":"You want to create a program for a simple text editor that processes document version history. The text editor supports two operations, appending text and undoing the last operation. 1. The append operation adds text to the end of the current document content. 2. The undo operation reverts the document to the state it was in before the last append operation. Each operation is represented by a command: - The command `\\"append <text>\\"` adds the given text to the document. - The command `\\"undo\\"` undoes the last append operation. If there is no append operation to undo, the document content remains unchanged. Your task is to implement the text editor functionality that processes a list of operations and outputs the final document content. The first line of the input contains an integer `m` (1 ≤ m ≤ 100) — the number of operations. The following `m` lines each contain one of the commands (either an append operation or an undo operation). The length of each `<text>` in the append commands is between 1 and 100 characters. Output the final content of the document after processing all the operations. Examples: Input: ``` 5 append hello append world undo append test undo ``` Output: ``` hello ``` Input: ``` 3 append abc append def undo ``` Output: ``` abc ```","solution":"def process_operations(operations): Processes a list of operations to manage document version history. Parameters: operations (list): List of strings representing operations. Returns: str: The final content of the document after processing all operations. version_history = [] current_document = \\"\\" for operation in operations: if operation.startswith(\\"append \\"): text_to_append = operation[len(\\"append \\"):] version_history.append(current_document) current_document += text_to_append elif operation == \\"undo\\": if version_history: current_document = version_history.pop() return current_document"},{"question":"You are given an array of integers arr_1, arr_2, dots, arr_n and an integer k. Your task is to determine the length of the shortest contiguous subarray (containing at least one number) of which the sum is greater than or equal to k. If no such subarray exists, output -1. For example, if arr=[2, 3, 1, 2, 4, 3] and k = 7, then the shortest subarray is [4, 3] with a length of 2. Write a program to determine the length of the shortest subarray with a sum greater than or equal to k. The first line of input contains integers n and k (1 le n le 10^5, 1 le k le 10^9) — the length of the array and the threshold sum. The second line contains the integers arr_1, arr_2, dots, arr_n (1 le arr_i le 10^9) — the elements of the array. Output the length of the shortest subarray with a sum greater than or equal to k. If no such subarray exists, output -1. In the first example, the suitable subarray with sum greater than or equal to k is [4, 3] and its length is 2.","solution":"def min_subarray_len_with_sum_at_least_k(arr, k): Returns the length of the shortest subarray with a sum greater than or equal to k. If no such subarray exists, returns -1. n = len(arr) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum >= k: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given a string containing just the characters \'(\' and \')\', find the length of the longest valid (well-formed) parentheses substring. A well-formed parentheses substring is defined as: - An empty string - A string that starts with \'(\' and ends with \')\', and the substring between them is well-formed For example, the longest valid parentheses substring in the string \\"(()\\" is \\"()\\", which has length 2. In the string \\")()())\\", the longest valid parentheses substring is \\"()()\\", which has length 4. Function Signature: ```python def longestValidParentheses(s: str) -> int: ``` Input: - A string `s` of length `n` (0 ≤ n ≤ 3 * 10^4) containing only characters \'(\' and \')\'. Output: - An integer representing the length of the longest valid parentheses substring. Example Case: ```python assert longestValidParentheses(\\"(()\\") == 2 assert longestValidParentheses(\\")()())\\") == 4 assert longestValidParentheses(\\"\\") == 0 ``` Constraints: - The length of the input string will not exceed 30,000 characters. - The input string will only contain the characters \'(\' and \')\'.","solution":"def longestValidParentheses(s: str) -> int: Calculate the length of the longest valid (well-formed) parentheses substring. Parameters: - s: str - A string containing just the characters \'(\' and \')\' Returns: - int - The length of the longest valid parentheses substring max_length = 0 stack = [-1] for i in range(len(s)): if s[i] == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"In a forest, there are n trees arranged in a straight line from left to right. Each tree has a certain height. We want to plant a new tree at one of the positions such that the new tree either becomes the tallest tree or is positioned where it will maximize its visibility when viewed from the left. Visibility of a tree is defined as the number of trees to its right that have a shorter height and are not blocked by any taller tree between them. The visibility of a tree i is calculated as follows: a tree j (j > i) is only visible from tree i if there isn\'t any tree k (i < k < j) such that the height of k is greater than or equal to the height of j. Your task is to determine the best position to plant the new tree, such that its visibility or its height, whichever is greater, is maximized. # Input - The first line contains one integer n (2 leq n leq 10^5) — the number of trees already in the forest. - The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) — the heights of the trees arranged from left to right. - The third line contains one integer h_{new} (1 leq h_{new} leq 10^9) — the height of the new tree to be planted. # Output - Print one integer — the optimal position (1-based index) to plant the new tree to maximize its visibility or its height, whichever is greater. If there are multiple optimal positions, print the smallest one. # Example ``` Input 5 2 3 1 4 6 5 Output 5 ``` Explanation: - If the new tree is planted at position 5, its height (5) would maximize its visibility. - There are other positions where the visibility is the same, but position 5 provides the highest height value in addition. # Note - Carefully consider edge cases, such as the tree being the tallest among all or cases where multiple positions offer the same visibility and height impacts the decision.","solution":"def calculate_visibility(heights): Calculate visibility for each tree. n = len(heights) visibility = [0] * n stack = [] for i in range(n-1, -1, -1): while stack and stack[-1] <= heights[i]: stack.pop() visibility[i] = len(stack) stack.append(heights[i]) return visibility def best_position(n, heights, h_new): Determines the best position to plant the new tree. original_visibility = calculate_visibility(heights) max_visibility = 0 best_pos = 0 for i in range(n+1): if i < n: curr_heights = heights[:i] + [h_new] + heights[i:] else: curr_heights = heights + [h_new] visibility = calculate_visibility(curr_heights) new_tree_visibility = visibility[i] if new_tree_visibility > max_visibility or (new_tree_visibility == max_visibility and h_new >= heights[best_pos-1]): max_visibility = new_tree_visibility best_pos = i + 1 return best_pos"},{"question":"Given an array of integers, you are to determine whether there exists a permutation of the array such that the sum of all adjacent elements in the permutation is odd. Formally, given an array A of length n, determine if there exists any permutation P of the array such that the sum (P_i + P_{i+1}) is odd for all (1 le i < n). The first line of input contains an integer t (1 le t le 10) — the number of test cases. For each of the test cases, the first line contains an integer n (2 le n le 100) — the length of the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. For each test case, print \\"YES\\" if there exists a permutation of A such that the sum of all adjacent elements in the permutation is odd. Otherwise, print \\"NO\\". A sum of two integers is odd if one of them is odd and the other is even. # Example Input ``` 2 4 1 2 3 4 3 9 3 5 ``` Output ``` YES NO ``` # Explanation For the first test case, one possible valid permutation is [1, 2, 3, 4], where every pair of adjacent elements (1, 2), (2, 3), (3, 4) has an odd sum. For the second test case, all elements are odd, so any permutation will have adjacent pairs with even sums, making it impossible to satisfy the condition.","solution":"def odd_sum_permutation_exists(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] odd_count = sum(1 for x in array if x % 2 == 1) even_count = n - odd_count # We need at least one odd and one even number to make the permutation possible if odd_count > 0 and even_count > 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given n strings, each of length m. A binary string is called a palindrome if it reads the same forwards and backwards. For each string, determine the minimum number of operations required to convert the string into a palindrome, where in each operation, you can select a character in the string and change it to any other character. The first line contains an integer t (1 le t le 100) — the number of test cases in the input. The first line of each test case contains two integers n and m (1 le n, m le 50) — the number of strings and the length of each string. The next n lines of each test case contain a binary string of length m. Print t lines. For each test case, print the minimum total number of operations needed to make all strings in the test case palindromes. # Example Input ``` 2 2 3 101 000 3 4 1001 1111 1010 ``` Output ``` 0 2 ``` # Explanation In the first test case, the first string \\"101\\" is already a palindrome, hence no operation is needed. The second string \\"000\\" needs no modification as it is already a palindrome. So, the minimum total number of operations needed is 0. In the second test case, the first string \\"1001\\" is already a palindrome. The second string \\"1111\\" needs 2 operations to convert into \\"1001\\" or simply \\"0000\\" to become a palindrome. The third string \\"1010\\" requires 1 operation to change the second or third \'0\' to \'1\' to form \\"1111\\" or \\"1001\\". The minimum total number of operations needed is 2.","solution":"def min_operations_to_palindrome(test_cases): def min_conversion_ops(s): n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations results = [] for case in test_cases: n, m, strings = case[\'n\'], case[\'m\'], case[\'strings\'] total_operations = 0 for s in strings: total_operations += min_conversion_ops(s) results.append(total_operations) return results"},{"question":"Write a function that simulates a shopping cart system. The system should allow items to be added to the cart, removed from the cart, updated in quantity, and print a summary of the cart\'s contents, including the total price. Functional Requirements: 1. The cart starts off empty. 2. Items have a unique name, a price per unit, and a quantity. 3. Implement the following operations: - `add_item(name: str, price: float, quantity: int)`: Adds an item to the cart. If the item already exists, update its quantity. - `remove_item(name: str)`: Removes the item from the cart. - `update_quantity(name: str, quantity: int)`: Updates the quantity of the item. If the quantity is 0 or less, the item should be removed. - `print_cart()`: Prints each item\'s name, price per unit, quantity, and total cost for that item. At the end, also print the total cost of all items in the cart. Non-Functional Requirements: - Use object-oriented programming concepts. - Decimal(2) for prices. Example: ```python cart = ShoppingCart() cart.add_item(\\"apple\\", 1.0, 3) cart.add_item(\\"banana\\", 0.5, 5) cart.update_quantity(\\"banana\\", 10) cart.remove_item(\\"apple\\") cart.print_cart() ``` Output: ``` Item: banana, Price per unit: 0.50, Quantity: 10, Total: 5.00 Total cost: 5.00 ``` You may assume that item names are unique and do not contain special characters or spaces.","solution":"from decimal import Decimal, ROUND_HALF_UP class ShoppingCart: def __init__(self): self.cart = {} def add_item(self, name, price, quantity): if name in self.cart: self.cart[name][\'quantity\'] += quantity else: self.cart[name] = { \'price\': Decimal(price).quantize(Decimal(\'0.00\'), rounding=ROUND_HALF_UP), \'quantity\': quantity } def remove_item(self, name): if name in self.cart: del self.cart[name] def update_quantity(self, name, quantity): if name in self.cart: if quantity > 0: self.cart[name][\'quantity\'] = quantity else: del self.cart[name] def print_cart(self): total_cost = Decimal(\'0.00\') for item, details in self.cart.items(): item_total = details[\'price\'] * details[\'quantity\'] total_cost += item_total print(f\\"Item: {item}, Price per unit: {details[\'price\']}, Quantity: {details[\'quantity\']}, Total: {item_total.quantize(Decimal(\'0.00\'), rounding=ROUND_HALF_UP)}\\") print(f\\"Total cost: {total_cost.quantize(Decimal(\'0.00\'), rounding=ROUND_HALF_UP)}\\")"},{"question":"An organization wants to keep track of the health status of its employees using a daily temperature logging system. Each employee logs their temperature at the end of the day into a centralized system. They also log their physical presence in the office for that day — either \'P\' for present or \'A\' for absent. The organization wants to analyze this data over a given period to detect any potential outbreaks of illness. You are required to write a program that will accept a list of daily records for a particular employee over a given period. Each record contains the employee’s temperature (a floating-point number) and their physical presence status (\'P\' or \'A\'). The program should calculate and print the longest consecutive streak of days the employee showed a fever (temperature strictly greater than or equal to 100.4) while being physically present in the office. # Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of days for which records are provided. - Each of the next n lines contains a floating-point number ti (95.0 ≤ ti ≤ 105.0) and a character ci (\'P\' or \'A\'), representing the temperature and physical presence status of the employee on the ith day, respectively. # Output: - Print a single integer — the length of the longest consecutive streak of days with a fever while being present in the office. # Example: Input: ``` 10 98.6 P 100.5 P 99.9 P 100.4 A 100.4 P 100.5 P 101.0 P 98.3 P 100.2 A 100.4 P ``` Output: ``` 3 ``` # Notes: In this example, the longest streak of consecutive days where the temperature was 100.4 or higher while being physically present in the office is 3 days (from day 5 to day 7).","solution":"def longest_fever_streak(n, records): longest_streak = 0 current_streak = 0 for record in records: temperature, presence = record if temperature >= 100.4 and presence == \'P\': current_streak += 1 if current_streak > longest_streak: longest_streak = current_streak else: current_streak = 0 return longest_streak"},{"question":"You are given an array of n positive integers. Your task is to find the sum of the maximal subarrays for every subarray length. A subarray is defined as a contiguous part of an array. The length of a subarray is the number of elements in it. The maximal subarray for a given length is the subarray that has the maximum sum among all subarrays of that length. You need to find the sum of these maximal subarrays for all lengths from 1 to n. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains n space-separated positive integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the array. Output: - Print n space-separated integers, where the i-th integer corresponds to the sum of the maximal subarrays for the subarrays of length i. Example: Input: 5 1 2 3 4 5 Output: 5 9 12 14 15 Explanation: For length 1, the maximal subarrays are [5], with the sum being 5. For length 2, the maximal subarrays are [4, 5], with the sum being 9. For length 3, the maximal subarrays are [3, 4, 5], with the sum being 12. For length 4, the maximal subarrays are [2, 3, 4, 5], with the sum being 14. For length 5, the maximal subarrays are [1, 2, 3, 4, 5], with the sum being 15.","solution":"def sum_of_maximal_subarrays(n, array): Compute the sum of the maximal subarrays for all subarray lengths from 1 to n. :param n: The number of elements in the array :param array: A list of n positive integers :return: A list of n integers where the i-th integer corresponds to the sum of the maximal subarrays of length i result = [] for length in range(1, n + 1): max_sum = 0 for start in range(n - length + 1): current_sum = sum(array[start:start + length]) max_sum = max(max_sum, current_sum) result.append(max_sum) return result"},{"question":"Given an array of integers, you need to process several queries of two types: 1. Update the value at a specific index in the array. 2. Find the minimum value in a given subarray. First line contains two integers, n (1 leq n leq 10^5) — the number of elements in the array and q (1 leq q leq 10^5) — number of queries. The second line contains n integers — elements of the array. The next q lines each contain a query of one of the following two types: - `1 x y` — Update the element at index x (0-based) to the value y. - `2 l r` — Find the minimum value in the subarray starting from index l to index r-1 (0-based, inclusive range). Output the result for each query of the second type. Example Input: ``` 5 5 1 2 3 4 5 2 1 4 1 3 0 2 1 4 1 2 1 2 0 3 ``` Output: ``` 2 0 1 ``` Explanation: Initially, the array is [1, 2, 3, 4, 5]. 1. The first query asks for the minimum value in the subarray from indices 1 to 3 (inclusive), which is 2. 2. The second query updates the element at index 3 to 0, so the array becomes [1, 2, 3, 0, 5]. 3. The third query asks for the minimum value in the subarray from indices 1 to 3 (inclusive), which is now 0. 4. The fourth query updates the element at index 2 to 1, so the array becomes [1, 2, 1, 0, 5]. 5. The fifth query asks for the minimum value in the subarray from indices 0 to 2 (inclusive), which is 1.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) # Build the initial tree for i in range(self.n): self.tree[self.n + i] = array[i] # Build the segment tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): index += self.n self.tree[index] = value # Update the parents while index > 1: index //= 2 self.tree[index] = min(self.tree[2 * index], self.tree[2 * index + 1]) def query(self, left, right): Query for minimum in range [left, right - 1] left += self.n right += self.n minimum = float(\'inf\') while left < right: if left % 2 == 1: minimum = min(minimum, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 minimum = min(minimum, self.tree[right]) left //= 2 right //= 2 return minimum def process_queries(n, q, arr, queries): results = [] seg_tree = SegmentTree(arr) for query in queries: t, x, y = query if t == 1: seg_tree.update(x, y) elif t == 2: results.append(seg_tree.query(x, y)) return results"},{"question":"You\'ve been tasked with sorting a list of employee records. Each record contains the following information: an employee ID (a unique integer), an employee name (a string), and the number of years the employee has been with the company (an integer). Your goal is to sort the records as follows: 1. First, by the number of years with the company in descending order. 2. If two employees have the same number of years, sort them by the employee ID in ascending order. Write a function `sort_employee_records(records)` that takes a list of tuples where each tuple represents an employee record `(employee_id, employee_name, years_with_company)`. The function should return the sorted list of records. # Input - A list of `n` employee records where `1 ≤ n ≤ 1000`. - Each employee record is a tuple of the form `(employee_id, employee_name, years_with_company)`. - `0 ≤ employee_id ≤ 10^6` - `1 ≤ len(employee_name) ≤ 100` - `0 ≤ years_with_company ≤ 100` # Output - A list of employee records sorted first by years with the company (in descending order), and then by employee ID (in ascending order). # Example ```python records = [ (102, \\"Alice\\", 5), (101, \\"Bob\\", 10), (103, \\"Charlie\\", 5), (104, \\"David\\", 10) ] sorted_records = sort_employee_records(records) print(sorted_records) ``` # Output should be ```python [ (101, \\"Bob\\", 10), (104, \\"David\\", 10), (102, \\"Alice\\", 5), (103, \\"Charlie\\", 5) ] ``` # Instruction The function should demonstrate the ability to handle sorting based on multiple criteria and work with different datatypes. ```python def sort_employee_records(records): # Your code here pass ```","solution":"def sort_employee_records(records): Sorts employee records first by the number of years with the company in descending order, and then by the employee ID in ascending order if two employees have the same number of years. return sorted(records, key=lambda record: (-record[2], record[0]))"},{"question":"You are given an array of n integers representing the heights of buildings in a city. The city has a rule that no building can have more than one jump-fence that allows a person to jump from one building to the next. The jump-fence length is computed as the difference in heights between two consecutive buildings. You have k distinct pieces of jump-fences, each with a unique length. Your task is to determine whether it is possible to place exactly k jump-fences between exactly k pairs of consecutive buildings such that every piece of jump-fence is used exactly once and no building has more than one jump-fence. The first line contains two integers n (2 ≤ n ≤ 1000) and k (1 ≤ k ≤ n-1) — the number of buildings and the number of jump-fences. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 5000) — the heights of the buildings. The third line contains k integers l1, l2, ..., lk (1 ≤ li ≤ 4999) — the lengths of the jump-fences. If it is possible to place all jump-fences according to the rules, print \\"Possible\\" (without the quotes) on the first line and a sequence of k indices a1, a2, ..., ak (1 ≤ ai ≤ k), representing that a jump-fence of length li can be placed between buildings ai and ai+1. If it is not possible, print \\"Not Possible\\" (without the quotes). In case of multiple valid answers, output any one of them. Examples: 1. Input: 6 3 2 5 8 4 6 10 3 4 2 Output: Possible 1 3 5 2. Input: 5 2 3 6 7 9 12 5 3 Output: Not Possible","solution":"def place_jump_fences(n, k, heights, lengths): # Calculate differences between consecutive buildings diffs = [abs(heights[i + 1] - heights[i]) for i in range(n - 1)] # Sort lengths and differences to try to find matches diffs_sorted = sorted(diffs) lengths_sorted = sorted(lengths) # Check if every length can be matched to a difference pointer = 0 positions = [] for length in lengths_sorted: while pointer < len(diffs_sorted) and diffs_sorted[pointer] < length: pointer += 1 if pointer >= len(diffs_sorted) or diffs_sorted[pointer] != length: return \\"Not Possible\\" positions.append(pointer) pointer += 1 result_positions = [] jumps_used = [False] * k for i, diff in enumerate(diffs): for j, length in enumerate(lengths): if not jumps_used[j] and diff == length: result_positions.append(i + 1) jumps_used[j] = True break return \\"Possiblen\\" + \\" \\".join(map(str, result_positions)) def main(input_str): input_lines = input_str.strip().split(\'n\') n, k = map(int, input_lines[0].strip().split()) heights = list(map(int, input_lines[1].strip().split())) lengths = list(map(int, input_lines[2].strip().split())) return place_jump_fences(n, k, heights, lengths)"},{"question":"In the thriving world of LabBot, there are n industrious robots, each uniquely programmed to perform a series of tasks. However, due to inherent defects, certain pairs of robots experience operational malfunctions when assigned the same type of task at the same time. These malfunctioning robot pairs and their respective task conflicts pose a significant challenge in automating the factory. Your task is to create an optimal task assignment strategy for these robots, ensuring that operational conflicts are minimized while maximizing the number of robotic tasks performed simultaneously. Each robot i has a list of pi possible tasks it can perform. The challenge is to allocate tasks to the robots such that no two conflicted robots (i.e., pairs of robots who cause malfunctions) are assigned to the same task. The input consists of the following: - The first line contains two integers n (2 ≤ n ≤ 50,000) and c (1 ≤ c ≤ 100,000) - the total number of robots and the number of conflicting pairs respectively. - The next c lines contain two integers ai and bi (1 ≤ ai, bi ≤ n) indicating that robots ai and bi have a conflict. - The next 2n lines contain information about the tasks each robot can perform. For each robot i (1 ≤ i ≤ n), the first number pi (1 ≤ pi ≤ 20) indicates the number of tasks it can perform, followed by pi positive integers t i,j (1 ≤ ti,j ≤ T) representing the task IDs. Tasks are numbered from 1 to T, where T can be up to 1,000,000. The output should print: - A single line with n integers where the i-th integer is the task ID assigned to the i-th robot. - If no valid assignment is possible, print \\"NO ASSIGNMENT\\". Note: If there are multiple valid task assignments, any one of them will be considered correct. # Example: Input: ``` 5 4 1 2 2 3 3 4 4 5 2 1 3 3 2 3 4 3 1 2 5 2 1 5 1 4 ``` Output: ``` 1 2 5 1 4 ``` or ``` 1 4 5 3 1 ```","solution":"def assign_tasks(n, conflicts, robot_tasks): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(set) for ai, bi in conflicts: graph[ai].add(bi) graph[bi].add(ai) # Prepare empty task assignment result list task_assignment = [-1] * n # A function to find the valid task for a robot def find_valid_task(robot): # Tasks that neighboring robots are already using unavailable_tasks = set() for neighbor in graph[robot]: if task_assignment[neighbor - 1] != -1: unavailable_tasks.add(task_assignment[neighbor - 1]) # Find a valid task from the list of possible tasks for the robot for task in robot_tasks[robot - 1]: if task not in unavailable_tasks: return task return -1 # No valid task found # Assign tasks to each robot for robot in range(1, n + 1): assigned_task = find_valid_task(robot) if assigned_task == -1: return \\"NO ASSIGNMENT\\" task_assignment[robot - 1] = assigned_task return task_assignment"},{"question":"You are given a binary string (a string containing only the characters \'0\' and \'1\'). Your task is to determine the minimum number of flip operations required to make the binary string alternate. A binary string is said to alternate if no two adjacent characters are the same. For example, strings \\"010101\\" and \\"101010\\" are alternating, while strings \\"0110\\" and \\"1001\\" are not. In one flip operation, you can change a \'0\' to a \'1\' or a \'1\' to a \'0\'. You have to tell the minimum number of flips required to make the given binary string alternate. The input consists of multiple test cases. The first line contains a single integer T (1 leq T leq 100) — the number of test cases. Each of the next T lines contains a binary string s (1 leq |s| leq 10^5). For each test case, print a single integer — the minimum number of flip operations required to make the given binary string alternate. Separate answers with line breaks. For example: Input: 3 010 110 11111 Output: 0 1 2 Explanation: In the first case, the string \\"010\\" is already alternating, so no flip operations are needed. In the second case, we can flip the last character to get \\"10\\". In the third case, we need to flip the second and the fourth characters to get \\"10101\\".","solution":"def min_flips_to_alternate(T, test_cases): def flips(s, pattern): return sum(1 for i in range(len(s)) if s[i] != pattern[i % 2]) result = [] for s in test_cases: pattern1 = \\"01\\" * ((len(s) + 1) // 2) pattern2 = \\"10\\" * ((len(s) + 1) // 2) result.append(min(flips(s, pattern1), flips(s, pattern2))) return result"},{"question":"In a small town, there is a famous library where books are neatly arranged in shelves. However, one day due to a sudden earthquake, the shelves got displaced, and all the books from a shelf fell onto a single pile on the floor. The librarian now faces the challenge of sorting the books back into their respective shelves. You are given the number of shelves `n` and the number of books that fell from each shelf onto the pile. Each shelf must be refilled in ascending order of the number of books they originally contained. Your task is to determine the number of books in each shelf after sorting them back. The first line of input contains an integer `n` (1 ≤ n ≤ 100) - the number of shelves. The second line contains `n` space-separated integers representing the number of books that fell from each shelf. Output `n` integer numbers separated by spaces, representing the number of books in each shelf after sorting. For example: Input: ``` 4 1 3 2 4 ``` Output: ``` 1 2 3 4 ``` Input: ``` 3 5 3 8 ``` Output: ``` 3 5 8 ``` Write a program that solves this problem.","solution":"def sort_books_on_shelves(n, books): Sorts the given list of books in ascending order. Parameters: n (int): The number of shelves. books (list of int): The number of books that fell from each shelf. Returns: list of int: The sorted list of number of books in each shelf. return sorted(books) # Example Usage: # result = sort_books_on_shelves(4, [1, 3, 2, 4]) # print(result) # Output: [1, 2, 3, 4]"},{"question":"You are hired to create a scheduling assistant for a company that has multiple projects. Each project requires a specific amount of continuous time to complete and can start at any given hour. The goal is to determine the maximum number of projects that can be scheduled without any overlap in their working hours. You\'ll be given an array of integers where each element represents the duration of a project in hours. The working hours for scheduling projects are between 9 AM and 5 PM, inclusive (which is a total of 9 working hours). Write a function: ```python def max_projects(projects: List[int]) -> int: # Your code here ``` **Input:** - A list of integers `projects` where each integer represents the duration of a project in hours. (1 ≤ |projects| ≤ 100, 1 ≤ projects[i] ≤ 9) **Output:** - Return an integer representing the maximum number of non-overlapping projects that can be scheduled within the working hours from 9 AM to 5 PM. **Example:** ```python projects = [2, 3, 1, 4, 2] print(max_projects(projects)) # Output: 4 ``` In this example, you can schedule the projects with durations 2, 3, 1, and 2 without any overlap (e.g., 9-11 AM, 11 AM-2 PM, 2-3 PM, and 3-5 PM).","solution":"from typing import List def max_projects(projects: List[int]) -> int: projects.sort() total_hours = 9 project_count = 0 current_time = 0 for project in projects: if current_time + project <= total_hours: project_count += 1 current_time += project else: break return project_count"},{"question":"A farmer wants to plant n trees in a straight line. To make the arrangement more aesthetically pleasing, he decides to place the trees such that the distance between any two adjacent trees is at least d meters. Given this constraint, calculate the minimum length of land the farmer needs from the first tree to the last tree, inclusive. The input consists of two positive integers n (number of trees) and d (minimum distance between two adjacent trees) such that (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000). Output one integer — the minimum length of land required to plant n trees with the given conditions.","solution":"def min_land_length(n, d): Returns the minimum length of land required to plant n trees such that the distance between any two adjacent trees is at least d meters. if n == 1: return 1 return (n-1) * d + 1"},{"question":"Given a 2-dimensional grid of size m x n, you are initially positioned at the top-left corner of the grid (i.e., at grid[0][0]). Each cell in the grid represents a point of interest. You are required to find the length of the shortest path from the top-left corner to the bottom-right corner (i.e., grid[m-1][n-1]). You can only move either down or right at any point in time. However, some of the cells may be blocked (represented by 1), meaning you cannot traverse through those cells. You need to find the shortest path avoiding any blocked cells. If there is no valid path, return -1. The input to the function is a list of lists (2D list) representing the grid where: - 0 represents an open cell that you can move to. - 1 represents a blocked cell that you cannot move to. You need to implement the following function: ```python def shortest_path(grid: List[List[int]]) -> int: ``` **Input:** - A 2D list `grid` with m rows and n columns (2 <= m, n <= 100). The top-left and bottom-right cells (i.e., grid[0][0] and grid[m-1][n-1]) are always 0. **Output:** - Return the length of the shortest path from the top-left to the bottom-right corner, or -1 if no such path exists. **Example:** ```python grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(shortest_path(grid)) # Output: 4 ``` **Explanation:** The shortest path in the example above is: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2), which consists of 4 steps.","solution":"from collections import deque from typing import List def shortest_path(grid: List[List[int]]) -> int: m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"John, a software developer, is working on a new feature for the company\'s messaging app. He needs to implement a function that determines if a given string of parentheses is valid. A string of parentheses is valid if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. The function should take a single input: - A string `s` consisting of only characters \'(\' and \')\'. The function should return: - A boolean value `true` if the string is valid, and `false` otherwise. # Examples: Input: `s = \\"()\\"` Output: `true` Input: `s = \\"()[]{}\\"` Output: `false` Input: `s = \\"(())\\"` Output: `true` Input: `s = \\"(()))\\"` Output: `false` # Constraints: - The input string `s` length is `[1, 1000]`. # Instructions: 1. Write a function `isValidParentheses(s: str) -> bool` that implements the above functionality. 2. Ensure the function handles edge cases and large input efficiently. 3. Do not use any built-in functions for parenthesis checking in your implementation.","solution":"def isValidParentheses(s: str) -> bool: Determines if the given string of parentheses is valid. A string of parentheses is valid if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. Args: s (str): The input string consisting of only \'(\' and \')\'. Returns: bool: True if the string is valid, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack and stack[-1] == \'(\': stack.pop() else: return False return len(stack) == 0"},{"question":"You are given a matrix with n rows and m columns, where each cell contains an integer value. Each cell represents a piece of land with varied elevation levels. The task is to find the maximum sum of the values in any submatrix that can be formed in this given matrix. A submatrix is defined as any contiguous rectangular portion of the matrix. Formally, you need to output the maximum sum of elements within any submatrix from the given matrix. The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns of the matrix. Each of the next n lines contains m integers — representing the elevations of the pieces of land, where the integer values can range from -10^4 to 10^4. Print a single integer, the maximum sum of the values in any submatrix of the given matrix. # Example Input: ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` Output: ``` 29 ``` In this example, the submatrix with the maximum sum is: ``` 3 8 10 -4 -1 1 ``` which adds up to 29.","solution":"def max_sum_submatrix(matrix): Returns the maximum sum of any submatrix within the given matrix. def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) max_sum = float(\'-inf\') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum # Example usage: matrix = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] print(max_sum_submatrix(matrix)) # Output: 29"},{"question":"You are given a list of tasks to be executed by a single-threaded CPU. Each task has a start time `t` when it becomes available for execution and a duration `d` indicating how long it takes to complete. The CPU can only execute one task at a time and must completely finish the current task before starting the next one. Your goal is to determine the order in which tasks should be executed to minimize the average waiting time. The waiting time of a task is defined as the difference between the time the task completes and its start time. The average waiting time is the total waiting time of all tasks divided by the number of tasks. You are given `n` tasks with their start times and durations. The tasks are represented as an array of tuples `tasks`, where `tasks[i] = (t_i, d_i)` represents the `i`-th task. You need to return the order of tasks that minimizes the average waiting time. Write a function `optimal_task_order` that takes the number of tasks `n` and the list of tasks `tasks` as inputs and returns a list containing the indices of the tasks ordered to achieve the minimum average waiting time. # Function Signature ```python def optimal_task_order(n: int, tasks: List[Tuple[int, int]]) -> List[int]: pass ``` # Input - `n` (1 ≤ n ≤ 10^4): The number of tasks. - `tasks` (List[Tuple[int, int]]): A list containing `n` tuples, where each tuple `(t_i, d_i)` denotes the start time and duration of a task. # Output - Returns a list of integers listing the indices of the tasks in the order they should be executed to minimize the average waiting time. # Example ```python n = 3 tasks = [(0, 3), (1, 9), (2, 6)] print(optimal_task_order(n, tasks)) # Output: [0, 2, 1] ``` # Explanation In the given example, the tasks are `(0, 3)`, `(1, 9)`, and `(2, 6)`. By executing the tasks in the order `[0, 2, 1]`: 1. Task 0 starts at time 0 and finishes at time 3. So, its waiting time is `3 - 0 = 3`. 2. Task 2 starts at time 3 and finishes at time 9. So, its waiting time is `9 - 2 = 7`. 3. Task 1 starts at time 9 and finishes at time 18. So, its waiting time is `18 - 1 = 17`. The total waiting time is `3 + 7 + 17 = 27`, and the average waiting time is `27 / 3 = 9`, which is minimized.","solution":"from typing import List, Tuple import heapq def optimal_task_order(n: int, tasks: List[Tuple[int, int]]) -> List[int]: Determines the order of task execution to minimize the average waiting time. :param n: Number of tasks :param tasks: List of tuples where each tuple contains (start_time, duration) :returns: List of indices indicating the optimal order of task execution indexed_tasks = [(tasks[i][0], tasks[i][1], i) for i in range(n)] # Sort tasks by their start time indexed_tasks.sort() min_heap = [] result = [] time = 0 i = 0 while i < n or min_heap: while i < n and indexed_tasks[i][0] <= time: heapq.heappush(min_heap, (indexed_tasks[i][1], indexed_tasks[i][2])) i += 1 if min_heap: duration, index = heapq.heappop(min_heap) time += duration result.append(index) elif i < n: time = indexed_tasks[i][0] return result"},{"question":"Given an array of n integers, find the maximum sum of a contiguous subarray with the constraint that there should be at least one positive integer in the subarray. A contiguous subarray is a slice of the array that is still in the same order as the original array. The first line contains an integer n (1 ≤ n ≤ 1000) which is the number of elements in the array. The second line contains n space-separated integers representing the elements of the array (-1000 ≤ element ≤ 1000). If there is no positive integer in the array, print \\"No positive integer\\". Otherwise, print the maximum sum of any contiguous subarray containing at least one positive integer. Here is an example: Input: 5 -2 1 -3 4 -1 Output: 4 Explanation: The contiguous subarray [4] has the maximum sum 4 and includes at least one positive integer.","solution":"def max_contiguous_sum(arr): if max(arr) <= 0: return \\"No positive integer\\" max_ending_here = 0 max_so_far = float(\'-inf\') for num in arr: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given an array `a` of length `n`, where each element represents the height of a building in a line of buildings. You are also given `q` queries. Each query can ask the height of the tallest building within a certain range or decrease the height of all buildings within a specific range by a certain amount. The first line contains two integers `n` and `q` (`1 ≤ n, q ≤ 200,000`). The second line contains `n` integers `a_1, a_2, ..., a_n` (`1 ≤ a_i ≤ 1,000,000,000`) representing the heights of the buildings. Each of the next `q` lines contains either three integers `1 x y` (`1 ≤ x ≤ y ≤ n`) or four integers `2 x y d` (`1 ≤ x ≤ y ≤ n`, `1 ≤ d ≤ 1,000,000,000`). - The query `1 x y` asks for the maximum height of the buildings between indices `x` and `y` (inclusive). - The query `2 x y d` decrements the height of each building from indices `x` to `y` (inclusive) by `d`. It is guaranteed that there is at least one query of type `1`. For each query of type `1`, output the maximum height of the buildings in the specified range. **Input** The input follows the structure described above. **Output** For each query of type `1`, output the maximum height of the buildings in the specified range. **Example** ``` Input: 5 4 10 9 8 7 6 1 2 4 2 3 5 2 1 1 5 2 1 3 3 Output: 9 8 ``` **Explanation** - For the first query, the maximum height between buildings at indices 2 and 4 is 9. - For the second query, decrease the height of buildings from indices 3 to 5 by 2. The heights become [10, 9, 6, 5, 4]. - For the third query, the maximum height between buildings at indices 1 and 5 is 10. - For the fourth query, decrease the height of buildings from indices 1 to 3 by 3. The heights become [7, 6, 3, 5, 4].","solution":"def process_queries(n, q, buildings, queries): results = [] for query in queries: if query[0] == 1: x, y = query[1], query[2] results.append(max(buildings[x-1:y])) elif query[0] == 2: x, y, d = query[1], query[2], query[3] for i in range(x-1, y): buildings[i] -= d return results"},{"question":"Sophia loves to collect 2D shapes but she only collects them if they meet a specific criterion: the shape must be symmetrical along both the x-axis and the y-axis. She will be considering the shapes on an n x n grid where the shape is made up of filled cells, denoted by \'1\', and empty cells, denoted by \'0\'. Given an n x n grid, can you write a program to determine if the shape in the grid is symmetrical along both axes? The input will start with an integer n (1 ≤ n ≤ 100), the size of the grid. The next n lines each contain a string of length n, consisting of \'0\'s and \'1\'s, representing the grid. Output \\"YES\\" if the shape is symmetrical along both axes, and \\"NO\\" otherwise. Example Input: 4 1001 0110 0110 1001 Output: YES Example Input: 3 110 110 010 Output: NO In the first example, the shape is symmetric along both the x-axis and the y-axis. On the other hand, in the second example, the shape does not meet the symmetry requirement.","solution":"def is_symmetric(grid): Determines if the shape in the n x n grid is symmetrical along both axes. :param grid: List of strings, each string representing a row of the grid :return: \\"YES\\" if the shape is symmetrical along both axes, otherwise \\"NO\\" n = len(grid) for i in range(n): for j in range(n): if grid[i][j] != grid[n-1-i][j] or grid[i][j] != grid[i][n-1-j]: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers and q queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n), which denote the range within the array. For each query, you need to calculate the maximum product of two distinct elements within the specified range. If there are less than two distinct elements in the specified range, return -1 for that query. The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5), the number of elements in the array and the number of queries respectively. The second line contains n integers, the elements of the array. Each of the next q lines contains two integers l and r, describing a query. Output q lines, each containing the maximum product of two distinct elements for the respective query, or -1 if there are less than two distinct elements in the specified range. Example: Input: ``` 6 3 4 2 6 5 1 2 1 4 2 5 1 6 ``` Output: ``` 30 30 30 ``` Explanation: For the first query (1, 4), the array segment is [4, 2, 6, 5]. The two distinct elements with the maximum product are 6 and 5, giving 6 * 5 = 30. For the second query (2, 5), the array segment is [2, 6, 5, 1]. The two distinct elements with the maximum product are 6 and 5, also giving 6 * 5 = 30. For the third query (1, 6), the array segment is [4, 2, 6, 5, 1, 2]. The two distinct elements with the maximum product are still 6 and 5, also giving 6 * 5 = 30.","solution":"def max_product_of_two_distinct_elements(arr, queries): Calculates the maximum product of two distinct elements for each query range. Parameters: arr (list): List of integers. queries (list(tuple)): List of tuples where each tuple contains two integers (l, r). Returns: list: List of integers where each integer is the maximum product of two distinct elements for the respective query. results = [] for l, r in queries: segment = arr[l-1:r] unique_elements = list(set(segment)) if len(unique_elements) < 2: results.append(-1) else: unique_elements.sort(reverse=True) results.append(unique_elements[0] * unique_elements[1]) return results"},{"question":"Alice is working on a project to analyze strings in Wonderland. She needs to find out if a given string can be rearranged to form a palindrome. In Wonderland, only strings that can be rearranged to form a palindrome are considered valid. A string can be rearranged to form a palindrome if at most one character has an odd frequency. Palindromes are strings that read the same backward as forward. Your task is to write a function that takes a string as input and determines if it can be rearranged to form a palindrome. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input: - The input is a single string s (1 ≤ length of s ≤ 100), consisting of lowercase English letters. Output: - Print \\"YES\\" if the input string can be rearranged to form a palindrome. - Print \\"NO\\" otherwise. Example: Input: \\"civic\\" Output: \\"YES\\" Input: \\"ivicc\\" Output: \\"YES\\" Input: \\"hello\\" Output: \\"NO\\" Input: \\"aabbccdd\\" Output: \\"YES\\"","solution":"def can_form_palindrome(s): Determine if the given string can be rearranged to form a palindrome. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count the characters with an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged as a palindrome if there is at most one odd frequency character if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string consisting of lowercase English letters and some of the letters can be \'*\'. A \'*\' can be replaced with any lowercase English letter. Your task is to count the number of distinct strings that can be obtained by replacing \'*\' with any lowercase English letter. The first line of the input contains a string s (1 le |s| le 10^5) consisting of lowercase English letters and the characters \'*\'. Output a single integer - the number of distinct strings that can be obtained by replacing the \'*\' characters. # Example 1 **Input:** ``` a*b ``` **Output:** ``` 26 ``` # Example 2 **Input:** ``` ****ea** ``` **Output:** ``` 456976 ``` # Explanation: In the first example, the input string \'a*b\' contains a single \'*\', which can be replaced by any of the 26 lowercase English letters, resulting in 26 distinct strings. In the second example, the input string \'****ea**\' contains 6 \'*\', and each can be replaced by any of the 26 lowercase English letters, resulting in (26^6 = 456976) distinct strings.","solution":"def count_distinct_strings(s): Returns the number of distinct strings that can be created by replacing \'*\' with any lowercase English letter. return 26 ** s.count(\'*\')"},{"question":"Caleb the Cartographer has been exploring the forest for hidden treasures. During one of his expeditions, he stumbles upon an ancient map. The map illustrates the locations of several hidden treasures in a coordinate plane. To find the exact treasure spots, Caleb needs to decipher the coordinates given in a string format. The format used in the map is such that each coordinate is described as a single string separated by a special character. Unfortunately, the map is old, and some of the coordinates are corrupted. A corrupted coordinate is one where either the x or y value is missing, which means either side of the separator is an empty string. Your task is to filter out these corrupted coordinates and return the list of valid coordinates in a tuple format. Write a program that will: 1. Read an integer `n` (1 <= n <= 100), the number of coordinates mentioned on the map. 2. Read `n` lines, each containing a coordinate in the format \\"x|y\\", where: - `x` and `y` are integers (0 <= x, y <= 100). - The separator character is \'|\'. Print all valid coordinates as tuples in a list. A valid coordinate has both x and y values present. # Example **Input:** ``` 5 10|20 30| |40 50|60 0|0 ``` **Output:** ``` [(10, 20), (50, 60), (0, 0)] ``` # Explanation In the above example, `30|` and `|40` are corrupted coordinates because one of their values is missing while the remaining three are valid. Therefore, the output is `[(10, 20), (50, 60), (0, 0)]`.","solution":"def filter_valid_coordinates(n, coordinates): This function filters out corrupted coordinates and returns only the valid ones. Parameters: - n (int): The number of coordinates. - coordinates (list of str): The list containing coordinate strings in the format \\"x|y\\". Returns: - list of tuple: A list of valid coordinates as tuples. valid_coordinates = [] for coord in coordinates: parts = coord.split(\'|\') if len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit(): valid_coordinates.append((int(parts[0]), int(parts[1]))) return valid_coordinates"},{"question":"In a bustling city, traffic control is a significant concern. The city consists of a grid of streets, where streets are either horizontal or vertical. Intersections of these streets are represented as vertices in a graph, and the streets themselves are the edges that connect these vertices. The traffic department needs to determine the shortest path for emergency services to reach critical incidents efficiently. You are given the dimensions of the city grid: m (number of horizontal streets) and n (number of vertical streets). The intersections can be identified by their coordinates (i, j), where 1 ≤ i ≤ m and 1 ≤ j ≤ n. You will also be given the starting intersection (sx, sy) for the emergency service and the destination intersection (dx, dy) where the incident has occurred. Your task is to write a program to find the shortest path (in terms of the number of streets traveled) from the starting intersection to the destination intersection. Input: The first line contains two integers m and n (2 ≤ m, n ≤ 100), representing the number of horizontal and vertical streets, respectively. The second line contains four integers sx, sy, dx, and dy (1 ≤ sx, dx ≤ m and 1 ≤ sy, dy ≤ n), where (sx, sy) is the starting intersection and (dx, dy) is the destination intersection. Output: Print a single integer representing the number of streets traveled in the shortest path from the starting intersection to the destination intersection. Example: Input: 6 5 2 3 5 4 Output: 4 Note: - The shortest path distance is calculated as the sum of the horizontal and vertical distances between the starting and destination coordinates. - In this example, the shortest path from (2, 3) to (5, 4) means moving 3 streets down and 1 street right, resulting in 4 streets traveled.","solution":"def shortest_path(m, n, sx, sy, dx, dy): Returns the number of streets traveled in the shortest path from the starting intersection to the destination intersection in a grid city. # Calculate horizontal distance horizontal_distance = abs(dx - sx) # Calculate vertical distance vertical_distance = abs(dy - sy) # The shortest path is the sum of the horizontal and vertical distances return horizontal_distance + vertical_distance # Example usage # result = shortest_path(6, 5, 2, 3, 5, 4) # print(result) # Output should be 4"},{"question":"You\'ve been hired by a city to develop a maintenance scheduling system for its subway stations. The city has several subway stations connected by two-way tracks, and each track requires maintenance. The goal is to determine the minimal number of days required to perform all necessary maintenance without simultaneously maintaining two tracks connected to the same station. Input - The first line of the input contains an integer, N (1 leq N leq 10^5), representing the number of stations. - The second line contains an integer, M (0 leq M leq 2 times 10^5), representing the number of tracks. - The next M lines contain two integers, u and v (1 leq u, v leq N), indicating that there is a track connecting station u to station v. Output Output a single integer, the minimal number of days required to perform all maintenance tasks. Constraints - Each track must be maintained exactly once. - No station can have more than one of its connecting tracks maintained on the same day. Example # Input ``` 4 4 1 2 2 3 3 4 4 1 ``` # Output ``` 2 ``` # Explanation One possible maintenance schedule is: - Day 1: Maintain tracks (1, 2) and (3, 4) - Day 2: Maintain tracks (2, 3) and (4, 1) In this schedule, no station has more than one of its connecting tracks maintained on the same day, and all maintenance tasks are completed in 2 days. Design an algorithm to solve the problem efficiently.","solution":"def min_days_to_maintain_tracks(N, M, tracks): Calculate the minimal number of days required to perform maintenance on all tracks without maintaining two tracks connected to the same station on the same day. Parameters: N (int): The number of stations. M (int): The number of tracks. tracks (List[Tuple[int, int]]): List of tuples representing the tracks between stations. Returns: int: The minimal number of days required to complete the maintenance. from collections import defaultdict # Build the adjacency list for the graph representation adj_list = defaultdict(list) for u, v in tracks: adj_list[u].append(v) adj_list[v].append(u) # Calculate the maximum degree of any node in the graph max_degree = 0 for station in adj_list: max_degree = max(max_degree, len(adj_list[station])) # The minimal number of days required is at least the maximum degree return max_degree"},{"question":"A company organizes an annual coding competition where each participant must solve a series of problems within a given time frame. After the competition, the scores of all participants are recorded. Your task is to determine the rank of a specific participant based on their score. You are given the list of scores of all participants in the competition. Each score appears exactly once in the list. You also receive the score of the participant whose rank you need to determine. The rank of a participant is defined as the number of participants who have a score strictly greater than the score of this participant, plus one (ranks are 1-based). Write a function to determine the rank of the participant with the given score. The first line contains an integer n (1 le n le 10^6) — the number of participants. The second line contains n integers s_1, s_2, ldots, s_n (1 le s_i le 10^9) — the scores of the participants. The third line contains one integer t (1 le t le 10^9) — the score of the participant whose rank needs to be determined. The score t is guaranteed to be in the list of scores. Output a single integer: the rank of the participant with score t. # Example **Input:** ``` 5 100 200 150 180 120 150 ``` **Output:** ``` 3 ```","solution":"def find_rank(num_participants, scores, target_score): Determines the rank of the participant with the given score. Args: num_participants (int): The number of participants. scores (list): The list of scores of the participants. target_score (int): The score of the participant whose rank needs to be determined. Returns: int: The rank of the participant with the given score. scores.sort(reverse=True) return scores.index(target_score) + 1"},{"question":"In a faraway land, there are n towns connected by m bidirectional roads. Each town is represented by a unique number ranging from 1 to n. There may exist multiple towns with no direct roads connecting them. Your task is to assist a traveler who needs to move between two specific towns using the roads. The traveler requires a shortest possible route from one town to another. Implement a function to help the traveler find such routes efficiently. To handle the traveler\'s queries, consider the following inputs and outputs: # Input - The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m < n*(n-1)/2) — the number of towns and the number of roads, respectively. - Each of the following m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) representing a road between town ui and town vi. - The next line contains a positive integer q (1 ≤ q ≤ 105) indicating the number of queries. - Each of these q lines contains two integers ai and bi (1 ≤ ai, bi ≤ n) representing a query to find the shortest distance between town ai and town bi. # Output For each query, print the shortest distance in a new line. If no path exists between the queried towns, print -1. # Example Input ``` 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 ``` Output ``` 4 2 2 ``` # Instructions - Implement the function to process the input and compute the required shortest distances. - Consider edge cases such as no roads at all and disconnected components. - Optimize your solution to handle up to 1000 towns and 105 queries efficiently.","solution":"from collections import deque def find_shortest_distances(n, m, roads, q, queries): # Build the graph graph = [[] for _ in range(n + 1)] for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start, end): visited = [False] * (n + 1) dist = [-1] * (n + 1) queue = deque([start]) visited[start] = True dist[start] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True dist[neighbor] = dist[current] + 1 queue.append(neighbor) if neighbor == end: return dist[neighbor] return dist[end] results = [] for a, b in queries: if a == b: results.append(0) else: results.append(bfs(a, b)) return results"},{"question":"Alyn loves a game called \\"Magical Strings\\" where players can transform strings using a specific set of rules. One day, she wondered about the minimum number of transformations required to convert one string into another using the game\'s rules. She challenges you to solve this problem. You are given two strings, `source` and `target`, consisting of lowercase English letters. You can perform the following operations to transform `source` into `target`: 1. Insert a character at any position. 2. Remove a character from any position. 3. Replace a character with another character. Your task is to find the minimum number of operations required to transform `source` into `target`. # Input - The first line contains the `source` string (1 le text{length of source} le 1000). - The second line contains the `target` string (1 le text{length of target} le 1000). # Output - Print a single integer, the minimum number of operations required to convert `source` into `target`. # Example Input: ``` kitten sitting ``` Output: ``` 3 ``` Input: ``` apple pear ``` Output: ``` 4 ``` # Explanation In the first example, the following transformations can be used to convert `kitten` into `sitting`: 1. Replace \'k\' with \'s\' (kitten -> sitzen) 2. Replace \'e\' with \'i\' (sitzen -> sittin) 3. Insert \'g\' at the end (sittin -> sitting) In the second example, the transformations are as follows: 1. Replace \'a\' with \'p\' (apple -> ppple) 2. Replace \'p\' with \'e\' (ppple -> eeple) 3. Replace \'l\' with \'a\' (eeple -> eeape) 4. Replace \'e\' with \'r\' (eeape -> eeare) Hint: This problem can be solved dynamically using the concept of edit distance (Levenshtein distance).","solution":"def min_distance(source, target): Returns the minimum number of operations required to convert source into target. Operations include insertion, deletion, and substitution of characters. m, n = len(source), len(target) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If source is empty, insert all characters of target elif j == 0: dp[i][j] = i # If target is empty, remove all characters of source elif source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If characters are equal, no operation needed else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given a string of parentheses containing only \'(\' and \')\'. A string of parentheses is considered balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are correctly nested. Your task is to determine the minimum number of moves required to make the string of parentheses balanced. A move is defined as inserting a single parenthesis \'(\' or \')\'. For example: - For the string \\"())\\", you can insert a \'(\' at the beginning to make it \\"(())\\" or a \')\' at the end to make it \\"())()\\". Either way, it requires only 1 move to balance the string. - For the string \\"(((\\", you need 3 moves to add \')))\' at the end resulting in \\"((()))\\". # Input The first line contains an integer **T** (1 ≤ **T** ≤ 100) — the number of test cases. Each of the next **T** lines contains a string **s** of length n (1 ≤ n ≤ 100) consisting of only \'(\' and \')\'. # Output For each test case, print a single integer — the minimum number of moves required to make the string balanced. # Example Input ``` 3 ()) ((( ()() ``` Output ``` 1 3 0 ``` # Note In the first example, the string \\"())\\" can be balanced by either adding a \'(\' at the start or a \')\' at the end, thus requiring 1 move. In the second example, the string \\"(((\\" needs 3 \')\' at the end to become balanced, requiring 3 moves. In the last example, the string \\"()()\\" is already balanced, so zero moves are needed. Your task is to write a program that reads the input and outputs the minimum number of moves for each test case.","solution":"def min_moves_to_balance_parentheses(test_cases, strings): results = [] for s in strings: left = 0 right = 0 for char in s: if char == \'(\': left += 1 else: if left > 0: left -= 1 else: right += 1 # Total moves to balance (left count represents extra \'(\' and right represents extra \')\') results.append(left + right) return results"},{"question":"You are given a rectangular grid representing a garden and a list of plants with their specific growth patterns. Each plant grows in a specific shape that can occupy several cells in the garden. Your task is to arrange the plants in the garden in such a way that no unclaimed cells remain and no plants overlap each other. The garden grid is given with some cells already occupied by stones, which means no plant can grow there. You have to fill the remaining cells with the plants according to the following rules: 1. Each plant has a fixed shape and size, defined as a set of cells it occupies. 2. Plants cannot overlap each other or the cells occupied by stones. 3. The garden must be completely filled with plants except for the cells occupied by stones. 4. The garden grid consists of `n` rows and `m` columns, and the shapes of `k` plants are provided as sets of coordinates relative to the plant’s top-left corner. Input: - The first line contains integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden grid. - The next `n` lines contain `m` characters each, representing the garden grid. A `\\"#\\"` character represents a cell occupied by a stone, and a `\\".\\"` character represents an empty cell. - The next line contains an integer `k` (1 ≤ k ≤ 50) — the number of different plants. - The following `k` sections, each representing one plant: - The first line of each section contains an integer `p` (1 ≤ p ≤ 10) — the number of cells the plant occupies. - The next `p` lines each contain two integers `r` and `c` (0 ≤ r < 10, 0 ≤ c < 10) — the coordinates of the cells occupied by the plant, relative to its top-left corner. Output: - If it is not possible to fill the garden according to the rules, output `-1`. - Otherwise, output the garden grid with each plant represented by a unique digit (1, 2, 3, ..., k), and cells occupied by stones should retain the `\\"#\\"` character. Example: Input: ``` 4 5 ..#.. ..... #.. ..#.. 2 5 0 0 1 0 2 0 2 1 2 2 3 0 0 1 0 1 1 ``` Output (one possible solution): ``` 11#22 11.22 #33 .344. ``` Note: - This example is not exhaustive, and there may be multiple valid solutions or none at all. - You need to write a program that attempts to fill the garden grid according to the rules and prints one valid arrangement, or `-1` if it’s not possible.","solution":"def can_place_plant(garden, plant, start_row, start_col): for r, c in plant: if start_row + r >= len(garden) or start_col + c >= len(garden[0]) or garden[start_row + r][start_col + c] != \'.\': return False return True def place_plant(garden, plant, start_row, start_col, plant_id): for r, c in plant: garden[start_row + r][start_col + c] = str(plant_id) def remove_plant(garden, plant, start_row, start_col): for r, c in plant: garden[start_row + r][start_col + c] = \'.\' def solve_garden(n, m, garden, k, plants): def backtrack(): for i in range(n): for j in range(m): if garden[i][j] == \'.\': for plant_id, plant in enumerate(plants): if can_place_plant(garden, plant, i, j): place_plant(garden, plant, i, j, plant_id + 1) if backtrack(): return True remove_plant(garden, plant, i, j) return False return True if backtrack(): return garden else: return -1 def main(n, m, garden, k, plants): garden = [list(row) for row in garden] plants = [list(zip(*[iter(coords)]*2)) for coords in plants] result = solve_garden(n, m, garden, k, plants) if result == -1: print(-1) else: for row in result: print(\'\'.join(row)) # Read input def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) garden = data[2:n+2] k = int(data[n+2]) plants = [] index = n + 3 for _ in range(k): p = int(data[index]) coords = [] for _ in range(p): r, c = int(data[index + 1]), int(data[index + 2]) coords += [r, c] index += 2 plants.append(coords) index += 1 return n, m, garden, k, plants if __name__ == \\"__main__\\": n, m, garden, k, plants = read_input() main(n, m, garden, k, plants)"},{"question":"Mika is a software engineer who regularly takes part in online coding competitions. To prepare for her next competition, she is practicing problems on arrays. One of the challenges involves manipulating a sequence of integers to maximize a particular sum. The problem is as follows: Given an array of integers A consisting of N elements (A_1, A_2, ldots, A_N), Mika can perform a series of operations to maximize the sum of the array. In each operation, Mika can select any subarray of length at most K, reverse it, and then replace the values in the original array with the reversed subarray. Help Mika find the maximum possible sum of the array that can be achieved after performing as many operations as she likes. # Input Format: - The first line contains two integers N and K (1 leq N leq 10^5, 1 leq K leq N), representing the number of elements in the array and the maximum length of the subarray that can be reversed in each operation. - The second line contains N space-separated integers A_1, A_2, ldots, A_N (-10^9 leq A_i leq 10^9), representing the elements of the array. # Output Format: Output a single integer representing the maximum possible sum of the array that can be achieved after any number of operations. # Sample Input: ``` 5 3 3 -1 -2 5 -4 ``` # Sample Output: ``` 11 ``` # Explanation: In this example, reversing the subarray from index 2 to 4 (1-based indices) transforms the array to [3, 5, -2, -1, -4]. The new array sum is 3 + 5 - 2 - 1 - 4 = 1. However, reversing the subarray from index 1 to 3 (1-based indices) results in the array [-2, -1, 3, 5, -4] with sum -2 - 1 + 3 + 5 - 4 = 1. After reconsidering, the array sum remains maximized to 11. # Note: The challenge is to find a strategy to maximize the sum effectively, considering the limitation on the size of the subarray that can be reversed.","solution":"def maximize_sum_with_reversals(N, K, A): Returns the maximum possible sum of the array that can be achieved after performing any number of reversals. # Since the problem allows reversing any subarray of length at most K, # we can always transform the entire array into its sorted non-decreasing order # by repeatedly reversing appropriate subarrays. # Hence, the maximum possible sum after any number of operations will be # the sum of the absolute values of all the elements in the array. return sum(abs(x) for x in A)"},{"question":"You are tasked with developing a software system that simulates an environment with robots and obstacles on a grid. The input consists of a grid of size m x n, where some cells are occupied by obstacles. Each robot is placed on the grid at designated starting positions and must navigate to a specified goal position. Robots can move up, down, left, or right, but they cannot pass through obstacles or move outside the grid boundaries. Given the grid dimensions, the positions of obstacles, the starting positions of the robots, and their respective goal positions, determine the minimum steps each robot needs to reach its goal. If the goal cannot be reached for a robot, return -1 for that robot. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the grid dimensions. The second line contains an integer t (1 ≤ t ≤ 500) — the number of obstacles. Each of the next t lines contains two integers x and y (0 ≤ x < m, 0 ≤ y < n) — the coordinates of an obstacle. The next line contains an integer r (1 ≤ r ≤ 10) — the number of robots. Each of the next r lines contains four integers sx, sy, gx, gy (0 ≤ sx, sy, gx, gy < m, n) — the starting and goal coordinates of a robot. Print the minimum steps each robot needs to reach its goal from the starting position, in the order given in the input. If a robot cannot reach its goal, print -1 for that robot. For example, given the grid dimensions, obstacles, starting positions, and goal positions, the output should specify the minimum steps each robot needs to take, or -1 if it is impossible. # Sample Input ``` 5 5 2 1 2 3 3 2 0 0 4 4 4 4 0 0 ``` # Sample Output ``` 8 8 ``` In the sample input, we have a 5x5 grid with obstacles at (1, 2) and (3, 3). There are 2 robots: the first starts at (0, 0) and needs to reach (4, 4), and the second starts at (4, 4) and needs to reach (0, 0). The output indicates the minimum steps required for each robot to reach its goal.","solution":"from collections import deque def min_steps_to_goal(m, n, obstacles, robots): grid = [[0] * n for _ in range(m)] for ox, oy in obstacles: grid[ox][oy] = 1 def bfs(sx, sy, gx, gy): if (sx, sy) == (gx, gy): return 0 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: if (nx, ny) == (gx, gy): return steps + 1 queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 results = [] for sx, sy, gx, gy in robots: results.append(bfs(sx, sy, gx, gy)) return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to find and print the longest substring of this string that contains at most two distinct characters. If there are multiple such substrings, print the one that appears first. Input: A single line containing a string `s` (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output: A single line containing the longest substring of `s` that contains at most two distinct characters. Example: Input: abcbbbbcccbdddadacb Output: bcbbbbcccb","solution":"def longest_substring_with_two_distinct_characters(s): Returns the longest substring of the input string s that contains at most two distinct characters. If there are multiple such substrings, returns the one that appears first. if len(s) == 0: return \\"\\" start = 0 max_length = 0 max_substr_start = 0 char_map = {} for end in range(len(s)): if s[end] in char_map: char_map[s[end]] += 1 else: char_map[s[end]] = 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 if end - start + 1 > max_length: max_length = end - start + 1 max_substr_start = start return s[max_substr_start:max_substr_start + max_length]"},{"question":"You are given a matrix of integers M of size N times N. Your task is to find the path from the top-left corner to the bottom-right corner of the matrix such that the sum of the values along the path is minimized. You can move either down or right at any point in time. For example, given the following matrix: ``` 3 7 2 1 9 3 5 6 4 ``` The path with the minimum sum is: 3 → 1 → 5 → 6 → 4, with a sum of 19. Your code should implement a function that receives a 2D list of integers and returns the minimum path sum as an integer. Ensure to consider edge cases, such as when the matrix is empty or contains only one element. Your function signature should be as follows: ```python def min_path_sum(matrix: List[List[int]]) -> int: # Your code here ```","solution":"from typing import List def min_path_sum(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 N = len(matrix) # Create a 2D dp array where dp[i][j] represents the minimum path sum to reach cell (i, j) dp = [[float(\'inf\')] * N for _ in range(N)] dp[0][0] = matrix[0][0] for i in range(N): for j in range(N): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + matrix[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + matrix[i][j]) return dp[N-1][N-1]"},{"question":"You are managing the attendance system for a school, and you have to keep track of student attendance during a particular period. Each student is represented by their unique student ID which is a string of lowercase Latin letters. Your task is to write a system that supports the following operations: - **Mark Present** (`+`): Marks a student as present. The operation is followed by the student\'s ID. - **Mark Absent** (`-`): Marks a student as absent. The operation is followed by the student\'s ID. - **Query Attendance** (`?`): Checks how many of the students whose last active state is present are currently marked present. Write a program to handle these operations effectively. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of operations. The next n lines contain the operations in the format described above. The total length of all student IDs does not exceed 10^6. For each \\"?\\" operation, output the number of students marked as present on a separate line. # Input ``` 5 + alice + bob - alice ? + alice ? ``` # Output ``` 1 2 ``` In this example, the sequence of operations enforces the presence or absence status for each student ID and queries the total number of students present at the point of each query operation.","solution":"def attendance_system(operations): attendance = set() results = [] for operation in operations: action, student_id = operation[0], operation[2:] if action == \'+\': attendance.add(student_id) elif action == \'-\': attendance.discard(student_id) elif action == \'?\': results.append(len(attendance)) return results"},{"question":"Alice wants to send a secret message to Bob. To encrypt the message, she decides to use a simple substitution cipher, where each letter in the message is replaced by the letter that appears k places after it in the alphabet. If this substitution goes past the letter \'z\', it wraps around to the beginning of the alphabet. For example, if k = 2, \'a\' becomes \'c\', and \'y\' becomes \'a\'. Given a message and an integer k, help Alice write a program to create an encrypted message using the described substitution cipher. The message will contain only lowercase letters and spaces. The first line contains the integer k (1 le k le 25), the number of positions each letter should be shifted. The second line contains a string s (1 le |s| le 10^6) — the message to be encrypted, consisting of lowercase letters and spaces. Output the encrypted message. # Example Input: ``` 3 hello world ``` Output: ``` khoor zruog ``` In this example: \'h\' is shifted to \'k\', \'e\' to \'h\', \'l\' to \'o\', \'o\' to \'r\', and likewise for all other letters. Spaces remain unchanged.","solution":"def encrypt_message(k, s): Encrypts the message s by shifting each letter k positions forward in the alphabet. :param k: Number of positions to shift (1 <= k <= 25). :param s: The message to be encrypted, consisting of lowercase letters and spaces. :return: The encrypted message. encrypted_message = [] for char in s: if char == \' \': encrypted_message.append(char) else: new_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"Given an array of integers, you need to split the array into two contiguous subarrays such that the sum of the left subarray is as close as possible to the sum of the right subarray. Return the absolute difference between the sums of the two subarrays. If there are multiple ways to split the array, return the smallest possible difference. # Input - An integer `n` (2 ≤ n ≤ 10^5) is the size of the array. - An array `arr` of integers (|arr[i]| ≤ 10^4) where `i` is from 0 to n-1. # Output - A single integer representing the smallest possible absolute difference between the sums of the two subarrays. # Example Input ``` 5 3 1 2 4 3 ``` Output ``` 1 ``` Explanation You can split this array into [3, 1, 2] and [4, 3]. The sums of the subarrays will be 6 and 7 respectively, and the absolute difference is 1. # Constraints - The elements of the subarrays must be contiguous. - The size of the array is at least 2. # Note To achieve an optimal solution, consider using a prefix sum array for efficient computation of subarray sums. Start with a single-element left subarray and shift the boundary between left and right subarrays to gradually minimize the difference in sums.","solution":"def min_absolute_difference(n, arr): Returns the minimum possible absolute difference between the sums of two contiguous subarrays after splitting the given array. total_sum = sum(arr) left_sum = 0 min_diff = float(\'inf\') for i in range(n - 1): left_sum += arr[i] right_sum = total_sum - left_sum diff = abs(left_sum - right_sum) if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a string s consisting of lowercase English letters. We want to transform s so that every character sequence of identical letters becomes at most two characters long. In other words, any substring consisting of k identical letters should be reduced to the first two characters of that substring. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100, s consists only of lowercase English letters). For each test case, output the transformed string on a new line. Example: Input: 3 aaabbcddd ab ccccc Output: aabbcdd ab cc Explanation: 1. \\"aaabbcddd\\" transforms to \\"aabbcdd\\" - \'aaa\' → \'aa\', \'ddd\' → \'dd\' 2. \\"ab\\" remains unchanged. 3. \\"ccccc\\" transforms to \\"cc\\"","solution":"def transform_string(s): Transforms a string so that sequences of identical letters are reduced to at most two characters. result = [] count = 0 for i in range(len(s)): if i == 0 or s[i] == s[i-1]: count += 1 if count <= 2: result.append(s[i]) else: count = 1 result.append(s[i]) return \'\'.join(result) def process_test_cases(test_cases): Processes multiple test cases and returns transformed strings for each. return [transform_string(s) for s in test_cases]"},{"question":"Fred is buying sweets for his friends. There are two types of sweets available: candy bars and chocolate pieces. To buy a candy bar, Fred needs to pay exactly three coins, and to buy a chocolate piece, Fred needs to pay exactly five coins. Fred has a total budget of c coins. What is the maximum number of sweets Fred can buy, regardless of the type? The first line contains one integer t (1 le t le 1000) — the number of test cases. The only line of each test case contains one integer c (0 le c le 10^9) — the total number of coins Fred has. For each test case, print one integer — the maximum number of sweets Fred can buy. In the first test case, Fred can buy three candy bars (costing 9 coins) and one chocolate piece (costing 5 coins), totaling 14 coins. In the second test case, Fred does not have any coins, so he cannot buy any sweets.","solution":"def max_sweets(c): Returns the maximum number of sweets Fred can buy with `c` coins. return c // 3"},{"question":"Alex has a string consisting of lowercase English letters. He wants to modify this string to have all unique characters. To achieve this, he can perform the following operations: 1. Select a character in the string and replace it with any other lowercase English letter. 2. Remove a character from the string. Alex wants to achieve this with the minimum number of operations. The first line contains a single integer q (1 leq q leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single string s (1 leq |s| leq 100). For each test case, output a single integer — the minimum number of operations Alex needs to perform to make all characters in the string s unique. # Input ``` 2 abac abcdef ``` # Output ``` 1 0 ``` # Explanation In the first test case, Alex can replace the second \'a\' with any other character (\'d\' for instance) or he can remove the second \'a\'. Therefore, only 1 operation is needed. In the second test case, all characters are already unique, so no operations are needed.","solution":"def min_operations_to_unique_chars(s): This function returns the minimum number of operations needed to make all characters in the string unique. char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 operations = 0 for count in char_count.values(): if count > 1: operations += count - 1 return operations def process_test_cases(q, test_cases): results = [] for i in range(q): results.append(min_operations_to_unique_chars(test_cases[i])) return results"},{"question":"Given a string s containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', write a function that determines whether the string is a valid sequence of parentheses. A valid sequence is defined as: 1. Each opening bracket has a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order (i.e., an open parenthesis must be closed before any other type of open parenthesis). Examples: - \\"()\\" should return true - \\"()[]{}\\" should return true - \\"(]\\" should return false - \\"([)]\\" should return false - \\"{[]}\\" should return true **Input:** A single string s of length between 1 and 10,000 containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. **Output:** A boolean value: True if the string is a valid sequence of parentheses, and False otherwise. Write a function `isValid(s: str) -> bool` that takes a string s and returns a boolean indicating whether the string is a valid sequence of parentheses. **Example:** ```python assert isValid(\\"()\\") == True assert isValid(\\"()[]{}\\") == True assert isValid(\\"(]\\") == False assert isValid(\\"([)]\\") == False assert isValid(\\"{[]}\\") == True ```","solution":"def isValid(s: str) -> bool: Determines if the input string of brackets is valid. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given an array of integers. You need to write a program that finds the second largest element in the array. If the array has fewer than two unique elements, the program should return -1. The input consists of a single line containing an array of integers, separated by spaces. The length of the array is from 1 to 100, inclusive, and each integer in the array is between -10^5 and 10^5, inclusive. Print the second largest element in the array, or -1 if there isn\'t one.","solution":"def second_largest(arr): Finds and returns the second largest element in the array. If the array has fewer than two unique elements, returns -1. unique_elements = list(set(arr)) if len(unique_elements) < 2: return -1 unique_elements.sort(reverse=True) return unique_elements[1]"},{"question":"Efficiently Merging Meetings You are given a list of meetings in an office represented as pairs of integers, where each pair (start, end) indicates the starting and ending time of a meeting. Each pair is inclusive, meaning a meeting from time 2 to 3 would be represented as (2, 3). Your task is to merge all overlapping meetings into one and return the list of merged meetings, where overlapping meetings are combined into the earliest start time and the latest end time among the overlapping meetings. # Input - The first line contains a single integer n (1 le n le 10^5) — the number of meetings. - The following n lines each contain two integers start and end (1 le start le end le 10^9) — the times of the meetings. # Output - Print the list of merged meetings. Each pair (start, end) should be printed on a new line. The list of merged meetings should be sorted by their start time. # Example Input ``` 4 1 3 2 4 5 8 6 10 ``` Output ``` 1 4 5 10 ``` # Note - In the example, the first two meetings can be merged into one meeting from 1 to 4, and the last two meetings merge into one meeting from 5 to 10.","solution":"def merge_meetings(meetings): Merges overlapping meetings into a list of non-overlapping meetings. :param meetings: List of tuples [(start, end), ...] :return: List of merged meetings [(start, end), ...] if not meetings: return [] # Sort meetings by the start time meetings.sort() merged_meetings = [meetings[0]] for current_start, current_end in meetings[1:]: last_merged_start, last_merged_end = merged_meetings[-1] # If the current meeting overlaps with the last merged one, merge them if current_start <= last_merged_end: merged_meetings[-1] = (last_merged_start, max(last_merged_end, current_end)) else: merged_meetings.append((current_start, current_end)) return merged_meetings def process_input_and_solve(n, input_meetings): Processes input and applies the merge_meetings function. :param n: number of meetings. :param input_meetings: List of tuples [(start, end), ...] :return: List of merged meetings [(start, end), ...] formatted as strings. meetings = [(int(start), int(end)) for start, end in input_meetings] merged_meetings = merge_meetings(meetings) return merged_meetings"},{"question":"You are given a grid containing integers. The grid is filled with integers such that each cell contains a unique integer, and the integers are in a strictly increasing order from left to right within each row and from top to bottom within each column. Your task is to find the coordinates of a given target integer within the grid. Assume that the grid is represented by a list of lists in Python, and each inner list represents a row of the grid. Coordinates are represented as tuples in the form (row, column), with both indices starting from 0. If the target integer is not present in the grid, output (-1, -1). Write a function `find_target` that takes two arguments: a 2D list `grid` and an integer `target`. The function should return a tuple representing the coordinates of the `target`. If the `target` is not found, return (-1, -1). Function signature: `def find_target(grid: List[List[int]], target: int) -> Tuple[int, int]:` # Example ```python grid = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] find_target(grid, 3) # Output: (0, 1) find_target(grid, 13) # Output: (-1, -1) ``` You may assume the grid has at least one row and one column, and is a valid strictly increasing grid.","solution":"from typing import List, Tuple def find_target(grid: List[List[int]], target: int) -> Tuple[int, int]: Finds the coordinates of the target integer in a strictly increasing 2D grid. If the target is not found, returns (-1, -1). :param grid: List[List[int]] - A 2D list representing the grid. :param target: int - The target integer to find. :return: Tuple[int, int] - The coordinates of the target or (-1, -1). if not grid or not grid[0]: return (-1, -1) rows = len(grid) columns = len(grid[0]) # Start from the top right of the grid row = 0 col = columns - 1 while row < rows and col >= 0: if grid[row][col] == target: return (row, col) elif grid[row][col] > target: col -= 1 else: row += 1 return (-1, -1)"},{"question":"Write a program that helps Robo, the robot, manage his tasks in a sorted order. Robo\'s task management involves three types of operations that modify or query a list of integers representing the priority levels of different tasks. The operations are as follows: 1. Add a new task with a given priority to the list. 2. Remove a task with a specific priority from the list (if it exists). 3. Output the median priority of the current tasks in the list. The first line of input contains a single integer n (1 ≤ n ≤ 200,000) — the number of operations. The next n lines describe the operations. Each line starts with an integer ti (1 ≤ ti ≤ 3), which indicates the type of the operation. If ti = 1, it will be followed by a single integer xi (0 ≤ xi ≤ 10^9), which represents the priority of the new task to be added. If ti = 2, it will be followed by a single integer xi (0 ≤ xi ≤ 10^9), representing the priority of the task to be removed. If ti = 3, it will not be followed by anything and represents querying the current median priority of the task list. For each type 3 operation, output a single line containing the current median. If there are an even number of elements, the median is the average of the two middle elements. The answer will be considered correct if its absolute or relative error does not exceed 10^-6. Note: It is guaranteed that all operations are valid, and there will always be at least one element in the list when a type 3 operation is called.","solution":"import bisect class TaskManager: def __init__(self): self.tasks = [] def add_task(self, priority): bisect.insort(self.tasks, priority) def remove_task(self, priority): index = bisect.bisect_left(self.tasks, priority) if index < len(self.tasks) and self.tasks[index] == priority: self.tasks.pop(index) def median_task(self): n = len(self.tasks) if n % 2 == 1: return self.tasks[n // 2] else: return (self.tasks[n // 2 - 1] + self.tasks[n // 2]) / 2 # Usage: def process_operations(n, operations): task_manager = TaskManager() results = [] for op in operations: if op[0] == 1: task_manager.add_task(op[1]) elif op[0] == 2: task_manager.remove_task(op[1]) elif op[0] == 3: results.append(task_manager.median_task()) return results"},{"question":"You are given two strings, s and t. You need to determine the minimum number of operations needed to transform s into t. The operations you can perform are: 1. Delete a character from a string. 2. Insert a character into a string. 3. Replace one character with another. The first line contains a non-empty word s. The second line contains a non-empty word t. Each word consists only of lowercase English letters and contains at most 100 letters. Print a single integer that represents the minimum number of operations required to convert s into t. # Example Input: ``` kitten sitting ``` Output: ``` 3 ``` Explanation: In this example, you can transform \\"kitten\\" into \\"sitting\\" with the following operations: 1. Replace \'k\' with \'s\'. 2. Replace \'e\' with \'i\'. 3. Insert \'g\' at the end.","solution":"def min_edit_distance(s, t): Returns the minimum number of operations required to convert string s into string t. m, n = len(s), len(t) # Create a table to store the results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s is empty, insert all characters of t elif j == 0: dp[i][j] = i # If t is empty, delete all characters of s elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last characters are the same, ignore them and recurse for the remaining strings else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"In a galaxy far, far away, intergalactic trading was thriving among various planets. Each planet had its own special commodity, and trade routes were established between pairs of planets to facilitate the exchange of these commodities. However, pirates began to ambush the trade routes, making it unsafe for merchants to travel without protection. To combat this threat, the Galactic Council decided to establish protected trading convoys for the most frequently traveled routes. A convoy would be established for a trade route if it is part of a circular trade route involving three planets, making it harder for pirates to predict and ambush the convoy. Given a list of trade routes between planets, you are tasked with identifying all circular trade routes (triangles) involving three different planets. Your task is to write a program that takes the number of planets and trade routes as input, and outputs the number of distinct circular trade routes each planet is part of. # Input: - The first line contains two integers, `p` (2 <= p <= 100) and `r` (1 <= r <= 10000), representing the number of planets and the number of trade routes, respectively. - The next `r` lines each contain two integers, `u` and `v` (1 <= u, v <= p), representing a bidirectional trade route between planet `u` and planet `v`. # Output: - Output `p` integers, each on a new line. The i-th integer represents the number of distinct circular trade routes involving planet `i`. # Example: Input ``` 5 6 1 2 2 3 3 1 3 4 4 5 5 3 ``` Output ``` 1 1 2 1 1 ``` In this example: - Planets 1, 2, and 3 form a circular trade route. - Planets 3, 4, and 5 form another circular trade route. - Planets 1 and 2 are part of the first circular trade route. - Planet 3 is part of both circular trade routes. - Planets 4 and 5 are part of the second circular trade route.","solution":"def find_circular_trade_routes(p, r, routes): from collections import defaultdict # Initialize adjacency list graph = defaultdict(set) # Populate graph with trade routes for u, v in routes: graph[u].add(v) graph[v].add(u) # Method to count all triangles each planet is part of triangle_count = [0] * (p + 1) # Find triangles by iterating through each edge (u, v) for u in graph: for v in graph[u]: if u < v: # ensures each pair (u,v) is considered once for w in graph[u]: if w != v and w in graph[v]: if u < w and v < w: # ensures each triangle (u,v,w) is considered once triangle_count[u] += 1 triangle_count[v] += 1 triangle_count[w] += 1 # Output the count for each planet, ignoring planet 0 as indexing starts from 1 return triangle_count[1:] # Example usage: p = 5 r = 6 routes = [ (1, 2), (2, 3), (3, 1), (3, 4), (4, 5), (5, 3) ] print(find_circular_trade_routes(p, r, routes)) # Expected Output: [1, 1, 2, 1, 1]"},{"question":"In a magical forest, there are n trees arranged in a straight line, each with a certain height. The forest wizards want to perform a ritual that involves selecting exactly three trees such that the height of the middle tree is greater than the heights of the two other trees on either side (forming a peak). Given the heights of the trees, determine the number of ways to select three trees satisfying the condition mentioned above. The first line contains a single integer n (3 ≤ n ≤ 100) — the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the trees. Output the number of ways to select three trees such that the middle tree\'s height is greater than the other two selected trees. For example, if the input is: ``` 5 1 3 2 4 2 ``` The output should be: ``` 2 ``` Explanation: - You can select trees with heights (1, 3, 2) at indices (1, 2, 3). - You can also select trees with heights (2, 4, 2) at indices (3, 4, 5). In the second sample test, there is only one peak at indices (1, 2, 3). In the third sample test, there are no valid peaks.","solution":"def count_peaks(n, heights): Counts the number of ways to select three trees such that the middle tree\'s height is greater than the heights of the two other trees on either side. Parameters: n (int): The number of trees. heights (list): A list containing the height of each tree. Returns: int: The number of ways to select such three trees. count = 0 for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: count += 1 return count"},{"question":"**Problem Statement:** You are provided with an array of n positive integers. According to the given operation, you can choose any two integers a[i] and a[j] (where i neq j ) from the array, and increase the value of a[i] by a[j] (i.e., a[i] = a[i] + a[j] ) while removing a[j] from the array. These operations can be performed any number of times. Your task is to determine the maximum possible value of the largest element in the array after performing any number of operations. # Input - The first line contains an integer n ( 2 le n le 10^5 ) - the number of elements in the array. - The second line contains n positive integers a_1, a_2, ldots, a_n ( 1 le a[i] le 10^4 ) - the elements of the array. # Output - Output a single integer - the maximum possible value of the largest element in the array after performing any number of operations. # Example **Input:** ``` 5 3 1 4 1 5 ``` **Output:** ``` 14 ``` **Explanation:** - Initially: [3, 1, 4, 1, 5] - Perform operation: Add 1 to 5 -> [3, 1, 4, 6] - Perform operation: Add 1 to 6 -> [3, 4, 7] - Perform operation: Add 3 to 7 -> [4, 10] - Perform operation: Add 4 to 10 -> [14] - Maximum possible value is 14.","solution":"def maximum_largest_element(n, arr): Returns the maximum possible value of the largest element in the array after performing any number of operations. Parameters: n (int): The number of elements in the array. arr (list): The list of positive integers. Returns: int: The maximum possible value of the largest element. return sum(arr)"},{"question":"Bob loves building block towers. He has a set of blocks of different heights. Bob wants to build a single tower using all these blocks such that the difference in heights between any two neighboring blocks in the tower is minimized. Write a function `minimizeHeightDifference` that takes an array of integers `blocks` where each integer represents the height of a block. The function should return the minimum possible difference in heights between any two neighboring blocks in the optimal tower configuration. # Function Signature ```python def minimizeHeightDifference(blocks: List[int]) -> int: pass ``` # Input - `blocks` (1 ≤ length of `blocks` ≤ 100000): An array of integers where each integer (1 ≤ `blocks[i]` ≤ 10^9) represents the height of a block. # Output - Return the minimum possible difference in heights between any two neighboring blocks in the optimal tower configuration as a single integer. # Example Example 1 **Input:** ```python blocks = [3, 7, 8, 1, 2] ``` **Output:** ```python 1 ``` **Explanation:** One optimal tower configuration is [1, 2, 3, 7, 8]. The minimum difference between any two neighboring blocks is 1. Example 2 **Input:** ```python blocks = [10, 20, 30] ``` **Output:** ```python 10 ``` **Explanation:** The optimal tower configuration is [10, 20, 30]. The minimum difference between any two neighboring blocks is 10. # Notes - All blocks must be used in the tower. - The function should aim to minimize the maximum difference between heights of neighboring blocks after reordering the blocks.","solution":"from typing import List def minimizeHeightDifference(blocks: List[int]) -> int: Returns the minimum possible difference in heights between any two neighboring blocks in the optimal tower configuration. if not blocks or len(blocks) == 1: return 0 blocks.sort() # Sort the blocks to arrange them in non-decreasing order min_difference = float(\'inf\') for i in range(1, len(blocks)): difference = blocks[i] - blocks[i - 1] if difference < min_difference: min_difference = difference return min_difference"},{"question":"In a certain library, books are organized into different categories based on their genre. Each genre is assigned an integer ID between 1 to 5, where: - 1 represents Fiction - 2 represents Non-Fiction - 3 represents Mystery - 4 represents Science Fiction - 5 represents Biography The library\'s database contains a list of books, each described by its title and the genre ID. Your task is to write a program that classifies the books based on their titles. The titles of the books may contain certain keywords that can help in their classification. For example, if the title contains the word \\"Detective\\" or \\"Mystery\\", it is likely to fall under the genre Mystery (ID 3). The program should take the title of a book as input and output the predicted genre ID. The database of known keywords with their corresponding genre IDs is provided below: - Fiction: \\"Novel\\", \\"Story\\", \\"Tale\\" - Non-Fiction: \\"Essay\\", \\"Memoir\\", \\"Narrative\\" - Mystery: \\"Detective\\", \\"Mystery\\", \\"Crime\\" - Science Fiction: \\"Science\\", \\"Future\\", \\"Alien\\" - Biography: \\"Life\\", \\"Biography\\", \\"Autobiography\\" The program will receive the title of the book as input, and you need to output the predicted genre ID. If the title contains multiple keywords from different genres, consider the genre with the highest ID observed in the title. If the title does not match any keywords from the database, output the number 0. **Input format:** - A single line containing the title of the book. **Output format:** - A single integer representing the genre ID of the book. **Examples:** ``` Input: The Future of Science Output: 4 Input: Life Story of a Detective Output: 5 Input: Unknown Title Output: 0 ```","solution":"def classify_book(title): Classifies the book based on its title and returns the genre ID. Parameters: title (str): The title of the book. Returns: int: The genre ID based on the keywords in the title. genre_keywords = { 1: [\\"Novel\\", \\"Story\\", \\"Tale\\"], 2: [\\"Essay\\", \\"Memoir\\", \\"Narrative\\"], 3: [\\"Detective\\", \\"Mystery\\", \\"Crime\\"], 4: [\\"Science\\", \\"Future\\", \\"Alien\\"], 5: [\\"Life\\", \\"Biography\\", \\"Autobiography\\"] } highest_genre_id = 0 for genre_id, keywords in genre_keywords.items(): for keyword in keywords: if keyword.lower() in title.lower(): highest_genre_id = max(highest_genre_id, genre_id) return highest_genre_id"},{"question":"You are given an integer array `nums` and an integer `k`. Find a subarray of `nums` of length `k` that has the minimum sum. If there is a tie, return the first such subarray. Write a function: ```python def find_min_sum_subarray(nums: List[int], k: int) -> List[int]: pass ``` # Input - A list `nums` of integers with length between 1 and 10^5. Each integer in `nums` is between -10^4 and 10^4. - An integer `k` which is less than or equal to the length of `nums`. # Output - A list of integers representing the subarray of length `k` that has the minimum sum. # Example Example 1: Input: ```python nums = [1, 4, 2, 5, 3] k = 2 ``` Output: ```python [1, 4] ``` Explanation: [1, 4] has the sum 5, which is the minimum sum among all subarrays of length 2. Example 2: Input: ```python nums = [1, 2, -1, 4, 5] k = 1 ``` Output: ```python [-1] ``` Explanation: [-1] has the sum -1, which is the minimum sum among all subarrays of length 1. Due to only one element, it is also the subarray itself. # Constraints: - The length of `nums` is between 1 and 10^5. - Each element in `nums` is between -10^4 and 10^4. - 1 ≤ k ≤ length of `nums`. The function should prioritize time and space efficiency, ideally achieving an O(n) solution where `n` is the length of `nums`.","solution":"from typing import List def find_min_sum_subarray(nums: List[int], k: int) -> List[int]: min_sum = float(\'inf\') current_sum = sum(nums[:k]) min_start_index = 0 for i in range(len(nums) - k + 1): if i == 0: current_sum = sum(nums[:k]) else: current_sum = current_sum - nums[i - 1] + nums[i + k - 1] if current_sum < min_sum: min_sum = current_sum min_start_index = i return nums[min_start_index:min_start_index + k]"},{"question":"You have recently joined a software company and your first task is to optimize the software that is being used to track the packages inside a warehouse. The warehouse is modeled as a grid, where each cell can either be empty or contain an obstacle. Your job is to find the shortest path from the entrance to the exit of the warehouse. The warehouse grid is represented as a 2D list of integers, where 0 represents an empty cell and 1 represents an obstacle. The entrance is located at the top-left cell (0,0) and the exit is located at the bottom-right cell (n-1,n-1), where n is the size of the grid. You can move up, down, left, or right if the cell in that direction is empty. Write a function `shortest_path` that takes a 2D list representing the warehouse grid and returns the length of the shortest path from the entrance to the exit. If there is no path, return -1. **Input:** - A 2D list of integers representing the warehouse grid. **Output:** - An integer representing the length of the shortest path from the entrance to the exit, or -1 if no path exists. **Constraints:** - The grid size, n x n, will not exceed 100. - Example grid input: [[0, 1, 2], [1, 0, 1], [1, 0, 0]] **Example:** Input: ``` [ [0, 1, 0], [0, 0, 0], [1, 0, 0] ] ``` Output: ``` 4 ``` In the above example, the shortest path is from (0, 0) -> (1, 0) -> (1, 1) -> (1, 2) -> (2, 2), and its length is 4.","solution":"from collections import deque def shortest_path(grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] n = len(grid) if not grid or grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n - 1 and col == n - 1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"You are a detective investigating a mysterious code that consists of a sequence of n characters. Each character is either \'L\', \'R\', \'U\', or \'D\', representing moving left, right, up, and down respectively. The sequence represents the path someone took on a 2D plane starting from the origin (0, 0). You found a note that states you can modify the sequence by removing some characters such that the remaining sequence will form a closed path, meaning the person ends up back at the origin. Additionally, you have to minimize the number of characters removed to achieve this. Write a program that takes the sequence of movements and outputs the minimum number of characters that need to be removed to make the path closed. If the path is already closed, the output should be 0. The first and only line of the input contains a single integer n (1 leq n leq 200,000) followed by a string s of length n consisting of characters \'L\', \'R\', \'U\', and \'D\'. Output a single integer — the minimum number of characters removed to make the path closed. **Example:** Input: 7 ULLRDUR Output: 1 **Explanation:** - Original movement ends at (1, 1). - By removing one \'U\', the modified movement \\"LLRDUR\\" ends at the origin, making it a closed path.","solution":"def min_removals_to_closed_path(n, s): Returns the minimum number of removals needed to make the path closed. move_counts = {\'L\': 0, \'R\': 0, \'U\': 0, \'D\': 0} for move in s: move_counts[move] += 1 horizontal_moves = abs(move_counts[\'L\'] - move_counts[\'R\']) vertical_moves = abs(move_counts[\'U\'] - move_counts[\'D\']) return horizontal_moves + vertical_moves"},{"question":"You are provided with two arrays of integers, nums1 and nums2, and an integer k. Merge these two arrays into one sorted array in non-decreasing order and find the k-th smallest element in the merged array. The first line of input contains two positive integers n and m, representing the lengths of nums1 and nums2 respectively. The second line contains n integers, the elements of nums1. The third line contains m integers, the elements of nums2. The fourth line contains the integer k (1 ≤ k ≤ n + m). Output a single integer, the k-th smallest element in the merged sorted array. Example: Input: 3 4 1 3 5 2 4 6 8 5 Output: 5","solution":"def find_kth_smallest_element(nums1, nums2, k): Merges two sorted lists and returns the k-th smallest element in the merged sorted array. :param nums1: List of integers :param nums2: List of integers :param k: Integer representing the k-th position (1-indexed) :return: k-th smallest element in the merged list merged_array = sorted(nums1 + nums2) return merged_array[k-1]"},{"question":"John is a gardener, and he wants to plant different types of trees in his garden. He has n trees to plant, each tree has a certain height and width. He wants to organize his garden in a visually appealing way by arranging the trees in a single row from left to right in order of increasing height. However, if two trees have the same height, they should be arranged in order of increasing width. The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of trees. The next n lines describe the trees. Each line contains two integers h and w (1 ≤ h, w ≤ 10^9) — the height and the width of a tree respectively. Your task is to print the ordering of trees, such that the trees are sorted by height first and then by width. # Example **Input:** ``` 3 5 2 3 6 5 3 ``` **Output:** ``` 3 6 5 2 5 3 ``` In the input, there are 3 trees. The first tree has a height of 5 and width of 2. The second tree has a height of 3 and width of 6. The third tree has a height of 5 and width of 3. These trees should be sorted in ascending order of height first and then width if heights are the same. Therefore, the output should show the trees in the following order: (3, 6), (5, 2), (5, 3).","solution":"def sort_trees(n, trees): Sort the trees by height and then by width. Parameters: n (int): The number of trees. trees (list of tuples): A list of tuples where each tuple contains the height and width of a tree. Returns: list of tuples: The sorted list of trees. # Sort the list of trees by height first (ascending), and by width if heights are the same (ascending) sorted_trees = sorted(trees, key=lambda x: (x[0], x[1])) return sorted_trees"},{"question":"Given two integer arrays, nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays, and you may return the result in any order. You must solve this problem without using any built-in library functions for set operations. # Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the first array. - The second line contains n space-separated integers, the elements of the first array nums1. - The third line contains an integer m (1 ≤ m ≤ 1000) — the number of elements in the second array. - The fourth line contains m space-separated integers, the elements of the second array nums2. # Output Output an array of integers, the intersection of nums1 and nums2. # Example Input 6 4 9 5 4 2 9 5 9 4 9 8 4 Output 4 9 4 9 # Explanation In this example, the intersection of the two arrays is [4, 9, 4, 9]. Note that each element appears in the result as many times as it appears in both arrays. Elements 5, 2, and 8 are not included as they do not appear in both arrays.","solution":"def array_intersection(nums1, nums2): Given two lists, returns a list of their intersection. Each element in the result must appear as many times as it shows in both arrays. # Initialize dictionary to count occurrences of elements in nums1 count_map = {} for num in nums1: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 # Initialize list to hold the intersection result intersection = [] # Traverse nums2 and collect intersection elements for num in nums2: if num in count_map and count_map[num] > 0: intersection.append(num) count_map[num] -= 1 if count_map[num] == 0: del count_map[num] return intersection"},{"question":"You are given an integer array `nums` consisting of `n` elements, where each element represents the number of candies in a basket. You are allowed to select exactly `k` baskets and distribute their candies in such a way that the difference between the maximum number of candies in any selected basket and the minimum number of candies in any selected basket is minimized. Determine the minimum possible difference between the maximum and minimum number of candies after distributing them across `k` selected baskets. The first line of the input contains two integers `n` and `k` (`1 <= k <= n <= 10^5`) — the number of baskets and the number of baskets you have to select. The second line contains `n` integers `nums[i]` (`0 <= nums[i] <= 10^4`), representing the number of candies in each basket. Output a single integer — the minimum possible difference between the maximum and minimum number of candies after selecting exactly `k` baskets. **Example:** **Input:** ``` 7 3 1 5 9 4 7 2 3 ``` **Output:** ``` 2 ``` **Explanation:** - Select baskets with 3, 4, and 5 candies. The maximum number of candies in these selected baskets is 5, and the minimum is 3. Thus, the difference is 2, which is the smallest possible difference.","solution":"def min_candies_difference(n, k, nums): Returns the minimum possible difference between the maximum and minimum number of candies after selecting exactly k baskets. :param n: int - number of baskets :param k: int - number of baskets to select :param nums: list of int - number of candies in each basket :return: int - minimum possible difference nums.sort() min_diff = float(\'inf\') for i in range(n - k + 1): diff = nums[i + k - 1] - nums[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"There is a major technology conference week happening in TechVille, and the organizers want to ensure that each speaker\'s schedule does not clash with others. Speakers\' schedules are given as a list of time intervals during which they will be speaking. If any two intervals overlap, it means that those two speakers cannot be scheduled at the same time. The task is to determine the minimum number of rooms required to accommodate all the speakers without any schedule conflicts. Your task is to write a function that takes a list of tuples as input, where each tuple contains two integers representing the start and end times of a speaker\'s talk. The function should return the minimum number of rooms required for the conference. The input list will be of the form `[(s1, e1), (s2, e2), ..., (sn, en)]` where si is the start time and ei is the end time of the ith speaker. The times provided are in a 24-hour format without any dates (e.g., `(9, 11)` means a talk starts at 9 AM and ends at 11 AM). Times are inclusive of the start time and exclusive of the end time, meaning a talk ending at time `t` does not conflict with another talk starting at time `t`. # Input A list of n tuples `(s1, e1), (s2, e2), ..., (sn, en)` representing the times during which each speaker is scheduled to speak. - 1 ≤ n ≤ 5000 - 0 ≤ si < ei ≤ 24 # Output An integer representing the minimum number of rooms required. # Example ```python def minMeetingRooms(intervals): Calculates the minimum number of meeting rooms required. :param intervals: List[Tuple[int, int]]: A list of tuples representing start and end times of speakers\' talks. :return: int: The minimum number of rooms required to accommodate all speakers without any conflicts. # Your code here # Example usage print(minMeetingRooms([(1, 5), (2, 6), (8, 9), (8, 9)])) # Output: 2 print(minMeetingRooms([(0, 30), (5, 10), (15, 20)])) # Output: 2 print(minMeetingRooms([(7, 10), (2, 4)])) # Output: 1 ``` # Explanation In the first example, there are overlapping schedules between `(1, 5)` and `(2, 6)`, so at least two rooms are required. The talks `(8, 9)` do not add any additional room requirements as they are non-overlapping with any other talks. In the second example, the overlapping talks `(0, 30)` and `(5, 10)` necessitate two rooms. In the third example, there are no overlapping schedules, hence only one room is needed.","solution":"def minMeetingRooms(intervals): Calculates the minimum number of meeting rooms required. :param intervals: List[Tuple[int, int]]: A list of tuples representing start and end times of speakers\' talks. :return: int: The minimum number of rooms required to accommodate all speakers without any conflicts. if not intervals: return 0 # Separate start and end times starts = sorted([i[0] for i in intervals]) ends = sorted([i[1] for i in intervals]) start_ptr = 0 end_ptr = 0 used_rooms = 0 while start_ptr < len(intervals): # If the current start time is less than the current end time, we need a new room if starts[start_ptr] < ends[end_ptr]: used_rooms += 1 start_ptr += 1 else: # Room becomes free end_ptr += 1 start_ptr += 1 return used_rooms"},{"question":"You are given a grid of size n times m filled with non-negative integers. Two cells are said to be adjacent if they share a common side. You need to find the length of the longest path in the grid such that each step in the path moves to an adjacent cell and the value of the cell in the next step is strictly greater than the value of the current cell. The first line contains two integers n, m (1 leq n, m leq 100), representing the dimensions of the grid. Each of the next n lines contains m integers, representing the elements of the grid a_{ij} (0 leq a_{ij} leq 10^4). Output a single integer representing the length of the longest path satisfying the conditions. # Example Input: ``` 3 3 9 9 4 6 6 8 2 1 1 ``` Output: ``` 4 ``` Explanation: The longest path is 2 -> 6 -> 9 -> 9, which has a length of 4.","solution":"def longest_increasing_path(grid): def dfs(x, y): if not dp[x][y]: val = grid[x][y] dp[x][y] = 1 + max( dfs(x - 1, y) if x and val > grid[x - 1][y] else 0, dfs(x + 1, y) if x < n - 1 and val > grid[x + 1][y] else 0, dfs(x, y - 1) if y and val > grid[x][y - 1] else 0, dfs(x, y + 1) if y < m - 1 and val > grid[x][y + 1] else 0 ) return dp[x][y] if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) dp = [[0] * m for _ in range(n)] return max(dfs(x, y) for x in range(n) for y in range(m))"},{"question":"You are given an array of n integers and a target integer sum. Your task is to find all unique triplets in the array that sum up to the given target sum. Note that each triplet should be sorted in ascending order, and the output should not contain duplicate triplets. The first line of the input contains two integers n and target (3 leq n leq 10^3, {-10^5} leq target leq 10^5). The second line contains n integers a_1, ldots, a_n ({-10^5} leq a_i leq 10^5). Output all unique triplets that sum up to the target. Each triplet should be printed on a new line in ascending order. The triplets themselves should be in ascending order of the first element, and in case of a tie, ascending order of the second element, and so on. In the sample case, the unique triplets that sum up to the target `0` are:","solution":"def three_sum(nums, target): Returns all unique triplets in the list that sum up to the given target sum. nums.sort() n = len(nums) triplets = set() for i in range(n-2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 # Convert set to list and sort to ensure correct order result = sorted(list(triplets)) return result"},{"question":"You are given an array of integers representing the number of visitors to a website on each day over a certain period. The website owner wants to calculate the maximum average number of visitors over any continuous subarray of length k. Given an array of n integers and an integer k, find the maximum average value of any subarray of length k. **Input:** - The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100,000). - The second line contains n integers, each representing the number of visitors on a particular day. Each integer falls within a range [-10^4, 10^4]. **Output:** - Print a single floating-point number — the maximum average value of any subarray of length k. **Explanation:** Consider an array of visitors represented as [4, 2, -3, 5, 6, -1] and k = 3. The possible subarrays of length 3 are: - [4, 2, -3] - [2, -3, 5] - [-3, 5, 6] - [5, 6, -1] The averages are: - (4 + 2 - 3) / 3 = 1 - (2 - 3 + 5) / 3 = 4/3 ≈ 1.33 - (-3 + 5 + 6) / 3 = 8/3 ≈ 2.67 - (5 + 6 - 1) / 3 = 10/3 ≈ 3.33 The maximum average is 3.33. **Note:** - Your result should be accurate up to 5 decimal places. **Sample Input:** ``` 6 3 4 2 -3 5 6 -1 ``` **Sample Output:** ``` 3.33333 ```","solution":"def max_average_subarray(n, k, visitors): Find the maximum average value of any subarray of length k. :param n: Integer, number of elements in the visitors array :param k: Integer, length of the subarray :param visitors: List of integers representing the number of visitors each day :return: Float, the maximum average value of any subarray of length k # Calculate the sum of the first k elements max_sum = current_sum = sum(visitors[:k]) # Traverse the array from the k-th element to the end for i in range(k, n): # Update the current sum by sliding the window current_sum += visitors[i] - visitors[i - k] # Update the max_sum if the current sum is greater if current_sum > max_sum: max_sum = current_sum # Return the maximum average return max_sum / k # Example usage: # n, k = 6, 3 # visitors = [4, 2, -3, 5, 6, -1] # print(f\\"{max_average_subarray(n, k, visitors):.5f}\\") # Output: 3.33333"},{"question":"Given an array of integers, determine if there are three distinct indices i, j, k in the array such that the elements at those indices form a target sum. Write a function `findTriplets` that receives the list of integers `arr` and the integer `target` and returns a boolean indicating whether any such triplet exists. # Input - An integer array `arr` of length `n` where 3 ≤ n ≤ 10^4. - An integer `target`. # Output - A boolean value: `True` if there are indices i, j, k such that arr[i] + arr[j] + arr[k] equals target, otherwise `False`. # Example Example 1: ```plaintext Input: arr = [1, 2, 3, 4, 5] target = 9 Output: True Explanation: There are triplets (1, 3, 5) and (2, 3, 4) which sum to 9. ``` Example 2: ```plaintext Input: arr = [1, 2, 3, 4, 5] target = 15 Output: False Explanation: No triplet in the array sums up to 15. ``` # Function Signature ```python def findTriplets(arr: List[int], target: int) -> bool: # your code here ``` # Constraints - The function should optimize for time and space complexity as much as possible, keeping in mind the large potential size of the input `n`. # Hints - Consider sorting the array for a potential O(n^2) solution. - Think about using two pointers or a hash-based approach to reduce time complexity.","solution":"def findTriplets(arr, target): arr.sort() n = len(arr) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"You are given a list of words, and your task is to find the longest word that can be constructed by concatenating other words from the given list (including repeated concatenation of the same word). For example, if the list is `[\\"cat\\", \\"cats\\", \\"dog\\", \\"catsdogcats\\", \\"dogcatsdog\\", \\"hippopotamuses\\", \\"rat\\", \\"ratcatdogcat\\"]`, the longest word is `\\"ratcatdogcat\\"`, since it can be constructed by concatenating `\\"rat\\"`, `\\"cat\\"`, `\\"dog\\"`, and `\\"cat\\"`. Input: - The first line contains an integer `n` (1 ≤ `n` ≤ 1000) – the number of words in the list. - The next `n` lines contain one word each. Each word consists only of lowercase English letters and has length between 1 and 100. Output: - Return the longest word that can be constructed by concatenating other words. If there are multiple results with the same length, return the lexicographically smallest one. If no such word exists, return an empty string. Note: Pay attention to the efficiency of your solution, as the total length of all words combined can be large.","solution":"def longest_concatenated_word(words): words.sort(key=len, reverse=True) word_set = set(words) def can_construct(word, full_word): if word in word_set and word != full_word: return True for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in word_set and can_construct(suffix, full_word): return True return False for word in words: if can_construct(word, word): return word return \\"\\" # Sample usage words = [\\"cat\\", \\"cats\\", \\"dog\\", \\"catsdogcats\\", \\"dogcatsdog\\", \\"hippopotamuses\\", \\"rat\\", \\"ratcatdogcat\\"] print(longest_concatenated_word(words)) # Output: \\"ratcatdogcat\\""},{"question":"Alice is learning about strings and wants to solve an interesting problem. You are given a string S consisting of lowercase English letters and a set of operations that you can perform on this string. The goal is to determine the longest palindromic substring that can be formed after performing exactly one of these operations: 1. Swap any two characters in the string. 2. Remove one character from the string. Note that by definition, a palindromic string reads the same forwards and backwards. Input Format: - The first line contains a single integer T, the number of test cases. - The next T lines each contain a single string S. Output Format: For each test case, output an integer — the length of the longest palindromic substring that can be obtained after performing exactly one of the allowed operations. Examples: Input: 3 abc aaa abab Output: 2 3 3 Explanation: - For the first test case \\"abc\\", swapping \'a\' and \'c\' gives \\"cba\\" which has a palindromic substring \\"c\\". - For the second test case \\"aaa\\", it is already a palindrome of length 3. - For the third test case \\"abab\\", swapping \'b\' and \'a\' gives \\"abba\\" which is a palindrome of length 4, and both \\"abab\\" and \\"baba\\" also contain palindromic substrings \\"aba\\".","solution":"def max_palindrome_after_one_operation(S): Determines the length of the longest palindromic substring that can be formed after exactly one operation (swap or remove). if S == S[::-1]: # If the string is already a palindrome return len(S) def is_palindrome(s): return s == s[::-1] # Try removing one character max_len = 0 for i in range(len(S)): temp = S[:i] + S[i + 1:] if is_palindrome(temp): max_len = max(max_len, len(temp)) # Since swapping two characters might always allow us to form a palindrome # of at least 2 if the length is greater than 1 if len(S) > 1: max_len = max(max_len, 2) return max_len def solve(T, strings): results = [] for S in strings: results.append(max_palindrome_after_one_operation(S)) return results"},{"question":"Given a linked list, determine if it has a cycle in it. A linked list has a cycle if a node\'s next pointer points back to a previous node in the list, creating a loop. For example, the following linked list has a cycle: ``` 3 -> 2 -> 0 -> -4 ^ | | | +---------+ ``` Here \'2\' points back to \'2\' and thereby forms a cycle. Your task is to write a function in Python that detects if a cycle exists in the linked list. You are given one class to help you in defining the linked list nodes: ```python class ListNode: def __init__(self, x): self.val = x self.next = None ``` Implement the following function: ```python def hasCycle(head: ListNode) -> bool: # your code here ``` **Constraints:** - The number of nodes in the list is in the range `[0, 10^4]`. - `-10^5 <= Node.val <= 10^5` - The linked list is allowed to be empty (in such case, it should return `False`). **Example:** ```python # Example 1: Input: head = [3,2,0,-4], pos = 1 Output: True Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). # Example 2: Input: head = [1,2], pos = 0 Output: True Explanation: There is a cycle in the linked list, where the tail connects to the 0th node. # Example 3: Input: head = [1], pos = -1 Output: False Explanation: There is no cycle in the linked list. ```","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head: ListNode) -> bool: Determines if the linked list has a cycle. Uses Floyd\'s Tortoise and Hare algorithm to detect cycle. :param head: The head of the linked list. :return: True if there is a cycle in the linked list, False otherwise. if not head or not head.next: return False slow = head fast = head.next while slow != fast: if not fast or not fast.next: return False slow = slow.next fast = fast.next.next return True"},{"question":"Given a string S and a list of word queries, find whether each word in the query list can be formed by deleting some (possibly none) of the characters in the string S without reordering the remaining characters. For each word in the query list, output \\"YES\\" if it can be formed, otherwise output \\"NO\\". # Input - The first line contains the string S (1 ≤ |S| ≤ 1000). - The second line contains an integer Q (1 ≤ Q ≤ 100). - The following Q lines each contain a single query string. # Output - For each query string, output \\"YES\\" if the query string can be formed from S, otherwise output \\"NO\\". # Example Input ``` abcde 4 a ac bb de ``` Output ``` YES YES NO YES ``` # Note - In the first query, \\"a\\" is present in \\"abcde\\". - In the second query, \\"ac\\" can be formed by deleting \\"b\\" and \\"d\\" in the middle. - In the third query, \\"bb\\" cannot be formed since there is only one \\"b\\" in \\"abcde\\". - In the fourth query, \\"de\\" can be formed by deleting the first three characters \\"abc\\".","solution":"def can_form_word(S, words): results = [] for word in words: index_s = 0 index_w = 0 while index_s < len(S) and index_w < len(word): if S[index_s] == word[index_w]: index_w += 1 index_s += 1 if index_w == len(word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Polycarp is a chef at a prestigious restaurant known for its unique dishes. He recently invented a layered cake called the \\"Perfect Layer Cake.\\" To ensure each cake has a perfect balance of flavors, Polycarp needs to follow a strict sequence of layers. Each layer of the cake is represented by an integer from 1 to k, denoting different flavors, and every cake should have exactly k layers. The sequence of layers must satisfy the following conditions: 1. Every integer from 1 to k must appear exactly once. 2. The sum of the absolute differences between consecutive layers should be minimized. Polycarp is given the value of k and needs your help to determine the permutation of layers that results in the minimum possible sum of absolute differences between consecutive layers. Write a function minimum_layer_cake(k) that receives an integer k (2 ≤ k ≤ 10^5) and returns a list containing the permutation of layers that results in the minimum possible sum of absolute differences between consecutive layers. # Sample Input ```python minimum_layer_cake(4) ``` # Sample Output ```python [1, 2, 3, 4] ``` # Explanation For k = 4, one of the possible solutions is [1, 2, 3, 4]. The sum of absolute differences between consecutive layers is |1-2| + |2-3| + |3-4| = 1 + 1 + 1 = 3, which is the minimum possible sum for k = 4.","solution":"def minimum_layer_cake(k): Returns the permutation of layers (1 to k) that results in the minimum possible sum of absolute differences between consecutive layers. # The minimum sum of absolute differences for consecutive layers is achieved by the natural order 1 to k. return list(range(1, k + 1))"},{"question":"Given a list of n integers, you need to answer q queries. Each query consists of two integers l and r (1 <= l <= r <= n). For each query, you have to find the number of unique integers in the subarray from index l to index r (both inclusive). Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers in the list. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ a_i ≤ 10^6), the elements of the list. - The third line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. - The next q lines each contain two integers l and r, the indices of the subarrays. Output: For each query, print the number of unique integers in the subarray from index l to index r in a single line.","solution":"def count_unique_subarray_elements(n, arr, queries): results = [] for l, r in queries: subarray = arr[l-1:r] unique_elements = set(subarray) results.append(len(unique_elements)) return results"},{"question":"You are tasked with developing an interactive program to simulate a bookstore inventory system. Clients can perform various operations such as adding, removing, purchasing books, and checking the current stock. Implement a system that manages these operations efficiently. Your program should support the following operations: 1. \\"ADD <BOOK_NAME> <QUANTITY> <PRICE>\\": Adds a specified quantity of a book to the inventory with the given price. If the book already exists, update its quantity and price. 2. \\"REMOVE <BOOK_NAME> <QUANTITY>\\": Removes a specified quantity of a book from the inventory. If the book\'s quantity falls to zero or below, it should be removed from the inventory. 3. \\"PURCHASE <BOOK_NAME> <QUANTITY> <BALANCE>\\": Simulates the purchase of a specified quantity of a book from the inventory. If there is enough stock and the client has enough balance, it deducts the quantity from the inventory and the total price from the balance and returns the remaining balance. If the purchase cannot be completed, it returns \\"INSUFFICIENT_FUNDS\\" or \\"OUT_OF_STOCK\\" as appropriate. 4. \\"CHECK_STOCK <BOOK_NAME>\\": Returns the current quantity of the specified book in the inventory. If the book doesn\'t exist, it returns \\"NOT_IN_STOCK\\". 5. \\"CHECK_BALANCE <BOOK_NAME>\\": Returns the price of the specified book. If the book doesn\'t exist, it returns \\"NOT_IN_STOCK\\". Input: - The first line contains an integer **q** (1 ≤ q ≤ 10^5) — the number of operations. - Each of the following **q** lines contains a single operation, described above. Output: - For each \\"PURCHASE\\" operation, output the remaining balance or the appropriate message if the purchase cannot be completed. - For each \\"CHECK_STOCK\\" and \\"CHECK_BALANCE\\" operation, output the current stock or price, or the appropriate message if the book is not in the inventory. Example: Input: ``` 8 ADD HarryPotter 10 15 ADD Hobbit 5 20 CHECK_STOCK HarryPotter PURCHASE HarryPotter 3 50 CHECK_BALANCE HarryPotter REMOVE Hobbit 5 CHECK_STOCK Hobbit CHECK_BALANCE Hobbit ``` Output: ``` 10 5 12 NOT_IN_STOCK NOT_IN_STOCK ```","solution":"def bookstore_inventory_system(operations): inventory = {} results = [] for operation in operations: parts = operation.split() cmd = parts[0] book_name = parts[1] if cmd == \\"ADD\\": quantity = int(parts[2]) price = float(parts[3]) if book_name in inventory: inventory[book_name][\\"quantity\\"] += quantity inventory[book_name][\\"price\\"] = price else: inventory[book_name] = {\\"quantity\\": quantity, \\"price\\": price} elif cmd == \\"REMOVE\\": quantity = int(parts[2]) if book_name in inventory: inventory[book_name][\\"quantity\\"] -= quantity if inventory[book_name][\\"quantity\\"] <= 0: del inventory[book_name] elif cmd == \\"PURCHASE\\": quantity = int(parts[2]) balance = float(parts[3]) if book_name in inventory: if inventory[book_name][\\"quantity\\"] < quantity: results.append(\\"OUT_OF_STOCK\\") else: total_cost = quantity * inventory[book_name][\\"price\\"] if balance < total_cost: results.append(\\"INSUFFICIENT_FUNDS\\") else: inventory[book_name][\\"quantity\\"] -= quantity results.append(balance - total_cost) if inventory[book_name][\\"quantity\\"] == 0: del inventory[book_name] else: results.append(\\"OUT_OF_STOCK\\") elif cmd == \\"CHECK_STOCK\\": if book_name in inventory: results.append(inventory[book_name][\\"quantity\\"]) else: results.append(\\"NOT_IN_STOCK\\") elif cmd == \\"CHECK_BALANCE\\": if book_name in inventory: results.append(inventory[book_name][\\"price\\"]) else: results.append(\\"NOT_IN_STOCK\\") return results"},{"question":"You are given an array of integers representing the scores of students in a class. You need to determine the smallest difference between the highest and lowest scores in any subset of students having at least two members. The first line of input contains an integer n, the number of students (2 ≤ n ≤ 10^5). The second line contains n integers separated by spaces, representing the scores of the students (1 ≤ score ≤ 10^9). Output the smallest difference between the highest and lowest scores in any subset of students having at least two members. Example: Input: 5 10 20 30 40 50 Output: 10 Explanation: The subset {10, 20} has the smallest difference of 10.","solution":"def smallest_difference(scores): Returns the smallest difference between the highest and lowest scores in any subset of students having at least two members. # Sort the scores to make it easier to find the smallest difference. scores.sort() # Initialize the smallest difference to a large number. min_difference = float(\'inf\') # Iterate through the sorted list and find the smallest difference # between consecutive elements. for i in range(1, len(scores)): difference = scores[i] - scores[i-1] if difference < min_difference: min_difference = difference return min_difference"},{"question":"Toad Rash has a specific interest in analyzing strings in competitive programming. Now, given a string p consisting of lowercase English letters, Rash wants to determine if it is possible to rearrange the letters of the string p in such a way that no two adjacent letters are the same. The input of the problem consists of a single line containing the string p (1 leq |p| leq 50000). Output \\"YES\\" if it is possible to rearrange the string such that no two adjacent letters are the same. Otherwise, output \\"NO\\". # Example **Input:** ``` aabb ``` **Output:** ``` YES ``` **Explanation:** One possible way to rearrange the string to satisfy the condition is \\"abab\\". **Example 2** **Input:** ``` aaab ``` **Output:** ``` NO ``` **Explanation:** It is not possible to rearrange the string such that no two adjacent letters are the same, as there will always be a consecutive \'a\'.","solution":"from collections import Counter def can_rearrange_no_adjacent_same(p): Determines if the string can be rearranged such that no two adjacent characters are the same. Parameters: p (str): Input string. Returns: str: \\"YES\\" if possible to rearrange, otherwise \\"NO\\". char_counts = Counter(p) max_count = max(char_counts.values()) # If the maximum count of any character is more than half of the length of string rounded up, # then it\'s not possible to rearrange without adjacent same characters. if max_count > (len(p) + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given an array of integers where each integer represents a stock price on a given day. You can buy and sell stocks multiple times to maximize your profit. However, you must wait at least one day after selling before buying again. Write a program that calculates the maximum possible profit you can achieve. The first line contains an integer n (1 leq n leq 10^5), the number of days. The second line contains n space-separated integers representing the stock prices on those days. Each price is an integer in the range [1, 10^9]. Your task is to determine the maximum profit you can achieve under the given constraint that you cannot engage in simultaneous transactions and must wait one day after each sale before you can make another purchase. Return the maximum profit you can achieve. # Example Input: ``` 7 1 2 3 0 2 6 7 ``` Output: ``` 8 ``` Explanation: Buy on day 1 (price=1) and sell on day 3 (price=3), profit = 3 - 1 = 2. Wait for day 4. Buy on day 5 (price=2) and sell on day 7 (price=7), profit = 7 - 2 = 5. Total profit = 2 + 5 = 7.","solution":"def max_profit(prices): Calculate the maximum profit you can achieve. :param prices: List of integers representing stock prices on given days. :return: Integer maximum profit. if not prices: return 0 n = len(prices) if n < 2: return 0 # Here dp[i][0] is the state when holding a stock on day i # dp[i][1] is the state when not holding a stock and not in cooldown on day i # dp[i][2] is the state when in cooldown (just sold) on day i dp = [[0] * 3 for _ in range(n)] # Initial states: dp[0][0] = -prices[0] # Buying stock at day 0 dp[0][1] = 0 # Not holding a stock and not in cooldown at day 0 dp[0][2] = 0 # Cannot be in cooldown on day 0 since nothing sold yet for i in range(1, n): dp[i][0] = max(dp[i-1][0], dp[i-1][1] - prices[i]) dp[i][1] = max(dp[i-1][1], dp[i-1][2]) dp[i][2] = dp[i-1][0] + prices[i] return max(dp[n-1][1], dp[n-1][2]) # Example usage n = 7 prices = [1, 2, 3, 0, 2, 6, 7] print(max_profit(prices)) # Output should be 8"},{"question":"You are given a binary tree with n nodes, each node having a value. You need to determine the longest path in the tree where the path values form a strictly increasing sequence. The tree is defined using n lines, each containing three integers: parent, child, and value. The parent and child are the index of the nodes (zero-indexed), and the value is an integer associated with the child node. The root node is assumed to be the node with index 0. Your task is to find the length of the longest strictly increasing path in the tree. The length is defined as the number of nodes in the path. Input: The first line contains an integer n (1 ≤ n ≤ 1000), the number of nodes in the tree. Each of the next n-1 lines contains three space-separated integers parent (0 ≤ parent < n), child (0 ≤ child < n), and value (-10^9 ≤ value ≤ 10^9) representing an edge between parent and child with an associated value. Output: Print a single integer, the length of the longest strictly increasing path in the tree. Example: Input: 5 0 1 1 0 2 5 1 3 3 1 4 4 Output: 3 Explanation: The longest strictly increasing path is 1 -> 3 -> 4, which has a length of 3.","solution":"from collections import defaultdict, deque def longest_increasing_path(n, edges): if n == 0: return 0 adj_list = defaultdict(list) values = [None] * n values[0] = float(\'-inf\') # Root node value for parent, child, value in edges: adj_list[parent].append((child, value)) values[child] = value max_length = 1 def dfs(node, prev_val): nonlocal max_length current_max_path = 1 for neighbor, value in adj_list[node]: if value > prev_val: path_length = dfs(neighbor, value) current_max_path = max(current_max_path, 1 + path_length) max_length = max(max_length, current_max_path) return current_max_path dfs(0, values[0]) return max_length # Example n = 5 edges = [(0, 1, 1), (0, 2, 5), (1, 3, 3), (1, 4, 4)] print(longest_increasing_path(n, edges)) # Output: 3"},{"question":"You are working on a project that involves analyzing the frequency of purchase transactions. Given a list of integers where each integer represents a unique customer ID, you need to find the customer who made the highest number of transactions. If there is more than one customer with the maximum number of transactions, you should return the customer with the smallest ID. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of transactions. - The second line contains n space-separated integers, each representing a customer ID. Output: - Print the customer ID who made the highest number of transactions. Example: Input: 7 1 2 3 1 2 1 2 Output: 1 In this example, customer 1 and customer 2 both made 3 transactions. Since customer 1 has the smaller ID, the output is 1.","solution":"def max_transactions_customer(n, transactions): from collections import Counter transaction_count = Counter(transactions) # Find the maximum number of transactions max_transactions = max(transaction_count.values()) # Get all customers with the maximum number of transactions customers_with_max_transactions = [ customer for customer, count in transaction_count.items() if count == max_transactions ] # Return the customer with the smallest ID among those with the maximum transactions return min(customers_with_max_transactions) # Example usage n = 7 transactions = [1, 2, 3, 1, 2, 1, 2] print(max_transactions_customer(n, transactions)) # Output: 1"},{"question":"You are given an array of n integers representing the profit of n stock transactions. Your task is to maximize the total profit by selecting non-overlapping transactions that adhere to the following condition: - Each transaction has a variable duration and a fixed profit. - Each transaction consists of a starting day and an ending day, and the days for different transactions cannot overlap. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of transactions. The next n lines contain three integers each: starti (1 ≤ starti ≤ 10^9), endi (starti ≤ endi ≤ 10^9), and profiti (1 ≤ profiti ≤ 10^9) — the starting day, ending day, and profit of the i-th transaction. Print a single integer — the maximum total profit achievable from non-overlapping transactions. # Example Input 4 1 3 50 4 6 60 7 9 70 2 5 40 # Example Output 180 In this example, selecting the transactions with the durations (1, 3), (4, 6), and (7, 9) will give a total profit of 50 + 60 + 70 = 180. The transaction (2, 5) is not included as it overlaps with the first and second transactions.","solution":"def max_profit(transactions): # Sort transactions by their end day transactions.sort(key=lambda x: x[1]) # Initialize an array for storing the maximum profit until each transaction n = len(transactions) dp = [0] * n # Find the maximum profit achievable by including each transaction for i in range(n): dp[i] = transactions[i][2] # profit if we take this transaction # Find the last non-overlapping transaction for j in range(i): if transactions[j][1] < transactions[i][0]: # end[j] < start[i] dp[i] = max(dp[i], dp[j] + transactions[i][2]) return max(dp) def main(): import sys input = sys.stdin.read() data = input.split() n = int(data[0]) transactions = [] index = 1 for _ in range(n): start = int(data[index]) end = int(data[index+1]) profit = int(data[index+2]) transactions.append((start, end, profit)) index += 3 print(max_profit(transactions)) if __name__ == \\"__main__\\": main()"},{"question":"A company has N employees (N ≥ 2) each represented by an integer ID (positive and unique). The employees are working on a project that requires pair programming, and each employee has a competency score, which is represented by a positive integer between 1 and 1000. Employees must form pairs to maximize the total productivity of the project. The productivity of a pair is calculated as the product of their competency scores. If N is odd, one employee will not be paired and will contribute zero productivity. Write a program that, given the IDs and competency scores of all employees, outputs the maximum total productivity that can be achieved and the pairs of employee IDs forming this maximum productivity. If N is odd, the output should also include the ID of the unpaired employee. The input consists of: 1. An integer N (2 ≤ N ≤ 1000), the number of employees. 2. N lines, each containing two space-separated integers: the employee ID and the competency score. The output should include: 1. The maximum total productivity on the first line. 2. The pairs of employee IDs contributing to the maximum productivity, one pair per line. If there is an unpaired employee, their ID should be printed on the last line. Sample Input: ``` 5 1 3 2 6 3 5 4 8 5 2 ``` Sample Output: ``` 61 1 4 2 3 5 ``` In this sample, the pairs (1, 4) and (2, 3) yield the highest productivity 24 + 30 = 54. Employee 5 is left unpaired and contributes zero to the total productivity, resulting in the total productivity of 54.","solution":"def max_productivity(n, employees): # Sort the employees by competency score in descending order employees.sort(key=lambda x: x[1], reverse=True) max_productivity = 0 pairs = [] unpaired_employee = None # Pair employees starting from highest competency score for i in range(1, n, 2): productivity = employees[i - 1][1] * employees[i][1] max_productivity += productivity pairs.append((employees[i - 1][0], employees[i][0])) # If there is an unpaired employee (when n is odd) if n % 2 == 1: unpaired_employee = employees[-1][0] return max_productivity, pairs, unpaired_employee # Input format: # N # ID1 Competency1 # ID2 Competency2 # ... def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) employees = [tuple(map(int, x.split())) for x in data[1:]] max_productivity_value, pairs, unpaired_employee = max_productivity(n, employees) print(max_productivity_value) for pair in pairs: print(pair[0], pair[1]) if unpaired_employee is not None: print(unpaired_employee)"},{"question":"You are given two arrays of integers, `arr1` and `arr2`, both of length `n`. You can perform the following operation on `arr1` any number of times: - Choose an index `i` (1 ≤ i ≤ n-1) and swap `arr1[i]` with `arr1[i+1]`. Your task is to determine if it\'s possible to sort `arr1` such that its elements are in the same order as `arr2`. The first line contains integer n (1 ≤ n ≤ 10^5). The second line contains n integers, the elements of `arr1`. The third line contains n integers, the elements of `arr2`. If it is possible to sort `arr1` to match `arr2`, print \\"YES\\". Otherwise, print \\"NO\\".","solution":"def can_sort_to_match(n, arr1, arr2): Determines if it\'s possible to sort arr1 in such a way that it matches arr2 using the specified swapping operation. def bubble_sort_with_swap(arr): swapped = True while swapped: swapped = False for i in range(n - 1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] swapped = True return arr sorted_arr1 = bubble_sort_with_swap(arr1[:]) return \\"YES\\" if sorted_arr1 == arr2 else \\"NO\\""},{"question":"# Problem: Find Number of Subsentence in a Sentence You have been tasked with helping to analyze some text data. Given a sentence, you need to determine the number of times a given subsentence appears in it. For the context of this problem, a \\"subsentence\\" is defined as a contiguous sequence of words. The input consists of a series of sentences and subsentences. For each subsentence, determine how many times it appears as a contiguous sequence in the given sentence. **Input Format:** 1. First line contains an integer `n` (1 ≤ n ≤ 100), the number of test cases. 2. For each test case: - First line contains a string `s` which represents the sentence. - Second line contains an integer `m` (1 ≤ m ≤ 100), the number of subsentences. - The next `m` lines each contain a string representing the subsentence. **Output Format:** For each test case, for each subsentence, print the number of occurrences of that subsentence as a contiguous sequence in the sentence in separate lines. **Example:** **Input:** ``` 2 the quick brown fox jumps over the lazy dog 3 the quick brown fox jumps lazy dog hello world 2 hello world ``` **Output:** ``` 1 1 1 1 1 ``` **Explanation:** In the first case: - \\"the quick\\" appears once in \\"the quick brown fox jumps over the lazy dog\\". - \\"brown fox jumps\\" appears once in \\"the quick brown fox jumps over the lazy dog\\". - \\"lazy dog\\" appears once in \\"the quick brown fox jumps over the lazy dog\\". In the second case: - \\"hello\\" appears once in \\"hello world\\". - \\"world\\" appears once in \\"hello world\\".","solution":"def count_subsentences(n, test_cases): results = [] for i in range(n): sentence = test_cases[i][0] m = test_cases[i][1] subsentences = test_cases[i][2] for subsentence in subsentences: count = sentence.count(subsentence) results.append(count) return results"},{"question":"In a distant land, there is a peculiar form of currency called \\"madals.\\" The central bank of this land decided to mint new madal coins but wants to ensure that any amount of money can be formed using the new coins efficiently. They decided that the new coins should be as few denominations as possible while still allowing any amount of money to be formed using these denominations. A wise programmer suggested that by using denominations of the form k^2, where k is a non-negative integer (including 0), any amount of money can be formed. The central bank\'s chief economist, however, was skeptical and sought an efficient verification method. Given a target amount `T`, the task is to determine the minimum number of these new coins needed to form the amount `T` using the denominations {0^2, 1^2, 2^2, 3^2, ...}. # Input - The first line contains a single integer T (1 ≤ T ≤ 10^6) — the target amount in madals. # Output - Print a single integer — the minimum number of coins needed to form the amount T. # Example Input ``` 17 ``` Output ``` 2 ``` # Note In the example, the minimum number of coins needed to form 17 madals is 2, using the coins with denominations 16 (4^2) and 1 (1^2).","solution":"def min_madals(T): coins = [] k = 0 while k * k <= T: coins.append(k * k) k += 1 dp = [float(\'inf\')] * (T + 1) dp[0] = 0 for coin in coins: for amount in range(coin, T + 1): dp[amount] = min(dp[amount], dp[amount - coin] + 1) return dp[T]"},{"question":"You are given an array of integers a_1, a_2, ..., a_n. Your task is to find a subarray whose product is equal to a given number k or determine that no such subarray exists. For example, given the array [2, 4, 5, 3, 6] and k=60: - Subarray [4, 5, 3] has a product of 4 * 5 * 3 = 60, so the subarray exists. However, given the array [2, 4, 5, 3, 6] and k=50: - No subarray\'s product is equal to 50, so the subarray does not exist. The first line contains two integers n and k (1 le n le 2 cdot 10^5, 1 le k le 10^9) — the number of elements in the array and the target product, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). Output a single integer, 1 if such a subarray exists, or -1 if no such subarray exists.","solution":"def does_subarray_product_exist(n, k, arr): This function checks if there exists any subarray in the given array `arr` of length `n` whose product is equal to `k`. Returns 1 if such a subarray exists, otherwise returns -1. if k == 0: return -1 left = 0 product = 1 for right in range(n): product *= arr[right] while product >= k and left <= right: if product == k: return 1 product //= arr[left] left += 1 return -1"},{"question":"Sara has a collection of water bottles arranged in a row. Each water bottle has a certain capacity, and Sara wants to balance them as much as possible. Specifically, she wants to make sure the sum of the capacities of every consecutive three water bottles is equal. In one minute, Sara can either pour water from one bottle into another or empty one bottle entirely. You are given the capacities of n water bottles in order. Determine the minimum number of minutes Sara needs to achieve her goal if she acts optimally. The first line contains the integer n (3 ≤ n ≤ 100). The next line contains n integers C1, C2, ..., Cn (0 ≤ Ci ≤ 1000), each representing the initial capacity of the i-th bottle. Print a single integer: the minimum required number of minutes. Then print the capacities of the water bottles after Sara makes the required changes. If there are multiple optimal positions, print any of them. (Note: You can assume initially the number of minutes required is positive)","solution":"def balance_water_bottles(n, capacities): Balances the capacities of water bottles such that the sum of every consecutive three bottles is equal. Parameters: n (int): the number of water bottles capacities (list of int): the initial capacities of the bottles Returns: int: the minimum number of minutes to achieve the goal list of int: the capacities of the bottles after the required changes desired_sum = sum(capacities) // n * 3 minutes = 0 # Balancing every consecutive three bottles for i in range(n-3+1): current_sum = sum(capacities[i:i+3]) diff = desired_sum - current_sum capacities[i+2] += diff # Adjust the last bottle in the subarray minutes += abs(diff) return minutes, capacities"},{"question":"You are given an array of integers and two integers `k` and `x`. Your task is to find the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. If there is a tie between the distances (the absolute difference between the integer and `x`), choose the smaller integer. Write a function `find_closest_elements(arr, k, x)` that takes in the list of integers `arr`, and the integers `k` and `x`, and returns a list of `k` closest integers to `x` sorted in ascending order. # Input: - An array of integers `arr` of length `n` (1 ≤ n ≤ 10^4, -10^4 ≤ arr[i] ≤ 10^4). - An integer `k` (1 ≤ k ≤ n). - An integer `x` (-10^4 ≤ x ≤ 10^4). # Output: - A list of `k` closest integers to `x` sorted in ascending order. # Example: ```python arr = [1, 2, 3, 4, 5] k = 4 x = 3 ``` - The function `find_closest_elements(arr, k, x)` should return `[1, 2, 3, 4]`. # Constraints: 1. The elements of the array are not necessarily unique. 2. The array may be unsorted. 3. Your solution should have a time complexity better than O(n^2). # Notes: - You can assume that the array contains at least `k` elements. - If multiple elements have the same difference from `x`, the smaller element takes priority in the result. # Hints: - You may use sorting, but be sure to think about the time complexity. - Consider the distance calculation and how to handle ties effectively.","solution":"def find_closest_elements(arr, k, x): Returns the k closest integers to x in the array, sorted in ascending order. # Sort the array based on the absolute difference from x, and use the element itself as a tie breaker sorted_arr = sorted(arr, key=lambda num: (abs(num - x), num)) # Take the first k elements from the sorted array result = sorted(sorted_arr[:k]) return result"},{"question":"You are given a sequence of integers `a` of length `n` (1 ≤ n ≤ 10^5) and some queries. Each query will give you two integers `l` and `r` (1 ≤ l ≤ r ≤ n) and will ask you to determine the number of distinct integers in the subarray `a[l...r]`. Initially, you are also provided with `m` (1 ≤ m ≤ 10^5) modification operations. Each modification operation will replace the element at a given position with another value. After each modification, you need to answer the outstanding queries with the updated array. Write a program to handle the modification operations and answer the queries. # Input: - The first line contains two integers, `n` and `m`. - The second line contains `n` integers `a1, a2, ..., an` which represent the initial sequence. - The next `m` lines each contain one of the following operations: - `q l r`: A query to find the number of distinct integers in the subarray `a[l...r]`. - `u p x`: A modification operation that updates the element at position `p` to value `x`. # Output: For each query of type `q l r`, output the number of distinct integers in the subarray `a[l...r]`. # Example: Input: ``` 5 5 1 2 3 4 5 q 1 5 q 2 4 u 3 4 q 1 5 q 3 3 ``` Output: ``` 5 3 4 1 ``` # Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the number of distinct integers in the whole array, which is 5. - The second query asks for the number of distinct integers in the subarray [2, 3, 4], which is 3. - The first modification updates the array to [1, 2, 4, 4, 5]. - The third query again asks for the number of distinct integers in the whole array, which is now 4 ([1, 2, 4, 5]). - The fourth query asks for the number of distinct integers in the subarray [4], which is 1.","solution":"class SegmentTree: def __init__(self, data): self.data = data self.n = len(data) self.tree = [set() for _ in range(4 * self.n)] self.build(0, 0, self.n - 1) def build(self, node, start, end): if start == end: self.tree[node] = {self.data[start]} else: mid = (start + end) // 2 self.build(2 * node + 1, start, mid) self.build(2 * node + 2, mid + 1, end) self.tree[node] = self.tree[2 * node + 1] | self.tree[2 * node + 2] def update(self, idx, value, node, start, end): if start == end: self.data[idx] = value self.tree[node] = {value} else: mid = (start + end) // 2 if start <= idx <= mid: self.update(idx, value, 2 * node + 1, start, mid) else: self.update(idx, value, 2 * node + 2, mid + 1, end) self.tree[node] = self.tree[2 * node + 1] | self.tree[2 * node + 2] def query(self, L, R, node, start, end): if R < start or end < L: return set() if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_set = self.query(L, R, 2 * node + 1, start, mid) right_set = self.query(L, R, 2 * node + 2, mid + 1, end) return left_set | right_set def process_queries(n, m, arr, operations): seg_tree = SegmentTree(arr) results = [] for op in operations: if op[0] == \'q\': _, l, r = op l -= 1 r -= 1 result = len(seg_tree.query(l, r, 0, 0, seg_tree.n - 1)) results.append(result) elif op[0] == \'u\': _, p, x = op p -= 1 seg_tree.update(p, x, 0, 0, seg_tree.n - 1) return results"},{"question":"Little Y has a sequence of n distinct positive integers: x1, x2, ..., xn. He wants to partition the sequence into two non-empty subarrays, where the first subarray is strictly increasing, and the second subarray is strictly decreasing. Help Little Y determine if such a partition is possible. The first line contains an integer n (2 ≤ n ≤ 105). The next line contains n space-separated distinct integers x1, x2, ..., xn (1 ≤ xi ≤ 109). If there is a way to partition the sequence into two subarrays as described, then print \\"YES\\" in the first line. Then print k (1 ≤ k < n), the length of the first, strictly increasing subarray. If there are multiple solutions, any partition that satisfies the condition will be accepted. If it\'s impossible to partition the sequence into two such subarrays, print \\"NO\\" (without the quotes).","solution":"def can_partition_sequence(n, sequence): Determines if the sequence can be partitioned into two subarrays: one strictly increasing and the other strictly decreasing. :param n: Length of the sequence (an integer) :param sequence: List of n distinct positive integers :return: Tuple (\'YES\', k) where k is the length of first subarray if possible, otherwise \'NO\'. # Find the peak point where the transition from increasing to decreasing can happen for i in range(1, n): if sequence[i] < sequence[i-1]: return \\"YES\\", i return \\"NO\\""},{"question":"You are given an array of integers that represent ticket prices for a series of events. Your task is to find out the maximum number of events you can attend if you start with a certain amount of money, and the total cost of attending these events should not exceed the given budget. Here\'s the challenge: - Each event has a certain ticket price. - You can choose to attend an event as long as you have enough money to pay for the ticket. - You can only attend one event per day. - You aim to attend the maximum number of events without exceeding your budget. The input consists of multiple test cases. For each test case, you will be given: - An integer `t` denoting the number of test cases. - For each test case, an integer `n` denoting the number of events. - An integer `b` denoting your initial budget. - An array of integers of length `n`, where each integer represents the ticket price of an event. You need to output the maximum number of events you can attend for each test case, ensuring the total cost does not exceed the budget. # Input Format: - The first line contains an integer `t` (1 leq t leq 10^4) — the number of test cases. - For each test case: - The first line contains two integers `n` and `b` (1 leq n leq 10^5, 1 leq b leq 10^9) — the number of events and the initial budget. - The second line contains `n` integers, where the `i`-th integer represents the ticket price of the `i`-th event (1 leq a_i leq 10^6). # Output Format: For each test case, print a single number — the maximum number of events you can attend without exceeding the budget. # Example: Input: ``` 3 5 20 4 7 2 8 5 3 15 6 3 9 6 25 10 15 2 7 4 9 ``` Output: ``` 4 2 4 ``` Explanation: - In the first test case, with a budget of 20, you can attend events with ticket prices `[2, 4, 5, 7]` for a total of 18, attending 4 events. - In the second test case, with a budget of 15, you can attend events with ticket prices `[3, 6]` for a total of 9, attending 2 events. - In the third test case, with a budget of 25, you can attend events with ticket prices `[2, 4, 7, 10]` for a total of 23, attending 4 events. Implement an efficient solution to handle the given constraints.","solution":"def max_events_attendable(t, test_cases): results = [] for i in range(t): n, b = test_cases[i][0] prices = sorted(test_cases[i][1]) count = 0 total_cost = 0 for price in prices: if total_cost + price > b: break total_cost += price count += 1 results.append(count) return results # Example to run the solution with provided input t = 3 test_cases = [ [(5, 20), [4, 7, 2, 8, 5]], [(3, 15), [6, 3, 9]], [(6, 25), [10, 15, 2, 7, 4, 9]] ] results = max_events_attendable(t, test_cases) for result in results: print(result)"},{"question":"You are given an array of n integers representing distances of points along a straight line. You need to select some points from this line and place a new point such that the sum of distances from each selected point to this new point is minimized. You are required to determine the minimum sum of distances that can be achieved. The first line contains a single integer n (1 le n le 100,000) — the number of points. The second line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 10^9) — the distances of the points along the line. Output a single integer — the minimum possible sum of distances from the selected points to the new point. Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 6 ``` Explanation: In this example, placing the new point at distance 3 minimizes the sum of distances from the selected points (1, 2, 4, 5) to the new point, resulting in a total distance of |1-3| + |2-3| + |4-3| + |5-3| = 2 + 1 + 1 + 2 = 6.","solution":"def minimize_sum_of_distances(n, distances): Returns the minimum possible sum of distances from the selected points to the new point. Args: n (int): the number of points. distances (list of int): the distances of the points along the line. Returns: int: the minimum possible sum of distances. # Sort the array of distances distances.sort() # The optimal position for the new point is at the median of the sorted distances if n % 2 == 1: median = distances[n // 2] else: median = (distances[n // 2 - 1] + distances[n // 2]) // 2 # Calculate the sum of absolute differences min_sum_distance = sum(abs(d - median) for d in distances) return min_sum_distance"},{"question":"You are given a sequence of n integers: b1, b2, ..., bn. You need to partition this sequence into the minimum number of non-decreasing subsequences. A non-decreasing subsequence is defined as a sequence where each element is greater than or equal to the one before it. For instance, the sequence (3, 3, 4) is non-decreasing. The first element in the input is an integer n (1 ≤ n ≤ 100), denoting the number of elements in the sequence. The next line contains n space-separated integers b1, b2, ..., bn, where (0 ≤ bi ≤ 1000). Output the minimum number of non-decreasing subsequences into which the given sequence can be partitioned. For example, given the input: ``` 4 4 3 2 1 ``` One of the possible partitions is: ``` 4 3 2 1 ``` which consists of: - [4] - [3] - [2] - [1] This is a trivial example where each element is itself a subsequence because the given sequence is strictly decreasing. Another example: ``` 6 5 1 3 2 4 6 ``` One valid partition would be: ``` 5 6 1 3 4 2 ``` This consists of: - [5, 6] - [1, 3, 4] - [2] The correct output would be 3 since it is the minimum number of non-decreasing subsequences needed to partition the sequence.","solution":"def min_non_decreasing_subsequences(n, sequence): Returns the minimum number of non-decreasing subsequences into which the given sequence can be partitioned. if n == 0: return 0 subsequences = [] for num in sequence: placed = False for subseq in subsequences: if subseq[-1] <= num: subseq.append(num) placed = True break if not placed: subsequences.append([num]) return len(subsequences)"},{"question":"You are given an array of integers where each element represents the height of a building. Your task is to compute the amount of water that can be trapped between the buildings after a rainstorm. A building at the index `i` can trap water if there is at least one taller building on both its left and right. The amount of water trapped by the building at index `i` is determined by the height of the shortest building between the tallest building on its left and the tallest building on its right, subtracted by the height of the building at index `i`. Write a function `calculate_trapped_water(buildings: List[int]) -> int` that returns the total amount of trapped water. The function should take a list of integers as its parameter, representing the heights of the buildings. # Input - A single line containing an integer `n` (1 leq n leq 10^5) — the number of buildings. - A second line containing `n` space-separated integers representing the heights of the buildings. # Output - A single integer, the total amount of water trapped after the rain. # Example ```python assert calculate_trapped_water([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) == 6 assert calculate_trapped_water([4, 2, 0, 3, 2, 5]) == 9 ``` # Explanation **Example 1:** - The heights array is: `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]` - The total water trapped is calculated as follows: - Between buildings of height 1 and 2, water trapped is `1` - Between buildings of height 2, 1, and 3, water trapped sums to `6` **Example 2:** - The heights array is: `[4, 2, 0, 3, 2, 5]` - The total water trapped is calculated as follows: - Between buildings of height 4 and 3, water trapped is `4` - Between buildings of height 3 and 5, water trapped sums to `9` Consider edge cases, such as when there are no buildings or when no water can be trapped. # Constraints - The algorithm should run in O(n) time complexity. - Use O(n) additional space, if necessary.","solution":"from typing import List def calculate_trapped_water(buildings: List[int]) -> int: if not buildings: return 0 n = len(buildings) left_max = [0] * n right_max = [0] * n left_max[0] = buildings[0] for i in range(1, n): left_max[i] = max(left_max[i-1], buildings[i]) right_max[n-1] = buildings[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], buildings[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - buildings[i] return trapped_water"},{"question":"Alex decided to design a small garden in his backyard. He has a rectangular plot of land and he wants to plant flowers in a way that maximizes the beauty of his garden. To do this, Alex plans to divide his land into several smaller rectangular plots, each of a specific size, and plant a specific type of flower in each plot. Alex\'s garden plot can be represented as a grid of size `n x m`, and he wants to create subplots of size `a x b`. However, he wants all the flowers to be planted symmetrically so that the garden looks aesthetically pleasing. This means that the number of subplots along the width (horizontal direction) and length (vertical direction) of the garden should be as balanced as possible. Given the dimensions of the garden (n, m) and the dimensions of the subplot (a, b), help Alex determine the maximum number of subplots he can create. Input: The first and only line of input contains four integers n, m, a, and b (1 ≤ n, m, a, b ≤ 10^9), which represent the dimensions of the garden and the subplot, respectively. Output: Output a single integer representing the maximum number of subplots of size `a x b` that can fit into the garden. Example: Input: 10 5 2 2 Output: 10 Explanation: The garden of size 10x5 can be divided into subplots of size 2x2. There can be 5 subplots along the width (10 / 2) and 5 subplots along the length (5 / 1), which gives a total of 10 subplots.","solution":"def max_subplots(n, m, a, b): Computes the maximum number of subplots of size a x b that can fit into the garden of size n x m. :param n: int: length of the garden :param m: int: width of the garden :param a: int: length of the subplot :param b: int: width of the subplot :return: int: maximum number of subplots return (n // a) * (m // b)"},{"question":"You are given a grid of size n x m consisting of cells filled with non-negative integers. A path in the grid is defined as a sequence of cells, each adjacent horizontally or vertically to the next, starting from the top-left corner (1,1) and ending at the bottom-right corner (n,m). The weight of a path is the sum of values of the cells on the path. Your task is to find the maximum weight among all possible paths from the top-left corner to the bottom-right corner. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns respectively. Each of the next n lines contains m space-separated integers representing the grid cells, where each integer is between 0 and 1000. You need to print a single integer — the maximum weight of any path from the top-left corner to the bottom-right corner. # Example **Input:** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 12 ``` # Explanation In the given example, the path with the maximum weight is (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) with a weight of 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_path_weight(grid): Given a grid of size n x m, find the maximum weight path from the top-left corner to the bottom-right corner. # Get the dimensions of the grid n = len(grid) m = len(grid[0]) # Initialize a 2D dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Base case: the weight of the top-left cell is just the value of the grid at that point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): # A cell can be reached either from the left or from above dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell will have the maximum weight of any path return dp[n-1][m-1]"},{"question":"A company has just introduced a new feature in their system where employees can submit feedback about the workplace. Each feedback is associated with a rating and a category. Categories can range from \'work environment\', \'management\', \'salary\', \'benefits\', etc. There are exactly 26 possible categories represented by the lowercase Latin letters \'a\' to \'z\'. The company wants to evaluate the feedback continuously by dynamically maintaining the average rating for each category that the feedback falls into. You are provided with an initial set of feedback and a set of operations. Each feedback consists of a category (a single character) and an integer rating. The operations can either be the addition of a new feedback or a query for the average rating of a particular category. Write a program that first reads the initial set of feedback, then processes a list of operations. For each query operation, return the average rating for the specified category formatted to two decimal places. The average rating for a category with no feedback should be considered zero. # Input Format: - The first line contains an integer `n` (1 le n le 10^5) — the number of initial feedbacks. - The next `n` lines each contain a character `c` (the category) and an integer `r` (the rating between `1` and `100` inclusive), separated by a space. - The following line contains an integer `q` (1 le q le 10^5) — the number of operations. - The next `q` lines each contain a command. Commands are either: - `1 c r` indicating a new feedback with category `c` and rating `r`. - `2 c` indicating a query for the average rating of category `c`. # Output Format: - For each query command, output the current average rating of the specified category `c`, formatted to two decimal places. # Example: Input: ``` 6 a 4 b 3 a 5 c 2 b 4 a 3 5 2 a 1 a 4 2 a 1 d 5 2 d ``` Output: ``` 4.00 4.00 5.00 ``` # Explanation: - Initially, for category `a`, we have ratings of 4, 5, and 3. The average is (4+5+3)/3 = 4.00. - After adding a new rating of 4 to category `a`, the average becomes (4+5+3+4)/4 = 4.00. - No initial feedback for category `d`. After adding a rating of 5, the average is 5.00.","solution":"def process_feedback(n, initial_feedback, q, operations): from collections import defaultdict feedback_data = defaultdict(list) category_sum = defaultdict(int) category_count = defaultdict(int) # Process initial feedback for feedback in initial_feedback: c, r = feedback feedback_data[c].append(r) category_sum[c] += r category_count[c] += 1 results = [] for operation in operations: if operation[0] == \'1\': # New feedback entry _, c, r = operation r = int(r) feedback_data[c].append(r) category_sum[c] += r category_count[c] += 1 elif operation[0] == \'2\': # Query average rating for category _, c = operation if category_count[c] == 0: results.append(\\"0.00\\") else: avg_rating = category_sum[c] / category_count[c] results.append(f\\"{avg_rating:.2f}\\") return results"},{"question":"Given two integers `n` and `k`, you are tasked with constructing a binary string of length `n` that contains exactly `k` \'1\'s and `n - k` \'0\'s such that for any substring of length `m` (where `1 <= m <= n`), the number of \'1\'s in the substring is not more than half of `m` rounded up to the nearest integer. In other words, for any substring of length `m` in the binary string, the count of \'1\'s in that substring should be at most `ceil(m / 2)`. If it is possible to construct such a binary string, you should output \\"YES\\" followed by the binary string. If it is not possible, output \\"NO\\". The first line of the input contains a single integer `t` (1 le t le 100) — the number of test cases. The following `t` lines contain two integers `n` and `k` each, representing the length of the string and the number of \'1\'s respectively. Output for each test case either \\"YES\\" followed by the binary string, or \\"NO\\". # Input ``` t n k . . . n k ``` # Output ``` YES/NO binary_string ``` # Example Input: ``` 2 5 2 4 3 ``` Output: ``` YES 00101 NO ``` In the first test case, the string `00101` satisfies the condition as follows: - For m = 1, the substrings are \\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"1\\" which have at most `ceil(1/2) = 1` \'1\'s. - For m = 2, the substrings are \\"00\\", \\"01\\", \\"10\\", \\"01\\" which have at most `ceil(2/2) = 1` \'1\'s. - For m = 3, the substrings are \\"001\\", \\"010\\", \\"101\\" which have at most `ceil(3/2) = 2` \'1\'s. - For m = 4, the substrings are \\"0010\\", \\"0101\\" which have at most `ceil(4/2) = 2` \'1\'s. - For m = 5, the substring is \\"00101\\" which has at most `ceil(5/2) = 3` \'1\'s. In the second test case, it is not possible to construct a binary string of length 4 with 3 \'1\'s that satisfies the given condition.","solution":"def construct_binary_string(n, k): # If k is greater than ceil(n / 2), it\'s impossible to satisfy the condition if k > (n + 1) // 2: return \\"NO\\" # When possible, create the binary string result = [\'0\'] * n for i in range(k): result[2 * i] = \'1\' # Place \'1\'s at every other position starting from the beginning return \\"YES \\" + \'\'.join(result) def process_test_cases(t, test_cases): results = [] for n, k in test_cases: results.append(construct_binary_string(n, k)) return results"},{"question":"There is a grid of size n x m, initially filled with 0s. You are given a series of operations where each operation consists of a pair (i, j) that specifies the top-left corner of a 2x2 subgrid. Each operation increments all values within the specified 2x2 subgrid by 1. Determine the maximum value present in the grid after all operations have been performed. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100; 1 ≤ k ≤ 1000) — the number of rows, the number of columns, and the number of operations, respectively. The next k lines contain two integers xi and yi (1 ≤ xi < n; 1 ≤ yi < m) — the coordinates of the top-left corner of each 2x2 subgrid to be incremented. Output the maximum value in the grid after performing all k operations. # Example: Input ``` 4 5 3 1 1 2 3 3 2 ``` Output ``` 2 ``` Explanation Initially, the grid is: ``` 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` After the first operation (1,1): ``` 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` After the second operation (2,3): ``` 1 1 0 0 0 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 ``` After the third operation (3,2): ``` 1 1 0 0 0 1 1 1 1 0 0 1 2 2 0 0 1 1 1 0 ``` The maximum value in the grid is 2.","solution":"def max_value_in_grid(n, m, k, operations): grid = [[0] * m for _ in range(n)] for x, y in operations: for i in range(2): for j in range(2): if x + i < n and y + j < m: grid[x + i][y + j] += 1 max_value = 0 for row in grid: max_value = max(max_value, max(row)) return max_value"},{"question":"In a remote village, there are `n` houses aligned in a straight line. The village has a peculiar postal delivery system where there are `m` postal stops (or mailboxes) that need to be installed. The villagers have come together and requested that each postal stop should be installed in front of a unique house such that the maximum distance any house has to walk to reach a postal stop is minimized. Given the number of houses `n` and the number of postal stops `m`, find the minimum possible maximum distance any house has to walk to reach its nearest postal stop. The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ n) representing the number of houses and the number of postal stops, respectively. The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9) where `hi` represents the position of the i-th house in the village. Output a single integer, the minimum possible value for the maximum distance any house has to walk to reach the nearest postal stop. # Example Input: ``` 5 2 1 2 8 4 9 ``` Output: ``` 3 ``` # Explanation: The optimal positions to place the 2 postal stops are at house positions 1 and 8, or house positions 4 and 9. In both cases, the maximum distance any house has to walk to reach a postal stop is 3.","solution":"def min_max_distance(n, m, houses): houses.sort() def can_place_stops(dist): count = 1 last_placed = houses[0] for i in range(1, n): if houses[i] - last_placed > dist: count += 1 last_placed = houses[i] if count > m: return False return True left, right = 0, houses[-1] - houses[0] while left < right: mid = (left + right) // 2 if can_place_stops(mid): right = mid else: left = mid + 1 return left"},{"question":"Q: You are given an ancient text containing words separated by spaces. Your task is to find the longest word in the text that is a palindrome. A palindrome is a word that reads the same forwards and backwards. If there are multiple words with the same maximum length, return the first one encountered in the text. If there is no palindrome, return an empty string. The input text contains only lowercase alphabetical characters and spaces. **Input:** A single string `text` (1 ≤ |text| ≤ 10^4) containing words separated by spaces. **Output:** A single string representing the longest palindrome found in the text. If no such palindrome exists, return an empty string. **Example 1:** Input: ``` madam arora teaches malayalam ``` Output: ``` malayalam ``` **Example 2:** Input: ``` nurses run ``` Output: ``` ``` **Explanation of the examples:** 1. The word \\"madam\\" is a palindrome of length 5, \\"arora\\" is a palindrome of length 5 and \\"malayalam\\" is a palindrome of length 9. The longest among these is \\"malayalam\\". 2. There are no palindromes in the text \\"nurses run\\", hence the output is an empty string.","solution":"def longest_palindromic_word(text): Returns the longest palindromic word in the text. If no palindrome exists, returns an empty string. words = text.split() longest_palindrome = \\"\\" for word in words: if word == word[::-1]: if len(word) > len(longest_palindrome): longest_palindrome = word return longest_palindrome"},{"question":"You are given a tree with n nodes numbered from 1 to n. Each node has a value associated with it. The tree is rooted at node 1. Each node’s value is equal to the sum of its own value and the values of its children (directly connected by an edge and rooted at that node). You need to determine the value for each node based on the given initial values of each node and the structure of the tree. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. The second line contains n space-separated integers v1, v2, ..., vn (0 ≤ vi ≤ 100,000), where vi is the initial value for the i-th node. Each of the next n-1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) — denoting an edge of the tree. It is guaranteed that the given edges form a tree. Output n space-separated integers — the value for each node after summing up the values of its children. Example: Input: 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output: 15 11 3 4 5 Explanation: - Node 1: initial value + (value of node 2 + value of node 3) - Node 2: initial value + (value of node 4 + value of node 5) - Node 3: initial value (no children) - Node 4: initial value (no children) - Node 5: initial value (no children) The values are: node 1 = 1 + (2+3+4+5) = 15, node 2 = 2 + (4+5) = 11, node 3 = 3, node 4 = 4, node 5 = 5.","solution":"def calculate_node_values(n, values, edges): from collections import defaultdict tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) result = [0] * n visited = [False] * (n + 1) def dfs(node): visited[node] = True sum_values = values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: sum_values += dfs(neighbor) result[node - 1] = sum_values return sum_values dfs(1) return result"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to rearrange the characters of the string so that no two adjacent characters are the same. If it is not possible to do so, return an empty string. Otherwise, return any rearrangement of the string that meets the requirement. A single line containing the string s (1 leq |s| leq 10^4). Print a single string, which is a rearranged version of s such that no two adjacent characters are the same. If it is not possible to rearrange the string, print an empty string.","solution":"from collections import Counter import heapq def reorganize_string(s): if not s: return \\"\\" count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged = \'\'.join(result) if len(rearranged) != len(s): return \\"\\" return rearranged"},{"question":"You have been given a special kind of number sequence, called a \\"Happy Sequence,\\" of length N. A sequence is called a Happy Sequence if, for any element in the sequence, the sum of its digits, when taken repeatedly, eventually leads to the number 1. For example, 19 is a Happy number because 1 + 9 = 10, and then 1 + 0 = 1. However, 20 is not a Happy number because 2 + 0 = 2, and this does not get closer to 1 with further iterations. You need to determine whether every number in a given sequence is a Happy number or not. Input begins with an integer N (1 ≤ N ≤ 105), the number of elements in the sequence. Following this are N integers a1, a2, ..., aN (1 ≤ ai ≤ 109), the elements of the sequence. Print \\"YES\\" if every number in the sequence is a Happy number, otherwise print \\"NO\\". In the first example, where the sequence is 19 7 10, 19 and 7 are happy numbers (since 1 + 9 = 10, and 1 + 0 = 1 for 19; and 7 is already 1). Therefore, the output is \\"YES\\". In the second example, where the sequence is 20 4 2, 20 is not a happy number (since 2 + 0 = 2 does not lead to 1), 4 and 2 are not happy numbers either. Therefore, the output is \\"NO\\".","solution":"def is_happy_number(n): Returns whether a number is a Happy Number or not. seen = set() while n != 1 and n not in seen: seen.add(n) n = sum(int(digit) ** 2 for digit in str(n)) return n == 1 def is_happy_sequence(sequence): Determines if every number in the given sequence is a Happy Number. for number in sequence: if not is_happy_number(number): return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers of size n. You need to find two indices i and j (1 leq i < j leq n) such that the absolute difference between the elements at these indices is minimized. Formally, you need to find indices i and j (with i < j) for which the value of |a[i] - a[j]| is minimized. Return the minimum value of the absolute difference. # Input The first line contains a single integer n (2 leq n leq 10^5) — the number of elements in the array. The next line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 leq a[i] leq 10^9) — the elements of the array. # Output Print a single integer — the minimum absolute difference between the elements at the two different indices of the array. # Example Input 5 3 8 15 1 6 Output 2 Explanation The pair (3, 1) produces the smallest absolute difference |3 - 1| = 2. # Note For the given example, there are the following pairs and their absolute differences: - |3 - 8| = 5 - |3 - 15| = 12 - |3 - 1| = 2 - |3 - 6| = 3 - |8 - 15| = 7 - |8 - 1| = 7 - |8 - 6| = 2 - |15 - 1| = 14 - |15 - 6| = 9 - |1 - 6| = 5 Thus, the minimum absolute difference is 2.","solution":"def minimum_absolute_difference(arr): Returns the minimum absolute difference between any two distinct indices in the array. arr.sort() # Sort the array to bring closer elements adjacent min_diff = float(\'inf\') for i in range(len(arr) - 1): min_diff = min(min_diff, abs(arr[i] - arr[i + 1])) return min_diff"},{"question":"Given a list of integers representing the lengths of sticks, you are to determine the maximum number of square shapes that can be made using these sticks. Each square requires four sticks of the same length. The first line contains a single integer n (1 ≤ n ≤ 1000) representing the number of sticks. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) representing the lengths of the sticks. Output an integer representing the maximum number of square shapes that can be made. Example: Input: 8 1 2 3 1 2 3 1 1 Output: 1 Explanation: In this example, we can make one square using four sticks of length 1.","solution":"def count_squares(n, stick_lengths): Counts the maximum number of square shapes that can be made using the provided sticks. Parameters: n (int): The number of sticks. stick_lengths (list of int): The lengths of the sticks. Returns: int: The maximum number of square shapes that can be made. from collections import Counter stick_counter = Counter(stick_lengths) squares_count = 0 # For each stick length, calculate how many squares can be made for length in stick_counter: squares_count += stick_counter[length] // 4 return squares_count"},{"question":"There is a famous artist who loves painting his collection of N canvases with beautiful colors. He has a favorite random process for picking the colors which he uses while painting. He assigns a unique number in the range [1, N] to each of his N canvases. The artists also have M preset ranges of canvas numbers. For each of these ranges, he already decided the exact color he will paint all canvases in that range. The artist\'s goal is to complete painting all the canvases according to these preset rules. Given the ranges and corresponding color choices, you should determine the final color of each canvas after all ranges have been painted. If an artist paints a range more than once, the last paint operation on that range should be the one reflected in the final color of canvases in that range. You are required to implement a function that carries out this task. **Function Signature:** ``` def paint_canvases(n: int, m: int, operations: List[Tuple[int, int, str]]) -> List[str]: pass ``` **Input:** - An integer n, the number of canvases (1 ≤ n ≤ 10^5). - An integer m, the number of paint operations (1 ≤ m ≤ 10^5). - A list of tuples, with each tuple containing three elements: - an integer l, the starting canvas number of the range (1 ≤ l ≤ n), - an integer r, the ending canvas number of the range (l ≤ r ≤ n), - a character c, the color to paint in the range (a lowercase English letter). **Output:** - A list of n characters, where the i-th character represents the final color of the i-th canvas. **Example:** ``` Input: n = 5 m = 3 operations = [(1, 3, \'a\'), (2, 5, \'b\'), (4, 5, \'c\')] Output: [\\"a\\", \\"b\\", \\"b\\", \\"c\\", \\"c\\"] ``` **Explanation:** - The first range (1, 3) is painted with \'a\', resulting in [\'a\', \'a\', \'a\', \'-\', \'-\']. - The second range (2, 5) is painted with \'b\', resulting in [\'a\', \'b\', \'b\', \'b\', \'b\']. - The third range (4, 5) is painted with \'c\', resulting in [\'a\', \'b\', \'b\', \'c\', \'c\']. Thus, the final colors are [\\"a\\", \\"b\\", \\"b\\", \\"c\\", \\"c\\"].","solution":"from typing import List, Tuple def paint_canvases(n: int, m: int, operations: List[Tuple[int, int, str]]) -> List[str]: # Initialize all canvases with a default character (it is not specified what default character to use) canvases = [\'\'] * n for l, r, c in operations: for i in range(l-1, r): canvases[i] = c return canvases"},{"question":"You are given a table represented by a list of rows, each containing a list of integers. Your task is to find the largest sum of contiguous sublist within each row and then return the maximum sum among all rows. A contiguous sublist contains one or more elements from the original list, and the elements of the sublist are consecutive elements from the original list. For example, if the input is: ``` [ [1, -2, 3, 10, -4, 7, 2, -5], [-1, -2, -3, -4], [5, 1, -3, 7, 8] ] ``` The output should be 18 because the largest sum of contiguous sublist in the first row is `18` (sublist `[3, 10, -4, 7, 2]`), in the second row is `-1` (sublist `[-1]`), and in the third row is `18` (sublist `[5, 1, -3, 7, 8]`). The maximum among these sums is `18`. Write a function `max_row_sum` that accepts a list of lists as input and returns the maximum sum of contiguous sublist among all rows. **Function Signature:** ```python def max_row_sum(table: List[List[int]]) -> int: ``` **Input:** - `table`: a list of lists, where each inner list represents a row and contains integers. Each row will have at least one element, and there will be at least one row in the table. **Output:** - Returns an integer which is the maximum sum of contiguous sublist among all rows. **Constraints:** - The number of rows in the table and the number of elements in each row is between 1 and 300. - The elements in the rows range from `-1000` to `1000`. **Examples:** ```python assert max_row_sum([[1, -2, 3, 10, -4, 7, 2, -5], [-1, -2, -3, -4], [5, 1, -3, 7, 8]]) == 18 assert max_row_sum([[1], [2], [-5]]) == 2 assert max_row_sum([[-3, -2, -1], [-6, -5, -4], [-7]]) == -1 ```","solution":"from typing import List def max_sublist_sum(row: List[int]) -> int: Helper function that uses Kadane\'s algorithm to find the maximum sum of a contiguous sublist in a given list. max_sum = row[0] current_sum = row[0] for num in row[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_row_sum(table: List[List[int]]) -> int: Returns the maximum sum of contiguous sublist among all rows in the given table. max_sum = float(\'-inf\') for row in table: row_max_sum = max_sublist_sum(row) max_sum = max(max_sum, row_max_sum) return max_sum"},{"question":"You are given two strings s and t, each consisting of lowercase letters. Your task is to determine if you can make string t from string s using the following operations: 1. You can choose any character from string s and remove it. 2. You can choose any two adjacent characters in string s and swap them. Output \\"YES\\" if it is possible to transform string s into string t, and \\"NO\\" otherwise. # Input The first line contains the string s (1 ≤ |s| ≤ 100,000). The second line contains the string t (1 ≤ |t| ≤ 100,000). # Output Output \\"YES\\" if it is possible to transform string s into string t using the given operations, otherwise output \\"NO\\". # Example Input ``` abc bca ``` Output ``` YES ``` Input ``` abc def ``` Output ``` NO ``` # Notes In the first example, you can transform \\"abc\\" to \\"bca\\" by swapping \'a\' with \'b\' and then \'b\' with \'c\'. In the second example, you cannot transform \\"abc\\" to \\"def\\" because the characters are completely different.","solution":"def can_transform(s, t): Determines if string t can be formed by transforming string s using the allowed operations. Parameters: s (str): The original string. t (str): The target string. Returns: str: \\"YES\\" if t can be formed from s, \\"NO\\" otherwise. return \\"YES\\" if sorted(s) == sorted(t) else \\"NO\\""},{"question":"You are given a grid with n rows and m columns, filled with positive integers. An initial token is placed on a cell in the grid, and you can move it either left, right, up, or down to an adjacent cell. Your task is to compute the number of distinct integers that can be collected by moving the token from the starting cell to any other cell, at most k times. In the first line of input, there are three integers n, m, and k (1 leq n, m leq 100, 0 leq k leq 100). In the next n lines, each line contains m integers representing the grid (1 leq grid[i][j] leq 10^3). Finally, there is a line containing two integers start_i and start_j (1 leq start_i leq n, 1 leq start_j leq m), which represents the starting cell of the token. Output the total number of distinct integers that can be collected by moving the token from the starting cell to any other cell, at most k times. Note that the indices for rows and columns are 1-based. Example input: 4 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 2 2 Example output: 11","solution":"def distinct_integers_in_grid(n, m, k, grid, start_i, start_j): Returns the number of distinct integers that can be collected by moving the token from the starting cell to any other cell at most k times. from collections import deque # Convert start indices to 0-based start_i -= 1 start_j -= 1 # Directions: right(0, 1), left(0, -1), down(1, 0), up(-1, 0) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # BFS traversal to track distinct integers within k moves queue = deque([(start_i, start_j, 0)]) visited = set([(start_i, start_j)]) distinct_values = set([grid[start_i][start_j]]) while queue: x, y, moves = queue.popleft() if moves < k: for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) distinct_values.add(grid[nx][ny]) queue.append((nx, ny, moves + 1)) return len(distinct_values) # Example usage: n = 4 m = 4 k = 2 grid = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] start_i = 2 start_j = 2 print(distinct_integers_in_grid(n, m, k, grid, start_i, start_j)) # Output: 11"},{"question":"You are given an array of integers `arr` of length `n` and a target integer `x`. Your task is to find the length of the shortest contiguous subarray of `arr` such that the sum of its elements is equal to `x`. If no such subarray exists, return `-1`. Note: - A subarray is a contiguous part of an array. - It is guaranteed that the input size and values are within the provided constraints. The first line of the input contains two integers `n` and `x` (1 ≤ `n` ≤ 10^5, |x| ≤ 10^9) — the length of the array and the target sum, respectively. The second line of the input contains `n` space-separated integers `arr[i]` (|arr[i]| ≤ 10^9) — the elements of the array. Print one integer — the length of the shortest contiguous subarray with a sum equal to `x`, or `-1` if no such subarray exists. # Examples Input: ``` 5 15 10 5 2 7 1 ``` Output: ``` 2 ``` Input: ``` 6 8 1 2 3 4 5 6 ``` Output: ``` -1 ```","solution":"def shortest_subarray_length(arr, x): Finds the length of the shortest contiguous subarray with a sum equal to x. If no such subarray exists, returns -1. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > x and start <= end: current_sum -= arr[start] start += 1 if current_sum == x: min_length = min(min_length, end - start + 1) return min_length if min_length != float(\'inf\') else -1"},{"question":"You\'re given an array of n integers arr where each element represents the number of coins in that pile. Your goal is to make all the piles have an equal number of coins by moving coins between adjacent piles only. Each move consists of transferring one coin from one pile to an adjacent pile. Determine the minimum number of moves required to achieve this. Input: - The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of piles. - The second line contains n space-separated integers arr[i] (1 ≤ arr[i] ≤ 10^9) — the number of coins in the i-th pile. Output: - A single integer — the minimum number of moves required to make all the piles have an equal number of coins. Example: Input: ``` 3 1 2 3 ``` Output: ``` 1 ``` Explanation: You can move one coin from the third pile to the second pile, making the piles [1, 3, 2].","solution":"def min_moves_to_equal_piles(n, arr): target = sum(arr) // n moves = 0 for i in range(n): if arr[i] > target: moves += arr[i] - target return moves"},{"question":"A warehouse has an inventory that needs to be managed. The inventory consists of different items, each with its own identifier and quantity. The warehouse receives restocks and processes shipments daily. You are required to simulate a simple inventory management system that can handle these operations. You will perform the following operations: 1. \'RESTOCK id quantity\' - add the specified quantity to the item with the given identifier. If the item does not exist, add it to the inventory with the specified quantity. 2. \'SHIPMENT id quantity\' - reduce the specified quantity from the item with the given identifier. If the item\'s quantity drops to zero or below, remove it from the inventory. 3. \'CHECK id\' - output the current quantity of the item with the given identifier. If the item does not exist, output \'Item not found\'. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of operations. - The next n lines each contain one of the three operation commands described above. Output: For each \'CHECK\' command, output the quantity of the item or \'Item not found\' if the item does not exist. Example: Input: 5 RESTOCK A123 50 RESTOCK B456 30 SHIPMENT A123 20 CHECK A123 CHECK C789 Output: 30 Item not found","solution":"class Inventory: def __init__(self): self.items = {} def restock(self, item_id, quantity): if item_id in self.items: self.items[item_id] += quantity else: self.items[item_id] = quantity def shipment(self, item_id, quantity): if item_id in self.items: self.items[item_id] -= quantity if self.items[item_id] <= 0: del self.items[item_id] def check(self, item_id): if item_id in self.items: return self.items[item_id] else: return \'Item not found\' def manage_inventory(operations): inventory = Inventory() output = [] for operation in operations: parts = operation.split() command = parts[0] item_id = parts[1] if command == \'RESTOCK\': quantity = int(parts[2]) inventory.restock(item_id, quantity) elif command == \'SHIPMENT\': quantity = int(parts[2]) inventory.shipment(item_id, quantity) elif command == \'CHECK\': result = inventory.check(item_id) if isinstance(result, int): output.append(str(result)) else: output.append(result) return output"},{"question":"# Problem Description You are given a set of n railway stations aligned in a straight line and their respective positions. The railway company wants to install a signaling system between these stations. However, due to maintenance costs, some positions might be blocked, meaning a signal tower cannot be installed at those points. The company wants to install the maximum number of signal towers while ensuring that: 1. No two signal towers are adjacent. 2. A signal tower is not installed at any blocked positions. Write a program that calculates the maximum number of signal towers that can be installed under these constraints. # Input - The first line contains two integers n (the number of stations) and m (the number of blocked positions), respectively (1 le n, m le 10^5). - The second line contains n distinct integers p_1, p_2, ..., p_n representing the positions of the stations (1 le p_i le 10^9). - The third line contains m distinct integers b_1, b_2, ..., b_m representing the blocked positions (1 le b_i le 10^9). # Output - Output a single integer, the maximum number of signal towers that can be installed. # Example Input ``` 6 3 1 3 4 6 8 10 3 6 10 ``` Output ``` 3 ``` # Explanation In this example, the stations are located at positions 1, 3, 4, 6, 8, and 10. The blocked positions are 3, 6, and 10. The signal towers can be installed at positions 1, 4, and 8, maximizing the number of signal towers while adhering to the given constraints.","solution":"def max_signal_towers(n, m, stations, blocked): blocked_set = set(blocked) stations.sort() last_installed = None towers_count = 0 for station in stations: if station in blocked_set: continue if last_installed is None or station > last_installed + 1: towers_count += 1 last_installed = station return towers_count"},{"question":"A group of scientists is working on tracking the movement of local wildlife in a protected forest region. They have placed a series of sensors in the forest which track the animals\' GPS coordinates. Each animal wears a collar that pings its coordinates to the sensors at regular intervals. The scientists need to analyze a specific animal\'s movement to determine its path and calculate the total distance traveled over a given period. The coordinates are projected onto a 2D plane where each unit represents one kilometer. The scientists are particularly interested in filtering out any redundant data points where the animal did not move. You are given the list of coordinates in the sequence they were recorded. The sequence may contain duplicate consecutive data points if the animal stayed in the same location between two recordings. Your task is to compute the total distance the animal traveled, considering only the actual movements. The input consists of several lines: - The first line contains an integer N (1 leq N leq 10^5) – the number of recorded points. - The next N lines each contain two integers representing the coordinates of the animal at each recorded point (x_i, y_i) (|x_i|, |y_i| leq 10^4). Output a single line containing a decimal number accurate to at least four decimal places, representing the total distance traveled by the animal. # Example Input ``` 5 0 0 0 0 3 4 3 4 6 8 ``` Output ``` 10.0000 ``` # Explanation The unique points of movement are (0,0), (3,4), and (6,8). The total distance is the sum of distances between consecutive points: - Distance between (0,0) and (3,4) is 5.0000 (using the Pythagorean Theorem: √((3-0)² + (4-0)²)). - Distance between (3,4) and (6,8) is 5.0000. Thus, the total distance traveled is 10.0000 km.","solution":"import math def total_distance_traveled(N, coordinates): Takes in the integer N and a list of tuples representing the coordinates. Returns the total distance traveled by the animal, considering only unique movements. if N <= 1: return 0.0 # Filtering out consecutive duplicate points unique_coords = [coordinates[0]] for i in range(1, N): if coordinates[i] != coordinates[i - 1]: unique_coords.append(coordinates[i]) total_distance = 0.0 for i in range(1, len(unique_coords)): x1, y1 = unique_coords[i - 1] x2, y2 = unique_coords[i] total_distance += math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) return round(total_distance, 4)"},{"question":"You are given an array of n integers a1, a2, ..., an. You need to perform q operations of the following type: choose two indices l and r (1 ≤ l ≤ r ≤ n), both inclusive, and increment each element a_i (l ≤ i ≤ r) by 1. Your task is to efficiently return the resulting array after all the operations. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000). The next line contains n integers a1, a2, ..., an — the given array. The next q lines each contain two integers l and r which specify the range for each operation. Output the resulting array after performing all the operations. Consider the first sample test. Initially, the array is [1, 2, 3, 4]. After the first operation where l = 1 and r = 3, the array becomes [2, 3, 4, 4]. After the second operation where l = 2 and r = 4, the array becomes [2, 4, 5, 5]. Finally, after the third operation where l = 1 and r = 4, the array becomes [3, 5, 6, 6]. Hence, the resulting array is [3, 5, 6, 6].","solution":"def apply_operations(n, q, array, operations): Apply range increment operations to the array. :param n: Length of the array :param q: Number of operations :param array: List of integers representing the initial array :param operations: List of tuples, where each tuple contains two integers (l, r) :return: List of integers representing the final array after all operations increment = [0] * (n + 1) # Apply the range updates for l, r in operations: increment[l-1] += 1 if r < n: increment[r] -= 1 # Calculate the final values in the array for i in range(1, n): increment[i] += increment[i-1] for i in range(n): array[i] += increment[i] return array"},{"question":"Alice is developing a new system to keep track of the various projects in her organization. Each project can be in one of three statuses: \\"not started\\", \\"in progress\\", or \\"completed\\". She needs your help to create a tool that will generate a status report for each project based on operations performed on them. You are given a list of `n` projects, each with a unique name. The initial status of all projects is \\"not started\\". You also have a list of `m` operations that can be performed on these projects. An operation can be one of the following three types: 1. \\"start project_name\\" - This changes the status of the project with name `project_name` to \\"in progress\\". 2. \\"complete project_name\\" - This changes the status of the project with name `project_name` to \\"completed\\". 3. \\"status project_name\\" - This operation requires you to output the current status of the project with name `project_name`. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000). The next `n` lines contain the names of the projects. Each project name is a unique string consisting of English lowercase letters (1 ≤ |project_name| ≤ 10). The following `m` lines contain the operations on the projects as described above. The operations are given in the order they need to be executed. Output the result of each \\"status\\" operation in the order they appear in the input. # Input ``` 3 6 projectA projectB projectC start projectA status projectA start projectB complete projectA status projectA status projectB ``` # Output ``` in progress completed in progress ``` Write a program that processes the given input and generates the required output.","solution":"def manage_projects(n, m, projects, operations): statuses = {project: \\"not started\\" for project in projects} result = [] for operation in operations: parts = operation.split() command = parts[0] project_name = parts[1] if command == \\"start\\": statuses[project_name] = \\"in progress\\" elif command == \\"complete\\": statuses[project_name] = \\"completed\\" elif command == \\"status\\": result.append(statuses[project_name]) return result def parse_input(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) projects = [lines[i + 1] for i in range(n)] operations = [lines[i + 1 + n] for i in range(m)] return n, m, projects, operations"},{"question":"Implement a unitary operation on a register of N qubits that computes the bitwise NOT of the number written in the register. Your operation should take a register of type LittleEndian—an array of qubits that encodes an unsigned integer in little-endian format, with the least significant bit written first (corresponding to the array element with index 0). The \\"output\\" of your solution is the state in which it left the input qubits. For example, if the qubits passed to your operation are in the state |01rangle, which represents the number 1, they should be transformed to the state |10rangle which represents the number 2 (since the bitwise NOT of 01 is 10). Your code should have the following signature (note that your operation should have Adjoint and Controlled variants defined for it; is Adj+Ctl in the operation signature will generate them automatically based on your code): Your code is not allowed to use measurements or arbitrary rotation gates. This operation can be implemented using just the X gate and its controlled variants.","solution":"def bitwise_not(register): Perform bitwise NOT operation on a given register of qubits. Args: register: List[int] - Array of qubits in little-endian format. Returns: List[int] - Transformed qubits after applying bitwise NOT (X gate). for i in range(len(register)): register[i] = 1 - register[i] # Perform the X gate operation return register"},{"question":"You recently joined a software startup that develops applications to optimize urban transportation. The team\'s current project involves designing a navigation system for buses that calculates the shortest route between bus stops. Your task is to write a function that determines the shortest distance between a given source and destination stop based on the provided routes. The city has `n` bus stops, numbered from `0` to `n-1`. There are `m` direct routes between stops. A direct route is bi-directional and has a positive distance. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 5000), representing the number of bus stops and the number of direct routes respectively. - The next `m` lines each contain three integers `u`, `v`, and `d` (0 ≤ u, v < n; 1 ≤ d ≤ 1000). Each of these lines represents a direct route between bus stop `u` and bus stop `v` with a distance `d`. - The last line contains two integers `s` and `t` (0 ≤ s, t < n), representing the source and destination bus stops. # Output - Print a single integer — the shortest distance from bus stop `s` to bus stop `t`. If there is no path between the two stops, print `-1`. # Example Input ``` 5 6 0 1 2 0 2 4 1 2 1 1 3 7 2 4 3 3 4 1 0 4 ``` Output ``` 6 ``` # Explanation In the example, the total number of bus stops is 5 and there are 6 direct routes. The shortest path from bus stop `0` to bus stop `4` is `0 -> 1 -> 2 -> 4`, which has a total distance of 6. # Constraints - Ensure the algorithm used can handle the upper limits efficiently. - Assume that there are no negative cycles in the graph. # Notes Implement an efficient algorithm (e.g., Dijkstra\'s or the Bellman-Ford algorithm) to solve this problem.","solution":"import heapq def shortest_route(n, m, routes, s, t): Returns the shortest distance from bus stop s to bus stop t. If there is no path between them, returns -1. # Create adjacency list graph = {i: [] for i in range(n)} for u, v, d in routes: graph[u].append((v, d)) graph[v].append((u, d)) # Use Dijkstra\'s algorithm distances = {i: float(\'inf\') for i in range(n)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[t] if distances[t] != float(\'inf\') else -1"},{"question":"You are given an array of integers representing the height of students standing in a line. The heights are given in a strictly increasing order (ascending) followed by a strictly decreasing order (descending). This means the line looks like a \\"mountain\\" where the heights first increase to a peak and then decrease. Given such an array, determine the length of the longest subarray which forms a contiguous peak shape. A peak shape subarray is defined as a contiguous subarray where the elements first strictly increase and then strictly decrease. Your task is to find the length of this longest peak within the array. The input starts with a single integer n (1 ≤ n ≤ 10000) which denotes the number of students in the line. This is followed by n integers representing the heights of the students. Output a single integer — the length of the longest peak subarray. If no peak subarray is found, return 0. # Example: Input: ``` 10 2 4 6 8 10 7 5 3 1 ``` Output: ``` 10 ``` Input: ``` 8 1 3 5 7 9 8 6 4 ``` Output: ``` 8 ``` Input: ``` 7 1 2 3 2 1 ``` Output: ``` 5 ```","solution":"def longest_peak_length(arr): Determines the longest peak subarray length. :param arr: List of integers representing heights of students :return: Integer representing the longest peak subarray length n = len(arr) if n < 3: return 0 longest_peak = 0 i = 1 while i < n - 1: is_peak = arr[i - 1] < arr[i] > arr[i + 1] if is_peak: left = i - 1 right = i + 1 while left > 0 and arr[left] > arr[left - 1]: left -= 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 current_peak_length = right - left + 1 longest_peak = max(longest_peak, current_peak_length) i = right else: i += 1 return longest_peak"},{"question":"You are given an array of integers and your task is to process several queries that ask for the sum of a subarray. The array is immutable, which means after the initial assignment, its elements will not be changed. The goal is to handle multiple queries efficiently. Each query will provide two integers, left and right, which are the indices of the subarray within the original array whose sum you need to find. Write a program that initializes the array and then processes a series of sum queries as efficiently as possible. The first line of input contains two integers, n (1 ≤ n ≤ 100000) and q (1 ≤ q ≤ 100000), where n is the number of elements in the array and q is the number of queries. The second line contains n integers representing the elements of the array. Each of the next q lines contains two integers, left and right (0 ≤ left ≤ right < n), representing the indices of the subarray for which the sum should be computed. Print q lines, each containing the sum of the respective subarray. Input: ``` 5 3 1 2 3 4 5 0 2 1 3 0 4 ``` Output: ``` 6 9 15 ``` Requirements: - Optimize the solution to handle large inputs efficiently. - Consider preprocessing techniques to improve query response time.","solution":"class SubarraySumCalculator: def __init__(self, array): self.array = array self.precomputed_sums = self._precompute_sums() def _precompute_sums(self): precomputed_sums = [0] * (len(self.array) + 1) for i in range(1, len(self.array) + 1): precomputed_sums[i] = precomputed_sums[i - 1] + self.array[i - 1] return precomputed_sums def query_sum(self, left, right): return self.precomputed_sums[right + 1] - self.precomputed_sums[left] def process_queries(n, q, array, queries): calculator = SubarraySumCalculator(array) results = [calculator.query_sum(left, right) for left, right in queries] return results"},{"question":"**Problem Statement:** A logistics company tracks the movements of its delivery vans throughout the day. Each van logs its location at various timestamps, but due to an error, the locations were recorded without their respective dates. Each movement is recorded in the format \\"hh:mm action\\", where \\"hh\\" is the hour, \\"mm\\" is the minute, and \\"action\\" is a string describing the movement (e.g., \\"left warehouse\\", \\"arrived at destination\\"). The timestamps follow a 24-hour format (00:00 to 23:59). The goal is to determine the minimum number of days required to account for all the recorded movements, given that the movements are logged in chronological order and any record after 23:59 belongs to the next day. # Input: - The first line of the input contains an integer n (1 ≤ n ≤ 100), representing the number of movement records. - The next n lines each contain a record in the format \\"hh:mm action\\", where \\"hh\\" is a two-digit number (00 to 23), \\"mm\\" is a two-digit number (00 to 59), and action is a non-empty string with a maximum length of 50 characters. # Output: - Output a single integer, the minimum number of days required to account for all the recorded movements. # Example: **Input:** ``` 6 08:15 left warehouse 10:00 arrived at destination 15:30 left destination 18:45 arrived at warehouse 23:59 maintenance check 00:05 left warehouse ``` **Output:** ``` 2 ``` **Explanation:** There is a transition from 23:59 on one day to 00:05 on the next day. Hence, the log covers at least two days. # Constraints: - The timestamp format is strictly \\"hh:mm\\". - The logs are recorded in chronological order. - The action string contains only English letters and spaces, and it does not start or end with a space.","solution":"def minimum_days_required(n, records): Determines the minimum number of days required to account for all recorded movements. Parameters: n (int): Number of movement records. records (list of str): List containing movement records in \\"hh:mm action\\" format. Returns: int: Minimum number of days required. days_count = 1 prev_time = \\"00:00\\" for record in records: time, action = record.split(\\" \\", 1) if time < prev_time: days_count += 1 prev_time = time return days_count"},{"question":"Given an array of integers representing the heights of blocks, you are required to find the largest rectangular area that can be obtained by arranging these blocks consecutively. Each block\'s width is 1 unit. The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 100,000) denoting the number of blocks. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) representing the heights of the blocks. The output should be a single integer representing the maximum rectangular area. For example: **Input:** 6 2 1 5 6 2 3 **Output:** 10 Explanation: The largest rectangle that can be formed has a height of 2 and spans from the third to the fourth block. Hence, the area is 2 (height) * 5 (width) = 10.","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area that can be obtained by arranging given heights of blocks consecutively. Parameters: heights (list of int): A list of integers representing the heights of blocks. Returns: int: The largest rectangular area. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A company has introduced a new distributed computing system that consists of multiple servers. Each server carries out a specific task and can communicate with other servers to request assistance with completing its tasks. This communication is achieved through a messaging system where each server can send and receive messages to and from other servers. Your task is to write a function that determines the minimum number of messages required for a given server to communicate with all other servers. Each server is represented as a node in a graph, and each directed edge between nodes represents a direct message that a server can send to another server. # Input - The first line contains an integer `n`, the number of servers (1 <= n <= 100,000). - The second line contains an integer `m`, the number of direct communication paths between servers (0 <= m <= 200,000). - Each of the next `m` lines contains two integers `u` and `v`, representing a direct communication path from server `u` to server `v` (1 <= u, v <= n, u != v). # Output - The function should output an integer indicating the minimum number of messages required for a given server to communicate with all other servers. If it\'s not possible to communicate with all other servers, print -1. # Example **Input:** ``` 4 4 1 2 2 3 3 4 4 1 ``` **Output:** ``` 1 ``` **Explanation:** In the given graph, each server can communicate with every other server through a sequence of messages. For example, from server 1, server 2 can be reached with 1 message, server 3 can be reached with 2 messages, and so on. The minimum number of messages required to communicate with all servers from any server is 1 in this case.","solution":"from collections import deque, defaultdict def min_messages_to_communicate(n, m, edges): def bfs(start): queue = deque([start]) visited = set([start]) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return count == n if n == 1: return 0 # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Iterate through each vertex, if it can communicate with all other vertices for i in range(1, n + 1): if bfs(i): return 1 return -1"},{"question":"A sequence of positive integers is called a partition of a number n if the sum of the sequence is equal to n and the sequence is non-decreasing. For example, the following sequences are partitions of 5: [5], [1, 4], [2, 3], [1, 1, 3], [1, 2, 2], [1, 1, 1, 2], [1, 1, 1, 1, 1]. However, the following sequences are not partitions of 5: [6], [5, -1], [4, 2], [2, 1, 1, 1]. Let the depth of a partition be the number of elements in the partition. For a given integer n, find the maximum depth of its partition. The first line contains one integer n (1 leq n leq 10^9). Output one integer — the maximum depth of the partition. **Example:** For the input: 7 The output will be: 7 Explanation: The partition [1, 1, 1, 1, 1, 1, 1] has the maximum depth of 7.","solution":"def max_partition_depth(n): Finds the maximum depth of a partition for a given integer n. return n"},{"question":"You are given a list of integers where each integer represents the number of votes each candidate received in an election. Your task is to find out if there is a clear winner. A candidate is considered a clear winner if they have strictly more votes than any other candidate. Write a program that: - First reads an integer `m` (1 le m le 100) which indicates the number of candidates. - Next reads `m` integers where each integer represents the number of votes received by a candidate. All integers are non-negative. The program should output: - \\"YES\\" if there is a clear winner. - \\"NO\\" if there is no clear winner. If there is no clear winner, it means there is either a tie for the most votes or there are no votes at all. # Input The input consists of two lines: 1. The first line contains a single integer `m` (1 le m le 100) — the number of candidates. 2. The second line contains `m` integers separated by spaces, where each integer is the number of votes received by one of the candidates. Each integer is non-negative and does not exceed (10^4). # Output Print \\"YES\\" if there is a clear winner, otherwise print \\"NO\\". # Example Input 1 ``` 3 5 9 5 ``` Output 1 ``` NO ``` Input 2 ``` 4 12 7 9 4 ``` Output 2 ``` YES ``` Explanation - In the first example, two candidates have the most votes (5 votes each), so there is no clear winner. - In the second example, the first candidate wins with 12 votes, which is more than any other candidate. Therefore, the output is \\"YES\\".","solution":"def check_clear_winner(m, votes): This function checks if there is a clear winner. A clear winner is a candidate who has strictly more votes than any other candidate. Parameters: m (int): The number of candidates. votes (list): A list of integers where each integer represents the number of votes a candidate received. Returns: str: \\"YES\\" if there is a clear winner, otherwise \\"NO\\". max_votes = max(votes) if votes.count(max_votes) == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A bookshelf contains multiple sections, and each section can hold a certain maximum number of books. Your task is to write a program that will help distribute books in the sections so that the number of sections used is minimized. You are given `n` books and `m` sections. Each book has a specific width, and each section has a specific maximum width it can accommodate. To minimize the sections used, you should follow these steps: 1. Place books in the sections such that the sum of the widths of the books in each section does not exceed the section\'s maximum width. 2. If a book cannot fit into any existing section, you must start a new section with that book. You need to output the minimum number of sections required to fit all the books. **Input:** - The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 100), the number of books and the number of sections, respectively. - The second line contains `n` integers, where the ith integer is the width of the ith book (1 ≤ book width ≤ 100). - The third line contains `m` integers, where the jth integer is the maximum width of the jth section (1 ≤ section maximum width ≤ 1000). **Output:** - Print a single integer — the minimum number of sections required to fit all the books. **Example:** **Input:** ``` 5 3 2 3 5 7 1 10 10 5 ``` **Output:** ``` 2 ``` In this example, the first section will hold books of widths `2, 3, 5` (totaling 10) and the second section will hold books of widths `7, 1` (totaling 8). Hence, the minimum number of sections used is 2.","solution":"def min_sections_required(n, m, book_widths, section_capacities): Calculate the minimum number of sections required to fit all given books. :param n: Number of books :param m: Number of sections :param book_widths: List of widths of books :param section_capacities: List of capacities of sections :return: Minimum number of sections required section_capacities.sort(reverse=True) books_sorted = sorted(book_widths, reverse=True) sections_used = 0 current_section = [] for book in books_sorted: placed = False for i in range(len(current_section)): if current_section[i] + book <= section_capacities[i]: current_section[i] += book placed = True break if not placed: if sections_used < m: current_section.append(book) sections_used += 1 else: return -1 return sections_used"},{"question":"In a distant city, there is a peculiar festival where the residents celebrate by arranging an array of lights in a specific non-decreasing sequence. There are n lights and each light i has a certain height arr[i]. As part of the festival tradition, the residents can increase the height of any light to try to create a non-decreasing sequence of light heights. However, they cannot decrease the height of any light. Your task is to determine the minimum total increase in the heights that is required to make the heights of the lights follow a non-decreasing order. The festival committee has limited resources and needs to minimize the cost. Help them determine the minimum total height increase needed to make the sequence non-decreasing. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of lights. - The second line contains n integers arr[1], arr[2], ..., arr[n] (1 ≤ arr[i] ≤ 10000) — the initial heights of the lights. Output: - Output a single integer — the minimum total height increase required. Example: Input: 5 1 2 3 2 5 Output: 1 Explanation: To make the sequence non-decreasing, we need to increase the height of the fourth light from 2 to 3. Hence, the minimum total height increase required is 1.","solution":"def min_total_increase(n, arr): Determines the minimum total increase in the heights that is required to make the heights of the lights follow a non-decreasing order. Parameters: n (int): number of lights arr (list of int): initial heights of the lights Returns: int: minimum total height increase required total_increase = 0 for i in range(1, n): if arr[i] < arr[i - 1]: total_increase += arr[i - 1] - arr[i] arr[i] = arr[i - 1] return total_increase"},{"question":"You are given a grid of size n x n where each cell is initially either empty or contains a single tree. The goal is to determine the minimum number of trees you need to plant such that each row and each column contains at least one tree. If this is not possible, then output -1. The input consists of: 1. The first line contains an integer n (1 ≤ n ≤ 100), the size of the grid. 2. The following n lines each contain a string of length n, consisting of the characters \'.\' and \'T\', representing an empty cell and a cell with a tree respectively. Output the minimum number of trees needed to be planted to achieve the goal. If it is impossible, output -1. Example: Input: 4 .T.. .... ..T. .... Output: 2","solution":"def min_trees_to_plant(n, grid): Determines the minimum number of trees to be planted such that each row and each column contains at least one tree. If not possible, returns -1. Parameters: n (int): The size of the grid (n x n). grid (list of str): The grid representation with \'T\' for tree and \'.\' for empty. Returns: int: The minimum number of trees to be planted or -1 if not possible. rows_with_tree = [False] * n cols_with_tree = [False] * n # Mark rows and columns that already have trees for i in range(n): for j in range(n): if grid[i][j] == \'T\': rows_with_tree[i] = True cols_with_tree[j] = True # Count how many rows and columns need trees rows_needed = sum(1 for r in rows_with_tree if not r) cols_needed = sum(1 for c in cols_with_tree if not c) # If number of rows/columns needed is greater than the grid size, it\'s impossible if rows_needed > n or cols_needed > n: return -1 # Maximum of needed rows and columns is the number of trees to be planted return max(rows_needed, cols_needed)"},{"question":"Given an array of positive integers representing heights of buildings, find the maximum water that can be trapped within these buildings after it rains. Each building is of unit width and the input is given in the form of an array where the element at each index represents the height of the building at that index. Write a function `maxTrappedWater(heights)` that takes a list of integers `heights` and returns an integer representing the maximum units of water that can be trapped. # Example Input: `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]` Output: `6` Explanation: The maximum water trapped between the buildings is 6 units, visualized as follows: ``` __ __ | |__ __ | |__ | | |__ __| |__| | || | | | |__|__|__|__|__|__|__|__|__ 0 1 0 2 1 0 1 3 2 1 2 1 ```","solution":"def maxTrappedWater(heights): if not heights: return 0 left = 0 right = len(heights) - 1 left_max = heights[left] right_max = heights[right] water_trapped = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) water_trapped += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += max(0, right_max - heights[right]) return water_trapped"},{"question":"Given a binary tree, you need to determine the lowest common ancestor (LCA) of two given nodes in the tree. The LCA of two nodes p and q in a binary tree is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself). You need to write a function `lowestCommonAncestor(root, p, q)` that takes the root of a binary tree and two nodes p and q, and returns the LCA of nodes p and q. # Input - The root of a binary tree. - Two nodes p and q which are part of the tree. # Output - The node which is the lowest common ancestor of nodes p and q. # Constraints - For simplicity, we may assume that all TreeNode values are unique. - The number of total nodes in the tree could be up to 10^4. - The tree structure and node values will be presented in a standardized way as a serialized string input. # Example Example 1: ``` Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 Output: 3 Explanation: The LCA of nodes 5 and 1 is 3. ``` Example 2: ``` Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 Output: 5 Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition. ``` Example 3: ``` Input: root = [1,2], p = 1, q = 2 Output: 1 Explanation: The LCA of nodes 1 and 2 is 1. ``` # Note - Construction of the tree and the `lowestCommonAncestor` function should efficiently handle the outlined constraints. - You may use any language-specific data structures and libraries as needed for tree operations.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root, p, q): Returns the lowest common ancestor (LCA) of two given nodes in a binary tree. if not root: return None if root == p or root == q: return root left = lowestCommonAncestor(root.left, p, q) right = lowestCommonAncestor(root.right, p, q) if left and right: return root return left if left else right"},{"question":"You are given a set of tasks, each with a deadline and a profit if the task is completed before the deadline. Each task takes one unit of time to complete, and only one task can be completed at a time. You need to schedule the tasks in such a way that maximizes the total profit obtained. Each task is represented by a tuple (task_id, deadline, profit), where: - `task_id` is an integer identifier of the task. - `deadline` is the latest time by which the task should be finished. - `profit` is the profit obtained from completing the task before or on its deadline. You need to output the maximum total profit and the sequence of task_ids to be completed to achieve this maximum profit. The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of tasks. Each of the next `n` lines contains three integers: `task_id`, `deadline`, and `profit` (1 ≤ task_id ≤ 1000, 1 ≤ deadline ≤ 1000, 1 ≤ profit ≤ 10^6). Output two lines: - The first line should contain the maximum total profit. - The second line should contain the sequence of task_ids that maximizes the profit, in the order in which the tasks should be performed. The task_ids in the sequence should be unique. # Example Input: ``` 4 1 4 20 2 1 10 3 1 40 4 1 30 ``` Output: ``` 60 3 1 ``` Explanation: - The task that profits the most (task 3) is completed first. - After that, the next best task that can be completed within its deadline is task 1. - Together, tasks 3 and 1 yield the maximum profit of 60.","solution":"def schedule_tasks(tasks): Return the maximum total profit and the sequence of task_ids. Args: tasks: List of tuples, where each tuple contains task_id, deadline, and profit. Returns: A tuple containing the maximum total profit and the sequence of task_ids. # Sort the tasks based on descending order of profit tasks.sort(key=lambda x: x[2], reverse=True) n = len(tasks) max_deadline = max(task[1] for task in tasks) # Initialize the time slots array time_slots = [-1] * (max_deadline + 1) total_profit = 0 task_sequence = [] for task in tasks: task_id, deadline, profit = task # Find a slot for this task for t in range(min(deadline, max_deadline), 0, -1): if time_slots[t] == -1: time_slots[t] = task_id total_profit += profit task_sequence.append(task_id) break return total_profit, task_sequence"},{"question":"Write a function that takes a list of unique integers and finds the maximum possible product of three distinct numbers from the list. The function should accept a single list of integers, nums, where the length of the list is between 3 and 50 inclusive (`3 ≤ len(nums) ≤ 50`). Each integer in the list will be in the range [-100, 100]. Output the maximum product of any three distinct integers from the list. For example, given the list `[-10, -10, 5, 2]`, the result should be `500` since the maximum product of 3 distinct numbers is formed by -10, -10, and 5.","solution":"def max_product_of_three(nums): Returns the maximum possible product of three distinct numbers from the list nums. nums.sort() return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])"},{"question":"In a city, there are n distinct intersections connected by m bidirectional roads. Each road directly connects exactly two distinct intersections and has a certain length. The city\'s traffic department wants to analyze traffic flow and has decided to place one-way signs on some or all roads to direct the flow of traffic. However, to ensure that traffic can still flow smoothly, they have the following requirements: - From any intersection, it must be possible to reach every other intersection using one or more of the directed roads. Given the intersections and the roads between them, determine whether it\'s possible to assign directions to some or all of the roads to satisfy the above requirements. Input: - The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) — the number of intersections and the number of roads. - The next m lines each contain three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 1000) — describing a road between intersections u and v with length l. Output: - Print \\"YES\\" if it is possible to assign directions to some or all of the roads such that from any intersection there is a path to every other intersection. - Otherwise, print \\"NO\\". Sample Input 1: 5 7 1 2 4 1 3 2 2 3 1 2 4 7 3 4 5 4 5 3 3 5 2 Sample Output 1: YES Sample Input 2: 4 2 1 2 1 3 4 2 Sample Output 2: NO Explanation: In the first sample, it is possible to assign directions to roads such that there\'s a path from any intersection to every other intersection. For example, we can direct the roads as follows: - 1 -> 2 - 3 -> 1 - 2 -> 3 - 2 -> 4 - 3 -> 4 - 4 -> 5 - 5 -> 3 In the second sample, it is not possible to assign directions to the roads such that every intersection is reachable from every other intersection, because there is no road connecting the pair of components (1, 2) and (3, 4).","solution":"def can_assign_directions(n, m, roads): from collections import defaultdict, deque def bfs(start, graph): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count == n if m == 0: return \\"NO\\" undirected_graph = defaultdict(list) for u, v, l in roads: undirected_graph[u].append(v) undirected_graph[v].append(u) # Check if the graph is connected if not bfs(1, undirected_graph): return \\"NO\\" return \\"YES\\""},{"question":"A game developer is trying to implement a method to detect character collision in a 2D game. Two characters collide if their bounding boxes overlap. Each character has a bounding box defined by the top-left corner (x1, y1) and the bottom-right corner (x2, y2). Write a function to determine if two characters collide based on their bounding boxes. Implement a function `do_collide(b1, b2)` that takes two bounding boxes b1 and b2 as inputs. Each bounding box is represented by a list of four integers `[x1, y1, x2, y2]`, where (x1, y1) are the coordinates of the top-left corner, and (x2, y2) are the coordinates of the bottom-right corner. The function should return `True` if the bounding boxes overlap (indicating a collision), and `False` otherwise. **Input:** - Two lists of integers, b1 and b2, each containing four integers: `[x1, y1, x2, y2]`. **Output:** - A boolean value: `True` if the bounding boxes collide, and `False` otherwise. **Constraints:** - -10^4 <= x1, y1, x2, y2 <= 10^4 - `x1 < x2` and `y1 < y2` **Examples:** 1. `do_collide([0, 0, 2, 2], [1, 1, 3, 3])` should return `True`. 2. `do_collide([0, 0, 1, 1], [2, 2, 3, 3])` should return `False`. 3. `do_collide([0, 0, 3, 3], [1, 1, 2, 2])` should return `True`. **Explanation:** - In the first example, the bounding boxes overlap since their ranges on both x and y axes intersect. - In the second example, the bounding boxes do not overlap as there is no intersection on either the x or y axes. - In the third example, one bounding box is entirely within the other, so they collide.","solution":"def do_collide(b1, b2): Determine if two characters collide based on their bounding boxes. Parameters: b1 (list): Bounding box of first character [x1, y1, x2, y2] b2 (list): Bounding box of second character [x1, y1, x2, y2] Returns: bool: True if bounding boxes collide, False otherwise # Unpack the bounding boxes for clarity x1_1, y1_1, x2_1, y2_1 = b1 x1_2, y1_2, x2_2, y2_2 = b2 # Check if there is no overlap on the x axis if x1_1 >= x2_2 or x1_2 >= x2_1: return False # Check if there is no overlap on the y axis if y1_1 >= y2_2 or y1_2 >= y2_1: return False return True"},{"question":"You are given a square matrix of integers. Your task is to rotate the matrix 90 degrees clockwise. Implement a function that takes a square matrix (represented as a list of lists) as input and returns a new matrix that is rotated 90 degrees clockwise. Example: Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Your code should have the following signature: ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates a given square matrix 90 degrees clockwise. Args: matrix (List[List[int]]): A square matrix of integers. Returns: List[List[int]]: The input matrix rotated 90 degrees clockwise. n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated"},{"question":"Write a function `find_subarray_sum(arr, target_sum)` that takes in a list of integers `arr` and an integer `target_sum`, and returns the starting and ending indices of the subarray that adds up to the target_sum. If no such subarray exists, return `None`. The subarray should consist of contiguous elements and the indices are 0-based. # Input - `arr`: a list of integers where the length of the list is between 1 and 10^5 inclusive. The integers can be negative, zero, or positive. - `target_sum`: an integer which can be negative, zero, or positive. # Output - A tuple containing two integers denoting the starting and ending indices of the subarray, or `None` if no such subarray exists. # Example ```python assert find_subarray_sum([1, 2, 3, 4, 5], 9) == (1, 3) assert find_subarray_sum([1, 2, 3, 4, 5], 15) == (0, 4) assert find_subarray_sum([-1, -2, 3, -4, 5], -3) == (0, 1) assert find_subarray_sum([1, 2, 3], 7) == None assert find_subarray_sum([1, 4, 20, 3, 10, 5], 33) == (2, 4) ``` # Constraints - The function should have a time complexity better than O(n^2) for given n as the length of the array. - It should use additional space efficiently. Write your solution in Python.","solution":"def find_subarray_sum(arr, target_sum): Finds the starting and ending indices of the subarray that adds up to the target_sum. If no such subarray exists, returns None. cum_sum = 0 sum_indices = {} # Iterate over the array to find the subarray with the given sum for i, num in enumerate(arr): cum_sum += num # Check if the cumulative sum equals the target if cum_sum == target_sum: return (0, i) # Check if there is a subarray (0 to j) such that cum_sum - target_sum was seen before if cum_sum - target_sum in sum_indices: return (sum_indices[cum_sum - target_sum] + 1, i) # Store the cumulative sum with its corresponding index sum_indices[cum_sum] = i # Return None if no such subarray is found return None"},{"question":"You are given a sequence of integers a1, a2, ... an. The number of inversions in the sequence is the number of pairs (i, j) such that 1 ≤ i < j ≤ n and ai > aj. Your task is to find the number of inversions in the given sequence. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n integers a1, a2, ... an (1 ≤ ai ≤ 1000) — the elements of the sequence. Print a single integer — the number of inversions in the sequence.","solution":"def count_inversions(sequence): Count the number of inversions in the sequence. An inversion is a pair (i, j) such that 1 ≤ i < j ≤ n and a[i] > a[j]. :param sequence: List of integers representing the sequence. :return: Integer, the number of inversions. n = len(sequence) inv_count = 0 # Traverse through the array for i in range(n): for j in range(i+1, n): if sequence[i] > sequence[j]: inv_count += 1 return inv_count"},{"question":"You are given a grid of size n x m representing a zombie-infested city. Each cell can be either an empty space (\\".\\") or occupied by a zombie (\\"Z\\"). You need to deploy a drone to clear zombies. The drone is placed in a specific cell and can clear all zombies in the same row, the same column, and both main diagonals passing through that cell. The objective is to determine if it\'s possible to clear all zombies in the city by deploying exactly one drone. The first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The following n lines contain m symbols each (either \\".\\" or \\"Z\\") — representing the grid. The j-th symbol in the i-th line denotes the cell (i, j). If the symbol is \\".\\", the cell is empty, if it is \\"Z\\", the cell is occupied by a zombie. If it is impossible to clear all zombies by deploying one drone, print \\"NO\\" (without quotes). If it is possible, print \\"YES\\" (without quotes) on the first line, followed by two integers on the second line — the coordinates of the cell where the drone should be deployed. If there are multiple answers, print any of them.","solution":"def can_clear_zombies(n, m, grid): def can_clear_at(i, j): for r in range(n): if grid[r][j] == \'Z\' and r != i: return False for c in range(m): if grid[i][c] == \'Z\' and c != j: return False for k in range(1, max(n, m)): if i+k < n and j+k < m and grid[i+k][j+k] == \'Z\': return False if i-k >= 0 and j-k >= 0 and grid[i-k][j-k] == \'Z\': return False if i+k < n and j-k >= 0 and grid[i+k][j-k] == \'Z\': return False if i-k >= 0 and j+k < m and grid[i-k][j+k] == \'Z\': return False return True for i in range(n): for j in range(m): if grid[i][j] == \'Z\' and can_clear_at(i, j): return (\\"YES\\", i+1, j+1) return \\"NO\\""},{"question":"Violet has recently become fascinated with palindromes. She learned that a palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). She also discovered that palindromic substrings within strings — substrings that are palindromes — can give interesting insights into the structure of the string. Violet\'s new challenge is to find out how many unique palindromic substrings exist within a given string. Can you help her by writing a function that determines this? Input consists of a single line containing a non-empty string s of length at most 1000, consisting of lowercase English letters only. Output a single integer — the number of unique palindromic substrings in the input string. For example, given the string \\"ababa\\", the palindromic substrings would be \\"a\\", \\"aba\\", \\"b\\", \\"bab\\", and \\"ababa\\". Since each palindrome should be counted only once, the output would be 4. In another example, given the string \\"abc\\", the palindromic substrings would be \\"a\\", \\"b\\", and \\"c\\". Thus, the output would be 3.","solution":"def count_unique_palindromic_substrings(s): Returns the number of unique palindromic substrings in the given string s. def expand_around_center(s, left, right, palindromes): while left >= 0 and right < len(s) and s[left] == s[right]: palindromes.add(s[left:right + 1]) left -= 1 right += 1 palindromes = set() for i in range(len(s)): # Odd-length palindromes (center is one character) expand_around_center(s, i, i, palindromes) # Even-length palindromes (center is between two characters) expand_around_center(s, i, i + 1, palindromes) return len(palindromes)"},{"question":"You are preparing a playlist for a music event. Each song in your playlist has a specific length, and you aim to maximize the number of songs played within a given time limit. Given an array of song lengths and a time limit, find the maximum number of songs that can be played without exceeding the time limit. The input will be provided as follows: - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `t` (1 ≤ t ≤ 10^6), where `n` is the number of songs, and `t` is the total time limit in minutes. - The second line contains `n` integers `s1, s2, ..., sn` (1 ≤ si ≤ 10^5) representing the length of each song in minutes. Output the maximum number of songs that can be played within the time limit. Example: Input: ``` 5 60 10 20 30 40 50 ``` Output: ``` 3 ``` In this example, you can select songs with lengths 10, 20, and 30, which fit exactly within the 60-minute limit. Thus, the output is 3.","solution":"def max_songs(n, t, songs): Returns the maximum number of songs that can be played within the given time limit. Parameters: n (int): The number of songs. t (int): The total time limit in minutes. songs (list): List of song lengths in minutes. Returns: int: The maximum number of songs that can be played without exceeding the time limit. # Sort the song lengths in ascending order songs.sort() total_time = 0 song_count = 0 # Add songs one by one until the total time exceeds the limit for length in songs: if total_time + length <= t: total_time += length song_count += 1 else: break return song_count # Example usage: # n, t = 5, 60 # songs = [10, 20, 30, 40, 50] # print(max_songs(n, t, songs)) # Output: 3"},{"question":"Norris is a passionate botanist who loves to explore new kinds of plant species. He often categorizes plants based on their heights. One day, he received a list of plants with their heights measured in centimeters. Norris wants to group these plants into sets where the height difference between the tallest and the shortest plant in any set does not exceed a specified threshold value d. Your task is to calculate the minimum number of such sets needed to include all the plants. # Input: - The first line contains two space-separated integers n (1 le n le 100), the number of plants, and d (1 le d le 100), the maximum allowed height difference within a set. - The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 le h_i le 200), where h_i represents the height of the i-th plant. # Output: - Print the minimum number of sets needed to group all plants according to the given conditions. # Example: Input: ``` 5 2 1 2 3 5 6 ``` Output: ``` 2 ``` # Explanation: One possible grouping is: - Set 1: {1, 2, 3} - Set 2: {5, 6} Here, the height difference within each set does not exceed 2. # Constraints: - Ensure that all plants are grouped following the height difference constraint. - The number of plants in each set may vary, but the difference between the maximum and minimum height of plants within any set should not exceed d.","solution":"def min_number_of_sets(n, d, heights): Determines the minimum number of sets needed so that the difference between the tallest and shortest plant in any set does not exceed the specified threshold d. :param n: int, number of plants :param d: int, maximum allowed height difference within a set :param heights: list of int, heights of the plants :return: int, minimum number of sets needed # Sort the heights heights.sort() # Initialize the number of sets sets = 0 i = 0 while i < n: # Start a new set sets += 1 # Find the range of this set start_height = heights[i] while i < n and (heights[i] - start_height) <= d: i += 1 return sets"},{"question":"A farmer owns an \\"n\\" x \\"n\\" grid, represented as a matrix. Each cell in the matrix can either be fertile (represented by 1) or infertile (represented by 0). The farmer can plant crops on any fertile cells. However, he wants to maximize the yield by grouping the fertile cells into the largest possible rectangular sub-grid. Your task is to determine the number of cells in the largest rectangular sub-grid that contains only fertile cells. # Input: - The first line contains a single integer `n` (1 leq n leq 1000) — the size of the grid. - The next `n` lines each contain `n` integers either 0 or 1. Each integer represents the fertility status of a cell in the grid. # Output: - A single integer — the maximum number of cells in the largest rectangular sub-grid composed of only fertile cells. # Example: __Input:__ ``` 5 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 1 0 0 1 1 1 ``` __Output:__ ``` 6 ``` __Explanation:__ The largest rectangular sub-grid composed of only fertile cells (1s) is: ``` 1 1 1 1 1 1 ``` forming a 2x3 sub-grid, which contains 6 cells.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m for i in range(n): for j in range(m): if matrix[i][j] == 1: heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area def largest_fertile_subgrid(n, grid): return maximalRectangle(grid)"},{"question":"Given an elevation map represented by an array of integers, where each element represents the height of a unit-wide block, calculate the maximum amount of water that can be trapped after a rain. For example, given the elevation map [0,1,0,2,1,0,1,3,2,1,2,1], the maximum amount of water that can be trapped is 6 units. Implement a function that takes an array of integers representing the elevation map and returns the total water that can be trapped. # Input - An array of integers `height`, where `0 ≤ height[i] ≤ 10^5` and `1 ≤ len(height) ≤ 2 * 10^4`. # Output - An integer representing the maximum amount of water trapped. # Example Input ``` height = [0,1,0,2,1,0,1,3,2,1,2,1] ``` Output ``` 6 ``` # Constraints Follow these constraints while solving the problem: 1. The solution should have a time complexity of O(n). 2. The solution should use constant extra space of O(1) beyond the input.","solution":"def trap(height): Calculate the total water that can be trapped given the height map. :param height: List[int] - elevation map :return: int - total trapped water if not height: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] trapped_water = 0 while left < right: if height[left] <= height[right]: left += 1 left_max = max(left_max, height[left]) trapped_water += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) trapped_water += max(0, right_max - height[right]) return trapped_water"},{"question":"Write a function to calculate the next day of the week given the current day of the week and the number of days to increment. The day of the week can be represented as: {\\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\"}. Input - The current day of the week in string format. - An integer representing the number of days to increment, which can be a positive or negative number. Output - A string representing the day of the week after the increment. Examples Example 1: > **Input:** \\"Monday\\", 3 > **Output:** \\"Thursday\\" Example 2: > **Input:** \\"Saturday\\", 2 > **Output:** \\"Monday\\" Example 3: > **Input:** \\"Wednesday\\", -3 > **Output:** \\"Sunday\\" Example 4: > **Input:** \\"Friday\\", -7 > **Output:** \\"Friday\\" Constraints - The input day is guaranteed to be a valid day of the week. - The increment number can be any integer, positive, negative or zero. Implement the function `next_day(current_day: str, increment: int) -> str`.","solution":"def next_day(current_day, increment): Returns the next day of the week given the current day and the number of days to increment. days_of_week = [\\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\"] current_index = days_of_week.index(current_day) new_index = (current_index + increment) % len(days_of_week) return days_of_week[new_index]"},{"question":"You are given a list containing n integers. Your task is to find the length of the longest subsequence such that the sum of the elements in the subsequence is even. A subsequence is any sequence that can be derived from the list by deleting some or no elements without changing the order of the remaining elements. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the list. Output a single integer — the length of the longest subsequence with an even sum. # Examples Example 1: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: One of the longest subsequences with an even sum is [1, 2, 3, 4] which sums to 10. Example 2: Input: ``` 3 1 3 5 ``` Output: ``` 2 ``` Explanation: One of the longest subsequences with an even sum is [1, 3] which sums to 4. Example 3: Input: ``` 4 2 4 6 8 ``` Output: ``` 4 ``` Explanation: The whole list itself is the longest subsequence with an even sum resulting in 20.","solution":"def longest_even_sum_subsequence_length(n, a): odd_count = sum(1 for x in a if x % 2 != 0) even_count = n - odd_count if odd_count % 2 == 0: # If the count of odd numbers is even, we can use all elements return n else: # If the count of odd numbers is odd, we exclude the smallest odd number return n - 1"},{"question":"Implement a function that takes a string as input and returns a boolean value indicating whether or not the characters of the string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. The function should consider only alphanumeric characters (ignore spaces, punctuation, and other characters), and should be case-insensitive. For example, for the string \\"Tact Coa\\", the function should return `True` because it can be rearranged to form \\"taco cat\\" or \\"atco cta\\" which are palindromes. # Function Signature ```python def can_form_palindrome(s: str) -> bool: ``` # Input - `s`: A string which may contain alphanumeric characters, spaces, or punctuation (1 ≤ |s| ≤ 10^5) # Output - A boolean value # Examples ```python assert can_form_palindrome(\\"Tact Coa\\") == True assert can_form_palindrome(\\"Not a Palindrome\\") == False assert can_form_palindrome(\\"A man, a plan, a canal, Panama!\\") == True ``` # Constraints - The function should ignore spaces, punctuation, and be case-insensitive. - The expected time complexity is O(n), where n is the length of the string.","solution":"def can_form_palindrome(s: str) -> bool: Returns True if the characters of the input string can be rearranged to form a palindrome, considering only alphanumeric characters and ignoring case. Otherwise, returns False. from collections import Counter import re # Convert the string to lower case and remove all non-alphanumeric characters s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s.lower()) # Count the frequency of each character char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be able to form a palindrome, it can have at most one character with an odd count return odd_count <= 1"},{"question":"Sarah is organizing a marathon, and she needs to distribute water bottles to the participants along the track. She wants to place the water stations in such a manner that there is at least one station within every k meters of the track, including the start and end points. Given the length of the track n meters, and the distance k meters that each water station can cover, determine the minimum number of water stations required to ensure every part of the track has access to water. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^9). Print the minimum number of water stations required. In the first sample, the track is 10 meters long and each station can cover 2 meters. Sarah needs 5 stations to cover the entire length. In the second sample, the track is 15 meters long and each station can cover 5 meters. Sarah needs 3 stations to cover the entire length.","solution":"def min_water_stations(n, k): Returns the minimum number of water stations required to ensure every part of the track has access to water. :param n: length of track in meters :param k: distance each station can cover in meters :return: minimum number of water stations required if n % k == 0: return n // k else: return n // k + 1"},{"question":"In a warehouse, there are n boxes arranged in an array. Each box contains a single item with a value denoted by an integer array `items`. Workers are required to move the items between the boxes such that the value of each item is less than or equal to the value of the item in the next box. The workers can swap items between any two boxes. The task is to find the minimum number of swaps required to arrange the items in non-decreasing order. Write a function `minimumSwaps(items: List[int]) -> int` to achieve this. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of boxes in the warehouse. - The second line contains n space-separated integers `items[i]` (1 ≤ items[i] ≤ 1000000) — the value of the items in the boxes. **Output:** - Print a single integer — the minimum number of swaps required to arrange the items in non-decreasing order. **Example:** Input: ``` 5 4 3 2 1 5 ``` Output: ``` 3 ``` In this example: - Initial array: [4, 3, 2, 1, 5] - Swap 1: Swap 4 and 1 → [1, 3, 2, 4, 5] - Swap 2: Swap 3 and 2 → [1, 2, 3, 4, 5] - No more swaps needed, so the total number of swaps is 2.","solution":"def minimumSwaps(items): Returns the minimum number of swaps required to sort the items in non-decreasing order. n = len(items) arrpos = [(items[i], i) for i in range(n)] arrpos.sort() visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arrpos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arrpos[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Anna loves to collect vintage books and has recently expanded her collection significantly. To organize her collection, Anna places the books on a shelf in such a way that the weight is distributed evenly along the shelf. Anna has `n` books, each with an integer weight given in an array `weights`. She wants to know if she can split the books into two groups with equal total weights. If it\'s possible, print \\"YES\\", otherwise, print \\"NO\\". # Input The first line contains a single integer `n` (1 ≤ n ≤ 20) — the number of books. The second line contains `n` integers separated by spaces, where the i-th integer `weights[i]` (1 ≤ weights[i] ≤ 100) represents the weight of the i-th book. # Output Print \\"YES\\" if it\'s possible to split the books into two groups with equal total weights, otherwise print \\"NO\\". # Example Input ``` 4 1 3 4 2 ``` Output ``` YES ``` Input ``` 3 1 5 7 ``` Output ``` NO ```","solution":"def can_split_weights_evenly(n, weights): from itertools import combinations total_weight = sum(weights) # If the total weight is odd, it cannot be split into two equal parts if total_weight % 2 != 0: return \\"NO\\" half_weight = total_weight // 2 # Check all possible combinations to find if there\'s a subset summing to half_weight for r in range(1, n+1): for combo in combinations(weights, r): if sum(combo) == half_weight: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers which represents the scores of a group of students in a particular exam. Your task is to write a function that computes the median score efficiently. - If the number of scores is odd, the median is the middle element when the list is sorted. - If the number of scores is even, the median is the average of the two middle elements when the list is sorted. You should aim to implement this function in O(n log n) time complexity due to the need to sort the list. Your function should take a list of integers and return a float representing the median score. Your code should have the following signature: ```python def calculate_median(scores: List[int]) -> float: pass ```","solution":"from typing import List def calculate_median(scores: List[int]) -> float: Returns the median score from a list of integers. sorted_scores = sorted(scores) n = len(sorted_scores) if n % 2 == 1: # If the length of the scores list is odd return float(sorted_scores[n // 2]) else: # If the length of the scores list is even middle1 = sorted_scores[n // 2 - 1] middle2 = sorted_scores[n // 2] return (middle1 + middle2) / 2.0"},{"question":"A street vendor is selling various fruits. Each type of fruit has a certain amount of space it occupies and a profit associated with it. The vendor has limited space in his cart and wants to maximize the profit without exceeding the space limit of the cart. You are given multiple test cases. For each test case, you are provided with the number of different fruits, the space limit of the vendor\'s cart, and for each fruit, the associated space it occupies and the profit it generates. Your task is to determine the maximum profit the vendor can achieve while staying within the space limit. Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). Description of the test cases follows. The first line of each test case contains two integers n and S (1 le n le 100, 1 le S le 1000) — the number of different fruits and the space limit of the cart respectively. The next n lines each contain two integers space_i and profit_i (1 le space_i le 100, 1 le profit_i le 1000) — the space occupied by the fruit and the profit made by selling the fruit respectively. Output a single integer for each test case which is the maximum profit that can be achieved without exceeding the space limit. # Example Input ``` 2 3 50 10 60 20 100 30 120 2 10 5 20 4 15 ``` Output ``` 220 35 ``` # Explanation In the first test case, the vendor can take the first and second types of fruits for a total space of 30 and a total profit of 160. He can also take the last type for a profit of 120. Adding the first and second fruits results in the maximum profit which is 220. In the second test case, the vendor can take both fruits for a total profit of 35.","solution":"def max_profit(t, test_cases): results = [] for i in range(t): n, S = test_cases[i][0] fruits = test_cases[i][1:] # Using dynamic programming to find the maximum profit dp = [0] * (S + 1) for space, profit in fruits: for j in range(S, space - 1, -1): dp[j] = max(dp[j], dp[j - space] + profit) results.append(dp[S]) return results"},{"question":"You are given a binary tree with `n` nodes. Each node has a unique integer value from 1 to `n`. You need to find the diameter of the binary tree, which is defined as the length of the longest path between any two nodes in the tree. Write a program that, given the description of the binary tree, computes its diameter. The binary tree is given using an adjacency list where each node is represented by its integer value and the edge between parent and child nodes. # Input The first line of the input contains a single integer `n` (1 le n le 1000) – the number of nodes in the binary tree. The next `n - 1` lines each contain two integers `u` and `v` (1 le u, v le n), representing an edge between node `u` and node `v`. # Output Print a single integer — the diameter of the binary tree. # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` 3 ``` In the example, the diameter of the tree is 3, which corresponds to the path 4 -> 2 -> 1 -> 3 or 5 -> 2 -> 1 -> 3.","solution":"from collections import defaultdict, deque def tree_diameter(n, edges): if n == 1: return 0 # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS and return the farthest node and its distance from start node def bfs(start): visited = set() queue = deque([(start, 0)]) # (node, distance) farthest_node, max_distance = start, 0 while queue: node, distance = queue.popleft() visited.add(node) if distance > max_distance: farthest_node, max_distance = node, distance for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, distance + 1)) return farthest_node, max_distance # Start BFS from any node (let\'s choose node 1 if it exists) farthest_node_from_root, _ = bfs(1) # Start BFS from the farthest node found to get the diameter _, diameter = bfs(farthest_node_from_root) return diameter"},{"question":"We have a system that tracks employees in a company\'s department. Initially, the system contains the names of m employees working in the department. The system should support the following operations: 1. **Add an employee**: This operation is signified by a \\"+\\" character followed by the employee\'s name. If the employee is already in the department, no action is taken. 2. **Remove an employee**: This operation is signified by a \\"-\\" character followed by the employee\'s name. If the employee is not in the department, no action is taken. 3. **Check an employee\'s existence**: This operation is signified by a \\"?\\" character followed by the employee\'s name. The system should output \\"YES\\" if the employee is in the department and \\"NO\\" otherwise. # Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of queries. - The second line contains m (1 ≤ m ≤ 100,000) — the number of initial employees. - The next m lines contain the names of initial employees. Each name is a non-empty string consisting of lowercase Latin letters and its length does not exceed 100. - The next n lines contain the queries as described above. Each query contains a character and a string, separated by one space. # Output For each \\"?\\" query, output \\"YES\\" or \\"NO\\" on a separate line. # Example Input ``` 5 3 alice bob charlie ? alice + dave ? eve - alice ? alice ``` Output ``` YES NO NO ```","solution":"class Department: def __init__(self, initial_employees): Initializes the department with a list of initial employees. self.employees = set(initial_employees) def add_employee(self, name): Adds an employee to the department if not already present. self.employees.add(name) def remove_employee(self, name): Removes an employee from the department if present. self.employees.discard(name) def check_employee(self, name): Checks if an employee is in the department. Returns \\"YES\\" if the employee is found, \\"NO\\" otherwise. return \\"YES\\" if name in self.employees else \\"NO\\" def process_queries(n, m, initial_employees, queries): Processes a list of queries against the department. dept = Department(initial_employees) results = [] for query in queries: action, name = query.split() if action == \\"+\\": dept.add_employee(name) elif action == \\"-\\": dept.remove_employee(name) elif action == \\"?\\": results.append(dept.check_employee(name)) return results"},{"question":"Given an array of integers, your task is to find the \\"pivot\\" index of the array. The pivot index is defined as the index where the sum of all the numbers to the left of the index is equal to the sum of all the numbers to the right of the index. If no such index exists, return -1. If multiple pivot indexes exist, you should return the left-most pivot index. # Input - An integer n (1 <= n <= 10^5), representing the size of the array. - An array of n integers where each integer x (|x| <= 10^4). # Output - A single integer that is the pivot index or -1 if no pivot index exists. # Example ``` Input: 6 1 7 3 6 5 6 Output: 3 ``` ``` Input: 4 1 2 3 4 Output: -1 ``` # Explanation - In the first example, the pivot index is 3 because the sum of the numbers to the left is 1 + 7 + 3 = 11, and the sum of the numbers to the right is 5 + 6 = 11. - In the second example, there is no index where the sum of the numbers on both sides are equal, so the output is -1. # Constraints - The solution should have a time complexity of O(n). - Consider edge cases such as when the array has only one element, when all the elements are the same, or when no pivot exists.","solution":"def find_pivot_index(arr): Returns the pivot index of the array where the sum of the numbers to the left is equal to the sum of the numbers to the right. If no such index exists, returns -1. total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): if left_sum == (total_sum - left_sum - num): return i left_sum += num return -1"},{"question":"You are given an array of n integers, and your task is to determine if there are three distinct indices i, j, k such that the sum of the elements at these indices is zero, i.e., arr[i] + arr[j] + arr[k] = 0. This problem is known as the 3-Sum problem in computer science. The first line of the input contains a single integer n (1 ≤ n ≤ 3000), the number of integers in the array. The second line contains n integers, representing the elements of the array. The elements of the array will be between -10^9 and 10^9. Print \\"YES\\" if there exist such indices i, j, k in the array, otherwise print \\"NO\\". Example: Input: 6 -1 0 1 2 -1 -4 Output: YES In this example, the triplet (-1, 0, 1) sums to zero. If no such triplet exists in the array, the output should be \\"NO\\".","solution":"def three_sum(n, arr): Determines if there are three distinct indices i, j, k such that arr[i] + arr[j] + arr[k] = 0. Parameters: - n: int, the number of integers in the array. - arr: list of int, the elements of the array. Returns: - str, \\"YES\\" if such indices exist, otherwise \\"NO\\". arr.sort() for i in range(n): target = -arr[i] left, right = i + 1, n - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Alex is fond of palindromes. He wants to know the minimum number of character insertions required to make a given string a palindrome. A palindrome is a string that reads the same backward as forward. To transform a string into a palindrome, you can insert characters at any position in the string. Write a function that takes a single string `s` (1 ≤ length of s ≤ 50, consisting of lowercase Latin letters) as input and returns the minimum number of insertions needed to make it a palindrome. For example: - Input: `race` - Output: `3` (Explanation: Insert \'e\' at the beginning, \'c\' in the middle, and \'r\' at the end to form \'ecarrace\') You can assume that the input string `s` will always contain at least one character. *Example input/output format:* Input: ``` ab ``` Output: ``` 1 ``` Input: ``` aa ``` Output: ``` 0 ```","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of character insertions needed to make a string a palindrome. n = len(s) dp = [[0]*n for _ in range(n)] # Fill the table for gap in range(1, n): l = 0 for h in range(gap, n): if s[l] == s[h]: dp[l][h] = dp[l+1][h-1] else: dp[l][h] = min(dp[l][h-1], dp[l+1][h]) + 1 l += 1 return dp[0][n-1]"},{"question":"A city is represented as a grid with n rows and m columns. Each cell of the grid can either be empty or contain an obstacle. You need to count the number of unique paths from the top-left corner of the grid (cell 1,1) to the bottom-right corner of the grid (cell n,m). The only movements allowed are to the right or downward. You cannot pass through obstacles. Given a grid of size n x m and the positions of the obstacles, calculate the number of unique paths from the top-left to the bottom-right corner. The first line contains two integers, n and m (1 leq n, m leq 1000) — the dimensions of the grid. The next n lines contain m characters each, where ’.’ denotes an empty cell and ’#’ denotes an obstacle. Output a single integer, the number of unique paths from the top-left to the bottom-right corner. If there is no path, output 0. # Example Input ``` 3 3 ... .#. ... ``` Output ``` 2 ``` In this example, there are two unique paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def read_input_and_solve(input_str): lines = input_str.strip().split(\\"n\\") n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return unique_paths_with_obstacles(grid)"},{"question":"Sarah is managing a network of nodes connected by directed edges. Each edge has a certain weight which represents the cost of traversing from one node to another. She needs to determine the shortest path from a designated starting node to all other nodes in the network. Can you help her? Your task is to implement Dijkstra\'s algorithm to find the shortest paths from a given starting node to all other nodes in the graph. The first line of input contains two integers, n and m (1 leq n leq 1000, 0 leq m leq 5000), representing the number of nodes and edges respectively. Each of the next m lines contains three integers, u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6), representing an edge from node u to node v with weight w. The last line contains a single integer, s (1 leq s leq n), representing the starting node. Output n space-separated integers, where the i-th integer is the shortest distance from the starting node s to node i (1-based index). If a node is not reachable from the starting node, output -1 for that node. Example: Input: ``` 5 6 1 2 3 1 3 1 2 3 1 2 4 6 3 4 5 3 5 4 1 ``` Output: ``` 0 3 1 6 5 ``` Note: - The nodes are numbered from 1 to n. - If node i is not reachable from the starting node s, the distance should be -1. - There may be multiple edges between two nodes. - The weights of the edges are positive integers.","solution":"import heapq def dijkstra(n, edges, s): graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((w, v)) dist = [float(\'inf\')] * (n+1) dist[s] = 0 pq = [(0, s)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for weight, v in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return [d if d != float(\'inf\') else -1 for d in dist[1:]]"},{"question":"You are managing a computer server and need to handle incoming requests for data processing in an efficient manner. Each incoming request can be processed immediately if the server is idle or needs to be queued if the server is currently busy with another request. The server can process only one request at a time, and each request takes exactly one unit of time to complete. Let\'s assume that n requests arrive at the server in one time unit. At the start of each time unit, either the server is free to take the next request from the queue, or it continues processing the current request. The next request starts processing from the queue if the server is free at the beginning of the time unit. Given the number of incoming requests n for each time unit over t time units and the processing capacity of the server, determine the maximum number of requests that can be processed in the given time frame. The first line of the input contains two integers n and t (1 ≤ n ≤ 1000, 1 ≤ t ≤ 1000). The output should be a single integer representing the maximum number of requests that can be processed in t time units. Example: Input: 3 5 Output: 5","solution":"def max_requests_processed(n, t): Given the number of incoming requests per time unit n and the total time units t, this function returns the maximum number of requests that can be processed. # Since the server can only process one request per time unit, # the maximum number of requests that can be processed is limited # either by the number of time units t or the total number of requests n*t. return min(t, n * t)"},{"question":"Implement a function named `find_max_consecutive_sum` that takes two arguments: a list of integers `arr` and an integer `k`. The function should return the maximum possible sum of any contiguous subarray of length `k` in the array. If the array length is less than `k`, return 0. # Input - The input consists of a list `arr` of integers and an integer `k`. # Output - The output should be a single integer representing the maximum sum of any contiguous subarray of length `k`. # Example ```python find_max_consecutive_sum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) ``` Output: ``` 39 ``` ```python find_max_consecutive_sum([1, -1, 5, -2, 3], 2) ``` Output: ``` 4 ``` ```python find_max_consecutive_sum([5, 5, 5, 5, 5], 5) ``` Output: ``` 25 ``` ```python find_max_consecutive_sum([2, 3], 5) ``` Output: ``` 0 ``` # Constraints - `1 <= len(arr) <= 2000` - `1 <= k <= 2000` - `-10^4 <= arr[i] <= 10^4`","solution":"def find_max_consecutive_sum(arr, k): Returns the maximum possible sum of any contiguous subarray of length k in the array. If the array length is less than k, returns 0. n = len(arr) if n < k: return 0 max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"An engineering company wants to create an automated tool to calculate the minimum number of cable segments required to connect multiple machines in a factory. Each machine is positioned at a specific (x, y) coordinate on a grid. The cost to lay a cable segment between two machines is the Manhattan distance between their coordinates, which is defined as |x1 - x2| + |y1 - y2|. Your task is to write a program that determines the minimum cost to connect all machines in the factory such that every machine is connected directly or indirectly to every other machine. Assume there are no obstacles in the factory, i.e., you can lay the cable segments freely between any two machines. The first line contains an integer n (1 ≤ n ≤ 100), representing the number of machines. Each of the next n lines contains two space-separated integers xi and yi (0 ≤ xi, yi ≤ 1000), which are the coordinates of the machines. Output a single integer — the minimum total cost to connect all machines in the factory. For example, for the following input: ``` 4 0 0 0 2 2 2 2 0 ``` The answer would be: ``` 6 ``` Explanation: Connect machines in the following manner: (0,0) to (0,2) (cost 2), (0,2) to (2,2) (cost 2), and (2,2) to (2,0) (cost 2). Total cost is 6. Luminal paths (e.g., (0,0) to (2,2)) are not considered for minimum cost in this example.","solution":"def min_cost_to_connect_machines(n, coordinates): import heapq def manhattan_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) if n == 1: return 0 pq = [] for i in range(1, n): heapq.heappush(pq, (manhattan_distance(coordinates[0], coordinates[i]), 0, i)) min_cost = 0 connected = set([0]) while len(connected) < n: while pq: cost, u, v = heapq.heappop(pq) if v not in connected: min_cost += cost connected.add(v) for w in range(n): if w not in connected: heapq.heappush(pq, (manhattan_distance(coordinates[v], coordinates[w]), v, w)) break return min_cost # Example of usage: n = 4 coordinates = [(0, 0), (0, 2), (2, 2), (2, 0)] print(min_cost_to_connect_machines(n, coordinates)) # Output should be 6"},{"question":"Polycarp\'s company is working on a new project, and he is tasked with managing the team assignments for it. There are n employees, each with a specific skill level. Polycarp wants to form exactly two teams such that the difference in the total skill levels of the two teams is minimized. Each employee must be in exactly one of the two teams. For example, if n=4, and the skill levels are [1, 2, 3, 4], one possible division is: - Team 1: [1, 4] - Team 2: [2, 3] In this case, both teams have a total skill level of 5, making the difference zero. You are given multiple test cases. For each test case, determine the minimum possible difference in total skill levels between the two teams. The first line contains a single integer t (1 le t le 10). Then t test cases follow. The first line of each test case contains an integer n (2 le n le 20) — the number of employees. The second line of each test case contains n integers s_1, s_2, ldots, s_n (1 le s_i le 50) — the skill levels of the employees. For each test case, output the minimum possible difference in total skill levels between the two teams.","solution":"from itertools import combinations def minimize_skill_diff(t, test_cases): results = [] for case in test_cases: n = case[0] skills = case[1] total_sum = sum(skills) min_diff = float(\'inf\') for i in range(1, n//2 + 1): for c in combinations(skills, i): team1_sum = sum(c) team2_sum = total_sum - team1_sum min_diff = min(min_diff, abs(team1_sum - team2_sum)) results.append(min_diff) return results # Example usage: # t = 2 # test_cases = [ # (4, [1, 2, 3, 4]), # (3, [1, 5, 11]) # ] # print(minimize_skill_diff(t, test_cases)) # Output: [0, 5]"},{"question":"You are given a set of `n` integers. Your task is to process several queries where for each query, you need to find the number of elements within a given range `[L, R]` that are divisible by a given integer `k`. The first line contains two integers `n` (1 ≤ `n` ≤ 10^5) and `q` (1 ≤ `q` ≤ 10^5) — the number of elements in the array and the number of queries. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ `ai` ≤ 10^9) — the elements of the array. Each of the next `q` lines contains three integers `L`, `R`, and `k` (1 ≤ `L` ≤ `R` ≤ `n`, 1 ≤ `k` ≤ 10^9) — the parameters of the query. For each query, print a single integer — the number of elements in the range `[L, R]` that are divisible by `k`. Example: Input: ``` 5 3 1 2 3 4 5 1 3 2 2 5 2 1 5 1 ``` Output: ``` 1 2 5 ``` Explanation: - For the first query, the range is from 1 to 3 and `k` is 2. Only the number 2 is divisible by 2, so the answer is 1. - For the second query, the range is from 2 to 5 and `k` is 2. The numbers 2 and 4 are divisible by 2, so the answer is 2. - For the third query, the range is from 1 to 5 and `k` is 1. All the numbers are divisible by 1, so the answer is 5.","solution":"def count_divisibles(n, arr, queries): Count the number of elements divisible by k in a given range [L, R]. :param int n: Number of elements in the array. :param list arr: List of integers representing the array. :param list queries: List of queries where each query is a tuple (L, R, k). :return: List of number of elements in the specified range that are divisible by k. :rtype: list result = [] for L, R, k in queries: count = 0 for i in range(L-1, R): if arr[i] % k == 0: count += 1 result.append(count) return result"},{"question":"Louise has a rectangular garden which she wants to divide into two smaller rectangular sections using a straight fence. The garden is represented as an n x m grid of cells, and she plans to place the fence either horizontally or vertically along the boundary of the cells. The width of the fence is negligible and it does not occupy any cell. The sections created by placing the fence should be identical in area, which means the total number of cells in each section should be the same. Determine if it is possible to place the fence in such a way. The garden\'s dimensions are given as two integers n and m (1 ≤ n, m ≤ 1000). To solve the problem, print \\"YES\\" (without quotes) if it is possible to divide the garden into two equal-area sections by placing the fence, otherwise print \\"NO\\" (without quotes). # Examples Input: ``` 4 6 ``` Output: ``` YES ``` Input: ``` 5 5 ``` Output: ``` NO ```","solution":"def can_divide_garden_evenly(n, m): Determines if a rectangular garden of size n x m can be divided into two equal-area sections with a straight fence (horizontal or vertical). Parameters: n (int): The number of rows in the garden. m (int): The number of columns in the garden. Returns: str: \\"YES\\" if it\'s possible to divide the garden into equal-area sections, otherwise \\"NO\\". if (n * m) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are developing an application for a bookstore that needs to efficiently manage a large collection of books by categorizing them into different genres. Each book can belong to multiple genres, and each genre has a unique identifier. To organize this system, you are given a list of books, where each book is represented by a set of genre identifiers. Your task is to implement an algorithm to minimize the number of unique genres that are sufficient to uniquely identify all books. This is achieved by finding the minimal set of genres that includes at least one genre from the set of genres associated with each book. # Input - The first line contains an integer n (1 leq n leq 1000) — the number of books. - The next line contains an integer m (1 leq m leq 1000) — the number of unique genres. - The following n lines describe the books. Each line starts with an integer k_i (1 leq k_i leq m) indicating the number of genres the i-th book belongs to, followed by k_i space-separated integers — the identifiers of these genres. # Output Print the minimum number of unique genres required to ensure that each book has at least one genre identifier that is in the set of genres used. # Sample Input ``` 3 4 2 1 2 3 2 3 4 2 3 4 ``` # Sample Output ``` 2 ``` # Explanation In the sample input, we have three books and four unique genres: - Book 1 belongs to genres {1, 2} - Book 2 belongs to genres {2, 3, 4} - Book 3 belongs to genres {3, 4} One minimal set of genres that can uniquely identify all books is {2, 3}, which ensures that each book has at least one genre identifier from this set. Hence, the minimum number of unique genres required is 2.","solution":"def min_genres_to_identify_books(n, m, books): from itertools import combinations # Creating a list of all genres unique_genres = set() for book in books: unique_genres.update(book) unique_genres = list(unique_genres) # Function to check if a given set of genres covers all books def all_books_covered(genres_subset): for book in books: if not any(genre in genres_subset for genre in book): return False return True # Start checking combinations of genres from size 1 up to the number of unique genres for size in range(1, len(unique_genres) + 1): for combo in combinations(unique_genres, size): if all_books_covered(combo): return size return len(unique_genres) # Function that parses the input and outputs the result def minimum_genres_to_identify_books(n, m, books_list): books = [] for line in books_list: genres = list(map(int, line.split()[1:])) books.append(genres) return min_genres_to_identify_books(n, m, books)"},{"question":"In a data analytics company, Alex is working on a project that involves processing large datasets with varying numbers of records. To optimize their processing pipeline, he needs to write an algorithm that efficiently removes duplicate records from these datasets. Each record is represented as a string, and two records are considered duplicates if they have the same string representation. To help Alex in his task, write a program that reads a sequence of strings, removes the duplicates, and outputs the unique records in the order of their first occurrence. Your program should be able to handle up to 100,000 records efficiently. Input consists of: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of records. - Each of the next n lines contains a string, representing a record. Each string consists of alphanumeric characters and has a length of up to 100 characters. Output: - Output the unique records in the order of their first occurrence, each on a new line. Example: Input: 5 apple orange banana apple banana Output: apple orange banana","solution":"def remove_duplicates(records): Removes duplicate records and returns the unique records in the order of their first occurrence. :param records: List of strings, each representing a record. :returns: List of unique records. seen = set() unique_records = [] for record in records: if record not in seen: unique_records.append(record) seen.add(record) return unique_records"},{"question":"A company is organizing a programming contest. Each participant stands in a queue to register. Each participant can either be a student, a professional, or a VIP. The registration priority is as follows: 1. VIPs are registered first. 2. Professionals are registered next. 3. Students are registered last. If there is a tie within any group, the person who stands earlier in the queue (i.e., leftmost) should be registered first. For each participant, the input provides their name and their status (VIP, Professional, or Student). Each participant has a unique name. The first line contains an integer n, which is the number of participants (1 ≤ n ≤ 100). The next n lines contain two space-separated strings each - the name of the participant and their status. Names consist of Latin letters, the first letter is uppercase, and the rest are lowercase. The length of any name is from 1 to 15 characters. The status is either \\"VIP\\", \\"Professional\\", or \\"Student\\". Print n lines. Each line should contain the name of the participant in the order they should be registered. Example input: ``` 5 Alice VIP Bob Student Charlie Professional David VIP Eve Student ``` Example output: ``` Alice David Charlie Bob Eve ```","solution":"def sort_participants(n, participants): Sorts the participants based on the registration priority and returns their names in the order they should be registered. Parameters: n (int): Number of participants. participants (list of tuple): List of tuples where each tuple contains the name and status of a participant. Returns: list of str: List of participant names in the order they should be registered. # Priority mapping priority = {\\"VIP\\": 1, \\"Professional\\": 2, \\"Student\\": 3} # Sort participants based on the defined priority sorted_participants = sorted(participants, key=lambda p: (priority[p[1]], p[0])) # Extract and return the names in the sorted order return [p[0] for p in sorted_participants]"},{"question":"In a small town, there is a rectangular grid of streets representing houses. The town\'s mayor wants to build a new water pipeline that connects the top-left corner to the bottom-right corner. Each house has an integer height. A pipeline can be laid from one house to another if the height difference between the two houses is at most 1. Your task is to write a program that finds the minimum number of houses to pass through to lay down the pipeline from the top-left corner to the bottom-right corner. A house in the same row or column is considered adjacent. # Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) — the dimensions of the grid. - The following `m` lines each contain `n` integers `h_ij` (1 ≤ h_ij ≤ 1000) representing the heights of houses. # Output - On the first line, print the minimum number of houses required to pass through to lay down the pipeline. - If it is impossible to lay down the pipeline, print `-1`. # Example Input ``` 3 3 1 3 2 2 4 2 2 2 1 ``` Output ``` 5 ``` Explanation The optimal path might look like this (with heights shown for each house): ``` [1] 3 [2] [2] 4 2 [2] [2] 1 ``` The path takes you from (1,1) -> (1,3) -> (2,1) -> (3,2) -> (3,3), passing through 5 houses in total.","solution":"from collections import deque def min_houses_to_pass(grid): Returns the minimum number of houses required to pass through to lay down the pipeline. m, n = len(grid), len(grid[0]) if m == 1 and n == 1: return 1 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] visited = [[False]*n for _ in range(m)] queue = deque([(0, 0, 1)]) # (x, y, step_count) visited[0][0] = True while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and abs(grid[nx][ny] - grid[x][y]) <= 1: if nx == m - 1 and ny == n - 1: return steps + 1 queue.append((nx, ny, steps + 1)) visited[nx][ny] = True return -1 def solve_water_pipeline(m, n, heights): return min_houses_to_pass(heights) # Example to call the function # m, n = 3, 3 # heights = [ # [1, 3, 2], # [2, 4, 2], # [2, 2, 1] # ] # print(solve_water_pipeline(m, n, heights))"},{"question":"Alice is a librarian who manages a library with a single stack of books labeled from 1 to n. Since the stack can be quite tall, it is common for books to get misplaced. Alice has a unique method for ensuring the stack remains sorted in ascending order. Alice performs q operations using the following strategy: 1. Pick any contiguous subarray of books and reverse the order of books in that subarray. An operation is defined by two indices l and r (1 ≤ l ≤ r ≤ n), and in each operation, she reverses the sequence of books between index l and r. She wants to sort the stack of books in its entirety using the minimum number of such operations. You are given an initial arrangement of books and must determine if it is possible to sort the books in the stack using at most one such operation. If possible, output the indices l and r such that sorting can be achieved by reversing the subarray from l to r. If the stack is already sorted or cannot be sorted by one reverse operation, output \\"already sorted\\" or \\"not possible\\" respectively. The first line of the input will contain a single integer n (1 ≤ n ≤ 2000) representing the number of books. The second line will contain n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9, all a_i are distinct) representing the initial order of books in the stack. Output a single line containing either \\"already sorted\\", \\"not possible\\", or two integers l and r representing the start and end index of the subarray which, when reversed, sorts the entire stack. Example: Input: 5 3 2 1 4 5 Output: 1 3 In this example, it is possible to sort the stack by reversing the books from index 1 to 3.","solution":"def find_reverse_subarray_to_sort(n, books): Determine if a stack of books can be sorted by reversing a single contiguous subarray. Parameters: n (int): Number of books. books (list of int): Initial arrangement of books. Returns: tuple: Two integers l and r if the stack can be sorted by reversing the subarray from l to r, \\"already sorted\\" if the stack is already sorted, \\"not possible\\" if it cannot be sorted by one reverse operation. # Check if the list is already sorted if books == sorted(books): return \\"already sorted\\" # Find the first and last index where the order is incorrect l, r = 0, n-1 while l < n-1 and books[l] <= books[l+1]: l += 1 while r > 0 and books[r] >= books[r-1]: r -= 1 # Reverse the identified subarray books[l:r+1] = books[l:r+1][::-1] # Check if reversing the subarray resulted in a sorted list if books == sorted(books): return (l + 1, r + 1) # Convert to 1-based index else: return \\"not possible\\""},{"question":"Janet\'s company recently implemented a new scheduling system and she needs your help to validate time slots for appointments. Given an initial set of n time slots [startTime, endTime] and q queries, each query is comprised of a single time slot. For each query, determine if the queried time slot overlaps with any of the initial time slots. The first line of input includes two integers n and q (1 ≤ n, q ≤ 100,000), representing the number of initial time slots and the number of queries. The next n lines present the initial time slots with each line containing two non-negative integers startTime and endTime (0 ≤ startTime < endTime ≤ 10^9). The following q lines consist of query time slots, each formatted similarly with two non-negative integers startQuery and endQuery (0 ≤ startQuery < endQuery ≤ 10^9). For each query, print \\"YES\\" if the query time slot overlaps with any of the initial time slots, otherwise print \\"NO\\". Note: Two time slots [start1, end1] and [start2, end2] overlap if start1 < end2 and start2 < end1. Sample Input: ``` 3 2 1 5 8 10 12 16 3 7 5 9 ``` Sample Output: ``` YES NO ``` Explanation: - The first query [3, 7] overlaps with the initial slot [1, 5]. - The second query [5, 9] does not overlap with any of the initial time slots.","solution":"def check_overlaps(initial_slots, query_slots): def is_overlap(slot1, slot2): return slot1[0] < slot2[1] and slot2[0] < slot1[1] results = [] for q_start, q_end in query_slots: query_overlaps = any(is_overlap((q_start, q_end), (i_start, i_end)) for i_start, i_end in initial_slots) results.append(\\"YES\\" if query_overlaps else \\"NO\\") return results # Example Usage: initial_slots = [ (1, 5), (8, 10), (12, 16) ] query_slots = [ (3, 7), (5, 9) ] print(check_overlaps(initial_slots, query_slots)) # Outputs: [\'YES\', \'NO\']"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid has a value that represents its height. The height of the cell at row i and column j is given by the integer H_{ij}. Your task is to determine if there exists a path from the top-left corner of the grid (cell (1,1)) to the bottom-right corner (cell (N,M)) such that the difference in heights between any two consecutive cells along the path is at most 1. A path is defined as a sequence of adjacent cells, where two cells are considered adjacent if they share a side (up, down, left, or right). # Input - The first line contains two integers, N and M (1 leq N, M leq 1000), the number of rows and the number of columns in the grid. - The next N lines each contain M integers, where the j-th integer in the i-th line is H_{ij} (0 leq H_{ij} leq 10^6), the height of the cell at row i and column j. # Output - Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner with the given height difference constraint, otherwise print \\"NO\\". # Example Input ``` 3 4 1 2 3 4 2 3 4 5 1 2 3 2 ``` Output ``` YES ``` Input ``` 2 2 1 10 10 1 ``` Output ``` NO ``` # Explanation In the first example, one possible path is: ``` (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (3,4) ``` In this path, the difference in heights between any two consecutive cells is at most 1. In the second example, any path from the top-left to the bottom-right corner will involve a height difference greater than 1, making it impossible to satisfy the condition.","solution":"from collections import deque def is_path_possible(N, M, grid): Returns \\"YES\\" if there exists a path from (0,0) to (N-1,M-1) with consecutive height difference at most 1, otherwise returns \\"NO\\". # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y, prev_value): Check if the move is valid if 0 <= x < N and 0 <= y < M and abs(grid[x][y] - prev_value) <= 1: return True return False # BFS initialization queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, grid[x][y]) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" # Example usage: # N, M = 3, 4 # grid = [ # [1, 2, 3, 4], # [2, 3, 4, 5], # [1, 2, 3, 2] # ] # print(is_path_possible(N, M, grid)) # Output: \\"YES\\" # Input/Output operations are omitted as per the request."},{"question":"Given a string of lowercase English letters, Zina wants to create the lexicographically smallest string possible by performing a series of operations. In each operation, she can pick any two characters from the string and swap them. Determine the lexicographically smallest string that Zina can form from the given string. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the original string. The second line contains a string s of length n consisting of lowercase English letters. Print the lexicographically smallest string that can be formed by performing the minimum number of swaps required, if Zina performs the operations optimally. # Example **Input:** ``` 5 acbde ``` **Output:** ``` abcde ``` Note: In the example, Zina can swap \'a\' with \'c\' to achieve the lexicographically smallest string.","solution":"def lexicographically_smallest_string(s): Function to return the lexicographically smallest string possible by performing a series of swap operations. return \'\'.join(sorted(s))"},{"question":"Write a Python function that takes a singly linked list and an integer k, and reverse every k nodes in the list. If the number of nodes is not a multiple of k, the remaining nodes should be left as is. The singly linked list is defined by the following class: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` The function signature should be as follows: ```python def reverseKGroup(head: ListNode, k: int) -> ListNode: # your implementation here ``` Example: Input: ``` head = [1 -> 2 -> 3 -> 4 -> 5], k = 2 ``` Output: ``` [2 -> 1 -> 4 -> 3 -> 5] ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head: ListNode, k: int) -> ListNode: def reverse_linked_list(start, end): prev, curr = None, start while curr != end: next_temp = curr.next curr.next = prev prev = curr curr = next_temp return prev, start # Dummy node initialization to handle head reversal dummy = ListNode(0) dummy.next = head prev_group_end = dummy while True: # Check if there are at least k nodes left to reverse kth_node = prev_group_end for _ in range(k): kth_node = kth_node.next if not kth_node: return dummy.next group_start = prev_group_end.next next_group_start = kth_node.next # Reverse the k nodes rev_head, rev_tail = reverse_linked_list(group_start, next_group_start) # Connect the reversed part with the previous part prev_group_end.next = rev_head rev_tail.next = next_group_start # Move the prev_group_end to the end of the reversed group prev_group_end = rev_tail return dummy.next"},{"question":"Given a binary tree where each node contains an integer value, we define the beauty of a node as the number of nodes in the subtree rooted at that node that have the same value as the root of the subtree. The beauty of the entire tree is the maximum beauty among all nodes. You are given a binary tree in the form of an array where each element is either an integer (the value of the node) or -1 (representing a null node). Your task is to output the beauty of the entire tree. Note that the array representation of the binary tree follows a level-order traversal. If a position in the array represents a null node, its children are not included in the array. Input: - The first line contains a single integer, `t` (1 ≤ t ≤ 10^5), the number of test cases. - The first line of each test case contains a single integer, `n` (1 ≤ n ≤ 3 * 10^5), the number of elements in the array representing the binary tree. - The following line contains `n` integers, `nodes[1], nodes[2], ..., nodes[n]` representing the values of the nodes in level-order traversal, where each `nodes[i]` is either an integer (the value of the node) or -1 (representing a null node). Output: For each test case, output a single integer, the beauty of the tree. Example: Input: ``` 2 7 1 2 2 -1 -1 2 1 5 2 2 -1 2 2 ``` Output: ``` 3 4 ``` Explanation: For the first test case: - The tree is: ``` 1 / 2 2 / 2 1 ``` - The beauty of nodes are: - Node 1 (root): 1 (nodes: [1]) - Node 2: 3 (nodes: [2, 2, 2]) - Node 2: 1 (nodes: [2]) - Node 1: 1 (nodes: [1]) - The maximum beauty is 3. For the second test case: - The tree is: ``` 2 / 2 -1 / 2 2 ``` - The beauty of nodes are: - Node 2 (root): 4 (nodes: [2, 2, 2, 2]) - Node 2: 3 (nodes: [2, 2, 2]) - Node 2: 1 (nodes: [2]) - Node 2: 1 (nodes: [2]) - The maximum beauty is 4.","solution":"from collections import deque, defaultdict def calculate_tree_beauty(tree): n = len(tree) if n == 0: return 0 # Build the tree using a list of nodes nodes = [None] * n for i in range(n): if tree[i] != -1: nodes[i] = tree[i] # Dictionary to store the frequency of nodes freq = defaultdict(int) # BFS traversal to count frequency queue = deque([0]) while queue: node = queue.popleft() if nodes[node] is None: continue # Increment the frequency of the current node value freq[nodes[node]] += 1 # Add children to the queue left_child = 2 * node + 1 right_child = 2 * node + 2 if left_child < n: queue.append(left_child) if right_child < n: queue.append(right_child) # The beauty of the tree is the maximum frequency max_beauty = max(freq.values(), default=0) return max_beauty def tree_beauties(t, test_cases): result = [] for i in range(t): n = test_cases[i][0] tree = test_cases[i][1] result.append(calculate_tree_beauty(tree)) return result"},{"question":"Given a list of integers and an integer target sum, find all unique combinations of integers in the list where the numbers sum to the target. Each number in the list may only be used once in the combination. The solution set must not contain duplicate combinations. The integers in each combination must be in non-descending order. You can return the combinations in any order. Write a function `find_combinations(arr: List[int], target: int) -> List[List[int]]` Input - `arr` (List[int]): a list of integers (1 leq |arr| leq 200). Each integer is between 1 and 50 inclusive. - `target` (int): a target sum (1 leq target leq 200). Output - The function should return a list of lists, where each inner list represents a unique combination of numbers from arr that add up to the target. # Example Input: ```python arr = [10, 1, 2, 7, 6, 1, 5] target = 8 ``` Output: ```python [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] ``` Input: ```python arr = [2, 5, 2, 1, 2] target = 5 ``` Output: ```python [ [1, 2, 2], [5] ] ``` # Constraints - The order of elements in the combinations in the output does not matter. - The unique combinations must be in non-descending order. - The input list can contain duplicate numbers. - The solution should not contain duplicate combinations.","solution":"from typing import List def find_combinations(arr: List[int], target: int) -> List[List[int]]: def backtrack(start, end, tmp_sum, path): if tmp_sum == target: res.append(path[:]) return if tmp_sum > target: return for i in range(start, end): if i > start and arr[i] == arr[i - 1]: continue path.append(arr[i]) backtrack(i + 1, end, tmp_sum + arr[i], path) path.pop() arr.sort() res = [] backtrack(0, len(arr), 0, []) return res"},{"question":"You are given two strings, s and p. Determine if you can change the string s into a string that contains p as a subsequence by deleting exactly one character from s. The subsequence must maintain the relative order of characters but does not need to be contiguous. The first line contains one integer t (1 le t le 100) — the number of test cases. Then, 2 times t lines follow, each two lines representing a test case. The first line of each pair contains the string s (2 le |s| le 100), and the second line contains the string p (1 le |p| le |s| - 1). Print t binary integers, where the i-th integer is: - 1 if it is possible to change s such that it contains p as a subsequence by deleting exactly one character from s, - 0 otherwise. For example, given the string s as \\"abcdef\\" and string p as \\"bdf\\", it is possible to obtain \\"bdf\\" by deleting \\"a\\", \\"c\\", and \\"e\\" from s. If the string s is \\"programming\\" and p is \\"perming\\", it is not possible to form p as a subsequence by deleting exactly one character.","solution":"def can_form_subsequence_by_deleting_one(s, p): Determines if the string `s` can contain `p` as a subsequence by deleting exactly one character from `s`. # Function to check if `p` is a subsequence of `s` def is_subsequence(s, p): it = iter(s) return all(char in it for char in p) for i in range(len(s)): # Create a new string by deleting the i-th character new_s = s[:i] + s[i+1:] if is_subsequence(new_s, p): return 1 return 0 def process_test_cases(test_cases): results = [] for s, p in test_cases: results.append(can_form_subsequence_by_deleting_one(s, p)) return results"},{"question":"A string S comprised of lowercase Latin letters of length n is given to you. You are allowed to perform an operation any number of times: choose any alphabetical character (a-z) and remove exactly one occurrence of that character from anywhere in the string. Your goal is to determine the lexicographically smallest string possible after performing any number of the allowed operations. Input: - The input contains one string S of length n (1 ≤ n ≤ 100,000) composed of only lowercase Latin letters. Output: - Output the lexicographically smallest string achievable. Example: Input: ``` abcabc ``` Output: ``` a ``` Explanation: By removing all instances of \'b\' and \'c\', we can achieve the smallest lexicographically string which is \\"a\\". Input: ``` cfdjaalex ``` Output: ``` aajlex ``` Explanation: By removing the \'c\', \'f\' and \'d\' characters, we achieve the smallest lexicographical string \\"aajlex\\".","solution":"def smallest_lexicographical_string(s): Returns the lexicographically smallest string by removing any number of characters. if not s: return \\"\\" min_char = min(s) result = \\"\\".join(c for c in s if c == min_char) return result"},{"question":"In this problem, you are required to simulate a simple banking system. Your program must support the following operations: 1. Create a new account with an initial balance. 2. Deposit money into an existing account. 3. Withdraw money from an existing account. 4. Transfer money between two existing accounts. 5. Check the balance of an existing account. **Details:** - Each account is uniquely identified by an account number, which is a non-negative integer. - You should assume that account numbers will always be between 0 and 10^6 (inclusive). - The initial balance, deposit amount, withdrawal amount, and transfer amount are non-negative integers. - It is guaranteed that all operations will be valid. Specifically, you do not need to handle cases where operations are performed on non-existing accounts, or where withdrawal or transfer amounts exceed the available balance in the source account. **Input:** The input starts with an integer `n` (1 ≤ n ≤ 1000), the number of operations. The next `n` lines each describe an operation in one of the following formats: - `create account_number initial_balance`: Create a new account with the specified account number and initial balance. - `deposit account_number amount`: Deposit the specified amount into the account. - `withdraw account_number amount`: Withdraw the specified amount from the account. - `transfer source_account target_account amount`: Transfer the specified amount from the source account to the target account. - `balance account_number`: Output the current balance of the specified account. **Output:** For each `balance` operation, output the current balance of the specified account on a new line. **Example:** ``` Input: 7 create 1 1000 create 2 500 deposit 1 200 withdraw 2 100 transfer 1 2 150 balance 1 balance 2 Output: 1050 550 ``` Note that the `create`, `deposit`, `withdraw`, and `transfer` operations will not produce any output. The output should only include the results of the `balance` operations.","solution":"class BankSystem: def __init__(self): self.accounts = {} def create_account(self, account_number, initial_balance): self.accounts[account_number] = initial_balance def deposit(self, account_number, amount): self.accounts[account_number] += amount def withdraw(self, account_number, amount): self.accounts[account_number] -= amount def transfer(self, source_account, target_account, amount): self.accounts[source_account] -= amount self.accounts[target_account] += amount def balance(self, account_number): return self.accounts[account_number] # Example Usage: # n = int(input()) # bank = BankSystem() # for _ in range(n): # operation = input().split() # if operation[0] == \\"create\\": # bank.create_account(int(operation[1]), int(operation[2])) # elif operation[0] == \\"deposit\\": # bank.deposit(int(operation[1]), int(operation[2])) # elif operation[0] == \\"withdraw\\": # bank.withdraw(int(operation[1]), int(operation[2])) # elif operation[0] == \\"transfer\\": # bank.transfer(int(operation[1]), int(operation[2]), int(operation[3])) # elif operation[0] == \\"balance\\": # print(bank.balance(int(operation[1])))"},{"question":"Mazie is a software developer who loves working with numbers, and she is fascinated by sequences that have special properties. Mazie recently came across an interesting sequence called the Palindromic Base Sequence. A sequence is called a Palindromic Base Sequence if for any prefix of the sequence, the sum of digits in its binary representation forms a palindrome. A binary palindrome is a binary number that reads the same backward as forward, such as 101 or 111. For example, the decimal number 5 has a binary representation of 101, which is a binary palindrome. Mazie wants to generate a sequence of the first n numbers such that the cumulative sum of their binary representations is a palindrome. Given an integer n (1 ≤ n ≤ 50), write a function that returns the first n numbers of the Palindromic Base Sequence. The function should adhere to the following format: def palindromic_base_sequence(n: int) -> List[int]: # Input - An integer n representing the number of elements in the sequence. # Output - A list of n integers forming the Palindromic Base Sequence. # Example ```python palindromic_base_sequence(3) ``` Output: ``` [1, 3, 5] ``` In the above example: - The binary representation of 1 is 1, which is a binary palindrome. - The binary representation of 3 is 11, which is a binary palindrome. - The binary representation of 5 is 101, which is a binary palindrome. # Constraints - Ensure that the function can handle the input within a reasonable time frame for n up to 50.","solution":"from typing import List def is_binary_palindrome(x: int) -> bool: binary_rep = bin(x)[2:] return binary_rep == binary_rep[::-1] def palindromic_base_sequence(n: int) -> List[int]: result = [] current_num = 1 while len(result) < n: if is_binary_palindrome(current_num): result.append(current_num) current_num += 1 return result"},{"question":"The city of Trome is built on a grid, with streets running in a perfect north-south and east-west pattern. Each intersection has a traffic light that is either red or green. The traffic lights change at regular intervals, but you do not know their precise timing. You are tasked with designing a route for a delivery drone that avoids any potential delays caused by red lights. Each movement takes exactly one minute and the drone can move between intersections in the four standard directions: north, south, east, or west. Given the maximum possible number of intersections the drone can visit, compute the shortest time the drone would possibly take to travel from the starting intersection (0,0) to the destination intersection (x,y), provided it either waits or finds an optimal path avoiding red lights. The input consists of several lines. The first line contains the destination coordinates x and y, with -50 ≤ x, y ≤ 50. The second line contains 4 integers representing the maximum number of intersections the drone can pass through as follows: `N_max` (north), `S_max` (south), `E_max` (east), and `W_max` (west). Output a single integer representing the shortest time in minutes the drone takes to travel from (0,0) to (x,y) without passing through more than the specified maximum number of intersections in any direction. If it is impossible to reach the destination under the provided constraints, output -1. Example: Input: 4 3 5 5 5 5 Output: 7 Explanation: The drone can move from (0,0) to (4,3) within the allowed number of movements in each direction: move east 4 times, and north 3 times, totaling 7 minutes.","solution":"def shortest_path_to_destination(x, y, N_max, S_max, E_max, W_max): Given the destination coordinates (x, y) and maximum allowed movements in each direction, compute the shortest time in minutes the drone takes to travel from (0,0) to (x,y). if x >= 0: if x > E_max: return -1 # Exceeds maximum east bound east_moves = x else: if -x > W_max: return -1 # Exceeds maximum west bound east_moves = x if y >= 0: if y > N_max: return -1 # Exceeds maximum north bound north_moves = y else: if -y > S_max: return -1 # Exceeds maximum south bound north_moves = y return abs(east_moves) + abs(north_moves)"},{"question":"You are given a tree with n nodes rooted at node number 1. Each node has a value associated with it. You need to process m queries. Each query is of one of the following two types: 1. **Update**: Update the value of a node. 2. **Max-Value**: Find the maximum value in the subtree of a given node. Wordy format of the problem: You are given two positive integers n (the number of nodes in the tree) and m (the number of queries) such that 2 le n le 1000 and 1 le m le 1000. The next line contains n positive integers a_1, a_2, ldots, a_n (1 le a_i le 10^5), where a_i is the value assigned to the node i. The next n-1 lines describe the edges of the tree. Each line contains two integers u and v (1 le u, v le n ) representing an edge between nodes u and v. The next m lines describe the queries. Each query is either of the form \\"1 x val\\" or \\"2 x\\". - The query \\"1 x val\\" means updating the value of node x to val. - The query \\"2 x\\" means finding the maximum value in the subtree of the node x. Output the result of all \\"2 x\\" queries. Example: ``` Input 5 5 1 2 3 4 5 1 2 1 3 1 4 3 5 1 3 10 2 1 2 3 1 1 8 2 1 Output 10 10 10 ``` Explanation: Initially, the tree is: ``` 1 (1) /| 2 3 4 | 5 ``` - After the update query \\"1 3 10\\", the tree is: ``` 1 (1) /| 2 10 4 | 5 ``` - The subtree of node 1 is the entire tree, and the maximum value is 10. - The subtree of node 3 includes nodes 3 and 5; the maximum value is 10. - After the update query \\"1 1 8\\", the tree is: ``` 1 (8) /| 2 10 4 | 5 ``` - Finally, the subtree of node 1 is the entire tree, and the maximum value is 10. Hence, the output consists of the results of \\"2 x\\" queries.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] class Tree: def __init__(self, values): self.nodes = [None] + [TreeNode(v) for v in values] def add_edge(self, u, v): self.nodes[u].children.append(self.nodes[v]) self.nodes[v].children.append(self.nodes[u]) def update_value(self, x, val): self.nodes[x].value = val def find_max_in_subtree(self, x): def dfs(node, parent): max_val = node.value for child in node.children: if child != parent: max_val = max(max_val, dfs(child, node)) return max_val return dfs(self.nodes[x], None)"},{"question":"Given an array of n integers representing the heights of students standing in a line, where n is the number of students (1 ≤ n ≤ 10^5) and the heights are positive integers (1 ≤ height[i] ≤ 10^5), you are required to find the maximum number of students that can form a non-decreasing subsequence. Input: - The first line contains an integer n. - The second line contains n integers separated by spaces representing the heights of the students. Output: - Print a single integer, the maximum number of students that can form a non-decreasing subsequence. Example: Input: 6 5 3 4 8 6 7 Output: 4 Explanation: The maximum non-decreasing subsequence is [3, 4, 6, 7] and it has a length of 4. Your task is to implement an algorithm to determine this maximum non-decreasing subsequence length.","solution":"def max_non_decreasing_subsequence_length(heights): Find the maximum length of a non-decreasing subsequence in the given list of heights. :param heights: List of integers representing heights of students :return: Integer, the length of the longest non-decreasing subsequence if not heights: return 0 n = len(heights) dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Alyssa is trying to manage her expenses efficiently by keeping track of what she needs to buy. She has created a shopping list but wants to group items together into categories based on their type to make shopping easier. You need to write a program that helps Alyssa categorize her shopping items. The items are provided as a list of strings where each string contains the item name and its category separated by a colon. Your task is to output a categorically organized shopping list where the items are grouped by their category, and within each category, the items should be listed in alphabetical order. # Input - The first line contains an integer n (1 leq n leq 100), the number of items in the shopping list. - The next n lines each contain a string that describes an item and its category in the format \\"item:category\\". # Output - Print the categorized shopping list. Each category should start with the category name followed by a colon and each item in that category on a new line. Categories should be ordered alphabetically and items within a category should also be ordered alphabetically. # Example **Input:** ``` 6 apple:fruit banana:fruit carrot:vegetable bread:bakery milk:dairy cheese:dairy ``` **Output:** ``` bakery: bread dairy: cheese milk fruit: apple banana vegetable: carrot ``` # Note: - Category names and item names consist of lowercase letters only. - Ensure proper formatting and sorting as specified in the output requirements.","solution":"def categorize_shopping_list(n, items): Categorizes shopping items. Parameters: n (int): Number of items in the shopping list. items (list): List of items with their categories in format \\"item:category\\". Returns: dict: Categorically organized shopping list. # Initialize a dictionary to store categories and corresponding items categorized_items = {} for item in items: item_name, category = item.split(\':\') if category not in categorized_items: categorized_items[category] = [] categorized_items[category].append(item_name) # Sort the items in each category alphabetically for category in categorized_items: categorized_items[category] = sorted(categorized_items[category]) # Sort the categories alphabetically sorted_categories = sorted(categorized_items.keys()) # Prepare the result as a list of strings result = [] for category in sorted_categories: result.append(f\\"{category}:\\") result.extend(categorized_items[category]) return result"},{"question":"You are given an array of integers representing the heights of buildings situated along a straight street. The goal is to select a contiguous subarray (i.e., a segment) of buildings such that the difference between the height of the tallest building and the shortest building in that segment is minimized. Additionally, each segment must include at least `k` buildings. You need to determine the minimal possible difference for any valid segment. Input: - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100,000) — the number of buildings and the minimum number of buildings in each segment respectively. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1,000,000) — the heights of the buildings. Output: - A single integer — the minimal possible difference between the tallest and shortest building in any valid segment containing at least `k` buildings. Example: Input: ``` 7 3 1 5 9 3 2 7 6 ``` Output: ``` 2 ``` Explanation: In this example, the subarray [5, 3, 2] or [3, 2, 7] gives the minimum possible difference of `2`, as both contain at least 3 buildings and the difference between the maximum and minimum height in these segments is 2.","solution":"def minimal_difference_segment(n, k, heights): # Sliding window to find the minimum difference heights_sorted = sorted(heights) # This makes the comparison easier min_diff = float(\'inf\') # Iterate over the sorted heights list to find the min difference in segments of at least k elements for i in range(n - k + 1): current_diff = heights_sorted[i + k - 1] - heights_sorted[i] min_diff = min(min_diff, current_diff) return min_diff"},{"question":"You are in charge of designing a new operating system scheduler. The system receives a list of tasks, each with a specific duration and a priority level. Your task is to determine the order in which the OS should execute these tasks in order to minimize the total waiting time of all tasks. Always break ties by selecting the task with the higher priority (a higher priority number indicates a higher priority task). Write a function `schedule_tasks(tasks)` that takes a list of `tasks`, where each task is represented by a tuple containing the duration and the priority level. The function should return the order of tasks that minimizes the total waiting time, respecting the priority in case of ties. # Input - A list of tuples `tasks` where each tuple contains two integers: - the first integer is the task duration (1 ≤ duration ≤ 1000) - the second integer is the priority level (1 ≤ priority ≤ 100). # Output - A list of integers representing the order of task indices (0-based) that minimizes the total waiting time and respects the priority in case of ties. # Example Input: ```python tasks = [(3, 1), (1, 2), (2, 1)] ``` Output: ```python [1, 2, 0] ``` # Explanation The optimal schedule is: 1. Task 1 (duration 1, priority 2) 2. Task 2 (duration 2, priority 1) 3. Task 0 (duration 3, priority 1) The total waiting time is minimized when processed in this order.","solution":"def schedule_tasks(tasks): Schedules tasks in order to minimize total waiting time, breaking ties by choosing the task with the higher priority. Args: tasks (list of tuple): List of tasks where each task is represented as a tuple (duration, priority). Returns: list: Order of task indices that minimizes the total waiting time. # Get the indices with associated tasks, sorted by a tuple where duration comes first # and then by the negative priority to ensure higher priority tasks come first. indexed_tasks = sorted(enumerate(tasks), key=lambda x: (x[1][0], -x[1][1])) # Return the indices in the required order return [index for index, task in indexed_tasks] # Example usage tasks = [(3, 1), (1, 2), (2, 1)] print(schedule_tasks(tasks)) # Output: [1, 2, 0]"},{"question":"You are tasked with developing a system for monitoring parking lot occupancy. The parking lot has n parking spaces. There are m events occurring throughout the day that can either be a car entering or leaving the parking lot. The parking lot can never exceed its capacity, so if a car tries to enter when the lot is full, it will be denied entry. Write a program that simulates the events based on the input and outputs the final status of the parking lot. The initial state of the parking lot is empty. The first line contains two integers n and m (1 ≤ n, m ≤ 100). The next m lines each contain a single string that is either “IN” followed by a car identifier (a string with no spaces), or \\"OUT\\" followed by a car identifier. Each car identifier uniquely identifies a car. If a car tries to leave the parking lot but is not present, ignore the request. Your program should output the final status of the parking lot. First, output the number of cars currently in the parking lot. Then, output the list of car identifiers currently parked in the lot in the order they arrived, each on a new line. Example: ``` Input: 5 6 IN ABC123 IN XYZ789 OUT ABC123 IN DEF456 IN GHI789 IN JKL012 Output: 3 XYZ789 DEF456 GHI789 ``` Explanation: - Initially, there are 5 parking spaces available. - A car with identifier \\"ABC123\\" enters, leaving 4 spaces available. - The car \\"XYZ789\\" enters, leaving 3 spaces available. - \\"ABC123\\" leaves, leaving 4 spaces available. - \\"DEF456\\" enters, leaving 3 spaces available. - \\"GHI789\\" enters, leaving 2 spaces available. - \\"JKL012\\" enters, leaving 1 space available. - The final status shows 3 cars in the lot: \\"XYZ789\\", \\"DEF456\\", and \\"GHI789\\".","solution":"def monitor_parking_lot(n, m, events): Simulates the parking lot events and returns the status of the parking lot. Parameters: n (int): The number of parking spaces. m (int): The number of events. events (list): List of events in the form \'IN car_identifier\' or \'OUT car_identifier\'. Returns: tuple: A tuple containing the number of cars currently in the parking lot and a list of car identifiers. parked_cars = [] parked_car_set = set() for event in events: action, car_id = event.split() # Event is car entering if action == \\"IN\\": if len(parked_cars) < n and car_id not in parked_car_set: parked_cars.append(car_id) parked_car_set.add(car_id) # Event is car leaving elif action == \\"OUT\\": if car_id in parked_car_set: parked_cars.remove(car_id) parked_car_set.remove(car_id) return len(parked_cars), parked_cars"},{"question":"In a bakery, the baker needs to prepare a batch of special cupcakes for an event. Each cupcake requires a certain amount of flour, sugar, and butter. The recipe for one cupcake is represented by three integers: F (grams of flour), S (grams of sugar), and B (grams of butter). The bakery has a total of T grams of flour, U grams of sugar, and V grams of butter in stock. Given the recipe and the available quantities of ingredients, the baker wants to maximize the number of cupcakes that can be made. Write a program that calculates the maximum number of cupcakes that can be baked with the available ingredients. Input: - A single line containing six integers: F, S, B, T, U, and V (1 ≤ F, S, B, T, U, V ≤ 10^9). Output: - A single integer representing the maximum number of cupcakes the baker can make. Example: Input: 6 8 5 30 40 25 Output: 5 Explanation: - For each cupcake, you need 6 grams of flour, 8 grams of sugar, and 5 grams of butter. - The bakery has 30 grams of flour, 40 grams of sugar, and 25 grams of butter. - You can make 5 cupcakes since 5 * 6 = 30 (flour), 5 * 8 = 40 (sugar), and 5 * 5 = 25 (butter) exactly matches the available quantities.","solution":"def max_cupcakes(F, S, B, T, U, V): Given the recipe of a cupcake and the available ingredients, calculates the maximum number of cupcakes that can be baked. Parameters: F (int): Grams of flour needed for one cupcake. S (int): Grams of sugar needed for one cupcake. B (int): Grams of butter needed for one cupcake. T (int): Total grams of flour available. U (int): Total grams of sugar available. V (int): Total grams of butter available. Returns: int: Maximum number of cupcakes that can be baked. max_from_flour = T // F max_from_sugar = U // S max_from_butter = V // B # The number of cupcakes that can be made is limited by the # ingredient that runs out first. return min(max_from_flour, max_from_sugar, max_from_butter)"},{"question":"Jenny loves playing word games and one of her favorites involves creating new words from existing ones. She is particularly fascinated by palindromes. A palindrome is a word that reads the same backward as forward. One day, Jenny encountered a problem where she wanted to find the longest palindromic substring within a given string. She struggled with it and now seeks your help. Given a string **S** of length up to 1000, write a program that finds the longest contiguous substring of **S** that is a palindrome. If there are multiple such substrings of the same maximum length, return the one that appears first in **S**. **Input:** - A single line containing the string **S** which consists of lowercase English letters only. **Output:** - A single line containing the longest palindromic substring. **Example:** Input: ``` babad ``` Output: ``` bab ``` Explanation: Although \\"aba\\" is also a valid answer, \\"bab\\" appears first in the string. **Additional Example:** Input: ``` cbbd ``` Output: ``` bb ``` Note: Ensure your program is efficient and handles strings of up to 1000 characters within a reasonable time frame.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring within the given string s. If there are multiple such substrings of the same maximum length, returns the one that appears first. :param s: input string :return: longest palindromic substring in s if not s: return \\"\\" n = len(s) longest = \\"\\" def expand_around_center(left, right): nonlocal longest while left >= 0 and right < n and s[left] == s[right]: current_palindrome = s[left:right + 1] if len(current_palindrome) > len(longest): longest = current_palindrome left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return longest"},{"question":"You are given two strings s and t consisting of lowercase English letters. You can perform the following operation any number of times (including zero): - Choose any character from the string t and replace it with any lowercase English letter. Your task is to determine the minimum number of operations required to make t a subsequence of s. A string t is a subsequence of a string s if t can be obtained from s by deleting some (possibly zero) characters without changing the order of the remaining characters. The first line of the input contains one integer n (1 le n le 10^5) — the length of string s. The second line of the input contains one integer m (1 le m le 10^5) — the length of string t. The third line of the input contains the string s consisting of n lowercase English letters. The fourth line of the input contains the string t consisting of m lowercase English letters. Print one integer — the minimum number of operations required to make t a subsequence of s.","solution":"def min_operations_to_make_subsequence(n, m, s, t): Determine the minimum number of operations required to make t a subsequence of s. Parameters: n (int): The length of string s. m (int): The length of string t. s (str): The string from which the subsequence is to be made. t (str): The target string to be made into a subsequence. Returns: int: The minimum number of operations required. dp = [0] * (m + 1) # dp[i] will store the maximum length of matching subsequence t[:i] for c in s: for j in range(m-1, -1, -1): if t[j] == c: dp[j+1] = dp[j] + 1 # The number of characters in t that can already be found in s as a subsequence max_match_length = max(dp) # The minimum operations required is the number of characters in t not found in the subsequence return m - max_match_length"},{"question":"You are given a list of integers representing the heights of trees planted along a straight road. Your task is to answer several queries about the height of the tallest tree in a specified subsegment of trees. The input consists of: 1. An integer n (1 leq n leq 10^5), the number of trees. 2. A line containing n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9), the heights of the trees. 3. An integer q (1 leq q leq 10^5), the number of queries. 4. The following q lines each contain two integers l and r (1 leq l leq r leq n), representing the inclusive range of the height query. For each query, output the height of the tallest tree between indices l and r (inclusive). # Input ``` n h_1 h_2 ... h_n q l_1 r_1 l_2 r_2 ... l_q r_q ``` # Output ``` x_1 x_2 ... x_q ``` # Example Input ``` 5 2 1 5 3 4 3 1 3 2 4 1 5 ``` Output ``` 5 5 5 ``` Here, for the first query the tallest tree in the subsegment [2, 1, 5] is 5. For the second query, in the subsegment [1, 5, 3], the tallest tree is 5. For the third query, in the subsegment [2, 1, 5, 3, 4], the tallest tree is also 5.","solution":"def tallest_trees(n, heights, queries): results = [] for l, r in queries: results.append(max(heights[l-1:r])) return results"},{"question":"You have a string s consisting of lowercase Latin letters. We define the beauty of a string as the sum of ASCII values of its distinct characters. For example, the beauty of the string \\"abc\\" is the sum of the ASCII values of \'a\', \'b\', and \'c\', which equals 97 + 98 + 99 = 294. Given a string s, you need to calculate the maximum possible beauty of any substring of s. The input consists of a single string s (1 le |s| le 10^5). Your output should be the maximum possible beauty of any substring of s. # Example Input ``` abcab ``` Output ``` 294 ``` Explanation: The possible substrings of \\"abcab\\" include \\"a\\", \\"ab\\", \\"abc\\", \\"bca\\", etc. The substring \\"abc\\" contains all distinct characters \'a\', \'b\', and \'c\', which maximizes the beauty at 294.","solution":"def max_beauty_of_substring(s): Returns the maximum possible beauty of any substring of s. distinct_chars = set(s) max_beauty = sum(ord(char) for char in distinct_chars) return max_beauty"},{"question":"A painting company has been contracted to paint a series of walls. They are required to use a specific set of colors, and each color has a particular drying time. Given this information, each wall must be painted in such a way that no wall has the same color as any of its adjacent walls. Furthermore, you must wait for the paint to dry before moving on to the adjacent wall. You are given a series of test cases. Each test case consists of an integer `n` (1 le n le 1000), denoting the number of walls in a sequence. The second line contains `n` pairs of integers where each pair represents `(color, drying_time)` of the wall. Each wall could be painted with a color represented by a unique integer (1 le color le 1000) which does not repeat within a test case input. Your task is to determine the minimum total time required to paint and dry all the walls given the constraints. Each test case must be processed independently. # Input The first line contains an integer `t` (1 le t le 10), the number of test cases. For each test case: - The first line contains an integer `n` (1 le n le 1000). - The next `n` lines each contains two integers `color` and `drying_time` (1 le drying_time le 1000). # Output For each test case, output the minimum total time required to paint all walls. # Example Input: ``` 2 3 1 2 2 3 3 1 4 1 2 2 4 3 3 4 2 ``` Output: ``` 6 9 ``` # Explanation In the first example, you can paint walls in the order such that their colors don\'t clash adjacent walls, and the total waiting time would be 6 (paint first 3 walls, wait for the drying time of each). In the second example, a combination of painting and waiting for the drying time would result in a total time of 9.","solution":"def minimum_paint_time(t, test_cases): results = [] for i in range(t): n, walls = test_cases[i] total_time = sum(drying_time for _, drying_time in walls) results.append(total_time) return results"},{"question":"Given a 2D grid of dimensions `m x n` containing values that can either be 0 or 1, where 0 represents water and 1 represents land, write a program to find the largest island in the grid. An island is formed by connecting adjacent lands horizontally or vertically. The size of an island is the total number of 1s connected together. Implement the function `largest_island(grid)` that takes a 2D grid as input and returns the size of the largest island. # Constraints: - The grid has at most 50 rows and 50 columns. - The grid will have at least one cell. - The values in the grid are either 0 or 1. # Example: ```python def largest_island(grid): # your implementation here grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0] ] print(largest_island(grid)) # Output: 4 ``` In this example, the largest island, which is formed by connecting the adjacent 1s, has a size of 4. The four 1s at positions (0,0), (0,1), (1,0), and (1,1) form an island with the largest size in the grid.","solution":"def largest_island(grid): def dfs(grid, r, c, visited): stack = [(r, c)] size = 0 while stack: i, j = stack.pop() if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (i, j) not in visited and grid[i][j] == 1: visited.add((i, j)) size += 1 stack.append((i-1, j)) # up stack.append((i+1, j)) # down stack.append((i, j-1)) # left stack.append((i, j+1)) # right return size visited = set() max_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1 and (i, j) not in visited: island_size = dfs(grid, i, j, visited) max_size = max(max_size, island_size) return max_size"},{"question":"Given a matrix `m` with `n` rows and `n` columns containing integers, write a function that returns a list of diagonals in `m` ordered from top-left to bottom-right along the anti-diagonals. Each diagonal should contain all the elements of the matrix that can be formed by starting from the top-left and moving to the bottom-right of the matrix while moving only downwards and to the right. An element in the matrix belongs to the ith diagonal if its coordinates sum to i. Complete the function `extract_anti_diagonals(matrix: List[List[int]]) -> List[List[int]]` which takes a 2D list (list of lists) `matrix` and returns an ordered list of lists containing the elements of the anti-diagonals. # Input - A single integer `n` (1 ≤ n ≤ 500). - A 2D list `matrix` of size `n x n` containing integers (-10^4 ≤ matrix[i][j] ≤ 10^4). # Output Return a list of lists, each sublist representing an anti-diagonal containing the elements from the original matrix. # Example ```python def extract_anti_diagonals(matrix): n = len(matrix) result = [[] for _ in range(2 * n - 1)] for i in range(n): for j in range(n): result[i + j].append(matrix[i][j]) return result # Example usage: n = 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Expected Output: # [ # [1], # [2, 4], # [3, 5, 7], # [6, 8], # [9] # ] print(extract_anti_diagonals(matrix)) ``` Explanation: - The first diagonal contains [1]. - The second diagonal contains [2, 4]. - The third diagonal contains [3, 5, 7]. - The fourth diagonal contains [6, 8]. - The fifth diagonal contains [9].","solution":"def extract_anti_diagonals(matrix): n = len(matrix) result = [[] for _ in range(2 * n - 1)] for i in range(n): for j in range(n): result[i + j].append(matrix[i][j]) return result"},{"question":"Little Vasya likes playing with strings. Recently, he has been given two strings `s` and `t` consisting of lowercase English letters. Vasya can take any number of contiguous substrings from `s` and concatenate them to form a new string. Vasya wants to find out if he can form the string `t` by concatenating some (possibly empty) contiguous substrings from `s`. Your task is to help Vasya determine if it is possible to form string `t` using only contiguous substrings of `s`. The first line contains the string `s` (1 ≤ |s| ≤ 100) — the original string Vasya has. The second line contains the string `t` (1 ≤ |t| ≤ 100) — the target string Vasya wants to form. Print \\"YES\\" if `t` can be formed by concatenating some contiguous substrings from `s`, otherwise print \\"NO\\". In the first sample, one way to form \\"abc\\" is to take \\"ab\\" from first two characters and \\"c\\" from the third character of the string \\"abc\\". In the second sample, there is no way to form \\"abcd\\" by concatenating any number of contiguous substrings from \\"abc\\".","solution":"def can_form_t(s, t): Determine if string `t` can be formed by concatenating some contiguous substrings from `s`. Parameters: s (str): The original string. t (str): The target string. Returns: str: \\"YES\\" if `t` can be formed, otherwise \\"NO\\". # To check if t is a subsequence of s, we maintain a pointer j for t j = 0 for char in s: if j < len(t) and char == t[j]: j += 1 if j == len(t): return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with implementing a flight booking system for a single airline. Each flight is identified by its flight number and has a fixed capacity of seats. Passengers can book a seat on a flight if there are available seats. The system should support the following operations: 1. Add a new flight with a specific flight number and seat capacity. 2. Book a seat on a specific flight for a specific passenger. 3. Check the number of available seats for a specific flight. 4. Cancel a booking for a specific passenger on a specific flight. 5. List all passengers booked on a specific flight. Each operation will be provided as input in the form of a command, and the output should follow the specified format for each operation. Input: - The first line contains an integer n (1 <= n <= 1000) representing the number of operations. - Each of the following n lines describes an operation. The operations can be of the following forms: 1. \\"ADD flight_number seat_capacity\\" - Adds a new flight with the given flight number and capacity. 2. \\"BOOK flight_number passenger_name\\" - Books a seat on the flight for the given passenger. 3. \\"CHECK flight_number\\" - Checks the number of available seats on the flight. 4. \\"CANCEL flight_number passenger_name\\" - Cancels the booking for the given passenger on the flight. 5. \\"LIST flight_number\\" - Lists the names of all booked passengers on the flight. Output: - For the \\"CHECK\\" operation, print the number of available seats. - For the \\"LIST\\" operation, print the names of the booked passengers separated by spaces. If no passengers are booked, print \\"No bookings\\". - For invalid operations or unsuccessful attempts (e.g., booking a seat on a full flight), print \\"Operation failed\\". Example: Input: 10 ADD FL123 150 BOOK FL123 Alice BOOK FL123 Bob CHECK FL123 BOOK FL123 Carol CANCEL FL123 Bob LIST FL123 CHECK FL123 BOOK FL123 Bob LIST FL123 Output: 148 Operation failed Alice Carol 149 Alice Carol Bob Note: - Flight numbers are unique and consist of alphanumeric characters. - Passenger names consist of alphanumeric characters and are unique per flight. - Do not attempt to book or cancel a seat for a non-existent flight. This should result in an \\"Operation failed\\" message.","solution":"class FlightBookingSystem: def __init__(self): self.flights = {} def add_flight(self, flight_number, seat_capacity): if flight_number in self.flights: return \\"Operation failed\\" self.flights[flight_number] = { \\"capacity\\": seat_capacity, \\"booked\\": set() } def book_seat(self, flight_number, passenger_name): if flight_number not in self.flights: return \\"Operation failed\\" flight = self.flights[flight_number] if len(flight[\\"booked\\"]) >= flight[\\"capacity\\"]: return \\"Operation failed\\" flight[\\"booked\\"].add(passenger_name) def check_seats(self, flight_number): if flight_number not in self.flights: return \\"Operation failed\\" flight = self.flights[flight_number] return flight[\\"capacity\\"] - len(flight[\\"booked\\"]) def cancel_booking(self, flight_number, passenger_name): if flight_number not in self.flights: return \\"Operation failed\\" flight = self.flights[flight_number] if passenger_name not in flight[\\"booked\\"]: return \\"Operation failed\\" flight[\\"booked\\"].remove(passenger_name) def list_passengers(self, flight_number): if flight_number not in self.flights: return \\"Operation failed\\" flight = self.flights[flight_number] if not flight[\\"booked\\"]: return \\"No bookings\\" return \\" \\".join(sorted(flight[\\"booked\\"]))"},{"question":"You are given a rectangular grid of n rows and m columns, initially filled with 0s. You will be given multiple commands to perform on this grid. Each command is either of type \\"row\\" or \\"column\\", and it consists of a number and an integer value. If the command is \\"row i x\\", it means you need to add the value x to every element in the i-th row. If the command is \\"column j x\\", it means you need to add the value x to every element in the j-th column. After performing all the commands, you need to find the maximum value present in the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The second line contains an integer k (1 ≤ k ≤ 100000) — the number of commands. Each of the next k lines contains a command of one of the two types described above. Output the maximum value in the grid after performing all the commands. Example: Input: 3 3 4 row 1 2 column 2 3 row 2 4 column 3 1 Output: 6 Explanation: - After the first command \\"row 1 2\\", the grid becomes: 2 2 2 0 0 0 0 0 0 - After the second command \\"column 2 3\\", the grid becomes: 2 5 2 0 3 0 0 3 0 - After the third command \\"row 2 4\\", the grid becomes: 2 5 2 4 7 4 0 3 0 - After the fourth command \\"column 3 1\\", the grid becomes: 2 5 3 4 7 5 0 3 1 The maximum value in the grid is 7.","solution":"def max_value_in_grid(n, m, k, commands): grid = [[0] * m for _ in range(n)] for command in commands: cmd_type, index, value = command index = int(index) - 1 value = int(value) if cmd_type == \\"row\\": for j in range(m): grid[index][j] += value elif cmd_type == \\"column\\": for i in range(n): grid[i][index] += value max_value = max(max(row) for row in grid) return max_value # Example usage # n, m = 3, 3 # k = 4 # commands = [ # (\\"row\\", \\"1\\", \\"2\\"), # (\\"column\\", \\"2\\", \\"3\\"), # (\\"row\\", \\"2\\", \\"4\\"), # (\\"column\\", \\"3\\", \\"1\\") # ] # print(max_value_in_grid(n, m, k, commands)) # Output: 7"},{"question":"You have been given a grid with dimensions n x m consisting of cells, where each cell represents either a land cell \'L\' or a water cell \'W\'. The grid represents a map, and you need to find the number of islands in the grid. An island is a group of connected lands connected horizontally or vertically. You need to write a function to count the number of islands in the grid. Function Signature: ```python def count_islands(grid: List[List[str]]) -> int: ``` Input: - grid: A list of list of strings, where each string is either \'L\' (land) or \'W\' (water). - n (1 ≤ n ≤ 1000): the number of rows in the grid. - m (1 ≤ m ≤ 1000): the number of columns in the grid. Output: - Return an integer representing the number of islands. Example: ```python grid = [ [\\"L\\", \\"L\\", \\"W\\", \\"L\\"], [\\"L\\", \\"L\\", \\"W\\", \\"W\\"], [\\"W\\", \\"W\\", \\"L\\", \\"W\\"], [\\"L\\", \\"W\\", \\"L\\", \\"L\\"] ] print(count_islands(grid)) # Output: 4 ``` Note: - The function should efficiently traverse the grid to count all islands. - It\'s necessary to handle large grids up to 1000x1000 efficiently.","solution":"from typing import List def count_islands(grid: List[List[str]]) -> int: def dfs(r, c): # If out of bounds or at a water cell, return immediately if r < 0 or c < 0 or r >= n or c >= m or grid[r][c] == \'W\': return # Mark this cell as visited by setting it to \'W\' grid[r][c] = \'W\' # Explore all 4 directions dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) if not grid: return 0 n = len(grid) m = len(grid[0]) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': # Start a new island island_count += 1 # Perform DFS to mark the whole island dfs(i, j) return island_count"},{"question":"**Helping Ada Sort the Co-Workers\' List:** Ada is the office manager, and she has a list of co-workers with their names and the number of years they have worked at the company. Ada needs a program to help her sort this list based on the number of years each co-worker has worked, in descending order. If two co-workers have the same number of years, their names should be sorted in ascending alphabetical order. Could you help Ada by writing a program to sort this list? # Input: The first line contains an integer `n` (1 ≤ n ≤ 100) - the number of co-workers. The next `n` lines each contain the name of a co-worker (a string of alphanumeric characters only, with length up to 100) followed by an integer `y` (1 ≤ y ≤ 50) - the number of years the co-worker has worked at the company. The name and the number are separated by a single space. # Output: Print the sorted list of co-workers, each co-worker on a new line with their name and the number of years worked, separated by a space. # Example: Input: ``` 5 John 3 Alice 3 Bob 1 Charlie 2 Eve 2 ``` Output: ``` Alice 3 John 3 Charlie 2 Eve 2 Bob 1 ``` # Explanation: Alice and John both have worked for 3 years, but Alice\'s name comes first alphabetically. Similarly, Charlie and Eve both have worked for 2 years, but Charlie\'s name comes first alphabetically. Therefore, the final sorted list is in the required order.","solution":"def sort_coworkers(n, coworkers): Sorts a list of co-workers based on their years of work in descending order. In case of a tie, sorts alphabetically by name in ascending order. :param n: int - number of co-workers :param coworkers: list - list of tuples with each tuple containing a name (str) and years of work (int) :return: list - sorted list of coworkers based on the criteria # Sort the coworkers based on the criteria sorted_coworkers = sorted(coworkers, key=lambda x: (-x[1], x[0])) return sorted_coworkers"},{"question":"You are given a grid representing a maze with certain cells blocked. Your task is to find a path from the top-left corner to the bottom-right corner of the maze. You can only move up, down, left, or right, and you cannot move into a cell that is blocked. Additionally, each move to an adjacent cell has a cost associated with it. You need to find the path with the minimum cost. The maze is represented as an n x n grid where each cell contains an integer which is: - 0 if the cell is blocked - a positive integer representing the cost to move into that cell You are to write a function that takes this grid as input and returns the minimum cost to reach the bottom-right corner from the top-left corner. If there is no valid path, return -1. # Input - An integer n (2 ≤ n ≤ 50), the size of the grid. - A 2D list of integers representing the grid, where each integer is either 0 (blocked) or a positive integer (cost). # Output - An integer representing the minimum cost to reach the bottom-right corner from the top-left corner, or -1 if there is no valid path. # Example Input: ``` 4 [ [1, 1, 1, 1], [1, 0, 1, 0], [1, 1, 1, 1], [0, 1, 0, 1] ] ``` Output: ``` 7 ``` Explanation: The path with the minimum cost is: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) with a total cost of 1 + 1 + 1 + 1 + 1 + 1 + 1 = 7.","solution":"import heapq def min_cost_path(grid): Finds the minimum cost to reach the bottom-right corner from the top-left corner. If no valid path exists, returns -1. Parameters: grid (list of list of int): The grid representing the maze. Returns: int: The minimum cost to reach the bottom-right corner, or -1 if no path exists. n = len(grid) if n == 0 or grid[0][0] == 0 or grid[n-1][n-1] == 0: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] min_heap = [(grid[0][0], 0, 0)] costs = [[float(\'inf\')] * n for _ in range(n)] costs[0][0] = grid[0][0] while min_heap: current_cost, x, y = heapq.heappop(min_heap) if x == n - 1 and y == n - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != 0: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return -1 if costs[n-1][n-1] == float(\'inf\') else costs[n-1][n-1]"},{"question":"Sarah is a security expert working on a new encryption system. Her task includes creating secure random passwords. To test the strength of her password generation algorithm, she needs to check if a given string can be converted into a palindrome by rearranging its characters. A string is a palindrome if it reads the same backwards as forwards. For example, \\"radar\\" and \\"level\\" are palindromic strings. Your task is to write a function that will determine whether a given string can be rearranged to form a palindrome. If it is possible, return \\"YES\\", otherwise return \\"NO\\". # Input: - The input consists of a single line containing a string consisting of lowercase English letters (1 ≤ |s| ≤ 10^6). # Output: - Output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". # Examples: Example 1: Input: ``` aabb ``` Output: ``` YES ``` Example 2: Input: ``` aabc ``` Output: ``` NO ``` Example 3: Input: ``` racecar ``` Output: ``` YES ``` # Explanation: - In Example 1, the string \\"aabb\\" can be rearranged to form \\"abba\\" or \\"baab\\", both of which are palindromes. - In Example 2, the string \\"aabc\\" cannot be rearranged to form any palindrome. - In Example 3, the string \\"racecar\\" is already a palindrome. # Constraints: - The string will contain only lowercase English letters. - The string length will be between 1 and (10^6) inclusive.","solution":"def can_be_palindrome(s): Determines whether the input string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there is at most one character with an odd count if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers and a value `k`, your task is to determine if there are any two distinct indices `i` and `j` in the list such that the product of the corresponding values is equal to `k`. If such a pair exists, output `True`. Otherwise, output `False`. # Input: - The first line contains two integers `n` and `k` (1 ≤ `n` ≤ 100, -10^6 ≤ `k` ≤ 10^6), the size of the list and the value `k`. - The second line contains `n` space-separated integers representing the elements of the list. Each integer ` l[i]` (−10^6 ≤ l[i] ≤ 10^6 ). # Output: - Output `True` if there exist two distinct indices `i` and `j` such that `l[i] * l[j] == k`. Otherwise, output `False`. # Example: Input: ``` 4 12 1 3 2 4 ``` Output: ``` True ``` Explanation: Elements at indices `1` and `4` (3 * 4) produce the product 12. # Example: Input: ``` 5 20 2 4 1 8 6 ``` Output: ``` False ``` Explanation: No pair of elements produce the product 20.","solution":"def has_product_pair(n, k, lst): Determines if there are two distinct indices i and j in the list such that the product of the corresponding values is equal to k. If such a pair exists, returns True. Otherwise, returns False. value_indices = {} for i in range(n): if lst[i] == 0: if k == 0: # Special case handling where we need k to be 0. return True continue if k % lst[i] == 0: pair_value = k // lst[i] if pair_value in value_indices: return True if lst[i] not in value_indices: value_indices[lst[i]] = i return False"},{"question":"In a kingdom, there are several cities connected by roads. The kingdom\'s king wants to evaluate the security risk of each city by calculating its \\"vulnerability score,\\" which is the number of distinct roads that need to be removed to isolate the city from the rest of the kingdom. You are given `n` cities and `m` roads. Each road connects exactly two cities. Write a program that computes the vulnerability score for each city in the kingdom. The input consists of: - A single line containing two integers n and m (1 ≤ n, m ≤ 10^5) — the number of cities and the number of roads, respectively. - `m` lines, each containing two integers u and v (1 ≤ u, v ≤ n), denoting a road between city `u` and city `v`. Output `n` lines, each containing the vulnerability score of city `i` (1 ≤ i ≤ n). # Example Input ``` 5 6 1 2 1 3 2 3 3 4 2 4 4 5 ``` Output ``` 1 1 1 1 1 ``` # Explanation In the given example, each city is only directly connected to at most one other city through a road. Removing the connection to that other city isolates it from the rest of the kingdom, resulting in a vulnerability score of 1 for each city.","solution":"import collections def compute_vulnerability_scores(n, m, roads): graph = collections.defaultdict(list) degrees = [0] * (n + 1) # Build the graph and degree of each city for u, v in roads: graph[u].append(v) graph[v].append(u) degrees[u] += 1 degrees[v] += 1 # The vulnerability score for each city is essentially its degree vulnerability_scores = degrees[1:] return vulnerability_scores # Example usage: n = 5 m = 6 roads = [(1, 2), (1, 3), (2, 3), (3, 4), (2, 4), (4, 5)] print(compute_vulnerability_scores(n, m, roads))"},{"question":"In a distant city named \\"Algorithmopolis\\", the citizens love symmetry in their daily lives, especially in their festivals. During one such festival, the citizens arrange lanterns in the city park in the form of an isosceles triangle, where each lantern is represented by an integer. An isosceles triangle with n rows can be represented as follows: - The first row contains 1 lantern. - The second row contains 2 lanterns. - The third row contains 3 lanterns. - And so on up to the nth row, which contains n lanterns. The total number of lanterns in an isosceles triangle with n rows is the sum of the first n natural numbers, which is given by T(n) = (n * (n + 1)) / 2. Given a number k, determine the maximum number of rows, n, that can be fully completed using exactly k lanterns. If no such number of rows can be formed, return -1. The input consists of a single integer k (1 ≤ k ≤ 10^9). Print a single integer, the maximum number of rows n that can be fully formed using exactly k lanterns. If no such number exists, print -1.","solution":"def max_rows(k): Determine the maximum number of rows n that can be fully completed using exactly k lanterns. If no such number of rows can be formed, return -1. n = 0 sum_n = 0 while sum_n <= k: n += 1 sum_n += n if sum_n == k: return n return -1"},{"question":"You are given an array of integers representing the positions of stones along a river. You are also given a list of stepping stones, each with a maximum jump distance. Your goal is to determine if it is possible to cross the river by stepping on the stones without jumping further than the given maximum jump distance for each stone. Each stepping stone can be described by two integers: its position and maximum jump distance. You start at position 0 and reach the last stone if you are able to jump to a position equal to the length of the river. Write a function that takes the length of the river, an array of stone positions, and a list of stepping stones (each represented by a position and a maximum jump distance) and returns a boolean indicating whether it is possible to cross the river. Input: - An integer `l` representing the length of the river. - An integer array `stones` of size `n` representing the positions of the stones. - A list of `n` tuples `jumpLimits` where each tuple contains two integers: the position of the stone and the maximum jump distance from that stone. Output: - A boolean value `True` if it is possible to cross the river, otherwise `False`. Constraints: - `1 ≤ l ≤ 10^9` - `1 ≤ n ≤ 10^5` - `1 ≤ stones[i] ≤ l` - Stones are provided in ascending order of positions. - Each stone in `jumpLimits` has a position and a maximum jump distance within the same range agreed with `stones`. Example: ```python def canCrossRiver(l, stones, jumpLimits): # Implement the function pass # Example usage: l = 10 stones = [2, 4, 6, 8] jumpLimits = [(2, 4), (4, 6), (6, 2), (8, 2)] print(canCrossRiver(l, stones, jumpLimits)) # Output: True ```","solution":"def canCrossRiver(l, stones, jumpLimits): Determines if it is possible to cross the river. Parameters: l (int): Length of the river. stones (list): List of positions of the stones. jumpLimits (list): List of tuples containing position of stone and maximum jump distance. Returns: bool: True if possible to cross the river, False otherwise. # Dictionary to store stone positions and their corresponding jump limits stone_jump_dict = {pos: max_jump for pos, max_jump in jumpLimits} # Initialize a list to keep track of the maximum reachable position at each stone reachable = [False] * (len(stones) + 1) reachable[0] = True # starting point is always reachable for i in range(len(stones)): if reachable[i]: current_pos = stones[i] max_jump = stone_jump_dict[current_pos] # Try to jump to the next stones from the current stone for j in range(i + 1, len(stones)): next_pos = stones[j] if next_pos - current_pos <= max_jump: reachable[j] = True # Check if we can reach the other side of the river if l - current_pos <= max_jump: return True return False"},{"question":"Design a program that simulates fuel consumption for a trip with multiple legs and calculates if you can reach each destination on time. The program should take into account speed limits, fuel efficiency, refueling stops, and traffic delays. Each leg of the trip is represented by a segment characterized by distance, average speed (which must not exceed the speed limit for that segment), and any potential traffic delays for that segment. The input starts with the initial amount of fuel in the car (in liters), fuel efficiency of the car (in kilometers per liter), number of legs of the trip, and the total time available to complete the trip. For each leg, the input includes the distance of the segment, speed limit for that segment, and any additional time delays due to traffic. Refueling stops can be made at the end of each segment if needed. The program will calculate whether it is possible to reach each segment within the given constraints and whether you will run out of fuel at any point during the trip. The output should indicate for each leg whether it is possible to complete that leg on time and within the fuel constraints. Input: - First line contains four integers: initial amount of fuel in liters, fuel efficiency (kilometers per liter), total number of legs for the trip, total time available in minutes. - For each leg, input consists of three integers: distance of the segment in kilometers, speed limit for that segment in kilometers per hour, time delay in minutes. Output: - For each leg, output either \'POSSIBLE\' if it is feasible to complete that leg on time and with the given fuel constraints, or \'IMPOSSIBLE\' if it is not. Example Input: ``` 50 15 3 300 100 80 15 150 120 10 200 100 20 ``` Example Output: ``` POSSIBLE POSSIBLE IMPOSSIBLE ``` Explanation: - For the first leg, covering 100 km at a speed of 80 km/h with a 15-minute delay is feasible. - For the second leg, covering 150 km at a speed of 120 km/h with a 10-minute delay is feasible. - For the third leg, covering 200 km at a speed of 100 km/h with a 20-minute traffic delay is not feasible within the remaining constraints. Make sure to handle possible edge cases, such as no fuel needed (if efficiency is high), or extremely tight time constraints where even the fastest speeds cannot meet the required duration.","solution":"def can_complete_trip(initial_fuel, fuel_efficiency, num_legs, total_time, legs): responses = [] remaining_fuel = initial_fuel remaining_time = total_time for leg in legs: distance, speed_limit, delay = leg # Calculate time to complete the leg time_to_complete = (distance / speed_limit) * 60 + delay # Convert hours to minutes and add delay fuel_needed = distance / fuel_efficiency if time_to_complete <= remaining_time and fuel_needed <= remaining_fuel: responses.append(\\"POSSIBLE\\") remaining_time -= time_to_complete remaining_fuel -= fuel_needed # Assume refueling possible, reset fuel to initial state for next leg remaining_fuel = initial_fuel else: responses.append(\\"IMPOSSIBLE\\") break # If one leg is impossible, the rest will also be impossible return responses # Example usage: # initial_fuel, fuel_efficiency, num_legs, total_time = 50, 15, 3, 300 # legs = [(100, 80, 15), (150, 120, 10), (200, 100, 20)] # print(can_complete_trip(initial_fuel, fuel_efficiency, num_legs, total_time, legs))"},{"question":"A company is setting up a management system for their project\'s staffing. Each project can have multiple tasks, and each task can be assigned to a single employee. Given the following operations, you need to manage the assignment and reassignment of employees to tasks and provide information upon request. Operations can be of the following types: 1. Assign an employee `e` to task `t`. 2. Reassign task `t` from employee `e1` to employee `e2`. 3. List all tasks assigned to employee `e`. 4. List all employees working on task `t`. The first line of input contains two integers, `p` and `q` (1 ≤ p, q ≤ 10^5) — the number of projects and the number of queries, respectively. Each of the next `q` lines contains a query in one of the following formats: - \\"ASSIGN t e\\" — Assign employee `e` to task `t`. - \\"REASSIGN t e1 e2\\" — Reassign task `t` from employee `e1` to employee `e2`. - \\"LIST_TASKS e\\" — List all tasks currently assigned to employee `e`. - \\"LIST_EMPLOYEES t\\" — List all employees working on task `t`. Output the result for each relevant query. If a `LIST_TASKS` or `LIST_EMPLOYEES` query is made for an employee or task with no assignments, return an appropriate message indicating that there are no assignments. # Sample Input: ``` 5 6 ASSIGN task1 emp1 ASSIGN task2 emp1 ASSIGN task3 emp2 REASSIGN task1 emp1 emp3 LIST_TASKS emp1 LIST_EMPLOYEES task1 ``` # Sample Output: ``` task2 emp3 ```","solution":"class EmployeeTaskManagement: def __init__(self): self.task_to_employee = {} self.employee_to_tasks = {} def assign(self, task, employee): if task in self.task_to_employee: current_employee = self.task_to_employee[task] self.employee_to_tasks[current_employee].remove(task) self.task_to_employee[task] = employee if employee not in self.employee_to_tasks: self.employee_to_tasks[employee] = [] self.employee_to_tasks[employee].append(task) def reassign(self, task, from_employee, to_employee): if task in self.task_to_employee and self.task_to_employee[task] == from_employee: self.task_to_employee[task] = to_employee self.employee_to_tasks[from_employee].remove(task) if to_employee not in self.employee_to_tasks: self.employee_to_tasks[to_employee] = [] self.employee_to_tasks[to_employee].append(task) def list_tasks(self, employee): if employee in self.employee_to_tasks and self.employee_to_tasks[employee]: return sorted(self.employee_to_tasks[employee]) return \\"No tasks assigned.\\" def list_employees(self, task): if task in self.task_to_employee: return [self.task_to_employee[task]] return \\"No employees assigned.\\" def handle_queries(queries): etm = EmployeeTaskManagement() results = [] for query in queries: parts = query.split() if parts[0] == \\"ASSIGN\\": etm.assign(parts[1], parts[2]) elif parts[0] == \\"REASSIGN\\": etm.reassign(parts[1], parts[2], parts[3]) elif parts[0] == \\"LIST_TASKS\\": result = etm.list_tasks(parts[1]) if isinstance(result, list): results.append(\' \'.join(result)) else: results.append(result) elif parts[0] == \\"LIST_EMPLOYEES\\": result = etm.list_employees(parts[1]) if isinstance(result, list): results.append(\' \'.join(result)) else: results.append(result) return results"},{"question":"You have been given a list of `n` bank transactions, where each transaction is characterized by three integers: `ai`, `bi`, and `ti`. The three integers represent the transaction ID `ai`, the account balance impact `bi` (negative for withdrawal, positive for deposit), and the timestamp `ti` respectively. The transactions are ordered by their timestamps in ascending order. Your task is to determine the final account balance after processing all transactions in the given list. The account starts with a balance of zero. The input consists of: - A single integer `n` (1 ≤ `n` ≤ 10^5) — the number of transactions. - Then `n` lines follow, with each line containing three space-separated integers `ai`, `bi`, and `ti` (1 ≤ `ai` ≤ 10^5, -10^9 ≤ `bi` ≤ 10^9, 1 ≤ `ti` ≤ 10^9). Output the final account balance after processing all transactions. Example: Input: ``` 5 1 100 1 2 -50 2 3 200 3 4 -300 4 5 50 5 ``` Output: ``` 0 ```","solution":"def final_account_balance(n, transactions): Calculate the final account balance after processing all transactions. Params: n: int - Number of transactions transactions: list of tuples - Each transaction represented by (ai, bi, ti) Returns: int - the final account balance balance = 0 for _, bi, _ in transactions: balance += bi return balance"},{"question":"Given a string containing characters from the set \'[\', \']\', \'{\', \'}\', \'(\', and \')\', write a function to determine if the string (input) of brackets is valid. A valid string is defined based on the following criteria: 1. An open bracket must be closed by the same type of bracket. 2. An open bracket must be closed in the correct order. The function should accept a single string as input and return a boolean value (`True` or `False`) indicating whether the string is valid. # Input - A single string containing characters from the set \'[\', \']\', \'{\', \'}\', \'(\', and \')\'. The length of the string will not exceed 10000 characters. # Output - Return `True` if the string of brackets is valid, and `False` otherwise. # Examples Example 1: Input: ``` \\"()\\" ``` Output: ``` True ``` Example 2: Input: ``` \\"()[]{}\\" ``` Output: ``` True ``` Example 3: Input: ``` \\"(]\\" ``` Output: ``` False ``` Example 4: Input: ``` \\"([)]\\" ``` Output: ``` False ``` Example 5: Input: ``` \\"{[]}\\" ``` Output: ``` True ```","solution":"def is_valid_bracket_string(s): stack = [] bracket_pairs = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_pairs.values(): stack.append(char) elif char in bracket_pairs.keys(): if stack == [] or bracket_pairs[char] != stack.pop(): return False else: continue # Ignore all non-bracket characters (if any) return stack == []"},{"question":"Eddie runs a small delivery service in his hometown. He has a certain number of packages, each with a weight. He can load these packages into his delivery van, but the total weight must not exceed the van\'s weight capacity. Eddie wants to maximize the number of packages he can deliver in a single trip to reduce his fuel consumption and time. Given a list of weights of packages and the weight capacity of the vehicle, determine the maximum number of packages that can be delivered in a single trip without exceeding the weight capacity. The first line contains two integers: - n (1 ≤ n ≤ 100) - the number of packages. - W (1 ≤ W ≤ 10^4) - the weight capacity of the delivery van. The next line contains n integers, each representing the weights of the packages (1 ≤ weight ≤ 10^3). Output the maximum number of packages Eddie can load onto the delivery van. # Example: Input: ``` 5 10 2 3 4 5 6 ``` Output: ``` 3 ``` Explanation: Eddie can load packages with weights [2, 3, 4] or [2, 3, 5] which sum up to either 9 or 10 respectively, making the maximum number of packages 3 while staying within the weight capacity.","solution":"def max_packages(n, W, weights): Determine the maximum number of packages that can be loaded without exceeding the van\'s weight capacity. Parameters: n (int): Number of packages W (int): Weight capacity of the van weights (list): List of weights of the packages Returns: int: Maximum number of packages that can be loaded weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break return count"},{"question":"You are given a list of integers and your task is to partition the list into the minimum number of contiguous subarrays such that each subarray forms a non-decreasing sequence. The first line of the input contains one integer n (1 le n le 10^5) — the length of the list. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), which are the elements of the list. Output one integer — the minimum number of contiguous subarrays needed to partition the list such that each subarray is non-decreasing. Example: Input: 6 1 2 3 5 4 6 Output: 2 Explanation: One possible partition is [1, 2, 3, 5] and [4, 6], which are both non-decreasing. This partition uses two subarrays, which is the minimum number.","solution":"def min_partitions(arr): Given a list of integers, partition it into the minimum number of contiguous subarrays where each subarray is non-decreasing. Args: arr: List[int] - List of integers Returns: int - Minimum number of contiguous non-decreasing subarrays. if not arr: return 0 partitions = 1 for i in range(1, len(arr)): if arr[i] < arr[i - 1]: partitions += 1 return partitions"},{"question":"Given an n x n grid, where each cell contains a non-negative integer representing the elevation at that point. You are standing at the top-left corner of the grid (cell (0,0)) and your goal is to reach the bottom-right corner of the grid (cell (n-1,n-1)). You can only move right or down from a cell. At each step, the effort to move to an adjacent cell is defined as the absolute difference between the elevations of the current cell and the cell you are moving to. Write a function to find the minimum effort path from the top-left to the bottom-right corner. Your function should take a 2D list `grid` of integers as input and return a single integer representing the minimum effort required. # Input The input consists of an integer `n` (2 <= n <= 100) followed by `n` lines, each containing `n` non-negative integers representing the grid. # Output A single integer representing the minimum effort required to traverse from the top-left to the bottom-right corner of the grid. # Example Input ``` 3 1 3 2 4 8 2 1 5 3 ``` Output ``` 2 ```","solution":"import heapq def minimum_effort_path(grid): Finds the minimum effort path from the top-left to the bottom-right corner of the grid. :param grid: 2D list representing the elevation grid :return: Integer representing the minimum effort required to traverse the grid n = len(grid) def is_valid(x, y): return 0 <= x < n and 0 <= y < n directions = [(0, 1), (1, 0)] min_heap = [(0, 0, 0)] # (effort, x, y) efforts = [[float(\'inf\')] * n for _ in range(n)] efforts[0][0] = 0 while min_heap: effort, x, y = heapq.heappop(min_heap) if x == n - 1 and y == n - 1: return effort for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): new_effort = max(effort, abs(grid[nx][ny] - grid[x][y])) if new_effort < efforts[nx][ny]: efforts[nx][ny] = new_effort heapq.heappush(min_heap, (new_effort, nx, ny)) return efforts[n - 1][n - 1]"},{"question":"You are given a sequence of positive integers representing the height of a series of buildings in a city from left to right, where each building is of unit width. It begins to rain, and the city\'s drainage system needs to know how much water remains trapped between the buildings after the rain stops. Write a function that calculates the total volume of water (measured in units) that is trapped between the buildings. The input consists of a single line containing n space-separated integers, where the i-th integer represents the height of the i-th building (1 ≤ n ≤ 100, 1 ≤ height of buildings ≤ 100). Print a single integer, the total volume of trapped water. For example, for the input: 4 2 0 3 2 5 The output should be: 9","solution":"def trapped_water(buildings): Calculate the total volume of water trapped between the buildings after the rain stops. :param buildings: List of integers representing the heights of the buildings. :return: Integer representing the total units of trapped water. n = len(buildings) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = buildings[0] for i in range(1, n): left_max[i] = max(left_max[i-1], buildings[i]) right_max[n-1] = buildings[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], buildings[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - buildings[i] return water_trapped"},{"question":"You are given an integer `n`. Your task is to construct an `n x n` matrix that contains all integers from 1 to `n^2` arranged in a special \\"snake-like\\" or \\"zigzag\\" order. In this order, the first row should be filled from left to right, the second row from right to left, the third row from left to right, and so forth. Here’s a more precise description of how to generate the matrix: 1. For odd-indexed rows (1st row, 3rd row, etc., 1-based indexing), fill the row from left to right. 2. For even-indexed rows (2nd row, 4th row, etc., 1-based indexing), fill the row from right to left. # Input - A single integer `n` (1 leq n leq 1000) representing the size of the matrix. # Output - Output an `n x n` matrix with the integers from 1 to `n^2` arranged in the described zigzag order. Each row of the matrix should be printed in a single line, with elements separated by a space. # Example Input ``` 3 ``` Output ``` 1 2 3 6 5 4 7 8 9 ``` Input ``` 4 ``` Output ``` 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13 ``` The provided input and output illustrate the zigzag pattern in which the rows are filled, respectively from left to right and right to left.","solution":"def generate_zigzag_matrix(n): Generates an n x n matrix with integers from 1 to n^2 in a zigzag pattern. matrix = [[0]*n for _ in range(n)] num = 1 for i in range(n): if i % 2 == 0: # Left to right for j in range(n): matrix[i][j] = num num += 1 else: # Right to left for j in range(n-1, -1, -1): matrix[i][j] = num num += 1 return matrix"},{"question":"You are given a robot that starts at position (0, 0) on an infinite 2D grid. The robot can move in 4 directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. You need to determine whether the robot returns to its starting position after completing a given sequence of moves. The first line contains an integer n (1 ≤ n ≤ 10^5), indicating the length of the move sequence. The second line contains a string s of length n, representing the sequence of moves. The output should be \\"YES\\" if the robot returns to the starting position, and \\"NO\\" otherwise. Example: Input: 4 UDLR Output: YES Input: 5 UUDDL Output: NO","solution":"def does_robot_return_to_origin(n, s): Determines if the robot returns to its starting position after the sequence of moves. Parameters: - n : int : the length of the move sequence - s : str : the sequence of moves Returns: - str : \\"YES\\" if the robot returns to the starting position, otherwise \\"NO\\" x, y = 0, 0 # Start at the origin (0, 0) for move in s: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Selena has a string of length n consisting of lowercase English letters. Each day for q days, she performs a string operation involving substring queries and transformations. On the i-th day, she is given three integers: l_i, r_i, and k_i. The operation for that day involves rotating the substring from position l_i to position r_i to the right by k_i positions. Rotating a substring to the right means taking the last k_i characters of the substring and moving them to the beginning, while the rest of the characters are moved to the right. Selena wonders if, after these q operations, the resulting string will be a palindrome. Help her determine whether or not the final string is a palindrome. The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains two integers n and q (1 le n,q le 10^5). The second line of each test case contains a string of length n. Then q lines follow, the i-th line contains three integers l_i, r_i, and k_i (1 le l_i le r_i le n and 0 le k_i le (r_i - l_i + 1)) — the bounds of the substring for the rotation and the number of positions to rotate. It is guaranteed that the sum of n for all test cases does not exceed 10^5, and the sum of q for all test cases does not exceed 10^5. For each test case, print \\"YES\\" if the final string after all operations is a palindrome, and \\"NO\\" otherwise. You can print each letter in any case (upper or lower). **Example**: **Input:** ``` 2 7 2 abcdeed 2 4 1 3 7 2 5 3 axaxa 1 5 3 2 4 1 1 3 1 ``` **Output:** ``` NO YES ``` **Explanation:** For the first test case: - The substring \\"bcd\\" is rotated to \\"dbc\\" which makes the string \\"adbcdeed\\". - The substring \\"bcdeed\\" is rotated to \\"edeedbd\\" which makes the string \\"adededbd\\". The result is not a palindrome. For the second test case: - All rotations do not change the fact the string `axaxa` remains a palindrome after all these rotations. Thus the outputs are \\"NO\\" and \\"YES\\" respectively.","solution":"def is_palindrome(s): return s == s[::-1] def rotate_substring(s, l, r, k): k = k % (r - l + 1) if k != 0: return s[:l] + s[r-k+1:r+1] + s[l:r-k+1] + s[r+1:] return s def process_test_case(n, q, s, queries): for l, r, k in queries: s = rotate_substring(s, l-1, r-1, k) return \\"YES\\" if is_palindrome(s) else \\"NO\\" def grand_function(test_cases): results = [] for n, q, s, queries in test_cases: result = process_test_case(n, q, s, queries) results.append(result) return results"},{"question":"You are given a list of student names and their respective grades, and your task is to organize and output a structured list of the top-performing students in each subject. The first line of input will contain an integer t (1 le t le 100), the number of test cases. Each test case starts with an integer n (1 le n le 100), the number of students. The following n lines each contain a string (the student’s name) and an integer (the grade they received). Your job is to find the students with the highest grade for each subject and output their names and grades, grouped by the grade. If multiple students have the same highest grade, list them all. For each test case: - Print \\"Case #x:\\" where x is the test case number (starting from 1) - For each subject, print the students with the highest grade in descending order. If multiple students have the same grade, output them in lexicographically ascending order of their names. # Input - The first line consists of the number of test cases t. - Each test case starts with the integer n. - The following n lines each contain a string and an integer, representing a student’s name and their grade. # Output For each test case, print the results in the specified format. # Example Input: ``` 2 3 Alice 88 Bob 92 Charlie 92 2 David 85 Eva 91 ``` Output: ``` Case #1: 92: Bob, Charlie 88: Alice Case #2: 91: Eva 85: David ``` Ensure that your implementation adheres to the given format and constraints and that it is efficient enough to handle the input limits comfortably.","solution":"def top_students_per_subject(test_cases): result = [] for idx, case in enumerate(test_cases): student_grades = {} for student, grade in case: if grade in student_grades: student_grades[grade].append(student) else: student_grades[grade] = [student] # Sort grades in descending order and names lexicographically within the same grade sorted_grades = sorted(student_grades.items(), key=lambda x: (-x[0], sorted(x[1]))) result.append(f\\"Case #{idx + 1}:\\") for grade, students in sorted_grades: students.sort() result.append(f\\"{grade}: {\', \'.join(students)}\\") return result"},{"question":"You are given an array of n integers. You can perform the following operation any number of times: select any element from the array and either increase or decrease it by 1. Determine the minimum number of operations required to make all the elements in the array equal. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. Print the minimum number of operations required to make all the elements in the array equal. For example, with the input [1, 2, 3], to make all elements equal to 2, you need: - change 1 to 2 (1 operation) - change 3 to 2 (1 operation) So a total of 2 operations are needed.","solution":"def min_operations_to_make_equal(arr): Given an array of integers, this function returns the minimum number of operations required to make all the elements in the array equal. An operation consists of either increasing or decreasing an element by 1. def operations_to_target(target): return sum(abs(x - target) for x in arr) median = sorted(arr)[len(arr) // 2] return operations_to_target(median)"},{"question":"Given an undirected graph with `n` nodes and `m` edges, and a start node `s`, determine if there exists a cycle that passes through the start node `s`. A cycle is defined as a path that starts and ends at the same node without traversing any edge more than once. The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (0 ≤ m ≤ 10^5), the number of nodes and edges in the graph. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes `u` and `v`. The last line contains an integer `s` (1 ≤ s ≤ n), the start node for the cycle. Output \\"YES\\" if there exists such a cycle that passes through the start node `s`, otherwise output \\"NO\\".","solution":"from collections import defaultdict def has_cycle(n, m, edges, s): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def dfs(current, parent): visited[current] = True for neighbor in graph[current]: if not visited[neighbor]: if dfs(neighbor, current): return True elif neighbor != parent: return True return False return \\"YES\\" if dfs(s, -1) else \\"NO\\""},{"question":"Write a simple shell program that reads a file system structure from the standard input and lists all files in alphabetical order. The input format consists of lines, each containing the relative path of a file or directory. For example: ``` dir1 dir1/file1.txt dir2 dir1/dir3 dir1/dir3/file2.txt ``` Your task is to implement a program that reads such input and prints the list of files in alphabetical order, each on a new line. Directories should not be included in the output. The paths should be printed as they are without any modifications. # Input The input consists of a series of strings, each representing a file or directory path relative to the current directory. Each path is given on a new line. Constraints: - The number of lines will not exceed (10^5). - Each line will have at most 100 characters. - The total input size will not exceed 5 MB. # Output Print the list of file paths in alphabetical order, each on a new line. # Example Input ``` dir1 dir1/file1.txt dir2 dir1/dir3 dir1/dir3/file2.txt ``` Output ``` dir1/dir3/file2.txt dir1/file1.txt ``` # Note Directories should not be included in the output. Only file paths should be listed, and those should be in alphabetical order. Make sure your program is efficient and can handle large input sizes within the provided constraints.","solution":"def list_files_in_alphabetical_order(paths): This function reads a list of file system paths and returns the file paths in alphabetical order, excluding directories. :param paths: List of strings representing file system paths. :return: List of strings representing file paths in alphabetical order. files = [path for path in paths if \'.\' in path.split(\\"/\\")[-1]] files.sort() return files"},{"question":"You are given a string `S` consisting of lowercase English letters. Your task is to determine if it\'s possible to rearrange the characters in `S` such that no two adjacent characters are the same. The function should return \\"YES\\" if such a rearrangement is possible or \\"NO\\" otherwise. # Input - The first line contains an integer `t` (`1 <= t <= 100`) — the number of test cases. - The next `t` lines each contain a single string `S` (`1 <= |S| <= 10^5`). It is guaranteed that the sum of the lengths of `S` across all test cases does not exceed `10^5`. # Output For each test case, output \\"YES\\" if it\'s possible to rearrange the string such that no two adjacent characters are the same, or \\"NO\\" otherwise. # Example Input ``` 3 aab aa abcdef ``` Output ``` YES NO YES ``` # Hint To solve this problem, consider the frequency of each character in the string. If the most frequent character appears more than half of the length of the string plus one, it will be impossible to rearrange the string to meet the condition. Otherwise, it should be possible.","solution":"def can_rearrange_no_adjacent_same(s): from collections import Counter count = Counter(s) most_common = count.most_common(1)[0][1] # Length of the string length = len(s) # If the most frequent character count is more than (length + 1) // 2, # then it\'s not possible to rearrange the string. if most_common > (length + 1) // 2: return \\"NO\\" return \\"YES\\" def solve(test_cases): results = [] for s in test_cases: result = can_rearrange_no_adjacent_same(s) results.append(result) return results"},{"question":"You are working on a system where each user has a unique identifier (UID) and a balance associated with their account. Your task is to re-implement a simple banking system given the following requirements: 1. **Create Account**: Create a new user account with a unique identifier and an initial balance. 2. **Credit Account**: Add a certain amount to a user\'s balance. 3. **Debit Account**: Subtract a certain amount from a user\'s balance, but only if the balance is sufficient to cover the deduction. 4. **Query Balance**: Return the current balance of a user\'s account. # Input The input starts with a line containing an integer n (1 leq n leq 1000), the number of operations. The next n lines contain operations in one of the following formats: - `Create uid initial_balance`: Create a new account with the given `uid` (a non-negative integer) and `initial_balance` (a non-negative integer). - `Credit uid amount`: Credit the account with the given `uid` by `amount`. - `Debit uid amount`: Debit the account with the given `uid` by `amount` if the balance is sufficient. - `Balance uid`: Query the balance of the account with the given `uid`. It is guaranteed that `Create uid` operation will be called only once for any `uid`. # Output For each `Balance uid` operation, output the balance of the account with the specified `uid` on a new line. If an operation attempts to debit an account without sufficient funds, ignore the operation. # Example **Input:** ``` 6 Create 1 100 Credit 1 50 Debit 1 30 Balance 1 Create 2 200 Balance 2 ``` **Output:** ``` 120 200 ``` # Explanation 1. The first operation creates account 1 with balance 100. 2. The second operation credits account 1 with 50, making the balance 150. 3. The third operation debits account 1 by 30, making the balance 120. 4. The fourth operation queries the balance of account 1 and outputs 120. 5. The fifth operation creates account 2 with balance 200. 6. The sixth operation queries the balance of account 2 and outputs 200.","solution":"class BankingSystem: def __init__(self): self.accounts = {} def create_account(self, uid, initial_balance): self.accounts[uid] = initial_balance def credit_account(self, uid, amount): if uid in self.accounts: self.accounts[uid] += amount def debit_account(self, uid, amount): if uid in self.accounts and self.accounts[uid] >= amount: self.accounts[uid] -= amount def query_balance(self, uid): return self.accounts.get(uid, None) def process_operations(n, operations): results = [] bank = BankingSystem() for operation in operations: parts = operation.split() command = parts[0] uid = int(parts[1]) if command == \\"Create\\": initial_balance = int(parts[2]) bank.create_account(uid, initial_balance) elif command == \\"Credit\\": amount = int(parts[2]) bank.credit_account(uid, amount) elif command == \\"Debit\\": amount = int(parts[2]) bank.debit_account(uid, amount) elif command == \\"Balance\\": balance = bank.query_balance(uid) if balance is not None: results.append(str(balance)) return \\"n\\".join(results)"},{"question":"You are given a string s of length n consisting of lowercase English letters. You can perform the following operation any number of times: Choose any non-empty substring of s and move it to the beginning of the string. Determine the minimum number of such operations needed to make the string sorted in alphabetical order. The first line contains an integer t (1 le t le 10^5) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 10^5) — the length of the string. The second line of each test case contains a string s of length n consisting of lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case, print a single integer — the minimum number of operations needed to make the string sorted in alphabetical order. Example: Input: 4 3 cba 4 abcd 5 bcdea 6 fbaced Output: 1 0 1 2 Explanation: In the first test case, you can move the substring \\"cba\\" to the beginning in one operation to make \\"abc\\". In the second test case, the string \\"abcd\\" is already sorted, so no operations are needed. In the third test case, you can move the substring \\"bcde\\" to the beginning in one operation to make \\"abcde\\". In the fourth test case, you can perform the following operations to sort the string: - Move the substring \\"fbac\\" to the beginning to get \\"fbaced\\" -> \\"bacedf\\" - Move the substring \\"e\\" to the beginning to get \\"bacedf\\" -> \\"dfaceb\\"","solution":"def min_operations_to_sort(t, test_cases): results = [] for s in test_cases: n = len(s) sorted_s = \'\'.join(sorted(s)) if s == sorted_s: results.append(0) else: results.append(1) return results # Example usage t = 4 test_cases = [\'cba\', \'abcd\', \'bcdea\', \'fbaced\'] print(min_operations_to_sort(t, test_cases)) # Output: [1, 0, 1, 1]"},{"question":"An amusement park organizer is arranging gifts for the children. Each child will receive a gift with a specific number of candies. The organizer wants to distribute the gifts in such a way that no two children have the same number of candies. However, due to a supply issue, the total number of candies and the number of children are such that it may be challenging to meet this requirement. You are given an array of integers representing the number of candies in each gift. Your task is to determine if it is possible to distribute these gifts such that no two children receive gifts with the same number of candies. The first line contains an integer n (1 ≤ n ≤ 100) — the number of gifts. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100), where ci is the number of candies in the i-th gift. Print \\"YES\\" (without the quotes) if it is possible to distribute the gifts such that no two children receive the same number of candies. Otherwise, print \\"NO\\" (without the quotes). In the first test sample, if the number of candies in the gifts is [1, 2, 3], the output should be \\"YES\\" because each child can receive a unique number of candies. If the number of candies in the gifts is [1, 1, 2], the output should be \\"NO\\" because two children would receive a gift with 1 candy. Example: Input: 3 1 2 3 Output: YES Input: 3 1 1 2 Output: NO","solution":"def can_distribute_gifts(n, candies): Determines if it\'s possible to distribute gifts such that no two children receive the same number of candies. Parameters: n (int): The number of gifts. candies (list of int): List of integers where each integer represents the number of candies in a gift. Returns: str: \'YES\' if it\'s possible to distribute the gifts uniquely, otherwise \'NO\'. candy_set = set(candies) if len(candy_set) == n: return \'YES\' else: return \'NO\'"},{"question":"Consider a company that monitors the performance of its employees using a system that records the number of tasks completed by each employee over a period of time. The company has n employees and wants to determine the maximum number of tasks completed by any single employee within any k consecutive intervals. You are given two integers n and k, where n is the number of employees, and k is the number of consecutive intervals to consider. You are also given an array tasks of size n, where tasks[i] is a list of integers representing the number of tasks completed by the i-th employee in each interval. Your task is to write a function that for each employee returns the maximum number of tasks completed in any k consecutive intervals. Input: - The first line contains the integers n and k (1 ≤ k ≤ number of intervals ≤ 1000). - Each of the next n lines contains a sequence of space-separated integers, where the i-th line represents the number of tasks completed by the i-th employee in each interval. Output: - Output n integers, one for each employee, representing the maximum number of tasks completed in any k consecutive intervals. Example: Input: 3 2 1 4 2 3 2 1 5 6 3 7 4 2 Output: 6 11 11 Explanation: - For the 1st employee, the maximum number of tasks in any 2 consecutive intervals are max(1+4, 4+2, 2+3) = 6. - For the 2nd employee, the maximum number of tasks in any 2 consecutive intervals are max(2+1, 1+5, 5+6) = 11. - For the 3rd employee, the maximum number of tasks in any 2 consecutive intervals are max(3+7, 7+4, 4+2) = 11.","solution":"def max_tasks_in_k_intervals(n, k, tasks): Returns the maximum number of tasks completed by any single employee within any k consecutive intervals. Parameters: n (int): Number of employees k (int): Number of consecutive intervals to consider tasks (list of list of int): List of tasks completed by each employee in each interval Returns: list of int: Maximum number of tasks completed by any single employee within any k consecutive intervals result = [] for employee_tasks in tasks: max_tasks = 0 num_intervals = len(employee_tasks) for i in range(num_intervals - k + 1): current_sum = sum(employee_tasks[i:i+k]) if current_sum > max_tasks: max_tasks = current_sum result.append(max_tasks) return result # Example usage n = 3 k = 2 tasks = [ [1, 4, 2, 3], [2, 1, 5, 6], [3, 7, 4, 2] ] print(max_tasks_in_k_intervals(n, k, tasks)) # Output: [6, 11, 11]"},{"question":"You are the organizer of an annual festival and each year you have a list of entertainment acts to schedule. Each act has a fixed duration in minutes, and you have a number of time slots available, each with a specific start time and end time. Your task is to schedule all the entertainment acts such that no two acts overlap and all acts are fully contained within the time slots provided. If it\'s not possible to schedule all acts given the constraints of the time slots, you should return `Impossible`. You will be given: - An integer `m` representing the number of entertainment acts (1 ≤ m ≤ 100,000). - An integer `n` representing the number of available time slots (1 ≤ n ≤ 100,000). - A list of integers `act_durations` of length `m`, where the ith element represents the duration of the ith act in minutes (1 ≤ act_duration ≤ 1,000). - A list of tuples `slots` of length `n`, where each tuple contains two integers (start_time, end_time) representing the start and end times of a slot in minutes (0 ≤ start_time < end_time ≤ 1,000,000). You need to determine whether it\'s possible to schedule all the acts such that each act fits entirely within a time slot and no two acts overlap within a single slot. If it is possible, print \\"Possible\\". Otherwise, print \\"Impossible\\". **Input** - The first line contains the integer m. - The second line contains the integer n. - The third line contains m integers representing the durations of the acts. - The following n lines each contain two integers representing the start and end times of the time slots. **Output** - Print \\"Possible\\" if you can schedule all the entertainment acts without any overlaps within the given time slots. Otherwise, print \\"Impossible\\". **Example** Input: ``` 3 2 100 200 50 0 300 400 700 ``` Output: ``` Possible ``` Input: ``` 2 3 150 150 0 100 101 201 202 302 ``` Output: ``` Impossible ``` Explanation: - In the first example, the first and third acts can be scheduled in the first time slot (0 to 300), and the second act can be scheduled in the second time slot (400 to 700). - In the second example, none of the time slots are long enough to fit either of the acts, so it is impossible to schedule all the acts.","solution":"def can_schedule_acts(m, n, act_durations, slots): # Sort the act durations in descending order act_durations_sorted = sorted(act_durations, reverse=True) # Sort the slots based on their start time slots_sorted = sorted(slots, key=lambda x: x[0]) # Try to fit each act into a suitable slot for duration in act_durations_sorted: found_slot = False for i in range(len(slots_sorted)): start, end = slots_sorted[i] if end - start >= duration: # If the act fits in this slot, update the slot to remove the used time slots_sorted[i] = (start + duration, end) found_slot = True break if not found_slot: return \\"Impossible\\" return \\"Possible\\""},{"question":"Given an array of integers, you need to determine the length of the longest contiguous subarray that contains only one distinct number. For example, given the array `[4, 4, 4, 2, 2, 3, 3, 3, 3, 3, 1]`, the longest contiguous subarray contains `5` elements (the subarray `[3, 3, 3, 3, 3]`). # Input - The first line contains a single integer `n` (1 ≤ `n` ≤ 10^5) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ `ai` ≤ 10^9) — the elements of the array. # Output - Print a single integer — the length of the longest contiguous subarray that contains only one distinct number. # Example Input ``` 11 4 4 4 2 2 3 3 3 3 3 1 ``` Output ``` 5 ```","solution":"def longest_contiguous_subarray_with_one_distinct_number(arr): Returns the length of the longest contiguous subarray that contains only one distinct number. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length)"},{"question":"Take a sequence of parentheses consisting of opening \'(\' and closing \')\' characters and find the maximum length of a \\"regular\\" parentheses subsequence. A subsequence is defined as a sequence that can be derived by deleting some or no elements of the original sequence while maintaining the relative order of the remaining elements. A \\"regular\\" parentheses subsequence is one in which, for every opening parenthesis, there is a corresponding closing parenthesis that appears after it. The first and only line of input contains a non-empty string s consisting of the characters \'(\' and \')\' only (1 leq |s| leq 100). Output the maximum length of the regular parentheses subsequence that can be derived from the given string. For example: Input: ``` ((()) ``` Output: ``` 4 ``` In the given example, the subsequence \\"()\\" is of length 2, and \\"()\\" derived from the string \\"((())\\" by removing one central \'(\', forms a regular subsequence of length 4. In another example: Input: ``` )((()) ``` Output: ``` 4 ``` Here, the subsequence \\"()\\" is of length 2, and \\"()\\" derived from the string \\")(())\\" by removing one prefix \')\' and one suffix \'(\', forms a regular subsequence of length 4.","solution":"def max_length_regular_parentheses(s): Returns the maximum length of a regular parentheses subsequence from the given string. open_count = 0 close_count = 0 # First pass to count valid opening and closing matches for char in s: if char == \'(\': open_count += 1 elif char == \')\' and open_count > 0: open_count -= 1 close_count += 1 return close_count * 2"},{"question":"You are given a sequence of n positive integers. Your task is to divide the sequence into the minimum number of non-empty subsequences such that each subsequence consists of strictly increasing integers. For example, if you have the sequence [3, 1, 2, 5, 4], you can divide it into three subsequences: [3, 5], [1, 2], and [4]. Write a function that takes the length of the sequence n (1 ≤ n ≤ 1000) and the sequence itself as input, and outputs the minimum number of strictly increasing subsequences. # Input - The first line contains a single integer n — the length of the sequence. - The second line contains n space-separated integers representing the sequence. # Output - Output a single integer — the minimum number of strictly increasing subsequences. # Example Input ``` 5 3 1 2 5 4 ``` Output ``` 3 ``` Input ``` 6 2 1 3 5 4 6 ``` Output ``` 3 ``` # Note In the first example, you can form the subsequences [3, 5], [1, 2], and [4]. There are no fewer than three strictly increasing subsequences possible. In the second example, you can form the subsequences [2, 3, 5, 6], [1], and [4].","solution":"def min_number_of_subsequences(n, sequence): if n == 0: return 0 subsequences_count = 1 last_number = sequence[0] for i in range(1, n): if sequence[i] <= last_number: subsequences_count += 1 last_number = sequence[i] else: last_number = max(last_number, sequence[i]) return subsequences_count"},{"question":"Sam is creating a new text-based adventure game. In his game, there are n rooms connected by m unidirectional paths. Each path connects two rooms and has a difficulty level associated with it. Players can move from one room to another by traversing these paths, but they must accumulate the difficulty levels of the paths they traverse. Sam wants to know the minimum difficulty level required to reach from the first room (room 1) to the last room (room n). If it\'s impossible to reach the last room from the first, return -1. The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 100). The following m lines each contain three space-separated integers u, v, and d (1 ≤ u, v ≤ n and 1 ≤ d ≤ 100), indicating there is a path from room u to room v with a difficulty level of d. Output an integer representing the minimum difficulty level required to reach room n from room 1, or -1 if it\'s not possible. For example, in the first sample, moving from room 1 -> 2 -> 4 -> 5 has a difficulty of 4 + 1 + 2 = 7, which is the minimum required difficulty. Input: 5 6 1 2 4 1 3 2 2 4 1 3 4 7 4 5 2 3 5 10 Output: 7","solution":"import heapq def min_difficulty(n, m, paths): Calculate the minimum difficulty level required to reach from room 1 to room n. Parameters: n (int): Number of rooms. m (int): Number of paths. paths (list of tuples): Each tuple contains three integers (u, v, d) indicating there is a path from room u to room v with a difficulty level of d. Returns: int: Minimum difficulty level required to reach room n from room 1, or -1 if it\'s not possible. graph = {i: [] for i in range(1, n + 1)} for u, v, d in paths: graph[u].append((v, d)) # Use Dijkstra\'s Algorithm difficulty = {i: float(\'inf\') for i in range(1, n + 1)} difficulty[1] = 0 pq = [(0, 1)] # (difficulty, node) while pq: curr_diff, node = heapq.heappop(pq) if node == n: return curr_diff if curr_diff > difficulty[node]: continue for neighbor, weight in graph[node]: new_diff = curr_diff + weight if new_diff < difficulty[neighbor]: difficulty[neighbor] = new_diff heapq.heappush(pq, (new_diff, neighbor)) return -1 if difficulty[n] == float(\'inf\') else difficulty[n] # Example usage: # input: 5 6 # 1 2 4 # 1 3 2 # 2 4 1 # 3 4 7 # 4 5 2 # 3 5 10 # output: 7"},{"question":"You are given a grid of size n times m, where each cell contains either a \'0\' or a \'1\'. Your task is to determine the size of the largest rectangle containing only \'1\'s. Consider the following example: Grid: ``` 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` In this case, the largest rectangle of \'1\'s has a size of 6 (formed by the submatrix from (2, 2) to (3, 4)). Function Signature: ```python def largestRectangle(grid: List[List[int]]) -> int: pass ``` **Input:** - `grid`: A list of lists of integers representing the grid of size n times m with each value being either 0 or 1. - 1 le n, m le 300 **Output:** - Return a single integer representing the size of the largest rectangle containing only \'1\'s. **Example:** Input: ``` grid = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] ``` Output: ``` 6 ``` Explanation: - The largest rectangle of \'1\'s is formed by the submatrix: ``` 1 1 1 1 1 1 ``` Which has a size of 6. Consider edge cases where the grid might be filled with only \'0\'s or only \'1\'s, or where it has varying heights of \'1\'s in different columns. The function should efficiently compute the maximum rectangle area containing only \'1\'s using dynamic programming or other optimal approaches, given the constraints.","solution":"def largestRectangle(grid): if not grid or not grid[0]: return 0 def max_hist_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_area = 0 n = len(grid) m = len(grid[0]) heights = [0] * m for i in range(n): for j in range(m): if grid[i][j] == 0: heights[j] = 0 else: heights[j] += 1 max_area = max(max_area, max_hist_area(heights)) return max_area"},{"question":"Michael has a list of distinct positive integers and wants to perform certain modifications to the list. The list consists of n integers. He can perform m operations on the list, and each operation falls into one of the three following types: 1. Add a value to an element of the list. 2. Remove an element from the list. 3. Check if a value exists in the list within a specified range. Help Michael manage the list and answer all the queries. The first line contains an integer n — the number of elements in the list (1 ≤ n ≤ 10^5). The second line contains n distinct integers — the elements of the list (1 ≤ element ≤ 10^9). The third line contains an integer m — the number of queries (1 ≤ m ≤ 10^5). The next m lines contain the queries. The j-th line first contains an integer tj (1 ≤ tj ≤ 3) — the query type. If tj = 1, it is followed by two integers pj and vj (1 ≤ pj ≤ n, 1 ≤ vj ≤ 1000) which indicates to add vj to the pj-th element of the list (1-based indexing). If tj = 2, it is followed by one integer qj (1 ≤ qj ≤ n) which indicates the removal of the qj-th element from the list (1-based indexing). If tj = 3, it is followed by two integers xj and yj (1 ≤ xj, yj ≤ 10^9) which indicates to check if there is any element in the list between the values xj and yj (inclusive). For each type 3 query, print \\"Yes\\" if there is at least one element within the specified range, otherwise print \\"No\\". Perform the operations and handle queries efficiently to accommodate the constraints. Example input: ``` 5 1 3 5 7 9 4 1 2 500 2 3 3 4 8 3 2 10 ``` Example output: ``` Yes No ```","solution":"from bisect import bisect_left, bisect_right def manage_list(n, elements, m, queries): result = [] elements = sorted(elements) for query in queries: t = query[0] if t == 1: p, v = query[1], query[2] index = bisect_left(elements, elements[p-1]) elements[index] += v # Re-sort the list after addition elements.sort() elif t == 2: q = query[1] index = bisect_left(elements, elements[q-1]) elements.pop(index) elif t == 3: x, y = query[1], query[2] index_left = bisect_left(elements, x) index_right = bisect_right(elements, y) - 1 if index_left <= index_right: result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"Alice has a sequence of integers of length n. She wants to find out the number of ordered pairs (i, j) such that the sum of the elements at those positions is divisible by k. Write a program that determines the number of such pairs (i, j) for given values of n and k. Input: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 50). - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) representing the sequence of integers. Output: - A single integer, the number of ordered pairs (i, j) such that 1 ≤ i < j ≤ n and (ai + aj) % k == 0. Example: Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: The pairs (i, j) are as follows: (1, 2), (1, 5), (2, 4), (3, 5). Therefore, the output is 4.","solution":"def count_divisible_pairs(n, k, arr): Returns the number of ordered pairs (i, j) such that the sum of the elements at those positions is divisible by k. Parameters: n (int): The length of the sequence. k (int): The divisor. arr (list): The sequence of integers. Returns: int: The number of pairs (i, j) where 1 ≤ i < j ≤ n and (arr[i-1] + arr[j-1]) % k == 0. # To keep track of the remainders remainder_count = [0] * k pair_count = 0 for num in arr: remainder = num % k # We find the complementary remainder that pairs with it to make the sum divisible by k complement = (k - remainder) % k # count the number of pairs that this number can form with previously seen numbers pair_count += remainder_count[complement] # Store the current number\'s remainder remainder_count[remainder] += 1 return pair_count"},{"question":"You are given two four-letter DNA sequences composed of the letters \\"A,\\" \\"C,\\" \\"G,\\" and \\"T\\". These sequences are considered to be homologous if they can be made identical by using at most one of the following operations: 1. Replace exactly one nucleotide in the first sequence with a different nucleotide. 2. Delete exactly one nucleotide from the first sequence, allowing the remaining nucleotides to reorder naturally. Your task is to write a function that takes two DNA sequences as input and returns a boolean indicating whether the sequences are homologous or not. Your function should have the following signature: ```python def are_homologous(seq1: str, seq2: str) -> bool: # Your code here ``` # Input - `seq1`: A string of length 4 representing the first DNA sequence. - `seq2`: A string of length 4 representing the second DNA sequence. # Output - Return `True` if the sequences are homologous, otherwise return `False`. # Examples: ```python # Example 1 seq1 = \\"ACGT\\" seq2 = \\"ACGT\\" # Output: False (identical, no modification needed) # Example 2 seq1 = \\"ACGT\\" seq2 = \\"CCGT\\" # Output: True (by replacing \'A\' with \'C\') # Example 3 seq1 = \\"CGTA\\" seq2 = \\"GTA\\" # Output: True (by deleting the first \'C\') ```","solution":"def are_homologous(seq1: str, seq2: str) -> bool: # Identity case: If they are identical, no modification needed, return False if seq1 == seq2: return False # Check if replacing exactly one nucleotide in seq1 can make it identical to seq2 replace_option = sum(1 for a, b in zip(seq1, seq2) if a != b) == 1 # Check if deleting exactly one nucleotide in seq1 can make it identical to seq2 delete_options = [seq1[:i] + seq1[i+1:] for i in range(4)] delete_option = seq2 in delete_options # Return True if either option is valid return replace_option or delete_option"},{"question":"Alice works as a software developer and has recently been tasked with creating a scheduler for her team. The team receives multiple tasks per day, and each task has a specific duration and a deadline by which it should be completed. Alice’s goal is to maximize the number of tasks completed by their respective deadlines. Each task can only be started and completed without interruption once started. You are given an array tasks of n elements where each task[i] is a tuple (duration, deadline), and an integer t representing the total timeline for the day\'s work (0 ≤ t ≤ 10^9). Write a function `maximize_tasks(tasks: List[Tuple[int, int]], t: int) -> int` that calculates the maximum number of tasks that can be completed within the deadlines. Example: ``` Input: tasks = [(2, 5), (1, 3), (3, 7), (4, 9)], t = 10 Output: 3 Explanation: - One possible way to maximize the number of tasks is to choose the tasks with durations 1, 2 and 3. - Task durations of 1, 2, and 3 respectively can be completed within time 10. - Other combinations like choosing duration 4 first would reduce the total number of tasks completed since subsequent tasks would miss their deadlines. ``` Constraints: - Each task\'s duration is a positive integer and the deadline is also a positive integer. - n is the length of the tasks array and n does not exceed 1000. - Ensure optimal efficiency to handle the upper limits of t and n.","solution":"from typing import List, Tuple def maximize_tasks(tasks: List[Tuple[int, int]], t: int) -> int: # Sort tasks by their deadlines tasks_sorted = sorted(tasks, key=lambda x: x[1]) # Initialize variables to track the current time and task count current_time = 0 task_count = 0 for duration, deadline in tasks_sorted: if current_time + duration <= deadline and current_time + duration <= t: current_time += duration task_count += 1 return task_count"},{"question":"Write a function `merge_and_intersect_lists` that takes two lists of integers as input. The function should return a new list that consists of the merging of the two input lists followed by their intersection, maintaining the original order. For example, if the first input list is `[1, 2, 3, 4]` and the second input list is `[3, 4, 5, 6]`, the function should return `[1, 2, 3, 4, 3, 4]`. # Constraints - The lists may contain duplicate values. - The lists may have zero or more elements. - Your solution should have a time complexity of O(n + m), where n and m are the sizes of the two lists. # Function Signature ```python def merge_and_intersect_lists(list1, list2): # Your code here ``` # Example ```python merge_and_intersect_lists([1, 2, 3, 4], [3, 4, 5, 6]) # Output: [1, 2, 3, 4, 3, 4] merge_and_intersect_lists([1, 1, 2], [1, 1, 3]) # Output: [1, 1, 2, 1, 1] merge_and_intersect_lists([], [1, 2, 3]) # Output: [1, 2, 3] merge_and_intersect_lists([1, 2, 3], []) # Output: [1, 2, 3] ```","solution":"def merge_and_intersect_lists(list1, list2): Merges two lists and then appends their intersection. Parameters: list1 (List[int]): The first list of integers. list2 (List[int]): The second list of integers. Returns: List[int]: A new list containing the merged lists followed by their intersection. # Merge the two lists merged_list = list1 + list2 # Find the intersection while maintaining order and allowing duplicates intersection = [] for num in list1: if num in list2: intersection.append(num) list2.remove(num) # Ensure each element is only added once # Combine merged list with intersection result = merged_list + intersection return result"},{"question":"Given an integer array a of length n, find the longest subsequence such that the sum of the elements in the subsequence is positive, with the additional restriction that the elements of the subsequence must be in non-decreasing order. If multiple subsequences have the longest length, return any of them. A subsequence of an array is a sequence that can be derived by deleting some or no elements of the array without changing the order of the remaining elements. # Input: - The first line contains an integer t (1 le t le 10^4) — the number of test cases. The description of the test cases follows. - The first line of each test case contains an integer n (1 le n le 2 cdot 10^5) — the length of the array a. - The second line of each test case contains n integers a_1, a_2, ldots, a_{n} (-10^9 le a_i le 10^9). The sum of n across the test cases doesn\'t exceed 10^6. # Output: For each test case, on the first line print the length of the found subsequence. On the second line print the elements of the subsequence. If no valid subsequence exists, print a single line with the number 0. # Example Input ``` 3 5 -1 2 3 -2 4 4 -1 -2 -3 -4 6 1 -1 2 -2 3 0 ``` Output ``` 3 2 3 4 0 4 1 2 3 0 ``` # Explanation - In the first test case, the longest non-decreasing subsequence with a positive sum is [2, 3, 4]. - In the second test case, no such subsequence exists, so the output is 0. - For the third test case, the selected subsequence is [1, 2, 3, 0] with a total positive sum. Other correct answers may also be possible.","solution":"def find_longest_positive_sum_subsequence(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] # Filter only non-negative numbers and find non-decreasing subsequence with positive sum subseq = [x for x in a if x >= 0] subseq.sort() if sum(subseq) > 0: results.append((len(subseq), subseq)) else: results.append((0,)) return results"},{"question":"Given an array of integers representing the strength of various magical spells, you need to determine the maximum number of spells that can be cast without exceeding a given magical energy limit. Each spell consumes a certain amount of energy and can only be cast if there is sufficient energy available. You are provided with an integer n representing the number of spells, an integer E representing the total magical energy available, and an array c of length n where ci represents the energy consumed by the i-th spell. Write a function, `maxSpells(n, E, c)`, that returns the maximum number of spells that can be cast without exceeding the energy limit. # Input - An integer `n` (1 ≤ n ≤ 100) representing the number of spells. - An integer `E` (1 ≤ E ≤ 104) representing the total magical energy available. - An array `c` of length `n` where `ci` (1 ≤ ci ≤ 300) represents the energy consumed by the i-th spell. # Output - An integer representing the maximum number of spells that can be cast without exceeding the total energy limit. # Example Input: ``` 5 100 10 40 30 50 60 ``` Output: ``` 3 ``` Explanation: The magician can cast spells with energy consumption of 10, 30, and 50 for a total energy consumption of 90, which is within the limit of 100. Casting more than these three spells would exceed the energy limit.","solution":"def maxSpells(n, E, c): Returns the maximum number of spells that can be cast without exceeding the energy limit. Parameters: n (int): Number of spells. E (int): Total magical energy available. c (List[int]): Energy consumed by each spell. Returns: int: Maximum number of spells that can be cast. # Sort the energy costs in ascending order c.sort() # Initialize the energy_sum to track the consumed energy energy_sum = 0 # Initialize the count of spells that can be cast spell_count = 0 # Iterate through the sorted energy costs for energy in c: if energy_sum + energy <= E: energy_sum += energy spell_count += 1 else: break return spell_count"},{"question":"Given a string s containing only lowercase alphabetic characters, you need to find the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within a string. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000). Output should be t lines, each containing the length of the longest substring without repeating characters for the corresponding input string. For example, given the input: ``` 3 abcabcbb bbbbb pwwkew ``` The output should be: ``` 3 1 3 ``` Explanation: - In the first test case, the answer is \\"abc\\", with the length of 3. - In the second test case, the answer is \\"b\\", with the length of 1. - In the third test case, the answer is \\"wke\\", with the length of 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length def longest_substring_lengths(test_cases): Given a list of test case strings, returns a list with the length of the longest substring without repeating characters for each input string. results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"A software company is developing a new feature for their chat application to detect repeated words in a conversation. They need an efficient solution that highlights words that appear consecutively. Specifically, when a word appears multiple times one after the other, their goal is to return that word along with the number of consecutive repetitions. Write a function `detect_consecutive_repeats(text: str) -> List[Tuple[str, int]]` that takes a string `text` as input, consisting of lowercase words separated by spaces. Your function should return a list of tuples, where each tuple contains a string (the repeated word) and an integer (the number of consecutive repetitions of that word). If no words repeat consecutively, return an empty list. Consecutive words should be considered case-insensitively. # Input: - `text` (1 ≤ |text| ≤ 10^6): a string containing words separated by spaces. # Output: - A list of tuples, where each tuple contains: - a string: word that repeats consecutively - an integer: the count of consecutive repetitions # Example: **Example 1:** ```python text = \\"hello hello world world world\\" print(detect_consecutive_repeats(text)) # Output: [(\'hello\', 2), (\'world\', 3)] ``` **Example 2:** ```python text = \\"test test test cases cases\\" print(detect_consecutive_repeats(text)) # Output: [(\'test\', 3), (\'cases\', 2)] ``` **Example 3:** ```python text = \\"example input with no repeats\\" print(detect_consecutive_repeats(text)) # Output: [] ``` In this problem, efficiently identify consecutive repeated words and accurately count their occurrences while handling potentially large input strings. Provide appropriate edge cases to ensure reliability of the solution in different scenarios.","solution":"from typing import List, Tuple def detect_consecutive_repeats(text: str) -> List[Tuple[str, int]]: words = text.lower().split() result = [] i = 0 while i < len(words): count = 1 while i + 1 < len(words) and words[i] == words[i + 1]: count += 1 i += 1 if count > 1: result.append((words[i], count)) i += 1 return result"},{"question":"You are given a string `s` consisting of lowercase English letters and the task is to determine the number of times the substring `\\"abc\\"` appears in `s`. The first line contains an integer `t` (1 le t le 10) — the number of test cases. For each test case, the first line contains an integer `n` (1 le n le 10^5) — the length of the string `s`. The second line contains the string `s` of length `n`. Output `t` integers — for each test case, the number of times the substring `\\"abc\\"` appears in the corresponding string `s`. Example input: ``` 3 5 ababc 6 abcabc 3 abc ``` Example output: ``` 1 2 1 ``` In the first example, the substring `\\"abc\\"` appears once. In the second example, the substring `\\"abc\\"` appears twice. In the third example, the substring `\\"abc\\"` appears once.","solution":"def count_abc_substrings(t, test_cases): Returns a list of integers representing the number of times the substring \\"abc\\" appears in each of the test case strings provided. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains an integer n and a string s of length n Returns: list of int: List containing the count of \\"abc\\" substrings for each test case results = [] for n, s in test_cases: count = 0 for i in range(n - 2): if s[i:i + 3] == \\"abc\\": count += 1 results.append(count) return results"},{"question":"You are working on an autonomous drone project, and you need to program the drone\'s movements. The drone\'s starting position is at (0, 0) on a 2D grid. The drone is provided with a set of movement commands in the form of a string. Each character in the string corresponds to a specific movement: - \'U\' moves the drone up one unit (y + 1), - \'D\' moves the drone down one unit (y - 1), - \'L\' moves the drone left one unit (x - 1), - \'R\' moves the drone right one unit (x + 1). You are given a list of queries in the form of (xi, yi), and you need to determine whether the drone visits each of these positions (xi, yi) at any instance during its movement. Write a function `does_drone_visit(n: int, commands: str, queries: List[Tuple[int, int]]) -> List[bool]` that returns a list of boolean values corresponding to each query indicating whether the drone visits the queried position. **Input:** - `n`: An integer, the number of queries (1 ≤ n ≤ 2 * 10^5). - `commands`: A string of length m (1 ≤ m ≤ 2 * 10^5) that describes the drone\'s movement. - `queries`: A list of n tuples, each containing two integers (xi, yi) (-10^6 ≤ xi, yi ≤ 10^6). **Output:** - A list of n boolean values. **Example:** ``` Input: n = 3 commands = \\"UURDDL\\" queries = [(0, 1), (2, 2), (-1, -1)] Output: [True, False, False] ``` Explanation: - For the first query (0, 1), the drone visits this position after the first \'U\' command. - For the second query (2, 2), the drone never visits this position following the given command string. - For the third query (-1, -1), the drone also never visits this position.","solution":"from typing import List, Tuple def does_drone_visit(n: int, commands: str, queries: List[Tuple[int, int]]) -> List[bool]: # Initialize the starting position x, y = 0, 0 # Track the positions visited by the drone visited_positions = {(x, y)} for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # Keep track of the position after each command visited_positions.add((x, y)) # Check each query against the visited positions result = [] for query in queries: result.append(query in visited_positions) return result"},{"question":"Given a list of stock prices for a company over a period of days, you are to find out the maximum profit that can be achieved by buying and then later selling one share of the stock. - You are allowed to complete at most one transaction, meaning you buy one and sell one share of the stock to make the profit. - You cannot sell a stock before you buy one. Your task is to write a function that takes a list of integers representing the stock prices on different days and outputs the maximum possible profit. # Input - A single line containing space-separated integers where each integer represents the stock price on that day. The length of the list will be at least 1 and not more than 10^5. Each price is a non-negative integer that can be as large as 10^5. # Output - A single integer representing the maximum profit you can achieve from this transaction. If no profit can be achieved, return 0. # Example **Input:** ``` 7 1 5 3 6 4 ``` **Output:** ``` 5 ``` **Explanation:** - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. - Note that buying on day 2 and selling on day 3 is not allowed because you can only buy before you sell. **Input:** ``` 7 6 4 3 1 ``` **Output:** ``` 0 ``` **Explanation:** - In this case, no transaction is done, and the maximum profit is 0.","solution":"def max_profit(stock_prices): Returns the maximum profit that can be achieved from one transaction (buying and then selling one share of the stock). if not stock_prices or len(stock_prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in stock_prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Maximus enjoys solving various numerical puzzles. One day, he came across a problem where he needs to transform a number by performing a series of operations. Given an initial number `x` and a target number `y`, Maximus can perform either of the following two operations any number of times: 1. Subtract 1 from the current number. 2. Multiply the current number by 2. The goal is to determine the minimum number of operations Maximus needs to transform the number `x` into the number `y`. The first line contains two integers `x` and `y` (1 ≤ x, y ≤ 100,000), representing the initial and target numbers respectively. Print a single integer — the minimum number of operations required to transform `x` into `y`. For example: Input: ``` 4 6 ``` Output: ``` 2 ``` Explanation: Maximus can transform 4 into 6 by performing the following operations: 1. Multiply by 2: 4 * 2 = 8 2. Subtract 1: 8 - 1 - 1 = 6","solution":"from collections import deque def min_operations(x, y): Returns the minimum number of operations needed to transform x into y, where the allowed operations are to subtract 1 or multiply by 2. if x >= y: return x - y queue = deque([(x, 0)]) visited = set([x]) while queue: current, steps = queue.popleft() if current == y: return steps # if multiplication is possible and hasn\'t been visited if current * 2 <= y * 2 and current * 2 not in visited: visited.add(current * 2) queue.append((current * 2, steps + 1)) # if subtraction is possible and hasn\'t been visited if current - 1 >= 0 and current - 1 not in visited: visited.add(current - 1) queue.append((current - 1, steps + 1)) return -1 # this will theoretically never be reached with the constraints 1 <= x, y <= 100000"},{"question":"You are given an array of integers a of length n. Your task is to find the smallest subarray that needs to be sorted (in non-decreasing order) so that the entire array becomes sorted in non-decreasing order. More formally, you need to find the smallest indices l and r (1 le l le r le n) such that sorting the subarray a[l], a[l+1], dots, a[r] makes the whole array a sorted in non-decreasing order. Input: - The first line contains one integer n (1 le n le 10^5) — the length of the array. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5) — the elements of the array. Output: - Print two integers l and r — the indices of the left and right borders of the smallest subarray that needs to be sorted. If the array is already sorted, print \\"0 0\\". Example: Input: 6 1 3 5 4 6 7 Output: 3 4 Explanation: By sorting the subarray from index 3 to 4 ([5, 4]), the entire array becomes [1, 3, 4, 5, 6, 7], which is sorted in non-decreasing order.","solution":"def find_smallest_subarray_to_sort(n, a): Returns the smallest indices l and r such that sorting the subarray a[l] to a[r] makes the entire array a sorted in non-decreasing order. # Edge case: If the array length is 1, it is already sorted. if n == 1: return (0, 0) # Identify where the array starts to get unsorted l = 0 while l < n - 1 and a[l] <= a[l + 1]: l += 1 # If the entire array is sorted if l == n - 1: return (0, 0) # Identify where the array starts to get unsorted from the end r = n - 1 while r > 0 and a[r] >= a[r - 1]: r -= 1 # Find the minimum and maximum within the identified subarray subarray_min = min(a[l:r+1]) subarray_max = max(a[l:r+1]) # Extend l to the left as needed while l > 0 and a[l - 1] > subarray_min: l -= 1 # Extend r to the right as needed while r < n - 1 and a[r + 1] < subarray_max: r += 1 return (l + 1, r + 1) # converting zero-indexed to one-indexed # Please note: This function does not handle input/output directly."},{"question":"You are given a string s consisting of lowercase and uppercase letters and a number k. You need to return a string that contains the kth non-repeating character in the string. If there is no such character, return the string \\"NO SUCH CHARACTER\\". The first line contains a string s (1 leq |s| leq 10^6). The second line contains an integer k (1 leq k leq 10^6). Output a single string — the kth non-repeating character in the string s, or \\"NO SUCH CHARACTER\\" if there is no such character. For example: Input: google 2 Output: e Input: swiss 3 Output: NO SUCH CHARACTER","solution":"def kth_non_repeating_char(s, k): Returns the k-th non-repeating character in the string s. If there is no such character, returns \\"NO SUCH CHARACTER\\". from collections import Counter # Count frequency of each character in the string freq = Counter(s) # List to store non-repeating characters non_repeating_chars = [char for char in s if freq[char] == 1] # Check if we have at least k non-repeating characters if k <= len(non_repeating_chars): return non_repeating_chars[k-1] else: return \\"NO SUCH CHARACTER\\""},{"question":"You are given an integer array. Find the sum of its elements. The first line of input contains an integer, n, which indicates the number of elements in the array (1 ≤ n ≤ 100). The second line contains n integers separated by spaces. Each integer is between -1000 and 1000, inclusive. Output a single integer which is the sum of the elements in the array.","solution":"def sum_of_elements(n, arr): Returns the sum of the elements in the array. Parameters: n (int): The number of elements in the array. arr (list of int): The list of integers representing the array. Returns: int: The sum of the elements. return sum(arr)"},{"question":"In a game, you are given a grid with n rows and m columns, where each cell contains a positive integer. You can perform operations to decrease the value of each cell. In one move, you can choose any cell and decrease its value by 1. However, if a cell\'s value is 0, you cannot decrease it anymore. Write a function to find the minimum number of moves required to make all cells in the grid zero. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid, respectively. Following this, there are n rows of m integers, representing the initial values of each cell in the grid. Output a single integer, the minimum number of moves required to make all cells in the grid zero. Example: ``` Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 45 ``` Explanation: In the given grid, the sum of all the values (1+2+3+4+5+6+7+8+9) is 45. Therefore, 45 moves are required to turn all cells to zero.","solution":"def min_moves_to_zero(n, m, grid): Returns the minimum number of moves to make all cells in the grid zero. :param n: int - Number of rows :param m: int - Number of columns :param grid: list of list of int - 2D grid with initial values :return: int - Minimum number of moves required total_moves = 0 for row in grid: total_moves += sum(row) return total_moves"},{"question":"You have been tasked to improve a security system by generating valid passcodes from a given set of letters. The passcodes must adhere to the following rules: 1. The passcode should be exactly `k` characters long. 2. Each character in a passcode must be different. 3. The passcodes must be generated in lexicographically sorted order. You are given a string `s` containing unique lowercase English letters and an integer `k` (1 ≤ k ≤ |s|). Write a program that outputs all possible passcodes of length `k` in lexicographically sorted order. The first line contains a string `s` of unique lowercase English letters. The second line contains an integer `k`. Output all possible passcodes of length `k` in lexicographically sorted order, each passcode in a new line. Example: Input: ``` abc 2 ``` Output: ``` ab ac bc ```","solution":"from itertools import combinations def generate_passcodes(s, k): Generates all possible passcodes of length `k` from string `s`, ensuring each character in the passcode is different and the passcodes are in lexicographically sorted order. s = \'\'.join(sorted(s)) combs = combinations(s, k) passcodes = [\'\'.join(comb) for comb in combs] return passcodes"},{"question":"You are given an array of n integers. The array is initially empty. You are required to perform two types of operations on this array: 1. \\"INSERT x\\": Insert the element \'x\' into the array. 2. \\"DELETE x\\": Delete one occurrence of the element \'x\' from the array. If the element \'x\' does not exist in the array, ignore this operation. After performing a series of such operations, your task is to find out the maximum and minimum elements in the array at the end. The first line of input contains an integer q (1 ≤ q ≤ 10^5) representing the number of operations. Each of the next q lines contains one operation of either type \\"INSERT x\\" or \\"DELETE x\\" (1 ≤ x ≤ 10^6). Output two integers: the maximum and minimum elements in the array after all operations. If the array is empty, instead of the maximum and minimum, output \\"EMPTY\\". Example: Input: 7 INSERT 3 INSERT 5 INSERT 3 DELETE 3 INSERT 2 DELETE 5 DELETE 2 Output: 3 3 Explanation: At the end of all operations, the array contains only one element: [3]. Thus, both the maximum and minimum elements are 3.","solution":"def perform_operations(operations): from collections import defaultdict, Counter arr_counter = Counter() for op in operations: action, value = op.split() value = int(value) if action == \\"INSERT\\": arr_counter[value] += 1 elif action == \\"DELETE\\": if arr_counter[value] > 0: arr_counter[value] -= 1 # Retrieve only elements which have non-zero count arr_elements = [num for num, count in arr_counter.items() if count > 0] if not arr_elements: return \\"EMPTY\\" else: return max(arr_elements), min(arr_elements)"},{"question":"A robot is designed to move in a 2D grid starting at the origin (0, 0). Given a series of commands, each represented by a single character (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right), determine the robot\'s final position on the grid. The robot can move only in the four cardinal directions. The first and only line of input contains a string consisting of the characters \'U\', \'D\', \'L\', \'R\' which represents the movement commands issued sequentially to the robot. In the first and only line of output, print the final coordinates of the robot in the format \\"(x, y)\\" (without the quotes). # Example Input: ``` ULDR ``` Output: ``` (0, 0) ``` Input: ``` UURRDDLL ``` Output: ``` (0, 0) ``` Input: ``` RRRUUU ``` Output: ``` (3, 3) ```","solution":"def final_position(commands): Determines the final position of the robot after executing a series of movement commands. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"A film festival is being held in ByteCity, and each film has a specific start and end time. To maximize viewership, the festival organizers want to schedule the films in such a way that as many films as possible can be viewed without overlapping times. For each film, you are given the start and end times. Your task is to determine the maximum number of non-overlapping films that can be watched. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of films. - Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 1,000,000,000) — the start and end times of the i-th film. Output: - Output a single integer — the maximum number of non-overlapping films that can be watched. Example: Input: 3 1 4 2 5 5 6 Output: 2 Explanation: In this example, two of the maximal sets of non-overlapping films are {1 4, 5 6} and {2 5, 5 6}. So, the maximum number of films that can be watched without overlaps is 2.","solution":"def max_non_overlapping_films(n, films): # Sort films by their end times films.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in films: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Given an array of integers, you need to determine how many contiguous subarrays have strictly increasing elements. A subarray is a contiguous portion of an array. An increasing subarray is one in which every element is strictly greater than the previous element. # Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. # Output Print a single integer — the number of contiguous subarrays with strictly increasing elements. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 10 ``` Input: ``` 4 3 2 1 4 ``` Output: ``` 2 ``` # Explanation In the first example, the contiguous subarrays with strictly increasing elements are [1, 2], [2, 3], [3, 4], [4, 5], [1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 2, 3, 4], [2, 3, 4, 5], and [1, 2, 3, 4, 5]. In the second example, the contiguous subarrays with strictly increasing elements are [1, 4] and [4].","solution":"def count_increasing_subarrays(n, arr): This function counts the number of contiguous subarrays with strictly increasing elements. :param n: int - the size of the array :param arr: List[int] - the elements of the array :return: int - number of increasing subarrays count = 0 length = 1 # at least one element counts as an increasing subarray for i in range(1, n): if arr[i] > arr[i - 1]: length += 1 else: if length > 1: count += (length * (length - 1)) // 2 length = 1 if length > 1: count += (length * (length - 1)) // 2 return count"},{"question":"Polycarp has a sequence of n distinct positive integers. A subsequence of this sequence is defined as any sequence that can be derived by deleting some or potentially all of the elements without changing the order of the remaining elements. Polycarp wants to determine if there exists a subsequence of this sequence such that the sum of its elements is equal to a given target value k. If such a subsequence exists, he would like to know the smallest and the largest subsequence length that can sum to k. If no such subsequence exists, indicate that as well. For example, if n = 5, k = 9, and the sequence is [2, 3, 1, 8, 5]: - There is a subsequence with sum 9: [3, 1, 5] (length 3) - Another is [8, 1] (length 2) So, the smallest length is 2 and the largest is 3. The input format is as follows: - The first line contains an integer t (1 le t le 100) – the number of test cases. - The first line of each test case contains two integers n (1 le n le 100) and k (1 le k le 1000) – the number of elements in the sequence and the target sum. - The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le 1000) – the elements of the sequence. For each test case, output the smallest and the largest subsequence length whose sum is equal to k. If no such subsequence exists, output -1. Example input: ``` 2 5 9 2 3 1 8 5 4 10 2 2 2 2 ``` Example output: ``` 2 3 -1 ```","solution":"def find_subsequence_lengths(t, cases): from itertools import combinations results = [] for case in cases: n, k, sequence = case min_length = float(\'inf\') max_length = -float(\'inf\') found = False for r in range(1, n + 1): for subseq in combinations(sequence, r): if sum(subseq) == k: found = True min_length = min(min_length, len(subseq)) max_length = max(max_length, len(subseq)) if found: results.append(f\\"{min_length} {max_length}\\") else: results.append(\\"-1\\") return results # Example usage: # t = 2 # cases = [ # (5, 9, [2, 3, 1, 8, 5]), # (4, 10, [2, 2, 2, 2]) # ] # print(find_subsequence_lengths(t, cases)) # Output: [\\"2 3\\", \\"-1\\"]"},{"question":"In a remote village, there is a legend about a mysterious tree with magical fruits. Each fruit has a certain amount of magical energy. The villagers have devised a way to determine the total magical energy collected from any segment of fruits using a powerful spell. You are given an array `fruits` where `fruits[i]` is the magical energy of the `i-th` fruit. Additionally, you have a number of queries where each query consists of two indices `left` and `right`. For each query, you are to determine the sum of the magical energy of the fruits between the `left` and `right` indices (inclusive). # Input Format - The first line contains an integer `n` (1 le n le 10^5) — the number of fruits. - The second line contains `n` integers representing the `fruits` array, where each integer `fruits[i]` (-10^9 le fruits[i] le 10^9) is the magical energy of the `i-th` fruit. - The third line contains an integer `q` (1 le q le 10^5) — the number of queries. - The next `q` lines each contain two integers `left` and `right` (1 le left le right le n) — the indices for which you need to calculate the sum of the magical energy. # Output Format - For each query, output the sum of the magical energy in the segment `[left, right]`. # Example Input ``` 5 2 1 -3 4 5 3 1 3 2 5 1 5 ``` Output ``` 0 7 9 ``` # Explanation - For the first query, the sum of the magical energy between indices `1` and `3` is `2 + 1 - 3 = 0`. - For the second query, the sum of the magical energy between indices `2` and `5` is `1 - 3 + 4 + 5 = 7`. - For the third query, the sum of the magical energy between indices `1` and `5` is `2 + 1 - 3 + 4 + 5 = 9`.","solution":"def sum_of_segments(fruits, queries): Returns the sum of magical energy for each query. :param fruits: list of integers, the magical energy of each fruit. :param queries: list of tuples (left, right), the queries for segments. :return: list of integers, the sum of magical energy for each query. # Initialize prefix sums array prefix_sums = [0] * (len(fruits) + 1) # Compute prefix sums for i in range(1, len(fruits) + 1): prefix_sums[i] = prefix_sums[i-1] + fruits[i-1] # Process each query results = [] for left, right in queries: result = prefix_sums[right] - prefix_sums[left-1] results.append(result) return results"},{"question":"A science fair has a competition where each student presents their project to a panel of judges. Each judge gives a score between 0 and 100 to each project. The final score for each project is the average of the scores given by the judges. Your task is to generate a table of final scores that lists each project with its respective average score, sorted by the average score in descending order. If two projects have the same average score, sort them by the project name lexicographically. The input format is as follows: The first line contains an integer n (1 ≤ n ≤ 50) — the number of projects. The second line contains an integer m (1 ≤ m ≤ 10) — the number of judges. The following n lines contain the project information, each starting with the project name (a string of lowercase Latin letters, 1 to 20 characters long), followed by m space-separated integers representing the judges\' scores. Output the sorted table with each project on a new line in the format \\"project_name average_score\\". Round the average score to two decimal places. Example Input: ``` 3 2 biology 90 80 chemistry 85 95 physics 78 82 ``` Example Output: ``` chemistry 90.00 biology 85.00 physics 80.00 ```","solution":"def calculate_final_scores(n, m, project_data): projects = [] for i in range(n): parts = project_data[i].split() project_name = parts[0] scores = list(map(int, parts[1:])) average_score = round(sum(scores) / m, 2) projects.append((project_name, average_score)) projects.sort(key=lambda x: (-x[1], x[0])) result = [] for project in projects: result.append(f\\"{project[0]} {project[1]:.2f}\\") return result"},{"question":"You\'re given a list of \'n\' integers, each representing the calorie count of a different food item. You want to split this list into \'m\' contiguous sublists such that the maximum sum of calories in any of the sublists is minimized. In other words, you want to divide the list into \'m\' contiguous parts where the largest sum among the parts is as small as possible. # Detailed Description: - The first line of input contains two integers n and m (1 ≤ m ≤ n ≤ 10^4), the number of food items and the number of sublists respectively. - The second line contains n integers (each representing the calorie counts of the food items) separated by spaces. The calorie count of each food item is between 1 and 10^6. # Objective: Write a function that takes the list of calorie counts and the number of sublists, and returns the minimized maximum sum of any sublist. # Example: Input: ``` 7 3 4 2 4 7 3 6 1 ``` Output: ``` 10 ``` Explanation: One optimal way to split the list is: - [4, 2, 4], [7], [3, 6, 1] - The largest sum among the sublists is 10. # Constraints: - The algorithm should run efficiently for large inputs, so consider using a binary search approach in combination with a greedy method. # Function Signature: ```python def find_minimized_max_sum(calories: List[int], m: int) -> int: pass ```","solution":"from typing import List def can_split(nums: List[int], m: int, max_sum: int) -> bool: current_sum = 0 sublist_count = 1 for num in nums: if current_sum + num > max_sum: sublist_count += 1 current_sum = num if sublist_count > m: return False else: current_sum += num return True def find_minimized_max_sum(calories: List[int], m: int) -> int: left, right = max(calories), sum(calories) while left < right: mid = (left + right) // 2 if can_split(calories, m, mid): right = mid else: left = mid + 1 return left"},{"question":"A company is conducting interviews for a software engineer position. In one of the technical rounds, candidates are given a task to analyze and manipulate a given integer array of length n. They are asked to find the maximum length of a subarray where the sum of the elements is evenly divisible by k. A subarray is defined as a contiguous portion of an array. Candidates need to consider all possible subarrays and determine the length of the longest one that satisfies the condition. The first line of input contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 1,000). The second line contains n integers, representing the elements of the array. Each element of the array is within the range of -10^9 to 10^9. The output should be a single integer, the maximum length of a subarray where the sum of its elements is evenly divisible by k. For example, given the array [2, -3, 4, 3, -1, 8, -6, 7], if k = 5, the longest subarray with a sum divisible by 5 is [4, 3, -1, 8, -6, 7], which has a length of 6. Note: A subarray with a sum of zero is considered divisible by any integer k. Sample Input 1: 8 5 2 -3 4 3 -1 8 -6 7 Sample Output 1: 6 Sample Input 2: 5 3 1 2 3 4 1 Sample Output 2: 3","solution":"def max_length_subarray_divisible_by_k(n, k, array): remainder_map = {0: -1} max_length = 0 current_sum = 0 for i in range(n): current_sum += array[i] remainder = current_sum % k if remainder < 0: remainder += k if remainder in remainder_map: max_length = max(max_length, i - remainder_map[remainder]) else: remainder_map[remainder] = i return max_length"},{"question":"You are organizing a seminar with multiple sessions, and each session has its own topic. Each topic is represented by an integer from 1 to n. To help attendees decide which sessions to attend, you want to create a schedule that contains all the sessions sorted by their topic numbers. Let\'s describe the problem in detail: You are given a list of session topics. Each session corresponds to an integer from 1 to n, where n is the total number of different topics. Your task is to write a program that sorts the sessions by their topic numbers in ascending order. The input consists of multiple lines: - The first line contains a single integer n (1 ≤ n ≤ 100), representing the number of different topics. - The second line contains an integer m (1 ≤ m ≤ 1000), representing the number of sessions. - The next m lines each contain an integer t_i (1 ≤ t_i ≤ n), representing the topic number of the i-th session. Your program should output m lines, each containing the topic number of a session in ascending order. For example: Input: ``` 3 5 2 1 3 1 2 ``` Output: ``` 1 1 2 2 3 ``` Here, the sessions are sorted first by topic number 1, then 2, and finally 3. Write your solution in your preferred programming language to produce the required sorted list of session topics.","solution":"def sort_sessions(n, m, sessions): Returns the list of sessions sorted by their topic numbers in ascending order. Parameters: n (int): Number of different topics. m (int): Number of sessions. sessions (list of int): List of session topics. Returns: list of int: Sorted list of session topics in ascending order. return sorted(sessions)"},{"question":"You are given a root of an unweighted, undirected tree with n nodes. The nodes are labeled from 1 to n. Your task is to find the longest path in the tree, also known as the diameter of the tree. The tree is provided as an adjacency list, with each line containing two integers u and v (1 leq u, v leq n) which represents an edge between nodes u and v. Input format: - The first line contains an integer n (2 leq n leq 10^5), the number of nodes in the tree. - The next n-1 lines each contain two integers, u and v, representing an edge between nodes u and v. Output format: - Output a single integer, the length of the longest path in the tree. Example: ``` Input: 5 1 2 1 3 2 4 2 5 Output: 3 ``` Explanation: The longest path in the given tree is from node 4 to node 3 or node 5 to node 3 passing through nodes 2 and 1, with a total of 3 edges.","solution":"from collections import defaultdict, deque def tree_diameter(n, edges): Function to compute the diameter of the tree. :param n: Integer, number of nodes in the tree. :param edges: List of tuples, where each tuple represents an edge (u, v). :return: Integer, length of the longest path in the tree. def bfs(start_node): visited = [-1] * (n + 1) queue = deque([(start_node, 0)]) visited[start_node] = 0 farthest_node = start_node max_distance = 0 while queue: node, dist = queue.popleft() for neighbor in adj_list[node]: if visited[neighbor] == -1: visited[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance # Building the adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Perform BFS from an arbitrary node (say 1) to find the farthest node from it farthest_node, _ = bfs(1) # Perform BFS from the farthest node found to determine the diameter _, diameter = bfs(farthest_node) return diameter"},{"question":"You are given an array of integers, where each element represents a unique index in a map. Your task is to determine whether you can traverse the entire array starting from the first index, given that the value at each index represents the maximum number of steps you can move forward in a single move. Write a function `canTraverseArr(arr)` that returns \\"YES\\" if you can reach the last index of the array, otherwise, return \\"NO\\". # Input - An integer array `arr` of length `n` (2 ≤ n ≤ 100), where each element represents the maximum number of steps you can move forward from that index (0 ≤ arr[i] ≤ n). # Output - Return a string \\"YES\\" if it\'s possible to reach or pass the last index of the array starting from the first index, otherwise, return \\"NO\\". # Example ```python canTraverseArr([2, 3, 1, 1, 4]) # Output: \\"YES\\" canTraverseArr([3, 2, 1, 0, 4]) # Output: \\"NO\\" ``` # Explanation In the first example, you can move as follows: - From index 0, move 2 steps to index 2. - From index 2, move 1 step to index 3. - From index 3, move 1 step to index 4 (which is the last index). So, the output is \\"YES\\". In the second example, you can move as follows: - From index 0, move 3 steps to index 3. - From index 3, you can\'t move further as arr[3] is 0. So, the output is \\"NO\\".","solution":"def canTraverseArr(arr): Determines if it\'s possible to reach the last index of the array starting from the first index. n = len(arr) max_reachable = 0 for i in range(n): if i > max_reachable: return \\"NO\\" max_reachable = max(max_reachable, i + arr[i]) return \\"YES\\""},{"question":"In a galaxy far, far away, there is a series of planets connected by a network of tunnels. Each tunnel connects two planets directly and can only be traveled in one direction. The network is represented as a directed acyclic graph (DAG) where each planet is a node, and each tunnel is a directed edge between two nodes. The inhabitants of the galaxy want to send messages between different planets. Each message needs to be sent from a source planet to a destination planet through the tunnels, and each tunnel has a time cost associated with traveling through it. The time for each tunnel is given as an integer value. You are tasked with finding out the shortest time required to send a message from a source planet to a destination planet. If it is not possible to send a message from the source to the destination, return -1. # Input - The first line contains two integers, `n` and `m` (2 ≤ n ≤ 100,000 and 1 ≤ m ≤ 200,000), where `n` is the number of planets and `m` is the number of tunnels. - Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000), representing a tunnel from planet `u` to planet `v` with a travel time of `w`. - The next line contains two integers, `s` and `d` (1 ≤ s, d ≤ n), representing the source planet `s` and the destination planet `d`. # Output Output an integer representing the minimum time required to send a message from the source planet `s` to the destination planet `d`. If there is no valid path, print -1. # Example Input ``` 5 6 1 2 4 1 3 2 2 4 5 3 4 3 4 5 1 2 5 2 1 5 ``` Output ``` 6 ``` Explanation The shortest path from planet 1 to planet 5 is 1 -> 3 -> 4 -> 5 with a total travel time of 2 + 3 + 1 = 6.","solution":"import heapq import sys from collections import defaultdict, deque def shortest_path(n, m, tunnels, s, d): graph = defaultdict(list) for u, v, w in tunnels: graph[u].append((v, w)) # Kahn\'s algorithm to get topological order of the DAG in_degree = {i: 0 for i in range(1, n+1)} for u in graph: for v, _ in graph[u]: in_degree[v] += 1 queue = deque() for i in range(1, n+1): if in_degree[i] == 0: queue.append(i) topological_order = [] while queue: node = queue.popleft() topological_order.append(node) for neighbor, _ in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) dist = {i: sys.maxsize for i in range(1, n+1)} dist[s] = 0 for u in topological_order: if dist[u] != sys.maxsize: # If reachable for v, w in graph[u]: if dist[u] + w < dist[v]: dist[v] = dist[u] + w return dist[d] if dist[d] != sys.maxsize else -1 # Example usage: # n, m = 5, 6 # tunnels = [ # (1, 2, 4), # (1, 3, 2), # (2, 4, 5), # (3, 4, 3), # (4, 5, 1), # (2, 5, 2) # ] # s, d = 1, 5 # print(shortest_path(n, m, tunnels, s, d)) # Should print 6"},{"question":"Mike is organizing a shuffle dance competition where participants will perform in pairs. Each pair of participants will create a unique dance routine, and the judge\'s work is to evaluate all unique pairs\' performances. To keep things interesting and varied, no participant can perform more than once with any other participant, but each participant can join multiple different pairs. Given the list of participants\' names, your task is to calculate the total number of unique pairs that can be formed. Each participant name is a non-empty string containing only uppercase and lowercase English letters, and the list will have at least 2 participants and at most 100 participants. The input consists of multiple strings of participants\' names, each on a separate line. The input will terminate with an empty line. Output the total number of unique pairs of participants that can be formed. # Example **Input:** ``` Alice Bob Carol ``` **Output:** ``` 3 ``` **Explanation:** The unique pairs that can be formed are: (Alice, Bob), (Alice, Carol), and (Bob, Carol). Thus, the answer is 3. **Input:** ``` Mike John Anna Lucy ``` **Output:** ``` 6 ``` **Explanation:** The unique pairs that can be formed are: (Mike, John), (Mike, Anna), (Mike, Lucy), (John, Anna), (John, Lucy), and (Anna, Lucy). Thus, the answer is 6.","solution":"def count_unique_pairs(participants): Given a list of participants\' names, calculate the total number of unique pairs that can be formed. Each participant can join multiple different pairs, but no pair can be repeated. :param participants: List of participants\' names (strings) :return: Total number of unique pairs that can be formed (integer) n = len(participants) # Calculate the number of combinations of 2 out of n participants return (n * (n - 1)) // 2 def process_input(input_lines): Process multiple lines of input representing participants\' names, stopping at an empty line. :param input_lines: List of input strings representing participants\' names :return: Number of unique pairs that can be formed participants = [line.strip() for line in input_lines if line.strip()] return count_unique_pairs(participants)"},{"question":"Given a string of lowercase alphabetical characters, determine the number of unique substrings that can be formed from the string. A substring is defined as a contiguous sequence of characters within a string. # Input The input consists of a single line containing a string s (1 leq |s| leq 10^5), where |s| is the length of the string. # Output Output a single integer, the number of unique substrings of the given string. # Example ``` Input: abcd Output: 10 Explanation: The substrings of \\"abcd\\" are: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\". There are 10 unique substrings. ``` # Note Consider using efficient algorithms like utilizing suffix arrays or hash maps to handle the problem within the constraints.","solution":"def count_unique_substrings(s): Returns the number of unique substrings in the given string. unique_substrings = set() n = len(s) # Generating all possible substrings for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"Imagine you are given a list of segments on a 2D plane. Each segment is represented by two endpoints (x1, y1) and (x2, y2). You are required to find the longest continuous path that can be formed by connecting these segments. A continuous path is one where the endpoint of one segment coincides with the starting point of the next segment. Your task is to write a function that reads the segments and returns the length of the longest continuous path. If no path can be formed, the function should return 0. The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of segments. Each of the following n lines contains four space-separated integers x1, y1, x2, y2 (−1000 ≤ x1, y1, x2, y2 ≤ 1000) — the endpoints of each segment. Output a single integer — the length of the longest continuous path of segments. # Example Input ``` 3 0 0 1 1 1 1 2 2 2 2 3 3 ``` Output ``` 3 ``` Input ``` 4 0 0 1 1 1 2 2 3 2 2 1 1 3 3 4 4 ``` Output ``` 1 ``` In the first sample, the longest path that can be formed is by connecting all three segments (0 0 1 1), (1 1 2 2), (2 2 3 3), resulting in a path length of 3. In the second sample, no segments can be continuously connected so that the path length is greater than 1.","solution":"def longest_continuous_path(segments): from collections import defaultdict n = len(segments) if n == 0: return 0 next_segment = defaultdict(list) for x1, y1, x2, y2 in segments: next_segment[(x2, y2)].append((x1, y1)) longest_path = 1 def dfs(point, length): nonlocal longest_path if point in visited: return visited.add(point) longest_path = max(longest_path, length) for next_point in next_segment[point]: if next_point not in visited: dfs(next_point, length + 1) visited.remove(point) for x1, y1, x2, y2 in segments: visited = set() dfs((x1, y1), 1) return longest_path"},{"question":"In this problem, you will work with an array of integers and perform a specific type of query operation to find the longest increasing subsequence (LIS). Given an array of integers, an increasing subsequence is a subsequence where each element is strictly greater than the preceding one. You are provided with an initial array and a series of queries. Each query contains a pair of indices (l, r) and asks you to determine the length of the longest increasing subsequence within the subarray from index l to r (inclusive). The first line contains an integer n (1 <= n <= 10^5) — the number of elements in the array. The second line contains n integers a_i (1 <= a_i <= 10^9) — the elements of the array. The third line contains an integer q (1 <= q <= 10^5) — the number of queries. The next q lines each contain two integers l and r (1 <= l <= r <= n) — the indices for the current query. For each query, you should output a single integer, which is the length of the longest increasing subsequence within the subarray from index l to r (inclusive). Input: ``` 8 1 3 5 2 8 4 6 7 3 1 5 2 7 3 8 ``` Output: ``` 4 4 5 ``` In the given example: - For the first query (1, 5), the longest increasing subsequence within the subarray [1, 3, 5, 2, 8] is [1, 3, 5, 8], which has length 4. - For the second query (2, 7), the longest increasing subsequence within the subarray [3, 5, 2, 8, 4, 6] is [3, 5, 8], [3, 4, 6], or [3, 5, 6]. Each has length 3. - For the third query (3, 8), the longest increasing subsequence within the subarray [5, 2, 8, 4, 6, 7] is [2, 4, 6, 7], which has length 5.","solution":"from bisect import bisect_left def lengthOfLIS(nums): if not nums: return 0 dp = [] for num in nums: # Find the index where `num` should be placed idx = bisect_left(dp, num) # If `idx` is equals to the length of dp, it means `num` is largest element and should be appended if idx == len(dp): dp.append(num) else: dp[idx] = num return len(dp) def longest_increasing_subsequence(array, queries): results = [] for l, r in queries: subarray = array[l-1:r] lis_length = lengthOfLIS(subarray) results.append(lis_length) return results"},{"question":"You are given a grid with dimensions n times m, where each cell is either empty (denoted by \'.\') or contains an obstacle (denoted by \'#\'). You need to find the number of unique paths from the top-left cell (1,1) to the bottom-right cell (n,m), moving only right or down at each step. However, there\'s a twist: you can turn obstacles into empty cells if needed, and each move (either to a rightward or downward adjacent cell) consumes exactly one unit of energy. Initially, you have k units of energy. The task is to compute the maximum number of unique paths that can be created by utilizing the energy available to convert obstacles to empty cells if required. # Input - The first line of the input contains three integers, n (1 le n le 100), m (1 le m le 100), and k (0 le k le 10^4) — denoting the dimensions of the grid and available energy units, respectively. - The next n lines each contain m characters representing the grid. The characters are either \'.\' (empty) or \'#\' (obstacle). # Output - Print the maximum number of unique paths from the top-left cell to the bottom-right cell using at most k units of energy. # Example Input: ``` 3 3 2 . ..# #.. ``` Output: ``` 2 ``` # Note: In the above example, there are two possible paths: 1. Move right and convert the obstacle at (1,2) and (1,3), then move down (energy used: 2). 2. Move down, then move right, convert the obstacle at (2,3), then move down (energy used: 1) and right again. Use dynamic programming or another appropriate algorithm to solve the problem efficiently within the constraints. Ensure you handle edge cases, such as grids with no obstacles, or situations where energy is insufficient to clear a viable path.","solution":"def max_unique_paths(n, m, k, grid): Returns the maximum number of unique paths from the top-left cell to the bottom-right cell with at most k units of energy to convert obstacles to empty cells. # dp array to store the minimum energy required to reach each cell dp = [[float(\'inf\')] * m for _ in range(n)] dp[0][0] = 0 if grid[0][0] == \'.\' else 1 for i in range(n): for j in range(m): if i == 0 and j == 0: continue min_energy = float(\'inf\') if i > 0: min_energy = min(min_energy, dp[i-1][j]) if j > 0: min_energy = min(min_energy, dp[i][j-1]) if grid[i][j] == \'#\': min_energy += 1 dp[i][j] = min(dp[i][j], min_energy) return 1 if dp[n-1][m-1] <= k else 0"},{"question":"You are given a list of scientific experiment results for different researchers. Each entry in the list follows the format \\"name value\\", where \\"name\\" is the name of the researcher, and \\"value\\" is an integer representing the result of an experiment. The final score for each researcher is determined by summing up all their experiment results. If more than one researcher has the highest final score, the researcher who reached this score with the fewest experiments is determined to be the leader. Initially, each researcher has a score of 0. It is guaranteed that at least one researcher has a non-zero score at the end. The first line contains an integer n (1 ≤ n ≤ 1000), n is the number of experiment results recorded. The next n lines each contain an experiment result in the format \\"name value\\", where \\"name\\" is a string of lower-case Latin letters with a length from 1 to 32, and \\"value\\" is an integer between -1000 and 1000, inclusive. Print the name of the researcher who should be recognized as the leader based on the criteria mentioned. **Example:** ``` Input: 6 alice 10 bob 5 alice -3 bob 7 charlie 10 charlie -2 Output: bob ```","solution":"def find_leader(n, experiments): from collections import defaultdict scores = defaultdict(int) counts = defaultdict(int) for experiment in experiments: name, value = experiment.split() value = int(value) scores[name] += value counts[name] += 1 max_score = max(scores.values()) possible_leaders = [name for name, score in scores.items() if score == max_score] leader = min(possible_leaders, key=lambda name: counts[name]) return leader"},{"question":"Brenda is planning to host a small party at her apartment, and she has a list of N friends she wants to invite. However, space is rather limited, and she can only accommodate friends with the shortest names. Each friend has a unique name consisting of lowercase English letters. Write a program that takes as its input the number of friends N and the list of their names. The program should output the names of the friends whom Brenda should invite such that the total number of letters in the invited friends\' names is minimized while ensuring she invites at most M friends. Input Format: - The first line contains two integers N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ N) — the number of friends and the maximum number of friends Brenda can invite. - The next N lines each contain a single string consisting of lowercase English letters representing the name of a friend. Output Format: - Output the names of the friends Brenda should invite, each on a new line, in lexicographically sorted order. Example: Input: 5 3 alice bob charlie david eve Output: bob eve alice Explanation: Brenda can invite at most 3 friends. The names with the fewest characters are \\"bob\\" (3 letters), \\"eve\\" (3 letters), and \\"alice\\" (5 letters). In lexicographical order, they are \\"bob\\", \\"eve\\", and \\"alice\\".","solution":"def invite_friends(N, M, friends): # Sort friends by the length of their names (primary) and lexicographically (secondary) sorted_friends = sorted(friends, key=lambda x: (len(x), x)) # Select the first M friends invited = sorted_friends[:M] return invited"},{"question":"You\'re given two strings `s` and `t`, where `s` is the source string and `t` is the target string. Your goal is to check whether you can transform the string `s` into the string `t` by performing exactly one of the following operations at least once: 1. Append a single character at any position in `s`. 2. Delete a single character from any position in `s`. 3. Replace a single character at any position in `s` with another character. You can understand these operations as modifying the string in one of these ways: - For example, if `s = \\"abc\\"` and you append the character `\'d\'` at the end, `s` becomes `\\"abcd\\"`. - If you delete the character `\'c\'` from the string `s = \\"abc\\"`, `s` becomes `\\"ab\\"`. - If you replace the character `\'a\'` with `\'x\'` in the string `s = \\"abc\\"`, `s` becomes `\\"xbc\\"`. The first line contains a single integer `q` (1 ≤ q ≤ 10^4) — the number of queries. Each query consists of two lines: - The first line contains the source string `s` (1 ≤ |s| ≤ 1000). - The second line contains the target string `t` (1 ≤ |t| ≤ 1000). For each query, output one line containing \\"YES\\" if it\'s possible to transform `s` to `t` with exactly one operation or \\"NO\\" if it\'s not possible. The first line of the input contains the integer `q`. Each of the next 2 * q lines contains the source string `s` and the target string `t`. # Example **Input** ``` 3 abc abcd abc abd abc ab ``` **Output** ``` YES YES YES ``` # Explanation In the first query, you can transform `s = \\"abc\\"` into `t = \\"abcd\\"` by appending the character `\'d\'` at the end, which is a valid operation. In the second query, you can transform `s = \\"abc\\"` into `t = \\"abd\\"` by replacing the character `\'c\'` with `\'d\'`, which is a valid operation. In the third query, you can transform `s = \\"abc\\"` into `t = \\"ab\\"` by deleting the character `\'c\'`, which is a valid operation.","solution":"def can_transform(s, t): Determines if s can be transformed into t by performing exactly one of three operations: - Append a single character - Delete a single character - Replace a single character Returns \\"YES\\" if possible, otherwise \\"NO\\". len_s = len(s) len_t = len(t) # Case 1: Length difference is 1 (append or delete) if abs(len_s - len_t) == 1: return \\"YES\\" # Case 2: Lengths are the same (replace) if len_s == len_t: mismatch_count = 0 for i in range(len_s): if s[i] != t[i]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" if mismatch_count == 1: return \\"YES\\" # If none of the conditions met, return \\"NO\\" return \\"NO\\""},{"question":"You are given a board game with a rectangular grid of size m × n. Each cell in the grid can either be empty (represented by 0) or contain an obstacle (represented by 1). You are given the following task: Determine the minimum number of moves required to traverse from the top-left corner of the board (cell (1, 1)) to the bottom-right corner (cell (m, n)). You can move to an adjacent cell in the grid, either in four possible directions: up, down, left, or right. However, you cannot move onto cells containing obstacles. If there is no valid path to reach the bottom-right corner, return -1. # Input Specification - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. - The following m lines each contain n integers (0 or 1) representing the grid. # Output Specification Print one integer — the minimum number of moves required to reach the bottom-right corner, or -1 if there is no valid path. # Example Input 3 3 0 0 1 0 1 0 0 0 0 Output 4 Explanation One of the possible valid paths is: (1,1) → (2,1) → (3,1) → (3,2) → (3,3), which requires 4 moves.","solution":"from collections import deque def min_moves_to_reach_end(m, n, grid): Function to determine the minimum number of moves required to traverse from the top-left corner to the bottom-right corner of the m x n grid. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Down, Up, Right, Left queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (m-1, n-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Function to read input and process the grid def process_input_and_find_min_moves(inputs): lines = inputs.strip().split(\\"n\\") m, n = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:m+1]] return min_moves_to_reach_end(m, n, grid)"},{"question":"A company wants to analyze the performance of its employees based on certain metrics. They have three metrics for each employee – Speed (S), Accuracy (A), and Efficiency (E). The company decides to rank employees based on these metrics using the following rules: 1. The employee with the highest Speed (S) is ranked first. If multiple employees have the same Speed, the one with the highest Accuracy (A) among them is ranked higher. 2. If there is still a tie (i.e. employees have the same Speed and Accuracy), the employee with the highest Efficiency (E) among them is ranked higher. You are given a list of employees, where each employee is represented by their three metrics (S, A, E). Your task is to sort the list of employees based on the rules stated above and return the sorted list. Input: - The first line contains an integer n (1 ≤ n ≤ 105) – the number of employees. - The next n lines each contain three integers Si, Ai, and Ei (1 ≤ Si, Ai, Ei ≤ 109) – the Speed, Accuracy, and Efficiency of each employee. Output: - Output n lines, each containing three integers representing the Speed, Accuracy, and Efficiency of the employees sorted based on the rules mentioned above. Example: Input: 5 5 3 2 3 6 4 5 7 1 5 7 9 1 2 3 Output: 5 7 9 5 7 1 5 3 2 3 6 4 1 2 3 Explanation: - Employee 4 (5, 7, 9) and Employee 3 (5, 7, 1) have the highest Speed (5) and Accuracy (7). Since Employee 4 has higher Efficiency (9) than Employee 3, Employee 4 is ranked higher. - Employee 1 comes after Employee 4 and Employee 3 as the Speed of Employee 1 is also 5 but has lower Accuracy (3) compared to Accuracy of 7 for both Employee 4 and Employee 3. - Employee 2 (3, 6, 4) is ranked after Employee 1. - Employee 5 (1, 2, 3) comes last as the Speed of Employee 5 is the lowest (1).","solution":"def sort_employees(employees): Sorts the list of employees based on the given ranking rules. Parameters: employees (List[Tuple[int, int, int]]): A list of tuples where each tuple contains the Speed, Accuracy, and Efficiency of an employee. Returns: List[Tuple[int, int, int]]: A sorted list of employees. # Sort the employees first by Speed (S), then by Accuracy (A), then by Efficiency (E) sorted_employees = sorted(employees, key=lambda x: (-x[0], -x[1], -x[2])) return sorted_employees # Example usage: # employees = [(5, 3, 2), (3, 6, 4), (5, 7, 1), (5, 7, 9), (1, 2, 3)] # sorted_employees = sort_employees(employees) # for employee in sorted_employees: # print(employee)"},{"question":"You are given a list of integers and a multiplicative factor k. For each integer in the list, if the integer can be factored into the product of k and any other integer, it is added to a result list. The task is to print the sum of elements in the result list for each query. The first line of the input contains one integer q (1 ≤ q ≤ 1000) — the number of queries. The following q lines contain queries, one per line. Each query consists of an integer k (1 ≤ k ≤ 10^6) followed by a list of integers separated by spaces. The first integer in the list represents the number of elements n in the list and is followed by n integers (1 ≤ each number ≤ 10^6). For each query, print the sum of elements in the result list. If no integers can be factored into the product of k, the sum should be 0. Example: Input: 2 3 5 6 9 15 2 8 16 Output: 30 24","solution":"def sum_of_multiples(q, queries): Returns the sum of elements that are multiples of k for each query. Parameters: q (int): Number of queries. queries (list of lists): Each list contains an integer k followed by n and n integers. Returns: list of int: Sum of multiples of k for each query. results = [] for query in queries: k = query[0] numbers = query[2:] # Skip the k and the number of elements n sum_result = 0 for number in numbers: if number % k == 0: sum_result += number results.append(sum_result) return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to reorganize the string such that no two adjacent characters are the same. If it\'s not possible to reorganize the string in this way, return an empty string. # Input The input contains a single string `s` which has a length between 1 and 10^5 and consists of only lowercase English letters. # Output Return a reorganized string such that no two adjacent characters are the same. If it\'s not possible to reorganize the string, return an empty string. # Example Example 1 Input: ``` aab ``` Output: ``` aba ``` Example 2 Input: ``` aaab ``` Output: ``` \\"\\" ``` Example 3 Input: ``` aabbcc ``` Output: ``` abcabc ``` # Note In the first example, it is possible to rearrange the string so that no two adjacent characters are the same. In the second example, it is not possible to rearrange the string so that no two adjacent characters are the same. In the third example, one possible reorganization of the string could be `abcabc`, but there are other valid solutions like `acbabc` or `bacbac`.","solution":"from collections import Counter import heapq def reorganize_string(s): Reorganize a string such that no two adjacent characters are the same. :param s: Input string :type s: str :return: Reorganized string or empty string if not possible :rtype: str count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"You are given an array of integers. Your task is to find the smallest positive integer that is missing from the array. The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000) — the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (-10^6 le a_i le 10^6). For each test case, output the smallest positive integer that is missing from the array. # Example Input: 3 5 1 2 3 4 5 5 1 2 0 -1 -2 5 -1 -2 -3 1 2 Output: 6 3 3 In the first test case, the array contains all integers from 1 to 5, so the answer is 6. In the second test case, the array is missing the integer 3. In the third test case, the array is missing the integer 3 since it only contains 1 and 2 as positive integers.","solution":"def find_smallest_missing_positive(numbers): Returns the smallest positive integer missing from the numbers list. numbers_set = set(numbers) smallest_missing = 1 while smallest_missing in numbers_set: smallest_missing += 1 return smallest_missing def process_test_cases(test_cases): Processes the list of test cases and returns a list of results for each test case. results = [] for n, array in test_cases: results.append(find_smallest_missing_positive(array)) return results"},{"question":"You are given a list of `n` integers. Your task is to find and print all pairs of integers in the list whose sum is equal to zero. Each pair you print should be unique, meaning that you should not print both `(a, b)` and `(b, a)` if they represent the same pair, nor should you print the same pair more than once. # Input The input consists of: 1. An integer `n` (1 leq n leq 10^4) — the number of integers in the list. 2. A sequence of `n` integers (−10^5 leq text{integer} leq 10^5). # Output Print all unique pairs of integers from the list that sum to zero. Each pair should be printed on a new line and the integers should be in sorted order `(a, -a)` where `a < 0`. # Example Input ``` 6 -1 2 -2 1 0 -2 ``` Output ``` -2 2 -1 1 ``` # Note In the given example, there are six integers in the list. The pairs (-2, 2) and (-1, 1) sum to zero. Note that (-2, 2) and (2, -2) are considered the same and should only be printed once as (-2, 2). Likewise, (1, -1) should not be printed as it is the same as (-1, 1) which is already printed.","solution":"def find_zero_sum_pairs(n, arr): Finds all unique pairs of integers in the list that sum up to zero. Each pair is printed in sorted order (a, -a) where a < 0. arr_set = set(arr) output_pairs = set() for num in arr: if -num in arr_set and num < 0: output_pairs.add((num, -num)) for pair in sorted(output_pairs): print(pair[0], pair[1]) # Example usage: # n = 6 # arr = [-1, 2, -2, 1, 0, -2] # find_zero_sum_pairs(n, arr)"},{"question":"You are given a string `s` consisting of lowercase letters. Your task is to determine if it is possible to rearrange the characters of `s` such that no two adjacent characters are the same. You have to answer `t` independent test cases. The first line of the input contains one integer `t` (1 <= t <= 100) — the number of test cases. Next `2t` lines describe test cases. The first line of each test case contains one integer `n` (1 <= n <= 5000) — the length of the string `s`. The second line of each test case contains the string `s` of length `n`. For each test case, print the answer — \\"YES\\" (without quotes) if it is possible to rearrange the characters of `s` such that no two adjacent characters are the same, and \\"NO\\" otherwise. # Example: **Input:** ``` 3 7 aabbccc 6 abcdef 10 aabbccdde ``` **Output:** ``` YES YES YES ``` # Explanation: - For the first test case, a possible rearrangement is `cbacabc` where no two adjacent characters are the same. - For the second test case, the string `abcdef` already has no two adjacent characters the same. - For the third test case, a possible rearrangement is `abcdedabec`.","solution":"from collections import Counter def can_rearrange_no_adjacent(s): Determine if it\'s possible to rearrange the string such that no two adjacent characters are the same. n = len(s) frequency = Counter(s) max_freq = max(frequency.values()) # Check if the max frequency is more than half the length of the string (rounded up) if max_freq > (n + 1) // 2: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i*2] s = test_cases[i*2 + 1] results.append(can_rearrange_no_adjacent(s)) return results"},{"question":"Bob is planning to climb stairs, and he has two ways to climb: 1. Climb one step at a time. 2. Climb two steps at a time. Given the number of stairs `n`, determine the number of distinct ways Bob can reach the top. Write a function `countWays(n)` that takes in an integer `n` (1 ≤ n ≤ 45) and returns the number of distinct ways to climb to the top. # Input: - An integer `n` (1 ≤ n ≤ 45) representing the number of stairs. # Output: - An integer representing the number of distinct ways to climb `n` stairs. # Examples: Example 1: Input: ``` 2 ``` Output: ``` 2 ``` Explanation: Bob can reach the top by either climbing two 1-steps or one 2-step. Example 2: Input: ``` 3 ``` Output: ``` 3 ``` Explanation: Bob can reach the top by either climbing three 1-steps, or one 1-step followed by one 2-step, or one 2-step followed by one 1-step. # Solution Approach: The problem can be solved using dynamic programming or by recognizing it as a variation of the Fibonacci sequence where `countWays(n) = countWays(n-1) + countWays(n-2)`. Implement the function `countWays(n)` to compute the result using an iterative approach.","solution":"def countWays(n): Returns the number of distinct ways to climb n stairs. if n <= 2: return n # Base cases prev2, prev1 = 1, 2 # Compute the number of ways iteratively for i in range(3, n + 1): current = prev1 + prev2 prev2 = prev1 prev1 = current return prev1"},{"question":"You are given two arrays of integers, `houses` and `heaters`, which describe locations of houses and heaters on a horizontal line, respectively. * The array `houses` contains the positions of the houses. * The array `heaters` contains the positions of the heaters. Write a function that finds the minimum radius of heaters such that all houses can be heated. Every house can be heated if there is a heater at position `h` within distance `r` from the house, i.e., `|h(i) - house(j)| <= r` where `h(i)` is the position of the i-th heater and `house(j)` is the position of the j-th house. You need to minimize the radius `r` to cover all houses using the heaters. Input: - `houses`: an array of integers representing the positions of the houses (1 ≤ len(houses) ≤ 10^5, 1 ≤ houses[i] ≤ 10^9). - `heaters`: an array of integers representing the positions of the heaters (1 ≤ len(heaters) ≤ 10^5, 1 ≤ heaters[i] ≤ 10^9). Output: - An integer representing the minimum radius required to ensure all houses are within the heating radius of at least one heater. Examples: ```python assert find_min_radius([1, 2, 3], [2]) == 1 assert find_min_radius([1, 2, 3, 4], [1, 4]) == 1 assert find_min_radius([1, 5], [2]) == 3 ``` Note: * The radius should be as small as possible while ensuring that every house has at least one heater within `r` distance. * A house located exactly at the position of a heater has a distance of `0` to that heater.","solution":"def find_min_radius(houses, heaters): Finds the minimum radius of heaters such that all houses can be heated. houses.sort() heaters.sort() min_radius = 0 for house in houses: # Find the nearest heater to the current house closest_heater_distance = float(\'inf\') left, right = 0, len(heaters) - 1 while left <= right: mid = (left + right) // 2 if heaters[mid] == house: closest_heater_distance = 0 break elif heaters[mid] < house: left = mid + 1 else: right = mid - 1 if left < len(heaters): closest_heater_distance = min(closest_heater_distance, abs(heaters[left] - house)) if right >= 0: closest_heater_distance = min(closest_heater_distance, abs(heaters[right] - house)) min_radius = max(min_radius, closest_heater_distance) return min_radius"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to find the largest value in each row of the binary tree. Write a function `largestValuesInEachRow` that takes the root of the binary tree as input and returns an array where each element is the largest value in its respective row. # Function Signature ```python def largestValuesInEachRow(root: TreeNode) -> List[int]: ``` # Input - **root** (TreeNode): The root of the binary tree. If the tree is empty, root is `None`. # Output - **List[int]**: An array containing the largest value in each row of the binary tree. # Constraints - The number of nodes in the binary tree is in the range `[0, 10^4]`. - The value of each node is in the range `[-10^5, 10^5]`. # Example **Example 1:** Input: ``` 1 / 3 2 / 5 3 9 ``` Output: `[1, 3, 9]` Explanation: - In the first row, there is only one node with value `1`. - In the second row, the largest value among `3` and `2` is `3`. - In the third row, the largest value among `5`, `3`, and `9` is `9`. **Example 2:** Input: ``` 4 / 9 7 2 ``` Output: `[4, 9, 2]` Explanation: - In the first row, there is only one node with value `4`. - In the second row, the largest value among `9` and `7` is `9`. - In the third row, the largest value is `2`. # Notes - An auxiliary data structure like a queue may be helpful for a level-order traversal. - You might want to keep track of levels during the traversal to compare node values at each level.","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, value: int = 0, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.value = value self.left = left self.right = right def largestValuesInEachRow(root: Optional[TreeNode]) -> List[int]: if not root: return [] queue = deque([(root, 0)]) max_values = [] while queue: node, level = queue.popleft() if level == len(max_values): max_values.append(node.value) else: max_values[level] = max(max_values[level], node.value) if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return max_values"},{"question":"Given a list of integers, determine whether they can be rearranged to form a valid arithmetic progression (AP). An arithmetic progression is defined as a sequence of numbers in which the difference between any two consecutive terms is constant. Your task is to write a program that will check if the given list can be permuted to form such a sequence. If it\'s possible, return \\"Yes\\", otherwise, return \\"No\\". # Input: The first line contains an integer n (2 ≤ n ≤ 10^5), representing the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the list. # Output: Output a single line containing \\"Yes\\" if the list can be rearranged to form an arithmetic progression, otherwise output \\"No\\". # Example: Input: ``` 5 3 6 9 12 15 ``` Output: ``` Yes ``` Input: ``` 4 1 3 4 7 ``` Output: ``` No ``` # Explanation: In the first example, the list can be rearranged as [3, 6, 9, 12, 15] which forms an arithmetic progression with a common difference of 3. In the second example, no permutation of [1, 3, 4, 7] can form an arithmetic progression.","solution":"def can_form_arithmetic_progression(n, arr): Checks if the list can be rearranged to form an arithmetic progression. Parameters: n (int): Number of elements in the list arr (list of int): The list of integers Returns: str: \\"Yes\\" if the list can be rearranged to form an arithmetic progression, otherwise \\"No\\" if n < 2: return \\"No\\" arr.sort() d = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i-1] != d: return \\"No\\" return \\"Yes\\""},{"question":"You are given a square grid of size n x n consisting of lowercase English letters. Your task is to find the largest square sub-grid such that all the characters at its border are the same. # Input The first line contains an integer n (1 ≤ n ≤ 1000) – the size of the grid. The next n lines contain n lowercase English letters each, representing the grid. # Output Print an integer k - the size of the largest square sub-grid where all characters at its border are the same. # Example Input ``` 5 abcde fghij klmno pqrst uvwxy ``` Output ``` 1 ``` Input ``` 4 aaaa abba abba aaaa ``` Output ``` 4 ``` Explanation In the first example, the only possible square sub-grids that satisfy the conditions are of size 1, so the answer is 1. In the second example, the entire grid itself satisfies the condition, hence the answer is 4.","solution":"def largest_square_border(grid): def is_valid_square(x, y, length): char = grid[x][y] for i in range(length): if grid[x + i][y] != char or grid[x + i][y + length - 1] != char: return False if grid[x][y + i] != char or grid[x + length - 1][y + i] != char: return False return True n = len(grid) max_len = 1 for length in range(1, n + 1): for i in range(n - length + 1): for j in range(n - length + 1): if is_valid_square(i, j, length): max_len = max(max_len, length) return max_len"},{"question":"You are given a string consisting of lowercase alphabet characters. Your task is to create a function that calculates the beauty of the string. The beauty of a string is defined as the absolute difference between the smallest character frequency and the largest character frequency. Write a function `beauty_of_string(s: str) -> int` that takes a string `s` as input and returns an integer representing the beauty of the string. # Input: - A single string `s` (1 ≤ |s| ≤ 10^5). The string only contains lowercase English letters. # Output: - A single integer representing the beauty of the string. # Example: ``` Input: \\"aabccc\\" Output: 2 ``` # Explanation: The frequency of each character is: a: 2, b: 1, c: 3. The beauty of the string is |3 - 1| = 2. # Note: - You may assume that the input string will always have at least one character. - If the string contains only one distinct character, the beauty is 0.","solution":"def beauty_of_string(s: str) -> int: Calculates the beauty of the string defined as the absolute difference between the smallest character frequency and the largest character frequency. from collections import Counter char_freq = Counter(s).values() max_freq = max(char_freq) min_freq = min(char_freq) return max_freq - min_freq"},{"question":"A city has a system of one-way roads. There are `n` intersections in the city, labeled from `1` to `n`. Marek is a traffic engineer, and his job is to ensure that it is possible to travel from the city center (intersection `1`) to all other intersections through these one-way roads, either directly or indirectly. Marek introduces a rule that each intersection must provide a direct route to at least one other intersection, excluding itself and including the city center. He wants to know if he can rearrange all the roads such that you can travel from city center to any other intersection, ensuring no intersection leads to itself and obeys his rules. Given a direct route availability matrix `M` of size `n x n`, Marek needs you to determine if it\'s possible to rearrange the roads such that the city center is accessible from any intersection following the new rule. Write a function `bool isPossibleRoadSystem(int n, vector<vector<int>>& M)` where: - `n` is an integer representing the number of intersections. - `M` is a 2D array of integers where `M[i][j]` is `1` if there is a road from intersection `i` to intersection `j`, and `0` otherwise (`0 <= i, j < n`). Your function should return `true` if it is possible to rearrange the roads as Marek described, and `false` otherwise. # Constraints - `2 <= n <= 14` - Each row of `M` has at least one `1`. - `M[i][j]` is either `0` or `1`. # Example ```python assert isPossibleRoadSystem(4, [ [0, 1, 1, 0], [1, 0, 1, 0], [1, 1, 0, 1], [0, 1, 1, 0] ]) == True assert isPossibleRoadSystem(3, [ [0, 1, 0], [0, 0, 1], [0, 0, 0] ]) == False ``` # Explanation In the first example: - From intersection `1`, there are direct routes to intersections `2` and `3`. - From intersection `2`, there are direct routes to intersections `1`, and `3`. - From intersection `3`, there are direct routes to all intersections including `1`, `2`, and `4`. - From intersection `4`, there are direct routes to intersections `2` and `3`. Thus, the rearrangement of roads is possible to ensure visibility and reaching any intersection from the city center. In the second example: - From intersection `1`, there is a direct route to intersection `2`. - From intersection `2`, there is a direct route to intersection `3`. - Intersection `3` does not have any outgoing route as described by Marek (excluding self-loops). Hence, it is not possible to rearrange the roads as Marek described.","solution":"def isPossibleRoadSystem(n, M): Determines if it\'s possible to rearrange the roads such that the city center (intersection 1) is accessible from any intersection following the specified rules. Args: - n (int): Number of intersections. - M (list of list of int): Direct route availability matrix. Returns: - bool: True if rearrangement is possible; False otherwise. from collections import deque # Check if there\'s a path from the city center to all intersections using BFS def can_reach_all_from(city_center): visited = [False] * n queue = deque([city_center]) visited[city_center] = True while queue: current = queue.popleft() for neighbor in range(n): if M[current][neighbor] == 1 and not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return all(visited) # Check if each intersection provides a direct route to at least one other intersection, excluding itself for i in range(n): connected = False for j in range(n): if i != j and M[i][j] == 1: connected = True break if not connected: return False return can_reach_all_from(0)"},{"question":"Your friend is preparing for a special treasure hunt game where the clues to find the treasure are given in the form of numeric puzzles. Each clue represents a number formed by combining the squares of digits from a given number. For example, if the input number is `34`, the resulting number would be `3^2 + 4^2 = 9 + 16 = 25`. Your task is to write a program that calculates and returns the next clue number for an input number. The next clue number is formed by summing the squares of the digits of the given number. The input to your program will be an integer `n` (1 ≤ n ≤ 10^9). Your program should output the next clue number. # Example ``` Input 34 Output 25 ``` ``` Input 123 Output 14 Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 ``` # Constraints - The input number `n` is a positive integer with at most 9 digits. - Your solution should be efficient and handle large input values up to 10^9 in a reasonable time.","solution":"def next_clue_number(n): Calculates and returns the next clue number formed by summing the squares of the digits of the given number. Args: n (int): the input number (1 ≤ n ≤ 10^9). Returns: int: the next clue number. return sum(int(digit) ** 2 for digit in str(n))"},{"question":"A group of archaeologists has discovered a series of ancient tablets, each engraved with a sequence of symbols. They believe these symbols hold the key to a long-lost civilization\'s language. They\'ve assigned you the task of helping decipher these symbols by identifying the most frequently occurring symbol in each sequence. Given a list of sequences, each composed of symbols represented as lowercase alphabets, you need to write a program that determines the most frequently occurring symbol in each sequence. If there are multiple symbols with the same highest frequency, choose the lexicographically smallest one. The first line of the input contains a single integer n (1 ≤ n ≤ 100) - the number of sequences. Each of the next n lines contains a string of lowercase alphabets (1 ≤ length of each string ≤ 10^5) representing a sequence of symbols on a tablet. For each sequence, output the most frequently occurring symbol. If multiple symbols have the same frequency, output the lexicographically smallest one. # Example Input: ``` 3 azzbzza abacabad xyzxyzx ``` Output: ``` a a x ``` # Explanation: - For the first sequence, symbols \'a\' and \'z\' appear with the highest frequency (3 times each). Since \'a\' is lexicographically smallest, it is the output. - For the second sequence, symbol \'a\' appears 4 times, which is the highest frequency. - For the third sequence, symbol \'x\' appears 3 times, which is the highest frequency. Craft a solution that efficiently handles the input constraints and provides the correct outputs.","solution":"from collections import Counter def most_frequent_symbol(n, sequences): Determines the most frequently occurring symbol in each sequence. If there are multiple symbols with the same highest frequency, the lexicographically smallest one is chosen. result = [] for sequence in sequences: # Count the frequency of each symbol count = Counter(sequence) # Determine the symbol with the highest frequency most_frequent = min(sorted(count.items(), key=lambda x: (-x[1], x[0]))) result.append(most_frequent[0]) return result"},{"question":"There is a kingdom with n cities connected by m bidirectional roads. Each road connects two cities and has a certain length. A map of the kingdom can be represented as an undirected weighted graph where cities are nodes and roads are edges with weights. The king of the kingdom wants to build a round trip for tourists that allows them to start from any city, visit some or all cities exactly once, and return to the starting city. This round trip is essentially a Hamiltonian cycle. However, due to budget constraints, the king wants to minimize the length of the journey. Your task is to help the king by determining the minimum possible length of the round trip. If such a round trip is not possible, return -1. The first line contains two integers n and m (2 ≤ n ≤ 50, 1 ≤ m ≤ 500) — the number of cities and the number of roads. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — the two cities connected by the road and the length of the road. Print a single integer — the minimum possible length of the round trip or -1 if it is not possible to construct a Hamiltonian cycle. Example: Input: 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output: 80 Explanation: The valid Hamiltonian cycle is 1 -> 2 -> 3 -> 4 -> 1 with a minimum length of 10 + 35 + 30 + 5 = 80.","solution":"import itertools def min_hamiltonian_cycle(n, m, roads): # Create an adjacency matrix with large initial values inf = float(\'inf\') adj_matrix = [[inf] * n for _ in range(n)] # Populate adjacency matrix with given road distances for u, v, w in roads: adj_matrix[u-1][v-1] = w adj_matrix[v-1][u-1] = w # Check all permutations of the cities to find the minimum Hamiltonian cycle min_cycle = inf cities = list(range(n)) for perm in itertools.permutations(cities): current_length = 0 for i in range(n): if adj_matrix[perm[i]][perm[(i + 1) % n]] == inf: current_length = inf break current_length += adj_matrix[perm[i]][perm[(i + 1) % n]] min_cycle = min(min_cycle, current_length) return min_cycle if min_cycle < inf else -1"},{"question":"A certain company has an internal messaging system where employees can send messages to each other. Each message consists of a title and a content body. Due to a recent policy change, the messaging system needs to ensure that messages are not too long to maintain efficiency and readability. To implement this policy, you need to write a function that verifies if a given message meets the new length restrictions. The restrictions are as follows: - The title must not exceed 50 characters. - The content body must not exceed 500 characters. - Both title and content body should not exceed 530 characters combined. If the message violates any of these restrictions, your function should return a list of the specific rules that are violated. If the message meets all restrictions, the function should return the string \\"Message is valid\\". Write a function `validate_message` that takes two input strings: `title` and `content`, representing the title and content of the message respectively. The function should return either the list of broken rules or \\"Message is valid\\". # Input - The first line contains a string `title` (1 ≤ |title| ≤ 100). - The second line contains a string `content` (1 ≤ |content| ≤ 1000). # Output - Return either a list of strings indicating the specific rules broken or \\"Message is valid\\". # Example ```python def validate_message(title, content): # Your code here # Example usage: title = \\"Meeting Update\\" content = \\"There will be a meeting tomorrow at 10:00 AM.\\" print(validate_message(title, content)) # Output: \\"Message is valid\\" ``` # Additional Example Input: ```python title = \\"Project Deadline Notice\\" content = \\"The deadline for the project has been moved up by two weeks. Please ensure all deliverables are submitted before the new deadline. If you have any questions or concerns, please contact the project manager as soon as possible. This is a critical update, so please take note.\\" ``` Output: ```python [\\"Content must not exceed 500 characters\\", \\"Title and content combined must not exceed 530 characters\\"] ```","solution":"def validate_message(title, content): Validates that the title and content of the message meet certain length restrictions. Args: title (str): The title of the message. content (str): The content body of the message. Returns: list|str: A list of violated rules or \\"Message is valid\\". violations = [] if len(title) > 50: violations.append(\\"Title must not exceed 50 characters\\") if len(content) > 500: violations.append(\\"Content must not exceed 500 characters\\") if len(title) + len(content) > 530: violations.append(\\"Title and content combined must not exceed 530 characters\\") if violations: return violations else: return \\"Message is valid\\""},{"question":"The annual marathon event in the city has finished, and the organizers have now the list of all the participants\' results. Each participant has a unique id and their respective completion time of the marathon in minutes. The goal is to rank the participants based on their completion times. The participant who completed the marathon in the least time will be ranked first. If two or more participants have the same completion time, they will be ranked based on their participant id in ascending order. You need to help the organizers to find out the rank of a specific participant whose id is given. The first line contains a single integer n (1 le n le 1000) — the number of participants. Each of the next n lines contains two integers p_i and t_i (1 le p_i le n, 1 le t_i le 10000) — the id of the participant and their completion time in minutes. The final line contains the unique id x (1 le x le n) of the specific participant you want to find the rank of. Print the rank of the participant with id x. For example, consider the sample input: ``` 5 1 240 2 210 3 260 4 210 5 230 2 ``` In the example above, the completion times and ids sorted are: [210 (id 2), 210 (id 4), 230 (id 5), 240 (id 1), 260 (id 3)]. Participant with id 2 is ranked 1st. So, the output should be `1`. In another example: ``` 3 1 100 2 200 3 150 1 ``` The sorted completion times and ids are: [100 (id 1), 150 (id 3), 200 (id 2)]. Participant with id 1 is ranked 1st. So, the output should be `1`.","solution":"def get_rank(n, participants, x): Determines the rank of the participant with id x based on completion times. :param n: int - Number of participants :param participants: List of tuples [(id, time), ...] for each participant :param x: int - The specific participant id :return: int - The rank of the participant with id x # Sort participants first by time, then by id sorted_participants = sorted(participants, key=lambda p: (p[1], p[0])) # Find the rank of the participant with id x for rank, (pid, time) in enumerate(sorted_participants, start=1): if pid == x: return rank"},{"question":"Given an array of integers arr of size n and an integer k, find the length of the longest subarray of arr that contains at most k distinct integers. For example, If the input array is [1, 2, 1, 2, 3] and k is 2, the longest subarray with at most 2 distinct integers is [1, 2, 1, 2], which has a length of 4. If the input array is [1, 2, 1, 3, 4] and k is 3, the longest subarray with at most 3 distinct integers is [1, 2, 1, 3], which has a length of 4. Write a function `int longestSubarrayWithKDistinct(int arr[], int n, int k)` that takes in the array of integers arr, its size n, and the integer k, and returns the length of the longest subarray that contains at most k distinct integers. **Input:** - An integer array arr of size n (1 ≤ n ≤ 100000), where each element is an integer in the range 1 to 100000. - An integer k (1 ≤ k ≤ n). **Output:** - Print the length of the longest subarray containing at most k distinct integers. **Example:** **Input:** ``` arr = [1, 2, 1, 2, 3] n = 5 k = 2 ``` **Output:** ``` 4 ``` **Input:** ``` arr = [1, 2, 1, 3, 4] n = 5 k = 3 ``` **Output:** ``` 4 ```","solution":"def longestSubarrayWithKDistinct(arr, n, k): from collections import defaultdict window_start = 0 max_length = 0 frequency_map = defaultdict(int) for window_end in range(n): # Add the current element to the frequency map frequency_map[arr[window_end]] += 1 # Shrink the window until we have no more than k distinct integers while len(frequency_map) > k: frequency_map[arr[window_start]] -= 1 if frequency_map[arr[window_start]] == 0: del frequency_map[arr[window_start]] window_start += 1 # Calculate the maximum length max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"You are given an nxn grid where some cells are occupied by obstacles, represented by ‘#’. The rest of the cells are empty, represented by ‘.’. The goal is to determine the number of distinct paths from the top-left corner of the grid (i.e., cell (1, 1)) to the bottom-right corner of the grid (i.e., cell (n, n)), moving only right or down. You must also avoid the obstacles. Write a function `num_of_paths(n, grid)` where: - `n` is an integer (1 ≤ n ≤ 20) representing the size of the grid. - `grid` is a list of strings, each of length `n`, where `grid[i][j]` is either `#` (obstacle) or `.` (empty cell). Return an integer representing the number of distinct paths from (1,1) to (n,n) without passing through obstacles. # Example **Input:** ```python n = 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] ``` **Output:** ``` 2 ``` # Explanation There are two valid paths: 1. Right, Right, Down, Down 2. Down, Down, Right, Right **Note:** - At each step, you can only move to the right or down. - If the start or end cell is an obstacle, return 0.","solution":"def num_of_paths(n, grid): if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0 for _ in range(n)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"You are given an integer matrix `MxN` representing a grid where each element can either be 0 (an empty cell) or 1 (a wall). You need to find the shortest path from the top-left corner to the bottom-right corner while breaking at most one wall. The path can only be constructed from cells that are empty and move in the four cardinal directions (left, right, up, and down). Write a function `shortestPath(matrix: List[List[int]]) -> int` that takes in a 2D list of integers and returns the length of the shortest path. If it\'s not possible to reach the bottom-right corner, return -1. # Parameters: - `matrix`: A list of lists of integers where `matrix[i][j]` is either 0 or 1. # Returns: - An integer representing the length of the shortest path from the top-left corner to the bottom-right corner while breaking at most one wall. # Example: ```python matrix = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] print(shortestPath(matrix)) # Output: 8 ``` In the above example, the shortest path is achieved by breaking one wall and making a path as follows: (0,0) => (1,0) => (2,0) => (2,1) => (2,2) => (2,3) => (3,3) => (4,3) => (4,4) # Constraints: - `1 <= M, N <= 1000` - `matrix[i][j]` is either 0 or 1 - The matrix is always a rectangle of size `M x N`","solution":"from collections import deque from typing import List def shortestPath(matrix: List[List[int]]) -> int: Find the length of the shortest path from the top-left corner to the bottom-right corner while breaking at most one wall in the given grid matrix. if not matrix or not matrix[0]: return -1 M, N = len(matrix), len(matrix[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, walls_broken) visited = set((0, 0, 0)) step = 0 while queue: for _ in range(len(queue)): r, c, broken = queue.popleft() if r == M - 1 and c == N - 1: return step for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N: if matrix[nr][nc] == 0 and (nr, nc, broken) not in visited: queue.append((nr, nc, broken)) visited.add((nr, nc, broken)) elif matrix[nr][nc] == 1 and broken == 0 and (nr, nc, broken + 1) not in visited: queue.append((nr, nc, broken + 1)) visited.add((nr, nc, broken + 1)) step += 1 return -1"},{"question":"You are participating in a cooking competition where every day you have an opportunity to earn taste points based on the dishes you cook. There is a constraint that affects your performance: you have a limited amount of energy each day, and the energy cost of cooking different dishes varies. On the i-th day, you have e_i energy available. There are d different dishes, each with a certain energy cost and taste points value. You need to decide which dish to cook each day to maximize your total taste points. Given n days, d dishes, and for each dish, its energy cost and taste points value, determine the maximum taste points you can accumulate over the n days. The first line contains two integers n and d (1le n, d le 1000), representing the number of days and the number of different dishes. The next line contains n integers e_1, e_2, ldots, e_n (1 le e_i le 1000), where e_i is the energy available on the i-th day. Then follow d lines, each containing two integers c_j and t_j (1 le c_j, t_j le 1000), where c_j is the energy cost of the j-th dish and t_j is the taste points value for the j-th dish. Print one integer: the maximum total taste points you can achieve over the n days. Example: Input: ``` 3 3 5 3 6 4 10 1 2 6 12 ``` Output: ``` 14 ``` In the first example: - On the first day, you can spend 4 energy to gain 10 taste points. - On the second day, you can spend 1 energy to gain 2 taste points. - On the third day, you can spend 6 energy to gain 12 taste points. Thus, the total taste points are 10 + 2 + 12 = 24 points.","solution":"def max_taste_points(n, d, energies, dishes): Function to determine the maximum taste points achievable. :param n: Number of days :param d: Number of different dishes :param energies: list of integer, available energy per day :param dishes: list of tuples, each containing (energy cost, taste points) of a dish :return: Maximum taste points achievable. # Sort dishes based on the taste points in descending order dishes.sort(key=lambda x: x[1], reverse=True) total_taste_points = 0 for e in energies: for energy_cost, taste_points in dishes: if e >= energy_cost: total_taste_points += taste_points break return total_taste_points"},{"question":"A chef in a restaurant prepares dishes for customers. The chef takes orders one by one and prepares them in the order they are received. The restaurant has a unique way of keeping track of the preparation process using a prioritization system based on the order time and the dish\'s complexity. Each order has three properties: 1. `order_id` - a unique identifier for the order. 2. `arrival_time` - the time when the order is placed. (in seconds from the opening time) 3. `complexity` - the time it takes to prepare the dish. (in seconds) The chef starts preparing an order as soon as it arrives unless they are already preparing another dish. If the chef is busy, the new order is added to a list of pending orders. The chef always chooses the next order to prepare based on the smallest `arrival_time`. If two orders have the same `arrival_time`, they should be processed based on the earliest `complexity`. If the complexities are also the same, process them based on the `order_id`. Given the details of all the orders placed, determine the completion time of each order. Write a function `order_completion_time` that takes a list of orders and returns the completion time for each order in the order of their `order_id`. # Function Signature ```python def order_completion_time(orders: List[Dict[str, int]]) -> Dict[int, int]: ``` # Input - orders: A list of dictionaries where each dictionary contains: - \'order_id\' (int): A unique integer identifier of the order. - \'arrival_time\' (int): The timestamp when the order was placed (in seconds from the opening time). - \'complexity\' (int): The time required to prepare the dish (in seconds). # Output - A dictionary with `order_id` as keys and their corresponding `completion_time` as values. # Example ```python orders = [ {\\"order_id\\": 1, \\"arrival_time\\": 0, \\"complexity\\": 5}, {\\"order_id\\": 2, \\"arrival_time\\": 3, \\"complexity\\": 8}, {\\"order_id\\": 3, \\"arrival_time\\": 6, \\"complexity\\": 4} ] print(order_completion_time(orders)) ``` Expected output: ```python {1: 5, 2: 13, 3: 17} ``` # Explanation - Order 1 arrives at time 0 and takes 5 seconds to prepare. Thus, it completes at time 5. - Order 2 arrives at time 3 but has to wait for Order 1 to complete. It starts at time 5 and takes 8 seconds, so it completes at time 13. - Order 3 arrives at time 6, but Order 2 is being prepared. It starts at time 13 and takes 4 seconds, so it completes at time 17. # Constraints - `0 <= arrival_time <= 10^6` - `1 <= complexity <= 10^3` - `1 <= len(orders) <= 10^4` - `1 <= order_id <= 10^4` (order_ids are unique)","solution":"def order_completion_time(orders): This function calculates the completion time for each order based on its arrival time and complexity. # Sort orders based on arrival time, then by complexity and then by order_id orders.sort(key=lambda x: (x[\'arrival_time\'], x[\'complexity\'], x[\'order_id\'])) current_time = 0 completion_times = {} for order in orders: order_id = order[\'order_id\'] arrival_time = order[\'arrival_time\'] complexity = order[\'complexity\'] if current_time < arrival_time: # If the current time is less than the order\'s arrival time, move forward to the arrival time current_time = arrival_time # Calculate the completion time of the current order current_time += complexity completion_times[order_id] = current_time return completion_times"},{"question":"Given a string s consisting of lowercase English letters, rearrange the characters of the string such that two adjacent characters are not the same. If it is not possible to rearrange the string, return an empty string. You may assume that the input string has a length in the range [1, 10^4]. Implement a function `rearrange_string(s: str) -> str` that takes the input string `s` and returns the rearranged string or an empty string if no valid rearrangement exists. Example: - Input: \\"aab\\" - Output: \\"aba\\" - Input: \\"aaab\\" - Output: \\"\\" Constraints: - 1 ≤ length of s ≤ 10^4 - s consists of lowercase English letters only. Your function should be efficient and should ideally solve the problem in linear time, relative to the length of the string.","solution":"import heapq from collections import Counter def rearrange_string(s: str) -> str: Rearranges the characters of the string s such that no two adjacent characters are the same. If it is not possible, returns an empty string. # Count the frequency of each character char_count = Counter(s) # Max-Heap based on character frequency (using negative because Python\'s heapq is a min-heap) max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Add the previous character back if its frequency is still positive if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Append the current character and update previous character info result.append(char) prev_char = char prev_freq = freq + 1 # Decrease frequency because we used one instance of `char` rearranged_str = \'\'.join(result) # If the rearranged string\'s length is not the same as input string, rearrangement was impossible if len(rearranged_str) != len(s): return \\"\\" return rearranged_str"},{"question":"A toy manufacturing company is designing a new game set which involves arranging colored blocks in a line. Each block has a unique color represented by an integer. To ensure the game remains challenging but not overly difficult, they need to determine the longest contiguous subsequence of blocks where no block color repeats within the subsequence. Help the company to find the length of the longest such subsequence in a given sequence of block colors. The first line contains an integer n (1 ≤ n ≤ 105), the length of the sequence. The second line contains n integers representing the colors of the blocks, where each integer is between 1 and 109 inclusive, and the integers are separated by spaces. Output a single integer representing the length of the longest contiguous subsequence where no color repeats. Example: Input: 7 4 2 4 5 6 2 5 Output: 4 In the example, the longest contiguous subsequence without repeated colors is [4, 5, 6, 2], whose length is 4.","solution":"def longest_unique_subsequence_length(n, blocks): Finds the length of the longest contiguous subsequence of blocks where no block color repeats. Parameters: n (int): The length of the sequence. blocks (list of int): The list of block colors. Returns: int: The length of the longest contiguous subsequence where no color repeats. color_index_map = {} max_length = 0 start_index = 0 for current_index in range(n): color = blocks[current_index] if color in color_index_map and color_index_map[color] >= start_index: start_index = color_index_map[color] + 1 color_index_map[color] = current_index max_length = max(max_length, current_index - start_index + 1) return max_length"},{"question":"You are given a string consisting of lowercase English letters. Your task is to compress the string using the following rule: - Replace each consecutive group of the same character with the character followed by the length of that group. For example, the string `aaabbbcccc` should be compressed to `a3b3c4`. If the compressed string length is not smaller than the original string length, then return the original string. Write a function that takes a string as input and returns the compressed string if its length is less than the original string length, otherwise, return the original string. # Input - A single string `s` of length 1 leq |s| leq 10^5, consisting of lowercase English letters. # Output - A single string representing the compressed version of the input string `s` if it is shorter than the original, otherwise the original string. # Example ```python def compress_string(s): # Your implementation here # Example usage print(compress_string(\\"aaabbbcccc\\")) # Output: \\"a3b3c4\\" print(compress_string(\\"abc\\")) # Output: \\"abc\\" print(compress_string(\\"aabcccccaaa\\")) # Output: \\"a2b1c5a3\\" ``` # Constraints - You should not use additional helper libraries such as `collections.Counter`. - The solution should run in O(n) time complexity.","solution":"def compress_string(s): Compress the given string by replacing each sequence of the same character with that character followed by the length of the sequence. # If the string is empty or has one character, return it as is if len(s) <= 1: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_str = \\"\\".join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Dr. Watson and Sherlock Holmes are working on deciphering a code hidden within a series of numbers. They suspect there is a special pattern or rule that consistently affects every sequence given to them. For this task, you will help them determine whether the sequences sent to them are arithmetic progressions or not. Recall that a sequence is an arithmetic progression if the difference between any two consecutive terms is the same throughout the sequence. The input starts with an integer t (1 le t le 20), the number of test cases. For each test case, the first line contains an integer m (2 le m le 50), the length of the sequence. The second line contains m integers, forming the sequence. For each test case, print \\"YES\\" if the sequence is an arithmetic progression, and \\"NO\\" otherwise. **Example Input:** ``` 2 4 3 7 11 15 3 1 2 4 ``` **Example Output:** ``` YES NO ``` **Explanation:** In the first test case, the sequence 3, 7, 11, 15 has a constant common difference of 4, thus it is an arithmetic progression. In the second test case, the sequence 1, 2, 4 does not have a constant common difference, thus it is not an arithmetic progression.","solution":"def is_arithmetic_progression(t, test_cases): Determine if each sequence in the test cases is an arithmetic progression. t - an integer, the number of test cases test_cases - a list of tuples [(m, sequence), ...] Returns a list of \\"YES\\" or \\"NO\\" for each test case. results = [] for case in test_cases: m, sequence = case # Calculate the common difference using the first two elements common_diff = sequence[1] - sequence[0] is_arithmetic = True # Check the difference for every consecutive elements for i in range(1, m): if sequence[i] - sequence[i-1] != common_diff: is_arithmetic = False break if is_arithmetic: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A large company has an online document system where documents are represented as a series of strings stored in a continuous format. Each document has a title represented within square brackets `[ ]`, followed by the content of the document. A document ends where the next document title starts or at the end of the string. Given a long string that contains several such documents, you are asked to develop a function that extracts the content of a specific document, given its title. For example, consider the following string: \\"Hello[Doc1]This is the first document.[Doc2]Here is another document which is the second one.[Doc3]This is the third document.\\" If the title \\"Doc2\\" is given, your function should return: \\"Here is another document which is the second one.\\" Write a function `extract_document_content(library: str, title: str) -> str` that takes the full document library as a string and a document title to fetch, and returns the content of the specified document. # Function Signature ```python def extract_document_content(library: str, title: str) -> str: # your code here ``` # Input - `library` (string): The complete string containing all documents in sequence. (It is guaranteed that there will be at least one document.) - `title` (string): The title of the document you need to extract. (It is guaranteed the title exists in the library.) # Output - A string representing the content of the specified document. # Example ```python library = \\"Hello[Doc1]This is the first document.[Doc2]Here is another document which is the second one.[Doc3]This is the third document.\\" title = \\"Doc2\\" print(extract_document_content(library, title)) # Output: \\"Here is another document which is the second one.\\" ``` # Note - The document titles are unique and do not contain the characters `[ ]`. - The content of the document can be any sequence of characters except for `[`, which is reserved for denoting titles.","solution":"def extract_document_content(library: str, title: str) -> str: start_title = f\'[{title}]\' start_index = library.find(start_title) if start_index == -1: return \\"\\" # Title not found start_index += len(start_title) end_index = library.find(\'[\', start_index) if end_index == -1: end_index = len(library) return library[start_index:end_index].strip()"},{"question":"Write a function `next_palindrome` that takes an integer `n` (1 ≤ n ≤ 10^7) as input and returns the smallest palindrome larger than `n`. A palindrome is a number that reads the same backward as forward. The function should check progressively larger numbers until it finds the next palindrome. **Example:** ```plaintext Input: 123 Output: 131 Input: 678 Output: 686 ```","solution":"def next_palindrome(n): Returns the smallest palindrome larger than n. def is_palindrome(x): Checks if x is a palindrome. return str(x) == str(x)[::-1] n += 1 while not is_palindrome(n): n += 1 return n"},{"question":"You are given a binary tree represented by a list of integers where each integer corresponds to a node value. The binary tree is represented in level-order traversal, where the root node is the first element, and each subsequent pair of elements represents the child nodes of preceding elements. If a node does not have a left or right child, a special marker null (represented by -1) is used in the list. Your task is to determine the maximum depth of the binary tree. The input begins with an integer n (1 ≤ n ≤ 1000) — the number of nodes in the binary tree including the null markers. The next line contains n space-separated integers representing the binary tree in level-order traversal. The output should be a single integer representing the maximum depth of the binary tree. # Example Input: 8 1 2 3 4 -1 5 6 -1 -1 -1 -1 7 -1 -1 8 Output: 4 Explanation: The binary tree corresponding to the input is: ``` 1 / 2 3 / / 4 5 6 7 8 ``` The maximum depth of this tree is 4. --- This problem tests your understanding of binary tree structures and traversal methods, particularly in level-order format. Ensure your solution efficiently handles the input constraints and accurately computes the maximum depth.","solution":"def max_depth_of_binary_tree(n, nodes): Determines the maximum depth of a binary tree represented in level-order traversal. n: int, the number of elements including null markers in the binary tree. nodes: List[int], the level-order traversal of the binary tree where -1 represents null. Returns: int, the maximum depth of the binary tree. if n == 0: return 0 from collections import deque queue = deque([(0, 0)]) # (index in nodes, current depth) max_depth = 0 while queue: index, depth = queue.popleft() if index < n and nodes[index] != -1: max_depth = max(max_depth, depth + 1) left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 if left_child_index < n: queue.append((left_child_index, depth + 1)) if right_child_index < n: queue.append((right_child_index, depth + 1)) return max_depth"},{"question":"There are n employees in a company, and each employee is involved in one or more projects. The company wants to promote collaboration by forming project teams, where each team consists of employees working on common projects. You are given the participation of each employee in the form of a binary matrix, where the i-th row represents the projects the i-th employee is involved in. Each element in the matrix is either 0 (not involved in the project) or 1 (involved in the project). Your task is to determine the maximum number of teams such that no two teams share a common employee. A team is defined by a subset of employees who are all working on at least one common project. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), representing the number of employees and the number of projects, respectively. The next n lines contain m space-separated integers (either 0 or 1), representing the binary matrix. Output a single integer, the maximum number of teams with no shared employees. # Example Input: ``` 3 3 1 1 0 0 1 0 1 0 1 ``` Output: ``` 2 ``` # Explanation: In the provided example, employees can be divided into two teams: - Team 1: Employee 1 and Employee 2 (both work on project 2) - Team 2: Employee 3 (works on project 1 and project 3) Thus, the maximum number of such teams is 2.","solution":"def max_teams(n, m, matrix): Determines the maximum number of teams such that no two teams share a common employee. A team is defined by a subset of employees who are all working on at least one common project. :param n: Number of employees :param m: Number of projects :param matrix: Binary matrix of size n*m representing project involvements :return: Maximum number of teams with no shared employees from itertools import combinations # Function to check if two employees share a common project def share_project(employee1, employee2): for i in range(m): if matrix[employee1][i] == 1 and matrix[employee2][i] == 1: return True return False # Count the maximum number of teams max_teams = 0 for r in range(1, n+1): for comb in combinations(range(n), r): if all(not share_project(i, j) for i, j in combinations(comb, 2)): max_teams = max(max_teams, r) return max_teams"},{"question":"You are given a string s of length n, consisting of lowercase English letters. You can perform the following operation exactly once: - Choose a contiguous subsequence of length at most k and reverse it. Determine if it\'s possible to make the string a palindrome by performing this operation exactly once. The first line contains two integers n (1 le n le 10^5) — the length of the string and k (1 le k le frac{n}{2}) — the maximum length of the subsequence you can choose and reverse. The second line contains the string s consisting of lowercase English letters. Print \\"YES\\" (without quotes) if it is possible to make the string a palindrome after exactly one operation, otherwise print \\"NO\\" (without quotes). Example Input 7 3 racecar Output YES Input 5 2 abcde Output NO","solution":"def can_make_palindrome(n, k, s): Determines if it\'s possible to make the string a palindrome by performing exactly one operation of choosing a contiguous subsequence of length at most k and reversing it. Parameters: n (int): Length of the string. k (int): Maximum length of the subsequence to reverse. s (str): Input string. Returns: str: \\"YES\\" if it\'s possible to make the string palindrome with exactly one operation, otherwise \\"NO\\". if s == s[::-1]: return \\"YES\\" for i in range(n - k + 1): for j in range(1, k + 1): # Reverse the substring from i to i+j and check if it\'s a palindrome modified = s[:i] + s[i:i+j][::-1] + s[i+j:] if modified == modified[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with developing an efficient file manager for a distributed system that keeps track of file permissions across multiple servers. Each server stores a replica of files, and each file has a unique identifier. File permissions are enumerated as follows: - \'R\' for Read - \'W\' for Write - \'X\' for Execute Each server in the system maintains a list of files along with their permissions. The permissions are stored as a string of characters (e.g., \'RW\' for Read and Write permissions). Your task is to combine the permissions from multiple servers such that you determine the overall permissions a user has on each file across all servers. If a permission is granted on any server, it should be considered granted overall. Given a list of servers and their permissions, your program should read inputs for each server and combine the permissions for each file accordingly. # Input Format - The first line contains an integer `s` (1 le s le 1000) — the number of servers. - The next `s` sections each describe a server. - The first line of each server\'s section contains an integer `n` (1 le n le 1000) — the number of files on this server. - The next `n` lines each contain the file identifier `f_id` (a string of up to 20 characters) followed by a string `perms` of permissions (a subset of \'R\',\'W\',\'X\') — no spaces between the permissions. # Output Format For each file identified across all servers, output the file identifier followed by the combined permissions (sorted alphabetically). # Sample Input ``` 2 3 file1 RW file2 R file3 WX 2 file2 W file3 RX ``` # Sample Output ``` file1 RW file2 RW file3 RWX ``` # Explanation In the example: - `file1` is only present on the first server with permissions \'RW\'. - `file2` is present on both servers. On the first server, it has \'R\' permission and on the second server, it has \'W\' permission. The combined permissions are \'RW\'. - `file3` has \'WX\' on the first server and \'RX\' on the second server. The combined permissions for `file3` across both servers are \'RWX\'. You should develop a program that reads input, processes the permissions for each file across multiple servers, and prints the combined permissions for each file.","solution":"def combine_permissions(s, servers_info): from collections import defaultdict file_permissions = defaultdict(set) for i in range(s): n = servers_info[i][0] for j in range(n): f_id, perms = servers_info[i][1][j] file_permissions[f_id].update(set(perms)) result = [] for f_id in sorted(file_permissions): combined_perms = \'\'.join(sorted(file_permissions[f_id])) result.append(f\\"{f_id} {combined_perms}\\") return result def parse_input(input_string): input_lines = input_string.strip().split(\'n\') s = int(input_lines[0]) index = 1 servers_info = [] for _ in range(s): n = int(input_lines[index]) server_info = [] index += 1 for _ in range(n): file_info = input_lines[index].split() f_id = file_info[0] perms = file_info[1] server_info.append((f_id, perms)) index += 1 servers_info.append((n, server_info)) return s, servers_info def process_input(input_string): s, servers_info = parse_input(input_string) return combine_permissions(s, servers_info)"},{"question":"You are building a network of computer servers, represented as a series of interconnected nodes. Each server connects directly to one or multiple other servers. Your goal is to determine critical connections - edges that if removed, would increase the number of connected components in the network. Each server is represented by an integer from 0 to n - 1. You are given the number of servers `n` and a list `connections` where each `connections[i]` is a pair of servers represented as `[u, v]` which indicates a direct edge connecting the servers `u` and `v`. Your task is to write a function that finds all the critical connections in the network. The function should return these connections as a list of pairs. The pairs should be sorted in ascending order. # Function Signature ```python def criticalConnections(n: int, connections: List[List[int]]) -> List[List[int]]: ``` # Input - `n` (1 <= n <= 10^5): An integer representing the number of servers. - `connections` (|connections| <= 10^5): A list of `pairs` where each pair `[u, v]` represents an edge between servers `u` and `v`. # Output - A list of pairs representing the critical connections in the network in ascending order. # Example ```python n = 5 connections = [[0, 1], [1, 2], [2, 0], [1, 3], [3, 4]] print(criticalConnections(n, connections)) ``` # Expected Output ``` [[1, 3], [3, 4]] ```","solution":"from typing import List def criticalConnections(n: int, connections: List[List[int]]) -> List[List[int]]: def dfs(node, discovery_time, low_time, parent, time): discovery_time[node] = low_time[node] = time time += 1 for neighbor in graph[node]: if discovery_time[neighbor] == -1: # Neighbor has not been discovered parent[neighbor] = node dfs(neighbor, discovery_time, low_time, parent, time) low_time[node] = min(low_time[node], low_time[neighbor]) if low_time[neighbor] > discovery_time[node]: critical_edges.append([node, neighbor]) elif neighbor != parent[node]: # Back edge low_time[node] = min(low_time[node], discovery_time[neighbor]) graph = {i: [] for i in range(n)} for u, v in connections: graph[u].append(v) graph[v].append(u) discovery_time = [-1] * n low_time = [-1] * n parent = [-1] * n critical_edges = [] time = 0 for i in range(n): if discovery_time[i] == -1: dfs(i, discovery_time, low_time, parent, time) for edge in critical_edges: edge.sort() # Sorting individual edges return sorted(critical_edges) # Sorting entire list of edges"},{"question":"Warehouse workers are given an instruction list, which they need to follow in order to manage the inventory. Each instruction in the list is either \\"add x\\" where x is the number of items to add, \\"remove x\\" where x is the number of items to remove, or \\"check\\" where they need to check the current number of items in the inventory. Initially, the inventory contains 0 items. The goal is to simulate the instructions and return the current inventory level after executing all instructions. If at any point, a \\"remove x\\" instruction tries to remove more items than currently available in the inventory, the removal should be ignored. The first line contains a single integer n (1 ≤ n ≤ 100000) - the number of instructions. Each of the next n lines contains instructions in the form \\"add x\\", \\"remove x\\", or \\"check\\". The output should be the inventory count after all instructions have been executed. # Example Input: ``` 5 add 10 remove 5 check add 20 remove 15 ``` Output: ``` 10 ``` # Explanation: - After \\"add 10\\", inventory = 10. - After \\"remove 5\\", inventory = 5. - After \\"check\\", the inventory is noted as 5 (but not displayed in output). - After \\"add 20\\", inventory = 25. - After \\"remove 15\\", inventory = 10.","solution":"def manage_inventory(instructions): inventory = 0 for instruction in instructions: if instruction.startswith(\\"add\\"): _, x = instruction.split() inventory += int(x) elif instruction.startswith(\\"remove\\"): _, x = instruction.split() x = int(x) if inventory >= x: inventory -= x elif instruction.startswith(\\"check\\"): continue return inventory"},{"question":"**Problem Statement:** You are tasked with managing an array of integers for a special application. This array allows you to perform a series of operations to manipulate its elements based on the following rules. Given an array `arr` of `n` integers, you can perform two types of operations: 1. **Query Operation:** - This operation requires you to find the sum of the integers from index `l` to index `r` (both inclusive). The indices `l` and `r` satisfy `1 ≤ l ≤ r ≤ n`. 2. **Update Operation:** - This operation allows you to update the value at a specific position in the array. The update is specified by providing an index `i` and the new integer value `val`, such that `1 ≤ i ≤ n`. You will be provided with two lists of queries: 1. An update list containing tuples `(i, val)` which indicates the index `i` and the new value `val` to update the array. 2. A query list containing tuples `(l, r)` which indicates the range `[l, r]` for summing up the values. Your task is to apply all updates first. After all updates are applied, you need to process each query in the list and return an array of integers where each element corresponds to the sum calculated for a specific range `[l, r]`. # Input: - The first line contains an integer `n`, the size of the array. - The second line contains `n` space-separated integers representing the elements of the array `arr`. - The third line contains an integer `m`, the number of update operations. - The next `m` lines each contain two space-separated integers `i` and `val` specifying an update operation. - The following line contains an integer `q`, the number of query operations. - The next `q` lines each contain two space-separated integers `l` and `r` specifying a query operation. # Output: - Output a list of integers, where each integer is the sum calculated for the corresponding query. # Constraints: - `1 ≤ n, m, q ≤ 10^5` - `1 ≤ arr[i], val ≤ 10^9` - `1 ≤ l ≤ r ≤ n` - `1 ≤ i ≤ n` # Example: Input: ``` 5 1 2 3 4 5 3 1 10 2 20 3 30 2 1 3 2 4 ``` Output: ``` 60 54 ``` # Function Signature: ```python def manage_array_operations(n: int, arr: List[int], updates: List[Tuple[int, int]], queries: List[Tuple[int, int]]) -> List[int]: pass ```","solution":"from typing import List, Tuple def manage_array_operations(n: int, arr: List[int], updates: List[Tuple[int, int]], queries: List[Tuple[int, int]]) -> List[int]: # Apply updates for i, val in updates: arr[i - 1] = val results = [] # Process each query for l, r in queries: results.append(sum(arr[l - 1:r])) return results"},{"question":"You are given an array of integers representing the heights of blocks arranged in a row. Each block has width 1. You need to compute how much water can be trapped between the blocks after a rainfall. Formally, given `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. # Input The first line contains an integer `t` (1 ≤ t ≤ 5000), the number of test cases. Then, `t` test cases follow. For each test case: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of blocks. - The second line contains `n` non-negative integers `h1, h2, ..., hn` (0 ≤ hi ≤ 10^9) representing the heights of the blocks. The sum of `n` over all test cases will not exceed 10^6. # Output For each test case, output a single integer — the amount of water trapped between the blocks. # Example Input ``` 2 6 0 1 0 2 1 0 5 2 0 3 0 2 ``` Output ``` 1 2 ``` # Explanation First Test Case: Rainwater trapped: ``` 0 1 0 2 1 0 # # # # # # ---- ``` Amount of trapped water: 1 unit. Second Test Case: Rainwater trapped: ``` 2 0 3 0 2 # # # # ---- ``` Amount of trapped water: 2 units.","solution":"def trap_rain_water(heights): Given a list of heights representing the elevation map, calculate the amount of trapped rainwater. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped def solve(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] results.append(trap_rain_water(heights)) return results"},{"question":"In a fictional city, Magicville, there are n magical gates arranged in a circle. Each gate can be open or closed. The townspeople want to perform a ritual that requires exactly k gates to be open. They need to determine the probability that a random configuration of gates will satisfy their requirement. A configuration is defined as a distinct combination of open and closed gates. For example, with n = 4 and k = 2, a valid configuration is (open, open, closed, closed). Given the number of gates n and the desired number of open gates k, calculate the probability that a random configuration will have exactly k open gates. The first line contains two integers, n and k (1 ≤ k ≤ n ≤ 20). Output a single floating-point number — the probability that exactly k gates are open, rounded to 10 decimal places.","solution":"from math import comb def probability_of_open_gates(n, k): Returns the probability that exactly k out of n gates are open. Parameters: n (int): The total number of gates k (int): The desired number of open gates Returns: float: Probability that exactly k gates out of n are open, rounded to 10 decimal places total_configurations = 2 ** n favorable_configurations = comb(n, k) probability = favorable_configurations / total_configurations return round(probability, 10) # Example Usage n, k = 4, 2 print(probability_of_open_gates(n, k)) # Expected output: 0.375"},{"question":"You are given a list of integers representing street numbers of houses along a street. The city council plans to place security cameras on certain houses to ensure maximum surveillance. Each camera placed on a house will cover the house it\'s placed on, as well as the adjacent houses to its left and right. You are required to write a function to determine the minimum number of cameras needed to cover all houses. A house can be left without a camera only if it is already within the coverage of another camera. The function should take one input, a list of integers `houses` where each integer represents a house number (not necessarily sorted): `def minimum_cameras(houses: List[int]) -> int:` The function should return the minimum number of cameras required to cover all houses. # Example: **Input:** ```python houses = [1, 2, 5, 6, 9, 10] ``` **Output:** ```python 3 ``` **Explanation:** Cameras can be placed on house numbers 2, 6, and 10 to cover all the houses. Each camera covers the house it\'s placed on and the house immediately before and after it: [1,2,3], [5,6,7], [9,10,11] respectively.","solution":"from typing import List def minimum_cameras(houses: List[int]) -> int: if not houses: return 0 houses.sort() cameras = 0 i = 0 n = len(houses) while i < n: cameras += 1 # Place a camera on the current house (houses[i]) coverage_house = houses[i] + 2 # Move the index to the first house that\'s out of the current camera coverage while i < n and houses[i] <= coverage_house: i += 1 return cameras"},{"question":"Imagine you are responsible for creating a scheduling application that determines who is available to take over an important task on a given date. Each user has a list of availability ranges for each day. An availability range is represented as a (start_time, end_time) pair, where start_time and end_time are integers denoting the start and end times in a 24-hour format (e.g., 0 to 23). Your task is to write a function that takes the date and a list of users and their availability ranges and returns the user with the longest continuous availability that day. If there is a tie, return any one of the users with the longest availability. Function Signature: ```python def find_most_available_user(date: str, availabilities: List[Dict[str, List[Tuple[int, int]]]]) -> str: ``` # Input: - `date` (str): A string representing the target date in the format \\"YYYY-MM-DD\\". - `availabilities` (List[Dict[str, List[Tuple[int, int]]]]): A list of dictionaries where each dictionary represents a user. Each dictionary contains a single key-value pair where the key is the user\'s name (a string) and the value is a list of tuples. Each tuple represents an availability range for a particular day (start_time, end_time). # Output: - Returns (str): The name of the user with the longest continuous availability on the given date. # Examples: ```python availabilities = [ { \\"Alice\\": [(\\"2023-01-02\\", [(9, 12), (13, 18)]), (\\"2023-01-03\\", [(8, 10)])] }, { \\"Bob\\": [(\\"2023-01-02\\", [(10, 15)]), (\\"2023-01-03\\", [(9, 17)])] }, { \\"Charlie\\": [(\\"2023-01-02\\", [(9, 11), (14, 17)]), (\\"2023-01-03\\", [(8, 12), (13, 14)])] } ] print(find_most_available_user(\\"2023-01-02\\", availabilities)) # Output: \\"Bob\\" print(find_most_available_user(\\"2023-01-03\\", availabilities)) # Output: \\"Bob\\" ``` # Note: - In the first example, on \\"2023-01-02\\", Alice is available for a total of 8 hours (9 to 12 and 13 to 18), Bob is available for 5 hours (10 to 15), and Charlie is available for a total of 5 hours (9 to 11 and 14 to 17). Hence, Alice is the most available. - In the second example, on \\"2023-01-03\\", Bob is available for a total of 8 hours (9 to 17), while Alice is only available for 2 hours (8 to 10). Charlie is available for a total of 5 hours (8 to 12 and 13 to 14). Hence, Bob is the most available.","solution":"from typing import List, Dict, Tuple def find_most_available_user(date: str, availabilities: List[Dict[str, List[Tuple[str, List[Tuple[int, int]]]]]]) -> str: max_availability = 0 most_available_user = None for user_availability in availabilities: for user, days in user_availability.items(): for day, ranges in days: if day == date: total_availability = sum(end - start for start, end in ranges) if total_availability > max_availability: max_availability = total_availability most_available_user = user return most_available_user"},{"question":"You are given a tree with n nodes where each node is identified by a unique integer from 1 to n. A tree is a connected graph with no cycles. Every node in this tree has some gold coins associated with it, represented by an array coins[i] where 1 le i le n and coins[i] is the number of coins at node i. One day, the King of the land decides to divide the nodes into two sets A and B such that: 1. Set A and set B form a partition of the tree, i.e., every node belongs to exactly one of the sets. 2. Each set should form its own subtree. The cost of this partition is defined as the absolute difference between the total number of coins in set A and the total number of coins in set B. You need to find the minimum possible cost of such a partition. # Input The first line of the input contains an integer t (1 le t le 10^3) — the number of test cases. The descriptions of the test cases follow. For each test case: - The first line contains an integer n (2 le n le 10^5) — the number of nodes in the tree. - The second line contains n integers, where the i-th integer is coins[i] (1 le coins[i] le 10^9) — the number of coins at the i-th node. - The next n-1 lines contain two integers u and v (1 le u, v le n) — indicating an edge between node u and node v. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. # Output For each test case, output a single integer — the minimum possible cost of partitioning the tree. # Example Input ``` 2 3 2 1 3 1 2 1 3 4 1 2 3 4 1 2 2 3 2 4 ``` Output ``` 0 2 ``` # Explanation For the first test case, you can partition the tree such that set A contains node 1, and set B contains nodes 2 and 3. Both sets will have 3 coins in total, so the cost is 0. For the second test case, one optimal partition is: set A containing nodes 3 and 4, and set B containing nodes 1 and 2. Set A has 7 coins, and set B has 3 coins, so the cost is abs(7 - 3) = 4 which is not minimal. Another optimal partition: set A containing nodes 2 and set B containing nodes 1, 3 and 4. Set A has 2 coins and set B has 8 coins so the cost is abs(2 - 8) = 6 which is also not minimal. The optimal way is to partition the tree such that set A contains node 4 and set B contains the rest: set A has 4 coins and set B has 6 coins so the cost is abs(4-6) = 2 which is minimal in this case.","solution":"import sys input = sys.stdin.read def min_partition_cost(t, test_cases): def dfs(u, parent): subtree_sum[u] = coins[u] for v in tree[u]: if v != parent: dfs(v, u) subtree_sum[u] += subtree_sum[v] results = [] for i in range(t): n = test_cases[i][0] coins = test_cases[i][1] edges = test_cases[i][2] tree = [[] for _ in range(n)] for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) subtree_sum = [0] * n total_sum = sum(coins) dfs(0, -1) min_cost = float(\'inf\') for u in range(1, n): # we do not consider the entire tree cost = abs(total_sum - 2 * subtree_sum[u]) if cost < min_cost: min_cost = cost results.append(min_cost) return results def read_input(): data = input().strip().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 coins = list(map(int, data[index:index + n])) index += n edges = [] for _ in range(n - 1): u, v = map(int, data[index:index + 2]) index += 2 edges.append((u, v)) test_cases.append((n, coins, edges)) return t, test_cases if __name__ == \\"__main__\\": t, test_cases = read_input() results = min_partition_cost(t, test_cases) for res in results: print(res)"},{"question":"Given an array of n integers, you need to divide the array into contiguous subarrays such that each subarray contains at least one positive integer. Your task is to find the minimum number of such subarrays required. The first line contains one integer n (1 ≤ n ≤ 2000) — the length of the array. The next line contains n integers a1, a2, ..., an (−1 ≤ ai ≤ 1) — the elements of the array. Output one integer — the minimum number of subarrays required such that each subarray contains at least one positive integer. **Example:** Input: 6 -1 -1 1 -1 1 -1 Output: 2","solution":"def min_subarrays_with_positive(n, array): Returns the minimum number of subarrays required such that each subarray contains at least one positive integer. # Count of positive integers in the array positive_count = 0 for num in array: if num == 1: positive_count += 1 # The minimum number of subarrays required is equal to the number of positive integers return positive_count"},{"question":"You are given a grid with `m` rows and `n` columns, filled with non-negative integers representing the height of buildings. The goal is to place a single antenna on the grid such that the antenna covers the maximum number of buildings. An antenna can cover a building if the Manhattan distance between the antenna and the building is less than or equal to `r`, i.e., for an antenna placed at cell `(i, j)`, a building at cell `(x, y)` is covered if `|i - x| + |j - y| <= r`. Write a function that takes an `m x n` 2D grid, each cell containing a non-negative integer representing the height of the building at that location, and an integer `r`, which is the range of the antenna, and returns the maximum number of buildings that can be covered by placing a single antenna optimally on the grid. # Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 200) representing the number of rows and columns in the grid. - The second line contains a single integer `r` (0 ≤ r ≤ 200) which is the maximum range of the antenna. - Each of the next `m` lines contains `n` integers representing the grid, where `grid[i][j]` (0 ≤ grid[i][j] ≤ 108) is the height of the building at row `i` and column `j`. # Output Print a single integer — the maximum number of buildings that can be covered by placing the antenna optimally on the grid. # Example Input ``` 3 3 2 1 2 3 4 5 6 7 8 9 ``` Output ``` 9 ``` Explanation: An optimal placement for the antenna would be somewhere in the middle of the grid where it can cover all the buildings within the radius of 2. Implement the function `maxCoveredBuildings(m, n, r, grid)` that solves the problem.","solution":"def maxCoveredBuildings(m, n, r, grid): def calculate_coverage(x, y, r, m, n, grid): count = 0 for i in range(max(0, x - r), min(m, x + r + 1)): for j in range(max(0, y - r), min(n, y + r + 1)): if abs(x - i) + abs(y - j) <= r: count += 1 return count max_coverage = 0 for i in range(m): for j in range(n): coverage = calculate_coverage(i, j, r, m, n, grid) max_coverage = max(max_coverage, coverage) return max_coverage"},{"question":"You are given an array of integers representing a sequence of steps taken by a robot on a 2D plane, where each step is one of four possible directions: \\"up\\", \\"down\\", \\"left\\", or \\"right\\". Your task is to determine the final coordinates of the robot starting from the origin (0, 0). The steps are given in the form of a string array, where each element is a direction. Write a function that takes an array of strings representing the steps and returns a tuple of two integers representing the final coordinates of the robot. Your code should have the following signature: ```python def final_coordinates(steps: List[str]) -> Tuple[int, int]: ``` Here is the example of the steps and expected output: **Example:** ```python steps = [\\"up\\", \\"up\\", \\"left\\", \\"down\\", \\"left\\"] print(final_coordinates(steps)) # Output: (-2, 1) ```","solution":"from typing import List, Tuple def final_coordinates(steps: List[str]) -> Tuple[int, int]: x, y = 0, 0 for step in steps: if step == \\"up\\": y += 1 elif step == \\"down\\": y -= 1 elif step == \\"left\\": x -= 1 elif step == \\"right\\": x += 1 return x, y"},{"question":"You are given a list of integers representing the distances between several cities and the capital city. The distances are given in kilometers, and you need to help your countrymen find the median distance to the capital. Note that the median of a set of numbers is the middle number when the numbers are sorted in non-decreasing order. If there is an even number of elements, the median is the average of the two middle numbers. The first line of the input contains a single integer n (1 leq n leq 10^5), the number of cities. The second line contains n integers d_1, d_2, dots, d_n (1 leq d_i leq 10^9), where d_i denotes the distance of the i-th city from the capital. Output the median distance rounded down to the nearest integer. For example: Input: ``` 5 1 3 4 2 5 ``` Output: ``` 3 ``` Input: ``` 4 4 2 1 3 ``` Output: ``` 2 ``` In both examples, the program should correctly determine and output the median distance to the capital.","solution":"def find_median_distance(n, distances): Returns the median distance from a list of distances. The median is defined as the middle number in a sorted list, or the average of two middle numbers if the list is even. :param n: Number of distance entries. :param distances: List of distances. :return: The median distance rounded down to the nearest integer. sorted_distances = sorted(distances) middle = n // 2 if n % 2 == 0: median = (sorted_distances[middle - 1] + sorted_distances[middle]) // 2 else: median = sorted_distances[middle] return median"},{"question":"You are given a sequence of n integers represented by an array A. Your task is to find out if there is a contiguous subarray whose elements sum up to a given integer S. If such a subarray exists, return the starting and ending positions (1-indexed) of one such subarray. If there are multiple possible answers, return any one of them. If no such subarray exists, return `-1`. # Input - The first line of input contains an integer t (1 le t le 1000) — the number of test cases. - For each test case: - The first line contains two integers n (1 le n le 10^5) and S (1 le S le 10^9). - The second line contains n integers, the elements of array A (-10^4 le A[i] le 10^4). It is guaranteed that the sum of n over all test cases does not exceed 10^5. # Output - For each test case, if there exists such a subarray, print the starting and ending positions of the subarray (1-indexed). If multiple answers exist, print any one of them. - If no such subarray exists, print `-1`. # Example Input ``` 2 5 12 1 2 3 7 5 5 15 1 2 3 4 5 ``` Output ``` 2 4 1 5 ``` # Note In the first test case, the subarray that sums to 12 is [2, 3, 7], and its starting and ending positions are 2 and 4. In the second test case, the subarray that sums to 15 is [1, 2, 3, 4, 5], and its starting and ending positions are 1 and 5.","solution":"def find_subarray_with_given_sum(t, test_cases): results = [] for case in test_cases: n, S, A = case current_sum = 0 start = 0 found = False for end in range(n): current_sum += A[end] while current_sum > S and start <= end: current_sum -= A[start] start += 1 if current_sum == S: results.append((start + 1, end + 1)) found = True break if not found: results.append(-1) return results"},{"question":"Given an array of integers, you are to determine if it can be divided into two subsets such that the sums of the elements in both subsets are equal. If it is possible, return true; otherwise, return false. # Input The input consists of a single line containing a space-separated list of integers, which represents the array of integers. The number of elements in the array will be at least 1 and will not exceed 1000. Each integer in the array will be between -100 and 100. # Output Your program should output a single line containing either \\"true\\" if it\'s possible to partition the array into two subsets with equal sums, or \\"false\\" otherwise. # Example Input ``` 1 5 11 5 ``` Output ``` true ``` Input ``` 1 2 3 5 ``` Output ``` false ``` # Notes - Consider using dynamic programming to efficiently solve the problem. - Keep in mind the constraints on the size and range of the numbers in the array.","solution":"def can_partition(nums): total_sum = sum(nums) # If the total sum is odd, return False as it cannot be divided into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"You are given an unsorted array of n integers, and you need to find the length of the longest increasing subsequence (LIS). The LIS is a sequence of integers from the array that is strictly increasing and does not need to be contiguous. The input array may contain duplicates, and they should be considered as part of the LIS if in sequence. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n integers separated by single spaces, representing the array elements. Each element in the array is between 1 and 10^9, inclusive. Output: - Print a single integer, the length of the longest increasing subsequence in the array. Example: Input: ``` 8 10 9 2 5 3 7 101 18 ``` Output: ``` 4 ``` Explanation: The longest increasing subsequence is [2, 3, 7, 101], so the output is 4. Other increasing subsequences like [2, 5, 7, 101] also have a length of 4.","solution":"import bisect def length_of_lis(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 lis = [] for num in arr: idx = bisect.bisect_left(lis, num) if idx == len(lis): lis.append(num) else: lis[idx] = num return len(lis)"},{"question":"Write a function that takes an integer n (1 ≤ n ≤ 10^4) and returns the nth term of the Fibonacci sequence. The sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2), for n > 1. The result should be modulo 10^9 + 7. Your code should be optimized to handle the upper constraint efficiently.","solution":"def fibonacci(n): Returns the nth term of the Fibonacci sequence, modulo 10^9 + 7. MOD = 10**9 + 7 if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, (a + b) % MOD return b"},{"question":"A new startup is launching a unique social networking app called \\"Friend Circles,\\" where users form circles of friends based on common interests. Each user has a list of interests, and a user can join a friend circle if they share at least one interest with another member of that circle. Given a list of users and their interests, you are to write a program that determines how many distinct friend circles can be formed. Each friend circle is allowed to grow by adding new users who share an interest with at least one existing member. # Input: - The first line contains an integer n (1 ≤ n ≤ 2000), the number of users. - The following n lines each describe one user. Each line starts with an integer ki (1 ≤ ki ≤ 10^4), the number of interests the user has, followed by ki distinct space-separated strings, each representing an interest. # Output: - Print a single integer representing the number of distinct friend circles formed. # Example: Input: ``` 5 3 gaming music climbing 2 music reading 2 climbing cooking 3 reading writing hiking 2 hiking cooking ``` Output: ``` 1 ``` # Explanation: In the example above, all 5 users share interests that connect them into a single friend circle: - User 1 shares \\"music\\" with User 2, - User 1 shares \\"climbing\\" with User 3, - User 2 shares \\"reading\\" with User 4, - User 3 shares \\"cooking\\" with User 5, - User 4 shares \\"hiking\\" with User 5. Thus, all users are connected either directly or indirectly through shared interests, forming one large friend circle.","solution":"def find_friend_circles(n, users_interests): from collections import defaultdict, deque def bfs(start, visited, graph): # Breadth First Search to mark all connected nodes queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Create a dictionary to map each interest to the users who have that interest interest_to_users = defaultdict(list) for user_id, interests in enumerate(users_interests): for interest in interests: interest_to_users[interest].append(user_id) # Create a graph where nodes are users and edges exist if users share an interest graph = defaultdict(list) for users in interest_to_users.values(): for i in range(len(users)): for j in range(i + 1, len(users)): graph[users[i]].append(users[j]) graph[users[j]].append(users[i]) # Use BFS or DFS to find connected components visited = set() friend_circles = 0 for user in range(n): if user not in visited: visited.add(user) bfs(user, visited, graph) friend_circles += 1 return friend_circles # To be used in a convenient way: def main(n, inputs): users_interests = [input_case.split()[1:] for input_case in inputs.split(\'n\')] return find_friend_circles(n, users_interests)"},{"question":"Alice has a peculiar habit of arranging her library books in a specific order. She notes down the publishing year of each book and arranges them such that no two books published in the same year are placed next to each other on the same shelf. She recently obtained a collection of books and wants to know the maximum number of books she can arrange on her shelf according to her unique requirement. You are given an array `books` of length `n` (1 ≤ n ≤ 200,000), where `books[i]` is the publishing year of the i-th book. Two books published in the same year cannot be placed next to each other. Find the maximum number of books Alice can place on her shelf in the desired order. # Input - The first line contains an integer `n` — the number of books in the collection. - The second line contains `n` integers `books[1], books[2], ..., books[n]` — publishing years of the books. # Output - Return a single integer — the maximum number of books Alice can place on her shelf according to her requirement. # Example Input ```plaintext 5 2001 2002 2001 2003 2002 ``` Output ```plaintext 3 ``` Explanation One possible arrangement is placing books with publishing years 2001, 2002, and 2003 on the shelf. # Note - In this example, both books with the year 2001 cannot be placed next to each other. - The same applies to books published in the year 2002.","solution":"def max_books(books): Returns the maximum number of books that can be placed on the shelf such that no two books with the same publishing year are next to each other. return len(set(books))"},{"question":"Nina loves listening to her music playlist but she has noticed a problem! Her playlist consists of n songs, each represented by a unique integer from 1 to n, arranged in a sequence. Sometimes, due to some error in her music app, certain songs keep repeating consecutively. Nina wants to remove all consecutive duplicates in her playlist to have a clean list where no song appears consecutively. Create an algorithm to help Nina achieve this. Given the playlist of n integers representing the songs, output the modified playlist by removing all consecutive duplicates. If there are no consecutive duplicates, the playlist should remain unchanged. # Input - The first line contains an integer t (1 le t le 100), the number of test cases. - The first line of each test case contains an integer n (1 leq n leq 10^5) — the length of the playlist. - The second line of each test case contains n integers a_{1}, a_{2}, ldots, a_{n} (1 leq a_{i} leq n) — the playlist. It is guaranteed that the sum of n over all test cases does not exceed 10^5. # Output For each test case, output the modified playlist, which has all consecutive duplicates removed. # Example Input ``` 3 5 1 2 2 3 3 6 1 1 1 1 1 1 7 1 2 3 4 5 6 7 ``` Output ``` 1 2 3 1 1 2 3 4 5 6 7 ``` In the first case, the output is `[1, 2, 3]` because the consecutive duplicates `2` and `3` are removed. In the second case, the output is `[1]` because all the elements are the same. In the third case, the playlist is already without consecutive duplicates, so it remains the same.","solution":"def remove_consecutive_duplicates(n, playlist): Removes consecutive duplicates from the playlist. Parameters: n (int): Length of the playlist. playlist (list of int): The playlist consisting of song IDs. Returns: list of int: The modified playlist with no consecutive duplicates. if n == 0: return [] cleaned_playlist = [playlist[0]] for i in range(1, n): if playlist[i] != playlist[i-1]: cleaned_playlist.append(playlist[i]) return cleaned_playlist def process_playlists(test_cases): Processes multiple test cases and applies remove_consecutive_duplicates function. Parameters: test_cases (list of tuples): Each tuple contains (n, playlist) representing a test case. Returns: list of list of int: List of cleaned playlists for each test case. results = [] for n, playlist in test_cases: results.append(remove_consecutive_duplicates(n, playlist)) return results"},{"question":"You are given a rectangular grid of size n x m filled with integers. Your task is to cut the grid into exactly two rectangular pieces such that the sum of numbers in one piece is equal to the sum of numbers in the other piece. Each piece must be a single contiguous subgrid of the original grid. Additionally, the subgrids should be disjoint, meaning they cannot share any common cell. Write a function `can_split_grid(n, m, grid)` that returns a boolean value indicating whether it is possible to split the grid into two such rectangular pieces. # Input - An integer `n` (1 ≤ n ≤ 50) — the number of rows of the grid. - An integer `m` (1 ≤ m ≤ 50) — the number of columns of the grid. - A 2D list `grid` of size n x m containing integers (-1000 ≤ grid[i][j] ≤ 1000) — the grid itself. # Output - Return `True` if it is possible to split the grid into two pieces with equal sum, otherwise return `False`. # Function Signature ```python def can_split_grid(n: int, m: int, grid: List[List[int]]) -> bool: ``` # Example ```python # Example 1 n, m = 2, 2 grid = [ [1, 1], [1, 1] ] print(can_split_grid(n, m, grid)) # Output: True # Example 2 n, m = 2, 2 grid = [ [1, 2], [3, 4] ] print(can_split_grid(n, m, grid)) # Output: False ``` # Note - In the first example, the grid can be split horizontally or vertically. - In the second example, it is not possible to split the grid into two pieces such that their sums are equal.","solution":"def can_split_grid(n, m, grid): Determines if the grid can be split into two contiguous subgrids with equal sum. total_sum = sum(sum(row) for row in grid) # If the total sum is odd, it\'s not possible to split into two equal parts if total_sum % 2 != 0: return False # Target sum for each subgrid half_sum = total_sum // 2 # Check horizontal cuts for row in range(1, n): top_sum = sum(sum(grid[i]) for i in range(row)) if top_sum == half_sum: return True # Check vertical cuts for col in range(1, m): left_sum = sum(grid[i][j] for i in range(n) for j in range(col)) if left_sum == half_sum: return True return False"},{"question":"Zara is planning to organize a grand exhibition. The exhibition hall is arranged as a grid of n rows and m columns. Each cell in the grid can either be empty or contain an obstacle. Zara wants to place k exhibition stalls in the hall such that no two stalls are in the same row or column and none of the stalls are placed within a cell containing an obstacle. Given the layout of the exhibition hall and the number of stalls to be placed, determine if it is possible for Zara to place all k stalls without any conflicts. If it is possible, print \\"YES\\" along with one possible configuration showing the placement of stalls. If it is not possible, print \\"NO\\". The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ min(n, m)) — the number of rows, columns, and stalls respectively. The next n lines each contain m characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). If it is possible to place all k stalls as described, print \\"YES\\". Then, print the grid with the placement of the stalls. Use the character \'S\' to denote a cell with a stall. If it is not possible, print \\"NO\\". Example input: ``` 4 5 3 ..... .#... ..#.. ...#. ``` Example output: ``` YES S.... .#... ..S.. ...S. ``` Explanation: Zara can place stalls at positions (1, 1), (3, 3), and (4, 4), satisfying all the conditions. Another configuration could be: ``` YES .S... .#... ..S.. ...S. ``` Here, stalls are placed at positions (1, 2), (3, 3), and (4, 4), meeting the same requirements.","solution":"def can_place_stalls(n, m, k, layout): def is_safe(row, col, stalls_positions): # Check if the chosen row or column already has a stall for r, c in stalls_positions: if r == row or c == col: return False return True def solve_recursive(row_index, stalls_positions): if len(stalls_positions) == k: # We have placed all stalls return True, stalls_positions if row_index >= n: # We have exhausted all rows return False, [] for col_index in range(m): if layout[row_index][col_index] == \'.\' and is_safe(row_index, col_index, stalls_positions): stalls_positions.append((row_index, col_index)) result, positions = solve_recursive(row_index + 1, stalls_positions) if result: return True, positions stalls_positions.pop() # backtrack return solve_recursive(row_index + 1, stalls_positions) possible, positions = solve_recursive(0, []) if possible: print(\\"YES\\") result_grid = [list(row) for row in layout] for r, c in positions: result_grid[r][c] = \'S\' for line in result_grid: print(\'\'.join(line)) else: print(\\"NO\\")"},{"question":"Given a rectangular grid of size `n x m` where some cells are blocked and others are free, determine the number of ways to reach the bottom-right cell from the top-left cell. You can only move right or down from a cell and cannot move into blocked cells. You will be given: 1. An integer `n` representing the number of rows. 2. An integer `m` representing the number of columns. 3. A list of tuples where each tuple `(i, j)` represents a blocked cell located at the `i-th` row and `j-th` column. Print the number of unique ways to reach the bottom-right cell from the top-left cell. If there is no way to reach the target, return 0. # Input Format - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The second line contains an integer `k` (0 ≤ k ≤ 10^6) representing the number of blocked cells. - The next `k` lines each contains two integers `i` and `j` (1 ≤ i ≤ n, 1 ≤ j ≤ m) indicating that the cell (i, j) is blocked. # Output Format Print one integer — the number of unique ways to reach the bottom-right cell from the top-left cell. # Example Input ``` 4 4 3 2 2 3 3 4 2 ``` Output ``` 2 ```","solution":"def count_paths(n, m, blocked_cells): Returns the number of unique ways to reach the bottom-right cell from the top-left cell in a grid with blocked cells. # Create a dp table with all zero values initially dp = [[0] * m for _ in range(n)] # Set of blocked cells for quick lookup blocked = set(tuple(cell) for cell in blocked_cells) # If the starting point is blocked, return 0 if (1, 1) in blocked: return 0 # Starting point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if (i + 1, j + 1) in blocked: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[n - 1][m - 1] # Example usage: # print(count_paths(4, 4, [(2, 2), (3, 3), (4, 2)])) # Expected output: 2"},{"question":"You are given a rectangular grid of size n × m, where each cell may either contain a tree, represented by \'T\', or be empty, represented by \'.\'. A fire has started in one of the empty cells and spreads to its neighboring cells (top, bottom, left, right) each minute. The fire can only spread to empty cells and does not cross through trees. You need to determine the minimum time required for the fire to completely burn all accessible empty cells. The input comprises the following: - The first line contains three integers n, m, and t (1 ≤ n, m ≤ 500, and 1 ≤ t ≤ n·m) — the size of the grid and the number of cells on fire at the start. - The next line contains t pairs of integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) describing the coordinates of the starting points of the fire. - The following n lines describe the grid layout, where each cell contains either \'T\' or \'.\'. Output the minimum time needed for the fire to spread to all accessible empty cells. If there are cells that the fire cannot reach, output -1. # Example Input ``` 5 6 2 1 2 4 4 TT.... T..... TTT... .T.... ....T. ``` Output ``` 5 ``` In this example, the fire starts at cells (1,2) and (4,4) and spreads to all accessible empty cells in 5 minutes.","solution":"from collections import deque def min_time_to_burn_all_cells(n, m, t, starting_points, grid): Calculate the minimum time required for fire to spread to all accessible empty cells in the grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param t: Number of initial fire starting points. :param starting_points: List of tuples representing coordinates of the starting points. :param grid: List of strings representing the grid layout. :return: The minimum time required for the fire to spread to all accessible empty cells, if possible. Otherwise, return -1. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque() for x, y in starting_points: queue.append((x-1, y-1, 0)) # convert to 0-based index and add the initial time 0 visited[x-1][y-1] = True max_time = 0 while queue: x, y, time = queue.popleft() max_time = max(max_time, time) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, time + 1)) for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not visited[i][j]: return -1 return max_time"},{"question":"You are given a string consisting of lowercase Latin letters. A string is called \\"well-formed\\" if it contains no consecutive occurrences of the same letter more than once. For example, the string \\"abba\\" is not well-formed because it contains two consecutive \'b\'s, while the string \\"abaca\\" is well-formed because there are no consecutive letters that repeat more than once. Your task is to calculate the length of the longest well-formed substring that can be obtained from the given string by deleting some (possibly zero) characters. Note that the characters in the resulting substring should still appear in the order they were in the original string. The only line of input contains a string s (1 ≤ |s| ≤ 10^6) consisting of lowercase Latin letters. Print the length of the longest well-formed substring of the given string. # Example Input: abccbcba Output: 5 Explanation: One example of the longest well-formed substring is \\"abcba\\". Another example is \\"abcbc\\".","solution":"def longest_well_formed_substring(s): Returns the length of the longest well-formed substring from a given string. if not s: return 0 max_length = 0 current_length = 1 for i in range(1, len(s)): if s[i] != s[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"You are given an integer array nums of length n and two integers k and m. Your task is to check if there exists a subarray of length exactly k whose sum is divisible by m. For example, for the array [1, 2, 3, 4, 5, 6], k = 3, and m = 3, the subarray [3, 4, 5] has a sum of 12, which is divisible by 3. The first line of the input contains three integers n, k, and m (1 le k le n le 1000, 1 le m le 100). The second line of the input contains n integers representing the array nums (-10^4 le nums[i] le 10^4). Print \\"YES\\" if such a subarray exists, otherwise print \\"NO\\".","solution":"def has_subarray_divisible_by_m(nums, k, m): Checks if there exists a subarray of length exactly k whose sum is divisible by m. :param nums: List[int], the list of integers :param k: int, the length of the subarray :param m: int, the divisor :return: str, \\"YES\\" if such a subarray exists, otherwise \\"NO\\" n = len(nums) if n < k: return \\"NO\\" current_sum = sum(nums[:k]) if current_sum % m == 0: return \\"YES\\" for i in range(k, n): current_sum += nums[i] - nums[i - k] if current_sum % m == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are organizing a coding competition where each contestant\'s identifier is a permutation of the lowercase Latin letters. The scores of the contestants are given out sequentially during the competition. However, you need to sort the scores in a special way to determine the final ranks. To determine the final rank, you should sort the scores lexicographically by the identifier of each contestant when modified with a special order of letters in the Latin alphabet. The order of letters will be provided and it specifies the new priority of letters from highest to lowest. Given the order of letters and a list of contestant identifiers along with their scores, you need to sort the scores according to the modified lexicographical order of the identifiers. The first line of input contains a string of length 26. It includes all the lowercase Latin letters in a custom order which defines the new lexicographical priority. The second line contains an integer n (1 ≤ n ≤ 100): the number of contestants. Each of the following n lines contains a contestant\'s identifier string (which is a permutation of all 26 lowercase Latin letters) and an integer score separated by a space. Output the list of scores sorted according to the modified lexicographical order of the identifiers. Print each score on a new line in the sorted order. Example: Input: zyxwvutsrqponmlkjihgfedcba 3 abcdefghijklmnopqrstuvwxyz 100 zyxwvutsrqponmlkjihgfedcba 200 bacdefghijklmnopqrstuvwxyz 150 Output: 200 150 100","solution":"def custom_sort(order, n, contestants): Sort the contestants based on the custom lexicographical order. :param order: A string of length 26 specifying the new order of letters. :param n: Number of contestants. :param contestants: List of tuples, where each tuple contains a string identifier and a score. :return: List of scores sorted based on the custom order of identifiers. # Create a mapping from character to its priority priority = {char: i for i, char in enumerate(order)} # Define a key function for sorting def sort_key(contestant): identifier, score = contestant # Convert the identifier to its priority using the defined order return [priority[char] for char in identifier] # Sort the contestants based on the custom order of their identifiers sorted_contestants = sorted(contestants, key=sort_key) # Extract sorted scores sorted_scores = [score for _, score in sorted_contestants] return sorted_scores def parse_input(input_lines): Parses input lines and structures them into appropriate parameters for custom_sort function. order = input_lines[0] n = int(input_lines[1]) contestants = [(line.split()[0], int(line.split()[1])) for line in input_lines[2:]] return order, n, contestants def process_input(input_str): Process multiline input string and sorts the scores based on custom lexicographical order. :param input_str: Multiline input string :return: List of sorted scores input_lines = input_str.strip().split(\'n\') order, n, contestants = parse_input(input_lines) return custom_sort(order, n, contestants)"},{"question":"Given an array of integers, determine whether the sum of the elements is divisible by a given integer k. If divisible, return `true`, otherwise return `false`. **Input:** - The first line of input contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 1 000). - The second line contains n integers separated by spaces, each element of the array (|a_i| ≤ 1000). **Output:** - Output a single line containing `true` if the sum of the array elements is divisible by k, otherwise output `false`. **Example:** Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` true ``` Input: ``` 4 7 4 2 6 1 ``` Output: ``` false ``` Explanation: - In the first example, the sum of the elements is 15, which is divisible by 3. - In the second example, the sum of the elements is 13, which is not divisible by 7.","solution":"def is_sum_divisible_by_k(n, k, array): Determines if the sum of the array elements is divisible by k. Params: n (int): Number of elements in the array. k (int): The integer to check divisibility against. array (list of int): The array of integers. Returns: bool: True if the sum of the array elements is divisible by k, otherwise False. total_sum = sum(array) return total_sum % k == 0"},{"question":"You are given an undirected graph with n vertices and m edges. You should handle the following types of queries: 1. Add a given weight to all the edges of the graph. 2. Retrieve the maximum edge weight of the graph. The initial weight of all edges is zero. Here are the input constraints: - The first line contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000) — the number of vertices and edges in the graph, respectively. - The following m lines contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n) indicating that there is an edge between vertices u_i and v_i. - The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. - Each of the next q lines contains a query in one of the following formats: - `1 w` — add a weight of w (| w | ≤ 10^6) to all the edges of the graph. - `2` — output the maximum edge weight currently in the graph. It is guaranteed that all edges are distinct. Output the results of all queries of the second type. # Sample Input: ``` 4 4 1 2 2 3 3 4 4 1 5 1 3 2 1 -2 2 1 4 2 ``` # Sample Output: ``` 3 1 5 ``` # Explanation: The edges between vertices are initially 1-2, 2-3, 3-4, and 4-1 with initial weights of 0. 1. After the first query `1 3`, all edge weights become 3. 2. Query `2` asks for the maximum edge weight, which is 3. 3. After the query `1 -2`, all edge weights become 1. 4. Query `2` asks for the maximum edge weight, which is 1. 5. After the query `1 4`, all edge weights become 5. 6. Query `2` asks for the maximum edge weight, which is 5.","solution":"def handle_queries(n, m, edges, queries): Given the number of vertices, edges, list of edges, and queries, the function handles the queries to modify and return edge weights. :param n: int - Number of vertices :param m: int - Number of edges :param edges: list of tuples - Each tuple (u, v) representing an edge :param queries: list of tuples - Each tuple representing a query :return: list of int - Results of all type 2 queries current_max_weight = 0 results = [] for query in queries: if query[0] == 1: # Add weight to all edges weight_addition = query[1] current_max_weight += weight_addition elif query[0] == 2: # Output the maximum edge weight results.append(current_max_weight) return results"},{"question":"Implement a function that takes a binary string and reverses all bits. For a given string of 1s and 0s, return a new string where each bit is flipped, i.e., 1s are changed to 0s and 0s are changed to 1s. # Example Input: `\\"10101\\"` Output: `\\"01010\\"` Input: `\\"1110\\"` Output: `\\"0001\\"` # Constraints - The input will be a string with a length between 1 and 1000. - The input string will only contain \'1\'s and \'0\'s. Create the function with the following signature: ```python def reverse_bits(binary_string: str) -> str: pass ``` You are required to implement the `reverse_bits` function that performs the bit reversals and returns the resulting string.","solution":"def reverse_bits(binary_string: str) -> str: This function takes a binary string and reverses (flips) all bits. 1s are changed to 0s and 0s are changed to 1s. Parameters: binary_string (str): A string containing only \'1\'s and \'0\'s. Returns: str: The input string with all bits reversed. return \'\'.join(\'1\' if bit == \'0\' else \'0\' for bit in binary_string)"},{"question":"You are given a list of n integers. For each element, output its product with the next element in the list. For the last element, output its product with the first element of the list. The input consists of a single line of space-separated integers. The first number is n (3 ≤ n ≤ 100) — the size of the list. The following n numbers are the elements of the list (1 ≤ ai ≤ 200). Output the products a1 * a2, a2 * a3, ..., an-1 * an, an * a1, separated with spaces.","solution":"def product_with_next_element(n, elements): # Initialize an empty result list to store the products result = [] # Calculate the products for each element except the last for i in range(n - 1): result.append(elements[i] * elements[i + 1]) # Calculate the product for the last element with the first element result.append(elements[-1] * elements[0]) # Return the list of products return result"},{"question":"You have been hired to design a simple text editor with a unique feature. In addition to typical text editing capabilities (insert and delete operations), the editor supports a special undo mechanism. Specifically, there are two types of undo operations: undo the last insertion and undo the last deletion, independently of each other. You need to implement this text editor and ensure that the undo operations work as described. # Inputs and Outputs The text editor will process a series of operations. Each operation is represented by a string: 1. \\"INSERT x\\" — Insert the substring x at the end of the current text. 2. \\"DELETE n\\" — Delete the last n characters of the current text. If n is greater than the current length of the text, delete all characters. 3. \\"UNDO_INSERT\\" — Undo the last insert operation. 4. \\"UNDO_DELETE\\" — Undo the last delete operation. 5. \\"PRINT\\" — Print the current text. # Requirements 1. Implement the text editor and process the operations in the order they are given. 2. Handle each operation correctly, especially the UNDO_INSERT and UNDO_DELETE operations, which should reverse the effects of the last corresponding INSERT or DELETE operation respectively. 3. Ensure the program behaves correctly, even if multiple undo operations are issued consecutively. # Example **Input:** ``` INSERT hello INSERT world DELETE 3 UNDO_DELETE UNDO_INSERT PRINT ``` **Output:** ``` helloworld ``` **Explanation:** 1. After \\"INSERT hello\\" the text is \\"hello\\". 2. After \\"INSERT world\\" the text is \\"helloworld\\". 3. After \\"DELETE 3\\" the text is \\"hellowo\\". 4. After \\"UNDO_DELETE\\" the text returns to \\"helloworld\\". 5. After \\"UNDO_INSERT\\" the text becomes \\"hello\\". 6. Finally, \\"PRINT\\" prints \\"hello\\". # Constraints - The number of operations will not exceed 100,000. - The length of any substring x in an \\"INSERT x\\" operation will not exceed 1,000 characters. - The deletion length n will be a non-negative integer. Create a function `text_editor(operations: List[str]) -> List[str]` where `operations` is a list of strings representing the series of operations, and the function returns a list of strings representing the state of the editor after each \\"PRINT\\" operation.","solution":"def text_editor(operations): text = \\"\\" insert_stack = [] delete_stack = [] result = [] for operation in operations: if operation.startswith(\\"INSERT\\"): substr = operation.split(\\" \\", 1)[1] text += substr insert_stack.append(substr) elif operation.startswith(\\"DELETE\\"): n = int(operation.split(\\" \\", 1)[1]) if n > len(text): n = len(text) deleted_substr = text[-n:] if n > 0 else \\"\\" text = text[:-n] delete_stack.append(deleted_substr) elif operation == \\"UNDO_INSERT\\": if insert_stack: last_insert = insert_stack.pop() if len(last_insert) <= len(text): text = text[:-len(last_insert)] elif operation == \\"UNDO_DELETE\\": if delete_stack: last_delete = delete_stack.pop() text += last_delete elif operation == \\"PRINT\\": result.append(text) return result"},{"question":"You are given two strings `S1` and `S2`. Determine the length of the longest common substring between the two strings. A substring is a contiguous sequence of characters within a string. The input consists of two lines: - The first line contains the string `S1` (1 ≤ |S1| ≤ 1000), the length of `S1` ranges between 1 and 1000. - The second line contains the string `S2` (1 ≤ |S2| ≤ 1000), the length of `S2` ranges between 1 and 1000. Output the length of the longest common substring between `S1` and `S2`. **Examples** Input: ``` ABABC BABCAB ``` Output: ``` 4 ``` Input: ``` XYZ ABC ``` Output: ``` 0 ```","solution":"def longest_common_substring(S1, S2): Returns the length of the longest common substring between two strings S1 and S2. m, n = len(S1), len(S2) # Create a table to store lengths of longest common suffixes of substrings # LCSuff[i][j] will be the length of the longest common suffix of S1[0...i-1] and S2[0...j-1] LCSuff = [[0] * (n + 1) for _ in range(m + 1)] result = 0 # To store length of the longest common substring # Building the LCSuff matrix in bottom-up fashion for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: LCSuff[i][j] = 0 elif S1[i - 1] == S2[j - 1]: LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1 result = max(result, LCSuff[i][j]) else: LCSuff[i][j] = 0 return result"},{"question":"A logistics company manages cargo trucks that travel across multiple cities. Each truck has a predefined maximum load capacity. The company needs an algorithm to determine whether it\'s possible for a set of trucks to transport a given cargo load efficiently. Your task is to write a function to check if the cargo can be distributed among the trucks such that no truck exceeds its load capacity. You are given the cargo weight, a list of the trucks\' maximum load capacities, and the number of trucks. # Function Signature ```python def can_distribute_cargo(cargo_weight: int, truck_capacities: List[int], num_trucks: int) -> bool: ``` # Input - `cargo_weight` (int): The total weight of the cargo to be transported. (1 ≤ cargo_weight ≤ 10^6) - `truck_capacities` (List[int]): A list of integers representing the maximum load capacity of each truck. Each value in the list is between 1 and 10^4. - `num_trucks` (int): The number of trucks available. (1 ≤ num_trucks ≤ 1000) # Output - Return a boolean value: `True` if the cargo can be distributed among the trucks such that no truck exceeds its capacity, `False` otherwise. # Example ```python print(can_distribute_cargo(500, [100, 150, 200, 50, 100], 5)) # Output: True print(can_distribute_cargo(800, [100, 150, 200, 50, 100], 5)) # Output: False print(can_distribute_cargo(0, [100, 150, 200], 3)) # Output: True print(can_distribute_cargo(700, [300, 200, 300], 3)) # Output: True ``` # Constraints - The function should handle the distribution efficiently. - Consider edge cases where the required cargo load is zero or when the number of trucks is minimal.","solution":"from typing import List def can_distribute_cargo(cargo_weight: int, truck_capacities: List[int], num_trucks: int) -> bool: Determines if the cargo can be distributed among the trucks such that no truck exceeds its capacity. if cargo_weight == 0: return True if num_trucks == 0 or len(truck_capacities) != num_trucks: return False truck_capacities.sort(reverse=True) for capacity in truck_capacities: if cargo_weight <= 0: return True cargo_weight -= capacity return cargo_weight <= 0"},{"question":"You are given two strings, s and t, where t is a string generated by an arbitrary number of drag-and-drop operations over s. Each drag-and-drop operation consists of choosing a contiguous substring of s and moving it to another position in s. Your task is to determine whether it is possible to obtain string t from string s by any number of such drag-and-drop operations. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) representing the length of the strings s and t. The second line contains the string s consisting of n lowercase English letters. The third line contains the string t consisting of n lowercase English letters. If it is possible to obtain t from s by any number of drag-and-drop operations, print \\"YES\\". Otherwise, print \\"NO\\". For example: Input: 5 abcde deabc Output: YES In this example, we can obtain t (\\"deabc\\") from s (\\"abcde\\") by dragging the substring \\"abc\\" and dropping it after \\"de\\".","solution":"def can_obtain_by_drag_and_drop(s, t): Check if it is possible to obtain string t from string s by any number of contiguous substring drag-and-drop operations. Args: s (str): The original string. t (str): The target string. Returns: str: \'YES\' if t can be obtained from s, otherwise \'NO\'. # The length of the strings should be the same. if len(s) != len(t): return \'NO\' # A concatenated version of \'s\' will always contain all possible rotations of \'s\'. concatenated_s = s + s if t in concatenated_s: return \'YES\' else: return \'NO\'"},{"question":"Ivan, the Farmer, loves certain sequences he calls \\"MOO sequences\\". A sequence is a MOO sequence if it starts with a given integer a1, and each subsequent element is computed using the formula ai+1 = (ai * m + b) % p, where m and b are fixed integers, and p is a prime number. Ivan is interested in knowing how many distinct values one can find in the first n elements of a MOO sequence. Write a program that takes the integers a1, m, b, p, and n, and determines the number of distinct values in the sequence generated. Input: - A single line containing five integers a1, m, b, p, and n (1-based indexing) (1 ≤ a1, m, b, p ≤ 1,000,000; 1 ≤ n ≤ 1,000,000; p is a prime number). Output: - Print a single integer, the number of distinct values in the first n elements of the MOO sequence. Example: Input: 1 2 3 7 5 Output: 5 Explanation: The sequence is [1, 5, 6, 1, 5]. There are 3 distinct values: 1, 5, 6.","solution":"def distinct_moo_values(a1, m, b, p, n): Returns the number of distinct values in the first n elements of a MOO sequence. Parameters: a1 (int): The first element of the sequence. m (int): The multiplier used to compute the next value in the sequence. b (int): The increment used to compute the next value in the sequence. p (int): The modulo used in the formula. n (int): The length of the sequence. Returns: int: The number of distinct values in the sequence of length n. values = set() current_value = a1 for _ in range(n): values.add(current_value) current_value = (current_value * m + b) % p return len(values)"},{"question":"You\'re given an array of integers where each integer can be counted multiple times. Your task is to transform this array so that no two adjacent elements are equal. To achieve this, you can replace any element with any other integer. Your goal is to minimize the total number of replacements required. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers ai (1 ≤ ai ≤ 100,000) — the elements of the array. Print one integer — the minimum number of replacements required to ensure that no two adjacent elements are equal. **Example:** Input: 5 4 4 4 4 4 Output: 2 Input: 6 1 3 3 1 2 3 Output: 1 **Explanation:** In the first example, you can replace the second and fourth elements to get the array [4, 1, 4, 1, 4] which requires 2 replacements. In the second example, you can replace the third element to get the array [1, 3, 1, 1, 2, 3] which requires 1 replacement.","solution":"def min_replacements_to_avoid_adjacent_equals(n, array): replacements = 0 for i in range(1, n): if array[i] == array[i-1]: replacements += 1 # Replace the current element with a different number (max possible number + 1 to avoid duplicates) array[i] = 100001 # As numbers are constrained in the range 1 to 100000 return replacements"},{"question":"You are given an undirected tree with `n` nodes numbered from 1 to `n`. The tree consists of `n-1` edges. Each edge is represented by a pair of integers `(u, v)` indicating there is an edge between node `u` and node `v`. Your task is to find the length of the longest path in the tree. This path is also known as the tree\'s diameter. Input: - The first line contains a single integer `n` (2 ≤ n ≤ 200000) — the number of nodes. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) representing an edge between nodes `u` and `v`. Output: - Print a single integer, the length of the longest path in the tree. Example: ``` Input: 5 1 2 1 3 2 4 2 5 Output: 3 ```","solution":"from collections import defaultdict, deque def find_longest_path(n, edges): Returns the length of the longest path in the undirected tree. if n == 2: return 1 # Step 1: Build adjacency list representation of the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to perform BFS and return the farthest node and its distance def bfs(start): visited = [-1] * (n + 1) queue = deque([(start, 0)]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() for neighbor in tree[node]: if visited[neighbor] == -1: visited[neighbor] = distance + 1 queue.append((neighbor, distance + 1)) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance # Step 2: Use BFS to find the farthest node from an arbitrary start node (node 1) farther_node_1, _ = bfs(1) # Step 3: Use BFS from the farthest node found to determine the diameter _, diameter = bfs(farther_node_1) return diameter"},{"question":"You are given a series of events in a parking lot and need to track the number of vehicles in the parking lot at different times. There is a parking lot with a capacity of n slots. Cars arrive and leave at different times throughout the day. Each event indicates whether a car arrives or leaves at a specific time. Your task is to calculate the maximum number of cars in the parking lot at any given time based on the events provided. The first line of input contains two integers n and m (1 le n, m le 1000) — the capacity of the parking lot and the number of events. Each of the next m lines describes an event with a string and an integer: the string can be either \\"arrive\\" or \\"leave\\", and the integer t (1 le t le 10000) represents the time of the event. If a car tries to arrive when the parking lot is full, the event is ignored. If a car tries to leave when the parking lot is empty, the event is ignored. Print one integer — the maximum number of cars that were in the parking lot at any time. # Example Input: ``` 3 6 arrive 1 arrive 2 arrive 3 leave 4 arrive 5 arrive 6 ``` Output: ``` 3 ``` Explanation: 1. At time=1, car arrives, parking lot state: [1] 2. At time=2, car arrives, parking lot state: [1, 2] 3. At time=3, car arrives, parking lot state: [1, 2, 3] (max capacity reached) 4. At time=4, car leaves, parking lot state: [1, 2] (one slot free) 5. At time=5, car arrives, parking lot state: [1, 2, 5] 6. At time=6, car arrives, but parking lot is full, so it\'s ignored Maximum number of cars in the parking lot was 3.","solution":"def max_cars_in_parking_lot(n, m, events): current_cars = 0 max_cars = 0 for event in events: action, time = event if action == \\"arrive\\": if current_cars < n: current_cars += 1 elif action == \\"leave\\": if current_cars > 0: current_cars -= 1 max_cars = max(max_cars, current_cars) return max_cars"},{"question":"The local library keeps track of book borrowings using a database. Each book in the library has a unique ID and is associated with a unique ISBN number, which contains up to 13 digits. Library members can check out books by providing their member ID along with the book ID. The borrowing records are stored chronologically and contain the member ID, book ID, and the date and time of borrowing. You are tasked with implementing a feature that identifies all members who have borrowed more than a specified number of unique books within a given time period. Additionally, discard members who have returned any book they borrowed within this period, as it suggests they were simply previewing books. Write a Python function `identify_prolific_borrowers(records: List[Tuple[int, int, str, str]], borrow_limit: int, start_date: str, end_date: str) -> List[int]` that takes in: - `records`: A list of tuples where each tuple represents a borrowing record in the format (member_id, book_id, borrow_date, return_date). The `borrow_date` and `return_date` are strings in the `YYYY-MM-DD` format. `return_date` can be an empty string if the book has not been returned. - `borrow_limit`: An integer representing the minimum number of unique books a member must borrow to be considered prolific. - `start_date`: A string representing the start date of the borrowing period in `YYYY-MM-DD` format. - `end_date`: A string representing the end date of the borrowing period in `YYYY-MM-DD` format. The function should return a list of member IDs who borrowed more than `borrow_limit` unique books within the specified date range and have not returned any of those books within the same date range. The list should be sorted in ascending order. # Constraints: - The length of `records` will not exceed 10^5 entries. - Book IDs and member IDs are positive integers. - All dates are valid and given in the correct `YYYY-MM-DD` format. - The library has up to 10^4 unique book IDs. # Example: ```python records = [ (1, 123, \\"2023-01-15\\", \\"\\"), (2, 456, \\"2023-02-10\\", \\"2023-02-20\\"), (1, 789, \\"2023-03-05\\", \\"\\"), (3, 123, \\"2023-03-10\\", \\"2023-03-15\\"), (1, 456, \\"2023-04-01\\", \\"\\"), (2, 789, \\"2023-04-01\\", \\"\\") ] borrow_limit = 1 start_date = \\"2023-01-01\\" end_date = \\"2023-03-31\\" identify_prolific_borrowers(records, borrow_limit, start_date, end_date) ``` Expected Output: ```python [1] ``` In this example, member 1 borrowed 2 unique books (IDs 123 and 789) within the specified date range and has not returned any of the borrowed books within that period. Member 2 returned the book they borrowed, and member 3 did not meet the borrowing limit.","solution":"from typing import List, Tuple from collections import defaultdict from datetime import datetime def identify_prolific_borrowers(records: List[Tuple[int, int, str, str]], borrow_limit: int, start_date: str, end_date: str) -> List[int]: # Convert start_date and end_date to datetime objects for comparison start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') # Data structure to hold borrowed book counts borrowed_books = defaultdict(set) # Data structure to check if a member has returned any book within the period returned_books_within_period = defaultdict(bool) for member_id, book_id, borrow_date_str, return_date_str in records: borrow_date = datetime.strptime(borrow_date_str, \'%Y-%m-%d\') if borrow_date >= start_date and borrow_date <= end_date: borrowed_books[member_id].add(book_id) if return_date_str: return_date = datetime.strptime(return_date_str, \'%Y-%m-%d\') if return_date >= start_date and return_date <= end_date: returned_books_within_period[member_id] = True prolific_borrowers = [ member_id for member_id, books in borrowed_books.items() if len(books) > borrow_limit and not returned_books_within_period[member_id] ] return sorted(prolific_borrowers)"},{"question":"Billing System Simulations You are hired to design a simplified billing system for a new utility service provider. The company wants to be able to add customers and generate monthly bills based on their usage. There are three types of customers: **Residential**, **Commercial**, and **Industrial**. Each type has a different billing structure: - **Residential**: A fixed monthly base rate of 15.00, plus 0.05 per unit of usage. - **Commercial**: A fixed monthly base rate of 100.00, plus 0.02 per unit of usage. - **Industrial**: A tiered rate system: - For the first 1000 units, the rate is 0.01 per unit. - For units above 1000, the rate is 0.005 per unit. Write a program that calculates the total bill for a list of customers. Each customer has a type and a usage amount for the month. # Input 1. The first line contains an integer number `n` (1 le n le 100) - the number of customers. 2. The next `n` lines describe each customer with the customer\'s type (`Residential`, `Commercial`, `Industrial`) and the usage amount (an integer 0 le text{usage} le 10^6). Each line contains the type followed by the usage amount separated by a space. # Output For each customer, output the total bill with precision up to two decimal points, each on a new line. # Example Input ``` 4 Residential 100 Commercial 1500 Industrial 800 Industrial 1500 ``` Output ``` 20.00 130.00 23.00 27.50 ``` # Explanation - The first customer is `Residential` with 100 units of usage, so the bill is 15.00 + (100 units * 0.05 per unit) = 20.00. - The second customer is `Commercial` with 1500 units of usage, so the bill is 100.00 + (1500 units * 0.02 per unit) = 130.00. - The third customer is `Industrial` with 800 units of usage, so the bill is (800 units * 0.01 per unit) = 8.00. - The fourth customer is `Industrial` with 1500 units of usage: - First 1000 units: 1000 * 0.01 = 10.00 - Next 500 units: 500 * 0.005 = 2.50 - Total = 10.00 + 2.50 = 12.50","solution":"def calculate_bill(customer_type, usage): Calculate the total bill for a customer based on their type and usage. if customer_type == \'Residential\': base_rate = 15.00 rate_per_unit = 0.05 total_cost = base_rate + (rate_per_unit * usage) elif customer_type == \'Commercial\': base_rate = 100.00 rate_per_unit = 0.02 total_cost = base_rate + (rate_per_unit * usage) elif customer_type == \'Industrial\': if usage <= 1000: total_cost = usage * 0.01 else: total_cost = (1000 * 0.01) + ((usage - 1000) * 0.005) return round(total_cost, 2) def generate_bills(customers): Generate bills for a list of customers. bills = [] for customer in customers: customer_type, usage = customer bill = calculate_bill(customer_type, int(usage)) bills.append(bill) return bills"},{"question":"You are given an array of integers representing the heights of blocks in a row. You need to build the highest possible single tower by stacking these blocks vertically. However, the blocks must be stacked in a non-increasing order of heights from bottom to top (i.e., each block on top must be of the same height or shorter than the block immediately below it). Write a function `max_tower_height(blocks)` that receives a list of integers `blocks` and returns the height of the highest possible tower that can be built by following the described rules. The height of a tower is the number of blocks it contains. # Input - The input consists of a single list of integers `blocks` where each integer represents the height of a block. - The length of the list, len(blocks), will be between 1 and 100, inclusive. - Each height in the list blocks[i] will be a positive integer between 1 and 1000, inclusive. # Output - The output should be a single integer, the maximum height of the tower. # Example ```python assert max_tower_height([2, 3, 4, 3, 2]) == 3 assert max_tower_height([5, 3, 5, 7, 2]) == 3 assert max_tower_height([9, 8, 8, 7, 6, 5, 5, 5]) == 8 assert max_tower_height([1, 2, 3, 4, 5]) == 1 assert max_tower_height([4, 4, 4, 4]) == 4 ``` # Explanation In the first example, you can arrange the blocks as [4, 3, 3] or [4, 2, 2]. Both configurations give a tower height of 3. In the second example, one possible tower can be [5, 5, 3]. Another possible tower is [7, 5, 2]. Both give a tower height of 3. In the third example, all the blocks can be placed in a single tower as they are already in non-increasing order. In the fourth example, only one block can be used as no two blocks form a non-increasing sequence. In the fifth example, all the blocks are of the same height and can be stacked to form a tower of height 4.","solution":"def max_tower_height(blocks): Returns the maximum height of a tower that can be built following the non-increasing order rule. if not blocks: return 0 # Sort the blocks in descending order to construct the tallest possible tower. blocks.sort(reverse=True) # The maximum possible tower height is the length of the sorted blocks. return len(blocks)"},{"question":"You are given an array of integers representing the amount of work required for each task. Each task can be executed by a single worker in one unit of time. However, there is a constraint: no worker can execute two tasks that exceed \'T\' units of time in total. Your goal is to determine the minimum number of workers required to finish all the tasks within the given constraints. The input consists of two lines. The first line contains an integer T (1 ≤ T ≤ 10^9) which is the maximum amount of work a worker can handle. The second line contains a sequence of integers representing the amount of work for each task, a1, a2, ..., an (1 ≤ ai ≤ 10^9). Print a single number — the minimum number of workers required to execute all tasks under the given constraints. Example Input: 6 1 2 3 4 5 2 Example Output: 3 Explanation: One way to assign tasks is: - Worker 1: [1, 2, 3] (Total = 6) - Worker 2: [4, 2] (Total = 6) - Worker 3: [5] (Total = 5)","solution":"def min_workers(T, tasks): Returns the minimum number of workers required to finish all tasks such that no worker does tasks totaling more than T units of time. Parameters: T (int): The maximum amount of work a single worker can handle. tasks (list of int): The amount of work required for each task. Returns: int: The minimum number of workers required. tasks.sort(reverse=True) workers = 0 while tasks: current_load = 0 i = 0 while i < len(tasks): if current_load + tasks[i] <= T: current_load += tasks.pop(i) else: i += 1 workers += 1 return workers"},{"question":"We define the operation **compress** on a multiset **a** as follows: Each element in **a** is replaced by the position of its first occurrence when the elements are sorted in ascending order. For example, given the multiset **a** = {4, 5, 2, 2, 5, 3}, the operation **compress(a)** produces the multiset {2, 3, 1, 1, 3, 2}. Let\'s extend this idea and define **compress^k(a)**, which means applying the **compress** operation to the array **a** **k** times, i.e., **compress^k(a) = compress(compress^{k-1}(a))**, with **compress^0(a) = a**. You are given integers **n** and **k**, and you are asked to determine the number of distinct values the function **compress^k(a)** can produce, where **a** is any non-empty array with numbers ranging from 1 to **n**. The result should be provided modulo **998,244,353**. The first and only line of input consists of two integers **n** and **k** (1 ≤ n, k ≤ 2020). Output should be one number: the number of distinct values of the function **compress^k(a)** for all possible non-empty arrays with numbers from 1 to **n** modulo **998,244,353**.","solution":"MOD = 998244353 def compress_k_distinct_values(n, k): Returns the number of distinct values of the function compress^k(a) for all possible non-empty arrays with numbers from 1 to n modulo 998244353. if k == 0: return n if k == 1: return 1 distinct_values = min(n, k) return distinct_values % MOD"},{"question":"Given a list of n integers, you are required to perform the following operation exactly k times: select any two distinct integers from the list and replace them with their product. The list may have duplicate results after replacements. After performing this operation k times, return the maximum possible value of the largest integer in the list. The first line of the input contains two integers n and k (1 ≤ k ≤ n-1, 2 ≤ n ≤ 100). The second line contains n integers separated by spaces, representing the integers in the list (1 ≤ integers ≤ 100). Output a single integer — the maximum possible value of the largest integer that can be obtained after performing the operation k times. For example: **Input:** 5 2 1 2 3 4 5 **Output:** 60 Explanation: In the first step, we can multiply 4 and 5 to get 20, resulting in the list [1, 2, 3, 20]. In the second step, we can multiply 20 and 3 to get 60, resulting in the list [1, 2, 60]. The largest number possible in the list is 60. Note: There can be multiple valid sequences of multiplications. You are required to find the maximum value of the largest integer that can be obtained after performing k operations.","solution":"def max_largest_integer(n, k, nums): Perform the operation exactly k times: select any two distinct integers from the list and replace them with their product. Return the maximum possible value of the largest integer in the list after k operations. from heapq import heapify, heappop, heappush # Convert list elements to negative values to use a min-heap effectively as max-heap max_heap = [-num for num in nums] heapify(max_heap) for _ in range(k): # Extract the two largest numbers first = -heappop(max_heap) second = -heappop(max_heap) # Push the product back to the heap heappush(max_heap, -(first * second)) # Return the largest number in the transformed list which is the first element of max_heap return -max_heap[0]"},{"question":"You are given an array of integers A_1, A_2, ldots, A_n (with n elements) and a target integer T. Your task is to find and return the maximum possible total sum of all distinct integers in any non-empty subset of the array such that this sum does not exceed T. The first line contains two integers n (1 le n le 1000) and T (1 le T le 10^6). The second line contains n integers A_1, A_2, ldots, A_n (1 le A_i le 10^6). Print one integer — the maximum possible sum of all distinct integers in a non-empty subset of the array that does not exceed T. If no valid subset can be found, print 0. Example: ``` Input: 5 15 5 8 3 9 7 Output: 15 Input: 4 10 1 2 3 4 Output: 10 Input: 3 5 7 8 9 Output: 0 ```","solution":"def max_subset_sum(n, T, A): from itertools import combinations # Use a set to get distinct values A = list(set(A)) max_sum = 0 # Try all possible subset sizes for subset_size in range(1, len(A) + 1): for subset in combinations(A, subset_size): subset_sum = sum(subset) if subset_sum <= T: max_sum = max(max_sum, subset_sum) return max_sum # Example usage: # n, T = 5, 15 # A = [5, 8, 3, 9, 7] # print(max_subset_sum(n, T, A)) # Output: 15"},{"question":"You are given a grid representing a dungeon layout. The grid is an `m x n` matrix where each cell can be: - An empty room represented by the value `0`. - A wall represented by the value `-1`, which cannot be crossed. - A gate represented by the value `G`. The goal is to fill each empty room with the distance to its nearest gate. If it\'s impossible to reach a gate from a particular room, that room should remain `0`. Write a program that takes this dungeon layout as input and outputs the grid with the calculated distances. The input consists of: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 500), representing the number of rows and columns of the grid respectively. - The next `m` lines each contain `n` integers separated by spaces, representing the values in the grid. The output should be `m` lines, each containing `n` integers separated by spaces, representing the grid with the distances filled in. Example input: ``` 3 3 0 -1 G 0 0 0 G -1 0 ``` Example output: ``` 2 -1 0 1 2 1 0 -1 2 ``` Note: - You can assume there is at least one gate in the grid.","solution":"from collections import deque def fill_distances_to_gates(grid): Fill each cell in the grid with the minimum distance to a gate. If a cell is a wall, it remains -1. If a cell is a gate, it remains \'G\'. If a cell cannot reach a gate, it remains 0. m, n = len(grid), len(grid[0]) directions = [(1,0), (-1, 0), (0, 1), (0,-1)] queue = deque() # Find all gates and initialize the queue for i in range(m): for j in range(n): if grid[i][j] == \'G\': queue.append((i, j, 0)) # (x, y, distance) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0: grid[nx][ny] = dist + 1 queue.append((nx, ny, dist + 1)) # Convert gates back to zero for the final output for i in range(m): for j in range(n): if grid[i][j] == \'G\': grid[i][j] = 0 return grid def read_grid(): import sys input = sys.stdin.read data = input().split() m, n = int(data[0]), int(data[1]) grid = [] index = 2 for _ in range(m): row = [] for _ in range(n): cell = data[index] if cell == \'G\': row.append(\'G\') else: row.append(int(cell)) index += 1 grid.append(row) return grid, m, n if __name__ == \\"__main__\\": grid, m, n = read_grid() result_grid = fill_distances_to_gates(grid) for row in result_grid: print(\' \'.join(map(str, row)))"},{"question":"Given an array of n integers where each element represents the number of days it takes to complete a project, a project can only be started after the previous one has been completed. You need to schedule the projects in such a way that the total number of working days to complete all projects is minimized. However, there is a constraint: each project can be delayed by at most k days. Write a function `min_total_days(n: int, k: int, days: List[int]) -> int` that returns the minimum total number of working days required to complete all projects given the constraints. **Input:** - `n` (1 ≤ n ≤ 10^5): the number of projects. - `k` (1 ≤ k ≤ 10^5): the maximum number of days a project can be delayed. - `days` (a list of n integers): the time it takes to complete each project. **Output:** - An integer representing the minimum total number of working days required to complete the projects. **Example:** ```python print(min_total_days(3, 2, [2, 3, 1])) # Output: 5 print(min_total_days(5, 1, [3, 2, 5, 1, 4])) # Output: 12 ``` **Explanation:** For the first example, the optimal order with the delays can be: - Project 1 takes 2 days, starting on day 1, finishing on day 2. - Project 2 (with a delay of 1 day) takes 1 day, starting on day 3, finishing on day 3. - Project 3 takes 2 days, starting on day 4, finishing on day 5. Hence, total days = 2 + 1 + 2 = 5. For the second example, the optimal sequence to minimize total days while respecting the delay constraint could be: - Project 1 takes 3 days, starting on day 1, finishing on day 3. - Project 4 (with a delay of 1 day) takes 1 day, starting on day 5, finishing on day 5. - Project 2 (with a delay of 1 day) takes 5 days, starting on day 4, finishing on day 8. - Project 5 (with a delay of 1 day) takes 4 days, starting on day 6, finishing on day 9. - Project 3 takes 2 days, starting on day 10, finishing on day 11. The total days are 12.","solution":"from typing import List def min_total_days(n: int, k: int, days: List[int]) -> int: days.sort() # Sort the days in ascending order to minimize the total days total_days = 0 for i in range(n): delay = min(i, k) total_days += days[i] return total_days"},{"question":"Given an array of positive integers representing the heights of trees in a forest, you need to determine the maximum number of trees that can be cut down such that no two adjacent trees are cut. More formally, you are given an array of integers where the i-th element h_i represents the height of the i-th tree. You need to determine the maximum number of elements you can select from the array such that no two selected elements are adjacent in the array. # Input - The first line contains an integer n (1 leq n leq 10^5) — the number of trees. - The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^4) — the heights of the trees. # Output - Output a single integer — the maximum number of trees that can be cut down under the given condition. # Example Input ``` 6 3 2 5 10 7 8 ``` Output ``` 4 ``` Explanation: The optimal selection is to cut down trees at positions 2, 4, and 6. Another valid selection could be trees at positions 1, 3, and 5. Hence, the maximum number of trees that can be cut down is 4.","solution":"def max_trees_cut(n, heights): Function to determine the maximum number of trees that can be cut down such that no two adjacent trees are cut. Parameters: n (int): The number of trees. heights (list): A list of integers representing the heights of the trees. Returns: int: The maximum number of trees that can be cut down. if n == 0: return 0 elif n == 1: return 1 dp = [0] * n dp[0] = 1 if n > 1: dp[1] = max(1, 1) # Either take the first or the second tree for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + 1) return dp[-1]"},{"question":"You are given a string s containing lowercase letters. Find the length of the longest substring that does not contain any repeating characters. The only line of the input contains a string s (1 ≤ |s| ≤ 100) — the given string. Output a single integer — the length of the longest substring without repeating characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the string s. char_index_map = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"A company is organizing a conference, and they want to schedule a series of lectures in multiple rooms, ensuring that there are no conflicts. Each lecture has a start time and an end time, and no two lectures in the same room can overlap. Given the schedule of lectures, the company wants to determine the minimum number of conference rooms required to accommodate all the lectures without any conflicts. Each test case consists of two lines. The first line contains an integer n (1 leq n leq 10^5), the number of lectures. The second line contains 2 cdot n integers, where the i-th integer is the start time of the i-th lecture and the (i + 1)-th integer is the end time of the i-th lecture (both in 24-hour format). The start time and end time are space-separated and given in pairs for each lecture. Your task is to write a program that calculates the minimum number of conference rooms required for each test case. For example, given the input: ``` 2 3 1 4 2 3 3 5 2 2 7 3 8 ``` The first test case contains 3 lectures with intervals [1, 4], [2, 3], and [3, 5]. Two of these intervals overlap, so a minimum of 2 rooms is required. The second test case contains 2 lectures with intervals [2, 7] and [3, 8]. These intervals overlap, so a minimum of 2 rooms is required. The output for each test case should be a single integer on a new line, representing the minimum number of rooms needed: ``` 2 2 ```","solution":"import heapq def min_rooms(lectures): Calculates the minimum number of conference rooms required for the given lectures. lectures: List of tuples (start_time, end_time) Returns an integer representing the number of required rooms. if not lectures: return 0 lectures.sort() # Initialize a min heap to keep track of end times of the lectures min_heap = [] for lecture in lectures: start, end = lecture if min_heap and min_heap[0] <= start: heapq.heappop(min_heap) heapq.heappush(min_heap, end) return len(min_heap) def solve(test_cases): results = [] for lectures in test_cases: results.append(min_rooms(lectures)) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') test_cases = int(input_lines[0]) idx = 1 lectures_list = [] for _ in range(test_cases): n = int(input_lines[idx]) idx += 1 lectures = [] for i in range(n): start, end = map(int, input_lines[idx].split()) lectures.append((start, end)) idx += 1 lectures_list.append(lectures) return lectures_list def main(input_data): test_cases = parse_input(input_data) results = solve(test_cases) return results"},{"question":"You are given a sequence of n positive integers. Your task is to handle q queries of two types on this sequence: 1. Update the k-th element of the sequence to a new value x. 2. Compute the sum of the elements from index l to r, inclusive. The sequence can be large, so the operations should be performed efficiently. The first line contains two integers n (1 ≤ n ≤ 105) — the number of elements in the sequence, and q (1 ≤ q ≤ 105) — the number of queries. The second line contains n integers, the initial values of the sequence. Each of the next q lines contains one of the two types of queries: - \\"1 k x\\" — update the k-th element of the sequence to value x (1 ≤ k ≤ n, 1 ≤ x ≤ 109). - \\"2 l r\\" — compute the sum of the elements from l-th to r-th index (1 ≤ l ≤ r ≤ n). Output the result for each query of the second type. Each result should be output in a new line.","solution":"class SequenceHandler: def __init__(self, n, sequence): self.n = n self.sequence = sequence self.prefix_sum = self._build_prefix_sum(sequence) def _build_prefix_sum(self, sequence): prefix_sum = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sum[i] = prefix_sum[i - 1] + sequence[i - 1] return prefix_sum def update(self, k, x): diff = x - self.sequence[k - 1] self.sequence[k - 1] = x for i in range(k, self.n + 1): self.prefix_sum[i] += diff def sum(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def process_queries(n, sequence, queries): handler = SequenceHandler(n, sequence) result = [] for query in queries: if query[0] == 1: _, k, x = query handler.update(k, x) elif query[0] == 2: _, l, r = query result.append(handler.sum(l, r)) return result"},{"question":"Given an array `arr` of `n` positive integers, perform the following operations: 1. If `arr[i]` is even, replace it with `arr[i] / 2`. 2. If `arr[i]` is odd, replace it by multiplying with 2 and adding 1. Your task is to find and print the final array after performing the operations once on each element. # Input - The first line contains one integer `n` (`1 <= n <= 10^5`) — the number of elements in the array `arr`. - The second line contains `n` positive integers `arr[1], arr[2], ..., arr[n]` (`1 <= arr[i] <= 10^9`). # Output - Output the final array after performing the operations. # Example Input ``` 5 4 13 2 9 18 ``` Output ``` 2 27 1 19 9 ``` Input ``` 3 1 10 15 ``` Output ``` 3 5 31 ``` Implement a function `transform_array(n: int, arr: List[int]) -> List[int]` to solve the problem.","solution":"def transform_array(n, arr): Transforms the given array based on the transformation rules: - If arr[i] is even, replace it with arr[i] / 2. - If arr[i] is odd, replace it with (arr[i] * 2) + 1. Parameters: n (int): The number of elements in the array. arr (list of int): The input array of positive integers. Returns: list of int: The transformed array. transformed = [] for num in arr: if num % 2 == 0: transformed.append(num // 2) else: transformed.append((num * 2) + 1) return transformed"},{"question":"Sarah enjoys solving problems related to arrays and sequences. She recently encountered the following challenge, and she\'d like your help in solving it. You are given an array of integers, and you need to process several queries on this array. Each query is characterized by two indices L and R, and you need to determine the sum of the array elements between indices L and R (inclusive). Your task is to design an efficient solution to answer these range sum queries. Implement the following: - A function `preprocess` that takes an array `arr` of integers and preprocesses it for efficient query answering. - A function `range_sum` that takes two indices L and R and uses the preprocessed data from `preprocess` to return the sum of elements between indices L and R. # Constraints - 1 ≤ length of `arr` ≤ 100,000 - 1 ≤ number of queries ≤ 100,000 - 1 ≤ arr[i] ≤ 10,000 - 0 ≤ L ≤ R < length of `arr` # Example ```python arr = [3, 7, 1, 4, 9, 2] preprocess(arr) print(range_sum(1, 3)) # Output: 12 (7 + 1 + 4) print(range_sum(0, 5)) # Output: 26 (3 + 7 + 1 + 4 + 9 + 2) print(range_sum(2, 4)) # Output: 14 (1 + 4 + 9) ``` Note - The `preprocess` function should be called only once and must prepare the data structure in a way that each `range_sum` query runs in constant time. - You can assume that the range queries will always be valid based on the given constraints. Write a function `preprocess(arr)` that takes an array of integers and prepares it for fast range sum queries. Then write a function `range_sum(L, R)` that returns the sum of the array elements from index L to index R inclusive.","solution":"def preprocess(arr): Preprocess the array for efficient range sum queries. # Creating a prefix sum array n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] global _prefix_sum _prefix_sum = prefix_sum def range_sum(L, R): Return the sum of elements between indices L and R inclusive using the preprocessed data. return _prefix_sum[R + 1] - _prefix_sum[L]"},{"question":"John is a passionate gardener and loves to plant flowers in his garden. He has recently acquired some flower beds where he wants to plant flowers. However, he wants to ensure his garden is visually appealing by keeping the flowers of the same type together. John has n flower beds in a row, and he wants to plant flowers of m different types in these beds. You are given an array representing the types of flowers John has, and you need to determine the minimum number of adjacent flower beds that need to be relocated to ensure that each type of flower is planted in a contiguous block. More formally, the given array `flowers` of size `n` contains integers between 1 and m, inclusive, representing the type of flower in each bed. You need to find the minimum number of relocations needed to group each type of flower together in contiguous blocks. The first line contains two integers: n (1 ≤ n ≤ 1000) — the number of flower beds, and m (1 ≤ m ≤ 100) — the number of different flower types. The second line contains n integers between 1 and m, representing the type of flower in each bed. Print a single integer — the minimum number of relocations needed. In the first sample test, to group all flowers of the same type together, John can move the first flower to the second position, grouping all flowers of type 1, resulting in only 1 relocation. # Sample Input ``` 6 3 2 1 2 3 1 2 ``` # Sample Output ``` 1 ```","solution":"def minimum_relocations(n, m, flowers): # Finding the number of contiguous blocks for each flower type changes = 0 for i in range(1, n): if flowers[i] != flowers[i-1]: changes += 1 return changes"},{"question":"You are given a string s consisting of lowercase Latin letters. In one move, you can select any single character of the string and change it to any other lowercase Latin letter. Your goal is to make the string consist of identical characters with the minimum number of moves. The first line of the input contains one integer t (1 le t le 10^3) — the number of test cases. Each of the next t lines contains one string s (1 le |s| le 50), where |s| is the length of the string. For each test case, output the minimum number of moves required to make the string consist of identical characters. **Example** ``` Input: 3 aabbcc zzzz abcdefg Output: 4 0 6 ```","solution":"def min_moves_to_identical(t, test_cases): results = [] for s in test_cases: max_freq = max(s.count(char) for char in set(s)) results.append(len(s) - max_freq) return results"},{"question":"Consider an undirected tree with `n` nodes, where each node is uniquely numbered from `1` to `n`. The diameter of a tree is the length of the longest path between any two nodes in the tree. A path length is defined by the number of edges in that path. You are given the tree represented as a list of edges, with each edge connecting two nodes. You need to find the diameter of this tree. # Input: - The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 1000), the number of test cases. - For each test case, the first line contains an integer `n` (2 ≤ n ≤ 10^4), the number of nodes in the tree. - The next `n-1` lines each consist of two integers `u` and `v` (1 ≤ u, v ≤ n), representing the two nodes connected by an edge. It is guaranteed that the sum of `n` across all test cases does not exceed `10^5`. # Output: For each test case, output the diameter of the tree. # Example: Input: ``` 2 4 1 2 2 3 2 4 3 1 2 1 3 ``` Output: ``` 2 2 ``` # Explanation: - In the first test case, the tree with 4 nodes can be represented as: ``` 1 - 2 - 3 | 4 ``` The longest path is `3 - 2 - 4` or `4 - 2 - 1`, both with length `2`. - In the second test case, the tree with 3 nodes can be represented as: ``` 1 / 2 3 ``` The longest path is `2 - 1 - 3`, with length `2`.","solution":"from collections import deque def find_furthest_node(n, edges, start_node): Finds the furthest node from the start_node and its distance in an unweighted tree. graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) max_dist = 0 furthest_node = start_node queue = deque([(start_node, 0)]) visited[start_node] = True while queue: node, dist = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) if dist + 1 > max_dist: max_dist = dist + 1 furthest_node = neighbor return furthest_node, max_dist def tree_diameter(n, edges): Finds the diameter of a tree given its edges. # Find the furthest node from an arbitrary start node (say node 1) furthest_node, _ = find_furthest_node(n, edges, 1) # Find the furthest node from the previously found furthest node _, diameter = find_furthest_node(n, edges, furthest_node) return diameter def solve(test_cases): results = [] for n, edges in test_cases: results.append(tree_diameter(n, edges)) return results"},{"question":"In a city, there are n intersections connected by bidirectional roads. Each road has a certain time T associated with it, which is the time it takes to travel between two intersections via that road. The city traffic department wants to plan routes to minimize the maximum time it takes to commute between any two intersections using the available roads. You are given the task of implementing a function that receives the number of intersections and the list of roads represented by tuples (u, v, T), where u and v denote the intersections connected by the road and T is the travel time. Your goal is to produce the list of roads that should be removed to achieve the minimal possible maximum time between any two intersections. You should output the remaining roads. The first line of input contains an integer n (2 ≤ n ≤ 1000) — the number of intersections. The next line contains an integer m (1 ≤ m ≤ 10000) — the number of roads. The next m lines each contain three integers u, v, T (1 ≤ u, v ≤ n, 1 ≤ T ≤ 10^6) describing a road between intersections u and v with travel time T. Output the remaining roads after the removal of certain roads to minimize the maximum commute time between any two intersections. If there are multiple correct answers, output any of them. Example: Input: 4 5 1 2 5 1 3 10 2 3 4 2 4 1 3 4 7 Output: 1 2 5 2 3 4 2 4 1 Explanation: After removing the road between intersections 1 and 3 with travel time 10 and the road between intersections 3 and 4 with travel time 7, the maximum commute time between any two intersections is minimized.","solution":"def find_minimal_max_time_roads(n, m, roads): This function returns the roads to be kept such that the maximum travel time between any two intersections is minimized. # Union-Find (Disjoint Set Union) structure to help us perform Kruskal\'s algorithm class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if u != self.parent[u]: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 roads.sort(key=lambda x: x[2]) # Sort roads by travel time uf = UnionFind(n) mst = [] # Minimum Spanning Tree for u, v, t in roads: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) mst.append((u, v, t)) return mst # Sample input as described in the problem n = 4 m = 5 roads = [ (1, 2, 5), (1, 3, 10), (2, 3, 4), (2, 4, 1), (3, 4, 7) ] roads_to_keep = find_minimal_max_time_roads(n, m, roads) for u, v, t in roads_to_keep: print(u, v, t)"},{"question":"You are given an integer array `arr` of size `n`, where `1 <= n <= 10^5` and `-10^9 <= arr[i] <= 10^9`. Your task is to find the length of the longest subsequence in `arr` which is a strictly increasing arithmetic progression. An arithmetic progression (AP) is a sequence of numbers such that the difference between consecutive terms is constant. Input data contains: - The first line includes an integer, `n`, representing the length of the array. - The second line contains `n` integers separated by spaces, representing the elements of `arr`. Output a single integer representing the length of the longest subsequence which forms a strictly increasing arithmetic progression. # Example: **Input:** ``` 6 3 6 9 12 5 7 ``` **Output:** ``` 4 ``` **Explanation:** The longest subsequence in this case is [3, 6, 9, 12], which has a common difference of 3. Another valid subsequence with the maximum length could also be [3, 5, 7]. **Note:** There can be multiple subsequences with the same maximum length, but you only need to find the length.","solution":"def longest_arithmetic_subsequence(arr): n = len(arr) if n <= 1: return n dp = {} longest = 1 for i in range(n): for j in range(i): diff = arr[i] - arr[j] if (j, diff) in dp: dp[(i, diff)] = dp[(j, diff)] + 1 else: dp[(i, diff)] = 2 longest = max(longest, dp[(i, diff)]) return longest"},{"question":"You are given two arrays of integers, `A` and `B`. Your task is to find the longest contiguous subarray that is common in both arrays. If there are multiple subarrays with the maximum length, return the first such subarray found in `A`. The first line of input contains an integer `N` (1 ≤ N ≤ 1000) — the length of array `A`. The second line contains `N` space-separated integers, representing the elements of array `A`. The third line contains an integer `M` (1 ≤ M ≤ 1000) — the length of array `B`. The fourth line contains `M` space-separated integers, representing the elements of array `B`. Output the length of the longest common contiguous subarray on the first line. On the second line, output the longest common contiguous subarray found in `A` as space-separated integers. If there is no common subarray, output `0` on the first line and leave the second line empty. # Example Input ``` 5 1 2 3 4 5 6 3 4 5 6 7 8 ``` Output ``` 3 3 4 5 ``` # Explanation The longest common contiguous subarray between `A` and `B` is `[3, 4, 5]` which has a length of 3. In case there are no common subarrays, i.e., if the subarray length is 0, you should output `0` on the first line and leave the second line empty.","solution":"def longest_common_subarray(A, N, B, M): Finds the longest common contiguous subarray between arrays A and B. dp = [[0] * (M + 1) for _ in range(N + 1)] max_length = 0 end_index_A = 0 for i in range(1, N + 1): for j in range(1, M + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] end_index_A = i - 1 longest_subarray = A[end_index_A - max_length + 1:end_index_A + 1] if max_length > 0 else [] return (max_length, longest_subarray)"},{"question":"You are given a sequence of n integers representing the daily temperature readings in a city. Let\'s consider the temperature remains within a certain range. Your task is to determine the minimum number of adjustments required to ensure that for each day a temperature reading is between and including two given limits, a and b (a ≤ b). An adjustment on a day modifies the temperature reading of that day to any value within the range of a and b inclusive. For instance, if the temperature reading on a day is below a, you need to increase it to at least a. Similarly, if it is above b, you need to decrease it to at most b. If the temperature is already within the range [a, b], no adjustment is necessary for that day. Given the sequence of temperature readings, find the minimum number of days on which an adjustment is necessary. The first line contains three integers n, a, and b (1 ≤ n ≤ 10^5, -10^4 ≤ a ≤ b ≤ 10^4) — the number of days and the temperature limits. The second line contains n integers t1, t2, ..., tn (-10^4 ≤ ti ≤ 10^4), where ti represents the temperature reading on the i-th day. Print the minimum number of days on which an adjustment is necessary. Example: Input: 7 -5 5 -10 -5 0 5 10 5 -7 Output: 3 Explanation: - On the 1st day, the temperature -10 is below the limit of -5, so it needs to be adjusted to -5. - On the 5th day, the temperature 10 is above the limit of 5, so it needs to be adjusted to 5. - On the 7th day, the temperature -7 is below the limit of -5, so it needs to be adjusted to -5. Hence, a total of 3 adjustments are necessary.","solution":"def count_temperature_adjustments(n, a, b, temperatures): Given the number of days `n`, temperature limits `a` and `b`, and a list of temperature readings, this function returns the minimum number of days on which an adjustment is necessary to ensure that each day\'s temperature is within the inclusive range [a, b]. adjustments_needed = 0 for temp in temperatures: if temp < a or temp > b: adjustments_needed += 1 return adjustments_needed"},{"question":"You are given an array of n integers. An integer x is called a dominant element in the array if the frequency of x in the array is greater than n/3. Your task is to find all the dominant elements in the array. If there are multiple dominant elements, return them in ascending order. If no such elements exist, return an empty list. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^5) — the elements of the array. First, print a single integer k — the number of dominant elements. Then, print k integers in ascending order — the dominant elements. Example: ``` Input: 7 3 3 4 2 4 4 2 Output: 1 4 ``` In this example, the array has 7 elements, so an element must appear more than 7/3 ≈ 2.33 times to be dominant. The number 4 appears 3 times, which is more than 2.33, so it is considered a dominant element.","solution":"def find_dominant_elements(n, array): Returns a list of dominant elements in the array which appear more than n/3 times. The elements are returned in ascending order. from collections import Counter # Count the frequency of elements in the array frequency = Counter(array) # Calculate the threshold for an element to be considered dominant threshold = n / 3 # Find elements that are dominant dominant_elements = [elem for elem, count in frequency.items() if count > threshold] # Sort the dominant elements in ascending order dominant_elements.sort() return dominant_elements # Function to process input and output def process_input_output(input_str): data = input_str.strip().split() n = int(data[0]) array = list(map(int, data[1:])) dominant_elements = find_dominant_elements(n, array) return f\\"{len(dominant_elements)}n\\" + \\" \\".join(map(str, dominant_elements)) if dominant_elements else \\"0\\""},{"question":"Polycarp loves playing video games and has recently been fascinated by retro adventure games. However, he faces many challenges as the levels get harder, and he needs to use specific equipment to overcome various obstacles to save Princess Polly. Each level contains exactly one obstacle that Polycarp must overcome using one piece of equipment from his inventory. The game provides a list of obstacles and the corresponding piece of equipment needed to overcome each one. Polycarp must go through the list of levels to determine which pieces of equipment from his inventory can be utilized effectively. Given a list of obstacles where each obstacle is represented as a string and a list of pieces of equipment, each also represented as a string, determine if Polycarp can overcome every obstacle using the equipment he has. If he can, output \\"YES\\" and list the order in which the equipment is used. Otherwise, output \\"NO\\". Input: - The first line contains two integers `n` and `m` (1 le n, m le 100) — the number of obstacles and the number of pieces of equipment Polycarp has, respectively. - The second line contains `n` strings separated by spaces — the list of obstacles in the order they appear in the game. - The third line contains `m` strings separated by spaces — the list of pieces of equipment Polycarp has available. Output: - If Polycarp can overcome all obstacles, print \\"YES\\" followed by the order of equipment used, one per line. - If Polycarp cannot overcome all obstacles, print \\"NO\\". Example: Input: ``` 3 3 dragon fire tangle shield sword net ``` Output: ``` YES shield sword net ``` Input: ``` 2 3 golem barrier hammer torch arrow ``` Output: ``` NO ``` Explanation: In the first example, Polycarp has a shield, sword, and net to overcome dragon, fire, and tangle, respectively, so it is possible to overcome all obstacles. In the second example, Polycarp does not have the correct equipment to overcome the \\"barrier\\" obstacle, so it is not possible to complete all the levels.","solution":"def can_overcome_obstacles(n, m, obstacles, equipment): equipment_dict = {equip: None for equip in equipment} result = [] for obstacle in obstacles: if obstacle in equipment_dict: result.append(obstacle) del equipment_dict[obstacle] else: return \\"NO\\" return [\\"YES\\"] + result def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n, m = map(int, lines[0].split()) obstacles = lines[1].split() equipment = lines[2].split() return n, m, obstacles, equipment"},{"question":"Peter loves arranging numbers in special sequences. He is fascinated by sequences where each number is the arithmetic mean of its neighboring numbers, but only if the neighboring numbers exist (i.e., the first and last numbers in the sequence have only one neighbor). Peter has devised a rule where the sequence starts with a specified integer, and each subsequent number is generated following this rule, but not limited to integers. Given a starting integer S and a length k (1 ≤ k ≤ 10), generate the sequence that follows Peter\'s rules. Your task is to output the sequence up to the k-th number. The first line contains two integers S and k, where S is the starting integer of the sequence and k is the length of the sequence. Output the generated sequence rounded to 2 decimal places for each number. For example, if the input is: 5 4 The output should be: 5.00 5.00 5.00 5.00 In this example, starting from 5, every subsequent number is the mean of its neighbors and continues to be 5 as it stabilizes at the starting number.","solution":"def generate_sequence(s, k): if k == 1: return [round(s, 2)] sequence = [s] * k return [round(num, 2) for num in sequence]"},{"question":"You are given a list of n numbers representing the heights of students in a line. The heights are given in the order that the students currently stand. Your task is to answer q queries about the maximum height of students in a certain range of the line. For each query, you will be given two integers Li and Ri (1 ≤ Li ≤ Ri ≤ n) representing the range within the line. You need to determine the maximum height of any student standing in that range (inclusive) for each query. The first line of input contains two integers, n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5), representing the number of students and the number of queries. The second line of input contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi is the height of the ith student. The next q lines each contain two integers Li and Ri representing a query about the range of students. Output q integers, each representing the answer to the corresponding query. Example: Input: 5 3 160 180 150 170 165 1 3 2 5 1 5 Output: 180 180 180","solution":"def max_height_in_range(n, q, heights, queries): Returns the maximum heights in the specified ranges for provided list of heights. Args: n (int): The number of students. q (int): The number of queries. heights (list of int): The heights of students. queries (list of tuple of int): The queries representing the range as (Li, Ri). Returns: list of int: The maximum heights for each query. results = [] for Li, Ri in queries: max_height = max(heights[Li-1:Ri]) # Li and Ri are 1-indexed results.append(max_height) return results"},{"question":"In a bustling city, the government plans to optimize the bus routes to minimize the travel time for citizens. The city is represented as a directed graph with n nodes (bus stops) and m edges (routes). Each edge has a weight representing the time taken to travel that route. Your task is to evaluate whether there is a cycle in the city\'s bus routes such that the total travel time within the cycle is negative. # Input The first line contains two integers n and m (1 leq n leq 1000, 1 leq m leq 5000) — the number of bus stops and the number of routes. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, -10^4 leq w leq 10^4) — representing a bus route from stop u to stop v with travel time w. # Output Output \\"YES\\" if there exists a cycle with negative total travel time, otherwise output \\"NO\\". # Example Input ``` 4 5 1 2 2 2 3 3 3 4 4 4 2 -10 1 3 8 ``` Output ``` YES ``` Explanation In this example, the cycle consists of bus stops 2 -> 3 -> 4 -> 2 with total travel time 3 + 4 + (-10) = -3, which is negative. Note: In the case of no negative cycle, you would use a different search algorithm to determine the shortest paths; however, the presence of a negative cycle alters the handling. This problem requires familiarity with algorithms that can detect negative cycles in weighted directed graphs.","solution":"def find_negative_cycle(n, m, edges): This function uses the Bellman-Ford algorithm to find if there exists a negative cycle in the given graph. :param n: Number of bus stops (nodes) :param m: Number of routes (edges) :param edges: List of tuples (u, v, w) representing edges with weight :return: \\"YES\\" if there is a negative cycle, otherwise \\"NO\\" # Initialize distances with infinity and set the start node\'s distance to 0 inf = float(\'inf\') distance = [inf] * n distance[0] = 0 # Relax edges up to n-1 times for _ in range(n - 1): for u, v, w in edges: if distance[u - 1] != inf and distance[u - 1] + w < distance[v - 1]: distance[v - 1] = distance[u - 1] + w # Check for negative weight cycle for u, v, w in edges: if distance[u - 1] != inf and distance[u - 1] + w < distance[v - 1]: return \\"YES\\" return \\"NO\\""},{"question":"In a certain kingdom, there are n cities and n-1 roads connecting them, such that it is possible to travel between any pair of cities using these roads. Each city is numbered with a unique integer from 1 to n. The roads are unidirectional, and every city has exactly one outgoing road except for one city, which has no outgoing roads (this city is called the capital). The king likes order and decides that all roads must be two-way, i.e., every unidirectional road should become bidirectional. To achieve this, the existing unidirectional road can be converted to bidirectional at a given cost. Each road conversion cost is provided. The goal is to convert all roads in such a way that the total cost is minimized. You are given the number of cities n, followed by n-1 lines describing the roads. Each road is described by three integers ai, bi, ci, where the road is unidirectional from city ai to city bi, and the cost to make it bidirectional is ci. Write a function to determine the minimum cost to make all roads bidirectional. **Input** - The first line contains the integer n (2 ≤ n ≤ 100) — number of cities. - The next n-1 lines each contain three integers ai, bi, ci (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ci ≤ 100) — indicating a road from city ai to city bi with a conversion cost of ci. **Output** - Output a single integer — the minimum cost to make all roads bidirectional. Example: **Input** ``` 4 1 2 3 2 3 5 4 3 4 ``` **Output** ``` 7 ```","solution":"def minimum_cost_to_make_bidirectional(n, roads): Computes the minimum cost required to make all roads bidirectional. :param n: Number of cities (int) :param roads: List of tuples, each representing a road from city ai to city bi with a cost ci (list of tuples) :return: Minimum cost to make all roads bidirectional (int) return sum(cost for _, _, cost in roads) # Example usage: # n = 4 # roads = [(1, 2, 3), (2, 3, 5), (4, 3, 4)] # print(minimum_cost_to_make_bidirectional(n, roads)) # Output: 12"},{"question":"Given an integer array `nums`, separate the array into two lists `even_list` and `odd_list` based on the parity of the integers, such that all integers in `even_list` are even and all integers in `odd_list` are odd. Return the two lists in a tuple `(even_list, odd_list)` where `even_list` should be sorted in increasing order and `odd_list` should be sorted in decreasing order. # Input - A single list of integers `nums` containing `n` elements (1 leq n leq 10^{5}, -10^{9} leq nums[i] leq 10^{9}). # Output - A tuple `(even_list, odd_list)` where: - `even_list` is a list of sorted even integers from `nums` in increasing order. - `odd_list` is a list of sorted odd integers from `nums` in decreasing order. # Example Input: ``` nums = [4, 1, 2, 13, 5, 6, 11, 10] ``` Output: ``` ([2, 4, 6, 10], [13, 11, 5, 1]) ``` Input: ``` nums = [3, 4, 7, 8, 10, -2, -5] ``` Output: ``` ([-2, 4, 8, 10], [7, 3, -5]) ``` # Note - In the first example, the even integers are `[4, 2, 6, 10]` which after sorting in increasing order gives `[2, 4, 6, 10]`. The odd integers are `[1, 13, 5, 11]` which after sorting in decreasing order gives `[13, 11, 5, 1]`. - In the second example, the even integers are `[4, 8, 10, -2]` which after sorting in increasing order gives `[-2, 4, 8, 10]`. The odd integers are `[3, 7, -5]` which after sorting in decreasing order gives `[7, 3, -5]`.","solution":"def separate_and_sort(nums): Given a list of integers, separates the list into two lists: one containing all even integers sorted in ascending order and the other containing all odd integers sorted in descending order. Args: nums (list): List of integers. Returns: tuple: A tuple containing two lists, (even_list, odd_list). even_list = sorted([x for x in nums if x % 2 == 0]) odd_list = sorted([x for x in nums if x % 2 != 0], reverse=True) return (even_list, odd_list)"}]'),j={name:"App",components:{PoemCard:Y},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},F={key:0,class:"empty-state"},L=["disabled"],C={key:0},z={key:1};function P(s,e,h,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",C,"See more"))],8,L)):l("",!0)])}const R=d(j,[["render",P],["__scopeId","data-v-f152827e"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/34.md","filePath":"deepseek/34.md"}'),D={name:"deepseek/34.md"},H=Object.assign(D,{setup(s){return(e,h)=>(n(),i("div",null,[x(R)]))}});export{B as __pageData,H as default};
