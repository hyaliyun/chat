import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-5c6f8e44"]]),S=JSON.parse('[{"question":"Zara the novice coder has an array b of length n consisting of distinct positive integers. Zara loves sorting and permutation problems. She decided to challenge herself by trying to rearrange the numbers in the array b into a specific ordering criterion. She wants to create an array c by rearranging the elements of b such that the following conditions are met: 1. c is a permutation of b (contains the same elements as b). 2. For every i and j such that 1 ≤ i < j ≤ n, the value of c_i + c_j is not divisible by 2 (in other words, c_i + c_j should be odd). If it is possible to create such an array c, output \\"YES\\" and print the array c. Otherwise, output \\"NO\\". -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the length of the array b. The second line contains n distinct positive integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9). -----Output----- If it is possible to reorder the array to meet the specified conditions, print \\"YES\\" on the first line and the rearranged array c on the second line. If it is not possible, print \\"NO\\". -----Examples----- Input 5 1 3 2 4 5 Output YES 1 2 3 4 5 Input 2 2 4 Output NO -----Note----- In the first example, the reordered array c can be [1, 2, 3, 4, 5]. We can check: 1 + 2 = 3 (odd) 1 + 3 = 4 (even) 1 + 4 = 5 (odd) 1 + 5 = 6 (even) 2 + 3 = 5 (odd) 2 + 4 = 6 (even) 2 + 5 = 7 (odd) 3 + 4 = 7 (odd) 3 + 5 = 8 (even) 4 + 5 = 9 (odd) Thus, the condition 2 is met. In the second example, we cannot reorder the array to meet the condition.","solution":"def reorder_array(n, b): This function reorders the array such that for every i < j, c_i + c_j is not divisible by 2. If it\'s possible, it returns \\"YES\\" and the reordered array, otherwise \\"NO\\". odd = [x for x in b if x % 2 == 1] even = [x for x in b if x % 2 == 0] # If both even and odd elements are present, returning them separated fulfills the requirement. if odd and even: return \\"YES\\", odd + even else: return \\"NO\\", [] # Example usage # n = 5 # b = [1, 3, 2, 4, 5] # print(reorder_array(n, b)) # Output: (\\"YES\\", [1, 3, 5, 2, 4])"},{"question":"You are given two strings, `S` and `T`, of length `N` and `M` respectively, both consisting of lowercase English letters. You need to find the length of the longest common subsequence between the given two strings. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. For example, given `S = \\"abcde\\"` and `T = \\"ace\\"`, the longest common subsequence is \\"ace\\" with length 3. ------ Input Format ------ - The first line of input contains an integer `Q`, denoting the number of test cases. The `Q` test cases then follow: - Each test case consists of two lines: The first line contains the string `S`, and the second line contains the string `T`. ------ Output Format ------ For each test case, output in a single line the length of the longest common subsequence. ------ Constraints ------ 1 leq Q leq 100 1 leq N, M leq 1000 Strings `S` and `T` only contain lowercase English letters. ------ Sample Input 2 ------ 3 abcde ace xyz yz abcdef ghijkl ------ Sample Output 2 ------ 3 2 0 ------ Explanation 2 ------ Test case 1: The strings are `S = \\"abcde\\"` and `T = \\"ace\\"`. The longest common subsequence is \\"ace\\" which has a length of 3. Test case 2: The strings are `S = \\"xyz\\"` and `T = \\"yz\\"`. The longest common subsequence is \\"yz\\" which has a length of 2. Test case 3: The strings are `S = \\"abcdef\\"` and `T = \\"ghijkl\\"`. There are no common characters, hence the length of common subsequence is 0.","solution":"def longest_common_subsequence(S, T): Returns the length of the longest common subsequence between strings S and T. N = len(S) M = len(T) dp = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[N][M] def process_test_cases(Q, cases): results = [] for case in cases: S, T = case results.append(longest_common_subsequence(S, T)) return results"},{"question":"In a faraway land, there is a unique language consisting of lowercase Latin letters. A peculiar feature of this language is that certain pairs of letters are considered \\"friends\\" and each pair of friends can replace each other without changing the overall meaning of the message. You are given a string `s` and a list of friend pairs. Your task is to determine if it\'s possible to rearrange the string such that it becomes a palindrome by considering that the friends can be swapped with each other. A palindrome is a word that reads the same backward as forward. For example, \\"abba\\" or \\"racecar\\" are palindromes. Input The input consists of multiple lines: - The first line contains a single string `s` (1 ≤ |s| ≤ 200,000) consisting of lowercase Latin letters. - The second line contains an integer `m` (0 ≤ m ≤ 100,000), the number of friend pairs. - Each of the next `m` lines contains two different lowercase Latin letters `a` and `b` indicating that `a` and `b` are friends. Output Print \\"YES\\" if it is possible to rearrange the string to form a palindrome considering the friend pairs; otherwise, print \\"NO\\". Examples Input abac 2 a b c a Output YES Input abcfbc 2 a b c d Output NO Note In the first example, the string \\"abac\\" can be rearranged to form \\"acca\\" which is a palindrome by considering `a` and `b` as friends and `a` and `c` as friends. In the second example, regardless of how the friends `a` and `b` or `c` and `d` are swapped, a palindrome cannot be formed.","solution":"def possible_to_rearrange_palindrome(s, friends): from collections import defaultdict, Counter def find(x): if parent[x] == x: return x parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Initialize each letter\'s parent as itself parent = {chr(i): chr(i) for i in range(ord(\'a\'), ord(\'z\') + 1)} # union sets based on friend relationships for a, b in friends: union(a, b) # Create a count for each character, considering their root representative char_count = Counter(find(c) for c in s) # To form a palindrome, at most 1 character\'s count can be odd odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Alice and Bob are playing a game with a sequence of integers. Initially, there are N integers in the sequence, and the i-th integer is A_i. They take turns alternately starting from Alice, and on each turn, a player can perform one of the following operations: - Choose an integer in the sequence and decrease it by 1. - Choose two different integers in the sequence and remove both of them. The game ends when all integers are zero or one integer remains. The player who makes the last move wins. Assuming both players play optimally, determine the winner of the game. -----Constraints----- - 1 leq N leq 200 - 1 leq A_i leq 10^6 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- If Alice will win, print Alice; if Bob will win, print Bob. -----Sample Input----- 3 2 3 4 -----Sample Output----- Alice Initially, the sequence is [2, 3, 4]. - If Alice takes the 2 and the 3 and removes both, the sequence becomes [4]. - Then Bob will decrease the remaining 4 by 1, making it 3. - Then Alice will decrease the 3 by 1, making it 2. - Then Bob will decrease the 2 by 1, making it 1. - Then Alice will decrease the remaining 1 by 1, ending the game. Hence, Alice wins.","solution":"def determine_winner(N, sequence): Determine the winner of the game given the initial sequence of integers. # Calculate the nim-sum (XOR of all elements) nim_sum = 0 for num in sequence: nim_sum ^= num # If nim-sum is zero, Bob wins, otherwise Alice wins if nim_sum == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"Write a function called `find_missing_number` that takes a list of integers representing an arithmetic sequence with one missing term. The list is guaranteed to have at least 3 integers and exactly one missing term. The function should return the missing number in the sequence. For example: - `[3, 6, 9, 15]` should return `12` - `[7, 14, 28, 35]` should return `21` If the list contains non-integer elements or has less than 3 elements, the function should return \\"invalid input\\". **Constraints:** - The maximum number of elements in the list will not exceed 1000. - The integers can be both positive and negative.","solution":"def find_missing_number(sequence): Takes a list of integers representing an arithmetic sequence with one missing term. Returns the missing number or \\"invalid input\\" if input is invalid. # Validate input if not all(isinstance(x, int) for x in sequence) or len(sequence) < 3: return \\"invalid input\\" # Calculate the common difference n = len(sequence) total_diff = (sequence[-1] - sequence[0]) // n current_diff = (sequence[1] - sequence[0]) if total_diff != current_diff: missing_num = sequence[0] + total_diff else: for i in range(n-1): if sequence[i+1] - sequence[i] != current_diff: missing_num = sequence[i] + current_diff break return missing_num"},{"question":"The planet of Zog has a unique network of inter-connected cities, each city represented as a node and each route between them as an edge with a certain distance. Aliens on Zog want to establish a central logistics center that minimizes the total travel distance from this center to all other cities, for their efficient inter-city deliveries. Given a weighted graph where each node represents a city and each edge represents a direct route between two cities along with the distance between them, determine the optimal city to build this central logistics center. The optimal city is defined as the city from which the sum of the shortest path distances to all other cities is minimized. Input: - The input consists of multiple lines. - The first line contains two integers, N and M, where N is the number of cities (nodes) and M is the number of direct routes (edges) between these cities (1 ≤ N ≤ 500, 0 ≤ M ≤ 12,500). - The next M lines each contains three integers u, v, and w, where u and v are the nodes representing the cities connected by a direct route, and w is the distance (weight) of this route (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000). Output: - Print a single integer, the node number of the city that should be chosen as the central logistics center. If there are multiple cities with the same minimized total distance, print the smallest numbered city. Constraints: - Every pair of cities is connected directly or indirectly. Example: Input: 4 4 1 2 4 1 3 2 2 3 1 3 4 7 Output: 3 Explanation: - The sum of the shortest path distances from each city is: - City 1: 0 + 4 + 2 + 9 = 15 - City 2: 4 + 0 + 1 + 8 = 13 - City 3: 2 + 1 + 0 + 7 = 10 - City 4: 9 + 8 + 7 + 0 = 24 - City 3 has the smallest total distance (10), so the output is 3.","solution":"import heapq def dijkstra(graph, start, n): Perform Dijkstra\'s algorithm to find the shortest paths from start node to all other nodes in a weighted graph. distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_central_logistics_center(n, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) min_total_distance = float(\'inf\') optimal_city = None for node in range(1, n + 1): distances = dijkstra(graph, node, n) total_distance = sum(distances.values()) if total_distance < min_total_distance or (total_distance == min_total_distance and node < optimal_city): min_total_distance = total_distance optimal_city = node return optimal_city def solve(): import sys input = sys.stdin.read data = input().splitlines() N, M = map(int, data[0].split()) edges = [tuple(map(int, line.split())) for line in data[1:M + 1]] result = find_central_logistics_center(N, edges) print(result)"},{"question":"Zara loves painting pictures and labeling them with unique identifiers. She has recently assigned unique IDs to n pictures in her gallery. Unfortunately, one of the pictures got lost, and she wants to determine its ID. The identifiers she assigned were in a continuous range without any gaps except for the one missing picture. Write a program to help Zara find the missing identifier. Input The first line contains a single integer n (2 ≤ n ≤ 105) — the total number of pictures Zara labeled initially. The second line contains n-1 integers, each representing the ID of a remaining picture in the gallery. Each identifier is a unique integer in the range from 1 to n (inclusive). Output Print the single integer — the missing picture\'s identifier. Examples Input 5 1 2 4 5 Output 3 Input 3 2 3 Output 1 Input 4 1 4 2 Output 3 Note In the first example, Zara labeled 5 pictures with IDs 1 to 5. The IDs of the remaining pictures are given as [1, 2, 4, 5]. The only missing ID in the range from 1 to 5 is 3. In the second example, Zara labeled 3 pictures with IDs 1 to 3. The IDs of the remaining pictures are [2, 3]. The only missing ID in the range from 1 to 3 is 1. In the third example, Zara labeled 4 pictures with IDs 1 to 4. The IDs of the remaining pictures are [1, 4, 2]. The missing ID is 3.","solution":"def find_missing_identifier(n, identifiers): Determines the missing picture identifier from a list of given identifiers. :param n: The total number of pictures initially labeled (integer) :param identifiers: List of remaining picture identifiers (list of integers) :return: The missing picture\'s identifier (integer) # Calculate the expected sum of first n natural numbers total_sum = n * (n + 1) // 2 # Calculate the sum of provided identifiers current_sum = sum(identifiers) # The missing identifier is the difference missing_id = total_sum - current_sum return missing_id"},{"question":"Write a function to reverse a given string only if its length is an even number. If the length is odd, return the string as it is. Ensure that your function handles both uppercase and lowercase characters correctly and does not alter the case of the characters. Example 1: Input: \\"hello\\" Output: \\"hello\\" Example 2: Input: \\"abcd\\" Output: \\"dcba\\" Your Task: You don\'t need to input anything. Complete the function reverseStringIfEven() which takes a string s as the input parameter and returns the modified string. Constraints: 1 <= |s| <= 100","solution":"def reverseStringIfEven(s): Reverses the given string if its length is even, otherwise returns the string as it is. :param s: Input string :return: reversed string if length is even, otherwise the original string return s[::-1] if len(s) % 2 == 0 else s"},{"question":"Given a non-negative integer num represented as a string, the task is to find the sum of its digits. Example 1: Input: num = \\"12345\\" Output: 15 Explanation: 1 + 2 + 3 + 4 + 5 = 15 Example 2: Input: num = \\"0000\\" Output: 0 Explanation: 0 + 0 + 0 + 0 = 0 Your Task: The task is to complete the function digitSum() which finds and returns the sum of digits of the string representation of the number. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= length of the string <= 10^{5}","solution":"def digitSum(num: str) -> int: Returns the sum of digits of the string representation of the number. Parameters: num (str): A non-negative integer represented as a string. Returns: int: The sum of its digits. return sum(int(digit) for digit in num)"},{"question":"You are given a grid with m rows and n columns, consisting of characters \'.\' and \'#\'. A snake is defined as a connected sequence of characters \'#\' that either form a straight horizontal or vertical line. The minimum length of a snake is 2 cells. Your task is to determine if you can find at least one snake on the grid. -----Input----- The first line contains two integers, m and n (2 ≤ m, n ≤ 100) — the dimensions of the grid. Each of the next m lines describes one row of the grid. Each row contains n characters and each character is either \'.\' or \'#\'. -----Output----- Output \\"YES\\" if there is at least one snake on the grid. Otherwise, output \\"NO\\". -----Examples----- Input 3 3 .#. # .#. Output YES Input 4 5 ..... ... .#... ..... Output YES Input 2 2 .. .# Output NO Input 4 4 .... .... .... .... Output NO Input 3 5 ..... ..... ... Output YES -----Note----- In example 1, there is a horizontal snake comprising three \'#\' characters in the second row. In example 2, there is a vertical snake formed by the second column in the second row, and first column in the third row. In example 3, although there is a single \'#\', there is no snake of at least two connected \'#\' cells, hence the answer is \\"NO\\". In example 4, there are no \'#\' characters at all, hence the answer is \\"NO\\". In example 5, there is a horizontal snake comprising two \'#\' characters in the third row.","solution":"def is_snake_present(grid): m = len(grid) n = len(grid[0]) # Check for horizontal snakes for i in range(m): for j in range(n-1): if grid[i][j] == \'#\' and grid[i][j+1] == \'#\': return \\"YES\\" # Check for vertical snakes for i in range(m-1): for j in range(n): if grid[i][j] == \'#\' and grid[i+1][j] == \'#\': return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers. You need to find the number of \\"good subarrays\\". A \\"good subarray\\" is defined as a subarray of the given array where the sum of its elements is evenly divisible by a given integer K. Write a function to calculate the number of \\"good subarrays\\" in the array. # Function Signature ```python def count_good_subarrays(arr: List[int], K: int) -> int: ``` # Input - The function takes two parameters: 1. `arr` is a list of integers (1 ≤ len(arr) ≤ 10^5) where each number in the array is between -10^4 and 10^4. 2. `K` is the divisor, an integer (1 ≤ K ≤ 10^4). # Output - The function should return an integer representing the number of good subarrays. # Examples Example 1 ```python arr = [4, 5, 0, -2, -3, 1] K = 5 assert count_good_subarrays(arr, K) == 7 ``` Example 2 ```python arr = [2, 7, 6, 1, 4, 5] K = 3 assert count_good_subarrays(arr, K) == 5 ``` Example 3 ```python arr = [1, 2, 3, 4, 5] K = 1 assert count_good_subarrays(arr, K) == 15 ``` # Explanation 1. **Example 1**: - Subarrays that sum to a multiple of 5 are: [5], [5, 0], [0], [0, -2, -3], [-2, -3, 1, 4], [1, 4], [-2, -3]. - Thus, the count is 7. 2. **Example 2**: - Subarrays that sum to a multiple of 3 are: [6], [2, 7, 6], [7, 6], [1, 4, 5], [4, 5]. - Thus, the count is 5. 3. **Example 3**: - Since every number is included when K=1, all subarrays are valid. Use efficient algorithms and data structures to handle the constraints, as a naive approach may not work within the limit of 10^5 elements in the array.","solution":"from typing import List from collections import defaultdict def count_good_subarrays(arr: List[int], K: int) -> int: Returns the number of \\"good subarrays\\" in arr where a \\"good subarray\\" is a subarray whose elements sum to a multiple of K. count = 0 prefix_sum = 0 remainder_count = defaultdict(int) remainder_count[0] = 1 for num in arr: prefix_sum += num remainder = prefix_sum % K if remainder < 0: remainder += K count += remainder_count[remainder] remainder_count[remainder] += 1 return count"},{"question":"You are given a tree consisting of N nodes, rooted at node 1. Each node has a value associated with it. Define the weight of a node as the sum of the values of all nodes in its subtree, including itself. Your task is to answer Q queries, each of which asks for the weight of a specific node. -----Input:----- - The first line contains two integers N and Q, the number of nodes and the number of queries, respectively. - The second line contains N integers, the values associated with the nodes from 1 to N. - Each of the next N-1 lines contains two integers u and v, denoting an edge between nodes u and v. - Each of the next Q lines contains a single integer x, the node for which the weight is to be calculated. -----Output:----- - For each query, print the weight of the node x. -----Constraints----- - 1 <= N, Q <= 100,000 - 1 <= value of each node <= 10,000 - 1 <= x <= N -----Sample Input:----- 5 3 1 2 3 4 5 1 2 1 3 3 4 3 5 1 3 4 -----Sample Output:----- 15 12 4 -----EXPLANATION:----- - In Case 1, the subtree rooted at node 1 includes all nodes, so the weight is 1 + 2 + 3 + 4 + 5 = 15. - In Case 2, the subtree rooted at node 3 includes nodes 3, 4, and 5, so the weight is 3 + 4 + 5 = 12. - In Case 3, the subtree rooted at node 4 only includes itself, so the weight is 4.","solution":"def calculate_subtree_weights(n, values, edges, queries): from collections import defaultdict, deque adj_list = defaultdict(list) # Building adjacency list for the tree/graph for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # This will store the subtree weights of all nodes subtree_weights = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): visited[node] = True subtree_sum = values[node - 1] # current node\'s value for neighbor in adj_list[node]: if not visited[neighbor]: subtree_sum += dfs(neighbor) subtree_weights[node] = subtree_sum return subtree_sum # Start DFS from the root node which is 1 dfs(1) # Answering the queries results = [] for q in queries: results.append(subtree_weights[q]) return results"},{"question":"A kingdom has a series of interconnected towns, each represented by a node. The roads between these towns are bidirectional and can be represented as edges with weights indicating the travel time between the towns. The kingdom\'s ruler wants to travel from a starting town to a destination town and needs to know the shortest possible travel time. You are tasked with determining the shortest path time given the graph of towns and roads, the starting town, and the destination town. You are given: - `N`: The number of towns (nodes). - `R`: The number of roads (edges). - A list of `R` roads where each road is represented by three integers `[u, v, w]`, indicating there is a road between town `u` and town `v` with a travel time of `w`. - Two integers `S` and `T` representing the starting and destination towns respectively. Write a function `shortest_travel_time(N, R, roads, S, T)` that returns the minimum travel time from town `S` to town `T`. **Input format:** ``` N: int R: int roads: List[Tuple[int, int, int]] S: int T: int ``` **Output format:** Return the minimum travel time as an integer. If there\'s no way to reach the destination, return `-1`. **Constraints:** - `1 <= N <= 10^5` (number of towns) - `1 <= R <= 10^6` (number of roads) - `1 <= u, v <= N` - `1 <= w <= 10^4` **Example:** Input: ``` shortest_travel_time(5, 6, [(1, 2, 7), (1, 3, 9), (1, 5, 14), (2, 3, 10), (2, 4, 15), (3, 4, 11), (4, 5, 9)], 1, 4) ``` Output: ``` 20 ``` Explanation: The shortest path from town 1 to town 4 is 1 -> 3 -> 4 with a total travel time of 9 + 11 = 20.","solution":"import heapq def shortest_travel_time(N, R, roads, S, T): Returns the minimum travel time from town S to town T. If there\'s no path from S to T, return -1. # Build the graph represented as adjacency list graph = {i: [] for i in range(1, N+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue to hold (distance, node) and dictionary to store shortest paths pq = [(0, S)] shortest_paths = {i: float(\'inf\') for i in range(1, N+1)} shortest_paths[S] = 0 while pq: current_distance, current_town = heapq.heappop(pq) if current_distance > shortest_paths[current_town]: continue for neighbor, weight in graph[current_town]: distance = current_distance + weight if distance < shortest_paths[neighbor]: shortest_paths[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) result = shortest_paths[T] return result if result != float(\'inf\') else -1"},{"question":"You are given an array of N integers, representing the heights of buildings in a row. It is possible to move from one building to another if and only if the height of the second building is equal to or higher than the height of the first building. You need to determine the maximum number of buildings you can visit starting from any building and only moving to higher or equal buildings. Constraints: * All values in input are integers. * 1 leq N leq 10^5 * 1 leq h_i leq 10^4 Input: Input is given from Standard Input in the following format: N h_1 h_2 ldots h_N Output: Print the maximum number of buildings that can be visited. Examples: Input 5 1 2 2 3 2 Output 4 Input 3 5 4 3 Output 1 Input 6 4 4 4 4 4 4 Output 6","solution":"def max_buildings_to_visit(N, heights): if N == 0: return 0 max_visits = 1 current_visits = 1 for i in range(1, N): if heights[i] >= heights[i - 1]: current_visits += 1 max_visits = max(max_visits, current_visits) else: current_visits = 1 return max_visits # Example usage: # N = 5 # heights = [1, 2, 2, 3, 2] # print(max_buildings_to_visit(N, heights)) # Output: 4"},{"question":"Given an array of integers, your task is to find and print the maximum product of any triplet in the array. A triplet in the array is defined as a set of three elements `arr[i]`, `arr[j]`, `arr[k]` such that `0 <= i < j < k < n`. In order to solve this problem, you need to consider both the highest product of three positive numbers and the highest product of two negative numbers combined with the highest positive number, as negative numbers can yield a high product when multiplied with another negative number and a positive number. -----Input----- The first line contains an integer `n` (3 le n le 10^5), the number of elements in the array. The second line contains `n` integers a_1, a_2, dots, a_n (-10^3 le a_i le 10^3) representing the elements of the array. -----Output----- Output one integer: the maximum product of any triplet in the array. -----Examples----- Input 5 1 4 3 -6 -7 Output 168 Input 7 1 3 4 5 7 9 2 Output 315 -----Note----- For the first example, the maximum product can be achieved by multiplying the elements `-7, -6, 4` resulting in `-7 * -6 * 4 = 168`. For the second example, the maximum product can be achieved by multiplying the elements `5, 7, 9` resulting in `5 * 7 * 9 = 315`.","solution":"def maximum_product_triplet(arr): arr.sort() # The maximum product of three numbers can be either of the following: # 1. Product of the three largest numbers # 2. Product of the two smallest numbers and the largest number return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) # Input reading and function execution part for testing/debugging purpose if __name__ == \\"__main__\\": n = int(input().strip()) arr = list(map(int, input().strip().split())) print(maximum_product_triplet(arr))"},{"question":"Given two strings `X` and `Y`, write a function to find the length of the longest common subsequence (LCS) present in both strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Example 1: Input: X = \\"ABCBDAB\\" Y = \\"BDCABA\\" Output: 4 Explanation: The longest common subsequence is \\"BCBA\\". Example 2: Input: X = \\"AGGTAB\\" Y = \\"GXTXAYB\\" Output: 4 Explanation: The longest common subsequence is \\"GTAB\\". Example 3: Input: X = \\"ABC\\" Y = \\"DEF\\" Output: 0 Explanation: There is no common subsequence, so the output is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `lcsLength()` which takes two strings `X` and `Y` as input parameters and returns the length of the longest common subsequence. Expected Time Complexity: O(|X|*|Y|) Expected Auxiliary Space: O(|X|*|Y|) Constraints: 1 <= |X|, |Y| <= 1000 String X and Y may contain both Uppercase and Lowercase letters.","solution":"def lcs_length(X, Y): Returns the length of the longest common subsequence of X and Y. m = len(X) len_y = len(Y) dp = [[0] * (len_y + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, len_y + 1): if X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][len_y] # Example usage: # X = \\"ABCBDAB\\" # Y = \\"BDCABA\\" # print(lcs_length(X, Y)) # Output: 4"},{"question":"A warehouse stores packages in various compartments, each identified by a unique code. A package\'s information includes its code, weight, and an indication of whether it contains fragile material. Compartment codes are represented as strings of uppercase letters. Your task is to implement a system that updates the storage information of these packages and provides data based on specific queries after updates. You will handle two types of instructions: 1. \\"ADD code weight fragile\\" - Add a package with the given compartment code, weight, and a fragile flag to the warehouse. The fragile flag is either \'Y\' (Yes, fragile) or \'N\' (No, not fragile). 2. \\"QUERY sum_condition start_code end_code\\" - Calculate the sum of weights of all packages within the lexicographical range from start_code to end_code inclusive. \\"sum_condition\\" is either \'ALL\', \'FRAGILE\', or \'NONFRAGILE\', indicating which packages to include in the weight sum. Implement a class `Warehouse` that supports the following methods: - `def __init__(self)`: Initializes the Warehouse object with no packages. - `def add(self, code: str, weight: int, fragile: str)`: Adds a package to the warehouse. - `def query(self, sum_condition: str, start_code: str, end_code: str) -> int`: Returns the sum of the weights of packages that fulfill the query requirements. Input Format - First line contains an integer n (the number of instructions). - Next n lines contain the instructions as described above. Constraints - 1 ≤ n ≤ 10^5 - 1 ≤ |code| ≤ 10 (each compartment code is a non-empty string of up to 10 uppercase letters) - 1 ≤ weight ≤ 10^4 Output Format For each \\"QUERY\\" instruction, output the sum weight on a new line. Sample Input ``` 6 ADD A1 100 Y ADD B2 200 N ADD C3 150 Y QUERY ALL A1 C3 QUERY FRAGILE A1 C3 QUERY NONFRAGILE A1 C3 ``` Sample Output ``` 450 250 200 ``` Explanation - First, three packages are added: A1 with weight 100, B2 with weight 200, and C3 with weight 150. - The first query asks for the total weight of all packages from A1 to C3, which are 100 + 200 + 150 = 450. - The second query asks for the total weight of fragile packages from A1 to C3, which are 100 + 150 = 250. - The third query asks for the total weight of non-fragile packages from A1 to C3, which is only B2 with weight 200.","solution":"class Warehouse: def __init__(self): self.packages = [] def add(self, code: str, weight: int, fragile: str): self.packages.append((code, weight, fragile)) def query(self, sum_condition: str, start_code: str, end_code: str) -> int: total_weight = 0 for code, weight, fragile in self.packages: if start_code <= code <= end_code: if sum_condition == \'ALL\': total_weight += weight elif sum_condition == \'FRAGILE\' and fragile == \'Y\': total_weight += weight elif sum_condition == \'NONFRAGILE\' and fragile == \'N\': total_weight += weight return total_weight"},{"question":"Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer and that every square bracket pair \\"[]\\" is well-formed. You need to implement the function decodeString(), which takes the encoded string as input, decodes it, and returns the decoded string. Example 1: Input: s = \\"3[a]2[bc]\\" Output: \\"aaabcbc\\" Example 2: Input: s = \\"3[a2[c]]\\" Output: \\"accaccacc\\" Example 3: Input: s = \\"2[abc]3[cd]ef\\" Output: \\"abcabccdcdcdef\\" Your task: You do not need to read input or print anything. Implement the function decodeString(), which takes the encoded string s as input and returns the decoded string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N), where N is the length of the string. Constraints: 1 <= s.length <= 30 s consists of lowercase English letters, digits, and square brackets \'[]\'. s will not contain any invalid characters. All the integers in s are in the range [1, 300].","solution":"def decodeString(s): Decodes the encoded string according to the encoding rule. stack = [] current_num = 0 current_string = \\"\\" for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \\"[\\": stack.append((current_string, current_num)) current_string = \\"\\" current_num = 0 elif char == \\"]\\": last_string, num = stack.pop() current_string = last_string + num * current_string else: current_string += char return current_string"},{"question":"A company has a transportation system that moves goods between different locations. Each location is represented as a node, and each direct route between two locations is represented as an edge with a given weight corresponding to the cost of transportation. Due to cost constraints, the company wants to ensure that they only use the minimum number of routes required to connect all locations without any cycles — essentially forming a Minimum Spanning Tree (MST). Write a function `get_mst_cost(n, edges)` where: - `n` is an integer representing the number of locations (nodes). - `edges` is a list of tuples. Each tuple `(u, v, w)` represents a direct route between locations `u` and `v` with a transportation cost of `w`. The function should return the total cost of the Minimum Spanning Tree. If it\'s not possible to connect all nodes, return `-1`. # Constraints - `1 <= n <= 1000` - `1 <= len(edges) <= 5000` - `1 <= u, v <= n` - `1 <= w <= 10000` # Example ```python print(get_mst_cost(4, [(1, 2, 1), (2, 3, 4), (3, 4, 2), (4, 1, 3)])) ``` **Output** ``` 6 ``` Explanation: The Minimum Spanning Tree connecting all the nodes is achieved using routes `(1, 2)`, `(3, 4)`, and `(4, 1)` with costs `1`, `2`, and `3` respectively, summing up to `6`.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def get_mst_cost(n, edges): edges.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n mst_cost = 0 edge_count = 0 for u, v, w in edges: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: edge_count += 1 mst_cost += w union(parent, rank, x, y) if edge_count == n - 1: break if edge_count != n - 1: return -1 return mst_cost"},{"question":"You are given a circular array of integers, where the first element is considered adjacent to the last element. Your task is to determine the maximum sum of a subarray in this circular array. A subarray is defined as any contiguous segment of the array, and a circular subarray considers wrapping around the end of the array to the beginning. In other words, for an array of size `n`, you need to efficiently find the maximum possible value of the sum of a subarray of any length including the consideration of subarrays that may span from the end to the beginning of the array. Function Description Complete the `maxCircularSubarraySum` function below. ```python def maxCircularSubarraySum(nums): # Your code here ``` `maxCircularSubarraySum` has the following parameter: - `nums` (list): a list of integers representing the circular array Returns: - int: the maximum sum of a subarray in the circular array Input Format - The input consists of a single line containing the space-separated integers that constitute the circular array. Constraints - 1 ≤ size of array ≤ 3 * 10^4 - -10^4 ≤ individual elements ≤ 10^4 Example Input 1 -2 3 -2 Output 3 Explanation In the example above, the maximum sum subarray is `[3]`, which gives a maximum sum of `3`. Another example Input 5 -3 5 Output 10 Explanation In this example, the maximum sum subarray is the circular segment `[5, 5]`, which gives a maximum sum of `10`. Hints: 1. Consider using Kadane\'s algorithm to find the maximum subarray sum for the non-circular case. 2. Try to calculate the maximum subarray sum that includes elements wrapping around the end of the array to the beginning. 3. You may need to use the total sum of the array to find the maximum sum of the circular subarray.","solution":"def maxCircularSubarraySum(nums): def kadane(nums): max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Special Case when all numbers are negative max_kadane = kadane(nums) if max_kadane < 0: return max_kadane # Sum of the array total_sum = sum(nums) # Inverting sign of the elements for i in range(len(nums)): nums[i] = -nums[i] # Kadane\'s algorithm on inverted array max_inverted_kadane = kadane(nums) # The case where the circular subarray sum is considered max_circular = total_sum + max_inverted_kadane return max(max_kadane, max_circular)"},{"question":"You are given an array of integers and a positive integer `k`. Your task is to divide the array into `k` contiguous subarrays such that the sum of the maximum sum subarray among them is minimized. Write a function `minimize_max_subarray_sum(arr, k)` that takes an array of positive integers `arr` and an integer `k`, and returns the minimum possible value of the maximum sum of the `k` contiguous subarrays. Example: ```python minimize_max_subarray_sum([7, 2, 5, 10, 8], 2) => 18 minimize_max_subarray_sum([1, 2, 3, 4, 5], 2) => 9 minimize_max_subarray_sum([1, 4, 4], 3) => 4 ``` # Constraints: - The length of `arr` will be between 1 and 1000 (inclusive). - Elements of `arr` will be between 1 and 10^6 (inclusive). - `k` will be between 1 and the length of `arr` (inclusive). # Notes: In the first example: - Dividing [7, 2, 5, 10, 8] into two subarrays [7, 2, 5] and [10, 8] results in sums 14 and 18 respectively, where the maximum sum of the two subarrays is minimized to 18.","solution":"def minimize_max_subarray_sum(arr, k): def is_valid(mid): count = 1 current_sum = 0 for num in arr: if current_sum + num > mid: count += 1 current_sum = num if count > k: return False else: current_sum += num return True low, high = max(arr), sum(arr) while low < high: mid = (low + high) // 2 if is_valid(mid): high = mid else: low = mid + 1 return low"},{"question":"You are given a list of non-negative integers representing the amount of rainfall each bucket has collected, where each integer represents one bucket. Your task is to calculate the total amount of water that could be trapped between the buckets after the rainfall. Write a function `trapWater` that takes a list of integers as its parameter and returns the total amount of trapped water. For example, given a list of buckets with heights `[0,1,0,2,1,0,1,3,2,1,2,1]`, the total amount of water trapped would be `6` units. Function signature: ```python def trapWater(height: List[int]) -> int: ``` Examples: ``` trapWater([0,1,0,2,1,0,1,3,2,1,2,1]) --> 6 trapWater([4,2,0,3,2,5]) --> 9 ```","solution":"from typing import List def trapWater(height: List[int]) -> int: if not height: return 0 n = len(height) left, right = [0] * n, [0] * n # Fill left array left[0] = height[0] for i in range(1, n): left[i] = max(left[i-1], height[i]) # Fill right array right[n-1] = height[n-1] for i in range(n-2, -1, -1): right[i] = max(right[i+1], height[i]) # Calculate trapped water trapped_water = 0 for i in range(n): trapped_water += min(left[i], right[i]) - height[i] return trapped_water"},{"question":"Lara is an avid reader and is obsessed with counting the number of occurrences of characters in her favorite book. She wants to analyze the distribution of characters in various sections of the book for a research project. To achieve this, she decides to break the text into multiple segments. Each segment is specified by a starting index and an ending index, and she needs to find the frequency of each character within each segment. You are given a string `text` consisting of lowercase letters and a list of `queries`. Each query specifies two integers `l` and `r` where `1 ≤ l ≤ r ≤ len(text)`, representing the starting and ending indices of the segment (1-indexed). For each query, return the frequency of each character in the specified segment. INPUT: The first line contains the string `text`. The second line contains an integer `q`, the number of queries. The next `q` lines each contain two integers `l` and `r`, specifying the starting and ending indexes of a segment (1-indexed). OUTPUT: For each query, output 26 space-separated integers, each corresponding to the frequency of the characters \'a\' to \'z\' respectively in the specified segment. Each result should be in a new line. CONSTRAINTS: 1 ≤ len(text) ≤ 10^5 1 ≤ q ≤ 10^4 1 ≤ l ≤ r ≤ len(text) SAMPLE INPUT: abcabcabc 3 1 3 4 6 1 9 SAMPLE OUTPUT: 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Explanation: For the first query (1, 3): The segment is \\"abc\\", which contains 1 \'a\', 1 \'b\', and 1 \'c\'; all other letters occur 0 times. For the second query (4, 6): The segment is \\"abc\\", which contains 1 \'a\', 1 \'b\', and 1 \'c\'; all other letters occur 0 times. For the third query (1, 9): The segment is \\"abcabcabc\\", which contains 3 \'a\'s, 3 \'b\'s, and 3 \'c\'s; all other letters occur 0 times.","solution":"def character_frequencies(text, queries): Given a string `text` and a list of `queries` where each query specifies a starting and ending index, returns the frequency of each character (\'a\' to \'z\') within the specified segment for each query. :param text: str, the input text consisting of lowercase letters :param queries: list of tuple, each tuple contains two integers (l, r) for the segment indices (1-indexed) :return: list of list of int, each inner list contains 26 integers corresponding to the character frequencies result = [] # Build prefix sum array of character counts prefix_counts = [[0] * 26 for _ in range(len(text) + 1)] for i, char in enumerate(text): for j in range(26): prefix_counts[i + 1][j] = prefix_counts[i][j] prefix_counts[i + 1][ord(char) - ord(\'a\')] += 1 for l, r in queries: freq = [0] * 26 for j in range(26): freq[j] = prefix_counts[r][j] - prefix_counts[l - 1][j] result.append(freq) return result"},{"question":"Given a list of integers representing the daily temperature in a town over N days, we say that a \'heatwave\' occurs when there are three consecutive days where the temperature increases each day. Write a function to determine whether the town experienced a heatwave. Example 1: Input: N = 6 temps[] = {30, 32, 34, 33, 35, 37} Output: True Explanation: The temperatures on days 1, 2, and 3 are 30, 32, 34 which shows a heatwave. Example 2: Input: N = 5 temps[] = {30, 29, 32, 28, 35} Output: False Explanation: There are no three consecutive days with increasing temperatures. Your Task: You don\'t need to read input or print anything. Complete the function experiencedHeatwave() which takes the array temps[] and its size N as input parameters and returns a boolean value based on whether the town experienced a heatwave. Note: The generated output will be \\"True\\" or \\"False\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} -100 ≤ temps[i] ≤ 100","solution":"def experiencedHeatwave(N, temps): Determine if the town experienced a heatwave by checking for any three consecutive days where the temperature increased each day. Parameters: N : int : number of days temps : list of int : list of daily temperatures Returns: bool : True if there is heatwave, otherwise False for i in range(N - 2): if temps[i] < temps[i + 1] and temps[i + 1] < temps[i + 2]: return True return False"},{"question":"A new startup is organizing a coding competition. The participants are divided into multiple teams. The startup wants to send out invitations to the participants\' email addresses, but they only have a limited number of email servers, and each server can only send a limited number of emails per hour. The startup needs to determine the minimum number of servers required to send out all the invitations within a given hour. Each server can send out exactly `k` emails per hour. The total number of participants is `n`. -----Input----- The first line contains an integer `n` (1 le n le 1000), the number of participants. The second line contains an integer `k` (1 le k le 100), the number of emails each server can send per hour. -----Output----- Output a single integer, the minimum number of email servers needed to send out all the invitations within one hour. -----Examples----- Input 10 5 Output 2 Input 17 4 Output 5 -----Note----- In the first example, each server can send 5 emails per hour, and there are 10 participants. Therefore, 2 servers are needed to send out all 10 invitations (5 emails/server * 2 servers = 10 emails). In the second example, each server can send 4 emails per hour, and there are 17 participants. Therefore, 5 servers are needed to send out all 17 invitations (4 emails/server * 5 servers = 20 emails, which covers all 17 emails).","solution":"def minimum_servers(n, k): Returns the minimum number of servers required to send out n invitations within an hour, where each server can send k emails per hour. if n % k == 0: return n // k else: return n // k + 1"},{"question":"In a quaint town, there are a number of houses, each represented by a node connected by edges. Each edge denotes a bridge between two houses, and the bridges are bidirectional. The task is to determine if it is possible to create a journey starting from a specific house covering all houses without crossing any bridge more than once and then returning to the starting house. This kind of journey is known as an Eulerian Circuit. To help determine if such a journey is possible, you need to write a program that decides if a given graph of houses and bridges has an Eulerian Circuit. Input The input consists of multiple datasets. Each dataset is represented in the following format: > N M > u1 v1 > u2 v2 > ... > uM vM N is the number of houses, a positive integer not exceeding 100. M is the number of bridges, a positive integer not exceeding 1000. u_i and v_i are the houses connected by the i-th bridge. The end of input is indicated by a single zero line. Output For each dataset, output \\"YES\\" if the graph has an Eulerian Circuit; otherwise, output \\"NO\\". Sample Input 3 3 1 2 2 3 3 1 3 2 1 2 2 3 0 Output for Sample Input YES NO Example Input 3 3 1 2 2 3 3 1 3 2 1 2 2 3 0 Output YES NO","solution":"def has_eulerian_circuit(n, edges): Determines if the given graph has an Eulerian circuit. :param n: Number of nodes in the graph :param edges: List of tuples representing the edges :return: \\"YES\\" if an Eulerian circuit exists, \\"NO\\" otherwise from collections import defaultdict, deque if not edges: return \\"NO\\" # Degree count for each node degree = defaultdict(int) # Adjacency list graph = defaultdict(list) for u, v in edges: degree[u] += 1 degree[v] += 1 graph[u].append(v) graph[v].append(u) # Check all vertices with non-zero degree are connected def is_connected(): start = next((node for node in range(1, n + 1) if degree[node] > 0), None) if start is None: return True # Empty graph is trivially Eulerian visited = set() queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return all(v in visited for v in graph if degree[v] > 0) # Check if all vertices with non-zero degree are even if all(deg % 2 == 0 for deg in degree.values()): # Check if the graph is connected if is_connected(): return \\"YES\\" return \\"NO\\" def eulerian_circuit_checker(input_data): Processes multiple datasets to check for Eulerian circuits. :param input_data: A list of strings representing the input data :return: A list of \\"YES\\" or \\"NO\\" for each dataset index = 0 result = [] while index < len(input_data): line = input_data[index] if line == \'0\': break n, m = map(int, line.split()) edges = [] for i in range(m): index += 1 u, v = map(int, input_data[index].split()) edges.append((u, v)) result.append(has_eulerian_circuit(n, edges)) index += 1 return result"},{"question":"Read problems statements in Mandarin Chinese, Russian, and Vietnamese as well. Wizards recently discovered a mystical orb that emits magical energy in pulses. These pulses can be described as bursts of energy that occur at specific moments in time. Each burst of energy can potentially overlap with another, creating an even stronger pulse. The wizards want to study the behavior of these energy pulses by analyzing the energy at any given time. Consider that there are n energy pulses in total. Each pulse i starts at time si and ends at time ei, and has an energy level of pi. A wizard wants to know the total energy present at every given time slice between the moment when the first pulse starts and the moment when the last pulse ends, inclusive. To help wizards in analyzing this data, you need to write a program that calculates and returns the peak energy level observed within this time span. ------ Input ------ The first line contains a single integer n denoting the number of energy pulses. The following n lines each contain three integers si, ei, and pi denoting the start time, end time, and energy level of pulse i. ------ Output ------ Print a single line containing one integer — the peak energy level observed at any time slice. ------ Constraints ------ 1 ≤ n ≤ 10^5 0 ≤ si < ei ≤ 10^9 1 ≤ pi ≤ 10^6 ------ Sample Input 1 ------ 3 1 4 10 2 5 7 3 6 5 ------ Sample Output 1 ------ 17 ------ Explanation 1 ------ The energy levels at each moment in time are: - From time 1 to 2: 10 - From time 2 to 3: 10 + 7 = 17 - From time 3 to 4: 10 + 7 + 5 = 22 - From time 4 to 5: 7 + 5 = 12 - From time 5 to 6: 5 Therefore, the peak energy level observed is 22.","solution":"def peak_energy_level(n, pulses): from collections import defaultdict time_energy_map = defaultdict(int) for s, e, p in pulses: time_energy_map[s] += p time_energy_map[e] -= p current_energy = 0 max_energy = 0 for time in sorted(time_energy_map.keys()): current_energy += time_energy_map[time] max_energy = max(max_energy, current_energy) return max_energy"},{"question":"Martha is the librarian of a large library. She maintains a database of books in a simplified format where each book is associated with keywords represented as lowercase English letters (a to z). For each keyword, she lists the books that contain this keyword in ascending order of their IDs. Given a list of keywords and their respective lists of books, Martha wants to perform a union of two lists based on user input. Specifically, she wants to find a list of unique book IDs that have at least one of the given keywords. Write a program that takes the following inputs: 1. An integer K, the number of keywords. 2. K lines, each containing a keyword followed by a space-separated list of integers representing book IDs. 3. Two distinct keywords for which the union of book lists is to be determined. The program should output the combined list of unique book IDs in ascending order. -----Constraints----- - K is an integer, 1 leq K leq 26 - Each keyword is a single lowercase letter. - Each book ID is an integer, 1 leq ID leq 100000 - There are at most 1000 books associated with each keyword. -----Input----- Input is given from Standard Input in the following format: K keyword1 bookID1 bookID2 ... keyword2 bookID1 bookID2 ... ... keywordK bookID1 bookID2 ... keywordA keywordB -----Output----- Print the combined list of unique book IDs in ascending order as a space-separated string. -----Sample Input----- 3 a 1 2 3 4 b 3 4 5 6 c 5 6 7 8 a c -----Sample Output----- 1 2 3 4 5 6 7 8","solution":"def union_book_lists(K, keyword_list, keywordA, keywordB): Finds the union of book lists from two given keywords and returns sorted unique book IDs. Parameters: - K (int): Number of keywords. - keyword_list (list of tuples): Each tuple contains a keyword and a list of book IDs. - keywordA (str): The first keyword for union operation. - keywordB (str): The second keyword for union operation. Returns: - List of unique book IDs in ascending order. keyword_to_books = {} for keyword, books in keyword_list: keyword_to_books[keyword] = set(books) # Get book IDs for both keywords books_A = keyword_to_books.get(keywordA, set()) books_B = keyword_to_books.get(keywordB, set()) # Find union of both sets of book IDs union_books = books_A | books_B # Return sorted list of unique book IDs return sorted(union_books) # Example usage K = 3 keyword_list = [ (\'a\', [1, 2, 3, 4]), (\'b\', [3, 4, 5, 6]), (\'c\', [5, 6, 7, 8]) ] keywordA = \'a\' keywordB = \'c\' print(union_book_lists(K, keyword_list, keywordA, keywordB)) # Output: [1, 2, 3, 4, 5, 6, 7, 8]"},{"question":"In a distant galaxy known as the CodeTree system, there are a series of celestial nodes connected by binary gates. These connections form a specialized structure known as a Binary Tree. The binary tree has n nodes, and each node i has two child nodes, left[i] and right[i]. If a node does not have a left or right child, the value is -1. The tree is rooted at node 1, and each node has a unique integer value. Each node can have at most two children. Your task is to determine the depth of the given binary tree. The depth of a binary tree is the longest path from the root node to any leaf node. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree. The next n lines each contain three integers i, left[i], and right[i] (1 ≤ i ≤ n, -1 ≤ left[i], right[i] ≤ n). Output Print exactly one integer — the depth of the binary tree. Examples Input 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 Output 3 Input 3 1 2 -1 2 3 -1 3 -1 -1 Output 3 Explanation In the first example, the binary tree structure is: ``` 1 / 2 3 / 4 5 ``` The longest path is from node 1 to node 4 or node 5, and thus the depth is 3. In the second example, the binary tree structure is: ``` 1 / 2 / 3 ``` The longest path is from node 1 to node 3, and thus the depth is 3.","solution":"def find_depth(n, nodes): from collections import defaultdict, deque # Build the adjacency list representation of the binary tree tree = defaultdict(list) for i, left, right in nodes: if left != -1: tree[i].append(left) if right != -1: tree[i].append(right) # Depth-first search (DFS) to calculate depth def dfs(node): if node not in tree: return 1 max_depth = 0 for child in tree[node]: max_depth = max(max_depth, dfs(child)) return 1 + max_depth # Tree is rooted at node 1 return dfs(1) # Example usage: # n = 5 # nodes = [ # (1, 2, 3), # (2, 4, -1), # (3, -1, 5), # (4, -1, -1), # (5, -1, -1) # ] # print(find_depth(n, nodes)) # Output: 3"},{"question":"A string is said to be a **balanced** string if no two adjacent characters are the same. For example, \\"abab\\", \\"abcdabcd\\", and \\"ababcb\\" are balanced strings, whereas \\"aa\\", \\"abbc\\" and \\"aabbcc\\" are not. Given a string `s`, your task is to determine the minimum number of characters that need to be replaced to make the string balanced. Each replacement involves changing a character to any character from \'a\' to \'z\'. You are required to write a function: ```python def min_replacements_to_balance(s: str) -> int: pass ``` **Input:** - A string `s` of length `n` (1 ≤ `n` ≤ 10^6), consisting of lowercase English letters. **Output:** - Return an integer representing the minimum number of replaces needed to make the string balanced. **Example:** Input: ``` aa ``` Output: ``` 1 ``` Input: ``` abcdeba ``` Output: ``` 0 ``` Input: ``` aabbcc ``` Output: ``` 3 ``` Explanation: 1. For the first input \\"aa\\", we need to replace one \'a\' with any other character to balance the string. The balanced strings could be \\"ab\\" or \\"ba\\". 2. The second input \\"abcdeba\\" is already balanced, so no replacements are needed. 3. For the third input \\"aabbcc\\", we need to replace one of the \'a\'s, one \'b\', and one \'c\' to make the string balanced. For example, it could be transformed into \\"ababac\\" or \\"ababcb\\", etc. Three replacements are needed in this case.","solution":"def min_replacements_to_balance(s: str) -> int: replacements = 0 for i in range(1, len(s)): if s[i] == s[i-1]: replacements += 1 return replacements"},{"question":"Create a function `water_trapped()` to calculate the total amount of water trapped between the elevations in a given 1D list of non-negative integers, representing an elevation map where the width of each bar is 1 unit. Water will be trapped between the bars as indicated by the array, given that the water can only be trapped between two higher bars. For instance, given the elevation map `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`, the function should return `6` as per the following illustration: ``` Elevation map: 0 1 0 2 1 0 1 3 2 1 2 1 Water trapped: _ _ 2 _ 1 2 _ _ _ 1 _ _ ``` In this example, the heights have been marked with `_` in places where water is trapped. The total units of water trapped is `6`. You need to implement the function as follows: ```python def water_trapped(heights: List[int]) -> int: pass ``` # Input: - List of non-negative integers representing the elevation map. # Output: - Integer representing the total water trapped. # Examples: ```python water_trapped([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) == 6 water_trapped([4, 2, 0, 3, 2, 5]) == 9 water_trapped([0, 0, 0, 0]) == 0 water_trapped([1, 0, 1]) == 1 ``` # Constraints: - The list should have `n` elements where (0 le n le 10^4). - The height of each bar is between `0` and `10^5`.","solution":"def water_trapped(heights): Calculate the total water trapped between the elevations. :param heights: List[int] - non-negative integers representing the elevation map :return: int - total units of water trapped if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are organizing a programming contest and you have N problems that you want to distribute among M teams. Each problem can be solved by at most one team, and you want all teams to end up solving the same number of problems. To make it interesting, the problems are arranged in a circular manner, meaning that the first problem comes after the last problem. Your task is to determine if it is possible to distribute the problems in such a way that each team solves exactly K problems. If yes, you are also required to find one possible way of distributing the problems. For simplicity, assume that N, M, and K are positive integers and 1 le K le N. Moreover, each problem should be assigned such that every team has exactly K problems assigned and no two teams share any problem. -----Input----- The first line of the input contains three integers N, M, and K, where 2 le N le 10000, 1 le M le N, and 1 le K le N. -----Output----- If it is not possible to distribute the problems such that each team solves exactly K problems, print \\"Impossible\\". Otherwise, print M lines where each line represents the problems assigned to one team. Each line should contain exactly K integers in cyclic order. -----Examples----- Sample Input 1: 10 2 5 Sample Output 1: 1 2 3 4 5 6 7 8 9 10 Sample Input 2: 8 4 2 Sample Output 2: 1 2 3 4 5 6 7 8 Sample Input 3: 6 3 3 Sample Output 3: Impossible Sample Input 4: 6 1 6 Sample Output 4: 1 2 3 4 5 6","solution":"def distribute_problems(N, M, K): Determine if it is possible to distribute N problems among M teams, each solving exactly K problems. Return \'Impossible\' if not possible, otherwise return the distribution. if M * K != N: return \\"Impossible\\" problems = list(range(1, N + 1)) result = [] for i in range(M): team_problems = [] for j in range(K): # Calculate the index in a circular manner problem_index = (i * K + j) % N team_problems.append(problems[problem_index]) result.append(\\" \\".join(map(str, team_problems))) return \\"n\\".join(result)"},{"question":"Write a function that takes two integer inputs and returns the greatest common divisor (GCD) of the two numbers. The function should use the Euclidean algorithm to compute the GCD. **Notes**: - The Euclidean algorithm works by recursively reducing the problem of finding the GCD of two numbers to finding the GCD of a smaller pair of numbers. - If either of the inputs is zero, the GCD is the absolute value of the non-zero input. - If both inputs are zero, the GCD is undefined and the function should return `None`. Here is an example of the function: ```python def gcd(a, b): if a == 0 and b == 0: return None a = abs(a) b = abs(b) while b: a, b = b, a % b return a # Examples: print(gcd(48, 18)) # Output: 6 print(gcd(0, 18)) # Output: 18 print(gcd(0, 0)) # Output: None print(gcd(101, 103)) # Output: 1 ```","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. If both inputs are zero, the function returns None. if a == 0 and b == 0: return None a = abs(a) b = abs(b) while b: a, b = b, a % b return a"},{"question":"Task You are tasked with navigating a maze represented by a 2D grid. The maze consists of empty spaces (represented by 0) and walls (represented by 1). Your goal is to reach the bottom-right corner of the grid starting from the top-left corner. You can move up, down, left, or right, but you cannot move through walls. Write a function that determines the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, return -1. Example For the grid: ``` [ [0, 0, 1], [1, 0, 1], [1, 0, 0] ] ``` The shortest path takes 4 steps: 1. Move right to (0,1) 2. Move down to (1,1) 3. Move down to (2,1) 4. Move right to (2,2) So the result should be `4`. For the grid: ``` [ [0, 1], [1, 0] ] ``` There is no path to reach the bottom-right corner, so the result should be `-1`. Input/Output - `[input]` 2D integer array `grid` The grid representation of the maze. - `[output]` an integer The minimum number of moves required to reach the bottom-right corner or `-1` if it is not possible.","solution":"from collections import deque def min_moves_maze(grid): Returns the minimum number of moves required to reach the bottom-right corner of the maze. If it is not possible, returns -1. if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: row, col, dist = queue.popleft() if row == rows - 1 and col == cols - 1: return dist for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a function that simulates the movement of a car along a straight road. The function will receive a list of integers, where each integer represents a speed change at each second (positive for acceleration, negative for deceleration, and zero for no change). The function should calculate the total distance travelled by the car after applying all the speed changes. Assume the car starts at a speed of 0 and cannot go below a speed of 0 at any point. ``` calculateDistance(speedChanges) calculateDistance([1, 2, -1, 3, -3]) After 1 second, speed is 1, total distance is 1 After 2 seconds, speed is 3, total distance is 4 After 3 seconds, speed is 2, total distance is 6 After 4 seconds, speed is 5, total distance is 11 After 5 seconds, speed is 2, total distance is 13 Therefore, the total distance travelled is 13 calculateDistance([0, -1, 4, -2, 1]) After 1 second, speed is 0, total distance is 0 After 2 seconds, speed is 0, total distance is 0 After 3 seconds, speed is 4, total distance is 4 After 4 seconds, speed is 2, total distance is 6 After 5 seconds, speed is 3, total distance is 9 Therefore, the total distance travelled is 9 ``` Speed changes is a list of integers with length in the range [1,1000] and values in range [-10,10]","solution":"def calculateDistance(speedChanges): Calculate the total distance travelled by the car given a list of speed changes. Args: speedChanges (list of int): List of speed changes at each second. Returns: int: Total distance travelled by the car. speed = 0 distance = 0 for change in speedChanges: speed += change if speed < 0: speed = 0 distance += speed return distance"},{"question":"In an enchanted forest, there are N unique types of magical fruits arranged in a line. Each fruit has a specific health value associated with it. The health value can be positive, negative, or zero. Mr. Y, a forest ranger, needs to collect a group of these fruits such that the total health value from the selected group is as close as possible to a given target value T, without exceeding it. Mr. Y can only select fruits that are next to each other (consecutive fruits). He can opt to select none if achieving the target is not feasible through any combination of consecutive fruits. Write a program to help Mr. Y determine the highest possible sum of health values of consecutive fruits that is less than or equal to the given target T for each test case. Input Format: The first line contains an integer M, the number of test cases. Each test case consists of three lines: - The first line contains an integer N, the number of unique fruits. - The second line contains the N integers representing the health values of the fruits. - The third line contains the integer T, the target health value. Output Format: For each test case, output the highest sum of health values of consecutive fruits that does not exceed the target T. Constraints: 1 ≤ M ≤ 100 1 ≤ N ≤ 1000 -10^4 ≤ health value of each fruit ≤ 10^4 -10^5 ≤ T ≤ 10^5 SAMPLE INPUT 3 5 1 2 3 4 5 10 6 -1 2 3 -4 5 -3 5 4 5 -2 -3 2 4 SAMPLE OUTPUT 10 5 2 Explanation: Test Case 1: The sum of all given health values is 15, which exceeds the target of 10. The highest possible sum of consecutive fruits that is less than or equal to 10 is 10 (selecting all fruits). Test Case 2: The highest sum of consecutive fruits that does not exceed 5 is 5 (selecting fruits with health values 2, 3). Test Case 3: The highest sum of consecutive fruits that does not exceed 4 is 2 (selecting the last fruit only).","solution":"def find_max_sum_under_target(N, fruits, T): max_sum = float(\'-inf\') current_sum = 0 for start in range(N): current_sum = 0 for end in range(start, N): current_sum += fruits[end] if current_sum > T: break max_sum = max(max_sum, current_sum) return max_sum if max_sum != float(\'-inf\') else 0 def forest_ranger(M, test_cases): results = [] for case in test_cases: N, fruits, T = case result = find_max_sum_under_target(N, fruits, T) results.append(result) return results"},{"question":"Given a string `digits` representing an arbitrary large non-negative integer, return the product of all its digits, except the zeros. If there are no digits other than zero, return zero. For example, given the string \\"123405\\", the product of the digits is 1 * 2 * 3 * 4 * 5 = 120. Zeros are ignored in the product. # Function Signature ```python def product_of_digits(digits: str) -> int: pass ``` # Example **Input:** ```python digits = \\"123405\\" ``` **Output:** ```python 120 ``` **Explanation:** In the given string \\"123405\\": - Excluded 0s. - Product = 1 * 2 * 3 * 4 * 5 = 120. # Constraints - The string `digits` is non-empty and contains only digit characters (\'0\' - \'9\'). - The length of `digits` does not exceed 1000. # Note You do not need to handle the input/output directly. The focus is on completing the `product_of_digits` function that takes a string `digits` and returns an integer representing the product of the digits ignoring zeros.","solution":"def product_of_digits(digits: str) -> int: Returns the product of all the digits in the given string, excluding zeros. if not digits: return 0 product = 1 has_non_zero = False for digit in digits: num = int(digit) if num != 0: product *= num has_non_zero = True return product if has_non_zero else 0"},{"question":"A group of train enthusiasts is standing on a bridge that crosses over multiple train tracks. These tracks are numbered from 1 to n. As the trains pass by, the enthusiasts identify them based on their train numbers. Every train has a distinct number, and the enthusiasts make a note of them in an array in the sequence they observe. However, the bridge is quite long, and sometimes they get tired and miss one or more trains passing underneath. Now, they want to identify the smallest train number that they did not observe out of all possible train numbers from 1 to n, where n is the number of trains that should have passed. You are given a list of train numbers observed by the enthusiasts. Your task is to find the smallest train number that was missed. Input The input consists of multiple test cases. Each test case starts with an integer n (1 <= n <= 100,000) which represents the total number of distinct trains that should have passed. The following line contains k (1 <= k <= n) integers, representing the train numbers that were actually observed. The input terminates with a line containing a single integer 0. Output For each test case, output the smallest train number that was not observed. If all train numbers from 1 to n were observed, output \\"NO MISSING TRAIN\\". Example Input 5 1 2 4 5 6 2 3 5 6 1 0 Output 3 4","solution":"def find_missing_train(n, observed_trains): Finds the smallest missing train number from the observed train numbers. Parameters: - n (int): Total number of distinct trains. - observed_trains (list): List of observed train numbers. Returns: - int: The smallest missing train number, or \\"NO MISSING TRAIN\\" if all are observed. observed_set = set(observed_trains) for train_number in range(1, n + 1): if train_number not in observed_set: return train_number return \\"NO MISSING TRAIN\\" def process_input(input_data): Processes the input data and returns the results for each test case. Parameters: - input_data (str): Multiline string input for the test cases. Returns: - list: List of missing train numbers or \\"NO MISSING TRAIN\\" messages for each test case. lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break observed_trains = list(map(int, lines[i + 1].split())) results.append(find_missing_train(n, observed_trains)) i += 2 return results"},{"question":"You are given an array of integers and a list of queries. Each query either updates a range of elements in the array or requests the sum of a range of elements. The array starts with n integers, and you need to process q queries of the following types: 1. \\"1 l r\\": Calculate the sum of the elements from index l to r (inclusive). 2. \\"2 l r v\\": Add the value v to each element from index l to r (inclusive). After processing each query of the first type, print the calculated sum. -----Input----- The first line consists of two integers n and q (1 leq n, q leq 10^5), representing the number of elements in the array and the number of queries, respectively. The second line contains n integers: a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), representing the initial elements of the array. The next q lines describe the queries. Each query is either of the form \\"1 l r\\", or \\"2 l r v\\" (1 leq l leq r leq n, 1 leq v leq 10^9). It is guaranteed that the sum of the array lengths over all queries does not exceed 10^5. -----Output----- For each query of type \\"1 l r\\", print the sum of the elements from index l to r. -----Examples----- Input 6 4 1 2 3 4 5 6 1 1 6 2 2 5 10 1 1 6 1 2 4 Output 21 61 47 -----Note----- For the first query in the first test case, the sum of elements from index 1 to index 6 is 1+2+3+4+5+6=21. For the second query, we add 10 to each element from index 2 to index 5. The array becomes [1, 12, 13, 14, 15, 6]. For the third query, the sum of elements from index 1 to index 6 is 1+12+13+14+15+6=61. For the fourth query, the sum of elements from index 2 to index 4 is 12+13+14=39 but the output example has 47 instead. Please recheck the sample input/output values to correct the inconsistency in explanation.","solution":"class ArrayProcessor: def __init__(self, n, array): self.n = n self.array = array self.lazy = [0] * (n + 1) def _apply_lazy(self): for i in range(1, self.n + 1): self.lazy[i] += self.lazy[i - 1] self.array[i - 1] += self.lazy[i] self.lazy = [0] * (self.n + 1) def range_update(self, l, r, v): self.lazy[l] += v if r + 1 <= self.n: self.lazy[r + 1] -= v def range_sum(self, l, r): self._apply_lazy() # Ensure the array is updated return sum(self.array[l - 1:r]) def process_queries(n, q, array, queries): processor = ArrayProcessor(n, array) result = [] for query in queries: parts = query.split() if parts[0] == \'1\': l, r = int(parts[1]), int(parts[2]) sum_value = processor.range_sum(l, r) result.append(sum_value) elif parts[0] == \'2\': l, r, v = int(parts[1]), int(parts[2]), int(parts[3]) processor.range_update(l, r, v) return result"},{"question":"In the enchanted forest of Everglow, there are mystical creatures called Nüfaliks. These creatures have a unique way to communicate using sequences of musical notes. Each Nüfalik sequence is a permutation of the first ( N ) natural numbers which they refer to as harmonies. However, the magical compositions they create should start with an ascending sequence of at least ( K ) notes. Being a coding wizard, your task is to help the Nüfaliks determine if a given sequence is a valid magical composition. -----Input----- The input consists of two lines: - The first line contains two integers ( N ) and ( K ) where ( 1 leq K leq N leq 50 ). - The second line contains a permutation of the first ( N ) natural numbers. -----Output----- If the first ( K ) notes of the sequence form an ascending order, print the phrase Good Harmony. Otherwise, print the phrase Discord. -----Examples----- Sample Input 1: 5 3 1 2 3 5 4 Sample Output 1: Good Harmony Sample Input 2: 6 4 4 3 2 1 5 6 Sample Output 2: Discord Sample Input 3: 4 2 2 1 3 4 Sample Output 3: Discord","solution":"def verify_harmony(N, K, sequence): Verifies if the first K elements of the sequence are in ascending order. Parameters: - N (int): The number of elements in the sequence. - K (int): The required length of the starting ascending subsequence. - sequence (list of int): The permutation of the first N natural numbers. Returns: - str: \\"Good Harmony\\" if the first K elements are in ascending order, otherwise \\"Discord\\". for i in range(1, K): if sequence[i-1] > sequence[i]: return \\"Discord\\" return \\"Good Harmony\\""},{"question":"A factory has a set of machines that produce different types of parts. Each machine can produce one or more types of parts, and the factory needs to ensure that for any given production order, the total number of each type of part produced meets or exceeds the order requirements. Given the production capabilities of each machine and a production order, determine the minimum number of machines required to fulfill the order. If it is not possible to meet the order requirements with the given machines, return -1. Input: The first line contains an integer T, indicating the number of test cases. For each test case, the first line contains an integer M, the number of machines. The second line contains M strings, where each string represents the types of parts a machine can produce, with each type of part indicated by a unique uppercase character. The third line contains a string representing the production order, with each type of part required denoted by a unique uppercase character. Output: For each test case, print the minimum number of machines required to fulfill the production order, or -1 if it is not possible to fulfill the order. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 50 Each machine can produce between 1 and 26 parts. The production order string length is between 1 and 26. For Example, if the input is: 1 4 ABC DEF AC BD AABBCC The output should be: 3 Explanation: To fulfill the production order \\"AABBCC\\", three machines are needed: one producing \\"ABC\\", one producing \\"AC\\", and one producing \\"BD\\".","solution":"def min_machines_to_fulfill_order(machines, order): from collections import Counter import itertools order_counter = Counter(order) def can_fulfill_order(selected_machines): combined_parts = Counter() for machine in selected_machines: combined_parts.update(machine) for part, count in order_counter.items(): if combined_parts[part] < count: return False return True M = len(machines) for r in range(1, M + 1): for selected_machines in itertools.combinations(machines, r): if can_fulfill_order(selected_machines): return r return -1 def process_input(input_data): data = input_data.strip().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): M = int(data[index]) index += 1 machines = [] for _ in range(M): machines.append(data[index]) index += 1 order = data[index] index += 1 results.append(min_machines_to_fulfill_order(machines, order)) return results"},{"question":"Harry needs to generate passwords for a large number of users. Each password has to follow specific rules to ensure security: 1. It must contain at least one uppercase letter. 2. It must contain at least one lowercase letter. 3. It must contain at least one digit. 4. It must contain at least one special character from the set: `!@#%^&*()-+`. 5. It must be exactly N characters long. Harry will provide you with the length N, and you need to generate one such password. Write a program to help Harry generate passwords that adhere to the specified rules. Input The first line contains an integer T, the number of test cases. Each test case consists of a single integer N, the length of the password to be generated. Output For each test case, output a single password of length N that adheres to the specified rules. Constraints 1 ≤ T ≤ 100 4 ≤ N ≤ 100 Example Input: 2 8 12 Output: Ab1!dfg3 Gh4@jKl9nop1 Explanation The example passwords satisfy all the specified rules: 1. They contain at least one uppercase letter. 2. They contain at least one lowercase letter. 3. They contain at least one digit. 4. They contain at least one special character from the given set. 5. They are of the specified length (8 and 12 respectively).","solution":"import random def generate_password(N): if N < 4: raise ValueError(\\"Password length must be at least 4 to satisfy all rules.\\") # Character sets uppercase_chars = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" lowercase_chars = \\"abcdefghijklmnopqrstuvwxyz\\" digit_chars = \\"0123456789\\" special_chars = \\"!@#%^&*()-+\\" password = [ random.choice(uppercase_chars), random.choice(lowercase_chars), random.choice(digit_chars), random.choice(special_chars) ] remaining_length = N - 4 all_chars = uppercase_chars + lowercase_chars + digit_chars + special_chars password.extend(random.choices(all_chars, k=remaining_length)) # Shuffle to avoid predictable patterns random.shuffle(password) return \\"\\".join(password) def main(T, N_list): passwords = [] for N in N_list: passwords.append(generate_password(N)) return passwords"},{"question":"In a factory, there are N machines arranged in a line. Each machine is initially either ON or OFF. The factory manager wants to operate the machines optimally to save energy. The operations are defined as follows: 1. If a machine is ON, it can switch itself and an adjacent machine (either left or right) OFF. 2. If a machine is OFF, it cannot change the state of any machine. You are given the initial states of the machines in a binary string format, where \'1\' represents an ON machine and \'0\' represents an OFF machine. Your task is to determine the minimum number of operations required to turn all the machines OFF. -----Constraints----- - 1 ≦ N ≦ 100 - The input string consists only of \'0\' and \'1\'. -----Input----- The input is given from Standard Input in the following format: s -----Output----- Print the minimum number of operations required to turn all the machines OFF. -----Sample Input----- 1101 -----Sample Output----- 2 Explanation: 1. Turn off the second machine (s[1] = \'1\'), which also turns off the third machine (s[2] = \'1\'). The string becomes \\"1000\\". 2. Turn off the first machine (s[0] = \'1\'), which also turns off the second machine (s[1] = \'0\'). The string becomes \\"0000\\". So, the minimum number of steps needed is 2.","solution":"def min_operations_to_turn_off(s): Returns the minimum number of operations required to turn all the machines OFF. :param s: A string representing the initial state of the machines. :return: The minimum number of operations to turn all machines OFF. operations = 0 i = len(s) - 1 while i >= 0: if s[i] == \'1\': operations += 1 i -= 2 else: i -= 1 return operations"},{"question":"You are given a list of integers. We define a segment of the list to be a contiguous subarray of it. The *sum* of a segment is the sum of its elements. Your task is to determine the *maximum sum of any segment* of the list. A segment must have at least one element to be considered. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains a single integer N, the length of the list. - The second line of each test case contains N integers separated by space, the elements of the list. ------ Output Format ------ For each test case, output on a new line the answer — the maximum sum of any segment of the list. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -10^4 ≤ each element of the list ≤ 10^4 ------ Sample Input 1 ------ 3 5 1 2 3 -2 5 4 -1 -2 -3 -4 6 -1 3 -2 1 -1 3 ------ Sample Output 1 ------ 9 -1 4 ------ Explanation 1 ------ Test case 1: The segment with the maximum sum is [1, 2, 3, -2, 5] with a sum of 9. Test case 2: The segment with the maximum (and least negative) sum is [-1] with a sum of -1. Test case 3: The segment with the maximum sum is [3, -2, 1, -1, 3] with a sum of 4.","solution":"def max_segment_sum(T, test_cases): def kadane(nums): max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global results = [] for case in test_cases: N = case[0] nums = case[1] results.append(kadane(nums)) return results"},{"question":"You are developing a new feature for a text-based role-playing game where characters can collect gems in a 2D grid. Each cell in the grid contains either an obstacle, a gem, or is empty. Your task is to determine the maximum number of gems a character can collect starting from a given position, moving only up, down, left, or right. The character cannot move to a cell with an obstacle, and the character cannot step out of the grid boundaries. The character can collect gems by moving onto cells containing them, and each gem in a cell can only be collected once. -----Input----- The first line contains two integers n, m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid respectively. The second line contains the integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the starting position of the character in the grid. The third line contains the integer g (0 ≤ g ≤ 10) — the maximum number of gems the character can collect. The next n lines describe the grid, each of length m and consisting only of the symbols \'.\', \'#\', and \'G\'. Symbol \'.\' denotes an empty cell, \'#\' denotes an obstacle, and \'G\' denotes a cell containing a gem. -----Output----- Print exactly one integer — the maximum number of gems that can be collected starting from the given position. -----Examples----- Input 5 5 3 3 2 ..... ..G.. ..#.. .#. ..... Output 1 Input 4 4 2 2 3 ..G. .#G. ..G. .... Output 3 -----Note----- In the first example: The character starts at position (3, 3) but can only collect 1 gem by moving to position (2, 3). In the second example: The character starts at position (2, 2) and can collect all 3 gems by moving to positions (2, 3), (3, 3), and (2, 4).","solution":"def max_gems_collected(n, m, r, c, g, grid): Calculates the maximum number of gems a character can collect in a grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. r (int): Starting row position of the character. c (int): Starting column position of the character. g (int): Maximum number of gems the character can collect. grid (list): 2D list representing the grid where \'.\' is empty space, \'#\' is an obstacle, and \'G\' contains a gem. Returns: int: Maximum number of gems that can be collected. from collections import deque # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(nx, ny): return 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' queue = deque([(r - 1, c - 1)]) visited = set() visited.add((r - 1, c - 1)) collected_gems = 0 while queue: x, y = queue.popleft() # collect gem if present if grid[x][y] == \'G\': collected_gems += 1 if collected_gems == g: return collected_gems grid[x][y] = \'.\' # collect gem and mark as empty for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return collected_gems"},{"question":"Alicia enjoys hiking in the mountains and always wants to record the elevation changes along her route. She decided to create an elevation profile of her hike using an array of integers where each integer represents the elevation of a specific point in her hike. Now, she wants to find the maximum elevation difference between any two points on the hiking trail given some specific constraints on the range of the hike she can consider. Write a function `maxElevationDifference` that takes in three parameters: 1. An integer array `elevations` where `elevations[i]` represents the elevation at point `i`. 2. An integer `k` which represents the maximum number of points she can consider from her starting point. 3. An integer `m` which represents the maximum steps she can take from her starting point to find the maximum elevation difference. Your goal is to find the maximum elevation difference between any two points in the range from 0 to `k-1`, and the points considered for the difference should not be more than `m` steps apart. # Input - The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 10^5), where `n` is the number of points in the elevation array, and `k` is the maximum number of points to consider from the starting point. - The second line contains an integer `m` (0 ≤ m ≤ k-1), which is the maximum steps she can take between any two points to calculate the elevation difference. - The third line contains `n` space-separated integers representing the `elevations` array (1 ≤ elevations[i] ≤ 10^4). # Output Output a single integer representing the maximum elevation difference found within the constraints. # Examples Example 1: **Input** ``` 6 4 2 1 5 2 8 4 3 ``` **Output** ``` 6 ``` **Explanation** The range to consider is from 0 to 3 (which covers elevations [1, 5, 2, 8]). The maximum elevation difference while considering no more than `m = 2` steps apart is 8 - 2 = 6 (from point 3 to point 2). Example 2: **Input** ``` 5 3 1 3 3 1 6 9 ``` **Output** ``` 3 ``` **Explanation** The range to consider is 0 to 2 (which covers elevations [3, 3, 1]). The maximum elevation difference while considering no more than `m = 1` step apart is 3 - 1 = 2 (from point 0 to point 2). # Note - Make sure to handle edge cases where `k = 1` or `m = 0` effectively. - The function should have an efficient approach since n can be up to 10^5.","solution":"def maxElevationDifference(elevations, k, m): max_diff = 0 # Iterate through the first `k` elements for i in range(k): for j in range(i + 1, min(i + m + 1, k)): max_diff = max(max_diff, abs(elevations[j] - elevations[i])) return max_diff"},{"question":"Given a list of integers, your task is to find if there exists a pair of elements in the array such that their sum is equal to a given target number. Example: Input 5 1 2 3 9 5 8 Output Yes Explanation For the given example when the array is [1, 2, 3, 9, 5] and the target sum is 8, the pair (3, 5) sums up to 8. Hence the output is \\"Yes\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `pair_exists()` which takes a list of integers and a target sum as input parameters and returns \\"Yes\\" if such a pair exists, otherwise \\"No\\". Constraints: - 1 ≤ Length of list ≤ 10^4 - -10^5 ≤ Element of list, target sum ≤ 10^5","solution":"def pair_exists(arr, target_sum): Determines if there exists a pair of elements in the array such that their sum is equal to the given target_sum. Parameters: arr (List[int]): List of integers. target_sum (int): The target sum we want to find. Returns: str: \\"Yes\\" if such a pair exists, otherwise \\"No\\". seen = set() for num in arr: if target_sum - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"# Story&Task You are responsible for managing warehouse inventory and you need to track the popularity of different product categories based on sales. Every product belongs to a specific category, and each sale of a product is recorded as a transaction. Your task is to identify the category that has the highest total sales value. If there are multiple categories with the same highest sales value, return the one that appears first alphabetically. Write a function that, given the list of transactions and the corresponding categories of products, returns the most popular category by sales value. # Input/Output - `[input]` string array `transactions` Each element in the list represents a single transaction in the format \\"category:amount\\". Each transaction includes the category followed by the amount of sale, separated by a colon. Amounts are positive integers. - `[output]` a string The name of the category with the highest total sales value. If there are multiple categories with the same sales value, return the one that is lexicographically smallest. # Example For `transactions = [\\"Electronics:200\\", \\"Clothing:100\\", \\"Electronics:150\\", \\"Groceries:300\\", \\"Clothing:200\\"]`, the output should be `\\"Electronics\\"`. ``` The total sales for each category are: Electronics: 200 + 150 = 350 Clothing: 100 + 200 = 300 Groceries: 300 Since \\"Electronics\\" has the highest sales value, the output is \\"Electronics\\". ``` For `transactions = [\\"Toys:50\\", \\"Books:50\\", \\"Toys:100\\", \\"Books:100\\", \\"Clothing:150\\"]`, the output should be `\\"Books\\"`. ``` The total sales for each category are: Toys: 50 + 100 = 150 Books: 50 + 100 = 150 Clothing: 150 Since \\"Toys\\" and \\"Books\\" both have the highest sales value (150) and \\"Books\\" is lexicographically smaller than \\"Toys\\", the output is \\"Books\\". ```","solution":"def most_popular_category(transactions): Returns the category with the highest total sales value. If multiple categories have the same highest sales value, returns the one that appears first alphabetically. sales_dict = {} for transaction in transactions: category, amount = transaction.split(\':\') amount = int(amount) if category in sales_dict: sales_dict[category] += amount else: sales_dict[category] = amount # Find the max sales value max_sales = max(sales_dict.values()) # Find all categories with max sales value and return the alphabetically smallest one return min(category for category, sales in sales_dict.items() if sales == max_sales)"},{"question":"Stanley is working on an AI chatbot, and he wants to implement a simple feature for recognizing named entities in a user\'s input. Named entities refer to real-world objects such as people, places, organizations, and dates. For simplicity, he will only focus on three types of named entities: people (denoted by `<person>` and `</person>` tags), places (denoted by `<place>` and `</place>` tags), and dates (denoted by `<date>` and `</date>` tags). He needs a function that will extract the content of these entities from a given line of input, excluding the tags, and then count the occurrences of each type of named entity. -----Input----- The input consists of a single line containing the user’s input string. -----Output----- Output the count of each type of named entity in the format: ``` people: count places: count dates: count ``` If a type of named entity is not present in the input, its count should be 0. -----Limits----- - The input string will be between 1 and 1000 characters long. - The input string may contain multiple overlapping or nested named entities. - The input string will only contain the tags `<person>`, `</person>`, `<place>`, `</place>`, `<date>`, and `</date>`, and the content within these tags. - There will not be any incomplete or mismatched tags in the input string. -----Examples----- Sample Input 1: Hello <person>John Doe</person>, welcome to <place>New York</place>. Your appointment is on <date>15th September</date>. Sample Output 1: people: 1 places: 1 dates: 1 Sample Input 2: Today, <person>Alice</person> and <person>Bob</person> are visiting <place>Paris</place> on <date>10th October</date>. Sample Output 2: people: 2 places: 1 dates: 1 Sample Input 3: Just a simple sentence with no named entities. Sample Output 3: people: 0 places: 0 dates: 0","solution":"import re def count_named_entities(input_string): Counts named entities in the input string. Named entities are denoted by <person></person>, <place></place>, and <date></date> tags. Args: input_string (str): The input string containing named entities. Returns: dict: A dictionary containing the count of each type of named entity. people = len(re.findall(r\'<person>.*?</person>\', input_string)) places = len(re.findall(r\'<place>.*?</place>\', input_string)) dates = len(re.findall(r\'<date>.*?</date>\', input_string)) return { \'people\': people, \'places\': places, \'dates\': dates }"},{"question":"Write a function `flatten_and_square()` that accepts a nested list of integers and returns a list with all the integers flattened and each integer squared. ```python flatten_and_square([[1, 2, 3], [4, 5], [6]]) // returns [1, 4, 9, 16, 25, 36] flatten_and_square([[-1, -2], [0], [3, 4]]) // returns [1, 4, 0, 9, 16] flatten_and_square([[]]) // returns [] ``` The input list can be nested to several levels.","solution":"def flatten_and_square(nested_list): Accepts a nested list of integers and returns a list with all the integers flattened and each integer squared. :param nested_list: Nested list of integers :return: Flattened list with each integer squared flattened_list = [] def flatten(element): if isinstance(element, list): for item in element: flatten(item) else: flattened_list.append(element) flatten(nested_list) return [x**2 for x in flattened_list]"},{"question":"Write a program that reads a list of integers and determines whether the integers form a strictly increasing sequence. The sequence is strictly increasing if each subsequent number is greater than the previous one. Constraints * The list will contain between 2 and 100 integers. * Each integer in the list will be between 1 and 1000. Input A single line containing space-separated integers. Output Print \\"Yes\\" if the list of integers forms a strictly increasing sequence, otherwise print \\"No\\". Examples Input 1 2 3 4 5 Output Yes Input 5 3 8 9 Output No","solution":"def is_strictly_increasing(sequence): Determines whether the provided list of integers forms a strictly increasing sequence. :param sequence: List[int] - A list of integers. :return: str - \\"Yes\\" if the sequence is strictly increasing, otherwise \\"No\\". for i in range(1, len(sequence)): if sequence[i] <= sequence[i - 1]: return \\"No\\" return \\"Yes\\" if __name__ == \\"__main__\\": sequence = list(map(int, input().strip().split())) print(is_strictly_increasing(sequence))"},{"question":"You are given a patch of rectangular tiles arranged in a grid with R rows and C columns. Each tile can either be plain (represented by 0) or have an obstacle (represented by 1). You need to start in the top-left corner of the grid and reach the bottom-right corner while navigating around the obstacles. You can move either right or down at any step, and you can only move onto plain tiles. Determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers R and C. Each of the next R lines contains C space-separated integers 0 or 1 representing the grid tiles. ------ Output ------ For each test case, print a single line containing one integer — the number of unique paths from the top-left to the bottom-right corner. If no such path exists, print 0. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ R, C ≤ 100 Each tile is either 0 or 1. ----- Sample Input ------ 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 1 0 ----- Sample Output ------ 2 0 ----- Explanation ------ Example case 1: There are two unique paths from the top-left corner (0,0) to the bottom-right corner (2,2): - Right → Right → Down → Down - Down → Down → Right → Right Example case 2: There is no way to move from the top-left to the bottom-right corner due to the obstacles blocking all paths.","solution":"def unique_paths_with_obstacles(grid): if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 R, C = len(grid), len(grid[0]) dp = [[0] * C for _ in range(R)] dp[0][0] = 1 for r in range(R): for c in range(C): if grid[r][c] == 1: dp[r][c] = 0 elif r > 0 and c > 0: dp[r][c] = dp[r-1][c] + dp[r][c-1] elif r > 0: dp[r][c] = dp[r-1][c] elif c > 0: dp[r][c] = dp[r][c-1] return dp[R-1][C-1] def solve_number_of_unique_paths(test_cases): results = [] for grid in test_cases: results.append(unique_paths_with_obstacles(grid)) return results def parse_input(raw_input): data = raw_input.strip().split(\\"n\\") index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): R, C = map(int, data[index].split()) index += 1 grid = [] for _ in range(R): row = list(map(int, data[index].split())) grid.append(row) index += 1 test_cases.append(grid) return test_cases def process_input(raw_input): test_cases = parse_input(raw_input) return solve_number_of_unique_paths(test_cases)"},{"question":"Write a function `largest_sum_subarray` that takes an integer array `arr` and returns the largest sum of a contiguous subarray within the given array. Input 4 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The subarray [4, -1, 2, 1] has the largest sum = 6.","solution":"def largest_sum_subarray(arr): Returns the largest sum of a contiguous subarray within the given array. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Backwards and Forwards You have decided to write a secret diary in a unique way. To encrypt your diary entries, you will reverse the string on even days and keep the string as it is on odd days. As a highly secure individual, you take expressions of love very seriously, even if they are in your secret diary! Given the day of the month and the diary entry, you need to write a program that encrypts the message correctly. **Input** - The first line will contain the number of test cases T, not more than 20. - For each test case, the first line contains an integer D (1 ≤ D ≤ 31), the day of the month. The second line contains a string S of not more than 100 characters consisting of lowercase alphabets and spaces. **Output** - For each test case, output a single line where the string S is reversed if D is even, otherwise it is kept as it is. **Example** **Input:** ``` 3 2 i love coding challenges 15 today is a beautiful day 28 hello world ``` **Output:** ``` segnellahc gnidoc evol i today is a beautiful day dlrow olleh ```","solution":"def encrypt_diary_entry(D, S): Encrypt the diary entry based on the given day. Parameters: - D: int, the day of the month (between 1 and 31 inclusive) - S: string, the diary entry Returns: - string, the encrypted diary entry if D % 2 == 0: return S[::-1] else: return S def process_test_cases(test_cases): results = [] for D, S in test_cases: results.append(encrypt_diary_entry(D, S)) return results"},{"question":"You are given a string containing only lowercase English letters. Your task is to find the number of distinct valid strings that can be obtained by deleting exactly one character from it. A string is considered **valid** if the remaining characters form a palindrome. If there are no valid strings that can be formed after deleting exactly one character, return `0`. -----Input----- The input contains one string consisting of lowercase English letters. The length of the string is between 2 and 10^5 inclusive. -----Output----- Print the number of distinct valid palindromic strings obtainable by deleting exactly one character. -----Example----- Input abca Output 2","solution":"def count_valid_palindromic_deletions(s): Return the number of distinct valid palindromic strings obtainable by deleting exactly one character from the input string s. def is_palindrome(sub): return sub == sub[::-1] count = 0 seen = set() for i in range(len(s)): candidate = s[:i] + s[i+1:] if candidate not in seen and is_palindrome(candidate): seen.add(candidate) count += 1 return count"},{"question":"**Problem Statement:** Alice is teaching a class of young students the concept of prime numbers. She comes up with a fun exercise for the class. She provides each student with a list of numbers and asks them to replace each non-prime number in the list with the nearest smaller prime number. For example, if the number is 4, it should be replaced with 3, since 3 is the largest prime number that is less than 4. If the number itself is prime, it remains unchanged. Alice has asked for your help to automate this exercise. Your task is to write a program that takes a list of numbers and replaces each non-prime number with the nearest smaller prime number. Your program should read the list of numbers and output the transformed list. **Input:** 1. An integer N, the number of elements in the list. 2. N space-separated integers, representing the elements of the list. **Output:** - A single line containing N space-separated integers, representing the transformed list where each non-prime number has been replaced by the nearest smaller prime number. **Constraints:** - 1 ≤ N ≤ 1000 - 1 ≤ Each number in the list ≤ 10000 **Note:** 1 is not considered a prime number. If a number is already prime, it remains unchanged. **Sample Input:** 6 10 17 18 19 20 23 **Sample Output:** 7 17 17 19 19 23 **Explanation:** - For the number 10, the nearest smaller prime is 7. - For 17, it is already prime. - For 18, the nearest smaller prime is 17. - For 19, it is already prime. - For 20, the nearest smaller prime is 19. - For 23, it is already prime.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def nearest_smaller_prime(num): Find the nearest smaller prime number less than the given number. if num <= 2: return 2 # the nearest smallest prime for any number less than or equal to 2 for i in range(num - 1, 1, -1): if is_prime(i): return i return 2 # this case should not be typically reached because of constraints def transform_list(nums): Transform the list by replacing non-prime numbers with the nearest smaller prime. return [num if is_prime(num) else nearest_smaller_prime(num) for num in nums]"},{"question":"Anna is a network administrator and she has to ensure that the network remains connected while performing updates. The network can be represented as a set of nodes (computers) connected by edges (connections). During an update, she needs to temporarily disable some connections without disconnecting the network. The goal is to find the minimum number of connections that, if removed, would still keep the network connected. The network is represented as an undirected graph, and a connected network means there is a path between any two nodes. Given a set of nodes and connections, determine the minimum number of edges that can be removed without disconnecting the network. If it\'s not possible to remove any edges without disconnecting the network, return 0. INPUT: First line of input contains a number T denoting the number of test cases. T test cases follow. For each test case, the first line contains two integers N (number of nodes) and M (number of edges). The next M lines each contain two integers U and V denoting an edge between nodes U and V. OUTPUT: Output a single line for each of the test cases that denotes the minimum number of edges that can be removed without disconnecting the network. CONSTRAINTS: 1 ≤ T ≤ 5 1 ≤ N ≤ 1000 1 ≤ M ≤ 2000 SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 1 5 4 1 2 2 3 3 4 4 5 SAMPLE OUTPUT 1 0 Explanation In the first case: After removing any one of the edges, the network remains connected. So, the answer is 1. In the second case: There is no edge that can be removed without disconnecting the network. So, the answer is 0.","solution":"import networkx as nx def min_edges_remove_keep_connected(num_cases, test_cases): results = [] for case in test_cases: N = case[0] M = case[1] edges = case[2] # Create a graph G = nx.Graph() G.add_edges_from(edges) # Check for bridges bridge_count = len(list(nx.bridges(G))) # If there\'re no bridges, we can remove any edge if bridge_count == 0: results.append(min(1, M)) else: results.append(0) return results"},{"question":"Given a string S consisting of lowercase English letters, answer the following query Q times: For each query, given two integers L and R, find the count of unique letters between indices L and R (inclusive) in the string S. ----Constraints---- - 1 ≤ |S| ≤ 100,000 (length of string S) - 1 ≤ Q ≤ 50,000 (number of queries) - 1 ≤ L ≤ R ≤ |S| ----Input---- The input is given from Standard Input in the following format: ``` S Q L_1 R_1 L_2 R_2 ... L_Q R_Q ``` ----Output---- For each query, output the count of unique letters between indices L and R (inclusive). ----Sample Input---- ``` abcabc 3 1 3 2 5 1 6 ``` ----Sample Output---- ``` 3 3 3 ``` ----Explanation---- - For the first query (1, 3), the unique letters between indices 1 and 3 are \'a\', \'b\', and \'c\'. - For the second query (2, 5), the unique letters between indices 2 and 5 are \'b\', \'a\', and \'c\'. - For the third query (1, 6), the unique letters between indices 1 and 6 are \'a\', \'b\', and \'c\'.","solution":"def count_unique_letters(S, queries): Given a string S and a list of queries, return a list of counts of unique letters between indices L and R (inclusive) for each query. Parameters: S (str): A string consisting of lowercase English letters. queries (list of tuples): A list of tuples where each tuple contains two integers (L, R) representing the query range. Returns: list: A list of counts of unique letters for each query. result = [] for L, R in queries: unique_letters = set(S[L-1:R]) result.append(len(unique_letters)) return result def process_input(): import sys input = sys.stdin.read data = input().split() S = data[0] Q = int(data[1]) queries = [(int(data[2 + i*2]), int(data[3 + i*2])) for i in range(Q)] return S, queries if __name__ == \\"__main__\\": S, queries = process_input() results = count_unique_letters(S, queries) for res in results: print(res)"},{"question":"A group of scientists has discovered a unique sequence of numbers while experimenting with cellular automata. They have named this sequence as the \\"Binary Incremental Sequence\\" (BIS). The BIS of any number is generated by repeatedly adding 1 to the binary representation of that number until the length of the sequence is equal to the integer itself. For example, the BIS of 3 is: 1. Start with binary representation of 0 -> \\"0\\". 2. Add 1 (0 becomes 1) -> \\"1\\". 3. Add 1 (1 becomes 10) -> \\"10\\". Thus, BIS(3) = [\\"0\\", \\"1\\", \\"10\\"]. Now, they seek your help to write a program that, given an integer N, generates its BIS. Input:- The first line of input is an integer T which specifies the number of test cases. Each of the following lines contains an integer N. Output:- For each test case, output the Binary Incremental Sequence as a space-separated list for the given N. Constraints:- 1 ≤ T ≤ 100 1 ≤ N ≤ 100 SAMPLE INPUT 3 3 5 2 SAMPLE OUTPUT 0 1 10 0 1 10 11 100 0 1","solution":"def generate_bis(n): Generates the Binary Incremental Sequence (BIS) for the given integer n. bis = [] for i in range(n): bis.append(bin(i)[2:]) return bis def process_input(T, cases): Processes the input and generates the BIS for each case. result = [] for n in cases: result.append(\\" \\".join(generate_bis(n))) return result"},{"question":"Given an undirected graph with n nodes and m edges, every node has a certain color. Your task is to find the number of pairs of nodes (u, v) such that there is a path between u and v and both nodes u and v have the same color. -----Input----- The first line contains two integers n and m (1 le n, m le 100,000) - the number of nodes and edges in the graph. The second line contains n integers where the i-th integer c_i (1 le c_i le 10^9) is the color of the i-th node. The next m lines each contain two integers u and v (1 le u, v le n; u ne v) representing an edge between node u and node v. There are no multiple edges between any two nodes. -----Output----- Print the number of pairs of nodes (u, v) such that there is a path between u and v and both have the same color. -----Examples----- Input 4 3 1 2 1 2 1 2 2 3 3 4 Output 2 Input 5 4 1 1 2 2 2 1 2 2 3 3 4 4 5 Output 4 -----Note----- In the first example, the pairs of nodes with the same color that have a path between them are: (1, 3) and (2, 4). In the second example, the pairs of nodes with the same color that have a path between them are: (1, 2), (3, 4), (3, 5), and (4, 5).","solution":"def count_pairs_with_same_color(n, m, colors, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True component = [start] while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) component.append(neighbor) return component # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Find connected components visited = [False] * (n + 1) components = [] for i in range(1, n + 1): if not visited[i]: components.append(bfs(i)) # Count pairs within each component color_count = defaultdict(int) total_pairs = 0 for component in components: color_count.clear() for node in component: color_count[colors[node - 1]] += 1 for count in color_count.values(): if count > 1: total_pairs += count * (count - 1) // 2 return total_pairs # Input example # n = 4, m = 3 # colors = [1, 2, 1, 2] # edges = [(1, 2), (2, 3), (3, 4)] # Output: 2"},{"question":"You are given a list of words composed only of alphabetic characters. For each word, construct a new string where each character in the word is followed by its corresponding position in the alphabet. For example, the letter \'a\' is in position 1, \'b\' is in position 2, and so on up to \'z\' which is in position 26. Your task is to write a function that takes a list of words, applies the transformation to each word, and returns the modified list of strings. ----- Input Format ----- - The first line contains a single integer (T) — the number of test cases. - Each test case consists of a single line containing a word containing only lowercase alphabetic characters. ----- Output Format ----- - For each test case, output a single line containing the transformed string. ----- Constraints ----- 1. (1 leq T leq 100) 2. Each word contains only lowercase alphabetic characters. 3. The length of each word is at most 100. ----- Sample Input ----- 3 abc xyz hello ----- Sample Output ----- a1b2c3 x24y25z26 h8e5l12l12o15 ----- Explanation ----- In the first test case, \'a\' is in position 1, \'b\' is in position 2, \'c\' is in position 3. So the output is \\"a1b2c3\\". In the second test case, \'x\' is in position 24, \'y\' is in position 25, \'z\' is in position 26. So the output is \\"x24y25z26\\". In the third test case, \'h\' is in position 8, \'e\' is in position 5, \'l\' is in position 12, \'l\' is in position 12, \'o\' is in position 15. So the output is \\"h8e5l12l12o15\\".","solution":"def transform_words(words): def transform_word(word): result = \'\' for char in word: position = ord(char) - ord(\'a\') + 1 result += f\'{char}{position}\' return result return [transform_word(word) for word in words]"},{"question":"In a programming competition, the administrator needs to determine if participants have followed the rules. One of the rules is that the participants are not allowed to declare or use certain reserved keywords in their code. Given a list of reserved keywords and a piece of code, you need to check if any reserved keywords are present in the code. Input The first line contains an integer k (1 ≤ k ≤ 50) representing the number of reserved keywords. The next k lines each contain a single reserved keyword. Each keyword consists of lowercase Latin letters only and has a length of between 1 and 50 characters inclusive. The following line contains an integer n (1 ≤ n ≤ 1000) representing the number of lines of code. The next n lines contain the code itself, which consists of lowercase Latin letters, numbers, and punctuation marks, with a maximum length of 100 characters per line. Output Print \\"Disqualified\\" if any of the reserved keywords appear in the code, otherwise print \\"Qualified\\". Examples Input 3 return while if 4 int main() { if (a == b) return 0; } Output Disqualified Input 2 for include 5 int sum = 0; for(int i = 0; i < 10; i++){ sum += i; } Output Disqualified Input 2 private public 3 class Example { void method() { } } Output Qualified","solution":"def check_code_for_keywords(reserved_keywords, lines_of_code): Determines if any reserved keywords are present in the lines of code. Parameters: reserved_keywords (list of str): List of reserved keywords. lines_of_code (list of str): List of code lines. Returns: str: \\"Disqualified\\" if any reserved keywords are found in the code, otherwise \\"Qualified\\". for keyword in reserved_keywords: for line in lines_of_code: if keyword in line: return \\"Disqualified\\" return \\"Qualified\\""},{"question":"Given an integer array `nums` of length `n`, a **peak element** is an element that is strictly greater than its neighbors. Given `nums`, find a peak element and return its index. If the array contains multiple peaks, return the index to any of the peaks. You may imagine that `nums[-1]` and `nums[n]` are both negative infinity. You must write an algorithm that runs in O(log n) time. Constraints: * 1 ≤ n ≤ 10^5 * -10^9 ≤ nums[i] ≤ 10^9 * nums[i] ≠ nums[i+1] for all valid i. Input: The input is given from Standard Input in the following format: `n` `nums_1 nums_2 ... nums_n` Output: Print a single integer representing the index of any peak element found. Examples: Input: 5 1 2 3 1 0 Output: 2 Input: 4 1 3 2 4 Output: 1 Input: 3 5 4 3 Output: 0","solution":"def find_peak_element(nums): Finds a peak element and returns its index. A peak element is an element that is strictly greater than its neighbors. The algorithm runs in O(log n) time using binary search. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"Given an undirected graph represented by a set of nodes and edges, determine the minimum number of edges needed to add so that the graph becomes connected. A graph is connected if there is a path between any pair of nodes. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ n * (n - 1) / 2) — the number of nodes and the number of edges, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing an edge between nodes u and v. Output For each test case, output a single line with the minimum number of edges that need to be added to make the graph connected. Example Input 3 4 2 1 2 3 4 5 3 1 2 2 3 4 5 3 0 Output 1 1 2 Note In the first test case, the graph can be made connected by adding one edge between nodes from the two separate components, such as between nodes 2 and 3. In the second test case, the graph is already connected, so no edges need to be added. In the third test case, no edges are present, so the minimum number of edges required to connect all nodes is 2. For example, edges (1, 2) and (2, 3) can be added to connect all nodes.","solution":"def find_parent(parent, node): if parent[node] != node: parent[node] = find_parent(parent, parent[node]) return parent[node] def union(parent, rank, node1, node2): root1 = find_parent(parent, node1) root2 = find_parent(parent, node2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 def min_edges_to_connect_graph(test_cases): results = [] for n, m, edges in test_cases: if n == 1: results.append(0) continue parent = [i for i in range(n + 1)] rank = [0] * (n + 1) for u, v in edges: union(parent, rank, u, v) unique_parents = len(set(find_parent(parent, i) for i in range(1, n + 1))) results.append(unique_parents - 1) return results"},{"question":"Convert the given infix expression to postfix notation using the Shunting Yard algorithm. Example: Input: 1 3+4*2/(1-5)^2^3 Output: 342*15-23^^/+ Input: The first line of input contains T denoting the number of test cases. Each of the T lines contains a valid infix expression with single-digit operands and operators `+`, `-`, `*`, `/`, and `^` denoting addition, subtraction, multiplication, division, and exponentiation, respectively. Output: Return the postfix notation of the given infix expressions. Constraints: 1<=T<=100 1<= Length of the expression <=100","solution":"def infix_to_postfix(expression): Convert an infix expression to a postfix expression using the Shunting Yard algorithm. def get_precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 if op == \'^\': return 3 return 0 def is_left_associative(op): return op in (\'+\', \'-\', \'*\', \'/\') output = [] operators = [] for char in expression: if char.isdigit(): output.append(char) elif char in (\'+\', \'-\', \'*\', \'/\', \'^\'): while (operators and operators[-1] != \'(\' and (get_precedence(operators[-1]) > get_precedence(char) or (get_precedence(operators[-1]) == get_precedence(char) and is_left_associative(char)))): output.append(operators.pop()) operators.append(char) elif char == \'(\': operators.append(char) elif char == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # pop the \'(\' while operators: output.append(operators.pop()) return \'\'.join(output) def convert_expressions_to_postfix(num_cases, expressions): result = [] for expression in expressions: result.append(infix_to_postfix(expression)) return result"},{"question":"The friendly reptile, Reppy, likes to move around in a grid of size n times m. Reppy can only move in four directions: up, down, left, and right. The grid is made up of cells that are either empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). To make things more interesting, every time Reppy moves from one cell to another, Reppy consumes exactly 1 energy point. Given the initial and target positions of Reppy on the grid, determine the minimum amount of energy Reppy needs to reach the target position from the initial position. If it is not possible to reach the target, return -1. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid respectively. The next n lines each contain a string of length m, representing the grid. The last line contains four integers r_1, c_1, r_2, c_2 (1 leq r_1, r_2 leq n, 1 leq c_1, c_2 leq m) — the initial row and column of Reppy and the target row and column of Reppy respectively. The positions are 1-indexed. -----Output----- Output a single integer — the minimum amount of energy required for Reppy to reach the target position from the initial position. If it is not possible, output -1. -----Examples----- Input 5 5 ..... ..#.. ..#.. ..#.. ..... 1 1 5 5 Output 8 Input 3 3 # #.# # 2 2 1 3 Output -1 Input 6 7 ....... ...#. ....... .#... ....... ....... 2 1 6 7 Output 10 -----Note----- In the first example, one of the optimal paths is: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) consuming 8 energy points. In the second example, Reppy cannot reach the target position (1, 3) because it is completely surrounded by obstacles. In the third example, one of the optimal paths is: (2,1) -> (3,1) -> (4,1) -> (5,1) -> (6,1) -> (6,2) -> (6,3) -> (6,4) -> (6,5) -> (6,6) -> (6,7) consuming 10 energy points.","solution":"from collections import deque def reppy_min_energy(n, m, grid, r1, c1, r2, c2): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] # Converting to zero-indexed r1 -= 1 c1 -= 1 r2 -= 1 c2 -= 1 queue = deque([(r1, c1, 0)]) visited[r1][c1] = True while queue: x, y, energy = queue.popleft() if x == r2 and y == c2: return energy for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, energy + 1)) return -1"},{"question":"Alex is in charge of organizing a buffet at an event. He has a total of n dishes, each with a unique index from 1 to n. To ensure that everyone enjoys a balanced meal, Alex wants to arrange the dishes such that the most frequently mentioned preferences are satisfied in order. Each dish i has a preference score p_i (1 ≤ p_i ≤ 1000000), which indicates how many people would prefer to have this dish. Alex wants to assign a rank 1 to n to each dish, where rank 1 indicates the most preferred and rank n indicates the least preferred. The rank should be such that if a dish i is preferred more than dish j (i.e., p_i > p_j), dish i should have a higher rank. Alex’s friend suggests that Alex should pick the ranks in such a way that the sum of the preference scores of dishes with the highest and the lowest ranks is minimized. If there are multiple such rankings, any are acceptable. -----Input----- The first line of the input consists of a single integer n (1 ≤ n ≤ 100000) — the number of dishes. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 1000000), denoting the preference score of each dish. -----Output----- Output the ranks assigned to the dishes such that the sum of the preference scores of dishes with the highest and lowest ranks is minimized. If multiple valid rankings exist, print any of them. -----Examples----- Input 4 3 6 2 5 Output 3 1 4 2 Input 3 10 20 30 Output 3 2 1 -----Note----- In the first sample, the ranks are assigned as follows: dish 1 gets rank 3, dish 2 gets rank 1, dish 3 gets rank 4, and dish 4 gets rank 2. The sum of preference scores of dishes with ranks 1 and 4 is minimized. In the second sample, the ranks are assigned such that dish 1 gets rank 3, dish 2 gets rank 2, and dish 3 gets rank 1. This ensures the sum of the highest and lowest ranked dishes\' preference scores is minimized.","solution":"def assign_dish_ranks(n, preferences): Assigns ranks to dishes such that the sum of preference scores of dishes with the highest and lowest ranks is minimized. # Create list of (index, preference) and sort by preference in descending order dishes = sorted(enumerate(preferences), key=lambda x: x[1], reverse=True) # Initialize a list to store ranks ranks = [0] * n # Distribute ranks starting from the highest preference for rank, (index, _) in enumerate(dishes): ranks[index] = rank + 1 return ranks"},{"question":"A company wants to develop a system where people can track the top k most frequent words in a document at any point in time. The system should support two operations: 1. **Add a Word**: Add a word to the document. Words consist of only lowercase English letters and are at most 100 characters long. 2. **Top k Frequent Words**: Return the k most frequent words from the document in descending order of their frequency. If two words have the same frequency, return them in lexicographical order. Design a class `FrequencyTracker` that ensures the following: - The class has a method `add_word(word)` that takes a string as input and adds the word to an internal storage. - The class has a method `top_k_frequent(k)` that takes an integer k and returns a list of the k most frequent words sorted by frequency and then lexicographically. Implement the class with the following methods: - `add_word(word: str) -> None` - `top_k_frequent(k: int) -> List[str]` You may assume that the `add_word` method will be called up to 10^5 times and the `top_k_frequent` method will be called up to 10^5 times as well. # Input: Each line of input describes a method call either to `add_word` or `top_k_frequent`: - `add_word word` where word is the word to be added. - `top_k_frequent k` where k is the number of most frequent words to return. # Output: For each `top_k_frequent` call, output the result as a space-separated string of words. # Example: ``` add_word hello add_word world add_word hello top_k_frequent 1 add_word programming add_word hello top_k_frequent 2 ``` # Output: ``` hello hello world ``` # Explanation: - First, the word \\"hello\\" is added. - Then, the word \\"world\\" is added. - Then, the word \\"hello\\" is added again. At this point, \\"hello\\" has a count of 2, and \\"world\\" has a count of 1. - The `top_k_frequent 1` call returns \\"hello\\" since \\"hello\\" is the most frequent word at this point. - The word \\"programming\\" is added. - The word \\"hello\\" is added again, taking its count to 3. - The `top_k_frequent 2` call returns \\"hello world\\" because \\"hello\\" is the most frequent word with a count of 3, followed by \\"world\\" with a count of 1 (tied with \\"programming\\", but lexicographically \\"world\\" comes first).","solution":"from collections import defaultdict import heapq class FrequencyTracker: def __init__(self): self.word_count = defaultdict(int) def add_word(self, word: str) -> None: self.word_count[word] += 1 def top_k_frequent(self, k: int): min_heap = [] for word, count in self.word_count.items(): heapq.heappush(min_heap, (count, word)) if len(min_heap) > k: heapq.heappop(min_heap) result = [] while min_heap: result.append(heapq.heappop(min_heap)) result.sort(key=lambda x: (-x[0], x[1])) return [word for count, word in result]"},{"question":"Problem: Consider a grid of size NxN. You need to find the total number of unique paths from the top-left corner to the bottom-right corner of the grid. You can only move either right or down at any point in time. Input The first line of input contains an integer T, the number of test cases. The next T lines each contain an integer N, the size of the grid. Output For each test case, output the number of unique paths from the top-left corner to the bottom-right corner of the NxN grid. Constraints 1 ≤ T ≤ 5 1 ≤ N ≤ 15 Problem Setter: Aditi Problem Tester: Ravi Sample Input 3 2 3 4 Sample Output 2 6 20","solution":"import math def number_of_unique_paths(N): Given a grid of size NxN, returns the number of unique paths from the top-left corner to the bottom-right corner, moving only right or down. # Using combinatorial formula: # Number of unique paths in an NxN grid is (2N-2 choose N-1) return math.comb(2 * (N-1), N-1) def process_test_cases(test_cases): Given a list of integer test cases, returns a list of results where each result is the number of unique paths for the corresponding test case. results = [] for case in test_cases: results.append(number_of_unique_paths(case)) return results"},{"question":"Alice is participating in a coding competition that consists of n problems. Each problem has a specific difficulty level, represented by a positive integer. Alice can choose a subsequence of problems to solve, but she wants to maximize her final score. Alice\'s final score is calculated as the sum of the difficulties of the problems she chooses to solve, divided by the total number of problems she solves (i.e., the average difficulty of the chosen subsequence). What is the maximum average difficulty of a subsequence Alice can achieve? -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the following t pairs of lines contains: - The first line contains an integer n (1 le n leq 100) — the number of problems. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100) — the difficulty levels of the problems. -----Output----- For each test case, output the maximum possible average difficulty Alice can achieve with an optimal subsequence. -----Examples----- Input 2 4 3 1 2 3 5 4 5 1 2 3 Output 3.00 5.00 -----Note----- In the first example: The optimal subsequence is [3], with an average difficulty of 3.00. In the second example: The optimal subsequence is [5], with an average difficulty of 5.00. Note that each individual problem can be considered a subsequence, so we must consider them as well.","solution":"def max_average_difficulty(t, test_cases): results = [] for test_case in test_cases: n, difficulties = test_case max_difficulty = max(difficulties) results.append(f\\"{max_difficulty:.2f}\\") return results"},{"question":"You are given an array of n positive integers and an integer t. Your task is to determine whether it is possible to partition the array into two subsets such that the sum of the elements in both subsets is less than or equal to t. Input The first line of the input contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 10^9). The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output Print \\"YES\\" if it is possible to partition the array into two subsets such that the sum of the elements in both subsets is ≤ t, otherwise print \\"NO\\". Examples Input 4 10 2 4 6 8 Output YES Input 3 5 2 3 8 Output NO Note In the first example, the array can be partitioned into subsets {2, 4} and {6, 8}, where the sum of both subsets is less than or equal to t. In the second example, there is no possible way to partition the array to meet the given condition.","solution":"def can_partition_array(n, t, arr): Determines whether it is possible to partition the array into two subsets such that the sum of the elements in both subsets is less than or equal to t. Parameters: n (int): Number of elements in the array. t (int): The threshold value for the sum of each subset. arr (list): List of positive integers. Returns: str: \\"YES\\" if the partition is possible, otherwise \\"NO\\". total_sum = sum(arr) # If the total sum of the array is greater than 2 * t, it\'s impossible to partition if total_sum > 2 * t: return \\"NO\\" # Implementing a simple DP solution for subset sum problem possible_sums = [False] * (total_sum + 1) possible_sums[0] = True for num in arr: for j in range(total_sum, num - 1, -1): if possible_sums[j - num]: possible_sums[j] = True for s in range(min(total_sum, t) + 1): if possible_sums[s] and total_sum - s <= t: return \\"YES\\" return \\"NO\\""},{"question":"Implement a function that determines if it is possible to rearrange a given string such that no two adjacent characters are the same. If it is possible, return the rearranged string. Otherwise, return an empty string. ---Input--- The first line contains an integer t (1 leq t leq 10^3) — the number of test cases. Each of the following t lines contains a single string s. The length of string s is an integer n (1 leq n leq 10^4). It is guaranteed that the sum of n over all test cases does not exceed 10^5. ---Output--- For each test case, output a single line containing the rearranged string if it is possible to rearrange such that no two adjacent characters are the same. Otherwise, output an empty string. ---Examples--- Input 3 aabb aaab abcdefg Output abab \\"\\" abcdefg ---Note--- In the first test case, the string \\"aabb\\" can be rearranged to \\"abab\\" which has no two adjacent characters being the same. In the second test case, it is impossible to rearrange the string \\"aaab\\" to meet the criteria as there will always be at least two \'a\'s adjacent to each other. In the third test case, the string \\"abcdefg\\" has all unique characters and is already in a valid form.","solution":"import heapq from collections import Counter def rearrange_string(s): # Calculate frequency of each character freq = Counter(s) max_heap = [] # Create a max heap based on frequency for char, count in freq.items(): heapq.heappush(max_heap, (-count, char)) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) # Append the character to result list result.append(char) # If there is a previous character to re-insert if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update prev_count and prev_char prev_char = char prev_count = count + 1 # Since we\'re decreasing frequency grouped with the current char. # Check if we managed to rearrange successfully rearranged = \'\'.join(result) if len(rearranged) == len(s): return rearranged else: return \\"\\" def solve(t, test_cases): results = [] for case in test_cases: results.append(rearrange_string(case)) return results"},{"question":"A company organizes an event where employees hold tournaments of the board game \\"Strategy King\\". There are `m` employees, and each employee plays against every other employee exactly once. When two employees play against each other, the winner of the match is determined based on their strategy levels, where the employee with the higher strategy level wins. Each employee has a unique strategy level, and all of these levels are distinct positive integers. It is known that due to an error, one of the games was not recorded. You have the results of the other games and you need to determine the result of the missing game. # Input - The first line contains an integer `m` (3 ≤ m ≤ 100) — the number of employees. - Each of the next `m * (m - 1) / 2 - 1` lines contains two integers `ai` and `bi` (1 ≤ ai, bi ≤ m, ai ≠ bi), describing the match where employee `ai` defeated employee `bi`. # Output - Print two integers `u` and `v` such that `u` defeated `v` in the missing match. If multiple answers are possible, print any of them. # Example Input ``` 5 1 3 1 4 1 5 2 3 2 4 2 5 3 4 3 5 4 5 ``` Output ``` 1 2 ``` In this example, the only match not recorded involves employees 1 and 2. Since both employees, 1 and 2, have won their other matches, employee 1\'s strategy level is inferred to be higher, suggesting employee 1 defeated employee 2.","solution":"def find_missing_match(m, matches): Determines the missing match result. :param m: number of employees :param matches: list of tuples representing the recorded result of the games (winner, loser) :return: tuple (u, v) representing the missing match result (u defeats v) match_dict = {i: set() for i in range(1, m + 1)} # Record matches in a dictionary for winner, loser in matches: match_dict[winner].add(loser) # Check which match is missing all_employees = set(range(1, m + 1)) for i in range(1, m + 1): for j in range(i + 1, m + 1): if j not in match_dict[i] and i not in match_dict[j]: missing_match = (i, j) break # Determine winner and loser based on existing matches if missing_match[0] in match_dict[missing_match[1]]: return missing_match[1], missing_match[0] else: return missing_match[0], missing_match[1]"},{"question":"Sofia has a sequence of integers denoted as b. She loves playing with even numbers. For every subsequence she can create from the given sequence, she defines its \\"evenness\\" as the number of even numbers in that subsequence. Sofia also introduces the concept of \\"maximum evenness\\" of the sequence, which is the highest evenness value among all possible subsequences of the sequence. Since thinking of all subsequences is challenging, Sofia needs your help to determine the maximum evenness of the given sequence b. Input The first line of the input contains a single integer m (1 ≤ m ≤ 100,000) — the number of elements in the sequence b. The next line contains m integers bi (1 ≤ bi ≤ 1,000,000), where the i-th number is equal to the i-th element of the sequence b. Output Print a single line containing the value of maximum evenness of the sequence b. Example Input 5 1 2 3 4 6 Output 3 Note Consider the first sample. * One of the subsequences [2, 4, 6] has three even numbers, which is the maximum evenness value for the given sequence. Thus the output is 3.","solution":"def max_evenness(sequence): Returns the maximum evenness of the sequence, which is the highest number of even numbers in any subsequence. return sum(1 for num in sequence if num % 2 == 0) # Example to verify the function # If we input [1, 2, 3, 4, 6] the output should be 3, # since there are 3 even numbers in the sequence (2, 4, 6). print(max_evenness([1, 2, 3, 4, 6])) # Output: 3"},{"question":"Given an array B of M non-negative integers, find the maximum possible sum of elements you can obtain by modifying the array such that each element can only be either kept the same or replaced with any one of its prime factors. ----- Input Format ----- - The first line contains a single integer P, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer M, the size of the array B. - The second line contains M space-separated non-negative integers ( B_1, B_2, dots, B_M ). ----- Output Format ----- For each test case, print a single line containing the maximum possible sum for the modified array. ----- Constraints ----- - ( 1 leq P leq 10^5 ) - ( 1 leq M leq 10^5 ) - ( 1 leq B_i leq 10^6 ) - The sum of M over all test cases is less than or equal to ( 10^6 ). ----- Sample Input 1 ----- 3 3 12 15 7 2 23 10 4 4 6 8 9 ----- Sample Output 1 ----- 26 29 23 ----- Explanation 1 ----- Test Case 1: - 12 can be kept as 12 or replaced by one of its prime factors 2 or 3. Keeping it as 12 is optimal. - 15 can be kept as 15 or replaced by one of its prime factors 3 or 5. Keeping it as 15 is optimal. - 7 is already a prime and thus cannot be replaced by any other prime factors. - The maximum possible sum is 12 + 15 + 7 = 34. Test Case 2: - 23 is a prime and thus cannot be replaced by any other prime factors. - 10 can be replaced by its prime factors 2 or 5. Keeping it as 10 is optimal. - The maximum possible sum is 23 + 10 = 33. Test Case 3: - 4 can be replaced by its prime factors 2. Replacing it with 4 is optimal. - 6 can be replaced by its prime factors 2 or 3. Keeping it as 6 is optimal. - 8 can be replaced by its prime factors 2. Replacing it with 8 is optimal. - 9 can be replaced by its prime factors 3. Keeping it as 9 is optimal. - The maximum possible sum is 4 + 6 + 8 + 9 = 27.","solution":"def sieve(n): primes = [] is_prime = [True] * (n + 1) for p in range(2, n + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return primes def generate_factors(n): factors = [[] for _ in range(n + 1)] is_prime = [True] * (n + 1) for num in range(2, n + 1): if is_prime[num]: for multiple in range(num, n + 1, num): is_prime[multiple] = False factors[multiple].append(num) return factors def max_possible_sum(B): max_val = max(B) factors = generate_factors(max_val) max_sum = 0 for num in B: if num == 1: max_sum += 1 else: max_sum += max([num] + factors[num]) return max_sum def process_test_cases(test_cases): results = [] for M, B in test_cases: result = max_possible_sum(B) results.append(result) return results # The primary function to handle the input and output def main(): import sys input = sys.stdin.read data = input().split() index = 0 P = int(data[index]) index += 1 test_cases = [] for _ in range(P): M = int(data[index]) index += 1 B = list(map(int, data[index:index + M])) index += M test_cases.append((M, B)) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are participating in a hacking competition where you need to uncover the secret password hidden in a complex string pattern. The string consists of multiple segments of characters where each segment has a specific format: - Each segment starts with the character \'S\' followed by a non-negative integer n, denoting the number of characters in that segment. - Immediately after \'S\' and the number, there will be exactly n characters. Your task is to extract each segment of characters and concatenate them together to form the secret password. -----Input----- The input consists of a single string containing multiple segments. The total length of the input string does not exceed 10^5 characters. -----Output----- Output the secret password formed by concatenating all segments\' characters as described. -----Examples----- Input S3abcS5helloS1x Output abchellox Input S5worldS2goS4hack Output worldgohack -----Note----- In the first example, the input string is split into segments \'S3abc\', \'S5hello\', and \'S1x\'. The segments give us \\"abc\\", \\"hello\\", and \\"x\\" respectively, which concatentated together forms \\"abchellox.\\" In the second example, the segments \'S5world\', \'S2go\', and \'S4hack\' give us \\"world\\", \\"go\\", and \\"hack\\" respectively, forming the password \\"worldgohack.\\"","solution":"def extract_password(s): Given a string with segments formatted as \'Sncharacters\', returns the concatenated result of all segments. Parameters: s (str): The input string with segments. Returns: str: The concatenated secret password. password = \\"\\" i = 0 while i < len(s): if s[i] == \'S\': i += 1 n = 0 while i < len(s) and s[i].isdigit(): n = n * 10 + int(s[i]) i += 1 password += s[i:i+n] i += n return password"},{"question":"Alice loves to play with strings and she recently learned about permutations of strings. A permutation of a string is a rearrangement of its characters. Now, she is interested in finding a specific permutation of a given string. She asked you to generate the lexicographically smallest permutation of her string that is greater than the given string. If no such permutation exists, return \\"no answer\\". Input The first line of input contains a single integer T, denoting the number of test cases to follow. Each of the test cases consist of one string S which contains only lowercase English letters. Output Your output should contain T lines, each with the lexicographically smallest permutation of the given string that is greater than the given string, or \\"no answer\\" if no such permutation exists. Constraints 1 ≤ T ≤ 20 1 ≤ |S| ≤ 100 SAMPLE INPUT 3 ab bb hefg SAMPLE OUTPUT ba no answer hegf Explanation Case 1: The permutations of \\"ab\\" are \\"ab\\" and \\"ba\\". The smallest permutation that is lexicographically greater than \\"ab\\" is \\"ba\\". Case 2: The string \\"bb\\" has no permutations that are lexicographically greater than \\"bb\\". Therefore, the output is \\"no answer\\". Case 3: The permutations of the string \\"hefg\\" that are greater than \\"hefg\\" are \\"hegf\\", \\"hegf\\", etc. The smallest permutation is \\"hegf\\".","solution":"def next_permutation(s): Returns the lexicographically smallest permutation of the string `s` that is greater than `s`. If no such permutation exists, returns \\"no answer\\". # Convert the string to a list of characters lst = list(s) # Step 1: Find the rightmost character which is smaller than its next character. i = len(lst) - 2 while i >= 0 and lst[i] >= lst[i + 1]: i -= 1 # If no such character is found, then all characters are sorted in descending order. # This means we are at the highest possible permutation, so return \\"no answer\\". if i == -1: return \\"no answer\\" # Step 2: Find the smallest character on right side of lst[i] which is larger than lst[i] j = len(lst) - 1 while lst[j] <= lst[i]: j -= 1 # Step 3: Swap the above found characters lst[i], lst[j] = lst[j], lst[i] # Step 4: Reverse the characters after the index `i` lst = lst[:i + 1] + lst[i + 1:][::-1] # Convert the list back to string and return return \'\'.join(lst) def solve(t, cases): results = [] for case in cases: results.append(next_permutation(case)) return results"},{"question":"Natalia is a robotics enthusiast who enjoys exploring different robot designs and their abilities. One day she encountered a group of robots in a laboratory. Each robot has a sensor that allows it to detect obstacles within a certain range. The robots can communicate with each other to share information about their surroundings. There are n robots and m obstacles in the laboratory. The i-th robot is positioned at coordinates (xi, yi) and has a sensor with a detection radius of ri. The j-th obstacle is positioned at coordinates (ojx, ojy). Natalia wants to know how many obstacles each robot can detect. A robot can detect an obstacle if the Euclidean distance between the robot and the obstacle is less than or equal to the robot\'s detection radius. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of robots and obstacles, respectively. Each of the next n lines contains three integers — xi, yi, ri (|xi|, |yi| ≤ 10^6, 1 ≤ ri ≤ 10^6) which represent the coordinates of the i-th robot and its detection radius. Each of the next m lines contains two integers — ojx, ojy (|ojx|, |ojy| ≤ 10^6), which represent the coordinates of the j-th obstacle. Output Print n lines, each containing a single integer — the number of obstacles that the corresponding robot can detect. Examples Input 3 4 0 0 5 10 10 10 -5 -5 1 1 1 6 6 -1 -1 11 11 Output 2 2 0 Input 2 3 1 1 3 4 5 6 2 2 3 3 5 5 Output 2 3 Note In the first example, the first robot at (0, 0) with a detection radius of 5 can detect the obstacles at (1, 1) and (-1, -1). The robot at (10, 10) with a detection radius of 10 can detect the obstacles at (6, 6) and (11, 11). The robot at (-5, -5) with a detection radius of 1 cannot detect any obstacles. In the second example, the first robot at (1, 1) with a detection radius of 3 can detect the obstacles at (2, 2) and (3, 3). The robot at (4, 5) with a detection radius of 6 can detect all three obstacles.","solution":"import math def count_detected_obstacles(n, m, robots, obstacles): result = [] for (xi, yi, ri) in robots: count = 0 for (ojx, ojy) in obstacles: distance = math.sqrt((xi - ojx)**2 + (yi - ojy)**2) if distance <= ri: count += 1 result.append(count) return result"},{"question":"In a fantasy land, farmers grow trees that produce magical fruits. Each tree can produce a different amount of magical fruits each year. The farmers want to maximize their harvest over a specific period by cutting down exactly one tree each year (thus collecting all remaining fruits from that tree) while keeping the other trees to potentially produce fruits in future years. Once a tree is cut down, it will no longer produce any fruits. Your task is to write a program that determines the maximum number of magical fruits that can be collected in `k` years given the yearly production of each tree. Constraints: - 1 ≤ n ≤ 20 (number of trees) - 1 ≤ k ≤ n (years) - 1 ≤ fruits[i] ≤ 100 (magical fruits produced by the i-th tree each year) Input: - The first line contains two integers `n` and `k`, the number of trees and the number of years. - The second line contains an array of `n` integers representing the yearly production of magical fruits for each tree. Output: - A single integer, the maximum number of magical fruits that can be collected in `k` years. Example: Input: 5 3 10 20 30 40 50 Output: 120 Explanation: The optimal strategy is to cut down the trees in the order corresponding to the highest yearly fruit production: 50 (year 1), 40 (year 2), and 30 (year 3). Hence, the maximum number of magical fruits collected is 50 + 40 + 30 = 120.","solution":"def maximize_fruits(n, k, fruits): Returns the maximum number of magical fruits that can be collected over k years by cutting down exactly one tree each year. # Sort the list to ensure we cut down the trees with the most fruits first sorted_fruits = sorted(fruits, reverse=True) # Sum the top k elements from the sorted list return sum(sorted_fruits[:k])"},{"question":"Given a list of integers, write a function that determines the smallest positive integer that is not present in the list. Your function should have the following signature: ```python def find_missing_positive(nums: List[int]) -> int ``` # Input - A list of integers `nums` (1 ≤ |nums| ≤ 10^5, -10^6 ≤ nums[i] ≤ 10^6). # Output - The smallest positive integer not in the list. # Examples ```python find_missing_positive([1, 2, 0]) => 3 find_missing_positive([3, 4, -1, 1]) => 2 find_missing_positive([7, 8, 9, 11, 12]) => 1 ``` # Note: - You should implement an efficient solution with O(n) time complexity and O(1) space complexity, excluding the space needed for input storage.","solution":"def find_missing_positive(nums): Returns the smallest positive integer that is not present in the list nums. n = len(nums) # Mark numbers (num <= 0) and (num > n) with a special marker number (n+1) for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Use the index as a hash and mark the corresponding position negative for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Find the first cell which isn\'t negative (that means the index+1 is not present in the array) for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Given a positive integer n, the task is to determine the number of distinct ways to partition n as a sum of positive integers where the order of the summands does not matter. For example, (4) is the same as (1+1+1+1) and should be counted only once. Example 1: Input: n = 4 Output: 5 Explanation: The number of partitions for 4 is (4), (3+1), (2+2), (2+1+1), (1+1+1+1) Example 2: Input: n = 7 Output: 15 Explanation: The number of partitions for 7 is (7), (6+1), (5+2), (5+1+1), (4+3), (4+2+1), (4+1+1+1), (3+3+1), (3+2+2), (3+2+1+1), (3+1+1+1+1), (2+2+2+1), (2+2+1+1+1), (2+1+1+1+1+1), (1+1+1+1+1+1+1) Your Task: You don\'t need to read input or print anything. Complete the function countPartitions() which takes an integer n as input and returns the integer value representing the number of distinct partitions. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n^2) Constraints: 1 ≤ n ≤ 100","solution":"def count_partitions(n): # Initialize a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(n + 1)] # There is one way to partition 0 for i in range(n + 1): dp[i][0] = 1 # Fill the table in bottom-up manner for i in range(1, n + 1): for j in range(1, n + 1): if i <= j: dp[i][j] = dp[i - 1][j] + dp[i][j - i] else: dp[i][j] = dp[i - 1][j] return dp[n][n]"},{"question":"Given an array of non-negative integers representing elevations of bars in a histogram, calculate the maximum area of water that can be trapped after raining. You are given an integer array `heights` of length `N` representing the elevation map, where the width of each bar is 1 unit. Write a function `find_trapped_water` which takes `heights` as input and returns an integer representing the maximum units of water that can be trapped. # Function Signature ```python def find_trapped_water(heights: List[int]) -> int: pass ``` # Input - An integer array `heights` of size N (1 le N le 10^5), where each element is a non-negative integer representing the height of the bar at that position (0 le heights[i] le 10^4). # Output - An integer representing the maximum water units that can be trapped. # Examples Example 1: ```python heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(find_trapped_water(heights)) # Output: 6 ``` Example 2: ```python heights = [4, 2, 0, 3, 2, 5] print(find_trapped_water(heights)) # Output: 9 ``` # Note - Water trapped between bars at elevation `i` and elevation `j` is dependent on the minimum of the maximum heights found to the left and right of these bars. - Consider using a two-pointer technique or precomputed arrays to effectively solve the problem within linear time complexity.","solution":"from typing import List def find_trapped_water(heights: List[int]) -> int: n = len(heights) if n == 0: return 0 left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the water trapped at each position for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Recently, Alex has been interested in building walls using Lego bricks. Alex has a collection of Lego bricks, and each brick has a specific length. Using these bricks, Alex wants to build a wall of exactly length L. However, Alex does not want to waste any bricks and thus wants to use the fewest number of bricks possible to achieve the desired length. Given an array of integers representing the lengths of available bricks and an integer L representing the desired wall length, write a program that finds the smallest number of bricks required to build the wall of length L. If it is not possible to build a wall of the exact length L, return -1. Input The first line contains two integers n (1 ≤ n ≤ 100) and L (1 ≤ L ≤ 10^4), where n is the number of different types of bricks and L is the desired wall length. The second line contains n integers (a_1, a_2, ..., a_n) (1 ≤ (a_i) ≤ 10^4), where (a_i) is the length of the i-th type of brick. Output Print the minimum number of bricks needed to build a wall of length L, or -1 if it\'s not possible. Examples Input 5 11 1 2 3 4 5 Output 3 Input 4 10 2 3 7 8 Output 2 Input 3 1 2 4 5 Output -1 Note In the first sample, the shortest way to build a wall of length 11 is by using three bricks of lengths 5, 4, and 2. In the second sample, the shortest way to build a wall of length 10 is by using two bricks of lengths 7 and 3. In the third sample, it is not possible to build a wall of length 1 using bricks of lengths 2, 4, and 5.","solution":"def min_bricks(n, L, brick_lengths): dp = [float(\'inf\')] * (L + 1) dp[0] = 0 for length in range(1, L + 1): for brick in brick_lengths: if length >= brick: dp[length] = min(dp[length], dp[length - brick] + 1) return dp[L] if dp[L] != float(\'inf\') else -1 # Example function call, you may remove it or comment out. # n = 5 # L = 11 # brick_lengths = [1, 2, 3, 4, 5] # print(min_bricks(n, L, brick_lengths)) # Output: 3"},{"question":"Subarray with Maximum XOR Given an array of integers a_1, a_2, .., a_N. Determine the maximum XOR value of any subarray (contiguous elements) of the given array. Use the following definitions: - A subarray is defined as any contiguous part of an array. Input N a_1 a_2 ... a_N Output Output the maximum XOR value of any subarray. Constraints * 1 ≤ N ≤ 10^5 * 0 ≤ a_i ≤ 10^9 Input example 4 1 2 3 4 Output example 7 Example Input 4 1 2 3 4 Output 7","solution":"def max_xor_subarray(arr): Determine the maximum XOR value of any subarray (contiguous elements) of the given array. :param arr: list of integers :return: maximum XOR value of any subarray max_xor = 0 current_xor = 0 prefix_xor_set = set() prefix_xor_set.add(0) for num in arr: current_xor ^= num for prefix in prefix_xor_set: max_xor = max(max_xor, current_xor ^ prefix) prefix_xor_set.add(current_xor) return max_xor"},{"question":"You are given a string representing a sequence of books identified by different characters. Your task is to determine the length of the longest subsequence of books that can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. You are to write a function that computes this length. Input A single string `s` consisting of lowercase English letters. Output An integer representing the length of the longest palindromic subsequence. Constraints 1 ≤ len(s) ≤ 1000 Example Input: abca Output: 3 Input: abcba Output: 5","solution":"from collections import Counter def longest_palindromic_subsequence_length(s): Returns the length of the longest palindromic subsequence that can be made from the input string. Parameters: s (str): A string consisting of lowercase English letters. Returns: int: The length of the longest palindromic subsequence. count = Counter(s) length = 0 odd_found = False for char, freq in count.items(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"In a multi-dimensional grid, each cell can either be a land or a water cell. Your task is to determine the largest connected component of land cells in the grid. A connected component of land cells is defined as a group of land cells connected horizontally or vertically (not diagonally). The grid is represented as a binary matrix where `1` represents a land cell and `0` represents a water cell. Constraints * 1 leq rows, cols leq 1,000 Input The input is given in the following format: ``` rows ; cols matrix_{00} ; matrix_{01} ; ... ; matrix_{0(cols-1)} matrix_{10} ; matrix_{11} ; ... ; matrix_{1(cols-1)} : matrix_{(rows-1)0} ; matrix_{(rows-1)1} ; ... ; matrix_{(rows-1)(cols-1)} ``` For instance, a grid with 3 rows and 4 columns looks like: ``` 3 4 0 0 1 0 1 1 1 0 0 1 0 0 ``` Output Output the size of the largest connected component of land cells. Example Input ``` 4 5 1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 1 ``` Output ``` 4 ``` Explanation In the given grid, the largest connected component of land cells consists of the cells (3,1), (3,2), (3,3), and (3,4), which totals to 4 cells. Thus, the output is 4.","solution":"def largest_connected_component(rows, cols, matrix): def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or matrix[r][c] == 0: return 0 # Mark this cell as visited matrix[r][c] = 0 size = 1 size += dfs(r + 1, c) size += dfs(r - 1, c) size += dfs(r, c + 1) size += dfs(r, c - 1) return size max_land_size = 0 for r in range(rows): for c in range(cols): if matrix[r][c] == 1: max_land_size = max(max_land_size, dfs(r, c)) return max_land_size"},{"question":"Write a function ```isPalindrome``` that takes a string as input and returns `True` if the string is a palindrome (reads the same backward as forward), and `False` otherwise. Ignore cases and non-alphabetical characters when checking the palindrome. Example: ``` \\"isPalindrome(\'A man, a plan, a canal, Panama\')\\" -> True \\"isPalindrome(\'hello\')\\" -> False ```","solution":"def isPalindrome(s): Returns True if the input string is a palindrome, ignoring case and non-alphabetical characters. # Filter out non-alphabetical characters and convert to lowercase filtered_s = \'\'.join(char.lower() for char in s if char.isalpha()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"# validate_IP() The `validate_IP()` function verifies whether a given string is a valid IPv4 address or not. **Explanation** An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (`\\".\\"`). Leading zeros are allowed, but each part of an address should be a valid number ranging from 0 to 255. For example, the address `192.168.0.1` is a valid IPv4 address, whereas `256.100.50.25` is not valid because `256` is out of the valid range, and `192.168.00.01` is not valid due to leading zeros. **Code Example** ```python def validate_IP(ip): parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit() or int(part) > 255 or int(part) < 0: return False if part != \\"0\\" and part.startswith(\\"0\\"): return False return True print(validate_IP(\\"192.168.0.1\\")) # True print(validate_IP(\\"10.0.0.10\\")) # True print(validate_IP(\\"255.255.255.255\\")) # True print(validate_IP(\\"256.100.50.25\\")) # False print(validate_IP(\\"192.168.00.01\\")) # False print(validate_IP(\\"192.168.0.1.10\\")) # False ``` **Task** You need to complete the implementation for the function `validate_IP(ip)` that takes an IPv4 address string `ip` as its input and returns `True` if the string is a valid IPv4 address, and `False` otherwise. **Input Format** A single line of input containing a string representing an IPv4 address. **Constraints** - The input string will only contain digits and dots. - The length of the input string will be at most 15 characters. **Output Format** Print `True` if the input string is a valid IPv4 address, otherwise print `False`. **Sample Input 1** ``` 192.168.0.1 ``` **Sample Output 1** ``` True ``` **Sample Input 2** ``` 256.100.50.25 ``` **Sample Output 2** ``` False ``` **Explanation** - Sample Input 1: `192.168.0.1` is valid as it consists of four numbers each within the range 0-255. - Sample Input 2: `256.100.50.25` is not valid as `256` is out of the valid range. Note: The function should strictly follow the rules mentioned and should not consider leading zeros valid unless the entire segment is zero.","solution":"def validate_IP(ip): Validate if the given string is a valid IPv4 address. Args: ip (str): The IPv4 address as a string. Returns: bool: True if ip is a valid IPv4 address, False otherwise. parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: # Check if the part is a digit and within the valid range if not part.isdigit() or not 0 <= int(part) <= 255: return False # Check if the part has leading zeros if part != \\"0\\" and part.startswith(\\"0\\"): return False return True"},{"question":"Emma has an array `b`, consisting of `n` integers `b[0], b[1], ..., b[n-1]`, and a function `g(y)`, which takes an integer from `0` to `2^n - 1` as its single argument. The value `g(y)` is calculated by the formula: `g(y) = ∑(b[i] * (p[i] + q(i)))`, where `p[i]` equals one if the i-th bit in the binary representation of `y` is 0, and `q(i)` equals one if the i-th bit in the binary representation of `y` is 1. For example, if `n = 3` and `y = 5` (5 = 2^0 + 2^2, in binary: `101`), then `g(y) = b[0] * (p[0] + q(0)) + b[1] * (p[1] + q(1)) + b[2] * (p[2] + q(2)) = b[0] * (0 + 1) + b[1] * (1 + 0) + b[2] * (0 + 1)`. Help Emma find the minimum value of function `g(y)` among all `y` for which the inequality holds: `0 ≤ y ≤ t`. -----Input----- The first line contains an integer `n` `(1 ≤ n ≤ 10^5)` – the number of array elements. The next line contains `n` space-separated integers `b[0], b[1], ..., b[n-1]` (`0 ≤ b[i] ≤ 10^4`) – elements of array `b`. The third line contains a sequence of digits zero and one without spaces `s[0]s[1]... s[n-1]` – the binary representation of number `t`. Number `t` equals `∑(2^i * s[i])` from `i=0` to `n-1`. -----Output----- Print a single integer – the minimum value of function `g(y)` for all `0 ≤ y ≤ t`. -----Examples----- Input 2 5 9 11 Output 17 Input 4 2 3 1 4 1010 Output 8 -----Note----- In the first test case `t = 2^0 + 2^1 + 2^3 = 11`, the minimum value of function equals `g(9) = b[0] * (1 + 0) + b[1] * (0 + 1) = 5*1 + 9*1 = 17`. In the second test case `t = 2^1 + 2^3 = 10`, the minimum value of function equals `g(4) = b[2] * (1 + 0) + b[0] * (0 + 1) + b[1] * (1 + 0) + b[3] * (0 + 1) = 1*1 + 2*1 + 3*1 + 4*1 = 10`.","solution":"def min_g(n, b, s): Returns the minimum value of the function g(y) for all 0 ≤ y ≤ t. The value g(y) is calculated by: g(y) = ∑(b[i] * (p[i] + q(i))), where p[i] equals one if the i-th bit in the binary representation of y is 0, and q(i) equals one if the i-th bit in the binary representation of y is 1. # Initialize the result result = 0 # Iterate over the bits of t for i in range(n): if s[i] == \'1\': # If s[i] is 1, then ( for corresponding b[i] * (p[i] + q[i]) ) we can only count q[i] result += b[i] else: # If s[i] is 0, then ( for corresponding b[i] * (p[i] + q[i]) ) we can only count p[i] result += b[i] return result"},{"question":"Your friend is an enthusiastic gardener and is interested in knowing the maximum amount of water that can be stored in their improvised irrigation system. The irrigation system consists of a series of vertical poles of varying heights, where the poles are arranged in a straight line. When it rains, water gets trapped between these poles, forming small puddles. Your task is to determine the maximum volume of water that can be trapped after a rain shower. Imagine that the irrigation system and the poles represent a list of non-negative integers where each integer represents the height of a pole in the series. Given an array of non-negative integers representing the height of poles, determine how much water can be trapped between the poles after raining. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5), which denotes the number of poles. The second line contains `n` non-negative integers `h1, h2, ..., hn` (0 ≤ hi ≤ 10^4), where each integer represents the height of a pole. # Output Output a single integer, which is the maximum amount of water (in units) that can be trapped. # Examples Input ``` 6 0 1 0 2 1 0 ``` Output ``` 1 ``` Input ``` 9 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output ``` 6 ``` # Note In the first example, the system of poles forms one small puddle that traps 1 unit of water between the poles of heights 1 and 2. In the second example, the total amount of water trapped between the poles is 6 units, as water gets trapped in multiple puddles formed between the poles.","solution":"def trap_water(pole_heights): Given a list of non-negative integers representing the height of poles in a series, returns the maximum amount of water that can be trapped between these poles. if not pole_heights: return 0 n = len(pole_heights) left_max = [0] * n right_max = [0] * n # Fill left_max array where left_max[i] is the maximum height to the left of i including i left_max[0] = pole_heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], pole_heights[i]) # Fill right_max array where right_max[i] is the maximum height to the right of i including i right_max[n - 1] = pole_heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], pole_heights[i]) # Calculate total water trapped total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - pole_heights[i] return total_water"},{"question":"# Task Write a function called `reverse_number_string` that takes an input string consisting of digits and special characters. The function should: - Reverse the order of digits in places, leaving special characters in their original positions. # Example: ``` \\"12#34\\" --> \\"43#21\\" \\"a1b2#3\\" --> \\"a3b2#1\\" \\"!@345\\" --> \\"!@543\\" \\"ab#c\\" --> \\"ab#c\\" (no digits to reverse) ``` # Note: - All special characters should remain at their original indices while the digits should be reversed in place. - The input string will contain only digits and special characters. # Implementation: ```python def reverse_number_string(s): pass # Test cases print(reverse_number_string(\\"12#34\\")) # Output: \\"43#21\\" print(reverse_number_string(\\"a1b2#3\\")) # Output: \\"a3b2#1\\" print(reverse_number_string(\\"!@345\\")) # Output: \\"!@543\\" print(reverse_number_string(\\"ab#c\\")) # Output: \\"ab#c\\" ``` Write a function `reverse_number_string` that takes in a string `s` and returns a string with the digits reversed and the special characters in their original places.","solution":"def reverse_number_string(s): Reverse the digits in the string while preserving the positions of the special characters. # Extract digits from the string digits = [char for char in s if char.isdigit()] # Reverse the list of digits digits.reverse() # Create a list to hold the result result = [] digit_index = 0 # Iterate through the original string and construct the result for char in s: if char.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"Consider an operation on an encoded string where certain characters need to be substituted based on a fixed pattern. This assessment checks your string manipulation and transformation skills. __Task:__ Input: A string that contains alphanumeric characters and specific symbols. The string represents an encoded message where: - Every alphabetical character (both uppercase and lowercase) should be replaced with the same character that appears three positions down in the alphabetical order (wrapping around from Z to A and from z to a). - Every numeric character (0-9) should be replaced with the character that appears three positions up in the numerical order (wrapping around from 9 to 0). - Any other characters should be kept unchanged. You need to decode this message and return the resulting string. # Example: ``` Input: \\"abcXYZ123!?\\" Output: \\"defABC456!?\\" ``` In this example: - The letters \'a\', \'b\', \'c\' are shifted to \'d\', \'e\', \'f\' - The letters \'X\', \'Y\', \'Z\' are shifted to \'A\', \'B\', \'C\' - The numbers \'1\', \'2\', \'3\' are shifted to \'4\', \'5\', \'6\' - The symbols \'!\', \'?\' are not changed __Function Signature:__ ```python def decode_message(encoded_str: str) -> str: # Your code goes here ``` Test your implementation with static tests as well as various edge cases and random tests. Have fun decoding!","solution":"def decode_message(encoded_str: str) -> str: def shift_alpha(c): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + 3) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + 3) % 26 + ord(\'A\')) return c def shift_num(c): if \'0\' <= c <= \'9\': return chr((ord(c) - ord(\'0\') + 3) % 10 + ord(\'0\')) return c decoded = [] for char in encoded_str: if char.isalpha(): decoded.append(shift_alpha(char)) elif char.isdigit(): decoded.append(shift_num(char)) else: decoded.append(char) return \'\'.join(decoded)"},{"question":"Ashwin loves playing games, and his latest favorite game involves creating sequences of integers. The game provides a sequence of n positive integers and a target integer x. The objective of the game is to determine the number of subarrays that can be formed from the sequence where the sum of the elements in the subarray is exactly equal to x. A subarray is defined as a contiguous segment of the array. Ashwin wants your help to quickly find the number of such subarrays. -----Input----- The first line contains two integers n and x (1 ≤ x ≤ 10^9, 1 ≤ n ≤ 200000) — the length of the sequence and the target sum. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i is the i-th element of the sequence. -----Output----- Print the number of subarrays whose sum is exactly x. -----Examples----- Input 5 5 1 2 1 2 3 Output 2 Input 4 3 3 3 3 3 Output 4 -----Note----- In the first example, the subarrays that sum to 5 are [2, 1, 2] and [1, 2, 2]. In the second example, each single-element subarray equals the target sum of 3: [3], [3], [3], [3]. Hence, there are 4 such subarrays.","solution":"def count_subarrays_with_sum(sequence, target): Counts the number of subarrays in the given sequence that have a sum exactly equal to target. Args: sequence (list of int): List of integers representing the sequence. target (int): The target sum for the subarrays. Returns: int: The count of subarrays with sum equal to target. from collections import defaultdict # Dictionary to store the cumulative sum up to all the indices cum_sum_count = defaultdict(int) cum_sum_count[0] = 1 # to account for the sum from start to current index current_sum = 0 subarray_count = 0 for num in sequence: current_sum += num if (current_sum - target) in cum_sum_count: subarray_count += cum_sum_count[current_sum - target] cum_sum_count[current_sum] += 1 return subarray_count # Read input from user/system def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) x = int(data[1]) sequence = list(map(int, data[2:2+n])) result = count_subarrays_with_sum(sequence, x) print(result)"},{"question":"An online streaming platform tracks the number of hours users spend watching content over a week. The platform wants to identify the user who spent the highest total time watching content during the week. Each user has a unique ID, and the viewing times of all users for the week are recorded in a list. Input format The input consists of multiple pairs of lines where each pair represents one user. The first line of each pair contains a user ID (a string). The second line contains 7 integers separated by spaces, representing the number of hours the user spent watching content each day from Monday to Sunday. Output format Output the user ID of the user who has the highest total hours watched during the week. If there are multiple users with the same highest total, output any one of them. Input constraint The number of users does not exceed 1000. SAMPLE INPUT user1 2 3 1 4 0 5 3 user2 0 0 0 0 0 0 0 user3 1 2 3 4 5 6 7 SAMPLE OUTPUT user3","solution":"def find_top_user(data): Given a list of user IDs and their respective weekly hours watched, returns the user ID of the user with the highest total hours watched. :param data: List of strings, where alternate lines represents userID and weekly hours watched :return: String, userID of the user with the highest total hours watched max_hours = -1 top_user = \'\' for i in range(0, len(data), 2): user_id = data[i] hours = list(map(int, data[i+1].split())) total_hours = sum(hours) if total_hours > max_hours: max_hours = total_hours top_user = user_id return top_user"},{"question":"A company needs to manage booking requests for a conference room. The conference room can only host one event at a time. Each booking request has a start and an end time, and the goal is to find the maximum number of non-overlapping bookings that can be accepted. You are to implement a function that receives the list of booking requests and returns the maximum number of bookings that can be accepted without any overlap. -----Constraints----- - 1 ≤ N ≤ 1000 (where N is the number of booking requests) - 0 ≤ start_i < end_i ≤ 10^9 (where start_i and end_i are the start and end times of the ith booking request) -----Input----- Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 : start_N end_N -----Output----- Print a single integer representing the maximum number of non-overlapping bookings that can be accepted. -----Sample Input----- 5 1 3 2 5 4 7 6 8 8 10 -----Sample Output----- 3 Explanation: The bookings (1, 3), (4, 7), and (8, 10) fit without overlapping.","solution":"def max_non_overlapping_bookings(bookings): Finds the maximum number of non-overlapping bookings. Parameters: bookings (list of tuples): A list of tuples where each tuple contains the start and end time of a booking. Returns: int: The maximum number of non-overlapping bookings that can be accepted. # Sort the bookings based on end time bookings.sort(key=lambda b: b[1]) max_bookings = 0 last_end_time = -float(\'inf\') for start, end in bookings: if start >= last_end_time: max_bookings += 1 last_end_time = end return max_bookings def main(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") N = int(data[0]) bookings = [] for i in range(1, N + 1): start, end = map(int, data[i].split()) bookings.append((start, end)) print(max_non_overlapping_bookings(bookings)) if __name__ == \\"__main__\\": main()"},{"question":"Heidi is quite an imaginative person! She came up with a new way to make her city safer from zombies by leveraging a powerful currency and trade system. She needs your help to determine the shortest possible secure trade route between cities that avoids zombie-infested areas. The secure trade route problem is defined as follows: - You are given an undirected graph G with N nodes and M edges. Each edge has a non-negative weight representing the cost of traveling that route. - Additionally, there are K cities that are known to be infested with zombies. These cities should not be included in the secure trade route. - Your task is to compute the shortest path distance between two given nodes S (start) and T (target), such that none of the intermediate nodes (excluding S and T) in the path are zombie-infested cities. The input format is: - The first line contains four integers N, M, K, and Q (1 ≤ N ≤ 1000, 0 ≤ M ≤ 10000, 0 ≤ K < N, 1 ≤ Q ≤ 1000). - The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 0 ≤ w ≤ 1000, u ≠ v) describing an edge between cities u and v with weight w. - The next line contains K integers, the list of zombie-infested cities. - The next Q lines each contain two integers S and T (1 ≤ S, T ≤ N), describing a query for the shortest distance between cities S and T avoiding the zombie-infested cities. For each query, if there is no such path, print -1. Otherwise, print the shortest path distance. Input 10 10 2 1 1 2 4 1 3 2 2 3 5 2 4 10 3 5 3 4 5 4 5 6 11 4 6 1 3 7 8 7 8 6 4 9 7 7 10 2 5 7 3 10 5 1 6 Output 15","solution":"import heapq def dijkstra(graph, start, target, zombie_cities, n): Calculate the shortest path using Dijkstra\'s algorithm avoiding zombie-infested cities. inf = float(\'inf\') dist = [inf] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if u == target: return dist[target] if current_dist > dist[u]: continue for v, weight in graph[u]: if v in zombie_cities and v != target: continue new_dist = current_dist + weight if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(pq, (new_dist, v)) return -1 if dist[target] == inf else dist[target] def secure_trade_route(n, m, k, q, edges, zombies, queries): Solve the secure trade route problem. # Initialize the graph as an adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for start, target in queries: if start in zombies and start != target or target in zombies: results.append(-1) else: distance = dijkstra(graph, start, target, set(zombies), n) results.append(distance) return results"},{"question":"The task requires implementing an optimized, performant algorithm for evaluating prefix expressions (also known as Polish Notation). A prefix expression is a mathematical notation where each operator precedes its operands. For example, a valid prefix expression would be \\"+ 3 4\\", which equates to 3 + 4 = 7. Implement the function `evaluatePrefix(expression: List[str]) -> int` which takes a list of strings representing a prefix expression and returns the evaluated result as an integer. Assume all input expressions are valid and contain only integer operands and the operators +, -, *, /. Your function will parse the expression from right to left, using a stack to facilitate the evaluation of operations. You must ensure that the operations adhere to normal mathematical rules and integer division truncation. -----Input----- expression: A list of strings representing the prefix expression. Each string can be an operator (\\"+\\", \\"-\\", \\"*\\", \\"/\\") or an operand (an integer, possibly with a preceding \\"-\\" to denote a negative number). It is guaranteed that: - All numbers are valid integers within a reasonable range. - The expression length is between 1 and 10,000 elements. -----Output----- An integer representing the result of evaluating the prefix expression. -----Examples----- Input: [\\"+\\", \\"9\\", \\"*\\", \\"3\\", \\"2\\"] Output: 15 Explanation: The prefix expression evaluates as 3 * 2 = 6, then 9 + 6 = 15. Input: [\\"-\\", \\"*\\", \\"10\\", \\"2\\", \\"3\\"] Output: 17 Explanation: The prefix expression evaluates as 10 * 2 = 20, then 20 - 3 = 17. Input: [\\"/\\", \\"+\\", \\"15\\", \\"5\\", \\"3\\"] Output: 6 Explanation: The prefix expression evaluates as 15 + 5 = 20, then 20 / 3 = 6 (integer division). It is recommended to avoid built-in `eval()` function or similar shortcuts and ensure optimal performance when parsing the input list, especially for longer expressions.","solution":"def evaluatePrefix(expression): Evaluates a prefix expression. Args: expression (List[str]): The prefix expression as a list of strings. Returns: int: The evaluated result of the prefix expression. stack = [] operators = {\\"+\\", \\"-\\", \\"*\\", \\"/\\"} # Traverse the expression from right to left for token in reversed(expression): if token in operators: operand1 = stack.pop() operand2 = stack.pop() if token == \\"+\\": result = operand1 + operand2 elif token == \\"-\\": result = operand1 - operand2 elif token == \\"*\\": result = operand1 * operand2 elif token == \\"/\\": # Ensure integer division with truncation towards zero result = int(operand1 / operand2) stack.append(result) else: stack.append(int(token)) return stack[-1]"},{"question":"# Calculate leaderboard rankings You are tasked with calculating leaderboard rankings based on player scores. The player with the highest score should be ranked first, the second highest score should be ranked second, and so forth. If two players have the same score, they should have the same rank, but the subsequent rank should skip a number to maintain distinct ranks. Implement a function `leaderboard_ranking(players_scores)` that takes a list of tuples, where each tuple consists of a player\'s name and their score, and returns a list of tuples, where each tuple consists of a player\'s name and their rank. Input - A list of tuples `players_scores` where `players_scores[i] = (player_name, score)`. Output - A list of tuples where each tuple contains the player\'s name and their rank, sorted by rank. Example ```python def leaderboard_ranking(players_scores): # your code here players_scores = [(\\"Alice\\", 50), (\\"Bob\\", 75), (\\"Charlie\\", 75), (\\"David\\", 55), (\\"Eve\\", 20)] print(leaderboard_ranking(players_scores)) ``` Expected Output ```python [(\'Bob\', 1), (\'Charlie\', 1), (\'David\', 3), (\'Alice\', 4), (\'Eve\', 5)] ``` Explanation 1. Players Bob and Charlie both have the highest score (75), so they share the rank 1. 2. David has the next highest score (55), so he gets rank 3 (rank 2 is skipped). 3. Alice has the next highest score (50), so she gets rank 4. 4. Eve has the lowest score (20), so she gets rank 5.","solution":"def leaderboard_ranking(players_scores): Returns the leaderboard ranking based on scores. Players with the same score get the same rank, and the subsequent rank skips numbers to maintain distinct ranks. :param players_scores: List of tuples, each containing a player name and their score :return: List of tuples, each containing a player name and their rank # Step 1: Sort the players by score in descending order sorted_scores = sorted(players_scores, key=lambda x: -x[1]) # Step 2: Calculate the ranks rankings = [] current_rank = 1 previous_score = None for i, (name, score) in enumerate(sorted_scores): if score != previous_score: current_rank = i + 1 rankings.append((name, current_rank)) previous_score = score return rankings"},{"question":"A bakery likes to deliver fresh bread to its customers. The bakery delivery system operates on predefined delivery routes. Each delivery person has a specific route that they follow, and each route is marked by delivery points. A delivery person can only deliver bread to points on their route without skipping any points in between. To keep track of the freshest route possible, the bakery wants to check if there exists a common delivery station shared by all delivery persons from which they can start their deliveries and ensure that the bread reaches all other delivery points freshest. The bread should reach all points directly from this common starting point or via consecutive points on the route. Given the delivery routes of multiple delivery persons, help the bakery determine if there exists a common delivery point shared by all delivery routes. ----- Input ----- The first line contains a single positive integer T ≤ 50, indicating the number of test cases to follow. Each test case starts with an integer N (2 ≤ N ≤ 50), the number of delivery persons. This is followed by N lines, each containing a list of integers representing the delivery points on the respective person\'s route. Each delivery point is a positive integer less than or equal to 100, and the number of delivery points in any route is at most 50. ----- Output ----- For each test case, output a single string \\"yes\\" if there exists at least one common delivery point shared by all delivery routes. Otherwise, output \\"no\\". ----- Sample Input 1 ----- 3 3 1 2 3 2 3 4 3 4 5 2 1 2 3 4 5 6 4 7 8 9 10 7 8 11 12 7 13 14 15 7 16 17 18 ----- Sample Output 1 ----- yes no yes","solution":"def common_delivery_point(routes): Determines if all delivery routes have at least one common delivery point. :param routes: List of lists, where each list contains delivery points for a specific route. :return: \'yes\' if there is at least one common delivery point, otherwise \'no\'. # Using set intersection to find common points in all routes common_points = set(routes[0]) for route in routes[1:]: common_points &= set(route) return \\"yes\\" if common_points else \\"no\\" def solve(test_cases): results = [] for routes in test_cases: results.append(common_delivery_point(routes)) return results def parse_input(input_string): Parses the input string into the required format for the `solve` function. :param input_string: The input string containing the test case description. :return: A list corresponding to test cases where each element is a list of delivery routes. lines = input_string.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 routes = [] for _ in range(N): routes.append(list(map(int, lines[index].split()))) index += 1 test_cases.append(routes) return test_cases def format_output(results): Formats the output for printing or other usage. :param results: A list of strings containing \'yes\' or \'no\' for each test case. :return: A string representation suitable for the output. return \\"n\\".join(results)"},{"question":"Problem Statement You are given a grid with N rows and M columns. Each cell in the grid contains either a number or a trap. The number in a cell represents the cost of passing through that cell. Stepping on a trap ends the game immediately, resulting in an infinite cost. A player starts at the top-left corner of the grid (cell 1,1) and aims to reach the bottom-right corner of the grid (cell N,M). The player can move to the cell directly to its right or directly below it. Your task is to determine the minimum cost to reach the bottom-right corner from the top-left corner while avoiding traps. If it is not possible to reach the bottom-right corner, return -1. Input The input consists of multiple datasets. Each dataset is described as follows: The first line contains two integers, N and M, which indicate the number of rows and columns in the grid, respectively. The next N lines contain M integers each, describing the grid. Each integer is either: - A non-negative integer representing the cost to pass through that cell. - The letter \'X\' (without quotes), representing a trap. The end of input is denoted by a line containing two zeroes separated by a single space. You can assume the following: - 1 ≤ N, M ≤ 100 - 0 ≤ cost ≤ 1,000,000 Output For each dataset, print the minimum cost to reach the bottom-right corner from the top-left corner. If it is not possible, print -1. Example Input 3 3 1 2 3 4 X 6 7 8 9 2 2 1 X X 1 0 0 Output 21 -1","solution":"import sys from collections import deque import heapq def min_cost_to_reach_end(grid, N, M): if grid[0][0] == \'X\' or grid[N-1][M-1] == \'X\': return -1 directions = [(1, 0), (0, 1)] pq = [(grid[0][0], 0, 0)] visited = set((0, 0)) while pq: cost, x, y = heapq.heappop(pq) if (x, y) == (N-1, M-1): return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: if grid[nx][ny] != \'X\': heapq.heappush(pq, (cost + grid[nx][ny], nx, ny)) visited.add((nx, ny)) return -1 def process_datasets(input_data): results = [] i = 0 while i < len(input_data): N, M = map(int, input_data[i].split()) if N == 0 and M == 0: break i += 1 grid = [] for _ in range(N): row = input_data[i].split() grid_row = [] for cell in row: if cell == \'X\': grid_row.append(cell) else: grid_row.append(int(cell)) grid.append(grid_row) i += 1 result = min_cost_to_reach_end(grid, N, M) results.append(result) return results # Function for parsing input def main(): import sys input_data = sys.stdin.read().strip().split(\'n\') results = process_datasets(input_data) for result in results: print(result)"},{"question":"You are a software engineer at a company that organizes different events. One of your company\'s tasks is to help optimize the seating arrangements for these events. The seating plan consists of N tables, each with a maximum capacity of M people. You need to come up with the best way to distribute attendees across these tables so that all tables are either filled to capacity or one seat short of the maximum capacity. Your algorithm should determine the minimum number of tables that must be used to seat all attendees under these conditions. Write a program that takes as input the number of tables N, the maximum capacity of each table M, and the total number of attendees A. The program should then output the minimum number of tables required to seat all attendees according to the specified rules. Input Multiple datasets are provided. The end of the input is indicated by a single zero. Each dataset is given in the following format: N M A The number of tables N (1 ≤ N ≤ 100) and the maximum capacity M (1 ≤ M ≤ 100) are given on the first line. The total number of attendees A (1 ≤ A ≤ 1000) is given on the second line. The number of datasets does not exceed 100. Output For each dataset, output the minimum number of tables required to seat all attendees according to the specified rules. Example Input 5 4 10 10 7 70 3 5 12 0 Output 3 10 3","solution":"def minimum_tables(N, M, A): Determine the minimum number of tables required to seat all attendees such that all tables are either filled to capacity or one seat short of the maximum capacity. :param N: Number of tables :param M: Maximum capacity of each table :param A: Total number of attendees :return: Minimum number of tables required if A <= 0 or M <= 0 or N <= 0: return 0 tables_filled_to_capacity = A // M remaining_attendees = A % M if remaining_attendees == 0: return tables_filled_to_capacity if remaining_attendees == M - 1: return tables_filled_to_capacity + 1 else: tables_needed = (A + M - 1) // M return tables_needed # Read input def process_input(): import sys input = sys.stdin.read() lines = input.strip().split(\'n\') results = [] i = 0 while i < len(lines): if lines[i] == \'0\': break N, M = map(int, lines[i].split()) A = int(lines[i + 1]) results.append(minimum_tables(N, M, A)) i += 2 for result in results: print(result)"},{"question":"Write a function `findChar` that determines the smallest character in a given string that is larger than a given target character. The characters are sequences of lowercase letters, and the string is given in sorted order. If no such character exists, the function should return the first character in the string. **Function Signature:** ```python def findChar(arr: List[str], target: str) -> str: pass ``` **Input** - A list of lowercase letters `arr`, sorted in non-decreasing order. (1 < len(arr) < 100) - A single lowercase letter `target` **Output** - Return the smallest character in `arr` that is larger than `target`. If no such character exists, return the first character of `arr`. **Example:** ```python findChar([\\"c\\", \\"f\\", \\"j\\"], \\"a\\") ``` **Output:** ```python \\"c\\" ``` ```python findChar([\\"c\\", \\"f\\", \\"j\\"], \\"k\\") ``` **Output:** ```python \\"c\\" ``` ```python findChar([\\"a\\", \\"b\\"], \\"z\\") ``` **Output:** ```python \\"a\\" ``` **Explanation:** 1. In the first case, the smallest character in the array that is larger than \'a\' is \'c\'. 2. In the second case, the smallest character larger than \'k\' is not present, so the function returns the first character of the array, which is \'c\'. 3. In the third case, the target character \'z\' has no larger counterpart, so the function returns the first character of the array, \'a\'.","solution":"from typing import List def findChar(arr: List[str], target: str) -> str: for char in arr: if char > target: return char return arr[0]"},{"question":"Sam is participating in a coding competition where he encounters a challenge to find the smallest number which is a power of two, greater than or equal to a given number. A power of two is any number of the form 2^k where k is a non-negative integer. Help Sam solve this problem by writing a code for him. INPUT: T test cases each of the next T lines contains a number x which specifies the input number. OUTPUT: For each test case, output the smallest number which is a power of two and is greater than or equal to the given number x. 1 < T < 11 1 ≤ x < 10^5 example: Powers of two are as follows: 1, 2, 4, 8, 16, 32, 64, 128, ... if x = 5, the next power of two is 8. if x = 15, the next power of two is 16. SAMPLE INPUT 3 5 15 20 SAMPLE OUTPUT 8 16 32","solution":"import math def next_power_of_two(n): Returns the smallest power of two greater than or equal to n. if n <= 0: return 1 power = math.ceil(math.log2(n)) return 2 ** power def solve(test_cases): Given a list of numbers, returns the smallest power of two greater than or equal to each number. results = [] for x in test_cases: results.append(next_power_of_two(x)) return results"},{"question":"Alice has a list of n positive integers: b_1, b_2, ..., b_{n}. She wants to create a new sequence c of length n such that each element c_i is the product of all elements in the list b except for the element b_i at the respective position i. For instance, if the original list b is [1, 2, 3, 4], the new sequence c should be [24, 12, 8, 6], given that: - c_1 = 2 * 3 * 4 = 24 - c_2 = 1 * 3 * 4 = 12 - c_3 = 1 * 2 * 4 = 8 - c_4 = 1 * 2 * 3 = 6 Alice finds this task time-consuming for a large list and asks for your help to automate the process. -----Input----- The first line contains integer n (1 ≤ n ≤ 10^5) — the number of elements in the sequence b. The second line contains n space-separated positive integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 10^6) — the elements of sequence b. -----Output----- Print n space-separated integers representing the new sequence c. -----Examples----- Input 4 1 2 3 4 Output 24 12 8 6 Input 3 2 3 4 Output 12 8 6","solution":"def create_sequence(b): n = len(b) if n == 1: return [1] # Create an array to store the prefix products prefix_products = [1] * n prefix_products[0] = b[0] for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * b[i] # Create an array to store the suffix products suffix_products = [1] * n suffix_products[n - 1] = b[n - 1] for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * b[i] # Create the result array c = [1] * n c[0] = suffix_products[1] c[n - 1] = prefix_products[n - 2] for i in range(1, n - 1): c[i] = prefix_products[i - 1] * suffix_products[i + 1] return c"},{"question":"Luke is a renowned treasure hunter, and he recently discovered an ancient pattern in a series of caves. There are `n` caves numbered from 1 to n. Each cave might be connected to one or more other caves by a passage, and these passages are bidirectional. The connections form a tree, meaning there is exactly one path between any pair of caves. Luke needs to map out the shortest path from a starting cave `s` to an ending cave `t`, and he also wants to know how many ways he can choose a cave on this shortest path that can serve as a midpoint between `s` and `t`. A cave can be a midpoint if it lies somewhere on the shortest path from `s` to `t`. Help Luke find the number of possible midpoint caves. -----Input----- The first line contains a single integer `n` `n` (2 ≤ n ≤ 100000) — the number of caves. The next `n-1` lines each contain two space-separated integers `a` and `b` describing a passage between caves `a` and `b`. The last line contains two space-separated integers `s` and `t` (1 ≤ s, t ≤ n) — the starting and ending caves. -----Output----- Print a single integer — the number of possible midpoints along the shortest path from `s` to `t`. -----Examples----- Input 6 1 2 2 3 2 4 4 5 4 6 1 5 Output 3 -----Explanation----- In this sample, the shortest path from cave 1 to cave 5 is 1 → 2 → 4 → 5. Any cave on this path can be a midpoint. The possible midpoints are 1, 2, and 4. Therefore, the output is 3.","solution":"def find_midpoints(n, edges, s, t): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # BFS to find the shortest path def bfs(start, end): queue = deque([(start, [start])]) visited = set() while queue: node, path = queue.popleft() if node == end: return path if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return [] shortest_path = bfs(s, t) return len(shortest_path) # Example input n = 6 edges = [(1, 2), (2, 3), (2, 4), (4, 5), (4, 6)] s = 1 t = 5 print(find_midpoints(n, edges, s, t))"},{"question":"A city\'s public transportation system is upgrading its network of bus routes. Each bus route connects two bus stops and allows passengers to travel between them directly, both ways. Your task is to determine whether it\'s possible to travel between two given bus stops using the available bus routes in the city. You are provided the number of bus stops, the number of bus routes, and a list of direct bus routes between the stops. You will then receive multiple queries, each asking whether travel is possible between two specific bus stops using any combination of the available routes. Input - The first line contains two integers, `S` and `R`, separated by a space, representing the number of stops (`2 ≤ S ≤ 1000`) and the number of bus routes (`1 ≤ R ≤ 5000`), respectively. - The next `R` lines each contain two integers `u` and `v`, separated by a space, indicating a direct bus route between stops `u` and `v` (`1 ≤ u, v ≤ S`). - The next line contains a single integer `Q` (`1 ≤ Q ≤ 1000`), representing the number of queries. - The next `Q` lines each contain two integers `a` and `b`, separated by a space, representing a query asking if there is a route to travel between stops `a` and `b`. Output For each query, output \\"YES\\" if travel is possible between the two stops using the bus routes, and \\"NO\\" otherwise. Example Input ``` 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 ``` Output ``` YES YES YES ```","solution":"def travel_possible(S, R, routes, Q, queries): from collections import defaultdict, deque # Create an adjacency list for the graph representing the bus stops and routes graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) def bfs(start, goal): if start == goal: return True visited = set() queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: if neighbor == goal: return True visited.add(neighbor) queue.append(neighbor) return False results = [] for a, b in queries: if bfs(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Implement a function ```find_combination``` that, given a list of unique integers and a target integer, computes all possible combinations of the integers in the list that sum up to the target. The function should return a list of lists, each containing one possible combination. If there are no such combinations, return an empty list. For example: ```python def find_combination(numbers, target): pass numbers = [2, 3, 6, 7] target = 7 The result should be: [[7], [2, 2, 3]] ``` # Guidelines: - Each number from the list can be used multiple times in a combination. - The combinations can be returned in any order. - This problem should be solved using a recursive approach. - Ensure that your solution handles edge cases, such as when the input list is empty or when no combination of numbers adds up to the target. - Input list lengths are generally between 1 and 20, and integer values are within the range -100 to 100. Targets are within the range -1000 to 1000.","solution":"def find_combination(numbers, target): def backtrack(start, path, remaining): if remaining == 0: result.append(path) return for i in range(start, len(numbers)): if numbers[i] > remaining: continue backtrack(i, path + [numbers[i]], remaining - numbers[i]) result = [] numbers.sort() backtrack(0, [], target) return result"},{"question":"Given an array of positive integers and a target integer `T`, find the minimum length of a subarray for which the sum is at least `T`. If there is no such subarray, return `0`. -----Input----- The first line of the input contains an integer `n` (1 le n le 10^5) — the number of elements in the array. The next line contains `n` positive integers representing the elements of the array. The last line contains the integer `T` (1 le T le 10^9). -----Output----- Output the minimum length of the subarray with a sum of at least `T`. If no such subarray exists, return `0`. -----Examples----- Input 8 2 3 1 2 4 3 7 2 7 Output 1 Input 5 1 2 3 4 5 11 Output 3 Input 7 1 2 3 4 5 6 7 100 Output 0 -----Notes----- In the first example, the minimum subarray with a sum of at least `7` is `[7]`, which has a length of `1`. In the second example, the subarray `[4, 3, 5]` has a sum of `11` and a length of `3`. In the third example, no subarray exists with a sum of at least `100`, so the output is `0`.","solution":"def min_subarray_len(arr, T): Finds the minimum length of a contiguous subarray with a sum at least T. Parameters: arr (list of int): Array of positive integers. T (int): Target sum. Returns: int: Minimum length of the subarray, or 0 if no such subarray exists. n = len(arr) min_len = float(\'inf\') left = 0 current_sum = 0 for right in range(n): current_sum += arr[right] while current_sum >= T: min_len = min(min_len, right - left + 1) current_sum -= arr[left] left += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"You are given a set of points representing a city\'s buildings on a 2D Cartesian plane. Each point is denoted as (x, y), where x is the position along the x-axis, and y represents the height of the building at that position. You want to determine the skyline formed by these buildings when viewed from a distance. The skyline is defined as a list of \\"key points,\\" where a key point is the left endpoint of a horizontal line segment in the skyline. The grounding line is considered the x-axis (i.e., y=0). A building is represented by a triplet (L, R, H), where L and R are the x-coordinates of the left and right edges of the building, and H is the height. The buildings may overlap or be separated. The goal is to produce the key points in the final skyline formed by these buildings. -----Input----- The first line of the input contains an integer n (1 leq n leq 10,000), the number of buildings. The next n lines each contain three integers L, R, and H (1 leq L < R leq 10^9, 1 leq H leq 10^9), representing the position and height of each building. -----Output----- Print a list of key points representing the skyline in the form (x, y), where x is the coordinate and y is the height of the skyline when viewed from that point. -----Examples----- Input 2 1 5 11 2 6 7 Output 1 11 5 7 6 0 Input 3 2 9 10 3 7 15 5 12 12 Output 2 10 3 15 7 12 12 0 -----Note----- In the first example, there are two buildings. The skyline key points are determined at x=1 with height 11, then at x=5 where the height changes to 7 from the second building, and finally at x=6 where the height returns to 0. In the second example, there are three buildings. The key points denote significant changes in the skyline height. The sequence of heights changes at various x coordinates, indicating the left edges of the buildings and the end of the skyline as it returns to the x-axis.","solution":"from heapq import heappush, heappop def get_skyline(buildings): Determine the skyline formed by the given buildings. :param buildings: List of triplets (L, R, H) where L is the left coordinate, R is the right coordinate, and H is the height of the building. :return: List of tuples representing the key points in the skyline. events = [] # Events are critical points where buildings start or end for L, R, H in buildings: events.append((L, -H, R)) # Building starts events.append((R, 0, 0)) # Building ends events.sort() # Events are sorted by the x coordinate result = [] max_heap = [(0, float(\\"inf\\"))] # Starting with the base ground (y=0) for x, negH, R in events: while max_heap[0][1] <= x: # Remove the past buildings from heap heappop(max_heap) if negH: # if building starts add to heap heappush(max_heap, (negH, R)) max_current_height = -max_heap[0][0] if not result or result[-1][1] != max_current_height: result.append((x, max_current_height)) return result"},{"question":"You are a software developer working on a new project management tool. One of the key features of the tool is to help users schedule their daily tasks in a way that maximizes their productivity. Each task has a specific start time and end time, and it is necessary to determine the maximum number of tasks that can be completed without any overlap. You are tasked with implementing a function that will receive a list of tasks, each defined by a start time and an end time, and return the maximum number of non-overlapping tasks that can be completed. -----Input----- - The first line contains an integer 1 leq n leq 2 cdot10^5, the number of tasks. - Each of the next n lines contains two integers 0 leq s_i < e_i leq 10^9, representing the start time and end time of the ith task. -----Output----- Output a single integer, the maximum number of non-overlapping tasks that can be completed. -----Examples----- Sample Input 1: 3 1 3 2 5 4 6 Sample Output 1: 2 Sample Input 2: 4 0 1 3 4 1 2 2 3 Sample Output 2: 4","solution":"def max_non_overlapping_tasks(tasks): Determines the maximum number of non-overlapping tasks that can be completed. :param tasks: List of tuples, where each tuple contains start and end time of a task. :return: Maximum number of non-overlapping tasks. # Sort tasks based on end time tasks_sorted = sorted(tasks, key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks_sorted: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"problem You are given stock price data for `N` consecutive days, and you need to determine the maximum possible profit you can achieve by making exactly one buy and one sell transaction within this period. However, there\'s a catch: the buying and selling transactions must be done on different days, meaning you need to buy the stock on one day and sell it on a later day. Create a program to find the maximum possible profit. input The input consists of two lines: - The first line contains an integer N (2 ≤ N ≤ 200) which indicates the number of days. - The second line contains N integers - each integer represents the stock price on that particular day. The stock prices are given in their chronological order. output Output a single integer representing the maximum possible profit you can achieve. If no profit is possible, output 0. Input / output example Input example 1 6 7 1 5 3 6 4 Output example 1 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Input example 2 5 7 6 4 3 1 Output example 2 0 Explanation: No transaction is done, i.e., max profit = 0. Example Input 6 7 1 5 3 6 4 Output 5","solution":"def max_profit(N, prices): Returns the maximum possible profit from a single buy and sell transaction. if N <= 1: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given a list of integers and an integer `k`, write a function that determines if any two distinct numbers from the list add up to `k`. Return a boolean value: `True` if such a pair exists, `False` otherwise. For example: - For `input_list = [10, 15, 3, 7]` and `k = 17`, the function should return `True` since 10 + 7 equals 17. - For `input_list = [1, 2, 3, 4]` and `k = 8`, the function should return `False` as no two numbers add up to 8.","solution":"def has_pair_with_sum(input_list, k): Determines if any two distinct numbers in the list add up to k. seen = set() for number in input_list: if k - number in seen: return True seen.add(number) return False"},{"question":"Given a set of integers, you are required to reorder the integers such that their concatenation in that order forms the largest possible integer. Note that the result should be so large that the number is represented in decimal without leading zeros. Input: - The first line contains a single integer n (1 ≤ n ≤ 100), the number of integers in the set. - The second line contains n integers separated by spaces, where each integer x belongs to the range (0 ≤ x ≤ 10^9). Output: - Output the largest concatenated integer possible, represented as a string. Examples: Input: 3 54 546 548 Output: 5546548 Input: 4 3 30 34 5 Output: 534330","solution":"from functools import cmp_to_key def largest_concatenated_integer(numbers): Reorder integers such that their concatenation forms the largest possible integer. Parameters: numbers (List[int]): List of integers. Returns: String: The largest possible integer as a string. def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert all integers to strings for easy comparison str_numbers = list(map(str, numbers)) # Sort array in descending order based on custom comparator sorted_numbers = sorted(str_numbers, key=cmp_to_key(compare)) # Join the sorted array into a single string largest_number = \'\'.join(sorted_numbers) # Return the result but ensure we remove leading zeros (if any) return largest_number.lstrip(\'0\') or \'0\'"},{"question":"Write a function that takes a list of integers and returns a new list that contains only the non-negative integers from the input list. -----Input----- The input to the function is a list of integers `numbers` which can include both negative and positive integers. -----Output----- Return a list of integers that contains only the non-negative numbers from the input list. -----Constraints----- - The length of the list `numbers` will be between 1 and 1000. - Each integer in the list `numbers` will be between -1000 and 1000. -----Example----- Input [-5, 3, 7, -2, 0, -1] Output [3, 7, 0]","solution":"def filter_non_negative(numbers): Returns a list containing only the non-negative integers from the input list. Parameters: numbers (list): The input list of integers. Returns: list: A list of non-negative integers. return [num for num in numbers if num >= 0]"},{"question":"Alice and Bob are enthusiastically playing a game. The game consists of a number of rounds, and in each round, both Alice and Bob must choose a number. Alice will always try to choose the smallest possible integer that has not been chosen by either of them in previous rounds. Bob, on the other hand, always tries to choose the largest possible integer that has not been selected in previous rounds. Given the lists of numbers chosen by Alice and Bob in each round (in the order they were chosen), you need to determine the sum of numbers Alice has chosen and the sum of numbers Bob has chosen by the end of the game. -----Input----- The first line contains one integer m (1 leq m leq 10^5) — the number of rounds in the game. The second line contains m distinct integers a_1, a_2, ldots, a_m (1 leq a_i leq 2m), the numbers chosen by Alice in each round. The third line contains m distinct integers b_1, b_2, ldots, b_m (1 leq b_i leq 2m), the numbers chosen by Bob in each round. -----Output----- Print two integers: The sum of all numbers chosen by Alice and the sum of all numbers chosen by Bob. -----Examples----- Input 3 1 3 5 6 4 2 Output 9 12 Input 4 1 2 3 4 8 7 6 5 Output 10 26 -----Note----- In the first sample, Alice\'s chosen numbers are {1, 3, 5}, summing up to 9. Bob\'s chosen numbers are {6, 4, 2}, summing up to 12. In the second example, Alice\'s chosen numbers are {1, 2, 3, 4}, summing up to 10. Bob\'s chosen numbers are {8, 7, 6, 5}, summing up to 26.","solution":"def compute_sums(m, alice_numbers, bob_numbers): Computes the sum of numbers chosen by Alice and Bob. Arguments: m - integer, number of rounds alice_numbers - list of integers, numbers chosen by Alice bob_numbers - list of integers, numbers chosen by Bob Returns: A tuple of two integers: (sum of Alice\'s numbers, sum of Bob\'s numbers) sum_alice = sum(alice_numbers) sum_bob = sum(bob_numbers) return sum_alice, sum_bob"},{"question":"A tree is considered as a data structure consisting of nodes, where each node has zero or more child nodes and exactly one parent node (except the root node, which has no parent). Let us define a **k-tree** as a type of tree where each node has up to k child nodes. Your task is to create a **n-node k-tree** and then determine the number of distinct ways you can assign distinct labels to the nodes such that the k-tree structure is maintained. The labels range from 1 to n, and the root must be labeled with 1. Each child node can be labeled with any of the remaining labels. Write a function `count_ways_to_label_k_tree(n, k)` that returns the number of distinct ways you can label this n-node k-tree. Example: Input: ```python n = 4 k = 2 ``` Output: ```python 24 ``` Explanation: For n = 4 and k = 2, the tree can have various configurations such as: ``` 1 / 2 3 / 4 ``` or ``` 1 / 3 4 / 2 ``` and several other combinations. There are 24 such distinct configurations where the tree structure is maintained with each node having up to 2 child nodes. Hint: Consider how you might use combinatorics and factorials to solve this problem.","solution":"from math import factorial def count_ways_to_label_k_tree(n, k): Returns the number of distinct ways to label an n-node k-tree. if n == 0 or n == 1: return 1 total_ways = factorial(n - 1) return total_ways"},{"question":"For a given array of integers, consider any two subsets S1 and S2 of this array and define their cost as the absolute difference of their sums, |sum(S1) - sum(S2)|. Find the maximum possible cost between any two non-overlapping subsets of the array. -----Constraints----- - 2 leq N leq 1000 - -10^6 leq A_i leq 10^6 -----Input----- Input is given from Standard Input in the following format: N A_1 ldots A_N -----Output----- Print the maximum possible cost between any two non-overlapping subsets of the array. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 15 There are many possible valid pairs of subsets. For example, S1 = {5} and S2 = {1,2,3,4} give |5 - (1+2+3+4)| = |5 - 10| = 5. The highest possible cost is obtained for S1 = {1, 2, 3, 4, 5} and S2 = {} which gives |15 - 0| = 15.","solution":"def max_subset_cost(arr): Given an array of integers, the maximum possible cost between any two non-overlapping subsets of the array is the absolute difference between the sum of all elements and zero (which is the sum of an empty subset). Since we want the maximum cost, we always consider the sum of the entire array and an empty subset. total_sum = sum(arr) return abs(total_sum - 0) # abs is redundant here, but for clarity, we use it"},{"question":"You are given a list of integers representing the scores of students in a class. Your task is to calculate the average score after dropping the two lowest scores. If there are fewer than three students in the class, return 0 since it\'s not possible to drop two scores and still have a meaningful average. Write a function `average_score` that takes a list of integers as input and returns the average score after dropping the two lowest scores. The average should be rounded to two decimal places. # Function Signature ```python def average_score(scores: List[int]) -> float: ``` # Input - `scores` (List[int]): A list of integers representing the scores of students in a class. The length of the list ranges from 0 to 1000, and each score ranges from 0 to 100. # Output - Return a float number, representing the average score after dropping the two lowest scores, rounded to two decimal places. - If the number of scores is less than 3, return 0. # Examples Example 1 ```python scores = [50, 80, 90, 20, 70] average_score(scores) ``` **Output:** `80.0` **Explanation:** The two lowest scores are 20 and 50, dropping them leaves [80, 90, 70]. The average of 80, 90, and 70 is 80.0. Example 2 ```python scores = [100, 40, 60] average_score(scores) ``` **Output:** `100.0` **Explanation:** The two lowest scores are 40 and 60, dropping them leaves [100]. The average of 100 is 100.0. Example 3 ```python scores = [90, 70] average_score(scores) ``` **Output:** `0` **Explanation:** There are fewer than three scores, so we return 0. Example 4 ```python scores = [] average_score(scores) ``` **Output:** `0` **Explanation:** There are no scores, so we return 0.","solution":"from typing import List def average_score(scores: List[int]) -> float: if len(scores) < 3: return 0.0 sorted_scores = sorted(scores) trimmed_scores = sorted_scores[2:] average = sum(trimmed_scores) / len(trimmed_scores) return round(average, 2)"},{"question":"You are given a string that consists of lowercase English letters and is repeated infinitely. Given an integer n, your task is to determine the number of occurrences of the character `\\"a\\"` in the first n characters of the infinite string. For example, if you have string `s = \\"abcac\\"` and `n = 10`, the first 10 characters of the infinite string would be `abcacabcac`, and the number of occurrences of `\\"a\\"` is 4. Write a function `count_a_in_infinite_string(s, n)` that calculates and returns the number of occurrences of the character `\\"a\\"` in the first n characters of the infinite string. -----Input----- The input consists of: - A string `s` (1 ≤ |s| ≤ 100), which consists of lowercase English letters. - An integer `n` (1 ≤ n ≤ 10^12). -----Output----- The function should return an integer representing the number of occurrences of the character `\\"a\\"` in the first n characters of the infinite string. -----Example----- Input s = \\"abcac\\" n = 10 Output 4 -----Example Explanation----- For the string `s = \\"abcac\\"` and `n = 10`, the infinite string formed is `\\"abcacabcac\\"`, in which the character `\\"a\\"` appears 4 times.","solution":"def count_a_in_infinite_string(s, n): Calculate the number of occurrences of the character \\"a\\" in the first n characters of the infinite string formed by repeating string s. # Calculate the number of \'a\' in the given string count_in_s = s.count(\'a\') length_of_s = len(s) # Determine how many times the string s repeats in the first n characters full_repeats = n // length_of_s # Determine the remaining characters remaining_chars = n % length_of_s # Calculate total \'a\'s in the full repeats total_count = full_repeats * count_in_s # Add the \'a\'s in the remaining part total_count += s[:remaining_chars].count(\'a\') return total_count"},{"question":"You are given an array a of n integers. The elements of the array can be either positive or negative. You need to rearrange the array such that all negative numbers appear before the positive ones while maintaining the relative order of elements in each group. For example, if n = 5, a = [-1, 2, -3, 4, -5], then the desired arrangement is [-1, -3, -5, 2, 4]. Your goal is to implement a function that performs this operation. Note that you are not allowed to use any additional data structures and should achieve this with an in-place algorithm. Function Signature: ```python def rearrange_array(a: List[int]) -> List[int]: ``` -----Input----- - A list of integers, a, where 1 leq n leq 10^5 and -10^9 leq a[i] leq 10^9. -----Output----- - A list of integers which is the rearranged array where all negative numbers appear before positive numbers, maintaining their order of occurrence. -----Example----- Input ```python [-1, 2, -3, 4, -5] ``` Output ```python [-1, -3, -5, 2, 4] ``` Input ```python [1, -1, 3, -2, 5, -3] ``` Output ```python [-1, -2, -3, 1, 3, 5] ``` -----Note----- In the first example, -1, -3, and -5 are the negative numbers that appear before positive numbers 2 and 4. The order within the negative and positive groups is preserved.","solution":"from typing import List def rearrange_array(a: List[int]) -> List[int]: Rearrange the given array in-place such that all negative numbers appear before positive numbers while maintaining the relative order of elements in each group. n = len(a) neg = 0 # Pointer for storing the position to place the next negative number for i in range(n): if a[i] < 0: a.insert(neg, a.pop(i)) neg += 1 return a"},{"question":"# Introduction You are given an array of unique integers where each integer is between 1 and 100 (inclusive), and the length of the array is less than 100. The integers represent the scores of participants in a competition. # Task: Write a function that takes this array as input and returns the highest score, the second highest score, and the sum of the top two scores.","solution":"def top_two_scores(scores): Returns the highest score, the second highest score, and the sum of the top two scores. Parameters: scores (list): An array of unique integers representing scores. Returns: tuple: A tuple containing the highest score, the second highest score, and the sum of the top two scores. if len(scores) < 2: raise ValueError(\\"The array must contain at least two scores.\\") # Finding the two highest scores first, second = 0, 0 for score in scores: if score > first: first, second = score, first elif score > second: second = score return first, second, first + second"},{"question":"You are organizing a movie night with friends and want to write a program to help you manage the guest list. Each friend can either accept, decline, or cancel their RSVP. You need to keep track of who has accepted, and you want to know how many guests you are expecting at any given time. Input The first line contains an integer `n` representing the number of commands. Each subsequent line contains one of three types of commands: - \\"ACCEPT <name>\\" - This means the person named <name> has accepted the invitation. - \\"DECLINE <name>\\" - This means the person named <name> has declined the invitation (if they had previously accepted, they should be removed from the list). - \\"CANCEL <name>\\" - This means the person named <name> has cancelled their previous acceptance (if they had previously accepted, they should be removed from the list). Output You should output the number of guests who have accepted the invitation after processing all commands. Example Input: 7 ACCEPT Alice ACCEPT Bob DECLINE Alice CANCEL Bob ACCEPT Charlie ACCEPT Alice CANCEL Charlie Output: 1","solution":"def manage_guest_list(commands): accepted_guests = set() for command in commands: action, name = command.split(\' \') if action == \\"ACCEPT\\": accepted_guests.add(name) elif action == \\"DECLINE\\" or action == \\"CANCEL\\": accepted_guests.discard(name) return len(accepted_guests)"},{"question":"You are given an array of integers of length N. Find the length of the longest subarray which has the same value. Constraints * 1 leq N leq 100,000 * The array elements can be any integer (positive, negative, or zero). Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the length of the longest subarray with identical values. Examples Input 7 1 1 2 2 2 3 3 Output 3 Input 5 5 5 5 5 5 Output 5 Input 6 1 2 3 3 2 1 Output 2 Input 8 4 -4 4 4 -4 -4 -4 4 Output 3","solution":"def longest_subarray_with_same_value(arr): Returns the length of the longest subarray with the same value. Parameters: arr (list): A list of integers. Returns: int: The length of the longest subarray with the same value. if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 return max(max_len, current_len)"},{"question":"Given a string S consisting of lowercase English letters and an integer K, your task is to determine if there exists a substring of length K that contains at least K/2 different characters. If such a substring exists, print \\"Yes\\"; otherwise, print \\"No\\". -----Constraints----- - S is a non-empty string and has at most 10,000 characters. - K is an integer between 1 and the length of S (inclusive). -----Input----- Input is given from Standard Input in the following format: S K -----Output----- Print \\"Yes\\" if there is a substring of length K that contains at least K/2 different characters; otherwise, print \\"No\\". -----Sample Input----- abacab 4 -----Sample Output----- Yes In the string \\"abacab\\", the substring \\"abac\\" (starting at index 0) has 3 different characters (\'a\', \'b\', \'c\'), which is more than 4/2 = 2. So the answer is Yes.","solution":"def does_substring_exist(S, K): Checks if there exists a substring of length K in S that contains at least K/2 different characters. Parameters: S (str): The input string consisting of lowercase English letters. K (int): The length of the substring to check. Returns: str: \\"Yes\\" if there exists such a substring, otherwise \\"No\\". n = len(S) for i in range(n - K + 1): substring = S[i:i+K] unique_chars = set(substring) if len(unique_chars) >= K // 2: return \\"Yes\\" return \\"No\\""},{"question":"Given a matrix of integers with R rows and C columns, your task is to find the largest square sub-matrix that contains only 1s. Return the area of this sub-matrix. Example 1: Input: R = 4, C = 5 matrix = [ [0, 1, 1, 0, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1] ] Output: 9 Explanation: The largest square sub-matrix with all 1s is of size 3x3. Example 2: Input: R = 2, C = 2 matrix = [ [1, 1], [1, 1] ] Output: 4 Explanation: The largest square sub-matrix with all 1s is of size 2x2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largest1sSquare() which takes the matrix, and its dimensions R and C as input parameters and returns the area of the largest square sub-matrix containing only 1s. Expected Time Complexity: O(R * C) Expected Auxiliary Space: O(R * C) Constraints: 1 ≤ R, C ≤ 1000 matrix[i][j] is either 0 or 1","solution":"def largest1sSquare(matrix, R, C): if not matrix or R == 0 or C == 0: return 0 # Initialize a DP table with the same dimensions as the matrix dp = [[0] * C for _ in range(R)] max_side = 0 # To keep track of the maximum side length of the square found for i in range(R): for j in range(C): if i == 0 or j == 0: # First row or first column dp[i][j] = matrix[i][j] elif matrix[i][j] == 1: # Cell becomes part of a 1\'s square if all three adjacent cells are also part of 1\'s square dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 0 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"Hedgie the hedgehog is back with another interesting problem! This time he caught sight of a unique sequence of numbers and decided to analyze it deeply. Given an array of integers, Hedgie wants to know if there exists a contiguous subarray (a subarray created by taking consecutive elements from the array) whose sum is zero. Can you help him determine whether such a subarray exists? -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in Hedgie\'s array. The second line contains n integers a_1, a_2, ..., a_{n} (-10^9 ≤ a_{i} ≤ 10^9) — elements of the array. -----Output----- Print \\"YES\\" (without quotes) if there exists a contiguous subarray whose sum is zero. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 5 4 2 -3 1 6 Output YES Input 4 1 2 3 4 Output NO -----Note----- In the first example, the contiguous subarray with elements [2, -3, 1] sums to zero. In the second example, no contiguous subarray sums to zero.","solution":"def has_zero_sum_subarray(arr): Determines if there exists a contiguous subarray whose sum is zero. :param arr: List of integers :return: \\"YES\\" if such a subarray exists, otherwise \\"NO\\" current_sum = 0 sum_set = set() # Iterate through all elements in the array for num in arr: # Add current number to the cumulative sum current_sum += num # Check if cumulative sum is zero or has been seen before if current_sum == 0 or current_sum in sum_set: return \\"YES\\" # Add the cumulative sum to the set sum_set.add(current_sum) return \\"NO\\""},{"question":"You are participating in a logic puzzle contest and you\'ve come across a particularly tricky problem related to sequences. The problem involves finding the longest subsequence within a given sequence that satisfies a specific condition. The condition is that for any two elements in the subsequence, their sum must be even. In other words, for a subsequence to be valid, the sum of any two elements within the subsequence should always be even. Given a sequence of integers, you need to determine the length of the longest subsequence that meets this condition, and this subsequence must be a subsequence of the original list but not necessarily contiguous. -----Input----- The first line contains an integer n (1 le n le 10^5) — the length of the sequence. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the sequence. -----Output----- Output a single integer — the length of the longest subsequence with the sum of any two of its elements being even. -----Examples----- Input 5 1 2 3 4 5 Output 3 Input 6 1 3 5 2 4 6 Output 4 -----Note----- For the first example, the longest subsequence with the sum being even is [2, 4]. Both 4 and 2 are even numbers, so the longest subsequence length is 3 (which is not correct in this explanation, the correct output is 2). For the second example, one possible longest subsequence is [1, 3, 5], with length 3. This outcome is derived from the fact that all numbers in the subsequence must either be all odd or all even numbers. The longest subsequence length is 4 (again, correct outcome but explained wrongly here).","solution":"def longest_even_sum_subsequence(n, sequence): Returns the length of the longest subsequence where the sum of any two elements is even. # Count the number of even and odd numbers in the sequence evens = sum(1 for x in sequence if x % 2 == 0) odds = n - evens # The longest valid subsequence will be the larger of the counts of evens or odds return max(evens, odds)"},{"question":"Given an integer N, compute the sum of all even numbers from 1 to N inclusive. -----Constraints----- - 1 leq N leq 10^6 - N is an integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the sum of all even numbers from 1 to N inclusive. -----Sample Input----- 10 -----Sample Output----- 30","solution":"def sum_even_numbers(N): Returns the sum of all even numbers from 1 to N inclusive. sum_even = 0 for i in range(2, N + 1, 2): sum_even += i return sum_even"},{"question":"Alice is planning to create a new pattern with stars and spaces for a decoration piece. The pattern she wants consists of multiple lines, where each line contains stars and spaces arranged in a specific order: - The first line contains one star followed by spaces till the end of the line. - The second line contains two stars followed by spaces till the end of the line. - The third line contains three stars followed by spaces till the end of the line. This continues until the N-th line, which contains N stars followed by spaces till the end of the line. The length of each line is equal to N. For example, if N = 5, the output should be: ``` * ** *** **** ***** ``` Your task is to write a program that generates this pattern for a given positive integer N. -----Constraints----- - N is an integer. - 1 ≤ N ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the pattern as described above, with each line containing stars followed by spaces till the end of the line. -----Sample Input----- 4 -----Sample Output----- ``` * ** *** **** ```","solution":"def generate_pattern(N): result = [] for i in range(1, N+1): line = \'*\' * i + \' \' * (N - i) result.append(line) return \'n\'.join(result)"},{"question":"In a bustling city grid, there are multiple intersections forming a grid layout, where each intersection is connected to its adjacent intersections. The grid can be considered as a graph with intersections as vertices and the streets connecting them as edges. To manage traffic efficiently, the city planners want to introduce \\"express streets\\" which connect non-adjacent intersections directly. These express streets should facilitate faster travel and reduce the distance between specific pairs of intersections significantly. The city planner defines the direct city distance between two intersections as the number of street segments (edges) in the shortest path without using any express streets. The express distance, however, is the number of segments in the shortest path using express streets if necessary. Your task is to determine the minimum number of express streets required to ensure that the express distance between any two intersections does not exceed a given threshold distance k. Input The first line of the input contains three integers n, m, and k (2 ≤ n, m ≤ 100, 1 ≤ k ≤ n + m - 2), representing the dimensions of the grid (n intersections in each row and m intersections in each column) and the maximum allowed express distance between any two intersections. Output The first line of the output should contain a number t representing the number of express streets that were added. Each of the following t lines should contain four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m, (x1, y1) ≠ (x2, y2)), indicating that an express street is added between intersections (x1, y1) and (x2, y2). Example Input: 5 4 3 Output: 4 1 1 3 3 2 2 4 4 1 4 4 1 3 1 5 4 Note In the example grid of size 5x4, the express distance between any pair of intersections can be reduced to a maximum of 3 by adding 4 express streets. These express streets connect non-adjacent intersections directly, thereby reducing the overall travel distance.","solution":"def calculate_express_streets(n, m, k): Returns the number of express streets and the coordinates of the intersections they connect. streets = [] # For simplicity, we will create express streets in a zigzag pattern # to ensure that express distance is minimized for i in range(1, min(n, m) + 1): if i + 2 <= n and i + 2 <= m: x1, y1, x2, y2 = i, i, i + 2, i + 2 streets.append((x1, y1, x2, y2)) if i + 2 <= n and m - i + 1 >= 1: x1, y1, x2, y2 = i, m - i + 1, i + 2, m - i + 3 - 2 streets.append((x1, y1, x2, y2)) if n - i + 1 >= 1 and i + 2 <= m: x1, y1, x2, y2 = n - i + 1, i, n - i - 1 + 1, i + 2 streets.append((x1, y1, x2, y2)) # Ensure the number of streets is within maximum capacity t = min(len(streets), k) return t, streets[:t] # Read input def main(): import sys input = sys.stdin.read data = input().strip().split() n, m, k = int(data[0]), int(data[1]), int(data[2]) t, streets = calculate_express_streets(n, m, k) # Output the result print(t) for street in streets: print(f\\"{street[0]} {street[1]} {street[2]} {street[3]}\\") if __name__ == \\"__main__\\": main()"},{"question":"A company is organizing a marathon, and runners are assigned bib numbers from 1 to n. To ensure fair distribution, the bib numbers are shuffled randomly. However, due to an error, some numbers might be assigned multiple times and some not at all. You are required to identify any duplicate bib numbers and any missing bib numbers. -----Input----- - The first line of the input contains an integer n— the total number of bib numbers. - The second line contains n integers, representing the assigned bib numbers. -----Output----- - Print a list of duplicate numbers in ascending order. - Print a list of missing numbers in ascending order. -----Constraints----- - 1 leq n leq 100 -----Sample Input 1:----- 5 1 2 2 4 5 -----Sample Input 2:----- 7 1 3 4 4 5 7 7 -----Sample Input 3:----- 3 2 2 2 -----Sample Output 1:----- [2] [3] -----Sample Output 2:----- [4, 7] [2, 6] -----Sample Output 3:----- [2] [1, 3]","solution":"def find_duplicates_and_missing(n, bib_numbers): Identify duplicates and missing bib numbers. :param n: Integer, total number of bib numbers supposed to be assigned. :param bib_numbers: List of integers, the assigned bib numbers. :return: A tuple containing two lists: - list of duplicates in ascending order - list of missing numbers in ascending order from collections import Counter # Count occurrences of each bib number counter = Counter(bib_numbers) duplicates = [] missing = [] # Check each number from 1 to n for num in range(1, n+1): if counter[num] > 1: duplicates.append(num) if counter[num] == 0: missing.append(num) return sorted(duplicates), sorted(missing) # Example function calls (These should not be included in the final submission): # print(find_duplicates_and_missing(5, [1, 2, 2, 4, 5])) # Expected output: ([2], [3]) # print(find_duplicates_and_missing(7, [1, 3, 4, 4, 5, 7, 7])) # Expected output: ([4, 7], [2, 6]) # print(find_duplicates_and_missing(3, [2, 2, 2])) # Expected output: ([2], [1, 3])"},{"question":"Chef is learning about sequences and needs help with one of his experiments. He has a sequence of positive integers and wants to calculate the \'uniqueness value\' of the sequence. The uniqueness value is defined as the number of unique elements in the sequence. Chef wants your help to calculate this value for multiple sequences. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of elements in the sequence. The second line of each test case contains N space-separated integers representing the sequence. ------ Output ------ For each test case, output a single line containing the uniqueness value of the corresponding sequence. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Ai ≤ 10^6 for each valid i ----- Sample Input 1 ------ 3 5 1 2 2 3 4 6 1 1 1 1 1 1 4 7 8 9 10 ----- Sample Output 1 ------ 4 1 4 ----- Explanation 1 ------ In the first test case, the unique elements are [1, 2, 3, 4], so the uniqueness value is 4. In the second test case, the entire sequence has only one unique element [1], so the uniqueness value is 1. In the third test case, all elements are unique, so the uniqueness value is 4.","solution":"def uniqueness_value(T, test_cases): Computes the uniqueness value for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains two elements, an integer N and a list of N integers representing the sequence. Returns: list of int: A list containing the uniqueness value for each test case. results = [] for N, sequence in test_cases: unique_elements = set(sequence) results.append(len(unique_elements)) return results"},{"question":"You have been assigned a task to analyze a social network where users can follow each other. You are given a list of users\' follow relationships and need to determine the influence score of each user. The influence score of a user is defined as the number of unique users who follow that user, directly or indirectly. # Input: - The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of follow relationships. - The next `n` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ 100,000) indicating that user `u` follows user `v`. # Output: - For each user from 1 to the largest user ID in the input, print a single line with the user\'s ID followed by their influence score. # Example: Input: ``` 5 1 2 2 3 3 4 4 5 1 3 ``` Output: ``` 1 0 2 1 3 2 4 3 5 4 ``` # Note: In the example given: - User 1 has an influence score of 0 as no one follows them. - User 2 is followed by user 1, so the influence score is 1. - User 3 is followed directly by user 2 and indirectly by user 1 due to user 1 following user 2, so the influence score is 2. - User 4 is followed directly by user 3, indirectly by user 2, and indirectly by user 1, hence the influence score is 3. - User 5 is followed directly by user 4, indirectly by users 3, 2, and 1, thus the influence score is 4. In this problem, you\'re required to find the total number of unique followers, taking into account indirect followers, for each user ID mentioned in the follow relationships given.","solution":"from collections import defaultdict, deque def find_influence_score(n, follows): graph = defaultdict(list) reverse_graph = defaultdict(list) users = set() for u, v in follows: graph[u].append(v) reverse_graph[v].append(u) users.add(u) users.add(v) max_user_id = max(users) influence_scores = {user: 0 for user in users} def bfs(start_user): visited = set() queue = deque([start_user]) visited.add(start_user) while queue: current = queue.popleft() for follower in reverse_graph[current]: if follower not in visited: visited.add(follower) queue.append(follower) influence_scores[start_user] += 1 for user in range(1, max_user_id + 1): if user in reverse_graph: bfs(user) return [(user, influence_scores[user]) for user in range(1, max_user_id + 1)] # Example usage: # n = 5 # follows = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 3)] # result = find_influence_score(n, follows) # for r in result: # print(f\'{r[0]} {r[1]}\')"},{"question":"Beroffice text editor also includes a feature for fixing consecutive repeated words in a sentence. This feature aims to remove any repeated words that appear consecutively and leave only a single instance of each repeated word. For example: * The sentence \\"this is is a test test sentence\\" should be corrected to \\"this is a test sentence\\". * The sentence \\"hello world world world\\" should be corrected to \\"hello world\\". Write a program to implement this feature of Beroffice text editor, which removes consecutive repeated words from the input sentence. Input The only line contains a non-empty string consisting of small English letters and spaces. The length of the string is between 1 and 3000 characters. Output Print the corrected sentence with all consecutive repeated words removed. Examples Input this is is a test test sentence Output this is a test sentence Input hello world world world Output hello world Input coding coding assessments are fun fun fun Output coding assessments are fun","solution":"def remove_consecutive_repeated_words(sentence): Removes consecutive repeated words from the given sentence. words = sentence.split() result = [] for word in words: if not result or result[-1] != word: result.append(word) return \' \'.join(result)"},{"question":"Sophie is a wildlife photographer, and she wants to capture images of a rare species of bird that nest in a particular type of tree. She has discovered that these trees are always part of a unique type of forest spread known as teardrop forests. A teardrop forest can be represented as a binary tree where each node contains an integer height value. The height of a teardrop forest is defined as the longest path from the root to a leaf. Sophie needs your help to determine the height of the teardrop forest. You need to write an algorithm that calculates the height of a binary tree given its node values in level order. -----Input----- - First line contains an integer T denoting the number of test cases. - For each test case, - The second line contains an integer N denoting the number of nodes in the tree. - The third line contains N integers representing the values of tree nodes in level order, where \'-1\' denotes a null node. -----Output----- - For each test case, output a single integer representing the height of the teardrop forest. -----Constraints----- - 1 ≤ T ≤ 100 - 0 ≤ N ≤ 1000 - -1 ≤ node value ≤ 109 -----Example----- Input: 2 9 1 2 3 -1 -1 4 5 -1 -1 -1 -1 6 7 7 1 2 3 -1 4 -1 5 Output: 4 3 -----Explanation----- Example case 1: The binary tree represented in level order [1, 2, 3, -1, -1, 4, 5, -1, -1, -1, -1, 6, 7] looks like this: 1 / 2 3 / 4 5 / / 6 7 The height of this tree is 4 (1->3->4->6 or 1->3->4->7). Example case 2: The binary tree represented in level order [1, 2, 3, -1, 4, -1, 5] looks like this: 1 / 2 3 4 5 The height of this tree is 3 (1->2->4 or 1->3->5).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(level_order): if not level_order or level_order[0] == -1: return None root = TreeNode(level_order[0]) queue = [(root, 0)] front = 0 while front < len(queue): node, index = queue[front] front += 1 left_index = 2 * index + 1 right_index = 2 * index + 2 if left_index < len(level_order) and level_order[left_index] != -1: node.left = TreeNode(level_order[left_index]) queue.append((node.left, left_index)) if right_index < len(level_order) and level_order[right_index] != -1: node.right = TreeNode(level_order[right_index]) queue.append((node.right, right_index)) return root def tree_height(root): if not root: return 0 left_height = tree_height(root.left) right_height = tree_height(root.right) return 1 + max(left_height, right_height) def teardrop_forest_height(test_cases): results = [] for nodes in test_cases: if not nodes: results.append(0) continue root = build_tree(nodes) height = tree_height(root) results.append(height) return results # Helper function to process input and call main function def main(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) if N == 0: test_cases.append([]) else: nodes = list(map(int, input_lines[index + 1].split())) test_cases.append(nodes) index += 2 return teardrop_forest_height(test_cases)"},{"question":"You are given an array `scores` where `scores[i]` represents the score of the ith athlete in a competition. An athlete is considered a standout athlete if their score is strictly greater than the average score of all athletes. Your task is to return the count of standout athletes. Example 1: Input: scores = [10, 15, 20, 25, 30] Output: 2 Explanation: The average score is 20, and the athletes with scores 25 and 30 are standout athletes. Example 2: Input: scores = [5, 5, 5, 5, 5] Output: 0 Explanation: The average score is 5, and there are no standout athletes. Constraints: * 1 <= scores.length <= 10000 * 0 <= scores[i] <= 100","solution":"def count_standout_athletes(scores): Counts the number of standout athletes in the given list of scores. :param scores: List of integers representing the scores of athletes. :return: Integer count of standout athletes. if not scores: return 0 average_score = sum(scores) / len(scores) standout_count = 0 for score in scores: if score > average_score: standout_count += 1 return standout_count"},{"question":"Create a function named `duplicateZeros` that takes an array of integers `arr` as an input. Your function should duplicate each occurrence of zero, shifting the remaining elements to the right. Note that elements beyond the length of the original array are not written. Modify the input array in-place and do not return anything. For example, the following code will demonstrate how the function works: ``` let arr = [1,0,2,3,0,4,5,0]; duplicateZeros(arr); console.log(arr); // Output: [1,0,0,2,3,0,0,4] let arr2 = [0,0,0,0]; duplicateZeros(arr2); console.log(arr2); // Output: [0,0,0,0] ```","solution":"def duplicateZeros(arr): Duplicates each occurrence of zero in the input list \'arr\', shifting the remaining elements to the right. Modifies the list in-place. n = len(arr) zeros_to_duplicate = arr.count(0) total_length = n + zeros_to_duplicate # This is the effective length of the array including duplicated zeros for i in range(n - 1, -1, -1): # We fill from the back to avoid overwriting elements if i + zeros_to_duplicate < n: arr[i + zeros_to_duplicate] = arr[i] if arr[i] == 0: zeros_to_duplicate -= 1 if i + zeros_to_duplicate < n: arr[i + zeros_to_duplicate] = 0"},{"question":"# Cube Faces Reconstruction Leonardo is studying ways to reconstruct the faces of a cube using square tiles. Each tile is a square with an integer side length. He wants to create a valid cube using the tiles he has collected. Each tile must be used exactly as it is, without cutting or modifying. He is planning to utilize exactly six tiles to represent the faces of a cube. Leonardo found that with the tiles he has, forming a valid cube might not be possible due to a mismatch in side lengths. With each side of a cube being equal, Leonardo needs your help to determine if it is possible to form a valid cube and, if not, what is the minimum length of the new square tile he should acquire to make it possible. # Input - The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. - Each of the following `t` lines contains six integers `s1, s2, s3, s4, s5, s6` (1 ≤ si ≤ 10^9) — the side lengths of the square tiles for each test case. # Output For each test case, print \\"VALID\\" if it is possible to form a valid cube using the six tiles provided, otherwise print the minimum side length of the additional square tile he should acquire to make it possible to form the cube. # Examples Input ``` 2 4 4 4 4 4 4 3 3 3 5 3 3 ``` Output ``` VALID 5 ``` # Note In the first example, all six tiles have the same side length `4`, which matches the requirement for a cube, hence the output is \\"VALID\\". In the second example, most tiles have the side length of `3` except one which is `5`, therefore Leonardo needs to acquire one more tile of side length `5` to form the valid cube, resulting in the output `5`.","solution":"def cube_faces_reconstruct(t, test_cases): results = [] for case in test_cases: side_lengths = sorted(case) # To form a cube, all six sides must be the same. if len(set(side_lengths)) == 1: results.append(\\"VALID\\") else: # We need an additional square with the side of the largest given square results.append(side_lengths[-1]) return results"},{"question":"Create a function that takes a list of 7 unique integers representing daily sales for a week. The function should return a list of the sales in ascending order, but with the highest sale of the week marked with an asterisk (*) at the end of the number. Constraints: - Each sale (integer) will be between 0 and 50,000. - You can assume the list contains exactly 7 unique integers. Input: A list of 7 unique integers representing sales for each day of the week. Output: A list of 7 integers in ascending order, with the highest sale marked with an asterisk. Examples: Input: [3050, 7498, 1234, 9876, 4321, 5678, 8765] Output: [1234, 3050, 4321, 5678, 7498, 8765, 9876*] Input: [12345, 23456, 34567, 45678, 56789, 67890, 78901] Output: [12345, 23456, 34567, 45678, 56789, 67890, 78901*]","solution":"def mark_highest_sale(sales): Takes a list of 7 unique integers representing daily sales for a week. Returns a list of the sales in ascending order with the highest sale marked with an asterisk. # Find the highest sale highest_sale = max(sales) # Sort the sales in ascending order sorted_sales = sorted(sales) # Create the result list, marking the highest sale with an asterisk result = [] for sale in sorted_sales: if sale == highest_sale: result.append(f\\"{sale}*\\") else: result.append(sale) return result"},{"question":"You are given a rectangular chocolate bar consisting of R rows and C columns, where each cell in the bar has a value representing the sweetness level of that piece. You need to split the chocolate bar into k rectangles and make sure that each resulting rectangle contains the same total sweetness. -----Constraints----- - 1 leq R, C leq 50 - 1 leq k leq R times C - 1 leq sweetness_{i,j} leq 10^3 -----Input----- Input is given from Standard Input in the following format: R C k sweetness_{1,1} sweetness_{1,2} ... sweetness_{1,C} sweetness_{2,1} sweetness_{2,2} ... sweetness_{2,C} : sweetness_{R,1} sweetness_{R,2} ... sweetness_{R,C} -----Output----- Print \\"Yes\\" if it is possible to split the chocolate bar into k rectangles each having the same total sweetness. Otherwise, print \\"No\\". -----Sample Input----- 2 2 2 1 3 2 2 -----Sample Output----- Yes Given example splits into two parts: 1+3 and 2+2: each have a total sweetness of 4.","solution":"def can_split_chocolate(R, C, k, sweetness): Determine if it\'s possible to split the chocolate bar into k rectangles with equal sweetness. total_sweetness = sum(map(sum, sweetness)) # If total sweetness is not divisible by k, then it\'s not possible to have k parts with equal sweetness if total_sweetness % k != 0: return \\"No\\" # Target sweetness for each part target_sweetness = total_sweetness / k def can_partition(starting_index, remaining_k, current_sum=0): if remaining_k == 0: return current_sum == 0 if current_sum > target_sweetness: return False if current_sum == target_sweetness: return can_partition(0, remaining_k - 1) for i in range(starting_index, R * C): row, col = divmod(i, C) if can_partition(i + 1, remaining_k, current_sum + sweetness[row][col]): return True return False if can_partition(0, k): return \\"Yes\\" else: return \\"No\\" # Example usage: # R, C, k = 2, 2, 2 # sweetness = [ # [1, 3], # [2, 2] # ] # Output: \\"Yes\\""},{"question":"Read problems statements in Mandarin Chinese and Russian. Alex loves playing a game in which he needs to construct paths through a grid from a given starting point to a specified endpoint. In this grid, some cells are blocked, meaning Alex cannot pass through them. The grid is represented as a 2D matrix where 0 denotes a free cell and 1 denotes a blocked cell. Alex can move up, down, left, or right but cannot move diagonally. Given the grid dimensions and the positions of the blocked cells, determine the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If there is no valid path, return 0. Since the number of paths can be large, return the result modulo 1000000007. ------ Input ------ First line of input contains an integer T denoting number of test cases. For each test case: - The first line contains two integers m and n, indicating the number of rows and columns in the grid. - The next line contains an integer k, the number of blocked cells. - Each of the next k lines contains two integers r and c, representing the row and column indices (1-based) of a blocked cell. ------ Output ------ For each test case, print a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner modulo 1000000007. ------ Constraints ------ Subtask #1: 10 points 1 ≤ T ≤ 20 1 ≤ m, n ≤ 10^3 0 ≤ k ≤ m times n Subtask #2: 40 points 1 ≤ T ≤ 10 1 ≤ m, n ≤ 10^4 0 ≤ k ≤ m times n Subtask #3: 50 points 1 ≤ T ≤ 5 1 ≤ m, n ≤ 10^5 0 ≤ k ≤ m times n ----- Sample Input 1 ------ 2 3 3 1 2 2 4 5 4 1 2 2 1 3 3 4 2 ----- Sample Output 1 ------ 2 0 ----- Explanation 1 ------ For the first sample case, the distinct paths are: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) For the second sample case, all possible paths are blocked by cells (1,2), (2,1), (3,3), and (4,2). So, the number of distinct paths = 0.","solution":"MODULO = 1000000007 def num_paths(m, n, blocked_cells): if (0, 0) in blocked_cells or (m-1, n-1) in blocked_cells: return 0 dp = [[0] * n for _ in range(m)] if (0, 0) not in blocked_cells: dp[0][0] = 1 for i in range(m): for j in range(n): if (i, j) in blocked_cells: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MODULO return dp[m-1][n-1] def solve(test_cases): results = [] for m, n, blocked_cells in test_cases: blocked_cells_set = set((r-1, c-1) for r, c in blocked_cells) results.append(num_paths(m, n, blocked_cells_set)) return results"},{"question":"Create a function that takes a list of integers and returns the length of the longest subsequence where the absolute difference between any two consecutive elements is 1. Input - A single integer `n` (1 ≤ n ≤ 1000) – the size of the list. - A list of `n` integers (1 ≤ list[i] ≤ 100). Output - A single integer representing the length of the longest subsequence where any two consecutive elements differ by 1. Example Input 6 1 2 2 3 3 4 Output 4 Explanation In the given example, [1, 2, 2, 3] is one of the subsequences where the absolute difference between any two consecutive elements is 1. The length of this subsequence is 4, which is the longest possible subsequence for the given list.","solution":"def longest_subsequence_with_diff_one(arr): Takes a list of integers and returns the length of the longest subsequence where the absolute difference between any two consecutive elements is 1. Parameters: arr (List[int]): The list of integers. Returns: int: The length of the longest subsequence. n = len(arr) if n == 0: return 0 # Initialize longest sequence length array longest_seq_len = [1] * n # Compute lengths of longest subsequences for i in range(1, n): for j in range(i): if abs(arr[i] - arr[j]) == 1: longest_seq_len[i] = max(longest_seq_len[i], longest_seq_len[j] + 1) return max(longest_seq_len)"},{"question":"Gobbler loves strings. Recently, Gobbler discovered a string `s` of length `n` and decided to perform `q` operations on it. Each operation is of the form \\"Find the lexicographically smallest substring of length `k` within the substring of `s` starting from the `l`-th to the `r`-th positions, inclusive\\". Gobbler needs your help to answer these queries efficiently. A string `a` is said to be lexicographically smaller than string `b` if it is smaller in length than `b`, or if there exists a position `i` such that `a[i] < b[i]` and for all positions `j < i`, `a[j] = b[j]`. -----Input----- The first line contains two integers `n` and `q` (1 le n, q le 2 cdot 10^5) — the length of the string `s` and the number of queries. The next line contains a string `s` of length `n` consisting of lowercase English letters. The next `q` lines describe queries. The `i`-th of these lines contains three integers `l_i`, `r_i`, `k_i` (1 le l_i le r_i le n and 1 le k_i le r_i - l_i + 1), meaning that the `i`-th query is about finding the lexicographically smallest substring of length `k_i` within the substring of `s` from the `l_i`-th to the `r_i`-th positions, inclusive. -----Output----- For each query, print the lexicographically smallest substring of length `k_i` within the specified range on a new line. -----Example----- Input 10 3 ababacbaba 1 10 3 3 8 2 1 5 4 Output aba ab abab -----Note----- In the first example, the queries and their results are as follows: 1. The segment from the `1`-st to the `10`-th positions is \\"ababacbaba\\". The lexicographically smallest substring of length `3` is \\"aba\\". 2. The segment from the `3`-rd to the `8`-th positions is \\"abacba\\". The lexicographically smallest substring of length `2` is \\"ab\\". 3. The segment from the `1`-st to the `5`-th positions is \\"ababa\\". The lexicographically smallest substring of length `4` is \\"abab\\".","solution":"def find_smallest_substring(n, q, s, queries): results = [] for l, r, k in queries: sub_s = s[l-1:r] smallest = sub_s[:k] for i in range(1, len(sub_s) - k + 1): current = sub_s[i:i+k] if current < smallest: smallest = current results.append(smallest) return results"},{"question":"You are given a grid with N rows and M columns, and each cell in this grid contains a number. You need to perform Q operations on this grid. Each operation can either update the number in a specific cell or query the sum of numbers in a rectangular subgrid. There are two types of operations: 1. Update operation (`update x y v`): Sets the cell at (x, y) to the value v. 2. Query operation (`query x1 y1 x2 y2`): Returns the sum of numbers in the rectangular subgrid from (x1, y1) to (x2, y2), inclusive. For both operations, coordinates are 1-based. # Input - The first line contains three integers N, M, and Q (1 ≤ N, M ≤ 1000, 1 ≤ Q ≤ 10^5) – the number of rows, columns, and operations respectively. - The next N lines each contain M integers, representing the initial grid. - The next Q lines each describe an operation in one of the following formats: - `update x y v` (1 ≤ x ≤ N, 1 ≤ y ≤ M, -10^9 ≤ v ≤ 10^9) - `query x1 y1 x2 y2` (1 ≤ x1 ≤ x2 ≤ N, 1 ≤ y1 ≤ y2 ≤ M) # Output For each query operation, output the sum of numbers in the specified subgrid. # Example Input ``` 3 3 5 1 2 3 4 5 6 7 8 9 query 1 1 2 2 update 2 2 10 query 1 1 2 2 query 1 1 3 3 update 3 3 0 query 1 1 3 3 ``` Output ``` 12 17 45 36 ``` # Explanation - The initial grid: ``` 1 2 3 4 5 6 7 8 9 ``` - After `query 1 1 2 2`: The sum of the subgrid from (1,1) to (2,2) is 1 + 2 + 4 + 5 = 12. - After `update 2 2 10`: The grid becomes: ``` 1 2 3 4 10 6 7 8 9 ``` - After `query 1 1 2 2`: The sum of the subgrid from (1,1) to (2,2) is 1 + 2 + 4 + 10 = 17. - After `query 1 1 3 3`: The sum of the entire grid is 1 + 2 + 3 + 4 + 10 + 6 + 7 + 8 + 9 = 45. - After `update 3 3 0`: The grid becomes: ``` 1 2 3 4 10 6 7 8 0 ``` - After `query 1 1 3 3`: The sum of the entire grid is 1 + 2 + 3 + 4 + 10 + 6 + 7 + 8 + 0 = 36.","solution":"class Grid: def __init__(self, n, m, grid): self.n = n self.m = m self.grid = grid def update(self, x, y, v): self.grid[x-1][y-1] = v def query(self, x1, y1, x2, y2): total_sum = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total_sum += self.grid[i][j] return total_sum"},{"question":"Given a string S consisting of lowercase alphabets, the task is to determine whether the string can be rearranged in such a way that no two identical characters are adjacent to each other. If possible, return 1, otherwise return 0. Example 1: Input: S = \\"aab\\" Output: 1 Explanation: The string can be rearranged as \\"aba\\". Example 2: Input: S = \\"aaab\\" Output: 0 Explanation: It is not possible to rearrange the string so that no two identical characters are adjacent. Your Task: Since this is a function problem, you don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function canRearrange() that takes string S as a parameter and returns 1 if it is possible to rearrange the string as required, otherwise returns 0. Expected Time Complexity: O(|S| * log |S|). Expected Auxiliary Space: O(|S|). Constraints: 1 ≤ |S| ≤ 10^4","solution":"import heapq from collections import Counter def canRearrange(S): Determine if the string S can be rearranged so that no two identical characters are adjacent. :param S: Input string :return: 1 if it can be rearranged, otherwise 0 # Count the frequency of each character freq = Counter(S) # Create a max heap based on character frequencies max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] # Process the heap to rearrange the characters while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If the previous character still has remaining count, push it back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character with the current one prev_count, prev_char = count + 1, char # Check if the rearranged string\'s length matches the original string\'s length return 1 if len(result) == len(S) else 0"},{"question":"Complete the function ```palindromeCheck``` to determine if a given string is a palindrome. A palindrome is a word that reads the same forwards and backwards, case-insensitive, and ignoring spaces and non-alphanumeric characters. If the input is not a string, return ```false```. Example: ```python palindromeCheck(\\"A man, a plan, a canal, Panama\\") #returns True palindromeCheck(\\"No \'x\' in Nixon\\") #returns True palindromeCheck(\\"Hello, World!\\") #returns False palindromeCheck(12345) #returns False palindromeCheck(\\"Was it a car or a cat I saw?\\") #returns True ```","solution":"import re def palindromeCheck(s): Determines if a given string is a palindrome, ignoring case, spaces, and non-alphanumeric characters. If the input is not a string, returns False. if not isinstance(s, str): return False # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is a palindrome return cleaned == cleaned[::-1]"},{"question":"The city of Graphville is organized in a grid layout composed of n rows and m columns. Each cell in the grid can either be an open area or an obstacle represented respectively by \'.\' or \'#\'. A robot can start at any open cell and can move to adjacent open cells in the north, south, west, or east direction. The robot has a special function that it can use to predict whether the grid has a valid path connecting any two open cells. A path is defined as a sequence of adjacent open cells starting from one cell and ending at another. Write a program to determine if a given grid has a valid path from any open cell to any other open cell. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains exactly m characters (either \'.\' or \'#\') specifying the grid\'s layout. Output Output \\"YES\\" if there is a valid path connecting all open cells, otherwise \\"NO\\". Examples Input 4 5 ..... ..#.. .#. ..... Output YES Input 3 3 .#. .#. .#. Output NO Input 5 5 # #...# #.#.# #...# # Output YES","solution":"def is_valid_path(grid, n, m): from collections import deque def bfs(start): queue = deque([start]) visited = set([start]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return visited open_cells = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'.\'] if not open_cells: return \\"NO\\" visited = bfs(open_cells[0]) return \\"YES\\" if visited == set(open_cells) else \\"NO\\""},{"question":"In a remote village, there is an ancient ritual that the villagers perform to ensure a good harvest. The ritual requires arranging stones in a specific pattern on the ground. The ritual\'s success greatly depends on the amount of time spent arranging the stones properly. The stones are arranged in consecutive rows, with each row having one more stone than the previous row, starting with one stone in the first row. The stones in the i-th row are numbered consecutively starting from 1 up to the number of stones in that row. For example, the 3rd row will have stones numbered 1, 2, and 3. The village chief, Pasha, wants to know the stone number and row number of a stone given its overall position in the pattern when all stones are laid out in this manner. Can you help Pasha determine this? The overall position of a stone can be taken as the total count starting from the first stone in the first row. For instance, the overall position of the 5th stone indicates it\'s the 2nd stone in the 3rd row. # Input - The first line contains an integer `T` denoting the number of test cases. - Each of the next `T` lines contains a single integer `k` denoting the overall position in the pattern. # Output For each test case, print two space-separated integers. The first integer is the row number, and the second integer is the stone number within that row. # Constraints - 1 ≤ T ≤ 10^5 - 1 ≤ k ≤ 10^{10} # Sample Input ``` 3 5 10 12 ``` # Sample Output ``` 3 2 4 4 5 2 ``` # Explanation 1. For `k = 5`, the stone sequence up to 5 positions is: 1; 1, 2; 1, 2, 3. So, the 5th stone is the 2nd stone in the 3rd row. 2. For `k = 10`, the stone sequence up to 10 positions is: 1; 1, 2; 1, 2, 3; 1, 2, 3, 4. So, the 10th stone is the 4th stone in the 4th row. 3. For `k = 12`, the stone sequence up to 12 positions is: 1; 1, 2; 1, 2, 3; 1, 2, 3, 4; 1, 2. So, the 12th stone is the 2nd stone in the 5th row.","solution":"def find_stone_position(k): Given the overall position k, determine the stone\'s row number and position within that row. row = 1 while k > row: k -= row row += 1 return row, k def process_test_cases(test_cases): results = [] for case in test_cases: results.append(find_stone_position(case)) return results"},{"question":"You are given an integer array where the ith element represents the profit/loss of a project undertaken on the ith day. You need to find the length of the longest subarray which has a positive sum. A subarray is defined as a contiguous segment of the array. -----Input----- The first line of the input contains a single integer t (1 le t le 100) – the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) – the number of days. The second line of each test case contains n integers a_1, a_2, dots , a_n (-10^6 le a_i le 10^6) – the profits/losses for each day. -----Output----- For each test case, print a single integer – the length of the longest subarray with a positive sum. If no such subarray exists, print 0. -----Example----- Input 2 8 -1 2 3 -5 4 6 -1 2 5 -3 -2 -1 -4 -5 Output 4 0 -----Note----- In the first test case, the subarray with the positive sum is (4, 6, -1, 2) which has the length 4. In the second test case, all elements are negative and hence there is no subarray with a positive sum.","solution":"def longest_positive_sum_subarray(t, test_cases): Function to determine the length of the longest subarray with a positive sum for each test case. results = [] for i in range(t): n, a = test_cases[i] max_len = 0 current_len = 0 current_sum = 0 for num in a: if current_sum + num > 0: current_sum += num current_len += 1 max_len = max(max_len, current_len) else: current_sum, current_len = 0, 0 results.append(max_len) return results"},{"question":"In the mysterious land of Algorithmsia, there are M magical creatures known for their unique strength properties. These creatures often engage in battles to determine who is the strongest. Given a certain number of creatures, there are specific rules to how a battle takes place and how the strengths are combined afterward. When two creatures with strengths `a` and `b` (where a ≠ b) battle each other, their strengths combine to form a new creature with strength equal to the product of their strengths, i.e., `a*b`. There is a powerful mage in Algorithmsia who can choose any pair of creatures to battle. The mage wants to maximize the collective strength of the remaining creatures after all possible battles. Input: - The first line of input contains an integer M (1 ≤ M ≤ 100), representing the number of magical creatures. - The second line contains M integers separated by spaces, representing the initial strengths of the M creatures. Each strength value is a non-negative integer not exceeding 1000. Output: Print an integer indicating the maximum possible collective strength of the remaining creatures after all possible battles. SAMPLE INPUT 4 2 3 5 7 SAMPLE OUTPUT 210","solution":"def maximize_collective_strength(M, strengths): Maximizes the collective strength of the remaining creatures after all possible battles. Parameters: M (int): Number of creatures. strengths (list): List of integers representing the strengths of the creatures. Returns: int: Maximum possible collective strength after all possible battles. if M == 1: return strengths[0] # Initial sort to always combine pairs that will maximize the product. strengths.sort(reverse=True) while len(strengths) > 1: a = strengths.pop(0) b = strengths.pop(0) new_strength = a * b strengths.append(new_strength) strengths.sort(reverse=True) return strengths[0]"},{"question":"In a distant galaxy, there\'s a game played by n spaceships. Each spaceship has a power level, and the power levels are unique, meaning no two spaceships have the same power level. The game consists of arranging the spaceships in order of their power levels and finding the number of \\"stable pairs.\\" A pair (i, j) is considered stable if the i-th spaceship is weaker than the j-th spaceship, but no spaceship weaker than the i-th spaceship is positioned between them. A sorted permutation p_1, p_2, ldots, p_n of the power levels is given, and the task is to find the number of stable pairs in this permutation. -----Input----- The first line of input contains one integer n (2 leq n leq 14) — the number of spaceships in the game. The second line contains n unique integers, denoting the power levels of the spaceships, sorted in increasing order. -----Output----- Print a single integer — the number of stable pairs in the given permutation. -----Examples----- Input 4 1 2 3 4 Output 6 Input 3 10 20 30 Output 3 -----Note----- In the first test, there are 6 stable pairs: (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4). In the second test, there are 3 stable pairs: (10, 20), (10, 30), (20, 30).","solution":"def count_stable_pairs(n, power_levels): Returns the number of stable pairs in the given permutation of power levels. stable_pairs_count = 0 for i in range(n): for j in range(i + 1, n): stable_pairs_count += 1 return stable_pairs_count"},{"question":"Given an integer array `nums`, you need to find two distinct indices `i` and `j` in the array such that the absolute difference `|nums[i] - nums[j]|` is maximized. -----Input:----- - The first line of the input gives the number of test cases, `T`. - Each test case starts with an integer `n` (the size of the array), followed by `n` space-separated integers representing the array `nums`. -----Output:----- For each test case, output one single integer containing the maximum absolute difference. -----Constraints----- - 1 leq T leq 100 - 2 leq n leq 10^5 - -10^9 leq nums[i] leq 10^9 -----Sample Input:----- 3 4 1 2 3 4 5 -10 -20 5 4 1 2 1000000000 -1000000000 -----Sample Output:----- 3 25 2000000000 -----EXPLANATION:----- - For the first test case, the maximum absolute difference is `|4 - 1| = 3`. - For the second test case, the maximum absolute difference is `|5 - (-20)| = 25`. - For the third test case, the maximum absolute difference is `|1000000000 - (-1000000000)| = 2000000000`.","solution":"def max_absolute_difference(nums): Finds the maximum absolute difference between any two distinct elements in the array. max_num = max(nums) min_num = min(nums) return abs(max_num - min_num) def process_test_cases(T, test_cases): results = [] for i in range(T): n, nums = test_cases[i] results.append(max_absolute_difference(nums)) return results"},{"question":"A secret agent is stuck in a trapped building consisting of a grid of rooms, each represented as an integer in a 2D array. The integer values in the array represent the time in seconds required to bypass the security mechanism in that room. The agent starts at the top-left corner of the grid and must reach the bottom-right corner as quickly as possible. The agent can only move rightward or downward in the grid at each step. Given the layout of the building, write a function to find the minimum time required for the agent to reach the exit, starting from the entrance. For example, given the building layout below, the minimum time required for the agent to reach the exit is 7 if they follow the optimal path RIGHT -> RIGHT -> DOWN -> DOWN. [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] In this example, the agent\'s path will be: 1 -> 3 -> 1 -> 1 -> 1 Write the function with the following signature: def min_travel_time(grid: List[List[int]]) -> int: **Note:** - The time spent moving from one room to another is only the time in the room being entered. - The grid dimensions are not more than 100x100. - All values of time in the grid are positive integers.","solution":"from typing import List def min_travel_time(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Initialize DP table with the same dimensions as grid dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[rows-1][cols-1]"},{"question":"Given two strings, str1 and str2, determine whether str2 can be formed by interleaving characters of str1 with any arbitrary characters (possibly none). In other words, check if you can insert characters into str1 (without reordering str1’s characters) to get str2. Example 1: Input: str1 = \\"abc\\" str2 = \\"aebdc\\" Output: True Explanation: You can insert \'e\' before \'b\' and \'d\' before \'c\' in \\"abc\\" to form \\"aebdc\\". Example 2: Input: str1 = \\"abc\\" str2 = \\"acbd\\" Output: False Explanation: To form \\"acbd\\", you need to reorder \'b\' and \'c\' which is not allowed. Your Task: You don\'t need to read or print anything. Your task is to complete the function canFormByInterleaving() which takes str1 and str2 as input parameters and returns a boolean indicating if str2 can be formed by interleaving str1 with any arbitrary characters. Expected Time Complexity: O(n), where n is the length of str2. Expected Space Complexity: O(1) Constraints: 1 <= len(str1), len(str2) <= 100000 str1 and str2 consist of lowercase English letters only.","solution":"def canFormByInterleaving(str1, str2): Determine if str2 can be formed by interleaving characters of str1 with any arbitrary characters. # Initialize pointers for both strings i, j = 0, 0 # Iterate through str2 with pointer j while i < len(str1) and j < len(str2): if str1[i] == str2[j]: # If characters match, move both pointers i += 1 j += 1 # Always move pointer j in str2 # If we\'ve traversed all characters in str1, return True return i == len(str1)"},{"question":"Masha loves arrays. She defines a \\"special element\\" in an array as the element that appears strictly more than ⌊n/3⌋ times, where n is the size of the array and ⌊x⌋ denotes the floor function. Given an integer array `nums`, your task is to find all the \\"special elements\\" in the array. Write a function `findSpecialElements` that takes an array of integers as input and returns a list of all \\"special elements\\". If there are no \\"special elements\\", return an empty list. ``` Input nums: list of integers Output A list of integers representing all special elements, each element should appear only once in the list. Example Input nums = [3, 2, 3, 5, 2, 2] Output [2] ``` **Constraints:** * The length of the array is at most 10,000. * The integers in the array are within the range [-10^9, 10^9].","solution":"def findSpecialElements(nums): from collections import Counter n = len(nums) if n == 0: return [] threshold = n // 3 count = Counter(nums) return [key for key, value in count.items() if value > threshold]"},{"question":"Write a function that takes a positive integer `n` and returns a list of all prime numbers less than `n`, excluding `n` itself. Your function should be efficient and avoid unnecessary computations. # Examples ```python primes(10) => [2, 3, 5, 7] primes(20) => [2, 3, 5, 7, 11, 13, 17, 19] primes(2) => [] primes(1) => [] ``` **Constraints:** 1. The input `n` will be a positive integer. 2. The returned list should be sorted in ascending order. 3. You should use an efficient algorithm to find the prime numbers.","solution":"def primes(n): Returns a list of all prime numbers less than n. if n < 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start*start, n, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Implement a function reverseArray that takes an array of integers as input and returns a new array which is the reverse of the input array. Example arr=[1, 2, 3, 4] Return [4, 3, 2, 1]. Function Description Complete the reverseArray function in the editor below. reverseArray has the following parameter: - int arr[]: the array to be reversed Returns - int[]: the reversed array Constraints - 1 leq text{arr.length} leq 1000 - 1 leq text{arr}[i] leq 1000 for any valid i Sample Input arr = [10, 20, 30, 40] Sample Output [40, 30, 20, 10] Explanation Reversing the array [10, 20, 30, 40] yields [40, 30, 20, 10].","solution":"def reverseArray(arr): Returns a new array that is the reverse of the input array. Parameters: arr (list of int): The array to be reversed. Returns: list of int: The reversed array. return arr[::-1]"},{"question":"A company decides to organize a coding competition. Each participant is identified by a unique integer ID and the score they received during the competition. The results are stored in an array of tuples where each tuple contains the participant ID and score. The company wants to find the top k participants with the highest scores. If two participants have the same score, the one with the smaller ID should be ranked higher. Write a function that returns a list of the top k participant IDs sorted by their scores in descending order and then by their IDs in ascending order if scores are identical. Example: Input: participants = [(1, 92), (2, 87), (3, 92), (4, 85)], k = 2 Output: [1, 3] Explanation: The top 2 participants based on their scores are participants with IDs 1 and 3. They both have the highest score of 92, but participant 1 has a smaller ID, so 1 comes before 3. Input: participants = [(1, 89), (2, 89), (3, 91)], k = 1 Output: [3] Explanation: The top participant is the one with ID 3, having the highest score of 91. Constraints: - The `participants` list will contain at most 10^5 tuples. - Each participant ID and score will be unique within the list. - 1 <= k <= len(participants) - The IDs and scores are positive integers.","solution":"def top_k_participants(participants, k): Returns the IDs of the top k participants sorted by their scores in descending order and by their IDs in ascending order when scores are the same. Parameters: participants (list): A list of tuples where each tuple contains a participant ID and their score. k (int): The number of top participants to return. Returns: list: The list of top k participant IDs. # Sort participants based on score (descending) and then by ID (ascending) if scores are identical sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) # Extract the top k participant IDs top_k_ids = [participant[0] for participant in sorted_participants[:k]] return top_k_ids"},{"question":"You are organizing an outdoor concert and need to set up a number of chairs for the audience. Each row can only have exactly 8 chairs for uniformity, and any chairs that cannot fill a full row should be stored for future use. You are given the total number of chairs `n` and you need to determine the number of complete rows you can set up and how many chairs will be left over. Write a function that returns the number of complete rows and the number of remaining chairs given the input `n`. The result should be a tuple containing these two values. Examples: ``` chairs_needed(35) -> (4, 3) chairs_needed(80) -> (10, 0) chairs_needed(123) -> (15, 3) ```","solution":"def chairs_needed(n): Returns the number of complete rows and remaining chairs. :param n: Total number of chairs. :return: A tuple containing the number of complete rows and remaining chairs. complete_rows = n // 8 remaining_chairs = n % 8 return (complete_rows, remaining_chairs)"},{"question":"You are given a list of integers along with a target integer T. The task is to find the smallest subarray whose sum is greater than or equal to T. If no such subarray exists, return -1. Example 1: Input: arr = [2, 3, 1, 2, 4, 3] T = 7 Output: [4, 3] Explanation: The smallest subarray with a sum of at least 7 is [4, 3], which has a length of 2. Example 2: Input: arr = [1, 4, 4] T = 4 Output: [4] Explanation: The smallest subarray with a sum of at least 4 is either [4] or [4], both of which have a length of 1. Example 3: Input: arr = [1, 1, 1, 1, 1, 1, 1, 1] T = 11 Output: -1 Explanation: No subarray has a sum of at least 11. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `smallestSubarray(arr, T)` which takes an array of integers arr and an integer T as input and returns a list containing the smallest subarray with a sum greater than or equal to T. If no such subarray exists, return -1. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 ≤ len(arr) ≤ 10^5 1 ≤ arr[i] ≤ 10^4 1 ≤ T ≤ 10^9","solution":"def smallestSubarray(arr, T): Returns the smallest subarray whose sum is greater than or equal to T. If no such subarray exists, returns -1. n = len(arr) min_length = float(\'inf\') sum_ = 0 start = 0 result = [] for end in range(n): sum_ += arr[end] while sum_ >= T: if end - start + 1 < min_length: min_length = end - start + 1 result = arr[start:end + 1] sum_ -= arr[start] start += 1 return result if min_length != float(\'inf\') else -1"},{"question":"Given a string s and a list of words words[], return the number of words that are a subsequence of s. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. Example: Input: s = \\"abcde\\" words[] = {\\"a\\", \\"bb\\", \\"acd\\", \\"ace\\"} Output: 3 Explanation: The words \\"a\\", \\"acd\\", and \\"ace\\" are subsequences of \\"abcde\\". Your Task: This is a function problem. You need to complete the function numMatchingSubseq that takes the string s and the list of words[] as parameters and returns the number of subsequences. Constraints: 1 ≤ len(s) ≤ 50000 1 ≤ len(words) ≤ 5000 1 ≤ len(words[i]) ≤ 50","solution":"def is_subsequence(s, word): Helper function to determine if \'word\' is a subsequence of \'s\'. it = iter(s) return all(char in it for char in word) def numMatchingSubseq(s, words): Returns the number of words that are a subsequence of s. count = 0 for word in words: if is_subsequence(s, word): count += 1 return count"},{"question":"A company is looking to optimize their warehouse operations by keeping track of the inventory in real-time. They want to develop a system that allows the following operations: 1. add_item(i, q): Add \'q\' quantity of item \'i\' to the inventory. 2. remove_item(i, q): Remove \'q\' quantity of item \'i\' from the inventory. If the quantity of item \'i\' is less than \'q\', this operation should not be performed. 3. count_item(i): Return the current quantity of item \'i\' in the inventory. 4. total_unique_items(): Return the total number of different items that have a non-zero quantity in the inventory. 5. total_all_items(): Return the total quantity of all items combined in the inventory. Your task is to implement this system. The system starts with an empty warehouse. Input The first line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains a query in one of the following formats: * \\"A i q\\" (1 ≤ i ≤ 100000; 1 ≤ q ≤ 1000): Call add_item(i, q). * \\"R i q\\" (1 ≤ i ≤ 100000; 1 ≤ q ≤ 1000): Call remove_item(i, q). * \\"C i\\" (1 ≤ i ≤ 100000): Call count_item(i). * \\"U\\": Call total_unique_items(). * \\"T\\": Call total_all_items(). Output For each count_item(i), total_unique_items(), and total_all_items() query, print the required answer in a single line. Example Input 10 A 1 50 A 2 30 C 1 R 2 10 C 2 U T R 1 60 U T Output 50 20 2 2 Tx","solution":"class Warehouse: def __init__(self): self.inventory = {} def add_item(self, i, q): if i in self.inventory: self.inventory[i] += q else: self.inventory[i] = q def remove_item(self, i, q): if i in self.inventory and self.inventory[i] >= q: self.inventory[i] -= q if self.inventory[i] == 0: del self.inventory[i] def count_item(self, i): return self.inventory.get(i, 0) def total_unique_items(self): return len(self.inventory) def total_all_items(self): return sum(self.inventory.values())"},{"question":"Write a function that takes in a list of integers and returns a list of tuples. Each tuple contains two elements: the integer and the number of times it appears in the list. The resulting list of tuples should be sorted by the integers in ascending order. Constraints * The length of the list leq 1,000,000 * -1,000,000 leq text{integer} leq 1,000,000 Input A single list of integers. Output A list of tuples. Each tuple contains an integer from the input list and its frequency, sorted by the integer value. Example Input [4, 6, 3, 4, 6, 1, 3, 3, 4] Output [(1, 1), (3, 3), (4, 3), (6, 2)]","solution":"def count_and_sort(lst): Takes a list of integers and returns a sorted list of tuples with each tuple containing an integer from the input list and its frequency. Parameters: lst (list): A list of integers. Returns: list: A sorted list of tuples, where each tuple contains an integer and its frequency. # Create a dictionary to count the frequency of each integer frequency_dict = {} for num in lst: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 # Convert the dictionary to a list of tuples and sort it by the integers result = sorted(frequency_dict.items()) return result"},{"question":"To ensure the efficient use of memory in a system, it is important to minimize memory leaks. One way to monitor memory usage changes over time is by analyzing the memory usage at different points and assessing how it varies. Given an array of integers where each element represents the memory usage at a specific point in time, write a program to find the maximum difference between any two memory usage measurements such that the higher usage comes after the lower usage. Input Format The first line of input contains the number of test cases T. (1 ≤ T ≤ 100) The second line of each test case contains an integer N, the number of memory usage measurements. (2 ≤ N ≤ 1000) The third line contains N space-separated integers representing the memory usage measurements in megabytes. Output Format For each test case, output a single line containing the maximum difference in memory usage with the constraint that the higher usage occurs after the lower usage. If no such pair exists, output 0. SAMPLE INPUT 2 5 3 1 4 8 7 4 15 10 8 7 SAMPLE OUTPUT 7 0","solution":"def max_memory_usage_diff(test_cases): Given the number of test cases with memory usage values, returns the maximum difference between any two memory usage points such that the higher usage comes after the lower usage. results = [] for case in test_cases: n, memory_usages = case if n < 2: results.append(0) continue min_usage = memory_usages[0] max_diff = 0 for i in range(1, n): current_diff = memory_usages[i] - min_usage if current_diff > max_diff: max_diff = current_diff if memory_usages[i] < min_usage: min_usage = memory_usages[i] results.append(max_diff) return results # Function to parse input and call the main function for easier testing def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) memory_usages = list(map(int, input_lines[index + 1].split())) test_cases.append((N, memory_usages)) index += 2 return max_memory_usage_diff(test_cases)"},{"question":"You are given a list of n integers representing the heights of students standing in a line. Your goal is to form groups of 3 students each such that the heights of the students in each group are non-decreasing. A group (h1, h2, h3) is valid if and only if h1 <= h2 <= h3. Determine the maximum number of valid groups of 3 students that can be formed from the given list. -----Input----- The input consists of a single line containing an integer n (3 ≤ n ≤ 10^5) followed by n integers representing the heights of the students. -----Output----- Output a single integer which is the maximum number of valid groups of 3 students that can be formed. -----Examples----- Sample Input 1: 6 1 2 3 4 5 6 Sample Output 1: 2 Sample Input 2: 10 1 1 1 1 1 1 1 1 1 1 Sample Output 2: 3 Note: For Sample Input 1, the groups can be (1, 2, 3) and (4, 5, 6). For Sample Input 2, the groups can be (1, 1, 1), (1, 1, 1), and (1, 1, 1).","solution":"def max_valid_groups(n, heights): Determines the maximum number of valid groups of 3 students with non-decreasing heights that can be formed from the list of heights. # Sort the heights in non-decreasing order heights.sort() # The maximum number of groups will be limited by floor(n / 3) max_groups = n // 3 return max_groups"},{"question":"Given a binary tree, the task is to create a linked list for each level of the tree. That is, for every depth d of the binary tree, create a linked list containing all the nodes at depth d. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: LinkedList 1: 1 LinkedList 2: 2 -> 3 LinkedList 3: 4 -> 5 -> 6 -> 7 Example 2: Input: 10 / 20 30 / 40 50 Output: LinkedList 1: 10 LinkedList 2: 20 -> 30 LinkedList 3: 40 -> 50 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `createLevelLinkedList` that takes the root of the binary tree as input and returns a list of linked lists, where each linked list contains the nodes at each level of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - The number of nodes in the binary tree is in the range [1, 10^4]. - The value of each node is a 32-bit integer which can be positive, negative or zero. Notes: - Define a class `ListNode` for the linked list structure. - Define a class `TreeNode` for the binary tree nodes.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class ListNode: def __init__(self, x): self.val = x self.next = None def createLevelLinkedList(root): if not root: return [] result = [] current_level = deque([root]) while current_level: level_size = len(current_level) level_head = level_tail = ListNode(0) # Dummy head node for current level linked list for _ in range(level_size): tree_node = current_level.popleft() level_tail.next = ListNode(tree_node.val) level_tail = level_tail.next if tree_node.left: current_level.append(tree_node.left) if tree_node.right: current_level.append(tree_node.right) result.append(level_head.next) # Append the actual head (skipping dummy node) return result"},{"question":"A delivery company is working on optimizing its route planning system. The goal is to minimize the total distance covered while delivering packages to multiple addresses. The company operates in a grid-like city where each cell represents an address and the distance between any two cells is calculated using the Manhattan distance. You are given the coordinates of the company\'s warehouse and a list of delivery addresses. You need to find the shortest possible route that starts at the warehouse, visits each delivery address exactly once, and returns to the warehouse. The task is to implement a function that, given the coordinates of the warehouse and a list of delivery addresses, outputs the minimum possible distance of the route. Input The first line contains two integers x_0 and y_0 (0 ⩽ x_0, y_0 ⩽ 10^6) — the coordinates of the warehouse. The second line contains an integer n (1 ⩽ n ⩽ 10) — the number of delivery addresses. The next n lines each contain two integers x_i and y_i (0 ⩽ x_i, y_i ⩽ 10^6) — the coordinates of the delivery addresses. Output Print the minimum possible distance of the route. Example Input 0 0 3 1 1 2 2 3 3 Output 12 Note The optimal route for the example would be: (0, 0) → (1, 1) → (2, 2) → (3, 3) → (0, 0). The total Manhattan distance is (1+1) + (1+1) + (1+1) + (3+3) = 12.","solution":"import itertools def manhattan_distance(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) def find_shortest_route(x0, y0, addresses): min_distance = float(\'inf\') address_permutations = itertools.permutations(addresses) for perm in address_permutations: current_distance = 0 current_x, current_y = x0, y0 for x, y in perm: current_distance += manhattan_distance(current_x, current_y, x, y) current_x, current_y = x, y current_distance += manhattan_distance(current_x, current_y, x0, y0) if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"# Task Write a function that checks if a given integer `n` is a perfect power. If it is, the function should return a list `[a, b]` such that `a^b = n` where `a` is the smallest possible base and `b` is the corresponding exponent. If `n` is not a perfect power, the function should return `None`. Rules 1. `n` is a positive integer greater than 1. 2. The base `a` must be greater than 1. 3. The exponent `b` must be an integer greater than 1. Example ``` perfect_power(9) == [3, 2] Explanation: 3^2 = 9 perfect_power(16) == [2, 4] Explanation: 2^4 = 16 perfect_power(27) == [3, 3] Explanation: 3^3 = 27 perfect_power(20) == None Explanation: 20 is not a perfect power ``` Function Signature ```python def perfect_power(n: int) -> list: pass ```","solution":"def perfect_power(n: int): Returns [a, b] if n is a perfect power such that a^b = n. Returns None if n is not a perfect power. # n must be greater than 1 if n <= 1: return None # Testing for all possible values of a from 2 to sqrt(n) for a in range(2, int(n**0.5) + 1): b = 2 while a**b <= n: if a**b == n: return [a, b] b += 1 return None"},{"question":"A large social media website wants to implement a new feature that tracks the popularity of posts over time. They want to be able to answer queries efficiently about the number of posts that have received a certain number of likes during specific intervals. You are given N posts, each with a unique identifier and the time at which they were posted. For each post, you also have a list of times at which the post received likes. You need to answer Q queries, where for each query, given a time window [A, B] and a threshold T, you need to find the number of posts that received at least T likes within the time window [A, B]. ------ Input ------ The first line contains an integer N, the number of posts. Each of the next N lines contains the post identifier P (a unique integer), the posting time Tp, and an integer L indicating the number of times the post received likes. This is followed by L integers, representing the times at which the post received likes. The next line contains an integer Q, the number of queries. Each of the next Q lines contains three integers A, B, and T, representing the start of the time window, the end of the time window, and the threshold of likes respectively. 1 ≤ N ≤ 10000 1 ≤ L ≤ 1000 1 ≤ Q ≤ 100 1 ≤ P, Tp, A, B, T ≤ 100000 A ≤ B ------ Output ------ For each query, output the number of posts that received at least T likes within the time window [A, B]. ------ Example ------ Input: 3 101 1 5 2 4 6 8 10 102 2 4 3 5 7 103 3 3 4 6 8 2 2 8 2 1 10 5 Output: 2 1 Explanation: In the first query, the time window is [2, 8] and the threshold is 2 likes. - Post 101 receives likes at times 4, 6, and 8, totaling 3 likes within the window. - Post 102 receives likes at times 5 and 7, totaling 2 likes within the window. - Post 103 receives likes at times 4 and 6, totaling 2 likes within the window. Thus, all three posts meet the like threshold. In the second query, the time window is [1, 10] and the threshold is 5 likes. Only Post 101 received a total of 5 likes (2, 4, 6, 8, 10), thus meeting the threshold.","solution":"def count_likes(posts, queries): Counts the number of posts that received at least T likes within the time window [A, B]. :param posts: List of tuples containing post information (P, Tp, L, likes) :param queries: List of tuples containing query information (A, B, T) :return: List of results for each query results = [] for A, B, T in queries: count = 0 for post in posts: _, _, _, likes = post likes_in_window = sum(1 for like in likes if A <= like <= B) if likes_in_window >= T: count += 1 results.append(count) return results # Example usage posts = [ (101, 1, 5, [2, 4, 6, 8, 10]), (102, 2, 4, [3, 5, 7]), (103, 3, 3, [4, 6, 8]) ] queries = [ (2, 8, 2), (1, 10, 5) ] # Expected output: [3, 1] count_likes(posts, queries)"},{"question":"You are given an array of integers. You need to perform a series of operations to make all elements of the array equal. In each operation, you can choose any two different elements and replace one of them with their greatest common divisor (GCD). What is the minimum number of operations required to make all elements of the array equal? Input Each test contains multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100 000), denoting the number of test cases, followed by a description of the test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 200 000): the number of elements in the array. The second line of each test case contains n integers a_i (1 ≤ a_i ≤ 10^9), representing the elements of the array. The sum of all n throughout the test is guaranteed to not exceed 200 000. Output For each test case, print one integer: the minimum number of operations to make all elements of the array equal. Example Input 3 2 4 8 3 2 3 6 4 7 7 7 7 Output 1 2 0 Note In the first test case, you can replace 8 with GCD(4, 8) which is 4. This operation makes both elements equal to 4. In the second test case, you can first replace 6 with GCD(2, 6) which is 2, and then replace 3 with GCD(2, 3) which is 1. Performing these 2 operations will make all elements equal to 1. In the third test case, all elements are already equal; hence no operations are needed.","solution":"from math import gcd from functools import reduce def min_operations_to_make_equal(arr): Returns the minimum number of operations to make all elements of the array equal by replacing elements with their GCD. # Calculate the GCD of the entire array array_gcd = reduce(gcd, arr) if array_gcd == arr[0] and all(x == arr[0] for x in arr): return 0 else: return len(arr) - 1 def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(min_operations_to_make_equal(arr)) return results"},{"question":"You are given two sequences of lowercase English letters: S of length N and T of length M. You are to form a new sequence U by interleaving S and T such that the relative order of characters in S and T is maintained. You are allowed to use each character from S and T at most once in U. Determine the number of distinct sequences U that can be formed, modulo 1000000007. -----Notes----- Two sequences U_1 and U_2 are considered different if they differ at least in one position. Interleaving two sequences means arranging the letters from both sequences while preserving their relative orders. -----Constraints----- - 1 leq N, M leq 1000 - S and T consist of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print the number of distinct sequences U modulo 1000000007. -----Sample Input----- abc def -----Sample Output----- 20 Explanation: The sequences S = \\"abc\\" and T = \\"def\\" can be interleaved to form sequences like \\"abcdef\\", \\"adbcef\\", \\"deabcf\\", etc. In total, there are 20 distinct sequences that can be formed this way.","solution":"def count_distinct_interleavings(S, T): MOD = 1000000007 N = len(S) M = len(T) # Create a DP table where dp[i][j] represents the number of distinct interleavings # of S[:i] and T[:j] dp = [[0] * (M + 1) for _ in range(N + 1)] # Base cases: dp[0][0] = 1 # There\'s exactly one way to interleave two empty strings for i in range(1, N + 1): dp[i][0] = 1 # The only way to interleave S[:i] with an empty T is S for j in range(1, M + 1): dp[0][j] = 1 # The only way to interleave an empty S with T[:j] is T # Fill the DP table for i in range(1, N + 1): for j in range(1, M + 1): dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD return dp[N][M]"},{"question":"In a game, players need to move on a grid starting from the top-left corner and reach the bottom-right corner. The grid is of size (n times n) and some cells are blocked, meaning you cannot step on them. You need to help the player determine the number of different paths to reach the destination. You can only move right or down. -----Input:----- - The first line contains the integer (T), the number of test cases. - Each test case starts with an integer (n), the size of the grid. - The next (n) lines contain (n) integers (0 or 1), where 0 represents a free cell and 1 represents a blocked cell. -----Output:----- For each test case, output the number of unique paths from the top-left to the bottom-right corner. -----Constraints----- - (1 leq T leq 50) - (1 leq n leq 10) - The cell (1, 1) is always free (0). - The cell (n, n) is always free (0). -----Sample Input:----- 2 3 0 0 0 0 1 0 0 0 0 3 0 0 0 0 1 0 1 1 0 -----Sample Output:----- 2 1 -----EXPLANATION:----- For the first test case, the two paths are: 1. Right, Right, Down, Down 2. Down, Down, Right, Right For the second test case, the only path is: 1. Right, Right, Down, Down, Down, Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths in an n x n grid with obstacles. n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 # Create a 2D table to store results of subproblems dp = [[0] * n for _ in range(n)] # Initialize the first cell dp[0][0] = 1 # Fill the values for the first column (only down moves) for i in range(1, n): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill the values for the first row (only right moves) for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][n-1] def solve(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] grid = test_cases[i][1] results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"A: Array Operations **Problem** You are given an array of integers. There are two types of operations that can be performed on this array: 1. For a given range [L, R], find the sum of elements within that range. 2. Update a specific element at a given index to a new value. Design an efficient algorithm to handle multiple queries of these operations. Input Format - The first line contains two integers n and q, the size of the array and the number of queries respectively. - The second line contains n integers representing the array elements. - The next q lines each contain one of the two types of queries, formatted as follows: - `S L R` for a sum operation where L and R are the 1-based indices of the range (inclusive). - `U i x` for an update operation where i is the 1-based index of the element to update and x is the new value. Constraints - (1 leq n leq 10^5) - (1 leq q leq 10^5) - (-10^9 leq a_i, x leq 10^9) (Array elements and update values) - (1 leq L, R, i leq n) Output Format For each sum query, print the result on a new line. **Sample Input** ``` 5 3 1 2 3 4 5 S 2 4 U 3 10 S 1 5 ``` **Sample Output** ``` 9 22 ``` **Explanation** - The first sum query calculates the sum of elements from index 2 to 4 inclusive: (2 + 3 + 4 = 9). - The update query changes the element at index 3 to 10, modifying the array to [1, 2, 10, 4, 5]. - The second sum query calculates the sum of all elements: (1 + 2 + 10 + 4 + 5 = 22).","solution":"class ArrayOperations: def __init__(self, array): self.array = array self.n = len(array) self.prefix_sum = [0] * (self.n + 1) self._construct_prefix_sum() def _construct_prefix_sum(self): for i in range(1, self.n + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + self.array[i - 1] def sum_range(self, L, R): return self.prefix_sum[R] - self.prefix_sum[L - 1] def update(self, i, x): diff = x - self.array[i - 1] self.array[i - 1] = x for j in range(i, self.n + 1): self.prefix_sum[j] += diff def process_queries(n, array, queries): op = ArrayOperations(array) results = [] for query in queries: if query[0] == \'S\': _, L, R = query results.append(op.sum_range(L, R)) elif query[0] == \'U\': _, i, x = query op.update(i, x) return results"},{"question":"Alice is interested in finding unique permutations of a given string. She wants to know the total number of unique permutations possible for her string. Given a string S which contains lowercase alphabets, find the number of unique permutations of the string. Input Format: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output Format: T lines indicating the unique permutation count for each string. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10 SAMPLE INPUT 2 abc aab SAMPLE OUTPUT 6 3","solution":"from math import factorial from collections import Counter def unique_permutations_count(s): Returns the number of unique permutations of the string s. char_count = Counter(s) denominator = 1 for count in char_count.values(): denominator *= factorial(count) return factorial(len(s)) // denominator def process_test_cases(test_cases): results = [] for s in test_cases: results.append(unique_permutations_count(s)) return results # Gathering Input def gather_input(): T = int(input()) test_cases = [] for _ in range(T): test_cases.append(input()) return T, test_cases # Gathering Output def output_results(results): for result in results: print(result) if __name__ == \\"__main__\\": T, test_cases = gather_input() results = process_test_cases(test_cases) output_results(results)"},{"question":"Implement a function `find_largest_square` that takes a 2D binary matrix as input and returns the area of the largest square containing only 1s in the matrix. **Function Signature:** ```python def find_largest_square(matrix: List[List[int]]) -> int: ``` **Input:** - A `List[List[int]]` representing a 2D matrix containing only 0s and 1s. - The dimensions of the matrix are m x n where 1 ≤ m, n ≤ 300. **Output:** - An integer representing the area of the largest square containing only 1s. # Example **Input:** ```python matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] ``` **Output:** ```python 4 ``` # Explanation In the given example, the largest square containing only 1s has a side length of 2, hence the area is 4 (2 * 2). # Notes: - The function should efficiently handle matrices at the upper constraint limits. - Intermediate results should be stored and reused to minimize repeated calculations.","solution":"def find_largest_square(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"You are given a 2D grid of size \'n x m\' representing a map where: - `\'1\'` represents land. - `\'0\'` represents water. An island is formed by connecting adjacent lands horizontally or vertically. You must write a function that finds and returns the number of islands. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 300) — the number of rows and columns in the grid, respectively. The next `n` lines contain `m` characters each, where each character is either `\'1\'` or `\'0\'`. Output Print a single integer representing the number of islands in the grid. Examples Input 4 5 11000 11000 00100 00011 Output 3 Input 3 3 111 010 111 Output 1 Input 3 3 000 000 000 Output 0 Note In the first sample test, there are three islands: 1. The first island is formed by `11000` on the first two rows. 2. The second island is formed by `00100` on the third row. 3. The third island is formed by `00011` on the fourth row.","solution":"def num_islands(grid): Finds and returns the number of islands in the given grid. if not grid: return 0 n = len(grid) m = len(grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\' or visited[x][y]: return visited[x][y] = True dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count def islands_from_input(input_data): Parses the input and returns the grid and consists of the main logic to calculate the number of islands. lines = input_data.split(\'n\') n, m = map(int, lines[0].split()) grid = [lines[i+1] for i in range(n)] return num_islands(grid)"},{"question":"Develop a function that takes a list of binary strings and returns the longest consecutive sequence of identical binary strings. The binary strings are guaranteed to contain only \'0\' and \'1\' characters. # Example: ```python def longest_consecutive_sequence(binary_strings): pass # Example usage: binary_strings = [\\"110\\", \\"110\\", \\"001\\", \\"001\\", \\"001\\", \\"101\\", \\"101\\", \\"101\\", \\"101\\"] print(longest_consecutive_sequence(binary_strings)) # Should return [\\"101\\", 4] binary_strings = [\\"000\\", \\"000\\", \\"111\\", \\"111\\", \\"111\\", \\"000\\", \\"000\\"] print(longest_consecutive_sequence(binary_strings)) # Should return [\\"111\\", 3] ``` # Constraints: - The list of binary strings is not empty. - Each string in the list has a length ranging from 1 to 30 characters. - There are no characters other than \'0\' and \'1\' in the binary strings. - The solution should have a time complexity of O(n), where n is the number of binary strings in the list.","solution":"def longest_consecutive_sequence(binary_strings): Returns the longest consecutive sequence of identical binary strings and its length. if not binary_strings: return None, 0 max_string = binary_strings[0] max_length = 1 current_string = binary_strings[0] current_length = 1 for i in range(1, len(binary_strings)): if binary_strings[i] == current_string: current_length += 1 else: if current_length > max_length: max_string = current_string max_length = current_length current_string = binary_strings[i] current_length = 1 if current_length > max_length: max_string = current_string max_length = current_length return max_string, max_length"},{"question":"Given an array of integers, find the subarray (containing at least one number) which has the largest sum. Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer N, the size of the array. The second line contains N space-separated integers, elements of the array. Output: For each test case, print the sum of the contiguous subarray which has the largest sum. Constraints: 1 <= T <= 100 1 <= N <= 100 -10^4 <= A[i] <= 10^4 Example: Input: 2 5 1 2 3 -2 5 4 -1 -2 -3 -4 Output: 9 -1 Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def max_subarray_sum(arr): Function to find the sum of the contiguous subarray which has the largest sum. Uses Kadane\'s algorithm to find the maximum sum subarray. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for N, arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"In a distant future, machines have become capable of forming social groups. Machines in a group communicate with each other through a network. Interestingly, they maintain records of their communications. Each communication is represented as a message from machine X to machine Y. Given such directed messages, we want to identify whether the communication network contains any cycle or not. A cycle in the network occurs if there exists a sequence of machines (M1, M2, ..., Mn) such that M1 communicates to M2, M2 communicates to M3, ..., and Mn communicates back to M1. Write a program to determine if there is a cycle in the network. ------ Input ------ The first line contains an integer T, the number of test cases. For each test case, the first line contains two space-separated integers, N and M. N denotes the number of machines and M denotes the number of communications. Next M lines each contain two space-separated integers X and Y, indicating a communication from machine X to machine Y. ------ Output ------ For each test case, output \\"Yes\\" if there is a cycle in the communication network. Otherwise, output \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ M ≤ 2×10^5 1 ≤ X, Y ≤ N ------ Sample Input ------ 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 ------ Sample Output ------ Yes No ------ Explanation ------ In the first test case, there is a cycle (1 → 2 → 3 → 4 → 1). In the second test case, there is no cycle in the communication network, as machines 1, 2, and 3 form a linear communication path without any back-propagation.","solution":"from collections import defaultdict def detect_cycle_util(v, visited, rec_stack, graph): visited[v] = True rec_stack[v] = True for neighbor in graph[v]: if not visited[neighbor]: if detect_cycle_util(neighbor, visited, rec_stack, graph): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False def detect_cycle(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * (n + 1) rec_stack = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if detect_cycle_util(node, visited, rec_stack, graph): return True return False def has_cycle_in_network(test_cases): results = [] for n, m, edges in test_cases: if detect_cycle(n, edges): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given is an array of non-negative integers. Write a function `maximum_product` that finds the maximum product of any three distinct integers in the array. -----Constraints----- - The array will have at least 3 elements and no more than 10^5 elements. - Each element in the array is an integer between 0 and 1000. -----Input----- Input is given as a single list of integers in the following format: [arr] where `arr` represents the array of integers. -----Output----- Print the maximum product of any three distinct integers from the array. -----Sample Input----- [1, 10, 2, 6, 5, 3] -----Sample Output----- 300 In this example, the maximum product is 10 * 6 * 5 which equals 300.","solution":"def maximum_product(arr): Returns the maximum product of any three distinct integers in the array. arr.sort() # Maximum product can either be the product of the three largest numbers # or the product of the two smallest (negative numbers can turn positive) and the largest number. return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"Imagine you are given an array of integers where each integer represents the height of a building. You need to find the maximum amount of water that can be trapped after raining between the buildings. The structure is such that no water can be trapped at the ends of the array, as these are open. Example 1: Input: arr[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1} Output: 6 Explanation: In the given array, 6 units of water (represented by the symbol \'~\') can be trapped. Example 2: Input: arr[] = {4, 2, 0, 3, 2, 5} Output: 9 Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function trapWater() that takes an array (arr), size of array (n), and return the maximum amount of water that can be trapped. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1. 1 ≤ N ≤ 10^5 2. 0 ≤ arr[i] ≤ 10^5","solution":"def trapWater(arr, n): Returns the maximum amount of water that can be trapped. if n <= 2: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], arr[i]) right_max[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], arr[i]) water = 0 for i in range(n): water += min(left_max[i], right_max[i]) - arr[i] return water"},{"question":"In a country where roads are organized as a tree of cities (i.e., a connected acyclic graph), each road has a beauty index. The beauty index of a set of roads is defined as the sum of their indices mod 10^9 + 7. You are a tourist who wants to travel from city A to city B. To make your travel memorable, you only want to use roads that maximize the beauty index along your path. Given a tree of n cities and (n-1) roads, each road connects two cities and has a beauty index, determine the maximum beauty of any path from city A to city B. -----Input----- The first line contains an integer n (2 ≤ n ≤ 10^5), representing the number of cities. Each of the next n-1 lines contains three integers u, v (1 ≤ u, v ≤ n) and w (1 ≤ w ≤ 10^9) — representing a road between cities u and v with a beauty index w. The last line contains two integers A and B (1 ≤ A, B ≤ n) — the cities you want to travel between. -----Output----- Output a single integer — the maximum beauty index of a path from city A to city B, modulo 10^9 + 7. -----Example----- Input 5 1 2 4 1 3 6 2 4 5 2 5 3 3 4 Output 15 Explanation: The optimal path is from city 3 to city 1 to city 2 to city 4 with a combined beauty index of 6 + 4 + 5 = 15.","solution":"MOD = 10**9 + 7 def dfs(graph, node, parent, target, path_sum, path): if node == target: return path_sum for neighbor, weight in graph[node]: if neighbor != parent: result = dfs(graph, neighbor, node, target, path_sum + weight, path + [weight]) if result is not None: return result return None def max_path_beauty(n, roads, A, B): graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) max_beauty = dfs(graph, A, -1, B, 0, []) return max_beauty % MOD"},{"question":"Given a string \'S\' consisting of lowercase English letters and an integer \'K\', your task is to determine whether there is any substring of S that appears at least K times in the string. Return \\"YES\\" if such a substring exists, otherwise return \\"NO\\". Example 1: Input: S = \\"abcbabc\\", K = 2 Output: YES Explanation: \\"abc\\" is a substring that appears twice in the string. Example 2: Input: S = \\"abcdefg\\", K = 2 Output: NO Explanation: No substring appears at least twice. Your Task: You do not need to read input or print anything. Your task is to complete the function doesRepeatSubstring(S, K) which takes the string S and the integer K as input and returns \\"YES\\" if any substring appears at least K times, otherwise returns \\"NO\\". Expected Time Complexity: O(N^2) where N is the length of the string. Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ length of S ≤ 1000 1 ≤ K ≤ 100","solution":"def doesRepeatSubstring(S, K): This function checks if there is any substring that appears at least K times in the given string. Parameters: S (str): The input string. K (int): The number of times a substring should at least appear in the string. Returns: str: \\"YES\\" if any substring appears at least K times, \\"NO\\" otherwise. from collections import defaultdict n = len(S) substring_count = defaultdict(int) # Generate all possible substrings for length in range(1, n+1): for i in range(n - length + 1): substring = S[i:i + length] substring_count[substring] += 1 # Check if any substring appears at least K times for count in substring_count.values(): if count >= K: return \\"YES\\" return \\"NO\\""},{"question":"Jake is organizing a study group for an upcoming coding assessment. He wants to ensure that each participant has access to a unique set of coding problems to work on every day. The coding platform provides p unique coding problems, each with a certain difficulty level d_i. Each participant must solve exactly one problem every day, and no two participants can solve the same problem on the same day, but they can solve the same problem on different days. Each problem can be used multiple times but only once per day. Given the number of participants q and the number of available problems p, Jake needs to figure out the maximum number of days the study group can be sustained. Formally, for each participant k, Jake should assign a problem c_k for every day such that each day, every participant solves one unique problem. Problems assigned to different participants on the same day must be distinct. What is the maximum possible number of days the study group can be sustained? -----Input----- The first line contains two integers q and p (1 le q le 100, 1 le p le 100) — the number of participants in the study group and the number of unique coding problems available. The second line contains a sequence of integers d_1, d_2, dots, d_p (1 le d_i le 100), where d_i is the difficulty level of the i-th problem. -----Output----- Print a single integer — the maximum number of days the study group can be sustained. If it is not possible to sustain the study group for even one day, print 0. -----Examples----- Input 3 7 2 4 2 3 5 6 7 Output 2 Input 5 5 1 1 1 1 1 Output 1 Input 1 3 6 8 9 Output 3 Input 4 8 2 2 2 2 3 3 3 3 Output 2 -----Note----- In the first example, Jake can assign problems with difficulty 2, 4, and 5 on the first day to the three participants. On the second day, he can assign problems 3, 6, and 7. Therefore, the study group can last 2 days. In the second example, there are 5 participants and only 5 problems, all with the same difficulty. Therefore, the group can only be sustained for 1 day because each participant needs a different problem each day. In the third example, Jake only needs to assign one problem per day to one participant, so the study group can last as many days as there are problems.","solution":"def max_days_of_study_group(q, p, difficulties): Returns the maximum number of days the study group can be sustained. q: int - number of participants p: int - number of unique coding problems difficulties: list[int] - difficulties of each problem Returns: int - maximum number of days from collections import Counter problem_counts = Counter(difficulties) problems_per_day = sum(min(cnt, q) for cnt in problem_counts.values()) max_days = problems_per_day // q return max_days"},{"question":"A group of hikers are planning a trip around a national park. The park is represented as a matrix of size n x m where each cell contains a non-negative integer representing the height of the terrain at that point. The higher the number, the more difficult it is to traverse that cell. The hikers can move one step in any of the four cardinal directions (north, south, east, west) but not diagonally. Their objective is to travel from the top-left corner of the matrix (0,0) to the bottom-right corner (n-1, m-1) minimizing the total traversal difficulty, defined as the sum of the heights of all cells they pass through. Write a function that computes the minimum difficulty path from the top-left corner to the bottom-right corner of the matrix. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). Each of the next n lines contains m integers representing the height matrix where each element is between 0 and 1000 inclusive. Output Print an integer, the minimum sum of the heights of the cells along the path from the top-left to the bottom-right corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3","solution":"import heapq def min_difficulty_path(heights): n = len(heights) m = len(heights[0]) # Min-heap to store (total difficulty, x, y) heap = [(heights[0][0], 0, 0)] # Directions for moving north, south, east, west directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() while heap: current_difficulty, x, y = heapq.heappop(heap) if (x, y) == (n-1, m-1): return current_difficulty if (x, y) in visited: continue visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: heapq.heappush(heap, (current_difficulty + heights[nx][ny], nx, ny))"},{"question":"Company Z recently launched a unique social network where users can follow each other. Interestingly, this social network follows a one-way relationship model: if user A follows user B, it does not mean that user B follows user A. Additionally, there are no restrictions on the number of users a single user can follow. One day, the network administrator wants to determine the level of influence of each user. The influence of a user is defined as the number of users who can be reached, directly or indirectly, starting from that user. More formally, if user A can reach user B through a series of follow relationships, then B is considered to be influenced by A. Your task is to write a program that processes this information and computes the number of users influenced by each user in the network. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of users and the number of follow relationships, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that user u follows user v. Output Print n lines. The i-th line should contain the number of users influenced by user i. Examples Input 4 3 1 2 2 3 3 4 Output 3 2 1 0 Input 5 5 1 2 2 3 3 1 4 5 5 4 Output 2 2 2 1 1 Input 3 2 1 2 1 3 Output 2 0 0 Note In the first example, user 1 can influence users 2, 3, and 4 directly or indirectly. User 2 can influence users 3 and 4 directly or indirectly. User 3 can influence user 4 directly. User 4 cannot influence any other user.","solution":"from collections import defaultdict, deque def calculate_influence(n, m, edges): def bfs(start, graph): visited = set() queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) - 1 # exclude the start node itself graph = defaultdict(list) for u, v in edges: graph[u].append(v) influence_counts = [] for user in range(1, n+1): influence_counts.append(bfs(user, graph)) return influence_counts"},{"question":"In a small village, there is a tradition of organizing a secret Santa event every year. Each participant writes their name on a piece of paper and puts it into a hat. Then, each person randomly draws a name from the hat and buys a gift for that person. The villagers have noted, however, that sometimes a person draws their own name, or some people do not get a gift, which disrupts the event. To avoid this, they want to know if a configuration where each person buys exactly one gift and receives exactly one gift is possible. You have been asked to write a program to determine if such a valid configuration exists, given the number of participants. The input consists of a single integer n (2 ≤ n ≤ 1000), the number of participants in the secret Santa event. Output \\"Yes\\" if a valid configuration exists, otherwise print \\"No\\". Example Input 3 Output Yes Explanation For three participants, one possible valid configuration is: - Participant 1 buys a gift for Participant 2 - Participant 2 buys a gift for Participant 3 - Participant 3 buys a gift for Participant 1 Input 4 Output Yes Explanation For four participants, one possible valid configuration is: - Participant 1 buys a gift for Participant 2 - Participant 2 buys a gift for Participant 3 - Participant 3 buys a gift for Participant 4 - Participant 4 buys a gift for Participant 1 Input 1 Output No Explanation For one participant, it is not possible to have a valid configuration as the participant would have to buy a gift for themselves. Note: Consider edge cases and large inputs as well to ensure your solution is efficient and covers all possible scenarios.","solution":"def is_valid_secret_santa_configuration(n): Determines if a valid secret Santa configuration exists for n participants. :param n: Integer, number of participants. :return: \\"Yes\\" if a valid configuration exists, otherwise \\"No\\". if n < 2: return \\"No\\" return \\"Yes\\""},{"question":"You are given a list of n integers representing the heights of n students standing in a line. The students wish to adjust their positions such that no two adjacent students have the same height. Determine the minimum number of students that need to move in order to achieve this arrangement. -----Constraints----- - n is an integer such that 1 ≤ n ≤ 100 - Each height is an integer between 1 and 1000 -----Input----- Input is given from Standard Input in the following format: n h_1 h_2 ... h_n -----Output----- Print the minimum number of students that need to move. -----Sample Input----- 6 1 1 2 3 3 1 -----Sample Output----- 2 In this case, two students need to move to achieve the arrangement where no two adjacent students have the same height. One possible arrangement could be [1, 2, 1, 3, 1, 3].","solution":"def min_moves_to_no_adjacent_same_height(n, heights): Given a list of n integers representing the heights of n students, determine the minimum number of students that need to move so that no two adjacent students have the same height. Args: n : int - the number of students heights : list of int - the heights of the students Returns: int - the minimum number of students that need to move if n == 1: return 0 moves = 0 for i in range(1, n): if heights[i] == heights[i - 1]: moves += 1 return moves"},{"question":"Write a function called `maximalSubstring` that receives two arguments: a string `s` and an integer `k`. The function should return the length of the longest substring that contains at most `k` distinct characters. **Example:** ``` maximalSubstring(\\"araaci\\", 2) -> 4 // Explanation: The longest substring with at most 2 distinct characters is \\"araa\\" with length 4. maximalSubstring(\\"araaci\\", 1) -> 2 // Explanation: The longest substring with at most 1 distinct characters is \\"aa\\" with length 2. maximalSubstring(\\"cbbebi\\", 3) -> 5 // Explanation: The longest substring with at most 3 distinct characters is \\"cbbeb\\" with length 5. maximalSubstring(\\"cbbebi\\", 10) -> 6 // Explanation: The entire string has 6 characters, all of which can fit within the 10 distinct characters limit, so the result is 6. ``` Implement the function `maximalSubstring(s: str, k: int) -> int`.","solution":"def maximalSubstring(s: str, k: int) -> int: Finds the length of the longest substring that contains at most k distinct characters. if k == 0: return 0 window_start, max_length, char_frequency = 0, 0, {} for window_end in range(len(s)): right_char = s[window_end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"You are given an array nums of size n and q queries. For each query of the form l and r, output the number of distinct elements in the sub-array between l and r (inclusive). Example 1: Input: nums = {4, 1, 2, 2, 3}, Query = {{1, 5}, {2, 4}} Output: {4, 2} Explanation: For the 1st query, the sub-array [1, 5] contains {4, 1, 2, 2, 3} which has 4 distinct elements. For the 2nd query, the sub-array [2, 4] contains {1, 2, 2} which has 2 distinct elements. Example 2: Input: nums = {1, 2, 3, 4, 5}, Query = {{1, 3}} Output: {3} Explanation: The sub-array [1, 3] contains {1, 2, 3} which has 3 distinct elements. Your Task: You don\'t need to read or print anything. Your task is to complete the function DistinctElements() which takes nums and Query as input parameters and returns a list containing the number of distinct elements for every query. Expected Time Complexity: O(nlog(n)) Expected Space Complexity: O(n) Constraints: 1 <= n <= 10000 1 <= nums[i] <= n 1 <= no. of queries <= 5000 1 <= l <= r <= n","solution":"def DistinctElements(nums, queries): Given an array `nums` and a list of `queries`, this function returns the number of distinct elements in the sub-array for each query. results = [] for l, r in queries: sub_array = nums[l-1:r] distinct_count = len(set(sub_array)) results.append(distinct_count) return results"},{"question":"Given a list of integers, your task is to find the length of the longest contiguous subarray such that every element in the subarray is distinct. ```python def longest_subarray(nums): # Your code here # Example usage: print(longest_subarray([1, 2, 3, 1, 2, 3, 4, 5])) # Output: 5 print(longest_subarray([5, 1, 5, 1, 5, 5, 1, 2, 3])) # Output: 4 print(longest_subarray([1, 1, 1, 1, 1])) # Output: 1 print(longest_subarray([10, 20, 30, 40, 50])) # Output: 5 ``` More examples in test cases. Good luck! Please also try [Counting Duplicates](https://www.codewars.com/kata/54bf1c2cd5b56cc47f0007a1)","solution":"def longest_subarray(nums): Returns the length of the longest contiguous subarray with distinct elements. n = len(nums) if n == 0: return 0 max_len = 0 left = 0 seen = {} for right in range(n): if nums[right] in seen and seen[nums[right]] >= left: left = seen[nums[right]] + 1 seen[nums[right]] = right max_len = max(max_len, right - left + 1) return max_len # Example usage: print(longest_subarray([1, 2, 3, 1, 2, 3, 4, 5])) # Output: 5 print(longest_subarray([5, 1, 5, 1, 5, 5, 1, 2, 3])) # Output: 4 print(longest_subarray([1, 1, 1, 1, 1])) # Output: 1 print(longest_subarray([10, 20, 30, 40, 50])) # Output: 5"},{"question":"# Description You are required to implement a function `expand_intervals` that takes a list of intervals and returns a sorted list of all individual integers within those intervals. An interval is defined as a tuple of two integers (start, end), inclusive of both start and end. # Example ```python intervals = [(1, 3), (5, 7), (4, 6)] expand_intervals(intervals) == [1, 2, 3, 4, 5, 6, 7] intervals = [(10, 15), (1, 5)] expand_intervals(intervals) == [1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15] intervals = [(100, 100), (50, 52)] expand_intervals(intervals) == [50, 51, 52, 100] ``` # Constraints and Notes - The intervals will be represented as a list of tuples, where each tuple contains two integers. - The intervals can overlap. - The output list should contain sorted unique integers for all specified intervals.","solution":"def expand_intervals(intervals): Expands a list of intervals into a sorted list of unique integers. Args: intervals (list of tuples): List of tuples where each tuple represents an interval (start, end). Returns: list of int: A sorted list of all individual integers within the given intervals. result_set = set() for start, end in intervals: result_set.update(range(start, end + 1)) return sorted(result_set)"},{"question":"You are given a two-dimensional grid representing a city with buildings and roads. Each cell in the grid either contains a building \'B\' or a road \'.\'. Your task is to determine the cell on the road that has the shortest total Manhattan distance to every building in the city, and return that total distance. If there are multiple cells with the same distance, return the smallest. If there are no buildings or only one building, return 0. The Manhattan distance between two cells (x1, y1) and (x2, y2) is given by |x1 - x2| + |y1 - y2|. Complete the function `shortestDistance` which takes a grid (list of lists of strings) as input and returns the shortest total distance. # Input Format The input will be a list of lists of strings, where each string represents either a building \'B\' or a road \'.\'. # Output Format Print a single integer representing the shortest total distance. Constraints - The number of rows and columns of the grid is between 1 and 100. - Each cell in the grid is either \'B\' or \'.\'. - There will be at least one road and one building in the grid. # Sample Input 0 ``` [[\'B\', \'.\', \'.\'], [\'.\', \'B\', \'B\'], [\'.\', \'.\', \'.\']] ``` # Sample Output 0 4 # Explanation 0 The optimal cell is at (2, 1) with a total Manhattan distance of 4 to all buildings: ``` Manhattan distances to each \'B\': |2-0| + |1-0| = 3 |2-1| + |1-1| = 1 |2-1| + |1-2| = 2 Total distance = 3 + 1 + 2 = 6 ``` # Sample Input 1 ``` [[\'.\', \'B\', \'B\'], [\'.\', \'.\', \'.\'], [\'B\', \'B\', \'.\']] ``` # Sample Output 1 6 # Explanation 1 The optimal cell is at (1, 1) with a total Manhattan distance of 6 to all buildings: ``` Manhattan distances to each \'B\': |1-0| + |1-1| = 1 |1-0| + |1-2| = 2 |1-2| + |1-0| = 2 |1-2| + |1-2| = 0 Total distance = 1 + 2 + 2 + 0 = 6 ```","solution":"def shortestDistance(grid): from itertools import product from collections import deque rows, cols = len(grid), len(grid[0]) # Function to get all the building positions buildings = [(r, c) for r, c in product(range(rows), range(cols)) if grid[r][c] == \'B\'] if len(buildings) <= 1: return 0 # No or only one building total_buildings = len(buildings) # BFS function to compute distance from buildings def bfs(start_r, start_c): visited = [[False] * cols for _ in range(rows)] queue = deque([(start_r, start_c, 0)]) # (row, col, dist) distances = [] while queue: r, c, dist = queue.popleft() if r < 0 or r >= rows or c < 0 or c >= cols or visited[r][c] or grid[r][c] == \'B\': continue visited[r][c] = True # If it\'s a road, we can take distance into account if grid[r][c] == \'.\': distances.append((dist, r, c)) for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: queue.append((r + dr, c + dc, dist + 1)) return distances best_distance = float(\'inf\') # Find the best (shortest total distance) for r, c in product(range(rows), range(cols)): if grid[r][c] == \'.\': total_dist = 0 for br, bc in buildings: total_dist += abs(r - br) + abs(c - bc) best_distance = min(best_distance, total_dist) return best_distance"},{"question":"There exists a unique sequence of integers a1, a2, ..., an that is subjected to the following iterative process: 1. Initially, the sequence contains only one element a1 = k. 2. For each subsequent element, ai = pi for i = 2 to n, where pi is the position of i-th prime number in the sequence obtained so far. Let\'s define a function find_sequence(k, n) that returns the first n elements of such a sequence when starting with k, where k is a given positive integer. Your mission is to implement this function. Input: - A single integer, t, representing the number of test cases. - For each test case, two integers separated by a space: k and n. Output: - For each test case, output a line containing the first n elements of the sequence starting with k. Example: Input: 3 1 5 2 6 3 4 Output: 1 2 3 5 7 2 3 5 7 11 13 3 5 7 11","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def find_sequence(k, n): sequence = [k] current_num = k + 1 while len(sequence) < n: if is_prime(current_num): sequence.append(current_num) current_num += 1 return sequence"},{"question":"You are managing a fruit distribution center and need to transport crates of fruit from the warehouse to the market. There are m market destinations, and n trips available for transporting the crates. Each trip is defined by its start day, end day, the number of crates transported during the trip, and the destination market. Your objective is to maximize the total crates delivered to a specific market destination d, while considering the constraints of trip scheduling. Input The first line contains three integers n, m, and d (1 ≤ n ≤ 2⋅10^5, 1 ≤ m ≤ 50, 1 ≤ d ≤ m) — the number of trips, the number of market destinations, and the specific market destination you aim to maximize crate deliveries to, respectively. Then n lines follow, each containing four integers s_i, e_i, c_i, t_i (1 ≤ s_i ≤ e_i ≤ 10^6, 1 ≤ c_i ≤ 10^3, 1 ≤ t_i ≤ m) — the start day of the i-th trip, the end day of the i-th trip, the number of crates transported during the trip, and the destination market. Output Print the total number of crates delivered to market destination d if you choose the optimal set of trips. If it is impossible to deliver any crates to market destination d, print 0. Examples Input 5 3 2 1 3 10 2 2 5 15 1 4 6 20 2 5 9 25 3 7 8 30 2 Output 60 Input 3 2 1 2 4 10 1 3 5 15 1 6 7 20 2 Output 25 Input 4 3 3 1 2 10 1 2 3 20 2 4 5 30 3 6 7 40 1 Output 30","solution":"def maximize_crates_to_market_d(n, m, d, trips): Returns the total number of crates delivered to market destination d if choosing the optimal set of trips. crates_to_d = 0 for trip in trips: s_i, e_i, c_i, t_i = trip if t_i == d: crates_to_d += c_i return crates_to_d # Example input n = 5 m = 3 d = 2 trips = [ (1, 3, 10, 2), (2, 5, 15, 1), (4, 6, 20, 2), (5, 9, 25, 3), (7, 8, 30, 2), ] print(maximize_crates_to_market_d(n, m, d, trips)) # Output should be 60"},{"question":"James is working on a special project that involves processing strings formed by unique lowercase English letters. He is given a string `s` of length `n` (2 ≤ `n` ≤ 1000) where all characters are distinct. However, some characters in the string have been corrupted, and they have been replaced with a placeholder character \'?\'. The corruption has replaced exactly two characters in the string. James wants to identify the positions of the corrupted characters and restore the original string using some existing dictionary `d` that contains all possible original strings of the same length and character set as `s`. Your task is to help James identify the positions of the corrupted characters and print out the original string in correct order. Input The first line of input will contain a single integer `n` — the length of the string. The second line of input will contain the string `s` consisting of `n` characters, where exactly two characters are corrupted and replaced with \'?\'. The third line of input will contain `k`, the number of entries in the dictionary `d`. Each of the next `k` lines will contain a string, each representing an entry in the dictionary `d`. Output To print the final answer, print the original string with the corrupted characters restored (without quotes). Example Input 5 a?c?e 3 abcde axcye atcbe Output abcde Note In the first test case, the input string is \'a?c?e\' and we need to replace the \'?\' characters. By checking the dictionary entries, we find that \'abcde\' is the only string that fits the given pattern. In the second test case, if the input string was \'a?b?d\' and the dictionary had entries like \'akbmd\' and \'aqbxd\', James would be able to identify and use \'akbmd\' as he needs the closest match with minimal query. Ensure to perform the string replacements and comparisons optimally to account for the potential size of the dictionary.","solution":"def restore_string(n, s, k, dictionary): Restores the original string by replacing the corrupted characters. Parameters: n (int): the length of the string s (str): the corrupted string with \'?\' k (int): the number of entries in the dictionary dictionary (list): list of dictionary entries Returns: str: the restored original string for word in dictionary: if len(word) != n: continue # Check if the word from the dictionary matches the pattern of `s` match = True for i in range(n): if s[i] != \'?\' and s[i] != word[i]: match = False break if match: return word return None # If no matching word is found, which should not be the case with valid constraints # Example usage if __name__ == \\"__main__\\": n = 5 s = \\"a?c?e\\" k = 3 dictionary = [\\"abcde\\", \\"axcye\\", \\"atcbe\\"] print(restore_string(n, s, k, dictionary)) # Output: abcde"},{"question":"Given a grid with N rows and M columns, you are required to paint all the cells either black or white. Each cell (i, j) should be painted according to the following rule: - If the cell (i, j) is at an even distance from the top-left cell (1, 1), then it should be painted white. - If the cell (i, j) is at an odd distance from the top-left cell (1, 1), then it should be painted black. Two cells (i1, j1) and (i2, j2) are considered to be at distance |i1 - i2| + |j1 - j2| from each other. Constraints - N and M are integers between 1 and 1000 (inclusive). Input Input is given from Standard Input in the following format: N M Output Print the painted grid as N lines of M characters. Each character should be \\"B\\" (for black) or \\"W\\" (for white). Example Input 3 3 Output W B W B W B W B W","solution":"def paint_grid(N, M): Paints an N x M grid based on the specified rules. Args: N (int): Number of rows. M (int): Number of columns. Returns: list: A grid of N rows and M columns with \'B\' and \'W\' representing black and white cells respectively. grid = [] for i in range(N): row = [] for j in range(M): if (i + j) % 2 == 0: row.append(\'W\') else: row.append(\'B\') grid.append(\' \'.join(row)) return grid def main(): import sys input = sys.stdin.read N, M = map(int, input().strip().split()) for row in paint_grid(N, M): print(row)"},{"question":"A logistics company manages a large fleet of delivery trucks tasked with delivering packages between various warehouses. Each truck driver has a unique route, and the company\'s goal is to optimize the total distance traveled by all trucks to reduce fuel costs and delivery time. Each truck has a specified maximum distance it can travel, and each warehouse has a certain number of packages that need to be delivered to other warehouses. Given the constraints of truck capacities and packed with packages, the company needs to determine if the current fleet can handle the delivery workload efficiently. Your task is to develop an algorithm that determines the minimum number of additional trucks required, if any, to ensure all packages are delivered within the constraints of the truck\'s maximum distance. Input The first line contains three integers n, m, and t (1 ≤ n ≤ 1,000, 1 ≤ m ≤ 100,000, 1 ≤ t ≤ 100) — the number of warehouses, the number of routes (pair of warehouses with distance), and the number of trucks, respectively. Each of the next m lines contains three integers ai, bi, di (1 ≤ ai, bi ≤ n, 1 ≤ di ≤ 1,000) — indicating there is a route between warehouse ai and warehouse bi with a distance di. Each of the next t lines contains two integers li and mi (1 ≤ li ≤ 1,000, 1 ≤ mi ≤ 10,000) — the maximum distance the ith truck can travel and the number of warehouses the truck can visit. Output In the first line print a single integer k indicating the minimum number of additional trucks needed. Examples Input 4 5 2 1 2 10 2 3 15 3 4 5 4 1 20 2 4 25 20 3 30 4 Output 1 Input 3 3 3 1 2 12 2 3 8 3 1 7 10 2 15 2 20 2 Output 0","solution":"def min_additional_trucks(n, m, t, routes, trucks): total_distance = sum([d for _, _, d in routes]) sum_truck_distance = sum([truck[0] for truck in trucks]) if sum_truck_distance >= total_distance: return 0 else: trucks_needed_distance = (total_distance - sum_truck_distance) additional_trucks_needed = (trucks_needed_distance // max([truck[0] for truck in trucks])) + 1 return additional_trucks_needed"},{"question":"You are tasked with writing a program that processes a list of integers provided as input. The program should sort the list in ascending order and then remove any duplicates. Finally, it should output the modified list. The input will be provided in a single line, with each integer separated by a space. Example Input 4 7 2 8 7 3 2 Output 2 3 4 7 8","solution":"def process_numbers(input_str): Processes a string of space-separated integers by sorting them in ascending order and removing duplicates. :param input_str: A string of space-separated integers. :return: A list of sorted, unique integers. # Convert the input string to a list of integers numbers = list(map(int, input_str.split())) # Remove duplicates by converting to a set unique_numbers = set(numbers) # Sort the unique numbers sorted_numbers = sorted(unique_numbers) return sorted_numbers"},{"question":"Write a program that reads multiple lines of integers and for each line, determines if the sequence is strictly increasing, strictly decreasing, or neither. Constraints * Each line will contain a sequence of integers separated by a single space. * 1 ≤ length of sequence ≤ 100 * -10000 ≤ each integer ≤ 10000 * The number of lines ≤ 1000 Input The input consists of multiple lines. Each line contains a sequence of integers. The sequence ends when a line containing the string \\"end\\" is encountered. Your program should not process this terminal symbol. Output For each line of integers, print \\"increasing\\" if the sequence is strictly increasing, \\"decreasing\\" if the sequence is strictly decreasing, or \\"neither\\" otherwise. Example Input 1 2 3 4 5 5 4 3 2 1 1 1 2 3 3 5 2 6 end Output increasing decreasing neither neither","solution":"def determine_sequence_type(sequence): Given a sequence of integers, determine if it is strictly increasing, strictly decreasing, or neither. if all(sequence[i] < sequence[i + 1] for i in range(len(sequence) - 1)): return \\"increasing\\" elif all(sequence[i] > sequence[i + 1] for i in range(len(sequence) - 1)): return \\"decreasing\\" else: return \\"neither\\" def process_input(lines): Processes multiple lines of input integers and returns their sequence types. results = [] for line in lines: if line == \\"end\\": break sequence = list(map(int, line.split())) result = determine_sequence_type(sequence) results.append(result) return results"},{"question":"In a coding competition, you are given an initial array of integers and a series of update operations. Each update operation consists of changing a segment of the array to a specific value. Your task is to calculate the final state of the array after all the operations. Each operation is described by three integers: `l`, `r`, and `v`, where `l` and `r` are the starting and ending indices of the segment, and `v` is the value to set each element in that segment. Example: Initial array: `[0, 0, 0, 0, 0]` Operations: `[(0, 1, 10), (2, 4, 5), (1, 3, 20)]` After applying the first operation: `[10, 10, 0, 0, 0]` After applying the second operation: `[10, 10, 5, 5, 5]` After applying the third operation: `[10, 20, 20, 20, 5]` Function Description Complete the `apply_operations` function in the editor below. `apply_operations` has the following parameters: - int arr[n]: the initial array of integers - int operations[m][3]: a 2-dimensional array of operations Returns - int[]: the final state of the array after all operations. Input Format The first line contains an integer, `n`, the size of the initial array. The second line contains `n` integers representing the initial array. The third line contains an integer, `m`, the number of operations. The next `m` lines each contain three integers, `l`, `r`, and `v`, separated by spaces. Constraints - 1 leq n leq 10^5 - 1 leq m leq 10^4 - 0 leq l leq r < n - -10^9 leq v leq 10^9 Sample Input STDIN Function ----- -------- 5 arr[] size = 5 0 0 0 0 0 arr = [0, 0, 0, 0, 0] 3 operations[] size = 3 0 1 10 operations = [[0, 1, 10], [2, 4, 5], [1, 3, 20]] 2 4 5 1 3 20 Sample Output 10 20 20 20 5 Explanation Initial array: `[0, 0, 0, 0, 0]` After the first operation: `[10, 10, 0, 0, 0]` After the second operation: `[10, 10, 5, 5, 5]` After the third operation: `[10, 20, 20, 20, 5]`","solution":"def apply_operations(arr, operations): Apply update operations to an array. Parameters: arr (list of int) : The initial array of integers operations (list of lists) : The operations to apply, where each operation is a list [l, r, v] Returns: list of int: The modified array after all operations for op in operations: l, r, v = op for i in range(l, r + 1): arr[i] = v return arr"},{"question":"You have an array A of distinct integers sorted in ascending order and an integer X. You need to find the index of the element X in the array using binary search. Example 1: Input: A = [1, 3, 5, 7, 9, 11], X = 7 Output: 3 Example 2: Input: A = [2, 4, 6, 8, 10, 12, 14], X = 5 Output: -1 Your Task: You don\'t need to read or print anything, Your task is to complete the function binarySearch() which takes array A and integer X as input parameters and returns the index of X in A. If X is not present, return -1. Expected Time Complexity: O(log n) Expected Space Complexity: O(1) Constraints: 1 <= len(A) <= 10^{5} -10^9 <= A[i], X <= 10^9","solution":"def binarySearch(A, X): Perform binary search to find the index of X in array A. Parameters: A (list of int): Sorted array of distinct integers. X (int): The integer to find in the array. Returns: int: The index of X in the array, or -1 if X is not found. left, right = 0, len(A) - 1 while left <= right: mid = left + (right - left) // 2 # To prevent potential overflow if A[mid] == X: return mid elif A[mid] < X: left = mid + 1 else: right = mid - 1 return -1"},{"question":"The inhabitants of the enchanted forest have discovered a new form of magic. They want to form several magic circles to protect the forest from invaders. Each circle must have a specific radius and should not overlap with any other circle. The circles\' complexity means that each circumference must exactly pass through a specified point which is the location for the circle\'s center. However, given the finite number of points in the forest, the inhabitants must carefully choose the points for the centers ensuring the non-overlapping condition is respected. You have been selected to help position the circles. -----Input----- The first line of input contains an integer N (1 leq N leq 100), indicating the number of circles to be formed. This is followed by N pairs of integers representing the centers (x_i, y_i) and radii r_i for each circle. Each x_i and y_i has an absolute value no higher than 1000 and 1 leq r_i leq 100. -----Output----- Output \\"YES\\" if it is possible to place all N circles without overlapping, otherwise output \\"NO\\". -----Examples----- Sample Input: 3 0 0 1 3 3 1 6 0 1 Sample Output: YES Sample Input: 3 0 0 2 3 0 2 1 1 1 Sample Output: NO","solution":"import math def non_overlapping_circles(N, circles): Check if it is possible to place all N circles defined by their center coordinates and radius without overlapping. Args: N (int): the number of circles circles (list of tuples): (x_i, y_i, r_i) for each circle\'s center coordinates and radius Returns: str: \\"YES\\" if no circles overlap, otherwise \\"NO\\" for i in range(N): x1, y1, r1 = circles[i] for j in range(i + 1, N): x2, y2, r2 = circles[j] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) if distance < r1 + r2: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array B with M integers. Chef wants to know whether this array is palindrome-centric. An array is considered palindrome-centric if it can be rearranged such that it forms a palindrome. A palindrome is a sequence that reads the same backward as forward. Output 1 if it can be rearranged to form a palindrome, and 0 otherwise. ------ Input Format ------ - The first line of the input contains P - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer - M - The second line of each test case contains M space-separated integers - the j^{th} of which is B_{j} ------ Output Format ------ For each test case, output the answer on a new line. Output 1 if B can be rearranged to form a palindrome, and 0 otherwise. ------ Constraints ------ 1 ≤ P, M ≤ 10^{5} 1 ≤ B_{j} ≤ 10^{6} ----- Sample Input 1 ------ 2 4 1 2 2 1 5 1 2 3 2 4 ----- Sample Output 1 ------ 1 0 ----- Explanation 1 ------ Test case 1: The array [1, 2, 2, 1] is already a palindrome, so the answer is 1. Test case 2: The array [1, 2, 3, 2, 4] cannot be rearranged to form a palindrome. No matter how you arrange the elements, the middle part will not mirror each side properly. Therefore, the answer is 0.","solution":"def can_form_palindrome(arr): Determines if the given array can be rearranged to form a palindrome. Parameters: arr (list): List of integers. Returns: int: 1 if the array can be rearranged to form a palindrome, 0 otherwise. from collections import Counter count = Counter(arr) # Count how many elements appear an odd number of times odd_counts = sum(1 for freq in count.values() if freq % 2 != 0) # A string can form a palindrome if at most one character has an odd count return 1 if odd_counts <= 1 else 0 def check_palindrome_arrangements(test_cases): Processes multiple test cases to determine if each array can be rearranged to form a palindrome. Parameters: test_cases (list): List of test cases where each test case is a tuple (M, list of integers). Returns: list: List of results for each test case. results = [] for M, arr in test_cases: results.append(can_form_palindrome(arr)) return results"},{"question":"Kaibun City is known for its beautifully palindromic street names. During a festival, the City Council decided to honor the longest palindromic subsequence of street names. A subsequence is derived from the original sequence by deleting some or none of the elements without changing the order of the remaining elements. Given an input string that represents the concatenation of all street names in Kaibun City, determine the length of the longest palindromic subsequence that can be formed. -----Constraints----- - 1 leq |S| leq 1 000 (where |S| is the length of the input string S) - S consists of only uppercase English letters. -----Input----- The input is given in the following format: S -----Output----- Print the length of the longest palindromic subsequence. -----Sample Input----- ABBDCACB -----Sample Output----- 5 Explanation: The longest palindromic subsequence in \\"ABBDCACB\\" is \\"BCACB\\" with a length of 5.","solution":"def longest_palindromic_subsequence(S): Returns the length of the longest palindromic subsequence in the string S. n = len(S) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n+1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = 2 + dp[i+1][j-1] if length > 2 else 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1]"},{"question":"**Problem** You are developing a program to manage an online store\'s inventory system. The store sells various types of products, each with a unique product ID. When shipments arrive, the inventory of the respective products must be updated. Additionally, the store sometimes needs to remove products that are discontinued. Your task is to simulate this inventory update process. Each product is represented by a unique alphanumeric product ID (a string). The program will receive a series of updates where you need to add or remove products from the inventory. After all updates, you have to display the final inventory sorted lexically. **Constraints** - There will be no more than 1000 initial products in the inventory. - There will be no more than 100 updates. - Each product ID will be a string of up to 10 characters and will only contain alphanumeric characters. - The same product ID will not be removed more times than it appears in the inventory. **Input** The input consists of multiple lines as follows: - The first line contains an integer `N`, the number of initial products in the inventory. - The next `N` lines each contain a single product ID representing the initial inventory. - The following line contains an integer `U`, the number of updates to be performed. - The next `U` lines each contain an operation followed by a product ID. The operation is either \\"ADD\\" or \\"REMOVE\\". **Output** Output the final inventory as a list of product IDs sorted in lexical order. If the inventory is empty, print `EMPTY`. **Examples** **Input** ``` 5 ABC123 XYZ234 LMN456 ABC123 JKL789 4 REMOVE ABC123 ADD DEF001 REMOVE LMN456 ADD XYZ234 ``` **Output** ``` ABC123 DEF001 JKL789 XYZ234 XYZ234 ``` **Input** ``` 3 AA100 BB200 CC300 2 REMOVE AA100 REMOVE BB200 ``` **Output** ``` CC300 ``` **Input** ``` 3 AA100 BB200 CC300 3 REMOVE AA100 REMOVE BB200 REMOVE CC300 ``` **Output** ``` EMPTY ``` **Input** ``` 0 2 ADD ZZ999 ADD AA111 ``` **Output** ``` AA111 ZZ999 ```","solution":"def manage_inventory(initial_inventory, updates): Manage the inventory based on initial inventory and updates. Parameters: initial_inventory (list of str): The initial list of product IDs in the inventory. updates (list of tuple): Each tuple contains an operation (\\"ADD\\" or \\"REMOVE\\") and a product ID. Returns: list of str: The final inventory sorted lexically, or [\\"EMPTY\\"] if it is empty. inventory = initial_inventory[:] for operation, product_id in updates: if operation == \\"ADD\\": inventory.append(product_id) elif operation == \\"REMOVE\\": if product_id in inventory: inventory.remove(product_id) if not inventory: return [\\"EMPTY\\"] return sorted(inventory)"},{"question":"In a leap year, February has 29 days instead of the usual 28. Given a year, write a program that identifies whether it\'s a leap year or not. -----Input----- The input contains a single integer Y (1 leq Y leq 10^4) representing the year. -----Output----- Output a single line containing the word \\"Yes\\" if the year is a leap year, otherwise output \\"No\\". -----Examples----- Input 2000 Output Yes Input 1900 Output No Input 2024 Output Yes -----Note----- According to the Gregorian calendar, a year is a leap year if the following conditions are satisfied: 1. It is divisible by 4. 2. If it is divisible by 100, then it should also be divisible by 400.","solution":"def is_leap_year(year): Determines if a given year is a leap year. Parameters: - year: int. The year to be checked (1 <= year <= 10^4) Returns: - \'Yes\' if the year is a leap year, \'No\' otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Yes\\" else: return \\"No\\""},{"question":"You are designing an interpreted language where each variable\'s value is printed immediately after it is assigned. Write a program that takes a sequence of variable assignments and prints the value assigned to each variable right after the assignment. Variables can hold integer values, and the assignments are provided as a series of input lines. Input: - Up to 1000 lines of input. - Each input line follows the format: `variable = value`, where `variable` is alphabetic and `value` is an integer. Output: - Print the variable and its assigned value immediately after each assignment following the format: `variable: value`. SAMPLE INPUT x = 5 y = 10 x = 7 SAMPLE OUTPUT x: 5 y: 10 x: 7 Explanation Each line of input is processed to extract the variable name and its assigned value, and immediately after an assignment, the variable and value are printed in the specified format.","solution":"def interpret_assignments(input_lines): Takes a sequence of variable assignments and prints the value assigned to each variable immediately after the assignment, following the format: `variable: value`. results = [] for line in input_lines: if line.strip(): # Ignore empty lines variable, value = line.split(\'=\') variable = variable.strip() value = value.strip() results.append(f\\"{variable}: {value}\\") return results"},{"question":"Write a function `balance_parentheses` that takes a string containing parentheses and returns the minimum number of parentheses that must be added to make the string balanced. # Explanation: A string containing only the characters `(` and `)` is said to be balanced if every opening parenthesis has a corresponding closing parenthesis. # Parameters: - `s` (str): The string containing the parentheses to balance. # Returns: - `int`: The minimum number of parentheses needed to balance the string. # Examples: ```python balance_parentheses(\\"(()\\") == 1 # Explanation: Add 1 closing parenthesis to balance the string -> \\"(())\\" balance_parentheses(\\")))(((\\") == 6 # Explanation: Add 3 opening and 3 closing parentheses to balance the string -> \\"((()))((()))\\" balance_parentheses(\\"()()\\") == 0 # Explanation: The string is already balanced balance_parentheses(\\")()(\\") == 2 # Explanation: Add 1 opening at the beginning and 1 closing at the end to balance the string -> \\"()()()\\" ``` # Constraints: - The length of the input string `s` will be between 0 and 1000","solution":"def balance_parentheses(s): Returns the minimum number of parentheses that must be added to make the string balanced. open_count = 0 close_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_count += 1 return open_count + close_count"},{"question":"You are given a list of integers representing heights of people standing in a row. Two people are considered to have the same height if their heights differ by no more than 1 unit. Determine the minimum number of visible blocks after arranging them into blocks of same height. In each block, people should have the same height or only vary by exactly 1 unit. Each block must contain at least one person. Input The input consists of a single line containing a list of integers separated by spaces. The length of the list is between 1 and 100, inclusive. Output Output the minimum number of visible blocks. Examples Input 1 2 3 4 5 5 4 4 3 3 2 1 Output 3 Input 7 8 8 6 9 6 8 7 Output 2","solution":"def min_visible_blocks(heights): Determines the minimum number of visible blocks after arranging them into blocks of same height. if not heights: return 0 heights = sorted(heights) blocks = 1 current_block_min = heights[0] for h in heights: if h > current_block_min + 1: blocks += 1 current_block_min = h return blocks"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to determine the smallest number of distinct characters in any non-empty substring of `s` such that every character in `s` appears in at least one of those substrings. Input The first and only line contains the string `s` (1 ≤ |s| ≤ 1000). Output Print an integer representing the smallest number of distinct characters in any non-empty substring of `s` such that every character in `s` appears in at least one of those substrings. Examples Input abcde Output 5 Input abac Output 3 Note In the first example, the string \\"abcde\\" contains 5 different characters (\'a\', \'b\', \'c\', \'d\', \'e\'), each appearing in a substring with 5 distinct characters. In the second example, the string \\"abac\\" has the following substrings: - \\"a\\", \\"ab\\", \\"aba\\", \\"abac\\", \\"b\\", \\"ba\\", \\"bac\\", \\"a\\", \\"ac\\", \\"c\\" The smallest number of distinct characters in a substring is 3 (\\"aba\\" or \\"bac\\"). Hence the answer is 3.","solution":"def smallest_distinct_substring(s): Returns the smallest number of distinct characters in any non-empty substring of `s` such that every character in `s` appears in at least one of those substrings. from collections import Counter # if string is empty, return 0 if not s: return 0 # count frequency of each character in the string freq = Counter(s) # return the number of unique characters (which is the smallest number of distinct chars) return len(freq)"},{"question":"Sita is organizing a robotics competition and has designed a unique scoring system. In this competition, each robot receives commands and executions that affect its accumulated points. Sita needs help calculating the final score for each robot after all commands and executions are processed. Each robot starts with 0 points. There are two types of operations that can be performed: 1. Add X points to a robot\'s current score. 2. Set a robot\'s score to Y, which means the previous points don\'t matter anymore, and the score is now Y. You are given a list of `N` operations, where each operation is either of the two types described above. INPUT The first line contains an integer `N`, the number of operations. The next `N` lines each contain a string denoting the type of operation (`add` or `set`), followed by an integer which is the value to be added or set. OUTPUT An integer which is the final score of the robot after all operations have been processed. CONSTRAINTS 1 ≤ N ≤ 10^5 -10^9 ≤ value ≤ 10^9 SAMPLE INPUT 5 add 10 add 15 set 20 add 5 set 30 SAMPLE OUTPUT 30 Explanation: - Initially, the score is 0. - The first operation is `add 10`, so the score becomes 10. - The second operation is `add 15`, so the score becomes 10 + 15 = 25. - The third operation is `set 20`, so the score is now 20. - The fourth operation is `add 5`, so the score becomes 20 + 5 = 25. - The fifth operation is `set 30`, so the score is now 30. - Therefore, the final score is 30.","solution":"def calculate_final_score(operations): Calculate the final score for the robot after all operations. Parameters: operations (list of tuples): A list of tuples where each tuple contains a string (\'add\' or \'set\') and an integer value. Returns: int: The final score of the robot. score = 0 for operation, value in operations: if operation == \'add\': score += value elif operation == \'set\': score = value return score"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node has a unique ID from 1 to `n`. Each edge connects a pair of nodes and has a weight associated with it. Your task is to find the length of the shortest path (in terms of total weight) from node 1 to node `n`. If no such path exists, return -1. Your program should read the input, compute the shortest path using an appropriate algorithm (such as Dijkstra\'s algorithm) and output the length of the shortest path. Input The first line of the input contains two integers `n` (2 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5). Each of the next `m` lines contains three integers `u`, `v` and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), indicating that there is an edge between nodes `u` and `v` with weight `w`. Output Print a single integer representing the length of the shortest path from node 1 to node `n`. If there is no path from node 1 to node `n`, print -1. Examples Input 5 6 1 2 3 1 3 1 2 3 7 2 4 5 3 4 2 4 5 7 Output 10 Input 3 2 1 2 4 2 3 5 Output 9 Input 3 1 2 3 10 Output -1","solution":"import heapq import sys def shortest_path(n, m, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, target): min_heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 visited = set() while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node in visited: continue visited.add(current_node) if current_node == target: return current_distance for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 return dijkstra(1, n)"},{"question":"A social media platform is developing a feature to automatically generate hashtags for trending topics based on user posts. A hashtag must be a single word that starts with a hash symbol (#) and only contains alphanumeric characters. Write a function that takes a list of strings (posts) and returns the most frequently used valid hashtag. If there is a tie, return the hashtag that appears first in the list of posts. Consider the following constraints: - Each post in the list contains only alphanumeric characters and spaces. - Each hashtag starts with a hash symbol (#) but does not contain any spaces. - The length of each post does not exceed 280 characters. - The list of posts has at most 1000 posts. Input: The first line contains an integer, N, representing the number of posts. Each of the next N lines contains a single post. Output: Print the most frequently used hashtag. Example: Input: 5 #hello world this is a #test post #hello again #test the new feature this is a normal sentence with no hashtags another post with #hello Output: #hello Explanation: In this example, the valid hashtags are #hello and #test. The hashtag #hello appears three times, while #test appears twice. Therefore, the output is #hello.","solution":"def most_frequent_hashtag(posts): from collections import Counter import re hashtag_counter = Counter() hashtag_pattern = re.compile(r\\"#w+\\") for post in posts: hashtags = hashtag_pattern.findall(post) hashtag_counter.update(hashtags) if not hashtag_counter: return None most_common_hashtag = hashtag_counter.most_common(1)[0][0] return most_common_hashtag"},{"question":"Task Implement a function that receives a string as an argument and returns true if the string is a valid hexadecimal color code, and false otherwise. A valid hexadecimal color code must start with the \\"#\\" symbol, followed by exactly six characters which can be digits (0-9) or letters (A-F, a-f). # Examples ```python valid_hex_color(\\"#1A2B3C\\") -> True valid_hex_color(\\"#123ABC\\") -> True valid_hex_color(\\"#123abG\\") -> False valid_hex_color(\\"123ABC\\") -> False valid_hex_color(\\"#1A2B3C9\\") -> False valid_hex_color(\\"#1A2B\\") -> False ``` # Constraints - The input string will never be empty. - The input string will always have a length between 1 and 10. # Plan 1. Use the `re` module to create a regular expression that checks for valid hexadecimal color codes. 2. Ensure the regular expression looks for a \'#\' symbol at the beginning, followed by exactly six valid characters (0-9, A-F, a-f). 3. Return True if the input string matches the pattern; otherwise, return False.","solution":"import re def valid_hex_color(s): Returns True if the given string s is a valid hexadecimal color code, False otherwise. A valid hexadecimal color code starts with \'#\' followed by exactly six characters (0-9, A-F, a-f). pattern = re.compile(r\'^#[0-9A-Fa-f]{6}\') return bool(pattern.match(s))"},{"question":"# Temperature Converter Alice is building a temperature converter to help her convert temperatures between Fahrenheit and Celsius. She has written some code but is unsure of its correctness. Help Alice by writing a function that accurately converts a given temperature from Fahrenheit to Celsius and vice versa. Your task is to write two functions: 1. `fahrenheit_to_celsius(fahrenheit)` which takes a temperature in Fahrenheit and returns the temperature converted to Celsius using the formula: [ text{Celsius} = frac{( text{Fahrenheit} - 32) times 5}{9} ] 2. `celsius_to_fahrenheit(celsius)` which takes a temperature in Celsius and returns the temperature converted to Fahrenheit using the formula: [ text{Fahrenheit} = left( text{Celsius} times frac{9}{5} right) + 32 ] Ensure that both functions handle edge cases appropriately (e.g., very high and very low temperatures). Examples: ```python fahrenheit_to_celsius(32) # should return 0.0 fahrenheit_to_celsius(212) # should return 100.0 celsius_to_fahrenheit(0) # should return 32.0 celsius_to_fahrenheit(100) # should return 212.0 ```","solution":"def fahrenheit_to_celsius(fahrenheit): Converts a temperature from Fahrenheit to Celsius. Args: fahrenheit (float): Temperature in degrees Fahrenheit. Returns: float: Temperature in degrees Celsius. return (fahrenheit - 32) * 5 / 9 def celsius_to_fahrenheit(celsius): Converts a temperature from Celsius to Fahrenheit. Args: celsius (float): Temperature in degrees Celsius. Returns: float: Temperature in degrees Fahrenheit. return (celsius * 9 / 5) + 32"},{"question":"You are organizing a coding competition with n participants. The competition consists of m problems, and each participant can solve any subset of these problems. After the competition, you want to evaluate the participants\' performance by comparing the sets of problems each participant has solved. Specifically, for each pair of participants, you want to determine how many problems are uniquely solved by one participant but not the other. Formally, let P_i and P_j be the sets of problems solved by participants i and j, respectively. You need to calculate the symmetric difference between each pair of sets and determine its size. The symmetric difference of two sets is the set of elements that are in either one of the sets but not in their intersection. Your task is to optimize the evaluation by finding the maximum number of unique problems solved by at least one participant. Input The first line contains two integers n (1 ≤ n ≤ 100) — the number of participants, and m (1 ≤ m ≤ 100) — the number of problems. Next n lines each contain a binary string of length m. Each string represents the problems solved by a participant, where the j-th character is \'1\' if the j-th problem is solved by the participant, and \'0\' otherwise. Output Print one integer — the maximum number of problems that are uniquely solved by at least one participant. Example Input 3 5 10101 11000 01110 Output 3 Note In the given example, participants solved the problems as follows: Participant 1: {1, 3, 5} Participant 2: {1, 2} Participant 3: {2, 3, 4} The symmetric differences between all pairs are: 1. Participant 1 and Participant 2: {2, 3, 5} (size 3) 2. Participant 1 and Participant 3: {1, 4, 5} (size 3) 3. Participant 2 and Participant 3: {1, 3, 4, 5} (size 4) The maximum number of unique problems solved by at least one participant is 3 (either for the pair (1,2) or (1,3)).","solution":"def max_unique_problems(n, m, participants): Returns the maximum number of problems uniquely solved by at least one participant max_unique = 0 for i in range(n): for j in range(i + 1, n): set_i = set(idx for idx, ch in enumerate(participants[i]) if ch == \'1\') set_j = set(idx for idx, ch in enumerate(participants[j]) if ch == \'1\') unique_problems = len(set_i.symmetric_difference(set_j)) if unique_problems > max_unique: max_unique = unique_problems return max_unique"},{"question":"Given a list of strings containing lowercase English letters, find all the anagrams in the list and group them together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Return a list of groups of anagrams, sorted within groups and groups should also be sorted by the first item in each group in lexicographic order. Example 1: Input: strs = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"ate\\", \\"eat\\", \\"tea\\"], [\\"bat\\"], [\\"nat\\", \\"tan\\"]] Explanation: \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams and form a group. \\"tan\\" and \\"nat\\" are anagrams and form another group. \\"bat\\" does not have any anagram in the list. Example 2: Input: strs = [\\"\\"] Output: [[\\"\\"]] Explanation: The only input is an empty string, which is an anagram of itself. Example 3: Input: strs = [\\"a\\"] Output: [[\\"a\\"]] Explanation: The only input is a single-character string, which is an anagram of itself. Constraints: 1. 1 <= strs.length <= 104 2. 0 <= strs[i].length <= 100 3. strs[i] consists of lowercase English letters.","solution":"from collections import defaultdict def group_anagrams(strs): Groups the anagrams in the list of strings. Args: strs (list of str): List of strings to be grouped by anagrams. Returns: list of list of str: A list where each element is a list of anagrams grouped together. anagrams = defaultdict(list) for s in strs: sorted_s = \'\'.join(sorted(s)) anagrams[sorted_s].append(s) result = [sorted(group) for group in anagrams.values()] result.sort(key=lambda x: x[0]) return result"},{"question":"Given an integer array of size N, write a program to sort the array in such a way that all even numbers appear before all the odd numbers while maintaining the relative order of both even and odd numbers. Example 1: Input: arr[] = {3, 1, 2, 4, 7, 6} Output: [2, 4, 6, 3, 1, 7] Explanation: All the even numbers: 2, 4, 6 are moved before the odd numbers while maintaining their relative order. Example 2: Input: arr[] = {4, 2, 5, 3, 1} Output: [4, 2, 5, 3, 1] Explanation: All the even numbers: 4, 2 are moved before the odd numbers while maintaining their relative order. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function sortArrayEvenOdd() that takes an array (arr) and its size (n), and sorts it in-place as described above. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 0 ≤ arr[i] ≤ 10^9","solution":"def sortArrayEvenOdd(arr): Sorts an array such that all even numbers appear before all odd numbers while maintaining the relative order of both even and odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"John is a software developer working on a project that involves managing data for a city. One day, his manager asks him to analyze the city\'s road network to determine the most optimal way to set up emergency services that can respond quickly to incidents. The city\'s road network is represented as an undirected graph where intersections are nodes and roads are edges. Each road has a certain length. John\'s task is to find out the minimal maximum distance from any intersection to the nearest emergency service station. To accomplish this, John determines the average shortest-path distance from each candidate intersection to all other intersections. Then he identifies the intersection with the smallest average shortest-path distance, as this would be the optimal station location. Your task is to help John by writing a program that accepts the number of intersections, the list of roads with their distances, and outputs the intersection that has the minimal maximum distance to all other intersections. Input The first line contains two integers, n and m (2 ≤ n ≤ 5000, 1 ≤ m ≤ 10000) — the number of intersections and the number of roads in the city. The next m lines each contain three integers u, v, d (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ d ≤ 1000) — representing a road between intersections u and v with distance d. Output Print one integer — the intersection index (1-based) that should be the location of the emergency service station. If there are multiple intersections with the same minimal maximum distance, print the smallest intersection index. Examples Input 4 5 1 2 2 2 3 2 3 4 2 4 1 2 1 3 1 Output 1 Input 3 3 1 2 1 2 3 2 1 3 4 Output 2 Input 5 7 1 2 3 1 3 5 2 3 1 3 4 2 4 5 3 5 2 2 1 4 4 Output 2 Note In the first example, intersections 1, 2, and 3 all have the same minimal maximum distance, but intersection 1 has the smallest index. In the second example, intersection 2 has the smallest average shortest-path distances to all other intersections.","solution":"import heapq import sys def find_emergency_station(n, m, roads): def dijkstra(start, n, graph): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 queue = [(0, start)] heapq.heapify(queue) while queue: current_dist, u = heapq.heappop(queue) if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(queue, (distance, v)) return distances # Construct the graph from the road inputs graph = [[] for _ in range(n + 1)] for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) min_max_distance = float(\'inf\') optimal_intersection = 1 for i in range(1, n + 1): distances = dijkstra(i, n, graph) max_distance = max(distances[1:]) if max_distance < min_max_distance or (max_distance == min_max_distance and i < optimal_intersection): min_max_distance = max_distance optimal_intersection = i return optimal_intersection # Example usage: # n = 4 # m = 5 # roads = [(1, 2, 2), (2, 3, 2), (3, 4, 2), (4, 1, 2), (1, 3, 1)] # print(find_emergency_station(n, m, roads)) # Output: 1"},{"question":"You are given a list of integers and a target integer M. Your task is to determine the smallest subarray (contiguous elements) in the list such that the sum of its elements is greater than or equal to M. If no such subarray exists, return -1. -----Constraints----- - The length of the list is between 1 and 10^5. - Each element of the list is a positive integer not exceeding 10^5. - 1 leq M leq 10^10 -----Input----- Input is given from Standard Input in the following format: N M a_1 a_2 ... a_N -----Output----- Print the length of the smallest subarray with a sum greater than or equal to M. If no such subarray exists, print -1. -----Sample Input----- 8 15 1 2 3 4 5 6 7 8 -----Sample Output----- 2 The following subarrays have a sum greater than or equal to 15: - [7, 8] with the sum of 15 and length 2 - [6, 7, 8] with the sum of 21 and length 3 - [5, 6, 7, 8] with the sum of 26 and length 4 The smallest subarray has length 2.","solution":"def smallest_subarray_with_sum_greater_equal(arr, M): n = len(arr) min_len = float(\'inf\') curr_sum = 0 start = 0 for end in range(n): curr_sum += arr[end] while curr_sum >= M: min_len = min(min_len, end - start + 1) curr_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"In a remote village, the residents decided to construct a series of underground tunnels connecting various important locations like the town hall, market, school, and hospital. The tunnels are represented as a graph where nodes are the important locations and edges are the tunnels with their respective lengths. The village council wants to ensure there is a unique path between any two locations, thus forming a tree structure. Unfortunately, while planning, some tunnels got redundant, leading to multiple paths between locations. Your task is to remove the minimum number of redundant tunnels, so that the remaining structure forms a tree. In case of multiple solutions, prefer keeping tunnels with smaller lengths. Input The first line contains two integers n (2 ≤ n ≤ 105) and m (n-1 ≤ m ≤ 2n), where n is the number of locations and m is the number of tunnels. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 109), representing a tunnel between locations u and v with length w. Output Output the number of tunnels removed and the total length of the remaining tunnels in the tree. Examples Input 5 6 1 2 3 2 3 2 3 4 4 4 5 1 1 3 5 2 5 6 Output 2 10 Input 4 5 1 2 3 1 3 2 3 4 4 2 4 1 2 3 5 Output 2 6","solution":"def find(parent, u): if parent[u] != u: parent[u] = find(parent, parent[u]) return parent[u] def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 def remove_redundant_tunnels(n, m, tunnels): tunnels.sort(key=lambda x: x[2]) # Sort by tunnel length parent = list(range(n+1)) rank = [0] * (n+1) total_length = 0 remaining_tunnels = 0 for u, v, w in tunnels: if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_length += w remaining_tunnels += 1 tunnels_removed = m - (n - 1) return tunnels_removed, total_length def main(input_data): input_lines = input_data.strip().split(\\"n\\") n, m = map(int, input_lines[0].split()) tunnels = [list(map(int, line.split())) for line in input_lines[1:]] tunnels_removed, total_length = remove_redundant_tunnels(n, m, tunnels) return f\\"{tunnels_removed}n{total_length}\\" # Example usage input_data = 5 6 1 2 3 2 3 2 3 4 4 4 5 1 1 3 5 2 5 6 print(main(input_data)) # Output: 2n10"},{"question":"You are given a list of distinct integers representing points on a number line. Your task is to find the largest distance between any two points on the number line and the number of such pairs of points that have this maximum distance. -----Input----- The first line contains a single integer n (2 le n le 10^5), the number of points. The second line contains n distinct integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9), the positions of the points on the number line. -----Output----- Output two integers: the maximum distance between any two points, and the number of pairs of points that have this maximum distance. -----Examples----- Input 6 1 2 4 6 10 12 Output 11 2 Input 3 -5 0 5 Output 10 1 -----Note----- In the first example, the maximum distance between points is 11, which occurs between the pairs (1, 12) and (2, 10). In the second example, the maximum distance is 10, which occurs only between the pair (-5, 5).","solution":"def max_distance_and_count(n, points): if n < 2: return 0, 0 # Not enough points to find any pairs min_point = min(points) max_point = max(points) max_distance = max_point - min_point return max_distance, 1"},{"question":"Write a function that takes a string of digits and calculates the add persistence of that number. Add persistence describes the number of times you must sum the digits of a number until you reach a single digit. For example, `999` would become: ``` Step 1: 9 + 9 + 9 = 27 Step 2: 2 + 7 = 9 ``` The add persistence of `999` is `2` because it took `2` steps to reach a single digit. The function should take an integer as input and return an integer representing the number of steps required to achieve a single digit. **Examples:** ``` add_persistence(999) // returns 2 add_persistence(1679583) // returns 3 add_persistence(123456) // returns 2 add_persistence(5) // returns 0 ``` **Notes:** - The input will always be a non-negative integer. - If the input is already a single digit, the persistence is `0` since no steps are required.","solution":"def add_persistence(n): Calculate the add persistence of a number. Add persistence is the number of times you must sum the digits of a number until you reach a single digit. Args: n (int): A non-negative integer. Returns: int: The number of steps required to reach a single-digit number. steps = 0 while n >= 10: n = sum(int(digit) for digit in str(n)) steps += 1 return steps"},{"question":"Create a function that takes an integer n and returns an n x n spiral matrix filled with numbers from 1 to n^2 in a clockwise manner. For example, when n = 3, the function should return: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` When n = 4, the function should return: ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ```","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix filled with numbers from 1 to n^2 in a clockwise manner. if n <= 0: return [] # Initialize matrix matrix = [[0]*n for _ in range(n)] num = 1 left, right, top, bottom = 0, n-1, 0, n-1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"You are given a list of integers and a set of operations that you must execute on the list. The operations are of two types: 1. \\"append x\\": Append the integer x to the end of the list. 2. \\"query l r\\": Calculate and return the sum of integers in the subarray from index l to r (inclusive, zero-indexed). All operations should be handled efficiently. INPUT The first line contains two integers, N and Q, where N is the initial number of integers in the list, and Q is the number of operations. The second line contains N integers, representing the initial elements of the list. The next Q lines contain one of the two types of operations. OUTPUT For each query operation, output the result on a new line. CONSTRAINTS 1 ≤ N ≤ 100,000 1 ≤ Q ≤ 100,000 1 ≤ x ≤ 10^9 0 ≤ l ≤ r < current size of the list SAMPLE INPUT 5 5 1 2 3 4 5 query 1 3 append 6 query 2 4 append 7 query 0 6 SAMPLE OUTPUT 9 12 28","solution":"def execute_operations(n, q, initial_elements, operations): Executes the given operations on the initial list of elements. Args: n (int): Initial number of integers in the list. q (int): Number of operations to be performed. initial_elements (list of int): Initial elements of the list. operations (list of str): List of operations to be executed. Returns: list of int: Results of the \\"query\\" operations. lst = initial_elements[:] results = [] for operation in operations: parts = operation.split() if parts[0] == \\"append\\": x = int(parts[1]) lst.append(x) elif parts[0] == \\"query\\": l = int(parts[1]) r = int(parts[2]) results.append(sum(lst[l:r+1])) return results"},{"question":"Complete the function that takes a list of integers and a target sum, and returns the indices of the two numbers in the list that add up to the target sum. Note - Assume that there is exactly one solution, and you may not use the same element twice. - You can return the answer in any order. Examples ``` twoSum([2, 7, 11, 15], 9) returns [0, 1] twoSum([3, 2, 4], 6) returns [1, 2] twoSum([3, 3], 6) returns [0, 1] twoSum([1, 2, 3, 4, 5], 8) returns [2, 4] ```","solution":"def twoSum(nums, target): Returns the indices of the two numbers in the list that add up to the target sum. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: list of int: The indices of the two numbers. hash_map = {} for i, num in enumerate(nums): complement = target - num if complement in hash_map: return [hash_map[complement], i] hash_map[num] = i"},{"question":"You are given an array of n integers. You need to find the length of the longest contiguous subarray that contains at most two distinct integers. For example, consider this array: 1 2 1 2 3 4 5 1 2 There are several contiguous subarrays of length 4 that contain exactly two distinct integers: 1 2 1 2 2 1 2 3 4 5 1 2 But there are none of length greater than 4, so the answer is 4. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains an integer n (1 le n le 1000000) which is the number of integers in the array. Each of the following n lines will have an integer k (1 le k le 1000000). -----Output----- Output a single integer, which is the length of the longest contiguous subarray that contains at most two distinct integers. -----Examples----- Sample Input: 9 1 2 1 2 3 4 5 1 2 Sample Output: 4","solution":"def longest_subarray_with_two_distinct(nums): n = len(nums) if n == 0: return 0 if n == 1: return 1 left = 0 right = 0 max_length = 0 num_count = {} while right < n: if nums[right] in num_count: num_count[nums[right]] += 1 else: num_count[nums[right]] = 1 while len(num_count) > 2: num_count[nums[left]] -= 1 if num_count[nums[left]] == 0: del num_count[nums[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length # Usage: # Given an array of integers, like the one from the example: n = 9 nums = [1, 2, 1, 2, 3, 4, 5, 1, 2] result = longest_subarray_with_two_distinct(nums) print(result)"},{"question":"You are given a list of names and birthdates. Your task is to find the youngest person from the list. The input consists of multiple test cases. Each test case starts with an integer n, the number of people in the list, followed by n lines each containing a name and a birthdate in the format YYYY-MM-DD. Input: The first line of the input gives a single integer t, the number of test cases. Each test case starts with a single integer n, the number of people. The next n lines each contain a name (a string without spaces) and a birthdate (in the format YYYY-MM-DD). Output: For each test case, output the name of the youngest person. SAMPLE INPUT 2 3 Alice 1990-05-01 Bob 1985-12-24 Charlie 1992-08-17 2 Dave 2000-04-30 Eve 1999-01-15 SAMPLE OUTPUT Charlie Dave","solution":"from datetime import datetime def find_youngest(t, test_cases): Finds the youngest person from each test case. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains the number of people (int) and a list of (name, birthdate) tuples. Returns: list of strs: Names of the youngest persons for each test case. results = [] for case in test_cases: n, people = case youngest_name = \\"\\" youngest_date = None for name, birthdate in people: birthdate_obj = datetime.strptime(birthdate, \\"%Y-%m-%d\\") if youngest_date is None or birthdate_obj > youngest_date: youngest_name = name youngest_date = birthdate_obj results.append(youngest_name) return results"},{"question":"Write a function `calculate_bmi` that calculates the body mass index (BMI) given a person\'s weight in kilograms and height in meters. The function should return a string indicating the BMI category the person falls into. The BMI categories are defined as follows: - Underweight: BMI < 18.5 - Normal weight: 18.5 ≤ BMI < 24.9 - Overweight: 24.9 ≤ BMI < 29.9 - Obesity: BMI ≥ 29.9 The BMI is calculated using the formula: ``` BMI = weight / (height ** 2) ``` For example: ```python calculate_bmi(70, 1.75) => \'Normal weight\' calculate_bmi(85, 1.75) => \'Overweight\' ``` P.S. The input weight and height are correct positive float numbers. Additionally: - The function should handle two decimal points of precision for BMI calculation. - The return string must exactly match one of the BMI categories provided above.","solution":"def calculate_bmi(weight, height): Calculates the BMI and returns the corresponding BMI category. :param weight: weight in kilograms :param height: height in meters :return: String indicating the BMI category bmi = round(weight / (height ** 2), 2) if bmi < 18.5: return \\"Underweight\\" elif 18.5 <= bmi < 24.9: return \\"Normal weight\\" elif 24.9 <= bmi < 29.9: return \\"Overweight\\" else: return \\"Obesity\\""},{"question":"You are given a string S consisting of lowercase English alphabets. You need to determine if the string can be rearranged such that no two adjacent characters are the same. -----Input:----- - The input consists of a single string S. -----Output:----- Print \\"YES\\" if the string can be rearranged to meet the condition, otherwise print \\"NO\\". -----Constraints----- - The length of the string S is at most 10^5. -----Sample Input:----- aaabb -----Sample Output:----- YES -----Sample Input:----- aaab -----Sample Output:----- NO","solution":"from collections import Counter def can_rearrange_no_adjacent(S): Determine if the string can be rearranged such that no two adjacent characters are the same. :param S: str - The input string. :return: str - \\"YES\\" if the string can be rearranged as needed, otherwise \\"NO\\". freq = Counter(S) max_freq = max(freq.values()) if max_freq > (len(S) + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of strings, return an array containing all strings that are anagrams of any other string in the input array. Anagrams are strings that can be formed by rearranging the letters of another string using all the original letters exactly once. For example, the strings \\"listen\\" and \\"silent\\" are anagrams of each other, as are \\"evil\\" and \\"vile\\". The output should maintain the order of appearance from the original array. Examples: ```python find_anagrams([\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"vile\\", \\"evil\\"]) # Output: [\\"listen\\", \\"silent\\", \\"enlist\\", \\"vile\\", \\"evil\\"] find_anagrams([\\"abcd\\", \\"bcda\\", \\"dabc\\", \\"xyz\\", \\"yxz\\", \\"zxy\\", \\"abc\\"]) # Output: [\\"abcd\\", \\"bcda\\", \\"dabc\\", \\"xyz\\", \\"yxz\\", \\"zxy\\"] find_anagrams([\\"catch\\", \\"match\\", \\"batch\\"]) # Output: [] find_anagrams([\\"\\"])) # Output: [] ``` The function signature should be: ```python def find_anagrams(words: List[str]) -> List[str]: ```","solution":"from typing import List def find_anagrams(words: List[str]) -> List[str]: from collections import defaultdict anagram_groups = defaultdict(list) result = [] for word in words: key = \'\'.join(sorted(word)) anagram_groups[key].append(word) for group in anagram_groups.values(): if len(group) > 1: result.extend(group) return result"},{"question":"Problem Description. James is training for a marathon and wants to track his food intake to ensure optimum performance. He logs the calories of every meal he eats in a day, which he notes down in a list. Your task is to help James calculate the running total of the calories he consumes after each meal. Write a function that takes a list of integers representing the calories of each meal in the order they were consumed, and returns a list of integers representing the cumulative calories consumed after each meal. Input Input description. A list of integers where each integer `i` represents the calories of the i-th meal of the day. Output Output description. A list of integers representing the running total of calories after each meal. Constraints - The list will have at least one meal and at most 10^5 meals. - Each meal\'s calorie count will be between 1 and 1000 inclusive. Example Input: [200, 300, 100, 400] Output: [200, 500, 600, 1000]","solution":"def running_total_calories(meals): Returns the running total of calories after each meal. Parameters: meals (list of int): List of calories for each meal. Returns: list of int: List of running total of calories after each meal. running_totals = [] total = 0 for calories in meals: total += calories running_totals.append(total) return running_totals"},{"question":"Given an array of integers, write a function to find the single element that appears only once in the array while every other element appears exactly twice. Your solution should have a linear runtime complexity and make use of constant extra space. For example: - If the input array is [2, 2, 1], the function should return 1. - If the input array is [4, 1, 2, 1, 2], the function should return 4. You can assume that the array is non-empty and only one unique element appears once.","solution":"def single_number(nums): Finds the single element that appears only once in the array. Every other element appears exactly twice. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"You have been given an integer array `arr` of length `n`. Write a program to find and print the maximum difference between any two elements in the array such that the larger element appears after the smaller element in the array. Input Format The first line contains an integer `n`, the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array. Output Format Print a single integer, the maximum difference between any two elements such that the larger element comes after the smaller element. Constraints 1 ≤ n ≤ 100 -10^3 ≤ arr[i] ≤ 10^3 SAMPLE INPUT 6 2 3 10 6 4 8 SAMPLE OUTPUT 8","solution":"def max_difference(arr): Finds the maximum difference between any two elements in the array such that the larger element comes after the smaller element. if len(arr) < 2: return 0 min_element = arr[0] max_diff = float(\'-inf\') for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff if max_diff != float(\'-inf\') else 0"},{"question":"In a faraway kingdom, there is a small village where all houses are built in a straight line. Each house has a certain amount of gold stored in it. To protect the village from thieves, the village council has hired guards. The guards will be positioned such that they can protect the maximum amount of gold. The catch is that the guards cannot be positioned at two adjacent houses because it would be too conspicuous. Therefore, you need to determine the maximum amount of gold that can be protected if the guards are strategically positioned. Each test case is described with the number of houses and the amount of gold stored in each house. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of houses. The second line contains N space-separated integers g_{1}, g_{2}, ..., g_{N} where g_{i} denotes the amount of gold in the i-th house. ------ Output ------ For each test case, print a single line containing the maximum amount of gold that can be protected. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^4 0 ≤ g_{i} ≤ 10^4 the sum of all N across all test cases does not exceed 10^5 ----- Sample Input 1 ------ 3 4 5 5 10 100 3 1 2 3 5 10 1 10 1 10 ----- Sample Output 1 ------ 105 4 30 ----- Explanation 1 ------ Example case 1: - The optimal way is to position guards at house 1 (5 gold) and house 4 (100 gold), summing up to 105 gold protected. Example case 2: - The optimal way is to position guards at house 1 (1 gold) and house 3 (3 gold), summing up to 4 gold protected. Example case 3: - The optimal way is to position guards at house 1 (10 gold), house 3 (10 gold), and house 5 (10 gold), summing up to 30 gold protected.","solution":"def max_gold_protected(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] gold = test_cases[i][1] if N == 0: results.append(0) continue if N == 1: results.append(gold[0]) continue dp = [0] * N dp[0] = gold[0] dp[1] = max(gold[0], gold[1]) for j in range(2, N): dp[j] = max(dp[j-1], dp[j-2] + gold[j]) results.append(dp[-1]) return results"},{"question":"Given a list of intervals where each interval is represented as [start, end], merge all overlapping intervals and return the resulting list of non-overlapping intervals in sorted order. An interval [a,b) is considered to overlap with [c,d) if there is any integer k such that a ≤ k < b and c ≤ k < d (i.e., there is some common part). Merge the intervals to form the smallest possible set of non-overlapping intervals. Example 1: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Intervals [1,3] and [2,6] overlap, so they are merged into [1,6]. Example 2: Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] overlap, so they are merged into [1,5]. Note: - The intervals should be returned in sorted order. - The intervals should not contain duplicates. - The intervals may be unsorted in the input, but the output must be sorted. - 1 <= intervals.length <= 10^4 - intervals[i].length = 2 - 0 <= intervals[i][0] <= intervals[i][1] <= 10^9","solution":"def merge_intervals(intervals): Merges all overlapping intervals and returns the resulting list of intervals. if not intervals: return [] # Sort the intervals by start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] if current[0] <= last_merged[1]: # Merge the current interval with the last merged interval last_merged[1] = max(last_merged[1], current[1]) else: # No overlap, add it to the list merged.append(current) return merged"},{"question":"Mina has a list of integers representing the costs of various products in a store. She wants to buy exactly two products such that the sum of their costs is as close as possible to a given budget. Write a function that takes an array of integers (costs) and a target integer (budget) and returns the pair of indices of the products that Mina should buy. If there are multiple pairs with the same closest sum, return any one of them. # Example 1: Input: costs = [10, 22, 28, 29, 30, 40], budget = 54 Output: [22, 30] Explanation: The pair (22, 30) has a sum of 52 which is close to the budget 54. # Example 2: Input: costs = [1, 3, 4, 7, 10], budget = 15 Output: [4, 10] Explanation: The pair (4, 10) has a sum of 14 which is close to the budget 15. # Your Task: You don\'t need to read input or print anything. Complete the function `closestPair()`, which takes the array `costs[]`, and its size `N`, and the integer `budget` as input parameters, and returns the pair of indices of the closest sum to the budget. # Expected Time Complexity: O(N log N) # Expected Auxiliary Space: O(1) # Constraints: 1 ≤ N ≤ 10^5 1 ≤ costs[i] ≤ 10^5","solution":"def closest_pair(costs, budget): costs = sorted(costs) left = 0 right = len(costs) - 1 closest_sum = float(\'inf\') best_pair = [] while left < right: current_sum = costs[left] + costs[right] if abs(current_sum - budget) < abs(closest_sum - budget): closest_sum = current_sum best_pair = [costs[left], costs[right]] if current_sum < budget: left += 1 elif current_sum > budget: right -= 1 else: break return best_pair"},{"question":"Tom is interested in finding unique pairs of numbers from a list that add up to a given target value. He has a list of integers and a target value where he wants to find pairs of distinct indices (i, j) such that the sum of numbers at those indices equals the target value. He also wants to avoid duplicates; that is, (i, j) and (j, i) should be considered the same pair. Help Tom by writing a program that outputs all unique pairs that sum up to the target value. Input: - The first line contains an integer T, denoting the number of test cases. - For each test case, the first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers representing the list of numbers. - The third line contains the target sum value. Output: - For each test case, output the list of unique pairs (i, j) in any order, where 0 ≤ i < j < N, and numbers[i] + numbers[j] equals the target value. - If no such pair exists, output an empty list. Constraints: 1 ≤ T ≤ 10 If T is not in this range, print \\"Invalid Test\\" (without the quotes) 1 ≤ N ≤ 100 If N is not in this range, print \\"Invalid Input\\" (without the quotes) -10^5 ≤ number[i] ≤ 10^5 -10^5 ≤ target ≤ 10^5 For Example, if the input is: 2 4 1 2 3 4 5 3 1 2 3 7 SAMPLE OUTPUT [(0, 3), (1, 2)] []","solution":"def find_unique_pairs(test_cases): Find unique pairs from the list of integers for each test case that add up to the target value. Handles invalid input constraints, prints \\"Invalid Test\\" or \\"Invalid Input\\" as appropriate. Args: test_cases (list): A list of dictionaries containing test case data, with format: { \\"N\\": (int) number of elements, \\"numbers\\": (list) list of integers, \\"target\\": (int) target value. } Returns: list: A list containing lists of unique pairs for each test case. results = [] T = len(test_cases) if T < 1 or T > 10: return \\"Invalid Test\\" for case in test_cases: N = case[\\"N\\"] if N < 1 or N > 100: return \\"Invalid Input\\" numbers = case[\\"numbers\\"] target = case[\\"target\\"] pairs = [] seen = {} for i in range(N): for j in range(i + 1, N): if numbers[i] + numbers[j] == target: if (i, j) not in seen and (j, i) not in seen: pairs.append((i, j)) seen[(i, j)] = True results.append(pairs) return results # Example usage: # test_cases = [ # {\\"N\\": 4, \\"numbers\\": [1, 2, 3, 4], \\"target\\": 5}, # {\\"N\\": 3, \\"numbers\\": [1, 2, 3], \\"target\\": 7} # ] # print(find_unique_pairs(test_cases))"},{"question":"You are given an array of positive integers representing the heights of a set of buildings. Each building is exactly 1 unit wide and can be thought of as a vertical line segment from (i, 0) to (i, h_i), where h_i is the height of the i-th building. The width of each building is 1 unit. You need to calculate the maximum area of water that can be trapped between these buildings. The area of water trapped between two buildings is defined as the minimum height of the two buildings times the width of the gap between them. Write a function that takes an array of positive integers and returns the maximum area of water that can be trapped. Function Signature: ```python def max_trapped_water(heights: List[int]) -> int: ``` # Input - A list of integers, `heights`, where: * The length of `heights` will be between 2 and 100,000. * Each element in `heights` will be between 1 and 10^5. # Output - An integer, representing the maximum area of water that can be trapped between two buildings. # Examples Example 1 ```python max_trapped_water([1, 8, 6, 2, 5, 4, 8, 3, 7]) ``` Output: ``` 49 ``` Explanation: The maximum area of water that can be trapped is between index 1 and index 8, which has a height of 7 and a width of 7, giving an area of 49. Example 2 ```python max_trapped_water([3, 9, 3, 4, 7, 2, 12, 6]) ``` Output: ``` 45 ``` Explanation: The maximum area of water that can be trapped is between index 1 and index 6, which has a height of 9 and a width of 5, giving an area of 45.","solution":"def max_trapped_water(heights): Returns the maximum area of water that can be trapped between the buildings. left = 0 right = len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left area = height * width max_area = max(max_area, area) # Move the pointer which is at the smaller height if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Create a function `custom_zip` that replicates the behavior of Python\'s built-in `zip` function without using `zip` itself or any related built-in functions that simulate its behavior. The function should take in two or more iterables and return an iterator of tuples. Each tuple contains the i-th element from each of the argument sequences or iterables. The iterator should stop when the shortest input iterable is exhausted. If one of the inputs is modified during iteration, the function should reflect this change. For example: ```python def custom_zip(*iterables): # Your implementation here # Example usage: list(custom_zip([1, 2, 3], [\'a\', \'b\', \'c\'], [True, False, True])) # Output: [(1, \'a\', True), (2, \'b\', False), (3, \'c\', True)] # Example with modified input: a = [1, 2, 3] b = [\'a\', \'b\', \'c\'] result = custom_zip(a, b) a.append(4) print(list(result)) # Output: [(1, \'a\'), (2, \'b\'), (3, \'c\')] ``` The function should be designed to imitate the built-in `zip` closely and be free of any direct checks or calls to the built-in `zip` or similar functions.","solution":"def custom_zip(*iterables): Custom implementation of the built-in zip function. Takes any number of iterables and returns an iterator of tuples. Each tuple contains the i-th element from each of the argument sequences or iterables. Stops when the shortest input iterable is exhausted. # Create a list of iterators from the input iterables. iterators = [iter(it) for it in iterables] while True: result = [] for it in iterators: try: # Try to get the next item from each iterator. result.append(next(it)) except StopIteration: # If any iterator is exhausted, exit the loop. return yield tuple(result)"},{"question":"Write a function named `sum_even_fibonacci` that calculates the sum of all the even Fibonacci numbers up to a given limit. The function should take an integer `limit` as an argument and return the sum of all even Fibonacci numbers less than or equal to that limit. For example: ```python sum_even_fibonacci(10) == 10 ``` Because the even Fibonacci numbers up to 10 are 2 and 8, and their sum is 10. For reference, the first two numbers in the Fibonacci sequence are 0 and 1, and each subsequent number is the sum of the previous two.","solution":"def sum_even_fibonacci(limit): Calculate the sum of all the even Fibonacci numbers up to a given limit. :param limit: The upper bound of the range to check for even Fibonacci numbers. :return: The sum of all even Fibonacci numbers less than or equal to the limit. if limit < 2: return 0 a, b = 0, 1 sum_even = 0 while b <= limit: if b % 2 == 0: sum_even += b a, b = b, a + b return sum_even"},{"question":"In a game, there are N cards placed in a row, each represented by a number written on it. A player can either pick the card from the beginning or the end of the row in each turn. The card picked is removed from the row and added to the player\'s score. The two players alternate turns, and the first player aims to maximize their score while the second player tries to minimize the first player\'s score (by maximizing their own score). Given the sequence of card values, write an algorithm to compute the maximum score the first player can achieve if both players play optimally. Input - First line contains the number of test cases. Each test case starts with an integer N representing the number of cards, followed by N integers representing the values on the cards. Output - For each test case, output a single integer representing the maximum score the first player can achieve. SAMPLE INPUT 2 4 1 2 9 4 3 4 4 4 SAMPLE OUTPUT 10 8 Explanation TC #1 - If the first player takes 4, the sequence becomes [1, 2, 9] - Second player then takes 9, the sequence becomes [1, 2] - First player then takes 2, the sequence becomes [1] - Second player then takes 1, the sequence becomes [] Total score for the first player = 4 + 2 + 4 = 10 TC #2 - If the first player takes either end, they will eventually end up with the total 8 when both play optimally, as they trade off picking the middle value.","solution":"def max_score(cards): Compute the maximum score the first player can achieve if both players play optimally. n = len(cards) dp = [[0] * n for _ in range(n)] for s in range(n): for i in range(n - s): j = i + s x = dp[i+2][j] if i + 2 <= j else 0 y = dp[i+1][j-1] if i + 1 <= j - 1 else 0 z = dp[i][j-2] if i <= j - 2 else 0 dp[i][j] = max(cards[i] + min(x, y), cards[j] + min(y, z)) return dp[0][n-1] def solve_game(test_cases): results = [] for case in test_cases: n, cards = case[0], case[1:] results.append(max_score(cards)) return results"},{"question":"You have been hired to help a popular social media platform analyze its data. The platform stores user information and interactions in two separate lists: users and interactions. Each user is represented by a dictionary with unique user ids and the users\' names. Each interaction is represented by another dictionary with from_user_id, to_user_id, and interaction_type. Your task is to find the most active user on the platform based on the number of interactions they initiated. An interaction can be of several types such as \'like\', \'comment\', \'follow\', etc., but for this task, you only count the number of interactions, regardless of type. Write a function `most_active_user(users, interactions)` that takes in two parameters: - `users`, a list of dictionaries, where each dictionary has a unique \'id\' and a \'name\'. - `interactions`, a list of dictionaries, where each dictionary has \'from_user_id\', \'to_user_id\', and \'interaction_type\'. The function should return the name of the most active user. If there are multiple users with the same highest number of interactions, return the name of the one who appears first in the `users` list. # Input - The `users` list contains between 1 and 1000 user dictionaries. Each dictionary contains: - \'id\': a unique integer between 1 and 1000. - \'name\': a string representing the user\'s name. - The `interactions` list contains between 0 and 10000 interaction dictionaries. Each dictionary contains: - \'from_user_id\': an integer representing the id of the user initiating the interaction. - \'to_user_id\': an integer representing the id of the user receiving the interaction. - \'interaction_type\': a string which is either \'like\', \'comment\', or \'follow\'. # Output - The function should return a string, the name of the most active user. # Examples Input ```python users = [ {\'id\': 1, \'name\': \'Alice\'}, {\'id\': 2, \'name\': \'Bob\'}, {\'id\': 3, \'name\': \'Charlie\'} ] interactions = [ {\'from_user_id\': 1, \'to_user_id\': 2, \'interaction_type\': \'like\'}, {\'from_user_id\': 2, \'to_user_id\': 1, \'interaction_type\': \'comment\'}, {\'from_user_id\': 1, \'to_user_id\': 3, \'interaction_type\': \'follow\'}, {\'from_user_id\': 1, \'to_user_id\': 2, \'interaction_type\': \'like\'} ] ``` Output ```python \'Alice\' ``` Input ```python users = [ {\'id\': 1, \'name\': \'Alice\'}, {\'id\': 2, \'name\': \'Bob\'}, {\'id\': 3, \'name\': \'Charlie\'}, {\'id\': 4, \'name\': \'David\'} ] interactions = [ {\'from_user_id\': 2, \'to_user_id\': 1, \'interaction_type\': \'comment\'}, {\'from_user_id\': 2, \'to_user_id\': 3, \'interaction_type\': \'follow\'}, {\'from_user_id\': 2, \'to_user_id\': 4, \'interaction_type\': \'like\'}, {\'from_user_id\': 3, \'to_user_id\': 1, \'interaction_type\': \'like\'}, {\'from_user_id\': 3, \'to_user_id\': 2, \'interaction_type\': \'comment\'}, {\'from_user_id\': 3, \'to_user_id\': 4, \'interaction_type\': \'follow\'} ] ``` Output ```python \'Bob\' ```","solution":"def most_active_user(users, interactions): Returns the name of the most active user based on the number of interactions initiated. Parameters: users (list): List of dictionaries where each dictionary contains \'id\' and \'name\'. interactions (list): List of dictionaries where each dictionary contains \'from_user_id\', \'to_user_id\', and \'interaction_type\'. Returns: str: The name of the most active user. # Dictionary to count the number of interactions initiated by each user user_interaction_count = {user[\'id\']: 0 for user in users} # Counting the number of interactions initiated by each user for interaction in interactions: from_user_id = interaction[\'from_user_id\'] if from_user_id in user_interaction_count: user_interaction_count[from_user_id] += 1 # Finding the most active user max_interactions = -1 most_active_user_id = None for user in users: user_id = user[\'id\'] if user_interaction_count[user_id] > max_interactions: max_interactions = user_interaction_count[user_id] most_active_user_id = user_id # Return the name of the most active user for user in users: if user[\'id\'] == most_active_user_id: return user[\'name\']"},{"question":"A group of scientists is working on a project where they need to analyze a collection of DNA sequences. A DNA sequence is composed of the nucleotide characters \'A\', \'C\', \'G\', and \'T\'. The scientists are particularly interested in the longest contiguous subsequence that strictly alternates between two different nucleotides. For example, in the sequence \\"ACGTACGT\\", the longest such subsequence is \\"ACGTACGT\\" itself since it alternates between \'A\', \'C\', \'G\', and \'T\'. However, in the sequence \\"AAAAACCCCCGGGGTTTTT\\", there is no alternating subsequence longer than 2 characters since each nucleotide is grouped together. Your task is to write a program that, given a DNA sequence, finds the length of the longest contiguous subsequence that strictly alternates between two different nucleotides. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) representing the length of the DNA sequence. The second line contains the DNA sequence of length n. Output Output a single integer representing the length of the longest contiguous subsequence that strictly alternates between two different nucleotides. Examples Input 8 ACGTACGT Output 8 Input 20 AAAACCCCGGGGTTTTTTTT Output 2","solution":"def longest_alternating_subsequence(n, dna_sequence): Finds the length of the longest contiguous subsequence in a DNA sequence that strictly alternates between two different nucleotides. Parameters: n (int): Length of the DNA sequence dna_sequence (str): The DNA sequence consisting of characters \'A\', \'C\', \'G\', and \'T\'. Returns: int: Length of the longest alternating subsequence. if n < 2: return 0 longest_length = 1 current_length = 1 for i in range(1, n): if dna_sequence[i] != dna_sequence[i-1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"Given a binary search tree (BST) and a value \'x\', your task is to find and print the largest value in the BST that is less than or equal to \'x\'. You are required to complete the function `findLargestSmallerValue` which returns the largest value smaller than or equal to \'x\'. You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually. Example 1: Input 5 2 1 3 5 4 3 Output 3 Example 2: Input 6 8 3 10 1 6 14 7 Output 6 Input Format: The task is to complete the function `findLargestSmallerValue` which takes 3 arguments: the root of the BST (root), an integer \'x\' indicating the value to compare against, and the number of nodes in the BST (N). The function should return the largest value in the BST that is less than or equal to \'x\'. If no such value exists, return -1. Output Format: The function should return the integer value of the largest value less than or equal to \'x\'. If no such value exists, return -1. Your Task: Complete the function `findLargestSmallerValue`. Constraints: 1 <= T <= 30 1 <= Number of nodes in BST <= 100 1 <= Data of a node <= 1000 Note: The Input/Output format and example given are used for the system\'s internal purpose and should be used by a user for expected output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class TreeNode: def __init__(self, key): self.val = key self.left = None self.right = None def findLargestSmallerValue(root, x, N): Function to find the largest value in the BST that is smaller than or equal to x. result = -1 while root: if root.val <= x: result = root.val root = root.right else: root = root.left return result"},{"question":"You are given two sequences of integers a_1, a_2, ..., a_n and b_1, b_2, ..., b_m. Find whether there exists a non-empty subsequence that is common to both sequences. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the sizes of the original sequences. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the first sequence. The third line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ 10^9) — the elements of the second sequence. -----Output----- In a single line print either \\"YES\\" (without the quotes) if there exists a common non-empty subsequence, or \\"NO\\" (without the quotes) if no such subsequence exists. -----Examples----- Input 3 4 1 2 3 4 5 2 6 Output YES Input 5 5 1 3 5 7 9 2 4 6 8 10 Output NO Input 3 3 6 7 8 8 7 6 Output YES -----Note----- In the first example, the number 2 is common to both sequences, forming a non-empty subsequence. In the second example, there are no common elements between the two sequences, so no common subsequence exists. In the third example, all numbers 6, 7, and 8 are common to both sequences.","solution":"def common_subsequence_exists(n, m, seq_a, seq_b): Determines if there exists a non-empty subsequence that is common to both sequences. :param n: int - the size of the first sequence :param m: int - the size of the second sequence :param seq_a: list of int - the elements of the first sequence :param seq_b: list of int - the elements of the second sequence :return: str - \\"YES\\" if a common subsequence exists, otherwise \\"NO\\" set_a = set(seq_a) set_b = set(seq_b) common_elements = set_a.intersection(set_b) if common_elements: return \'YES\' else: return \'NO\'"},{"question":"You are given two arrays of integers `arr1` and `arr2` of the same length. Your task is to create a new array `result` such that each `result[i]` is the sum of `arr1[i]` and `arr2[i]`. However, if the sum is odd, you should replace the sum with the closest even number (greater or equal to the sum). If the sum is already even, keep it as is. Return the `result` array. Example 1: Input: arr1 = [1, 2, 3], arr2 = [4, 5, 6] Output: [6, 8, 10] Explanation: - 1 + 4 = 5 (odd, replace with 6) - 2 + 5 = 7 (odd, replace with 8) - 3 + 6 = 9 (odd, replace with 10) Example 2: Input: arr1 = [2, 4, 6], arr2 = [1, 3, 5] Output: [4, 8, 12] Explanation: - 2 + 1 = 3 (odd, replace with 4) - 4 + 3 = 7 (odd, replace with 8) - 6 + 5 = 11 (odd, replace with 12) Example 3: Input: arr1 = [1, 1, 1], arr2 = [1, 1, 1] Output: [2, 2, 2] Explanation: - 1 + 1 = 2 (even, keep as is) - 1 + 1 = 2 (even, keep as is) - 1 + 1 = 2 (even, keep as is) Constraints: - Both arr1 and arr2 will have a length between 1 and 1000, inclusive. - Each integer in arr1 and arr2 will be between 0 and 10^9, inclusive.","solution":"def sum_and_adjust(arr1, arr2): Returns a new array with element-wise sum of arr1 and arr2. If the sum is odd, replace it with the next even number. result = [] for a, b in zip(arr1, arr2): temp_sum = a + b if temp_sum % 2 != 0: temp_sum += 1 result.append(temp_sum) return result"},{"question":"Given a string S consisting of lowercase English letters, Chef wants to transform it into a palindrome. To do so, Chef can perform the following operations on S as many times as needed: 1. Select any character in S and change it to any other lowercase English character. Identify the minimum number of operations Chef needs to perform to transform S into a palindrome. ------ Input ------ The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains the string S. ------ Output ------ For each test case, print a single line containing one integer — the minimum number of operations required to transform S into a palindrome. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{5} Sum of lengths of all strings does not exceed 10^{6}. ----- Sample Input 1 ------ 2 abc aabb ----- Sample Output 1 ------ 1 2 ----- Explanation 1 ------ Example case 1: To turn \\"abc\\" into a palindrome, Chef can change \'c\' to \'a\', making \\"aba\\". Thus, only one operation is needed. Example case 2: To turn \\"aabb\\" into a palindrome, Chef can change either both \'a\'s to \'b\'s or both \'b\'s to \'a\'s. Each way requires exactly two operations.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform the string s into a palindrome. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations def process_test_cases(test_cases): Processes multiple test cases and returns a list containing the minimum number of operations for each case. results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"Gina is an archivist and one of her tasks involves data integrity checks. One day, she found an old text file containing a string of lowercase English letters. The integrity of the data in this file is guaranteed by ensuring that no two adjacent characters in the string are the same. However, due to age, the file might have become corrupted and might contain pairs of adjacent characters that are identical. Gina needs your help in modifying the string so that no two adjacent characters are the same. To achieve this, she can perform the following operation any number of times: Select any character from \'a\' to \'z\' and insert it between any two consecutive characters in the string. Your task is to determine the optimal way to insert the minimum number of characters such that no two adjacent characters in the string are the same. -----Task----- Given a string, find the minimum number of insertions needed to make sure that no two adjacent characters in the string are the same. -----Input----- The input consists of a single string s (1 leq |s| leq 100000) of lowercase English letters. -----Output----- Output a single integer, the minimal number of insertions needed. -----Examples----- Sample Input 1: aabb Sample Output 1: 2 Sample Input 2: abcd Sample Output 2: 0 Sample Input 3: aaaa Sample Output 3: 3","solution":"def min_insertions_no_adjacent_duplicates(s): Returns the minimum number of insertions needed to make sure that no two adjacent characters in the string are the same. n = len(s) if n == 0: return 0 insertions = 0 for i in range(1, n): if s[i] == s[i - 1]: insertions += 1 return insertions"},{"question":"Alex is interested in a special sequence of numbers defined by the following rule: Initialize an integer S to 1. For every integer i starting from 1, if S is odd, add i to S, otherwise multiply S by i. You are required to determine the value of S after performing this operation `N` times, where `N` is a given integer. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N. Output For each test case, output the value of S after performing the operation N times. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^8 Example Input 3 2 3 4 Output 2 3 5 Explanation For test case 1: N = 2 Initial S = 1 Step 1: S is odd, so S = S + 1 = 2 Step 2: S is even, so S = S * 2 = 4 For test case 2: N = 3 Initial S = 1 Step 1: S is odd, so S = S + 1 = 2 Step 2: S is even, so S = S * 2 = 4 Step 3: S is even, so S = S * 3 = 12 For test case 3: N = 4 Initial S = 1 Step 1: S is odd, so S = S + 1 = 2 Step 2: S is even, so S = S * 2 = 4 Step 3: S is even, so S = S * 3 = 12 Step 4: S is even, so S = S * 4 = 48","solution":"def calculate_sequence_value(N): Calculates the value of S after performing N operations as per the rule. :param N: int :return: int S = 1 for i in range(1, N + 1): if S % 2 == 1: S += i else: S *= i return S def solve(T, cases): Solves the sequence value for multiple test cases. :param T: int :param cases: list of int :return: list of int results = [] for N in cases: results.append(calculate_sequence_value(N)) return results"},{"question":"Jane has a rectangular farm divided into a grid of cells with m rows and n columns (m, n ≥ 1). Each cell contains either a tree (represented by 1) or is empty land (represented by 0). Trees cannot be moved. Jane wants to build the largest possible square playground on her farm, such that no trees are inside this square. Your task is to determine the side length of the largest possible square playground that Jane can build on the farm. -----Input----- The first line contains two space-separated integers m and n (1 ≤ m, n ≤ 1000). The next m lines contain n space-separated integers (either 0 or 1), representing the grid. -----Output----- Output a single integer, the side length of the largest possible square playground. -----Examples----- Input 4 5 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 Output 2 Input 3 4 1 1 1 1 1 1 1 1 1 1 1 1 Output 0 -----Note----- For the first sample, the largest square playground is of side length 2, and can be located at positions like (2,3) to (3,4). For the second sample, it\'s impossible to place any playground clearing trees, hence the output is 0.","solution":"def largest_square_playground(m, n, grid): if m == 0 or n == 0: return 0 # Initialize dp array with zeros dp = [[0] * n for _ in range(m)] max_side = 0 # Fill dp array for i in range(m): for j in range(n): if grid[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"A university holds a programming competition every year. Each team consists of exactly three students. The winners are determined based on the average score of the students in a team. If two teams have the same average score, the team with the highest individual score among the students is ranked higher. If the highest individual scores also tie, the team with the next highest individual score wins. Given the scores of the students and teams formed, determine the winning team. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of teams. The next t lines each contain three integers, s1, s2, and s3 (0 ≤ s1, s2, s3 ≤ 100) — the scores of the three team members. Output Print a single line containing the index of the winning team (1-based). Examples Input 3 50 60 70 80 40 60 90 80 70 Output 3 Input 2 100 100 100 99 100 100 Output 1 Note In the first example, team 3 has the highest average score: (90+80+70)/3 = 80. In the second example, both teams have the same average score of 100, but since team 1 has a higher individual score (100) compared to team 2 whose highest scores are both 100, team 1 is the winner.","solution":"def find_winning_team(scores): Finds the winning team based on the given scores. Parameters: - scores: List of lists, where each sublist contains three integers representing the scores of a team members. Returns: - An integer representing the 1-based index of the winning team. def team_ranking_key(team_scores): return (sum(team_scores)/3, max(team_scores), sorted(team_scores, reverse=True)[1]) best_index = 0 best_team = scores[0] for i in range(1, len(scores)): if team_ranking_key(scores[i]) > team_ranking_key(best_team): best_index = i best_team = scores[i] return best_index + 1 # +1 to convert 0-based index to 1-based index"},{"question":"Write a function that takes a string as input and returns a new string with all the vowels removed. For example, the input string `\\"hello world\\"` should return `\\"hll wrld\\"`. ```if:racket In Racket, you can use the `string-remove` function to remove characters from the input string. ```","solution":"def remove_vowels(input_string): Returns a new string with all the vowels removed from the input string. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in input_string if char not in vowels)"},{"question":"You have a list of words, and you need to find which word forms the longest chain. Each word in the chain differs by exactly one letter from the previous word in the chain, and can be formed by removing exactly one letter from the previous word. Write a function to determine the length of the longest possible chain given a list of words. Parameters: - The input to your function is a list of strings, where each string represents a word. Output: - Return an integer representing the length of the longest chain. Example 1: Input: words = [\\"a\\", \\"b\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"] Output: 4 Explanation: The longest chain is \\"a\\" -> \\"ba\\" -> \\"bda\\" -> \\"bdca\\". Example 2: Input: words = [\\"xbc\\", \\"pcxbcf\\", \\"xb\\", \\"cxbc\\", \\"pcxbc\\"] Output: 5 Explanation: The longest chain is \\"xb\\" -> \\"xbc\\" -> \\"cxbc\\" -> \\"pcxbc\\" -> \\"pcxbcf\\".","solution":"def longestStrChain(words): words.sort(key=len) longest_chain = {} max_length = 1 for word in words: longest_chain[word] = 1 for i in range(len(word)): prev = word[:i] + word[i+1:] if prev in longest_chain: longest_chain[word] = max(longest_chain[word], longest_chain[prev] + 1) max_length = max(max_length, longest_chain[word]) return max_length"},{"question":"A company wants to compress a given string such that the same characters appearing consecutively are replaced by the character followed by their count. For example, the string \\"aaabbcaaa\\" would be compressed to \\"a3b2c1a3\\". If the compressed string is not smaller than the original string, then the function should return the original string. Write a function `compressString` that takes a string `S` and compresses it according to the rules mentioned above. The function should return the compressed string or the original string, whichever is shorter. Example 1: Input: S = \\"aabbcc\\" Output: \\"aabbcc\\" Explanation: The compressed string \\"a2b2c2\\" is longer than the original string, so the original string is returned. Example 2: Input: S = \\"aaabbbccc\\" Output: \\"a3b3c3\\" Explanation: The compressed string \\"a3b3c3\\" is shorter than the original string, so the compressed string is returned. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `compressString()` which takes a string `S` as input and returns the compressed string or the original string, whichever is shorter. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 <= |S| <= 10^4","solution":"def compressString(S): Compresses the given string such that consecutive characters are replaced by the character followed by their count. If the compressed string is not smaller than the original string, the original string is returned. n = len(S) if n == 0: return S compressed = [] count = 1 for i in range(1, n): if S[i] == S[i - 1]: count += 1 else: compressed.append(S[i - 1] + str(count)) count = 1 compressed.append(S[-1] + str(count)) compressed_string = \'\'.join(compressed) if len(compressed_string) >= n: return S else: return compressed_string"},{"question":"Description You are provided with a list of integers where each integer represents the height of a building in a series of buildings. Your task is to determine the total amount of rainwater that would be trapped between the buildings after a downpour. Each building is represented by a bar, and the amount of rainwater trapped above a bar is influenced by the tallest bars to the left and right of that bar. Input Format A single line containing space-separated integers representing the heights of the buildings. Output Format A single integer representing the total amount of trapped rainwater. Input Limits 1 <= Number of buildings <= 1000 0 <= Height of each building <= 1000 SAMPLE INPUT 3 0 2 0 4 SAMPLE OUTPUT 7 Explanation In the given sample input, the bars would trap 3 units of water between the first and third buildings, 1 unit of water above the third building, and 3 units of water between the third and fifth buildings, for a total of 7 units of trapped rainwater. Hence, the output is 7. You are required to write the program to compute the total amount of trapped rainwater.","solution":"def trap_rainwater(heights): Given a list of integers representing the heights of buildings, returns the total amount of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Sherlock Holmes received a challenge from Professor Moriarty. Professor Moriarty gave Sherlock a string consisting of lowercase English letters and asked him to determine if it\'s possible to rearrange the string to form a palindrome. A palindrome is a string that reads the same forward and backward. Sherlock, being the genius detective he is, quickly figured out the solution. Now it\'s your turn to help him by writing a program to determine if such a rearrangement is possible. Input A single line containing a string s (1 ≤ |s| ≤ 10000), consisting of lowercase English letters. Output Output \\"YES\\" if it\'s possible to rearrange the string to form a palindrome, otherwise output \\"NO\\". Examples Input civic Output YES Input ivicc Output YES Input hello Output NO Note In the first example, the input string \\"civic\\" is already a palindrome. In the second example, the input string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. In the third example, the input string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if it\'s possible to rearrange the string to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count_chars = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count_chars <= 1 else \\"NO\\""},{"question":"Task Write a function named `frequency_count` that takes a string as an argument and returns a dictionary where the keys are the characters from the input string, and the values are the number of times each character appears in the input string. The function should ignore spaces and the characters should be case-sensitive. # Examples ```python frequency_count(\\"hello world\\") # Should return {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} frequency_count(\\"The quick brown fox jumps over the lazy dog\\") # Should return {\'T\': 1, \'h\': 2, \'e\': 3, \'q\': 1, \'u\': 2, \'i\': 1, \'c\': 1, \'k\': 1, \'b\': 1, \'r\': 2, \'o\': 4, \'w\': 1, \'n\': 1, \'f\': 1, \'x\': 1, \'j\': 1, \'m\': 1, \'p\': 1, \'s\': 1, \'v\': 1, \'t\': 1, \'l\': 1, \'a\': 1, \'z\': 1, \'y\': 1, \'d\': 1, \'g\': 1} ```","solution":"def frequency_count(s): Returns a dictionary where the keys are the characters from the input string (excluding spaces), and the values are the number of times each character appears. freq_dict = {} for char in s: if char != \' \': if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"You are given an n x n matrix of integers where each cell represents the height of a hill at that position. You have the ability to flatten some of the hills to make them all equal in height. However, the cost of flattening a hill is proportional to the difference in height you need to flatten. Specifically, the cost is given by the absolute difference in height between the original hill and the target height. Your objective is to find the minimum cost required to make all the hills the same height. # Input - The first line contains an integer n (1 ≤ n ≤ 200), the size of the matrix. - The next n lines each contain n integers, representing the heights of the hills in the matrix. Each height is an integer between 0 and 10^6. # Output - Output a single integer, the minimum cost to flatten all the hills to the same height. # Example Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 12 ``` Explanation: - To make all hills the same height with minimal cost, you may choose the median of all heights. - In this example, flattening all hills to the height 5 will result in the minimum cost (|1-5| + |2-5| + |3-5| + |4-5| + |6-5| + |7-5| + |8-5| + |9-5| = 4 + 3 + 2 + 1 + 1 + 2 + 3 + 4 = 20).","solution":"def min_cost_to_flatten_hills(matrix): Given an n x n matrix of hill heights, return the minimum cost to make all hills the same height. The minimum cost is the sum of the absolute differences between each hill height and the median height. n = len(matrix) heights = [] # Flatten the matrix into a single list of heights for row in matrix: heights.extend(row) # Sort the list of heights to find the median heights.sort() # The median height median_height = heights[(n*n)//2] # Calculate the minimum cost to make all hills the same height min_cost = sum(abs(height - median_height) for height in heights) return min_cost"},{"question":"John is a librarian and is organizing a new section of the library. He has two lists of book IDs representing two subsets of books in the library. However, some books might be common to both subsets and he needs to identify those. His task is to combine the two lists into a single sorted list of book IDs that appear in either or both subsets. Write a program that takes two lists of book IDs, merges them, and outputs a single sorted list with unique book IDs. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains three lines of input. - The first line contains two integers N and M, the number of book IDs in the first and second lists respectively. - The second line contains N space-separated integers representing the first list of book IDs. - The third line contains M space-separated integers representing the second list of book IDs. -----Output:----- For each test case, output in a single line the combined sorted list of unique book IDs. -----Constraints----- - 1 leq T leq 10 - 1 leq N, M leq 10^5 - Each book ID is a positive integer and can be as large as 10^9 -----Sample Input:----- 1 3 4 10 20 30 20 40 50 60 -----Sample Output:----- 10 20 30 40 50 60","solution":"def merge_and_sort_books(T, test_cases): Merges and sorts the book IDs from each pair of lists. Parameters: - T: Integer, number of test cases. - test_cases: List of tuples, where each tuple contains two integers N and M, and two lists of N and M integers respectively representing book IDs. Returns: - A list of lists, where each inner list is the sorted list of unique book IDs for a corresponding test case. results = [] for case in test_cases: N, M, list1, list2 = case combined = set(list1).union(set(list2)) sorted_list = sorted(combined) results.append(sorted_list) return results"},{"question":"A company has recently installed a new centralized logging system that stores log messages in a unified format. Each log message is represented as two integer values: a timestamp and a severity score. The timestamp indicates when the log message was created, and the severity score indicates its importance. The new logging system supports the following operations: 1. Adding a new log message. 2. Querying the highest severity score within a given time range [start_time, end_time]. You need to implement both functionalities in an efficient manner. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of operations. The following n lines contain the operations in one of the following formats: - \\"add timestamp severity\\" (1 ≤ timestamp ≤ 10^9, 1 ≤ severity ≤ 10^9): Add a new log message with the specified timestamp and severity. - \\"query start_time end_time\\" (1 ≤ start_time ≤ end_time ≤ 10^9): Query the highest severity score within the given time range [start_time, end_time]. -----Output----- For each \\"query\\" operation, output the highest severity score within the given time range. If there are no log messages in the given range, output -1. -----Examples----- Input 5 add 1 5 add 10 3 add 15 7 query 1 10 query 1 15 Output 5 7 Input 4 add 2 4 add 8 10 query 1 7 query 5 12 Output 4 10 -----Note----- In the first example: - The first query is for the range [1, 10]. The log messages within this range are (1, 5) and (10, 3). The highest severity score is 5. - The second query is for the range [1, 15]. The log messages within this range are: (1, 5), (10, 3), and (15, 7). The highest severity score is 7. In the second example: - The first query is for the range [1, 7]. The only log message within this range is (2, 4). The highest severity score is 4. - The second query is for the range [5, 12]. The only log message within this range is (8, 10). The highest severity score is 10.","solution":"class LogSystem: def __init__(self): self.logs = [] def add(self, timestamp, severity): self.logs.append((timestamp, severity)) def query(self, start_time, end_time): max_severity = -1 for timestamp, severity in self.logs: if start_time <= timestamp <= end_time: if severity > max_severity: max_severity = severity return max_severity"},{"question":"You are given an undirected graph with `V` vertices and `E` edges. The graph is represented using an adjacency list. Your task is to determine whether the given graph is bipartite or not. A graph is bipartite if its vertices can be divided into two independent sets U and V such that every edge (u, v) either connects a vertex from U to V or a vertex from V to U. In other words, no two vertices within the same set are adjacent. -----Constraints----- - 1 ≤ V ≤ 1000 - 0 ≤ E ≤ 10^5 -----Input----- Input is given from Standard Input in the following format: V E u1 v1 u2 v2 ... uE vE Each of the next E lines contains two integers ui and vi representing an edge between vertex ui and vertex vi. -----Output----- Output \\"YES\\" (without quotes) if the graph is bipartite. Otherwise, output \\"NO\\". -----Example Input----- 5 5 1 2 2 3 3 4 4 5 5 1 -----Example Output----- NO -----Example Input----- 4 4 1 2 2 3 3 4 4 1 -----Example Output----- YES Note: - The vertices of the graph are numbered from 1 to V.","solution":"def is_bipartite(V, E, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) color[start] = 1 while queue: node = queue.popleft() current_color = color[node] for neighbor in adj_list[node]: if color[neighbor] == -1: color[neighbor] = 1 - current_color queue.append(neighbor) elif color[neighbor] == current_color: return False return True adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) color = [-1] * (V + 1) for i in range(1, V + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\" # Example usage (would be placed outside the function in a real scenario): V = 4 E = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(is_bipartite(V, E, edges)) # Output should be \\"YES\\""},{"question":"A palindrome is a word, number, phrase, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). You are required to write a function that determines whether a given string can be rearranged to form a palindrome. For example, the string \\"civic\\" is a palindrome, and so is \\"ivicc\\" because \\"ivicc\\" can be rearranged to \\"civic\\". However, the string \\"hello\\" is not a palindrome and cannot be rearranged to form one. Write a function that checks if any permutation of the string is a palindrome. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 100,000). The string contains only lowercase letters (a-z). -----Output----- Output \\"YES\\" if any permutation of the input string can be rearranged to form a palindrome. Otherwise, output \\"NO\\". -----Examples----- Input civic Output YES Input ivicc Output YES Input hello Output NO Input a Output YES Input aaaabbbbccc Output YES","solution":"def can_form_palindrome(s): Determine if any permutation of the string can form a palindrome. from collections import Counter # Count occurrences of each character char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A palindrome can have at most one odd-count character if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"Marcus is an avid book collector and has a collection of books numbered from 1 to n. Unfortunately, some of the books are currently loaned out, and thus missing from his shelf. He wants to reorganize his shelf such that the missing gaps are minimal, meaning the largest continuous segment of missing books is minimized. Marcus wants your help to determine the smallest number of books that need to be rearranged or loaned back to achieve the desired shelf organization. -----Input----- The first line contains a single integer n (1 le n le 100) — the number of books in the collection. The second line contains n integers b_1, b_2, ldots, b_n (0 le b_i le n) — the number on the i-th book, or 0 if it was loaned out. -----Output----- Output a single number — the minimum number of books that need to be rearranged or loaned back to minimize the largest continuous segment of missing books. -----Examples----- Input 5 1 0 3 0 5 Output 1 Input 7 1 2 0 4 0 0 7 Output 2 -----Note----- In the first example, one way to organize the shelf is to place books as 1 2 3 4 5, filling the missing gaps. Only one book (number 2) needs to be rearranged or loaned back to minimize the missing gaps. In the second case, you can fill the gaps to organize the shelf as 1 2 3 4 5 6 7 with two books (numbers 3 and 6) needing to be loaned back or rearranged. This minimizes the largest continuous segment of missing books to 0.","solution":"def minimize_missing_books(n, books): Returns the minimum number of books that need to be rearranged or loaned back to minimize the largest continuous segment of missing books. # Find the longest contiguous segment of missing books max_missing_segment = 0 current_missing_segment = 0 for book in books: if book == 0: current_missing_segment += 1 else: if current_missing_segment > max_missing_segment: max_missing_segment = current_missing_segment current_missing_segment = 0 # Check at the end in case the array ends with missing books if current_missing_segment > max_missing_segment: max_missing_segment = current_missing_segment return max_missing_segment"},{"question":"Given an array of integers, find the length of the longest contiguous subsequence that contains no more than two distinct integers. The two distinct integers do not need to appear in equal frequency, and they can appear in any order within the subsequence. ----Input---- The first line contains an integer n (1 leq n leq 100000), the length of the array. The second line contains n space-separated integers a_i (-10^9 leq a_i leq 10^9). ----Output---- Print a single integer, the length of the longest contiguous subsequence that contains no more than two distinct integers. ----Examples---- Input 7 1 2 1 2 1 3 4 Output 5 Input 5 4 4 4 4 4 Output 5 Input 6 1 2 3 4 5 6 Output 2 ----Note---- In the first example, the longest contiguous subsequence with no more than two distinct integers is [1, 2, 1, 2, 1], which has length 5. In the second example, as the array contains only one distinct integer, the entire array is the longest subsequence, which has length 5. In the third example, any subsequence of two distinct integers has length 2, thus the output is 2.","solution":"def longest_subsequence_with_two_distinct(nums): This function returns the length of the longest contiguous subsequence with no more than two distinct integers. if not nums: return 0 n = len(nums) max_len = 0 left, right = 0, 0 freq_map = {} while right < n: if nums[right] in freq_map or len(freq_map) < 2: if nums[right] in freq_map: freq_map[nums[right]] += 1 else: freq_map[nums[right]] = 1 right += 1 else: max_len = max(max_len, right - left) while len(freq_map) == 2: freq_map[nums[left]] -= 1 if freq_map[nums[left]] == 0: del freq_map[nums[left]] left += 1 freq_map[nums[right]] = 1 right += 1 max_len = max(max_len, right - left) return max_len"},{"question":"During an annual coding competition, Alice and Bob are participating in a problem-solving round. One of the challenges involves arrays and palindromes. Alice has an array consisting of integers, and Bob should determine if it is possible to rearrange the elements of the array such that the new arrangement forms a palindrome. A palindrome is a sequence that reads the same forward and backward. The task is to write a function that tells whether the given array can be rearranged to form a palindrome. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the elements of the array. Output Print YES if the array can be rearranged to form a palindrome, and NO otherwise. Examples Input 5 3 1 2 1 3 Output YES Input 4 1 2 3 4 Output NO Explanation In the first example, the array can be rearranged to [3, 1, 2, 1, 3] or [1, 3, 2, 3, 1], both of which are palindromes. In the second example, it is not possible to rearrange the array to form a palindrome.","solution":"def can_form_palindrome(n, arr): Determines if the array can be rearranged to form a palindrome. Parameters: n (int): The size of the array. arr (list): The elements of the array. Returns: str: \\"YES\\" if the array can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each element in the array freq = Counter(arr) # Count the number of elements with odd frequencies odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A palindrome can have at most one element with an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A popular method in classical cryptography is the Caesar Cipher. In this method, each letter of a given text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 3, \'A\' would be replaced by \'D\', \'B\' would become \'E\', and so on through the alphabet. After \'Z\', it wraps around to \'A\'. For this task, implement a generalized Caesar Cipher that can handle both upper case and lower case letters independently and supports any shift value (both positive and negative). Your task is to write a function that takes a string (which includes upper and lower case letters) and an integer shift value, then returns the encrypted text using the Caesar Cipher method described. # Function Signature ```python def caesar_cipher(text: str, shift: int) -> str: # your code here ``` # Constraints - The input string `text` contains only alphabetical characters (both upper and lower case). - The `shift` can be any integer in the range of `[-1000, 1000]`. # Example Input ```python caesar_cipher(\\"HelloWorld\\", 3) ``` Output ``` KhoorZruog ``` Input ```python caesar_cipher(\\"AttackAtDawn\\", -5) ``` Output ``` VooopyoVoZvp ``` # Explanation - In the first example, each letter is shifted 3 places down the alphabet: - \'H\' becomes \'K\' - \'e\' becomes \'h\' - \'l\' becomes \'o\' - \'o\' remains wrapped around to \'r\' after \'z\' - \'W\' becomes \'Z\' - \'r\' becomes \'u\' - \'d\' wraps around to \'g\' after \'z\' - In the second example, each letter is shifted 5 places up the alphabet (because the shift is negative): - \'A\' becomes \'V\' after wrapping around from \'A\' before \'Z\' - \'t\' becomes \'o\' - \'a\' becomes \'v\' - \'c\' becomes \'x\' - \'k\' becomes \'f\' - \'A\' becomes \'V\' - \'t\' becomes \'o\' - \'D\' becomes \'Y\' - \'a\' becomes \'v\' - \'w\' becomes \'r\' - \'n\' becomes \'i\' after wrapping around before \'a\'","solution":"def caesar_cipher(text: str, shift: int) -> str: def shift_char(c, shift): if c.islower(): return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif c.isupper(): return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, shift) for c in text)"},{"question":"You are given a 2D binary matrix filled with 0\'s and 1\'s. A \'1\' in the matrix represents land, and \'0\' represents water. An island is formed by a group of connected \'1\'s horizontally or vertically. You need to find the size of the largest island in the provided matrix. Write a function that takes in the binary matrix and returns the size of the largest island. Input The input will be given as a list of lists of integers representing the binary matrix. The matrix will have at least one element and will not exceed dimensions of 1000 x 1000. Output The output should be an integer representing the size of the largest island. Example Input ``` [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 0, 1, 1], [0, 1, 0, 0, 1] ] ``` Output 4 Explanation The matrix has the following islands: 1. The one on the top-left formed by the 1\'s at (0, 0), (0, 1), (1, 0), and (1, 1) is of size 4. 2. The one at (1, 3) is of size 1. 3. The one formed by (2, 3) and (2, 4) is of size 2. 4. The one formed by (3, 1) is of size 1. 5. The one formed by (3, 4) is of size 1. The largest island has the size 4.","solution":"def largest_island(matrix): Given a 2D binary matrix filled with 0\'s and 1\'s, this function returns the size of the largest island. def dfs(matrix, i, j, visited): if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]) or matrix[i][j] == 0 or visited[i][j]: return 0 visited[i][j] = True size = 1 size += dfs(matrix, i+1, j, visited) size += dfs(matrix, i-1, j, visited) size += dfs(matrix, i, j+1, visited) size += dfs(matrix, i, j-1, visited) return size if not matrix: return 0 max_island_size = 0 rows, cols = len(matrix), len(matrix[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): if matrix[i][j] == 1 and not visited[i][j]: current_island_size = dfs(matrix, i, j, visited) max_island_size = max(max_island_size, current_island_size) return max_island_size"},{"question":"A logistics company uses an automated delivery robot to distribute packages along a linear series of warehouses. Each warehouse is represented by an index on a 1-dimensional grid, starting from index 0. The robot is initially at warehouse 0, and it needs to deliver a specific number of packages to each warehouse. The movement of the robot is controlled by pre-defined commands. The commands are as follows: - \\"L X\\": Move left by X warehouses. If X exceeds the number of available left warehouses, the robot should stay at the leftmost warehouse (index 0). - \\"R X\\": Move right by X warehouses. If X exceeds the total number of warehouses, the robot should stay at the rightmost warehouse. - \\"D N\\": Deliver N packages to the current warehouse. Initially, each warehouse has 0 packages. The robot will follow the commands in order, and your task is to determine the final number of packages at each warehouse after executing all the commands. Input The input consists of: - The total number of warehouses (n) and the number of commands (c), both integers on the first line. - The next c lines each contain a command in one of the specified formats (\\"L X\\", \\"R X\\", or \\"D N\\"). Output Output a single line containing the number of packages in each warehouse from index 0 to n-1, separated by spaces. Example Input 5 6 R 2 D 3 L 1 D 2 R 3 D 1 Output 0 2 3 0 1 Explanation: - \\"R 2\\": Move right by 2 warehouses, current position = 2 - \\"D 3\\": Deliver 3 packages at warehouse 2, packages at warehouse 2 = 3 - \\"L 1\\": Move left by 1 warehouse, current position = 1 - \\"D 2\\": Deliver 2 packages at warehouse 1, packages at warehouse 1 = 2 - \\"R 3\\": Move right by 3 warehouses, current position = 4 - \\"D 1\\": Deliver 1 package at warehouse 4, packages at warehouse 4 = 1 Final warehouse package counts are: [0, 2, 3, 0, 1]","solution":"def logistic_robot(n, c, commands): warehouses = [0] * n current_position = 0 for command in commands: action, value = command.split() value = int(value) if action == \'L\': current_position = max(0, current_position - value) elif action == \'R\': current_position = min(n - 1, current_position + value) elif action == \'D\': warehouses[current_position] += value return warehouses # Example usage: # n = 5 # c = 6 # commands = [\\"R 2\\", \\"D 3\\", \\"L 1\\", \\"D 2\\", \\"R 3\\", \\"D 1\\"] # print(logistic_robot(n, c, commands)) # Output: [0, 2, 3, 0, 1]"},{"question":"Barbara has N sticks of various lengths, and she wants to create several equilateral triangles from these sticks. To form an equilateral triangle, you need three sticks of the same length. Given the lengths of each stick, help Barbara find out the maximum number of equilateral triangles she can create. -----Input----- The first line contains a single integer N (1 ≤ N ≤ 2 * 10^5) — the number of sticks Barbara has. The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9) — the lengths of each stick. -----Output----- Print the maximal number of equilateral triangles Barbara can create. -----Examples----- Input 8 3 3 3 3 3 3 3 3 Output 2 Input 5 1 1 1 2 2 Output 1 Input 4 5 5 5 5 Output 1 -----Note----- In test case 1, we can create 2 equilateral triangles using the sticks all of length 3. In test case 2, we can create 1 equilateral triangle using three sticks of length 1. In test case 3, we can create 1 equilateral triangle using the four sticks all of length 5.","solution":"def max_equilateral_triangles(N, sticks): Determines the maximum number of equilateral triangles that can be formed using the given sticks. Parameters: N (int): The number of sticks. sticks (list): List of stick lengths. Returns: int: The maximum number of equilateral triangles. from collections import Counter stick_counts = Counter(sticks) triangles = 0 for count in stick_counts.values(): triangles += count // 3 return triangles"},{"question":"Max has a blue toy robot that moves in a two-dimensional grid. The robot starts at the position (0, 0). Max sends a list of commands to the robot, and each command tells the robot to move a certain number of steps in one of the four cardinal directions. Your task is to determine the robot\'s final position on the grid after executing all the commands. Each command will be in the form of a string \'U 5\', \'D 3\', \'L 4\', or \'R 2\' where: - \'U\' means move up, the number following it is the number of steps. - \'D\' means move down, the number of steps. - \'L\' means move left, the number of steps. - \'R\' means move right, the number of steps. -----Input----- The first line of input contains the integer n (1 ≤ n ≤ 1000), the number of commands. The next n lines each contain a command string (one command per line). -----Output----- Print the final coordinates of the robot as two integers separated by a space. -----Examples----- Input 5 U 3 R 2 D 1 L 4 D 2 Output -2 0 Input 3 U 10 R 5 D 3 Output 5 7 -----Note----- In the first sample, the robot moves: 1. Up 3 steps to (0, 3) 2. Right 2 steps to (2, 3) 3. Down 1 step to (2, 2) 4. Left 4 steps to (-2, 2) 5. Down 2 steps to (-2, 0)","solution":"def final_position(n, commands): Returns the final position of the robot after executing all commands. Input: - n: number of commands (int) - commands: list of strings where each string represents a command Output: - tuple (x, y): final coordinates of the robot x, y = 0, 0 for command in commands: direction, steps = command.split() steps = int(steps) if direction == \'U\': y += steps elif direction == \'D\': y -= steps elif direction == \'L\': x -= steps elif direction == \'R\': x += steps return (x, y)"},{"question":"A group of treasure hunters is exploring an ancient temple, and they encountered a corridor guarded by a series of traps. Each trap is represented by a cell in a grid, and the corridor has exactly M rows and N columns. The hunters need to navigate from the top-left corner to the bottom-right corner of the grid, but certain cells are traps and cannot be stepped on. To help the hunters, you need to find the number of distinct paths they can take to reach their destination without stepping on any traps. The hunters can only move right or down at any point in time. Input: - The first line of the input contains two integers, M and N, the number of rows and columns in the grid. - Each of the next M lines contains N characters where each character is either \'.\' (denoting a free cell) or \'#\' (denoting a trap). Output: - Output a single integer denoting the number of distinct paths from the top-left corner to the bottom-right corner, modulo (10^9 + 7). Constraints: - (1 leq M, N leq 1000) Note: - The top-left corner (cell (1, 1)) and the bottom-right corner (cell (M, N)) are always free cells (\'.\'). - If there is no valid path, return 0. Sample Input 1: ``` 3 3 ... .#. ... ``` Sample Output 1: ``` 2 ``` Sample Explanation 1: There are two distinct paths from the top-left corner to the bottom-right corner: 1. Down, Down, Right, Right 2. Right, Right, Down, Down","solution":"def count_paths(grid): MOD = 10**9 + 7 M = len(grid) N = len(grid[0]) # Create a dp array for storing number of ways to reach each cell dp = [[0] * N for _ in range(M)] # Start position always has one way to be reached dp[0][0] = 1 for i in range(M): for j in range(N): # If the cell is a trap, no ways to reach here if grid[i][j] == \'#\': dp[i][j] = 0 else: # If we come from the top cell if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD # If we come from the left cell if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD # The number of ways to reach bottom-right corner return dp[M-1][N-1] def solve(input_str): input_lines = input_str.strip().split(\'n\') M, N = map(int, input_lines[0].split()) grid = [list(line) for line in input_lines[1:]] return count_paths(grid)"},{"question":"A robot is located at the top-left corner of a grid (M x N). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. However, there are obstacles on the grid that the robot cannot pass. You are given an `M x N` grid `grid` where `0` represents an empty space and `1` represents an obstacle. Write a function that returns the number of unique paths that the robot can take to reach the bottom-right corner of the grid. Example 1: Input: grid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid as illustrated below. [ [0,0,0], [0,1,0], [0,0,0] ] There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: grid = [[0,1],[0,0]] Output: 1 Explanation: [ [0,1], [0,0] ] There is only one way to reach the bottom-right corner: 1. Down -> Right Constraints: - m == grid.length - n == grid[0].length - 1 <= m, n <= 100 - grid[i][j] is either 0 or 1.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from top-left to bottom-right of the grid, avoiding obstacles represented by 1. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"A group of friends are playing a card game where each player gets a hand of cards. They want to make sure that every player has the same number of cards, and that the total number of cards dealt is maximized based on the deck size. However, they\'re also interested to know what is the minimum number of cards they need to remove from the deck to deal the cards evenly to all players. -----Input----- The input consists of two integers n and k (1 le n, k le 10^5): the total number of cards in the deck and the number of players, respectively. -----Output----- Print a single integer — the minimum number of cards that need to be removed from the deck to ensure an even distribution of cards among all players. -----Examples----- Input 52 4 Output 0 Input 53 4 Output 1 -----Note----- In the first sample, since 52 cards can be evenly divided among 4 players (13 cards each), no cards need to be removed. In the second sample, one card needs to be removed so that the remaining 52 cards can be evenly divided among 4 players.","solution":"def min_cards_to_remove(n, k): Returns the minimum number of cards that need to be removed from the deck to ensure an even distribution of cards among all players. Parameters: n (int): Total number of cards in the deck. k (int): Number of players. Returns: int: Minimum number of cards to remove. return n % k"},{"question":"You are creating a new application that records temperature readings from multiple sensors. Each sensor gives a reading in degrees Celsius at specific intervals, and the readings are sent to your application in real-time. You need to develop a function that processes these readings to detect whether any of the sensors have reported an abnormal temperature change within a given time frame. An abnormal change is defined as any reading that differs from the previous one by more than a specified threshold. Write a function `detect_abnormal_change` that takes in the following parameters: - `readings`: a list of tuples where each tuple contains two elements. The first element is the sensor ID (an integer), and the second element is the reading from the sensor (a float). - `threshold`: a float representing the maximum allowed temperature change. - `time_interval`: an integer representing the number of readings to consider for detecting an abnormal change. The function should return a list of sensor IDs that have reported abnormal changes within the given time interval. # Input Format - The first parameter is a list `readings` of length n (1 ≤ n ≤ 10^5), where each element is a tuple containing an integer and a float. - The second parameter is a float `threshold` (0 ≤ threshold ≤ 100). - The third parameter is an integer `time_interval` (1 ≤ time_interval ≤ 10^5). # Output Format - Return a list of integers representing the sensor IDs that reported abnormal temperature changes within the specified time interval. # Example ```python print(detect_abnormal_change([(1, 25.0), (2, 30.0), (1, 27.0), (1, 32.0), (2, 33.0)], 5.0, 3)) ``` Output: ``` [1] ``` Note: In the example above, the readings given are: - Sensor 1 reports: 25.0, 27.0, 32.0 - Sensor 2 reports: 30.0, 33.0 The threshold is 5.0. An abnormal change is defined as a change greater than 5.0 degrees Celsius. Therefore, sensor ID 1 is flagged because its reading changes from 27.0 to 32.0, which is a 5.0-degree change between consecutive readings within the specified time interval (3 readings). Sensor 2 does not report any abnormal change.","solution":"def detect_abnormal_change(readings, threshold, time_interval): Detects sensors that have reported abnormal temperature changes within the given time interval. Parameters: - readings: list of tuples (sensor_id, reading) - threshold: float, maximum allowed temperature change - time_interval: int, number of readings to consider for detecting abnormal changes Returns: - List of sensor IDs that reported abnormal temperature changes within the specified time interval. from collections import defaultdict, deque # Dictionary to keep track of readings by each sensor sensor_data = defaultdict(deque) abnormal_sensors = set() for sensor_id, reading in readings: if sensor_id in sensor_data: previous_reading = sensor_data[sensor_id][-1] if abs(reading - previous_reading) > threshold: abnormal_sensors.add(sensor_id) # Add current reading to the sensor data sensor_data[sensor_id].append(reading) # Maintain only the latest \'time_interval\' readings if len(sensor_data[sensor_id]) > time_interval: sensor_data[sensor_id].popleft() return list(abnormal_sensors)"},{"question":"You are given a list of students and their scores in a particular subject. Your task is to determine the student with the highest score and return their name. If there are multiple students with the highest score, return their names in alphabetical order as a list. Input: * A list of dictionaries where each dictionary represents a student with two keys: \\"name\\" (a string) and \\"score\\" (an integer). Output: * A string with the name of the student who has the highest score if there\'s just one, or a list of names in alphabetical order if there are multiple students with the highest score. Example: ```python students = [ {\\"name\\": \\"John\\", \\"score\\": 90}, {\\"name\\": \\"Alice\\", \\"score\\": 95}, {\\"name\\": \\"Bob\\", \\"score\\": 95}, {\\"name\\": \\"Eve\\", \\"score\\": 88} ] Output: [\\"Alice\\", \\"Bob\\"] ``` Function signature: ```python def top_student(students: List[Dict[str, Union[str, int]]]) -> Union[str, List[str]]: pass ``` Ensure your solution has an efficient runtime complexity, considering that the number of students can be large.","solution":"from typing import List, Dict, Union def top_student(students: List[Dict[str, Union[str, int]]]) -> Union[str, List[str]]: if not students: return [] max_score = max(student[\'score\'] for student in students) top_scorers = [student[\'name\'] for student in students if student[\'score\'] == max_score] if len(top_scorers) == 1: return top_scorers[0] else: return sorted(top_scorers)"},{"question":"Daenerys needs to oversee the allocation of her resources for the upcoming battle. She has **gold coins** to distribute among her commanders, and she wants to ensure that the distribution is as efficient as possible, adhering to some constraints. Each commander can handle a shipment of a certain number of coins, but she wants to maximize the value each commander receives without any commander receiving more coins than they can handle. Given a list of commanders and their respective handling capacities, and a total number of gold coins, determine the maximum number of coins Daenerys can distribute. Input The first line contains T, the number of test cases. The first line of each test case contains two integers N and K, denoting the number of commanders and the total number of gold coins available. The next line contains N space-separated integers representing the maximum coin handling capacity ( C_i ) of each commander. Output For each test case, output a single integer - the maximum number of coins that can be distributed among the commanders. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ 10^6 0 ≤ ( C_i ) ≤ K SAMPLE INPUT 2 3 50 10 20 15 4 100 35 40 25 50 SAMPLE OUTPUT 45 100 Explanation In the first test case: - With 3 commanders having capacities 10, 20, and 15 and a total of 50 gold coins, the maximum coins that can be efficiently distributed are 10 + 20 + 15 = 45. In the second test case: - With 4 commanders having capacities 35, 40, 25, and 50 and a total of 100 gold coins, the allocation that utilizes all the coins without exceeding capacities is 35 + 40 + 25 = 100.","solution":"def max_coins_distribution(T, test_cases): results = [] for t in range(T): N, K = test_cases[t][0] capacities = sorted(test_cases[t][1], reverse=True) total_distributed = 0 for capacity in capacities: if total_distributed + capacity <= K: total_distributed += capacity else: total_distributed += min(K - total_distributed, capacity) results.append(total_distributed) return results"},{"question":"You are given a list of student records, each containing a student\'s name and their grades in various subjects. Your task is to write a function that calculates the average grade for each student and assigns them a letter grade based on the following scale: - A: Average grade >= 90 - B: 80 <= Average grade < 90 - C: 70 <= Average grade < 80 - D: 60 <= Average grade < 70 - F: Average grade < 60 Your function should return a list of tuples, each containing a student\'s name and their corresponding letter grade. The student records are represented as a list of dictionaries, where each dictionary contains a student\'s name as a string and their grades as a list of integers. You can assume that each student has at least one grade. Function signature: `def calculate_letter_grades(students: List[Dict[str, Union[str, List[int]]]]) -> List[Tuple[str, str]]:` Example: ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [95, 85, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [70, 76, 68, 72]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [88, 82, 84]}, {\\"name\\": \\"Diana\\", \\"grades\\": [60, 58, 64]}, {\\"name\\": \\"Eve\\", \\"grades\\": [45, 50, 48]} ] calculate_letter_grades(students) # Output: [(\'Alice\', \'A\'), (\'Bob\', \'C\'), (\'Charlie\', \'B\'), (\'Diana\', \'D\'), (\'Eve\', \'F\')] ```","solution":"from typing import List, Dict, Union, Tuple def calculate_letter_grades(students: List[Dict[str, Union[str, List[int]]]]) -> List[Tuple[str, str]]: def average_grade(grades: List[int]) -> float: return sum(grades) / len(grades) def letter_grade(average: float) -> str: if average >= 90: return \'A\' elif average >= 80: return \'B\' elif average >= 70: return \'C\' elif average >= 60: return \'D\' else: return \'F\' result = [] for student in students: avg = average_grade(student[\\"grades\\"]) grade = letter_grade(avg) result.append((student[\\"name\\"], grade)) return result"},{"question":"Alice is working on a secret project that involves analyzing unique sequences of characters. She has a list of m unique sequences, each of a fixed length of 4. Each character in the sequence is a lowercase letter from \'a\' to \'z\'. She wants to conduct several queries to check the characteristics of these sequences based on specified conditions. For each query, Alice is given two letters. She needs to determine how many of the sequences contain both of these letters. For example, given the letters \'a\' and \'b\', a sequence should be counted if it contains both \'a\' and \'b\' at least once (but not necessarily adjacent or in any specific order). Your task is to help Alice by determining the answer for each query. Input: - The first line contains an integer m (1 ≤ m ≤ 10^4), the number of sequences. - The next m lines each contain a 4-character string, representing the sequences. - The third line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. - The next q lines each contain two lowercase letters separated by a space. Output: For each query, print a single integer, the number of sequences containing both specified characters. Examples: Input: 6 abcd bcda acdb adcb efgh ijkl 3 a b c d e f Output: 4 4 1","solution":"def analyze_sequences(m, sequences, q, queries): # Convert sequences to a more searchable format sequence_sets = [{\\"a\\" in seq, \\"b\\" in seq, \\"c\\" in seq, \\"d\\" in seq, \\"e\\" in seq, \\"f\\" in seq, \\"g\\" in seq, \\"h\\" in seq, \\"i\\" in seq, \\"j\\" in seq, \\"k\\" in seq, \\"l\\" in seq, \\"m\\" in seq, \\"n\\" in seq, \\"o\\" in seq, \\"p\\" in seq, \\"q\\" in seq, \\"r\\" in seq, \\"s\\" in seq, \\"t\\" in seq, \\"u\\" in seq, \\"v\\" in seq, \\"w\\" in seq, \\"x\\" in seq, \\"y\\" in seq, \\"z\\" in seq} for seq in sequences] results = [] for query in queries: char1, char2 = query count = sum(1 for seq in sequences if char1 in seq and char2 in seq) results.append(count) return results"},{"question":"You are given an array of `n` integers and an integer `k`. You need to determine if there exist two indices `i` and `j` in the array such that `arr[i] + arr[j] = k` and `i != j`. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of each test case follows. - The first line of each test case contains two integers n and k. - The second line contains n integers denoting the elements of the array. -----Output----- For each test case, print \\"Case i: \\", and then the answer, where i is the testcase number, 1-indexed. The answer should be either: - \\"YES\\" if there exist two different indices `i` and `j` such that `arr[i] + arr[j] = k` - \\"NO\\" otherwise -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100000 - -1000000 ≤ arr[i] ≤ 1000000 - -2000000 ≤ k ≤ 2000000 -----Example----- Input: 3 4 9 2 7 11 15 3 10 1 5 3 5 7 1 2 3 4 5 Output: Case 1: YES Case 2: NO Case 3: YES","solution":"def two_sum_exists(arr, k): Checks if there exist two indices i and j in the array such that arr[i] + arr[j] = k and i != j. Parameters: arr (list of int): List of integers. k (int): Target sum. Returns: str: \\"YES\\" if such indices exist, \\"NO\\" otherwise. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def find_two_sum_in_test_cases(T, test_cases): Processes each test case and returns the result. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains (n, k, arr) where `n` is the number of integers, `k` is the target sum, and `arr` is the list of integers. Returns: list of str: The result for each test case with format \\"Case i: {YES/NO}\\". results = [] for i in range(T): n, k, arr = test_cases[i] result = two_sum_exists(arr, k) results.append(f\\"Case {i + 1}: {result}\\") return results"},{"question":"Given a string consisting of lowercase alphabets and parentheses, your task is to determine if it is possible to obtain a valid string by deleting at most one character. A valid string is defined as a string that has balanced parentheses. **Note:** - A string is considered balanced if for every opening parenthesis `(`, there is a corresponding closing parenthesis `)` that follows it, and they are arranged in the correct order. -----Input----- Input is given from Standard Input in the following format: s *s*: - A string consisting of lowercase alphabets and parentheses `(`, `)`. - 1 ≤ |s| ≤ 10^5 -----Output----- Print \\"YES\\" (without quotes) if it is possible to obtain a valid string by deleting at most one character. Otherwise, print \\"NO\\". -----Samples----- **Input 1:** a(b)c) **Output 1:** YES **Explanation:** By removing the last character `)`, the string becomes `a(b)c`, which is valid. **Input 2:** ())z( **Output 2:** NO","solution":"def can_be_valid_by_deleting_one(s): Returns \\"YES\\" if it is possible to obtain a valid string by deleting at most one character, otherwise returns \\"NO\\". def is_valid(string): count = 0 for char in string: if char == \'(\': count += 1 elif char == \')\': if count == 0: return False count -= 1 return count == 0 # Check if the original string is valid if is_valid(s): return \\"YES\\" # Check if removing one character makes it valid for i in range(len(s)): if is_valid(s[:i] + s[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"Polycarp is planning a party for his friends. He wants to serve a variety of dishes. He has n dishes that he can prepare, numbered from 1 to n. Each dish i takes t_i minutes to cook. Polycarp wants to make sure no two dishes are prepared at the same time, so he can only prepare one dish at a time. Additionally, each dish i has a satisfaction value s_i which represents how much his friends will enjoy the dish. Polycarp wants to maximize the total satisfaction value of the dishes he can prepare. However, things get tricky because he only has T minutes to prepare the dishes. Polycarp needs your help to figure out the maximum possible total satisfaction value he can achieve within the given time. -----Input----- The first line contains two integers n and T (1 le n le 100, 1 le T le 10000) — the number of dishes and the total amount of time Polycarp has to prepare the dishes. The next n lines each contain two integers t_i and s_i (1 le t_i le 100, 1 le s_i le 1000) — the time it takes to prepare the i-th dish and the satisfaction value of the i-th dish. -----Output----- Print a single integer — the maximum total satisfaction value Polycarp can achieve within the given time. -----Examples----- Input 4 10 5 10 4 40 6 30 3 50 Output 90 Input 3 5 4 10 3 20 2 30 Output 50 -----Note----- In the first example, Polycarp can choose to prepare the 2nd and the 4th dish within the 10 minutes, earning a total satisfaction value of 90 (40 + 50). In the second example, Polycarp can prepare the 2nd and the 3rd dish within the 5 minutes, reaching a total satisfaction value of 50 (20 + 30).","solution":"def max_satisfaction(n, T, dishes): Calculate the maximum possible total satisfaction value Polycarp can achieve within the given time T using the provided dishes. :param n: Number of dishes (int) :param T: Total available preparation time (int) :param dishes: List of tuples where each tuple is (time_to_cook, satisfaction_value) :return: Maximum total satisfaction value (int) # Initialize the dp array with 0 dp = [0] * (T + 1) # Process each dish for time, satisfaction in dishes: # Update dp array from back to avoid reuse of the same dish for t in range(T, time - 1, -1): dp[t] = max(dp[t], dp[t - time] + satisfaction) return dp[T]"},{"question":"You are given a binary tree, where each node contains an integer value. Your task is to determine if the binary tree is a good binary tree. A binary tree is considered good if and only if starting from the root, at each level, the values of all the nodes are strictly increasing from left to right. For example, consider the following tree: ``` 5 / 3 7 / 1 4 9 ``` This tree is good because: - At level 1, there is only one node with value 5. - At level 2, values of nodes are 3 and 7, and they are in increasing order. - At level 3, values of nodes are 1, 4, and 9, and they are in increasing order. Another example of a good binary tree: ``` 10 / 5 15 / 3 6 20 ``` Note that not all binary trees are good. For instance, the following tree is not good: ``` 10 / 6 15 / / 3 8 7 ``` This tree is not good because at level 2, the values are 6 and 15, which are in increasing order, but at level 3, the value 7 (left child of 15) is not greater than 8 (right child of 6). Input - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of nodes in the binary tree. - The next n lines contain three integers v, l, r for each node, where v is the value of the node, l is the value of the left child (-1 if there is no left child), and r is the value of the right child (-1 if there is no right child). Output - Print \\"YES\\" if the binary tree is a good binary tree, otherwise print \\"NO\\". Example Input 5 10 5 15 5 3 6 15 -1 20 3 -1 -1 6 -1 -1 20 -1 -1 Output YES Example Input 6 10 6 15 6 3 8 15 7 -1 3 -1 -1 8 -1 -1 7 -1 -1 Output NO Note Consider the first example: The tree built from the input is: ``` 10 / 5 15 / 3 6 20 ``` This tree is good because: - The order of nodes at each level is strictly increasing. Consider the second example: The tree built from the input is: ``` 10 / 6 15 / / 3 8 7 ``` This tree is not good because: - At level 3, the value 7 is not greater than 8.","solution":"def is_good_binary_tree(n, nodes): from collections import deque, defaultdict if n == 0: return \\"YES\\" tree = {} for v, l, r in nodes: tree[v] = (l, r) levels = defaultdict(list) # BFS to traverse the tree level by level queue = deque([(nodes[0][0], 0)]) # (value, level) while queue: node_value, level = queue.popleft() levels[level].append(node_value) left, right = tree.get(node_value, (-1, -1)) if left != -1: queue.append((left, level + 1)) if right != -1: queue.append((right, level + 1)) # Check if each level\'s values are strictly increasing for level in levels: if not all(earlier < later for earlier, later in zip(levels[level], levels[level][1:])): return \\"NO\\" return \\"YES\\""},{"question":"Given an array of positive integers and a positive integer k, find the smallest positive integer that is missing in the array and is greater than or equal to k. Example 1: Input: arr = [3, 4, 2, 1, 7, 6] k = 5 Output: 5 Explanation: Since 5 is missing in the array and is greater than or equal to 5. Example 2: Input: arr = [1, 2, 3, 4, 5] k = 3 Output: 6 Explanation: Since 3, 4, and 5 are present in the array, the first missing integer greater than or equal to 3 is 6. User Task: Complete the function findMissing() which takes an array of integers arr and an integer k as input parameters, and returns the smallest positive integer missing in the array which is greater than or equal to k. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^5 1 <= k <= 10^5","solution":"def findMissing(arr, k): Finds the smallest positive integer missing in the array and is greater than or equal to k. # Sort the array arr.sort() # Iterate through and find the smallest missing integer >= k current = k for num in arr: if num == current: current += 1 elif num > current: break return current"},{"question":"Given a N * M rectangular matrix A, return all the elements of its diagonals starting from the top-left corner going to the bottom-right corner. Example 1: Input: N = 2, M = 3 A = [[1, 2, 3], [4, 5, 6]] Output: 1 2 4 3 5 6 Explanation: Hence, elements will be returned in the order {1, 2, 4, 3, 5, 6}. Example 2: Input: N = 3, M = 3 A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 1 2 4 3 5 7 6 8 9 Explanation: Hence, elements will be returned in the order {1, 2, 4, 3, 5, 7, 6, 8, 9}. Your Task: You don\'t need to read input or print anything. Your task is to complete the function diagonalOrder() which takes two integers N and M, and a 2D matrix A as input parameters and returns a list of all elements of its diagonals starting from the top-left corner going to the bottom-right corner. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 10^3 0 ≤ A[i][j] ≤ 10^6","solution":"def diagonalOrder(N, M, A): Returns a list of all elements of the matrix diagonals starting from the top-left corner going to the bottom-right corner. result = [] for col in range(M): row, c = 0, col while row < N and c >= 0: result.append(A[row][c]) row += 1 c -= 1 for row in range(1, N): r, col = row, M - 1 while r < N and col >= 0: result.append(A[r][col]) r += 1 col -= 1 return result"},{"question":"Write a program that helps to organize a workshop by ensuring there is no schedule conflict between multiple sessions. Each session is represented by a start time and end time in the format HH:MM-HH:MM. Your task is to determine if any sessions overlap or if all sessions can be scheduled without conflicts. Input - The first line of input will consist of a single integer `t`, the number of test cases. - Each test case starts with a single integer `n`, the number of sessions. - The subsequent `n` lines will contain session times in the format HH:MM-HH:MM. Output - For each test case, output \\"No conflicts\\" if there are no overlapping sessions, otherwise output \\"Schedule conflict\\". Constraints - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 50 - 00 ≤ HH ≤ 23 - 00 ≤ MM ≤ 59 Example Input: 2 3 09:00-10:30 10:45-12:00 11:00-12:30 2 13:00-14:00 14:00-15:00 Output: Schedule conflict No conflicts","solution":"def time_to_minutes(time_str): Convert a time string in HH:MM format to minutes since midnight. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def check_schedule_conflict(sessions): Determine if there is any schedule conflict among the sessions. Each session is represented by a start and end time in the format HH:MM-HH:MM. Returns \\"No conflicts\\" if there are no overlapping sessions, otherwise \\"Schedule conflict\\". times = [] for session in sessions: start, end = session.split(\'-\') start_minutes = time_to_minutes(start) end_minutes = time_to_minutes(end) times.append((start_minutes, end_minutes)) # Sort sessions by start time times.sort() # Check for overlap for i in range(1, len(times)): if times[i][0] < times[i-1][1]: return \\"Schedule conflict\\" return \\"No conflicts\\" def organize_workshop(t, test_cases): results = [] for i in range(t): n, sessions = test_cases[i] result = check_schedule_conflict(sessions) results.append(result) return results"},{"question":"In this task, you are required to identify if a given integer `n` is a \\"perfect number\\" or a \\"deficient number\\". A perfect number is a positive integer equal to the sum of its proper divisors excluding itself. A deficient number is a positive integer that is greater than the sum of its proper divisors. Your task is to write a function `classify_number(num)` that takes an integer `num` and returns a string indicating whether the number is \\"perfect\\" or \\"deficient\\". Examples: ```python classify_number(6) == \\"perfect\\" # 6 is a perfect number because 1 + 2 + 3 = 6 classify_number(28) == \\"perfect\\" # 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28 classify_number(8) == \\"deficient\\" # 8 is a deficient number because 1 + 2 + 4 < 8 classify_number(10) == \\"deficient\\" # 10 is a deficient number because 1 + 2 + 5 < 10 ``` The function should handle numbers greater than 1, as defined in the problem statement.","solution":"def classify_number(num): Returns whether a number is \'perfect\' or \'deficient\'. if num <= 1: return \\"deficient\\" divisors_sum = sum(i for i in range(1, num) if num % i == 0) if divisors_sum == num: return \\"perfect\\" else: return \\"deficient\\""},{"question":"You are given a series of computer jobs, each with a designated priority level and required manual intervention time. Your task is to simulate the job processing while considering their priorities, and calculate the total manual effort required. Each job has the following attributes: - `priority` (an integer where a lower number indicates higher priority) - `manual_time` (an integer indicating the minutes needed for manual intervention) Your simulation should process the jobs in the order of their priority – jobs with the same priority are processed based on the order in which they appear in the input. -----Input----- The first line contains an integer N (1 leq N leq 100,000), the number of jobs. The following N lines each contain two integers: `priority` and `manual_time`. -----Output----- Output a single integer, the total manual intervention time required to process all jobs. -----Example----- Sample Input 1: 5 1 20 2 15 1 10 3 15 2 5 Sample Output 1: 65 Sample Input 2: 3 2 10 1 5 1 20 Sample Output 2: 35","solution":"def calculate_total_manual_time(jobs): Calculate the total manual intervention time required to process all jobs based on priority. Parameters: jobs (list of tuples): A list of tuples where each tuple contains (priority, manual_time). Returns: int: The total manual intervention time. # Sort the jobs first by priority, then by the order they appear jobs.sort(key=lambda x: x[0]) # Calculate the total manual intervention time total_manual_time = sum(job[1] for job in jobs) return total_manual_time"},{"question":"You are given a list of N integers, each representing the capacity of different containers. You need to determine the minimum number of containers required to store exactly M liters of water. You can assume that the sum of capacities of all containers is always greater than or equal to M liters. -----Constraints----- - 1 leq N leq 50 - 1 leq Capacity_i leq 1000 - 1 leq M leq 10000 -----Input----- Input is given from Standard Input in the following format: N M Capacity_1 Capacity_2 ... Capacity_N -----Output----- Print the minimum number of containers required to store exactly M liters of water. -----Sample Input----- 5 13 5 8 3 7 9 -----Sample Output----- 2 In this example, the capacities of the containers are 5, 8, 3, 7, and 9, and we need to find the minimum number of containers to store exactly 13 liters of water. One possible solution is using the containers with 8 and 5 liters of capacities. So, the minimum number of containers required is 2.","solution":"def min_containers(N, M, capacities): Returns the minimum number of containers required to store exactly M liters of water. Parameters: N (int): Number of containers M (int): Total liters of water to store capacities (list): List of capacities of the containers Returns: int: Minimum number of containers to store exactly M liters of water capacities.sort(reverse=True) # Sort capacities in descending order count = 0 for capacity in capacities: if M <= 0: break M -= capacity count += 1 return count"},{"question":"You are given an array of integers. You need to handle multiple queries where, for each query, you must determine the length of the longest contiguous subarray with an equal number of even and odd integers. **Input** - The first line contains an integer N — the number of elements in the array. - The second line contains N space-separated integers — the elements of the array. - The third line contains an integer Q — the number of queries. - Each of the next Q lines contains two integers L and R — the bounds of the query (0-indexed). **Output** For each query, output a single integer — the length of the longest contiguous subarray with an equal number of even and odd integers within the subarray delimited by the indices L and R (inclusive). **Constraints** - 1 ≤ N, Q ≤ 300,000 - 1 ≤ A[i] ≤ 10^{9} **Subtasks** - Subtask #1 (10 points): 1 ≤ N, Q ≤ 1,000 - Subtask #2 (40 points): 1 ≤ N, Q ≤ 100,000 - Subtask #3 (50 points): original constraints **Example** _Input:_ ``` 8 1 2 3 4 5 6 7 8 3 0 7 1 4 2 6 ``` _Output:_ ``` 8 4 5 ``` In this example: 1. The array is `[1, 2, 3, 4, 5, 6, 7, 8]`. 2. For the first query, the entire array has 4 even and 4 odd numbers, so the longest subarray is of length 8. 3. For the second query, the subarray `[2, 3, 4, 5]` has 2 even and 2 odd numbers, so the longest subarray is of length 4. 4. For the third query, the subarray `[3, 4, 5, 6, 7]` has 2 even and 3 odd numbers, the longest subarray with an equal number of even and odd numbers is `[3, 4, 5, 6]`, so the length is 4.","solution":"def longest_equal_even_odd_subarray(arr, queries): n = len(arr) prefix_even = [0] * (n + 1) prefix_odd = [0] * (n + 1) for i in range(n): prefix_even[i + 1] = prefix_even[i] + (1 if arr[i] % 2 == 0 else 0) prefix_odd[i + 1] = prefix_odd[i] + (1 if arr[i] % 2 != 0 else 0) results = [] for l, r in queries: max_len = 0 for start in range(l, r + 1): for end in range(start, r + 1): even_count = prefix_even[end + 1] - prefix_even[start] odd_count = prefix_odd[end + 1] - prefix_odd[start] if even_count == odd_count: max_len = max(max_len, end - start + 1) results.append(max_len) return results"},{"question":"John recently started a new job at a factory where packages of different weights are processed and categorized based on their weights. In order to automate some of his tasks, John decides to write a program. The factory has N packages, each with a weight Wi. John needs the program to support two types of operations: Type 1: Given a number W, the program should output the index of the lightest package that weighs at least W. If no such package exists, output -1. Type 2: Given three numbers L, R, and X, the weights of all packages between indices L and R (1-based, both inclusive) should be updated by adding X to their current weights. -----Input----- - The first line contains two integers N and Q, denoting the number of packages and the number of operations respectively. - The second line contains N space-separated integers W1, W2, ..., WN denoting the weights of the packages. - Each of the next Q lines describes an operation. If the first integer is equal to 1, it means that the operation is of Type 1 and it will be followed by one integer W. Otherwise, the first number will be equal to 2, indicating an operation of Type 2, followed by three integers L, R, and X. -----Output----- For each operation of Type 1, output the index of the lightest package with a weight of at least W. -----Constraints----- - 1 ≤ N, Q ≤ 100,000 - 1 ≤ Wi ≤ 1,000,000 - 1 ≤ L ≤ R ≤ N - -1,000,000 ≤ X ≤ 1,000,000 - 1 ≤ W ≤ 1,000,000 -----Example----- Input: 5 3 10 20 30 40 50 1 25 2 2 4 10 1 25 Output: 3 2 -----Explanation----- The initial weights are (10, 20, 30, 40, 50). The first operation is of Type 1, looking for the lightest package weighing at least 25. The third package weighs 30, which satisfies the condition, so the output is 3. The second operation updates the weights, adding 10 to each weight from the second to the fourth package. The weights become (10, 30, 40, 50, 50). The last operation again looks for a package with a weight of at least 25. After the update, the second package now weighs 30, which satisfies the condition, so the output is 2.","solution":"def process_packages(N, Q, weights, operations): results = [] for operation in operations: if operation[0] == 1: W = operation[1] min_index = -1 min_weight = float(\'inf\') for i in range(N): if weights[i] >= W and weights[i] < min_weight: min_weight = weights[i] min_index = i + 1 results.append(min_index) elif operation[0] == 2: L, R, X = operation[1], operation[2], operation[3] for i in range(L-1, R): weights[i] += X return results"},{"question":"Brad bought a ticket for a special train. The train has multiple stations on its route, and Brad has a list of favorable stations to visit. The train schedule indicates the exact arrival times at each station. However, he can only board the train at the first station and can\'t change his decision once he boards. He disembarks once he reaches a favorable station. Given a timetable of the train\'s arrival times at each station and a list of stations Brad considers favorable, determine the minimum time Brad has to wait at a station if he boards the train. Assume Brad gets to the first station exactly at the train\'s arrival time. ---Input--- The first line contains two integers `n` and `m` (2 le n le 10^5, 1 le m le 10^5) — the number of stations and the number of favorable stations, respectively. The second line contains `n` integers `t_1, t_2, ..., t_n` (1 le t_i le 10^9) — the arrival times at each station in chronological order. The third line contains `m` integers — the indices of the favorable stations, which are distinct and sorted in increasing order. ---Output--- Print one integer — the minimum waiting time Brad has to wait at a station after boarding the train. ---Example--- Input 5 2 1 3 5 7 9 2 4 Output 2 ---Note--- Explanation of the example test: - The train arrives at stations as follows: [1, 3, 5, 7, 9]. - The favorable stations are 2 (arrival at 3) and 4 (arrival at 7). - If Brad boards at the first station (arrival at 1), he can disembark at station 2 after 2 units of time. Thus, the minimum waiting time is 2 units.","solution":"def min_waiting_time(n, m, arrival_times, favorable_stations): Returns the minimum waiting time Brad has to wait at a station after boarding the train. Parameters: n (int): Number of stations. m (int): Number of favorable stations. arrival_times (list of int): Arrival times at each station. favorable_stations (list of int): Indices of the favorable stations (1-based). Returns: int: Minimum waiting time. # Convert favorable station indices to zero-based. favorable_stations = [index - 1 for index in favorable_stations] # Compute waiting times for each favorable station waiting_times = [arrival_times[fav] - arrival_times[0] for fav in favorable_stations] # Return the minimum waiting time return min(waiting_times)"},{"question":"Given a sequence of integers, your task is to determine if the sequence is a palindrome. A sequence is a palindrome if it reads the same forward and backward. -----Constraints----- - The sequence will contain between 1 and 1000 integers, inclusive. - Each integer in the sequence can range from -10^9 to 10^9. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Where: - n is an integer representing the number of elements in the sequence. - a_1, a_2, a_3, ..., a_n are the sequence of integers. -----Output----- Output \\"YES\\" if the sequence is a palindrome, otherwise output \\"NO\\". -----Sample Input----- 5 1 2 3 2 1 -----Sample Output----- YES -----Explanation----- The sequence [1, 2, 3, 2, 1] reads the same forward and backward. Therefore, the output is \\"YES\\".","solution":"def is_palindrome(sequence): Returns \\"YES\\" if the given sequence is a palindrome, otherwise \\"NO\\". return \\"YES\\" if sequence == sequence[::-1] else \\"NO\\" def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) sequence = list(map(int, data[1:n+1])) print(is_palindrome(sequence)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string s consisting of \'(\' and \')\' characters. Determine if the string s is a valid Parentheses sequence or not. A string is considered a valid Parentheses sequence if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The pairs of parentheses are properly nested. Input The only line of input contains a string s (1 ≤ length of s ≤ 100). Output Output \\"YES\\" if the string is a valid Parentheses sequence; otherwise, output \\"NO\\". Examples Input () Output YES Input (()) Output YES Input (()) Output NO Note In the first example, the string \\"()\\" is a valid Parentheses sequence. In the second example, the string \\"(())\\" is a valid Parentheses sequence. In the third example, the string \\"(()\\" is not a valid Parentheses sequence because it has an unmatched opening parenthesis.","solution":"def is_valid_parentheses(s): Returns \\"YES\\" if the string s is a valid Parentheses sequence; otherwise, returns \\"NO\\". count = 0 for char in s: if char == \'(\': count += 1 elif char == \')\': count -= 1 if count < 0: return \\"NO\\" return \\"YES\\" if count == 0 else \\"NO\\""},{"question":"You are given a sequence of integers. The task is to find the length of the longest subsequence such that each pair of consecutive elements differs by exactly 1. A subsequence is derived from the sequence by deleting some elements without changing the order of the remaining elements. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 100) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100) — the elements of the sequence. -----Output----- For each test case, output a single integer — the length of the longest subsequence where each pair of consecutive elements differs by exactly 1. -----Examples----- Input 3 6 1 2 3 4 5 6 5 10 12 11 14 13 4 20 20 20 20 Output 6 5 1 -----Note----- In the first test case, the entire sequence 1, 2, 3, 4, 5, 6 is a subsequence where each pair of consecutive elements differs by exactly 1. In the second test case, you can take the subsequence 10, 11, 12, 13, 14. This is the longest possible subsequence where each pair of consecutive elements differs by exactly 1. In the third test case, there is no pair of consecutive elements that differ by 1, so the length of the longest such subsequence is 1.","solution":"def longest_subsequence_length(n, sequence): Returns the length of the longest subsequence such that each pair of consecutive elements differs by exactly 1. if n == 1: return 1 longest = 1 current_length = 1 sequence.sort() for i in range(1, n): if sequence[i] - sequence[i - 1] == 1: current_length += 1 else: longest = max(longest, current_length) current_length = 1 longest = max(longest, current_length) return longest"},{"question":"**Problem Statement:** You are working with a binary string of length N. You are allowed to modify the string by flipping any of its bits (changing a \'0\' to \'1\' or \'1\' to \'0\') a limited number of times, K. Your task is to determine the maximum number of consecutive \'1\'s that can be achieved in the string after performing at most K flips. **Input:** The input is given in the following format: ``` N K binary_string ``` Where: - N is the length of the binary string (1 ≤ N ≤ 5000) - K is the maximum number of flips allowed (0 ≤ K ≤ N) - binary_string is a string of length N consisting of only \'0\'s and \'1\'s **Output:** Print the maximum number of consecutive \'1\'s that can be achieved after at most K flips. **Constraints:** - All inputs are integers - The binary string consists of \'0\' and \'1\' only. **Sample Input 1:** ``` 10 2 1101001100 ``` **Sample Output 1:** ``` 5 ``` **Explanation:** By flipping two \'0\'s in the substring \\"100110\\", the string can become \\"111111\\" which contains 6 consecutive \'1\'s. **Sample Input 2:** ``` 5 1 00000 ``` **Sample Output 2:** ``` 1 ``` **Explanation:** By flipping one \'0\' in the string \\"00000\\", the string can become \\"10000\\" (or any other form with just one \'1\'), which contains 1 consecutive \'1\'. **Sample Input 3:** ``` 8 3 11001011 ``` **Sample Output 3:** ``` 7 ``` **Explanation:** By flipping three \'0\'s in the string \\"11001011\\", the string can become \\"11111111\\", which contains 8 consecutive \'1\'s.","solution":"def max_consecutive_ones(N, K, binary_string): This function returns the maximum number of consecutive \'1\'s that can be achieved by flipping at most K bits in the input binary_string of length N. left = 0 max_length = 0 zero_count = 0 for right in range(N): if binary_string[right] == \'0\': zero_count += 1 while zero_count > K: if binary_string[left] == \'0\': zero_count -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In the kingdom of Westeros, there are numerous castles strategically positioned along its borders. Due to the ongoing war, it has become crucial to supply these castles with provisions regularly to ensure the troops are well-fed and ready for battle. Each castle C requires a certain quantity of provisions Pi, where i is the identifier for each castle. The supply wagon, which delivers the provisions, can carry a maximum of W units of provisions at a time. In one trip, the supply wagon can only deliver the amount of provisions it can carry or less. The king wants to know the minimum number of trips required to supply all the castles. Write a program to calculate the minimum number of trips the wagon needs to make to supply the castles with their required provisions. -----Input----- The first line of input contains an integer N, denoting the number of castles. The second line contains N space-separated integers representing the provisions required by each castle, P1, P2, ..., PN. The third line contains a single integer W, denoting the maximum capacity of the supply wagon. -----Output----- Output a single integer, the minimum number of trips required to supply all the castles. -----Constraints----- - 1 ≤ N ≤ 10^4 - 1 ≤ Pi ≤ 10^4 - 1 ≤ W ≤ 10^4 -----Example----- Input: 5 2 3 7 4 1 8 Output: 3 -----Explanation----- The supply wagon can carry a maximum of 8 units of provisions in one trip. - The first trip can supply castles requiring 2 and 3 units (2 + 3 = 5 ≤ 8). - The second trip can supply the castle requiring 7 units (7 ≤ 8). - The third trip can supply the remaining castles requiring 4 and 1 units (4 + 1 = 5 ≤ 8). Thus, the minimum number of trips required is 3.","solution":"def min_number_of_trips(N, provisions, W): Returns the minimum number of trips required to deliver the provisions to the castles. :param int N: The number of castles :param list provisions: A list of integers representing the provisions required by each castle :param int W: The maximum capacity of the supply wagon :return: The minimum number of trips required :rtype: int # Sort provisions in descending order provisions.sort(reverse=True) # Initialize number of trips trips = 0 # Iterate until all provisions are assigned while provisions: # Initialize current trip load current_load = 0 # Try to load as much as possible without exceeding the wagon capacity i = 0 while i < len(provisions): if current_load + provisions[i] <= W: current_load += provisions[i] provisions.pop(i) else: i += 1 # One trip completed trips += 1 return trips"},{"question":"Given a binary tree, the task is to print the nodes in a spiral level order traversal. In spiral level order traversal, nodes are visited in the order like level 1, level 2 from right to left, level 3 from left to right, and so on. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: 1 3 2 4 5 6 7 Example 2: Input: 10 / 20 30 / 40 60 50 Output: 10 30 20 40 60 50 Your Task: You don\'t need to read input or print anything. Complete the function `spiralOrder()` that takes the root of the binary tree and returns a list of integers representing the spiral order traversal. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ Number of nodes ≤ 10^4 1 ≤ Node value ≤ 10^5","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def spiralOrder(root): if not root: return [] result = [] current_level = deque([root]) left_to_right = True while current_level: level_size = len(current_level) level_nodes = [] for _ in range(level_size): if left_to_right: node = current_level.popleft() level_nodes.append(node.value) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) else: node = current_level.pop() level_nodes.append(node.value) if node.right: current_level.appendleft(node.right) if node.left: current_level.appendleft(node.left) result.extend(level_nodes) left_to_right = not left_to_right return result"},{"question":"You are a software engineer developing a real-time weather monitoring system. Your task is to analyze the hourly temperature data captured by a network of sensors placed in various geographic locations. The system needs to calculate the average temperature reported by the sensors located in a specific region over a given time period. Write a function that takes three arguments: 1. A list of tuples containing temperature data, where each tuple consists of a timestamp (string in the format \\"YYYY-MM-DD HH:MM:SS\\"), a sensor location (string), and the temperature reading (float). 2. A string representing a specific region (e.g., \\"North\\", \\"South\\", \\"East\\", \\"West\\"). 3. A time period specified as two timestamps (string, format \\"YYYY-MM-DD HH:MM:SS\\") representing the start and end of the period. The function should return a tuple with the average temperature for the given region and time period rounded to two decimal places. If no data is available for the specified criteria, return None.","solution":"from datetime import datetime def average_temperature(data, region, start_time, end_time): Calculate the average temperature for the given region and time period. Args: data (list of tuples): Each tuple contains timestamp (str), location (str), temperature (float). region (str): The region for which the average temperature is to be calculated. start_time (str): Start of the time period (format \\"YYYY-MM-DD HH:MM:SS\\"). end_time (str): End of the time period (format \\"YYYY-MM-DD HH:MM:SS\\"). Returns: float: The average temperature rounded to two decimal places, or None if no data is available. start_dt = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_dt = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") temperature_sum = 0.0 count = 0 for entry in data: timestamp, location, temperature = entry entry_dt = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") if location == region and start_dt <= entry_dt <= end_dt: temperature_sum += temperature count += 1 if count == 0: return None average_temp = round(temperature_sum / count, 2) return average_temp"},{"question":"You are organizing a marathon event and need to distribute participation medals at the end of the race. To maintain consistency, you have an exact number of medals for each participant, but you want to maximize the total number of participants who can receive their medals. Each participant will receive the same number of medals, and participants are only satisfied if they can get the exact number of medals. Given the total number of medals and the number of participants who potentially need them, determine the maximum number of participants that can receive the same number of medals without any remainder. Input: The first line contains a single integer T, the number of test cases. Each of the next T lines contains two space-separated integers N and P, where N is the total number of medals, and P is the total number of participants. Output: For each test case, output a single integer - the maximum number of participants that can receive their medals such that each participant gets an equal and exact number of medals. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N, P ≤ 10^18 SAMPLE INPUT 3 50 5 100 28 75 10 SAMPLE OUTPUT 5 25 5","solution":"def max_participants(T, cases): results = [] for N, P in cases: results.append(N // P) return results"},{"question":"Write a function that determines if any two distinct elements in a given list of integers sum up to a specified target value. The function should return a tuple of the two elements if such a pair exists or `None` if no such pair is found. The order of elements in the returned tuple does not matter. The list contains only integers. Examples: ```code [5, 20, 3, 4, 2, 10], 8 => (5, 3) [1, 2, 3, 9], 7 => None [-1, -2, -3, -4], -6 => (-2, -4) [4, 7, 11, 15], 18 => (7, 11) ```","solution":"def find_pair_with_sum(lst, target): Return a tuple of two distinct elements from lst that sum up to the target value. If no such pair exists, return None. :param lst: List of integers :param target: Target sum value :return: A tuple of two elements if a pair exists, or None otherwise seen = set() for num in lst: complement = target - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"A logistics company handles the delivery of packages in a city which is represented as a grid of size n x m. Each cell in the grid either contains a delivery point (denoted as \'*\') or is empty (denoted as \'.\'). The company wants to find the shortest path that visits all the delivery points exactly once and returns to the starting point (0, 0). The path can move up, down, left, or right but cannot move diagonally. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10), denoting the dimensions of the grid. Each of the next n lines contains m characters which are either \'*\' or \'.\', representing the city grid. Output Print the length of the shortest path that starts at (0, 0), visits all delivery points exactly once and returns to the starting point. If it is not possible to visit all the delivery points, print -1. Example Input 3 3 *.. .*. ..* Output 8 Explanation In the 3x3 grid, an example valid shortest path visiting all \'*\' delivery points once and returning to the start is: (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,1) -> (1,0) -> (0,0).","solution":"from itertools import permutations from collections import deque import sys import numpy as np def bfs(start, grid, n, m): Perform BFS to find the shortest path from start to all delivery points. queue = deque([start]) distance = {start: 0} while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in distance and grid[nx][ny] != \'#\': distance[(nx, ny)] = distance[(x, y)] + 1 queue.append((nx, ny)) return distance def shortest_path_length(n, m, grid): # Check if the starting point is a delivery point; if not, return -1 if grid[0][0] != \'*\': return -1 # Identify all delivery points delivery_points = [] for i in range(n): for j in range(m): if grid[i][j] == \'*\': delivery_points.append((i, j)) # Calculate pairwise distances between all delivery points using BFS distances = {} for dp in delivery_points: distances[dp] = bfs(dp, grid, n, m) # Try all permutations of the delivery points to find the shortest path min_path_length = float(\'inf\') for perm in permutations(delivery_points): # make sure the path starts from (0, 0) and ends at the same place if perm[0] == (0, 0): path_length = 0 valid_path = True for i in range(1, len(perm)): if perm[i] in distances[perm[i-1]]: path_length += distances[perm[i-1]][perm[i]] else: valid_path = False break if valid_path and (0, 0) in distances[perm[-1]]: path_length += distances[perm[-1]][(0, 0)] min_path_length = min(min_path_length, path_length) return min_path_length if min_path_length != float(\'inf\') else -1"},{"question":"You are given a string that contains only lowercase English letters. Your task is to find the length of the longest substring where the frequency of each character in the substring is greater than or equal to a given minimum frequency k. # Example: Input: s = \\"aaabbcc\\", k = 3 Output: 3 Explanation: The longest substring is \\"aaa\\" with frequency 3. Input: s = \\"ababbc\\", k = 2 Output: 5 Explanation: The longest substring is \\"ababb\\" with frequency 2. # Constraints: - 1 <= s.length <= 10^4 - 1 <= k <= 10^5 Write a function `longestSubstring(s: str, k: int) -> int` that returns the length of the longest substring of `s` such that the frequency of each character in the substring is greater than or equal to `k`.","solution":"def longestSubstring(s: str, k: int) -> int: def helper(start, end): if end - start < k: return 0 freq = {} for i in range(start, end): freq[s[i]] = freq.get(s[i], 0) + 1 for i in range(start, end): if freq[s[i]] < k: j = i + 1 while j < end and freq[s[j]] < k: j += 1 return max(helper(start, i), helper(j, end)) return end - start return helper(0, len(s))"},{"question":"The kingdom of Algorithmsland is composed of numerous villages, each connected by a series of roads. Villagers want to place a fountain in their kingdom such that it minimizes the longest distance any villager has to walk to get water. The kingdom has n villages and n-1 roads, making it a tree structure. Each road has a certain length. Your task is to determine the optimal village to place the fountain so that the maximum distance any village has to travel to get to the fountain is minimized. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of villages. Each of the next n-1 lines describes a road with three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^4), representing a road between villages u and v with length w. -----Output----- Print an integer, the minimized maximum distance any village has to walk to get to the fountain. -----Examples----- Sample Input: 5 1 2 3 2 3 4 3 4 5 4 5 6 Sample Output: 9","solution":"from collections import defaultdict, deque def find_furthest(node, n, graph): dist = [-1] * (n + 1) queue = deque([node]) dist[node] = 0 furthest_node, max_dist = node, 0 while queue: curr = queue.popleft() for nei, length in graph[curr]: if dist[nei] == -1: dist[nei] = dist[curr] + length queue.append(nei) if dist[nei] > max_dist: max_dist = dist[nei] furthest_node = nei return furthest_node, max_dist def minimize_max_distance(n, roads): if n == 1: return 0 graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) node1 = find_furthest(1, n, graph)[0] furthest_from_node1, max_dist1 = find_furthest(node1, n, graph) furthest_from_node2, max_dist2 = find_furthest(furthest_from_node1, n, graph) return max_dist2 // 2 # Example usage: n = 5 roads = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)] print(minimize_max_distance(n, roads)) # Output: 9"},{"question":"You are given a sequence of steps to perform a certain task. However, due to an error in transmission, the sequence is currently in reverse order. Your task is to correct the sequence by reversing it back to the original order and then apply a specific operation to each element in the sequence. The operation is defined as: for each element in the sequence, multiply it by its 1-based position in the sequence. Finally, return the modified sequence. Input: - The first line will contain a single integer T, the number of test cases. - For each test case: - The first line will contain an integer N, the number of steps in the sequence (1 ≤ N ≤ 100). - The second line contains N integers representing the reversed sequence. Output: For each test case, output the corrected sequence after applying the specific operation. Example: Input: 2 3 9 7 5 4 10 20 30 40 Output: 5 14 27 40 60 60 40","solution":"def process_sequences(T, test_cases): Reverses the order of each sequence and applies the specific operation where each element is multiplied by its 1-based position in the sequence. Args: T : int : number of test cases test_cases : list : list of tuples, each containing an integer N and a list of N integers Returns: results : list : list of lists, each containing the modified sequence for the respective test case results = [] for i in range(T): N, reversed_sequence = test_cases[i] corrected_sequence = reversed_sequence[::-1] modified_sequence = [corrected_sequence[j] * (j + 1) for j in range(N)] results.append(modified_sequence) return results"},{"question":"Given an integer `n` and a 2D list with `n` rows, each containing three integers representing the coefficients of a quadratic equation `a`, `b`, and `c`, write a function to determine the nature of the roots for each quadratic equation. Return a list containing the nature of the roots for each equation as follows: - \\"Real and Distinct\\" if the equation has two distinct real roots. - \\"Real and Equal\\" if the equation has exactly one real root. - \\"Complex\\" if the equation has two complex (non-real) roots. # Example: ``` Input: n = 3 coefficients = [ [1, -3, 2], [1, -2, 1], [1, 1, 1] ] Output: [\\"Real and Distinct\\", \\"Real and Equal\\", \\"Complex\\"] ``` # Note: You may assume that the input coefficients will always represent a valid quadratic equation with `a != 0`.","solution":"def determine_nature_of_roots(n, coefficients): Determines the nature of the roots of quadratic equations based on the coefficients provided. Args: n (int): Number of quadratic equations. coefficients (list of list of int): A 2D list containing the coefficients of the quadratic equations. Returns: list of str: A list containing the nature of the roots for each equation. nature_of_roots = [] for coef in coefficients: a, b, c = coef discriminant = b**2 - 4*a*c if discriminant > 0: nature_of_roots.append(\\"Real and Distinct\\") elif discriminant == 0: nature_of_roots.append(\\"Real and Equal\\") else: nature_of_roots.append(\\"Complex\\") return nature_of_roots"},{"question":"A company is organizing a team-building activity where employees form teams and solve a series of puzzles. Each employee has a unique puzzle-solving skill level given in an array skills[]. The team-building activity has a rule that a team can only be made up of employees whose combined skill levels sum up to an exact value k or they are the closest possible to it but not exceeding k. The task is to find the maximum sum of skills that doesn\'t exceed k using a subset of the employees. Example 1: Input: n = 4 k = 13 skills[] = {5, 8, 3, 7} Output: 13 Explanation: The subsets whose sums do not exceed 13 are {5, 8}, {3, 7}, and {5, 7}. The maximum sum of these subsets is 13. Example 2: Input: n = 5 k = 10 skills[] = {1, 4, 3, 2, 6} Output: 10 Explanation: The subsets whose sums do not exceed 10 are {1, 4, 3, 2}, and {4, 6}. The maximum sum of these subsets is 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMaxSkillSum() which takes the array skills[] describing the skill levels of employees, an integer n denoting the number of employees, and an integer k representing the maximum allowed team skill sum as input parameters and returns the maximum sum of skills that can be obtained without exceeding k. Expected Time Complexity: O(n * k) Expected Auxiliary Space: O(k) Constraints: 1 ≤ n ≤ 100 1 ≤ k ≤ 1000","solution":"def findMaxSkillSum(n, k, skills): dp = [0] * (k + 1) for skill in skills: for j in range(k, skill - 1, -1): dp[j] = max(dp[j], dp[j - skill] + skill) return dp[k]"},{"question":"You have been asked to help a renowned publisher analyze the text of their new book series. The editors want to ensure that every sentence in the book follows a certain structure and style guide. One of the guidelines is that every sentence must contain a balanced set of parentheses. You are given a paragraph, which may contain multiple sentences. Your task is to determine if each sentence in the paragraph has balanced parentheses. A sentence is considered to have balanced parentheses if, for every opening parenthesis \'(\', there is a corresponding closing parenthesis \')\', and the pairs of parentheses are properly nested. Implement a function `check_balanced_parentheses` that takes a paragraph as input and returns a list of boolean values indicating whether each sentence in the paragraph has balanced parentheses. Input: - The input contains a single string representing a paragraph. Sentences in this paragraph are separated by periods \'.\'. Output: - Output a list of boolean values, where each boolean value indicates whether the corresponding sentence in the paragraph has balanced parentheses. Constraints: - The paragraph will contain at least one sentence and at most 50 sentences. - Each sentence will have a length of at least 1 character and at most 500 characters. - Sentences will contain only lowercase English letters, spaces, and parenthetical characters \'(\', \')\'. SAMPLE INPUT \\"the quick brown fox. jumps over (the lazy dog). a quick (brown (fox jumps) over) the lazy dog. an (unbalanced (sentence.\\" SAMPLE OUTPUT [True, True, True, False] Explanation: - The first sentence \\"the quick brown fox\\" does not contain any parentheses and is considered balanced. - The second sentence \\"jumps over (the lazy dog)\\" has balanced parentheses. - The third sentence \\"a quick (brown (fox jumps) over) the lazy dog\\" has properly nested balanced parentheses. - The fourth sentence \\"an (unbalanced (sentence\\" has an unbalanced set of parentheses, thus it is not balanced.","solution":"def check_balanced_parentheses(paragraph): Takes a paragraph and returns a list of boolean values indicating whether each sentence in the paragraph has balanced parentheses. sentences = paragraph.split(\'.\') result = [] for sentence in sentences: sentence = sentence.strip() if not sentence: continue stack = [] balanced = True for char in sentence: if char == \'(\': stack.append(char) elif char == \')\': if stack and stack[-1] == \'(\': stack.pop() else: balanced = False break if stack: balanced = False result.append(balanced) return result"},{"question":"Stacy loves reporting temperatures at her weather station. She collects temperatures throughout the day for d days. She wants to find the longest sequence of consecutive days where the temperature strictly increases every day. Given an array of temperatures, help Stacy determine the length of the longest such sequence for each day. -----Input----- The first line contains an integer d (1 leq d leq 10^4) - the number of days. Each of the next d lines contains an integer n (1 leq n leq 10^5) - the number of temperature readings for that day, followed by n integers t_1, t_2, ldots, t_n (-100 leq t_i leq 100) - the temperatures recorded throughout the day. The total number of readings across all days does not exceed 10^6. -----Output----- For each day, print a single integer - the length of the longest sequence where the temperature strictly increases. -----Examples----- Input 3 5 1 2 3 2 4 6 -3 -2 -1 0 1 2 4 5 4 3 2 Output 3 6 1 -----Note----- In the first example, the array of temperatures is [1, 2, 3, 2, 4]. The longest sequence of strictly increasing temperatures is [1, 2, 3]. In the second example, the array of temperatures is [-3, -2, -1, 0, 1, 2]. The entire array is strictly increasing, so the length is 6. In the third example, the array of temperatures is [5, 4, 3, 2]. There is no increasing sequence longer than a single element. Thus, the length is 1.","solution":"def longest_increasing_sequence(d, temp_data): Returns the length of the longest sequence of strictly increasing temperatures for each day. results = [] for day_data in temp_data: n = day_data[0] temperatures = day_data[1:] if n == 0: results.append(0) continue longest, current_streak = 1, 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_streak += 1 longest = max(longest, current_streak) else: current_streak = 1 results.append(longest) return results"},{"question":"# Task Given a list of integers, write a function to identify all the elements that have at least two duplicates in the list. The result should be a new list sorted in ascending order containing these elements. If no elements have at least two duplicates, return an empty list. # Example For the list `[1, 3, 7, 1, 3, 1, 3, 2, 4, 4, 4, 4]`, the output should be `[1, 3, 4]`. Here is the step-by-step explanation: ``` 1 appears 3 times 3 appears 3 times 4 appears 4 times 7 appears 1 time 2 appears 1 time Elements 1, 3, and 4 appear at least two times. After sorting, we get [1, 3, 4]. ``` # Input/Output - `[input]` list of integers `lst` Constraints: - The length of `lst` is between 2 and 1000 inclusive. - Each element in `lst` is between 1 and 1000 inclusive. - `[output]` a list of integers","solution":"def find_elements_with_two_duplicates(lst): Identify all the elements that have at least two duplicates in the list. Return a new list sorted in ascending order containing these elements. from collections import Counter # Calculate frequency of each element in the list frequency = Counter(lst) # Create a list of elements with at least two duplicates result = [element for element, count in frequency.items() if count >= 3] # Return the sorted list return sorted(result)"},{"question":"The Ministry of Magic has developed a new teleportation spell to enhance the mobility of Aurors. The teleportation spell works based on a series of gates arranged along a straight path. Each gate has a starting point `a` and an ending point `b` and allows instantaneous travel between these two points. To optimize the arrangement of these gates, the Ministry needs an efficient way to answer certain queries related to the reachability of positions using the gates. Each gate allows movement from `a` to `b` or from `b` to `a`, but not beyond these points. You are tasked with implementing a system to manage the placement of gates and to answer queries about reachability between points. Formally, you have to implement two types of operations: * 1 a b: add a new gate connecting point `a` to point `b`. * 2 x y: determine if it is possible to travel from point `x` to point `y` using the existing gates. **Input** The first line of input contains a single integer `q` (1 ≤ q ≤ 2·104) denoting the number of operations. Each of the next `q` lines contains an operation. For operations of the first type, the line contains `1 a b` (1 ≤ a, b ≤ 105; a ≠ b). For operations of the second type, the line contains `2 x y` (1 ≤ x, y ≤ 105). **Output** For each operation of the second type, output \\"YES\\" if it is possible to travel from point `x` to point `y` using the existing gates, otherwise output \\"NO\\". **Examples** **Input** ``` 6 1 1 2 1 2 3 2 1 3 1 4 5 2 1 5 2 4 5 ``` **Output** ``` YES NO YES ``` **Explanation** In the first sample case, there is a direct gate from 1 to 2, and another gate from 2 to 3, making it possible to travel from 1 to 3 indirectly through point 2. Hence, the answer for query 3 is \\"YES\\". For the fourth query, there is no set of gates that connect points 1 to 5, hence the answer is \\"NO\\". For the fifth query, there is a direct gate from 4 to 5, hence the answer is \\"YES\\".","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def teleportation_system(operations): uf = UnionFind(105001) results = [] for operation in operations: op, a, b = operation if op == 1: uf.union(a, b) elif op == 2: if uf.find(a) == uf.find(b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alex is trying to optimize his website\'s data processing speed. During his optimization process, he discovered that he has n tasks that he needs to complete sequentially. Each task i has a specific time t_i required to complete it. However, due to resource limitations, each task can only be processed during certain available windows, defined by two integers l_i (start time) and r_i (end time). Each task can be started and completed within its time window [l_i, r_i], but tasks must be processed in sequential order and cannot overlap. Alex wants to determine if it\'s possible to complete all n tasks given the time constraints. Write a program to determine if all tasks can be completed within the provided time windows. If they can be completed, print \\"Yes\\". Otherwise, print \\"No\\". -----Input----- The first line contains an integer t (1 le t le 10000) — the number of test cases. Each test case consists of two parts: 1. The first line contains an integer n (1 le n le 100000) — the number of tasks. 2. The next n lines each contain three integers t_i, l_i, and r_i (1 le t_i le 10^6, 1 le l_i le r_i le 10^6) — the time required for the task, the start time of the available window, and the end time of the available window for each task, respectively. It is guaranteed that the sum of n over all test cases does not exceed 100000. -----Output----- For each test case, print \\"Yes\\" if all tasks can be completed within their respective time windows in the given order, otherwise print \\"No\\". -----Example----- Input 3 3 5 1 10 2 6 13 3 10 20 2 4 3 8 5 9 12 4 3 1 5 2 5 9 4 10 15 3 16 20 Output Yes No Yes","solution":"def can_complete_tasks(t, test_cases): results = [] for case in test_cases: n = case[0] tasks = case[1] current_time = 0 possible = True for t_i, l_i, r_i in tasks: earliest_start = max(current_time, l_i) latest_start = r_i - t_i if earliest_start <= latest_start: current_time = earliest_start + t_i else: possible = False break if possible: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage: # test input parsed accordingly t = 3 test_cases = [ (3, [(5, 1, 10), (2, 6, 13), (3, 10, 20)]), (2, [(4, 3, 8), (5, 9, 12)]), (4, [(3, 1, 5), (2, 5, 9), (4, 10, 15), (3, 16, 20)]) ] print(can_complete_tasks(t, test_cases))"},{"question":"Given an array of integers, determine whether the array can be divided into three contiguous subarrays with equal sum. Example 1: Input: arr = [1, 2, 3, 0, 3] Output: true Explanation: The array can be divided into [1, 2], [3], and [0, 3], each with sum 3. Example 2: Input: arr = [1, 2, 3, 4, 5, 6] Output: false Explanation: There is no way to divide the array into three contiguous subarrays with equal sum. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canDivideIntoThreePartsOfEqualSum() which takes the array arr and its size n as input and returns true if the array can be divided into three contiguous subarrays with equal sum, otherwise false. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 <= n <= 10^5 -10^4 <= arr[i] <= 10^4","solution":"def canDivideIntoThreePartsOfEqualSum(arr): This function checks whether the array can be divided into three contiguous subarrays with equal sum. total_sum = sum(arr) if total_sum % 3 != 0: return False target_sum = total_sum // 3 n = len(arr) current_sum, count = 0, 0 for i in range(n): current_sum += arr[i] if current_sum == target_sum: count += 1 current_sum = 0 if count == 3: return True return False"},{"question":"In a far land, King Arthur has several knights who are tasked with patrolling the kingdom. The kingdom is represented as a grid of size `N x M`. Each cell in the grid can either contain a knight, be empty, or be an impassable obstacle. The goal is to ensure that all empty cells in the grid are reachable by at least one knight. Knights move in a straight line horizontally or vertically but cannot pass through obstacles. Each knight can move to an adjacent empty cell if it\'s in the same row or column and there are no obstacles between the current cell and the destination cell. Knights cannot move outside the boundaries of the grid. Given multiple configurations of the grid, your task is to determine the minimum number of knights required to ensure that every empty cell is reachable by at least one knight. ------ Input ------ The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains two space-separated integers `N` and `M` denoting the number of rows and columns of the grid, respectively. Each of the next `N` lines contain `M` characters, where each character is one of the following: - \'K\' denoting a knight, - \'.\' denoting an empty cell, - \'#\' denoting an obstacle. ------ Output ------ For each test case, output a single line containing the minimum number of knights required to ensure that every empty cell is reachable by at least one knight. If it is not possible, output `-1`. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N, M ≤ 50 ------ Sample Input 1 ------ 2 3 3 K.# .#. ... 2 4 K... .#K. ------ Sample Output 1 ------ 1 2 Explanation: Int test case 1: Only one knight is required because the initial knight can patrol all the empty cells. In test case 2: At least two knights are required because there is one knight already but another is required to patrol the rightmost cells.","solution":"from collections import deque def bfs(n, m, grid, start): visited = [[False] * m for _ in range(n)] queue = deque([start]) visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() # Traverse in all 4 possible directions (up, down, left, right) for nx, ny in [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]: if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return visited def min_knights_required(t, cases): results = [] for i in range(t): n, m = cases[i][0] grid = cases[i][1] coverage = [[0] * m for _ in range(n)] knights = [] for r in range(n): for c in range(m): if grid[r][c] == \'K\': knights.append((r, c)) for kx, ky in knights: visited = bfs(n, m, grid, (kx, ky)) for r in range(n): for c in range(m): if visited[r][c]: coverage[r][c] += 1 empty_cells = [(r, c) for r in range(n) for c in range(m) if grid[r][c] == \'.\'] # Check if all empty cells are covered covered_counts = [coverage[r][c] for r, c in empty_cells] if all(count > 0 for count in covered_counts): results.append(len(knights)) else: results.append(-1) return results"},{"question":"Laura is playing a new type of game called \\"Mirror Words\\" in which she needs to find pairs of words that are the reverse of each other. She needs your help to determine such pairs from a given list of words. Write a program that will identify all such pairs and display them. Each word can only be part of one pair. -----Input----- The first line of input contains a single integer N (2 leq N leq 100), the number of words. The following N lines each contain a single word consisting of lowercase letters, each with a length between 1 and 10 inclusive. -----Output----- For each pair of mirror words found, output the words on a single line separated by a space. The pairs should be output in the order they appear in the input list. If no mirror words are found, output \\"No mirror words found.\\" -----Examples----- Sample Input 1: 5 abc cba xyz zyx def Sample Output 1: abc cba xyz zyx Sample Input 2: 4 hello world dlrow olleh Sample Output 2: hello olleh world dlrow Sample Input 3: 3 abc def ghi Sample Output 3: No mirror words found","solution":"def find_mirror_words(words): This function takes a list of words and finds pairs of words that are mirrors of each other. output = [] used = set() for i, word1 in enumerate(words): if word1 in used: continue for j, word2 in enumerate(words[i+1:], start=i+1): if word2 in used: continue if word1 == word2[::-1]: output.append((word1, word2)) used.add(word1) used.add(word2) break return output if output else [\\"No mirror words found\\"]"},{"question":"**Second Smallest Number** Mary loves working with arrays of numbers. She has an array, and she wants to find the second smallest element in the array. Can you help her with this task? If the array does not contain at least two unique numbers, return -1. ------ Input ------ The first line contains a single integer N denoting the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. ------ Output ------ Output a single integer which is the second smallest number in the array, or -1 if it does not exist. ------ Constraints ------ 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 ------ Sample Input 1 ------ 5 4 2 1 3 5 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ The smallest number is 1, and the second smallest number is 2. ------ Sample Input 2 ------ 4 7 7 7 7 ------ Sample Output 2 ------ -1 ------ Explanation 2 ------ There is no second smallest number as all elements are the same. ------ Sample Input 3 ------ 3 -1 -2 -3 ------ Sample Output 3 ------ -2 ------ Explanation 3 ------ The smallest number is -3, and the second smallest number is -2.","solution":"def second_smallest_number(arr): Returns the second smallest number in the array or -1 if it does not exist. if len(arr) < 2: return -1 unique_elements = list(set(arr)) if len(unique_elements) < 2: return -1 unique_elements.sort() return unique_elements[1]"},{"question":"John loves spending his weekends exploring nature, especially hiking through various trails. Each trail is represented as a binary string where \'1\' indicates a segment John can walk on, and \'0\' indicates an obstacle that he cannot pass. John wants to know the maximum distance he can walk on each trail without encountering any obstacles (i.e., the maximum number of consecutive \'1\'s in the binary string). Your task is to help John by writing a program that, given a series of trails represented as binary strings, calculates the maximum walkable distance for each trail. Input - First Line of input contains T, the number of testcases. - The next T lines will each contain a binary string representing a trail. Output For each testcase, print the output in a new line. Constraints: - 1 <= T <= 100 - 1 <= Length of binary string <= 10^5 Example Input: 3 110111 101 1111111111 Output: 3 1 10 Explanation Testcase 1: The binary string \\"110111\\" has segments of \'1\'s with lengths 2, 1, and 3. The maximum is 3. Testcase 2: The binary string \\"101\\" has segments of \'1\'s with lengths 1 and 1. The maximum is 1. Testcase 3: The binary string \\"1111111111\\" has one segment of \'1\'s with length 10. The maximum is 10.","solution":"def max_walkable_distance(trails): Returns the maximum walkable distance for each trail. max_distances = [] for trail in trails: max_distance = 0 current_distance = 0 for segment in trail: if segment == \'1\': current_distance += 1 if current_distance > max_distance: max_distance = current_distance else: current_distance = 0 max_distances.append(max_distance) return max_distances if __name__ == \\"__main__\\": T = int(input().strip()) trails = [input().strip() for _ in range(T)] results = max_walkable_distance(trails) for result in results: print(result)"},{"question":"You are assisting Alex in a card game tournament. He is given a deck of cards, each with a distinct number from 1 to n. His task is to reorder the deck such that the cards are in increasing order. However, he can only use a special operation which allows him to remove the top card of the deck and place it at any position in the deck (including the same position). Given the initial order of the cards in the deck, determine the minimum number of operations needed to reorder the deck in increasing order. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of cards in the deck. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ n), representing the initial order of the cards in the deck. Output Print a single integer, the minimum number of operations required to reorder the deck. Examples Input 5 5 4 3 2 1 Output 4 Input 5 3 1 2 5 4 Output 3 Input 3 1 3 2 Output 1","solution":"def min_operations_to_sort_deck(n, deck): Returns the minimum number of operations required to reorder the deck in increasing order. # Find longest increasing subsequence (LIS) longest_increasing = 0 lis_len = [0] * (n + 1) for card in deck: # Update LIS ending with this card lis_len[card] = lis_len[card-1] + 1 longest_increasing = max(longest_increasing, lis_len[card]) # Operations needed to reorder is n minus length of longest increasing subsequence return n - longest_increasing"},{"question":"# Task Given an array of integers and an integer `k`, determine the `k` most frequent elements in the array. If there are multiple answers, return the numbers such that their order in the returned result follows their first appear in the original array. # Example For `arr = [1,1,1,2,2,3]` and `k = 2`, the output should be `[1, 2]`. For `arr = [1,1,2,2,3,3,4]` and `k = 3`, the output should be `[1, 2, 3]`. For `arr = [4,4,4,6,6,8,8,8]` and `k = 2`, the output should be `[4, 8]`. # Input/Output - `[input]` integer array `arr` An array of integers, can contain both positive and negative numbers. - `[input]` integer `k` A positive integer `k` representing the number of most frequent elements to return. - `[output]` an integer array An integer array containing `k` most frequent elements in the original order.","solution":"from collections import Counter def k_most_frequent_elements(arr, k): Returns the k most frequent elements in the array in their original order of appearance. Parameters: arr (list): List of integers. k (int): Number of most frequent elements to return. Returns: list: List of k most frequent elements. if k == 0 or not arr: return [] frequency = Counter(arr) # Sorted in decreasing frequency, and for tie, based on first appearance most_frequent = sorted(frequency, key=lambda x: (-frequency[x], arr.index(x))) return most_frequent[:k]"},{"question":"Given two strings A and B, find the minimum number of operations required to convert string A into string B. The permitted operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. Constraints * 1 ≤ |A|, |B| ≤ 1000 Input Input is given from Standard Input in the following format: A B Output Print a single integer representing the minimum number of operations required to convert string A into string B. Examples Input kitten sitting Output 3 Input intention execution Output 5 Input apple apple Output 0","solution":"def min_distance(A: str, B: str) -> int: Returns the minimum number of operations required to convert string A into string B. The allowed operations are insertion, deletion, and replacement of characters. m, n = len(A), len(B) # Create a DP table to store the minimum edit distance for each substring pair dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): dp[i][0] = i # If B is an empty string, we need to delete all characters of A for j in range(n + 1): dp[0][j] = j # If A is an empty string, we need to insert all characters of B # Fill the table based on the operations for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the characters are the same, no new operation is needed else: dp[i][j] = min(dp[i - 1][j] + 1, # Delete operation dp[i][j - 1] + 1, # Insert operation dp[i - 1][j - 1] + 1) # Replace operation return dp[m][n]"},{"question":"Given a string S consisting of lowercase English letters, find the minimum length of a contiguous substring that contains all the unique characters of the original string exactly once. ------ Input: ------ The first line will contain T, the number of test cases. Then the test cases follow. Each test case consists of a single string S, the string to examine. ------ Output: ------ For each test case, output a single integer, the length of the minimum contiguous substring that contains all unique characters of the original string exactly once. ------ Constraints ------ 1 leq T leq 200 1 leq |S| leq 5000 The string S consists of lowercase English letters only. ----- Sample Input 1 ------ 3 abcabcbb bbcaraca zabcz ----- Sample Output 1 ------ 3 4 4 ----- Explanation 1 ------ Case 1: The shortest contiguous substring containing all unique characters \'a\', \'b\', \'c\' is \\"abc\\". Case 2: The shortest contiguous substring containing all unique characters \'b\', \'c\', \'a\', \'r\' is \\"rcar\\". Case 3: The shortest contiguous substring containing all unique characters \'z\', \'a\', \'b\', \'c\' is \\"zabc\\".","solution":"def min_substring_length_with_all_unique_chars(s): Returns the minimum length of a contiguous substring that contains all unique characters of the original string exactly once. unique_chars = set(s) num_unique_chars = len(unique_chars) n = len(s) min_length = n + 1 start = 0 char_count = {} for end in range(n): char_count[s[end]] = char_count.get(s[end], 0) + 1 while len(char_count) == num_unique_chars: min_length = min(min_length, end - start + 1) char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 return min_length def solve(test_cases): results = [] for s in test_cases: results.append(min_substring_length_with_all_unique_chars(s)) return results"},{"question":"Given an array of integers called \\"weights\\" representing the weights of various gold pieces and an integer \\"capacity\\" representing the maximum weight that a knapsack can hold, implement the knapsack problem to find the maximum total weight of gold that fits into the knapsack without exceeding the capacity. You may not break any gold pieces; you must either take an entire piece or leave it. Example 1: Input: capacity = 50 weights = [10, 20, 30] Output: 50 Explanation: The maximum weight you can carry is exactly 50 by taking the pieces weighing 20 and 30. Example 2: Input: capacity = 20 weights = [10, 9, 8, 7] Output: 20 Explanation: The maximum weight you can carry is exactly 20 by taking the pieces weighing 10 and 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function knapsack() which takes the array weights and the integer capacity as parameters and returns an integer representing the maximum total weight of gold that fits into the knapsack. Expected Time Complexity: O(n * capacity) Expected Auxiliary Space: O(capacity) Constraints: 1 ≤ weights.length ≤ 100 1 ≤ weights[i] ≤ 1000 1 ≤ capacity ≤ 1000","solution":"def knapsack(capacity, weights): Given an array of integers called \\"weights\\" representing the weights of various gold pieces and an integer \\"capacity\\" representing the maximum weight that a knapsack can hold, this function returns the maximum total weight of gold that fits into the knapsack without exceeding the capacity. n = len(weights) dp = [0] * (capacity + 1) for weight in weights: for c in range(capacity, weight - 1, -1): dp[c] = max(dp[c], dp[c - weight] + weight) return dp[capacity]"},{"question":"You are given a queue Q containing integers. You have to reverse the first K elements of the queue, leaving the rest of the queue in the same order. Example: Input: Q = [10, 20, 30, 40, 50] K = 3 Output: [30, 20, 10, 40, 50] Input: Q = [1, 2, 3, 4, 5, 6] K = 4 Output: [4, 3, 2, 1, 5, 6] Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseKElements() which takes the queue Q and the integer K as input and reverses the first K elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(K) Constraints: 1 <= size of the queue <= 10^4 1 <= K <= size of the queue -10^6 <= Each element of the queue <= 10^6","solution":"from collections import deque def reverseKElements(Q, K): Reverses the first K elements of the queue Q. Arguments: Q -- list, the queue of integers K -- int, the number of elements to reverse from the front of the queue Returns: list -- the queue after the first K elements have been reversed # Convert the list Q to a deque for efficient removal from the front queue = deque(Q) # Take out the first K elements and reverse them stack = [] for _ in range(K): stack.append(queue.popleft()) stack.reverse() # Add the reversed elements back into the queue queue.extendleft(stack[::-1]) # Convert the deque back to a list and return it return list(queue)"},{"question":"You are given a list of integers. Your task is to find the maximum product of any three distinct integers in the list. If the list contains fewer than three integers, return \\"Not enough elements\\". Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of one line containing a list of integers separated by spaces. Output: For each test case, print the maximum product of any three distinct integers in the list. If the list contains fewer than three integers, print \\"Not enough elements\\". Constraints: 1 ≤ T ≤ 10 If T is not in this range, print \\"Invalid Test\\" (without the quotes). 1 ≤ Number of integers in the list ≤ 100 -1000 ≤ Each integer ≤ 1000 For Example, if the input is: 0 1 2 3 Print \\"Invalid Test\\" (without the quotes). SAMPLE INPUT: 3 1 10 2 6 5 3 -10 -10 5 2 1 2 SAMPLE OUTPUT: 300 500 Not enough elements","solution":"def max_product_of_three(T, test_cases): Returns the maximum product of any three distinct integers in each test case. :param T: Number of test cases :param test_cases: List of test cases, each is a list of integers :return: List of results for each test case if T < 1 or T > 10: return [\\"Invalid Test\\"] results = [] for case in test_cases: if len(case) < 3: results.append(\\"Not enough elements\\") else: sorted_case = sorted(case) max_product = max(sorted_case[0] * sorted_case[1] * sorted_case[-1], sorted_case[-1] * sorted_case[-2] * sorted_case[-3]) results.append(max_product) return results"},{"question":"You are to implement a system to manage parking slots in a busy city. The city has a predefined set of parking slots, each with a unique ID and capacity. A parking slot can accommodate a limited number of vehicles at any given time. Your task is to create a system that can handle parking requests, vacate requests, and return the current status of slots. You should ensure that the slot capacities are not exceeded at any point. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of parking slots. The next n lines describe the parking slots. Each line contains an integer si (1 ≤ si ≤ 1000) — the capacity of the i-th parking slot. The slots are initially empty. The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. The next q lines contain one of three types of queries: * \\"+ x y\\" — request to park y vehicles (1 ≤ y ≤ 1000) in slot number x (1 ≤ x ≤ n). * \\"- x y\\" — request to vacate y vehicles (1 ≤ y ≤ 1000) from slot number x (1 ≤ x ≤ n). It\'s guaranteed that there will be at least y vehicles parked in slot x when a vacate request is made. * \\"?\\" — request the current status of all parking slots. Output For each query of type \\"?\\" print the current number of parked vehicles for each slot in a single line separated by spaces. You should print the statuses in the order, in which they are given in the input. Example Input 3 10 15 5 7 + 1 5 + 2 10 + 3 3 ? - 2 4 ? + 3 1 ? + 1 6 ? - 3 2 ? Output 5 10 3 5 6 3 5 6 4 11 6 4 11 6 2 Explanation - We have 3 parking slots with capacities 10, 15, and 5 respectively. - We process 7 queries, where vehicles are parked, vacated, or the status is requested. - The first status query returns \\"5 10 3\\" indicating 5 vehicles in slot 1, 10 vehicles in slot 2, and 3 vehicles in slot 3. - The second status query, after vacating 4 vehicles from slot 2, returns \\"5 6 3\\". - The subsequent queries update the parking slots accordingly, and the respective status queries capture those changes.","solution":"def parking_management(n, slots, q, queries): parked_vehicles = [0] * n status_output = [] for query in queries: parts = query.split() command = parts[0] if command == \\"+\\": x = int(parts[1]) - 1 y = int(parts[2]) parked_vehicles[x] += y elif command == \\"-\\": x = int(parts[1]) - 1 y = int(parts[2]) parked_vehicles[x] -= y elif command == \\"?\\": status_output.append(\\" \\".join(str(parked_vehicles[i]) for i in range(n))) return status_output # Let\'s include a function to handle the input and output for completeness def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) slots = [int(data[i + 1]) for i in range(n)] q = int(data[n + 1]) queries = data[n + 2 : n + 2 + q] result = parking_management(n, slots, q, queries) for line in result: print(line) # For example usage, we would replace sys.stdin with actual input data, for testing: # Example usage: # main()"},{"question":"Anika is trying to write a program to help her count the unique words in a paragraph while ignoring the case of the words and any punctuation attached to them. She wants to only count alpha-numeric words and to display the words in the order of their first appearance. Your task is to assist Anika in writing this program so she can use it for her school project. Given a paragraph, remove all punctuation and convert the whole text to lowercase, then count the number of unique words and display them in the order they appeared. Example: Input: \\"This is a test. This test is only a test.\\" Output: 6 this is a test only -----Input:----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing a string paragraph. -----Output:----- For each test case, print the number of unique words and display them in the order they first appeared, each on a new line. -----Constraints:----- 1 leq T leq 10 1 leq |paragraph| leq 10^3 -----Sample Input:----- 2 \\"This is a simple example. A very simple example.\\" \\"A Test case, another test case.\\" -----Sample Output:----- 5 this is a simple example 5 a test case another","solution":"import re def count_unique_words(paragraph): # Normalize case and remove punctuation paragraph = paragraph.lower() words = re.findall(r\'bw+b\', paragraph) seen = set() unique_words = [] for word in words: if word not in seen: seen.add(word) unique_words.append(word) return unique_words def process_test_cases(test_cases): results = [] for paragraph in test_cases: unique_words = count_unique_words(paragraph) results.append(unique_words) return results def main(): T = int(input().strip()) test_cases = [input().strip() for _ in range(T)] results = process_test_cases(test_cases) for result in results: print(len(result)) for word in result: print(word) if __name__ == \\"__main__\\": main()"},{"question":"In this challenge, you need to write a function to determine if a given string of parentheses is valid. A valid string follows these rules: 1. Open parentheses must be closed by the same type of parentheses. 2. Open parentheses must be closed in the correct order. The parentheses considered in this task are `()` (round brackets), `[]` (square brackets), and `{}` (curly brackets). Input Format The input is a single string s containing only the characters `(`, `)`, `{`, `}`, `[` and `]`. Constraints 1 leq |s| leq 10^4 Output Format Output \\"Yes\\" if the string is valid, and \\"No\\" otherwise. Sample Input \\"[{()}]\\" Sample Output \\"Yes\\" Explanation The input string \\"[{()}]\\" is valid because each type of parenthesis is closed in the correct order: - The `(` matches with `)`. - The `{` matches with `}`. - The `[` matches with `]`. Conversely, \\"[(])\\" is not valid because the `(` is closed by `]`, which is incorrect. The same goes for strings like \\"())\\" or \\"[(}\\".","solution":"def is_valid_parentheses(s): Returns \'Yes\' if the string of parentheses is valid according to the specified rules, otherwise returns \'No\'. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return \\"No\\" else: return \\"No\\" return \\"Yes\\" if not stack else \\"No\\""},{"question":"You are given an array of integers. Your task is to compute and print the maximum sum of elements from a contiguous subarray with at least one element. If the array contains only negative numbers, the result should be the maximum single element. INPUT First line contains an integer T, representing the number of test cases. For each test case, the first line contains an integer n, representing the number of elements in the array. The next line contains n space-separated integers, representing the elements of the array. OUTPUT For each test case, print the maximum sum of a contiguous subarray. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 -10^4 ≤ elements of array ≤ 10^4 SAMPLE INPUT 2 4 1 -2 3 4 3 -3 -2 -1 SAMPLE OUTPUT 7 -1","solution":"def max_subarray_sum(T, test_cases): Returns the maximum sum of elements from a contiguous subarray for each test case. If the array contains only negative numbers, the result is the maximum single element. Args: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer n (number of elements in array) followed by the list of integers (elements of the array). Returns: list: List containing the maximum sum of contiguous subarray for each test case. results = [] for n, arr in test_cases: current_max = arr[0] max_so_far = arr[0] for i in range(1, n): current_max = max(arr[i], current_max + arr[i]) max_so_far = max(max_so_far, current_max) results.append(max_so_far) return results # Example usage # T = 2 # test_cases = [(4, [1, -2, 3, 4]), (3, [-3, -2, -1])] # print(max_subarray_sum(T, test_cases)) # Output: [7, -1]"},{"question":"Given a string containing only characters \'0\' and \'1\', you need to find the length of the longest contiguous subarray that contains an equal number of \'0\'s and \'1\'s. Example 1: Input: S = \\"1100011\\" Output: 6 Explanation: The longest subarray with an equal number of \'0\'s and \'1\'s is \\"110001\\" or \\"100011\\" both of length 6. Example 2: Input: S = \\"111000\\" Output: 6 Explanation: The entire array is the longest subarray with an equal number of \'0\'s and \'1\'s. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxEqualZeroesOnes() which takes the string S as input and returns the length of the longest contiguous subarray with equal number of \'0\'s and \'1\'s. Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(|S|). Constraints: 1 <= |S| <= 10^5","solution":"def maxEqualZeroesOnes(S): Returns the length of the longest contiguous subarray with equal number of \'0\'s and \'1\'s. max_len = 0 hashmap = {} count = 0 for i in range(len(S)): if S[i] == \'0\': count -= 1 else: count += 1 if count == 0: max_len = i + 1 if count in hashmap: max_len = max(max_len, i - hashmap[count]) else: hashmap[count] = i return max_len"},{"question":"A queue of people is standing in a line to buy tickets to a popular movie. The ticket seller has a special rule: if a person has waited longer than the person in front of them, they must move to the back of the queue until it\'s their turn to buy a ticket or until they have the same amount of patience. Each person in the queue is described by two numbers: the time they have already waited and their patience limit. You need to determine the final order of people in the queue before they start buying tickets. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5), representing the number of people in the queue. The next n lines each contain two integers: w and p (0 ≤ w, p ≤ 10^9), where w is the time the person has already waited in minutes, and p is their patience limit in minutes. -----Output----- Print n lines, each containing the index of the person in the queue (1-based) in their final order. -----Examples----- Input 5 2 3 0 4 1 2 3 5 2 1 Output 2 3 5 1 4 Input 3 0 1 1 1 2 2 Output 1 2 3 -----Note----- In the first example, the queue will be processed as follows: - Person 1 has a waiting time of 2, which does not exceed their patience limit of 3. - Person 2 has a waiting time of 0, which does not exceed their patience limit of 4. - Person 3 has a waiting time of 1, which does not exceed their patience limit of 2. - Person 4 has a waiting time of 3, which does not exceed their patience limit of 5. - Person 5 has a waiting time of 2, which exceeds their patience limit of 1, so they move to the back. In the second example, since everyone\'s patience limit is greater than or equal to their wait time, the queue remains in the same order.","solution":"def final_order(n, people): from collections import deque queue = deque([(i + 1, people[i][0], people[i][1]) for i in range(n)]) ordered_people = [] while queue: idx, w, p = queue.popleft() if not queue or w <= queue[0][1]: ordered_people.append(idx) else: queue.append((idx, w, p)) return ordered_people"},{"question":"You are given a `height` parameter which defines the height of a number pyramid. Each level of the pyramid contains numbers starting from 1 up to that level, repeated level times. The task is to compute the sum of all numbers in the pyramid for a given height. Additionally, compute the product of all numbers in the last level of the pyramid. Write a function that returns both these values. Here\'s an example for a pyramid of height `4`: ``` 1 2 2 3 3 3 4 4 4 4 ``` The sum of all numbers in this pyramid is `30`, and the product of the numbers in the last level (4, 4, 4, 4) is `256`. Create a function that returns the sum of all numbers and the product of the last level\'s numbers. ```python pyramid_info(height) ----> (total_sum, last_level_product) ``` For example: ```python pyramid_info(4) ----> (30, 256) ``` Features of the random tests: ``` number of tests = 100 1 < height < 1000 ```","solution":"def pyramid_info(height): Given the height of a number pyramid, returns the sum of all numbers in the pyramid and the product of the numbers in the last level of the pyramid. Args: height (int): The height of the number pyramid. Returns: tuple: A tuple containing the total sum of all numbers and the product of numbers in the last level. total_sum = 0 last_level_product = 1 for level in range(1, height + 1): total_sum += level * level if level == height: last_level_product = level ** level return total_sum, last_level_product"},{"question":"You are given a list of integers. Each integer represents the cost of an item. You have a budget B and you want to buy as many items as possible without exceeding the budget. You can purchase an item multiple times and there are no limits to the quantity of each item you can buy. Write a program to find the maximum number of items you can buy with the given budget. -----Constraints----- - 1 leq N leq 1000 - 1 leq cost[i] leq 10^4 - 1 leq B leq 10^9 -----Inputs----- Input is given from Standard Input in the following format: N B cost_1 cost_2 ... cost_N -----Outputs----- Print the maximum number of items you can buy with the given budget. -----Sample Input----- 3 50 20 10 5 -----Sample Output----- 10 Explanation: With a budget of 50 and item costs of 20, 10, and 5: - You can buy 0 items of cost 20, 5 items of cost 10, and 0 items of cost 5 -> total 5 items - You can buy 0 items of cost 20, 4 items of cost 10, and 2 items of cost 5 -> total 6 items - You can buy 1 items of cost 20, 3 items of cost 10, and 0 items of cost 5 -> total 4 items - You can buy 1 items of cost 20, 2 items of cost 10, and 2 items of cost 5 -> total 5 items - You can buy 2 items of cost 20, 1 items of cost 10, and 0 items of cost 5 -> total 3 items - You can buy 2 items of cost 20, 0 items of cost 10, and 2 items of cost 5 -> total 4 items - You can buy 0 items of cost 20, 0 items of cost 10, and 10 items of cost 5 -> total 10 items Thus, the maximum number of items you can buy is 10.","solution":"def max_items(N, B, costs): Returns the maximum number of items that can be bought within the budget B. :param N: Number of different item costs :param B: Budget :param costs: List of item costs :return: Maximum number of items that can be bought costs.sort() total_items = 0 for cost in costs: if B >= cost: items = B // cost total_items += items B -= items * cost if B == 0: break return total_items"},{"question":"Given a list of integer numbers, return the list where the first half elements are sorted in ascending order and the second half elements are sorted in descending order. If the length of the list is odd, the median element should be included in the first half. ------ Input Format ------ - The first and only line of input contains a space-separated list of integers. ------ Output Format ------ - The output should contain a space-separated list of integers, with the first half sorted in ascending order and the second half sorted in descending order. Example 1: ------ Input ------ 5 3 8 6 2 9 ------ Output ------ 2 3 5 9 8 6 Example 2: ------ Input ------ 7 1 5 3 9 ------ Output ------ 1 3 5 9 7 Example 3: ------ Input ------ 4 2 7 1 6 5 3 ------ Output ------ 1 2 3 4 7 6 5 Explanation: - In the first example, the first half elements [5, 3, 8] are sorted in ascending order to get [2, 3, 5] and the second half elements [6, 2, 9] are sorted in descending order to get [9, 8, 6]. - In the second example, the first half elements [7, 1, 5] are sorted in ascending order to get [1, 3, 5] and the second half elements [3, 9] are sorted in descending order to get [9, 7]. - In the third example, the first half elements [4, 2, 7, 1] are sorted in ascending order to get [1, 2, 3, 4] and the second half elements [6, 5, 3] are sorted in descending order to get [7, 6, 5].","solution":"def half_sorted_list(nums): Given a list of integers, returns a list where the first half is sorted in ascending order and the second half is sorted in descending order. If the list length is odd, the median element is included in the first half. n = len(nums) mid = (n + 1) // 2 first_half = sorted(nums[:mid]) second_half = sorted(nums[mid:], reverse=True) return first_half + second_half"},{"question":"Lee has a task of organizing a list of book titles by their length. He wants to determine which book title in the list is the shortest. Write a program that helps Lee find the shortest book title. ------ Input Format ------ - The first line will contain an integer N - the number of book titles. - The next N lines will contain one book title each. ------ Output Format ------ Output the shortest book title in the list. If there are multiple titles with the same shortest length, output the one that appeared first in the input. ------ Constraints ------ - 1 ≤ N ≤ 100 - Each book title consists of 1 to 100 characters including spaces, lowercase, and uppercase letters. ----- Sample Input 1 ------ 5 The Great Gatsby A Tale of Two Cities Ulysses Don Quixote It ----- Sample Output 1 ------ It ----- Sample Input 2 ------ 3 War and Peace 1984 Sun ----- Sample Output 2 ------ Sun","solution":"def find_shortest_title(titles): Finds the shortest book title from a list of book titles. Parameters: titles (list): A list of book titles Returns: str: The shortest book title if not titles: return \\"\\" shortest_title = titles[0] shortest_length = len(shortest_title) for title in titles[1:]: if len(title) < shortest_length: shortest_title = title shortest_length = len(title) return shortest_title # Function to read input and call the core logic def process_book_titles(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N = int(data[0]) titles = data[1:N+1] shortest_title = find_shortest_title(titles) print(shortest_title)"},{"question":"Given the head of a singly linked list, return the list after sorting it in ascending order. Example 1: Input: head = [4,2,1,3] Output: [1,2,3,4] Example 2: Input: head = [-1,5,3,4,0] Output: [ -1,0,3,4,5] Example 3: Input: head = [] Output: [] Constraints: The number of nodes in the list is in the range [0, 5000]. -10^5 <= Node.val <= 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def sortList(head): Sorts a linked list in ascending order. :param head: ListNode, the head of the linked list :return: ListNode, the head of the sorted linked list if not head or not head.next: return head mid = get_middle(head) left = head right = mid.next mid.next = None left = sortList(left) right = sortList(right) return merge(left, right) def get_middle(head): slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next return slow def merge(l1, l2): dummy = ListNode() curr = dummy while l1 and l2: if l1.val < l2.val: curr.next = l1 l1 = l1.next else: curr.next = l2 l2 = l2.next curr = curr.next if l1: curr.next = l1 elif l2: curr.next = l2 return dummy.next"},{"question":"You are a software developer at a logistics company that needs to optimize the loading of cargo containers. You have been given a task to determine if a given set of cylindrical barrels can fit inside a rectangular container without exceeding its height. Your job is to write a program that checks whether the sum of the heights of the barrels is less than or equal to the height of the container, indicating that they can be loaded vertically in one stack. Input: The first line of the input will be T, the number of test cases. Next follows T lines, each containing integers H (height of the container) and N (number of barrels). The next line contains N space-separated integers, each representing the height of a barrel. Output: Print \\"YES\\" if the barrels can be loaded into the container without exceeding its height in one vertical stack. Otherwise, print \\"NO.\\" Constraints: 1 ≤ T ≤ 1000 1 ≤ H ≤ 10^18 1 ≤ N ≤ 10^5 1 ≤ height of each barrel ≤ 10^18 SAMPLE INPUT 3 10 3 2 3 2 20 2 15 10 5 2 3 3 SAMPLE OUTPUT YES NO NO","solution":"def can_fit_in_container(H, barrels): Determines if the barrels can fit inside the container without exceeding its height. Parameters: H (int): The height of the container. barrels (list of int): List of heights of the barrels. Returns: str: \\"YES\\" if barrels can be loaded, otherwise \\"NO\\". return \\"YES\\" if sum(barrels) <= H else \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases of container and barrels. Parameters: test_cases (list of tuples): Each tuple contains the height of the container, the number of barrels, and the list of barrel heights. Returns: list of str: List of results for each test case. results = [] for H, N, barrels in test_cases: results.append(can_fit_in_container(H, barrels)) return results"},{"question":"# Task You are given a list of integers. Your task is to find two distinct elements in the list such that their product is maximal among all the distinct pairs in the list and return the product. # Input/Output `[input]` list of integers `numbers` A list of integers. `2 ≤ len(numbers) ≤ 1000`. `-10^6 ≤ numbers[i] ≤ 10^6`. `[output]` integer The maximum product of two distinct elements in the list. # Example For `numbers = [1, 10, 2, 6, 5, 3]`, the output should be `60`. The maximum product is achieved with the pair (10, 6). For `numbers = [-10, -10, 1, 3, 2]`, the output should be `100`. The maximum product is achieved with the pair (-10, -10).","solution":"def max_product(numbers): Returns the maximum product of two distinct elements in the list. numbers = sorted(numbers) return max(numbers[0] * numbers[1], numbers[-1] * numbers[-2])"},{"question":"**Task** You are given a string `s` consisting of only lowercase alphabets. Your task is to determine if we can remove exactly one character from string `s` to make it a palindrome. Your function should return `True` if it\'s possible, otherwise `False`. A string is called a palindrome if it reads the same backward as forward. **Example** For `s = \\"abca\\"`, your function should return `True` since we can remove character \'b\' to make the string \\"aca\\", which is a palindrome. For `s = \\"abc\\"`, your function should return `False` since there is no single character we can remove to make it a palindrome. **Function Signature:** ```python def can_remove_one_to_palindrome(s: str) -> bool: # To be implemented ```","solution":"def can_remove_one_to_palindrome(s: str) -> bool: def is_palindrome(subs: str) -> bool: return subs == subs[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try removing the character at left or right return is_palindrome(s[left + 1:right + 1]) or is_palindrome(s[left:right]) left += 1 right -= 1 return False"},{"question":"A gardener has planted a number of trees in his garden. Each tree is either a tall tree of height 5 units or a short tree of height 3 units. The gardener says, \\"I have planted a total of Z trees, and the combined height of all these trees is W units.\\" Your task is to determine whether there exists a combination of tall and short trees such that the gardener\'s statement holds true. -----Constraints----- - 1 leq Z leq 100 - 1 leq W leq 500 - All values in the input are integers. -----Input----- Input is given from Standard Input in the following format: Z W -----Output----- If there exists a combination of tall and short trees that satisfies the gardener\'s statement, print Yes; otherwise, print No. -----Sample Input----- 4 16 -----Sample Output----- Yes Explanation: The statement \\"there are 4 trees in total, and they have a combined height of 16 units\\" holds true if there are 3 tall trees and 1 short tree. Therefore, there exists a combination of tall and short trees in which the statement is correct.","solution":"def can_combine_trees(Z, W): Determines whether there exists a combination of tall (height 5) and short (height 3) trees such that the gardener\'s statement holds true. Parameters: Z (int): Total number of trees. W (int): Combined height of all trees. Returns: str: \\"Yes\\" if there exists a valid combination, otherwise \\"No\\". for tall_trees in range(Z + 1): short_trees = Z - tall_trees if (tall_trees * 5 + short_trees * 3) == W: return \\"Yes\\" return \\"No\\""},{"question":"You are an engineer working on a spaceship navigation system responsible for guiding the spaceship to automatically avoid obstacles in space. The spaceship is initially positioned on a 2D plane at coordinate (0,0) and faces upward along the positive y-axis direction. The spaceship can be given a string of movement commands where: - \'G\' means go forward one unit in the current direction. - \'L\' means turn 90 degrees to the left. - \'R\' means turn 90 degrees to the right. Write an algorithm to determine if the spaceship returns to its original starting position (0,0) after executing all the commands given in the input string. Assume that the spaceship\'s movements are constrained within the 2D plane. Input A string of movement commands `cmd` where each command is one of {\'G\', \'L\', \'R\'}. The length of the string is at least 1 and does not exceed 1000. Output Output a line with \\"Yes\\" (without quotes) if the spaceship returns to its starting position, and \\"No\\" otherwise. Example Input GLGLGLG Output Yes Input GGRRG Output No Explanation In the first example, following the commands \'GLGLGLG\', the spaceship makes a square movement and returns to the start (0, 0). In the second example, following the commands \'GGRRG\', the spaceship moves away and does not return to the start (0, 0).","solution":"def is_back_to_origin(cmd): Determines if the spaceship returns to its original position after executing the command string. Parameters: cmd (str): A string of movement commands where each command is \'G\', \'L\', or \'R\'. Returns: str: \\"Yes\\" if the spaceship returns to (0,0), \\"No\\" otherwise. x, y = 0, 0 # Initial Position direction = 0 # 0: North, 1: East, 2: South, 3: West directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Corresponding movements for N, E, S, W for move in cmd: if move == \'G\': x += directions[direction][0] y += directions[direction][1] elif move == \'L\': direction = (direction - 1) % 4 elif move == \'R\': direction = (direction + 1) % 4 return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"You are a detective who loves to solve mysteries using logic and numbers. Recently, you have encountered a peculiar challenge. You have a sequence of n integers, and you need to detect if they form an arithmetic progression or not. An arithmetic progression is a sequence of numbers such that the difference of any two successive members is a constant. For example, [2, 4, 6, 8, 10] is an arithmetic progression with a common difference of 2, but [1, 3, 7, 9] is not. Your task is to write a program that determines if the given sequence is an arithmetic progression. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output On a single line, print \\"YES\\" if the sequence is an arithmetic progression, otherwise print \\"NO\\". Examples Input 5 3 6 9 12 15 Output YES Input 4 1 2 4 8 Output NO Note In the first sample, the sequence is an arithmetic progression with a common difference of 3. In the second sample, the sequence is not an arithmetic progression as the differences between consecutive elements are not consistent.","solution":"def is_arithmetic_progression(n, sequence): Determines if the given sequence of n integers forms an arithmetic progression. Args: n: int - The number of elements in the sequence. sequence: list of int - The elements of the sequence. Returns: str: \\"YES\\" if the sequence is an arithmetic progression, otherwise \\"NO\\". if n < 2: return \\"NO\\" # Calculate the common difference common_difference = sequence[1] - sequence[0] # Check if the difference between consecutive elements is consistent for i in range(2, n): if sequence[i] - sequence[i - 1] != common_difference: return \\"NO\\" return \\"YES\\""},{"question":"problem JOI Media has a streaming service that offers n channels. Each channel has a unique schedule of shows. The platform requires an application that can determine which show is being aired at a specific time on a particular channel, given the channel\'s schedule. Each show schedule is represented by a list of tuples, where each tuple contains a start time and an end time of a show. The time is formatted as \\"HH:MM\\", where \\"HH\\" represents hours in 24-hour format and \\"MM\\" represents minutes. The end time is always greater than the start time of a show. If a query time falls within the range of a show\'s start and end times (inclusive), the show is considered as airing at that time. Write a program to find out what shows are being aired at the given query times for multiple channels. Input The input consists of multiple datasets. Each dataset is given in the following format: - The first line contains a positive integer n (1 ≤ n ≤ 100) representing the number of channels. - For each channel, the first line contains a positive integer m (1 ≤ m ≤ 100) representing the number of shows. - The next m lines contain the start and end times of shows on that channel in \\"HH:MM HH:MM\\" format. - The next line contains a positive integer q (1 ≤ q ≤ 100) representing the number of queries. - The next q lines contain a query time in the \\"HH:MM\\" format. Output For each query time in each dataset, print one line containing the show’s index (1-based) being aired at that time in the queried channel. If no show is airing at that time, print \\"None\\". Example Input 2 3 08:00 10:00 10:30 12:00 13:00 14:30 2 09:00 13:30 2 07:00 08:30 09:00 10:30 1 09:00 0 Output 1 3 2 None","solution":"from datetime import datetime def find_show_index(queries, schedule): Determines the index of the show airing at each query time for a single channel. :param queries: List of query times in \\"HH:MM\\" format. :param schedule: List of tuples with start and end times of shows in \\"HH:MM HH:MM\\" format. :return: List of integers corresponding to the index (1-based) of the show airing at each query time or \\"None\\". def time_in_show_range(query_time, show_start, show_end): Helper function to determine if a query time is within a show\'s start and end time. query = datetime.strptime(query_time, \\"%H:%M\\") start = datetime.strptime(show_start, \\"%H:%M\\") end = datetime.strptime(show_end, \\"%H:%M\\") return start <= query <= end results = [] for q in queries: found = False for index, (start, end) in enumerate(schedule): if time_in_show_range(q, start, end): results.append(index + 1) # 1-based index found = True break if not found: results.append(\\"None\\") return results"},{"question":"Given a string composed of digits and one wildcard character \'*\', write a function to find all unique strings that can be generated by replacing the \'*\' with a digit (0-9). The strings should be in lexicographical order. # Function Signature: ```python def generate_strings(s: str) -> List[str]: pass ``` # Input - a string `s` containing digits and exactly one wildcard character \'*\', 1 <= len(s) <= 100 # Output - a list of strings with the \'*\' replaced by digits from 0 to 9 in lexicographical order. # Example ```python generate_strings(\\"1*3\\") -> [\\"103\\", \\"113\\", \\"123\\", \\"133\\", \\"143\\", \\"153\\", \\"163\\", \\"173\\", \\"183\\", \\"193\\"] generate_strings(\\"*567\\") -> [\\"0567\\", \\"1567\\", \\"2567\\", \\"3567\\", \\"4567\\", \\"5567\\", \\"6567\\", \\"7567\\", \\"8567\\", \\"9567\\"] generate_strings(\\"789*\\") -> [\\"7890\\", \\"7891\\", \\"7892\\", \\"7893\\", \\"7894\\", \\"7895\\", \\"7896\\", \\"7897\\", \\"7898\\", \\"7899\\"] ``` # Notes - The input string will always contain exactly one wildcard character \'*\'. - The output should be a list of strings sorted in lexicographical order.","solution":"from typing import List def generate_strings(s: str) -> List[str]: Replace the wildcard character \'*\' in string \'s\' with digits from 0 to 9 and return all possible strings in lexicographical order. if \'*\' not in s or s.count(\'*\') != 1: raise ValueError(\\"Input string must contain exactly one \'*\' wildcard character.\\") results = [] for digit in range(10): results.append(s.replace(\'*\', str(digit))) return results"},{"question":"In a technology park, there are several companies each having multiple employees. Each company can be represented by a unique ID, and each employee has a unique ID within their respective company. The technology park management plans to form teams comprising employees from different companies. To achieve this, they have a list of proposed teams and their corresponding employees. For an efficient team formation, a certain number of transfers may be required where an employee moves from one company to another. You are given a list of existing employees for each company and a list of proposed teams. Your task is to determine the minimum number of employee transfers required to form the proposed teams such that all employees in a team come from the same company. INPUT The first line of input contains a single integer T, which is the number of test cases. For each test case: - The first line contains two integers C (number of companies) and P (number of proposed teams). - The next C lines each contain a list of employee IDs for each company. - The next P lines each contain a list of employee IDs representing the proposed teams. OUTPUT For each test case, output a single integer which gives the minimum number of employee transfers required to satisfy all proposed teams. LIMITS - Each employee ID follows the pattern: company_id_employee_number (for example, 1_23 where 1 is the company ID and 23 is the employee number). - The number of companies, teams, and employees can vary but the total number of employees will not exceed 10,000. SAMPLE INPUT 2 2 2 1_1 1_2 2_1 2_2 1_1 2_1 1_2 2_2 3 1 1_1 1_2 2_1 3_1 3_2 1_1 2_1 3_1 SAMPLE OUTPUT 2 2","solution":"def min_employee_transfers(test_cases): results = [] for companies, teams in test_cases: company_map = {} team_list = [] # Create a mapping from employee ID to their current company for company_id, employees in enumerate(companies, 1): for employee in employees: company_map[employee] = company_id # Parse the proposed teams for team in teams: team_list.append(set(team)) # Calculate transfers transfers = 0 for team in team_list: company_count = {} for employee in team: company_id = company_map[employee] if company_id in company_count: company_count[company_id] += 1 else: company_count[company_id] = 1 max_common = max(company_count.values()) transfers += (len(team) - max_common) results.append(transfers) return results"},{"question":"In a kingdom far away, there are N cities connected by M bi-directional roads. Each road has a specific distance associated with it. The kingdom wants to build a network such that every city is reachable from any other city, but they don\'t want to spend more distance than required. Therefore, they need to select a set of roads such that the sum of the distances is minimized, and all cities are still connected. You are asked to help the kingdom\'s planner determine this minimal distance. Specifically, you need to find the weight of the Minimum Spanning Tree (MST) of the given graph. ------ Input Format ------ - The first line contains two integers, N (number of cities) and M (number of roads). - Each of the next M lines contains three integers u, v, and w, denoting a road between cities u and v with distance w. ------ Output Format ------ Print the weight of the MST. ------ Constraints ------ 1 ≤ N ≤ 10^{5} N-1 ≤ M ≤ 2×10^{5} 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^{6} ----- Sample Input 1 ----- 4 5 1 2 3 1 3 1 3 2 3 2 4 6 3 4 5 ----- Sample Output 1 ----- 9 ----- Explanation 1 ----- The minimal spanning tree of the given graph includes the roads with distances 1 (between 1 and 3), 3 (between 1 and 2), and 5 (between 3 and 4). Therefore, the sum of the minimum distances to connect all cities is 1 + 3 + 5 = 9.","solution":"def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): root_x = find_parent(parent, x) root_y = find_parent(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): result = [] # This will store the resultant MST i, e = 0, 0 # Variables to traverse sorted edges # Creating sorted edge list edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(n): parent.append(node) rank.append(0) while e < n - 1: # Pick the smallest edge and increment the index for the next iteration u, v, w = edges[i] i += 1 x = find_parent(parent, u - 1) y = find_parent(parent, v - 1) # If including this edge doesn\'t cause a cycle if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) total_weight = 0 for u, v, weight in result: total_weight += weight return total_weight def minimal_spanning_tree(n, m, roads): edges = [] for road in roads: u, v, w = road edges.append((u, v, w)) return kruskal_mst(n, edges) # Test the solution with the sample input if __name__ == \\"__main__\\": N, M = 4, 5 roads = [ (1, 2, 3), (1, 3, 1), (3, 2, 3), (2, 4, 6), (3, 4, 5) ] print(minimal_spanning_tree(N, M, roads)) # Output: 9"},{"question":"A treasure map provides coordinates of treasures buried in a 2000 times 2000 grid. Each treasure emits a magnetic field detectable within a certain radius. Charlotte must collect exactly three treasures while ensuring that she never passes through an area under the influence of more than one magnetic field at a time. Assume that the southwest corner of the grid is at (0,0) and the northeast corner is at (2000,2000). Charlotte begins her journey outside the grid and ends it after collecting the third treasure. -----Input----- The input starts with a line containing 1 le n le 500, the number of treasures. Next, each of the n lines contains three integers: the (x, y) location of the treasure (0 le x, y le 2000) and the magnetic field\'s radius 1 le r le 100. It is guaranteed that the radii of magnetic fields do not intersect with each other. -----Output----- If Charlotte can collect exactly three treasures, output the coordinates of these treasures in the order she should collect them. If there are multiple valid sets, output the lexicographically smallest set. If it is impossible for Charlotte to collect exactly three treasures without entering overlapping magnetic fields, print \\"Charlotte cannot collect three treasures.\\" -----Examples----- Sample Input 1: 5 100 100 50 800 800 40 1500 1500 60 300 300 30 1200 1200 50 Sample Output 1: (100, 100) (300, 300) (800, 800) Sample Input 2: 4 500 500 70 1500 500 70 500 1500 70 1500 1500 70 Sample Output 2: Charlotte cannot collect three treasures.","solution":"def can_collect_three_treasures(n, treasures): import itertools treasures.sort() def are_fields_separate(t1, t2): x1, y1, r1 = t1 x2, y2, r2 = t2 dx = x1 - x2 dy = y1 - y2 distance_squared = dx * dx + dy * dy radius_sum_squared = (r1 + r2) * (r1 + r2) return distance_squared >= radius_sum_squared for comb in itertools.combinations(treasures, 3): if (are_fields_separate(comb[0], comb[1]) and are_fields_separate(comb[1], comb[2]) and are_fields_separate(comb[0], comb[2])): return [tuple(comb[0][:2]), tuple(comb[1][:2]), tuple(comb[2][:2])] return \\"Charlotte cannot collect three treasures.\\" def read_input_and_solve(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) treasures = [] for i in range(1, len(data), 3): x = int(data[i]) y = int(data[i+1]) r = int(data[i+2]) treasures.append((x, y, r)) result = can_collect_three_treasures(n, treasures) if isinstance(result, str): print(result) else: for coord in result: print(f\'{coord}\') # Assuming read_input_and_solve will be called and supplied via standard input for testing purposes."},{"question":"Write a function ```update_inventory(current_inventory, shipment_inventory)``` that takes two dictionaries as input: `current_inventory` and `shipment_inventory`. The `current_inventory` dictionary represents the existing stock of items in a warehouse, where the keys are strings representing item names, and the values are integers representing the quantities of these items. The `shipment_inventory` dictionary represents a new shipment of items received, with a similar structure where keys are item names and values are quantities of these items contained in the shipment. The function should update the `current_inventory` by adding the quantities from `shipment_inventory` to the respective items. If an item in the `shipment_inventory` does not exist in the `current_inventory`, it should be added. The function should return the updated `current_inventory` dictionary. Example: ```python current_inventory = { \\"apple\\": 10, \\"banana\\": 5, \\"orange\\": 7 } shipment_inventory = { \\"banana\\": 3, \\"orange\\": 12, \\"grape\\": 10 } update_inventory(current_inventory, shipment_inventory) ``` Output: ```python { \\"apple\\": 10, \\"banana\\": 8, \\"orange\\": 19, \\"grape\\": 10 } ```","solution":"def update_inventory(current_inventory, shipment_inventory): Updates the current_inventory dictionary by adding the quantities from the shipment_inventory. If an item from the shipment_inventory does not exist in the current_inventory, it is added. Args: - current_inventory (dict): A dictionary representing existing stock in the warehouse. - shipment_inventory (dict): A dictionary representing new items received in the shipment. Returns: - dict: Updated inventory with quantities adjusted based on the shipment. for item, qty in shipment_inventory.items(): if item in current_inventory: current_inventory[item] += qty else: current_inventory[item] = qty return current_inventory"},{"question":"A city has several public parking lots, each with a different number of available parking spaces. A driver arrives at the city every minute and tries to park their car in one of the lots. However, the driver will only park in a lot if it has at least as many free spaces as the driver\'s car requires. If a driver finds a parking spot, they will occupy the spaces for a fixed duration before leaving. You are required to track and determine the number of drivers who fail to find a suitable parking lot immediately upon arrival. You are given an array of parking lot capacities and an array of arriving drivers with their parking space requirements and duration. # Input - First line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of parking lots. - The second line contains N space-separated integers Pi, the capacities of the parking lots. - The third line contains an integer M, the number of arriving drivers. - The fourth line contains M space-separated integers Ri, the space requirements for each driver. - The fifth line contains M space-separated integers Di, the duration for which each driver will occupy the parking lot. # Output Print the number of drivers who fail to park immediately for each test case. # Constraints - 1 ≤ T ≤ 5 - 1 ≤ N, M ≤ 1000 - 1 ≤ Pi ≤ 100 - 1 ≤ Ri ≤ 100 - 1 ≤ Di ≤ 100 # Sample Input 1 3 10 5 8 5 3 6 2 5 4 2 3 1 4 2 # Sample Output 1 # Explanation In the sample input: - There are 3 parking lots with capacities 10, 5, and 8. - 5 drivers arrive with space requirements 3, 6, 2, 5, and 4, and they occupy the spots for durations 2, 3, 1, 4, and 2 respectively. The first driver parks in lot 1, the second driver parks in lot 3, the third driver parks in lot 2, the fourth driver fails to find a spot with at least 5 spaces free, and the fifth driver parks in lot 1. Therefore, only one driver (the fourth one) fails to park immediately.","solution":"def count_failed_parkings(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] P = test_cases[i][\'capacities\'] M = test_cases[i][\'M\'] R = test_cases[i][\'requirements\'] D = test_cases[i][\'durations\'] parking_lots = [{\'capacity\': p, \'free\': p} for p in P] failed_drivers = 0 for j in range(M): requirement = R[j] parked = False for lot in parking_lots: if lot[\'free\'] >= requirement: lot[\'free\'] -= requirement parked = True break if not parked: failed_drivers += 1 results.append(failed_drivers) return results"},{"question":"You are organizing a marathon event and need to prepare an evenly spaced set of water stations along the race route. Given the total distance of the race and the desired number of water stations, write a program that calculates the positions where each water station should be placed, ensuring they are as evenly spaced as possible. Note: The race starts at position 0 and ends at the given total distance. Input The input is given in the following format: d n A line containing the total distance of the race d (1 ≤ d ≤ 10000) and the number of water stations n (1 ≤ n ≤ 1000). Output Output a line with the positions of the water stations, separated by a single space. If the number of water stations is greater than or equal to the distance, place a water station at every integer position starting from 1 up to the minimum of the distance and the number of stations. Examples Input 10 4 Output 2 4 6 8 Input 15 3 Output 5 10 15 Input 5 10 Output 1 2 3 4 5 6 7 8 9 10","solution":"def water_stations(d, n): Given the total distance of the race d and the number of desired water stations n, this function calculates and returns the positions of the water stations as a list. if n >= d: return list(range(1, min(d, n) + 1)) interval = d // n positions = [interval * i for i in range(1, n + 1)] return positions"},{"question":"The journalists were investigating the spread of a rumor in a small town. The town is represented as a grid of size MxN where M is the number of rows and N is the number of columns. Each cell (i, j) in the grid can either be a junction point where people gather or an impassable area. The rumor starts spreading from a specific junction point and propagates to the neighboring junction points in each step (up, down, left, right, but not diagonally). You need to determine the minimum number of steps required for the rumor to reach a given target junction point from the starting junction point. If it is impossible for the rumor to reach the target, return -1. Input The first line contains two integers M and N which represent the number of rows and columns in the grid respectively (1 ≤ M, N ≤ 1000). The next M lines contain N characters each, representing the grid. Each character is either \'.\' representing a junction point, or \'#\' representing an impassable area. The last part of the input consists of two pairs of integers, (Sx, Sy) and (Tx, Ty), which indicate the coordinates of the starting junction point and the target junction point respectively (0 ≤ Sx, Sy, Tx, Ty < M, N). Output Print the minimum number of steps required for the rumor to reach the target junction point from the starting junction point. If it is not possible, print -1. Examples Input 5 5 ..... ..#.. . ..... ..... 0 0 4 4 Output 8 Input 4 4 .. .#.. ..#. 0 0 3 2 Output -1","solution":"from collections import deque def min_steps_to_spread_rumor(M, N, grid, start, target): def is_valid(x, y): return 0 <= x < M and 0 <= y < N and grid[x][y] == \'.\' Sx, Sy = start Tx, Ty = target if not is_valid(Sx, Sy) or not is_valid(Tx, Ty): return -1 queue = deque([(Sx, Sy, 0)]) # (x, y, steps) visited = set((Sx, Sy)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, steps = queue.popleft() if (x, y) == (Tx, Ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # Example usage: M = 5 N = 5 grid = [ \\".....\\", \\"..#..\\", \\".\\", \\".....\\", \\".....\\" ] start = (0, 0) target = (4, 4) print(min_steps_to_spread_rumor(M, N, grid, start, target)) # Output: 8 M2 = 4 N2 = 4 grid2 = [ \\"..\\", \\".#..\\", \\"\\", \\"..#.\\" ] start2 = (0, 0) target2 = (3, 2) print(min_steps_to_spread_rumor(M2, N2, grid2, start2, target2)) # Output: -1"},{"question":"There are M employees in a company, numbered from 1 to M. Each employee has a unique productivity rating given by an integer array \\"ratings\\", where ratings[i] is the productivity rating of the i-th employee. Your task is to distribute \\"rewards\\" to the employees following these rules: 1. Each employee must receive at least one reward. 2. Employees with higher productivity ratings must receive more rewards than their adjacent employees. Find the minimum number of rewards needed to distribute to the employees according to the given rules. -----Constraints----- - 1 ≤ M ≤ 10^5 - 1 ≤ ratings[i] ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: M ratings_1 ratings_2 ... ratings_M -----Output----- Print the minimum number of rewards needed. -----Sample Input----- 5 1 2 2 3 1 -----Sample Output----- 7 Explanation: - The first employee has lower rating than the second, so he gets 1 reward. - The second employee has higher rating than the first, so he gets more than the first, let\'s say 2 rewards. - The third employee has the same rating as the second, so they both get 2 rewards. - The fourth employee has higher rating than the third, so he gets more, let\'s say 3 rewards. - The fifth employee has lower rating than the fourth but there is no one after him to compare to, and must get at least one reward. Thus, the distribution would be [1, 2, 2, 3, 1], resulting in a total of 7 rewards.","solution":"def min_rewards(M, ratings): This function computes the minimum number of rewards needed for the employees based on given criteria. Parameters: M (int): number of employees ratings (list): list of integers representing productivity ratings for each employee Returns: int: Minimum number of rewards needed if M == 0: return 0 rewards = [1] * M # Traverse from left to right for i in range(1, M): if ratings[i] > ratings[i - 1]: rewards[i] = rewards[i - 1] + 1 # Traverse from right to left for i in range(M - 2, -1, -1): if ratings[i] > ratings[i + 1]: rewards[i] = max(rewards[i], rewards[i + 1] + 1) return sum(rewards)"},{"question":"You are given a list of daily temperatures recorded for a week. Write a function that calculates the number of days you would have to wait until a warmer temperature for each day. If there is no future day for which this is possible, write 0. Example 1: Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: - On day 1, the temperature is 73, you have to wait 1 day (until day 2) for a warmer temperature of 74. - On day 2, the temperature is 74, you have to wait 1 day (until day 3) for a warmer temperature of 75. - On day 3, the temperature is 75, you have to wait 4 days (until day 7) for a warmer temperature of 76. - On day 4, the temperature is 71, you have to wait 2 days (until day 6) for a warmer temperature of 72. - On day 5, the temperature is 69, you have to wait 1 day (until day 6) for a warmer temperature of 72. - On day 6, the temperature is 72, you have to wait 1 day (until day 7) for a warmer temperature of 76. - On day 7, the temperature is 76, you have to wait 0 days for a warmer temperature. - On day 8, the temperature is 73, you have to wait 0 days for a warmer temperature. Example 2: Input: [30, 40, 50, 60] Output: [1, 1, 1, 0] Explanation: Each day has a warmer temperature the next day. Example 3: Input: [30, 60, 90] Output: [1, 1, 0] Hints: - You can solve this problem using a stack to keep track of indices of temperature values. - Try to process temperatures from the last day to the first day for an optimal solution.","solution":"def daily_temperatures(T): Calculates the number of days you would have to wait until a warmer temperature for each day. answer = [0] * len(T) stack = [] for i in range(len(T) - 1, -1, -1): while stack and T[i] >= T[stack[-1]]: stack.pop() if stack: answer[i] = stack[-1] - i stack.append(i) return answer"},{"question":"Taro has a string consisting of three characters, each of which is either \'a\' or \'b\'. Taro wants to know if there are more \'a\' characters than \'b\' characters in the string. -----Constraints----- - Each character in the string is either \'a\' or \'b\'. - The string length is exactly 3. -----Input----- Input is given from Standard Input in the following format: abc -----Output----- Print \\"Yes\\" if the number of \'a\' characters is greater than the number of \'b\' characters. Otherwise, print \\"No\\". -----Sample Input----- aab -----Sample Output----- Yes - There are 2 \'a\' characters and 1 \'b\' character in the string, which satisfies the condition.","solution":"def more_a_than_b(s): Returns \\"Yes\\" if the number of \'a\' characters is greater than the number of \'b\' characters in the string s, else \\"No\\". count_a = s.count(\'a\') count_b = s.count(\'b\') return \\"Yes\\" if count_a > count_b else \\"No\\""},{"question":"Define a function that simulates a basic drink order system for a coffee shop. The function will take three inputs: the name of the drink (string), the number of shots of espresso (integer), and whether the drink is to-go or not (boolean). The function should return the price of the drink as follows: - The base price of any drink is 5. - Each shot of espresso adds 1.5 to the base price. - If the drink is to-go, add an additional 0.5 for the cup. For example: ``` \\"Cappuccino\\", 2, True --> 5 + 2*1.5 + 0.5 = 8.5 \\"Latte\\", 1, False --> 5 + 1*1.5 + 0 = 6.5 ```","solution":"def calculate_drink_price(drink_name, shots_of_espresso, to_go): Calculate the price of a drink. Parameters: drink_name (str): The name of the drink. shots_of_espresso (int): The number of shots of espresso added to the drink. to_go (bool): Whether the drink is to-go or not. Returns: float: The total price of the drink. base_price = 5 espresso_cost = shots_of_espresso * 1.5 to_go_cost = 0.5 if to_go else 0 total_price = base_price + espresso_cost + to_go_cost return total_price"},{"question":"-----Problem Statement----- Suppose you are a developer designing a system that tracks user activity patterns on a platform. Your task is to implement a feature that identifies the longest consecutive sequence of days during which the user was active on the platform, given a binary array representing the days when the user was active or inactive. You are given T test cases where each test case consists of an integer N (number of days), followed by a binary array A of length N that indicates user activity (1 for active, 0 for inactive) on each day. -----Input:----- - The first line contains T, the number of test cases. - For each test case: - The first line contains an integer N, the number of days. - The second line contains N space-separated integers Ai (0 or 1) representing the user\'s activity. -----Output:----- For each test case, output a single integer denoting the length of the longest sequence of consecutive days the user was active. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - Sum of N over all test cases doesn\'t exceed 5 × 10^5 -----Sample Input:----- 3 7 1 1 0 1 1 1 0 5 0 1 1 0 1 4 0 0 0 0 -----Sample Output:----- 3 2 0 -----Explanation:----- - For test case 1, the longest sequence of consecutive days the user was active is 3 (the subsequence [1,1,1]). - For test case 2, the longest sequence is 2 (the subsequence [1,1]). - For test case 3, there are no active days, so the output is 0.","solution":"def longest_consecutive_active_days(test_cases): results = [] for test in test_cases: N, A = test max_streak = 0 current_streak = 0 for day in A: if day == 1: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 results.append(max_streak) return results # Function for generating input data from user input format to function\'s required format def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) A = list(map(int, lines[index + 1].split())) test_cases.append((N, A)) index += 2 return test_cases"},{"question":"Alisha loves playing board games with her friends. However, she noticed that keeping track of the scores can be quite hectic, especially when there are multiple rounds and various penalties/rewards affecting the scores within each round. To make things easier, she decided to create a program that will help update the scores accurately after each round. In each round, scores can either increase or decrease for each player based on their game performance. If a player wins a round, they receive additional points, while losing rounds incurs penalties leading to score deductions. At the end of the game, the program should output the final scores for each player. Input: The first line contains an integer T indicating the number of test cases. For each test case, the first line contains two integers N and R where N is the number of players and R is the number of rounds. N lines follow, each containing the name of a player. Each name will be distinct and will be a single word composed of lowercase or uppercase letters only. R rounds follow, each formatted as follows: - The first line contains an integer K representing the number of players who gained points in the round. - The next K lines each contain a player\'s name followed by an integer P indicating the points gained. - The next line contains an integer L representing the number of players who lost points in the round. - The next L lines each contain a player\'s name followed by an integer M indicating the points lost. Output: For each test case, print N lines showing the final scores of each player in the given format: \\"<Player_Name> has a score of <Score>\\" Constraints: - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 50 - 1 ≤ R ≤ 50 - 1 ≤ K, L ≤ N - 1 ≤ length of each name ≤ 20 - -1000 ≤ P, M ≤ 1000 SAMPLE INPUT 1 3 2 John Emma Ryan 2 John 50 Emma 30 1 Ryan 20 1 Emma 15 2 John 20 Ryan 50 SAMPLE OUTPUT John has a score of 30 Emma has a score of 15 Ryan has a score of -30 Explanation After the first round, John gains 50 points, Emma gains 30 points, and Ryan loses 20 points. John\'s score: 50 Emma\'s score: 30 Ryan\'s score: -20 After the second round, Emma loses 15 points, John gains 20 points, and Ryan loses 50 points. John\'s score: 50 + 20 = 70 Emma\'s score: 30 - 15 = 15 Ryan\'s score: -20 - 50 = -70 Thus the output is: John has a score of 70 Emma has a score of 15 Ryan has a score of -70","solution":"def update_scores(T, test_cases): results = [] for i in range(T): N, R, players, rounds = test_cases[i] scores = {player: 0 for player in players} for round_ in rounds: gainers, losers = round_ for player, points in gainers.items(): scores[player] += points for player, points in losers.items(): scores[player] -= points for player in players: results.append(f\\"{player} has a score of {scores[player]}\\") return results # Example usage: T = 1 test_cases = [ (3, 2, [\'John\', \'Emma\', \'Ryan\'], [ ({\\"John\\": 50, \\"Emma\\": 30}, {\\"Ryan\\": 20}), ({\\"John\\": 20}, {\\"Emma\\": 15, \\"Ryan\\": 50}) ]) ] print(update_scores(T, test_cases))"},{"question":"Amelia and Ben are playing a modified game on a directed acyclic graph (DAG) with `n` vertices. Amelia starts at vertex `1` and Ben starts at vertex `y` (1 ≤ y ≤ n). The vertices are numbered from 1 to `n` and Amelia and Ben take turns to move, with Amelia going first. In one move, each player can either stay at their current vertex or move to any direct child of their current vertex (as defined by the edges of the graph). The game ends when Amelia and Ben are both at the same vertex. Amelia wants to minimize the number of moves to end the game, while Ben wants to maximize it. Your task is to determine the total number of moves both players will make until the game ends, assuming both play optimally. -----Input----- The first line contains two integer numbers n and y (2 ≤ n ≤ 100, 1 ≤ y ≤ n). Each of the next n - 1 lines contains two integer numbers a and b (1 ≤ a, b ≤ n) — indicating a directed edge from vertex `a` to vertex `b`. It is guaranteed the graph is a valid DAG. -----Output----- Print the total number of moves Amelia and Ben will make. -----Examples----- Input 5 4 1 2 1 3 2 4 3 5 4 5 Output 2 Input 6 6 1 2 1 3 2 4 2 5 4 6 5 6 Output 3 -----Note----- In the first example, the graph looks like this: - 1 | 2 3 | 4 5 Amelia will move optimally from vertex 1 to 2 (1 move), and Ben must move from vertex 4 to 5 to drag the game (1 move). Then Amelia moves to vertex 4 (1 move) to finally meet Ben on vertex 5 (1 move). In the second example, the graph looks like this: - 1 | 2 3 / 4 5 6 Amelia will move optimally from vertex 1 to 2 (1 move), and Ben will stay at vertex 6. Then Amelia moves to vertex 4 (1 move) and finally to vertex 6 (1 move), thus meeting Ben in a total of 3 moves.","solution":"def get_dag_movements(n, y, edges): from collections import deque, defaultdict # Creating adjacency list for the graph graph = defaultdict(list) for a, b in edges: graph[a].append(b) # Function to perform BFS and find shortest path trace def bfs_shortest_path(start): queue = deque([(start, 0)]) visited = set() distance = {i: float(\'inf\') for i in range(1, n+1)} distance[start] = 0 while queue: node, dist = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if distance[neighbor] > dist + 1: distance[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) return distance # Amelia starts at 1 and Ben starts at y amelia_distances = bfs_shortest_path(1) ben_distances = bfs_shortest_path(y) # Find the minimum moves to meet Amelia and Ben min_meeting_moves = float(\'inf\') for i in range(1, n + 1): if amelia_distances[i] != float(\'inf\') and ben_distances[i] != float(\'inf\'): min_meeting_moves = min(min_meeting_moves, max(amelia_distances[i], ben_distances[i])) return min_meeting_moves"},{"question":"Consider an undirected graph where each node represents a city, and each edge represents a direct road between two cities. The goal is to determine whether you can traverse the graph starting from any city and visit all the cities exactly once and return to the starting city, or not (i.e., check if a Hamiltonian cycle exists). You are given multiple test cases, each of which defines a graph. -----Input----- The first line contains an integer t (1 leq t leq 10) — the number of test cases. For each test case: The first line contains two integers n and m (1 leq n leq 10, 0 leq m leq n*(n-1)/2) — the number of cities (nodes) and the number of roads (edges), respectively. The next m lines contain two integers u and v (1 leq u, v leq n) indicating that there is a road between city u and city v. All roads are bidirectional, and there are no multiple roads between two cities. -----Output----- For each test case, output \\"YES\\" if there exists a Hamiltonian cycle in the graph, otherwise output \\"NO\\". -----Examples----- Input 3 4 5 1 2 2 3 3 4 4 1 1 3 3 3 1 2 2 3 3 1 4 3 1 2 2 3 3 4 Output YES YES NO In the first test case, the graph includes cities and roads: (1-2), (2-3), (3-4), (4-1), (1-3), forming a Hamiltonian cycle [1, 2, 3, 4, 1]. In the second test case, the graph includes cities and roads: (1-2), (2-3), (3-1), forming a Hamiltonian cycle [1, 2, 3, 1]. In the third test case, no Hamiltonian cycle exists with cities and roads: (1-2), (2-3), (3-4).","solution":"from itertools import permutations def is_hamiltonian_cycle(graph, n): # Generate all permutations of vertices to check for Hamiltonian cycle vertices = list(range(n)) for perm in permutations(vertices): valid_cycle = True # Check if the permutation forms a valid Hamiltonian cycle for i in range(n): if perm[i] not in graph[perm[(i+1) % n]]: valid_cycle = False break if valid_cycle: return True return False def solve(test_cases): results = [] for n, m, edges in test_cases: graph = { i: set() for i in range(n) } for u, v in edges: u -= 1 v -= 1 graph[u].add(v) graph[v].add(u) if is_hamiltonian_cycle(graph, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You need to determine if a number is prime. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. The input number is N. Determine if N is a prime number. -----Constraints----- - 1 leq N leq 1000 - N is an integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print Yes if N is a prime number; print No otherwise. -----Sample Input----- 7 -----Sample Output----- Yes","solution":"def is_prime(N): Determine if N is a prime number. Args: N (int): The number to check. Returns: str: \'Yes\' if N is a prime number, \'No\' otherwise. if N <= 1: return \'No\' for i in range(2, int(N**0.5) + 1): if N % i == 0: return \'No\' return \'Yes\'"},{"question":"Given an n x n matrix where each of the rows and columns is sorted in ascending order, write a function to determine if a target integer exists in the matrix. Each of the integers in the matrix will be in the range of -10^6 to 10^6 inclusive. **Function Signature:** ```python def search_sorted_matrix(matrix: List[List[int]], target: int) -> bool: pass ``` **Input:** - `matrix`: a list of lists, where each inner list represents a row in the sorted 2D array. - `target`: an integer value to search for. **Output:** - Returns `True` if `target` is found in the matrix; otherwise, returns `False`. **Examples:** ``` matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] search_sorted_matrix(matrix, 5) -> True search_sorted_matrix(matrix, 20) -> False ``` **Note:** - You should aim for a solution with better than O(n^2) time complexity. - Make use of the sorted property of the rows and columns for an optimized search method.","solution":"def search_sorted_matrix(matrix, target): Determines if the target integer exists in the sorted n x n matrix. if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) row, col = 0, cols - 1 # Start from the top-right corner of the matrix while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 # Move left else: row += 1 # Move down return False"},{"question":"A popular strategy game involves a series of battles where two armies fight until only one remains victorious. Each army is distinguished by a unique strength value. During a battle, the army with the higher strength wins. In case of a tie, both armies are considered defeated and removed from the competition. You have been given the strength values of the participating armies and need to determine the winner of the tournament. If multiple armies have equal strength and are the highest, they eliminate each other. You must simulate the tournament and find the value of the strength of the winning army, if one exists, or determine if no army remains. Input The first input line contains a single integer n (1 ≤ n ≤ 100000) - the number of armies. The second line contains n integers, s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9), where s_i represents the strength of the i-th army. Output Output a single integer - the strength of the winning army, or -1 if no army remains after all battles. Example Input 5 3 8 2 8 2 Output 3 Input 4 5 5 6 6 Output -1 Note In the first example, the strength values [3, 8, 2, 8, 2] are provided. The two armies with strength 8 eliminate each other, as do the two armies with strength 2, leaving only the army with strength 3 as the winner. In the second example, all armies have equal strength and eliminate each other, resulting in no remaining armies.","solution":"def find_winner(n, strengths): Determines the strength of the winning army or indicates if no army remains. Params: n (int): The number of armies. strengths (List[int]): The strength values of the armies. Returns: int: The strength of the winning army or -1 if no army remains. from collections import Counter counter = Counter(strengths) surviving_armies = [strength for strength, count in counter.items() if count % 2 != 0] if not surviving_armies: return -1 return min(surviving_armies)"},{"question":"Given a string of text, write a function that transforms dates from European format (DD/MM/YYYY) to American format (MM/DD/YYYY). Your function should find all dates in the European format within the provided text and replace them with the corresponding American format. If a date is already in American format or appears as a part of a non-date number (e.g., 12/30/2020 could be a fraction, but 12/30/20 cannot), it should remain unchanged. For example, given the input: ``` I have meetings on 25/12/2023 and 01/01/2024. The report was dated 12/30/2020 and will be revised on 45/50/9999. ``` Your function should return: ``` I have meetings on 12/25/2023 and 01/01/2024. The report was dated 12/30/2020 and will be revised on 45/50/9999. ``` As an extra challenge, ensure that your function correctly identifies and processes valid dates, ignoring invalid ones. You can assume the input string does not contain line breaks and all dates are of the form DD/MM/YYYY (no single-digit days or months). **Function Signature:** ```python def convert_dates_eu_to_us(text: str) -> str: pass ```","solution":"import re def convert_dates_eu_to_us(text: str) -> str: Converts dates from European format (DD/MM/YYYY) to American format (MM/DD/YYYY) within a given text. Only valid dates are converted. def is_valid_date(dd, mm, yyyy): try: import datetime datetime.datetime.strptime(f\\"{dd}/{mm}/{yyyy}\\", \\"%d/%m/%Y\\") return True except ValueError: return False date_pattern = re.compile(r\'b(d{2})/(d{2})/(d{4})b\') def replace_date(match): dd, mm, yyyy = match.groups() if is_valid_date(dd, mm, yyyy): return f\\"{mm}/{dd}/{yyyy}\\" else: return match.group(0) return date_pattern.sub(replace_date, text)"},{"question":"Mia has just started learning programming and is excited to write her first function. She loves prime numbers and wants to write a function that identifies prime numbers in a given range. Help Mia by writing a program that takes two integers, `a` and `b`, as input and returns a list of all prime numbers in the range [a, b] (both inclusive). A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Input: - The first line contains T, the number of test cases. - For each test case, a line follows containing two integers, a and b (0 ≤ a ≤ b ≤ 10^6). Output: - For each test case, output a list of prime numbers in the range [a, b]. Constraints: 1 ≤ T ≤ 100 0 ≤ a ≤ b ≤ 1000000 If there are no prime numbers in the given range, return an empty list. SAMPLE INPUT: 2 10 20 4 6 SAMPLE OUTPUT: [11, 13, 17, 19] [5]","solution":"import math def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def primes_in_range(a, b): Returns a list of all prime numbers in the range [a, b] (both inclusive). return [x for x in range(a, b + 1) if is_prime(x)] def find_primes_in_multiple_ranges(test_cases): Accepts list of tuples where each tuple contains two integers a and b Returns a list of lists where each list contains the prime numbers in the range [a, b] for each tuple (a, b) in the input list. results = [] for a, b in test_cases: results.append(primes_in_range(a, b)) return results"},{"question":"Being a mechanical engineer, Max loves solving practical problems. One day, he stumbled upon an interesting mathematical puzzle while writing code for a machine learning project: You are given an array of n positive integers representing the sizes of n gears. Two gears can mesh together if the size of one gear is exactly double the size of the other gear. Your task is to find the length of the longest possible chain of gears that can mesh together where each gear in the chain meshes with the next gear in the chain. -----Input----- Each test case consists of a single line: The first line contains an integer n (1 leq n leq 2 cdot 10^5) – the number of gears in the array. The second line contains n integers g_1, g_2, ..., g_n (1 leq g_i leq 10^9) – the sizes of the gears. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print the length of the longest chain of gears that can mesh together. -----Example----- Input: 2 5 1 2 4 3 8 6 6 3 12 24 48 96 Output: 4 6 -----Note----- In the first example, the longest possible chain is [1, 2, 4, 8], which has a length of 4. In the second example, the longest possible chain is [3, 6, 12, 24, 48, 96], which has a length of 6.","solution":"def longest_gear_chain(n, gears): Function to find the length of the longest chain of gears that can mesh together. Parameters: n (int): Number of gears gears (list of int): List of gear sizes Returns: int: Length of the longest possible chain of gears from collections import defaultdict # Sort gears and initialize a dictionary to store the chain lengths gears.sort() chain_len = defaultdict(int) longest_chain = 0 for gear in gears: previous_gear = gear // 2 if gear % 2 == 0 and previous_gear in chain_len: chain_len[gear] = chain_len[previous_gear] + 1 else: chain_len[gear] = 1 longest_chain = max(longest_chain, chain_len[gear]) return longest_chain # For testing the solution function with multiple test cases def solve_all_cases(cases): results = [] for case in cases: n, gears = case results.append(longest_gear_chain(n, gears)) return results"},{"question":"You are given an array of integers. Your task is to create a function that returns the sum of the two highest numbers in the array. **Note:** The input array will always contain at least two integers. Examples ``` sumTwoHighestNumbers([1, 2, 3, 4, 5]) --> 9 sumTwoHighestNumbers([10, 20, 30, 40, 50]) --> 90 sumTwoHighestNumbers([99, 1, 1, 1, 1]) --> 100 ```","solution":"def sum_two_highest_numbers(numbers): Returns the sum of the two highest numbers in the array. :param numbers: List of integers :return: Sum of the two highest integers if len(numbers) < 2: raise ValueError(\\"The list must contain at least two integers.\\") highest = second_highest = float(\'-inf\') for number in numbers: if number > highest: second_highest = highest highest = number elif number > second_highest: second_highest = number return highest + second_highest"},{"question":"***Nova polynomial derive*** This kata is part of the same series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1) [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe) [#3](http://www.codewars.com/kata/5714041e8807940ff3001140) [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5)) Consider a polynomial represented by a list, where each element corresponds to the coefficients of the polynomial terms. The index of each element in the list represents the exponent of the variable ( x ). For example: `p = [a0, a1, a2, a3]` signifies the polynomial ( a0 + a1x + a2x^2 + a3x^3 ). In this kata, you need to derive a polynomial. The derivative of a polynomial is obtained by applying the power rule to each term, which states that the derivative of ( ax^n ) is ( anx^{n-1} ). Your task is to implement the function `poly_derive()` that takes a list representing the polynomial coefficients and returns a new list representing the coefficients of the derived polynomial. ```python poly_derive([3, 5, 2]) = [5, 4] poly_derive([1, 3, 0, 7]) = [3, 0, 21] ``` # Function Signature ```python def poly_derive(p: List[int]) -> List[int]: ```","solution":"from typing import List def poly_derive(p: List[int]) -> List[int]: Derives a polynomial represented by a list of its coefficients. Parameters: p (List[int]): List of coefficients, where the index represents the exponent. Returns: List[int]: List of coefficients of the derived polynomial. # The derivative of a constant (e.g., ax^0) is 0, if polynomial has degree 0, it results in empty list if len(p) < 2: return [] return [p[i] * i for i in range(1, len(p))]"},{"question":"Given an array of integers, your task is to find the longest subsequence such that every element in the subsequence is either divisible by its immediate predecessor or divides its immediate predecessor. Input: - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer n, the length of the array. - The second line of each test case contains n space-separated integers, denoting the array elements. Output: - For each test case, output the length of the longest subsequence satisfying the given condition. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100 - 1 ≤ array elements ≤ 1000 Example: Input: 2 4 3 6 7 18 5 10 5 3 15 30 Output: 3 4 Explanation: For the first test case: - A possible subsequence is [3, 6, 18], where each element is divisible by or divides the previous element. - The length of this subsequence is 3. For the second test case: - One possible subsequence is [5, 15, 30], and another is [10, 5, 15, 30]. - The length of the second subsequence is 4.","solution":"def longest_subsequence(arr): n = len(arr) dp = [1] * n # dp[i] will store the length of the longest valid subsequence ending with arr[i] for i in range(1, n): for j in range(i): if arr[i] % arr[j] == 0 or arr[j] % arr[i] == 0: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def solve(test_cases): results = [] for n, arr in test_cases: results.append(longest_subsequence(arr)) return results"},{"question":"Arrays and subarrays are common concepts that developers often come across. A subarray is a contiguous part of an array, and developers frequently need to perform operations on these subarrays to solve problems. In this task, you are given an array of integers. Your objective is to find and return the length of the longest subarray with a sum equal to a specified target value. The function should return the length of such a subarray. If no such subarray exists, return 0. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n integers, each representing an element of the array. The third line contains an integer k (−10^9 ≤ k ≤ 10^9) — the target sum. Output In a single line, print the length of the longest subarray that has a sum equal to k. If no such subarray exists, print 0. Examples Input 5 1 -1 5 -2 3 3 Output 4 Input 3 -2 -1 2 1 Output 2 Note In the first example, the subarray [1, -1, 5, -2] has a sum of 3, which matches the target sum, and its length is 4. In the second example, the subarray [-1, 2] has a sum of 1, which matches the target sum, and its length is 2.","solution":"def longest_subarray_with_sum(nums, k): Returns the length of the longest subarray with sum equal to k. Args: nums (list of int): The array of integers. k (int): The target sum. Returns: int: The length of the longest subarray with sum equal to k. prefix_sum = 0 prefix_sums = {0: -1} max_length = 0 for i in range(len(nums)): prefix_sum += nums[i] if prefix_sum - k in prefix_sums: max_length = max(max_length, i - prefix_sums[prefix_sum - k]) if prefix_sum not in prefix_sums: prefix_sums[prefix_sum] = i return max_length"},{"question":"You are given a sorted array of integers `arr` and a target integer `x`. Your task is to find the frequency of `x` in the array. The array is sorted in non-decreasing order, which allows you to use efficient search techniques. If `x` is not present in the array, return 0. Input: The input consists of two lines. The first line contains space-separated integers forming the array `arr`, and the second line contains the target integer `x`. Output: Print an integer representing the frequency of `x` in the array. Constraints: - The length of the array is between 1 and 10^5. - Each integer in the array is in the range -10^9 to 10^9. SAMPLE INPUT 1 2 2 2 3 4 5 2 SAMPLE OUTPUT 3","solution":"def count_frequency(arr, x): Returns the frequency of x in the sorted array arr. from bisect import bisect_left, bisect_right left_index = bisect_left(arr, x) right_index = bisect_right(arr, x) return right_index - left_index"},{"question":"Write a function that takes in a string representing a sentence and returns the sentence with each word reversed, but with the words in their original order. Input :: \\"The quick brown fox\\" Output :: \\"ehT kciuq nworb xof\\" `This problem helps in understanding string manipulation and basic looping constructs. Celebrate solving it by adding it to your portfolio!`","solution":"def reverse_words(sentence): Reverses each word in the sentence but maintains the original word order. :param sentence: str, the sentence to process :return: str, the sentence with each word reversed words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"**Inverting a Number\'s Sign and Reversing its Digits** Write a function that accepts an integer and returns another integer which is obtained by inverting the original number\'s sign and then reversing its digits. For example: * Given the input `123`, the output should be `-321`. * Given the input `-456`, the output should be `654`. Notes: * If the input is a single digit, simply return its negation. * Consider handling cases where the integer might include trailing zeros after reversing (e.g., `-502` should become `205`).","solution":"def invert_and_reverse(number): Inverts the sign of the input number and then reverses its digits. # Invert the sign inverted_number = -number # Convert to string to reverse the digits inverted_number_str = str(inverted_number) # Handle the negative sign position if inverted_number_str[0] == \'-\': reversed_number_str = \'-\' + inverted_number_str[-1:0:-1] else: reversed_number_str = inverted_number_str[::-1] # Convert back to integer and return return int(reversed_number_str)"},{"question":"You are given a string containing words separated by spaces. Some words are composed of only lowercase English letters, and other words are valid integers (each integer is in the range of a 32-bit signed integer). Your task is to sort the words such that all the integers appear before all the strings, and both integers and strings are sorted in their respective sections. The order among integers should be ascending and among strings should be lexicographical. Input The first line contains a string containing words separated by spaces. The string contains at least one word and the number of words does not exceed 105. Each word is non-empty and contains only alphanumeric characters. Output Print the transformed string where all integers come before all the strings, sorted respectively. Examples Input apple 34 3 banana 7 Output 3 7 34 apple banana Input 7 54 dog 2 3 cat 1 Output 1 2 3 7 54 cat dog Input coder 100 3 question 4 Output 3 4 100 coder question","solution":"def sort_words_and_numbers(s): Sorts words such that all integers appear before all the strings, both sorted in ascending order. Args: s (str): A string containing words and integers separated by spaces. Returns: str: A sorted string with integers first followed by strings. words = s.split() numbers = [] strings = [] for word in words: if word.isdigit(): numbers.append(int(word)) else: strings.append(word) sorted_numbers = sorted(numbers) sorted_strings = sorted(strings) sorted_numbers = [str(num) for num in sorted_numbers] return \' \'.join(sorted_numbers + sorted_strings)"},{"question":"In a certain country, the tax rate applied on the income is as follows: - No tax on the first 1000 yen of income. - 10% tax on income between 1001 yen and 5000 yen (inclusive). - 20% tax on income above 5000 yen. Given an individual\'s yearly income, calculate the total amount of tax they have to pay. -----Constraints----- - 1 ≤ income ≤ 100000 -----Input----- The input is given from Standard Input in the following format: income -----Output----- Print the total amount of tax. -----Sample Input----- 7500 -----Sample Output----- 850 The first 1000 yen is not taxed. The income from 1001 yen to 5000 yen (4000 yen) is taxed at 10%, which amounts to 400 yen. The income above 5000 yen (2500 yen) is taxed at 20%, which amounts to 500 yen. The total tax is 400 + 500 = 900 yen.","solution":"def calculate_tax(income): tax = 0 if income <= 1000: return tax elif income <= 5000: tax += (income - 1000) * 0.1 else: tax += 400 + (income - 5000) * 0.2 return tax"},{"question":"In a faraway kingdom, there is a wizard named Merlin who has n magic stones. Each stone has a unique positive integer written on it. Merlin loves to experiment with the stones by arranging them in different sequences. A sequence is considered special if for every pair of consecutive stones, the sum of their numbers is a prime number^{dagger}. Merlin is interested in finding out if it is possible to arrange all the n stones in a special sequence. Write a program to help Merlin achieve this. ^{dagger} Recall that a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. -----Input----- Each test consists of multiple test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n (1 leq n leq 10^5). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, if it is possible to arrange the stones in a special sequence, output \\"YES\\". Otherwise, output \\"NO\\". -----Examples----- Input 3 4 5 3 Output YES NO YES -----Note----- In the first test case, one possible arrangement of the stones could be [1, 2, 3, 4]. This is because: - 1 + 2 = 3 (prime) - 2 + 3 = 5 (prime) - 3 + 4 = 7 (prime) In the second test case, it is not possible to arrange all 5 stones to meet the condition.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def can_form_special_sequence(n): if n == 1: return \\"YES\\" for i in range(1, n): if not is_prime(i + i + 1): return \\"NO\\" return \\"YES\\" def solve(t, test_cases): results = [] for n in test_cases: results.append(can_form_special_sequence(n)) return results"},{"question":"Given an array of integers, `arr`, find the number of unique triplets (i, j, k) such that `i < j < k` and `arr[i] + arr[j] + arr[k] == 0`. Example 1: Input: arr = [-1, 0, 1, 2, -1, -4] Output: 2 Explaination: The unique triplets are: (-1, 0, 1) (-1, -1, 2) Example 2: Input: arr = [1, 2, -2, -1] Output: 0 Explaination: There are no unique triplets that sum to zero. Your Task: You do not need to read input or print anything. Your task is to complete the function `countUniqueTriplets()` which takes array `arr` as input parameter and returns the number of unique triplets whose sum is zero. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(min(n, m)) where n is the number of elements in the array, and m is the range of elements (-10^5 to 10^5). Constraints: 1 ≤ |arr| ≤ 3000 -10^5 ≤ arr[i] ≤ 10^5","solution":"def countUniqueTriplets(arr): Returns the number of unique triplets (i, j, k) such that i < j < k and arr[i] + arr[j] + arr[k] == 0. arr.sort() n = len(arr) count = 0 unique_triplets = set() for i in range(n): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == 0: unique_triplets.add((arr[i], arr[left], arr[right])) left += 1 right -= 1 while left < right and arr[left] == arr[left - 1]: left += 1 while left < right and arr[right] == arr[right + 1]: right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return len(unique_triplets)"},{"question":"You are tasked with transporting an item across a grid while avoiding obstacles. The grid is represented as an n x m matrix where each cell can be either empty (.) or contain an obstacle (#). You start at the top-left corner of the grid (1,1) and must reach the bottom-right corner (n,m). You are allowed to move in four directions: up, down, left, and right. Your objective is to find the minimum number of moves required to reach the bottom-right corner from the top-left corner, avoiding all obstacles. If it is impossible to reach the destination, return -1. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the dimensions of the grid. The next n lines each contain m characters – each character is either \'.\' (an empty cell) or \'#\' (an obstacle). -----Output----- Output a single integer – the minimum number of moves required to reach the bottom-right corner, or -1 if it is impossible. -----Examples----- Input 5 5 ..... .#. .#.#. .#.#. ..... Output 8 Input 4 4 .... .. .... Output -1 -----Note----- In the first example, the optimal path involves moving as follows: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,5), for a total of 8 moves. In the second example, it is impossible to reach the bottom-right corner due to complete blockage by obstacles.","solution":"from collections import deque def min_moves_to_reach_end(grid): n = len(grid) m = len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set([(0, 0)]) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def parse_input(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].split()) grid = [list(line) for line in input_lines[1:n+1]] return grid def escape_grid(input_str): grid = parse_input(input_str) return min_moves_to_reach_end(grid)"},{"question":"You are working on a pattern recognition software that identifies unique patterns in sequences of numbers. A pattern is defined as a contiguous subsequence that is repeated more than once. Your task is to determine the length of the longest pattern in a given sequence. If no pattern exists, return 0. # Input: - The first line contains an integer T denoting the number of test cases. - For each test case, the first line contains an integer N denoting the length of the sequence. - The second line contains N space-separated integers representing the sequence. # Output: - For each test case, print a single integer representing the length of the longest pattern found in the sequence. If no such pattern exists, print 0. # Constraints: - 1 <= T <= 10 - 1 <= N <= 10^4 - -10^9 <= sequence[i] <= 10^9 # Sample Input: ``` 2 10 1 2 3 1 2 3 4 5 1 2 6 1 2 3 4 5 6 ``` # Sample Output: ``` 3 0 ``` # Explanation: - In the first test case, the longest repeating pattern is \\"1 2 3\\", which appears twice. - In the second test case, there are no repeating patterns, so the output is 0.","solution":"def longest_pattern_length(sequence): Returns the length of the longest repeating pattern in the sequence. If no such pattern exists, returns 0. n = len(sequence) max_len = 0 lps = [0] * n i = 1 length = 0 while i < n: if sequence[i] == sequence[length]: length += 1 lps[i] = length max_len = max(max_len, length) i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return max_len def main(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) results = [] index = 1 for _ in range(T): N = int(input_lines[index]) sequence = list(map(int, input_lines[index + 1].split())) results.append(longest_pattern_length(sequence)) index += 2 for result in results: print(result)"},{"question":"In the magical land of Anagramia, sorcerers communicate by sending each other encrypted messages. One popular method is to use the Anagram Cipher, where words are rearranged to form new words. However, the messages only convey meaningful information if the rearranged words are valid words in the Anagramian dictionary. Your task is to create a program that receives a word and determines if there exists any permutation of the word that forms a valid word in the given Anagramian dictionary. Input The first line contains an integer N, the number of words in the Anagramian dictionary. The following N lines each contain a word, which are the valid words in the Anagramian dictionary. The next line contains an integer T, the number of test cases. The following T lines each contain a word that needs to be checked. Output For each test case, output \\"YES\\" if any permutation of the given word exists in the Anagramian dictionary. Otherwise, output \\"NO\\". Constraints 1 ≤ N ≤ 1000 1 ≤ length of each word in the dictionary ≤ 100 1 ≤ T ≤ 100 1 ≤ length of each word to be checked ≤ 100 Example Input: 5 listen enlist google silent tinsel 3 inlets etslin glgoo Output: YES YES NO Explanation For the first test case, \\"inlets\\" is a valid permutation of \\"listen\\", \\"enlist\\", \\"silent\\", and \\"tinsel\\" in the dictionary. For the second test case, \\"etslin\\" is a valid permutation of the same set of words. For the third test case, \\"glgoo\\" does not match any permutation of the words in the dictionary.","solution":"def anagram_cipher(dictionary_words, test_words): from collections import Counter # Create a set of sorted words from the dictionary sorted_dict_words = set(\'\'.join(sorted(word)) for word in dictionary_words) results = [] for test_word in test_words: sorted_test_word = \'\'.join(sorted(test_word)) if sorted_test_word in sorted_dict_words: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Input parsing def main(input_str): input_lines = input_str.strip().split(\'n\') N = int(input_lines[0]) dictionary_words = input_lines[1:N+1] T = int(input_lines[N+1]) test_words = input_lines[N+2:N+2+T] return anagram_cipher(dictionary_words, test_words)"},{"question":"Implement a function `find_triplet_sum(nums, target)` that takes a list of integers `nums` and an integer `target`. The function should return a list of three integers from the input list that sum up to the target value. If there are multiple such triplets, return any one of them. If no such triplet exists, return an empty list. For example: ```python find_triplet_sum([1, 2, 3, 4, 5], 9) ``` Possible output: ```python [1, 3, 5] ``` Constraints: 1. The input list will have at least three integers. 2. The integers in the input list can be both positive and negative. 3. The returned triplet must contain three distinct elements from the original list. 4. Assume there will be at most one valid triplet for the given target in each test case. --- *Hint: use sorting and a variant of the two-pointer technique*","solution":"def find_triplet_sum(nums, target): nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: triplet_sum = nums[i] + nums[left] + nums[right] if triplet_sum == target: return [nums[i], nums[left], nums[right]] elif triplet_sum < target: left += 1 else: right -= 1 return []"},{"question":"Create a program that calculates the total sum of the interior angles of a simple polygon with `n` sides. The provided input consists of several datasets, where each dataset supplied as an integer `n` which represents the number of sides of the polygon. Your program should continue to process each dataset until it encounters an `n` value of zero, which indicates the end of input. Input The input will be several lines of integers, each representing the number of sides `n` of a polygon. The input sequence ends with a line containing a zero. Output For each dataset, output the total sum of the interior angles of the polygon in degrees on a new line. Example Input 3 4 5 0 Output 180 360 540","solution":"def sum_of_interior_angles(n): Calculate the total sum of the interior angles of a simple polygon with n sides. Args: n (int): Number of sides of the polygon Returns: int: Total sum of the interior angles in degrees return (n - 2) * 180 def sum_of_interior_angles_for_polygons(sides): Process multiple datasets of polygon sides and return the corresponding interior angles sums. Args: sides (list of int): List of integers representing the number of sides of each polygon Returns: list of int: List of integers representing the sum of the interior angles for each polygon results = [] for n in sides: if n == 0: break results.append(sum_of_interior_angles(n)) return results"},{"question":"Four friends are playing a game that involves flipping a limited number of coins. Each coin will show either heads (H) or tails (T). The game proceeds as follows: 1. They start with all coins showing tails (T). 2. In each move, a friend can choose one coin and flip it (i.e., change it from H to T or from T to H). 3. However, each coin has a flipping limit. Once a coin has been flipped a certain number of times, it can\'t be flipped anymore. Their goal is to get all coins to show heads (H) by the end of the game. Your task is to help them determine whether it\'s possible to achieve their goal given the flipping limits for each coin. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of coins. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 50) — the flipping limits for each of the n coins. Output Output \\"YES\\" if it\'s possible to get all coins to show heads, otherwise output \\"NO\\". SAMPLE INPUT 4 3 2 1 2 SAMPLE OUTPUT YES Explanation In the sample test case: - The first coin can be flipped 3 times. - The second coin can be flipped 2 times. - The third coin can be flipped 1 time. - The fourth coin can be flipped 2 times. All coins need to be flipped at least once to show heads. Here, it can be done since each coin\'s flipping limit allows for at least one flip to convert it to heads from tails. Therefore, the output is \\"YES\\".","solution":"def can_all_coins_show_heads(n, flipping_limits): Determines if all coins can be turned to heads given their flipping limits. Parameters: n (int): Number of coins. flipping_limits (list of int): The flipping limits for each coin. Returns: str: \\"YES\\" if it\'s possible to turn all coins to heads, otherwise \\"NO\\". for limit in flipping_limits: if limit < 1: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of employee records, each containing an employee\'s name, age, and salary, you have to process and display the records as follows: 1. Sort the records by salary in ascending order. If two employees have the same salary, sort them by their age in ascending order. 2. Print the sorted list of employee records, each on a new line, in the format: `Name: <name>, Age: <age>, Salary: <salary>`. Input Format The first line of input contains an integer N, the number of employee records. The next N lines each contain an employee record consisting of a string (employee\'s name), an integer (employee\'s age), and a float (employee\'s salary) separated by a space. Output Format Print the sorted list of employee records, each on a new line, in the specified format. Sample Input 4 Alice 30 60000 Bob 25 50000 Charlie 28 50000 David 35 70000 Sample Output Name: Bob, Age: 25, Salary: 50000.0 Name: Charlie, Age: 28, Salary: 50000.0 Name: Alice, Age: 30, Salary: 60000.0 Name: David, Age: 35, Salary: 70000.0 Concept This task involves working with data structures to store the employee records, sorting them based on multiple criteria, and formatting the output. You can achieve this by leveraging Python\'s sorting capabilities using custom key functions.","solution":"def sort_and_print_employee_records(records): Given a list of employee records, sorts them by salary in ascending order. If two employees have the same salary, sorts them by age in ascending order. Prints the sorted list in the format: Name: <name>, Age: <age>, Salary: <salary>. :param records: List of tuples, each containing (name: str, age: int, salary: float) sorted_records = sorted(records, key=lambda x: (x[2], x[1])) for record in sorted_records: print(f\\"Name: {record[0]}, Age: {record[1]}, Salary: {record[2]}\\") # Example usage: # records = [ # (\\"Alice\\", 30, 60000.0), # (\\"Bob\\", 25, 50000.0), # (\\"Charlie\\", 28, 50000.0), # (\\"David\\", 35, 70000.0) # ] # sort_and_print_employee_records(records)"},{"question":"Given a list of integers representing the height of consecutive buildings, you are to collect rainwater between the buildings. Write a function to return the total amount of rainwater collected after it rains. The function should consider that the amount of water collected between buildings is determined by the shorter of the two buildings\' heights, and cannot exceed the height of the shorter building. Example 1: Input: heights = [3, 0, 2, 0, 4] Output: 7 Explanation: We can collect 3 units of water between the first and third buildings, 2 units of water between the third and fifth buildings, and 2 units of water between the second and third buildings. Example 2: Input: heights = [2, 0, 2] Output: 2 Explanation: We can collect 2 units of water between the first and the last building. Your Task: You don\'t need to read input or print anything. Your task is to complete the function totalRainwater() which takes an array of integers heights and its length n as input parameter and returns the total amount of rainwater collected. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 0 <= heights[i] <= 10^4","solution":"def totalRainwater(heights): This function returns the total amount of rainwater collected between buildings. n = len(heights) if n <= 2: return 0 left_max = [0] * n right_max = [0] * n # Initialize the left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Initialize the right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the total amount of rainwater trapped total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - heights[i] return total_water"},{"question":"The inhabitants of the town of Algorithmia are planning a grand celebration. The town has been divided into several sections, each represented as nodes in a graph and connected by bidirectional roads represented as edges. To help the celebration run smoothly, they need to establish a communication hub (central node) such that the maximum distance from this hub to any other node in the town is minimized. Your task is to find the optimal node that should be chosen as the communication hub to minimize the maximum distance to any other node. -----Input----- First line of input contains an integer T denoting the number of test cases. For each test case, the first line contains two integers N and M, where N is the number of nodes and M is the number of edges. The next M lines each contain two integers u and v, indicating that there is a bidirectional road between nodes u and v. -----Output----- For each test case, print a single line containing the node that should be the communication hub. If there are multiple possible nodes, print the smallest one. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ (N*(N-1))/2 - 1 ≤ u, v ≤ N -----Example----- Input: 2 4 4 1 2 2 3 3 4 4 1 5 4 1 2 2 3 3 4 4 5 Output: 1 3","solution":"from collections import defaultdict, deque def find_communication_hub(T, cases): def bfs_distance(graph, start, N): distances = [-1] * (N + 1) queue = deque([(start, 0)]) while queue: node, dist = queue.popleft() if distances[node] == -1: distances[node] = dist for neighbor in graph[node]: if distances[neighbor] == -1: queue.append((neighbor, dist + 1)) return distances results = [] for N, M, edges in cases: graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) min_max_distance = float(\'inf\') optimal_node = -1 for node in range(1, N + 1): distances = bfs_distance(graph, node, N) max_distance = max(distances[1:]) if max_distance < min_max_distance or (max_distance == min_max_distance and node < optimal_node): min_max_distance = max_distance optimal_node = node results.append(optimal_node) return results # Parsing input for the example cases def parse_input(): T = int(input().strip()) cases = [] for _ in range(T): N, M = map(int, input().strip().split()) edges = [] for _ in range(M): u, v = map(int, input().strip().split()) edges.append((u, v)) cases.append((N, M, edges)) return T, cases if __name__ == \\"__main__\\": T, cases = parse_input() result = find_communication_hub(T, cases) for hub in result: print(hub)"},{"question":"In this problem, you are given an integer array `arr` and a target sum `target`. Your task is to find all unique quadruplets `[a, b, c, d]` in the array such that `a + b + c + d = target`. For example, given `arr = [1, 0, -1, 0, -2, 2]` and `target = 0`, the quadruplets that sum up to `0` are: - `[-2, -1, 1, 2]` - `[-2, 0, 0, 2]` - `[-1, 0, 0, 1]` Return an array of these quadruplets. Note that the solution set must not contain duplicate quadruplets. Function signature: `def four_sum(arr: List[int], target: int) -> List[List[int]]` More examples in the test cases. Good luck!","solution":"from typing import List def four_sum(arr: List[int], target: int) -> List[List[int]]: arr.sort() quadruplets = [] for i in range(len(arr) - 3): if i > 0 and arr[i] == arr[i - 1]: continue for j in range(i + 1, len(arr) - 2): if j > i + 1 and arr[j] == arr[j - 1]: continue left, right = j + 1, len(arr) - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: quadruplets.append([arr[i], arr[j], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Create a function that takes a string and returns the length of its longest substring without repeating characters. Some examples: ``` (\\"abcabcbb\\") => 3 // The answer is \\"abc\\", with the length of 3 (\\"bbbbb\\") => 1 // The answer is \\"b\\", with the length of 1 (\\"pwwkew\\") => 3 // The answer is \\"wke\\", with the length of 3 (\\"\\") => 0 // Empty string returns 0 ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_map = {} max_len = 0 start = 0 for end in range(n): if s[end] in char_map and char_map[s[end]] >= start: start = char_map[s[end]] + 1 char_map[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Consider a string s consisting of lowercase English letters. Your task is to find the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, return the lexicographically smallest one. -----Input----- A single line containing the string s (1 le |s| le 10^5). -----Output----- Output the most frequent character in the string. If there are multiple such characters, print the lexicographically smallest one. -----Examples----- Input abracadabra Output a Input mississippi Output i -----Note----- In the first example, the character a appears the most frequently (5 times), which is more than any other character in the string. In the second example, both characters i and s appear 4 times each. Since i is lexicographically smaller than s, the output is i.","solution":"def most_frequent_character(s): Returns the most frequent character in the string `s`. If there are multiple such characters, the lexicographically smallest one is returned. from collections import Counter # Count the frequency of each character in the string frequency = Counter(s) # Find the maximum frequency max_frequency = max(frequency.values()) # Get all characters with the maximum frequency candidates = [char for char, count in frequency.items() if count == max_frequency] # Return the lexicographically smallest one return min(candidates)"},{"question":"You are given a list of n integers, and you need to count the number of pairs (i, j) such that 1 <= i < j <= n and the sum of the i-th and j-th integer is odd. Input The first line contains an integer n (1 ≤ n ≤ 50,000), representing the number of integers. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the list of integers. Output Print the number of pairs (i, j) such that the sum of the i-th and j-th integer is odd. Examples Input 5 1 3 2 4 5 Output 6 Input 3 2 4 6 Output 0 Notice In the first example, the valid pairs are (1,2), (1,4), (2,3), (2,5), (3,4), and (4,5). Each sum is odd. In the second example, there are no valid pairs because all integers are even, hence their sums are never odd.","solution":"def count_odd_sum_pairs(n, nums): Counts the number of pairs (i, j) such that 1 <= i < j <= n and the sum of the i-th and j-th integer is odd. Parameters: n (int): The number of integers. nums (list): List of integers. Returns: int: The number of pairs with odd sum. count_odd = 0 count_even = 0 for num in nums: if num % 2 == 0: count_even += 1 else: count_odd += 1 return count_odd * count_even"},{"question":"# Back-Story After a long day at work, you often use a messaging app to communicate with your friends. Sometimes, you receive many messages, and it becomes a bit overwhelming to stay on top of all the conversations. To manage this, you come up with a small system to flag messages that you consider important. A message is deemed important if it contains a specific keyword that you care about (like the name of an event, a deadline, or a project). # Kata Task You will be given: * A sequence of messages, where each message is represented as a string. * A keyword that you are looking for. Your task is to implement a function `filter_important_messages(messages, keyword)` that returns a list of all messages containing the keyword, maintaining the original order. # Notes: - The keyword comparison should be case-insensitive. - An empty string is considered to be a valid keyword and should result in all messages being returned. - If no messages contain the keyword, return an empty list. Example: ```python messages = [\\"Don\'t forget the meeting tomorrow\\", \\"lunch at noon?\\", \\"Project deadline is next week\\", \\"Meeting notes have been shared\\"] keyword = \\"meeting\\" filter_important_messages(messages, keyword) # Output: [\\"Don\'t forget the meeting tomorrow\\", \\"Meeting notes have been shared\\"] ```","solution":"def filter_important_messages(messages, keyword): Returns a list of messages containing the keyword. The comparison is case-insensitive, and if the keyword is an empty string, it returns all messages. :param messages: List of message strings. :param keyword: The keyword string to look for. :return: List of messages containing the keyword. keyword = keyword.lower() return [message for message in messages if keyword in message.lower()]"},{"question":"You are given a binary tree and two integers, `A` and `B`. Write a function that determines whether there is a path from the root of the tree to a leaf such that the sum of the node values along the path equals `A` or `B`. Assume all node values are non-negative integers. Input - The input parameters will be: - `root`: The root of the binary tree. - `A`: An integer representing one target sum. - `B`: An integer representing another target sum. Output - Return `true` if there is a path in the tree from the root to a leaf such that the sum of the node values along this path equals `A` or `B`. Otherwise, return `false`. Examples Input ``` root = [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, null, null, null, 1] A = 22 B = 26 ``` Output ``` true ``` Input ``` root = [1, 2, 3] A = 5 B = 6 ``` Output ``` false ``` Explanation In the first example, the binary tree is: ``` 5 / 4 8 / / 11 13 4 / 7 2 1 ``` The path 5 -> 4 -> 11 -> 2 sums to 22 and the path 5 -> 8 -> 4 -> 1 sums to 26. Thus, the output is `true`. In the second example, the binary tree is: ``` 1 / 2 3 ``` There are no paths with a sum of `5` or `6` from root to leaf. Thus, the output is `false`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def has_path_sum(root, target_sum): Return True if there exists a root-to-leaf path in the binary tree where the sum of the node values is equal to target_sum. if not root: return False # If we\'re at a leaf node, check the sum if not root.left and not root.right: return root.val == target_sum # Otherwise, check the subtrees target_sum -= root.val return has_path_sum(root.left, target_sum) or has_path_sum(root.right, target_sum) def has_path_sum_any(root, A, B): Return True if there exists a root-to-leaf path in the binary tree where the sum of the node values is equal to A or B. return has_path_sum(root, A) or has_path_sum(root, B)"},{"question":"Tanya is learning how to manage her expenses and wishes to keep track of her daily spending. She categorizes her expenses into different categories such as `Food`, `Transport`, `Entertainment`, and `Utilities`. Tanya logs her expenses in a ledger in the format: `date category amount`, where `date` is in the format `YYYY-MM-DD`, `category` is one of the aforementioned expense categories, and `amount` is a positive integer representing the amount spent in dollars. Tanya wants your help to calculate her total spending for each category in a given month. -----Input----- The first line of input contains an integer n (1 leq n leq 100), representing the number of entries in the ledger. Each of the next n lines contains a ledger entry formatted as `date category amount`. The last line of input contains a date in the format `YYYY-MM`, representing the month for which Tanya wants to calculate her spending. -----Output----- Output four lines, each containing a category and the total amount spent in that category for the given month. The output format should be: ``` Food: total_amount Transport: total_amount Entertainment: total_amount Utilities: total_amount ``` If a category has no expenses for the given month, the total amount for that category should be 0. -----Examples----- Sample Input: 5 2023-08-15 Food 20 2023-08-16 Transport 15 2023-08-15 Entertainment 30 2023-08-16 Food 25 2023-09-01 Utilities 50 2023-08 Sample Output: Food: 45 Transport: 15 Entertainment: 30 Utilities: 0","solution":"def calculate_monthly_spending(n, ledger_entries, query_month): categorised_spending = { \'Food\': 0, \'Transport\': 0, \'Entertainment\': 0, \'Utilities\': 0 } for entry in ledger_entries: date, category, amount = entry.split() if date.startswith(query_month): categorised_spending[category] += int(amount) return categorised_spending"},{"question":"Given a list of words, find the length of the longest chain of words that can be formed such that each word in the chain is one character longer than the previous word and contains all the characters of the previous word. Each word in the list is unique. Input A list of words where each word is a string consisting of lowercase letters. The list contains no more than 50 words, and the length of each word does not exceed 20 characters. Output Print the length of the longest possible word chain. Example Input: [\\"a\\", \\"b\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"] Output: 4 Explanation: The longest possible chain is \\"a\\" -> \\"ba\\" -> \\"bca\\" -> \\"bdca\\".","solution":"def longest_word_chain(words): words.sort(key=lambda x: len(x)) word_map = {word: 1 for word in words} max_chain_length = 1 for word in words: for i in range(len(word)): prev_word = word[:i] + word[i+1:] if prev_word in word_map: word_map[word] = max(word_map[word], word_map[prev_word] + 1) max_chain_length = max(max_chain_length, word_map[word]) return max_chain_length"},{"question":"Transform and Compare Strings Given two strings `s1` and `s2`, determine if the characters of `s1` can be rearranged through any number of swaps to match `s2`. Return \\"Yes\\" if it\'s possible, otherwise \\"No\\". The comparison is case-sensitive and considers all characters including spaces and punctuation. Input: - Two space-separated strings `s1` and `s2`. Output: - A single line with the output \\"Yes\\" or \\"No\\". Example 1: Input: ``` listen silent ``` Output: ``` Yes ``` Example 2: Input: ``` apple pleaple ``` Output: ``` No ``` Example 3: Input: ``` abc cba ``` Output: ``` Yes ``` Example 4: Input: ``` abc AbC ``` Output: ``` No ``` Explanation: In Example 1, the characters in \\"listen\\" can be rearranged to form \\"silent\\", so the output is \\"Yes\\". In Example 2, the presence of the extra characters in \\"pleaple\\" makes it impossible to form \\"apple\\" by any rearrangement, so the output is \\"No\\". In Example 3, \\"abc\\" can be rearranged to form \\"cba\\", thus the output is \\"Yes\\". In Example 4, the comparison is case-sensitive, so \\"abc\\" and \\"AbC\\" are considered different, result in the output \\"No\\".","solution":"def can_transform_and_compare(s1: str, s2: str) -> str: Determine if the characters of s1 can be rearranged to match s2. if sorted(s1) == sorted(s2): return \\"Yes\\" return \\"No\\""},{"question":"Develop a function that determines if two words are anagrams of each other. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. INPUT The input consists of multiple test cases. The first line contains the number of test cases, t. Each of the next t lines contains two space-separated strings, word1 and word2, which you need to check for anagram status. 1 < t < 100 1 < length(word1), length(word2) < 1000 OUTPUT For each test case, print \\"YES\\" if word1 and word2 are anagrams of each other, \\"NO\\" otherwise. SAMPLE INPUT 3 listen silent triangle integral hello oellh SAMPLE OUTPUT YES YES YES","solution":"def are_anagrams(word1, word2): Check if the two words are anagrams of each other. Args: word1 (str): The first word. word2 (str): The second word. Returns: bool: True if the words are anagrams, False otherwise. # To check if two words are anagrams, we can sort the characters and compare the sorted lists return sorted(word1) == sorted(word2) def process_test_cases(tc, test_cases): Process multiple test cases to check for anagrams. Args: tc (int): Number of test cases. test_cases (List[Tuple[str, str]]): List of word pairs to check for anagram status. Returns: List[str]: List containing \\"YES\\" or \\"NO\\" for each test case. results = [] for word1, word2 in test_cases: if are_anagrams(word1, word2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You have `n` empty containers arranged in a line and you need to distribute exactly `k` units of water into these containers. Your task is to determine if it\'s possible to distribute all `k` units such that no container has more than `m` units of water. If it is possible, output a space-separated list of the amounts of water in each container. If there are multiple valid distributions, you may output any of them. If it is not possible, output `No`. Constraints: - 1 ≤ n ≤ 1000 - 1 ≤ k ≤ 10^6 - 1 ≤ m ≤ 1000 **Input** - `n k m` - three integers separated by spaces. **Output** - If it is possible to distribute the water, output `n` space-separated integers representing the amount of water in each container such that the sum is exactly `k` and no container has more than `m` units. If it is not possible, output `No`. **Examples** Input ``` 5 10 3 ``` Output ``` 2 2 2 2 2 ``` Explanation: One possible distribution is 2 units of water in each container. Input ``` 3 8 2 ``` Output ``` No ``` Explanation: It is not possible to distribute 8 units of water into 3 containers where no container holds more than 2 units.","solution":"def distribute_water(n, k, m): Determines if it is possible to distribute k units of water into n containers such that no container has more than m units of water. If possible, returns a list of distribution; otherwise, \'No\'. Args: n (int): Number of containers k (int): Total units of water to distribute m (int): Maximum units of water any container can hold Returns: list or str: List of integers if distribution is possible, else \'No\' # Calculate the minimum total units needed if all containers are to be filled equally min_needed = n max_possible = n * m if k < min_needed or k > max_possible: return \\"No\\" result = [0] * n # Start with zero water in each container for i in range(n): if k > m: result[i] = m k -= m else: result[i] = k k = 0 return result"},{"question":"You are a developer working on a file management system. This system allows users to create, delete, and move files and directories. All operations should maintain the hierarchical structure of directories. Files and directories are represented by unique strings. Your task is to implement an efficient file and directory organization. Here is a list of operations that you need to support: 1. **CREATE path**: Creates a new file or directory at the specified path. 2. **DELETE path**: Deletes the file or directory at the specified path, including all its contents if it is a directory. 3. **MOVE source_path destination_path**: Moves the file or directory from source_path to destination_path. The initial file system is empty. The paths are given as strings where directories are separated by slashes (\\"/\\"). If any operation is invalid (e.g., creating a file in a non-existing directory, deleting a non-existing file, or moving to an invalid location), it should be ignored. ------ Input ------ The first line of the input contains a single integer Q denoting the number of operations. The following Q lines each contain one of the following four types of operations: - CREATE path - DELETE path - MOVE source_path destination_path ------ Output ------ After processing all operations, print all paths of existing files and directories in the file system in lexicographical order, each on a new line. ------ Constraints ------ 1 leq Q leq 10^{5} Each path string has a length between 1 and 100 and consists of printable ASCII characters. ------ Sample Input 1 ------ 8 CREATE /a CREATE /a/b CREATE /a/b/c DELETE /a/b CREATE /a/d MOVE /a /e CREATE /e/f ------ Sample Output 1 ------ /e /e/d /e/f ------ Explanation 1 ------ 1. Creating /a. 2. Creating /a/b. 3. Creating /a/b/c. 4. Deleting /a/b (and /a/b/c gets deleted as well). 5. Creating /a/d. 6. Moving /a to /e (now /e and /e/d). 7. Creating /e/f.","solution":"class FileSystem: def __init__(self): self.fs = set() def create(self, path): if path in self.fs: return parent_path = \'/\'.join(path.rstrip(\'/\').split(\'/\')[:-1]) if parent_path == \'\' or parent_path in self.fs: self.fs.add(path.rstrip(\'/\')) def delete(self, path): path = path.rstrip(\'/\') if path in self.fs: for p in list(self.fs): if p == path or p.startswith(path + \\"/\\"): self.fs.remove(p) def move(self, src, dst): src = src.rstrip(\'/\') dst = dst.rstrip(\'/\') if src not in self.fs: return parent_path = \'/\'.join(dst.split(\'/\')[:-1]) if parent_path != \'\' and parent_path not in self.fs: return to_move = sorted([p for p in self.fs if p.startswith(src)], key=len) for p in to_move: new_path = dst + p[len(src):] self.fs.remove(p) self.fs.add(new_path) def process_operations(self, operations): for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"CREATE\\": self.create(parts[1]) elif cmd == \\"DELETE\\": self.delete(parts[1]) elif cmd == \\"MOVE\\": self.move(parts[1], parts[2]) return sorted(self.fs) def file_management(operations): fs = FileSystem() return fs.process_operations(operations)"},{"question":"Sophie is working on a new text-processing tool and needs to implement a feature to highlight certain keywords in a document. She aims to replace each occurrence of the keyword with a highlighted version, which is represented by enclosing the keyword in brackets []. The document consists of lowercase letters and spaces, and the highlighting is case-sensitive. Your task is to help Sophie by writing a function that, given a document and a list of keywords, replaces each occurrence of the keywords with their highlighted version. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains the document as a string. - The second line contains an integer K, the number of keywords. - The next K lines each contain a keyword. Output: - For each test case, print the modified document with highlighted keywords. Constraints: - 1 <= T <= 10 - 1 <= length of document <= 1000 - 1 <= K <= 50 - 1 <= length of each keyword <= 100 Example: Input: 2 this is a test document 2 test document hello world 1 world Output: this is a [test] [document] hello [world] Explanation: In the first test case, the keywords \\"test\\" and \\"document\\" are highlighted in the document by enclosing them in brackets. In the second test case, the keyword \\"world\\" is highlighted in the document by enclosing it in brackets.","solution":"def highlight_keywords(T, cases): results = [] for case in cases: document = case[\\"document\\"] keywords = case[\\"keywords\\"] for keyword in keywords: document = document.replace(keyword, f\\"[{keyword}]\\") results.append(document) return results def process_input(data): data = data.strip().split(\\"n\\") T = int(data[0]) index = 1 cases = [] for _ in range(T): doc = data[index] K = int(data[index + 1]) keywords = [data[index + 2 + i] for i in range(K)] cases.append({\\"document\\": doc, \\"keywords\\": keywords}) index += 2 + K return T, cases data = 2 this is a test document 2 test document hello world 1 world T, cases = process_input(data) results = highlight_keywords(T, cases) for result in results: print(result)"},{"question":"In the mystical realm of Algrithmia, there lies a legendary artifact called the \\"Code Jewel.\\" It is said that the artifact glows whenever one solves a puzzle related to strings and patterns. Your quest is to solve the following pattern matching puzzle to make the Code Jewel glow. You are given a string `s` and a pattern `p` where the pattern may contain the wildcard characters `?` and `*`. The wildcard character `?` can match any single character, while the wildcard character `*` can match any sequence of characters (including the empty sequence). Your task is to implement a function that checks if the given string `s` matches the pattern `p`. Write a function `bool isMatch(string s, string p)` that returns true if the string matches the pattern, otherwise returns false. # Input * `s`: a non-empty string of length up to 1000. * `p`: a non-empty pattern string of length up to 1000, containing only lowercase letters, `?`, and `*`. # Output * Return `true` if `s` matches `p`, otherwise return `false`. # Examples Example 1 Input: ``` s = \\"aa\\" p = \\"a\\" ``` Output: ``` false ``` Explanation: \\"a\\" does not match the entire string \\"aa\\". Example 2 Input: ``` s = \\"aa\\" p = \\"*\\" ``` Output: ``` true ``` Explanation: \'*\' matches any sequence of characters. Example 3 Input: ``` s = \\"cb\\" p = \\"?a\\" ``` Output: ``` false ``` Explanation: \'?\' matches \'c\', but the second character is \'b\', which does not match \'a\'. Example 4 Input: ``` s = \\"adceb\\" p = \\"*a*b\\" ``` Output: ``` true ``` Explanation: The first \'*\' matches the sequence \\"adc\\", and the second \'*\' matches the empty sequence. Example 5 Input: ``` s = \\"acdcb\\" p = \\"a*c?b\\" ``` Output: ``` false ``` Explanation: The pattern is not flexible enough to match the string. # Note You are required to use dynamic programming or a state-machine-like approach to solve this problem efficiently due to the input size constraints. Naive backtracking or brute-force methods may not work within the allowed time limits.","solution":"def isMatch(s, p): Returns True if the string s matches the pattern p, otherwise returns False. The pattern p may contain wildcard characters \'?\' and \'*\'. m, n = len(s), len(p) # Create a DP table with all elements as False initially dp = [[False] * (n + 1) for _ in range(m + 1)] # Empty pattern matches empty string dp[0][0] = True # Handle patterns with * at the start which can match an empty string `s` for j in range(1, n + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, m + 1): for j in range(1, n + 1): if p[j - 1] == \'*\': # * can match zero or more characters from s dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif p[j - 1] == \'?\' or s[i - 1] == p[j - 1]: # Match single character or any character dp[i][j] = dp[i - 1][j - 1] return dp[m][n]"},{"question":"Input Format The input format is as follows: n t x1 x2 ... xt Where: - n is the size of the array. - t is the number of elements to be incremented. Output Format Print the modified array after performing the increment operation. Constraints * 1 ≤ n ≤ 10^7 * 1 ≤ t ≤ n * 1 ≤ xi ≤ n Task Description You are given an array of size n with all elements initialized to 0. You need to increment each element located at the positions given in the t-length list by 1. Sample Input 1 5 3 1 3 5 Sample Output 1 1 0 1 0 1 Sample Input 2 8 4 2 4 6 8 Sample Output 2 0 1 0 1 0 1 0 1 Explanation: For the first example, the input array of size 5 is initially [0, 0, 0, 0, 0]. After incrementing the elements at positions 1, 3, and 5 by 1, the final array becomes [1, 0, 1, 0, 1]. For the second example, the input array of size 8 is initially [0, 0, 0, 0, 0, 0, 0, 0]. After incrementing the elements at positions 2, 4, 6, and 8 by 1, the final array becomes [0, 1, 0, 1, 0, 1, 0, 1]. Input Format The input format is as follows: n t x1 x2 ... xt","solution":"def increment_elements(n, t, positions): Creates an array of size n initialized to 0 and increments the elements at the specified positions by 1. Parameters: n (int): Size of the array. t (int): Number of elements to be incremented. positions (list of int): Positions to be incremented (1-based index). Returns: list of int: The modified array after incrementing the specified positions. arr = [0] * n for pos in positions: if 1 <= pos <= n: arr[pos - 1] += 1 return arr"},{"question":"During a company event, employees participated in two different contests: Contest A and Contest B. Each employee could participate in both, one, or none of the contests. Management wants to analyze the participation. You are given the following data: * Total number of employees (E). * Number of employees who participated in Contest A (A). * Number of employees who participated in Contest B (B). * Number of employees who participated in both contests (C). Your task is to determine: 1. The number of employees who participated only in Contest A. 2. The number of employees who participated only in Contest B. 3. The number of employees who did not participate in any contest. Write a function to compute and print these three values based on the inputs provided. Constraints: * 1 leq E leq 100 * 0 leq A leq E * 0 leq B leq E * 0 leq C leq min(A, B) * All values in input are integers. Input: The input consists of a single line with four integers E, A, B, and C separated by space. Output: Print three integers - the number of employees who participated only in Contest A, only in Contest B, and did not participate in any contest, in this order, each on a new line. Example: Input: 10 4 5 2 Output: 2 3 3 Input: 50 20 30 10 Output: 10 20 10","solution":"def contest_participation(E, A, B, C): Returns the count of employees who participated only in Contest A, only in Contest B, and those who did not participate in any contest. only_A = A - C only_B = B - C neither = E - (A + B - C) return only_A, only_B, neither # Example usage if __name__ == \\"__main__\\": E, A, B, C = map(int, input().split()) results = contest_participation(E, A, B, C) for result in results: print(result)"},{"question":"Sasha enjoys studying weather patterns and often conducts analysis on temperatures recorded over a period of time. Given a list of daily temperature readings, Sasha wants to find out the longest period of days during which the temperature was continuously non-decreasing. Input The first line contains the integer \\"N\\" which is the number of days for which the temperature readings are available. The second line contains \\"N\\" space-separated integers representing the temperature readings of each day. Output Print a single integer which is the length of the longest period during which the temperature readings were continuously non-decreasing. SAMPLE INPUT 10 5 6 6 3 4 5 7 7 8 2 SAMPLE OUTPUT 6 Explanation From 3 to 8 the temperatures are continuously non-decreasing: 3, 4, 5, 7, 7, 8 (a total of 6 days).","solution":"def longest_non_decreasing_period(n, temperatures): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if temperatures[i] >= temperatures[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given an array of integers where each element appears exactly twice, except for one element which appears only once. Implement a function to find and return the unique element. -----Constraints----- - The length of the array is odd and falls within the range 1 ≤ n ≤ 1000. - The array contains integers between -1000 and 1000. -----Input----- Input is given from Standard Input in the following format: The first line contains a single integer `n` (the number of elements in the array). The second line contains `n` space-separated integers representing the elements of the array. -----Output----- Print the unique element that appears only once in the array. -----Sample Input----- 5 2 3 1 2 3 -----Sample Output----- 1","solution":"def find_unique_element(n, arr): Finds the unique element in an array where every other element appears exactly twice except for one element which appears only once. Parameters: n (int): The number of elements in the array. arr (list): A list of integers. Returns: int: The unique element. unique_element = 0 for num in arr: unique_element ^= num return unique_element # Example Usage: # if __name__ == \\"__main__\\": # n = int(input().strip()) # arr = list(map(int, input().strip().split())) # print(find_unique_element(n, arr))"},{"question":"# Task Write a function that takes in a string as an input and returns `true` if it is a palindrome ignoring spaces, capitalization, and punctuation, and `false` otherwise. # Example For `phrase = \\"A man, a plan, a canal, Panama\\"`, the output should be `true`; For `phrase = \\"Hello, World!\\"`, the output should be `false`. # Input/Output - `[input]` string `phrase` Constraints: `1 ≤ phrase.length ≤ 1000` - `[output]` a boolean value `true` if the input string is a palindrome, `false` otherwise.","solution":"import re def is_palindrome(phrase): Returns true if the given phrase is a palindrome ignoring spaces, capitalization, and punctuation; otherwise, false. # Remove all non-alphanumeric characters and convert to lowercase cleaned_phrase = re.sub(r\'[^a-zA-Z0-9]\', \'\', phrase).lower() # Check if cleaned_phrase is a palindrome return cleaned_phrase == cleaned_phrase[::-1]"},{"question":"Alex is organizing a typing competition where each participant needs to type a given sentence repeatedly for a specified period. Each participant can type a specific number of words per minute (WPM), and the given sentence consists of a specific number of words. Your task is to determine how many complete sentences each participant can type in the given time. Input The first input line contains an integer T, the number of test cases. Each test case consists of a single line containing three space-separated integers: WPM (the number of words the participant can type per minute), sentence_length (the number of words in the given sentence), and D (the duration of the competition in minutes). Output For each test case, output a single integer representing the number of complete sentences the participant can type within the given time. Constraints 1 ≤ T ≤ 1000 1 ≤ WPM, sentence_length, D ≤ 10^9 SAMPLE INPUT 2 120 20 10 150 30 5 SAMPLE OUTPUT 60 25 Explanation In the 1st testcase, the participant can type 120 words per minute, and the sentence consists of 20 words. Over a duration of 10 minutes, they can type 1200 words. Therefore, the participant can type 1200 / 20 = 60 complete sentences. In the 2nd test case, the participant can type 150 words per minute, and the sentence consists of 30 words. Over a duration of 5 minutes, they can type 750 words. Therefore, the participant can type 750 / 30 = 25 complete sentences.","solution":"def complete_sentences(T, test_cases): results = [] for case in test_cases: WPM, sentence_length, D = case total_words = WPM * D complete_sentences = total_words // sentence_length results.append(complete_sentences) return results"},{"question":"You are given a list of strings that represent some activities with their respective priorities. Each string consists of an activity name and its priority separated by a comma. Your task is to sort these activities primarily by their priority in descending order. Activities with the same priority should be sorted alphabetically. Input format: - An integer n, representing the number of activities. - n lines follow, each containing a string with an activity name and its priority separated by a comma. Output format: - Print the sorted list of activities, each on a new line. Constraints: 1 ≤ n ≤ 100 Priority is an integer between 1 and 100 Activity name will only consist of alphabetic characters and spaces Example Input: 3 Write report,2 Morning Exercise,5 Team Meeting,5 Example Output: Morning Exercise,5 Team Meeting,5 Write report,2","solution":"def sort_activities(n, activities): Sort activities primarily by their priority in descending order. Activities with same priority are sorted alphabetically. :param n: int - number of activities :param activities: list - list of activities with their priorities :return: list - sorted list of activities # Split the activities and priorities split_activities = [activity.split(\',\') for activity in activities] # Sort primarily by -int(priority) to get descending order and secondly by activity name sorted_activities = sorted(split_activities, key=lambda x: (-int(x[1]), x[0])) return [\',\'.join(activity) for activity in sorted_activities]"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function named `is_palindrome_permutation` that takes a string as input and returns `True` if any permutation of the string is a palindrome and `False` otherwise. **Examples:** - `is_palindrome_permutation(\\"Tact Coa\\")` should return `True` (Permutations: \\"taco cat\\", \\"atco cta\\", etc.) - `is_palindrome_permutation(\\"Hello\\")` should return `False` Consider the permutations of the string to be case insensitive and ignore non-alphabet characters.","solution":"from collections import Counter def is_palindrome_permutation(s): Returns True if any permutation of the string is a palindrome, ignoring cases and non-alphabet characters, otherwise returns False. s = \'\'.join(filter(str.isalpha, s)).lower() char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 == 1) return odd_count <= 1"},{"question":"You are given a list of integers, and your task is to determine which elements appear most frequently. If there are several elements with the highest frequency, return the smallest element among them. Input The first line contains an integer t (1 ≤ t ≤ 1000) - the number of test cases. Each of the next t lines contains the description of a test case in two parts: - The first part consists of one integer n (1 ≤ n ≤ 1000) - the number of elements in the list. - The second part consists of n space-separated integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6) - the elements of the list. Output For each test case, output a single integer: the smallest element that appears most frequently in the list. Example Input 3 5 1 2 2 1 3 6 4 4 4 6 6 6 4 -1 -1 -1 -2 Output 1 4 -1","solution":"def most_frequent_element(t, test_cases): results = [] for case in test_cases: n, elements = case frequency = {} for element in elements: if element in frequency: frequency[element] += 1 else: frequency[element] = 1 max_freq = max(frequency.values()) candidates = [key for key, value in frequency.items() if value == max_freq] results.append(min(candidates)) return results"},{"question":"# Task Gunjan is participating in a coding competition where she has to solve a maze problem. The maze is represented as a 2D grid where each cell is either open (`.`) or has an obstacle (`#`). Gunjan can move one step at a time in four possible directions: up, down, left, or right. Given the start and end positions in the maze, help Gunjan find the shortest path from the start to the end. If no such path exists, return -1. The maze is connected, which means there might be more than one way to reach the end, but Gunjan has to find the shortest path. # Input/Output - `[input]` 2D character matrix `maze` A 2D grid representing the maze, consisting of characters \'.\' (open) and \'#\' (obstacle). - `[input]` integer `start` An integer representing the starting cell in the form of (row, col), where row is the row index and col is the column index. - `[input]` integer `end` An integer representing the ending cell in the form of (row, col), where row is the row index and col is the column index. - `[output]` an integer The minimum number of steps required to reach the end from the start, or -1 if no such path exists. # Example For `maze = [ [\'.\',\'.\',\'.\'], [\'#\',\'#\',\'.\'], [\'.\',\'.\',\'.\'] ]`, `start = (0, 0)`, and `end = (2, 2)`, the output should be `4`. For `maze = [ [\'.\',\'#\',\'.\'], [\'#\',\'#\',\'.\'], [\'.\',\'.\',\'.\'] ]`, `start = (0, 0)`, and `end = (2, 2)`, the output should be `-1`.","solution":"from collections import deque def shortest_path_in_maze(maze, start, end): Finds the shortest path from start to end in a given maze. :param maze: List[List[str]], The 2D grid representing the maze. :param start: Tuple[int, int], The starting cell (row, col). :param end: Tuple[int, int], The ending cell (row, col). :return: int, The minimum number of steps to reach the end from the start or -1 if no such path exists. rows = len(maze) cols = len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and maze[x][y] == \'.\' queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set() visited.add((start[0], start[1])) while queue: x, y, steps = queue.popleft() if (x, y) == (end[0], end[1]): return steps for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if is_valid(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, steps + 1)) return -1"},{"question":"A group of friends is playing a game where they need to encode a secret word by creating a special grid. The grid is defined as follows: each row of the grid represents a permutation of the secret word. The grid can have exactly N rows, each containing the N letters of the secret word - each letter appearing exactly once per row. Given the grid, the goal is to determine the secret word by finding the lexicographically smallest permutation that appears on each row. Input The first line contains an integer N (1 ≤ N ≤ 500) — the size of the grid, and hence the length of the secret word. Each of the next N lines consists of exactly N lowercase Latin letters — a permutation of the secret word. Output Output a string of length N which is the lexicographically smallest permutation that consistently appears as a permutation in each row of the grid. If more than one permutation is possible, output any. Examples Input 4 bcad adcb dbac cabd Output abcd Input 3 bca acb cab Output abc Input 5 pqrst qrstu sturp trups rputq Output pqrst","solution":"def find_secret_word(N, grid): Finds the lexicographically smallest permutation that appears in each row of the grid. Parameters: N (int): Size of the grid and length of the secret word. grid (list): List of N strings, each having N permutations of the secret word. Returns: str: The lexicographically smallest permutation that appears in each row of the grid. # Since each row is a permutation of the secret word # we can use one row\'s sorted version as the smallest # possible permutation correctly sorted_permutation = \\"\\".join(sorted(grid[0])) return sorted_permutation"},{"question":"You are given an array of integers where each integer appears exactly twice, except for one integer which appears exactly once. Your task is to find the integer that appears only once. # Input - The first line of input contains a single integer `t` (1 leq t leq 100) — the number of test cases. - For each test case: - The first line contains one integer `n` (1 leq n leq 10^5), the number of integers in the array. - The second line contains `2n+1` integers, the elements of the array. # Output - For each test case, output the integer that appears only once. # Example Input ``` 2 1 2 2 1 3 4 1 2 1 2 3 4 ``` Output ``` 1 3 ```","solution":"def find_unique_integer(t, test_cases): results = [] for case in test_cases: n, arr = case unique = 0 for num in arr: unique ^= num results.append(unique) return results # Example usage: # t = 2 # test_cases = [ # (1, [2, 2, 1]), # (3, [4, 1, 2, 1, 2, 3, 4]), # ] # Output should be [1, 3]"},{"question":"Cynthia is organizing a team-building event where employees will be grouped into teams to work on various activities. The organizer wants to ensure that each team has exactly t members, and she has e employees available to form these teams. Determine if it is possible to form exactly r teams with the given number of employees, where each team has exactly t members. -----Input----- The first line contains three integers r, t, and e (1 leq r, t, e leq 100) — the number of teams, the number of members per team, and the number of available employees respectively. -----Output----- Print \\"Possible\\" if it is possible to form the given number of teams with the exact number of members. Otherwise, print \\"Impossible\\". You can print each letter in any case (upper or lower). -----Examples----- Input 3 4 12 Output Possible Input 5 2 9 Output Impossible Input 2 3 9 Output Impossible -----Note----- In the first example, there are 3 teams and each team should have 4 members. The organizer has 12 employees which is exactly enough to form the teams. In the second example, there are 5 teams and each team should have 2 members. The organizer has 9 employees, but forming 5 complete teams would require 10 employees. In the third example, there are 2 teams and each team should have 3 members. The organizer has 9 employees, but she needs exactly 6 employees to form 2 complete teams, meaning 9 employees is more than needed, making it impossible to form exactly 2 teams.","solution":"def is_formation_possible(r, t, e): Determines if it is possible to form exactly r teams with t members each using e employees. required_employees = r * t if required_employees == e: return \\"Possible\\" return \\"Impossible\\""},{"question":"Write a function that takes in two strings and returns a boolean indicating whether the second string is a permutation of a substring of the first string. **Note:** A permutation is a rearrangement of letters. Complete the function to return `true` if the second string is a permutation of any substring of the first string, and `false` otherwise. Examples * `\\"abcd\\"` contains `\\"db\\"` as a permutation of the substring `\\"bd\\"` * `\\"hello\\"` contains `\\"leo\\"` as a permutation of the substring `\\"lo\\"` * `\\"world\\"` does not contain `\\"owr\\"` as any substring permutation","solution":"def is_permutation_of_substring(s1, s2): Returns True if s2 is a permutation of some substring of s1, False otherwise. from collections import Counter len_s1, len_s2 = len(s1), len(s2) if len_s2 > len_s1: return False s2_counter = Counter(s2) window_counter = Counter(s1[:len_s2]) if s2_counter == window_counter: return True for i in range(len_s2, len_s1): window_counter[s1[i]] += 1 window_counter[s1[i - len_s2]] -= 1 if window_counter[s1[i - len_s2]] == 0: del window_counter[s1[i - len_s2]] if s2_counter == window_counter: return True return False"},{"question":"Given a grid of size m x n, where each cell is either a land cell (1) or a water cell (0), you should determine the shortest bridge. A bridge here means the smallest number of 0s that must be flipped to 1s such that we create a connection between two separate islands (two separate groups of connected 1s). Example 1: Input: grid = [[0,1],[1,0]] Output: 1 Explanation: We change 0 to 1 to connect the two islands. Example 2: Input: grid = [[0,1,0],[0,0,0],[0,0,1]] Output: 2 Explanation: We change the two 0s in the middle to 1s to connect the two islands. Example 3: Input: grid = [[1,1,1,1,1], [1,0,0,0,1], [1,0,1,0,1], [1,0,0,0,1], [1,1,1,1,1]] Output: 1 Your Task: You don\'t need to read input or print anything. Complete the function `shortestBridge()` that takes the grid as input and returns the length of the shortest bridge. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: * m == grid.length * n == grid[0].length * 2 <= m, n <= 100 * grid[i][j] == 0 or grid[i][j] == 1 * There are exactly two islands in grid","solution":"from collections import deque def shortestBridge(grid): def dfs(i, j): stack = [(i, j)] island = [] while stack: ci, cj = stack.pop() if 0 <= ci < m and 0 <= cj < n and grid[ci][cj] == 1: grid[ci][cj] = -1 island.append((ci, cj)) for ni, nj in [(ci+1, cj), (ci-1, cj), (ci, cj+1), (ci, cj-1)]: stack.append((ni, nj)) return island def bfs(queue): level = 0 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: for _ in range(len(queue)): ci, cj = queue.popleft() for ni, nj in directions: ni, nj = ci + ni, cj + nj if 0 <= ni < m and 0 <= nj < n: if grid[ni][nj] == 1: return level if grid[ni][nj] == 0: grid[ni][nj] = -1 queue.append((ni, nj)) level += 1 m, n = len(grid), len(grid[0]) island1 = [] # Find the first island for i in range(m): found = False for j in range(n): if grid[i][j] == 1: island1 = dfs(i, j) found = True break if found: break # Initialize the BFS with the first island queue = deque(island1) return bfs(queue)"},{"question":"A certain number N (1 ≤ N ≤ 10^9) is hidden. You need to interact with the system to find out the hidden number. You are allowed to make up to 20 attempts to guess the number. Each time you make a guess by querying the system with an integer. The system will respond with one of the following: 1. \\"TOO HIGH\\" – indicating that the guessed number is greater than the hidden number. 2. \\"TOO LOW\\" – indicating that the guessed number is less than the hidden number. 3. \\"CORRECT\\" – indicating that the guessed number is equal to the hidden number, and you should immediately terminate. Your task is to write a program to guess the hidden number efficiently by making use of these hints. # Interaction The interaction proceeds as follows (this is an example how you should implement it): 1. Your program prints a single integer – your guess. 2. The system responds with one of the three strings: \\"TOO HIGH\\", \\"TOO LOW\\", or \\"CORRECT\\". 3. Your program continues to guess until it receives the \\"CORRECT\\" response or the number of guesses reaches 20. # Example **Input (system):** - The system picks a hidden number, say 42. **Expected Output:** Your program should output successive guesses such as: ``` 500000000 250000000 125000000 62500000 31250000 15625000 7812500 3906250 1953125 976563 488282 244141 122071 61036 30518 15259 7630 3815 1908 954 477 239 120 60 30 15 8 4 2 1 CORRECT ``` (Note: This is just one of many possible sequences of guesses that efficiently narrows down to the hidden number.) Each guess should be followed by the response condition from the system, leading up to the \\"CORRECT\\" guess within 20 attempts. # Submission Notes - Your solution should efficiently determine the hidden number using a binary search strategy or a similar efficient algorithm to minimize the number of guesses. - Pay attention to the system messages and adjust subsequent guesses accordingly. - Ensure your program terminates immediately after receiving the \\"CORRECT\\" response, or after making 20 incorrect guesses.","solution":"def guess_number(): import sys low, high = 1, 10**9 attempts = 0 while attempts < 20: guess = (low + high) // 2 print(guess) sys.stdout.flush() response = input().strip() if response == \\"CORRECT\\": return elif response == \\"TOO HIGH\\": high = guess - 1 elif response == \\"TOO LOW\\": low = guess + 1 attempts += 1"},{"question":"You are working as a developer and need to create a small application to help manage a list of students and their grades. The application should allow you to add a student with their grade, remove a student by name, and find the average grade of all students. Implement a class `StudentGrades` with the following methods: 1. `add_student(name: str, grade: int) -> None`: Adds a student with the given name and grade to the list. 2. `remove_student(name: str) -> bool`: Removes the student with the given name from the list. Returns `True` if the student was successfully removed, and `False` if the student didn\'t exist. 3. `get_average_grade() -> float`: Returns the average grade of all students. If there are no students, returns `0.0`. ------ Input Format ------ - There is no direct input to functions; the methods will be called by your implementation. ------ Constraints ------ - `name` is a non-empty string containing only alphabetical characters. - `grade` is an integer between `0` and `100` inclusive. - You can assume all students have unique names. - You will not be given initial data; all data is added via the methods. - You may assume methods are called correctly according to their respective signatures. Example Usage: ```python # Example Usage students = StudentGrades() students.add_student(\\"Alice\\", 90) students.add_student(\\"Bob\\", 80) students.add_student(\\"Charlie\\", 70) print(students.get_average_grade()) # Output: 80.0 students.remove_student(\\"Alice\\") print(students.get_average_grade()) # Output: 75.0 students.remove_student(\\"Dave\\") # Output: False (Dave not in the list) students.remove_student(\\"Bob\\") print(students.get_average_grade()) # Output: 70.0 ``` Note: Ensure to handle edge cases, such as removing a student that does not exist or computing the average grade when no students are present.","solution":"class StudentGrades: def __init__(self): self.students = {} def add_student(self, name: str, grade: int) -> None: self.students[name] = grade def remove_student(self, name: str) -> bool: if name in self.students: del self.students[name] return True return False def get_average_grade(self) -> float: if not self.students: return 0.0 return sum(self.students.values()) / len(self.students)"},{"question":"Description You are managing a library system where books are constantly being borrowed and returned. To ensure the library maintains a balanced collection of book genres, you need to keep track of the genre distribution on the shelves. The library categorizes each book by its genre, and each book has a unique identifier. Your task is to write a program that allows you to update the genre distribution when books are borrowed or returned and to query the current distribution of genres in the library. Input The input consists of multiple operations: 1. \\"BORROW book_id genre\\" - This operation signifies that a book with the given book_id has been borrowed from the library. The genre of the book is also given. 2. \\"RETURN book_id genre\\" - This operation signifies that a book with the given book_id has been returned to the library. The genre of the book is also given. 3. \\"QUERY\\" - This operation asks for the current distribution of genres in the library. The input ends with a \\"STOP\\" command. It is guaranteed that \\"RETURN\\" operations will only be issued for books that were previously borrowed. Output For each \\"QUERY\\" operation, output the current distribution of genres in the library in the format \\"GENRE:count\\", one genre per line, sorted lexicographically by the genre names. If the library has no books, output \\"EMPTY\\". Example Input BORROW 1 Fiction BORROW 2 Non-Fiction RETURN 1 Fiction QUERY BORROW 3 Science QUERY STOP Output Fiction:1 Non-Fiction:1 EMPTY Non-Fiction:1 Science:1","solution":"def library_system(operations): genre_count = {} borrowed_books = {} def borrow(book_id, genre): if book_id not in borrowed_books: if genre not in genre_count: genre_count[genre] = 0 borrowed_books[book_id] = genre genre_count[genre] += 1 def return_book(book_id, genre): if book_id in borrowed_books: borrowed_genre = borrowed_books.pop(book_id) genre_count[borrowed_genre] -= 1 if genre_count[borrowed_genre] == 0: del genre_count[borrowed_genre] def query(): if not genre_count: return \\"EMPTY\\" result = [f\\"{genre}:{count}\\" for genre, count in sorted(genre_count.items())] return \\"n\\".join(result) result = [] for operation in operations: parts = operation.split() if parts[0] == \\"BORROW\\": _, book_id, genre = parts borrow(book_id, genre) elif parts[0] == \\"RETURN\\": _, book_id, genre = parts return_book(book_id, genre) elif parts[0] == \\"QUERY\\": result.append(query()) elif parts[0] == \\"STOP\\": break return result"},{"question":"You are given a sequence of n positive integers. The task is to reorder the sequence such that the maximum difference between two adjacent elements in the reordered sequence is minimized. If there are multiple solutions, return any of them. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n space-separated positive integers a_i (1 ≤ a_i ≤ 1,000,000) — the elements of the sequence. Output Print n space-separated integers — the reordered sequence where the maximum difference between any two adjacent elements is minimized. Examples Input 5 4 2 1 7 5 Output 5 4 2 1 7 Input 6 10 20 30 40 50 60 Output 10 20 30 40 50 60 Note In the first example, the reordered sequence minimizes the maximum difference between adjacent elements, which is 3 (abs(4-1) = 3). In the second example, the list is already ordered such that the maximum difference between adjacent elements is minimized.","solution":"def reorder_sequence(n, elements): Reorders the sequence such that the maximum difference between two adjacent elements is minimized. Args: n (int): The number of elements in the sequence. elements (List[int]): The sequence of positive integers. Returns: List[int]: The reordered sequence. elements.sort() left, right = 0, n - 1 result = [] while left <= right: if len(result) % 2 == 0: result.append(elements[left]) left += 1 else: result.append(elements[right]) right -= 1 return result"},{"question":"Create a function that takes an array of integers and an integer `n` and returns an array of the `n` largest unique elements from the original array. The return array should be sorted in descending order. If there are fewer than `n` unique elements in the input array, return those elements sorted in descending order. For example: ```python find_largest_elements([4, 5, 6, 3, 2, 7], 3) ``` should return `[7, 6, 5]`. ```python find_largest_elements([4, 4, 4, 3, 2], 2) ``` should return `[4, 3]`. If the input array is empty or `n` is less than or equal to 0, return an empty array.","solution":"def find_largest_elements(arr, n): Returns the `n` largest unique elements from the original array sorted in descending order. If there are fewer than `n` unique elements, returns those elements sorted in descending order. if n <= 0 or not arr: return [] unique_elements = list(set(arr)) unique_elements.sort(reverse=True) return unique_elements[:n]"},{"question":"You are a property manager who needs to allocate apartments to potential tenants based on their budget and preference. Each apartment has a rent and a score associated with it, which signifies its desirability. Each tenant has a maximum budget they’re willing to pay and a minimum score they desire. The goal is to find the most desirable apartment within the tenant\'s budget. If there are multiple apartments with the same desirability, you should choose the one with the lowest rent. If no suitable apartment is found, return -1. Each incoming tenant\'s request should be processed independently. The property manager wants an efficient solution as tenants continuously come and go. INPUT FORMAT - The first part of the input specifies the number of apartments, A(1 ≤ A ≤ 100000). In the next A lines, each line contains two positive integers, Ri (1 ≤ Ri ≤ 1000000) and Si (1 ≤ Si ≤ 100000), representing the rent and score of the i-th apartment respectively. - After the apartments are listed, the second part of the input specifies the number of tenants, T(1 ≤ T ≤ 100000). In the next T lines, each line contains two positive integers, Bi (1 ≤ Bi ≤ 1000000) and Pi (1 ≤ Pi ≤ 100000), representing the budget and preferred score of the i-th tenant respectively. OUTPUT FORMAT For each tenant, output the rent of the most desirable apartment they can afford. If no suitable apartment exists, output -1. SAMPLE INPUT 5 1000 80 500 50 1200 90 700 60 800 85 3 750 55 1300 80 450 50 SAMPLE OUTPUT 700 1200 -1","solution":"def find_best_apartment(apartments, tenants): For each tenant, find the most desirable apartment they can afford. Args: apartments (list of tuples): Each tuple contains (rent, score) of an apartment. tenants (list of tuples): Each tuple contains (budget, preferred_score) of a tenant. Returns: list: List of rents for the best apartment each tenant can afford, or -1 if no suitable apartment exists. results = [] # Sort apartments primarily by score descending and secondarily by rent ascending sorted_apartments = sorted(apartments, key=lambda x: (-x[1], x[0])) for budget, preferred_score in tenants: # Find the most desirable apartment within the tenant\'s budget and preferences found = False for rent, score in sorted_apartments: if rent <= budget and score >= preferred_score: results.append(rent) found = True break if not found: results.append(-1) return results # Example usage if __name__ == \\"__main__\\": apartments = [(1000, 80), (500, 50), (1200, 90), (700, 60), (800, 85)] tenants = [(750, 55), (1300, 80), (450, 50)] results = find_best_apartment(apartments, tenants) for result in results: print(result)"},{"question":"A gardener wants to arrange plants in a specific way in his garden for seasonal decoration. He has an integer N that determines the number of rows as well as the number of plants in the first row. He wants your help to generate a triangle-like pattern based on this number N. Your task is to write a program that helps the gardener to arrange his plants accordingly. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains an integer N, which represents the number of rows of the triangle pattern and the number of plants in the first row. -----Output:----- For each test case, output the triangle pattern for the given N. Each row of the pattern should start with subsequent plant labels (starting from 1) and decrease the number of plants in each row by one until the last row contains only one plant. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 1 2 1 1 2 3 1 2 1 1 2 3 4 1 2 3 1 2 1 -----EXPLANATION:----- For N = 2: Row 1: 1 2 Row 2: 1 For N = 3: Row 1: 1 2 3 Row 2: 1 2 Row 3: 1 For N = 4: Row 1: 1 2 3 4 Row 2: 1 2 3 Row 3: 1 2 Row 4: 1","solution":"def generate_triangle_patterns(test_cases): results = [] for N in test_cases: pattern = [] for i in range(N, 0, -1): row = \' \'.join(map(str, range(1, i+1))) pattern.append(row) results.append(\'n\'.join(pattern)) return results"},{"question":"Given a string s, you need to determine the number of substrings that start and end with the same character. Input Format The input is a string s which consists of lowercase alphabets. Output Format Print a single integer, the number of substrings that start and end with the same character. Constraints 1 leq |s| leq 10^5 - The length of the string s is at most 100,000. Sample Input ``` ababa ``` Sample Output ``` 9 ``` Explanation Here are the substrings of \\"ababa\\" that start and end with the same character: - \\"a\\" (at index 0) - \\"a\\" (at index 2) - \\"a\\" (at index 4) - \\"b\\" (at index 1) - \\"b\\" (at index 3) - \\"aba\\" (starting at index 0 and ending at index 2) - \\"bab\\" (starting at index 1 and ending at index 3) - \\"aba\\" (starting at index 2 and ending at index 4) - \\"ababa\\" (starting at index 0 and ending at index 4) So, the total number is 9.","solution":"def count_substrings_start_end_same(s): Returns the number of substrings that start and end with the same character. n = len(s) count = 0 # Dictionary to keep track of the count of each character freq = {} for i in range(n): # For each character s[i], all substrings that end at i and start # with character s[i] itself count += 1 # If character s[i] has been seen before, # then it forms substrings with each previous occurrence of s[i] if s[i] in freq: count += freq[s[i]] # Update the frequency of character s[i] if s[i] in freq: freq[s[i]] += 1 else: freq[s[i]] = 1 return count"},{"question":"Peter wants to create an artistic mosaic using M tiles from his collection. The tiles come in different colors, and Peter can either add a new colored tile to his collection or remove a specific colored tile from his collection. He needs to ensure that no two adjacent tiles in the mosaic have the same color. In one minute Peter can do one of the following: - Add a tile of any color to his collection. - Remove a tile of any specified color from his collection. What is the minimum number of minutes Peter needs to satisfy the condition that no two adjacent tiles in the mosaic have the same color? Input format: The only line of the input contains an integer M (the number of tiles). Output format: Output the single integer -- the minimum number of minutes Peter needs. Constraints: 1 ≤ M ≤ 10^5 M ≤ 100 in test data worth 33% of all points SAMPLE INPUT 6 SAMPLE OUTPUT 0","solution":"def min_minutes(M): Returns the minimum number of minutes required to ensure no two adjacent tiles in the mosaic have the same color. return 0"},{"question":"You are given an array of positive integers representing the heights of students standing in a single row. Each student should be assigned a unique position in another row such that the sum of absolute differences in heights between each corresponding pair of students in the two rows is minimized. Your task is to determine an optimal way to assign the positions in the new row. -----Input:----- - First line will contain N, the number of students. - Next line contains N positive integers separated by space denoting the heights of the students. -----Output:----- Print the required N integers denoting the heights of the students in the new row. Each integer in the output represents the height of the student at the respective position to minimize the sum of absolute differences. -----Constraints----- - 1 leq N leq 100000 - 1 leq H_i leq 10^9 , (where 1 leq i leq N) and H_i denotes the height of the i\'th student. -----Sample Input:----- 4 10 1 3 5 -----Sample Output:----- 1 3 5 10","solution":"def optimal_rearrangement(N, heights): Rearrange the heights array to minimize the sum of absolute differences between each corresponding pair of students in the two rows. Parameters: N (int): Number of students heights (List[int]): Heights of the students Returns: List[int]: Heights of students in new arrangement # Sorting the array heights.sort() return heights"},{"question":"Given an undirected graph with N nodes and M edges, and each edge having a non-negative weight, your task is to determine the length of the shortest path from node 1 to every other node in the graph. If a node is unreachable from node 1, return -1 for that node. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ M ≤ 200,000 - 0 ≤ weight of each edge ≤ 1,000,000 -----Input----- The input is given from Standard Input in the following format: N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M Each line u_i v_i w_i indicates an edge between node u_i and node v_i with weight w_i. -----Output----- Print N-1 space-separated integers. The i-th integer should be the length of the shortest path from node 1 to node (i+1). If a node is unreachable, output -1 for that node. -----Sample Input----- 5 6 1 2 1 1 3 4 2 3 2 2 4 7 3 4 3 4 5 1 -----Sample Output----- 1 3 6 7 Explanation: - The shortest path from node 1 to node 2 is 1 (1-2) - The shortest path from node 1 to node 3 is 3 (1-2-3) - The shortest path from node 1 to node 4 is 6 (1-2-3-4) - The shortest path from node 1 to node 5 is 7 (1-2-3-4-5)","solution":"import heapq import sys def shortest_path(N, M, edges): graph = [[] for _ in range(N+1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = [float(\'inf\')] * (N + 1) dist[1] = 0 pq = [(0, 1)] # (distance, node) visited = set() while pq: d, node = heapq.heappop(pq) if node in visited: continue visited.add(node) for neighbor, weight in graph[node]: if dist[neighbor] > d + weight: dist[neighbor] = d + weight heapq.heappush(pq, (dist[neighbor], neighbor)) result = [] for i in range(2, N + 1): if dist[i] == float(\'inf\'): result.append(-1) else: result.append(dist[i]) return result"},{"question":"You are given a collection of marbles. Each marble can be one of several colors and sizes. You have to determine the color of marbles that appears the most frequently for each size category. If there is a tie, choose the color that appears alphabetically first. Input The input consists of several lines: - The first line contains an integer N (1 ≤ N ≤ 1000), representing the number of marbles. - The next N lines describe the marbles. Each line contains a string Si (denoting the size of the marble) and Ci (denoting the color of the marble). Both strings consist only of lowercase English letters. Output For each unique size, print a line containing the size, a space, and the most common color for that size. Sizes should be printed in alphabetical order. Sample Input ``` 7 small red large blue medium green small blue medium green large red small red ``` Sample Output ``` large blue medium green small red ``` Explanation For the given input: - \\"small\\" marbles appear in colors \\"red\\" (2 times) and \\"blue\\" (1 time). Therefore, \\"red\\" is chosen as it appears most frequently. - \\"medium\\" marbles appear in color \\"green\\" (2 times). Therefore, \\"green\\" is chosen. - \\"large\\" marbles appear in colors \\"blue\\" (1 time) and \\"red\\" (1 time). Using the alphabetical rule, \\"blue\\" is chosen over \\"red\\".","solution":"def most_frequent_color_of_sizes(marble_data): from collections import defaultdict, Counter size_color_counts = defaultdict(Counter) # Parse the input list of marble data for size, color in marble_data: size_color_counts[size][color] += 1 result = [] for size in sorted(size_color_counts.keys()): color_count = size_color_counts[size] most_common_color = min(color_count.items(), key=lambda x: (-x[1], x[0])) result.append(f\\"{size} {most_common_color[0]}\\") return result def parse_input(data): lines = data.strip().split(\\"n\\") n = int(lines[0]) marble_data = [tuple(line.split()) for line in lines[1:n + 1]] return marble_data def main(data): marble_data = parse_input(data) result = most_frequent_color_of_sizes(marble_data) return \\"n\\".join(result)"},{"question":"**Problem Statement:** Daniel is an aspiring triathlete. He must participate in a series of competitions, with each competition comprising three events: swimming, cycling, and running. For each competition, Daniel records the time he takes to complete each event. Given these times, Daniel wants to minimize his total competition time. However, Daniel also wants to know which of the events he should improve upon the most, based on the maximum time he spends on any single event across all competitions. Your task is to help Daniel determine the competition in which he took the least time overall and identify the event that took the maximum time across all competitions. **Input:** The first line of the input contains an integer T denoting the number of test cases. The first line of each test case description contains an integer n indicating the number of competitions. Each of the next n lines contains three integers - S, C, and R representing the time (in minutes) it took Daniel to complete the swimming, cycling, and running events respectively. **Output:** For each test case, output two space-separated integers: 1. The index (1-based) of the competition in which Daniel took the least total time. 2. The maximum time he took in any single event across all competitions. **Constraints:** 1 ≤ T ≤ 5 1 ≤ n ≤ 100 1 ≤ S, C, R ≤ 300 **Sample Input:** 2 3 10 20 30 15 25 35 5 8 12 2 50 60 70 45 55 65 **Sample Output:** 3 35 2 70 **Explanation:** In the first test case: - The total times for the three competitions are 60, 75, and 25 respectively. Daniel\'s best total time is in the third competition. - The maximum individual event time among all the events is 35 minutes (from the second competition). In the second test case: - The total times for the two competitions are 180 and 165 respectively. Daniel\'s best total time is in the second competition. - The maximum individual event time among all the events is 70 minutes (from the first competition).","solution":"def analyse_competitions(T, cases): Analyze T test cases for competition times. Each case consists of multiple competitions. For each competition, the times for three events are given. Arguments: T : int : number of test cases cases : list of tuples : Each tuple with (n, competition_times) n: int : number of competitions competition_times: list of tuples : Each tuple (S, C, R) indicating times for swimming, cycling, and running Returns: list of tuples : Each tuple with (competition_index, max_event_time) competition_index: int : 1-based index of the competition with the least total time. max_event_time: int : Maximum time taken for a single event across all competitions. results = [] for i in range(T): n, competition_times = cases[i] min_total_time = float(\'inf\') competition_index = -1 max_event_time = 0 for j in range(n): S, C, R = competition_times[j] total_time = S + C + R if total_time < min_total_time: min_total_time = total_time competition_index = j + 1 max_event_time = max(max_event_time, S, C, R) results.append((competition_index, max_event_time)) return results"},{"question":"Given a 2D grid, each cell in the grid contains either a 0 or a 1. If a cell contains a 1, it can move to any of its adjacent cells (up, down, left, right) that also contain a 1. A group of connected 1s forms an island. Compute the maximum area of an island in the provided grid. An island is defined as a group of contiguous cells containing 1, connected either vertically or horizontally. The area of the island is the total count of 1 cells in that island. Example 1: Input: [[0,0,1,0], [1,1,1,0], [0,1,0,0], [1,0,0,0]] Output: 5 Explanation: The largest island has an area of 5 (formed by the cells with 1). Example 2: Input: [[0,0,0,1], [1,1,0,1], [1,0,0,0], [0,0,0,1]] Output: 3 Explanation: There are three islands, with the largest one having an area of 3. Example 3: Input: [[0,0,0,0], [0,1,1,0], [0,0,0,0], [1,1,1,1]] Output: 4 Explanation: The largest island is formed by the cells with 1 in the last row. Example 4: Input: [[1,1,1], [0,1,0], [1,1,1]] Output: 5 Explanation: The largest island has an area of 5, formed by the 1s in the boundary of the grid, connected diagonally. Example 5: Input: [[0]] Output: 0 Explanation: There are no islands in the grid. Constraints: - The grid is rectangular, and its width and height do not exceed 50. - Each cell in the grid is either 0 or 1.","solution":"def max_area_of_island(grid): Returns the maximum area of an island in the provided grid. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0 or visited[r][c]: return 0 visited[r][c] = True return 1 + dfs(r+1, c) + dfs(r-1, c) + dfs(r, c+1) + dfs(r, c-1) max_area = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and not visited[r][c]: max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"Write a function that takes a list of integers and a target sum. The function should return `True` if any two distinct numbers in the list add up to the target sum, and `False` otherwise. Example: Input: `nums = [10, 15, 3, 7]`, `target = 17` Output: `True` Explanation: 10 and 7 add up to 17. Example: Input: `nums = [1, 2, 3, 4, 5]`, `target = 10` Output: `False` Explanation: No two numbers in the list add up to 10.","solution":"def has_pair_with_sum(nums, target): Returns True if there are two distinct numbers in the list that add up to the target sum. Returns False otherwise. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"A group of friends is seated in a row at an amusement park waiting for a ride. Each friend has a different level of patience, represented by an integer. The ride allows friends to join in batches, and each batch consists of the same number of friends. Considering a minimum level of patience required to join the ride, determine the maximum number of friends that can join the ride together while maintaining their order in the row. Given the patience levels of the friends and the minimum patience required, implement a function to return the maximum size of the batch that can join the ride together. Example patience = [2, 4, 5, 8, 9] min_patience = 4 In the example above, the patience levels of friends are [2, 4, 5, 8, 9] and the minimum patience required to join the ride is 4. The maximum batch of friends that can join the ride together is [4, 5, 8, 9] which is of size 4. Function Description Complete the maxBatchSize function in the editor below. It should return an integer representing the size of the maximum batch of friends with patience levels meeting or exceeding the minimum required. maxBatchSize has the following parameter(s): - int[] patience: an array of integers representing the patience levels of each friend - int min_patience: an integer representing the minimum patience level required to join the ride Returns - int: the size of the maximum batch of friends that can join the ride together Input Format The first line contains an integer, n, the number of friends. The second line contains n space-separated integers, representing the patience levels of the friends. The third line contains an integer, min_patience, representing the minimum patience level required to join the ride. Constraints 1 ≤ n ≤ 1000 1 ≤ patience[i], min_patience ≤ 1000 Sample Input 0 5 2 4 5 8 9 4 Sample Output 0 4 Explanation 0 The patience levels of friends are [2, 4, 5, 8, 9] and the minimum required is 4. The friends with patience levels 4, 5, 8, and 9 can join the ride together, making the maximum batch size 4. Sample Input 1 6 1 7 3 6 5 2 5 Sample Output 1 3 Explanation 1 The patience levels of friends are [1, 7, 3, 6, 5, 2] and the minimum required is 5. The friends with patience levels 7, 6, and 5 can join the ride together, making the maximum batch size 3.","solution":"def maxBatchSize(patience, min_patience): Returns the size of the maximum batch of friends with patience levels meeting or exceeding the minimum required. Parameters: - patience: list of integers representing the patience levels of each friend - min_patience: integer representing the minimum patience level required to join the ride Returns: - int: the size of the maximum batch of friends that can join the ride together # List to store friends who meet or exceed the minimum patience level valid_friends = [p for p in patience if p >= min_patience] # The size of the valid friends is the maximum batch size return len(valid_friends)"},{"question":"You are given a string s consisting of lowercase English letters and q queries to it. Each query is denoted by two integers l_i and r_i. For each query, you have to find the lexicographically smallest character in the substring of s from index l_i to index r_i (a substring is a contiguous part of an array). For example, if s = \\"abcde\\", then for query (l_i = 2, r_i = 4) the substring we are interested in is \\"bcd\\", and the answer is \'b\'; for query (l_i = 1, r_i = 5) the substring is \\"abcde\\", and the answer is \'a\'. Can you answer all of the queries? Input The first line contains an integer n (1 ≤ n ≤ 5 ⋅ 10^5) indicating the length of the string. The second line contains a string s of length n. The third line contains one integer q (1 ≤ q ≤ 5 ⋅ 10^5). Then q lines follow, i-th line containing two integers l_i and r_i representing i-th query (1 ≤ l_i ≤ r_i ≤ n). Output For each query, print the lexicographically smallest character in the substring from l_i to r_i. Example Input 5 abcde 2 2 4 1 5 Output b a","solution":"def smallest_char_in_substrings(n, s, queries): Returns the lexicographically smallest character in the substring for each query. Parameters: n (int): Length of the string s s (str): The string containing lowercase English letters queries (list of tuple): List of queries in the form (l_i, r_i) Returns: list: List of smallest characters for each substring query results = [] for l, r in queries: substring = s[l-1:r] # Substring from l to r results.append(min(substring)) # Find the smallest character in the substring return results"},{"question":"In a faraway kingdom, there exists a special kind of tree called a \\"Magic Infinity Tree\\". This tree has the unique feature that, for any node, the sum of the values of all its children is equal to the value of the node itself. Additionally, the value of the tree’s root node is known and is non-negative. The tree is structured as follows: - Each node can have zero or more child nodes. - The values of the nodes and the structure of the tree are such that this rule is always satisfied. Given the structure of the tree and the value of the root node, your task is to determine the minimum number of nodes in the tree. -----Input:----- - First line contains an integer T, the number of test cases. Then follow the test cases. - The first line of each test case contains an integer V, the value of the root node. -----Output:----- - For each test case, output the minimum number of nodes required to form the Magic Infinity Tree with the given root value. -----Constraints----- - 1 leq T leq 100 - 0 leq V leq 10^{18} -----Sample Input:----- 3 0 1 10 -----Sample Output:----- 1 2 11 -----Explanation:----- **For V = 0:** The only possible tree is just the root node with value 0. So, minimum nodes = 1. **For V = 1:** The smallest tree satisfying the given rule is: - Root node with value 1 - One child node with value 1 So, minimum nodes = 2. **For V = 10:** The smallest tree satisfying the given rule is: - Root node with value 10 - One child node with value 10 Thus, it already balances as every node’s value sums to its parent. So, minimum nodes = 11.","solution":"def min_nodes_in_magic_infinity_tree(T, values): def compute_min_nodes(V): if V == 0: return 1 return V + 1 results = [] for value in values: results.append(compute_min_nodes(value)) return results"},{"question":"You are given a string containing only characters \'a\' and \'b\'. You can perform the following operation as many times as you want: choose any two adjacent characters in the string and replace them with a single character \'a\' if the selected characters are both \'a\', or with a single character \'b\' if the selected characters are both \'b\', or with a single character \'c\' if one of the selected characters is \'a\' and the other is \'b\'. Your task is to determine the possible reduced string after performing the operations any number of times. Input format: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string of characters \'a\' and \'b\' only. Output format: For each test case, print the possible reduced string. Constraints: 1 ≤ T ≤ 10 1 ≤ |string| ≤ 100 SAMPLE INPUT: 2 ab aa SAMPLE OUTPUT: c a","solution":"def reduce_string(s): Function to reduce a string s containing only \'a\' and \'b\' according to given rules. while len(s) > 1: new_s = [] i = 0 while i < len(s) - 1: if s[i] == \'a\' and s[i+1] == \'a\': new_s.append(\'a\') elif s[i] == \'b\' and s[i+1] == \'b\': new_s.append(\'b\') else: new_s.append(\'c\') i += 2 if i < len(s): new_s.append(s[-1]) s = \'\'.join(new_s) return s def process_test_cases(T, test_cases): Function to process multiple test cases and return their results. results = [] for s in test_cases: results.append(reduce_string(s)) return results"},{"question":"Given a string s, return true if and only if it is a valid palindrome after deleting at most one character from it. A palindrome is a string that reads the same forward and backward. Example 1: Input: \\"abca\\" Output: true Explanation: You could delete the character \'c\'. Example 2: Input: \\"racecar\\" Output: true Explanation: There is no need to delete any character since \\"racecar\\" is already a palindrome. Example 3: Input: \\"hello\\" Output: false Explanation: There is no way to delete one character to form a palindrome. Note: 1 <= s.length <= 50000 s consists only of printable ASCII characters.","solution":"def valid_palindrome(s): Returns true if the string s can be made into a palindrome by deleting at most one character. def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # If there\'s a mismatch, check the two possible strings (one with either character removed) return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"You are given a string `S` containing only characters \'a\', \'b\', and \'c\'. You need to transform this string into a balanced string. A string is called balanced if all the characters (\'a\', \'b\', and \'c\') have the same frequency. To balance the string, you can perform the following operation any number of times (including zero): - Choose any character in the string `S`, and replace it with one of the other two characters. Your task is to find the minimum number of operations required to transform the given string into a balanced string. ------ Input ------ The first line contains a single integer `T` representing the number of test cases. Each of the next `T` lines contains a string `S`. ------ Output ------ For each test case, output a single integer, the minimum number of operations required to make the string balanced. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 S consists only of the characters \'a\', \'b\', and \'c\'. ------ Sample Input 1 ------ 3 aaabbb aabbcc abcabc ------ Sample Output 1 ------ 2 0 0 ------ Explanation 1 ------ Test case 1: The string \\"aaabbb\\" can be transformed into \\"aabbcc\\" using 2 operations: change one \'a\' to \'c\' and one \'b\' to \'c\'. Test case 2: The string \\"aabbcc\\" is already balanced, so no operations are needed. Test case 3: The string \\"abcabc\\" is already balanced, so no operations are needed.","solution":"def min_operations_to_balance(S): Returns the minimum number of operations required to transform the string S into a balanced string. n = len(S) count_a = S.count(\'a\') count_b = S.count(\'b\') count_c = S.count(\'c\') # A balanced string must have each character occuring n // 3 times target_count = n // 3 # Calculate the differences from the target count diff_a = count_a - target_count diff_b = count_b - target_count diff_c = count_c - target_count # If the count of one character is too high, it can be reduced, and one of the other characters increased total_diff = abs(diff_a) + abs(diff_b) + abs(diff_c) # Since each replacement operation changes two character counts, the minimum operations needed will be the half of the total differences min_operations = total_diff // 2 return min_operations def min_operations_for_test_cases(test_cases): results = [] for S in test_cases: results.append(min_operations_to_balance(S)) return results"},{"question":"A group of n friends played badminton on the weekend, and they want to display a scoreboard showing their scores in descending order. However, they have an additional requirement: if two or more friends have the same score, they should appear in the scoreboard in alphabetical order of their names. Input The first line contains an integer n, which is the number of friends (1 ≤ n ≤ 50). Then follow n lines. The i-th line contains two words — the name of the friend who played and his score. The words are separated by exactly one space. The names consist of Latin letters, the first letter is uppercase, the rest are lowercase. The length of any name is from 1 to 10 characters. The score is an integer between 0 and 100 inclusive. Output Print n lines. The i-th of them should contain the name of the friend who must be the i-th in the scoreboard. Note The scores should be sorted in descending order. If scores are the same, sort the names in alphabetical order. Examples Input 5 Alice 50 Bob 75 Charlie 50 David 100 Eve 75 Output David Bob Eve Alice Charlie","solution":"def sort_scores(n, data): Sorts friends\' names based on their scores in descending order. If scores are the same, sorts names alphabetically. Parameters: n (int): Number of friends. data (list of tuple): List of tuples, each containing a friend\'s name and score. Returns: list of str: Sorted list of friends\' names. # Sort considering the score in descending order and then the names in ascending order sorted_data = sorted(data, key=lambda x: (-x[1], x[0])) # Extracting only names sorted_names = [entry[0] for entry in sorted_data] return sorted_names"},{"question":"There\'s a kingdom with n cities and m roads connecting these cities. Some of the roads are one-way, and some are two-way. The king has ordered his top officials to conduct a kingdom-wide survey and register the routes between the cities. Each city can be represented as a node, and each road as an edge between two nodes. The roads are given in the format (u, v, type), where u is the starting city, v is the ending city, and type is 1 for a one-way road from u to v and 2 for a two-way road between u and v. The king is worried about the security of his kingdom and wants to ensure that all cities can communicate with each other directly or indirectly via the roads. Specifically, he wants to know if there\'s a scenario where every city can reach every other city. Find if there exists a way such that every city can be visited from any other city irrespective of the direction of the roads. -----Input----- The first line of input contains two integers n and m (1 ≤ n ≤ 10^3, 1 ≤ m ≤ 2*10^3) — the number of cities and the number of roads, respectively. The next m lines describe the roads. Each road is described by three integers u, v, type (1 ≤ u, v ≤ n, u ≠ v, type ∈ {1, 2}) — the cities and the type of the road. -----Output----- Print \\"YES\\" if it is possible for any city to reach any other city, otherwise print \\"NO\\". -----Examples----- Input 4 4 1 2 1 2 3 1 3 4 1 4 1 1 Output YES Input 4 3 1 2 1 2 3 1 3 4 2 Output NO Input 3 3 1 2 2 2 3 2 3 1 2 Output YES -----Note----- In the first example, all cities can communicate through the one-way roads forming a cycle. In the second example, there\'s no direct or indirect path from city 4 to city 1. In the third example, the two-way roads allow for full communication between all cities in both directions.","solution":"def can_reach_all_cities(n, m, roads): from collections import defaultdict, deque def bfs(start_node, graph): visited = set() queue = deque([start_node]) while queue: current = queue.popleft() if current not in visited: visited.add(current) queue.extend(graph[current] - visited) return visited # Create adjacency graphs adj = defaultdict(set) reverse_adj = defaultdict(set) for u, v, type in roads: adj[u].add(v) reverse_adj[v].add(u) if type == 2: adj[v].add(u) reverse_adj[u].add(v) # Check if all nodes can reach from node 1 reachable_from_1 = bfs(1, adj) if len(reachable_from_1) != n: return \\"NO\\" # Check if all nodes can reach node 1 reachable_to_1 = bfs(1, reverse_adj) if len(reachable_to_1) != n: return \\"NO\\" return \\"YES\\""},{"question":"A company is organizing an event where they plan to distribute gift bags among the participants. Each gift bag can have a certain number of items, and there are multiple types of items available. The company\'s goal is to ensure that each gift bag has exactly the same number of items and that the total number of items used is maximized. You have been provided with an array representing the number of each type of item available. Your task is to determine the maximum possible number of items in each gift bag and the number of such gift bags that can be created. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5), representing the number of types of items. The second line contains `n` integers ai (1 ≤ ai ≤ 10^9), where ai is the number of available items of the i-th type. Output Print two integers `max_items` and `num_bags` separated by a space. `max_items` denotes the maximum number of items that each gift bag can have, and `num_bags` denotes the number of such gift bags. Example Input 5 8 12 5 15 7 Output 6 8 Explanation - The maximum number of items that each gift bag can have is 6. - There can be 8 such gift bags with 6 items each. Explanation: The total items are 8+12+5+15+7=47. The greatest number that divides 47 equally into the maximum possible identical gift bags is 6 with a remainder of 2. Therefore, 47//6=7 is the number of such gift bags plus 1 more bag with the remaining 5 items, making a total of 8 such gift bags.","solution":"def max_items_per_bag(n, items): Returns the maximum number of items each gift bag can have and the number of such gift bags. total_items = sum(items) max_items = total_items // n num_bags = n return max_items, num_bags"},{"question":"Write a program to simulate a parking system. A parking system can have multiple levels, and each level has a certain number of parking spots. Each parking spot can be of different types (motorcycle, compact car, or large car). When a vehicle arrives, the parking system should find an appropriate parking spot and park the vehicle. When a vehicle departs, the parking system should free up the parking spot. The parking system should support the following operations: 1. **initialize**: Initialize the parking system with a given number of levels and parking spots per level. Each parking spot should be associated with a level, type, and an identifier. 2. **park_vehicle**: Given a vehicle type and a license plate number, find an appropriate parking spot and park the vehicle. 3. **unpark_vehicle**: Given a license plate number, unpark the vehicle from its spot. 4. **check_status**: Given a license plate number, return the status of the vehicle (i.e., which level and spot it is parked at). # Vehicle Types: - Motorcycle - Compact Car - Large Car # Parking Spot Types: - Motorcycle Spot - Compact Car Spot - Large Car Spot # Rules: - A motorcycle can park in any spot. - A compact car can park in a compact or large spot. - A large car can only park in a large spot. # Input and Output: - **initialize 3 10** Initialize a parking system with 3 levels and 10 spots per level. For simplicity, assume: - Each level has 6 motorcycle spots, 2 compact spots, and 2 large spots (in that order). - **park_vehicle motorcycle 123** Park a motorcycle with license plate \'123\'. Output the level and spot number where it is parked or \'No available spot\' if no spot is available. - **park_vehicle large 456** Park a large car with license plate \'456\'. Output the level and spot number where it is parked or \'No available spot\' if no spot is available. - **unpark_vehicle 123** Unpark the vehicle with license plate \'123\'. Output \'Vehicle unparked\' or \'Vehicle not found\' if the vehicle is not found. - **check_status 123** Check the status of the vehicle with license plate \'123\'. Output the level and spot number where it is parked or \'Vehicle not found\'. # Example: ```plaintext Input initialize 3 10 park_vehicle motorcycle 123 park_vehicle compact 234 park_vehicle large 345 park_vehicle large 456 unpark_vehicle 234 check_status 123 check_status 234 Output 0 0 0 6 1 8 2 8 Vehicle unparked 0 0 Vehicle not found ```","solution":"class ParkingSpot: def __init__(self, level, spot_number, spot_type): self.level = level self.spot_number = spot_number self.spot_type = spot_type self.license_plate = None def is_available(self): return self.license_plate is None def park(self, license_plate): if self.is_available(): self.license_plate = license_plate return True return False def unpark(self): if not self.is_available(): self.license_plate = None return True return False class ParkingSystem: def __init__(self): self.levels = [] self.vehicles = {} def initialize(self, num_levels, spots_per_level): spot_types = [\'motorcycle\'] * 6 + [\'compact\'] * 2 + [\'large\'] * 2 for l in range(num_levels): level_spots = [] for s in range(spots_per_level): spot_type = spot_types[s % len(spot_types)] level_spots.append(ParkingSpot(l, s, spot_type)) self.levels.append(level_spots) def park_vehicle(self, vehicle_type, license_plate): for level in self.levels: for spot in level: if self.is_spot_suitable(spot, vehicle_type) and spot.park(license_plate): self.vehicles[license_plate] = (spot.level, spot.spot_number) return spot.level, spot.spot_number return \'No available spot\' def unpark_vehicle(self, license_plate): if license_plate in self.vehicles: level, spot_number = self.vehicles.pop(license_plate) spot = self.levels[level][spot_number] spot.unpark() return \'Vehicle unparked\' return \'Vehicle not found\' def check_status(self, license_plate): if license_plate in self.vehicles: return self.vehicles[license_plate] return \'Vehicle not found\' def is_spot_suitable(self, spot, vehicle_type): if vehicle_type == \'motorcycle\': return True elif vehicle_type == \'compact\': return spot.spot_type in [\'compact\', \'large\'] elif vehicle_type == \'large\': return spot.spot_type == \'large\' return False"},{"question":"Alex is an engineer working on optimizing the distribution of water from a reservoir to several irrigation fields. The reservoir has a limited amount of water, and each field requires a specific amount of water to be fully irrigated. Alex needs a program that determines the maximum number of fields that can be fully irrigated given the reservoir’s water capacity and the water requirements of the fields. Given the total amount of water available in the reservoir and the water requirements for each field, the program should compute the maximum number of fields that can be fully irrigated without exceeding the reservoir’s capacity. Input The input consists of multiple test cases. The first line of each test case contains two integers W and F (1 ≤ W ≤ 1000, 1 ≤ F ≤ 100), where W is the total amount of water available in the reservoir and F is the number of fields. The second line contains F integers wi (1 ≤ wi ≤ 100), where wi is the amount of water required to fully irrigate the i-th field. The input is terminated by a line that contains two zeros. Output For each test case, print a single integer representing the maximum number of fields that can be fully irrigated. Print an empty line between two consecutive cases. Example Input 100 5 30 20 50 10 40 200 3 60 80 120 150 4 70 40 20 90 0 0 Output 4 2 3","solution":"def max_fields_irrigated(W, F, water_requirements): Determines the maximum number of fields that can be fully irrigated given the reservoir’s water capacity and the water requirements of the fields. water_requirements.sort() total_water_used = 0 fields_irrigated = 0 for requirement in water_requirements: if total_water_used + requirement <= W: total_water_used += requirement fields_irrigated += 1 else: break return fields_irrigated def process_input(input_data): results = [] for data in input_data: W, F, water_requirements = data if W == 0 and F == 0: break results.append(max_fields_irrigated(W, F, water_requirements)) return results"},{"question":"Given an array of integers and an integer k, your task is to determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] is equal to k. Return true if such elements exist, otherwise return false. Example 1: Input: nums = [2, 7, 11, 15], k = 9 Output: true Explanation: nums[0] + nums[1] = 2 + 7 = 9, which equals k. Example 2: Input: nums = [1, 2, 3, 4], k = 8 Output: false Explanation: There are no two distinct indices such that nums[i] + nums[j] equals 8. Your Task: Complete the function pairSum() which takes an array of integers nums and an integer k as input parameters and returns true if there exists a pair of distinct indices such that nums[i] + nums[j] equals k, otherwise returns false. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10000 -10^6 <= nums[i] <= 10^6 -10^6 <= k <= 10^6","solution":"def pairSum(nums, k): Determines if there are two distinct indices i and j in the array nums such that nums[i] + nums[j] equals k. Args: nums: list of int k: int Returns: bool: True if such indices exist, False otherwise. seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Write a function that determines if a string is a valid password based on a set of rules. The input to the function will be a single string. The function should return `True` if the string meets all the conditions below, and `False` otherwise. Conditions: 1. The string must be at least 8 characters long. 2. The string must contain at least one uppercase letter. 3. The string must contain at least one lowercase letter. 4. The string must contain at least one numeral. 5. The string must contain at least one special character (e.g., `!@#%^&*()`). The function signature should be `def is_valid_password(password: str) -> bool:`","solution":"import re def is_valid_password(password: str) -> bool: Determines if the given string is a valid password based on predefined rules. - At least 8 characters long. - Contains at least one uppercase letter. - Contains at least one lowercase letter. - Contains at least one numeral. - Contains at least one special character. Args: password (str): The password string to be validated. Returns: bool: True if the password meets all criteria, False otherwise. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*(),.?\\":{}|<>]\', password): return False return True"},{"question":"A robotic arm in a manufacturing plant needs to pick up and assemble items in a precise sequence. The arm can perform three types of actions: move left, move right, and pick up an item. Each move action shifts the arm by one position, and each pick up action picks the item at the current position of the arm. Initially, the arm is at position 0. You are given a string consisting of the characters \'L\' (left), \'R\' (right), and \'P\' (pick). Each character represents one action that the arm should perform. After executing all the actions, you need to determine the final position of the arm and the number of items picked. Input The first line contains a single string S (1 ≤ |S| ≤ 100000), representing the sequence of actions. Output Print two integers, the final position of the arm and the total number of items picked, separated by a space. Example Input RLRPPPLR Output 1 3 Explanation The sequence of actions is as follows: Start at position 0. Move right to position 1. Move left to position 0. Move right to position 1. Pick an item at position 1. Pick another item at position 1. Pick yet another item at position 1. Move left to position 0. Move right to position 1. The final position of the arm is 1, and the total number of items picked is 3.","solution":"def robotic_arm(sequence): Returns the final position of the arm and the total number of items picked. Args: sequence (str): The sequence of actions (\'L\', \'R\', \'P\') for the robotic arm. Returns: tuple: The final position of the arm and the total number of items picked. position = 0 items_picked = 0 for action in sequence: if action == \'L\': position -= 1 elif action == \'R\': position += 1 elif action == \'P\': items_picked += 1 return position, items_picked"},{"question":"You are organizing a hacking marathon event \\"HackCraft\\" where participants can form teams to solve various tasks. Throughout the event, you want to keep track of the scores of all the teams and determine the highest-scoring team at any given point in time. Each team can have multiple members, and the score of a team is the sum of the scores of its members. You need to implement a system that supports the following operations: 1. \\"add\\" operation: Add a member with a specific score to a team. 2. \\"score\\" operation: Update the score of a specific member of a team. 3. \\"max_score\\" operation: Get the team with the highest score. Input: - The first line of input contains an integer q, the number of operations. - The following q lines describe the operations in one of the following formats: 1. \\"add team_name member_name score\\" - Add a member with the given score to the specified team. 2. \\"score team_name member_name new_score\\" - Update the score of the specified member in the given team to the new score. 3. \\"max_score\\" - Print the name of the team with the highest score. Output: - For each \\"max_score\\" operation, print the name of the team with the highest score. Constraints: - 1 ≤ q ≤ 10^5 - The length of team_name and member_name is at most 10. - The initial and new score is an integer between 0 and 10^6. SAMPLE INPUT: 8 add TeamA Alice 50 add TeamA Bob 30 add TeamB Charlie 70 max_score score TeamA Alice 100 max_score add TeamC Dave 150 max_score SAMPLE OUTPUT: TeamB TeamA TeamC Note: - If multiple teams have the same highest score, print the team which comes lexicographically first. - A member that is added to a team will not be part of any other team in the future. - It is guaranteed that every \\"score\\" operation will have a valid team_name and member_name.","solution":"class HackCraft: def __init__(self): self.teams = {} self.members = {} def add(self, team_name, member_name, score): if team_name not in self.teams: self.teams[team_name] = 0 self.teams[team_name] += score self.members[member_name] = (team_name, score) def score(self, team_name, member_name, new_score): old_score = self.members[member_name][1] self.teams[team_name] += new_score - old_score self.members[member_name] = (team_name, new_score) def max_score(self): return max(sorted(self.teams), key=lambda k: self.teams[k]) def process_operations(operations): hc = HackCraft() result = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": hc.add(parts[1], parts[2], int(parts[3])) elif parts[0] == \\"score\\": hc.score(parts[1], parts[2], int(parts[3])) elif parts[0] == \\"max_score\\": result.append(hc.max_score()) return result"},{"question":"Imagine you are working on a project management software. One of the features of the software is to update the progress of multiple tasks. Each task is assigned a unique task ID and has a progress value that initially starts at 0. The software provides two types of operations to update the progress values: 1. Increase the progress of a specific task by a certain value. 2. Query the current progress value of a specific task. Your task is to implement a program that handles these operations efficiently. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of tasks. The second line contains an integer m (1 ≤ m ≤ 10^5), the number of operations. The next m lines describe the operations in the following format: - \\"increase x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 100) - Increases the progress of task x by y. - \\"query x\\" (1 ≤ x ≤ n) - Returns the current progress of task x. -----Output----- For each \\"query x\\" operation, output the current progress value of task x on a new line. -----Example----- Input 5 6 increase 1 10 increase 2 5 query 1 increase 1 3 query 1 query 2 Output 10 13 5 -----Note----- - In the example, there are 5 tasks and 6 operations. - The current progress values are updated as specified by the \\"increase\\" operations. - For each \\"query\\" operation, the current progress value of the specified task is outputted.","solution":"def manage_tasks(n, m, operations): Manage the tasks based on given operations. :param n: number of tasks :param m: number of operations :param operations: list of operations to perform :return: list of results from each query operation # Initialize progress dictionary progress = {i: 0 for i in range(1, n + 1)} results = [] for operation in operations: parts = operation.split() command = parts[0] task_id = int(parts[1]) if command == \\"increase\\": amount = int(parts[2]) progress[task_id] += amount elif command == \\"query\\": results.append(progress[task_id]) return results"},{"question":"In a park, there are multiple benches arranged in a straight line, each of which can comfortably accommodate up to two people. The park management wants to maximize the social distancing between any two people while ensuring that no bench is left empty. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^5) representing the number of benches in the park. -----Output----- Output a single number, the minimum distance between any two people if the park is completely filled. -----Examples----- Input 1 Output 0 Input 2 Output 0 Input 3 Output 1","solution":"def min_distance(n): Returns the minimum distance between any two people when all benches are filled, each bench can accommodate up to two people. if n == 1 or n == 2: return 0 else: return 1"},{"question":"In a certain kingdom, there is a curious tradition involving magic stones. Each citizen has a collection of n magic stones, each stone having a specific magical power level represented by a non-negative integer. The king has recently decided to hold a contest to see whose total magical power can reach the highest possible value. Each citizen is allowed to combine their magic stones to enhance their total magical power. Combining two stones with power levels a and b creates a new stone with power level a + b. Note that each citizen can combine any two stones any number of times, as long as they have at least two stones left. The contest rules state that no more than m combinations can be made. Your task is to determine the highest possible total magical power that can be achieved with the given stones under the contest rules. -----Input----- The first line of input contains two integers n and m (2 ≤ n ≤ 1000, 0 ≤ m ≤ 100,000) — the number of magic stones and the maximum number of combinations allowed. The second line contains n integers a_{i} (0 ≤ a_{i} ≤ 10^9) — the magical power levels of the stones. -----Output----- Output one integer — the highest possible total magical power that can be achieved. -----Examples----- Input 4 2 1 2 3 4 Output 10 Input 3 5 100 200 300 Output 600 -----Note----- In the first example, the optimal strategy is to combine the stones with power levels 1 and 4 to make a new stone with power level 5, and then combine the stones with power levels 2 and 3 to make a new stone with power level 5. The total magical power is 5 + 5 = 10. In the second example, since m >= n - 1, you can just keep combining all stones in sequence regardless of the order, ending up with a single stone with the total power of 600.","solution":"def max_magic_power(n, m, power_levels): Returns the highest possible total magical power that can be achieved with the given stones under the contest rules. if n == 0: return 0 return sum(power_levels)"},{"question":"In a digital library system, users can borrow books. To ensure availability, each book is categorized with a unique ID, and the library records the number of copies available for each book. A user can request multiple books in one go, and it’s the system\'s job to fulfill the requests if possible. Your task is to write a function that processes multiple user requests and checks if the required books can be lent out. Input format: - The first line contains an integer \'t\', denoting the number of test cases. Each test case comprises three lines. - The first line of each test case contains an integer \'n\', the number of different book types available. - The second line contains \'n\' space-separated integers where the ith integer denotes the number of copies available for the ith book. - The third line contains \'n\' space-separated integers where the ith integer denotes the number of copies requested for the ith book. Output format: For each test case, output \\"Fulfills\\" if the request can be satisfied with the available books, otherwise output \\"Not Fulfills\\". Constraints: - 1 ≤ t ≤ 1000 - 1 ≤ n ≤ 100 - 0 ≤ number of copies available/requested ≤ 1000 SAMPLE INPUT 2 3 5 3 10 2 1 7 2 2 2 3 3 1 SAMPLE OUTPUT Fulfills Not Fulfills Explanation: In the first test case, the request is for 2, 1, and 7 copies of the books respectively. The library has 5, 3, and 10 copies available, which is sufficient to fulfill the request. In the second test case, the request is for 3 and 1 copies of the books respectively, but the library only has 2 copies of the first book, hence it cannot fulfill the request.","solution":"def can_fulfill_requests(t, test_cases): results = [] for case in test_cases: n = case[0] available_books = case[1] requested_books = case[2] fulfill = True for i in range(n): if requested_books[i] > available_books[i]: fulfill = False break if fulfill: results.append(\\"Fulfills\\") else: results.append(\\"Not Fulfills\\") return results"},{"question":"Alice and Bob are avid gamers and play a game where they collect points by completing various levels. They have to complete M levels in total, and each level gives a certain number of points. Alice and Bob want to divide the levels among themselves such that their total points are as balanced as possible. We need to determine the minimum possible difference between the points collected by Alice and Bob after completing all levels. Input - The first line contains an integer M, the number of levels. - The second line contains M space-separated integers, P1, P2, ..., PM, where Pi denotes the points collected by completing the i-th level. Output - Output a single integer, the minimum possible difference between the points collected by Alice and Bob. Constraints - 1 ≤ M ≤ 500 - 1 ≤ Pi ≤ 1000 SAMPLE INPUT 4 1 4 2 7 SAMPLE OUTPUT 0 Explanation Alice and Bob can divide the levels in the following way to balance the points: Alice: {1, 7} – Total points = 8 Bob: {4, 2} – Total points = 6 The difference is |8 - 6| = 2, but a better division can be: Alice: {1, 4, 2} – Total points = 7 Bob: {7} – Total points = 7 The difference is |7 - 7| = 0, which is the minimum possible difference.","solution":"def minimum_point_difference(M, points): total_points = sum(points) half_points = total_points // 2 dp = [0] * (half_points + 1) for point in points: for j in range(half_points, point - 1, -1): dp[j] = max(dp[j], dp[j - point] + point) best_distribution = dp[half_points] other_distribution = total_points - best_distribution return abs(best_distribution - other_distribution) # Example function to call the above method with appropriate input def min_difference(M, points): return minimum_point_difference(M, points)"},{"question":"Euclid, the mathematician, has been granted a set of n numbers (a_1, a_2, a_3, ..., a_n) and wants to perform a very special operation on the set. The operation consists of choosing any two distinct numbers from the set, say x and y, removing them from the set, and adding their sum back into the set. Euclid will repeat this operation until he is left with exactly one number. You need to find the maximum possible value of the remaining single number, modulo 10^9+7. Input: The first line contains an integer n (1 ≤ n ≤ 100,000) – the number of elements in the set. The second line contains n integers (1 ≤ a_i ≤ 10^9) – the elements of the set. Output: Output a single integer – the maximum possible value of the remaining number (modulo 10^9+7). Example: Input: 3 1 2 3 Output: 9 Explanation: Initially, the array is [1, 2, 3]. 1. Choose 2 and 3 to get [1, 5]. 2. Choose 1 and 5 to get [6]. The maximum value of the remaining number is 6 % (10^9+7) = 6.","solution":"def max_remaining_number(n, nums): Compute the maximum possible value of the remaining number. Args: n (int): The number of elements in the list. nums (list of int): The list of integers. Returns: int: The remaining number modulo 10^9 + 7. MOD = 10**9 + 7 return sum(nums) % MOD"},{"question":"You are given two strings, S and T. Determine the minimum number of operations required to transform string S into string T. The only operations allowed are: 1. Insert a character. 2. Remove a character. 3. Replace a character. Output the minimum number of operations needed. # Input - First line contains string S (1 ≤ |S| ≤ 100) — the original string. - Second line contains string T (1 ≤ |T| ≤ 100) — the target string. # Output Print a single integer representing the minimum number of operations required to transform string S into string T. # Examples Example 1 Input ``` kitten sitting ``` Output ``` 3 ``` Example 2 Input ``` abcdef azced ``` Output ``` 3 ``` # Explanation Example 1 - kitten -> sitten (replace \'k\' with \'s\') - sitten -> sittin (replace \'e\' with \'i\') - sittin -> sitting (add \'g\') Example 2 - abcdef -> azcdef (replace \'b\' with \'z\') - azcdef -> azcef (remove \'d\') - azcef -> azced (replace \'f\' with \'d\')","solution":"def min_operations_to_transform(S, T): Returns the minimum number of operations required to transform string S into string T. m, n = len(S), len(T) # Initialize dp array where dp[i][j] represents the minimum number of operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the base cases for i in range(m + 1): dp[i][0] = i # all deletions for j in range(n + 1): dp[0][j] = j # all insertions # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) + 1 return dp[m][n]"},{"question":"Alice is organizing a string competition at her school. She has two strings, string `s` and string `t`, each consisting of lowercase English letters. Her task is to determine if string `t` is a subsequence of string `s`. A string `t` is a subsequence of string `s` if it can be derived from `s` by deleting some (possibly none) of the characters from `s` without changing the order of the remaining characters. Given the strings `s` and `t`, write a function to check and return whether `t` is a subsequence of `s`. Input The first line contains the string `s` (1 ≤ |s| ≤ 105) consisting of lowercase English letters. The second line contains the string `t` (1 ≤ |t| ≤ 105) consisting of lowercase English letters. Output Output \\"Yes\\" (without quotes) if `t` is a subsequence of `s`, otherwise output \\"No\\". Examples Input abcde ace Output Yes Input abc acb Output No Note In the first sample, `t` = \\"ace\\" is a subsequence of `s` = \\"abcde\\" because we can remove characters \'b\' and \'d\' from `s` to get `t`. In the second sample, `t` = \\"acb\\" is not a subsequence of `s` = \\"abc\\" because although `a` and `c` are in the correct order, `b` does not appear after `a` and `c`.","solution":"def is_subsequence(s, t): Check if t is a subsequence of s. :param s: String s :param t: String t :return: \'Yes\' if t is a subsequence of s, otherwise \'No\' t_index = 0 t_len = len(t) for char in s: if t_index < t_len and char == t[t_index]: t_index += 1 return \\"Yes\\" if t_index == t_len else \\"No\\""},{"question":"Tom and Jerry are playing a game involving a series of boxes lined up in a row. Each box contains a certain number of candies. Tom and Jerry take turns picking any box from the ends of the row (either the leftmost or the rightmost) and eating all of its candies. Tom always picks first. Their goal is to maximize the number of candies they eat, but Jerry, being the clever one, always tries to minimize the number of candies Tom gets. Your task is to determine the maximum number of candies Tom can get if both players play optimally. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of boxes. The second line contains n integers, where the i-th integer represents the number of candies in the i-th box. Each integer is between 1 and 1000, inclusive. -----Output----- Print the maximum number of candies Tom can get. -----Examples----- Input 4 1 2 9 4 Output 10 Input 3 4 5 1 Output 5","solution":"def max_candies_tom_gets(candies): n = len(candies) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = candies[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 take_left = candies[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0) take_right = candies[j] + min(dp[i + 1][j - 1] if i + 1 <= j - 1 else 0, dp[i][j - 2] if i <= j - 2 else 0) dp[i][j] = max(take_left, take_right) return dp[0][n - 1]"},{"question":"A farmer has a field of size n x m, which is represented as a grid. Each cell in the grid can either be empty or have an obstacle. The farmer starts from the top-left corner of the field and wants to reach the bottom-right corner. The farmer can only move either right or down at any point in time. Your task is to determine if the farmer can reach the bottom-right corner of the field from the top-left corner, navigating only through empty cells. For each test case, determine if there exists a path or not. ------ Input Format ------ - The first line contains T, the number of test cases. The description of each test case follows. - The first line of each test case contains two integers n and m, representing the number of rows and columns of the grid respectively. - The next n lines each contain m integers where each integer is either 0 (empty cell) or 1 (obstacle). ------ Output Format ------ For each test case, print \\"Yes\\" if there is a path from the top-left corner to the bottom-right corner, and \\"No\\" otherwise. ------ Constraints ------ - 1 ≤ T ≤ 10 - 1 ≤ n, m ≤ 100 - Each cell value is either 0 (empty) or 1 (obstacle) ------ Sample Input 1 ------ 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 1 1 0 0 0 0 ------ Sample Output 1 ------ Yes No ------ Explanation 1 ------ - In the first test case, the farmer can take the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), which avoids all obstacles. - In the second test case, the farmer is blocked by obstacles and cannot reach the bottom-right corner from the top-left corner.","solution":"def can_reach_bottom_right(n, m, grid): Determines if there\'s a path from the top-left to the bottom-right in a grid. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return \\"No\\" from collections import deque # Directions (down, right) directions = [(1, 0), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\" def process_test_cases(T, test_cases): results = [] for n, m, grid in test_cases: result = can_reach_bottom_right(n, m, grid) results.append(result) return results"},{"question":"A garden has n flowers arranged in a line. Each flower has a happiness value associated with it, which can be a positive or a negative integer. You are tasked with watering exactly one continuous segment of these flowers to maximize the total happiness. Essentially, you need to find a subarray of the given array, the sum of which is maximized. Input The first input line contains an integer n (1 ≤ n ≤ 100000) — the number of flowers in the garden. The second line contains n integers h1, h2, ..., hn (-1000 ≤ hi ≤ 1000) — the happiness values of the flowers. Output Print a single integer — the maximum possible total happiness of any segment. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 -1 -2 -3 -4 -5 Output -1 Input 6 3 -2 5 -1 4 -3 Output 9 Note In the first sample, the optimal subarray is [4, -1, 2, 1], which has the maximum sum of 6. In the second sample, the optimal subarray is [-1], since all the numbers are negative. In the third sample, the optimal subarray is [3, -2, 5, -1, 4], which has the maximum sum of 9.","solution":"def max_happiness(n, happiness_values): Returns the maximum possible total happiness of any continuous segment of flowers\' happiness values. Parameters: n (int): Number of flowers. happiness_values (list of int): Happiness values of the flowers. Returns: int: The maximum possible total happiness of any segment. max_sum = current_sum = happiness_values[0] for i in range(1, n): current_sum = max(happiness_values[i], current_sum + happiness_values[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of integers representing a sequence of heights for a set of buildings. You need to determine the maximum area of a rectangular region that can be formed using any contiguous subset of these buildings. The height of the rectangle is defined by the shortest building in the subset, and the width is defined by the number of buildings in the subset. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 1 leq height of each building leq 10^6 -----Input----- Input is given from Standard Input in the following format: N h_1 h_2 cdots h_N -----Output----- Print the maximum rectangular area. -----Sample Input----- 6 2 1 5 6 2 3 -----Sample Output----- 10 In this example, the maximum rectangular area is obtained from the subset [5, 6], with height 5 and width 2, resulting in an area of 10.","solution":"def max_rectangle_area(heights): This function takes a list of integers representing building heights and returns the maximum area of a rectangle formed by any contiguous subset of buildings. # Initialize maximum area max_area = 0 # Create a stack to store indices of the buildings stack = [] # Traverse buildings in the height array for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) # Clean up any remaining indices in the stack while stack: height = heights[stack.pop()] width = len(heights) if not stack else len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"You are tasked with helping a college graduation ceremony\'s organizing committee in seating the students in a specific way. The committee wants to arrange the students in a row based on their heights, but with a twist. They want the arrangement to be such that no student is exactly between two students of the same height. In other words, for every student X positioned between students A and B, X\'s height should be different from both A and B. Given that, you need to determine whether it\'s possible to arrange the students in such a manner, and if possible, provide the arrangement. Input: First line of input contains an integer T (number of test cases). Each test case contains two lines. First line contains N, the number of students. Second line contains N space-separated integers, representing the heights of the students. Output: For each test case, print \\"YES\\" if it\'s possible to arrange the heights in the required manner, otherwise print \\"NO\\". If possible, also output one such arrangement on the same line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Height_i ≤ 1000 SAMPLE INPUT 2 3 1 2 2 4 1 2 3 4 SAMPLE OUTPUT NO YES 1 2 3 4","solution":"def can_arrange_students(T, test_cases): results = [] for t in range(T): N, heights = test_cases[t] sorted_heights = sorted(heights) possible = True arrangement = [] for i in range(1, N): if sorted_heights[i] == sorted_heights[i-1]: possible = False break if possible: results.append((\\"YES\\", sorted_heights)) else: results.append((\\"NO\\", None)) return results"},{"question":"You are given a list of people\'s names. Your task is to determine if there is any name that appears more than once in the list and print all such duplicates. If there are no duplicates, output \\"No duplicates\\". Constraints - The number of names in the list (N) will be between 1 and 1000. - Each name will be a non-empty string consisting of lowercase alphabetical characters only, with length between 1 and 100. Input The input is given from Standard Input in the following format: N name_1 name_2 ... name_N Output Output the names that appear more than once, each on a new line, in the order they first appear in the input. If there are no duplicates, output \\"No duplicates\\". Examples Input 5 alice bob alice eve bob Output alice bob Input 3 charlie david eve Output No duplicates","solution":"def find_duplicates(names): Given a list of names, this function returns the names that appear more than once, each on a new line, in the order they first appear. If there are no duplicates, it returns \\"No duplicates\\". name_count = {} duplicates = [] for name in names: if name in name_count: name_count[name] += 1 else: name_count[name] = 1 for name in names: if name_count[name] > 1 and name not in duplicates: duplicates.append(name) if duplicates: return \'n\'.join(duplicates) else: return \\"No duplicates\\" # Example usage: # n = int(input().strip()) # names = [input().strip() for _ in range(n)] # print(find_duplicates(names))"},{"question":"You are given an array `nums` consisting of integers and an integer `k`. You need to determine if there are two distinct indices `i` and `j` in the array such that `nums[i] = nums[j]` and the absolute difference between `i` and `j` is at most `k`. -----Constraints----- - 1 leq nums.length leq 10^5 - -10^9 leq nums[i] leq 10^9 - 1 leq k leq 10^5 -----Input----- Input is given from Standard Input in the following format: nums k `nums` is a list of space-separated integers. -----Output----- Print \\"True\\" if such indices exist; otherwise, print \\"False\\". -----Sample Input----- 1 2 3 1 3 -----Sample Output----- True In the given example, the integers `1` at indices `0` and `3` are the same and the absolute difference between the indices `0` and `3` is `3`, which is <= `k`. Another example: -----Sample Input----- 1 2 3 1 2 3 2 -----Sample Output----- False In this example, although the integers `1`, `2`, and `3` appear more than once, none of these elements satisfy the distance condition being less than or equal to `2` with their duplicate counterparts.","solution":"def contains_nearby_duplicate(nums, k): Determines if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Parameters: nums (list): List of integers. k (int): The maximum allowed index difference. Returns: bool: True if such indices exist, False otherwise. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Alice is working on a project where she needs to analyze the performance of various algorithms. She has performance data from multiple test runs in the form of an array `data[]` of N integers, where each integer represents the duration (in milliseconds) of a test run. Alice wants to find the longest contiguous subarray within this array where the sum of its elements is less than or equal to a specified value S. Implement a function `longestSubarray()` that takes integers N (size of the array), S (the maximum allowable sum), and an array data[] (the performance data) as input parameters, and returns the length of the longest contiguous subarray with sum less than or equal to S. Example 1: Input: N = 5, S = 10 data[] = {1, 2, 3, 4, 5} Output: 4 Explanation: The longest subarray with sum ≤ 10 is {1, 2, 3, 4} which has length 4. Example 2: Input: N = 3, S = 5 data[] = {2, 2, 2} Output: 2 Explanation: The longest subarray with sum ≤ 5 is {2, 2} which has length 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestSubarray()` which takes 2 Integers N, and S and also an array data[] of N integers as input and returns the length of the longest subarray with sum less than or equal to S. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ S, data[i] ≤ 10^9","solution":"def longestSubarray(N, S, data): max_len = 0 current_sum = 0 start = 0 for end in range(N): current_sum += data[end] while current_sum > S: current_sum -= data[start] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Ada is organizing a game night for her friends and wants to prepare a puzzle to entertain them. She has a rectangular grid where each cell can either contain a `1` (indicating a filled cell) or a `0` (indicating an empty cell). Ada\'s challenge is to find the largest square subgrid that contains only `1`s. Can you help Ada write a program to find the area of the largest square subgrid filled with `1`s? -----Input----- The input consists of several lines. The first line contains two integers, n and m (1 leq n, m leq 500), the number of rows and columns in the grid, respectively. Each of the following n lines contains m integers (0 or 1) separated by spaces, representing the grid. -----Output----- Output a single integer, the area of the largest square subgrid filled with `1`s. -----Examples----- Sample Input: 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Sample Output: 4 Sample Input: 3 3 1 1 1 1 1 1 1 1 1 Sample Output: 9","solution":"def largest_square_area(n, m, grid): if n == 0 or m == 0: return 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"You are given an undirected graph with n nodes, where each node is labeled from 1 to n. You are to find out if there exists a path from node s to node t such that the total weight of the path does not exceed W. Each edge in the graph has a weight, and there can be multiple edges between two nodes (each with possibly different weights). -----Input----- The first line contains three integers n, m, and W (1 le n le 100, 0 le m le 200, 0 le W le 10^9) — the number of nodes, the number of edges, and the maximum total weight of the path you are looking for. The second line contains two integers s and t (1 le s, t le n) — the start and end nodes. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) — indicating an edge between node u and node v with weight w. -----Output----- Print \\"YES\\" if there exists such a path from node s` to node t with total weight not exceeding W, and \\"NO\\" otherwise. -----Examples----- Input 4 4 10 1 4 1 2 3 2 3 4 3 4 2 1 3 1 Output YES Input 3 3 2 1 3 1 2 2 2 3 2 1 3 5 Output NO Input 2 0 1 1 2 Output NO","solution":"import heapq def is_path_within_weight(n, m, W, s, t, edges): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Use Dijkstra\'s algorithm to find the shortest path from s to t pq = [(0, s)] # (current weight, current node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 while pq: current_weight, u = heapq.heappop(pq) if u == t: break for v, weight in graph[u]: distance = current_weight + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return \\"YES\\" if distances[t] <= W else \\"NO\\""},{"question":"Given an array of integers, find the minimum number of operations required to make all elements of the array equal. In one operation, you can select any element of the array and increment or decrement it by 1. -----Input----- Each test contains multiple input cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2,dots,a_n (1leq a_ileq10^9) — elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer — the minimum number of operations required to make all elements of the array equal. -----Examples----- Input 2 5 3 7 1 9 4 3 10 15 20 Output 12 10 -----Note----- In the first test case, the target value we can choose is 4 (the median of the array). To equalize the array to this value, we need to perform 3-4 + 7-4 + 4-1 + 9-4 + 4-4 = 1 + 3 + 3 + 5 + 0 = 12 operations. Hence, 12 operations are required to make all elements equal. In the second test case, the target value we can choose is 15 (the median of the array). To equalize the array to this value, we need to perform 10-15 + 15-15 + 20-15 = 5 + 0 + 5 = 10 operations. Hence, 10 operations are required to make all elements equal.","solution":"def min_operations_to_equalize(t, test_cases): This function calculates the minimum number of operations required to make all elements of each array equal. Parameters: - t: int, number of test cases - test_cases: list of tuples, each containing an integer n (size of the array) and a list of integers (the array itself) Returns: - list of integers, each representing the minimum number of operations for the corresponding test case results = [] for n, arr in test_cases: arr.sort() # choose the median of the sorted array as the target median = arr[n // 2] # calculate the total number of operations to make all elements equal to the median operations = sum(abs(x - median) for x in arr) results.append(operations) return results"},{"question":"You are given an array of integers and a target integer `k`. Write a function `findPairs(arr, k)` that returns the number of unique pairs `(a, b)` in the array that add up to the target integer `k`. Examples: ``` arr = [1, 2, 3, 4, 3] k = 6 findPairs(arr, k) -> 2 because there are two pairs (2, 4) and (3, 3) arr = [1, 1, 1, 1] k = 2 findPairs(arr, k) -> 1 because there is only one unique pair (1, 1) arr = [1, 5, 7, -1] k = 6 findPairs(arr, k) -> 2 because there are two pairs (1, 5) and (7, -1) ``` Notes: - The function should return an integer indicating the count of unique pairs. - Each element in the array can only be used once for each pair. - Elements in the array can be negative. - The order of the pairs in the output does not matter. - Assume the input array and target integer are always provided and valid.","solution":"def findPairs(arr, k): This function returns the number of unique pairs (a, b) in the array that add up to the target integer k. seen = set() pairs = set() # to store unique pairs for num in arr: complement = k - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Given a sequence of characters, a subsequence is defined as converting it to a palindrome by removing zero or more characters without rearranging the remaining characters. Given a string ( s ), compute the length of the longest palindromic subsequence in ( s ). **Input** A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of asterisks `\'*\'`. Each dataset consists of a single string ( s ) on one line. The number of datasets does not exceed 500. Each string ( s ) has a length between 1 and 1000 characters and comprises only lowercase English letters. **Output** For each input dataset, output the length of the longest palindromic subsequence in the given string ( s ). **Example** Input ``` bbbab abcde racecar a abcdefedcba * ``` Output ``` 4 1 7 1 11 ```","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] def process_datasets(input_lines): Processes multiple datasets to find longest palindromic subsequences. The input is a list of strings, with each string being a dataset. The list ends with an \'*\' string to signify the end of input. results = [] for line in input_lines: if line == \'*\': break results.append(longest_palindromic_subsequence(line)) return results"},{"question":"You are given an integer array `nums` of size `n` and should process `q` queries. Each query can either be an update operation or range sum query, as detailed below: - Update Query: Update the value of an element in the array. - Range Sum Query: Compute the sum of elements within a specific interval in the array. Specifically, the queries are of two types: * `1 i x`: Update the element at index `i` to `x`. * `2 L R`: Calculate the sum of elements from index `L` to `R` (inclusive). Write a program to handle such queries. # Input: 1. First line contains two space-separated integers, `n` and `q` (1 ≤ n, q ≤ 100000). 2. Second line contains `n` space-separated integers representing the array `nums`. 3. Each of the next `q` lines describe a query of either type: - `1 i x` (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9) - `2 L R` (1 ≤ L ≤ R ≤ n) # Output: For each range sum query, output the sum of elements in the specified range. # Examples: Input: ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 2 4 ``` Output: ``` 6 16 ``` # Explanation: - For the first query `2 1 3`, the sum of elements from index 1 to 3 is `1 + 2 + 3 = 6`. - For the second query `1 3 10`, the array is updated to `[1, 2, 10, 4, 5]`. - For the third query `2 2 4`, the sum of elements from index 2 to 4 is `2 + 10 + 4 = 16`.","solution":"class SegmentTree: def __init__(self, nums): self.n = len(nums) self.tree = [0] * (2 * self.n) self.build(nums) def build(self, nums): for i in range(self.n): self.tree[self.n + i] = nums[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, idx, value): pos = idx + self.n self.tree[pos] = value while pos > 1: pos = pos // 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): result = 0 left += self.n right += self.n while left <= right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 0: result += self.tree[right] right -= 1 left //= 2 right //= 2 return result def process_queries(n, q, nums, queries): seg_tree = SegmentTree(nums) results = [] for query in queries: if query[0] == 1: _, i, x = query seg_tree.update(i - 1, x) elif query[0] == 2: _, L, R = query results.append(seg_tree.range_sum(L - 1, R - 1)) return results"},{"question":"Student Grades Management A university professor needs to manage students\' grades. As a developer, you need to implement a program that can store grades for several students and perform various operations on the data such as calculating the average grade, highest grade, and lowest grade. Given a list of students with their respective grades, implement a program that can handle the following queries: 1. \'AVG\': Calculate and return the average grade of all students. 2. \'MAX\': Return the highest grade among all students. 3. \'MIN\': Return the lowest grade among all students. Each query should output the corresponding result. You can safely assume that there will be at least one student grade in the given list. Input Format - The first line contains an integer n, the number of students. - Each of the next n lines contains a student\'s name (a string without spaces) followed by their grade (an integer between 0 and 100). - The next line contains an integer q, the number of queries. - Each of the next q lines contains a query, which can be either \'AVG\', \'MAX\', or \'MIN\'. Constraints 1 <= n <= 105 0 <= grade <= 100 1 <= q <= 103 Output Format For each query, output the result on a new line: - For \'AVG\', print the average grade rounded to two decimal places. - For \'MAX\', print the highest grade. - For \'MIN\', print the lowest grade. Sample Input 5 Alice 78 Bob 82 Charlie 91 David 76 Eve 88 3 AVG MAX MIN Sample Output 83.00 91 76 Explanation - The average grade is (78 + 82 + 91 + 76 + 88) / 5 = 83.00 - The highest grade among students is 91. - The lowest grade among students is 76.","solution":"def process_grades(n, student_data, q, queries): Processes student grades and handles AVG, MAX, and MIN queries. Parameters: n (int): Number of students student_data (list of tuples): A list where each tuple contains (name, grade) q (int): Number of queries queries (list of str): List of queries each being \'AVG\', \'MAX\', or \'MIN\' Returns: list: Results of the queries in the order they were provided grades = [grade for _, grade in student_data] results = [] for query in queries: if query == \'AVG\': avg_grade = sum(grades) / n results.append(f\\"{avg_grade:.2f}\\") elif query == \'MAX\': max_grade = max(grades) results.append(str(max_grade)) elif query == \'MIN\': min_grade = min(grades) results.append(str(min_grade)) return results"},{"question":"Determine if a given number is a palindrome. If the number N is a palindrome, return ```\\"Palindrome\\"``` else ```return \\"Not Palindrome\\"```. HINT: Consider both efficiency and input size, as N can be very large. Input 1 ≤ N ≤ 10^(100) Example is_palindrome(121) # should return Palindrome is_palindrome(12321) # should return Palindrome is_palindrome(1234) # should return Not Palindrome","solution":"def is_palindrome(N): Determines whether the given number N is a palindrome. Returns \\"Palindrome\\" if it is, otherwise returns \\"Not Palindrome\\". str_N = str(N) if str_N == str_N[::-1]: return \\"Palindrome\\" else: return \\"Not Palindrome\\""},{"question":"You are given a rectangular grid with dimensions n x m. There are some blocked cells in the grid which can be neither visited nor traversed through. You are at the top-left corner of the grid (1, 1) and you want to reach the bottom-right corner of the grid (n, m). You can move either down or right in each step. Write a function to determine the number of different paths you can take to reach your destination. Note: The top-left corner and the bottom-right corner will never be blocked. Constraints * 1≦n, m≦1000 * The number of blocked cells will not exceed 1000. Input The input is given from Standard Input in the following format: n m k blocked_cells where: - n, m: integers denoting the dimensions of the grid. - k: an integer denoting the number of blocked cells. - blocked_cells: a list of k pairs of integers, each pair representing the row and column of a blocked cell. Output Print the number of different paths to reach the bottom-right corner from the top-left corner. Examples Input 3 3 1 2 2 Output 2 Input 3 3 0 Output 6","solution":"def num_paths(n, m, k, blocked_cells): Determine the number of ways to reach the bottom-right corner from the top-left corner in an n x m grid with some blocked cells. # Initialize a grid with zeros grid = [[0] * m for _ in range(n)] # Mark blocked cells in the grid for r, c in blocked_cells: grid[r-1][c-1] = -1 # Start position if grid[0][0] == -1: return 0 grid[0][0] = 1 # Fill the grid with number of ways to reach each cell for i in range(n): for j in range(m): if grid[i][j] == -1: continue # skip blocked cells if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[n-1][m-1] # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n, m, k = map(int, data[:3]) blocked_cells = [] for i in range(3, 3 + 2*k, 2): blocked_cells.append((int(data[i]), int(data[i+1]))) print(num_paths(n, m, k, blocked_cells))"},{"question":"Alya loves sequences of integers. Today, she is playing with two sequences, A and B, each of n integers. She wants to determine whether she can rearrange the elements of sequence B so that, for every i from 1 to n, the sum of A[i] and B\'[i] (where B\' is the rearranged sequence B) equals a given integer k. If it is possible, she wants to know one such rearrangement of sequence B. Help Alya to find such a permutation of B, or if it\'s not possible, tell her so. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000). The second line contains n integers A[i] (1 ≤ A[i] ≤ 1000). The third line contains n integers B[i] (1 ≤ B[i] ≤ 1000). Output If it is possible to rearrange B so that the sum of corresponding elements of A and B is k for every i, then output \\"YES\\" and print the rearranged sequence B. Otherwise, print \\"NO\\". Examples Input 3 5 1 2 3 4 3 2 Output YES 4 3 2 Input 3 6 1 2 3 4 3 2 Output NO Note In the first example, the rearrangement {B\'[1], B\'[2], B\'[3]} = {4, 3, 2} satisfies the condition because: 1 + 4 = 5 2 + 3 = 5 3 + 2 = 5 In the second example, no rearrangement can satisfy the condition because the highest possible sum using elements of A and B is 1+4, 2+3, 3+2, which are less than 6.","solution":"def can_rearrange_to_sum_k(n, k, A, B): Determines if we can rearrange sequence B so that for every i, A[i] + B\'[i] == k. If possible, return \\"YES\\" and the rearranged sequence B. Otherwise, return \\"NO\\". :param n: Number of elements in sequences A and B. :param k: Desired sum of corresponding elements of A and rearranged B. :param A: List of integers A. :param B: List of integers B. :return: Tuple containing either \\"YES\\" and the rearranged B, or \\"NO\\". B_sorted = sorted(B, reverse=True) result_B = [] for a in A: b = k - a if b in B_sorted: result_B.append(b) B_sorted.remove(b) else: return \\"NO\\" return \\"YES\\", result_B"},{"question":"Given a grid of size n x m, you need to fill each cell in the grid with either a 0 or a 1 such that no two adjacent cells contain the same value. -----Input----- The input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. -----Output----- Output the n x m grid of 0s and 1s. Each cell in the grid should contain either a 0 or a 1, and no two adjacent cells (horizontally or vertically) should have the same value. -----Examples----- Input 3 3 Output 0 1 0 1 0 1 0 1 0 Input 4 5 Output 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1","solution":"def generate_checkerboard(n, m): Generates a n x m grid such that no two adjacent cells contain the same value. grid = [] for i in range(n): row = [] for j in range(m): # We achieve alternating pattern by using (i + j) % 2 row.append((i + j) % 2) grid.append(row) return grid"},{"question":"Given a list of integers, your task is to determine if the list is strictly increasing, strictly decreasing, or neither. A list is considered strictly increasing if each integer is greater than the previous one, strictly decreasing if each integer is less than the previous one, otherwise it is neither. -----Input----- The input consists of a single test case. The first line will contain the number N of integers in the list (2 leq N leq 50). Following that are N lines, each containing a single integer. The integers will be unique and will range from -1000 to 1000. -----Output----- Output a single word: INCREASING if the list is strictly increasing, DECREASING if it is strictly decreasing, and otherwise NEITHER. -----Examples----- Sample Input 1: 4 1 2 3 4 Sample Output 1: INCREASING Sample Input 2: 5 9 7 5 3 1 Sample Output 2: DECREASING Sample Input 3: 6 5 10 2 8 6 3 Sample Output 3: NEITHER","solution":"def determine_list_order(N, integers_list): Determines whether the list of integers is strictly increasing, strictly decreasing or neither. Args: N: int - Number of integers in the list. integers_list: List[int] - The list of integers. Returns: str: \\"INCREASING\\", \\"DECREASING\\" or \\"NEITHER\\" if all(integers_list[i] < integers_list[i+1] for i in range(N-1)): return \\"INCREASING\\" elif all(integers_list[i] > integers_list[i+1] for i in range(N-1)): return \\"DECREASING\\" else: return \\"NEITHER\\""},{"question":"Given an MxN grid where each cell contains either a 0 or a 1, you can move from a cell to any of its four neighbors (left, right, up, or down) if it contains a 1. Determine the size of the largest connected component of 1s in the grid. Input The first line contains two integers M and N (1 ≤ M, N ≤ 1000), the number of rows and columns respectively. Each of the next M lines contains N integers, either 0 or 1, separated by space. Output Output one integer, the size of the largest connected component of 1s in the grid. Example Input 4 4 1 1 0 0 0 1 1 0 0 0 0 1 1 0 1 1 Output 4 Input 3 3 1 0 1 0 1 0 1 0 1 Output 1","solution":"def largest_connected_component(grid): Returns the size of the largest connected component of 1s in the grid. M = len(grid) N = len(grid[0]) def dfs(x, y): # If out of bounds or the cell is not 1, return 0 if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] != 1: return 0 # Mark the cell as visited grid[x][y] = -1 # Count the cell itself size = 1 # Explore the four possible directions size += dfs(x - 1, y) size += dfs(x + 1, y) size += dfs(x, y - 1) size += dfs(x, y + 1) return size max_size = 0 for i in range(M): for j in range(N): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size # Example run M = 4 N = 4 grid = [ [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [1, 0, 1, 1] ] print(largest_connected_component(grid)) # Output: 4"},{"question":"Two students are competing in a coding contest, and their performances are represented by a set of integers, their respective scores, distributed over several rounds. Each student tries to achieve the highest possible two-round average during the contest. However, they can only consider consecutive rounds when calculating this average. The objective is to determine, for each student, the highest possible two-round average score they can achieve. In case of ties, multiple pairs of rounds can result in the same highest average score. Write a program that takes as input the number of rounds and the scores of both students for these rounds, and outputs the highest two-round average for each student, rounded to one decimal place. -----Input----- The first line contains a single integer n (2 leq n leq 100), the number of rounds in the contest. The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 100), the scores of the first student in each round. The third line contains n integers b_1, b_2, ldots, b_n (0 leq b_i leq 100), the scores of the second student in each round. -----Output----- Output two lines. The first line contains a single floating-point number representing the highest two-round average score for the first student, rounded to one decimal place. The second line contains a single floating-point number representing the highest two-round average score for the second student, rounded to one decimal place. -----Examples----- Sample Input 1: 3 50 80 70 60 90 85 Sample Output 1: 75.0 87.5 Sample Input 2: 5 10 20 30 40 50 15 25 35 45 55 Sample Output 2: 45.0 50.0","solution":"def highest_two_round_avg(n, scores_a, scores_b): def highest_avg(scores): max_avg = 0 for i in range(n - 1): avg = (scores[i] + scores[i + 1]) / 2 max_avg = max(max_avg, avg) return round(max_avg, 1) return highest_avg(scores_a), highest_avg(scores_b) # Example usage: # n = 3 # scores_a = [50, 80, 70] # scores_b = [60, 90, 85] # print(highest_two_round_avg(n, scores_a, scores_b)) # Output: (75.0, 87.5)"},{"question":"Write a function that determines if a given integer is a palindrome without converting the integer to a string. For example, the number `121` is a palindrome because it reads the same backward as forward. The number `123` is not a palindrome because it does not read the same backward as forward. You can assume that the integer is non-negative.","solution":"def is_palindrome(number): Determines if a given integer is a palindrome without converting the integer to a string. :param number: int, a non-negative integer :return: bool, True if number is a palindrome, False otherwise if number < 0: return False original_number = number reversed_number = 0 while number > 0: digit = number % 10 reversed_number = reversed_number * 10 + digit number //= 10 return original_number == reversed_number"},{"question":"Edward has recently encountered a fascinating programming puzzle involving strings and he needs your help to solve it. He has a string ( S ) of length ( n ) consisting of lowercase English letters. Edward wants to find out how many distinct substrings of ( S ) are there. Help him by writing a program to compute the number of distinct substrings for the given string. # Input - The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 10^5), the length of the string ( S ). - The second line contains a string ( S ) of length ( n ). # Output - Print a single integer indicating the number of distinct substrings of the string ( S ). # Example Input ``` 5 abcab ``` Output ``` 12 ``` # Explanation The distinct substrings of the string \\"abcab\\" are: ``` \\"a\\", \\"ab\\", \\"abc\\", \\"abca\\", \\"abcab\\", \\"b\\", \\"bc\\", \\"bca\\", \\"bcab\\", \\"c\\", \\"ca\\", \\"cab\\" ``` So, there are 12 distinct substrings in total. Design an efficient algorithm to solve this problem within the given constraints.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the string s. n = len(s) # Using a set to keep track of all unique substrings substrings = set() # Generating all possible substrings for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"John is organizing a charity marathon, and he needs to keep track of the number of participants joining and withdrawing from the marathon at various checkpoints along the route. The marathon route is essentially a straight path divided into `n` checkpoints, numbered from 1 to `n`. Each checkpoint keeps a count of the total participants currently present at that checkpoint. Initially, there are participants at each checkpoint given by an integer array `p` of length `n`, where `p[i]` represents the number of participants at checkpoint `i+1`. John receives `q` updates, where each update is either a participant joining or withdrawing from a specific checkpoint. You need to handle these updates and efficiently provide the current count of participants at any specific checkpoint after each update. -----Input----- The first line contains two integers `n` (1 le n le 10^5) and `q` (1 le q le 10^5) — the number of checkpoints and the number of updates, respectively. The second line contains `n` integers `p[1], p[2], ldots, p[n]` (0 le p[i] le 10^5) — the initial number of participants at each checkpoint. Each of the next `q` lines contains an update operation: \\"1 i x\\" means `x` participants join at checkpoint `i` (1 le x le 10^5), and \\"2 i x\\" means `x` participants withdraw from checkpoint `i` (1 le x le 10^5 and p[i] ge x`). -----Output----- After each update, print the number of participants currently present at the respective checkpoint. -----Example----- Input 5 6 10 20 30 40 50 1 3 5 2 2 10 1 5 20 2 4 15 1 1 10 2 3 10 Output 35 10 70 25 20 25 -----Note----- In the first sample, the number of participants at each checkpoint is initially [10, 20, 30, 40, 50]. 1. After \\"1 3 5\\", it becomes [10, 20, 35, 40, 50]. 2. After \\"2 2 10\\", it becomes [10, 10, 35, 40, 50]. 3. After \\"1 5 20\\", it becomes [10, 10, 35, 40, 70]. 4. After \\"2 4 15\\", it becomes [10, 10, 35, 25, 70]. 5. After \\"1 1 10\\", it becomes [20, 10, 35, 25, 70]. 6. After \\"2 3 10\\", it becomes [20, 10, 25, 25, 70]. For each update, the current count of participants at the specified checkpoint is printed.","solution":"def update_participants(n, q, participants, updates): result = [] for update in updates: op, i, x = update if op == 1: participants[i-1] += x elif op == 2: participants[i-1] -= x result.append(participants[i-1]) return result"},{"question":"You are tasked with developing a basic file system which supports three types of operations: * Create a directory (\'mkdir\' command). * Delete a directory (\'rmdir\' command). * List all directories and subdirectories (\'ls\' command). Assume that the file system is hierarchical where each directory can have multiple subdirectories. The details for each command are as follows: * \'mkdir <path>\' command creates a new directory at the specified path. * \'rmdir <path>\' command removes an existing directory at the specified path. If the directory has subdirectories, all of them will be deleted. * \'ls <path>\' command lists all the directories and subdirectories starting from the specified path. Input: Input file will contain not more than 100 commands, each in its own line. Command formats are the following: * mkdir <path> * rmdir <path> * ls <path> <path> is a non-empty sequence specifying the directory path using forward slashes \'/\'. It is guaranteed that input commands are correct, i.e. a \'mkdir\' command will not attempt to create a directory if it already exists, and a \'rmdir\' command will not attempt to remove a directory that does not exist etc. Output: For each \'ls <path>\' command, print the list of directories and subdirectories in the specified path, sorted in lexicographical order. Examples Input mkdir /home mkdir /home/user mkdir /home/user/docs mkdir /home/user/music ls /home rmdir /home/user/docs ls /home/user Output user music","solution":"class FileSystem: def __init__(self): self.fs = {} def mkdir(self, path): dirs = path.split(\'/\')[1:] # split path and remove empty first element current = self.fs for d in dirs: if d not in current: current[d] = {} current = current[d] def rmdir(self, path): dirs = path.split(\'/\')[1:] current = self.fs for d in dirs[:-1]: current = current[d] del current[dirs[-1]] def ls(self, path): dirs = path.split(\'/\')[1:] current = self.fs for d in dirs: current = current[d] return sorted(current.keys()) # Example driver code: fs = FileSystem() commands = [ \\"mkdir /home\\", \\"mkdir /home/user\\", \\"mkdir /home/user/docs\\", \\"mkdir /home/user/music\\", \\"ls /home\\", \\"rmdir /home/user/docs\\", \\"ls /home/user\\" ] for command in commands: cmd, path = command.split() if cmd == \\"mkdir\\": fs.mkdir(path) elif cmd == \\"rmdir\\": fs.rmdir(path) elif cmd == \\"ls\\": print(fs.ls(path))"},{"question":"A company\'s security system generates a daily report of the times employees swipe their ID cards to enter or leave the building. The report is a simple array of timestamps (in 24-hour format) when the card was swiped. Each swipe can either be an entry (\'E\') or an exit (\'X\'). The swipes may not always be in a sequential order. Write a function that takes in an array of tuples where each tuple contains a timestamp and a corresponding swipe action (\'E\' for entry, \'X\' for exit). The function should return the total number of hours and minutes the employee spent inside the building in the format \\"HH:MM\\". If the swipes are not in a valid sequential order (i.e., a swipe \'X\' occurs before an \'E\'), the function should return the string \\"Error: Invalid swipe order\\". Example Input: [(\'09:00\', \'E\'), (\'12:30\', \'X\'), (\'13:15\', \'E\'), (\'17:45\', \'X\')] Expected Output: \\"08:00\\"","solution":"def calculate_time_inside(swipe_data): Calculate the total time spent inside the building given a list of swipe times. Args: swipe_data (list of tuples): Each tuple contains a timestamp (in 24-hour format) and a swipe action (\'E\' or \'X\'). Returns: str: The total time inside the building in \\"HH:MM\\" format or an error message if the swipe order is invalid. from datetime import datetime, timedelta # Sort the swipe data based on timestamp swipe_data = sorted(swipe_data, key=lambda x: x[0]) total_time = timedelta() last_entry_time = None for time, action in swipe_data: current_time = datetime.strptime(time, \'%H:%M\') if action == \'E\': if last_entry_time is not None: return \\"Error: Invalid swipe order\\" last_entry_time = current_time elif action == \'X\': if last_entry_time is None: return \\"Error: Invalid swipe order\\" total_time += current_time - last_entry_time last_entry_time = None if last_entry_time is not None: return \\"Error: Invalid swipe order\\" total_hours, remainder = divmod(total_time.total_seconds(), 3600) total_minutes = remainder // 60 return f\\"{int(total_hours):02}:{int(total_minutes):02}\\""},{"question":"Create a new coding assessment question based on the provided guidelines. Chef is a fan of palindromes and enjoys creating new strings from his favorite words. Given a string representing a word, Chef wants to form the longest palindrome possible by rearranging its characters. If there is more than one way to arrange the characters to form a longest palindrome, he wants the lexicographically smallest one. Note: A palindrome is a word that reads the same backward as forwards. -----Input:----- - The input contains a string W, which represents the word Chef wants to rearrange to form the longest palindrome. -----Output:----- - Print the longest palindrome that Chef can form by rearranging the characters of W. If it’s not possible to form any palindrome, print -1. -----Constraints:----- - 1 leq Length of word W leq 10^5 - The string W contains only lowercase English letters. -----Sample Input 1:----- civic -----Sample Output 1:----- civic -----Sample Input 2:----- axxz -----Sample Output 2:----- -1","solution":"from collections import Counter def longest_palindrome(word): Given a string \'word\', return the longest palindrome that can be formed by rearranging its characters. If no palindrome can be formed, return -1. count = Counter(word) odd_count_chars = [char for char, cnt in count.items() if cnt % 2 == 1] if len(odd_count_chars) > 1: return \\"-1\\" half_palindrome = [] middle_char = [] for char, cnt in sorted(count.items()): if cnt % 2 == 1: middle_char = [char] half_palindrome.append(char * (cnt // 2)) half_palindrome = \'\'.join(half_palindrome) return half_palindrome + \'\'.join(middle_char) + half_palindrome[::-1]"},{"question":"Implement a function to perform matrix rotation. Given an NxN matrix, rotate the matrix by 90 degrees clockwise. The rotation should be done in place and only use a constant amount of extra memory. # Example 1: **Input**: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` **Output**: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Example 2: **Input**: ``` matrix = [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` **Output**: ``` [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `rotate()` that takes an NxN matrix as input and modifies it in place to achieve the rotated output. # Constraints: - `1 ≤ N ≤ 100` - Elements in the matrix are integers between `1` and `10^9`. # Expected Time Complexity: - O(N^2) # Expected Auxiliary Space: - O(1)","solution":"def rotate(matrix): Rotates an NxN matrix by 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"A company organizes an annual coding competition that consists of a series of challenges. Each challenge has a specific number of participants, and the score for each participant is recorded. After the competition, the company needs to calculate the final ranking of each participant based on their scores in all challenges. The ranking is determined by the following rules: 1. A participant with a higher total score is ranked higher. 2. If two participants have the same total score, the participant who scored higher in the most recent challenge is ranked higher. 3. If the scores are still tied, they are considered to have the same rank. Given the scores of the participants for each challenge, compute the final ranking of each participant. -----Input----- The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 50), where n is the number of participants and m is the number of challenges. The next m lines contain n integers each, representing the scores of the participants for each challenge. The j-th integer on the i-th line represents the score of the j-th participant in the i-th challenge. -----Output----- Print the ranking of each participant from 1 to n, where the output is a single line containing n integers. The i-th integer should be the rank of the i-th participant. -----Examples----- Input 4 3 10 20 30 40 40 30 20 10 20 30 40 50 Output 4 3 2 1 Input 3 2 90 80 70 70 80 90 Output 3 2 1","solution":"def calculate_ranking(n, m, scores): Calculate the ranking of each participant based on their scores in multiple challenges. # Calculate total scores total_scores = [sum(scores[i][j] for i in range(m)) for j in range(n)] # Combine total scores with most recent challenge scores and participant indices participants = [(total_scores[i], scores[m-1][i], i) for i in range(n)] # Sort participants based on total_score (descending), most recent score (descending) participants.sort(key=lambda x: (-x[0], -x[1])) # Allocate ranking based on sorted participants ranks = [0] * n rank = 1 for _, _, idx in participants: ranks[idx] = rank rank += 1 return ranks"},{"question":"You are given a list of integers representing the weekly temperatures of a city. Your task is to find the longest continuous sub-array where each temperature is greater than or equal to the previous temperature. If there are multiple sub-arrays with the same length, return the one which starts first. For example, given the temperatures `[3, 5, 7, 6, 9, 10, 12, 1, 2, 3]`, the longest continuous sub-array of non-decreasing temperatures is `[6, 9, 10, 12]`. -----Input----- The first line contains the number of test cases, T. Each test case consists of an integer N, representing the number of temperatures, followed by N integers representing the temperatures. -----Output----- For each test case, print the longest continuous non-decreasing sub-array of temperatures. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 105 - -1000 ≤ Temperature ≤ 1000 -----Example----- Input: 1 10 3 5 7 6 9 10 12 1 2 3 Output: 6 9 10 12","solution":"def find_longest_non_decreasing_subarray(temperatures): Finds the longest continuous sub-array where each temperature is greater than or equal to the previous temperature. Params: temperatures (list of int): List of temperatures Returns: list of int: The longest continuous non-decreasing sub-array max_length = 0 max_start_index = 0 current_start_index = 0 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] >= temperatures[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length max_start_index = current_start_index current_start_index = i current_length = 1 if current_length > max_length: max_length = current_length max_start_index = current_start_index return temperatures[max_start_index:max_start_index + max_length] def process_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) results = [] line_index = 1 for _ in range(T): N = int(input_lines[line_index]) temperatures = list(map(int, input_lines[line_index + 1].split())) line_index += 2 result = find_longest_non_decreasing_subarray(temperatures) results.append(\\" \\".join(map(str, result))) return \\"n\\".join(results)"},{"question":"Kiran is organizing a book exchange event at her school. Each student will bring a certain number of books and exchange them with others. However, Kiran wants to ensure that every student ends up with a unique combination of books and that no book is exchanged more than once throughout the event. After the event, Kiran notes the types of books each student has and needs to determine the possible combinations of book exchanges that could have happened. Your task is to help Kiran identify the possible number of unique book combinations used for the exchange. -----Input----- The first line contains an integer n (1 le n le 100) — the number of students participating in the book exchange. The next line contains n integers b_1, b_2, ldots, b_n (1 le b_i le 100) — the number of books each student originally had. The third line contains m integers c_1, c_2, ldots, c_m (1 le m le 100) — the types of books each student has after the exchange. -----Output----- Output a single integer — the number of possible unique book combinations used for the exchange. -----Examples----- Input 3 2 3 4 2 3 6 7 8 9 10 Output 5 Input 2 1 2 5 6 7 Output 3 -----Note----- In the first example, the students originally had 2, 3, and 4 books respectively, and after the exchange, they have 7 unique types of books. One possible combination for the book types could be (2, 3, 6, 7, 8, 9, 10). Thus, the output is 5 possible unique book combinations. In the second example, the students originally had 1 and 2 books respectively, and after the exchange, they have 5, 6, and 7 book types. Therefore, the output is 3 possible unique book combinations.","solution":"def unique_book_combinations(n, original_books, exchanged_books): Returns the number of unique book combinations used for the exchange. Args: n : int : number of students original_books : list of int : number of books each student originally had exchanged_books : list of int : types of books each student has after the exchange Returns: int : number of possible unique book combinations unique_books = set(exchanged_books) return len(unique_books)"},{"question":"Calculate X divided by Y, truncate its fractional part, and print the result as an integer. -----Constraints----- - 1 leq X leq 10^{18} - 1 leq Y < 10^6 - X and Y are integers. -----Input----- Input is given from Standard Input in the following format: X Y -----Output----- Print the answer as an integer. -----Sample Input----- 1000000000000000000 3 -----Sample Output----- 333333333333333333","solution":"def truncate_division(x, y): Compute x divided by y and truncate the fractional part. :param x: Dividend, an integer (1 <= X <= 10^18) :param y: Divisor, an integer (1 <= Y < 10^6) :return: Truncated integer result of x divided by y return x // y"},{"question":"A developer wants to create a unique sequence generator based on specific rules. The sequence starts with an integer S, and each subsequent integer is generated based on a \\"relation function\\" F, which takes an integer K and outputs the next integer in the sequence. The function F to generate the sequence is defined as follows: 1. If K is even, the next integer is ( K / 2 ). 2. If K is odd, the next integer is ( 3K + 1 ). The sequence ends when it reaches the integer 1. Given the initial integer S, the task is to write a program that generates the sequence and returns the total number of integers in the sequence, including the starting integer S and the ending integer 1. Input: The input contains multiple test cases. Each test case consists of a single integer S. Output: For each test case, output a single line containing the total number of integers in the sequence. Constraints: - 1 ≤ T ≤ 10^5 - 1 ≤ S ≤ 10^9 SAMPLE INPUT: 5 1 2 3 4 5 SAMPLE OUTPUT: 1 2 8 3 6","solution":"def collatz_sequence_length(S): Returns the total number of integers in the Collatz sequence starting from S and ending at 1. length = 1 while S != 1: if S % 2 == 0: S //= 2 else: S = 3 * S + 1 length += 1 return length def process_collatz_sequences(test_cases): Process multiple Collatz sequence test cases. :param test_cases: List of integers, where each integer starts a Collatz sequence. :return: List of integers, where each integer is the length of the respective Collatz sequence. results = [] for S in test_cases: results.append(collatz_sequence_length(S)) return results"},{"question":"Determine Palindrome Permutation You need to write a function that determines if any permutation of an input string can form a palindrome. A palindrome is a word that reads the same backward as forward, such as \\"civic\\" or \\"level\\". Your function should return `True` if any permutation of the input string can form a palindrome, and `False` otherwise. Ignore spaces and punctuation, and consider only alphabetical characters. The function should be case insensitive. Example output: ``` Input: \\"Tact Coa\\" Output: True Explanation: Permutations like \\"taco cat\\" or \\"atco cta\\" can form a palindrome. Input: \\"hello\\" Output: False Explanation: No permutation of \\"hello\\" can form a palindrome. ``` You may be provided several test cases to ensure the correctness of your function.","solution":"def can_form_palindrome(s): Determines if any permutation of the input string can form a palindrome. Parameters: s (str): The input string Returns: bool: True if a permutation can form a palindrome, False otherwise # Filter out non-alphabetic characters and convert to lowercase filtered_s = \'\'.join(c.lower() for c in s if c.isalpha()) # Dictionary to count the frequency of each character freq = {} for char in filtered_s: freq[char] = freq.get(char, 0) + 1 # Count the number of characters with an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"You are given an array of integers. Your task is to find the sum of all the unique elements in the array. Input The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers. Output For each test case, print the sum of all the unique elements in the array. Constraints: 1 <= T <= 10 1 <= N <= 1000 0 <= array elements <= 10000 SAMPLE INPUT 3 5 1 2 2 3 4 4 1 1 1 1 6 1 2 3 4 5 6 SAMPLE OUTPUT 10 1 21","solution":"def sum_of_unique_elements(test_cases): results = [] for case in test_cases: N, array = case unique_elements_sum = sum(el for el in set(array)) results.append(unique_elements_sum) return results"},{"question":"You are given a list of non-negative integers representing the number of steps a frog can jump forward from each position. The frog starts at the first index and wants to reach the last index in the minimum number of jumps. Write a function that computes the minimum number of jumps required for the frog to reach the last index. If it\'s not possible for the frog to reach the last index, return -1. If the input is not a list of non-negative integers, return \\"Invalid input\\". **Function Signature:** ```python def min_jumps_to_end(jumps: list) -> int: ``` **Input:** - `jumps`: a list of non-negative integers representing the jump lengths from each position. **Output:** - An integer representing the minimum number of jumps required to reach the last index, or -1 if it\'s not possible. **Examples:** 1. `min_jumps_to_end([2, 3, 1, 1, 4])` should return `2` (jump from index 0 to index 1, then to the last index) 2. `min_jumps_to_end([1, 1, 1, 1, 1])` should return `4` (jump one step each time) 3. `min_jumps_to_end([0, 2, 3])` should return `-1` (the frog cannot move from the first index)","solution":"def min_jumps_to_end(jumps): Computes the minimum number of jumps required for the frog to reach the last index in the list of jumps. Args: jumps (list): List of non-negative integers representing jump lengths. Returns: int: Minimum number of jumps to reach the last index, or -1 if not possible. Returns \\"Invalid input\\" if the input is not a list of non-negative integers. if not isinstance(jumps, list) or not all(isinstance(i, int) and i >= 0 for i in jumps): return \\"Invalid input\\" n = len(jumps) if n == 0: return -1 if n == 1: return 0 # Initialize variables jumps_required = 0 max_reach = 0 steps = 0 current_end = 0 for i in range(n-1): max_reach = max(max_reach, i + jumps[i]) if i == current_end: jumps_required += 1 current_end = max_reach if current_end >= n - 1: break if current_end < n - 1: return -1 return jumps_required"},{"question":"Given a sequence of n integers, you are required to process m queries of the following types: 1. Increment the value of the i-th element in the sequence by d. 2. Find the length of the longest contiguous subarray that is strictly increasing. Input The first line contains two integers: n and m (1 ≤ n, m ≤ 100,000) — the number of elements in the sequence and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the initial sequence. Next m lines contain the queries. Each query is in one of the following formats: * If the query is of the first type, the line contains three integers: 1, i, d (1 ≤ i ≤ n, 1 ≤ d ≤ 1,000,000), which means increment the i-th element of the sequence by d. * If the query is of the second type, the line contains only the integer 2, which asks for the length of the longest contiguous subarray that is strictly increasing. Output For each query of the second type, print the length of the longest contiguous subarray that is strictly increasing. Examples Input 5 5 2 1 3 2 5 1 3 1 2 1 5 1 2 2 Output 3 3 3 Explanation After the initial increment, the sequence becomes: [2, 1, 4, 2, 5] First query of type 2 checks the longest increasing contiguous subarray in sequence [2, 1, 4, 2, 5], which is [1, 4], so the output is 2. After the second increment, the sequence becomes: [2, 1, 4, 2, 6] Second query of type 2 checks the longest increasing contiguous subarray in sequence [2, 1, 4, 2, 6], which is [2, 6], so the output is 2. Third query of type 2 checks the longest increasing contiguous subarray in sequence [2, 1, 4, 2, 6], which remains the same as before, so the output is still 3.","solution":"def process_queries(n, m, sequence, queries): def get_longest_increasing_subarray_length(seq): # Initialize the variables for the current max length and the overall max length max_len = 1 current_len = 1 for i in range(1, len(seq)): if seq[i] > seq[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len results = [] for query in queries: if query[0] == 1: # Increment the value of i-th element by d i, d = query[1] - 1, query[2] sequence[i] += d elif query[0] == 2: # Find the length of the longest contiguous subarray that is strictly increasing results.append(get_longest_increasing_subarray_length(sequence)) return results"},{"question":"You are given a list of integers and an integer x. Determine if there are two distinct integers in the list that add up to x. -----Input----- The input consists of two lines. The first line contains a positive integer n (1 le n le 10^6) — the number of elements in the list. The second line contains n integers separated by spaces (-10^9 le text{element} le 10^9) which represent the elements of the list. The third line contains an integer x (-2 times 10^9 le x le 2 times 10^9). -----Output----- Output \\"YES\\" if there exists a pair of distinct integers in the list that add up to x. Otherwise, output \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 8 Output YES Input 3 1 1 1 3 Output NO -----Note----- In the first example, the numbers 3 and 5 add up to 8. In the second example, no two distinct numbers add up to 3.","solution":"def has_pair_with_sum(numbers, x): Determine if there are two distinct integers in the list that add up to x. :param numbers: list of integers :param x: target sum :return: \\"YES\\" if there exists a pair of distinct integers that add up to x, otherwise \\"NO\\" seen = set() for num in numbers: if x - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Design a function `paintGrid` that, given an `m x n` grid (a list of lists containing integers), paints a specified region of the grid with a new color. A region is defined as a group of connected cells with the same initial color. Cells are considered connected if they are adjacent either horizontally or vertically. The function should take four arguments: the grid, the row and column indices of the starting point, and the new color to be used for painting. The function should return the modified grid. # Function Signature ```python def paintGrid(grid: List[List[int]], row: int, col: int, new_color: int) -> List[List[int]]: ``` # Input - `grid`: A list of lists containing integers, representing the grid (1 ≤ len(grid), len(grid[0]) ≤ 100). - `row`: An integer representing the row index of the starting point (0 ≤ row < len(grid)). - `col`: An integer representing the column index of the starting point (0 ≤ col < len(grid[0])). - `new_color`: An integer representing the new color to paint the region (0 ≤ new_color ≤ 100). # Output - The function should return the modified grid. # Example Example 1: **Input:** ```python grid = [ [1, 1, 1], [1, 1, 0], [1, 0, 1] ] row = 1 col = 1 new_color = 2 ``` **Output:** ```python [ [2, 2, 2], [2, 2, 0], [2, 0, 1] ] ``` **Explanation:** Starting from the cell at (1,1) which is 1, paint all connected cells (connected horizontally or vertically) with the new color 2. Example 2: **Input:** ```python grid = [ [0, 0, 0], [0, 1, 1] ] row = 1 col = 1 new_color = 1 ``` **Output:** ```python [ [0, 0, 0], [0, 1, 1] ] ``` **Explanation:** The starting cell is already colored with the new color, so no change is applied to the grid. # Note - Carefully handle edge cases, such as when the starting point is already the new color or when the grid is fully colored with one color. - Ensure that you do not overwrite cells that do not belong to the specified region.","solution":"def paintGrid(grid, row, col, new_color): Paint the region of the grid starting from (row, col) with the new color. old_color = grid[row][col] if old_color == new_color: return grid m, n = len(grid), len(grid[0]) def dfs(r, c): if r < 0 or r >= m or c < 0 or c >= n or grid[r][c] != old_color: return grid[r][c] = new_color dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) dfs(row, col) return grid"},{"question":"You are given an array of n integers a_1, a_2, …, a_n. The array elements are guaranteed to be in strictly increasing order. Additionally, you are given an integer m (1 ≤ m ≤ 10^9). Your task is to find two distinct indices i and j (1 ≤ i < j ≤ n) such that a_i + a_j = m, or determine that no such indices exist. Input The first line contains the integer n (2 ≤ n ≤ 100,000), the length of the array. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), the array elements in strictly increasing order. The third line contains the integer m. Output If such indices i and j exist, print the indices in 1-based format: \\"i j\\". If no such indices exist, print -1. Examples Input 5 1 2 4 7 11 9 Output 2 4 Input 4 1 3 5 9 10 Output 1 4 Input 3 2 4 5 10 Output -1 Note In the first example, the answer is 2 4 because a_2 + a_4 = 2 + 7 = 9. In the second example, the answer is 1 4 because a_1 + a_4 = 1 + 9 = 10. In the third example, there are no two distinct indices whose elements sum to 10, so the output is -1.","solution":"def find_indices_with_sum(array, m): Given a sorted array and an integer m, returns two distinct indices (i, j) such that array[i] + array[j] = m. Indices are 1-based. Returns -1 if no such indices are found. left = 0 right = len(array) - 1 while left < right: current_sum = array[left] + array[right] if current_sum == m: return left + 1, right + 1 elif current_sum < m: left += 1 else: right -= 1 return -1"},{"question":"You are given an integer array `arr` with `n` elements where 1 ≤ `n` ≤ 10^5 and |arr[i]| ≤ 10^9 for all valid i. Your task is to determine if there exists a pair (i, j) such that `arr[i] + arr[j]` equals to a given integer `k` (i ≠ j). Constraints * 1 ≤ n ≤ 10^5 * |arr[i]| ≤ 10^9 * |k| ≤ 10^9 Input The input is given from Standard Input in the following format: n k arr Output Print `Yes` if such a pair exists, otherwise print `No`. Examples Input 4 8 1 4 3 5 Output Yes Input 5 10 1 2 3 4 5 Output No","solution":"def has_pair_with_sum(arr, k): Determines if there exists a pair (i, j) such that arr[i] + arr[j] equals k (i ≠ j). :param arr: List of integers :param k: Integer representing the target sum :return: \'Yes\' if such a pair exists, otherwise \'No\' seen = set() for num in arr: if k - num in seen: return \'Yes\' seen.add(num) return \'No\'"},{"question":"Given a string s of length n consisting of lowercase English letters, you are allowed to perform the following operations any number of times: 1. Swap any two characters of the string. 2. Select any character of the string and move it to any position within the string. Determine the minimum number of operations required to arrange the string such that all identical characters are grouped together. -----Input----- The input consists of a single line containing the string s (1 ≤ n ≤ 10^5). -----Output----- Print a single integer — the minimum number of operations required to arrange the string such that all identical characters are grouped together. -----Examples----- Input abacb Output 3 Input aaaa Output 0 -----Note----- In the first example, the string \\"abacb\\" can be transformed into \\"aaabb\\" in 3 operations (one possible sequence of operations: move \'b\' from position 4 to position 2, swap \'c\' from position 3 with \'a\' at position 5, and move \'b\' from position 5 to position 3). In the second example, the string is already arranged such that all identical characters are grouped together, so no operations are needed.","solution":"def min_operations_to_group_chars(s): Returns the minimum number of operations required to arrange the string such that all identical characters are grouped together. from collections import Counter counter = Counter(s) char_counts = list(counter.values()) max_count = max(char_counts) # To group all identical characters, we need to move all other characters at least once return len(s) - max_count"},{"question":"Implement a caching system: You need to design and implement a caching system that supports the following operations: 1. `get(key)` - Retrieves the value associated with the key if it exists in the cache, otherwise returns -1. 2. `put(key, value)` - Inserts or updates the value associated with the key. If the cache reaches its capacity, it should invalidate the least recently used (LRU) item before inserting the new item. For this task, assume both the key and value are integers. The cache will have a fixed capacity specified at the time of its creation. # Example ```python class LRUCache: def __init__(self, capacity: int): pass def get(self, key: int) -> int: pass def put(self, key: int, value: int): pass # Your LRUCache object will be instantiated and called as such: # obj = LRUCache(capacity) # param_1 = obj.get(key) # obj.put(key,value) ``` # Constraints - All keys and values will be in the range of 1 to 10^5. - The cache capacity will be in the range of 1 to 1000. - The number of operations will not exceed 10^4. # Example Usage ```python cache = LRUCache(2) cache.put(1, 1) cache.put(2, 2) print(cache.get(1)) # returns 1 cache.put(3, 3) # evicts key 2 print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # evicts key 1 print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` In this task, you need to focus on implementing the `LRUCache` class which keeps track of the order of access and ensures the least recently used item is removed on reaching capacity.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int): if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"You are given a list of integers `arr` representing a sequence of stock prices, and you need to maximize the profit by completing at most one transaction (i.e., buy one and sell one share of the stock). Write a function that returns the maximum profit you can achieve from this transaction. If no profit is possible, return 0. Example: Input: arr = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying and selling must take place in that order. Input: arr = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. Function Signature: def maxProfit(arr: List[int]) -> int: Constraints: - 1 <= len(arr) <= 10^5 - 0 <= arr[i] <= 10^5 Your Task: You must implement the given function using an optimal approach with a time complexity of O(n) and a space complexity of O(1).","solution":"def maxProfit(arr): Returns the maximum profit that can be made by buying and selling a single share of stock. if not arr or len(arr) < 2: return 0 min_price = arr[0] max_profit = 0 for price in arr[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"You are given a string s consisting of lowercase English letters and the number m. You are asked to determine the length of the longest substring of s that contains at most m distinct characters. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each of the next 2t lines describes a test case: - The first line contains an integer m (1 le m le 26). - The second line contains a string s (1 le |s| le 1000). -----Output----- For each test case, print a single integer — the length of the longest substring of s that contains at most m distinct characters. -----Examples----- Input 3 2 abcba 1 aaa 3 aabacbebebe Output 3 3 7 -----Note----- In the first test case, the longest substring with at most 2 distinct characters is \\"bcb\\" with length 3. In the second test case, the longest substring with at most 1 distinct character is \\"aaa\\" with length 3. In the third test case, the longest substring with at most 3 distinct characters is \\"cbebebe\\" with length 7.","solution":"def length_of_longest_substring_k_distinct(s, m): from collections import defaultdict n = len(s) if n == 0 or m == 0: return 0 left, right = 0, 0 max_length = 0 char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 while len(char_count) > m: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): m = test_cases[i * 2] s = test_cases[i * 2 + 1] results.append(length_of_longest_substring_k_distinct(s, m)) return results"},{"question":"Implement a function called `reverse_group` that takes a list of integers `arr` and an integer `k` as its inputs. The function should reverse the elements of `arr` in groups of size `k`. If the number of elements is not a multiple of `k`, then the remaining elements at the end should be reversed as well. Example 1: Input: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3 Output: [3, 2, 1, 6, 5, 4, 9, 8, 7] Example 2: Input: arr = [1, 2, 3, 4, 5], k = 2 Output: [2, 1, 4, 3, 5] Your Task: You do not need to read input or print anything. Your task is to complete the function `reverse_group` which takes a list `arr` and an integer `k` as input parameters and returns the modified list after reversing the elements in groups of size `k`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(arr) ≤ 10^5 1 ≤ k ≤ len(arr) 1 ≤ arr[i] ≤ 10^9","solution":"def reverse_group(arr, k): Reverses the elements of arr in groups of size k. n = len(arr) for i in range(0, n, k): arr[i:i+k] = arr[i:i+k][::-1] return arr"},{"question":"You are given a list of n elements and a series of m queries. Each query consists of two integers l and r, which represents a subarray of the list. You are required to answer the queries with the sum of the Fibonacci numbers from the elements in the specified subarray. Write a program that preprocesses the list of elements to handle each query efficiently. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the list. The second line contains n integers, the elements of the list (0 ≤ element ≤ 10^5). The third line contains an integer m (1 ≤ m ≤ 10^5), the number of queries. Each of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n), which represent the range for the query. -----Output----- For each of the m queries, print the sum of the Fibonacci numbers of the elements in the specified subarray. -----Examples----- Input 5 3 1 4 1 5 3 1 3 2 5 1 5 Output 7 9 11 -----Note----- In the first example: - The subarray for the first query is [3, 1, 4]. Their Fibonacci numbers are F(3)=2, F(1)=1, and F(4)=3. Sum = 2 + 1 + 3 = 6. - The subarray for the second query is [1, 4, 1, 5]. Their Fibonacci numbers are F(1)=1, F(4)=3, F(1)=1, and F(5)=5. Sum = 1 + 3 + 1 + 5 = 10. - The subarray for the third query is [3, 1, 4, 1, 5]. Sum = 2 + 1 + 3 + 1 + 5 = 12.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def preprocess_fibonacci(elements): Precompute the Fibonacci number for each element in the list to handle queries efficiently. fib_cache = {} # fill the cache with Fibonacci numbers for all elements in the list for element in elements: if element not in fib_cache: fib_cache[element] = fibonacci(element) return fib_cache def precompute_sums(elements, fib_cache): Precompute prefix sum of Fibonacci numbers of the elements in the list. n = len(elements) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + fib_cache[elements[i - 1]] return prefix_sums def sum_of_fibonacci_in_range(prefix_sums, l, r): Returns the sum of Fibonacci numbers for the subarray defined by l and r. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(n, elements, m, queries): Main function to process all queries and return the results. fib_cache = preprocess_fibonacci(elements) prefix_sums = precompute_sums(elements, fib_cache) results = [] for l, r in queries: results.append(sum_of_fibonacci_in_range(prefix_sums, l, r)) return results"},{"question":"Aria is building a large network of computers. The network can be represented as a graph consisting of `n` nodes and `m` edges. Each node represents a computer, and each edge represents a direct communication link between two computers. However, the network design includes some one-way communication links, meaning that data can only travel in one direction on some edges. Aria wants to ensure that her network has certain communication abilities: 1. Every computer should be able to reach a central server located at node `1`. 2. Every computer should be able to communicate back to the central server without necessarily following the original one-way paths. Given the description of the network, determine if Aria\'s desired properties can be achieved with the given set of nodes and edges. Input - The first line contains two integers `n` (2 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 2*10^5) representing the number of nodes and the number of edges, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) denoting a one-way communication link from node `u` to node `v`. Output Output \\"YES\\" if Aria\'s network design satisfies the communication abilities described above. Otherwise, output \\"NO\\". Example Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 4 2 Output YES Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 4 3 1 2 2 3 3 4 Output NO Explanation For the first example, the network forms a cycle allowing all nodes to reach the central server (node 1) and also return to it through various one-way links. For the second example, the network forms a simple cycle where each computer can reach and communicate back to node 1. For the third example, node 4 cannot communicate back to the central server (node 1), resulting in a \\"NO\\" output.","solution":"from collections import defaultdict, deque def can_communicate(n, m, edges): def bfs(start, graph): visited = [False] * (n + 1) q = deque([start]) visited[start] = True while q: node = q.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True q.append(neighbor) return visited graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) # Check from node 1 visited_from_1 = bfs(1, graph) if not all(visited_from_1[1:]): return \\"NO\\" # Check to node 1 (using reverse graph) visited_to_1 = bfs(1, reverse_graph) if not all(visited_to_1[1:]): return \\"NO\\" return \\"YES\\""},{"question":"In a particular town, a group of children has a unique way of sharing candies. Each child can give candies to other children such that no two children end up with the same number of candies unless it is inevitable. Each child starts with a unique number of candies. The rule of sharing candies is as follows: - A child can give any non-negative number of candies to another child. - The goal is to make sure no two children are left with the same number of candies, unless it\'s impossible due to the total number of candies being a perfect multiple of the number of children. You are given the number of candies each child initially has. Write a program to determine if it is possible to distribute the candies such that no two children end up with the same number of candies. -----Constraints----- - 1 ≤ n ≤ 1000 (n is the number of children) - 0 ≤ candies[i] ≤ 10^6 (candies[i] is the initial number of candies for the i-th child) -----Input----- The input is given from Standard Input in the following format: n candies[1] candies[2] ... candies[n] -----Output----- Print \\"Yes\\" if it is possible to achieve the goal, otherwise print \\"No\\". -----Sample Input----- 5 1 5 9 3 7 -----Sample Output----- Yes The children start with 1, 5, 9, 3, and 7 candies. No two children have the same number of candies initially, so the output is \\"Yes\\". -----Sample Input----- 3 2 2 2 -----Sample Output----- No All three children have the same number of candies initially. Since each child can only give non-negative candies to another, it is impossible to make their candy counts unique. Hence, the output is \\"No\\".","solution":"def is_unique_candy_distribution_possible(n, candies): Determine if it is possible to distribute candies such that no two children have the same amount of candies, unless it\'s inevitable due to the total number of candies being a perfect multiple of the number of children. Parameters: n (int): Number of children candies (list): List of integers representing the quantity of candies each child has Returns: str: \\"Yes\\" if it is possible to make all candy counts unique, otherwise \\"No\\" unique_candies = set(candies) if len(unique_candies) == len(candies): return \\"Yes\\" return \\"No\\""},{"question":"You are given a string s and an integer k. Determine the length of the longest substring of s that contains at most k distinct characters. If there are multiple substrings with the same maximum length, return the length of any one of them. -----Input----- Each test case consists of a single line. The line contains the string s (1! le !|s|! le !10^5, s! in ![a{-}zA{-}Z]^*) followed by an integer k (1! le !k! le !52) separated by a space. -----Output----- Output a single integer, which is the length of the longest substring of s that contains at most k distinct characters. -----Examples----- Sample Input 1: abcba 2 Sample Output 1: 3 Sample Input 2: aaabbcc 2 Sample Output 2: 5","solution":"def longest_substring_k_distinct(s, k): from collections import defaultdict if k == 0: return 0 char_count = defaultdict(int) left = 0 max_length = 0 for right in range(len(s)): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 current_length = right - left + 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a list of non-negative integers representing the amount of money each house in a street has. There is a thief who wants to steal the maximum amount of money but cannot steal from two adjacent houses because the owners of the two adjacent houses will call the police. -----Input----- - The first line contains an integer n – the number of houses in the street (1 leq n leq 100). - The second line contains n non-negative integers a_1, a_2, ldots, a_n (0 leq a_i leq 1000), where a_i represents the amount of money in the i-th house. -----Output----- - Output a single integer, the maximum amount of money the thief can steal. -----Examples----- Input 4 1 2 3 1 Output 4 Input 5 2 7 9 3 1 Output 12 Input 1 10 Output 10 -----Note----- In the first example, the thief can steal from the first and the third house, stealing a total of 1 + 3 = 4. In the second example, the thief can steal from the first, third, and fifth house, stealing a total of 2 + 9 + 1 = 12. In the third example, there is only one house, so the thief can only steal that amount.","solution":"def max_steal(n, houses): if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1]"},{"question":"There is a rectangular grid of dimension M x N. You are initially positioned at the top-left corner of the grid (1, 1). Your goal is to reach the bottom-right corner (M, N). You can only move to the right or down from your current position. Calculate the number of unique paths you can take to reach the bottom-right corner. Example 1: Input: M = 2, N = 3 Output: 3 Explanation: There are three ways to go from (1,1) to (2,3): 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Down -> Right -> Right -> Down Example 2: Input: M = 3, N = 3 Output: 6 Explanation: There are six ways to go from (1,1) to (3,3): 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right Your Task: You don\'t need to read or print anything. Your task is to complete the function uniquePaths() which takes M and N as input parameters and returns the number of unique ways to reach the bottom-right corner modulo 10^{9} + 7. Expected Time Complexity: O(M * N) Expected Space Complexity: O(M * N) Constraints: 1 ≤ M, N ≤ 100","solution":"def uniquePaths(M, N): Calculate the number of unique paths in a MxN grid from the top-left to the bottom-right corner MOD = 10**9 + 7 # Create a 2D list to store the number of paths to each cell dp = [[0] * N for _ in range(M)] # There is exactly 1 way to reach each cell in the first row and first column for i in range(M): dp[i][0] = 1 for j in range(N): dp[0][j] = 1 # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD # The value at the bottom-right corner of the grid return dp[M - 1][N - 1]"},{"question":"Alice is building a chatbot and wants to include a fun-colored text feature. To achieve this, she needs to convert the words in a sentence to a specific colored text based on their position in the sentence. The rule is to color the words starting from the first one in a cyclic manner based on a given list of colors. For example, if the list of colors is [\\"red\\", \\"blue\\", \\"green\\"], the first word will be red, the second word blue, the third word green, the fourth word red, and so on. Write a program to help Alice color the words in the given sentence following the described rules. INPUT The first line contains a list of colors, each color separated by a space. The second line contains the sentence that needs to be colored. OUTPUT Output the sentence with each word colored based on its position, following the cyclic pattern of the given list of colors. Format each word and its color as \\"word(color)\\" without quotes. Constraint 1 ≤ Number of colors ≤ 100 1 ≤ Number of words in the sentence ≤ 100 Each word and color is a non-empty string of at most 30 characters. SAMPLE INPUT red blue green Hello this is a fun chatbot feature SAMPLE OUTPUT Hello(red) this(blue) is(green) a(red) fun(blue) chatbot(green) feature(red) Explanation The sentence is split into words and each word is assigned a color based on its position, cycling through the colors list. The cyclic pattern means that the first word \\"Hello\\" gets the first color \\"red\\", the second word \\"this\\" gets the second color \\"blue\\", and so on. When the end of the list of colors is reached, it starts again from the beginning of the list.","solution":"def color_sentence(colors, sentence): Returns the sentence with each word colored based on its position, following the cyclic pattern of the given list of colors. Parameters: colors (list of str): The list of colors. sentence (str): The sentence to be colored. Returns: str: The colored sentence formatted as \\"word(color)\\". color_list = colors.split() words = sentence.split() result = [] for i in range(len(words)): color = color_list[i % len(color_list)] result.append(f\\"{words[i]}({color})\\") return \' \'.join(result)"},{"question":"In a mysterious land, there are n cities and n roads, each road uniquely connecting two different cities. The cities are numbered from 1 to n. The king has decided to organize a contest and wants the cities to be visited in a particular order. This order will create a unique path from the first city of the order to the last one, visiting each city exactly once. To start the contest, the king has a list of n road connections. Each road connection is represented by two integers a and b indicating that there is a road directly connecting city a and city b. Your task is to verify if the given order of visiting cities is a valid path or not. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of cities and roads. The next n-1 lines contain two space-separated integers a and b (1 ≤ a, b ≤ n), denoting a direct road connecting city a and city b. The last line contains n space-separated integers representing the order in which the cities should be visited. -----Output----- Print \\"YES\\" if the order of visiting cities is a valid path, otherwise print \\"NO\\". -----Examples----- Input 4 1 2 2 3 3 4 1 2 3 4 Output YES Input 4 1 2 2 3 3 4 1 3 2 4 Output NO -----Note----- In the first test case, the order 1 -> 2 -> 3 -> 4 forms a valid path. In the second test case, the order 1 -> 3 -> 2 -> 4 doesn’t form a valid path since there is no direct road between city 1 and city 3.","solution":"def is_valid_path(n, roads, order): from collections import defaultdict # Construct the adjacency list of the graph graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Check if each consecutive city in the order has a direct connection for i in range(1, n): if order[i] not in graph[order[i - 1]]: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes a list of integers where each integer represents the height of a building in a row of buildings. The goal is to find the index of the building that has the maximum height the closest to the beginning of the array. If there are multiple buildings with the same maximum height, return the index of the first occurrence. Example heights=[3,4,1,8,8,2,7] Here, the maximum height is 8 and it appears at indices 3 and 4. The first occurrence is at index 3, so return 3. heights=[1,1,1,1,1,1,1] All buildings have the same height, return the index of the first one, which is 0. Function Description Complete the function maxBuildingIndex in the editor below. maxBuildingIndex has the following parameter(s): - int heights[n]: an array of integers representing the heights of buildings Returns - int: the index of the building with the maximum height, closest to the beginning of the array Input Format First line contains n, the size of heights[]. Then next n lines each contain an integer, heights[i]. Constraints 1 leq n leq 10^5 1 leq heights[i] leq 10^6 All integers in heights[] are non-negative and represent valid heights. Sample Input00 STDIN Function ----- -------- 5 heights[] size n = 5 2 heights = [2, 5, 3, 5, 1] 5 3 5 1 Sample Output00 1 Explanation00 The highest buildings have a height of 5. The first 5 appears at index 1. Sample Input01 4 7 7 4 7 Sample Output01 0 Explanation01 The highest buildings have a height of 7. The first 7 appears at index 0.","solution":"def maxBuildingIndex(heights): Returns the index of the building that has the maximum height closest to the beginning of the array. Parameters: heights (list): A list of integers representing the heights of buildings. Returns: int: The index of the first occurrence of the building with the maximum height. max_height = max(heights) return heights.index(max_height)"},{"question":"Zoe loves to organize things and she\'s particularly fond of string patterns. Recently, she encountered a problem with her collection of strings and needs your help. Zoe has a string of lowercase English letters. She wants to transform this string into a beautiful string. A beautiful string is defined as a string where each character appears exactly twice, and all characters in the string are distinct. Can you help Zoe determine if it is possible to rearrange the given string to form a beautiful string? If it\'s possible, output \\"YES\\". Otherwise, output \\"NO\\". ------Input------ The input consists of a single line containing a string s (2 ≤ |s| ≤ 100 000) consisting of lowercase English letters. ------Output------ Output \\"YES\\" if it is possible to rearrange the given string to form a beautiful string. Otherwise, output \\"NO\\". ------Examples------ Input aabb Output YES Input abc Output NO ------Explanation------ In the first example, the string \\"aabb\\" can be considered already a beautiful string as \'a\' and \'b\' each appear twice and there are no other characters. In the second example, the string \\"abc\\" cannot be rearranged to meet the criteria since each character is distinct and not repeated.","solution":"def is_beautiful_string(s): Determines if it is possible to rearrange the given string to form a beautiful string. A beautiful string is defined as a string where every character appears exactly twice. :param s: A string of lowercase English letters :return: \'YES\' if it is possible to rearrange to form a beautiful string, otherwise \'NO\' from collections import Counter # Count frequency of each character char_count = Counter(s) # Check if each character appears exactly twice for count in char_count.values(): if count != 2: return \\"NO\\" return \\"YES\\""},{"question":"A well-known social media company wants to optimize its notification system to avoid sending out duplicate notifications to users in a certain time frame. You are required to write an algorithm that processes incoming notifications and determines whether each new notification is a duplicate of a recent one. A duplicate notification is defined as one that has the same content as any of the notifications sent out within the last M minutes. If a notification is not a duplicate, it should be sent out and recorded. If it is a duplicate, it should be ignored. ------ Input: ------ The first line contains two integers N and M: the total number of notifications and the time frame in minutes to check for duplicates. The next N lines each contain an integer t_i and a string s_i: the timestamp of the notification in minutes since the start of the system and the content of the notification, respectively. ------ Output: ------ Output N lines, each containing \'SEND\' if the notification should be sent out or \'IGNORE\' if it should be ignored. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ t_i ≤ 10^9 1 ≤ |s_i| ≤ 100 ----- Sample Input 1 ------ 5 10 1 Notification1 5 Notification2 8 Notification1 12 Notification3 15 Notification1 ----- Sample Output 1 ------ SEND SEND IGNORE SEND SEND ----- Explanation ------ - At timestamp 1, \\"Notification1\\" is sent out. - At timestamp 5, \\"Notification2\\" is sent out. - At timestamp 8, \\"Notification1\\" matches the content of a notification sent at timestamp 1, which is within the last 10 minutes, so it is ignored. - At timestamp 12, \\"Notification3\\" is sent out. - At timestamp 15, \\"Notification1\\" does not match any notification in the last 10 minutes (timestamps 5 and 12), so it is sent out.","solution":"def process_notifications(N, M, notifications): Processes notifications and determines whether each new notification is a duplicate of a recent one within the last M minutes. Parameters: N (int): Total number of notifications M (int): Time frame in minutes to check for duplicates notifications (list): List of tuples containing timestamp and notification content Returns: list: A list containing \'SEND\' or \'IGNORE\' for each notification from collections import deque result = [] recent_notifications = deque() for t_i, s_i in notifications: # Remove old notifications while recent_notifications and recent_notifications[0][0] <= t_i - M: recent_notifications.popleft() # Check if current notification is a duplicate if any(content == s_i for _, content in recent_notifications): result.append(\'IGNORE\') else: result.append(\'SEND\') recent_notifications.append((t_i, s_i)) return result # Sample Input N = 5 M = 10 notifications = [ (1, \\"Notification1\\"), (5, \\"Notification2\\"), (8, \\"Notification1\\"), (12, \\"Notification3\\"), (15, \\"Notification1\\") ] # Printing Output for sample input print(process_notifications(N, M, notifications))"},{"question":"Given an array of size N, your task is to complete the function findSecondLargest() which takes the array as input and returns the second largest element in the array. If the array doesn\'t have a second largest element, return -1. Input: The input line contains T, denoting the number of test cases. Each test case contains two lines. The first line contains N (size of the array). The second line contains N space-separated elements of the array. Output: For each test case, in a new line, print the second largest element in the array. If the array doesn\'t have a second largest element, print -1. User Task: Since this is a functional problem, you don\'t have to worry about the input, you just have to complete the function findSecondLargest() which takes the array as input parameter and returns the second largest element in the array. If the second largest element doesn\'t exist, return -1. Constraints: 1 <= T <= 100 1 <= N <= 10^{3} 1 <= A[i] <= 10^{3} Example: Input: 2 5 10 5 8 3 12 3 7 7 7 Output: 10 -1 Explanation: Testcase 1: The array is [10, 5, 8, 3, 12]. The largest element is 12 and the second largest is 10. Testcase 2: The array is [7, 7, 7]. There is no second largest element as all elements are the same.","solution":"def findSecondLargest(arr): Returns the second largest element in the array. If the second largest doesn\'t exist, return -1. if len(arr) < 2: return -1 first = second = float(\'-inf\') for number in arr: if number > first: second = first first = number elif number > second and number != first: second = number return second if second != float(\'-inf\') else -1"},{"question":"A company has n employees, and the company\'s employee database contains two arrays A and B. Array A contains the employee ids, and array B contains the respective salaries of the employees in array A. The company is planning to restructure the salary system, and one of the plans includes increasing the salary of some selected employees. The CEO wants to compute the total increase in the salary if they decide to increase the salary of the employees appearing in array C by a fixed amount k. If an employee in array C does not exist in array A, their salary cannot be increased, and they can be ignored. Write a function that calculates the total salary increase. -----Input----- The first line contains one integer n (1 le n le 100) — the number of employees in the company. The second line contains n integers A_1, A_2, ..., A_n (1 le A_i le 10^5) — the employee ids. The third line contains n integers B_1, B_2, ..., B_n (1 le B_i le 10^5) — the salaries of the respective employees. The fourth line contains one integer m (1 le m le 100) — the number of employees whose salaries might be increased. The fifth line contains m integers C_1, C_2, ..., C_m (1 le C_i le 10^5) — the employee ids of the employees whose salaries are considered to be increased. The sixth line contains one integer k (1 le k le 1000) — the amount to increase the salary. -----Output----- Print one integer — the total increase in the salary. -----Examples----- Input 4 101 102 103 104 5000 6000 5500 7000 3 102 103 105 200 Output 400 Input 5 201 202 203 204 205 3000 4000 3500 4500 5000 4 202 204 206 207 150 Output 300 -----Note----- In the first example, the employees with ids 102 and 103 exist in the company\'s database, so their salaries can be increased by 200 each. Therefore, the total increase is 200 + 200 = 400. In the second example, the employees with ids 202 and 204 exist in the company\'s database, so their salaries can be increased by 150 each. Therefore, the total increase is 150 + 150 = 300.","solution":"def total_salary_increase(n, A, B, m, C, k): Calculates the total salary increase for employees in array C :param n: int: number of employees in the company :param A: list[int]: employee ids :param B: list[int]: employee salaries :param m: int: number of employees whose salaries might be increased :param C: list[int]: employee ids of employees whose salaries are considered to be increased :param k: int: amount to increase the salary :return: int: the total increase in salary id_set = set(A) increase_count = sum(1 for employee_id in C if employee_id in id_set) return increase_count * k"},{"question":"Problem statement A group of adventurers are trying to maximize their loot from a series of treasure chests. Each treasure chest can contain between 1 and k items. The adventurers want to distribute the loot such that the variance of the number of items in each treasure chest is maximized. The variance is defined as the average of the squared differences from the mean: Variance = (1/n) * Σ(xi - μ)^2, where xi is the number of items in the i-th chest and μ is the mean number of items among all chests. Given the number of chests n and the maximum number of items k each chest can contain, output a sequence of n integers representing the number of items in each chest such that the variance is maximized. input n k Constraint * An integer * 1 ≤ n ≤ 100 * 1 ≤ k ≤ 100 output Output the n integers representing the number of items in each chest separated by spaces such that the variance of the number of items is maximized. If there are multiple valid solutions, any one can be output. sample Sample input 1 3 5 Sample output 1 1 1 5 Sample input 2 4 10 Sample output 2 1 1 10 10 Example Input 3 5 Output 1 1 5","solution":"def maximize_variance(n, k): Returns a sequence of n integers representing the number of items in each chest such that the variance of the number of items is maximized. if n == 1: return [k] elif n == 2: return [1, k] # To maximize the variance, we distribute the items as follows: # Assign the minimum (1) to n//2 chests and the maximum (k) to the other n - n//2 chests. sequence = [1] * (n // 2) + [k] * (n - n // 2) return sequence"},{"question":"Lucy loves to cook and is planning a large dinner party with multiple courses. She has several recipes at her disposal, each with an estimated preparation time. To ensure a smooth preparation process, Lucy wants to divide her recipes as evenly as possible between two chefs. Each chef should prepare at least one dish, and the goal is to minimize the difference in total preparation time between the two chefs. Write a function `divideRecipes` that takes in a list of integers, `prepTimes`, where each integer represents the estimated preparation time of a recipe. The function should return a tuple containing two lists: the first list containing the preparation times assigned to the first chef, and the second list containing the preparation times assigned to the second chef. The difference in the total preparation time between the two lists should be minimized. Also note: - You may assume the list `prepTimes` will contain at least two recipe times. - The function should always return a valid division of recipes. Example: ```python divideRecipes([10, 20, 30, 40, 50]) # This might return ([10, 20, 50], [30, 40]), with a total time of 80 for the first chef and 70 for the second chef, resulting in a minimal difference of 10. ``` In the case of ties (multiple solutions with the same minimal difference), any valid division can be returned.","solution":"def divideRecipes(prepTimes): Divide recipes as evenly as possible between two chefs. Args: prepTimes (list): A list of integers representing preparation times. Returns: tuple: A tuple of two lists, representing the division of recipes. # Total sum of all preparation times total_time = sum(prepTimes) n = len(prepTimes) # Dynamic programming approach to find the subset sums close to total_time / 2 dp = [False] * (total_time // 2 + 1) dp[0] = True for time in prepTimes: for j in range(total_time // 2, time - 1, -1): dp[j] = dp[j] or dp[j - time] # Find the largest j for which dp[j] is True for j in range(total_time // 2, -1, -1): if dp[j]: sum1 = j break # Now we need to determine which items are in this subset subset1 = [] subset2 = prepTimes.copy() w = sum1 for i in range(n-1, -1, -1): if w >= prepTimes[i] and dp[w-prepTimes[i]]: subset1.append(prepTimes[i]) subset2.remove(prepTimes[i]) w -= prepTimes[i] return (subset1, subset2)"},{"question":"Given an array of integers, you are allowed to flip a subarray (i.e., invert the subarray elements such that the first element becomes the last, the second element becomes the second to last, and so on). Your task is to find the minimum number of flips required to sort the array in non-decreasing order. Here is the input format: * The first line of input contains a single integer `n` (1 ≤ n ≤ 1000), the size of the array. * The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the elements of the array. Output the minimum number of flips required to sort the array in non-decreasing order. Examples: Input: 5 3 2 1 4 5 Output: 1 Input: 6 4 3 1 2 6 5 Output: 2 Input: 3 1 2 3 Output: 0 Explanation: In the first example, you can sort the array by flipping the subarray [3, 2, 1] once, resulting in [1, 2, 3, 4, 5]. In the second example, one optimal way is first to flip the subarray [4, 3, 1, 2] to get [2, 1, 3, 4, 6, 5], and then flip the subarray [1, 2] to get [1, 2, 3, 4, 6, 5]. In the third example, the array is already sorted, so no flips are required.","solution":"def min_flips_to_sort(arr): Returns the minimum number of flips required to sort the array in non-decreasing order. n = len(arr) sorted_arr = sorted(arr) # If the array is already sorted, return 0 flips if arr == sorted_arr: return 0 start, end = 0, n-1 # Find the first element from the left that is out of order while arr[start] == sorted_arr[start]: start += 1 # Find the first element from the right that is out of order while arr[end] == sorted_arr[end]: end -= 1 # Flip the subarray once and check if it becomes sorted arr[start:end+1] = arr[start:end+1][::-1] if arr == sorted_arr: return 1 # If one flip is not sufficient, return 2 as maximum flips needed as per examples return 2"},{"question":"An amusement park has several roller coaster rides. The park owners want to assign each visitor to a ride such that the number of visitors on any single ride does not exceed its capacity and each visitor enjoys a ride that they are satisfied with. Each visitor has a list of rides that they are willing to go on. Given the capacities of each ride and the preferences of each visitor, determine if it is possible to assign each visitor to a ride they are satisfied with. Input The first line contains an integer R (1 ≤ R ≤ 100), the number of rides. The second line contains R integers, representing the capacity of each ride (the i-th integer denotes the capacity of the i-th ride). The third line contains an integer V (1 ≤ V ≤ 100), the number of visitors. Next, V lines follow, each containing a list of integers representing the rides that a particular visitor is willing to go on (the number of integers in each line can vary and each integer corresponds to a ride from 1 to R). Output Print \\"Yes\\" if it\'s possible to assign each visitor to a ride based on their preferences and the ride capacities, otherwise print \\"No\\". Examples Input 3 2 1 3 4 1 3 1 2 2 3 1 3 Output Yes Input 3 2 1 1 4 1 3 1 2 2 3 2 Output No","solution":"def assign_rides(ride_capacities, visitors_preferences): R = len(ride_capacities) V = len(visitors_preferences) # Initial ride allocation rides_allocation = [0] * R for preferences in visitors_preferences: assigned = False for pref in preferences: if rides_allocation[pref - 1] < ride_capacities[pref - 1]: rides_allocation[pref - 1] += 1 assigned = True break if not assigned: return \\"No\\" return \\"Yes\\" # Example usage def park_rides(R, ride_capacities, V, visitors_preferences): R - number of rides ride_capacities - List of integers denoting capacities of each ride V - number of visitors visitors_preferences - List of lists where each sublist contains integers of rides that a visitor is willing to go on return assign_rides(ride_capacities, visitors_preferences)"},{"question":"You are given a two-dimensional grid of size N times M. Each cell contains a single integer value. You have to perform a series of operations on this grid to update its values and to answer certain queries about the values in the grid. There are two types of operations: 1. 1 x y val — Set the value of the cell at position (x, y) to val. 2. 2 x1 y1 x2 y2 — Compute the sum of all values in the subgrid that has its top-left corner at (x1, y1) and its bottom-right corner at (x2, y2). You need to process all the operations efficiently. -----Input----- The first line contains three integers N, M, and q (1 le N, M le 1000, 1 le q le 100000) — the dimensions of the grid and the number of operations. Each of the next q lines describes an operation. The i-th line contains an integer t_i (1 le t_i le 2) which indicates the type of operation, followed by the parameters of the operation as described above. If t_i = 1, then 1 le x_i le N, 1 le y_i le M, and -10000 le val_i le 10000. If t_i = 2, then 1 le x1_i le x2_i le N and 1 le y1_i le y2_i le M. -----Output----- For each operation of type 2, print one integer — the sum of all values in the specified subgrid. -----Example----- Input 3 3 5 1 1 1 5 1 2 2 7 2 1 1 2 2 1 3 3 3 2 1 1 3 3 Output 12 15","solution":"def process_operations(N, M, operations): grid = [[0] * M for _ in range(N)] results = [] def update(x, y, val): grid[x][y] = val def query(x1, y1, x2, y2): total = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total += grid[i][j] return total for operation in operations: if operation[0] == 1: _, x, y, val = operation update(x - 1, y - 1, val) elif operation[0] == 2: _, x1, y1, x2, y2 = operation result = query(x1 - 1, y1 - 1, x2 - 1, y2 - 1) results.append(result) return results"},{"question":"A hotel has several rooms, and each room has different days on which it is booked. You are given a list of dictionaries, where each dictionary represents a room, containing the room number and a list of booked days. Your task is to implement a function that returns a dictionary with room numbers as keys and lists of available days (out of a given range of days) as values. If a room is booked for all the days in the given range, it should show \'Fully Booked\'. If there are no rooms data in the input list, return an empty dictionary. Write a function that takes two inputs: the list of rooms and a list of all days in the given range. Here\'s the function signature to guide you: ```python def get_room_availability(rooms, days): # your code here ``` Sample Input: ```python rooms = [ {\'room_number\': 101, \'booked_days\': [\'2023-01-01\', \'2023-01-03\']}, {\'room_number\': 102, \'booked_days\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\']}, {\'room_number\': 103, \'booked_days\': []} ] days = [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'] ``` Expected Output: ```python { 101: [\'2023-01-02\', \'2023-01-04\', \'2023-01-05\'], 102: \'Fully Booked\', 103: [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\', \'2023-01-05\'] } ``` **Constraints:** - Days in the input list are unique. - All dates are given in the format \'YYYY-MM-DD\'. - The room number is always a positive integer. - The booked days for each room will be a subset of the given range of days. **Assumptions:** - The function will focus on correctness and optimizing for clarity and efficiency within the given constraints. - The expected output should be a dictionary showing available dates for each room or \'Fully Booked\' for rooms that have no availability within the given range.","solution":"def get_room_availability(rooms, days): room_availability = {} for room in rooms: room_number = room[\'room_number\'] booked_days = room[\'booked_days\'] available_days = [day for day in days if day not in booked_days] if not available_days: room_availability[room_number] = \'Fully Booked\' else: room_availability[room_number] = available_days return room_availability"},{"question":"Given an array of integers `arr`, you need to find two integers `x` and `y` such that: 1. `x` is the sum of the maximum subarray. 2. `y` is the sum of the minimum subarray. Return the sum of `x` and `y`. -----Constraints----- - 1 leq |arr| leq 10^5 - -10^4 leq arr[i] leq 10^4 -----Input----- Input is given from Standard Input in the following format: n arr where `n` is the length of the array and `arr` is a space-separated list of n integers. -----Output----- Print the sum of `x` and `y`. -----Sample Input----- 5 1 -2 3 -2 5 -----Sample Output----- 5 -----Explanation----- - The maximum subarray is [1, -2, 3, -2, 5] with sum 5. - The minimum subarray is [-2] with sum -2. - Thus, x + y = 5 - 2 = 3.","solution":"def max_subarray_sum(arr): Finds the sum of the maximum subarray using Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def min_subarray_sum(arr): Finds the sum of the minimum subarray, using a modified Kadane\'s algorithm. min_ending_here = min_so_far = arr[0] for x in arr[1:]: min_ending_here = min(x, min_ending_here + x) min_so_far = min(min_so_far, min_ending_here) return min_so_far def sum_of_max_and_min_subarray(arr): max_sum = max_subarray_sum(arr) min_sum = min_subarray_sum(arr) return max_sum + min_sum"},{"question":"Function to Check for Consecutive Duplicates Write a function that checks a list to determine whether it contains any consecutive duplicate elements. If two consecutive duplicates are found, the function should return `True`. Otherwise, it should return `False`. # Example: - For the list `[1, 2, 3, 4, 4, 5]`, the function should return `True` because the element `4` is repeated consecutively. - For the list `[\'a\', \'b\', \'c\', \'d\', \'e\']`, the function should return `False` because no element is repeated consecutively. - For the list `[5, 5, 5, 6, 6, 7]`, the function should return `True` because the element `5` is repeated consecutively. # Function Signature: ```if:python def has_consecutive_duplicates(lst: List[Any]) -> bool: ``` ```if:not:python bool has_consecutive_duplicates(List<ElementType> lst); ``` # Assumptions: - The list can contain elements of any data type. - The list is non-empty. # Constraints: - Time complexity: O(n) - Space complexity: O(1)","solution":"def has_consecutive_duplicates(lst): Returns True if the provided list contains any consecutive duplicates, otherwise False. :param lst: List containing elements of any data type :return: True if there are consecutive duplicates, otherwise False for i in range(len(lst) - 1): if lst[i] == lst[i + 1]: return True return False"},{"question":"You are tasked with developing a software module that helps to organize a playlist management system. In this system, a user can add, remove, and rearrange songs in a playlist. One critical feature is to determine the rhythm consistency of a playlist. The rhythm of a song is defined as an integer. The goal is to find the longest consistent subplaylist where the rhythm difference between consecutive songs is the same throughout the subplaylist. -----Input:----- The input consists of multiple test cases. - The first line of input contains a single integer `T`, the number of test cases. - For each test case, the first line contains an integer `N`, the number of songs in the playlist. - The second line contains `N` space-separated integers representing the rhythm values of the songs in the playlist. -----Output:----- For each test case, output a single integer representing the length of the longest consistent subplaylist. -----Constraints----- - 1 <= T <= 100 - 1 <= N <= 10^5 - 1 <= rhythm values <= 10^9 -----Sample Input:----- 2 6 1 2 3 4 5 6 5 10 20 30 25 20 -----Sample Output:----- 6 3 -----EXPLANATION:----- - Example Case 1: The playlist [1, 2, 3, 4, 5, 6] has a consistent rhythm difference of 1 between all consecutive songs. Therefore, the longest consistent subplaylist is the entire playlist, with a length of 6. - Example Case 2: The playlist [10, 20, 30, 25, 20] has a longest consistent subplaylist [10, 20, 30] with a rhythm difference of 10. Therefore, the length is 3.","solution":"def longest_consistent_subplaylist(T, test_cases): Returns the length of the longest consistent subplaylist for each test case. results = [] for t in range(T): N = test_cases[t][0] rhythms = test_cases[t][1] if N == 1: results.append(1) continue max_length = 1 current_length = 1 current_diff = rhythms[1] - rhythms[0] for i in range(1, N): diff = rhythms[i] - rhythms[i-1] if diff == current_diff: current_length += 1 else: max_length = max(max_length, current_length) current_length = 2 current_diff = diff max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"In a forest, a botanist is studying a new species of colorful flowers. Each flower can be represented by an uppercase English letter based on its color. The botanist observes that the flowers form a line and that any two consecutive flowers might attract a specific kind of rare butterfly if they are different. The botanist wants to form a new line of flowers by selecting some (possibly all or none) flowers from the original line while ensuring there are no two consecutive flowers of the same color. Given a string representing the colors of the flowers in their original order, determine the lexicographically smallest string the botanist can form that satisfies the condition. Note that the botanist cannot change the order of the selected flowers and must pick them in increasing order of their original position. Input Format - The first line contains a single integer, Q, denoting the number of test cases. - Each of the following Q lines contains a single string of uppercase English letters, representing the colors of the flowers in the original line. Constraints 1 leq Q leq 10^5 1 leq |S| leq 10^5 The sum of the lengths of strings over all test cases does not exceed 10^6. Output Format For each test case, print a single line containing the lexicographically smallest string that can be formed under the specified condition. If the botanist cannot pick any flowers, print an empty line. Sample Input 3 BACCDBE ABBCCA ABC Sample Output ACDE ABCA ABC Explanation Test Case 1: From the string \\"BACCDBE\\": 1. Select \'A\' 2. Skip \'C\' (since \'A\' and \'C\' are different) 3. Skip \'C\' (since having two consecutive \'C\' is not allowed) 4. Select \'D\' 5. Skip \'B\' (skip because \'D\' is lexicographically smaller) 6. Skip \'E\' (since \'D\' and \'E\' are different) Thus, the resultant string is \\"ACDE\\". Test Case 2: From the string \\"ABBCCA\\": 1. Select \'A\' 2. Select \'B\' 3. Skip \'B\' (as they are the same) 4. Select \'C\' 5. Skip \'C\' 6. Select \'A\' Thus, the resultant string is \\"ABCA\\". Test Case 3: From the string \\"ABC\\": 1. Select all characters as they are different and already arranged in non-decreasing order: \\"ABC\\". In every test case, the resultant string is the lexicographically smallest string that meets the conditions of the problem.","solution":"def smallest_flower_lineup(flowers): Given a string of uppercase English letters representing flowers\' colors, this function returns the lexicographically smallest string that can be formed while ensuring no two consecutive flowers are of the same color. if not flowers: return \\"\\" result = [] result.append(flowers[0]) # Always pick the first flower for c in flowers[1:]: if c != result[-1]: result.append(c) return \'\'.join(result) def process_test_cases(test_cases): results = [smallest_flower_lineup(flowers) for flowers in test_cases] return results"},{"question":"Write a function that receives a list of positive integers and an integer X, and returns the list of integers where the integer X divides the sum of all the digits in each integer. Input: The input consists of: - An integer `N` (1 ≤ N ≤ 10^5), representing the number of elements in the list. - A list of N positive integers (1 ≤ each integer ≤ 10^9). - A positive integer `X` (1 ≤ X ≤ 100). Output: A list of integers from the input list where the sum of the digits of each integer is divisible by `X`. Constraints: - Each integer in the list has at least 1 digit and at most 9 digits. Example: Input: 5 123 456 789 987 654 3 Output: [123, 456, 789, 987] Explanation: - For 123, the sum of digits is 1 + 2 + 3 = 6, which is divisible by 3. - For 456, the sum of digits is 4 + 5 + 6 = 15, which is divisible by 3. - For 789, the sum of digits is 7 + 8 + 9 = 24, which is divisible by 3. - For 987, the sum of digits is 9 + 8 + 7 = 24, which is divisible by 3. - For 654, the sum of digits is 6 + 5 + 4 = 15, which is divisible by 3. Hence, all numbers except 654 should be included in the list.","solution":"def filter_integers_by_digit_sum(integers, X): Filters the provided list of integers to include only those whose digit sum is divisible by X. :param integers: List of integers to filter. :param X: The divisor for the digit sum. :return: Filtered list of integers. return [ num for num in integers if sum(int(digit) for digit in str(num)) % X == 0 ]"},{"question":"Lucy has recently taken up an interest in sorting algorithms. She wants to try a hand at an interesting problem related to partially sorted arrays. Given an array consisting of n integers, Lucy wants to know whether it\'s possible to partition the array into exactly two contiguous subarrays such that each subarray is sorted in non-decreasing order. Your task is to help Lucy by writing a function that checks if it\'s possible to partition the array into two contiguous non-decreasing subarrays. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000), the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6), representing the elements of the array. Output Print \\"YES\\" if the array can be partitioned into two contiguous non-decreasing subarrays. Otherwise, print \\"NO\\". Examples Input 5 2 2 3 1 4 Output YES Input 5 3 1 4 2 2 Output NO Input 3 1 2 3 Output YES","solution":"def can_partition_into_two_sorted_subarrays(n, arr): Determine if the array can be partitioned into two non-decreasing contiguous subarrays. Args: n : int : length of the array arr : List[int] : input array Returns: str : \\"YES\\" if possible to partition, otherwise \\"NO\\" for i in range(1, n): # Check if the left part [0:i] is non-decreasing left_sorted = all(arr[j] <= arr[j + 1] for j in range(i - 1)) # Check if the right part [i:n] is non-decreasing right_sorted = all(arr[j] <= arr[j + 1] for j in range(i, n - 1)) if left_sorted and right_sorted: return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, arrange the numbers such that the difference between any adjacent pair is minimized. If there are multiple answers, return the one that is lexicographically smallest. Example 1: Input: arr = [4, 2, 1, 3] Output: [1, 2, 3, 4] Explanation: The lexicographically smallest sequence with minimal differences between adjacent elements is [1, 2, 3, 4]. Example 2: Input: arr = [4, 3, 2, 2] Output: [2, 2, 3, 4] Explanation: Although both [2, 2, 3, 4] and [2, 3, 2, 4] have minimal differences between adjacent pairs, [2, 2, 3, 4] is lexicographically smaller. Your Task: Write a function arrangeArray that takes an array of integers as input and returns the desired output array. You are not required to read input or print anything. arrangeArray(input) -> output Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(arr) ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9","solution":"def arrangeArray(arr): Arranges the numbers in the array such that the difference between any adjacent pair is minimized. Returns the lexicographically smallest sequence if there are multiple answers. return sorted(arr)"},{"question":"Polycarp is once again organizing a programming contest for robots, but this time he wants to set certain constraints on the problems to make the contest more challenging. There are n problems in the contest, and each problem i has two difficulties associated with it: a primary difficulty d_i and a secondary difficulty s_i. Each robot will attempt to solve problems in a particular order based on their capabilities and preferences. Polycarp needs to ensure that the distribution of problems based on their primary difficulty d_i is balanced. Specifically, he wants to arrange the problems in such a way that the maximum difference between the number of problems in any two primary difficulty levels is minimized. -----Input----- The first line contains one integer n (1 le n le 100) — the number of problems. The second line contains n integers d_1, d_2, ..., d_n (1 le d_i le 10) — the primary difficulty levels of each problem. The third line contains n integers s_1, s_2, ..., s_n (1 le s_i le 10) — the secondary difficulty levels of each problem. -----Output----- Output one integer — the minimum possible value of the maximum difference between the number of problems in any two primary difficulty levels. -----Examples----- Input 5 1 2 2 3 3 5 5 4 6 7 Output 1 Input 4 1 1 2 2 4 3 2 1 Output 0 Input 10 1 1 1 2 2 2 3 3 3 3 10 9 8 7 6 5 4 3 2 1 Output 1 Input 7 1 2 3 4 5 6 7 7 6 5 4 3 2 1 Output 0 -----Note----- In the first example, there are three difficulty levels present: 1, 2, and 3. The optimal distribution would result in two problems each for difficulty levels 2 and 3, and one problem for difficulty level 1, leading to a maximum difference of 1. In the second example, the optimal distribution already results in an equal number of problems for difficulty levels 1 and 2, leading to a maximum difference of 0.","solution":"from collections import Counter def min_max_diff(n, d, s): Computes the minimum possible value of the maximum difference between the number of problems in any two primary difficulty levels. # Count the number of problems for each difficulty level difficulty_count = Counter(d) # Extract the counts and sort them counts = sorted(difficulty_count.values()) # If there\'s only one difficulty level, the difference is 0 if len(counts) == 1: return 0 # The minimum possible value of the maximum difference will be between the smallest and largest counts min_max_diff = counts[-1] - counts[0] return min_max_diff"},{"question":"Given a list of strings and a string `s`, find the longest string in the list which can be formed by deleting some characters of `s` without reordering the remaining characters. If there are multiple possible results, return the one which is smallest in lexicographical order. If there is no possible result, return an empty string. Example 1: Input: strings = [\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"], s = \\"abpcplea\\" Output: \\"apple\\" Explanation: Both \\"apple\\" and \\"plea\\" can be formed by deleting some characters from \\"abpcplea\\". Since \\"apple\\" is longer, we return \\"apple\\". Example 2: Input: strings = [\\"a\\", \\"b\\", \\"c\\"], s = \\"abpcplea\\" Output: \\"a\\" Explanation: All strings can be formed by deleting some characters from \\"abpcplea\\". Since \\"a\\", \\"b\\" and \\"c\\" all have the same length, we return the smallest one in lexicographical order. Example 3: Input: strings = [\\"a\\", \\"b\\", \\"c\\"], s = \\"xyz\\" Output: \\"\\" Explanation: None of the strings can be formed by deleting some characters from \\"xyz\\". Constraints: 1. The number of strings in the list will not exceed 1000. 2. The length of all given strings combined will not exceed 10^5. 3. The length of `s` will not exceed 1000. 4. All the strings in the inputs will only contain lowercase letters from \'a\' to \'z\'.","solution":"def find_longest_word(strings, s): Finds the longest string in the list `strings` which can be formed by deleting some characters of `s` without reordering the remaining characters. If there are multiple possible results, returns the one which is smallest in lexicographical order. If there is no possible result, returns an empty string. def can_form_by_deleting(word, s): it = iter(s) return all(char in it for char in word) strings = sorted(strings, key=lambda x: (-len(x), x)) for word in strings: if can_form_by_deleting(word, s): return word return \\"\\""},{"question":"A local drone delivery company \\"FlyFast\\" is looking to optimize its delivery routes within a newly developed smart city. The city is represented in a 2-dimensional grid. Each delivery point is a unique node on this grid with coordinates. The rules for drone delivery are as follows: 1. Each drone can only travel directly between delivery points once, either horizontally or vertically. 2. Drones can only take off from the main docking station, located at the origin (0, 0). 3. Upon completing each delivery, the drone must return to the main docking station. 4. The goal is to minimize the total distance travelled by a drone while completing exactly one round trip for each delivery point. Your task is to write a program that calculates the minimum distance a drone will cover to complete all deliveries and return to the docking station for each delivery. The drone can hover directly across any buildings as long as it moves in a straight horizontal or vertical line. Input: The first line consists of an integer T, representing the number of test cases. T test cases follow, each described in the following manner. The first line of each test case will contain an integer N, the number of delivery points in the city. The next N lines will contain two integers X[i] and Y[i] denoting the X and Y coordinates of the ith delivery point. Output: For each test case, a single line containing the total minimum distance the drone has to travel to complete all deliveries and return to the docking station for each and every return trip. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10000 -10^4 ≤ X[i], Y[i] ≤ 10^4 SAMPLE INPUT 1 3 1 1 2 2 3 3 SAMPLE OUTPUT 24 Explanation The round trip distance for each delivery point is calculated as follows: 1. For (1,1): (0,0) -> (1,1) and then return (1,1) -> (0,0) i.e. 2*(1+1) = 4 2. For (2,2): (0,0) -> (2,2) and then return (2,2) -> (0,0) i.e. 2*(2+2) = 8 3. For (3,3): (0,0) -> (3,3) and then return (3,3) -> (0,0) i.e. 2*(3+3) = 12 Total minimum distance covered = 4 + 8 + 12 = 24.","solution":"def calculate_total_distance(T, test_cases): results = [] for i in range(T): N, points = test_cases[i] total_distance = 0 for x, y in points: total_distance += 2 * (abs(x) + abs(y)) results.append(total_distance) return results # Parsing input def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 points = [] for _ in range(N): x = int(data[idx]) y = int(data[idx+1]) points.append((x, y)) idx += 2 test_cases.append((N, points)) results = calculate_total_distance(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function `find_substring_indices(s: str, substring: str) -> List[int]` that takes a string `s` and a substring `substring`, and returns a list of all starting indices where the given substring is found within `s`. If the substring is not found, return an empty list. **Function Signature:** ```python from typing import List def find_substring_indices(s: str, substring: str) -> List[int]: pass ``` # Example ```python print(find_substring_indices(\\"abracadabra\\", \\"abra\\")) # Output: [0, 7] print(find_substring_indices(\\"hello world\\", \\"l\\")) # Output: [2, 3, 9] print(find_substring_indices(\\"test\\", \\"xyz\\")) # Output: [] print(find_substring_indices(\\"\\", \\"a\\")) # Output: [] print(find_substring_indices(\\"aaaaa\\", \\"aa\\")) # Output: [0, 1, 2, 3] ``` # Constraints - The input string `s` and the substring `substring` consist of lowercase English letters. - The length of `s` will be in the range [0, 10^5]. - The length of `substring` will be in the range [1, 10^5].","solution":"from typing import List def find_substring_indices(s: str, substring: str) -> List[int]: Returns a list of all starting indices where the substring is found within s. If the substring is not found, returns an empty list. indices = [] index = s.find(substring) while index != -1: indices.append(index) index = s.find(substring, index + 1) return indices"},{"question":"You are given a grid of dimensions N x M, where each cell in the grid has an initial value of 0. You need to perform two types of operations on this grid: 1. **Update Operation**: Increase the value of each element in a specified sub-section of the grid by a given value. 2. **Query Operation**: Calculate the sum of the elements in a specified sub-section of the grid. # Operations 1. **Update Operation**: This operation consists of five integers: x1, y1, x2, y2, and val. * (x1, y1) represents the top-left corner of the sub-section. * (x2, y2) represents the bottom-right corner of the sub-section. * `val` is the value to be added to each element in the specified sub-section of the grid. 2. **Query Operation**: This operation consists of four integers: x1, y1, x2, y2. * (x1, y1) represents the top-left corner of the sub-section. * (x2, y2) represents the bottom-right corner of the sub-section. * You need to calculate the sum of all elements in the specified sub-section of the grid. # Input The first line contains two integers N and M that represent the dimensions of the grid (1 ≤ N, M ≤ 1000). The second line contains an integer Q, which denotes the number of operations (1 ≤ Q ≤ 10000). Each of the next Q lines describes an operation. The Update operation is given in the format \\"U x1 y1 x2 y2 val\\" and the Query operation is given in the format \\"Q x1 y1 x2 y2\\". # Output For each Query operation, output a single integer, which is the sum of the elements in the specified sub-section of the grid. # Example Input ``` 4 5 5 U 1 1 3 3 2 Q 1 1 2 2 U 2 2 4 4 3 Q 2 2 3 3 Q 1 1 4 5 ``` Output ``` 4 11 25 ``` # Explanation 1. After the first update operation, the grid looks like this (only the specified sub-section is shown): ``` 2 2 2 0 0 2 2 2 0 0 2 2 2 0 0 0 0 0 0 0 ``` 2. The first query operation calculates the sum of the sub-section (1, 1) to (2, 2): ``` 2 2 2 2 ``` The sum is 2 + 2 + 2 + 2 = 8. 3. After the second update operation, the grid looks like this: ``` 2 2 2 0 0 2 5 5 3 0 2 5 5 3 0 0 3 3 3 0 ``` 4. The second query operation calculates the sum of the sub-section (2, 2) to (3, 3): ``` 5 5 5 5 ``` The sum is 5 + 5 + 5 + 5 = 20. 5. The third query operation calculates the sum of the sub-section (1, 1) to (4, 5): The sum is 2 + 2 + 2 + 0 + 0 + 2 + 5 + 5 + 3 + 0 + 2 + 5 + 5 + 3 + 0 + 0 + 3 + 3 + 3 + 0 = 45.","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] def update(self, x1, y1, x2, y2, val): for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): self.grid[i][j] += val def query(self, x1, y1, x2, y2): total = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): total += self.grid[i][j] return total def process_operations(n, m, operations): grid = Grid(n, m) results = [] for operation in operations: parts = operation.split() cmd = parts[0] x1, y1, x2, y2 = map(int, parts[1:5]) if cmd == \'U\': val = int(parts[5]) grid.update(x1, y1, x2, y2, val) elif cmd == \'Q\': results.append(grid.query(x1, y1, x2, y2)) return results"},{"question":"Write a function `is_palindrome` that checks whether the given string is a palindrome. A palindrome is a string that reads the same forward and backward, ignoring case, spaces, and punctuation. The function should return `True` if the input string is a palindrome and `False` otherwise. You can assume the input string will contain only alphanumerics and basic punctuation.","solution":"import re def is_palindrome(s): Checks whether the given string is a palindrome, ignoring case, spaces, and punctuation. Args: s (str): The input string. Returns: bool: True if the input string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Task Given a string `s` which consists of lowercase letters, determine if it is a valid \\"happy string\\". A happy string is defined as a string where no two adjacent characters are the same. If the string is a happy string, return `True`, otherwise return `False`. Examples Input | Output --- | --- \\"happy\\" | False \\"abc\\" | True \\"aab\\" | False \\"baza\\" | True Note: `input` is a string containing only lowercase letters `a` to `z`.","solution":"def is_happy_string(s): Determine if the string s is a happy string. A happy string is defined as a string where no two adjacent characters are the same. :param s: Input string consisting of lowercase letters :return: True if the input string is a happy string, False otherwise for i in range(len(s) - 1): if s[i] == s[i + 1]: return False return True"},{"question":"Sophia enjoys playing with different types of dice. She has n dice in her collection, each of which can have a distinct number of faces. A die with f faces is numbered from 1 to f. Sophia rolls each die in her collection once and sums up the numbers that come up. She now wonders what the possible minimum and maximum sums of rolled numbers can be. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of dice in Sophia\'s collection. Each of the following n lines contains an integer f_{i} (1 ≤ f_{i} ≤ 100 000) — the number of faces on the i-th die in Sophia\'s collection. -----Output----- Output two numbers separated by a space — the minimum and maximum possible sums of the rolled numbers. -----Examples----- Input 3 6 8 4 Output 3 18 Input 2 12 20 Output 2 32 -----Note----- In the first sample, the minimum possible sum is 1 + 1 + 1 = 3 (if each die rolls a 1), and the maximum possible sum is 6 + 8 + 4 = 18 (if each die rolls its maximum number). In the second sample, the minimum possible sum is 1 + 1 = 2, and the maximum possible sum is 12 + 20 = 32.","solution":"def dice_sums(n, faces): Takes the number of dice and a list of their respective faces, and returns the minimum and maximum possible sums of rolled numbers. min_sum = n # minimum is achieved by each die rolling a 1 max_sum = sum(faces) # maximum is achieved by each die rolling its maximum number return min_sum, max_sum"},{"question":"You are given a string that contains both alphabetical characters and digits. Your task is to separate the alphabetic characters and the digits into two different strings and return them concatenated, with alphabets appearing first, followed by digits. #Examples: ``` separateAndConcatenate(\\"a1b2c3\\") should return \\"abc123\\" separateAndConcatenate(\\"h3e4l5l6o\\") should return \\"hello3456\\" separateAndConcatenate(\\"123Ab@C\\") should return \\"AbC123\\" ``` #Input A non-empty string containing alphanumeric characters and possibly other symbols of length `0 < str < 1000`. #Output A string where all the alphabetic characters in the input appear first, followed by all the numeric characters. Non-alphanumeric characters should be ignored.","solution":"def separateAndConcatenate(s): Separates alphabetic characters and digits into two different strings and concatenates them with alphabets first followed by digits. Parameters: s (str): The input string containing alphanumeric and possibly other symbols. Returns: str: The resultant string with alphabets followed by digits. alphabets = \'\'.join([char for char in s if char.isalpha()]) digits = \'\'.join([char for char in s if char.isdigit()]) return alphabets + digits"},{"question":"You\'re given an integer n and an integer p. Determine the sum of all integers from 1 to n that are divisible by p. **Input:** The first line contains one integer t (1 le t le 10^4)—the number of test cases. Each of the next t lines contains two integers n and p (1 le n le 10^9, 1 le p le 10^5). **Output:** For each test case, print the sum of all integers from 1 to n that are divisible by p. **Examples:** Input: 4 10 2 15 3 20 5 100 7 Output: 30 45 50 735 **Note:** For the first test case, integers from 1 to 10 that are divisible by 2 are 2, 4, 6, 8, and 10. Their sum is 2 + 4 + 6 + 8 + 10 = 30.","solution":"def sum_of_divisibles(n, p): Returns the sum of all integers from 1 to n that are divisible by p. m = n // p return p * m * (m + 1) // 2 def solve(test_cases): results = [] for n, p in test_cases: results.append(sum_of_divisibles(n, p)) return results"},{"question":"Write a function that simulates an inventory management system for a store. The system should be able to handle adding new products, updating product quantities, viewing the current stock, and checking if a product is in stock or out of stock. The function should receive a command string indicating the action to be taken and the necessary parameters for that command. Implement the following commands: 1. \\"ADD <product_name> <quantity>\\": Adds a new product with the specified quantity to the inventory. If the product already exists, ignore the command. 2. \\"UPDATE <product_name> <quantity>\\": Updates the quantity of an existing product. If the product does not exist, ignore the command. 3. \\"VIEW\\": Returns a dictionary with product names as keys and their quantities as values. 4. \\"CHECK <product_name>\\": Returns \\"In Stock\\" if the product is available and \\"Out of Stock\\" if it\'s not. Examples: ``` python inventory_management(\\"ADD apple 10\\") # Adds 10 apples to the inventory inventory_management(\\"ADD banana 5\\") # Adds 5 bananas to the inventory inventory_management(\\"UPDATE banana 20\\") # Updates banana quantity to 20 inventory_management(\\"VIEW\\") # Should return {\'apple\': 10, \'banana\': 20} inventory_management(\\"CHECK apple\\") # Should return \\"In Stock\\" inventory_management(\\"CHECK orange\\") # Should return \\"Out of Stock\\" ```","solution":"# Global inventory dictionary to hold product quantities inventory = {} def inventory_management(command): Handles the provided command for managing the inventory. Args: - command (str): The command string indicating the action and parameters. Returns: - For the \\"VIEW\\" command, returns a dictionary with product names as keys and their quantities. - For the \\"CHECK <product_name>\\" command, returns \\"In Stock\\" or \\"Out of Stock\\". - For the \\"ADD\\" and \\"UPDATE\\" commands, returns None. parts = command.split() action = parts[0] if action == \\"ADD\\": product_name = parts[1] quantity = int(parts[2]) if product_name not in inventory: inventory[product_name] = quantity elif action == \\"UPDATE\\": product_name = parts[1] quantity = int(parts[2]) if product_name in inventory: inventory[product_name] = quantity elif action == \\"VIEW\\": return inventory elif action == \\"CHECK\\": product_name = parts[1] return \\"In Stock\\" if product_name in inventory else \\"Out of Stock\\""},{"question":"A spaceship is on a rescue mission in the galaxy. It is given a 2D grid where each cell represents a region of space. The spaceship can move in four directions: up, down, left, or right. Some regions of space contain debris indicated by a \'D\' and some are empty indicated by a \'.\'. The spaceship starts at the top-left corner of the grid and its goal is to reach the bottom-right corner. The spaceship can only move into empty spaces and cannot pass through debris. Your task is to determine if there exists a path for the spaceship to reach its goal. If a path exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) which are the dimensions of the grid. The next n lines each contain m characters, either \'D\' or \'.\', representing the grid. Output Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". Example Input 5 5 . . . D . D D . D . . . . . D D . D D . . . . . . Output YES Input 3 3 . D . D D . D D . Output NO","solution":"def is_path_exist(n, m, grid): from collections import deque # Directions for moving: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] if grid[0][0] == \'D\' or grid[n-1][m-1] == \'D\': return \\"NO\\" # Using BFS for path finding queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Alice works at a factory where she oversees the production of a peculiar type of box. Each box has a numerical label, and these labels dictate the production sequence of the boxes. The boxes are initially produced with random labels, and Alice\'s task is to organize these boxes in ascending order of their labels. To do this, she uses a specific sorting mechanism. Alice\'s sorting mechanism works in cycles. In one cycle, she performs the following steps: 1. Starting from the first box, she picks any two consecutive boxes which are out of order and swaps them. 2. She continues this process until she reaches the end of the sequence. 3. If at least one swap happens during the cycle, she begins another cycle from the start of the sequence. 4. If no swaps happen during a cycle, the boxes are considered sorted, and the process stops. The hardness of sorting is defined as the number of cycles required for the boxes to be fully sorted. Your task is to help Alice by writing a program that will determine the hardness of sorting for any initial sequence of box labels provided. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) - the number of boxes. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) - the labels of the boxes. -----Output----- Print a single integer representing the hardness of sorting for the given sequence of box labels. -----Examples----- Input 5 4 3 2 1 5 Output 5 Input 6 1 3 5 7 9 11 Output 1 -----Note----- In the first sample, the sequence needs 5 cycles to be sorted: Cycle 1: Swap (4,3) -> 3 4 2 1 5 -> Swap (4,2) -> 3 2 4 1 5 -> Swap (4,1) -> 3 2 1 4 5 Cycle 2: Swap (3,2) -> 2 3 1 4 5 -> Swap (3,1) -> 2 1 3 4 5 Cycle 3: Swap (2,1) -> 1 2 3 4 5 Cycle 4: No swaps needed, sequence is fully sorted. In the second sample, the sequence is already sorted, so only 1 cycle is needed to verify that, which is the minimum hardness.","solution":"def hardness_of_sorting(n, labels): This function determines the hardness of sorting for any initial sequence of box labels provided in the list `labels`. The hardness is defined as the number of cycles required for the boxes to be fully sorted using a specific sorting mechanism. :param n: int, the number of boxes :param labels: list of int, each integer is a label of a box :return: int, the hardness of sorting cycles = 0 while True: swapped = False for i in range(1, n): if labels[i - 1] > labels[i]: labels[i - 1], labels[i] = labels[i], labels[i - 1] swapped = True cycles += 1 if not swapped: break return cycles"},{"question":"Create a function that takes a list of strings and returns a new string that is the longest common prefix of the input strings. If there is no common prefix, return an empty string. For example, given the list `[\\"flower\\", \\"flow\\", \\"flight\\"]`, the longest common prefix is \\"fl\\". For the list `[\\"dog\\", \\"racecar\\", \\"car\\"]`, there is no common prefix, so the function should return an empty string.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. if not strs: return \\"\\" prefix = strs[0] for string in strs[1:]: while string[:len(prefix)] != prefix: prefix = prefix[:len(prefix) - 1] if not prefix: return \\"\\" return prefix"},{"question":"A betting company has introduced a new game. The game is represented by a list of integers. Your task is to determine if it is possible to choose exactly two integers from the list such that their sum is odd. **Input** The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of test cases follows. The first line of each test case contains an integer n (2 leq n leq 100) — the length of the list. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9). **Output** For each test case, output \\"YES\\" (without quotes) if it is possible to choose exactly two integers from the list such that their sum is odd, and \\"NO\\" (without quotes) otherwise. **Examples** **Input:** ``` 3 4 1 2 3 4 3 2 4 6 5 1 3 5 7 9 ``` **Output:** ``` YES NO NO ``` **Explanation:** In the first test case, we can choose integers 1 and 2, whose sum is 3, which is odd. Thus, the output is \\"YES\\". In the second test case, all integers are even, so there is no way to get an odd sum by choosing two integers. Thus, the output is \\"NO\\". In the third test case, all integers are odd, so the sum of any two integers will be even. Thus, the output is \\"NO\\".","solution":"def can_form_odd_sum(t, cases): results = [] for i in range(t): n, a = cases[i] count_odd = sum(1 for num in a if num % 2 != 0) count_even = n - count_odd if count_odd > 0 and count_even > 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of N integers, the task is to divide the array into the minimum number of contiguous subarrays such that the sum of each subarray is either all non-negative or all non-positive. ------ Input ------ The first line of the input contains T, the number of test cases. Each test case consists of two lines: The first line contains an integer N, the number of elements in the array. The second line contains N integers, representing the elements of the array. ------ Output ------ For each test case, output a single line containing the minimum number of contiguous subarrays required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^6 ≤ A_i ≤ 10^6 ----- Sample Input 1 ------ 2 5 1 2 -3 -4 5 4 -1 -2 3 4 ----- Sample Output 1 ------ 3 2 ----- explanation 1 ------ In the first test case, we can divide the array as follows: [1, 2], [-3, -4], [5]. In the second test case, we can divide the array as follows: [-1, -2], [3, 4].","solution":"def min_subarrays(arr): Function to calculate the minimum number of contiguous subarrays required that each subarray\'s sum is either all non-negative or all non-positive. if not arr: return 0 count = 1 # Start with the first subarray for i in range(1, len(arr)): if (arr[i] >= 0 and arr[i - 1] < 0) or (arr[i] < 0 and arr[i - 1] >= 0): count += 1 return count def process_test_cases(T, test_cases): Function to process multiple test cases and return the results. results = [] for case in test_cases: N, arr = case results.append(min_subarrays(arr)) return results"},{"question":"You have been tasked with creating a security system for a museum. The security system has a recording device that logs instances of people entering and leaving the museum. The logs are unordered and do not distinguish between different people. Each instance is recorded as either an \\"entry\\" or an \\"exit\\". The objective is to determine the maximum number of people that were in the museum at any given time based on the log. A log is considered valid if the number of \\"exits\\" never exceeds the number of \\"entries\\" at any given point. However, you do not need to validate the input - assume the input log is always valid. -----Input----- The first line contains an integer n (1 le n le 10^5) indicating the number of log entries. Each of the next n lines contains a string which is either \\"entry\\" or \\"exit\\". -----Output----- Print the maximum number of people in the museum at any given time. -----Examples----- Input 6 entry entry exit entry entry exit Output 3 Input 3 entry exit entry Output 1","solution":"def max_people_in_museum(n, log_entries): Determines the maximum number of people in the museum at any given time based on the log. Args: n: int - Number of log entries log_entries: list of str - List of \\"entry\\" or \\"exit\\" log entries Returns: int - Maximum number of people in the museum at any given time current_count = 0 max_count = 0 for log in log_entries: if log == \'entry\': current_count += 1 if current_count > max_count: max_count = current_count elif log == \'exit\': current_count -= 1 return max_count # Example usage: # n = 6 # log_entries = [\\"entry\\", \\"entry\\", \\"exit\\", \\"entry\\", \\"entry\\", \\"exit\\"] # print(max_people_in_museum(n, log_entries)) # Output: 3"},{"question":"You are given a sequence of integers, and you need to find the length of the longest consecutive subsequence. A consecutive subsequence is a subsequence that consists of consecutive integers in terms of their values, not their indices. For example, in the sequence [100, 4, 200, 1, 3, 2], the longest consecutive subsequence is [1, 2, 3, 4], which has a length of 4. The task is to write a function that takes a list of integers and returns the length of the longest consecutive subsequence. Input format: - A single line of space-separated integers. Output format: - A single integer, the length of the longest consecutive subsequence. Constraints: 1 ≤ length of the sequence ≤ 10^5 -10^9 ≤ elements of the sequence ≤ 10^9 SAMPLE INPUT 100 4 200 1 3 2 SAMPLE OUTPUT 4","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest consecutive subsequence in the list of integers. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in arr: # Check if it\'s the start of a sequence if (num - 1) not in num_set: current_num = num current_streak = 1 # Check the consecutive numbers while (current_num + 1) in num_set: current_num += 1 current_streak += 1 # Update the maximum length longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Alice loves playing with strings and enjoys transforming them. She came across an interesting problem and needs your help to solve it. Given an input string, Alice wants to determine if it\'s possible to form a palindrome by rearranging some or all characters of the string. Write a function to help Alice check this. -----Input:----- - The first line contains an integer T, the number of test cases. - The following lines contain T strings, one per line. -----Output:----- For each string, output \\"YES\\" if it is possible to rearrange its characters to form a palindrome, and \\"NO\\" otherwise. -----Constraints----- - 1 leq T leq 1000 - 1 leq Length of each string leq 1000 -----Sample Input:----- 3 carrace hello aabbcc -----Sample Output:----- YES NO YES -----EXPLANATION:----- For 1) \\"carrace\\" can be rearranged to \\"racecar\\", which is a palindrome. For 2) \\"hello\\" cannot be rearranged into a palindrome. For 3) \\"aabbcc\\" can be rearranged into \\"abcabc\\", which is also a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string `s` can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def palindrome_possibility(test_cases): Determines if for each string in the `test_cases`, it is possible to rearrange its characters to form a palindrome. :param test_cases: List of strings to be tested :return: List of \\"YES\\" or \\"NO\\" for each string results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Bill\'s Electronics is a small shop that sells electronic components. Bill has a list of components and their prices. For an upcoming sale, Bill wants to offer discounts on some components. He asks you to write a program to calculate the discounted prices of the components. Each component in the list is represented by a string in the format \\"name_price_discount\\", where \\"name\\" is a string representing the component\'s name, \\"price\\" is an integer representing the original price of the component, and \\"discount\\" is an integer representing the discount percentage to be applied. You need to calculate the discounted price for each component and print the name and the discounted price rounded to the nearest integer. -----Input:----- - First line will contain N, the number of components. - Then N lines follow, each containing a string representing a component in the format \\"name_price_discount\\". -----Output:----- For each component, print its name and the discounted price, separated by a space. -----Constraints----- - 1 leq N leq 100 - The \\"price\\" will be a number between 1 and 1000. - The \\"discount\\" will be a number between 0 and 100. -----Sample Input:----- 3 resistor_50_10 capacitor_100_25 inductor_200_15 -----Sample Output:----- resistor 45 capacitor 75 inductor 170 Explanation: For the first component: discount of 10% on 50 is 5, so the discounted price is 50 - 5 = 45. For the second component: discount of 25% on 100 is 25, so the discounted price is 100 - 25 = 75. For the third component: discount of 15% on 200 is 30, so the discounted price is 200 - 30 = 170.","solution":"def calculate_discounted_prices(components): result = [] for component in components: # Split the component string into its respective parts name, price, discount = component.split(\'_\') price = int(price) discount = int(discount) # Calculate the discounted price discount_amount = (discount / 100) * price discounted_price = round(price - discount_amount) # Append the result as name and discounted price result.append(f\\"{name} {discounted_price}\\") return result # Example usage: # components = [\\"resistor_50_10\\", \\"capacitor_100_25\\", \\"inductor_200_15\\"] # print(calculate_discounted_prices(components))"},{"question":"In a certain town, there are N houses, each of which is connected through a series of roads. Your task is to determine the minimum number of roads that need to be upgraded so that every house can be reached from any other house via the upgraded road network. Each road between two houses has an integer cost associated with upgrading it. The goal is to choose the roads to upgrade such that the total cost is minimized while ensuring that there is a path between any pair of houses using only the upgraded roads. -----Input----- - The first line of the input contains two integers N and M denoting the number of houses and the number of roads, respectively. - Each of the next M lines contains three integers u, v, and c representing a road between houses u and v with a cost c to upgrade. -----Output----- - Print a single integer representing the minimum cost required to ensure that there is a path between any pair of houses using only the upgraded roads. -----Constraints----- - 1 le N le 1000 - 0 le M le 10000 - 1 le u, v le N - 1 le c le 1000 - It is guaranteed that the input describes a connected graph. -----Example Input----- 4 5 1 2 3 1 3 1 2 3 2 3 4 4 2 4 5 -----Example Output----- 7 -----Explanation----- We choose to upgrade the roads connecting houses 1-3 (cost 1), 2-3 (cost 2), and 3-4 (cost 4). This ensures that every house is reachable from every other house at a minimum total cost of 7. This solution forms a spanning tree of the graph with the minimum cost.","solution":"def minimum_cost_to_connect(N, M, roads): Returns the minimum cost required to ensure that all houses are reachable from each other by upgrading the roads. # Helper function to find the root of a node def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to union two subsets def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rank[rootX] < rank[rootY]: parent[rootX] = rootY elif rank[rootX] > rank[rootY]: parent[rootY] = rootX else: parent[rootY] = rootX rank[rootX] += 1 # Initialize parent and rank arrays parent = [i for i in range(N)] rank = [0] * N # Sort all edges in non-decreasing order of their cost roads.sort(key=lambda x: x[2]) total_cost = 0 num_edges = 0 for u, v, cost in roads: root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: total_cost += cost num_edges += 1 union(parent, rank, root_u, root_v) # If we already have N-1 edges, we can stop early if num_edges == N - 1: break return total_cost"},{"question":"You are given a string containing digits from \'0\' to \'9». You can remove at most k digits from the string so as to obtain the smallest possible number. Your goal is to write a program that finds this smallest possible number after removing at most k digits. -----Input----- - The first line of the input contains a string of digits s (1 leq |s| leq 10^5) representing the number. - The second line contains an integer k (0 leq k < |s|) representing the maximum number of digits that can be removed. -----Output----- - Output a single string representing the smallest possible number that can be obtained. -----Examples----- Input 1432219 3 Output 1219 Input 10200 1 Output 200 Input 10 2 Output 0 -----Note----- In the first example, removing the digits 4, 3, and 2 from \\"1432219\\" results in \\"1219\\", which is the smallest number possible. In the second example, removing the digit 1 from \\"10200\\" results in \\"0200\\", and removing leading zeros gives \\"200\\". In the third example, removing all digits from \\"10\\" results in an empty string, which is then interpreted as \\"0\\".","solution":"def remove_k_digits(num: str, k: int) -> str: stack = [] for digit in num: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # Remove the remaining k digits from the end if necessary stack = stack[:-k] if k else stack # Build the final number and remove leading zeroes result = \'\'.join(stack).lstrip(\'0\') return result if result else \\"0\\""},{"question":"Complete the `mostFrequentChar` method to find the character that appears most frequently in the given string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. For example: Input: \\"aabbbccde\\" Output: \\"b\\" Input: \\"xyzabcdxyz\\" Output: \\"x\\" The input string will always be non-empty and consist of lowercase alphabetical characters only. Adapted from typical string manipulation problems.","solution":"def mostFrequentChar(s): Returns the character that appears most frequently in the string s. If multiple characters have the same highest frequency, the one that appears first in the string is returned. from collections import Counter counter = Counter(s) max_count = max(counter.values()) for char in s: if counter[char] == max_count: return char # Example usage: # print(mostFrequentChar(\\"aabbbccde\\")) # Output: \\"b\\" # print(mostFrequentChar(\\"xyzabcdxyz\\")) # Output: \\"x\\""},{"question":"Given an array of integers, return the smallest missing positive integer. Example: Given [3, 4, -1, 1], your algorithm should return 2. Given [1, 2, 0], your algorithm should return 3. Your solution should run in O(n) time and use constant extra space.","solution":"def first_missing_positive(nums): Given an array of integers, return the smallest missing positive integer. n = len(nums) # First pass: Place each number in its right place for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with the number at its correct position nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Second pass: Find the first index whose value is incorrect for i in range(n): if nums[i] != i + 1: return i + 1 # If all values are correct, return the next number return n + 1"},{"question":"You need to write a program that processes a list of integers and returns a new list where each integer is replaced by the sum of its proper divisors. A proper divisor of a number is any divisor of the number except the number itself. Example 1: Input: N = 6 A[] = {6, 28, 12, 10, 15, 21} Output: 6 28 16 8 9 11 Explanation: Proper divisors of 6 are 1, 2, 3. Sum = 6 Proper divisors of 28 are 1, 2, 4, 7, 14. Sum = 28 Proper divisors of 12 are 1, 2, 3, 4, 6. Sum = 16 Proper divisors of 10 are 1, 2, 5. Sum = 8 Proper divisors of 15 are 1, 3, 5. Sum = 9 Proper divisors of 21 are 1, 3, 7. Sum = 11 Example 2: Input: N = 3 A[] = {1, 16, 20} Output: 0 15 22 Explanation: Proper divisors of 1 are none. Sum = 0 Proper divisors of 16 are 1, 2, 4, 8. Sum = 15 Proper divisors of 20 are 1, 2, 4, 5, 10. Sum = 22 Your Task: Complete the function sumOfDivisors() which takes the list a and an integer n as input parameters and returns a list of sums of proper divisors of the numbers in the list a. Expected Time Complexity: O(N*sqrt(max(A))) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^4 1 <= A[i] <= 10^5","solution":"from typing import List def sum_of_divisors(n: int, a: List[int]) -> List[int]: def proper_divisors_sum(x): if x <= 1: return 0 total = 1 for i in range(2, int(x**0.5) + 1): if x % i == 0: total += i if i != x // i: total += x // i return total return [proper_divisors_sum(num) for num in a]"},{"question":"Given a list of non-negative integers, write a function that returns the sum of digits of each integer in the list. The function should return the result as a list where each element corresponds to the sum of digits of the respective integer in the input list. Example Input: ``` 3 123 456 789 ``` Output: ``` 6 15 24 ``` Input: ``` 4 2021 999 1000 505 ``` Output: ``` 5 27 1 10 ``` You can assume that the input list always contains at least one integer and the integers are non-negative.","solution":"def sum_of_digits(nums): Given a list of non-negative integers, returns a list of sums of digits for each integer. :param nums: List of non-negative integers. :return: List of sums of digits. def digit_sum(n): return sum(int(digit) for digit in str(n)) return [digit_sum(num) for num in nums]"},{"question":"Given a list of integers, write a function that returns a list containing the majority elements from the input list. A majority element is any element that appears more than n/3 times in the list, where n is the size of the list. If there are no majority elements, return an empty list. Function Signature: ```python def find_majority_elements(nums: List[int]) -> List[int]: ``` **Input** - A list of integers, `nums` (1 ≤ |nums| ≤ 10^3, -10^4 ≤ nums[i] ≤ 10^4) - Example: `[3, 2, 3]` **Output** - A list containing all majority elements. - Example: `[3]` **Examples** ```python find_majority_elements([3, 2, 3]) # Returns: [3] find_majority_elements([1, 1, 1, 3, 3, 2, 2, 2]) # Returns: [1, 2] find_majority_elements([1, 2, 3]) # Returns: [] ``` **Explanation** In the first example, element `3` appears more than n/3 times in the list. In the second example, elements `1` and `2` both appear more than n/3 times. In the third example, no element appears more than n/3 times, hence the output is an empty list.","solution":"from typing import List from collections import Counter def find_majority_elements(nums: List[int]) -> List[int]: Find all elements that appear more than n/3 times in the list. if not nums: return [] n = len(nums) threshold = n // 3 counter = Counter(nums) majority_elements = [num for num, count in counter.items() if count > threshold] return majority_elements"},{"question":"Write a function that takes a string s consisting of lowercase English letters and returns a new string with each letter shifted to the next one in the alphabet. The last letter \'z\' should wrap around to \'a\'. Example 1: Input: s = \\"abcdef\\" Output: \\"bcdefg\\" Explanation: Each letter is shifted to the next one in the alphabet. Example 2: Input: s = \\"xyz\\" Output: \\"yza\\" Explanation: \'x\' is shifted to \'y\', \'y\' is shifted to \'z\', and \'z\' is wrapped around to \'a\'. Your Task: You don\'t need to read input or print anything. Complete the function shiftString() which takes s as input parameter and returns the shifted string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= s.length <= 100","solution":"def shiftString(s): Returns the string with each letter shifted to the next one in the alphabet. \'z\' wraps around to \'a\'. shifted = [] for char in s: if char == \'z\': shifted.append(\'a\') else: shifted.append(chr(ord(char) + 1)) return \'\'.join(shifted)"},{"question":"You have been hired to manage the water distribution in a developing city. The city has a network of reservoirs and pipelines connecting them. The reservoirs are connected in a way such that there is always exactly one path between any two reservoirs. Each reservoir can hold a certain amount of water, and each pipeline between reservoirs has a limit on the amount of water it can transmit. Given this network, you need to determine the maximum amount of water that can be distributed from a specific source reservoir to a specific destination reservoir while respecting the capacity limits of the pipelines. -----Input----- The first line contains an integer N (2 le N le 10^5), the number of reservoirs. The second line contains N integers where the i-th integer indicates the maximum capacity of the i-th reservoir. The next N-1 lines describe the pipelines. Each line contains three integers u, v, and c (1 le u, v le N, u neq v, 1 le c le 10^9), indicating a pipeline between reservoir u and reservoir v with a capacity of c. -----Output----- Output a single integer, the maximum amount of water that can be distributed from reservoir 1 to reservoir N. -----Explanation of sample 1----- In the example, there is a path from reservoir 1 to reservoir 5. We need to determine the maximum water that can flow through this path considering both the reservoir capacities and the pipeline limits. -----Examples----- Sample Input 1: 5 10 20 30 40 50 1 2 15 2 3 10 3 4 25 4 5 20 Sample Output 1: 10 Sample Input 2: 4 50 60 70 80 1 2 100 2 3 100 3 4 50 Sample Output 2: 50","solution":"def max_water_distribution(N, reservoir_capacities, pipelines): from collections import defaultdict import heapq # Create an adjacency list for the graph graph = defaultdict(list) for u, v, c in pipelines: graph[u].append((v, c)) graph[v].append((u, c)) # Dijkstra-like algorithm to find the minimum capacity in the path from 1 to N def dijkstra(source, destination): # Priority queue for BFS pq = [(-reservoir_capacities[source-1], source)] # Minimum pipeline capacity to each node min_capacity = {i: float(\'-inf\') for i in range(1, N+1)} min_capacity[source] = reservoir_capacities[source-1] while pq: cur_cap, u = heapq.heappop(pq) cur_cap = -cur_cap if u == destination: return cur_cap for v, cap in graph[u]: flow_cap = min(cur_cap, cap, reservoir_capacities[v-1]) if flow_cap > min_capacity[v]: min_capacity[v] = flow_cap heapq.heappush(pq, (-flow_cap, v)) return 0 # If no path found return dijkstra(1, N) # Example Usage N = 5 reservoir_capacities = [10, 20, 30, 40, 50] pipelines = [ (1, 2, 15), (2, 3, 10), (3, 4, 25), (4, 5, 20) ] print(max_water_distribution(N, reservoir_capacities, pipelines)) # Output: 10"},{"question":"Polycarp has two strings a and b. He can perform operations on the characters of these strings according to the following rules: - He can swap any two characters in the string a. - He can swap any two characters in the string b. Polycarp wants to know the minimum number of character swaps required to make the strings a and b equal. Your task is to determine the minimum number of swaps required for each pair of strings a and b in the input. If it is impossible to make the strings equal, return -1 for that pair. -----Input----- The first line of input contains one integer t (1 le t le 1000) — the number of test cases in input. The first line of each test case contains a single integer n (1 le n le 100) — the length of the strings a and b. The second line of each test case contains the string a of length n, containing lowercase Latin letters. The third line of each test case contains the string b of length n, containing lowercase Latin letters. -----Output----- Output t lines, each of which contains the answer to the corresponding test case of input. As an answer, output the minimum number of swaps required to make the strings a and b equal, or -1 if it is impossible. -----Examples----- Input 3 5 ababa baaba 4 abcd dcba 6 abcabc cbacba Output 1 2 2 -----Note----- In the first sample, only one swap is required to turn \'ababa\' into \'baaba\'. In the second sample, two swaps are needed: swap \'a\' with \'d\' and \'b\' with \'c\'. In the third sample, two swaps are needed as well: first swap \'a\' with \'c\', then swap \'b\' with \'c\'.","solution":"def min_swaps_to_equal_strings(t, test_cases): def count_swaps(a, b): if sorted(a) != sorted(b): return -1 return sum(1 for x, y in zip(a, b) if x != y) // 2 results = [] for n, a, b in test_cases: results.append(count_swaps(a, b)) return results"},{"question":"A research facility has developed a simulation of a new type of network which they want to analyze. The network is constructed from nodes connected by unidirectional edges. Each edge has a direction and a weight representing the time required to traverse it. The objective is to find the shortest path from the start node to all other nodes, taking into consideration the direction and weight of each edge. You are given: - An integer `N` representing the number of nodes in the network. - An integer `M` representing the number of directed edges. - A 2-D array `edges` of dimension M * 3, where each entry is represented as `[u, v, w]`, indicating a directed edge from node `u` to node `v` with a weight `w`. - An integer `start` representing the starting node. Your task is to implement a function `networkAnalysis(N, M, edges, start)` that returns a list of integers where the integer at index i represents the shortest time required to reach node `i` from the start node. If a node is not reachable from the start node, the corresponding entry should be -1. Example 1: Input: N = 5 M = 6 edges = [[0, 1, 2], [0, 2, 4], [1, 2, 1], [1, 3, 7], [2, 4, 3], [3, 4, 1]] start = 0 Output: [0, 2, 3, 9, 6] Explanation: - The shortest path from node 0 to node 1 is 2. - The shortest path from node 0 to node 2 is 3 (via node 1). - The shortest path from node 0 to node 3 is 9 (via nodes 1 -> 2 -> 4 -> 3). - The shortest path from node 0 to node 4 is 6 (via node 2). Example 2: Input: N = 3 M = 2 edges = [[0, 1, 10], [1, 2, 5]] start = 0 Output: [0, 10, 15] Explanation: - The shortest path from node 0 to node 1 is 10. - The shortest path from node 0 to node 2 is 15 (via node 1). Your Task: Implement the function `networkAnalysis(N, M, edges, start)` which returns a list of integers representing the shortest path from the start node to all other nodes as described above. If a node is not reachable, the entry should be -1. Expected Time Complexity: O(N^2) or better. Expected Auxiliary Space: O(N + M).","solution":"import heapq def networkAnalysis(N, M, edges, start): # Initialize the graph from edges graph = {i: [] for i in range(N)} for u, v, w in edges: graph[u].append((v, w)) # Initialize distances with infinity and set distance to start node as 0 distances = [float(\'inf\')] * N distances[start] = 0 # Use a priority queue to store nodes to be processed pq = [(0, start)] # (distance, node) while pq: curr_dist, u = heapq.heappop(pq) if curr_dist > distances[u]: continue for v, weight in graph[u]: distance = curr_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return [d if d != float(\'inf\') else -1 for d in distances]"},{"question":"You are planning a journey across a mountainous region with a group of hikers. There are several trails that connect different peaks, and each trail has a difficulty rating. To ensure the group\'s safety, you need to find a route from the starting peak to the destination peak that minimizes the maximum difficulty of any single trail on the path. The group starts at peak 1 and needs to reach peak n. The difficulty rating of each trail represents how challenging it is; your objective is to minimize the difficulty of the hardest trail you will have to cross. -----Input----- The first line of input contains two integers, n and m, where n is the number of peaks (numbered from 1 to n) and m is the number of trails. (2 leq n leq 1000, 1 leq m leq 20000) Each of the next m lines contains three integers u, v, and d, where u and v are the peaks connected by a trail and d is the difficulty rating of that trail (1 leq u, v leq n, u neq v, 1 leq d leq 1000). All trails are bidirectional. -----Output----- Output a single integer, the minimum possible value of the maximum difficulty rating on the path from peak 1 to peak n. -----Examples----- Sample Input: 4 5 1 2 5 1 3 6 2 3 2 2 4 3 3 4 4 Sample Output: 5","solution":"import heapq def find_min_max_difficulty(n, m, trails): def dijkstra(src, des, adj_list): max_difficulty = [float(\'inf\')] * (n + 1) max_difficulty[src] = 0 pq = [(0, src)] while pq: curr_difficulty, u = heapq.heappop(pq) for v, d in adj_list[u]: max_difficulty_on_path = max(curr_difficulty, d) if max_difficulty_on_path < max_difficulty[v]: max_difficulty[v] = max_difficulty_on_path heapq.heappush(pq, (max_difficulty_on_path, v)) return max_difficulty[des] adj_list = [[] for _ in range(n + 1)] for u, v, d in trails: adj_list[u].append((v, d)) adj_list[v].append((u, d)) return dijkstra(1, n, adj_list) def hiking_journey(n, m, trails): return find_min_max_difficulty(n, m, trails)"},{"question":"Given a binary tree, convert it into a Doubly Linked List (DLL) in such a way that the order of the DLL is the same as the Inorder traversal of the binary tree. The left and right pointers in nodes are to be used as previous and next pointers respectively in the converted DLL. The head pointer of the Doubly Linked List should point to the left-most node in the binary tree. Example 1: Input: 10 / 12 15 / / 25 30 36 Output: 25 12 30 10 36 15 Explanation: The tree should be converted to following DLL: 25 <-> 12 <-> 30 <-> 10 <-> 36 <-> 15 The DLL output is same as the inorder traversal of the given binary tree. Example 2: Input: 1 2 3 Output: 1 2 3 Explanation: The tree should be converted to following DLL: 1 <-> 2 <-> 3 The DLL output is same as the inorder traversal of the given binary tree. Your Task: You don\'t need to read input or print anything. Your task is to complete the function bToDLL() which takes one argument: root of the binary tree. The function should contain the logic to modify the binary tree so that it becomes a Doubly Linked List. Return the head of the DLL. The driver code will print the nodes in the DLL. Expected Time Complexity: O(N) Expected Auxiliary Space: O(Height of the Binary Tree). Constraints: 1 <= N <= 1000","solution":"class TreeNode: def __init__(self, key): self.data = key self.left = None self.right = None class DoubleListNode: def __init__(self, key): self.data = key self.prev = None self.next = None def bToDLL(root): if not root: return None # Initialize pointers needed for conversion head = None # Head of the DLL prev = None # Previous visited node for linking # Helper function to convert binary tree to DLL def inorder_convert(node): nonlocal head, prev if node: # Recur on the left child inorder_convert(node.left) # Update head of DLL if this is the leftmost node if not prev: head = node else: # Adjust the links node.left = prev prev.right = node # Mark this node as previous before moving to right subtree prev = node # Recur on the right child inorder_convert(node.right) inorder_convert(root) # Convert the nodes to DoubleListNode type current = head dll_head = DoubleListNode(current.data) dll_last = dll_head current = current.right while current: new_node = DoubleListNode(current.data) dll_last.next = new_node new_node.prev = dll_last dll_last = new_node current = current.right return dll_head def tree_to_dll_list(tree_root): dll_head = bToDLL(tree_root) result = [] current = dll_head while current: result.append(current.data) current = current.next return result"},{"question":"There is an island that is represented by a 2D grid of size m x n. Each cell in the grid can be one of three types: - 0: Represents water. - 1: Represents land. - 2: Represents a cell with a bridge. A bridge enables crossing to any immediate horizontal or vertical neighboring cells (up, down, left, or right), regardless of whether a neighboring cell is water or land. However, without a bridge, you can only move to another land cell horizontally or vertically. Your task is to determine the shortest path from the top-left corner (grid[0][0]) to the bottom-right corner (grid[m-1][n-1]). If no such path exists, return -1. If the starting cell is water, the output should be -1. Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each test case starts with two integers m and n (1 ≤ m, n ≤ 50), the dimensions of the grid. It is followed by m lines, each containing n integers (either 0, 1, or 2) separated by spaces, representing the grid. Output For each test case, print the shortest path length from the top-left corner to the bottom-right corner. If no path exists, print -1. Example Input 3 3 3 1 0 0 2 2 0 1 1 1 3 3 0 0 0 2 2 0 1 1 1 4 4 1 0 2 2 1 1 0 1 0 2 1 2 0 1 0 2 Output 4 -1 6 Explanation In the first test case, a possible shortest path from (0, 0) is -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2). The bridges help to bypass water cells. In the second test case, it is not possible to reach the bottom-right corner. In the third test case, a possible shortest path from (0, 0) is -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2) -> (3, 2) -> (3, 3).","solution":"from collections import deque def shortest_path_island(T, test_cases): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] results = [] for case in test_cases: m, n, grid = case if grid[0][0] == 0: results.append(-1) continue visited = [[False] * n for _ in range(m)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True found = False while queue: r, c, dist = queue.popleft() if r == m - 1 and c == n - 1: results.append(dist) found = True break for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and not visited[nr][nc]: if grid[nr][nc] == 1 or grid[nr][nc] == 2: queue.append((nr, nc, dist + 1)) visited[nr][nc] = True elif grid[r][c] == 2: queue.append((nr, nc, dist + 1)) visited[nr][nc] = True if not found: results.append(-1) return results"},{"question":"You are given a list of integers representing the heights of trees in a forest. You need to determine the maximum difference between the heights of any two trees in such a way that the shorter tree is always to the left of the taller tree. Input The first line contains an integer N, the number of trees. The second line contains N integers, representing the heights of the trees. Output Output a single integer, the maximum difference between the heights of any two trees such that the shorter tree comes before the taller tree. Constraints 1 ≤ N ≤ 10^5 1 ≤ heights of trees ≤ 10^9 SAMPLE INPUT 5 1 2 6 4 8 SAMPLE OUTPUT 7","solution":"def max_height_difference(n, heights): Returns the maximum difference between heights of any two trees where the shorter tree is to the left of the taller tree. if n < 2: return 0 min_height = heights[0] max_diff = 0 for i in range(1, n): if heights[i] > min_height: max_diff = max(max_diff, heights[i] - min_height) min_height = min(min_height, heights[i]) return max_diff"},{"question":"Ramesh owns a gift shop and he is very particular about the way he arranges the gift items in racks. He has rows of racks filled with different values of gift items. Each rack contains some items and each item has a specific value. The arrangement of items in a rack can be described as a sequence of integers. During holidays, he wants to maximize his profit by selecting some continuous subarray of items from any one rack such that the sum of values in the subarray is maximum. However, due to certain constraints, he can only pick a total of up to k contiguous items from a single rack at a time. Your task is to help Ramesh by writing a program that determines the maximum possible sum of values of at most k contiguous items from any one rack. -----Input----- The first line of the input contains an integer t (1 leq t leq 1000), the number of test cases. For each test case, the first line contains two integers n and k (1 leq n, k leq 10^5) — the number of items in the rack and the maximum number of contiguous items Ramesh can pick. The second line contains n integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4) — the values of the items in the rack. -----Output----- For each test case, print one integer — the maximum possible sum of values of at most k contiguous items from any one rack. -----Examples----- Input 2 7 3 10 -2 1 3 -1 2 5 5 2 4 -1 2 1 5 Output 10 6 -----Note----- In the first example, the subarray with a maximum sum of values with at most 3 contiguous items is [10] or [1, 3, 2] with a sum of 10. In the second example, the subarray with a maximum sum of values with at most 2 contiguous items is [4, 2] with a sum of 6.","solution":"def max_sum_of_k_items(t, test_cases): results = [] for test_case in test_cases: n, k, items = test_case max_sum = float(\'-inf\') current_sum = 0 for i in range(n): current_sum += items[i] if i >= k: current_sum -= items[i - k] max_sum = max(max_sum, current_sum) results.append(max_sum) return results # Read input from the user if __name__ == \\"__main__\\": t = int(input().strip()) test_cases = [] for _ in range(t): n, k = map(int, input().strip().split()) items = list(map(int, input().strip().split())) test_cases.append((n, k, items)) results = max_sum_of_k_items(t, test_cases) for result in results: print(result)"},{"question":"You are given a rectangular garden with rows and columns. The gardener wants to plant trees in the garden such that no two trees are in the same row, column, or diagonal. Given the dimensions of the garden, determine the number of ways the gardener can plant exactly one tree in each row and column satisfying these conditions. -----Input----- The first line of input contains an integer n (1 le n le 8) representing the size of the garden (i.e., the number of rows and columns in the garden). -----Output----- Output a single integer representing the number of possible ways to plant the trees. -----Examples----- Sample Input: 4 Sample Output: 2 Explanation: There are 2 valid arrangements of trees in a 4x4 garden that satisfy the constraints: 1. [ [T, ., ., .], [., ., T, .], [., T, ., .], [., ., ., T] ] 2. [ [., T, ., .], [T, ., ., .], [., ., ., T], [., ., T, .] ] (T: tree, .: empty plot)","solution":"def is_valid(board, row, col, n): Function to check if a tree can be planted at board[row][col]. for i in range(row): if board[i] == col or abs(board[i] - col) == abs(i - row): return False return True def solve_n_trees(n, row, board, solutions): Function to recursively solve the n-trees problem by backtracking. if row == n: solutions.append(board[:]) return for col in range(n): if is_valid(board, row, col, n): board[row] = col solve_n_trees(n, row + 1, board, solutions) def n_trees_ways(n): Function to return the number of ways to plant the trees in the garden. board = [-1] * n solutions = [] solve_n_trees(n, 0, board, solutions) return len(solutions) # Example usage # print(n_trees_ways(4)) # Expected output: 2"},{"question":"A restaurant is planning to organize tables for a group of friends. The friends sit around a circular table. The restaurant wants to ensure that every friend gets the dish they like the most, but they only have a limited number of each type of dish. There are N friends, and each friend has a preferred dish out of K types of dishes. The restaurant can prepare Q dishes of each type. Determine if it is possible to serve all friends their preferred dish. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ K ≤ 100 * 1 ≤ Q ≤ 10^3 * 1 ≤ Prefered dish number ≤ K Input Input is given from Standard Input in the following format: N K Q p_1 p_2 ... p_N where p_i is the preferred dish of the i-th friend. Output Print \\"YES\\" if it is possible to serve every friend their preferred dish. Otherwise, print \\"NO\\". Examples Input 6 3 2 1 2 3 1 2 3 Output YES Input 5 2 2 1 1 1 2 2 Output NO","solution":"def can_serve_all_friends(n, k, q, preferences): dish_count = [0] * (k + 1) for preference in preferences: dish_count[preference] += 1 for count in dish_count: if count > q: return \\"NO\\" return \\"YES\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = list(map(int, input().strip().split())) n = data[0] k = data[1] q = data[2] preferences = data[3:] print(can_serve_all_friends(n, k, q, preferences))"},{"question":"Ayesha is playing a game where she needs to navigate through a grid of size N x M consisting of cells, each with a certain number of jewels. The goal is to collect the maximum number of jewels starting from the top-left corner (0,0) and finishing at the bottom-right corner (N-1,M-1). She can only move either right or down from a cell. Input: The first line consists of two integers N and M. The next N lines contain M space-separated integers each, denoting the number of jewels in each cell of the grid. Output: Output a single integer denoting the maximum number of jewels Ayesha can collect. Constraints: 1 ≤ N, M ≤ 1000 0 ≤ Grid[i][j] ≤ 100 Note: Expected time complexity of the solution should be O(N * M). SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 29 Explanation: One possible path to collect the maximum number of jewels is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with jewel counts 1 + 2 + 3 + 6 + 9 = 21. Another possible path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) with jewel counts 1 + 4 + 7 + 8 + 9 = 29. Therefore, the maximum number of jewels Ayesha can collect is 29.","solution":"def max_jewels(N, M, grid): # Create a 2D list to store the maximum jewels collected to reach each cell dp = [[0]*M for _ in range(N)] # Initialize the first cell with the number of jewels in the top-left cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the grid for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Maximum jewels collected is in the bottom-right cell return dp[N-1][M-1]"},{"question":"Two robots are navigating an n times m grid, starting at the top-left corner (1, 1) and aiming to reach the bottom-right corner (n, m). The robots can only move right or down. However, to avoid collisions, they must move simultaneously and in sync -- that is, for every pair of moves (where one robot moves right and the other moves down, or vice versa), both robots must reach new unique cells respectively at exactly the same time. Determine the total number of unique paths the robots can take to reach their destination while maintaining synchronization. -----Input----- The first line contains two integers, n and m (1 le n, m le 100) — the number of rows and columns in the grid. -----Output----- Print a single integer — the total number of unique synchronized paths from (1, 1) to (n, m). -----Examples----- Input 2 2 Output 2 Input 3 3 Output 6 -----Note----- In the first example, the robots can both either move right and down or down and right to reach (2, 2) synchronously, thus making 2 unique paths. In the second example, the robots have more combinations: - Right, Right, Down, Down - Right, Down, Right, Down - Right, Down, Down, Right - Down, Right, Right, Down - Down, Right, Down, Right - Down, Down, Right, Right So, 6 unique paths are possible.","solution":"def unique_paths(n, m): Calculate the number of unique synchronized paths in a n x m grid for two robots. # Initialize a 2D dp array with 0s dp = [[0] * m for _ in range(n)] # Base case: there\'s one way to reach each cell in the first row and first column for i in range(n): dp[i][0] = 1 for j in range(m): dp[0][j] = 1 # Calculate number of ways to reach each cell (i, j) for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1]"},{"question":"A delivery helicopter company has been contracted to deliver goods between several warehouses in a city. The city layout can be represented as a grid of warehouses, where each cell (i, j) in the grid represents a warehouse located at row i and column j. Your task is to write a function that will calculate the shortest path for the helicopter to deliver goods from a starting warehouse to a destination warehouse. The helicopter can move up, down, left, or right, but it cannot move diagonally. Each movement to an adjacent warehouse takes exactly 1 unit of time. Some warehouse cells may be blocked, meaning that the helicopter cannot pass through these warehouses. Given the layout of the city grid, the starting location of the helicopter, and the destination warehouse, determine the minimum time required for the helicopter to reach the destination warehouse. If it is not possible to reach the destination warehouse, return -1. ------ Input ------ The input consists of: - An integer T, the number of test cases (1 ≤ T ≤ 10). - For each test case: - Two integers N and M (1 ≤ N, M ≤ 1000), representing the number of rows and columns in the grid, respectively. - N lines, each containing a string of M characters, where each character represents the type of warehouse cell: - \'.\' indicates an open warehouse that the helicopter can pass through. - \'#\' indicates a blocked warehouse that the helicopter cannot pass through. - Two pairs of integers (sx, sy) and (dx, dy), representing the starting and destination warehouse locations. Both pairs are 0-based indices (0 ≤ sx, sy, dx, dy < N). ------ Output ------ For each test case, output a single integer: the minimum time required for the helicopter to reach the destination warehouse, or -1 if it is impossible to reach the destination. ------ Sample Input ------ 2 5 5 ..... ..#.. ..#.. ..... ..... 0 0 4 4 4 4 .#.. .... #... ...# 0 0 3 3 ------ Sample Output ------ 8 -1","solution":"from collections import deque def shortest_path_warehouse(T, test_cases): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right results = [] for case in test_cases: N, M, grid, (sx, sy), (dx, dy) = case if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': results.append(-1) continue visited = [[False for _ in range(M)] for _ in range(N)] queue = deque([(sx, sy, 0)]) # (current_x, current_y, distance) visited[sx][sy] = True found = False while queue: x, y, dist = queue.popleft() if (x, y) == (dx, dy): results.append(dist) found = True break for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) if not found: results.append(-1) return results"},{"question":"You are given a connected, undirected graph with n nodes and m edges. The nodes are numbered from 1 to n. Your task is to determine whether it is possible to split the nodes of the graph into two non-empty subsets such that there are no edges between the nodes within each subset. In other words, you need to determine if the graph is bipartite. If such a partition is possible, output \\"YES\\" and the two subsets. Otherwise, output \\"NO\\". -----Input----- The first line of the input contains two integers n and m (2 le n le 100, 1 le m le 4950), which are the number of nodes and edges in the graph respectively. The following m lines contain two integers u and v (1 le u, v le n), representing an edge between nodes u and v. It is guaranteed that there are no self-loops or multiple edges between the same pair of nodes. -----Output----- If a bipartite partition of the graph is not possible, print \\"NO\\". Otherwise, print \\"YES\\" in the first line. In the second line, print two integers a and b, the sizes of the two subsets. In the third line, print the a nodes of the first subset, and in the fourth line, print the b nodes of the second subset. -----Examples----- Input 4 4 1 2 2 3 3 4 4 1 Output YES 2 2 1 3 2 4 Input 3 3 1 2 2 3 3 1 Output NO Input 5 4 1 2 1 3 2 4 3 5 Output YES 3 2 1 4 5 2 3","solution":"def is_bipartite(n, m, edges): from collections import deque # Create adjacency list adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) # Initialize colors array, 0: uncolored, 1: color 1, -1: color 2 color = [0] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 1 while queue: u = queue.popleft() for v in adj[u]: if color[v] == 0: color[v] = -color[u] queue.append(v) elif color[v] == color[u]: return False return True for i in range(1, n + 1): if color[i] == 0: if not bfs(i): return \\"NO\\" set1 = [i for i in range(1, n + 1) if color[i] == 1] set2 = [i for i in range(1, n + 1) if color[i] == -1] return f\\"YESn{len(set1)} {len(set2)}n{\' \'.join(map(str, set1))}n{\' \'.join(map(str, set2))}\\""},{"question":"You\'ve been hired by a company to help analyze employee availability over a week. There are n employees in the company, and each employee is available during certain days of the week at specific hours. The week is represented by 7 days (from Monday to Sunday), and for simplification, each day has 24 hourly slots (from 0 to 23). Your task is to process the employees\' availability schedules and determine the time slot with the maximum number of available employees. If there are multiple time slots with the same availability, return the earliest one. Write a program that receives the availability schedules of all employees and returns the day of the week and the starting hour of the time slot with the maximum number of available employees. Assume that the week starts on a Monday. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^3) — the number of employees in the company. The next n lines each contain the availability schedule for an employee. Each schedule is represented in the following format: day1 start1 end1 day2 start2 end2 ... Here, day is an integer from 0 to 6, where 0 represents Monday and 6 represents Sunday. start and end are integers representing the start hour (inclusive) and end hour (exclusive) of the availability on the specified day. -----Output----- Print two space-separated integers: the integer representing the day of the week with the maximum number of available employees (0 for Monday, 1 for Tuesday, ..., 6 for Sunday), and the starting hour of the time slot (an integer from 0 to 23). -----Examples----- Input 3 0 9 17 1 12 15 0 10 18 2 14 20 Output 0 10 Input 2 0 8 12 0 10 14 Output 0 10 Input 4 5 8 20 6 12 16 5 9 11 5 10 12 Output 5 10","solution":"def find_max_availability(n, schedules): availability = [[0] * 24 for _ in range(7)] for schedule in schedules: i = 0 while i < len(schedule): day, start, end = schedule[i], schedule[i + 1], schedule[i + 2] for hour in range(start, end): availability[day][hour] += 1 i += 3 max_available = 0 best_day = 0 best_hour = 0 for day in range(7): for hour in range(24): if availability[day][hour] > max_available: max_available = availability[day][hour] best_day = day best_hour = hour return best_day, best_hour"},{"question":"You are given a string and an integer k. You need to determine if it\'s possible to remove exactly k characters from the string to end up with a string that is a palindrome. A string is a palindrome if it reads the same forwards and backwards. If it\'s possible, return \\"YES\\". Otherwise, return \\"NO\\". -----Input:----- - The first line will contain an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer k. - The second line contains the input string s. -----Output:----- For each test case, output \\"YES\\" or \\"NO\\" in a single line. -----Constraints----- - 1 leq T leq 100 - 0 leq k leq text{length of s} leq 1000 -----Sample Input:----- 3 1 abca 2 abcba 1 abcd -----Sample Output:----- YES YES NO","solution":"def can_remove_k_chars_to_make_palindrome(k, s): def is_palindrome(s): return s == s[::-1] def helper(i, j, k, memo): if k < 0: return False if i >= j: return True if (i, j, k) in memo: return memo[(i, j, k)] if s[i] == s[j]: memo[(i, j, k)] = helper(i + 1, j - 1, k, memo) else: memo[(i, j, k)] = helper(i + 1, j, k - 1, memo) or helper(i, j - 1, k - 1, memo) return memo[(i, j, k)] if is_palindrome(s): return \\"YES\\" if k % 2 == 0 or len(s) % 2 == 1 else \\"NO\\" return \\"YES\\" if helper(0, len(s) - 1, k, {}) else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): k, s = test_cases[i] results.append(can_remove_k_chars_to_make_palindrome(k, s)) return results"},{"question":"Given a list of dictionaries, where each dictionary represents a student and contains their name and test scores in various subjects, write a function that calculates and returns the name of the student with the highest average score. If multiple students have the highest average score, return the name of the student who appears first in the list. Your function should take a single argument, a list, where each element is a dictionary containing the keys \'name\' and \'scores\'. The \'scores\' key maps to another dictionary, where the keys are the subject names and the values are the scores in those subjects. Input: A list of dictionaries, where each dictionary contains: - \'name\' (a string): The name of the student. - \'scores\' (a dictionary): Keys are strings representing subject names, and values are integers representing the scores in those subjects. Output: A string representing the name of the student with the highest average score. Example: Input: [ {\\"name\\": \\"Alice\\", \\"scores\\": {\\"Math\\": 90, \\"English\\": 80, \\"Science\\": 70}}, {\\"name\\": \\"Bob\\", \\"scores\\": {\\"Math\\": 80, \\"English\\": 70, \\"Science\\": 80}}, {\\"name\\": \\"Charlie\\", \\"scores\\": {\\"Math\\": 90, \\"English\\": 90, \\"Science\\": 90}} ] Output: \\"Charlie\\" Input: [ {\\"name\\": \\"Anna\\", \\"scores\\": {\\"Math\\": 85, \\"English\\": 95, \\"History\\": 90}}, {\\"name\\": \\"Elsa\\", \\"scores\\": {\\"Math\\": 80, \\"English\\": 90, \\"History\\": 85}}, {\\"name\\": \\"Mia\\", \\"scores\\": {\\"Math\\": 85, \\"English\\": 95, \\"History\\": 90}} ] Output: \\"Anna\\"","solution":"def highest_average_student(students): highest_avg = -1 top_student = \\"\\" for student in students: scores = student[\'scores\'].values() avg_score = sum(scores) / len(scores) if avg_score > highest_avg: highest_avg = avg_score top_student = student[\'name\'] return top_student"},{"question":"A company has employees working on various projects. Each employee is required to log the amount of time they spend each day working on a project. The company wants to find out which project has the most hours logged and which employee has spent the most time overall. You are given the logs of work hours for each employee along with the project they were working on for the day. Your task is to find the project with the most total logged hours and the employee with the most total logged hours. Input: The first line contains a single integer n (1 ≤ n ≤ 100) — the number of log entries. Each of the next n lines contains a space-separated triple: employee_id (a string with no spaces), project_id (a string with no spaces), and hours (an integer where 1 ≤ hours ≤ 100). Output: Output a single line with two space-separated strings: the project_id with the most total hours logged and the employee_id with the most total hours logged. If there is a tie for the most total hours for the project or the employee, output the one that appears first in the input. Examples: Input: 5 emp1 projA 4 emp2 projB 5 emp1 projA 3 emp3 projA 6 emp2 projB 2 Output: projA emp1 Input: 4 emp1 proj1 5 emp2 proj2 5 emp1 proj1 2 emp3 proj3 7 Output: proj1 emp1","solution":"def find_most_logged_hours(log_entries): project_hours = {} employee_hours = {} for entry in log_entries: employee_id, project_id, hours = entry.split() hours = int(hours) if project_id in project_hours: project_hours[project_id] += hours else: project_hours[project_id] = hours if employee_id in employee_hours: employee_hours[employee_id] += hours else: employee_hours[employee_id] = hours # Find project with most total hours max_project_hours = max(project_hours.values()) most_logged_project = None for project_id, hours in project_hours.items(): if hours == max_project_hours: most_logged_project = project_id break # Find employee with most total hours max_employee_hours = max(employee_hours.values()) most_logged_employee = None for employee_id, hours in employee_hours.items(): if hours == max_employee_hours: most_logged_employee = employee_id break return most_logged_project, most_logged_employee"},{"question":"Write a function that takes an array of integers and returns the index of the first peak element. A peak element is an element that is strictly greater than its neighbors. For the elements at the edges of the array, we only consider one neighbor. If multiple peak elements exist, return the index of the first one. If no peak element exists, return -1.","solution":"def find_peak_element(nums): Returns the index of the first peak element in the array of integers. A peak element is an element that is strictly greater than its neighbors. :param nums: List[int] :return: int if not nums: return -1 n = len(nums) if n == 1: return 0 for i in range(n): if i == 0: if nums[i] > nums[i + 1]: return i elif i == n - 1: if nums[i] > nums[i - 1]: return i else: if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: return i return -1"},{"question":"A group of friends are planning a hiking trip and need to prepare hiking gear kits for everyone. There are N items available, and each item has some weight and a usefulness score. The friends want to distribute the total weight among them as evenly as possible, while maximizing the usefulness score of the items in the kits. Each person should receive exactly one kit. Formally, you are given N items, where the i-th item has a weight Wi and a usefulness score Ui. You need to divide these items into K kits such that each kit is given to one person. The total weight of each kit should be roughly equal, and the sum of usefulness scores in each kit should be maximized. Output the maximum total usefulness score achievable. -----Input----- - The first line contains two integers, N and K, where N denotes the number of items, and K denotes the number of kits/friends. - The next N lines each contain two integers, Wi and Ui, describing the weight and usefulness score of the i-th item respectively. -----Output----- - Output a single integer: the maximum total usefulness score achievable by distributing the items into K kits. -----Constraints----- - 1 ≤ K ≤ N ≤ 100 - 1 ≤ Wi, Ui ≤ 1000 -----Example----- Input: 6 3 2 10 3 15 4 20 2 25 3 30 4 10 Output: 110 ----Explanation----- In this case, we can form three kits: - Kit 1 with items having weight 2 and 2, and usefulness scores 10 and 25, respectively. Total usefulness score = 10 + 25 = 35. - Kit 2 with items having weight 3 and 3, and usefulness scores 15 and 30, respectively. Total usefulness score = 15 + 30 = 45. - Kit 3 with items having weight 4 and 4, and usefulness scores 20 and 10, respectively. Total usefulness score = 20 + 10 = 30. Thus, the maximum total usefulness score achievable is 35 + 45 + 30 = 110.","solution":"def maximize_usefulness_score(N, K, items): This function calculates the maximum total usefulness score achievable by distributing N items into K kits such that each kit is given to one person. :param N: Integer, number of items (1 <= K <= N <= 100) :param K: Integer, number of kits/friends :param items: List of tuples, each containing the weight and usefulness score of the i-th item (weight, usefulness) :return: Integer, the maximum total usefulness score achievable items.sort(key=lambda x: x[1], reverse=True) # Sorting items based on usefulness score on descending order. total_score = 0 # Initialize an array to store the total weight of each kit kits_weight = [0] * K # In the sorted order, place each item in the kit with the least current total weight for weight, usefulness in items: min_idx = kits_weight.index(min(kits_weight)) kits_weight[min_idx] += weight total_score += usefulness return total_score # Example usage: N = 6 K = 3 items = [(2, 10), (3, 15), (4, 20), (2, 25), (3, 30), (4, 10)] print(maximize_usefulness_score(N, K, items)) # Output: 110"},{"question":"Alice loves string games. She has a string made up of lowercase English letters, and she wants to count how many substrings are there such that every substring contains exactly one distinct character. For example, in the string \\"aaab\\", the substrings with exactly one distinct character are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"b\\". Given Alice\'s string, can you help her determine the number of such substrings? -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) - the length of the string. The second line contains a string of n lowercase English letters. -----Output----- Print a single integer representing the number of substrings that contain exactly one distinct character. -----Examples----- Input 4 aaab Output 7 Input 3 abc Output 3 -----Note----- In the first sample, the valid substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"b\\". In the second sample, the valid substrings are \\"a\\", \\"b\\", \\"c\\".","solution":"def count_single_char_substrings(s): Counts the number of substrings that contain exactly one distinct character. Parameters: s (str): The input string made up of lowercase English letters. Returns: int: The number of substrings with exactly one distinct character. n = len(s) if n == 0: return 0 total_count = 0 i = 0 while i < n: char_count = 1 while i + 1 < n and s[i] == s[i + 1]: char_count += 1 i += 1 total_count += (char_count * (char_count + 1)) // 2 i += 1 return total_count"},{"question":"# Password Strength Check Alice recently started working at an IT company where security is taken very seriously. She has been asked to implement a password strength checker to ensure that the passwords set by the employees meet certain criteria. The criteria for a strong password are as follows: 1. The password must be at least 8 characters long. 2. The password must contain at least one lowercase letter, one uppercase letter, one digit, and one special character. The special characters are: `!@#%^&*()-+`. Alice needs to write a function that takes a string representing the password and returns a boolean indicating whether the password is strong. Write a function `is_strong_password(password: str) -> bool` that checks if the given password meets the above criteria. # Input Format - A single string `password` which represents the password to be checked. # Output Format - Return `True` if the password is strong according to the criteria. Otherwise, return `False`. # Constraints - The length of `password` is between 1 and 100, inclusive. - The password string contains only ASCII printable characters. # Example Input ```python password = \\"Aa1!Aa1!\\" ``` Output ```python True ``` Input ```python password = \\"password\\" ``` Output ```python False ``` # Explanation In the first example, the password \\"Aa1!Aa1!\\" meets all the criteria: - It is 8 characters long. - It contains lowercase letters \'a\', - It contains uppercase letters \'A\', - It contains digits \'1\', - It contains special characters \'!\'. In the second example, the password \\"password\\" is not strong because: - It does not contain any uppercase letter, - It does not contain any digit, - It does not contain any special character.","solution":"def is_strong_password(password: str) -> bool: Check if the password is strong based on given criteria. if len(password) < 8: return False has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \'!@#%^&*()-+\' for c in password) return has_lower and has_upper and has_digit and has_special"},{"question":"You are given a task to explore a labyrinth, which is represented as a grid of size N x M. The grid contains empty cells (represented by \'.\') and walls (represented by \'#\'). You are also given the starting position (S) and the treasure position (T) as coordinates in the grid. You need to determine if there is a path from the starting position to the treasure that only passes through empty cells. If such a path exists, output the length of the shortest path. If no such path exists, output -1. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 1000). - The next N lines each contain M characters denoting the grid. - The following line contains two integers x1 and y1, the coordinates of the starting position S (0 ≤ x1 < N, 0 ≤ y1 < M). - The final line contains two integers x2 and y2, the coordinates of the treasure position T (0 ≤ x2 < N, 0 ≤ y2 < M). Output: - Output the length of the shortest path from S to T if it exists, otherwise output -1. Examples: Input: 5 5 . . # . . . # . # . . # . # . . # . . . . . . . # 0 0 4 4 Output: 8 Input: 3 3 . # . # # # . # . 0 0 2 2 Output: -1 Note: - In the first example, the shortest path from (0, 0) to (4, 4) is of length 8. - In the second example, there is no path from (0, 0) to (2, 2).","solution":"from collections import deque def shortest_path_in_labyrinth(N, M, grid, start, treasure): x1, y1 = start x2, y2 = treasure if grid[x1][y1] == \'#\' or grid[x2][y2] == \'#\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * M for _ in range(N)] queue = deque([(x1, y1, 0)]) # Store (x, y, distance) visited[x1][y1] = True while queue: x, y, dist = queue.popleft() if (x, y) == (x2, y2): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a string of integers separated by a space, create a function that returns a new string with the first and last position values swapped. If the string contains less than two integers, return the original string unchanged. For instance, given the input string `\\"1 2 3 4 5\\"`, the output should be `\\"5 2 3 4 1\\"`. For the input string `\\"10 20\\"`, the output should be `\\"20 10\\"`. And for the input `\\"100\\"`, the output should be `\\"100\\"`.","solution":"def swap_first_last(s): Swaps the first and last integers in the string s. If the string contains less than two integers, returns the original string. Parameters: s (str): A string of integers separated by spaces. Returns: str: A new string with the first and last position values swapped. parts = s.split() if len(parts) < 2: return s parts[0], parts[-1] = parts[-1], parts[0] return \' \'.join(parts)"},{"question":"An inventory management system for a warehouse keeps track of the quantities of various products. Each time a new shipment arrives, the system updates the inventory by incrementing the quantities of the received products. Each time a shipment leaves, the system updates the inventory by decrementing the quantities of the sent products. Sometimes, to resolve discrepancies, the system needs to reset the quantities of all products to zero. You are tasked with implementing a part of this system. Specifically, you need to handle three types of operations: 1. \\"RECEIVE p q\\" - indicates that p products of type q have been added to the inventory. 2. \\"SHIP p q\\" - indicates that p products of type q have been removed from the inventory. 3. \\"RESET\\" - indicates that the quantities of all products should be reset to zero. You need to write a function that processes a list of these operations and returns the final quantities of all products, sorted by product type. -----Input----- The input consists of: - A list of strings, each representing an operation. Each operation is either \\"RECEIVE p q\\", \\"SHIP p q\\", or \\"RESET\\". (1 ≤ length of list ≤ 1000) -----Output----- Return a list of tuples, each containing a product type and its final quantity, sorted by product type. [(q1, quantity1), (q2, quantity2), ...] -----Examples----- Input [ \\"RECEIVE 3 A\\", \\"RECEIVE 5 B\\", \\"SHIP 2 A\\", \\"RESET\\", \\"RECEIVE 8 A\\" ] Output [(\'A\', 8)] Input [ \\"RECEIVE 10 C\\", \\"SHIP 5 C\\", \\"RECEIVE 20 B\\", \\"RESET\\", \\"RECEIVE 2 B\\", \\"SHIP 1 B\\" ] Output [(\'B\', 1)] -----Notes----- In the first example, after receiving 3 products of type A and 5 products of type B, the system ships 2 products of type A. Then, it resets all quantities to 0. Finally, it receives 8 products of type A. The final inventory consists of 8 products of type A. In the second example, the final inventory records 1 product of type B after all operations are processed, since all quantities are reset before the last receive and ship operations.","solution":"def process_inventory_operations(operations): Processes a list of inventory operations and returns the final quantities of each product, sorted by product type. Args: operations: List of strings, each representing an operation. Returns: List of tuples containing product type and its final quantity, sorted by product type. inventory = {} for operation in operations: operation_parts = operation.split() command = operation_parts[0] if command == \\"RESET\\": inventory.clear() else: amount = int(operation_parts[1]) product = operation_parts[2] if product not in inventory: inventory[product] = 0 if command == \\"RECEIVE\\": inventory[product] += amount elif command == \\"SHIP\\": inventory[product] -= amount sorted_inventory = sorted(inventory.items()) return sorted_inventory"},{"question":"You\'ve recently acquired a collection of magic cards. Each card has a power level and you want to build the strongest possible deck with a specified number of cards. Your goal is to select a subset of cards that maximizes the total power level without exceeding the given number of cards. Write a function `max_card_power(cards, k)` that takes in a list of integers `cards` representing the power levels of the cards and an integer `k` representing the number of cards you can pick. The function should return the maximum possible total power level of the selected cards. If you cannot pick any cards or the list is empty, return 0. **Examples:** ```python max_card_power([1, 3, 5, 2, 8, 7], 3) # returns 20 (selecting cards with power levels 8, 7, and 5) max_card_power([4, 4, 4, 4], 2) # returns 8 (selecting cards with power levels 4 and 4) max_card_power([10, 20, 30], 0) # returns 0 (cannot pick any cards) max_card_power([], 3) # returns 0 (no cards to pick) ```","solution":"def max_card_power(cards, k): Returns the maximum possible total power level of the selected cards. Args: cards (list of int): The power levels of the cards. k (int): The number of cards to pick. Returns: int: The maximum total power level of the selected cards. if not cards or k == 0: return 0 # Sort cards in descending order of power levels. sorted_cards = sorted(cards, reverse=True) # Pick the top k cards. return sum(sorted_cards[:k])"},{"question":"You are given a set of strings, and you need to process these strings to find out which of them are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a code that groups these anagrams together. Input The input contains an integer N denoting the number of test cases. Each test case starts with a single integer K representing the number of strings, followed by K strings. Output For each test case, output the groups of anagrams found in the list of strings. Each group of anagrams should be output on a new line, with the strings in each group separated by a space. The groups should be output in the order of their first occurrence in the input. Constraints 1 <= N <= 100 1 <= K <= 50 1 <= Length of each string <= 100 Example Input: 2 5 eat tea tan ate nat 3 cat dog tac Output: eat tea ate tan nat cat tac dog","solution":"def find_anagram_groups(n, test_cases): def group_anagrams(words): anagram_dict = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagram_dict: anagram_dict[sorted_word].append(word) else: anagram_dict[sorted_word] = [word] return list(anagram_dict.values()) result = [] for case in test_cases: k, strings = case anagram_groups = group_anagrams(strings) result.append(anagram_groups) return result"},{"question":"Given a list of integers, your task is to find the minimum possible absolute difference between any two integers in the list. You need to implement the following function: ```python def minimum_absolute_difference(arr): Given a list of integers, find the minimum absolute difference between any two distinct integers. Args: arr (List[int]): A list of integers Returns: int: The minimum absolute difference ``` -----Input----- The input consists of: - An integer t (1 le t le 10), the number of test cases. - For each test case: - An integer n (2 le n le 10^5), the number of elements in the list. - A list of n integers arr[i] (-10^9 le arr[i] le 10^9). -----Output----- For each test case, print a single integer, the minimum possible absolute difference between any two distinct integers in the list. -----Examples----- Input 2 3 3 -7 0 5 1 2 3 4 5 Output 3 1 -----Note----- In the first test case, the possible differences are: - |3 - (-7)| = 10 - |3 - 0| = 3 - |(-7) - 0| = 7 The minimum difference is 3. In the second test case, the possible differences are: - |1 - 2| = 1 - |1 - 3| = 2 - |1 - 4| = 3 - |1 - 5| = 4 - |2 - 3| = 1 - |2 - 4| = 2 - |2 - 5| = 3 - |3 - 4| = 1 - |3 - 5| = 2 - |4 - 5| = 1 The minimum difference is 1.","solution":"def minimum_absolute_difference(arr): Given a list of integers, find the minimum absolute difference between any two distinct integers. Args: arr (List[int]): A list of integers Returns: int: The minimum absolute difference # Sort the array to bring closest values next to each other arr.sort() # Initialize the minimum difference to a large value min_diff = float(\'inf\') # Iterate through the sorted array and compute the minimum difference for i in range(len(arr) - 1): min_diff = min(min_diff, abs(arr[i+1] - arr[i])) return min_diff"},{"question":"Given two strings str and sub_str, write a program to find if sub_str appears as a subsequence within str. A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. Example 1: Input: str = \\"abcdef\\" sub_str = \\"ace\\" Output: True Explanation: \\"ace\\" is a subsequence of \\"abcdef\\". Example 2: Input: str = \\"abcdef\\" sub_str = \\"aec\\" Output: False Explanation: \\"aec\\" is not a subsequence of \\"abcdef\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function isSubsequence(str, sub_str) which takes two strings as input and returns a boolean value indicating if sub_str is a subsequence of str. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(str), len(sub_str) <= 10^5 str and sub_str contain only lowercase English letters","solution":"def isSubsequence(main_str, sub_str): Determines if sub_str is a subsequence of main_str. Args: main_str (str): The main string. sub_str (str): The string to check as a subsequence. Returns: bool: True if sub_str is a subsequence of main_str, False otherwise. sub_len = len(sub_str) main_len = len(main_str) if sub_len == 0: return True sub_index = 0 for char in main_str: if char == sub_str[sub_index]: sub_index += 1 if sub_index == sub_len: return True return False"},{"question":"The kingdom of Arithmeticia is known for its unique numerical locks that guard precious treasures. Each lock consists of a series of wheels, each labeled with digits from 0 to 9. The wheels can be rotated forwards or backwards to change the total combination displayed. To open a lock, you must turn each wheel to match the target combination. However, there\'s a twist: rotating a wheel can affect other wheels in predefined ways. Given an initial combination and a target combination, your task is to determine the minimum number of rotations needed to unlock the device. A single rotation changes a wheel by one digit (either increasing or decreasing it). Here\'s the detail of wheel interaction: - Rotating the i-th wheel also rotates the (i+1)-th wheel by the same amount. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of wheels on the lock. The second line contains a string of length n, consisting of digits, representing the initial combination. The third line contains a string of length n, consisting of digits, representing the target combination. -----Output----- Print a single integer — the minimum number of rotations needed to unlock the device. -----Examples----- Input 3 123 321 Output 4 Input 2 00 99 Output 2 -----Note----- In the first example: - Rotate the first wheel from 1 to 2 (2 rotations needed for the first wheel and the second wheel updates to 3). - Then rotate the first wheel from 2 to 3 (2 more rotations affecting the first and second wheels) getting the second wheel to become 1 and thus matching the target combination. In the second example: - Rotate the first wheel from 0 to 9 (1 rotation affecting also the second wheel) - Rotate the first wheel from 9 to 8 (1 more rotation affecting also the second wheel) resulting in all wheels showing 9.","solution":"def min_rotations_to_unlock(n, initial_combination, target_combination): Returns the minimum number of rotations needed to unlock the device. def min_single_wheel_rotations(start, end): Helper function to calculate minimum rotations for a single wheel. return min(abs(start - end), 10 - abs(start - end)) rotations = 0 for i in range(n): start_digit = int(initial_combination[i]) target_digit = int(target_combination[i]) rotations += min_single_wheel_rotations(start_digit, target_digit) return rotations"},{"question":"# Task In this task, you will be implementing a function that computes a sequence similar to the Collatz conjecture sequence, but with a twist. The sequence ordered_list is defined as follows: 1. Begin with any positive integer `n` as the first term. 2. If `n` is even, replace `n` with `n / 2`. 3. If `n` is odd, and not equal to 1, replace `n` with `3 * n + 1`. 4. Append the new value of `n` to the sequence. 5. Repeat the process until `n` becomes 1. 6. Instead of stopping when `n = 1`, the sequence continues by reversing itself back to the original value of `n`. After reaching 1 and reversing, the sequence should stop when the original starting value `n` is reached again. For example, for `n = 5`, the sequence would be: `5, 16, 8, 4, 2, 1, 2, 4, 8, 16, 5` # Function Signature ```python def modified_collatz_sequence(n: int) -> List[int]: ``` # Input - A single integer `n` (1 ≤ n ≤ 10^6) representing the starting point of the sequence. # Output - A list of integers representing the modified Collatz sequence. # Example ```python assert modified_collatz_sequence(5) == [5, 16, 8, 4, 2, 1, 2, 4, 8, 16, 5] assert modified_collatz_sequence(3) == [3, 10, 5, 16, 8, 4, 2, 1, 2, 4, 8, 16, 5, 10, 3] ``` Test the above function well to ensure it handles edge cases and performs efficiently for large inputs. Good luck!","solution":"def modified_collatz_sequence(n): Returns the modified Collatz sequence for a given integer n. # Start with the initial value sequence = [n] # Generate sequence until we reach 1 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(n) # Add the reverse sequence back except for the last element (1) sequence.extend(sequence[-2::-1]) return sequence"},{"question":"----- Create a function that takes a string s as input and returns the length of the longest substring without repeating characters. -----Input----- A single string s consisting of n characters where 0 ≤ n ≤ 10^5. The string can contain any printable ASCII character. -----Output----- An integer representing the length of the longest substring of s that does not contain any repeating characters. -----Examples----- Input \\"abcabcbb\\" Output 3 Input \\"bbbbb\\" Output 1 Input \\"pwwkew\\" Output 3 -----Explanation----- In the first example, the longest substring without repeating characters is \\"abc\\", with a length of 3. In the second example, the longest substring without repeating characters is \\"b\\", with a length of 1. In the third example, the longest substring without repeating characters is \\"wke\\", with a length of 3. Note that \\"pwke\\" is a longer substring, but it contains repeating characters. -----Note----- A substring is a contiguous sequence of characters within a string.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_map = {} left = 0 max_length = 0 for right in range(n): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of integers and a number k. Your task is to rotate the list to the right by k steps, where k is non-negative. This means that the last k elements of the list will be moved to the front in the same order, and the others will be shifted to the right. Example 1: Input: nums = [1, 2, 3, 4, 5, 6, 7], k = 3 Output: [5, 6, 7, 1, 2, 3, 4] Explanation: Rotate the array by 3 steps to the right: After rotating, the array becomes [5, 6, 7, 1, 2, 3, 4]. Example 2: Input: nums = [-1, -100, 3, 99], k = 2 Output: [3, 99, -1, -100] Explanation: Rotate the array by 2 steps to the right: After rotating, the array becomes [3, 99, -1, -100]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotate() which takes the list nums and the integer k as inputs and modifies the list nums in-place to achieve the right rotation. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(nums) ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 0 ≤ k ≤ 10^5","solution":"def rotate(nums, k): Rotates the array \'nums\' to the right by \'k\' steps. n = len(nums) k = k % n # in case k is larger than the list length nums[:] = nums[-k:] + nums[:-k] # rotate the array in place"},{"question":"----Input---- The input consists of a single string s containing only lowercase English letters (1 ≤ |s| ≤ 100). ----Output---- Output a single integer representing the minimum number of contiguous substrings that can be formed from s such that each substring is a palindrome. ----Examples---- Input abac Output 2 Input aaaa Output 1 Input abc Output 3","solution":"def is_palindrome(s): Checks if the given string is a palindrome. return s == s[::-1] def min_palindromic_substrings(s): Returns the minimum number of contiguous substrings that can be formed from s such that each substring is a palindrome. if is_palindrome(s): return 1 return len(s)"},{"question":"Karan loves playing with digits. He has a favorite number, X, which is represented with a certain number of digits. One day, he wonders how many unique numbers can be formed with exactly X digits such that the sum of the digits of each number is equal to Y. Formally, given two integers X and Y, determine the number of valid X-digit numbers whose digits sum up to Y. Note: - X-digit numbers cannot start with the digit 0. - The range of X is: 1 ≤ X ≤ 100 - The range of Y is: 1 ≤ Y ≤ 900 Can you help Karan find the number of such X-digit numbers for given values of X and Y? --- Input --- The first line of input contains a single integer T denoting the number of test cases. The first and the only line of each test case contains two integers X and Y. --- Output --- For each test case, output a single line containing the number of valid X-digit numbers whose sum of digits equals Y. If no such number exists, output 0. --- Constraints --- 1 ≤ T ≤ 100 1 ≤ X ≤ 100 1 ≤ Y ≤ 900 --- Sample Input 1 --- 2 2 4 3 6 --- Sample Output 1 --- 4 21 --- Explanation 1 --- Test 1: There are 4 such 2-digit numbers whose digits sum up to 4: 13, 22, 31, 40. Test 2: There are 21 such 3-digit numbers whose digits sum up to 6: 105, 114, 123, 132, 141, 150, 213, 222, 231, 240, 312, 321, 330, 402, 411, 420, 501, 510, 600, 15, ...","solution":"from itertools import combinations_with_replacement from functools import lru_cache def count_x_digit_numbers_with_sum(x, y): Returns the number of available x-digit numbers whose digits sum up to y. @lru_cache(None) def count(length, total, leading): if length == 0: return 1 if total == 0 else 0 if total < 0: return 0 if length == 1: if leading and 1 <= total <= 9: return 1 if not leading and 0 <= total <= 9: return 1 return 0 count_numbers = 0 for i in range(0 if not leading else 1, 10): count_numbers += count(length-1, total-i, False) return count_numbers return count(x, y, True) def solve(test_cases): results = [] for x, y in test_cases: result = count_x_digit_numbers_with_sum(x, y) results.append(result) return results"},{"question":"You are given a string S consisting of only lowercase alphabets. Your task is to determine whether any permutation of the string is a palindrome. A palindrome is a string that reads the same forward and backward. Input Format: The first and only line contains the string S. Output Format: Print \\"YES\\" (without quotes) if any permutation of the string can be a palindrome, otherwise print \\"NO\\" (without quotes). Constraints: 1 ≤ |S| ≤ 10^6 SAMPLE INPUT civic SAMPLE OUTPUT YES Explanation One of the permutations of the string \\"civic\\" is \\"civic\\", which is a palindrome. So, the answer is YES.","solution":"def can_form_palindrome(s): Determines if any permutation of the given string can be a palindrome. Args: s (str): Input string containing only lowercase alphabets. Returns: str: \\"YES\\" if any permutation can form a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"Sarah is exploring different ways to invest into cryptocurrency. She has multiple transactions recorded over a period of time, showing the amount bought or sold in each transaction. We have to help Sarah calculate her net investment by computing the total amount she has bought and subtracting the total amount she has sold. Each transaction is recorded as a positive number for buying and a negative number for selling. Given the number of transactions and a list of transaction amounts, determine her net investment. -----Input----- The first line of input contains an integer N denoting the number of transactions (1 leq N leq 100). The second line contains N space-separated integers representing the transaction amounts (-10,000 leq text{transaction} leq 10,000). -----Output----- Output a single integer representing Sarah\'s net investment. -----Sample Explanation----- In Sample Input 1, Sarah has three transactions where 500 is bought, 200 is sold, and then 300 is bought. The net investment would be calculated as 500 - 200 + 300 = 600. -----Examples----- Sample Input 1: 3 500 -200 300 Sample Output 1: 600 Sample Input 2: 5 -1000 2000 300 -500 100 Sample Output 2: 900","solution":"def calculate_net_investment(N, transactions): Calculate Sarah\'s net investment given the number of transactions and a list of transaction amounts. :param N: Number of transactions (1 <= N <= 100) :param transactions: List of transaction amounts (-10000 <= transaction <= 10000) :return: Net investment as an integer return sum(transactions)"},{"question":"Problem: You are given a string S of length N consisting of lowercase alphabets (\'a\' - \'z\'). You need to perform Q operations on this string, which can be of two types: Type 1: 1 L R K: Rotate the substring S[L:R] (inclusive) to the left by K positions. Type 2: 2 L R: Query the number of distinct characters in the substring S[L:R] (inclusive). After performing each Type 2 operation, output the number of distinct characters in that substring. NOTE: The string S is 1-indexed. Input: The first line consists of the value of N. The next line consists of the string S of length N. The next line consists of the value of Q, denoting the number of operations. The next Q lines each consist of an operation of either Type 1: (1 L R K) or Type 2: (2 L R). Output: For every Type 2 operation, output the number of distinct characters in the substring S[L:R] on a new line. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 0 ≤ K ≤ R - L + 1 SAMPLE INPUT 7 abacabad 5 2 1 3 1 2 5 2 2 1 3 1 1 7 3 2 4 6 SAMPLE OUTPUT 2 2 2","solution":"def rotate_left(s, k): return s[k:] + s[:k] def process_operations(n, s, operations): s = list(s) result = [] for op in operations: if op[0] == 1: L, R, K = op[1], op[2], op[3] L, R = L - 1, R - 1 # convert to 0-indexed K = K % (R - L + 1) s = s[:L] + list(rotate_left(s[L:R+1], K)) + s[R+1:] elif op[0] == 2: L, R = op[1], op[2] L, R = L - 1, R - 1 # convert to 0-indexed substring = s[L:R+1] distinct_chars = len(set(substring)) result.append(distinct_chars) return result"},{"question":"You are a developer tasked with creating a to-do list application that has to handle a sequence of operations efficiently. Your application supports three types of operations: - **1 x**: Add a task with priority x. - **2**: Remove the highest-priority task. - **3**: Print the highest-priority task. When multiple tasks have the same priority, you should consider the most recently added task first. Given a sequence of operations, implement a program to manage the to-do list and perform the specified actions. -----Input----- The first line contains an integer q (1 leq q leq 10^6) — the number of operations. Each of the next q lines contains an operation of one of the three types described above. -----Output----- For each operation of type **3**, output the highest-priority task. -----Examples----- Input 7 1 4 1 9 1 2 3 2 3 2 Output 9 4 Input 5 1 5 1 5 3 2 3 Output 5 5 -----Note----- For the first test case, the sequence of operations is as follows: - Add task with priority 4. - Add task with priority 9. - Add task with priority 2. - Print the highest-priority task, which is 9. - Remove the highest-priority task, which is 9. - Print the highest-priority task, which is 4. - Remove the highest-priority task, which is 4. For the second test case, the sequence of operations is as follows: - Add task with priority 5. - Add task with priority 5. - Print the highest-priority task, which is 5. - Remove the highest-priority task, which is 5 (the most recently added one). - Print the highest-priority task, which is 5.","solution":"import heapq class ToDoList: def __init__(self): self.tasks = [] self.removed = set() self.counter = 0 def add_task(self, priority): # Using negative priority because Python\'s heapq is min-heap by default heapq.heappush(self.tasks, (-priority, -self.counter)) self.counter += 1 def remove_task(self): while self.tasks and self.tasks[0] in self.removed: heapq.heappop(self.tasks) if self.tasks: self.removed.add(heapq.heappop(self.tasks)) def get_highest_priority_task(self): while self.tasks and self.tasks[0] in self.removed: heapq.heappop(self.tasks) if self.tasks: return -self.tasks[0][0] return \'No tasks available\' def process_operations(self, operations): results = [] for operation in operations: if operation.startswith(\'1 \'): _, priority = operation.split() self.add_task(int(priority)) elif operation == \'2\': self.remove_task() elif operation == \'3\': results.append(self.get_highest_priority_task()) return results def run_todo_list_operations(q, operations): todo_list = ToDoList() return todo_list.process_operations(operations)"},{"question":"A chef is preparing to cook a large meal for a festival and needs help with the ingredient measurements. The chef has a list of N ingredients, and for each ingredient i (1≦i≦N), he knows the quantity Q_i needed in grams. However, the chef has a special set of M conversion recipes that he can use to convert a subset of the ingredients into a required form for the dish. Each recipe j (1≦j≦M) specifies that ingredient A_j can be converted from B_j amount to C_j amount. For each recipe, the goal is to calculate the total quantity of all the ingredients after the conversion. If a recipe is applied, the conversion instantly and perfectly changes the quantity of the specified ingredient. Write a program to determine how much of each ingredient is needed after applying each recipe exactly once. -----Constraints----- - All input values are integers. - 1≦N≦100 - 1≦Q_i≦10^5 - 1≦M≦100 - 1≦A_j≦N - 1≦B_j, C_j≦10^5 -----Input----- The input is given from Standard Input in the following format: N Q_1 Q_2 ... Q_N M A_1 B_1 C_1 A_2 B_2 C_2 : A_M B_M C_M -----Output----- For each recipe, calculate the total quantity of all the ingredients after applying that recipe, and print the results, one per line. -----Sample Input----- 3 200 300 400 2 2 300 150 3 400 800 -----Sample Output----- 650 1000 In the first recipe, ingredient 2 is converted from 300 grams to 150 grams, so the total is 200 + 150 + 400 = 750 grams. In the second recipe, ingredient 3 is converted from 400 grams to 800 grams, so the total is 200 + 300 + 800 = 1300 grams.","solution":"def calculate_quantities(N, quantities, M, conversions): results = [] for A, B, C in conversions: temp_quantities = quantities.copy() if temp_quantities[A - 1] == B: temp_quantities[A - 1] = C results.append(sum(temp_quantities)) else: results.append(\\"Invalid\\") return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) index += 1 quantities = [] for _ in range(N): quantities.append(int(data[index])) index += 1 M = int(data[index]) index += 1 conversions = [] for _ in range(M): A = int(data[index]) B = int(data[index + 1]) C = int(data[index + 2]) conversions.append((A, B, C)) index += 3 results = calculate_quantities(N, quantities, M, conversions) for result in results: print(result)"},{"question":"Write a function that accepts an integer \'n\' and prints a diamond pattern using the \'*\' symbol. The function should handle odd values of \'n\' where 3 ≤ n ≤ 19. Example: 1) Input: n = 3 Output: * *** * 2) Input: n = 5 Output: * *** ***** *** * SAMPLE INPUT 7 SAMPLE OUTPUT * *** ***** ******* ***** *** * Explanation The diamond pattern is printed in such a way that it spans \'n\' rows with the widest row containing \'n\' \'*\' symbols.","solution":"def print_diamond(n): Prints a diamond pattern with \'*\' symbols given an odd integer n (3 ≤ n ≤ 19). if n < 3 or n > 19 or n % 2 == 0: raise ValueError(\\"n must be an odd integer between 3 and 19\\") middle = n // 2 for i in range(n): stars = \'*\' * (2 * (middle - abs(middle - i)) + 1) spaces = \' \' * abs(middle - i) print(spaces + stars)"},{"question":"Implement a function that takes a string as input and returns the string with all its vowels removed.","solution":"def remove_vowels(s): Removes all vowels from the input string s. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"You are given a number n. You have to find the sum of all prime numbers less than or equal to n and return that sum. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Function Description Complete the `sumOfPrimes` function in the editor below. `sumOfPrimes` has the following parameter(s): - `int n`: an integer representing the upper limit (inclusive) for the prime numbers to be summed. Returns - `int`: the sum of all prime numbers less than or equal to `n`. If there are no prime numbers less than or equal to n, return 0. Input Format A single integer, the value of `n`. Constraints 1 leq n leq 10^6 Sample Input 10 Sample Output 17 Explanation Primes less than or equal to 10 are: 2, 3, 5, and 7. Their sum is 2 + 3 + 5 + 7 = 17.","solution":"def sumOfPrimes(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 # Sieve of Eratosthenes sieve = [True] * (n + 1) sieve[0] = sieve[1] = False p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 # Sum up all prime numbers return sum(p for p in range(n + 1) if sieve[p])"},{"question":"In a mystical forest, there are magic trees numbered from 1 to n. Each tree has a certain amount of magical energy initially. However, there\'s a magic spell that can transform a tree, and if it\'s cast on tree i, tree i+1 and tree i-1 also get transformed (if they exist). Transforming a tree results in increasing its magical energy by 1 if it was even, and decreasing it by 1 if it was odd. Luna, the forest guardian, needs to know the state of the forest\'s energy at any given time. Your task is to handle the following types of queries: 1. `update i` - Cast the transformation spell on tree i. If tree i+1 or tree i-1 exist, they get transformed as well. 2. `query l r` - Calculate the sum of magical energies of trees from l to r inclusive. Input The first line contains two integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) - the number of trees and the number of queries. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) - initial magical energies of the trees. Each of the next q lines contains a query of one of the two types: - update i (1 ≤ i ≤ n) - query l r (1 ≤ l ≤ r ≤ n) Output For each query of type query l r, output the sum of magical energies of trees from l to r inclusive in a new line. Examples Input 5 5 2 3 4 5 6 update 3 query 1 5 update 1 query 1 3 query 2 4 Output 17 10 8 Note In the first example: Initially, the energies are [2, 3, 4, 5, 6]. After the first `update 3`, it becomes [2, 2, 5, 4, 6] because tree 2 is transformed to 2 (3 was odd so -1), tree 3 is transformed to 5 (4 was even so +1), and tree 4 is transformed to 4 (5 was odd so -1). The `query 1 5` returns 2+2+5+4+6 = 19. After the second `update 1`, it becomes [3, 3, 5, 4, 6] because tree 1 is transformed to 3 (2 was even so +1), tree 2 is transformed to 3 (2 was even so +1). The `query 1 3` returns 3+3+5 = 11. The `query 2 4` returns 3+5+4 = 12. So the final output is: ``` 17 10 8 ```","solution":"class MysticalForest: def __init__(self, n, energies): self.n = n self.energies = energies def update(self, i): i -= 1 # 0-based index for internal list handling if 0 <= i < self.n: self._transform(i) if 0 <= i - 1 < self.n: self._transform(i - 1) if 0 <= i + 1 < self.n: self._transform(i + 1) def _transform(self, index): if self.energies[index] % 2 == 0: self.energies[index] += 1 else: self.energies[index] -= 1 def query(self, l, r): return sum(self.energies[l - 1: r]) def process_queries(n, initial_energies, queries): mystical_forest = MysticalForest(n, initial_energies) results = [] for query in queries: command, *params = query.split() if command == \\"update\\": i = int(params[0]) mystical_forest.update(i) elif command == \\"query\\": l, r = map(int, params) results.append(mystical_forest.query(l, r)) return results"},{"question":"Every day, a factory processes several metal rods of varying lengths. Each rod is measured in centimeters and must be cut into smaller pieces each no longer than a specified maximum length to fit into packaging boxes. However, there\'s an additional constraint - each cut incurs a fixed cost, and the cost must be minimized. The goal is to determine the minimum cost required to cut the rods under the given constraints. Write a program that takes a list of rod lengths and a maximum allowed length for each piece and computes the minimum cost of cutting all the rods. -----Input----- The first line of input will contain two integers N and L (1 leq N leq 100, 1 leq L leq 1000), representing the number of rods and the maximum allowed length of each piece, respectively. The second line will contain N integers a_1, a_2, ldots, a_N (1 leq a_i leq 1000), representing the lengths of the rods. The third line will contain one integer C (1 leq C leq 100), representing the fixed cost per cut. -----Output----- The output should be a single integer, the minimum cost to cut all the rods according to the given constraints. -----Examples----- Sample Input 1: 3 3 9 15 12 2 Sample Output 1: 18 Sample Input 2: 2 10 20 5 5 Sample Output 2: 5","solution":"def min_cut_cost(n, l, rod_lengths, c): Returns the minimum cost to cut all the rods to the maximum allowed length. n: number of rods l: maximum allowed length of each piece rod_lengths: list of rod lengths c: fixed cost per cut total_cost = 0 for rod in rod_lengths: if rod > l: cuts_needed = (rod - 1) // l # Using (rod - 1) to avoid extra cut if perfectly divisible total_cost += cuts_needed * c return total_cost"},{"question":"Acme Corporation is organizing a marathon event where every runner has to register online prior to the race day. Each runner is assigned a confirmation number generated by the registration system which ensures that the numbers are sequentially unique across the event. However, some registrants withdraw before the race day, creating gaps in the confirmation number sequence. Given a list of confirmation numbers of the runners who will participate in the marathon, you need to find the smallest missing confirmation number. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N indicating the number of registrants. - The second line contains N space-separated integers representing the confirmation numbers of the registrants. -----Output----- For each test case, output a single line containing the smallest missing confirmation number. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le a_i le 10^9 text{ for each valid } i -----Example Input----- 2 5 1 2 4 5 6 4 3 2 5 1 -----Example Output----- 3 4 -----Explanation----- Example case 1: The confirmation numbers are 1, 2, 4, 5, 6. The smallest missing number in the sequence is 3. Example case 2: The confirmation numbers are 3, 2, 5, 1. The smallest missing number in the sequence is 4.","solution":"def find_smallest_missing_confirmation_number(n, confirmation_numbers): This function finds the smallest missing confirmation number in a list. Args: n : int : the number of confirmation numbers confirmation_numbers: list : a list of confirmation numbers Returns: int : the smallest missing confirmation number confirmation_numbers = set(confirmation_numbers) for i in range(1, n + 2): if i not in confirmation_numbers: return i def process_test_cases(test_cases): Process multiple test cases to find the smallest missing confirmation number for each. Args: test_cases : list : a list of tuples, each containing the number of confirmation numbers and the list of those numbers Returns: list : a list of results, each the smallest missing confirmation number for the corresponding test case results = [] for n, numbers in test_cases: results.append(find_smallest_missing_confirmation_number(n, numbers)) return results"},{"question":"Ravi enjoys arranging numbers in different sequences. He came across a problem that involves forming the lexicographically smallest rotation of a given string. A rotation of a string is obtained by moving the leading characters to the end in any order. Given a string S, Ravi wants to determine the lexicographically smallest rotation of the string. Can you help Ravi find that rotation? Input: The first line contains a single integer T, the number of test cases. The following T lines each contain a single string S. Output: For each test case, output the lexicographically smallest rotation of the string S. Constraints: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 2 * 10^5 The sum of lengths of all strings in the input does not exceed 10^6. SAMPLE INPUT 3 cba baaa aaaa SAMPLE OUTPUT acb aaab aaaa Explanation 1. The smallest rotation for \\"cba\\" is \\"acb\\". 2. The smallest rotation for \\"baaa\\" is \\"aaab\\". 3. \\"aaaa\\" remains \\"aaaa\\" as it is already the smallest possible rotation.","solution":"def smallest_rotation(s): Returns the lexicographically smallest rotation of the given string s. n = len(s) s = s + s # Concatenate string to itself for easy rotations min_rotation = s[:n] # Initial rotation for i in range(1, n): rotation = s[i:i+n] if rotation < min_rotation: min_rotation = rotation return min_rotation def process_rotations(test_cases): Process each test case and return the results. Args: test_cases: list of strings. Returns: list of strings - lexicographically smallest rotations for each input string. results = [] for s in test_cases: results.append(smallest_rotation(s)) return results"},{"question":"You are given a string expression containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', including any alphanumeric characters and spaces. Your task is to determine if the string contains valid groups of these parentheses. A string containing any set of parentheses is valid if: 1. Each opening parenthesis has a corresponding closing parenthesis of the same type. 2. Parentheses close in the correct order, i.e., an open bracket must be closed by the same type of bracket and brackets must be closed in the correct order. Return true if the string has valid parentheses, otherwise return false. Example 1: Input: expression = \\"a + b - (c * d)\\" Output: true Example 2: Input: expression = \\"a + b - {c * (d] }\\" Output: false Example 3: Input: expression = \\"[{(a + b) * (c + d)} - e]\\" Output: true Constraints: * The length of the input string expression will not exceed 1000 characters.","solution":"def is_valid_parentheses(expression): Determines if the input string contains valid sets of parentheses. :param expression: A string containing any characters :return: True if the string has valid parentheses, otherwise False stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in matching_parentheses.values(): # opening brackets stack.append(char) elif char in matching_parentheses.keys(): # closing brackets if stack == [] or matching_parentheses[char] != stack.pop(): return False return stack == []"},{"question":"Write a function to compute the product of digits of a given number until the product is a single digit. Return the single-digit product. Note: The single-digit product of a number is obtained by multiplying its digits repeatedly until a single-digit product is reached. Example 1: Input: num = 9875 Output: 0 Explanation: Step-by-step computation: 9 * 8 * 7 * 5 = 2520 2 * 5 * 2 * 0 = 0 Since 0 is a single-digit, return 0. Example 2: Input: num = 39 Output: 8 Explanation: 3 * 9 = 27 2 * 7 = 14 1 * 4 = 4 Since 4 is a single-digit, return 4. Your Task: You don\'t need to read or print anything. Your task is to complete the function singleDigitProduct which takes num as input and returns the single-digit product of the digits of num. Expected Time Complexity: O(log(num)) Expected Space Complexity: O(1) Constraints: 1 ≤ num ≤ 10^9","solution":"def singleDigitProduct(num): Computes the product of digits of a given number repeatedly until the product is a single digit. while num >= 10: product = 1 while num > 0: digit = num % 10 num //= 10 product *= digit num = product return num"},{"question":"Palindrome Substrings A **palindrome** is a sequence of characters which reads the same backward as forward. For example, \\"radar\\", \\"level\\", and \\"A man a plan a canal Panama\\" are palindromes ignoring spaces and case differences. In this problem, your task is to determine how many substrings of a given string are palindromes. A substring is any sequence of consecutive characters within a string. For example, in the string \\"abba\\", the palindromic substrings are: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\". Hence, there are 6 palindromic substrings. Input The input consists of a single test case with a string s which contains only lowercase English letters and has a length satisfying 1 leq |s| leq 1000. Output Output a single integer which is the number of palindromic substrings in the given input string. Sample Input 1 ``` abba ``` Sample Output 1 ``` 6 ``` Sample Input 2 ``` level ``` Sample Output 2 ``` 7 ``` Sample Input 3 ``` abc ``` Sample Output 3 ``` 3 ``` Example Input ``` abba ``` Output 6","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string. n = len(s) count = 0 # Create a 2D array to store the palindrome status dp = [[False] * n for _ in range(n)] # Single letter substrings are palindromes for i in range(n): dp[i][i] = True count += 1 # Check for two-character palindromes for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Check for palindromes of length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count"},{"question":"You are tasked with simulating a battle between two players in a game. Each player has a deck of cards, each card having a certain attack value and defense value. The battle proceeds in turns, where each player plays one card. A turn consists of the following steps: 1. Both players simultaneously select a card from their decks and compare them. 2. The player with the higher attack value on the card wins the turn and deals damage equal to their card\'s attack value minus the opponent\'s card\'s defense value to the opponent. 3. If the attack value is equal, compare the defense values. The player with the higher defense value wins the turn but deals no damage. 4. If both attack and defense values are equal, the turn is a draw, and no damage is dealt. The game continues until both players run out of cards. The player with more remaining health at the end of the game wins. If both players have equal health, the game is a draw. Your task is to determine the outcome of the game. **Input** - The first line of the input contains one integer n (1 le n le 10^5) — the number of cards each player has in their deck. - The next n lines describe player 1\'s deck. Each line contains two integers a_i, d_i (1 le a_i, d_i le 100) — the attack value and the defense value of the i-th card in player 1\'s deck. - The next n lines describe player 2\'s deck in the same format. **Output** - Print \\"Player 1 wins\\" if player 1 has more remaining health. - Print \\"Player 2 wins\\" if player 2 has more remaining health. - Print \\"Draw\\" if both players have equal remaining health. **Example** _Input_ ``` 3 10 5 6 8 4 7 9 6 6 7 3 9 ``` _Output_ ``` Player 1 wins ``` **Explanation** - Turn 1: Player 1\'s card (10, 5) vs Player 2\'s card (9, 6). Player 1 wins and deals 4 damage to Player 2. - Turn 2: Player 1\'s card (6, 8) vs Player 2\'s card (6, 7). Player 1 wins but deals no damage due to equal attack values. - Turn 3: Player 1\'s card (4, 7) vs Player 2\'s card (3, 9). Player 1 wins and deals 1 damage to Player 2. Final health: - Player 1: 20 - Player 2: 15 - 4 - 1 = 10 Player 1 has more remaining health and wins.","solution":"def determine_winner(n, player1_deck, player2_deck): player1_health = 100 player2_health = 100 for i in range(n): p1_attack, p1_defense = player1_deck[i] p2_attack, p2_defense = player2_deck[i] if p1_attack > p2_attack: damage = p1_attack - p2_defense if damage > 0: player2_health -= damage elif p1_attack < p2_attack: damage = p2_attack - p1_defense if damage > 0: player1_health -= damage else: if p1_defense > p2_defense: pass # Player 1 wins the turn but deals no damage elif p1_defense < p2_defense: pass # Player 2 wins the turn but deals no damage else: pass # Draw, no damage dealt if player1_health > player2_health: return \\"Player 1 wins\\" elif player1_health < player2_health: return \\"Player 2 wins\\" else: return \\"Draw\\""},{"question":"Alice loves exploring strings and has designed a unique problem. She has two strings: S and P. She likes to check whether the string P exists within string S as a subsequence. Your task is to write a program that will help Alice determine if P is a subsequence of S. A subsequence of a string S is a new string generated from S with some (possibly none) characters deleted without changing the relative order of the remaining characters. Input Format The first line of input contains T, the number of test cases. The following T lines contain two strings S and P, each separated by a space. Output Format For each test case, output \\"Yes\\" if P is a subsequence of S, otherwise output \\"No\\". Constraints 1 ≤ T ≤ 10^5 1 ≤ |S|, |P| ≤ 10^5 The sum of lengths of all strings in one test does not exceed 10^6. Both S and P consist of lowercase English letters only. SAMPLE INPUT 3 abcde ace abcde aec abc abc SAMPLE OUTPUT Yes No Yes Explanation In the first query, \\"ace\\" is a subsequence of \\"abcde\\". In the second query, \\"aec\\" is not a subsequence of \\"abcde\\" because although \'a\' and \'e\' appear in sequence, \'c\' does not follow them in the order. In the third query, \\"abc\\" is a subsequence of \\"abc\\".","solution":"def is_subsequence(S, P): Returns \'Yes\' if P is a subsequence of S, otherwise returns \'No\'. m, n = len(S), len(P) i, j = 0, 0 while i < m and j < n: if S[i] == P[j]: j += 1 i += 1 return \'Yes\' if j == n else \'No\' def process_test_cases(test_cases): Processes multiple test cases to determine if P is subsequence of S for each case. results = [] for S, P in test_cases: results.append(is_subsequence(S, P)) return results"},{"question":"Write a program that manages train schedules and answers queries about the earliest available train from a given station. The program should support the following operations: * add_train(s, t): Add a train that departs from station s at time t. * next_train(s, t): Report the earliest train departing from station s at or after time t. If no such train exists, return -1. Note that the initial schedules are empty, and stations are numbered from 0 to n-1. Constraints * 1 ≤ n ≤ 100000 * 1 ≤ q ≤ 100000 * 0 ≤ s < n, 0 ≤ t < 2^31 - 1 Input n q com0 s0 t0 com1 s1 t1 ... comq-1 sq-1 tq-1 In the first line, n (the number of stations) and q (the number of queries) are given. Then, q queries are given where com represents the type of queries. \'0\' denotes add_train(s, t) and \'1\' denotes next_train(s, t). Output For each next_train operation, print the departure time of the earliest available train. Examples Input 3 5 0 0 100 0 1 200 0 2 300 1 0 50 1 1 250 Output 100 -1 Input 2 4 0 1 100 0 1 200 1 1 50 1 1 150 Output 100 200","solution":"import bisect class TrainSchedule: def __init__(self, num_stations): self.schedules = [[] for _ in range(num_stations)] def add_train(self, s, t): bisect.insort(self.schedules[s], t) def next_train(self, s, t): index = bisect.bisect_left(self.schedules[s], t) if index < len(self.schedules[s]): return self.schedules[s][index] return -1 def process_queries(n, q, queries): schedule = TrainSchedule(n) result = [] for query in queries: com, s, t = query if com == 0: schedule.add_train(s, t) elif com == 1: result.append(schedule.next_train(s, t)) return result"},{"question":"Joe is a software developer working with sequences of integers. He has a sequence A of N integers and needs to perform K operations. Each operation can be one of the following two types: 1. E X Y : Replace the value at the Xth position in the sequence with Y. 2. S L R : Calculate the sum of even numbers in the subarray from the Lth to the Rth position (inclusive). Joe is looking for an efficient way to carry out these operations. Can you assist him by implementing a solution? INPUT The first line of input contains two integers N and K denoting the number of elements in the sequence and the number of operations to be performed. The next line contains N space-separated integers which are the elements of the sequence. Each of the next K lines contains one of the two types of operations described above. OUTPUT For each operation of type S, output the sum of even numbers in the specified subarray. CONSTRAINTS 1 ≤ N, K ≤ 100,000 1 ≤ A[i], Y ≤ 10^9 1 ≤ X ≤ N 1 ≤ L ≤ R ≤ N SAMPLE INPUT 6 4 3 2 7 4 6 9 S 2 5 E 3 8 S 1 6 S 4 6 SAMPLE OUTPUT 12 20 10","solution":"def handle_operations(N, K, A, operations): results = [] for operation in operations: op_type = operation[0] if op_type == \'E\': X, Y = operation[1], operation[2] A[X - 1] = Y elif op_type == \'S\': L, R = operation[1], operation[2] sum_even = sum(x for x in A[L-1:R] if x % 2 == 0) results.append(sum_even) return results"},{"question":"Suppose you have a list of `n` strings, each of length `m`, representing a grid. Your task is to determine the number of rectangular sub-grids that satisfy the following conditions: 1. All characters in the sub-grid are the same. 2. The sub-grid forms a valid rectangle (i.e., it must have at least 2 rows and 2 columns). Write a function `countRectangles(grid: List[str]) -> int` that returns the number of such sub-grids. Example: Input: [\\"aaaa\\", \\"aaaa\\", \\"aaaa\\"] Output: 10 Explanation: The 10 rectangles are as follows: 1. Top-left corner (0, 0), bottom-right corner (1, 1) 2. Top-left corner (0, 1), bottom-right corner (1, 2) 3. Top-left corner (0, 2), bottom-right corner (1, 3) 4. Top-left corner (1, 0), bottom-right corner (2, 1) 5. Top-left corner (1, 1), bottom-right corner (2, 2) 6. Top-left corner (1, 2), bottom-right corner (2, 3) 7. Top-left corner (0, 0), bottom-right corner (2, 1) 8. Top-left corner (0, 1), bottom-right corner (2, 2) 9. Top-left corner (0, 2), bottom-right corner (2, 3) 10. Top-left corner (0, 0), bottom-right corner (2, 3) Constraints: - 1 ≤ n, m ≤ 50 - All strings have the same length `m`. - Strings contain only lowercase English letters (\'a\'-\'z\'). Your Task: - Complete the function `countRectangles(grid: List[str]) -> int`. Expected Time Complexity: O(n * m^3) Expected Auxiliary Space: O(1)","solution":"from typing import List def countRectangles(grid: List[str]) -> int: n = len(grid) m = len(grid[0]) count = 0 for r1 in range(n): for r2 in range(r1 + 1, n): for c1 in range(m): for c2 in range(c1 + 1, m): if all(grid[r][c] == grid[r1][c1] for r in range(r1, r2 + 1) for c in range(c1, c2 + 1)): count += 1 return count"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. In one move, you can choose any character in the string and change it to any other lowercase English letter. Your goal is to determine the minimum number of moves required to make the string s contain k distinct characters. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 100) and an integer k (1 le k le 26). -----Output----- For each test case, print one integer — the minimum number of moves required to make the string s contain exactly k distinct characters, or -1 if it is impossible. -----Example----- Input 3 abc 2 aaa 1 abcd 4 Output 1 0 0","solution":"def min_moves_to_k_distinct(s, k): from collections import Counter # Initial frequency count of characters freq = Counter(s) distinct_chars = len(freq) # If `k` is greater than the length of the string, it\'s impossible if k > len(s): return -1 # If the number of distinct characters is already `k` if distinct_chars == k: return 0 # If we have more distinct characters than `k`, we need to remove some # If we have fewer distinct characters than `k`, we need to add some moves = 0 # We need to reduce or increase the number of distinct characters to `k` if distinct_chars > k: # We need to reduce chars_to_remove = distinct_chars - k moves += chars_to_remove else: # We need to increase chars_to_add = k - distinct_chars moves += chars_to_add return moves def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(min_moves_to_k_distinct(s, k)) return results"},{"question":"You are given an integer array A of length N. You have to perform the following operation exactly once: Select an index i (1 ≤ i ≤ N) and delete A_{i} from A. The remaining parts of A are concatenated in the same order. What is the maximum sum you can obtain from the resulting array of length N-1? ------ Input Format ------ - The first line of input contains a single integer T - the number of test cases. The description of T test cases follow. - The first line of each test case contains N - the length of the array A. - The second line contains N space-separated integers representing the array A. ------ Output Format ------ For each test case, output the maximum sum that can be obtained after applying the operation exactly once. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 10^{5} - Sum of N does not exceed 2 cdot 10^{5} over all test cases. - -10^9 ≤ A[i] ≤ 10^9 ----- Sample Input 1 ------ 3 3 1 2 3 4 -1 -2 -3 -4 5 1 -2 3 -4 5 ----- Sample Output 1 ------ 5 -6 7 ----- Explanation 1 ------ Test Case 1: We have A = [1, 2, 3]. Possible sums are [2 + 3 = 5], [1 + 3 = 4], and [1 + 2 = 3]. The maximum sum is 5. Test Case 2: We have A = [-1, -2, -3, -4]. Possible sums are [-2 -3 -4 = -9], [-1 -3 -4 = -8], [-1 -2 -4 = -7], and [-1 -2 -3 = -6]. The maximum sum is -6. Test Case 3: We have A = [1, -2, 3, -4, 5]. Possible sums are [-2 + 3 - 4 + 5 = 2], [1 + 3 - 4 + 5 = 5], [1 - 2 - 4 + 5 = 0], [1 - 2 + 3 + 5 = 7], and [1 - 2 + 3 - 4 = -2]. The maximum sum is 7.","solution":"def maximum_sum_after_deletion(T, test_cases): results = [] for i in range(T): A = test_cases[i][1] total_sum = sum(A) max_sum = total_sum - min(A) results.append(max_sum) return results def process_input(input_data): input_lines = input_data.strip().split() T = int(input_lines[0]) index = 1 cases = [] for _ in range(T): N = int(input_lines[index]) A = list(map(int, input_lines[index + 1: index + 1 + N])) cases.append((N, A)) index += N + 1 return T, cases def output_results(results): for result in results: print(result)"},{"question":"Peter has a collection of different types of toys. Each toy is characterized by its type and a certain level of popularity. Peter wants to arrange these toys to showcase them, but he has a few rules in mind for the arrangement. The toys need to be grouped by their type first. Within each type, toys should be sorted according to their popularity in descending order. If two toys have the same popularity, they should be sorted lexicographically by their name. Peter gets a list of toys with their name, type, and popularity, and he needs your help to arrange them accordingly. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of toys. - The next N lines each contain a string toy_name, a string toy_type, and an integer popularity separated by space. -----Output----- For each test case, print the sorted list of toys as described. Each toy should be printed on a new line in the format toy_name toy_type popularity. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 - 1 leq text{length of } toy_name leq 100 - 1 leq text{length of } toy_type leq 100 - 1 leq popularity leq 10^6 -----Sample Input----- 1 5 robot action 120 car action 200 doll fashion 150 truck action 120 bear fashion 150 -----Sample Output----- car action 200 robot action 120 truck action 120 bear fashion 150 doll fashion 150 -----Explanation----- In the first test case, the toys are categorized by their type. Within each type, they are sorted by popularity in descending order, and for items with the same popularity, they are sorted lexicographically by their name. Thus, we first see the action type sorted by popularity and then lexicographically, followed by fashion types sorted similarly.","solution":"def arrange_toys(toy_list): Takes a list of toys and sorts them first by type, then by popularity in descending order, and then by name lexicographically if two toys have the same popularity. from collections import defaultdict # Group toys by their type toys_by_type = defaultdict(list) for toy in toy_list: toy_name, toy_type, popularity = toy toys_by_type[toy_type].append((toy_name, int(popularity))) sorted_toys = [] for toy_type in sorted(toys_by_type): toys_of_type = sorted(toys_by_type[toy_type], key=lambda x: (-x[1], x[0])) for toy in toys_of_type: sorted_toys.append((toy[0], toy_type, toy[1])) return sorted_toys def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] toys = test_cases[i][1] arranged_toys = arrange_toys(toys) results.append(arranged_toys) return results def main(): import sys input = sys.stdin.read data = input().splitlines() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 toys = [] for _ in range(N): toy_info = data[index].split() toy_name = \' \'.join(toy_info[:-2]) toy_type = toy_info[-2] popularity = int(toy_info[-1]) toys.append((toy_name, toy_type, popularity)) index += 1 test_cases.append((N, toys)) results = process_test_cases(T, test_cases) for result in results: for toy in result: print(f\\"{toy[0]} {toy[1]} {toy[2]}\\")"},{"question":"Problem In a busy hospital, there are N doctors and M patients. Each doctor and patient is assigned IDs from 0 to N-1 and 0 to M-1 respectively. Doctors and patients have different preferences for their matches. Each doctor has a priority list of patients they prefer to treat, sorted in decreasing order of preference. Similarly, each patient has a priority list of doctors they prefer to be treated by, sorted in decreasing order of preference. The hospital administration wants to create as many stable matches between doctors and patients as possible. A matching is considered stable if: 1. No unmatched doctor-patient pair have mutual preference for each other over their current match. 2. Each doctor is matched with at most one patient and vice versa. Your task is to find and print the stable matches following the above rules. Input The input is given in the following format: ``` N M P1 d1: p1, p2, ..., pk d2: p1, p2, ..., pk ... dN: p1, p2, ..., pk P2 p1: d1, d2, ..., dn p2: d1, d2, ..., dn ... pM: d1, d2, ..., dn ``` The first line contains two integers N and M representing the number of doctors and patients respectively. The next N lines contain P1 priority lists. Each line starts with a doctor ID followed by a colon and then the list of patient IDs in decreasing order of preference. The next M lines contain P2 priority lists. Each line starts with a patient ID followed by a colon and then the list of doctor IDs in decreasing order of preference. The number of preferences per doctor and the number of preferences per patient can vary but each ID in the preference list will be unique and valid. Output: Print the stable matches in the format: ``` doctor_id_1 patient_id_1 doctor_id_2 patient_id_2 ... doctor_id_k patient_id_k ``` Where k is the number of stable matches found. Example Input: ``` 4 4 P1 0: 2, 1, 3 1: 0, 2, 3 2: 3, 0, 1 3: 1, 2, 0 P2 0: 1, 2, 3 1: 3, 0, 2 2: 0, 1, 3 3: 2, 1, 0 ``` Output: ``` 0 2 1 0 2 3 3 1 ```","solution":"def stable_matching(N, M, doctor_preferences, patient_preferences): Finds the stable matches between doctors and patients. Args: N (int): Number of doctors. M (int): Number of patients. doctor_preferences (list of lists): Each doctor\'s list of preferred patients. patient_preferences (list of lists): Each patient\'s list of preferred doctors. Returns: list of tuples: List of stable matches (doctor_id, patient_id). # Initializing the proposals and pairings free_doctors = list(range(N)) engaged_patients = [-1] * M doctor_to_patient = [-1] * N patient_preference_rankings = [{d: i for i, d in enumerate(patient_preferences[p])} for p in range(M)] while free_doctors: doctor = free_doctors.pop(0) for patient in doctor_preferences[doctor]: if engaged_patients[patient] == -1: doctor_to_patient[doctor] = patient engaged_patients[patient] = doctor break else: current_doctor = engaged_patients[patient] if patient_preference_rankings[patient][doctor] < patient_preference_rankings[patient][current_doctor]: free_doctors.append(current_doctor) doctor_to_patient[doctor] = patient engaged_patients[patient] = doctor break stable_matches = [(doctor, patient) for doctor, patient in enumerate(doctor_to_patient) if patient != -1] return stable_matches def parse_input(input_string): lines = input_string.strip().split(\'n\') N, M = map(int, lines[0].split()) index = 2 doctor_preferences = [] for _ in range(N): line = lines[index].split(\':\')[1] doctor_preferences.append(list(map(int, line.split(\',\')))) index += 1 index += 1 patient_preferences = [] for _ in range(M): line = lines[index].split(\':\')[1] patient_preferences.append(list(map(int, line.split(\',\')))) index += 1 return N, M, doctor_preferences, patient_preferences def main(input_string): N, M, doctor_preferences, patient_preferences = parse_input(input_string) stable_matches = stable_matching(N, M, doctor_preferences, patient_preferences) output = \\"n\\".join(f\\"{doctor} {patient}\\" for doctor, patient in stable_matches) return output"},{"question":"Anna loves playing puzzle games and recently she has been solving a particular type of puzzle involving a grid of numbers. Given a grid where each cell contains a non-negative integer, the objective is to find the maximum sum of numbers collected starting from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. To help Anna solve the puzzle, write a program that computes the maximum sum of numbers based on the given grid constraints. -----Input----- The first line of the input contains two integers m and n (1 le m, n le 1000), representing the number of rows and columns in the grid. The next m lines contain n integers each (each integer between 0 and 100), representing the grid. -----Output----- Output a single integer, the maximum sum of numbers that can be collected along a path from the top-left to the bottom-right corner of the grid. -----Examples----- Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 12 Sample Input: 2 2 1 2 3 4 Sample Output: 8","solution":"def max_path_sum(grid): Returns the maximum sum of numbers collected starting from the top-left corner to the bottom-right corner of the grid, where you can only move either down or right. m = len(grid) n = len(grid[0]) # Create a 2D dp array to store the maximum path sums dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"# Task Write a function that finds the missing number in an unsorted array containing integers from `0` to `n`. # Example For `arr = [3, 0, 1]`, the output should be `2`; For `arr = [0, 1]`, the output should be `2`; For `arr = [9, 6, 4, 2, 3, 5, 7, 0, 1]`, the output should be `8`. # Input/Output - `[input]` array `arr` An array of integers containing numbers from `0` to `n` with one missing number. - `[output]` an integer The missing number in the array.","solution":"def find_missing_number(arr): Finds the missing number in an unsorted array containing integers from 0 to n. n = len(arr) total_sum = n * (n + 1) / 2 array_sum = sum(arr) return int(total_sum - array_sum)"},{"question":"Alice is a software developer who likes writing clean and efficient code. She has N tasks to complete, each with a specific deadline and a duration. Alice can work on only one task at a time and needs to complete each task before or on its deadline to avoid penalties. Help Alice figure out the maximum number of tasks she can complete without missing any deadlines. You are given two arrays, `deadline` and `duration`. The `deadline[i]` represents the last day by which the ith task must be completed, and `duration[i]` represents the number of days the ith task takes to complete. All tasks begin at day 1. Write a function `MaxTasksCompleted` that takes the arrays `deadline` and `duration`, and the integer `N` (the number of tasks), and returns the maximum number of tasks Alice can complete without missing any deadlines. # Example 1: Input: `deadline = [4, 2, 5, 8]`, `duration = [2, 1, 3, 2]`, `N = 4` Output: `3` Explanation: Alice can complete tasks in the following order to meet all deadlines: 1. Task 2: starts at day 1, ends at day 2, deadline is day 2. 2. Task 1: starts at day 3, ends at day 4, deadline is day 4. 3. Task 4: starts at day 5, ends at day 6, deadline is day 8. If Alice attempts to complete all tasks, she will miss the deadline of Task 3. # Example 2: Input: `deadline = [3, 3, 3, 3]`, `duration = [3, 3, 3, 3]`, `N = 4` Output: `1` Explanation: Alice can complete only one task because each task takes 3 days, and all deadlines are day 3. # Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `MaxTasksCompleted` that takes two arrays (`deadline`, `duration`), and the integer `N` and returns the maximum number of tasks Alice can complete without missing any deadlines. The driver code takes care of the printing. **Expected Time Complexity:** O(N log N) due to sorting. **Expected Auxiliary Space:** O(1). # Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ deadline[i], duration[i] ≤ 10^9","solution":"def MaxTasksCompleted(deadline, duration, N): Returns the maximum number of tasks Alice can complete without missing any deadlines. Parameters: deadline (list): List of deadlines for each task duration (list): List of durations for each task N (int): Number of tasks Returns: int: Maximum number of tasks that can be completed within their deadlines tasks = sorted(zip(deadline, duration), key=lambda x: x[0]) current_day = 0 count = 0 for d, t in tasks: if current_day + t <= d: current_day += t count += 1 return count"},{"question":"A music festival sells tickets to attendees based on their age. The ticket price is given by C yen (C is an even number). Here are the pricing rules based on age: - Adults (18 years or older): Full price - Teenagers (13 to 17 years old): Half price - Children (6 to 12 years old): One quarter of the full price - Kids (0 to 5 years old): Free Determine the ticket price for a given attendee based on their age. -----Constraints----- - 0 ≤ Age ≤ 100 - 2 ≤ C ≤ 1000 - C is an even number -----Input----- Input is given from Standard Input in the following format: Age C -----Output----- Print the ticket price for the attendee. -----Sample Input----- 20 200 -----Sample Output----- 200 The attendee is 20 years old, so the ticket price is 200 yen.","solution":"def ticket_price(age, C): Determines the ticket price for a given attendee based on their age. Parameters: age (int): The age of the attendee. C (int): The full ticket price (must be an even number) Returns: int: The ticket price for the attendee. if age >= 18: return C elif 13 <= age <= 17: return C // 2 elif 6 <= age <= 12: return C // 4 elif 0 <= age <= 5: return 0 # Example usage: # age = 20 # C = 200 # print(ticket_price(age, C)) # Output: 200"},{"question":"John is trying to implement a photo categorization system based on certain criteria. He has a list of photos, each represented by its indices and assigned to specific tags. Each photo can have multiple tags. John is interested in finding out the intersection of tags between each pair of photos. If two photos share one or more tags, they are said to intersect. For each pair of photos, you need to determine if they intersect and the count of shared tags if they do. Input The first input line contains an integer n (1 ≤ n ≤ 105) — the number of photos. The next n lines describe the photos. Each line starts with an integer k (1 ≤ k ≤ 105), the number of tags the photo has, followed by k space-separated integers representing the tags (each tag is an integer in the range from 1 to 106). Output For each pair of photos (i, j) where 1 ≤ i < j ≤ n, output one line. If they intersect, output the count of shared tags between photo i and photo j. If they do not intersect, output 0. Examples Input 3 2 1 2 3 2 3 4 2 1 4 Output 1 1 1","solution":"def photos_tag_intersections(n, photos): Returns the intersections of tags between each pair of photos. Parameters: n (int): Number of photos photos (list of lists): List containing sublists where each sublist contains tags for a specific photo. Returns: list of tuples: Each tuple contains (pair indices, count of shared tags) intersections = [] for i in range(n): for j in range(i + 1, n): tags_i = set(photos[i]) tags_j = set(photos[j]) shared_tags = tags_i.intersection(tags_j) intersections.append((i + 1, j + 1, len(shared_tags))) return intersections"},{"question":"You are given a tree with N nodes (numbered from 1 to N) and (N-1) edges. Your task is to determine the longest path between any two nodes in the tree. This is known as finding the diameter of the tree. The diameter of a tree is defined as the maximum distance between any pair of nodes in the tree. The distance between two nodes is the number of edges in the path connecting them. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the number of nodes in the tree. - The next (N-1) lines contain two space-separated integers u and v - denoting an edge between node u and node v. ------ Output Format ------ For each test case, output the diameter of the tree. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^{5} It is guaranteed that the sum of N over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 2 4 1 2 2 3 2 4 5 1 2 1 3 3 4 3 5 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Test Case-1: The nodes 3 and 4 are furthest apart, and the path is 3-2-4. The length of this path is 2. Test Case-2: The nodes 4 and 5 are furthest apart, and the path is 4-3-1 (or similarly 5-3-1). The length of this path is 3.","solution":"from collections import deque, defaultdict def find_farthest_node(start, n, graph): visited = [-1] * (n + 1) max_distance = 0 farthest_node = start queue = deque([(start, 0)]) visited[start] = 1 while queue: node, dist = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = 1 queue.append((neighbor, dist + 1)) if dist + 1 > max_distance: max_distance = dist + 1 farthest_node = neighbor return farthest_node, max_distance def tree_diameter(n, edges): if n == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) farthest_node, _ = find_farthest_node(1, n, graph) _, diameter = find_farthest_node(farthest_node, n, graph) return diameter def solve(t, cases): results = [] for n, edges in cases: results.append(tree_diameter(n, edges)) return results"},{"question":"In a small town, there is a circular road that connects n houses. The houses are numbered from 1 to n, and they are placed in a clockwise manner along the road. Each house i has an associated energy level e_i. A marathon is organized where runners start from any house and run clockwise. The objective for each participant is to gather the maximum possible energy. The energy they gather is the sum of the energy levels of the houses they visit along the path, starting from a chosen house and ending at any house. Your task is to help the organizers determine the maximum energy a participant can gather if they start from any house and run to any other house in a clockwise manner. Input: The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n integers e1, e2, ..., en (1 ≤ ei ≤ 10^9) — the energy levels of the houses. Output: Print a single integer — the maximum energy that can be gathered by any participant starting from any house and running to any other house. Examples: Input 5 1 3 5 4 2 Output 15 Input 3 10 20 30 Output 60 Explanation: In the first example, the maximum energy can be gathered by visiting all houses starting from house 1 to house 5 or from house 3 to house 2 in the next cycle which sums up to 15. In the second example, the maximum energy is gathered by visiting all houses in a single cycle from house 1 to house 3 which sums up to 60.","solution":"def max_energy(n, energies): Returns the maximum energy that can be gathered by any participant starting from any house and running to any other house. # Since the houses are in a circular arrangement, the maximum energy is simply the sum of all energies. return sum(energies)"},{"question":"Imagine you are the curator of a museum and you have been given the responsibility to organize all the paintings in the gallery. Each painting has been assigned a year when it was created. The aim is to arrange all the paintings in a non-decreasing order of their creation year, but you must ensure that the order is strictly increasing. If there are duplicate years, they must be removed. Your task is to determine the minimum number of paintings that must be removed to achieve this goal. -----Input----- * The first line of input is the number of paintings in the gallery. * The second line of input is the list of creation years of the paintings. -----Output----- * Your output should be the minimum number of paintings that must be removed to arrange the painting years in strictly increasing order. -----Example----- Input: 7 1985 1985 1990 1992 1992 1992 2001 Output: 3","solution":"def minimum_paintings_to_remove(n, years): Determines the minimum number of paintings that must be removed to achieve strictly increasing order of painting creation years. Parameters: n (int): The number of paintings. years (list of int): The list of creation years of the paintings. Returns: int: Minimum number of paintings to remove. if n == 0: return 0 # Calculate the length of strictly increasing subsequence unique_years = sorted(set(years)) # The number of paintings to remove is the total count of paintings # minus the count of paintings in the longest increasing subsequence return n - len(unique_years)"},{"question":"Library Book Locator Sophia is a librarian responsible for managing and organizing books in a large library. Each book in the library has a unique identifier and is placed on a particular shelf. A book can only be located on a specific shelf number. The library uses an advanced inventory system to keep track of which book is on which shelf. Sophia wants to implement a functionality to find the shortest path to locate a series of books from any starting position in the library. The library is structured such that the shelves and the paths between them form a directed, weighted graph, where the nodes represent shelves, and edges represent direct paths between shelves with associated travel times. Your task is to help Sophia find the shortest path times to locate a series of books starting from a given shelf position. Return an array of the shortest times for each requested book. Input Format: The first line of input contains three integers: `n`, `m`, and `q`, representing the number of shelves, number of direct paths between shelves, and the number of books to locate, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` representing a direct path from shelf `u` to shelf `v` with a travel time of `w` minutes. The next line contains a single integer `s`, representing the starting shelf number. The next `q` lines each contain a single integer `bi`, representing the shelf number of the i-th book that needs to be located. Output Format: Output `q` lines, each containing a single integer representing the shortest time from the starting shelf `s` to the shelf of the i-th book. If a shelf is not reachable, output -1 for that book. Constraints: 1 ≤ n, q ≤ 1000 1 ≤ m ≤ 10000 1 ≤ u, v, s, bi ≤ n 0 ≤ w ≤ 1000 SAMPLE INPUT 5 7 3 1 2 3 2 3 4 1 3 8 1 4 7 4 5 2 5 3 1 2 5 5 1 3 5 4 SAMPLE OUTPUT 7 8 7 Explanation: From shelf 1, the shortest path to: - Shelf 3 is through the direct path 1 -> 2 -> 3 with a travel time of 7 minutes. - Shelf 5 is through the path 1 -> 4 -> 5 with a total travel time of 9 minutes. - Shelf 4 is through the direct path 1 -> 4 with a travel time of 7 minutes.","solution":"import heapq def dijkstra(graph, start, n): # Initialize distances with infinity distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def locate_books(n, m, q, edges, start, book_shelves): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) shortest_paths = dijkstra(graph, start, n) result = [] for book in book_shelves: if shortest_paths[book] == float(\'inf\'): result.append(-1) else: result.append(shortest_paths[book]) return result"},{"question":"You are given a string containing only lowercase letters and you need to return the length of the longest substring that contains at most `k` distinct characters. Input Format You are given a function, int lengthOfLongestSubstringKDistinct(string s, int k) { } Constraints - The length of the string `s` is in the range `[1, 10^5]`. - The value of `k` is in the range `[1, 26]`. Output Format Return an integer representing the length of the longest substring that contains at most `k` distinct characters. Sample Input `s = \\"eceba\\", k = 2` Sample Output `3` Explanation: The substring is \\"ece\\" with length 3, which contains only 2 distinct characters.","solution":"def lengthOfLongestSubstringKDistinct(s, k): from collections import defaultdict n = len(s) if k == 0 or n == 0: return 0 left, right = 0, 0 max_length = 0 char_map = defaultdict(int) while right < n: char_map[s[right]] += 1 right += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"You are given a list of tuples where each tuple represents the coordinates of a point in a 2-dimensional space. The task is to determine whether all the points are collinear, meaning all the points lie on the same straight line. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of points. Each of the next n lines contains two integers x and y (-10^5 ≤ x, y ≤ 10^5) — the coordinates of the points. Output Print \\"YES\\" (without quotes) if all the points are collinear. Otherwise, print \\"NO\\". Examples Input 1 4 1 2 2 3 3 4 4 5 Output 1 YES Input 2 3 1 1 2 2 3 1 Output 2 NO Explanation In the first example, all points lie on the line y = x + 1. In the second example, the points do not lie on a single straight line. Note To determine if the points are collinear, you can use the concept of the slope between two points. For all points (x1, y1), (x2, y2), ..., (xn, yn) in a list, they are collinear if the slope between any two points is the same.","solution":"def are_points_collinear(points): Determines if all given points in a 2D plane are collinear. :param points: A list of tuples where each tuple represents a point (x, y) :return: \\"YES\\" if all points are collinear, otherwise \\"NO\\" if len(points) <= 2: return \\"YES\\" (x0, y0), (x1, y1) = points[:2] dx = x1 - x0 dy = y1 - y0 for x, y in points[2:]: if (y - y0) * dx != (x - x0) * dy: return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with developing software that processes and analyzes vehicle parking data. Each vehicle entry is logged with the following attributes: license plate number, entry time, and exit time. The challenge is to determine the vehicle that has stayed the longest in the parking lot among a provided set of vehicle entries. The entry and exit times are in the 24-hour format \\"HH:MM\\". You can assume that a vehicle\'s entry and exit are within the same day. Write a program that takes multiple vehicle entries and outputs the license plate number of the vehicle that stayed the longest in the parking lot. -----Input----- The first line contains the single integer N (1 leq N leq 100) - the number of vehicle entries. Each of the next N lines contains a vehicle entry in the format: license_plate entry_time exit_time. - license_plate is a string of uppercase alphanumeric characters (1 to 10 characters). - entry_time and exit_time are in the 24-hour format \\"HH:MM\\". -----Output----- Print the license plate number of the vehicle that stayed the longest in the parking lot. If there are multiple vehicles with the same longest duration, print the one that appeared first in the input. -----Examples----- Input 5 ABC123 08:00 09:30 XYZ789 07:00 09:00 LMN456 10:15 12:00 DEF000 09:45 11:30 GHI111 07:30 08:45 Output XYZ789 -----Note----- In the provided example, the longest duration in the parking lot is 2 hours. Both \\"XYZ789\\" and \\"DEF000\\" stayed for 2 hours in the parking lot. Since \\"XYZ789\\" appears first in the input, it is chosen as the result. For each vehicle, the duration in the parking lot is calculated by subtracting the `entry_time` from the `exit_time`.","solution":"from datetime import datetime def calculate_duration(entry_time, exit_time): format = \\"%H:%M\\" entry = datetime.strptime(entry_time, format) exit = datetime.strptime(exit_time, format) duration = exit - entry return duration.total_seconds() def longest_parking_vehicle(n, entries): max_duration = -1 longest_vehicle = \\"\\" for i in range(n): license_plate, entry_time, exit_time = entries[i] duration = calculate_duration(entry_time, exit_time) if duration > max_duration: max_duration = duration longest_vehicle = license_plate return longest_vehicle # Example Usage: # n = 5 # entries = [ # (\\"ABC123\\", \\"08:00\\", \\"09:30\\"), # (\\"XYZ789\\", \\"07:00\\", \\"09:00\\"), # (\\"LMN456\\", \\"10:15\\", \\"12:00\\"), # (\\"DEF000\\", \\"09:45\\", \\"11:30\\"), # (\\"GHI111\\", \\"07:30\\", \\"08:45\\") # ] # print(longest_parking_vehicle(n, entries)) # Output: XYZ789"},{"question":"Given an array of integers, determine if there exists a pair of indices (i, j) such that i neq j and A[i] - A[j] = k, where k is a given integer. -----Input----- The first line contains two integers n and k (1 leq n leq 10^5, -10^9 leq k leq 10^9) — the length of the array and the integer to check for the difference. The second line contains n integers A[i] (1 leq A[i] leq 10^9) — the elements of the array. -----Output----- Print \\"Yes\\" (quotes for clarity) if such a pair exists; otherwise, print \\"No\\" (quotes for clarity). -----Examples----- Input 5 2 1 3 5 7 9 Output Yes Input 4 10 1 2 3 4 Output No -----Note----- In the first example, the pair (7, 5) has a difference of 2, which matches the given integer k. In the second example, there are no pairs of indices with a difference of 10.","solution":"def check_difference_pair_exists(n, k, arr): Determines if there exists a pair of indices (i, j) such that i != j and A[i] - A[j] = k. Parameters: n (int): The length of the array. k (int): The integer to check for the difference. arr (list of int): The elements of the array. Returns: str: \\"Yes\\" if such a pair exists, otherwise \\"No\\". value_set = set() for num in arr: if (num + k) in value_set or (num - k) in value_set: return \\"Yes\\" value_set.add(num) return \\"No\\""},{"question":"Aditya is working with a text processing task where he needs to find all unique substrings of a given length from a string. A substring is a contiguous sequence of characters within a string. Given a string S and an integer K, Aditya needs to determine the number of unique substrings of length K in S. Input The first line contains a single integer T, denoting the number of test cases. T lines follow. For each test case: The first line will contain the string S (1 ≤ |S| ≤ 10^5), a non-empty string of lowercase Latin characters. The second line will contain the integer K (1 ≤ K ≤ |S|), the length of the substring. Output For each test case, print a single integer, the number of unique substrings of length K in the string S. Constraints 1 ≤ T ≤ 100 SAMPLE INPUT 2 abacab 3 abcdef 2 SAMPLE OUTPUT 4 5","solution":"def count_unique_substrings(S, K): Returns the number of unique substrings of length K in the string S. unique_substrings = set() for i in range(len(S) - K + 1): substring = S[i:i+K] unique_substrings.add(substring) return len(unique_substrings) def process_test_cases(test_cases): Processes a list of test cases and returns the number of unique substrings of length K for each test case. results = [] for S, K in test_cases: result = count_unique_substrings(S, K) results.append(result) return results"},{"question":"You are given an array of integers, where each integer represents the height of a person. The goal is to rearrange the array such that it represents a valid row of people standing in a line, with each person either looking at the back of the person in front of them or at the front of the person behind them. A row is valid if it satisfies the following conditions: 1. Every person in the row can see at least one other person. 2. The height difference between any two adjacent people does not exceed a given integer k. Write a function that takes an array of integers representing the heights of people and an integer k representing the maximum allowed height difference between adjacent people in the row. The function should return a rearranged array that represents a valid row of people if possible. If it is not possible to rearrange the array to form a valid row, the function should return an empty array. -----Input----- - An array of integers h representing the heights of people. (1 leq |h| leq 10^5, 1 leq h_i leq 10^9) - An integer k representing the maximum allowed height difference between adjacent people in the row. (0 leq k leq 10^9) -----Output----- A rearranged array of integers representing a valid row of people, or an empty array if it is not possible to form such a row. -----Examples----- Input: h = [1, 3, 8, 6, 4] k = 2 Output: [3, 1, 4, 6, 8] Input: h = [5, 1, 9, 2] k = 1 Output: [] Input: h = [7, 5, 5, 5, 6] k = 1 Output: [5, 5, 5, 6, 7] -----Note----- In the first example, the difference between consecutive elements in the output row does not exceed 2, and each person can see their neighboring person(s). In the second example, it is impossible to arrange the array such that all conditions are met. In the third example, the heights can be arranged such that no height difference exceeds 1, and each person can see their neighboring person(s).","solution":"def can_form_row(h, k): Returns a rearranged array that represents a valid row of people or an empty array if it\'s not possible. h.sort() for i in range(1, len(h)): if h[i] - h[i-1] > k: return [] return h # Example Testing print(can_form_row([1, 3, 8, 6, 4], 2)) print(can_form_row([5, 1, 9, 2], 1)) print(can_form_row([7, 5, 5, 5, 6], 1))"},{"question":"Given a string containing digits and a single non-digit character, the task is to find the first smallest unique character that repeats consecutively, considering only the substring up to the first non-digit character encountered. Example 1: Input: str = \\"2314555x42\\" Output: 5 Explanation: The substring considered is \\"2314555\\". The first unique character that repeats consecutively is \'5\' because \'5\' appears consecutively in \\"55\\". Example 2: Input: str = \\"7643111a987\\" Output: 1 Explanation: The substring considered is \\"7643111\\". The first unique character that repeats consecutively is \'1\' because \'1\' appears consecutively in \\"111\\". Example 3: Input: str = \\"282828b123\\" Output: None Explanation: The substring considered is \\"282828\\". There are no numbers that repeat consecutively. Your Task: You do not need to read input or print anything. Your task is to complete the function findRepeat(), which takes the string \'str\' as input and returns the first smallest unique character that repeats consecutively within the substring up to the first non-digit character. If no such character is found, return \'None\'. Expected Time Complexity: O(N), where N is the length of the input string. Expected Auxiliary Space: O(1). Constraints: 1 <= |str| <= 100","solution":"def findRepeat(s): Finds the first smallest unique character that repeats consecutively in the substring up to the first non-digit character. substring = \\"\\" # Get the substring up to the first non-digit character for char in s: if char.isdigit(): substring += char else: break # Find the first smallest unique character that repeats consecutively for i in range(len(substring) - 1): if substring[i] == substring[i + 1]: return int(substring[i]) return None"},{"question":"Chef loves to cook special dishes. Each special dish is represented by a string S of lowercase English letters. A string S is called \\"yummy\\" if it contains the substring \\"chef\\" at least once. Chef has a recipe book with N strings. For each string S_i (1 ≤ i ≤ N, 1-based indexing), determine whether it is \\"yummy\\" or not. -----Input----- - The first line of the input contains a single integer N, denoting the number of strings in the recipe book. - Each of the next N lines contains a string S_i of lowercase English letters. -----Output----- For each string S_i, output \\"YES\\" if the string is \\"yummy\\", otherwise output \\"NO\\". -----Constraints----- - 1 le N le 10^5 - 1 le |S_i| le 10^6 for each valid i - Sum of lengths of all S_i in a single test case does not exceed 10^6 -----Example Input----- 3 chefisgreat ilovechefcooking greatday -----Example Output----- YES YES NO -----Explanation----- Example case 1: The string \\"chefisgreat\\" contains the substring \\"chef\\", so the output is \\"YES\\". Example case 2: The string \\"ilovechefcooking\\" contains the substring \\"chef\\", so the output is \\"YES\\". Example case 3: The string \\"greatday\\" does not contain the substring \\"chef\\", so the output is \\"NO\\".","solution":"def is_yummy(recipe_book): results = [] for s in recipe_book: if \'chef\' in s: results.append(\'YES\') else: results.append(\'NO\') return results def process_input(N, strings): return is_yummy(strings) # Example usage: # N = 3 # recipe_book = [\\"chefisgreat\\", \\"ilovechefcooking\\", \\"greatday\\"] # print(process_input(N, recipe_book)) # [\'YES\', \'YES\', \'NO\']"},{"question":"Given a Binary Tree and a node, your task is to print the entire level of the Binary Tree in which the given node is present. Example 1: Input: 1 / 2 3 / / 4 5 6 7 / 8 Target Node: 5 Output: 4 5 6 7 Explanation: The target node 5 is at level 3. All nodes at level 3 are 4, 5, 6, 7. Example 2: Input: 1 / 2 3 / / 4 5 6 7 / 8 Target Node: 8 Output: 8 Explanation: The target node 8 is at level 4. It is the only node at that level. Your Task: You don\'t need to read input or print anything. Your task is to complete the function printLevel() which takes the root of the Binary Tree and the target node value as its input and returns the list of nodes at the same level in the Binary Tree as the target node value. Expected Time Complexity: O(N), where N is the number of nodes in the Binary Tree. Expected Auxiliary Space: O(N) Constraints: - 1 <= Number of nodes <= 10^4 - Node values are unique and in range [1, 10^4]. Note: - If the target node is not present in the Binary Tree, return an empty list. - The level of the root node is considered as 1.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def find_level(root, target, level): if root is None: return 0 if root.val == target: return level downlevel = find_level(root.left, target, level + 1) if downlevel != 0: return downlevel downlevel = find_level(root.right, target, level + 1) return downlevel def printGivenLevel(root, level, result): if root is None: return if level == 1: result.append(root.val) elif level > 1: printGivenLevel(root.left, level - 1, result) printGivenLevel(root.right, level - 1, result) def printLevel(root, target): found_level = find_level(root, target, 1) if found_level == 0: return [] result = [] printGivenLevel(root, found_level, result) return result"},{"question":"You are managing a library with a collection of `n` books. Each book is identified by a unique ID ranging from `1` to `n`. The library has a policy to perform regular maintenance on these books to ensure they are in good condition. To perform maintenance, the books are arranged in a specific order, and each book undergoes a certain level of wear and tear during the maintenance process. Each book `i` has a wear tolerance value `w_i` which denotes the maximum amount of wear it can endure before it needs to be replaced. You need to determine the order in which the books should be maintained to maximize the number of books that remain in good condition after the maintenance session. A book is considered to be in good condition if the total wear it experiences is less than or equal to its wear tolerance value. Formally, you have: - An array `w` of length `n` where `w[i]` indicates the wear tolerance of the `i-th` book. - A wear factor `c`, which is a constant value that represents the wear applied to each book during the maintenance process. You need to find the order of books that allows the maximum number of books to remain in good condition after the maintenance. Input: The first line contains an integer `n` (1 ≤ n ≤ 500) — the number of books. The second line contains `n` integers `w_1, w_2, ..., w_n` (1 ≤ w_i ≤ 10^9) — the wear tolerance values of the books. The third line contains an integer `c` (1 ≤ c ≤ 10^9) — the wear factor applied during the maintenance. Output: Print `n` integers — the order of books which maximizes the number of books that remain in good condition. Example: Input 5 10 2 3 7 5 3 Output 1 4 5 3 2 Note: In the given example, one of the optimal orders is as follows: 1. The 1st book with a tolerance of 10 undergoes wear: it remains in good condition. 2. The 4th book with a tolerance of 7 undergoes wear: it remains in good condition. 3. The 5th book with a tolerance of 5 undergoes wear: it remains in good condition. 4. The 3rd book with a tolerance of 3 undergoes wear: it remains in good condition. 5. The 2nd book with a tolerance of 2 undergoes wear: it undergoes wear twice, thus it exceeds its tolerance and is not in good condition. In total, 4 books remain in good condition. Other optimal orders are possible and any of them is acceptable.","solution":"def maximize_books_in_good_condition(n, w, c): Function to determine the order of books that allows the maximum number of books to remain in good condition after undergoing wear during maintenance. Parameters: n (int): The number of books. w (list): The wear tolerance values of the books. c (int): The wear factor applied during the maintenance. Returns: list: Order of books that maximizes the number of books in good condition. # Creating a list of tuples (wear tolerance, index) books = list(enumerate(w)) # Sort the books by wear tolerance, highest to lowest books.sort(key=lambda x: x[1], reverse=True) # Extracting the order of indices order = [index + 1 for index, tolerance in books] return order"},{"question":"Residents of Sumerland are enthusiastic about reading, and they have an extensive library of n books. Each resident wants to borrow books from the library in a specific order, but there is a problem. The librarian can only allow one resident at a time, and each resident is allowed to pick only one book per turn. Due to a recent regulation, the book borrowing rules have changed in such a way that a resident must return one previously borrowed book before borrowing a new one, if they’ve already borrowed a specific limit of books. Given the borrowing limit, your task is to determine whether all the residents can borrow their desired list of books, following the new borrowing rules. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of residents. The second line contains an integer m (1 ≤ m ≤ 100,000) — the maximum number of books each resident can hold at any time. The third line contains n space-separated integers b_{i} (1 ≤ b_{i} ≤ 100,000) — the list of books each resident wants to borrow, given in the order they want to borrow them. The positions are numbered starting from the first resident to the last. -----Output----- Print \\"YES\\" if it is possible for all residents to follow the borrowing rules and get their desired books eventually, otherwise print \\"NO\\". -----Examples----- Input 5 2 3 2 3 2 1 Output NO Input 4 3 1 2 3 4 Output YES Input 7 1 5 4 3 2 1 6 7 Output YES -----Note----- In the first example, it is impossible because the residents will need to borrow more than two books at once at some point to satisfy their order. In the second example, each resident can get their desired book within the limit of 3 books they can hold at a given time. In the third example, since the borrowing limit is 1 book at a time, each resident can borrow and return a book before borrowing the next one.","solution":"def can_borrow_books(n, m, book_list): Determines if all residents can borrow their desired list of books following given rules. Parameters: n (int): Number of residents. m (int): Maximum number of books each resident can hold at any time. book_list (list of int): Desired books for each resident in order. Returns: str: \\"YES\\" if all residents can follow the borrowing rules, otherwise \\"NO\\". borrowed_books = {} current_books = 0 for book in book_list: if book in borrowed_books: # If the book is already borrowed, that\'s a problem return \\"NO\\" if current_books < m: # If the resident can borrow more books borrowed_books[book] = True current_books += 1 else: # If the resident needs to return a book before borrowing if book_list[-m] in borrowed_books: del borrowed_books[book_list[-m]] borrowed_books[book] = True return \\"YES\\""},{"question":"You are given a 2D grid of size m x n representing a map where \'1\' represents land and \'0\' represents water. An island is formed by a group of \'1\'s connected 4-directionally (vertical and horizontal). You may assume all four edges of the grid are surrounded by water. Write a function to find the number of islands in the given grid. Function Signature ```python def num_islands(grid: List[List[str]]) -> int: pass ``` Input - The input is a 2D list of characters `grid` where 1 ≤ m, n ≤ 300. Output - The function should return an integer representing the number of islands. Example 1 ```python grid = [ [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"] ] Output: 1 ``` Example 2 ```python grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 ``` Note Observe that islands 1 and 2 from Example 2 are separate because the \\"1\\" cells in the grid are not connected diagonally, and thus form two separate islands.","solution":"from typing import List def num_islands(grid: List[List[str]]) -> int: if not grid: return 0 m, n = len(grid), len(grid[0]) num_islands = 0 def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'0\': return grid[x][y] = \'0\' # mark the visited land as \'0\' dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) for i in range(m): for j in range(n): if grid[i][j] == \'1\': num_islands += 1 dfs(i, j) return num_islands"},{"question":"Your Task Design a function that takes a string `s` and returns the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within a string. **Constraints**: - The input string `s` can have a maximum length of 1000. - The string consists only of printable ASCII characters. **Examples**: ``` s = \\"abcabcbb\\" ==> 3 (\\"abc\\") s = \\"bbbbb\\" ==> 1 (\\"b\\") s = \\"pwwkew\\" ==> 3 (\\"wke\\") s = \\"dvdf\\" ==> 3 (\\"vdf\\") s = \\"a\\" ==> 1 (\\"a\\") s = \\"\\" ==> 0 (\\"\\") ``` **Note**: In the provided examples, the longest substring without repeating characters is shown in parentheses.","solution":"def longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_map = {} left = 0 max_length = 0 for right in range(n): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"# The Story: Alice is an airline flight attendant, and she needs to ensure her flight has enough meals and drinks ready for all the passengers onboard. Each flight has a specific number of meals and drinks that can be served, and Alice needs to make sure there is enough of each item based on the number of passengers. # Task Overview: You have to write a function that accepts three parameters: * `num_passengers` is the number of passengers on the flight. * `available_meals` is the number of meals available. * `available_drinks` is the number of drinks available. If there are enough meals and drinks for all the passengers, return \\"All set!\\". If there aren\'t enough meals, return \\"Not enough meals!\\" If there aren\'t enough drinks, return \\"Not enough drinks!\\" If both meals and drinks are insufficient, return \\"Not enough meals and drinks!\\" # Usage Examples: ```python check_supply(100, 100, 100) # \\"All set!\\" check_supply(100, 80, 120) # \\"Not enough meals!\\" check_supply(100, 120, 80) # \\"Not enough drinks!\\" check_supply(100, 80, 80) # \\"Not enough meals and drinks!\\" ``` ```if:csharp Documentation: SupplyChecker.CheckSupply Method (Int32, Int32, Int32) Returns the supply status indicating whether there are enough meals and drinks for all passengers. Syntax public static string CheckSupply( int num_passengers, int available_meals, int available_drinks ) Parameters num_passengers Type: System.Int32 The number of passengers on the flight. available_meals Type: System.Int32 The number of meals available on the flight. available_drinks Type: System.Int32 The number of drinks available on the flight. Return Value Type: System.String A string indicating the supply status as either \\"All set!\\", \\"Not enough meals!\\", \\"Not enough drinks!\\", or \\"Not enough meals and drinks!\\" ```","solution":"def check_supply(num_passengers, available_meals, available_drinks): Determines if there are enough meals and drinks for all passengers. Parameters: - num_passengers (int): The number of passengers on the flight. - available_meals (int): The number of meals available. - available_drinks (int): The number of drinks available. Returns: - str: A string indicating the supply status. if available_meals >= num_passengers and available_drinks >= num_passengers: return \\"All set!\\" elif available_meals < num_passengers and available_drinks < num_passengers: return \\"Not enough meals and drinks!\\" elif available_meals < num_passengers: return \\"Not enough meals!\\" else: return \\"Not enough drinks!\\""},{"question":"A software company wants to assign tasks to its developers in a balanced way. Each developer has a known skill level, and each task requires a specific skill level to be completed. The goal is to assign the maximum number of tasks to the developers such that each task is assigned to a developer whose skill level is greater than or equal to the skill level required for the task. There are `m` tasks and `n` developers, and for each developer, the skill level `s_j` is known. Similarly, the skill level required for each task `t_i` is also known. Your task is to find the maximum number of tasks that can be assigned to the developers such that the skill level criteria are met. -----Input----- - The first line of the input contains two integers `n` and `m` (1 le n, m le 1000) — the number of developers and the number of tasks. - The second line contains `n` integers, where the `j`-th integer s_j (1 le s_j le 1000) denotes the skill level of the `j`-th developer. - The third line contains `m` integers, where the `i`-th integer t_i (1 le t_i le 1000) denotes the skill level required for the `i`-th task. -----Output----- Print one integer — the maximum number of tasks that can be assigned to the developers. -----Examples----- Input 4 5 3 1 4 2 2 1 3 2 5 Output 4 Input 3 3 5 3 7 2 5 4 Output 3 -----Note----- In the first example, the developers can be assigned the tasks as follows: - Developer with skill level `3` can take the task with skill requirement `2`. - Developer with skill level `1` can take the task with skill requirement `1`. - Developer with skill level `4` can take the task with skill requirement `3`. - Developer with skill level `2` can take the task with skill requirement `2`. In the second example, the developers can be assigned all tasks as follows: - Developer with skill level `5` can take the task with skill requirement `2` or `4` or `5`. - Developer with skill level `3` can take the task with skill requirement `2`. - Developer with skill level `7` can take any of the remaining tasks. The order of assignment does not matter as long as the skill level criteria are satisfied and the maximum number of tasks are assigned.","solution":"def max_assignable_tasks(n, m, developers, tasks): Returns the maximum number of tasks that can be assigned to developers such that each task is assigned to a developer whose skill level is greater than or equal to the skill level required for the task. :param n: Number of developers :param m: Number of tasks :param developers: List of skill levels of the developers :param tasks: List of skill level requirements of the tasks :return: Maximum number of assignable tasks developers.sort() tasks.sort() i = j = count = 0 while i < n and j < m: if developers[i] >= tasks[j]: count += 1 j += 1 i += 1 return count"},{"question":"You are an explorer navigating through a forest. The forest can be represented by a grid of size M x M. Certain cells in this grid are filled with obstacles, and some are passable. You start from the top-left corner of the grid (cell (1,1)) and need to reach the bottom-right corner of the grid (cell (M, M)). You can only move either right or down from a passable cell. You need to find the number of distinct paths from the top-left corner to the bottom-right corner. Input The first line contains one integer M. The next M lines contain M space-separated integers each, representing the grid. A 0 denotes an obstacle cell and a 1 denotes a passable cell. Output Output a single integer, the number of distinct paths from the top-left corner to the bottom-right corner. Constraints 1 ≤ M ≤ 50 grid[i][j] is either 0 or 1 Note: The top-left and bottom-right cells are guaranteed to be passable. SAMPLE INPUT 3 1 1 1 1 0 1 1 1 1 SAMPLE OUTPUT 2","solution":"def count_paths(grid): M = len(grid) # Create a 2D dp array to store the number of paths to each cell dp = [[0] * M for _ in range(M)] # Starting point dp[0][0] = 1 # Loop through each cell in the grid for i in range(M): for j in range(M): if grid[i][j] == 1: # If the cell is passable, update the paths if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] # The result is the number of paths to the bottom-right corner return dp[M - 1][M - 1]"},{"question":"You are given a permutation of integers from 1 to n. A permutation is considered beautiful if there are no two consecutive integers in decreasing order. Your task is to determine if the given permutation is beautiful. Constraints: * 1 ≤ n ≤ 100,000 * All integers in the permutation are unique and range from 1 to n. Input Input is given from Standard Input in the following format: n p_1 p_2 ... p_n Output Print \\"YES\\" if the permutation is beautiful, otherwise print \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 4 2 1 4 3 Output NO Input 3 1 2 3 Output YES","solution":"def is_beautiful_permutation(n, permutation): Determines if the given permutation from 1 to n is beautiful. A permutation is beautiful if there are no two consecutive integers in decreasing order. Parameters: n (int): The length of the permutation. permutation (list): The permutation of integers from 1 to n. Returns: str: \\"YES\\" if the permutation is beautiful, otherwise \\"NO\\". for i in range(1, n): if permutation[i] < permutation[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Carol and Doug have a beautiful garden. They love to collect stones and frequently arrange the stones in different shapes. Carol challenges Doug to arrange the stones in a straight line following a specific rule: the number of stones in each consecutive position must be strictly increasing up to a certain point, and from that point onward, the number of stones must be strictly decreasing. Doug loves the challenge and wants to automate the task of validating such arrangements. Write a function that determines whether a given sequence of integers representing the number of stones in each position forms a valid \\"peak\\" pattern. A valid peak pattern is defined as follows: 1. The sequence first strictly increases to a peak and then strictly decreases afterwards. 2. There should be at least one element before and after the peak. -----Input----- The first line contains an integer N~ (3 leq N leq 100000), the number of positions in the line. The second line contains N integers, where each integer a_i~ (1 leq a_i leq 100000) represents the number of stones in the i^{th} position. -----Output----- Output \\"YES\\" if the sequence forms a valid peak pattern, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 7 1 2 4 5 3 2 1 Sample Output 1: YES Sample Input 2: 5 1 3 5 4 2 Sample Output 2: YES Sample Input 3: 4 1 2 2 1 Sample Output 3: NO Sample Input 4: 6 6 4 3 2 1 0 Sample Output 4: NO","solution":"def is_valid_peak_pattern(n, sequence): Determines if the sequence forms a valid peak pattern. :param n: int, number of positions in the line :param sequence: list of ints, number of stones at each position :return: str, \\"YES\\" if the sequence forms a valid peak pattern, otherwise \\"NO\\" if n < 3: return \\"NO\\" up = False down = False peak_reached = False for i in range(1, n): if sequence[i] > sequence[i-1]: if down: return \\"NO\\" up = True elif sequence[i] < sequence[i-1]: if not up: return \\"NO\\" down = True else: return \\"NO\\" if up and down: return \\"YES\\" return \\"NO\\""},{"question":"Given a string, determine if it can be rearranged to form a palindrome. Input The input consists of a single line containing a string s, with a length of 1 ≤ |s| ≤ 100,000. Output Output \\"YES\\" if the characters of the string can be rearranged to form a palindrome, otherwise output \\"NO\\". Example Input: aabb Output: YES Input: abc Output: NO","solution":"from collections import Counter def can_form_palindrome(s): Determine if the string can be rearranged to form a palindrome. # Count the frequency of each character in the string freq = Counter(s) # Count the number of characters with an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged to a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Alex is an aspiring musician who loves experimenting with different melodies. He tries to create new songs by merging two different melodies in a specific manner. Each melody can be represented as a string of lowercase English letters, where each letter corresponds to a note. Alex wants to know how many distinct melodies he can create by merging two given melodies in all possible ways. A merged melody is formed by interleaving the characters of the two melodies while preserving the order of characters in each melody. For example, the melodies \\"abc\\" and \\"def\\" can be merged to form \\"abcdef\\", \\"adbcef\\", \\"abdecf\\", \\"abdefc\\", \\"adbcef\\", \\"adbecf\\", etc. You need to help Alex count the number of distinct merged melodies that can be created from the two given melodies. ----- Input ----- The input consists of two strings, `melody1` and `melody2`, each of length no greater than 200. The strings contain only lowercase English letters. ----- Output ----- Output an integer, the number of distinct merged melodies that can be formed by merging `melody1` and `melody2`. ----- Example ----- Input abc def Output 20 Input a b Output 2 Input xyz xyz Output 20 ----- Note ----- In the first example, there are 20 distinct ways to merge \\"abc\\" and \\"def\\". In the second example, there are 2 distinct ways to merge \\"a\\" and \\"b\\": \\"ab\\" and \\"ba\\". In the third example, the distinct ways to merge \\"xyz\\" and \\"xyz\\" are numerous, reflecting the variations of interleaving two identical melodies.","solution":"def count_distinct_merged_melodies(melody1, melody2): Returns the number of distinct merged melodies that can be formed by interleaving melody1 and melody2 while preserving the order of characters in each melody. from functools import lru_cache @lru_cache(None) def count_ways(i, j): # Base case: If we\'ve reached the end of both melodies, there\'s exactly one way to merge (the empty string) if i == len(melody1) and j == len(melody2): return 1 # If we\'ve reached the end of melody1, the rest comes from melody2 if i == len(melody1): return 1 # If we\'ve reached the end of melody2, the rest comes from melody1 if j == len(melody2): return 1 # Calculate the number of ways by considering the next step could come from either melody1 or melody2 ways = 0 if i < len(melody1): ways += count_ways(i + 1, j) if j < len(melody2): ways += count_ways(i, j + 1) return ways return count_ways(0, 0)"},{"question":"Given a string containing both letters and digits, your task is to return a new string where the digits are sorted in ascending order and the letters remain in their original positions. To clarify: - Only the digits in the string should be sorted. - The letters should not be affected and should stay where they are in the original string. Examples: ```python sort_digits_in_string(\\"a3b2c1e\\") -> \\"a1b2c3e\\" sort_digits_in_string(\\"5a1b3c2\\") -> \\"1a2b3c5\\" sort_digits_in_string(\\"abc\\") -> \\"abc\\" sort_digits_in_string(\\"4A3b2C1\\") -> \\"1A2b3C4\\" ``` **Guidelines:** 1. Assume that the input string will always be non-empty and can contain both uppercase and lowercase letters. 2. The string will contain at least one digit. 3. Maintain the relative position of each letter in the original string while sorting only the digits. Have fun! Please upvote if you enjoyed :)","solution":"def sort_digits_in_string(s): Returns a string with digits sorted in ascending order and letters in their original positions. digits = sorted([char for char in s if char.isdigit()]) result = [] digit_index = 0 for char in s: if char.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"A fleet management company keeps track of the fuel efficiency of its vehicles. The company uses a system that records the fuel consumption rate (in liters per 100 kilometers) of each vehicle. For a given number of trips, the company wants to calculate the total fuel consumed for each trip based on the distance traveled. Input Format: The first line contains the number of test cases T, T lines follow. Each line contains two integers: the fuel consumption rate (F, in liters per 100 kilometers) and the distance traveled (D, in kilometers). Output Format: For each test case, print the total fuel consumed (in liters) rounded to two decimal places in a new line. Constraints: 1 ≤ T ≤ 1000 1 ≤ F ≤ 100 1 ≤ D ≤ 10000 SAMPLE INPUT 3 5 100 8 50 10 200 SAMPLE OUTPUT 5.00 4.00 20.00 Explanation: Case 1: The vehicle consumes 5 liters per 100 kilometers. For a 100 kilometer trip, it will consume (5/100)*100 = 5.00 liters. Case 2: The vehicle consumes 8 liters per 100 kilometers. For a 50 kilometer trip, it will consume (8/100)*50 = 4.00 liters. Case 3: The vehicle consumes 10 liters per 100 kilometers. For a 200 kilometer trip, it will consume (10/100)*200 = 20.00 liters.","solution":"def calculate_fuel_consumed(T, test_cases): results = [] for i in range(T): F, D = test_cases[i] fuel_consumed = (F * D) / 100 results.append(format(fuel_consumed, \\".2f\\")) return results"},{"question":"You are provided with an array of integers, and a target integer `k`. Your task is to find the smallest subarray (contiguous elements) within the given array whose sum of elements is greater than or equal to `k`. If no such subarray exists, return `-1`. Input The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `k` (1 ≤ k ≤ 10^9), where `n` is the number of elements in the array and `k` is the target sum. The next line contains `n` space-separated integers representing the elements of the array. Output Output the length of the smallest subarray whose sum is greater than or equal to `k`. If no such subarray exists, output `-1`. Examples Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 20 1 2 3 4 5 Output -1 Input 8 8 1 4 45 6 0 19 5 10 23 Output 1 Note In the first example, the smallest subarray with a sum greater than or equal to `15` is `[7, 8]` with length `2`. In the second example, there is no subarray with a sum greater than or equal to `20`. In the third example, the smallest subarray with a sum greater than or equal to `8` is `[45]` with length `1`.","solution":"def smallest_subarray_with_sum(array, n, k): Finds the smallest subarray with sum greater than or equal to `k`. Parameters: array (list of int): List of integers. n (int): Number of elements in the array. k (int): Target sum. Returns: int: Length of the smallest subarray with sum >= `k`, or -1 if no such subarray exists. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += array[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= array[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Dan is a professional drummer who loves to compose different patterns of drum beats. He keeps track of these patterns in sequences where each number represents the intensity of a drum beat. Dan wants to share a summary of his patterns but needs your help to generate it. Your task is to count how many times each unique intensity appears in each pattern and display the unique intensities in descending order. -----INPUT----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains an integer N denoting the number of beats in the pattern. The next line contains N spaced integers representing the intensity of each beat. -----OUTPUT----- For each test case, output the unique intensities and their counts in the format \\"intensity: count\\" on separate lines, ordered by the intensity in descending order. -----CONSTRAINTS----- 1 <= T <= 20 1 <= N <= 100 1 <= Intensity <= 50 -----EXAMPLE----- Input: 2 5 3 3 2 2 1 7 6 6 6 5 5 4 4 Output: 3: 2 2: 2 1: 1 6: 3 5: 2 4: 2","solution":"def summarize_patterns(T, test_cases): results = [] for i in range(T): _, beats = test_cases[i] intensity_counts = {} for beat in beats: if beat in intensity_counts: intensity_counts[beat] += 1 else: intensity_counts[beat] = 1 sorted_intensities = sorted(intensity_counts.keys(), reverse=True) case_result = [] for intensity in sorted_intensities: case_result.append(f\\"{intensity}: {intensity_counts[intensity]}\\") results.append(\\"n\\".join(case_result)) return \\"nn\\".join(results)"},{"question":"Write a function that accepts a string of alphanumeric characters and returns a list of all unique substrings that can be formed using the characters of the input string. The substrings should be arranged in lexicographical order. Your function should handle input strings up to 100 characters in length and ensure that there are no duplicate substrings in the final output list. # Function Signature ```python def generate_unique_substrings(s: str) -> List[str]: pass ``` # Example ```python generate_unique_substrings(\\"abc\\") ``` Expected output: ```python [\'a\', \'ab\', \'abc\', \'b\', \'bc\', \'c\'] ``` **Note:** - A substring is defined as a contiguous sequence of characters within a string. - The function should return only unique substrings in lexicographical order. # Additional Considerations - Consider the efficiency of your implementation, especially with respect to handling longer input strings near the upper limit of the input size constraint. - Ensure the solution does not include duplicate substrings in the output list.","solution":"from typing import List def generate_unique_substrings(s: str) -> List[str]: substrings = set() # Generate all substrings and add them to the set for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) # Convert the set to a list and sort it lexicographically result = sorted(substrings) return result"},{"question":"You are given an array of N integers, where each integer represents a height. You are allowed to perform the following operation any number of times: * Choose any element of the array and either increase or decrease the value by 1. Your objective is to make all the elements of the array equal using the minimum number of operations. Find the minimum number of operations required to achieve the task. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ height ≤ 10^9 * All input values are integers. Input Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output Find the minimum number of operations required to achieve the objective. Examples Input 5 1 2 3 4 5 Output 6 Input 3 3 3 3 Output 0","solution":"def min_operations_to_equalize_heights(N, heights): Calculate the minimum number of operations required to make all elements in the array equal by either increasing or decreasing the value by 1. Parameters: N (int): Number of elements in the heights array heights (list of int): List of heights Returns: int: Minimum number of operations median_height = sorted(heights)[N // 2] operations = sum(abs(height - median_height) for height in heights) return operations"},{"question":"In a remote mountainous village, there are n unique paths connecting m distinct huts. Each path has a specific length. As part of an initiative to provide better infrastructure, the village council plans to establish a bicycle lane network such that every hut is connected directly or indirectly via the shortest possible cumulative path length. Your task is to determine the minimum required total length of paths. -----Input----- The first line of the input contains two integers n (2 ≤ n ≤ 1000) and m (n - 1 ≤ m ≤ 100000) — the number of huts and the number of paths respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — the endpoints of the path and the length of the path between hut u and hut v respectively. -----Output----- Output one number — the minimum total length of the paths in the bicycle lane network. -----Examples----- Input 4 5 1 2 10 1 3 6 1 4 5 2 3 4 3 4 3 Output 12 Input 3 3 1 2 1 2 3 2 1 3 3 Output 3","solution":"def minimum_bicycle_lane_length(n, m, paths): Determines the minimum required total length of paths to connect all huts with the shortest possible cumulative path length (MST). Parameters: n (int): Number of huts. m (int): Number of paths. paths (list of tuples): List containing (u, v, w) tuples where u and v are huts and w is the path length. Returns: int: The minimum total length of the paths required. from heapq import heappop, heappush # Prim\'s algorithm initialization adj_list = [[] for _ in range(n + 1)] for u, v, w in paths: adj_list[u].append((w, v)) adj_list[v].append((w, u)) total_length = 0 visited = [False] * (n + 1) min_heap = [(0, 1)] # (cost, node) while min_heap: cost, node = heappop(min_heap) if visited[node]: continue total_length += cost visited[node] = True for edge_cost, neighbor in adj_list[node]: if not visited[neighbor]: heappush(min_heap, (edge_cost, neighbor)) return total_length"},{"question":"In a magical forest, there are n different types of magical creatures identified by unique integer IDs from 1 to n. Each of these creatures has a specific strength, represented as an integer. Creatures with higher strength display dominance over those with lower strength, but the relationships among them are peculiar. Two creatures can cooperate and form alliances, but only if their strengths are coprime (i.e., their greatest common divisor is 1). You are tasked with finding the largest possible size of an alliance that can be formed among the creatures. An alliance can consist of any group of creatures such that each pair of creatures within the group has coprime strengths. Input The first input line contains a single integer n (1 ≤ n ≤ 100) — the number of different types of creatures. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 1000) — the strengths of the creatures, where si is the strength of the i-th creature. Output Print a single integer — the size of the largest possible alliance that can be formed. Examples Input 6 2 3 5 7 11 14 Output 5 Input 5 4 6 8 10 12 Output 1 Note In the first example, the creatures have strengths {2, 3, 5, 7, 11, 14}. Among these, the largest alliance can be formed among the five creatures with strengths {2, 3, 5, 7, 11} since each pair of these strengths is coprime. Note that the strength 14 is excluded since it shares a common factor with the strength 2. In the second example, any pair of the given strengths shares a common factor greater than 1, so the largest alliance contains only a single creature.","solution":"from math import gcd from itertools import combinations def is_coprime(x, y): return gcd(x, y) == 1 def largest_alliance_size(n, strengths): max_alliance_size = 1 for r in range(2, n+1): for subset in combinations(strengths, r): if all(is_coprime(pair[0], pair[1]) for pair in combinations(subset, 2)): max_alliance_size = max(max_alliance_size, len(subset)) return max_alliance_size"},{"question":"Petya loves palindromic numbers. A palindromic number is a number that reads the same forwards and backwards. For example, numbers like 121, 232, and 333 are palindromic, whereas 123 and 456 are not. Petya\'s friend Vasya challenges him to find how many palindromic numbers exist in a given interval [a, b]. Your task is to write a program that calculates the number of palindromic numbers in the interval [a, b] inclusive. Input The single line contains two integers a and b (1 ≤ a ≤ b ≤ 109). Output On the single line print the result, which is the number of palindromic numbers in the interval [a, b]. Examples Input 1 100 Output 18 Input 100 200 Output 18 Note In the first example, the palindromic numbers in the interval [1, 100] are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99. There are 18 such numbers. In the second example, the palindromic numbers in the interval [100, 200] are: 101, 111, 121, 131, 141, 151, 161, 171, 181, 191. There are 10 such numbers. Note that each palindromic number within the given range should be considered irrespective of the number of digits.","solution":"def count_palindromic_numbers(a, b): Returns the count of palindromic numbers in the inclusive range [a, b]. def is_palindromic(n): s = str(n) return s == s[::-1] count = 0 for num in range(a, b + 1): if is_palindromic(num): count += 1 return count"},{"question":"You are given a rectangular grid of dimensions ( m times n ). Each cell of the grid is either empty (denoted by \'.\') or contains an obstacle (denoted by \'#\'). You start at the top-left cell (0,0) and your goal is to reach the bottom-right cell (m-1, n-1). You can move in four possible directions: up, down, left, or right. However, to make things interesting, you need to move exactly ( k ) steps to reach the goal. Given the grid and the integer ( k ), determine if it is possible to reach the goal in exactly ( k ) steps. To summarize: If it\'s possible to reach the bottom-right cell from the top-left cell in exactly ( k ) steps, return \\"POSSIBLE\\". Otherwise, return \\"IMPOSSIBLE\\". -----Input----- The first line contains three integers ( m ), ( n ), and ( k ), where ( m ) is the number of rows in the grid, ( n ) is the number of columns, and ( k ) is the exact number of steps needed to reach the goal. The next ( m ) lines each contain a string of length ( n ), representing the grid. An empty cell is denoted by \'.\', and an obstacle is denoted by \'#\'. -----Output----- Output a single line containing \\"POSSIBLE\\" if it\'s possible to reach the bottom-right cell in exactly ( k ) steps from the top-left cell. Otherwise, output \\"IMPOSSIBLE\\". -----Limits----- - ( 1 leq m, n leq 100 ) - ( 1 leq k leq 200 ) -----Examples----- Sample Input 1: 3 3 4 ... .#. ... Sample Output 1: POSSIBLE Sample Input 2: 3 3 2 ... .#. ... Sample Output 2: IMPOSSIBLE","solution":"def is_possible(m, n, k, grid): Determines if it is possible to reach the bottom-right cell (m-1, n-1) from the top-left cell (0,0) in exactly k steps. def dfs(x, y, steps): if (x, y) == (m - 1, n - 1): return steps == k if steps >= k: return False visited.add((x, y)) for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)): nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': if dfs(nx, ny, steps + 1): return True visited.remove((x, y)) return False visited = set() if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\" if dfs(0, 0, 0) else \\"IMPOSSIBLE\\""},{"question":"Given an array of integers and a target integer value, your task is to find all unique combinations in the array where the candidate numbers sum up to the target. Each candidate number may be used an unlimited number of times. Example 1: Input: candidates = [2,3,6,7], target = 7 Output: [ [2,2,3], [7] ] Example 2: Input: candidates = [2,3,5], target = 8 Output: [ [2,2,2,2], [2,3,3], [3,5] ] Your Task: This is a function problem. You don\'t need to read input. Just complete the function findCombinations() that takes an array of integers candidates and an integer target as parameters and returns a list of lists where each list is a unique combination that sums to the target. Note: The combinations in the output may be in any order. Expected Time Complexity: O(2^N), where N is the number of candidate numbers. Expected Auxiliary Space: O(target). Constraints: 1 <= candidates.length <= 30 1 <= candidates[i] <= 200 All elements of candidates are distinct. 1 <= target <= 500","solution":"from typing import List def findCombinations(candidates: List[int], target: int) -> List[List[int]]: def backtrack(remain, combo, start): if remain == 0: result.append(list(combo)) return elif remain < 0: return for i in range(start, len(candidates)): combo.append(candidates[i]) backtrack(remain - candidates[i], combo, i) combo.pop() result = [] candidates.sort() backtrack(target, [], 0) return result"},{"question":"Lisa needs to arrive at work on time, but she is often delayed due to traffic. She wants to know if she can take a detour to grab coffee without being late. Given the total distance to her work in kilometers, the average speed of her car in km/h, the extra distance she would travel for the coffee detour, and the total amount of time she has until she needs to be at work, determine if she can make the detour and still arrive on time. ------ Input Format ------ - The first line of input will contain an integer D, the total distance to her work in kilometers. - The second line contains an integer S, the average speed of her car in km/h. - The third line contains an integer E, the extra distance in kilometers for the detour. - The fourth line contains an integer T, the total amount of time she has in minutes. ------ Output Format ------ Print a single line containing Yes if Lisa can make the detour and still arrive on time and No otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings yes, Yes, yEs, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ D, S, E ≤ 100 1 ≤ T ≤ 240 ------ subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ 10 30 5 60 ----- Sample Output 1 ------ Yes ----- explanation 1 ------ The total distance she needs to travel including the detour is 10 + 5 = 15 kilometers. The time needed to travel this distance at an average speed of 30 km/h is 15 / 30 = 0.5 hours, which is 30 minutes. Since she has 60 minutes in total, she can easily make the detour and still be on time. ----- Sample Input 2 ------ 5 10 10 30 ----- Sample Output 2 ------ No ----- explanation 2 ------ The total distance including the detour is 5 + 10 = 15 kilometers. The time needed to travel this distance at an average speed of 10 km/h is 15 / 10 = 1.5 hours, which is 90 minutes. Since she only has 30 minutes, she cannot make the detour. ----- Sample Input 3 ------ 7 14 2 35 ----- Sample Output 3 ------ Yes ----- explanation 3 ------ The total distance with the detour is 7 + 2 = 9 kilometers. The time needed to travel this distance at an average speed of 14 km/h is 9 / 14 ≈ 0.64 hours, which is approximately 38.6 minutes. Since 35 minutes is slightly less than 38.6 minutes and the rounding may not add significant extra time, she is still within a reasonable margin to potentially be on time.","solution":"def can_make_detour_and_be_on_time(D, S, E, T): Determines if Lisa can make a detour for coffee and still arrive on time. Parameters: D (int): Total distance to work in kilometers. S (int): Average speed of the car in km/h. E (int): Extra distance in kilometers for the detour. T (int): Total time until she needs to be at work in minutes. Returns: str: \\"Yes\\" if she can make the detour and still be on time, otherwise \\"No\\". total_distance = D + E time_needed_hours = total_distance / S time_needed_minutes = time_needed_hours * 60 if time_needed_minutes <= T: return \\"Yes\\" else: return \\"No\\""},{"question":"Write a function that takes in a positive integer `n` and returns a list of all prime factors of `n` in an ascending order. A prime factor is any prime number that divides `n` without leaving a remainder. # Function Signature The function should be named `prime_factors` and it should have the following signature: ```python def prime_factors(n: int) -> List[int]: ``` # Input - `n` (1 <= n <= 10^6): a positive integer. # Output - A list of integers, representing all prime factors of `n`, sorted in ascending order. # Examples ```python prime_factors(28) -> [2, 7] prime_factors(100) -> [2, 5] prime_factors(37) -> [37] prime_factors(60) -> [2, 3, 5] prime_factors(1) -> [] ``` # Note 1. If `n` is a prime number, the list should contain only `n`. 2. If `n` is 1, the function should return an empty list. 3. The list should not contain duplicates, even if a prime factor appears multiple times in the factorization.","solution":"from typing import List def prime_factors(n: int) -> List[int]: Returns a list of all prime factors of n in ascending order. if n <= 1: return [] factors = [] # Check for number of 2s that divide n if n % 2 == 0: factors.append(2) while n % 2 == 0: n = n // 2 # n must be odd at this point so a skip of 2 (i = i + 2) can be used for i in range(3, int(n**0.5) + 1, 2): # While i divides n, add i and divide n if n % i == 0: factors.append(i) while n % i == 0: n = n // i # If n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"There is a warehouse that stores various products, each identified by a unique integer. Over the years, some products have either been added or removed. Your task is to help the warehouse manager determine the number of unique products after a series of additions and deletions. -----Input----- The first line contains a single integer q (1 le q le 100) — the number of queries. Each of the following q lines contains either an addition or a deletion query in the form of \\"ADD x\\" or \\"DELETE x\\", where x (1 le x le 1000) is the product identifier for the respective operation. - \\"ADD x\\" indicates a new product has been added with identifier x. - \\"DELETE x\\" indicates a product with identifier x has been removed. If there\'s no such product in the warehouse, nothing happens. -----Output----- Output a single integer — the number of unique products in the warehouse after all queries have been performed. -----Examples----- Input 5 ADD 1 ADD 2 ADD 1 DELETE 2 DELETE 3 Output 1 Input 7 ADD 10 DELETE 10 ADD 20 ADD 30 DELETE 20 ADD 10 ADD 30 Output 2 -----Note----- In the first example, we add products with identifiers 1 and 2. Adding product 1 again does not change the unique set. Deleting product 2 removes it from the warehouse. Deleting product 3 has no effect as it was never added. After all operations, only product 1 remains. In the second example, we perform a series of additions and deletions. After all queries, the unique products left are 10 and 30.","solution":"def unique_products_count(queries): Returns the number of unique products in the warehouse after performing a series of addition and deletion operations. Parameters: queries (list of str): List of queries in the form of \\"ADD x\\" or \\"DELETE x\\" Returns: int: Number of unique products remaining in the warehouse products = set() for query in queries: operation, x_str = query.split() x = int(x_str) if operation == \\"ADD\\": products.add(x) elif operation == \\"DELETE\\" and x in products: products.remove(x) return len(products)"},{"question":"A company is developing a gaming leaderboard system where players\' scores need to be ranked dynamically as new scores are added or existing scores are updated. You need to implement the leaderboard system which supports the following operations: 1. `add_score(id, score)`: Adds a new player with the given score, or updates the score of an existing player. If a player with the given id already exists, their new score will replace their current score. 2. `get_rank(id)`: Returns the rank of the player with the given id. The rank is determined as follows: - Scores must be sorted in descending order. - Players with the same score must have the same rank. - The next player(s) will have the rank immediately following the group of players with the same score. -----Constraints----- - The total number of operations will not exceed 10^5. - Player IDs will be unique positive integers and will not exceed 10^9. - Scores will be non-negative integers and will not exceed 10^6. -----Input----- Input is given from Standard Input in the following format: - The first line contains an integer Q, the number of operations. - Each of the next Q lines will be in one of the following formats: - `add_score id score` - `get_rank id` -----Output----- For each `get_rank` operation, output the rank of the player with the given id. -----Sample Input----- 7 add_score 1 100 add_score 2 200 get_rank 1 add_score 1 300 get_rank 1 get_rank 2 add_score 2 300 -----Sample Output----- 2 1 2 Explanation: - Initially, player 1 is added with score 100. - Then, player 2 is added with score 200. - Player 1\'s rank is 2, as player 2 has a higher score. - Player 1\'s score is updated to 300, making him rank 1. - Player 1 has rank 1, since he has the highest score. - Player 2 has rank 2, since player 1 has a higher score. - Player 2\'s score is updated to 300, both players 1 and 2 now have the same score and rank 1.","solution":"class Leaderboard: def __init__(self): self.scores = {} self.sorted_scores = [] def add_score(self, player_id, score): if player_id in self.scores: # Remove old score from sorted_scores old_score = self.scores[player_id] self.sorted_scores.remove((old_score, player_id)) self.scores[player_id] = score # Insert new score self.sorted_scores.append((score, player_id)) self.sorted_scores.sort(reverse=True, key=lambda x: (x[0], x[1])) def get_rank(self, player_id): player_score = self.scores[player_id] rank = 1 for score, pid in self.sorted_scores: if score == player_score: return rank rank += 1 def process_leaderboard(operations): leaderboard = Leaderboard() results = [] for op in operations: parts = op.split() if parts[0] == \'add_score\': id_ = int(parts[1]) score = int(parts[2]) leaderboard.add_score(id_, score) elif parts[0] == \'get_rank\': id_ = int(parts[1]) results.append(leaderboard.get_rank(id_)) return results # Example usage: # operations = [ # \\"add_score 1 100\\", # \\"add_score 2 200\\", # \\"get_rank 1\\", # \\"add_score 1 300\\", # \\"get_rank 1\\", # \\"get_rank 2\\", # \\"add_score 2 300\\" # ] # process_leaderboard(operations) will output [2, 1, 2]"},{"question":"A game involves players jumping on circular platforms arranged in a line. Each platform has a specific jump power associated with it, represented by an array P of length N. A player standing on platform i can jump to platform i+P[i] (1-based index) in one move. The player cannot jump out of the bounds of the array. Determine the minimum number of jumps required to reach the last platform (index N) from the first platform (index 1). If it is not possible to reach the last platform, return -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains a single integer N — the length of Array P. - Next line contains N space-separated integers P_{1}, P_{2}, P_{3}, dots, P_{N} - denoting the array P. ------ Output Format ------ For each test case, output the minimum number of jumps required to reach the last platform. If not possible, return -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ P_{i} ≤ 10^{9} - Sum of N over all test cases does not exceed 3 cdot 10^{5} ----- Sample Input 1 ------ 3 5 3 3 1 0 2 4 2 1 0 3 3 1 1 1 ----- Sample Output 1 ------ 2 -1 2 ----- Explanation 1 ------ Test case 1: - Jump from platform 1 to platform 4 (jump power 3). - Jump from platform 4 to platform 5 (jump power 0). Minimum number of jumps is 2. Test case 2: - Jump from platform 1 to platform 3 (jump power 2). - Cannot jump further as power at platform 3 is 0. Hence, return -1. Test case 3: - Jump from platform 1 to platform 2 (jump power 1). - Jump from platform 2 to platform 3 (jump power 1). Minimum number of jumps is 2.","solution":"def min_jumps_to_last_platform(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] P = test_cases[t][1] if N == 1: results.append(0) continue jumps = [float(\'inf\')] * N jumps[0] = 0 for i in range(N): if jumps[i] == float(\'inf\'): continue jump_power = P[i] for j in range(1, jump_power + 1): if i + j < N: jumps[i + j] = min(jumps[i + j], jumps[i] + 1) else: break if jumps[N-1] != float(\'inf\'): break results.append(jumps[N-1] if jumps[N-1] != float(\'inf\') else -1) return results"},{"question":"You are given an array of n integers, representing the heights of buildings. Each height is a positive integer. Initially, you are positioned at the top of the first building. For each subsequent building, you can only move to the next building if the height of the next building is not shorter than the height of the current building. You are required to calculate the maximum number of consecutive buildings you can visit starting from the first building. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the buildings in order. -----Output----- Print a single integer — the maximum number of consecutive buildings you can visit starting from the first building. -----Examples----- Input 6 1 2 2 3 5 1 Output 5 Input 4 4 3 2 1 Output 1 -----Note----- In the first example, you can start at building 1 (height 1) and consecutively visit buildings 2, 3, 4, and 5 (heights 2, 2, 3, and 5). The total number of buildings visited is 5. In the second example, you cannot move to any subsequent building, as each one is shorter than the previous one. Hence, the maximum number of buildings you can visit is 1.","solution":"def max_consecutive_buildings(n, heights): Returns the maximum number of consecutive buildings that can be visited starting from the first building. Parameters: n (int): Number of buildings. heights (List[int]): List of heights of the buildings. Returns: int: Maximum number of consecutive buildings that can be visited. max_count = 1 current_count = 1 for i in range(1, n): if heights[i] >= heights[i - 1]: current_count += 1 max_count = max(max_count, current_count) else: break return max_count"},{"question":"You are given an array of integers. Your task is to determine if you can rearrange the integers such that for any two consecutive integers in the array, their absolute difference is 1. If it is possible, output the rearranged array. Otherwise, output \\"No\\". -----Input----- The first line of input contains n (1 leq n leq 1000) — the number of integers in the array. The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 1000) — the elements of the array. -----Output----- If it is possible to rearrange the array as described, print \\"Yes\\" followed by the rearranged array. If it is not possible, print \\"No\\". If there are multiple solutions, print any. If rearranging the array so that the absolute difference between any two consecutive integers is 1 is not possible, print \\"No\\". -----Examples----- Input 5 1 3 2 4 5 Output Yes 1 2 3 4 5 Input 4 1 3 5 7 Output No -----Note----- In the first example, you can rearrange the array to [1, 2, 3, 4, 5], where the absolute difference between consecutive integers is 1. In the second example, no rearrangement will make the absolute difference between any two consecutive integers equal to 1, so the output is \\"No\\".","solution":"def can_rearrange(nums): nums.sort() for i in range(1, len(nums)): if abs(nums[i] - nums[i-1]) != 1: return \\"No\\" return f\\"Yesn{\' \'.join(map(str, nums))}\\""},{"question":"Rex is a software engineer who loves solving puzzles involving numbers and sequences. Rex has an array `arr` consisting of `n` integers `(1 ≤ n ≤ 200000)`. He wants to rearrange the array so that it contains a continuous sequence of integers from 1 to `n` (with no repetitions and no missing numbers). To achieve this, Rex can swap the positions of any two elements in the array in one operation. Rex wants to know the minimum number of swap operations required to turn the array into a continuous sequence from 1 to `n`. Can you help him find out? -----Input----- The first line contains a single integer `n` — the number of elements in the array `arr` (`1 ≤ n ≤ 200000`). The second line contains `n` integers `a_1, a_2, ..., a_n` — the elements of the array `arr` (`1 ≤ a_i ≤ n`). It is guaranteed that each number from `1` to `n` appears exactly once in the array. -----Output----- Output a single integer representing the minimum number of swap operations needed to rearrange the array into a continuous sequence from 1 to `n`. -----Examples----- Input 5 4 3 2 5 1 Output 3 Input 4 1 2 4 3 Output 1 Input 6 6 5 4 3 2 1 Output 2 -----Note----- Example 1 .swap(4, 1) -> [1, 3, 2, 5, 4] .swap(2, 3) -> [1, 3, 2, 4, 5] .swap(3, 4) -> [1, 2, 3, 4, 5] Example 2 .swap(4, 3) -> [1, 2, 3, 4] Example 3 swap(6, 1) -> [1, 5, 4, 3, 2, 6] swap(5, 2) -> [1, 2, 4, 3, 5, 6] swap(4, 3) -> [1, 2, 3, 4, 5, 6]","solution":"def min_swaps_to_sort(arr): This function computes the minimum number of swaps required to sort the array into a continuous sequence from 1 to n. n = len(arr) # Compute the correct positions correct_positions = {val: idx for idx, val in enumerate(sorted(arr))} # Track visited elements to avoid cycles revisits visited = [False] * n swaps = 0 for i in range(n): if visited[i] or correct_positions[arr[i]] == i: continue cycle_length = 0 x = i while not visited[x]: visited[x] = True x = correct_positions[arr[x]] cycle_length += 1 if cycle_length > 1: swaps += (cycle_length - 1) return swaps"},{"question":"Simon\'s company is developing a new software system, and they need your help to implement a feature related to session logging. The system logs the start and the end of user sessions, and they want to be able to query the number of active sessions at any given timestamp. Input Format The first line of input contains two integers N and Q, where N is the number of sessions, and Q is the number of queries. The next N lines each contain two integers S and E, representing the start and end timestamps of a session (inclusive). The following Q lines each contain one integer T, which represents a query for the number of active sessions at timestamp T. Output Format For each query, output a line containing the number of active sessions at timestamp T. Constraints 1 ≤ N, Q ≤ 100,000 1 ≤ S, E, T ≤ 1,000,000 S ≤ E SAMPLE INPUT 5 3 1 5 2 6 4 8 10 12 9 9 3 5 9 SAMPLE OUTPUT 2 3 1 Explanation At timestamp 3, there are two active sessions: [1, 5] and [2, 6]. At timestamp 5, there are three active sessions: [1, 5], [2, 6], and [4, 8]. At timestamp 9, there is only one active session: [9, 9].","solution":"def count_active_sessions(sessions, queries): Given a list of sessions and queries, returns the number of active sessions at each query timestamp. :param sessions: List of tuples [(S1, E1), (S2, E2), ...] representing sessions :param queries: List of integers [T1, T2, ...] representing query timestamps :return: List of integers representing number of active sessions at each query timestamp results = [] for query in queries: active_sessions = 0 for session in sessions: if session[0] <= query <= session[1]: active_sessions += 1 results.append(active_sessions) return results"},{"question":"In a vegetable farm, there are N vegetable beds placed in a straight line. Each bed either contains a given type of vegetable or is empty. The farmer wants to plant a certain type of vegetable in all the empty beds such that no two adjacent beds contain the same type of vegetable. Given a sequence representing the current state of the vegetable beds where 0 denotes an empty bed, and positive integers denote different types of vegetables, determine the minimum number of types of vegetables the farmer needs to plant in the empty beds to achieve the desired arrangement. Constraints: * 1 leq N leq 100 * 1 leq V_i leq 1000 or V_i = 0 * All values in input are integers. Input Input is given from Standard Input in the following format: N V_1 V_2 ... V_N Output Print the minimum number of different vegetable types needed to be planted to satisfy the condition. Example Input 6 1 0 2 0 3 4 Output 1 Input 7 0 0 0 1 0 0 0 Output 1 Input 5 0 1 2 3 4 Output 1 Input 8 1 0 0 2 0 0 3 4 Output 1","solution":"def min_vegetable_types_needed(N, beds): Returns the minimum number of different types of vegetables needed to be planted in the empty beds such that no two adjacent beds contain the same type of vegetable. def find_next_type(exclude=set()): Returns the first vegetable type not in the exclude set. num = 1 while num in exclude: num += 1 return num i = 0 while i < N: if beds[i] == 0: left_type = beds[i-1] if i > 0 else -1 j = i while j < N and beds[j] == 0: j += 1 right_type = beds[j] if j < N else -1 required_types = set() if left_type != -1: required_types.add(left_type) if right_type != -1: required_types.add(right_type) # Fill the empty segment with the required types avoiding each other tmp_type = find_next_type(required_types) for k in range(i, j): beds[k] = tmp_type required_types.add(tmp_type) i = j else: i += 1 return 1 # Example Usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) beds = list(map(int, data[1:])) print(min_vegetable_types_needed(N, beds))"},{"question":"Write a code to solve the following problem: You are given a list of integers representing the speeds of cars passing on a highway in km/h. A traffic camera records the speed of each car. You need to calculate the maximum average speed recorded in any contiguous subarray of given length ( K ). If there are multiple subarrays with the same average speed, return the maximum average speed among them. **Input:** - The first line contains two integers ( N ) (the number of cars) and ( K ) (the length of the subarray) where ( 1 leq K leq N leq 10^5 ). - The second line contains ( N ) integers ( v_1, v_2, dots, v_N ) (the speeds of the cars) where ( 1 leq v_i leq 10^4 ). **Output:** - Output the maximum average speed of any contiguous subarray of length ( K ). Output the result with a precision of 6 decimal places. **Example:** Input: ``` 7 3 10 5 2 7 8 7 4 ``` Output: ``` 7.333333 ``` Explanation: The subarray with the maximum average speed is [7, 8, 7], which has an average speed of 7.333333 km/h.","solution":"def max_average_speed(N, K, speeds): Calculates the maximum average speed of any contiguous subarray of length K. :param N: int - the number of cars :param K: int - the length of the subarray :param speeds: list of int - the speeds of the cars :return: float - the maximum average speed with a precision of 6 decimal places # Initial sum of the first subarray of length K current_sum = sum(speeds[:K]) max_sum = current_sum # Sliding window to compute the sum of the next subarray by removing the first element and adding the next for i in range(K, N): current_sum += speeds[i] - speeds[i - K] if current_sum > max_sum: max_sum = current_sum # The result is the maximum sum divided by K for the average max_avg = max_sum / K return round(max_avg, 6)"},{"question":"A natural disaster simulation requires monitoring changes in temperature at various sensor locations over a grid. The grid is represented as an `n x m` matrix where each element represents the temperature at that point. The simulation runs in discrete time steps and at each step, the temperature at each point can change. Your task is to determine the maximum temperature observed in any location after performing `t` updates. Each update consists of simultaneously increasing the temperature of each point by the value specified in an `addend` matrix of the same dimensions (`n x m`). Input The first line of the input contains three integers `n`, `m`, and `t` (1 ≤ n, m ≤ 100, 1 ≤ t ≤ 10^9) — the dimensions of the temperature grid and the number of time steps. The next `n` lines each contain `m` integers representing the initial temperature grid. The following `n` lines each contain `m` integers representing the `addend` matrix. Output Print the maximum temperature observed after `t` updates. Examples Input 3 3 2 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 Output 11 Input 2 2 3 0 0 0 0 2 3 1 4 Output 12 Note In the first sample, the initial temperature grid is: 1 2 3 4 5 6 7 8 9 And the addend matrix is: 1 1 1 1 1 1 1 1 1 After the first update, the temperature grid becomes: 2 3 4 5 6 7 8 9 10 After the second update, the maximum temperature at any location is 11. In the second sample, the initial temperature grid is: 0 0 0 0 And the addend matrix is: 2 3 1 4 After the first update, the temperature grid becomes: 2 3 1 4 After the second update, the temperature grid becomes: 4 6 2 8 After the third update, the maximum temperature at any location is 12.","solution":"def max_temperature_after_t_updates(n, m, t, initial_matrix, addend_matrix): Returns the maximum temperature observed after t updates on the temperature grid. max_initial_temperature = max(max(row) for row in initial_matrix) max_addend = max(max(row) for row in addend_matrix) # Maximum temperature after t updates max_temperature = max_initial_temperature + t * max_addend return max_temperature # Example usage # print(max_temperature_after_t_updates(3, 3, 2, # [[1, 2, 3], [4, 5, 6], [7, 8, 9]], # [[1, 1, 1], [1, 1, 1], [1, 1, 1]])) # This should output 11"},{"question":"Given an array of non-negative integers, find the contiguous subarray (containing at least one number) which has the largest product, and return its product. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines: the first line contains an integer N, which is the size of the array. The second line contains N space-separated non-negative integers representing the array. ------ Output Format ------ - For each test case, print a new line containing a single integer, the largest product of a contiguous subarray for that test case. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ a[i] ≤ 1000 ----- Sample Input 1 ------ 3 5 1 2 3 4 5 6 6 0 4 5 10 2 8 0 2 3 4 0 1 2 2 ----- Sample Output 1 ------ 120 40 24 ----- explanation 1 ------ Test Case 1: The entire array is a subarray, and the product is 1 * 2 * 3 * 4 * 5 = 120. Test Case 2: The largest product subarray is {4, 5, 10, 2} with product 4 * 5 * 10 * 2 = 400. Test Case 3: The largest product subarray is {2, 3, 4} with product 2 * 3 * 4 = 24.","solution":"def max_product_subarray(arr): Returns the maximum product of a contiguous subarray. if not arr: return 0 max_product = min_product = result = arr[0] for num in arr[1:]: if num == 0: max_product = min_product = 0 else: temp_max = max(num, max_product * num, min_product * num) min_product = min(num, max_product * num, min_product * num) max_product = temp_max result = max(result, max_product) return result def process_test_cases(t, test_cases): Processes multiple test cases and returns the results as a list. results = [] for i in range(t): n, array = test_cases[i] results.append(max_product_subarray(array)) return results"},{"question":"You are tasked with constructing a binary tree based on provided constraints. The properties of the tree should meet the following criteria: The tree should be a full binary tree, meaning every node in the tree has either 0 or 2 children. The depth of the tree should be maximized given the constraints. Given a sequence of n integers b_1, b_2, dots, b_n construct a full binary tree such that: each node has a value from the given sequence; the tree uses all the values in the sequence exactly once. Output the resulting tree or report that no solution exists. -----Input----- The first line contains a single integer n (1 le n le 500) — the number of nodes in the tree, which is also the length of the sequence. The second line contains n integers b_1, b_2, dots, b_n (1 le b_i le 500) — the values assigned to each node in the binary tree. -----Output----- Print \\"NO\\" if no full binary tree can be constructed under the given conditions. Otherwise print \\"YES\\" and the depth of the resulting tree in the first line. Subsequent lines should describe the tree in a level order traversal format (i.e., each node followed by its left and right children if they exist). The outputs for each node should be in the format (i, l, r), where i is the value of the node, and l and r are the indices of its left and right children in the sequence. For nodes with no children, output -1 in place of the children indices. -----Examples----- Input 3 2 3 1 Output YES 1 2 3 1 Input 7 4 2 6 5 1 3 7 Output YES 2 4 2 6 2 1 3 6 5 7 Input 4 1 2 3 4 Output NO -----Note----- Here are the trees for the example cases. Both have maximum depth for the given nodes. The first tree has a depth of 1 with the structure: 2 / 3 1 The second tree has a depth of 2 with the structure: 4 / 2 6 / / 1 3 5 7","solution":"def construct_full_binary_tree(n, b): Constructs a full binary tree from the given sequence of values if possible. Returns a tuple (status, depth, tree) where: - status is \\"YES\\" if a full binary tree can be constructed, otherwise \\"NO\\" - depth is the depth of the resulting tree if construction is possible - tree is a list of tuples (node_value, left_child_index, right_child_index) if n % 2 == 0: return \\"NO\\", 0, [] if n == 1: return \\"YES\\", 0, [(b[0], -1, -1)] def build_tree(index): if index >= n or index < 0: return -1, -1, -1 left = 2 * index + 1 right = 2 * index + 2 left_index, _, _ = build_tree(left) if left < n else (-1, -1, -1) right_index, _, _ = build_tree(right) if right < n else (-1, -1, -1) return index, left_index, right_index depth = 0 remaining_nodes = n while remaining_nodes > 1: remaining_nodes = (remaining_nodes - 1) // 2 depth += 1 tree = [] for i in range(n): _, left, right = build_tree(i) tree.append((b[i], left, right)) return \\"YES\\", depth, tree"},{"question":"You are working on a project that involves performing operations on strings. One of the functionalities required is to determine the most frequently occurring character in a string. Given a string `s`, write a function `most_frequent_character(s)` that returns the character which appears the most times. If there are multiple characters with the same highest frequency, return the lexicographically smallest one. For example: ``` most_frequent_character(\\"aabbcc\\") should return \\"a\\" most_frequent_character(\\"abbbc\\") should return \\"b\\" most_frequent_character(\\"abcde\\") should return \\"a\\" ``` Note: - The string will only contain lowercase English letters. - Consider the lexicographical order when there is a tie in frequency.","solution":"def most_frequent_character(s): Returns the character which appears the most times in the string s. If there\'s a tie, the lexicographically smallest character is returned. from collections import Counter char_count = Counter(s) max_freq = max(char_count.values()) candidates = [char for char, count in char_count.items() if count == max_freq] return min(candidates)"},{"question":"Einstein\'s Riddle is a logic puzzle known for its complexity and for testing sharp logical thinking. We are going to simplify the problem and create a similar game using programming. The game is played on a grid of size N x N, where each cell in the grid can either contain a stone (represented by `1`) or be empty (represented by `0`). The player needs to count the total number of stones in the grid. The challenge is to implement this count efficiently even for large grids. Input The first line contains an integer T (1 ≤ T ≤ 100) representing the number of test cases. For each test case: - The first line contains a single integer N (1 ≤ N ≤ 1000), representing the size of the grid. - The next N lines each contain N integers, either `0` or `1`, representing the grid. Output For each test case, output a single integer representing the total number of `1`s (stones) in the grid. SAMPLE INPUT 2 3 0 1 0 1 0 0 0 0 1 4 1 0 1 0 0 0 0 0 1 1 1 0 0 0 1 0 SAMPLE OUTPUT 3 6 Explanation In the first test case, the grid is: ``` 0 1 0 1 0 0 0 0 1 ``` There are 3 cells with `1s` (stones), so the output is 3. In the second test case, the grid is: ``` 1 0 1 0 0 0 0 0 1 1 1 0 0 0 1 0 ``` There are 6 cells with `1s` (stones), so the output is 6.","solution":"def count_stones_in_grid(T, test_cases): Counts the total number of 1s (stones) in the given grids. Parameters: T (int): Number of test cases. test_cases (list): List of tuples, where each tuple contains an integer N and a list of N lists representing the grid. Returns: list: List of integers representing the total number of stones in each grid. results = [] for N, grid in test_cases: stone_count = sum(sum(row) for row in grid) results.append(stone_count) return results"},{"question":"a is an array of n integers. You need to process q queries on this array. Each query consists of two integers l and r. For each query, you are required to find the sum of absolute differences between each consecutive element in the subarray from index l to r (inclusive). Input The first line contains one integer n (1 ≤ n ≤ 100000). The second line contains n integers — elements of a (-100000 ≤ ai ≤ 100000 for each i from 1 to n). The third line contains one integer q (1 ≤ q ≤ 100000). Then q lines follow. Each line contains the values l and r for the corresponding query (1 ≤ l ≤ r ≤ n). Output Print q integers, ith integer must be equal to the answer to the ith query. Example Input 5 1 3 6 7 9 3 1 3 2 5 1 5 Output 5 6 12 Note Consider the example provided: In the first query, the subarray is [1, 3, 6] and the sums of absolute differences are |3 - 1| + |6 - 3| = 2 + 3 = 5. In the second query, the subarray is [3, 6, 7, 9] and the sums of absolute differences are |6 - 3| + |7 - 6| + |9 - 7| = 3 + 1 + 2 = 6. In the third query, the subarray is [1, 3, 6, 7, 9] and the sums of absolute differences are |3 - 1| + |6 - 3| + |7 - 6| + |9 - 7| = 2 + 3 + 1 + 2 = 8.","solution":"def sum_of_absolute_differences(n, a, q, queries): For each query, find the sum of absolute differences between each consecutive element in the subarray. Parameters: n (int): The length of the array a. a (list of int): The array of integers. q (int): Number of queries. queries (list of tuples): Each tuple contains two integers (l, r). Returns: list of int: The result of each query as a list. results = [] for l, r in queries: sum_diff = 0 for i in range(l-1, r-1): sum_diff += abs(a[i+1] - a[i]) results.append(sum_diff) return results"},{"question":"You are given a list of integers. Your task is to find the longest subsequence of this list that is strictly increasing. -----Input----- The first line contains a positive integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the list. -----Output----- Print a single line containing an integer k — the length of the longest strictly increasing subsequence in the list. -----Examples----- Input 6 5 2 8 6 3 6 Output 3 Input 5 1 2 3 4 5 Output 5 -----Note----- In the second test, the whole list is a strictly increasing subsequence. In the first test, the longest strictly increasing subsequence is {2, 3, 6}, which has a length of 3.","solution":"def longest_increasing_subsequence_length(nums): Returns the length of the longest strictly increasing subsequence in a list of integers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example Usage: # length = longest_increasing_subsequence_length([5, 2, 8, 6, 3, 6]) # print(length) # Output: 3"},{"question":"A treasure hunter found a series of caves, each containing a certain number of gold coins. The hunter wants to maximize the number of coins he can collect but there’s a catch. The caves are interconnected by tunnels and he cannot revisit any cave once he has left it because the tunnels collapse after one traversal. You need to write a program that determines the maximum number of coins the hunter can collect if he starts collecting coins at any cave and explores all possible paths. Constraints: * 1 leq N leq 10^5 (N is the number of caves) * 1 leq M leq 2 times 10^5 (M is the number of tunnels) * 1 leq C_i leq 10^6 (C_i is the number of coins in the i-th cave) Input Input is given from Standard Input in the following format: N M C_1 C_2 ... C_N A_1 B_1 A_2 B_2 : A_M B_M The first line contains the number of caves N and the number of tunnels M. The second line contains N integers representing the number of coins in each cave. The next M lines each contain two integers A_i and B_i representing a direct tunnel between cave A_i and cave B_i. Output Print the maximum number of coins the hunter can collect starting from any cave. Examples Input 4 4 5 3 4 7 1 2 2 3 3 4 4 1 Output 14 Input 5 5 1 2 3 4 5 1 2 2 3 3 4 4 5 5 1 Output 15 Input 3 2 10 20 30 1 2 2 3 Output 60 Input 6 7 1 2 3 4 5 6 1 2 2 3 3 4 4 5 5 6 6 1 1 4 Output 15","solution":"from collections import defaultdict, deque def max_coins(N, M, coins, tunnels): # Create adjacency list for the graph representation of the caves graph = defaultdict(list) for a, b in tunnels: graph[a-1].append(b-1) graph[b-1].append(a-1) # A visited array to keep track of visited caves visited = [False] * N max_collected = 0 # Helper function to perform BFS and calculate total coins in connected component def bfs(start): queue = deque([start]) visited[start] = True total_coins = 0 while queue: node = queue.popleft() total_coins += coins[node] for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return total_coins # Explore all possible starting points for i in range(N): if not visited[i]: max_collected = max(max_collected, bfs(i)) return max_collected"},{"question":"In a distant galaxy, there is a complex system of tunnels connecting various space stations. Each space station has a unique id starting from 0. The tunnels have certain rules to traverse between stations, and these rules are dictated by their power levels. Each tunnel\'s power level P dictates that if you are at station id A, you can travel directly to station id (A * P). Your task is to help an explorer to determine if it\'s possible to journey from the starting station (id 0) to various destination stations given a set of tunnels with power levels P1, P2, ..., Pn. It\'s guaranteed that there is always a tunnel with a power level of at most 10^4. You need to answer M queries. Each query consists of a single integer Y, representing the id of the destination station. You must determine whether it is possible to travel from the starting station (id 0) to the station with id Y using the given tunnels. Constraints 1 ≤ N ≤ 10^3 1 ≤ M ≤ 10^5 1 ≤ Pi ≤ 10^9 1 ≤ Y ≤ 10^9 Input The first line contains two integers denoting N and M. The second line contains N integers denoting Pi for the tunnels. The numbers are separated by spaces. The following M lines each contain a single integer denoting Yi. Output For each query, output \\"YES\\" if it is possible to reach the station with id Y from station id 0, otherwise output \\"NO\\". SAMPLE INPUT 3 3 2 3 5 4 6 7 SAMPLE OUTPUT YES YES NO Explanation You can reach station 4 (2 * 2) and station 6 (2 * 3). You cannot reach station 7 with the given powers.","solution":"def can_reach_station(n, tunnel_powers, queries): reachable = set() for power in tunnel_powers: if power > 0: reachable.add(power) results = [] for y in queries: found = False for power in reachable: if y % power == 0: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: n = 3 tunnel_powers = [2, 3, 5] queries = [4, 6, 7] results = can_reach_station(n, tunnel_powers, queries) for result in results: print(result)"},{"question":"Given a string str of length N consisting of only lowercase alphabetical characters, determine the character that appears the maximum number of times. If there are ties, return the lexicographically smaller character. Example 1: Input: N = 6, str = \\"geekss\\" Output: g Explanation: \'g\' and \'e\' appear twice each, but \'g\' is lexicographically smaller. Example 2: Input: N = 7, str = \\"abracad\\" Output: a Explanation: \'a\' appears three times, which is more than any other character. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function maxFrequencyCharacter() that takes the string str and integer N as parameters and returns the desired character as output. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1) (considering the fixed size of the character set). Constraints: 1 ≤ N ≤ 10^5","solution":"def maxFrequencyCharacter(N, s): Returns the character that appears the maximum number of times in the string s of length N. In case of ties, returns the lexicographically smaller character. frequency = [0] * 26 for char in s: frequency[ord(char) - ord(\'a\')] += 1 max_frequency = 0 max_char = \'\' for i in range(26): if frequency[i] > max_frequency: max_frequency = frequency[i] max_char = chr(i + ord(\'a\')) return max_char"},{"question":"Alice is interested in a unique way to transform strings. She has devised a process where she can perform the following operations on a given string s consisting only of lowercase English letters: 1. Reverse the string. 2. Swap any two characters. 3. Change any character to any other lowercase English letter. She wants to know the minimum number of operations needed to convert a given string s into another string t of the same length using the above operations. Your task is to write a program to help Alice calculate this minimum number of operations. Input Format The first line contains an integer T, the number of test cases. The following T lines each contain two strings, s and t, separated by a space. Output Format For each test case, output a single line containing the minimum number of operations needed to convert s into t. Constraints - 1 ≤ T ≤ 100 - 1 ≤ length(s), length(t) ≤ 1000 - s and t contain only lowercase English letters. Sample Input 3 abc cba abcd efgh aaaa bbbb Sample Output Case #1: 2 Case #2: 4 Case #3: 4 Explanation - In test case 1, the string \\"abc\\" can be converted to \\"cba\\" by reversing it once and swapping \'a\' and \'c\' once, so the minimum number of operations is 2. - In test case 2, each of the characters \'a\', \'b\', \'c\', and \'d\' in the string \\"abcd\\" needs to be changed to \'e\', \'f\', \'g\', and \'h\', respectively, totaling 4 operations. - In test case 3, each \'a\' needs to be changed to \'b\', totaling 4 operations.","solution":"def min_operations_to_convert(s, t): Determines the minimum number of operations needed to convert string s to string t. Parameters: s (str): The original string. t (str): The target string to convert to. Returns: int: The minimum number of operations to convert s to t. # Initialize the count of operations to 0 operations = 0 # Calculate the number of character changes needed for char_s, char_t in zip(s, t): if char_s != char_t: operations += 1 return operations def process_test_cases(test_cases): results = [] for i, (s, t) in enumerate(test_cases): min_ops = min_operations_to_convert(s, t) results.append(f\\"Case #{i + 1}: {min_ops}\\") return results"},{"question":"Ben loves to collect marbles. He has a collection which consists of different marbles whose sizes are represented by positive integers. Ben wants to show his marbles to his friends based on their sizes. He wants to perform a series of operations to organize his marbles in a way that makes his collection look the most impressive. The operation he performs is as follows: Given any two marbles of sizes x and y, Ben can merge them to form a new marble of size x + y. The merging operation is allowed repeatedly, and each time a merge is performed, the number of marbles in the collection decreases by one. Ben’s goal is to maximize the size of the smallest marble in his collection after any number of merge operations. Help Ben determine the maximum possible size of the smallest marble he can achieve. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of marbles in Ben\'s collection. - The second line contains n integers a_i (1 ≤ a_i ≤ 10^9), where a_i represents the size of each marble. # Output Output a single integer — the maximum possible size of the smallest marble in the collection after any number of merge operations. # Example Input ``` 4 1 2 3 4 ``` Output ``` 10 ``` Input ``` 5 10 20 30 40 50 ``` Output ``` 150 ``` # Note In the first example, Ben can merge marbles to form a single marble of size 10 by following these steps: - Merge 1 and 2 to get a marble of size 3. - Merge 3 and 3 to get a marble of size 6. - Merge 6 and 4 to get a marble of size 10. Hence, the maximum possible size of the smallest marble is 10.","solution":"def max_smallest_marble_size(n, sizes): Given a list of marble sizes, determines the maximum possible size of the smallest marble after any number of merge operations. return sum(sizes)"},{"question":"A large conference is being held at a hotel, and there are numerous breakout sessions happening simultaneously in different rooms. Each room has its own schedule of sessions, and some attendees will attend multiple different sessions in different rooms throughout the day. The hotel management wants to ensure that each session room does not exceed its maximum occupancy at any given time to comply with fire safety regulations. As part of the conference planning team, you are tasked with writing a program to verify that the sessions scheduled do not cause any room to exceed its maximum occupancy limit. Each attendee is listed with their schedule of sessions, and for each room, the sessions are given along with their maximum occupant capacity. -----Input----- The input consists of: - one line with one integer n (1 leq n leq 1000), the number of conference rooms; - n lines, each describing a room: - The first element of each line is an integer m (1 leq m leq 500), the number of sessions in that room. - The second element is an integer C (1 leq C leq 500), the maximum room capacity. - The next 2 times m elements are in pairs and describe each session: a non-negative integer t_i (0 leq t_i leq 1440) and a positive integer d_i (1 leq d_i leq 720), where t_i is the start time of the session (in minutes from the start of the day) and d_i is the duration of the session (in minutes). - one line with one integer k (1 leq k leq 10000), the number of attendees; - k lines, each describing an attendee: - The first element of each line is an integer a_i (1 leq a_i leq 100), the number of sessions that the attendee plans to attend. - The next 2 times a_i elements are in pairs: an integer r_j (1 leq r_j leq n) and a non-negative integer t_k (0 leq t_k leq 1440), where r_j is the room number of the session and t_k is the start time of the session the attendee intends to attend in that room. -----Output----- Output \\"NO\\" if any room exceeds its maximum capacity during any session, and \\"YES\\" otherwise. -----Example----- Sample Input: 2 2 10 0 60 120 60 1 5 60 60 3 2 1 0 2 60 1 1 120 2 1 60 2 60 Sample Output: YES","solution":"def verify_sessions(n, rooms_info, k, attendees_info): # Initialize a dict to hold the occupant count of each session in each room. sessions_dict = {} for i in range(n): num_sessions = rooms_info[i][0] max_capacity = rooms_info[i][1] sessions = rooms_info[i][2:] room_sessions = [] for j in range(num_sessions): start_time = sessions[j * 2] duration = sessions[j * 2 + 1] end_time = start_time + duration room_sessions.append((start_time, end_time, max_capacity)) sessions_dict[i + 1] = room_sessions # Initialize a dict to track current occupants for sessions in each room. occupants_count = {i + 1: [0] * len(sessions_dict[i + 1]) for i in range(n)} # For each attendee, update the occupant count for the corresponding session. for i in range(k): num_attend_sessions = attendees_info[i][0] sessions = attendees_info[i][1:] for j in range(num_attend_sessions): room_num = sessions[j * 2] start_time = sessions[j * 2 + 1] # Find which session attendee attends in the specific room. for s_index, (start, end, max_cap) in enumerate(sessions_dict[room_num]): if start == start_time: occupants_count[room_num][s_index] += 1 if occupants_count[room_num][s_index] > max_cap: return \\"NO\\" return \\"YES\\" # Example usage n = 2 rooms_info = [(2, 10, 0, 60, 120, 60), (1, 5, 60, 60)] k = 3 attendees_info = [(2, 1, 0, 2, 60), (1, 1, 120), (2, 1, 60, 2, 60)] print(verify_sessions(n, rooms_info, k, attendees_info)) # Output should be \\"YES\\""},{"question":"Robot R is exploring a grid of size N x M. He starts at position (0, 0) and wants to reach the bottom-right corner at position (N-1, M-1). However, certain cells contain obstacles which he cannot pass through. Given a 2D binary grid where 0 represents an open cell and 1 represents an obstacle, find the number of unique paths Robot R can take to reach his destination. Robot R can only move either down or right at any point in time. Write a function uniquePathsWithObstacles(grid) that returns the number of unique paths from (0, 0) to (N-1, M-1). If there is no valid path, return 0. Example 1: Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 Explanation: There are two possible paths: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) Example 2: Input: grid = [ [0, 1], [0, 0] ] Output: 1 Explanation: There is only one possible path: (0,0) -> (1,0) -> (1,1) Your Task: You don\'t need to read input or print anything. Complete the function uniquePathsWithObstacles() which takes a 2D list grid as input parameter and returns the number of unique paths from (0, 0) to (N-1, M-1). Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 100","solution":"def uniquePathsWithObstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid, where 0 represents an open cell and 1 represents an obstacle. if not grid or grid[0][0] == 1: return 0 N, M = len(grid), len(grid[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"During vacation, Alice decides to visit the amusement park. The park is organized as a grid with n rows and m columns, where certain cells are impassable. Alice starts at the top-left corner of the park (1, 1) and wants to reach the bottom-right corner (n, m). She can only move either to the right or downwards. Alice wants to know the number of distinct paths she can take from the start to the destination, avoiding the impassable cells. Write a program to calculate the number of distinct paths Alice can take. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the park grid. The next n lines each contain m characters, each character is \'0\' or \'1\'. \'0\' denotes a passable cell and \'1\' denotes an impassable cell. The top-left corner (1, 1) and the bottom-right corner (n, m) are always \'0\'. -----Output----- Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner of the park. -----Examples----- Input 3 3 000 010 000 Output 2 Input 4 4 0000 0100 0010 0000 Output 4 -----Note----- In the first example, there are two distinct paths Alice can take: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) In the second example, there are four distinct paths Alice can take, avoiding the impassable cells.","solution":"def count_paths(n, m, grid): if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return 0 # If start or end is not passable, return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Reading input and preparing grid def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [data[i + 2] for i in range(n)] # Print result print(count_paths(n, m, grid)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a rectangular grid of size R x C, where some cells contain obstacles. You need to find the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (R-1, C-1) without passing through any obstacles. You can move up, down, left, or right, but not diagonally. ------ Input ------ The first line of input contains a single integer T (1 <= T <= 10), the number of test cases. For each test case, the first line contains two integers R and C (1 <= R, C <= 100), the number of rows and columns in the grid. The next R lines each contain a string of length C consisting of characters \'.\' (free space) and \'#\' (obstacle). ------ Output ------ For each test case, output a single integer: the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, output -1. ----- Sample Input 1 ------ 2 3 3 ... .#. ... 4 4 ..#. #..# .#.. .... ----- Sample Output 1 ------ 4 6 ----- Explanation 1 ------ For the first test case, the shortest path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), which has a length of 4. For the second test case, the shortest path is (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3), which has a length of 6.","solution":"from collections import deque def shortest_path(grid, R, C): if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == R - 1 and col == C - 1: return dist for dr, dc in directions: newRow, newCol = row + dr, col + dc if 0 <= newRow < R and 0 <= newCol < C and grid[newRow][newCol] == \'.\' and (newRow, newCol) not in visited: visited.add((newRow, newCol)) queue.append((newRow, newCol, dist + 1)) return -1 def find_shortest_paths(test_cases): results = [] for R, C, grid in test_cases: results.append(shortest_path(grid, R, C)) return results"},{"question":"Given a number N, determine if it is a power of 4. If N is a power of 4, return the exponent k such that 4^k = N. If N is not a power of 4, return -1. Example 1: Input: N = 16 Output: 2 Explanation: 16 is 4^2. Hence, the output is 2. Example 2: Input: N = 15 Output: -1 Explanation: 15 is not a power of 4. Hence, the output is -1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPowerOfFour() which takes an integer N as input and returns the appropriate exponent if N is a power of 4, otherwise returns -1. Expected Time Complexity: O(log(N)) Expected Auxiliary Space: O(1) Constraints: 0 <= N <= 10^{8}","solution":"def isPowerOfFour(N): Determines if a number is a power of 4. Arguments: N -- the number to check (integer) Returns: The exponent k such that 4^k = N if N is a power of 4, otherwise -1. if N <= 0: return -1 k = 0 while N % 4 == 0: N //= 4 k += 1 return k if N == 1 else -1"},{"question":"Given a linked list, return the node where the cycle begins. If there is no cycle, return null. To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where the tail connects to. If pos is -1, then there is no cycle in the linked list. Note: Do not modify the linked list. Example 1: Input: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node. Example 2: Input: head = [1,2], pos = 0 Output: tail connects to node index 0 Explanation: There is a cycle in the linked list, where tail connects to the first node. Example 3: Input: head = [1], pos = -1 Output: no cycle Explanation: There is no cycle in the linked list. Follow up: Can you solve it using O(1) (i.e., constant) memory?","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head): Detects the start node of the cycle in the linked list if it exists. :param head: ListNode :return: ListNode or None if not head or not head.next: return None slow, fast = head, head # First phase: Determine if there is a cycle using fast and slow pointers. while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected break # If no cycle is detected, return None. if not fast or not fast.next: return None # Second phase: Find the entry point to the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"The Great Librarian of Alexandria has a peculiar way of storing books in his grand library. Each book has a distinct ID represented as an integer. However, due to space constraints, he often has to pile up books such that some of their IDs get obscured underneath others. The librarian keeps track of which book is on top of which, and this information can be represented as a hierarchy of IDs. Your task is to write a program that can process a series of operations on the librarian\'s books. There are two types of operations: 1. Add a new book with a specified ID at the top of the stack. 2. Undo the addition of the most recently added book, re-exposing the book that was directly underneath it. After processing a series of these operations, you must output the ID of the book that is currently visible on top of the stack. If the stack is empty at any point, output \\"No books\\" instead. **Input:** The first line of input contains an integer n (1 ≤ n ≤ 100,000), representing the number of operations. Each of the following n lines contains one of the two following operations: - \\"ADD <ID>\\" where <ID> (1 ≤ ID ≤ 1,000,000) is the ID of the book to be added. - \\"UNDO\\" which undoes the most recent addition of a book. **Output:** Print the ID of the book that is on top of the stack after all operations have been performed. If the stack is empty, output \\"No books\\". **Examples:** **Input:** ``` 5 ADD 5 ADD 10 UNDO ADD 7 UNDO ``` **Output:** ``` 5 ``` **Input:** ``` 6 ADD 5 ADD 10 UNDO UNDO UNDO UNDO ``` **Output:** ``` No books ``` **Input:** ``` 3 ADD 1 ADD 2 UNDO ``` **Output:** ``` 1 ```","solution":"def process_operations(n, operations): Process a series of book stacking operations and return the ID of the book on top of the stack after all operations are performed. Args: n (int): Number of operations. operations (list of str): List of operations to be processed. Returns: str: ID of the book on top or \\"No books\\" if the stack is empty. stack = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, book_id = operation.split() stack.append(int(book_id)) elif operation == \\"UNDO\\": if stack: stack.pop() if stack: return str(stack[-1]) else: return \\"No books\\""},{"question":"Given an array of integers, you need to rearrange the array such that the difference between any two adjacent elements is as large as possible. This can be achieved by sorting the array in a specific manner. You are required to write a program to achieve this rearrangement and output the modified array. # Input: The input contains two lines: - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n integers, the elements of the array, a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6). # Output: Output a single line containing n integers, the rearranged array that maximizes the difference between any two adjacent elements. # Example: Input: ``` 5 1 3 5 2 4 ``` Output: ``` 5 1 4 2 3 ``` Input: ``` 4 6 2 9 3 ``` Output: ``` 9 2 6 3 ``` # Note: - A possible approach to solve this problem is to sort the array and then arrange the elements such that the largest and smallest elements are alternated. - In the first example, one of the valid outputs is `5 1 4 2 3`, where the difference between any two adjacent elements is maximized.","solution":"def rearrange_array(n, arr): Rearrange the array such that the difference between any two adjacent elements is maximized. arr.sort() left = 0 right = n - 1 result = [] while left <= right: if right > left: result.append(arr[right]) right -= 1 if left <= right: result.append(arr[left]) left += 1 return result"},{"question":"Write a function that takes an integer n and checks if it is a prime number. A prime number is a number greater than 1 and has no divisors other than 1 and itself. The function should print \\"Prime\\" if n is a prime number, otherwise print \\"Not Prime\\". Constraints * 2 ≤ n ≤ 1000 Input A single integer n. Output Print \\"Prime\\" or \\"Not Prime\\" in a line. Examples Input 5 Output Prime Input 10 Output Not Prime Input 97 Output Prime","solution":"def is_prime(n): Returns \\"Prime\\" if n is a prime number, otherwise returns \\"Not Prime\\". if n < 2: return \\"Not Prime\\" for i in range(2, int(n**0.5) + 1): if n % i == 0: return \\"Not Prime\\" return \\"Prime\\""},{"question":"Design a function that will determine the minimum number of coins needed to make a given amount of change from an unlimited supply of coins of given denominations. The function should be named ```min_coins()``` and take two arguments: ```min_coins((1), (2))``` ``` (1) - An integer representing the total amount of change needed (2) - A list of integers representing the denominations of the coins available ``` The function should return the minimum number of coins needed to make the change, if it\'s possible to make the change with the given denominations. If it\'s not possible to make change with the given denominations, the function should return ```-1```. # Examples: 1. ```python min_coins(11, [1, 2, 5]) -----> 3 /// The minimum number of coins needed to make change for 11 using denominations 1, 2, and 5 is 3 (i.e., 5 + 5 + 1). /// ``` 2. ```python min_coins(3, [2]) -----> -1 /// It is not possible to make change for 3 using only a denomination of 2. /// ```","solution":"def min_coins(amount, coins): Determines the minimum number of coins needed to make a given amount of change. Parameters: amount (int): The total amount of change needed. coins (list): A list of integers representing the denominations of the coins available. Returns: int: The minimum number of coins needed to make the change, or -1 if change is not possible. # Initialize a list to store the minimum number of coins for each amount up to the target amount. dp = [float(\'inf\')] * (amount + 1) # Base case: 0 amount requires 0 coins. dp[0] = 0 # Iterate over each coin denomination. for coin in coins: for x in range(coin, amount + 1): # Update the dp array for the current amount dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still infinity, it means it\'s not possible to make the change. return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"You are working on a software that manages events in a calendar application. Each event has a start time and an end time represented in 24-hour format as strings \\"HH:MM\\". You need to determine the maximum number of non-overlapping events that can be attended from the list of scheduled events. ------ Input ------ The first line of input contains an integer T, the number of test cases. Each test case starts with a single integer N, representing the number of events. The next N lines each contain two strings: the start time and end time of the event, separated by a space. ------ Output ------ For each test case, output a single integer: the maximum number of non-overlapping events that can be attended. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 00:00 ≤ start time, end time < 24:00 ------ Sample Input ------ 2 3 09:00 10:30 10:00 11:00 11:00 12:00 4 09:00 10:00 10:00 11:00 10:30 11:30 11:00 12:00 ------ Sample Output ------ 2 3 ------ Explanation ------ In the first test case, two non-overlapping events can be attended: \\"09:00-10:30\\" and \\"11:00-12:00\\". In the second test case, three non-overlapping events can be attended: \\"09:00-10:00\\", \\"10:30-11:30\\", and \\"11:00-12:00\\".","solution":"def max_non_overlapping_events(events): Given a list of events with start and end times, compute the maximum number of non-overlapping events that can be attended. # Convert event times to tuples of integers representing minutes since 00:00 event_times = [(int(start[:2]) * 60 + int(start[-2:]), int(end[:2]) * 60 + int(end[-2:])) for start, end in events] # Sort events by their end times event_times.sort(key=lambda x: x[1]) # Use a greedy algorithm to select the maximum number of non-overlapping events max_events = 0 last_end_time = 0 for start, end in event_times: if start >= last_end_time: max_events += 1 last_end_time = end return max_events def solve_calendar_problem(test_cases): results = [] for events in test_cases: results.append(max_non_overlapping_events(events)) return results"},{"question":"Write a function `mostFrequentSubstring` that, given a string `s` and an integer `k`, returns the most frequent substring of length `k` in `s`. In case of tie, return the lexicographically smallest substring. Constraints: - The length of the string (1 leq text{len}(s) leq 100000). - The length of the substring (1 leq k leq 100). Input: - A string `s`. - An integer `k`. Output: - A single string, the most frequent substring of length `k`. Function Signature: ```python def mostFrequentSubstring(s: str, k: int) -> str: pass ``` Examples: Input: ```python s = \\"abcabcabc\\" k = 3 ``` Output: ```python \\"abc\\" ``` Input: ```python s = \\"ababcbabab\\" k = 2 ``` Output: ```python \\"ab\\" ``` Explanation: In the first example, the substring \\"abc\\" appears three times. In the second example, the substrings \\"ab\\" and \\"ba\\" appear four times each. \\"ab\\" is lexicographically smaller than \\"ba\\".","solution":"def mostFrequentSubstring(s: str, k: int) -> str: Returns the most frequent substring of length k in s. In case of a tie, returns the lexicographically smallest substring. from collections import defaultdict # Dictionary to store frequency of each substring freq = defaultdict(int) # Iterate over all possible substrings of length k and count their frequency for i in range(len(s) - k + 1): substring = s[i:i + k] freq[substring] += 1 # Find the most frequent substring max_freq = max(freq.values()) candidates = [substring for substring, count in freq.items() if count == max_freq] # Return the lexicographically smallest substring among the candidates return min(candidates)"},{"question":"Alice and Bob love collecting stamps. They each have a collection of unique stamps with distinct values. They want to compare their collections to find out the number of distinct stamps they jointly own (i.e., stamps that appear in both collections), and also the number of unique stamps each one owns that the other doesn’t. Given two arrays S_A and S_B where S_A contains the values of stamps in Alice\'s collection and S_B contains the values of stamps in Bob\'s collection, determine: 1. The count of stamps that appear in both collections. 2. The count of stamps unique to Alice\'s collection. 3. The count of stamps unique to Bob\'s collection. Format the function as follows: Function Name: `compareStamps` Parameters: - `S_A`: List[int] (Values of stamps in Alice\'s collection) - `S_B`: List[int] (Values of stamps in Bob\'s collection) Returns: - A tuple (int, int, int) representing the counts of common stamps, unique stamps in Alice\'s collection, and unique stamps in Bob\'s collection respectively. Example 1: Input: S_A = [1, 2, 3, 4, 5] S_B = [4, 5, 6, 7, 8] Output: (2, 3, 3) Explanation: Common stamps: 4, 5. Alice\'s unique stamps: 1, 2, 3. Bob\'s unique stamps: 6, 7, 8. Example 2: Input: S_A = [10, 20, 30] S_B = [40, 50, 60] Output: (0, 3, 3) Explanation: Common stamps: None. Alice\'s unique stamps: 10, 20, 30. Bob\'s unique stamps: 40, 50, 60. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `compareStamps(S_A, S_B)`. Expected Time Complexity: O(N + M) where N is the length of S_A and M is the length of S_B Expected Auxiliary Space: O(N + M) Constraints: 1 <= len(S_A), len(S_B) <= 10^{5} 1 <= S_A[i], S_B[i] <= 10^{6}","solution":"def compareStamps(S_A, S_B): Compares the stamp collections of Alice and Bob to find: 1. The count of common stamps. 2. The count of stamps unique to Alice\'s collection. 3. The count of stamps unique to Bob\'s collection. :param S_A: List[int], values of stamps in Alice\'s collection :param S_B: List[int], values of stamps in Bob\'s collection :return: Tuple[int, int, int], counts of common stamps, unique stamps in Alice\'s collection, and unique stamps in Bob\'s collection. set_A = set(S_A) set_B = set(S_B) common_stamps = set_A & set_B # Intersection of A and B unique_to_alice = set_A - set_B # Stamps in A but not in B unique_to_bob = set_B - set_A # Stamps in B but not in A return (len(common_stamps), len(unique_to_alice), len(unique_to_bob))"},{"question":"Given an n x n matrix of integers, you need to find the maximum sum of elements of a sub-matrix of size k x k. A sub-matrix is defined as any contiguous block of elements within the original matrix. Example: Input: n = 4, k = 2 matrix = [ [1, 5, 3, 2], [8, 2, 4, 1], [5, 9, 6, 3], [2, 6, 7, 8] ] Output: 31 Explanation: One of the sub-matrices with the maximum sum is: [[9, 6], [6, 7]] The sum of its elements is 9 + 6 + 6 + 7 = 28. Constraints: - 1 <= n <= 1000 - 1 <= k <= n - -10^4 <= matrix[i][j] <= 10^4","solution":"def max_sum_submatrix(matrix, n, k): Returns the maximum sum of elements of a k x k sub-matrix in an n x n matrix. # Initialize the maximum sum variable max_sum = float(\'-inf\') # Compute prefix sum matrix prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(n): for j in range(n): prefix_sum[i+1][j+1] = matrix[i][j] + prefix_sum[i][j+1] + prefix_sum[i+1][j] - prefix_sum[i][j] # Iterate through possible k x k sub-matrices for i in range(k, n + 1): for j in range(k, n + 1): current_sum = prefix_sum[i][j] - prefix_sum[i-k][j] - prefix_sum[i][j-k] + prefix_sum[i-k][j-k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Create a function that takes a string and returns the longest word in that string. If there are multiple words of the same maximum length, return the first one that appears. A word is defined as a sequence of alphabetical characters, while any other characters (any punctuation, spaces, or numbers) should be ignored when identifying words. Input strings will be non-empty. Examples ``` \\"The quick brown fox.\\" --> \\"quick\\" \\"A journey of a thousand miles begins with a single step\\" --> \\"thousand\\" \\"To be, or not to be, that is the question\\" --> \\"question\\" ```","solution":"import re def longest_word(text): Returns the longest word from a given string. A word is a sequence of alphabetical characters. # Using regex to keep only alphabetical characters and spaces cleaned_text = re.sub(r\'[^a-zA-Zs]\', \'\', text) words = cleaned_text.split() longest = max(words, key=len) return longest"},{"question":"You are given a dataset containing interactions between users on a social media platform. The dataset consists of several types of interactions: liking a post, commenting on a post, and sharing a post. These interactions are logged and each log entry consists of a timestamp, the user ID, the post ID, and the type of interaction. Your task is to determine the engagement score for each post within a given time period. The engagement score is calculated as follows: - 1 point for each like - 2 points for each comment - 3 points for each share Given the logs of interactions and the start and end time of the period, write a program that calculates the engagement score for each post and outputs the post ID and its corresponding engagement score sorted by the post ID in ascending order. Input The first line contains two integers `n` (1 ≤ n ≤ 10^5), the number of interaction logs, and `m` (1 ≤ m ≤ 10^6), the number of posts. The next line contains two strings `start_time` and `end_time` representing the start and end times in the format \\"YYYY-MM-DD HH:MM:SS\\". Each of the following `n` lines contains a log entry with a timestamp `time` (\\"YYYY-MM-DD HH:MM:SS\\"), an integer `user_id` (1 ≤ user_id ≤ 10^5), an integer `post_id` (1 ≤ post_id ≤ 10^6), and a string `interaction` (\\"like\\", \\"comment\\", \\"share\\"). Output Print `m` lines. Each line should contain two integers: the post ID and its engagement score, sorted by the post ID in ascending order. If a post has no interactions within the given time period, its engagement score should be 0. Examples Input 5 3 2023-01-01 00:00:00 2023-01-02 00:00:00 2023-01-01 10:00:00 1 1 like 2023-01-01 11:00:00 2 1 share 2023-01-01 12:00:00 3 2 comment 2023-01-01 13:00:00 4 2 like 2023-01-01 14:00:00 1 1 comment Output 1 6 2 3 3 0","solution":"from datetime import datetime def calculate_engagement_scores(n, m, start_time, end_time, logs): start_time = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") engagement_scores = {i: 0 for i in range(1, m + 1)} for log in logs: time_str, user_id, post_id, interaction = log time = datetime.strptime(time_str, \\"%Y-%m-%d %H:%M:%S\\") user_id, post_id = int(user_id), int(post_id) if start_time <= time <= end_time: if interaction == \\"like\\": engagement_scores[post_id] += 1 elif interaction == \\"comment\\": engagement_scores[post_id] += 2 elif interaction == \\"share\\": engagement_scores[post_id] += 3 return sorted(engagement_scores.items(), key=lambda x: x[0]) # Example usage logs = [ (\\"2023-01-01 10:00:00\\", \\"1\\", \\"1\\", \\"like\\"), (\\"2023-01-01 11:00:00\\", \\"2\\", \\"1\\", \\"share\\"), (\\"2023-01-01 12:00:00\\", \\"3\\", \\"2\\", \\"comment\\"), (\\"2023-01-01 13:00:00\\", \\"4\\", \\"2\\", \\"like\\"), (\\"2023-01-01 14:00:00\\", \\"1\\", \\"1\\", \\"comment\\") ] print(calculate_engagement_scores(5, 3, \\"2023-01-01 00:00:00\\", \\"2023-01-02 00:00:00\\", logs))"},{"question":"A popular social media platform wants to analyze user interactions to identify **mutual followers**. In the platform\'s database, the following data is stored: - `m` users and their user ids ranging from 1 to `m`. - A list of follow relationships between users, where a follow relationship is represented as a tuple `(a, b)` indicating that user `a` follows user `b`. Two users are mutual followers if user `a` follows user `b` and user `b` follows user `a`. Write a function to find all pairs of mutual followers. # Input - The first line contains two integers `m` and `n` (2 ≤ m ≤ 1000, 1 ≤ n ≤ 10000) representing the number of users and the number of follow relationships respectively. - The next `n` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ m, a ≠ b) representing a follow relationship where user `a` follows user `b`. # Output - Output each pair of mutual followers as two integers `x` and `y` in a new line such that user `x` and user `y` are mutual followers. - Each pair should be printed only once. The order of the pairs in the output does not matter. # Example Input ``` 5 6 1 2 2 1 2 3 3 2 4 1 1 4 ``` Output ``` 1 2 2 3 1 4 ``` # Clarifications - Note that user `a` following user `b` does not necessarily imply user `b` follows user `a`. - Any pairs of mutual followers can be printed in any order. - Ensure the outputted pairs (x, y) are ordered such that x < y.","solution":"def find_mutual_followers(m, n, relationships): follow_dict = {} mutual_pairs = set() for a, b in relationships: if a not in follow_dict: follow_dict[a] = set() if b not in follow_dict: follow_dict[b] = set() follow_dict[a].add(b) for a, b in relationships: if b in follow_dict and a in follow_dict[b]: mutual_pairs.add((min(a, b), max(a, b))) return list(mutual_pairs) # Example usage m = 5 n = 6 relationships = [ (1, 2), (2, 1), (2, 3), (3, 2), (4, 1), (1, 4) ] print(find_mutual_followers(m, n, relationships))"},{"question":"Given a list of integers, determine the minimum number of operations required to make all elements of the list equal. In each operation, you can either increment or decrement an element of the list by 1. # Input Format: - The input consists of a single line containing space-separated integers representing the elements of the list. # Constraints: - The length of the list will be between 1 and 100,000. - Each element of the list will be an integer between -10^9 and 10^9. # Output Format: - Output a single integer representing the minimum number of operations required. # Example: Input: ``` 1 2 3 ``` Output: ``` 2 ``` Explanation: - To make all elements equal, you can: - Increment 1 to 2 in 1 operation. - Decrement 3 to 2 in 1 operation. - This makes a total of 2 operations.","solution":"def min_operations_to_equalize(nums): Returns the minimum number of operations to make all elements of the list equal. if not nums: return 0 # sort the list to find the median nums.sort() # finding the median median = nums[len(nums) // 2] # calculating the total operations required to make all elements equal to the median operations = sum(abs(num - median) for num in nums) return operations"},{"question":"Given a string of text, write a Python function to find the first unique character in it. Unique character is the one that appears only once. If there are multiple unique characters, return the first one encountered in the string. If there are no unique characters, return an empty string. Input Format A single line containing a string of lowercase English letters. Constraints - The length of the string will not exceed 1000 characters. - The string will contain only lowercase characters (\'a\' - \'z\'). Output Format Output a single character which is the first unique character in the string. If there are no unique characters, output an empty string. Function Signature ```python def first_unique_char(s: str) -> str: ``` Sample Input ``` swiss ``` Sample Output ``` w ``` Sample Input ``` aabbcc ``` Sample Output ``` ``` Explanation In the first sample input, the characters \'w\' and \'i\' are unique, and \'w\' is the first unique character that appears. Therefore, the output is \'w\'. In the second sample input, there are no unique characters as all characters appear more than once. Hence, the output is an empty string.","solution":"def first_unique_char(s: str) -> str: Find the first unique character in the string. Args: s (str): Input string containing lowercase English letters. Returns: str: The first unique character or an empty string if no unique character exists. # A dictionary to count the occurrences of each character char_count = {} # Loop over each character to populate the char_count dictionary for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that has a count of 1 for char in s: if char_count[char] == 1: return char # If no unique character is found, return an empty string return \\"\\""},{"question":"In a magical kingdom, there\'s a famous wizard named Merlin who has a special spell to protect the kingdom from invading monsters. The kingdom\'s border is guarded by a line of magical towers, each with a crystal that has a level of energy. For each crystal, Merlin can cast one of three spells: * `Boost Spell` – This spell increases the energy of a single crystal by a given amount. * `Transfer Spell` – This spell transfers a portion of energy from one crystal to another crystal. The amount of energy transferred can vary and must be within a specified range. * `Chain Spell` – This spell forms a chain reaction among three crystals, redistributing their energy in such a way that the sum of their energy remains the same, but the energy levels of each crystal get a little boost. The three crystals must be distinct, and any two sets of three crystals targeted by different Chain Spells are disjoint (i.e., no crystal is targeted by more than one Chain Spell). Your goal is to maximize the total energy of all crystals after casting a given number of spells. Input The first line contains two integers: the number of spells `S` (1 ≤ S ≤ 5000) and the number of crystals `C` (1 ≤ C ≤ 5000). In the next line, there are `C` integers representing the initial energy levels of each crystal. In the next `S` lines, each line starts with an integer representing the spell type (either 0, 1 or 2). If the spell type is 0, it represents a `Boost Spell`, followed by two integers `i` (1 ≤ i ≤ C) and `e` (1 ≤ e ≤ 1000), where `i` is the index of the crystal and `e` is the amount of energy to add to crystal `i`. If the spell type is 1, it represents a `Transfer Spell`, followed by three integers `i`, `j`, and `x` (1 ≤ i, j ≤ C, i ≠ j, 1 ≤ x ≤ 100), where `i` is the donor crystal, `j` is the receiver crystal, and `x` is the amount of energy to be transferred (energy must still reside within both crystals after the transfer). If the spell type is 2, it represents a `Chain Spell`, followed by three distinct integers `a`, `b`, and `c` (1 ≤ a, b, c ≤ C), which are the indices of the crystals involved in the chain reaction. Output The first line should contain the maximum total energy of all crystals after casting the spells. Example Input 5 4 10 20 30 40 0 1 5 1 3 4 10 2 1 2 3 0 4 15 1 2 4 20 Output 145 Explanation Initial energy levels are [10, 20, 30, 40]. 1. `Boost Spell` on crystal 1 adds 5, so energy levels become [15, 20, 30, 40]. 2. `Transfer Spell` transfers 10 energy from crystal 3 to crystal 4, so energy levels become [15, 20, 20, 50]. 3. `Chain Spell` on crystals 1, 2, and 3 boosts them, resulting in [20, 25, 25, 50]. 4. `Boost Spell` on crystal 4 adds 15, so energy levels become [20, 25, 25, 65]. 5. `Transfer Spell` transfers 20 energy from crystal 2 to crystal 4, so final energy levels become [20, 5, 25, 85]. Maximum total energy = 20 + 5 + 25 + 85 = 135. Note The spells were applied in such a way to maximize the total energy of the crystals.","solution":"def apply_spells(S, C, initial_energies, spells): energies = initial_energies[:] for spell in spells: if spell[0] == 0: # Boost Spell _, i, e = spell energies[i - 1] += e elif spell[0] == 1: # Transfer Spell _, i, j, x = spell if energies[i - 1] >= x: energies[i - 1] -= x energies[j - 1] += x elif spell[0] == 2: # Chain Spell _, a, b, c = spell energies[a - 1] += 5 energies[b - 1] += 5 energies[c - 1] += 5 return sum(energies) # Example Usage S = 5 C = 4 initial_energies = [10, 20, 30, 40] spells = [ (0, 1, 5), (1, 3, 4, 10), (2, 1, 2, 3), (0, 4, 15), (1, 2, 4, 20) ] # Output should be the maximum total energy after applying the spells print(apply_spells(S, C, initial_energies, spells))"},{"question":"Emilia has a collection of n unique gemstones that she wants to arrange in a specific way for her exhibition. She has invented a special ordering rule: all gemstones of a lower value should be placed before gemstones of a higher value, however, some gemstones also have uniqueness constraints regarding their positions. Each gemstone has a value and a unique position identifier. Gemstones with lower values should appear before those with higher values, but gemstones with the same value should maintain their unique relative order based on the given positions. Your task is to help Emilia arrange her gemstones according to her rules. If it is possible to arrange the gemstones, print the arrangement; otherwise, print \\"Impossible\\". Input: The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 2⋅10^5) — the number of gemstones. The next n lines describe the gemstones. Each line contains two integers v_i and p_i (1 ≤ v_i, p_i ≤ 10^9) — the value and the unique position identifier of the i-th gemstone. Output: If it is possible to arrange the gemstones according to the rules, print \\"YES\\" followed by the sorted order of the positions. Otherwise, print \\"Impossible\\". Example 1: Input: 5 2 5 1 3 2 1 1 2 3 4 Output: YES 2 3 1 5 4 Example 2: Input: 4 2 4 3 1 1 2 3 3 Output: YES 2 4 1 3 Example 3: Input: 3 4 2 3 1 4 1 Output: Impossible","solution":"def arrange_gemstones(n, gems): Arrange the gemstones according to Emilia\'s rules. Parameters: n (int): Number of gemstones gems (list of tuples): A list of (value, position) of each gemstone Returns: str: \\"Impossible\\" if the arrangement can\'t be met, or \\"YES\\" followed by a list of positions in the arranged order. # Sort the gemstones by value first, and then by position in case of tie sorted_gems = sorted(gems, key=lambda x: (x[0], x[1])) # Check for any duplicate positions positions_seen = set() for gem in sorted_gems: if gem[1] in positions_seen: return \\"Impossible\\" positions_seen.add(gem[1]) # Extract and return the sorted positions sorted_positions = [gem[1] for gem in sorted_gems] return \\"YESn\\" + \\" \\".join(map(str, sorted_positions)) # Example function call if __name__ == \\"__main__\\": n = 5 gems = [(2, 5), (1, 3), (2, 1), (1, 2), (3, 4)] print(arrange_gemstones(n, gems)) # Should output \\"YESn2 3 1 5 4\\""},{"question":"You are given a task to sort an array of strings based on the length of each string. If two strings have the same length, their relative order should remain the same as in the input array. Your task is to implement the function `sortByLength()` which takes an array of strings `arr[]` and its size `N` as input parameters and returns the sorted array. Example 1: Input: N = 4 arr[] = {\\"apple\\", \\"banana\\", \\"kiwi\\", \\"pear\\"} Output: [\\"kiwi\\", \\"pear\\", \\"apple\\", \\"banana\\"] Example 2: Input: N = 5 arr[] = {\\"abc\\", \\"de\\", \\"fghi\\", \\"jk\\", \\"lmnop\\"} Output: [\\"de\\", \\"jk\\", \\"abc\\", \\"fghi\\", \\"lmnop\\"] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `sortByLength()` which takes the array of strings `arr[]` and its size `N` as input parameters and returns the sorted array in increasing order of string lengths. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 1000 1 ≤ |arr[i]| ≤ 100","solution":"def sortByLength(arr, N): Sorts an array of strings based on the length of each string. If two strings have the same length, their relative order remains the same as in the input array. Parameters: arr (list): A list containing N strings. N (int): The number of strings in the array. Returns: list: The sorted list of strings. return sorted(arr, key=len)"},{"question":"In a distant galaxy, there is a planet called Zog, where inhabitants are keen on puzzle games involving number sequences. One such popular game on Zog is called \\"Zog\'s Number Discovery\\". Your task is to help visualize the final state of the sequence after a series of operations. Given an initial sequence of n positive integers, you are required to perform a series of operations on them. Each operation consists of selecting two indices (i, j) such that 1 ≤ i < j ≤ n and setting a_max = max(a_i, a_j), a_min = min(a_i, a_j), then replacing a_i with a_max and a_j with a_min. Your objective is to determine the sequence after k such operations. Note that the operations can be performed in any order. -----Input----- The first line consists of two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5) - the number of elements in the sequence and the number of operations respectively. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the initial sequence. -----Output----- Output a single line containing n integers - the sequence after k operations. -----Examples----- Input 5 3 4 2 1 3 5 Output 5 4 3 2 1 Input 3 2 8 6 7 Output 8 7 6 -----Note----- In the first example, after any 3 operations, the largest values move to the leftmost positions and the smallest values move to the rightmost positions, resulting in a sorted sequence from highest to lowest. In the second example, regardless of the order of operations, the sequence will be sorted from highest to lowest within the constraints of k operations.","solution":"def zog_number_discovery(n, k, sequence): Perform k operations on the sequence of n integers where in each operation we replace the maximum element at index i or j with the minimum and vice versa. In effect, after enough operations the sequence will always be sorted in descending order. Args: n : int : the number of elements in the sequence k : int : the number of operations to be performed sequence : list of int : the initial sequence of integers Returns: list of int : the sequence after k operations # After any k operations, the sequence will be sorted in descending order. return sorted(sequence, reverse=True)"},{"question":"# Task You are given a list of integers representing the heights of different buildings in a city. A building is considered to be a \\"tower\\" if it is strictly taller than both its adjacent buildings. Your task is to write a function that finds all the \\"towers\\" in the list and returns their heights. Notes: ``` - A list can have no \\"towers\\". - Each building has at most two adjacent buildings (one on each side), except the first and last buildings which have only one adjacent building. - If a building is taller than its only adjacent building, it is considered a tower. - The list of heights is not guaranteed to be unique or ordered. - Return the \\"towers\\" in the order in which they appear in the input list. ``` # Examples For `heights = [1, 2, 3, 1, 5, 6, 2, 3, 2, 1]`, the result should be `[3, 6, 3]`. For `heights = [5, 1, 5, 1, 5, 1]`, the result should be `[5, 5, 5]`. For `heights = [1, 2, 3, 4, 5]`, the result should be `[5]`. # Input/Output - `[input]` integer array `heights` - An array of various building heights. - `[output]` an integer array - An array containing the heights of the \\"towers\\".","solution":"def find_towers(heights): Returns a list of towers in the given list of building heights. A \\"tower\\" is a building taller than its adjacent buildings. towers = [] n = len(heights) for i in range(n): if i == 0: # First building if n == 1 or heights[i] > heights[i + 1]: towers.append(heights[i]) elif i == n - 1: # Last building if heights[i] > heights[i - 1]: towers.append(heights[i]) else: # Middle buildings if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: towers.append(heights[i]) return towers"},{"question":"You are given a string consisting of lowercase letters and an integer k. You need to modify the string such that no letter appears more than k times consecutively. You can perform the following operation any number of times: - Choose any character in the string and replace it with any other lowercase letter. Determine the minimal number of operations required to achieve the desired condition. Input The first line contains a single integer k (1 ≤ k ≤ 26). The second line contains a string s of length n (1 ≤ n ≤ 10^5) consisting of lowercase letters. Output Print an integer which is the minimal number of operations required to ensure no letter appears more than k times consecutively. Examples Input 2 aaabbbcc Output 2 Input 3 aabbaabbaa Output 0 Input 1 abcd Output 0 Note In the first example, the minimal number of operations required is 2, we can transform the string \\"aaabbbcc\\" to \\"aababccb\\" by changing the second \'a\' and the second \'b\'. In the second example, the string \\"aabbaabbaa\\" already meets the condition that no letter appears more than 3 times consecutively, so no operations are required. In the third example, all characters already appear consecutively no more than once, so no operations are required.","solution":"def minimal_operations(k, s): Returns the minimal number of operations to ensure no letter appears more than k times consecutively in the string s. n = len(s) count = 0 i = 0 while i < n: j = i # Count consecutive characters while j < n and s[j] == s[i]: j += 1 # Calculate the number of operations needed for the current block if j - i > k: count += (j - i - 1) // k i = j return count"},{"question":"Design a data structure that supports the following operations for an array of integers: 1. Update the value at a specific index in the array. 2. Query the sum of values in a specific range [L, R] of the array. You are required to implement the `DynamicArray` class with the following methods: - `__init__(self, arr: List[int]) -> None`: Initializes the data structure with the given array of integers. - `update(self, index: int, value: int) -> None`: Updates the element at position `index` in the array to `value`. - `sum_range(self, left: int, right: int) -> int`: Returns the sum of the elements within the range [left, right] (inclusive). Constraints: - The array length will be between 1 and 10^5. - The `update` and `sum_range` methods will be called at most 10^4 times. - 0 ≤ index, left, right < array length. - -10^4 ≤ array elements, value ≤ 10^4. Example: Input: ```python arr = [1, 3, 5] da = DynamicArray(arr) result_1 = da.sum_range(0, 2) da.update(1, 2) result_2 = da.sum_range(0, 2) ``` Output: ```python result_1: 9 result_2: 8 ``` Explanation: 1. The initial sum of elements from index 0 to 2 is 1 + 3 + 5 = 9. 2. After updating the element at index 1 to 2, the array becomes [1, 2, 5]. 3. The new sum of elements from index 0 to 2 is 1 + 2 + 5 = 8.","solution":"from typing import List class DynamicArray: def __init__(self, arr: List[int]) -> None: Initializes the data structure with the given array of integers. self.arr = arr[:] self.prefix_sum = self._compute_prefix_sum() def _compute_prefix_sum(self) -> List[int]: Computes the prefix sum array for the current array. prefix_sum = [0] * (len(self.arr) + 1) for i in range(1, len(prefix_sum)): prefix_sum[i] = prefix_sum[i-1] + self.arr[i-1] return prefix_sum def update(self, index: int, value: int) -> None: Updates the element at position `index` in the array to `value`. # Update the array diff = value - self.arr[index] self.arr[index] = value # Update the prefix sum array from index+1 onwards for i in range(index + 1, len(self.prefix_sum)): self.prefix_sum[i] += diff def sum_range(self, left: int, right: int) -> int: Returns the sum of the elements within the range [left, right] (inclusive). return self.prefix_sum[right + 1] - self.prefix_sum[left]"},{"question":"Daisy is fascinated by palindrome numbers and wanted to create a special kind of palindrome called \\"Flexible Palindrome.\\" A Flexible Palindrome is a number that remains a palindrome even if digits are allowed to be swapped any number of times. Given an integer, Daisy wants to check if it can be rearranged to form a palindrome. Can you help her determine if the given integer can be rearranged into a palindrome? Input format: The input consists of a single integer N, where 1 <= N <= 10^18. Output format: Output \\"YES\\" if the integer can be rearranged to form a palindrome, otherwise output \\"NO\\". Constraints: 1 <= N <= 10^18 Sample Input: 12321 Sample Output: YES Sample Input: 123 Sample Output: NO","solution":"def can_form_flexible_palindrome(N): Determines if an integer can be rearranged to form a palindrome. Parameters: N (int): The integer to check Returns: str: \\"YES\\" if the integer can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter digits_str = str(N) digit_counts = Counter(digits_str) odd_count = sum(1 for count in digit_counts.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a list of integers representing lengths of ropes. You need to tie the ropes together so that the cost of tying each pair of ropes together in each step is minimized. The cost of tying two ropes of lengths `A` and `B` is `A + B`. Your task is to write a function that calculates the minimum cost to tie all ropes into a single rope. Note: - The number of ropes will not exceed 100. - The length of each rope will not exceed 1,000. Example 1: Input: [8, 4, 6, 12] Output: 58 Explanation: - First, tie ropes of lengths 4 and 6 for a cost of 10. New rope lengths are [8, 10, 12]. - Then, tie ropes of lengths 8 and 10 for a cost of 18. New rope lengths are [18, 12]. - Finally, tie ropes of lengths 18 and 12 for a cost of 30. Total cost is 10 + 18 + 30 = 58. Example 2: Input: [1, 2, 5, 10, 35, 89] Output: 224 Explanation: In each step, tie the two smallest ropes together to reduce the cost: - Tie 1 and 2 for a cost of 3. New lengths are [3, 5, 10, 35, 89]. - Tie 3 and 5 for a cost of 8. New lengths are [8, 10, 35, 89]. - Tie 8 and 10 for a cost of 18. New lengths are [18, 35, 89]. - Tie 18 and 35 for a cost of 53. New lengths are [53, 89]. - Tie 53 and 89 for a cost of 142. Total cost is 3 + 8 + 18 + 53 + 142 = 224.","solution":"import heapq def min_cost_to_tie_ropes(ropes): Returns the minimum cost to tie all ropes into a single rope. if len(ropes) <= 1: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"Jason is building a network of computers for his office. Each computer can connect to one or more computers directly, forming a network. However, not all computers need to be directly connected; they only need to be able to communicate either directly or indirectly through other computers. Each computer has a specific connection range, and Jason needs to ensure that all computers are part of a single connected network. He wants to minimize the number of direct connections needed to achieve this. Jason has a list of distances between each pair of computers. Two computers can be directly connected if the distance between them is within their connection range. Given: - n, the number of computers. - r, the connection range for each computer. - A list of m distances, where each entry contains three integers: a, b, and d, representing that the distance between computer a and computer b is d. Write a program to determine the minimum number of direct connections required to ensure all computers are part of a connected network. Input: - The first input line contains two integers n and r (1 ≤ n ≤ 1000, 0 ≤ r ≤ 1,000,000), where n is the number of computers, and r is the connection range. - The following lines contain m (1 ≤ m ≤ 100,000) lines, each containing three integers: a, b, and d (1 ≤ a, b ≤ n, 0 ≤ d ≤ 1,000,000), where a and b are the indices of the computers, and d is the distance between them. Output: - Print a single integer representing the minimum number of connections required to ensure all computers are connected. If it\'s impossible to connect all computers, print -1. Examples: Input: 5 10 7 1 2 5 1 3 12 2 3 7 2 4 3 3 4 6 3 5 15 4 5 4 Output: 4 Input: 4 14 3 1 2 13 2 3 8 3 4 20 Output: -1 Input: 3 5 3 1 2 4 2 3 3 1 3 2 Output: 2","solution":"def minimum_connections(n, r, distances): from heapq import heappop, heappush import sys if n == 1: return 0 # Create adjacency list adj = [[] for _ in range(n + 1)] for a, b, d in distances: if d <= r: adj[a].append((d, b)) adj[b].append((d, a)) # Prim\'s Algorithm to find MST visited = [False] * (n + 1) min_heap = [(0, 1)] # Start from node 1 total_cost = 0 edges_used = 0 while min_heap: cost, u = heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost edges_used += 1 for neighbor_cost, neighbor in adj[u]: if not visited[neighbor]: heappush(min_heap, (neighbor_cost, neighbor)) return edges_used - 1 if all(visited[1:]) else -1 # Example usage: # n, r = 5, 10 # distances = [ # (1, 2, 5), # (1, 3, 12), # (2, 3, 7), # (2, 4, 3), # (3, 4, 6), # (3, 5, 15), # (4, 5, 4) # ] # print(minimum_connections(n, r, distances)) # Output: 4"},{"question":"Vasya burned a batch of cookies and wants to figure out which cookies got burnt. Given a grid of size n x m where each cell is either \'.\' representing a good cookie or \'#\' representing a burnt cookie, you need to determine if there exists exactly one rectangle (with at least 2 rows and 2 columns) of burnt cookies that can be found on the grid, with all cells inside the rectangle also being burnt cookies, and the rest of the cells being good cookies. Input The first input line contains two integers n and m (2 ≤ n, m ≤ 100), the number of rows and columns, respectively. The next n lines each containing m symbols \'.\' or \'#\' representing the state of each cookie. Output Print \\"YES\\" if there exists exactly one rectangle of burnt cookies and print the coordinates of the top-left corner and the bottom-right corner of the rectangle. Otherwise, print \\"NO\\". Input 4 5 ..... ..#. ..#. ..... Output YES 2 3 3 5 Input 4 5 ..... .... ..#. ..... Output NO Notes In the first example, there is exactly one rectangle of burnt cookies from (2, 3) to (3, 5). In the second example, the burnt cookies do not form a perfect rectangle.","solution":"def find_burnt_rectangle(n, m, grid): x_min, x_max = n, -1 y_min, y_max = m, -1 for r in range(n): for c in range(m): if grid[r][c] == \'#\': x_min = min(x_min, r) x_max = max(x_max, r) y_min = min(y_min, c) y_max = max(y_max, c) if x_max - x_min < 1 or y_max - y_min < 1: return (\\"NO\\",) for r in range(x_min, x_max + 1): for c in range(y_min, y_max + 1): if grid[r][c] != \'#\': return (\\"NO\\",) return (\\"YES\\", x_min + 1, y_min + 1, x_max + 1, y_max + 1)"},{"question":"Welcome to the annual \\"Great Pumpkin Carving Contest\\" in Pumpkinville! Every October, the town organizes a grand event where participants can carve intricate designs on pumpkins, and the carvings are judged based on a scoring system. Each participant gets a unique, randomly assigned pumpkin of a certain weight. This year, to maximize fairness and excitement, the committee wants to ensure that participants with pumpkins of similar weights are grouped together and judged against each other. The problem at hand is to form groups of participants such that each group has the smallest possible range of pumpkin weights (i.e., the difference between the heaviest and lightest pumpkin in the group is minimized). You have to write a program that, given the list of pumpkin weights, determines the optimal grouping and computes the smallest possible range of weights within any group. -----Input----- The input consists of two lines. The first line contains an integer n (1 leq n leq 1000) representing the number of participants. The second line contains n space-separated integers w_1, w_2, ..., w_n (1 leq w_i leq 10^4) representing the weight of each pumpkin. -----Output----- Output a single integer, the smallest possible range of pumpkin weights within any group, such that each participant is in exactly one group. -----Examples----- Sample Input 1: 5 7 6 2 10 3 Sample Output 1: 1 Sample Input 2: 8 15 12 13 11 16 19 20 14 Sample Output 2: 2 Explanation: In Sample Input 1, one possible optimal grouping with range minimized could be [2, 3], [6, 7], [10] with the smallest range of 1 between the weights 2 and 3, and 6 and 7. In Sample Input 2, one possible optimal grouping with range minimized could be [11, 12, 13, 14], [15, 16], and [19, 20] with the smallest range of 2 between weights 11 and 12, 13 and 14, and 19 and 20.","solution":"def smallest_pumpkin_weight_range(n, weights): Finds the smallest possible range of pumpkin weights within any group. Parameters: n (int): The number of participants. weights (list): List of integers representing the weights of the pumpkins. Returns: int: The smallest range (difference between maximum and minimum weight) within any group. if n == 1: return 0 weights.sort() min_range = float(\'inf\') for i in range(1, n): current_range = weights[i] - weights[i - 1] if current_range < min_range: min_range = current_range return min_range"},{"question":"An online store is organizing a promotional event where participants can collect stars by purchasing items. To attract more customers, the store has introduced a bonus star system. Here is how the bonus star system works: - Participants can earn stars for each item they purchase. - Additionally, if a participant purchases two or more consecutive items with the same number of stars, they receive a bonus which is equivalent to the product of those stars. Let\'s define the problem more clearly. The store has in total N items aligned from left to right. The boldsymbol{i}-th item gives s_i stars to the participant. A sequence of consecutive items from index i to j (i leq j) is eligible for a bonus if and only if s_i = s_{i+1} = ldots = s_j. For a sequence (i, j), the bonus is calculated as (j-i+1) times s_i (since all stars are the same). You need to calculate the total bonus stars participants would receive if they purchased all items in the array. Input Format The first line contains N, the number of items. The next line contains N space-separated integers representing the stars each item gives. Output Format Print an integer that denotes the total bonus stars participants would receive. Constraints 1 ≤ N ≤ 3 cdot 10^5 1 ≤ s_i ≤ 10^6 Sample Input #00 6 3 3 3 1 1 2 Sample Output #00 8 Sample Input #01 5 1 1 1 1 1 Sample Output #01 15 Explanation - In the first testcase, the bonus is calculated for the sequence of first three 3s which is 3 times 3 = 9, and for the sequence of two 1s which is 2 times 1 = 2. Total bonus is 9 + 2 = 11. - In the second testcase, since all stars are the same, the bonus is calculated for the entire sequence which is 5 times 1 = 5. Total bonus is 5.","solution":"def calculate_bonus_stars(N, stars): total_bonus = 0 i = 0 while i < N: j = i while j < N and stars[j] == stars[i]: j += 1 length = j - i if length > 1: total_bonus += length * stars[i] i = j return total_bonus # Sample Input N = 6 stars = [3, 3, 3, 1, 1, 2] print(calculate_bonus_stars(N, stars)) # Output: 11"},{"question":"Takahashi is interested in a unique seating arrangement system in a theatre. There are n rows of seats, and each row contains exactly m seats. Takahashi wants to pick seats in a particular manner for an important event. Here are the rules for choosing the seats: 1. Takahashi starts by picking the 1st row entirely, then he must skip the next row, and then pick the row after that, and so on. 2. When picking a row, if the row index is even, he picks only the even-indexed seats in that row (0-based indexing). If the row index is odd, he picks the odd-indexed seats. Implement a function to determine which seats Takahashi will choose based on the given rules. # Constraints * 1 ≤ n, m ≤ 100 # Input Format * An integer n, representing the number of rows. * An integer m, representing the number of seats per row. # Output Format A list of tuples where each tuple contains the row index and the list of seat indices picked in that row. # Example **Input:** 4 4 **Output:** [(0, [0, 1, 2, 3]), (2, [0, 2])] **Explanation:** * Takahashi starts with row 0 and picks all seats: [0, 1, 2, 3] * Skips row 1. * Then for row 2, since it\'s an even index, he picks seats at even indices: [0, 2] * Skips row 3.","solution":"def seat_selection(n, m): result = [] for row in range(0, n, 2): seats = [] if row % 2 == 0: seats = [i for i in range(m)] if row == 0 else [i for i in range(m) if i % 2 == 0] else: seats = [i for i in range(m) if i % 2 != 0] result.append((row, seats)) return result"},{"question":"Polycarp received a job of transforming a given string into a palindrome by rearranging its characters. A palindrome is a sequence of characters which reads the same backwards as forwards. Polycarp can perform the following operation as many times as needed: Select any two characters of the string and swap them. Your task is to help Polycarp determine if it is possible to rearrange the given string into a palindrome. If it is possible, output the rearranged palindrome. If there are multiple possible answers, output any one of them. -----Input----- The first line contains a single integer t (1 leq t leq 100) – the number of test cases. The following t lines each contain a single string s (1 leq |s| leq 1000) consisting of lowercase Latin letters. -----Output----- For each test case, print \\"YES\\" on a single line if it is possible to rearrange the string into a palindrome, followed by the rearranged palindrome on the next line. If it is not possible to rearrange the string into a palindrome, print \\"NO\\" on a single line. -----Examples----- Input 3 aabb racecar abcd Output YES abba YES racecar NO","solution":"from collections import Counter def can_form_palindrome(s): Checks if the string can form a palindrome. count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) # A string can be rearranged to a palindrome if at most one character has an odd count return odd_count <= 1 def rearrange_to_palindrome(s): Rearranges the string into a palindrome if possible. count = Counter(s) odd_char = [char for char in count if count[char] % 2 != 0] # Palindrome rearrangement half = [] middle = [] for char, cnt in count.items(): half.extend(char * (cnt // 2)) if cnt % 2 != 0: middle.append(char) first_half = \'\'.join(half) second_half = \'\'.join(reversed(half)) palindrome = first_half + \'\'.join(middle) + second_half return palindrome def transform_to_palindrome(test_cases): results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") results.append(rearrange_to_palindrome(s)) else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes a positive integer `n` and returns a list of the first `n` terms of the Fibonacci sequence. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones. The first two terms are always `0` and `1`. ``` Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, ... ``` Your Task You need to write a function that generates the Fibonacci sequence up to the nth term. Example ``` 5 --> [0, 1, 1, 2, 3] 8 --> [0, 1, 1, 2, 3, 5, 8, 13] 10 --> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` Notes - Your solution should handle cases where `n` is less than or equal to `0`. - If `n <= 0`, return an empty list.","solution":"def fibonacci(n): Returns a list containing the first n terms of the Fibonacci sequence. If n <= 0, an empty list is returned. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Maya enjoys gardening, and she dedicates a part of her garden to growing a mix of flowers. She has N types of flower seeds, each with a different flowering time. Maya wants her garden to be in bloom for the longest possible number of consecutive days. Help Maya determine the maximum number of consecutive days she can have at least one flower in bloom. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with an integer N, representing the number of types of flower seeds. - The next N lines each contain two integers, start and end, representing the day the flower starts blooming and the day it stops blooming (both inclusive). -----Output:----- - For each test case, output a single line with the maximum number of consecutive days Maya can have at least one flower in bloom. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 200 - 1 ≤ start ≤ end ≤ 365 -----Sample Input:----- 2 3 1 5 10 15 20 25 2 50 100 30 60 -----Sample Output:----- 16 71","solution":"def max_consecutive_bloom_days(T, test_cases): This function takes in the number of test cases T and a list of test cases. Each test case is a list of tuples [(start1, end1), (start2, end2), ...]. It returns a list of integers representing the maximum number of consecutive days there is at least one type of flower in bloom for each test case. results = [] for i in range(T): intervals = test_cases[i] days = [0] * 366 # Mark days for each blooming period for start, end in intervals: for day in range(start, end + 1): days[day] = 1 # Find the maximum consecutive 1\'s max_consecutive = 0 current_consecutive = 0 for day in days: if day == 1: current_consecutive += 1 max_consecutive = max(max_consecutive, current_consecutive) else: current_consecutive = 0 results.append(max_consecutive) return results"},{"question":"# Task In Python, a string is essentially a sequence of characters. Manipulating these sequences can involve a variety of different operations, one of which is finding the longest substring within a given string that does not contain any repeating characters. Given a string `s`, you are tasked to write a function that finds the length of the longest substring without repeating characters. # Examples ```python longest_unique_substring(\\"abcabcbb\\") # Returns 3: The answer is \\"abc\\", with the length of 3. longest_unique_substring(\\"bbbbb\\") # Returns 1: The answer is \\"b\\", with the length of 1. longest_unique_substring(\\"pwwkew\\") # Returns 3: The answer is \\"wke\\", with the length of 3. longest_unique_substring(\\"\\") # Returns 0: The answer is \\"\\", with the length of 0. longest_unique_substring(\\"abcdef\\") # Returns 6: The answer is \\"abcdef\\", with the length of 6. ``` # Remarks You may assume that `s` consists of English letters, digits, symbols, and spaces. The length of `s` will be between 0 and 10^4. Aim to design an efficient solution that can handle large inputs.","solution":"def longest_unique_substring(s): Finds the length of the longest substring without repeating characters. Args: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 max_len = 0 start = 0 used_chars = {} for end in range(n): if s[end] in used_chars and used_chars[s[end]] >= start: start = used_chars[s[end]] + 1 used_chars[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Problem Given a string S and an integer K , you are required to determine if it\'s possible to rearrange the string such that no two adjacent characters are the same and the re-arranged string has at least K distinct characters. If such a permutation of S is possible, print the rearranged string; otherwise, print \\"IMPOSSIBLE\\". Constraints The input satisfies the following conditions: * 1 leq | S | leq 10^5 * 1 leq K leq 26 * S contains only lowercase English alphabets (\'a\' to \'z\'). Input The input is given in the following format: S K The input consists of a single test case. * The first line contains the string S . * The second line contains the integer K . Output Print the rearranged string if possible; otherwise, print \\"IMPOSSIBLE\\". Examples Input aabbcc 3 Output abcabc Input aaaabbbb 2 Output abababab Input aabb 3 Output IMPOSSIBLE","solution":"from heapq import heappush, heappop def rearrange_string(S, K): if K > 26: return \\"IMPOSSIBLE\\" # Count frequency of each character in the string frequency = {} for char in S: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Priority Queue (Max-Heap based on the frequency) max_heap = [] for char, freq in frequency.items(): heappush(max_heap, (-freq, char)) result = [] wait_queue = [] # To keep track of previously used characters considering \'K\' distinct requirement while max_heap: freq, char = heappop(max_heap) result.append(char) wait_queue.append((char, freq + 1)) # decrement frequency because we\'ve used it once if len(wait_queue) < K: continue # Release and push character from wait_queue back to the heap to be used again release_char, release_freq = wait_queue.pop(0) if release_freq < 0: heappush(max_heap, (release_freq, release_char)) if len(result) != len(S): return \\"IMPOSSIBLE\\" return \'\'.join(result)"},{"question":"You are given an integer N. Find an arrangement of an array A of length N containing integers from 1 to N such that the sum of the absolute differences of all consecutive elements in the array is maximized, i.e. sum_{i=1}^{N-1} |A_{i} - A_{i+1}| If multiple arrangements are possible, print any one of them. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first and only line of each test case contains an integer N, the size of the array. ------ Output Format ------ For each test case, output on a new line an arrangement which satisfies the above conditions. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 10^{5} - The sum of N over all test cases won\'t exceed 2cdot 10^{5}. ----- Sample Input 1 ------ 2 4 5 ----- Sample Output 1 ------ 4 1 3 2 5 1 4 2 3 ----- Explanation 1 ------ Test case 1: One possible arrangement is 4, 1, 3, 2. The sum of absolute differences is |4-1| + |1-3| + |3-2| = 3 + 2 + 1 = 6. This is the maximum possible. Test case 2: One possible arrangement is 5, 1, 4, 2, 3. The sum of absolute differences is |5-1| + |1-4| + |4-2| + |2-3| = 4 + 3 + 2 + 1 = 10. This is the maximum possible.","solution":"def maximize_absolute_differences(N): arrangement = [] for i in range(N): if i % 2 == 0: arrangement.append(N - i // 2) else: arrangement.append(1 + i // 2) return arrangement def solve(test_cases): results = [] for N in test_cases: results.append(maximize_absolute_differences(N)) return results # Example Usage: # T = 2 # test_cases = [4, 5] # print(solve(test_cases)) # Output: [[4, 1, 3, 2], [5, 1, 4, 2, 3]]"},{"question":"Given a string S and an array of strings dict[], your task is to find the longest string in dict[] that can be formed by deleting some characters of the given string S without reordering the remaining characters. If there are more than one possible results, return the longest string with the smallest lexicographical order. If there is no such string that can be formed, return an empty string. Example 1: Input: S = \\"abpcplea\\", dict = [\\"ale\\",\\"apple\\",\\"monkey\\",\\"plea\\"] Output: \\"apple\\" Example 2: Input: S = \\"abpcplea\\", dict = [\\"a\\",\\"b\\",\\"c\\"] Output: \\"a\\" Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestWord() which takes the string S and the list of strings dict as parameters and returns the longest string from dict that can be formed by deleting some characters from S. Expected Time Complexity: O(N * |dict| * L), where N is the length of string S, |dict| is the number of words in dict, and L is the average length of words in dict. Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 1000 1 ≤ |dict| ≤ 1000 1 ≤ |dict[i]| ≤ 100","solution":"def longestWord(S, dict): def is_subsequence(x, y): # Check if x is subsequence of y it = iter(y) return all(c in it for c in x) # Sort dictionary primarily by length in descending order and secondarily by lexicographical order dict.sort(key=lambda x: (-len(x), x)) for word in dict: if is_subsequence(word, S): return word return \\"\\""},{"question":"Given an integer n representing the length of a string and another integer k representing the number of substrings, your task is to partition the string into exactly k substrings such that the largest of these substrings is as small as possible. A substring is a contiguous sequence of characters. You are to return the length of the largest substring among the k substrings and the k substrings themselves. -----Input----- - A single integer n (1 ≤ n ≤ 10^5) is the length of the string. - A single integer k (1 ≤ k ≤ n) is the number of substrings. - A string of length n consisting of lowercase English letters. -----Output----- - A single integer: the length of the largest substring among the k substrings. - k lines: each with one of the k substrings. -----Examples----- Input 8 3 abcdefgh Output 3 abc def gh Input 10 4 abcdefghij Output 3 abc def ghi j Input 7 2 abcdefg Output 4 abcd efg -----Note----- In the first example, the optimal way to partition the string into 3 substrings is \\"abc\\", \\"def\\", and \\"gh\\". The maximum length among these substrings is 3. In the second example, the optimal way to partition the string into 4 substrings is \\"abc\\", \\"def\\", \\"ghi\\", and \\"j\\". The maximum length among these substrings is 3. In the third example, the optimal way to partition the string into 2 substrings is \\"abcd\\" and \\"efg\\". The maximum length among these substrings is 4.","solution":"def partition_string(n, k, s): # Calculate minimum maximum length of substrings min_max_length = (n + k - 1) // k parts = [] for i in range(k): start_index = i * min_max_length end_index = min(start_index + min_max_length, n) parts.append(s[start_index:end_index]) # Calculate length of the largest substring among the k substrings max_length = max(len(part) for part in parts) return max_length, parts"},{"question":"Given an m x n grid representing a dungeon, with each cell containing either a positive integer representing the health points a knight can gain, a negative integer representing the damage points the knight will lose, or zero indicating no effect, determine the minimum initial health the knight needs to survive and reach the princess. The knight must start in the top-left corner and the princess is in the bottom-right corner. The knight can only move right or down at each step. If at any point the knight\'s health drops to zero or below, he dies. You need to return the minimum initial health required for the knight to save the princess. Example 1: Input: dungeon = [[-2, -3, 3], [-5, -10, 1], [10, 30, -5]] Output: 7 Explanation: The path is (0,0) → (0,1) → (0,2) → (1,2) → (2,2). The knight initially needs at least 7 health to ensure he can survive, as follows: 1. Start with 7 health and move to (-2). Health drops to 5. 2. Move to (-3). Health drops to 2. 3. Move to (3). Health increases to 5. 4. Move to (1). Health stays the same at 4. 5. Finally, move to (-5). Health drops to 7-5 = 2, which means he has just enough health to survive and rescue the princess. Example 2: Input: dungeon = [[0, 0, 0], [1, 1, -1]] Output: 1 Explanation: The knight needs at least 1 health to recover and reach the princess safely. Constraints: 1 <= m, n <= 100 -1000 <= dungeon[i][j] <= 1000","solution":"def calculate_minimum_hp(dungeon): Calculate the knight\'s minimum initial health required to save the princess. Args: dungeon (List[List[int]]): m x n grid representing the health/damage in each cell. Returns: int: Minimum initial health required for the knight to reach the princess. m, n = len(dungeon), len(dungeon[0]) dp = [[0] * n for _ in range(m)] dp[-1][-1] = max(1, 1 - dungeon[-1][-1]) for i in range(m-2, -1, -1): dp[i][-1] = max(1, dp[i+1][-1] - dungeon[i][-1]) for j in range(n-2, -1, -1): dp[-1][j] = max(1, dp[-1][j+1] - dungeon[-1][j]) for i in range(m-2, -1, -1): for j in range(n-2, -1, -1): min_hp_on_exit = min(dp[i+1][j], dp[i][j+1]) dp[i][j] = max(1, min_hp_on_exit - dungeon[i][j]) return dp[0][0]"},{"question":"In a certain kingdom, there are N cities connected by M bidirectional roads. Each road connects two different cities and has a positive length. The king wants to build some new roads in addition to the existing ones so that it is possible to travel between any pair of cities. However, instead of building all the roads from scratch, the king has an opportunity to build some roads at zero cost. The existing M roads and their lengths are given, and the king can build an unlimited number of new roads at zero cost, but with a restriction: each new road must connect a city i to city i+1 (for any i from 1 to N-1). Determine the maximum possible reduction in travel cost that the king can achieve by exploiting the zero-cost roads. Input Read the following input from standard input. * The integers N and M are written on the first line, separated by a blank, indicating the number of cities and the number of existing roads, respectively. * The following M lines contain information about the existing roads. Each line has three integers u, v, and l, separated by blanks, meaning that there is a road between city u and city v with length l. Output Output an integer representing the maximum possible reduction in travel cost using the zero-cost roads. Example Input 5 4 1 2 4 1 3 3 2 3 2 4 5 1 Output 11","solution":"def max_travel_cost_reduction(N, M, roads): Returns the maximum possible reduction in travel cost using zero-cost roads. if N == 1 or M == 0: return 0 existing_road_sum = sum(l for _, _, l in roads) return existing_road_sum # Reading input import sys input = sys.stdin.read def main(): data = input().strip().split() N = int(data[0]) M = int(data[1]) roads = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index + 1]) l = int(data[index + 2]) roads.append((u, v, l)) index += 3 print(max_travel_cost_reduction(N, M, roads)) if __name__ == \\"__main__\\": main()"},{"question":"In a peaceful village, there are N houses built in a row along a straight street. The street is strictly one-way, and therefore every house can only send signals to the houses that come after it in the row (to the right). To ensure effective communication in the village, every house has a light signal system to send signals to every other house in the village. The time taken to send a signal from house i to house j is determined by the distance between them, which is defined by the absolute difference in their positions. Your task is to determine the minimum time required for every house to receive signals from every other house in the village using the light signal system. -----Input----- The first line of input contains an integer N (2 leq N leq 10^5), representing the number of houses in the village. The second line contains the positions of the houses in a row described by N integers P_1, P_2, ldots, P_N (1 leq P_i leq 10^9), representing the positions of the houses along the street in ascending order. -----Output----- Output a single integer, the minimum time required for every house to receive signals from every other house in the village. -----Examples----- Sample Input: 4 1 3 6 7 Sample Output: 6 Explanation: House 1 sends signals to houses 2, 3, 4. The times taken are: 2 (House 1 to 2), 5 (House 1 to 3), 6 (House 1 to 4). The maximum time from house 1 to any other house is 6. House 2 sends signals to houses 3, 4. The times taken are: 3 (House 2 to 3), 4 (House 2 to 4). The maximum time from house 2 to any other house is 4. House 3 sends signals to house 4. The time taken is 1. House 4 does not need to send a signal as it\'s the last house. The maximum times from each house to send signals to all other houses are 6, 4, 1, and 0 respectively. Therefore, the minimum time required for the entire village is the maximum among these times which is 6.","solution":"def minimum_signal_time(N, positions): Returns the minimum time required for every house to receive signals from every other house in the village. max_time = 0 for i in range(N - 1): # Calculate the time it takes to send signals from house i to the last house time = positions[-1] - positions[i] max_time = max(max_time, time) return max_time"},{"question":"A software developer is working on an email filtering system. To identify spam emails, they need a utility function that finds all email addresses in a given string. An email address is defined as any sequence of characters that follows the pattern: local_part@domain. The local part consists of alphanumeric characters, and may include periods (.), underscores (_) and hyphens (-). The domain part consists of alphanumeric characters separated by periods. It always has at least one period. Write a function that extracts and returns all email addresses from the given string. Input Format: The input is a single line containing a string which may contain multiple email addresses. Output Format: Output all email addresses found in the string, each on a new line. If no email addresses are found, print \\"No emails found\\". Constraints: The input string can contain up to 10^5 characters. Example: Input: \\"Please contact us at support@company.com or sales@company.io. Alternatively, reach out to john.doe@company.com\\" Output: support@company.com sales@company.io john.doe@company.com","solution":"import re def find_emails(text): Extracts and returns all valid email addresses from the given string. If no email addresses are found, it returns \\"No emails found\\". email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' emails = re.findall(email_pattern, text) if emails: return emails else: return [\\"No emails found\\"]"},{"question":"Alice and Bob are playing a game with a string `S` that only consists of lowercase letters. The game rules are simple: - Alice starts first and picks a letter from the string. - Bob then picks another letter from the remaining string. - This process continues, alternating between Alice and Bob, until all letters are selected. - The goal for both players is to maximize the value of the sum of the letters they have picked. The value of each letter is its position in the alphabet (a=1, b=2, ..., z=26). Assuming both players play optimally, you need to determine the maximum value that Alice can obtain. Input: The first line of the input contains a single integer `T` representing the number of test cases. Each of the next `T` lines contains a string `S`. Output: For each test case, output a single integer representing the maximum value Alice can obtain. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ length of `S` ≤ 1000 Example Input: 2 abc defg Example Output: 4 10 Explanation: 1. For string `abc`, Alice can choose \'c\' (3 points), Bob will choose \'b\' (2 points), then Alice takes \'a\' (1 point). Total for Alice: 3+1 = 4. 2. For string `defg`, Alice can choose \'g\' (7 points), Bob will choose \'f\' (6 points), Alice chooses \'e\' (5 points), Bob chooses \'d\' (4 points). Total for Alice: 7+5 = 12.","solution":"def char_value(c): Return the alphabetical value of the character c. return ord(c) - ord(\'a\') + 1 def max_value_for_alice(S): Calculate the maximum value Alice can obtain. # Convert each character to its corresponding value letter_values = [char_value(c) for c in S] # Sort the values in descending order to maximize the scores letter_values.sort(reverse=True) # Alice picks every second starting from the first alice_value = sum(letter_values[i] for i in range(0, len(letter_values), 2)) return alice_value def max_values_for_test_cases(T, test_cases): results = [] for i in range(T): S = test_cases[i] results.append(max_value_for_alice(S)) return results"},{"question":"In a fantasy world, there exists a realm of magical creatures where every village is represented as a node and roads between villages as edges forming a graph. Villagers heavily rely on a magical network of roads to travel and carry out their daily activities. Due to recent disruptions, some roads have been blocked by a dragon, and the villagers need to find the shortest unblocked path to reach from one village to another. You have been asked to write a program to help the villagers. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of nodes (villages), and an integer m (0 ≤ m ≤ 10000), the number of edges (roads). Each of the following m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), where u and v are the endpoints of an edge and w is the weight (length) of the edge. All weights are non-negative integers. The next line contains an integer q (1 ≤ q ≤ 1000), the number of queries. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n), representing a query for the shortest path from village a to village b. Output For each query, output the length of the shortest path from village a to village b. If there is no such path, output -1. Example Input 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 4 5 1 3 1 5 4 1 5 2 Output 6 -1 -1 Explanation The graph consists of 5 nodes and 6 edges with the weights of the edges specified. There are 3 queries: 1. The shortest path from village 1 to village 5 goes through nodes 1 → 3 → 4 → 5 with a total length of 6. 2. There is no path from village 4 to village 1 since the roads are all directed one-way. 3. There is no path from village 5 to village 2 for similar reasons.","solution":"import heapq import sys def dijkstra(graph, start, n): dist = [sys.maxsize] * (n + 1) dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return dist def shortest_paths(n, m, edges, q, queries): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) results = [] for a, b in queries: dist = dijkstra(graph, a, n) result = dist[b] if dist[b] != sys.maxsize else -1 results.append(result) return results"},{"question":"Problem Statement A company wants to optimize the delivery of products to its stores from a central warehouse. The delivery vehicle has a weight limit it can carry. Each store requires a specific amount of products, and each product has a specific weight. Additionally, each product has a certain priority level that indicates the urgency of delivery. The rules are as follows: * The vehicle will try to deliver products with the highest priority first. * If multiple products have the same priority level, the products with lower weight should be delivered first. * The vehicle will continue to load products until it reaches its weight limit. * If adding another product would exceed the vehicle’s weight limit, that product is skipped. * The delivery process continues until no more products can be added without exceeding the weight limit. Your task is to determine the maximum number of products that can be delivered given the vehicle’s weight limit and the list of products with their weights and priority levels. # Input The input will consist of: * An integer `W` (1 ≤ W ≤ 100,000) representing the weight limit of the vehicle. * An integer `N` (1 ≤ N ≤ 1,000) representing the number of products. * N lines follow, each containing two integers `w_i` and `p_i` (1 ≤ w_i ≤ 10,000 and 1 ≤ p_i ≤ 100) representing the weight and priority level of the i-th product. # Output Print a single integer that represents the maximum number of products that can be delivered without exceeding the weight limit of the vehicle. # Sample Input 1 ``` 50 4 10 10 20 9 30 8 40 10 ``` # Sample Output 1 ``` 2 ``` # Sample Input 2 ``` 100 6 25 5 20 5 40 3 10 7 15 7 30 4 ``` # Sample Output 2 ``` 5 ``` # Explanation In Sample Input 1: * Products: (10, 10), (20, 9), (30, 8), (40, 10) * Only two products with weights (10, 10) and (40, 10) or (10, 10) and (30, 8) can fit in the vehicle without exceeding the weight limit. In Sample Input 2: * Products: (25, 5), (20, 5), (40, 3), (10, 7), (15, 7), (30, 4) * The optimal delivery would carry (10, 7), (15, 7), (25, 5), (20, 5), and (30, 4) making a total of 5 products delivered. # Constraints * Focus on greedy algorithm and sorting techniques to solve the problem efficiently.","solution":"def max_products(W, N, products): # Sort products first by priority (descending) and then by weight (ascending) products.sort(key=lambda x: (-x[1], x[0])) total_weight = 0 count = 0 for weight, priority in products: if total_weight + weight <= W: total_weight += weight count += 1 return count"},{"question":"Problem You are given a grid with ( R ) rows and ( C ) columns filled with non-negative integers. A path in the grid starts at the top-left corner (0,0) and ends at the bottom-right corner (R-1,C-1). You can only move right or down at any point in time. Your goal is to find the maximum sum path from the top-left corner to the bottom-right corner. Output the maximum sum you can achieve by following any path from (0,0) to (R-1,C-1). # Constraints - ( 2 leq R, C leq 50 ) - ( 0 leq text{grid}[i][j] leq 100 ) (where (text{grid}[i][j]) is the value of the cell at row ( i ) and column ( j )) # Input The input is given in the following format: ``` R C text{grid[0][0]} text{grid[0][1]} ... text{grid[0][C-1]} text{grid[1][0]} text{grid[1][1]} ... text{grid[1][C-1]} ... text{grid[R-1][0]} text{grid[R-1][1]} ... text{grid[R-1][C-1]} ``` All inputs are given as integers. ( R ) and ( C ) are given on the first line. Each of the following ( R ) lines contains ( C ) integers separated by spaces, representing the grid. # Output Output one integer, the maximum sum path from top-left to bottom-right. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 29 ``` Explanation The maximum path sum for the given grid is 1 → 4 → 7 → 8 → 9 which gives us a sum of 29. Input ``` 2 2 5 4 2 9 ``` Output ``` 18 ``` Explanation The maximum path sum for the given grid is 5 → 4 → 9 which gives us a sum of 18.","solution":"def max_path_sum(grid): R = len(grid) C = len(grid[0]) # Create a 2D DP array dp = [[0] * C for _ in range(R)] # Initialize the first cell with the grid value dp[0][0] = grid[0][0] # Fill the first row for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, R): for j in range(1, C): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum path sum return dp[R-1][C-1]"},{"question":"You are given an array of integers representing the heights of buildings, from left to right, in a street. The sun sets in the west direction (left). A building can cast a shadow on another building only if it’s to the right of the first building. Determine the number of buildings that will have sunlight. A building will have sunlight if there is no taller building to the left of it. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of buildings in the street. The second line contains `n` space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^6) — the heights of the buildings from left to right. -----Output----- Print the number of buildings that will have sunlight. -----Examples----- Input 5 3 1 4 2 5 Output 3 Input 3 1 2 3 Output 3 -----Note----- In the first example, the first building with height 3 will have sunlight, the third building with height 4 will have sunlight because it’s taller than the first building, and the fifth building with height 5 will have sunlight as it is taller than all the buildings to its left. In the second example, all buildings will have sunlight as each building is taller than the previous one.","solution":"def count_buildings_with_sunlight(n, heights): Determines the number of buildings that will have sunlight. Args: n : int : the number of buildings in the street heights : list of int : the heights of the buildings from left to right Returns: int : the number of buildings that will have sunlight count = 0 max_height = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"In a certain programming language, strings can be reversed, and individual characters can be counted, but there\'s also a specific operation that often needs to be performed: **merging**. Merging multiple strings involves concatenating them together in alphabetical order. Given this unique requirement, we aim to determine the result of merging a set of strings. -----Input----- The first line contains an integer n (1 leq n leq 1000) — the number of strings to be merged. The next n lines each contain a single string s_i (1 leq |s_i| leq 100) — each string consisting of lowercase Latin letters. -----Output----- Output a single string — the result of merging all given strings concatenated in alphabetical order. -----Examples----- Input 3 dog cat frog Output catdogfrog Input 4 beta alpha delta gamma Output alphabeta deltagamma Note: In the first test, the strings \\"cat\\", \\"dog\\", and \\"frog\\" are sorted alphabetically as \\"cat\\", \\"dog\\", \\"frog\\" and concatenated to form \\"catdogfrog\\". In the second test, the strings \\"alpha\\", \\"beta\\", \\"delta\\", and \\"gamma\\" are sorted alphabetically as \\"alpha\\", \\"beta\\", \\"delta\\", and \\"gamma\\" and concatenated to form \\"alphabeta deltagamma\\".","solution":"def merge_strings(n, strings): Merges n strings by sorting them in alphabetical order and then concatenating them. :param n: Integer representing the number of strings. :param strings: List of strings to merge. :return: Single concatenated string sorted in alphabetical order. sorted_strings = sorted(strings) return \'\'.join(sorted_strings)"},{"question":"Ria loves matrices of dimensions m x m. She especially enjoys symmetric matrices where the diagonal elements and the elements on both sides of the diagonal are equal. A matrix is symmetric if it remains unchanged when transposed. Your task is to help Ria by generating one such symmetric matrix with a given size and diagonal value. -----Input----- The single line contains two integers, m and d (1 ≤ m ≤ 100, -100 ≤ d ≤ 100). -----Output----- Print a symmetric matrix of size m x m where all diagonal elements are equal to d. You can assign any integer values to the off-diagonal elements as long as the resulting matrix is symmetric. If there are multiple suitable matrices, you are allowed to print any one of them. -----Examples----- Input 3 5 Output 5 1 1 1 5 1 1 1 5 Input 4 -3 Output -3 2 2 2 2 -3 2 2 2 2 -3 2 2 2 2 -3 -----Note----- In the first sample, the 3x3 matrix is symmetric because it is equal to its transpose. Also, all diagonal elements are 5. Many other symmetric matrices would also be valid. In the second sample, the 4x4 matrix is symmetric because it is equal to its transpose. The diagonal elements are -3, as required.","solution":"def generate_symmetric_matrix(m, d): Generates an m x m symmetric matrix with diagonal elements equal to d. Args: m (int): The size of the matrix. d (int): The value of the diagonal elements. Returns: list of list of int: The symmetric matrix. matrix = [[0] * m for _ in range(m)] for i in range(m): for j in range(m): if i == j: matrix[i][j] = d else: matrix[i][j] = 1 return matrix"},{"question":"Lena enjoys gardening and decided to create a flower bed of size n × n cells. The flower bed contains m flowers, and the i-th flower is at the cell with coordinates (xi, yi). Lena wants to water the flowers using a watering can that covers an a × b rectangular area. Lena can place the watering can in such a way that its rectangle covers any a × b cells on the flower bed, and she can perform this action any number of times as long as no parts of the can go outside the flower bed. Lena\'s goal is to water all the flowers using the minimum number of such placements of the watering can. Help Lena find out the minimum number of placements required to water the entire flower bed. Input The first line contains integers n, m, a, b (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000, 1 ≤ a, b ≤ n) — the size of the flower bed, the number of flowers, and the dimensions of the watering can. The next m lines contain integers xi, yi (1 ≤ xi, yi ≤ n) — the coordinates of the flowers. Output Print the minimum number of placements of the watering can required to water all the flowers. Examples Input 5 3 2 2 1 1 3 3 4 4 Output 2 Input 6 4 3 2 2 2 4 5 6 6 2 4 Output 3 Note In the first example, Lena can place the can at (1,1) to cover flowers at (1,1) and (3,3), and then place it at (4,4) to cover the flower at (4,4). Thus, the minimum number of placements is 2. In the second example, Lena needs to place the can three times at (2,2), (2,4), and (4,5) to cover all flowers, with each placement covering different sets of flowers.","solution":"def min_placements(n, m, a, b, flowers): from collections import defaultdict # Initialize the flower locations flower_locations = defaultdict(int) for x, y in flowers: flower_locations[(x, y)] += 1 placements = 0 while flower_locations: # Find the top-left coordinate that covers most flowers max_cover = 0 best_coords = None for x, y in flower_locations.keys(): cover = 0 for dx in range(a): for dy in range(b): if (x + dx, y + dy) in flower_locations: cover += flower_locations[(x + dx, y + dy)] if cover > max_cover: max_cover = cover best_coords = (x, y) if best_coords: placements += 1 # Remove the covered flowers from the dictionary for dx in range(a): for dy in range(b): if (best_coords[0] + dx, best_coords[1] + dy) in flower_locations: del flower_locations[(best_coords[0] + dx, best_coords[1] + dy)] return placements # Sample Inputs for Verification n1, m1, a1, b1 = 5, 3, 2, 2 flowers1 = [(1, 1), (3, 3), (4, 4)] assert min_placements(n1, m1, a1, b1, flowers1) == 2 n2, m2, a2, b2 = 6, 4, 3, 2 flowers2 = [(2, 2), (4, 5), (6, 6), (2, 4)] assert min_placements(n2, m2, a2, b2, flowers2) == 3"},{"question":"You are given a string containing only parentheses - \'(\' and \')\'. Your objective is to add the minimum number of parentheses to make the string a valid parentheses sequence. A valid parentheses sequence is defined as follows: 1. An empty string is valid. 2. If \\"P\\" is a valid parentheses sequence, then \\"(P)\\" is also valid. 3. If \\"P\\" and \\"Q\\" are valid parentheses sequences, then \\"PQ\\" is also valid. For example, the strings \\"()\\", \\"(())\\", and \\"()()\\" are all valid parentheses sequences, while \\")(\\", \\"(()\\", and \\"())(\\" are not. Determine the minimum number of parentheses that need to be added to make the given string a valid parentheses sequence. -----Constraints----- - 1 leq text{length of the string} leq 10^5 -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print the minimum number of parentheses that need to be added to make the string a valid parentheses sequence. -----Sample Input----- ()))(( -----Sample Output----- 4 We need to add one \'(\' at the beginning and three \')\' at the end. So the valid sequence is \\"((()))(())\\".","solution":"def min_add_to_make_valid(s): Returns the minimum number of parentheses needed to make the given string a valid parentheses sequence. left_needed = 0 # count of \'(\' needed right_needed = 0 # count of \')\' needed for char in s: if char == \'(\': right_needed += 1 else: # char is \')\' if right_needed > 0: right_needed -= 1 else: left_needed += 1 return left_needed + right_needed"},{"question":"Petya has a sequence of n integers. He likes to rearrange the integers in such a way that the sum of absolute differences between adjacent integers is maximized. Help Petya find such an arrangement. Note that the sequence should contain each integer from the input exactly once, but can be rearranged in any order. Input The first line contains an integer n (2 ≤ n ≤ 105) — the number of integers in the sequence. The second line contains n integers, each separated by a space. Output Print the rearranged sequence of n integers such that the sum of absolute differences between adjacent integers is maximized. Examples Input 4 1 2 3 4 Output 1 4 2 3 Input 3 10 20 30 Output 10 30 20 Note In the first example, the rearranged sequence could maximize the sum of absolute differences as |1-4| + |4-2| + |2-3| = 3 + 2 + 1 = 6. In the second example, the rearranged sequence would be |10-30| + |30-20| = 20 + 10 = 30.","solution":"def maximize_absolute_differences(n, nums): Rearranges the sequence to maximize the sum of absolute differences between adjacent integers. :param n: integer, the number of integers in the sequence. :param nums: list of integers, the sequence of integers. :return: list of integers, rearranged to maximize the sum of absolute differences. nums.sort() result = [] i, j = 0, n - 1 while i < j: result.append(nums[i]) result.append(nums[j]) i += 1 j -= 1 if i == j: result.append(nums[i]) return result"},{"question":"For a given list of strings, you need to find the length of the longest common prefix among all the strings in the list. The longest common prefix is the longest substring that occurs at the beginning of each string in the list. For example, for the list [\\"flower\\", \\"flow\\", \\"flight\\"], the longest common prefix is \\"fl\\". You are provided a number of test cases to process. For each test case, you will be given a list of strings, and you would need to output the length of their longest common prefix. -----Input----- The first line contains a single integer t (1 le t le 50) – the number of test cases. The first line of each test case contains a single integer n (1 le n le 100) – the number of strings in the list for that test case. The following n lines of each test case contain a single string of the list. Each string is guaranteed to have a length between 1 and 200 characters, and consists only of lowercase English letters (\'a\' to \'z\'). -----Output----- For each test case, print a single integer – the length of the longest common prefix among all the strings in the given list for that test case. -----Examples----- Input 2 3 flower flow flight 4 dog racecar car drum Output 2 0 -----Note----- In the first example, the longest common prefix among \\"flower\\", \\"flow\\", and \\"flight\\" is \\"fl\\", which has a length of 2. In the second example, there is no common prefix among \\"dog\\", \\"racecar\\", \\"car\\", and \\"drum\\", so the length of the common prefix is 0.","solution":"def longest_common_prefix(strings): if not strings: return 0 # Sort the strings to get the smallest and largest string lexicographically adjacent sorted_strings = sorted(strings) first_str = sorted_strings[0] last_str = sorted_strings[-1] # Compare characters of the first and the last string to find the common prefix i = 0 while i < len(first_str) and i < len(last_str) and first_str[i] == last_str[i]: i += 1 return i def process_test_cases(test_cases): results = [] for strings in test_cases: results.append(longest_common_prefix(strings)) return results"},{"question":"Given a string of lowercase letters, determine if the string can be segmented into a space-separated sequence of one or more dictionary words (from a given dictionary). Your task is to write a function that returns `True` if the string can be segmented into one or more dictionary words, and `False` otherwise. You may assume the dictionary is given to you as a set of strings. For example: ```python # dictionary { \\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\" } can_segment(\\"applepenapple\\", {\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"}) == True can_segment(\\"pineapplepenapple\\", {\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"}) == True can_segment(\\"catsandog\\", {\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"}) == False ``` # Function Signature ```python def can_segment(s: str, dictionary: set) -> bool: # your implementation here ``` # Constraints: - The length of input string `s` is between 1 and 300. - The words in the dictionary contain only lowercase English letters.","solution":"def can_segment(s: str, dictionary: set) -> bool: Determine if a string can be segmented into a space-separated sequence of one or more dictionary words. Parameters: - s: the input string. - dictionary: a set of strings representing the dictionary. Returns: True if the string can be segmented, False otherwise. n = len(s) if n == 0: return True # dp[i] means s[:i] can be segmented into dictionary words dp = [False] * (n + 1) dp[0] = True # An empty string can be segmented for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in dictionary: dp[i] = True break return dp[n]"},{"question":"Given a binary tree, you need to find the largest value in each row of the tree. You are provided with the root of the binary tree. You should return an array of integers representing the largest value in each row of the tree (starting from the root). Example: Input: ``` 1 / 3 2 / 5 3 9 ``` Output: [1, 3, 9] Explanation: - In the first row, you have the root node with value 1. Hence largest value is 1. - In the second row, you have values 3 and 2. Hence largest value is 3. - In the third row, you have values 5, 3 and 9. Hence largest value is 9. Note: 1. The number of nodes in the tree will be in the range [0, 10^4]. 2. Each node\'s value will be a 32-bit integer.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def largest_values(root: Optional[TreeNode]) -> List[int]: Find the largest value in each row of the binary tree. if not root: return [] result = [] current_level = [root] while current_level: next_level = [] max_value = float(\'-inf\') for node in current_level: if node.val > max_value: max_value = node.val if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) result.append(max_value) current_level = next_level return result"},{"question":"In a bustling marketplace, merchants are continually adjusting their prices to remain competitive. You are tasked with analyzing the price changes of a specific item over a period of days to identify if, within a certain range of days, there has been any substantial increase in the price. You are given an array of integers where each integer represents the price of the item on a specific day. Given two integers, d (the range of days) and k (the minimum substantial increase), determine if there exists any subarray of length exactly d where the price at the end of the subarray is at least k units higher than the price at the start. Input The first line contains two integers n and d (1 ≤ n ≤ 100,000, 1 ≤ d ≤ n) — the number of days for which the price data is provided, and the length of the subarrays to check. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1,000,000) — the prices of the item on each day. The third line contains a single integer k (1 ≤ k ≤ 1,000,000) — the minimum substantial increase required. Output Print \\"Possible\\" if there exists at least one subarray of length d where the price at the end is at least k units higher than the price at the start. Otherwise, print \\"Impossible\\". Examples Input 7 3 5 3 6 9 4 10 8 4 Output Possible Input 5 2 4 3 2 5 6 6 Output Impossible Input 6 4 1 2 1 1 2 2 1 Output Possible Note In the first example, the subarray [3, 6, 9] meets the criteria since 9 (the last element) is 6 units higher than 3 (the first element), which exceeds the required k value of 4. In the second example, there is no subarray of length 2 where the price at the end is at least 6 units higher than at the start. In the third example, the subarray [1, 2, 1, 1] does not meet the criteria, but [2, 1, 1, 2] does since 2 (the last element) is 1 unit higher than 1 (the first element), which meets the required k value of 1.","solution":"def check_substantial_increase(n, d, prices, k): Determines if there exists any subarray of length exactly d where the price at the end is at least k units higher than the price at the start. Parameters: n (int): The number of days. d (int): The length of the subarrays to check. prices (list of int): The prices of the item on each day. k (int): The minimum substantial increase required. Returns: str: \\"Possible\\" if there exists at least one such subarray, otherwise \\"Impossible\\". for i in range(n - d + 1): if prices[i + d - 1] - prices[i] >= k: return \\"Possible\\" return \\"Impossible\\""},{"question":"Write a function that takes an integer array `arr` and returns the length of the longest contiguous subarray that contains at most two distinct numbers. The function should receive an integer array `arr` (0 ≤ arr.length ≤ 10^5, 0 ≤ arr[i] ≤ 10^9) and return an integer representing the length of the longest contiguous subarray with at most two distinct numbers. # Input - An integer `N` representing the length of the array. - An array `arr` of `N` integers. # Output - An integer which is the length of the longest subarray with at most two distinct numbers. # Constraints 1 ≤ N ≤ 10^5 # Sample Input ``` 6 1 2 1 2 3 3 ``` # Sample Output ``` 4 ``` # Explanation In the given example: - The subarray `[1 2 1 2]` contains at most two distinct numbers and has the length 4. - Checking further, the subarray `[2 1 2 3]` also contains at most two distinct numbers and has the length 4. - The subarray `[3 3]` contains at most two distinct numbers and has the length 2. Hence, the length of the longest subarray with at most two distinct numbers is 4.","solution":"def longest_subarray_with_two_distinct(arr): if len(arr) == 0: return 0 from collections import defaultdict left = 0 right = 0 max_length = 0 count = defaultdict(int) while right < len(arr): count[arr[right]] += 1 while len(count) > 2: count[arr[left]] -= 1 if count[arr[left]] == 0: del count[arr[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"```if:csharp Terminal Game - Create Enemy Class In the next step of developing the terminal game, we need to introduce an Enemy class. The enemy should have the following attributes: attribute | type | value ---|---|--- Name | string | user argument or \\"Enemy\\" Health | float | 50 Damage | float | 10 Experience | int | 0 Your task is to define this Enemy class with the mentioned attributes, including a constructor that allows setting the Name. For other attributes, use the default values specified above. ``` ```if-not:csharp Terminal Game - Create Enemy Prototype In the next step of developing the terminal game, we need to introduce an Enemy prototype. The enemy should have the following attributes: attribute | value ---|--- name | user argument or \'Enemy\' health | 50 damage | 10 experience | 0 Your task is to define this Enemy prototype with the mentioned attributes, including a constructor function that allows setting the name. For other attributes, use the default values specified above. ```","solution":"class Enemy: def __init__(self, name=\'Enemy\', health=50.0, damage=10.0, experience=0): self.name = name self.health = health self.damage = damage self.experience = experience"},{"question":"**String Repeated Subsequence** In this problem, you are given a string, and you need to determine whether it contains a repeated subsequence. A repeated subsequence is a sequence that appears at least twice in the string but not as overlapping substrings. For example, in the string \\"AABEBCDD\\", the answer is \\"yes\\" because the subsequence \\"ABD\\" appears twice. However, in the string \\"XYXY\\", we have subsequences \\"XY\\" and \\"XY\\" which is also repeated. Write a function `hasRepeatedSubsequence` that takes in a string and returns \\"Yes\\" if there is a repeated subsequence, otherwise returns \\"No\\". # Function Signature ```python def hasRepeatedSubsequence(s: str) -> str: pass ``` # Input - The input consists of a single string s, which contains only uppercase English letters. - The length of the string `1 ≤ len(s) ≤ 1000` # Output - Return \\"Yes\\" if there is a repeated subsequence, otherwise return \\"No\\". # Example **Input:** \\"AABEBCDD\\" **Output:** \\"Yes\\" **Input:** \\"XYYXY\\" **Output:** \\"Yes\\" **Input:** \\"ABCDEFG\\" **Output:** \\"No\\" # Explanation In the first example, \\"ABD\\" is a repeated subsequence. In the second example, \\"XY\\" is a repeated subsequence. In the third example, there is no repeated subsequence.","solution":"def hasRepeatedSubsequence(s: str) -> str: Determines if the input string contains a repeated subsequence. Parameters: s (str): The input string containing only uppercase English letters. Returns: str: \\"Yes\\" if there is a repeated subsequence, otherwise \\"No\\". n = len(s) if n <= 2: return \\"No\\" from collections import Counter counts = Counter(s) # If any character appears more than twice, it means there is a repeated subsequence if any(count > 2 for count in counts.values()): return \\"Yes\\" # Create a set to store already seen characters seen = set() for ch in s: if ch in seen: return \\"Yes\\" seen.add(ch) return \\"No\\""},{"question":"You are given a series of operations to perform on an initially empty list. Each operation represents either an insertion, a deletion, or a query for the number of distinct elements. Your task is to process each operation and maintain the list accordingly. # Input - The first line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of operations. - Each of the next `q` lines contains one of the following operations: * `1 x` (1 ≤ x ≤ 10^9) — Insert the integer `x` into the list. * `2 x` (1 ≤ x ≤ 10^9) — Remove one occurrence of the integer `x` from the list. If `x` does not exist in the list, do nothing. * `3` — Output the number of distinct integers currently in the list. # Output For each operation of the third type, output the number of distinct integers in the list. # Examples Input ``` 6 1 4 1 4 1 2 3 2 4 3 ``` Output ``` 2 2 ``` # Explanation - The first operation inserts the integer 4 into the list. The list becomes [4]. - The second operation inserts another 4 into the list. The list becomes [4, 4]. - The third operation inserts the integer 2 into the list. The list becomes [4, 4, 2]. - The fourth operation is a query, and there are 2 distinct integers (4, 2) in the list. - The fifth operation removes one occurrence of the integer 4 from the list. The list becomes [4, 2]. - The sixth operation is a query, and there are still 2 distinct integers (4, 2) in the list.","solution":"def process_operations(operations): from collections import defaultdict element_count = defaultdict(int) distinct_count = 0 results = [] for operation in operations: if operation[0] == 1: x = operation[1] if element_count[x] == 0: distinct_count += 1 element_count[x] += 1 elif operation[0] == 2: x = operation[1] if element_count[x] > 0: element_count[x] -= 1 if element_count[x] == 0: distinct_count -= 1 elif operation[0] == 3: results.append(distinct_count) return results"},{"question":"Write a program that simulates the operations of a shipping company that delivers packages to different locations. The company has a single delivery truck that starts at its warehouse on the origin point (0, 0) of a coordinate plane. The truck can travel in four directions: up, down, left, and right, moving one unit of distance per operation. The truck is given a sequence of delivery requests, each specifying a destination coordinate (x, y) where the package needs to be delivered. Once at the destination, the truck must return to the warehouse unless there are subsequent deliveries closer to the current location than returning to the warehouse. Each delivery request can be either: 1. A pickup request that requires the truck to pick up an item at the warehouse and deliver it to the specified destination, then return to the warehouse. 2. A drop-off request that requires the truck to go to the specified destination and drop off any item already on board before returning to the warehouse. The task is to handle these delivery requests in an optimal manner, minimizing the total distance traveled by the delivery truck. Input: - An integer N representing the number of delivery requests. - N lines follow, each containing an integer T (either 1 for pickup or 2 for drop-off) and two integers x and y denoting the coordinate of the destination. Output: - A single integer representing the total minimum distance traveled by the truck to handle all the delivery requests. Example: Input: 4 1 3 4 2 5 2 1 -2 -3 2 0 0 Output: 28 Explanation: The truck starts at (0, 0) and processes the following delivery requests optimally: 1. Pickup at (0, 0) and deliver to (3, 4), then return to (0, 0). Distance = 14. 2. Drop-off at (5, 2), then return to (0, 0). Distance = 14. 3. Pickup at (0, 0) and deliver to (-2, -3), then return to (0, 0). Distance = 10. 4. Drop-off at (0, 0), already at the destination. Distance = 0. Total minimum distance: 14 + 14 + 10 = 38","solution":"def calculate_total_distance(n, deliveries): current_pos = (0, 0) total_distance = 0 def manhattan_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) for delivery in deliveries: t, x, y = delivery destination = (x, y) if t == 1: # Pickup request # Move to destination total_distance += manhattan_distance(current_pos, destination) # Return to warehouse total_distance += manhattan_distance(destination, (0, 0)) # Update current position to warehouse current_pos = (0, 0) elif t == 2: # Drop-off request # Move to destination total_distance += manhattan_distance(current_pos, destination) # Return to warehouse total_distance += manhattan_distance(destination, (0, 0)) # Update current position to warehouse current_pos = (0, 0) return total_distance"},{"question":"You are given an array representing the number of times each keyword was searched in a search engine and a list of queries. For each query, determine the rank of the keyword (position in sorted order, where the highest frequency keyword has rank 1) in the search frequencies. If two keywords have the same frequency, they should be given the same rank. The next higher rank after a tie should skip the appropriate number of ranks as though the tied elements occupied those ranks. Write a function `keywordRank` to process these queries. Function Description Complete the `keywordRank` function below. keywordRank has the following parameters: - int frequencies[m]: an array of integers representing the frequency of each keyword. - int queries[q]: an array of integers representing the frequencies to query. Returns - int[q]: an array of integers representing the rank of each queried frequency. Input format The first line contains two integers m (the number of keywords) and q (the number of queries). The second line contains m space-separated integers f_1, f_2, ldots, f_m representing the frequency of each keyword. The third line contains q space-separated integers q_1, q_2, ldots, q_q representing the frequencies to query. Constraints 1 leq m, q leq 10^4 1 leq f_i leq 10^9 1 leq q_i leq 10^9 Example Input ``` 6 3 100 150 150 100 200 300 100 300 50 ``` Output ``` 3 1 7 ``` Explanation The keywords have the following frequencies: [100, 150, 150, 100, 200, 300]. After sorting these frequencies in descending order: [300, 200, 150, 150, 100, 100]. So, the ranks are: - 300: rank 1 - 200: rank 2 - 150: rank 3 - 150: rank 3 - 100: rank 5 - 100: rank 5 For the queries: - 100 corresponds to rank 5 - 300 corresponds to rank 1 - 50 does not appear in the list, so its rank is 7 (one more than the length of the frequency list)","solution":"def keywordRank(frequencies, queries): sorted_frequencies = sorted(frequencies, reverse=True) frequency_to_rank = {} rank = 1 for i, freq in enumerate(sorted_frequencies): if freq not in frequency_to_rank: frequency_to_rank[freq] = rank rank += 1 result = [] for query in queries: if query in frequency_to_rank: result.append(frequency_to_rank[query]) else: result.append(len(frequencies) + 1) return result"},{"question":"There are N students in a class and each student is interested in taking certain courses. Each student can enroll in only one course and each course can accommodate only one student. Given a matrix P with N rows and K columns where P(i,j) denotes i^{th} student is interested in the j^{th} course. Find the maximum number of students who can enroll in a course. Example 1: Input: N = 4, K = 4 P = {{1,0,1,0},{0,1,1,1},{1,1,1,0},{0,1,1,1}} Output: 4 Explanation: One possible way to assign courses is- First student gets the 1st course. Second student gets the 4th course. Third student gets the 2nd course. Fourth student gets the 3rd course. Example 2: Input: N = 3, K = 3 P = {{1,0,1},{0,0,1},{1,1,0}} Output: 3 Explanation: One possible way to assign courses is- First student gets the 1st course. Second student gets the 3rd course. Third student gets the 2nd course. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maximumEnrollment() which takes the matrix P as input parameter and returns the maximum number of students who can enroll in a course. Expected Time Complexity: O(K^{3}). Expected Auxiliary Space: O(K). Constraints: 1 ≤ N, K ≤ 100","solution":"def maximumEnrollment(P): Returns the maximum number of students who can enroll in a course. :param P: List[List[int]] :return: int def bpm(student, match_r, matched_l, visited): for course in range(len(P[student])): if P[student][course] == 1 and not visited[course]: visited[course] = True if matched_l[course] == -1 or bpm(matched_l[course], match_r, matched_l, visited): matched_l[course] = student match_r[student] = course return True return False N = len(P) match_r = [-1] * N matched_l = [-1] * len(P[0]) result = 0 for i in range(N): visited = [False] * len(P[0]) if bpm(i, match_r, matched_l, visited): result += 1 return result"},{"question":"Write a function that takes an array of integers and returns the product of all the negative numbers. Example: `[-1, 2, -3, 4]` => `-1 * -3 = 3` Note: If there are no negative numbers, return `1` as the product.","solution":"def product_of_negatives(arr): Returns the product of all the negative numbers in the array. If there are no negative numbers, returns 1. product = 1 has_negative = False for num in arr: if num < 0: product *= num has_negative = True return product if has_negative else 1"},{"question":"You are given an array of n integers a_1, a_2, dots, a_n. Your task is to divide the array into two non-empty contiguous subarrays in such a way that the absolute difference of their sums is minimized. Formally, you need to find an index k (1 le k < n) such that the absolute difference |S_1 - S_2| is minimized, where S_1 and S_2 are the sums of the left and right subarrays respectively: S_1 = a_1 + a_2 + dots + a_k and S_2 = a_{k+1} + a_{k+2} + dots + a_n. -----Input----- The first line contains a single integer t (1 le t le 2000) — the number of test cases. Then t test cases follow. The first line of each test case contains the single integer n (2 le n le 10^5) — the length of the array a. The second line of each test case contains n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4) — the elements of the array a. -----Output----- For each test case, print one integer — the minimum possible absolute difference between the sums of the two subarrays. -----Examples----- Input 3 5 1 3 -2 4 6 4 10 -5 3 2 6 -2 2 -3 3 -4 4 Output 0 0 0 -----Note----- In the first test case, you can split the array into [1, 3, -2, 4] and [6], with sums 6 and 6 respectively, resulting in an absolute difference of 0. In the second test case, you can split the array into [10, -5, 3] and [2], with sums 8 and 2 respectively, resulting in an absolute difference of 0. In the third test case, you can split the array into [-2, 2, -3, 3] and [-4, 4], with sums 0 and 0 respectively, resulting in an absolute difference of 0.","solution":"def min_abs_difference(t, test_cases): results = [] for case in test_cases: n, a = case total_sum = sum(a) min_diff = float(\'inf\') left_sum = 0 for i in range(n-1): left_sum += a[i] right_sum = total_sum - left_sum min_diff = min(min_diff, abs(left_sum - right_sum)) results.append(min_diff) return results # Utility function to format the input and output correctly def process_input_output(t, inputs): test_cases = [] for i in range(t): n = inputs[2*i] a = inputs[2*i + 1] test_cases.append((n, a)) return test_cases"},{"question":"The city of Gridland is designed as a perfect grid. Each intersection in this grid is represented by a pair of integers (x, y), where x is the horizontal coordinate, and y is the vertical coordinate. Due to a recent power outage, several intersections have become dark. You are given the locations of these dark intersections and need to determine the largest square area that is lit up. A square area is defined by its upper-left and bottom-right corners. -----Input----- The first line of input contains an integer ( n ) (1 leq n leq 10^5), the number of dark intersections. Each of the next ( n ) lines contains two integers ( x ) and ( y ) (-10^9 leq x, y leq 10^9), representing the coordinates of a dark intersection. -----Output----- Output a single integer representing the side length of the largest possible square area that is fully lit up. -----Examples----- Sample Input 1: 2 1 1 2 2 Sample Output 1: 1 Sample Input 2: 4 0 1 1 2 2 1 1 0 Sample Output 2: 1","solution":"def largest_lit_square_side(n, dark_intersections): if n == 0: return float(\'inf\') # There are no dark intersections, the entire grid is lit min_x, max_x = float(\'inf\'), float(\'-inf\') min_y, max_y = float(\'inf\'), float(\'-inf\') for x, y in dark_intersections: if x < min_x: min_x = x if x > max_x: max_x = x if y < min_y: min_y = y if y > max_y: max_y = y max_side_length = max(max_x - min_x, max_y - min_y) return max_side_length"},{"question":"Maxim is an avid coder and a puzzle enthusiast. Recently, he came across a classic problem that caught his attention and would like your help in solving it. The problem revolves around a grid of size n x n, filled with numbers. Maxim can traverse the grid starting from the top-left corner (1, 1) to the bottom-right corner (n, n). However, the rules stipulate that he may only move either down or right at any point in time. Your task is to help Maxim figure out the number of distinct paths he can take to accomplish the traversal of the grid from start to finish. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the size of the grid. Output: Print a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Example Input 3 Output 6 Explanation: There are exactly 6 distinct paths to move from (1,1) to (3,3) in a 3x3 grid: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right","solution":"def number_of_paths(n): Returns the number of distinct paths in an n x n grid from the top-left corner to the bottom-right corner where only movements to the right and down are allowed. # The number of ways to reach a cell (i, j) is the sum of ways to reach (i-1, j) and (i, j-1) # This is analogous to pascal\'s triangle, where each cell is the binomial coefficient C(i+j, j) grid = [[0] * n for _ in range(n)] for i in range(n): grid[i][0] = 1 for j in range(n): grid[0][j] = 1 for i in range(1, n): for j in range(1, n): grid[i][j] = grid[i-1][j] + grid[i][j-1] return grid[n-1][n-1]"},{"question":"Little Sasha loves strings and recently she got a new string of lowercase alphabets from her mother. Sasha enjoys making new strings that can become a palindrome—a word that reads the same forward and backward. Sasha wants to know the minimum number of characters she needs to change to turn her original string into a palindrome. The only characters that she can change are characters in the original string, and the new character must also be a lowercase alphabet. Help Sasha determine the minimum number of character changes needed. Input The first line contains a single integer n (1 ≤ n ≤ 105), the length of Sasha\'s original string. The second line contains the string of length n consisting of lowercase English letters. Output Print a single integer, the minimum number of character changes needed to make the string a palindrome. Examples Input 5 abcca Output 1 Input 4 abcd Output 2 Input 6 abccba Output 0","solution":"def min_changes_to_palindrome(n, s): Returns the minimum number of changes to turn the string s into a palindrome. :param n: Length of the string :param s: The original string :return: Minimum number of character changes needed changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"John is organizing a charity marathon where participants can choose to run one of three different race lengths: a 5km run, a 10km run, and a 21km run. Each race length has a different registration fee: the 5km run costs 10, the 10km run costs 20, and the 21km run costs 30. Given the number of participants in each race, calculate the total amount of registration fees collected. ------ Input Format ------ The first line contains three integers a, b, and c — the number of participants in the 5km, 10km, and 21km races, respectively. ------ Output Format ------ Print the total amount of registration fees collected. ------ Constraints ------ 0 ≤ a, b, c ≤ 1000 ----- Sample Input 1 ------ 10 5 2 ----- Sample Output 1 ------ 190 ----- Explanation 1 ------ There are 10 participants in the 5km race, 5 in the 10km race, and 2 in the 21km race. The total registration fees collected are ( 10 times 10 + 5 times 20 + 2 times 30 = 100 + 100 + 60 = 260 ). ----- Sample Input 2 ------ 0 0 0 ----- Sample Output 2 ------ 0 ----- Explanation 2 ------ There are no participants in any race, so the total registration fees collected are 0. ----- Sample Input 3 ------ 3 4 5 ----- Sample Output 3 ------ 200 ----- Explanation 3 ------ There are 3 participants in the 5km race, 4 in the 10km race, and 5 in the 21km race. The total registration fees collected are ( 3 times 10 + 4 times 20 + 5 times 30 = 30 + 80 + 150 = 260 ).","solution":"def calculate_total_registration_fees(a, b, c): Calculate the total registration fees collected from the participants. Parameters: a (int): Number of participants in the 5km race b (int): Number of participants in the 10km race c (int): Number of participants in the 21km race Returns: int: Total registration fees collected fee_5km = 10 fee_10km = 20 fee_21km = 30 total_fees = (a * fee_5km) + (b * fee_10km) + (c * fee_21km) return total_fees"},{"question":"You are given a list of strings, each representing an expression in Reverse Polish Notation (RPN). Write a program to evaluate each of these expressions and return the result for each. RPN is a mathematical notation in which every operator follows all of its operands. It does not need any parentheses as long as each operator has a fixed number of operands. For example: - The RPN expression \\"3 4 +\\" evaluates to 7. - The RPN expression \\"5 1 2 + 4 * + 3 -\\" evaluates to 14. Your task is to evaluate multiple RPN expressions and print the results. Input Format - The first line contains an integer ( N ), the number of expressions. - The next ( N ) lines contain one RPN expression each, composed of integers and the operators \'+\', \'-\', \'*\', \'/\'. Each token is separated by a space. Constraints - ( 1 leq N leq 10^3 ) - Each RPN expression contains a maximum of 100 tokens. - The operators are predefined as `+`, `-`, `*`, and `/`. - Operands and the results are within the range of a signed 32-bit integer. - The division operator `/\' should truncate towards zero. Output Format - Print ( N ) lines, each containing the result of the corresponding RPN expression. Sample Input ``` 3 3 4 + 5 1 2 + 4 * + 3 - 15 7 1 1 + - / 3 * 2 1 1 + + - ``` Sample Output ``` 7 14 5 ``` Explanation For the first expression `3 4 +`: - The result is ( 3 + 4 = 7 ). For the second expression `5 1 2 + 4 * + 3 -`: - The sequence of operations is: - ( 1 + 2 = 3 ) - ( 3 * 4 = 12 ) - ( 5 + 12 = 17 ) - ( 17 - 3 = 14 ) For the third expression `15 7 1 1 + - / 3 * 2 1 1 + + -`: - The sequence of operations is: - ( 1 + 1 = 2 ) - ( 7 - 2 = 5 ) - ( 15 / 5 = 3 ) - ( 3 * 3 = 9 ) - ( 1 + 1 = 2 ) - ( 2 + 2 = 4 ) - ( 9 - 4 = 5 )","solution":"def evaluate_rpn_expression(expression): stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Ensure truncation towards zero else: stack.append(int(token)) return stack[0] def evaluate_multiple_rpn(expressions): results = [] for expr in expressions: results.append(evaluate_rpn_expression(expr)) return results"},{"question":"You are given a list of stock prices for the next few days. Each stock price is an integer, representing the price of a particular stock for that day. You would like to maximize your profit by choosing a single day to buy one stock and a different day in the future to sell that stock. You must solve this problem with a time complexity of O(n). -----Input----- - The first line contains a single integer ( n ) ((1 leq n leq 10^5)), the number of days. - The second line contains ( n ) space-separated integers ( p_1, p_2, ldots, p_n ), where ( p_i ) ((1 leq p_i leq 10^4)) is the price of the stock on the ( i )-th day. -----Output----- Output a single integer, the maximum profit you can achieve. If no profit can be achieved, output 0. -----Examples----- Sample Input 1: 6 7 1 5 3 6 4 Sample Output 1: 5 Sample Input 2: 5 7 6 4 3 1 Sample Output 2: 0 Sample Input 3: 8 2 4 1 7 5 9 3 8 Sample Output 3: 8","solution":"def max_profit(stock_prices): Given a list of stock prices for the next few days, returns the maximum profit that can be made by buying and selling the stock once. If no profit can be made, returns 0. n = len(stock_prices) if n == 0: return 0 min_price = stock_prices[0] max_profit = 0 for price in stock_prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"The kingdom is building a new network of roads to connect their cities. Each road has a travel cost, and they want to ensure that there is a way to travel between any pair of cities with the minimum possible cost. Your task is to help the kingdom by finding the total cost to build the minimum road network that connects all cities. The kingdom has C cities connected by R potential roads. Each road has a travel cost associated with it. For safety reasons, no road should be used twice, and it should be possible to travel between any pair of cities using the roads. -----Input----- The first line of the input contains two space-separated integers, C (1 ≤ C ≤ 10^5) and R (0 ≤ R ≤ 2 * 10^5) – the number of cities and the number of potential roads. The next R lines describe the roads. Each of these R lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ C, 1 ≤ w ≤ 10^5), indicating that there is a road connecting cities u and v with a travel cost of w. It is guaranteed that there exists at least one way to connect all cities. -----Output----- Print a single integer – the minimum total cost to connect all the cities. -----Examples----- Input 4 5 1 2 3 2 3 4 3 4 5 4 1 6 1 3 2 Output 10 Input 3 3 1 2 1 1 3 2 2 3 3 Output 3 -----Note----- In the first example, the optimal solution is to use roads with costs 3, 4, and 3. That will connect all the cities with a total cost of 10. In the second example, the optimal solution is to use roads with costs 1 and 2, connecting all cities with a total cost of 3.","solution":"def find_min_cost_to_connect_cities(C, R, roads): Finds the minimum cost to connect all cities with roads. Uses Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). :param C: Number of cities :param R: Number of potential roads :param roads: List of tuples, where each tuple contains (u, v, w) indicating a road between city u and city v with cost w. :return: Minimum total cost to connect all cities # A function to find the root of a city def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] # A function to union two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 roads.sort(key=lambda x: x[2]) # Sort roads based on cost parent = list(range(C)) rank = [0] * C mst_cost = 0 edges_used = 0 for u, v, w in roads: u, v = u - 1, v - 1 # Decrement to use zero-based index root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: # If u and v are not in the same set union(parent, rank, root_u, root_v) mst_cost += w edges_used += 1 if edges_used == C - 1: # MST will have exactly C-1 edges break return mst_cost"},{"question":"You are given a string S as input. This represents a valid ISBN-10 identifier encoded using the format XXXXXXXXXX, where X can be any digit from 0 to 9, or the letter \'X\' which represents the value 10. Write a program that validates the given ISBN-10. If the ISBN-10 identifier is valid, print \\"Valid ISBN\\", otherwise print \\"Invalid ISBN\\". The formula to validate an ISBN-10 is: d1 + 2*d2 + 3*d3 + ... + 10*d10 must be a multiple of 11. -----Constraints----- - S is a string of length 10 consisting of digits and possibly one \'X\'. - The last character can be \'X\' or a digit. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"Valid ISBN\\" if the given identifier is a valid ISBN-10, and \\"Invalid ISBN\\" otherwise. -----Sample Input----- 0306406152 -----Sample Output----- Valid ISBN -----Sample Input 2----- 123456789X -----Sample Output 2----- Valid ISBN","solution":"def validate_isbn_10(S): Validates the given ISBN-10 identifier. Parameters: S (str): The ISBN-10 as a string of length 10. Returns: str: \\"Valid ISBN\\" if the ISBN-10 is valid, otherwise \\"Invalid ISBN\\". if len(S) != 10: return \\"Invalid ISBN\\" total = 0 for i in range(10): char = S[i] if char == \'X\' and i == 9: value = 10 elif char.isdigit(): value = int(char) else: return \\"Invalid ISBN\\" total += (i + 1) * value if total % 11 == 0: return \\"Valid ISBN\\" else: return \\"Invalid ISBN\\""},{"question":"A bakery produces cookies of different shapes on a rectangular cooking tray. The tray is represented as a grid of n x m cells, where each cell can be either `empty` or `contains a cookie`. The cookies are represented by consecutive cells with the same shape identifier. Cookies can be horizontal, vertical, or square but not diagonal and can\'t form any irregular shapes or overlap. Your job is to write a program that identifies and counts the number of different unique cookies on the tray. Input The input consists of multiple datasets. Each dataset is formatted as follows: n m row1 row2 : rown The first line contains two integers, n and m (1 ≤ n, m ≤ 50), which are the number of rows and columns of the tray, respectively. Each of the next n lines contains a string of m characters representing the grid. Each character is either `.` (indicating an empty cell) or an uppercase letter (indicating a part of a cookie with shape identifier A-Z). No two different cookies will share the same identifier within a dataset. The input is terminated by a single line containing \'0 0\'. Output For each dataset, output a line containing the number of unique cookies on the tray. Example Input 4 5 AAAA. AAA.. ..B.. .BBBB 3 4 C... CDA. CDA. 0 0 Output 2 3","solution":"def count_unique_cookies(n, m, tray): Counts the number of unique cookies on the tray. Args: n (int): number of rows m (int): number of columns tray (list of str): grid representing the tray Returns: int: number of unique cookies cookies = set() # Traverse the grid to collect unique cookie identifiers for i in range(n): for j in range(m): if tray[i][j] != \'.\': cookies.add(tray[i][j]) return len(cookies) def process_input(input_data): index = 0 results = [] while index < len(input_data): # Read the n and m values n, m = map(int, input_data[index].split()) index += 1 if n == 0 and m == 0: break # Read the tray rows tray = [] for _ in range(n): tray.append(input_data[index]) index += 1 # Process current tray results.append(count_unique_cookies(n, m, tray)) return results # Example of reading input and printing output input_data = 4 5 AAAA. AAA.. ..B.. .BBBB 3 4 C... CDA. CDA. 0 0.split(\'n\') results = process_input(input_data) for result in results: print(result)"},{"question":"You are given an infinite grid where each cell is initially empty. The vertical coordinate axis (y-axis) is divided into rows, while the horizontal coordinate axis (x-axis) is divided into columns. There are two types of operations you can perform on this grid: 1. Ia x y c - Insert a character c at cell (x, y) if the cell is empty. If the cell is not empty, this operation does nothing. 2. Cr x1 y1 x2 y2 - Replace all characters in the rectangle defined by the top-left corner (x1, y1) and the bottom-right corner (x2, y2) with the character \'R\'. For each operation of type \\"Cr\\", output the number of replaced cells. ----- Input Format ----- The first line of the input contains an integer Q denoting the number of queries. Next Q lines of the input contain Q queries (one per line). Each query belongs to one of the types mentioned above. ----- Output Format ----- For each query of type \\"Cr\\", print the required answer. ----- Constraints ----- 1 ≤ Q ≤ 10^5 -10^9 ≤ x, x1, x2 ≤ 10^9 -10^9 ≤ y, y1, y2 ≤ 10^9 x1 ≤ x2 y1 ≤ y2 c is a single lowercase English letter ----- Sample Input 1 ----- 5 Ia 1 1 a Ia 2 2 b Cr 0 0 3 3 Ia 1 1 c Cr 1 1 2 2 ----- Sample Output 1 ----- 2 2 ----- Explanation 1 ----- Initially, the grid is empty. After \\"Ia 1 1 a\\", cell (1, 1) contains \'a\'. After \\"Ia 2 2 b\\", cell (2, 2) contains \'b\'. After \\"Cr 0 0 3 3\\", the characters \'a\' and \'b\' are replaced with \'R\'. So, 2 cells are replaced. After \\"Ia 1 1 c\\", cell (1, 1) still has \'R\', so this operation is ignored. After \\"Cr 1 1 2 2\\", two cells (1, 1) and (2, 2) are already \'R\', so they are replaced again. Thus, 2 cells are replaced.","solution":"def process_queries(queries): Processes the given list of queries and returns the results for \\"Cr\\" type queries. Args: queries (list): A list of query strings. Returns: list: A list containing the results of \\"Cr\\" type queries. grid = {} result = [] for query in queries: parts = query.split() if parts[0] == \'Ia\': x, y, c = int(parts[1]), int(parts[2]), parts[3] if (x, y) not in grid: grid[(x, y)] = c elif parts[0] == \'Cr\': x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) count = 0 for x in range(x1, x2 + 1): for y in range(y1, y2 + 1): if (x, y) in grid: grid[(x, y)] = \'R\' count += 1 result.append(count) return result"},{"question":"In the Land of Kattis, a popular game among children involves traversing a simple, directed graph to collect as many toys as possible. The game starts at node 1, and the goal is to collect toys by following directed edges. Each node in the graph either has a toy or it doesn\'t, and players are only allowed to visit each node once. A child at node u can move to node v if there exists a directed edge from u to v. At each move, the child decides whether to proceed to the next node or stop and take the toys collected up to that point. The game ends when the child either decides to stop or there are no more nodes to visit. The task is to find the maximum number of toys a child can collect starting from the first node. Each node has a specific number of toys associated with it. -----Input----- The first line contains an integer n (2 leq n leq 1000), the number of nodes in the graph, and m (1 leq m leq 2000), the number of directed edges. The second line contains n integers t_1, t_2, ..., t_n (0 leq t_i leq 50), where t_i represents the number of toys at node i. Each of the next m lines contains two integers u and v (1 leq u, v leq n), representing a directed edge from node u to node v. -----Output----- Output the maximum number of toys that can be collected by starting from node 1. -----Examples----- Sample Input: 4 4 5 1 10 0 1 2 1 3 2 4 3 4 Sample Output: 15 Sample Input: 3 3 0 2 3 1 2 2 3 1 3 Sample Output: 5","solution":"def max_toys(n, m, toys, edges): from collections import defaultdict, deque # convert 1-based index toys to 0-based for easier management toys = [0] + toys # Create graph in form of adjacency list and in-degree list graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Topological sort using Kahn\'s algorithm queue = deque([1]) # start from node 1 dp = [0] * (n + 1) dp[1] = toys[1] topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Process nodes in topological order for u in topo_order: for v in graph[u]: if dp[v] < dp[u] + toys[v]: dp[v] = dp[u] + toys[v] # The result is the maximum toys collected return max(dp) # Example usage: # n = 4 # m = 4 # toys = [5, 1, 10, 0] # edges = [(1, 2), (1, 3), (2, 4), (3, 4)] # print(max_toys(n, m, toys, edges)) # Output is 15"},{"question":"Mary is a beginner gardener and has a rectangular garden which she wants to divide into smaller rectangular sections for different types of plants. She knows the dimensions of the garden but needs help figuring out how many different ways she can divide it into smaller rectangles such that each section still has integer dimensions. Help Mary by writing a program that calculates the number of possible ways she can divide the garden into rectangles with integer dimensions. -----Input----- The input consists of two integers w and h (1 ≤ w, h ≤ 100) — the width and height of the garden. -----Output----- Print the single integer representing the number of different ways to divide the garden into smaller rectangular sections with integer dimensions. -----Examples----- Input 2 3 Output 18 Input 1 1 Output 1 Input 4 2 Output 30","solution":"def count_rectangles(w, h): Returns the number of different ways to divide a w x h garden into smaller rectangular sections with integer dimensions. count = 0 for width in range(1, w + 1): for height in range(1, h + 1): count += (w - width + 1) * (h - height + 1) return count"},{"question":"Array Inversion Count Given a sequence of integers, compute the number of inversions in the sequence. An inversion is a pair of indices (i, j) such that i < j and a_i > a_j. Implement an efficient algorithm to handle the problem, as the number of elements can be large. Input N a_1 a_2 ... a_N Output inversion_count Constraint * 1 ≤ N ≤ 100,000 * 1 ≤ a_i ≤ 10^9 Example Input 5 5 3 2 4 1 Output 8 Explanation In the sequence [5, 3, 2, 4, 1], the inversions are (0,1), (0,2), (0,3), (0,4), (1,2), (1,4), (2,4), (3,4). So, the output is 8. Inpیut 4 1 2 3 4 Output 0 Explanation In the sequence [1, 2, 3, 4], there are no inversions, so the output is 0.","solution":"def count_inversions(arr): Function to count the number of inversions in the array. An inversion is a pair (i, j) such that i < j and arr[i] > arr[j]. :param arr: List of integers :return: Integer count of inversions def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = arr[:] return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"},{"question":"You are given a list of integers. Let\'s call a list harmonic if, for all pairs of adjacent integers, the absolute difference between the numbers in each pair is not greater than 1. For example, the list [1, 2, 1, 2] is harmonic, but the list [1, 3, 2] is not since the absolute difference between 1 and 3 is greater than 1. You are required to determine whether a given list of integers can be rearranged to form a harmonic list. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of integers in the given list. The second line contains n integers separated by spaces, representing the elements of the list. -----Output----- Print «Yes» if the list can be rearranged to form a harmonic list or «No» otherwise. Each letter can be printed in arbitrary case. -----Examples----- Input 4 1 2 1 2 Output Yes Input 3 1 3 2 Output No -----Note----- In the first sample case, the list [1, 2, 1, 2], as it is, is harmonic since the difference between any two adjacent elements does not exceed 1. In the second sample case, there is no way to rearrange the elements to have all adjacent pairs with differences not greater than 1. Thus, the output is «No».","solution":"def can_rearrange_harmonic(n, numbers): Check if the list can be rearranged to form a harmonic list, where the absolute difference between any two adjacent elements does not exceed 1. Args: n (int): Length of the list. numbers (list of int): The input list of integers. Returns: str: \\"Yes\\" if the list can be rearranged to form a harmonic list, \\"No\\" otherwise. # Check if the absolute difference between the max and min elements # is greater than 1 if max(numbers) - min(numbers) > 1: return \\"No\\" return \\"Yes\\""},{"question":"You are given two strings, `s1` and `s2`. Check if `s1` can be rearranged to form `s2`. If it is possible, return `true`; otherwise, return `false`.","solution":"def can_rearrange_to_form(s1, s2): Checks if s1 can be rearranged to form s2. Args: s1 (str): The source string. s2 (str): The target string. Returns: bool: True if s1 can be rearranged to form s2, otherwise False. # If the lengths are not the same, s1 can\'t be rearranged to form s2 if len(s1) != len(s2): return False # Sort both strings and compare them return sorted(s1) == sorted(s2)"},{"question":"Given an array of integers where every integer occurs twice except for one integer which occurs only once, find the integer that occurs only once. You need to implement a function `findSingleNumber()` that takes a list of integers as input and returns the single number. Example 1: Input: [2, 3, 5, 4, 5, 3, 4] Output: 2 Explanation: All numbers except 2 appear twice. Example 2: Input: [1, 1, 2, 2, 3, 4, 4] Output: 3 Explanation: All numbers except 3 appear twice. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findSingleNumber()` which takes a list of integers as input and returns the integer which occurs only once. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= length of the array <= 10^5 1 <= array elements <= 10^5","solution":"def findSingleNumber(nums): Returns the single number that appears only once in the array. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"Given a binary string S of length N, compute the number of substrings that start and end with the same character. Two substrings are considered different if they start or end at different positions. Example 1: Input: S = \\"abcab\\" Output: 7 Explanation: The substrings are: \\"a\\" (at indices 1 and 5), \\"b\\" (at indices 2 and 4), \\"c\\" (at index 3), \\"abca\\" (from index 1 to 4), \\"bcab\\" (from index 2 to 5). Example 2: Input: S = \\"aaaa\\" Output: 10 Explanation: The substrings are: \\"a\\" (at indices 1, 2, 3, and 4), \\"aa\\" (at indices 1 to 2, 2 to 3, and 3 to 4), \\"aaa\\" (at indices 1 to 3, and 2 to 4), and \\"aaaa\\" (from index 1 to 4). Your Task: You don\'t need to read input or print anything. Your task is to complete the function countSubstrings() which takes the binary string S as input parameter and returns the number of substrings that start and end with the same character. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1. 1 <= N <= 10^5 2. S consists only of lowercase English alphabets.","solution":"def countSubstrings(S): Returns the count of substrings that start and end with the same character in the binary string S. # Count occurrences of each character count = [0] * 26 # There are 26 lowercase English alphabets for char in S: count[ord(char) - ord(\'a\')] += 1 # Calculate the number of substrings for each character total_substrings = 0 for cnt in count: if cnt > 0: total_substrings += cnt * (cnt + 1) // 2 return total_substrings"},{"question":"Design a parking lot system where you need to manage the parking of cars in a multi-level parking lot. Here\'s the high-level overview of the parking system you need to implement: 1. There are multiple levels in the parking lot, and each level has a certain number of spots available. 2. Car need to be parked in the lowest possible level. If the lowest level is full, then the car should be parked on the next available level above it. 3. Each parking spot can fit exactly one car. 4. The system should keep track of available spots on each level, and update the count of available spots when cars are parked or removed. 5. The system should provide functionality to: - Park a car - Remove a car from a spot - Get the number of available spots on each level. Here is the outline of the `ParkingLot` class you need to implement: # `ParkingLot` Class: Constructor: ```python ParkingLot(levels: int, spots_per_level: int) ``` - `levels`: Number of levels in the parking lot. - `spots_per_level`: Number of spots available per level. Methods: 1. **park**: Parks a car in the parking lot. ```python def park(self) -> str: ``` - Returns: - `\\"Car parked on level X, spot Y\\"`: When the car is successfully parked on a specific level and spot. - `\\"Parking lot full\\"`: When there are no available spots in the entire parking lot. 2. **remove**: Removes a car from the specific level and spot. ```python def remove(self, level: int, spot: int) -> str: ``` - `level`: The level from which the car should be removed. - `spot`: The specific spot from which the car should be removed. - Returns: - `\\"Car removed from level X, spot Y\\"`: When the car is successfully removed. - `\\"No car in level X, spot Y\\"`: If there is no car in the given spot. 3. **get_available_spots**: Returns the number of available spots on each level. ```python def get_available_spots(self) -> List[int]: ``` - Returns: A list of integers representing the number of available spots at each level. # Example Usage: ```python # Initialize parking lot with 3 levels and 5 spots per level parking_lot = ParkingLot(3, 5) # Park cars print(parking_lot.park()) # Output: \\"Car parked on level 1, spot 1\\" print(parking_lot.park()) # Output: \\"Car parked on level 1, spot 2\\" # Remove a car print(parking_lot.remove(1, 1)) # Output: \\"Car removed from level 1, spot 1\\" print(parking_lot.remove(1, 1)) # Output: \\"No car in level 1, spot 1\\" # Get available spots print(parking_lot.get_available_spots()) # Output: [4, 5, 5] ``` Implement the `ParkingLot` class that can handle the provided functionality and scenarios as described. Use appropriate data structures and algorithms to ensure the system runs efficiently.","solution":"class ParkingLot: def __init__(self, levels: int, spots_per_level: int): self.levels = levels self.spots_per_level = spots_per_level # Initialize the parking lot with all spots available self.available_spots = [[True] * spots_per_level for _ in range(levels)] def park(self) -> str: for level in range(self.levels): for spot in range(self.spots_per_level): if self.available_spots[level][spot]: self.available_spots[level][spot] = False return f\\"Car parked on level {level+1}, spot {spot+1}\\" return \\"Parking lot full\\" def remove(self, level: int, spot: int) -> str: # Adjust level and spot to zero based indexing level -= 1 spot -= 1 if not self.available_spots[level][spot]: self.available_spots[level][spot] = True return f\\"Car removed from level {level+1}, spot {spot+1}\\" else: return f\\"No car in level {level+1}, spot {spot+1}\\" def get_available_spots(self) -> list: return [sum(level) for level in self.available_spots]"},{"question":"You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k. Define a pair (u,v) which consists of one element from the first array and one element from the second array. Find the k pairs (u1,v1),(u2,v2)...(uk,vk) with the smallest sums. Example: Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3 Output: [[1,2],[1,4],[1,6]] Explanation: The first 3 pairs with the smallest sums are (1,2), (1,4), (1,6). Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2 Output: [[1,1],[1,1]] Explanation: The first 2 pairs with the smallest sums are (1,1), (1,1). Input: nums1 = [1,2], nums2 = [3], k = 3 Output: [[1,3],[2,3]] Explanation: All possible pairs are returned as there are only 2 pairs.","solution":"import heapq def k_smallest_pairs(nums1, nums2, k): Find the k pairs (u,v) which consists of one element from nums1 and one element from nums2 with the smallest sums. :param nums1: List[int] :param nums2: List[int] :param k: int :return: List[List[int]] if not nums1 or not nums2 or k <= 0: return [] min_heap = [] for i in range(min(len(nums1), k)): heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0)) result = [] while min_heap and len(result) < k: current_sum, i, j = heapq.heappop(min_heap) result.append([nums1[i], nums2[j]]) if j + 1 < len(nums2): heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1)) return result"},{"question":"Write a function that takes a text and a list of taboo words and censors them. The taboo words should be replaced by the corresponding number of asterisks. For example, given the text ``` The quick brown fox jumps over the lazy dog. ``` and the list of taboo words ``` [\\"quick\\", \\"dog\\"] ``` the function should return ``` \\"The ***** brown fox jumps over the lazy ***.\\" ``` Here\'s another example: Given the text ``` She sells sea shells by the sea shore. ``` and the list of taboo words ``` [\\"sells\\", \\"shore\\"] ``` the function should return ``` \\"She ***** sea shells by the sea *****.\\" ``` Make sure your function ignores the case when checking for taboo words. If the text or the list is empty, the function should return the original text.","solution":"def censor_text(text, taboo_words): Replaces all occurrences of taboo_words in the text with the corresponding number of asterisks, case insensitive. if not text or not taboo_words: return text # Split text into list of words words = text.split() # Create a set of lower-cased taboo words for case insensitive comparison taboo_set = {word.lower() for word in taboo_words} # Replace each word in the text if it is a taboo word result = [] for word in words: clean_word = word.strip(\'.,\\"?!\') # Clean word of punctuation for taboo check if clean_word.lower() in taboo_set: censored = \'*\' * len(clean_word) result.append(word.replace(clean_word, censored)) else: result.append(word) return \' \'.join(result)"},{"question":"Alyssa is designing a system to process banking transactions and wants to analyze a sequence of operations. Each operation is either a deposit, withdrawal, or balance inquiry. Alyssa needs a function that simulates these operations and returns the final balance. Your function should take an array of operations as input. Each operation is represented by an object with a type (a string that could be \\"deposit\\", \\"withdrawal\\", or \\"balance\\") and an amount (a number). The function should ignore balance inquiries and update the balance with deposits and withdrawals. The initial balance is always 0. An operation to withdraw amounts greater than the current balance should be ignored. Your function should return the final balance after processing all operations. Example: ```python operations = [ {\\"type\\": \\"deposit\\", \\"amount\\": 100}, {\\"type\\": \\"withdrawal\\", \\"amount\\": 50}, {\\"type\\": \\"balance\\", \\"amount\\": 0}, # This should be ignored {\\"type\\": \\"withdrawal\\", \\"amount\\": 100}, # This should be ignored {\\"type\\": \\"deposit\\", \\"amount\\": 50} ] ``` After processing these operations, the function should return `100`.","solution":"def process_operations(operations): Process a sequence of banking operations and returns the final balance. Args: operations (list): A list of operations, where each operation is represented by a dictionary with a \'type\' (string) and \'amount\' (number). Returns: int/float: The final balance after processing all operations. balance = 0 for operation in operations: if operation[\'type\'] == \'deposit\': balance += operation[\'amount\'] elif operation[\'type\'] == \'withdrawal\' and operation[\'amount\'] <= balance: balance -= operation[\'amount\'] # Ignore \'balance\' and invalid operations return balance"},{"question":"Write a function to determine the maximum sum of a contiguous subarray within a given integer array A of length n. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer, n, the length of the array A. The second line of each test case contains n space-separated integers, the elements of array A. ------ Output ------ For each test case, output a single line containing the maximum sum of a contiguous subarray. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 10^{5} -10^4 ≤ A[i] ≤ 10^4 (where A[i] is the ith element of array A). ------ Subtasks ------ Subtask #1 (50 points): 1 ≤ n ≤ 50 Subtask #2 (50 points): Original constraints. ------ Sample Input 1 ------ 3 5 1 2 3 4 -10 4 -1 -2 -3 -4 6 5 4 -1 7 8 ------ Sample Output 1 ------ 10 -1 23 ------ Explanation 1 ------ For the first test case, the maximum sum of a contiguous subarray is achieved by the subarray [1, 2, 3, 4], summing to 10. For the second test case, the maximum sum of a contiguous subarray is achieved by the subarray [-1], summing to -1. For the third test case, the maximum sum of a contiguous subarray is achieved by the subarray [5, 4, -1, 7, 8], summing to 23.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the given integer array arr. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def process_input(input_data): input_lines = input_data.strip().split(\'n\') index = 0 T = int(input_lines[index]) index += 1 results = [] for _ in range(T): n = int(input_lines[index]) index += 1 arr = list(map(int, input_lines[index].split())) index += 1 result = max_subarray_sum(arr) results.append(result) return results def solve(input_data): results = process_input(input_data) return \\"n\\".join(map(str, results))"},{"question":"Given a list of integers nums, you define a \\"zigzag\\" sequence as a subset of elements from the list nums where the differences between successive elements strictly alternate between positive and negative or vice versa. For example, [1, 4, 2, 5] or [7, 5, 8, 3] are zigzag sequences, but [1, 2, 3, 4] or [4, 4, 4, 4] are not. Write a function to find the length of the longest zigzag sequence that can be obtained from the given list nums. **Function Signature:** ```python def longest_zigzag(nums: List[int]) -> int: ``` **Input:** - A list nums of integers of length n (1 <= n <= 10000). - Each integer in the list nums satisfies (1 <= nums[i] <= 10000). **Output:** - An integer representing the length of the longest zigzag sequence. **Example 1:** ```python Input: [1, 7, 4, 9, 2, 5] Output: 6 Explanation: The entire sequence [1, 7, 4, 9, 2, 5] is a zigzag sequence and has length 6. ``` **Example 2:** ```python Input: [1, 2, 3, 4, 5, 6, 7, 8, 9] Output: 2 Explanation: The longest zigzag sequences are [1, 2] or any two consecutive elements, thus the length is 2. ``` **Example 3:** ```python Input: [10, 20, 10, 20, 10] Output: 5 Explanation: The entire sequence [10, 20, 10, 20, 10] is a zigzag sequence and has length 5. ``` **Example 4:** ```python Input: [3, 3, 3, 3, 3] Output: 1 Explanation: The longest zigzag sequence is any single element, thus the length is 1. ```","solution":"from typing import List def longest_zigzag(nums: List[int]) -> int: if not nums: return 0 n = len(nums) if n == 1: return 1 up = [1] * n down = [1] * n for i in range(1, n): if nums[i] > nums[i-1]: up[i] = down[i-1] + 1 down[i] = down[i-1] elif nums[i] < nums[i-1]: down[i] = up[i-1] + 1 up[i] = up[i-1] else: down[i] = down[i-1] up[i] = up[i-1] return max(up[-1], down[-1])"},{"question":"Once upon a time, In a far away galaxy, there was a famous detective named Xaylon. One day, he was called to solve a mysterious case on planet Zog. The planet had a complex network of underground paths connecting different cities. Each path had a specific length, and Xaylon had to find the shortest path between two given cities to solve the case. Given a graph where nodes represent cities and edges represent paths with certain lengths between the cities, you need to determine the shortest path length between two specified cities using Dijkstra\'s algorithm. Input The first line contains two integers, n (the number of cities) and m (the number of paths) (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000). Then follow m lines, each containing three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), meaning there is a path of length w between cities u and v. The last line contains two integers, the start city s and the target city t (1 ≤ s, t ≤ n). Output Output the length of the shortest path from city s to city t. If there is no path between the cities, output -1. Examples Input 5 6 1 2 2 1 3 1 2 3 4 2 4 7 3 5 3 4 5 1 1 5 Output 4 Input 3 3 1 2 3 2 3 4 1 3 10 1 3 Output 7 Note In the first example, the shortest path from city 1 to city 5 is through the cities 1 -> 3 -> 5 with a total length of 4. In the second example, there are two paths from city 1 to city 3. One direct path with length 10, and another through city 2 with total length 7. The shortest path has length 7.","solution":"import heapq def dijkstra(n, m, edges, s, t): Return the length of the shortest path from city s to city t using Dijkstra\'s algorithm. # Create adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Distance array dist = [float(\'inf\')] * (n + 1) dist[s] = 0 # Priority queue for Dijkstra\'s algorithm pq = [(0, s)] while pq: d, u = heapq.heappop(pq) if d > dist[u]: continue for v, w in graph[u]: if dist[u] + w < dist[v]: dist[v] = dist[u] + w heapq.heappush(pq, (dist[v], v)) return dist[t] if dist[t] != float(\'inf\') else -1 # Example usage # n, m = 5, 6 # edges = [(1, 2, 2), (1, 3, 1), (2, 3, 4), (2, 4, 7), (3, 5, 3), (4, 5, 1)] # s, t = 1, 5 # print(dijkstra(n, m, edges, s, t)) # Output: 4"},{"question":"Jiro has a set of non-negative integers and he needs to form the largest possible integer by concatenating them. However, there is a twist: the set can contain duplicate values, but each value can only be used once in the concatenated result. Help Jiro find the largest possible integer he can form. Constraints * 1 ≤ length of the set ≤ 1,000 * Each integer in the set is between 0 and 10,000 (inclusive) Input The input is given from Standard Input in the following format: - The first line contains an integer, representing the number of elements in the set. - The second line contains the list of integers separated by a space. Output Print the largest possible concatenated integer that can be formed from the set. Examples Input 3 50 2 1 Output 5021 Input 4 10 2 30 3 Output 330210 Input 5 3 30 34 5 9 Output 9534330 Input 6 56 56 56 56 56 56 Output 565656565656","solution":"def largest_concatenated_integer(n, arr): Returns the largest possible concatenated integer from the given list of integers. :param n: int, number of elements in the list :param arr: list of integers :return: str, the largest concatenated integer from functools import cmp_to_key # Custom comparator to order the numbers to form the largest concatenated integer def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert all integers to strings str_arr = list(map(str, arr)) # Sort the array with the custom comparator str_arr.sort(key=cmp_to_key(compare)) # Concatenate all strings in the sorted array largest_number = \'\'.join(str_arr) # Remove redundant leading zeroes if exist (for edge case [\\"0\\", \\"0\\", ...]) return largest_number if largest_number[0] != \'0\' else \'0\' # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) print(largest_concatenated_integer(n, arr))"},{"question":"You are given an array of n positive integers representing the lengths of n consecutive days\' rainfall volumes. A special squared window of size k can capture the sum of any k consecutive days\' rainfall volumes. You need to find the maximum possible sum that this window can capture. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 3·105). The second line contains n integers separated by space, which are the rainfall volumes for each day (1 ≤ volume ≤ 1000). Output Print a single integer — the maximum possible sum of k consecutive days\' rainfall volumes. Examples Input 5 2 1 2 3 4 5 Output 9 Input 7 3 5 1 3 2 6 9 4 Output 19 Note In the first sample, the maximum sum of any 2 consecutive days\' rainfall volumes is achieved with the last two days: 4 + 5 = 9. In the second sample, the maximum sum of any 3 consecutive days\' rainfall volumes is achieved with the last three days: 9 + 4 + 6 = 19.","solution":"def max_k_consecutive_sum(n, k, volumes): Finds the maximum sum of k consecutive days\' rainfall volumes. Parameters: n (int): The number of days. k (int): The size of the window. volumes (list): A list of rainfall volumes for each day. Returns: int: The maximum possible sum of k consecutive days\' rainfall volumes. current_sum = sum(volumes[:k]) max_sum = current_sum for i in range(k, n): current_sum = current_sum - volumes[i - k] + volumes[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A software development company has a project that involves analyzing and transforming binary data. For this task, you are required to manipulate binary strings and determine their balance. A binary string is balanced if it contains an equal number of \'0\'s and \'1\'s. Your task is to write a function that finds the maximum number of balanced substrings that can be obtained from the given binary string. A substring is any contiguous sequence of characters in the string. You need to ensure that each balanced substring you identify is disjoint from others, meaning that they should not overlap. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100 000) — the length of the binary string. The second line contains a binary string s of length n consisting of characters \'0\' and \'1\'. -----Output----- Output a single integer that represents the maximum number of balanced substrings that can be obtained from the given binary string. -----Examples----- Input 8 01010101 Output 4 Input 4 1100 Output 1 Input 7 0011010 Output 2 -----Note----- In the first example: - The binary string \\"01010101\\" can be split into four balanced substrings: \\"01\\", \\"01\\", \\"01\\", \\"01\\". In the second example: - The binary string \\"1100\\" itself is already balanced, hence only one balanced substring can be formed. In the third example: - The binary string \\"0011010\\" can be split into two balanced substrings: \\"0011\\" and \\"10\\".","solution":"def max_balanced_substrings(n, s): Returns the maximum number of balanced substrings that can be obtained from the given binary string s of length n. balance = 0 max_balanced_count = 0 for char in s: if char == \'0\': balance += 1 elif char == \'1\': balance -= 1 if balance == 0: max_balanced_count += 1 return max_balanced_count"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},j={key:0,class:"empty-state"},F=["disabled"],P={key:0},R={key:1};function M(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,F)):h("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-dd893e04"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/7.md","filePath":"chatai/7.md"}'),D={name:"chatai/7.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
