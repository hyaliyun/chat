import{_ as h,o as n,c as i,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},E={class:"review-title"},A={class:"review-content"};function I(a,e,l,m,r,s){return n(),i("div",q,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",A,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const S=h(k,[["render",I],["__scopeId","data-v-4967099c"]]),R=JSON.parse('[{"question":"You are tasked with writing a function named `calculate_word_frequencies` that counts the frequency of each word in a given list of strings. The function should return a dictionary where the keys are words and the values are the number of occurrences of each word. The function should follow these specifications: 1. Normalize the words to lowercase to ensure that \'Word\' and \'word\' are considered the same word. 2. Ignore punctuation marks in the words. 3. Words are separated by spaces. Here is the function signature for `calculate_word_frequencies`: ```python def calculate_word_frequencies(sentences: List[str]) -> Dict[str, int]: # Your implementation here ``` # Example ```python sentences = [ \\"Hello world!\\", \\"Hello, how are you world?\\", \\"Hello everyone. Hello to the new world.\\" ] result = calculate_word_frequencies(sentences) print(result) # Output: {\'hello\': 4, \'world\': 3, \'how\': 1, \'are\': 1, \'you\': 1, \'everyone\': 1, \'to\': 1, \'the\': 1, \'new\': 1} ``` # Constraints - The input list `sentences` will have at least one string and not more than 100 strings. - Each string in `sentences` will have at least one word and not more than 100 words. - Words consist of alphabets (both uppercase and lowercase) and basic punctuation marks (.,!?). # Hints - You can use regular expressions to remove punctuation marks from words. - Use a dictionary to count the occurrences of each word.","solution":"import re from typing import List, Dict def calculate_word_frequencies(sentences: List[str]) -> Dict[str, int]: word_freq = {} for sentence in sentences: # Remove punctuation and convert to lowercase cleaned_sentence = re.sub(r\'[^ws]\', \'\', sentence.lower()) words = cleaned_sentence.split() for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"Write a function that takes a string as an argument and returns a boolean indicating whether the string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (e.g., \\"192.168.1.1\\"). The function should reject any string that contains letters, special characters, or numbers outside the valid range. The function should output: bool: True if the string is a valid IPv4 address, False otherwise. You should write self-contained code starting with: ``` def validate_ipv4_address(ip): ```","solution":"def validate_ipv4_address(ip): Validates if the provided string is a valid IPv4 address. Args: ip (str): The string to validate as an IPv4 address. Returns: bool: True if the string is a valid IPv4 address, False otherwise. parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False return True"},{"question":"You are hiring a software engineer to work on a team project. To evaluate their programming skills, you decide to create a coding task focused on understanding and manipulating Python dictionaries. Develop a function called `merge_dicts(dict1, dict2)` that combines two dictionaries into one. Your function should meet the following requirements: 1. If a key is present in both dictionaries, merge the values as follows: - If the values are integers, sum them. - If the values are lists, concatenate them. - If the values are sets, perform a union operation. 2. If a key is present in only one dictionary, its value should be included unchanged in the resulting dictionary. # Function Signature ```python def merge_dicts(dict1, dict2): pass ``` # Inputs - `dict1`: A dictionary where keys are strings and values are either integers, lists, or sets. - `dict2`: A dictionary where keys are strings and values are either integers, lists, or sets. # Output - The function should return a new dictionary that represents the merged result as described above. # Example ```python dict1 = { \\"a\\": 1, \\"b\\": [1, 2], \\"c\\": {1, 2} } dict2 = { \\"a\\": 2, \\"b\\": [3, 4], \\"c\\": {3, 4}, \\"d\\": 5 } merged = merge_dicts(dict1, dict2) print(merged) ``` # Expected Output ```python { \\"a\\": 3, \\"b\\": [1, 2, 3, 4], \\"c\\": {1, 2, 3, 4}, \\"d\\": 5 } ``` # Notes - You can assume that the values for each key will be of the same type in both dictionaries. - You can use the `set.union` method to merge sets. - The function should handle edge cases such as empty dictionaries appropriately.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries according to the specified rules. Parameters: dict1 (dict): First dictionary with keys as strings and values as integers, lists, or sets. dict2 (dict): Second dictionary with keys as strings and values as integers, lists, or sets. Returns: merged_dict (dict): A new dictionary that represents the merged result. merged_dict = {} all_keys = set(dict1.keys()).union(set(dict2.keys())) for key in all_keys: if key in dict1 and key in dict2: if isinstance(dict1[key], int) and isinstance(dict2[key], int): merged_dict[key] = dict1[key] + dict2[key] elif isinstance(dict1[key], list) and isinstance(dict2[key], list): merged_dict[key] = dict1[key] + dict2[key] elif isinstance(dict1[key], set) and isinstance(dict2[key], set): merged_dict[key] = dict1[key].union(dict2[key]) elif key in dict1: merged_dict[key] = dict1[key] else: merged_dict[key] = dict2[key] return merged_dict"},{"question":"**Context:** You are tasked with developing a program that interacts with a weather API to fetch the forecast data for a specified city. The program should use the `requests` library to make HTTP GET requests and store the weather data in a Pandas DataFrame. The function should allow users to retrieve weather forecasts either for the current day or for a specified range of dates. Depending on the user\'s input, the function should handle the retrieval, conversion, and proper error handling. **Requirements:** Implement a function `get_weather_forecast` that fetches and processes weather forecast data into a Pandas DataFrame. **Function Signature:** ```python def get_weather_forecast(city, start_date, end_date=None): Retrieve weather forecast data from the weather API. Parameters: - city (str): The name of the city for which to retrieve the weather forecast. - start_date (str): The start date of the forecast in \'YYYY-MM-DD\' format. - end_date (str, optional): The end date of the forecast in \'YYYY-MM-DD\' format. If not provided, retrieve only the forecast for the start date. Returns: - DataFrame: A pandas DataFrame containing the retrieved weather forecast data. pass ``` **Task:** 1. Implement the `get_weather_forecast` function. 2. Use the `requests.get` method to make an HTTP GET request to the weather API. 3. Use the `pandas.DataFrame` method to create a DataFrame from the JSON response. 4. Handle exceptional cases where data retrieval may fail and provide appropriate error messages. 5. If `end_date` is provided, retrieve forecasts for the range from `start_date` to `end_date` inclusive. If `end_date` is not provided, retrieve only the forecast for the `start_date`. **Hints:** - Use `requests.get` to fetch data from the weather API URL. - Convert the JSON response into a Pandas DataFrame. - Ensure to validate the inputs as per the provided requirements. - Example endpoint: `https://api.weatherapi.com/v1/forecast.json?key=YOUR_API_KEY&q={city}&dt={date}` - Pay attention to edge cases such as invalid dates, non-existent cities, API failures, etc. **Example Usage:** ```python from weather_forecast import get_weather_forecast # Retrieve weather forecast for New York City for a single day df = get_weather_forecast(\\"New York\\", \\"2023-09-20\\") print(df) # Retrieve weather forecast for New York City for a range of dates df = get_weather_forecast(\\"New York\\", \\"2023-09-20\\", \\"2023-09-25\\") print(df) ```","solution":"import requests import pandas as pd from datetime import datetime, timedelta def get_weather_forecast(city, start_date, end_date=None): Retrieve weather forecast data from the weather API. Parameters: - city (str): The name of the city for which to retrieve the weather forecast. - start_date (str): The start date of the forecast in \'YYYY-MM-DD\' format. - end_date (str, optional): The end date of the forecast in \'YYYY-MM-DD\' format. If not provided, retrieve only the forecast for the start date. Returns: - DataFrame: A pandas DataFrame containing the retrieved weather forecast data. base_url = \\"https://api.weatherapi.com/v1/forecast.json\\" api_key = \\"YOUR_API_KEY\\" # Replace with your actual API key if not isinstance(city, str) or not isinstance(start_date, str) or (end_date is not None and not isinstance(end_date, str)): raise ValueError(\\"City, start_date, and end_date (if provided) must be strings in \'YYYY-MM-DD\' format.\\") try: datetime.strptime(start_date, \'%Y-%m-%d\') except ValueError: raise ValueError(\\"Start date must be in \'YYYY-MM-DD\' format\\") if end_date: try: datetime.strptime(end_date, \'%Y-%m-%d\') except ValueError: raise ValueError(\\"End date must be in \'YYYY-MM-DD\' format\\") dates = [start_date] if end_date: start_dt = datetime.strptime(start_date, \'%Y-%m-%d\') end_dt = datetime.strptime(end_date, \'%Y-%m-%d\') if start_dt > end_dt: raise ValueError(\\"Start date must be before or the same as end date.\\") dates = [(start_dt + timedelta(days=i)).strftime(\'%Y-%m-%d\') for i in range((end_dt - start_dt).days + 1)] forecast_data = [] for date in dates: response = requests.get(base_url, params={ \\"key\\": api_key, \\"q\\": city, \\"dt\\": date }) if response.status_code != 200: raise Exception(f\\"Failed to fetch weather data. Status code: {response.status_code}\\") data = response.json() forecast = data[\'forecast\'][\'forecastday\'] for day in forecast: forecast_data.append(day) df = pd.DataFrame(forecast_data) return df"},{"question":"In this problem, you are required to write a function named `check_identity_matrix`. This function should determine if a given 2D numpy array is an identity matrix. An identity matrix is a square matrix with ones on the main diagonal and zeros elsewhere. # Instructions: 1. **Import the necessary libraries**: - Import `numpy` as `np`. 2. **Function Definition**: - Define the function `check_identity_matrix`. 3. **Parameters**: - The function takes one parameter: - `matrix`: A 2D numpy array. 4. **Inside the function**: - Check if the input `matrix` is a square matrix. If not, return `False`. - Create an identity matrix of the same size as the input matrix using `np.identity`. - Compare the input matrix with the created identity matrix using `np.array_equal`. - Return `True` if they are equal, otherwise return `False`. # Requirements: - The function should utilize the numpy library to create and compare matrices. - The function should handle both cases where the input is an identity matrix and where it is not. # Example Usage: ```python import numpy as np def check_identity_matrix(matrix): if matrix.shape[0] != matrix.shape[1]: return False return np.array_equal(matrix, np.identity(matrix.shape[0])) # Example 1 matrix1 = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) print(check_identity_matrix(matrix1)) # Output: True # Example 2 matrix2 = np.array([[1, 0, 0], [0, 1, 1], [0, 0, 1]]) print(check_identity_matrix(matrix2)) # Output: False ```","solution":"import numpy as np def check_identity_matrix(matrix): if matrix.shape[0] != matrix.shape[1]: return False return np.array_equal(matrix, np.identity(matrix.shape[0]))"},{"question":"You are given a CSV file containing data about various products. Your task is to write a function called `filter_and_sort_products(directory, min_price)` that performs the following operations: 1. Reads the CSV file located at the specified `directory` path. Each row in the CSV file represents a product with the columns: `product_id`, `product_name`, `category`, and `price`. 2. Filters the products to only include those whose price is greater than or equal to `min_price`. 3. Sorts the filtered list of products by `price` in descending order. 4. Returns the sorted list of dictionaries, where each dictionary represents a product with the keys: `product_id`, `product_name`, `category`, and `price`. # Input - `directory`: A string representing the path to the CSV file containing the product data. - `min_price`: A float representing the minimum price threshold for filtering products. # Output - A list of dictionaries, where each dictionary contains the details of a product that meets the filtering criteria and is sorted by `price` in descending order. # Constraints - You can assume the CSV file is correctly formatted and accessible. - You may use any standard Python library for reading and processing the CSV file. # Example Suppose the CSV file at `directory` contains the following data: ``` product_id,product_name,category,price 1, \\"Python for Beginners\\", Books, 29.99 2, \\"Gaming Laptop\\", Electronics, 799.99 3, \\"Wireless Mouse\\", Electronics, 19.99 4, \\"Smartphone\\", Electronics, 599.99 5, \\"Cooking Pan\\", Kitchen, 15.99 ``` And `min_price` is `20.00`. Your function should process this file and return: ``` [ {\'product_id\': 2, \'product_name\': \'Gaming Laptop\', \'category\': \'Electronics\', \'price\': 799.99}, {\'product_id\': 4, \'product_name\': \'Smartphone\', \'category\': \'Electronics\', \'price\': 599.99}, {\'product_id\': 1, \'product_name\': \'Python for Beginners\', \'category\': \'Books\', \'price\': 29.99} ] ```","solution":"import csv def filter_and_sort_products(directory, min_price): Reads the CSV file, filters products by min_price, and sorts them by price in descending order. :param directory: A string representing the path to the CSV file containing the product data :param min_price: A float representing the minimum price threshold for filtering products :return: A list of dictionaries representing filtered and sorted products products = [] with open(directory, mode=\'r\', newline=\'\', encoding=\'utf-8\') as file: reader = csv.DictReader(file) for row in reader: price = float(row[\'price\']) if price >= min_price: product = { \'product_id\': int(row[\'product_id\']), \'product_name\': row[\'product_name\'].strip(\'\\"\'), \'category\': row[\'category\'], \'price\': price } products.append(product) # Sort products by price in descending order sorted_products = sorted(products, key=lambda x: x[\'price\'], reverse=True) return sorted_products"},{"question":"You are required to implement a function in Python that calculates the Fibonacci sequence using dynamic programming. The function, `fibonacci_dp`, should take an integer `n` and return the `n`th Fibonacci number. Your function should utilize a bottom-up dynamic programming approach to efficiently compute the result. Here are the requirements: - Create a list `fib` where `fib[i]` holds the `i`th Fibonacci number. - Initialize `fib[0]` to 0 and `fib[1]` to 1. - Use a loop to fill in the subsequent values in the list up to `fib[n]`. - Return `fib[n]` at the end. The Fibonacci sequence is defined as: [ F(n) = F(n-1) + F(n-2) ] with base cases: [ F(0) = 0, F(1) = 1 ] Ensure your function handles edge cases such as `n = 0`. **Function Signature:** ```python def fibonacci_dp(n): # your code here ``` You must use a list to store the computed Fibonacci numbers and avoid recalculating the same Fibonacci number more than once.","solution":"def fibonacci_dp(n): Returns the nth Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"You are tasked with creating a function that takes a string composed of alphabetical characters and digits, and returns a new string where alphabetical characters are sorted in ascending order, while the digits remain in their original positions. **Function signature:** ```python def sort_letters_keep_digits(s): ``` # Instructions: 1. **Sorting Letters**: Extract all alphabetical characters from the string and sort them in ascending order. 2. **Preserve Digits**: Preserve the positions of the digits in the string as they originally appear. 3. **Reconstruct the String**: Combine the sorted letters and the digits back into a single string, maintaining the original positions of the digits. # Example: ```python sort_letters_keep_digits(\\"a1c3b2\\") ``` The function should return the string `\\"a1b3c2\\"` because the letters \'a\', \'c\', and \'b\' are sorted and the digits \'1\', \'3\', and \'2\' remain in their original positions. # Additional Notes: - You don\'t need to handle any input validation; you can assume `s` is always a non-empty string containing only alphabetical characters and digits. - The alphabetical characters should be sorted based on their Unicode values. # Objective: This problem will help you practice sorting algorithms and manipulating strings while maintaining the position of certain characters, enhancing your understanding of string handling in Python.","solution":"def sort_letters_keep_digits(s): Returns a new string where alphabet characters are sorted in ascending order, while digits remain in their original positions. # Extracting all letters and sorting them letters = sorted([char for char in s if char.isalpha()]) # Reconstructing the final string, preserving digits result = [] letter_index = 0 for char in s: if char.isdigit(): result.append(char) else: result.append(letters[letter_index]) letter_index += 1 return \'\'.join(result)"},{"question":"You are given a directory containing multiple CSV files that store student test scores. Each CSV file represents the scores for a single subject, and has the following structure: ``` student_id, student_name, score 1, Alice, 85 2, Bob, 90 3, Charlie, 78 ... ``` You need to write a function `process_student_scores(directory, report_file)` that will: 1. Change the current working directory to the directory specified in `directory`. 2. Iterate through all CSV files in the given directory. 3. Compute the average score for each student across all subjects. 4. Write the computed averages to a new CSV file specified by `report_file`. The output CSV file should have the following structure: ``` student_id, student_name, average_score 1, Alice, 87.5 2, Bob, 90.0 3, Charlie, 82.0 ... ``` For simplicity, you can assume that every CSV file contains entries for the same set of students. Use the `csv` and `os` libraries in Python to aid in this process. Implement the function `process_student_scores(directory, report_file)` to accomplish these tasks.","solution":"import csv import os from collections import defaultdict def process_student_scores(directory, report_file): os.chdir(directory) # Change the current working directory to the specified directory student_scores = defaultdict(list) # Iterate through all CSV files in the directory for filename in os.listdir(directory): if filename.endswith(\'.csv\'): with open(filename, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: student_id = row[\'student_id\'] student_name = row[\'student_name\'] score = float(row[\'score\']) student_scores[(student_id, student_name)].append(score) with open(report_file, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'student_id\', \'student_name\', \'average_score\']) for (student_id, student_name), scores in student_scores.items(): average_score = sum(scores) / len(scores) writer.writerow([student_id, student_name, average_score])"},{"question":"You are tasked with creating a function to simulate a simple banking system. The function `manage_transactions(transactions)` takes a list of transaction tuples where each tuple represents an operation. Each transaction tuple consists of a string (either \\"deposit\\" or \\"withdraw\\") and an integer value greater than zero. Implement a function that processes these transactions and returns the final balance. - If the transaction operation is \\"deposit\\", the integer value is added to the balance. - If the transaction operation is \\"withdraw\\", the integer value is subtracted from the balance. - The balance should never go below zero. If a withdrawal request exceeds the current balance, the withdrawal should be ignored. Function Signature ```python def manage_transactions(transactions): Simulates a simple banking transaction process. Parameters: transactions (list of tuples): A list of transaction tuples with operation and amount. Returns: int: The final balance after processing all transactions. ``` # Constraints: - Each transaction is a tuple where the first element is a string (\\"deposit\\" or \\"withdraw\\") and the second element is a positive integer. - If a withdrawal request exceeds the existing balance, it should be ignored. - The initial balance is zero. # Example: ```python transactions = [(\\"deposit\\", 100), (\\"withdraw\\", 50), (\\"withdraw\\", 60), (\\"deposit\\", 200)] print(manage_transactions(transactions)) # Output should be 250 ``` # Expected Process: - Start with an initial balance of 0. - Process each transaction to update the balance based on the operations and amounts provided. - Return the resulting balance after all transactions have been processed.","solution":"def manage_transactions(transactions): Simulates a simple banking transaction process. Parameters: transactions (list of tuples): A list of transaction tuples with operation and amount. Returns: int: The final balance after processing all transactions. balance = 0 for operation, amount in transactions: if operation == \\"deposit\\": balance += amount elif operation == \\"withdraw\\" and amount <= balance: balance -= amount return balance"},{"question":"Design a Python function called `anagram_solver` which will help the user solve anagram puzzles. The function will receive a list of words and will find all valid anagrams of a given target word from this list. The function should be case-insensitive but return the anagrams in their original forms. # Specifications: 1. Create a function named `anagram_solver` that takes two arguments: `words` (a list of strings) and `target` (a single string). 2. The function should be case-insensitive when determining if two words are anagrams. 3. Return a list of words from the `words` list that are anagrams of the `target` word, preserving their original forms and order. 4. The function should ignore the target word itself if present in the list of words. Here is the template for the `anagram_solver` function: ```python def anagram_solver(words, target): # Your implementation here pass ``` # Example usage: ```python words = [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"Listen\\"] target = \\"silent\\" print(anagram_solver(words, target)) # Output: [\'enlist\', \'inlets\', \'Listen\'] ``` or ```python words = [\\"enlist\\", \\"google\\", \\"banana\\"] target = \\"enlist\\" print(anagram_solver(words, target)) # Output: [] ``` Implement the function adhering strictly to the requirements mentioned above.","solution":"def anagram_solver(words, target): This function finds all valid anagrams of a given target word from a list of words. Args: words (list of str): The list of words to check. target (str): The target word to find anagrams of. Returns: list of str: The list of anagrams found in the original list. sorted_target = sorted(target.lower()) anagrams = [ word for word in words if word.lower() != target.lower() and sorted(word.lower()) == sorted_target ] return anagrams"},{"question":"**You are required to create a function named `fibonacci_cache` that calculates the Fibonacci sequence using memoization to improve performance. Memoization should be implemented using decorators. The function should work as follows: 1. Define a decorator function that uses a dictionary to store the results of Fibonacci calculations. 2. The decorator function should check if a Fibonacci result for a given input `n` is already in the cache; if so, it returns the cached value. 3. If the result is not in the cache, the decorator should calculate it using the recursive approach and store the result in the cache before returning it. 4. Implement the decorated `fibonacci_cache` function to calculate the Fibonacci sequence for an input integer `n`. The Fibonacci sequence is defined as: - fib(0) = 0 - fib(1) = 1 - fib(n) = fib(n-1) + fib(n-2) for n > 1 **Function Signature:** ```python def fibonacci_cache(n): pass ``` Implement the function so that the Fibonacci sequence is efficiently calculated using memoization as described above.**","solution":"def memoize(f): cache = {} def inner(n): if n not in cache: cache[n] = f(n) return cache[n] return inner @memoize def fibonacci_cache(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci_cache(n-1) + fibonacci_cache(n-2)"},{"question":"**Title**: Implement a Pathfinding Algorithm Using A* Algorithm in a Grid You need to write a function that finds the shortest path between two points in a grid using the A* (A-star) algorithm. The grid is represented as a 2D list of zeroes (walkable cells) and ones (blocked cells). The function should return the path as a list of tuples indicating the coordinates of each cell in the path from start to goal. 1. **Input Parameters**: - `grid` : A 2D list representing the grid, where `0` indicates a walkable cell and `1` indicates a blocked cell. - `start`: A tuple representing the starting coordinates in the form (x, y). - `goal`: A tuple representing the goal coordinates in the form (x, y). 2. **Outputs**: - A list of tuples representing the coordinates of the shortest path from start to goal. If no path exists, return an empty list. **Function Definition**: ```python def a_star(grid, start, goal): Finds the shortest path in a grid using the A* algorithm. Parameters: grid (list of lists): The grid where 0 indicates walkable cell and 1 indicates blocked cell. start (tuple): Coordinates of the start point (x, y). goal (tuple): Coordinates of the goal point (x, y). Returns: list of tuples: The shortest path from start to goal as a list of coordinates. Empty list if no path exists. pass ``` **Implementation Details**: 1. Validate the `start` and `goal` points to ensure they are within the bounds of the grid and are not blocked. 2. Initialize the open list with the starting node and the closed list as empty. 3. Use the Manhattan distance as the heuristic function. 4. While the open list is not empty, find the node with the lowest cost (f = g + h) and process it. 5. Expand the current node, checking its walkable neighbors. If a neighbor is the goal, reconstruct the path and return it. 6. If not, update the neighbor\'s cost and add it to the open list if not already present. 7. Add the current node to the closed list after processing all its neighbors. 8. If the open list is empty and the goal is not reached, return an empty list. You are required to use the following Python components: - Lists and tuples. - Basic control structures (`if`, `for`, `while`). - Functions for list manipulation (such as `heapq` for priority queue management).","solution":"import heapq def a_star(grid, start, goal): Finds the shortest path in a grid using the A* algorithm. Parameters: grid (list of lists): The grid where 0 indicates walkable cell and 1 indicates blocked cell. start (tuple): Coordinates of the start point (x, y). goal (tuple): Coordinates of the goal point (x, y). Returns: list of tuples: The shortest path from start to goal as a list of coordinates. Empty list if no path exists. def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1]) def is_within_bounds(pos): return 0 <= pos[0] < len(grid) and 0 <= pos[1] < len(grid[0]) def is_walkable(pos): return is_within_bounds(pos) and grid[pos[0]][pos[1]] == 0 if not is_walkable(start) or not is_walkable(goal): return [] open_list = [] heapq.heappush(open_list, (0 + heuristic(start, goal), 0, start)) came_from = {} g_score = {start: 0} while open_list: _, current_g, current = heapq.heappop(open_list) if current == goal: path = [] while current in came_from: path.append(current) current = came_from[current] path.append(start) return path[::-1] for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]: neighbor = (current[0] + direction[0], current[1] + direction[1]) if not is_walkable(neighbor): continue tentative_g_score = current_g + 1 if neighbor not in g_score or tentative_g_score < g_score[neighbor]: came_from[neighbor] = current g_score[neighbor] = tentative_g_score f_score = tentative_g_score + heuristic(neighbor, goal) heapq.heappush(open_list, (f_score, tentative_g_score, neighbor)) return []"},{"question":"**Your task is to design and implement a function `find_connected_components` that identifies and labels the connected components in a binary image using depth-first search (DFS). Each connected component should be assigned a unique label. The function should adhere to the following signature: ```python def find_connected_components(binary_image): ``` # Input Parameters: 1. `binary_image`: A 2D list of integers (or a 2D numpy array) where each element is either 0 or 1. A value of 1 indicates the presence of an object (foreground), while 0 indicates the background. # Output: The function should return a 2D list (or numpy array) of the same dimensions as the input, where each element contains a label indicating the component to which it belongs. Labels should start from 1 and increment by 1 for each new component. # Implementation Details: 1. Use Depth-First Search (DFS) to traverse and label all pixels in a connected component. 2. Treat 4-way connectivity (left, right, up, down) as valid connections. 3. Ensure that the function works efficiently for large images. **Hint**: You may find it useful to maintain a `visited` array to keep track of the already processed pixels and a stack to facilitate the DFS traversal. Here is a sample code snippet to get you started: ```python def dfs(binary_image, visited, label, x, y): stack = [(x, y)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Directions for 4-way connectivity while stack: cx, cy = stack.pop() if visited[cx][cy] or binary_image[cx][cy] == 0: continue visited[cx][cy] = True binary_image[cx][cy] = label for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(binary_image) and 0 <= ny < len(binary_image[0]) and not visited[nx][ny]: stack.append((nx, ny)) return binary_image def find_connected_components(binary_image): visited = [[False for _ in range(len(binary_image[0]))] for _ in range(len(binary_image))] label = 1 # start with label 1 for i in range(len(binary_image)): for j in range(len(binary_image[0])): if binary_image[i][j] == 1 and not visited[i][j]: binary_image = dfs(binary_image, visited, label, i, j) label += 1 return binary_image ``` # Example: **Input:** ```python binary_image = [ [1, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1], [0, 0, 0, 1] ] ``` **Output:** ```python [ [1, 0, 0, 2], [1, 0, 0, 0], [0, 0, 3, 3], [0, 0, 0, 3] ] ``` In the above example, the connected components are labeled as follows: - The top-left component is labeled with `1`. - The top-right component is labeled with `2`. - The bottom-right component is labeled with `3`. **","solution":"def find_connected_components(binary_image): def dfs(binary_image, visited, label, x, y): stack = [(x, y)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Directions for 4-way connectivity while stack: cx, cy = stack.pop() if visited[cx][cy] or binary_image[cx][cy] == 0: continue visited[cx][cy] = True output[cx][cy] = label for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(binary_image) and 0 <= ny < len(binary_image[0]) and not visited[nx][ny]: stack.append((nx, ny)) visited = [[False for _ in range(len(binary_image[0]))] for _ in range(len(binary_image))] output = [[0 for _ in range(len(binary_image[0]))] for _ in range(len(binary_image))] label = 1 # start with label 1 for i in range(len(binary_image)): for j in range(len(binary_image[0])): if binary_image[i][j] == 1 and not visited[i][j]: dfs(binary_image, visited, label, i, j) label += 1 return output"},{"question":"Create a function that takes a string as input and returns the most frequent character along with its count. In case of a tie, return the character that appears first lexicographically. The function should process the string in a case-sensitive manner and consider only alphabetical characters. Non-alphabetical characters should be ignored. The function should output a tuple with: - The most frequent character (str) - Its count (int) You should write self-contained code starting with: ``` import re from collections import Counter def most_frequent_char(s): ```","solution":"import re from collections import Counter def most_frequent_char(s): # Only keep alphabetical characters filtered_s = re.sub(\'[^a-zA-Z]\', \'\', s) # Calculate the frequency of each character counter = Counter(filtered_s) # If the string was empty or had no alphabetical characters if not counter: return None # Find the most frequent character most_frequent = max(counter.items(), key=lambda x: (x[1], -ord(x[0]))) return most_frequent"},{"question":"You need to write a function `find_substring_anagrams(s, p)` that finds all start indices of `p`\'s anagrams in `s`. The function will return a list of starting indices where each substring of `s` starting at those indices is an anagram of `p`. The function parameters are as follows: - `s`: A string in which to search for anagrams. - `p`: A string whose anagrams are to be found in `s`. The function should use a sliding window approach to find and return all starting indices of anagrams of `p` in `s`. # Definition of \'Anagram\' An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, \'abc\' and \'cab\' are anagrams of each other. # Approach 1. Calculate the length of the input string `p` (let\'s call it `k`). 2. Use two counters (or hashmaps) to keep track of the character frequencies. - One for the frequency of characters in `p`. - One for the current window in `s` of length `k`. 3. Slide the window over the string `s` and compare frequencies: - If the frequency counter for the current window matches the frequency counter for `p`, record the starting index. - Slide the window to the right by one character, updating the counters as you go. **Function Signature** ```python def find_substring_anagrams(s: str, p: str) -> List[int]: pass ``` **Example Usage** ```python # Example Call print(find_substring_anagrams(\\"cbaebabacd\\", \\"abc\\")) # Output: [0, 6] print(find_substring_anagrams(\\"abab\\", \\"ab\\")) # Output: [0, 1, 2] ```","solution":"from collections import Counter from typing import List def find_substring_anagrams(s: str, p: str) -> List[int]: p_length = len(p) s_length = len(s) if p_length > s_length: return [] p_counter = Counter(p) s_counter = Counter(s[:p_length]) result = [] if p_counter == s_counter: result.append(0) for i in range(1, s_length - p_length + 1): old_char = s[i - 1] new_char = s[i + p_length - 1] # Remove the old_char from the current window counter s_counter[old_char] -= 1 if s_counter[old_char] == 0: del s_counter[old_char] # Add new_char to the current window counter s_counter[new_char] += 1 # Compare counters if p_counter == s_counter: result.append(i) return result"},{"question":"In this problem, you are required to use Python to manipulate strings, specifically focusing on character frequency analysis. You will create a function called `highest_frequency_character(s)` that finds the character with the highest frequency in a given string. In the case of a tie (i.e., multiple characters having the same frequency), return the character that appears first in the string. Here\'s what your function needs to do: 1. Analyze the frequency of each character in the string. 2. Identify the character with the highest frequency. 3. In case of a tie, select the character that appears first. **Instructions:** - Define the function `highest_frequency_character(s)`, where `s` is a string consisting of lowercase and/or uppercase alphabets. - Use appropriate data structures to keep track of character frequencies. - Iterate through the string to determine both the highest frequency and, in the event of a tie, the earliest occurrence. - The function should return a single character, which is the one with the highest frequency according to the specified criteria. **Example:** ```python highest_frequency_character(\\"apple\\") # returns \'p\' highest_frequency_character(\\"swiss\\") # returns \'s\' highest_frequency_character(\\"bookkeeper\\") # returns \'e\' highest_frequency_character(\\"testcase\\") # returns \'t\' ```","solution":"def highest_frequency_character(s): from collections import Counter # Calculate frequency of each character using Counter freq_counter = Counter(s) # Initialize variables to keep the track of max frequency and corresponding character max_freq = 0 result_char = \\"\\" # Iterate through the string to find the highest frequency character for char in s: if freq_counter[char] > max_freq: max_freq = freq_counter[char] result_char = char return result_char"},{"question":"**You are required to create a function that simulates the rolling of a die and calculates the expected value of the outcome after a specified number of rolls. Your function should be named `expected_value`, and it will perform the simulation using random die rolls. The function should accept one argument: - `num_rolls` (int): The number of times the die should be rolled. To simulate the die rolls, use the `random.randint` function, which generates a random integer between the given range. Assume the die has six faces, and the possible outcomes of each roll are 1, 2, 3, 4, 5, and 6. The function should calculate the average value of the outcomes obtained from the specified number of die rolls and return this average as the expected value. **Function requirements:** 1. Validate the number of rolls to ensure it is a positive integer. 2. Use a loop to simulate rolling the die the specified number of times. 3. Maintain a running total of the outcomes. 4. Calculate the expected value (average outcome) of the die rolls. 5. Return the expected value as a float. **Example Usage:** ```python num_rolls = 1000 print(expected_value(num_rolls)) # Output: Approximately 3.5 based on the law of large numbers ``` **Note:** The more rolls you simulate, the closer the result should approximate the theoretical expected value of 3.5 for a fair six-sided die. **","solution":"import random def expected_value(num_rolls): Simulates rolling a six-sided die a specified number of times and calculates the expected value of the outcomes. Args: num_rolls (int): The number of times the die should be rolled. Returns: float: The expected value of the die rolls. if not isinstance(num_rolls, int) or num_rolls <= 0: raise ValueError(\\"Number of rolls must be a positive integer\\") total = 0 for _ in range(num_rolls): roll = random.randint(1, 6) total += roll return total / num_rolls"},{"question":"Write a function that simulates a simple random walk and plots the results. The random walk should start at the origin (0, 0) and consist of a specified number of steps. For each step, the movement should be randomly chosen to move up, down, left, or right by one unit. Use NumPy for generating random steps and Matplotlib for plotting the path. The plot should have a title \\"Random Walk Path\\", label the x-axis as \\"X Position\\" and the y-axis as \\"Y Position\\". The function should return: str: A message confirming that the plot has been created successfully. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def random_walk(steps=1000): ```","solution":"import numpy as np import matplotlib.pyplot as plt def random_walk(steps=1000): Simulates a random walk and plots the path. Parameters: steps (int): Number of steps in the random walk. Returns: str: Confirmation message that the plot has been created successfully. # Create an array of steps directions = np.random.choice([\'up\', \'down\', \'left\', \'right\'], size=steps) # Starting position x, y = 0, 0 x_positions = [x] y_positions = [y] for direction in directions: if direction == \'up\': y += 1 elif direction == \'down\': y -= 1 elif direction == \'left\': x -= 1 elif direction == \'right\': x += 1 x_positions.append(x) y_positions.append(y) # Plotting the random walk path plt.figure(figsize=(10, 6)) plt.plot(x_positions, y_positions, marker=\'o\', markersize=2) plt.title(\\"Random Walk Path\\") plt.xlabel(\\"X Position\\") plt.ylabel(\\"Y Position\\") plt.grid(True) plt.show() return \\"Plot created successfully\\""},{"question":"You are asked to write a function `contact_tracing` that simulates a basic contact tracing mechanism. The function will take in a list of interactions, where each interaction is represented by a tuple containing two names of individuals who interacted with each other. The function should output a list of lists, where each sublist represents a group of individuals who have interacted either directly or indirectly. # Function Signature: ```python def contact_tracing(interactions: List[Tuple[str, str]]) -> List[List[str]]: ``` # Example: ```python interactions = [(\\"Alice\\", \\"Bob\\"), (\\"Bob\\", \\"Charlie\\"), (\\"Eve\\", \\"Frank\\"), (\\"Charlie\\", \\"Dave\\")] output = contact_tracing(interactions) # Example Output: [[\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Dave\\"], [\\"Eve\\", \\"Frank\\"]] ``` # Steps: 1. Create a function that finds all groups of connected individuals based on their interactions. 2. Assume interactions are bidirectional, meaning if Alice interacted with Bob, then Bob interacted with Alice. 3. The input list `interactions` may not be sorted; ensure the function can handle any order. # Constraints: - The list of interactions will have a length between 1 and 1000. - Each interaction will contain exactly two distinct names, both of which are strings of length 1 to 100. - The names are case-sensitive. # Guidelines: - Use depth-first search (DFS) or breadth-first search (BFS) to find connected components in the graph of interactions. - Return a list of list of grouped names. Each sublist should contain names in lexicographical order, and the sublists should also be sorted lexicographically overall. - Aim for optimal time and space complexity.","solution":"from typing import List, Tuple import collections def contact_tracing(interactions: List[Tuple[str, str]]) -> List[List[str]]: Simulates a basic contact tracing mechanism and returns a list of groups of individuals who interacted either directly or indirectly. # This function performs a DFS to find all individuals connected with `node`. def dfs(node, graph, visited, group): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) group.append(current) for neighbor in graph[current]: if neighbor not in visited: stack.append(neighbor) # Create a graph using a dictionary where each person points to a set of other people they interacted with. graph = collections.defaultdict(set) for person1, person2 in interactions: graph[person1].add(person2) graph[person2].add(person1) visited = set() results = [] # Perform DFS for each individual in the graph to find all connected components. for person in graph: if person not in visited: group = [] dfs(person, graph, visited, group) results.append(sorted(group)) return sorted(results)"},{"question":"You are building a library management system that keeps track of books and their availability. The system should allow users to check out and return books while ensuring that the books are only checked out by one user at a time. Implement a Python class called `Library` to manage the operations. # Class Signature ```python class Library: def __init__(self): pass def add_book(self, title: str) -> None: pass def check_out_book(self, title: str, user: str) -> bool: pass def return_book(self, title: str) -> bool: pass def get_status(self, title: str) -> str: pass ``` # Methods - `__init__()`: Initializes the library with an empty book collection. - `add_book(title: str) -> None`: Adds a book to the library collection with the given title. Assume that titles are unique. - `check_out_book(title: str, user: str) -> bool`: Checks out a book for the given user if the book is available and not already checked out. Returns `True` if the checkout was successful, and `False` otherwise. - `return_book(title: str) -> bool`: Returns a book to the library collection if it was previously checked out. Returns `True` if the return was successful, and `False` if the book was not checked out. - `get_status(title: str) -> str`: Returns the status of the book. If the book is checked out, return the name of the user who checked it out, otherwise return \\"Available\\". # Example ```python library = Library() library.add_book(\\"The Catcher in the Rye\\") library.add_book(\\"To Kill a Mockingbird\\") # Check out a book result = library.check_out_book(\\"The Catcher in the Rye\\", \\"Alice\\") print(result) # True # Check the status of the book status = library.get_status(\\"The Catcher in the Rye\\") print(status) # \\"Alice\\" # Return the book result = library.return_book(\\"The Catcher in the Rye\\") print(result) # True # Check the status of the book again status = library.get_status(\\"The Catcher in the Rye\\") print(status) # \\"Available\\" # Try to check out a book that is not available result = library.check_out_book(\\"To Kill a Mockingbird\\", \\"Bob\\") print(result) # True # Another user tries to check out the same book result = library.check_out_book(\\"To Kill a Mockingbird\\", \\"Charlie\\") print(result) # False ``` # Instructions 1. Implement the `Library` class and its methods as specified. 2. Ensure that the library can handle multiple books and users correctly. 3. The methods should perform efficiently with respect to the operations they need to execute.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title: str) -> None: if title not in self.books: self.books[title] = None def check_out_book(self, title: str, user: str) -> bool: if title in self.books and self.books[title] is None: self.books[title] = user return True return False def return_book(self, title: str) -> bool: if title in self.books and self.books[title] is not None: self.books[title] = None return True return False def get_status(self, title: str) -> str: if title in self.books: if self.books[title] is None: return \\"Available\\" else: return self.books[title] return \\"Book not found\\""},{"question":"You are tasked with implementing a simple spell checker for a given text file based on a dictionary file. The goal is to identify and list any words in the text file that are not present in the dictionary file. The text file may contain punctuation, which should be ignored during the word matching process. # Requirements 1. Implement the function `spell_checker(text_file: str, dictionary_file: str) -> List[str]` which: - Reads `text_file` and `dictionary_file`. - Normalizes all words to lowercase and strips any punctuation. - Checks each word in the text file against the dictionary. - Returns a list of misspelled words (i.e., words that are not present in the dictionary). 2. Each word should be considered case-insensitive. 3. Use the following libraries: - `re` # Example Given the `text_file.txt` ``` Hello, this is a sample text file. The goal is to identfy the mispelled words. ``` And the `dictionary_file.txt` ``` hello this is a sample text file the goal to identify misspelled words ``` Your function `spell_checker(\'text_file.txt\', \'dictionary_file.txt\')` should return: ``` [\'identfy\', \'mispelled\'] ``` # Implementation Guidance - Use regular expressions to remove any punctuation from words. - Normalize case by converting all words to lowercase. - Read and store dictionary words in a set for quicker lookups.","solution":"import re from typing import List def spell_checker(text_file: str, dictionary_file: str) -> List[str]: # Helper function to clean and normalize words def normalize(word: str) -> str: return re.sub(r\'[^ws]\', \'\', word).lower() # Read dictionary file and store words in a set with open(dictionary_file, \'r\') as df: dictionary = set(normalize(word) for word in df.read().split()) # Read text file and find misspelled words with open(text_file, \'r\') as tf: text = tf.read() words = re.findall(r\'bw+b\', text) misspelled_words = [normalize(word) for word in words if normalize(word) not in dictionary] return misspelled_words"},{"question":"You are tasked with developing a text normalization function for a more consistent and cleaner text processing pipeline. The function should handle a given string input by performing specific normalization steps. Write a function named `normalize_text` that adheres to the following steps: 1. The function takes a single string input `text` which may contain sentences with multiple words separated by spaces. 2. Convert the entire string to lowercase. 3. Replace all occurrences of multiple spaces with a single space. 4. Remove any leading and trailing spaces from the string. 5. Replace any punctuation marks (.,!?) with a space. 6. If the final string is empty after these transformations, the function should return the string \\"empty\\". Here is the template for your function: ```python import re def normalize_text(text): Normalize the input text following the specified steps. # 1. Convert to lowercase text = text.lower() # 2. Replace multiple spaces with a single space text = re.sub(r\'s+\', \' \', text) # 3. Remove leading and trailing spaces text = text.strip() # 4. Replace punctuation marks with spaces text = re.sub(r\'[.,!?]\', \' \', text) # 5. Return \\"empty\\" if the final string is empty if not text: return \\"empty\\" return text ```","solution":"import re def normalize_text(text): Normalize the input text following the specified steps. # 1. Convert to lowercase text = text.lower() # 2. Replace multiple spaces with a single space text = re.sub(r\'s+\', \' \', text) # 3. Remove leading and trailing spaces text = text.strip() # 4. Replace punctuation marks with spaces text = re.sub(r\'[.,!?]\', \' \', text) # 5. Replace multiple spaces with a single space again due to punctuation changes text = re.sub(r\'s+\', \' \', text) # 6. Remove leading and trailing spaces again text = text.strip() # 7. Return \\"empty\\" if the final string is empty if text == \'\': return \\"empty\\" return text"},{"question":"You have been given an array representing the daily sales of a retail clothing store over a month. Your task is to write a Python function `plotSales(sales_arr)` that takes in this array and produces a plot showing the sales trend over the month using the `matplotlib` library. The plot should have: - X-axis labeled as \\"Days of the Month\\". - Y-axis labeled as \\"Sales (in USD)\\". - A title: \\"Daily Sales Trend for the Month\\". **Specific Requirements:** 1. Make sure to use the `matplotlib.pyplot.show` function to display the plot. 2. The function should ensure that the plot is shown correctly, considering the documentation provided for `matplotlib.pyplot.show`. Here is the template you need to complete: ```python import matplotlib.pyplot as plt def plotSales(sales_arr): # Your code here ``` Example Usage: ```python sales = [150, 200, 250, 300, 220, 270, 320, 150, 380, 400, 410, 430, 390, 350, 310, 330, 370, 380, 390, 400, 410, 380, 390, 420, 430, 450, 470, 490, 500, 510] plotSales(sales) ```","solution":"import matplotlib.pyplot as plt def plotSales(sales_arr): Plot the sales trend for the month. Parameters: - sales_arr: List of daily sales figures. days = list(range(1, len(sales_arr) + 1)) plt.figure(figsize=(10, 5)) plt.plot(days, sales_arr, marker=\'o\', linestyle=\'-\') plt.xlabel(\'Days of the Month\') plt.ylabel(\'Sales (in USD)\') plt.title(\'Daily Sales Trend for the Month\') plt.grid(True) plt.show()"},{"question":"Load a dataset from a CSV file, handle missing values in the specified columns by either dropping them or imputing with the mean, and then perform one-hot encoding for categorical columns. The function should raise the exception for: ValueError if any specified column is not found in the dataframe. The function should output with: tuple: A tuple containing the original dataframe and the processed dataframe. You should write self-contained code starting with: ``` import pandas as pd from sklearn.impute import SimpleImputer def task_func(file_path, columns_to_handle, method=\'drop\'): ```","solution":"import pandas as pd from sklearn.impute import SimpleImputer def task_func(file_path, columns_to_handle, method=\'drop\'): # Load the dataset from the CSV file try: df = pd.read_csv(file_path) except FileNotFoundError: raise ValueError(\\"File not found.\\") # Check if specified columns are all present in the dataframe missing_columns = [col for col in columns_to_handle if col not in df.columns] if missing_columns: raise ValueError(f\\"Columns not found in dataframe: {missing_columns}\\") # Handle missing values in the specified columns processed_df = df.copy() for col in columns_to_handle: if method == \'drop\': processed_df = processed_df.dropna(subset=[col]) elif method == \'mean\': imputer = SimpleImputer(strategy=\'mean\') processed_df[col] = imputer.fit_transform(processed_df[[col]]) else: raise ValueError(\\"Invalid method provided. Use \'drop\' or \'mean\'.\\") # Perform one-hot encoding for categorical columns processed_df = pd.get_dummies(processed_df, drop_first=True) return df, processed_df"},{"question":"Write a function that takes a list of numbers as input and returns a new list with the square of each number. Additionally, write a decorator that logs the input and output of the function. Use functools to ensure the decorator preserves the original function\'s metadata. The function and decorator should handle a situation where the list could be empty and should return an empty list in such cases. Provide a demonstration by applying the decorator to the function and testing it with some sample data. The function should output with: list: Returns the squared values of the input list. You should write self-contained code starting with: ``` import functools def log_decorator(func): ```","solution":"import functools def log_decorator(func): Decorator that logs the input and output of a function. @functools.wraps(func) def wrapper(*args, **kwargs): print(f\\"Input: {args}, {kwargs}\\") result = func(*args, **kwargs) print(f\\"Output: {result}\\") return result return wrapper @log_decorator def square_numbers(numbers): Returns a list with the squares of each number from the input list. return [number ** 2 for number in numbers] # Example usage: # print(square_numbers([1, 2, 3, 4])) # Should output: [1, 4, 9, 16]"},{"question":"In this problem, you are required to write a function `most_frequent_words` that extracts the most frequent words from a given text. The function should return a list of the words that appear the most often, sorted alphabetically. The function performs the following steps: 1. Splits the input text into words using any whitespace as a delimiter. 2. Counts the occurrences of each unique word while ignoring case (i.e., \\"Word\\" and \\"word\\" should be treated as the same word). 3. Identifies the words with the highest frequency. 4. Returns these words as a list, sorted in alphabetical order. Function Signature: ```python def most_frequent_words(text: str) -> List[str]: pass ``` # Requirements: 1. You must use Python\'s string methods to handle case insensitivity and splitting of the text. 2. The function should ignore punctuation and treat words as sequences of alphabetic characters only. 3. If multiple words have the same highest frequency, all should be included in the result, sorted alphabetically. Below is an example of how the function should work: ```python text = \\"Hello world! Hello, all. Welcome to the world of programming. Enjoy the programming world.\\" result = most_frequent_words(text) print(result) # Example output: [\'hello\', \'world\'] ```","solution":"from typing import List from collections import Counter import re def most_frequent_words(text: str) -> List[str]: Extracts and returns the most frequent words from the provided text. The function returns the words sorted alphabetically with the highest frequency occurring words. # Use regular expression to find words ignoring punctuation words = re.findall(r\'bw+b\', text.lower()) # Count the occurrences of each word word_counts = Counter(words) # Find the highest frequency if not word_counts: return [] max_frequency = max(word_counts.values()) # Identify the words with the highest frequency most_frequent = [word for word, count in word_counts.items() if count == max_frequency] # Return the words, sorted alphabetically return sorted(most_frequent)"},{"question":"You are tasked with designing a simplified library management system. You need to implement a function that tracks books and checks their availability. You will maintain a record of books and their statuses (whether they are available or checked out) using a dictionary where each key is a book title, and each value is a boolean indicating its availability (True for available, False for checked out). Your task is to implement a class named `Library` that contains methods to add books, check out books, return books, and check availability of a specific book. # Class Definition: ```python class Library: def __init__(self) -> None: # Initializes an empty library with no books. pass def add_book(self, title: str) -> None: # Adds a book to the library inventory. If the book already exists, it does nothing. pass def check_out_book(self, title: str) -> bool: # Checks out a book from the library. If the book is available, it marks it as checked out and returns True. # If the book is already checked out or does not exist, it returns False. pass def return_book(self, title: str) -> bool: # Returns a book to the library. If the book was previously checked out, it marks it as available and returns True. # If the book is already available or does not exist, it returns False. pass def is_book_available(self, title: str) -> bool: # Returns True if the book is available and False if it is checked out or does not exist in the library. pass ``` # Example Usage: ```python library = Library() library.add_book(\\"The Great Gatsby\\") print(library.is_book_available(\\"The Great Gatsby\\")) # Output: True print(library.check_out_book(\\"The Great Gatsby\\")) # Output: True print(library.is_book_available(\\"The Great Gatsby\\")) # Output: False print(library.check_out_book(\\"The Great Gatsby\\")) # Output: False print(library.return_book(\\"The Great Gatsby\\")) # Output: True print(library.is_book_available(\\"The Great Gatsby\\")) # Output: True print(library.return_book(\\"Moby Dick\\")) # Output: False print(library.is_book_available(\\"Moby Dick\\")) # Output: False ``` # Requirements: 1. Implement the class `Library` with the described methods. 2. The methods should handle scenarios where books may not exist in the system gracefully. 3. Use appropriate data structures to maintain the state of the library. # Note: - Ensure that the dictionary in the `Library` class efficiently manages the availability status of the books. - You may assume that book titles are unique and are represented as non-empty strings.","solution":"class Library: def __init__(self) -> None: Initializes an empty library with no books. self.books = {} def add_book(self, title: str) -> None: Adds a book to the library inventory. If the book already exists, it does nothing. if title not in self.books: self.books[title] = True def check_out_book(self, title: str) -> bool: Checks out a book from the library. If the book is available, it marks it as checked out and returns True. If the book is already checked out or does not exist, it returns False. if title in self.books and self.books[title]: self.books[title] = False return True return False def return_book(self, title: str) -> bool: Returns a book to the library. If the book was previously checked out, it marks it as available and returns True. If the book is already available or does not exist, it returns False. if title in self.books and not self.books[title]: self.books[title] = True return True return False def is_book_available(self, title: str) -> bool: Returns True if the book is available and False if it is checked out or does not exist in the library. return self.books.get(title, False)"},{"question":"You are given a list of integers and the task is to split this list into groups such that the sum of integers in each group is roughly equal. To achieve this, a greedy algorithm can be used which consistently tries to balance the groups as new integers are added. Your task is to implement the function `split_list_to_groups(lst, group_count)` which will utilize this approach to split the integers. 1. Takes in two parameters: - `lst`: A list of integers to be split. - `group_count`: An integer specifying the number of groups to split the list into. 2. Returns: - A list of lists where each sublist (group) contains integers from the original list such that the sums of the integers in each group are as equal as possible. The algorithm provided below can be followed: - First, sort `lst` in descending order. - Initialize `group_count` empty sublists. - Iterate over each integer in the sorted list and add it to the sublist with the currently smallest sum. **Function Signature:** ```python def split_list_to_groups(lst: list, group_count: int) -> list: ... ``` **Example:** ```python # Example Usage lst = [10, 20, 15, 5, 25, 30] group_count = 3 # Possible output: [[30, 10], [25, 15], [20, 5]] balancing the groups based on the sum split_lst = split_list_to_groups(lst, group_count) print(split_lst) ``` Write the function `split_list_to_groups` that accomplishes this task.","solution":"def split_list_to_groups(lst, group_count): Splits a list of integers into groups such that the sum of integers in each group is as equal as possible. :param lst: List of integers to be split :param group_count: The number of groups to split the integers into :return: A list of groups (each group is a list of integers) # Sort the list in descending order sorted_lst = sorted(lst, reverse=True) # Initialize the groups with empty lists groups = [[] for _ in range(group_count)] # Initialize the sums of each group to zero group_sums = [0] * group_count # Distribute the numbers to the groups for num in sorted_lst: # Find the group with the smallest sum min_index = group_sums.index(min(group_sums)) # Add the number to that group groups[min_index].append(num) # Update the sum of that group group_sums[min_index] += num return groups"},{"question":"**Context:** In several applications, you may need to work with lists of numbers and manipulate these lists to provide specific insights or summaries. A common task is to identify patterns or features in a list of integers. **Requirements:** You need to create a function named `longest_increasing_subsequence` that takes a list of integers as its only argument. The function should: 1. Find the longest strictly increasing subsequence in the given list. 2. Return the length of this longest subsequence. **Function Signature:** ```python def longest_increasing_subsequence(nums: List[int]) -> int: ``` **Detailed Instructions:** 1. **Initialization:** - Create an array `dp` where `dp[i]` represents the length of the longest increasing subsequence that ends with the element at index `i`. 2. **Processing Sequence:** - Start by initializing `dp` with 1s since the minimum length of an increasing subsequence ending at any element is 1 (the element itself). - Loop through the list of numbers, and for each element, loop through the elements before it to find the length of increasing subsequences. 3. **Update the dp Array:** - Whenever a number in the subsequence can be extended by the current element, update the `dp` value for the current element. - Keep track of the maximum length of these subsequences. 4. **Final Output:** - The answer is the maximum value in the `dp` array. **Example:** ```python # Input nums = [10, 9, 2, 5, 3, 7, 101, 18] # Output 4 ``` (The longest increasing subsequence is [2, 3, 7, 18]) **Constraints:** - The length of `nums` can be up to 10,000. - The elements of `nums` are integers within the range `-10^9` to `10^9`. --- ```python def longest_increasing_subsequence(nums: List[int]) -> int: if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) ```","solution":"def longest_increasing_subsequence(nums): if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are tasked with creating a function named `simulate_stock_performance` that simulates the performance of a stock over a given period. The function should take the following inputs: - `start_price` (float): The initial price of the stock. - `daily_return` (list): A list of daily percentage returns of the stock. - `volatility` (float): A volatility factor to adjust the daily returns. The function should perform the following: 1. Create a list of simulated daily closing prices starting from `start_price`. Each subsequent price should be adjusted by the daily return and the volatility factor. The formula to calculate the next price is: Next day\'s price = previous day\'s price * (1 + daily_return[i] * (1 + volatility)) 2. Generate a plot showing the stock\'s simulated performance over time using `matplotlib`. - The Y-axis should represent the stock price. - The X-axis should represent the days. - The plot should include a blue line (`\'b-\'`) representing the simulated stock prices with a line width of 2. - Add a title \\"Simulated Stock Performance\\". - Add the X-axis label \\"Days\\". - Add the Y-axis label \\"Price ()\\". - Save the plot as a PNG file named `stock_performance_simulation.png`. Make sure to utilize `matplotlib.pyplot.figure` to set the figure size to `(12, 6)` inches with a DPI of 100. **Your goal:** Implement the function `simulate_stock_performance(start_price, daily_return, volatility)` as described above.","solution":"import matplotlib.pyplot as plt def simulate_stock_performance(start_price, daily_return, volatility): Simulates the performance of a stock over a given period. Parameters: start_price (float): The initial price of the stock. daily_return (list): A list of daily percentage returns of the stock. volatility (float): A volatility factor to adjust the daily returns. Returns: list: A list of simulated daily closing prices. prices = [start_price] for i in range(len(daily_return)): next_price = prices[-1] * (1 + daily_return[i] * (1 + volatility)) prices.append(next_price) # Plot the results plt.figure(figsize=(12, 6), dpi=100) plt.plot(prices, \'b-\', linewidth=2) plt.title(\\"Simulated Stock Performance\\") plt.xlabel(\\"Days\\") plt.ylabel(\\"Price ()\\") plt.savefig(\\"stock_performance_simulation.png\\") plt.close() return prices"},{"question":"You are tasked with writing a function to analyze log data stored in a text file. The log file contains multiple lines, each representing a single log entry. Each log entry consists of: - A timestamp in the format `YYYY-MM-DD HH:MM:SS` - A log level (e.g., `INFO`, `ERROR`, `WARN`) - A message describing the event Your function, `analyze_logs`, takes the path to a log file and must: 1. Read the log file line by line. 2. For each log entry, extract the timestamp, log level, and message. 3. Aggregate the number of occurrences for each log level. 4. Create a summary of log level counts. 5. Generate a list of timestamps for each `ERROR` log. 6. Return a tuple containing the summary dictionary and the list of error timestamps. Log File Format: ``` YYYY-MM-DD HH:MM:SS [LOG_LEVEL] Message YYYY-MM-DD HH:MM:SS [LOG_LEVEL] Message ... YYYY-MM-DD HH:MM:SS [LOG_LEVEL] Message ``` Example Log Entries: ``` 2023-10-01 10:15:23 [INFO] System initialized. 2023-10-01 10:16:45 [WARN] Low disk space. 2023-10-01 10:17:30 [ERROR] Failed to open file. 2023-10-01 10:18:50 [INFO] User login successful. ``` Function Signature: ```python def analyze_logs(log_file_path): # Implementation here ``` Example Usage: ```python # Given a log file with the example entries above, summary, error_timestamps = analyze_logs(\'system.log\') # summary should be: {\'INFO\': 2, \'WARN\': 1, \'ERROR\': 1} # error_timestamps should be: [\'2023-10-01 10:17:30\'] ```","solution":"def analyze_logs(log_file_path): log_levels = {} error_timestamps = [] with open(log_file_path, \'r\') as file: for line in file: parts = line.split(\' \', 3) timestamp = \' \'.join(parts[:2]) log_level = parts[2].strip(\'[]\') message = parts[3].strip() if log_level not in log_levels: log_levels[log_level] = 0 log_levels[log_level] += 1 if log_level == \'ERROR\': error_timestamps.append(timestamp) return log_levels, error_timestamps"},{"question":"# Problem You are to simulate a simplified pathfinding algorithm in a maze. The maze is represented as a 2D grid where each cell may either be passable (represented by `0`) or impassable (represented by `1`). Your task is to find the shortest path from the starting point to the destination point using the breadth-first search (BFS) algorithm. The function you need to implement is `shortest_path`, which will simulate traversing the maze to reach the destination. Follow these steps to complete the function: 1. Create a queue to store the cells to be visited along with their current distance from the starting point. 2. Enqueue the starting cell with an initial distance of 0. 3. Dequeue a cell from the queue at a time and perform the following operations: - If the dequeued cell is the destination, return the distance. - Otherwise, enqueue each of its adjacent cells (up, down, left, right) that are passable and have not been visited yet with an incremented distance. 4. Mark the cell as visited once it is dequeued. Assume that the given grid always contains at least two `0`s (starting point and destination) and that there is always a possible path from the starting point to the destination. # Function Signature ```python def shortest_path(maze, start, destination): pass ``` # Parameters - `maze`: A 2D list representing the maze with passable (`0`) and impassable (`1`) cells. - `start`: A tuple `(x, y)` representing the coordinates of the starting cell. - `destination`: A tuple `(x, y)` representing the coordinates of the destination cell. # Returns - An integer representing the shortest distance from the starting cell to the destination cell. If there is no possible path, return -1. # Example ```python maze = [ [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 1], [1, 1, 1, 0, 0], [0, 0, 0, 0, 0] ] start = (0, 0) destination = (4, 4) print(shortest_path(maze, start, destination)) # Output: 8 ``` Implement `shortest_path` function in the space provided below. ```python def shortest_path(maze, start, destination): from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] rows, cols = len(maze), len(maze[0]) queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, distance = queue.popleft() if (x, y) == destination: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1 ```","solution":"def shortest_path(maze, start, destination): from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] rows, cols = len(maze), len(maze[0]) queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, distance = queue.popleft() if (x, y) == destination: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1"},{"question":"Design a Python function called `generate_random_strings` that will generate a specified number of random strings, each of a specific length, using only lowercase English letters. # Function Requirements: 1. **Function Name**: `generate_random_strings` 2. **Parameters**: - `num_strings` (int): Number of random strings to generate. - `length` (int): Length of each random string. 3. **Library Requirement**: `random` and `string` libraries. 4. **Functionality**: - Generate the specified number of random strings. - Each string should consist of randomly chosen lowercase letters. - Return the list of generated strings. # Example Usage: ```python generate_random_strings(5, 8) ``` The above call should return a list of 5 random strings, each 8 characters long. # Detailed Instructions: 1. **Import Necessary Libraries**: - Import `random` for random number generation. - Import `string` to access lowercase English letters (`string.ascii_lowercase`). 2. **String Generation**: - Use `random.choices` to select random letters for each string. 3. **Output**: - Append each generated string to a list. - Return the list of all generated strings. ```python import random import string def generate_random_strings(num_strings, length): random_strings = [] for _ in range(num_strings): random_str = \'\'.join(random.choices(string.ascii_lowercase, k=length)) random_strings.append(random_str) return random_strings ``` Example Test: ```python print(generate_random_strings(3, 5)) # Output: [\'xjdui\', \'qwert\', \'asdfg\'] # actual output will vary due to randomness ```","solution":"import random import string def generate_random_strings(num_strings, length): Generates a specified number of random strings, each of a specified length, using only lowercase English letters. Parameters: num_strings (int): Number of random strings to generate. length (int): Length of each random string. Returns: list: A list containing the generated random strings. random_strings = [] for _ in range(num_strings): random_str = \'\'.join(random.choices(string.ascii_lowercase, k=length)) random_strings.append(random_str) return random_strings"},{"question":"You need to create a new function to analyze a string and determine the most frequently occurring word. In the case of a tie, return the word that appears first among the highest frequency words. Words are case insensitive, and punctuation should be ignored. The function should be named `most_frequent_word` and adhere to the following instructions: 1. Convert the input string to lowercase and remove all punctuation. 2. Split the string into words. 3. Count the frequency of each word. 4. Identify the word with the highest frequency. In case of a tie, return the word that appears first. **Function Signature**: ```python def most_frequent_word(text: str) -> str: ``` **Input**: - `text` (str): A string of words, which may include punctuation. **Output**: - (str): The most frequent word in the string, following the rules defined above. **Example**: ```python text = \\"Hello, hello, world! The world is beautiful. The world, is big.\\" output = most_frequent_word(text) print(output) # Expected output is \\"world\\" ``` **Constraints**: - The input string `text` will have a maximum length of 10,000 characters.","solution":"import string from collections import Counter def most_frequent_word(text: str) -> str: Analyzes a string and determines the most frequently occurring word. In the case of a tie, returns the word that appears first among the highest frequency words. Words are case insensitive, and punctuation is ignored. Parameters: text (str): A string of words, which may include punctuation. Returns: str: The most frequent word in the string. # Convert to lowercase and remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_text = text.lower().translate(translator) # Split the string into words words = cleaned_text.split() # Count the frequency of each word word_count = Counter(words) # Identify the word with the highest frequency most_frequent = None highest_freq = 0 for word in words: if word_count[word] > highest_freq: most_frequent = word highest_freq = word_count[word] return most_frequent"},{"question":"You are provided with a dataset `df` in the form of a pandas DataFrame which has two columns: `\'Employee ID\'` and `\'Department\'`. The `\'Employee ID\'` column contains unique identification numbers representing different employees, while the `\'Department\'` column contains the department names to which these employees belong. Write a function `department_employee_count(df)` that performs the following tasks: 1. Count the number of employees in each department. 2. Display the department name alongside its respective employee count. 3. Measure and display the time taken to calculate and display the employee counts. You should assume the DataFrame `df` is already loaded with the necessary data and that the column names are consistent with the ones provided. Example Code ```python import pandas as pd import time def department_employee_count(df): Displays the number of employees in each department along with the computation time. # Step 1: Count employees in each department department_counts = df[\'Department\'].value_counts() # Step 2: Display the department names and their respective counts for department, count in department_counts.items(): print(f\'{department}: {count}\') # Step 3: Measure and display computation time start_time = time.time() elapsed_time = time.time() - start_time print(\\"nComputation took %s seconds.\\" % elapsed_time) print(\'-\'*40) # Example usage (assuming df is predefined): # department_employee_count(df) ```","solution":"import pandas as pd import time def department_employee_count(df): Displays the number of employees in each department along with the computation time. Parameters: df (pd.DataFrame): The dataframe containing \'Employee ID\' and \'Department\' columns. start_time = time.time() # Step 1: Count employees in each department department_counts = df[\'Department\'].value_counts() # Step 2: Display the department names and their respective counts for department, count in department_counts.items(): print(f\'{department}: {count}\') # Step 3: Measure and display computation time elapsed_time = time.time() - start_time print(\\"nComputation took %s seconds.\\" % elapsed_time)"},{"question":"In this problem, you are required to write a Python function named `store_and_count_words` that utilizes the `json` and `collections` libraries. The function should perform the following tasks: 1. Create a list of sentences. 2. Store these sentences in a JSON file named `sentences.json`. 3. Read the content back from `sentences.json` file. 4. Count the frequency of each word across all sentences using a dictionary. 5. Log the frequency count of each word in the console. The sentences to be stored in the `sentences.json` file are: - \\"Happy coding to you all.\\" - \\"May you find all the bugs today.\\" - \\"Keep calm and code on.\\" - \\"Debugging is fun if you have the right mindset.\\" - \\"Happy learning, happy coding.\\" # Requirements - You **must** use the `json` library to store and retrieve the sentences. - You **must** use the `collections.Counter` class to count the word frequencies. Here\'s a checklist of key points you need to cover: 1. Create a list of sentences provided. 2. Write this list to a JSON file named `sentences.json`. 3. Read the content back from `sentences.json` file. 4. Count the frequency of each word using a `collections.Counter` object. 5. Log the word frequency counts to the console in a readable format, where each word and its count are displayed on a new line.","solution":"import json from collections import Counter def store_and_count_words(): sentences = [ \\"Happy coding to you all.\\", \\"May you find all the bugs today.\\", \\"Keep calm and code on.\\", \\"Debugging is fun if you have the right mindset.\\", \\"Happy learning, happy coding.\\" ] # Write sentences to a JSON file with open(\'sentences.json\', \'w\') as f: json.dump(sentences, f) # Read sentences back from the JSON file with open(\'sentences.json\', \'r\') as f: loaded_sentences = json.load(f) # Count the frequency of each word words = [] for sentence in loaded_sentences: words.extend(sentence.replace(\'.\', \'\').replace(\',\', \'\').lower().split()) word_counts = Counter(words) # Log word frequencies for word, count in word_counts.items(): print(f\\"{word}: {count}\\")"},{"question":"You are required to write a Python function named `remove_small_files` that performs the following tasks: 1. The function should take two arguments: - `directory` (default is `None`), a string, which specifies the directory to process. If `None`, the current working directory is used. - `size_threshold` (default is `1024`), an integer that specifies the size threshold (in bytes) for file removal. 2. If a `directory` is provided, change the working directory to the specified directory. If no directory is provided, work in the current working directory. 3. List all files in the specified directory and collect the filenames of files that are smaller than the size specified by `size_threshold`. 4. Remove all the collected files from the directory. 5. Print the name of each file that gets removed in the format: \\"Deleted <filename>\\". You are required to use the `os` module\'s functions: `os.remove`, `os.listdir`, `os.getcwd`, `os.chdir`, and `os.path.getsize`.","solution":"import os def remove_small_files(directory=None, size_threshold=1024): Removes files in the specified directory that are smaller than the size threshold. Parameters: - directory: str (default is None); the directory to process. - size_threshold: int (default is 1024); size threshold in bytes to consider for removal. # Use current working directory if directory is None if directory is None: directory = os.getcwd() else: os.chdir(directory) # List all files in the specified directory for filename in os.listdir(directory): filepath = os.path.join(directory, filename) if os.path.isfile(filepath) and os.path.getsize(filepath) < size_threshold: os.remove(filepath) print(f\\"Deleted {filename}\\")"},{"question":"You are required to write a Python function named `encode_message` that encodes a given text message using a simple Caesar cipher. The function should shift each letter in the input string by a given number of positions down the alphabet. The function should use the following parameters: - `message`: The input string that needs to be encoded. - `shift`: The number of positions each letter in the `message` should be shifted. The function should follow these steps: 1. Convert the entire `message` to lowercase. 2. Iterate through each character in the `message`. 3. If the character is a letter, shift it by `shift` positions. If the shift goes past \'z\', it should wrap around to the beginning of the alphabet. 4. If the character is not a letter, leave it unchanged. 5. Return the encoded message as a string. You can assume that the `shift` will always be a non-negative integer. Here is a sample function signature for your reference: ```python def encode_message(message, shift): # Your code here pass ``` Example usage: ```python print(encode_message(\\"hello\\", 3)) # Output: \\"khoor\\" print(encode_message(\\"xyz\\", 2)) # Output: \\"zab\\" print(encode_message(\\"a1b2c3\\", 2)) # Output: \\"c1d2e3\\" ``` Ensure you handle the wrapping of letters properly, and non-letter characters should remain unchanged in the output.","solution":"def encode_message(message, shift): Encode the given message using a Caesar cipher with the given shift. Parameters: - message: str: The input string that needs to be encoded. - shift: int: The number of positions each letter in the `message` should be shifted. Returns: - str: The encoded message. encoded_chars = [] for char in message.lower(): if char.isalpha(): shifted = (ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\') encoded_chars.append(chr(shifted)) else: encoded_chars.append(char) return \'\'.join(encoded_chars)"},{"question":"You are given a dataset containing information on various products sold by an e-commerce store. Each product belongs to a category, has a price, and a rating provided by customers. For a marketing campaign, your task is to analyze the products and identify the top products based on their ratings for each category. Using the `pandas` library, you need to implement a function called `get_top_rated_products` which will perform the following steps: 1. Read the dataset from a given file path using `pandas.read_csv`. 2. Group the products by category. 3. Within each category, sort the products based on their ratings in descending order. 4. Select the top N products per category. 5. Return the result as a DataFrame, with a specified number of top products per category. **Function Prototype:** ```python def get_top_rated_products(file_path: str, top_n: int) -> pd.DataFrame: Identifies the top N rated products in each category from the dataset. Parameters: file_path (str): The path to the CSV file containing product data. top_n (int): The number of top-rated products to return for each category. Returns: pd.DataFrame: A DataFrame containing the top-rated products for each category. pass ``` **Steps to Implement the Function:** 1. Load the data from the given CSV file into a DataFrame. 2. Group the products by the \'Category\' column. 3. Sort the products within each group by the \'Rating\' column in descending order. 4. Apply a transformation to each group to return only the top N products using `pandas.GroupBy.head`. 5. Return the final DataFrame containing the top-rated products for each category.","solution":"import pandas as pd def get_top_rated_products(file_path: str, top_n: int) -> pd.DataFrame: Identifies the top N rated products in each category from the dataset. Parameters: file_path (str): The path to the CSV file containing product data. top_n (int): The number of top-rated products to return for each category. Returns: pd.DataFrame: A DataFrame containing the top-rated products for each category. # Load the data from the CSV file into a DataFrame df = pd.read_csv(file_path) # Group by \'Category\' and sort by \'Rating\' within each group, then take the top N entries top_rated = df.groupby(\'Category\', group_keys=False).apply(lambda x: x.nlargest(top_n, \'Rating\')) return top_rated"},{"question":"In this exercise, you are required to work with lists and dictionaries to simulate a grade book. You will write a function named `grade_statistics(names, scores)` that takes in two lists: `names` and `scores`. Each element in `names` represents a student\'s name, and the corresponding element in `scores` represents that student\'s score. Your function should calculate and return a dictionary with the following statistics about the scores: - `average`: The average score of all the students. - `highest_score`: The name and score of the student with the highest score. - `lowest_score`: The name and score of the student with the lowest score. - `scores_over_70`: A sorted list of names of the students who scored above 70. Here are the steps for the task: 1. Calculate the average score of all students. 2. Determine the student with the highest score and the highest score itself. 3. Determine the student with the lowest score and the lowest score itself. 4. Create a sorted list of names of the students who scored above 70. **Function Signature:** ```python def grade_statistics(names: list[str], scores: list[int]) -> dict: pass ``` **Example:** ```python names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eva\\"] scores = [88, 75, 92, 68, 81] result = grade_statistics(names, scores) print(result) # Expected output: # { # \\"average\\": 80.8, # \\"highest_score\\": {\\"name\\": \\"Charlie\\", \\"score\\": 92}, # \\"lowest_score\\": {\\"name\\": \\"David\\", \\"score\\": 68}, # \\"scores_over_70\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Eva\\"] # } ```","solution":"def grade_statistics(names, scores): Returns grade statistics based on the provided names and scores. if not names or not scores or len(names) != len(scores): return {} average_score = sum(scores) / len(scores) highest_index = scores.index(max(scores)) lowest_index = scores.index(min(scores)) highest_score = {\\"name\\": names[highest_index], \\"score\\": scores[highest_index]} lowest_score = {\\"name\\": names[lowest_index], \\"score\\": scores[lowest_index]} scores_over_70 = [names[i] for i in range(len(scores)) if scores[i] > 70] scores_over_70.sort() return { \\"average\\": average_score, \\"highest_score\\": highest_score, \\"lowest_score\\": lowest_score, \\"scores_over_70\\": scores_over_70 }"},{"question":"You are tasked with creating a file synchronization utility using Python to ensure that files in a source directory are copied to a target directory. The utility must maintain the same directory structure and only copy files that have changed. # Function Requirements Create a function named `sync_directories(source, target)` that performs the following actions: 1. Traverse through the `source` directory and identify all files and subdirectories. 2. For each file in the `source` directory: - Check if the file exists in the corresponding path in the `target` directory. - If the file does not exist or has different content (by comparing file hashes), copy the file from `source` to `target` maintaining the directory structure. 3. If directories and subdirectories in the `source` do not exist in the `target`, create them. 4. Print the path of each file that is copied. # Constraints - The function should use the `os` and `shutil` modules. - Assume that `source` and `target` are both absolute paths. - You can assume that both `source` and `target` directories exist at the beginning. - For simplicity, do not handle symbolic links or special file types, only regular files and directories. # Example Usage ```python sync_directories(\'/path/to/source\', \'/path/to/target\') ``` In this example, all files in `/path/to/source` that do not exist in `/path/to/target` or have different content will be copied accordingly, and the paths of copied files will be printed.","solution":"import os import shutil import hashlib def file_hash(filepath): Generate a hash for a file to compare contents hash_func = hashlib.md5() with open(filepath, \'rb\') as f: for chunk in iter(lambda: f.read(4096), b\\"\\"): hash_func.update(chunk) return hash_func.hexdigest() def sync_directories(source, target): Sync directories from source to target by copying only changed or new files. for root, dirs, files in os.walk(source): # Construct the target path for the current root directory. target_root = os.path.join(target, os.path.relpath(root, source)) if not os.path.exists(target_root): os.makedirs(target_root) for file in files: source_file = os.path.join(root, file) target_file = os.path.join(target_root, file) if not os.path.exists(target_file) or file_hash(source_file) != file_hash(target_file): shutil.copy2(source_file, target_file) print(f\\"Copied: {source_file} to {target_file}\\")"},{"question":"You are required to write a Python function that calculates the longest common subsequence (LCS) of two strings. The function should use a dynamic programming approach to solve the problem efficiently. The function should be named `longest_common_subsequence`. It should take two parameters: 1. `text1` (str): The first string. 2. `text2` (str): The second string. Your function should create a 2D array (list of lists) to store the lengths of LCS solutions for substrings of `text1` and `text2`. Initially, the array should be filled with zeros. The size of this array should be `(len(text1) + 1) x (len(text2) + 1)`. The function should then iterate over each character in both strings. If a character from `text1` matches a character from `text2`, the function should update the corresponding cell in the 2D array to be one more than the value in the cell diagonally above and to the left. If the characters do not match, the function should update the cell to be the maximum value of the cell directly above or the cell directly to the left. Finally, the function should return the value in the bottom-right cell of the 2D array, which represents the length of the LCS of `text1` and `text2`. Here\'s the signature for the function you need to implement: ```python def longest_common_subsequence(text1, text2): pass ``` Constraints: - The input strings `text1` and `text2` will have a length of at least 1 and at most 1000. - The function should aim to use O(m * n) time complexity, where `m` is the length of `text1` and `n` is the length of `text2`. Example: ```python assert longest_common_subsequence(\\"abcde\\", \\"ace\\") == 3 # LCS is \\"ace\\" assert longest_common_subsequence(\\"abc\\", \\"abc\\") == 3 # LCS is \\"abc\\" assert longest_common_subsequence(\\"abc\\", \\"def\\") == 0 # LCS is \\"\\" ``` Ensure your solution handles edge cases such as empty strings or strings without common subsequences.","solution":"def longest_common_subsequence(text1, text2): Returns the length of the longest common subsequence between text1 and text2. m, n = len(text1), len(text2) # Create a 2D array to store the lengths of LCS solutions of substrings dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of LCS is in the bottom-right cell of the dp array return dp[m][n]"},{"question":"You are tasked with implementing an expense tracker that helps users to record and manage their expenses. The tracker will save data into an SQLite database. Your task is to write a function `record_expense(db_name: str, expense_date: str, category: str, amount: float) -> None` that performs the following actions: 1. Connect to an SQLite database named `<db_name>.db`, where `<db_name>` is provided as a function argument. 2. Ensure there is a table named `expenses` with the following schema: - `id` (Primary Key, Integer) - `date` (Text) - `category` (Text) - `amount` (Real) 3. Insert a new expense record into the `expenses` table with the provided `expense_date`, `category`, and `amount`. 4. If the table does not exist, the function should create it before attempting to insert the expense record. Here is a partial implementation to help you get started: ```python import sqlite3 def record_expense(db_name: str, expense_date: str, category: str, amount: float) -> None: conn = sqlite3.connect(f\\"{db_name}.db\\") c = conn.cursor() # Create table if it does not exist c.execute(\'\'\'CREATE TABLE IF NOT EXISTS expenses ( id INTEGER PRIMARY KEY AUTOINCREMENT, date TEXT NOT NULL, category TEXT NOT NULL, amount REAL NOT NULL)\'\'\') # Insert the expense record c.execute(\\"INSERT INTO expenses (date, category, amount) VALUES (?, ?, ?)\\", (expense_date, category, amount)) # Commit the changes and close the connection conn.commit() conn.close() # Example usage: # record_expense(\\"user_expenses\\", \\"2023-10-12\\", \\"Groceries\\", 125.50) ``` Write and test the `record_expense` function based on the above requirements. Ensure the function handles any exceptions that may occur during database operations appropriately.","solution":"import sqlite3 import os def record_expense(db_name: str, expense_date: str, category: str, amount: float) -> None: try: conn = sqlite3.connect(f\\"{db_name}.db\\") c = conn.cursor() # Create table if it does not exist c.execute(\'\'\'CREATE TABLE IF NOT EXISTS expenses ( id INTEGER PRIMARY KEY AUTOINCREMENT, date TEXT NOT NULL, category TEXT NOT NULL, amount REAL NOT NULL)\'\'\') # Insert the expense record c.execute(\\"INSERT INTO expenses (date, category, amount) VALUES (?, ?, ?)\\", (expense_date, category, amount)) # Commit the changes and close the connection conn.commit() except sqlite3.Error as e: print(f\\"An error occurred: {e}\\") finally: conn.close() # Example usage: # record_expense(\\"user_expenses\\", \\"2023-10-12\\", \\"Groceries\\", 125.50)"},{"question":"You are tasked with creating a system that can count the number of words in a passage of text and return the most frequent words in descending order. You need to write a function `word_frequency(text, n)` that processes the given text and returns a list of the top `n` most frequent words. **Function: `word_frequency(text, n)`** - **Parameters**: - `text` (str): A string containing the passage of text. - `n` (int): The number of top frequent words to return. - **Returns**: - A list of tuples, where each tuple contains: - `word` (str): A word from the passage. - `frequency` (int): The number of times the word appears in the passage. To achieve this, follow these steps: 1. Convert the text to lowercase to ensure the counting is case-insensitive. 2. Remove any punctuation from the text. 3. Split the text into individual words. 4. Count the frequency of each word. 5. Sort the words by their frequency in descending order. 6. Return the top `n` most frequent words along with their frequencies. Example: ```python text = \\"Hello world! Welcome to the world of programming. Programming is fun.\\" n = 2 word_frequency(text, n) # Output: [(\'world\', 2), (\'programming\', 2)] ```","solution":"def word_frequency(text, n): Returns the top `n` most frequent words in the given text. import string from collections import Counter # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split the text into individual words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Get the top n most common words most_common_words = word_counts.most_common(n) return most_common_words"},{"question":"**Title: Roman Numeral to Integer Conversion** **Overview:** In this problem, you need to implement a function called `roman_to_integer` which converts a Roman numeral string into its corresponding integer value. Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. **Context:** Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not “IIII”. Instead, the number four is written as “IV”. Similarly, nine is written as “IX”. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. **Function Signature:** ```python def roman_to_integer(s: str) -> int: ``` **Parameters:** - `s`: A string representing a valid Roman numeral (e.g., \\"MCMXCIV\\"). **Returns:** - An integer that corresponds to the Roman numeral provided. **Requirements:** 1. The function should handle all the defined Roman numeral symbols and possible combinations. 2. The input string will be a valid Roman numeral within the range from 1 to 3999. **Example:** ```python roman_numeral = \\"MCMXCIV\\" result = roman_to_integer(roman_numeral) print(result) # Output: 1994 ``` **Hints:** - Use a dictionary to map Roman numerals to their integer values. - Iterate through the string from left to right, adding the value of each symbol to the total, and adjusting for subtraction cases where a smaller numeral precedes a larger numeral (e.g., IV or IX).","solution":"def roman_to_integer(s: str) -> int: Convert a Roman numeral string to its corresponding integer value. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Given a list of integers, create a function to determine if there exists a subset whose sum is equal to a given target value. The function should return: bool: True if there exists such a subset, False otherwise. You should write self-contained code starting with: ``` def has_subset_sum(nums, target): ```","solution":"def has_subset_sum(nums, target): Determines if there exists a subset of nums that sums to target. :param nums: List of integers :param target: Integer target value :return: True if there exists a subset of nums whose sum is equal to target, False otherwise. n = len(nums) subset = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): subset[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j < nums[i - 1]: subset[i][j] = subset[i - 1][j] else: subset[i][j] = subset[i - 1][j] or subset[i - 1][j - nums[i - 1]] return subset[n][target]"},{"question":"You are given a list of strings containing names of employees. Your task is to create a function `group_employees` that groups these names based on the first letter of each name and then returns a dictionary. The keys of the dictionary should be the first letters and the values should be lists of names that start with that letter. # Function Signature ```python def group_employees(names): Groups employee names based on the first letter. Arguments: names -- list of strings, where each string is an employee name Returns: dict -- dictionary where keys are first letters and values are lists of names starting with that letter ``` # Inputs - `names` (list): A list of strings, each representing an employee name. # Outputs - `grouped_names` (dict): A dictionary where each key is a first letter and the value is a list of names starting with that letter. # Example ```python # Example input employee_names = [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Edward\', \'Frank\', \'George\', \'Hannah\'] # Example output # { # \'A\': [\'Alice\'], # \'B\': [\'Bob\'], # \'C\': [\'Charlie\'], # \'D\': [\'David\'], # \'E\': [\'Edward\'], # \'F\': [\'Frank\'], # \'G\': [\'George\'], # \'H\': [\'Hannah\'] # } ``` # Constraints - The function should be case-insensitive, i.e., treat names starting with \'a\' the same as names starting with \'A\'. - The input list may contain names with different cases and some names may be repeated. - The function should handle an empty input list and return an empty dictionary in that case. Ensure your implementation correctly groups the names, is case-insensitive, and handles edge cases effectively.","solution":"def group_employees(names): Groups employee names based on the first letter. Arguments: names -- list of strings, where each string is an employee name Returns: dict -- dictionary where keys are first letters and values are lists of names starting with that letter grouped_names = {} for name in names: key = name[0].upper() if key not in grouped_names: grouped_names[key] = [] grouped_names[key].append(name) return grouped_names"},{"question":"Problem Statement You are developing a Python command-line utility that backs up files from a source directory to a destination directory. The backup process should only copy files that have been modified since the last backup. To facilitate this, you will implement a function called `backup_files` that uses file timestamps to determine which files need to be copied. Additionally, the function should create a log file listing all the files that were backed up along with their respective backup timestamps. # Tasks: 1. Implement the function `backup_files(source_dir, dest_dir, log_file)` which performs the following actions: - Iterate through all files in the `source_dir`. - For each file, check its last modified timestamp. - Compare the file\'s timestamp with the corresponding file in the `dest_dir`. - If the file in `source_dir` is newer, copy it to the `dest_dir`. - Record the file name and the timestamp of the backup in the log file. # Requirements: - Use the `os` module to handle directory and file operations. - Use the `shutil` module to copy files. - Use the `time` module to handle and format timestamps. - Handle edge cases, such as missing directories or files, and permission issues. - Ensure the log file is created if it does not exist and append to it if it does. # Constraints: - Assume `source_dir` and `dest_dir` are valid directory paths. - The function should only operate on regular files, not subdirectories or special files. - Use the format `\\"YYYY-MM-DD HH:MM:SS\\"` for timestamps in the log file. ```python def backup_files(source_dir, dest_dir, log_file): This function backs up files from source_dir to dest_dir, only copying files that have been modified since the last backup. It records each backed-up file with the backup timestamp in a log file. :param source_dir: The directory containing files to back up :param dest_dir: The destination directory where files will be backed up :param log_file: The file where backup operations will be logged :return: None pass ``` **End of Problem Description**","solution":"import os import shutil import time def backup_files(source_dir, dest_dir, log_file): This function backs up files from source_dir to dest_dir, only copying files that have been modified since the last backup. It records each backed-up file with the backup timestamp in a log file. :param source_dir: The directory containing files to back up :param dest_dir: The destination directory where files will be backed up :param log_file: The file where backup operations will be logged :return: None # Ensure the destination directory exists os.makedirs(dest_dir, exist_ok=True) with open(log_file, \\"a\\") as log: for dirpath, _, filenames in os.walk(source_dir): for filename in filenames: src_file = os.path.join(dirpath, filename) relative_path = os.path.relpath(src_file, source_dir) dest_file = os.path.join(dest_dir, relative_path) # Ensure the destination subdirectory exists dest_subdir = os.path.dirname(dest_file) os.makedirs(dest_subdir, exist_ok=True) # Copy the file if it is newer or doesn\'t exist at the destination if not os.path.exists(dest_file) or os.path.getmtime(src_file) > os.path.getmtime(dest_file): shutil.copy2(src_file, dest_file) timestamp = time.strftime(\\"%Y-%m-%d %H:%M:%S\\", time.localtime(os.path.getmtime(src_file))) log.write(f\\"{relative_path} backed up at {timestamp}n\\")"},{"question":"# Context: In this problem, you are required to create a function called `integer_to_roman()` that converts an integer to a Roman numeral. The function should accurately represent the Roman numeral equivalent of any integer between 1 and 3999. Roman numerals are represented by the following characters: \'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\'. # Function Signature: ```python def integer_to_roman(num): # Your solution here pass ``` # Inputs: - `num` (int): An integer between 1 and 3999, inclusive. # Output: - `roman` (str): A string representing the Roman numeral equivalent of the input integer. # Constraints: - The function must handle all integers between 1 and 3999. - The Roman numeral system uses seven symbols: * I: 1 * V: 5 * X: 10 * L: 50 * C: 100 * D: 500 * M: 1000 - Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \\"IIII\\". Instead, the number four is written as \\"IV\\". The number nine is written as \\"IX\\". There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. # Example Usage: ```python # Example 1 input_num = 58 output = integer_to_roman(input_num) print(output) # Expected: \\"LVIII\\" # Example 2 input_num = 1994 output = integer_to_roman(input_num) print(output) # Expected: \\"MCMXCIV\\" ``` # Additional Notes: - You can assume that the input will always be a valid integer within the specified range. - Consider creating a list of tuples with the Roman numeral patterns and values to map the integers efficiently. - The function should be efficient in both time and space complexity. - Implement the function `integer_to_roman()` that meets the above requirements.","solution":"def integer_to_roman(num): Converts an integer to a Roman numeral. Args: num (int): An integer between 1 and 3999, inclusive. Returns: str: The Roman numeral representation of the provided integer. roman_numerals = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] result = [] for (value, symbol) in roman_numerals: while num >= value: num -= value result.append(symbol) return \'\'.join(result)"},{"question":"Given a grid of integers, each cell contains a value representing a certain elevation. You are required to determine the maximum elevation difference between any two adjacent cells in the grid. Adjacent cells are those that share a common edge (left, right, top, bottom). If the grid is empty or contains only one cell, the function should return 0, as there would be no adjacent cells to compare. The function should output: int: The maximum elevation difference between any two adjacent cells in the grid. You should write self-contained code starting with: ```python def max_elevation_difference(grid): ```","solution":"def max_elevation_difference(grid): Calculates the maximum elevation difference between any two adjacent cells in a grid. :param grid: List of List of integers representing the grid. :return: Integer representing the maximum elevation difference. if not grid or not grid[0]: return 0 max_diff = 0 rows, cols = len(grid), len(grid[0]) for r in range(rows): for c in range(cols): if r > 0: max_diff = max(max_diff, abs(grid[r][c] - grid[r-1][c])) if r < rows - 1: max_diff = max(max_diff, abs(grid[r][c] - grid[r+1][c])) if c > 0: max_diff = max(max_diff, abs(grid[r][c] - grid[r][c-1])) if c < cols - 1: max_diff = max(max_diff, abs(grid[r][c] - grid[r][c+1])) return max_diff"},{"question":"# Problem Description You are given a 2D list (list of lists) representing a rectangular matrix, where each sublist represents a row of the matrix. Your task is to write a Python function named `transpose_matrix` that takes a 2D list as input and returns the transpose of this matrix. The transpose of a matrix is obtained by swapping its rows with its columns. For instance, if the original matrix is: ``` 1 2 3 4 5 6 ``` The transpose will be: ``` 1 4 2 5 3 6 ``` # Function Signature Your function should be named `transpose_matrix` and have the following signature: ```python def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` # Input: - `matrix`: a 2D list of integers, where each sublist represents a row of the matrix. The matrix is guaranteed to have at least one row and one column. # Output: - The function should return a new 2D list representing the transpose of the input matrix. # Example: ```python # Example input matrix = [ [1, 2, 3], [4, 5, 6] ] # Expected output # [ # [1, 4], # [2, 5], # [3, 6] # ] # Another example input matrix = [ [1, 2], [3, 4], [5, 6] ] # Expected output # [ # [1, 3, 5], # [2, 4, 6] # ] ``` **Constraints:** 1. The input matrix will have at least one row and one column. 2. Elements of the matrix will be integers. **Note:** You do not need to handle any input that is not a well-formed matrix.","solution":"def transpose_matrix(matrix): Returns the transpose of the input 2D list (matrix). # Use list comprehension to transpose the matrix return [[matrix[row][col] for row in range(len(matrix))] for col in range(len(matrix[0]))]"},{"question":"You are given a list of tuples representing student records. Each tuple contains the student\'s name (a string), their grade (an integer from 0 to 100), and their student ID (a unique integer). Implement a function `process_students(records)` that takes `records` as an argument and performs the following tasks: 1. Calculate the average grade of all students. 2. Identify the student(s) with the highest grade and the lowest grade. 3. Sort the student records by their names in alphabetical order. The function should return a dictionary with the following keys and corresponding values: - `\'average_grade\'`: The average grade of all students (rounded to 2 decimal places). - `\'top_student(s)\'`: A list of tuples representing the student(s) with the highest grade. - `\'bottom_student(s)\'`: A list of tuples representing the student(s) with the lowest grade. - `\'sorted_students\'`: A new list of tuples representing the sorted student records. **Requirements**: - Utilize list comprehensions and dictionary comprehensions where possible. - Ensure the function handles edge cases gracefully, such as an empty list of records. **Example**: ```python records = [ (\\"Alice\\", 91, 1001), (\\"Bob\\", 85, 1002), (\\"Charlie\\", 91, 1003), (\\"David\\", 73, 1004) ] result = process_students(records) # Possible Output: # { # \'average_grade\': 85.0, # \'top_student(s)\': [(\'Alice\', 91, 1001), (\'Charlie\', 91, 1003)], # \'bottom_student(s)\': [(\'David\', 73, 1004)], # \'sorted_students\': [(\'Alice\', 91, 1001), (\'Bob\', 85, 1002), (\'Charlie\', 91, 1003), (\'David\', 73, 1004)] # } ```","solution":"def process_students(records): if not records: return { \'average_grade\': 0, \'top_student(s)\': [], \'bottom_student(s)\': [], \'sorted_students\': [] } average_grade = round(sum(grade for _, grade, _ in records) / len(records), 2) highest_grade = max(records, key=lambda x: x[1])[1] lowest_grade = min(records, key=lambda x: x[1])[1] top_students = [student for student in records if student[1] == highest_grade] bottom_students = [student for student in records if student[1] == lowest_grade] sorted_students = sorted(records, key=lambda x: x[0]) return { \'average_grade\': average_grade, \'top_student(s)\': top_students, \'bottom_student(s)\': bottom_students, \'sorted_students\': sorted_students }"},{"question":"You are required to implement a function that evaluates the performance of a machine learning model using cross-validation. The goal is to calculate the average accuracy of a logistic regression model on a given dataset. Write a function named `evaluate_model` that accepts the following parameters: - `X_data`: A DataFrame containing the predictor variables. - `y_data`: A Series or array containing the target values. - `folds`: An integer specifying the number of folds for cross-validation. The function should: 1. Utilize the `LogisticRegression` class from `sklearn.linear_model` as the model. 2. Apply the `cross_val_score` function from `sklearn.model_selection` to perform cross-validation. 3. Return the average accuracy across all folds. # Example: ```python import pandas as pd import numpy as np data = { \'A\': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \'B\': [5, 4, 3, 2, 1, 0, 1, 2, 3, 4], \'C\': [1, 2, 1, 2, 1, 2, 1, 2, 1, 2] } X_data = pd.DataFrame(data) y_data = pd.Series([0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) # We want to perform 5-fold cross-validation average_accuracy = evaluate_model(X_data, y_data, 5) print(average_accuracy) ``` In this example, your function should return the average accuracy of the logistic regression model. # Libraries to be used: - `sklearn.linear_model.LogisticRegression` - `sklearn.model_selection.cross_val_score`","solution":"import pandas as pd from sklearn.linear_model import LogisticRegression from sklearn.model_selection import cross_val_score def evaluate_model(X_data, y_data, folds): Evaluates the performance of a logistic regression model using cross-validation. Parameters: X_data (pd.DataFrame): Predictor variables. y_data (pd.Series or array): Target values. folds (int): Number of folds for cross-validation. Returns: float: Average accuracy across all folds. model = LogisticRegression() accuracy_scores = cross_val_score(model, X_data, y_data, cv=folds, scoring=\'accuracy\') return accuracy_scores.mean()"},{"question":"Write a function called `generate_prime_matrix` that generates a 2D matrix of specified dimensions (n x m), filled with consecutive prime numbers. The function should take two parameters: `n` (number of rows) and `m` (number of columns), and return the matrix. # Detailed Requirements: 1. Begin filling the matrix from the top-left corner, and continue filling it row by row. 2. The smallest prime number (2) should be the first element of the matrix. 3. If a prime number calculated is larger and cannot fit in the current matrix cell, it should be excluded, and the next prime should be attempted. 4. Use a helper function called `next_prime` to calculate the next prime number in sequence. # Function Signature ```python def generate_prime_matrix(n: int, m: int) -> list: # your code here ``` # Example Usage ```python matrix = generate_prime_matrix(3, 3) for row in matrix: print(row) ``` # Example Output ``` [ [2, 3, 5], [7, 11, 13], [17, 19, 23] ] ``` # Hints - Use a helper function `is_prime` that checks if a given number is prime. - Use a helper function `next_prime` to generate the next prime number after a given number.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def next_prime(current_prime): num = current_prime + 1 while not is_prime(num): num += 1 return num def generate_prime_matrix(n, m): matrix = [] prime = 2 for i in range(n): row = [] for j in range(m): row.append(prime) prime = next_prime(prime) matrix.append(row) return matrix"},{"question":"In this problem, you need to write a function `unique_word_count` that computes the number of unique words in a given string. The input string will be a sentence, and the words will be separated by spaces. The function should remove any punctuation and consider words case-insensitively when counting unique words. Here\'s the signature of the function: ```python def unique_word_count(sentence): A function that finds the number of unique words in a sentence. Args: sentence (string): A string representing a sentence. Returns: int: The number of unique words in the sentence. ``` **Requirements:** 1. You need to use the `re` module to remove punctuation characters from the sentence. 2. The function should consider words case-insensitively, meaning \\"Word\\" and \\"word\\" should be counted as the same unique word. 3. Return the count of unique words found in the input sentence. **Example:** Given the sentence: \\"Hello, hello! How are you? You look great today.\\" After removing punctuation and converting to lowercase: - The cleaned sentence would be \\"hello hello how are you you look great today\\" - The unique words are: \\"hello\\", \\"how\\", \\"are\\", \\"you\\", \\"look\\", \\"great\\", \\"today\\" The function should return: `7` **Hint:** Use `re.sub` to remove punctuation and `set` to extract unique words after converting them to lowercase.","solution":"import re def unique_word_count(sentence): A function that finds the number of unique words in a sentence. Args: sentence (string): A string representing a sentence. Returns: int: The number of unique words in the sentence. # Remove punctuation using regex sentence = re.sub(r\'[^ws]\', \'\', sentence) # Convert the sentence to lowercase and split into words words = sentence.lower().split() # Create a set of unique words unique_words = set(words) # Return the count of unique words return len(unique_words)"},{"question":"You are required to develop a function called `circularPattern` that utilizes the `turtle` graphics library in Python to draw a circular pattern composed of smaller circles. This exercise is designed to enhance your understanding of iterative drawing with the `turtle` library, particularly focusing on using loops and the `turtle.circle` method. The function signature should be: ```python def circularPattern(radius, numberOfCircles): ... ``` Parameters: - `radius` (int): The radius of each small circle in the pattern. - `numberOfCircles` (int): The number of small circles to be drawn in the pattern. Requirements: 1. Use a loop to draw the specified number of circles. 2. Each small circle should be drawn such that their centers lie on the circumference of an imaginary larger circle. 3. Calculate the angle between each successive circle, dividing 360 degrees by the `numberOfCircles`. 4. After drawing each small circle, turn the turtle by the calculated angle to position it correctly for the next circle. Your task: Implement the `circularPattern` function using the turtle methods as described.","solution":"import turtle def circularPattern(radius, numberOfCircles): Draws a circular pattern composed of smaller circles using the turtle graphics library. Parameters: radius (int): The radius of each small circle. numberOfCircles (int): The number of small circles to draw in the pattern. turtle.speed(0) angle = 360 / numberOfCircles for _ in range(numberOfCircles): turtle.circle(radius) turtle.left(angle) turtle.hideturtle() turtle.done()"},{"question":"You are tasked with developing a function to generate a random password based on given criteria. The function will create a password that includes a specified number of uppercase letters, lowercase letters, digits, and special characters. Your task is to create a function named `generate_password` that takes the following parameters: 1. `uppercase_count`: An integer representing the number of uppercase letters in the password. 2. `lowercase_count`: An integer representing the number of lowercase letters in the password. 3. `digit_count`: An integer representing the number of digits in the password. 4. `special_count`: An integer representing the number of special characters in the password. Your function should perform the following steps: 1. Generate the specified number of uppercase letters, lowercase letters, digits, and special characters. 2. Combine all characters and shuffle them to ensure the password is randomized. 3. Return the generated password as a string. You may assume that the necessary libraries have been imported and are available for use. **Example Usage**: ```python password = generate_password(4, 3, 2, 1) print(password) # Output example: \'A1bC@dE2f\' ``` **Constraints**: - The function must handle edge cases where any of the counts are zero. - The function should ensure that the returned password has a length equal to the sum of `uppercase_count`, `lowercase_count`, `digit_count`, and `special_count`. - Special characters to be used: `!@#%^&*()` - Use the `random` library for generating and shuffling characters.","solution":"import random import string def generate_password(uppercase_count, lowercase_count, digit_count, special_count): Generates a random password based on the specified counts of character types. Parameters: - uppercase_count (int): The number of uppercase letters. - lowercase_count (int): The number of lowercase letters. - digit_count (int): The number of digits. - special_count (int): The number of special characters. Returns: - str: The generated password. special_characters = \'!@#%^&*()\' password_chars = ( random.choices(string.ascii_uppercase, k=uppercase_count) + random.choices(string.ascii_lowercase, k=lowercase_count) + random.choices(string.digits, k=digit_count) + random.choices(special_characters, k=special_count) ) random.shuffle(password_chars) return \'\'.join(password_chars)"},{"question":"Write a function named `generate_fibonacci_sequence` that generates the first `n` numbers in the Fibonacci sequence and outputs them as a list. The Fibonacci sequence is defined as follows: - The first two numbers are 0 and 1. - Each subsequent number is the sum of the previous two numbers. The function signature is as follows: ```python def generate_fibonacci_sequence(n: int) -> list: pass ``` Input: - `n`: An integer representing the number of Fibonacci numbers to generate. Output: - A list containing the first `n` numbers in the Fibonacci sequence. # Constraints: - `1 <= n <= 50` Example: ```python # Example 1 input: generate_fibonacci_sequence(5) output: [0, 1, 1, 2, 3] # Example 2 input: generate_fibonacci_sequence(10) output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` Ensure your function handles the smallest and largest values within the constraint and returns a list of the correct length.","solution":"def generate_fibonacci_sequence(n: int) -> list: Generates the first n numbers in the Fibonacci sequence. Parameters: n (int): Number of Fibonacci numbers to generate Returns: list: List containing the first n numbers in the Fibonacci sequence if n <= 0: return [] fibonacci_sequence = [0, 1] for i in range(2, n): next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) return fibonacci_sequence[:n]"},{"question":"You are required to design a function in Python that determines whether a given string matches a specified pattern. The pattern matching should support \'?\' and \'*\' wildcards, where: - \'?\' matches any single character. - \'*\' matches any sequence of characters (including the empty sequence). The function you need to implement is called `isMatch`, and it should take two inputs: the first is the string ( s ) and the second is the pattern ( p ). The function should return `True` if the string matches the pattern and `False` otherwise. # Requirements: 1. Handle all possible corner cases, such as empty strings and patterns. 2. Ensure the solution is efficient and can handle reasonably long strings and patterns. # Examples: 1. `isMatch(\\"aa\\", \\"a\\")` should return `False` because a single \'a\' does not match the string \\"aa\\". 2. `isMatch(\\"aa\\", \\"*\\")` should return `True` because \'*\' can match any sequence, including \'aa\'. 3. `isMatch(\\"cb\\", \\"?a\\")` should return `False` because \'?\' matches \'c\' but \'a\' does not match \'b\'. 4. `isMatch(\\"adceb\\", \\"*a*b\\")` should return `True` because the sequence \'a\', followed by any character sequence, followed by \'a\', followed by any character sequence, followed by \'b\' matches \\"adceb\\". 5. `isMatch(\\"acdcb\\", \\"a*c?b\\")` should return `False` because \'*\' matches the sequence \\"cd\\", but \'c\' does not match \'d\'. # Function Signature: ```python def isMatch(s, p): # Your implementation here ```","solution":"def isMatch(s, p): Returns True if the string s matches the pattern p. The pattern p uses \'?\' to match any single character and \'*\' to match any sequence of characters. # dp[i][j] will be True if the first i characters in s match the first j characters in p dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] # Empty pattern matches empty string dp[0][0] = True # Handle patterns with \'*\' at the beginning for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] # Build the dp array for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif p[j - 1] == \'?\' or s[i - 1] == p[j - 1]: dp[i][j] = dp[i - 1][j - 1] return dp[len(s)][len(p)]"},{"question":"You are assigned to implement a function that simulates a simple text-based store scenario where a player enters a store and can choose to interact with items on sale. The function should incorporate randomness to simulate the availability of items and apply discounts occasionally. Specifically, you need to implement a function named `store_scenario()` that handles the following: 1. Presents the player with a list of items on sale and their prices. 2. Allows the player to choose whether to buy an item, ask for a discount, or leave the store. 3. Incorporate random elements to simulate item stock levels and the possibility of receiving a discount. You must use the `random.choice` and `random.uniform` functions from the random library as part of the implementation. # Function Definition ```python def store_scenario(): pass ``` # Input Requirements: - No input parameters are required for this function. # Expected Function Behavior: 1. The function should print an initial narrative, presenting a list of items with prices. 2. The player\'s choice should be handled as follows: - If the player chooses to buy an item, check if the item is in stock using `random.choice`. - If the player asks for a discount, use `random.uniform` to potentially lower the item\'s price and print the new price. - If the player chooses to leave, print a farewell message. # Example Execution: ```python store_scenario() ``` Sample Output: ``` You enter the quaint little store on the corner. The shopkeeper nods at you and you see the following items for sale: 1. Sword - 50 2. Shield - 40 3. Potion - 10 What would you like to do? 1. Buy an item 2. Ask for a discount 3. Leave the store You choose to ask for a discount. The shopkeeper thinks for a moment... Congratulations! You can buy the Sword for 45 now! Do you want to buy it (yes/no)? ``` # Constraints: - Use the `random.choice` and `random.uniform` functions as specified. - Ensure the code handles user input gracefully within the function, including choices made by the player.","solution":"import random def store_scenario(): items = { \\"Sword\\": 50, \\"Shield\\": 40, \\"Potion\\": 10 } in_stock = { \\"Sword\\": random.choice([True, False]), \\"Shield\\": random.choice([True, False]), \\"Potion\\": random.choice([True, False]) } print(\\"You enter the quaint little store on the corner. The shopkeeper nods at you and you see the following items for sale:\\") for item, price in items.items(): stock_status = \\"In Stock\\" if in_stock[item] else \\"Out of Stock\\" print(f\\"{item} - {price} ({stock_status})\\") print(\\"nWhat would you like to do?\\") print(\\"1. Buy an item\\") print(\\"2. Ask for a discount\\") print(\\"3. Leave the store\\") choice = input(\\"Enter your choice (1/2/3): \\") if choice == \'1\': item_to_buy = input(\\"Which item would you like to buy? \\").title() if item_to_buy in items: if in_stock[item_to_buy]: print(f\\"Congratulations! You bought the {item_to_buy} for {items[item_to_buy]}!\\") else: print(f\\"Sorry, the {item_to_buy} is out of stock.\\") else: print(\\"Sorry, we don\'t have that item.\\") elif choice == \'2\': item_to_discount = input(\\"Which item would you like a discount on? \\").title() if item_to_discount in items: discount = random.uniform(5, 25) # Apply a random discount between 5% and 25% discounted_price = round(items[item_to_discount] * (1 - discount / 100), 2) print(f\\"The shopkeeper thinks for a moment...nCongratulations! You can buy the {item_to_discount} for {discounted_price} now!\\") else: print(\\"Sorry, we don\'t have that item.\\") elif choice == \'3\': print(\\"You decide to leave the store. Have a nice day!\\") else: print(\\"Invalid choice, please enter 1, 2, or 3.\\")"},{"question":"Create a function that takes a list of integers and returns the first `n` prime numbers from the list. If there are fewer than `n` prime numbers in the list, return all the prime numbers. The function should be efficient and handle large lists gracefully. The prime-checking algorithm should be optimized to work within reasonable time constraints and not use built-in libraries for prime number generation or checking. The function should follow this signature: ``` def extract_primes(nums: list, n: int) -> list: ``` Example: ``` nums = [3, 12, 5, 7, 8, 14, 17, 19, 23, 4] n = 5 extract_primes(nums, n) -> [3, 5, 7, 17, 19] nums = [10, 15, 18, 20] n = 3 extract_primes(nums, n) -> [] ``` You should write self-contained code without any imports starting with: ``` def extract_primes(nums: list, n: int) -> list: ```","solution":"def extract_primes(nums: list, n: int) -> list: Returns the first `n` prime numbers from the list `nums`. If there are fewer than `n` prime numbers in the list, returns all the prime numbers. Args: nums (list): A list of integers. n (int): The number of prime numbers to return. Returns: list: A list containing the first `n` prime numbers from the input list. def is_prime(num): Check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True primes = [num for num in nums if is_prime(num)] return primes[:n]"},{"question":"# Introduction A Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. The nth Fibonacci number can be defined as: [ F(n) = F(n-1) + F(n-2) ] with the initial values [ F(0) = 0, F(1) = 1 ] # Task Your task is to write a Python function named `nth_fibonacci` that takes an integer `n` and returns the nth Fibonacci number. You are required to use a recursive approach to achieve this. # Requirements 1. Implement the function using recursion. 2. Your function should accept a single integer `n` and return an integer result. 3. Handle the base cases explicitly. # Example ```python nth_fibonacci(5) ``` **Output:** ``` 5 ``` Here\'s an explanation of the example: - F(5) = F(4) + F(3) - F(4) = F(3) + F(2) - F(3) = F(2) + F(1) - F(2) = F(1) + F(0) - F(1) = 1 and F(0) = 0 Therefore, F(5) = 5 # Instructions 1. Define the function `nth_fibonacci(n)`. 2. Implement the base cases: if `n` is 0, return 0; if `n` is 1, return 1. 3. For other values of `n`, return the sum of the function called with `n-1` and `n-2`. 4. Ensure the function correctly handles the input and returns the nth Fibonacci number.","solution":"def nth_fibonacci(n): Returns the nth Fibonacci number using recursion. Parameters: n (int): The position in the Fibonacci sequence (0-indexed). Returns: int: The nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return nth_fibonacci(n-1) + nth_fibonacci(n-2)"},{"question":"You are tasked with creating a function that implements a machine learning pipeline using scikit-learn. The function should automate the process of standardization, splitting the data, and training a linear regression model. The output should include the model\'s RMSE (Root Mean Square Error) on the test set. Here are the specific requirements: 1. **Function Name:** `train_linear_model` 2. **Parameters:** - `df` (pandas DataFrame): The input dataframe containing features and the target column. - `target` (str): The target column name in the dataframe. - `test_size` (float): The proportion of the dataset to include in the test split. - `random_state` (int, optional): Controls the shuffling applied to the data before applying the split. Pass an integer for reproducible output across multiple function calls. 3. **Output:** The RMSE of the linear regression model on the test set. 4. **Requirements:** - Standardize the feature columns using `StandardScaler` from scikit-learn. - Split the data into training and test sets using `train_test_split` from scikit-learn. - Train a linear regression model on the training set. - Calculate and return the RMSE on the test set. # Example If you are given a dataframe `df` with several numerical columns and a target column \\"target_variable\\", you may call the function like this: ```python rmse = train_linear_model(df, \'target_variable\', test_size=0.2, random_state=42) print(rmse) ``` This will output the RMSE of the linear regression model trained on 80% of the data and tested on the remaining 20%.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error import numpy as np def train_linear_model(df, target, test_size, random_state=None): Trains a linear regression model on the given dataframe and computes the RMSE on the test set. Parameters: - df (pandas DataFrame): Input dataframe containing features and target. - target (str): The target column name. - test_size (float): Proportion of the dataset to include in the test split. - random_state (int, optional): Controls the shuffling applied to the data before the split. Returns: - float: The RMSE of the model on the test set. # Split the data into features and target X = df.drop(columns=[target]) y = df[target] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state) # Standardize the feature columns scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Train a linear regression model model = LinearRegression() model.fit(X_train_scaled, y_train) # Make predictions on the test set y_pred = model.predict(X_test_scaled) # Calculate the RMSE rmse = np.sqrt(mean_squared_error(y_test, y_pred)) return rmse"},{"question":"You are given a list of events with start and end times. Your task is to write a function called `maximum_overlapping_events()` that calculates the maximum number of overlapping events at any point in time. Detailed Requirements: 1. **Input:** A list of tuples `events`, where each tuple contains two integers representing the start and end times of an event `(start, end)`. 2. **Output:** An integer representing the maximum number of overlapping events. 3. **Constraints:** - An event can be as short as a single time unit, where `end` is equal to `start`. - Python\'s built-in libraries, such as `heapq`, can be used for maintaining a min-heap to track end times. 4. **Steps to Calculate Maximum Overlapping Events:** - Sort the list of events based on their start times. - Use a min-heap to keep track of the end times of overlapping events. - Traverse through the sorted list of events and use the heap to manage the current set of overlapping events. - For each event, remove all events from the heap that have ended before or by the current event\'s start time. - Add the current event\'s end time to the heap. - The size of the heap after each insertion will give you the number of overlapping events at any given time. - Keep track of the maximum size of the heap encountered during the traversal. Function Definition: ```python from typing import List, Tuple def maximum_overlapping_events(events: List[Tuple[int, int]]) -> int: pass ``` Example: ```python events = [(1, 5), (2, 6), (4, 8), (9, 10)] print(maximum_overlapping_events(events)) # Example output: 3 events = [(1, 2), (2, 3), (3, 4), (4, 5)] print(maximum_overlapping_events(events)) # Example output: 1 ``` Hints: - You might find the `heapq` module useful for maintaining and updating the min-heap efficiently. - Remember to consider edge cases, such as an event that starts exactly when another ends.","solution":"from typing import List, Tuple import heapq def maximum_overlapping_events(events: List[Tuple[int, int]]) -> int: if not events: return 0 # Sort events by start time events.sort(key=lambda x: x[0]) # Min-heap to keep track of end times heap = [] max_overlap = 0 for event in events: start, end = event # Remove all events from heap that have ended before or by the current event\'s start time while heap and heap[0] <= start: heapq.heappop(heap) # Add the current event\'s end time to the heap heapq.heappush(heap, end) # The size of the heap is the current number of overlapping events max_overlap = max(max_overlap, len(heap)) return max_overlap"},{"question":"Implement a function called `calculate_knn_accuracy` that trains a K-Nearest Neighbors (KNN) classifier using the `KNeighborsClassifier` from the `sklearn.neighbors` library, and evaluates the model\'s accuracy on the test set. The function `calculate_knn_accuracy` should take four inputs: - `X_train`: A numpy array or pandas DataFrame containing the features for the training set. - `X_test`: A numpy array or pandas DataFrame containing the features for the test set. - `Y_train`: A numpy array or pandas Series containing the labels for the training set. - `Y_test`: A numpy array or pandas Series containing the labels for the test set. Your function should: 1. Create a `KNeighborsClassifier` object with 5 neighbors. 2. Fit the classifier to the training data. 3. Predict the labels for the test data using the trained model. 4. Calculate and return the accuracy score for the test labels and the predicted labels. Your task is to ensure that you use the following libraries: - `sklearn.neighbors.KNeighborsClassifier` - `sklearn.metrics.accuracy_score`","solution":"from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score def calculate_knn_accuracy(X_train, X_test, Y_train, Y_test): Trains a K-Nearest Neighbors (KNN) classifier using the provided training data, and evaluates the model\'s accuracy on the test data. Args: X_train: Training features, numpy array or pandas DataFrame X_test: Test features, numpy array or pandas DataFrame Y_train: Training labels, numpy array or pandas Series Y_test: Test labels, numpy array or pandas Series Returns: Accuracy score of the KNN model on the test set knn = KNeighborsClassifier(n_neighbors=5) knn.fit(X_train, Y_train) Y_pred = knn.predict(X_test) accuracy = accuracy_score(Y_test, Y_pred) return accuracy"},{"question":"Create a function that simulates the motion of a projectile given an initial velocity and angle. The function should plot the trajectory of the projectile on a Matplotlib plot, and display the maximum height reached as well as the total horizontal distance covered. Assume no air resistance and use standard gravitational acceleration (9.8 m/s²). The function should: - Take the initial velocity (in m/s) and launch angle (in degrees) as inputs. - Output: None You should write self-contained code starting with: ``` import matplotlib.pyplot as plt import numpy as np def task_func(initial_velocity, launch_angle): ```","solution":"import matplotlib.pyplot as plt import numpy as np def task_func(initial_velocity, launch_angle): # Constants g = 9.8 # acceleration due to gravity (m/s^2) # Convert launch angle from degrees to radians launch_angle_rad = np.radians(launch_angle) # Calculate initial velocities in the x and y directions initial_velocity_x = initial_velocity * np.cos(launch_angle_rad) initial_velocity_y = initial_velocity * np.sin(launch_angle_rad) # Time of flight time_of_flight = 2 * initial_velocity_y / g # Calculate the total horizontal distance total_distance = initial_velocity_x * time_of_flight # Calculate the maximum height max_height = (initial_velocity_y**2) / (2 * g) # Calculate trajectories t = np.linspace(0, time_of_flight, num=500) x = initial_velocity_x * t y = initial_velocity_y * t - 0.5 * g * t**2 # Plot the trajectory plt.figure() plt.plot(x, y) plt.title(f\'Projectile Motion: v0={initial_velocity} m/s, θ={launch_angle}°\') plt.xlabel(\'Horizontal Distance (m)\') plt.ylabel(\'Vertical Distance (m)\') plt.axhline(0, color=\'black\',linewidth=0.5) plt.axvline(0, color=\'black\',linewidth=0.5) plt.grid(color = \'gray\', linestyle = \'--\', linewidth = 0.5) # Display maximum height and total distance plt.text(0.5 * total_distance, max_height, f\'Max Height: {max_height:.2f} m\', fontsize=10, ha=\'center\') plt.text(0.5 * total_distance, 0, f\'Total Distance: {total_distance:.2f} m\', fontsize=10, ha=\'center\') plt.show()"},{"question":"Write a function that takes a list of dictionaries representing students, each with \'name\' and \'grades\' keys. The \'grades\' key contains a list of integers. The function should return a JSON-formatted string with each student\'s name as keys and their average grade as values. The function should output: - str: A JSON-formatted string with each student\'s name and their average grade. Example input: ``` students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [85, 90, 78]}, {\\"name\\": \\"Bob\\", \\"grades\\": [70, 80, 65]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [95, 100, 92]} ] ``` Example output: ``` \'{\\"Alice\\": 84.33, \\"Bob\\": 71.67, \\"Charlie\\": 95.67}\' ``` You should write self-contained code starting with: ``` import json def calc_avg_grades(students): ```","solution":"import json def calc_avg_grades(students): Calculate the average grade for each student and return a JSON-formatted string. :param students: List of dictionaries, each containing \'name\' and \'grades\'. :return: JSON-formatted string with each student\'s name and their average grade. averages = {} for student in students: name = student[\\"name\\"] grades = student[\\"grades\\"] if grades: avg_grade = round(sum(grades) / len(grades), 2) else: avg_grade = None averages[name] = avg_grade return json.dumps(averages)"},{"question":"You have been asked to design a function that simulates a simple blackjack game between a user and the dealer. The function should adhere to the following requirements: 1. Define a function called `simulate_blackjack()`. 2. The game should use a standard deck of 52 cards (excluding Jokers). 3. Each card has a value: numerical cards are worth their number value, face cards (King, Queen, Jack) are worth 10, and Aces can be worth either 1 or 11. The optimal value of an Ace should be determined in the context of achieving the highest score that does not exceed 21. 4. Simulate the initial deal where both the user and the dealer receive two cards. The user can see both of their cards but only one of the dealer\'s cards. 5. Allow the user to repeatedly \\"hit\\" (draw another card) or \\"stand\\" (end their turn). 6. After the user stands, the dealer\'s second card is revealed. The dealer must hit until their hand totals 17 or higher. 7. Determine the winner based on the following: - If the user\'s hand exceeds 21, they lose. - If the dealer\'s hand exceeds 21, the user wins. - Otherwise, the hand closest to 21 without exceeding it wins. If both hands have the same value, it is a draw. Implement and test the function `simulate_blackjack()`, ensuring that it accurately follows the rules and provides a clear output of the game\'s progression and result.","solution":"import random # Define the card values card_values = { \'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 10, \'Q\': 10, \'K\': 10, \'A\': 11 # Initially consider Ace as 11 } def draw_card(deck): if len(deck) == 0: raise ValueError(\\"The deck is empty!\\") return deck.pop(random.randint(0, len(deck) - 1)) def calculate_hand_value(hand): value = sum(card_values[card] for card in hand) aces = hand.count(\'A\') while value > 21 and aces: value -= 10 aces -= 1 return value def simulate_blackjack(): # Create a standard deck of 52 cards deck = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] * 4 random.shuffle(deck) # Initial deal: user and dealer get two cards each user_hand = [draw_card(deck), draw_card(deck)] dealer_hand = [draw_card(deck), draw_card(deck)] print(f\\"User\'s hand: {user_hand}, value: {calculate_hand_value(user_hand)}\\") print(f\\"Dealer\'s visible card: {dealer_hand[0]}\\") # Allow the user to hit or stand while calculate_hand_value(user_hand) < 21: action = input(\\"Do you want to \'hit\' or \'stand\'? \\").strip().lower() if action == \'hit\': user_hand.append(draw_card(deck)) print(f\\"User\'s hand: {user_hand}, value: {calculate_hand_value(user_hand)}\\") if calculate_hand_value(user_hand) > 21: print(\\"User busts! Dealer wins.\\") return elif action == \'stand\': break # Reveal dealer\'s second card print(f\\"Dealer\'s hand: {dealer_hand}, value: {calculate_hand_value(dealer_hand)}\\") # Dealer\'s turn to hit until the hand value reaches at least 17 while calculate_hand_value(dealer_hand) < 17: dealer_hand.append(draw_card(deck)) print(f\\"Dealer\'s hand: {dealer_hand}, value: {calculate_hand_value(dealer_hand)}\\") if calculate_hand_value(dealer_hand) > 21: print(\\"Dealer busts! User wins.\\") return # Determine the winner user_value = calculate_hand_value(user_hand) dealer_value = calculate_hand_value(dealer_hand) print(f\\"Final hands - User: {user_hand} (value: {user_value}), Dealer: {dealer_hand} (value: {dealer_value})\\") if user_value > dealer_value: print(\\"User wins!\\") elif user_value < dealer_value: print(\\"Dealer wins!\\") else: print(\\"It\'s a draw!\\")"},{"question":"You are participating in a simulation where you need to model a robotic arm reaching out to touch points on a 2D coordinate plane. The robotic arm starts at the origin and needs to determine the minimum number of moves to touch all the given target points. The arm can move vertically, horizontally, or diagonally to adjacent grid cells (1 unit per move). **Task:** 1. Implement a function `minimum_moves_to_touch_all(points)` that calculates the minimum number of moves required for the robotic arm to touch all given points. 2. This function should take a list of tuples `points` where each tuple represents the (x, y) coordinates of a target point on the 2D plane. 3. The function should return an integer representing the minimum number of moves needed. **Function Signature:** ```python def minimum_moves_to_touch_all(points: List[Tuple[int, int]]) -> int: ... ``` **Arguments:** - `points` (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers representing the x and y coordinates of a target point. **Returns:** - `int`: The minimum number of moves required to touch all the points. Example ```python # Example 1 print(minimum_moves_to_touch_all([(1, 1), (3, 4), (6, -1)])) # Expected output: 5 # Example 2 print(minimum_moves_to_touch_all([(0, 0), (1, 1), (1, 2)])) # Expected output: 2 ``` Explanation - In Example 1, the robotic arm can follow these moves: (0,0) -> (1,1) -> (3,4) -> (6,-1), which sums up to 5 moves. - In Example 2, the robotic arm can move directly to each target point in 2 moves: (0,0) -> (1,1) -> (1,2).","solution":"from typing import List, Tuple def minimum_moves_to_touch_all(points: List[Tuple[int, int]]) -> int: def dist(p1, p2): return max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1])) current_position = (0, 0) total_moves = 0 for point in points: total_moves += dist(current_position, point) current_position = point return total_moves"},{"question":"In this problem, you are tasked with creating a function named `find_kth_largest` to determine the k-th largest element in an unsorted array of integers. Your function should implement an algorithm with an average time complexity better than O(n log n), ideally approaching O(n). You are encouraged to use a strategy akin to the Quickselect algorithm, leveraging the partitioning logic similar to Quicksort. The function should take two parameters: 1. `array`: A list of integers representing the unsorted array. 2. `k`: An integer representing the position (1-indexed) of the largest element to find. The function should: 1. Validate that `k` is within the appropriate bounds (1 <= k <= length of the array). 2. Use an efficient algorithm (suggested: Quickselect) to find and return the k-th largest element. Constraints: - You should not utilize any built-in sort functions. - Aim for an average time complexity close to O(n). Example: ```python >>> array = [3, 2, 1, 5, 6, 4] >>> k = 2 >>> find_kth_largest(array, k) 5 >>> array = [7, 10, 4, 3, 20, 15] >>> k = 3 >>> find_kth_largest(array, k) 10 ``` Your task is to implement the `find_kth_largest` function as described above. Ensure your solution handles edge cases and validates input appropriately.","solution":"def partition(nums, low, high): pivot = nums[high] i = low for j in range(low, high): if nums[j] > pivot: # Note: > for kth largest nums[i], nums[j] = nums[j], nums[i] i += 1 nums[i], nums[high] = nums[high], nums[i] return i def quickselect(nums, low, high, k): if low == high: return nums[low] pivot_index = partition(nums, low, high) if pivot_index == k: return nums[pivot_index] elif pivot_index < k: return quickselect(nums, pivot_index + 1, high, k) else: return quickselect(nums, low, pivot_index - 1, k) def find_kth_largest(array, k): Finds the Kth largest element in an unsorted array. :param array: List[int] - a list of integers :param k: int - the position of the largest element to find (1-indexed) :return: int - the k-th largest element in the array if not 1 <= k <= len(array): raise ValueError(\\"k is out of bounds\\") return quickselect(array, 0, len(array) - 1, k - 1)"},{"question":"You are given a function named `generate_combinations` that takes in a list of unique elements and a positive integer `k`. The function generates all possible combinations of size `k` from the given list. The solutions should not contain any duplicates and should follow lexicographic order. The goal is to implement this function using the `itertools` library, specifically utilizing the `itertools.combinations` function. Function Signature: ```python def generate_combinations(elements, k): Args: - elements (list): A list of unique elements. - k (int): The size of each combination. Returns: - combinations (list of tuples): A list containing all the combinations of size `k` sorted in lexicographic order. ``` Requirements: 1. **Validate Input**: Ensure that `k` is a positive integer and does not exceed the length of the `elements` list. 2. **Generate Combinations**: Use `itertools.combinations` to generate all possible combinations of size `k` from the `elements` list. 3. **Sort Combinations Lexicographically**: Ensure that the resulting list of combinations is sorted in lexicographic order. # Example Usage ```python from itertools import combinations # Sample input list elements = [\'a\', \'b\', \'c\', \'d\'] k = 2 # Generate combinations result = generate_combinations(elements, k) print(result) # Output: [(\'a\', \'b\'), (\'a\', \'c\'), (\'a\', \'d\'), (\'b\', \'c\'), (\'b\', \'d\'), (\'c\', \'d\')] ``` # Constraints: - The list of elements will always contain unique items. - The size `k` will always be a positive integer less than or equal to the length of the elements list. # Task: Implement the `generate_combinations` function as described above, adhering to the constraints and requirements.","solution":"from itertools import combinations def generate_combinations(elements, k): Args: - elements (list): A list of unique elements. - k (int): The size of each combination. Returns: - combinations (list of tuples): A list containing all the combinations of size k sorted in lexicographic order. # Validate input if not isinstance(elements, list): raise ValueError(\\"elements must be a list\\") if not all(isinstance(e, (str, int)) for e in elements): raise ValueError(\\"elements must contain only strings or integers\\") if not isinstance(k, int) or k <= 0: raise ValueError(\\"k must be a positive integer\\") if k > len(elements): raise ValueError(\\"k cannot be greater than the length of elements list\\") # Generate combinations comb = list(combinations(elements, k)) # Sort results lexicographically comb.sort() return comb"},{"question":"Using the given list of integers, implement a function to find and return the longest increasing subsequence (LIS). The longest increasing subsequence is the longest subsequence (not necessarily contiguous) of a sequence in which the elements are in sorted order, lowest to highest. The function should output the length of the LIS. You should write self-contained code starting with: ```python def longest_increasing_subsequence(arr): ```","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given list of integers. Args: arr (List[int]): The list of integers to process. Returns: int: The length of the longest increasing subsequence. if not arr: return 0 # Initialize an array to store the length of the longest increasing subsequence up to each element dp = [1] * len(arr) # Fill dp array for i in range(1, len(arr)): for j in range(0, i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence is the maximum value in dp array return max(dp)"},{"question":"In this problem, you are tasked with writing a function that calculates the entropy of a list of discrete probability values. Entropy is a measure of the uncertainty of a probability distribution and is widely used in information theory. The entropy ( H ) of a discrete probability distribution is calculated as: [ H(X) = - sum_{i} p(x_i) log_2(p(x_i)) ] where: - ( X ) is a discrete random variable with possible values ( x_1, x_2, ldots, x_n ). - ( p(x_i) ) is the probability of ( x_i ). - The logarithm is to base 2. You will implement the function `calculate_entropy(distribution)` in Python, where: - `distribution` is a list of probabilities representing the probability distribution of a discrete random variable. Each value in this list ( p_i ) represents the probability of one of the outcomes and ( sum p_i = 1 ). To handle the logarithmic calculations, you can use the `numpy.log2` function. **Function Signature:** ```python def calculate_entropy(distribution): ... ``` # Example ```python import numpy as np # Example Data distribution = [0.25, 0.25, 0.25, 0.25] # Entropy Calculation Call entropy = calculate_entropy(distribution) print(entropy) # Output: 2.0 ``` # Constraints: - Ensure to handle cases where probabilities might be very close to zero, but still consider all probabilities where ( p_i > 0 ). - Assume the input `distribution` is a valid probability distribution, meaning all elements are non-negative and sum up to 1. - The length of `distribution` will be between 2 and 100 (inclusive).","solution":"import numpy as np def calculate_entropy(distribution): Calculate the entropy of a discrete probability distribution. :param distribution: List of probabilities representing the probability distribution. :return: Entropy of the distribution. entropy = 0 for p in distribution: if p > 0: # We only consider p_i > 0 for log calculation entropy -= p * np.log2(p) return entropy"},{"question":"You are required to write a function named `generate_primes_file` that generates a list of prime numbers within a specified range and saves them to a text file named \'primes.txt\'. Here are the requirements for the function: 1. **Parameters**: The function should accept the following parameters: - `start` (int): The starting value of the range (inclusive). - `end` (int): The ending value of the range (inclusive). 2. **Functionality**: - Generate all prime numbers within the range from `start` to `end`. - Write the generated prime numbers to a file named \'primes.txt\', with each prime number on a new line. 3. **Utilities**: - You may use helper functions if necessary to modularize your code. Implement the function `generate_primes_file` as described above. Example: ```python generate_primes_file(10, 50) ``` This should: 1. Generate all prime numbers between 10 and 50. 2. Write the prime numbers to \'primes.txt\', each number on a new line.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def generate_primes_file(start, end): Generates a list of prime numbers within a specified range and saves them to a text file named \'primes.txt\'. with open(\'primes.txt\', \'w\') as f: for number in range(start, end + 1): if is_prime(number): f.write(f\\"{number}n\\")"},{"question":"You need to implement a function that calculates the cosine similarity between two vectors. Cosine similarity is a measure of similarity between two non-zero vectors of an inner product space that measures the cosine of the angle between them. The cosine similarity gives a value between -1 and 1, where 1 means the vectors are identical, 0 means they are orthogonal, and -1 means they are diametrically opposed. You will use `numpy.dot` to compute the dot product and `numpy.linalg.norm` to compute the magnitudes of the vectors. Function Signature ```python def cosine_similarity(vec1, vec2): Calculates the cosine similarity between two vectors. Parameters: - vec1 (list or np.ndarray): The first vector. - vec2 (list or np.ndarray): The second vector. Returns: float: The cosine similarity between vec1 and vec2. ``` Input and Output - **Input:** Two vectors `vec1` and `vec2`, each of which can be either a list of numbers or a Numpy array. - **Output:** A float representing the cosine similarity between the input vectors. Example ```python import numpy as np vec1 = [1, 2, 3] vec2 = [4, 5, 6] output = cosine_similarity(vec1, vec2) print(output) ``` Expected Output: ```json 0.9746318461970762 ``` # ```python import numpy as np def cosine_similarity(vec1, vec2): vec1 = np.array(vec1) vec2 = np.array(vec2) dot_product = np.dot(vec1, vec2) norm_vec1 = np.linalg.norm(vec1) norm_vec2 = np.linalg.norm(vec2) return dot_product / (norm_vec1 * norm_vec2) ```","solution":"import numpy as np def cosine_similarity(vec1, vec2): Calculates the cosine similarity between two vectors. Parameters: - vec1 (list or np.ndarray): The first vector. - vec2 (list or np.ndarray): The second vector. Returns: float: The cosine similarity between vec1 and vec2. vec1 = np.array(vec1) vec2 = np.array(vec2) dot_product = np.dot(vec1, vec2) norm_vec1 = np.linalg.norm(vec1) norm_vec2 = np.linalg.norm(vec2) return dot_product / (norm_vec1 * norm_vec2)"},{"question":"Create a function `max_subarray_product(nums)` that takes a list of integers `nums` and returns the maximum product of a contiguous subarray. The array will contain both positive and negative numbers, as well as zeros. The main challenge is to handle the changes in sign that can dramatically affect the product of contiguous subarrays. # Example: ```python nums = [2, 3, -2, 4] print(max_subarray_product(nums)) ``` # Output: ``` 6 ``` # Explanation: In the given example, the subarray `[2, 3]` has the maximum product of 6. # Instructions: 1. Traverse through each element in the list while maintaining the maximum and minimum products ending at the current position. 2. For each element in the list: - Update the maximum and minimum products for the current position based on the previous position\'s values. - Track the overall maximum product seen so far. 3. Handle the negative numbers by keeping track of both maximum and minimum products (as a negative number could turn a minimum product into a maximum product). # Constraints: 1. The length of the list `nums` is at least 1 and at most 10^4. 2. Each element in `nums` is between -10^4 and 10^4. # Function Signature: ```python def max_subarray_product(nums: List[int]) -> int: ``` Implement the solution to handle various edge cases such as single element arrays, arrays with zeros, and arrays with multiple negative numbers.","solution":"def max_subarray_product(nums): Returns the maximum product of a contiguous subarray. Args: nums (list): List of integers containing both positive, negative numbers and zeros. Returns: int: Maximum product of a contiguous subarray. if not nums: return 0 max_prod = nums[0] min_prod = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Write a Python function to simulate a simple banking system that handles user transactions. The system should be initialized with a dictionary containing user accounts, where each key is a username and the value is the initial account balance. The function should provide the following features: 1. **View Balance**: Return the current balance of a user\'s account. 2. **Deposit**: Add a specified amount to the user\'s account balance. 3. **Withdraw**: Subtract a specified amount from the user\'s account balance if enough funds are available. The function should accept the following parameters: - `operation` (str): The operation to perform (\'view\', \'deposit\', \'withdraw\'). - `username` (str): The username of the account to operate on. - `amount` (float, optional): The amount to deposit or withdraw (not needed for \'view\'). The function should handle invalid operations and return descriptive error messages if the operation is not recognized, the username is not found, or insufficient funds are available for a withdrawal. Function signature: ``` def bank_system(users, operation, username, amount=None): ``` Example: ``` users = { \'alice\': 1000.0, \'bob\': 1500.0, \'charlie\': 2000.0 } # Deposit 500.0 to Alice\'s account print(bank_system(users, \'deposit\', \'alice\', 500.0)) # Output: \\"Alice\'s new balance is 1500.0\\" # Withdraw 200.0 from Bob\'s account print(bank_system(users, \'withdraw\', \'bob\', 200.0)) # Output: \\"Bob\'s new balance is 1300.0\\" # View Charlie\'s balance print(bank_system(users, \'view\', \'charlie\')) # Output: \\"Charlie\'s current balance is 2000.0\\" # Attempt to withdraw 3000.0 from Bob\'s account print(bank_system(users, \'withdraw\', \'bob\', 3000.0)) # Output: \\"Insufficient funds\\" ```","solution":"def bank_system(users, operation, username, amount=None): Simulates a simple banking system to handle user transactions: view balance, deposit, withdraw. Parameters: users (dict): A dictionary of user accounts with their balances. operation (str): The operation to perform (\'view\', \'deposit\', \'withdraw\'). username (str): The username of the account to operate on. amount (float, optional): The amount to deposit or withdraw. Not needed for \'view\'. Returns: str: Result message of the operation. if username not in users: return \\"Error: Username not found.\\" if operation == \'view\': return f\\"{username.capitalize()}\'s current balance is {users[username]:.2f}.\\" elif operation == \'deposit\': if amount is None or amount <= 0: return \\"Error: Invalid deposit amount.\\" users[username] += amount return f\\"{username.capitalize()}\'s new balance is {users[username]:.2f}.\\" elif operation == \'withdraw\': if amount is None or amount <= 0: return \\"Error: Invalid withdrawal amount.\\" if users[username] < amount: return \\"Error: Insufficient funds.\\" users[username] -= amount return f\\"{username.capitalize()}\'s new balance is {users[username]:.2f}.\\" else: return \\"Error: Invalid operation.\\""},{"question":"You are tasked with implementing a function named `sum_of_even_numbers` which takes a list of integers as an input and returns the sum of all even numbers in the list. The function should efficiently iterate through the list and identify the even numbers, compute their sum, and return this value. Requirements: - The function should handle both positive and negative integers. - The function should be able to manage edge cases, such as an empty list or a list with no even numbers, returning 0 in such scenarios. - The implementation should use a single loop to iterate through the list. Function Signature: ```python def sum_of_even_numbers(numbers: list) -> int: pass ``` Example: ```python assert sum_of_even_numbers([1, 2, 3, 4, 5, 6]) == 12 assert sum_of_even_numbers([-2, -4, -6, -8]) == -20 assert sum_of_even_numbers([1, 3, 5, 7]) == 0 assert sum_of_even_numbers([]) == 0 ``` Your implementation should be efficient and clear, properly handling the iteration and summation of even numbers from the list.","solution":"def sum_of_even_numbers(numbers: list) -> int: Returns the sum of all even numbers in the list. Args: numbers (list of int): Input list of integers. Returns: int: Sum of all even numbers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"In many applications, processing and analyzing text data is essential, especially when trying to find the similarity between two documents or sets of text information. One common approach is to compute the cosine similarity between two vectors that represent the text data. This approach helps measure how similar the text data is by comparing the cosine of the angle between two vectors. You are required to write a function `cosine_similarity(vec1, vec2)` that computes the cosine similarity between two vectors. The input vectors are represented as lists of numerical values that correspond to the frequency of words or terms in the text data. Your task is to implement the function `cosine_similarity(vec1, vec2)`: ```python import numpy as np def cosine_similarity(vec1, vec2): Compute the cosine similarity between two vectors. :param vec1: First list of numerical values :param vec2: Second list of numerical values :return: Cosine similarity between vec1 and vec2 Note: Use np.dot and np.linalg.norm functions from the numpy library. vec1 = np.array(vec1) vec2 = np.array(vec2) dot_product = np.dot(vec1, vec2) norm_vec1 = np.linalg.norm(vec1) norm_vec2 = np.linalg.norm(vec2) return dot_product / (norm_vec1 * norm_vec2) ``` # Example Given two vectors `vec1` and `vec2` as lists of numerical values: ```python vec1 = [1, 2, 3] vec2 = [4, 5, 6] print(cosine_similarity(vec1, vec2)) ``` The expected output should be a floating point number representing the cosine similarity between these two vectors: ``` 0.9746318461970762 ``` # Constraints - You must use the `np.dot` and `np.linalg.norm` functions from the `numpy` library. - Input vectors will always be non-empty lists of numerical values of the same length. - Elements in the vectors will be valid numerical values (integers or floats).","solution":"import numpy as np def cosine_similarity(vec1, vec2): Compute the cosine similarity between two vectors. :param vec1: First list of numerical values :param vec2: Second list of numerical values :return: Cosine similarity between vec1 and vec2 Note: Use np.dot and np.linalg.norm functions from the numpy library. vec1 = np.array(vec1) vec2 = np.array(vec2) dot_product = np.dot(vec1, vec2) norm_vec1 = np.linalg.norm(vec1) norm_vec2 = np.linalg.norm(vec2) return dot_product / (norm_vec1 * norm_vec2)"},{"question":"To enhance an e-commerce platform, you will create a function that tracks the stock and price of items and processes customer orders. The platform offers a catalog of items with associated stock quantities and prices. The goal is to implement the `process_order` function that checks if items in a customer’s order are available and calculates the total order price if the items are in stock. **Specifications**: 1. The catalog of items is provided as a dictionary where keys are item names and values are tuples containing the stock quantity and price per item. ```python catalog = { \\"item1\\": (20, 5.50), \\"item2\\": (15, 9.99), \\"item3\\": (30, 2.75), \\"item4\\": (10, 14.50) } ``` 2. The order is provided as a dictionary where keys are item names, and values are the quantities ordered. ```python order = { \\"item1\\": 2, \\"item3\\": 5 } ``` 3. The function should verify if each item in the order is available in the catalog and if the ordered quantity does not exceed the stock quantity. 4. If any item in the order is not available or the required quantity exceeds the stock quantity, the function should return \\"Order cannot be processed\\". 5. If all items in the order are available and the required quantities are within the stock limits, the function should return the total price of the order. 6. The function should update the stock quantities in the catalog if the order is successfully processed. # Function Signature ```python def process_order(catalog, order): pass ``` **Example**: ```python catalog = { \\"item1\\": (20, 5.50), \\"item2\\": (15, 9.99), \\"item3\\": (30, 2.75), \\"item4\\": (10, 14.50) } order = { \\"item1\\": 2, \\"item3\\": 5 } result = process_order(catalog, order) # Expected output: 25.75 # New catalog stock: {\\"item1\\": (18, 5.50), \\"item2\\": (15, 9.99), \\"item3\\": (25, 2.75), \\"item4\\": (10, 14.50)} ```","solution":"def process_order(catalog, order): Processes a customer order. Args: catalog (dict): A dictionary where keys are item names and values are tuples containing stock quantity and price per item. order (dict): A dictionary where keys are item names, and values are the quantities ordered. Returns: float: The total order price if items are in stock and available in sufficient quantity. str: \\"Order cannot be processed\\" if any item is not available or exceeds stock quantity. total_price = 0.0 # Check if all items are available and in sufficient quantity for item, quantity in order.items(): if item not in catalog or catalog[item][0] < quantity: return \\"Order cannot be processed\\" # Process the order and update stock quantities for item, quantity in order.items(): stock, price = catalog[item] total_price += quantity * price catalog[item] = (stock - quantity, price) return total_price"},{"question":"You are tasked with writing a Python function named `calculate_totals` that reads data from a CSV file containing information about various products and calculates the total price for each product based on the quantity and unit price. The function should then write the results to a new CSV file named `total_prices.csv`. Here\'s the file structure expected for the input CSV file (`products_file.csv`): ``` ProductName,Quantity,UnitPrice Apple,10,0.50 Banana,5,0.30 Orange,8,0.60 ``` The `calculate_totals` function should use the `csv.reader` function to parse the input CSV file. It should then calculate the total price for each product as `Quantity * UnitPrice` and write the results to `total_prices.csv` with the following structure: ``` ProductName,TotalPrice Apple,5.00 Banana,1.50 Orange,4.80 ``` # Specifications: 1. **Function Name:** `calculate_totals` 2. **Input Parameters:** - `products_file` (string): Path to the CSV file containing product information. 3. **Output:** The function does not need to return any value. It should create a new CSV file named `total_prices.csv` containing the total prices for each product. 4. **Libraries to Use:** - `csv` for reading and writing the CSV files. **You do not need to handle exceptions or inputs from users. Assume that the input file path is passed correctly.**","solution":"import csv def calculate_totals(products_file): with open(products_file, mode=\'r\', newline=\'\') as file: reader = csv.reader(file) header = next(reader) products_totals = [] for row in reader: product_name = row[0] quantity = int(row[1]) unit_price = float(row[2]) total_price = quantity * unit_price products_totals.append([product_name, f\\"{total_price:.2f}\\"]) with open(\'total_prices.csv\', mode=\'w\', newline=\'\') as outfile: writer = csv.writer(outfile) writer.writerow([\'ProductName\', \'TotalPrice\']) writer.writerows(products_totals)"},{"question":"Consider a factory that produces widgets. The production line consists of multiple machines, each requiring a fixed time to process a widget. The factory has a policy that exactly one widget will be processed by one specific machine at a time. Given: - `machines`: A list of integers where each element represents the time in seconds it takes for the corresponding machine to process one widget. - `n`: Total number of widgets to produce. You need to determine the minimum time required to produce all `n` widgets using available machines. Each machine can process widgets independently but sequentially (it can process a second widget only after finishing the first one). # Function Signature ```python def min_time(machines: list, n: int) -> int: pass ``` # Arguments - `machines`: List[int] - A list of integers where each integer represents the processing time of each machine in seconds. - `n`: int - The total number of widgets to be produced. # Returns - `int` - The minimum time in seconds required to produce `n` widgets using the given machines. # Example For example, given: ```python machines = [2, 3] n = 5 ``` The minimum time to produce 5 widgets using machines with processing times of 2 and 3 seconds respectively is 6 seconds. # Explanation: - At `t=2` seconds, machine 1 finishes its first widget (1 produced). - At `t=3` seconds, machine 2 finishes its first widget (2 produced). - At `t=4` seconds, machine 1 finishes its second widget (3 produced). - At `t=6` seconds, machine 1 finishes its third widget (4 produced), and machine 2 finishes its second widget (5 produced). Thus, the total time is 6 seconds. # Constraints - The number of machines will not exceed 100,000. - `1 <= n <= 1,000,000`. - Each machine processing time will be between 1 and 1,000,000 seconds. # Approach You need to write a function called `min_time` that returns the minimum time required to produce all `n` widgets. Use a binary search approach to determine the optimal time efficiently.","solution":"def min_time(machines: list, n: int) -> int: Given a list of machine processing times and the total number of widgets to produce, determine the minimum time required to produce all widgets using available machines. :param machines: List[int] - List of integers where each integer represents the time for a machine to process one widget. :param n: int - Total number of widgets to produce. :return: int - Minimum time required to produce all widgets. def widgets_in_time(time): return sum(time // machine for machine in machines) left, right = 1, max(machines) * n while left < right: mid = (left + right) // 2 if widgets_in_time(mid) >= n: right = mid else: left = mid + 1 return left"},{"question":"Write a Python function named `findStillOpenStores` to determine which stores are open at a given current time. The function should take two parameters: 1. `storeHours` (dict): A dictionary where each key is the store name and the value is a tuple with the opening and closing times in 24-hour format (strings). 2. `currentTime` (str): The current time in 24-hour format as a string. The function should return a list of store names that are open at the `currentTime`. The function should operate as follows: 1. Convert the `currentTime` to an integer representing the hour. 2. Iterate through the `storeHours` dictionary and for each store: - Convert the opening and closing times to integers. - Check if the store is currently open, accounting for the case where closing time might be after midnight. 3. Collect the names of stores that are open at the given `currentTime`. You may assume that the opening and closing times are provided in the typical 24-hour format (e.g., \\"09:00\\", \\"18:00\\") and the `currentTime` will be in the same format with \\"HH:MM\\".","solution":"def findStillOpenStores(storeHours, currentTime): Determines which stores are open at a given current time. Parameters: storeHours (dict): A dictionary where each key is the store name and the value is a tuple with the opening and closing times in 24-hour format (strings). currentTime (str): The current time in 24-hour format as a string. Returns: list: List of store names that are open at the `currentTime`. current_hour = int(currentTime.split(\':\')[0]) current_minute = int(currentTime.split(\':\')[1]) current_time_in_minutes = current_hour * 60 + current_minute open_stores = [] for store, (open_time, close_time) in storeHours.items(): open_hour, open_minute = map(int, open_time.split(\':\')) close_hour, close_minute = map(int, close_time.split(\':\')) open_time_in_minutes = open_hour * 60 + open_minute close_time_in_minutes = close_hour * 60 + close_minute if open_time_in_minutes <= current_time_in_minutes < close_time_in_minutes: open_stores.append(store) elif close_time_in_minutes < open_time_in_minutes: if current_time_in_minutes >= open_time_in_minutes or current_time_in_minutes < close_time_in_minutes: open_stores.append(store) return open_stores"},{"question":"You are required to write a function named `merge_and_sort` that merges two sorted lists into a single sorted list. This problem will help you understand and effectively use list operations and merging algorithms. Function Signature ```python def merge_and_sort(list1: list, list2: list) -> list: ``` Parameters 1. **list1**: A list of integers sorted in non-decreasing order. 2. **list2**: Another list of integers sorted in non-decreasing order. Returns - A list of integers that contains all elements from `list1` and `list2`, sorted in non-decreasing order. Example ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] result = merge_and_sort(list1, list2) print(result) # Output should be [1, 2, 3, 4, 5, 6, 7, 8] ``` Constraints - You may not use built-in sorting functions. - Lists can be of different lengths. - You should aim for a time complexity of O(n + m), where n and m are the lengths of list1 and list2, respectively.","solution":"def merge_and_sort(list1: list, list2: list) -> list: Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are required to implement a function `generate_report_from_logs` that processes log files to create summary reports. This function should: 1. Iterate through all log files in a specified directory. 2. Identify files that have a `.log` extension. 3. For each `.log` file: - Read the file line by line. - Parse each line to extract relevant information such as the timestamp, log level, and message using a placeholder function `parse_log_line`. - Aggregate the extracted information in a dictionary. - Summarize the log data by counting the occurrences of different log levels (e.g., ERROR, WARNING, INFO) using a placeholder function `summarize_log_data`. - Create a DataFrame `summary_df` to store the summary of each log file. - Save `summary_df` to a new CSV file named `Summary_<original_filename>.csv` in a specified export directory. You should use the `os.listdir`, and `pandas.DataFrame` methods from the corresponding libraries `os` and `pandas`. Additionally, assume the existence of the placeholder functions `parse_log_line` and `summarize_log_data`. Function signature: ```python def generate_report_from_logs(directory_path: str, export_file_path: str) -> None: ```","solution":"import os import pandas as pd def parse_log_line(line): A placeholder function to parse a log line. For example: Input: \\"2023-01-01 12:00:00 ERROR Something went wrong\\" Output: {\\"timestamp\\": \\"2023-01-01 12:00:00\\", \\"level\\": \\"ERROR\\", \\"message\\": \\"Something went wrong\\"} parts = line.split(\' \', 3) if len(parts) < 4: return None return { \\"timestamp\\": parts[0] + \\" \\" + parts[1], \\"level\\": parts[2], \\"message\\": parts[3] } def summarize_log_data(log_data): Summarizes log data by counting occurrences of different log levels. Sample input: [{\\"level\\": \\"ERROR\\", ...}, {\\"level\\": \\"INFO\\", ...}, {\\"level\\": \\"ERROR\\", ...}] Sample output: {\\"ERROR\\": 2, \\"INFO\\": 1} summary = {} for entry in log_data: level = entry.get(\\"level\\") if level in summary: summary[level] += 1 else: summary[level] = 1 return summary def generate_report_from_logs(directory_path: str, export_file_path: str) -> None: log_files = [f for f in os.listdir(directory_path) if f.endswith(\'.log\')] # Initialize an empty DataFrame to store summaries all_summaries = [] for log_file in log_files: log_file_path = os.path.join(directory_path, log_file) with open(log_file_path, \'r\') as file: log_data = [] for line in file: parsed_line = parse_log_line(line) if parsed_line is not None: log_data.append(parsed_line) summary = summarize_log_data(log_data) summary[\'log_file\'] = log_file all_summaries.append(summary) summary_df = pd.DataFrame(all_summaries) if not os.path.exists(export_file_path): os.makedirs(export_file_path) summary_file_path = os.path.join(export_file_path, \'Summary_report.csv\') summary_df.to_csv(summary_file_path, index=False)"},{"question":"You need to write a function that reads a text file and performs a word frequency count on the file\'s contents. The function should output the 5 most common words in the file, along with their frequency counts, in a case-insensitive manner. If there are ties for the most common words, return all words including ties. Your task is to write a function named `word_frequency` which takes a single parameter, `file_path`, which is the path to the text file. This function will: 1. Open and read the text file located at `file_path`. 2. Convert the entire text to lowercase to ensure case-insensitivity. 3. Split the text into individual words. 4. Ignore punctuation and special characters while counting words. 5. Count the frequency of each word in the text. 6. Identify the 5 most common words. If multiple words have the same frequency, include them in the output until the total number of common words equal or exceeds 5. 7. Return a list of tuples containing these words and their corresponding frequencies, sorted by frequency in descending order. **Function signature:** ```python def word_frequency(file_path: str) -> List[Tuple[str, int]]: ``` **Example:** For a text file with the following content: ``` Hello world! Hello everyone. This is a test. Hello again. Test test test. ``` The function call `word_frequency(\\"example.txt\\")` should return: ```python [(\'hello\', 3), (\'test\', 4), (\'world\', 1), (\'everyone\', 1), (\'this\', 1)] ``` Note: - You may assume that the text file contains only spaces and printable ASCII characters. - You need to ignore punctuation (e.g., \',\', \'.\', \'!\', \'?\') while counting words.","solution":"import re from collections import Counter from typing import List, Tuple def word_frequency(file_path: str) -> List[Tuple[str, int]]: with open(file_path, \'r\') as file: text = file.read().lower() words = re.findall(r\'bw+b\', text) word_counts = Counter(words) most_common_words = word_counts.most_common(5) return most_common_words"},{"question":"You have been assigned the task of creating a function that converts a string containing a date in the format `MM/DD/YYYY` to the format `YYYY-MM-DD`. The input string will always be a valid date in the `MM/DD/YYYY` format. Your task is to create a function `convert_date_format(input_date: str) -> str` that takes a single parameter: - `input_date`: A string representing a date in the `MM/DD/YYYY` format. The function should return the date as a string in the `YYYY-MM-DD` format. **Function Signature:** ```python def convert_date_format(input_date: str) -> str: ... ``` **Example:** ```python assert convert_date_format(\'12/31/2020\') == \'2020-12-31\' assert convert_date_format(\'01/01/2021\') == \'2021-01-01\' assert convert_date_format(\'07/04/2022\') == \'2022-07-04\' ```","solution":"def convert_date_format(input_date: str) -> str: Converts a date from MM/DD/YYYY format to YYYY-MM-DD format. Parameters: input_date (str): A string representing a date in the MM/DD/YYYY format. Returns: str: A string representing the date in the YYYY-MM-DD format. month, day, year = input_date.split(\'/\') return f\\"{year}-{month.zfill(2)}-{day.zfill(2)}\\""},{"question":"Given a list of tuples representing flight schedules, each tuple contains (flight_number, departure_time, arrival_time). Your task is to find the longest flight based on the duration. You need to create a function that parses these schedules, computes the duration for each flight, and returns the flight number with the longest duration. Note that departure_time and arrival_time are represented in the format \'HH:MM\' (24-hour time). The function should return: longest_flight (str): The flight number of the longest flight. You should write self-contained code starting with: ``` from typing import List, Tuple def find_longest_flight(flight_schedules: List[Tuple[str, str, str]]) -> str: ```","solution":"from typing import List, Tuple def find_longest_flight(flight_schedules: List[Tuple[str, str, str]]) -> str: def time_to_minutes(time_str: str) -> int: # Convert \'HH:MM\' time format to total minutes from 00:00 hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes max_duration = -1 longest_flight = \\"\\" for flight_number, departure_time, arrival_time in flight_schedules: dep_minutes = time_to_minutes(departure_time) arr_minutes = time_to_minutes(arrival_time) # Calculate flight duration considering flights could span over midnight if arr_minutes >= dep_minutes: duration = arr_minutes - dep_minutes else: duration = (24 * 60 - dep_minutes) + arr_minutes if duration > max_duration: max_duration = duration longest_flight = flight_number return longest_flight"},{"question":"Calculate the minimum number of deletions required to make a string a palindrome. A palindrome is a string that reads the same backward as forward. You need to write a function that takes a string as input and returns an integer indicating the number of deletions needed. You can assume the input string will only consist of lowercase alphabets. The function should be defined as follows: ```python def min_deletions_to_palindrome(s: str) -> int: ``` # Example 1: Input: `s = \\"abca\\"` Output: `1` Explanation: By removing either \'b\' or \'c\', we can make `s` a palindrome (\\"aca\\" or \\"aba\\"). # Example 2: Input: `s = \\"racecar\\"` Output: `0` Explanation: The input string is already a palindrome, so no deletions are needed. # Example 3: Input: `s = \\"abcdef\\"` Output: `5` Explanation: By removing the characters \'a\', \'b\', \'c\', \'d\', and \'e\', we are left with \\"f\\", which is a palindrome. # Constraints: - 1 <= len(s) <= 1000","solution":"def min_deletions_to_palindrome(s: str) -> int: Returns the minimum number of deletions required to make string s a palindrome. # Function to find the longest palindromic subsequence def longest_palindromic_subsequence(s: str) -> int: n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps_length = longest_palindromic_subsequence(s) return len(s) - lps_length"},{"question":"# Context: You are given a list of daily temperature readings for a month and need to analyze this data. The temperature readings are represented as a list of integers where each integer denotes the temperature on a particular day. Your task is to determine how many days it took for each day to encounter a warmer temperature. If there is no future day for a specific day in which the temperature is warmer, the result for that day should be 0. # Task: Write a function named `daily_temperatures` that: 1. Takes a list of integers as input, where each integer represents the daily temperature. 2. Returns a list of integers where the value at each index `i` indicates the number of days until a warmer temperature is found. # Requirements: - Use an efficient algorithm to avoid excessive computation time. - Handle edge cases where the temperatures might be consistently increasing, decreasing, or fluctuating. # Implementing the Function: - Your function, `daily_temperatures`, should iterate through the list of temperatures and compute the required result for each day. # Example: ```python def daily_temperatures(temperatures): # function implementation goes here # Example usage: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] result = daily_temperatures(temperatures) print(result) # Output: [1, 1, 4, 2, 1, 1, 0, 0] ``` # Explanation: For the input list `[73, 74, 75, 71, 69, 72, 76, 73]`, the output is `[1, 1, 4, 2, 1, 1, 0, 0]` because: - Day 1: Next warmer temperature is on day 2. - Day 2: Next warmer temperature is on day 3. - Day 3: Next warmer temperature is on day 7. - Day 4: Next warmer temperature is on day 6. - Day 5: Next warmer temperature is on day 6. - Day 6: Next warmer temperature is on day 7. - Day 7: No future day has a warmer temperature. - Day 8: No future day has a warmer temperature. Ensure your `daily_temperatures` function adheres to these specifications and computes the correct number of days for each temperature in the list.","solution":"def daily_temperatures(temperatures): Returns a list of integers where the value at each index indicates the number of days until a warmer temperature. If there is no future day with a warmer temperature, the value is 0. n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() answer[prev_day] = i - prev_day stack.append(i) return answer"},{"question":"You are given a list of strings where each string represents a time duration in the format \\"HH:MM:SS\\". Your task is to create a function `total_duration(time_list)` that will take this list and return the total duration as a string in the \\"HH:MM:SS\\" format. The function should: 1. Parse each time duration and convert it into total seconds. 2. Sum the total seconds for all time durations. 3. Convert the sum of total seconds back into the \\"HH:MM:SS\\" format. The function should handle cases where the total duration may exceed 24 hours. # Function Signature ```python def total_duration(time_list): pass ``` # Input - `time_list`: List of strings, where each string is a time duration in \\"HH:MM:SS\\" format. # Output - A string representing the sum of input durations in the \\"HH:MM:SS\\" format. # Example ```python time_list = [\\"01:20:35\\", \\"02:45:15\\", \\"00:55:50\\"] result = total_duration(time_list) print(result) ``` **Expected Output:** ``` \\"05:01:40\\" ``` # Requirements Utilize Python\'s standard library to handle time parsing and manipulation. The function should correctly handle edge cases such as empty input or improper formatting by raising appropriate errors or returning a specific indicator.","solution":"def total_duration(time_list): Calculate the total duration from a list of time strings in \\"HH:MM:SS\\" format and return it in the \\"HH:MM:SS\\" format. total_seconds = 0 for time_str in time_list: try: h, m, s = map(int, time_str.split(\':\')) total_seconds += h * 3600 + m * 60 + s except ValueError: # In case the format is not correct, raise an error raise ValueError(f\\"Invalid time format encountered: {time_str}\\") # Convert total seconds back to HH:MM:SS hours = total_seconds // 3600 minutes = (total_seconds % 3600) // 60 seconds = total_seconds % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"Design and implement a function that performs K-Means clustering on a DataFrame to cluster data points into a specified number of clusters. The function trains a K-Means model using scikit-learn. It calculates and returns the silhouette score of the model\'s clustering on the dataset. If the DataFrame is empty or doesn\'t contain the specified columns, the function should raise an appropriate exception. # Requirements: - If the DataFrame is empty or the specified columns do not exist: raise a ValueError. - Use the silhouette score to evaluate the clustering performance. Output: - float: The silhouette score of the model\'s clustering as a float value. Your implementation should include: ``` import pandas as pd from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score def task_func_kmeans(df, columns, n_clusters=3, random_state=42): if df.empty: raise ValueError(\\"The input DataFrame is empty.\\") if not all(col in df.columns for col in columns): raise ValueError(\\"One or more specified columns do not exist in the DataFrame.\\") X = df[columns] kmeans = KMeans(n_clusters=n_clusters, random_state=random_state) labels = kmeans.fit_predict(X) score = silhouette_score(X, labels) return score ```","solution":"import pandas as pd from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score def task_func_kmeans(df, columns, n_clusters=3, random_state=42): Perform K-Means clustering on specified columns of a DataFrame and return the silhouette score. Args: - df (pd.DataFrame): DataFrame containing the data to cluster. - columns (list of str): List of column names to use for clustering. - n_clusters (int): Number of clusters for K-Means. - random_state (int): Random seed for K-Means. Returns: - float: Silhouette score of the clustering. Raises: - ValueError: If the DataFrame is empty or if specified columns do not exist. if df.empty: raise ValueError(\\"The input DataFrame is empty.\\") if not all(col in df.columns for col in columns): raise ValueError(\\"One or more specified columns do not exist in the DataFrame.\\") X = df[columns] kmeans = KMeans(n_clusters=n_clusters, random_state=random_state) labels = kmeans.fit_predict(X) score = silhouette_score(X, labels) return score"},{"question":"You will write a function that performs addition of two numbers represented by linked lists. Each node in the linked list contains a single digit, and the digits are stored in reverse order, i.e., the least significant digit comes first. Your task is to implement a function `add_linked_lists(l1: ListNode, l2: ListNode) -> ListNode` that takes as input two non-empty linked lists representing two non-negative integers and returns their sum as a linked list. # Steps to Implement: 1. **ListNode Class**: Use or define a simple ListNode class with attributes `val` (to store the digit) and `next` (to point to the next node). 2. **Adding Digits**: Traverse both linked lists while adding the corresponding digits. If a sum results in a carry (i.e., greater than or equal to 10), carry it over to the next digit. 3. **Handling Carry**: Ensure that any remaining carry is correctly added to the resulting linked list after the main loop has finished. 4. **Edge Cases**: Handle cases where the linked lists have different lengths or there is an extra carry left after the final addition. # Your Function ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_linked_lists(l1: ListNode, l2: ListNode) -> ListNode: This function adds two numbers represented by linked lists and returns the sum as a linked list. :param l1: The first linked list representing the first number. :param l2: The second linked list representing the second number. :return: A linked list representing the sum of the two numbers. # Your implementation here return dummy.next ``` # Example ```python # creating the first linked list 2 -> 4 -> 3 representing number 342 l1 = ListNode(2, ListNode(4, ListNode(3))) # creating the second linked list 5 -> 6 -> 4 representing number 465 l2 = ListNode(5, ListNode(6, ListNode(4))) result = add_linked_lists(l1, l2) # printing the result 7 -> 0 -> 8 representing number 807 while result: print(result.val, end=\\" \\") result = result.next # Example output: 7 0 8 ``` **Requirements**: You must use the `ListNode` class for the representation of linked list nodes as detailed in the problem description. # Constraints - Each linked list will contain at least one node. - Digits in the linked lists are non-negative and less than 10. - The function should handle different lengths of input linked lists. - The solution should consider and properly handle remaining carry after the addition.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_linked_lists(l1: ListNode, l2: ListNode) -> ListNode: Adds two numbers represented by linked lists and returns the sum as a linked list. :param l1: The first linked list representing the first number. :param l2: The second linked list representing the second number. :return: A linked list representing the sum of the two numbers. dummy = ListNode() current = dummy carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy.next"},{"question":"You are tasked with writing a function to compute the Jaccard similarity coefficient between two sets of strings. This metric is commonly used in natural language processing to measure the similarity between two sets. **Function Details:** - Function Name: `jaccard_similarity` - Input: - `set1`: A set of strings. - `set2`: A set of strings. - Output: - A single float value representing the Jaccard similarity coefficient. **Requirements:** 1. Compute the intersection of the two sets. 2. Compute the union of the two sets. 3. The Jaccard similarity coefficient is defined as the size of the intersection divided by the size of the union of the sets. **Example:** ```python set1 = {\\"apple\\", \\"banana\\", \\"cherry\\"} set2 = {\\"banana\\", \\"cherry\\", \\"date\\"} similarity = jaccard_similarity(set1, set2) print(similarity) # Output should be approximately 0.5 ``` **Additional Notes:** - Ensure that the function handles the case where both sets are empty. - The function should return 0 if both sets are empty, as per the mathematical convention for Jaccard similarity. Your task is to implement the `jaccard_similarity` function as per the details and requirements above.","solution":"def jaccard_similarity(set1, set2): Returns the Jaccard similarity coefficient between two sets of strings. Parameters: set1 (set): The first set of strings. set2 (set): The second set of strings. Returns: float: The Jaccard similarity coefficient. if not set1 and not set2: return 0.0 intersection = set1.intersection(set2) union = set1.union(set2) return len(intersection) / len(union)"},{"question":"You are tasked with creating a function `windowed_average` that computes a moving average over a list of numbers using a specified window size. The moving average is calculated by taking the average of each consecutive sublist of length `window_size`. The function should output a list of these moving averages. Your implementation should use list comprehensions and the `sum` function to perform the calculations. The function signature should be: ```python def windowed_average(numbers, window_size): ... ``` **Input:** 1. `numbers`: A list of integers or floats. 2. `window_size`: An integer representing the size of the window for calculating the average. **Output:** - A list of floats representing the moving averages. *Note:* If the window size is greater than the length of the list, the function should return an empty list. **Example:** ```python input_numbers = [1, 2, 3, 4, 5] input_window_size = 3 output = windowed_average(input_numbers, input_window_size) print(output) # Output should be [2.0, 3.0, 4.0] ```","solution":"def windowed_average(numbers, window_size): Computes a moving average over a list of numbers using a specified window size. Parameters: - numbers: list of integers or floats - window_size: integer representing the size of the window for calculating the average Returns: - list of floats representing the moving averages if window_size > len(numbers): return [] return [ sum(numbers[i:i + window_size]) / window_size for i in range(len(numbers) - window_size + 1) ]"},{"question":"** You are tasked with implementing a function `find_mode` which determines the mode (i.e., the value that appears most frequently) of a given list of integers. If there are multiple modes, return all of them in ascending order. Function Signature: ```python def find_mode(numbers: List[int]) -> List[int]: pass ``` # Input - `numbers` (List[int]): A list of integers. # Output - The function should return a list of integers representing the mode(s) of the input list in ascending order. # Constraints - The list can have at most 10,000 integers. - Each integer in the list can range from -10,000 to 10,000. - The input list will have at least one integer. # Examples: 1. Input: `[1, 2, 3, 3, 2, 4, 1, 1]` Output: `[1]` 2. Input: `[4, 5, 6, 6, 5, 5, 6]` Output: `[5, 6]` # Requirements: 1. You must handle the case where there are multiple modes. 2. The output list should be in ascending order. # Learning Objective: By completing this task, you will gain proficiency in handling collections in Python, particularly utilizing data structures like dictionaries for counting frequency and lists for storing multiple results. Additionally, you will practice sorting mechanisms and understand how to manage tie conditions effectively. **","solution":"from typing import List from collections import Counter def find_mode(numbers: List[int]) -> List[int]: if not numbers: return [] # Count the frequency of each number counter = Counter(numbers) # Find the highest frequency max_frequency = max(counter.values()) # Collect all numbers that have the highest frequency modes = [num for num, freq in counter.items() if freq == max_frequency] # Return the modes in ascending order return sorted(modes)"},{"question":"You are tasked with writing a function that evaluates a mathematical expression containing addition and subtraction operations. The function should parse a given string, perform the addition and subtraction operations in the correct order, and return the resulting value as an integer. Your function should be named `evaluate_add_subtract` and should perform the following steps: 1. **Parse the input string** to extract individual numbers and the corresponding operators (`+` for addition and `-` for subtraction). 2. **Perform the operations sequentially** from left to right, respecting the order they appear in the string. 3. **Return the final result as an integer.** Function Signature ```python def evaluate_add_subtract(expression: str) -> int: ``` Input - `expression` (string): A string containing a mathematical expression with addition and/or subtraction operations. The string contains only integers and the operators `+` and `-`. No multiplication or division operators are present, and the input string does not have any spaces around the numbers. Output - (int): The result of the mathematical operations in the input string. Example ```python print(evaluate_add_subtract(\\"10+20-4+5-1\\")) # Output should be 30 ``` In the given example: - `expression = \\"10+20-4+5-1\\"` - The operation performed is: `10 + 20 - 4 + 5 - 1` - The result is `30`, which should be returned as the integer `30`.","solution":"def evaluate_add_subtract(expression: str) -> int: Evaluates a mathematical expression containing addition and subtraction operations. # Initialize current number and result current_number = 0 result = 0 operator = \'+\' i = 0 while i < len(expression): char = expression[i] if char.isdigit(): current_number = current_number * 10 + int(char) if not char.isdigit() or i == len(expression) - 1: if operator == \'+\': result += current_number elif operator == \'-\': result -= current_number operator = char current_number = 0 i += 1 return result"},{"question":"Create a function that takes a Pandas DataFrame and identifies duplicate rows based on specified columns. The function should then remove duplicate rows and append a suffix \'_dup\' to the column name of every column that was used to determine duplicates. Lastly, the function should return the modified DataFrame. The function should raise a ValueError if the input DataFrame is not of the correct type, empty, or does not contain the specified columns. The function should output: DataFrame: The modified DataFrame with duplicate rows removed and the specified columns renamed. You should write self-contained code starting with: ``` import pandas as pd def remove_duplicates_and_rename(df, subset_columns): ```","solution":"import pandas as pd def remove_duplicates_and_rename(df, subset_columns): Removes duplicate rows based on the columns specified in subset_columns and appends \'_dup\' to the names of these columns. Parameters: df (pd.DataFrame): The input DataFrame to process. subset_columns (list of str): List of column names based on which duplicates are identified and removed. Returns: pd.DataFrame: The modified DataFrame with duplicates removed and columns renamed. Raises: ValueError: If df is not a DataFrame, is empty, or if subset_columns are not in df. if not isinstance(df, pd.DataFrame): raise ValueError(\\"Input is not a pandas DataFrame\\") if df.empty: raise ValueError(\\"Input DataFrame is empty\\") if not all(column in df.columns for column in subset_columns): raise ValueError(\\"Some columns specified in subset_columns are not in the DataFrame\\") # Remove duplicate rows based on subset_columns df = df.drop_duplicates(subset=subset_columns) # Rename the columns used for identifying duplicates rename_dict = {col: col + \'_dup\' for col in subset_columns} df = df.rename(columns=rename_dict) return df"},{"question":"Sort a list of product reviews in ascending order by their review scores. In case of a tie, preserve the original order of the reviews as they appeared in the input list. The function should return a list of dictionaries representing the sorted reviews. Each dictionary contains the keys \'product\', \'score\', and \'review\'. The function should output: - list: A list of dictionaries with each dictionary containing (\'product\', \'score\', \'review\'). You should write self-contained code starting with: ``` from collections import namedtuple from typing import List, Dict def sort_reviews(reviews: List[Dict[str, int]]) -> List[Dict[str, int]]: ```","solution":"from typing import List, Dict def sort_reviews(reviews: List[Dict[str, int]]) -> List[Dict[str, int]]: Sorts a list of product reviews in ascending order by their review scores. In case of a tie, preserve the original order of the reviews as they appeared in the input list. return sorted(reviews, key=lambda x: x[\'score\'])"},{"question":"You are given a dataset containing information about various articles and their respective categories. The dataset is stored in a pandas DataFrame, and specifically, we are interested in the \'Category\' column. Your task is to write a function that calculates and displays the count of articles in each category. The function should be named `category_article_counts(df)`, where `df` is a pandas DataFrame containing at least the column \'Category\'. The function should print each category along with the count of articles in that category. To achieve this, you are required to use the following pandas functions: - `pandas.Series.value_counts` ```python def category_article_counts(df): Counts and prints the number of articles in each category from the given DataFrame. Parameters: df (pandas.DataFrame): The input DataFrame with a column \'Category\'. Returns: None print(\'nCalculating Article Counts per Category...n\') # TO DO: count the number of articles in each category # code block to calculate the counts category_counts = df[\'Category\'].value_counts() # TO DO: display the counts # code to print each category and its count for category, count in category_counts.items(): print(f\'Category: {category}, Count: {count}\') print(\'-\'*40) ```","solution":"import pandas as pd def category_article_counts(df): Counts and prints the number of articles in each category from the given DataFrame. Parameters: df (pandas.DataFrame): The input DataFrame with a column \'Category\'. Returns: None category_counts = df[\'Category\'].value_counts() for category, count in category_counts.items(): print(f\'Category: {category}, Count: {count}\')"},{"question":"Visualize the sentiment of words from a given string of text using a pie chart. The function takes a text input, classifies each word into positive, negative, or neutral sentiment using a predefined dictionary, and plots a pie chart of the sentiment distribution. The function should output with: Axes: The matplotlib Axes object for the pie chart. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt from collections import Counter def analyze_sentiment(text): sentiment_dict = { \'happy\': \'positive\', \'joy\': \'positive\', \'excellent\': \'positive\', \'good\': \'positive\', \'sad\': \'negative\', \'bad\': \'negative\', \'terrible\': \'negative\', \'horrible\': \'negative\', \'okay\': \'neutral\', \'fine\': \'neutral\', \'average\': \'neutral\' } words = text.split() sentiment_counts = Counter(sentiment_dict.get(word.lower(), \'neutral\') for word in words) labels = sentiment_counts.keys() sizes = sentiment_counts.values() fig, ax = plt.subplots() ax.pie(sizes, labels=labels, autopct=\'%1.1f%%\', startangle=90) ax.axis(\'equal\') return ax ```","solution":"import matplotlib.pyplot as plt from collections import Counter def analyze_sentiment(text): sentiment_dict = { \'happy\': \'positive\', \'joy\': \'positive\', \'excellent\': \'positive\', \'good\': \'positive\', \'sad\': \'negative\', \'bad\': \'negative\', \'terrible\': \'negative\', \'horrible\': \'negative\', \'okay\': \'neutral\', \'fine\': \'neutral\', \'average\': \'neutral\' } # Split the text into words and count sentiments words = text.split() sentiment_counts = Counter(sentiment_dict.get(word.lower(), \'neutral\') for word in words) # Create labels and sizes for pie chart labels = sentiment_counts.keys() sizes = sentiment_counts.values() # Create a pie chart fig, ax = plt.subplots() ax.pie(sizes, labels=labels, autopct=\'%1.1f%%\', startangle=90) ax.axis(\'equal\') # Equal aspect ratio ensures that pie is drawn as a circle. return ax"},{"question":"In this problem, you are tasked with implementing a function that computes the intersection of two line segments in a 2D plane using the `line_segment_intersection` function. Given two line segments, each defined by two endpoints, the task is to determine if the segments intersect and, if they do, compute the intersection point. Each line segment is provided as a list of two points, where each point is a list of two coordinates `[x, y]`. The function should handle both proper intersections (where the segments cross each other) and improper intersections (where the endpoints of the segments touch). To determine if two line segments intersect, you can use the following steps: 1. Compute the vectors from the endpoints of the first segment to the endpoints of the second segment. 2. Use the cross product to check if the segments are collinear. 3. If the segments are collinear, check if their projections on the x-axis and y-axis overlap. 4. If the segments are not collinear, use the cross product to determine the intersection point. The function `line_segment_intersection(segment1, segment2)` should: - Take `segment1` and `segment2` as inputs, where each segment is represented as `[[x1, y1], [x2, y2]]`. - Return `None` if the segments do not intersect. - Return the intersection point `[x, y]` as a list if they intersect. Here\'s the detailed implementation: ```python import numpy as np def line_segment_intersection(segment1, segment2): def subtract(p1, p2): return [p1[0] - p2[0], p1[1] - p2[1]] def cross_product(v1, v2): return v1[0] * v2[1] - v1[1] * v2[0] def on_segment(p, q, r): return min(p[0], q[0]) <= r[0] <= max(p[0], q[0]) and min(p[1], q[1]) <= r[1] <= max(p[1], q[1]) p1, p2 = segment1 p3, p4 = segment2 d1 = subtract(p2, p1) d2 = subtract(p4, p3) denom = cross_product(d1, d2) if denom == 0: # Segments are collinear if cross_product(subtract(p3, p1), d1) == 0: if on_segment(p1, p2, p3) or on_segment(p1, p2, p4) or on_segment(p3, p4, p1) or on_segment(p3, p4, p2): return True # Improper intersection detected return None # No intersection # General case t = cross_product(subtract(p3, p1), d2) / denom u = cross_product(subtract(p3, p1), d1) / denom if 0 <= t <= 1 and 0 <= u <= 1: intersection_point = [p1[0] + t * d1[0], p1[1] + t * d1[1]] return intersection_point return None # Testing the function segment1 = [[1, 1], [4, 4]] segment2 = [[1, 8], [2, 4]] print(line_segment_intersection(segment1, segment2)) # Output should be the intersection point or None if no intersection ```","solution":"import numpy as np def line_segment_intersection(segment1, segment2): def subtract(p1, p2): return [p1[0] - p2[0], p1[1] - p2[1]] def cross_product(v1, v2): return v1[0] * v2[1] - v1[1] * v2[0] def on_segment(p, q, r): return min(p[0], q[0]) <= r[0] <= max(p[0], q[0]) and min(p[1], q[1]) <= r[1] <= max(p[1], q[1]) p1, p2 = segment1 p3, p4 = segment2 d1 = subtract(p2, p1) d2 = subtract(p4, p3) denom = cross_product(d1, d2) if denom == 0: # Segments are collinear if cross_product(subtract(p3, p1), d1) == 0: if on_segment(p1, p2, p3) or on_segment(p1, p2, p4) or on_segment(p3, p4, p1) or on_segment(p3, p4, p2): return True # Improper intersection detected return None # No intersection # General case t = cross_product(subtract(p3, p1), d2) / denom u = cross_product(subtract(p3, p1), d1) / denom if 0 <= t <= 1 and 0 <= u <= 1: intersection_point = [p1[0] + t * d1[0], p1[1] + t * d1[1]] return intersection_point return None"},{"question":"You are tasked with writing a function called `sort_dict_by_value` that sorts a dictionary by its values. The function should take a dictionary as an input where the keys are strings and the values are integers. The function will return a list of tuples where each tuple contains a key-value pair from the dictionary, sorted in descending order based on the values. If two keys have the same value, the sorting should maintain the relative order of these keys as they appear in the original dictionary (stable sort). Your function should resemble the following definition: ```python def sort_dict_by_value(d): sort_dict_by_value(dict d) -> list of tuples Function to return a sorted list of tuples based on dictionary values in descending order. d: dict - The dictionary to be sorted, with string keys and integer values. # Your code here ``` # Example Assume you have the following dictionary: ```python d = { \\"apple\\": 10, \\"banana\\": 2, \\"cherry\\": 25, \\"date\\": 2 } sorted_list = sort_dict_by_value(d) ``` The `sorted_list` should be: ```python [ (\\"cherry\\", 25), (\\"apple\\", 10), (\\"banana\\", 2), (\\"date\\", 2) ] ``` # Requirements: - Ensure the sorting is done in descending order based on the dictionary values. - Handle the sorting in a stable manner if values are the same.","solution":"def sort_dict_by_value(d): sort_dict_by_value(dict d) -> list of tuples Function to return a sorted list of tuples based on dictionary values in descending order. d: dict - The dictionary to be sorted, with string keys and integer values. Returns: list of tuples: List containing key-value pairs from the dictionary, sorted by value in descending order. # Use sorted with key parameter to sort based on values in descending order, # and ensure stable sorting if values are the same. return sorted(d.items(), key=lambda item: item[1], reverse=True)"},{"question":"Create a Python function, `create_number_pyramid(n)`, which generates a number pyramid using nested loops. The pyramid should have `n` levels, with the numbers starting from 1 at the top and increasing in value as the levels go down. Each level should have the same number of elements as its level number, all spaced equally from each other. For example, if `n = 4`, the output should be: ``` 1 2 2 3 3 3 4 4 4 4 ``` In this task, you\'ll need to: 1. Define a function `create_number_pyramid(n)` that takes one argument `n`. 2. Use loops to iterate through levels and within each level, print the appropriate numbers, ensuring proper spacing. 3. The function should then construct the pyramid as a string where each row is separated by a newline character. Function Specification: - **Function Name**: create_number_pyramid - **Input**: Integer `n` representing the number of levels in the pyramid. - **Output**: A single string representing the constructed number pyramid, with each level separated by a newline character (\'n\'). Example: ```python print(create_number_pyramid(4)) ``` Output: ``` 1 2 2 3 3 3 4 4 4 4 ``` The pyramid aligns center-left and each level starts with a number increasing from 1 to `n`, with each number repeated according to its level and equally spaced.","solution":"def create_number_pyramid(n): Generates a number pyramid with n levels. pyramid = \\"\\" for level in range(1, n + 1): # Calculate the spaces required before the numbers start in this level spaces = \' \' * (n - level) # Create the level string level_str = \' \'.join([str(level)] * level) # Add the spaces before the numbers and newline after each level pyramid += spaces + level_str + \'n\' return pyramid.rstrip() print(create_number_pyramid(4))"},{"question":"You are developing a logistics system to manage the delivery of packages. One of the challenges involves optimizing the delivery routes taken by delivery drivers. Each driver can only carry a certain number of packages each day, and each package has a specific delivery time window (between a start and end time, inclusive). Your task is to determine the maximum number of packages a driver can deliver in a single day without violating the time windows of the packages. Your task is to implement a function `max_deliveries(packages: List[Tuple[int, int]]) -> int` that calculates the maximum number of packages that can be delivered by a single driver within their designated time windows. Function Signature: ```python def max_deliveries(packages: List[Tuple[int, int]]) -> int: pass ``` Parameters: - `packages (List[Tuple[int, int]])`: A list of tuples where each tuple `(start, end)` represents the time window `[start, end]` for a package delivery. Returns: - `int`: The maximum number of packages that can be delivered within the given time windows. Examples: ```python assert max_deliveries([(1, 4), (2, 3), (3, 5), (6, 7)]) == 3 assert max_deliveries([(1, 2), (3, 4), (5, 6), (7, 8)]) == 4 assert max_deliveries([(1, 4), (4, 5), (5, 6), (6, 7)]) == 4 assert max_deliveries([(1, 4), (2, 3), (4, 5), (5, 6), (6, 7)]) == 4 ``` Steps: 1. Develop a greedy algorithm to find the maximum number of non-overlapping intervals. 2. Sort the packages by their end times. 3. Iterate through the sorted packages; for each package, select it if it does not overlap with the previously selected package. 4. Return the count of selected packages. Constraints: - The length of `packages` will not exceed 1000. - Each time window tuple consists of two integers `start` and `end` (1 ≤ start ≤ end ≤ 1440), representing the time windows in minutes since midnight. Ensure that all time windows and package selections are validated to optimize the delivery process efficiently.","solution":"from typing import List, Tuple def max_deliveries(packages: List[Tuple[int, int]]) -> int: Determines the maximum number of packages that can be delivered by a single driver without violating the time windows of the packages. Parameters: packages (List[Tuple[int, int]]): A list of tuples where each tuple (start, end) represents the time window [start, end] for a package delivery. Returns: int: The maximum number of packages that can be delivered within the given time windows. # Sort the packages by their end times packages.sort(key=lambda x: x[1]) # Initialize count of deliveries and the end time of the last delivered package deliveries = 0 last_end_time = 0 for start, end in packages: if start >= last_end_time: # Schedule the delivery of this package deliveries += 1 last_end_time = end # Update the last end time to the end time of the current package return deliveries"},{"question":"You are required to write a function named `get_restaurant_recommendations` which fetches restaurant information based on a specified cuisine type within a radius of a given geographic location. Your function should use the `requests` and `json` libraries in Python. Here are the function specifications: # Function Signature ```python def get_restaurant_recommendations(api_key: str, lat: str, long: str, cuisine: str, radius: str = \'1000\') -> dict: ``` # Parameters - `api_key` (str): Your API key for accessing the restaurant data service. - `lat` (str): The latitude of the point of search. - `long` (str): The longitude of the point of search. - `cuisine` (str): The desired cuisine type. - `radius` (str): The radius of the search area in meters. The default value should be `1000`. # Returns - `dict`: A dictionary containing a list of recommended restaurants, including their names, addresses, and ratings. # Constraints 1. The function should validate that the inputs are of type `str`. 2. The function should return an error message if the API request fails or if no results are found. # Example Usage ```python >>> get_restaurant_recommendations(\'[YOUR_API_KEY]\', \'40.712776\', \'-74.005974\', \'Italian\') >>> get_restaurant_recommendations(\'[YOUR_API_KEY]\', \'40.712776\', \'-74.005974\', \'Mexican\', \'2000\') ``` # Data Service Endpoint The data service URL is: ``` https://api.example.com/restaurants ``` # Required Libraries - `requests` - `json` Ensure your implementation follows the above specifications precisely.","solution":"import requests def get_restaurant_recommendations(api_key: str, lat: str, long: str, cuisine: str, radius: str = \'1000\') -> dict: Fetches restaurant information based on specified cuisine type within a radius of a given geographic location. Parameters: api_key (str): API key for accessing the restaurant data service. lat (str): Latitude of the point of search. long (str): Longitude of the point of search. cuisine (str): Desired cuisine type. radius (str): Radius of the search area in meters. Default is 1000. Returns: dict: A dictionary containing a list of recommended restaurants, or an error message. if not all(isinstance(arg, str) for arg in [api_key, lat, long, cuisine, radius]): return {\\"error\\": \\"All inputs must be of type \'str\'\\"} url = \\"https://api.example.com/restaurants\\" params = { \\"apikey\\": api_key, \\"lat\\": lat, \\"long\\": long, \\"cuisine\\": cuisine, \\"radius\\": radius } try: response = requests.get(url, params=params) if response.status_code == 200: data = response.json() if \'restaurants\' not in data or len(data[\'restaurants\']) == 0: return {\\"error\\": \\"No results found\\"} return data else: return {\\"error\\": \\"API request failed with status code: {}\\".format(response.status_code)} except requests.exceptions.RequestException as e: return {\\"error\\": str(e)}"},{"question":"Write a function to assist with a university\'s student course enrollment system. The system receives a CSV file containing enrollment data with columns \\"Student ID\\", \\"Course ID\\", \\"Enrollment Date\\", and \\"Status\\". The function should validate the \\"Enrollment Date\\" to ensure it is in the \\"yyyy-mm-dd\\" format and mark the enrollment as \\"Invalid\\" if the date format is incorrect. Additionally, it should check if the \\"Status\\" is either \\"Enrolled\\", \\"Waitlisted\\", or \\"Dropped\\" and mark as \\"Invalid\\" if any other value is found. The function returns a DataFrame with the validated status for each enrollment record. The function should raise exceptions for: - FileNotFoundError: If the CSV file does not exist. - ValueError: If any of the columns \\"Student ID\\", \\"Course ID\\", or \\"Status\\" are missing. The function should output: - pd.DataFrame: A pandas DataFrame with the validated \\"Status\\". You should write self-contained code starting with: ``` import os import pandas as pd from datetime import datetime def validate_enrollment(data_dir: str, csv_file: str) -> pd.DataFrame: ```","solution":"import os import pandas as pd from datetime import datetime def validate_enrollment(data_dir: str, csv_file: str) -> pd.DataFrame: file_path = os.path.join(data_dir, csv_file) if not os.path.exists(file_path): raise FileNotFoundError(f\\"The file {csv_file} does not exist in {data_dir}.\\") df = pd.read_csv(file_path) required_columns = [\\"Student ID\\", \\"Course ID\\", \\"Enrollment Date\\", \\"Status\\"] for column in required_columns: if column not in df.columns: raise ValueError(f\\"Missing required column: {column}\\") def validate_date(date_str): try: datetime.strptime(date_str, \\"%Y-%m-%d\\") return True except ValueError: return False valid_status = [\\"Enrolled\\", \\"Waitlisted\\", \\"Dropped\\"] def validate_status(row): valid_date = validate_date(row[\\"Enrollment Date\\"]) valid_status = row[\\"Status\\"] in [\\"Enrolled\\", \\"Waitlisted\\", \\"Dropped\\"] if not valid_date or not valid_status: return \\"Invalid\\" return row[\\"Status\\"] df[\\"Status\\"] = df.apply(validate_status, axis=1) return df"},{"question":"Create a Python class called `DataAnalyzer` that takes in a list of numbers and provides methods for calculating the mean, median, and mode of the list. This task helps you practice using classes, methods, and basic statistical calculations in Python. 1. **`numbers`**: This list parameter contains the numerical data to be analyzed. The class should have the following methods: - `calculate_mean`: This method should return the mean (average) of the list of numbers. - `calculate_median`: This method should return the median (middle value) of the list of numbers. - `calculate_mode`: This method should return the mode (the most frequently occurring value) of the list of numbers. If there are multiple values with the same frequency, return any one of them. Example usage: ```python numbers = [1, 2, 3, 3, 4, 5, 5, 5, 6, 7] analyzer = DataAnalyzer(numbers) mean = analyzer.calculate_mean() print(f\\"Mean: {mean}\\") median = analyzer.calculate_median() print(f\\"Median: {median}\\") mode = analyzer.calculate_mode() print(f\\"Mode: {mode}\\") ``` Expected output: ``` Mean: 4.1 Median: 4.5 Mode: 5 ``` **Requirements**: - Implement the `calculate_mean` method to compute the mean of the list. - Implement the `calculate_median` method to compute the median of the list. - Implement the `calculate_mode` method to compute the mode of the list. - Handle the cases where the list may contain multiple modes (select any one). - Ensure that your methods can handle inputs with the minimum number of elements valid for median and mode calculations.","solution":"from collections import Counter class DataAnalyzer: def __init__(self, numbers): self.numbers = numbers def calculate_mean(self): Returns the mean (average) of the list of numbers. return sum(self.numbers) / len(self.numbers) def calculate_median(self): Returns the median (middle value) of the list of numbers. sorted_numbers = sorted(self.numbers) n = len(sorted_numbers) mid = n // 2 if n % 2 == 0: return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2 else: return sorted_numbers[mid] def calculate_mode(self): Returns the mode (the most frequently occurring value) of the list of numbers. If there are multiple values with the same frequency, return any one of them. count = Counter(self.numbers) max_count = max(count.values()) mode = [key for key, value in count.items() if value == max_count] return mode[0]"},{"question":"A robot is navigating a two-dimensional grid with obstacles. The robot can move up, down, left, or right, but it cannot move through obstacles. Your task is to implement a function named `find_path` that finds a path from the robot\'s starting position to its destination position using the Breadth-First Search (BFS) algorithm. If a path is found, return it as a list of grid positions (tuples), otherwise return an empty list. The function `find_path` should follow this signature: ```python def find_path(start, goal, grid): # your implementation here return path ``` The parameters are: - `start` (tuple of int) - the robot\'s starting position (x, y). - `goal` (tuple of int) - the robot\'s destination position (x, y). - `grid` (list of list of int) - a 2D list representing the grid, where `0` represents an open space and `1` represents an obstacle. **Example Usage:** ```python # Define the grid grid = [ [0, 0, 0, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0] ] # Define starting and goal positions start = (0, 0) goal = (4, 4) # Find path path = find_path(start, goal, grid) print(path) # Output should be a list of positions representing the found path, or an empty list if no path exists ```","solution":"from collections import deque def find_path(start, goal, grid): Uses BFS to find a path from start to goal in a 2D grid with obstacles. :param start: tuple (x, y) indicating starting position :param goal: tuple (x, y) indicating goal position :param grid: list of list of int, where 0 is open space and 1 is obstacle :return: list of tuples representing the path from start to goal, or an empty list if no path exists if start == goal: return [start] rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right visited = set() queue = deque([(start, [start])]) while queue: (current, path) = queue.popleft() if current in visited: continue visited.add(current) for direction in directions: neighbor = (current[0] + direction[0], current[1] + direction[1]) if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0: if neighbor == goal: return path + [neighbor] if neighbor not in visited: queue.append((neighbor, path + [neighbor])) return []"},{"question":"You are required to develop a function in Python that reads a CSV file containing movie data and returns a dictionary summarizing the number of movies released each year. The CSV file contains the following columns: - `title` (string): The title of the movie. - `release_year` (integer): The year the movie was released. The function you need to implement is called `summarize_movie_releases` which should follow these specifications: - **Function Name**: `summarize_movie_releases` - **Arguments**: - `file_path` (string): The path to the CSV file. - **Returns**: A dictionary where the keys are years (integers) and the values are the number of movies (integers) released in those years. You should use the `csv` module to read the file and process its data. Remember to handle the situation where the file might have missing data in any row and skip such rows. # Example: Assume `movies.csv` contains the following data: ```csv title,release_year Movie A,2020 Movie B,2019 Movie C,2020 Movie D, Movie E,2018 ``` ```python result = summarize_movie_releases(\'movies.csv\') # Expected output: # { # 2020: 2, # 2019: 1, # 2018: 1 # } ``` Implement the function `summarize_movie_releases` to achieve the above functionality.","solution":"import csv from collections import defaultdict def summarize_movie_releases(file_path): Reads a CSV file and returns a dictionary summarizing the number of movies released each year. Arguments: file_path (string): The path to the CSV file. Returns: dict: A dictionary where keys are years (integers) and values are the number of movies (integers) released in those years. movie_counts = defaultdict(int) with open(file_path, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: try: year = int(row[\'release_year\']) movie_counts[year] += 1 except (ValueError, KeyError): # Ignore rows with missing or non-integer \'release_year\' continue return dict(movie_counts)"},{"question":"Develop a function that will accept a DataFrame containing columns \'UserID\', \'Activity\', and \'Timestamp\'. This function should group the data by \'UserID\' and calculate the total number of unique activities each user performed. The result should be a DataFrame with columns \'UserID\' and \'UniqueActivityCount\'. The function should raise the exception for: ValueError: If \'df\' is not a DataFrame or if required columns are missing. The function should output with: pandas.DataFrame: A DataFrame with \'UserID\' and their corresponding \'UniqueActivityCount\'. You should write self-contained code starting with: ``` import pandas as pd def calculate_unique_activities(df): ```","solution":"import pandas as pd def calculate_unique_activities(df): Group the data by \'UserID\' and calculate the total number of unique activities each user performed. Raise a ValueError if \'df\' is not a DataFrame or if required columns are missing. Parameters: df (pandas.DataFrame): Input DataFrame containing \'UserID\', \'Activity\', and \'Timestamp\'. Returns: pandas.DataFrame: DataFrame with \'UserID\' and \'UniqueActivityCount\'. # Check if input is a pandas DataFrame if not isinstance(df, pd.DataFrame): raise ValueError(\\"Input is not a DataFrame\\") # Check if required columns are present required_columns = {\'UserID\', \'Activity\', \'Timestamp\'} if not required_columns.issubset(df.columns): raise ValueError(\\"DataFrame is missing required columns\\") # Group by \'UserID\' and calculate number of unique activities grouped_df = df.groupby(\'UserID\')[\'Activity\'].nunique().reset_index() # Rename the columns grouped_df.columns = [\'UserID\', \'UniqueActivityCount\'] return grouped_df"},{"question":"Write a function that takes a string consisting of words separated by spaces and counts the number of occurrences of each word, regardless of case. Return the result as a dictionary where the keys are words and the values are the counts. Ignore punctuation and consider words as having only alphabetical characters. Ensure the implementation is efficient and can handle large inputs. The function should output: dict: A dictionary where the keys are words (lowercased) and the values are their respective counts. You should write self-contained code starting with: ``` import re def word_count(sentence): ```","solution":"import re from collections import defaultdict def word_count(sentence): Returns a dictionary with the count of each word in the sentence. Words are considered case-insensitive and punctuation is ignored. sentence = sentence.lower() words = re.findall(r\'bw+b\', sentence) word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"You have been hired to develop a Python function to search for the top N frequently occurring words in a given text file. This will help you hone your skills in file handling, string manipulation, and utilizing data structures to store word counts. The function you need to write is named `top_n_words`. This function should: 1. **Read the content of the text file** whose path is provided as an argument. 2. **Normalize the text** by converting all words to lower case and removing punctuation. 3. **Count the occurrences** of each word in the file. 4. **Sort the words by their frequency**, and determine the top N words. 5. **Print the top N words** along with their counts. Function Signature: ```python def top_n_words(file_path: str, n: int) -> None: pass ``` # Input: - `file_path`: A string representing the path to the text file from which words will be read and counted. - `n`: An integer indicating the number of top occurring words to be returned. # Output: - Print the top N most frequently occurring words along with their count. # Example: Suppose the content of `sample.txt` is: ``` Hello world! This is a test. Hello again, world. ``` If `file_path` is `\'sample.txt\'` and `n` is `2`, the expected output would be: ``` hello: 2 world: 2 ``` Use the `string` library for punctuation handling and the `collections` library for counting word occurrences.","solution":"import string from collections import Counter def top_n_words(file_path: str, n: int) -> None: # Read the content of the text file with open(file_path, \'r\') as file: text = file.read() # Normalize the text text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split the text into words words = text.split() # Count the occurrences of each word word_counts = Counter(words) # Get the top N words most_common_words = word_counts.most_common(n) # Print the top N words with their counts for word, count in most_common_words: print(f\\"{word}: {count}\\")"},{"question":"You are tasked with writing a function in Python to determine if a given string is a valid identifier according to the rules for Python identifiers. Your function should be named `is_valid_identifier`. Function Signature ```python def is_valid_identifier(identifier: str) -> bool: ``` Parameters - `identifier` (str): A string that needs to be evaluated. Returns - `result` (bool): A boolean value that indicates whether the provided string is a valid Python identifier. Example ```python print(is_valid_identifier(\\"valid_name\\")) # Output: True print(is_valid_identifier(\\"_validName1\\")) # Output: True print(is_valid_identifier(\\"1InvalidName\\")) # Output: False print(is_valid_identifier(\\"invalid-name\\")) # Output: False ``` Requirements 1. Follow the rules for defining a valid Python identifier: - An identifier must start with either a letter (uppercase A-Z or lowercase a-z) or an underscore (_). - The rest of the identifier name can contain letters, digits (0-9), or underscores. - Identifiers are case-sensitive. - Keywords and built-in function names should not be used as identifiers. 2. Use Python\'s built-in string methods and the `keyword` module to evaluate the identifier. 3. Efficiency is key; avoid unnecessary computations.","solution":"import keyword def is_valid_identifier(identifier: str) -> bool: Determines if the given string is a valid Python identifier. if not identifier.isidentifier(): return False if keyword.iskeyword(identifier): return False return True"},{"question":"You are given a list of integers representing daily stock prices of a particular stock. Your task is to implement a function `max_profit` that calculates the maximum profit that could be achieved by buying and selling the stock over the given period. The `max_profit` function should take the list of stock prices as its only argument and return the maximum profit. If no profit can be achieved, the function should return 0. Additionally, you need to plot the stock prices showing the buy and sell days that yield the maximum profit using `matplotlib.pyplot`. The buy day should be marked with a green triangle marker and the sell day with a red triangle marker. Your implementation should include: 1. The `max_profit` function. 2. A main function that: - Calls `max_profit` with the provided stock prices `[7, 1, 5, 3, 6, 4]`. - Uses `matplotlib.pyplot.plot` to plot the stock prices. - Marks the buy day with a green triangle marker and the sell day with a red triangle marker. - Sets appropriate labels for the axes using `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel`. - Displays the plot. ```python def max_profit(prices): if not prices: return 0, None, None min_price = prices[0] max_profit = 0 buy_day = sell_day = 0 for i in range(1, len(prices)): if prices[i] - min_price > max_profit: max_profit = prices[i] - min_price sell_day = i if prices[i] < min_price: min_price = prices[i] buy_day = i return max_profit, buy_day, sell_day def main(): prices = [7, 1, 5, 3, 6, 4] profit, buy_day, sell_day = max_profit(prices) print(f\\"The maximum profit is: {profit}\\") print(f\\"Buy on day: {buy_day} at price: {prices[buy_day]}\\") print(f\\"Sell on day: {sell_day} at price: {prices[sell_day]}\\") plt.plot(prices, marker=\'o\', color=\'b\', label=\'Stock Prices\') if profit > 0: plt.plot(buy_day, prices[buy_day], marker=\'^\', markersize=10, color=\'g\', label=\'Buy Day\') plt.plot(sell_day, prices[sell_day], marker=\'v\', markersize=10, color=\'r\', label=\'Sell Day\') plt.xlabel(\'Days\') plt.ylabel(\'Stock Prices\') plt.legend() plt.show() if __name__ == \\"__main__\\": main() ```","solution":"import matplotlib.pyplot as plt def max_profit(prices): Returns the maximum profit that could be achieved by buying and selling the stock over the given period. if not prices: return 0, None, None min_price = prices[0] max_profit = 0 buy_day = sell_day = 0 for i in range(1, len(prices)): if prices[i] - min_price > max_profit: max_profit = prices[i] - min_price sell_day = i if prices[i] < min_price: min_price = prices[i] buy_day = i if max_profit == 0: return 0, None, None return max_profit, buy_day, sell_day def main(): prices = [7, 1, 5, 3, 6, 4] profit, buy_day, sell_day = max_profit(prices) print(f\\"The maximum profit is: {profit}\\") if buy_day is not None and sell_day is not None: print(f\\"Buy on day: {buy_day} at price: {prices[buy_day]}\\") print(f\\"Sell on day: {sell_day} at price: {prices[sell_day]}\\") plt.plot(prices, marker=\'o\', color=\'b\', label=\'Stock Prices\') if buy_day is not None and sell_day is not None: plt.plot(buy_day, prices[buy_day], marker=\'^\', markersize=10, color=\'g\', label=\'Buy Day\') plt.plot(sell_day, prices[sell_day], marker=\'v\', markersize=10, color=\'r\', label=\'Sell Day\') plt.xlabel(\'Days\') plt.ylabel(\'Stock Prices\') plt.legend() plt.show() if __name__ == \\"__main__\\": main()"},{"question":"You are required to create a function `plot_linear_regression` which visualizes a dataset and fits a linear regression line using the `matplotlib.pyplot` and `numpy` libraries. The specific requirements for this function are as follows: 1. **Function Name**: `plot_linear_regression` 2. **Parameters**: - `x`: A numpy array representing the x-axis data. - `y`: A numpy array representing the y-axis data. - `line_color`: A string representing the color of the regression line (e.g., \'blue\', \'green\'). - `scatter_color`: A string representing the color of the scatter plot points (e.g., \'red\', \'yellow\'). 3. **Functionality**: - Create a scatter plot of the data with the points colored as specified by `scatter_color`. - Compute the coefficients of the linear regression line using the `numpy.polyfit` function applied to `x` and `y`. - Plot the regression line using the computed coefficients with the color specified by `line_color`. - Title the plot as \\"Linear Regression\\". - Label the x-axis as \\"X\\" and y-axis as \\"Y\\". - Configure the axes such that only the bottom and left spines are visible and position them at zero if necessary. Only ticks on the bottom and left axes should be visible. You should utilize the `matplotlib.pyplot.scatter`, `matplotlib.pyplot.plot`, `matplotlib.pyplot.title`, and `numpy.polyfit` APIs as required.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_linear_regression(x, y, line_color, scatter_color): Plots a scatter plot of the dataset and fits a linear regression line. Parameters: - x: A numpy array representing the x-axis data. - y: A numpy array representing the y-axis data. - line_color: A string representing the color of the regression line. - scatter_color: A string representing the color of the scatter plot points. # Scatter plot of the data plt.scatter(x, y, color=scatter_color) # Compute the coefficients of the linear regression line coeffs = np.polyfit(x, y, 1) poly_eqn = np.poly1d(coeffs) # Plot the regression line plt.plot(x, poly_eqn(x), color=line_color, label=\'Regression Line\') # Set plot title and labels plt.title(\\"Linear Regression\\") plt.xlabel(\\"X\\") plt.ylabel(\\"Y\\") # Modify axis spines and ticks ax = plt.gca() ax.spines[\'top\'].set_color(\'none\') ax.spines[\'right\'].set_color(\'none\') ax.spines[\'bottom\'].set_position(\'zero\') ax.spines[\'left\'].set_position(\'zero\') ax.xaxis.set_ticks_position(\'bottom\') ax.yaxis.set_ticks_position(\'left\') plt.legend() plt.show()"},{"question":"You are required to design a function that simulates a simple text-based adventure game where a player encounters a binary decision point, leading to different outcomes. Specifically, the player comes to a fork in the road and can choose to go \'left\' or \'right\'. Each choice results in a different outcome. The function should be named `text_adventure_game` and adhere to the following guidelines: 1. **Parameters**: None. 2. **Returns**: - A string describing the outcome of the player\'s choice. 3. **Functionality**: - The function should prompt the player with the question \\"You come to a fork in the road. Do you want to go left or right?\\". - The player should then input their decision (\'left\' or \'right\'). - Depending on the player\'s choice, return one of the following outcomes: - If the player chooses \'left\', return \\"You encounter a friendly dragon who shares his treasure with you. Congratulations!\\" - If the player chooses \'right\', return \\"You get lost in a dark forest and eventually find your way home safely. Better luck next time!\\" Here is the function signature for reference: ```python def text_adventure_game() -> str: pass ``` Write the `text_adventure_game` function to meet these requirements. Note that you will need to use Python\'s `input` function to handle the player’s decision.","solution":"def text_adventure_game() -> str: Simulates a simple text-based adventure game where the player comes to a fork in the road and chooses to go left or right. Returns: str: Description of the outcome based on player\'s choice. choice = input(\\"You come to a fork in the road. Do you want to go left or right? \\").strip().lower() if choice == \'left\': return \\"You encounter a friendly dragon who shares his treasure with you. Congratulations!\\" elif choice == \'right\': return \\"You get lost in a dark forest and eventually find your way home safely. Better luck next time!\\" else: return \\"Invalid choice. Please choose \'left\' or \'right\'.\\""},{"question":"In this problem, you need to implement a function that simulates a simple stock market trading algorithm. Given historical stock prices and a set rule for trading, determine the maximum profit that can be achieved by following the trading rule. The rule allows unlimited transactions (i.e., buy one and sell one share of the stock multiple times). **Function Signature:** ```python def max_profit(prices: List[int]) -> int: ... ``` **Inputs:** - `prices` (List[int]): A list of integers where each element represents the stock price on a given day. **Output:** - Return an integer representing the maximum profit achievable. **Example:** ```python # Example 1 prices = [7, 1, 5, 3, 6, 4] max_profit(prices) -> 7 # Explanation: # Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. # Buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. # Total profit is 4 + 3 = 7. # Example 2 prices = [1, 2, 3, 4, 5] max_profit(prices) -> 4 # Explanation: # Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. # Total profit is 4. # Example 3 prices = [7, 6, 4, 3, 1] max_profit(prices) -> 0 # Explanation: # There is no way to make a profit, so the maximum profit is 0. ``` **Constraints:** - You are only allowed to complete at most one transaction on each day (i.e., you must sell the stock before you buy again). - The input list length will be between 1 and 10^5. **Hint:** To solve this problem, iterate through the list of prices and find all the consecutive days where the price increases. Sum up the gains to get the maximum profit.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from the given list of stock prices. :param prices: List[int] - List of stock prices :return: int - Maximum profit profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1] return profit"},{"question":"You are tasked with creating a function to navigate through a simplified maze represented as a 2D grid. The function should use recursion to find a path from the start to the end point. Each cell in the grid can either be a passable cell (\'O\') or an obstacle (\'X\'). The function will return a list of coordinates [(row, col), ...] representing the path from the start to the end if one exists, otherwise return an empty list if there is no path. Function name: `find_path` # Function Signature ```python def find_path(maze: List[List[str]], start: Tuple[int, int], end: Tuple[int, int]) -> List[Tuple[int, int]]: ``` # Parameters - `maze` (List[List[str]]): A 2D grid representing the maze. - `start` (Tuple[int, int]): A tuple (row, col) representing the starting position in the maze. - `end` (Tuple[int, int]): A tuple (row, col) representing the ending position in the maze. # Returns - `List[Tuple[int, int]]`: A list of coordinates representing the path from the start to the end. Return an empty list if no path exists. # Behavior 1. Start from the `start` position. 2. Recursively explore each of the four possible directions (up, down, left, right) from the current position. 3. Avoid revisiting cells already included in the current path (to prevent infinite loops). 4. If a path to the `end` is found, return the path as a list of coordinates. 5. If no path is found, backtrack and continue exploring other directions. 6. Return an empty list if no path from start to end exists. # Example ```python maze = [ [\'O\', \'O\', \'X\', \'O\'], [\'X\', \'O\', \'X\', \'O\'], [\'O\', \'O\', \'O\', \'X\'], [\'O\', \'X\', \'O\', \'O\'] ] start = (0, 0) end = (3, 3) path = find_path(maze, start, end) ``` **Sample Output** ``` [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2), (3, 2), (3, 3)] ```","solution":"from typing import List, Tuple def find_path(maze: List[List[str]], start: Tuple[int, int], end: Tuple[int, int]) -> List[Tuple[int, int]]: def is_valid_move(maze, position): row, col = position return 0 <= row < len(maze) and 0 <= col < len(maze[0]) and maze[row][col] == \'O\' def find_path_recursive(maze, position, end, path, visited): if position == end: return path + [position] row, col = position if not is_valid_move(maze, position) or position in visited: return [] visited.add(position) direction_offsets = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right for drow, dcol in direction_offsets: new_position = (row + drow, col + dcol) result_path = find_path_recursive(maze, new_position, end, path + [position], visited) if result_path: return result_path visited.remove(position) return [] return find_path_recursive(maze, start, end, [], set())"},{"question":"**Context:** Develop a function that simulates an inventory management system. The function will need to track and update item quantities as items are added or removed from the inventory. **Task:** Write a function named `manage_inventory` that: 1. Accepts an initial dictionary representing the inventory, where keys are item names and values are their respective quantities. 2. Continuously accepts input from the user in the form of \\"ADD item_name quantity\\" or \\"REMOVE item_name quantity\\" until the user inputs \\"STOP\\". 3. Updates the inventory based on the actions specified in the input. 4. Ensures that item quantities do not fall below zero when removing items. 5. Prints and returns the final state of the inventory dictionary after the user inputs \\"STOP\\". **Requirements:** - Use input() function to read user inputs. - Ensure the function handles invalid inputs gracefully by ignoring them and continuing with the next input. **Details:** - The function should provide meaningful output on the console to help the user understand the current state of the inventory after each modification. - Pay close attention to updating the inventory correctly based on the user input. **Example:** ```python # Initial inventory dictionary: inventory = {\'apple\': 10, \'banana\': 5, \'orange\': 8} # After calling the function: manage_inventory(inventory) # Possible user inputs and outputs: # > ADD apple 3 # Inventory updated: {\'apple\': 13, \'banana\': 5, \'orange\': 8} # > REMOVE banana 2 # Inventory updated: {\'apple\': 13, \'banana\': 3, \'orange\': 8} # > REMOVE orange 10 # Attempted to remove more oranges than available. Inventory remains unchanged. # Inventory updated: {\'apple\': 13, \'banana\': 3, \'orange\': 8} # > STOP # Final Inventory: {\'apple\': 13, \'banana\': 3, \'orange\': 8} # The function should handle and display appropriate messages for invalid inputs like: # > ADD apple -5 # Invalid quantity. Please enter a positive integer. # > REMOVE papaya 2 # Invalid item name. \\"papaya\\" does not exist in the inventory. ```","solution":"def manage_inventory(inventory): Simulates an inventory management system. Continuously accepts input in the form of \\"ADD item_name quantity\\" or \\"REMOVE item_name quantity\\", and updates the inventory until \\"STOP\\" is entered. Args: inventory: dict - Initial inventory dictionary where keys are item names and values are their quantities. Returns: dict - Final state of the inventory. while True: user_input = input(\\"> \\").strip().split() if user_input[0] == \\"STOP\\": print(f\\"Final Inventory: {inventory}\\") return inventory if len(user_input) != 3 or user_input[0] not in [\\"ADD\\", \\"REMOVE\\"]: print(\\"Invalid input format. Please enter \'ADD item_name quantity\' or \'REMOVE item_name quantity\'.\\") continue action, item_name, quantity_str = user_input try: quantity = int(quantity_str) if quantity <= 0: raise ValueError except ValueError: print(\\"Invalid quantity. Please enter a positive integer.\\") continue if action == \\"ADD\\": if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity print(f\\"Inventory updated: {inventory}\\") elif action == \\"REMOVE\\": if item_name not in inventory: print(f\\"Invalid item name. \'{item_name}\' does not exist in the inventory.\\") continue if inventory[item_name] < quantity: print(f\\"Attempted to remove more \'{item_name}\' than available. Inventory remains unchanged.\\") else: inventory[item_name] -= quantity print(f\\"Inventory updated: {inventory}\\")"},{"question":"You are required to implement a function named `max_subarray_product` that takes an array of integers as input and returns the maximum product of any contiguous subarray. Your solution should efficiently handle both positive and negative numbers. **Function Signature:** ```python def max_subarray_product(nums: list[int]) -> int: # Your code here ``` **Requirements:** 1. Implement the function without using any built-in Python functions that directly solve the problem. 2. Aim for a solution with a time complexity of O(n). 3. Handle edge cases such as arrays with all negative numbers, single-element arrays, and arrays that include zero. **Example:** ```python input_array = [2, 3, -2, 4] output = max_subarray_product(input_array) # Expected output: 6 input_array = [-2, 0, -1] output = max_subarray_product(input_array) # Expected output: 0 input_array = [-1, -3, -10, 0, 60] output = max_subarray_product(input_array) # Expected output: 60 ``` **Important Notes:** - Consider both the maximum and the minimum products at each step since a negative number can turn a small positive product into a large product. - You do not need to handle input validation beyond the constraints. - Ensure that your solution is well-tested against various edge cases.","solution":"def max_subarray_product(nums: list[int]) -> int: if not nums: return 0 max_prod = min_prod = max_result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) max_result = max(max_result, max_prod) return max_result"},{"question":"Background You have been given a list of projects with their start and end dates in a text file. Your task is to calculate the total number of days each project will take, then categorize and store these calculated durations into separate files based on their total duration ranges. Your Task Write a function named `categorize_project_durations` that processes the list of projects, calculates the number of days for each project, and sorts them into specific text files categorized by their duration ranges. Use the following steps to accomplish the task: 1. Read the list of projects from `projectFile`. Each line contains the project name, start date, and end date separated by commas. 2. For each project, calculate the total number of days between the start and end dates. 3. Categorize each project based on duration: - Short: 1-30 days - Medium: 31-180 days - Long: more than 180 days 4. Create output files named `short_projects.txt`, `medium_projects.txt`, and `long_projects.txt` to store the categorized projects. 5. Write each project\'s name and total duration to the appropriate file. **Input Parameters:** - `projectFile` (str): Path to the file containing the list of projects. Defaults to \\"projects.txt\\". **Output:** - The function does not return anything. It writes the categorized projects to their respective files. **Assumption:** - The date format in `projectFile` is \\"YYYY-MM-DD\\". **Note:** - Use the `datetime` module to handle and calculate the dates. Example Suppose we call the function as follows: ```python categorize_project_durations(\\"projects.txt\\") ``` With `projects.txt` containing: ``` Project A,2023-01-01,2023-01-30 Project B,2023-02-01,2023-04-01 Project C,2023-01-01,2024-01-01 ``` The function should create three files named `short_projects.txt`, `medium_projects.txt`, and `long_projects.txt`, and store the project names with their respective durations as follows: `short_projects.txt` ``` Project A, 29 days ``` `medium_projects.txt` ``` Project B, 59 days ``` `long_projects.txt` ``` Project C, 365 days ```","solution":"import datetime def categorize_project_durations(projectFile=\\"projects.txt\\"): with open(projectFile, \'r\') as file: projects = file.readlines() short_projects = [] medium_projects = [] long_projects = [] for project in projects: name, start_date, end_date = project.strip().split(\',\') start_date = datetime.datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.datetime.strptime(end_date, \\"%Y-%m-%d\\") duration = (end_date - start_date).days if 1 <= duration <= 30: short_projects.append(f\\"{name}, {duration} daysn\\") elif 31 <= duration <= 180: medium_projects.append(f\\"{name}, {duration} daysn\\") elif duration > 180: long_projects.append(f\\"{name}, {duration} daysn\\") with open(\\"short_projects.txt\\", \'w\') as file: file.writelines(short_projects) with open(\\"medium_projects.txt\\", \'w\') as file: file.writelines(medium_projects) with open(\\"long_projects.txt\\", \'w\') as file: file.writelines(long_projects)"},{"question":"You are provided with a rectangular grid representing a chessboard of arbitrary size, where each cell can either be empty (represented by `0`) or contain a piece (represented by `1`). Your task is to identify the largest square subgrid that contains only pieces (1s). Specifically, the function `largest_square_subgrid(board)` should be created, where: - `board`: A 2D list representing the chessboard, where each element is either `0` or `1`. The function should: 1. Determine the size of the largest square subgrid that contains only `1`s. 2. Return the size of the side of this largest square subgrid. **Example:** ```python board = [ [1, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1] ] largest_square_subgrid(board) ``` This should return `3`, as the largest square subgrid of `1`s has a size of `3x3`: ``` 1 1 1 1 1 1 1 1 1 ``` **Constraints:** - The `board` will have dimensions `n x m`, where `1 <= n, m <= 50`. The function `largest_square_subgrid(board)` should return an integer representing the size of the side of the largest square subgrid comprised of `1`s. Here is an example of what the function call and output might look like: ```python board = [ [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 1] ] print(largest_square_subgrid(board)) # Output: 3 ```","solution":"def largest_square_subgrid(board): Returns the size of the largest square subgrid that contains only 1s. if not board: return 0 n = len(board) m = len(board[0]) max_side = 0 # Create a 2D list to store the size of the largest square subgrid ending at (i, j) dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if board[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"In this problem, you need to implement a function that simulates a simplified version of the Minesweeper game. The function should initialize a game board with a given number of mines and then compute the number of mines surrounding each cell in the grid. # Function Signature ```python def create_minesweeper_board(grid_size, num_mines): :param grid_size: a tuple (width, height) representing the size of the 2D grid. :param num_mines: an integer representing the number of mines to be placed on the grid. :return: a 2D list representing the Minesweeper game board after placing the mines and calculating the surrounding mine counts. ``` # Constraints 1. The grid_size is defined by a tuple (width, height) which means that it ranges from (0, 0) to (width-1, height-1). 2. The num_mines is an integer specifying the total number of mines to be placed on the grid. 3. Each cell in the returned 2D list should either contain a mine (represented by \'*\') or the number of surrounding mines (represented by an integer). 4. Mines should be placed randomly on the grid. 5. Ensure that the number of mines does not exceed the total number of cells in the grid. # Example Usage Assuming you have a 5x5 grid and 5 mines, your function should initialize the board with mines and then compute the surrounding mine counts for each cell. # Implementation Steps 1. Create a 2D list with all cells initialized to 0. 2. Randomly place the specified number of mines (\'*\') on the grid. 3. For each empty cell, count the number of mines in the adjacent cells and update the value of the cell accordingly. # Example Scenario Let\'s say the grid size is (3, 3) and the number of mines is 3. An example of a resulting board could be: ``` [ [1, \'*\', 1], [1, 2, 1], [\'*\', 1, 0] ] ``` In this example, the first cell in the first row contains 1 mine adjacent to it, the second cell contains a mine, and the remaining numbers indicate the count of adjacent mines for each cell. # Note - Use the `random` module to place mines randomly on the grid. - Be careful not to place more mines than the grid can accommodate.","solution":"import random def create_minesweeper_board(grid_size, num_mines): width, height = grid_size # Initialize the board with zeros board = [[0 for _ in range(width)] for _ in range(height)] # Place mines randomly on the board mines_placed = 0 while mines_placed < num_mines: x = random.randint(0, height - 1) y = random.randint(0, width - 1) if board[x][y] != \'*\': board[x][y] = \'*\' mines_placed += 1 # Helper function to check valid cell positions def is_valid(x, y): return 0 <= x < height and 0 <= y < width # Update board with mine counts for i in range(height): for j in range(width): if board[i][j] == \'*\': continue count = 0 for dx in range(-1, 2): # -1 to 1 (inclusive) for dy in range(-1, 2): # -1 to 1 (inclusive) if dx == 0 and dy == 0: continue if is_valid(i + dx, j + dy) and board[i + dx][j + dy] == \'*\': count += 1 board[i][j] = count return board"},{"question":"In this problem, you will create a function called `find_longest_consecutive_sequence` that takes a list of integers as input and finds the length of the longest consecutive elements sequence. This task is meant to help you practice array manipulation and efficient searching techniques. **Details:** 1. **Input:** The function `find_longest_consecutive_sequence` receives a single argument: - `nums` (a list of integers), which may contain both positive and negative integers. 2. **Processing:** - The function needs to identify consecutive sequences in the list of integers. A consecutive sequence is a set of integers where each integer except the first is one more than the previous integer. - The function should find the longest of these sequences. - The function should have a linear time complexity (i.e., O(n)). 3. **Output:** Return the length of the longest consecutive elements sequence found in the list. **Hint:** - Consider using a hash set to store elements and perform O(1) lookups to efficiently find consecutive elements. - Iterate through the list and use the hash set to identify the start of a new sequence. **Example function signature:** ```python def find_longest_consecutive_sequence(nums: list) -> int: pass ``` **Example usage:** ```python nums = [100, 4, 200, 1, 3, 2] print(find_longest_consecutive_sequence(nums)) # Output: 4 (since the longest consecutive sequence is [1, 2, 3, 4]) nums = [0, -1, 1, 2, -2, 3, 4] print(find_longest_consecutive_sequence(nums)) # Output: 7 (since the longest consecutive sequence is [-2, -1, 0, 1, 2, 3, 4]) ``` Ensure the implementation efficiently handles large input sizes and follows best practices regarding time complexity and space usage.","solution":"def find_longest_consecutive_sequence(nums: list) -> int: if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Design a function `merge_sorted_arrays` that takes two sorted arrays and merges them into a single sorted array. This function should handle arrays of different lengths and should not use any inbuilt sorting functions. The resulting array should maintain the sorted order without duplicates. Here is the function signature: ```python def merge_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]: ... ``` **Requirements:** - Do not use any inbuilt sorting functions. - Ensure that the resulting array does not contain duplicates. - Return the merged array in sorted order. **Examples:** 1. `merge_sorted_arrays([1, 3, 5], [2, 4, 6])` should return `[1, 2, 3, 4, 5, 6]` 2. `merge_sorted_arrays([1, 2, 3], [2, 3, 4, 5])` should return `[1, 2, 3, 4, 5]` 3. `merge_sorted_arrays([1, 2, 3], [])` should return `[1, 2, 3]`","solution":"from typing import List def merge_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]: Merges two sorted arrays into a single sorted array without duplicates. Parameters: - arr1: List[int] : The first sorted array. - arr2: List[int] : The second sorted array. Returns: - List[int] : A single sorted array containing all elements from both arrays without duplicates. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: if not merged_array or merged_array[-1] != arr1[i]: merged_array.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: if not merged_array or merged_array[-1] != arr1[i]: merged_array.append(arr1[i]) i += 1 else: if not merged_array or merged_array[-1] != arr2[j]: merged_array.append(arr2[j]) j += 1 while i < len(arr1): if not merged_array or merged_array[-1] != arr1[i]: merged_array.append(arr1[i]) i += 1 while j < len(arr2): if not merged_array or merged_array[-1] != arr2[j]: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given a log file named `\'server_logs.txt\'` which contains multiple lines. Each line represents an entry of server logs in the following format: ``` [YYYY-MM-DD HH:MM:SS] [IP_ADDRESS] [REQUEST_TYPE] [STATUS_CODE] ``` Your task is to write a Python function named `plot_request_trends()` that processes this log file and creates a plot using the `matplotlib` library. Specifically, you should: 1. Read the log file and extract the `REQUEST_TYPE` and its corresponding timestamps. 2. Count the number of occurrences of each `REQUEST_TYPE` per hour. 3. Use matplotlib to create a graph showing the trends of each `REQUEST_TYPE` over time. The X-axis should denote hours within a day (`\\"%H\\"` format), and the Y-axis should represent the number of requests. Use the `matplotlib.dates.DateFormatter` for formatting the X-axis and `matplotlib.pyplot.ylabel` for labeling the Y-axis. Different `REQUEST_TYPE` values should be plotted in different colors or line styles for distinction. Here’s a sample structure of the log file: ``` [2021-11-03 00:00:00] [192.168.0.1] [GET] [200] [2021-11-03 00:05:00] [192.168.0.2] [POST] [201] [2021-11-03 01:00:00] [192.168.0.3] [GET] [200] [2021-11-03 01:30:00] [192.168.0.4] [PUT] [204] ``` Steps to follow: 1. Read each line of the file and parse the date, time, and request type. 2. Convert the date and time strings to datetime objects. 3. Count the number of occurrences of each request type for each hour within the day. 4. Plot the trends of each request type with formatted X-axis (hours) and labeled Y-axis (number of requests per hour). Ensure to handle different request types and their corresponding trends properly in the graph with a legend to differentiate them.","solution":"import matplotlib.pyplot as plt import matplotlib.dates as mdates from collections import defaultdict from datetime import datetime import matplotlib matplotlib.use(\'Agg\') # Use non-interactive backend for testing def plot_request_trends(log_file=\'server_logs.txt\'): request_counts = defaultdict(lambda: defaultdict(int)) with open(log_file, \'r\') as file: for line in file: parts = line.strip().split(\' \') # Extract the necessary information from the log timestamp_str = parts[0][1:] + \\" \\" + parts[1][:-1] # [YYYY-MM-DD HH:MM:SS] request_type = parts[3][1:-1] # REQUEST_TYPE timestamp = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M:%S\\") hour = timestamp.replace(minute=0, second=0, microsecond=0) request_counts[request_type][hour] += 1 # Preparing data for plotting for request_type, counts in request_counts.items(): sorted_times = sorted(counts.keys()) counts_values = [counts[time] for time in sorted_times] plt.plot(sorted_times, counts_values, label=request_type) plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(\'%H\')) plt.xlabel(\'Hour of Day\') plt.ylabel(\'Number of Requests\') plt.legend() plt.title(\'Request Trends Over Time\') plt.savefig(\'request_trends.png\') plt.close()"},{"question":"You are tasked to create a function that simulates a basic elevator movement algorithm. The elevator can only move between floors 0 to 10. The function will be named `operate_elevator` and it must take in a list of requested floor numbers as an argument. The elevator starts at floor 0 and processes the requests in the order they were received in the list. For each floor request, the function must: 1. Move the elevator to the requested floor. 2. Print a message indicating the current floor of the elevator. After processing all requests, a final message indicating the elevator is idle at the last requested floor should be printed. Assume that valid floor numbers (integers from 0 to 10) are provided in the requests list. **Function Signature:** ```python def operate_elevator(requests): pass ``` **Example:** ```python requests = [3, 5, 7, 2] operate_elevator(requests) ``` **Output:** ``` Elevator is at floor 3 Elevator is at floor 5 Elevator is at floor 7 Elevator is at floor 2 Elevator is idle at floor 2 ``` Your implementation must ensure correct simulation of the elevator movement as per the provided floor requests.","solution":"def operate_elevator(requests): Simulates the movement of an elevator which operates between floor 0 to 10. Parameters: requests (list of int): List of requested floor numbers. current_floor = 0 for floor in requests: if 0 <= floor <= 10: current_floor = floor print(f\\"Elevator is at floor {current_floor}\\") print(f\\"Elevator is idle at floor {current_floor}\\")"},{"question":"Given an array of integers and a list of queries, the task is to rotate the array to the right by a given number of steps for each query and then return the modified array after each rotation. Implement the right rotation efficiently by minimizing the number of elements moved. # Function Requirements: - **Function Name**: `rotate_array` - **Parameters**: - `arr`: A list of integers representing the array to be rotated. - `queries`: A list of integers where each integer represents the number of steps by which the array should be rotated to the right. - **Returns**: A list of lists, where each list represents the array after performing the rotation for each query. # Steps to Solve: 1. **Modular Arithmetic for Rotation**: Use modular arithmetic to avoid unnecessary rotations. For a right rotation by `k` steps, effectively rotate by `k % n` steps, where `n` is the length of the array. 2. **Array Slicing**: Utilize array slicing to achieve the rotation efficiently. The rotated array can be constructed without having to shift elements one by one. 3. **Collect Results**: After each rotation, store the resulting array and move on to the next query. # Example Input: ```python arr = [1, 2, 3, 4, 5, 6] queries = [2, 4, 6] ``` # Example Output: ```python rotate_array(arr, queries) # Output: [[5, 6, 1, 2, 3, 4], [3, 4, 5, 6, 1, 2], [1, 2, 3, 4, 5, 6]] ``` **Note**: Ensure the function works efficiently even for larger arrays and multiple queries. The focus should be on correctly updating the array with minimal computational overhead.","solution":"def rotate_array(arr, queries): Rotates the array to the right by a given number of steps for each query. Parameters: - arr: List of integers. - queries: List of integers indicating the number of steps to rotate. Returns: List of lists, where each list is the rotated array after each query. n = len(arr) result = [] for query in queries: k = query % n # Effective rotation rotated_arr = arr[-k:] + arr[:-k] # Array slicing for the rotation result.append(rotated_arr) return result"},{"question":"You need to create a function in Python to calculate the total number of distinct items sold from a sales log. Each entry in the log provides the name of the item and the quantity sold in the format \\"item_name:quantity\\". It\'s important to aggregate these values for each unique item to get the total amount sold for that item. **Function Name**: `aggregate_sales` **Parameters**: - `sales_log` (List[str]): A list of strings representing sales data, where each string is in the format \'item_name:quantity\'. **Requirements**: 1. Parse each entry to extract the item name and quantity. 2. Use a dictionary to accumulate the total quantities for each unique item. 3. Return the dictionary with item names as keys and their respective total quantities as values. **Example**: ```python sales_log = [ \'apple:5\', \'banana:3\', \'apple:2\', \'orange:7\', \'banana:1\' ] print(aggregate_sales(sales_log)) # Expected output: {\'apple\': 7, \'banana\': 4, \'orange\': 7} ``` Your task is to implement the `aggregate_sales` function adhering to the described behavior.","solution":"def aggregate_sales(sales_log): Aggregates sales quantities for each unique item in the sales log. Parameters: sales_log (list of str): A list of strings representing sales data. Each string is in the format \'item_name:quantity\'. Returns: dict: A dictionary with item names as keys and their aggregated quantities as values. sales_aggregated = {} for entry in sales_log: item_name, quantity_sold = entry.split(\':\') quantity_sold = int(quantity_sold) if item_name in sales_aggregated: sales_aggregated[item_name] += quantity_sold else: sales_aggregated[item_name] = quantity_sold return sales_aggregated"},{"question":"Design a function that takes a list of integers and returns the maximum product that can be obtained by multiplying any three distinct elements from the list. If the list has fewer than three integers, the function should return None. The function should output: ``` int or None: The maximum product of any three distinct integers in the list, or None if there are fewer than three integers. ``` You should write self-contained code starting with: ``` def max_product_of_three(nums): ``` Example usage: ``` print(max_product_of_three([1, 2, 3, 4])) # Output: 24 print(max_product_of_three([10, -10, 5, 2])) # Output: 100 print(max_product_of_three([1, 2])) # Output: None ```","solution":"def max_product_of_three(nums): Returns the maximum product that can be obtained by multiplying any three distinct elements from the list. If the list has fewer than three integers, the function returns None. if len(nums) < 3: return None nums.sort() return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])"},{"question":"Design a function that processes log data for a web server and identifies the top N most frequent URLs visited. The purpose of this exercise is to understand how to handle file I/O, parse text data, and utilize dictionaries for counting occurrences. You need to write a function `top_n_urls` with the following specifications: 1. **Function Parameters:** - `log_file_path`: A string representing the path to the log file. - `n`: An integer representing the number of top frequent URLs to return. 2. **Function Output:** - A list of tuples, where each tuple contains a URL (string) and its visit count (integer), sorted by the most frequently visited URLs in descending order. **Constraints and Requirements:** - The log file contains one URL per line. - URLs should be case-sensitive (i.e., \'HTTP://EXAMPLE.COM\' and \'http://example.com\' are considered different). - Use a dictionary to maintain the count of each URL. - If two URLs have the same frequency, they should be sorted in alphabetical order. Here is the template of the function you will fill in: ```python def top_n_urls(log_file_path, n): # Your code goes here ``` **Example Call:** ```python # Assuming \'web_server.log\' contains: # http://example.com/page1 # http://example.com/page2 # http://example.com/page1 # http://example.com/page1 # http://example.com/page3 # http://example.com/page2 top_urls = top_n_urls(\'web_server.log\', 2) print(top_urls) # Output: [(\'http://example.com/page1\', 3), (\'http://example.com/page2\', 2)] ``` In this example, the function reads the contents of \'web_server.log\', counts the occurrences of each URL, and returns the top 2 most frequent URLs along with their counts.","solution":"def top_n_urls(log_file_path, n): Returns the top N most frequent URLs visited and their counts from the log file. Parameters: log_file_path (str): The path to the log file. n (int): The number of top frequent URLs to return. Returns: list: A list of tuples, where each tuple contains a URL (string) and its visit count (integer), sorted by the most frequently visited URLs in descending order. url_counts = {} # Read the log file and count URL occurrences with open(log_file_path, \'r\') as file: for line in file: url = line.strip() if url in url_counts: url_counts[url] += 1 else: url_counts[url] = 1 # Sort URLs by count (descending) and then by URL (alphabetical) sorted_urls = sorted(url_counts.items(), key=lambda item: (-item[1], item[0])) # Return the top N URLs return sorted_urls[:n]"},{"question":"Given a series of requests in form of a list of tuples, each containing the start time and end time of requests, implement a function `max_non_overlapping_requests` that determines the maximum number of requests that can be accommodated without any overlap. **Function Signature:** ```python def max_non_overlapping_requests(requests): ``` **Inputs:** - `requests` (List[Tuple[int, int]]): A list of tuples where each tuple `(start_time, end_time)` represents the start and end time of a request. **Outputs:** - (int): The maximum number of non-overlapping requests that can be accommodated. **Functionality:** 1. The function should first sort the requests based on the end times. 2. Then, it should iterate through the sorted requests, and for each request, decide if it can be included in the final set of non-overlapping requests. 3. Return the count of maximum non-overlapping requests. **Example:** ```python requests = [(1, 3), (2, 5), (4, 6), (6, 8)] print(max_non_overlapping_requests(requests)) # Output should be 2 because the maximum non-overlapping requests are (1, 3) and (4, 6) or (1, 3) and (6, 8). ```","solution":"def max_non_overlapping_requests(requests): Returns the maximum number of non-overlapping requests that can be accommodated. # Sort the requests based on their end times requests.sort(key=lambda x: x[1]) max_requests = 0 current_end_time = 0 for start, end in requests: if start >= current_end_time: max_requests += 1 current_end_time = end return max_requests"},{"question":"Write a function that takes a list of tuples, where each tuple contains a student\'s name and their respective score. The function should output the name of the student with the highest score. If there is a tie, return a list of names of the students with the highest score in alphabetical order. You should write self-contained code with input and output: ``` def top_students(students: list): Example: Input: [(\\"John\\", 88), (\\"Jane\\", 92), (\\"Dave\\", 88), (\\"Dana\\", 92)] Output: [\\"Dana\\", \\"Jane\\"] ```","solution":"def top_students(students): Given a list of tuples containing student names and scores, returns the name(s) of the student(s) with the highest score. If there\'s a tie, return the names of the students with the highest score in alphabetical order. :param students: list of tuples (name, score) :return: string (name of the top student) or list of strings (names of the top students in alphabetical order) if not students: return [] # Find the highest score highest_score = max(students, key=lambda x: x[1])[1] # Collect students with the highest score top_scorers = [student[0] for student in students if student[1] == highest_score] # Sort the list of top scorers alphabetically top_scorers.sort() return top_scorers"},{"question":"You are tasked with implementing a basic text processing function in Python. Given a paragraph of text and a list of words to censor, your goal is to create a function named `censor_words` that: 1. Takes as input a string `text` representing a paragraph of text. 2. Takes as input a list of strings `censor_list` representing words that need to be censored in the text. 3. Replaces each occurrence of the words in the `censor_list` with asterisks (`*`). The number of asterisks should match the length of the word being censored. 4. Returns the censored version of the text. Specifically, the function signature should be: ```python def censor_words(text, censor_list): ``` # Parameters: - `text`: A string representing a paragraph of text. - `censor_list`: A list of strings where each string is a word that needs to be censored in the text. # Requirements: - You **must not** use any external libraries (such as `re` for regular expressions) to accomplish this task. - Ensure the replacement maintains the case of the original text and only censors exact matches (case-sensitive). - Preserve the punctuation and whitespace of the original text. Here is what the function `censor_words` should look like initially: ```python def censor_words(text, censor_list): # Function implementation goes here ``` # Example: If `text` is `\\"Hello world, this is a test. Please censor the unwanted words in this text.\\"` and `censor_list` is `[\\"world\\", \\"test\\", \\"unwanted\\"]`, the `censor_words` function should return: `\\"Hello ***** , this is a ****. Please censor the ******** words in this text.\\"`","solution":"def censor_words(text, censor_list): Replaces each occurrence of the words in the censor_list with asterisks (*). The number of asterisks should match the length of the word being censored. Parameters: - text: A string representing a paragraph of text. - censor_list: A list of strings where each string is a word that needs to be censored in the text. Returns: - A string where the words in the censor_list are replaced with asterisks. for word in censor_list: masked_word = \'*\' * len(word) text = text.replace(word, masked_word) return text"},{"question":"Write a function to determine if a given string can be rearranged to form a palindrome. A string can form a palindrome if at most one character has an odd frequency. If the string can be rearranged into a palindrome, return True; otherwise, return False. The function should be case-insensitive and ignore non-alphabetic characters. The function should raise the exception for: ValueError: If the input is not a string. You should write self-contained code starting with: ``` def can_form_palindrome(s): ```","solution":"import re from collections import Counter def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): The input string to check. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. Raises: ValueError: If the input is not a string. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") # Normalize the string to lowercase and remove non-alphabetic characters s = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Count the frequency of each character char_counter = Counter(s) # Find the number of characters with an odd count odd_counts = sum(count % 2 for count in char_counter.values()) # For a string to be rearranged into a palindrome, there can be at most one character with an odd count return odd_counts <= 1"},{"question":"You are tasked with developing a function that simulates a traffic light system at a pedestrian crossing, which alternates between red and green states. This task will make you familiar with the use of simple state machines and timing in Python. Function Specification **Function Name:** `traffic_light_simulation` **Parameters:** - `red_duration` (int): The duration for which the light stays red (in seconds). - `green_duration` (int): The duration for which the light stays green (in seconds). - `total_duration` (int): The total duration (in seconds) for which the simulation will run. **Returns:** - `List[Tuple[int, str]]`: A list of tuples where each tuple contains the time (in seconds) and the state of the light (\'RED\' or \'GREEN\') at that time. The function should perform the following steps: 1. Initialize the current time to 0. 2. Use a loop to simulate each second of the total duration. 3. Alternate between \'RED\' and \'GREEN\' states according to the provided durations. 4. Record the state of the light at each second in the specified output format. 5. Return the list of recorded states. Here is a scaffold code to get you started: ```python def traffic_light_simulation(red_duration, green_duration, total_duration): current_time = 0 light_state = \'RED\' state_duration = red_duration result = [] while current_time <= total_duration: result.append((current_time, light_state)) current_time += 1 # Check if we need to switch the state if current_time % state_duration == 0: if light_state == \'RED\': light_state = \'GREEN\' state_duration = green_duration else: light_state = \'RED\' state_duration = red_duration return result # Example usage: # traffic_light_simulation(5, 3, 20) ``` To ensure that your function works correctly, remember to test it with different durations and total simulation times.","solution":"def traffic_light_simulation(red_duration, green_duration, total_duration): current_time = 0 light_state = \'RED\' state_duration = red_duration switch_time = red_duration result = [] while current_time <= total_duration: result.append((current_time, light_state)) current_time += 1 # Check if we need to switch the state if current_time == switch_time: if light_state == \'RED\': light_state = \'GREEN\' switch_time += green_duration else: light_state = \'RED\' switch_time += red_duration return result"},{"question":"In this problem, you need to count the occurrences of a particular element in a list that contains multiple types of values. You will accomplish this by handling different data types and ensuring the count is accurate regardless of the type. You need to implement a function named `count_occurrences` which takes two parameters: 1. `data_list` (List[Any]): A list containing elements of various data types (integers, strings, floats, etc.). 2. `target` (Any): The element whose occurrences need to be counted in the list. The function should: 1. Traverse through the list `data_list`. 2. Count how many times the `target` element appears in the list. 3. Return the count as an integer. Your implementation should follow the constraints and assumptions: - The list `data_list` can contain any kind of Python data type. - You need to handle both mutable and immutable types. - Comparison should be done using the equality operator (`==`). Example: ```python # Given a list with various data types data_list = [1, \'a\', 3.5, \'b\', 1, \'a\', 4.5, \'a\'] target = \'a\' # Counting occurrences of \'a\' # Result: 3 print(count_occurrences(data_list, target)) # Output: 3 ``` You must ensure the function can handle different data types and count occurrences accurately.","solution":"from typing import List, Any def count_occurrences(data_list: List[Any], target: Any) -> int: Counts the occurrences of the target element in data_list. :param data_list: List containing elements of various data types :param target: The element to count in the list :return: The number of times the target element appears in the list return data_list.count(target)"},{"question":"You are tasked with writing a Python function that merges two given lists into a single list, alternating elements from each list. If one list is longer than the other, append the remaining elements from the longer list to the end of the merged list. This problem should serve as an educational example for manipulating lists and iterators in Python. Your task is to implement the function `merge_alternating(list1, list2)`. This function takes two arguments, `list1` and `list2`, which are the lists to be merged. Your function should: 1. Create an empty list to store the result. 2. Use a loop to iterate over the elements of both lists simultaneously, appending elements alternately to the result list. 3. If one list runs out of elements before the other, append the remaining elements from the longer list to the result list. 4. Return the merged list. Here is the function signature: ```python def merge_alternating(list1, list2): # Your code here ``` # Example: Assume we have the following lists: ```python list1 = [1, 3, 5] list2 = [2, 4, 6, 8, 10] ``` If you call the function: ```python result = merge_alternating(list1, list2) print(result) ``` The output will be: ```python [1, 2, 3, 4, 5, 6, 8, 10] ``` # Additional Example: Assume we have the following lists: ```python list1 = [\'a\', \'b\', \'c\'] list2 = [1, 2, 3, 4] ``` If you call the function: ```python result = merge_alternating(list1, list2) print(result) ``` The output will be: ```python [\'a\', 1, \'b\', 2, \'c\', 3, 4] ``` # Requirements: - Ensure that the function works with lists of any length. - The function should handle lists containing any data types. - The function should be efficient and concise.","solution":"def merge_alternating(list1, list2): Merges two given lists into a single list, alternating elements from each list. If one list is longer than the other, append the remaining elements from the longer list to the end. merged_list = [] len1, len2 = len(list1), len(list2) min_len = min(len1, len2) for i in range(min_len): merged_list.append(list1[i]) merged_list.append(list2[i]) # Append the remaining elements from the longer list if len1 > len2: merged_list.extend(list1[min_len:]) else: merged_list.extend(list2[min_len:]) return merged_list"},{"question":"Write a function `count_islands(grid: List[List[int]]) -> int` that takes a 2D binary grid and returns the number of islands. An island is formed by a group of connected 1s (representing land), connected horizontally or vertically. You may assume all four edges of the grid are surrounded by water (represented by 0s). The function should follow these steps: 1. Iterate through each cell in the grid. 2. When a cell with a value of 1 is found, initiate a Depth-First Search (DFS) to visit all connected land cells (1s). 3. During the DFS, mark each visited cell with a value of 0 to avoid counting it again. 4. Increase the island count for each DFS initialization. You can use the following helper function for the DFS: ```python def dfs(grid: List[List[int]], r: int, c: int) -> None: if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0: return grid[r][c] = 0 # Mark current cell as visited # Call DFS for all four adjacent cells dfs(grid, r + 1, c) dfs(grid, r - 1, c) dfs(grid, r, c + 1) dfs(grid, r, c - 1) ``` **Input:** - A 2D binary grid represented as a list of lists of integers (0s and 1s). **Output:** - An integer representing the total number of islands. **Example:** ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] print(count_islands(grid)) # Output: 3 ``` In this example, there are three islands: 1. The first two 1s in the top-left corner form one island. 2. The single 1 in the middle forms another island. 3. The two 1s in the bottom-right corner form the last island.","solution":"from typing import List def dfs(grid: List[List[int]], r: int, c: int) -> None: if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0: return grid[r][c] = 0 # Mark current cell as visited # Call DFS for all four adjacent cells dfs(grid, r + 1, c) dfs(grid, r - 1, c) dfs(grid, r, c + 1) dfs(grid, r, c - 1) def count_islands(grid: List[List[int]]) -> int: if not grid: return 0 island_count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == 1: dfs(grid, r, c) island_count += 1 return island_count"},{"question":"You are tasked with creating a function using the pandas library to process a given DataFrame, extracting and summarizing relevant information. The DataFrame contains information about a company\'s sales performance, with the following columns: - `Date` (datetime): The date of the sales record. - `Product` (string): The product name. - `Sales` (float): The amount of sales for that product on that date. - `Region` (string): The region where the sale was made. 1. Define a function `sales_summary(df)` that processes this DataFrame and returns a summarized DataFrame with the following information: - Total sales for each product. - Total sales for each region. - Average sales per day for each product. - The day with the highest sales for each region. Your task is to implement this function using the pandas library. The function should take one argument: - `df` (pandas DataFrame): The input sales DataFrame. # Requirements - Use pandas functions to group, summarize, and manipulate the DataFrame. - Ensure the resulting summarized DataFrame is easy to read and interpret. **Example Usage:** ```python import pandas as pd # Example sales data data = { \'Date\': pd.date_range(start=\'2023-01-01\', periods=100, freq=\'D\'), \'Product\': [\'Product A\', \'Product B\'] * 50, \'Sales\': np.random.rand(100) * 1000, \'Region\': [\'North\', \'South\', \'East\', \'West\'] * 25 } df = pd.DataFrame(data) # Calculate sales summary summary = sales_summary(df) print(summary) ``` When given the example sales DataFrame with dates ranging from \'2023-01-01\' to \'2023-04-10\', containing random sales data for different products and regions, the function should correctly compute and return the summarized sales information.","solution":"import pandas as pd def sales_summary(df): # Total sales for each product total_sales_product = df.groupby(\'Product\')[\'Sales\'].sum().reset_index() total_sales_product.columns = [\'Product\', \'Total Sales\'] # Total sales for each region total_sales_region = df.groupby(\'Region\')[\'Sales\'].sum().reset_index() total_sales_region.columns = [\'Region\', \'Total Sales\'] # Average sales per day for each product average_sales_product = df.groupby([\'Date\', \'Product\'])[\'Sales\'].sum().groupby(\'Product\').mean().reset_index() average_sales_product.columns = [\'Product\', \'Average Sales per Day\'] # The day with the highest sales for each region highest_sales_day_region = df.groupby([\'Date\', \'Region\'])[\'Sales\'].sum().reset_index() highest_sales_day_region = highest_sales_day_region.loc[highest_sales_day_region.groupby(\'Region\')[\'Sales\'].idxmax()] highest_sales_day_region = highest_sales_day_region[[\'Region\', \'Date\', \'Sales\']] highest_sales_day_region.columns = [\'Region\', \'Date\', \'Highest Sales\'] # Merge all summaries summary = { \'Total Sales by Product\': total_sales_product, \'Total Sales by Region\': total_sales_region, \'Average Sales per Day by Product\': average_sales_product, \'Highest Sales Day by Region\': highest_sales_day_region } return summary"},{"question":"Write a function `read_and_sum_file(filename)` that reads a file consisting of integers (one per line) and returns the sum of these integers. If the file does not exist, the function should return `None` and print an appropriate error message. Additionally, handle any other potential errors that might arise (e.g., file content is not purely integers). Your task is to: 1. Write the `read_and_sum_file(filename)` function. 2. Open the file specified by `filename` and read its contents. 3. Sum up all integers found in the file and return the result. 4. Handle exceptions such as file not found and incorrect file content, and print suitable error messages in each case. # Example Usage ```python result = read_and_sum_file(\'integers.txt\') # Assuming integers.txt contains valid integers. print(result) # Output will be the sum of the integers in the file. ``` # Constraints 1. Assume the `filename` provided is a string representing the path to the file. 2. If the file contains any non-integer lines, handle the error gracefully by skipping those lines and issuing a warning. # Hint Refer to the official Python documentation for file operations in Python and exception handling to manage your function\'s file reading and error management properly.","solution":"def read_and_sum_file(filename): Reads a file consisting of integers (one per line) and returns the sum of these integers. If the file does not exist, the function returns None and prints an appropriate error message. If the file content is not purely integers, those lines are skipped with a warning message. :param filename: str, path to the file :return: int or None total = 0 try: with open(filename, \'r\') as file: for line in file: try: number = int(line.strip()) total += number except ValueError: print(f\\"Warning: Non-integer value encountered and skipped: {line.strip()}\\") except FileNotFoundError: print(f\\"Error: File \'{filename}\' not found.\\") return None except Exception as e: print(f\\"An unexpected error occurred: {e}\\") return None return total"},{"question":"Create a function that reads data from a CSV file into a pandas DataFrame, performs data cleaning by removing rows with any missing values and filtering out rows where the values in the \'age\' column are not between 18 and 65 inclusive, then saves the cleaned DataFrame to a new CSV file. The function should output the path to the new CSV file. Ensure you provide both the file paths for reading and saving, and sufficient rows in the CSV for demonstration. You should write self-contained code starting with: ``` import pandas as pd def clean_and_save_csv(input_file_path, output_file_path): ```","solution":"import pandas as pd def clean_and_save_csv(input_file_path, output_file_path): Reads data from a CSV file, cleans it by removing rows with any missing values and filtering out rows where the \'age\' column values are not between 18 and 65 inclusive, then saves the cleaned DataFrame to a new CSV file. Parameters: - input_file_path: str, path to the input CSV file. - output_file_path: str, path to save the cleaned CSV file. Returns: - output_file_path: str, the path to the cleaned CSV file. # Read the CSV file df = pd.read_csv(input_file_path) # Remove rows with any missing values df_cleaned = df.dropna() # Filter out rows where \'age\' column is not between 18 and 65 inclusive df_cleaned = df_cleaned[(df_cleaned[\'age\'] >= 18) & (df_cleaned[\'age\'] <= 65)] # Save the cleaned DataFrame to a new CSV file df_cleaned.to_csv(output_file_path, index=False) return output_file_path"},{"question":"You are given a task to create a Python function named `analyze_temperature_data` that efficiently processes and analyzes temperature data from a CSV file using the `csv` module. The function should involve reading the CSV file, performing data analysis, and writing results to a new CSV file. The function should accomplish the following tasks: 1. **Read and Parse CSV File:** - Open a file named `\\"temperatures.csv\\"` using the `csv.reader`. - Read all the data into a list of dictionaries, where each dictionary represents a row with keys as column headers and values as corresponding data points. 2. **Calculate and Display Average Temperature:** - Calculate the average temperature from the data in the `\\"temperature\\"` column. - Print the average temperature. 3. **Identify and Print Max/Min Temperatures:** - Determine the maximum and minimum temperatures from the `\\"temperature\\"` column. - Print the maximum and minimum temperatures along with their corresponding dates. 4. **Filter and Write Specific Data to a New CSV File:** - Filter the data to include only the rows where the temperature is above the calculated average. - Write this filtered data to a new file named `\\"filtered_temperatures.csv\\"` using the `csv.writer`. Make sure `analyze_temperature_data` executes these tasks correctly. For the purpose of this exercise, you can assume that the content of `\\"temperatures.csv\\"` is already known and properly formatted, with at least one row and a column named `\\"temperature\\"`.","solution":"import csv def analyze_temperature_data(): temperatures = [] rows = [] # Read and Parse CSV File with open(\'temperatures.csv\', mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: rows.append(row) temperatures.append(float(row[\'temperature\'])) # Calculate and Display Average Temperature average_temperature = sum(temperatures) / len(temperatures) print(f\'Average Temperature: {average_temperature:.2f}\') # Identify and Print Max/Min Temperatures max_temperature = max(temperatures) min_temperature = min(temperatures) for row in rows: if float(row[\'temperature\']) == max_temperature: print(f\'Max Temperature: {max_temperature} on {row[\\"date\\"]}\') if float(row[\'temperature\']) == min_temperature: print(f\'Min Temperature: {min_temperature} on {row[\\"date\\"]}\') # Filter and Write Specific Data to a New CSV File with open(\'filtered_temperatures.csv\', mode=\'w\', newline=\'\') as file: writer = csv.DictWriter(file, fieldnames=reader.fieldnames) writer.writeheader() for row in rows: if float(row[\'temperature\']) > average_temperature: writer.writerow(row)"},{"question":"# Problem: Calculating Running Median You are given an array of integers. The task is to write a function `running_median` that returns the running median after adding each element to the array. The median of a list of numbers is the middle element when the list is sorted. If the list length is even, the median is the average of the two middle elements. Function Signature ```python def running_median(nums: List[int]) -> List[float]: pass ``` Parameters - `nums` (List[int]): A list of integers. Returns - A list of floats representing the running median after each addition to the array. Constraints - The input list `nums` will have at least one element and up to 10^5 elements. - The integers in `nums` can be positive or negative. Example ```python >>> running_median([1, 2, 3, 4]) [1.0, 1.5, 2.0, 2.5] >>> running_median([2, 1, 5, 7, 2, 0, 5]) [2.0, 1.5, 2.0, 3.5, 2.0, 2.0, 2.0] ``` # Implementation Hint Use a data structure that allows efficient insertion and access to the median element. A good approach involves the use of two heaps: a max-heap to store the lower half of the numbers and a min-heap to store the upper half.","solution":"import heapq from typing import List def running_median(nums: List[int]) -> List[float]: min_heap = [] # Min-heap for the right half max_heap = [] # Max-heap for the left half (implement it using negative values) medians = [] for num in nums: if not max_heap or num <= -max_heap[0]: heapq.heappush(max_heap, -num) else: heapq.heappush(min_heap, num) # Balance the heaps if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) # Calculate the median if len(max_heap) == len(min_heap): median = (-max_heap[0] + min_heap[0]) / 2.0 else: median = -max_heap[0] medians.append(float(median)) return medians"},{"question":"You are given a class called `Database` that reads and manages a list of records. Each record is a dictionary containing `name`, `age`, and `score`. Your task is to implement a function called `filter_records` that processes the records data and returns a list of names that satisfy specific criteria. The criteria for filtering records are: - Age should be greater than a given minimum age. - Score should be greater than or equal to a specified threshold score. Here are the steps you need to implement: 1. **Read the Records:** Use the `Database.read_records(filepath)` method to read the records from the given file. Each record in the file is represented as a JSON object. 2. **Filter Records:** Iterate through the records and select only those records where the age is greater than the specified minimum age and the score is greater than or equal to the threshold score. 3. **Return Names:** Collect the `name` from each selected record and return a list of these names. **Function Signature:** ```python def filter_records(filepath: str, min_age: int, threshold_score: float) -> List[str]: pass ``` **Example:** If the JSON records in `data/records.json` are: ```json [ {\\"name\\": \\"Alice\\", \\"age\\": 25, \\"score\\": 88.5}, {\\"name\\": \\"Bob\\", \\"age\\": 20, \\"score\\": 72.0}, {\\"name\\": \\"Charlie\\", \\"age\\": 22, \\"score\\": 90.0}, {\\"name\\": \\"David\\", \\"age\\": 30, \\"score\\": 85.0} ] ``` And the function parameters are `min_age = 21, threshold_score = 85.0`, the output should be: ```python [\\"Alice\\", \\"Charlie\\", \\"David\\"] ``` In this example, Bob\'s age does not meet the minimum age requirement, so he is not included in the output.","solution":"import json from typing import List class Database: @staticmethod def read_records(filepath: str) -> List[dict]: with open(filepath, \'r\') as file: records = json.load(file) return records def filter_records(filepath: str, min_age: int, threshold_score: float) -> List[str]: records = Database.read_records(filepath) filtered_names = [ record[\'name\'] for record in records if record[\'age\'] > min_age and record[\'score\'] >= threshold_score ] return filtered_names"},{"question":"You are asked to implement a function `find_most_frequent_pair` which is designed to analyze a text and identify the most frequently occurring pair of consecutive words. In this context, given a string of words, your task is to process the text to determine which pair of adjacent words appears most frequently. If multiple pairs have the same highest frequency, return any of them. The function should only consider alphanumeric characters and spaces (ignore punctuation and case differences). The input text may be very large, so the solution needs to be efficient both in terms of time and space. Here are the requirements for the `find_most_frequent_pair` function: 1. **Input Parameters:** - `text`: A string containing the body of text to analyze. 2. **Output:** - The function should return a tuple containing the most frequent pair of consecutive words. 3. **Behavior:** - Process the text to ignore punctuation and case differences, considering only alphanumeric characters and spaces. - Split the cleaned text into words and identify the most frequent pair of consecutive words. - Return the most frequent pair as a tuple. If the text has less than two words, return `(None, None)`. Below is a code snippet illustrating the starting point: ```python import re from collections import Counter def find_most_frequent_pair(text): \'\'\' Finds the most frequent pair of consecutive words in the given text :param text: a string containing the body of text to analyze :return: a tuple with the most frequent pair of consecutive words \'\'\' # Remove punctuation and convert to lower case cleaned_text = re.sub(r\'[^a-zA-Z0-9s]\', \'\', text).lower() # Split the text into words words = cleaned_text.split() # Handle the case with less than two words if len(words) < 2: return (None, None) # Count the frequency of each pair of consecutive words pairs = Counter(zip(words, words[1:])) # Find the most common pair most_common_pair, _ = pairs.most_common(1)[0] return most_common_pair ``` Submit your most efficient implementation of the `find_most_frequent_pair` function, considering both time and space complexity for processing large texts.","solution":"import re from collections import Counter def find_most_frequent_pair(text): \'\'\' Finds the most frequent pair of consecutive words in the given text :param text: a string containing the body of text to analyze :return: a tuple with the most frequent pair of consecutive words \'\'\' # Remove punctuation and convert to lower case cleaned_text = re.sub(r\'[^a-zA-Z0-9s]\', \'\', text).lower() # Split the text into words words = cleaned_text.split() # Handle the case with less than two words if len(words) < 2: return (None, None) # Count the frequency of each pair of consecutive words pairs = Counter(zip(words, words[1:])) # Find the most common pair most_common_pair, _ = pairs.most_common(1)[0] return most_common_pair"},{"question":"Given a 2D list representing customers and their transactions in a store, you are tasked to implement a function called `find_frequent_customers` that identifies and returns a list of customer IDs who have made purchases above a specific amount more than a given number of times. Each inner list in the 2D list represents a transaction and contains three elements: 1. `Customer ID` (an integer) 2. `Transaction Amount` (a float, in dollars) 3. `Transaction Date` (a string in \'YYYY-MM-DD\' format) The function takes three parameters: 1. `transactions`: The 2D list of transactions. 2. `min_amount`: The minimum transaction amount to be considered (a float). 3. `min_occurrences`: The minimum number of times a customer must have made transactions above `min_amount`. # Function Signature ```python def find_frequent_customers(transactions: list, min_amount: float, min_occurrences: int) -> list: ... ``` # Parameters - `transactions` (list): A list of lists, where each inner list is a transaction described as [Customer ID (int), Transaction Amount (float), Transaction Date (str)]. - `min_amount` (float): The threshold amount that a transaction must exceed to be counted. - `min_occurrences` (int): The minimum number of qualifying transactions a customer must have to be included in the result. # Returns - A list of customer IDs (integers) who have made transactions above `min_amount` at least `min_occurrences` times. # Example ```python >>> transactions = [ ... [1, 150.0, \'2023-01-01\'], ... [2, 200.0, \'2023-01-01\'], ... [1, 300.0, \'2023-01-15\'], ... [3, 50.0, \'2023-01-20\'], ... [2, 250.0, \'2023-02-01\'], ... [1, 100.0, \'2023-02-20\'], ... [2, 300.0, \'2023-03-01\'] ... ] >>> find_frequent_customers(transactions, 200.0, 2) [2] ``` Your task is to implement the `find_frequent_customers` function to meet the above specifications.","solution":"def find_frequent_customers(transactions: list, min_amount: float, min_occurrences: int) -> list: from collections import defaultdict customer_transactions = defaultdict(int) for transaction in transactions: customer_id, amount, _ = transaction if amount > min_amount: customer_transactions[customer_id] += 1 frequent_customers = [customer_id for customer_id, count in customer_transactions.items() if count >= min_occurrences] return frequent_customers"},{"question":"The function reads data from a CSV file, parses the content and extracts information by applying specified transformations on given columns. It then writes the transformed data into a new CSV file. The function should handle errors gracefully and log any issues encountered during the process. It should also verify the integrity of data after the transformation by applying basic validation rules. The function should raise the exception for: - FileNotFoundError: If the specified input CSV file does not exist. - ValueError: If any transformation fails due to invalid data. The function should output with: (str, list): A tuple containing the name of the output CSV file and a list of error messages encountered during the processing. You should write self-contained code starting with: ``` import csv import os def transform_csv(input_file, output_file, transformations): ```","solution":"import csv import os def transform_csv(input_file, output_file, transformations): Reads data from a CSV file, applies transformations, and writes to a new CSV file. :param input_file: Name of the input CSV file :param output_file: Name of the output CSV file :param transformations: Dictionary with the column names as keys and functions as values :return: (str, list) Name of the output CSV file and a list of error messages error_messages = [] if not os.path.isfile(input_file): raise FileNotFoundError(f\\"Input file {input_file} does not exist.\\") try: with open(input_file, mode=\'r\', newline=\'\') as infile, open(output_file, mode=\'w\', newline=\'\') as outfile: reader = csv.DictReader(infile) fieldnames = reader.fieldnames # Ensure all transformation columns exist in the CSV for col in transformations.keys(): if col not in fieldnames: raise ValueError(f\\"Transformation column \'{col}\' does not exist in the input CSV.\\") writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() for row in reader: try: for col, func in transformations.items(): row[col] = func(row[col]) writer.writerow(row) except Exception as e: error_messages.append(str(e)) return output_file, error_messages except Exception as e: error_messages.append(str(e)) raise ValueError(\\"An error occurred during file processing.\\")"},{"question":"You are required to write a Python function `find_closest_point(points: List[Tuple[int, int]], reference_point: Tuple[int, int]) -> Tuple[int, int]` that finds the point from a list of 2D points which is closest to a given reference point. Your function should follow these steps: 1. Calculate the Euclidean distance between each point in the list and the reference point. 2. Determine the point with the smallest distance. 3. In the event of a tie (i.e., two points having the same distance to the reference point), return the point that appears first in the list. **Constraints:** 1. Each point is represented as a tuple of two integers (x, y). 2. The reference point is also represented as a tuple of two integers (x, y). 3. The list of points will have at least one point. **Function Signature:** ```python def find_closest_point(points: List[Tuple[int, int]], reference_point: Tuple[int, int]) -> Tuple[int, int]: ... ``` **Example:** Input: ```python points = [(1, 2), (3, 4), (1, -1)] reference_point = (1, 3) find_closest_point(points, reference_point) ``` Output: ```python (1, 2) ``` **Explanation:** The output is the point (1, 2) because it has the smallest Euclidean distance to the reference point (1, 3) compared to the other points in the list.","solution":"from typing import List, Tuple import math def find_closest_point(points: List[Tuple[int, int]], reference_point: Tuple[int, int]) -> Tuple[int, int]: def euclidean_distance(p1: Tuple[int, int], p2: Tuple[int, int]) -> float: return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) min_distance = float(\'inf\') closest_point = None for point in points: distance = euclidean_distance(point, reference_point) if distance < min_distance: min_distance = distance closest_point = point return closest_point"},{"question":"Write a function that generates a given number of random 2D data points and fits a straight line using linear regression. Then, plot the original points and the fitted line using matplotlib. The function should return: tuple: containing list: List of `matplotlib.lines.Line2D` objects representing the data points and the fitted line. numpy.ndarray: The coefficients of the fitted line. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def linear_regression_plot(num_points=100, random_seed=None): ```","solution":"import numpy as np import matplotlib.pyplot as plt def linear_regression_plot(num_points=100, random_seed=None): np.random.seed(random_seed) # Generating random data X = np.random.rand(num_points, 1) y = 2 * X + np.random.randn(num_points, 1) # Performing linear regression X_b = np.c_[np.ones((num_points, 1)), X] theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y) # Calculating the fitted line X_new = np.array([[0], [1]]) X_new_b = np.c_[np.ones((2, 1)), X_new] y_predict = X_new_b.dot(theta_best) # Plotting plt.scatter(X, y, color=\'blue\', marker=\'o\', label=\'Data points\') line, = plt.plot(X_new, y_predict, color=\'red\', label=\'Fitted line\') plt.xlabel(\'X\') plt.ylabel(\'y\') plt.legend() objects = plt.gca().lines plt.close() return list(objects), theta_best # Testing the function lines, coeffs = linear_regression_plot(num_points=100, random_seed=42) print(\\"Lines:\\", lines) print(\\"Coefficients:\\", coeffs)"},{"question":"You are tasked with creating a function that computes the nth Fibonacci number using matrix exponentiation. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Using matrix exponentiation dramatically reduces the time complexity compared to the naive approach. Specifically, you need to implement a function named `fibonacci_matrix` that takes an integer `n` and returns the nth Fibonacci number. Function Signature: ```python def fibonacci_matrix(n: int) -> int: # your implementation here ``` **Input:** - `n`: An integer representing the position in the Fibonacci sequence. **Output:** - Returns an integer representing the nth Fibonacci number. To achieve this, you need to use matrix exponentiation with the transformation matrix: ``` | 1 1 | | 1 0 | ``` Raising this matrix to the power of (n-1) will yield a matrix where the top left element is the nth Fibonacci number. **Example:** ```python print(fibonacci_matrix(0)) # Output: 0 print(fibonacci_matrix(1)) # Output: 1 print(fibonacci_matrix(10)) # Output: 55 ``` Make sure to handle edge cases such as when `n` is 0 or 1, and implement efficient matrix exponentiation to handle large `n` values.","solution":"def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]], [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]] ] def matrix_pow(matrix, power): Raises the matrix to the specified power (using exponentiation by squaring). result = [[1, 0], [0, 1]] base = matrix while power: if power % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result def fibonacci_matrix(n): Returns the nth Fibonacci number using matrix exponentiation. if n == 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] result_matrix = matrix_pow(F, n - 1) return result_matrix[0][0]"},{"question":"# Problem Statement: Write a Python function `zigzag_conversion(s, numRows)` that converts a given string `s` into a zigzag pattern on a given number of rows `numRows`. After that, the function should read the pattern line by line and return the string as a single string. A string \\"PAYPALISHIRING\\" with `numRows = 3` will be written as follows: ``` P A H N A P L S I I G Y I R ``` And then the function should return: `\\"PAHNAPLSIIGYIR\\"`. # Inputs: 1. `s`: A string representing the input string to be converted. 2. `numRows`: An integer representing the number of rows in the zigzag pattern. # Output: - A string obtained by reading the zigzag pattern line by line. # Requirements: - Handle edge cases where `numRows` is 1 or greater than or equal to the length of `s`. # Example: Given the string `\\"PAYPALISHIRING\\"`, with `numRows = 4`: ```python zigzag_conversion(\\"PAYPALISHIRING\\", 4) ``` The constructed zigzag pattern would look like this: ``` P I N A L S I G Y A H R P I ``` The function should return: ```python \\"PINALSIGYAHRPI\\" ``` # Function Signature: ```python def zigzag_conversion(s: str, numRows: int) -> str: # Implementation here ```","solution":"def zigzag_conversion(s: str, numRows: int) -> str: if numRows == 1 or numRows >= len(s): return s rows = [\'\' for _ in range(min(numRows, len(s)))] cur_row = 0 going_down = False for char in s: rows[cur_row] += char if cur_row == 0 or cur_row == numRows - 1: going_down = not going_down cur_row += 1 if going_down else -1 return \'\'.join(rows)"},{"question":"You are creating a video streaming application that allows users to watch videos. You need to design a function to manage the video playback queue, which handles adding videos, removing videos, and getting the current list of videos in the queue. Specifically, you have to: 1. Implement a class `VideoQueue` with the following methods: - `add_video(video_id)`: Adds a video with the given `video_id` to the end of the queue. - `remove_video(video_id)`: Removes the video with the given `video_id` from the queue if it exists, returning `True`; otherwise, returns `False`. - `get_queue()`: Returns the current list of `video_id` in the queue, in the order they were added. Here is a more detailed breakdown of what each method should do: - `add_video(video_id)`: - `video_id`: An integer representing the unique identifier of the video. - Appends the video to the end of the queue. - `remove_video(video_id)`: - `video_id`: An integer representing the unique identifier of the video. - Removes the video from the queue if it exists. - Returns `True` if the video was successfully removed; otherwise, returns `False`. - `get_queue()`: - Returns a list of integers representing the video IDs in the order they were added to the queue. Implement the `VideoQueue` class with the above-mentioned methods. Use list data structure to maintain the queue. **Example:** ```python queue = VideoQueue() queue.add_video(1) queue.add_video(2) queue.add_video(3) print(queue.get_queue()) # Output: [1, 2, 3] print(queue.remove_video(2)) # Output: True print(queue.get_queue()) # Output: [1, 3] print(queue.remove_video(4)) # Output: False ``` Ensure your implementation handles edge cases such as removing a video that does not exist in the queue.","solution":"class VideoQueue: def __init__(self): self.queue = [] def add_video(self, video_id): self.queue.append(video_id) def remove_video(self, video_id): if video_id in self.queue: self.queue.remove(video_id) return True else: return False def get_queue(self): return self.queue"},{"question":"You are required to write a function to calculate and plot statistical data using the `matplotlib` and `numpy` libraries in Python. This function should be named `plot_statistics` and it will utilize `numpy` for calculations and `matplotlib.pyplot` for plotting bar charts. The function should take two lists as input parameters: - `data`: A list of numerical values. - `categories`: A list of integers or strings representing categories corresponding to the data values. The function should: 1. Calculate the mean, median, and standard deviation of the `data` list. 2. Create a vertically oriented bar chart displaying the mean, median, and standard deviation, labeled appropriately. 3. Display the bar chart with the bars in different colors for clear distinction. 4. Add a title \\"Statistical Analysis\\". Here is the detailed specification of the function: - **Function Name**: `plot_statistics` - **Input Parameters**: - `data`: List of numerical values (floats or integers). - `categories`: List of integers or strings representing the categories of data (used just for context, not for calculations). - **Output**: The function should display a bar chart using `matplotlib`. Utilize the `numpy.mean`, `numpy.median`, and `numpy.std` functions for the calculations, and the `matplotlib.pyplot.bar` and `matplotlib.pyplot.title` functions for creating and annotating the plot to ensure it is informative and well-labeled.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_statistics(data, categories): Calculate mean, median, and standard deviation of the data list and plot them. Parameters: data (list): A list of numerical values (floats or integers). categories (list): A list of integers or strings representing the categories of data. Output: Displays a bar chart using matplotlib. if not data: raise ValueError(\\"Data list is empty\\") mean_value = np.mean(data) median_value = np.median(data) std_dev_value = np.std(data) statistics = [mean_value, median_value, std_dev_value] labels = [\'Mean\', \'Median\', \'Std Dev\'] colors = [\'blue\', \'green\', \'red\'] # Plotting the bar chart plt.bar(labels, statistics, color=colors) plt.title(\\"Statistical Analysis\\") plt.show()"},{"question":"You are provided with a collection of books, each represented by a dictionary containing the book\'s title, author, and publication year. You need to write a function that categorizes these books by decade based on their publication year. Your objective is to write a function `categorize_books_by_decade` that takes a list of book dictionaries and returns a dictionary where the keys are decades (e.g., \'1990s\', \'2000s\') and the values are lists of book titles published in that decade. # Requirements: 1. Define a function `categorize_books_by_decade(books)` where `books` is a list of dictionaries. Each dictionary contains the keys: \'title\', \'author\', and \'year\'. 2. The function should categorize the book titles based on the decade of their publication year. 3. The decades should be represented as strings in the format \'1990s\', \'2000s\', etc. 4. If a book\'s publication year is 1991, it should be categorized under \'1990s\'. # Example Input ```python books = [ {\\"title\\": \\"Book One\\", \\"author\\": \\"Author A\\", \\"year\\": 1991}, {\\"title\\": \\"Book Two\\", \\"author\\": \\"Author B\\", \\"year\\": 1985}, {\\"title\\": \\"Book Three\\", \\"author\\": \\"Author C\\", \\"year\\": 2010}, {\\"title\\": \\"Book Four\\", \\"author\\": \\"Author D\\", \\"year\\": 2003}, {\\"title\\": \\"Book Five\\", \\"author\\": \\"Author E\\", \\"year\\": 1995}, ] ``` # Example Output ```python { \'1990s\': [\'Book One\', \'Book Five\'], \'1980s\': [\'Book Two\'], \'2010s\': [\'Book Three\'], \'2000s\': [\'Book Four\'] } ``` # Hint: To determine the decade string, you can use integer division to get the start of the decade and then append \'0s\' to the result. Here is the structure of the function you need to implement: ```python def categorize_books_by_decade(books): \'\'\' This function categorizes books by the decade of their publication year. parameters: books - List of dictionaries with keys \'title\', \'author\', and \'year\' Returns: Dictionary where keys are decades and values are lists of book titles \'\'\' # Your code here ```","solution":"def categorize_books_by_decade(books): Categorizes books by the decade of their publication year. Parameters: books (list of dict): List of dictionaries with keys \'title\', \'author\', and \'year\'. Returns: dict: Dictionary where keys are decades and values are lists of book titles. categorized_books = {} for book in books: year = book[\'year\'] decade = (year // 10) * 10 decade_str = f\\"{decade}s\\" if decade_str not in categorized_books: categorized_books[decade_str] = [] categorized_books[decade_str].append(book[\'title\']) return categorized_books"},{"question":"You are tasked with implementing a simple book catalog system in Python that allows adding new books and retrieving the details of a book using its ISBN number. The purpose of this exercise is to understand how to use dictionaries for storing and retrieving data. **Function Name:** - `manage_books` **Inputs:** - The function takes a list of tuples with two possible types of entries: 1. `(\\"add\\", ISBN, title, author)` - Represents a command to add a new book to the catalog. 2. `(\\"get\\", ISBN)` - Represents a command to retrieve the details of a book using its ISBN. **Outputs:** - For each `(\\"get\\", ISBN)` command, prints the details of the book in the format `\\"Title: {title}, Author: {author}\\"`. - If the ISBN does not exist in the catalog, prints `\\"Book not found\\"`. **Instructions:** 1. Implement the function `manage_books(commands)` where `commands` is the list of tuples provided as input. 2. Use a dictionary to store book details, where the key is the ISBN and the value is another dictionary with keys `\'title\'` and `\'author\'`. 3. For `(\\"add\\", ISBN, title, author)` commands, add the book to the dictionary. 4. For `(\\"get\\", ISBN)` commands, retrieve and print the book\'s details if the ISBN exists in the dictionary; otherwise, print `\\"Book not found\\"`. # Example: ```python manage_books([(\\"add\\", \\"12345\\", \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\"), (\\"add\\", \\"67890\\", \\"1984\\", \\"George Orwell\\"), (\\"get\\", \\"12345\\"), (\\"get\\", \\"11111\\")]) ``` Expected output: ``` Title: The Great Gatsby, Author: F. Scott Fitzgerald Book not found ```","solution":"def manage_books(commands): Manages a book catalog by executing add and get actions. catalog = {} for command in commands: action = command[0] if action == \\"add\\": ISBN = command[1] title = command[2] author = command[3] catalog[ISBN] = {\'title\': title, \'author\': author} elif action == \\"get\\": ISBN = command[1] if ISBN in catalog: book = catalog[ISBN] print(f\\"Title: {book[\'title\']}, Author: {book[\'author\']}\\") else: print(\\"Book not found\\")"},{"question":"You are asked to create a function to help analyze a rectangular garden plot, which is often encountered in introductory geometry and computer science problems. Imagine a rectangular garden with dimensions `l` (length) and `w` (width). A diagonal path runs from one corner of the garden to the opposite corner, dividing the garden into two right-angle triangles. Create a function `analyze_garden(l, w)` that performs the following tasks: 1. Computes the length of the diagonal using the Pythagorean theorem. 2. Calculates the perimeter of the garden. 3. Computes the area of the garden. 4. Determines the angles between the diagonal and the length sides of the garden in degrees. 5. Returns a dictionary with the keys \'diagonal_length\', \'perimeter\', \'area\', and \'angles\', where \'angles\' is a tuple containing the two angles between the diagonal and the length sides of the garden in degrees. Ensure you use the following Python library functions: - `math.sqrt` to calculate the square root. - `math.degrees` to convert from radians to degrees. - `math.atan` to compute the arctangent, which helps in finding the angles. # Function Signature ```python def analyze_garden(l: float, w: float) -> dict: pass ``` # Parameters: - `l` (float): the length of the garden. - `w` (float): the width of the garden. # Returns: - `dict`: A dictionary with keys \'diagonal_length\' (float), \'perimeter\' (float), \'area\' (float), and \'angles\' (tuple of two floats). # Example: ```python result = analyze_garden(3, 4) # Returns: { # \'diagonal_length\': 5.0, # \'perimeter\': 14.0, # \'area\': 12.0, # \'angles\': (36.87, 53.13) # } ``` # Note: - Assume the inputs provided will always be positive numbers. - Angle values in the return should be rounded to two decimal places where necessary. # Hint: Refer to the Python library documentation for math functions to see how `math.sqrt`, `math.degrees`, and `math.atan` should be used.","solution":"import math def analyze_garden(l, w): Analyzes a rectangular garden plot. Args: l (float): length of the garden. w (float): width of the garden. Returns: dict: Dictionary containing the diagonal length, perimeter, area, and angles. # Compute the length of the diagonal diagonal_length = math.sqrt(l**2 + w**2) # Calculate the perimeter of the garden perimeter = 2 * (l + w) # Compute the area of the garden area = l * w # Determine the angles (in degrees) between the diagonal and the length sides angle1 = math.degrees(math.atan(w / l)) angle2 = math.degrees(math.atan(l / w)) return { \'diagonal_length\': round(diagonal_length, 2), \'perimeter\': round(perimeter, 2), \'area\': round(area, 2), \'angles\': (round(angle1, 2), round(angle2, 2)) }"},{"question":"You are required to implement a k-Nearest Neighbors (k-NN) classifier using the Iris dataset available in the scikit-learn library. Write a function named `train_and_evaluate_knn` that performs the following tasks: 1. Load the Iris dataset using `datasets.load_iris()`. 2. Split the dataset into training and test sets using `train_test_split` from `sklearn.model_selection`. Use 30% of the data for testing and a random state of 42 to ensure reproducibility. 3. Normalize the feature data using `StandardScaler` from `sklearn.preprocessing`. 4. Train a k-Nearest Neighbors classifier from `sklearn.neighbors` on the normalized training data. Use k=5 for the number of neighbors. 5. Make predictions on the normalized test data. 6. Print the following evaluation metrics: - Classification report (`sklearn.metrics.classification_report`) - Confusion matrix (`sklearn.metrics.confusion_matrix`) - Accuracy score (`sklearn.metrics.accuracy_score`) - Matthews Correlation Coefficient (`sklearn.metrics.matthews_corrcoef`) Your implementation should adhere to the specifications and usage of the required functions as demonstrated in their respective `Library Api Doc`.","solution":"from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, matthews_corrcoef def train_and_evaluate_knn(): # Load the Iris dataset iris = datasets.load_iris() X, y = iris.data, iris.target # Split the dataset into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Normalize the feature data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Train k-Nearest Neighbors classifier classifier = KNeighborsClassifier(n_neighbors=5) classifier.fit(X_train, y_train) # Make predictions on the test data y_pred = classifier.predict(X_test) # Print evaluation metrics print(\\"Classification Report:\\") print(classification_report(y_test, y_pred)) print(\\"Confusion Matrix:\\") print(confusion_matrix(y_test, y_pred)) print(\\"Accuracy Score:\\") print(accuracy_score(y_test, y_pred)) print(\\"Matthews Correlation Coefficient:\\") print(matthews_corrcoef(y_test, y_pred)) # Run the function to output the desired information train_and_evaluate_knn()"},{"question":"Create a function named `drawSquare()`, which uses the turtle graphics library to draw a square on the screen. The turtle should start at its initial position (facing right) and move 150 units forward to form each side of the square. The function must ensure that the turtle turns correctly to create the square by using the `turtle.right()` function to change its direction. After completing the square, the turtle should return to its original starting position and face its initial direction. You are required to use the `turtle.right()` function for turning the turtle. Below are details on how the function works: ```python turtle.right(angle) ``` - `angle` -- a number (integer or float) representing the angle in degrees by which the turtle will turn right. The function `drawSquare()` should not return any value.","solution":"import turtle def drawSquare(): Draws a square with each side of 150 units using turtle graphics. The turtle starts at its initial position and returns to it after completing the square, facing the initial direction. for _ in range(4): turtle.forward(150) turtle.right(90) # Ensuring the turtle window does not close immediately turtle.done()"},{"question":"This function takes a string of words and returns the word frequency in the string. The function should ignore punctuation, be case-insensitive, and should consider words to be sequences of characters separated by whitespace. The function should return a dictionary where keys are words and values are the corresponding word frequencies. You should write self-contained code starting with: ``` import string def word_frequencies(text): ```","solution":"import string def word_frequencies(text): Returns a dictionary containing the frequency of each word in the given text. The function ignores punctuation and is case-insensitive. # Convert text to lowercase text = text.lower() # Remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) # Split text into words words = text.split() # Create dictionary to hold word counts word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"You are tasked with creating a function named `circular_shift` that performs a circular (or cyclic) shift on a given 1-dimensional array `arr` by `k` positions to the right. The circular shift moves the elements of an array in a circular fashion such that elements shifted off the end appear at the beginning. 1. Define a function named `circular_shift(arr, k)` where `arr` is a 1-dimensional list or numpy array and `k` is a non-negative integer representing the number of positions to shift. 2. Handle cases where `k` is greater than the length of `arr` by taking `k` modulo the length of `arr`. 3. Perform the circular shift on the array. 4. Return the shifted array. You should use slicing to achieve the circular shift. Example Usage: ```python import numpy as np arr = np.array([1, 2, 3, 4, 5]) shifted_arr = circular_shift(arr, 2) print(shifted_arr) ``` Expected Output for the example: ```plaintext [4 5 1 2 3] ```","solution":"def circular_shift(arr, k): This function performs a circular shift on a given 1-dimensional array `arr` by `k` positions to the right. if len(arr) == 0: return arr n = len(arr) k = k % n # Handle cases where k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"You are asked to implement a function `count_inversions` that counts the number of inversions in an array. An inversion is a pair of elements in an array such that the previous element is greater than the next element. The function should return the total number of inversions. For example, given the array `[2, 4, 1, 3, 5]`, the number of inversions is 3 because there are 3 such pairs: (2, 1), (4, 1), and (4, 3). To solve this problem, you should: 1. Write a function `count_inversions(arr)` that takes a list of integers `arr` as an input. 2. Implement an efficient algorithm to count the number of inversions. A naive O(n^2) approach using nested loops is acceptable, but an O(n log n) approach using a modified merge sort algorithm is preferred. 3. Return the total number of inversions as an integer. To assist you with solving this problem, consider using the following approach: - Modify the merge sort algorithm to count and return the number of inversions. - Use a helper function `merge_and_count` that merges two sorted subarrays and counts the cross-inversions between them. Implement the function `count_inversions(arr)` as specified.","solution":"def count_inversions(arr): Counts the number of inversions in the array. An inversion is a pair (i, j) such that i < j and arr[i] > arr[j]. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"},{"question":"Write a function to parse a JSON file and extract all unique URLs present in it. The JSON file can contain nested dictionaries and lists. If the file does not exist, download it from a given URL and then perform the extraction. Print each unique URL found in the JSON. The function should output: unique_urls (list): A list of unique URLs extracted from the JSON. You should write self-contained code starting with: ``` import json import os import ssl import urllib.request # Constants FILE_PATH = \'data.json\' URL = \'https://example.com/data.json\' def extract_urls_from_json(json_data): urls = set() if isinstance(json_data, dict): for key, value in json_data.items(): urls.update(extract_urls_from_json(value)) elif isinstance(json_data, list): for item in json_data: urls.update(extract_urls_from_json(item)) elif isinstance(json_data, str) and json_data.startswith(\'http\'): urls.add(json_data) return urls def task_func(file_path=FILE_PATH, url=URL): # ensure file exists if not os.path.exists(file_path): try: with urllib.request.urlopen(url) as response: with open(file_path, \'wb\') as out_file: out_file.write(response.read()) except Exception as e: print(f\\"Error downloading file: {e}\\") return # read and parse json try: with open(file_path, \'r\') as file: json_data = json.load(file) unique_urls = extract_urls_from_json(json_data) for u in unique_urls: print(u) except Exception as e: print(f\\"Error processing file: {e}\\") ```","solution":"import json import os import ssl import urllib.request # Constants FILE_PATH = \'data.json\' URL = \'https://example.com/data.json\' def extract_urls_from_json(json_data): urls = set() if isinstance(json_data, dict): for key, value in json_data.items(): urls.update(extract_urls_from_json(value)) elif isinstance(json_data, list): for item in json_data: urls.update(extract_urls_from_json(item)) elif isinstance(json_data, str) and json_data.startswith(\'http\'): urls.add(json_data) return urls def task_func(file_path=FILE_PATH, url=URL): # ensure file exists if not os.path.exists(file_path): try: with urllib.request.urlopen(url) as response: with open(file_path, \'wb\') as out_file: out_file.write(response.read()) except Exception as e: print(f\\"Error downloading file: {e}\\") return # read and parse json try: with open(file_path, \'r\') as file: json_data = json.load(file) unique_urls = extract_urls_from_json(json_data) for u in unique_urls: print(u) return unique_urls except Exception as e: print(f\\"Error processing file: {e}\\") return []"},{"question":"Write a function that normalizes the values in a pandas DataFrame containing a column named \'Scores\'. The normalized values should be between 0 and 1. This function will take a pandas DataFrame where one of the columns is named \'Scores\' and it will normalize the values in this column based on the formula: normalized_value = (x - min) / (max - min), where min and max are the minimum and maximum values of the \'Scores\' column respectively. The function then adds or replaces a column in the DataFrame with these normalized values. Additionally, the function computes and returns the mean value of each column in the DataFrame. The function should raise an exception for: ValueError: If the DataFrame does not have the required \'Scores\' column. The function should output with: pd.DataFrame, pd.Series: - A DataFrame containing the original data with an added or replaced column named \'NormalizedScores\'. - A Series representing the mean value for each column. You should write self-contained code starting with: ``` import pandas as pd def normalize_scores(data): ```","solution":"import pandas as pd def normalize_scores(data): Normalizes the \'Scores\' column in the DataFrame and adds/replaces it with \'NormalizedScores\' column. Also returns the mean values of each column in the DataFrame. Parameters: data (pd.DataFrame): DataFrame containing a \'Scores\' column Returns: pd.DataFrame: DataFrame with \'NormalizedScores\' column pd.Series: Mean values of each column in the DataFrame if \'Scores\' not in data.columns: raise ValueError(\\"The DataFrame does not have the required \'Scores\' column.\\") min_score = data[\'Scores\'].min() max_score = data[\'Scores\'].max() if min_score == max_score: data[\'NormalizedScores\'] = 0 else: data[\'NormalizedScores\'] = (data[\'Scores\'] - min_score) / (max_score - min_score) column_means = data.mean() return data, column_means"},{"question":"You are required to implement a function named `knapsack_01(values, weights, W)`. The function will solve the 0/1 Knapsack problem using dynamic programming. The function should return the maximum total value that can be achieved with a given weight limit. **Function Signature:** ```python def knapsack_01(values: list, weights: list, W: int) -> int: ``` **Parameters:** - `values`: A list of integers where `values[i]` represents the value of the `i-th` item. - Example: `[60, 100, 120]` - `weights`: A list of integers where `weights[i]` represents the weight of the `i-th` item. - Example: `[10, 20, 30]` - `W`: An integer representing the maximum weight capacity of the knapsack. - Example: `50` **Returns:** - An integer representing the maximum value that can be achieved with the given weight capacity. **Constraints:** - The length of `values` and `weights` is equal and is between 1 and 100 inclusive. - Each value in `values` and `weights` is between 1 and 1000 inclusive. - `W` is a positive integer and not greater than 10,000. **Example:** ```python values = [60, 100, 120] weights = [10, 20, 30] W = 50 print(knapsack_01(values, weights, W)) ``` Output: ```python 220 ``` **Note:** - You are required to use a dynamic programming approach, where you build a table to store the results of subproblems and reuse them in solving larger problems.","solution":"def knapsack_01(values, weights, W): Solves the 0/1 Knapsack problem using dynamic programming. Args: values (list): List of item values. weights (list): List of item weights. W (int): Maximum weight capacity of the knapsack. Returns: int: The maximum total value achievable within the given weight capacity. n = len(values) dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] for i in range(n + 1): for w in range(W + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][W]"},{"question":"You are tasked with creating a function `generate_sample_means` that demonstrates the application of the Central Limit Theorem by generating sample means from a given dataset. The function should read a dataset from a CSV file named `data.csv`, take random samples of specified size, calculate their means, and return a list of these means. Here are the specifications for the function: 1. **Function Name**: `generate_sample_means` 2. **Parameters**: - `file_path`: a string representing the path to the CSV file that contains the dataset. - `column`: a string specifying the column name from which to draw samples. - `sample_size`: an integer representing the number of data points to include in each sample. - `num_samples`: an integer representing the number of samples to draw. 3. **Output**: The function should return a list of means of the drawn samples. # Example ```python # Given dataset in data.csv: # Value # 10 # 12 # 23 # 23 # 16 # 20 # 24 # 22 # 14 # 18 print(generate_sample_means(\'data.csv\', \'Value\', 4, 3)) # Possible Output: # [17.75, 20.5, 19.0] ``` # Requirements: - You must use the `numpy` library for random sampling and calculations. - Read the dataset using appropriate pandas methods. - The function should draw the specified number of random samples, compute their means, and return these means in a list. Add necessary import statements and handle any potential exceptions that might arise from invalid input. Use appropriate pandas methods for reading the dataset and numpy methods for random sampling and calculations.","solution":"import pandas as pd import numpy as np def generate_sample_means(file_path, column, sample_size, num_samples): Reads data from a CSV file, draws random samples from a specified column, calculates their means, and returns a list of these means. Parameters: file_path (str): The path to the CSV file containing the dataset. column (str): The column name from which to draw samples. sample_size (int): The number of data points to include in each sample. num_samples (int): The number of samples to draw. Returns: List[float]: A list of means of the drawn samples. try: # Reading the dataset from the specified CSV file data = pd.read_csv(file_path) # Validate if the column exists in the dataframe if column not in data.columns: raise KeyError(f\\"Column {column} not found in the dataset.\\") # Validate the sample size if sample_size > len(data): raise ValueError(\\"Sample size cannot be greater than the number of data points in the dataset.\\") # Generate sample means sample_means = [] for _ in range(num_samples): sample = data[column].sample(n=sample_size, replace=False) sample_means.append(np.mean(sample)) return sample_means except FileNotFoundError: raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") except pd.errors.EmptyDataError: raise ValueError(f\\"The file {file_path} is empty.\\") except Exception as e: raise e"},{"question":"Given a matrix of integers representing a 2D grid, write a function `replace_borders(matrix)` that replaces the border elements of the matrix with the largest integer within the border. Assume the matrix is non-empty and contains at least one row and one column. # Function Signature ```python def replace_borders(matrix: List[List[int]]) -> List[List[int]]: ``` # Input - `matrix`: A list of lists of integers where each inner list represents a row in the 2D grid. # Output - Returns a new 2D grid (list of lists) where the border elements have been replaced with the largest integer from the initial border elements of the input matrix. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # The border elements are [1, 2, 3, 4, 6, 7, 8, 9] # The largest integer in the border is 9 result = replace_borders(matrix) # The resulting matrix should be: # [ # [9, 9, 9], # [9, 5, 9], # [9, 9, 9] # ] ``` In the function: 1. Identify the largest integer in the border elements. 2. Replace all border elements with the identified largest integer. 3. Return the newly formed matrix.","solution":"from typing import List def replace_borders(matrix: List[List[int]]) -> List[List[int]]: # Identify the border elements border_elements = [] rows = len(matrix) cols = len(matrix[0]) # Top row border_elements.extend(matrix[0]) # Bottom row if rows > 1: border_elements.extend(matrix[-1]) # Left and Right columns for i in range(1, rows - 1): border_elements.append(matrix[i][0]) if cols > 1: border_elements.append(matrix[i][-1]) # Find the maximum element on the border max_border_value = max(border_elements) # Create a new matrix with updated borders new_matrix = [row[:] for row in matrix] # Update the top row border for j in range(cols): new_matrix[0][j] = max_border_value # Update the bottom row border if more than one row if rows > 1: for j in range(cols): new_matrix[-1][j] = max_border_value # Update the left and right column borders if more than one column for i in range(1, rows - 1): new_matrix[i][0] = max_border_value if cols > 1: new_matrix[i][-1] = max_border_value return new_matrix"},{"question":"You are provided with a list of employee records where each record contains employee ID, name, age, department, and salary. Your task is to write a function that calculates the average salary for each department and returns a dictionary where the keys are the department names and the values are the corresponding average salaries. Additionally, there is a requirement to anonymize the employee names in the records. Anonymization should be done by replacing each name with the string \\"Employee_1\\", \\"Employee_2\\", etc., maintaining the sequence of the records. Write a function named `process_employee_records` that takes a list of dictionaries, where each dictionary represents an employee record, and returns two outputs: 1. A dictionary with departments as keys and their respective average salaries as values. 2. A list of anonymized employee records in the same order as the input list. **Function Signature:** ```python def process_employee_records(records: List[dict]) -> Tuple[Dict[str, float], List[dict]]: ``` **Example:** ```python from typing import List, Dict, Tuple # Sample data employee_records = [ {\'EmployeeID\': 1, \'Name\': \'John Doe\', \'Age\': 28, \'Department\': \'Sales\', \'Salary\': 50000}, {\'EmployeeID\': 2, \'Name\': \'Jane Smith\', \'Age\': 34, \'Department\': \'Marketing\', \'Salary\': 60000}, {\'EmployeeID\': 3, \'Name\': \'Emily Jones\', \'Age\': 26, \'Department\': \'Sales\', \'Salary\': 55000}, {\'EmployeeID\': 4, \'Name\': \'Michael Brown\', \'Age\': 45, \'Department\': \'HR\', \'Salary\': 70000}, {\'EmployeeID\': 5, \'Name\': \'Jessica Davis\', \'Age\': 32, \'Department\': \'Marketing\', \'Salary\': 62000}, ] # Process the employee records average_salaries, anonymized_records = process_employee_records(employee_records) print(average_salaries) print(anonymized_records) ``` The expected output should be as follows: ```python { \'Sales\': 52500.0, \'Marketing\': 61000.0, \'HR\': 70000.0 } [ {\'EmployeeID\': 1, \'Name\': \'Employee_1\', \'Age\': 28, \'Department\': \'Sales\', \'Salary\': 50000}, {\'EmployeeID\': 2, \'Name\': \'Employee_2\', \'Age\': 34, \'Department\': \'Marketing\', \'Salary\': 60000}, {\'EmployeeID\': 3, \'Name\': \'Employee_3\', \'Age\': 26, \'Department\': \'Sales\', \'Salary\': 55000}, {\'EmployeeID\': 4, \'Name\': \'Employee_4\', \'Age\': 45, \'Department\': \'HR\', \'Salary\': 70000}, {\'EmployeeID\': 5, \'Name\': \'Employee_5\', \'Age\': 32, \'Department\': \'Marketing\', \'Salary\': 62000}, ] ```","solution":"from typing import List, Dict, Tuple def process_employee_records(records: List[dict]) -> Tuple[Dict[str, float], List[dict]]: department_salaries = {} department_counts = {} anonymized_records = [] for idx, record in enumerate(records): # Anonymize the name anonymized_record = record.copy() anonymized_record[\'Name\'] = f\'Employee_{idx + 1}\' anonymized_records.append(anonymized_record) # Calculate the total salary per department dept = record[\'Department\'] salary = record[\'Salary\'] if dept not in department_salaries: department_salaries[dept] = 0 department_counts[dept] = 0 department_salaries[dept] += salary department_counts[dept] += 1 # Calculate the average salary per department average_salaries = {dept: department_salaries[dept] / department_counts[dept] for dept in department_salaries} return average_salaries, anonymized_records"},{"question":"Write a function `calculate_toll(fare, discount_member=False)` that calculates the toll fee for a vehicle passing through a toll booth. The function should: 1. Take two inputs: `fare` (float) which is the basic fare for non-discount members, and `discount_member` (boolean) which indicates if the vehicle owner is a discount member. By default, `discount_member` is set to `False`. 2. If the owner is a `discount_member`, apply a 15% discount on the basic `fare`. 3. Print the final toll fee that the vehicle owner has to pay. 4. If the final toll fee is less than 3.00, print \\"Minimum toll fee is 3.00, please check your discount policy.\\" 5. Ensure that the final toll fee is formatted to two decimal points. Example usage of the function: ```python def calculate_toll(fare, discount_member=False): # Add your implementation here based on the requirements pass # Example usage calculate_toll(20.0, True) # Should apply discount and print 17.00 calculate_toll(2.0, False) # Should print a message about the minimum toll fee ```","solution":"def calculate_toll(fare, discount_member=False): Calculates the toll fee for a vehicle passing through a toll booth. Parameters: - fare: float, basic fare for non-discount members - discount_member: bool, indicates if the vehicle owner is a discount member Returns: - final fare formatted to two decimal points as a string if discount_member: final_fare = fare * 0.85 else: final_fare = fare if final_fare < 3.00: return \\"Minimum toll fee is 3.00, please check your discount policy.\\" else: return f\\"{final_fare:.2f}\\""},{"question":"This function takes a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. If the list is empty, the function should return an empty dictionary. The function should output a dictionary with: key: Integer from the list. value: Frequency count of the integer. You should write self-contained code starting with: ``` def task_func(int_list): ```","solution":"def task_func(int_list): Returns a dictionary where keys are the integers from the list and values are the frequency count of each integer. Args: int_list (list): List of integers. Returns: dict: Dictionary with integer frequency count. frequency_dict = {} for num in int_list: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return frequency_dict"},{"question":"You are given a list of integers and a target number. Your task is to write a function `two_sum` that finds two numbers in the list that add up to the target number and returns their indices. The solution must have a time complexity of O(n). You can assume that each input would have exactly one solution, and you may not use the same element twice. # Function Signature ```python from typing import List, Tuple def two_sum(nums: List[int], target: int) -> Tuple[int, int]: # Your code here ``` # Input - `nums` (List[int]): A list of integers. - `target` (int): The target integer that the sum of two numbers in the list should equal to. # Output - The function should return a tuple of two integers representing the indices of the two numbers that add up to the target. # Example ```python # Example 1 result = two_sum([2, 7, 11, 15], 9) print(result) # Output: (0, 1) because nums[0] + nums[1] == 9 # Example 2 result = two_sum([3, 2, 4], 6) print(result) # Output: (1, 2) because nums[1] + nums[2] == 6 # Example 3 result = two_sum([3, 3], 6) print(result) # Output: (0, 1) because nums[0] + nums[1] == 6 ``` # Requirements - Ensure the function has a time complexity of O(n). - You can assume the input does not contain any duplicate solutions and each input has exactly one solution. # Constraints - The length of `nums` will be at most 10^4. - `nums[i]` will be an integer within the range [-10^9, 10^9]. - `target` will be an integer within the range [-10^9, 10^9].","solution":"from typing import List, Tuple def two_sum(nums: List[int], target: int) -> Tuple[int, int]: Finds two numbers in the list that add up to the target number and returns their indices. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index"},{"question":"You are given a list of flight tickets represented as pairs of departure and arrival airports [from, to], construct the itinerary in order. All of the tickets belong to a man who departs from a \'JFK\' airport. Thus, the itinerary should start with \'JFK\'. If there are multiple valid itineraries, you should construct the itinerary that has the smallest lexical order when read as a single string. You may assume all tickets form at least one valid itinerary. You are required to write a function `find_itinerary` which performs the following steps: 1. Construct the itinerary by sorting the tickets first based on the departure, and then the destination. 2. Implement a Depth-First Search (DFS) to find the lexical smallest itinerary. **Function Signature:** ```python def find_itinerary(tickets: List[List[str]]) -> List[str]: ``` **Parameters:** - `tickets` (List[List[str]]): A list of pairs representing the flight tickets. **Returns:** - Returns a list of strings that represents the constructed itinerary starting from \'JFK\'. **Example:** ```python find_itinerary([[\\"MUC\\", \\"LHR\\"], [\\"JFK\\", \\"MUC\\"], [\\"SFO\\", \\"SJC\\"], [\\"LHR\\", \\"SFO\\"]]) # Output: [\\"JFK\\", \\"MUC\\", \\"LHR\\", \\"SFO\\", \\"SJC\\"] find_itinerary([[\\"JFK\\",\\"SFO\\"], [\\"JFK\\",\\"ATL\\"], [\\"SFO\\",\\"ATL\\"], [\\"ATL\\",\\"JFK\\"], [\\"ATL\\",\\"SFO\\"]]) # Output: [\\"JFK\\", \\"ATL\\", \\"JFK\\", \\"SFO\\", \\"ATL\\", \\"SFO\\"] ``` **Task Requirements:** - The solution should utilize Depth-First Search (DFS) to ensure all possible paths are explored. - The itinerary should be constructed such that it starts at \'JFK\' and follows the smallest lexical order in case of ties. - Proper handling of the input ensures that all given tickets are utilized exactly once to form the itinerary.","solution":"def find_itinerary(tickets): from collections import defaultdict graph = defaultdict(list) # Build the graph using the tickets for src, dest in sorted(tickets): graph[src].append(dest) result = [] stack = [\\"JFK\\"] while stack: while graph[stack[-1]]: stack.append(graph[stack[-1]].pop(0)) result.append(stack.pop()) return result[::-1]"},{"question":"Reads a CSV file, performs data preprocessing to handle missing values and encodes categorical columns, then trains a linear regression model to predict a specified numeric column. The function should raise an exception for: FileNotFoundError: If the CSV file does not exist. ValueError: If the specified numeric column is not present in the dataset. ValueError: If there are no numeric columns in the dataset after preprocessing. The function should output with: pd.DataFrame: DataFrame containing the preprocessed data. linear_model: The trained linear regression model instance. You should write self-contained code starting with: ```python import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.preprocessing import OneHotEncoder, StandardScaler def task_func(csv_path, target_column): ```","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.preprocessing import OneHotEncoder, StandardScaler from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.impute import SimpleImputer import os def task_func(csv_path, target_column): # Check if file exists if not os.path.exists(csv_path): raise FileNotFoundError(f\\"The file {csv_path} does not exist.\\") # Read the CSV file df = pd.read_csv(csv_path) # Check if the target column exists if target_column not in df.columns: raise ValueError(f\\"The target column \'{target_column}\' is not present in the dataset.\\") # Identify numeric and categorical columns numeric_features = df.select_dtypes(include=[\'int64\', \'float64\']).columns.tolist() categorical_features = df.select_dtypes(include=[\'object\']).columns.tolist() # Remove the target column from the list of numeric features if target_column in numeric_features: numeric_features.remove(target_column) # If there are no numeric columns left if not numeric_features: raise ValueError(f\\"There are no numeric columns in the dataset after preprocessing.\\") # Preprocessing pipelines for both numeric and categorical data numeric_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'mean\')), (\'scaler\', StandardScaler()) ]) categorical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'constant\', fill_value=\'missing\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\')) ]) # Bundle preprocessing preprocessor = ColumnTransformer( transformers=[ (\'num\', numeric_transformer, numeric_features), (\'cat\', categorical_transformer, categorical_features) ]) # Split data X = df.drop(target_column, axis=1) y = df[target_column] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the model model = Pipeline(steps=[(\'preprocessor\', preprocessor), (\'regressor\', LinearRegression())]) model.fit(X_train, y_train) return df, model"},{"question":"You are working on a project that involves polynomial regression. Your task is to implement a function to compute the predicted values for a set of input features given the polynomial coefficients. The hypothesis function for polynomial regression is defined as follows: [ h(x) = sum_{i=0}^{n} theta_i x^{i} ] Where: - ( theta ) is the vector of polynomial coefficients. - ( x ) is the input feature. You need to implement the function `predict_polynomial` to calculate the predicted values for a given set of input features using numpy. The implementation must make use of the `numpy.power`, `numpy.sum`, and `numpy.dot` functions. Function signature: ```python def predict_polynomial(X, theta): Parameters: X (numpy.ndarray): Feature vector of shape (m, 1) where m is the number of input examples. theta (numpy.ndarray): Coefficient vector of shape (n+1, 1) where n is the degree of the polynomial. Returns: numpy.ndarray: A vector of predicted values of shape (m, 1). ``` **Example:** ```python import numpy as np X = np.array([[1], [2], [3], [4]]) theta = np.array([[2], [3], [4]]) # This corresponds to the polynomial 2 + 3x + 4x^2 predictions = predict_polynomial(X, theta) print(predictions) # Expected output: [ 9, 24, 47, 78] ``` Constraints: 1. You may assume that the degree of the polynomial (n) and the number of input examples (m) are both positive integers. 2. Ensure that the shapes of ( X ) and ( theta ) are compatible for polynomial regression calculations.","solution":"import numpy as np def predict_polynomial(X, theta): Compute the predicted values using polynomial regression. Parameters: X (numpy.ndarray): Feature vector of shape (m, 1) where m is the number of input examples. theta (numpy.ndarray): Coefficient vector of shape (n+1, 1) where n is the degree of the polynomial. Returns: numpy.ndarray: A vector of predicted values of shape (m, 1). m = X.shape[0] n = theta.shape[0] - 1 X_powers = np.ones((m, n+1)) for i in range(1, n+1): X_powers[:, i] = np.power(X[:, 0], i) predictions = np.dot(X_powers, theta) return predictions"},{"question":"You are required to implement a function named `cache_results` that decorates another function to cache its results based on the input arguments to avoid redundant calculations. The decorator should store the results of function calls in a dictionary where the keys are the arguments and the values are the computed results. The `cache_results` function should: - Use a dictionary to cache the results of function calls. - Check the cache before computing the result. If the arguments have been seen before, return the cached result. - If the arguments are new, compute the result, cache it, and then return it. The goal is to ensure that your `cache_results` decorator: - Efficiently handles multiple function calls with various arguments. - Uses a simple caching mechanism to store and retrieve results. - Maintains the function\'s original behavior and signature. For example, if you have a function `expensive_calculation` that performs a heavy computation, decorating it with `cache_results` should store previously computed results and use them when the same arguments are input again. Example usage: ```python @cache_results def expensive_calculation(a, b): # Simulate an expensive calculation import time time.sleep(2) return a * b result1 = expensive_calculation(3, 4) # Will take 2 seconds to compute result2 = expensive_calculation(3, 4) # Will return immediately from cache # Both result1 and result2 should be 12 ``` You are expected to ensure that the `cache_results` decorator works correctly and efficiently for different types of arguments and multiple calls.","solution":"def cache_results(func): Decorator that caches results of the function it decorates. cache = {} def wrapper(*args, **kwargs): key = (args, frozenset(kwargs.items())) if key in cache: return cache[key] result = func(*args, **kwargs) cache[key] = result return result return wrapper"},{"question":"Write a function that processes a list of strings and returns a new list with all anagrams grouped together. Each group should be sorted alphabetically, and the groups themselves should be sorted by the first string in each group. The order of the original list should not affect the grouping. The function should output: List[List[str]]: A list of lists, where each sublist contains anagrams grouped together and sorted. You should write self-contained code starting with: ``` def group_anagrams(words: List[str]) -> List[List[str]]: from collections import defaultdict ```","solution":"def group_anagrams(words: list) -> list: from collections import defaultdict # Create a dictionary to store grouped anagrams anagrams = defaultdict(list) # Group words by sorted tuple of characters for word in words: key = tuple(sorted(word)) anagrams[key].append(word) # Sort each group and the result dictionary by the first key\'s string result = [sorted(group) for group in anagrams.values()] result.sort(key=lambda group: group[0]) return result"},{"question":"You are working on an application that handles large datasets of numerical values. One common operation is to find the mode—the most frequently occurring value in a collection. In case of a tie (multiple values with the same highest frequency), the smallest value should be considered as the mode. You need to design a function that efficiently computes the mode for large datasets of integers. Context: - A large dataset is given as a list of integers. - The dataset can include both positive and negative integers. - The dataset can have duplicate values. - The dataset list can have up to 1,000,000 integers. Task: Implement the function `find_mode(dataset)` that: - Receives a list of integers, `dataset`. - Returns the integer that is the mode of the dataset. - In case of a tie (multiple integers with the same highest frequency), returns the smallest integer among them. # Requirements: - Your solution should efficiently handle large datasets. - You may use Python\'s built-in libraries to assist with calculations. # Function Signature: ```python def find_mode(dataset): # Your implementation here ``` Example Usage: ```python dataset = [1, 2, 2, 3, 3, 4] mode = find_mode(dataset) print(\\"Mode:\\", mode) # Output: Mode: 2 dataset = [4, 4, 4, 2, 2, 2, 1] mode = find_mode(dataset) print(\\"Mode:\\", mode) # Output: Mode: 2 ``` # Constraints: - The list `dataset` will contain up to 1,000,000 integers. - Dataset can include integers in the range of `-10^9` to `10^9`. Your task is to provide a full implementation of the function `find_mode` according to the description above.","solution":"from collections import Counter def find_mode(dataset): Returns the mode of the dataset. If there is a tie, returns the smallest value. if not dataset: raise ValueError(\\"Dataset should not be empty\\") count = Counter(dataset) max_frequency = max(count.values()) mode = min(key for key, freq in count.items() if freq == max_frequency) return mode"},{"question":"Given a list of integers, write a function that categorizes each integer as even or odd, and then creates two lists: one containing the even integers and the other containing the odd integers. The function should return a tuple containing these two lists. This showcases fundamental operations with lists, conditional statements, and basic handling of tuple data structures. The function should output with: ``` tuple: A tuple containing: evens (list): A list of even integers. odds (list): A list of odd integers. ``` You should write self-contained code starting with: ``` def categorize_numbers(numbers): ```","solution":"def categorize_numbers(numbers): Categorize a list of integers into even and odd numbers. Args: numbers (list): A list of integers. Returns: tuple: A tuple containing two lists: evens (list): A list of even integers. odds (list): A list of odd integers. evens = [] odds = [] for num in numbers: if num % 2 == 0: evens.append(num) else: odds.append(num) return (evens, odds)"},{"question":"You are asked to write a function named `word_frequencies` that takes a string containing an entire text document and returns a dictionary where the keys are words in the document and the values are the number of times each word appears. The function should ignore punctuation, be case-insensitive, and consider words with hyphens as separate words. The function signature should be: ```python def word_frequencies(text: str) -> dict: ``` The process involves the following steps: 1. Convert the entire text to lowercase to ensure case-insensitivity. 2. Remove all punctuation from the text. 3. Split the text into individual words based on whitespace. 4. Count the frequency of each word and store it in a dictionary. 5. Return the dictionary containing the word frequencies. For removing punctuation, you can use the `string.punctuation` constant from the `string` module. Make sure to handle hyphens correctly by treating hyphenated words as separate words. **Example Usage:** ```python document = \\"Hello, world! This is a test document. Hello, again! Do you like this test-document?\\" frequencies = word_frequencies(document) print(frequencies) ``` The output should be a dictionary like the following: ```python { \\"hello\\": 2, \\"world\\": 1, \\"this\\": 2, \\"is\\": 1, \\"a\\": 1, \\"test\\": 2, \\"document\\": 1, \\"again\\": 1, \\"do\\": 1, \\"you\\": 1, \\"like\\": 1, } ```","solution":"import string def word_frequencies(text): Returns a dictionary with the frequency of each word in the text. # Convert text to lowercase text = text.lower() # Replace hyphens with spaces text = text.replace(\'-\', \' \') # Remove punctuation from the text translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) # Split text into words words = text.split() # Create a dictionary to count word frequencies frequency_dict = {} for word in words: if word in frequency_dict: frequency_dict[word] += 1 else: frequency_dict[word] = 1 return frequency_dict"},{"question":"You are required to write a function named `reverse_words_in_sentence` that meets the following criteria: 1. **Function Name:** `reverse_words_in_sentence` 2. **Parameters:** - `sentence` (s): a string containing a sentence. 3. **Description:** This function should reverse the order of the words in the given sentence while maintaining the word order but not the character order within the words. Words are defined as sequences of non-space characters, and the words in the input sentence are separated by a single space. 4. **Usage Requirements:** Utilize string manipulation techniques to achieve the desired result. Function Signature: ```python def reverse_words_in_sentence(sentence: str) -> str: ``` # Example: ```python result = reverse_words_in_sentence(\\"Hello world from OpenAI\\") print(result) # Output example: \\"olleH dlrow morf IAnepO\\" ``` This problem aims to help you practice string manipulation and ensure your function adheres to the described parameter names and their types.","solution":"def reverse_words_in_sentence(sentence: str) -> str: This function takes a sentence string and reverses the characters in each word while maintaining their order in the sentence. Parameters: sentence (str): a string containing a sentence. Returns: str: the modified sentence with each word reversed in place. # Split the sentence into words words = sentence.split(\\" \\") # Reverse each word reversed_words = [word[::-1] for word in words] # Join the reversed words back into a sentence reversed_sentence = \\" \\".join(reversed_words) return reversed_sentence"},{"question":"# Problem Statement You are tasked with designing a program that processes a given list of integers and outputs a new list where each integer is replaced by the product of all other integers in the original list, except the one at that position. Ensure your solution does not use the division operator. # Function Requirements Create a function `product_except_self(nums: List[int]) -> List[int]` that performs the following operations: 1. Accepts a list of integers `nums` as its parameter. 2. Returns a new list where each element at index `i` is the product of all integers in the original list except for the integer at `nums[i]`. Your solution should maintain an O(n) time complexity and should not use division. # Constraints - All elements in `nums` are non-zero integers. - The input list `nums` will have at least two integers and no more than 10^5 integers. # Example ```python # Example 1 Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] # Example 2 Input: nums = [2, 3, 4, 5] Output: [60, 40, 30, 24] ``` # Libraries to Use - No additional libraries required beyond standard Python libraries. # Function Signature ```python from typing import List def product_except_self(nums: List[int]) -> List[int]: pass ```","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: length = len(nums) # Create two lists to hold the products left_products = [1] * length right_products = [1] * length result = [1] * length # Calculate left products for each element for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for each element for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Multiply left and right products for each element to get the final result for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a function that accepts a list of dictionaries representing students with their respective scores in various subjects. Convert this list into a Pandas DataFrame. Calculate each student\'s total and average score, and add these as new columns to the DataFrame. Sort the DataFrame in descending order based on the students\' total scores. Return the modified DataFrame. If the input list is empty, raise an appropriate exception. >>> students = [ ... {\\"name\\": \\"Alice\\", \\"math\\": 90, \\"science\\": 85, \\"english\\": 88}, ... {\\"name\\": \\"Bob\\", \\"math\\": 78, \\"science\\": 82, \\"english\\": 80}, ... {\\"name\\": \\"Charlie\\", \\"math\\": 92, \\"science\\": 91, \\"english\\": 93} ... ] >>> df = task_func(students) >>> df name math science english total average 2 Charlie 92 91 93 276 92.0 0 Alice 90 85 88 263 87.7 1 Bob 78 82 80 240 80.0 The function should output: DataFrame: A Pandas DataFrame containing the original data along with additional columns for total and average scores, sorted by total scores in descending order. You should write self-contained code starting with: ``` import pandas as pd def task_func(students): ```","solution":"import pandas as pd def task_func(students): if not students: raise ValueError(\\"The input list is empty\\") # Convert the list of dictionaries to DataFrame df = pd.DataFrame(students) # Calculate total and average scores for each student df[\'total\'] = df[[\'math\', \'science\', \'english\']].sum(axis=1) df[\'average\'] = df[[\'math\', \'science\', \'english\']].mean(axis=1) # Sort the DataFrame by total scores in descending order df = df.sort_values(by=\'total\', ascending=False).reset_index(drop=True) return df"},{"question":"You are required to write a function `longest_prefix_suffix(s: str) -> str` that finds the longest substring which is both a prefix and a suffix of the given string. The substring should not overlap with itself. Your function should follow these steps: 1. Iterate through all possible lengths of the prefix starting from the longest possible. 2. For each length, check if the prefix of that length is also a suffix. 3. Return the first (longest) substring that satisfies these conditions. # Function Signature ```python def longest_prefix_suffix(s: str) -> str: pass ``` # Example ```python print(longest_prefix_suffix(\\"ababcab\\")) # Output \\"ab\\" print(longest_prefix_suffix(\\"aaaa\\")) # Output \\"aaa\\" print(longest_prefix_suffix(\\"abcdef\\")) # Output \\"\\" ``` # Constraints - The given string `s` will have a length between 1 and 1000. - The string `s` will consist of lowercase English letters only. # Explanation - In the first example, \\"ab\\" is the longest substring which is both a prefix and a suffix of \\"ababcab\\". - In the second example, \\"aaa\\" is the longest substring which is both a prefix and a suffix of \\"aaaa\\". - In the last example, there is no prefix which is also a suffix, so the function returns an empty string.","solution":"def longest_prefix_suffix(s: str) -> str: Finds the longest substring which is both a prefix and a suffix of the given string. n = len(s) # Check for all possible lengths of the prefix and suffix starting from the longest. for length in range(n-1, 0, -1): if s[:length] == s[-length:]: return s[:length] # If no such substring is found, return an empty string. return \\"\\""},{"question":"You are required to write a Python function named `parse_and_process_strings` that performs the following tasks: 1. Parse a list of strings where each string contains a name and an age separated by a comma, e.g., \\"Alice,30\\". 2. Calculate the average age from the list. 3. Create a dictionary where the keys are the names and the values are the corresponding ages. The `re` library will be helpful to split the strings and can be utilized to ensure that the input format adheres to the expected pattern. **Function Signature:** ```python def parse_and_process_strings(data: list) -> dict: ``` **Parameters:** - `data` (list): A list of strings, each containing a name and an age separated by a comma. **Returns:** - `dict`: A dictionary with the following keys: - `average_age` (float): The average age calculated from the input data. - `name_age_dict` (dict): A dictionary where each key is a name from the input and each value is the corresponding age. **Notes:** You must ensure the string parsing is properly handled and that the function can handle an empty list by returning appropriate values. **Example:** ```python data = [\\"Alice,30\\", \\"Bob,25\\", \\"Charlie,35\\"] result = parse_and_process_strings(data) # Expected Output: # { # \\"average_age\\": 30.0, # \\"name_age_dict\\": { # \\"Alice\\": 30, # \\"Bob\\": 25, # \\"Charlie\\": 35 # } # } ```","solution":"import re def parse_and_process_strings(data): Parses a list of strings where each string contains a name and an age separated by a comma. Calculates the average age from the list and creates a dictionary of names and ages. Parameters: data (list): A list of strings, each containing a name and an age separated by a comma. Returns: dict: A dictionary with average_age and name_age_dict. if not data: return {\\"average_age\\": 0.0, \\"name_age_dict\\": {}} name_age_dict = {} total_age = 0 for entry in data: match = re.match(r\'^s*(w+)s*,s*(d+)s*\', entry) if match: name = match.group(1) age = int(match.group(2)) name_age_dict[name] = age total_age += age else: raise ValueError(f\\"Invalid entry format: {entry}\\") average_age = total_age / len(data) return { \\"average_age\\": average_age, \\"name_age_dict\\": name_age_dict }"},{"question":"Write a function that takes a list of strings as an input and returns a dictionary where the keys are the strings and the values are the number of characters in each string. Additionally, the function should sort the dictionary by values in descending order before returning it. The function should output: dict: A dictionary containing the strings and their character counts, sorted by the counts in descending order. You should write self-contained code starting with: ``` def character_count(strings): ```","solution":"def character_count(strings): This function takes a list of strings and returns a dictionary where the keys are the strings and the values are the number of characters in each string, sorted by the values in descending order. :param strings: List of strings :return: Dictionary with strings as keys and their character counts as values, sorted by counts in descending order count_dict = {s: len(s) for s in strings} sorted_count_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True)) return sorted_count_dict"},{"question":"Your task is to write a Python function named `calculate_linear_regression_metrics` that evaluates the performance of a linear regression model. The function should use the appropriate methods from the `sklearn.metrics` package to compute the Mean Absolute Error (MAE), Mean Squared Error (MSE), and Root Mean Squared Error (RMSE). Function signature: ```python def calculate_linear_regression_metrics(actual_values, predicted_values): pass ``` # Function Parameters: - `actual_values` (list or numpy array): The true values of the dependent variable. - `predicted_values` (list or numpy array): The values predicted by the linear regression model. # Function Returns: The function should return a dictionary with the following keys and corresponding values: - `\'mae\'`: Mean Absolute Error as a floating point number. - `\'mse\'`: Mean Squared Error as a floating point number. - `\'rmse\'`: Root Mean Squared Error as a floating point number. # Requirements: 1. Use the following functions from `sklearn.metrics`: - `mean_absolute_error` - `mean_squared_error` 2. Do not use any other external libraries. # Example: Given the following input: ```python actual_values = [3, -0.5, 2, 7] predicted_values = [2.5, 0.0, 2, 8] ``` The function should output: ```python { \'mae\': 0.5, \'mse\': 0.375, \'rmse\': 0.6123724356957945 } ```","solution":"from sklearn.metrics import mean_absolute_error, mean_squared_error import numpy as np def calculate_linear_regression_metrics(actual_values, predicted_values): Evaluate the performance of a linear regression model using the provided actual and predicted values. Parameters: actual_values (list or numpy array): The true values of the dependent variable. predicted_values (list or numpy array): The values predicted by the linear regression model. Returns: dict: A dictionary containing Mean Absolute Error (mae), Mean Squared Error (mse), and Root Mean Squared Error (rmse). mae = mean_absolute_error(actual_values, predicted_values) mse = mean_squared_error(actual_values, predicted_values) rmse = np.sqrt(mse) return { \'mae\': mae, \'mse\': mse, \'rmse\': rmse }"},{"question":"In this problem, you are required to write a Python function named `count_char_occurrences` that counts the occurrences of each character in a given string and returns a dictionary with the characters as keys and their counts as values. Your task is to: 1. Implement the function `count_char_occurrences` to take a single string as input. 2. The function should return a dictionary where: - Each key is a character from the input string. - Each value is the number of times that character appears in the string. **Function Signature:** ```python def count_char_occurrences(input_string: str) -> dict: ... ``` **Requirements:** - The input string will consist of ASCII characters. - The function should be case-sensitive, treating \'a\' and \'A\' as different characters. **Example:** ```python input_string = \\"Hello World\\" output = count_char_occurrences(input_string) # Output should be: # {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'W\': 1, \'r\': 1, \'d\': 1} ``` Write your function and ensure it meets the criteria outlined above.","solution":"def count_char_occurrences(input_string: str) -> dict: Returns the count of each character in the input string. char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"In this problem, we are going to implement a function to solve the \\"Sudoku\\" puzzle using the backtracking algorithm. You are required to write a function `solve_sudoku` that takes in a 9x9 partially filled grid and returns the completed grid. Function Signature ```python def solve_sudoku(board: List[List[int]]) -> List[List[int]]: ``` Parameters: 1. `board` (`List[List[int]]`): A 9x9 grid representing the Sudoku puzzle, where empty cells are filled with zeros. Returns: - `List[List[int]]`: A 9x9 grid with the completed Sudoku puzzle. Detailed Procedure: 1. **Identify an empty cell**: Iterate through the grid to find the first empty cell (denoted by 0). 2. **Try possible numbers**: For the empty cell, attempt to place numbers 1 through 9. 3. **Check validity**: For each attempted number, ensure that it doesn\'t violate the rules of Sudoku: - It must be unique in its row. - It must be unique in its column. - It must be unique within its 3x3 sub-grid. 4. **Recursively apply the algorithm**: If a valid number is found, place it in the cell and recursively attempt to solve the rest of the grid. 5. **Backtrack if needed**: If placing a number does not lead to a solution, reset the cell and try the next number. 6. **Return the board**: Once the board is complete and valid, return the grid. Example Input: ```python board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` Example Output: ```python [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ```","solution":"from typing import List def is_valid(board: List[List[int]], row: int, col: int, num: int) -> bool: Check whether it\'s valid to place the number `num` in the given cell (row, col). # Check the row if num in board[row]: return False # Check the column if num in (board[i][col] for i in range(9)): return False # Check the 3x3 sub-grid startRow, startCol = 3 * (row // 3), 3 * (col // 3) for i in range(startRow, startRow + 3): for j in range(startCol, startCol + 3): if board[i][j] == num: return False return True def solve_sudoku(board: List[List[int]]) -> bool: Attempts to solve the Sudoku puzzle. Returns True if the board is solved, False otherwise. # Find an empty cell (denoted by 0) for row in range(9): for col in range(9): if board[row][col] == 0: # Try all numbers from 1 to 9 in the empty cell for num in range(1, 10): if is_valid(board, row, col, num): # Place the number in the cell board[row][col] = num # Recursively try to solve the rest of the board if solve_sudoku(board): return True # If it didn\'t lead to a solution, reset the cell (backtrack) board[row][col] = 0 # If no number is valid in this cell, backtrack return False # If no empty cell was found, the board is solved return True def solve_sudoku_puzzle(board: List[List[int]]) -> List[List[int]]: Solves the Sudoku puzzle and returns the completed board. If the board is unsolvable, returns the input board as it is. if solve_sudoku(board): return board else: return board"},{"question":"You are tasked with implementing a function called `simulate_traffic` to simulate traffic light changes at an intersection for a given duration. Each traffic light can be in one of three states: \'red\', \'yellow\', and \'green\', changing in the following sequence: \'red\' -> \'green\' -> \'yellow\' -> \'red\'. Each state lasts for a specified number of seconds. Your function will take the duration of the simulation in seconds and output the state of the traffic light for each second. # Detailed Requirements: 1. **Input Parameters**: - `duration`: an integer representing the total duration of the simulation in seconds. - `red_duration`: an integer representing the duration of the \'red\' state in seconds. - `green_duration`: an integer representing the duration of the \'green\' state in seconds. - `yellow_duration`: an integer representing the duration of the \'yellow\' state in seconds. 2. **Output**: - For each second from 0 to `duration`-1, print the current state of the traffic light. 3. **State Transition**: - Start with the \'red\' state and follow the sequence: \'red\' -> \'green\' -> \'yellow\' -> \'red\'. # Function Signature: ```python def simulate_traffic(duration, red_duration, green_duration, yellow_duration): pass ``` # Example: Input: ```python duration = 20 red_duration = 5 green_duration = 3 yellow_duration = 2 ``` Output: ``` [\'red\', \'red\', \'red\', \'red\', \'red\', \'green\', \'green\', \'green\', \'yellow\', \'yellow\', \'red\', \'red\', \'red\', \'red\', \'red\', \'green\', \'green\', \'green\', \'yellow\'] ``` Explanation: The traffic light sequence starts with 5 seconds of \'red\', followed by 3 seconds of \'green\', then 2 seconds of \'yellow\', and the cycle repeats.","solution":"def simulate_traffic(duration, red_duration, green_duration, yellow_duration): Simulates the traffic light changes for a given duration. Args: duration (int): The total duration of the simulation in seconds. red_duration (int): The duration of the \'red\' state in seconds. green_duration (int): The duration of the \'green\' state in seconds. yellow_duration (int): The duration of the \'yellow\' state in seconds. Returns: List[str]: A list of traffic light states for each second. state_sequence = (\'red\', \'green\', \'yellow\') state_durations = (red_duration, green_duration, yellow_duration) traffic_states = [] total_cycle_duration = sum(state_durations) for second in range(duration): cycle_position = second % total_cycle_duration elapsed_time = 0 for state, state_duration in zip(state_sequence, state_durations): elapsed_time += state_duration if cycle_position < elapsed_time: traffic_states.append(state) break return traffic_states"},{"question":"You are required to implement a function to preprocess a text by removing stopwords. Stopwords are common words that typically do not contribute significantly to the meaning of a text and are often removed in text preprocessing steps for natural language processing tasks. Name your function `remove_stopwords`. This function should perform the following tasks: 1. Tokenize the given text into words. 2. Remove all stopwords from the text using the provided list of stopwords. 3. Reconstruct the text from the remaining words and return it. # Function Signature ```python import re def remove_stopwords(text, stopwords): Removes stopwords from the given text. Parameters: - text: str The input text to process. - stopwords: list of str A list of words to be considered as stopwords. Returns: - clean_text: str The text after removing stopwords. ``` # Requirements - Tokenize the text by splitting on whitespace and punctuation. - Ensure the function handles punctuation and capitalized words correctly. - Make sure the function reconstructs the text accurately after removing stopwords. Use this task to showcase your ability to preprocess text data and work with string manipulation in Python.","solution":"import re def remove_stopwords(text, stopwords): Removes stopwords from the given text. Parameters: - text: str The input text to process. - stopwords: list of str A list of words to be considered as stopwords. Returns: - clean_text: str The text after removing stopwords. # Tokenize the text by splitting on whitespace and punctuation words = re.findall(r\'bw+b\', text.lower()) # Remove stopwords from the text filtered_words = [word for word in words if word not in stopwords] # Reconstruct and return the text from the remaining words clean_text = \' \'.join(filtered_words) return clean_text"},{"question":"You are required to implement a function that simulates a simple game of tic-tac-toe. The function should take the board state and the current player\'s move, update the board accordingly, and determine if there is a winner or the game is a draw. # Function Signature: ```python def tic_tac_toe(board, player, row, col): Modify the board with the player\'s move and check game status. Parameters: board (list of list of str): The 3x3 tic-tac-toe board. player (str): The current player\'s symbol (\'X\' or \'O\'). row (int): The row index (0-based) where the player wants to make a move. col (int): The column index (0-based) where the player wants to make a move. Returns: str: \\"Player X wins\\", \\"Player O wins\\", \\"Draw\\", or \\"Pending\\" ``` # Instructions: 1. **Valid Move:** Ensure the move is valid by checking if the spot is empty on the board. 2. **Update Board:** Place the player\'s symbol (\'X\' or \'O\') on the board at the specified location. 3. **Check Winner:** Determine if the current move causes the current player to win. A player wins if they have three of their symbols in a row, column, or diagonal. 4. **Check Draw:** Determine if the game is a draw (i.e., no more moves can be made and there\'s no winner). 5. **Pending Game:** If the game is not won or drawn, it is still ongoing. Use the following starter code: ```python def tic_tac_toe(board, player, row, col): # Check move validity if board[row][col] != \' \': return \\"Invalid move\\" # Update the board board[row][col] = player # Check rows, columns, and diagonals for a win for i in range(3): if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)): return f\\"Player {player} wins\\" if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)): return f\\"Player {player} wins\\" # Check for draw if all(all(cell != \' \' for cell in row) for row in board): return \\"Draw\\" return \\"Pending\\" # Example usage: board = [ [\'X\', \'O\', \'X\'], [\' \', \'X\', \' \'], [\'O\', \' \', \' \'] ] print(tic_tac_toe(board, \'X\', 1, 2)) # Example move for player \'X\' ``` # Example: ```python # Initial 3x3 board setup board = [ [\' \', \' \', \' \'], [\' \', \' \', \' \'], [\' \', \' \', \' \'] ] print(tic_tac_toe(board, \'O\', 1, 1)) # Player \'O\' moves to the center # Output: \\"Pending\\" # Continue the game with valid moves and check after each move print(tic_tac_toe(board, \'X\', 0, 0)) # Player \'X\' moves to top-left corner # Output: \\"Pending\\" ```","solution":"def tic_tac_toe(board, player, row, col): Modify the board with the player\'s move and check game status. Parameters: board (list of list of str): The 3x3 tic-tac-toe board. player (str): The current player\'s symbol (\'X\' or \'O\'). row (int): The row index (0-based) where the player wants to make a move. col (int): The column index (0-based) where the player wants to make a move. Returns: str: \\"Player X wins\\", \\"Player O wins\\", \\"Draw\\", or \\"Pending\\" # Check move validity if board[row][col] != \' \': return \\"Invalid move\\" # Update the board board[row][col] = player # Check rows, columns, and diagonals for a win for i in range(3): if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)): return f\\"Player {player} wins\\" if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)): return f\\"Player {player} wins\\" # Check for draw if all(all(cell != \' \' for cell in row) for row in board): return \\"Draw\\" return \\"Pending\\""},{"question":"You are tasked to write a function `evaluate_classifier` that calculates and visualizes the precision-recall curve for a binary classifier using `matplotlib` and `sklearn`. The function should take predicted probabilities and true labels, and should also support the calculation of the average precision score. The function signature should be: ```python def evaluate_classifier(y_true, y_probs, title=None): # Your implementation here ``` # Inputs: 1. `y_true`: An array-like of shape `(n_samples,)` containing the true binary labels (0 or 1). 2. `y_probs`: An array-like of shape `(n_samples,)` containing the probability estimates for the positive class (1). 3. `title`: A string to set the title of the plot. If `None`, it should set the title to \'Precision-Recall Curve\'. # Output: A matplotlib plot of the precision-recall curve and the average precision score printed on the plot. # Example Usage: ```python y_true = [0, 1, 1, 0, 1, 0, 1, 0] y_probs = [0.1, 0.4, 0.35, 0.8, 0.7, 0.5, 0.85, 0.2] evaluate_classifier(y_true, y_probs) ``` In this example, the function will plot the precision-recall curve using the provided true labels and predicted probabilities. # Requirements: 1. Use `matplotlib.pyplot` for creating the plot. 2. Use `sklearn.metrics.precision_recall_curve` to compute precision-recall pairs. 3. Use `sklearn.metrics.average_precision_score` to calculate the average precision score.","solution":"import matplotlib.pyplot as plt from sklearn.metrics import precision_recall_curve, average_precision_score def evaluate_classifier(y_true, y_probs, title=None): Evaluates the precision-recall curve for a binary classifier. Args: y_true (array-like): True binary labels. y_probs (array-like): Probability estimates for the positive class. title (str): Title of the plot. Defaults to \'Precision-Recall Curve\' if None. Returns: None precision, recall, _ = precision_recall_curve(y_true, y_probs) avg_precision = average_precision_score(y_true, y_probs) if title is None: title = \'Precision-Recall Curve\' plt.figure() plt.plot(recall, precision, label=f\'Average Precision: {avg_precision:.2f}\') plt.xlabel(\'Recall\') plt.ylabel(\'Precision\') plt.title(title) plt.legend(loc=\'best\') plt.grid(True) plt.show()"},{"question":"You are tasked with writing a function that finds the longest sequence of consecutive increasing integers in a given list of integers. Your function should return the length of this longest sequence. **Function Signature:** ```python def find_longest_increasing_sequence(nums: List[int]) -> int: # Your code here ``` **Input:** - A list of integers, `nums`, where the length of `nums` is between `1` and `10^4`. Each integer in the list will be in the range `[-10^6, 10^6]`. **Output:** - An integer representing the length of the longest sequence of consecutive increasing integers. **Examples:** ```python # Example usage print(find_longest_increasing_sequence([10, 9, 2, 5, 3, 7, 101, 18])) # Output: 4 (sequence: [2, 3, 5, 7]) print(find_longest_increasing_sequence([0, 1, 0, 3, 2, 3])) # Output: 4 (sequence: [0, 1, 3, 3]) print(find_longest_increasing_sequence([5, 4, 3, 2, 1])) # Output: 1 (sequence: [5]) ``` **Hints:** - You can use dynamic programming to solve this problem efficiently. - Think about how to keep track of the lengths of increasing sequences ending at each index.","solution":"from typing import List def find_longest_increasing_sequence(nums: List[int]) -> int: if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] represents the length of the longest increasing subsequence ending at index i for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are tasked with implementing a function to interpolate missing data in a one-dimensional time series using linear interpolation. Given a list of timestamps and corresponding values, some of which might be missing (indicated by a `None` value), your function will fill in the missing values by linearly interpolating between the known values. Create a function `linear_interpolate(timestamps, values)` that takes: - `timestamps`: a list of timestamps, in increasing order. - `values`: a list of values where some entries may be `None` indicating missing data. The function should: 1. Validate that `timestamps` and `values` are lists of the same length. 2. Interpolate the missing values using linear interpolation. You must use `numpy` functions where applicable, such as `numpy.interp`. Example: ```python timestamps = [1, 2, 3, 4, 5] values = [10, None, None, 40, 50] interpolated_values = linear_interpolate(timestamps, values) print(interpolated_values) # Output should be [10.0, 20.0, 30.0, 40.0, 50.0] ``` Hints: - You can use `numpy`\'s `interp` function to handle the interpolation efficiently. - Filter out the `None` values and their corresponding timestamps before using the `interp` function.","solution":"import numpy as np def linear_interpolate(timestamps, values): Interpolates missing data (None values) in a time series using linear interpolation. Parameters: timestamps (list of int/float): A list of timestamps in increasing order. values (list of int/float/None): A list of values where some entries may be None indicating missing data. Returns: list of float: The interpolated values where missing data has been filled. if not (isinstance(timestamps, list) and isinstance(values, list)): raise ValueError(\\"timestamps and values must be lists\\") if len(timestamps) != len(values): raise ValueError(\\"timestamps and values must be of the same length\\") # Convert lists to numpy arrays timestamps = np.array(timestamps) values = np.array(values, dtype=float) # Indices where values are not None valid_indices = ~np.isnan(values) # Indices where values are None (to be interpolated) missing_indices = np.isnan(values) # Perform linear interpolation interpolated_values = np.copy(values) interpolated_values[missing_indices] = np.interp(timestamps[missing_indices], timestamps[valid_indices], values[valid_indices]) return interpolated_values.tolist()"},{"question":"Write a function named `get_unique_elements_sorted` that takes a list of integers as input and returns a new list with only the unique elements from the original list, sorted in ascending order. The goal is to practice handling lists, sets, and using the built-in sorting functionality in Python. The function should: 1. Accept a list of integers as input. 2. Extract the unique integers from the list. 3. Sort the unique integers in ascending order. 4. Return the sorted list of unique integers. Example usage: ```python result = get_unique_elements_sorted([4, 2, 5, 2, 3, 1, 4, 3]) print(result) ``` Expected output: ``` [1, 2, 3, 4, 5] ```","solution":"def get_unique_elements_sorted(lst): Returns a sorted list of unique elements from the input list. unique_elements = set(lst) sorted_unique_elements = sorted(unique_elements) return sorted_unique_elements"},{"question":"You are required to write a function that performs matrix multiplication of two given matrices. Implement the function `matrix_multiply` to compute the product of two matrices `A` and `B`. This function should take as input: - `A`: a 2-D list representing the first matrix. - `B`: a 2-D list representing the second matrix. Note that for the matrix multiplication to be valid, the number of columns in matrix `A` must be equal to the number of rows in matrix `B`. The resulting matrix\'s dimensions will be the number of rows of `A` by the number of columns of `B`. The function should return the resulting matrix as a 2-D list. Here\'s the detailed requirement for the `matrix_multiply` function: - Ensure the dimensions match for matrix multiplication. - Iterate over the rows of `A` and columns of `B` to compute the dot product. - Store the resulting values in a new matrix. - Return the resulting matrix. Function Signature ```python def matrix_multiply(A, B): # Your code here ``` Example ```python A = [ [1, 2, 3], [4, 5, 6] ] B = [ [7, 8], [9, 10], [11, 12] ] # The resulting matrix C will be: # [ # [1*7 + 2*9 + 3*11, 1*8 + 2*10 + 3*12], # [4*7 + 5*9 + 6*11, 4*8 + 5*10 + 6*12] # ] result = matrix_multiply(A, B) # Expected output: # [ # [58, 64], # [139, 154] # ] ```","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the resulting matrix. Parameters: A (list of list of int/float): The first matrix. B (list of list of int/float): The second matrix. Returns: list of list of int/float: The resulting matrix after multiplication. Raises: ValueError: If the number of columns in A is not equal to the number of rows in B. # Check if matrix multiplication is possible if len(A[0]) != len(B): raise ValueError(\\"Number of columns in A must be equal to the number of rows in B\\") # Get dimensions of the resulting matrix num_rows_A = len(A) num_cols_B = len(B[0]) num_common_dim = len(B) # Initialize the resulting matrix with zeros result = [[0] * num_cols_B for _ in range(num_rows_A)] # Perform matrix multiplication for i in range(num_rows_A): for j in range(num_cols_B): for k in range(num_common_dim): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"In this problem, you are asked to emulate a basic process of an online bookstore\'s inventory management. Your task is to implement a system that allows for adding books, searching for books by title, and listing all available books sorted by their title. Here are the steps you need to follow: 1. Create a Book class with the following attributes: - `title` (str): Title of the book. - `author` (str): Author of the book. - `year` (int): Year the book was published. 2. Create an Inventory class that will manage a collection of books. This class should have the following methods: - `add_book` (book: Book) -> None: Adds the book to the inventory. - `search_by_title` (title: str) -> List[Book]: Returns a list of books with a title containing the search string (case insensitive). - `list_books` () -> List[Book]: Returns a list of all books in the inventory sorted by title (case insensitive). # Function Specification You should create a `Book` class and an `Inventory` class with the following method signatures: ```python class Book: def __init__(self, title: str, author: str, year: int): self.title = title self.author = author self.year = year class Inventory: def __init__(self): self.books = [] def add_book(self, book: Book) -> None: pass def search_by_title(self, title: str) -> List[Book]: pass def list_books(self) -> List[Book]: pass ``` # Example Usage ```python # Initialize inventory inventory = Inventory() # Add books to the inventory inventory.add_book(Book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925)) inventory.add_book(Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960)) inventory.add_book(Book(\\"Great Expectations\\", \\"Charles Dickens\\", 1861)) # Search books by title results = inventory.search_by_title(\\"great\\") # Should return \\"The Great Gatsby\\" and \\"Great Expectations\\" # List all books sorted by title books = inventory.list_books() # Should return books in order: \\"Great Expectations\\", \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\" ``` # Note * The search and list operations should be case insensitive. * You can assume titles are unique for simplicity. * Use list operations and simple sorting methods to accomplish the tasks. * You don\'t need to handle edge cases, such as duplicate titles or validating input data types.","solution":"from typing import List class Book: def __init__(self, title: str, author: str, year: int): self.title = title self.author = author self.year = year class Inventory: def __init__(self): self.books = [] def add_book(self, book: Book) -> None: self.books.append(book) def search_by_title(self, title: str) -> List[Book]: title_lower = title.lower() return [book for book in self.books if title_lower in book.title.lower()] def list_books(self) -> List[Book]: return sorted(self.books, key=lambda book: book.title.lower())"},{"question":"You are asked to create a Python function `rotate_matrix_clockwise` that takes a square 2D list (matrix) as input and rotates the matrix 90 degrees clockwise. The function should preserve the original matrix\'s layout and return the new rotated matrix. To solve this problem, you need to: 1. Ensure that the function checks if the input is a non-empty square matrix. 2. Use nested list comprehensions to rearrange the elements of the matrix appropriately. 3. Return the new matrix that represents the original matrix rotated 90 degrees clockwise. Implement the function `rotate_matrix_clockwise(matrix)`, which takes a list of lists `matrix` where each inner list represents a row of the matrix. The function should return a new list of lists representing the matrix rotated 90 degrees clockwise. Here\'s the function signature: ```python def rotate_matrix_clockwise(matrix: List[List[int]]) -> List[List[int]]: pass ``` For example: ```python input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] output_matrix = rotate_matrix_clockwise(input_matrix) # The output_matrix should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Note that the input will always be a valid non-empty square matrix.","solution":"from typing import List def rotate_matrix_clockwise(matrix: List[List[int]]) -> List[List[int]]: Rotates a square matrix 90 degrees clockwise. Args: matrix (List[List[int]]): The input square matrix. Returns: List[List[int]]: The rotated matrix. # The length of the rows and columns n = len(matrix) # Create a new matrix with the same dimensions rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Problem: Common Substring Finder You are tasked with implementing a function `common_substring` that finds the longest common substring (LCS) shared between two given strings. The function will take in two strings and return the longest substring that appears in both. # Function Definition **Name**: `common_substring` **Parameters**: - `str1` (str): The first string. - `str2` (str): The second string. **Returns**: - `longest_substr` (str): The longest common substring found in both `str1` and `str2`. # Requirements 1. **Time Complexity**: The solution should be optimized for time, ideally with a complexity not worse than O(n * m) where n and m are the lengths of `str1` and `str2` respectively. 2. **Space Complexity**: The memory usage should also be optimized. 3. **Edge Cases**: Consider scenarios like no common substring and when one or both strings are empty. # Steps to Implement: 1. **Initialize Variables**: Create a 2D table to store lengths of longest common suffixes of substrings. 2. **Iterate Over Strings**: Use nested loops to fill out the table. For each position, calculate the length of the common suffix. 3. **Track the Longest**: Keep track of the maximum length and the ending position of the longest common substring. 4. **Extract Substring**: Use the ending position and the maximum length to extract and return the longest common substring. # Example Usage ```python # Sample input strings str1 = \\"abcdef\\" str2 = \\"zcdemf\\" # Expected function implementation def common_substring(str1, str2): # Function implementation here longest_substr = common_substring(str1, str2) print(longest_substr) ``` In this example, the function `common_substring` should return `\\"cde\\"` as it is the longest substring common to both `str1` and `str2`. # Additional Notes - If there is no common substring, the function should return an empty string. - The function should be case-sensitive so \\"ABC\\" and \\"abc\\" would not have any common substrings. - In case of multiple substrings of the same maximum length, returning any one of them is acceptable.","solution":"def common_substring(str1, str2): Returns the longest common substring between str1 and str2. if not str1 or not str2: return \\"\\" len1, len2 = len(str1), len(str2) # Create a 2D dp array to store the length of common suffixes dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] longest_length = 0 longest_end_pos = 0 for i in range(1, len1 + 1): for j in range(1, len2 + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest_length: longest_length = dp[i][j] longest_end_pos = i # Extract the longest common substring return str1[longest_end_pos - longest_length: longest_end_pos]"},{"question":"In this problem, you are tasked with writing a function that processes a list of text records and returns the most frequently occurring word, ignoring case sensitivity. Your function should efficiently handle large datasets. You need to write a function named `most_frequent_word` which: 1. Takes a list of strings `records` where each string is a text record consisting of words separated by spaces. 2. Returns a string representing the most frequently occurring word, ignoring case sensitivity. In case of a tie in frequency, return the word that appears first in alphabetical order. Here\'s the function signature for reference: ```python def most_frequent_word(records): ``` **Detailed Requirements:** - Split each text record into words and count their occurrences. - Ignore case while counting occurrences (e.g., \\"Word\\" and \\"word\\" should be counted as the same word). - If two or more words have the same highest frequency, return the word that comes first in alphabetical order. - Ensure your solution is optimized for performance and handles very large datasets efficiently. Here is a simple example of how `most_frequent_word` might be used: ```python records = [ \\"apple orange banana apple\\", \\"Banana orange apple\\", \\"banana apple Banana\\" ] print(most_frequent_word(records)) # Output should be \\"apple\\" ``` **Your task:** Implement the `most_frequent_word` function according to the above specifications.","solution":"def most_frequent_word(records): from collections import Counter word_counter = Counter() for record in records: # Convert to lower case and split into words words = record.lower().split() # Update the word counter word_counter.update(words) # Find the most common word if not word_counter: return None most_common_word = sorted(word_counter.items(), key=lambda x: (-x[1], x[0]))[0][0] return most_common_word"},{"question":"You are tasked with creating a function that performs various file operations to understand the basics of file I/O in Python. The goal is to practice creating, writing, reading, and deleting files, as well as handling any potential exceptions that may occur during these operations. Write a function named `file_operations()` that performs the following: 1. **Create and Write to a File:** Create a file named `example.txt` in the current directory. Write the following lines into the file: ``` Hello, world! This is a sample file. ``` Ensure the file is properly closed after writing. 2. **Read and Display Content:** Open the `example.txt` file for reading and display its content line by line. Ensure the file is properly closed after reading. 3. **Handle File Not Found:** Attempt to read a non-existent file named `non_existent.txt`. Use a try-except block to handle the `FileNotFoundError` and print an appropriate message. 4. **Delete the Created File:** Delete the `example.txt` file using `os.remove`. Use a try-except block to safely handle any potential errors. Ensure you make use of the following functions and modules where required: `open`, `print`, `os.remove`, and exception handling (`try-except`). # Example Output: The output should be similar to the following: ``` Writing to example.txt... Reading from example.txt: Hello, world! This is a sample file. Attempting to read non_existent.txt... File not found: non_existent.txt Deleting example.txt... Deleted example.txt successfully. ``` # Function Signature: ```python def file_operations(): pass ```","solution":"import os def file_operations(): filename = \'example.txt\' # 1. Create and Write to a File print(\\"Writing to example.txt...\\") with open(filename, \'w\') as file: file.write(\\"Hello, world!n\\") file.write(\\"This is a sample file.n\\") # 2. Read and Display Content print(\\"Reading from example.txt:\\") with open(filename, \'r\') as file: for line in file: print(line, end=\'\') # 3. Handle File Not Found non_existent_filename = \'non_existent.txt\' print(\\"nAttempting to read non_existent.txt...\\") try: with open(non_existent_filename, \'r\') as file: pass except FileNotFoundError: print(f\\"File not found: {non_existent_filename}\\") # 4. Delete the Created File print(\\"Deleting example.txt...\\") try: os.remove(filename) print(\\"Deleted example.txt successfully.\\") except OSError as e: print(f\\"Error: {e.strerror}\\")"},{"question":"You are asked to implement a function that processes sales data for a series of stores and generates specific summary statistics and forecasts. # Function Signature ```python def process_sales_data(sales_data): Process sales data for multiple stores and generate summary statistics and forecasts. Parameters: sales_data (DataFrame): A pandas DataFrame containing columns `store_id`, `date`, and `sales`. Returns: dict: A dictionary containing the summary statistics and forecasts. ``` # Instructions 1. **Input Data Structure**: The input DataFrame `sales_data` contains daily sales records for multiple stores. The key columns are: - `store_id`: Unique identifier for each store. - `date`: Date of the sales record. - `sales`: Number of units sold on the given date. 2. **Summary Statistics**: Calculate the following summary statistics for each store: - Total sales (`total_sales`): Sum of all `sales` for each store. - Average daily sales (`avg_daily_sales`): Mean of `sales` for each store. - Standard deviation of daily sales (`stddev_daily_sales`): Standard deviation of `sales` for each store. 3. **Forecasting**: - Using a simple time series forecasting method (e.g., a moving average or linear regression), forecast the total sales for the next 30 days for each store. 4. **Output Structure**: Your function should return a dictionary with store IDs as keys, and for each store, another dictionary containing the calculated metrics as follows: ```python { \\"store_id_1\\": { \\"total_sales\\": total_sales, \\"avg_daily_sales\\": avg_daily_sales, \\"stddev_daily_sales\\": stddev_daily_sales, \\"forecast_30_days\\": forecast_sales }, ... } ``` # Example Assume you have the following sales data: ```python import pandas as pd data = { \'store_id\': [\'A\', \'A\', \'A\', \'B\', \'B\', \'B\', \'C\', \'C\', \'C\'], \'date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-01\', \'2023-01-02\', \'2023-01-03\'], \'sales\': [150, 200, 250, 100, 120, 130, 300, 330, 370] } sales_data = pd.DataFrame(data) ``` Given this data, your function should process it and return a dictionary with summary statistics and a 30-day sales forecast for each store. Write your function `process_sales_data` to accomplish the above requirements.","solution":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression from datetime import datetime, timedelta def process_sales_data(sales_data): Process sales data for multiple stores and generate summary statistics and forecasts. Parameters: sales_data (DataFrame): A pandas DataFrame containing columns `store_id`, `date`, and `sales`. Returns: dict: A dictionary containing the summary statistics and forecasts. result = {} # Convert date to datetime sales_data[\'date\'] = pd.to_datetime(sales_data[\'date\']) # Loop over each store for store_id, group in sales_data.groupby(\'store_id\'): total_sales = group[\'sales\'].sum() avg_daily_sales = group[\'sales\'].mean() stddev_daily_sales = group[\'sales\'].std() # Forecasting using Linear Regression # Days since start days = (group[\'date\'] - group[\'date\'].min()).dt.days.values.reshape(-1, 1) sales = group[\'sales\'].values # Linear Regression model model = LinearRegression() model.fit(days, sales) # Forecast for the next 30 days max_day = days.max() future_days = np.arange(max_day + 1, max_day + 31).reshape(-1, 1) forecast_sales = model.predict(future_days).sum() result[store_id] = { \'total_sales\': total_sales, \'avg_daily_sales\': avg_daily_sales, \'stddev_daily_sales\': stddev_daily_sales, \'forecast_30_days\': forecast_sales } return result"},{"question":"Write a function that trains a K-Nearest Neighbors (KNN) classifier on a given dataset and returns the confusion matrix for the test set predictions. The function should: - Split the data into train and test sets based on the \'test_size\' parameter. - Normalize the feature values to the range [0, 1]. This can be accomplished using Min-Max scaling. - Train the KNN classifier on the training set. - Predict the labels on the test set. - Compute and return the confusion matrix of the predictions. The function should raise the exception for: - ValueError: If the input dataset is empty or contains non-numeric data which cannot be scaled or used by the classifier. The function should output with: - ndarray: The confusion matrix of the test set predictions. You should write self-contained code starting with: ``` import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import MinMaxScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import confusion_matrix def knn_classification(X, y, test_size=0.2, n_neighbors=5, random_state=None): ```","solution":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import MinMaxScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import confusion_matrix def knn_classification(X, y, test_size=0.2, n_neighbors=5, random_state=None): Trains a K-Nearest Neighbors (KNN) classifier on a given dataset and returns the confusion matrix for the test set predictions. Parameters: - X: ndarray of feature data. - y: ndarray of target labels. - test_size: float, proportion of the dataset to include in the test split. - n_neighbors: int, number of neighbors to use by default for kneighbors queries. - random_state: int, random_state is the seed used by the random number generator; if None, the random number generator is the RandomState instance used by np.random. Returns: - Confusion matrix as an ndarray for the test set predictions. Raises: - ValueError: If the input dataset is empty or contains non-numeric data. # Check if the input dataset is empty if X.size == 0 or y.size == 0: raise ValueError(\\"The input dataset is empty.\\") # Check if the input dataset contains non-numeric data if not np.issubdtype(X.dtype, np.number) or not np.issubdtype(y.dtype, np.number): raise ValueError(\\"The input dataset contains non-numeric data which cannot be scaled or used by the classifier.\\") # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state) # Normalize the feature values to the range [0, 1] scaler = MinMaxScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Train the KNN classifier on the training set knn = KNeighborsClassifier(n_neighbors=n_neighbors) knn.fit(X_train, y_train) # Predict the labels on the test set y_pred = knn.predict(X_test) # Compute and return the confusion matrix of the predictions return confusion_matrix(y_test, y_pred)"},{"question":"Create a function named `compress_string(s)` that takes a single argument: a string `s` consisting of uppercase English characters only. The function should return a compressed version of the string using the following rules: - Consecutive repeated characters are replaced by the character followed by the number of times it repeats consecutively. - If the compressed string is not smaller than the original string, return the original string instead. **Requirements:** 1. Iterate through the string to identify consecutive characters and their counts. 2. Construct the compressed string using the identified characters and counts. 3. Compare the length of the compressed string with the original string and return the shorter one. **Example Usage:** ```python # Compression of a simple string print(compress_string(\\"AABBBCCCC\\")) # Output: \\"A2B3C4\\" # Compression results in a longer string print(compress_string(\\"ABCDE\\")) # Output: \\"ABCDE\\" ```","solution":"def compress_string(s): Compresses the string by replacing consecutive repeated characters with the character followed by the number of times it repeats consecutively. Returns the original string if the compressed version is not shorter. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a function that takes a list of integers and an integer `k` as input, and returns a list of the `k` most frequently occurring integers in the list. If there are multiple integers with the same frequency, prioritize the smaller integer. **Function Name:** `top_k_frequent` **Parameters:** - `nums` (List[int]): A list of integers. - `k` (int): The number of top frequent integers to return. **Returns:** - A list of `k` integers that are the most frequently occurring in the input list. **Instructions:** 1. Count the frequency of each integer in the input list. 2. Sort the integers first by frequency in descending order, and then by value in ascending order for integers with the same frequency. 3. Return the top `k` integers from the sorted result. **Example Usage:** ```python top_k_frequent([1,1,1,2,2,3], 2) ``` Should return: ```python [1, 2] ``` ```python top_k_frequent([4,4,4,6,6,7,7,7,8], 3) ``` Should return: ```python [4, 7, 6] ``` If the input list is empty, the output should be an empty list: ```python top_k_frequent([], 2) ``` Should return: ```python [] ``` If `k` is greater than the number of unique integers in the list: ```python top_k_frequent([5,5,5,5], 3) ``` Should return: ```python [5] ```","solution":"from collections import Counter def top_k_frequent(nums, k): Returns a list of the k most frequently occurring integers in the nums. If there are multiple integers with the same frequency, prioritize the smaller integer. # Count the frequency of each integer count = Counter(nums) # Sort based on frequency (descending) and value (ascending) most_frequent = sorted(count.items(), key=lambda x: (-x[1], x[0])) # Extract the top k elements return [item[0] for item in most_frequent[:k]]"},{"question":"** Write a function `calculate_moving_average(data: List[int], k: int) -> List[float]` to compute the moving average of a list of integers. The moving average is calculated for each element by averaging the `k` previous elements and the current element. The function should take in two parameters: 1. `data`: A list of integers representing the data points. 2. `k`: An integer representing the number of previous elements to include in the moving average calculation. The function will return a list of floating-point numbers representing the moving averages. If there are fewer than `k` previous elements available, include all available previous elements along with the current element in the average calculation. # Requirements: 1. Ensure the average is a floating-point number. 2. Handle the edge cases where the list is empty, or `k` is greater than the length of the list gracefully. # Example: ```python data = [1, 3, 5, 7, 9] k = 3 output = calculate_moving_average(data, k) # output should be [1.0, 2.0, 3.0, 5.0, 7.0] data = [10, 20, 30, 40, 50, 60, 70] k = 2 output = calculate_moving_average(data, k) # output should be [10.0, 15.0, 25.0, 35.0, 45.0, 55.0, 65.0] data = [] k = 1 output = calculate_moving_average(data, k) # output should be [] ``` Make sure your function `calculate_moving_average(data: List[int], k: int) -> List[float]` handles different input sizes and edge cases as described above. **","solution":"from typing import List def calculate_moving_average(data: List[int], k: int) -> List[float]: Calculates the moving average of a list \'data\' with a window size of \'k\'. If there are fewer than \'k\' previous elements available, include all available previous elements along with the current element in the average calculation. Returns a list of floating-point numbers representing the moving averages. if k <= 0: # Handle case where k is non-positive raise ValueError(\\"k must be greater than 0\\") n = len(data) if n == 0: # Handle empty data list return [] moving_averages = [] for i in range(n): # Determine the window for the current element start = max(0, i - k + 1) window = data[start:i + 1] average = sum(window) / len(window) moving_averages.append(average) return moving_averages"},{"question":"Write a Python function to perform Principal Component Analysis (PCA) on a given 3D numpy array. Reduce the input data from 3 dimensions to 2 dimensions and visualize the transformed data. Plot the results in a 2D scatter plot with two principal components on the x and y axes and include a color dimension to differentiate the data points based on a given label array. The function should output a tuple containing: - The PCA model - The transformed 2D numpy array - The matplotlib figure object You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.decomposition import PCA def perform_pca(data, labels): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.decomposition import PCA def perform_pca(data, labels): Performs PCA on a given 3D numpy array, reduces it to 2D, and visualizes the result. Parameters: data (numpy.ndarray): The input 3D data array of shape (n_samples, 3). labels (numpy.ndarray): The labels corresponding to each data point. Returns: tuple: containing the PCA model, the transformed 2D numpy array, and the matplotlib figure object. # Ensure the input data is a 3D array if data.shape[1] != 3: raise ValueError(\\"Input data must have shape (n_samples, 3)\\") # Apply PCA to reduce the dimensions from 3 to 2 pca = PCA(n_components=2) transformed_data = pca.fit_transform(data) # Create a scatter plot of the transformed data fig, ax = plt.subplots() scatter = ax.scatter(transformed_data[:, 0], transformed_data[:, 1], c=labels, cmap=\'viridis\', edgecolor=\'k\') legend1 = ax.legend(*scatter.legend_elements(), title=\\"Classes\\") ax.add_artist(legend1) ax.set_xlabel(\'Principal Component 1\') ax.set_ylabel(\'Principal Component 2\') ax.set_title(\'2D PCA of 3D Data\') return pca, transformed_data, fig"},{"question":"Your task is to write a Python function that converts a given 24-hour time string into its corresponding 12-hour format with an AM/PM suffix. The function should be named `convert_to_12_hour_format`. This function takes a single string as input representing time in the 24-hour format and returns a string representing time in the 12-hour format. Function signature: ```python def convert_to_12_hour_format(time_24: str) -> str: ``` # Parameters: - `time_24` (str): A string representing time in 24-hour format (e.g., \\"14:30\\", \\"23:15\\"). # Returns: - str: A string representing time in 12-hour format with an AM/PM suffix (e.g., \\"2:30 PM\\", \\"11:15 PM\\"). # Example Usage: ```python print(convert_to_12_hour_format(\\"14:30\\")) # Should output: \\"2:30 PM\\" print(convert_to_12_hour_format(\\"23:15\\")) # Should output: \\"11:15 PM\\" print(convert_to_12_hour_format(\\"00:00\\")) # Should output: \\"12:00 AM\\" print(convert_to_12_hour_format(\\"12:45\\")) # Should output: \\"12:45 PM\\" ``` # Constraints: - The input string will always be in the format \\"HH:MM\\" where HH is a two-digit hour (00 to 23) and MM is a two-digit minute (00 to 59). - Handle both midnight (00:00) and noon (12:00) correctly. - Ensure that the output time string includes a space before the AM/PM suffix.","solution":"def convert_to_12_hour_format(time_24: str) -> str: Converts a given 24-hour time string into its corresponding 12-hour format with an AM/PM suffix. Parameters: time_24 (str): A string representing time in 24-hour format (e.g., \\"14:30\\", \\"23:15\\"). Returns: str: A string representing time in 12-hour format with an AM/PM suffix (e.g., \\"2:30 PM\\", \\"11:15 PM\\"). # Split the input time string into hours and minutes hours, minutes = map(int, time_24.split(\\":\\")) # Determine the period (AM/PM) and convert hour to 12-hour format if hours == 0: period = \\"AM\\" hours_12 = 12 elif hours < 12: period = \\"AM\\" hours_12 = hours elif hours == 12: period = \\"PM\\" hours_12 = 12 else: period = \\"PM\\" hours_12 = hours - 12 # Format the 12-hour time string with the period return f\\"{hours_12}:{minutes:02d} {period}\\""},{"question":"In this problem, you are asked to implement a function named `calculate_word_frequencies` which takes a list of strings (each representing a line of text) and returns a dictionary with the frequency count of each word across all lines. **Function Signature:** ```python def calculate_word_frequencies(lines: List[str]) -> Dict[str, int]: pass ``` **Parameters:** 1. `lines` (List[str]): A list of strings, where each string is a line of text. **Returns:** - `Dict[str, int]`: A dictionary where the keys are words and the values are their respective frequencies. **Requirements:** - Consider words to be sequences of alphanumeric characters. - Words should be case-insensitive (e.g., \\"Word\\" and \\"word\\" should be counted as the same word). - Ignore punctuation and treat all non-alphanumeric characters as word separators. - Use the `re.split` function with a regular expression to split words based on non-alphanumeric characters. # Example Usage: ```python # Example 1: lines = [ \\"Hello world!\\", \\"The big, brown fox jumps over the lazy dog.\\", \\"Hello again; world: hello!\\" ] print(calculate_word_frequencies(lines)) # Output: {\'hello\': 3, \'world\': 2, \'the\': 2, \'big\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 1, \'again\': 1} # Example 2: lines = [ \\"Python code; Python code everywhere.\\", \\"Let\'s write some python code!\\" ] print(calculate_word_frequencies(lines)) # Output: {\'python\': 3, \'code\': 3, \'everywhere\': 1, \'let\': 1, \'s\': 1, \'write\': 1, \'some\': 1} ``` # Constraints: - You may assume that the `re` module is imported. - Ensure your solution is efficient and handles large inputs gracefully.","solution":"import re from typing import List, Dict def calculate_word_frequencies(lines: List[str]) -> Dict[str, int]: Calculates the frequency of each word across all lines. Parameters: lines (List[str]): A list of strings, where each string is a line of text. Returns: Dict[str, int]: A dictionary where the keys are words and the values are their respective frequencies. word_freq = {} for line in lines: # Convert to lower case and split by non-alphanumeric characters words = re.split(r\'W+\', line.lower()) for word in words: if word: # Skip empty strings resulting from split if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"# Maze Solver: You are tasked with implementing a solver for a maze represented as a 2D grid. The solver should find a path from the starting point (S) to the ending point (E) if one exists. The maze consists of open spaces (.), walls (#), a single start (S), and a single endpoint (E). **Function Signature:** ```python def solve_maze(maze: List[List[str]]) -> List[Tuple[int, int]]: pass ``` **Requirements:** 1. **Input Grid**: The input is a 2D list `maze` where each element is a character representing: - `S` for the start, - `E` for the end, - `.` for an open space, - `#` for a wall. 2. **Output Path**: The function should return a list of tuples representing the path from the start to the end, inclusive. Each tuple is a pair of coordinates (row, column). **Algorithm Constraints:** 1. Use either Breadth-First Search (BFS) or Depth-First Search (DFS) to find the path. 2. Ensure that you are not revisiting already visited cells. **Assumptions:** - The grid is rectangular. - There is exactly one start and one end. - If no path exists, return an empty list. **Example:** ```python maze = [ [\\"S\\", \\".\\", \\".\\", \\"#\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\"#\\", \\".\\", \\".\\", \\".\\", \\"#\\", \\".\\"], [\\".\\", \\"#\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\"#\\", \\"#\\", \\".\\", \\".\\", \\".\\"], [\\"#\\", \\".\\", \\"#\\", \\"E\\", \\".\\", \\"#\\", \\".\\"] ] ``` The function call `solve_maze(maze)` should return: ```python [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 3), (2, 4), (3, 4), (4, 4), (4, 3)] ``` assuming the above path is one of the possible valid paths from `S` to `E`. # Constraints: - The grid dimensions are at most 100x100. - You may assume `maze` contains a valid configuration of start (S) and end (E). # Tasks: 1. Implement the `solve_maze` function to find and return the correct path in the format specified. 2. Ensure the function handles edge cases, such as when no path exists or the path is straightforward.","solution":"from typing import List, Tuple from collections import deque def solve_maze(maze: List[List[str]]) -> List[Tuple[int, int]]: # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] rows = len(maze) cols = len(maze[0]) # Find the start and end points start = end = None for r in range(rows): for c in range(cols): if maze[r][c] == \'S\': start = (r, c) elif maze[r][c] == \'E\': end = (r, c) if not start or not end: return [] # Use BFS to find the shortest path queue = deque([(start, [start])]) visited = set(start) while queue: (current_row, current_col), path = queue.popleft() if (current_row, current_col) == end: return path for direction in directions: new_row = current_row + direction[0] new_col = current_col + direction[1] if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited: if maze[new_row][new_col] == \'.\' or maze[new_row][new_col] == \'E\': visited.add((new_row, new_col)) queue.append(((new_row, new_col), path + [(new_row, new_col)])) return []"},{"question":"Write a function `max_consecutive_characters(s: str) -> Tuple[str, int]` that takes a string `s` as input and returns a tuple containing the character that appears in the longest consecutive sequence and the length of that sequence. The function should handle both uppercase and lowercase characters by treating them as distinct. If there are multiple characters with the longest consecutive sequence, return the one that appears first in the string. Function Signature: ```python def max_consecutive_characters(s: str) -> Tuple[str, int]: ``` **Constraints:** - The input string `s` is non-empty and consists only of alphabetical characters (both uppercase and lowercase). - The function should perform efficiently within reasonable limits for string length. **Example:** ```python s = \\"aabbbccdda\\" max_consecutive_characters(s) ``` Output: ```python (\'b\', 3) ``` **Explanation:** - In the string \\"aabbbccdda\\", \'b\' appears in the longest consecutive sequence with a length of 3. This exercise will test your ability to iterate through the string efficiently while keeping track of consecutive characters and their counts.","solution":"from typing import Tuple def max_consecutive_characters(s: str) -> Tuple[str, int]: max_char = s[0] max_length = 1 current_char = s[0] current_length = 1 for i in range(1, len(s)): if s[i] == current_char: current_length += 1 else: if current_length > max_length: max_char = current_char max_length = current_length current_char = s[i] current_length = 1 if current_length > max_length: max_char = current_char max_length = current_length return (max_char, max_length)"},{"question":"Create a Python function called `event_scheduler` that takes a list of events with their respective start and end times and returns a list of non-overlapping events that can be scheduled within the given time frame. Each event is represented as a tuple containing the start and end times in 24-hour format (e.g., `(\\"09:00\\", \\"10:30\\")`). # Definitions and Requirements: - **Event:** A tuple with two strings, start time and end time in 24-hour format. - **Non-overlapping Events:** Events that do not overlap in time such that one event\'s start time is after the end time of the previous event. Your function should find the maximum subset of non-overlapping events that can be scheduled. # Example Usage ```python def event_scheduler(events: List[Tuple[str, str]]) -> List[Tuple[str, str]]: pass ``` # Guidelines: 1. Parse the start and end times of the events. 2. Sort the events by their end times. 3. Use a greedy algorithm to select the maximum number of non-overlapping events. 4. Return the list of scheduled events. # Example: ```python events = [(\\"09:00\\", \\"10:30\\"), (\\"10:30\\", \\"11:00\\"), (\\"10:00\\", \\"11:00\\"), (\\"11:00\\", \\"12:30\\"), (\\"11:30\\", \\"12:00\\")] print(event_scheduler(events)) ``` Output: ``` [(\\"09:00\\", \\"10:30\\"), (\\"10:30\\", \\"11:00\\"), (\\"11:00\\", \\"12:30\\")] ``` # Implementation Template: ```python from typing import List, Tuple def event_scheduler(events: List[Tuple[str, str]]) -> List[Tuple[str, str]]: # Define a function to convert time string to minutes def time_to_minutes(time_str: str) -> int: hours, minutes = map(int, time_str.split(\\":\\")) return hours * 60 + minutes # Define a function to convert minutes back to time string def minutes_to_time(minutes: int) -> str: hours = minutes // 60 minutes = minutes % 60 return f\\"{hours:02}:{minutes:02}\\" # Convert event strings to integers representing minutes events_in_minutes = [(time_to_minutes(start), time_to_minutes(end)) for start, end in events] # Sort events by their end times events_in_minutes.sort(key=lambda x: x[1]) # Use a greedy algorithm to select the maximum number of non-overlapping events selected_events = [] last_end_time = -1 for start, end in events_in_minutes: if start >= last_end_time: selected_events.append((minutes_to_time(start), minutes_to_time(end))) last_end_time = end return selected_events ```","solution":"from typing import List, Tuple def event_scheduler(events: List[Tuple[str, str]]) -> List[Tuple[str, str]]: # Define a function to convert time string to minutes def time_to_minutes(time_str: str) -> int: hours, minutes = map(int, time_str.split(\\":\\")) return hours * 60 + minutes # Define a function to convert minutes back to time string def minutes_to_time(minutes: int) -> str: hours = minutes // 60 minutes = minutes % 60 return f\\"{hours:02}:{minutes:02}\\" # Convert event strings to integers representing minutes events_in_minutes = [(time_to_minutes(start), time_to_minutes(end)) for start, end in events] # Sort events by their end times events_in_minutes.sort(key=lambda x: x[1]) # Use a greedy algorithm to select the maximum number of non-overlapping events selected_events = [] last_end_time = -1 for start, end in events_in_minutes: if start >= last_end_time: selected_events.append((minutes_to_time(start), minutes_to_time(end))) last_end_time = end return selected_events"},{"question":"Create a function that takes a DataFrame with columns \\"student_id\\", \\"test_score\\", and \\"date\\" and generates a line plot representing the average test score evolution over time. The function should compute the average test score for each unique date and then plot these averages against time. The function should output with: None: The function will display a line plot of the average test score trend over time. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def plot_average_scores(df): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_average_scores(df): Plots the average test score evolution over time. Parameters: df (pd.DataFrame): DataFrame with columns \'student_id\', \'test_score\', and \'date\' Returns: None # Convert \'date\' column to datetime if not already in datetime format if not pd.api.types.is_datetime64_any_dtype(df[\'date\']): df[\'date\'] = pd.to_datetime(df[\'date\']) # Group by \'date\' and calculate the average \'test_score\' for each date avg_scores = df.groupby(\'date\')[\'test_score\'].mean().reset_index() # Plot the average test scores over time plt.figure(figsize=(10, 6)) plt.plot(avg_scores[\'date\'], avg_scores[\'test_score\'], marker=\'o\', linestyle=\'-\') plt.xlabel(\'Date\') plt.ylabel(\'Average Test Score\') plt.title(\'Average Test Score Evolution Over Time\') plt.grid(True) plt.show()"},{"question":"You are responsible for managing the inventory in a warehouse, where items are stored in stacks. Each stack has a unique height limit, and you need to determine the maximum possible height for each stack without exceeding the given heights. Write a function named `maximizeStackHeights` that takes the following parameters: - `heights` (List[int]): A list of integers representing the maximum allowable heights for each stack. - `items` (List[int]): A list of integers representing the height of each item to be placed in the stacks. - `m` (int): The number of stacks available. - `k` (int): The number of items to be arranged in the stacks. The function should distribute the items in such a way that the total height of items within each stack does not exceed its corresponding maximum height from the `heights` list. If it is impossible to place all items according to the constraints, the function should return -1. Otherwise, it should return the highest possible total height among the stacks. **Example:** ``` heights = [5, 7, 10] items = [2, 3, 4, 5, 6] m = 3 k = 5 print(maximizeStackHeights(heights, items, m, k)) # Output: 9 ``` **Constraints:** - All elements in `heights` and `items` are positive integers. - The lengths of `heights` and `items` are equal to `m` and `k`, respectively. - `1 <= m <= 10^4` - `1 <= k <= 10^4` Note: Use appropriate data structures to efficiently manage and update the current heights of stacks as items are placed.","solution":"def maximizeStackHeights(heights, items, m, k): Calculates the maximum possible height for each stack without exceeding the given heights. Parameters: heights (list of int): Maximum allowable heights for each stack. items (list of int): Heights of each item to be placed in stacks. m (int): Number of stacks available. k (int): Number of items to be arranged in stacks. Returns: int: The highest possible total height among the stacks or -1 if it\'s impossible to distribute items without exceeding any stack\'s maximum height. # Initialize the remaining capacities of the stacks remaining_capacity = heights[:] # Sort items in descending order for easier placement items.sort(reverse=True) # Iterate over each item trying to place it in the best stack for item in items: # Find the stack with the largest remaining capacity that can accommodate the item placed = False for i in range(m): if remaining_capacity[i] >= item: remaining_capacity[i] -= item placed = True break if not placed: # If no appropriate stack is found, return -1 return -1 # Calculate the highest height among the stacks max_height = max(heights[i] - remaining_capacity[i] for i in range(m)) return max_height"},{"question":"You are tasked with implementing a function that simulates the classic \\"FizzBuzz\\" problem with a twist. In addition to the usual rules, for any number that is a multiple of 7, the function should print \\"Bazz\\". The function should return a list of all the results in the specified range. The function you are required to implement is `fizz_buzz_bazz(n: int) -> list`. This function should generate results for numbers from 1 to `n` (inclusive). Rules: 1. For multiples of 3, store \\"Fizz\\" instead of the number. 2. For multiples of 5, store \\"Buzz\\" instead of the number. 3. For multiples of 7, store \\"Bazz\\" instead of the number. 4. For numbers that are multiples of both 3 and 5, store \\"FizzBuzz\\" instead of the number. 5. For numbers that are multiples of both 3 and 7, store \\"FizzBazz\\" instead of the number. 6. For numbers that are multiples of both 5 and 7, store \\"BuzzBazz\\" instead of the number. 7. For numbers that are multiples of 3, 5, and 7, store \\"FizzBuzzBazz\\" instead of the number. 8. For all other numbers, store the number itself. Function Signature ```python def fizz_buzz_bazz(n: int) -> list: ``` # Example ```python print(fizz_buzz_bazz(15)) # Should return: # [1, 2, \'Fizz\', 4, \'Buzz\', \'Fizz\', \'Bazz\', 8, \'Fizz\', \'Buzz\', 11, \'Fizz\', 13, \'Bazz\', \'FizzBuzz\'] ``` # Requirements - The function should return the results in a list. - Ensure to include appropriate comments in your code for clarity. - The function should follow standard Python practices and handle common edge cases gracefully. # Background Knowledge Familiarity with the following concepts will be useful: - Basic control structures (loops and conditionals). - String manipulation. - List operations.","solution":"def fizz_buzz_bazz(n: int) -> list: This function returns a list where: - Multiples of 3 are replaced with \\"Fizz\\" - Multiples of 5 are replaced with \\"Buzz\\" - Multiples of 7 are replaced with \\"Bazz\\" - Multiples of 3 and 5 are replaced with \\"FizzBuzz\\" - Multiples of 3 and 7 are replaced with \\"FizzBazz\\" - Multiples of 5 and 7 are replaced with \\"BuzzBazz\\" - Multiples of 3, 5, and 7 are replaced with \\"FizzBuzzBazz\\" result = [] for i in range(1, n+1): value = \\"\\" if i % 3 == 0: value += \\"Fizz\\" if i % 5 == 0: value += \\"Buzz\\" if i % 7 == 0: value += \\"Bazz\\" result.append(value if value else i) return result"},{"question":"You are required to implement a function that validates a given hexadecimal color code. The function should check if the input string conforms to the proper format of a hexadecimal color code. **Function Signature:** ```python def is_valid_hex_color(code: str) -> bool: ``` **Parameters:** - `code` (str): A string representing the color code that needs to be validated. **Returns:** - `bool`: A boolean value indicating whether the provided string is a valid hexadecimal color code. **Criteria for a Valid Hex Color Code:** 1. The code must start with a hash (`#`) symbol. 2. The code must have exactly 7 characters or 4 characters (including the hash). - In the 7-character format: `#` followed by six hexadecimal digits (0-9, a-f, A-F). - In the 4-character format: `#` followed by three hexadecimal digits (0-9, a-f, A-F). - Both uppercase and lowercase hexadecimal characters are valid. **Examples:** ```python assert is_valid_hex_color(\\"#1F3A93\\") == True assert is_valid_hex_color(\\"#1f3a93\\") == True assert is_valid_hex_color(\\"#F3A\\") == True assert is_valid_hex_color(\\"#1F3AZ9\\") == False assert is_valid_hex_color(\\"#1234\\") == False ``` Implement the function ensuring that all edge cases, such as incorrect lengths, missing hash symbol, and invalid characters, are properly handled.","solution":"def is_valid_hex_color(code: str) -> bool: Validates if the input string is a valid hexadecimal color code. Parameters: code (str): A string representing the color code. Returns: bool: True if the code is valid, False otherwise. if not isinstance(code, str): return False if len(code) not in {4, 7} or code[0] != \'#\': return False hex_digits = set(\\"0123456789abcdefABCDEF\\") # Check the remaining characters for char in code[1:]: if char not in hex_digits: return False return True"},{"question":"Create a function that generates a dictionary with integer keys and list values of random numbers. Each list should contain a number of random numbers equal to the key value and be populated with random integers between a specified range. Then, compute the average of the numbers in each list and return a new dictionary where the keys are the original keys and the values are the corresponding averages. The function should output: - Dictionary: The input dictionary with random integer lists. - Dictionary: A new dictionary with the same keys and the average of each list as the values. You should write self-contained code starting with: ``` import random def task_func(num_keys=10, value_range=None, seed=42): if value_range is None: value_range = (1, 100) ```","solution":"import random def task_func(num_keys=10, value_range=None, seed=42): if value_range is None: value_range = (1, 100) random.seed(seed) input_dict = {} for i in range(1, num_keys+1): input_dict[i] = [random.randint(value_range[0], value_range[1]) for _ in range(i)] avg_dict = {key: sum(values)/len(values) for key, values in input_dict.items()} return input_dict, avg_dict"},{"question":"In this problem, you are required to implement a function `parse_log_entries` that extracts and counts various types of log entries from a given log file. Logs are structured in lines, and each line contains a timestamp, a log level, and a message. Your task is to count the occurrences of each log level. # Function Signature ```python def parse_log_entries(logs: list) -> dict: ``` # Parameters - `logs` (list): A list of strings, where each string represents a log entry. # Returns - `dict`: A dictionary where keys are log levels (e.g., `INFO`, `WARNING`, `ERROR`, etc.), and values are their respective counts. # Detailed Instructions 1. Each log entry follows this format: `\\"[timestamp] [log_level]: message\\"`. - Example: `\\"[2023-10-11 10:03:15] ERROR: Out of memory\\"`. 2. Extract the log level from each entry and count its occurrence in the logs. 3. Return a dictionary where the keys are log levels (e.g., `INFO`, `WARNING`, `ERROR`) and values are the counts of how often each level appeared. # Example ```python # Example 1 log_entries = [ \\"[2023-10-11 10:03:15] ERROR: Out of memory\\", \\"[2023-10-11 10:04:01] INFO: Server started\\", \\"[2023-10-11 10:05:23] WARNING: High memory usage\\", \\"[2023-10-11 10:06:18] ERROR: Disk full\\", \\"[2023-10-11 10:07:45] INFO: Connection established\\" ] output = parse_log_entries(log_entries) print(output) # Should output: {\'ERROR\': 2, \'INFO\': 2, \'WARNING\': 1} # Example 2 log_entries = [ \\"[2023-10-12 12:12:12] DEBUG: Initializing module\\", \\"[2023-10-12 12:13:13] INFO: Module initialized\\", \\"[2023-10-12 12:14:14] ERROR: Unexpected exception\\", \\"[2023-10-12 12:14:15] DEBUG: Attempting to recover\\" ] output = parse_log_entries(log_entries) print(output) # Should output: {\'DEBUG\': 2, \'INFO\': 1, \'ERROR\': 1} ``` # Additional Constraints - Log levels are guaranteed to be one of the commonly used levels (like `INFO`, `DEBUG`, `WARNING`, `ERROR`, `CRITICAL`). - You can assume the log entries are well-formed and follow the specified format. - Do not use any external libraries outside of the standard library.","solution":"def parse_log_entries(logs): Extracts and counts various types of log entries from a given log file. Parameters: logs (list): A list of strings, where each string represents a log entry. Returns: dict: A dictionary where keys are log levels (e.g., INFO, WARNING, ERROR, etc.), and values are their respective counts. log_counts = {} for log in logs: # Find the start and end of the log level start_index = log.find(\'] \') + 2 end_index = log.find(\':\', start_index) # Extract the log level log_level = log[start_index:end_index] # Count the occurrences of each log level if log_level in log_counts: log_counts[log_level] += 1 else: log_counts[log_level] = 1 return log_counts"},{"question":"In this task, you will implement a function to generate all possible subsets of a given set (the power set). A subset is a set of elements that can be derived from another set without changing the order of elements. Requirements: 1. **Input**: - A list of unique integers `nums`. 2. **Output**: - A list of lists, where each sublist is a unique subset of the input list `nums`. Constraints: - The input list `nums` will not contain any duplicate elements. - The subsets can be returned in any order. # Example Usage: ```python print(subsets([1, 2, 3])) # Expected output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] print(subsets([0])) # Expected output: [[], [0]] ``` In the above example, for the input `[1, 2, 3]`, the function should return a list containing all possible subsets of the input list, including the empty set and the set itself. For the input `[0]`, the function returns two subsets: the empty set and the set containing the single element `0`. Implement the function `subsets` to achieve this behavior. # Signature: ```python def subsets(nums): # Your code here ``` Make sure your implementation is efficient and follows best coding practices.","solution":"def subsets(nums): Generate all possible subsets of a given set of unique integers. :param nums: List of unique integers :return: List of lists, where each sublist is a unique subset of the input list result = [[]] for num in nums: result += [curr + [num] for curr in result] return result"},{"question":"You are given a dataset `df` containing information about customer transactions in an online store. The dataset includes several features such as `transaction_id`, `customer_id`, `transaction_amount`, `transaction_date`, and other related attributes. Your task is to predict the likelihood of a customer making another purchase within the next three months. To do this, you need to design and train a machine learning model using Logistic Regression. Define a function `predict_future_purchases(df: pd.DataFrame) -> dict` that takes a pandas DataFrame `df` as input, pre-processes the data, trains a logistic regression model, and returns a dictionary `results` containing the model, accuracy score, precision, recall, and ROC AUC score of the model. * Use `train_test_split` from `sklearn.model_selection` to split the dataset into training and testing sets. * Use `LogisticRegression` from `sklearn.linear_model` to train the model. * Evaluate the model using accuracy score, precision, recall, and ROC AUC score from `sklearn.metrics`. * Create necessary features for the model, such as the average transaction amount, frequency of transactions, time since the last transaction, etc. * Assume that the target variable `future_purchase` is provided in the dataset, where 1 indicates a future purchase within three months, and 0 otherwise. The expected structure of `results` is as follows: ```python { \\"model\\": logistic_regression_model, \\"accuracy\\": accuracy_score, \\"precision\\": precision_score, \\"recall\\": recall_score, \\"roc_auc\\": roc_auc_score } ``` Where: * `logistic_regression_model` is the trained logistic regression model. * `accuracy_score` is the accuracy of the model on the test set. * `precision_score` is the precision of the model on the test set. * `recall_score` is the recall of the model on the test set. * `roc_auc_score` is the ROC AUC score of the model on the test set.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score from sklearn.preprocessing import StandardScaler def preprocess_data(df): # Feature Engineering df[\'transaction_date\'] = pd.to_datetime(df[\'transaction_date\']) df[\'days_since_last_transaction\'] = (df[\'transaction_date\'].max() - df[\'transaction_date\']).dt.days customer_features = df.groupby(\'customer_id\').agg({ \'transaction_amount\': [\'mean\', \'sum\', \'count\'], \'days_since_last_transaction\': \'min\' }) customer_features.columns = [ \'average_transaction_amount\', \'total_transaction_amount\', \'transaction_count\', \'days_since_last_transaction\' ] # Reset index to get customer_id as a column customer_features.reset_index(inplace=True) return customer_features def predict_future_purchases(df): # Preprocess data customer_features = preprocess_data(df) # Assume the future_purchase column exists in the original dataframe customer_features = customer_features.merge(df[[\'customer_id\', \'future_purchase\']].drop_duplicates(), on=\'customer_id\') X = customer_features.drop(columns=[\'customer_id\', \'future_purchase\']) y = customer_features[\'future_purchase\'] # Standardize features scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42) # Train the logistic regression model model = LogisticRegression() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) y_pred_proba = model.predict_proba(X_test)[:, 1] # Calculate evaluation metrics results = { \\"model\\": model, \\"accuracy\\": accuracy_score(y_test, y_pred), \\"precision\\": precision_score(y_test, y_pred), \\"recall\\": recall_score(y_test, y_pred), \\"roc_auc\\": roc_auc_score(y_test, y_pred_proba) } return results"},{"question":"You need to write a function `sum_to_pairs(n: int, nums: List[int]) -> List[Tuple[int, int]]` that finds all unique pairs of numbers in the list `nums` that add up to the integer `n`. # Function Signature ```python def sum_to_pairs(n: int, nums: List[int]) -> List[Tuple[int, int]]: # Implementation here ``` # Specific Requirements 1. Return a list of tuples where each tuple represents a pair of numbers that sum up to `n`. 2. The pairs should be ordered such that (a, b) where `a <= b`. 3. Each pair should be unique in the context of the entire list. No pair should repeat in reversed order. 4. If no pairs are found, return an empty list. # Example Usage ```python sum_to_pairs(7, [1, 2, 3, 4, 5, 6, 7]) # Expected Output: [(1, 6), (2, 5), (3, 4)] sum_to_pairs(10, [4, 4, 6, 6, 0]) # Expected Output: [(4, 6)] sum_to_pairs(5, [1, 2, 3]) # Expected Output: [(2, 3)] ``` # Constraints - The input list `nums` can have negative numbers, zero, and positive numbers. - The function should handle cases where the input list is empty gracefully and return an empty list. - You may assume that the input list does not contain any duplicates. This question will test your understanding of list manipulation, conditional logic, and working with tuples in Python.","solution":"from typing import List, Tuple def sum_to_pairs(n: int, nums: List[int]) -> List[Tuple[int, int]]: pairs = set() seen = set() for num in nums: complement = n - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(list(pairs))"},{"question":"You are required to implement a function that simulates the game of \\"FizzBuzz\\" with custom rules based on two given integers. The function should generate a list of strings representing the numbers from 1 to `n`, applying the following rules: 1. If a number is divisible by `a`, replace it with \\"Fizz\\". 2. If a number is divisible by `b`, replace it with \\"Buzz\\". 3. If a number is divisible by both `a` and `b`, replace it with \\"FizzBuzz\\". 4. Otherwise, keep the number as a string. The function signature is: ```python def custom_fizzbuzz(n, a, b): ``` - `n` (integer): The upper limit of the range starting from 1 (inclusive) to `n` (inclusive). - `a` (integer): The first divisor to consider for \\"Fizz\\". - `b` (integer): The second divisor to consider for \\"Buzz\\". The function should return a list of strings representing the FizzBuzz sequence from 1 to `n` with the applied custom rules. # Examples: ```python print(custom_fizzbuzz(15, 3, 5)) # Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\', \'Fizz\', \'7\', \'8\', \'Fizz\', \'Buzz\', \'11\', \'Fizz\', \'13\', \'14\', \'FizzBuzz\'] print(custom_fizzbuzz(10, 2, 3)) # Output: [\'1\', \'Fizz\', \'Buzz\', \'Fizz\', \'5\', \'FizzBuzz\', \'7\', \'Fizz\', \'Buzz\', \'Fizz\'] ``` # Explanation: For `custom_fizzbuzz(15, 3, 5)`: - Replace multiples of 3 with \\"Fizz\\" - Replace multiples of 5 with \\"Buzz\\" - Replace multiples of both 3 and 5 with \\"FizzBuzz\\" For `custom_fizzbuzz(10, 2, 3)`: - Replace multiples of 2 with \\"Fizz\\" - Replace multiples of 3 with \\"Buzz\\" - Replace multiples of both 2 and 3 with \\"FizzBuzz\\" Implement this function to generate the desired sequence based on the given input parameters.","solution":"def custom_fizzbuzz(n, a, b): Generate the FizzBuzz sequence up to n with custom rules. Parameters: n (int): The upper limit of the range starting from 1 (inclusive) to n (inclusive). a (int): The first divisor to consider for \\"Fizz\\". b (int): The second divisor to consider for \\"Buzz\\". Returns: list: The FizzBuzz sequence as a list of strings. result = [] for i in range(1, n + 1): if i % a == 0 and i % b == 0: result.append(\\"FizzBuzz\\") elif i % a == 0: result.append(\\"Fizz\\") elif i % b == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"You are given a list of stock price records of a company for consecutive days. Each record consists of a date, a stock price close value, and a stock price open value. Your task is to find the maximum profit that can be achieved by performing at most one transaction (i.e., buy one and sell one share of the stock) over the given period. Here is the detailed description of the function you need to implement: Function Name: `max_profit` Parameters: 1. `prices` (list of dict): A list containing dictionaries, each representing the stock price record for one day with keys \'date\', \'open\', and \'close\'. For example: ```python prices = [ {\'date\': \'2023-01-01\', \'open\': 120, \'close\': 150}, {\'date\': \'2023-01-02\', \'open\': 130, \'close\': 180}, ... ] ``` Returns: - `max_profit` (float): The maximum profit that can be achieved from a single buy-sell transaction. Requirements: - Determine the maximum profit that can be achieved from a single buy and subsequent sell operation. - Assume that you must buy before you sell (i.e., buy on day i and sell on a later day j). Example Usage: ```python prices = [ {\'date\': \'2023-01-01\', \'open\': 120, \'close\': 150}, {\'date\': \'2023-01-02\', \'open\': 130, \'close\': 180}, {\'date\': \'2023-01-03\', \'open\': 125, \'close\': 170}, {\'date\': \'2023-01-04\', \'open\': 110, \'close\': 160} ] profit = max_profit(prices) print(profit) # Output: 60 (Buy on \'2023-01-01\' and sell on \'2023-01-02\') ``` Note: - If there are no days to buy and sell such that a profit can be made, the function should return 0.","solution":"def max_profit(prices): Calculate the maximum profit achievable from one buy-sell transaction based on the given list of stock price records. :param prices: List[Dict] -- List of dictionaries containing \'date\', \'open\', and \'close\' keys :return: float -- Maximum profit achievable if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for record in prices: min_price = min(min_price, record[\'open\']) current_profit = record[\'close\'] - min_price max_profit = max(max_profit, current_profit) return max_profit"},{"question":"You are tasked with designing and implementing a Python function that will simulate a basic banking system. Your function should manage multiple bank accounts and implement functionalities to create an account, deposit money, withdraw money, and check the balance. Each account is identified by a unique account number, and you should manage the state of the accounts using a class. The class should provide methods for each of the functionalities mentioned above. Here is the detailed requirement: 1. Define a class `BankAccount` with the following methods: - `__init__(self, account_number: str, initial_balance: float = 0.0)`: Initialize a bank account with a unique account_number and an optional initial balance. - `deposit(self, amount: float) -> None`: Deposit the specified amount into the account. - `withdraw(self, amount: float) -> bool`: Withdraw the specified amount from the account if sufficient balance exists. Return `True` if the withdrawal is successful, otherwise return `False`. - `get_balance(self) -> float`: Return the current balance of the account. 2. Define a class `Bank` to manage multiple accounts with the following methods: - `__init__(self)`: Initialize the bank with an empty dictionary to store accounts. - `create_account(self, account_number: str, initial_balance: float = 0.0) -> bool`: Create a new account with the specified account_number and initial_balance. Return `True` if the account is successfully created, otherwise return `False` (e.g., if an account with the same number already exists). - `get_account(self, account_number: str) -> BankAccount`: Return the BankAccount object associated with the given account_number or `None` if the account does not exist. # Function Signature ```python class BankAccount: def __init__(self, account_number: str, initial_balance: float = 0.0): # Your code here def deposit(self, amount: float) -> None: # Your code here def withdraw(self, amount: float) -> bool: # Your code here def get_balance(self) -> float: # Your code here class Bank: def __init__(self): # Your code here def create_account(self, account_number: str, initial_balance: float = 0.0) -> bool: # Your code here def get_account(self, account_number: str) -> BankAccount: # Your code here ``` # Example Usage ```python # Creating bank and accounts bank = Bank() bank.create_account(\\"123456789\\", 1000.0) bank.create_account(\\"987654321\\", 500.0) # Depositing money account = bank.get_account(\\"123456789\\") if account: account.deposit(200.0) # Withdrawing money account = bank.get_account(\\"987654321\\") if account: success = account.withdraw(300.0) # Checking balance account = bank.get_account(\\"123456789\\") if account: print(account.get_balance()) # Expected Output: 1200.0 (if the transactions succeeded) ```","solution":"class BankAccount: def __init__(self, account_number: str, initial_balance: float = 0.0): self.account_number = account_number self.balance = initial_balance def deposit(self, amount: float) -> None: if amount > 0: self.balance += amount def withdraw(self, amount: float) -> bool: if amount > 0 and self.balance >= amount: self.balance -= amount return True return False def get_balance(self) -> float: return self.balance class Bank: def __init__(self): self.accounts = {} def create_account(self, account_number: str, initial_balance: float = 0.0) -> bool: if account_number in self.accounts: return False if initial_balance < 0: return False self.accounts[account_number] = BankAccount(account_number, initial_balance) return True def get_account(self, account_number: str) -> BankAccount: return self.accounts.get(account_number)"},{"question":"You have been tasked with creating a function called `filter_movies_by_genre` that filters movies based on their genres and exports the filtered list to a CSV file. This will involve using the `pandas` library for data manipulation. # Specifications: 1. **Function Name:** `filter_movies_by_genre` 2. **Parameters:** - `movies_file: str`: Path to the file containing movie metadata (i.e., \'movies.csv\'). - `genres: list`: List of genre(s) to filter by (i.e., [\'Comedy\', \'Drama\']). - `output_file: str`: Path to the output file where filtered movies will be stored (i.e., \'filtered_movies.csv\'). # Steps: 1. Read data from `movies_file` into a DataFrame. The data file has columns: \\"movie_id\\", \\"title\\", \\"genres\\". - The \\"genres\\" column contains multiple genres separated by \'|\' (e.g., \'Action|Adventure|Comedy\'). 2. Split the \\"genres\\" column into separate genre lists. 3. Filter the movies that contain at least one of the specified genres from the `genres` parameter. 4. Store the filtered list of movies in a DataFrame and write it to a CSV file specified by `output_file`. # Requirements: - Use `pandas.read_csv` to read the input file. - Use `pandas.DataFrame` to create the DataFrame for storing filtered movie data. # Example Usage: ```python filter_movies_by_genre( movies_file=\'../../data/ml-100k/ml-100k/movies.csv\', genres=[\'Comedy\', \'Drama\'], output_file=\'../../data/ml-100k/ml-100k/filtered_movies.csv\' ) ```","solution":"import pandas as pd def filter_movies_by_genre(movies_file, genres, output_file): Filters movies by given genres and exports the filtered list to a CSV file. Args: movies_file (str): Path to the file containing movie metadata. genres (list): List of genres to filter by. output_file (str): Path to the output file where filtered movies will be stored. # Read the movies data from the CSV file df = pd.read_csv(movies_file) # Split the genres column into lists of genres df[\'genres\'] = df[\'genres\'].str.split(\'|\') # Filter the DataFrame to include only rows with at least one of the specified genres filtered_df = df[df[\'genres\'].apply(lambda x: any(genre in x for genre in genres))] # Write the filtered DataFrame to a CSV file filtered_df.to_csv(output_file, index=False)"},{"question":"You need to write a Python function `merge_sorted_arrays` that takes in two sorted lists of integers and returns a single sorted list containing all the elements from both input lists. Here\'s a detailed explanation of what the `merge_sorted_arrays` function should do: 1. The function will accept two parameters: - `list1`: A list of integers sorted in ascending order. - `list2`: A list of integers sorted in ascending order. 2. The function should merge both sorted lists into one sorted list without using any built-in sort functions. 3. The function should iterate through both lists, comparing elements and adding the smaller element to the result list. If one list is exhausted before the other, the remaining elements from the other list should be added to the result list. 4. The function should return the merged and sorted list. Here\'s the signature of the function: ```python def merge_sorted_arrays(list1: list[int], list2: list[int]) -> list[int]: ``` **Examples**: - For the input `list1 = [1, 3, 5]` and `list2 = [2, 4, 6]`, the function should return `[1, 2, 3, 4, 5, 6]`. - For the input `list1 = [0, 8, 12]` and `list2 = [3, 7, 10]`, the function should return `[0, 3, 7, 8, 10, 12]`. Note: The focus should be on implementing the merge logic efficiently without relying on built-in sorting methods. The inputs will be sorted and non-empty.","solution":"def merge_sorted_arrays(list1, list2): Merges two sorted lists into one sorted list. merged_list = [] i = j = 0 # Iterate over both lists and append the smaller element to the merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 or list2, extend them to the merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Create a function that takes a list of strings and a character, and returns a pandas DataFrame where each string in the list is split into individual characters, creating one row per string with separate columns for each character. Additionally, the function should count how many times the given character appears in the entire DataFrame and return this count along with the DataFrame. The function should output: tuple: A tuple containing: - pandas.DataFrame: The DataFrame with each string converted into a row of characters. - int: The count of the specified character in the entire DataFrame. You should write self-contained code starting with: ``` import pandas as pd def task_func(strings, char): ```","solution":"import pandas as pd def task_func(strings, char): Takes a list of strings and a character, splits each string into individual characters and creates a DataFrame where each string forms a row and each character forms a column. Also counts the occurrences of the specified character in the DataFrame. Args: strings (list of str): List of strings to be converted. char (str): The character to count in the DataFrame. Returns: tuple: A tuple containing the DataFrame and the count of the specified character. # Split each string into characters and create a DataFrame data = [list(s) for s in strings] df = pd.DataFrame(data) # Count the occurrences of the specified character char_count = sum(s.count(char) for s in strings) return df, char_count"},{"question":"You are tasked with implementing a function `sort_and_find_median(nums)` that sorts a given list of integers in ascending order and then returns the median value of the list. The function should work for both lists with odd and even number of elements. You should not use any built-in sorting functions, and instead implement your own sorting algorithm (e.g. bubble sort, quick sort, etc.). # Function Signature ```python def sort_and_find_median(nums): pass ``` # Parameters - `nums`: a list of integers that needs to be sorted to find the median. # Returns - An integer or float representing the median of the list. # Requirements 1. Implement a sorting algorithm from scratch to sort `nums` in ascending order. 2. After sorting the list, compute the median: - If the list has an odd number of elements, the median is the middle element. - If the list has an even number of elements, the median is the average of the two middle elements. # Example ```python # Example 1: sort_and_find_median([3, 1, 2]) # Output: 2 # Example 2: sort_and_find_median([4, 2, 5, 3]) # Output: 3.5 ``` This function is particularly useful for statistical analysis where you need to determine the median value of a given dataset.","solution":"def sort_and_find_median(nums): Sorts the list of integers in ascending order and returns the median value. :param nums: List of integers :return: Median value (integer or float) # Implement a basic bubble sort n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] # Calculate the median if n % 2 == 1: return nums[n // 2] else: mid1 = nums[n // 2 - 1] mid2 = nums[n // 2] return (mid1 + mid2) / 2.0"},{"question":"You are given a DataFrame `reviews` containing movie reviews with columns `User-ID`, `Movie-ID`, `Rating`, and a DataFrame `movies` with columns `Movie-ID`, `Movie-Title`, `Genres`. Your task is to implement a function named `recommend_movies` that takes three parameters: `reviews` (a DataFrame of movie ratings), `movies` (a DataFrame of movie information), and `target_movie_id` (an integer representing the movie ID for which recommendations are needed). The function should perform the following steps: 1. Create a user-movie ratings matrix where rows represent users and columns represent movies. 2. Compute the cosine similarity between the target movie (identified by `target_movie_id`) and all other movies based on the user ratings using the `cosine_similarity` function from the `sklearn.metrics.pairwise` module. 3. Merge the similarity scores with the `movies` DataFrame to get the movie titles and genres. 4. Return a DataFrame `recommended_movies` containing the movie title and genres of the recommended movies, ordered by similarity score in descending order. Ensure that the movie identified by `target_movie_id` is excluded from the recommendations. Ensure your function, `recommend_movies`, follows the format below: ```python def recommend_movies(reviews, movies, target_movie_id): Generate movie recommendations based on similarity with a target movie. Parameters ---------- reviews : DataFrame DataFrame of movie reviews with columns: \'User-ID\', \'Movie-ID\', \'Rating\'. movies : DataFrame DataFrame of movie information with columns: \'Movie-ID\', \'Movie-Title\', \'Genres\'. target_movie_id: int The ID of the target movie for which recommendations are needed. Returns ------- recommended_movies : DataFrame Ordered DataFrame of recommended movies containing columns: \'Movie-Title\', \'Genres\'. The rows are ordered from the most recommended movie at the top to the least recommended at the bottom. pass ``` In your solution, use the `cosine_similarity` function from the `sklearn.metrics.pairwise` module to compute the similarity scores.","solution":"import pandas as pd from sklearn.metrics.pairwise import cosine_similarity def recommend_movies(reviews, movies, target_movie_id): Generate movie recommendations based on similarity with a target movie. Parameters ---------- reviews : DataFrame DataFrame of movie reviews with columns: \'User-ID\', \'Movie-ID\', \'Rating\'. movies : DataFrame DataFrame of movie information with columns: \'Movie-ID\', \'Movie-Title\', \'Genres\'. target_movie_id: int The ID of the target movie for which recommendations are needed. Returns ------- recommended_movies : DataFrame Ordered DataFrame of recommended movies containing columns: \'Movie-Title\', \'Genres\'. The rows are ordered from the most recommended movie at the top to the least recommended at the bottom. # Create user-movie ratings matrix user_movie_matrix = reviews.pivot(index=\'User-ID\', columns=\'Movie-ID\', values=\'Rating\').fillna(0) # Compute cosine similarity between target movie and all other movies target_movie_idx = user_movie_matrix.columns.get_loc(target_movie_id) cosine_similarities = cosine_similarity(user_movie_matrix.T)[target_movie_idx] # Create a DataFrame of similarity scores similarity_df = pd.DataFrame({ \'Movie-ID\': user_movie_matrix.columns, \'Similarity\': cosine_similarities }) # Merge similarity scores with movies information merged_df = pd.merge(similarity_df, movies, on=\'Movie-ID\') # Exclude the target movie recommended_movies = merged_df[merged_df[\'Movie-ID\'] != target_movie_id] # Sort by similarity score in descending order recommended_movies = recommended_movies.sort_values(by=\'Similarity\', ascending=False) # Return only the movie title and genres return recommended_movies[[\'Movie-Title\', \'Genres\']]"},{"question":"You are tasked with creating a function `find_consecutive_prime_sum(limit)` that finds the prime number below a given limit that can be written as the sum of the most consecutive primes. This function should use the following steps: 1. Generate a list of all prime numbers less than `limit` using the Sieve of Eratosthenes algorithm. 2. Determine the prime number that can be expressed as the sum of the longest sequence of consecutive primes such that the sum is also a prime number and does not exceed `limit`. 3. Return a tuple where the first element is the prime number that can be written as the sum of the most consecutive primes and the second element is the number of consecutive primes in the sum. **Example Usage:** Given the limit: ```python limit = 100 ``` Calling `find_consecutive_prime_sum(limit)` should yield a result: ```python (41, 6) ``` Explanation: 41 is the prime number that can be expressed as the sum of the most consecutive primes (2 + 3 + 5 + 7 + 11 + 13), which totals 6 terms. **Additional Notes:** - Your function should be efficient for larger values of `limit` (up to 10,000 or more). - Consider edge cases such as very small limits where the sequence might be minimal or non-existent.","solution":"def sieve_of_eratosthenes(limit): sieve = [True] * limit sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def find_consecutive_prime_sum(limit): primes = sieve_of_eratosthenes(limit) prime_set = set(primes) max_len = 0 prime_with_max_len = 0 for start in range(len(primes)): sum_primes = 0 for end in range(start, len(primes)): sum_primes += primes[end] if sum_primes >= limit: break if sum_primes in prime_set and (end - start + 1) > max_len: max_len = end - start + 1 prime_with_max_len = sum_primes return (prime_with_max_len, max_len)"},{"question":"You are required to write a Python function named `merge_and_count_duplicates` that takes two lists of integers and performs the following tasks: 1. Merges the two lists into a single list. 2. Counts the number of duplicate elements in the merged list. 3. Returns a dictionary where the keys are the duplicate elements and the values are their count in the merged list. # Function Signature: ```python def merge_and_count_duplicates(list1, list2): Merges two lists, counts duplicate elements in the merged list and returns a dictionary with duplicate elements as keys and their counts as values. Parameters: list1 (list of int): The first list of integers. list2 (list of int): The second list of integers. Returns: dict: A dictionary with duplicate elements as keys and their counts as values. pass ``` # Parameters: - `list1`: A list of integers. - `list2`: A list of integers. # Output: The function returns a dictionary where: - The keys are the duplicate elements in the merged list. - The values are the counts of how many times those elements appear in the merged list. # Instructions: 1. Merge the two input lists into a single list. 2. Use a suitable method to count the occurrences of each element in the merged list. 3. Identify the elements that appear more than once and store these elements along with their counts in a dictionary. 4. Return the resulting dictionary. # Example: ```python list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8, 4] result = merge_and_count_duplicates(list1, list2) print(result) # Output: {4: 3, 5: 2} ``` In this example, `4` appears 3 times and `5` appears 2 times in the merged list `[1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 4]`.","solution":"def merge_and_count_duplicates(list1, list2): Merges two lists, counts duplicate elements in the merged list and returns a dictionary with duplicate elements as keys and their counts as values. Parameters: list1 (list of int): The first list of integers. list2 (list of int): The second list of integers. Returns: dict: A dictionary with duplicate elements as keys and their counts as values. from collections import Counter # Merge the two lists merged_list = list1 + list2 # Use Counter to count occurrences of each element counts = Counter(merged_list) # Prepare the result dictionary with only duplicate elements duplicates = {key: value for key, value in counts.items() if value > 1} return duplicates"},{"question":"You are tasked with creating a function named `sort_even_odd` that processes a list of integers and sorts the even and odd numbers separately, reordering the list so that all even numbers appear before the odd numbers while preserving their relative order in each group. Function Requirements: 1. **Function Signature**: ```python def sort_even_odd(lst: list) -> list: ``` 2. **Parameters**: - `lst`: A list of integers that need to be sorted. 3. **Behavior**: - Iterate through the list and separate the even and odd numbers. - Maintain their relative order (i.e., the order in which they appear in the input list). - Reconstruct the list so that all even numbers come first followed by all odd numbers. - Return the newly constructed list. 4. **Example**: ```python sort_even_odd([3, 1, 2, 4, 7, 6]) -> [2, 4, 6, 3, 1, 7] sort_even_odd([5, 3, 2]) -> [2, 5, 3] sort_even_odd([]) -> [] ``` 5. **Considerations**: - Ensure the function handles edge cases such as an empty list or a list with all even or all odd numbers. - Aim for an O(n) solution where n is the length of the input list to maintain efficient performance. **Note**: Use standard practices for list manipulation and iteration.","solution":"def sort_even_odd(lst: list) -> list: Reorders the given list so that all even numbers come before all odd numbers while preserving the relative order of even and odd numbers. evens = [num for num in lst if num % 2 == 0] odds = [num for num in lst if num % 2 != 0] return evens + odds"},{"question":"In a search engine, keyword search functionality is essential. One way to implement keyword matching is to use the Trie data structure, also known as a prefix tree. A Trie is an efficient data retrieval structure that can be used for searching words given their prefixes. You are required to implement a Trie with methods to insert words and search for words with a given prefix. Specifically, implement a Trie class with methods `insert`, `search`, and `startsWith` using Python. Class Specifications: 1. **Class Name:** `Trie` 2. **Methods:** - `__init__(self)`: Initializes the Trie object. - `insert(self, word)`: Inserts the word into the Trie. - `search(self, word)`: Returns `True` if the word is in the Trie, otherwise returns `False`. - `startsWith(self, prefix)`: Returns `True` if there is any word in the Trie that starts with the given prefix, otherwise returns `False`. Example: ```python trie = Trie() # Insert words into the Trie trie.insert(\\"apple\\") trie.insert(\\"app\\") # Search for words print(trie.search(\\"apple\\")) # Returns True print(trie.search(\\"app\\")) # Returns True print(trie.search(\\"appl\\")) # Returns False # Search by prefix print(trie.startsWith(\\"app\\")) # Returns True print(trie.startsWith(\\"apl\\")) # Returns False ``` Use a nested dictionary to represent the Trie nodes, where each node is a dictionary containing its children nodes. Each character in the word represents a node in the Trie.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word): node = self._search_prefix(word) return node is not None and node.is_end_of_word def startsWith(self, prefix): return self._search_prefix(prefix) is not None def _search_prefix(self, prefix): node = self.root for char in prefix: if char not in node.children: return None node = node.children[char] return node"},{"question":"You are given a list of dictionaries where each dictionary contains details about a transaction. Each transaction has three keys: \'transaction_id\', \'amount\', and \'category\'. Your task is to write a function `calculate_category_totals` that processes the transactions and returns a dictionary where each key is a unique category and the corresponding value is the total amount spent in that category. Specifically, the function should: 1. Iterate through the list of transactions. 2. For each transaction, add the \'amount\' to the running total for its \'category\'. 3. Return a dictionary with each category as a key and the total amount spent in that category as the value. **Function Signature** ```python def calculate_category_totals(transactions: list) -> dict: pass ``` **Example:** ```python transactions = [ {\'transaction_id\': 1, \'amount\': 15.00, \'category\': \'Groceries\'}, {\'transaction_id\': 2, \'amount\': 23.50, \'category\': \'Electronics\'}, {\'transaction_id\': 3, \'amount\': 9.75, \'category\': \'Groceries\'}, {\'transaction_id\': 4, \'amount\': 49.99, \'category\': \'Clothing\'}, {\'transaction_id\': 5, \'amount\': 5.00, \'category\': \'Groceries\'} ] # Example function call result = calculate_category_totals(transactions) print(result) # Expected Output: {\'Groceries\': 29.75, \'Electronics\': 23.50, \'Clothing\': 49.99} ```","solution":"def calculate_category_totals(transactions): Calculate total amounts spent in each category from a list of transactions. Args: transactions (list): List of transactions where each transaction is a dictionary with \'transaction_id\', \'amount\', and \'category\' keys. Returns: dict: Dictionary with categories as keys and total spent amounts as values. category_totals = {} for transaction in transactions: category = transaction[\'category\'] amount = transaction[\'amount\'] if category in category_totals: category_totals[category] += amount else: category_totals[category] = amount return category_totals"},{"question":"You are tasked with creating a function that simulates the spread of a contagious disease within a closed population over a period of time and visualizes the progress in a 2D grid. The population is represented on a `n x n` grid where each cell can be in one of three states: Susceptible (`S`), Infected (`I`), or Recovered (`R`). Your function should: - Initialize the grid with a given proportion of Infected individuals and the rest Susceptible. - Use a probabilistic model to spread the infection to neighboring cells. - Transition Infected individuals to Recovered after a fixed number of time steps. - Simulate and visualize the changes in the grid over time using Matplotlib. Your function should be named `simulate_disease_spread` and accept the following parameters: - `n`: The size of the grid (integer). - `initial_infected_proportion`: The initial proportion of Infected individuals (float between 0 and 1). - `infection_rate`: The probability that an Infected individual will spread the infection to a neighboring Susceptible individual during each time step (float between 0 and 1). - `recovery_time`: The number of time steps an individual stays Infected before becoming Recovered (integer). - `time_steps`: The total number of time steps for the simulation (integer). Here is a breakdown of the steps your function should perform: 1. Initialize the `n x n` grid with Susceptible (`S`) and a proportion of Infected (`I`) individuals. 2. For each time step: - Iterate over the grid and update the state of each cell according to the infection and recovery rules. - An Infected cell attempts to infect its Susceptible neighbors based on the `infection_rate`. - After `recovery_time` steps, an Infected cell turns to Recovered (`R`). 3. Use Matplotlib to visualize the grid at each time step, with different colors representing Susceptible, Infected, and Recovered individuals. You can assume the grid is a bounded area, so individuals on the edges or corners only have the available neighbors inside the grid. Use appropriate data structures and plot functions to simulate and visualize the spread effectively.","solution":"import numpy as np import matplotlib.pyplot as plt import matplotlib.colors as mcolors def initialize_grid(n, initial_infected_proportion): grid = np.full((n, n), \'S\') infected_count = int(initial_infected_proportion * n * n) infected_positions = np.random.choice(n * n, infected_count, replace=False) for pos in infected_positions: grid[pos // n, pos % n] = \'I\' days_infected = np.zeros((n, n), dtype=int) return grid, days_infected def simulate_step(grid, days_infected, n, infection_rate, recovery_time): new_grid = grid.copy() new_days_infected = days_infected.copy() for i in range(n): for j in range(n): if grid[i, j] == \'I\': new_days_infected[i, j] += 1 if new_days_infected[i, j] >= recovery_time: new_grid[i, j] = \'R\' else: for di in [-1, 0, 1]: for dj in [-1, 0, 1]: if (di != 0 or dj != 0) and (0 <= i + di < n) and (0 <= j + dj < n): if grid[i + di, j + dj] == \'S\' and np.random.random() < infection_rate: new_grid[i + di, j + dj] = \'I\' return new_grid, new_days_infected def simulate_disease_spread(n, initial_infected_proportion, infection_rate, recovery_time, time_steps): grid, days_infected = initialize_grid(n, initial_infected_proportion) cmap = mcolors.ListedColormap([\'blue\', \'red\', \'green\']) bounds = [0, 1, 2, 3] norm = mcolors.BoundaryNorm(bounds, cmap.N) state_to_num = {\'S\': 0, \'I\': 1, \'R\': 2} for t in range(time_steps): plt.imshow(np.vectorize(state_to_num.get)(grid), cmap=cmap, norm=norm) plt.title(f\\"Time step {t}\\") plt.pause(0.5) grid, days_infected = simulate_step(grid, days_infected, n, infection_rate, recovery_time) plt.show()"},{"question":"Write a function named `n_longest_strings` that takes an iterator of strings and an integer `n`, and returns a sorted list of the `n` longest strings from the iterator. The strings should be sorted in descending order by their length. If two strings have the same length, their order in the original iterator should be preserved. # Function Signature: ```python def n_longest_strings(strings, n): pass ``` # Example: ```python it = iter([\'apple\', \'banana\', \'cherry\', \'date\', \'elderberry\', \'fig\', \'grape\']) result = n_longest_strings(it, 3) print(result) # Output should be [\'elderberry\', \'banana\', \'cherry\'] it = iter([\'one\', \'two\', \'three\', \'four\', \'five\', \'six\', \'seven\']) result = n_longest_strings(it, 2) print(result) # Output should be [\'three\', \'seven\'] ``` # Requirements: 1. Your implementation should correctly handle the case when `n` is greater than the number of strings in the iterator. 2. The order of strings with the same length should reflect their order in the original iterator. 3. Ensure that the function is efficient and can handle large iterators.","solution":"from heapq import nlargest def n_longest_strings(strings, n): Returns a list of the n longest strings from the iterator, sorted by length in descending order. Parameters: strings (iterator of str): An iterator of strings. n (int): The number of longest strings to return. Returns: list of str: A list of the n longest strings sorted by length in descending order. # Use nlargest to get the n longest strings based on their length # and originally maintain their original order by using (-len(x), i) indexed_strings = ((s, i) for i, s in enumerate(strings)) n_longest = nlargest(n, indexed_strings, key=lambda x: (len(x[0]), -x[1])) # Extract the strings from the (string, original_index) tuples return [s for s, idx in n_longest]"},{"question":"You are tasked with writing a function named `plot_fruit_sales`. Using the `matplotlib` library in Python, this function should generate a line chart that depicts the sales of three types of fruits (apples, oranges, bananas) over a week. The chart should be properly formatted with a title, axis labels, a legend, and grid lines. **Function Signature:** ```python def plot_fruit_sales(days: list, sales: dict) -> None: ``` **Parameters:** - `days` (list): A list of strings representing the days of the week (e.g., [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"]). - `sales` (dict): A dictionary where the keys are the fruit names (strings) and the values are lists of integers representing the sales for each day. **Instructions:** 1. Use the provided `days` and `sales` data to plot a line chart. 2. Each fruit should have its own line on the chart, with a corresponding line label (legend). 3. The y-axis should be labeled as \\"Number of Fruits Sold\\". 4. The x-axis should be labeled as \\"Days of the Week\\". 5. Add a title to the chart: \\"Weekly Fruit Sales\\". 6. Insert grid lines to improve readability. 7. Use `plt.show()` to display the chart. **Example:** ```python days = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] sales = { \\"apples\\": [5, 3, 6, 7, 2, 4, 8], \\"oranges\\": [6, 7, 5, 3, 4, 5, 2], \\"bananas\\": [7, 2, 4, 6, 5, 3, 1] } plot_fruit_sales(days, sales) ``` The function should produce a line chart displaying sales of apples, oranges, and bananas over the given days of a week.","solution":"import matplotlib.pyplot as plt def plot_fruit_sales(days: list, sales: dict) -> None: Generate a line chart that depicts the sales of three types of fruits (apples, oranges, bananas) over a week. Parameters: days (list): A list of strings representing the days of the week. sales (dict): A dictionary where the keys are the fruit names (strings) and the values are lists of integers representing the sales for each day. for fruit, sales_data in sales.items(): plt.plot(days, sales_data, marker=\'o\', label=fruit.capitalize()) plt.xlabel(\\"Days of the Week\\") plt.ylabel(\\"Number of Fruits Sold\\") plt.title(\\"Weekly Fruit Sales\\") plt.legend() plt.grid(True) plt.show()"},{"question":"Develop a function to traverse a binary tree and print its nodes level by level from left to right. You will need to perform a level-order traversal or breadth-first traversal. You need to create a function `level_order_traversal(root)` that accepts the root of a binary tree and prints the values of the nodes level by level. **Function Signature:** ```python def level_order_traversal(root: Optional[TreeNode]) -> None: ``` **Parameters:** - `root` (Optional[TreeNode]): Root node of the binary tree. It\'s `None` if the binary tree is empty. **Returns:** - None. The function should print the tree nodes\' values level by level from left to right. **Definition for a binary tree node:** ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Example:** ```python # Binary Tree Representation # 3 # / # 9 20 # / # 15 7 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) level_order_traversal(root) # Expected Output: # 3 # 9 20 # 15 7 ```","solution":"from typing import Optional, List from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root: Optional[TreeNode]) -> None: if root is None: return queue = deque([root]) while queue: level_size = len(queue) level_values = [] for _ in range(level_size): node = queue.popleft() level_values.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) print(\\" \\".join(map(str, level_values)))"},{"question":"You are designing a function to pair students for a coding competition. Each student is represented by their ID and programming proficiency score. The goal is to pair students such that the absolute difference in their proficiency scores is minimized. Each student must be paired exactly once. Write a function `pair_students(student_ids, proficiency_scores)` that takes in two lists: - `student_ids`: List of student IDs. - `proficiency_scores`: Corresponding list of programming proficiency scores for each student. This function should return a list of pairs, where each pair is a tuple containing the IDs of the paired students. **Requirements:** - The length of `student_ids` and `proficiency_scores` is guaranteed to be even and equal. - Sort both lists based on proficiency scores in non-decreasing order before pairing. - Pair each student with their closest proficiency neighbor. **Example:** ```python >>> pair_students([101, 102, 103, 104], [150, 170, 160, 180]) [(101, 103), (102, 104)] ``` In this example, students with IDs 101 and 103 are paired together as well as students with IDs 102 and 104, considering their proficiencies 150, 160, 170, and 180 respectively.","solution":"def pair_students(student_ids, proficiency_scores): Pairs students such that the absolute difference between their proficiency scores is minimized. Args: - student_ids (list): List of student IDs. - proficiency_scores (list): Corresponding list of programming proficiency scores. Returns: - list of tuples: Each tuple contains two student IDs that have been paired together. # Combine both lists and sort by proficiency_scores combined_list = sorted(zip(proficiency_scores, student_ids)) # Extract sorted IDs based on the sorted combined list of proficiency scores sorted_ids = [student_id for _, student_id in combined_list] # Create pairs of students paired_students = [(sorted_ids[i], sorted_ids[i+1]) for i in range(0, len(sorted_ids), 2)] return paired_students"},{"question":"Write a function called `flatten_json` that takes a nested JSON object and converts it into a flattened dictionary. The function should handle nested objects and arrays, with a specific key convention to indicate depth. For instance, a nested object\'s keys should be concatenated using a period \'.\', and array indices should be denoted within square brackets \'[]\'. Your function, `flatten_json`, should have the following parameter: - `json_obj` (dict): The input JSON object which is a Python dictionary. The function should return a flattened dictionary with keys representing the depth path of the original nested structure. Constraints: - Handle nested dictionaries and arrays of arbitrary depth. - Ensure that keys from dictionaries and indices from arrays are properly concatenated to represent the depth path. Function signature: ```python def flatten_json(json_obj): # Your code here ``` Example usage: ```python input_json = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3, \'f\': [4, 5, 6] } }, \'g\': [7, {\'h\': 8, \'i\': 9}] } # Flattened output should look like: # { # \'a\': 1, # \'b.c\': 2, # \'b.d.e\': 3, # \'b.d.f[0]\': 4, # \'b.d.f[1]\': 5, # \'b.d.f[2]\': 6, # \'g[0]\': 7, # \'g[1].h\': 8, # \'g[1].i\': 9 # } flattened_dict = flatten_json(input_json) print(flattened_dict) ```","solution":"def flatten_json(json_obj, parent_key=\'\', sep=\'.\'): Converts a nested JSON object into a flattened dictionary. Parameters: json_obj (dict): The input JSON object. parent_key (str): The base key string used for recursion (default is empty). sep (str): The separator between keys (default is a period). Returns: dict: A flattened dictionary representing the depth path of the input JSON. items = [] for key, value in json_obj.items(): new_key = f\\"{parent_key}{sep}{key}\\" if parent_key else key if isinstance(value, dict): items.extend(flatten_json(value, new_key, sep=sep).items()) elif isinstance(value, list): for i, v in enumerate(value): items.extend(flatten_json({f\\"{key}[{i}]\\": v}, parent_key).items()) else: items.append((new_key, value)) return dict(items)"},{"question":"You are asked to write a Python function named `find_highest_frequency_word` that processes a text file available at a given URL and finds the word with the highest frequency. Your function must ignore case sensitivity and consider words based only on their alphanumeric characters. Your function should adhere to the following specifications: - **Function Signature**: `def find_highest_frequency_word(url: str) -> str:` - **Parameters**: - `url` (str): A URL pointing to the text file containing the data. - **Returns**: - `str`: The word with the highest frequency in the text file. - **Requirements**: - Use the `requests` library to send an HTTP GET request to the specified URL. - Ignore punctuation and consider only alphanumeric characters as forming words. - Treat words in a case-insensitive manner (i.e., \\"Apple\\", \\"apple\\", and \\"APPLE\\" should be treated as the same word). - If there are multiple words with the same highest frequency, return any one of them. # Examples: ```python import requests from collections import Counter import re def find_highest_frequency_word(url: str) -> str: response = requests.get(url) text = response.text.lower() words = re.findall(r\'bw+b\', text) word_counts = Counter(words) most_common_word = word_counts.most_common(1)[0][0] return most_common_word # Example Usage: url = \\"http://example.com/sample_text.txt\\" common_word = find_highest_frequency_word(url) print(common_word) # Expected Output: <most frequent word in the text> ```","solution":"import requests from collections import Counter import re def find_highest_frequency_word(url: str) -> str: Fetches the text file from the given URL and finds the word with the highest frequency. Words are considered in a case-insensitive manner, ignoring punctuation. Parameters: - url (str): A URL pointing to the text file containing the data. Returns: - str: The word with the highest frequency in the text file. response = requests.get(url) text = response.text.lower() words = re.findall(r\'bw+b\', text) word_counts = Counter(words) most_common_word = word_counts.most_common(1)[0][0] return most_common_word"},{"question":"You are developing a system to monitor the performance of various online servers. Each server generates a log file containing timestamps of requests it has processed. Your goal is to identify periods of high activity by determining the busiest minute of the day for each server, based on the number of requests received. Write a function `find_busiest_minute` that takes a list of log entries for a specific server and returns the minute of the day during which the server received the most requests. Each log entry is a timestamp string in the format `YYYY-MM-DD HH:MM:SS`. Function Specifications: - **Function Name**: `find_busiest_minute` - **Parameters**: - `log_entries` (list of strings): A list of timestamp strings, each representing a request received by the server. - **Output**: - Returns a string representing the minute of the day during which the server received the most requests, in the format `HH:MM`. The function should: 1. Parse the timestamp strings to extract the time components. 2. Track the number of requests received for each minute of the day. 3. Identify the minute with the highest number of requests. 4. Return the time of the busiest minute in the format `HH:MM`. Below is some sample code to start: ```python from collections import Counter from datetime import datetime def find_busiest_minute(log_entries): # Your code here pass ``` You can assume the `log_entries` list will be provided directly to the function and that the list contains at least one timestamp. You can also assume all timestamps are in the same day and correctly formatted based on the given structure.","solution":"from collections import Counter from datetime import datetime def find_busiest_minute(log_entries): minute_counts = Counter() for entry in log_entries: # Extract the hour and minute from the timestamp time_part = entry[11:16] minute_counts[time_part] += 1 # Find the minute with the maximum count busiest_minute = max(minute_counts, key=minute_counts.get) return busiest_minute"},{"question":"You are tasked with analyzing a dataset that contains information about the books in a library. Each book is described by its title, author, genre, and publication year. The data is stored in a CSV file. Your goal is to write a function named `analyze_books` that: 1. Loads the data from the provided CSV file. 2. Finds the most frequent author, the most common genre, and the earliest and latest publication year in the dataset. 3. Returns the results in a dictionary. **Required Libraries:** - pandas The location of the CSV file is provided in the variable `BOOK_DATA`. An example of the file contents is: ``` Title,Author,Genre,Publication Year To Kill a Mockingbird,Harper Lee,Fiction,1960 1984,George Orwell,Dystopian,1949 The Great Gatsby,F. Scott Fitzgerald,Fiction,1925 ... ``` # Function Signature: ```python def analyze_books(file_path: str) -> dict: ``` # Parameters: - `file_path`: A string representing the file path of the CSV file to analyze. # Returns: - A dictionary containing the following keys: - `most_frequent_author`: The author who appears the most frequently in the dataset. - `most_common_genre`: The genre that appears the most frequently in the dataset. - `earliest_publication_year`: The earliest publication year in the dataset. - `latest_publication_year`: The latest publication year in the dataset. # Example Usage: ```python results = analyze_books(BOOK_DATA) ``` In this example, the function will load the data from the CSV file located at `BOOK_DATA`, find the most frequent author, the most common genre, the earliest and latest publication years, and return these values in a dictionary.","solution":"import pandas as pd def analyze_books(file_path: str) -> dict: # Load the CSV file into a DataFrame df = pd.read_csv(file_path) # Find the most frequent author most_frequent_author = df[\'Author\'].mode()[0] # Find the most common genre most_common_genre = df[\'Genre\'].mode()[0] # Find the earliest publication year earliest_publication_year = df[\'Publication Year\'].min() # Find the latest publication year latest_publication_year = df[\'Publication Year\'].max() # Return the results in a dictionary return { \'most_frequent_author\': most_frequent_author, \'most_common_genre\': most_common_genre, \'earliest_publication_year\': earliest_publication_year, \'latest_publication_year\': latest_publication_year }"},{"question":"You need to write a function that simulates a ticket booking system, where multiple users can book tickets concurrently using Python threading. In this problem, the objective is to implement the `book_ticket` function. Users will try to book tickets from a limited pool, and the function should ensure that no more tickets are sold than are available using proper synchronization mechanisms. Your task is to implement the `book_ticket` function that will: 1. Attempt to book a ticket if available and update the total number of tickets sold. 2. Print a message indicating that the current thread has booked a ticket or failed to book due to no availability. 3. Ensure that the ticket booking operation is thread-safe. You need to use the `threading.Lock` class to handle synchronization and `threading.current_thread` to get the name of the current thread. # Function Signature ```python def book_ticket(tickets_available: list, tickets_sold: list, lock: threading.Lock) -> None: Function to be implemented by you. Parameters: tickets_available (list): A list with one element representing the number of tickets available. tickets_sold (list): A list with one element representing the number of tickets sold. lock (threading.Lock): A lock object to ensure thread safety. pass ``` # Example Usage ```python import threading def book_ticket(tickets_available, tickets_sold, lock): with lock: if tickets_available[0] > 0: tickets_available[0] -= 1 tickets_sold[0] += 1 print(\\"用户线程:{}, 成功预订一张票。剩余票数:{}，已售票数:{}\\".format(threading.current_thread().name, tickets_available[0], tickets_sold[0])) else: print(\\"用户线程:{}, 未能预订票，票已售罄。\\".format(threading.current_thread().name)) tickets_available = [10] # Initialize with 10 tickets available tickets_sold = [0] # No tickets sold initially lock = threading.Lock() threads = [] # Create and start 15 threads trying to book tickets for i in range(15): thread = threading.Thread(target=book_ticket, args=(tickets_available, tickets_sold, lock)) threads.append(thread) thread.start() # Wait for all threads to complete for thread in threads: thread.join() print(\\"预订过程完成。最终剩余票数:{}，总计售出票数:{}\\".format(tickets_available[0], tickets_sold[0])) ``` In this example, 15 user threads will attempt to book tickets from a pool of 10 available tickets. The `book_ticket` function ensures that each booking operation is synchronized, preventing overselling. Each thread will print a message indicating the outcome of its booking attempt. After starting all user threads, the main thread will wait for their completion using `join()`. Ensure that your implementation follows this logic and makes appropriate use of `threading.Lock` and `threading.current_thread`. # Constraints - Do not modify the function signature. - Implement synchronization properly using `threading.Lock`. - Use `threading.current_thread` to get the name of the current thread.","solution":"import threading def book_ticket(tickets_available, tickets_sold, lock): Attempt to book a ticket if available and update the total number of tickets sold. with lock: if tickets_available[0] > 0: tickets_available[0] -= 1 tickets_sold[0] += 1 print(\\"Thread {}: Successfully booked a ticket. Tickets remaining: {}, Tickets sold: {}\\".format( threading.current_thread().name, tickets_available[0], tickets_sold[0])) else: print(\\"Thread {}: Failed to book a ticket; no tickets available.\\".format( threading.current_thread().name))"},{"question":"You are asked to write a function that simulates a simple order booking system for a restaurant. The function, named `book_table`, should take three arguments: `table_id` (an integer), `customer_name` (a string), and `time_slot` (a string). The function will manage the bookings in a dictionary with table IDs as keys and lists of tuples (customer_name, time_slot) as values. The `book_table` function should: 1. Initialize the booking system (dictionary) if it does not exist. 2. Prevent double booking by checking if a table is already booked for the given time slot. 3. Add the booking if the table is available at the given time. 4. Return a confirmation message if the booking is successful or an error message if the table is already booked. Implement the following function in Python: ```python def book_table(table_id, customer_name, time_slot): # Function body goes here ```","solution":"bookings = {} def book_table(table_id, customer_name, time_slot): Books a table for a customer at a given time slot. Args: table_id (int): The ID of the table to be booked. customer_name (str): The name of the customer booking the table. time_slot (str): The time slot for the booking. Returns: str: Confirmation if the booking is successful, or an error message if the table is already booked. if table_id not in bookings: bookings[table_id] = [] # Check for double booking for booking in bookings[table_id]: if booking[1] == time_slot: return f\\"Table {table_id} is already booked for {time_slot}.\\" # Add the booking bookings[table_id].append((customer_name, time_slot)) return f\\"Table {table_id} successfully booked for {customer_name} at {time_slot}.\\""},{"question":"Given a list of integers, implement a function that finds the contiguous subarray (containing at least one number) which has the largest sum and return that sum. If the list is empty, return 0. The function should raise the exception for: TypeError if any element in the list is not an integer. The function should output with: int: The largest sum of the contiguous subarray. You should write self-contained code starting with: ``` def max_subarray_sum(nums): ```","solution":"def max_subarray_sum(nums): Finds the contiguous subarray with the largest sum and returns that sum. Raises TypeError if any element in the list is not an integer. Returns 0 if the list is empty. Parameters: nums (list): List of integers Returns: int: The largest sum of the contiguous subarray if not nums: return 0 # Raise TypeError if any element is not an integer for num in nums: if not isinstance(num, int): raise TypeError(\\"All elements in the list must be integers.\\") max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a string `s` consisting of lowercase English letters and you need to write a function `min_window(s: str, t: str) -> str` that finds the minimum window in `s` which will contain all the characters in `t` (including duplicates). If there is no such window in `s` that covers all characters in `t`, return an empty string `\\"\\"`. # Requirements: - Use a sliding window approach to solve the problem efficiently. - If there are multiple answers, return the first occurring one. - Try to optimize the solution for performance. # Method Signatures: ```python def min_window(s: str, t: str) -> str: # Your code here ``` # Constraints: - Both `s` and `t` consist of lowercase English letters. - If `s` or `t` is empty, return an empty string `\\"\\"`. # Example Usage: ```python s = \\"ADOBECODEBANC\\" t = \\"ABC\\" print(min_window(s, t)) # Output: \\"BANC\\" s = \\"a\\" t = \\"a\\" print(min_window(s, t)) # Output: \\"a\\" s = \\"a\\" t = \\"aa\\" print(min_window(s, t)) # Output: \\"\\" ``` # Notes: - The length of `s` and `t` can be up to `10^5`. - Make sure to handle edge cases such as when `s` or `t` is empty. - The function should be optimized for performance while maintaining readability and clarity.","solution":"from collections import Counter, defaultdict def min_window(s: str, t: str) -> str: if not s or not t: return \\"\\" t_count = Counter(t) current_count = defaultdict(int) required = len(t_count) formed = 0 left = 0 min_len = float(\'inf\') min_window = \\"\\" for right in range(len(s)): current_count[s[right]] += 1 if s[right] in t_count and current_count[s[right]] == t_count[s[right]]: formed += 1 while left <= right and formed == required: if right - left + 1 < min_len: min_len = right - left + 1 min_window = s[left:right+1] current_count[s[left]] -= 1 if s[left] in t_count and current_count[s[left]] < t_count[s[left]]: formed -= 1 left += 1 return min_window"},{"question":"Write a function `find_duplicates` that takes an input list of integers and returns a list of integers that appear more than once in the input list. The function should preserve the order of first appearances of the duplicate values. The function `find_duplicates` should follow these steps: - Create an empty dictionary to keep track of the count of each element in the input list. - Create an empty list to store the duplicates in the order they first appear. - Iterate through the input list to populate the dictionary with the number of occurrences of each element. - Iterate through the input list again, and for each element that has more than one occurrence in the dictionary, append it to the duplicates list if it is not already present in the duplicates list. - Return the duplicates list. Here are some useful methods/function you might consider for this task: - Dictionary\'s `get` method. - List\'s `append` method. - Utilizing Python\'s `in` operator for list membership checks. Implement the `find_duplicates` function as follows: ```python def find_duplicates(lst): # Your implementation here ```","solution":"def find_duplicates(lst): Returns a list of integers that appear more than once in the input list, preserving the order of first appearances. element_count = {} duplicates = [] # Populate the dictionary with the number of occurrences of each element for element in lst: element_count[element] = element_count.get(element, 0) + 1 # Iterate through the list again and add duplicates to the duplicates list for element in lst: if element_count[element] > 1 and element not in duplicates: duplicates.append(element) return duplicates"},{"question":"Write a function that determines if a given sequence of parentheses is balanced. A balanced sequence of parentheses is one where every opening parenthesis has a corresponding closing parenthesis in the correct order. You are required to use a stack to solve this problem. Function Signature ```python def is_balanced_parentheses(sequence): # your code here ``` Input - `sequence`: A string containing only the characters `(` and `)` which represents the sequence of parentheses. Output - Returns `True` if the sequence is balanced, `False` otherwise. Constraints - The length of the sequence will not exceed (10^6). Example ```python sequence = \\"(())\\" print(is_balanced_parentheses(sequence)) # Output should be True sequence = \\"(()\\" print(is_balanced_parentheses(sequence)) # Output should be False ``` Requirements - You must use a stack data structure to determine if the sequence of parentheses is balanced.","solution":"def is_balanced_parentheses(sequence): stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are required to create a function `validateBrackets(s: str) -> bool` to validate if a given string of brackets is balanced. A string is said to be balanced if all types of brackets - parentheses `()`, square brackets `[]`, and curly braces `{}` - have matching closing and opening counterparts in the correct order. Implement the function `validateBrackets` such that: 1. It takes a single argument `s`, which is a string containing only the characters `()[]{}`. 2. Returns `True` if the string is balanced, else returns `False`. # Examples: ```python validateBrackets(\\"()\\") # True validateBrackets(\\"([)]\\") # False validateBrackets(\\"{[]}\\") # True validateBrackets(\\"]\\") # False validateBrackets(\\"([])\\") # True validateBrackets(\\"{[()]}\\") # True ``` # Constraints: - The length of the string `s` will be in the range `[0, 10^4]`. # Note: - You may use a stack data structure to help with the validation process.","solution":"def validateBrackets(s: str) -> bool: This function checks if a string containing only characters \'()[]{}\' is balanced. A string is balanced if all the opening brackets have corresponding closing brackets in the correct order. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map: # if it\'s a closing bracket top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function called `parse_query_string` that takes a query string from a URL and returns it as a dictionary. The query string will be passed as a single string parameter and contains multiple key-value pairs separated by \\"&\\". Each key is separated from its value by \\"=\\". Function Signature: ```python def parse_query_string(query: str) -> dict: ``` # Requirements: 1. Split the query string by \\"&\\" to separate the key-value pairs. 2. Further split each pair by \\"=\\" to isolate the keys and values. 3. Return a dictionary where keys are the query parameter names and values are the associated values from the query string. 4. If a key appears multiple times in the query string, retain only its last occurrence in the resulting dictionary. # Inputs: - `query` (str): The query string from a URL to be parsed into a dictionary. # Output: - A dictionary representation of the query string\'s key-value pairs. # Example Usage: ```python query_string = \\"name=Alice&age=30&city=Wonderland&hobby=reading&hobby=chess\\" result = parse_query_string(query_string) print(result) ``` The expected output for this example should be: ```python { \\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"Wonderland\\", \\"hobby\\": \\"chess\\" } ``` **Important**: You may assume that the input query string will not be empty and that all key-value pairs in the query string will be valid (i.e., every key will have an associated value).","solution":"def parse_query_string(query: str) -> dict: Parses a query string from a URL into a dictionary. Args: query (str): The query string from a URL. Returns: dict: A dictionary representation of the query string\'s key-value pairs. query_dict = {} pairs = query.split(\\"&\\") for pair in pairs: key, value = pair.split(\\"=\\") query_dict[key] = value return query_dict"},{"question":"You are tasked with creating a function called `generate_book_data` that simulates data for a collection of books. Each book instance will have a set of characteristics and an associated price. The `generate_book_data` function should produce a list of 200 such book instances, each represented as a dictionary with \'input\' as a tuple of the book characteristics and \'result\' as the computed price. Below are the details: Book Characteristics: 1. **Genre**: A string representing the genre of the book. Randomly chosen from the list: `[\'Science Fiction\', \'Mystery\', \'Biography\', \'Fantasy\', \'Non-Fiction\']`. 2. **Pages**: An integer between 50 and 1000 (both inclusive), representing the number of pages in the book. 3. **Hardcover**: A boolean indicating whether the book is a hardcover or not. 4. **Edition**: An integer representing the edition of the book, randomly chosen from integers between 1 and 10 (both inclusive). Price Calculation: - The price depends on the genre of the book using a predefined function `bookprice(genre, pages, hardcover, edition)`. Assume this function is defined elsewhere and available for use. - The initial price is adjusted based on whether the book is a hardcover. - A noise factor is added to the price by multiplying it with a random number in the interval [0.9, 1.5). Your primary task is to implement the `generate_book_data` function. Specifically, you must: 1. Use the `random.choice` function to randomly choose the genre. 2. Use the `random.randint` function to derive random integers for the pages and edition. 3. Use the `random.random` function to derive the random noise factor. Here\'s a prompt for the `bookprice` function: ```python def bookprice(genre, pages, hardcover, edition): # This is a placeholder function base_price = 10 if genre == \'Science Fiction\' else 8 price = (base_price + pages * 0.1 + edition * 2) * (1.5 if hardcover else 1) return price # Simplified example ``` You can assume the `bookprice` function has been predefined as specified above for testing purposes. # Example of Usage: ```python book_data = generate_book_data() print(book_data[:5]) # Print the first 5 book entries to inspect ``` # Requirements: - Implement the function using the `random.choice`, `random.randint`, and `random.random` functions as described. - Structure of each dictionary in the list should follow the format: `{\'input\': (genre, pages, hardcover, edition), \'result\': price}`.","solution":"import random def bookprice(genre, pages, hardcover, edition): Simplified example of how book price can be determined. base_price = 10 if genre == \'Science Fiction\' else 8 price = (base_price + pages * 0.1 + edition * 2) * (1.5 if hardcover else 1) return price def generate_book_data(): genres = [\'Science Fiction\', \'Mystery\', \'Biography\', \'Fantasy\', \'Non-Fiction\'] book_data = [] for _ in range(200): genre = random.choice(genres) pages = random.randint(50, 1000) hardcover = random.choice([True, False]) edition = random.randint(1, 10) price = bookprice(genre, pages, hardcover, edition) noise_factor = random.uniform(0.9, 1.5) price_with_noise = price * noise_factor book_instance = { \'input\': (genre, pages, hardcover, edition), \'result\': price_with_noise } book_data.append(book_instance) return book_data"},{"question":"You are required to write a function named `parse_log` that analyzes a web server log file and identifies the top N IP addresses that have made the most requests. Details: 1. The function `parse_log` should take two arguments: - `log_contents` (a string containing the log data, with each line representing a request in the format \\"IP_ADDRESS - - [DATE] \\"REQUEST\\" STATUS_CODE SIZE\\"). - `top_n` (an integer specifying the number of top IP addresses to identify). 2. The function should parse the log data to count the number of requests made by each IP address. 3. The function should return a list of tuples containing the top N IP addresses and their corresponding number of requests, sorted in descending order of requests. If two IP addresses have the same number of requests, they should be sorted in ascending lexicographical order. 4. If `top_n` is greater than the number of unique IP addresses, return all IP addresses sorted by the number of requests and then lexicographically. Example: ```python log_data = 192.168.1.1 - - [23/Mar/2023:10:13:22 +0000] \\"GET /index.html HTTP/1.1\\" 200 612 192.168.1.2 - - [23/Mar/2023:10:15:23 +0000] \\"GET /about.html HTTP/1.1\\" 200 512 192.168.1.1 - - [23/Mar/2023:10:17:24 +0000] \\"POST /submit HTTP/1.1\\" 200 232 192.168.1.3 - - [23/Mar/2023:10:18:25 +0000] \\"GET /contact.html HTTP/1.1\\" 404 232 192.168.1.1 - - [23/Mar/2023:10:19:26 +0000] \\"GET /home.html HTTP/1.1\\" 200 112 # Call the function top_ips = parse_log(log_data, 2) # The function will return the top 2 IP addresses with their request counts, sorted accordingly # Output: [(\'192.168.1.1\', 3), (\'192.168.1.2\', 1)] ``` Constraints: - The input log data will always be well-formatted. - `top_n` will be a positive integer. - Ensure that you import all necessary libraries within the function.","solution":"def parse_log(log_contents, top_n): from collections import Counter lines = log_contents.strip().split(\'n\') ip_counter = Counter() for line in lines: ip_address = line.split()[0] ip_counter[ip_address] += 1 sorted_ips = sorted(ip_counter.items(), key=lambda x: (-x[1], x[0])) return sorted_ips[:top_n]"},{"question":"Given a list of dictionaries where each dictionary represents a student\'s scores across various subjects, calculate the average score per student and return a list of tuples. Each tuple should contain the student\'s name and their average score, sorted by average score in descending order. The function should output: list of tuples: str: The student\'s name. float: The student\'s average score rounded to 2 decimal places. You should write self-contained code starting with: ``` def calculate_student_averages(student_scores): ```","solution":"def calculate_student_averages(student_scores): Calculates the average score per student and returns a list of tuples of the student\'s name and their average score, sorted by average score in descending order. student_averages = [] for student in student_scores: name = student[\\"name\\"] scores = [score for subject, score in student.items() if subject != \\"name\\"] average_score = round(sum(scores) / len(scores), 2) student_averages.append((name, average_score)) student_averages.sort(key=lambda x: x[1], reverse=True) return student_averages"},{"question":"In this problem, you are tasked with creating a function that simulates the inventory management of a small grocery store. The inventory is a dictionary where the keys are product names and the values are the quantities available. The function should handle both restocking and purchasing processes. You need to implement a function named `manage_inventory` that accomplishes the following: 1. Process a list of operations where each operation is either a purchase or a restock. 2. For purchase operations, reduce the inventory accordingly and return an error message if the requested quantity is not available. 3. For restock operations, increase the inventory accordingly. The core function you need to create is `manage_inventory`, with the required signature: ```python def manage_inventory(inventory: dict, operations: list): # your code here ``` # Input Parameters: - `inventory` (dict): A dictionary representing the current inventory. Keys are product names (str) and values are quantities (int). - `operations` (list): A list of tuples where each tuple represents an operation. The first element of the tuple is a string (\'purchase\' or \'restock\'), the second element is the product name (str), and the third element is the quantity (int). # Output: The function should return a list of strings representing the results of the operations: 1. For each successful purchase, return a confirmation message in the form `\\"Purchased {quantity} of {product}\\"`. 2. For each successful restock, return a confirmation message in the form `\\"Restocked {quantity} of {product}\\"`. 3. If a purchase operation cannot be satisfied due to insufficient quantity, return an error message in the form `\\"Insufficient stock for {product}\\"`. # Example Interaction ```python inventory = {\\"apples\\": 10, \\"oranges\\": 5} operations = [(\\"purchase\\", \\"apples\\", 5), (\\"restock\\", \\"oranges\\", 10), (\\"purchase\\", \\"bananas\\", 2), (\\"purchase\\", \\"oranges\\", 15)] print(manage_inventory(inventory, operations)) ``` Expected output: ``` [\'Purchased 5 of apples\', \'Restocked 10 of oranges\', \'Insufficient stock for bananas\', \'Insufficient stock for oranges\'] ``` # Constraints: 1. Assume that the inventory dictionary only contains positive integers for quantities. 2. Assume that the product names are always valid strings. 3. You may assume that the initial inventory is not empty. In this problem, you should not worry about real-world constraints like negative quantities or non-existent products, and you can assume all input data is well-formed and valid. Focus on correctly updating the inventory and returning the appropriate messages for each operation.","solution":"def manage_inventory(inventory: dict, operations: list): results = [] for operation in operations: op_type, product, quantity = operation if op_type == \\"purchase\\": if product in inventory and inventory[product] >= quantity: inventory[product] -= quantity results.append(f\\"Purchased {quantity} of {product}\\") else: results.append(f\\"Insufficient stock for {product}\\") elif op_type == \\"restock\\": if product in inventory: inventory[product] += quantity else: inventory[product] = quantity results.append(f\\"Restocked {quantity} of {product}\\") return results"},{"question":"You are to implement a function that performs operations with sets to practice membership testing, subset relationships, intersection, and union operations. Your task is to implement a function called `set_operations` that performs the following operations: 1. Tests if a given element is a member of a set. 2. Determines if one set is a subset of another. 3. Computes the intersection of two sets. 4. Computes the union of two sets. Specifically, your function should be named `set_operations` and have the following signature: ```python def set_operations(a: set, b: set, element: int) -> dict: # Your code here ``` # Input - `a` (set): A set of integers. - `b` (set): A set of integers. - `element` (int): An integer element to test membership in set `a`. # Output - (dict): A dictionary with the following four key-value pairs: - `\'is_member\'`: A boolean indicating whether `element` is a member of set `a`. - `\'is_subset\'`: A boolean indicating whether set `a` is a subset of set `b`. - `\'intersection\'`: A set containing all elements in both set `a` and set `b`. - `\'union\'`: A set containing all elements in either set `a` or set `b`. # Example ```python result = set_operations({1, 2, 3}, {2, 3, 4}, 2) print(result) # Output Example: { \\"is_member\\": True, \\"is_subset\\": False, \\"intersection\\": {2, 3}, \\"union\\": {1, 2, 3, 4} } ``` # Constraints - All integer elements of sets `a` and `b` and the `element` will be in the range from -10^6 to 10^6. - Sets `a` and `b` can have at most 10^4 elements.","solution":"def set_operations(a: set, b: set, element: int) -> dict: Perform set operations and return the results in a dictionary. Parameters: a (set): A set of integers. b (set): A set of integers. element (int): An integer element to test membership in set a. Returns: dict: A dictionary with the results of the set operations. result = { \'is_member\': element in a, \'is_subset\': a.issubset(b), \'intersection\': a.intersection(b), \'union\': a.union(b) } return result"},{"question":"You are tasked with creating a function `rotate_matrix_90` that rotates a given NxN matrix 90 degrees clockwise. You will use the numpy library for this task. Specifically, you are required to utilize the following numpy functions: `np.array`, `np.rot90`. Function Signature ```python def rotate_matrix_90(matrix): pass ``` Input - `matrix`: A list of lists where each sublist represents a row in a NxN matrix. Output - A new NxN matrix (list of lists) which is the result of rotating the input matrix 90 degrees clockwise. Constraints - The number of rows and columns in `matrix` will be the same. - The elements of `matrix` will be numerical values. Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(rotate_matrix_90(matrix)) # Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ```","solution":"import numpy as np def rotate_matrix_90(matrix): Rotates the given NxN matrix 90 degrees clockwise. Parameters: matrix (list of lists): NxN matrix to be rotated. Returns: list of lists: New NxN matrix rotated 90 degrees clockwise. np_matrix = np.array(matrix) rotated_matrix = np.rot90(np_matrix, -1) return rotated_matrix.tolist()"},{"question":"In this exercise, you are asked to write a function that processes a stream of real-time data and produces a summary of this data on fixed time intervals. This function can be used as a part of a real-time monitoring system where data points are recorded at various timestamps, and summaries are needed to track the metrics over time. You need to write a function `process_stream(data_stream, interval)` that performs the following tasks: 1. Receives a stream of data points where each data point is a tuple `(timestamp, value)`. The `timestamp` is a float representing the time in seconds, and `value` is a float representing the recorded data value at that timestamp. 2. The `interval` is an integer representing the fixed time interval (in seconds) for which you need to summarize the data. 3. Aggregates the data into fixed intervals and calculates the following summary statistics for each interval: - `start_time`: The starting time of the interval. - `end_time`: The end time of the interval. - `count`: The number of data points within the interval. - `average`: The average of the data values within the interval. - `min_value`: The smallest data value within the interval. - `max_value`: The largest data value within the interval. For instance, if you are given a data stream and an interval of 10 seconds, your function should produce summaries like so: ``` [ {\'start_time\': 0, \'end_time\': 10, \'count\': 3, \'average\': 5.0, \'min_value\': 3.0, \'max_value\': 7.0}, {\'start_time\': 10, \'end_time\': 20, \'count\': 2, \'average\': 6.5, \'min_value\': 5.0, \'max_value\': 8.0}, ... ] ``` Here is a description of the expected input parameters: - `data_stream` - List of tuples: Each tuple contains a `timestamp` (float) and `value` (float). - `interval` - Integer: Time interval in seconds for aggregating the data. Given these requirements, implement the `process_stream` function with the following signature: ```python def process_stream(data_stream, interval): ``` Make sure to correctly handle edge cases, such as intervals with no data points.","solution":"def process_stream(data_stream, interval): from collections import defaultdict import math if not data_stream: return [] # Sort data_stream by timestamp data_stream.sort() processed_data = [] current_interval_start = 0 current_interval_end = current_interval_start + interval while data_stream: interval_data = [] while data_stream and data_stream[0][0] < current_interval_end: interval_data.append(data_stream.pop(0)) if interval_data: values = [data_point[1] for data_point in interval_data] processed_data.append({ \'start_time\': current_interval_start, \'end_time\': current_interval_end, \'count\': len(values), \'average\': sum(values) / len(values), \'min_value\': min(values), \'max_value\': max(values) }) current_interval_start = current_interval_end current_interval_end += interval return processed_data"},{"question":"In this problem, you are required to write a Python function `word_count_distribution` that takes a string as input and returns a dictionary with the counts of each word in the string. The words should be case-insensitive, meaning \'Apple\' and \'apple\' should be considered the same word. You are required to use the `re` library for regular expression operations. Function signature: ```python def word_count_distribution(input_string: str) -> dict ``` 1. **Normalize the string** by converting all characters to lowercase. 2. Use regular expressions to extract words from the input string. Words are sequences of alphabets (a-z, A-Z). 3. Count the occurrences of each word and store them in a dictionary. 4. The keys of the dictionary should be the words and the values should be their counts. 5. Ensure the function handles edge cases like empty strings or strings with no valid words gracefully. Example: ```python input_string = \\"Hello, hello! How are you? Are you fine? Fine, fine, fine.\\" output = word_count_distribution(input_string) print(output) # Output: {\'hello\': 2, \'how\': 1, \'are\': 2, \'you\': 2, \'fine\': 4} ```","solution":"import re from collections import defaultdict def word_count_distribution(input_string: str) -> dict: Returns a dictionary with the count of each word in the input string. # Normalize the string to lowercase normalized_string = input_string.lower() # Extract words using regular expression words = re.findall(r\'b[a-z]+b\', normalized_string) # Count the occurrences of each word word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"You are tasked with writing a Python function that processes flight booking log files to determine the most frequently booked flight route each day. The log files are organized by date and contain entries that log flight bookings in a specific format. Each log file contains lines in the following format: ``` [time] BOOKED [route] ``` Where: - `[time]` is a string representing the time of booking in `HH:MM` format. - `[route]` is a string representing the flight route in the format `Origin-Destination`. Your task is to write a function `most_frequent_route(path)` that: 1. Takes one parameter `path` (a string representing the directory path containing the log files). 2. Reads through all the log files in the specified directory. 3. Counts the frequency of each route in the log files for each day. 4. Identifies the most frequently booked route for each day. 5. Returns a dictionary where the keys are dates (extracted from the log file names in `YYYY-MM-DD.log` format) and the values are the most frequently booked route for that day. **Example:** If the directory contains two log files: - `2023-09-01.log` with lines: ``` [08:15] BOOKED NY-LA [09:30] BOOKED LA-NY [10:00] BOOKED NY-LA ``` - `2023-09-02.log` with lines: ``` [07:45] BOOKED SF-CHI [08:30] BOOKED SF-CHI [09:00] BOOKED LA-SF ``` The function should return: ```python { \'2023-09-01\': \'NY-LA\', \'2023-09-02\': \'SF-CHI\' } ``` **Constraints:** - All log files are correctly formatted. - You may assume there is a log file for each day in the directory.","solution":"import os from collections import defaultdict def most_frequent_route(path): Returns the most frequently booked route for each day from log files in the given directory. :param path: Directory path containing log files. :return: Dictionary with dates as keys and most frequently booked routes as values. result = {} for filename in os.listdir(path): if filename.endswith(\\".log\\"): date = filename[:-4] route_count = defaultdict(int) full_path = os.path.join(path, filename) with open(full_path, \'r\') as file: lines = file.readlines() for line in lines: parts = line.strip().split(\\" BOOKED \\") if len(parts) == 2: route = parts[1] route_count[route] += 1 most_frequent = max(route_count, key=route_count.get) result[date] = most_frequent return result"},{"question":"You are required to implement a class named `CircularQueue` that represents a circular (or ring) buffer. A circular queue is a fixed-size data structure that behaves as if the ends of the queue are connected, which allows elements to be efficiently enqueued to the back and dequeued from the front. **Class Signature:** ```python class CircularQueue: def __init__(self, size: int): pass def enqueue(self, item: int) -> bool: pass def dequeue(self) -> int: pass def front(self) -> int: pass def rear(self) -> int: pass def is_empty(self) -> bool: pass def is_full(self) -> bool: pass ``` # Description of Methods: - `__init__(self, size: int)`: The constructor initializes the circular queue with a given fixed size. - `enqueue(self, item: int) -> bool`: Adds `item` to the back of the queue. Returns `True` if the operation is successful, or `False` if the queue is full. - `dequeue(self) -> int`: Removes and returns the front item from the queue. Returns `-1` if the queue is empty. - `front(self) -> int`: Returns the front item from the queue without removing it. Returns `-1` if the queue is empty. - `rear(self) -> int`: Returns the rear item from the queue without removing it. Returns `-1` if the queue is empty. - `is_empty(self) -> bool`: Returns `True` if the queue is empty, or `False` otherwise. - `is_full(self) -> bool`: Returns `True` if the queue is full, or `False` otherwise. # Example Usage: ```python cq = CircularQueue(3) print(cq.enqueue(10)) # Expected output: True print(cq.enqueue(20)) # Expected output: True print(cq.enqueue(30)) # Expected output: True print(cq.enqueue(40)) # Expected output: False (queue is full) print(cq.front()) # Expected output: 10 print(cq.rear()) # Expected output: 30 print(cq.dequeue()) # Expected output: 10 print(cq.enqueue(40)) # Expected output: True print(cq.rear()) # Expected output: 40 ``` # Constraints and Notes: 1. The circular queue should efficiently handle wrap-around scenarios, where the end of the queue is logically connected to the beginning. 2. The methods should work in constant time, O(1). 3. The queue should only accept integers as valid input items.","solution":"class CircularQueue: def __init__(self, size: int): self.size = size self.queue = [None] * size self.front_index = 0 self.rear_index = -1 self.count = 0 def enqueue(self, item: int) -> bool: if self.is_full(): return False self.rear_index = (self.rear_index + 1) % self.size self.queue[self.rear_index] = item self.count += 1 return True def dequeue(self) -> int: if self.is_empty(): return -1 item = self.queue[self.front_index] self.queue[self.front_index] = None self.front_index = (self.front_index + 1) % self.size self.count -= 1 return item def front(self) -> int: if self.is_empty(): return -1 return self.queue[self.front_index] def rear(self) -> int: if self.is_empty(): return -1 return self.queue[self.rear_index] def is_empty(self) -> bool: return self.count == 0 def is_full(self) -> bool: return self.count == self.size"},{"question":"Given a JSON file named `\\"Library_Items.json\\"` that contains a variety of entries about different items available at a library, you are required to write a function named `find_item_info(search_term)` using the `json` library in Python. The function, `find_item_info`, should: 1. Open the JSON file using the `json.load()` method and load the data into a Python dictionary. 2. Search for a specific item using the `search_term` provided and print all information related to that item. 3. Prompt the user to input a specific attribute of the item to see more detailed information about that attribute. **Requirements**: - Use the `json.load()` method to read the JSON file into a Python dictionary. - Use dictionary operations to manipulate the data. **Function Signature**: ```python def find_item_info(search_term: str): pass ``` **Example**: ```python # Assuming \'Library_Items.json\' contains a list of dictionaries where each dictionary represents an item find_item_info(\\"12345\\") # where \\"12345\\" is an item ID ``` **Output**: ``` # The function will print all information related to the item with ID \\"12345\\" # Then prompt for a specific attribute to print more detailed information about that attribute ``` **JSON File Format**: ```json [ { \\"id\\": \\"12345\\", \\"title\\": \\"Book Title\\", \\"author\\": \\"Author Name\\", \\"published_year\\": 2020, \\"genre\\": \\"Fiction\\", \\"available\\": true, \\"location\\": \\"Aisle 4, Shelf 3\\" }, ... ] ``` **JSON Content Example**: ```json [ { \\"id\\": \\"12345\\", \\"title\\": \\"Book Title\\", \\"author\\": \\"Author Name\\", \\"published_year\\": 2020, \\"genre\\": \\"Fiction\\", \\"available\\": true, \\"location\\": \\"Aisle 4, Shelf 3\\" }, { \\"id\\": \\"67890\\", \\"title\\": \\"Another Book\\", \\"author\\": \\"Another Author\\", \\"published_year\\": 2018, \\"genre\\": \\"Non-Fiction\\", \\"available\\": false, \\"location\\": \\"Aisle 7, Shelf 2\\" } ] ```","solution":"import json def find_item_info(search_term: str): Searches for library item based on search_term and allows user to get specific attribute detail. Args: search_term (str): The item ID to search for. try: with open(\\"Library_Items.json\\", \\"r\\") as file: library_items = json.load(file) item_found = None for item in library_items: if item[\\"id\\"] == search_term: item_found = item break if item_found: print(\\"Item found:\\") for key, value in item_found.items(): print(f\\"{key}: {value}\\") attribute = input(\\"Enter the attribute you want to know more about: \\").strip() if attribute in item_found: print(f\\"{attribute}: {item_found[attribute]}\\") else: print(f\\"{attribute} attribute not found in the item.\\") else: print(f\\"No item found with ID {search_term}.\\") except FileNotFoundError: print(\\"The file Library_Items.json does not exist.\\") except json.JSONDecodeError: print(\\"Error decoding the JSON file.\\")"},{"question":"# Problem Statement You are given a string of characters and a list of words. Your task is to write a function called `find_words_from_chars` that finds all the words from the list that can be formed using the given string of characters. Each character from the string can be used only once to form a word. # Function Signature ```python def find_words_from_chars(chars: str, words: list) -> list: pass ``` # Input 1. **chars**: A string of characters that can be used to form words. Example: ```python chars = \\"atach\\" ``` 2. **words**: A list of words. Example: ```python words = [\\"cat\\", \\"hat\\", \\"tree\\"] ``` # Output A list of words that can be formed from the given string of characters. # Constraints - Each character in the `chars` string can be used only once per word. - The function should return the words in the same order as they appear in the input list. # Example Given the input: ```python chars = \\"atach\\" words = [\\"cat\\", \\"hat\\", \\"tree\\"] ``` After calling the function, `find_words_from_chars(chars, words)`, the expected output is: ```python [\\"cat\\", \\"hat\\"] ``` # Notes - The function should be case-sensitive, meaning \'A\' and \'a\' are different characters. - If no words can be formed, return an empty list.","solution":"def find_words_from_chars(chars: str, words: list) -> list: from collections import Counter # Create a counter for the characters in `chars` char_count = Counter(chars) def can_form_word(word): # Create a counter for the characters in the word word_count = Counter(word) # Check if word can be formed using the chars for ch in word_count: if word_count[ch] > char_count[ch]: return False return True # Filter the words that can be formed result = [word for word in words if can_form_word(word)] return result"},{"question":"You are given a function `calculate_averages` that takes a list of dictionaries representing students and their grades, and returns a dictionary mapping each student\'s name to their average grade. However, the function currently does not handle edge cases very well and is not optimized for performance. # Requirements: - Each dictionary in the input list has the following structure: - `\\"name\\"` (string): The name of the student. - `\\"grades\\"` (list of integers): A list of grades the student has received. - The function should calculate the average grade for each student accurately. - Ensure the function handles edge cases where a student might have no grades. - The function should return a dictionary where keys are student names, and values are their respective average grades rounded to two decimal places. # Function Signature: ```python def calculate_averages(students: list) -> dict: # Your implementation here ``` # Example: Assume you have the following list of student records in `students`: ```python [ {\\"name\\": \\"Alice\\", \\"grades\\": [85, 90, 78]}, {\\"name\\": \\"Bob\\", \\"grades\\": [92, 88]}, {\\"name\\": \\"Charlie\\", \\"grades\\": []} ] ``` The function should return a dictionary that looks like this: ```python { \\"Alice\\": 84.33, \\"Bob\\": 90.00, \\"Charlie\\": 0.00 } ``` # Instructions: 1. Use the built-in functions and techniques to handle the calculations efficiently. 2. Ensure the function is well-documented and includes type hints for better readability and maintainability.","solution":"def calculate_averages(students: list) -> dict: Calculate the average grade for each student. Parameters: students (list): A list of dictionaries, each containing a student\'s name and list of grades. Returns: dict: A dictionary mapping each student\'s name to their average grade rounded to two decimal places. If a student has no grades, their average is 0.00. result = {} for student in students: grades = student[\\"grades\\"] if grades: average = sum(grades) / len(grades) else: average = 0.0 result[student[\\"name\\"]] = round(average, 2) return result"},{"question":"Create a function that determines if a given string is an isogram. An isogram is a word that has no repeating letters, consecutive or non-consecutive. The function should ignore case and non-letter characters. If the input is not a string, the function should raise a ValueError. The function should return True if the string is an isogram, and False otherwise. The function should output with: bool: True if the given string is an isogram, False otherwise. You should write self-contained code starting with: ``` def is_isogram(input_string): ```","solution":"def is_isogram(input_string): Determines if the given string is an isogram. Ignores case and non-letter characters. Args: input_string (str): The string to check. Returns: bool: True if the string is an isogram, False otherwise. if not isinstance(input_string, str): raise ValueError(\\"Input must be a string\\") clean_string = \'\'.join(char.lower() for char in input_string if char.isalpha()) return len(set(clean_string)) == len(clean_string)"},{"question":"You are asked to write a function that manages booking and identifying available time slots for a conference room. The booking system should be able to handle multiple bookings and allow checking for available slots. The function signature is as follows: ```python def manage_bookings(bookings: List[Tuple[str, str]]) -> List[str]: ``` Requirements: 1. The function should take one argument: - `bookings` (List[Tuple[str, str]]): A list of tuples, with each tuple containing two strings representing the start and end time of a booking in the format `HH:MM` (24-hour format). For example: `[(\\"09:00\\", \\"11:00\\")]`. 2. The function should: - Validate the input bookings to ensure that the end time is always later than the start time within the same day. - Sort the bookings by the start time. 3. To identify available slots, the conference room is available from `\'09:00\'` to `\'18:00\'`. 4. Return a list of available time slots (also in `HH:MM` format) between the bookings. Example: Input: ```python bookings = [(\\"10:00\\", \\"11:30\\"), (\\"12:30\\", \\"14:00\\"), (\\"15:00\\", \\"16:30\\")] ``` Output: ```python [\\"09:00-10:00\\", \\"11:30-12:30\\", \\"14:00-15:00\\", \\"16:30-18:00\\"] ``` Constraints: - You can assume the input time format will always be valid and in the 24-hour format as described. - Times should be returned in the `HH:MM` format and in chronological order. - The function should handle cases where there might be no bookings or booking times that potentially span the entire period without any availability.","solution":"from typing import List, Tuple def manage_bookings(bookings: List[Tuple[str, str]]) -> List[str]: # Validate and sort bookings by start time bookings.sort(key=lambda x: x[0]) # Define the working hours: 09:00 to 18:00 start_of_day = \\"09:00\\" end_of_day = \\"18:00\\" available_slots = [] current_time = start_of_day for start, end in bookings: # Add available slot before the current booking starts if current_time < start: available_slots.append(f\\"{current_time}-{start}\\") # Update current_time to the end of the current booking current_time = max(current_time, end) # Add available slot after the last booking ends, if any if current_time < end_of_day: available_slots.append(f\\"{current_time}-{end_of_day}\\") return available_slots"},{"question":"You are required to develop a function `rotate_matrix(matrix: List[List[int]]) -> None` which performs an in-place rotation of a given NxN matrix by 90 degrees in the clockwise direction. Here are the steps your function needs to perform: 1. Transpose the matrix: Convert all rows to columns and columns to rows. 2. Reverse each row: After transposing, reverse each row to complete the rotation. You should utilize only constant space outside the given NxN matrix; altering the input matrix in place to achieve the rotation. **Function signature:** ```python def rotate_matrix(matrix: List[List[int]]) -> None: ``` **Example:** Given the following 3x3 matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After calling `rotate_matrix(matrix)`, the matrix should become: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Constraints:** - The matrix is always NxN, where N is a positive integer. - You can assume that the elements in the matrix are integers. This problem is designed to help you understand how to manipulate 2D arrays in Python and perform transformations using in-place algorithms.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the given NxN matrix by 90 degrees clockwise in place. n = len(matrix) # Step 1: Transpose the matrix. for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row. for i in range(n): matrix[i].reverse()"},{"question":"You are asked to develop a Python function that processes JSON data representing a collection of books and authors. Each book entry consists of the book\'s title, the author\'s name, the publication year, and an optional ISBN number. Some entries might have missing fields, and your job is to clean and normalize this data. Your task is to write a function named `normalize_books` that accepts one argument: - `books_json` (str): A JSON string containing a list of dictionaries representing books. The function should: 1. Parse the input JSON string to a Python list of dictionaries. 2. Ensure that each dictionary contains the keys: `title`, `author`, `year`, and `ISBN`. - For any missing field, substitute the value with `None`. 3. Sort the list of dictionaries by the author\'s name, and then by the publication year. 4. Return the cleaned and sorted list of dictionaries. Constraints: - The input string is a valid JSON. - Each dictionary in the list could have `title`, `author`, `year`, and `ISBN` keys, but any of these keys might be missing. Function Signature: ```python def normalize_books(books_json: str) -> list: pass ``` # Example Input: ```json [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author X\\", \\"year\\": 2001}, {\\"title\\": \\"Book B\\", \\"year\\": 1999, \\"ISBN\\": \\"123-456-789\\"}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author Z\\"} ] ``` Output: ```python [ {\\"title\\": \\"Book B\\", \\"author\\": None, \\"year\\": 1999, \\"ISBN\\": \\"123-456-789\\"}, {\\"title\\": \\"Book A\\", \\"author\\": \\"Author X\\", \\"year\\": 2001, \\"ISBN\\": None}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author Z\\", \\"year\\": None, \\"ISBN\\": None} ] ```","solution":"import json def normalize_books(books_json: str) -> list: books = json.loads(books_json) for book in books: if \'title\' not in book: book[\'title\'] = None if \'author\' not in book: book[\'author\'] = None if \'year\' not in book: book[\'year\'] = None if \'ISBN\' not in book: book[\'ISBN\'] = None # Sort primarily by author, secondarily by year sorted_books = sorted(books, key=lambda x: (x[\'author\'] or \'\', x[\'year\'] or float(\'inf\'))) return sorted_books"},{"question":"You need to implement a function `longest_substring_k_distinct` that finds the length of the longest substring with at most `k` distinct characters from a given input string. For this task, you will use a sliding window technique to solve the problem efficiently. The function `longest_substring_k_distinct` should accept the following parameters: - `s`: a string representing the input text. - `k`: an integer representing the maximum number of distinct characters. The function should return: - `length`: an integer representing the length of the longest substring with at most `k` distinct characters. The function\'s structure is as follows: ```python def longest_substring_k_distinct(s, k): Find the length of the longest substring with at most k distinct characters Parameters ---------- s : str The input string. k : int The maximum number of distinct characters allowed in the substring. Returns ------- int Length of the longest substring with at most k distinct characters. pass # Your implementation here ``` # Example Usage: ```python # Example data s = \\"eceba\\" k = 2 length = longest_substring_k_distinct(s, k) print(f\\"Length of longest substring with at most {k} distinct characters: {length}\\") # Example output for the given input: # Length of longest substring with at most 2 distinct characters: 3, because \\"ece\\" is the longest substring with at most 2 distinct characters. ``` # Constraints: - The input string will have a length between 1 and 10^5. - The integer `k` will be between 1 and 10^5. # Notes: - Make sure your implementation handles edge cases such as the input string being empty or `k` being 0. - The solution should work efficiently with respect to time complexity, ideally O(n), where n is the length of the string.","solution":"def longest_substring_k_distinct(s, k): Find the length of the longest substring with at most k distinct characters Parameters ---------- s : str The input string. k : int The maximum number of distinct characters allowed in the substring. Returns ------- int Length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 char_map = {} left = 0 max_len = 0 for right in range(len(s)): if s[right] in char_map: char_map[s[right]] += 1 else: char_map[s[right]] = 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are required to develop a function named `optimize_inventory` that optimizes the inventory levels of a store based on sales data, seasonal factors, and a predefined restocking algorithm. The function should utilize the Pandas library for data manipulation and the Numpy library for numerical operations. Specifically, your task is to: 1. Analyze the sales data to calculate the average daily sales for each product. 2. Adjust the inventory levels by accounting for seasonal factors. 3. Implement a restocking strategy to ensure that inventory levels are optimal. 4. Return the optimized inventory data and the total restocking cost. Your function should have the following signature: ```python def optimize_inventory(sales_data, product_list, seasonal_factors, restocking_costs): Optimize inventory levels and return the updated inventory and total restocking cost. Parameters: - sales_data: pd.DataFrame - The sales data with columns [\'date\', \'product\', \'units_sold\'] - product_list: list - List of product names to optimize - seasonal_factors: dict - Dictionary with product names as keys and their seasonal factor as values - restocking_costs: dict - Dictionary with product names as keys and their restocking cost per unit as values Returns: - optimized_inventory: pd.DataFrame - The optimized inventory data - total_restocking_cost: float - The computed total restocking cost ``` Additionally, ensure that you meet the following criteria: 1. Use the Pandas library to extract and process the relevant sales data. 2. Calculate the average daily sales for each product in the `product_list`. 3. Adjust the calculated sales using the `seasonal_factors` for each product. 4. Implement a restocking algorithm that subtracts the adjusted sales from a base inventory level of 100 units per product and computes the restocking requirements. 5. Calculate the total restocking cost using the `restocking_costs`. Here\'s a brief on the dataset and parameters: - The `sales_data` DataFrame contains multiple rows per product with daily sales records. - The `product_list` includes the names of the products you need to optimize. - The `seasonal_factors` dictionary provides a positive multiplier for increasing or reducing sales based on the season. - The `restocking_costs` dictionary provides the cost to restock one unit of each product.","solution":"import pandas as pd import numpy as np def optimize_inventory(sales_data, product_list, seasonal_factors, restocking_costs): Optimize inventory levels and return the updated inventory and total restocking cost. Parameters: - sales_data: pd.DataFrame - The sales data with columns [\'date\', \'product\', \'units_sold\'] - product_list: list - List of product names to optimize - seasonal_factors: dict - Dictionary with product names as keys and their seasonal factor as values - restocking_costs: dict - Dictionary with product names as keys and their restocking cost per unit as values Returns: - optimized_inventory: pd.DataFrame - The optimized inventory data - total_restocking_cost: float - The computed total restocking cost # Calculate the average daily sales for each product sales_data[\'date\'] = pd.to_datetime(sales_data[\'date\']) avg_daily_sales = ( sales_data.groupby(\'product\')[\'units_sold\'] .mean() .reindex(product_list) ) # Adjust sales by seasonal factors adjusted_sales = avg_daily_sales * pd.Series(seasonal_factors) # Set a base inventory level base_inventory = 100 # Calculate the restocking requirements restocking_requirements = base_inventory - adjusted_sales # Ensure no negative restocking (i.e., no need to reduce inventory below current level) restocking_requirements = restocking_requirements.clip(lower=0) # Calculate restocking cost total_restocking_cost = ( restocking_requirements * pd.Series(restocking_costs) ).sum() # Prepare optimized inventory DataFrame optimized_inventory = pd.DataFrame({ \'product\': product_list, \'avg_daily_sales\': avg_daily_sales, \'adjusted_sales\': adjusted_sales, \'restocking_requirements\': restocking_requirements }).reset_index(drop=True) return optimized_inventory, total_restocking_cost"},{"question":"You are tasked with creating a function that parses a string representation of a polynomial and evaluates it for a given value of `x`. The function will be called `evaluate_polynomial`. The polynomial strings can contain coefficients and powers of `x`, and terms are separated by the `+` or `-` sign. # Function Signature ```python def evaluate_polynomial(polynomial: str, x: float) -> float: # Your code here ``` # Parameters - `polynomial`: A string representing the polynomial, e.g., \\"3x^2 + 2x - 5\\". - `x`: A float value at which to evaluate the polynomial. # Instructions 1. Parse the string to extract coefficients and exponents of each term in the polynomial. 2. Evaluate each term for the given value of `x`. 3. Sum the values of all terms to get the final result. # Considerations - The polynomial will be provided in a standard format, with coefficients (including 1) and exponents clearly specified (e.g., `x^3` for ( x^3 ), `-4x` for (-4x^1), `7` for ( 7 )). - Coefficients of 1 and -1 will be explicitly written (e.g., `1x^2`, `-1x`). - Handle polynomials with positive and negative coefficients and varying levels of complexity. - Ensure correct parsing of terms with different signs and exponents. # Example Usage ```python evaluate_polynomial(\\"3x^2 + 2x - 5\\", 2) # Output: 9 evaluate_polynomial(\\"4x^3 - x^2 + 7x + 1\\", -1) # Output: -11 ``` # Requirements - Use string manipulation techniques to parse the polynomial. - Implement error handling for invalid polynomial strings.","solution":"import re def evaluate_polynomial(polynomial: str, x: float) -> float: Evaluates the given polynomial string for a provided value of x. # Parse the polynomial string and separate terms terms = re.findall(r\'[+-]?s*d*x(?:^d+)?|[+-]?s*d+\', polynomial.replace(\' \', \'\')) result = 0 for term in terms: coefficient = 0 exponent = 0 # Find the coefficient and exponent in the term matches = re.match(r\'([+-]?d*)(x(?:^(d+))?)?\', term) if matches: # Retrieve groups coef_str = matches.group(1) x_term = matches.group(2) exp_str = matches.group(3) # Determine coefficient if coef_str == \'\' or coef_str == \'+\': coefficient = 1 elif coef_str == \'-\': coefficient = -1 else: coefficient = int(coef_str) # Determine exponent if x_term: if exp_str: exponent = int(exp_str) else: exponent = 1 else: exponent = 0 result += coefficient * (x ** exponent) return result"},{"question":"You are tasked with developing a function that will calculate the total cost of items in a shopping cart, considering the possibility of discounts on certain items. The purpose of this function is to simulate a simple checkout process where possible discounts are applied correctly. **Function Description** You need to implement the function `calculate_total(cart, discounts)` which: - Takes two input arguments: - `cart`: a list of tuples, where each tuple contains the item name as a string and its price as a float. - `discounts`: a dictionary where the key is the item name (string) and the value is the discount percentage (float) to be applied to that item (e.g., 10.0 means a 10% discount). - Returns the total cost as a float after applying defined discounts. The function should apply the discount to each applicable item in the cart before summing up the total. **Example Usage** ```python cart = [(\'apple\', 1.5), (\'banana\', 2.0), (\'milk\', 3.5)] discounts = {\'apple\': 10.0, \'milk\': 20.0} total = calculate_total(cart, discounts) print(\\"Total cost after discounts:\\", total) ``` **Expected Output** ``` Total cost after discounts: 5.8 ``` In this example: - The `apple` originally costs 1.5. With a 10% discount, it costs 1.35. - The `banana` has no discount and remains at 2.0. - The `milk` originally costs 3.5. With a 20% discount, it costs 2.8. Therefore, the total cost after applying the discounts is 1.35 + 2.0 + 2.8 = 6.15.","solution":"def calculate_total(cart, discounts): Calculates the total cost of items in the cart after applying possible discounts. Parameters: cart (list): A list of tuples, where each tuple contains an item name (str) and its price (float). discounts (dict): A dictionary where the key is the item name (str) and the value is the discount percentage (float). Returns: float: The total cost after applying discounts. total = 0.0 for item, price in cart: discount = discounts.get(item, 0) # Get the discount or default to 0 if not found discount_amount = price * (discount / 100) final_price = price - discount_amount total += final_price return total"},{"question":"Parsing mathematical expressions and computing their result is a common task in many applications. For this problem, you will write a function `evaluate_expression(expression: str) -> int`, that takes in a string `expression` which contains a mathematical expression with non-negative integers and the operators `+`, `-`, `*`, `/` (integer division), and returns the resulting value of the expression. The expression will not contain any parentheses and will be well-formed. You must manually parse the string without using the `eval` function. You should respect operator precedence, meaning that `*` and `/` should be evaluated before `+` and `-`. Requirements: 1. Manual parsing and evaluation of the string. 2. Respect operator precedence. Example: ```python expression = \\"3+5*2\\" result = evaluate_expression(expression) print(result) # Output: 13 expression = \\"10+2*6\\" result = evaluate_expression(expression) print(result) # Output: 22 expression = \\"100/2-3\\" result = evaluate_expression(expression) print(result) # Output: 47 expression = \\"4*5/2\\" result = evaluate_expression(expression) print(result) # Output: 10 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates the given mathematical expression respecting operator precedence and returns the resulting value. def apply_operator(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] operands = [] i = 0 while i < len(expression): if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 operands.append(val) i -= 1 elif expression[i] in \'+-*/\': while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operands, operators.pop()) operators.append(expression[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"You are building a basic authentication system for a web application. Part of this system requires validating user passwords according to specific rules. Write a function named `validate_password` that performs the following: 1. Accepts a single string input which is the password to be validated. 2. Ensure the password meets the following criteria: - At least 8 characters long. - Contains at least one uppercase letter. - Contains at least one lowercase letter. - Contains at least one numerical digit. - Contains at least one special character from the set `!@#%^&*()-_=+`. 3. If the password meets all the criteria, return the string \\"Password is valid\\". 4. If it fails to meet any of the criteria, return the string \\"Password is invalid\\". **Requirements:** - You must handle the string manipulations and checks without using any external libraries. - Ensure that the function accurately evaluates each of the password criteria distinctly.","solution":"def validate_password(password): Validates the given password according to specific rules: - At least 8 characters long - Contains at least one uppercase letter - Contains at least one lowercase letter - Contains at least one numerical digit - Contains at least one special character from the set !@#%^&*()-_=+ Parameters: password (str): The password string to validate Returns: str: \\"Password is valid\\" if the password meets all criteria, otherwise \\"Password is invalid\\" if len(password) < 8: return \\"Password is invalid\\" has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_special = any(char in \\"!@#%^&*()-_=+\\" for char in password) if has_upper and has_lower and has_digit and has_special: return \\"Password is valid\\" else: return \\"Password is invalid\\""},{"question":"Analyze a given list of integers to find all unique triplets that sum up to zero (0). The solution set must not contain duplicate triplets. Finally, return the list of triplets. Your implementation should: - Take a list of integers as input. - Ensure there are no duplicate triplets in the output. - Return a list of unique triplets that sum up to zero. You should write self-contained code starting with: ``` def find_triplets(nums): ```","solution":"def find_triplets(nums): Returns a list of unique triplets in the list nums that sum up to zero. nums.sort() result = [] length = len(nums) for i in range(length - 2): # Skip duplicates for the first element if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) # Skip duplicates for the second element while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicates for the third element while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"Your task is to create a function named `generate_calendar` that produces a calendar for a given month and year. The function should use the libraries `calendar` and `datetime`. The function should display the calendar in a simple, readable text format on the console, highlighting the current day (if it falls within the specified month and year) with square brackets. Here are the requirements: 1. Use the `calendar.TextCalendar` class for creating the text calendar. 2. Determine the current day using the `datetime.datetime.now` method. 3. Replace the current day with the format `[day]` in the printed calendar if it falls within the specified month and year. # Constraints - The input year will be a positive integer. - The input month will be an integer between 1 and 12. # Function Signature ```python def generate_calendar(year: int, month: int): pass ``` # Example For instance, if today\'s date is September 15, 2023, and the function is called as follows: ```python generate_calendar(2023, 9) ``` The output should resemble: ``` September 2023 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [15] 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ``` If the function is called with a different month, such as: ```python generate_calendar(2023, 8) ``` And the output might be: ``` August 2023 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ``` (Note: `[15]` is not highlighted as it is outside the specified month) Ensure your function works correctly even if the current day does not fall within the given month.","solution":"import calendar import datetime def generate_calendar(year: int, month: int): # Get current day now = datetime.datetime.now() current_day = now.day if now.year == year and now.month == month else None # Create a text calendar cal = calendar.TextCalendar(calendar.MONDAY) cal_str = cal.formatmonth(year, month) # Highlight current day if within the correct month and year if current_day: cal_str = cal_str.replace(f\' {current_day:2} \', f\'[{current_day:2}]\') print(cal_str)"},{"question":"In a given 2D grid of dimensions `m x n`, there are obstacles represented by -1, and empty spaces represented by 0. There is a robot starting at a given position (sx, sy) in the grid, and your task is to find out the minimum number of steps required for the robot to reach a target position (tx, ty), without moving into any obstacles or going out of the grid boundaries. The robot can only move up, down, left, or right by one step at a time. **Task**: Write a function `min_steps(grid, start, target)` that computes the minimum number of steps required for the robot to reach the target position starting from the start position. If there is no valid path from the start to the target, return -1. **Function Signature:** ```python def min_steps(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: ``` **Parameters:** - `grid`: A list of lists of integers where `grid[i][j]` can either be -1 (obstacle) or 0 (empty space). - `start`: A tuple `(sx, sy)` representing the starting position of the robot. - `target`: A tuple `(tx, ty)` representing the target position the robot needs to reach. **Returns:** - An integer representing the minimum number of steps required for the robot to reach the target position, or -1 if there is no valid path. **Example:** ```python grid = [ [0, 0, 0, 0], [0, -1, -1, 0], [0, 0, 0, 0], [0, 0, 0, -1], ] start = (0, 0) target = (3, 3) print(min_steps(grid, start, target)) # Output: 6 ``` In the above example, the function `min_steps` should calculate the minimum steps required for the robot to reach the target position without any obstacles. **Notes:** 1. Use a breadth-first search (BFS) approach to explore the shortest path. 2. Ensure to handle edge cases such as the starting position being the same as the target position. 3. Properly check for out-of-bound indices and obstacle positions to avoid invalid moves. 4. Efficiently manage the traversal process to ensure optimal performance in large grids.","solution":"from collections import deque from typing import List, Tuple def min_steps(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: if start == target: return 0 rows, cols = len(grid), len(grid[0]) visited = set() queue = deque([(start[0], start[1], 0)]) # (x, y, steps) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # UP, DOWN, LEFT, RIGHT while queue: x, y, steps = queue.popleft() if (x, y) in visited: continue visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: if (nx, ny) == target: return steps + 1 if grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are asked to implement a function `subarray_with_max_sum(arr)` that processes an array of integers and finds the subarray (contiguous elements) that has the maximum sum, and also returns the sum. The function should: 1. Iterate through the array to find the subarray with the maximum sum using Kadane\'s Algorithm. 2. Return both the maximum sum and the subarray that produces this sum. The function signature should be as follows: ```python def subarray_with_max_sum(arr): # Your code goes here ``` *Parameters:* - `arr`: A list of integers. *Returns:* A dictionary containing: - `max_sum`: The maximum sum of the subarray. - `subarray`: The subarray with the maximum sum as a list of integers. *Example:* ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] result = subarray_with_max_sum(arr) print(result) ``` Expected output: ```python { \'max_sum\': 6, \'subarray\': [4, -1, 2, 1] } ``` In this example: - The function identifies that the subarray `[4, -1, 2, 1]` has the maximum sum of `6` and returns both the sum and the subarray.","solution":"def subarray_with_max_sum(arr): Finds the subarray with the maximum sum using Kadane\'s Algorithm and returns both the sum and the subarray. if not arr: return {\\"max_sum\\": 0, \\"subarray\\": []} max_current = max_global = arr[0] start = end = s = 0 for i in range(1, len(arr)): if arr[i] > max_current + arr[i]: max_current = arr[i] s = i else: max_current += arr[i] if max_current > max_global: max_global = max_current start = s end = i return {\\"max_sum\\": max_global, \\"subarray\\": arr[start:end+1]}"},{"question":"You are required to write a function called `find_and_replace_in_files` that looks for a specific word in a list of files and replaces it with another word. This function will open each file, search for the target word, and replace it with the new word and then save the changes. If a file does not exist or cannot be read, the function should print an appropriate error message and continue processing the remaining files. Your function should have the following signature: ```python def find_and_replace_in_files(file_paths, target_word, replacement_word): ``` - `file_paths`: A list of strings, where each string is the path to a file that needs to be processed. - `target_word`: A string representing the word that needs to be replaced. - `replacement_word`: A string representing the word to replace the target word with. Your function should: 1. Open each file in the `file_paths` list for reading. 2. Handle any errors related to opening a file (e.g., if the file does not exist), by printing an appropriate error message and continuing with the next file. 3. Read the content of the file, replace all occurrences of the `target_word` with the `replacement_word`, and save the changes back to the file. 4. Ensure that the file is saved correctly after making the replacements. You are not allowed to use any third-party libraries for handling the files. Use standard Python file I/O operations.","solution":"def find_and_replace_in_files(file_paths, target_word, replacement_word): This function takes a list of file paths, finds and replaces a target word with a replacement word in each file, and saves the changes. Parameters: file_paths (list): List of file paths to process. target_word (str): Word to find and replace. replacement_word (str): Word to replace the target word with. for file_path in file_paths: try: # Open the file for reading with open(file_path, \'r\') as file: content = file.read() # Replace the target word with the replacement word new_content = content.replace(target_word, replacement_word) # Open the file for writing and save the new content with open(file_path, \'w\') as file: file.write(new_content) except IOError: print(f\\"Error: Could not read or write to file {file_path}\\") # Sample usage (uncomment to use): # file_paths = [\\"file1.txt\\", \\"file2.txt\\", \\"file3.txt\\"] # target_word = \\"findme\\" # replacement_word = \\"replaced\\" # find_and_replace_in_files(file_paths, target_word, replacement_word)"},{"question":"In this problem, you are required to write a function named `nearest_restaurant` that takes two arguments: a tuple representing the user\'s current coordinates (x, y) and a list of dictionaries where each dictionary contains information about a restaurant. Each dictionary has the keys: `\'name\'` (a string), `\'coordinates\'` (a tuple of x and y coordinates), and `\'rating\'` (a float representing the restaurant\'s rating out of 5). Your function should find the nearest restaurant to the user\'s location based on Euclidean distance. If there are multiple restaurants at the same minimum distance, select the one with the higher rating. If the ratings are also the same, choose any one of them. Here\'s the detailed breakdown of the required function: - **Function Name**: `nearest_restaurant` - **Input Parameters**: - A tuple of two floats (x, y) representing the user\'s current coordinates. - A list of dictionaries, each containing: - `\'name\'`: a string representing the name of the restaurant - `\'coordinates\'`: a tuple of two floats (x, y) representing the location of the restaurant - `\'rating\'`: a float representing the restaurant\'s rating out of 5 - **Output**: The function should return a string (the name of the nearest restaurant). You can assume that the input list will always contain at least one restaurant. Example Usage: ```python user_location = (3, 4) restaurants = [ {\'name\': \'Pizza Place\', \'coordinates\': (1, 2), \'rating\': 4.5}, {\'name\': \'Burger Joint\', \'coordinates\': (3, 7), \'rating\': 4.7}, {\'name\': \'Sushi Spot\', \'coordinates\': (3, 4), \'rating\': 4.2}, {\'name\': \'Taco Truck\', \'coordinates\': (3, 4.5), \'rating\': 4.5} ] print(nearest_restaurant(user_location, restaurants)) ``` Output should be: ```python \'Sushi Spot\' ```","solution":"import math def nearest_restaurant(user_location, restaurants): Returns the name of the nearest restaurant to the user\'s location. If multiple restaurants are at the same minimum distance, the one with the higher rating is chosen. If ratings are also the same, choose any one of them. Parameters: - user_location: tuple of (x, y) coordinates of the user\'s location. - restaurants: a list of dictionaries, each containing: \'name\': a string representing the name of the restaurant, \'coordinates\': a tuple of (x, y) coordinates of the restaurant, \'rating\': a float representing the restaurant\'s rating out of 5. Returns: - The name of the nearest restaurant as a string. def euclidean_distance(coord1, coord2): return math.sqrt((coord1[0] - coord2[0])**2 + (coord1[1] - coord2[1])**2) nearest = restaurants[0] # Start with the first restaurant as the nearest min_distance = euclidean_distance(user_location, nearest[\'coordinates\']) for restaurant in restaurants[1:]: distance = euclidean_distance(user_location, restaurant[\'coordinates\']) if distance < min_distance: nearest = restaurant min_distance = distance elif distance == min_distance: if restaurant[\'rating\'] > nearest[\'rating\']: nearest = restaurant elif restaurant[\'rating\'] == nearest[\'rating\']: nearest = restaurant # Can choose any as stated in the problem return nearest[\'name\']"},{"question":"Write a function called `process_grades(grades_list, grade_threshold)` that takes two arguments: a list `grades_list` and a float `grade_threshold`. Each element in `grades_list` is a tuple containing two elements: a string representing a student\'s name and a float representing their grade. The function should: 1. Check if the `grades_list` is empty. If it is, print \\"No grades to process.\\" and return. 2. Iterate through the `grades_list` and for each grade, check if it is greater than or equal to `grade_threshold`. 3. For grades that meet or exceed the threshold, add the student\'s name to a list called `passed_students`. 4. Print the total number of students who passed and list their names. Additionally, write another function called `save_passed_students(passed_students, filename)` that: 1. Takes the `passed_students` list and a string `filename` as arguments. 2. Writes the names of the passed students into a file named `filename`. Make sure to handle potential I/O exceptions when writing to the file. Here\'s an example of what the `grades_list` might look like: ```python grades_list = [ (\\"Alice\\", 85.0), (\\"Bob\\", 72.5), (\\"Charlie\\", 90.3), (\\"Diana\\", 68.2) ] ``` Example Usage: ```python grade_threshold = 70.0 process_grades(grades_list, grade_threshold) # should print the passed students\' names and the number of students who passed passed_students = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] save_passed_students(passed_students, \\"passed_students.txt\\") # should save names to the given file ```","solution":"def process_grades(grades_list, grade_threshold): Process the list of grades and determine which students have passed. Parameters: grades_list (list): A list of tuples where each tuple contains a student\'s name and their grade. grade_threshold (float): The threshold grade to determine if a student has passed. Returns: None if not grades_list: print(\\"No grades to process.\\") return passed_students = [] for name, grade in grades_list: if grade >= grade_threshold: passed_students.append(name) print(f\\"Total number of students who passed: {len(passed_students)}\\") print(\\"Names of students who passed:\\", \\", \\".join(passed_students)) def save_passed_students(passed_students, filename): Save the names of students who passed to a file. Parameters: passed_students (list): A list of names of students who passed. filename (str): The name of the file to save the names to. Returns: None try: with open(filename, \'w\') as file: for student in passed_students: file.write(student + \\"n\\") except IOError as e: print(f\\"An error occurred while writing to the file: {e}\\")"},{"question":"You are tasked with creating a function called `zigzag_conversion(s, n)`. The function should take a string `s` and an integer `n`, which represents the number of rows. The goal is to convert the string into a zigzag pattern on a given number of rows and then read line by line. For example, the string `\\"PAYPALISHIRING\\"` with `n = 3` would be written out in a zigzag pattern as follows: ``` P A H N A P L S I I G Y I R ``` And then read line by line, the output will be the concatenation of each row: `\\"PAHNAPLSIIGYIR\\"`. Your task is to implement the `zigzag_conversion(s, n)` function that performs this transformation. # Example ```python def zigzag_conversion(s, n): # Your solution goes here s = \\"PAYPALISHIRING\\" n = 3 result = zigzag_conversion(s, n) print(result) # Expected output: \\"PAHNAPLSIIGYIR\\" ``` # Constraints - `1 <= len(s) <= 1000` - `1 <= n <= len(s)`","solution":"def zigzag_conversion(s, n): if n == 1 or n >= len(s): return s rows = [\'\'] * n current_row = 0 going_down = False for char in s: rows[current_row] += char if current_row == 0 or current_row == n - 1: going_down = not going_down current_row += 1 if going_down else -1 return \'\'.join(rows)"},{"question":"# K-Means Clustering Implementation In this problem, you are required to implement a function called `kMeansClustering` that applies the K-Means clustering algorithm to a dataset and partitions the data into k clusters. The aim is to iteratively update the cluster centroids and data point assignments until convergence or a specified number of iterations is reached. **Function Signature:** ```python def kMeansClustering(data, k, max_iterations=100): # Your code here ``` - **Parameters:** - `data`: A list of data points, where each data point is represented as a list of floats. - `k`: An integer representing the number of clusters. - `max_iterations`: An optional integer representing the maximum number of iterations to run the algorithm (default is 100). **Instructions:** 1. Randomly initialize `k` centroids from the given data points. 2. For each data point, compute its Euclidean distance to all centroids and assign it to the nearest centroid. 3. Recompute the centroids by averaging the data points assigned to each centroid. 4. Repeat steps 2 and 3 until either the centroids no longer change (convergence) or the maximum number of iterations is reached. 5. Return the final centroids and the cluster assignments for each data point. **Euclidean Distance Calculation:** To compute the Euclidean distance between two points, use the following formula: [ text{distance}(p1, p2) = sqrt{sum_{i=1}^{n} (p1_i - p2_i)^2} ] **Example Usage:** Suppose we have: ```python data = [ [1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [10.0, 11.0], [11.0, 12.0], [12.0, 13.0] ] k = 2 ``` Calling `kMeansClustering(data, k)` should return the final centroids and cluster assignments after convergence or the specified number of iterations. # Example Output: For the above input, the function could return centroids and assignments similar to: ```python ( [[2.0, 3.0], [11.0, 12.0]], # Final centroids [0, 0, 0, 1, 1, 1] # Cluster assignments for each data point ) ``` Make sure to use the **`math.sqrt` function** from Python\'s math library to compute the Euclidean distance.","solution":"import random import math def euclidean_distance(p1, p2): return math.sqrt(sum((a - b) ** 2 for a, b in zip(p1, p2))) def kMeansClustering(data, k, max_iterations=100): n = len(data) if n == 0 or k <= 0 or k > n: raise ValueError(\\"Invalid input parameters\\") # Randomly initialize k centroids from the data centroids = random.sample(data, k) for _ in range(max_iterations): # Assign each data point to the nearest centroid clusters = [[] for _ in range(k)] for point in data: distances = [euclidean_distance(point, centroid) for centroid in centroids] nearest_centroid_index = distances.index(min(distances)) clusters[nearest_centroid_index].append(point) # Compute new centroids new_centroids = [] for cluster in clusters: if cluster: new_centroid = [sum(dim) / len(cluster) for dim in zip(*cluster)] new_centroids.append(new_centroid) else: # If a cluster is empty, reinitialize its centroid randomly new_centroids.append(random.choice(data)) # Check for convergence (if centroids do not change) if new_centroids == centroids: break centroids = new_centroids # Create final assignments assignments = [] for point in data: distances = [euclidean_distance(point, centroid) for centroid in centroids] nearest_centroid_index = distances.index(min(distances)) assignments.append(nearest_centroid_index) return centroids, assignments"},{"question":"A **Smith Number** is a composite number whose sum of digits is equal to the sum of the digits of its prime factors (excluding 1). For example, 4 is a Smith Number because its only prime factor is 2, and (2+0 = 2) matches the sum of its digits (4), and 22 is a Smith Number because (22 = 2 times 11) and (2 + 2 = 4) matches (2 + 1 + 1 = 4). You are required to write a Python function named `is_smith_number` that determines if a given number is a Smith Number or not. The prototype of the `is_smith_number` function should be: ```python def is_smith_number(number: int) -> bool: ``` # Requirements: 1. The function should determine if the number is composite. 2. Calculate the sum of the digits of the number. 3. Calculate the sum of the digits of the prime factors of the number. 4. The function should return `True` if the number is a Smith Number, otherwise `False`. # Example: ```python print(is_smith_number(4)) # Output: True print(is_smith_number(22)) # Output: True print(is_smith_number(23)) # Output: False ``` # Constraints: - The function parameter `number` is a positive integer greater than 1.","solution":"def is_smith_number(number: int) -> bool: from math import sqrt def sum_of_digits(n: int) -> int: Helper function to calculate the sum of digits of a number. return sum(int(digit) for digit in str(n)) def prime_factors(n: int) -> list: Helper function to generate prime factors of a number. factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n //= 2 # Check for other odd factors for i in range(3, int(sqrt(n))+1, 2): while n % i == 0: factors.append(i) n //= i # If n is a prime number and is greater than 2 if n > 2: factors.append(n) return factors # Check if the number is composite (has prime factors other than itself) factors = prime_factors(number) # If number is prime (only one factor which is the number itself) if len(factors) == 1 and factors[0] == number: return False # Calculate the sum of digits of the number sum_digits_number = sum_of_digits(number) # Calculate the sum of digits of the prime factors sum_digits_factors = sum(sum_of_digits(fac) for fac in factors) # Check if the two sums are equal return sum_digits_number == sum_digits_factors"},{"question":"You are asked to write a function that processes a list of sales records and returns the highest selling product. Each record in the input list is a string in the format `\\"<product_name>,<quantity_sold>\\"`. To find the highest selling product, the function needs to aggregate sales for each product and then determine which product has the highest total sales. Please write a function named `highest_selling_product` that follows these steps: 1. Parse each record to extract the product name and the quantity sold. 2. Aggregate the total sales for each product. 3. Identify the product with the highest total sales. 4. Return the name of the highest selling product. Function Signature: ```python def highest_selling_product(sales_records: list) -> str: ``` Example Input: ```python sales_records = [ \\"apple,10\\", \\"banana,5\\", \\"apple,20\\", \\"banana,10\\", \\"pear,7\\" ] ``` Expected Output: ```python \\"apple\\" ```","solution":"def highest_selling_product(sales_records: list) -> str: Returns the highest selling product. Parameters: sales_records (list): A list of sales records in the format \\"<product_name>,<quantity_sold>\\". Returns: str: The product name with the highest total sales. sales_aggregate = {} for record in sales_records: product_name, quantity_sold = record.split(\',\') quantity_sold = int(quantity_sold) if product_name in sales_aggregate: sales_aggregate[product_name] += quantity_sold else: sales_aggregate[product_name] = quantity_sold highest_selling_prodtct = max(sales_aggregate, key=sales_aggregate.get) return highest_selling_prodtct"},{"question":"Implement a function to perform string matching using the Knuth-Morris-Pratt (KMP) algorithm. Given a text `T` and a pattern `P`, the function should return a list of starting indices where the pattern `P` is found in the text `T`. # Function Specification ```python def knuth_morris_pratt(T, P): # your code here ``` # Parameters: - **T (str)**: The text in which to search for the pattern. - **P (str)**: The pattern to search for within the text. # Returns: - **list of int**: A list of starting indices where the pattern `P` is found in the text `T`. If the pattern is not found, return an empty list. # Example: Given the following text and pattern: ```python T = \\"ababcabcabababd\\" P = \\"ababd\\" ``` The output should be: ```python [10] ``` This is because the pattern `\\"ababd\\"` starts at index `10` in the text `T`. # Constraints: 1. The length of the text `T` and the pattern `P` will not exceed `1000`. 2. Both `T` and `P` will contain only lowercase alphabetical characters. # Goal: Your goal is to correctly implement the Knuth-Morris-Pratt (KMP) algorithm to efficiently search for `P` in `T`. The algorithm should preprocess the pattern to create a partial match table that will allow for efficient searching without backtracking in the text.","solution":"def knuth_morris_pratt(T, P): Implements the Knuth-Morris-Pratt (KMP) algorithm to search for a pattern P in text T. :param T: The text in which to search for the pattern. :param P: The pattern to search for within the text. :return: A list of starting indices where the pattern P is found in the text T. def compute_lps_array(P): Computes the Longest Prefix Suffix (LPS) array for a given pattern. :param P: The pattern for which to compute the LPS array. :return: The LPS array. lps = [0] * len(P) length = 0 i = 1 while i < len(P): if P[i] == P[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps # Preprocess the pattern to get the LPS array lps = compute_lps_array(P) indices = [] i = 0 # index for T j = 0 # index for P while i < len(T): if P[j] == T[i]: i += 1 j += 1 if j == len(P): indices.append(i - j) j = lps[j - 1] elif i < len(T) and P[j] != T[i]: if j != 0: j = lps[j - 1] else: i += 1 return indices"},{"question":"Write a function that generates all possible permutations of a given string and outputs them as a list. The function should be capable of handling strings with duplicate characters by ensuring that the output list contains only unique permutations. This will help deepen the understanding of permutations, recursion, and handling duplicates in collections. The function should raise the exception for: - ValueError: If the input is an empty string. The function should output: - list: A list containing all unique permutations of the input string. You should write self-contained code starting with: ``` def unique_permutations(input_string): ```","solution":"from itertools import permutations def unique_permutations(input_string): Generates all possible unique permutations of a given non-empty string. Raises: ValueError: If the input is an empty string. Returns: list: A list containing all unique permutations of the input string. if not input_string: raise ValueError(\\"Input string cannot be empty\\") # Generate all permutations and convert to a set to remove duplicates all_perms = set(permutations(input_string)) # Convert each permutation tuple to a string unique_perms_list = [\'\'.join(perm) for perm in all_perms] return unique_perms_list"},{"question":"Write a function `generate_3d_surface_plot` that generates a 3D surface plot of a given mathematical function utilizing the \\"dark_background\\" style from the `seaborn` library. The function should leverage the `matplotlib` library\'s 3D plot functionality. The `generate_3d_surface_plot` function will receive three arguments: - `X`: a 2D numpy array representing the x-coordinates. - `Y`: a 2D numpy array representing the y-coordinates. - `func`: a function that takes `X` and `Y` as arguments and returns the corresponding z-coordinates. The function should create a 3D surface plot with labeled axes, and appropriate customizations to make the plot visually appealing. **Define `generate_3d_surface_plot` to achieve the specified plot generation and customization.** **Requirements:** - Use `matplotlib.pyplot.figure` to create the figure. - Use `mpl_toolkits.mplot3d.Axes3D` to create the 3D axes. - Use `matplotlib.style.use` to apply the \\"dark_background\\" style. Here is an example of the `func` definition that could be used: 1. `func(X, Y)`: This function calculates a 2D Gaussian distribution for given `X` and `Y`: ```python def func(X, Y): sigma = 1.0 return np.exp(-(X**2 + Y**2) / (2 * sigma**2)) ```","solution":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D def generate_3d_surface_plot(X, Y, func): Generates a 3D surface plot for a given mathematical function using the dark_background style. Parameters: X (numpy.ndarray): A 2D array representing the x-coordinates. Y (numpy.ndarray): A 2D array representing the y-coordinates. func (callable): A function that takes X and Y as arguments and returns the corresponding z-coordinates. Returns: None # Ensure the dark_background style plt.style.use(\'dark_background\') # Create a figure fig = plt.figure() # Add 3D axis ax = fig.add_subplot(111, projection=\'3d\') # Compute Z from function Z = func(X, Y) # Plot data surf = ax.plot_surface(X, Y, Z, cmap=\'viridis\') # Set labels ax.set_xlabel(\'X axis\') ax.set_ylabel(\'Y axis\') ax.set_zlabel(\'Z axis\') # Add a color bar which maps values to colors fig.colorbar(surf) # Show plot plt.show()"},{"question":"You need to design a Python function named `find_anagrams` that takes two strings as input. The function should determine if the two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. **Important Specifications:** - The function should be case-insensitive, meaning it does not differentiate between \'a\' and \'A\'. - Whitespaces should be ignored while checking for anagrams. - Non-alphabetical characters should not be considered in the comparison. **Function Signature:** ```python def find_anagrams(str1: str, str2: str) -> bool: ``` **Example:** ```python str1 = \\"Listen\\" str2 = \\"Silent\\" print(find_anagrams(str1, str2)) # True str1 = \\"hello\\" str2 = \\"billion\\" print(find_anagrams(str1, str2)) # False ``` The function should return `True` if the input strings are anagrams of each other, and `False` otherwise. **Hints:** - Use Python string methods to normalize the case and remove non-alphabetical characters. - Consider using a dictionary to count the frequency of each letter.","solution":"def find_anagrams(str1: str, str2: str) -> bool: Determines if two given strings are anagrams, ignoring case, whitespaces, and non-alphabetical characters. def clean_string(s: str) -> str: # Filter only alphabetical characters and convert to lowercase return \'\'.join(filter(str.isalpha, s)).lower() # Clean both strings cleaned_str1 = clean_string(str1) cleaned_str2 = clean_string(str2) # Count the frequency of each character in both cleaned strings freq1 = {} freq2 = {} for char in cleaned_str1: if char in freq1: freq1[char] += 1 else: freq1[char] = 1 for char in cleaned_str2: if char in freq2: freq2[char] += 1 else: freq2[char] = 1 # Compare the frequency dictionaries return freq1 == freq2"},{"question":"You have a dataset containing information about books in a library. The dataset is comprised of the following dictionaries: `book_dict`, `author_dict`, `category_dict`, `rating_dict`, and `year_dict`. Your task is to organize this information into a `library_dict` where each entry represents a book keyed by its identifier. 1. The `book_dict` dictionary maps book IDs to book titles. 2. The `author_dict` dictionary maps book IDs to author names. 3. The `category_dict` dictionary maps book IDs to genre categories. 4. The `rating_dict` dictionary contains ratings of books, keyed by book ID. 5. The `year_dict` dictionary contains publication years of books, keyed by book ID. Your function `organize_library_data` should: - Populate the `library_dict`. - Handle cases where some data might be missing by using \\"Unknown\\" for missing strings and -1 for missing numerical values. - Use JSON library functions `json.dump` and `json.load` to save and load `library_dict` to and from a file named `library_output.json`. Implement the function `organize_library_data` which takes no arguments and performs the described operations. # Provided Code Snippet ```python for book_id in book_dict: # Initialize dictionary entry for the book library_dict[book_id] = { \\"title\\": book_dict[book_id], \\"author\\": author_dict.get(book_id, \\"Unknown\\"), \\"category\\": category_dict.get(book_id, \\"Unknown\\"), \\"rating\\": rating_dict.get(book_id, -1), \\"year\\": year_dict.get(book_id, -1) } # Save library_dict to \'library_output.json\' with open(\'library_output.json\', \'w\') as json_file: json.dump(library_dict, json_file) # Load library_dict from \'library_output.json\' with open(\'library_output.json\', \'r\') as json_file: library_dict = json.load(json_file) ``` # Requirements: 1. Implement the `organize_library_data` function. 2. Use the `json.dump` and `json.load` functions from the `json` module for handling `library_dict`. 3. Ensure the function follows the specifications provided.","solution":"import json def organize_library_data(): book_dict = { \'1\': \'1984\', \'2\': \'To Kill a Mockingbird\', \'3\': \'The Great Gatsby\' } author_dict = { \'1\': \'George Orwell\', \'2\': \'Harper Lee\' } category_dict = { \'1\': \'Dystopian\', \'2\': \'Classic Literature\', \'3\': \'Classic Literature\' } rating_dict = { \'1\': 4.17, \'2\': 4.27, \'3\': 3.91 } year_dict = { \'1\': 1949, \'2\': 1960 } library_dict = {} for book_id in book_dict: # Initialize dictionary entry for the book library_dict[book_id] = { \\"title\\": book_dict[book_id], \\"author\\": author_dict.get(book_id, \\"Unknown\\"), \\"category\\": category_dict.get(book_id, \\"Unknown\\"), \\"rating\\": rating_dict.get(book_id, -1), \\"year\\": year_dict.get(book_id, -1) } # Save library_dict to \'library_output.json\' with open(\'library_output.json\', \'w\') as json_file: json.dump(library_dict, json_file) # Load library_dict from \'library_output.json\' with open(\'library_output.json\', \'r\') as json_file: library_dict = json.load(json_file) return library_dict"},{"question":"In this problem, you will implement a function `find_common_elements(file_path1: str, file_path2: str) -> List[int]`. This function will: 1. Load two arrays from two separate JSON data files. 2. Find all elements that are present in both arrays. 3. Sort the common elements in ascending order. 4. Return the sorted list of common elements. Make use of the following libraries and their respective functionalities: - `json.load` to load the arrays from the files. The input to the function is: - `file_path1`: a string representing the path to the first JSON file that contains the first array. - `file_path2`: a string representing the path to the second JSON file that contains the second array. # Example: If the arrays in the JSON files were `[1, 2, 3, 4, 5]` and `[4, 5, 6, 7, 8]`, a potential run of your function might output `[4, 5]`. # Constraints: 1. The arrays in the JSON files each contain at least 1 and at most 100000 integers. 2. You can assume the JSON files are correctly formatted as per `json.load` specifications. 3. The integers in the arrays can be positive, negative, or zero and are not necessarily unique. # Sample Code: The following code snippet shows how to read arrays from JSON files: ```python import json def read_json(file_path): with open(file_path) as file: return json.load(file) ``` Implement the function `find_common_elements` to meet the above requirements.","solution":"import json from typing import List def find_common_elements(file_path1: str, file_path2: str) -> List[int]: Finds common elements in the arrays from two JSON files and returns them sorted. # Load arrays from JSON files with open(file_path1, \'r\') as f1, open(file_path2, \'r\') as f2: array1 = json.load(f1) array2 = json.load(f2) # Find common elements using set intersection common_elements = set(array1) & set(array2) # Return the sorted list of common elements return sorted(common_elements)"},{"question":"You are asked to write a Python function `count_character_frequency(file_path)` that reads a text file and calculates the frequency of each character in the file. The result should be printed as a sorted list of tuples where each tuple contains a character and its corresponding frequency in descending order of frequency. If two characters have the same frequency, they should be sorted in ascending alphabetical order. # Function Details: - **Function Name:** `count_character_frequency` - **Arguments:** `file_path` (a string representing the path to the text file) - **Returns:** `None` - **Side Effects:** Prints the character frequencies as described. # Specifications: 1. Open and read the file specified by `file_path`. 2. Iterate through each character in the file, maintaining a count of character frequencies. 3. Ignore case when counting characters (i.e., treat \'A\' and \'a\' as the same character). 4. Include all characters except whitespace (spaces, tabs, newlines). 5. Sort the resulting frequencies in descending order of frequency. If frequencies are tied, sort by the character in ascending order. # Example Usage: ```python count_character_frequency(\'sample.txt\') ``` If `sample.txt` contains the following text: ``` Hello, World! ``` The output might be: ``` [(\'l\', 3), (\'o\', 2), (\'d\', 1), (\'e\', 1), (\'h\', 1), (\'r\', 1), (\'w\', 1)] ``` # Notes: - You may assume that the file exists and is readable. - Special characters such as punctuation should be included in the count. - You should use `collections.Counter` for counting character frequencies. This problem is designed to help you practice file handling, character counting, handling case insensitivity, and sorting in Python.","solution":"from collections import Counter def count_character_frequency(file_path): Reads a text file and calculates the frequency of each character in the file. Prints the character frequencies as a sorted list of tuples where each tuple contains a character and its corresponding frequency in descending order of frequency. # Read the file content with open(file_path, \'r\') as file: content = file.read().lower() # Count character frequencies, excluding whitespaces counter = Counter(char for char in content if not char.isspace()) # Sort frequencies: first by frequency (descending), then by character (ascending) sorted_frequencies = sorted(counter.items(), key=lambda item: (-item[1], item[0])) # Print the sorted frequencies print(sorted_frequencies)"},{"question":"Write a Python function `draw_nested_circles(radius, num_circles)` using Python\'s `turtle` graphics library. This function should draw a series of nested circles with the following specifications: 1. The function takes two arguments: - `radius`: The radius of the innermost circle. - `num_circles`: The total number of nested circles to be drawn. 2. Each subsequent circle should have a radius that is larger by a fixed increment. The increment should be equal to the `radius` of the innermost circle. 3. All circles should be centered at the same point, such that the turtle doesn\'t move from its starting position while it is drawing the circles. 4. Ensure that the pen goes up and down correctly between drawing circles to maintain boundaries properly. **Requirements**: - Use the `turtle.penup()` and `turtle.pendown()` functions to control when the pen touches the drawing canvas. - Use the `turtle.circle(radius)` function to draw each individual circle. # Example Usage: ```python import turtle # Function definition def draw_nested_circles(radius, num_circles): for i in range(num_circles): turtle.penup() turtle.goto(0, -radius * (i + 1)) turtle.pendown() turtle.circle(radius * (i + 1)) turtle.done() # Example function call screen = turtle.Screen() draw_nested_circles(20, 5) screen.exitonclick() ``` This function should result in a set of 5 nested circles, each with a radius incremented by 20 units more than the previous one, starting from an initial radius of 20.","solution":"import turtle def draw_nested_circles(radius, num_circles): Draws a series of nested circles using turtle graphics. Args: - radius: The radius of the innermost circle. - num_circles: The total number of nested circles to be drawn. for i in range(num_circles): current_radius = radius * (i + 1) turtle.penup() turtle.goto(0, -current_radius) turtle.pendown() turtle.circle(current_radius) turtle.done()"},{"question":"In this problem, you are required to implement a function to calculate the generalized mean (also known as the power mean) and its gradient using the `numpy` library. The generalized mean of a set of numbers is a generalization of the arithmetic, geometric, and harmonic means. The generalized mean is defined as: [ M_p(x) = left( frac{1}{n} sum_{i=1}^n x_i^p right)^{frac{1}{p}} ] where ( x ) is an array of input values, ( n ) is the number of elements in ( x ), and ( p ) is the power parameter. The gradient of the generalized mean with respect to each element ( x_i ) can be represented as: [ frac{partial M_p(x)}{partial x_i} = frac{x_i^{p-1}}{n M_p(x)^{p-1}} ] Your task is to implement a Python function named `generalized_mean` that will calculate either the generalized mean of an array of input values or its gradient, based on a flag. The function signature is: ```python def generalized_mean(x, p, grad=False): Calculate the generalized mean or its gradient of the given input array. Parameters: x (ndarray): A numpy array representing the input values. p (float): The power parameter for the generalized mean. grad (bool): A flag to determine whether to calculate the function\'s mean value (False) or its gradient (True). Returns: ndarray: The resulting array after applying the generalized mean or its gradient. ``` You must use the `numpy` library functions to compute the required values efficiently. # Example Usage: ```python import numpy as np # Input array x = np.array([1.0, 2.0, 3.0, 4.0]) # Define power parameter p = 3 # Calculate generalized mean mean_value = generalized_mean(x, p) print(mean_value) # Calculate gradient of the generalized mean mean_gradient = generalized_mean(x, p, grad=True) print(mean_gradient) ``` # Expected Output: ```python # Output for generalized mean 2.6265278044037674 # Output for gradient of the generalized mean [0.05786608 0.11573217 0.17359825 0.23146433] ``` Implement the `generalized_mean` function while making optimal use of the `numpy` library.","solution":"import numpy as np def generalized_mean(x, p, grad=False): Calculate the generalized mean or its gradient of the given input array. Parameters: x (ndarray): A numpy array representing the input values. p (float): The power parameter for the generalized mean. grad (bool): A flag to determine whether to calculate the function\'s mean value (False) or its gradient (True). Returns: ndarray: The resulting array after applying the generalized mean or its gradient. n = x.size if p == 0: # When p is 0, avoid division by zero and correctly return the geometric mean mean_value = np.exp(np.mean(np.log(x))) else: mean_value = (np.sum(x**p) / n)**(1/p) if grad: grad_values = (x**(p-1)) / (n * mean_value**(p-1)) return grad_values else: return mean_value"},{"question":"You are required to implement a function that takes a string `s` and a list of words `word_list`, and finds all starting indices of substring(s) in `s` that are a concatenation of each word in `word_list` exactly once and without any intervening characters. This problem is common in text processing and can help in understanding string manipulation and window sliding techniques. # Requirements: 1. Your function should be named `find_substring`. 2. It should take two arguments: a string `s` and a list of words `word_list`. 3. The words in `word_list` are all of the same length. 4. The function should return a list of starting indices where the concatenation begins. 5. You can assume all words in `word_list` are non-empty strings. Function Signature: ```python def find_substring(s: str, word_list: List[str]) -> List[int]: ``` # Constraints: - The function should handle cases where `s` and `word_list` are of reasonable lengths such that 1 <= len(s) <= 10^4 and 1 <= len(word_list) <= 5000. - The length of the words in `word_list` will be the same and 1 <= len(word_list[0]) <= 1000. # Example: ```python s = \\"barfoothefoobarman\\" word_list = [\\"foo\\", \\"bar\\"] output = find_substring(s, word_list) print(output) ``` Expected output: ```python [0, 9] ``` The output represents starting indices where the concatenation of \\"foo\\" and \\"bar\\" without any interfering characters begins in the given string `s`. # Hints: - A sliding window approach can be quite effective for this problem. - Create a dictionary to count occurrences of each word in `word_list`. # Libraries: - Import anything necessary for manipulating strings and lists, but avoid external libraries such as regular expressions (regex).","solution":"from typing import List, Dict def find_substring(s: str, word_list: List[str]) -> List[int]: if not s or not word_list: return [] word_length = len(word_list[0]) num_words = len(word_list) substring_length = word_length * num_words if len(s) < substring_length: return [] word_count = {} for word in word_list: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 def is_valid(start: int) -> bool: seen_words = {} for i in range(start, start + substring_length, word_length): current_word = s[i:i+word_length] if current_word in word_count: if current_word in seen_words: seen_words[current_word] += 1 else: seen_words[current_word] = 1 if seen_words[current_word] > word_count[current_word]: return False else: return False return True result_indices = [] for i in range(len(s) - substring_length + 1): if is_valid(i): result_indices.append(i) return result_indices"},{"question":"You are required to write a function named `calculate_grades` that computes the average grade for each student in a class and assigns a letter grade based on specific thresholds. The function should take a list of dictionaries, where each dictionary represents a student and contains the student\'s name and a list of their grades. **Function Signature**: ```python def calculate_grades(students: list[dict]) -> list[dict]: ``` # **Details:** - Each dictionary in the input list has the following structure: ```python { \\"name\\": \\"student_name\\", \\"grades\\": [list_of_grades] } ``` - The function should return a list of dictionaries. Each dictionary contains the student\'s name, their average grade, and the corresponding letter grade. - Letter grades are determined based on the following thresholds: - 90 <= average <= 100: \'A\' - 80 <= average < 90: \'B\' - 70 <= average < 80: \'C\' - 60 <= average < 70: \'D\' - average < 60: \'F\' # **Input:** - `students`: A list of dictionaries. Each dictionary includes: - `name`: A string representing the student\'s name. - `grades`: A list of integers representing the student\'s grades. # **Output:** The function should return a new list of dictionaries. Each dictionary should include: - `name`: The student\'s name. - `average`: The average of the student\'s grades. - `letter_grade`: The student\'s letter grade. # **Example:** ```python students = [ {\\"name\\": \\"John Doe\\", \\"grades\\": [88, 76, 92, 85]}, {\\"name\\": \\"Jane Smith\\", \\"grades\\": [100, 90, 98, 92]}, {\\"name\\": \\"Emily Johnson\\", \\"grades\\": [70, 60, 65, 68]} ] result = calculate_grades(students) print(result) # Example Output: # [ # {\'name\': \'John Doe\', \'average\': 85.25, \'letter_grade\': \'B\'}, # {\'name\': \'Jane Smith\', \'average\': 95.0, \'letter_grade\': \'A\'}, # {\'name\': \'Emily Johnson\', \'average\': 65.75, \'letter_grade\': \'D\'} # ] ``` # **Constraints:** - The input list will have at least one student, and each student will have at least one grade. - Grades are integers between 0 and 100 (inclusive). # **Hints:** - Use the `sum` and `len` functions to compute the average grade for each student. - Use conditional statements to determine the letter grade based on the average grade.","solution":"def calculate_grades(students): Calculate the average grade for each student and assign a letter grade based on the average grade. Args: students (list of dict): A list of dictionaries where each dictionary contains the name of the student and their grades. Returns: list of dict: A list of dictionaries where each dictionary contains the student\'s name, their average grade, and the corresponding letter grade. def get_letter_grade(avg): if 90 <= avg <= 100: return \'A\' elif 80 <= avg < 90: return \'B\' elif 70 <= avg < 80: return \'C\' elif 60 <= avg < 70: return \'D\' else: return \'F\' result = [] for student in students: name = student[\\"name\\"] grades = student[\\"grades\\"] average = sum(grades) / len(grades) letter_grade = get_letter_grade(average) result.append({ \\"name\\": name, \\"average\\": average, \\"letter_grade\\": letter_grade }) return result"},{"question":"You are given a dataset containing information about several products sold in an e-commerce store. Your task is to implement a function, `calculate_discounted_prices(products)`, that calculates the discounted prices for a list of products and sorts them based on their new prices. The function should also find the product with the highest discount percentage. Here\'s a breakdown of the operations your function should perform: 1. **Convert Input to List of Dictionaries**: - Assume `products` is a string in JSON format that needs to be parsed into a list of dictionaries. Each dictionary contains the fields: `name`, `original_price`, `discount_percent`, `category`. 2. **Calculate Discounted Price**: - For each product, compute the new price after applying the discount percentage to the original price. Add a new key `discounted_price` to each product dictionary with the calculated value. 3. **Sort Products by Discounted Price**: - Sort the list of products in ascending order based on the `discounted_price`. 4. **Identify Highest Discount**: - Determine the product that has the highest discount percentage. 5. **Output**: - Return a tuple containing two elements: * The sorted list of products based on discounted prices. * The product dictionary which has the highest discount percentage. **You need to implement the function and ensure it adheres to the following signature:** ```python import json def calculate_discounted_prices(products): # Your code here pass ``` # Example ```python products = \'\'\' [ {\\"name\\": \\"Laptop\\", \\"original_price\\": 1000, \\"discount_percent\\": 20, \\"category\\": \\"Electronics\\"}, {\\"name\\": \\"Smartphone\\", \\"original_price\\": 500, \\"discount_percent\\": 10, \\"category\\": \\"Electronics\\"}, {\\"name\\": \\"Blender\\", \\"original_price\\": 150, \\"discount_percent\\": 15, \\"category\\": \\"Home Appliances\\"}, {\\"name\\": \\"TV\\", \\"original_price\\": 800, \\"discount_percent\\": 25, \\"category\\": \\"Electronics\\"} ] \'\'\' # Running the function sorted_products, highest_discount_product = calculate_discounted_prices(products) # The sorted_products would be: # [ # {\\"name\\": \\"Blender\\", \\"original_price\\": 150, \\"discount_percent\\": 15, \\"category\\": \\"Home Appliances\\", \\"discounted_price\\": 127.5}, # {\\"name\\": \\"Smartphone\\", \\"original_price\\": 500, \\"discount_percent\\": 10, \\"category\\": \\"Electronics\\", \\"discounted_price\\": 450.0}, # {\\"name\\": \\"TV\\", \\"original_price\\": 800, \\"discount_percent\\": 25, \\"category\\": \\"Electronics\\", \\"discounted_price\\": 600.0}, # {\\"name\\": \\"Laptop\\", \\"original_price\\": 1000, \\"discount_percent\\": 20, \\"category\\": \\"Electronics\\", \\"discounted_price\\": 800.0} # ] # The highest_discount_product would be: # {\\"name\\": \\"TV\\", \\"original_price\\": 800, \\"discount_percent\\": 25, \\"category\\": \\"Electronics\\", \\"discounted_price\\": 600.0} ```","solution":"import json def calculate_discounted_prices(products): # Parse the JSON string to a list of dictionaries product_list = json.loads(products) # Calculate the discounted price for each product for product in product_list: discounted_price = product[\'original_price\'] * (1 - product[\'discount_percent\'] / 100) product[\'discounted_price\'] = discounted_price # Sort the products based on the discounted price in ascending order sorted_products = sorted(product_list, key=lambda x: x[\'discounted_price\']) # Find the product with the highest discount percentage highest_discount_product = max(product_list, key=lambda x: x[\'discount_percent\']) return (sorted_products, highest_discount_product)"},{"question":"In this problem, your task is to write a function called `find_unique_elements` that finds all the unique elements in a list of integers based on specific criteria. Here\'s the detailed specification of the function: 1. The input to the function will be a list of integers `lst`. 2. The list may contain duplicate elements. 3. The function should return a list of integers that appear only once in the input list. 4. The returned list should be sorted in ascending order. 5. If there are no unique elements, return an empty list. **Function signature:** ```python def find_unique_elements(lst: List[int]) -> List[int]: ``` **Examples:** ```python find_unique_elements([4, 3, 2, 7, 8, 2, 3, 1]) -> [1, 4, 7, 8] find_unique_elements([1, 2, 3, 2, 1, 5, 6, 5]) -> [3, 6] find_unique_elements([1, 1, 1, 1, 1]) -> [] find_unique_elements([10, 20, 30, 40, 50]) -> [10, 20, 30, 40, 50] find_unique_elements([]) -> [] ```","solution":"from typing import List def find_unique_elements(lst: List[int]) -> List[int]: Finds all the unique elements in the list `lst`. Parameters: lst (List[int]): List of integers which may contain duplicates. Returns: List[int]: Sorted list of unique elements that appear only once in `lst`. from collections import Counter # Count the frequency of each element in the list frequency = Counter(lst) # Filter elements that appear only once unique_elements = [element for element in frequency if frequency[element] == 1] # Sort and return the unique elements return sorted(unique_elements)"},{"question":"In many text-processing applications, identifying unique words and their frequencies in a text file is crucial. In this problem, you will design a function that reads a text file and calculates the frequency of each unique word. For simplicity, words are defined as sequences of characters separated by whitespace or punctuation. The function should return a dictionary where the keys are the words, and the values are their frequencies. **Function Signature:** ```python def word_frequencies(filename: str) -> Dict[str, int]: pass ``` # Instructions: 1. Read the contents of the file. 2. Normalize the text to lowercase. 3. Split the text into words, removing any punctuation. 4. Count the frequency of each word. 5. Return a dictionary with words as keys and their frequencies as values. # Example: Given the file `sample.txt` contains the following text: ``` Hello world! Hello everyone. Welcome to our world. ``` Your function call: ```python word_frequencies(\'sample.txt\') ``` Should return: ```python {\'hello\': 2, \'world\': 2, \'everyone\': 1, \'welcome\': 1, \'to\': 1, \'our\': 1} ``` # Note: - You may use the `str.lower`, `str.translate`, and `str.split` methods to handle the text normalization and splitting. - Assume standard English punctuation marks (.,!?- etc.) for exclusion.","solution":"import string from typing import Dict def word_frequencies(filename: str) -> Dict[str, int]: Reads a text file and calculates the frequency of each unique word. Returns a dictionary where the keys are words and values are their frequencies. with open(filename, \'r\', encoding=\'utf-8\') as file: text = file.read() # Normalizing the text to lowercase text = text.lower() # Removing punctuation translator = str.maketrans(\'\', \'\', string.punctuation) text = text.translate(translator) # Splitting the text into words words = text.split() # Counting the frequency of each word frequency_dict = {} for word in words: if word in frequency_dict: frequency_dict[word] += 1 else: frequency_dict[word] = 1 return frequency_dict"},{"question":"You are to write a Python function named `find_common_elements(list1, list2)` which takes two arguments: - `list1` (List[int]): A list of integers. - `list2` (List[int]): Another list of integers. The function\'s purpose is to find and return a sorted list of unique elements that appear in both `list1` and `list2`. **Conditions and Requirements:** 1. Use set operations to determine the common elements efficiently. 2. Ensure the returned list is sorted in ascending order. 3. The input lists can contain duplicate values, but the output list should not contain duplicates. **Your Task:** Implement the function `find_common_elements(list1, list2)`. Within this function: - Convert `list1` and `list2` to sets to find the intersection of these sets. - Convert the resulting set of common elements back to a list. - Sort the list of common elements in ascending order. - Return the sorted list of unique common elements. Ensure your function handles all edge cases, such as one or both input lists being empty. **Example Usage:** ``` find_common_elements([1, 2, 2, 3, 4], [2, 3, 3, 5]) # Output: [2, 3] find_common_elements([7, 8, 9], [10, 11, 12]) # Output: [] ``` The purpose of this task is to familiarize you with set operations and list manipulations in Python.","solution":"def find_common_elements(list1, list2): Returns a sorted list of unique elements that appear in both list1 and list2. # Convert both lists to sets to remove duplicates and find the intersection set1 = set(list1) set2 = set(list2) # Find common elements common_elements = set1.intersection(set2) # Convert the set of common elements back to a sorted list return sorted(list(common_elements))"},{"question":"You are given a list of dictionaries, where each dictionary represents an item in a store. Each dictionary contains the fields `name` (a string), `category` (a string), and `price` (a floating-point number). Your task is to create a function `summarize_store_items` that performs the following actions: 1. Computes the total number of items in the store. 2. Computes the total value of all items in the store. 3. Computes the average price of items, rounded to two decimal places. 4. Determines the number of unique categories. 5. Generates a dictionary where the keys are categories and the values are lists of item names in those categories. The function should return a dictionary containing these summaries with the following structure: ```python { \'total_items\': total_number_of_items, \'total_value\': total_value_of_all_items, \'average_price\': average_price_of_items, \'unique_categories\': number_of_unique_categories, \'categories\': { \'category1\': [\'item1\', \'item2\'], \'category2\': [\'item3\'] # ... } } ``` The function signature should be: ```python def summarize_store_items(items): # Your code goes here ``` **Function Implementation Steps:** 1. Iterate through the list of items to compute the total number of items, total value, and create a mapping of categories to item names. 2. Compute the average price by dividing the total value by the total number of items, rounding to two decimal places. 3. Determine the number of unique categories by converting the list of categories to a set. 4. Format the results into the required dictionary structure. **Input:** - `items`: A list of dictionaries, where each dictionary represents an item with the structure: ```python [ {\'name\': \'item1\', \'category\': \'category1\', \'price\': 9.99}, {\'name\': \'item2\', \'category\': \'category2\', \'price\': 19.99}, # ... ] ``` **Output:** - A dictionary containing the computed summaries and categorizations. **Example:** ```python items = [ {\'name\': \'item1\', \'category\': \'electronics\', \'price\': 99.99}, {\'name\': \'item2\', \'category\': \'electronics\', \'price\': 149.99}, {\'name\': \'item3\', \'category\': \'kitchen\', \'price\': 29.99} ] ``` Output should be: ```python { \'total_items\': 3, \'total_value\': 279.97, \'average_price\': 93.32, \'unique_categories\': 2, \'categories\': { \'electronics\': [\'item1\', \'item2\'], \'kitchen\': [\'item3\'] } } ```","solution":"def summarize_store_items(items): Summarizes the store items. :param items: List of dictionaries, each containing \'name\', \'category\', and \'price\'. :return: Dictionary with summaries and categories. total_items = len(items) total_value = sum(item[\'price\'] for item in items) average_price = round(total_value / total_items, 2) if total_items > 0 else 0.0 categories = {} for item in items: category = item[\'category\'] name = item[\'name\'] if category not in categories: categories[category] = [] categories[category].append(name) unique_categories = len(categories) return { \'total_items\': total_items, \'total_value\': total_value, \'average_price\': average_price, \'unique_categories\': unique_categories, \'categories\': categories }"},{"question":"Suppose you are writing a function to simulate a simple inventory system for a store. The store keeps track of its inventory by storing the items as a dictionary, where the keys are the names of the items and the values are their quantities. Your task is to implement functions to restock items, sell items, and check inventory. Write the following class: ```python class Inventory: A class to manage the inventory of a store. def __init__(self): Initialize an empty inventory. self.items = {} def restock(self, item: str, quantity: int) -> None: Add a specified quantity of an item to the inventory. If the item does not exist, add it with the given quantity. Parameters: item (str): The name of the item. quantity (int): The quantity to add. if item in self.items: self.items[item] += quantity else: self.items[item] = quantity def sell(self, item: str, quantity: int) -> bool: Sell a specified quantity of an item from the inventory. If the item does not exist or the quantity is insufficient, return False. Otherwise, reduce the quantity of the item and return True. Parameters: item (str): The name of the item. quantity (int): The quantity to sell. Returns: bool: True if the sale was successful, False otherwise. if item in self.items and self.items[item] >= quantity: self.items[item] -= quantity if self.items[item] == 0: del self.items[item] return True return False def check_inventory(self) -> dict: Return the current inventory as a dictionary. Returns: dict: A dictionary where the keys are the names of the items and the values are their quantities. return self.items.copy() ``` **Requirements:** - The `restock` method should add a quantity to an existing item or create a new item if it does not exist. - The `sell` method should reduce the quantity of an item or return `False` if the item is not available or insufficient quantity is present. - The `check_inventory` method should return the current state of inventory. **Example:** ```python inventory = Inventory() inventory.restock(\'apple\', 10) inventory.restock(\'banana\', 5) print(inventory.check_inventory()) # Output should be {\'apple\': 10, \'banana\': 5} success = inventory.sell(\'apple\', 3) print(success) # Output should be True print(inventory.check_inventory()) # Output should be {\'apple\': 7, \'banana\': 5} success = inventory.sell(\'banana\', 6) print(success) # Output should be False print(inventory.check_inventory()) # Output should be {\'apple\': 7, \'banana\': 5} ```","solution":"class Inventory: A class to manage the inventory of a store. def __init__(self): Initialize an empty inventory. self.items = {} def restock(self, item: str, quantity: int) -> None: Add a specified quantity of an item to the inventory. If the item does not exist, add it with the given quantity. Parameters: item (str): The name of the item. quantity (int): The quantity to add. if item in self.items: self.items[item] += quantity else: self.items[item] = quantity def sell(self, item: str, quantity: int) -> bool: Sell a specified quantity of an item from the inventory. If the item does not exist or the quantity is insufficient, return False. Otherwise, reduce the quantity of the item and return True. Parameters: item (str): The name of the item. quantity (int): The quantity to sell. Returns: bool: True if the sale was successful, False otherwise. if item in self.items and self.items[item] >= quantity: self.items[item] -= quantity if self.items[item] == 0: del self.items[item] return True return False def check_inventory(self) -> dict: Return the current inventory as a dictionary. Returns: dict: A dictionary where the keys are the names of the items and the values are their quantities. return self.items.copy()"},{"question":"In this problem, you will design a function as part of a simplified predictive text input system. The system has a dictionary of words, and given a prefix typed by a user, your task is to suggest the most probable word completion. Your function should suggest completions based on prefix matching and word frequency. Your task is to complete the function `autocomplete(dictionary, prefix)` which will find and return the most likely word completion for the given prefix. # Parameters: - `dictionary`: A list of tuples where each tuple contains a string (a word) and an integer (its frequency count). - `prefix`: A string representing the beginning of the word the user has typed. # Returns: - `completion`: A string representing the most likely word completion for the given prefix. If no words match the given prefix, return an empty string. # Instructions: 1. Filter the list of dictionary words to those that start with the given prefix. 2. Among the filtered words, find the one with the highest frequency. 3. If there are no words starting with the given prefix, return an empty string. 4. Return the most frequent word that matches the prefix. # Example Usage: ```python dictionary = [(\\"apple\\", 100), (\\"apply\\", 80), (\\"apricot\\", 50), (\\"banana\\", 60)] prefix = \\"ap\\" completion = autocomplete(dictionary, prefix) # should return \\"apple\\" ``` # Note: - You can assume that the words in the dictionary are case-sensitive. - In case of a frequency tie, return the word that comes first alphabetically.","solution":"def autocomplete(dictionary, prefix): Returns the most probable word completion based on prefix and word frequency. Args: dictionary: A list of tuples where each tuple contains a word (string) and its frequency (integer). prefix: A string representing the beginning of the word the user has typed. Returns: A string representing the most likely word completion for the given prefix. If no words match the given prefix, returns an empty string. # Filter words that start with the given prefix filtered_words = [word for word, freq in dictionary if word.startswith(prefix)] if not filtered_words: return \\"\\" # Find the word with the highest frequency most_likely_word = max(filtered_words, key=lambda word: (next(freq for w, freq in dictionary if w == word), -ord(word[0]))) return most_likely_word"},{"question":"You need to implement a search algorithm to find an element in a rotated sorted array. A sorted array is rotated at some unknown pivot, which means that the array was initially sorted but then rotated. For example, the array `[0, 1, 2, 4, 5, 6, 7]` might be rotated to `[4, 5, 6, 7, 0, 1, 2]`. # Function Specification **Function Name:** `search_rotated_array` **Arguments:** 1. `nums` (List[int]): A list of integers representing the rotated sorted array. 2. `target` (int): An integer representing the target value you need to search for in the array. **Returns:** An integer representing the index of the target value in the array. If the target value is not found, return `-1`. # Example Usage: ```python index = search_rotated_array([4, 5, 6, 7, 0, 1, 2], 5) # Should return 1 as 5 is at index 1 index = search_rotated_array([4, 5, 6, 7, 0, 1, 2], 3) # Should return -1 as 3 is not in the array ``` # Constraints: - The function should have a time complexity of O(log n). - The input array contains unique integers. # You must use: - A combination of binary search and array index shifting to find the target efficiently. # Additional Information: - Assume the array does not contain duplicate values. - The array is initially sorted in ascending order and then rotated.","solution":"def search_rotated_array(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] <= nums[mid]: # Left half is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right half is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"# Problem Statement You are required to write a Python function called `unique_even_squares` that takes a list of integers as input and performs the following tasks: 1. Filters out the even integers from the list. 2. Calculates the square of each even integer. 3. Returns a list of these squared values, ensuring that each value in the returned list is unique. # Requirements - Implement the `unique_even_squares` function such that it accepts a list of integers and returns a list of unique squared values of the even integers. - The order of the elements in the returned list does not matter. - You may assume that the input list contains only integers and may include negative numbers. # Function Signature ```python def unique_even_squares(nums): pass ``` # Example ```python print(unique_even_squares([1, 2, 3, 2, 4, -4])) # Output: [4, 16] print(unique_even_squares([7, 8, 8, 10, 0, -10, -3])) # Output: [64, 100, 0] print(unique_even_squares([1, 3, 5, 9])) # Output: [] ``` # Note - Ensure to filter out even numbers before squaring them and adding them to the list. - Use set or appropriate methods to guarantee the uniqueness of the squared values in the output list.","solution":"def unique_even_squares(nums): Filters out the even integers, computes their squares and ensures uniqueness. Parameters: nums (list): A list of integers. Returns: list: A list containing unique squares of even integers. even_squares = {num ** 2 for num in nums if num % 2 == 0} return list(even_squares)"},{"question":"Implements a function that validates brackets in a given string. The function should check if the brackets are balanced and properly nested. The brackets can include `()`, `[]`, and `{}`. The function should output with: bool: `True` if the brackets are balanced and properly nested, `False` otherwise. You should write self-contained code starting with: ``` def is_balanced(s): ```","solution":"def is_balanced(s): Checks if the brackets in the given string are balanced and properly nested. Args: s (str): The string containing brackets. Returns: bool: True if the brackets are balanced and properly nested, False otherwise. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"**Context**: You are creating a simplified recommendation system for an online bookstore. The system uses cosine similarity to determine how similar one user\'s ratings of books are to another user\'s ratings. Cosine similarity is a measure that calculates the cosine angle between two vectors, in this case, the user\'s ratings, and can be used to measure the similarity between users or items. **Objective**: Write a function `calculate_cosine_similarity(user_ratings1, user_ratings2)` that calculates the cosine similarity between two sets of user ratings. This function will take two one-dimensional numpy arrays representing the ratings of two different users on the same set of books. **Function Signature**: ```python def calculate_cosine_similarity(user_ratings1, user_ratings2): ``` **Parameters**: - `user_ratings1` (numpy.ndarray): A 1D numpy array representing the ratings given by the first user. - `user_ratings2` (numpy.ndarray): A 1D numpy array representing the ratings given by the second user. **Returns**: - `cosine_similarity` (float): The cosine similarity between the two users\' ratings, ranging from -1 (completely dissimilar) to 1 (identical). **Instructions**: 1. Calculate the dot product of the two rating vectors. 2. Calculate the Euclidean norm (magnitude) of each rating vector. 3. Compute the cosine similarity using the formula: [ text{cosine_similarity} = frac{text{dot product of user_ratings1 and user_ratings2}}{|text{user_ratings1}| times |text{user_ratings2}|} ] 4. Ensure the function returns a float representing the cosine similarity. You should leverage the numpy library for vector and matrix operations. The accuracy of the cosine similarity calculation is important for the functionality of the recommendation system. Example: ```python import numpy as np user_ratings1 = np.array([4, 5, 3, 2]) user_ratings2 = np.array([5, 4, 2, 3]) cosine_similarity = calculate_cosine_similarity(user_ratings1, user_ratings2) print(cosine_similarity) # Expected output is approximately 0.9759 ```","solution":"import numpy as np def calculate_cosine_similarity(user_ratings1, user_ratings2): Calculate the cosine similarity between two sets of user ratings. Parameters: - user_ratings1 (numpy.ndarray): A 1D numpy array representing the ratings given by the first user. - user_ratings2 (numpy.ndarray): A 1D numpy array representing the ratings given by the second user. Returns: - cosine_similarity (float): The cosine similarity between the two users\' ratings. dot_product = np.dot(user_ratings1, user_ratings2) norm_user_ratings1 = np.linalg.norm(user_ratings1) norm_user_ratings2 = np.linalg.norm(user_ratings2) return dot_product / (norm_user_ratings1 * norm_user_ratings2)"},{"question":"In this problem, you will work with a list of strings representing names, and your task is to normalize and sort them. The provided list may contain names in any case (upper, lower, mixed) and may include leading or trailing spaces. You need to write a function `process_names(filename)` which performs the following: 1. Reads names from a text file specified by `filename`. Each line in the file contains one name. 2. Strips out any leading or trailing whitespace from each name. 3. Converts all names to title case (first letter of each word capitalized). 4. Removes duplicate names (case-insensitive comparison). 5. Sorts the cleaned list of names in alphabetical order in a case-insensitive manner. 6. Writes the sorted list of names back to a new file named `\'sorted_names.txt\'`. # Requirements: - Correctly handle cases for reading from an existing file and writing to a new file. - Normalize the names by stripping whitespace and converting to title case. - Ensure no duplicates exist in the final sorted list. - Use context managers (`with` statement) for file operations. - Handle potential file-related errors gracefully, with appropriate error messages. Write the function `process_names(filename)` which satisfies the above requirements.","solution":"def process_names(filename): Reads names from the specified file, normalizes, removes duplicates, sorts them, and writes the sorted names to \'sorted_names.txt\'. try: with open(filename, \'r\') as file: names = file.readlines() # Normalize names: strip whitespace, convert to title case names = [name.strip().title() for name in names] # Remove duplicates (case-insensitive) names = list(set(name.lower() for name in names)) # Sort names in case-insensitive manner names.sort(key=lambda x: x.lower()) # Convert back to title case for final output preserving set uniqueness clean_names = [name.title() for name in names] with open(\'sorted_names.txt\', \'w\') as file: for name in clean_names: file.write(name + \'n\') except FileNotFoundError: print(f\\"Error: The file \'{filename}\' was not found.\\") except IOError: print(\\"Error: An I/O error occurred.\\")"},{"question":"You need to implement a function `remove_characters(input_string, characters_to_remove)` that removes specific characters from the given input string. The function uses the `string` module to fetch a set of all ASCII letters for validation. Requirements: 1. The function should take two inputs: - `input_string`: a string from which characters will be removed. - `characters_to_remove`: a string containing characters to be removed from `input_string`. 2. The function should validate that both inputs are strings consisting of ASCII characters only. 3. If either input contains non-ASCII characters, the function should raise a `ValueError`. 4. Use list comprehension or the `filter` function to construct the result string with the specified characters removed. 5. Return the cleaned string. Please refer to the API documentation for: - `string.ascii_letters` - `filter` - `str.join` # Function Signature: ```python def remove_characters(input_string: str, characters_to_remove: str) -> str: ``` # Example: ```python input_string = \\"hello world\\" characters_to_remove = \\"aeiou\\" result = remove_characters(input_string, characters_to_remove) print(result) # Output: \\"hll wrld\\" ```","solution":"import string def remove_characters(input_string: str, characters_to_remove: str) -> str: Removes specific characters from the input string. Parameters: input_string (str): The input string from which characters will be removed. characters_to_remove (str): The string containing characters to be removed from input_string. Returns: str: The cleaned input string with specified characters removed. Raises: ValueError: If either input contains non-ASCII characters. # Validate both input_string and characters_to_remove to be ASCII strings if not all(char in string.printable for char in input_string): raise ValueError(\\"input_string contains non-ASCII characters\\") if not all(char in string.printable for char in characters_to_remove): raise ValueError(\\"characters_to_remove contains non-ASCII characters\\") # Use str.join and filter to remove characters result = \'\'.join(filter(lambda char: char not in characters_to_remove, input_string)) return result"},{"question":"You are required to implement a function `matrix_spiral_traversal(matrix: List[List[int]]) -> List[int]`. This function will take a 2D list representing a matrix and return a list of integers that represent the elements of the matrix traversed in a spiral order, starting from the top-left corner of the matrix. The spiral order starts from the first element of the matrix, moves to the right across the top row, then moves down the right edge, then moves left across the bottom row, and finally moves up the left edge. This process repeats for the inner submatrix until all elements are traversed. The matrix is guaranteed to have at least one element. **Requirements**: - Handle cases where the matrix has uneven dimensions, i.e., different numbers of rows and columns. - The function should work properly even for matrices with a single row or column. **Function Signature**: ```python from typing import List def matrix_spiral_traversal(matrix: List[List[int]]) -> List[int]: pass ``` # Examples: ```python # Example 1: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] matrix_spiral_traversal(matrix) # Expected output: [1, 2, 3, 6, 9, 8, 7, 4, 5] # Example 2: matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] matrix_spiral_traversal(matrix) # Expected output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] # Example 3: matrix = [ [7] ] matrix_spiral_traversal(matrix) # Expected output: [7] ``` **Note**: - The function must handle matrices with different shapes and sizes. - Ensure the output is a list of integers in the correct spiral order.","solution":"from typing import List def matrix_spiral_traversal(matrix: List[List[int]]) -> List[int]: result = [] while matrix: # Add the first row to the result result += matrix.pop(0) # Add the last element of each remaining row to the result if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Add the last row to the result in reverse order if matrix: result += matrix.pop()[::-1] # Add the first element of each remaining row to the result in reverse order if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"**Problem**: You are given a list of strings that represent sentences. Your task is to write a function called `find_longest_word_in_sentences` that processes each sentence to find and return the longest word within each sentence. The function should also ignore any punctuation attached to words. **Function Signature**: ```python import string def find_longest_word_in_sentences(sentences: list) -> list: # Your code goes here pass ``` **Requirements**: 1. The function should take a single parameter: - `sentences` (list): A list of sentences represented as strings. 2. The function should: - Process each sentence and remove any punctuation using `string.punctuation`. - Split the sentence into individual words. - Determine the longest word in each sentence. - Return a list containing the longest word from each sentence. 3. In the case of a tie (two or more words of the same longest length), choose the first one that appears in the sentence. **Example**: ```python # Example call and expected behavior: sentences = [ \\"Hello world! This is a sample sentence.\\", \\"Testing, one, two, three...\\", \\"Which word is the longest in this sentence?\\" ] print(find_longest_word_in_sentences(sentences)) # Output: [\'sentence\', \'Testing\', \'sentence\'] ```","solution":"import string def find_longest_word_in_sentences(sentences: list) -> list: Given a list of sentences, find the longest word in each sentence. Args: sentences (list): A list of strings representing sentences. Returns: list: A list containing the longest word from each sentence. longest_words = [] for sentence in sentences: # Remove punctuation for punct in string.punctuation: sentence = sentence.replace(punct, \\"\\") # Split into words words = sentence.split() # Find the longest word longest_word = max(words, key=len) longest_words.append(longest_word) return longest_words"},{"question":"In the field of data structures, binary trees are fundamental for a variety of computational tasks. One common problem is to determine the \\"diameter\\" of a binary tree. The diameter is defined as the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. Your task is to create a function `calculate_diameter(root)` that computes the diameter of a given binary tree. Specifically: - The binary tree is represented using nodes defined by the `TreeNode` class. - Each node contains an integer value and references to its left and right child nodes. The `TreeNode` is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` The function `calculate_diameter` should utilize a depth-first search algorithm to compute the maximum diameter by considering the depth of each subtree. Function signature: ```python def calculate_diameter(root: TreeNode) -> int: pass ``` # Example Given the following binary tree: ``` 1 / 2 3 / 4 5 ``` ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) diameter = calculate_diameter(root) print(diameter) # Output will be 3, as the longest path is 4 -> 2 -> 1 -> 3 or 5 -> 2 -> 1 -> 3 ``` This function will expose you to tree traversal techniques and recursive programming.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def calculate_diameter(root: TreeNode) -> int: def dfs(node: TreeNode): if not node: return 0, 0 # height, diameter left_height, left_diameter = dfs(node.left) right_height, right_diameter = dfs(node.right) current_height = 1 + max(left_height, right_height) current_diameter = max(left_diameter, right_diameter, left_height + right_height) return current_height, current_diameter return dfs(root)[1]"},{"question":"# K-Means Clustering Implementation with NumPy You are required to implement the K-Means clustering algorithm using the NumPy library in Python. The K-Means algorithm aims to partition `n` observations into `k` clusters in which each observation belongs to the cluster with the nearest mean. Your task is to write a function `fit_kmeans(X, k, max_iter, tol)` that will cluster the given data points. # Function Signature ```python def fit_kmeans(X: np.ndarray, k: int, max_iter: int = 300, tol: float = 1e-4) -> Tuple[np.ndarray, np.ndarray] ``` # Parameters - `X`: A numpy array of shape `(n_samples, n_features)` representing the input features. - `k`: An integer representing the number of clusters. - `max_iter`: An integer representing the maximum number of iterations (default is 300). - `tol`: A float representing the tolerance to declare convergence (default is `1e-4`). # Returns - `centroids`: A numpy array of shape `(k, n_features)` representing the final centroids of the clusters. - `labels`: A numpy array of shape `(n_samples,)` representing the cluster assignment for each sample in `X`. # Requirements You need to use the following `numpy` functions: - `numpy.random.choice`: To initialize the centroids randomly from the data points. - `numpy.linalg.norm`: To compute Euclidean distances. - `numpy.mean`: To compute the mean of data points. # Constraints - Assume `X` is well-formed and follows the given shape. - Assume `k` is a sensible value relative to the number of samples in `X`. # Example ```python import numpy as np # Example data with 2 features and 6 samples X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]) # Fit the K-Means algorithm with k=2 clusters centroids, labels = fit_kmeans(X, 2) print(\\"Centroids:n\\", centroids) # Output: example array of centroids print(\\"Labels:n\\", labels) # Output: example array of labels e.g., [0, 0, 0, 1, 1, 1] ``` # Notes 1. The `fit_kmeans` function must: - Initialize `k` centroids randomly from the data points in `X`. - Iterate and update the centroids and cluster assignments. - Converge when the change in centroids is less than `tol` or when `max_iter` is reached. - Return the final centroids and cluster labels. 2. You should closely follow the definitions and use cases of the `numpy.random.choice`, `numpy.linalg.norm`, and `numpy.mean` functions as per their documentation.","solution":"import numpy as np from typing import Tuple def fit_kmeans(X: np.ndarray, k: int, max_iter: int = 300, tol: float = 1e-4) -> Tuple[np.ndarray, np.ndarray]: Clusters the data points in X into k clusters using the K-Means algorithm. Parameters: X (np.ndarray): A numpy array of shape (n_samples, n_features) representing the input features. k (int): An integer representing the number of clusters. max_iter (int): An integer representing the maximum number of iterations (default is 300). tol (float): A float representing the tolerance to declare convergence (default is 1e-4). Returns: centroids (np.ndarray): A numpy array of shape (k, n_features) representing the final centroids of the clusters. labels (np.ndarray): A numpy array of shape (n_samples, ) representing the cluster assignment for each sample in X. # Randomly initialize centroids by choosing k samples from X centroids = X[np.random.choice(X.shape[0], k, replace=False)] for iteration in range(max_iter): # Calculate distances from points to centroids and assign points to nearest centroid distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Compute new centroids as mean of points in each cluster new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)]) # Check for convergence (if centroids change less than tolerance, stop) if np.linalg.norm(new_centroids - centroids) < tol: break centroids = new_centroids return centroids, labels"},{"question":"# Random Walk Simulation A random walk is a mathematical formalization of a path that consists of taking successive random steps on some mathematical space. In this specific question, we will simulate a 2D random walk starting from the origin (0, 0) and observe the position after a given number of steps. **Objective:** Create a function `random_walk_simulation(steps: int, iterations: int) -> (float, float)` to simulate a 2D random walk with the following inputs: - `steps`: Number of steps to take in each random walk. - `iterations`: Number of random walk simulations to perform. The function should return a tuple with two values: 1. The average final x-coordinate after the specified number of steps. 2. The average final y-coordinate after the specified number of steps. **Requirements:** - Ensure `steps` and `iterations` are positive integers; raise a `ValueError` otherwise. - Use the `random` library to generate random directions for each step. Example: ```python >>> random_walk_simulation(100, 10000) (-0.2, 0.1) ``` # Direction rules: - Each step can be taken either left, right, up, or down, each with equal probability. - Left: Decrease x-coordinate by 1. - Right: Increase x-coordinate by 1. - Up: Increase y-coordinate by 1. - Down: Decrease y-coordinate by 1. # Libraries to be used: - `random.choice`: to randomly select the direction for each step. Ensure to provide concise documentation and comments within the code to explain the use of the random library methods and the logic behind each step of the random walk simulation.","solution":"import random def random_walk_simulation(steps, iterations): Simulates a 2D random walk. Parameters: - steps (int): The number of steps to take in each random walk. - iterations (int): The number of random walk simulations to perform. Returns: - (float, float): Tuple containing the average final x and y coordinates after the specified number of steps. Raises: - ValueError: If steps or iterations are not positive integers. if not isinstance(steps, int) or steps <= 0: raise ValueError(\\"Steps must be a positive integer.\\") if not isinstance(iterations, int) or iterations <= 0: raise ValueError(\\"Iterations must be a positive integer.\\") directions = [\'left\', \'right\', \'up\', \'down\'] total_x = 0 total_y = 0 for _ in range(iterations): x, y = 0, 0 for _ in range(steps): move = random.choice(directions) if move == \'left\': x -= 1 elif move == \'right\': x += 1 elif move == \'up\': y += 1 elif move == \'down\': y -= 1 total_x += x total_y += y avg_x = total_x / iterations avg_y = total_y / iterations return avg_x, avg_y"},{"question":"You have been tasked with implementing a function called `process_user_input` that processes inputs from a user and provides feedback based on certain criteria. Your task is to: 1. Ensure that the input provided by the user is a string. 2. Check if the input string contains only alphabetic characters. 3. If the input string contains non-alphabetic characters, count how many characters are not alphabetic. 4. Print \\"Valid input!\\" if the input is purely alphabetic. 5. Print \\"Invalid input. Non-alphabetic characters: X\\", where X is the number of non-alphabetic characters found in the input string. 6. The function should continuously prompt the user for input until a valid input (purely alphabetic) is received. Here is a breakdown of what your function should do: - Prompt the user to enter a string. - Validate the user input. - Provide feedback based on the criteria mentioned above. - Continue prompting the user until a valid string is entered. - Use a while loop to implement the continuous prompting logic. Your implementation of `process_user_input` should follow these guidelines and handle string validation and looping appropriately.","solution":"def is_alphabetic(string): return string.isalpha() def count_non_alphabetic(string): return sum(not char.isalpha() for char in string) def process_user_input(input_func=input): while True: user_input = input_func(\\"Please enter a string: \\") if not isinstance(user_input, str): continue if is_alphabetic(user_input): print(\\"Valid input!\\") break else: non_alpha_count = count_non_alphabetic(user_input) print(f\\"Invalid input. Non-alphabetic characters: {non_alpha_count}\\")"},{"question":"In the context of data analysis and manipulation, calculating the weighted average for a dataset is a common operation, especially when handling samples with different levels of importance or confidence. A weighted average provides a more representative measure by taking into account these varying weights. Consider the following function `weighted_mean(values, weights)`, which computes the weighted mean of the given values using their respective weights. Your task is to implement the `weighted_mean` function by utilizing the `numpy` library for efficient array operations. The formula for calculating the weighted mean is: [ text{Weighted Mean} = frac{sum{(values_i cdot weights_i)}}{sum{weights_i}} ] where: - (values_i) represents the elements of the given `values` array. - (weights_i) represents the corresponding elements of the `weights` array. # Function Signature and Parameters ```python def weighted_mean(values, weights): Calculate the weighted mean of the given values using their respective weights. :param values: A numpy array of numerical values. :param weights: A numpy array of weights corresponding to the values. :return: The weighted mean (float). ``` # Task 1. Implement the `weighted_mean` function using the provided function signature. 2. Use the `numpy` library functions to handle array operations efficiently. 3. Ensure proper handling of zero weights and division by zero situations. # Example Usage: ```python import numpy as np values = np.array([4.0, 5.0, 6.0]) weights = np.array([0.2, 0.3, 0.5]) mean_value = weighted_mean(values, weights) print(mean_value) # Output: 5.3 ``` # Expected Output: For the given example, the weighted mean should be calculated as: [ text{Weighted Mean} = frac{(4.0 cdot 0.2) + (5.0 cdot 0.3) + (6.0 cdot 0.5)}{0.2 + 0.3 + 0.5} = frac{5.3}{1.0} = 5.3 ] Ensure that your implementation correctly performs the weighted mean calculation for any valid input arrays provided.","solution":"import numpy as np def weighted_mean(values, weights): Calculate the weighted mean of the given values using their respective weights. :param values: A numpy array of numerical values. :param weights: A numpy array of weights corresponding to the values. :return: The weighted mean (float). weighted_sum = np.sum(values * weights) total_weight = np.sum(weights) if total_weight == 0: raise ValueError(\\"Sum of weights must not be zero.\\") return weighted_sum / total_weight"},{"question":"Read a file consisting of integer values separated by whitespace. Compute the following statistics: the mean, median, mode, and standard deviation of the numbers. If there are multiple modes, return any one of them. You should consider edge cases such as an empty file or a file with non-numeric values and raise appropriate exceptions. The function should raise the exception for: ValueError: If the file is empty or contains non-numeric values. FileNotFoundError: If the file does not exist or cannot be read. The function should output the statistics in a dictionary with the format: { \\"mean\\": float, \\"median\\": float, \\"mode\\": int, \\"std_dev\\": float } You should write self-contained code starting with: ``` import statistics def compute_statistics(file_path: str) -> dict: ```","solution":"import os import statistics def compute_statistics(file_path: str) -> dict: Computes the mean, median, mode, and standard deviation of integer values in a file. Parameters: file_path (str): The path to the file containing integer values separated by whitespace. Returns: dict: A dictionary with keys \'mean\', \'median\', \'mode\', and \'std_dev\'. Raises: ValueError: If the file is empty or contains non-numeric values. FileNotFoundError: If the file does not exist or cannot be read. if not os.path.exists(file_path): raise FileNotFoundError(f\\"The file \'{file_path}\' does not exist or cannot be read.\\") with open(file_path, \'r\') as f: content = f.read().strip() if not content: raise ValueError(\\"The file is empty.\\") try: numbers = list(map(int, content.split())) except ValueError: raise ValueError(\\"The file contains non-numeric values.\\") if not numbers: raise ValueError(\\"The file does not contain any integers.\\") mean_val = statistics.mean(numbers) median_val = statistics.median(numbers) mode_val = statistics.mode(numbers) std_dev_val = statistics.stdev(numbers) return { \\"mean\\": mean_val, \\"median\\": median_val, \\"mode\\": mode_val, \\"std_dev\\": std_dev_val }"},{"question":"Design and implement a function that, given a list of integers, returns a new list where each element is the product of all other elements in the list except the one at the current index. You should solve this without using division and in O(n) time complexity. The function should output: - list: A list where each element is the product of all other elements in the input list except the element at the current index. You should write self-contained code starting with: ``` def product_except_self(nums): ```","solution":"def product_except_self(nums): Returns a list where each element at index `i` is the product of all the elements in the nums list except nums[i]. length = len(nums) if length == 0: return [] # Initialize the result array with 1\'s result = [1] * length # Calculate left product for each index left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right product for each index and multiply with the result right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are tasked with writing a function named `find_largest_divisible_subset`. This function is designed to find the largest subset of a list, such that every pair of elements in the subset satisfies the divisibility condition. The function should perform the following steps: 1. Sort the input list in ascending order. 2. Create an array to store the length of the largest subset that ends at each position. 3. Create an array to keep track of the previous index to reconstruct the subset. 4. Construct the largest divisible subset by iterating through the sorted list and checking divisibility conditions. 5. Finally, reconstruct the subset using the information from the array in step 3. The goal of this problem is to practice dynamic programming techniques and gain an understanding of array manipulation within given constraints. # Function Signature ```python def find_largest_divisible_subset(nums: list) -> list: ``` # Parameters - `nums`: A list of integers. # Returns - A list representing the largest subset where each pair of elements is divisible by each other. # Example ```python nums = [1, 2, 3, 8, 4] result = find_largest_divisible_subset(nums) print(result) # Output should be a subset such as [1, 2, 4, 8] ``` # Constraints - The input list `nums` will contain at least 1 integer and at most 100 integers. - All integers in the input list will be between 1 and 10^9. # Notes - Ensure the function handles edge cases, such as when the input list has a single element. - Optimize the function for efficiency given the potential size of the input list.","solution":"def find_largest_divisible_subset(nums: list) -> list: if not nums: return [] nums.sort() n = len(nums) dp = [1] * n previous_index = [-1] * n max_subset_size = 1 max_subset_index = 0 for i in range(1, n): for j in range(i): if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 previous_index[i] = j if dp[i] > max_subset_size: max_subset_size = dp[i] max_subset_index = i result = [] k = max_subset_index while k >= 0: result.append(nums[k]) k = previous_index[k] result.reverse() return result"},{"question":"**Problem: Finding the Longest Substring with Unique Characters** You are required to write a function `longest_unique_substring` that finds the longest substring within a given string that contains all unique characters. This function is crucial for text processing applications where understanding the diversity of characters in substrings is important, such as data compression algorithms and pattern recognition. # Function Definition ```python def longest_unique_substring(s): Finds the longest substring with all unique characters. Args: s (str): The input string Returns: str: The longest substring with all unique characters Raises: TypeError: If the input is not a string ``` # Input - `s`: A string representing the input text. # Output - The function returns a string that is the longest substring containing all unique characters from the input text. If there are multiple substrings with the same maximum length, return the first one encountered. # Constraints 1. The input string contains ASCII characters. 2. Assume the input string length does not exceed 10,000 characters. # Additional Information - Utilize a sliding window approach to efficiently find the longest substring with all unique characters within the given string. - Ensure that your solution handles edge cases, such as an empty string and strings with only one unique character. # Example ```python > longest_unique_substring(\\"abcabcbb\\") \\"abc\\" > longest_unique_substring(\\"bbbbb\\") \\"b\\" > longest_unique_substring(\\"pwwkew\\") \\"wke\\" > longest_unique_substring(\\"abcdef\\") \\"abcdef\\" > longest_unique_substring(\\"\\") \\"\\" ``` # Libraries You are not required to use any specific external libraries for this problem, standard Python libraries suffice. The task involves creating an efficient algorithm to process the input string and find the longest substring where no characters repeat. This type of problem is common in competitive programming and real-world applications that deal with string manipulation and analysis.","solution":"def longest_unique_substring(s): if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") n = len(s) if n == 0: return \\"\\" char_index = {} left = 0 max_length = 0 start_index = 0 for right in range(n): if s[right] in char_index: left = max(char_index[s[right]] + 1, left) char_index[s[right]] = right if right - left + 1 > max_length: max_length = right - left + 1 start_index = left return s[start_index:start_index + max_length]"},{"question":"A software company is developing an application that requires tracking and analyzing user activities across various sessions. Each session contains multiple events, and each event records an activity conducted by the user with a timestamp. To facilitate the reporting and visualization of user behaviors over time, the company needs to preprocess the raw event data. You are tasked with writing a Python function called `analyze_sessions(data, session_length=3600, timestamp_col=0, event_col=1, delimiter=\',\')` that performs the following operations and returns an aggregated summary: 1. Parse the raw event data, which is provided as a list of strings. Each string represents a single event with columns separated by a specified delimiter. 2. Group events into sessions based on a fixed time window, with each session lasting `session_length` seconds. 3. For each session: - Count the number of events. - Identify the unique event types. - Calculate the average time interval between consecutive events within the session. 4. Store and return these aggregated metrics in a dictionary format where each key is the session number and the value is another dictionary containing the metrics. Specific Requirements: 1. Utilize basic list and string operations to handle and parse the data entries. 2. Maintain the order of events as they appear in the data. 3. Ensure that timestamp parsing and calculations correctly handle session boundaries. __Function Signature:__ ```python def analyze_sessions(data, session_length=3600, timestamp_col=0, event_col=1, delimiter=\',\'): ``` __Parameters:__ - `data` (list of str): List of raw event data strings, with each string representing an event. - `session_length` (int): Duration of each session in seconds (default is 3600 seconds or 1 hour). - `timestamp_col` (int): The column index of the timestamp in each event string (default is 0). - `event_col` (int): The column index of the event type in each event string (default is 1). - `delimiter` (str): The character separating columns in the event string (default is \',\').","solution":"def analyze_sessions(data, session_length=3600, timestamp_col=0, event_col=1, delimiter=\',\'): from collections import defaultdict import numpy as np sessions = defaultdict(list) session_metrics = {} # Parse the data for line in data: columns = line.split(delimiter) timestamp = int(columns[timestamp_col]) event_type = columns[event_col] # Determine the session number session_number = timestamp // session_length sessions[session_number].append((timestamp, event_type)) # Analyze sessions for session_number, events in sessions.items(): timestamps = [event[0] for event in events] event_types = [event[1] for event in events] event_count = len(events) unique_event_types = set(event_types) if event_count > 1: time_intervals = np.diff(timestamps) avg_interval = np.mean(time_intervals) else: avg_interval = 0 # No intervals in a session with a single event session_metrics[session_number] = { \'event_count\': event_count, \'unique_event_types\': unique_event_types, \'avg_interval\': avg_interval } return session_metrics"},{"question":"Implement a function that generates a random walk in 2-D space over a specified number of steps, starting at the origin. At each step, the point can move in one of the four cardinal directions (up, down, left, right) with equal probability. Plot the path taken by the random walk and return the final coordinates after the specified number of steps. The function should output: tuple: A tuple containing an array of tuples representing the coordinates of the random walk at each step, a matplotlib Axes object for the plot, and a tuple with the final coordinates. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def random_walk_2d(steps): np.random.seed(0) # For reproducibility ```","solution":"import numpy as np import matplotlib.pyplot as plt def random_walk_2d(steps): np.random.seed(0) # For reproducibility # Define moves: (x, y) moves = np.array([(0, 1), (0, -1), (-1, 0), (1, 0)]) # Initialize the position array position = np.zeros((steps + 1, 2)) for i in range(steps): step = moves[np.random.randint(4)] position[i + 1] = position[i] + step final_position = tuple(position[-1]) # Plot the random walk fig, ax = plt.subplots() ax.plot(position[:, 0], position[:, 1], marker=\'o\') ax.set_title(\'2D Random Walk\') ax.set_xlabel(\'X\') ax.set_ylabel(\'Y\') ax.grid() return position, ax, final_position"},{"question":"Create a function named `generate_pascal_triangle(n)` that generates Pascal\'s Triangle up to `n` rows where `n` is a positive integer parameter. The function should return a list of lists, where each inner list represents a row of Pascal\'s Triangle. Your implementation should use the following approach: 1. The first row is `[1]`. 2. Each subsequent row is constructed by summing pairs of adjacent elements from the previous row, with 1s at the beginning and end of each row. For example, calling `generate_pascal_triangle(5)` should return the following list: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ```","solution":"def generate_pascal_triangle(n): Generates Pascal\'s Triangle up to n rows. Args: n (int): Number of rows in Pascal\'s Triangle. Returns: List[List[int]]: A list of lists representing Pascal\'s Triangle. if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"In this problem, you are required to write a function `flatten_nested_list(nested_list)` that takes a list of potentially nested lists and returns a single flattened list containing all the elements of the nested lists, preserving the original order. # Function Signature ```python def flatten_nested_list(nested_list: list) -> list: ... ``` # Parameters - **nested_list** (list): A list that may contain other lists as elements. # Returns - **flat_list** (list): A single list that contains all the elements from the nested lists, in their original order. # Constraints - The input list may contain nested lists to any depth. - The input list can contain elements of any data type. - Do not use built-in functions or libraries specifically intended for flattening lists. # Example Usage ```python nested_list = [1, [2, [3, 4], 5], 6, [7, 8]] flat_list = flatten_nested_list(nested_list) print(flat_list) # Expected output: [1, 2, 3, 4, 5, 6, 7, 8] ``` ```python nested_list = [[[\'a\']], \'b\', [\'c\', [\'d\']]] flat_list = flatten_nested_list(nested_list) print(flat_list) # Expected output: [\'a\', \'b\', \'c\', \'d\'] ``` # Additional Notes - Ensure that the function handles each nested level appropriately. - Pay attention to preserving the order of elements in the final flattened list. - This problem may require a recursive approach, so consider the recursive nature of nested structures in your solution. Your task is to implement the `flatten_nested_list` function to meet the requirements described above.","solution":"def flatten_nested_list(nested_list): Flattens a nested list to a single list with all elements in the original order. :param nested_list: List that may contain nested lists. :return: Flattened list. flat_list = [] def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item) else: flat_list.append(item) flatten(nested_list) return flat_list"},{"question":"You are tasked with writing a Python function named `shortest_palindrome(s)` that returns the shortest palindrome which can be formed by adding characters to the beginning of the given string `s`. A palindrome is a string that reads the same forward and backward. Here are the specific steps your function should take: 1. Check if the given string `s` is already a palindrome. If it is, return `s` immediately. 2. If not, utilize two pointers: start from the beginning and end of the string. 3. Gradually try to match characters by moving the pointers towards the center and keep track of the characters needed to prepend in order to make the string a palindrome. 4. Construct the shortest palindrome by adding the necessary characters to the beginning of `s`. Your function should return the shortest palindrome string formed. Example: ```python print(shortest_palindrome(\\"race\\")) # Output: \\"ecarace\\" print(shortest_palindrome(\\"aacecaaa\\")) # Output: \\"aaacecaaa\\" print(shortest_palindrome(\\"abcd\\")) # Output: \\"dcbabcd\\" print(shortest_palindrome(\\"aba\\")) # Output: \\"aba\\" ```","solution":"def shortest_palindrome(s): Returns the shortest palindrome which can be formed by adding characters to the beginning of the given string `s`. def is_palindrome(st): return st == st[::-1] if is_palindrome(s): return s # Find the longest palindromic prefix for i in range(len(s), 0, -1): if is_palindrome(s[:i]): break suffix = s[i:][::-1] return suffix + s # Example usage print(shortest_palindrome(\\"race\\")) # Output: \\"ecarace\\" print(shortest_palindrome(\\"aacecaaa\\")) # Output: \\"aaacecaaa\\" print(shortest_palindrome(\\"abcd\\")) # Output: \\"dcbabcd\\" print(shortest_palindrome(\\"aba\\")) # Output: \\"aba\\""},{"question":"** Create a function `max_balanced_substring(s)` that finds the length of the longest balanced substring within a given string `s`. A balanced substring is defined as one that has an equal number of \'L\' and \'R\' characters. The function should have the following signature: ```python def max_balanced_substring(s: str) -> int: ... ``` # Input: - `s`: A string containing only the characters \'L\' and \'R\'. # Output: - Returns an integer representing the length of the longest balanced substring. # Constraints: - The input string `s` will have a length between 1 and 1000, inclusive. # Steps: 1. Initialize a counter variable to keep track of the balance between \'L\' and \'R\' characters. 2. Initialize a max length variable to store the length of the longest balanced substring found. 3. Iterate through the string and adjust the counter based on whether the character is \'L\' or \'R\'. 4. Each time the counter reaches zero, it indicates a balanced substring, and you update the max length variable if the current balanced substring is longer than the previously recorded one. # Example: ```python # Sample Input s = \\"RLRRLLRLRL\\" # Function call result = max_balanced_substring(s) # Expected Output print(result) # Should print 10 ``` Write the `max_balanced_substring` function to solve this problem. **","solution":"def max_balanced_substring(s: str) -> int: Finds the length of the longest balanced substring within the given string s. A balanced substring contains equal number of \'L\' and \'R\' characters. max_length = 0 balance = 0 current_length = 0 for char in s: if char == \'L\': balance += 1 elif char == \'R\': balance -= 1 current_length += 1 if balance == 0: max_length = max(max_length, current_length) return max_length"},{"question":"Create a function that reads a CSV file containing a list of student names and their grades and visualizes the grade distribution with a pie chart. Make sure to use the \'csv\' module to read the file and \'matplotlib\' to generate the pie chart. The CSV file will have two columns: \'Name\' representing the student\'s name, and \'Grade\' representing their grade as an integer. The function should output: - A dictionary where the keys are grades and the values are the counts of students who received each grade. - A plt.Figure object representing the pie chart. You should write self-contained code starting with: ``` import csv import matplotlib.pyplot as plt def task_func(csv_file): ```","solution":"import csv import matplotlib.pyplot as plt def task_func(csv_file): # Read the CSV file and count the grades grades_count = {} with open(csv_file, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: grade = int(row[\'Grade\']) if grade in grades_count: grades_count[grade] += 1 else: grades_count[grade] = 1 # Create a pie chart labels = grades_count.keys() sizes = grades_count.values() fig, ax = plt.subplots() ax.pie(sizes, labels=labels, autopct=\'%1.1f%%\', startangle=90) ax.axis(\'equal\') # Equal aspect ratio ensures that pie is drawn as a circle. return grades_count, fig"},{"question":"# Shortest Common Supersequence You are required to implement a function `shortest_common_supersequence(a: str, b: str) -> str` that finds the shortest common supersequence of two input strings `a` and `b`. A shortest common supersequence is a string that contains both `a` and `b` as subsequences, with the smallest possible length. # Input: - `a` (str): The first string. - `b` (str): The second string. # Output: - Returns a string which is the shortest common supersequence of strings `a` and `b`. # Constraints: - 1 <= len(a), len(b) <= 100 - The input strings `a` and `b` will only contain lowercase English letters. # Example: 1. `shortest_common_supersequence(\\"abac\\", \\"cab\\")` should return `\\"cabac\\"` 2. `shortest_common_supersequence(\\"geek\\", \\"eke\\")` should return `\\"geeke\\"` 3. `shortest_common_supersequence(\\"abc\\", \\"ac\\")` should return `\\"abc\\"` # Requirements: You must use dynamic programming to solve the problem. ```python def shortest_common_supersequence(a: str, b: str) -> str: # Your implementation here pass ```","solution":"def shortest_common_supersequence(a: str, b: str) -> str: m, n = len(a), len(b) # Create the DP table dp = [[\\"\\" for _ in range(n + 1)] for _ in range(m + 1)] # Initialize the DP table for i in range(1, m + 1): dp[i][0] = dp[i - 1][0] + a[i - 1] for j in range(1, n + 1): dp[0][j] = dp[0][j - 1] + b[j - 1] # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + a[i - 1] else: if len(dp[i - 1][j]) < len(dp[i][j - 1]): dp[i][j] = dp[i - 1][j] + a[i - 1] else: dp[i][j] = dp[i][j - 1] + b[j - 1] return dp[m][n]"},{"question":"You are given a list of strings representing different book titles in a library. Some of these titles might be repeated, and you wish to identify the number of unique titles and the count of each unique title in the list. Write a function `analyze_books(title_list)` that processes this list and returns two results: 1. The count of unique book titles present in the list. 2. A dictionary where keys are the unique book titles and values are their respective counts in the list. **Input:** - `title_list` (list): A list of strings where each string represents a book title. Titles might have mixed cases (e.g., \\"Harry Potter\\" and \\"harry potter\\" should be treated as the same title). **Output:** - A tuple `(unique_count, title_counts)`: - `unique_count` (int): The number of unique book titles. - `title_counts` (dictionary): A dictionary with unique book titles as keys and their counts as values. **Example Usage:** ```python title_list = [ \\"To Kill a Mockingbird\\", \\"1984\\", \\"harry potter\\", \\"The Great Gatsby\\", \\"1984\\", \\"Harry Potter\\", \\"Moby Dick\\", \\"to kill a mockingbird\\" ] result = analyze_books(title_list) print(result) # Expected Output: # (5, { # \'to kill a mockingbird\': 2, # \'1984\': 2, # \'harry potter\': 2, # \'the great gatsby\': 1, # \'moby dick\': 1 # }) ``` In this problem, you need to: 1. Normalize the book titles to handle case insensitivity. 2. Use appropriate data structures to count the frequency of each unique title. 3. Return the count of unique titles and their frequency. **Note:** - Assume that the input list is non-empty and contains at least one book title. - Titles should be compared in a case-insensitive manner, but the dictionary keys should preserve the original case of the first occurrence in the list.","solution":"def analyze_books(title_list): Analyzes the list of book titles and provides the number of unique titles and their counts. Parameters: title_list (list of str): List of book titles. Returns: tuple: A tuple containing: - The number of unique book titles. - A dictionary with unique book titles as keys and their counts as values. title_dict = {} case_insensitive_titles = {} for title in title_list: lower_title = title.lower() if lower_title in case_insensitive_titles: original_title = case_insensitive_titles[lower_title] title_dict[original_title] += 1 else: title_dict[title] = 1 case_insensitive_titles[lower_title] = title unique_count = len(title_dict) return unique_count, title_dict"},{"question":"You are asked to create a function that reads a text file containing multiple sentences and computes the average word length for each sentence. The function should then plot and save a bar chart displaying the average word length for each sentence using Matplotlib. The function `plot_avg_word_length` should: 1. Read a text file and split it into individual sentences. 2. Compute the average word length for each sentence. 3. Generate and save a bar chart displaying the average word length for each sentence using Matplotlib. Function signature: ```python def plot_avg_word_length(filename): Reads a text file, computes the average word length per sentence, and saves a bar chart of the results. Parameters: filename (str): The name of the text file to read. Returns: None ``` # Inputs: - `filename`: A string indicating the name of the text file. # Output: The function should save the plot as \\"average_word_length.png\\". Use: - The `open` function for reading the file. - `matplotlib.pyplot` for generating and saving the bar chart. # Example: Given a file named \\"sample.txt\\" with the following content: ``` This is the first sentence. Here is another one. This one is a bit longer than the previous sentences. ``` The function should read the file, compute average word lengths for each sentence, and generate a bar chart with the following bars: - \\"This is the first sentence.\\" -> Length: 3.2 - \\"Here is another one.\\" -> Length: 3.75 - \\"This one is a bit longer than the previous sentences.\\" -> Length: 3.86 The bar chart should be saved as \\"average_word_length.png\\".","solution":"import matplotlib.pyplot as plt def plot_avg_word_length(filename): Reads a text file, computes the average word length per sentence, and saves a bar chart of the results. Parameters: filename (str): The name of the text file to read. Returns: None with open(filename, \'r\') as file: text = file.read() sentences = text.split(\\". \\") avg_word_lengths = [] for sentence in sentences: words = sentence.split() if words: avg_word_length = sum(len(word) for word in words) / len(words) avg_word_lengths.append(avg_word_length) plt.figure(figsize=(10, 5)) plt.bar(range(len(avg_word_lengths)), avg_word_lengths, tick_label=[f\'Sentence {i+1}\' for i in range(len(avg_word_lengths))]) plt.xlabel(\'Sentences\') plt.ylabel(\'Average Word Length\') plt.title(\'Average Word Length per Sentence\') plt.savefig(\'average_word_length.png\') plt.close()"},{"question":"You are tasked with writing a Python function to analyze and summarize information about the columns in a given pandas DataFrame. Specifically, you need to compute the count of missing values and the percentage of missing values for each column. Additionally, for any column that contains numerical data, you should calculate and include its mean and standard deviation, and for non-numerical data, the most frequent value. Function Specification - **Function Name**: `summarize_dataframe` - **Parameters**: - `df` (pd.DataFrame): A pandas DataFrame containing diverse columns. - **Returns**: A pandas DataFrame summary that includes the following columns: - `Column Name`: The name of the DataFrame column. - `Missing Count`: The count of missing values in the column. - `Missing Percentage`: The percentage of missing values in the column. - `Mean`: The mean of the column if it is numeric, otherwise `NaN`. - `Standard Deviation`: The standard deviation of the column if it is numeric, otherwise `NaN`. - `Most Frequent`: The most frequent value in the column if it is non-numeric, otherwise `NaN`. Input Example ```python import pandas as pd import numpy as np data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Edward\'], \'Age\': [24, np.nan, 22, 32, np.nan], \'Salary\': [50000, 60000, 65000, np.nan, 70000], \'Department\': [\'HR\', \'IT\', \'HR\', \'IT\', \'HR\'] } df = pd.DataFrame(data) ``` Usage Example ```python summary_df = summarize_dataframe(df) print(summary_df) ``` Expected Output Example The output DataFrame should look similar to this: ``` Column Name Missing Count Missing Percentage Mean Standard Deviation Most Frequent 0 Name 0 0.0 NaN NaN Alice 1 Age 2 40.0 26.00 5.291503 NaN 2 Salary 1 20.0 61250 8539.125638 NaN 3 Department 0 0.0 NaN NaN HR ``` Ensure that the output exhibits appropriate rounding for numerical values to a significant number of decimal places (e.g., 2 decimal places for percentages and 5 for the standard deviation).","solution":"import pandas as pd import numpy as np def summarize_dataframe(df): summary = [] for column in df.columns: missing_count = df[column].isna().sum() missing_percentage = (missing_count / len(df)) * 100 if pd.api.types.is_numeric_dtype(df[column]): mean = df[column].mean() std_dev = df[column].std() most_freq = np.nan else: mean = np.nan std_dev = np.nan most_freq = df[column].mode()[0] if not df[column].mode().empty else np.nan summary.append({ \'Column Name\': column, \'Missing Count\': missing_count, \'Missing Percentage\': round(missing_percentage, 2), \'Mean\': round(mean, 5) if not np.isnan(mean) else np.nan, \'Standard Deviation\': round(std_dev, 5) if not np.isnan(std_dev) else np.nan, \'Most Frequent\': most_freq }) return pd.DataFrame(summary)"},{"question":"You are required to write a function that serializes a nested dictionary into a JSON string, ensuring the keys are sorted in ascending order. If any value is another dictionary, the function should recursively sort its keys in a similar manner. Function Signature ```python def serialize_sorted_json(data: dict) -> str: pass ``` Requirements: 1. Use Python\'s `json` library for JSON serialization. 2. The function should accept a single parameter: - `data` (dict): The nested dictionary to be serialized. 3. The function should return a JSON string with the dictionary\'s keys sorted in ascending order at all levels. Example usage: ```python nested_dict = { \\"b\\": {\\"d\\": 3, \\"c\\": 2}, \\"a\\": [1, 2, 3], \\"e\\": {\\"g\\": 5, \\"f\\": 4} } result = serialize_sorted_json(nested_dict) print(result) ``` Expected Output: ``` \'{\\"a\\": [1, 2, 3], \\"b\\": {\\"c\\": 2, \\"d\\": 3}, \\"e\\": {\\"f\\": 4, \\"g\\": 5}}\' ``` Additional Notes: - Ensure the function handles various data types appropriately (i.e., strings, numbers, lists, dictionaries). - The function should handle deeply nested dictionaries without performance degradation.","solution":"import json def serialize_sorted_json(data: dict) -> str: Serializes a nested dictionary into a JSON string, ensuring keys are sorted in ascending order. Args: data (dict): The nested dictionary to be serialized. Returns: str: JSON string with the dictionary\'s keys sorted in ascending order. def sort_keys(obj): if isinstance(obj, dict): sorted_obj = {k: sort_keys(v) for k, v in sorted(obj.items())} return sorted_obj return obj sorted_data = sort_keys(data) return json.dumps(sorted_data)"},{"question":"A company\'s event management system needs to generate a list of all possible combinations of menu items for a specific number of courses. Each course can be chosen from a different set of items. Write a function named `generate_menu_combinations(courses)` which accepts a list of lists where each sublist represents the menu items available for a particular course. The function should print each unique combination where one item from each course is selected. # Implementation Details: - Use recursion or iteration to generate the combinations. - Each combination should be represented as a tuple of selected items. - Print each combination on a new line. # Example: If the function is called as `generate_menu_combinations([[\'Salad\', \'Soup\'], [\'Steak\', \'Chicken\'], [\'Cake\', \'Ice Cream\']])`, the output should be: ``` (\'Salad\', \'Steak\', \'Cake\') (\'Salad\', \'Steak\', \'Ice Cream\') (\'Salad\', \'Chicken\', \'Cake\') (\'Salad\', \'Chicken\', \'Ice Cream\') (\'Soup\', \'Steak\', \'Cake\') (\'Soup\', \'Steak\', \'Ice Cream\') (\'Soup\', \'Chicken\', \'Cake\') (\'Soup\', \'Chicken\', \'Ice Cream\') ``` # Constraints: - Each sublist of courses will have between 1 and 5 items. - The number of sublists (courses) will be between 1 and 5. - Course items will be strings and unique within each course. # Notes: - The order of printed combinations does not matter. - Ensure that no combination is repeated.","solution":"from itertools import product def generate_menu_combinations(courses): Generates and prints all possible combinations of menu items for a specific number of courses. Parameters: courses (list of lists): A list of lists where each sublist contains menu items available for a particular course. combinations = list(product(*courses)) for combination in combinations: print(combination)"},{"question":"A company has a fleet of vehicles, and you are tasked to develop a function that calculates the total distance covered by all vehicles over a certain period. Each vehicle constantly sends updates on its position via GPS coordinates (latitude, longitude). These updates are stored in a dictionary where the key is the vehicle ID and the value is a list of tuples representing the GPS coordinates in the order they were received. The function should be named `calculate_total_distance` and take one parameter: - `vehicle_positions`: A dictionary where each key is a string representing the vehicle ID and each value is a list of tuples, each tuple containing two floats representing the latitude and longitude of the vehicle\'s position. Return the total distance covered by all vehicles as a float. The distance between two positions should be calculated using the Haversine formula to account for the curvature of the Earth. **Function Signature:** ```python def calculate_total_distance(vehicle_positions: dict[str, list[tuple[float, float]]]) -> float: pass ``` **Requirements:** 1. Implement the Haversine formula to calculate the distance between two GPS coordinates. 2. Raise an appropriate error if the input dictionary is empty or if any vehicle contains less than 2 position updates. **Example:** ```python vehicle_positions = { \\"vehicle_1\\": [(34.052235, -118.243683), (36.169941, -115.139832)], \\"vehicle_2\\": [(40.712776, -74.005974), (34.052235, -118.243683)] } total_distance = calculate_total_distance(vehicle_positions) print(total_distance) # Output should be the total distance covered by all vehicles ```","solution":"import math def haversine(coord1, coord2): Calculate the great-circle distance between two points on the Earth specified in decimal degrees. # Convert decimal degrees to radians lat1, lon1 = coord1 lat2, lon2 = coord2 rlat1 = math.radians(lat1) rlat2 = math.radians(lat2) rdelta_lat = math.radians(lat2 - lat1) rdelta_lon = math.radians(lon2 - lon1) # Haversine formula a = math.sin(rdelta_lat / 2) ** 2 + math.cos(rlat1) * math.cos(rlat2) * math.sin(rdelta_lon / 2) ** 2 c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)) radius_earth_km = 6371 # Radius of Earth in kilometers distance = radius_earth_km * c return distance def calculate_total_distance(vehicle_positions): Calculate the total distance covered by all vehicles given their GPS positions. if not vehicle_positions: raise ValueError(\\"The input dictionary is empty.\\") total_distance = 0.0 for vehicle_id, positions in vehicle_positions.items(): if len(positions) < 2: raise ValueError(f\\"Vehicle {vehicle_id} must have at least two position updates.\\") for i in range(len(positions) - 1): total_distance += haversine(positions[i], positions[i + 1]) return total_distance"},{"question":"In this problem, you are required to write a function named `rotate_matrix(matrix)` that rotates a given square matrix 90 degrees clockwise. The rotation should be done in-place, meaning you cannot use any additional matrices or significant extra space. A matrix is represented as a 2D list, where the nested lists are rows of the matrix. For instance, given the following 3x3 matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The matrix, when rotated 90 degrees clockwise, will transform into: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Function Signature ```python def rotate_matrix(matrix: list[list[int]]) -> None: # your code here ``` # Input - `matrix`: A list of lists containing integers, where each list represents a row of the matrix. The matrix is guaranteed to be square, i.e., it has the same number of rows and columns. # Output - This function should modify the input `matrix` in-place and return `None`. # Examples 1. `rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])` should transform the matrix to `[[7, 4, 1],[8, 5, 2],[9, 6, 3]]`. 2. `rotate_matrix([[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]])` should transform the matrix to `[[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]`. Note: Your solution should perform the rotation in-place and must not use extra space for another matrix.","solution":"def rotate_matrix(matrix: list[list[int]]) -> None: Rotates the given square matrix 90 degrees clockwise in-place. n = len(matrix) # First step: Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Second step: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function `evaluate_calculator_operations(operations: list[str]) -> list[float]` that takes a list of strings as input, where each string describes a basic arithmetic operation: addition, subtraction, multiplication, or division. The function should evaluate each operation in order and return a list of the results. **Function Specifications:** 1. **Parameters**: - `operations` (list of str): Each element in the list is a string in one of the following formats: - `\\"x + y\\"` - `\\"x - y\\"` - `\\"x * y\\"` - `\\"x / y\\"` Here, `x` and `y` are either integers or floats. Assume valid operations that do not involve dividing by zero. 2. **Return**: - A list of floats representing the result for each input operation in the same order. **Example**: ```python input_operations = [\\"3 + 2\\", \\"10 - 5\\", \\"4 * 2.5\\", \\"10 / 4\\"] evaluate_calculator_operations(input_operations) ``` Output: ```python [5.0, 5.0, 10.0, 2.5] ``` **Constraints**: - Do not use the `eval` function for security reasons. - Write a helper function to parse and evaluate each operation. - Ensure that basic arithmetic operations are handled correctly for both integer and floating-point operands.","solution":"def evaluate_calculator_operations(operations: list[str]) -> list[float]: Evaluates a list of arithmetic operations given as strings. Args: operations (list of str): Each element is a string in one of the following formats: \'x + y\', \'x - y\', \'x * y\', \'x / y\' where x and y are either integers or floats. Returns: list of float: The result of each operation in the same order. def evaluate_operation(operation: str) -> float: Evaluates a single arithmetic operation string. Args: operation (str): An arithmetic operation string. Returns: float: The result of the operation. parts = operation.split() x = float(parts[0]) operator = parts[1] y = float(parts[2]) if operator == \\"+\\": return x + y elif operator == \\"-\\": return x - y elif operator == \\"*\\": return x * y elif operator == \\"/\\": return x / y return [evaluate_operation(op) for op in operations]"},{"question":"You are tasked with creating a function that simulates a basic elevator system in a building. The elevator can go up or down one floor at a time and services a queue of requests in the order they arrive. Your goal is to keep track of the elevator\'s position and direction, and construct a list of floors visited in sequence. The function you need to implement is `simulate_elevator(requests: List[int], start_floor: int) -> List[int]`, which takes two inputs: - `requests`: a list of integers representing the floors requested by passengers. - `start_floor`: an integer representing the initial position of the elevator. The function should return a list of integers representing the floors visited by the elevator in sequence. Here\'s a template of the function you need to complete: ```python from typing import List def simulate_elevator(requests: List[int], start_floor: int) -> List[int]: current_floor = start_floor floors_visited = [current_floor] for request in requests: if request > current_floor: while current_floor < request: current_floor += 1 floors_visited.append(current_floor) elif request < current_floor: while current_floor > request: current_floor -= 1 floors_visited.append(current_floor) return floors_visited ``` Example: ```python # Example input requests = [3, 1, 5] start_floor = 2 # Expected output # The elevator starts at floor 2, moves to floor 3, # then moves down to floor 1, and finally up to floor 5. result = [2, 3, 2, 1, 2, 3, 4, 5] ```","solution":"from typing import List def simulate_elevator(requests: List[int], start_floor: int) -> List[int]: current_floor = start_floor floors_visited = [current_floor] for request in requests: if request > current_floor: while current_floor < request: current_floor += 1 floors_visited.append(current_floor) elif request < current_floor: while current_floor > request: current_floor -= 1 floors_visited.append(current_floor) return floors_visited"},{"question":"In this problem, you are tasked with implementing a function that computes the maximum rectangular area in a histogram. Given an array of integers representing the histogram\'s bar heights, the goal is to determine the largest area of a rectangle that can be formed within the bounds of the histogram. A histogram is represented by a list of non-negative integers where each integer represents the height of a bar in the histogram. The width of each bar is assumed to be 1. # Steps to Solve the Problem: 1. **Initialize Variables:** - Use a stack to maintain the indices of the bars in the histogram. - Initialize `max_area` to keep track of the largest rectangle found. 2. **Iterate through the Histogram:** - For each bar, perform the following: - While the stack is not empty and the current bar\'s height is less than the height of the bar at the index stored on top of the stack: - Pop the index from the stack and compute the area of the rectangle with the popped height as the smallest (or minimum height) bar. - Calculate the area with the popped height as the smallest height bar. Update `max_area` if the calculated area is larger. - Push the current bar index to the stack. 3. **Finalize the Remaining Bars:** - After iterating through all bars, pop the remaining indices from the stack and calculate their respective rectangle areas. Update `max_area` if the calculated area is larger. # Constraints: - The length of the histogram list is between 1 and 10,000. - The height of each bar is between 0 and 10,000. **Function to Implement:** ```python def largest_rectangle_area(histogram): Calculate the area of the largest rectangle that can be formed within the histogram. Parameters: histogram (list of int): A list of non-negative integers representing the heights of histogram bars. Returns: int: The area of the largest rectangle. pass ``` **Example:** ```python # Example 1: histogram = [2, 1, 5, 6, 2, 3] # The largest rectangle has an area of 10 (between indices 2 and 3, forming a rectangle of height 5 and width 2). # Example 2: histogram = [2, 4] # The largest rectangle has an area of 4 (single bar of height 4). print(largest_rectangle_area(histogram)) # Output for Example 1: 10 print(largest_rectangle_area(histogram)) # Output for Example 2: 4 ``` **Note:** - Make use of the stack data structure efficiently to solve this problem within linear time complexity. Remember to test your solution with various edge cases, including histograms with heights of zero and varying lengths.","solution":"def largest_rectangle_area(histogram): Calculate the area of the largest rectangle that can be formed within the histogram. Parameters: histogram (list of int): A list of non-negative integers representing the heights of histogram bars. Returns: int: The area of the largest rectangle. # The stack holds indices of histogram array stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[index] >= histogram[stack[-1]]: # If this bar is higher or the stack is empty, push it to the stack stack.append(index) index += 1 else: # Pop the top of the stack top_of_stack = stack.pop() # Calculate the area with the popped index area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You have been assigned to create a Python function that simulates the growth of an investment portfolio over a period of time, incorporating the effects of compound interest and periodic contributions. The ultimate goal is to determine the future value of the portfolio given the initial investment, a regular contribution amount, the annual interest rate, and the number of years the investments will be held. Your function should be named `InvestmentGrowth(initial_investment, monthly_contribution, annual_interest_rate, years)`. This function will calculate and return the future value of the investment portfolio after the specified period. # Function Signature ```python def InvestmentGrowth(initial_investment: float, monthly_contribution: float, annual_interest_rate: float, years: int) -> float: ``` # Input Parameters - `initial_investment`: The initial amount of money invested (a float). - `monthly_contribution`: Amount of money contributed to the investment each month (a float). - `annual_interest_rate`: The annual interest rate of the investment (a float, in percentage). - `years`: The number of years the investment will grow (an integer). # Requirements 1. The interest is compounded monthly. 2. For each month: - Apply the monthly interest to the current portfolio value. - Add the monthly contribution to the portfolio (after applying the interest). 3. The function should return the future value of the investment portfolio after the specified number of years. # Calculation Details: - The monthly interest rate is derived from the annual interest rate. ```python monthly_interest_rate = annual_interest_rate / 12 / 100 ``` - Update the portfolio for each month over the total investment period (in months): ```python for _ in range(years * 12): portfolio_value += portfolio_value * monthly_interest_rate portfolio_value += monthly_contribution ``` # Example Usage ```python future_value = InvestmentGrowth(10000, 200, 5, 20) print(f\\"The future value of the investment is: {future_value:.2f}\\") ```","solution":"def InvestmentGrowth(initial_investment: float, monthly_contribution: float, annual_interest_rate: float, years: int) -> float: Calculate the future value of an investment portfolio with compound interest and periodic contributions. Parameters: initial_investment (float): The initial amount invested. monthly_contribution (float): The amount contributed each month. annual_interest_rate (float): The annual interest rate (as a percentage). years (int): The number of years the investment will grow. Returns: float: The future value of the investment. monthly_interest_rate = annual_interest_rate / 12 / 100 portfolio_value = initial_investment for _ in range(years * 12): portfolio_value += portfolio_value * monthly_interest_rate portfolio_value += monthly_contribution return portfolio_value"},{"question":"Implement a function `find_longest_common_subsequence(str1, str2)` that determines the longest common subsequence (LCS) of two given strings `str1` and `str2`. The LCS is defined as the longest sequence that can be derived from both strings without changing the order of characters. The function should return the LCS as a string. # Constraints: - Both `str1` and `str2` are non-empty strings with a maximum length of 1000. # Example: ```python str1 = \\"abcde\\" str2 = \\"ace\\" find_longest_common_subsequence(str1, str2) ``` **Output:** ```python \\"ace\\" ``` # Detailed Requirements: 1. **Input:** Two strings `str1` and `str2`. 2. **Output:** The longest common subsequence string. 3. **Method:** - Use dynamic programming to solve the problem efficiently. - Create a 2D DP table where `dp[i][j]` represents the length of LCS of the first `i` characters in `str1` and the first `j` characters in `str2`. - Implement backtracking on the DP table to reconstruct the LCS string. # Notes: - Your function must handle edge cases where there are no common subsequences. - Make sure to optimize for both time and space complexity within the given constraints.","solution":"def find_longest_common_subsequence(str1, str2): This function finds the longest common subsequence of two given strings. m, n = len(str1), len(str2) # Create a 2D DP array with 0s dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the DP array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Backtrack to find the LCS i, j = m, n lcs = [] while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"You are tasked with creating a function named `kmeans_clustering_plot` that takes two data inputs: a 2D NumPy array `data` containing the data points (each row represents a point in the 2D space), and an integer `k` which represents the number of clusters to form. The function should perform k-means clustering on the given data and display the result in a plot. The plot must include the following: 1. **Data Points and Clustering**: All data points colored according to their assigned cluster. 2. **Cluster Centroids**: Display the centroids of each cluster using a different color or marker. # Function Signature ```python def kmeans_clustering_plot(data: np.ndarray, k: int) -> None: \'\'\' Plots the k-means clustering result on the given data. Parameters: data (np.ndarray): A 2D array where each row represents a data point in 2D space. k (int): The number of clusters. \'\'\' from sklearn.cluster import KMeans import matplotlib.pyplot as plt # Performing k-means clustering kmeans = KMeans(n_clusters=k) kmeans.fit(data) labels = kmeans.labels_ centroids = kmeans.cluster_centers_ # Plotting the clusters plt.figure(figsize=(8, 6)) plt.scatter(data[:, 0], data[:, 1], c=labels, cmap=\'viridis\', marker=\'o\', edgecolor=\'k\') plt.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', marker=\'X\', s=200, label=\'Centroids\') plt.title(f\'K-means Clustering with k={k}\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.legend() plt.show() ``` # Example Usage ```python import numpy as np # Example data - a set of 2D points data = np.array([ [1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0] ]) # Number of clusters k = 3 # Generate the clustering plot kmeans_clustering_plot(data, k) ``` # Explanation In this problem, you need to use the `sklearn.cluster.KMeans` class to perform k-means clustering on the given 2D data points. The function will plot the data points with a color code for each cluster and mark the centroids using a different marker. This exercise will help you understand how to implement and visualize the results of k-means clustering - a fundamental technique in unsupervised learning. # Requirements - Use `sklearn.cluster.KMeans` for clustering. - Use `matplotlib.pyplot` for plotting. - Ensure different colors for different clusters and distinct markers for centroid points. Make sure your function `kmeans_clustering_plot` strictly adheres to these requirements.","solution":"import numpy as np from sklearn.cluster import KMeans import matplotlib.pyplot as plt def kmeans_clustering_plot(data: np.ndarray, k: int) -> None: \'\'\' Plots the k-means clustering result on the given data. Parameters: data (np.ndarray): A 2D array where each row represents a data point in 2D space. k (int): The number of clusters. \'\'\' # Performing k-means clustering kmeans = KMeans(n_clusters=k) kmeans.fit(data) labels = kmeans.labels_ centroids = kmeans.cluster_centers_ # Plotting the clusters plt.figure(figsize=(8, 6)) plt.scatter(data[:, 0], data[:, 1], c=labels, cmap=\'viridis\', marker=\'o\', edgecolor=\'k\') plt.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', marker=\'X\', s=200, label=\'Centroids\') plt.title(f\'K-means Clustering with k={k}\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.legend() plt.show()"},{"question":"In this problem, you will implement a function that computes the intersection of two given sets and returns the result as a sorted list. The function will receive the sets as input and should ensure that the output is sorted in ascending order. Task You need to write a function called `sorted_intersection` that takes two parameters: - `set1` (a set of integers): The first set of integers. - `set2` (a set of integers): The second set of integers. The function should return a list containing the intersection of the two sets, sorted in ascending order. Requirements: - The intersection operation should be performed using set operations. - The resulting list must be sorted in ascending order. Example: ```python set1 = {3, 1, 4, 6} set2 = {4, 6, 7, 8} result = sorted_intersection(set1, set2) print(result) ``` Output for the given sets should be: ``` [4, 6] ``` Additional Notes: - If either of the sets is empty, the result should be an empty list. - The function should handle sets of varying sizes and values efficiently.","solution":"def sorted_intersection(set1, set2): Returns a sorted list of the intersection of set1 and set2. intersection = set1 & set2 return sorted(intersection)"},{"question":"Design and implement a function `organize_student_grades` that processes multiple CSV files containing student grade data and computes their final grades. Each CSV file represents grades for a different subject. Your function should merge these grades into a single comprehensive dictionary and calculate the final grades based on given weights. Write a function named `organize_student_grades` that accepts two arguments: 1. `grade_files`: A list of strings where each string represents the path to a CSV file. 2. `weights`: A dictionary where keys are subject names and values are the corresponding weights (as a percentage) for the final grade. Each CSV file has the following structure: ```csv StudentID,Grade 1,85 2,90 3,78 ``` Your function should: 1. Initialize a dictionary `final_grades` with student ID keys and corresponding grade values initialized at 0. 2. For each CSV file, read the grades and update the `final_grades` dictionary by adding the weighted grade. 3. Ensure that the weights are correctly applied and normalized such that the sum of weights equals 100%. Return the `final_grades` dictionary where each key is a student ID and each value is the computed final grade. Example usage of `organize_student_grades`: ```python grade_files = [\\"math_grades.csv\\", \\"science_grades.csv\\", \\"english_grades.csv\\"] weights = {\\"math_grades.csv\\": 40, \\"science_grades.csv\\": 35, \\"english_grades.csv\\": 25} final_grades = organize_student_grades(grade_files, weights) print(final_grades) ``` Expected output if the CSVs contain: `math_grades.csv`: ```csv StudentID,Grade 1,85 2,90 3,78 ``` `science_grades.csv`: ```csv StudentID,Grade 1,80 2,85 3,88 ``` `english_grades.csv`: ```csv StudentID,Grade 1,90 2,73 3,79 ``` The output should be: ```python { 1: 85*0.4 + 80*0.35 + 90*0.25, 2: 90*0.4 + 85*0.35 + 73*0.25, 3: 78*0.4 + 88*0.35 + 79*0.25 } ```","solution":"import csv def organize_student_grades(grade_files, weights): Processes multiple CSV files with student grades and computes the final grades based on given weights. Parameters: grade_files (list): A list of strings representing the paths to CSV files. weights (dict): A dictionary with subject names as keys and weights as values. Returns: dict: A dictionary with student IDs as keys and their final computed grades as values. final_grades = {} # Normalize the weights total_weight = sum(weights.values()) normalized_weights = {subject: weight / total_weight for subject, weight in weights.items()} for file in grade_files: with open(file, \'r\') as csvfile: reader = csv.reader(csvfile) next(reader) # Skip the header row for row in reader: student_id = int(row[0]) grade = float(row[1]) if student_id not in final_grades: final_grades[student_id] = 0 final_grades[student_id] += grade * normalized_weights[file] return final_grades"},{"question":"Takes a list of strings where each string represents a mathematical expression (e.g., \\"2 + 2\\", \\"3 * 4 - 1\\"). Creates a new list containing the evaluated results of the expressions as integers. Additionally, returns a summary dictionary where the keys are the original expressions and the values are their respective evaluated results. The function should output: tuple: list: A list of integers representing the evaluated results of each expression. dict: A dictionary containing each original expression as a key and its evaluated result as the value. If an expression is invalid and throws an exception during evaluation, ignore that expression and do not include it in the results list or dictionary. You should write self-contained code starting with: ``` def evaluate_expressions(expressions): ```","solution":"def evaluate_expressions(expressions): Evaluates a list of mathematical expressions and returns the results in a list and a dictionary. Parameters: expressions (list of str): The list of mathematical expression strings to be evaluated. Returns: tuple: A list of evaluated results and a dictionary of the original expressions with their evaluated results. results_list = [] results_dict = {} for expr in expressions: try: result = eval(expr) results_list.append(result) results_dict[expr] = result except Exception: # Ignore any exceptions raised during evaluation pass return results_list, results_dict"},{"question":"You are to implement a function named `merge_sorted_arrays` that takes two sorted arrays and returns a single sorted array that contains all the elements from both input arrays. The input arrays are sorted in non-decreasing order, and the resulting array should maintain this order. To solve this problem, you should utilize an efficient merging technique that takes advantage of the fact that both input arrays are already sorted. Your implementation should have a linear time complexity, O(n + m), where n and m are the lengths of the input arrays. # Function Signature ```python def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: pass ``` # Parameters: - `arr1` (list of int): The first sorted array. - `arr2` (list of int): The second sorted array. # Returns: - `list of int`: A single sorted array containing all the elements from `arr1` and `arr2`. # Example: ```python assert merge_sorted_arrays([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6] assert merge_sorted_arrays([0, 2], [1, 3]) == [0, 1, 2, 3] assert merge_sorted_arrays([5, 8, 9], [1, 7]) == [1, 5, 7, 8, 9] assert merge_sorted_arrays([], [2, 4, 6]) == [2, 4, 6] assert merge_sorted_arrays([1, 2, 3], []) == [1, 2, 3] ``` **Hint:** Use pointers to iterate through both arrays, comparing elements and appending the smaller one to the output array. Make sure any remaining elements from either array are also included.","solution":"def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: Merges two sorted arrays into a single sorted array. i, j = 0, 0 merged_array = [] # Use two pointers to merge the arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append the remaining elements while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function to simulate a simple banking system where you can create a new account, deposit money, withdraw money, and check the balance. The function should allow for multiple accounts, each identified by a unique account number. Use a dictionary to store account information. The function signature should be: ``` from typing import Dict class BankingSystem: def __init__(self): self.accounts: Dict[int, float] = {} def create_account(self, account_number: int) -> None: # Initialize a new account with 0 balance def deposit(self, account_number: int, amount: float) -> None: # Deposit amount to the specified account def withdraw(self, account_number: int, amount: float) -> None: # Withdraw amount from the specified account if sufficient balance exists def check_balance(self, account_number: int) -> float: # Return the balance of the specified account ``` Your task is to complete the \'BankingSystem\' class by implementing its methods. Raise a ValueError in the following conditions: - When trying to create an account that already exists. - When trying to deposit or withdraw for a non-existent account. - When attempting to withdraw more money than is available in the account.","solution":"from typing import Dict class BankingSystem: def __init__(self): self.accounts: Dict[int, float] = {} def create_account(self, account_number: int) -> None: if account_number in self.accounts: raise ValueError(\\"Account already exists\\") self.accounts[account_number] = 0.0 def deposit(self, account_number: int, amount: float) -> None: if account_number not in self.accounts: raise ValueError(\\"Account does not exist\\") if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.accounts[account_number] += amount def withdraw(self, account_number: int, amount: float) -> None: if account_number not in self.accounts: raise ValueError(\\"Account does not exist\\") if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if self.accounts[account_number] < amount: raise ValueError(\\"Insufficient balance\\") self.accounts[account_number] -= amount def check_balance(self, account_number: int) -> float: if account_number not in self.accounts: raise ValueError(\\"Account does not exist\\") return self.accounts[account_number]"},{"question":"**Function to Check Consistency of Brackets** You are tasked with writing a function that checks the consistency and correctness of nested brackets within a string. The brackets to check for are `{}`, `[]`, and `()`. Your function should determine if the brackets are correctly matched and properly nested. Write a function named `are_brackets_balanced(s: str) -> bool` that performs the following tasks: 1. Traverse the string and check for the presence of the characters `{}`, `[]`, and `()`. 2. Ensure that every opening bracket has a corresponding closing bracket of the same type and that brackets are properly nested. # Parameters: - `s` (str): An input string containing any characters, including brackets. # Returns: - `bool`: Returns `True` if the brackets are balanced and `False` otherwise. # Constraints: - The input string `s` can be empty, in which case the function should return `True`. - The function should handle strings with mixed bracket types. **Example Usage:** ```python print(are_brackets_balanced(\\"{[()]}\\")) # True print(are_brackets_balanced(\\"{[(])}\\")) # False print(are_brackets_balanced(\\"{{[[(())]]}}\\")) # True print(are_brackets_balanced(\\"This is a test(){}[].\\")) # True print(are_brackets_balanced(\\"(This { is a test}[]\\")) # False ``` **Hints:** - Consider using a stack data structure to keep track of opening brackets. - When encountering a closing bracket, check if it matches the most recently encountered opening bracket. **Implementation:** The function should be efficient and handle the constraints efficiently. Here is a template to help you get started: ```python def are_brackets_balanced(s: str) -> bool: stack = [] bracket_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_pairs.values(): stack.append(char) elif char in bracket_pairs.keys(): if stack == [] or bracket_pairs[char] != stack.pop(): return False return stack == [] ```","solution":"def are_brackets_balanced(s: str) -> bool: stack = [] bracket_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_pairs.values(): stack.append(char) elif char in bracket_pairs.keys(): if stack == [] or bracket_pairs[char] != stack.pop(): return False return stack == []"},{"question":"In this exercise, you\'ll practice list manipulation and arithmetic operations in Python. Your task is to create a function called `transform_list` that takes a list of integers and performs the following operations in sequence: 1. Create a new list where each element is the square of the corresponding element from the input list. 2. Filter out all elements from this new list that are not divisible by 3. 3. Calculate and return the sum of the remaining elements in the new list. # Function Signature ```python def transform_list(lst): pass ``` # Input - `lst` (list of integers): A list of integers. You can assume that the list contains at least one element. # Output - Return an integer which is the sum of the filtered list described above. # Example ```python print(transform_list([1, 2, 3, 4, 5])) ``` Explanation: - The squared list would be `[1, 4, 9, 16, 25]` - After filtering elements not divisible by 3, the list becomes `[9]` - The sum of the remaining elements is `9`. Output: ``` 9 ```","solution":"def transform_list(lst): Transforms and filters the list as per the problem statement and returns the sum of the filtered list. Args: - lst: list of integers Returns: - int: Sum of the filtered list # Step 1: Create a new list where each element is the square of the corresponding element from the input list. squared_list = [x**2 for x in lst] # Step 2: Filter out all elements from this new list that are not divisible by 3. filtered_list = [x for x in squared_list if x % 3 == 0] # Step 3: Calculate and return the sum of the remaining elements in the new list. return sum(filtered_list)"},{"question":"You are tasked with designing a function called `generate_histogram_with_stats` that analyzes and visualizes a dataset using a histogram. The function should compute basic statistics and display a histogram of the data. Your task is to focus on using the `matplotlib.pyplot.hist` function for this purpose. The function should take the following parameters: 1. `data`: A Pandas DataFrame containing a single column of numerical values to be analyzed. 2. `bins` (optional): An integer representing the number of bins for the histogram. Default is 10. 3. `plot_title` (optional): A string to set as the title of the histogram. Default is \\"Histogram\\". 4. `x_label` (optional): A string for the label of the x-axis. Default is \\"Values\\". 5. `y_label` (optional): A string for the label of the y-axis. Default is \\"Frequency\\". 6. `color` (optional): A string representing the color of the histogram bars. Default is \'blue\'. 7. `alpha` (optional): A float representing the transparency level of the histogram bars. Default is 0.7. The histogram should display: - A title and labels for the x and y axes using the parameters provided. - A histogram with the specified color and transparency level. - Basic statistics (mean, median, and standard deviation) should be calculated and displayed on the plot. **Constraints:** - The DataFrame `data` will always have exactly one column of numeric types. - You must use `matplotlib.pyplot.hist` as the primary function for creating the histogram. - Compute and display the mean, median, and standard deviation as text on the histogram plot. **Example Usage:** ```python import pandas as pd # Sample data data = pd.DataFrame({ \'Scores\': [50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100] }) generate_histogram_with_stats(data, bins=5, plot_title=\'Scores Distribution\', x_label=\'Scores\', y_label=\'Number of Students\', color=\'red\', alpha=0.8) ```","solution":"import pandas as pd import matplotlib.pyplot as plt import numpy as np def generate_histogram_with_stats(data, bins=10, plot_title=\'Histogram\', x_label=\'Values\', y_label=\'Frequency\', color=\'blue\', alpha=0.7): numeric_data = data.iloc[:, 0] mean = numeric_data.mean() median = numeric_data.median() std_dev = numeric_data.std() plt.hist(numeric_data, bins=bins, color=color, alpha=alpha) plt.title(plot_title) plt.xlabel(x_label) plt.ylabel(y_label) stats_text = f\'Mean: {mean:.2f}nMedian: {median:.2f}nStd Dev: {std_dev:.2f}\' plt.text(0.95, 0.95, stats_text, transform=plt.gca().transAxes, fontsize=12, verticalalignment=\'top\', horizontalalignment=\'right\') plt.show()"},{"question":"You are tasked with creating a Python function called `count_string_in_files` that takes two arguments: a directory path represented as a string and a search string. The function should return a dictionary where the keys are filenames of all the files within the specified directory, and the values are the count of occurrences of the search string within each file. You should use the `os.path.isfile` function from the `os` module to ensure that only files are processed. The search string is case-sensitive, and subdirectories and files within them should be ignored. # Example: Assume the following directory structure for the directory `text_files`: ``` text_files/ file1.txt file2.txt subdir/ file3.txt notes.md ``` Contents of the files are: `file1.txt`: ``` hello world hello Python ``` `file2.txt`: ``` Python programming ``` `notes.md`: ``` hello Python hello again ``` Given the directory path `text_files` and the search string `\\"hello\\"`, an invocation of `count_string_in_files(\'text_files\', \'hello\')` should return: ```python { \'file1.txt\': 2, \'notes.md\': 2 } ``` The `file2.txt` has 0 occurrence of the search string hence it isn\'t included in the result. # Requirements: - Implement the function `count_string_in_files(directory, search_string)` to accomplish the task. - Use the `os.path.isfile` to check if an item in the directory is a file. - Only consider files in the specified directory, not in any subdirectories. - Return a dictionary with filenames as keys and counts of the search string as values. - If a file does not contain the search string, it should not be included in the returned dictionary. # Notes: - You can assume the provided directory string is always valid. - You can also assume that the files can be read as plain text.","solution":"import os def count_string_in_files(directory, search_string): result = {} for item in os.listdir(directory): item_path = os.path.join(directory, item) if os.path.isfile(item_path): with open(item_path, \'r\') as file: content = file.read() count = content.count(search_string) if count > 0: result[item] = count return result"},{"question":"You are asked to write a function that evaluates the validity of an International Bank Account Number (IBAN). This task will help you understand string manipulation, modulo arithmetic, and validation techniques using the `re` module in Python. The fundamental rules for IBAN validation to follow are: 1. Ensure that the total IBAN length is correct as per the country. We will focus on three countries for this task: - United Kingdom: 22 characters - Germany: 22 characters - Spain: 24 characters 2. The IBAN consists of only uppercase alphabets and digits. 3. The IBAN is rearranged by moving the four initial characters to the end of the string. 4. Replace each letter with two digits: \'A\' is replaced by \'10\', \'B\' by \'11\', ..., \'Z\' by \'35\'. 5. Interpret the string as a large integer and compute the remainder of that number when divided by 97. If the remainder is 1, the IBAN is valid. Your task is to implement the function `validate_iban` which adheres to the following signature: ```python def validate_iban(iban: str) -> bool: ``` Here is how you need to implement the rules: - Validate the length of the IBAN based on the country code. - Use `re.match` to ensure the IBAN consists only of uppercase alphabets and digits. - Manipulate and convert the IBAN string according to the outlined rules. - Use modulo arithmetic to check for validity. # Requirements: - You must use the `re.match` from the `re` module to verify the IBAN format. - Implement steps to rearrange and convert the IBAN into an integer. - Utilize modulo arithmetic to perform the final validation check. Here is the `re.match` function\'s documentation for reference: ```plaintext Python Library Documentation: function match in re re.match = match(pattern, string, flags=0) Try to apply the pattern at the start of the string, returning a Match object, or None if no match was found. ``` Examples: ```python print(validate_iban(\\"GB82WEST12345698765432\\")) # should return True print(validate_iban(\\"DE89370400440532013000\\")) # should return True print(validate_iban(\\"ES9121000418450200051332\\")) # should return True print(validate_iban(\\"ES0221000418450200051332\\")) # should return False ```","solution":"import re def validate_iban(iban: str) -> bool: country_lengths = { \\"GB\\": 22, \\"DE\\": 22, \\"ES\\": 24 } country_code = iban[:2] if country_code not in country_lengths: return False if len(iban) != country_lengths[country_code]: return False if not re.match(r\'^[A-Z0-9]+\', iban): return False rearranged_iban = iban[4:] + iban[:4] digit_iban = \'\'.join(str(ord(char) - 55 if char.isalpha() else char) for char in rearranged_iban) iban_integer = int(digit_iban) return iban_integer % 97 == 1"},{"question":"You are asked to write a function `most_common_words()` that identifies the most common words in a given text. The function should prompt the user to enter a block of text and then output the top 3 most frequent words and their corresponding counts. Words should be considered case-insensitive, and punctuation should be ignored. If two words have the same frequency, they should be sorted alphabetically. To accomplish this task, you may use the `collections` library\'s `Counter` class to count word occurrences. The `re` library may help in handling the punctuation and making the words case-insensitive. **Function Signature:** ```python def most_common_words(): pass ``` **Example:** ``` # Input Anna teksti: Hello world! Hello, everyone. Welcome to the programming world: a world of opportunities. # Output Yleisimmät sanat: world: 3 hello: 2 a: 2 ``` **Hints:** 1. Convert the text to lowercase to ensure case insensitivity. 2. Use regular expressions to remove punctuation. 3. Utilize `Counter` to find the frequency of each word. 4. Sort the words by frequency and then alphabetically to resolve ties.","solution":"import re from collections import Counter def most_common_words(): text = input(\\"Anna teksti: \\").lower() # Remove punctuation using regex cleaned_text = re.sub(r\'[^ws]\', \'\', text) # Split the text into words words = cleaned_text.split() # Count the frequency of each word word_counts = Counter(words) # Get the 3 most common words common_words = word_counts.most_common() common_words.sort(key=lambda x: (-x[1], x[0])) # Sort by frequency and then alphabetically print(\\"Yleisimmät sanat:\\") for word, count in common_words[:3]: print(f\\"{word}: {count}\\")"},{"question":"You are required to implement a function `longest_consecutive_sequence(nums)` that finds the length of the longest consecutive elements sequence in an unsorted array of integers. The function should return 0 if there are no elements. # Function Signature ```python def longest_consecutive_sequence(nums): pass ``` # Inputs 1. `nums` (List[int]): A list of integers, where elements may be in any order. # Outputs - The function should return an integer representing the length of the longest consecutive elements sequence. # Example ```python print(longest_consecutive_sequence([100, 4, 200, 1, 3, 2])) # Should return 4 print(longest_consecutive_sequence([0, -1, -2, 2, 1, 0])) # Should return 5 print(longest_consecutive_sequence([])) # Should return 0 print(longest_consecutive_sequence([7, 3, 9, 0, -1, 8])) # Should return 3 ``` # Constraints - The array length can be up to 10^5. - The array elements range from -10^9 to 10^9. - Aim to achieve a time complexity of O(n) for efficient performance.","solution":"def longest_consecutive_sequence(nums): Finds the length of the longest consecutive elements sequence in an unsorted array of integers. Parameters: - nums (List[int]): A list of integers, where elements may be in any order. Returns: - int: The length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # Check if it is the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You need to implement a binary search tree (BST) and perform insertion, deletion, and search operations. Additionally, you will implement a traversal method to print the elements of the BST in sorted order. Implement the following functions in the `BST` class: 1. `insert(self, val)`: This method will insert a value into the BST. 2. `delete(self, val)`: This method will delete a value from the BST. 3. `search(self, val)`: This method will return `True` if the value exists in the BST, otherwise `False`. 4. `in_order_traversal(self)`: This method will return a list of all elements in the BST in sorted order. **Details:** - The `BST` class will maintain a private attribute `root` that represents the root node of the tree. - Each `Node` of the tree will have attributes `left`, `right`, and `val`. - Insertion will follow the properties of a BST, where left children are less than the parent node and right children are greater. - Deletion will handle three cases: no children, one child, and two children. - In-order traversal will return the elements of the BST in ascending order. **Instructions:** 1. Define a `Node` class with the appropriate attributes and methods. 2. Implement the methods in the `BST` class to carry out insertion, deletion, search, and in-order traversal. 3. Ensure that all methods maintain the properties of the BST and handle edge cases appropriately. 4. Demonstrate the usage of the BST by inserting, deleting, searching for elements, and printing the sorted elements. ```python class Node: def __init__(self, val): self.val = val self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, val): # Implementation of BST insertion def delete(self, val): # Implementation of BST deletion def search(self, val): # Implementation of BST search def in_order_traversal(self): # Implementation of BST in-order traversal ``` You should implement the `insert`, `delete`, `search`, and `in_order_traversal` methods to complete the BST functionality.","solution":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, val): if self.root is None: self.root = Node(val) else: self._insert_recursive(self.root, val) def _insert_recursive(self, node, val): if val < node.val: if node.left is None: node.left = Node(val) else: self._insert_recursive(node.left, val) elif val > node.val: if node.right is None: node.right = Node(val) else: self._insert_recursive(node.right, val) def search(self, val): return self._search_recursive(self.root, val) def _search_recursive(self, node, val): if node is None: return False if node.val == val: return True elif val < node.val: return self._search_recursive(node.left, val) else: return self._search_recursive(node.right, val) def delete(self, val): self.root = self._delete_recursive(self.root, val) def _delete_recursive(self, node, val): if node is None: return node if val < node.val: node.left = self._delete_recursive(node.left, val) elif val > node.val: node.right = self._delete_recursive(node.right, val) else: if node.left is None: return node.right elif node.right is None: return node.left successor = self._min_value_node(node.right) node.val = successor.val node.right = self._delete_recursive(node.right, successor.val) return node def _min_value_node(self, node): current = node while current.left is not None: current = current.left return current def in_order_traversal(self): result = [] self._in_order_recursive(self.root, result) return result def _in_order_recursive(self, node, result): if node is not None: self._in_order_recursive(node.left, result) result.append(node.val) self._in_order_recursive(node.right, result)"},{"question":"You are given a list of events, where each event is represented as a string with a specific format indicating a range of dates. The format of each string is as follows: \\"event_name start_date - end_date\\" where `event_name` is a string representing the name of the event, and `start_date` and `end_date` are dates in the format \\"YYYY-MM-DD\\". Your goal is to find all events that overlap with a given date range. You will return the list of these event names, sorted lexicographically. # Example Input An example list of events and a target date range: ```python events = [ \\"event1 2021-01-01 - 2021-01-10\\", \\"event2 2021-01-05 - 2021-01-15\\", \\"event3 2021-02-01 - 2021-02-10\\", \\"event4 2021-01-20 - 2021-01-25\\" ] target_range = (\\"2021-01-05\\", \\"2021-01-20\\") ``` # Requirements 1. Implement a function `find_overlapping_events(events: List[str], target_range: tuple) -> List[str>` which: - Takes a list of strings `events` with the format given above. - Takes a tuple `target_range` containing two strings representing the start and end dates of the range to check for overlaps. - Returns a list of event names that overlap with the given date range, sorted lexicographically. 2. You may assume the date strings are well-formed and valid. # Constraints - The format of the event strings is always valid as given. - Dates are valid dates in the Gregorian calendar. - Events can be across any range of years, as long as they are represented correctly. - Events with overlapping start dates, end dates, or any date within the range should be considered overlapping. # Example Output Given the example input above, the function should return: ``` [\'event1\', \'event2\'] ``` # Explanation In the given example: - `event1` (2021-01-01 to 2021-01-10) overlaps with the given range (2021-01-05 to 2021-01-20). - `event2` (2021-01-05 to 2021-01-15) overlaps with the given range (2021-01-05 to 2021-01-20). - `event3` (2021-02-01 to 2021-02-10) does not overlap with the given range. - `event4` (2021-01-20 to 2021-01-25) starts on the day after the target range ends, so it does not overlap. # Function Signature ```python from typing import List, Tuple def find_overlapping_events(events: List[str], target_range: Tuple[str, str]) -> List[str]: pass ```","solution":"from typing import List, Tuple def find_overlapping_events(events: List[str], target_range: Tuple[str, str]) -> List[str]: Finds events that overlap with the given target date range. Parameters: events (List[str]): List of event strings in the format \\"event_name start_date - end_date\\". target_range (Tuple[str, str]): A tuple containing the start and end dates of the target range. Returns: List[str]: List of event names that overlap with the target range, sorted lexicographically. target_start, target_end = target_range overlapping_events = [] for event in events: parts = event.split() event_name = parts[0] event_start = parts[1] event_end = parts[3] # Check if the event overlaps with the target range if not (event_end < target_start or event_start > target_end): overlapping_events.append(event_name) overlapping_events.sort() return overlapping_events"},{"question":"You are developing a health monitoring system that tracks the heart rates of patients using wearable devices. The data is provided as a list of dictionaries, where each dictionary consists of \'patient_id\' and \'heart_rate\'. For example: ```python heart_rates = [ {\'patient_id\': \'p1\', \'heart_rate\': 82}, {\'patient_id\': \'p2\', \'heart_rate\': 75}, {\'patient_id\': \'p1\', \'heart_rate\': 85}, {\'patient_id\': \'p2\', \'heart_rate\': 76}, {\'patient_id\': \'p3\', \'heart_rate\': 78}, {\'patient_id\': \'p1\', \'heart_rate\': 80} ] ``` Your task is to write a Python function `average_heart_rate(heart_rates)` that processes this data and returns a dictionary. The keys of the dictionary are the patient IDs, and the values are the average heart rate of each patient. You are required to use the `collections.defaultdict` class to process the data efficiently. **Function Signature:** ```python def average_heart_rate(heart_rates: List[Dict[str, int]]) -> Dict[str, float]: ``` Example: ```python heart_rates = [ {\'patient_id\': \'p1\', \'heart_rate\': 82}, {\'patient_id\': \'p2\', \'heart_rate\': 75}, {\'patient_id\': \'p1\', \'heart_rate\': 85}, {\'patient_id\': \'p2\', \'heart_rate\': 76}, {\'patient_id\': \'p3\', \'heart_rate\': 78}, {\'patient_id\': \'p1\', \'heart_rate\': 80} ] output = average_heart_rate(heart_rates) # {\'p1\': 82.33, \'p2\': 75.5, \'p3\': 78.0} ```","solution":"from collections import defaultdict from typing import List, Dict def average_heart_rate(heart_rates: List[Dict[str, int]]) -> Dict[str, float]: Calculate the average heart rate for each patient. :param heart_rates: List of dictionaries containing \'patient_id\' and \'heart_rate\'. :returns: Dictionary with patient IDs as keys and their average heart rates as values. heart_rate_data = defaultdict(lambda: {\'sum\': 0, \'count\': 0}) for record in heart_rates: patient_id = record[\'patient_id\'] heart_rate = record[\'heart_rate\'] heart_rate_data[patient_id][\'sum\'] += heart_rate heart_rate_data[patient_id][\'count\'] += 1 average_heart_rate_by_patient = {patient_id: data[\'sum\'] / data[\'count\'] for patient_id, data in heart_rate_data.items()} return average_heart_rate_by_patient"},{"question":"Create a function named `count_words_from_url(url)`. This function retrieves text content from a given URL, counts the frequency of each word, and writes the results to a specified file in alphabetical order. **Function Requirements:** - The function should use the `requests.get` method from the `requests` library to fetch text content from the URL. - The function should handle possible exceptions that might occur during the HTTP request (e.g., connection errors, invalid URLs). - Exclude common stop words defined in a given list `stop_words` from the word count. - All words should be converted to lowercase to ensure accurate counting. - Punctuation marks (e.g., \'.\', \',\', \'!\', \'?\', etc.) should be removed from the text before counting. - Write the results to a specified file in the format \\"word: countn\\" for each word, sorted alphabetically by the word. - Print \\"Completed counting words from url: <provided_url>\\" after writing all results to the file. Your task is to write this function using the specified `requests.get` method and handle the text processing as described.","solution":"import requests from collections import Counter import re def count_words_from_url(url, stop_words): Retrieves text content from a given URL, counts the frequency of each non-stop word, and writes the results to a file in alphabetical order. try: response = requests.get(url) response.raise_for_status() # Raise error for bad status codes text = response.text # Convert text to lowercase text = text.lower() # Remove punctuation text = re.sub(r\'[^ws]\', \'\', text) # Tokenize words words = text.split() # Filter out stop words words = [word for word in words if word not in stop_words] # Count frequencies word_count = Counter(words) # Write results to a file in alphabetical order with open(\\"word_count.txt\\", \\"w\\") as file: for word in sorted(word_count): file.write(f\\"{word}: {word_count[word]}n\\") print(f\\"Completed counting words from url: {url}\\") except requests.exceptions.RequestException as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are tasked with creating a function to fit a linear regression model using the `scikit-learn` library. The function will train the model on a given dataset and predict values for new data points, returning the coefficient and intercept of the model as well. # Task Create a function called `fit_and_predict_linear_regression` with the following signature: ```python def fit_and_predict_linear_regression(X_train, y_train, X_new): ``` # Parameters - **X_train**: A 2D numpy array or pandas DataFrame representing the input features used for training. - **y_train**: A 1D numpy array or pandas Series representing the target values used for training. - **X_new**: A 2D numpy array or pandas DataFrame representing the new input features for which you want to predict target values. # Functionality Requirements 1. Train a linear regression model using the `LinearRegression` class from the `scikit-learn` library. 2. Predict the target values for `X_new` using the trained model. 3. Return the coefficient and intercept of the linear regression model, along with the predicted values for `X_new`. # Example ```python import numpy as np from sklearn.linear_model import LinearRegression # Sample Data X_train = np.array([[1], [2], [3], [4], [5]]) y_train = np.array([1, 2, 3, 4, 5]) X_new = np.array([[6], [7]]) # Call the function coef, intercept, predictions = fit_and_predict_linear_regression(X_train, y_train, X_new) print(f\\"Coefficient: {coef}\\") print(f\\"Intercept: {intercept}\\") print(f\\"Predictions: {predictions}\\") ``` # Additional Information Ensure to import the necessary `scikit-learn` components (`LinearRegression`) and use the `fit` and `predict` methods of the `LinearRegression` class. The output should include: - The coefficient of the linear regression model. - The intercept of the linear regression model. - The predicted values for `X_new`.","solution":"import numpy as np from sklearn.linear_model import LinearRegression def fit_and_predict_linear_regression(X_train, y_train, X_new): Trains a linear regression model using X_train and y_train, then predicts the target values for X_new. Parameters: X_train (numpy array or pandas DataFrame): 2D array of training input features. y_train (numpy array or pandas Series): 1D array of training target values. X_new (numpy array or pandas DataFrame): 2D array of new input features for prediction. Returns: tuple: Coefficient, intercept, and predicted values for X_new. # Initialize the linear regression model model = LinearRegression() # Fit the model with the training data model.fit(X_train, y_train) # Predict using the model on new data predictions = model.predict(X_new) # Get the model coefficients and intercept coef = model.coef_ intercept = model.intercept_ return coef, intercept, predictions"},{"question":"In this problem, you are responsible for implementing a sorting algorithm without using Python\'s built-in sort functions. Specifically, you need to create a function named `merge_sort` that receives a list of integers and returns a new list with the integers sorted in ascending order. Implement the Merge Sort algorithm, as outlined below: 1. **Divide**: Split the list into two halves until each half contains only one element. 2. **Conquer**: Recursively sort both halves. 3. **Combine**: Merge the sorted halves back together. To merge the halves, create a helper function named `merge` which takes two sorted lists and returns a single sorted list. The `merge_sort` function should adhere to the following function signature: ```python def merge_sort(arr: list) -> list: ``` Additionally, follow these constraints: - Do not use inbuilt sort functions such as `sorted()`, `list.sort()`, or similar. - The input list can contain negative numbers, zero, and duplicate values. - Ensure the function works for an empty list and lists with a single element. Example usage: ```python print(merge_sort([34, 7, 23, 32, 5, 62])) # Output: [5, 7, 23, 32, 34, 62] print(merge_sort([3, -1, -9, 8, 7])) # Output: [-9, -1, 3, 7, 8] ```","solution":"def merge(left, right): result = [] i = j = 0 # Merge the two sorted lists while i < len(left) and j < len(right): if left[i] <= right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 # Append any remaining elements from left or right result.extend(left[i:]) result.extend(right[j:]) return result def merge_sort(arr: list) -> list: if len(arr) <= 1: return arr # Split the list into two halves mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) # Combine the sorted halves return merge(left, right)"},{"question":"You need to design a function that will determine the fewest number of coins needed to make a given amount of change. The function should take an integer representing the amount of change required and a list of integers representing the denominations of coins available. The function should return the minimum number of coins necessary to make the given amount of change. If it is not possible to make the exact change using the given denominations, the function should return -1. This function should be named `min_coins`. The function should take in two parameters: - `amount`: An integer representing the total amount of change needed. - `coins`: A list of integers representing the denominations of coins available. Use dynamic programming to solve this problem efficiently. **Function Signature:** ```python def min_coins(amount: int, coins: list) -> int: pass ``` **Example:** ```python min_coins(11, [1, 2, 5]) ``` Should return `3` In this example: - The amount of 11 can be made with the coins [5, 5, 1], totaling 3 coins. Another example: ```python min_coins(3, [2]) ``` Should return `-1` In this example: - It is not possible to make the amount of 3 with the denomination available (2), so the function returns -1. **Requirements:** Use a dynamic programming approach to build a table that calculates the minimum coins required for each amount up to the target amount.","solution":"def min_coins(amount, coins): Returns the minimum number of coins needed to make the given amount of change. If it is not possible to make the exact change using the given denominations, return -1. # Initialize a list to store the minimum coins required for each amount up to the given amount dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # No coins are needed to make zero amount # Loop through each amount from 1 to the given amount for a in range(1, amount + 1): for coin in coins: if a - coin >= 0: dp[a] = min(dp[a], dp[a - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Consider a logistics company that wants to optimize the route for delivering packages to multiple locations in a city. The goal is to ensure that the total distance covered by the delivery vehicle is minimized while visiting all required locations exactly once, starting from and returning to the depot. This is a classical Traveling Salesman Problem (TSP). **Function to Implement:** ```python def solve_tsp(distances): ``` **Parameters:** - `distances` (list of list of int): A 2D array of shape `(n_locations, n_locations)` representing the distance between each pair of locations. The element at index `[i][j]` is the distance from location `i` to location `j`. **Returns:** - `route` (list of int): An ordered list of location indices representing the optimized route starting and ending at the depot (index `0`). **Requirements:** 1. **Implement a heuristic algorithm** such as the Nearest Neighbor Algorithm or use a brute-force approach for smaller datasets. 2. Ensure that the route starts and ends at the depot (index `0`). 3. The returned route should be the one with the minimum total distance. **Example Usage:** ```python distances = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] route = solve_tsp(distances) # Example output: [0, 1, 3, 2, 0] ``` The implementation will involve exploring different routes and calculating their total distances to find the shortest possible path that visits all locations and returns to the starting point.","solution":"from itertools import permutations def solve_tsp(distances): Solves the Traveling Salesman Problem using a brute-force approach. Returns the route that starts and ends at the depot (index 0) with the minimal total distance. n = len(distances) # Generate all possible routes starting from the depot (index 0) locations = list(range(1, n)) all_permutations = permutations(locations) min_distance = float(\'inf\') best_route = None # Check each permutation for the smallest total distance for perm in all_permutations: current_route = [0] + list(perm) + [0] current_distance = 0 # Calculate the total distance for this route for i in range(n): current_distance += distances[current_route[i]][current_route[i + 1]] # Update the best route if the current route has a smaller total distance if current_distance < min_distance: min_distance = current_distance best_route = current_route return best_route"},{"question":"You are given a list of dictionaries representing transactions made by customers. Each transaction contains the \'customer_id\', \'product\', \'amount\', and \'date\' of purchase. You need to perform several analyses on this data to extract meaningful insights. Specifically, you are required to write a function `analyze_transactions` that performs the following operations: 1. Create a DataFrame from the list of transactions. 2. Calculate the total amount spent by each customer and return this as a new DataFrame with columns \'customer_id\' and \'total_spent\'. 3. Identify the most popular product (the product with the highest number of transactions) and return its name. 4. For each customer, calculate the total number of transactions they made and return this as a new DataFrame with columns \'customer_id\' and \'transaction_count\'. You must use the `pandas` library to perform these operations. The structure of the transactions list is as follows: ```python transactions = [ {\\"customer_id\\": 1, \\"product\\": \\"A\\", \\"amount\\": 50, \\"date\\": \\"2023-01-01\\"}, {\\"customer_id\\": 2, \\"product\\": \\"B\\", \\"amount\\": 30, \\"date\\": \\"2023-01-02\\"}, {\\"customer_id\\": 1, \\"product\\": \\"C\\", \\"amount\\": 20, \\"date\\": \\"2023-01-03\\"}, {\\"customer_id\\": 3, \\"product\\": \\"A\\", \\"amount\\": 70, \\"date\\": \\"2023-01-03\\"}, {\\"customer_id\\": 2, \\"product\\": \\"A\\", \\"amount\\": 100, \\"date\\": \\"2023-01-04\\"}, # more transactions ] ``` Your function `analyze_transactions` should return a tuple containing three elements: 1. A DataFrame with columns \'customer_id\' and \'total_spent\'. 2. The most popular product\'s name as a string. 3. A DataFrame with columns \'customer_id\' and \'transaction_count\'. # Function Signature ```python import pandas as pd def analyze_transactions(transactions: list) -> tuple: pass ```","solution":"import pandas as pd def analyze_transactions(transactions: list) -> tuple: # Convert the list of dictionaries to a DataFrame df = pd.DataFrame(transactions) # Calculate the total amount spent by each customer total_spent_df = df.groupby(\'customer_id\')[\'amount\'].sum().reset_index() total_spent_df.rename(columns={\'amount\': \'total_spent\'}, inplace=True) # Identify the most popular product product_counts = df[\'product\'].value_counts() most_popular_product = product_counts.idxmax() # Calculate the total number of transactions for each customer transaction_count_df = df.groupby(\'customer_id\')[\'product\'].count().reset_index() transaction_count_df.rename(columns={\'product\': \'transaction_count\'}, inplace=True) return total_spent_df, most_popular_product, transaction_count_df"},{"question":"Given a list of integers, create a function named `find_subarray` that identifies the contiguous subarray which has the largest sum within the list. Return the largest sum and the subarray itself. Requirements of the function: - The function should take in a list of integers called `nums`. - It should return a tuple containing the largest sum and the corresponding subarray. Consider the following points: - If the list is empty, the function should return (0, []). - The function should be efficient and handle both positive and negative integers. - The function should use an algorithm with a time complexity of O(n). A prototype of the function is provided below: ```python def find_subarray(nums): Finds the contiguous subarray with the largest sum. :param nums: List of integers. :return: Tuple containing the largest sum and the subarray. ``` For example: ```python print(find_subarray([-2,1,-3,4,-1,2,1,-5,4])) # Output: (6, [4, -1, 2, 1]) print(find_subarray([1])) # Output: (1, [1]) print(find_subarray([5,4,-1,7,8])) # Output: (23, [5, 4, -1, 7, 8]) ```","solution":"def find_subarray(nums): Finds the contiguous subarray with the largest sum. :param nums: List of integers. :return: Tuple containing the largest sum and the subarray. if not nums: return (0, []) max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if nums[i] > current_sum + nums[i]: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return (max_sum, nums[start:end+1])"},{"question":"In data analysis, it is often necessary to parse and rearrange complex data structures to extract meaningful insights. For this task, you need to implement a function named `rearrange_nested_dict` which performs the following operations on a nested dictionary structure: 1. Flattens the nested dictionary by concatenating the keys with a given delimiter. 2. Ensures all keys are in lowercase. # Requirements - Use recursion to navigate through nested dictionaries. - Use string operations to manipulate and concatenate keys. # Input - A dictionary named `nested_dict` which can contain other dictionaries nested within it. - A string `delimiter` which will be used to concatenate keys. # Output - Return a new dictionary where all nested keys are flattened and concatenated using the provided delimiter and converted to lowercase. # Example ```python nested_dict = { \\"Level1\\": { \\"Level2A\\": { \\"Level3A\\": \\"value1\\", \\"Level3B\\": \\"value2\\" }, \\"Level2B\\": \\"value3\\" }, \\"Level1B\\": { \\"Level2C\\": \\"value4\\" } } delimiter = \\"_\\" modified_dict = rearrange_nested_dict(nested_dict, delimiter) ``` After calling `rearrange_nested_dict(nested_dict, delimiter)`, the `modified_dict` should be: ```python { \\"level1_level2a_level3a\\": \\"value1\\", \\"level1_level2a_level3b\\": \\"value2\\", \\"level1_level2b\\": \\"value3\\", \\"level1b_level2c\\": \\"value4\\" } ``` # Explanation 1. The initial dictionary `nested_dict` is: ```python { \\"Level1\\": { \\"Level2A\\": { \\"Level3A\\": \\"value1\\", \\"Level3B\\": \\"value2\\" }, \\"Level2B\\": \\"value3\\" }, \\"Level1B\\": { \\"Level2C\\": \\"value4\\" } } ``` 2. Flattening the dictionary with keys concatenated using the delimiter `_` and converting them to lowercase results in: ```python { \\"level1_level2a_level3a\\": \\"value1\\", \\"level1_level2a_level3b\\": \\"value2\\", \\"level1_level2b\\": \\"value3\\", \\"level1b_level2c\\": \\"value4\\" } ``` Implement the function `rearrange_nested_dict` using the specified method.","solution":"def rearrange_nested_dict(nested_dict, delimiter): Flattens a nested dictionary by concatenating keys with a given delimiter and ensures all keys are in lowercase. def flatten(d, parent_key=\'\'): items = [] for k, v in d.items(): new_key = f\\"{parent_key}{delimiter}{k.lower()}\\" if parent_key else k.lower() if isinstance(v, dict): items.extend(flatten(v, new_key).items()) else: items.append((new_key, v)) return dict(items) return flatten(nested_dict)"},{"question":"You need to create a function that identifies whether a given year is a leap year or not. A leap year must satisfy the following conditions: 1. A year is a leap year if it is divisible by 4 but not divisible by 100, except it is also divisible by 400. Write a function named `is_leap_year` that takes one argument: 1. `year` (the year as an integer) The function should return `True` if the given year is a leap year, and `False` otherwise. **Constraints and requirements:** - You should not use any built-in functions that directly solve the problem. - Make sure to handle both positive and negative year values. **Example:** ```python print(is_leap_year(2020)) # Expected Output: True print(is_leap_year(1900)) # Expected Output: False print(is_leap_year(2000)) # Expected Output: True print(is_leap_year(2023)) # Expected Output: False ```","solution":"def is_leap_year(year): Returns True if the given year is a leap year, and False otherwise. if year % 400 == 0: return True if year % 100 == 0: return False if year % 4 == 0: return True return False"},{"question":"# Parking Lot Management You are required to create a system to manage a parking lot. The parking lot has a fixed number of spaces, and each space can either be available or occupied. Your task is to implement a class named `ParkingLot` which will manage this parking lot. Class Signature: ```python class ParkingLot: def __init__(self, total_spaces: int): pass def park(self) -> int: pass def leave(self, space_number: int) -> bool: pass def get_available_spaces(self) -> int: pass ``` Details: 1. **Initialization**: - The constructor accepts an integer `total_spaces` which defines the number of parking spaces. - All spaces are initially available. 2. **Park**: - The `park` method parks a car in the first available space. - It returns the space number where the car is parked. - If no spaces are available, it returns `-1`. 3. **Leave**: - The `leave` method takes a space number as input and frees it up. - It returns `True` if the operation is successful (i.e., the space was occupied and is now marked as available), otherwise returns `False`. 4. **Get Available Spaces**: - The `get_available_spaces` method returns the count of available spaces in the parking lot. # Example Usage: ```python # Initialize a parking lot with 5 spaces parking_lot = ParkingLot(5) # Park 3 cars space1 = parking_lot.park() space2 = parking_lot.park() space3 = parking_lot.park() print(space1) # Output: 1 print(space2) # Output: 2 print(space3) # Output: 3 # Check available spaces print(parking_lot.get_available_spaces()) # Output: 2 # Leave space 2 result = parking_lot.leave(2) print(result) # Output: True # Check available spaces again print(parking_lot.get_available_spaces()) # Output: 3 # Try to leave an already available space result = parking_lot.leave(2) print(result) # Output: False ``` # Note: - Use 1-based indexing for space numbering. - Focus on maintaining a simple and efficient management of the parking spaces.","solution":"class ParkingLot: def __init__(self, total_spaces: int): self.total_spaces = total_spaces self.occupied_spaces = [False] * total_spaces def park(self) -> int: for index in range(self.total_spaces): if not self.occupied_spaces[index]: self.occupied_spaces[index] = True return index + 1 # 1-based index return -1 def leave(self, space_number: int) -> bool: if 1 <= space_number <= self.total_spaces and self.occupied_spaces[space_number - 1]: self.occupied_spaces[space_number - 1] = False return True return False def get_available_spaces(self) -> int: return self.occupied_spaces.count(False)"},{"question":"You are tasked with writing a function that removes all HTML tags from a given string. This problem will allow you to practice string manipulation and working with regular expressions in Python. # Instructions: 1. **Function Name**: `remove_html_tags` 2. **Function Role**: The function should strip all HTML tags from the input string and return the cleaned text. 3. **Input**: A single string that may contain HTML tags. 4. **Output**: A string with all HTML tags removed. # Requirements: 1. You must handle self-closing tags, nested tags, and attributes within the tags. 2. Make sure to use the `re` (regular expression) module in Python to identify and remove HTML tags. # Example Scenario: Input: `\\"Hello <b>World</b>, welcome to <a href=\'https://example.com\'>Example</a> site!\\"` Output: `\\"Hello World, welcome to Example site!\\"` ```python import re def remove_html_tags(input_string): This function removes all HTML tags from the input string. Parameters: input_string (str): The input string containing HTML tags. Returns: str: The cleaned text with HTML tags removed. cleaned_text = re.sub(r\'<.*?>\', \'\', input_string) return cleaned_text # Example usage: example_string = \\"Hello <b>World</b>, welcome to <a href=\'https://example.com\'>Example</a> site!\\" cleaned_string = remove_html_tags(example_string) print(cleaned_string) # Output: \\"Hello World, welcome to Example site!\\" ```","solution":"import re def remove_html_tags(input_string): This function removes all HTML tags from the input string. Parameters: input_string (str): The input string containing HTML tags. Returns: str: The cleaned text with HTML tags removed. cleaned_text = re.sub(r\'<.*?>\', \'\', input_string) return cleaned_text"},{"question":"You are required to write a function called `compute_median_by_group` that calculates the median of a specified numeric column, grouped by another column, in a given pandas DataFrame. The function should take three parameters: `data`, a pandas DataFrame, `group_by_column`, a string representing the name of the column to group by, and `value_column`, a string representing the name of the column for which the median values will be calculated. The objective of this problem is to demonstrate your ability to use the `groupby` method and apply aggregation functions to a pandas DataFrame. **Function Signature:** ```python def compute_median_by_group(data: pd.DataFrame, group_by_column: str, value_column: str) -> pd.DataFrame: pass ``` # Requirements: 1. Group the DataFrame by the `group_by_column`. 2. Compute the median of the `value_column` for each group. 3. Return a new DataFrame containing two columns: the `group_by_column` and the median values of the `value_column`, with the column name for medians as `\'median_value\'`. # Library Documentation: - `pandas.DataFrame.groupby`: This method is used to split the data into groups based on some criteria. - `pandas.Series.median`: This function computes the median of a given set of values within a Series. # Example: ```python import pandas as pd # Sample data for testing data = pd.DataFrame({ \'group\': [\'A\', \'A\', \'B\', \'B\', \'A\', \'B\'], \'values\': [10, 20, 30, 40, 50, 60] }) result = compute_median_by_group(data, \'group\', \'values\') print(result) ``` The output should be: ``` group median_value 0 A 20.0 1 B 40.0 ``` In this example, the function groups the DataFrame by the column `group` and then calculates the median of the `values` column for each group. It returns a DataFrame with the groups and their corresponding median values.","solution":"import pandas as pd def compute_median_by_group(data: pd.DataFrame, group_by_column: str, value_column: str) -> pd.DataFrame: Computes the median of a specified numeric column, grouped by another column, in a given pandas DataFrame. Parameters: - data: pd.DataFrame - the input DataFrame - group_by_column: str - the name of the column to group by - value_column: str - the name of the column for which the median values will be calculated Returns: - pd.DataFrame: A DataFrame containing the \'group_by_column\' and the median values of the \'value_column\' grouped_data = data.groupby(group_by_column)[value_column].median().reset_index() grouped_data.columns = [group_by_column, \'median_value\'] return grouped_data"},{"question":"You are required to write a function named `filter_even_numbers` which reads a list of integers from a file, filters the even numbers, and writes them to another file. The function should take two parameters: `input_file` and `output_file`, which are the names of the input and output files, respectively. Your function should perform the following tasks: 1. Open the input file and read its contents. If the file cannot be opened (e.g., due to FileNotFoundError), return `False`. 2. Parse the contents as a list of integers. 3. Filter out the even numbers from the list. 4. Write the filtered even numbers into the output file, with each number on a new line. 5. If any exception occurs during file writing, return `False`. 6. Return `True` if the operation completes successfully. Here\'s the function signature: ```python def filter_even_numbers(input_file: str, output_file: str) -> bool: pass ``` For example: - If `input_file` contains: \\"1,2,3,4,5,6,7,8,9,10\\" - The `output_file` will contain: ``` 2 4 6 8 10 ```","solution":"def filter_even_numbers(input_file: str, output_file: str) -> bool: try: # Read the content of the input file with open(input_file, \'r\') as infile: content = infile.read() # Parse the contents as a list of integers numbers = list(map(int, content.split(\',\'))) # Filter out the even numbers even_numbers = [num for num in numbers if num % 2 == 0] # Write the filtered even numbers into the output file with open(output_file, \'w\') as outfile: for number in even_numbers: outfile.write(f\\"{number}n\\") return True except (FileNotFoundError, ValueError, OSError): return False"},{"question":"You are given a CSV file named `products.csv` that contains information about various products and their prices. The columns in the CSV file are `product_id`, `product_name`, `price`, and some other irrelevant columns. Each row represents one product. Your task is to write a function named `print_best_deals` that reads the `products.csv` file, identifies the products with prices below a specified threshold, and prints these product names and their prices in ascending order of price. Use the `pandas` library to handle the data loading and manipulation. # Details: 1. The `products.csv` file is structured as follows: ``` product_id,product_name,price,columnX,columnY 101,ProductA,19.99,...,... 102,ProductB,9.99,...,... 103,ProductC,29.99,...,... ... ``` 2. Your function `print_best_deals` should: - Take an argument `threshold` which specifies the upper limit for the price. - Read the data from `products.csv` using `pandas.read_csv`. - Filter the products where the `price` is less than the `threshold`. - Sort the filtered data by the `price` column in ascending order. - Print the `product_name` and `price` of the filtered products in the specified order. Use the `pandas.read_csv` function as specified in the documentation to load the data from the CSV file. # Example Output: If the `products.csv` contains the following data and the threshold is 20.00: ``` product_id,product_name,price,columnX,columnY 101,ProductA,19.99,...,... 102,ProductB,9.99,...,... 103,ProductC,29.99,...,... ``` The terminal should display: ``` The best deals are: ProductB: 9.99 ProductA: 19.99 ```","solution":"import pandas as pd def print_best_deals(threshold): # Load the CSV file into a DataFrame df = pd.read_csv(\'products.csv\') # Filter the DataFrame where the price is less than the threshold filtered_df = df[df[\'price\'] < threshold] # Sort the filtered DataFrame by the price in ascending order sorted_df = filtered_df.sort_values(by=\'price\') # Print the product names and prices print(\\"The best deals are:\\") for index, row in sorted_df.iterrows(): print(f\\"{row[\'product_name\']}: {row[\'price\']:.2f}\\")"},{"question":"Calculate and display detailed information about the prime numbers within a given range. Specifically, determine the total count of prime numbers, their sum, and average. Additionally, plot a histogram of the frequency of digits appearing in these prime numbers. The function should return a dictionary with the statistics and a matplotlib Figure object containing the histogram. You should write self-contained code starting with: ```python import matplotlib.pyplot as plt from sympy import isprime def analyze_primes(start, end): ```","solution":"import matplotlib.pyplot as plt from sympy import isprime import numpy as np def analyze_primes(start, end): Analyzes prime numbers in the given range [start, end]. Returns a dictionary with the total count of prime numbers, their sum, average, and a matplotlib Figure object with a histogram of digit frequency. # Find all prime numbers in the given range primes = [num for num in range(start, end+1) if isprime(num)] prime_count = len(primes) prime_sum = sum(primes) prime_avg = prime_sum / prime_count if prime_count else 0 # Count the frequency of each digit in the prime numbers digit_frequency = np.zeros(10, int) for prime in primes: for digit in str(prime): digit_frequency[int(digit)] += 1 # Plot the histogram for digit frequency fig, ax = plt.subplots() ax.bar(range(10), digit_frequency, tick_label=list(map(str, range(10)))) ax.set_xlabel(\'Digit\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Frequency of Digits in Prime Numbers\') # Returning as a dictionary including the matplotlib figure object return { \'prime_count\': prime_count, \'prime_sum\': prime_sum, \'prime_avg\': prime_avg, \'histogram_fig\': fig }"},{"question":"You are given a list of strings representing a sequence of operations for a basic calculator supporting addition, subtraction, multiplication, and division. Each operation is expressed as a string in the form `\\"a op b\\"`, where `a` and `b` are integers, and `op` is one of the operators `\'+\', \'-\', \'*\', \'/\'`. Your task is to implement a function `evaluate_operations` which: 1. Takes in a list of strings representing a sequence of operations. 2. Returns a list of results for each operation in the order they appear in the input list. **Requirements:** - You must handle division by zero gracefully, and for such cases, return `\\"undefined\\"` as the result for that operation. - You must handle invalid operations gracefully, supporting only the four defined operators. Return `\\"invalid operation\\"` for any other cases. The function should be implemented as follows: ```python def evaluate_operations(operations): # Implementation here pass ``` Here is an illustrative example of how your function might be used: ```python operations = [\\"3 + 5\\", \\"10 - 2\\", \\"4 * 8\\", \\"9 / 3\\", \\"6 / 0\\", \\"7 & 2\\"] results = evaluate_operations(operations) print(results) ``` Expected output: ``` [8, 8, 32, 3, \\"undefined\\", \\"invalid operation\\"] ```","solution":"def evaluate_operations(operations): results = [] for operation in operations: try: # Split the operation into components: a, op, b parts = operation.split() if len(parts) != 3: results.append(\\"invalid operation\\") continue a, op, b = parts a = int(a) b = int(b) if op == \'+\': results.append(a + b) elif op == \'-\': results.append(a - b) elif op == \'*\': results.append(a * b) elif op == \'/\': if b == 0: results.append(\\"undefined\\") else: results.append(a // b) # Using integer division else: results.append(\\"invalid operation\\") except ValueError: results.append(\\"invalid operation\\") return results"},{"question":"In this problem, you are required to write a Python function `transaction_summary` using the `pandas` library to analyze a given CSV file containing transaction data. The CSV file will contain the columns \'Transaction ID\', \'Customer ID\', \'Amount\', and \'Date\'. Your task is to return a summary containing the total number of transactions, the total amount of money transacted, and the average transaction amount per customer over a specified date range. Your function should perform the following steps: 1. Load the data from the provided CSV file using `pandas.read_csv()`. 2. Convert the \'Date\' column from string to datetime. 3. Filter the data based on the provided `start_date` and `end_date` arguments. 4. Calculate the total number of transactions. 5. Calculate the total amount of money transacted. 6. Calculate the average transaction amount per customer. 7. Return a dictionary with the summary statistics. **Function signature:** ```python def transaction_summary(file_path: str, start_date: str, end_date: str) -> dict: pass ``` **Input:** - `file_path` (str): The path to the CSV file containing transaction data. - `start_date` (str): The start date for filtering transactions (inclusive), in the format \'YYYY-MM-DD\'. - `end_date` (str): The end date for filtering transactions (inclusive), in the format \'YYYY-MM-DD\'. **Output:** - `summary` (dict): A dictionary containing the summary statistics with the keys \'total_transactions\', \'total_amount\', and \'average_amount_per_customer\'. **Example:** A possible call to the function might look like this: ```python summary = transaction_summary(\'transactions.csv\', \'2021-01-01\', \'2021-12-31\') ``` In this example, the resulting dictionary `summary` may look like: ```python summary = { \'total_transactions\': 1000, \'total_amount\': 50000.0, \'average_amount_per_customer\': 500.0 } ``` You should ensure to follow the required library\'s API documentation for implementing the `transaction_summary` function.","solution":"import pandas as pd def transaction_summary(file_path: str, start_date: str, end_date: str) -> dict: Returns a summary of transactions based on the given CSV file and date range. :param file_path: path to the CSV file containing transaction data :param start_date: the start date for filtering transactions (inclusive) :param end_date: the end date for filtering transactions (inclusive) :return: a dictionary with the summary statistics # Load the data from the CSV file data = pd.read_csv(file_path) # Convert the \'Date\' column to datetime data[\'Date\'] = pd.to_datetime(data[\'Date\']) # Filter the data based on the start_date and end_date mask = (data[\'Date\'] >= start_date) & (data[\'Date\'] <= end_date) filtered_data = data.loc[mask] # Calculate the total number of transactions total_transactions = filtered_data.shape[0] # Calculate the total amount of money transacted total_amount = filtered_data[\'Amount\'].sum() # Calculate the average transaction amount per customer customer_totals = filtered_data.groupby(\'Customer ID\')[\'Amount\'].sum() average_amount_per_customer = customer_totals.mean() # Return the summary statistics summary = { \'total_transactions\': total_transactions, \'total_amount\': total_amount, \'average_amount_per_customer\': average_amount_per_customer } return summary"},{"question":"You need to implement a Python function `process_network_traffic` that analyzes network traffic data. The traffic data is represented as a list of dictionaries, where each dictionary contains information about a single network packet. Each packet has the following fields: - `source_ip`: A string representing the source IP address. - `destination_ip`: A string representing the destination IP address. - `size`: An integer indicating the size of the packet (in bytes). - `timestamp`: A string representing the time the packet was sent in ISO 8601 format. Your function should perform the following tasks: 1. **Summary Statistics**: Calculate summary statistics for the packet sizes, including: - Total number of packets. - Sum of all packet sizes. - Average packet size. - The size of the largest and smallest packets. 2. **Traffic by IP Address**: Generate a dictionary where the keys are IP addresses (both source and destination), and the values are dictionaries containing the total size of packets sent from (`outgoing`) and received by (`incoming`) that IP address. 3. **Top N Talkers**: Identify the top N \\"talkers\\" in the network by total traffic (sum of sent and received bytes). Return their IP addresses sorted by total traffic in descending order. 4. **Timestamp Analysis**: Parse the timestamps and identify the peak hour (hour with the most packets). The function signature should be: ```python def process_network_traffic(packets: list, N: int) -> dict: ``` Where `packets` is the list of dictionaries representing the network packets and `N` is the number of top talkers to identify. # Requirements: - Utilize the `datetime` module to parse and analyze timestamps. - Ensure the function does not alter the input data. - Handle edge cases such as empty packet lists gracefully. # Output: The function should return a dictionary with the following structure: ```python { \\"summary\\": { \\"total_packets\\": int, \\"total_size\\": int, \\"average_size\\": float, \\"max_size\\": int, \\"min_size\\": int }, \\"traffic_by_ip\\": { \\"ip_address1\\": {\\"outgoing\\": int, \\"incoming\\": int}, \\"ip_address2\\": {\\"outgoing\\": int, \\"incoming\\": int}, ... }, \\"top_talkers\\": [\\"ip_address1\\", \\"ip_address2\\", ...], \\"peak_hour\\": int } ```","solution":"from datetime import datetime from collections import defaultdict, Counter def process_network_traffic(packets: list, N: int) -> dict: # Initialize summary statistics total_packets = len(packets) total_size = sum(packet[\'size\'] for packet in packets) min_size = min(packet[\'size\'] for packet in packets) if packets else 0 max_size = max(packet[\'size\'] for packet in packets) if packets else 0 average_size = total_size / total_packets if total_packets > 0 else 0 summary = { \\"total_packets\\": total_packets, \\"total_size\\": total_size, \\"average_size\\": average_size, \\"max_size\\": max_size, \\"min_size\\": min_size, } # Initialize traffic by IP statistics traffic_by_ip = defaultdict(lambda: {\'outgoing\': 0, \'incoming\': 0}) for packet in packets: source_ip = packet[\'source_ip\'] destination_ip = packet[\'destination_ip\'] size = packet[\'size\'] traffic_by_ip[source_ip][\'outgoing\'] += size traffic_by_ip[destination_ip][\'incoming\'] += size # Calculate top N talkers total_traffic_by_ip = {ip: stats[\'outgoing\'] + stats[\'incoming\'] for ip, stats in traffic_by_ip.items()} top_talkers = sorted(total_traffic_by_ip, key=total_traffic_by_ip.get, reverse=True)[:N] # Analyze peak hour packet_hours = [datetime.fromisoformat(packet[\'timestamp\']).hour for packet in packets] if packet_hours: most_common_hour = Counter(packet_hours).most_common(1)[0][0] else: most_common_hour = None result = { \\"summary\\": summary, \\"traffic_by_ip\\": dict(traffic_by_ip), \\"top_talkers\\": top_talkers, \\"peak_hour\\": most_common_hour } return result"},{"question":"You need to implement a function that rotates an image represented by a 2D list (matrix) by 90 degrees clockwise. Your function, `rotate_image`, will take one argument: - `matrix`: A 2D list of integers representing the image (a square matrix), where `matrix[i][j]` represents the pixel value at row `i` and column `j`. The function should return a new 2D list that is the result of rotating the input matrix by 90 degrees in the clockwise direction. Note: You are not allowed to use any external libraries. **Examples:** ```python assert rotate_image([[1, 2], [3, 4]]) == [[3, 1], [4, 2]] assert rotate_image([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Here is the signature of the function you need to implement: ```python def rotate_image(matrix): Rotate the given image (square matrix) by 90 degrees clockwise. Args: matrix: 2D list of integers, where matrix[i][j] represents the pixel value at row \'i\' and column \'j\'. Returns: A 2D list of integers representing the rotated image. ```","solution":"def rotate_image(matrix): Rotate the given image (square matrix) by 90 degrees clockwise. Args: matrix: 2D list of integers, where matrix[i][j] represents the pixel value at row \'i\' and column \'j\'. Returns: A 2D list of integers representing the rotated image. n = len(matrix) # Result matrix with the same dimensions but empty rotated = [[0] * n for _ in range(n)] # Perform the rotation for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"You are developing a simple online game and need to track the scores of players. Each game session produces a dictionary containing the names of the players and their corresponding scores. You need to combine the scores from multiple game sessions to generate a cumulative leaderboard. Write a function called `generate_leaderboard(sessions)` that accepts a list of dictionaries, where each dictionary represents the scores of players in a single game session. In each dictionary, the keys are player names and the values are their scores for that session. The function should perform the following steps: 1. Iterate through each session\'s dictionary and aggregate the scores for each player. 2. If a player appears in multiple sessions, sum up their scores across all sessions. 3. Create a sorted leaderboard list of tuples (in descending order of scores), where each tuple contains a player\'s name and their cumulative score. The function should return the sorted leaderboard list, which contains tuples of player names and their corresponding total scores. The function signature is: ```python def generate_leaderboard(sessions): # your code here ``` # Example: ```python sessions = [ {\\"Alice\\": 10, \\"Bob\\": 15, \\"Charlie\\": 5}, {\\"Alice\\": 12, \\"Charlie\\": 8, \\"David\\": 7}, {\\"Bob\\": 20, \\"Charlie\\": 12, \\"Alice\\": 3} ] generate_leaderboard(sessions) ``` # Output: ```python [(\'Alice\', 25), (\'Bob\', 35), (\'Charlie\', 25), (\'David\', 7)] ```","solution":"def generate_leaderboard(sessions): Generates a cumulative leaderboard from multiple game sessions. Parameters: sessions (list of dicts): A list of dictionaries, each containing player names as keys and their scores as values. Returns: list of tuples: A sorted list of tuples in descending order of scores, where each tuple contains a player\'s name and their cumulative score. from collections import defaultdict # Using defaultdict to automatically handle missing entries total_scores = defaultdict(int) # Iterate through each session to aggregate scores for session in sessions: for player, score in session.items(): total_scores[player] += score # Sorting the leaderboard based on scores in descending order leaderboard = sorted(total_scores.items(), key=lambda item: item[1], reverse=True) return leaderboard"},{"question":"You are asked to create a function `organize_workshops` that schedules the maximum number of non-overlapping workshops. Each workshop is represented by a tuple containing its start and end time. Function Signature ```python def organize_workshops(workshops: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` Parameters - `workshops` (List[Tuple[int, int]]): A list of tuples where each tuple represents: - Start time (`int`): The start time of the workshop. - End time (`int`): The end time of the workshop. Returns - `List[Tuple[int, int]]`: A list of tuples representing the scheduled workshops that do not overlap. The list should be sorted by the start time of the workshops. Constraints 1. The function should log an error if no workshops are provided. 2. The function should log an error if any workshop has an invalid time interval where the start time is equal to or greater than the end time. 3. If there are multiple optimal solutions, return any one of them. 4. The function should aim to maximize the number of non-overlapping workshops. Example ```python workshops = [ (1, 4), (2, 3), (3, 5), (7, 8), (5, 6), ] result = organize_workshops(workshops) print(result) # Expected output might be something like [(1, 4), (5, 6), (7, 8)] ``` In this example, the function schedules the maximum number of non-overlapping workshops. The workshops `(1, 4)`, `(5, 6)`, and `(7, 8)` do not overlap, providing a valid solution.","solution":"from typing import List, Tuple def organize_workshops(workshops: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if not workshops: print(\\"Error: No workshops provided.\\") return [] # Filtering out invalid workshops valid_workshops = [workshop for workshop in workshops if workshop[0] < workshop[1]] if len(valid_workshops) != len(workshops): print(\\"Error: Some workshops have invalid time intervals.\\") # Sort workshops by their end times valid_workshops.sort(key=lambda x: x[1]) max_non_overlapping = [] current_end_time = 0 for workshop in valid_workshops: if workshop[0] >= current_end_time: max_non_overlapping.append(workshop) current_end_time = workshop[1] return max_non_overlapping"},{"question":"You have been hired by an e-commerce company to analyze and optimize their online store\'s product search feature. Your task is to identify the most common search terms used by customers and generate a summary report. The goal is to create a function `analyze_search_terms(file_path: str) -> None` that: 1. Reads the search terms from a given CSV file containing customer search data. 2. Cleans the data by removing any special characters and converting all search terms to lowercase. 3. Counts the frequency of each unique search term. 4. Generates a summary report that displays the top 10 most frequent search terms along with their frequencies. 5. Saves this summary report into a new CSV file called `search_summary.csv`. Parameters: - `file_path` (str): The path to the CSV file containing customer search data. The CSV file is assumed to have a column header `\\"search_term\\"`. Libraries to use: - `csv` - `collections` for `Counter` Ensure to follow these requirements: 1. The summary report CSV file should be sorted by frequency in descending order. 2. The report should have headers: `SEARCH_TERM,FREQUENCY`. Example: ```python # Given a CSV file with the following content: # search_term # Laptop # Phone # Laptop # phone # tablet # ... # After running analyze_search_terms(\'customer_searches.csv\'), the content of search_summary.csv should look like: # SEARCH_TERM,FREQUENCY # laptop,2 # phone,2 # tablet,1 ``` Your function should look like this: ```python def analyze_search_terms(file_path: str) -> None: # Your implementation goes here ```","solution":"import csv from collections import Counter import re def analyze_search_terms(file_path: str) -> None: Analyzes the search terms from the input CSV file, computes frequency of each unique term, and generates a summary report with the top 10 search terms saved into `search_summary.csv`. :param file_path: The path to the CSV file containing customer search data search_terms = [] # Read the search terms from the CSV file with open(file_path, newline=\'\', encoding=\'utf-8\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: term = row[\'search_term\'].lower() # Convert to lowercase term = re.sub(r\'W+\', \'\', term) # Remove special characters search_terms.append(term) # Count frequency of each search term term_count = Counter(search_terms) # Get the 10 most common search terms common_terms = term_count.most_common(10) # Write the summary report to \'search_summary.csv\' with open(\'search_summary.csv\', \'w\', newline=\'\', encoding=\'utf-8\') as csvfile: fieldnames = [\'SEARCH_TERM\', \'FREQUENCY\'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for term, frequency in common_terms: writer.writerow({\'SEARCH_TERM\': term, \'FREQUENCY\': frequency})"},{"question":"You need to implement a Python function named `find_max_avg_subarray` to determine the starting index of the subarray of length `k` that has the highest average value within a given list of integers. Your function should adhere to the following specifications: - **Function Signature**: `def find_max_avg_subarray(nums: list, k: int) -> int` - **Parameters**: - `nums` (list): A list of integers representing the input array. - `k` (int): The length of the subarray for which we need to find the highest average. - **Returns**: - `int`: The starting index of the subarray of length `k` that has the highest average value. - **Requirements**: - The function should handle edge cases such as an empty list or where `k` is greater than the length of the list gracefully. - The algorithm should run in O(n) time complexity for efficient processing of larger arrays. # Examples: ```python nums = [1, 12, -5, -6, 50, 3] k = 4 print(find_max_avg_subarray(nums, k)) # Expected Output: 1 (subarray [12, -5, -6, 50]) nums = [5, 3, 8, 1, 4, 9, 2, 7] k = 3 print(find_max_avg_subarray(nums, k)) # Expected Output: 5 (subarray [9, 2, 7]) ``` # Additional Notes: - The subarray length `k` is guaranteed to be positive. - The input list `nums` can be assumed not to be empty. - The function should iterate over the list efficiently, updating the maximum average subarray found so far.","solution":"def find_max_avg_subarray(nums: list, k: int) -> int: if not nums or k > len(nums): return -1 # Edge case handling: return -1 if input is invalid max_sum = current_sum = sum(nums[:k]) max_index = 0 for i in range(k, len(nums)): current_sum += nums[i] - nums[i-k] if current_sum > max_sum: max_sum = current_sum max_index = i - k + 1 return max_index"},{"question":"You are required to write a function called `sorted_merge_linked_lists` that merges two sorted singly linked lists into one sorted linked list without using any extra space for new nodes, by splicing together the original nodes of the given lists. Each node in the linked lists has an integer value and a reference to the next node. You need to merge the two lists in such a way that the resulting linked list remains sorted. **Function Signature:** ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def sorted_merge_linked_lists(l1: ListNode, l2: ListNode) -> ListNode: pass ``` **Example:** ```python # Example linked list 1: 1 -> 2 -> 4 l1 = ListNode(1) l1.next = ListNode(2) l1.next.next = ListNode(4) # Example linked list 2: 1 -> 3 -> 4 l2 = ListNode(1) l2.next = ListNode(3) l2.next.next = ListNode(4) # Merged linked list: 1 -> 1 -> 2 -> 3 -> 4 -> 4 merged_list = sorted_merge_linked_lists(l1, l2) ``` **Constraints:** - Both `l1` and `l2` can be empty (i.e., they can be `None`). - The elements in each of the two linked lists are sorted in non-decreasing order. - The merged linked list should also be in non-decreasing order. **Note:** - Do not create any new nodes. Instead, re-point the `next` pointers of the existing nodes to achieve the desired result.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def sorted_merge_linked_lists(l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode(0) current = dummy while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If any of the lists has remaining nodes, link them if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"You are tasked with implementing a function to simulate the operation of a queue using two stacks. The provided function, `QueueUsingStacks`, will use two internal stacks to perform the enqueue (add) and dequeue (remove) operations. Your objective is to create a class called `QueueUsingStacks` that supports the operations `enqueue` and `dequeue`. The class will use two stacks internally: 1. `stack1` for enqueuing elements. 2. `stack2` for dequeuing elements. Elements should be enqueued into `stack1` and dequeued from `stack2`. When dequeuing an element, if `stack2` is empty, all the elements from `stack1` should be transferred to `stack2` before performing the dequeue operation. # Class Definition ```python class QueueUsingStacks: def __init__(self): Initialize your data structure here. def enqueue(self, x): Enqueue element x to the end of the queue. Parameters: x (int): Element to add. def dequeue(self): Dequeue the element from the front of the queue and return it. Returns: int: The element at the front of the queue. Raises: IndexError: If the queue is empty. ``` # Example Suppose we perform the following operations: ```python q = QueueUsingStacks() q.enqueue(1) q.enqueue(2) q.enqueue(3) assert q.dequeue() == 1 q.enqueue(4) assert q.dequeue() == 2 assert q.dequeue() == 3 assert q.dequeue() == 4 ``` The expected outputs for the dequeue operations are as follows: ```python 1, 2, 3, 4 ``` # Constraints - All elements must be integers. - Use two stacks (`stack1` and `stack2`) internally with standard list operations (append and pop) in Python. - The enqueue operation must have an O(1) time complexity. - The dequeue operation must have an amortized O(1) time complexity.","solution":"class QueueUsingStacks: def __init__(self): Initialize your data structure here with two stacks. self.stack1 = [] self.stack2 = [] def enqueue(self, x): Enqueue element x to the end of the queue. Parameters: x (int): Element to add. self.stack1.append(x) def dequeue(self): Dequeue the element from the front of the queue and return it. Returns: int: The element at the front of the queue. Raises: IndexError: If the queue is empty. if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: raise IndexError(\\"dequeue from empty queue\\") return self.stack2.pop()"},{"question":"You are required to write a function named **`RestaurantBillCalculator()`** that helps a restaurant calculate the total bill for a customer. This will include: 1. Prompting the user to input the cost of their meal. 2. Asking the user to input the percentage of tip they wish to leave. 3. Based on the input: - Calculate the tip amount by applying the percentage to the cost of the meal. - Calculate the total bill by adding the tip amount to the cost of the meal. 4. Print the tip amount and the total bill in a formatted manner: - Tip amount should be displayed with 2 decimal places. - Total bill should be displayed with 2 decimal places. 5. If the user inputs invalid data (non-numeric values), handle the error gracefully by printing \\"Invalid input, please enter numeric values.\\" Your primary task is to correctly format numbers to 2 decimal places and handle potential input errors. To guide you: - Use Python\'s string formatting techniques to format numbers to 2 decimal places. - Use try-except blocks to handle invalid inputs. ```python def RestaurantBillCalculator(): # Your implementation here ``` Use the given function structure and complete the implementation by adhering to the instructions provided.","solution":"def RestaurantBillCalculator(): try: # Prompting the user to input the cost of their meal meal_cost = float(input(\\"Enter the cost of your meal: \\")) # Asking the user to input the percentage of tip they wish to leave tip_percentage = float(input(\\"Enter the tip percentage you wish to leave: \\")) # Calculating the tip amount tip_amount = (tip_percentage / 100) * meal_cost # Calculating the total bill total_bill = meal_cost + tip_amount # Formatting and printing the amounts with 2 decimal places print(\\"Tip Amount: {:.2f}\\".format(tip_amount)) print(\\"Total Bill: {:.2f}\\".format(total_bill)) except ValueError: print(\\"Invalid input, please enter numeric values.\\")"},{"question":"Given an integer `n`, write a function that generates a list of the first `n` Fibonacci numbers, but with a twist. If a Fibonacci number is even, replace it with its half; if it is odd, replace it with its square. Return the modified list. The function should output: list: A list containing the modified Fibonacci numbers as per the described rules. You should write self-contained code starting with: ``` def modified_fibonacci(n): ```","solution":"def modified_fibonacci(n): Generates a list of the first n Fibonacci numbers with modifications: - If a Fibonacci number is even, replace it with its half. - If a Fibonacci number is odd, replace it with its square. if n <= 0: return [] fib_list = [0, 1] for i in range(2, n): next_fib = fib_list[-1] + fib_list[-2] fib_list.append(next_fib) modified_list = [] for num in fib_list[:n]: if num % 2 == 0: modified_list.append(num // 2) else: modified_list.append(num ** 2) return modified_list"},{"question":"You are required to write a function `find_longest_sequence`, which, given a dictionary of lists, finds the list with the longest consecutive sequence of integers. The longest sequence is defined as the one that has the most numbers in consecutive increasing order (e.g., [3, 4, 5]). The function should take the following parameters: - `data` (dict): A dictionary where the keys are arbitrary names (strings) and the values are lists of integers. Your function should have the following signature: ```python def find_longest_sequence(data: dict) -> str: pass ``` Parameters: - `data` (dict): A dictionary where the values are lists of integers. Returns: - A string representing the key for the list with the longest consecutive sequence. If there are multiple lists with the same length of the longest sequence, return the key of the first one found. Example: ```python data = { \\"a\\": [1, 2, 5, 6], \\"b\\": [4, 5, 6, 7], \\"c\\": [10, 11, 12, 13, 14], \\"d\\": [20, 21] } assert find_longest_sequence(data) == \'c\' ``` In this example, the longest consecutive sequence of integers is found in the list associated with the key \'c\', which contains [10, 11, 12, 13, 14].","solution":"def find_longest_sequence(data: dict) -> str: Find the key in the dictionary whose list contains the longest sequence of consecutive integers. :param data: Dictionary with keys as names and values as lists of integers :return: Key of the list with the longest consecutive sequence def longest_consecutive_sequence(lst): Helper function that finds the length of the longest consecutive sequence within a list of integers. if not lst: return 0 lst = sorted(set(lst)) longest, current_streak = 1, 1 for i in range(1, len(lst)): if lst[i] == lst[i - 1] + 1: current_streak += 1 longest = max(longest, current_streak) else: current_streak = 1 return longest longest_key = None longest_length = 0 for key, lst in data.items(): current_length = longest_consecutive_sequence(lst) if current_length > longest_length: longest_key = key longest_length = current_length return longest_key"},{"question":"You are tasked with writing a function named `generate_passwords` that generates a list of random passwords based on specific criteria. The function should accept two parameters: the number of passwords to generate and the length of each password. Each password must include at least one uppercase letter, one lowercase letter, one digit, and one special character from the set `!@#%^&*`. Here are the steps your function should follow: 1. Accept the number of passwords (`num_passwords`) to generate and the length of each password (`length`). 2. Ensure each password meets the criteria mentioned above. 3. Randomly select characters from the given sets to build passwords. 4. Return a list of generated passwords. Here is a summary of the required behavior: - **Function Name:** generate_passwords - **Parameters:** - `num_passwords`: integer, the number of passwords to generate. - `length`: integer, the length of each password. - **Returns:** - A list of strings where each string is a randomly generated password. **Constraints:** - Use the `random` module to generate random elements. - The length of each password should be at least 4 to accommodate the required character sets. - Handle cases where `num_passwords` or `length` is less than 1 by returning an empty list. **Example:** ```python generate_passwords(3, 8) # Possible Output: [\'A1d3fR%\', \'b2T#j6K7\', \'M4pL9xV\'] ```","solution":"import random import string def generate_passwords(num_passwords, length): Generates a list of random passwords based on specific criteria. Parameters: - num_passwords (int): The number of passwords to generate. - length (int): The length of each password. Returns: - list of str: A list of generated passwords. if num_passwords < 1 or length < 4: return [] passwords = [] special_chars = \\"!@#%^&*\\" for _ in range(num_passwords): password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(special_chars) ] if length > 4: all_chars = string.ascii_letters + string.digits + special_chars password.extend(random.choice(all_chars) for _ in range(length - 4)) random.shuffle(password) passwords.append(\\"\\".join(password)) return passwords"},{"question":"Write a function that generates all possible unique permutations of a given string. The function should return a list of strings, where each string is a unique permutation of the input string. The function should begin with: ``` from itertools import permutations def generate_permutations(s): ```","solution":"from itertools import permutations def generate_permutations(s): Generates all possible unique permutations of a given string. Args: s (str): The input string. Returns: list of str: A list containing all unique permutations of the input string. # Generate all permutations as tuples. perm_tuples = permutations(s) # Convert each tuple to a string and remove duplicates using set. unique_permutations = set([\'\'.join(p) for p in perm_tuples]) # Convert set back to list and return. return list(unique_permutations)"},{"question":"You have been asked to create a function that takes a string representing a mathematical expression and evaluates it. The function should handle addition (+), subtraction (-), multiplication (*), and division (/). Additionally, the function should consider the order of operations (i.e., multiplication and division before addition and subtraction). **Function Name**: `evaluate_expression` **Parameters**: - `expression`: A string representing the mathematical expression to be evaluated. The expression will only contain integers and the operators +, -, *, and /. **Requirements**: 1. The function should correctly evaluate the expression following the standard order of operations. 2. You are not allowed to use the `eval` function for evaluating the expression. 3. Handle division by zero by raising a `ZeroDivisionError` with the message \\"division by zero\\". **Constraints**: - The input string will be a valid mathematical expression containing only non-negative integers and the operators +, -, *, and /. - The input expression will not contain any spaces. **Example Usage**: ```python result1 = evaluate_expression(\\"3+5*2\\") # Should return 13 result2 = evaluate_expression(\\"10+2*6/3-5\\") # Should return 9 result3 = evaluate_expression(\\"4/2+3*3\\") # Should return 11 result4 = evaluate_expression(\\"10/0\\") # Should raise ZeroDivisionError ```","solution":"def evaluate_expression(expression): import operator import re # Define operators and their precedences operators = { \'+\': (1, operator.add), \'-\': (1, operator.sub), \'*\': (2, operator.mul), \'/\': (2, operator.truediv) } def parse_tokens(expression): # Use regex to parse numbers and operators tokens = re.findall(r\'d+|[+-*/]\', expression) return tokens def shunting_yard(parsed_tokens): output_queue = [] operator_stack = [] for token in parsed_tokens: if token.isdigit(): output_queue.append(int(token)) elif token in operators: while (operator_stack and operator_stack[-1] in operators and operators[token][0] <= operators[operator_stack[-1]][0]): output_queue.append(operator_stack.pop()) operator_stack.append(token) while operator_stack: output_queue.append(operator_stack.pop()) return output_queue def evaluate_rpn(rpn_queue): stack = [] for token in rpn_queue: if type(token) == int: stack.append(token) else: num2 = stack.pop() num1 = stack.pop() if token == \'/\' and num2 == 0: raise ZeroDivisionError(\\"division by zero\\") result = operators[token][1](num1, num2) stack.append(result) return stack[0] tokens = parse_tokens(expression) rpn_queue = shunting_yard(tokens) result = evaluate_rpn(rpn_queue) return result"},{"question":"# Problem Statement: You are required to implement a function that performs the element-wise multiplication of two sparse matrices and returns the result as a sparse matrix. For this problem, the sparse matrices are represented as dictionaries where the keys are tuples (i, j) representing the position of the element, and the values are the non-zero values at those positions. - **Function Signature:** ```python def sparse_matrix_multiply(mat1, mat2): ``` - **Parameters:** - `mat1`: A dictionary representing the first sparse matrix where the keys are position tuples (i, j) and the values are the non-zero values at those positions. - `mat2`: A dictionary representing the second sparse matrix where the keys are position tuples (i, j) and the values are the non-zero values at those positions. - **Returns:** - A dictionary representing the resulting sparse matrix where the keys are position tuples (i, j) and the values are the non-zero values at those positions. - The function should return an empty dictionary if either `mat1` or `mat2` is empty or if their dimensions do not comply for element-wise multiplication. # Instructions: 1. Ensure that both input matrices are not empty before proceeding with the multiplication. 2. The element-wise multiplication should be performed only where both matrices have non-zero values. 3. The dimensions of `mat1` and `mat2` should match for valid element-wise multiplication, otherwise return an empty dictionary. 4. Return the result as a dictionary representing the sparse matrix. # Example: ```python # Example of sparse matrix multiplication mat1 = { (0, 0): 1, (0, 1): 2, (1, 1): 3 } mat2 = { (0, 0): 4, (0, 1): 5, (1, 1): 6 } print(sparse_matrix_multiply(mat1, mat2)) # Expected Output: # {(0, 0): 4, (0, 1): 10, (1, 1): 18} # Example with empty matrix mat1 = {} mat2 = { (0, 0): 4, (0, 1): 5, (1, 1): 6 } print(sparse_matrix_multiply(mat1, mat2)) # Expected Output: # {} ```","solution":"def sparse_matrix_multiply(mat1, mat2): Performs element-wise multiplication of two sparse matrices. Parameters: mat1 (dict): a dictionary representing the first sparse matrix mat2 (dict): a dictionary representing the second sparse matrix Returns: dict: a dictionary representing the resulting sparse matrix if not mat1 or not mat2: return {} result = {} for key in mat1: if key in mat2: result[key] = mat1[key] * mat2[key] return result"},{"question":"You are working on a file processing task that involves text files containing multiple lines of data. Each line in the text file represents a record, where each record has fields separated by a comma. The first line of the file contains the header, which lists the names of the fields. Your task is to write a function that reads a given text file, parses its content, and outputs a dictionary where the keys are the field names from the header, and the values are lists containing the respective field values from each record. Additionally, your function should filter records based on a specified filter condition. If a filter condition is provided, only records that satisfy the condition should be included in the output dictionary. Write a function named `process_file` that takes the following parameters: 1. `file_path` (str): The path to the text file. 2. `filter_field` (str, optional): The field name to apply the filter condition on. Defaults to `None`. 3. `filter_value` (str, optional): The value to filter the records by. Defaults to `None`. The function should accomplish the following: 1. Open and read the file at the specified `file_path`. 2. Extract the header and use it to create dictionary keys. 3. Parse each record and add the values to the corresponding lists in the dictionary. 4. If `filter_field` and `filter_value` are provided, include only the records that match the `filter_value` for the specified `filter_field`. 5. Return the constructed dictionary. Here is a template to start with: ```python def process_file(file_path, filter_field=None, filter_value=None): # Your code here ``` You can assume that the file is well-formed and that the filter_field, if provided, exists in the header. Implement the function to achieve the described requirements.","solution":"def process_file(file_path, filter_field=None, filter_value=None): result = {} with open(file_path, \'r\') as file: # Read the header line header = file.readline().strip().split(\',\') # Initialize the result dictionary with empty lists for each field for field in header: result[field] = [] # Read each record for line in file: record = line.strip().split(\',\') record_dict = dict(zip(header, record)) # If filtering is enabled, check the filter condition if filter_field and filter_value: if record_dict[filter_field] != filter_value: continue # Append each value to the corresponding list in the result dictionary for field in header: result[field].append(record_dict[field]) return result"},{"question":"You are required to write a Python function that finds the longest consecutive sequence of numbers in a given list and returns it as a new list. The numbers in the input list are not sorted. Here are the requirements for the function: - The function should be named `find_longest_consecutive_sequence`. - The function should take a list of integers as an argument. - It should return a list that contains the longest consecutive sequence found within the input list. - If there are multiple sequences with the same length, return the one that appears first. **Function Signature**: ```python def find_longest_consecutive_sequence(nums): # Your code here ``` **Example Usage**: ```python input_list = [100, 4, 200, 1, 3, 2] print(find_longest_consecutive_sequence(input_list)) ``` **Example Output**: ``` [1, 2, 3, 4] ``` Explanation: The longest consecutive sequence is `[1, 2, 3, 4]` and its length is 4.","solution":"def find_longest_consecutive_sequence(nums): if not nums: return [] nums_set = set(nums) longest_sequence = [] for num in nums: if num - 1 not in nums_set: # start of a sequence current_sequence = [] current_num = num while current_num in nums_set: current_sequence.append(current_num) current_num += 1 if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence return longest_sequence"},{"question":"Write a function that checks whether a matrix is symmetrical. A square matrix is symmetrical if, when it is reflected along its main diagonal, it remains the same. The function should take in a matrix and return a boolean indicating whether the matrix is symmetrical. If the input matrix is not a square matrix, the function should raise a ValueError. The function should output: boolean: True if the matrix is symmetrical, False otherwise. The function should raise the exception for: ValueError: If the input matrix is not a square matrix. You should write self-contained code starting with: ``` def is_symmetric(matrix): ```","solution":"def is_symmetric(matrix): Checks whether the given matrix is symmetrical along its main diagonal. Parameters: matrix (list of list of int): The matrix to check. Returns: boolean: True if the matrix is symmetrical, False otherwise. Raises: ValueError: If the input matrix is not a square matrix. if not matrix or not matrix[0]: raise ValueError(\\"Input matrix is empty or invalid\\") size = len(matrix) # Check if the matrix is square for row in matrix: if len(row) != size: raise ValueError(\\"Input matrix is not square\\") # Check for symmetry for i in range(size): for j in range(size): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a function that identifies and returns the top three words with the highest frequencies from a given text string. The function should return a dictionary containing the words as keys and their corresponding frequencies as values. In case of ties, words that appear earlier in the text should be prioritized. The function should have the following signature: ``` def find_top_three_words(text): ``` For example: Input: ``` text = \\"apple banana apple orange apple banana orange orange apple\\" ``` Output: ``` {\'apple\': 4, \'orange\': 3, \'banana\': 2} ``` Ensure to handle punctuation and case sensitivity appropriately, treating \\"Apple\\" and \\"apple\\" as the same word.","solution":"import re from collections import Counter def find_top_three_words(text): Returns the top three words with the highest frequencies from the given text. # Convert text to lowercase and use regex to extract words words = re.findall(r\'bw+b\', text.lower()) # Count the frequencies of each word word_counts = Counter(words) # Get the top three most common words with their counts top_three = word_counts.most_common(3) # Convert the list of tuples to a dictionary result = {word: count for word, count in top_three} return result"},{"question":"# Generate Permutations You are tasked with writing a function that generates all possible permutations of a given list of elements. A permutation of a set is a specific arrangement of its elements. For example, the permutations of the list `[1, 2, 3]` are `[1, 2, 3]`, `[1, 3, 2]`, `[2, 1, 3]`, `[2, 3, 1]`, `[3, 1, 2]`, and `[3, 2, 1]`. Your task is to write a function `generate_permutations(elements)` that takes the following input: - `elements`: a list of elements of any data type for which permutations should be generated. The function should return a list of lists, where each list is a unique permutation of the input elements. # Function Signature ```python def generate_permutations(elements: list) -> list[list]: pass ``` # Example ```python elements = [1, 2, 3] result = generate_permutations(elements) # Expected Output: # [ # [1, 2, 3], # [1, 3, 2], # [2, 1, 3], # [2, 3, 1], # [3, 1, 2], # [3, 2, 1] # ] ``` # Explanation - For the input `[1, 2, 3]`, the function should generate all 6 possible permutations of the list. - The order of the permutations in the output list does not matter, but all permutations must be included.","solution":"from itertools import permutations def generate_permutations(elements: list) -> list[list]: Generates all possible permutations of the given list of elements. :param elements: A list of elements for which permutations are to be generated. :return: A list of lists, where each list is a unique permutation of the input elements. return [list(p) for p in permutations(elements)]"},{"question":"In this task, you are required to create a class named `DataFrameProcessor` that processes and analyzes data represented as a list of dictionaries. You will implement methods to filter, group, and summarize the data. Here is the class definition along with the methods you need to implement: ```python class DataFrameProcessor: def __init__(self, data): Initializes the DataFrameProcessor with the given data. Parameters: data (list): A list of dictionaries, where each dictionary represents a row of data. self.data = data def filter_data(self, filter_func): Filters the data using the given filter function. Parameters: filter_func (function): A function that takes a dictionary and returns a boolean value. Returns: list: A list of dictionaries that meet the criteria specified by filter_func. return [row for row in self.data if filter_func(row)] def group_by(self, key): Groups the data by the specified key. Parameters: key (str): The dictionary key to group by. Returns: dict: A dictionary where each key is a unique value from the specified key, and each value is a list of dictionaries that have that key value. grouped_data = {} for row in self.data: group_key = row.get(key) if group_key not in grouped_data: grouped_data[group_key] = [] grouped_data[group_key].append(row) return grouped_data def summarize(self, group_by_key, summary_key, summary_func): Summarizes the data by applying the summary function to each group. Parameters: group_by_key (str): The key to group by. summary_key (str): The key of the values to be summarized. summary_func (function): A function that takes a list of values and returns a summarized value. Returns: dict: A dictionary where each key is a unique value from the group_by_key, and each value is the summarized result of the summary_func applied to the group\'s summary_key values. grouped_data = self.group_by(group_by_key) summarized_data = {} for group_key, rows in grouped_data.items(): summary_values = [row[summary_key] for row in rows if summary_key in row] summarized_data[group_key] = summary_func(summary_values) return summarized_data ``` # Requirements: 1. Implement the `DataFrameProcessor` class with the methods `__init__`, `filter_data`, `group_by`, and `summarize`. 2. The `__init__` method should take a list of dictionaries that represent the data to be processed. 3. The `filter_data` method should filter the data based on a user-provided function. 4. The `group_by` method should group the data by a specified key. 5. The `summarize` method should summarize the data for each group by applying a summary function to the specified key\'s values. # Example Usage: Assume you have the following data: ```python data = [ {\'id\': 1, \'category\': \'A\', \'value\': 10}, {\'id\': 2, \'category\': \'B\', \'value\': 20}, {\'id\': 3, \'category\': \'A\', \'value\': 30}, {\'id\': 4, \'category\': \'B\', \'value\': 25}, {\'id\': 5, \'category\': \'A\', \'value\': 50}, ] ``` Creating an instance of `DataFrameProcessor` and using its methods: ```python processor = DataFrameProcessor(data) filtered_data = processor.filter_data(lambda x: x[\'value\'] > 20) # Returns [{\'id\': 3, \'category\': \'A\', \'value\': 30}, {\'id\': 4, \'category\': \'B\', \'value\': 25}, {\'id\': 5, \'category\': \'A\', \'value\': 50}] grouped_data = processor.group_by(\'category\') # Returns {\'A\': [{\'id\': 1, \'category\': \'A\', \'value\': 10}, {\'id\': 3, \'category\': \'A\', \'value\': 30}, {\'id\': 5, \'category\': \'A\', \'value\': 50}], # \'B\': [{\'id\': 2, \'category\': \'B\', \'value\': 20}, {\'id\': 4, \'category\': \'B\', \'value\': 25}]} summarized_data = processor.summarize(\'category\', \'value\', sum) # Returns {\'A\': 90, \'B\': 45} ``` # Note: - The `filter_data` method should return a list of dictionaries that satisfy the filter criterion. - The `group_by` method should handle missing keys gracefully. - The `summarize` method should apply the provided summary function to the specified key\'s values for each group.","solution":"class DataFrameProcessor: def __init__(self, data): Initializes the DataFrameProcessor with the given data. Parameters: data (list): A list of dictionaries, where each dictionary represents a row of data. self.data = data def filter_data(self, filter_func): Filters the data using the given filter function. Parameters: filter_func (function): A function that takes a dictionary and returns a boolean value. Returns: list: A list of dictionaries that meet the criteria specified by filter_func. return [row for row in self.data if filter_func(row)] def group_by(self, key): Groups the data by the specified key. Parameters: key (str): The dictionary key to group by. Returns: dict: A dictionary where each key is a unique value from the specified key, and each value is a list of dictionaries that have that key value. grouped_data = {} for row in self.data: group_key = row.get(key) if group_key not in grouped_data: grouped_data[group_key] = [] grouped_data[group_key].append(row) return grouped_data def summarize(self, group_by_key, summary_key, summary_func): Summarizes the data by applying the summary function to each group. Parameters: group_by_key (str): The key to group by. summary_key (str): The key of the values to be summarized. summary_func (function): A function that takes a list of values and returns a summarized value. Returns: dict: A dictionary where each key is a unique value from the group_by_key, and each value is the summarized result of the summary_func applied to the group\'s summary_key values. grouped_data = self.group_by(group_by_key) summarized_data = {} for group_key, rows in grouped_data.items(): summary_values = [row[summary_key] for row in rows if summary_key in row] summarized_data[group_key] = summary_func(summary_values) return summarized_data"},{"question":"Write a Python function `process_numbers(input_list)` that takes a list of integers and returns a dictionary with the following key-value pairs: - \'original\': the original list of integers - \'squared\': a list of the integers squared - \'cubed\': a list of the integers cubed - \'sum\': the sum of the original list - \'mean\': the mean (average) of the original list The function should handle an edge case where the input list might be empty, in which case the \'sum\' should be 0 and the \'mean\' should be `None`. **Requirements:** 1. The function will receive a single argument `input_list`, which is a list of integers. 2. Use list comprehensions to generate the \'squared\' and \'cubed\' lists. 3. Calculate \'sum\' using the built-in `sum()` function. 4. Calculate \'mean\' by dividing the \'sum\' of the list by its length. If the list is empty, return `None`. # Example ```python input_list = [1, 2, 3, 4] result = process_numbers(input_list) # result should be: # { # \'original\': [1, 2, 3, 4], # \'squared\': [1, 4, 9, 16], # \'cubed\': [1, 8, 27, 64], # \'sum\': 10, # \'mean\': 2.5 # } ``` If the input list is empty: ```python input_list = [] result = process_numbers(input_list) # result should be: # { # \'original\': [], # \'squared\': [], # \'cubed\': [], # \'sum\': 0, # \'mean\': None # } ``` **Hints:** - Use list comprehensions for efficient list transformations. - Use conditional logic to handle the edge case for the empty list. - Ensure to maintain the order of keys in the output dictionary as specified.","solution":"def process_numbers(input_list): Processes a list of integers and returns a dictionary with the original list, squared values, cubed values, sum, and mean of the list. :param input_list: list of integers :return: dictionary with processed data if not input_list: return { \'original\': [], \'squared\': [], \'cubed\': [], \'sum\': 0, \'mean\': None } squared = [x ** 2 for x in input_list] cubed = [x ** 3 for x in input_list] total_sum = sum(input_list) mean_value = total_sum / len(input_list) if input_list else None return { \'original\': input_list, \'squared\': squared, \'cubed\': cubed, \'sum\': total_sum, \'mean\': mean_value }"},{"question":"# Functionality: You have a text file named `students.txt` where each student\'s record consists of a name followed by their grade. The format of `students.txt` would look like this: ``` Alice 88 Bob 94 Charlie 72 ``` We need to compute the average grade of all students and add a new record with the name \\"Average\\" followed by this computed average grade. The task also involves appending this new record at the end of the `students.txt` file. # Task: **Write a function named `append_average_grade`** which takes no arguments. The function should: 1. Open `students.txt` and read through it to compute the average grade of all students. 2. Open `students.txt` in append mode and add a new line with the name \\"Average\\" followed by the computed average grade. **Important:** The average grade should be an integer (use integer division for averaging). # Input Example: ```python append_average_grade() ``` # Assumptions: 1. The `students.txt` file exists and is formatted correctly. 2. Each student has a unique name. 3. No additional error handling beyond ensuring the file can be read. # Required Imports: None # Example `students.txt` After Running Function: ``` Alice 88 Bob 94 Charlie 72 Average 84 ```","solution":"def append_average_grade(): total_grade = 0 student_count = 0 with open(\'students.txt\', \'r\') as file: lines = file.readlines() for i in range(1, len(lines), 2): grade = int(lines[i].strip()) total_grade += grade student_count += 1 if student_count == 0: average_grade = 0 else: average_grade = total_grade // student_count with open(\'students.txt\', \'a\') as file: file.write(f\\"nAveragen{average_grade}n\\")"},{"question":"You need to develop a Python function `invert_case` which takes a string as input and returns a new string with the case of each alphabetic character inverted. Non-alphabetic characters should remain unchanged. **Function Signature:** ```python def invert_case(word): ``` **Parameters:** - `word`: A string containing any combination of alphabetic and non-alphabetic characters. **Returns:** - A string with each alphabetic character\'s case inverted. **Example Usage:** ```python word = \\"Hello, World!\\" # Expected output: \\"hELLO, wORLD!\\" print(invert_case(word)) word = \\"Python3.8\\" # Expected output: \\"pYTHON3.8\\" print(invert_case(word)) ``` **Additional Information:** - You can use Python string methods such as `str.isupper()`, `str.islower()`, `str.upper()`, and `str.lower()`.","solution":"def invert_case(word): This function takes a string input and returns a new string with the case of each alphabetic character inverted. Non-alphabetic characters remain unchanged. Parameters: word (str): A string containing any combination of alphabetic and non-alphabetic characters. Returns: str: A string with each alphabetic character\'s case inverted. return \'\'.join([char.lower() if char.isupper() else char.upper() for char in word])"},{"question":"You are tasked with developing a notification system that monitors a specified directory for changes. The system should notify the user when a new file is added, an existing file is deleted, or an existing file is modified. # Function Requirements Implement a function named `monitor_directory` that accepts one argument: - `directory` (str): The path to the directory that needs to be monitored. # Specific Requirements 1. Track the initial state of the directory, including the file names and their last modification times. 2. Continuously monitor the directory for any changes: - If a new file is added, print a message: `\\"[Timestamp] [filename] added.\\"` - If an existing file is deleted, print a message: `\\"[Timestamp] [filename] deleted.\\"` - If an existing file is modified, print a message: `\\"[Timestamp] [filename] modified.\\"` 3. Use the current time for the `[Timestamp]` in the format `YYYY-MM-DD HH:MM:SS`. 4. The monitoring should be stopped when the user interrupts the process (e.g., via a KeyboardInterrupt). # Libraries to Use - **`os`**: For checking the files in the directory. - **`time`**: For handling timestamps and sleep intervals. - **`datetime`**: For formatting the timestamps. # Example Suppose the file `example.txt` is added to the directory being monitored: ```python monitor_directory(\'/path/to/directory\') ``` This should output: ``` \\"[2023-11-01 15:45:30] example.txt added.\\" ``` # Additional Note Ensure that your function handles large directories efficiently and does not miss any file system events during monitoring.","solution":"import os import time from datetime import datetime def get_directory_state(directory): Returns a dictionary of file names and their modification times for the given directory. state = {} with os.scandir(directory) as it: for entry in it: if entry.is_file(): state[entry.name] = entry.stat().st_mtime return state def monitor_directory(directory): Monitors the given directory for any file changes and prints notifications accordingly. try: previous_state = get_directory_state(directory) while True: current_state = get_directory_state(directory) current_time = datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\') # Detect added files added_files = set(current_state) - set(previous_state) for filename in added_files: print(f\\"[{current_time}] {filename} added.\\") # Detect deleted files deleted_files = set(previous_state) - set(current_state) for filename in deleted_files: print(f\\"[{current_time}] {filename} deleted.\\") # Detect modified files modified_files = {filename for filename in previous_state if filename in current_state and previous_state[filename] != current_state[filename]} for filename in modified_files: print(f\\"[{current_time}] {filename} modified.\\") # Update the state previous_state = current_state # Sleep for a short duration to avoid high CPU usage time.sleep(1) except KeyboardInterrupt: print(\\"Directory monitoring stopped.\\")"},{"question":"Create a function that accepts a list of integers and an integer `k`. The function should return a list of tuples, each containing two integers from the input list that sum up to `k`. The tuples should be sorted in ascending order by the first element, and within each tuple, the smaller number should precede the larger one. If no pairs are found that sum up to `k`, return an empty list. You should write self-contained code starting with: ``` def find_pairs(nums, k): ```","solution":"def find_pairs(nums, k): Returns a list of tuples, each containing two integers from the input list that sum up to `k`. The tuples are sorted in ascending order by the first element, and within each tuple, the smaller number precedes the larger one. :param nums: List of integers :param k: Integer target sum :return: List of tuples nums.sort() pairs = [] seen = set() for num in nums: complement = k - num if complement in seen: pairs.append((min(num, complement), max(num, complement))) seen.add(num) pairs = list(set(pairs)) # Remove duplicates pairs.sort() # Sort pairs by the first element return pairs"},{"question":"You have been assigned the task of calculating the running average of a given list of numbers. The function should be named `running_average` and it should be implemented using the following Python features: list comprehensions and the `round` function. Write the function `running_average` that: - Takes a single argument: 1. `numbers`: a list of numerical values. - Returns a list where each element at index `i` is the average of all elements from index `0` to `i` in the original list. Each average should be rounded to 2 decimal places. For this problem, you are required to: 1. Use list comprehensions to generate the resulting list. 2. Ensure each average is rounded to 2 decimal places using the `round` function. # Example ```python numbers = [2, 4, 6, 8, 10] result = running_average(numbers) print(result) # Output should be [2.0, 3.0, 4.0, 5.0, 6.0] ``` Ensure your function handles all inputs properly, including an empty list, which should return an empty list.","solution":"def running_average(numbers): Returns a list of running averages from the provided list of numbers. Each average is rounded to 2 decimal places. Parameters: numbers (list): A list of numerical values. Returns: list: A list of running averages. if not numbers: return [] return [round(sum(numbers[:i+1]) / (i+1), 2) for i in range(len(numbers))]"},{"question":"You are tasked with developing a simplified online shopping cart system that allows users to add and remove items, as well as keep track of the total cost. Each item in the shopping cart has a name, price, and quantity. You will create a `ShoppingCart` class to manage the operations of the cart. The `ShoppingCart` class should provide the following functionalities: 1. `add_item(name, price, quantity)`: Adds a specified quantity of the item to the cart. If the item already exists, it should update the quantity. 2. `remove_item(name, quantity)`: Removes a specified quantity of the item from the cart. If the updated quantity is 0 or less, the item should be removed completely from the cart. 3. `get_total()`: Returns the total cost of all items in the cart. 4. `get_items()`: Returns a list of tuples, where each tuple consists of the item name, price, and quantity. Function Signature: ```python class ShoppingCart: def __init__(self): # Initialize your data structure pass def add_item(self, name, price, quantity): pass def remove_item(self, name, quantity): pass def get_total(self): pass def get_items(self): pass ``` **Example Usage:** ```python # Initialize shopping cart cart = ShoppingCart() # Add items to the cart cart.add_item(\\"apple\\", 0.5, 10) # 10 apples at 0.5 each cart.add_item(\\"banana\\", 0.2, 5) # 5 bananas at 0.2 each # Remove items from the cart cart.remove_item(\\"apple\\", 3) # Remove 3 apples, 7 remaining # Get total cost total_cost = cart.get_total() # Should return 3.9 # Get all items in the cart items = cart.get_items() # Should return [(\\"apple\\", 0.5, 7), (\\"banana\\", 0.2, 5)] ``` **Requirements:** - Use object-oriented programming principles. - Ensure the `get_total` method accurately computes the total value of the shopping cart contents. - Handle edge cases such as attempting to remove an item not in the cart or reducing the quantity below zero.","solution":"class ShoppingCart: def __init__(self): self.items = {} def add_item(self, name, price, quantity): if name in self.items: self.items[name][\\"quantity\\"] += quantity else: self.items[name] = {\\"price\\": price, \\"quantity\\": quantity} def remove_item(self, name, quantity): if name in self.items: if self.items[name][\\"quantity\\"] <= quantity: del self.items[name] else: self.items[name][\\"quantity\\"] -= quantity def get_total(self): total = sum(item[\\"price\\"] * item[\\"quantity\\"] for item in self.items.values()) return total def get_items(self): return [(name, item[\\"price\\"], item[\\"quantity\\"]) for name, item in self.items.items()]"},{"question":"In this problem, you will be working with string manipulation and bitwise operations in Python. The task is to process a binary representation of an integer to determine if it satisfies certain conditions. **Task**: Write a function named `check_binary_conditions()` that accomplishes the following: 1. Takes a non-negative integer `n` as input. 2. Converts the integer to its binary representation as a string (excluding the \'0b\' prefix). 3. Checks if the binary representation contains exactly two consecutive \'0\'s. 4. Checks if the binary representation contains an odd number of \'1\'s. **Function Specification**: - **Function Name**: `check_binary_conditions` - **Parameters**: `n` (a non-negative integer) - **Returns**: A boolean value `True` if both conditions are met, otherwise `False`. **Requirements**: 1. Convert the integer to its binary representation string using Python\'s built-in functionality. 2. Verify if there are exactly two consecutive \'0\'s in the binary representation string. 3. Count the number of \'1\'s in the binary representation and check if it is odd. 4. Use logical and bitwise operations efficiently to achieve the desired result. **Examples**: ```python check_binary_conditions(18) # Binary: \'10010\' -> Contains \'00\' and has odd number of \'1\'s (3) -> Returns False check_binary_conditions(23) # Binary: \'10111\' -> Does not contain \'00\' and has odd number of \'1\'s (4) -> Returns False check_binary_conditions(41) # Binary: \'101001\' -> Contains \'00\' and has odd number of \'1\'s (3) -> Returns True ``` This function helps to understand binary number representations and perform simple manipulations and condition checks.","solution":"def check_binary_conditions(n): Checks if the binary representation of n contains exactly two consecutive \'0\'s and an odd number of \'1\'s. binary_rep = bin(n)[2:] # convert integer to binary string without the \'0b\' prefix has_double_zero = \'00\' in binary_rep count_ones = binary_rep.count(\'1\') has_odd_ones = count_ones % 2 == 1 return has_double_zero and has_odd_ones"},{"question":"# Maze Solver with Breadth-First Search You are to implement a Python function `find_shortest_path(maze: List[List[int]]) -> int` that finds the shortest path in a maze from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). The maze is represented as a 2D grid with cells marked as 0 (open) and 1 (blocked). You may move up, down, left, or right, and you cannot pass through a cell that is marked as 1. The function should return the length of the shortest path from the start to the goal. If there is no such path, return -1. Function Signature ```python def find_shortest_path(maze: List[List[int]]) -> int: ``` Input - `maze` (List[List[int]]): A 2D list of integers representing the maze. The start and goal will always be 0. Output - An integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If no such path is possible, return -1. Instructions 1. **Breadth-First Search (BFS)**: Use BFS to explore the shortest path. Maintain a queue that holds tuples of the current position and the path length. 2. **Queue Initialization**: Initialize the BFS queue with the starting position ((0, 0)) and a path length of 1. 3. **Visiting Nodes**: For each cell, try to move to neighboring cells (up, down, left, right) that are within bounds and open (marked as 0). 4. **Goal Check**: If the bottom-right corner is reached, return the current path length. 5. **No Path**: If the queue is exhausted and the goal is not reached, return -1. Example ```python maze = [ [0, 0, 1, 0], [1, 0, 1, 0], [1, 0, 0, 0], [1, 1, 1, 0] ] print(find_shortest_path(maze)) ``` Example Output: ``` 7 ``` This output represents the length of the shortest path from (0, 0) to (3, 3) in the given maze. The path follows these coordinates: (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3).","solution":"from typing import List from collections import deque def find_shortest_path(maze: List[List[int]]) -> int: Find the shortest path in a maze using Breadth-First Search. Parameters: maze (List[List[int]]): A 2D list of integers representing the maze. Returns: int: Length of the shortest path from the top-left corner to the bottom-right corner. If no such path is possible, returns -1. if not maze or not maze[0]: return -1 n, m = len(maze), len(maze[0]) if maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 1)]) # (row, col, path_length) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 0 and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"You need to implement a function `compress_string(s)` that compresses a given string by replacing sequences of the same character with that character followed by the count of repetitions. If the compressed version of the string is not shorter than the original string, the function should return the original string. Below are the specifications for the function: - **Function Name:** `compress_string` - **Parameters:** - `s` (str): The input string to be compressed. - **Returns:** A compressed version of the input string if it is shorter, otherwise the original string. The compression should be case-sensitive, so \'a\' is different from \'A\'. Ensure that the function handles edge cases, such as empty strings or strings with no repeating characters. Example usage: ```python # Sample usage of the function compressed = compress_string(\\"aabcccccaaa\\") print(compressed) # Example output: \\"a2b1c5a3\\" compressed = compress_string(\\"abcdef\\") print(compressed) # Example output: \\"abcdef\\" ```","solution":"def compress_string(s): Compresses a given string by replacing sequences of the same character with that character followed by the count of repetitions. If the compressed version of the string is not shorter than the original string, the function returns the original string. Parameters: s (str): The input string to be compressed. Returns: str: The compressed version of the string if it is shorter, otherwise the original string. # Handle edge case of empty string if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Append the last character group compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are given a text file named `transactions.txt` which contains data of transactions performed in a store. Each line in the file represents a transaction with the format: `ItemID,ItemName,Quantity,Price`. You need to create a Python function named `calculate_total_revenue()` that reads the data from this text file and calculates the total revenue generated by the store. The function should perform the following steps: 1. **Read the file**: Open and read the contents of `transactions.txt`. 2. **Parse the data**: Split the file into individual transactions and extract the `Quantity` and `Price` for each transaction. 3. **Calculate revenue**: For each transaction, multiply the `Quantity` by the `Price` to get the total revenue for that transaction and sum these values to get the overall total revenue. 4. **Output the result**: Print the total revenue. Here is an example snippet of the text file (`transactions.txt`): ``` 1001,Apple,5,1.20 1002,Banana,3,0.50 1003,Cherry,10,0.15 ``` For the example above, the total revenue calculation would be: ``` (5 * 1.20) + (3 * 0.50) + (10 * 0.15) = 6.00 + 1.50 + 1.50 = 9.00 ``` **Function Signature:** ```python def calculate_total_revenue(): pass ``` **Dependencies:** - None Your task is to implement the `calculate_total_revenue()` function as described.","solution":"def calculate_total_revenue(file_path=\'transactions.txt\'): total_revenue = 0.0 try: with open(file_path, \'r\') as file: lines = file.readlines() for line in lines: parts = line.strip().split(\',\') if len(parts) != 4: continue # skip malformed lines try: quantity = float(parts[2]) price = float(parts[3]) total_revenue += quantity * price except ValueError: continue # skip lines with invalid numerical values except FileNotFoundError: print(f\\"Error: The file {file_path} does not exist.\\") return None print(f\\"Total Revenue: {total_revenue:.2f}\\") return total_revenue"},{"question":"Write a function named `find_nearest` that takes a list of integers and a target integer and returns the integer from the list that is closest to the target. If there are multiple integers in the list with the same absolute difference from the target, return the smallest one. **Function Specifications:** - Function Name: `find_nearest` - Arguments: - A list of integers `nums` - An integer `target` - Returns: The integer from the list that is closest to `target`. In case of a tie, the smallest integer should be returned. Example Usage: ```python nearest = find_nearest([4, 1, 7, 10, 6], 5) print(nearest) # Output: 4 nearest = find_nearest([4, 1, 7, 10, 6], 8) print(nearest) # Output: 7 nearest = find_nearest([5, 8, 14, 1, 15], 4) print(nearest) # Output: 5 ``` Note: - You may assume the input list `nums` is non-empty. - Think about efficient ways to solve this problem considering the constraints and edge cases.","solution":"def find_nearest(nums, target): Finds the integer in the list \'nums\' that is closest to \'target\'. In case of a tie, the smallest integer is returned. return min(nums, key=lambda x: (abs(x - target), x))"},{"question":"In this problem, you will implement a Decision Tree classifier using the `scikit-learn` library in Python. Decision Trees are a popular supervised learning method used for both classification and regression tasks. The objective of this problem is to write a function that uses a Decision Tree to classify data points based on the provided features and labels. Your task is to write a function `train_and_predict(X_train, y_train, X_test)` that takes the following inputs: 1. `X_train`: A 2D NumPy array representing the training dataset, where each row corresponds to a data point and each column corresponds to a feature. 2. `y_train`: A 1D NumPy array containing the labels for the training data points. 3. `X_test`: A 2D NumPy array representing the test dataset, where each row corresponds to a data point and each column corresponds to a feature. The function should use the `DecisionTreeClassifier` class from the `sklearn.tree` module to fit the model to the training data and then predict the labels for the test data. The function should return a 1D NumPy array containing the predicted labels of the test data points. To solve this problem, you are required to use the `DecisionTreeClassifier` class from the `scikit-learn` library. The function signature should be: ```python def train_and_predict(X_train, y_train, X_test): ``` Example: ```python import numpy as np X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) y_train = np.array([0, 0, 1, 1, 1]) X_test = np.array([[1, 1], [2, 2], [5, 5]]) predictions = train_and_predict(X_train, y_train, X_test) print(predictions) # Output: array([0, 0, 1]) ``` In this example, the function trains a Decision Tree on the training dataset `X_train` and `y_train`, and then predicts the labels for the test dataset `X_test`. The returned array contains the predicted labels for each test data point.","solution":"from sklearn.tree import DecisionTreeClassifier import numpy as np def train_and_predict(X_train, y_train, X_test): Trains a Decision Tree classifier on the given training data and predicts labels for the test data. Args: - X_train (np.array): 2D array of training data. - y_train (np.array): 1D array of labels for training data. - X_test (np.array): 2D array of test data. Returns: - np.array: 1D array of predicted labels for test data. # Initialize the classifier classifier = DecisionTreeClassifier() # Train the classifier classifier.fit(X_train, y_train) # Predict on the test data predictions = classifier.predict(X_test) return predictions"},{"question":"Implement a function `convolving_average(arr: List[int], k: int) -> List[float]` that calculates the moving average of a list of integers `arr` with a sliding window of size `k`. The function should: 1. Return an empty list if `k` is greater than the length of `arr` or if `k` is less than or equal to zero. 2. Compute the average of each subarray of length `k` and return the list of these averages. 3. Ensure the averages are computed as floating-point values. Make use of the built-in `sum()` function for computing the sum of the elements in the window. # Example: ```python from typing import List def convolving_average(arr: List[int], k: int) -> List[float]: if k > len(arr) or k <= 0: return [] return [sum(arr[i:i+k])/k for i in range(len(arr)-k+1)] # Example case arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] k = 3 # Compute moving average result = convolving_average(arr, k) print(result) ``` The function should produce output: ```txt [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0] ```","solution":"from typing import List def convolving_average(arr: List[int], k: int) -> List[float]: if k > len(arr) or k <= 0: return [] return [sum(arr[i:i+k])/k for i in range(len(arr) - k + 1)]"},{"question":"You are tasked with creating a system for managing an inventory of products in a store. For this problem, you need to develop a class called `InventoryManager` which will handle various operations related to inventory management. Specifically, you are required to: 1. Implement the `InventoryManager` class with the following methods: - `add_product(product_id: str, quantity: int, price: float) -> None`: Adds a new product to the inventory with the specified `product_id`, `quantity`, and `price`. If the product already exists, it should update the quantity and price. - `remove_product(product_id: str, quantity: int) -> bool`: Removes the specified quantity of the product from the inventory. If the quantity to be removed is greater than the available quantity, or the product doesn\'t exist, return `False`. Otherwise, return `True`. - `get_stock_value() -> float`: Returns the total value of the stock in the inventory, calculated as the sum of the product of the quantity and price of each product. - `get_product_info(product_id: str) -> tuple`: Returns a tuple containing the quantity and price of the specified product. If the product doesn\'t exist, return `None`. Ensure your implementation efficiently handles the operations and maintains the accuracy of the inventory data. **Class Signature:** ```python class InventoryManager: def __init__(self): pass def add_product(self, product_id: str, quantity: int, price: float) -> None: pass def remove_product(self, product_id: str, quantity: int) -> bool: pass def get_stock_value(self) -> float: pass def get_product_info(self, product_id: str) -> tuple: pass ``` # Example Usage: ```python inventory = InventoryManager() inventory.add_product(\'P001\', 10, 99.99) inventory.add_product(\'P002\', 5, 49.99) inventory.remove_product(\'P001\', 2) total_value = inventory.get_stock_value() # Should return the total value of stock product_info = inventory.get_product_info(\'P001\') # Should return (8, 99.99) ```","solution":"class InventoryManager: def __init__(self): self.products = {} def add_product(self, product_id: str, quantity: int, price: float) -> None: if product_id in self.products: current_quantity, _ = self.products[product_id] self.products[product_id] = (current_quantity + quantity, price) else: self.products[product_id] = (quantity, price) def remove_product(self, product_id: str, quantity: int) -> bool: if product_id not in self.products: return False current_quantity, price = self.products[product_id] if current_quantity < quantity: return False self.products[product_id] = (current_quantity - quantity, price) if self.products[product_id][0] == 0: del self.products[product_id] return True def get_stock_value(self) -> float: return sum(quantity * price for quantity, price in self.products.values()) def get_product_info(self, product_id: str) -> tuple: return self.products.get(product_id, None)"},{"question":"In this problem, your task is to implement the function `count_inversions`, which inputs an array of integers and returns the number of inversions in the array. An inversion is defined as a pair of indices `(i, j)` such that `i < j` and `arr[i] > arr[j]`. The function should efficiently count the number of inversions using a modified merge sort algorithm. Function Signature ```python def count_inversions(arr): Counts the number of inversions in the given array. Input: - arr: List of integers Returns: - count: Integer, the number of inversions in the input array ``` Inputs - `arr`: A list of integers, where `1 <= len(arr) <= 100000` Outputs - `count`: An integer representing the number of inversions in the input array Example ```python arr = [2, 4, 1, 3, 5] count = count_inversions(arr) print(count) # Expected output: 3, as the inversions are (2,1), (4,1), and (4,3) arr = [5, 3, 2, 1, 4] count = count_inversions(arr) print(count) # Expected output: 7, as the inversions are (5,3), (5,2), (5,1), (5,4), (3,2), (3,1), and (2,1) ``` Constraints - The function must run in (O(n log n)) time. - You may assume that the input consists of distinct integers for simplicity. Hints - Consider implementing a helper function that modifies the merge step of the merge sort algorithm to count the number of inversions. - During the merge step, if you take an element from the right half before the left half, it means all the remaining elements in the left half form inversions with this element.","solution":"def count_inversions(arr): Counts the number of inversions in the given array. Input: - arr: List of integers Returns: - count: Integer, the number of inversions in the input array def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr)-1)"},{"question":"In this problem, you need to implement a function that simulates the interaction between a store\'s inventory and customers\' purchase requests. Create the function `process_purchases(inventory, purchases)`, which updates the store\'s inventory based on the customers\' purchase requests and returns the updated inventory. # Objectives 1. **Inventory Management**: - The inventory is represented as a dictionary where keys are item names and values are the quantities available in stock. - Example: `{\'apple\': 10, \'banana\': 5, \'orange\': 7}` 2. **Processing Purchases**: - The purchases are represented as a list of dictionaries, each containing an item name and the quantity requested by a customer. - Example: `[{\'item\': \'apple\', \'quantity\': 3}, {\'item\': \'banana\', \'quantity\': 2}]` 3. **Inventory Updates**: - For each purchase request, check if the requested quantity is available in the inventory. - If enough stock is available, deduct the requested quantity from the inventory. - If the requested quantity exceeds the available stock, fulfill as much of the order as possible and set the inventory for that item to zero. 4. **Return Updated Inventory**: - Return the updated inventory after processing all purchase requests. # Function Signature ```python def process_purchases(inventory, purchases): Update inventory based on purchase requests. :param inventory: Dictionary with item names as keys and quantities as values :param purchases: List of dictionaries, each with \'item\' and \'quantity\' keys :return: Updated inventory dictionary ... ``` # Input - `inventory`: A dictionary where the keys are item names (strings) and values are integers representing the quantities in stock. - `purchases`: A list of dictionaries with each dictionary containing: - `\'item\'` (string): the name of the item requested. - `\'quantity\'` (int): the quantity of the item requested. # Output - An updated inventory dictionary after processing all purchase requests. # Example ```python # Initial inventory and purchase requests inventory = {\'apple\': 10, \'banana\': 5, \'orange\': 7} purchases = [{\'item\': \'apple\', \'quantity\': 3}, {\'item\': \'banana\', \'quantity\': 2}, {\'item\': \'orange\', \'quantity\': 10}] # Process purchases and update inventory updated_inventory = process_purchases(inventory, purchases) # Expected output # {\'apple\': 7, \'banana\': 3, \'orange\': 0} print(updated_inventory) # Output: {\'apple\': 7, \'banana\': 3, \'orange\': 0} ``` Implement the function `process_purchases` to correctly handle multiple purchase requests and update the inventory accordingly.","solution":"def process_purchases(inventory, purchases): Update inventory based on purchase requests. :param inventory: Dictionary with item names as keys and quantities as values :param purchases: List of dictionaries, each with \'item\' and \'quantity\' keys :return: Updated inventory dictionary for purchase in purchases: item = purchase[\'item\'] quantity_requested = purchase[\'quantity\'] if item in inventory and inventory[item] > 0: if inventory[item] >= quantity_requested: inventory[item] -= quantity_requested else: inventory[item] = 0 return inventory"},{"question":"You are tasked with writing a Python function named `compute_prime_factors` that computes the prime factors of a given positive integer. Prime factors of a number are the prime numbers that divide the number exactly without leaving a remainder. Each prime factor should appear in the output list as many times as it divides the number completely. Your task is to write this function without using any external libraries except for the standard Python library. The function should return the prime factors in a list, with the factors sorted in ascending order. Bonus points if the implementation is optimized to handle larger inputs efficiently. Function Signature: ```python def compute_prime_factors(n: int) -> List[int]: ``` Parameters: - `n` (int): The positive integer for which to compute the prime factors. It is guaranteed that `n` will be greater than 1. Returns: - A list of integers representing the prime factors of `n` in ascending order. Example: ```python assert compute_prime_factors(28) == [2, 2, 7] assert compute_prime_factors(45) == [3, 3, 5] assert compute_prime_factors(13) == [13] ``` Assumptions: - The input to the function will always be a positive integer greater than 1. The function should handle and return the prime factors efficiently, ensuring the correct number of occurrences for each prime factor in the result list.","solution":"from typing import List def compute_prime_factors(n: int) -> List[int]: Computes the prime factors of a given positive integer `n`. Parameters: n (int): The positive integer for which to compute the prime factors. Guaranteed to be greater than 1. Returns: List[int]: A list of integers representing the prime factors of `n` in ascending order. prime_factors = [] factor = 2 while factor * factor <= n: while (n % factor) == 0: prime_factors.append(factor) n //= factor factor += 1 if n > 1: prime_factors.append(n) return prime_factors"},{"question":"You are required to write a function called `shortest_path_in_maze` that finds the shortest path in a given maze from a start position to a goal position using the Breadth-First Search (BFS) algorithm. The maze is represented as a 2D list, where `0` represents open paths and `1` represents walls. The function should take as inputs the maze, the start position, and the goal position, and it will return the sequence of moves to reach the goal position from the start, as well as statistics about the search process. Specifically, the function should: 1. Initialize a queue (`frontier`) with the start position, where each position is a tuple containing the coordinates of the cell and the path taken to reach it. 2. Keep track of the maximum size of the `frontier` and the set of visited nodes to avoid redundant work. 3. Expand nodes by dequeuing the position at the front of the `frontier` and enqueueing its reachable adjacent cells (up, down, left, right) that are not walls and have not been visited. 4. When the goal position is found, return a tuple containing: - The sequence of moves (coordinates) reaching the goal position. - The total number of positions expanded. - The maximum size of the `frontier`. 5. If the goal position is not reachable, return `None`. **Function Signature:** ```python def shortest_path_in_maze(maze, start, goal): # Your implementation here pass ``` **Inputs:** - `maze`: A 2D list representing the maze, where `0` indicates an open path and `1` indicates a wall. - `start`: A tuple `(x, y)` representing the starting position coordinates. - `goal`: A tuple `(x, y)` representing the goal position coordinates. **Outputs:** - A tuple `(path, positions_expanded, max_frontier)`, - `path`: A list of tuples representing the coordinates of the path to reach the goal position, or `None` if the goal is not reachable. - `positions_expanded`: Total number of positions expanded during the search. - `max_frontier`: Maximum size of the `frontier` during the search. **Example Usage:** ```python maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] start = (0, 0) goal = (4, 4) print(shortest_path_in_maze(maze, start, goal)) ```","solution":"from collections import deque def shortest_path_in_maze(maze, start, goal): Finds the shortest path in a given maze from a start position to a goal position using BFS algorithm. The maze is represented as a 2D list, where 0 represents open paths and 1 represents walls. def get_neighbors(position): x, y = position neighbors = [] if x > 0 and maze[x-1][y] == 0: # up neighbors.append((x-1, y)) if x < len(maze) - 1 and maze[x+1][y] == 0: # down neighbors.append((x+1, y)) if y > 0 and maze[x][y-1] == 0: # left neighbors.append((x, y-1)) if y < len(maze[0]) - 1 and maze[x][y+1] == 0: # right neighbors.append((x, y+1)) return neighbors frontier = deque([(start, [start])]) visited = set() visited.add(start) max_frontier_size = 1 positions_expanded = 0 while frontier: position, path = frontier.popleft() positions_expanded += 1 if position == goal: return (path, positions_expanded, max_frontier_size) for neighbor in get_neighbors(position): if neighbor not in visited: visited.add(neighbor) frontier.append((neighbor, path + [neighbor])) max_frontier_size = max(max_frontier_size, len(frontier)) return (None, positions_expanded, max_frontier_size)"},{"question":"You are tasked with implementing a function `k_fold_cross_validation` that performs k-fold cross-validation for a given dataset and a machine learning model. The purpose of k-fold cross-validation is to assess the performance of a model by dividing the dataset into k equally sized folds and training the model k times, each time using a different fold as the validation set and the remaining folds as the training set. The average performance across all k runs is then calculated. Given the following inputs: - `model`: A machine learning model with `fit` and `predict` methods - `X`: A matrix of input features (each row represents a training example) - `y`: A vector of output labels - `k`: The number of folds Your function, `k_fold_cross_validation(model, X, y, k)`, will perform the k-fold cross-validation and return the average performance metric (e.g., accuracy). # Function Signature ```python def k_fold_cross_validation(model, X, y, k): # Your code here ``` # Example ```python from sklearn.linear_model import LogisticRegression import numpy as np X = np.array([[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [3, 4]]) y = np.array([0, 1, 0, 1, 0, 1]) model = LogisticRegression() average_accuracy = k_fold_cross_validation(model, X, y, k=3) print(average_accuracy) ``` The function should output the average accuracy of the model over the k runs. **Note**: You may use `numpy` for any necessary array manipulations. The function should handle edge cases, such as when the number of folds `k` is greater than the number of samples in the dataset, by returning an appropriate message or value.","solution":"import numpy as np from sklearn.metrics import accuracy_score from sklearn.model_selection import KFold def k_fold_cross_validation(model, X, y, k): Perform k-fold cross-validation and return the average accuracy. Parameters: model - A machine learning model that implements fit and predict methods. X - A matrix of input features. y - A vector of output labels. k - The number of folds for cross-validation. Returns: float - The average accuracy across all k folds. if k > len(X): raise ValueError(\\"Number of folds k cannot be greater than the number of samples.\\") kf = KFold(n_splits=k, shuffle=True, random_state=1) accuracies = [] for train_index, val_index in kf.split(X): X_train, X_val = X[train_index], X[val_index] y_train, y_val = y[train_index], y[val_index] model.fit(X_train, y_train) y_pred = model.predict(X_val) accuracies.append(accuracy_score(y_val, y_pred)) return np.mean(accuracies)"},{"question":"Create a Python function named `find_kth_largest_sum` that takes two parameters: `nums` and `k`. Here, `nums` is a list of integers and `k` is an integer. This function should return the k-th largest sum of contiguous subarrays within the `nums` list. A contiguous subarray is a subset of the array which maintains the order of elements and consists of consecutive indexes. For example, if the array is `[1, 2, 3]`, the contiguous subarrays are `[1]`, `[2]`, `[3]`, `[1, 2]`, `[2, 3]`, and `[1, 2, 3]`. To solve this problem, you need to: 1. Identify and sum all possible contiguous subarrays. 2. Use a min-heap to find the k-th largest sum among them efficiently. Implement the function to use these steps to achieve the correct result. ```python def find_kth_largest_sum(nums, k): # Your code here ```","solution":"import heapq def find_kth_largest_sum(nums, k): Returns the k-th largest sum of contiguous subarrays within the `nums` list. # List to store all possible sums of contiguous subarrays sum_list = [] # Calculate all possible contiguous subarray sums for i in range(len(nums)): sub_sum = 0 for j in range(i, len(nums)): sub_sum += nums[j] sum_list.append(sub_sum) # Use a min-heap to find the k-th largest sum if k > len(sum_list): return None min_heap = [] for sum_value in sum_list: if len(min_heap) < k: heapq.heappush(min_heap, sum_value) else: if sum_value > min_heap[0]: heapq.heapreplace(min_heap, sum_value) return min_heap[0]"},{"question":"Create a function to analyze a list of words and return the word with the highest frequency of a specific character. If there are multiple words with the same frequency, return the word that appears first in the list. Note that: The function should be case insensitive when counting the frequency of the character, but the original word should be returned in the original case. The function should output with: str: The word with the highest frequency of the specified character. You should write self-contained code starting with: ``` def highest_frequency_word(words, char): ```","solution":"def highest_frequency_word(words, char): Returns the word with the highest frequency of a specific character. If multiple words have the same frequency, return the first word that appears in the list. Parameters: words (list of str): List of words to analyze. char (str): The character to count the frequency of in each word. Returns: str: The word with the highest frequency of the specified character. max_count = 0 result = None char = char.lower() for word in words: count = word.lower().count(char) if count > max_count: max_count = count result = word elif count == max_count and result is None: result = word return result"},{"question":"You are required to write a Python function to evaluate a postfix expression and return its result. A postfix expression (also known as Reverse Polish Notation) is one in which each operator follows its operands. The evaluation is done using a stack. Implement the function `evaluate_postfix(expression)`, which takes a single string argument `expression` representing a postfix expression and returns an integer, which is the result of evaluating the postfix expression. The function signature should be: ```python def evaluate_postfix(expression: str) -> int: ``` # Requirements 1. The `expression` will be a string consisting of integers and operators separated by spaces. 2. Valid operators include: +, -, *, and /. Division should truncate toward zero. 3. The function should use a stack to evaluate the postfix expression. 4. Raise a `ValueError` if the expression is invalid. # Example ```python result = evaluate_postfix(\\"2 3 1 * + 9 -\\") print(result) ``` Expected Output: ```python -4 ``` # Notes - For the example above, the postfix expression can be converted to infix expression as: (2 + (3 * 1)) - 9 = -4. - Assume that the input expression is always space-separated and valid for the scope of this task. # Hints - Use a list as a stack to push and pop elements during the evaluation. - Iterate through each token in the expression, perform corresponding operations for operators, and push results back to the stack.","solution":"def evaluate_postfix(expression: str) -> int: Evaluates a postfix expression and returns the result. Parameters: expression (str): A string of a postfix expression with operands and operators separated by spaces. Returns: int: The result of evaluating the postfix expression. Raises: ValueError: If the postfix expression is invalid. stack = [] tokens = expression.split() for token in tokens: if token.isdigit() or (token[0] == \'-\' and token[1:].isdigit()): # Handle negative numbers stack.append(int(token)) elif token in \'+-*/\': if len(stack) < 2: raise ValueError(\\"Invalid postfix expression\\") b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': # Division must truncate toward zero result = int(a / b) stack.append(result) else: raise ValueError(\\"Invalid postfix expression\\") if len(stack) != 1: raise ValueError(\\"Invalid postfix expression\\") return stack.pop()"},{"question":"Write a function named `top_students_by_course` that takes a list of dictionaries and analyzes student performance across multiple courses. Each dictionary in the list represents a student and contains their name and a nested dictionary of their scores in different courses. The function should return a dictionary that maps each course name to the name of the student(s) with the highest score in that course. If multiple students have the highest score in a single course, include all their names in a list. The list of students is in the following format: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": {\\"Math\\": 95, \\"English\\": 85, \\"Science\\": 90}}, {\\"name\\": \\"Bob\\", \\"scores\\": {\\"Math\\": 90, \\"English\\": 92, \\"Science\\": 85}}, {\\"name\\": \\"Charlie\\", \\"scores\\": {\\"Math\\": 95, \\"English\\": 87, \\"History\\": 90}} ] ``` Your function should return a dictionary in the following format: ```python { \\"Math\\": [\\"Alice\\", \\"Charlie\\"], \\"English\\": [\\"Bob\\"], \\"Science\\": [\\"Alice\\"], \\"History\\": [\\"Charlie\\"] } ``` The signature of the function should be: ```python def top_students_by_course(students): # Your code goes here. pass ``` Make sure to handle any edge cases such as no scores for a course being available or empty lists.","solution":"def top_students_by_course(students): Analyzes student performance across multiple courses and returns a dictionary mapping each course name to the name of the student(s) with the highest score in that course. :param students: List of dictionaries, each containing student\'s name and scores in different courses :type students: list :return: Dictionary mapping course names to student(s) with highest score in that course :rtype: dict course_toppers = {} for student in students: name = student[\'name\'] scores = student[\'scores\'] for course, score in scores.items(): if course not in course_toppers: course_toppers[course] = (score, [name]) else: current_top_score, current_top_students = course_toppers[course] if score > current_top_score: course_toppers[course] = (score, [name]) elif score == current_top_score: current_top_students.append(name) # Formatting the output dictionary as required result = {course: names for course, (score, names) in course_toppers.items()} return result"},{"question":"Implement a function `balance_parentheses(s: str) -> str` that takes a string containing only parentheses characters `(` and `)`, and returns a balanced version of the string by removing the minimum number of parentheses. A string is considered balanced if every opening parenthesis `(` has a corresponding closing parenthesis `)` and vice versa. The function should remove parentheses from **left to right** to make the string balanced, keeping as many of the original parentheses as possible while maintaining their order. Function signature: ```python def balance_parentheses(s: str) -> str: ``` # Example: ```python # Example 1: s = \\"(()())(\\" print(balance_parentheses(s)) # Output: \\"(()())\\" # Example 2: s = \\"))((\\" print(balance_parentheses(s)) # Output: \\"\\" # Example 3: s = \\"((())(\\" print(balance_parentheses(s)) # Output: \\"(())\\" ``` Note: The function should only remove parentheses and should not add any new characters to the string. The relative order of the remaining parentheses must be maintained.","solution":"def balance_parentheses(s: str) -> str: Takes a string containing only parentheses characters \'()\' and returns a balanced version of the string by removing the minimum number of parentheses. open_count = 0 result = [] # First pass: remove unbalanced closing parentheses for char in s: if char == \'(\': open_count += 1 result.append(char) elif char == \')\': if open_count > 0: open_count -= 1 result.append(char) open_count = 0 balanced_result = [] # Second pass: remove surplus opening parentheses from the result for char in reversed(result): if char == \')\': open_count += 1 balanced_result.append(char) elif char == \'(\': if open_count > 0: open_count -= 1 balanced_result.append(char) return \'\'.join(reversed(balanced_result))"},{"question":"You are given a grid-based game board where a robot starts at the top-left corner of the grid (position `(0, 0)`) and needs to reach the bottom-right corner of the grid. The robot can only move right or down at any point in time. However, some cells of the grid may contain obstacles that the robot cannot pass through. Write a function `unique_paths_with_obstacles(grid: List[List[int]]) -> int` that determines the number of unique paths the robot can take to reach the bottom-right corner given the obstacles. # Function Signature ```python def unique_paths_with_obstacles(grid: List[List[int]]) -> int: ... ``` Input - `grid` (List[List[int]]): A 2D list of integers representing the game board where `1` represents an obstacle and `0` represents a free cell. The grid will have at least one cell. Output - Returns an integer that is the number of unique paths from the top-left corner to the bottom-right corner of the grid avoiding obstacles. Example ```python grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(grid)) # Output: 2 ``` Constraints - The dimensions of the grid can go up to `100 x 100`. - The top-left and bottom-right cells are always free (i.e., always `0`). - Movement is only allowed to the right or down. Explanation For the given grid: ``` [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` There are two unique paths from `(0, 0)` to `(2, 2)` that avoid the obstacle at `(1, 1)`: 1. Down -> Down -> Right -> Right 2. Right -> Right -> Down -> Down Thus, the output is `2`.","solution":"from typing import List def unique_paths_with_obstacles(grid: List[List[int]]) -> int: if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0]*n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"In this problem, you will implement a function to generate and display a Pascal\'s Triangle up to a given number of rows. Pascal\'s Triangle is a triangular arrangement of numbers where each number is the sum of the two numbers directly above it. The first row is [1], the second row is [1, 1], the third row is [1, 2, 1], and so on. You are required to write a Python function called `pascals_triangle` which accepts one parameter: - `num_rows`: an integer representing the number of rows to generate in the triangle. The function signature should be: ```python def pascals_triangle(num_rows): ``` The function should print each row of the triangle on a new line. Example: ```python # Example Usage: pascals_triangle(5) ``` Output: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` **Instructions:** 1. Initialize a list to store the rows of Pascal\'s Triangle. 2. Use nested loops to generate the rows. Each row should be constructed based on the values from the previous row. 3. Format the output such that each row is printed on a new line. **Constraints:** - `1 <= num_rows <= 20`. Hints: 1. Use a list of lists to construct the triangle. Each inner list represents a row. 2. The elements of row `i` (where `i` starts from 0) are computed as follows: - The first and last elements are always `1`. - The inner elements are the sum of the elements from the previous row. Here\'s a starting template for the function: ```python def pascals_triangle(num_rows): triangle = [] for i in range(num_rows): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i-1][j-1] + triangle[i-1][j] triangle.append(row) for row in triangle: print(\' \'.join(map(str, row))) # Example Usage - Not part of the function you need to implement if __name__ == \'__main__\': num_rows = 5 pascals_triangle(num_rows) ```","solution":"def pascals_triangle(num_rows): triangle = [] for i in range(num_rows): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i-1][j-1] + triangle[i-1][j] triangle.append(row) for row in triangle: print(\' \'.join(map(str, row)))"},{"question":"Write a function `is_prime(n)` that takes a single integer ( n ) as input and returns `True` if ( n ) is a prime number and `False` otherwise. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The implementation should be efficient for large values of ( n ) by employing the following strategies: 1. Eliminate even numbers greater than 2 immediately. 2. Only check for factors up to the square root of ( n ). 3. Use step increments that skip even numbers during the factor-checking process. Ensure that the function is properly optimized to handle large inputs within a reasonable time frame. The function signature should be: ```python def is_prime(n): # Your code here pass ```","solution":"import math def is_prime(n): Determine if n is a prime number. Parameters: n (int): The number to check for primality. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False sq_root = int(math.sqrt(n)) for i in range(3, sq_root + 1, 2): if n % i == 0: return False return True"},{"question":"You have been given a string `s` consisting of lowercase English letters and a list `words` that contains lowercase English words. Your task is to implement a function `matchingSubsequences(s: str, words: list) -> int` that returns the number of words in the list that are subsequences of the string `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, \\"ace\\" is a subsequence of \\"abcde\\" while \\"aec\\" is not. # Example: ```python s = \\"abcde\\" words = [\\"a\\", \\"bb\\", \\"acd\\", \\"ace\\"] print(matchingSubsequences(s, words)) # Output: 3 ``` # Explanation: - \\"a\\" is a subsequence of \\"abcde\\" - \\"bb\\" is not a subsequence of \\"abcde\\" - \\"acd\\" is a subsequence of \\"abcde\\" - \\"ace\\" is a subsequence of \\"abcde\\" Thus, there are 3 words in the list that are subsequences of \\"abcde\\". # Constraints: - `s` and words[i] consist only of lowercase English letters. - `1 <= s.length <= 10^5` - `1 <= words.length <= 5000` - `1 <= words[i].length <= 50` # Note: The function should be efficient enough to handle cases where the length of `s` and the list of words are large. Consider optimizing the approach to avoid exceeding time limits for longer strings and larger lists of words.","solution":"import collections def matchingSubsequences(s: str, words: list) -> int: Returns the count of words that are subsequences of the string `s`. def is_subsequence(word, s): it = iter(s) return all(char in it for char in word) count = 0 word_count = collections.Counter(words) for word in word_count: if is_subsequence(word, s): count += word_count[word] return count"},{"question":"In this problem, you are tasked with writing a function in Python that converts a given string representing a number from one base to another. The function `convert_base(number_str, from_base, to_base)` should take a string `number_str` representing the number in base `from_base` and convert it to its representation in base `to_base`. Function Signature ```python def convert_base(number_str, from_base, to_base): pass ``` Parameters - `number_str (string)`: The string representation of the number in the source base. - `from_base (int)`: The base in which the `number_str` is currently represented (2 <= `from_base` <= 36). - `to_base (int)`: The base to which the number should be converted (2 <= `to_base` <= 36). # Example ```python convert_base(\\"1010\\", 2, 10) ``` This should return `\\"10\\"`, as the binary number `1010` converts to the decimal number `10`. # Instructions 1. Validate the input to ensure that `from_base` and `to_base` are between 2 and 36, inclusive. 2. Convert `number_str` from base `from_base` to an integer. 3. Convert the integer to a string in base `to_base`. 4. Return the resulting base `to_base` string representation. # Constraints - `number_str` will always be a valid string in `from_base`. - Both `from_base` and `to_base` will always be integers between 2 and 36, inclusive. # Reminder - To convert from a base `from_base` to base 10, you can use the built-in `int` function with two parameters. - To convert from base 10 to another base, you may need to repeatedly divide by the new base and collect the remainders. Additionally, the `divmod` function can be helpful for this purpose. - The digits in the resulting string for bases higher than 10 should follow the convention where \'A\' represents 10, \'B\' represents 11, and so on up to \'Z\' which represents 35.","solution":"def convert_base(number_str, from_base, to_base): Converts a number represented by a string from one base to another base. Parameters: - number_str: string, the string representation of the number in the source base. - from_base: int, the base in which the number_str is currently represented. - to_base: int, the base to which the number should be converted. Returns: - string, the representation of the number in the destination base. if not (2 <= from_base <= 36) or not (2 <= to_base <= 36): raise ValueError(\\"from_base and to_base must be between 2 and 36, inclusive.\\") # Convert from the original base to base 10 decimal_number = int(number_str, from_base) # Convert from base 10 to the target base if to_base == 10: return str(decimal_number) digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = [] while decimal_number > 0: decimal_number, remainder = divmod(decimal_number, to_base) result.append(digits[remainder]) # The result list now contains the converted digits in reverse order return \'\'.join(result[::-1]) or \'0\'"},{"question":"You are given a `k`-ary tree, which is a generalization of a binary tree where each node can have at most `k` children. Your task is to implement a function that performs a level order traversal (breadth-first traversal) on this `k`-ary tree and returns the values of the nodes at each level as a list of lists. The function signature is `def level_order_k_tree(root, k):`, where: 1. `root` is the root node of the k-ary tree. 2. `k` is the maximum number of children each node can have. Each node in the tree has the following attributes: - `val`: The value of the node. - `children`: A list of child nodes. Your task is to implement the level order traversal that returns a list of lists, where each inner list contains the values of the nodes at that particular level. **Constraints:** - The number of nodes in the tree will be in the range of [0, 10^4]. - Node values are unique within the tree. - The value of `k` will be in the range [1, 100]. # Example: Consider the k-ary tree where k=3 and the tree is represented as: ``` 1 / | 2 3 4 /| 5 6 7 ``` The expected output for the given example is: ``` [[1], [2, 3, 4], [5, 6, 7]] ``` **Example Usage:** ```python class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] def level_order_k_tree(root, k): if not root: return [] result = [] queue = [root] while queue: level = [] next_queue = [] for node in queue: level.append(node.val) for child in node.children: if child: next_queue.append(child) result.append(level) queue = next_queue return result # Define the k-ary tree root = Node(1, [Node(2, [Node(5), Node(6)]), Node(3, [Node(7)]), Node(4)]) k = 3 # Perform level order traversal print(level_order_k_tree(root, k)) # Expected Output: [[1], [2, 3, 4], [5, 6, 7]] ```","solution":"class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] def level_order_k_tree(root, k): Performs a level order traversal on a k-ary tree and returns the values at each level as a list of lists. :param root: The root node of the k-ary tree. :param k: The maximum number of children each node can have. :return: List of lists, where each list contains the values of the nodes at a particular level. if not root: return [] result = [] queue = [root] while queue: level = [] next_queue = [] for node in queue: level.append(node.val) for child in node.children: if child: next_queue.append(child) result.append(level) queue = next_queue return result"},{"question":"You are required to write a function named `cumulative_sum` that accepts a numpy array of integers and returns a new numpy array where each element is the cumulative sum of the elements up to that index in the input array. To achieve this, utilize the `numpy` library, particularly the `numpy.cumsum` function, which returns the cumulative sum of the elements along a given axis. Here’s a brief description of the required function: 1. **`numpy.cumsum`**: This function returns the cumulative sum of the elements of an array along the specified axis. Your function should follow these steps: 1. Calculate the cumulative sum of the elements in the input array. 2. Ensure the function works efficiently for arrays of any size. **Function Signature:** ```python def cumulative_sum(arr: np.ndarray) -> np.ndarray: ``` **Input:** - `arr` (np.ndarray): A one-dimensional numpy array of integers. **Output:** - Returns a numpy array containing the cumulative sum of the input array’s values. **Example:** ```python import numpy as np arr = np.array([1, 2, 3, 4]) result = cumulative_sum(arr) print(result) # Output should be: array([ 1, 3, 6, 10]) ``` **Note:** - Do not use Python loops to iterate over the array elements. - Make sure to import the `numpy` library as `np` to adhere to the common convention.","solution":"import numpy as np def cumulative_sum(arr: np.ndarray) -> np.ndarray: Returns the cumulative sum of the input numpy array. Parameters: arr (np.ndarray): A one-dimensional numpy array of integers. Returns: np.ndarray: A numpy array containing the cumulative sum of the input array\'s values. return np.cumsum(arr)"},{"question":"In this problem, you need to implement a function `rotate_matrix` that takes a square matrix (2D list) as input and returns the matrix rotated 90 degrees clockwise. To achieve this, the function should: 1. Transpose the matrix by flipping it over its diagonal. 2. Reverse each row to get the final rotated matrix. Make sure your function handles the case where the input matrix is empty. **Function Signature:** ```python def rotate_matrix(matrix: list) -> list: pass ``` **Example:** ```python rotate_matrix([[1,2,3], [4,5,6], [7,8,9]]) ``` This should return: ```python [[7,4,1], [8,5,2], [9,6,3]] ```","solution":"def rotate_matrix(matrix: list) -> list: if not matrix: return [] n = len(matrix) # Transpose the matrix transposed_matrix = [[matrix[j][i] for j in range(n)] for i in range(n)] # Reverse each row for row in transposed_matrix: row.reverse() return transposed_matrix"},{"question":"You are tasked with creating a function that generates a specific pattern of numbers based on a given integer input. This problem is designed to help you enhance your understanding of loops and string manipulation in Python. You need to implement a function named `generate_pattern` which takes an integer `n` as input and produces a string that depicts a specific numerical pattern. The function should: 1. Generate numbers from 1 to `n`. 2. For each number `i` (starting from 1 to `n`): - Create a line where the number `i` is repeated `i` times. 3. Concatenate all lines into a single string where each line is separated by a newline character (`n`). For instance, if the input is `3`, the output string should be: ``` 1 22 333 ``` Here is the Python function signature to guide you: ```python def generate_pattern(n): # Your code here ```","solution":"def generate_pattern(n): Generates a pattern of numbers based on the given integer n. Each line contains the number \'i\' repeated \'i\' times, starting from 1 up to n. Parameters: n (int): The input integer which determines the number of lines in the pattern. Returns: str: The generated pattern as a single string with newline characters separating the lines. pattern = [] for i in range(1, n + 1): pattern.append(str(i) * i) return \'n\'.join(pattern)"},{"question":"You are required to write a Python function named `text_lines_to_dict(input_file, output_file=None)` which takes a text file with specific formatted input lines and converts it into a dictionary-like JSON output. The function should use appropriate file handling techniques and JSON handling libraries. Function Signature: ```python def text_lines_to_dict(input_file, output_file=None): ``` Parameters: - `input_file` (str): The name of the input text file. - `output_file` (str, optional): The name of the output file. If specified and it already exists, the file should be replaced. Requirements: 1. **Reading & Writing**: The function should read from the `input_file` and produce output into `output_file` if specified, otherwise return the output as a string. 2. **Processing Rules**: - Each line in the input file corresponds to a key-value pair in the dictionary. - Lines are formatted as `key: value`. - If a line starts with `#`, it should be ignored (treated as a comment). 3. **File Handling**: - If `output_file` is specified and exists, delete it before processing. Constraints: - Use appropriate exception handling for file operations. - Utilize Python\'s `json` module to format the final output. Example: Given an `input_file` with the following content: ``` name: John Doe age: 30 # This is a comment occupation: Software Developer ``` Calling `text_lines_to_dict(input_file, \'output.json\')` will create `output.json` with: ``` { \\"name\\": \\"John Doe\\", \\"age\\": \\"30\\", \\"occupation\\": \\"Software Developer\\" } ``` Calling `text_lines_to_dict(input_file)` will return the string: ``` { \\"name\\": \\"John Doe\\", \\"age\\": \\"30\\", \\"occupation\\": \\"Software Developer\\" } ```","solution":"import json import os def text_lines_to_dict(input_file, output_file=None): Converts lines from a specified text file into a dictionary-like JSON output. Parameters: - input_file (str): The name of the input text file. - output_file (str, optional): The name of the output file. If specified and it already exists, the file will be replaced. Returns: - str: The JSON-formatted string if output_file is not specified. result = {} try: with open(input_file, \'r\') as file: for line in file: line = line.strip() if not line or line.startswith(\'#\'): continue key, value = line.split(\': \', 1) result[key] = value json_data = json.dumps(result, indent=4) if output_file: if os.path.exists(output_file): os.remove(output_file) with open(output_file, \'w\') as file: file.write(json_data) else: return json_data except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are tasked with writing a function called `find_single_number` to find the element that appears exactly once in a given list where every other element appears exactly twice. This is a classic problem often known as \\"finding the single number.\\" To solve this problem efficiently, consider using bitwise operations. Specifically, the XOR operation (`^`) can be leveraged since it has the unique property that `a ^ a = 0` and `a ^ 0 = a`. **Function Signature:** ```python def find_single_number(nums: list) -> int: ``` **Parameters:** - `nums` (list): A list of integers where each element appears exactly twice except for one, which appears exactly once. **Returns:** - `int`: The integer that appears only once in the input list. **Requirements:** - The solution should run in linear time, O(n). - The solution should use constant space, O(1). **Constraints:** - The input list `nums` will contain at least one element. - The input list `nums` will have an odd number of elements. **Examples:** 1. `find_single_number([2, 2, 1])` should return `1`. 2. `find_single_number([4, 1, 2, 1, 2])` should return `4`. 3. `find_single_number([1])` should return `1`.","solution":"def find_single_number(nums): Find the element that appears exactly once in a list where every other element appears exactly twice. Args: nums (list): A list of integers Returns: int: The integer that appears only once single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"You need to write a Python function `calculate_routing_cost` that takes a list of city connections and their associated travel costs, and a list of query routes, to determine the total travel cost for each query route. The function should utilize Dijkstra\'s algorithm to find the shortest path cost between cities in an undirected weighted graph. The input graph will be represented using an adjacency list. The function `calculate_routing_cost` should have the following signature: ```python def calculate_routing_cost(city_connections, query_routes): Calculates the total travel cost for each route in the query routes based on the provided city connections. :param city_connections: A list of tuples where each tuple contains two cities and the travel cost between them. Each tuple is represented as (city1, city2, cost). :param query_routes: A list of tuples where each tuple contains the start city and the end city for the route query. Each tuple is represented as (start_city, end_city). :return: A list of integers representing the total travel cost for each route in the query routes. ``` # Parameters: - **city_connections**: A list of city connections, where each connection is represented by a tuple (city1, city2, cost). The cities are connected bidirectionally with the given cost. - **query_routes**: A list of query routes, where each route is represented by a tuple (start_city, end_city). Each route query asks for the minimum travel cost between the start city and end city. # Requirements: 1. Implement an adjacency list to represent the graph using the given city connections. 2. Use Dijkstra\'s algorithm to find the shortest path cost between cities. 3. For each query route, determine the minimum travel cost between the start city and the end city using the constructed graph. 4. Return a list of total travel costs for each query route. # Example: ```python def calculate_routing_cost(city_connections, query_routes): import heapq # Create adjacency list from city connections graph = {} for city1, city2, cost in city_connections: if city1 not in graph: graph[city1] = [] if city2 not in graph: graph[city2] = [] graph[city1].append((cost, city2)) graph[city2].append((cost, city1)) # Function to perform Dijkstra\'s algorithm def dijkstra(start, end): min_heap = [(0, start)] visited = set() min_cost = {start: 0} while min_heap: current_cost, current_city = heapq.heappop(min_heap) if current_city in visited: continue visited.add(current_city) if current_city == end: return current_cost for edge_cost, neighbor in graph.get(current_city, []): if neighbor in visited: continue new_cost = current_cost + edge_cost if new_cost < min_cost.get(neighbor, float(\'inf\')): min_cost[neighbor] = new_cost heapq.heappush(min_heap, (new_cost, neighbor)) return float(\'inf\') result = [] for start_city, end_city in query_routes: result.append(dijkstra(start_city, end_city)) return result # Example usage: city_connections = [ (\\"A\\", \\"B\\", 1), (\\"B\\", \\"C\\", 2), (\\"A\\", \\"C\\", 2), (\\"C\\", \\"D\\", 1) ] query_routes = [ (\\"A\\", \\"D\\"), (\\"B\\", \\"D\\"), (\\"A\\", \\"C\\") ] routing_costs = calculate_routing_cost(city_connections, query_routes) print(routing_costs) # Output: [3, 3, 2] ```","solution":"def calculate_routing_cost(city_connections, query_routes): import heapq # Create adjacency list from city connections graph = {} for city1, city2, cost in city_connections: if city1 not in graph: graph[city1] = [] if city2 not in graph: graph[city2] = [] graph[city1].append((cost, city2)) graph[city2].append((cost, city1)) # Function to perform Dijkstra\'s algorithm def dijkstra(start, end): min_heap = [(0, start)] visited = set() min_cost = {start: 0} while min_heap: current_cost, current_city = heapq.heappop(min_heap) if current_city in visited: continue visited.add(current_city) if current_city == end: return current_cost for edge_cost, neighbor in graph.get(current_city, []): if neighbor in visited: continue new_cost = current_cost + edge_cost if new_cost < min_cost.get(neighbor, float(\'inf\')): min_cost[neighbor] = new_cost heapq.heappush(min_heap, (new_cost, neighbor)) return float(\'inf\') result = [] for start_city, end_city in query_routes: result.append(dijkstra(start_city, end_city)) return result"},{"question":"** You are required to write a function `quake_dist_category` that takes in a Pandas DataFrame containing two columns, `MAGNITUDE` and `DISTANCE_FROM_EPICENTER` (measured in kilometers), and returns a modified DataFrame with an additional column `DIST_CATEGORY` that categorizes the distance into three categories: - `Local`: Distance is less than 50 km. - `Regional`: Distance is between 50 km and 300 km (inclusive). - `Distant`: Distance is greater than 300 km. The magnitude and distance values will always be present, and you need to ensure they are handled appropriately to create the new categorized column using efficient pandas methods. **Constraints:** - The DataFrame will always contain the columns `MAGNITUDE` and `DISTANCE_FROM_EPICENTER` with non-negative values. - The function should handle a DataFrame of any size provided within the constraints. **Function Signature:** ```python def quake_dist_category(df: pd.DataFrame) -> pd.DataFrame: pass ``` **Examples:** ```python >>> df = pd.DataFrame({\'MAGNITUDE\': [4.2, 5.7, 6.1, 3.8], \'DISTANCE_FROM_EPICENTER\': [22, 150, 400, 70]}) >>> quake_dist_category(df) MAGNITUDE DISTANCE_FROM_EPICENTER DIST_CATEGORY 0 4.2 22 Local 1 5.7 150 Regional 2 6.1 400 Distant 3 3.8 70 Regional >>> df = pd.read_csv(\'quake_data.csv\') >>> quake_dist_category(df) ``` **Note:** - Ensure that the function correctly handles the required categorizations and is efficient in processing. - The function should return the DataFrame with the added categorization column without modifying the original DataFrame structure otherwise.","solution":"import pandas as pd def quake_dist_category(df: pd.DataFrame) -> pd.DataFrame: Takes in a Pandas DataFrame containing columns \'MAGNITUDE\' and \'DISTANCE_FROM_EPICENTER\', and returns a modified DataFrame with an additional column \'DIST_CATEGORY\' that categorizes the distance into \'Local\', \'Regional\', and \'Distant\'. def categorize_distance(distance): if distance < 50: return \'Local\' elif 50 <= distance <= 300: return \'Regional\' else: return \'Distant\' df[\'DIST_CATEGORY\'] = df[\'DISTANCE_FROM_EPICENTER\'].apply(categorize_distance) return df"},{"question":"You are given the task to generate a sequence of prime numbers up to a given number `n` using the Sieve of Eratosthenes algorithm. The Sieve of Eratosthenes is an efficient algorithm to find all primes smaller than `n`. You need to create a function called `generate_primes` that accepts a single parameter `n` and returns a list containing all prime numbers less than `n`. The main idea of the Sieve of Eratosthenes is to iteratively mark the multiples of each prime starting from 2, then the multiples of the next number, and so on. **Function Signature:** ```python def generate_primes(n): ... # your code here ``` **Constraints:** - Assume `n` is a positive integer greater than 1. - The function should return an empty list if there are no prime numbers less than `n`. **Example:** ```python generate_primes(10) ``` **Expected Output:** ```python [2, 3, 5, 7] ``` **Explanation:** For the given input `n = 10`, the prime numbers less than 10 are 2, 3, 5, and 7. The implemented function should return these prime numbers as a list.","solution":"def generate_primes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(2, n) if sieve[num]]"},{"question":"You are given the task of developing a function that will generate passwords meeting specific strength criteria. The function should create passwords which are suitable for protecting sensitive information. Function Requirements: 1. **Name of the function**: `generate_secure_password` 2. **Parameters**: - `length` (type: `int`): The desired length of the password. 3. **Behavior**: - Ensure that the password contains at least one lowercase letter, one uppercase letter, one digit, and one special character from the set `!@#%^&*()-_=+`. - Randomly select characters to meet the specified length while adhering to the character type constraints. - Handle the edge case where the provided length is less than 4 by returning an empty string. - Return the generated password as a string. 4. **Libraries**: - Use the `random` and `string` libraries to facilitate random selection of characters. Below is the provided code skeleton. Your task is to implement the `generate_secure_password` function with the described behavior: ```python import random import string def generate_secure_password(length): Generates a secure password of given length if length < 4: return \\"\\" characters = { \'lower\': string.ascii_lowercase, \'upper\': string.ascii_uppercase, \'digit\': string.digits, \'special\': \'!@#%^&*()-_=+\', } password = [ random.choice(characters[\'lower\']), random.choice(characters[\'upper\']), random.choice(characters[\'digit\']), random.choice(characters[\'special\']), ] if length > 4: all_characters = \'\'.join(characters.values()) password += random.choices(all_characters, k=length-4) random.shuffle(password) return \'\'.join(password) # Example usage: print(generate_secure_password(12)) ```","solution":"import random import string def generate_secure_password(length): Generates a secure password of given length if length < 4: return \\"\\" characters = { \'lower\': string.ascii_lowercase, \'upper\': string.ascii_uppercase, \'digit\': string.digits, \'special\': \'!@#%^&*()-_=+\', } # Ensuring the password contains at least one of each required type of character password = [ random.choice(characters[\'lower\']), random.choice(characters[\'upper\']), random.choice(characters[\'digit\']), random.choice(characters[\'special\']), ] # If additional characters are needed if length > 4: all_characters = \'\'.join(characters.values()) password += random.choices(all_characters, k=length - 4) # Shuffle to ensure random distribution random.shuffle(password) return \'\'.join(password)"},{"question":"You are given a string representing a series of parentheses and braces, and your task is to determine if the given sequence is balanced. A sequence is balanced if the parentheses and braces open and close in the correct order. Specifically, you need to implement the function `is_balanced` which performs the following steps: 1. Traverse the string character by character. 2. Use a stack data structure to keep track of the opening parentheses and braces. 3. For each opening parenthesis or brace, push it onto the stack. 4. For each closing parenthesis or brace, check if it matches the top item of the stack. If it does, pop the stack; if it doesn\'t, the sequence is unbalanced. 5. At the end of the traversal, if the stack is empty, the sequence is balanced; otherwise, it is unbalanced. Your function should look like this: ```python def is_balanced(sequence): Check if the given sequence of parentheses and braces is balanced. Parameters: sequence (str): The sequence of parentheses and braces. Returns: bool: True if the sequence is balanced, False otherwise. pass ``` You are required to handle the following pairs of parentheses and braces: - \'(\': \')\' - \'{\': \'}\' For example: - `is_balanced(\\"(){}\\")` should return `True` - `is_balanced(\\"({})\\")` should return `True` - `is_balanced(\\"({)}\\")` should return `False` - `is_balanced(\\"((({{{)))\\")` should return `False`","solution":"def is_balanced(sequence): Check if the given sequence of parentheses and braces is balanced. Parameters: sequence (str): The sequence of parentheses and braces. Returns: bool: True if the sequence is balanced, False otherwise. stack = [] pair = {\')\': \'(\', \'}\': \'{\'} for char in sequence: if char in pair.values(): stack.append(char) elif char in pair.keys(): if stack == [] or pair[char] != stack.pop(): return False return stack == []"},{"question":"You are given an array of integers representing the heights of buildings along a street. The goal is to determine the total \\"skyline silhouette\\" of the buildings when viewed from a distance. The skyline silhouette is defined by the highest points of the buildings at each horizontal unit. Write a function called `calculate_skyline` that takes in a list of non-negative integers representing building heights and returns the total number of units that make up the skyline silhouette. Function Signature: ```python def calculate_skyline(building_heights: List[int]) -> int: ``` # Constraints: - The length of the building_heights array will be between 1 and 10^4. - Each element in the building_heights array will be a non-negative integer no greater than 10^4. - You must implement an efficient solution with a time complexity of O(n). # Example: ```python # Example 1 building_heights = [3, 0, 2, 4, 0, 3, 2, 1] # The skyline silhouette looks like this: __^__^^^_^^^^_^^^_^^ # Total units of skyline: 19 assert calculate_skyline(building_heights) == 19 # Example 2 building_heights = [1, 2, 3, 2, 1] # The skyline silhouette looks like this: ^^^ # Total units of skyline: 5 assert calculate_skyline(building_heights) == 5 ```","solution":"def calculate_skyline(building_heights): This function calculates the total skyline silhouette of buildings. skyline_units = 0 for height in building_heights: if height > skyline_units: skyline_units = height return skyline_units"},{"question":"You are required to implement a function that simulates the changes in the value of a portfolio of stocks over a given number of days. The portfolio is represented as a list of stock quantities, and the daily changes in stock prices are given as a 2D array. This exercise will help you practice using numpy for array manipulations and understand matrix arithmetic in financial computations. # Function Signature ```python def simulate_portfolio_changes(portfolio, price_changes): Simulates the portfolio value change over a series of days. Parameters: portfolio: array-like shape: (N_stocks,) The initial number of each stock in the portfolio. price_changes: array-like shape: (N_days, N_stocks) Daily price changes for each stock in the portfolio. Returns: value_changes: array-like shape: (N_days,) The change in portfolio value for each day. ``` # Explanation The `portfolio` parameter is a 1D array where each element represents the quantity of a specific stock in the portfolio. The `price_changes` parameter is a 2D array where each row corresponds to a specific day, and each column corresponds to the price change for a specific stock on that day. The function should return a 1D array `value_changes`, where each element represents the net change in the portfolio\'s value for each day, calculated as the sum of the product of stock quantities and their daily price changes. # Example Here is an example of how the function should be used: ```python portfolio = np.array([10, 5, 2]) # Shape: (3,) price_changes = np.array([ [1.0, -0.5, 0.3], [0.5, 0.2, -0.1], [-0.2, 0.1, 0.4] ]) # Shape: (3, 3) value_changes = simulate_portfolio_changes(portfolio, price_changes) print(\\"Value Changes:\\", value_changes) ``` In this example, the `portfolio` array indicates that the portfolio holds 10 units of the first stock, 5 units of the second stock, and 2 units of the third stock. The `price_changes` array provides the daily price changes for each stock over 3 days. The output `value_changes` array contains the net change in the portfolio\'s value for each of those 3 days.","solution":"import numpy as np def simulate_portfolio_changes(portfolio, price_changes): Simulates the portfolio value change over a series of days. Parameters: portfolio: array-like shape: (N_stocks,) The initial number of each stock in the portfolio. price_changes: array-like shape: (N_days, N_stocks) Daily price changes for each stock in the portfolio. Returns: value_changes: array-like shape: (N_days,) The change in portfolio value for each day. portfolio = np.array(portfolio) price_changes = np.array(price_changes) # Each row in price_changes corresponds to a day and each column corresponds to a stock # We calculate the value changes by matrix multiplication of price_changes with portfolio value_changes = np.dot(price_changes, portfolio) return value_changes"},{"question":"In the realm of text processing, the concept of n-grams is a contiguous sequence of n items from a given sample of text or speech. An n-gram of size 1 is a unigram, size 2 is a bigram, and size 3 is a trigram. For this task, you are required to generate all possible bigrams from a given string and return the frequency of each bigram. You need to write a Python function `bigram_frequencies(text: str) -> dict` that calculates the frequencies of all bigrams in the given input string and returns them as a dictionary where keys are the bigrams and values are their respective counts. Bigrams can be formed by considering adjacent characters including spaces. Function Signature: ```python def bigram_frequencies(text: str) -> dict: ``` Input: - `text`: A string for which the bigram frequencies need to be calculated. Output: - Returns a dictionary where keys are bigrams (as strings) and values are the frequency of those bigrams in the input text. Example: ```python text = \\"hello world\\" print(bigram_frequencies(text)) # Expected output: # { # \\"he\\": 1, # \\"el\\": 1, # \\"ll\\": 1, # \\"lo\\": 1, # \\"o \\": 1, # \\" w\\": 1, # \\"wo\\": 1, # \\"or\\": 1, # \\"rl\\": 1, # \\"ld\\": 1 # } ``` Constraints: - The input string will have a length of at least 1 character and at most 1000 characters. - The string will contain ASCII characters only (including spaces, but no tabs or newlines). To solve this task, iterate through the string to create bigrams and use a dictionary to keep track of the frequencies of each bigram.","solution":"def bigram_frequencies(text: str) -> dict: Returns the frequency of each bigram in the given text. bigram_freq = {} for i in range(len(text) - 1): bigram = text[i:i+2] if bigram in bigram_freq: bigram_freq[bigram] += 1 else: bigram_freq[bigram] = 1 return bigram_freq"},{"question":"You need to implement a function `find_most_frequent` that takes a string and returns the character(s) that appear the most frequently. If multiple characters have the highest frequency, the function should return them in a list sorted in alphabetic order. The function signature is: ```python def find_most_frequent(input_string: str) -> list: pass ``` You should count the frequency of each character in the input string, determine which character(s) appear the most frequently, and return them as a list. Example: ```python print(find_most_frequent(\\"aabbccddeeffg\\")) ``` Expected Output: ``` [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\'] ``` In this example, the characters \'a\', \'b\', \'c\', \'d\', \'e\', and \'f\' each appear 2 times, which is the highest frequency. The function should return them in a list, sorted alphabetically.","solution":"def find_most_frequent(input_string: str) -> list: Returns the character(s) that appear the most frequently in the input string. If multiple characters have the highest frequency, returns them in a list sorted in alphabetic order. from collections import Counter # Count the frequency of each character in the input string frequency = Counter(input_string) # Find the highest frequency max_frequency = max(frequency.values(), default=0) # Get all characters that have the highest frequency most_frequent_chars = [char for char, count in frequency.items() if count == max_frequency] # Return the characters sorted alphabetically return sorted(most_frequent_chars)"},{"question":"Given a list of integers, create a function to find the subarray that has the maximum sum. The function should return two values: 1. int: The maximum sum of the subarray. 2. list: The subarray itself. You should write self-contained code starting with: ``` def max_subarray_sum(arr): ```","solution":"def max_subarray_sum(arr): Finds the subarray with the maximum sum in a list of integers. Args: arr (list of int): The list of integers. Returns: tuple: A tuple containing the maximum sum and the subarray itself. if not arr: return 0, [] max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, arr[start:end + 1]"},{"question":"You are tasked with creating a program that simulates a simple banking system, which allows for managing accounts and performing transactions such as deposits, withdrawals, and balance inquiries. Your task is to write a class named `BankAccount` that provides these functionalities. # Class Specification ```python class BankAccount: def __init__(self, account_number, account_holder): Initializes a new bank account with the provided account number and account holder\'s name. Parameters: account_number (str): The account number of the bank account. account_holder (str): The name of the account holder. pass def deposit(self, amount): Deposits the given amount into the account. Parameters: amount (float): The amount to be deposited. Returns: None pass def withdraw(self, amount): Withdraws the given amount from the account if sufficient balance is available. Parameters: amount (float): The amount to be withdrawn. Returns: bool: True if the withdrawal was successful, False otherwise. pass def get_balance(self): Returns the current balance of the account. Returns: float: The current balance of the account. pass def get_account_details(self): Returns the account details including account number, account holder, and balance. Returns: str: The account details in a formatted string. pass ``` # Example of Usage ```python # Creating a new bank account account = BankAccount(\'123456789\', \'John Doe\') # Depositing money account.deposit(1000.0) # Withdrawing money successful_withdrawal = account.withdraw(500.0) print(successful_withdrawal) # Expected output: True # Attempting to withdraw more money than the current balance unsuccessful_withdrawal = account.withdraw(600.0) print(unsuccessful_withdrawal) # Expected output: False # Checking the balance print(account.get_balance()) # Expected output: 500.0 # Getting account details print(account.get_account_details()) # Expected output: Account Number: 123456789, Account Holder: John Doe, Balance: 500.0 ``` # Requirements 1. **Initialization (`__init__`) Method:** - Should initialize the account number, account holder\'s name, and set the initial balance to zero. 2. **Deposit Method (`deposit`):** - Should add the specified amount to the account balance. 3. **Withdraw Method (`withdraw`):** - Should deduct the specified amount from the account balance if sufficient funds are available. - Should return `True` if the withdrawal is successful, `False` otherwise. 4. **Get Balance Method (`get_balance`):** - Should return the current account balance. 5. **Get Account Details Method (`get_account_details`):** - Should return the account number, account holder\'s name, and current balance in a formatted string.","solution":"class BankAccount: def __init__(self, account_number, account_holder): Initializes a new bank account with the provided account number and account holder\'s name. Parameters: account_number (str): The account number of the bank account. account_holder (str): The name of the account holder. self.account_number = account_number self.account_holder = account_holder self.balance = 0.0 def deposit(self, amount): Deposits the given amount into the account. Parameters: amount (float): The amount to be deposited. Returns: None self.balance += amount def withdraw(self, amount): Withdraws the given amount from the account if sufficient balance is available. Parameters: amount (float): The amount to be withdrawn. Returns: bool: True if the withdrawal was successful, False otherwise. if amount <= self.balance: self.balance -= amount return True return False def get_balance(self): Returns the current balance of the account. Returns: float: The current balance of the account. return self.balance def get_account_details(self): Returns the account details including account number, account holder, and balance. Returns: str: The account details in a formatted string. return f\\"Account Number: {self.account_number}, Account Holder: {self.account_holder}, Balance: {self.balance:.2f}\\""},{"question":"You are tasked with creating a function `kth_smallest_element(matrix, k)` that finds the k-th smallest element in a sorted 2D matrix. Each of the rows and columns in the matrix is sorted in ascending order. # Requirements: 1. Implement the function `kth_smallest_element(matrix: List[List[int]], k: int) -> int` that returns the k-th smallest element in the matrix. 2. Optimize the function to handle matrices where each row and column are sorted. 3. Ensure that the function runs efficiently even for larger matrices with dimensions up to 300 x 300. # Function Signature ```python from typing import List def kth_smallest_element(matrix: List[List[int]], k: int) -> int: pass ``` # Example ```python matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] print(kth_smallest_element(matrix, 8)) # Output: 13 matrix = [ [1, 2], [1, 3] ] print(kth_smallest_element(matrix, 2)) # Output: 1 ``` # Constraints - The matrix will always have at least one element (1 <= matrix dimensions <= 300). - The value of `k` will always be valid (1 <= k <= n * m where n is the number of rows and m is the number of columns).","solution":"from typing import List import heapq def kth_smallest_element(matrix: List[List[int]], k: int) -> int: Returns the k-th smallest element in a sorted 2D matrix. Each row and column are sorted in ascending order. n = len(matrix) m = len(matrix[0]) # Min-heap to store the smallest elements min_heap = [] # Initialize the heap with the first element of each row (up to k rows or total rows) for i in range(min(k, n)): heapq.heappush(min_heap, (matrix[i][0], i, 0)) # Extract the smallest elements from the heap k times for _ in range(k - 1): val, row, col = heapq.heappop(min_heap) if col + 1 < m: # If there are more elements in the same row, add the next element heapq.heappush(min_heap, (matrix[row][col + 1], row, col + 1)) # The k-th smallest element return heapq.heappop(min_heap)[0]"},{"question":"Given a social network represented by a dictionary where keys are user IDs (integers) and values are lists of friend IDs (also integers), write a function `find_shortest_path(graph, start, end)` that finds the shortest path between two users. The path should be represented as a list of user IDs starting from the `start` user and ending at the `end` user. # Constraints: 1. If there is no path between the `start` and `end` users, return an empty list. 2. Assume the graph is an undirected graph. 3. The graph might be sparse, i.e., some users might have no friends at all. 4. The graph dictionary does not necessarily include all users; only those with at least one friend or themselves being mentioned as a friend of someone else. # Example: Given the `graph` dictionary: ```python graph = { 1: [2, 3], 2: [1, 4], 3: [1], 4: [2, 5], 5: [4] } ``` Calling `find_shortest_path(graph, 1, 5)` should return `[1, 2, 4, 5]` as this is the shortest path from user 1 to user 5. # Notes: - There might be multiple shortest paths. Returning any of them is acceptable. - You can assume the user IDs for `start` and `end` always exist in the graph. # Your task: 1. Implement the function `find_shortest_path(graph, start, end)`. 2. Use an appropriate graph traversal algorithm to find the shortest path. 3. Ensure your function handles edge cases, such as no path existing. Here is the function signature: ```python def find_shortest_path(graph, start, end): # Your code here ```","solution":"from collections import deque def find_shortest_path(graph, start, end): Finds the shortest path between start and end users in a social network graph. Parameters: - graph (dict): A dictionary where keys are user IDs and values are lists of friend IDs. - start (int): The user ID to start from. - end (int): The user ID to find the path to. Returns: - list: The shortest path from start to end user IDs or an empty list if no path exists. if start == end: return [start] visited = set() queue = deque([(start, [start])]) while queue: current_node, path = queue.popleft() for neighbor in graph.get(current_node, []): if neighbor == end: return path + [neighbor] if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return []"},{"question":"Given a list of tuples, where each tuple contains two elements: a string representing a product name and an integer representing the quantity sold, write a function to create a bar chart that shows the total quantity sold for each product. The function should first aggregate the quantities for each unique product and then plot the bar chart accordingly. The function should output: dict: A dictionary with product names as keys and their total quantities sold as values. plt.Axes: The axes object of the bar chart showing the total quantities sold for each product. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt from collections import defaultdict def task_func(products): ```","solution":"import matplotlib.pyplot as plt from collections import defaultdict def task_func(products): Creates a bar chart that shows the total quantity sold for each product. Parameters: products (list of tuple): List of tuples, where each tuple contains a string (product name) and an integer (quantity sold). Returns: dict: A dictionary with product names as keys and their total quantities sold as values. plt.Axes: The axes object of the bar chart showing the total quantities sold for each product. # Aggregate quantities for each unique product product_quantities = defaultdict(int) for product, quantity in products: product_quantities[product] += quantity # Create the bar chart names = list(product_quantities.keys()) values = list(product_quantities.values()) fig, ax = plt.subplots() ax.bar(names, values) ax.set_xlabel(\'Product Names\') ax.set_ylabel(\'Total Quantity Sold\') ax.set_title(\'Total Quantity Sold for Each Product\') # Return the dictionary and Axes object return dict(product_quantities), ax"},{"question":"You are asked to write a function named `word_frequencies` that takes a string as input and returns a dictionary where the keys are unique words in the input string and the values are the number of times each word appears. The comparison should be case-insensitive, and the words should be considered in their lowercase form. **Function Signature:** ```python def word_frequencies(text: str) -> Dict[str, int]: ``` **Input:** - `text` (str): A string containing the text to analyze for word frequencies. **Output:** - `Dict[str, int]`: A dictionary mapping each unique word to its frequency count. **Requirements:** - Convert the text to lowercase to ensure case-insensitivity. - Consider words to be sequences of alphanumeric characters (`a-z`, `A-Z`, `0-9`), so `hello`, `Hello`, and `HELLO` should all be treated as the same word. - Ignore any punctuation or special characters (e.g., `.,!?`). - If the input is an empty string, the function should return an empty dictionary. **Example:** If the input string is: ``` \\"Hello, world! HELLO... Hello.\\" ``` The function should return: ```python { \\"hello\\": 3, \\"world\\": 1 } ``` # Constraints: - The input string may contain leading or trailing spaces, as well as multiple spaces between words. These should be handled appropriately. - The input string will contain only printable ASCII characters.","solution":"import re from typing import Dict def word_frequencies(text: str) -> Dict[str, int]: Returns a dictionary where the keys are unique words in the input string and the values are the number of times each word appears. The comparison is case-insensitive. # Convert the text to lowercase to ensure case-insensitivity text = text.lower() # Use a regular expression to find words (alphanumeric sequences) words = re.findall(r\'bw+b\', text) # Create a dictionary to store the word frequencies freq_dict = {} # Populate the dictionary with word counts for word in words: if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 return freq_dict"},{"question":"Your task is to create a Python function named `magic_matrix` that performs a specified operations on a given 2D list (matrix) of integers. The operations involve element-wise squaring, row-wise summation, and flattening the matrix into a list. Here is the precise computation that your function should perform: 1. Create a new matrix where each element is the square of the corresponding element in the input matrix. 2. Compute the sum of the elements in each row of the squared matrix. 3. Flatten the result into a single list, where each row sum is included as a separate element. The function signature should be: ```python def magic_matrix(matrix: List[List[int]]) -> List[int]: ``` # Requirements: - Utilize Python\'s list comprehensions and built-in functions for efficient computation. - Ensure your solution handles possible edge cases, such as an empty matrix or rows with different lengths. # Constraints: - The matrix will have at least 1 row and 1 column. - Each element in the matrix will be an integer within the range ([-10^3, 10^3]). # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(magic_matrix(matrix)) # Expected output: [14, 77, 194] ``` # Additional Information: - You may assume that the provided input matrix is well-formed for the context of this problem. The efficient solution should take into account both the computational complexity and the edge cases of the matrix operations.","solution":"from typing import List def magic_matrix(matrix: List[List[int]]) -> List[int]: Given a 2D list (matrix) of integers, this function returns a list where: 1. Each element is the sum of the squares of the respective row elements. row_sums = [sum(cell ** 2 for cell in row) for row in matrix] return row_sums"},{"question":"You are provided with a function `average_grade` that computes the average grade of students from a given CSV file. The CSV file contains columns \'Name\' and \'Grade\', where \'Grade\' is an integer representing each student\'s grade. Your task is to implement the function `average_grade(file_path)` using only the pandas library and its following functions: `pandas.read_csv`. Here is a brief explanation of the input parameter: - `file_path`: The file path of the CSV file to be read. Your implementation should: 1. Read the CSV file from the given file path. 2. Calculate the average of the \'Grade\' column. 3. Return the average grade as a float. *Example Usage*: ```python # Assume \'grades.csv\' contains: # Name,Grade # John,88 # Alice,92 # Bob,75 average = average_grade(\'grades.csv\') print(average) # Output should be 85.0 ``` **Note**: Ensure that the CSV file is properly read and the average is computed accurately. ---","solution":"import pandas as pd def average_grade(file_path): Compute the average grade of students from a given CSV file. Parameters: file_path (str): The file path of the CSV file to be read. Returns: float: The average grade of the students. df = pd.read_csv(file_path) return df[\'Grade\'].mean()"},{"question":"You are required to write a function named `generate_report(input_file: str, report_file: str) -> None` that reads a JSON file and generates a report in a text file. The JSON file contains an array of dictionary objects with the following fields: `id`, `name`, `department`, and `salary`. The function must: 1. Check if the provided `input_file` filename ends with `.json`. If the filename does not end with `.json`, exit the program using `sys.exit(\\"Please provide a JSON file\\")`. 2. Read the JSON file using the `json.load()` method. 3. Calculate the average salary of the employees in each department. 4. Write the report to a text file specified by `report_file`. The report should list each department followed by the average salary for that department. 5. Format the report as follows: ``` Department: {department_name} Average Salary: {average_salary} Department: {department_name} Average Salary: {average_salary} ``` Assume the input JSON file is correctly formatted and contains an array of employee records. The function should handle cases in which some departments have no employees by not including them in the report.","solution":"import json import sys def generate_report(input_file: str, report_file: str) -> None: if not input_file.endswith(\'.json\'): sys.exit(\\"Please provide a JSON file\\") with open(input_file, \'r\') as file: data = json.load(file) department_salary = {} for employee in data: department = employee[\'department\'] salary = employee[\'salary\'] if department in department_salary: department_salary[department][\'total_salary\'] += salary department_salary[department][\'count\'] += 1 else: department_salary[department] = {\'total_salary\': salary, \'count\': 1} with open(report_file, \'w\') as report: for department, salary_data in department_salary.items(): average_salary = salary_data[\'total_salary\'] / salary_data[\'count\'] report.write(f\\"Department: {department}n\\") report.write(f\\"Average Salary: {average_salary}nn\\")"},{"question":"# Database Query Composition In this problem, you will design a function `fetch_sales_data(year: int, month: int) -> list` that queries a database to extract sales data for a specific month and year. The database contains a table named `sales` with the following columns: - `id` (INTEGER): The unique identifier for each sale entry. - `product_name` (TEXT): The name of the product sold. - `sale_date` (DATE): The date the sale was made. - `quantity` (INTEGER): The number of units sold. - `price` (REAL): The sale price for a single unit. Your task is to compose and execute a SQL query to fetch all records from the `sales` table that match the given year and month. The function should return a list of tuples, where each tuple represents a record and contains the `id`, `product_name`, `sale_date`, `quantity`, and `price`. # Requirements: 1. Implement the `fetch_sales_data` function. 2. Use the `sqlite3` library to connect to an SQLite database. 3. Compose a SQL query to select records that match the specified year and month. 4. Execute the query and fetch all matching records. 5. Return the records as a list of tuples. 6. You can assume that the database connection and cursor will be created inside the function. # Notes: - Assume the sales data table (`sales`) is already populated and exists in the SQLite database. - The function should handle months and years correctly (e.g., filtering for January 2022, selecting 2022-01-* dates). - If no records match the criteria, return an empty list. - Use Python\'s `sqlite3` library for database operations. # Example: ```python import sqlite3 def fetch_sales_data(year: int, month: int) -> list: # Connect to SQLite database conn = sqlite3.connect(\'sales.db\') cursor = conn.cursor() query = f SELECT id, product_name, sale_date, quantity, price FROM sales WHERE strftime(\'%Y\', sale_date) = \'{year:04d}\' AND strftime(\'%m\', sale_date) = \'{month:02d}\' cursor.execute(query) result = cursor.fetchall() conn.close() return result # Example Usage sales_data = fetch_sales_data(2023, 7) print(sales_data) ``` ```python # Example Output [ (1, \\"Widget A\\", \\"2023-07-15\\", 5, 9.99), (2, \\"Widget B\\", \\"2023-07-16\\", 3, 12.49), ... ] ```","solution":"import sqlite3 def fetch_sales_data(year: int, month: int) -> list: Queries the sales database to extract sales data for a specific month and year. Returns a list of tuples, where each tuple contains (id, product_name, sale_date, quantity, and price). # Connect to the SQLite database conn = sqlite3.connect(\'sales.db\') cursor = conn.cursor() # Format the query string to select records that match the specified year and month query = SELECT id, product_name, sale_date, quantity, price FROM sales WHERE strftime(\'%Y\', sale_date) = ? AND strftime(\'%m\', sale_date) = ? cursor.execute(query, (f\'{year:04d}\', f\'{month:02d}\')) result = cursor.fetchall() # Close the database connection conn.close() return result"},{"question":"Write a function that reads a list of integers from a text file and outputs a list of integers that appear more than once, sorted in ascending order. Ensure the environment directory contains the specified text file before running the function. The function should save the result to a file named \'duplicates.csv\' where each line contains one integer. The function should output with: ``` str: The path to the \'duplicates.csv\' file with the duplicate integers. ``` You should write self-contained code starting with: ``` import csv from collections import Counter import os def find_duplicates(filename): ```","solution":"import csv from collections import Counter import os def find_duplicates(filename): # Read integers from the file with open(filename, \'r\') as file: numbers = list(map(int, file.read().split())) # Use Counter to count the occurrences of each integer counter = Counter(numbers) # Find integers that appear more than once duplicates = [number for number, count in counter.items() if count > 1] # Sort the duplicates in ascending order duplicates.sort() # Write the sorted duplicates to \'duplicates.csv\' output_filename = \'duplicates.csv\' with open(output_filename, \'w\', newline=\'\') as csvfile: writer = csv.writer(csvfile) for number in duplicates: writer.writerow([number]) return os.path.abspath(output_filename)"},{"question":"You are tasked with writing a function called `resize_images` that resizes all image files in a specific directory to a given width and height. The directory contains various image files, which can be in different formats such as `.jpg`, `.jpeg`, `.png`, etc. The resized images should replace the original images in the directory. Your function should: 1. List all image files in the given directory. 2. Resize each image to the specified width and height. 3. Save the resized image, replacing the original image in the directory. Here is the function signature: ```python def resize_images(directory: str, width: int, height: int) -> None: Resizes all image files in the specified directory to the given width and height. Args: directory (str): The path to the directory containing the image files. width (int): The desired width for the resized images. height (int): The desired height for the resized images. Returns: None ``` # Requirements - Use the `os.listdir()` function to list all files in the directory. - Use the `PIL` (Pillow) library for image processing. - Use the `Image.open()` method to open an image file. - Use the `Image.resize()` method to resize the image. - Use the `Image.save()` method to save the resized image. # Example: If the directory contains: ``` image1.jpg image2.png image3.jpeg ``` And the function is called with a width of 800 and a height of 600: ```python resize_images(\'/path/to/directory\', 800, 600) ``` The function should resize each image to 800x600 pixels and save them, replacing the original images: ``` image1.jpg (resized to 800x600) image2.png (resized to 800x600) image3.jpeg (resized to 800x600) ``` Note: - The function should handle different image formats and properly resize and save each image in its original format. - If there are non-image files in the directory, the function should ignore them.","solution":"import os from PIL import Image def resize_images(directory: str, width: int, height: int) -> None: Resizes all image files in the specified directory to the given width and height. Args: directory (str): The path to the directory containing the image files. width (int): The desired width for the resized images. height (int): The desired height for the resized images. Returns: None valid_extensions = (\'.jpg\', \'.jpeg\', \'.png\', \'.bmp\', \'.gif\', \'.tiff\') for filename in os.listdir(directory): if filename.lower().endswith(valid_extensions): image_path = os.path.join(directory, filename) with Image.open(image_path) as img: resized_image = img.resize((width, height)) resized_image.save(image_path)"},{"question":"In this problem, you are tasked with developing a function named `generate_report_card` that processes student grades from a CSV file and calculates the final grades while adding some additional metadata. **Function Signature:** ```python def generate_report_card(filename: str) -> pd.DataFrame: ``` **Parameters:** - `filename` (str): The name of the CSV file containing the student grades. The CSV file has the following columns: \'Student\', \'Assignment1\', \'Assignment2\', \'Midterm\', \'Final\'. **Returns:** - A pandas DataFrame containing the report card for each student with their calculated final grade and the highest and lowest scores achieved across assignments, midterm, and final. The resulting DataFrame should have the following columns: \'Student\', \'Final Grade\', \'Highest Score\', \'Lowest Score\'. **Requirements:** - Use the `pandas.read_csv()` function to load the data. - Calculate the \'Final Grade\' as a weighted average of \'Assignment1\' (20%), \'Assignment2\' (20%), \'Midterm\' (30%), and \'Final\' (30%). - Determine the \'Highest Score\' and \'Lowest Score\' across \'Assignment1\', \'Assignment2\', \'Midterm\', and \'Final\' for each student. - Return the final DataFrame sorted by \'Student\'. Your task is to implement this function effectively using the `pandas` library, adhering to the function signature and requirements. This challenge will help you understand how to handle CSV data, perform calculations, and generate useful reports.","solution":"import pandas as pd def generate_report_card(filename: str) -> pd.DataFrame: # Load data from CSV file df = pd.read_csv(filename) # Calculate Final Grade as a weighted average: 20% each for assignments, 30% each for midterm and final df[\'Final Grade\'] = (0.2 * df[\'Assignment1\'] + 0.2 * df[\'Assignment2\'] + 0.3 * df[\'Midterm\'] + 0.3 * df[\'Final\']) # Calculate the highest and lowest score among the columns for each student df[\'Highest Score\'] = df[[\'Assignment1\', \'Assignment2\', \'Midterm\', \'Final\']].max(axis=1) df[\'Lowest Score\'] = df[[\'Assignment1\', \'Assignment2\', \'Midterm\', \'Final\']].min(axis=1) # Select the desired columns for the final report report_card = df[[\'Student\', \'Final Grade\', \'Highest Score\', \'Lowest Score\']] # Sort by Student report_card = report_card.sort_values(by=\'Student\').reset_index(drop=True) return report_card"},{"question":"Title: Resource Allocation with Priority Queues You are tasked with implementing a resource allocation system for a cloud service provider. The system handles incoming resource requests and allocates resources based on their priority level using a priority queue. **Function Name**: `allocate_resources` **Parameters**: - `resources` (int): The total amount of available resources. - `requests` (list of tuples): Each tuple represents a request in the format `(request_id, priority, amount_requested)`, where: - `request_id` (string): The unique identifier of the request. - `priority` (int): The priority level of the request. Lower numbers indicate higher priority (e.g., `1` is the highest priority). - `amount_requested` (int): The number of resources requested. **Allocation Mechanics**: 1. Allocate resources to requests based on their priority levels. Higher priority requests should be fulfilled before lower priority ones. 2. In case of requests with the same priority, allocate resources in the order they appear in the list. 3. Continue allocation until resources are exhausted or all requests are fulfilled. 4. Return a list of tuples representing the allocation results in the format `(request_id, amount_allocated)`. If a request cannot be fully satisfied due to resource constraints, allocate whatever is available. **Output**: Return a list of allocation results, where each result is a tuple containing the `request_id` and the `amount_allocated`. **Example**: ```python requests = [ (\\"req1\\", 1, 50), (\\"req2\\", 2, 30), (\\"req3\\", 1, 20), (\\"req4\\", 3, 40), ] resources = 80 print(allocate_resources(resources, requests)) ``` **Expected Output**: ```python [(\\"req1\\", 50), (\\"req3\\", 20), (\\"req2\\", 10)] ``` In this example, `req4` does not receive any resources because higher-priority requests exhausted the available resources.","solution":"def allocate_resources(resources, requests): Allocate resources based on priority level using a priority queue. Args: resources (int): Total amount of available resources. requests (list of tuples): List of tuples in the format (request_id, priority, amount_requested). Returns: list of tuples: List of allocation results in the format (request_id, amount_allocated). # Sort requests by priority (lower number means higher priority) requests.sort(key=lambda x: x[1]) allocation = [] for request_id, priority, amount_requested in requests: if resources >= amount_requested: allocation.append((request_id, amount_requested)) resources -= amount_requested else: if resources > 0: allocation.append((request_id, resources)) resources = 0 break return allocation"},{"question":"In this task, you will be working with JSON files and the `pathlib` library to manage file paths. Your goal is to read data from a JSON file and create a list of objects based on a provided class `Product`. Implement the function `read_json_to_objects`. **Function Signature** ```python def read_json_to_objects(json_file_path: Path) -> List[Product]: ``` **Function Description** - This function should take a `json_file_path` as a parameter, which is a `Path` object from the `pathlib` library indicating the location of a JSON file. - The JSON file is expected to contain a list of objects with the following keys: `product_name`, `category`, `price`, `inventory`. - The function should read the JSON file and create a list of `Product` objects, where each object in the JSON corresponds to a `Product` instance. - The `Product` class has the following fields: - `product_name` (str) - `category` (str) - `price` (float) - `inventory` (int) # Requirements 1. Use `pathlib.Path` for file path operations. 2. Use `json` module to read the JSON file. 3. Use the built-in `dataclass` decorator for defining the `Product` class. **Example** Given a JSON file located at `\\"./json_sample1.json\\"` with the following content: ```json [ {\\"product_name\\": \\"Notebook\\", \\"category\\": \\"Stationery\\", \\"price\\": 5.99, \\"inventory\\": 50}, {\\"product_name\\": \\"Headphones\\", \\"category\\": \\"Electronics\\", \\"price\\": 89.99, \\"inventory\\": 200} ] ``` The function call ```python read_json_to_objects(Path(\\"./json_sample1.json\\")) ``` should return: ```python [ Product(product_name=\\"Notebook\\", category=\\"Stationery\\", price=5.99, inventory=50), Product(product_name=\\"Headphones\\", category=\\"Electronics\\", price=89.99, inventory=200) ] ``` # Constraints 1. The JSON file will always contain a list of objects with the keys `product_name`, `category`, `price`, and `inventory`. Good luck!","solution":"from pathlib import Path import json from dataclasses import dataclass from typing import List @dataclass class Product: product_name: str category: str price: float inventory: int def read_json_to_objects(json_file_path: Path) -> List[Product]: with json_file_path.open(\'r\', encoding=\'utf-8\') as file: data = json.load(file) products = [Product(**item) for item in data] return products"},{"question":"You are given a list of student names and their corresponding grades. You need to write a function that computes the average grade for each student and then determines the letter grade based on the average. # Function Specification You need to write a function called `compute_letter_grades`. **Function signature:** ```python def compute_letter_grades(grades: dict) -> dict: pass ``` **Parameters:** - `grades` (dict): A dictionary where the key is a student\'s name (str) and the value is a list of integers representing the student\'s grades. **Returns:** - (dict): A dictionary where the key is a student\'s name (str) and the value is their letter grade (str). # Letter Grade Mapping - Average >= 90: \'A\' - 80 <= Average < 90: \'B\' - 70 <= Average < 80: \'C\' - 60 <= Average < 70: \'D\' - Average < 60: \'F\' # Requirements 1. Compute the average grade for each student. 2. Map the average to the corresponding letter grade. 3. Return a dictionary with students\' names as keys and their respective letter grades as values. # Example ```python grades = { \\"Alice\\": [85, 92, 78], \\"Bob\\": [95, 90, 93], \\"Charlie\\": [70, 75, 72], \\"David\\": [55, 52, 60] } print(compute_letter_grades(grades)) ``` Output: ```python { \\"Alice\\": \\"B\\", \\"Bob\\": \\"A\\", \\"Charlie\\": \\"C\\", \\"David\\": \\"F\\" } ``` # Note Ensure you handle cases where the list of grades might be empty by assigning the grade \'F\' and validate that the input dictionary follows the specified format.","solution":"def compute_letter_grades(grades: dict) -> dict: Compute the average grade for each student and determine the letter grade. Parameters: grades (dict): A dictionary where the key is a student\'s name (str) and the value is a list of integers representing the student\'s grades. Returns: dict: A dictionary where the key is a student\'s name (str) and the value is their letter grade (str). letter_grades = {} for student, marks in grades.items(): if not marks: # Handle empty grade list avg_grade = 0 else: avg_grade = sum(marks) / len(marks) if avg_grade >= 90: letter_grade = \'A\' elif avg_grade >= 80: letter_grade = \'B\' elif avg_grade >= 70: letter_grade = \'C\' elif avg_grade >= 60: letter_grade = \'D\' else: letter_grade = \'F\' letter_grades[student] = letter_grade return letter_grades"},{"question":"You are required to implement a function `max_paragraph_words(text)`, which identifies the paragraph in a given text that contains the highest number of unique words. Here are the detailed steps for your implementation: 1. **Paragraph Separation**: The input text will be separated into paragraphs by newline characters (`n`). You need to split the text into a list of paragraphs using these newline characters. 2. **Word Extraction**: For each paragraph, extract words by splitting on whitespace. Consider words to be case-insensitive, i.e., \\"Word\\" and \\"word\\" should be considered the same. Remove any punctuation from the words to consider only alphanumeric characters. You may use Python’s `string.punctuation` for this purpose. 3. **Unique Word Count**: For each paragraph, count the number of unique words. Maintain the counts in a list where each index corresponds to a paragraph. 4. **Identify Maximum**: Determine the paragraph with the highest number of unique words. If multiple paragraphs have the same number of unique words, return the first one. 5. **Return Result**: Return the paragraph with the highest number of unique words as a single string. If the input text is empty, return an empty string. You need to implement the function `max_paragraph_words(text)` according to these requirements. Ensure to consider edge cases such as empty paragraphs or text with no unique words. **Example**: ```python text = Python is great. Python was created by Guido. Python is used in web development, data science, and more. ``` In this example, the third paragraph has the highest number of unique words. Thus, the output should be: ```python \\"Python is used in web development, data science, and more.\\" ``` Implement the function as specified.","solution":"import string def max_paragraph_words(text): Returns the paragraph with the highest number of unique words in the text. if not text.strip(): return \\"\\" paragraphs = text.split(\'n\') max_unique_words_count = 0 result_paragraph = \\"\\" for paragraph in paragraphs: words = paragraph.strip().split() unique_words = set() for word in words: cleaned_word = word.strip(string.punctuation).lower() if cleaned_word: unique_words.add(cleaned_word) unique_words_count = len(unique_words) if unique_words_count > max_unique_words_count: max_unique_words_count = unique_words_count result_paragraph = paragraph return result_paragraph"},{"question":"In this problem, you will work with file handling in Python by reading and writing data into files. Your goal is to create a function named `modify_file` that reads a text file, processes its contents, and writes the modified content into a new file. You need to: 1. Define a function `modify_file(input_file, output_file)` that: - Opens the `input_file` for reading. - Reads its contents, which consist of multiple lines of text. - Processes each line, such that it removes leading and trailing spaces, converts the text to uppercase, and appends the line number at the end. - Writes the modified lines into the `output_file`. 2. Ensure that the function handles exceptions such as the `input_file` not existing or any other I/O error gracefully by printing an appropriate message. Here\'s what the content transformation should look like: For the `input_file` with the following content: ``` hello world this is a test of file handling ``` The `output_file` should contain: ``` HELLO WORLD 1 THIS IS A TEST 2 OF FILE HANDLING 3 ``` Signature: ```python def modify_file(input_file, output_file): # Implementation here ```","solution":"def modify_file(input_file, output_file): Reads input_file, processes its content, and writes the modified content to output_file. Each line in input_file will be stripped of leading/trailing spaces, converted to uppercase, and appended with its line number in the format \\"content n\\", where n is the line number. try: with open(input_file, \'r\') as infile: lines = infile.readlines() # Process lines processed_lines = [] for i, line in enumerate(lines, start=1): processed_line = line.strip().upper() + f\\" {i}\\" processed_lines.append(processed_line) # Write to the output file with open(output_file, \'w\') as outfile: for line in processed_lines: outfile.write(line + \'n\') except FileNotFoundError: print(f\\"Error: The file \'{input_file}\' does not exist.\\") except IOError as e: print(f\\"An IOError occurred: {e}\\")"},{"question":"You are tasked with creating a data normalization module in Python that transforms raw numerical data into a standardized format. Your function will be named `normalize_data`. The goal of this function is to scale the values of a dataset so that each feature contributes equally to the final results of a machine learning algorithm. Here is the exact specification of what your function should do: 1. **Parameters:** - `data`: A list of dictionaries where each dictionary represents a data point. Each dictionary has identical keys representing the feature names, and the values are their respective numerical values. - `method`: A string that can take values `min-max` or `z-score` specifying the normalization method to be used. 2. **Function Details:** - If the `method` is `min-max`, then apply Min-Max normalization: - `normalized_value = (value - min_value) / (max_value - min_value)` - Ensure you compute the min and max values for each feature. - If the `method` is `z-score`, then apply Z-score normalization: - `normalized_value = (value - mean_value) / std_deviation` - Ensure you compute the mean and standard deviation for each feature. - Store the normalized values in a new dictionary with the same keys as the original data points. - Return a list of normalized dictionaries, each corresponding to the original list. 3. **Return values:** - A list of dictionaries where each dictionary represents a normalized data point with the same structure as the input data. # **Example:** ```python data = [ {\\"feature1\\": 10, \\"feature2\\": 100}, {\\"feature1\\": 20, \\"feature2\\": 200}, {\\"feature1\\": 15, \\"feature2\\": 150} ] method = \\"min-max\\" normalize_data(data, method) ``` **Expected output:** ```python [ {\\"feature1\\": 0.0, \\"feature2\\": 0.0}, {\\"feature1\\": 1.0, \\"feature2\\": 1.0}, {\\"feature1\\": 0.5, \\"feature2\\": 0.5} ] ```","solution":"def normalize_data(data, method): Normalize the input data using the specified method. Parameters: - data (list of dict): A list of dictionaries, where each dictionary represents a data point. - method (str): Normalization method (\'min-max\' or \'z-score\'). Returns: - list of dict: Normalized data. if method not in [\'min-max\', \'z-score\']: raise ValueError(\\"Method must be \'min-max\' or \'z-score\'\\") # Collect feature names feature_names = data[0].keys() # Initialize dictionaries to store min, max, mean, and std dev for each feature min_val = {feature: float(\'inf\') for feature in feature_names} max_val = {feature: float(\'-inf\') for feature in feature_names} mean_val = {feature: 0.0 for feature in feature_names} std_dev = {feature: 0.0 for feature in feature_names} # Calculate min, max, and mean values for each feature for point in data: for feature in feature_names: if point[feature] < min_val[feature]: min_val[feature] = point[feature] if point[feature] > max_val[feature]: max_val[feature] = point[feature] mean_val[feature] += point[feature] # Finalize mean calculation num_points = len(data) for feature in feature_names: mean_val[feature] /= num_points # Calculate standard deviation for each feature for point in data: for feature in feature_names: std_dev[feature] += (point[feature] - mean_val[feature]) ** 2 for feature in feature_names: std_dev[feature] = (std_dev[feature] / num_points) ** 0.5 # Normalize data normalized_data = [] for point in data: normalized_point = {} for feature in feature_names: if method == \'min-max\': if max_val[feature] - min_val[feature] == 0: normalized_point[feature] = 0.0 else: normalized_point[feature] = (point[feature] - min_val[feature]) / (max_val[feature] - min_val[feature]) elif method == \'z-score\': if std_dev[feature] == 0: normalized_point[feature] = 0.0 else: normalized_point[feature] = (point[feature] - mean_val[feature]) / std_dev[feature] normalized_data.append(normalized_point) return normalized_data"},{"question":"In this task, you are required to implement a function named `unique_elements` that takes two lists of integers as parameters: `list1` and `list2`. Your function should return a new list that contains only the elements which are unique to one list and do not appear in both lists. The order of elements in the resulting list should maintain their original order of appearance from the input lists. # Constraints: - Both `list1` and `list2` will have at most 1000 elements. - Elements in the lists will be integers ranging from -1000 to 1000. **Function Signature:** ```python def unique_elements(list1: list[int], list2: list[int]) -> list[int]: ``` **Example Usage:** ```python unique_elements([1, 2, 3, 4], [3, 4, 5, 6]) ``` In this example, the function will return `[1, 2, 5, 6]` since 1 and 2 are unique to `list1`, and 5 and 6 are unique to `list2`. # Additional Notes: - Your solution should optimize for both time and space complexity as much as possible. - The list order in the output should strictly follow the first appearance in the input lists.","solution":"def unique_elements(list1: list[int], list2: list[int]) -> list[int]: Returns a list of elements that are unique to one list and do not appear in both lists. The order of elements in the resulting list maintains their original order of appearance from the input lists. set1 = set(list1) set2 = set(list2) # Find unique elements in each list unique_to_list1 = [x for x in list1 if x not in set2] unique_to_list2 = [y for y in list2 if y not in set1] # Return the concatenated result return unique_to_list1 + unique_to_list2"},{"question":"Create a function to retrieve detailed information about the system\'s memory and storage. Specifically, the function should gather details about the total and available physical memory, total and free disk space of the root partition, and the memory usage percentage. This information should be compiled and returned in a dictionary format. The function should output: dict: A dictionary containing: \'Total Physical Memory\': The total physical memory in bytes. \'Available Physical Memory\': The available physical memory in bytes. \'Memory Usage\': Percentage of memory utilization. \'Total Disk Space\': The total disk space of the root partition in bytes. \'Free Disk Space\': The free disk space of the root partition in bytes. You should write self-contained code starting with: ``` import psutil def task_func(): ```","solution":"import psutil def task_func(): Retrieves detailed information about the system\'s memory and storage. Returns: dict: A dictionary containing: \'Total Physical Memory\': The total physical memory in bytes. \'Available Physical Memory\': The available physical memory in bytes. \'Memory Usage\': Percentage of memory utilization. \'Total Disk Space\': The total disk space of the root partition in bytes. \'Free Disk Space\': The free disk space of the root partition in bytes. # Memory information memory_info = psutil.virtual_memory() total_physical_memory = memory_info.total available_physical_memory = memory_info.available memory_usage_percentage = memory_info.percent # Disk information (root partition) disk_info = psutil.disk_usage(\'/\') total_disk_space = disk_info.total free_disk_space = disk_info.free return { \'Total Physical Memory\': total_physical_memory, \'Available Physical Memory\': available_physical_memory, \'Memory Usage\': memory_usage_percentage, \'Total Disk Space\': total_disk_space, \'Free Disk Space\': free_disk_space }"},{"question":"Write a function `simulate_game_score` that models a simplified version of a soccer tournament. The function should simulate scores for a round-robin style tournament where each team plays against every other team. Record the number of goals scored by each team in each match and generate a final ranked list of teams based on their performance. The function `simulate_game_score` should: 1. Accept a list of team names. Example: `[\\"Team A\\", \\"Team B\\", \\"Team C\\"]`. 2. Simulate the score for each match by randomly generating the number of goals each team scores (use `random.randint(0, 5)` for the number of goals). 3. Store the match results and compute the total number of goals scored and goals conceded by each team. 4. Rank the teams based on their match performance using the following criteria, in order of importance: - Higher number of points (3 points for a win, 1 point for a draw, 0 points for a loss). - Higher goal difference (goals scored minus goals conceded). - Higher number of goals scored. 5. Return the ranked list of teams along with their points, goal difference, and total goals scored. Here is the format of the function signature: ```python import random def simulate_game_score(teams): ```","solution":"import random def simulate_game_score(teams): # Dictionary to store each team\'s statistics team_stats = {team: {\'points\': 0, \'goals_scored\': 0, \'goals_conceded\': 0} for team in teams} # Simulate the scores for each match for i in range(len(teams)): for j in range(i + 1, len(teams)): team1 = teams[i] team2 = teams[j] goals_team1 = random.randint(0, 5) goals_team2 = random.randint(0, 5) # Update goals scored and conceded team_stats[team1][\'goals_scored\'] += goals_team1 team_stats[team1][\'goals_conceded\'] += goals_team2 team_stats[team2][\'goals_scored\'] += goals_team2 team_stats[team2][\'goals_conceded\'] += goals_team1 # Update points based on match result if goals_team1 > goals_team2: team_stats[team1][\'points\'] += 3 elif goals_team2 > goals_team1: team_stats[team2][\'points\'] += 3 else: team_stats[team1][\'points\'] += 1 team_stats[team2][\'points\'] += 1 # Calculate goal difference for each team for team in team_stats: team_stats[team][\'goal_difference\'] = team_stats[team][\'goals_scored\'] - team_stats[team][\'goals_conceded\'] # Sort teams based on points, goal difference, and goals scored ranked_teams = sorted(teams, key=lambda t: (team_stats[t][\'points\'], team_stats[t][\'goal_difference\'], team_stats[t][\'goals_scored\']), reverse=True) # Create a ranked list with statistics rank_list = [ { \'team\': team, \'points\': team_stats[team][\'points\'], \'goal_difference\': team_stats[team][\'goal_difference\'], \'goals_scored\': team_stats[team][\'goals_scored\'] } for team in ranked_teams ] return rank_list"},{"question":"You are required to write a function that processes a list of dictionaries representing students\' exam scores. Each dictionary contains the student\'s name and their scores in Mathematics, Science, and English. Your task is to compute the average score for each student and determine the grade based on the average score. The function should return a list of dictionaries with each student\'s name, average score, and grade. The function must be named `compute_grades`. **Grade Criteria:** - `A` for an average score >= 90 - `B` for an average score >= 80 and < 90 - `C` for an average score >= 70 and < 80 - `D` for an average score >= 60 and < 70 - `F` for an average score < 60 **Function Specification:** - **Function name:** `compute_grades` - **Parameters:** - `students` (list): A list of dictionaries, where each dictionary has the keys \'name\' (string), \'mathematics\', \'science\', and \'english\' (all scores are integers). - **Returns:** A list of dictionaries, each containing \'name\' (str), \'average_score\' (float), and \'grade\' (str). **Functionality:** 1. Iterate through the list of student dictionaries. 2. Calculate the average score for Mathematics, Science, and English. 3. Determine the grade based on the average score using the specified criteria. 4. Create a new dictionary with the student\'s name, average score, and grade, and add it to the result list. **Example Input:** ```python students = [ {\'name\': \'Alice\', \'mathematics\': 95, \'science\': 85, \'english\': 78}, {\'name\': \'Bob\', \'mathematics\': 60, \'science\': 55, \'english\': 58}, {\'name\': \'Charlie\', \'mathematics\': 88, \'science\': 92, \'english\': 85} ] ``` **Example Output:** ```python [ {\'name\': \'Alice\', \'average_score\': 86.0, \'grade\': \'B\'}, {\'name\': \'Bob\', \'average_score\': 57.67, \'grade\': \'F\'}, {\'name\': \'Charlie\', \'average_score\': 88.33, \'grade\': \'B\'} ] ``` **Example Usage:** ```python result = compute_grades(students) print(result) ```","solution":"def compute_grades(students): Compute the average score and grade for each student. Args: students (list): A list of dictionaries, where each dictionary has the keys \'name\', \'mathematics\', \'science\', and \'english\', corresponding to student\'s scores in each subject. Returns: list: A list of dictionaries, each containing \'name\', \'average_score\', and \'grade\'. result = [] for student in students: avg_score = (student[\'mathematics\'] + student[\'science\'] + student[\'english\']) / 3 if avg_score >= 90: grade = \'A\' elif avg_score >= 80: grade = \'B\' elif avg_score >= 70: grade = \'C\' elif avg_score >= 60: grade = \'D\' else: grade = \'F\' result.append({ \'name\': student[\'name\'], \'average_score\': round(avg_score, 2), \'grade\': grade }) return result"},{"question":"You are required to implement a Python function called `range_of_multiples` that generates a list of all numbers within a specified range that are multiples of a given integer. # Function Signature ```python def range_of_multiples(start, end, k): pass ``` # Parameters - `start` (int): The starting integer of the range (inclusive). - `end` (int): The ending integer of the range (inclusive). - `k` (int): The integer whose multiples are to be found within the given range. # Output The function should return a list of integers that are multiples of `k` within the specified range from `start` to `end` inclusive. If no multiples are found within the range, the function should return an empty list. # Example ```python print(range_of_multiples(1, 10, 2)) ``` This should return `[2, 4, 6, 8, 10]` as all these are multiples of 2 within the range 1 to 10. # Hint - Use list comprehension to generate the list of multiples. - Ensure that the range includes both the `start` and `end` values. # Requirements - You must use list comprehension for generating the list. - The function should handle both positive and negative values of `start`, `end`, and `k`. # Notes - Consider edge cases where `start` equals `end`. - Consider handling cases where `k` is zero with an appropriate response or error handling.","solution":"def range_of_multiples(start, end, k): Generates a list of all numbers within a specified range that are multiples of a given integer k. Parameters: start (int): The starting integer of the range (inclusive). end (int): The ending integer of the range (inclusive). k (int): The integer whose multiples are to be found within the given range. Returns: list: A list of integers that are multiples of k within the specified range from start to end inclusive. If no multiples are found within the range, an empty list is returned. Raises: ValueError: If k is zero. if k == 0: raise ValueError(\\"k cannot be zero.\\") return [x for x in range(start, end + 1) if x % k == 0]"},{"question":"You are developing an email filtering system that sorts emails based on their priority levels. Emails can belong to three different priority levels: 0 for low priority, 1 for medium priority, and 2 for high priority. Your task is to implement a function `sort_emails_by_priority(emails)` that takes a list of email objects and returns a list of email objects sorted by their priority in descending order (high priority first). Each email object in the list is a dictionary that contains the following keys: - \'id\' (int): A unique identifier for the email. - \'priority\' (int): The priority level of the email, which can be 0, 1, or 2. - \'timestamp\' (int): The timestamp when the email was received. If two emails have the same priority, they should be sorted by their timestamp in ascending order (oldest first). **Function Signature:** ```python def sort_emails_by_priority(emails: List[Dict[str, int]]) -> List[Dict[str, int]]: ``` **Parameters:** 1. `emails` (List[Dict[str, int]]): A list of dictionaries representing the emails. Each dictionary contains \'id\', \'priority\', and \'timestamp\' keys. **Returns:** - `List[Dict[str, int]]`: The list of email dictionaries sorted by priority in descending order and by timestamp in ascending order within the same priority level. **Constraints:** - The length of the `emails` list will be between 1 and 10^5. - The \'priority\' will be one of 0, 1, or 2. - The \'timestamp\' and \'id\' will be integers between 1 and 10^9. - Each email will have a unique \'id\'. **Example:** ```python emails = [ {\'id\': 1, \'priority\': 2, \'timestamp\': 100}, {\'id\': 2, \'priority\': 1, \'timestamp\': 110}, {\'id\': 3, \'priority\': 2, \'timestamp\': 90}, {\'id\': 4, \'priority\': 0, \'timestamp\': 120} ] sorted_emails = sort_emails_by_priority(emails) # Output should be: # [ # {\'id\': 3, \'priority\': 2, \'timestamp\': 90}, # {\'id\': 1, \'priority\': 2, \'timestamp\': 100}, # {\'id\': 2, \'priority\': 1, \'timestamp\': 110}, # {\'id\': 4, \'priority\': 0, \'timestamp\': 120} # ] ```","solution":"from typing import List, Dict def sort_emails_by_priority(emails: List[Dict[str, int]]) -> List[Dict[str, int]]: Sort the emails by priority in descending order, and by timestamp in ascending order within the same priority level. return sorted(emails, key=lambda email: (-email[\'priority\'], email[\'timestamp\']))"},{"question":"In this problem, you are required to create a function `compute_gcd(a, b)` that takes two integers, `a` and `b`, and returns their Greatest Common Divisor (GCD). The GCD is the largest positive integer that divides both `a` and `b` without leaving a remainder. Your task is to implement the function using the Euclidean algorithm, which is an efficient method for computing the GCD. The Euclidean algorithm is based on the principle that the GCD of two numbers also divides their difference. The steps are as follows: 1. If `b` is 0, then the GCD is `a`, as any number is divisible by 0. 2. Otherwise, set `a` to `b` and `b` to `a % b`, and repeat the process until `b` becomes 0. The GCD is the last non-zero value of `a`. Here is an example to illustrate the function call: ```python # Example usage def compute_gcd(a, b): while b != 0: a, b = b, a % b return a # Example test cases print(compute_gcd(48, 18)) # Output: 6 print(compute_gcd(56, 98)) # Output: 14 ``` Please implement the `compute_gcd(a, b)` function following the guidelines provided above.","solution":"def compute_gcd(a, b): Returns the Greatest Common Divisor (GCD) of two integers a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return a"},{"question":"You are tasked with writing a class named `SparseMatrix` that represents a sparse matrix and provides functionality for matrix-vector multiplication in an efficient manner. # Class Specifications: ```python class SparseMatrix: A class used to represent a sparse matrix and perform efficient matrix-vector multiplication. Attributes: rows (int): The number of rows in the matrix. cols (int): The number of columns in the matrix. data (dict): A dictionary where keys are tuples (i, j) representing indices, and values are the matrix elements. Methods: __init__(self, rows: int, cols: int) -> None: Initializes the SparseMatrix with the given number of rows and columns. add_element(self, i: int, j: int, value: float) -> None: Adds an element to the sparse matrix at position (i, j). multiply_by_vector(self, vector: List[float]) -> List[float]: Multiplies the sparse matrix by a vector and returns the result. ``` # Requirements: 1. **Efficient Storage**: Only store non-zero elements using a dictionary where keys are tuples representing indices. 2. **Add Element**: Implement the `add_element` method to add a non-zero element to the matrix. 3. **Matrix-Vector Multiplication**: Implement the `multiply_by_vector` method to efficiently multiply the sparse matrix by a vector. # Example: ```python matrix = SparseMatrix(3, 3) matrix.add_element(0, 0, 1.0) matrix.add_element(1, 2, 3.0) matrix.add_element(2, 1, 2.5) vector = [4, 5, 6] result = matrix.multiply_by_vector(vector) print(result) # Expected Output: [4.0, 18.0, 12.5] ``` # Challenge: 1. **Error Handling**: Ensure the `add_element` method checks for valid indices and value, raising an `IndexError` or `ValueError` as appropriate. 2. **Scalability**: Ensure the `multiply_by_vector` method is efficient for large matrices where most of the elements are zero. In summary, implement the `SparseMatrix` class to represent a sparse matrix with methods for adding elements and performing efficient matrix-vector multiplication, ensuring robust error handling and scalability.","solution":"class SparseMatrix: A class used to represent a sparse matrix and perform efficient matrix-vector multiplication. Attributes: rows (int): The number of rows in the matrix. cols (int): The number of columns in the matrix. data (dict): A dictionary where keys are tuples (i, j) representing indices, and values are the matrix elements. def __init__(self, rows: int, cols: int) -> None: self.rows = rows self.cols = cols self.data = {} def add_element(self, i: int, j: int, value: float) -> None: if i < 0 or i >= self.rows or j < 0 or j >= self.cols: raise IndexError(\\"Attempting to add element outside matrix bounds\\") if value == 0: if (i, j) in self.data: del self.data[(i, j)] # Remove if value is zero else: self.data[(i, j)] = value def multiply_by_vector(self, vector: list) -> list: if len(vector) != self.cols: raise ValueError(\\"Vector length must match the number of columns in the matrix\\") result = [0] * self.rows for (i, j), value in self.data.items(): result[i] += value * vector[j] return result"},{"question":"You are designing a system to manage reservations at a restaurant. Implement the function that will generate the table seating chart for the restaurant. # Function Specification **Function Name**: `allocate_table` **Parameters**: - `requests (list of tuple)`: A list of tuples where each tuple contains a reservation ID (int) and the number of guests (int). - `layout (list of list of int)`: A 2D list representing the restaurant\'s seating chart, where each integer represents the number of seats at a table. Each table can only hold one reservation and must be large enough to accommodate the number of guests. **Returns**: - `seating_chart (list of list of int)`: A 2D list with the same structure as the layout, but the integers should be replaced by the reservation ID of the corresponding reservation. If not all reservations can be accommodated, return `None`. # Requirements 1. **Order Preservation**: Reservations should be placed in the tables in the order they are given. 2. **Exact Fit**: A table can only be assigned if it exactly fits the number of guests in the reservation. 3. **Single Reservation per Table**: Each table can only receive one reservation. # Example ```python requests = [(101, 4), (102, 2), (103, 6)] layout = [ [4, 4, 2], [6, 2, 4] ] allocate_table(requests, layout) # Expected Output # [ # [101, None, 102], # [103, None, None] # ] ``` # Constraints - The number of guests will not exceed the largest table in the layout. - All numbers of guests and seating counts are positive integers. # Libraries No additional libraries are required for this function. Implement the function `allocate_table` to adhere to the above requirements.","solution":"def allocate_table(requests, layout): Allocates tables for reservations based on the requirements. :param requests: List of tuples, where each tuple contains reservation ID and the number of guests. :param layout: 2D list of integers representing the seating capacity of each table. :return: 2D list with reservation IDs in place of table capacities, or None if not all reservations can be accommodated. seating_chart = [[None for _ in row] for row in layout] for reservation_id, guests in requests: placed = False for i in range(len(layout)): for j in range(len(layout[i])): if layout[i][j] == guests: if seating_chart[i][j] is None: # Check if table is free seating_chart[i][j] = reservation_id placed = True break if placed: break if not placed: return None return seating_chart"},{"question":"In this problem, your task is to write a Python function named `detect_duplicate_files()` that takes a directory path as an argument and scans all the files within that directory (and its subdirectories) to identify duplicate files based on their content. The function should then print the paths of these duplicate files. Here are the detailed steps that your function should accomplish: 1. **Scan the Directory**: Use the `os` and `os.path` libraries to traverse the given directory and gather all file paths. Ensure you include files within subdirectories. 2. **Compute File Hashes**: For each file, compute its hash using the SHA-256 algorithm (available within the `hashlib` library). This hash will serve as a unique identifier for the contents of the file. 3. **Identify Duplicates**: Using the computed hashes, identify groups of files that share the same hash value (indicating they have identical content). 4. **Print Duplicate Files**: For each set of duplicate files, print the file paths. Ensure the output clearly indicates which files are duplicates of each other by grouping them together. **Constraints**: - Use the `os`, `os.path`, and `hashlib` libraries for directory traversal and hash computation. - Handle any potential exceptions gracefully, such as file read errors, and print an appropriate message. - Assume there could be any number of files and nested directories within the given directory. **Function Signature**: ```python def detect_duplicate_files(directory_path: str): ``` # Example Usage: ```python # Input directory_path = \'/path/to/directory\' # Function call detect_duplicate_files(directory_path) ``` **Expected Output**: The function should print groups of duplicate files. For example: ``` Duplicate files found: [\'/path/to/directory/file1.txt\', \'/path/to/directory/subdir/file1_copy.txt\'] [\'/path/to/directory/image.png\', \'/path/to/directory/backup/image_copy.png\'] ``` Note: The actual output will depend on the files within the specified directory. In summary, implement the `detect_duplicate_files()` function to help identify and manage duplicate files within a directory by comparing their content hashes.","solution":"import os import hashlib from collections import defaultdict def hash_file(file_path): Computes SHA-256 hash of the file content. hash_func = hashlib.sha256() try: with open(file_path, \'rb\') as file: for chunk in iter(lambda: file.read(4096), b\\"\\"): hash_func.update(chunk) except Exception as e: print(f\\"Error reading file {file_path}: {e}\\") return None return hash_func.hexdigest() def detect_duplicate_files(directory_path: str): Scans the given directory and prints paths of duplicate files based on their content. files_by_hash = defaultdict(list) for root, _, files in os.walk(directory_path): for file in files: file_path = os.path.join(root, file) file_hash = hash_file(file_path) if file_hash: files_by_hash[file_hash].append(file_path) duplicates_found = False for file_hashes, paths in files_by_hash.items(): if len(paths) > 1: duplicates_found = True print(f\\"Duplicate files found with hash {file_hashes}:\\") for path in paths: print(f\\" {path}\\") if not duplicates_found: print(f\\"No duplicate files found in directory: {directory_path}\\")"},{"question":"You are working on a project that requires you to read and analyze web server logs. Each log entry contains the following attributes: the hostname, the IP address, the request method, the requested URL, the response status code, and the response size. Your task is to write a function named `analyze_logs` that takes in a path to a log file and returns a summary dictionary. The summary dictionary should contain: 1. The total number of log entries. 2. A dictionary mapping each hostname to the number of requests made by each hostname. 3. A list of all unique IP addresses. 4. A dictionary with counters for each response status code (e.g., 200, 404, etc.). The log file is assumed to be in the following format, one entry per line: ``` hostname1 127.0.0.1 GET /index.html 200 512 hostname2 192.168.1.1 POST /submit 404 2096 ... ``` # Function Signature ```python def analyze_logs(log_file_path: str) -> dict: ``` # Parameters - `log_file_path` (str): The path to the log file. # Returns - `summary` (dict): A dictionary containing: - `\'total_entries\'` (int): The total number of log entries. - `\'hostname_requests\'` (dict): A dictionary mapping each hostname to the number of requests. - `\'unique_ips\'` (list): A list of all unique IP addresses. - `\'status_code_count\'` (dict): A dictionary counting occurrences of each response status code. # Example Usage ```python log_file = \\"path/to/logfile.txt\\" summary = analyze_logs(log_file) print(summary) ``` # Example Output ```python { \'total_entries\': 2, \'hostname_requests\': {\'hostname1\': 1, \'hostname2\': 1}, \'unique_ips\': [\'127.0.0.1\', \'192.168.1.1\'], \'status_code_count\': {200: 1, 404: 1} } ``` This task will help you practice reading files, parsing structured data, and aggregating results using common data structures in Python.","solution":"def analyze_logs(log_file_path: str) -> dict: summary = { \'total_entries\': 0, \'hostname_requests\': {}, \'unique_ips\': set(), \'status_code_count\': {} } with open(log_file_path, \'r\') as file: for line in file: parts = line.strip().split() if len(parts) < 6: continue # Skip malformed lines hostname, ip, method, url, status_code, size = parts # Total number of log entries summary[\'total_entries\'] += 1 # Count requests per hostname if hostname in summary[\'hostname_requests\']: summary[\'hostname_requests\'][hostname] += 1 else: summary[\'hostname_requests\'][hostname] = 1 # Collect unique IP addresses summary[\'unique_ips\'].add(ip) # Count response status codes if status_code in summary[\'status_code_count\']: summary[\'status_code_count\'][status_code] += 1 else: summary[\'status_code_count\'][status_code] = 1 # Convert unique_ips set to a list summary[\'unique_ips\'] = list(summary[\'unique_ips\']) return summary"},{"question":"You are required to implement a function `evaluate_expression(expression: str) -> int` that evaluates a simple mathematical expression provided as a string, consisting of non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\' only. The operators have the usual precedence, with multiplication and division having higher precedence than addition and subtraction. The expression will be well-formed, with no parentheses and all numbers and operations separated by a single space. - The result should be rounded down to the nearest integer if the division results in a fractional number. - Division by zero should return `None`. # Output The function should return an integer representing the result of the evaluated expression. If the expression contains a division by zero, return `None`. # Function Signature ```python def evaluate_expression(expression: str) -> int: pass ``` # Example Input ```python expression = \\"2 + 3 * 2 - 8 / 2\\" ``` Output ```python 5 ``` # Explanation 1. According to precedence rules, perform multiplication and division first: - `3 * 2` results in `6`. - `8 / 2` results in `4`. 2. The expression is now transformed to `2 + 6 - 4`. 3. Perform addition and subtraction from left to right: - `2 + 6` results in `8`. - `8 - 4` results in `4`. The evaluated result of the expression is `4`. Input ```python expression = \\"10 + 2 / 0\\" ``` Output ```python None ``` # Explanation The expression contains a division by zero, so the function returns `None`.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression involving non-negative integers and the operators +, -, *, and /. The expression is a string where numbers and operators are separated by spaces. Returns the result as an integer, rounding down for division results. Returns None if division by zero occurs. import math tokens = expression.split() stack = [] i = 0 while i < len(tokens): if tokens[i].isdigit(): if stack and stack[-1] in \'*/\': operator = stack.pop() operand = stack.pop() if tokens[i] == \'0\' and operator == \'/\': return None if operator == \'*\': stack.append(int(operand) * int(tokens[i])) if operator == \'/\': stack.append(math.floor(int(operand) / int(tokens[i]))) else: stack.append(tokens[i]) elif tokens[i] in \'+-\': stack.append(tokens[i]) elif tokens[i] in \'*/\': stack.append(tokens[i]) i += 1 result = int(stack.pop(0)) while stack: operator = stack.pop(0) operand = int(stack.pop(0)) if operator == \'+\': result += operand if operator == \'-\': result -= operand return result"},{"question":"You are required to write a function named `flatten_and_square_list` that processes a nested list of integers to return a flattened list of their squares. # Function Requirements: 1. **Function Name**: `flatten_and_square_list` 2. **Parameters**: - `nested_list` (list): A nested list of integers (can have multiple levels of nesting). 3. **Returns**: - A flattened list where each integer is squared. # Behavior: - Traverse the given nested list recursively. - For every integer found, square it and add it to the resultant flattened list. - The output list should maintain the order of elements as they appear in the nested list. # Example: Given a nested list: ```python [[1, 2, [3]], 4, [5, [6, [7]]]] ``` After processing, the resultant list should be: ```python [1, 4, 9, 16, 25, 36, 49] ``` # Constraints: - The nested list can have multiple levels of nesting. - Assume all elements in the nested list are integers or lists. # Important Notes: - Use recursion to handle the nested structure. - Aim to write clean and readable code.","solution":"def flatten_and_square_list(nested_list): Flattens a nested list and returns a list of squared integers. Parameters: nested_list (list): A nested list of integers. Returns: list: A flattened list with each integer squared. result = [] def flatten_and_square(sublist): for item in sublist: if isinstance(item, list): flatten_and_square(item) # Recur for sublist else: result.append(item * item) # Square the integer and add to result flatten_and_square(nested_list) return result"},{"question":"You are required to write a function called `range_sum` that calculates the sum of all numbers within a given range in a list. The function will take a list of integers and two additional integers representing the lower and upper bounds of the range, inclusive. Your function signature should be: ```python def range_sum(nums, lower, upper): ``` # Parameters: 1. `nums` (list): A list of integers. 2. `lower` (int): The lower bound of the range. 3. `upper` (int): The upper bound of the range. # Requirements: 1. Iterate through the list `nums` and consider only the numbers falling within the inclusive range `[lower, upper]`. 2. Calculate the sum of these numbers and return the result. # Constraints: - The list `nums` may contain up to 10^6 elements. - The values of `nums[i]`, `lower`, and `upper` range between `-10^6` and `10^6`. # Example: Given the inputs: ```python nums = [1, 5, 7, 3, 9, 2] lower = 4 upper = 7 ``` The function should return: ```python 12 ``` The numbers within the range [4, 7] are `5` and `7`, and their sum is `12`. # Additional Details: Ensure your implementation is efficient and handles edge cases, such as when no numbers fall within the range.","solution":"def range_sum(nums, lower, upper): Returns the sum of all numbers within the inclusive range [lower, upper] in the list nums. Args: nums (list): A list of integers. lower (int): The lower bound of the range. upper (int): The upper bound of the range. Returns: int: The sum of the numbers within the range. return sum(num for num in nums if lower <= num <= upper)"},{"question":"You are required to implement a function named `find_islands` that counts the number of islands in a given 2D binary grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Your task is to follow these steps: 1. Traverse the grid to identify and count distinct islands. 2. Use Depth First Search (DFS) or Breadth First Search (BFS) to explore and mark the cells constituting an island to avoid counting the same island more than once. Function signature: ```python def find_islands(grid: List[List[int]]) -> int: grid: List[List[int]] - A 2D binary grid where 0 represents water and 1 represents land. Returns: int - The number of distinct islands in the grid. ``` # Example Usage: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] assert find_islands(grid) == 3 ``` # Requirements: 1. You should appropriately manage the edge cases where the grid might be empty or all cells are water. 2. The function `find_islands` must correctly count and return the number of distinct islands in the grid. 3. You can use DFS or BFS for your traversal and marking approach, making sure the function handles large grids efficiently.","solution":"from typing import List def find_islands(grid: List[List[int]]) -> int: if not grid: return 0 rows = len(grid) cols = len(grid[0]) island_count = 0 def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0: return grid[r][c] = 0 dfs(r+1, c) dfs(r-1, c) dfs(r, c+1) dfs(r, c-1) for r in range(rows): for c in range(cols): if grid[r][c] == 1: island_count += 1 dfs(r, c) return island_count"},{"question":"Given a list of integers, find all possible unique subsets. Each subset should be sorted in ascending order, and the set of subsets should be sorted lexicographically. Write a function that returns such a list of subsets. The function should output with: List[List[int]]: A list of unique subsets sorted in lexicographic order. You should write self-contained code starting with: ```python def find_subsets(nums: List[int]) -> List[List[int]]: ```","solution":"from typing import List def find_subsets(nums: List[int]) -> List[List[int]]: Given a list of integers, find all possible unique subsets. Each subset is sorted in ascending order, and the set of subsets is sorted lexicographically. nums.sort() # Sort the input list to handle duplicates and to ensure subsets are in lexicographic order. res = [] def backtrack(start, path): res.append(path) for i in range(start, len(nums)): # If the current element is the same as the one before, skip it to avoid duplicates in the result if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return res"},{"question":"You are required to write a function called `analyze_stock_performance` that analyzes and visualizes the performance of stock prices over a given period using Pandas and Matplotlib. The function will take the following parameters: 1. `data`: A Pandas DataFrame containing at least two columns: \'Date\' and \'Closing Price\'. The \'Date\' column is the date of the observation, and the \'Closing Price\' column is the closing price of the stock for that day. 2. `start_date`: The start date of the analysis period (string in \'YYYY-MM-DD\' format). 3. `end_date`: The end date of the analysis period (string in \'YYYY-MM-DD\' format). Within the function `analyze_stock_performance`, perform the following steps: 1. Filter the DataFrame `data` to include only the rows where the \'Date\' is between `start_date` and `end_date`. 2. Set the \'Date\' column as the index of the filtered DataFrame. 3. Plot the closing prices over the specified date range using Matplotlib. 4. Calculate and plot a 7-day moving average of the closing prices on the same plot. 5. Calculate and plot a 30-day moving average of the closing prices on the same plot. 6. Add labels, title, and legend to the plot appropriately. The function signature should be: ```python def analyze_stock_performance(data, start_date, end_date): # Your code here ``` Make sure to use the APIs from `pandas` and `matplotlib.pyplot` as specified in the requirements.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_stock_performance(data, start_date, end_date): Analyze and visualize stock performance over a given period. Parameters: - data: DataFrame with columns \'Date\' and \'Closing Price\' - start_date: Start date of the analysis period (string in \'YYYY-MM-DD\' format) - end_date: End date of the analysis period (string in \'YYYY-MM-DD\' format) # Ensure \'Date\' column is in datetime format data[\'Date\'] = pd.to_datetime(data[\'Date\']) # Filter data by date range mask = (data[\'Date\'] >= start_date) & (data[\'Date\'] <= end_date) filtered_data = data.loc[mask] # Set the \'Date\' column as the index filtered_data.set_index(\'Date\', inplace=True) # Plot the closing prices plt.figure(figsize=(14, 7)) plt.plot(filtered_data[\'Closing Price\'], label=\'Closing Price\') # Calculate and plot the 7-day moving average filtered_data[\'7-Day MA\'] = filtered_data[\'Closing Price\'].rolling(window=7).mean() plt.plot(filtered_data[\'7-Day MA\'], label=\'7-Day Moving Average\') # Calculate and plot the 30-day moving average filtered_data[\'30-Day MA\'] = filtered_data[\'Closing Price\'].rolling(window=30).mean() plt.plot(filtered_data[\'30-Day MA\'], label=\'30-Day Moving Average\') # Add labels, title, and legend plt.xlabel(\'Date\') plt.ylabel(\'Closing Price\') plt.title(\'Stock Performance\') plt.legend() # Display the plot plt.show()"},{"question":"Write a function that reads sales data from a CSV file into a pandas DataFrame, calculates the total sales for each product, and outputs a bar chart with products on the x-axis and total sales on the y-axis. The function should accept the file path as a parameter, process the data to find total sales for each product, and render a bar chart with appropriate labels and title. The function should output with: matplotlib.axes._axes.Axes: A bar chart with products on the x-axis and total sales on the y-axis. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def plot_sales_data(file_path): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_sales_data(file_path): Reads sales data from a CSV file, calculates the total sales for each product, and outputs a bar chart with products on the x-axis and total sales on the y-axis. Arguments: file_path -- str: the path to the CSV file containing the sales data Returns: matplotlib.axes._axes.Axes: A bar chart with products on the x-axis and total sales on the y-axis. # Read the CSV file into a pandas DataFrame df = pd.read_csv(file_path) # Calculate the total sales for each product total_sales_per_product = df.groupby(\'Product\')[\'Sales\'].sum().reset_index() # Create the bar chart fig, ax = plt.subplots() ax.bar(total_sales_per_product[\'Product\'], total_sales_per_product[\'Sales\']) # Set the labels and title ax.set_xlabel(\'Product\') ax.set_ylabel(\'Total Sales\') ax.set_title(\'Total Sales per Product\') # Rotate x-axis labels for better readability plt.xticks(rotation=45, ha=\'right\') # Show the plot plt.tight_layout() plt.show() return ax"},{"question":"Your task is to implement a function called `generate_pangram_sentence` that generates a random sentence containing all the letters of the alphabet at least once. You will utilize random word generation and manipulation utilities from the `random` and `string` Python libraries. **Function Signature:** ```python def generate_pangram_sentence(min_length: int, max_length: int) -> str: ``` **Parameters:** - `min_length` (int): The minimum length of each random word to be generated. - `max_length` (int): The maximum length of each random word to be generated. **Returns:** - `str`: A randomly generated sentence that is a pangram (containing every letter of the English alphabet at least once). **Requirements:** 1. Implement or use an auxiliary function that can generate random words of specified lengths. 2. Use the auxiliary function to generate words iteratively and append them to the sentence until the pangram condition is satisfied. 3. Ensure the generated sentence adheres to proper grammatical structure (i.e., capitalize the first word and end with a period). **Example:** ```python print(generate_pangram_sentence(3, 7)) # might return \'A big fox quickly jumps over the lazy brown dog.\' ``` **Hints:** - Utilize Python\'s `random` library to generate random word lengths within the specified range. - Make sure to check for the presence of all alphabetic characters (case insensitive) before finalizing the sentence. - Consider edge cases where it\'s challenging to generate short pangram sentences due to letter frequency. **Note:** - You can assume access to any standard Python libraries and data structures needed to achieve the solution. - Ensure the function is robust and handles various input ranges efficiently.","solution":"import random import string def generate_random_word(min_length, max_length): length = random.randint(min_length, max_length) return \'\'.join(random.choice(string.ascii_lowercase) for _ in range(length)) def generate_pangram_sentence(min_length: int, max_length: int) -> str: all_letters_set = set(string.ascii_lowercase) current_letters_set = set() words = [] while current_letters_set != all_letters_set: word = generate_random_word(min_length, max_length) words.append(word) current_letters_set.update(word) sentence = \' \'.join(words) sentence = sentence.capitalize() + \'.\' return sentence"},{"question":"You need to write a Python function that identifies whether a string is a valid password. A valid password must satisfy the following conditions: 1. It must be at least 8 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. Function Name: `is_valid_password` Parameters: - `password` (str): The password string to be validated. Return: - `True` if the password meets all the criteria mentioned above. - `False` otherwise. # Example: ```python is_valid_password(\\"Password123\\") ``` Output: ```python True ``` # Constraints: - The input string will only contain ASCII characters. - Consider edge cases such as strings with no digits, no uppercase letters, no lowercase letters, or strings that are shorter than the required length.","solution":"def is_valid_password(password): Check if the given password is valid based on the specified criteria: - At least 8 characters long - At least one uppercase letter - At least one lowercase letter - At least one digit Parameters: password (str): The password string to be validated. Returns: bool: True if the password meets all criteria, False otherwise. if len(password) < 8: return False has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) return has_upper and has_lower and has_digit"},{"question":"You are given a task to implement a function that decodes a string encoded with a special pattern. The pattern consists of multiple segments of encoded letters, where each segment starts with a number followed by `[`, then letters, and ends with `]`. The number represents how many times the enclosed segment should be repeated. Your job is to decode the string and construct the final output. **Function Specification**: - Function Name: `decode_string` - Parameters: - `encoded` (str): A string containing the encoded pattern consisting of numbers, letters, and brackets `[]`. - Returns: - A string representing the decoded output. **Detailed Instructions**: 1. The input string will always be valid and follow the pattern described above. 2. The decode process involves reading the string and, whenever a number is encountered, repeating the subsequent segment enclosed in `[]` the specified number of times. 3. Segments can be nested, meaning that an encoded segment can contain another encoded segment inside it. Example: ```python encoded = \\"3[a2[c]]\\" result = decode_string(encoded) print(result) # Output: \\"accaccacc\\" encoded = \\"2[abc]3[cd]ef\\" result = decode_string(encoded) print(result) # Output: \\"abcabccdcdcdef\\" ``` The provided function should parse through the string, handle nested patterns correctly, and construct the final decoded string accurately.","solution":"def decode_string(encoded): stack = [] current_string = \\"\\" k = 0 for char in encoded: if char.isdigit(): k = k * 10 + int(char) elif char == \'[\': # Push the current_string and k to stack stack.append((current_string, k)) # Reset current_string and k current_string = \\"\\" k = 0 elif char == \']\': last_string, last_k = stack.pop() current_string = last_string + last_k * current_string else: current_string += char return current_string"},{"question":"You are required to write a function named `generate_multiplication_table` that creates a multiplication table for a given number `n` and size `m`. The function should return a 2D list where each element at index `[i][j]` is equal to `(i+1) * (j+1)` for `i` in range `m` and `j` in range `m`. The specifications for `generate_multiplication_table` function are: 1. The function takes two parameters: - `n` (an integer representing the number for which multiplication table is generated). - `m` (an integer representing the size of the table). 2. The function returns a 2D list representing the multiplication table. Example: ``` generate_multiplication_table(2, 3) should return: [ [1, 2, 3], [2, 4, 6], [3, 6, 9] ] generate_multiplication_table(5, 4) should return: [ [1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16] ] ``` ```python def generate_multiplication_table(n, m): Generates a multiplication table for a given number `n` and size `m` - `n`: The number for which the multiplication table is generated. - `m`: The size of the table. Returns a 2D list representation of the multiplication table. # Your implementation ```","solution":"def generate_multiplication_table(n, m): Generates a multiplication table for a given number `n` and size `m` - `n`: The number for which the multiplication table is generated. - `m`: The size of the table. Returns a 2D list representation of the multiplication table. # n is not used in the function, as per the example described. return [[(i + 1) * (j + 1) for j in range(m)] for i in range(m)]"},{"question":"You have been asked to develop a Python script that processes a series of log files located in a specific directory. Each log file contains data in the form of timestamped entries, with each entry on a new line. The goal is to read each file, filter and transform the log entries based on specified criteria, and then summarize the results in a new file. The directory containing the log files is named \\"Logs\\", which is a subdirectory of the current working directory (CWD). For each log file in this directory: 1. Open the file and read its contents line by line. 2. Skip lines that are empty or do not contain a valid timestamp. 3. Extract and transform the timestamps to a specific format (e.g., \\"YYYY-MM-DD HH:MM:SS\\"). 4. Summarize the number of log entries per day. 5. Write the summarized log information to a new file, with the filename derived from the original file\'s name but prefixed with \\"summary_\\". Implement a Python function `process_log_files()` to achieve this. Use Python\'s `datetime` module for timestamp handling and the `os` module for directory operations. Helper functions (to be implemented as part of the whole program context): - `format_timestamp(timestamp: str) -> str`: Function to transform the timestamp to the required format. - `summarize_entries(entries: list) -> dict`: Function to summarize log entries by day. - `write_summary(summary: dict, filename: str)`: Function to write the summary to a file. Here is the function signature for your task: ```python def process_log_files() -> None: # Your implementation here. pass ``` Requirements: - Use the `os.getcwd()` function to get the current working directory. - Use the `os.listdir()` function to list the files in the \\"Logs\\" directory. - Use the `datetime` module to parse and format timestamps.","solution":"import os from datetime import datetime def format_timestamp(timestamp: str) -> str: Transform the timestamp to the \'YYYY-MM-DD HH:MM:SS\' format. Assume input timestamp is in the format \'YYYY-MM-DDTHH:MM:SSZ\'. try: dt = datetime.strptime(timestamp, \'%Y-%m-%dT%H:%M:%SZ\') return dt.strftime(\'%Y-%m-%d %H:%M:%S\') except ValueError: return None def summarize_entries(entries: list) -> dict: Summarize log entries by day. summary = {} for entry in entries: date = entry.split()[0] # Extract the date part \'YYYY-MM-DD\' if date in summary: summary[date] += 1 else: summary[date] = 1 return summary def write_summary(summary: dict, filename: str): Write the summary to a file. with open(filename, \'w\') as file: for date, count in summary.items(): file.write(f\\"{date}: {count} entriesn\\") def process_log_files() -> None: cwd = os.getcwd() logs_dir = os.path.join(cwd, \'Logs\') for filename in os.listdir(logs_dir): if filename.endswith(\'.log\'): file_path = os.path.join(logs_dir, filename) with open(file_path, \'r\') as file: entries = [] for line in file: line = line.strip() if line: # Skip empty lines transformed = format_timestamp(line[:20]) if transformed: entries.append(transformed) summary = summarize_entries(entries) summary_filename = os.path.join(logs_dir, f\\"summary_{filename}\\") write_summary(summary, summary_filename)"},{"question":"You are developing a feature for a basic document editor, and you need to implement the functionality for a simple \\"Undo\\" operation. Create a class `TextEditor` that supports the following operations: 1. **Insert Text** - Method Signature: `def insert(self, position: int, text: str) -> None` - Inserts the given `text` into the current document at the specified `position`. 2. **Delete Text** - Method Signature: `def delete(self, position: int, length: int) -> None` - Deletes a substring from the current document starting from the given `position` with the specified `length`. 3. **Undo Last Operation** - Method Signature: `def undo(self) -> None` - Reverts the last insert or delete operation. The operations should only affect the internal state of the `TextEditor` instance. Use appropriate data structures to maintain the document and support undo functionality. Assume positions and lengths given to the methods are always within valid ranges. Class Definition ```python class TextEditor: def __init__(self): # your implementation here def insert(self, position: int, text: str) -> None: # your implementation here def delete(self, position: int, length: int) -> None: # your implementation here def undo(self) -> None: # your implementation here ``` # Example Usage ```python editor = TextEditor() editor.insert(0, \\"Hello World\\") editor.delete(5, 6) editor.undo() print(editor.document) # Should output: \\"Hello World\\" ```","solution":"class TextEditor: def __init__(self): self.document = \\"\\" self.history = [] def insert(self, position: int, text: str) -> None: # Store the current state for undo operation self.history.append((self.document, \'insert\', position, text)) self.document = self.document[:position] + text + self.document[position:] def delete(self, position: int, length: int) -> None: # Store the current state for undo operation deleted_text = self.document[position:position + length] self.history.append((self.document, \'delete\', position, deleted_text)) self.document = self.document[:position] + self.document[position + length:] def undo(self) -> None: if self.history: self.document, operation, position, text = self.history.pop()"},{"question":"Analyze a text file and compute the word frequency distribution of the words appearing in it. The function should read the contents of the text file, compute how often each word appears, and then write the results to an output file, where each line contains a word followed by its frequency. - Ignore case (e.g., \\"Hello\\" and \\"hello\\" should be considered the same word). - Ignore punctuation and special characters. - Treat words as sequences of alphabetic characters. - Output should be sorted by words in alphabetical order. The function signature should be: ```python def compute_word_frequencies(input_file: str, output_file: str): ```","solution":"import re from collections import Counter def compute_word_frequencies(input_file: str, output_file: str): Reads the contents of input_file, computes the word frequencies, and writes the results to output_file. # Read the content of the input file with open(input_file, \'r\') as file: text = file.read() # Remove punctuation and special characters, and convert to lower case words = re.findall(r\'b[a-z]+b\', text.lower()) # Compute the word frequencies word_counts = Counter(words) # Write the word frequencies to the output file, sorted by word with open(output_file, \'w\') as file: for word, count in sorted(word_counts.items()): file.write(f\\"{word} {count}n\\")"},{"question":"You have been provided with a class `Inventory` that is used to manage a collection of items in a store. This class has a dictionary attribute that holds the items and their respective quantities. For practical understanding and educational purposes, you are required to implement two methods within this class: `add_item` and `remove_item`. **Class Name:** `Inventory` **Objective:** Implement the following methods in the `Inventory` class: 1. `add_item(item_name, quantity)`: Adds the given quantity of the item to the inventory. If the item already exists, increment its quantity by the given amount. If the item does not exist, add it to the inventory with the given quantity. 2. `remove_item(item_name, quantity)`: Reduces the quantity of the item in the inventory by the given amount. If the quantity to remove is greater than the available quantity, remove all the items. If the item does not exist, print an appropriate message indicating so. **Inputs:** - `item_name` (str): The name of the item. - `quantity` (int): The quantity of the item to be added or removed. **Details:** 1. `add_item`: Updates the inventory with the given item and quantity. 2. `remove_item`: Updates the inventory by removing the specified quantity or as much as is available if the quantity to remove exceeds the available quantity. If the item is not found, print \\"Item not found in inventory.\\" **Examples:** ```python inventory = Inventory() inventory.add_item(\\"apple\\", 10) inventory.add_item(\\"banana\\", 5) inventory.add_item(\\"apple\\", 5) # \\"apple\\" should now have 15 inventory.remove_item(\\"banana\\", 2) # \\"banana\\" should now have 3 inventory.remove_item(\\"orange\\", 1) # Should print: Item not found in inventory. inventory.remove_item(\\"apple\\", 20) # \\"apple\\" should be removed from inventory as quantity to remove is greater than available ``` Expected Inventory State After Operations: ``` { \\"apple\\": 0, \\"banana\\": 3 } ``` Your task is to write the implementation of the `Inventory` class with the specified methods. This problem will help you understand basic object-oriented programming concepts, handling dictionary operations, and managing inventory-like systems.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_name, quantity): if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def remove_item(self, item_name, quantity): if item_name in self.items: if self.items[item_name] <= quantity: self.items[item_name] = 0 # Remove item completely else: self.items[item_name] -= quantity else: print(\\"Item not found in inventory.\\")"},{"question":"You are tasked with creating a function `process_game_scores(input_scores: str, output_file: str) -> None` that processes a given string of game scores and provides various options for analyzing and saving the results. The user should be able to choose from a menu to print the statistics, save the results to a JSON file, re-enter the scores for another analysis, or exit the program. The function should include error handling for user inputs and ensure the options are valid. Here are the steps for what the function needs to do: 1. **Process Scores:** - Parse the input string to extract game scores formatted as \\"Player_Name:Score\\" pairs. - Calculate the following statistics: - Total number of scores. - Highest score and the corresponding player. - Average score. 2. **Interactive Menu:** - Allow the user to choose one of the following options: - **Print**: Print the statistics and scores. - **Save as JSON (.json)**: Save the statistics in a JSON file. - **Re-enter Scores**: Allow the user to input new scores for another round of analysis. - **Quit**: Exit the program. 3. **Error Handling:** - Ensure the user inputs valid options (\'p\', \'j\', \'r\', \'q\') and prompt them again if they do not. **Function Signature:** ```python def process_game_scores(input_scores: str, output_file: str) -> None: ``` **Parameters:** - `input_scores` (str): The input scores to analyze, where each score is formatted as \\"Player_Name:Score\\". - `output_file` (str): The file path where the JSON result will be saved if the user opts for the JSON output. **Example Usage:** ```python input_scores = \\"Alice:30,Bob:45,Charlie:25,Alice:40,Bob:20\\" output_file = \\"game_scores.json\\" process_game_scores(input_scores, output_file) ``` Considerations: - Use the `json` module to handle JSON file operations. - Perform necessary input validations to ensure scores are well-formed before processing.","solution":"import json def process_game_scores(input_scores: str, output_file: str) -> None: def calculate_statistics(scores): total_scores = len(scores) if total_scores == 0: return { \'total_scores\': 0, \'highest_score\': None, \'highest_scorer\': None, \'average_score\': 0 } highest_score = max(scores, key=lambda x: x[1]) average_score = sum(score[1] for score in scores) / total_scores return { \'total_scores\': total_scores, \'highest_score\': highest_score[1], \'highest_scorer\': highest_score[0], \'average_score\': average_score } def parse_scores(input_scores): scores = [] for item in input_scores.split(\',\'): try: player, score = item.split(\':\') scores.append((player, int(score))) except ValueError: print(f\\"Invalid score entry: \'{item}\'. Skipping.\\") return scores def print_statistics(stats, scores): print(f\\"Total scores: {stats[\'total_scores\']}\\") print(f\\"Highest score: {stats[\'highest_score\']} by {stats[\'highest_scorer\']}\\") print(f\\"Average score: {stats[\'average_score\']:.2f}\\") print(\\"Scores:\\") for player, score in scores: print(f\\"{player}: {score}\\") def save_statistics(stats, output_file): with open(output_file, \'w\') as file: json.dump(stats, file) print(f\\"Statistics saved to {output_file}\\") scores = parse_scores(input_scores) stats = calculate_statistics(scores) while True: print(\\"nChoose an option:\\") print(\\"p - Print scores and statistics\\") print(\\"j - Save scores and statistics as JSON\\") print(\\"r - Re-enter new scores\\") print(\\"q - Quit\\") choice = input(\\"Enter your choice: \\").lower() if choice == \'p\': print_statistics(stats, scores) elif choice == \'j\': save_statistics(stats, output_file) elif choice == \'r\': input_scores = input(\\"Enter new scores (format: Player_Name:Score,...): \\") scores = parse_scores(input_scores) stats = calculate_statistics(scores) elif choice == \'q\': break else: print(\\"Invalid choice. Please enter \'p\', \'j\', \'r\', or \'q\'.\\")"},{"question":"**Context:** N-Queens is a classical problem in computer science and optimization problems. The task is to place N chess queens on an N×N chessboard such that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. This problem is often solved using backtracking algorithms. **Problem:** Write a function named `solve_n_queens` that takes an integer `n` as input and returns a list of all distinct solutions to the N-Queens problem. Each solution should be represented as a list of `n` strings, where each string is of length `n` with \'Q\' representing a queen and \'.\' representing an empty space. There are many possible solutions, and you only need to return one set of correct placements. **Function Signature:** ```python def solve_n_queens(n: int) -> List[List[str]]: # Implement the backtracking algorithm to solve the N-Queens problem ``` **Input:** - `n` : An integer representing the size of the chessboard (1 ≤ n ≤ 9). **Output:** - A list of lists of strings, each containing one valid arrangement of n Queens on an n x n board. **Example:** ```python result = solve_n_queens(4) for solution in result: for row in solution: print(row) print() ``` Expected Output: ``` .Q.. ...Q Q... ..Q. ..Q. Q... ...Q .Q.. ``` **Explanation:** In the above example, there are two valid ways to place 4 Queens on a 4×4 board. The first solution places the queens in different columns and non-threatening positions with respect to diagonals, and similarly, the second solution also follows the same constraints. **Notes:** - Although the function may find multiple solutions for a given size `n`, it should return all valid solutions without repeating any. - If there are no valid solutions (for example, `n` = 2 or `n` = 3), the function should return an empty list. Good understanding of recursion, backtracking, and basic data structures in Python will help you implement this solution efficiently. To facilitate this, you can create helper functions to check if a queen can be placed safely in a given position and to recursively attempt placing queens on the board.","solution":"from typing import List def solve_n_queens(n: int) -> List[List[str]]: def backtrack(row: int): if row == n: result.append([\'\'.join(board[i]) for i in range(n)]) return for col in range(n): if not (cols[col] or hills[row - col] or dales[row + col]): board[row][col] = \'Q\' cols[col] = hills[row - col] = dales[row + col] = True backtrack(row + 1) board[row][col] = \'.\' cols[col] = hills[row - col] = dales[row + col] = False result = [] board = [[\'.\' for _ in range(n)] for _ in range(n)] cols = [False] * n hills = [False] * (2 * n - 1) dales = [False] * (2 * n - 1) backtrack(0) return result"},{"question":"You are tasked with writing a function `process_sensor_data(connection)`, which reads sensor data packets from a connection, processes the data, and logs it to a file. The connection provides streaming data where each packet starts with a 16-bit unsigned integer indicating the sensor identifier, followed by 64-bit floating-point values representing the sensor readings. Each packet terminates when the sensor identifier is zero. The function should: 1. Read the sensor identifier and the associated sensor readings. 2. If the sensor identifier is zero, terminate the loop. 3. Log the sensor readings to a file named `sensor_log.txt` in a structured format: \\"Sensor ID: {id}, Readings: {readings}\\". 4. Ensure that the log file appends new entries if it already exists. **Function Signature:** ```python def process_sensor_data(connection) -> None: pass ``` **Requirements:** 1. Read the sensor identifier as a 16-bit unsigned integer. 2. If the sensor identifier is zero, exit the loop. 3. Read the 64-bit floating-point sensor readings associated with the identifier. 4. Log the sensor data to `sensor_log.txt` in the specified format. 5. Append to the log file if it exists; otherwise, create a new log file. You might need the following libraries: - `socket` for network communication. - `struct` for unpacking binary data. Example usage (do not include this in your implementation): ```python connection = some_function_to_get_connection() process_sensor_data(connection) ```","solution":"import struct import socket def process_sensor_data(connection): with open(\'sensor_log.txt\', \'a\') as log_file: while True: # Read the sensor identifier (16-bit unsigned integer) sensor_id_data = connection.recv(2) if not sensor_id_data: break sensor_id = struct.unpack(\'!H\', sensor_id_data)[0] if sensor_id == 0: break # Read the sensor readings (expecting 64-bit floating-point values) readings_data = connection.recv(8) if not readings_data: break reading = struct.unpack(\'!d\', readings_data)[0] # Log the sensor data log_file.write(f\\"Sensor ID: {sensor_id}, Readings: {reading}n\\")"},{"question":"Create a function `generate_spiral_matrix` that generates a square matrix (2D list) filled with elements from 1 to n^2 in a spiral order, given an integer `n`. The spiral order should start from 1 in the top-left corner and move to the right in a clockwise direction. The function should have the following parameter: - `n`: An integer representing the dimensions of the matrix (n x n). The function should return the 2D list representing the spiral matrix. **Instructions**: 1. Implement the `generate_spiral_matrix` function as described. 2. Ensure that the matrix is filled such that it starts at the top-left corner and proceeds in a clockwise spiral. 3. Return the generated 2D list matrix.","solution":"def generate_spiral_matrix(n): Generates a square matrix filled with elements from 1 to n^2 in a spiral order. Args: n (int): Dimensions of the matrix (n x n). Returns: list of list of int: The generated spiral matrix. if n <= 0: return [] # Initialize an n x n matrix with None values matrix = [[None] * n for _ in range(n)] num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: # Traverse from left to right for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 # Traverse from top to bottom for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 # Traverse from right to left for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 # Traverse from bottom to top for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"You are given a list of binary strings. Each string in the list can either represent a binary number or a special marker \'ERROR\'. Your task is to implement a function `process_binaries(binary_list)` that processes this list to provide statistics about the binary numbers and error markers. The function should return a dictionary containing: - The count of valid binary strings. - The count of \'ERROR\' markers. - The maximum binary number in decimal form among the valid binaries. - The sum of all valid binary numbers in decimal form. Function Specification: ```python def process_binaries(binary_list): Processes the list of binary strings to provide statistics on valid binaries and errors. Parameters: binary_list (list): A list of binary strings or \'ERROR\' markers. Returns: dict: A dictionary with the count of valid binaries, count of errors, maximum and sum of valid binaries in decimal. ``` Example: ```python binary_list = [ \\"1101\\", # 13 in decimal \\"1010\\", # 10 in decimal \\"ERROR\\", \\"111\\", # 7 in decimal \\"10001\\", # 17 in decimal \\"ERROR\\" ] print(process_binaries(binary_list)) # Output: {\'valid_count\': 4, \'error_count\': 2, \'max_value\': 17, \'sum_value\': 47} ```","solution":"def process_binaries(binary_list): Processes the list of binary strings to provide statistics on valid binaries and errors. Parameters: binary_list (list): A list of binary strings or \'ERROR\' markers. Returns: dict: A dictionary with the count of valid binaries, count of errors, maximum and sum of valid binaries in decimal. valid_count = 0 error_count = 0 max_value = 0 sum_value = 0 for item in binary_list: if item == \'ERROR\': error_count += 1 else: decimal_value = int(item, 2) valid_count += 1 sum_value += decimal_value if decimal_value > max_value: max_value = decimal_value return { \'valid_count\': valid_count, \'error_count\': error_count, \'max_value\': max_value, \'sum_value\': sum_value }"},{"question":"Sort a list of dictionaries by a specified key. The function should: 1. Ensure the input is a list of dictionaries. 2. Accept a parameter for the key by which the list should be sorted. 3. The function should return the list sorted in ascending order based on the specified key. You should write self-contained code starting with: ``` def task_func(list_of_dicts, key): ```","solution":"def task_func(list_of_dicts, key): Sorts a list of dictionaries by a specified key in ascending order. Parameters: list_of_dicts (list): List of dictionaries to be sorted. key (str): The key to sort the list of dictionaries by. Returns: list: The sorted list of dictionaries. Raises: ValueError: If the input is not a list of dictionaries or key is not present in dictionaries. if not all(isinstance(d, dict) for d in list_of_dicts): raise ValueError(\\"Input must be a list of dictionaries\\") if any(key not in d for d in list_of_dicts): raise ValueError(f\\"Not all dictionaries contain the key \'{key}\'\\") return sorted(list_of_dicts, key=lambda x: x[key])"},{"question":"You need to create a Python function called `most_frequent_words` that takes two parameters: `file_path` and `n`. This function should read the text from the given file, process it, and return the `n` most frequent words along with their frequency counts in descending order. Your task is to: 1. Ensure that the program handles file reading (`open` and `read` methods). 2. Use the `collections.Counter` to count the frequency of each word. 3. Clean and normalize the text by converting it to lower case and removing any punctuation before processing. 4. Return the `n` most frequent words and their respective counts in a list of tuples. **Function Signature:** ```python def most_frequent_words(file_path: str, n: int) -> List[Tuple[str, int]]: ``` **Inputs:** 1. `file_path` (str): The path to the text file that needs to be processed. 2. `n` (int): The number of most frequent words to return. **Outputs:** A list of tuples, where each tuple contains a word and its frequency count. The list should be sorted by frequency in descending order. Below is an example of code invocation: ```python most_frequent_words(\'/path/to/textfile.txt\', 5) ``` This should return a list of the 5 most frequent words in the text file along with their counts in descending order. For example: ```python [(\'the\', 50), (\'and\', 30), (\'to\', 25), (\'of\', 20), (\'a\', 18)] ```","solution":"import re from collections import Counter from typing import List, Tuple def most_frequent_words(file_path: str, n: int) -> List[Tuple[str, int]]: Reads the text from the given file, processes it to find the most frequent words, and returns the n most frequent words along with their frequency counts in descending order. with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read().lower() # Read and convert text to lower case # Remove punctuation and splitting into words words = re.findall(r\'bw+b\', text) # Use Counter to get word frequencies word_counts = Counter(words) # Get the n most common words most_common_words = word_counts.most_common(n) return most_common_words"},{"question":"Write a function `merge_dictionaries(dict1, dict2)` that merges two dictionaries into a single dictionary. In the case where the same key exists in both dictionaries, the value from `dict2` should overwrite the value from `dict1`. The merging should not modify the original dictionaries but should return a new dictionary containing the merged key-value pairs. Inside the function: 1. Log a suitable message indicating the beginning of the dictionary merge process. 2. Create a new dictionary that combines `dict1` and `dict2`, with values from `dict2` superseding those from `dict1` where there are duplicate keys. 3. Log a message indicating the completed merging process and the resultant dictionary. **Input:** - `dict1` - a dictionary containing key-value pairs. - `dict2` - another dictionary containing key-value pairs. **Output:** - The function returns a new dictionary that combines the key-value pairs from `dict1` and `dict2`, with `dict2`\'s values taking precedence in cases of key collisions. **Requirements:** - The original dictionaries `dict1` and `dict2` should not be modified. - All keys and values in the dictionaries should be immutable types. **Example:** ```python result = merge_dictionaries({\'a\': 1, \'b\': 2, \'c\': 3}, {\'b\': 4, \'d\': 5}) print(result) ``` The output of the above code should be: ``` {\'a\': 1, \'b\': 4, \'c\': 3, \'d\': 5} ```","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries into a single dictionary, with values from dict2 overwriting values from dict1 in case of key collisions. The merging does not modify the original dictionaries. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary combining dict1 and dict2. print(\\"Starting the dictionary merge process...\\") # Create a new dictionary that contains all items from both dict1 and dict2, with dict2 overwriting dict1 if there are conflicts merged_dict = {**dict1, **dict2} print(f\\"Merging complete. Resultant dictionary: {merged_dict}\\") return merged_dict"},{"question":"You are given a matrix of integers and a threshold value. The goal is to implement a function that sets all elements in the matrix greater than the threshold to zero. This function is designed to test your understanding and usage of `numpy` functions such as boolean indexing. Write a function `set_threshold` which accomplishes this task using efficient numpy operations. **Function Signature:** ```python def set_threshold(matrix, threshold): Modify the input matrix by setting all elements greater than the threshold to zero. Inputs: - matrix: A numpy array of arbitrary shape containing integers. - threshold: An integer threshold value. Returns: - A numpy array of the same shape as the input matrix, with elements greater than threshold set to zero. ``` **Example:** ```python matrix = np.array([[1, 3, 5], [7, 9, 2], [4, 6, 8]]) threshold = 5 set_threshold(matrix, threshold) # Output: array([[1, 3, 5], [0, 0, 2], [4, 0, 0]]) ``` **Hints:** - Use boolean indexing to identify elements greater than the threshold. - Ensure the function returns a numpy array of the same shape as the input, with values modified accordingly.","solution":"import numpy as np def set_threshold(matrix, threshold): Modify the input matrix by setting all elements greater than the threshold to zero. Inputs: - matrix: A numpy array of arbitrary shape containing integers. - threshold: An integer threshold value. Returns: - A numpy array of the same shape as the input matrix, with elements greater than threshold set to zero. matrix = np.copy(matrix) # To avoid modifying the input matrix in-place matrix[matrix > threshold] = 0 return matrix"},{"question":"Given a string `s`, write a function that returns the length of the longest substring of `s` which does not contain any repeating characters. The function should be efficiently implemented using a sliding window technique. You will be required to utilize a dictionary to keep track of the characters and their most recent index positions as you slide through the string. **Function Signature:** ```python def length_of_longest_substring(s: str) -> int: ... ``` **Input Parameters:** - `s`: A string consisting of English letters, digits, symbols, and spaces. **Output:** - The function should return an integer representing the length of the longest substring without repeating characters. **Example:** ```python def length_of_longest_substring(s: str) -> int: n = len(s) if n == 0: return 0 char_index_map = {} left = 0 max_length = 0 for right in range(n): if s[right] in char_index_map: left = max(left, char_index_map[s[right]] + 1) char_index_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length # Example usage s = \\"abcabcbb\\" print(length_of_longest_substring(s)) # Output: 3, the answer is \\"abc\\" ``` You need to implement the `length_of_longest_substring` function so that the above example produces the correct output.","solution":"def length_of_longest_substring(s: str) -> int: n = len(s) if n == 0: return 0 char_index_map = {} left = 0 max_length = 0 for right in range(n): if s[right] in char_index_map: left = max(left, char_index_map[s[right]] + 1) char_index_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Suppose you\'re given a list of integers where every integer appears three times except for one integer which appears exactly once. Write a function to find and return that single integer. The function should have a signature: ```python def find_unique_number(arr: list) -> int: Finds the unique number in a list where every other number appears exactly three times. :param arr: List of integers where one integer appears once and all others appear three times. :return: The integer that appears only once. ``` # Input - `arr`: A list of integers. # Output - The single integer that appears only once in the list. # Constraints - You must develop an algorithm with a time complexity of O(n) and a space complexity of O(1). # Example ```python arr = [2, 2, 3, 2] print(find_unique_number(arr)) ``` Output: ``` 3 ``` In the above example, the number `3` is the only number that appears exactly once, while `2` appears three times. Your implementation should ensure: - The solution is efficient in terms of both time and space complexity. - The function correctly identifies the unique number regardless of the position or value of the integer.","solution":"def find_unique_number(arr: list) -> int: Finds the unique number in a list where every other number appears exactly three times. :param arr: List of integers where one integer appears once and all others appear three times. :return: The integer that appears only once. ones, twos = 0, 0 for num in arr: # First appearance: Add to ones if not in twos ones = (ones ^ num) & ~twos # Second appearance: Add to twos if not in ones twos = (twos ^ num) & ~ones return ones"},{"question":"Create a function that takes a list of strings and returns a dictionary where the keys are the unique characters found in all the strings, and the values are the number of times each character appears across all the strings. The function should ignore case (i.e., treat \'A\' and \'a\' as the same character). Non-alphabetic characters should also be counted. If the input list is empty, the function should return an empty dictionary. The function should output with: dict: A dictionary with unique characters as keys and their corresponding frequencies as values. You should write self-contained code starting with: ``` def character_frequency(string_list): ```","solution":"def character_frequency(string_list): Returns a dictionary where the keys are the unique characters found in all the strings, and the values are the number of times each character appears across all the strings. This function treats characters case-insensitively. frequency_dict = {} for string in string_list: for char in string.lower(): if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a function that generates a sequence of \'n\' random integers between a specified range using a uniform distribution. The function should also compute the mean, median, and standard deviation of the generated sequence. Plot a histogram of the sequence to visualize its distribution with appropriate labels for the axes. Ensure the function returns: tuple: A tuple containing: np.array: The generated sequence of random integers. float: The calculated mean of the sequence. float: The calculated median of the sequence. float: The calculated standard deviation of the sequence. matplotlib.axes.Axes: The plot of the histogram of the sequence with labeled axes. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def generate_random_sequence(n, low, high): ```","solution":"import numpy as np import matplotlib.pyplot as plt def generate_random_sequence(n, low, high): Generates a sequence of \'n\' random integers between \'low\' and \'high\' using a uniform distribution. Computes the mean, median, and standard deviation of the sequence, and plots a histogram. Parameters: n (int): Number of random integers to generate. low (int): The lower bound of the range (inclusive). high (int): The upper bound of the range (inclusive). Returns: tuple: (sequence, mean, median, std_dev, ax) sequence (np.array): The generated sequence of random integers. mean (float): The calculated mean of the sequence. median (float): The calculated median of the sequence. std_dev (float): The calculated standard deviation of the sequence. ax (matplotlib.axes.Axes): The plot of the histogram of the sequence with labeled axes. # Generate the sequence of random integers sequence = np.random.randint(low, high + 1, size=n) # Calculate statistics mean = np.mean(sequence) median = np.median(sequence) std_dev = np.std(sequence) # Plot histogram fig, ax = plt.subplots() ax.hist(sequence, bins=20, alpha=0.75, edgecolor=\'black\') ax.set_xlabel(\'Value\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Histogram of Random Sequence\') return sequence, mean, median, std_dev, ax"},{"question":"You are given data regarding bike rentals in a city over several years. The data comes in two CSV files: `rental_data.csv` and `weather_data.csv`. Your task is to implement a function `weather_impact_on_rentals` that calculates the average number of rentals under different weather conditions and returns a dictionary with this information. The function `weather_impact_on_rentals` should implement the following steps: 1. Read the `rental_data.csv` file which contains the columns: `date`, `rentals`. 2. Read the `weather_data.csv` file which contains the columns: `date`, `temperature`, `weather_type`. 3. Merge the two dataframes on the `date` column. 4. Calculate the average number of rentals for each distinct `weather_type`. 5. Return a dictionary where the keys are the `weather_type` and the values are the average number of rentals for that `weather_type`. Example: Assuming `rental_data.csv` contains: ``` date,rentals 2023-01-01,120 2023-01-02,80 2023-01-03,95 ``` And `weather_data.csv` contains: ``` date,temperature,weather_type 2023-01-01,5,sunny 2023-01-02,3,rainy 2023-01-03,4,sunny ``` The function should return: ```python { \\"sunny\\": 107.5, \\"rainy\\": 80.0 } ``` **Function Signature:** ```python def weather_impact_on_rentals(rental_data_file: str, weather_data_file: str) -> Dict[str, float]: ```","solution":"import pandas as pd from typing import Dict def weather_impact_on_rentals(rental_data_file: str, weather_data_file: str) -> Dict[str, float]: # Read the CSV files into DataFrames rental_data = pd.read_csv(rental_data_file) weather_data = pd.read_csv(weather_data_file) # Merge the DataFrames on the \'date\' column merged_data = pd.merge(rental_data, weather_data, on=\'date\') # Calculate the average number of rentals for each distinct weather_type average_rentals_by_weather = (merged_data.groupby(\'weather_type\')[\'rentals\'] .mean() .to_dict()) return average_rentals_by_weather"},{"question":"You have experience with Python dictionaries and want to enhance your skills by implementing a function to manipulate a dictionary of student scores. Implement the function `adjust_scores(students, threshold, bonus_score)` that modifies the given dictionary of student scores based on a threshold. If a student\'s score is below the threshold, increase their score by the bonus amount. Function Parameters: - `students`: A dictionary where each key is a student\'s name (string) and the value is their score (integer). - `threshold`: An integer representing the score threshold. - `bonus_score`: An integer representing the score to be added for students scoring below the threshold. The function should iterate through the dictionary, check each student\'s score, and if the score is below the threshold, add the bonus score to it. For example, calling `adjust_scores({\\"Alice\\": 85, \\"Bob\\": 72, \\"Charlie\\": 66, \\"Diana\\": 92}, 75, 10)` should modify the dictionary to `{\\"Alice\\": 85, \\"Bob\\": 82, \\"Charlie\\": 76, \\"Diana\\": 92}`.","solution":"def adjust_scores(students, threshold, bonus_score): Modifies the input dictionary of student scores by adding a bonus score for students whose score is below the threshold. Parameters: - students: dict, where keys are student names (str) and values are their scores (int). - threshold: int, the score threshold. - bonus_score: int, the bonus score to be added if a student\'s score is below the threshold. Returns: - None, the function modifies the input dictionary in place. for student, score in students.items(): if score < threshold: students[student] = score + bonus_score"},{"question":"You are required to implement a Python function that reads the contents of two CSV files containing information about various products and their sales. The function will produce a consolidated report showing the total sales for each product category. Along with the report, the function should handle any missing or inconsistent data by providing clear logging messages. **Function Signature**: ```python def generate_sales_report(products_file, sales_file): Generate a sales report summarizing the total sales per product category. Parameters: - products_file (str): Path to the CSV file containing product details. - sales_file (str): Path to the CSV file containing sales records. Returns: dict: A dictionary with product categories as keys and total sales as values. pass ``` **Detailed Instructions**: 1. The products CSV file contains the following columns: - \'product_id\': Unique identifier for each product. - \'category\': The category the product belongs to. 2. The sales CSV file contains the following columns: - \'sale_id\': Unique identifier for each sale. - \'product_id\': Identifier for the product sold. - \'sale_amount\': Monetary amount of the sale. 3. Load the data from both CSV files into pandas DataFrames. 4. Merge the DataFrames on the \'product_id\' column to associate sales with their respective product categories. 5. Calculate the total sales for each category and store the results in a dictionary. Use the category names as keys and the total sales amounts as values. 6. Handle missing or inconsistent data (e.g., null values, missing product_ids) by logging appropriate messages. Use the `logging` module for logging. 7. Return the dictionary containing the total sales per category. Example: ```python Products CSV: product_id,category 1,Electronics 2,Furniture 3,Clothing Sales CSV: sale_id,product_id,sale_amount 100,1,200.00 101,2,150.00 102,3,100.00 103,1,250.00 Output: {\'Electronics\': 450.00, \'Furniture\': 150.00, \'Clothing\': 100.00} ``` Your task is to complete the function `generate_sales_report` as described.","solution":"import pandas as pd import logging def generate_sales_report(products_file, sales_file): Generate a sales report summarizing the total sales per product category. Parameters: - products_file (str): Path to the CSV file containing product details. - sales_file (str): Path to the CSV file containing sales records. Returns: dict: A dictionary with product categories as keys and total sales as values. # Setting up the logger logging.basicConfig(level=logging.INFO) logger = logging.getLogger(__name__) try: # Loading data products_df = pd.read_csv(products_file) sales_df = pd.read_csv(sales_file) # Check for missing values if products_df.isnull().values.any(): logger.warning(\\"Products data contains missing values.\\") if sales_df.isnull().values.any(): logger.warning(\\"Sales data contains missing values.\\") # Merge data on product_id merged_df = pd.merge(sales_df, products_df, how=\'left\', on=\'product_id\') if merged_df[\'category\'].isnull().values.any(): logger.warning(\\"There are sales with missing product category information.\\") # Calculate total sales per category sales_report = merged_df.groupby(\'category\')[\'sale_amount\'].sum().to_dict() return sales_report except Exception as e: logger.error(f\\"An error occurred: {e}\\") return {}"},{"question":"In this problem, you are required to write a function named `calculate_with_timeout()` that utilizes multithreading and a timer to perform a calculation that must complete within a specified time limit. The function should spawn a separate worker thread to execute a given `task()` function. If the `task()` function does not complete within the specified timeout period, the `calculate_with_timeout()` function should print a timeout message. The `task()` function will simply increment a counter from 0 to a given maximum value (which could be large enough to simulate a long-running task). The `calculate_with_timeout()` should accept two arguments: `max_count` which will be passed to `task()`, and `timeout` which specifies the maximum duration in seconds allowed for the task to complete. To accomplish this, you must use the following specific library functions: 1. `threading.Thread`: This will be used to create a new thread for running the `task()` function. 2. `threading.Timer`: This will be used to implement the timeout. 3. `threading.Event`: This will be used for thread synchronization. Below is the skeleton of the `calculate_with_timeout()` and `task()` functions. Your task is to implement them correctly using the appropriate libraries. ```python import threading def task(max_count, finished_event): for i in range(max_count): # Simulate a time-consuming task pass finished_event.set() def calculate_with_timeout(max_count, timeout): finished_event = threading.Event() worker_thread = threading.Thread(target=task, args=(max_count, finished_event)) worker_thread.start() # Timer to interrupt the worker thread if it exceeds the timeout timer = threading.Timer(timeout, lambda: finished_event.set()) timer.start() worker_thread.join(timeout) if finished_event.is_set(): print(\\"Task completed.\\") else: print(\\"Timeout! Task did not complete within the specified time.\\") # Cancel the timer if the task completed in time timer.cancel() ``` **Example Output:** When you execute `calculate_with_timeout(1000000000, 1)`, the output should be similar to one of the following, depending on whether the `task()` completes within the timeout period or not: ``` Task completed. ``` or ``` Timeout! Task did not complete within the specified time. ```","solution":"import threading def task(max_count, finished_event): for i in range(max_count): # Simulate a time-consuming task by incrementing a counter. if finished_event.is_set(): break finished_event.set() def calculate_with_timeout(max_count, timeout): finished_event = threading.Event() worker_thread = threading.Thread(target=task, args=(max_count, finished_event)) worker_thread.start() # Timer to interrupt the worker thread if it exceeds the timeout timer = threading.Timer(timeout, lambda: finished_event.set()) timer.start() worker_thread.join(timeout) if finished_event.is_set(): print(\\"Task completed.\\") else: print(\\"Timeout! Task did not complete within the specified time.\\") # Cancel the timer if the task completed in time timer.cancel()"},{"question":"You need to create a function called `unique_elements` which takes a list of lists as input and returns a single list containing all the unique elements, preserving their order of appearance in the original nested lists. Your goal is to: 1. Traverse the input list of lists in order. 2. Extract elements from each list, keeping track of the unique elements that have not yet been encountered. 3. Return a list of these unique elements in the order they first appeared. Requirements: - The function should be named `unique_elements`. - The function should avoid using any external libraries for this task. Example: ```python input_data = [[1, 2, 3], [2, 4, 6], [3, 4, 5]] ``` For this `input_data`, the function should return: ```python [1, 2, 3, 4, 6, 5] ``` Here is the function signature: ```python def unique_elements(list_of_lists): pass ```","solution":"def unique_elements(list_of_lists): Takes a list of lists and returns a list of unique elements in the order they first appeared in the nested lists. :param list_of_lists: List of lists with elements :return: List of unique elements seen = set() result = [] for sublist in list_of_lists: for item in sublist: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"You are tasked with writing a function that, given a list of words, produces a list of all possible unique anagrams from the input set. An anagram is a reordering of the letters of a word to form another word. If multiple words produce the same anagram, they should be treated as the same anagram (i.e., no duplicates in the result). # Task: 1. Implement a function named `find_unique_anagrams(words)` where `words` is a list of strings. 2. For each word in the input list, generate all possible anagrams. 3. Return a list of unique anagrams, sorted in lexicographical order. # Constraints: - All words are lowercase and contain only alphabetic characters. - The maximum number of words in the input list is 100. - The maximum length of each word is 10 characters. # Hints: - Utilize the `itertools.permutations` function to generate permutations of the words. - Convert permutations to strings and use a set to track unique anagrams efficiently. - Run the function on smaller input sets for testing due to the combinatorial explosion of permutations. # Example: If your input list is: ```python [\\"cat\\", \\"bat\\"] ``` the output should be: ```python [\\"act\\", \\"atc\\", \\"bta\\", \\"cta\\", \\"tac\\", \\"tca\\"] ``` # Explanation: - For \\"cat\\", the possible anagrams are: [\'cat\', \'cta\', \'act\', \'atc\', \'tca\', \'tac\'] - For \\"bat\\", the possible anagrams are: [\'bat\', \'bta\', \'abt\', \'atb\', \'tab\', \'tba\'] - Combining all and removing duplicates, then sorting, we get: [\\"act\\", \\"atc\\", \\"bta\\", \\"cta\\", \\"tac\\", \\"tca\\"] # Sample Code Structure: ```python from itertools import permutations def find_unique_anagrams(words): unique_anagrams = set() for word in words: perms = [\'\'.join(p) for p in permutations(word)] unique_anagrams.update(perms) return sorted(unique_anagrams) ```","solution":"from itertools import permutations def find_unique_anagrams(words): Given a list of words, produce a list of all possible unique anagrams. Args: words (list of str): List of words to find anagrams for. Returns: list of str: List of unique anagrams sorted in lexicographical order. unique_anagrams = set() for word in words: # Generate all permutations of the word and convert them to strings perms = {\'\'.join(p) for p in permutations(word)} # Update the set of unique anagrams unique_anagrams.update(perms) # Return the sorted list of unique anagrams return sorted(unique_anagrams)"},{"question":"You are required to create a Python function called `find_repeating_sequence(s, n)` that finds the longest repeating sequence of `n` characters within a given string `s`. Your function should satisfy the following requirements: 1. The function should take two parameters: `s`, a string, and `n`, an integer. 2. The function should identify the longest repeating sequence of length `n` within `s`. 3. If multiple sequences have the same length, return the one which appears first. 4. If no such sequence exists, return an empty string. 5. The function should handle edge cases where the length of `s` is less than `n`. 6. Make sure the function is case-sensitive. To illustrate desired behavior, consider the following examples: Example 1: ```python find_repeating_sequence(\\"abracadabra\\", 2) ``` Output: ```python \\"ab\\" ``` Example 2: ```python find_repeating_sequence(\\"abcabcabc\\", 3) ``` Output: ```python \\"abc\\" ``` Example 3: ```python find_repeating_sequence(\\"abcdef\\", 3) ``` Output: ```python \\"\\" ``` By the end of this task, you will demonstrate your understanding of string manipulation and pattern matching in Python.","solution":"def find_repeating_sequence(s, n): Finds the longest repeating sequence of `n` characters within the string `s`. if len(s) < n: return \\"\\" counts = {} for i in range(len(s) - n + 1): seq = s[i:i+n] if seq in counts: counts[seq] += 1 else: counts[seq] = 1 # Find the sequence with the highest count max_seq = \\"\\" for seq, count in counts.items(): if count > 1: if not max_seq or s.index(seq) < s.index(max_seq): max_seq = seq return max_seq"},{"question":"You are tasked with creating a Python function that generates the Fibonacci series up to the `n`-th term. This function will help you understand recursion and the concept of memoization for optimizing recursive calls. The function you need to implement should be named `generate_fibonacci(n)`. This function will perform the following steps: 1. Define a helper function `fibonacci(k)` that returns the `k`-th Fibonacci number. 2. Use memoization to cache the results of previously calculated Fibonacci numbers to optimize performance. 3. The main function `generate_fibonacci(n)` should use the helper function to generate a list of Fibonacci numbers from the 0th to the (n-1)-th term. The Fibonacci sequence is defined as: - Fibonacci(0) = 0 - Fibonacci(1) = 1 - Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) for n > 1 For example: - `generate_fibonacci(0)` should return `[]` - `generate_fibonacci(1)` should return `[0]` - `generate_fibonacci(5)` should return `[0, 1, 1, 2, 3]` Below is the prototype of the function for your reference: ```python def generate_fibonacci(n): # Your code here ``` You may consider using a dictionary to implement memoization. Ensure that your function handles edge cases such as when `n` is 0.","solution":"def generate_fibonacci(n): Generate the Fibonacci series up to the n-th term. :param n: An integer representing the number of terms in the Fibonacci series. :return: A list containing the Fibonacci series up to the n-th term. memo = {} def fibonacci(k): if k in memo: return memo[k] if k == 0: result = 0 elif k == 1: result = 1 else: result = fibonacci(k-1) + fibonacci(k-2) memo[k] = result return result return [fibonacci(i) for i in range(n)]"},{"question":"You have been assigned to develop a function named `flatten_and_sort` that flattens a given nested list and returns a sorted list of integers. Your function should handle varying levels of nesting within the input list. # Function Signature ```python def flatten_and_sort(nested_list): ``` # Parameter - `nested_list`: A list potentially containing nested lists of integers. These nested lists can be arbitrarily deep. # Behavior 1. The function should iterate through all elements of the `nested_list` to extract all integers, regardless of their nesting level. 2. All extracted integers should be collected into a single list. 3. This list should then be sorted in ascending order and returned as the function result. # Requirements - You may use additional helper functions if necessary to achieve the desired functionality. - Make sure to handle empty lists appropriately and ensure that the final return value is a list of integers in ascending order. # Example Usage ```python flattened_sorted = flatten_and_sort([1, [4, 5], [2, 3, [6]], [7, [8, [9]]]]) print(flattened_sorted) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` # Constraints - The function should be able to handle large and deeply nested lists efficiently. - Assume that all elements in the `nested_list` are either integers or lists containing integers.","solution":"def flatten_and_sort(nested_list): def flatten(lst): result = [] for item in lst: if isinstance(item, list): result.extend(flatten(item)) else: result.append(item) return result flattened_list = flatten(nested_list) flattened_list.sort() return flattened_list"},{"question":"In the field of data analysis, handling missing values is a crucial step to ensure the integrity of the results. One common approach to manage missing values is through imputation, where missing values are replaced with substituted values. Your task is to implement a function `missing_data_imputer` that takes in a pandas DataFrame and replaces missing values based on certain strategies. Write a function `missing_data_imputer(df, strategy, columns)` with the following requirements: 1. **Library Usage**: Utilize `SimpleImputer` from the `sklearn.impute` library. 2. **Inputs**: - `df`: A pandas DataFrame containing the dataset with possible missing values. - `strategy`: A string specifying the imputation strategy. It can be one of the following: - `\'mean\'`: Replace missing values using the mean along each column. - `\'median\'`: Replace missing values using the median along each column. - `\'most_frequent\'`: Replace missing values using the most frequent value along each column. - `\'constant\'`: Replace missing values with a specified constant value. - `columns`: A list of column names in the DataFrame to apply the imputation to. If this is `None`, apply the imputation to all columns. 3. **Outputs**: - A pandas DataFrame with missing values imputed. 4. **Functionality**: - If the `strategy` is `\'constant\'`, replace missing values with `0` or a given constant provided explicitly. - Apply the specified imputation strategy only to the specified columns, or to all columns if none are specified. - Return the DataFrame with the imputed values. Implement the function, ensuring proper handling of different imputation strategies using the specified library. ```python import pandas as pd from sklearn.impute import SimpleImputer def missing_data_imputer(df, strategy=\'mean\', columns=None, fill_value=None): if columns is None: columns = df.columns # Impute all columns if none are specified if strategy == \'constant\' and fill_value is None: fill_value = 0 # Default constant value if none provided imputer = SimpleImputer(strategy=strategy, fill_value=fill_value) df[columns] = imputer.fit_transform(df[columns]) return df ```","solution":"import pandas as pd from sklearn.impute import SimpleImputer def missing_data_imputer(df, strategy=\'mean\', columns=None, fill_value=None): Impute missing values in the DataFrame using the specified strategy. Parameters: df (pd.DataFrame): The input DataFrame with possible missing values. strategy (str): The imputation strategy (\'mean\', \'median\', \'most_frequent\', \'constant\'). columns (list, optional): List of column names to apply the imputation. If None, all columns are considered. fill_value (any, optional): The constant value to use for imputation when strategy is \'constant\'. Returns: pd.DataFrame: DataFrame with missing values imputed. if columns is None: columns = df.columns.tolist() # Impute all columns if none are specified if strategy == \'constant\' and fill_value is None: fill_value = 0 # Default constant value if none provided imputer = SimpleImputer(strategy=strategy, fill_value=fill_value) df[columns] = imputer.fit_transform(df[columns]) return df"},{"question":"You are asked to implement a function that reads a CSV file containing student test scores and generates a summary report. Each row in the CSV file represents a student\'s scores in various subjects. The function must calculate the average score for each student, determine the highest and lowest scores in each subject, and produce a summary report that is written to a new CSV file. The function `generate_summary_report` should: 1. Read the data from the input CSV file. 2. Calculate the average score for each student. 3. Determine the highest and lowest score for each subject. 4. Write a new CSV file containing a summary report that includes the student names, their average scores, and the highest and lowest scores for each subject. Function signature: ```python def generate_summary_report(input_filename, output_filename): Generates a summary report from a CSV file of student test scores. Parameters: input_filename (str): The name of the input CSV file containing the student scores. output_filename (str): The name of the output CSV file to save the summary report. Returns: None ``` # Inputs: - `input_filename`: A string indicating the filename of the input CSV file containing student scores. - `output_filename`: A string indicating the filename to save the summary report. # Output: The function should save the summary report to the specified output file. The input CSV file will have the following format: ``` Name,Math,Science,English,History Alice,88,92,85,90 Bob,78,75,80,70 Charlie,90,87,95,88 ``` The output CSV file should have the following format: ``` Name,Average Score Alice,88.75 Bob,75.75 Charlie,90.0 Highest Score,90,92,95,90 Lowest Score,78,75,80,70 ``` # Example: ```python generate_summary_report(\\"student_scores.csv\\", \\"summary_report.csv\\") ``` The function should properly handle any potential variations in input data.","solution":"import csv def generate_summary_report(input_filename, output_filename): Generates a summary report from a CSV file of student test scores. Parameters: input_filename (str): The name of the input CSV file containing the student scores. output_filename (str): The name of the output CSV file to save the summary report. Returns: None students = [] subjects = None with open(input_filename, \'r\') as infile: reader = csv.DictReader(infile) subjects = reader.fieldnames[1:] # All field names except the first one (which is \\"Name\\") for row in reader: student = {\'Name\': row[\'Name\']} scores = [int(row[subject]) for subject in subjects] student[\'Scores\'] = scores students.append(student) subject_max = [-float(\'inf\')] * len(subjects) subject_min = [float(\'inf\')] * len(subjects) for student in students: for idx, score in enumerate(student[\'Scores\']): if score > subject_max[idx]: subject_max[idx] = score if score < subject_min[idx]: subject_min[idx] = score with open(output_filename, \'w\', newline=\'\') as outfile: writer = csv.writer(outfile) # Writing headers for summary report writer.writerow([\'Name\', \'Average Score\']) for student in students: avg_score = sum(student[\'Scores\']) / len(student[\'Scores\']) writer.writerow([student[\'Name\'], avg_score]) # Writing the highest scores for each subject writer.writerow([\'Highest Score\'] + subject_max) # Writing the lowest scores for each subject writer.writerow([\'Lowest Score\'] + subject_min)"},{"question":"You are asked to create a function called `matrix_chain_order` that takes a list named `p` which contains the dimensions of matrices to be multiplied. This function should compute the optimal order of matrix multiplications to minimize the total number of scalar multiplications required. The function will utilize dynamic programming for efficiency. Your task involves the following steps: 1. Initialize a table `m` where `m[i][j]` will store the minimum number of scalar multiplications needed to compute the matrix chain product from matrix `i` to matrix `j`. 2. Populate the table `m` using dynamic programming, adhering to the rules of matrix multiplication. 3. Return the minimum number of multiplications needed to multiply the matrices. The function signature should be `matrix_chain_order(p)` and should return the minimum number of multiplications. For instance, given `p = [1, 2, 3, 4]`, the function should determine the optimal parenthesization of matrix multiplications and return `18`, the minimal number of scalar multiplications needed for the matrix chain multiplication. Implement the function adhering to the guidelines and ensure it efficiently computes the desired result using dynamic programming.","solution":"def matrix_chain_order(p): Computes the minimum number of scalar multiplications needed to compute the matrix chain product. Parameters: p (list): list of dimensions such that the i-th matrix has dimensions p[i-1] x p[i] Returns: int: minimum number of scalar multiplications needed n = len(p) - 1 # number of matrices m = [[0 for _ in range(n)] for _ in range(n)] # L is the chain length. for L in range(2, n+1): for i in range(n-L+1): j = i+L-1 m[i][j] = float(\'inf\') for k in range(i, j): q = m[i][k] + m[k+1][j] + p[i]*p[k+1]*p[j+1] if q < m[i][j]: m[i][j] = q return m[0][n-1]"},{"question":"You are tasked with writing a function called `find_anagrams` that determines if two provided strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. To achieve this, you will need to compare the frequency of each character in both strings. You can use dictionaries to keep track of the character counts for each string. # Function Signature ```python def find_anagrams(s1: str, s2: str) -> bool: ``` # Parameters - `s1` (str): The first string to compare. - `s2` (str): The second string to compare. # Returns - `bool`: Returns `True` if the two strings are anagrams, `False` otherwise. # Instructions 1. If the lengths of the two strings are not the same, return `False`. 2. Create a dictionary to count the frequency of each character in `s1`. 3. Create a second dictionary to count the frequency of each character in `s2`. 4. Compare the two dictionaries. If they are identical, return `True`; otherwise, return `False`. # Example ```python print(find_anagrams(\\"listen\\", \\"silent\\")) # Output: True print(find_anagrams(\\"hello\\", \\"world\\")) # Output: False ``` # Additional Notes - The function should be case-insensitive, meaning \\"Listen\\" and \\"silent\\" should be considered anagrams. - Ignore spaces and punctuation when comparing the strings. You can use the `str.isalnum` method to filter out non-alphanumeric characters.","solution":"def find_anagrams(s1: str, s2: str) -> bool: Determines if two strings are anagrams. Args: s1 (str): The first string to compare. s2 (str): The second string to compare. Returns: bool: Returns True if the two strings are anagrams, False otherwise. # Normalize the strings: remove non-alphanumeric characters and convert to lowercase normalized_s1 = \'\'.join(char for char in s1 if char.isalnum()).lower() normalized_s2 = \'\'.join(char for char in s2 if char.isalnum()).lower() # If lengths are different, they cannot be anagrams if len(normalized_s1) != len(normalized_s2): return False # Count frequency of characters in both strings from collections import Counter return Counter(normalized_s1) == Counter(normalized_s2)"},{"question":"You are given a grid representing a maze where each cell is either open or blocked, and you need to determine the shortest path from the top-left corner to the bottom-right corner. You are only allowed to move up, down, left, or right. Implement a function that utilizes the breadth-first search (BFS) algorithm and the `collections.deque` class to find the shortest path. The function signature is: ```python def shortest_path_maze(maze: List[List[int]]) -> int: ``` **Parameters:** - `maze` (List[List[int]]): A 2D list representing the maze, where `1` indicates an open cell and `0` indicates a blocked cell. **Returns:** - `int`: The length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return `-1`. **Requirements:** 1. Use the `collections.deque` data structure for implementing the queue used in BFS. 2. You can move in four possible directions: up, down, left, or right. **Example:** ```python maze = [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1] ] output = shortest_path_maze(maze) print(output) # Should print 7 ``` Explanation: The shortest path is (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3), which has 7 cells (including start and target). **Notes:** - You may assume that the maze has at least one row and one column. - The top-left corner is at position (0, 0) and the bottom-right corner is at position (n-1, m-1). - Maze boundaries are implicitly considered blocked (you cannot move outside the maze).","solution":"from collections import deque from typing import List, Tuple def shortest_path_maze(maze: List[List[int]]) -> int: if not maze or not maze[0] or maze[0][0] == 0 or maze[-1][-1] == 0: return -1 rows, cols = len(maze), len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([((0, 0), 1)]) visited = set((0, 0)) while queue: (x, y), steps = queue.popleft() if (x, y) == (rows - 1, cols - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and maze[nx][ny] == 1: queue.append(((nx, ny), steps + 1)) visited.add((nx, ny)) return -1"},{"question":"Your task is to create a function using Python that simulates a basic banking system. The function named `banking_system` should manage multiple users\' accounts, allowing deposits, withdrawals, and balance inquiries. You will be required to implement certain operations such as creating a new account, depositing money, withdrawing money, and checking the account balance. The function should have the following specifications: 1. **Function Name:** `banking_system` 2. **Parameters:** None 3. **Structure:** Use a dictionary to store account information with account numbers as keys and account balances as values. 4. **Operations:** Implement commands to create an account, deposit money, withdraw money, and check balance. Here are the detailed steps for the function: 1. Use a while loop to continually prompt the user for a command until they enter \'exit\'. 2. Commands include: - `\'create_account\'`: Create a new account. Generate a unique account number and start the balance at 0. - `\'deposit <account_number> <amount>\'`: Add money to a specified account. - `\'withdraw <account_number> <amount>\'`: Withdraw money from a specified account. Ensure that the account has sufficient funds before allowing the withdrawal. - `\'balance <account_number>\'`: Display the current balance of the specified account. 3. Ensure proper error handling for invalid commands or operations on non-existent accounts. **Example:** ```python banking_system() ``` This will start the banking system, allowing interaction through the console with the described attributes.","solution":"def banking_system(): accounts = {} next_account_number = 1000 def create_account(): nonlocal next_account_number account_number = next_account_number accounts[account_number] = 0 next_account_number += 1 print(f\\"Account {account_number} created with balance 0.\\") return account_number def deposit(account_number, amount): if account_number in accounts: accounts[account_number] += amount print(f\\"Deposited {amount} to account {account_number}. New balance: {accounts[account_number]}.\\") else: print(f\\"Account {account_number} does not exist.\\") def withdraw(account_number, amount): if account_number in accounts: if accounts[account_number] >= amount: accounts[account_number] -= amount print(f\\"Withdrew {amount} from account {account_number}. New balance: {accounts[account_number]}.\\") else: print(f\\"Insufficient funds in account {account_number}.\\") else: print(f\\"Account {account_number} does not exist.\\") def check_balance(account_number): if account_number in accounts: print(f\\"Account {account_number} balance: {accounts[account_number]}.\\") else: print(f\\"Account {account_number} does not exist.\\") while True: command = input(\\"Enter command: \\").strip().split() if not command: continue cmd = command[0] if cmd == \'exit\': print(\\"Exiting banking system.\\") break elif cmd == \'create_account\': create_account() elif cmd == \'deposit\' and len(command) == 3: account_number = int(command[1]) amount = int(command[2]) deposit(account_number, amount) elif cmd == \'withdraw\' and len(command) == 3: account_number = int(command[1]) amount = int(command[2]) withdraw(account_number, amount) elif cmd == \'balance\' and len(command) == 2: account_number = int(command[1]) check_balance(account_number) else: print(\\"Invalid command.\\")"},{"question":"Write a function that takes a list of sentences and returns the list of sentences sorted by the number of unique words in each sentence in descending order. Ignore the case while counting unique words. If there are any sentences with the same number of unique words, maintain their original order. The function should output: sorted_sentences (list): The list of sentences sorted by the number of unique words in descending order. You should write self-contained code starting with: ``` def sort_sentences_by_unique_words(sentences): ```","solution":"def sort_sentences_by_unique_words(sentences): Sort a list of sentences by the number of unique words in descending order. Maintain the original order for sentences with the same number of unique words. Parameters: - sentences (list): List of sentences to sort Returns: - sorted_sentences (list): Sentences sorted by the number of unique words in descending order def unique_word_count(sentence): words = sentence.lower().split() return len(set(words)) # Sort sentences by unique word count in descending order, using the index to maintain order for same counts sorted_sentences = sorted(sentences, key=lambda s: -unique_word_count(s)) return sorted_sentences"},{"question":"Sorting algorithms are a fundamental part of computer science. They are used to arrange elements of a list in a particular order (typically, ascending or descending). One of the simplest sorting algorithms is Bubble Sort, where the algorithm repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The process is repeated until the list is sorted. Write a function `bubble_sort(arr)` that sorts an array of integers using the Bubble Sort algorithm. **Function Signature:** ```python def bubble_sort(arr: list) -> list: ``` **Parameters:** - `arr`: A list of integers that need to be sorted. **Returns:** - A list of integers sorted in ascending order. **Example:** ```python arr = [64, 34, 25, 12, 22, 11, 90] print(bubble_sort(arr)) # Output should be [11, 12, 22, 25, 34, 64, 90] ``` **Constraints:** - You are not allowed to use built-in sorting functions. - Implement the algorithm iteratively. #","solution":"def bubble_sort(arr): Sorts a list of integers using the Bubble Sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers in ascending order. n = len(arr) for i in range(n-1): # Number of passes for j in range(n-i-1): # Last i elements are already sorted if arr[j] > arr[j+1]: # Compare adjacent elements arr[j], arr[j+1] = arr[j+1], arr[j] # Swap if in wrong order return arr"},{"question":"You are provided with two JSON files containing information about students and their respective marks in three subjects: Mathematics, Physics, and Chemistry. The first JSON file, \\"students_info.json\\", has details about the students, including their ID, name, and age. The second JSON file, \\"students_marks.json\\", contains the students\' IDs and their marks in the three subjects. Your task is to write a function called `process_students_data()` that performs the following steps: 1. Reads both JSON files into two separate pandas DataFrames. 2. Renames the columns in both DataFrames to appropriate names for clarity. 3. Merges the two DataFrames on the \'Student_ID\' column using a left join. 4. Computes the total and average marks for each student. 5. Adds these computed columns to the merged DataFrame. 6. Returns the modified DataFrame. Use the `pandas.merge` function to achieve the merge operation. The data in \\"students_info.json\\" has the following structure (without renaming columns): ```json [ {\\"student_id\\": 1, \\"student_name\\": \\"Alice\\", \\"student_age\\": 17}, {\\"student_id\\": 2, \\"student_name\\": \\"Bob\\", \\"student_age\\": 16}, ... ] ``` The data in \\"students_marks.json\\" has the following structure (without renaming columns): ```json [ {\\"id\\": 1, \\"math\\": 85, \\"physics\\": 90, \\"chemistry\\": 78}, {\\"id\\": 2, \\"math\\": 88, \\"physics\\": 92, \\"chemistry\\": 80}, ... ] ``` **Input:** - \\"students_info.json\\" - \\"students_marks.json\\" **Output:** A single pandas DataFrame that merges both datasets on the \'Student_ID\' column, containing all the relevant columns from both datasets, along with the computed total and average marks. **Function Signature:** ```python def process_students_data() -> pd.DataFrame: pass ``` **Example Usage:** ```python students_df = process_students_data() print(students_df.head(5)) ```","solution":"import pandas as pd import json def process_students_data() -> pd.DataFrame: # Read the JSON files into DataFrames students_info = pd.read_json(\\"students_info.json\\") students_marks = pd.read_json(\\"students_marks.json\\") # Renaming columns for clarity students_info = students_info.rename(columns={\'student_id\': \'Student_ID\', \'student_name\': \'Name\', \'student_age\': \'Age\'}) students_marks = students_marks.rename(columns={\'id\': \'Student_ID\', \'math\': \'Math\', \'physics\': \'Physics\', \'chemistry\': \'Chemistry\'}) # Merging the two DataFrames on the \'Student_ID\' column using a left join merged_df = pd.merge(students_info, students_marks, on=\'Student_ID\', how=\'left\') # Computing the total and average marks for each student merged_df[\'Total_Marks\'] = merged_df[\'Math\'] + merged_df[\'Physics\'] + merged_df[\'Chemistry\'] merged_df[\'Average_Marks\'] = merged_df[\'Total_Marks\'] / 3 # Return the modified DataFrame return merged_df"},{"question":"You are required to create a function named `longest_sequence` that accepts a single input: 1. A list of integers `nums`, which can contain positive, negative numbers and zero. The objective of this function is to find the length of the longest consecutive sequence of numbers in the list. Consecutive numbers are defined as numbers that follow each other in order, without any gaps. For example, in the sequence [100, 4, 200, 1, 3, 2], the longest consecutive sequence is [1, 2, 3, 4]. The constraints are as follows: - The function should handle lists of varying lengths efficiently. - The solution should have a linear time complexity, O(n), to handle large lists. Your function should utilize a set data structure to keep track of the numbers and ensure operations are performed in constant time. # Requirements: 1. The function should be named `longest_sequence`. 2. It should handle edge cases where the list may be empty. 3. The function should return an integer representing the length of the longest consecutive sequence. # Example: ```python nums = [100, 4, 200, 1, 3, 2] output = longest_sequence(nums) print(output) ``` # Expected Output: ```python 4 ``` In this example, the output is 4 because the longest consecutive sequence is [1, 2, 3, 4] and its length is 4.","solution":"def longest_sequence(nums): Returns the length of the longest consecutive sequence of integers in the input list nums. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # Check if it\'s the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"In this problem, you are required to write a function named `generate_primes` that takes an integer `n` as an argument. This function will generate the first `n` prime numbers and return them as a list. A prime number is defined as a natural number greater than 1 that is not a product of two smaller natural numbers. More specifically, it has exactly two distinct positive divisors: 1 and itself. Your function should: 1. Initialize an empty list to store prime numbers. 2. Continuously check numbers to determine if they are prime and add them to the list until `n` primes have been identified. 3. Return the list containing the first `n` prime numbers. Here is the function signature you should use: ```python def generate_primes(n: int) -> list: ``` **Example:** ```python generate_primes(5) ``` This should return `[2, 3, 5, 7, 11]`, as these are the first 5 prime numbers.","solution":"def generate_primes(n: int) -> list: Generate the first n prime numbers. Parameters: n (int): The number of prime numbers to generate. Returns: list: A list containing the first n prime numbers. if n <= 0: return [] primes = [] num = 2 # Start with the first prime number while len(primes) < n: prime = True for p in primes: if p * p > num: break if num % p == 0: prime = False break if prime: primes.append(num) num += 1 return primes"},{"question":"You are required to implement a function `calculate_order_total` that calculates the total price of an order, including any applicable discounts. Your function will receive two inputs: `items` (a list of dictionaries where each dictionary represents an item with `name`, `quantity`, and `price` keys) and `discount` (a float representing the discount percentage to be applied to the total order, if applicable). The function should perform the following steps: 1. **Calculation**: - Calculate the total price for each item by multiplying its `quantity` by its `price`. - Sum the total prices of all items to get the `subtotal`. - If a `discount` is provided, apply it to the `subtotal` to get the `total` price after discount. 2. **Response**: - Return a JSON object containing the individual item totals, the `subtotal`, the `discount` applied, and the final `total` price. Implement this `calculate_order_total` function using the provided snippet as inspiration. Ensure to handle potential errors, such as invalid input types or missing keys, gracefully. ```python import json def calculate_order_total(items, discount): try: # Step 1: Validate inputs if not isinstance(items, list) or not all(isinstance(item, dict) for item in items): return json.dumps({\\"error\\": \\"Invalid items format\\"}), 400 if not isinstance(discount, (int, float)) or discount < 0 or discount > 100: return json.dumps({\\"error\\": \\"Invalid discount value\\"}), 400 # Step 2: Calculate item totals and subtotal subtotal = 0 item_totals = {} for item in items: if \'name\' not in item or \'quantity\' not in item or \'price\' not in item: return json.dumps({\\"error\\": \\"Missing item keys\\"}), 400 if not isinstance(item[\'quantity\'], int) or item[\'quantity\'] < 0: return json.dumps({\\"error\\": \\"Invalid item quantity\\"}), 400 if not isinstance(item[\'price\'], (int, float)) or item[\'price\'] < 0: return json.dumps({\\"error\\": \\"Invalid item price\\"}), 400 item_total = item[\'quantity\'] * item[\'price\'] item_totals[item[\'name\']] = item_total subtotal += item_total # Step 3: Apply discount if discount > 0: total = subtotal - (subtotal * (discount / 100)) else: total = subtotal # Step 4: Create response data response_data = { \'item_totals\': item_totals, \'subtotal\': subtotal, \'discount\': discount, \'total\': total } # Return successful response return json.dumps(response_data), 200 except Exception as e: return json.dumps({\\"error\\": str(e)}), 500 ``` Implement the function and ensure proper error handling and response formatting according to the specified requirements.","solution":"import json def calculate_order_total(items, discount): try: # Step 1: Validate inputs if not isinstance(items, list) or not all(isinstance(item, dict) for item in items): return json.dumps({\\"error\\": \\"Invalid items format\\"}), 400 if not isinstance(discount, (int, float)) or discount < 0 or discount > 100: return json.dumps({\\"error\\": \\"Invalid discount value\\"}), 400 # Step 2: Calculate item totals and subtotal subtotal = 0 item_totals = {} for item in items: if \'name\' not in item or \'quantity\' not in item or \'price\' not in item: return json.dumps({\\"error\\": \\"Missing item keys\\"}), 400 if not isinstance(item[\'quantity\'], int) or item[\'quantity\'] < 0: return json.dumps({\\"error\\": \\"Invalid item quantity\\"}), 400 if not isinstance(item[\'price\'], (int, float)) or item[\'price\'] < 0: return json.dumps({\\"error\\": \\"Invalid item price\\"}), 400 item_total = item[\'quantity\'] * item[\'price\'] item_totals[item[\'name\']] = item_total subtotal += item_total # Step 3: Apply discount if discount > 0: total = subtotal - (subtotal * (discount / 100)) else: total = subtotal # Step 4: Create response data response_data = { \'item_totals\': item_totals, \'subtotal\': subtotal, \'discount\': discount, \'total\': total } # Return successful response return json.dumps(response_data), 200 except Exception as e: return json.dumps({\\"error\\": str(e)}), 500"},{"question":"**Grid Pathfinding with Obstacles** You have been tasked with writing a function that computes the number of unique paths from the top-left corner to the bottom-right corner of an `m x n` grid, given that some cells in the grid contain obstacles which cannot be traversed. The only allowed movements are to the right or downward. Your function should be named `unique_paths_with_obstacles()`. To accomplish this, you are to implement a dynamic programming solution which should take a 2D list `obstacle_grid` as input, where `obstacle_grid[i][j]` is `1` if `cell (i, j)` contains an obstacle, and `0` otherwise. The steps to follow in the function are: 1. Initialize a 2D list `dp` of the same dimensions as `obstacle_grid`, with all elements set to `0`. 2. Set the starting point `dp[0][0]` to `1` if `obstacle_grid[0][0]` is `0`, otherwise return `0` as no path is possible. 3. Iterate through each cell in the grid, updating `dp[i][j]` to the sum of the paths from the cell above `dp[i-1][j]` and the cell to the left `dp[i][j-1]` if they are within bounds and do not contain obstacles. 4. Return the value at `dp[m-1][n-1]` which represents the number of unique paths to the bottom-right corner. # Function Signature ```python def unique_paths_with_obstacles(obstacle_grid): pass ``` # Example ```python obstacle_grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(obstacle_grid)) # Output: 2 ``` In this example, there are two unique paths from the top-left corner to the bottom-right corner, avoiding the obstacle at `grid[1][1]`.","solution":"def unique_paths_with_obstacles(obstacle_grid): Returns the number of unique paths from top-left corner to bottom-right corner in a grid with obstacles. m = len(obstacle_grid) n = len(obstacle_grid[0]) # If the starting or ending point is an obstacle, return 0 if obstacle_grid[0][0] == 1 or obstacle_grid[m-1][n-1] == 1: return 0 # Initialize a 2D dp array dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if obstacle_grid[i][0] == 0 else 0 # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if obstacle_grid[0][j] == 0 else 0 # Fill the rest of dp array for i in range(1, m): for j in range(1, n): if obstacle_grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1]"},{"question":"You are given a string representing a mathematical expression involving positive integers and the operators +, -, *, and /. Your task is to evaluate this expression while strictly following the order of operations (PEMDAS/BODMAS rules: parentheses, exponents (though not required here), multiplication and division (from left to right), and addition and subtraction (from left to right)). You need to implement a function named `evaluate_expression` that takes a string as input and returns the result of the evaluated expression. The input string is guaranteed to be a valid expression and will not contain any spaces. Function Signature: ```python def evaluate_expression(expression: str) -> float: ``` # Examples Example 1 ```python assert evaluate_expression(\\"3+5*2\\") == 13 ``` Explanation: The expression should be evaluated as `3 + (5 * 2)` = 3 + 10 = 13. Example 2 ```python assert evaluate_expression(\\"10+2*6/3\\") == 14.0 ``` Explanation: The expression should be evaluated as `10 + (2 * 6) / 3` = 10 + 12 / 3 = 10 + 4 = 14.0. Example 3 ```python assert evaluate_expression(\\"100/10-5*3+8\\") == 5.0 ``` Explanation: The expression should be evaluated as `(100 / 10) - (5 * 3) + 8` = 10 - 15 + 8 = -5 + 8 = 3.","solution":"def evaluate_expression(expression: str) -> float: def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): value = 0 while i < len(expression) and expression[i].isdigit(): value = value * 10 + int(expression[i]) i += 1 values.append(value) i -= 1 else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return float(values[-1])"},{"question":"You are tasked with creating a function named `aggregate_sales_data` that takes a pandas DataFrame `sales_df` as input. This DataFrame contains the following columns: - `\'store_id\'`: a unique identifier for each store. - `\'product_id\'`: a unique identifier for each product. - `\'quantity\'`: the quantity of the product sold. - `\'price\'`: the price of the product sold. - `\'date\'`: the date when the sale was made. Your task is to perform the following operations: 1. Calculate the total revenue for each sale by multiplying the `\'quantity\'` and `\'price\'` columns and add a new column `\'total_revenue\'` to the DataFrame. 2. Group the data by `\'store_id\'` and `\'product_id\'` and aggregate the total quantity (`\'quantity\'`) and total revenue (`\'total_revenue\'`) for each group. 3. Return the aggregated DataFrame, sorted by `\'store_id\'` and then `\'product_id\'`. # Requirements - Add a new column `\'total_revenue\'` which is the product of `\'quantity\'` and `\'price\'`. - Group by `\'store_id\'` and `\'product_id\'` and calculate the sum of `\'quantity\'` and `\'total_revenue\'`. - Return the DataFrame, sorted by `\'store_id\'` and `\'product_id\'`. You may assume that the `pandas` library is already imported as `pd`. Here is the function signature: ```python def aggregate_sales_data(sales_df: pd.DataFrame) -> pd.DataFrame: # Your code here pass ```","solution":"def aggregate_sales_data(sales_df): Aggregates sales data by store_id and product_id, calculating total quantity and total revenue. Parameters: sales_df (pd.DataFrame): DataFrame containing sales data with columns [\'store_id\', \'product_id\', \'quantity\', \'price\', \'date\'] Returns: pd.DataFrame: Aggregated DataFrame with columns [\'store_id\', \'product_id\', \'quantity\', \'total_revenue\'], sorted by \'store_id\' and \'product_id\' # Calculate the total revenue for each sale sales_df[\'total_revenue\'] = sales_df[\'quantity\'] * sales_df[\'price\'] # Group by \'store_id\' and \'product_id\' and aggregate the total quantity and total revenue aggregated_df = sales_df.groupby([\'store_id\', \'product_id\']).agg( total_quantity=(\'quantity\', \'sum\'), total_revenue=(\'total_revenue\', \'sum\') ).reset_index() # Rename columns for clarity aggregated_df.rename(columns={\\"total_quantity\\": \\"quantity\\"}, inplace=True) # Sorting by \'store_id\' and then \'product_id\' return aggregated_df.sort_values([\'store_id\', \'product_id\'])"},{"question":"You have been approached to create a function called `find_max_occurrence` in Python, which will accept a list of integers and determine the integer that occurs the most frequently. The function should meet the following requirements: 1. If there is a tie (i.e., multiple integers occur with the same highest frequency), return the smallest integer among them. 2. If the list is empty, the function should return `None`. The function must efficiently compute the result with consideration for time complexity since the list can be large. Function Signature: ```python def find_max_occurrence(numbers: list) -> int: ... ``` You are required to utilize Python\'s collection tools effectively, such as `collections.Counter`, to achieve the desired outcomes in an optimal manner. Provide a complete implementation of the `find_max_occurrence` function.","solution":"from collections import Counter def find_max_occurrence(numbers: list) -> int: Finds the integer that occurs most frequently in the list. If multiple integers have the highest frequency, returns the smallest one. If the list is empty, returns None. if not numbers: return None count = Counter(numbers) max_occurrence = max(count.values()) most_frequent_numbers = [num for num, freq in count.items() if freq == max_occurrence] return min(most_frequent_numbers)"},{"question":"# Matrix Rotation Challenge: Rotate a Matrix by 90 Degrees You have been given the responsibility to create a function called `rotateMatrix` that will rotate a given n x n matrix by 90 degrees clockwise. This task will help you understand the processing of two-dimensional arrays and manipulations involving nested data structures. Function Signature ```python def rotateMatrix(matrix): INPUT: matrix: List[List[int]], a 2D list representing a n x n matrix that needs to be rotated OUTPUT: Returns a new matrix which is the input matrix rotated by 90 degrees clockwise ``` # Requirements: 1. The `rotateMatrix` function should: - Accepts an n x n matrix as input where n >= 1. - Return a new matrix that represents the original matrix rotated 90 degrees clockwise. - Ensure the function does not modify the original matrix in place. 2. Consider edge cases such as the smallest possible matrix (1x1). # Instructions: 1. Implement the function by manipulating and arranging the elements in the input matrix to achieve a rotation effect. 2. Verify the correctness of your function with multiple test cases including small and large matrices as well as typical corner cases. # Example Usage: ```python # Example 1 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(rotateMatrix(matrix)) # Expected Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] # Example 2 matrix = [ [1] ] print(rotateMatrix(matrix)) # Expected Output: # [ # [1] # ] ``` In the first example, `rotateMatrix` should rotate the 3x3 matrix such that the new matrix contains the original matrix\'s elements arranged in a new orientation. In the second example, the function handles the smallest possible matrix.","solution":"def rotateMatrix(matrix): Rotates a given n x n matrix by 90 degrees clockwise. :param matrix: List[List[int]], a 2D list representing a n x n matrix that needs to be rotated :return: List[List[int]], a new matrix which is the input matrix rotated 90 degrees clockwise n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Create a Python function named `create_username` that generates and returns a username based on a user\'s first and last names according to the following rules: 1. Combine the first three characters of the user\'s first name and the first three characters of the user\'s last name. 2. If the first name or last name has less than three characters, use the entire name for that part. 3. Convert the resulting string to lowercase. Additionally, your function should handle errors gracefully: - If either the first name or last name is an empty string, raise a `ValueError` with the message: ``` First name and last name must not be empty. ``` Provide function signature and implement error-checking as follows: ```python def create_username(first_name, last_name): # Your code here pass ``` Examples: 1. `create_username(\\"Michael\\", \\"Jordan\\")` should return \\"micjor\\". 2. `create_username(\\"Eve\\", \\"R\\")` should return \\"ever\\". 3. `create_username(\\"\\", \\"Smith\\")` should raise `ValueError` with the appropriate message.","solution":"def create_username(first_name, last_name): if not first_name or not last_name: raise ValueError(\\"First name and last name must not be empty.\\") first_part = first_name[:3] last_part = last_name[:3] username = (first_part + last_part).lower() return username"},{"question":"You are given a partially implemented system for managing tasks in a to-do list application. Each task has a priority level and a deadline. Your task is to implement the function that processes the tasks based on their priority and deadline. You need to implement a function `process_tasks` which will take the following parameters: - `self`: the task manager object with the following attributes: - `tasks`: a list of task objects, where each task object has: - `priority`: an integer denoting the priority of the task (lower number means higher priority). - `deadline`: a datetime object representing the deadline of the task. - `completed_tasks`: a list to which completed tasks will be appended. - `queue`: a priority queue (min-heap) which stores tuples of (priority, deadline, task) to be processed. The function should: 1. Iterate through the list of tasks and push each task onto the priority queue `queue` using `heapq.heappush`. 2. Pop tasks from the priority queue one by one using `heapq.heappop` and add them to `completed_tasks` until the queue is empty. Consider using the built-in `heapq` module for managing the priority queue. # Example ```python import heapq from datetime import datetime class Task: def __init__(self, priority, deadline): self.priority = priority self.deadline = deadline class TaskManager: def __init__(self): self.tasks = [] self.completed_tasks = [] self.queue = [] def process_tasks(self): # Implement this function pass # Example usage: task1 = Task(1, datetime(2023, 12, 1)) task2 = Task(2, datetime(2023, 11, 1)) task3 = Task(1, datetime(2023, 10, 1)) manager = TaskManager() manager.tasks = [task1, task2, task3] manager.process_tasks() for task in manager.completed_tasks: print(f\\"Task with priority {task.priority} and deadline {task.deadline}\\") ``` Implement the `process_tasks` function above.","solution":"import heapq class Task: def __init__(self, priority, deadline): self.priority = priority self.deadline = deadline class TaskManager: def __init__(self): self.tasks = [] self.completed_tasks = [] self.queue = [] def process_tasks(self): # Push all tasks onto the priority queue based on priority and deadline for task in self.tasks: heapq.heappush(self.queue, (task.priority, task.deadline, task)) # Pop tasks from the priority queue and add to completed_tasks while self.queue: task = heapq.heappop(self.queue)[2] # Get the task object self.completed_tasks.append(task)"},{"question":"Create a function called `rotate_matrix` that rotates a given square matrix 90 degrees clockwise in place. The goal is to understand how to manipulate two-dimensional arrays effectively. The matrix will be represented as a list of lists, where each sublist is a row of the matrix. **Function Signature:** ```python def rotate_matrix(matrix: List[List[int]]) -> None: # your code here ``` # Example Given the matrix: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After running `rotate_matrix(matrix)`, the matrix should be: ```python matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints - The input matrix will always be a square matrix (n x n) where `2 <= n <= 1000`. - You must perform the rotation in place, i.e., do not use any extra space for another matrix of the same size. # Guidelines 1. First, transpose the matrix. 2. Reverse the elements of each row to achieve the 90 degrees clockwise rotation. 3. Ensure the rotation is done in place without using extra space beyond a few additional variables for swapping.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates a given square matrix 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are asked to implement a function to simulate a basic text editor with undo functionality. The text editor supports the following commands: - `INSERT word`: Insert a word to the end of the text. - `DELETE`: Delete the last word in the text. - `UNDO`: Undo the last insert or delete operation. The function takes a list of commands and executes them in order. The final text should be returned as a single string of words separated by spaces. For this problem, you must: 1. Create a function `text_editor(commands: List[str]) -> str` that performs the following steps: - Maintain a list of words representing the current text. - Maintain a stack to keep track of actions for undo functionality. - Process each command in the given list: - If the command is `INSERT word`, append the word to the text and record the operation in the stack. - If the command is `DELETE`, remove the last word from the text if it exists and record the operation in the stack. - If the command is `UNDO`, revert the most recent operation recorded in the stack. - Return the final text as a single string of words separated by spaces. Function Signature ```python def text_editor(commands: List[str]) -> str: pass ```","solution":"from typing import List def text_editor(commands: List[str]) -> str: text = [] actions = [] for command in commands: if command.startswith(\'INSERT\'): word = command.split(\' \', 1)[1] text.append(word) actions.append((\'INSERT\', word)) elif command == \'DELETE\': if text: removed_word = text.pop() actions.append((\'DELETE\', removed_word)) elif command == \'UNDO\': if actions: last_action = actions.pop() if last_action[0] == \'INSERT\': text.pop() elif last_action[0] == \'DELETE\': text.append(last_action[1]) return \' \'.join(text)"},{"question":"You are working on a project which involves analyzing signal data from an array of sensors. Each sensor captures data at multiple discrete time intervals and stores the readings in a list. Your task is to write a Python function that processes this data to extract meaningful insights. The function should analyze the sensor data and return the average reading for each sensor, along with the overall average reading from all sensors. Some sensors might be malfunctioning and have no data. Your function should be named `SensorAnalysis` and have the following signature: ```python def SensorAnalysis(sensor_data): ``` This function should: 1. Take a list of lists as input, where each sublist contains the readings of a specific sensor at different time intervals. 2. Compute the average reading for each sensor that has data. 3. Compute the overall average reading across all sensors. 4. Return a tuple containing a list of the average readings for each sensor and the overall average reading. You are required to use `numpy.mean` for calculation. Ignore sensors without data in the calculations. # Example ```python sensor_data = [ [1.2, 3.4, 2.1], # Sensor 1 data [], # Sensor 2 has no data [2.3, 3.3, 4.4, 5.5], # Sensor 3 data [1.1, 2.2], # Sensor 4 data ] result = SensorAnalysis(sensor_data) print(result) # Expected: ([2.2333333333333334, 3.875, 1.65], 2.5861111111111112) ``` # Requirements - Use `numpy.mean` to compute the means. - Ensure your function handles empty lists (malfunctioning sensors) gracefully.","solution":"import numpy as np def SensorAnalysis(sensor_data): Analyzes sensor data to compute the average reading for each sensor and the overall average reading. Parameters: sensor_data (list of lists): Each inner list contains readings from a specific sensor. Returns: tuple: A list of average readings for each sensor and the overall average reading. sensor_averages = [] all_readings = [] for sensor in sensor_data: if sensor: # Check if the sensor has any readings avg_reading = np.mean(sensor) sensor_averages.append(avg_reading) all_readings.extend(sensor) overall_avg = np.mean(all_readings) if all_readings else 0 return sensor_averages, overall_avg"},{"question":"You are given a list of integers representing the daily temperatures. The task is to determine, for each day, how many days you would have to wait until a warmer temperature. If there\'s no future day with a warmer temperature, put 0 for that day. You must write a function `daily_temperatures(T)` that solves this problem using a stack. The stack will help you track the indices of the temperatures. You should iterate through the list and update the days to wait for each temperature. Function Signature: ```python def daily_temperatures(T): ... ``` Here is an example of how the function is expected to work: # Example: ```python T = [73, 74, 75, 71, 69, 72, 76, 73] result = daily_temperatures(T) print(result) # The expected output should be [1, 1, 4, 2, 1, 1, 0, 0] ``` In this example, the input list `T` represents the daily temperatures. The element at index 0 represents the temperature on day 0 (73 degrees), and so on. The output provides the number of days you would have to wait until a warmer temperature for each respective day. The last element is 0 because there is no day after it. # Requirements: - You must use a stack to achieve an efficient solution. - Ensure the solution has a time complexity of O(n). - Provide thorough explanations for your approach, particularly the use of the stack and how it helps in solving the problem efficiently.","solution":"def daily_temperatures(T): This function takes a list of daily temperatures and returns a list of integers where each integer represents how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the value is 0. Approach: - Initialize a result list of zeros with the same length as the input list T. - Use a stack to keep track of indices of temperatures, ensuring we can efficiently find earlier days that need updating once a warmer day is found. - Iterate through the temperatures, and for each day, compare it with the temperature at the index stored on top of the stack. - If the current day\'s temperature is higher, update the index at the top of the stack with the number of days waited, then pop the index off the stack. - Continue this process until the stack is empty or we\'ve processed all indices from the list T. :param T: List[int] - A list of integers representing daily temperatures. :return: List[int] - A list of integers where each integer represents the number of days to wait until a warmer temperature. answer = [0] * len(T) stack = [] # This will store indices of the temperatures for i, temp in enumerate(T): while stack and T[stack[-1]] < temp: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"**Objective:** You are required to implement a function to analyze a time series dataset containing the monthly sales of a product over several years. Specifically, you need to create a function `sales_trend_analysis` that takes a pandas DataFrame as input and performs the following tasks: calculating the moving average, visualizing the sales trend along with the moving average, and predicting future sales using a simple linear regression model. **Specifications:** 1. **Function Name:** `sales_trend_analysis` 2. **Input:** - A pandas DataFrame named `sales_df` with the following columns: - `\'date\'` (Datetime column indicating the date of each sales record) - `\'sales\'` (Numerical column indicating the sales value for each date) - An integer `window` indicating the window size for the moving average calculation. 3. **Output:** - The function should not return anything but should generate and display the following: 1. A line plot showing the original sales data and the moving average on the same plot. 2. A predicted line plot showing future sales for the next 12 months using a simple linear regression model. **Instructions:** - Ensure the input DataFrame\'s `\'date\'` column is in datetime format. - Calculate the moving average of the sales data using the specified window size. - Use Matplotlib\'s functions to create line plots for the sales data and moving average. - Train a simple linear regression model using scikit-learn to predict the sales for the next 12 months. - Use Matplotlib\'s functions to extend the original sales plot with the predicted sales for the next 12 months. - Install the libraries `pandas`, `numpy`, `scikit-learn`, and `matplotlib` if they are not already installed. This problem will help you understand how to analyze time series data, calculate moving averages, visualize sales trends, and make simple future predictions using linear regression. **Example:** ```python # Assume you have a DataFrame \'sales_df\' with the necessary columns sales_trend_analysis(sales_df, window=3) ``` Running the above code with a correctly formatted DataFrame should display the sales trend plot, moving average plot, and future sales prediction plot as specified.","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression def sales_trend_analysis(sales_df, window): This function analyzes the sales trend with a moving average and predicts future sales. Parameters: sales_df (pd.DataFrame): DataFrame with \'date\' and \'sales\' columns. window (int): Interval for moving average calculation. # Ensure the \'date\' column is in datetime format sales_df[\'date\'] = pd.to_datetime(sales_df[\'date\']) # Set the date as the index sales_df.set_index(\'date\', inplace=True) # Calculate the moving average moving_avg = sales_df[\'sales\'].rolling(window=window).mean() # Plot the original sales data and moving average plt.figure(figsize=(12, 6)) plt.plot(sales_df[\'sales\'], label=\'Original Sales\') plt.plot(moving_avg, label=f\'{window}-Month Moving Average\', color=\'orange\') plt.title(\'Sales Trend with Moving Average\') plt.xlabel(\'Date\') plt.ylabel(\'Sales\') plt.legend(loc=\'best\') plt.grid(True) plt.show() # Prepare data for the linear regression model sales_df[\'time\'] = np.arange(len(sales_df)) X = sales_df[\'time\'].values.reshape(-1, 1) y = sales_df[\'sales\'].values # Train the linear regression model model = LinearRegression() model.fit(X, y) # Predict future sales for the next 12 months future_times = np.arange(len(sales_df), len(sales_df) + 12).reshape(-1, 1) future_sales = model.predict(future_times) # Create a DataFrame for the future sales predictions future_dates = pd.date_range(start=sales_df.index[-1], periods=13, freq=\'M\')[1:] future_df = pd.DataFrame(data={\'sales\': future_sales}, index=future_dates) # Plot the original sales, moving average, and future sales prediction plt.figure(figsize=(12, 6)) plt.plot(sales_df[\'sales\'], label=\'Original Sales\') plt.plot(moving_avg, label=f\'{window}-Month Moving Average\', color=\'orange\') plt.plot(future_df[\'sales\'], label=\'Predicted Future Sales\', linestyle=\'--\', color=\'green\') plt.title(\'Sales Trend with Moving Average and Future Sales Prediction\') plt.xlabel(\'Date\') plt.ylabel(\'Sales\') plt.legend(loc=\'best\') plt.grid(True) plt.show()"},{"question":"You are given a dictionary `company_departments` where the keys are department names and the values are lists of employee names. Additionally, you have a list called `recent_leavers` that contains the names of employees who have recently left the company. Your task is to write a function called `update_departments` that updates the dictionary by removing the names of employees who have left from their respective department lists. Here is the function signature: ```python def update_departments(company_departments, recent_leavers): # Your code here ``` **Example:** ```python company_departments = { \'HR\': [\'Alice\', \'Bob\', \'Charlie\'], \'IT\': [\'David\', \'Eve\', \'Frank\'], \'Sales\': [\'Grace\', \'Heidi\', \'Ivan\'] } recent_leavers = [\'Alice\', \'Frank\', \'Ivan\'] update_departments(company_departments, recent_leavers) print(company_departments) ``` **Expected Output:** ```python { \'HR\': [\'Bob\', \'Charlie\'], \'IT\': [\'David\', \'Eve\'], \'Sales\': [\'Grace\', \'Heidi\'] } ``` Note: - Ensure that the function directly modifies the input dictionary `company_departments`, without creating and returning a new dictionary. - If an employee listed in `recent_leavers` is not found in any department, the function should simply ignore it without causing any errors.","solution":"def update_departments(company_departments, recent_leavers): for department, employees in company_departments.items(): company_departments[department] = [employee for employee in employees if employee not in recent_leavers]"},{"question":"You are asked to implement a function that converts Roman numerals to their integer equivalents. The function should be able to handle standard Roman numeral conventions and ensure that the provided numerals are valid. **Function to Implement:** ```python def roman_to_integer(roman): Convert a Roman numeral to its integer value. Parameters: roman (str): The input Roman numeral as a string. Returns: int: The integer value of the Roman numeral. # Your code here ``` **Details:** 1. **Standard Roman Numeral Conventions:** - The standard Roman numerals and their integer values are: - `I`: 1 - `V`: 5 - `X`: 10 - `L`: 50 - `C`: 100 - `D`: 500 - `M`: 1000 2. **Combined Roman Numerals:** - Roman numerals are usually written from largest to smallest left to right. However, there are six instances where this rule is broken: - `IV` = 4 - `IX` = 9 - `XL` = 40 - `XC` = 90 - `CD` = 400 - `CM` = 900 3. **Validation:** - Ensure that the provided Roman numeral string is valid. If it\'s not, raise a `ValueError` with the message \\"Invalid Roman numeral.\\" **Example:** ```python # Example call to the function print(roman_to_integer(\'MCMXCIV\')) # Output: 1994 print(roman_to_integer(\'MMXX\')) # Output: 2020 print(roman_to_integer(\'IIII\')) # Raises ValueError: Invalid Roman numeral ``` **Notes:** - Implement the specified function ensuring the correct interpretation of Roman numerals. - The function should handle both uppercase and lowercase Roman numeral inputs. - Validation should strictly follow Roman numeral rules. Inputs violating these rules should be considered invalid and appropriately handled with an exception.","solution":"def roman_to_integer(roman): Convert a Roman numeral to its integer value. Parameters: roman (str): The input Roman numeral as a string. Returns: int: The integer value of the Roman numeral. Raises: ValueError: If the input is not a valid Roman numeral. roman = roman.upper() roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} invalid_roman_numeral_combinations = [\'IIII\', \'VV\', \'XXXX\', \'LL\', \'CCCC\', \'DD\', \'MMMM\'] subtractive_combinations = [(\'IV\', 4), (\'IX\', 9), (\'XL\', 40), (\'XC\', 90), (\'CD\', 400), (\'CM\', 900)] # Validation for invalid combinations for combo in invalid_roman_numeral_combinations: if combo in roman: raise ValueError(\\"Invalid Roman numeral\\") total = 0 i = 0 while i < len(roman): if i + 1 < len(roman) and roman[i:i+2] in [comb[0] for comb in subtractive_combinations]: total += dict(subtractive_combinations)[roman[i:i+2]] i += 2 elif roman[i] in roman_values: total += roman_values[roman[i]] i += 1 else: raise ValueError(\\"Invalid Roman numeral\\") return total"},{"question":"You are tasked with creating a function `validate_email(emails)` that takes a list of email addresses and validates them based on specific criteria. This function should return a list of only the valid email addresses. # Function Details: - **Function Name**: `validate_email` - **Arguments**: - `emails`: A `list` of `strings`, where each string is an email address to be validated. # Validation Criteria: 1. The email address must follow the standard format: `username@domain_extension`. - The `username` is a non-empty string that can include letters, digits, periods (`.`), hyphens (`-`), and underscores (`_`). - The `domain` consists of one or more subdomains separated by dots (`.`), where each subdomain starts and ends with a letter or digit and may contain hyphens (`-`). - The `extension` is a top-level domain such as `com`, `org`, `net`, etc., and must be 2 to 6 characters long. 2. Any email address not conforming to the above criteria is deemed invalid. # Example: - `username@subdomain.domain.extension` is valid. - `user.name@domain.org` is valid. - `user@com` is invalid. - `user@domain.construction` is invalid (extension is too long). - `user@123.123.123.123` is invalid (domain cannot be all digits). # Example Implementation: Create a regular expression pattern to match valid email addresses according to the criteria above, and filter the input list to return only the valid ones. ```python import re def validate_email(emails): pattern = r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,6}\' valid_emails = [email for email in emails if re.match(pattern, email)] return valid_emails # Example usage emails = [\'john.doe@example.com\', \'invalid-email@site\', \'jane_doe@company.org\', \'user@server.construction\'] print(validate_email(emails)) # Output: [\'john.doe@example.com\', \'jane_doe@company.org\'] ``` - **Your task** is to implement the function `validate_email(emails)` as described above.","solution":"import re def validate_email(emails): Validates a list of email addresses based on specific criteria. Args: - emails (list of str): List of email addresses to validate. Returns: - list of str: List of valid email addresses. pattern = re.compile(r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*.[a-zA-Z]{2,6}\') valid_emails = [email for email in emails if pattern.match(email)] return valid_emails"},{"question":"You need to determine if a given string `s` can be transformed into a palindrome by deleting at most one character. Write a function `can_form_palindrome` that takes a string `s` as input and returns a boolean value indicating whether it\'s possible to form a palindrome by removing at most one character from the string. A string is considered a palindrome if it reads the same forwards and backwards. The function signature is: ```python def can_form_palindrome(s: str) -> bool: # Function implementation ``` # Parameters: - `s` (str): A string containing lower-case English letters. # Returns: - `bool`: `True` if the string can be transformed into a palindrome by removing at most one character, otherwise `False`. # Instructions: 1. You may use helper functions if necessary. 2. Consider edge cases such as an empty string, a single character string, or strings where characters need to be removed from the edges or middle. # Example Usage: ```python print(can_form_palindrome(\\"abca\\")) # True print(can_form_palindrome(\\"racecar\\")) # True print(can_form_palindrome(\\"abcda\\")) # False ``` # Requirements: 1. Leverage string slicing techniques to simplify the palindrome checking process. 2. Ensure the algorithm runs efficiently, even for strings of considerable length (up to 10^5 characters). # Hints: 1. You can use two pointers technique to compare characters from both ends towards the center. 2. Consider creating a helper function to check if a substring is a palindrome.","solution":"def can_form_palindrome(s: str) -> bool: Determines if a given string can be transformed into a palindrome by deleting at most one character. Args: s (str): The input string. Returns: bool: True if the string can be transformed into a palindrome by removing one character, otherwise False. def is_palindrome_range(left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"Consider a class `Employee` with attributes `id`, `name`, and `department`. Write a function `promote_employees` that performs the following: 1. Takes a list of `Employee` objects as an input and a set of `department` names. 2. Returns a list of `id`s of employees who belong to the specified departments (given in the set) and get promoted. 3. Update the department of the promoted employees to \'Promoted\'. 4. Handle the case where the input list of employees or the set of departments is empty by returning an empty list. **Class and function signature:** ```python class Employee: def __init__(self, id, name, department): self.id = id self.name = name self.department = department def promote_employees(employees, departments): pass ``` # Example: **Given:** ```python employees = [Employee(1, \\"Alice\\", \\"Sales\\"), Employee(2, \\"Bob\\", \\"Engineering\\"), Employee(3, \\"Charlie\\", \\"Sales\\"), Employee(4, \\"David\\", \\"HR\\")] departments = {\\"Sales\\", \\"Engineering\\"} ``` **Calling function:** ```python promoted_ids = promote_employees(employees, departments) print(promoted_ids) ``` **Expected Output:** ```python [1, 2, 3] ``` - Employee with id 1, 2, and 3 belong to the specified departments \'Sales\' and \'Engineering\'. - Their department should be updated to \'Promoted\'. # Example Usage: ```python class Employee: def __init__(self, id, name, department): self.id = id self.name = name self.department = department def promote_employees(employees, departments): promoted_ids = [] for employee in employees: if employee.department in departments: promoted_ids.append(employee.id) employee.department = \'Promoted\' return promoted_ids employees = [Employee(1, \\"Alice\\", \\"Sales\\"), Employee(2, \\"Bob\\", \\"Engineering\\"), Employee(3, \\"Charlie\\", \\"Sales\\"), Employee(4, \\"David\\", \\"HR\\")] departments = {\\"Sales\\", \\"Engineering\\"} print(promote_employees(employees, departments)) # Output: [1, 2, 3] ``` # Libraries: - No additional libraries needed.","solution":"class Employee: def __init__(self, id, name, department): self.id = id self.name = name self.department = department def promote_employees(employees, departments): Promotes employees belonging to the given departments. Parameters: employees (list of Employee): The list of employees. departments (set of str): The set of department names. Returns: list of int: The ids of the promoted employees. if not employees or not departments: return [] promoted_ids = [] for employee in employees: if employee.department in departments: promoted_ids.append(employee.id) employee.department = \'Promoted\' return promoted_ids"},{"question":"Create a function that trains a logistic regression model to classify data from the Iris dataset. The function should also plot the decision boundaries of the model along with the training data. The function should output: tuple: logistic_model (LogisticRegression): The fitted logistic regression model. plot_axes (Axes): The plot with decision boundaries and training data. You should write self-contained code starting with: ``` import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LogisticRegression from sklearn import datasets from sklearn.model_selection import train_test_split def task_func(test_size=0.2, random_seed=None): ```","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LogisticRegression from sklearn import datasets from sklearn.model_selection import train_test_split def task_func(test_size=0.2, random_seed=None): iris = datasets.load_iris() X = iris.data[:, :2] # We only take the first two features for simplicity y = iris.target X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_seed) logistic_model = LogisticRegression() logistic_model.fit(X_train, y_train) # Create a mesh to plot the decision boundaries x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5 y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5 xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02), np.arange(y_min, y_max, 0.02)) Z = logistic_model.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) fig, ax = plt.subplots() ax.contourf(xx, yy, Z, alpha=0.8) ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, edgecolors=\'k\', marker=\'o\') ax.set_xlabel(iris.feature_names[0]) ax.set_ylabel(iris.feature_names[1]) plt.title(\'Logistic Regression Decision Boundaries and Training Data\') return logistic_model, ax"},{"question":"Design a function `find_frequency_sensitive_index(word_list)` that takes a list of words and returns the index of the first word that would appear last if the list were sorted in ascending lexicographical order. In case of ties (words with the same lexicographical order appearing more than once), return the smallest index. # Input - A list `word_list` of strings, where each string consists of lowercase English letters. # Output - An integer representing the index of the first word that would appear last in a sorted version of the input list. # Constraints - `1 <= len(word_list) <= 1000` (The length of the list is between 1 and 1000) - All words consist of lowercase alphabetical characters (\'a\' to \'z\') only - Words in the list are at most 100 characters long # Examples Example 1: ```python word_list = [\\"apple\\", \\"orange\\", \\"banana\\", \\"mango\\"] result = find_frequency_sensitive_index(word_list) print(result) # Output: 1 # Explanation: When sorted, the words are [\\"apple\\", \\"banana\\", \\"mango\\", \\"orange\\"], and \\"orange\\" is last. \\"orange\\" appears first at index 1. ``` Example 2: ```python word_list = [\\"cat\\", \\"bat\\", \\"rat\\", \\"mat\\"] result = find_frequency_sensitive_index(word_list) print(result) # Output: 2 # Explanation: When sorted, the words are [\\"bat\\", \\"cat\\", \\"mat\\", \\"rat\\"], and \\"rat\\" is last. \\"rat\\" appears first at index 2. ``` # Example 3: ```python word_list = [\\"hello\\", \\"hello\\", \\"world\\"] result = find_frequency_sensitive_index(word_list) print(result) # Output: 2 # Explanation: When sorted, the words are [\\"hello\\", \\"hello\\", \\"world\\"], and \\"world\\" is last. \\"world\\" appears first at index 2. ``` **Function Signature:** ```python def find_frequency_sensitive_index(word_list: list) -> int: ... ```","solution":"def find_frequency_sensitive_index(word_list): Returns the index of the first word that would appear last if the list were sorted in ascending lexicographical order. In case of ties, returns the smallest index. if not word_list: return -1 # Return -1 for empty list # Find the word that comes last in lexicographical order last_word = max(word_list) # Return the first occurrence index of this word return word_list.index(last_word)"},{"question":"Implement a function that simulates a simplified stock trading system, which calculates the maximum profit that can be achieved from buying and selling a single stock in a given list of daily stock prices. The function should return the maximum profit possible, or zero if no profit can be made. # Function Signature ```python def max_stock_profit(prices): Given a list `prices` representing the daily prices of a stock, this function returns the maximum profit one can achieve from a single buy and a single sell. If no profit is possible, it returns 0. Parameters: prices (list of int): List of integers representing the stock prices. Returns: int: The maximum possible profit, or 0 if no profit is possible. pass ``` # Requirements: 1. The function must process the list in a single pass (O(n) time complexity). 2. The solution should retain a constant space complexity (O(1)). 3. The function should handle edge cases such as: - An empty list. - A list with only one price. - Non-positive prices (0 or negative values). # Example: ```python prices = [7, 1, 5, 3, 6, 4] result = max_stock_profit(prices) print(result) # Output: 5 (Buy at 1, Sell at 6) prices = [7, 6, 4, 3, 1] result = max_stock_profit(prices) print(result) # Output: 0 (No profit can be made) ``` # Explanation: For the input list `[7, 1, 5, 3, 6, 4]`, the maximum profit is 5, which is achieved by buying at 1 and selling at 6. For the input list `[7, 6, 4, 3, 1]`, no profit can be achieved as prices are continuously declining, so the function returns 0.","solution":"def max_stock_profit(prices): Given a list `prices` representing the daily prices of a stock, this function returns the maximum profit one can achieve from a single buy and a single sell. If no profit is possible, it returns 0. Parameters: prices (list of int): List of integers representing the stock prices. Returns: int: The maximum possible profit, or 0 if no profit is possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are tasked with evaluating an e-commerce dataset to identify and analyze the product ratings. The dataset is provided as a pandas DataFrame and contains the following columns, which may or may not be present: 1. `Product ID`: Unique identifier for each product. 2. `Rating`: Rating given to the product (e.g., 1 to 5 stars). 3. `Review Date`: Date the review was submitted. 4. `Review Text`: Text content of the review. 5. `Customer ID`: Unique identifier for each customer. Your goal is to write a function `analyze_product_ratings(df)` that takes in a pandas DataFrame `df` and performs the following tasks: 1. Verify if the \'Rating\' column exists, and if so, calculate and print the following: - Average rating of all products. - Total number of ratings. 2. Check if the \'Product ID\' column exists, and if so, print the product(s) with the highest average rating (minimum 10 ratings) and the product(s) with the lowest average rating (minimum 10 ratings). 3. Determine if the \'Review Date\' column exists, and if so: - Print the earliest review date using `numpy.min`. - Print the most recent review date using `numpy.max`. - Calculate and print the number of reviews per year by grouping and summing the reviews. 4. Measure the execution time of your function and print the elapsed time. Provide appropriate messages if any of these columns are missing. ```python import pandas as pd import numpy as np import time def analyze_product_ratings(df): # Start the timer start_time = time.time() # Display average rating and total number of ratings if \'Rating\' in df: avg_rating = df[\'Rating\'].mean() total_ratings = df[\'Rating\'].count() print(f\'The average rating of all products is: {avg_rating:.2f}\') print(f\'The total number of ratings is: {total_ratings}\') else: print(\'This dataset does not include information about ratings!\') # Display products with the highest and lowest average ratings (minimum 10 ratings) if \'Product ID\' in df and \'Rating\' in df: product_ratings = df.groupby(\'Product ID\').agg({\'Rating\': [\'mean\', \'count\']}) product_ratings.columns = [\'Average Rating\', \'Count\'] filtered_ratings = product_ratings[product_ratings[\'Count\'] >= 10] if not filtered_ratings.empty: highest_avg_rating = filtered_ratings[\'Average Rating\'].idxmax() highest_avg_value = filtered_ratings[\'Average Rating\'].max() lowest_avg_rating = filtered_ratings[\'Average Rating\'].idxmin() lowest_avg_value = filtered_ratings[\'Average Rating\'].min() print(f\'Product with the highest average rating (minimum 10 ratings): {highest_avg_rating} with an average rating of {highest_avg_value:.2f}\') print(f\'Product with the lowest average rating (minimum 10 ratings): {lowest_avg_rating} with an average rating of {lowest_avg_value:.2f}\') else: print(\'No products have at least 10 ratings.\') else: print(\'This dataset does not include information about product IDs or ratings!\') # Display earliest, most recent review dates, and reviews per year if \'Review Date\' in df: earliest_review = np.min(df[\'Review Date\']) most_recent_review = np.max(df[\'Review Date\']) reviews_per_year = df[\'Review Date\'].dt.year.value_counts().sort_index() print(f\'The earliest review date is: {earliest_review}\') print(f\'The most recent review date is: {most_recent_review}\') print(f\'Number of reviews per year:n{reviews_per_year}\') else: print(\'This dataset does not include information about review dates!\') # Print the time taken print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\' * 40) ```","solution":"import pandas as pd import numpy as np import time def analyze_product_ratings(df): # Start the timer start_time = time.time() # Display average rating and total number of ratings if \'Rating\' in df.columns: avg_rating = df[\'Rating\'].mean() total_ratings = df[\'Rating\'].count() print(f\'The average rating of all products is: {avg_rating:.2f}\') print(f\'The total number of ratings is: {total_ratings}\') else: print(\'This dataset does not include information about ratings!\') # Display products with the highest and lowest average ratings (minimum 10 ratings) if \'Product ID\' in df.columns and \'Rating\' in df.columns: product_ratings = df.groupby(\'Product ID\').agg({\'Rating\': [\'mean\', \'count\']}) product_ratings.columns = [\'Average Rating\', \'Count\'] filtered_ratings = product_ratings[product_ratings[\'Count\'] >= 10] if not filtered_ratings.empty: highest_avg_rating = filtered_ratings[\'Average Rating\'].idxmax() highest_avg_value = filtered_ratings[\'Average Rating\'].max() lowest_avg_rating = filtered_ratings[\'Average Rating\'].idxmin() lowest_avg_value = filtered_ratings[\'Average Rating\'].min() print(f\'Product with the highest average rating (minimum 10 ratings): {highest_avg_rating} with an average rating of {highest_avg_value:.2f}\') print(f\'Product with the lowest average rating (minimum 10 ratings): {lowest_avg_rating} with an average rating of {lowest_avg_value:.2f}\') else: print(\'No products have at least 10 ratings.\') else: print(\'This dataset does not include information about product IDs or ratings!\') # Display earliest, most recent review dates, and reviews per year if \'Review Date\' in df.columns: earliest_review = np.min(df[\'Review Date\']) most_recent_review = np.max(df[\'Review Date\']) reviews_per_year = df[\'Review Date\'].dt.year.value_counts().sort_index() print(f\'The earliest review date is: {earliest_review}\') print(f\'The most recent review date is: {most_recent_review}\') print(f\'Number of reviews per year:n{reviews_per_year}\') else: print(\'This dataset does not include information about review dates!\') # Print the time taken print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\' * 40)"},{"question":"Write a function that takes a list of strings and a target string as input. The function should systematically search through the list to find the target string. If the target string is found, return the index at which it occurs. If the target string is not in the list, return -1. This function should be implemented without using built-in list methods. The function should output: int: The index of the found string or -1 if not found. You should write self-contained code starting with: ``` def task_func(lst, target): ```","solution":"def task_func(lst, target): Searches for the target string in the list of strings and returns the index if found. Returns -1 if the target string is not found. :param lst: List of strings to search through. :param target: The string to search for. :return: Index of the target string if found, otherwise -1. for i in range(len(lst)): if lst[i] == target: return i return -1"},{"question":"You are required to create a function that checks whether a given word can be constructed using characters from a provided grid of letters. This exercise will test your understanding of grid traversal and letter matching in a 2D context. # Function Requirements: - **Function Name:** `can_construct_word` - **Parameters:** - `grid` (list of list of str): A 2D list representing the grid of letters. - `word` (str): The word to be constructed. # Detailed Instructions: 1. **Grid Details:** - The grid is a list of list of single-character strings. - You are allowed to move in all 8 directions: horizontally, vertically, and diagonally. - You cannot use the same letter cell twice in one word construction. 2. **Helper Function:** - Create a helper function `search_from_cell(grid, word, row, col, index, visited)` that: - Takes the current cell position and the index in the word being matched. - Uses a set `visited` to keep track of visited cells. - Returns `True` if the entire word can be constructed from the given starting cell, otherwise `False`. 3. **Main Function Logic:** - Iterate over each cell in the grid. - For each cell, call the `search_from_cell` to see if you can construct the word starting from that cell. - If any call to `search_from_cell` returns `True`, return `True`. - Return `False` if the word cannot be constructed from any starting cell. # Example: ```python grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" def result = can_construct_word(grid, word) print(result) # Output: True ``` # Example Usage: ```python def main(): grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" print(can_construct_word(grid, word)) # Output: True word2 = \\"SEE\\" print(can_construct_word(grid, word2)) # Output: True word3 = \\"ABCB\\" print(can_construct_word(grid, word3)) # Output: False if __name__ == \\"__main__\\": main() ```","solution":"def search_from_cell(grid, word, row, col, index, visited): if index == len(word): return True if (row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or (row, col) in visited or grid[row][col] != word[index]): return False visited.add((row, col)) # Move in all 8 directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] for dr, dc in directions: if search_from_cell(grid, word, row + dr, col + dc, index + 1, visited): return True visited.remove((row, col)) return False def can_construct_word(grid, word): for row in range(len(grid)): for col in range(len(grid[0])): if search_from_cell(grid, word, row, col, 0, set()): return True return False"},{"question":"You need to create a function that performs different operations based on user input. The function `patient_data_operations` should: 1. Prompt the user to enter an option: - If the input is `1`, prompt the user to enter a patient\'s name and age, and add this data to a file named \\"patients.txt\\". - If the input is `2`, display the content of the \\"patients.txt\\" file. - If the input is `3`, print a message indicating the return to the main menu. 2. Handle exceptions where the user input is not an integer, printing a relevant message. 3. Handle file-related errors (e.g., file not found), printing a relevant message. The \\"patients.txt\\" file should store patient data in the following format: ``` Name: [Patient\'s name], Age: [Patient\'s age] ``` **Function Signature:** `def patient_data_operations() -> None` **Example:** Assume the \\"patients.txt\\" file is initially empty. - If the user inputs `1` and then enters `John` for the name and `25` for the age, the function should add: ``` Name: John, Age: 25 ``` to \\"patients.txt\\". - If the user inputs `2`, the function should display the content of \\"patients.txt\\": ``` Name: John, Age: 25 ``` - If the user inputs `3`, the function should print: ``` Returning to the main menu. ``` - If the user inputs an invalid option or a non-integer value, the function should print a relevant error message. - If the file-related operations (like reading the file when it does not exist) fail, it should print: ``` Error: Unable to access file. ```","solution":"def patient_data_operations(): try: option = int(input(\\"Enter an option (1 to add data, 2 to view data, 3 to return to main menu): \\")) if option == 1: name = input(\\"Enter patient\'s name: \\") age = input(\\"Enter patient\'s age: \\") with open(\\"patients.txt\\", \\"a\\") as file: file.write(f\\"Name: {name}, Age: {age}n\\") elif option == 2: try: with open(\\"patients.txt\\", \\"r\\") as file: content = file.read() print(content) except FileNotFoundError: print(\\"Error: Unable to access file.\\") elif option == 3: print(\\"Returning to the main menu.\\") else: print(\\"Invalid option selected.\\") except ValueError: print(\\"Error: Input is not an integer.\\")"},{"question":"Given a list of strings `words` and an integer `min_length`, write a function `filter_words(words, min_length)` that returns a new list containing only the words from the input list that are at least `min_length` characters long. If the input list is empty, the function should return an empty list. Ensure the function uses Python\'s list comprehension for compactness and efficiency. Function Signature: ```python def filter_words(words: List[str], min_length: int) -> List[str]: ``` # Example ```python filter_words([\\"apple\\", \\"banana\\", \\"fig\\", \\"kiwi\\"], 5) # Should return [\'apple\', \'banana\'] filter_words([\\"sun\\", \\"moon\\", \\"star\\"], 4) # Should return [\'moon\', \'star\'] filter_words([], 3) # Should return [] filter_words([\\"a\\", \\"ab\\", \\"abc\\"], 2) # Should return [\'ab\', \'abc\'] ``` # Constraints 1. Each word in `words` can contain up to `10^3` characters. 2. `min_length` is a non-negative integer. 3. The list `words` can contain up to `10^4` elements.","solution":"from typing import List def filter_words(words: List[str], min_length: int) -> List[str]: Returns a list of words that are at least `min_length` characters long. :param words: List of words to filter. :param min_length: Minimum length a word must be to be included in the result. :return: List of filtered words. return [word for word in words if len(word) >= min_length]"},{"question":"You are given the task of parsing log files to extract certain statistical information about website visits and plotting the visits per day. You must write a function that reads a log file where each line represents a visit and contains timestamps and user IP addresses. The function should process this log data to compute and plot the number of visits per day using the `matplotlib` library. Function name: `plot_daily_visits` # Inputs: 1. **logfile** (str): The name of the log file containing visit information. Each line in the log file is formatted as: `\'YYYY-MM-DD HH:MM:SS, IP_ADDRESS\'`. 2. **date_column** (str): The specific column that contains the date and time information, typically specified as \'timestamp\' in the log file’s structure. # Outputs: - A plot visualizing the number of visits per day. - The plot should be saved as \'daily_visits.png\'. # Instructions: 1. Use the `pandas` library to read and process the log file. 2. Extract the date part from each timestamp in the log file and count the number of visits for each day. 3. Use `plt.title` to set the title of the plot to \\"Daily Website Visits\\". 4. Use `matplotlib.pyplot` to create and customize the plot showing the number of visits per day. 5. Save the plot as \'daily_visits.png\'. # Example: ```python plot_daily_visits(\'weblog.txt\', \'timestamp\') ``` This should read \'weblog.txt\', compute the daily visit counts, plot them, and save the plot as \'daily_visits.png\'.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_daily_visits(logfile, date_column): Reads a log file and plots the number of daily visits. Args: logfile (str): The name of the log file containing visit information. date_column (str): The specific column that contains the date and time information. Returns: None. A plot is saved as \'daily_visits.png\'. # Read the log file into a pandas DataFrame log_data = pd.read_csv(logfile, names=[\'timestamp\', \'ip_address\']) # Convert the timestamp column to datetime log_data[date_column] = pd.to_datetime(log_data[date_column]) # Extract the date part from the timestamp log_data[\'date\'] = log_data[date_column].dt.date # Count the number of visits for each day daily_visits = log_data[\'date\'].value_counts().sort_index() # Plot the number of visits per day plt.figure(figsize=(10, 6)) daily_visits.plot(kind=\'bar\') plt.title(\'Daily Website Visits\') plt.xlabel(\'Date\') plt.ylabel(\'Number of Visits\') plt.xticks(rotation=45) plt.tight_layout() # Save the plot as \'daily_visits.png\' plt.savefig(\'daily_visits.png\') plt.close()"},{"question":"**Background:** You have been tasked with analyzing a string to determine the frequency of each character within it. This is a common problem in text processing and requires knowledge of string manipulation and dictionary operations in Python. **Task:** Write a function `char_frequency` that: 1. Accepts a string as an input. 2. Computes the frequency of each character in the string. 3. Returns a dictionary with characters as keys and their corresponding frequencies as values. You can assume the input string will only contain alphabetic characters (both uppercase and lowercase are treated as different characters). **Function Signature:** ```python def char_frequency(input_str: str) -> dict: # Function implementation here ``` **Examples:** 1. Given the input: ```python input_str = \\"apple\\" ``` The output should be: ```python {\'a\': 1, \'p\': 2, \'l\': 1, \'e\': 1} ``` 2. Given the input: ```python input_str = \\"Banana\\" ``` The output should be: ```python {\'B\': 1, \'a\': 3, \'n\': 2} ``` **Requirements:** - Your function should correctly handle both lowercase and uppercase characters. - You must return the results in the form of a dictionary with characters as keys and their corresponding frequencies as values.","solution":"def char_frequency(input_str: str) -> dict: Computes the frequency of each character in the given input string. Args: input_str (str): The input string to analyze. Returns: dict: A dictionary with characters as keys and their frequencies as values. frequency = {} for char in input_str: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"You are required to write a function named `generate_primes` that returns a list of prime numbers up to a given number `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your function should handle the case where `n` is less than 2 by returning an empty list. If `n` is a non-integer, the function should print an error message and return `None`. Function Signature: ```python def generate_primes(n: int) -> list: ``` Requirements: 1. **The function must use the Sieve of Eratosthenes algorithm for generating prime numbers.** 2. **Handle the case where `n` is less than 2 by returning an empty list.** 3. **If `n` is a non-integer, print an error message and return `None`.** Example Usage: ```python generate_primes(10) ``` Expected output: ```python [2, 3, 5, 7] ``` If `n` is less than 2: ```python generate_primes(1) ``` Expected output: ```python [] ``` If `n` is a non-integer: ```python generate_primes(10.5) ``` Expected output: ```python \\"Error: The input must be an integer.\\" ```","solution":"def generate_primes(n: int) -> list: Returns a list of prime numbers up to a given number `n` using the Sieve of Eratosthenes algorithm. if not isinstance(n, int): print(\\"Error: The input must be an integer.\\") return None if n < 2: return [] # Sieve of Eratosthenes algorithm to find all primes less than or equal to n sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Create a function that takes a list of strings and a target length k, and returns a new list of strings where each string that is shorter than k is appended with the characters \'*\' to make its length equal to k. Strings longer than or equal to k should remain unchanged. The function should begin with: ``` def pad_strings(strings, k): ```","solution":"def pad_strings(strings, k): Returns a new list of strings where each string that is shorter than k is appended with \'*\' to make its length equal to k. Strings longer than or equal to k remain unchanged. Args: strings (list of str): List of strings to process k (int): Target length for each string in the result list Returns: list of str: Processed list of strings return [s if len(s) >= k else s + \'*\' * (k - len(s)) for s in strings]"},{"question":"In this problem, you are asked to write a Python function `find_second_largest(nums: list)` that returns the second largest number in a given list of integers. The function should handle cases where there are duplicates and negative numbers. You should not use the built-in `sorted` function for this task. Here are the steps you must follow: 1. **Check if the list has at least two unique numbers**: If the list has fewer than two unique numbers, return `None`. 2. **Find the largest number**: Loop through the list to find the largest number. 3. **Find the second largest number**: Loop through the list again to find the second largest number, which should be smaller than the largest number but greater than all other numbers. Function signature: ```python def find_second_largest(nums: list) -> int: ``` # Constraints: - The list may contain positive and negative integers. - The list may contain duplicate numbers. - If the list does not have a second largest unique number, return `None`. # Example: If the input list is: ```python [10, 5, 10, 3, 2] ``` After calling `find_second_largest([10, 5, 10, 3, 2])`, the function should return: ``` 5 ``` If the input list is: ```python [5, 5, 5] ``` After calling `find_second_largest([5, 5, 5])`, the function should return: ``` None ``` If the input list is: ```python [7, 7, 7, 7, 6] ``` After calling `find_second_largest([7, 7, 7, 7, 6])`, the function should return: ``` 6 ``` # Note: - Ensure that the function handles edge cases, such as lists with all identical numbers, appropriately. - Avoid using Python\'s built-in `sorted` or equivalent functions to sort the list directly. Perform the checks and find the second largest number using loops and conditionals only.","solution":"def find_second_largest(nums: list) -> int: if len(nums) < 2: return None first_largest = second_largest = None for num in nums: if first_largest is None or num > first_largest: second_largest = first_largest first_largest = num elif num != first_largest and (second_largest is None or num > second_largest): second_largest = num return second_largest"},{"question":"In this problem, we are going to calculate the distance between two points on the surface of a sphere, also known as the great-circle distance or spherical distance. The Haversine formula is used to calculate the distance between two points on the surface of a sphere given their latitudes and longitudes. The formula is expressed as follows: [ a = sin^2left(frac{Deltaphi}{2}right) + cos(phi_1) cdot cos(phi_2) cdot sin^2left(frac{Deltalambda}{2}right) ] [ c = 2 cdot text{atan2}left(sqrt{a}, sqrt{1-a}right) ] [ d = R cdot c ] where: - ( phi_1 ) and ( phi_2 ) are the latitudes of the two points in radians. - ( lambda_1 ) and ( lambda_2 ) are the longitudes of the two points in radians. - (Deltaphi = phi_2 - phi_1 ) - (Deltalambda = lambda_2 - lambda_1 ) - ( R ) is the Earth\'s radius (mean radius = 6,371 km). - ( d ) is the distance between the two points along the surface of the sphere. To compute the distance, you will use the following libraries: - `numpy` for numerical operations. - `numpy.radians` to convert degrees to radians. - `numpy.sin` and `numpy.cos` for trigonometric operations. - `numpy.sqrt` and `numpy.arctan2` for additional mathematical operations. **Function Signature:** ```python def haversine_distance(lat1, lon1, lat2, lon2, radius=6371.0): Parameters ---------- lat1 : float Latitude of the first point in degrees. lon1 : float Longitude of the first point in degrees. lat2 : float Latitude of the second point in degrees. lon2 : float Longitude of the second point in degrees. radius : float, optional Radius of the Earth, default is 6371.0 km. Returns ------- float Great-circle distance between the two points in kilometers. ``` **Requirements:** - Use `numpy.radians` to convert latitudes and longitudes from degrees to radians. - Calculate the differences in latitude and longitude. - Compute the Haversine formula using trigonometric and arithmetical operations. - Return the distance in kilometers. **Example:** ```python lat1 = 36.12 lon1 = -86.67 lat2 = 33.94 lon2 = -118.40 radius = 6371.0 distance = haversine_distance(lat1, lon1, lat2, lon2, radius) print(distance) # Expected to output the great-circle distance between the given coordinates approximately 2887.26 km ```","solution":"import numpy as np def haversine_distance(lat1, lon1, lat2, lon2, radius=6371.0): Calculate the great-circle distance between two points on the Earth\'s surface using the Haversine formula. Parameters ---------- lat1 : float Latitude of the first point in degrees. lon1 : float Longitude of the first point in degrees. lat2 : float Latitude of the second point in degrees. lon2 : float Longitude of the second point in degrees. radius : float, optional Radius of the Earth, default is 6371.0 km. Returns ------- float Great-circle distance between the two points in kilometers. # Convert latitudes and longitudes from degrees to radians lat1_rad, lon1_rad = np.radians(lat1), np.radians(lon1) lat2_rad, lon2_rad = np.radians(lat2), np.radians(lon2) # Compute differences delta_lat = lat2_rad - lat1_rad delta_lon = lon2_rad - lon1_rad # Haversine formula a = np.sin(delta_lat / 2)**2 + np.cos(lat1_rad) * np.cos(lat2_rad) * np.sin(delta_lon / 2)**2 c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a)) d = radius * c return d"},{"question":"You are asked to design a Python function that determines the number of distinct islands in a 2D grid. Each island is a group of 1s (land) connected horizontally or vertically (not diagonally). The grid contains only 0s (water) and 1s (land). Your task is to write the function `count_islands` which will take a 2D list of integers representing the grid as input, and return the number of distinct islands. To achieve this, you can use Depth-First Search (DFS) to explore each island and mark it as visited. **Function Signature:** ```python def count_islands(grid: List[List[int]]) -> int: # Your code here ``` **Example:** ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [1, 0, 0, 0, 0], [1, 1, 0, 0, 1] ] count_islands(grid) # Returns: 4 ``` **Implementation Notes:** - Iterate through each cell in the grid. - When a 1 is found, initiate a DFS marking all connected 1s as visited (changing them to 0). - Each initiation of DFS corresponds to finding a new island. - Continue until all cells have been checked.","solution":"from typing import List def count_islands(grid: List[List[int]]) -> int: Returns the number of distinct islands in the given 2D grid. if not grid: return 0 def dfs(x, y): # Boundary checks if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return # Mark the current cell as visited by setting it to 0 grid[x][y] = 0 # Explore the neighboring cells dfs(x-1, y) # up dfs(x+1, y) # down dfs(x, y-1) # left dfs(x, y+1) # right num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: num_islands += 1 dfs(i, j) return num_islands"},{"question":"You are required to implement a function called `find_min_max()` that takes a list of integers as input and returns a tuple containing the minimum and maximum values from the list. Ensure that the function handles both empty lists and lists with only one element gracefully. Here is a template to help visualize your task: ```python def find_min_max(numbers): # Step 1: Check if the list is empty and handle accordingly # Step 2: Initialize the minimum and maximum values with the first element of the list # Step 3: Iterate through the list to find the actual minimum and maximum values # Step 4: Return a tuple containing the minimum and maximum values ``` Example usage: ```python print(find_min_max([3, 1, 4, 1, 5, 9, 2, 6])) # Output: (1, 9) print(find_min_max([10])) # Output: (10, 10) print(find_min_max([])) # Output: (None, None) ``` **Requirements:** - The function should return a tuple containing `(None, None)` for an empty list. - The function should return a tuple containing `(min_value, max_value)` for non-empty lists, where `min_value` is the minimum value in the list and `max_value` is the maximum value in the list. - Do not use built-in functions like `min()` and `max()` to find the minimum and maximum values; use iteration instead. Implement your solution in the function `find_min_max()`.","solution":"def find_min_max(numbers): # Handle empty list if not numbers: return (None, None) # Initialize min and max values with the first element min_value = max_value = numbers[0] # Iterate through the list to find min and max values for num in numbers[1:]: if num < min_value: min_value = num if num > max_value: max_value = num return (min_value, max_value)"},{"question":"Write a function that takes a list of strings and returns a dictionary where the keys are the unique strings from the list and the values are the frequency of each string. The function should be case-insensitive and ignore leading and trailing whitespace. If the list is empty, return an empty dictionary. The function should be defined as: ``` def count_string_frequencies(strings): ``` Example: ``` Input: [\\"apple\\", \\"Banana\\", \\"apple\\", \\" banana\\", \\"Cherry\\", \\"cherry\\", \\"banana\\"] Output: {\'apple\': 2, \'banana\': 3, \'cherry\': 2} ```","solution":"def count_string_frequencies(strings): Returns a dictionary with the frequency count of unique strings from the list. The function is case-insensitive and ignores leading and trailing whitespace. frequency_dict = {} for string in strings: normalized_string = string.strip().lower() if normalized_string in frequency_dict: frequency_dict[normalized_string] += 1 else: frequency_dict[normalized_string] = 1 return frequency_dict"},{"question":"Implement a function that takes a list of integers and a window size, and returns the maximum values in each sliding window of the given size. The function should raise an exception for: ValueError: If the given window size is not a positive integer or is larger than the length of the given list. The output should be a list of integers representing the highest value within each window. You should write self-contained code starting with: ``` from collections import deque def sliding_window_max(nums, k): ```","solution":"from collections import deque def sliding_window_max(nums, k): Returns a list of the maximum values in each sliding window of size k. Args: nums: List[int] - The list of integers. k: int - The size of the sliding window. Returns: List[int] - The list of maximum values in each sliding window. Raises: ValueError: If the window size is not a positive integer or is larger than the length of the nums list. if not isinstance(k, int) or k <= 0: raise ValueError(\\"Window size must be a positive integer.\\") if k > len(nums): raise ValueError(\\"Window size must not be larger than the length of the list.\\") dq = deque() max_values = [] for i, num in enumerate(nums): while dq and dq[0] < i - k + 1: dq.popleft() while dq and nums[dq[-1]] <= num: dq.pop() dq.append(i) if i >= k - 1: max_values.append(nums[dq[0]]) return max_values"},{"question":"You are required to implement a function in Python that performs basic arithmetic operations on a list of numbers. The function should accept two arguments: a list of integers and a string representing the operation to perform (`\'add\'`, `\'subtract\'`, `\'multiply\'`, `\'divide\'`). The function should follow these steps: 1. Check if the provided operation is valid (`\'add\'`, `\'subtract\'`, `\'multiply\'`, or `\'divide\'`). If the operation is not valid, raise a `ValueError` with an appropriate message. 2. Depending on the operation, perform the corresponding arithmetic operation on all the elements in the list. - If the operation is `\'add\'`, return the sum of all elements. - If the operation is `\'subtract\'`, return the result of subtracting all subsequent elements from the first element. - If the operation is `\'multiply\'`, return the product of all elements. - If the operation is `\'divide\'`, return the result of dividing the first element by all subsequent elements sequentially. You must handle the case where division by zero might occur by raising a `ZeroDivisionError`. 3. Print the result of the operation. Define the function as: ```python def perform_arithmetic_operations(numbers: list, operation: str) -> float: # implementation here ```","solution":"def perform_arithmetic_operations(numbers: list, operation: str) -> float: if operation not in (\'add\', \'subtract\', \'multiply\', \'divide\'): raise ValueError(f\\"Invalid operation {operation}. Must be \'add\', \'subtract\', \'multiply\', or \'divide\'.\\") if not numbers: raise ValueError(\\"The list of numbers cannot be empty.\\") if operation == \'add\': return sum(numbers) if operation == \'subtract\': result = numbers[0] for num in numbers[1:]: result -= num return result if operation == \'multiply\': result = 1 for num in numbers: result *= num return result if operation == \'divide\': result = numbers[0] for num in numbers[1:]: if num == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") result /= num return result"},{"question":"You are tasked with creating a function named `decode_message` that decodes a message encoded using a simple shift cipher (Caesar cipher). Each character in the message is shifted a certain number of places down the alphabet. The shift value and the alphabet wrap around (i.e., after \'z\' comes \'a\'). **Objective**: 1. Implement a function that accepts a string and an integer representing the shift value. 2. Decode the message by reversing the shift for each character. 3. Maintain the case of each character (i.e., uppercase characters should remain uppercase and lowercase characters should remain lowercase). 4. Non-letter characters should remain unchanged. # Requirements: - Use ASCII values to shift characters. - Handle both uppercase and lowercase letters. **Function Signature**: ```python def decode_message(encoded_message: str, shift: int) -> str: ``` **Example**: Given the encoded message: ``` \\"Khoor Zruog!\\" ``` and the shift value: ``` 3 ``` The function should return: ```python \\"Hello World!\\" ```","solution":"def decode_message(encoded_message: str, shift: int) -> str: def shift_char(c, shift): # Check if character is uppercase or lowercase and perform the shift if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') - shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') - shift) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, shift) for c in encoded_message)"},{"question":"You are tasked with processing a list of dictionaries, where each dictionary represents a customer\'s order. Each dictionary contains the keys: \'order_id\', \'customer_id\', \'order_date\', and \'order_amount\'. Your goal is to write a function that processes this list as follows: 1. Group the orders by `customer_id`. 2. For each customer, calculate the total order amount and count the number of orders placed. 3. Return a dictionary where the keys are `customer_id` and the values are dictionaries containing the total order amount and the number of orders for that customer. Function Signature: ```python def summarize_customer_orders(orders: list) -> dict: pass ``` # Parameters: - `orders` (list): A list of dictionaries, where each dictionary represents an order with the following keys: - `order_id` (str): The unique identifier for the order. - `customer_id` (str): The unique identifier for the customer who placed the order. - `order_date` (str): The date when the order was placed in the format \'YYYY-MM-DD\'. - `order_amount` (float): The amount for the order. # Returns: - `dict`: A dictionary where the keys are customer IDs and the values are dictionaries with the following structure: - `total_amount` (float): The total amount of all orders for that customer. - `order_count` (int): The total number of orders placed by that customer. # Example: ```python orders = [ {\'order_id\': \'001\', \'customer_id\': \'A1\', \'order_date\': \'2023-07-01\', \'order_amount\': 150.0}, {\'order_id\': \'002\', \'customer_id\': \'B1\', \'order_date\': \'2023-07-02\', \'order_amount\': 200.0}, {\'order_id\': \'003\', \'customer_id\': \'A1\', \'order_date\': \'2023-07-03\', \'order_amount\': 100.0}, ] result = summarize_customer_orders(orders) print(result) ``` Output: ```python { \'A1\': {\'total_amount\': 250.0, \'order_count\': 2}, \'B1\': {\'total_amount\': 200.0, \'order_count\': 1} } ``` # Note: - Ensure proper handling of empty lists. - Take care of float precision issues if any. - Handle any possible exceptions such as missing keys in dictionaries.","solution":"def summarize_customer_orders(orders): Processes a list of orders and groups them by customer_id, calculating the total order amount and number of orders for each customer. :param orders: List of dictionaries, each representing an order. :return: Dictionary with customer_id as keys and a dictionary containing \'total_amount\' and \'order_count\' as values. customer_summary = {} for order in orders: customer_id = order.get(\'customer_id\') order_amount = order.get(\'order_amount\', 0.0) if customer_id not in customer_summary: customer_summary[customer_id] = {\'total_amount\': 0.0, \'order_count\': 0} customer_summary[customer_id][\'total_amount\'] += order_amount customer_summary[customer_id][\'order_count\'] += 1 return customer_summary"},{"question":"You are provided with a file named `students.csv` which contains names of students and their scores in multiple subjects. Your task is to implement a function named `topPerformingStudents` that processes the CSV file to find the top performing students. The function should: 1. Read data from the `students.csv` file. 2. Calculate the average score of each student across all subjects. 3. Return the names and average scores of the top \'N\' performing students, where \'N\' is provided as a parameter. 4. Sort the top students by their average scores in descending order. In case of ties, sort their names alphabetically. The CSV file will have the following structure: ``` Name,Math,English,Science,History John Doe,85,78,92,86 Jane Smith,91,88,94,90 ... ``` The function should accept the following parameters: - `TOP_N`: Number of top performing students to return (default to 3). The output should be a list of tuples, where each tuple contains the student\'s name and their average score, sorted as described above. Here\'s a sample function signature: ```python def topPerformingStudents(TOP_N=3): # Your implementation ``` # Example Suppose `students.csv` contains the following data: ``` Name,Math,English,Science,History John Doe,85,78,92,86 Jane Smith,91,88,94,90 Alice Johnson,92,85,87,91 Bob Lee,78,82,80,81 ``` If you call `topPerformingStudents(2)`, it should return: ```python [(\'Jane Smith\', 90.75), (\'Alice Johnson\', 88.75)] ``` # Requirements - Ensure to handle the CSV reading and processing efficiently. - Use appropriate data structures to store and sort the student scores. - Handle cases where the number of students in the file is less than \'N\'.","solution":"import csv from operator import itemgetter def topPerformingStudents(TOP_N=3): students = [] # Read data from the \'students.csv\' file with open(\'students.csv\', mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: name = row[\'Name\'] scores = [int(row[subject]) for subject in row if subject != \'Name\'] average_score = sum(scores) / len(scores) students.append((name, average_score)) # Sort the students by average score (descending) and name (alphabetically) on tie students_sorted = sorted(students, key=lambda x: (-x[1], x[0])) # Get the top N students return students_sorted[:TOP_N]"},{"question":"You are given a list of pairs where each pair consists of a source node and a destination node representing a directed graph. Write a function `find_paths(graph, start_node, end_node)` that takes three arguments: the graph represented as a list of tuple pairs, the starting node, and the ending node. This function should return all possible paths from `start_node` to `end_node` without visiting any nodes more than once per path. Each path should be represented as a list of nodes. Your function should follow these steps: 1. Build an adjacency list from the list of pairs. 2. Use depth-first search (DFS) to find all paths from `start_node` to `end_node`. 3. Make sure that each node is visited at most once per path to avoid cycles. 4. Return a list of lists where each inner list represents a path from the `start_node` to the `end_node`. # Example ```python graph = [ (\'A\', \'B\'), (\'A\', \'C\'), (\'B\', \'C\'), (\'B\', \'D\'), (\'C\', \'D\'), (\'D\', \'E\') ] paths = find_paths(graph, \'A\', \'D\') print(paths) # Output: [[\'A\', \'B\', \'D\'], [\'A\', \'B\', \'C\', \'D\'], [\'A\', \'C\', \'D\']] ``` # Specifications - Assume all nodes are unique and represented by strings. - Return an empty list if there are no paths from `start_node` to `end_node`. - The order of the paths in the output list does not matter. You may use any standard Python libraries or data structures to aid your implementation.","solution":"def find_paths(graph, start_node, end_node): from collections import defaultdict # Build adjacency list from pairs adjacency_list = defaultdict(list) for src, dst in graph: adjacency_list[src].append(dst) # Helper function for DFS traversal def dfs(current_node, path, visited): path.append(current_node) visited.add(current_node) if current_node == end_node: paths.append(path[:]) else: for neighbor in adjacency_list[current_node]: if neighbor not in visited: dfs(neighbor, path, visited) path.pop() visited.remove(current_node) paths = [] dfs(start_node, [], set()) return paths"},{"question":"In this problem, you will implement a function `is_magic_square(matrix)` that determines if a given square matrix is a magic square. A magic square is a grid of numbers where the sums of any row, any column, and both main diagonals are all the same. The function should be defined as: ```python def is_magic_square(matrix): ... ``` # Inputs: - `matrix` (list of lists): A square matrix represented as a two-dimensional list of integers, where each sublist represents a row of the matrix. It is guaranteed that the input will always be a square matrix (i.e., the number of rows equals the number of columns). # Outputs: - The function should return a boolean value: `True` if the matrix is a magic square, `False` otherwise. # Steps to follow: 1. Compute the sum of the first row to use as the reference sum. 2. Ensure that all row sums match the reference sum. 3. Ensure that all column sums match the reference sum. 4. Ensure that the sums of both main diagonals match the reference sum. # Example: ```python matrix1 = [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] result = is_magic_square(matrix1) print(result) # Output should be True matrix2 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] result = is_magic_square(matrix2) print(result) # Output should be False ``` You are required to implement this function to accurately check if a given square matrix is a magic square by validating the sums of its rows, columns, and diagonals.","solution":"def is_magic_square(matrix): size = len(matrix) # Calculate the reference sum which is the sum of the first row ref_sum = sum(matrix[0]) # Check sums of all rows for row in matrix: if sum(row) != ref_sum: return False # Check sums of all columns for col in range(size): col_sum = sum(matrix[row][col] for row in range(size)) if col_sum != ref_sum: return False # Check main diagonal sum main_diag_sum = sum(matrix[i][i] for i in range(size)) if main_diag_sum != ref_sum: return False # Check anti-diagonal sum anti_diag_sum = sum(matrix[i][size-1-i] for i in range(size)) if anti_diag_sum != ref_sum: return False # If all checks are passed, it\'s a magic square return True"},{"question":"You are building a simple library management system for tracking books. Your task is to create functionality that logs borrowing and returning actions and randomly assigns a due date for each borrowed book. This will help you gain experience with the `random.randint` and `logging` libraries. Your task includes writing a function named `borrow_book(user, book)` that: 1. Takes two arguments: the user\'s name (string) and the book title (string). 2. Randomly assigns a due date ranging from 7 to 21 days after the current date. 3. Initializes a logging setup that logs activity to a file named `library_log.txt`. All logs should be captured at the INFO level. 4. Logs a message indicating the user, the book borrowed, and the due date. 5. Returns a dictionary with the user name as the key and a tuple containing the book title and due date as the value. **Specifications:** - Use `random.randint` to generate a random due date within the specified range. - Use `logging.getLogger` to get a logger and configure it to write logs to `library_log.txt`. - The due date should be a string in the format \\"YYYY-MM-DD\\". Use the `datetime` module to calculate and format the date.","solution":"import random import logging from datetime import datetime, timedelta def borrow_book(user, book): Logs the borrowing of a book with a due date and returns a dictionary with the user\'s name as key and a tuple of book and due date as value. Parameters: user (str): The name of the user. book (str): The title of the book. Returns: dict: A dictionary with user name as key and a tuple of book title and due date as the value. # Initialize logging logger = logging.getLogger(\'library\') logger.setLevel(logging.INFO) fh = logging.FileHandler(\'library_log.txt\') fh.setLevel(logging.INFO) formatter = logging.Formatter(\'%(asctime)s - %(message)s\') fh.setFormatter(formatter) logger.addHandler(fh) # Remove any existing handlers associated with the logger object. if logger.hasHandlers(): logger.handlers.clear() # Log to file setup logger.addHandler(fh) # Generate due date due_days = random.randint(7, 21) due_date = datetime.now() + timedelta(days=due_days) due_date_str = due_date.strftime(\\"%Y-%m-%d\\") # Log the borrowing action logger.info(f\\"User \'{user}\' borrowed \'{book}\' with a due date of {due_date_str}\\") # Return the borrowing information return {user: (book, due_date_str)}"},{"question":"In this exercise, you will implement a function named `process_transactions()` that simulates processing a batch of financial transactions. This function should demonstrate the usage of file handling, dictionaries, and exception handling in Python. Here are the key components and requirements for the `process_transactions()` function: 1. **Read Transactions from a File**: Open and read from a file named `transactions.txt`. Each line in the file represents a transaction in the format `transaction_id,amount`. 2. **Store Transactions in a Dictionary**: Use a dictionary to store the total amount for each unique `transaction_id`. If a `transaction_id` appears multiple times, sum the amounts. 3. **Write Results to a File**: Write the aggregated transaction amounts to a new file named `processed_transactions.txt`. Each line should contain a `transaction_id` and the associated total amount in the format `transaction_id: total_amount`. 4. **Handle Possible Errors**: Incorporate exception handling to manage potential file input/output errors and data format issues. Here are some additional details: - If `transactions.txt` does not exist or cannot be read, print an appropriate error message. - Skip any lines in `transactions.txt` that do not conform to the expected format, ignoring those lines without causing the program to crash. - Ensure that the results in `processed_transactions.txt` are written in a sorted order based on `transaction_id`. Below is the function signature you need to implement: ```python def process_transactions(): # Your code here ``` Make sure that your implementation correctly reads, processes, and writes the transaction data as described, handling any potential exceptions gracefully.","solution":"def process_transactions(): try: # Reading transactions from the file with open(\'transactions.txt\', \'r\') as file: transactions = {} for line in file: try: transaction_id, amount = line.strip().split(\',\') amount = float(amount) if transaction_id in transactions: transactions[transaction_id] += amount else: transactions[transaction_id] = amount except ValueError: # Skip lines with incorrect format continue # Sorting transactions by transaction_id and writing to a new file with open(\'processed_transactions.txt\', \'w\') as file: for transaction_id in sorted(transactions.keys()): file.write(f\\"{transaction_id}: {transactions[transaction_id]:.2f}n\\") except FileNotFoundError: print(\\"Error: \'transactions.txt\' file not found.\\") except IOError as e: print(f\\"IOError: {e}\\")"},{"question":"In this problem, you will write a function `find_first_non_repeating_char(s: str) -> str` that takes a string input consisting of only lowercase alphabetical characters and returns the first non-repeating character in the string. If all characters are repeating, return an empty string. To solve this problem, you can iterate through the string to count the occurrences of each character, and then find the first character with a count of 1. Function Signature ```python def find_first_non_repeating_char(s: str) -> str: pass ``` # Example ```python result1 = find_first_non_repeating_char(\\"swiss\\") print(result1) # Output: \'w\' result2 = find_first_non_repeating_char(\\"redivider\\") print(result2) # Output: \'v\' result3 = find_first_non_repeating_char(\\"aabbcc\\") print(result3) # Output: \'\' ``` # Explanation 1. In the first example, \\"swiss\\", the first character that does not repeat is \'w\'. 2. In the second example, \\"redivider\\", the first character that does not repeat is \'v\'. 3. In the third example, \\"aabbcc\\", all characters repeat, so the function returns an empty string. Follow these expectations: 1. The function should return the first non-repeating character. 2. If every character in the string repeats, return an empty string. 3. The string will always have only lowercase alphabetical characters.","solution":"def find_first_non_repeating_char(s: str) -> str: Returns the first non-repeating character in the string s. If all characters repeat, returns an empty string. character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 for char in s: if character_count[char] == 1: return char return \'\'"},{"question":"Implement a function that simulates a tic-tac-toe game. The function takes a sequence of moves and returns the state of the board and whether there is a winner. The board is a 3x3 grid, and the moves are provided as a list of tuples representing the row, column, and player (\'X\' or \'O\'). If a player wins, return the board state and the winner. If all moves are exhausted without a winner, return the board state and \'Draw\'. You should write self-contained code starting with: ``` def tic_tac_toe(moves): ```","solution":"def tic_tac_toe(moves): Simulates a tic-tac-toe game given a sequence of moves and returns the state of the board and the result (\'X\', \'O\', or \'Draw\'). Parameters: - moves: List of tuples (row, column, player) Returns: - board: 3x3 list representing the board state - result: \'X\' if player X wins, \'O\' if player O wins, \'Draw\' otherwise # Initialize the board board = [[\'\' for _ in range(3)] for _ in range(3)] # Make the moves for move in moves: row, col, player = move board[row][col] = player # Check for a winner for player in [\'X\', \'O\']: # Check rows, columns, and diagonals if any(all(board[r][c] == player for c in range(3)) for r in range(3)) or any(all(board[r][c] == player for r in range(3)) for c in range(3)) or all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)): return board, player # If no winner, check if the board is full if all(board[r][c] != \'\' for r in range(3) for c in range(3)): return board, \'Draw\' # If the game is not over return board, \'Game not finished\'"},{"question":"Write a function `triangle_type(a: int, b: int, c: int) -> str` that takes three integers representing the lengths of the sides of a triangle and returns a string indicating the type of triangle based on the lengths of its sides. The possible return values are: - \\"Equilateral\\" if all three sides are equal. - \\"Isosceles\\" if exactly two sides are equal. - \\"Scalene\\" if all three sides are different. - \\"Not a triangle\\" if the given sides do not form a valid triangle (i.e., they do not satisfy the triangle inequality theorem). Here are some steps your function can follow: 1. Check if the sides form a valid triangle. If not, return \\"Not a triangle\\". 2. If the sides form a valid triangle, determine if the triangle is Equilateral, Isosceles, or Scalene based on the side lengths. 3. Return the appropriate string based on the type of the triangle. Your task is to implement the function `triangle_type(a, b, c)` to achieve the above functionality. ```python def triangle_type(a: int, b: int, c: int) -> str: # Your implementation here ```","solution":"def triangle_type(a: int, b: int, c: int) -> str: Returns the type of triangle given the lengths of its sides. # Check if the inputs can form a valid triangle if a <= 0 or b <= 0 or c <= 0 or a + b <= c or a + c <= b or b + c <= a: return \\"Not a triangle\\" # Determine the type of triangle if a == b == c: return \\"Equilateral\\" elif a == b or b == c or a == c: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"In graph theory, a tree is a connected, undirected graph with no cycles. Given a tree with `n` nodes and `n-1` edges, a common task is to find the longest path in the tree, known as the tree\'s diameter. The diameter of a tree is the length (number of edges) of the longest path between any two nodes in the tree. Your task is to implement a function called `find_tree_diameter` that determines the diameter of a given tree. The tree is represented as an adjacency list, where each key is a node and the value is a list of nodes connected to it. Here are the specific requirements for the `find_tree_diameter` function: 1. The function should be named `find_tree_diameter`. 2. It should have one required parameter: - `adj_list` (a dictionary): The adjacency list representing the tree, where keys are node identifiers, and values are lists of adjacent nodes. 3. The function should return an integer representing the diameter of the tree. You must use Depth-First Search (DFS) for this task. **Function Signature:** ```python def find_tree_diameter(adj_list): ... ``` **Example:** ```python adj_list = { 0: [1], 1: [0, 2, 3], 2: [1], 3: [1, 4, 5], 4: [3], 5: [3, 6], 6: [5] } diameter = find_tree_diameter(adj_list) print(\\"Tree Diameter:\\", diameter) ``` **Expected Output:** ``` Tree Diameter: 5 ``` **Explanation:** In the example tree, the path that forms the diameter is one of the longest paths, such as 2 -> 1 -> 3 -> 5 -> 6 (with a length of 5 edges).","solution":"def find_tree_diameter(adj_list): Finds the diameter of the tree represented as an adjacency list. if not adj_list: return 0 def dfs(node, parent): Perform DFS to find the furthest node and its distance. max_distance = 0 furthest_node = node for neighbor in adj_list[node]: if neighbor == parent: continue distance, temp_node = dfs(neighbor, node) if distance + 1 > max_distance: max_distance = distance + 1 furthest_node = temp_node return max_distance, furthest_node # Step 1: Find the farthest node from any node (e.g., node 0) start_node = next(iter(adj_list)) # Arbitrary starting node _, furthest = dfs(start_node, None) # Step 2: Find the farthest node from the \'furthest\' node found diameter, _ = dfs(furthest, None) return diameter"},{"question":"You are provided with a list of strings representing mathematical expressions and you need to evaluate and return the results of these expressions. Implement a function called `evaluate_expressions` that takes a list of strings as input and returns a list of results for each expression. For this task, ensure the following: 1. Each string in the input list is a valid mathematical expression consisting of digits, operators (+, -, *, /), and parentheses. 2. The function `evaluate_expressions` should return a list of results, where each result is the evaluation of the corresponding expression. 3. Use Python\'s built-in `eval` function to evaluate the expressions safely, ensuring proper handling of any potentially dangerous operations. **Constraints:** - The input list will contain between 1 and 100 expressions. - Each expression will be a valid Python expression and not longer than 100 characters. Example usage of your function would be: ```python expressions = [\'2 + 3 * 5\', \'(10 - 2) / 4\', \'3 * (8 + 2)\', \'7 + 6 / 2\'] results = evaluate_expressions(expressions) print(results) # Output: [17, 2.0, 30, 10.0] ``` You should ensure the function works correctly for a variety of valid mathematical expressions.","solution":"def evaluate_expressions(expressions): Evaluates a list of mathematical expressions and returns the results. Parameters: expressions (list of str): A list containing the mathematical expressions as strings. Returns: list: A list containing the result of each expression. results = [eval(expression) for expression in expressions] return results"},{"question":"You are tasked with writing a function that takes an integer `n` and returns a list of the first `n` Fibonacci numbers. The Fibonacci sequence is defined as follows: - `F(0) = 0` - `F(1) = 1` - For `n >= 2`, `F(n) = F(n - 1) + F(n - 2)` Write a function named `generate_fibonacci` that receives an integer argument `n` and returns a list of the first `n` Fibonacci numbers. # Requirements: - Your function should handle input values `n` in the range `[0, 50]`. # Function Signature: ```python def generate_fibonacci(n: int) -> list: # Your implementation here ``` # Examples: 1. `generate_fibonacci(0)` should return `[]` because there are no numbers in the sequence. 2. `generate_fibonacci(1)` should return `[0]` because the first Fibonacci number is `0`. 3. `generate_fibonacci(5)` should return `[0, 1, 1, 2, 3]` because the first 5 Fibonacci numbers are `0, 1, 1, 2, 3`. 4. `generate_fibonacci(10)` should return `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]` because the first 10 Fibonacci numbers are `0, 1, 1, 2, 3, 5, 8, 13, 21, 34`. # Constraints: - `0 <= n <= 50` # Information Provided: - The Fibonacci sequence starts with `0` and `1`, and each subsequent number is the sum of the previous two. - Your task is to generate and return a list containing the first `n` numbers of the sequence.","solution":"def generate_fibonacci(n: int) -> list: Returns a list of the first n Fibonacci numbers. if n == 0: return [] fibonacci_sequence = [0] if n == 1: return fibonacci_sequence fibonacci_sequence.append(1) for _ in range(2, n): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"In this problem, you are required to implement a function `coordinate_tracker` that simulates a movement tracker for a robot on a 2D grid. The function should handle a series of movement commands, keep track of the robot’s position, and finally return its coordinates after executing all the commands. The movements include going \'UP\', \'DOWN\', \'LEFT\', and \'RIGHT\'. Each command modifies the robot’s position by 1 unit in the respective direction. Here is the detailed breakdown of what is expected: 1. Initialize the starting position of the robot at the coordinates (0, 0). 2. The function will receive a list of string commands as input, where each command is one of \'UP\', \'DOWN\', \'LEFT\', or \'RIGHT\'. 3. Process each command in the list to update the robot\'s coordinates: - \'UP\' increases the y-coordinate by 1. - \'DOWN\' decreases the y-coordinate by 1. - \'LEFT\' decreases the x-coordinate by 1. - \'RIGHT\' increases the x-coordinate by 1. 4. After processing all commands, return the final coordinates as a tuple. You need to ensure the function handles a sequence of commands correctly and returns the final position of the robot. Here is the function signature you must use: ```python def coordinate_tracker(commands): # Your code here ``` **Example**: ```python commands = [\'UP\', \'UP\', \'LEFT\', \'DOWN\', \'RIGHT\', \'RIGHT\'] result = coordinate_tracker(commands) print(result) # Output should be (1, 1) ```","solution":"def coordinate_tracker(commands): Simulates the movement of a robot on a 2D grid based on the given commands and returns the final coordinates. :param commands: List of strings representing the movement commands (\'UP\', \'DOWN\', \'LEFT\', \'RIGHT\') :return: Tuple representing the final coordinates (x, y) of the robot x, y = 0, 0 for command in commands: if command == \'UP\': y += 1 elif command == \'DOWN\': y -= 1 elif command == \'LEFT\': x -= 1 elif command == \'RIGHT\': x += 1 return (x, y)"},{"question":"You are tasked with implementing a function called `k_nearest_neighbors` that performs the classification of a given data point based on the k-nearest neighbors algorithm. This is a common algorithm used in machine learning for classification tasks. Function Signature ```python def k_nearest_neighbors(X_train, y_train, X_test, k): Classifies the given test data points based on the k-nearest neighbors algorithm. Args: X_train : numpy array-like, shape (n_train, d) The training data. y_train : numpy array-like, shape (n_train,) The class labels for the training data. X_test : numpy array-like, shape (n_test, d) The test data. k : int The number of nearest neighbors to use for classification. Returns: y_pred : numpy array, shape (n_test,) The predicted class labels for the test data. ``` # Input - `X_train` is a 2D numpy array with shape `(n_train, d)`, where `n_train` is the number of training samples and `d` is the number of features. - `y_train` is a 1D numpy array with shape `(n_train,)` containing the class labels for `X_train`. - `X_test` is a 2D numpy array with shape `(n_test, d)`, where `n_test` is the number of test samples and `d` is the number of features. - `k` is an integer representing the number of nearest neighbors to consider for classification. # Output - The function should return a 1D numpy array `y_pred` of shape `(n_test,)` containing the predicted class labels for `X_test`. # Classification - Use the Euclidean distance to measure the distance between data points. - For each test sample, find its k-nearest neighbors among the training samples and predict the class label as the most frequent class among those neighbors. - If there is a tie in the most frequent class, choose the class that comes first in numerical order. # Example ```python X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]]) y_train = np.array([0, 1, 1, 0]) X_test = np.array([[1, 1], [4, 5]]) k = 2 y_pred = k_nearest_neighbors(X_train, y_train, X_test, k) # y_pred should be np.array([0, 1]) ``` # Constraints 1. Ensure the function handles edge cases, such as when `k` is greater than the number of training samples. 2. The function should be efficient in finding the nearest neighbors. 3. Use numpy for array operations to ensure efficient computation. # Libraries You may import the following libraries: - `numpy`","solution":"import numpy as np from collections import Counter def k_nearest_neighbors(X_train, y_train, X_test, k): Classifies the given test data points based on the k-nearest neighbors algorithm. Args: X_train : numpy array-like, shape (n_train, d) The training data. y_train : numpy array-like, shape (n_train,) The class labels for the training data. X_test : numpy array-like, shape (n_test, d) The test data. k : int The number of nearest neighbors to use for classification. Returns: y_pred : numpy array, shape (n_test,) The predicted class labels for the test data. def euclidean_distance(a, b): return np.sqrt(np.sum((a - b) ** 2)) y_pred = [] for test_point in X_test: distances = [] for idx, train_point in enumerate(X_train): dist = euclidean_distance(train_point, test_point) distances.append((dist, y_train[idx])) distances.sort(key=lambda x: x[0]) # Sort by distance k_nearest_labels = [label for _, label in distances[:k]] most_common_label = Counter(k_nearest_labels).most_common(1)[0][0] y_pred.append(most_common_label) return np.array(y_pred)"},{"question":"You are given a DataFrame `df` that contains customer transaction data with columns labeled \'CustomerID\', \'TransactionDate\', and \'PurchaseAmount\'. The task is to identify which customers made their largest purchase in the last 3 months of the dataset. Write a function named `find_highest_spenders_in_last_3_months(df)` that takes the following parameter: - `df`: a Pandas DataFrame containing transaction data with columns \'CustomerID\', \'TransactionDate\', and \'PurchaseAmount\'. The function should: 1. Convert the \'TransactionDate\' column to Pandas datetime format. 2. Calculate the endpoint of the dataset, which is the maximum date in the \'TransactionDate\' column. 3. Define the start date for the last 3 months as 3 months prior to the endpoint. 4. Filter the transactions to include only those that occurred within the last 3 months. 5. Identify each customer\'s largest purchase in this 3-month window. 6. Return a DataFrame with \'CustomerID\' and \'LargestPurchase\' columns representing the highest purchase amount for each customer who made their largest purchase in the last 3 months. Here is the required structure of the function `find_highest_spenders_in_last_3_months`: ```python def find_highest_spenders_in_last_3_months(df): \'\'\' df: DataFrame with \'CustomerID\', \'TransactionDate\', and \'PurchaseAmount\' columns return: DataFrame with \'CustomerID\' and \'LargestPurchase\' columns \'\'\' # Your implementation here ```","solution":"import pandas as pd def find_highest_spenders_in_last_3_months(df): \'\'\' df: DataFrame with \'CustomerID\', \'TransactionDate\', and \'PurchaseAmount\' columns return: DataFrame with \'CustomerID\' and \'LargestPurchase\' columns \'\'\' # Convert \'TransactionDate\' to datetime df[\'TransactionDate\'] = pd.to_datetime(df[\'TransactionDate\']) # Calculate the endpoint of the dataset, which is the max date in \'TransactionDate\' end_date = df[\'TransactionDate\'].max() # Define the start date for the last 3 months start_date = end_date - pd.DateOffset(months=3) # Filter the transactions to include only those that occurred within the last 3 months last_3_months_df = df[df[\'TransactionDate\'] >= start_date] # Identify each customer\'s largest purchase in this 3-month window largest_purchases = last_3_months_df.groupby(\'CustomerID\')[\'PurchaseAmount\'].max().reset_index() largest_purchases.columns = [\'CustomerID\', \'LargestPurchase\'] return largest_purchases"},{"question":"You are tasked with creating a function that simulates a simple inventory management system for a warehouse. The warehouse inventory is represented as a dictionary where the keys are product IDs (integers) and the values are the quantities of each product (integers). You need to implement a function called `UpdateInventory` that processes a list of tuples, where each tuple represents a transaction. Each transaction consists of a product ID, a transaction type (either \'add\' to add stock or \'remove\' to remove stock), and a quantity. Your function should update the inventory accordingly and ensure that the inventory count for a product never goes below zero. If a \'remove\' transaction would result in a negative quantity, only remove up to the available quantity without going into negative numbers. # Function Signature: ```python def UpdateInventory(inventory: dict, transactions: list) -> dict: pass ``` # Inputs: - `inventory`: A dictionary where keys are product IDs (integers) and values are the quantities of each product (integers). - `transactions`: A list of tuples, where each tuple contains: - `product_id`: an integer representing the product ID - `transaction_type`: a string that can either be \'add\' or \'remove\' - `quantity`: an integer representing the quantity to be added or removed # Output: - The function should return the updated inventory dictionary. # Example: Given the following inputs: ```python inventory = { 101: 50, 102: 20, 103: 15 } transactions = [ (101, \'add\', 10), (102, \'remove\', 5), (103, \'remove\', 20), (104, \'add\', 5) ] ``` The function `UpdateInventory` should return: ```python { 101: 60, 102: 15, 103: 0, 104: 5 } ``` # Constraints: - The product IDs and quantities in the inventory dictionary and transactions list are always non-negative integers. - The transaction list may include product IDs not already in the inventory. In such cases, \'add\' transactions should initialize the quantity, and \'remove\' transactions should be ignored since they don\'t exist in the inventory.","solution":"def UpdateInventory(inventory: dict, transactions: list) -> dict: for product_id, transaction_type, quantity in transactions: if transaction_type == \'add\': if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif transaction_type == \'remove\': if product_id in inventory: inventory[product_id] = max(0, inventory[product_id] - quantity) return inventory"},{"question":"Write a function that reads customer feedback data from a CSV file and generates a bar chart showing the number of positive, neutral, and negative comments per month. If the CSV file does not exist, the function should simulate data, write it to a CSV file, and then read it again for visualization. Each row in the CSV should include \'Date\', \'Feedback\', and \'Sentiment\'. The date range should cover one year of daily entries, and the sentiment should be randomly assigned as \'Positive\', \'Neutral\', or \'Negative\'. Ensure reproducibility using a specific random seed. The function should raise the exception for: FileNotFoundError if the CSV file does not exist and cannot be created. The function should output with: matplotlib.figure.Figure: The Figure object containing the bar chart. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt from random import choice, seed import os import csv from datetime import datetime, timedelta def task_func(csv_file_path): ```","solution":"import pandas as pd import matplotlib.pyplot as plt from random import choice, seed import os import csv from datetime import datetime, timedelta def task_func(csv_file_path): # Set the random seed for reproducibility seed(42) if not os.path.exists(csv_file_path): with open(csv_file_path, \'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'Date\', \'Feedback\', \'Sentiment\']) start_date = datetime.strptime(\'2023-01-01\', \'%Y-%m-%d\') sentiments = [\'Positive\', \'Neutral\', \'Negative\'] for i in range(365): date = start_date + timedelta(days=i) sentiment = choice(sentiments) writer.writerow([date.strftime(\'%Y-%m-%d\'), \'Sample feedback\', sentiment]) data = pd.read_csv(csv_file_path) # Convert date to datetime for easier manipulation data[\'Date\'] = pd.to_datetime(data[\'Date\']) # Create a new column for Year-Month data[\'YearMonth\'] = data[\'Date\'].dt.to_period(\'M\') # Grouping and counting the sentiments grouped_data = data.groupby([\'YearMonth\', \'Sentiment\']).size().unstack(fill_value=0) # Plotting the data grouped_data.plot(kind=\'bar\', stacked=True) plt.title(\'Customer Feedback Sentiment Analysis per Month\') plt.xlabel(\'Month\') plt.ylabel(\'Number of Feedbacks\') fig = plt.gcf() return fig"},{"question":"In data analysis, time series data is a sequence of data points indexed in time order, often consisting of repeated measurements taken at successive times. One common task is to determine the moving average of a time series, which smoothens the data by creating an average of different subsets of the full data set. # Task Write a function `moving_average(time_series: list, window_size: int) -> list` that calculates the moving average over a specified window size in a given time series data. # Function Signature ```python def moving_average(time_series: list, window_size: int) -> list: ``` # Parameters - `time_series` (list): A list of numerical values representing the time series data. - `window_size` (int): An integer representing the size of the moving window. # Returns - `list`: A list containing the moving averages, where each element is the average of the previous `window_size` elements in the time series. The returned list should have the same length as the input time_series. For indices less than `window_size - 1`, the moving average is just the average of all available elements up to that point. # Implementation Details 1. Iterate over the time series data. 2. For each element, calculate the average of the window consisting of the current element and the previous `window_size - 1` elements. 3. If there are fewer elements than `window_size`, calculate the average of the available elements. # Example ```python time_series = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] window_size = 3 output = moving_average(time_series, window_size) print(output) # Output: [1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] ```","solution":"def moving_average(time_series: list, window_size: int) -> list: Calculate the moving average of a time series data over a specified window size. Args: time_series (list): A list of numerical values representing the time series data. window_size (int): An integer representing the size of the moving window. Returns: list: A list containing the moving averages. if window_size <= 0: raise ValueError(\\"Window size must be greater than 0\\") averages = [] for i in range(len(time_series)): start_index = max(0, i - window_size + 1) window = time_series[start_index:i + 1] avg = sum(window) / len(window) averages.append(avg) return averages"},{"question":"You are tasked with creating a function that computes and visualizes the relationship between temperature conversions in Fahrenheit and Celsius. The task is to plot a line graph showing how the temperature in Fahrenheit changes with respect to Celsius degrees over a given range. The function should be named `plot_temp_conversion` and take two arguments: `start_temp` and `end_temp`, which define the range of temperatures in Celsius. Inside the function, you need to use the following libraries: - `numpy` to create an array of Celsius temperatures within the specified range. - `matplotlib.pyplot` to create the plot with proper labels and title. Your task is to: 1. Create a numpy array of temperatures in Celsius from `start_temp` to `end_temp` with a step of 1 degree. 2. Convert each temperature in the numpy array to Fahrenheit using the formula: F = C * 9/5 + 32. 3. Plot the Celsius values against their corresponding Fahrenheit values with labels \\"Celsius\\" for the x-axis and \\"Fahrenheit\\" for the y-axis. 4. Add a title to the graph: \\"Celsius to Fahrenheit Conversion\\". Here is an outline of the necessary imports: - `numpy` for array creation and manipulations. - `matplotlib.pyplot` for plotting. Implement the function `plot_temp_conversion` following the described approach. Example: ```python plot_temp_conversion(0, 100) ``` This will plot a line graph of temperatures in the range from 0 to 100 degrees Celsius and their corresponding Fahrenheit values.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_temp_conversion(start_temp, end_temp): Plots the conversion from Celsius to Fahrenheit over a specified range. Args: start_temp (int): Starting temperature in Celsius. end_temp (int): Ending temperature in Celsius. Returns: None celsius_temps = np.arange(start_temp, end_temp + 1, 1) fahrenheit_temps = celsius_temps * 9/5 + 32 plt.figure(figsize=(8, 5)) plt.plot(celsius_temps, fahrenheit_temps, marker=\'o\') plt.xlabel(\'Celsius\') plt.ylabel(\'Fahrenheit\') plt.title(\'Celsius to Fahrenheit Conversion\') plt.grid(True) plt.show()"},{"question":"You are asked to implement a function that generates a sequence of numbers where the sequence is defined by a linear recurrence relation with constant coefficients. A linear recurrence relation is an equation that recursively defines a sequence where the next term is a linear combination of previous terms. # Function Signature ```python def linear_recurrence(initial_terms: list, coefficients: list, n: int) -> list: ``` # Requirements 1. Implement the function `linear_recurrence` which takes three parameters: - `initial_terms` (list): a list of the initial terms of the sequence. - `coefficients` (list): a list of coefficients for the recurrence relation. - `n` (int): the number of terms to generate. 2. The number of `initial_terms` should be equal to the number of `coefficients`. 3. The function should return a list containing the first `n` terms of the sequence. # Example ```python initial_terms = [1, 1] coefficients = [1, 1] n = 10 print(linear_recurrence(initial_terms, coefficients, n)) ``` Expected output: ``` [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] ``` # Implementation Details - Use the initial terms to start the sequence. - Use the given coefficients to calculate the subsequent terms using the recurrence relation: [ T_{n} = C_{0} cdot T_{n-1} + C_{1} cdot T_{n-2} + cdots + C_{k-1} cdot T_{n-k} ] where ( T ) is the sequence and ( C ) is the list of coefficients. - The function should handle the generation of terms beyond the initial terms based on the coefficients provided.","solution":"def linear_recurrence(initial_terms: list, coefficients: list, n: int) -> list: Generates a sequence of numbers where the sequence is defined by a linear recurrence relation with constant coefficients. initial_terms: List[int] - Initial terms of the sequence. coefficients: List[int] - Coefficients for the recurrence relation. n: int - Number of terms to generate. Returns a list containing the first n terms of the sequence. if n <= len(initial_terms): return initial_terms[:n] sequence = initial_terms[:] k = len(coefficients) while len(sequence) < n: next_term = sum(coefficients[i] * sequence[-(i + 1)] for i in range(k)) sequence.append(next_term) return sequence"},{"question":"You are tasked with writing a function named `normalizeMatrix` that normalizes the values in a given matrix. This function should make extensive use of numpy\'s array manipulation capabilities. Specifically, this function will scale the values of the matrix such that each feature (column) has a mean of 0 and a standard deviation of 1. You need to use the following numpy functionalities: `numpy.mean`, `numpy.std`, and broadcasting. **Function Signature:** ```python def normalizeMatrix(X): Normalize the feature dataset. Parameters: X (numpy.ndarray): The feature dataset of shape (m, n). Returns: numpy.ndarray: The normalized dataset of shape (m, n). ``` **Parameters:** `X` (numpy.ndarray): The input feature dataset of shape (m, n) where (m) is the number of samples and (n) is the number of features. **Requirements:** 1. Use `numpy.mean` to calculate the mean of each feature (column). 2. Use `numpy.std` to calculate the standard deviation of each feature (column). 3. Use broadcasting to scale the dataset such that each feature has a mean of 0 and a standard deviation of 1. **Hints:** - The normalization formula for a feature value (x_{ij}) in row (i) and column (j) is: [ text{normalized}_{ij} = frac{x_{ij} - mu_j}{sigma_j} ] where (mu_j) is the mean of column (j) and (sigma_j) is the standard deviation of column (j).","solution":"import numpy as np def normalizeMatrix(X): Normalize the feature dataset. Parameters: X (numpy.ndarray): The feature dataset of shape (m, n). Returns: numpy.ndarray: The normalized dataset of shape (m, n). mean = np.mean(X, axis=0) # Compute mean of each column std = np.std(X, axis=0) # Compute standard deviation of each column normalized_X = (X - mean) / std # Normalize the dataset using broadcasting return normalized_X"},{"question":"Write a function that takes a list of integers and sorts it in a way that all the negative numbers appear before all the positive numbers, while maintaining the relative order of the negative and positive numbers as in the original list. The function should output: A list with all negative numbers at the beginning, followed by all positive numbers. You should write self-contained code starting with: ``` def task_func(numbers: list): ```","solution":"def task_func(numbers: list): Takes a list of integers and sorts it such that all negative numbers appear before all positive numbers, while maintaining the relative order of the negative and positive numbers as in the original list. negatives = [num for num in numbers if num < 0] non_negatives = [num for num in numbers if num >= 0] return negatives + non_negatives"},{"question":"Create a function named `analyze_string_patterns` that takes a single input parameter `input_string`, which is a string potentially containing multiple sentences. The function should identify and return word frequencies of all unique words in the string. The frequencies should be returned as a dictionary where the keys are the unique words and the values are the counts of their occurrences. To achieve this, follow these steps: 1. Normalize the input string to ensure consistency by converting it to lowercase. 2. Tokenize the string into individual words. Consider words to be any sequence of characters separated by whitespace and ignore punctuation. 3. Count the frequency of each unique word in the string. 4. Return a dictionary containing words as keys and their corresponding counts as values. **Example:** ```python # Given the following input string: input_string = \\"Hello world! This is a test. Hello again, world.\\" result = analyze_string_patterns(input_string) print(result) # Output: {\'hello\': 2, \'world\': 2, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 1, \'again\': 1} ``` **Function Signature:** ```python def analyze_string_patterns(input_string: str) -> dict: pass ```","solution":"import re from collections import Counter def analyze_string_patterns(input_string: str) -> dict: Takes a string containing multiple sentences and returns a dictionary with unique words as keys and their frequencies as values. The string is normalized to lowercase and all punctuation is ignored. :param input_string: Input string of sentences. :return: Dictionary with word frequencies. # Normalize the input string to lowercase input_string = input_string.lower() # Tokenize the string into individual words ignoring punctuation words = re.findall(r\'bw+b\', input_string) # Count the frequency of each unique word word_count = Counter(words) return dict(word_count)"},{"question":"Write a function named `highlight_keywords` that takes a text string and a list of keywords as input. The function should return the input text with each occurrence of the keywords wrapped in an HTML `<strong>` tag. The matching should be case-insensitive, and the tags should only be applied to whole words. A whole word is defined as a sequence of alphanumeric characters (i.e., letters and digits) or underscores (`_`). Non-word characters (such as spaces or punctuation) should be left unaffected. For example, given the text \\"Python is awesome. I love Python programming!\\" and the keywords `[\'python\', \'programming\']`, the function should return: ``` \\"<strong>Python</strong> is awesome. I love <strong>Python</strong> <strong>programming</strong>!\\" ``` # Requirements - The function should be named `highlight_keywords`. - It should return the input text with each occurrence of the keywords wrapped in `<strong>` tags. - The matching should be case-insensitive and should only apply to whole words. - The implementation should handle multiple occurrences of a keyword correctly. Here is an example of how the function can be used: ```python text = \\"Python is awesome. I love Python programming!\\" keywords = [\'python\', \'programming\'] highlighted_text = highlight_keywords(text, keywords) print(highlighted_text) ``` The expected output should be: ``` <strong>Python</strong> is awesome. I love <strong>Python</strong> <strong>programming</strong>! ```","solution":"import re def highlight_keywords(text, keywords): Returns the input text with each occurrence of the keywords wrapped in <strong> tags. The matching is case-insensitive and applies to whole words only. :param text: The input text string. :param keywords: A list of keywords to be highlighted. :return: The text with keywords surrounded by <strong> tags. def repl_func(match): return f\\"<strong>{match.group(0)}</strong>\\" for keyword in keywords: regex_pattern = r\'b\' + re.escape(keyword) + r\'b\' text = re.sub(regex_pattern, repl_func, text, flags=re.IGNORECASE) return text"},{"question":"Implement a function that simulates the operation of an online bookstore. Your task is to process a list of orders and calculate the total cost for each customer. Each order contains the customer\'s name, the book\'s title, and the book\'s price. The function should return a dictionary where the keys are the customer names, and the values are their respective total costs. The function should be implemented as follows: ``` def calculate_total_cost(orders): ``` For example: ``` orders = [ (\\"Alice\\", \\"The Great Gatsby\\", 10), (\\"Bob\\", \\"1984\\", 15), (\\"Alice\\", \\"To Kill a Mockingbird\\", 8), (\\"Bob\\", \\"The Catcher in the Rye\\", 12), ] calculate_total_cost(orders) ``` should return: ``` { \\"Alice\\": 18, \\"Bob\\": 27 } ```","solution":"def calculate_total_cost(orders): Calculates the total cost for each customer based on the list of orders. Parameters: orders (list of tuples): A list where each tuple contains a customer\'s name (str), the book\'s title (str), and the book\'s price (int). Returns: dict: A dictionary where the keys are customer names and the values are their respective total costs. customer_totals = {} for name, _, price in orders: if name in customer_totals: customer_totals[name] += price else: customer_totals[name] = price return customer_totals"},{"question":"** Imagine that you are developing a calorie tracking application that processes user data from an input file. Each user has a unique ID and daily records of food consumption. Your task is to implement a function that processes this input file and outputs summaries and statistics. Implement a function called `analyze_calories` that takes the name of an input file as its argument. This function should: 1. Read and parse the details from the input file. 2. Analyze the food consumption data to compute: - Average daily caloric intake per user. - The user with the maximum daily caloric intake and the amount. 3. Return a dictionary with user IDs as keys and their average daily caloric intake as values, along with a separate key \\"max_calorie_user\\" containing the ID of the user with the highest daily intake and the corresponding calorie amount. **Input File Format:** - The first line contains an integer `U`, the number of users. - For each user: - The first line contains the user ID. - The second line contains an integer `D`, the number of days of records. - The next `D` lines each contain the date and the total calories consumed on that date in the format: `YYYY-MM-DD calories`. **Output:** - A dictionary where each key is a user ID and the value is their average daily caloric intake, as well as a key \\"max_calorie_user\\" with a tuple containing the user ID and their maximum daily caloric intake: ```python { \\"user1\\": average_calories_1, \\"user2\\": average_calories_2, ... \\"max_calorie_user\\": (userX, max_calories) } ``` **Required Libraries:** - `statistics` **Example:** ```python def analyze_calories(inputFileName): # Implementation here print(analyze_calories(\'calories.txt\')) ``` **","solution":"import statistics def analyze_calories(inputFileName): with open(inputFileName, \'r\') as file: data = file.readlines() current_line = 0 U = int(data[current_line].strip()) current_line += 1 user_data = {} max_cal_user = None max_cal = 0 for _ in range(U): user_id = data[current_line].strip() current_line += 1 D = int(data[current_line].strip()) current_line += 1 calories = [] for _ in range(D): _, cal = data[current_line].strip().split() cal = int(cal) calories.append(cal) current_line += 1 avg_calories = statistics.mean(calories) user_data[user_id] = avg_calories # Check for max calorie day max_daily_cal = max(calories) if max_daily_cal > max_cal: max_cal = max_daily_cal max_cal_user = user_id user_data[\\"max_calorie_user\\"] = (max_cal_user, max_cal) return user_data"},{"question":"Performing Matrix Multiplication is a fundamental operation in linear algebra used across multiple domains, from computer graphics to machine learning. In this task, you are to implement matrix multiplication without using any external libraries, ensuring a deep understanding of the underlying process. You are required to write a function named `matrix_mult` that multiplies two given matrices A and B. The function should return the resulting product matrix. The specific steps for matrix multiplication are: 1. Verify the inner dimensions of matrices A and B to ensure they can be multiplied (i.e., columns of A must equal rows of B). 2. Initialize a result matrix with appropriate dimensions. 3. Perform the element-wise multiplication and sum to fill the result matrix. **Function Signature:** ```python def matrix_mult(A: list, B: list) -> list: # Your code here ``` **Parameters:** - `A` (list): A 2D list where each inner list represents a row of matrix A. - `B` (list): A 2D list where each inner list represents a row of matrix B. **Returns:** - `result` (list): The resulting matrix as a 2D list after multiplying A and B. **Constraints and Notes:** - The elements of matrices A and B are integers or floats. - Ensure that your solution handles edge cases where matrices might be empty or non-conformant for multiplication. Example usage: ```python A = [[1, 2], [3, 4], [5, 6]] B = [[7, 8, 9], [10, 11, 12]] result = matrix_mult(A, B) print(\\"Resulting Matrix:\\", result) # Output should be: # Resulting Matrix: [[27, 30, 33], # [61, 68, 75], # [95, 106, 117]] ``` Ensure your solution computes the product matrix correctly by iterating over rows and columns and summing the product of corresponding elements.","solution":"def matrix_mult(A: list, B: list) -> list: Multiplies two matrices A and B and returns the resulting matrix. Args: A (list): 2D list representing the first matrix. B (list): 2D list representing the second matrix. Returns: list: 2D list representing the multiplied matrix. Raises: ValueError: If the matrices A and B cannot be multiplied due to invalid dimensions. # Number of rows in A rows_A = len(A) # Number of columns in A (same as number of rows in B) cols_A = len(A[0]) if A else 0 # Number of rows in B rows_B = len(B) # Number of columns in B cols_B = len(B[0]) if B else 0 # Check if matrices A and B can be multiplied if cols_A != rows_B: raise ValueError(\\"Cannot multiply matrices: number of columns in A must equal number of rows in B.\\") # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"You are tasked with creating a function that generates a graph data structure and performs a Breadth-First Search (BFS) on it. The graph will be represented using an adjacency list. Your function should be able to traverse the graph starting from a given node and return the list of nodes in the order they were visited. # Function Signature ```python def bfs_traversal(graph: dict[int, list[int]], start_node: int) -> list[int]: ... ``` - **Parameters**: - `graph` (dict[int, list[int]]): A dictionary where each key represents a node in the graph, and the value is a list of adjacent nodes. - `start_node` (int): The node from which the BFS traversal will start. - **Returns**: - A list of integers representing the order in which the nodes were visited during the BFS traversal. # Requirements: 1. Implement the BFS algorithm to traverse the graph. 2. Use a queue to manage the nodes to be explored next. 3. Keep track of visited nodes to avoid repeated visits. 4. Begin the traversal from the specified `start_node`. 5. Return the list of nodes in the order they were visited. # Example Usage: ```python graph = { 0: [1, 2], 1: [2, 3], 2: [4], 3: [4], 4: [] } start_node = 0 result = bfs_traversal(graph, start_node) print(result) # Output: [0, 1, 2, 3, 4] ``` In the example above, the BFS traversal starts from node 0 and visits nodes in the order: 0, 1, 2, 3, 4. # Additional Note: Make sure to handle edge cases, such as when the graph is empty or the start node is not present in the graph.","solution":"from collections import deque def bfs_traversal(graph, start_node): Perform BFS traversal on a graph and return the list of visited nodes. :param graph: A dictionary representing the adjacency list of the graph. :param start_node: The node from which BFS traversal starts. :return: A list of nodes visited in the order they were traversed. if start_node not in graph: return [] visited = [] queue = deque([start_node]) visited_set = set([start_node]) while queue: current_node = queue.popleft() visited.append(current_node) for neighbor in graph[current_node]: if neighbor not in visited_set: queue.append(neighbor) visited_set.add(neighbor) return visited"},{"question":"You are required to implement a function named `schedule_tasks` that schedules a list of tasks by assigning them time slots in a day. Each task will have a specified duration, and you need to ensure that no two tasks overlap. Here’s a detailed description of the function you need to implement: - **Function Name:** `schedule_tasks` - **Parameters:** - `tasks` (list of tuples): A list where each tuple contains two elements. The first element is the task name (string), and the second element is the task duration in hours (float or int). - `start_time` (string): A starting time in \\"HH:MM\\" 24-hour format from which the scheduling should begin. - **Returns:** - A dictionary where keys are task names and values are tuples with the start time and end time in \\"HH:MM\\" format. **Requirements:** - Calculate the end time for each task based on its duration and the start time of the previous task. - Ensure that each task gets a time slot assigned consecutively without overlapping the previous task. - The time calculations should consider that one day has only 24 hours. If the end time of a task exceeds 24:00, it should wrap around to the next day starting from 00:00. - Validate the input to handle potential errors gracefully, such as ensuring valid `tasks` list and `start_time` format. Here is an example of the expected function behavior: ```python tasks = [(\\"Task1\\", 2), (\\"Task2\\", 1.5), (\\"Task3\\", 3)] start_time = \\"09:00\\" schedule = schedule_tasks(tasks, start_time) print(schedule) ``` This function will assign time slots to the tasks starting from \\"09:00\\", ensuring that no two tasks overlap and properly handling the end time wrapping around if necessary. Expected output should be similar to: ```python { \\"Task1\\": (\\"09:00\\", \\"11:00\\"), \\"Task2\\": (\\"11:00\\", \\"12:30\\"), \\"Task3\\": (\\"12:30\\", \\"15:30\\") } ```","solution":"def schedule_tasks(tasks, start_time): Schedules tasks with assigned time slots in a day. Parameters: tasks (list of tuples): List containing tuples of task name and task duration in hours start_time (string): Starting time in \\"HH:MM\\" 24-hour format Returns: dict: A dictionary where keys are task names and values are tuples with the start time and end time in \\"HH:MM\\" format import datetime # Function to convert HH:MM to datetime object def hm_to_datetime(hm): hh, mm = map(int, hm.split(\\":\\")) return datetime.datetime.combine(datetime.date.today(), datetime.time(hh, mm)) # Function to convert datetime object to HH:MM def datetime_to_hm(dt): return dt.strftime(\\"%H:%M\\") # Function to calculate end time given a start time and duration def calculate_end_time(start, duration): end = start + datetime.timedelta(hours=duration) return end # Initializing variables schedule = {} current_time = hm_to_datetime(start_time) # Schedule each task for task, duration in tasks: start_hm = datetime_to_hm(current_time) end_dt = calculate_end_time(current_time, duration) end_hm = datetime_to_hm(end_dt) schedule[task] = (start_hm, end_hm) current_time = end_dt return schedule"},{"question":"# Graph Connectivity Check In graph theory, determining whether a graph is connected is a fundamental problem. A connected graph is one in which there is a path between any pair of vertices. For this problem, you are required to implement a function that determines if an undirected graph is connected. # Problem Statement Write a function `is_graph_connected` that takes an integer `n` (the number of vertices) and a list of tuples `edges` (the edges of the graph) where each tuple represents an undirected edge between two vertices. The function should return a boolean value indicating whether the graph is connected. # Requirements 1. **Function Name**: `is_graph_connected` 2. **Parameters**: - `n`: An integer representing the number of vertices in the graph. - `edges`: A list of tuples where each tuple `(u, v)` represents an edge between vertex `u` and vertex `v`. 3. **Returns**: A boolean value indicating whether the graph is connected. # Example ```python def is_graph_connected(n, edges): from collections import defaultdict def dfs(node, visited, graph): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, visited, graph) if n == 0: return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * n # Start DFS from the first vertex dfs(0, visited, graph) return all(visited) # Example Usage n = 5 edges = [(0,1), (0,2), (1,2), (1,3), (3,4)] print(is_graph_connected(n, edges)) # Expected output: True n = 5 edges = [(0,1), (0,2), (1,2), (3,4)] print(is_graph_connected(n, edges)) # Expected output: False ``` # Guidelines - Assume that vertices are labeled from 0 to n-1. - Use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the graph. - The graph may be empty (n = 0), in which case it is considered connected. - Consider edge cases where there are no edges, or the graph has isolated nodes. # Constraints - ( 1 leq n leq 10^4 ) - ( 0 leq text{len(edges)} leq 10^4 ) - The graph is undirected and unweighted.","solution":"def is_graph_connected(n, edges): from collections import defaultdict def dfs(node, visited, graph): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited, graph) if n == 0: return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() # Start DFS from the first vertex dfs(0, visited, graph) return len(visited) == n"},{"question":"Implement a function named `automate_email_campaign` that simulates an automated email marketing campaign based on user behavior and preference data. The function should take in the following parameters: - `user_data`: A list of dictionaries where each dictionary contains user information including \'user_id\', \'email\', and \'preferences\' (a list of keywords representing user interests). - `campaign_templates`: A dictionary where keys are campaign names and values are lists of keywords representing the content of each campaign. - `engagement_history`: A dictionary where keys are \'user_id\' and values are integers representing the number of past engagements with emails. - `threshold`: An integer representing the minimum number of engagements required for a user to be included in the email campaign. The function should return a dictionary where keys are \'user_id\' and values are the names of the best-matched campaign based on user preferences and engagement history if the user\'s engagement count is at or above the specified threshold. **Function Signature** ```python def automate_email_campaign(user_data: list, campaign_templates: dict, engagement_history: dict, threshold: int) -> dict: pass ``` **Constraints** - The function should only consider users whose engagement count is at or above the threshold. - A campaign is considered the best match for a user if the number of matching keywords between user preferences and campaign content is the highest. - If there are multiple campaigns with the same number of matching keywords, any one of them may be chosen. - The function should handle cases where users may have empty preference lists or no recorded engagement history gracefully. Examples of input data structures: ```python user_data = [ {\'user_id\': 1, \'email\': \'user1@example.com\', \'preferences\': [\'tech\', \'music\']}, {\'user_id\': 2, \'email\': \'user2@example.com\', \'preferences\': [\'travel\', \'food\']}, ] campaign_templates = { \'Tech Campaign\': [\'tech\', \'innovation\'], \'Travel Campaign\': [\'travel\', \'adventure\'], \'Music Campaign\': [\'music\', \'concerts\'], \'Food Campaign\': [\'food\', \'cooking\'] } engagement_history = { 1: 5, 2: 3 } threshold = 2 ``` Example of a return value: ```python { 1: \'Tech Campaign\', 2: \'Travel Campaign\' } ```","solution":"def automate_email_campaign(user_data, campaign_templates, engagement_history, threshold): Simulates an automated email marketing campaign based on user behavior and preference data. :param user_data: A list of dictionaries with user information containing \'user_id\', \'email\', and \'preferences\'. :param campaign_templates: A dictionary where keys are campaign names and values are lists of keywords. :param engagement_history: A dictionary where keys are \'user_id\' and values are integers representing engagement counts. :param threshold: Minimum number of engagements required for inclusion in the email campaign. :return: A dictionary where keys are \'user_id\' and values are the best-matched campaign name. result = {} for user in user_data: user_id = user[\'user_id\'] preferences = set(user[\'preferences\']) if user_id in engagement_history and engagement_history[user_id] >= threshold: best_match = None max_match_count = -1 for campaign, keywords in campaign_templates.items(): match_count = len(preferences.intersection(keywords)) if match_count > max_match_count: best_match = campaign max_match_count = match_count if best_match is not None: result[user_id] = best_match return result"},{"question":"You are given a list of integers that represents daily temperatures over a period of time. Write a function called `calculate_warmer_days(temperatures)` that processes this list and returns a new list where each element at index `i` is the number of days you have to wait until a warmer temperature. If there is no future day with a warmer temperature, the value should be 0 for that day. For example, given the input list `[73, 74, 75, 71, 69, 72, 76, 73]`, the function should return `[1, 1, 4, 2, 1, 1, 0, 0]`. Your function should follow these steps: 1. Initialize an empty stack to keep track of temperatures and their indices. 2. Traverse the temperatures list from left to right. 3. For each temperature, check the stack to find if there is a previous temperature that is cooler than the current one. Update the result list accordingly. 4. After processing all temperatures, return the final list of days. Below is the starter code for the function: ```python def calculate_warmer_days(temperatures): # Complete the function as per the problem description pass ```","solution":"def calculate_warmer_days(temperatures): result = [0] * len(temperatures) stack = [] for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"Write a function to compress a string such that \'AAABCCDDDD\' becomes \'A3B1C2D4\'. If the \\"compressed\\" string is not smaller than the original string, your function should return the original string. The function should handle strings with both uppercase and lowercase letters. You should write self-contained code starting with: ``` def compress_string(s): ```","solution":"def compress_string(s): Compress the string such that consecutive characters are followed by the count. If the compressed string is not smaller, return the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\'{s[i - 1]}{count}\') count = 1 # append the last set of characters compressed.append(f\'{s[-1]}{count}\') compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Create a function that computes the convex hull of a set of points in 2D space using the Graham scan algorithm. The function should then plot the points along with the convex hull boundary. Note that: The convex hull should be drawn as a polygon connecting the boundary points of the convex hull. The function should return the points of the convex hull and the plot figure. The function should output with: tuple: A tuple containing: list: The points of the convex hull. matplotlib.figure.Figure: The plot figure. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def graham_scan(points): ```","solution":"import numpy as np import matplotlib.pyplot as plt def graham_scan(points): Computes the convex hull of a set of points in 2D space using the Graham scan algorithm. Parameters: points (list of tuples): A list of (x, y) coordinates for the points. Returns: tuple: A tuple containing: - list: The points of the convex hull. - matplotlib.figure.Figure: The plot figure showing the points and the convex hull. # Find the point with the lowest y-coordinate, break ties by x-coordinate start = min(points, key=lambda p: (p[1], p[0])) def polar_angle(p0, p1): Return the polar angle (in radians) between the line p0->p1 and the x-axis y_span = p1[1] - p0[1] x_span = p1[0] - p0[0] return np.arctan2(y_span, x_span) def distance(p0, p1): Return the squared Euclidean distance between p0 and p1 return (p1[0] - p0[0]) ** 2 + (p1[1] - p0[1]) ** 2 # Sort points by polar angle with the start point, ties are broken by distance to the start point sorted_points = sorted(points, key=lambda p: (polar_angle(start, p), distance(start, p))) # Initialize the hull with the start point hull = [start] for point in sorted_points: while len(hull) > 1 and np.cross(np.subtract(hull[-1], hull[-2]), np.subtract(point, hull[-1])) <= 0: hull.pop() hull.append(point) # Plotting the points and the convex hull fig, ax = plt.subplots() ax.plot(*zip(*points), \'bo\') ax.plot(*zip(*hull), \'r-\') ax.fill(*zip(*hull), \'r\', alpha=0.3) ax.plot(*start, \'go\') # Start point in green ax.set_title(\'Convex Hull using Graham Scan\') return hull, fig"},{"question":"You have been provided with a dataset containing information about customers and their transaction history with an e-commerce platform. Your task is to process the dataset to identify the top N customers based on their total spending and generate a summary report. # Dataset You have two CSV files: 1. `customers.csv` - Contains customer information. 2. `transactions.csv` - Contains transaction details for each customer. The structure of the files is as follows: - `customers.csv`: ``` customerId, name, email 1, John Doe, john.doe@example.com 2, Jane Smith, jane.smith@example.com ... ``` - `transactions.csv`: ``` transactionId, customerId, amount 1001, 1, 250.0 1002, 1, 50.0 1003, 2, 75.0 ... ``` # Task You need to implement a function: ```python def top_n_customers(customers_file: str, transactions_file: str, n: int) -> pandas.DataFrame: Processes customer transaction data to identify the top N customers based on their total spending. Parameters: - customers_file: str, path to customers CSV file - transactions_file: str, path to transactions CSV file - n: int, the number of top customers to include in the report Returns: - pandas.DataFrame representing the top N customers sorted by total spending in descending order, with columns: - customerId: int - Unique identifier of the customer - name: str - Name of the customer - email: str - Email of the customer - total_spent: float - Total spending amount of the customer pass ``` # Steps: 1. **Read Data**: Use `pandas.read_csv` to read both the `customers_file` and `transactions_file`. 2. **Aggregate Spending**: Group the transactions by `customerId` and calculate the total spending for each customer. 3. **Merge Data**: Merge the aggregated spending data with the customer information based on `customerId`. 4. **Sort and Select**: Sort the merged data by total spending in descending order and select the top N customers. 5. **Create Summary**: Create a DataFrame containing the top N customers with their `customerId`, `name`, `email`, and calculated `total_spent`. # Example Usage: ```python customers_file = \\"path/to/customers.csv\\" transactions_file = \\"path/to/transactions.csv\\" n = 5 top_customers_df = top_n_customers(customers_file, transactions_file, n) ``` # Output The function should return a DataFrame similar to: ``` customerId name email total_spent 0 1 John Doe john.doe@example.com 300.0 1 2 Jane Smith jane.smith@example.com 200.0 ... ```","solution":"import pandas as pd def top_n_customers(customers_file: str, transactions_file: str, n: int) -> pd.DataFrame: Processes customer transaction data to identify the top N customers based on their total spending. Parameters: - customers_file: str, path to customers CSV file - transactions_file: str, path to transactions CSV file - n: int, the number of top customers to include in the report Returns: - pandas.DataFrame representing the top N customers sorted by total spending in descending order, with columns: - customerId: int - Unique identifier of the customer - name: str - Name of the customer - email: str - Email of the customer - total_spent: float - Total spending amount of the customer # Read the data from CSV files customers_df = pd.read_csv(customers_file) transactions_df = pd.read_csv(transactions_file) # Aggregate the transactions to compute the total spending per customer total_spenting = transactions_df.groupby(\'customerId\').sum().reset_index() total_spenting.rename(columns={\'amount\': \'total_spent\'}, inplace=True) # Merge the aggregated total spending with the customer details merged_df = pd.merge(customers_df, total_spenting, how=\'inner\', on=\'customerId\') # Sort by total spending in descending order and select the top N customers top_customers_df = merged_df.sort_values(by=\'total_spent\', ascending=False).head(n) return top_customers_df[[\'customerId\', \'name\', \'email\', \'total_spent\']]"},{"question":"You are tasked with implementing a function that simulates a simplified form of a stack data structure with a maximum capacity limit. The function you need to implement is `LimitedStack`, which will allow standard stack operations (push, pop, top) while enforcing the capacity constraint. If the stack exceeds the specified capacity, the oldest element should be discarded to maintain the size limit. Your specific tasks are to: 1. Implement the `LimitedStack` class with a constructor that initializes the stack with a given capacity. 2. Implement the `push` method which adds an element to the stack. If the stack exceeds the capacity, remove the oldest element. 3. Implement the `pop` method which removes the most recently added element and returns it. If the stack is empty, return `None`. 4. Implement the `top` method which returns the most recently added element without removing it. If the stack is empty, return `None`. # Class Definition ```python class LimitedStack: def __init__(self, capacity: int): Initializes the stack with a given maximum capacity. Args: capacity -- Maximum number of elements the stack can hold pass def push(self, value: int) -> None: Pushes an element onto the stack. If the stack exceeds the capacity, remove the oldest element. Args: value -- Element to be added to the stack pass def pop(self) -> int: Removes and returns the most recently added element of the stack. Returns None if the stack is empty. Returns: The most recently added element or None if the stack is empty pass def top(self) -> int: Returns the most recently added element of the stack without removing it. Returns None if the stack is empty. Returns: The most recently added element or None if the stack is empty pass ``` # Example Usage ```python stack = LimitedStack(capacity=3) stack.push(1) stack.push(2) print(stack.top()) # Expected output: 2 print(stack.pop()) # Expected output: 2 stack.push(3) stack.push(4) stack.push(5) print(stack.top()) # Expected output: 5 print(stack.pop()) # Expected output: 5 print(stack.pop()) # Expected output: 4 print(stack.pop()) # Expected output: 3 print(stack.pop()) # Expected output: None ``` # Constraints 1. The stack should only hold integers. 2. The `capacity` will be a positive integer. 3. The `push`, `pop`, and `top` methods should operate in constant time complexity.","solution":"class LimitedStack: def __init__(self, capacity: int): Initializes the stack with a given maximum capacity. Args: capacity -- Maximum number of elements the stack can hold self.capacity = capacity self.stack = [] def push(self, value: int) -> None: Pushes an element onto the stack. If the stack exceeds the capacity, remove the oldest element. Args: value -- Element to be added to the stack if len(self.stack) == self.capacity: self.stack.pop(0) self.stack.append(value) def pop(self) -> int: Removes and returns the most recently added element of the stack. Returns None if the stack is empty. Returns: The most recently added element or None if the stack is empty if not self.stack: return None return self.stack.pop() def top(self) -> int: Returns the most recently added element of the stack without removing it. Returns None if the stack is empty. Returns: The most recently added element or None if the stack is empty if not self.stack: return None return self.stack[-1]"},{"question":"Write a function `find_prime_twins(n: int) -> List[Tuple[int, int]]` that finds all twin prime pairs up to a given integer `n`. Twin primes are pairs of prime numbers that have a difference of 2 (e.g., (3, 5), (11, 13)). # Function Signature: ```python def find_prime_twins(n: int) -> List[Tuple[int, int]]: ``` # Input: - An integer `n` (2 ≤ n ≤ 10^6), where `n` is the upper limit up to which twin primes should be found. # Output: - A list of tuples, where each tuple contains a pair of twin primes. # Example: ```python find_prime_twins(15) # Output: [(3, 5), (5, 7), (11, 13)] find_prime_twins(50) # Output: [(3, 5), (5, 7), (11, 13), (17, 19), (29, 31), (41, 43)] ``` # Explanation: - The function should return a list of all twin prime pairs up to the number `n`. - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - Twin primes are closely lying prime numbers with a difference of exactly two. - Use an efficient algorithm to check for primality and gather pairs within the provided constraints.","solution":"from typing import List, Tuple def find_prime_twins(n: int) -> List[Tuple[int, int]]: def sieve_of_eratosthenes(limit: int) -> List[int]: is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, limit + 1) if is_prime[p]] return prime_numbers primes = sieve_of_eratosthenes(n) prime_twins = [(p, p + 2) for p in primes if p + 2 in primes] return prime_twins"},{"question":"You are tasked with implementing a function named `min_max_difference` that calculates the difference between the maximum and minimum values in a given list of integers. This function should avoid using the built-in `max()` and `min()` functions and should instead iterate through the list to determine the maximum and minimum values manually. # Problem Details: 1. **Function Name**: `min_max_difference` 2. **Parameters**: - `numbers` (list of int): A list of integers containing at least one element. 3. **Returns**: - `difference` (int): An integer representing the difference between the maximum and minimum values in the list. # Methodology: The function should start by initializing two variables to hold the maximum and minimum values. As it iterates through the list, it should update these variables whenever it finds a new maximum or minimum. After completing the iteration, the function should return the difference between the maximum and minimum values. # Example: ```python def min_max_difference(numbers): if not numbers: raise ValueError(\\"The list is empty\\") max_value = numbers[0] min_value = numbers[0] for num in numbers[1:]: if num > max_value: max_value = num if num < min_value: min_value = num return max_value - min_value # Example usage numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5] difference = min_max_difference(numbers) print(\\"Difference:\\", difference) # Output: Difference: 8 ``` # Requirements: - The function should not use the built-in `max()` or `min()` functions. - Ensure the function handles lists with a single element correctly.","solution":"def min_max_difference(numbers): Calculates the difference between the maximum and minimum values in a list of integers. :param numbers: List of integers :return: Difference between the maximum and minimum values if not numbers: raise ValueError(\\"The list is empty\\") max_value = numbers[0] min_value = numbers[0] for num in numbers[1:]: if num > max_value: max_value = num if num < min_value: min_value = num return max_value - min_value"},{"question":"You have been asked to implement a function named `find_intersection_node` that determines the node at which two singly linked lists intersect. The function should return the value of the intersecting node. If the two linked lists do not intersect, the function should return `None`. **Function Signature:** ```python def find_intersection_node(headA: ListNode, headB: ListNode) -> int: ``` **Requirements:** - Each input list is a singly linked list defined by the `ListNode` class. - You may assume that the linked lists retain their original structure after the function returns. **Note:** - The `ListNode` class is defined as follows: ```python class ListNode: def __init__(self, x): self.val = x self.next = None ``` - Two linked lists intersect if they share at least one node. When they do intersect, all nodes following the intersection are shared between the two lists. **Example:** Given the following linked lists: ``` A: a1 → a2 ↘ c1 → c2 → c3 ↗ B: b1 → b2 → b3 ``` - Lists `A` and `B` intersect at `c1`, so `find_intersection_node` should return `c1.val`. **Example Usage:** ```python # Constructing the linked lists shown above # Intersecting node c1 = ListNode(\\"c1\\") c2 = ListNode(\\"c2\\") c3 = ListNode(\\"c3\\") c1.next = c2 c2.next = c3 # First list a1 = ListNode(\\"a1\\") a2 = ListNode(\\"a2\\") a1.next = a2 a2.next = c1 # Second list b1 = ListNode(\\"b1\\") b2 = ListNode(\\"b2\\") b3 = ListNode(\\"b3\\") b1.next = b2 b2.next = b3 b3.next = c1 intersection_val = find_intersection_node(a1, b1) # Output should be \\"c1\\" print(intersection_val) ``` #","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def find_intersection_node(headA: ListNode, headB: ListNode) -> int: Find the intersection node of two singly linked lists, headA and headB. Return the value of the intersecting node or None if there\'s no intersection. if not headA or not headB: return None pointerA, pointerB = headA, headB while pointerA is not pointerB: pointerA = headB if pointerA is None else pointerA.next pointerB = headA if pointerB is None else pointerB.next return pointerA.val if pointerA else None"},{"question":"In this problem, you will practice how to work with Pandas DataFrames for data manipulation. Your task is to write a function named `calculate_average_age` that will take in a Pandas DataFrame and calculate the average age of individuals grouped by their gender. Here is what you need to do: 1. **Function name**: `calculate_average_age` 2. **Parameters**: - `df` (Pandas DataFrame): A DataFrame containing at least two columns, \'Gender\' (string, \'Male\' or \'Female\') and \'Age\' (integer). 3. **Return**: A dictionary with gender as keys and the average age as values. 4. **Description**: The function should group the data by the \'Gender\' column and then calculate the average age for each group. The result should be returned as a dictionary where the keys are \'Male\' and \'Female\', and the values are the average ages of each gender group. You can assume that the input DataFrame will always contain valid data with no missing values. # Example: Given the following DataFrame: ```python import pandas as pd data = { \'Gender\': [\'Male\', \'Female\', \'Male\', \'Female\', \'Male\'], \'Age\': [23, 25, 30, 22, 29] } df = pd.DataFrame(data) ``` Calling `calculate_average_age(df)` should return: ```python { \'Male\': 27.33, \'Female\': 23.5 } ``` where the values are rounded to two decimal places. Use the following Pandas methods to complete this task: 1. `DataFrame.groupby` 2. `GroupBy.mean` 3. `round`","solution":"import pandas as pd def calculate_average_age(df): Calculate the average age of individuals grouped by their gender. Parameters: df (Pandas DataFrame): A DataFrame containing at least \'Gender\' and \'Age\' columns. Returns: dict: A dictionary with gender as keys and the average age as values. grouped = df.groupby(\'Gender\')[\'Age\'].mean().round(2) return grouped.to_dict()"},{"question":"You are given a text file containing a sequence of space-separated integers. Your task is to implement a function that reads the file, processes the integers, and returns a dictionary with the following statistics: - The sum of all integers. - The mean (average) of the integers. - The standard deviation of the integers. - The maximum value among the integers. - The minimum value among the integers. # Requirements: 1. Implement the function `process_integers_from_file(file_path: str) -> dict`. 2. Ensure the function reads the file specified by `file_path` and processes the space-separated integers. 3. The returned dictionary should have keys: `\'sum\'`, `\'mean\'`, `\'std_dev\'`, `\'max\'`, and `\'min\'`, with corresponding values. # Function Signature: ```python def process_integers_from_file(file_path: str) -> dict: pass ``` # Example: Suppose `numbers.txt` contains the following content: ``` 5 10 15 20 25 30 35 ``` The call to the function would look like: ```python statistics = process_integers_from_file(\\"numbers.txt\\") print(statistics) ``` The expected output would be a dictionary with the computed statistics: ```python { \'sum\': 140, \'mean\': 20.0, \'std_dev\': 10.0, \'max\': 35, \'min\': 5 } ``` # Tip: Ensure you handle file reading exceptions and edge cases where the file might be empty or have invalid content. Use appropriate built-in functions from the `numpy` library to compute the required statistics.","solution":"import numpy as np def process_integers_from_file(file_path: str) -> dict: try: with open(file_path, \'r\') as file: data = file.read() integers = list(map(int, data.split())) if not integers: raise ValueError(\\"No integers found in the file.\\") integer_sum = np.sum(integers) integer_mean = np.mean(integers) integer_std_dev = np.std(integers) integer_max = np.max(integers) integer_min = np.min(integers) return { \'sum\': integer_sum, \'mean\': integer_mean, \'std_dev\': integer_std_dev, \'max\': integer_max, \'min\': integer_min } except Exception as e: raise e"},{"question":"In this challenge, you are tasked with implementing a function that processes transactional data for a retail store. The function, `process_transactions`, takes in a file path to a CSV file containing transaction records and calculates the total sales for each product category. The CSV file has the following columns: \'transaction_id\', \'product_id\', \'category\', \'quantity\', and \'price_per_unit\'. Your task is to read the CSV file into a Pandas DataFrame, and then aggregate the total sales for each category. The total sales for a category is computed by summing the product of \'quantity\' and \'price_per_unit\' for each transaction within that category. # Constraints 1. Ensure that the \'quantity\' and \'price_per_unit\' columns contain numerical values. 2. Any invalid or missing data should be handled appropriately, assuming missing quantities or prices are zero. You must implement the `process_transactions` function as specified: ```python def process_transactions(filePath: str) -> pd.Series: Process transactions data and calculate total sales for each category. Parameters: filePath (str): Path to the CSV file containing transaction records. Returns: pd.Series: A Series with categories as the index and total sales as the values. # Your implementation here pass ``` Use the Pandas library, specifically the `pandas.DataFrame` class and its methods, to accomplish the task. Here is an example of how you might structure your implementation for clarity: ```python import pandas as pd def process_transactions(filePath: str) -> pd.Series: Process transactions data and calculate total sales for each category. Parameters: filePath (str): Path to the CSV file containing transaction records. Returns: pd.Series: A Series with categories as the index and total sales as the values. # Read the CSV file into a DataFrame df = pd.read_csv(filePath) # Ensure \'quantity\' and \'price_per_unit\' are numerical, fill missing values with 0 df[\'quantity\'] = pd.to_numeric(df[\'quantity\'], errors=\'coerce\').fillna(0) df[\'price_per_unit\'] = pd.to_numeric(df[\'price_per_unit\'], errors=\'coerce\').fillna(0) # Calculate total sales as quantity * price_per_unit df[\'total_sales\'] = df[\'quantity\'] * df[\'price_per_unit\'] # Aggregate total sales by category total_sales_by_category = df.groupby(\'category\')[\'total_sales\'].sum() return total_sales_by_category ``` Your goal is to correctly implement the `process_transactions` function and ensure it handles data appropriately while providing accurate results.","solution":"import pandas as pd def process_transactions(filePath: str) -> pd.Series: Process transactions data and calculate total sales for each category. Parameters: filePath (str): Path to the CSV file containing transaction records. Returns: pd.Series: A Series with categories as the index and total sales as the values. # Read the CSV file into a DataFrame df = pd.read_csv(filePath) # Ensure \'quantity\' and \'price_per_unit\' are numerical, fill missing values with 0 df[\'quantity\'] = pd.to_numeric(df[\'quantity\'], errors=\'coerce\').fillna(0) df[\'price_per_unit\'] = pd.to_numeric(df[\'price_per_unit\'], errors=\'coerce\').fillna(0) # Calculate total sales as quantity * price_per_unit df[\'total_sales\'] = df[\'quantity\'] * df[\'price_per_unit\'] # Aggregate total sales by category total_sales_by_category = df.groupby(\'category\')[\'total_sales\'].sum() return total_sales_by_category"},{"question":"In bioinformatics, we often need to analyze DNA sequences to find specific patterns. A common task is to identify all occurrences of a shorter DNA sequence (pattern) within a longer DNA sequence. In this exercise, you will implement a function to find all starting positions of a given pattern in a DNA sequence. You are required to write a function named `find_pattern` that performs the following tasks: 1. **Initialization**: Prepare for searching by extracting the lengths of the DNA sequence and the pattern. 2. **Search**: Traverse the DNA sequence, checking for matches of the pattern starting at each position. 3. **Storage**: Store the starting indices of all matching substrings in a list. 4. **Return**: Return the list of starting indices. The function signature is as follows: ```python def find_pattern(dna: str, pattern: str) -> list: pass ``` - `dna`: A string representing the DNA sequence. - `pattern`: A string representing the sequence pattern to find within the DNA string. # Example: Suppose `dna = \\"ACGTACGTGACG\\"` and `pattern = \\"ACG\\"`. After calling `find_pattern(dna, pattern)`, the output should be: ```python [0, 4, 9] ``` # Constraints: - `dna` and `pattern` consist only of the characters `\'A\'`, `\'C\'`, `\'G\'`, and `\'T\'`. - The length of `dna` (|dna|) will be between 1 and 10^5. - The length of `pattern` (|pattern|) will be between 1 and 10^3. - `pattern` length will not exceed `dna` length.","solution":"def find_pattern(dna: str, pattern: str) -> list: Returns a list of starting indices where the pattern is found in the DNA sequence. pattern_length = len(pattern) dna_length = len(dna) indices = [] for i in range(dna_length - pattern_length + 1): if dna[i:i + pattern_length] == pattern: indices.append(i) return indices"},{"question":"You are tasked with creating a function called `filter_words` that reads data from a text file and writes filtered data to an output text file. The input text file contains a list of words, one per line, and the output text should only include words that meet specified criteria. The criteria are: 1. The word must be longer than 5 characters. 2. The word must contain at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\'). Your function `filter_words` should ensure that the output file includes only words that meet both criteria and each qualifying word should appear on its own line. **Function Signature:** ```python def filter_words(input_filename: str, output_filename: str) -> None: ``` **Requirements:** 1. Use Python\'s built-in file handling to read from the input file and write to the output file. 2. Ensure that if the `output_filename` already exists, it overwrites the existing content with the new data. **Detailed Instructions:** 1. The function should read from `input_filename`, filter the words based on the criteria, and then write the qualifying words to `output_filename`. 2. Handle exceptions where necessary, such as ensuring the file can be opened for reading and writing. 3. Maintain the order of the words as they appear in the input file. 4. Ignore case when checking for vowels. **Example:** If the input file contains: ``` apple banana grape kiwi mango strawberry ``` The output file should contain: ``` banana strawberry ``` **Libraries Available:** - None (standard file handling and string operations only)","solution":"def filter_words(input_filename: str, output_filename: str) -> None: Filters words from the input file and writes words that meet the criteria to the output file. Criteria: 1. The word must be longer than 5 characters. 2. The word must contain at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\'). try: with open(input_filename, \'r\') as infile: lines = infile.readlines() vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} filtered_words = [] for word in lines: word = word.strip() if len(word) > 5 and any(vowel in word.lower() for vowel in vowels): filtered_words.append(word) with open(output_filename, \'w\') as outfile: for word in filtered_words: outfile.write(word + \'n\') except IOError as e: print(f\\"An error occurred while reading or writing files: {e}\\")"},{"question":"**Having passed through a forest of towering trees, you come across a large stone with a strange inscription. The engraving reveals it to be a challenge left behind by an ancient coder, tasked to keep their secret codes secure from intruders. Your goal is to decode this challenge by writing a function that validates whether a given password meets specific security requirements. Write a function `validate_password` that takes a single string as an argument and returns `True` if the password is valid, and `False` otherwise. A valid password must meet the following criteria: 1. It must be at least 10 characters long. 2. It must contain at least one lowercase letter (`a-z`). 3. It must contain at least one uppercase letter (`A-Z`). 4. It must contain at least one digit (`0-9`). 5. It must contain at least one special character (`!@#%^&*()-_+=`). Here is the function signature: ```python def validate_password(password: str) -> bool: Validate if the given password meets the security requirements: - At least 10 characters long - Contains at least one lowercase letter - Contains at least one uppercase letter - Contains at least one digit - Contains at least one special character :param password: The password to validate :return: True if the password is valid, False otherwise # Your code here ``` Function parameters: - `password`: A string representing the password to be validated. Return: - Return `True` if the password meets all the criteria, otherwise return `False`. Example: ```python print(validate_password(\\"Password123!\\")) # Output: True print(validate_password(\\"Short1!\\")) # Output: False print(validate_password(\\"nouppercase123!\\")) # Output: False print(validate_password(\\"NOLOWERCASE123!\\")) # Output: False print(validate_password(\\"Nospecialchar123\\")) # Output: False ``` Focus on analyzing each character in the password to ensure it meets the specified conditions. Make your solution efficient and readable by using Python\'s capabilities to check for character types and manage criteria effectively.","solution":"def validate_password(password: str) -> bool: Validate if the given password meets the security requirements: - At least 10 characters long - Contains at least one lowercase letter - Contains at least one uppercase letter - Contains at least one digit - Contains at least one special character :param password: The password to validate :return: True if the password is valid, False otherwise if len(password) < 10: return False has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-_+=\\" for c in password) return has_lower and has_upper and has_digit and has_special"},{"question":"Develop a function `rotate_image` that rotates a given 2D square matrix (represented as a list of lists) 90 degrees clockwise. **Function Signature:** ```python def rotate_image(matrix: list[list[int]]) -> list[list[int]]: ``` **Requirements:** - Your function should return a new matrix that is the result of rotating the input matrix by 90 degrees in the clockwise direction. - You are not allowed to use any in-built rotation functions; the logic must be implemented explicitly. **Input:** - `matrix (list[list[int]])`: A 2D square matrix of integers (n x n), where (1 leq n leq 10). **Output:** - Returns a 2D list of integers, which is the rotated matrix. **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] result = rotate_image(matrix) print(result) # Example output: [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` The function `rotate_image` should take a 2D square matrix and return a new matrix that represents the input matrix rotated by 90 degrees clockwise. Ensure to manually implement the rotation logic without using built-in functions for matrix manipulation.","solution":"def rotate_image(matrix: list[list[int]]) -> list[list[int]]: Rotates the given square matrix 90 degrees clockwise and returns the new matrix. Args: matrix (list[list[int]]): The input 2D square matrix. Returns: list[list[int]]: The rotated matrix. n = len(matrix) rotated_matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Write a function that takes an integer `n` and generates an `n x n` Pascal\'s triangle using a 2D list. Plot the Pascal\'s triangle in a visually appealing way, where each number is centered in its respective position. Additionally, highlight the prime numbers in the Pascal\'s triangle by coloring them in a different shade. Ensure that: - The numbers are centered within each position in the triangle. - Prime numbers are distinctly highlighted. - The title of the plot is \'Pascal\'s Triangle with Highlights\'. - Both axes are labeled appropriately. - The plot has a grid for better readability. The function should output: - A 2D list representing Pascal\'s triangle. - A matplotlib.figure.Figure object of the plotted data. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sympy import isprime def task_func(n): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sympy import isprime def generate_pascals_triangle(n): Generates an n x n Pascal\'s triangle as a 2D list. triangle = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): triangle[i][0] = 1 triangle[i][i] = 1 for j in range(1, i): triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j] return [row[:i+1] for i, row in enumerate(triangle)] def plot_pascals_triangle(triangle, n): Plots the Pascal\'s triangle highlighting the prime numbers. fig, ax = plt.subplots() ax.set_title(\\"Pascal\'s Triangle with Highlights\\") ax.set_xlabel(\'Column\') ax.set_ylabel(\'Row\') ax.grid(True) for row in range(n): for col in range(row + 1): num = triangle[row][col] color = \'red\' if isprime(num) else \'black\' ax.text(col, row, str(num), ha=\'center\', va=\'center\', color=color) ax.set_xlim(-0.5, n-0.5) ax.set_ylim(n-0.5, -0.5) plt.xticks(range(n)) plt.yticks(range(n)) return fig def task_func(n): Generates an n x n Pascal\'s triangle and plots it. triangle = generate_pascals_triangle(n) figure = plot_pascals_triangle(triangle, n) return triangle, figure"},{"question":"# You are tasked with implementing a function that calculates the intersection point of two lines in 2D space, if it exists. Each line is represented by two points in a Cartesian coordinate system. To assist with this, we need a function `find_intersection` that accepts two arguments: `line1` and `line2`. - `line1`: A (2 times 2) NumPy array containing two points ([x1, y1]) and ([x2, y2]) that define the first line. - `line2`: A (2 times 2) NumPy array containing two points ([x3, y3]) and ([x4, y4]) that define the second line. # Function Signature ```python def find_intersection(line1, line2): Determine the intersection point of two lines defined by two points each, if it exists. Parameters: line1 (numpy.ndarray): A 2x2 ndarray containing two points defining the first line. line2 (numpy.ndarray): A 2x2 ndarray containing two points defining the second line. Returns: numpy.ndarray: A 1x2 ndarray containing the intersection point [x, y], or None if the lines are parallel or coincident. ``` # Constraints & Notes - You are to use the `numpy` package for this task. - Ensure you handle cases where lines are parallel or coincide by checking the determinant. - If the lines do not intersect at a single point, return `None`. # Example ```python import numpy as np line1 = np.array([[0, 0], [1, 1]]) line2 = np.array([[0, 1], [1, 0]]) result = find_intersection(line1, line2) print(result) ``` # Expected Output The output will be a (1 times 2) NumPy array containing the intersection point ([x, y]) or `None` if the lines are parallel. ```python [0.5 0.5] ```","solution":"import numpy as np def find_intersection(line1, line2): Determine the intersection point of two lines defined by two points each, if it exists. Parameters: line1 (numpy.ndarray): A 2x2 ndarray containing two points defining the first line. line2 (numpy.ndarray): A 2x2 ndarray containing two points defining the second line. Returns: numpy.ndarray: A 1x2 ndarray containing the intersection point [x, y], or None if the lines are parallel or coincident. x1, y1 = line1[0] x2, y2 = line1[1] x3, y3 = line2[0] x4, y4 = line2[1] A1 = y2 - y1 B1 = x1 - x2 C1 = A1 * x1 + B1 * y1 A2 = y4 - y3 B2 = x3 - x4 C2 = A2 * x3 + B2 * y3 determinant = A1 * B2 - A2 * B1 if determinant == 0: # Lines are parallel or coincident return None else: x = (B2 * C1 - B1 * C2) / determinant y = (A1 * C2 - A2 * C1) / determinant return np.array([x, y])"},{"question":"You are tasked with creating a function that finds the first unique character in a given string. This is a common problem in coding interviews and can help you understand efficient string manipulation and usage of hash maps (or dictionaries in Python). To accomplish this, you will write a function called `first_unique_char` that performs this operation. The function should take a string `s` as input and return the index of the first non-repeating character. If there isn\'t any unique character, return `-1`. You are expected to do this in O(n) time complexity. Function Signature: ```python def first_unique_char(s: str) -> int: # Your implementation here ``` # Input: - `s`: A string of lowercase English letters. # Output: - An integer representing the index of the first unique character, or `-1` if no such character exists. # Example: ```python s = \\"leetcode\\" print(first_unique_char(s)) # Output: 0 ``` ```python s = \\"loveleetcode\\" print(first_unique_char(s)) # Output: 2 ``` ```python s = \\"aabb\\" print(first_unique_char(s)) # Output: -1 ``` # Constraints: - The length of the string `s` is at most 10^5. # Explanation: - You will need to count the frequency of each character in the string first, and then find the first character that has a frequency of one. - You can use a dictionary (hash map) to achieve an efficient solution.","solution":"def first_unique_char(s: str) -> int: Returns the index of the first unique character in the string s. If no such character exists, returns -1. # Dictionary to store the frequency of each character char_counts = {} # First pass to count the frequency of each character for char in s: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # Second pass to find the first unique character for index, char in enumerate(s): if char_counts[char] == 1: return index # If no unique character found, return -1 return -1"},{"question":"**Find Optimal Meeting Point on a Grid** You are tasked with implementing a function to find the optimal meeting point on a grid for a group of people residing at different coordinates. The goal is to minimize the total travel distance for all individuals. # Problem Statement: - Given a list of coordinates representing positions of multiple people on a 2D grid, you have to determine the optimal meeting point that minimizes the total travel distance. # Requirements: 1. **Function Name**: `find_meeting_point` 2. **Parameters**: - `coordinates`: A list of tuples where each tuple represents the (x, y) coordinates of a person on the grid. 3. **Outputs**: - The optimal meeting point as a tuple (x, y) that minimizes the total travel distance. # Constraints: - The grid size can be assumed to be infinite. - Travel distance is the Manhattan Distance which is calculated as `|x1 - x2| + |y1 - y2|`. # Example: ```python coordinates = [(1, 2), (2, 3), (4, 5)] optimal_point = find_meeting_point(coordinates) print(optimal_point) # Output example: (x, y) ``` # Steps: 1. Parse the given coordinates. 2. Calculate the median for x-coordinates and y-coordinates separately. 3. Use these median values to determine the optimal meeting point. 4. Return the optimal meeting point (x, y). # Explanation: The optimal meeting point is effectively taken by computing the median of the x-coordinates and the median of the y-coordinates. This is because the median minimizes the sum of absolute deviations, which is the Manhattan distance in this context. # Function Definition: ```python def find_meeting_point(coordinates): x_coords = [coord[0] for coord in coordinates] y_coords = [coord[1] for coord in coordinates] x_coords.sort() y_coords.sort() mid_x = x_coords[len(x_coords) // 2] mid_y = y_coords[len(y_coords) // 2] return (mid_x, mid_y) ``` # Implementation Guidance: - Import necessary libraries if needed. - Ensure correct handling of edge cases (e.g., when the input list is empty). - Use efficient sorting algorithms to handle larger inputs within reasonable time limits.","solution":"def find_meeting_point(coordinates): Finds the optimal meeting point on a 2D grid for minimal total travel distance. Parameters: coordinates (list of tuples): A list of tuples where each tuple represents the (x, y) coordinates of a person on the grid. Returns: tuple: The optimal meeting point as a tuple (x, y). if not coordinates: return (0, 0) # Edge case for empty list x_coords = [coord[0] for coord in coordinates] y_coords = [coord[1] for coord in coordinates] x_coords.sort() y_coords.sort() mid_x = x_coords[len(x_coords) // 2] mid_y = y_coords[len(y_coords) // 2] return (mid_x, mid_y)"},{"question":"In this exercise, you need to implement a function that counts how many times each word appears in a given string and returns the counts as a dictionary. The words should be case-sensitive and should include punctuation as part of the words. Here is the signature of the function you need to implement: ```python def wordCount(s): Count the occurrences of each word in the given string. Parameters: s (str): The input string. Returns: dict: A dictionary where keys are words and values are the counts of each word. pass ``` **Instructions:** 1. Split the string `s` into words based on spaces. 2. Count the occurrences of each word. 3. Return a dictionary where keys are the words and values are the counts of each word. **Example:** ```python s = \\"Hello, world! Hello world.\\" counts = wordCount(s) # Expected output: # {\'Hello,\': 1, \'world!\': 1, \'Hello\': 1, \'world.\': 1} ``` **Important Note:** - The words should be counted in a case-sensitive manner. - Punctuation marks should be considered as part of the words.","solution":"def wordCount(s): Count the occurrences of each word in the given string. Parameters: s (str): The input string. Returns: dict: A dictionary where keys are words and values are the counts of each word. words = s.split() word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"You are tasked with creating a function named `process_inventory_changes` that updates the inventory records based on provided changes. The inventory data is stored in a CSV file, and any changes to be made are provided in a list of dictionaries. Each dictionary represents an item and contains the keys `operation` (either \\"add\\" or \\"remove\\"), `item_id`, and `quantity`. Below is a detailed description of the steps involved in the function: 1. Read the contents of the CSV file into a list of dictionaries. Each dictionary represents an item in the inventory with the keys `item_id` and `quantity`. 2. Iterate through the list of change dictionaries: - If the `operation` key is \\"add\\", increase the `quantity` of the item with the corresponding `item_id` in the inventory. - If the `operation` key is \\"remove\\", decrease the `quantity` of the item with the corresponding `item_id` in the inventory. Ensure that the `quantity` does not go below zero. 3. If an `item_id` in the changes list does not exist in the inventory, add it to the inventory with the corresponding `quantity`. 4. After applying all changes, write the updated inventory back to the CSV file. You need to create the function `process_inventory_changes` implementing the above logic. Properly use the CSV library to read from and write to the CSV file.","solution":"import csv def process_inventory_changes(file_path, changes): Updates the inventory records in the provided CSV file based on the changes list. Args: file_path (str): The path to the CSV file containing inventory data. changes (list of dict): A list of dictionaries, where each dictionary contains \'operation\' (str) either \\"add\\" or \\"remove\\", \'item_id\' (str), and \'quantity\' (int). # Read the current inventory from the CSV file inventory = [] item_index = {} try: with open(file_path, mode=\'r\', newline=\'\') as csvfile: reader = csv.DictReader(csvfile) inventory = [row for row in reader] # Convert quantity to integers and keep track of item indices for index, item in enumerate(inventory): item[\'quantity\'] = int(item[\'quantity\']) item_index[item[\'item_id\']] = index except FileNotFoundError: pass # Apply each change to the inventory for change in changes: item_id = change[\'item_id\'] quantity = change[\'quantity\'] if change[\'operation\'] == \'add\': if item_id in item_index: inventory[item_index[item_id]][\'quantity\'] += quantity else: new_item = {\'item_id\': item_id, \'quantity\': quantity} inventory.append(new_item) item_index[item_id] = len(inventory) - 1 elif change[\'operation\'] == \'remove\': if item_id in item_index: inventory[item_index[item_id]][\'quantity\'] = max(0, inventory[item_index[item_id]][\'quantity\'] - quantity) else: new_item = {\'item_id\': item_id, \'quantity\': 0} inventory.append(new_item) item_index[item_id] = len(inventory) - 1 # Write the updated inventory back to the CSV file with open(file_path, mode=\'w\', newline=\'\') as csvfile: fieldnames = [\'item_id\', \'quantity\'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for item in inventory: writer.writerow({\'item_id\': item[\'item_id\'], \'quantity\': item[\'quantity\']})"},{"question":"Develop a Python function named `find_most_frequent` that takes a single parameter: - `nums`: A list of integers where each integer can range from 0 to 100. The function should: 1. Determine the most frequently occurring integer in the list. 2. If there is a tie for the most frequent integer, return the smallest integer among them. The function should return the most frequent integer as described. ```python def find_most_frequent(nums): # Your implementation here ``` For example: - Calling `find_most_frequent([1, 2, 3, 2, 4, 2, 3, 3])` should return `2` since 2 appears more frequently than any other number in the list. - Calling `find_most_frequent([1, 1, 2, 2, 3, 3])` should return `1` since 1, 2, and 3 all appear twice, but 1 is the smallest among them.","solution":"def find_most_frequent(nums): from collections import Counter if not nums: # Handle empty list case return None frequency_count = Counter(nums) max_frequency = max(frequency_count.values()) most_frequent_nums = [num for num, freq in frequency_count.items() if freq == max_frequency] return min(most_frequent_nums)"},{"question":"You are tasked with implementing a function that generates a random matrix with distinct values based on specific rules. The matrix must be square (n x n) and should contain values ranging from 1 to n^2. 1. The function should be named `generate_random_matrix`. 2. It should accept one parameter: - `n` (an integer greater than 1): The dimension of the square matrix. 3. The generated matrix\'s values are determined as follows: - The matrix should contain all integers from 1 to n^2 exactly once. - The values should be placed in the matrix in random order, ensuring there are no repeats. You need to use the `random.shuffle` function from the `random` library to accomplish this task. Ensure you check the Python Library Documentation provided to align with the correct usage of these APIs. Here is the method signature you need to implement: ```python def generate_random_matrix(n: int) -> List[List[int]]: pass ```","solution":"import random from typing import List def generate_random_matrix(n: int) -> List[List[int]]: Generates a random n x n matrix with distinct values from 1 to n^2. Parameters: n (int): The dimension of the square matrix (n > 1). Returns: List[List[int]]: A 2D list representing the random n x n matrix. if n <= 1: raise ValueError(\\"The dimension n must be greater than 1\\") # Create a list of all integers from 1 to n^2 values = list(range(1, n*n + 1)) # Shuffle the list to place values in random order random.shuffle(values) # Create the n x n matrix matrix = [values[i*n:(i+1)*n] for i in range(n)] return matrix"},{"question":"Implement a function that reads a CSV file containing data points, normalizes the data using sklearn\'s StandardScaler, and fits a Linear Regression model to predict a target variable. This function should split the data into training and testing sets, train the model on the training set, and evaluate its performance on the testing set using mean squared error (MSE). It returns the coefficients of the regression model and the MSE. Note that: The function assumes that the CSV file is correctly formatted with the target variable as the last column in the dataset. The function should output with: tuple: A tuple containing: coefficients (ndarray): An array of the regression coefficients. mse (float): The mean squared error of the model on the testing set. You should write self-contained code starting with: ``` import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def task_func(csv_file_path, test_size=0.2, random_state=42): ```","solution":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def task_func(csv_file_path, test_size=0.2, random_state=42): # Load the data from the CSV file data = pd.read_csv(csv_file_path) # Split the data into features and target X = data.iloc[:, :-1] # All columns except the last one y = data.iloc[:, -1] # The last column # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state) # Normalize the data scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Fit the Linear Regression model model = LinearRegression() model.fit(X_train_scaled, y_train) # Predict and evaluate the model y_pred = model.predict(X_test_scaled) mse = mean_squared_error(y_test, y_pred) # Return the coefficients and MSE coefficients = model.coef_ return (coefficients, mse)"},{"question":"You are tasked with developing a function to simulate a simple board game involving two players moving on a 5x5 grid. The game starts with both players positioned at the top-left corner of the grid. The players then take turns moving right or down. The game ends when a player reaches the bottom-right corner. Write a function called `simulate_game()` that takes no parameters and returns the winner as a string (\\"Player 1\\" or \\"Player 2\\"). A player wins by reaching the bottom-right corner first. Rules for movement: 1. Each player can move right (`R`) or down (`D`). 2. Each player takes turns, starting with \\"Player 1\\". 3. Once a player reaches the bottom-right corner (position (4, 4)), the game ends. Use the following lists to understand the movements: ```python grid_size = 5 player1_moves = [\'R\', \'D\', \'D\', \'R\', \'D\', \'R\', \'R\'] player2_moves = [\'D\', \'R\', \'R\', \'D\', \'R\', \'D\'] ``` Players must execute all their moves in the order provided above, but the game may end before all moves are used if a player reaches the bottom-right corner. Function Signature: ```python def simulate_game() -> str: ``` Example Invocation: ```python print(simulate_game()) # Output: \\"Player 2\\" or \\"Player 1\\" ``` Explanation: - \\"Player 1\\" starts and makes moves: right, down, down, etc. - \\"Player 2\\" follows and makes moves: down, right, right, etc. - The game ends as soon as one player reaches the bottom-right corner (position (4, 4)). - Return \\"Player 1\\" or \\"Player 2\\" depending on who reaches the position first.","solution":"def simulate_game() -> str: Simulates a game between two players on a 5x5 grid and returns the winner. Returns: str: \\"Player 1\\" if Player 1 wins, \\"Player 2\\" if Player 2 wins. player1_moves = [\'R\', \'D\', \'D\', \'R\', \'D\', \'R\', \'R\'] player2_moves = [\'D\', \'R\', \'R\', \'D\', \'R\', \'D\'] grid_size = 5 p1_position = [0, 0] p2_position = [0, 0] for i in range(max(len(player1_moves), len(player2_moves))): if i < len(player1_moves): move = player1_moves[i] if move == \'R\': p1_position[1] += 1 else: # move == \'D\' p1_position[0] += 1 if p1_position == [grid_size - 1, grid_size - 1]: return \\"Player 1\\" if i < len(player2_moves): move = player2_moves[i] if move == \'R\': p2_position[1] += 1 else: # move == \'D\' p2_position[0] += 1 if p2_position == [grid_size - 1, grid_size - 1]: return \\"Player 2\\" return \\"No winner\\""},{"question":"You are given a code snippet that involves calculating the factorial of a number using both iterative and recursive methods. The objective is to practice implementing and comparing different approaches to solving the same problem. You need to complete the implementation of the functions `factorial_iterative(n)` and `factorial_recursive(n)`. These functions will return the factorial of the given number `n` using the iterative approach and recursive approach respectively. **Functions to Implement:** ```python def factorial_iterative(n): # Complete this function as per the problem description. def factorial_recursive(n): # Complete this function as per the problem description. ``` **Parameters:** 1. `n`: An integer representing the number for which the factorial is to be calculated. **Instructions:** - Implement the function `factorial_iterative(n)` which calculates the factorial of `n` using an iterative approach. - Implement the function `factorial_recursive(n)` which calculates the factorial of `n` using a recursive approach. - Handle edge cases suitably, for instance when `n` is 0 or a negative number. - If `n` is negative, both functions should raise a `ValueError` with the message \\"Factorial is not defined for negative numbers.\\" - If `n` is 0, both functions should return 1, as 0! is defined as 1. **Example Use Case:** ```python # Example calls to the functions print(factorial_iterative(5)) # Output should be 120 print(factorial_iterative(0)) # Output should be 1 print(factorial_recursive(5)) # Output should be 120 print(factorial_recursive(0)) # Output should be 1 ```","solution":"def factorial_iterative(n): Returns the factorial of n using the iterative approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(1, n + 1): result *= i return result def factorial_recursive(n): Returns the factorial of n using the recursive approach. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 else: return n * factorial_recursive(n - 1)"},{"question":"In this problem, you are required to create a function named `flatten_dictionary` that flattens a nested dictionary by joining the keys with a period (`.`). The function should take a single dictionary as input and return a new dictionary where all nested structures are flattened. # Function Signature ```python def flatten_dictionary(d): pass ``` # Parameters - `d` (dict): A dictionary which can have nested dictionaries as its values. # Constraints - The input dictionary can contain nested dictionaries as values. - Keys in the dictionary are strings, and values can be either strings, integers, or dictionaries. - You need to recursively flatten any level of nested dictionaries. # Example Given the following dictionary: ```python { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } } } ``` Flattened dictionary should be: ```python { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3 } ``` # Instruction Implement the `flatten_dictionary` function to recursively flatten a nested dictionary. Each key in the flattened dictionary should be a strings of the concatenated nested keys, separated by a period (`.`).","solution":"def flatten_dictionary(d): def flatten(current_key, value, result): if isinstance(value, dict): for k, v in value.items(): new_key = f\\"{current_key}.{k}\\" if current_key else k flatten(new_key, v, result) else: result[current_key] = value result = {} flatten(\\"\\", d, result) return result"},{"question":"Write a Python function named `find_files_with_extension` that recursively searches through a directory and its subdirectories to find all files with a given file extension. Your function should: 1. Take two parameters: - `directory`: the root directory to start searching from. - `extension`: the file extension to search for (e.g., \\".txt\\"). 2. Return a list of the full paths of all files that match the given extension. Requirements: - Use the `os` and `os.path` modules to navigate the file system. - Use recursion to traverse subdirectories. - Ensure the function handles both relative and absolute paths correctly. Example Usage: ```python # Assuming the following directory structure: # /root # ├── a.txt # ├── b.jpg # └── subdir # ├── c.txt # └── d.pdf paths = find_files_with_extension(\'/root\', \'.txt\') # Output: [\'/root/a.txt\', \'/root/subdir/c.txt\'] ```","solution":"import os def find_files_with_extension(directory, extension): Recursively searches through a directory and its subdirectories to find all files with the given file extension. Parameters: - directory (str): The root directory to start searching from. - extension (str): The file extension to search for (e.g., \\".txt\\"). Returns: - list: A list of the full paths of all files that match the given extension. found_files = [] for root, dirs, files in os.walk(directory): for file in files: if file.endswith(extension): found_files.append(os.path.join(root, file)) return found_files"},{"question":"# Problem Statement You are given the task of implementing a basic image rotation manipulation using Python\'s `numpy` library. The goal is to create a function, `rotate_image`, which takes in a 2D numpy array representing a grayscale image and an integer angle (in degrees). The function should return a new 2D numpy array of the same size representing the image rotated counterclockwise by the given angle. Your function `rotate_image` should: 1. Support rotations by 90, 180, and 270 degrees. 2. Use `numpy` operations for manipulating the image array. 3. Maintain the dimensions of the original image after rotation. Specific Requirements for the Function `rotate_image`: - **Function Signature**: `def rotate_image(image, angle):` - **Parameters**: - `image`: A 2D numpy array representing the grayscale image. - `angle`: An integer representing the rotation angle, which can be 90, 180, or 270 degrees. - **Returns**: The function should return a new 2D numpy array of the same size as the `image`, representing the rotated image. Here is a template for the `rotate_image` function: ```python import numpy as np def rotate_image(image, angle): # Your code here return rotated_image ``` # Example Given an input image array: ```python image = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) ``` and an angle of 90 degrees, calling `rotate_image(image, 90)` should return: ```python np.array([ [3, 6, 9], [2, 5, 8], [1, 4, 7] ]) ``` # Additional Instructions 1. Use numpy operations for efficient manipulation of the image array. 2. Ensure that the dimensions of the rotated image are the same as the input image. # Constraints - The input `image` array has dimensions `MxN`, where `1 <= M, N <= 1000`. - The `angle` is guaranteed to be one of the values: 90, 180, 270. # Hints - Consider using numpy\'s array slicing and transposition methods to achieve the rotation. - You may find `numpy.rot90` useful for the 90-degree rotations.","solution":"import numpy as np def rotate_image(image, angle): Rotates a 2D numpy array representing a grayscale image by 90, 180, or 270 degrees counterclockwise. Parameters: image (numpy.ndarray): 2D numpy array representing the grayscale image. angle (int): Angle by which to rotate the image. Can be 90, 180, or 270 degrees. Returns: numpy.ndarray: Rotated image as a 2D numpy array of the same size as the input. if angle not in [90, 180, 270]: raise ValueError(\\"Angle must be one of 90, 180, or 270 degrees.\\") if angle == 90: return np.rot90(image, k=1) elif angle == 180: return np.rot90(image, k=2) elif angle == 270: return np.rot90(image, k=3)"},{"question":"A company needs a system to manage employee records, including their names, IDs, and salaries. They want to perform several types of queries on these records. You need to design a data structure and functions to handle the following operations efficiently: 1. **Add a new employee record** with a unique ID, name, and salary. 2. **Remove an employee record** by their unique ID. 3. **Retrieve the name of an employee** given their unique ID. 4. **Update the salary** of an employee given their unique ID. 5. **Retrieve the highest salary** among all employees. You are provided with an initial set of employee records in the form of a list of tuples. Each tuple contains three elements: the unique ID (an integer), the name (a string), and the salary (a float). Write a class named `EmployeeRecordManager` that encapsulates these operations. The class should be initialized with the list of employee tuples and should support the following methods: - `add_employee(id: int, name: str, salary: float) -> None`: Adds a new employee record. - `remove_employee(id: int) -> None`: Removes an employee record by ID. - `get_employee_name(id: int) -> str`: Returns the name of the employee with the given ID. - `update_salary(id: int, salary: float) -> None`: Updates the salary of the employee with the given ID. - `highest_salary() -> float`: Returns the highest salary among all employees. **Example Usage:** ```python initial_records = [ (1, \\"Alice\\", 60000.0), (2, \\"Bob\\", 70000.0), (3, \\"Charlie\\", 80000.0) ] manager = EmployeeRecordManager(initial_records) manager.add_employee(4, \\"Diana\\", 75000.0) manager.remove_employee(2) print(manager.get_employee_name(3)) # Output: \\"Charlie\\" manager.update_salary(1, 90000.0) print(manager.highest_salary()) # Output: 90000.0 ```","solution":"class EmployeeRecordManager: def __init__(self, initial_records): Initializes the manager with a list of employee tuples. self.records = {id_: {\'name\': name, \'salary\': salary} for id_, name, salary in initial_records} def add_employee(self, id, name, salary): Adds a new employee record with the unique ID, name, and salary. if id in self.records: raise ValueError(\\"An employee with this ID already exists.\\") self.records[id] = {\'name\': name, \'salary\': salary} def remove_employee(self, id): Removes an employee record by their unique ID. if id not in self.records: raise ValueError(\\"No employee found with this ID.\\") del self.records[id] def get_employee_name(self, id): Retrieves the name of an employee given their unique ID. if id not in self.records: raise ValueError(\\"No employee found with this ID.\\") return self.records[id][\'name\'] def update_salary(self, id, salary): Updates the salary of an employee given their unique ID. if id not in self.records: raise ValueError(\\"No employee found with this ID.\\") self.records[id][\'salary\'] = salary def highest_salary(self): Retrieves the highest salary among all employees. if not self.records: raise ValueError(\\"No employees in the record.\\") return max(record[\'salary\'] for record in self.records.values())"},{"question":"Design a function `generate_report(grades, output_file, display=False)` that generates a summary report of grades for a class using the `pandas` library. The function must perform the following tasks: 1. The function will take three arguments: - `grades`: A list of dictionaries, where each dictionary represents a student’s name and their grades for different subjects. Example: ```python grades = [ {\'name\': \'John Doe\', \'math\': 85, \'science\': 92, \'literature\': 78}, {\'name\': \'Jane Smith\', \'math\': 90, \'science\': 88, \'literature\': 85}, # more students... ] ``` - `output_file`: A string specifying the path where the report will be saved. - `display`: A boolean flag which, if set to True, displays the report interactively. 2. With the provided `grades` list, create a DataFrame. 3. Generate a summary that includes: - The average grade for each subject. - The highest and lowest grades in each subject. - The student with the highest overall average grade. 4. The summary report should be saved to `output_file` in CSV format. 5. If `display` is True, print the DataFrame and summary report to the console. 6. Use the following `pandas` functions in your implementation: - `pandas.DataFrame` - `pandas.DataFrame.mean` - `pandas.DataFrame.max` - `pandas.DataFrame.min` - `pandas.DataFrame.idxmax` - `pandas.DataFrame.to_csv` The function usage example: ```python grades = [ {\'name\': \'John Doe\', \'math\': 85, \'science\': 92, \'literature\': 78}, {\'name\': \'Jane Smith\', \'math\': 90, \'science\': 88, \'literature\': 85}, {\'name\': \'Emily Davis\', \'math\': 70, \'science\': 75, \'literature\': 80}, {\'name\': \'Michael Brown\', \'math\': 95, \'science\': 89, \'literature\': 92} ] generate_report(grades, \'grades_report.csv\', display=True) ``` The output should be a CSV file `grades_report.csv` containing the detailed summary, and if `display` is True, the report should also be printed to the console.","solution":"import pandas as pd def generate_report(grades, output_file, display=False): # Create DataFrame from the grades list df = pd.DataFrame(grades) # Initialize the summary dictionary summary = {} # Calculate and store the average, max, and min for each subject subjects = df.columns.drop(\'name\') for subject in subjects: summary[subject] = { \'average\': df[subject].mean(), \'highest\': df[subject].max(), \'lowest\': df[subject].min() } # Find the student with the highest overall average grade df[\'average_grade\'] = df[subjects].mean(axis=1) top_student = df.loc[df[\'average_grade\'].idxmax()][\'name\'] summary[\'top_student\'] = top_student # Save the original df and summary to the CSV file with open(output_file, \'w\') as f: df.to_csv(f, index=False) f.write(\\"nSummary Reportn\\") for subject, metrics in summary.items(): if subject != \'top_student\': f.write(f\\"{subject.capitalize()}:n\\") for metric, value in metrics.items(): f.write(f\\" {metric.capitalize()}: {value}n\\") else: f.write(f\\"Top Student: {metrics}n\\") # Display the DataFrame and summary report if display is True if display: print(df) print(\\"nSummary Report\\") for subject, metrics in summary.items(): if subject != \'top_student\': print(f\\"{subject.capitalize()}:\\") for metric, value in metrics.items(): print(f\\" {metric.capitalize()}: {value}\\") else: print(f\\"Top Student: {metrics}\\")"},{"question":"You are given a list of strings, where each string can be a number, an arithmetic operator (+, -, *, /), or a parenthesis (,). Your task is to evaluate the mathematical expression represented by the list while respecting the standard order of operations (parentheses, multiplication and division, and addition and subtraction). You need to write a function `evaluate_expression` that parses the list and computes the result. Your function should: 1. Accept a single parameter: - `tokens`: A list of strings representing a mathematical expression in infix notation (e.g., [\\"(\\", \\"2\\", \\"+\\", \\"3\\", \\")\\", \\"*\\", \\"4\\"]). 2. Parse the list to handle parentheses and maintain the correct order of operations. 3. Perform the arithmetic operations as specified in the expression. 4. Return the resulting value as a float. Here is a template for your function signature: ```python def evaluate_expression(tokens): # Your implementation should go here. pass ``` Example inputs and expected outputs: ```python print(evaluate_expression([\\"2\\", \\"+\\", \\"3\\", \\"*\\", \\"4\\"])) # Output: 14.0 print(evaluate_expression([\\"(\\", \\"2\\", \\"+\\", \\"3\\", \\")\\", \\"*\\", \\"4\\"])) # Output: 20.0 print(evaluate_expression([\\"10\\", \\"/\\", \\"2\\", \\"-\\", \\"3\\"])) # Output: 2.0 ``` **Note:** Assume that the input list is a valid mathematical expression.","solution":"def evaluate_expression(tokens): def operate(op, second, first): if op == \'+\': return first + second if op == \'-\': return first - second if op == \'*\': return first * second if op == \'/\': return first / second def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(operate(op, val2, val1)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(operate(op, val2, val1)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(operate(op, val2, val1)) return float(values[-1])"},{"question":"Create a function `draw_chessboard(ax=None, color1=\'white\', color2=\'black\', lw=2)` using the `matplotlib` library in Python. This function should render a standard 8x8 chessboard on a plot. Your function should: 1. Use `matplotlib.pyplot.gca()` to obtain the current axes if none are provided. 2. Utilize `matplotlib.patches.Rectangle` to draw the individual squares of the chessboard. 3. Alternate the colors of the squares to create the classic checkered pattern. 4. Allow customization of the colors of the squares through the parameters `color1` and `color2`. 5. Optionally draw a border around the entire chessboard using a thicker line width defined by the `lw` parameter. Ensure that the drawing scales well and looks proportional on any plotting size set by the user. Maintain clear documentation and comments within your code to help explain how each element is drawn.","solution":"import matplotlib.pyplot as plt import matplotlib.patches as patches def draw_chessboard(ax=None, color1=\'white\', color2=\'black\', lw=2): Draws an 8x8 chessboard on the given axes. Parameters: ax (matplotlib.axes.Axes, optional): The axes to draw the chessboard on. Defaults to None. color1 (str, optional): The color of the first set of squares. Defaults to \'white\'. color2 (str, optional): The color of the second set of squares. Defaults to \'black\'. lw (int, optional): The line width of the borders. Defaults to 2. if ax is None: ax = plt.gca() ax.set_xlim(0, 8) ax.set_ylim(0, 8) ax.set_aspect(\'equal\') # Draw squares for i in range(8): for j in range(8): if (i + j) % 2 == 0: color = color1 else: color = color2 square = patches.Rectangle((i, j), 1, 1, facecolor=color) ax.add_patch(square) # Draw border border = patches.Rectangle((0, 0), 8, 8, edgecolor=\'black\', facecolor=\'none\', linewidth=lw) ax.add_patch(border) ax.axis(\'off\')"},{"question":"You are given a list of names in a text file, where each name is on a separate line. Your task is to write a function that reads the names from the file, sorts them alphabetically, and writes the sorted names to a new file. The names should be case-insensitive during sorting but should preserve the original case in the output file. Write a function `sort_names(input_file, output_file)` that: 1. Reads the names from `input_file`. 2. Sorts the names alphabetically in a case-insensitive manner. 3. Writes the sorted names to `output_file`, each on a new line. Here\'s an example structure of the input file: ``` Alice bob CHARLIE David eve ... ``` # Function Signature ```python def sort_names(input_file: str, output_file: str): pass ``` # Input - `input_file` (str): The file path to the text file containing the list of names. - `output_file` (str): The file path where the sorted names will be saved. # Output The function should not return any value but write the sorted names into the `output_file`. # Example Suppose you have the text file `names.txt` containing the following names: ``` Alice bob CHARLIE David eve ``` Calling the function: ```python sort_names(\'names.txt\', \'sorted_names.txt\') ``` The `sorted_names.txt` should contain: ``` Alice bob CHARLIE David eve ``` # Additional Notes: 1. Ensure the sorting is case-insensitive but the original case is preserved in the output file. 2. Include error handling to manage cases where the input file might not exist or be unreadable.","solution":"def sort_names(input_file: str, output_file: str): try: with open(input_file, \'r\') as f: names = f.readlines() # Remove any leading/trailing whitespace characters names = [name.strip() for name in names] # Sort the names case-insensitively sorted_names = sorted(names, key=lambda x: x.lower()) with open(output_file, \'w\') as f: for name in sorted_names: f.write(name + \'n\') except FileNotFoundError: print(f\\"The file {input_file} does not exist.\\") except IOError: print(f\\"There was an error reading or writing to the file.\\")"},{"question":"Create a Python function named `count_word_occurrences` which takes a filename and a word as input and returns the number of times the word appears in the file. The search should be case-insensitive. Handle potential exceptions, such as cases where the file might not exist. **Requirements** - Create a function named `count_word_occurrences` - The function should accept two parameters: `filename` (a string) and `word` (a string) - Return the count of case-insensitive occurrences of `word` in the file - Handle exceptions where the file may not exist using try-except - Ensure the function handles case insensitive comparison **Function Signature** ```python def count_word_occurrences(filename: str, word: str) -> int: pass ``` **Additional Details** - Open the file in read mode - Read the contents of the file and perform a case-insensitive count of the word - If the file does not exist, return `-1` **Example** Here\'s a basic example of calling the `count_word_occurrences` function: ```python # Assume \'example.txt\' contains the following text: \\"Hello world. Hello Python.\\" count_word_occurrences(\'example.txt\', \'hello\') # Output should be 2 since \'hello\' appears twice (case-insensitive match) ```","solution":"def count_word_occurrences(filename: str, word: str) -> int: Returns the number of case-insensitive occurrences of `word` in the file specified by `filename`. If the file does not exist, returns -1. :param filename: The name of the file to search within :param word: The word to search for :return: The count of case-insensitive occurrences of the word in the file try: with open(filename, \'r\') as file: contents = file.read().lower() return contents.count(word.lower()) except FileNotFoundError: return -1"},{"question":"Create a function to merge two sorted lists into a single sorted list. Note that: The function should merge the two input lists, which are both sorted in non-decreasing order, into a single list that is also sorted in non-decreasing order without using built-in sorting functions. The function should output: list: A single sorted list containing all elements from the two input lists. You should write self-contained code starting with: ``` def merge_sorted_lists(list1, list2): ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Args: list1: First sorted list. list2: Second sorted list. Returns: A merged sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append any remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append any remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are given a text file that contains transaction records for a small business. Each record has the following format: ``` TransactionID, Date, CustomerID, Amount 1,2023-01-01,12345,150.75 2,2023-01-01,67890,200.50 3,2023-01-02,54321,300.00 ... ``` Your task is to create a function named `plot_monthly_sales(file)` which will read the transaction records from the file and plot the monthly sales trends using the `matplotlib` library. Specifically, you need to: 1. Group the transactions by month and calculate the total sales for each month. 2. Use `plt.bar()` to create a bar chart where the x-axis represents the months and the y-axis represents the total sales amount. 3. Use `plt.xlabel()` to label the x-axis with \\"Months\\". 4. Use `plt.ylabel()` to set the y-axis label as \\"Total Sales Amount, \\". 5. Set x-axis ticks to display month names (January, February, etc.). 6. Add a title \\"Monthly Sales Trends for 2023\\". 7. Rotate the x-axis labels for better readability. Ensure your function reads the file correctly and plots the monthly sales trend accurately. Below is the prototype of the function you need to implement: ```python def plot_monthly_sales(file): # Your code here ``` # Data Reading Function For simplicity, assume there is a helper function `get_transactions(file)` provided, which reads the file and returns a list of lists. Each list contains four elements corresponding to the columns: `[TransactionID, Date, CustomerID, Amount]`. The helper function won\'t need to be implemented by you and can be used directly.","solution":"import matplotlib.pyplot as plt from collections import defaultdict import datetime def plot_monthly_sales(file): transactions = get_transactions(file) monthly_sales = defaultdict(float) for transaction in transactions: # transaction[1] is the Date in YYYY-MM-DD format. date = datetime.datetime.strptime(transaction[1], \'%Y-%m-%d\') month_name = date.strftime(\'%B\') # Convert month number to month name amount = float(transaction[3]) # transaction[3] is the Amount monthly_sales[month_name] += amount # Sort the months for plotting sorted_months = sorted(monthly_sales.keys(), key=lambda x: datetime.datetime.strptime(x, \'%B\')) sales_values = [monthly_sales[month] for month in sorted_months] plt.figure(figsize=(10, 5)) plt.bar(sorted_months, sales_values, color=\'skyblue\') plt.xlabel(\'Months\') plt.ylabel(\'Total Sales Amount, \') plt.title(\'Monthly Sales Trends for 2023\') plt.xticks(rotation=45) plt.show() def get_transactions(file): with open(file, \'r\') as f: lines = f.readlines()[1:] # Skip the header line transactions = [line.strip().split(\',\') for line in lines] return transactions"},{"question":"Write a Python function named `aggregate_transactions` that processes a list of transactions into a summary of total amounts spent per user. Each transaction in the list is represented by a dictionary with keys `user_id` (str) and `amount` (float). The function should return a dictionary where each key is a `user_id` and the value is the total amount spent by that user. **Function Specifications:** - **Function Name:** `aggregate_transactions` - **Parameters:** - `transactions` (list): A list of dictionaries, where each dictionary represents a transaction with keys `user_id` (str) and `amount` (float). **Requirements:** 1. Iterate through the list of transactions. 2. For each transaction, extract the `user_id` and `amount`. 3. Maintain a running total of amounts spent per user using a dictionary. 4. Return the dictionary with `user_id` as keys and their corresponding total amounts as values. **Example Usage:** ```python transactions = [ {\\"user_id\\": \\"user1\\", \\"amount\\": 150.0}, {\\"user_id\\": \\"user2\\", \\"amount\\": 200.0}, {\\"user_id\\": \\"user1\\", \\"amount\\": 50.0} ] print(aggregate_transactions(transactions)) # Output should be {\'user1\': 200.0, \'user2\': 200.0} ``` **Dependencies:** - None.","solution":"def aggregate_transactions(transactions): Processes a list of transactions into a summary of total amounts spent per user. Args: transactions (list): A list of dictionaries, where each dictionary represents a transaction with keys `user_id` (str) and `amount` (float). Returns: dict: A dictionary mapping user_ids to the total amount spent. user_totals = {} for transaction in transactions: user_id = transaction[\\"user_id\\"] amount = transaction[\\"amount\\"] if user_id in user_totals: user_totals[user_id] += amount else: user_totals[user_id] = amount return user_totals"},{"question":"You are required to write a function named `sum_numeric_keys` that takes in a single argument, `json_filename`, which is the path to a JSON file. This JSON file contains an arbitrary series of key-value pairs where keys are strings and values can be integers, strings, lists, or nested dictionaries. The JSON structure is as follows: ```json { \\"key1\\": 3, \\"key2\\": \\"example\\", \\"key3\\": {\\"nested_key1\\": 5, \\"nested_key2\\": {\\"deep_key\\": 7}}, \\"key4\\": [1, 2, {\\"nested_list_key\\": 4}] } ``` The function should: 1. Open and read the JSON file. 2. Traverse the entire JSON structure. 3. Sum all the numeric values found throughout the JSON data, irrespective of the nesting level. 4. Print the total sum of the numeric values. You need to use the `json` library to read the JSON data within the function. **Function Signature** ```python def sum_numeric_keys(json_filename: str) -> int: ... ``` **Example Usage:** Given the JSON data: ```json { \\"key1\\": 3, \\"key2\\": \\"example\\", \\"key3\\": {\\"nested_key1\\": 5, \\"nested_key2\\": {\\"deep_key\\": 7}}, \\"key4\\": [1, 2, {\\"nested_list_key\\": 4}] } ``` The function call `sum_numeric_keys(\'data.json\')` should output: ``` Sum of numeric keys: 22 ```","solution":"import json def sum_numeric_keys(json_filename: str) -> int: def traverse_and_sum(data): total = 0 if isinstance(data, dict): for value in data.values(): total += traverse_and_sum(value) elif isinstance(data, list): for item in data: total += traverse_and_sum(item) elif isinstance(data, int): total += data return total with open(json_filename, \'r\') as file: json_data = json.load(file) total_sum = traverse_and_sum(json_data) print(f\\"Sum of numeric keys: {total_sum}\\") return total_sum"},{"question":"Create a function that takes a list of email addresses, extracts the domain name from each email, counts the occurrences of each domain, and plots the domain occurrences using a pie chart. The function should output: Tuple: A tuple containing: Dictionary: A dictionary where the keys are domain names and values are their occurrences. Axes: The matplotlib Axes object for the plotted pie chart. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt from collections import Counter def extract_domains(emails): ```","solution":"import matplotlib.pyplot as plt from collections import Counter def extract_domains(emails): Extract the domain names from a list of email addresses, count the occurrences of each domain, and plot the domain occurrences using a pie chart. Parameters: emails (list): List of email addresses as strings. Returns: tuple: A dictionary with domains as keys and their count as values, and the matplotlib Axes object. # Extract domain names domain_names = [email.split(\'@\')[1] for email in emails] # Count the occurrences of each domain domain_count = Counter(domain_names) # Plot the domain occurrences using a pie chart labels = domain_count.keys() sizes = domain_count.values() fig, ax = plt.subplots() ax.pie(sizes, labels=labels, autopct=\'%1.1f%%\', startangle=90) ax.axis(\'equal\') # Equal aspect ratio ensures that pie is drawn as a circle. # Return the domain count dictionary and the Axes object return domain_count, ax"},{"question":"Write a function named `generate_password` that generates a random password based on the provided configuration. The configuration will be in the form of a dictionary that specifies the length of the password as well as the required types of characters to be included. The function should: 1. Accept a dictionary parameter named `config` which has the following structure: ```python config = { \\"length\\": int, # total length of the password \\"include_uppercase\\": bool, # whether to include uppercase letters \\"include_lowercase\\": bool, # whether to include lowercase letters \\"include_digits\\": bool, # whether to include digits \\"include_special\\": bool # whether to include special characters } ``` 2. Use the configuration to generate a password string that matches the criteria provided. The password should be exactly `length` characters long. 3. If none of the character types are set to `True` or if the `length` is less than one, raise a `ValueError`. 4. Create at least one character from each selected type in the configuration before populating the rest of the password to meet the required length. 5. Shuffle the password to ensure characters are randomly positioned. 6. Return the generated password string. Assume the use of the `string` and `random` modules. Here is an outline of how you can use these modules: ```python import string import random # string.ascii_uppercase: \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' # string.ascii_lowercase: \'abcdefghijklmnopqrstuvwxyz\' # string.digits: \'0123456789\' # string.punctuation: \'!\\"#%&\'()*+,-./:;<=>?@[]^_`{|}~\' # random.choice(seq): Return a random element from the non-empty sequence \'seq\'. # random.shuffle(x[, random]): Shuffle the sequence. ``` **Your Task**: Implement the function `generate_password` as per the described behavior. ```python def generate_password(config): # Write your implementation here pass ``` **Example**: ```python config = { \\"length\\": 12, \\"include_uppercase\\": True, \\"include_lowercase\\": True, \\"include_digits\\": True, \\"include_special\\": False } print(generate_password(config)) # Output: \'A6b3ePQr1uto\' (example, will vary on each call) ```","solution":"import string import random def generate_password(config): length = config.get(\\"length\\", 0) include_uppercase = config.get(\\"include_uppercase\\", False) include_lowercase = config.get(\\"include_lowercase\\", False) include_digits = config.get(\\"include_digits\\", False) include_special = config.get(\\"include_special\\", False) if length < 1: raise ValueError(\\"Password length should be at least 1.\\") available_characters = \'\' password_chars = [] if include_uppercase: available_characters += string.ascii_uppercase password_chars.append(random.choice(string.ascii_uppercase)) if include_lowercase: available_characters += string.ascii_lowercase password_chars.append(random.choice(string.ascii_lowercase)) if include_digits: available_characters += string.digits password_chars.append(random.choice(string.digits)) if include_special: available_characters += string.punctuation password_chars.append(random.choice(string.punctuation)) if not available_characters: raise ValueError(\\"At least one character type must be selected.\\") while len(password_chars) < length: password_chars.append(random.choice(available_characters)) random.shuffle(password_chars) return \'\'.join(password_chars)"},{"question":"You are given a list of transactions, where each transaction is represented by a dictionary with the following key-value pairs: `\'id\'` (a unique identifier for the transaction), `\'amount\'` (the transaction amount), `\'type\'` (the transaction type, which could be `\'debit\'` or `\'credit\'`), and `\'date\'` (the transaction date in the format `\'YYYY-MM-DD\'`). Your task is to implement a function called `analyze_transactions` that processes these transactions and provides three pieces of information: 1. The total amount of all transactions. 2. The total amount for `\'debit\'` transactions. 3. The total amount for `\'credit\'` transactions. **Function Requirements:** - **Function Name**: `analyze_transactions` - **Parameters**: - `transactions` (list of dict): A list of transaction dictionaries as described. - **Returns**: - A dictionary with three key-value pairs: - `\'total_amount\'` (float): The total amount of all transactions. - `\'debit_total\'` (float): The total amount of all debit transactions. - `\'credit_total\'` (float): The total amount of all credit transactions. **Function Details:** 1. Iterate through the `transactions` list. 2. For each transaction, add its amount to the total. 3. Depending on the transaction type, add its amount to either the debit total or credit total. 4. Return a dictionary with the calculated totals. **Example:** ```python transactions = [ {\'id\': \'txn1\', \'amount\': 100.0, \'type\': \'debit\', \'date\': \'2023-01-15\'}, {\'id\': \'txn2\', \'amount\': 200.0, \'type\': \'credit\', \'date\': \'2023-01-16\'}, {\'id\': \'txn3\', \'amount\': 50.0, \'type\': \'debit\', \'date\': \'2023-01-17\'} ] result = analyze_transactions(transactions) print(result) # Should output: {\'total_amount\': 350.0, \'debit_total\': 150.0, \'credit_total\': 200.0} ``` Ensure the function handles an empty transaction list by returning zero for all totals and that it validates input data types and structures as necessary.","solution":"def analyze_transactions(transactions): Analyzes a list of transactions and returns the total amount, total debit amount, and total credit amount. :param transactions: list of dict, where each dict contains \'id\', \'amount\', \'type\', and \'date\' keys :return: dict with \'total_amount\', \'debit_total\', and \'credit_total\' total_amount = 0.0 debit_total = 0.0 credit_total = 0.0 for transaction in transactions: amount = transaction[\'amount\'] total_amount += amount if transaction[\'type\'] == \'debit\': debit_total += amount elif transaction[\'type\'] == \'credit\': credit_total += amount return {\'total_amount\': total_amount, \'debit_total\': debit_total, \'credit_total\': credit_total}"},{"question":"Context: You are provided a DataFrame `Employees` that contains columns `name`, `age`, and `salary`, representing the name, age, and salary of employees in a company. To analyze the relationship between the age of employees and their salary, we need to create a scatter plot. Task: Write a function named `plotAgeSalaryScatter` that performs the following steps: 1. Filters out entries where the `salary` is below the median salary of the DataFrame. 2. Creates a scatter plot of the `age` (x-axis) against the `salary` (y-axis) using the `matplotlib` library. 3. Displays the plot with appropriate labels for the x and y axes. Requirements: - **Function Name:** `plotAgeSalaryScatter` - **Filtering:** Use the `pandas` library to compute the median of the `salary` and filter out entries below this value. - **Visualization:** Use the `matplotlib` library to plot age against salary. - **Library Api:** `matplotlib.pyplot.scatter` Example: Assuming the following DataFrame: ```python import pandas as pd data = { \'name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eve\'], \'age\': [25, 45, 35, 50, 28], \'salary\': [50000, 60000, 55000, 70000, 48000] } Employees = pd.DataFrame(data) # After executing plotAgeSalaryScatter(Employees), a scatter plot # showing the relationship between age and salary (for salaries above # the median) should be displayed. ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plotAgeSalaryScatter(Employees): Filters out entries where the `salary` is below the median salary of the DataFrame and creates a scatter plot of the `age` against the `salary`. Args: Employees (DataFrame): DataFrame containing `name`, `age`, and `salary` columns. Returns: None # Compute the median salary median_salary = Employees[\'salary\'].median() # Filter out entries below the median salary filtered_employees = Employees[Employees[\'salary\'] >= median_salary] # Create the scatter plot plt.scatter(filtered_employees[\'age\'], filtered_employees[\'salary\']) # Adding labels to the plot plt.xlabel(\'Age\') plt.ylabel(\'Salary\') plt.title(\'Age vs Salary Scatter Plot\') # Show the plot plt.show()"},{"question":"You are to implement a function in Python that simulates the rolling of two six-sided dice and computes the probability that their sum equals a given target value. This task will bolster your understanding of probability, random number generation, and enumerating possible outcomes. The function that you need to implement is named `dice_probability`. The function should take one argument: 1. `target` (int): The target sum value for which the probability is to be computed. The function should return a float representing the probability of the sum of the two dice equaling the target value. There are a total of 36 possible outcomes when rolling two six-sided dice (since each die has 6 faces, and 6 * 6 = 36). In your implementation: - You must use the `itertools.product` function from the Python `itertools` module to generate all possible outcomes of the two dice rolls. Below is the skeleton of the function you need to complete: ```python import itertools def dice_probability(target: int) -> float: # Your implementation here ``` Make sure to test your function with a range of target values (from 2 to 12) to ensure it works correctly. Note that the probability should be a value between 0 and 1, and it should be rounded to four decimal places.","solution":"import itertools def dice_probability(target: int) -> float: Computes the probability of the sum of two six-sided dice equaling the given target value. :param target: The target sum of the two dice :return: Probability of the sum being equal to the target value, rounded to four decimal places if target < 2 or target > 12: return 0.0 outcomes = list(itertools.product(range(1, 7), repeat=2)) favorable_outcomes = sum(1 for outcome in outcomes if sum(outcome) == target) probability = favorable_outcomes / 36 return round(probability, 4)"},{"question":"You are required to build a function named `generate_password` that creates a secure password based on specific requirements. Given the provided code snippet, you need to generate a password that meets the following criteria: 1. The password length should be exactly `n` characters. 2. It should contain at least one uppercase letter, one lowercase letter, one digit, and one special character from the set `!@#%^&*()-_=+`. 3. The password should not contain any whitespace characters. Function Signature ```python def generate_password(n: int) -> str: pass ``` Requirements 1. Ensure that `n` is an integer greater than or equal to 8 and less than or equal to 64. If not, raise a `ValueError`. 2. The generated password must be a random combination of letters, digits, and special characters. 3. The password length should be exactly `n`. Inputs and Outputs - **Inputs**: - `n`: An integer specifying the length of the password. - **Outputs**: - Return a string representing the generated password. # Example: ```python # Example usage password = generate_password(12) print(password) # Example output: \'A1b!c2D3f\' password = generate_password(8) print(password) # Example output: \'A1b!c2D%\' ``` # Constraint: - The password generation must be random and meet all specified criteria.","solution":"import random import string def generate_password(n: int) -> str: if not isinstance(n, int) or not (8 <= n <= 64): raise ValueError(\\"Password length must be an integer between 8 and 64.\\") special_characters = \\"!@#%^&*()-_=+\\" all_characters = string.ascii_letters + string.digits + special_characters # Initial characters ensuring at least one from each required category password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(special_characters) ] if n > 4: password += random.choices(all_characters, k=n - 4) # Shuffle the characters to ensure randomness random.shuffle(password) return \'\'.join(password)"},{"question":"You are asked to implement a function that simulates a basic pathfinding algorithm on a 2D grid. The grid is represented as a matrix of integers, where `0` indicates a walkable cell and `1` indicates an obstacle. Your goal is to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) and return the length of this path. If a path does not exist, return `-1`. Your task is to implement the `shortest_path` function in Python. You should use the Breadth-First Search (BFS) algorithm to find the shortest path. # Function Signature ```python def shortest_path(grid): # Function implementation goes here ``` # Parameters Description - **grid** (list of list of integers): A 2D list representing the grid where: - `0` represents a walkable cell. - `1` represents an obstacle. # Function Description 1. **Initialization**: Initialize a queue to store the coordinates of the cells to be visited along with the current path length. 2. **BFS Traversal**: Use BFS to explore the grid starting from the top-left corner. 3. **Neighbor Check**: For the current cell, check its reachable neighbors (up, down, left, right) and add them to the queue if they are walkable and not visited. 4. **Goal Check**: If the bottom-right corner is reached, return the length of the path. 5. **No Path**: If the queue is exhausted and the bottom-right corner is not reached, return `-1`. # Example Usage ```python def shortest_path(grid): from collections import deque rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() queue = deque([((0, 0), 1)]) while queue: (x, y), dist = queue.popleft() if (x, y) == (rows-1, cols-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) return -1 # Example input grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] # Call the function path_length = shortest_path(grid) # Expected output # The length of the shortest path is 9 print(path_length) # Output should be 9 ``` # Constraints 1. The grid will always be at least `1x1`. 2. All elements in the grid are either `0` or `1`. 3. It is guaranteed that the value at the top-left and bottom-right corner of the grid is `0`.","solution":"def shortest_path(grid): from collections import deque rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() queue = deque([((0, 0), 1)]) while queue: (x, y), dist = queue.popleft() if (x, y) == (rows-1, cols-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) return -1"},{"question":"Write a function that simulates a simplified version of the Snake game. The function should take as input the initial position and direction of the snake, a list of movements, a grid size, and return the final position of the snake. The function should be named `simulate_snake` and have the following signature: ```python def simulate_snake(initial_pos, initial_dir, moves, grid_size): Simulates the movement of the snake on a grid. Parameters: initial_pos (tuple): Initial position of the snake as (x, y). initial_dir (str): Initial direction of the snake (\'U\', \'D\', \'L\', \'R\'). moves (list): List of moves where each move is either \'F\' (forward), \'L\' (left turn), or \'R\' (right turn). grid_size (tuple): Size of the grid as (width, height). Returns: tuple: Final position of the snake as (x, y). ``` # Movement Directions: - \'U\': Up (decrease y by 1) - \'D\': Down (increase y by 1) - \'L\': Left (decrease x by 1) - \'R\': Right (increase x by 1) # Turning Logic: - \'L\' (left turn): - \'U\' -> \'L\' - \'L\' -> \'D\' - \'D\' -> \'R\' - \'R\' -> \'U\' - \'R\' (right turn): - \'U\' -> \'R\' - \'R\' -> \'D\' - \'D\' -> \'L\' - \'L\' -> \'U\' # Steps to Follow: 1. Loop through each move in the `moves` list. 2. Update the direction based on the current move (\'L\' or \'R\'). 3. Move forward in the updated direction if the current move is \'F\'. 4. Ensure that the snake stays within the boundaries of the grid. # Example Usage: ```python initial_pos = (2, 2) initial_dir = \'U\' moves = [\'F\', \'L\', \'F\', \'R\', \'F\'] grid_size = (5, 5) final_pos = simulate_snake(initial_pos, initial_dir, moves, grid_size) print(final_pos) # Output: (1, 1) (or another position depending on the initial conditions and moves) ```","solution":"def simulate_snake(initial_pos, initial_dir, moves, grid_size): Simulates the movement of the snake on a grid. Parameters: initial_pos (tuple): Initial position of the snake as (x, y). initial_dir (str): Initial direction of the snake (\'U\', \'D\', \'L\', \'R\'). moves (list): List of moves wherein each move is either \'F\' (forward), \'L\' (left turn), or \'R\' (right turn). grid_size (tuple): Size of the grid as (width, height). Returns: tuple: Final position of the snake as (x, y). x, y = initial_pos direction = initial_dir # Define the directional movements direction_map = { \'U\': (0, -1), \'D\': (0, 1), \'L\': (-1, 0), \'R\': (1, 0) } # Define the turn changes turn_map = { \'U\': {\'L\': \'L\', \'R\': \'R\'}, \'D\': {\'L\': \'R\', \'R\': \'L\'}, \'L\': {\'L\': \'D\', \'R\': \'U\'}, \'R\': {\'L\': \'U\', \'R\': \'D\'} } for move in moves: if move == \'L\' or move == \'R\': direction = turn_map[direction][move] elif move == \'F\': dx, dy = direction_map[direction] x += dx y += dy # Ensure the snake stays within the boundaries x = min(max(x, 0), grid_size[0] - 1) y = min(max(y, 0), grid_size[1] - 1) return (x, y)"},{"question":"You are required to write a function to manage the state of a simplified inventory system for a game. The function you will write, `update_inventory`, will handle adding items, removing items, and checking the inventory for items\' availability. The requirements are as follows: 1. **Adding Items:** - Each item in the inventory should be represented by a dictionary with the item\'s name as the key and the quantity as the value. - If the item already exists in the inventory, increase the quantity by the specified amount. - If the item does not exist, add it to the inventory with the given quantity. 2. **Removing Items:** - If an attempt is made to remove more quantity of an item than is available, output a message: `\\"Not enough quantity to remove\\"` and do not change the inventory. - If the item exists and has enough quantity, decrease the quantity by the specified amount. - If the quantity after removal is zero, remove the item from the inventory. 3. **Checking Items:** - Ensure the quantity of each item is non-negative. - If an item does not exist in the inventory, assume its quantity is zero. The function signature should be: ```python def update_inventory(inventory, action, item, quantity): pass ``` Here is a starter template that you need to complete: ```python def update_inventory(inventory, action, item, quantity): # Add item to inventory if action == \\"add\\": if item in inventory: inventory[item] += quantity else: inventory[item] = quantity # Remove item from inventory elif action == \\"remove\\": if item in inventory: if inventory[item] < quantity: print(\\"Not enough quantity to remove\\") else: inventory[item] -= quantity if inventory[item] == 0: del inventory[item] else: print(f\\"{item} does not exist in the inventory\\") # Testing the function inventory = {\'potion\': 5, \'elixir\': 3} update_inventory(inventory, \\"add\\", \\"potion\\", 2) print(inventory) # Output should be: {\'potion\': 7, \'elixir\': 3} update_inventory(inventory, \\"remove\\", \\"elixir\\", 1) print(inventory) # Output should be: {\'potion\': 7, \'elixir\': 2} update_inventory(inventory, \\"remove\\", \\"potion\\", 8) # Output should be: \\"Not enough quantity to remove\\" print(inventory) # Output should be: {\'potion\': 7, \'elixir\': 2} ```","solution":"def update_inventory(inventory, action, item, quantity): if action == \\"add\\": if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif action == \\"remove\\": if item in inventory: if inventory[item] < quantity: print(\\"Not enough quantity to remove\\") else: inventory[item] -= quantity if inventory[item] == 0: del inventory[item] else: print(f\\"{item} does not exist in the inventory\\")"},{"question":"In a scenario where you are tasked with optimizing a delivery service\'s route planning, you are provided with details of multiple locations. Your goal is to create an algorithm that finds the shortest path that visits each location exactly once and returns to the starting point, commonly known as the Traveling Salesman Problem (TSP). Your task is to write a function `find_shortest_route()` that takes in a list of tuples representing the coordinates (x, y) of each location and returns the order in which the locations should be visited to minimize the total travel distance. # Requirements - You may use any heuristic or optimization approach, but the function should be efficient for a reasonable number of locations (e.g., up to 20). - The function should compute the Euclidean distance between locations. - The output should be a list of indices representing the order of the locations to achieve the shortest path. # Function Signature ```python def find_shortest_route(locations: List[Tuple[float, float]]) -> List[int]: Finds the shortest route to visit all given locations exactly once and return to the starting point. Parameters: - locations: List[Tuple[float, float]] : A list of tuples where each tuple contains the x and y coordinates of a location. Returns: - List[int] : The indices of the locations in the order they should be visited to minimize total travel distance. ``` # Example Given the following list of locations: ```python locations = [(0, 0), (2, 0), (2, 2), (0, 2)] ``` The function should return a valid order of these locations that provides the shortest route, such as: ```python [0, 1, 2, 3] # Or any other order that results in the same total distance ```","solution":"import itertools from typing import List, Tuple import math def euclidean_distance(p1: Tuple[float, float], p2: Tuple[float, float]) -> float: return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def total_distance(order: List[int], locations: List[Tuple[float, float]]) -> float: return sum(euclidean_distance(locations[order[i]], locations[order[i+1]]) for i in range(len(order)-1)) + euclidean_distance(locations[order[-1]], locations[order[0]]) def find_shortest_route(locations: List[Tuple[float, float]]) -> List[int]: n = len(locations) if n == 0: return [] best_order = None min_distance = float(\'inf\') for order in itertools.permutations(range(n)): current_distance = total_distance(order, locations) if current_distance < min_distance: best_order = order min_distance = current_distance return list(best_order)"},{"question":"In this problem, your task is to implement a function `find_max_palindrome_substring` that finds the longest palindromic substring in a given string. The palindromic substring can only contain alphanumeric characters and must ignore case. **Function Name:** `find_max_palindrome_substring` **Function Definition:** ```python def find_max_palindrome_substring(s): pass ``` **Parameters:** 1. `s` (str): A string which may include a mix of alphanumeric characters and other punctuation or whitespace characters. **Output:** - Return the longest palindromic substring from the given string. If there are multiple substrings of the same maximum length, return the first one encountered. **Steps:** 1. Preprocess the input string to ignore non-alphanumeric characters and to convert all characters to lowercase. 2. Implement a method to find and expand potential palindromes from each character position. 3. Return the longest palindromic substring found, checking for maximal length. **Guidelines:** - Use Python\'s string manipulation methods to preprocess the input string. - Consider utilizing a helper function to expand from the center for palindrome detection. - Ensure the solution efficiently handles the length of the input string. **Example:** ```python s = \\"A man, a plan, a canal, Panama!\\" result = find_max_palindrome_substring(s) print(result) # Expected output should be \\"amanaplanacanalpanama\\" s = \\"race a car\\" result = find_max_palindrome_substring(s) print(result) # Expected output should be \\"racecar\\" s = \\"abcd\\" result = find_max_palindrome_substring(s) print(result) # Expected output should be any single character, e.g., \\"a\\" ```","solution":"def find_max_palindrome_substring(s): def preprocess(s): # Only take alphanumeric characters and convert to lowercase return \'\'.join(c.lower() for c in s if c.isalnum()) def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 # Return the expanded substring return s[left + 1:right] s = preprocess(s) n = len(s) if n == 0: return \\"\\" longest_palindrome = \\"\\" for i in range(n): # Odd length palindromes candidate = expand_around_center(s, i, i) if len(candidate) > len(longest_palindrome): longest_palindrome = candidate # Even length palindromes if i + 1 < n: candidate = expand_around_center(s, i, i + 1) if len(candidate) > len(longest_palindrome): longest_palindrome = candidate return longest_palindrome"},{"question":"Design and Output: You are required to implement a function that identifies the most common sequence of three consecutive characters in a given string. The function should return the most frequent triplet and the number of times it appears. If there are multiple triplets with the highest frequency, return any one of them. Write a function named `most_common_triplet` that accepts a single parameter: - `s`: a string containing the input text. The function should return a tuple containing: - The most common triplet (a string of three characters). - An integer representing the number of occurrences of this triplet. Example usage: ```python result = most_common_triplet(\\"abcabcabcab\\") print(result) # Output might be (\'abc\', 3) ``` Note: - Assume the input string has a minimum length of 3. - Consider case sensitivity, i.e., \'ABC\' and \'abc\' should be treated as different triplets.","solution":"def most_common_triplet(s): Identifies the most common sequence of three consecutive characters in the given string. Parameters: s (str): The input string containing the text. Returns: tuple: The most common triplet and the number of times it appears. from collections import defaultdict triplet_count = defaultdict(int) for i in range(len(s) - 2): triplet = s[i:i + 3] triplet_count[triplet] += 1 most_common = max(triplet_count, key=triplet_count.get) return most_common, triplet_count[most_common]"},{"question":"You are tasked with implementing a function `special_sorted_squares(numbers: List[int]) -> List[int]` that processes and returns a list of integers according to the following rules: 1. Compute the square of each number in the input list. 2. Sort the resultant squares in non-decreasing order. 3. From the sorted list, filter out all numbers that end with a digit specified by the user. 4. Return the filtered and sorted list. To accomplish this task, you must utilize lambda functions and the `sorted()` function from core Python. Restrictions: - You **must** use a lambda function at least once for filtering the numbers. - You **must** use the `sorted()` function to sort the list. Function Signature: ```python def special_sorted_squares(numbers: List[int], end_digit: int) -> List[int]: ``` Example: ```python special_sorted_squares([1, -3, 5, -2], 4) ``` The input list of numbers `[1, -3, 5, -2]` will be processed as follows: 1. Squaring each number yields `[1, 9, 25, 4]`. 2. Sorting the squares in non-decreasing order gives `[1, 4, 9, 25]`. 3. Filtering out numbers ending with `\'4\'` results in `[1, 9, 25]`. Therefore, the function will return `[1, 9, 25]`.","solution":"from typing import List def special_sorted_squares(numbers: List[int], end_digit: int) -> List[int]: This function takes a list of integers and an end digit. It returns the list of squared numbers sorted in non-decreasing order and filtered out by numbers that end with the specified digit. :param numbers: List of integers :param end_digit: Integer digit that squared numbers should not end with :return: Filtered and sorted list of squared numbers # Step 1: Compute the square of each number squared_numbers = [x ** 2 for x in numbers] # Step 2: Sort the resultant squares in non-decreasing order squared_numbers.sort() # Step 3: Filter out all numbers that end with the specified digit filtered_numbers = list(filter(lambda x: x % 10 != end_digit, squared_numbers)) return filtered_numbers"}]'),F={name:"App",components:{PoemCard:S},data(){return{searchQuery:"",visibleCount:4,poemsData:R,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},D={class:"card-container"},z={key:0,class:"empty-state"},P=["disabled"],Y={key:0},N={key:1};function L(a,e,l,m,r,s){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",D,[(n(!0),i(b,null,w(s.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",z,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",N,"Loading...")):(n(),i("span",Y,"See more"))],8,P)):u("",!0)])}const j=h(F,[["render",L],["__scopeId","data-v-6fe4e76f"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/31.md","filePath":"chatai/31.md"}'),O={name:"chatai/31.md"},B=Object.assign(O,{setup(a){return(e,l)=>(n(),i("div",null,[x(j)]))}});export{U as __pageData,B as default};
