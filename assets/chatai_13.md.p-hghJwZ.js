import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-dc98cdfb"]]),S=JSON.parse('[{"question":"You are given a grid of size n x m, where each cell contains an integer representing the height of that cell. You can move to any of the four adjacent cells (up, down, left, or right) if the height difference between the current cell and the destination cell does not exceed a specified limit k. Your task is to determine if it is possible to start from the top-left corner of the grid (cell (1, 1)) and reach the bottom-right corner of the grid (cell (n, m)). Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ 106) — the number of rows, the number of columns, and the maximum allowed height difference between adjacent cells, respectively. Each of the next n lines contains m integers, representing the heights of the cells in the grid. Output Output \\"YES\\" if it is possible to reach the bottom-right corner of the grid from the top-left corner, and \\"NO\\" otherwise. Examples Input 3 3 2 1 3 5 2 8 3 4 4 4 Output YES Input 3 3 1 1 3 5 2 8 3 4 4 4 Output NO Note In the first example, you can move as follows: - (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) with height differences of 1, 2, 0, 0, which are all ≤ 2. In the second example, there is no valid path with height differences not exceeding 1 starting from (1, 1) to (3, 3).","solution":"def can_reach_end(n, m, k, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny] and abs(grid[nx][ny] - grid[x][y]) <= k: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" # Example usage: # n, m, k = 3, 3, 2 # grid = [ # [1, 3, 5], # [2, 8, 3], # [4, 4, 4] # ] # print(can_reach_end(n, m, k, grid)) # Output: YES"},{"question":"You are given an array of integers. Your task is to write a program that finds and prints the product of all elements in the array except the current element for each position in the array. Input: The first line contains an integer T, denoting the number of test cases. Each test case starts with an integer N, denoting the number of elements in the array. The next line contains N integers separated by spaces, which represent the elements of the array. Output: For each test case, print N integers separated by spaces, where the i-th integer is the product of all elements of the array except the i-th element. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 20 1 ≤ A[i] ≤ 10 SAMPLE INPUT 2 3 1 2 3 4 2 3 4 5 SAMPLE OUTPUT 6 3 2 60 40 30 24","solution":"def product_except_self(nums): For a given list of numbers, returns a list where each element is the product of all other elements except the one at the current position. length = len(nums) if length == 0: return [] # Initialize the result array with 1 result = [1] * length # Compute the prefix product for each element prefix = 1 for i in range(length): result[i] = prefix prefix *= nums[i] # Compute the suffix product for each element and multiply with the prefix product stored in the result array suffix = 1 for i in range(length - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result def process_test_cases(test_cases): Processes multiple test cases and returns the computed product lists. results = [] for case in test_cases: nums = case results.append(product_except_self(nums)) return results"},{"question":"John has recently started playing a card game with his friends. The game involves a deck of N unique cards, each card having a distinct integer value between 1 and N. The rules of the game require John to select any contiguous sequence of cards from the deck and sum their values. If the sum of the sequence is equal to a given integer K, John wins the game. Your task is to help John find if there exists such a contiguous sequence of cards whose sum is exactly K. If such a sequence exists, output \\"YES\\". Otherwise, output \\"NO\\". Input: The first line contains two integers N and K. The second line contains N space-separated integers representing the value of each card in the deck. Output: Output \\"YES\\" if there exists a contiguous sequence of cards that sum up to K. Otherwise, output \\"NO\\". Constraints: 1 ≤ N ≤ 1000 1 ≤ each card value ≤ 1000 1 ≤ K ≤ 1000000 SAMPLE INPUT 5 15 1 2 3 4 5 SAMPLE OUTPUT YES Explanation: The contiguous sequence [4, 5, 6] sums up to 15. Here there is a mistake the contiguous sequence [4, 5, 6] sums up to 15 should be replaced by contiguous sequence [4, 5, 6] sums up to 15 should be replaced by contiguous sequence [0, 1, 2, 3, 4] sums up to 15.","solution":"def is_sum_k_present(N, K, cards): Returns \\"YES\\" if there exists a contiguous sequence of cards that sums up to K, otherwise \\"NO\\". current_sum = 0 start = 0 for end in range(N): current_sum += cards[end] while current_sum > K and start <= end: current_sum -= cards[start] start += 1 if current_sum == K: return \\"YES\\" return \\"NO\\""},{"question":"You are working on a project where you need to manage time intervals and determine if there are any overlaps between them. Given multiple time intervals, your task is to write a program that finds the number of conflicting intervals. Each interval is represented by a pair of integers [start, end) where \'start\' is the starting time (inclusive) and \'end\' is the ending time (exclusive). Two intervals [a, b) and [c, d) are said to be overlapping if and only if there exists some time t such that a <= t < b and c <= t < d. -----Input----- The first line contains an integer n (1 <= n <= 10^5) — the number of intervals. Each of the next n lines contains two integers start and end (0 <= start < end <= 10^9) — the starting and ending times of the interval. -----Output----- Print one integer — the number of conflicting intervals. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 3 4 5 6 7 8 Output 0 -----Note----- In the first example, interval [1, 3) overlaps with [2, 5), and [2, 5) overlaps with [4, 6). Therefore, there are 2 conflicting intervals in total. In the second example, none of the intervals overlap, so there are 0 conflicting intervals.","solution":"def count_conflicting_intervals(intervals): Returns the number of conflicting intervals. # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) conflicts = 0 end_time = intervals[0][1] for start, end in intervals[1:]: if start < end_time: conflicts += 1 end_time = max(end_time, end) return conflicts def process_input(n, intervals_data): Processes the input to be in the required format and returns the count of conflicting intervals. intervals = [] for data in intervals_data: start, end = map(int, data.split()) intervals.append((start, end)) return count_conflicting_intervals(intervals)"},{"question":"A large warehouse is organized in a systematic way where shelves are aligned in a grid formation. Each shelf can be identified with coordinates (i, j) where \'i\' is the row number and \'j\' is the column number starting from (1, 1) at the top-left corner. Each shelf has a certain number of identical items stored on it. Warehouse workers need to answer queries about the total number of items stored in a subgrid defined by two shelves. Write a program to help the workers determine the total number of items in a subgrid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the warehouse grid. The next n lines contain m integers each, where the j-th integer in the i-th line (1 ≤ a[i][j] ≤ 1000) represents the number of items on the shelf located at (i, j). The following line contains a single integer q (1 ≤ q ≤ 10000) — the number of queries. Each of the next q lines contains four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) specifying the top-left and bottom-right corners of the subgrid for which the total number of items needs to be calculated. Output For each query, output a single integer — the total number of items in the specified subgrid. Example Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28 Note In the first query, the subgrid from (1,1) to (2,2) includes the shelves with items: [ 1 2 ] [ 4 5 ] The sum is 1 + 2 + 4 + 5 = 12. In the second query, the subgrid from (2,2) to (3,3) includes the shelves with items: [ 5 6 ] [ 8 9 ] The sum is 5 + 6 + 8 + 9 = 28.","solution":"def preprocess_grid(n, m, grid): # Create a prefix sum array prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def query_sum(prefix_sum, r1, c1, r2, c2): return (prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1]) # Here is how you can run the solution from the inputs def total_items_in_subgrid(n, m, grid, queries): prefix_sum = preprocess_grid(n, m, grid) results = [] for r1, c1, r2, c2 in queries: results.append(query_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"A famous mathematician loves playing with sequences. One day he came up with a new sequence which he calls \\"Even-Odd Sequence\\". To generate this sequence, he starts with a number S and keeps alternating between the following steps until he reaches 1: 1. If the current number is even, divide it by 2. 2. If the current number is odd, multiply it by 3 and add 1. The mathematician wonders how many steps it will take to reach 1 starting from S. Can you help him figure this out? Input The first line of input contains a single integer T, the number of test cases. Each of the next T lines contains a single integer S. Output For each test case, print the number of steps needed to reach 1 from the starting number S. Constraints 1 ≤ T ≤ 10 1 ≤ S ≤ 10^9 SAMPLE INPUT 3 6 19 1 SAMPLE OUTPUT 8 20 0 Explanation In the first example, starting from 6, the even-odd sequence is: 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. It takes 8 steps to reach 1. In the second example, starting from 19, the sequence is: 19 -> 58 -> 29 -> 88 -> 44 -> 22 -> 11 -> 34 -> 17 -> 52 -> 26 -> 13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. It takes 20 steps to reach 1. In the third example, starting from 1, no steps are needed as the sequence already starts at 1.","solution":"def even_odd_sequence_steps(S): Returns the number of steps required to reach 1 using the even-odd sequence starting from S. steps = 0 while S != 1: if S % 2 == 0: S = S // 2 else: S = 3 * S + 1 steps += 1 return steps def solve_even_odd_sequence(test_cases): Takes a list of starting values and returns a list of steps required to reach 1 for each. results = [] for S in test_cases: results.append(even_odd_sequence_steps(S)) return results"},{"question":"Our software company is developing a new video game that includes a series of interconnected quests. Each quest can be completed independently, but some quests have prerequisites which must be completed before they can be started. You have been tasked with writing a program to determine the minimum number of days required to complete all quests given these dependencies. Each quest takes exactly one day to complete, and multiple quests can be worked on simultaneously if their prerequisites have been met. -----Input----- The first line contains an integer T denoting the number of test cases. Each of the next T sections describes a single test case. Each test case starts with an integer N, representing the number of quests. The next line contains an integer D, representing the number of dependencies. The following D lines each contain two integers ai and bi, indicating that quest bi can only be started after quest ai has been completed. -----Output----- For every test case, print in a single line the minimum number of days required to complete all the quests. If it\'s not possible to complete all quests, output -1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ D ≤ 10000 -----Example----- Input: 2 4 3 1 2 2 3 3 4 5 4 1 2 1 3 2 4 3 5 Output: 4 3 -----Explanation----- Example case 1: All quests must be completed in the order: 1 -> 2 -> 3 -> 4. Therefore, the total number of days required is 4. Example case 2: Quests can be completed in the following manner: Day 1: Complete quest 1 Day 2: Complete quests 2 and 3 (after finishing quest 1) Day 3: Complete quests 4 and 5 (after finishing quests 2 and 3) Thus, the minimum number of days required is 3.","solution":"from collections import defaultdict, deque def min_days_to_complete_quests(t, test_cases): def topo_sort(n, prereqs): in_degree = [0] * (n + 1) adj_list = defaultdict(list) for pre, quest in prereqs: adj_list[pre].append(quest) in_degree[quest] += 1 queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) days = 0 task_count = 0 while queue: current_tasks = len(queue) for _ in range(current_tasks): quest = queue.popleft() task_count += 1 for neigh in adj_list[quest]: in_degree[neigh] -= 1 if in_degree[neigh] == 0: queue.append(neigh) days += 1 if task_count == n: return days else: return -1 results = [] for case in test_cases: N, D, dependencies = case days_needed = topo_sort(N, dependencies) results.append(days_needed) return results"},{"question":"You are given a list of rock samples, each represented by a unique identifier and a set of mineral compositions in them. The task is to sort these rock samples based on their mineral compositions. A rock sample is represented by its identifier, followed by the count of each type of mineral it contains. You need to arrange the rock samples in ascending order based on the sum of their mineral compositions. If two rock samples have the same sum, sort them lexicographically by their identifier. Input The first line contains a positive integer t ≤ 50 indicating the number of test cases. Each test case starts with a positive integer n ≤ 1000 representing the number of rock samples. The next n lines represent the rock samples with their identifiers and a set of integer values, where the first value is the identifier (string of at most length 20) followed by the counts of minerals (integer values, where each integer is ≤ 1000). Output For each test case, print the sorted identifiers of rock samples each in a new line. Example Input: 2 3 rock11 12 15 18 rock5 3 4 9 rock6 8 6 10 2 sample1 2 3 5 sample2 5 3 1 Output: rock5 rock6 rock11 sample2 sample1","solution":"def sort_rock_samples(test_cases): results = [] for test_case in test_cases: n, samples = test_case def key_func(sample): identifier, *minerals = sample.split() minerals = list(map(int, minerals)) return (sum(minerals), identifier) sorted_samples = sorted(samples, key=key_func) results.append([sample.split()[0] for sample in sorted_samples]) return results def format_output(results): output = [] for result in results: output.extend(result) return \\"n\\".join(output)"},{"question":"You are given an array of n integers. Your goal is to form a new array by following these rules: 1. Start with an empty array and iterate over the original array from left to right. 2. For each element of the original array, append it to the new array if it satisfies one of the following conditions: - It is the first element to be added to the new array. - It is greater than the last element currently in the new array. - It is smaller than the last element currently in the new array. After forming the new array according to the rules, your task is to determine its length. -----Input----- The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 2cdot10^5). The second line of each test case contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 2cdot10^5. -----Output----- For each test case, print a single integer — the length of the new array. -----Examples----- Input 3 3 1 3 2 4 4 3 2 1 5 1 2 3 4 5 Output 3 4 5 -----Note----- In the first test case, the new array can be [1, 3, 2] where all the conditions are satisfied: 1 is the first element, 3 is greater than 1, and 2 is smaller than 3. In the second test case, the new array can be [4, 3, 2, 1] since each element is smaller than the last added element. In the third test case, the new array can be the same as the original array because each subsequent element is greater than the last added element.","solution":"def new_array_length(test_cases): result = [] for test_case in test_cases: n, a = test_case new_arr = [a[0]] # start with the first element for i in range(1, n): # Compare with the last element of the new array if a[i] > new_arr[-1] or a[i] < new_arr[-1]: new_arr.append(a[i]) result.append(len(new_arr)) return result def parse_input_output(raw_input): data = raw_input.strip().split() idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) idx += 1 a = list(map(int, data[idx:idx+n])) idx += n test_cases.append((n, a)) return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"-----Input----- The input consists of a single line containing a string of up to 1000 uppercase letters. -----Output----- Output the first letter of the string that appears only once. If no such letter exists, output \'-\' (a single hyphen). -----Example----- Input AABBCDEFG Output C","solution":"def first_unique_letter(s): Returns the first letter of the string that appears only once. If no such letter exists, returns \'-\'. # Create a dictionary to count the occurrences of each character count = {} for char in s: if char in count: count[char] += 1 else: count[char] = 1 # Find the first character with a count of 1 for char in s: if count[char] == 1: return char # If no unique character found, return \'-\' return \'-\'"},{"question":"You are given an n x m grid filled with numbers from 1 to k. A stockpile of valuable resources is distributed across this grid, and each cell contains a specific number of resources (values from 1 to k). Your objective is to collect the maximum possible resources by starting at any cell in the first row and moving to the last row. You can move to the cell directly below or to the cells diagonally adjacent below. Input The first line contains three space-separated integers n, m (1 ≤ n, m ≤ 500) and k (1 ≤ k ≤ 1000) — the height and width of the grid, and the maximum number of resources in any cell, respectively. Each of the next n lines contains m integers — the grid description where each number is a value from 1 to k representing the resources available in that cell. Output Print an integer — the maximum number of resources you can collect along any valid path from the first row to the last row. Example Input 3 3 5 1 2 3 4 5 6 7 8 9 Output 18 Explanation In the sample, the best path would be starting from the second cell of the first row, moving to the third cell in the second row, and then moving to the third cell in the third row. The total resources collected would be 2 + 6 + 9 = 17.","solution":"def max_resources(n, m, k, grid): # Initialize a dp array with same dimensions as grid dp = [[0]*m for _ in range(n)] # Fill the dp array for the first row for j in range(m): dp[0][j] = grid[0][j] # Fill the dp array for subsequent rows for i in range(1, n): for j in range(m): # Current cell max_val = dp[i-1][j] # Diagonal left if j > 0: max_val = max(max_val, dp[i-1][j-1]) # Diagonal right if j < m-1: max_val = max(max_val, dp[i-1][j+1]) dp[i][j] = grid[i][j] + max_val # The result will be the maximum value in the last row return max(dp[n-1]) # Example usage: n, m, k = 3, 3, 5 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_resources(n, m, k, grid)) # Output: 18"},{"question":"You have been given a list of words and a pattern. Your task is to identify words in the list that match the provided pattern. A word matches the pattern if there exists a bijection between letters in the pattern and letters in the word such that the same letter in the pattern maps to the same letter in the word. For example: If the pattern is `\\"abb\\"`: - The word `\\"mee\\"` matches because the pattern maps as `\\"a\\" -> \\"m\\"`, `\\"b\\" -> \\"e\\"`, and another `\\"b\\" -> \\"e\\"`. - The word `\\"abc\\"` does not match the pattern because `\\"a\\" -> \\"a\\"`, `\\"b\\" -> \\"b\\"`, and another `\\"b\\" -> \\"c\\"`, but we insisted that the second `\\"b\\"` should map to `\\"b\\"`. # Input A list of strings where each string contains only `[a-z]` letters, and a pattern which is also a string containing only `[a-z]` letters. # Output A list of strings that match the given pattern. # Example ```python words = [\\"aac\\", \\"mee\\", \\"aab\\", \\"xyz\\"] pattern = \\"foo\\" ``` The function should return: ```python [\\"mee\\"] ```","solution":"def find_and_replace_pattern(words, pattern): Returns a list of words that match the given pattern. def matches(word, pattern): mapping = {} used_values = set() for w_char, p_char in zip(word, pattern): if p_char in mapping: if mapping[p_char] != w_char: return False else: if w_char in used_values: return False mapping[p_char] = w_char used_values.add(w_char) return True return [word for word in words if matches(word, pattern)]"},{"question":"Geeko continues his adventures in coding and is now interested in prime numbers. In his dream, a wizard challenges him with a new problem: finding the sum of prime numbers in a given range [a, b]. Geeko must calculate the sum of all prime numbers between a (inclusive) and b (inclusive). The wizard provides Geeko with several ranges and expects Geeko to solve the problem for each range. Write a program to help Geeko calculate the sum of prime numbers for multiple ranges. INPUT The first line contains an integer t denoting the number of test cases. Each of the next t lines contains two integers a and b representing the range [a, b]. OUTPUT For each test case, output a single integer: the sum of all prime numbers in the given range [a, b]. CONSTRAINTS 1 ≤ t ≤ 100 1 ≤ a ≤ b ≤ 10^6 SAMPLE INPUT 2 10 20 15 30 SAMPLE OUTPUT 60 83 Explanation For sample case 1: Prime numbers between 10 and 20 are 11, 13, 17, and 19. Sum = 11 + 13 + 17 + 19 = 60 For sample case 2: Prime numbers between 15 and 30 are 17, 19, 23, and 29. Sum = 17 + 19 + 23 + 29 = 88","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_range(a, b): return sum(i for i in range(a, b + 1) if is_prime(i))"},{"question":"**Treasure Hunt in the Grid** You are given an n x m grid consisting of empty cells (denoted by \'.\'), obstacles (denoted by \'#\'), and treasure chests (denoted by \'T\'). Your task is to help a treasure hunter find the maximum number of treasure chests he can collect starting from a given starting position in the grid. The hunter can move up, down, left, or right, but he cannot move through obstacles. **Input:** ``` - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The next n lines each contain a string of length m representing the grid. - The last line contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the starting position of the hunter (1-indexed). ``` **Output:** ``` - Print a single integer denoting the maximum number of treasure chests the hunter can collect starting from the given position. ``` **Examples:** Input: ``` 5 5 ..... .T.#. ..... ... #T. 3 1 ``` Output: ``` 2 ``` Input: ``` 3 3 .T. .#. .T. 1 1 ``` Output: ``` 2 ``` Input: ``` 4 4 ..T. #. .T#. .... 1 1 ``` Output: ``` 2 ``` **Note:** - In the first example, the hunter can reach two treasure chests by the following sequence of moves: starting at (3,1) -> move to (2,1) -> move to (2,2), and continue exploring. - In the second example, the hunter can collect two treasures: one at (1,2) and another at (3,2).","solution":"def max_treasures(grid, start_x, start_y): n = len(grid) m = len(grid[0]) # Valid moves: up, down, left, right moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert 1-indexed to 0-indexed start_x -= 1 start_y -= 1 def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' def bfs(start_x, start_y): from collections import deque queue = deque([(start_x, start_y)]) visited = [[False] * m for _ in range(n)] visited[start_x][start_y] = True treasures_count = 0 while queue: x, y = queue.popleft() if grid[x][y] == \'T\': treasures_count += 1 for move in moves: nx, ny = x + move[0], y + move[1] if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return treasures_count return bfs(start_x, start_y) # The main function to use the defined function above. def treasure_hunt(n, m, grid, x, y): return max_treasures(grid, x, y)"},{"question":"# Task Write a function `match_parentheses` that takes a single string as input, and checks if the parentheses in the string are correctly matched and properly nested. For example, the string `\\"(())\\"` has properly nested and matched parentheses, while the string `\\"(()\\"` does not, because it is missing a closing parenthesis. Your function should return `True` if the parentheses are properly matched and nested, and `False` otherwise. # Examples ```python assert match_parentheses(\\"()\\") == True assert match_parentheses(\\"(())\\") == True assert match_parentheses(\\"(()\\") == False assert match_parentheses(\\")(\\") == False assert match_parentheses(\\"((())\\") == False ``` # Constraints * The input string will only contain the characters `(`, `)`, and possibly other non-parenthesis characters. * The expected time complexity is O(n), where n is the length of the input string.","solution":"def match_parentheses(s): Checks if the parentheses in the input string are correctly matched and properly nested. Args: s (str): the input string containing parentheses and possibly other characters. Returns: bool: True if the parentheses are properly matched and nested, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function `deepest_node(root)` that takes the root node of a binary tree and returns the value of the deepest (i.e., the bottom-most, right-most) node in the tree. The binary tree is represented using nodes with the following structure: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` For example, given the binary tree: ``` 1 / 2 3 / 4 5 6 7 ``` The function `deepest_node(root)` should return `7`, as the deepest node in this tree is the node with value `7`. Hints: - Use breadth-first search (BFS) to make sure you visit nodes level by level. - The deepest node encountered in the BFS traversal will be the answer. Consider edge cases where the tree might be empty or contain only one node.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def deepest_node(root): Given the root of a binary tree, return the value of the deepest (right-most) node. if not root: return None # handle the case when the tree is empty queue = deque([root]) # use a queue to perform BFS node = None while queue: node = queue.popleft() if node.left: queue.append(node.left) if node.right: queue.append(node.right) return node.value if node else None"},{"question":"You are tasked with creating a custom sorting algorithm for a list of employee records at a company. Each employee record is represented by a dictionary with the following keys: \'name\', \'age\', and \'department\'. The company\'s policy dictates that the employees should be sorted primarily by \'department\' in ascending order, and within each department, by \'age\' in descending order. Write a function called customSort(employees) that takes a list of employee records as input and returns a new list that is sorted according to the policy. For example, given the following list of employee records: ```python employees = [ {\'name\': \'Alice\', \'age\': 34, \'department\': \'HR\'}, {\'name\': \'Bob\', \'age\': 29, \'department\': \'Engineering\'}, {\'name\': \'Charlie\', \'age\': 26, \'department\': \'HR\'}, {\'name\': \'Dave\', \'age\': 42, \'department\': \'Engineering\'}, {\'name\': \'Eve\', \'age\': 30, \'department\': \'Sales\'}, ] ``` The function customSort(employees) should return: ```python [ {\'name\': \'Dave\', \'age\': 42, \'department\': \'Engineering\'}, {\'name\': \'Bob\', \'age\': 29, \'department\': \'Engineering\'}, {\'name\': \'Alice\', \'age\': 34, \'department\': \'HR\'}, {\'name\': \'Charlie\', \'age\': 26, \'department\': \'HR\'}, {\'name\': \'Eve\', \'age\': 30, \'department\': \'Sales\'}, ] ``` Note: - The input list should not be modified. - All \'department\' values are strings. - All \'age\' values are integers. - The function should handle an input list with any number of employees, including the empty list.","solution":"def customSort(employees): Sorts the list of employee records first by \'department\' in ascending order and then by \'age\' in descending order within each department. return sorted(employees, key=lambda emp: (emp[\'department\'], -emp[\'age\']))"},{"question":"Given an array of integers `arr` and an integer `k`, determine the number of pairs `(i, j)` where `i < j` and `arr[i] + arr[j]` is divisible by `k`. Function Description Complete the function `divisibleSumPairs` in the editor below. `divisibleSumPairs` has the following parameter(s): - `int n`: the length of array `arr` - `int k`: the integer divisor - `int arr[n]`: an array of integers Returns - `int`: the number of pairs Input Format The first line contains two space-separated integers `n` and `k`. The second line contains `n` space-separated integers, each an element of `arr`. Constraints - 2 le n le 100 - 1 le k le 100 - 1 le arr[i] le 100 Sample Input `6 3 1 3 2 6 1 2` Sample Output `5` Explanation: There are 5 pairs whose sum is divisible by 3: - (0, 2) -> arr[0] + arr[2] = 1 + 2 = 3 - (0, 5) -> arr[0] + arr[5] = 1 + 2 = 3 - (1, 3) -> arr[1] + arr[3] = 3 + 6 = 9 - (2, 4) -> arr[2] + arr[4] = 2 + 1 = 3 - (4, 5) -> arr[4] + arr[5] = 1 + 2 = 3","solution":"def divisibleSumPairs(n, k, arr): Determine the number of pairs (i, j) where i < j and arr[i] + arr[j] is divisible by k. Parameters: n : int - the length of array arr k : int - the integer divisor arr : list of int - an array of integers Returns: int - the number of pairs count = 0 for i in range(n): for j in range(i + 1, n): if (arr[i] + arr[j]) % k == 0: count += 1 return count"},{"question":"You are given a string consisting of a mix of alphabets and digits. Your task is to separate the alphabets and digits, sort them individually, and then concatenate, maintaining the order of alphabets first followed by digits. For example: ``` inputs outputs \\"b4a1e3\\" -> \\"abe134\\" \\"z9x7y5\\" -> \\"xyz579\\" ``` Notes: - The alphabets should be sorted in ascending order (lexicographically). - The digits should be sorted in ascending order (numerically). Here are some example outputs based on the input string: ``` inputs outputs \\"d2a8c3\\" -> \\"acd238\\" \\"2b1a\\" -> \\"ab12\\" \\"1z3x2\\" -> \\"xz123\\" \\"5d1c\\" -> \\"cd15\\" ```","solution":"def separate_and_sort(s): Separates the alphabets and digits, sorts them individually, and then concatenates with alphabets first and digits next. alphabets = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(alphabets) + \'\'.join(digits)"},{"question":"A food delivery company uses a fleet of drones to deliver orders. Each drone has a limited battery capacity and can carry only a certain maximum weight. A warehouse receives multiple orders that need to be delivered on the same day, and it tries to distribute the orders among drones in the most efficient way possible to maximize the number of delivered orders. Each order has the following properties: - Delivery destination (represented as coordinates on a 2D plane). - Weight of the order. - The time by which the order must be delivered. Every drone starts at the warehouse and also needs to return to the warehouse after completing its deliveries. The battery consumption of a drone is proportional to the distance it travels. Furthermore, if a drone delivers an order late, it is not counted as successful. Write a program to help the warehouse determine the maximum number of orders that can be successfully delivered. ------ Input ------ - The first line of input contains a single integer, T, denoting the number of test cases. - The first line of each test case contains a single integer, N, denoting the number of orders. - The next N lines describe each order with three space-separated integers x, y, w, t: - x and y denote the coordinates of the delivery destination. - w denotes the weight of the order. - t denotes the latest time by which the order must be delivered. - Then the next line contains three space-separated integers B, M, S: - B denotes the battery capacity of each drone (in units of distance). - M denotes the maximum weight a drone can carry. - S denotes the speed of the drone (distance units per time unit). ------ Output ------ For each test case, output a single integer denoting the maximum number of orders that can be successfully delivered. ------ Constraints ------ - 1 leq T leq 100 - 1 leq N leq 1000 - -10^3 leq x, y leq 10^3 - 1 leq w, M leq 100 - 1 leq t leq 10^3 - 1 leq B, S leq 10^4 ------ Example ------ Input: 1 5 3 4 10 10 1 2 15 8 5 5 20 15 3 -3 30 12 10 10 5 9 50 50 10 Output: 3 ------ Explanation ------ In this example, the orders at coordinates (3, 4), (1, 2), and (10, 10) can be delivered by a drone given the constraints. The drone\'s battery capacity, maximum weight, and the time constraints must all be taken into account while determining the feasible deliveries.","solution":"import math def max_deliverable_orders(T, test_cases): def calculate_distance(x, y): return math.sqrt(x**2 + y**2) def can_deliver_order(order, battery_capacity, max_weight, speed): x, y, w, t = order distance = calculate_distance(x, y) return_time = (2 * distance) / speed return w <= max_weight and return_time <= t and return_time * speed <= battery_capacity results = [] for i in range(T): N, orders, battery_capacity, max_weight, speed = test_cases[i] orders = sorted(orders, key=lambda order: order[3]) # Sort orders by delivery time delivered = 0 for order in orders: if can_deliver_order(order, battery_capacity, max_weight, speed): battery_capacity -= 2 * calculate_distance(order[0], order[1]) delivered += 1 results.append(delivered) return results"},{"question":"Task **_Given_** *an integer_ n*, **_Find_** **_the largest number_** *consisting of n digits* that is divisible by 3. ____ # Notes * **_n_** is a *positive integer*. ___ # Input >> Output Examples ``` largestDivisibleByThree(3) ==> return 999 ``` **_Explanation_**: * **_The largest number_** *consisting of 3 digits is 999 and **_it is divisible by 3_**. ___ ``` largestDivisibleByThree(1) ==> return 9 ``` **_Explanation_**: * **_The largest number_** *consisting of 1 digit is 9 and **_it is divisible by 3_**. ___ ``` largestDivisibleByThree(5) ==> return 99999 ``` **_Explanation_**: * **_The largest number_** *consisting of 5 digits is 99999 and **_it is divisible by 3_**. ___ ALL translations are welcomed Enjoy Learning !!","solution":"def largestDivisibleByThree(n): Returns the largest number consisting of n digits that is divisible by 3. largest_number = int(\'9\' * n) return largest_number"},{"question":"# Longest Consecutive Sequence Write a function that takes a list of integers and returns the length of the longest consecutive elements sequence. The sequence must consist of entirely consecutive numbers without any gaps. Your algorithm should run in O(n) complexity. # Example ``` Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. ``` ``` Input: [0, 0, 1, -1] Output: 3 Explanation: The longest consecutive elements sequence is [-1, 0, 1]. Therefore its length is 3. ``` # Constraints - The array can contain duplicates. - The elements of the array are integers (both positive and negative).","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in the list nums. The solution is expected to run in O(n) time complexity. if not nums: return 0 num_set = set(nums) longest = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest = max(longest, current_streak) return longest"},{"question":"Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. - Your function should be efficient with both time and space, aiming for O(n) time complexity and O(n) space complexity. - If there are multiple correct answers, return any of them. # Example Input ``` nums = [2, 7, 11, 15] target = 9 ``` # Example Output ``` [0, 1] ``` # Explanation - nums[0] + nums[1] = 2 + 7 = 9, which is the target. # Constraints - 2 <= nums.length <= 10^4 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9 - Only one valid answer exists. # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ``` Implement the function above to solve the problem.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. Assumes exactly one solution exists, and does not use the same element twice. :param nums: List of integers :param target: Integer target sum :return: List containing indices of the two numbers num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"You are given a list of integers representing the heights of the walls of a container. The container can be visualized as a series of vertical lines where the heights of the lines represent the height of the walls. The width of each wall is 1. You are required to find the maximum amount of water that the container can hold without spilling it. Write a function that takes a list of integers representing the heights of the container walls and returns an integer value of the maximum water that can be trapped between these walls. Example: ```python walls = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] The above list representation forms a container shaped like: # | # | | # | | | # | ||| # || ||| # |||||| The maximum water that can be trapped here is 6 units. ``` Write a function: ```python def max_water_trapped(walls: List[int]) -> int: # your code here ``` # Constraints: - The length of the walls list does not exceed 10^4. - Each height in the walls list is a non-negative integer and does not exceed 10^5.","solution":"from typing import List def max_water_trapped(walls: List[int]) -> int: if not walls or len(walls) < 3: return 0 left = 0 right = len(walls) - 1 left_max = walls[left] right_max = walls[right] water_trapped = 0 while left < right: if walls[left] < walls[right]: left += 1 left_max = max(left_max, walls[left]) water_trapped += max(0, left_max - walls[left]) else: right -= 1 right_max = max(right_max, walls[right]) water_trapped += max(0, right_max - walls[right]) return water_trapped"},{"question":"A startup company wants to streamline its customer support process. They have a list of available customer service representatives, each identified by a unique integer. To manage the workload and prevent burnout, they want to ensure that no representative is assigned jobs without a break after a certain number of jobs. Each representative can handle a maximum of x consecutive jobs before needing a break. Given a list of job assignments where each job is identified by an index and includes the representative assigned to it, your task is to determine the minimum value of x such that no representative is overloaded according to the rule. -----Input:----- - First line will contain n and m, the number of job assignments and the number of unique representatives. - Second line contains n integers, the representatives assigned to each job in sequence. -----Output:----- - The minimum value of x such that no representative is assigned to more than x consecutive jobs. -----Constraints----- - 1 leq n leq 1000 - 1 leq m leq 100 - 1 leq text{representative}_i leq m - The job assignments list can be of length n. -----Sample Input:----- 10 4 1 2 2 3 3 3 2 2 1 1 -----Sample Output:----- 3 -----EXPLANATION:----- In the given sequence of job assignments, the representative 2 and 3 are the ones working consecutively the most. Representative 2 works up to 2 consecutive jobs (indices 2, 3 and 7, 8), and representative 3 works for 3 consecutive jobs (indices 4, 5, 6). Thus, the minimum value of x that ensures no representative works more than x consecutive jobs is 3.","solution":"def find_min_x(n, m, job_assignments): Determines the minimum value of x such that no representative is assigned more than x consecutive jobs. Args: n (int): Number of job assignments. m (int): Number of unique representatives. job_assignments (list of int): List of representatives assigned to each job. Returns: int: The minimum value of x. # Initialize a dictionary to keep track of maximum consecutive jobs for each representative max_consecutive = {rep: 0 for rep in range(1, m+1)} current_rep = job_assignments[0] count = 1 for i in range(1, n): if job_assignments[i] == current_rep: count += 1 else: # Update the max_consecutive jobs for the previous representative max_consecutive[current_rep] = max(max_consecutive[current_rep], count) current_rep = job_assignments[i] count = 1 # Update for the last streak max_consecutive[current_rep] = max(max_consecutive[current_rep], count) # The minimum value of x is the highest count in max_consecutive return max(max_consecutive.values())"},{"question":"You are given an `n x m` grid represented by a 2D array containing integers. Each cell in the grid can be considered as a point on a map with an elevation value. The objective is to find the largest difference in elevation between any two points in a region of the grid that is connected by orthogonal moves (up, down, left, right). A region is defined as a group of cells containing the same elevation value. Two cells belong to the same region if they have the same elevation and you can move from one to the other via cells of the same elevation without leaving that elevation. Write a program that determines the largest elevation difference in the grid and the size of the largest connected region of the same elevation. # Input - The first line contains two integers `n` (1 <= n <= 100) and `m` (1 <= m <= 100) — the number of rows and columns in the grid. - Each of the next `n` lines contains `m` integers representing the elevations in the grid. The absolute value of each elevation will not exceed `10^4`. # Output Print two integers: the largest elevation difference in the grid and the size of the largest connected region. # Example Input ``` 4 5 1 2 3 2 1 2 1 1 1 2 3 1 1 1 3 4 3 2 3 4 ``` Output ``` 3 6 ``` Note The largest connected region of the same elevation is formed by the cells (2,2), (2,3), (2,4), (3,2), (3,3), (3,4) which all have an elevation of 1, making the size 6. The largest elevation difference is 3, occurring between cell (4,1) with elevation 4 and cell (1,1) with elevation 1.","solution":"def largest_elevation_difference_and_largest_region_size(n, m, grid): def bfs(x, y, visited, grid, n, m): queue = [(x, y)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] elevation = grid[x][y] size = 0 while queue: r, c = queue.pop(0) if visited[r][c]: continue visited[r][c] = True size += 1 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == elevation: queue.append((nr, nc)) return size max_elevation = -float(\'inf\') min_elevation = float(\'inf\') for row in grid: for value in row: if value > max_elevation: max_elevation = value if value < min_elevation: min_elevation = value largest_difference = max_elevation - min_elevation visited = [[False] * m for _ in range(n)] largest_region_size = 0 for i in range(n): for j in range(m): if not visited[i][j]: region_size = bfs(i, j, visited, grid, n, m) if region_size > largest_region_size: largest_region_size = region_size return largest_difference, largest_region_size # Example usage n = 4 m = 5 grid = [ [1, 2, 3, 2, 1], [2, 1, 1, 1, 2], [3, 1, 1, 1, 3], [4, 3, 2, 3, 4] ] result = largest_elevation_difference_and_largest_region_size(n, m, grid) print(result) # Output should be (3, 6)"},{"question":"Write a function that accepts a string and returns the longest palindromic substring within that string. A palindrome is a sequence of characters which reads the same backward as forward. If the string is empty or there\'s no palindromic substring, return an empty string. Your function will accept one argument: - The string to search through. ```if-not:csharp If the string is empty or doesn\'t contain any palindrome, return an empty string. ``` ```if:csharp If the string is empty or doesn\'t contain any palindrome, return an empty string. ``` # Example: ```python longest_palindromic_substring(\\"babad\\") => \\"bab\\" (or \\"aba\\") longest_palindromic_substring(\\"cbbd\\") => \\"bb\\" longest_palindromic_substring(\\"abc\\") => \\"a\\" (or \\"b\\" or \\"c\\") longest_palindromic_substring(\\"\\") => \\"\\" ``` Good luck!","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(1, n): # Check for even length palindrome (center between i-1 and i) low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindrome (center at i) low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"You are given a list of non-negative integers representing the amount of money of each house in a row of houses. Each house is adjacent to the next house in the list. If a thief wants to rob houses without robbing two consecutive houses, determine the maximum amount of money the thief can rob tonight. For example, given the list `nums = [2, 7, 9, 3, 1]`, the best strategy would be to rob house 1 (money = 2), house 3 (money = 9) for a total of 11 money robbed. Function Description Complete the function `maxRobbedAmount` below. It should return an integer representing the maximum amount of money the thief can rob without robbing two consecutive houses. `maxRobbedAmount` has the following parameter: - `nums`: a list of non-negative integers representing the amount of money of each house in a row. Input Format A single line of input contains a space-separated list of integers representing the money in each house. Constraints 0 leq text{number of houses} leq 10^5 0 leq text{money in each house} leq 10^4 Output Format Print the maximum amount of money the thief can rob tonight without robbing two consecutive houses. Sample Input 2 7 9 3 1 Sample Output 12 Explanation By robbing house 1 (2) and house 3 (9) the thief can rob 11 money. However, by robbing house 2 (7) and house 4 (3) and house 5 (1) the thief can rob 7+3+1=11 which is the max money robable without robbing consecutive houses.The total is 2 + 9 + 1 = 12.","solution":"def maxRobbedAmount(nums): Returns the maximum amount of money that can be robbed without robbing two consecutive houses. :param nums: List of non-negative integers representing money in each house :return: Integer representing the maximum amount of money robable if not nums: return 0 elif len(nums) == 1: return nums[0] elif len(nums) == 2: return max(nums[0], nums[1]) prev1, prev2 = 0, 0 for num in nums: current = max(prev1, prev2 + num) prev2 = prev1 prev1 = current return prev1"},{"question":"There is a game played with two types of numbered cards, red and blue. You are given two players, X and Y, who have picked a card each. Player X picked a red card with the number R and a blue card with the number B. Player Y picked a red card with the number R\' and a blue card with the number B\'. The score for a player is determined by the sum of the numbers on both their cards. The player with the higher score wins. If both players have the same score, it is considered a TIE. Determine the outcome of the game for a given number of test cases. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, four integers R, B, R\', B\'. ------ Output Format ------ For each test case, output X if player X wins, Y if player Y wins, TIE otherwise. Note that output is case-insensitive i.e. X and x both are considered the same. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ R, B, R\', B\' ≤ 100 ----- Sample Input 1 ------ 3 7 3 5 5 12 10 9 14 8 8 8 8 ----- Sample Output 1 ------ X Y TIE ----- Explanation 1 ------ Test Case 1: - Score of player X = 7 + 3 = 10. - Score of player Y = 5 + 5 = 10. Since both scores are equal, it is a TIE. Test Case 2: - Score of player X = 12 + 10 = 22. - Score of player Y = 9 + 14 = 23. Since 23 > 22, player Y wins. Test Case 3: - Score of player X = 8 + 8 = 16. - Score of player Y = 8 + 8 = 16. Since both scores are equal, it is a TIE.","solution":"def determine_winner(test_cases): results = [] for R, B, R_prime, B_prime in test_cases: score_X = R + B score_Y = R_prime + B_prime if score_X > score_Y: results.append(\\"X\\") elif score_Y > score_X: results.append(\\"Y\\") else: results.append(\\"TIE\\") return results # Example Usage: # test_cases = [(7, 3, 5, 5), (12, 10, 9, 14), (8, 8, 8, 8)] # print(determine_winner(test_cases))"},{"question":"Thomas owns a garden with an array of n beautiful flowers. Each flower has a fragrance value. The fragrance values are represented by an array F of size n, where F[i] is the fragrance value of the i-th flower. Thomas\'s favorite subarray is the longest subarray such that the sum of its fragrance values is greater than or equal to k. Your task is to help Thomas find the length of his favorite subarray. If there are multiple subarrays with the same maximum length, any one of them can be considered. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of flowers and the minimum sum of fragrance values of the subarray. The second line contains n integers F[i] (1 ≤ F[i] ≤ 10^9) — the fragrance values of the flowers. Output Print one integer — the length of Thomas\'s favorite subarray. If no such subarray exists, print -1. Examples Input 5 10 2 3 5 1 6 Output 4 Input 5 20 4 2 1 3 5 Output -1 Explanation In the first example, one of the longest subarrays with a sum greater than or equal to 10 is [2, 3, 5, 1] with a length of 4. In the second example, there is no subarray with a sum greater than or equal to 20.","solution":"def favorite_subarray_length(n, k, F): max_length = -1 current_sum = 0 start = 0 for end in range(n): current_sum += F[end] while current_sum >= k and start <= end: max_length = max(max_length, end - start + 1) current_sum -= F[start] start += 1 return max_length"},{"question":"You are given two strings, S and T. You need to determine if it is possible to transform string S into string T using exactly one of the following operations: 1. Replace a single character in S with another character. 2. Remove a single character from S. 3. Insert a single character into S. ------ Input ------ The first line of the input contains a single integer Q denoting the number of test cases. The description of Q test cases follows. Each test case consists of two lines. The first line contains the string S and the second line contains the string T. ------ Output ------ For each test case, print \\"Yes\\" if it is possible to transform S into T using exactly one operation out of the three possible operations, otherwise print \\"No\\". ------ Constraints ------ 1 ≤ Q ≤ 100 1 ≤ |S|, |T| ≤ 100 Both strings are composed of only lowercase English letters. ------ Sample Input 1 ------ 3 abcd abce abc ab abc abcd ------ Sample Output 1 ------ Yes Yes Yes ------ Explanation 1 ------ Example case 1: By replacing \'d\' with \'e\' in the string S, we can get the string T, hence \\"Yes\\". Example case 2: By removing \'c\' from the string S, we can get the string T, hence \\"Yes\\". Example case 3: By inserting \'d\' into the string S at the end, we can get the string T, hence \\"Yes\\".","solution":"def can_transform(S, T): len_s = len(S) len_t = len(T) if len_s == len_t: # Check for replacing one character differences = sum([1 for i in range(len_s) if S[i] != T[i]]) if differences == 1: return \\"Yes\\" elif len_s + 1 == len_t: # Check for inserting one character to S for i in range(len_t): if S == T[:i] + T[i+1:]: return \\"Yes\\" elif len_s == len_t + 1: # Check for removing one character from S for i in range(len_s): if S[:i] + S[i+1:] == T: return \\"Yes\\" return \\"No\\" def process_test_cases(Q, test_cases): results = [] for case in test_cases: S, T = case results.append(can_transform(S, T)) return results"},{"question":"In a small town, there are `n` houses arranged in a row, and each house is painted with one of `k` colors. The colors are represented as integers from `1` to `k`. Your task is to repaint all houses such that no two adjacent houses have the same color. You must determine the minimum number of repaints required to achieve this. You are given a list `a` of length `n` where `a[i]` denotes the color of the `i`-th house. -----Input----- The first line contains two integers `n` and `k` (1 le n le 10^5, 1 le k le 100) — the number of houses and the number of colors, respectively. The second line contains `n` integers `a1, a2, ..., an` (1 le ai le k), which represent the initial colors of the houses. -----Output----- Output a single integer — the minimum number of repaints needed such that no two adjacent houses have the same color. -----Example----- Input 1: 5 3 1 2 2 3 3 Output 1: 2 Input 2: 6 3 1 3 2 3 3 1 Output 2: 1 Input 3: 4 2 1 1 2 2 Output 3: 2 -----Explanation----- In the first example, one possible solution is to repaint the third house to color `1` and the fifth house to color `2`, which requires 2 repaints. The colors will be `1 2 1 3 2`. In the second example, only repaint the fifth house to color `2`, which requires 1 repaint. The colors will be `1 3 2 3 2 1`. In the third example, repaint the second house to color `2` and the fourth house to color `1`, which requires 2 repaints. The colors will be `1 2 2 1`.","solution":"def minimum_repaints(n, k, a): Determines the minimum number of repaints required such that no two adjacent houses have the same color. Parameters: n (int): The number of houses. k (int): The number of colors. a (list of int): The initial colors of the houses. Returns: int: The minimum number of repaints needed. repaints = 0 for i in range(1, n): if a[i] == a[i - 1]: repaints += 1 original_color = a[i] # Determine a color different from both a[i-1] and the next house (if any) for color in range(1, k + 1): if (i + 1 < n and color != original_color and color != a[i + 1]) or (i + 1 >= n and color != original_color): a[i] = color break return repaints"},{"question":"You are given a rectangular grid of size n times m where each cell contains either \'0\' or \'1\'. You need to find the number of distinct islands in the grid. An island is defined as a group of \'1\'s connected horizontally or vertically (not diagonally). Two islands are considered distinct if they do not share any \'1\' cells. -----Input----- - The first line contains two integers n and m (1 leq n, m leq 1000), the dimensions of the grid. - The next n lines each contain m characters, either \'0\' or \'1\', representing a row of the grid. -----Output----- Output a single integer, the number of distinct islands in the grid. -----Examples----- Input 4 5 11000 11000 00100 00011 Output 3 Input 3 3 111 010 111 Output 1 Input 2 2 10 01 Output 2 -----Note----- In the first example, there are three distinct islands: the one in the top-left corner, the one in the middle, and the one in the bottom-right corner. In the second example, all \'1\'s are connected either directly or indirectly, forming one single island. In the third example, the \'1\'s at positions (1,1) and (2,2) form two distinct islands.","solution":"def numDistinctIslands(grid): n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): stack = [(x, y)] while stack: i, j = stack.pop() for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj] and grid[ni][nj] == \'1\': visited[ni][nj] = True stack.append((ni, nj)) islands_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: visited[i][j] = True dfs(i, j) islands_count += 1 return islands_count"},{"question":"Daisy is organizing a small exhibition where she arranges flowers in vases. She has exactly n flowers and m vases. Each flower has a certain fragrance value, given as f1, f2, f3, ..., fn for the flowers. Each vase has a fragrance threshold, given as t1, t2, t3, ..., tm for the vases. Daisy wants to place each flower in exactly one vase such that the total fragrance of the flowers in each vase does not exceed its fragrance threshold. Help Daisy determine if it is possible to arrange the flowers in this manner. -----Input----- First line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of flowers and the number of vases. Second line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ 10^4) — the fragrance values of the flowers. Third line contains m integers t1, t2, ..., tm (1 ≤ ti ≤ 10^5) — the fragrance thresholds of the vases. -----Output----- Output \\"YES\\" if it is possible to distribute the flowers such that the total fragrance in each vase does not exceed its threshold. Otherwise, output \\"NO\\". -----Examples----- Input 4 3 3 8 5 6 10 15 12 Output YES Input 3 2 5 10 7 12 10 Output NO -----Note----- In the first test case, Daisy can place the flowers as follows: - Vase 1: Flower with fragrance 3 - Vase 2: Flowers with fragrances 8 and 6 - Vase 3: Flower with fragrance 5 In the second test case, it is not possible to place the flowers without exceeding a vase\'s threshold.","solution":"def can_arrange_flowers(n, m, flowers, vases): Determines if it is possible to arrange the flowers so that each vase\'s fragrance threshold is not exceeded. Parameters: n (int): Number of flowers m (int): Number of vases flowers (list of int): Fragrance values of the flowers vases (list of int): Fragrance thresholds of the vases Returns: str: \\"YES\\" if arrangement is possible, \\"NO\\" otherwise flowers.sort(reverse=True) vases.sort(reverse=True) for flower in flowers: placed = False for i in range(len(vases)): if vases[i] >= flower: vases[i] -= flower placed = True break if not placed: return \\"NO\\" return \\"YES\\""},{"question":"In a distant galaxy, a unique form of painting known as \\"Pixel Art\\" has become immensely popular. Pixel Art involves creating intricate designs using a grid where each cell can be filled with a specific color. Artists in this galaxy face a constant challenge: to determine if new designs they create have already been drawn by someone else. You, being a proficient programmer in the galaxy, have been approached to help solve this problem. Given two grids of the same dimensions, determine if they are identical. A grid is represented as a list of strings, where each string corresponds to a row in the grid, and each character in the string represents a color (a simple lowercase letter). Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of rows in the grid. - The second line contains an integer m (1 ≤ m ≤ 1000) — the number of columns in the grid. - The next n lines contain m characters each representing the first grid. - The next n lines contain m characters each representing the second grid. Output Print \\"Identical\\" if the grids are identical. Otherwise, print \\"Different\\". Examples Input 3 3 abc def ghi abc def ghi Output Identical Input 2 2 aa bb aa ba Output Different","solution":"def are_grids_identical(n, m, grid1, grid2): Returns \\"Identical\\" if the two grids are identical, otherwise returns \\"Different\\". :param n: Number of rows in the grids :param m: Number of columns in the grids :param grid1: List of strings representing the first grid :param grid2: List of strings representing the second grid for row1, row2 in zip(grid1, grid2): if row1 != row2: return \\"Different\\" return \\"Identical\\""},{"question":"Write a function that takes in a string and returns the middle character(s) of the string. If the string length is odd, return the single middle character. If the string length is even, return the two middle characters. Examples: ``` middle_character(\\"hello\\") should return \\"l\\" middle_character(\\"coding\\") should return \\"di\\" ``` Notes: - You can assume that the input string will always have at least one character. - Consider edge cases such as very short strings.","solution":"def middle_character(s): Returns the middle character(s) of the given string. If the string length is odd, return the single middle character. If the string length is even, return the two middle characters. length = len(s) mid = length // 2 if length % 2 == 0: # If even, return the middle two characters return s[mid - 1:mid + 1] else: # If odd, return the middle character return s[mid]"},{"question":"Given a string S, your task is to find the smallest window length that contains all unique characters of the string S. Example 1: Input: S = \\"aabcbcdbca\\" Output: 4 Explanation: The smallest window that contains all characters is \\"dbca\\". Example 2: Input: S = \\"aaab\\" Output: 2 Explanation: The smallest window that contains all characters is \\"ab\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestUniqueWindow() which takes a String S as input and returns an Integer representing the length of the smallest window that contains all unique characters of the string. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 <= |S| <= 10^6","solution":"def smallestUniqueWindow(S): from collections import defaultdict unique_chars = set(S) num_unique_chars = len(unique_chars) n = len(S) if num_unique_chars == 1: return 1 min_length = n start = 0 char_count = defaultdict(int) count = 0 for end in range(n): char = S[end] char_count[char] += 1 if char_count[char] == 1: count += 1 while count == num_unique_chars: min_length = min(min_length, end - start + 1) start_char = S[start] char_count[start_char] -= 1 if char_count[start_char] == 0: count -= 1 start += 1 return min_length"},{"question":"The inhabitants of the fictional country AlgoLand love prime numbers. To celebrate their love for primes, they decided to organize a **Prime Number Game**. In this game, each player is given a positive integer n, and their task is to find the smallest prime number k, where k is greater than or equal to n. Write a program to help the players of AlgoLand by finding the smallest prime number greater than or equal to a given positive integer n. Input The first line of the input contains a single integer t (1 ≤ t ≤ 10^4) denoting the number of test cases. Each test case consists of a single positive integer n (1 ≤ n ≤ 10^7). Output Print t lines. The i-th line should contain the smallest prime number greater than or equal to the given integer n for the i-th test case. Example Input 5 10 20 30 17 100 Output 11 23 31 17 101","solution":"def is_prime(num): Check if a number is prime. if num < 2: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def smallest_prime_greater_than_or_equal_to(n): Returns the smallest prime number greater than or equal to the given number n. while not is_prime(n): n += 1 return n def process_test_cases(t, test_cases): Processes the list of test cases and returns the results. results = [] for n in test_cases: results.append(smallest_prime_greater_than_or_equal_to(n)) return results"},{"question":"Write a function called `nth_fibonacci` that calculates the n-th Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, etc. Your function should accept a single integer argument, `n`, which is the position in the Fibonacci sequence, and return the n-th Fibonacci number. The following are examples of expected output values: ```python nth_fibonacci(0) # returns 0 nth_fibonacci(1) # returns 1 nth_fibonacci(2) # returns 1 nth_fibonacci(3) # returns 2 nth_fibonacci(10) # returns 55 nth_fibonacci(20) # returns 6765 ``` Note: You can assume that the input will be a non-negative integer. Ensure your solution is efficient enough to handle larger values of n without significant delay.","solution":"def nth_fibonacci(n): Returns the n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are responsible for managing a warehouse where various items are stored. Each item is identified by a unique serial number and categorized by type. You need to keep track of the inventory and respond to requests efficiently. However, there are some additional constraints to manage: 1. The warehouse operates on a `FIFO` (First In, First Out) basis, meaning the oldest items of each type should be issued first. 2. The current inventory needs to be upgraded by implementing a new system that can handle requests for adding new items, removing items, and checking item availability. **Task** Implement a class `Warehouse` that supports the following methods: - `add_item(serial_number: int, type: str)` - Adds a new item with the given serial number and type to the warehouse. - `remove_item(type: str) -> int` - Removes and returns the serial number of the oldest item of the specified type. If no such item exists, return `-1`. - `check_item(serial_number: int) -> str` - Returns the type of the item with the given serial number. If no such item exists, return an empty string. **Example**: ```python w = Warehouse() w.add_item(101, \\"electronics\\") w.add_item(105, \\"clothing\\") w.add_item(109, \\"electronics\\") assert w.check_item(105) == \\"clothing\\" # Checking for the type of serial number 105 assert w.remove_item(\\"electronics\\") == 101 # Removing the oldest item of type \\"electronics\\" assert w.remove_item(\\"electronics\\") == 109 # Now the next oldest item of type \\"electronics\\" is removed assert w.remove_item(\\"electronics\\") == -1 # No more items of type \\"electronics\\" assert w.check_item(101) == \\"\\" # Serial number 101 has been removed ```","solution":"from collections import deque, defaultdict class Warehouse: def __init__(self): self.inventory = defaultdict(deque) self.serial_map = {} def add_item(self, serial_number: int, type: str): self.inventory[type].append(serial_number) self.serial_map[serial_number] = type def remove_item(self, type: str) -> int: if type in self.inventory and self.inventory[type]: serial_number = self.inventory[type].popleft() del self.serial_map[serial_number] return serial_number return -1 def check_item(self, serial_number: int) -> str: return self.serial_map.get(serial_number, \\"\\")"},{"question":"The Animal Shelter is a non-profit organization that helps to place abandoned animals into loving homes. As part of the intake process, animals are placed into either dog or cat shelters. Each shelter keeps track of the dogs and cats in their respective shelters using a queue system (first in, first out) before they are adopted. Implement a class `AnimalShelter` that supports the following operations: 1. `enqueue(animal)`: Adds an animal to the end of the queue of its respective type (dog or cat). 2. `dequeueAny()`: Removes the oldest animal from the shelter (either a dog or a cat). It returns the removed animal\'s name. 3. `dequeueDog()`: Removes the oldest dog from the dog queue. It returns the removed dog\'s name. 4. `dequeueCat()`: Removes the oldest cat from the cat queue. It returns the removed cat\'s name. Both dogs and cats are represented as strings comprising their names. -----Input----- For enqueue operations, the input will be in the format `(\\"name\\", \\"type\\")`, where \\"name\\" is the name of the animal and \\"type\\" is either \\"dog\\" or \\"cat\\". The dequeue operations do not need additional input. -----Output----- For dequeue operations, return the name of the dequeued animal or `None` if no animal of the requested type is available. -----Examples----- ``` shelter = AnimalShelter() shelter.enqueue((\\"Buddy\\", \\"dog\\")) shelter.enqueue((\\"Kitty\\", \\"cat\\")) shelter.enqueue((\\"Rex\\", \\"dog\\")) print(shelter.dequeueAny()) # Output: Buddy print(shelter.dequeueDog()) # Output: Rex print(shelter.dequeueCat()) # Output: Kitty print(shelter.dequeueAny()) # Output: None ``` -----Note----- In the example, the animals are enqueued and dequeued in the order: - \\"Buddy\\" (dog) is enqueued first and dequeued first by `dequeueAny()`. - \\"Rex\\" (dog) is enqueued third, so `dequeueDog()` removes \\"Rex\\". - \\"Kitty\\" (cat) is enqueued second and dequeued by `dequeueCat()`. - Finally, `dequeueAny()` returns `None` as no animals are left.","solution":"from collections import deque class AnimalShelter: def __init__(self): self.dogs = deque() self.cats = deque() def enqueue(self, animal): name, type = animal if type == \\"dog\\": self.dogs.append(name) elif type == \\"cat\\": self.cats.append(name) def dequeueAny(self): if self.dogs and self.cats: if self.dogs[0] < self.cats[0]: return self.dequeueDog() else: return self.dequeueCat() elif self.dogs: return self.dequeueDog() elif self.cats: return self.dequeueCat() return None def dequeueDog(self): if self.dogs: return self.dogs.popleft() return None def dequeueCat(self): if self.cats: return self.cats.popleft() return None"},{"question":"A group of telecommunication towers are connected in a network. Each tower has a unique ID from 1 to n. There are m connections between these towers. Each connection connects two towers and has a certain latency or delay in milliseconds. The goal is to ensure that there is a path of minimal total latency between each pair of towers, forming an efficient network. You are tasked with determining the minimum latency required to connect all towers. If it is impossible to connect all towers with the given connections, return -1. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of towers and the number of connections respectively. Each of the next m lines contains three integers u, v, l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 10000), describing a connection between towers u and v with a latency of l milliseconds. Output Output a single integer — the minimum latency required to connect all towers, or -1 if it is impossible to connect all towers. Examples Input 4 5 1 2 5 1 3 3 2 3 4 3 4 2 2 4 7 Output 9 Input 3 1 1 2 4 Output -1","solution":"def minimum_latency(n, m, connections): from heapq import heappop, heappush from collections import defaultdict if n == 1: return 0 if m == 0: return -1 adj = defaultdict(list) for u, v, l in connections: adj[u].append((l, v)) adj[v].append((l, u)) visited = set() min_heap = [(0, 1)] # (latency, node) total_latency = 0 while min_heap and len(visited) < n: latency, node = heappop(min_heap) if node in visited: continue visited.add(node) total_latency += latency for next_latency, neighbor in adj[node]: if neighbor not in visited: heappush(min_heap, (next_latency, neighbor)) return total_latency if len(visited) == n else -1"},{"question":"Tom is playing with strings and likes to find patterns in them. He came across a string manipulation problem and needs your help. You are given a string, `str`, and an integer `k`. Tom wants to find the length of the longest substring of `str` that contains at most `k` distinct characters. Can you help Tom figure this out? Example 1: Input: str = \\"eceba\\", k = 2 Output: 3 Explanation: The substring is \\"ece\\" with length 3. Example 2: Input: str = \\"aa\\", k = 1 Output: 2 Explanation: The substring is \\"aa\\" with length 2. Your Task: Write a function `longestKSubstr(str, k)` that takes a string `str` and an integer `k` as inputs and returns the length of the longest substring that contains at most `k` distinct characters. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ k ≤ 26 All characters in the string are lowercase English letters.","solution":"def longestKSubstr(s, k): Returns the length of the longest substring that contains at most k distinct characters. n = len(s) if k == 0 or n == 0: return 0 char_count = {} max_len = 0 left = 0 for right in range(n): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len # Example usage: # print(longestKSubstr(\\"eceba\\", 2)) # Output: 3 # print(longestKSubstr(\\"aa\\", 1)) # Output: 2"},{"question":"You are given an array of integers. You can perform an operation where you select any two integers and replace both of them with their sum. After performing any number of these operations you want to make the sum of all elements of the array to be odd. If it is possible, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. Then t test cases follow. For each test case: The first line contains a single integer n (1 leq n leq 10^5) — the size of the array. The second line contains n integers separated by spaces a_1, a_2, ldots , a_n (1 leq a_i leq 10^9) – the elements of the array. -----Output----- For each test case print \\"YES\\" if it is possible to make the sum of all elements of the array odd, otherwise print \\"NO\\". -----Examples----- Input 3 3 1 2 3 4 2 4 6 8 5 1 3 5 7 9 Output YES NO YES -----Note----- In the first test case, the sum of the array is initially 6. An example operation is to select 1 and 3, replacing them with their sum 4, making the array [2, 4, 4]. The array then sums to 10 which is not odd. So it is not always necessary to perform an operation to make the sum odd. In the second test case, the sum of the array is already even, and since all elements are even, any operation will still result in an even sum. Hence, it is not possible to make the sum odd. In the third test case, the sum of the array is already 25 which is odd, no operations are needed.","solution":"def can_make_sum_odd(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] total_sum = sum(arr) # Check if the total sum is already odd if total_sum % 2 == 1: results.append(\\"YES\\") continue # If not, check whether there are at least one odd and one even number has_odd = any(a % 2 == 1 for a in arr) has_even = any(a % 2 == 0 for a in arr) if has_odd and has_even: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a tree (a connected, acyclic undirected graph) with n nodes. Each node has a unique value associated with it. You need to perform m queries on this tree, where each query consists of finding the maximum value in the subtree of a given node. Input The first line contains an integer n (1 ≤ n ≤ 100000) - the number of nodes in the tree. The second line contains n integers val1, val2, ..., valn (1 <= vali <= 100000), where vali represents the value associated with the i-th node. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between nodes u and v. The next line contains an integer m (1 ≤ m ≤ 100000) - the number of queries. Each of the next m lines contains an integer q (1 ≤ q ≤ n) where you have to find the maximum value in the subtree of node q. Output For each query, print the maximum value in the subtree of the given node. Examples Input 5 1 3 4 2 5 1 2 1 3 3 4 3 5 3 1 3 5 Output 5 5 5 Explanation In the first query, the subtree of node 1 includes all nodes {1, 2, 3, 4, 5} - the maximum value is 5. In the second query, the subtree of node 3 includes nodes {3, 4, 5} - the maximum value is 5. In the third query, the subtree of node 5 only includes itself - the maximum value is 5.","solution":"def find_maximum_subtree_values(n, values, edges, queries): from collections import defaultdict, deque # Build the adjacency list from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To store max value in each subtree subtree_max = [0] * (n + 1) # DFS to compute the maximum value in each subtree def dfs(node, parent): max_value = values[node - 1] for neighbor in tree[node]: if neighbor != parent: max_value = max(max_value, dfs(neighbor, node)) subtree_max[node] = max_value return max_value # Compute the subtree values starting from the root (assuming root is 1) dfs(1, -1) # Handle the queries result = [subtree_max[q] for q in queries] return result # Example execution (not part of the function) n = 5 values = [1, 3, 4, 2, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] queries = [1, 3, 5] print(find_maximum_subtree_values(n, values, edges, queries)) # Output: [5, 5, 5]"},{"question":"Little A is learning about sequences and their properties. He finds particular interest in subarrays that have identical elements. Given an array of n elements, he wants to find the number of distinct subarrays where all elements in the subarray are the same. Input First line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print one integer — the number of distinct subarrays where all elements are the same. Examples Input 5 1 2 2 3 3 Output 7 Input 4 4 4 4 4 Output 10 Note For the first example, there are 7 subarrays with all identical elements: [1], [2], [2], [3], [3], [2, 2], [3, 3]. For the second example, all the subarrays have identical elements: [4], [4], [4], [4], [4, 4], [4, 4], [4, 4, 4], [4, 4, 4], [4, 4, 4, 4].","solution":"def count_identical_subarrays(n, array): count = 0 i = 0 while i < n: length = 1 while i + 1 < n and array[i] == array[i + 1]: length += 1 i += 1 count += length * (length + 1) // 2 i += 1 return count # Sample Inputs to manually verify solution # print(count_identical_subarrays(5, [1, 2, 2, 3, 3])) # Should return 7 # print(count_identical_subarrays(4, [4, 4, 4, 4])) # Should return 10"},{"question":"You are given a list of n integers and a positive integer k. You need to determine if there are two distinct indices i and j in the list such that the absolute difference between the elements at these indices is less than or equal to a given integer t, and the absolute difference between i and j is less than or equal to k. Write a function to solve this problem. Function Signature ```python def containsNearbyAlmostDuplicate(nums: List[int], k: int, t: int) -> bool: ``` Input - An integer n (1 ≤ n ≤ 200,000), representing the number of elements in the list. - A list of n integers nums (-10^9 ≤ nums[i] ≤ 10^9), representing the elements. - Two integers k and t (0 ≤ k ≤ n-1 and 0 ≤ t ≤ 10^9). Output - Return True if there are two distinct indices i and j such that the absolute difference between nums[i] and nums[j] is less than or equal to t and the absolute difference between i and j is less than or equal to k. Otherwise, return False. Examples Input nums = [1, 2, 3, 1] k = 3 t = 0 Output True Input nums = [1, 5, 9, 1, 5, 9] k = 2 t = 3 Output False Input nums = [1, 0, 1, 1] k = 1 t = 2 Output True","solution":"def containsNearbyAlmostDuplicate(nums, k, t): Determines if there are two distinct indices i and j in the list such that the absolute difference between the elements at these indices is less than or equal to t, and the absolute difference between i and j is less than or equal to k. :param nums: List of integers :param k: Integer representing maximum index difference :param t: Integer representing maximum value difference :return: Boolean value indicating whether such indices exist if t < 0: return False num_dict = {} bucket_size = t + 1 for i, num in enumerate(nums): bucket = num // bucket_size if bucket in num_dict: return True if bucket - 1 in num_dict and abs(num_dict[bucket - 1] - num) < bucket_size: return True if bucket + 1 in num_dict and abs(num_dict[bucket + 1] - num) < bucket_size: return True num_dict[bucket] = num if i >= k: del num_dict[nums[i - k] // bucket_size] return False"},{"question":"Write a function `snakeToCamel` that takes a snake_case string and converts it to camelCase. Snake_case strings are words separated by underscores, where each word contains only lowercase letters. CamelCase strings omit underscores and each word, except the first word, has its first letter capitalized. # Requirements: - The input to the function is a string in snake_case format. - The output should be a string converted to camelCase format. - The first word should remain in lowercase, and the first letter of each subsequent word should be capitalized. # Example: ```python snakeToCamel(\\"hello_world\\") # \\"helloWorld\\" snakeToCamel(\\"this_is_snake_case\\") # \\"thisIsSnakeCase\\" snakeToCamel(\\"convert_this_string\\") # \\"convertThisString\\" ``` # Constraints: - The input string will only contain lowercase English letters and underscores. - The input string will have at least one word (i.e., it will not be an empty string). - Consecutive underscores are not allowed, and the string will not start or end with an underscore.","solution":"def snake_to_camel(snake_str): Converts a snake_case string to camelCase. Args: snake_str (str): A string in snake_case format. Returns: str: The string converted to camelCase format. words = snake_str.split(\'_\') camel_case_str = words[0] + \'\'.join(word.title() for word in words[1:]) return camel_case_str"},{"question":"Given an unsorted integer array, determine whether there are any three numbers in the array that can form a triangle. A triangle can be formed if and only if the sum of any two sides is greater than the remaining side for all three combinations of the three sides. Return \\"YES\\" if such a triplet exists, otherwise return \\"NO\\". # Function Signature ```python def can_form_triangle(arr: List[int]) -> str: ``` # Input - An integer array `arr` containing N elements `(3 ≤ N ≤ 100)`. # Output - Return a string \\"YES\\" if there are three numbers in the array that can form a triangle, otherwise return \\"NO\\". # Examples Example 1 Input ```plaintext arr = [10, 5, 3, 7] ``` Output ```plaintext YES ``` Explanation The triplet (10, 5, 7) can form a triangle since 10 + 5 > 7, 10 + 7 > 5, and 5 + 7 > 10. Example 2 Input ```plaintext arr = [1, 2, 3] ``` Output ```plaintext NO ``` Explanation The triplet (1, 2, 3) cannot form a triangle since 1 + 2 is not greater than 3. # Constraints - The elements of the array `arr` are integers in the range `1 ≤ arr[i] ≤ 10^6`. # Notes - Consider using sorting to simplify the problem - if the array is sorted, the check for any triplet `arr[i], arr[i+1], arr[i+2]` simplifies to verifying `arr[i] + arr[i+1] > arr[i+2]` for all valid i. - Your solution should run in O(N log N) time complexity due to the sorting step, followed by a linear pass to check the triangle condition.","solution":"from typing import List def can_form_triangle(arr: List[int]) -> str: Determines if there are any three numbers in the array that can form a triangle. arr.sort() for i in range(len(arr) - 2): if arr[i] + arr[i + 1] > arr[i + 2]: return \\"YES\\" return \\"NO\\""},{"question":"Given a string `s` consisting of lowercase English letters only, you need to find out the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once. A subsequence is derived from another string by deleting some or none of the characters without changing the order of the remaining characters. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 100,000), which contains only lowercase English letters. Output Output a single line containing the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once. Examples Input bcabc Output abc Input cbacdcbc Output acdb Note In the first example, the distinct letters are `a`, `b`, and `c`. The lexicographically smallest subsequence that contains all three characters is `abc`. In the second example, the distinct letters are `a`, `b`, `c`, and `d`. The lexicographically smallest subsequence that contains all four characters is `acdb`.","solution":"def smallest_subsequence(s): Returns the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once. last_position = {char: i for i, char in enumerate(s)} stack = [] seen = set() for i, char in enumerate(s): if char not in seen: while stack and char < stack[-1] and i < last_position[stack[-1]]: seen.remove(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"Task Write a function that processes the navigation commands for a robotic vacuum cleaner on a rectangular grid. Problem Statement You are given a rectangular grid with dimensions `n` (rows) and `m` (columns). A robotic vacuum cleaner starts at the top-left corner of the grid, denoted as position `(0,0)`. The robot can move one step at a time in one of the four directions: \'UP\', \'DOWN\', \'LEFT\', or \'RIGHT\'. You will receive a sequence of commands, and your task is to determine the final position of the robot on the grid after following these commands. If a command would move the robot outside the bounds of the grid, the robot ignores that command and remains in its current position. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid. - The second line contains an integer `k` (1 ≤ k ≤ 1000), the number of commands. - The third line contains `k` commands, where each command is one of the following strings: \'UP\', \'DOWN\', \'LEFT\', \'RIGHT\'. # Output Print the final position of the robot in the format `row column`. # Example Input ``` 5 5 6 UP DOWN DOWN LEFT LEFT RIGHT ``` Output ``` 1 1 ``` Explanation - The robot starts at position (0,0). - \'UP\' is ignored because it would move the robot outside the grid. - \'DOWN\' moves the robot to position (1,0). - Another \'DOWN\' moves the robot to position (2,0). - \'LEFT\' is ignored because it would move the robot outside the grid. - Another \'LEFT\' is ignored. - \'RIGHT\' moves the robot to position (2,1). Thus, the final position of the robot is (1,1) (in 1-based indexing).","solution":"def final_position(n, m, k, commands): Determines the final position of the robotic vacuum cleaner on the grid. Parameters: - n: number of rows in the grid. - m: number of columns in the grid. - k: number of commands. - commands: list of commands. Returns: - tuple of final row and column (0-based index). row, col = 0, 0 # Starting position for command in commands: if command == \'UP\' and row > 0: row -= 1 elif command == \'DOWN\' and row < n - 1: row += 1 elif command == \'LEFT\' and col > 0: col -= 1 elif command == \'RIGHT\' and col < m - 1: col += 1 return row + 1, col + 1 # Convert to 1-based indexing as required by the problem statement"},{"question":"You are given an array A consisting of N integers and you need to answer Q queries. Each query gives you two integers L and R (1-based indexing) and asks you to perform the following operation: Count the number of distinct elements in the subarray A[L...R]. ------ Input ------ The first line of the input contains two integers N and Q. The second line contains N space-separated integers A_1, A_2, ldots, A_N. Each of the next Q lines contains two integers L and R describing a query. ------ Output ------ For each query, print a single line containing one integer ― the answer to the query. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ A_i ≤ 10^9 for each valid i 1 ≤ L ≤ R ≤ N ------ Sample Input 1 ------ 5 3 1 2 1 3 4 1 3 2 4 1 5 ------ Sample Output 1 ------ 2 3 4 ------ Explanation 1 ------ Example case 1: - For the first query, the subarray is [1, 2, 1]. The distinct elements are {1, 2}, so the answer is 2. - For the second query, the subarray is [2, 1, 3]. The distinct elements are {1, 2, 3}, so the answer is 3. - For the third query, the subarray is [1, 2, 1, 3, 4]. The distinct elements are {1, 2, 3, 4}, so the answer is 4.","solution":"def count_distinct_elements(N, Q, array, queries): Given an array and a list of queries, count the number of distinct elements in the specified subarrays. Parameters: N (int): The number of elements in the array. Q (int): The number of queries. array (list): The list of integers representing the array. queries (list): The list of tuples where each tuple contains (L, R). Returns: list: A list containing the count of distinct elements for each query. result = [] for L, R in queries: subarray = array[L-1:R] distinct_count = len(set(subarray)) result.append(distinct_count) return result"},{"question":"Task You are given an array representing a series of stock prices over time and a target profit. Write a function `canAchieveProfit(prices, target)` that determines if the target profit can be achieved by buying and then selling the stock once. The function should return `true` if it\'s possible to achieve at least the target profit, and `false` otherwise. # Example For `prices = [7, 1, 5, 3, 6, 4]` and `target = 5`, the output should be `true`. In this example, you can buy the stock at price 1 and sell it at price 6, achieving a profit of 5. For `prices = [7, 6, 4, 3, 1]` and `target = 1`, the output should be `false`. In this example, no transaction can achieve a profit of at least 1. # Input/Output - `[input]` integer array `prices` An array of integers representing the stock prices on different days. The length of the array will be between 2 and 1000 inclusive, and each element will be a positive integer. - `[input]` integer `target` An integer representing the target profit. It will be a non-negative integer. - `[output]` a boolean value `true` if it\'s possible to achieve at least the target profit, `false` otherwise.","solution":"def canAchieveProfit(prices, target): Determines if it\'s possible to achieve the target profit by buying and then selling the stock once. Parameters: prices (list of int): List of stock prices. target (int): Target profit. Returns: bool: True if it\'s possible to achieve at least the target profit, False otherwise. if not prices or len(prices) < 2: return False min_price = prices[0] for price in prices[1:]: potential_profit = price - min_price if potential_profit >= target: return True min_price = min(min_price, price) return False"},{"question":"Write a function to determine the longest contiguous subsequence of alphabetically ordered letters in a given string. ------ Input ------ A single integer t (1 ≤ t ≤ 10) - the number of test cases. For each test case, there is a string s of length n (1 ≤ n ≤ 10^5) consisting of lowercase English letters. ------ Output ------ For each test case, output the length of the longest contiguous alphabetically ordered subsequence in the string. ----- Sample Input 1 ------ 3 abcde abacadae xyzwabcdef ----- Sample Output 1 ------ 5 2 6","solution":"def longest_alphabetical_subsequence(s): Determines the length of the longest contiguous subsequence of alphabetically ordered letters in a given string. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] >= s[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len def process_test_cases(t, cases): results = [] for s in cases: results.append(longest_alphabetical_subsequence(s)) return results"},{"question":"Problem You are given a grid of dimensions N times M with walls (`#`) and open cells (`.`). You need to find the shortest distance from the top-left corner of the grid (cell (0, 0)) to the bottom-right corner of the grid (cell (N-1, M-1)). You can move up, down, left, or right at each step. You cannot move through walls. If there is no path from the top-left corner to the bottom-right corner, return -1. Constraints The input satisfies the following conditions: - 1 leq N leq 100 - 1 leq M leq 100 Input The input is given in the following format: N M row_1 row_2 ... row_N Each row contains M characters, either `#` or `.`. Output Output the shortest distance from the top-left corner to the bottom-right corner. If there is no path, output `-1`. Examples Input 5 5 ..... .#. ..... .#. ..... Output 8 Input 3 3 # .#. # Output -1","solution":"from collections import deque def shortest_path(grid): N = len(grid) M = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: r, c, dist = queue.popleft() if (r, c) == (N-1, M-1): return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, dist+1)) return -1 def parse_input_and_run(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(lines[i+1]) for i in range(N)] return shortest_path(grid)"},{"question":"Write a function that takes a list of integers as input and returns a sorted list of integers such that all the even numbers come before all the odd numbers, and both the even numbers and the odd numbers are sorted in descending order. # Input The function will receive a list of integers, numbers (1 ≤ len(numbers) ≤ 106). ```python def sort_even_and_odd(numbers: List[int]) -> List[int]: pass ``` # Output The function must return a list of integers sorted as per the above specification. # Examples ```python print(sort_even_and_odd([5, 8, 3, 2, 7])) ``` Output: ```python [8, 2, 7, 5, 3] ``` ```python print(sort_even_and_odd([1, 3, 5])) ``` Output: ```python [5, 3, 1] ``` ```python print(sort_even_and_odd([6, 4, 2, 1])) ``` Output: ```python [6, 4, 2, 1] ```","solution":"from typing import List def sort_even_and_odd(numbers: List[int]) -> List[int]: Returns a list of integers such that all the even numbers come before all the odd numbers, and both the even numbers and the odd numbers are sorted in descending order. evens = sorted([num for num in numbers if num % 2 == 0], reverse=True) odds = sorted([num for num in numbers if num % 2 != 0], reverse=True) return evens + odds"},{"question":"Given a list of integers, you need to partition the list into contiguous subarrays such that the sum of each subarray is an integer power of 2. You need to determine if it\'s possible to do so. For example, the integer powers of 2 are 1 (2^0), 2 (2^1), 4 (2^2), 8 (2^3), etc. Input The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the integers in the list. Output Print \\"Yes\\" (without the quotes) if it\'s possible to partition the list into contiguous subarrays such that the sum of each subarray is an integer power of 2. Otherwise, print \\"No\\" (without the quotes). Examples Input 6 2 3 1 1 4 8 Output Yes Input 4 2 4 1 3 Output No Input 1 16 Output Yes Note In the first example, the list can be partitioned into [2], [3, 1], and [4, 8]. The sums of these partitions are 2, 4, and 8 respectively, all of which are powers of 2. In the second example, there is no way to partition the list such that all partitions have sums that are powers of 2. In the third example, the list consists of a single integer 16, which is a power of 2 itself. Hence the output is \\"Yes\\".","solution":"def is_power_of_two(x): Checks if x is a power of 2. return (x & (x - 1)) == 0 and x != 0 def can_partition_to_powers_of_two(n, arr): Determines if it is possible to partition the array into contiguous subarrays such that the sum of each subarray is a power of 2. i = 0 while i < n: current_sum = 0 partition_found = False for j in range(i, n): current_sum += arr[j] if is_power_of_two(current_sum): i = j + 1 partition_found = True break if not partition_found: return \\"No\\" return \\"Yes\\""},{"question":"You are given a list of distinct integers which represents the heights of students standing in a line. Your task is to find three students such that the first student in the trio is shorter than the second student and the second is shorter than the third student. The three students should not necessarily stand consecutively in the line, but their heights must strictly increase from left to right. If there are multiple possible answers, any will do. Input The first line contains one integer n (3 ≤ n ≤ 3000) – the number of students in the line. The second line contains n distinct integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), where h_i represents the height of the i-th student. Output If such a trio of students cannot be found, print -1 -1 -1. Otherwise, print three distinct integers representing the indices of the students in the trio, in order of their heights. Examples Input 7 3 7 8 10 2 1 9 Output 1 2 3 Input 4 15 20 25 30 Output 1 2 3 Input 5 10 9 8 4 5 Output -1 -1 -1","solution":"def find_increasing_trio(n, heights): Finds three student indices such that their heights are in strictly increasing order. If no such indices exist, returns [-1, -1, -1]. # Traverse the list and keep track of the smaller values on the left smallest = [None] * n smallest[0] = -1 for i in range(1, n): if heights[i] > heights[0]: smallest[i] = 0 else: smallest[i] = smallest[i - 1] # Traverse the list and find the increasing triplet for j in range(1, n): for k in range(j + 1, n): if heights[j] > heights[smallest[j]] and heights[k] > heights[j]: return [smallest[j] + 1, j + 1, k + 1] return [-1, -1, -1]"},{"question":"In a distant kingdom, the king has a peculiar tradition. Every year, he assembles a group of n wizards to perform a special ceremony. Each wizard has a unique power level represented by an integer. The ceremony works as follows: - Each wizard can choose to donate his power to another wizard. - Each wizard can only donate once, but can receive donations from multiple other wizards. - The power level of a wizard after donations is the sum of his original power level and the power levels donated to him. - The new power level of a wizard will be effective immediately after all donations have been processed. Given the initial power levels of the wizards, you need to determine the highest possible power level a wizard can have after the donation process. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of wizards. The second line contains n integers p_1, p_2, ldots, p_n (1 le p_i le 10^9) — the initial power levels of the wizards. -----Output----- Print a single integer — the maximum power level a wizard can have after the donation process. -----Examples----- Input: 5 2 7 4 3 9 Output: 25 Input: 3 10 20 30 Output: 60 Input: 4 5 5 5 5 Output: 20 -----Note----- In the first example, the wizards can donate their powers such that the wizard with initial power 9 receives all donations, resulting in a power level of 2 + 7 + 4 + 3 + 9 = 25. In the second example, the wizards can donate their powers such that the wizard with initial power 30 receives all donations, resulting in a power level of 10 + 20 + 30 = 60. In the third example, any one wizard can receive all donations from the other wizards, resulting in a maximum power level of 5 + 5 + 5 + 5 = 20.","solution":"def highest_possible_power(n, powers): Determines the highest possible power level a wizard can have after all donations. Args: n (int): The number of wizards. powers (list): The initial power levels of the wizards. Returns: int: The maximum power level a wizard can have after the donation process. return sum(powers)"},{"question":"A company needs to organize a coding bootcamp consisting of multiple coding challenges. Each coding challenge can be categorized into one of three levels of difficulty: easy, medium, or hard. To ensure a balanced learning experience, the company has decided to organize the bootcamp into several bootcamp sessions, following these conditions: * Each bootcamp session provides M coding challenges. * Each bootcamp session must include at least one challenge from each difficulty level (easy, medium, and hard). * All challenges must be unique across all sessions. * A challenge cannot be reused in another session. You, as the event coordinator, want to organize as many bootcamp sessions as possible. Write a program to find the maximum number of bootcamp sessions that can be organized this year. Constraints * 1 ≤ N ≤ 10000 * 3 ≤ M ≤ 3000 * Each challenge is provided as a difficulty level (one of: easy, medium, hard). Input The input is given from Standard Input in the following format: N M difficulty_1 difficulty_2 : difficulty_N Output Print the maximum number of bootcamp sessions that can be organized on one line. Examples Input 9 3 easy medium hard easy hard medium easy medium hard Output 3 Input 4 2 easy medium hard easy Output 0","solution":"def max_bootcamp_sessions(N, M, difficulties): from collections import Counter if M < 3: return 0 counter = Counter(difficulties) # Calculate the number of minimum sets of (easy, medium, hard) min_sets = min(counter[\'easy\'], counter[\'medium\'], counter[\'hard\']) # Each session needs at least one of each (easy, medium, hard) and then additional M-3 challenges # Extra challenges needed per session after including one of each type extra_challenges_needed = M - 3 if extra_challenges_needed > 0: remaining_challenges = N - 3 * min_sets possible_additional_sessions = remaining_challenges // extra_challenges_needed max_sessions = min_sets if possible_additional_sessions >= min_sets else possible_additional_sessions else: max_sessions = min_sets return max_sessions if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) difficulties = data[2:] print(max_bootcamp_sessions(N, M, difficulties))"},{"question":"**Word Ladder Transformation** You are given two words, `start` and `end`, and a dictionary of words called `wordList`. Write a function that finds the length of the shortest transformation sequence from `start` to `end`, such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the word list. Note that `start` is not a transformed word. Return the length of the shortest transformation sequence or 0 if no such sequence exists. **Note**: All words have the same length, and all words contain only lowercase alphabetic characters. -----Input----- The input consists of three parts: 1. A string `start` denoting the starting word. 2. A string `end` denoting the target word. 3. A list of strings `wordList` which constitutes the word dictionary. -----Output----- Output a single integer: the length of the shortest transformation sequence from `start` to `end`. -----Examples----- Input hit cog [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] Output 5 Input hit cog [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"] Output 0 -----Note----- In the first example, one of the shortest transformation sequences is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", and its length is 5. In the second example, the end word \\"cog\\" is not in the word list, hence no transformation is possible.","solution":"from collections import deque def ladderLength(start, end, wordList): if end not in wordList: return 0 wordSet = set(wordList) queue = deque([(start, 1)]) while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i + 1:] if next_word in wordSet: wordSet.remove(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"A robot is placed on a 2D grid starting at position (0, 0). The robot can move in four directions: up, down, left, and right by 1 unit. You are given a string of commands consisting of the characters \'U\', \'D\', \'L\', and \'R\' which represent \'Up\', \'Down\', \'Left\', and \'Right\' respectively. Write a program to determine if the robot returns to the origin after executing all the commands in the sequence. If the robot returns to the origin, the program should output \\"YES\\", otherwise \\"NO\\". # Input The input consists of a single line containing the string of commands. The length of the string will not exceed 10,000 characters. # Output The output should be a single line containing \\"YES\\" or \\"NO\\". # Examples Example 1: **Input:** ``` UD ``` **Output:** ``` YES ``` **Explanation:** The robot moves up and then down, returning to the origin. Example 2: **Input:** ``` LL ``` **Output:** ``` NO ``` **Explanation:** The robot moves left twice, ending at position (-2, 0), which is not the origin. # Constraints - The length of the command string will be between `1` and `10,000`. - The command string will only contain characters \'U\', \'D\', \'L\', and \'R\'.","solution":"def robot_return_to_origin(commands): Determines if the robot returns to the origin after executing all commands. :param commands: A string of commands consisting of \'U\', \'D\', \'L\', and \'R\' :return: \'YES\' if the robot returns to the origin, otherwise \'NO\' x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"# Task You are given a string `s` that consists of lowercase English letters and an integer array `indices` of the same length. The string `s` has been shuffled such that the character at the `i`-th position moves to `indices[i]` in the resulting string. Return the original string. # Example For `s = \\"code\\"` and `indices = [3, 2, 1, 0]`, the output should be `\\"edoc\\"`. Explanation: The characters are mapped as follows: - \'c\' -> index 3 - \'o\' -> index 2 - \'d\' -> index 1 - \'e\' -> index 0 For `s = \\"aiohn\\"` and `indices = [3, 1, 4, 2, 0]`, the output should be `\\"nihao\\"`. # Input/Output - `[input]` string `s` A shuffled string. Constraints: `1 ≤ s.length ≤ 1000`. - `[input]` integer array `indices` An array of integers representing the shuffled order of the string. Constraints: `indices.length == s.length`, `0 ≤ indices[i] < s.length`. - `[output]` string The original string after re-shuffling according to `indices`.","solution":"def restore_string(s, indices): Restores the string to its original order as per the given indices. Parameters: s (str): The shuffled string. indices (list of int): The list of indices representing the original positions of each character. Returns: str: The original string after re-shuffling. n = len(s) restored = [\'\'] * n for i, index in enumerate(indices): restored[index] = s[i] return \'\'.join(restored)"},{"question":"Task: Write a function that calculates the number of trailing zeros in the factorial of a given number `n`. Trailing zeros in a number are a sequence of 0s in the decimal representation of the number, after which no other digits follow. Rules: * The function should receive an integer `n` (0 <= n <= 10000) as a parameter. * Return the count of trailing zeros in the factorial of `n`. Examples: trailing_zeros(5) => 5! = 120, trailing zeros = 1, thus the output is 1. trailing_zeros(10) => 10! = 3628800, trailing zeros = 2, thus the output is 2. trailing_zeros(20) => 20! = 2432902008176640000, trailing zeros = 4, thus the output is 4.","solution":"def trailing_zeros(n): Returns the number of trailing zeros in the factorial of the given number n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Problem Alice and Bob are playing a game with two piles of stones. The rules of the game are as follows: 1. There are two piles, initially containing A and B stones respectively. 2. Alice and Bob take turns, with Alice going first. 3. On a player\'s turn, they must remove stones from one of the piles. The player can choose to remove either one stone or exactly half of the stones in the pile (if the pile size is even). The player who cannot make a move loses the game. Given the initial number of stones in the two piles, determine the winner assuming both players play optimally. Constraints The input satisfies the following conditions: * 1 leq A, B leq 10^9 Input The input is given in the following format: A B All inputs are given as integers. Output Output \\"Alice\\" if Alice wins, and \\"Bob\\" if Bob wins. Examples Input 5 3 Output Alice Input 8 4 Output Bob Input 7 6 Output Alice Input 20 10 Output Bob","solution":"def determine_winner(A, B): Determine the winner of the game given the initial number of stones in piles A and B, assuming both players play optimally. :param A: int, initial number of stones in pile A :param B: int, initial number of stones in pile B :return: str, \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins # The player strategy is same as Nim Game principle -- based on the XOR of A and B. if A % 2 == 1 or B % 2 == 1: return \\"Alice\\" return \\"Bob\\""},{"question":"A subsequence of characters in a string is a string derived by deleting some or no characters without changing the order of the remaining characters. For example, \\"abc\\", \\"def\\", and \\"abcdef\\" are subsequences of \\"abcdef\\", but \\"bdca\\" and \\"aefc\\" are not. Given a string `s` and a list of strings `l`, write a program to determine how many strings in the list `l` are subsequences of the string `s`. Input - The first line contains the string `s` of length `1 <= |s| <= 10^4`. - The second line contains an integer `1 <= q <= 1000` - the number of strings in the list `l`. - The next `q` lines each contain a string from the list `l`, where the length of each string is between `1` and `100`. Output - Output a single integer, the number of strings from the list `l` that are subsequences of the string `s`. Example Input abcde 4 a bb acd ace Output 3","solution":"def is_subsequence(s, sub): Returns True if \'sub\' is a subsequence of \'s\', otherwise False. iter_s = iter(s) return all(char in iter_s for char in sub) def count_subsequences(s, l): Returns the number of strings in `l` that are subsequences of string `s`. return sum(1 for item in l if is_subsequence(s, item)) def main(): import sys input = sys.stdin.read data = input().splitlines() s = data[0] q = int(data[1]) l = data[2:2+q] print(count_subsequences(s, l))"},{"question":"In a forest, there are N trees aligned in a single line, each with a certain height. The height of the i-th tree is given by H[i]. A woodcutter wants to cut down some trees such that the height of the remaining trees is non-decreasing from left to right. The woodcutter can only cut down trees entirely (he cannot just trim their height). Write a program to find the minimum number of trees that need to be cut down to achieve this. -----Input----- The first line contains an integer N - the number of trees. The second line contains N integers - H[1], H[2], ..., H[N] - the heights of the trees. -----Output----- Output a single integer - the minimum number of trees that need to be cut down. -----Constraints----- - 1 ≤ N ≤ 103 - 1 ≤ H[i] ≤ 109 -----Example----- Input: 5 3 2 5 1 6 Output: 2 -----Explanation----- Removing the trees with heights 2 and 1 will leave the sequence [3, 5, 6] which is non-decreasing. Input: 6 4 3 2 4 5 3 Output: 3 Explanation: Removing the trees with heights 3, 2, and 3 will leave the sequence [4, 4, 5] which is non-decreasing.","solution":"def min_trees_to_cut(N, H): def lis_length(seq): if not seq: return 0 lis = [seq[0]] for i in range(1, len(seq)): if seq[i] >= lis[-1]: lis.append(seq[i]) else: index = bisect_left(lis, seq[i]) lis[index] = seq[i] return len(lis) from bisect import bisect_left return N - lis_length(H)"},{"question":"City Skyline The city of Protega is famous for its beautifully organized skyline of skyscrapers. One day, the city council decided to add a special light on the top of each skyscraper that only lights up if it has an unobstructed view of the horizon, i.e., there is no taller skyscraper to the right of it. The task now is to determine how many skyscrapers will have their lights turned on. # BRIEF - You are given an array `buildings` of length `N`, where each element `buildings[i]` represents the height of the i-th skyscraper. - A skyscraper’s light will only turn on if there is no skyscraper to its right that is taller. # Input - First line will contain an integer `N`, the number of skyscrapers. - Next line will contain `N` space-separated integers representing the heights of the skyscrapers. # Output - Output the number of skyscrapers that will have their lights turned on. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ buildings[i] ≤ 10^9 # SAMPLE INPUT ```plaintext 5 10 12 3 4 8 ``` # SAMPLE OUTPUT ```plaintext 2 ``` # Explanation - The first skyscraper (height 10) has a taller skyscraper (height 12) to the right. Light off. - The second skyscraper (height 12) has no taller skyscraper to the right. Light on. - The third skyscraper (height 3) has taller skyscrapers (height 4 and 8) to the right. Light off. - The fourth skyscraper (height 4) has a taller skyscraper (height 8) to the right. Light off. - The fifth skyscraper (height 8) has no taller skyscraper to the right. Light on. In total, 2 skyscrapers will have their lights turned on.","solution":"def count_skyscrapers_with_lights(buildings): Given a list of skyscraper heights, returns the number of skyscrapers that will have their lights turned on (no taller skyscraper to their right). :param buildings: List of integers representing skyscraper heights. :return: Integer count of skyscrapers with lights on. count = 0 max_height_to_right = 0 # Traverse the buildings from right to left for height in reversed(buildings): if height > max_height_to_right: count += 1 max_height_to_right = height return count"},{"question":"You are given an array of integers, and a target integer. Your task is to determine if there are three distinct integers in the array such that their sum is equal to the target. Constraints * 1 leq len(array) leq 10^3 * -10^3 leq array[i] leq 10^3 * -10^3 leq target leq 10^3 Input Input is given from Standard Input in the following format: len(array) array target Where: - `len(array)` is the length of the array. - `array` is a space-separated list representing the array. - `target` is the target sum value. Output Output \\"True\\" if there are three such integers in the array, and \\"False\\" otherwise. Examples Input 6 1 2 3 4 5 6 10 Output True Input 4 -1 0 1 2 5 Output False","solution":"def three_sum(array, target): Determines if there are three distinct integers in the array such that their sum is equal to the target. Args: array (list of int): List of integers. target (int): Target sum value. Returns: bool: True if there are three integers in the array that sum up to the target, False otherwise. array.sort() # Sort the array to use the two-pointer technique n = len(array) for i in range(n - 2): # Skip duplicate values if i > 0 and array[i] == array[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = array[i] + array[left] + array[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"You are given a string containing digits from \'0\' to \'9\'. A digit string is called an ascending sequence if we can split the string into several non-empty parts that create a sequence of consecutive ascending integers with no repeated characters. Return true if the string is an ascending sequence, otherwise return false. Example 1: Input: \\"1234\\" Output: true Explanation: We can split the string into \\"1\\", \\"2\\", \\"3\\", \\"4\\" which are consecutive. Example 2: Input: \\"91011\\" Output: true Explanation: We can split the string into \\"9\\", \\"10\\", \\"11\\" which are consecutive. Example 3: Input: \\"10203\\" Output: false Explanation: We can\'t split the string into all non-empty parts where each part is a consecutive ascending integer. Note: The length of the string will not exceed 30 characters. Each character in the string is a digit from \'0\' to \'9\'.","solution":"def is_ascending_sequence(s): Returns true if the string `s` can be split into several non-empty parts that create a sequence of consecutive ascending integers, otherwise false. length = len(s) # Try every possible length of the first number in the sequence for l in range(1, length // 2 + 1): start = 0 number = int(s[start:start + l]) start += l while start < length: number += 1 next_number_str = str(number) next_length = len(next_number_str) if s[start:start + next_length] != next_number_str: break start += next_length else: # If we exhausted the string, then we found a valid sequence return True return False"},{"question":"Anna is planning for a movie night with her friends. She has a list of movies and each movie has a specific rating. She asks each of her friends for their preferred movie ratings and wants to determine the minimum rating any movie should have so that all her friends will be happy with the choice. If no such movie exists, she should declare that it is not possible to satisfy everyone. Given a list of N movies with their ratings and the preferred ratings from M friends, find the minimum rating any movie should have that satisfies the conditions. If there is no possible rating, return -1. -----Constraints----- - All values in input are integers. - 1 leq M, N leq 50 - 1 leq Rating_i leq 100 -----Input Format----- The first line contains one integer N, the number of movies. The second line contains N integers representing the ratings of each movie. The third line contains one integer M, the number of friends. The next M lines contain one integer each, representing the preferred rating of each friend. -----Output----- Print the minimum rating any movie should have to satisfy all friends, or -1 if it is not possible. -----Sample Input----- 5 4 5 6 7 8 3 5 6 7 -----Sample Output----- 7 In this case, all friends are only happy with a movie that has a rating of at least 7. Therefore, the answer is 7. -----Sample Input----- 4 1 2 3 4 3 5 6 7 -----Sample Output----- -1 Here, no movie has a high enough rating to satisfy all friends, so the output is -1.","solution":"def minimum_rating(N, movie_ratings, M, preferred_ratings): This function determines the minimum rating any movie should have so that all friends will be happy with the choice. If no such movie exists, it returns -1. :param N: int - Number of movies :param movie_ratings: List[int] - Ratings of the movies :param M: int - Number of friends :param preferred_ratings: List[int] - Preferred ratings by the friends :return: int - Minimum rating or -1 if not possible to satisfy all friends # Find the highest preferred rating among all friends min_required_rating = max(preferred_ratings) # Find the highest movie rating available highest_movie_rating = max(movie_ratings) # If the highest available movie rating is less than the highest preferred rating, # it is not possible to satisfy all friends if highest_movie_rating < min_required_rating: return -1 # Otherwise, return the highest preferred rating return min_required_rating"},{"question":"Write a program to check if a given string is a palindrome, ignoring case and non-alphanumeric characters. -----Input:----- - First line will contain a string S. -----Output:----- Output \\"YES\\" if the string is a palindrome, otherwise \\"NO\\". -----Constraints----- - 1 leq |S| leq 1000 - The string will contain only printable ASCII characters. -----Sample Input:----- A man, a plan, a canal, Panama! -----Sample Output:----- YES -----EXPLANATION:----- Ignoring case and non-alphanumeric characters, the string \\"A man, a plan, a canal, Panama!\\" becomes \\"amanaplanacanalpanama\\" which is a palindrome.","solution":"import re def is_palindrome(s): This function checks if the given string is a palindrome, ignoring case and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is a palindrome return \\"YES\\" if cleaned_str == cleaned_str[::-1] else \\"NO\\" # Example usage: # s = \\"A man, a plan, a canal, Panama!\\" # print(is_palindrome(s)) # Output: \\"YES\\""},{"question":"Write a function to calculate the smallest positive integer (greater than 0) that does not appear in a given list of integers. input The input consists of multiple datasets. Each dataset is one line containing integers separated by spaces. Each dataset has 1 to 10,000 integers, and each integer is within the range -10,000 to 10,000. Input ends with EOF. The number of datasets does not exceed 5. output For each dataset, output the smallest positive integer that does not appear in the dataset. Examples Input 1 2 0 3 4 -1 1 7 8 9 11 12 Output 3 2 1","solution":"def find_smallest_missing_positive(datasets): Given multiple datasets, find the smallest positive integer that does not appear in each dataset. Args: datasets (list of list of int): List of datasets where each dataset is a list of integers. Returns: list of int: List of smallest positive integers missing from each dataset. results = [] for data in datasets: positive_set = set(filter(lambda x: x > 0, data)) i = 1 while i in positive_set: i += 1 results.append(i) return results"},{"question":"Given an integer n, return the number of unique binary search trees (BSTs) that can be formed with n distinct nodes labeled from 1 to n. Input The first line of the standard input contains one integer t (t ≤ 1000) which is the number of test cases. In each of the next t lines, there is a number n (0 ≤ n ≤ 18). Output For each test case, print the number of unique BSTs that can be formed with n distinct nodes. Constraints 1 ≤ t ≤ 100 0 ≤ n ≤ 18 SAMPLE INPUT 3 3 4 5 SAMPLE OUTPUT 5 14 42","solution":"def num_trees(n): Returns the number of unique binary search trees that can be formed with n distinct nodes. if n == 0: return 1 if n == 1: return 1 dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for nodes in range(2, n + 1): total_trees = 0 for root in range(1, nodes + 1): left_trees = dp[root - 1] right_trees = dp[nodes - root] total_trees += left_trees * right_trees dp[nodes] = total_trees return dp[n] def process_input(t, cases): Processes a list of test cases and returns the number of unique BSTs for each n. results = [] for n in cases: results.append(num_trees(n)) return results # Example usage: if __name__ == \\"__main__\\": t = int(input()) cases = [int(input()) for _ in range(t)] results = process_input(t, cases) for result in results: print(result)"},{"question":"You\'re given an array of integers, and you need to determine whether it is possible to partition the array into two subsets such that the sum of the elements in both subsets is equal. Write a function that takes an array of integers and returns `true` if the array can be partitioned into two subsets with equal sum, and `false` otherwise. **Example:** ```plaintext Input: [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11], both of which have a sum of 11. Input: [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into subsets that equal the same sum. ``` **Note:** - Each of the array elements will be positive integers. - The length of the array will not exceed 200. - The sum of the elements in the array will not exceed 10000.","solution":"def can_partition(nums): Determine if the given array can be partitioned into two subsets such that the sums of the elements in both subsets are equal. :param nums: List[int] - array of integers :return: bool - True if array can be partitioned into two subsets of equal sum, False otherwise total_sum = sum(nums) # If total_sum is odd, it\'s impossible to split the array in two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize dp array dp = [False] * (target + 1) dp[0] = True # Update dp array for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"The Large Software Company is preparing for a crucial product launch. To ensure all tasks are efficiently managed, they\'ve decided to implement a custom task scheduler. Each task has a specific priority and execution time, and the scheduler must adhere to the following rules: 1. A task with a higher priority should be executed before a task with a lower priority. 2. If two tasks have the same priority, the one which came earlier in the input list should be executed first. 3. The scheduler needs to handle real-time queries about the next task to execute and the ability to remove the next task from the schedule once executed. You are asked to implement this task scheduler, dealing with three types of operations: 1. Add a task to the scheduler with a given priority and execution time. 2. Query the next task to be executed without removing it from the schedule. 3. Remove the next task from the schedule once it is executed. Each operation is represented as follows: 1. `add_task priority execution_time` - Adds a task with the specified priority and execution_time to the schedule. 2. `next_task` - Outputs the priority and execution time of the next task in the schedule. 3. `execute_task` - Removes the next task from the schedule and outputs the priority and execution time of the executed task. The queries should be processed in real-time, ensuring the correct order of task execution. Input The first line of the input contains a single integer q (1 ≤ q ≤ 200,000) — the number of queries. Each of the following q lines contains one of the three types of operations listed above. Output For each `next_task` and `execute_task` query, output a single line with the priority and execution time of the next or executed task respectively. If there are no tasks left in the schedule for these queries, output \\"No tasks\\". Example Input 8 add_task 5 10 add_task 3 15 next_task add_task 5 20 next_task execute_task execute_task next_task Output 3 15 3 15 3 15 5 10","solution":"import heapq class TaskScheduler: def __init__(self): self.task_heap = [] self.counter = 0 def add_task(self, priority, execution_time): heapq.heappush(self.task_heap, (priority, self.counter, execution_time)) self.counter += 1 def next_task(self): if not self.task_heap: return \\"No tasks\\" priority, _, execution_time = self.task_heap[0] return f\\"{priority} {execution_time}\\" def execute_task(self): if not self.task_heap: return \\"No tasks\\" priority, _, execution_time = heapq.heappop(self.task_heap) return f\\"{priority} {execution_time}\\" def task_scheduler(queries): scheduler = TaskScheduler() results = [] for query in queries: parts = query.split() if parts[0] == \\"add_task\\": scheduler.add_task(int(parts[1]), int(parts[2])) elif parts[0] == \\"next_task\\": results.append(scheduler.next_task()) elif parts[0] == \\"execute_task\\": results.append(scheduler.execute_task()) return results"},{"question":"Alice is given an array of positive integers where each integer represents the time it takes to complete a specific task. She needs to determine if it is possible to complete all tasks within a given time limit by executing exactly three tasks in parallel (simultaneously) at any point in time. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of multiple lines of input: - The first line of each test case contains two integers N and M. N is the number of tasks, and M is the maximum allowable time. - The next line contains N space-separated integers representing the time required to complete each task. ------ Output Format ------ For each test case, output YES if it is possible to complete all tasks within the given time limit by executing exactly three tasks at a time, otherwise output NO. You can print each character in uppercase or lowercase. For example YES, yes, Yes, and yES are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^9 1 ≤ text{Time of each task} ≤ 10^7 - The sum of N over all test cases will not exceed 10^6. ----- Sample Input 1 ------ 3 6 10 2 2 2 2 2 2 4 6 1 2 3 4 5 15 5 5 5 5 5 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: Alice has 6 tasks each taking 2 units of time and wants to finish all in at most 10 units. By executing 3 tasks simultaneously, each batch will take 2 units of time, yielding 4 units in total (2 batches), which is within the limit. Test case 2: With the times of 1, 2, 3, and 4 units, even if running 3 in parallel and considering the largest batch time (i.e., 4), it will exceed 6 units overall: e.g., (1, 2, 3) → max(1, 2, 3) + 4 = 3 + 4 = 7 > 6. Test case 3: Alice has five tasks, each taking 5 units. Executing 3 tasks will take 5 units, and another batch of 2 tasks will still take 5 units, totaling to 10 units, which is within the limit of 15 units.","solution":"def can_complete_tasks_within_time(T, test_cases): Determines if it is possible to complete all tasks within a given time limit by executing exactly three tasks in parallel. Parameters: T: int - Number of test cases test_cases: List of tuples [(N, M, tasks), ...] Returns: List of strings: [\\"YES\\", \\"NO\\", ...] for each test case. results = [] for case in test_cases: N, M, tasks = case # Splitting tasks into chunks of 3 task_batches = [tasks[i:i+3] for i in range(0, len(tasks), 3)] # Calculate the total time required total_time = 0 for batch in task_batches: total_time += max(batch) if total_time <= M: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a 2D grid composed of \'1\'s (land) and \'0\'s (water), your task is to count the number of distinct islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Two islands are considered distinct if they do not share any land. -----Input----- The first line contains two integers n and m (1 le n, m le 300), representing the dimensions of the grid. Each of the next n lines contains m characters, representing the grid cells. Each character is either \'1\' or \'0\'. -----Output----- Print one integer representing the number of distinct islands in the grid. -----Examples----- Input 4 5 11000 11000 00100 00011 Output 3 Input 3 3 111 010 111 Output 1 -----Note----- In the first example, there are three distinct islands: - One island is formed by the cells (0,0), (0,1), (1,0), and (1,1). - Another island is at the cell (2,2). - The third island includes the cells (3,3) and (3,4). In the second example, there is just a single island covering the entire grid. This problem tests your ability to work with graph traversal algorithms in a grid-based format and handle connectivity components.","solution":"def count_islands(grid): n = len(grid) m = len(grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == \'0\' or visited[i][j]: return visited[i][j] = True dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) count += 1 return count"},{"question":"A coding competition is being held, and the participants are required to solve a series of tasks efficiently. One of the tasks involves working with a rectangular grid. You are asked to create a function that generates a specific sequence from the elements of this grid. Given a rectangular grid of dimensions R x C, you need to start from the top-left cell (1, 1), move to the rightmost column (1, C), then down to the bottom-right cell (R, C), and finally move to the leftmost column (R, 1), and back up to the top-left cell (1, 1) making a rectangular spiral. Write a function that takes a grid of integers and returns a list of integers representing the rectangular spiral path described. Function Signature: ```python def rectangular_spiral(grid: List[List[int]]) -> List[int]: ``` Input: - A rectangular grid of integers `grid` with dimensions R x C - 1 <= R, C <= 1000 - Each element of the grid is an integer within the range -1000 to 1000 Output: - A list of integers representing the elements of the grid in the order they are visited in the rectangular spiral. Examples: ```python rectangular_spiral([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) ``` Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ```python rectangular_spiral([ [1, 2], [3, 4] ]) ``` Output: [1, 2, 4, 3] ```python rectangular_spiral([ [1] ]) ``` Output: [1] Note: - The function should handle grids of all possible dimensions within the constraints. - Ensure that the function runs efficiently within the given upper limits for R and C. Constraints: - The grid will always contain at least one element. - Elements in the grid are arranged in a way that the rectangular spiral can be formed uniquely for a given grid.","solution":"from typing import List def rectangular_spiral(grid: List[List[int]]) -> List[int]: Function to generate a rectangular spiral path from a given grid of integers. R, C = len(grid), len(grid[0]) result = [] if R == 1 and C == 1: return [grid[0][0]] # Step 1: Move right across the top row (1, 1) -> (1, C) for col in range(C): result.append(grid[0][col]) # Step 2: Move down the rightmost column (1, C) -> (R, C) for row in range(1, R): result.append(grid[row][C-1]) # Step 3: Move left across the bottom row, only if R > 1 (R, C) -> (R, 1) if R > 1: for col in range(C-2, -1, -1): result.append(grid[R-1][col]) # Step 4: Move up the leftmost column, only if C > 1 (R, 1) -> (2, 1) if C > 1: for row in range(R-2, 0, -1): result.append(grid[row][0]) # Step 5: Handle the inner sub-grid by calling the function recursively if R > 2 and C > 2: inner_grid = [row[1:C-1] for row in grid[1:R-1]] result.extend(rectangular_spiral(inner_grid)) return result"},{"question":"Given a linked list, rotate the list to the right by `k` places, where `k` is a non-negative integer. For example, given the linked list: 1 -> 2 -> 3 -> 4 -> 5 -> NULL and `k = 2`, the list should be rotated to: 4 -> 5 -> 1 -> 2 -> 3 -> NULL Write a function to accomplish this: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: # Your code here # Test cases # Example 1: # Input: head = [1,2,3,4,5], k = 2 # Output: [4,5,1,2,3] # Example 2: # Input: head = [0,1,2], k = 4 # Output: [2,0,1] ``` Clarifications: 1. The number of nodes in the list is in the range `[0, 500]`. 2. `0 <= Node.val <= 1000`. 3. `0 <= k <= 2 * 10^9`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: if not head or k == 0: return head # Find the length of the list and the end of the list length = 1 old_tail = head while old_tail.next: old_tail = old_tail.next length += 1 # If k is larger than the length of the list, reducing k k %= length if k == 0: return head # Find the new tail (length - k - 1) and the new head (length - k) new_tail = head for _ in range(length - k - 1): new_tail = new_tail.next new_head = new_tail.next # Break the link and set the new links new_tail.next = None old_tail.next = head return new_head"},{"question":"Given an array of integers, write a function to determine whether there exists a pair of indices (i, j) such that i < j and the difference between the elements at these indices is equal to a given target value. If such a pair exists, return True; otherwise, return False. For example: ``` find_pair_with_difference([5, 10, 3, 2, 50, 80], 78) should return True find_pair_with_difference([90, 70, 20, 80, 50], 45) should return False ``` Function Signature: ```python def find_pair_with_difference(arr: list, target: int) -> bool: pass ``` **Constraints:** - The array `arr` will contain at most 10^5 elements. - Each element of `arr` will be an integer within the range [-10^9, 10^9]. - The target value will be an integer within the range [1, 10^9].","solution":"def find_pair_with_difference(arr, target): Function to determine whether there exists a pair of indices (i, j) such that i < j and the difference between the elements at these indices is equal to a given target value. seen = set() for num in arr: if num + target in seen or num - target in seen: return True seen.add(num) return False"},{"question":"You\'ve been hired to develop a financial trading application for a startup. One critical feature is to analyze stock prices and identify periods of maximum potential profit for given historical price records. A trader wants to know the best time to buy and sell stock to maximize profit. To assist the trader, you need to write a function that calculates the maximum possible profit from a list of daily stock prices. The function should take into consideration the constraints provided below. You are given a list of integers representing the daily stock prices for a given period. Your task is to determine the maximum profit that can be made by buying on one day and selling on another later day. If no profit is possible, the function should return 0. Input Format - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a list of integers separated by spaces, representing the stock prices over several days. Output Format - For each test case, print an integer that represents the maximum profit that can be achieved. If no profit is possible, print 0. Constraints - 1 ≤ T ≤ 20 - 1 ≤ Number of days (length of stock prices list in each test case) ≤ 100000 - 0 ≤ Daily stock price ≤ 10000 SAMPLE INPUT 3 7 1 5 3 6 4 7 6 4 3 1 1 2 3 4 5 SAMPLE OUTPUT 5 0 4 Explanation For the first test case, the best strategy is to buy on day 2 (price = 1) and sell on day 5 (price = 6), which yields a profit of 6 - 1 = 5. For the second test case, no profit is possible since the prices are decreasing every day. For the third test case, the best strategy is to buy on day 1 (price = 1) and sell on day 5 (price = 5), which yields a profit of 5 - 1 = 4.","solution":"def max_profit(stock_prices): Returns the maximum profit achievable from a list of daily stock prices by buying on one day and selling on another later day. If no profit is possible, returns 0. if not stock_prices or len(stock_prices) < 2: return 0 min_price = stock_prices[0] max_profit = 0 for price in stock_prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit def process_test_cases(T, test_cases): results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"Given a string s containing only lowercase alphabets and an integer k, return the maximum number of distinct substrings of length k that can be found in s. Example 1: Input: s = \\"abcabcab\\", k = 3 Output: 5 Explanation: The substrings of length 3 are: \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\", \\"bca\\". After removing duplicates, the distinct substrings are: \\"abc\\", \\"bca\\", \\"cab\\". Total number of distinct substrings = 3 Example 2: Input: s = \\"aaaaa\\", k = 2 Output: 1 Explanation: The substrings of length 2 are: \\"aa\\", \\"aa\\", \\"aa\\", \\"aa\\". After removing duplicates, the single distinct substring is: \\"aa\\". Total number of distinct substrings = 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxDistinctSubstrings() which takes a string s and an integer k as parameters and returns the maximum number of distinct substrings of length k. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ s.length ≤ 10^5 1 ≤ k ≤ s.length","solution":"def maxDistinctSubstrings(s, k): Returns the maximum number of distinct substrings of length k in the string s. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i+k]) return len(substrings)"},{"question":"**Problem** A group of adventurers are exploring a mystical forest and have encountered a series of enchanted gates, each guarded by a magical creature. Each gate will only open if the adventurers present a specific combination of magical keys. Each key has a certain level of magic power, and the goal is to open as many gates as possible by presenting the unique combination of keys required for each gate, without exceeding the combined magic power limit the adventurers can wield. Each gate requires a certain unique combination of keys, which are available in a limited amount, and each key has an associated magical power. Additionally, each adventurer can wield a limited amount of combined magical power. Write a program to help the adventurers maximize the number of gates they can open without exceeding their collective magical power limit. **Constraints** The input satisfies the following conditions: * All inputs are integers. * 1 ≤ n ≤ 50 * 1 ≤ m ≤ 1000 * 0 ≤ pi ≤ 100 * 1 ≤ c ≤ n * 1 ≤ g ≤ 50 **Input** The input consists of multiple test cases. Each test case is given in the following format: * n m * c1 p1 * c2 p2 * ... * cn pn * k * g1 j1,1 ... j1,g1 * g2 j2,1 ... j2,g2 * ... * gk jk,1 ... jk,gk * n: Number of keys * m: Maximum combined magical power the adventurers can wield * ci: The count (availability) of the i-th key * pi: The magical power of the i-th key * k: Number of gates * gi: Number of keys required to open the i-th gate * ji,j: Identifier of the j-th key required for the i-th gate (1-indexed) The end of input is indicated by EOF. **Output** For each test case, print the maximum number of gates that can be opened without exceeding the total magical power limit. **Example** Input ``` 3 100 5 20 4 15 3 10 2 2 1 2 1 3 4 90 3 10 2 20 1 30 1 15 1 3 2 3 4 ``` Output ``` 2 1 ``` In this example, the first test case provides the combined power availability and then describes the keys and their required counts, followed by the gates and the respective keys required to open them. The required keys and their power contributions must not exceed the adventurers\' total power limit, thus determining the number of gates that can be opened.","solution":"def can_open_gate(gate, key_counts, key_powers, total_power): used = [0] * len(key_counts) power = 0 for key in gate: if key_counts[key - 1] <= 0: return False if power + key_powers[key - 1] > total_power: return False power += key_powers[key - 1] used[key - 1] += 1 for i in range(len(used)): key_counts[i] -= used[i] return True def max_gates_opened(keys, max_power, key_counts, key_powers, gates): num_gates = 0 for gate in gates: if can_open_gate(gate, key_counts.copy(), key_powers, max_power): num_gates += 1 return num_gates def solve(adventure_data): results = [] i = 0 while i < len(adventure_data): n, m = adventure_data[i] i += 1 key_counts = [] key_powers = [] for _ in range(n): count, power = adventure_data[i] key_counts.append(count) key_powers.append(power) i += 1 k = adventure_data[i][0] i += 1 gates = [] for _ in range(k): gates.append(adventure_data[i][1:]) i += 1 results.append(max_gates_opened(key_counts, m, key_counts, key_powers, gates)) return results # Example on how to call it: # adventure_data = [ # (3, 100), # (5, 20), (4, 15), (3, 10), # (2,), # (2, 1, 2), (1, 3), # (4, 90), # (3, 10), (2, 20), (1, 30), (1, 15), # (1,), # (3, 2, 3, 4), # ] # print(solve(adventure_data)) # Output: [2, 1]"},{"question":"Teja is developing an interest in matrix manipulations. Utkarsh decides to challenge him with matrix rotations. Given a square matrix, he needs to rotate it 90 degrees clockwise a specific number of times. Given an integer K, Teja needs to rotate the matrix K times in clockwise direction. If K is larger than or equal to 4, reduce K modulo 4 (K = K % 4). This is because rotating a matrix 4 times brings it back to its original position. Teja has to output the matrix after the required number of rotations. Input: T - the number of test cases. For each test case: The first line contains an integer N - the size of the matrix (NxN). The next N lines contain N integers each, representing the elements of the matrix. The last line contains an integer K - the number of times the matrix needs to be rotated clockwise. Output: For each test case, print the matrix after the required number of rotations. Print each row in a new line and ensure rows are separated by an empty line between test cases. Constraints : 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ matrix elements ≤ 10^3 0 ≤ K ≤ 10^5 Problem setter: Utkarsh Srivastava Problem tester: Shivam Garg SAMPLE INPUT 1 3 1 2 3 4 5 6 7 8 9 1 SAMPLE OUTPUT 7 4 1 8 5 2 9 6 3 Explanation: There is only 1 test case, comprising a 3x3 matrix. Since K is 1, we need to rotate the matrix 1 time clockwise. The resultant matrix after 1 rotation is: 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a square matrix 90 degrees clockwise. n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - i - 1] = matrix[i][j] return rotated def rotate_matrix_k_times(matrix, k): k = k % 4 # Reducing the number of rotations if k >= 4 for _ in range(k): matrix = rotate_matrix_90_clockwise(matrix) return matrix def process_input(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) index = 1 results = [] for _ in range(t): n = int(input_lines[index]) matrix = [] for i in range(n): matrix.append(list(map(int, input_lines[index + 1 + i].split()))) k = int(input_lines[index + 1 + n]) rotated_matrix = rotate_matrix_k_times(matrix, k) results.append(rotated_matrix) index += n + 2 return results def format_output(results): output = [] for result in results: for row in result: output.append(\\" \\".join(map(str, row))) output.append(\\"\\") return \\"n\\".join(output).strip() def solve(input_data): results = process_input(input_data) return format_output(results)"},{"question":"A group of friends is planning a hiking trip in the mountains. They need to organize the trip such that they reach the peak by the end of the day while minimizing the total hiking time. The trail is divided into segments, each with a certain difficulty level which determines the time it takes to hike through. The difficulty level of a segment is represented by an integer between 1 and 10^5. The friends can choose any order to complete the segments, but they must follow the sequence strictly from start to finish once a path is chosen. Write a program to find the minimum total hiking time required to reach the peak. The friends can hike a segment individually or together, but they can only proceed to the next segment after finishing the current one as a whole group. **Input:** - The first line contains an integer N, the number of segments (1 leq N leq 2cdot 10^3). - The next line contains N integers where the i-th integer D_i (1 leq D_i leq 10^5) represents the difficulty level of the i-th segment. **Output:** - Write one line with an integer, the minimum total hiking time required to reach the peak. **Example:** Sample Input 1: ``` 3 4 2 5 ``` Sample Output 1: ``` 11 ``` Sample Input 2: ``` 5 1 3 2 4 5 ``` Sample Output 2: ``` 15 ``` Explanation: In the first example, the minimum total hiking time is achieved by hiking the segments in the order given: 4 + 2 + 5 = 11. In the second example, the order 1 + 3 + 2 + 4 + 5 = 15 is already the optimal way.","solution":"def minimum_hiking_time(N, difficulties): This function takes in the number of segments N and a list of difficulties, It returns the minimum total hiking time required to reach the peak. # Since we must follow the segments in sequence from start to finish, the minimum # total hiking time is simply the sum of all segment difficulties. return sum(difficulties)"},{"question":"A construction company has developed a new traffic management system for a city that aims to minimize the total time taken for people to travel between various points in the city. The system needs a module to calculate the shortest possible path between any two points in the city, taking into account that some streets may have different travel times due to traffic, work zones, or other factors. You are tasked with implementing this module. The city is represented as a directed graph where intersections are nodes and streets are edges with weights denoting the travel time. Your task is to compute the shortest travel time from a given source node to a target node. Input: - The first line contains an integer T denoting the number of test cases. - Each test case starts with two integers N and M, where N is the number of intersections (nodes) and M is the number of streets (edges). - The next M lines each contain three integers U, V, and W, where U is the source intersection of the street, V is the destination intersection of the street, and W is the travel time from U to V. - The last line of each test case contains two integers S and T, where S is the starting intersection and T is the target intersection. Output: - For each test case, print the shortest travel time between intersections S and T. If there is no path, print \\"NO PATH\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ M ≤ 10000 0 ≤ W ≤ 100000 1 ≤ U, V, S, T ≤ N Assume nodes are 1-indexed. SAMPLE INPUT 2 4 4 1 2 4 1 3 2 2 3 5 3 4 1 1 4 5 7 1 2 3 1 3 2 1 4 7 2 3 1 2 5 6 3 4 2 4 5 1 1 5 SAMPLE OUTPUT 3 5 Explanation: In the first test case, the shortest path from intersection 1 to intersection 4 is 1 -> 3 -> 4 with a total travel time of 3 (2 + 1). In the second test case, the shortest path from intersection 1 to intersection 5 is 1 -> 3 -> 4 -> 5 with a total travel time of 5 (2 + 2 + 1).","solution":"import heapq import sys def dijkstra(N, edges, S, T): # Create adjacency list graph = {i: [] for i in range(1, N+1)} for U, V, W in edges: graph[U].append((V, W)) # Distance array to track shortest paths dist = {i: sys.maxsize for i in range(1, N+1)} dist[S] = 0 # Priority queue to explore the minimum distance node pq = [(0, S)] while pq: current_dist, current_node = heapq.heappop(pq) if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[T] if dist[T] != sys.maxsize else \\"NO PATH\\" def get_shortest_paths(test_cases): results = [] for case in test_cases: N, M, edges, S, T = case result = dijkstra(N, edges, S, T) results.append(result) return results # Driver function to run the module def compute_shortest_paths(inputs): test_cases = [] lines = inputs.split(\'n\') T = int(lines[0].strip()) line_index = 1 for _ in range(T): N, M = map(int, lines[line_index].strip().split()) edges = [] for i in range(1, M+1): U, V, W = map(int, lines[line_index + i].strip().split()) edges.append((U, V, W)) S, T = map(int, lines[line_index + M + 1].strip().split()) test_cases.append((N, M, edges, S, T)) line_index += M + 2 return get_shortest_paths(test_cases)"},{"question":"You are given a string consisting of lowercase letters \'a\' to \'z\'. You can perform two types of operations on this string any number of times: 1. Choose a character from the string and duplicate it; i.e., insert another instance of that character immediately after it. 2. Choose a character from the string and remove it. Your task is to determine the lexicographically smallest string possible after performing any number of these operations. ------ Input ------ The first line of the input contains the integer T denoting the number of test cases. The next T lines contain one string each. ------ Output ------ For each test case, output a single line containing the lexicographically smallest string possible. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ length of the string ≤ 100 ------ Example Input ------ 3 abc bca abba ------ Example Output ------ aa a a ------ Explanation ------ In the first case, you can remove \'b\' and \'c\' to leave \'a\'. In the second case, you can remove \'b\' and \'c\' to leave \'a\'. In the third case, you can remove \'b\' twice, \'a\' once, and then duplicate the remaining \'a\' to get \'a\'.","solution":"def smallest_lexicographic_string(string): Returns the lexicographically smallest string possible by performing any number of duplicate or remove operations on the given string. return min(string) def process_test_cases(test_cases): Processes multiple test cases and returns the smallest lexicographically possible strings. return [smallest_lexicographic_string(tc) for tc in test_cases]"},{"question":"Bob is playing a game where he needs to move a token on a 2D grid from the top-left corner (1, 1) to the bottom-right corner (N, M). He can only move the token one cell either to the right or downward. However, some cells in the grid are blocked and he cannot move the token into those cells. Bob wants to know how many unique paths from the top-left corner to the bottom-right corner exist, given the blocked cells. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The second line contains a single integer B denoting the number of blocked cells. - The next B lines each contain two space-separated integers r and c specifying the row and column of a blocked cell. -----Output----- For each test case, print a single line containing one integer ― the number of unique paths from the top-left corner to the bottom-right corner considering the blocked cells. -----Constraints----- - 1 le T le 100 - 1 le N, M le 1000 - 0 le B le 10^5 - 1 le r le N - 1 le c le M -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 2 3 3 1 2 2 4 4 0 -----Example Output----- 2 20 Note: In example 1, the 3x3 grid has a blocked cell at position (2, 2). Thus, the possible paths from (1, 1) to (3, 3) avoiding the blocked cell are 2. In example 2, the 4x4 grid has no blocked cells, allowing for 20 unique paths from (1, 1) to (4, 4).","solution":"def unique_paths_with_obstacles(n, m, blocked_cells): # Create a 2D dp table initialized to 0 dp = [[0] * (m + 1) for _ in range(n + 1)] # Start position dp[1][1] = 1 if (1, 1) not in blocked_cells else 0 # Fill the dp table for i in range(1, n + 1): for j in range(1, m + 1): if (i, j) != (1, 1) and (i, j) not in blocked_cells: if i > 1: dp[i][j] += dp[i-1][j] if j > 1: dp[i][j] += dp[i][j-1] return dp[n][m] def solve(t, test_cases): results = [] for case in test_cases: n, m, b, blocked_cells = case results.append(unique_paths_with_obstacles(n, m, blocked_cells)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) index += 1 b = int(lines[index]) index += 1 blocked_cells = set() for _ in range(b): r, c = map(int, lines[index].split()) blocked_cells.add((r, c)) index += 1 test_cases.append((n, m, b, blocked_cells)) return t, test_cases"},{"question":"In the land of Algoland, there is a famous festival where wizards show off their most impressive spells. One of the renowned wizards, Merlock, is known for his spell that can transform any sequence of numbers into a beautiful, ascending sequence. However, Merlock\'s spell only works if you can swap the values of two or more distinct pairs of indices in the given sequence. Given an array of n integers a_1, a_2, ..., a_n, your task is to determine if it is possible to apply Merlock\'s spell, i.e., swap the values of two or more distinct pairs of indices, such that the resulting array is sorted in strictly ascending order. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- - The first line contains an integer n (2 le n le 3 times 10^5), the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n(-10^9 le a_i le 10^9), representing the elements of the array. -----Output----- - Output \\"YES\\" if it is possible to sort the array strictly ascending by swapping values of two or more distinct pairs of indices. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 5 1 5 3 3 7 Sample Output 1: YES Sample Input 2: 4 4 3 2 1 Sample Output 2: NO Sample Input 3: 3 3 1 2 Sample Output 3: NO","solution":"def can_sort_by_swapping_pairs(n, arr): Determine if it is possible to sort the array strictly ascending by swapping values of two or more distinct pairs of indices. Args: n (int): Number of elements in the array. arr (list of int): The array of integers. Returns: str: \\"YES\\" if possible to sort by given swaps, otherwise \\"NO\\". # Check if the array is already sorted if all(arr[i] < arr[i+1] for i in range(n-1)): return \\"NO\\" # Check if there are duplicates if len(arr) != len(set(arr)): return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with developing a Sudoku puzzle solver. The Sudoku board is a 9x9 grid partially filled with numbers from 1 to 9. The objective is to complete the board such that each row, each column, and each of the nine 3x3 grids that compose the board (also called sub-grids or boxes) contains all the digits from 1 to 9. Implement a function `solve_sudoku(board)` that takes in the board, represented as a list of lists, where empty cells are represented by 0. Modify the board in-place to fill in the correct solutions. Constraints: - The given board will have a valid solution. - The board will always be a 9x9 grid. - You can assume that there will be only one unique solution. Example: Input: ``` board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` Output: Modified board with the solution filled in. (This changes the input board directly). Your function should implement backtracking to efficiently solve the puzzle.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle by filling in the empty cells (represented by 0). Modifies the board in-place. def is_valid(board, row, col, num): # Check if the number is not in the current row and column for i in range(9): if board[row][i] == num or board[i][col] == num: return False # Check if the number is not in the current 3x3 sub-grid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[start_row + i][start_col + j] == num: return False return True def solve(): for row in range(9): for col in range(9): if board[row][col] == 0: # Find an empty cell for num in range(1, 10): # Trial numbers from 1 to 9 if is_valid(board, row, col, num): board[row][col] = num # Place num in the cell if solve(): # Recur to place next numbers return True board[row][col] = 0 # Unmake the current cell for backtracking return False # If no number from 1-9 can be placed, return False return True # If all cells are correctly filled, return True solve()"},{"question":"# Task Given a list of integers, return a list that contains the integers in the original list, but all multiples of 3 have been removed. Write a function that processes the list accordingly. # Example For `lst = [2, 3, 4, 9, 10, 12, 15, 17, 19]`, the output should be `[2, 4, 10, 17, 19]`. For `lst = [3, 6, 9, 12, 15]`, the output should be `[]`. # Input/Output - `[input]` list `lst` A list of integers. - `[output]` list A list with all multiples of 3 removed.","solution":"def remove_multiples_of_3(lst): Returns a list with all multiples of 3 removed from the input list. Args: lst (list): A list of integers. Returns: list: A list of integers with multiples of 3 removed. return [x for x in lst if x % 3 != 0]"},{"question":"In a distant galaxy called Zoglandia, there are special creatures called \\"Numerons.\\" Numerons can transform numbers into elaborate strings based on specific rules. The superhero Numeron Toby needs your help to decipher these strings back into numbers as quickly as possible to save the galaxy from evil math monsters. The rules for the transformation are: - Numbers from 1 to 9 are transformed based on their English names: \\"one\\", \\"two\\", \\"three\\", ..., \\"nine\\". - Tens multiples are transformed to: \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\". - Numbers from 21 to 99 follow the pattern of the tens\' multiple + single digit name. For example: 23 rightarrow \\"twentythree\\", 47 rightarrow \\"fortyseven\\". - Hundreds are written as: \\"onehundred\\", \\"twohundred\\", ..., \\"ninehundred\\" combined with the two-digit rules mentioned above. For example: 405 rightarrow \\"fourhundredfive\\", 712 rightarrow \\"sevenhundredtwelve\\". Given a transformed string, decode it back into its integer form. -----Input----- The first line of input contains a single integer T (1 leq T leq 50), the number of test cases. The next T lines contain a single transformed string representing the number to decode. The input strings will always represent numbers less than 1000. -----Output----- For each transformed string, output the corresponding integer. -----Examples----- Sample Input 1: 3 twentythree fourhundredfive ninety Sample Output 1: 23 405 90 Sample Input 2: 2 sevenhundredeightyfour thirteen Sample Output 2: 784 13","solution":"def decipher_string(encoded_string): num_dict = { \\"one\\": 1, \\"two\\": 2, \\"three\\": 3, \\"four\\": 4, \\"five\\": 5, \\"six\\": 6, \\"seven\\": 7, \\"eight\\": 8, \\"nine\\": 9, \\"ten\\": 10, \\"eleven\\": 11, \\"twelve\\": 12, \\"thirteen\\": 13, \\"fourteen\\": 14, \\"fifteen\\": 15, \\"sixteen\\": 16, \\"seventeen\\": 17, \\"eighteen\\": 18, \\"nineteen\\": 19, \\"twenty\\": 20, \\"thirty\\": 30, \\"forty\\": 40, \\"fifty\\": 50, \\"sixty\\": 60, \\"seventy\\": 70, \\"eighty\\": 80, \\"ninety\\": 90 } def split_encoded_string(s): for key in sorted(num_dict.keys(), key=len, reverse=True): if s.startswith(key): return key, s[len(key):] return None, None def decode_string(s): result = 0 if \'hundred\' in s: parts = s.split(\'hundred\') hundreds = num_dict[parts[0]] * 100 result += hundreds s = parts[1] while s: chunk, remainder = split_encoded_string(s) if chunk: result += num_dict[chunk] s = remainder else: break return result return decode_string(encoded_string) def process_test_cases(test_cases): result = [] for case in test_cases: result.append(decipher_string(case)) return result"},{"question":"A team of developers is working on a project that requires them to process log files generated by a web server. Each log file contains multiple entries, with each entry representing the request made to the server. Each entry in the log file follows the format \\"IP_ADDRESS TIMESTAMP REQUEST_TYPE URL STATUS_CODE SIZE\\". For example: ``` 192.168.1.1 2021-08-01T12:34:56 GET /index.html 200 1024 10.0.0.5 2021-08-01T12:35:00 POST /submit 404 512 ``` Given a list of log entries, write a function that **calculates the number of GET and POST requests** made per IP address. The function should return a dictionary where the keys are the IP addresses and the values are dictionaries with the counts of GET and POST requests. If an IP address has no_requests, it should be included in the dicitonary with count as 0. **Function Signature:** ```python def count_requests_per_ip(log_entries: List[str]) -> Dict[str, Dict[str, int]]: ``` **Example:** ```python log_entries = [ \\"192.168.1.1 2021-08-01T12:34:56 GET /index.html 200 1024\\", \\"10.0.0.5 2021-08-01T12:35:00 POST /submit 404 512\\", \\"192.168.1.1 2021-08-01T12:36:10 GET /home 200 2048\\", \\"10.0.0.5 2021-08-01T12:37:22 GET /products 200 1024\\", \\"192.168.1.1 2021-08-01T12:38:19 POST /form 200 512\\", ] expected_output = { \\"192.168.1.1\\": {\\"GET\\": 2, \\"POST\\": 1}, \\"10.0.0.5\\": {\\"GET\\": 1, \\"POST\\": 1}, } assert count_requests_per_ip(log_entries) == expected_output ``` # Constraints: - Each log entry follows the given format. - The function should be case sensitive (all request types are in uppercase). - Handle any number of log entries (the list can be empty).","solution":"from typing import List, Dict def count_requests_per_ip(log_entries: List[str]) -> Dict[str, Dict[str, int]]: result = {} for entry in log_entries: parts = entry.split() ip_address = parts[0] request_type = parts[2] if ip_address not in result: result[ip_address] = {\\"GET\\": 0, \\"POST\\": 0} if request_type in [\\"GET\\", \\"POST\\"]: result[ip_address][request_type] += 1 return result"},{"question":"In a magical forest, there are n types of unique plants arranged in a line. Each type of plant has distinct magical properties, identified by a unique integer ranging from 1 to n. Some plants can trigger magical reactions when grown next to each other. Specifically, each plant triggers precisely one reaction with the plant immediately to its left. Given an array arr consisting of the magical properties of the plants, your task is to determine the maximum number of unique plants that can be selected such that no two selected plants trigger a magical reaction. A magical reaction occurs between two plants if their difference (subtraction) is exactly 1. Function Description: Complete the function `maxNonReactingPlants` in the editor below. It should return an integer representing the maximum number of unique plants that can be selected without triggering any reaction. `maxNonReactingPlants` has the following parameter(s): - `arr`: an array of integers representing the magical properties of the plants. Input Format: The first line contains an integer n, the length of the array. The second line contains n space-separated integers arr[i] (1 leq arr[i] leq n), representing the magical properties of the plants. Constraints: 1 leq n leq 10^5 Output Format: Return an integer representing the maximum number of unique plants that can be selected without triggering any reaction. Sample Input 0: 6 4 3 5 2 1 6 Sample Output 0: 3 Explanation 0: One possible way to select the maximum number of plants is by selecting plants with magical properties 1, 3, 5, or 2, 4, 6. Sample Input 1: 5 3 2 1 4 5 Sample Output 1: 3 Explanation 1: One possible way to select the maximum number of plants is by selecting plants with magical properties 1, 3, 5. Sample Input 2: 7 7 1 2 5 4 6 3 Sample Output 2: 4 Explanation 2: One possible way to select the maximum number of plants is by selecting plants with magical properties 1, 3, 5, 7.","solution":"def maxNonReactingPlants(arr): Returns the maximum number of unique plants that can be selected without triggering any reaction. :param arr: List[int] :return: int # Sort the array to process consecutive elements arr.sort() # Use a set to store selected plants selected_plants = set() for plant in arr: # Check if the plant is not causing a reaction with previously selected plant if (plant - 1) not in selected_plants: selected_plants.add(plant) return len(selected_plants)"},{"question":"You are given a row of seats represented by an array where `seats[i] = 1` represents a person sitting in the `i-th` seat, and `seats[i] = 0` represents that the `i-th` seat is empty. Your task is to determine the maximum distance to the closest person from any empty seat. For example, given `seats = [1, 0, 0, 0, 1, 0, 1]`, you can sit in the `2-nd` seat (0-indexed) to be 2 seats away from the nearest person. If `seats = [1, 0, 0, 0]`, you can sit in the `3-rd` seat to be 3 seats away from the nearest person. Write a function `maxDistance(seats: List[int]) -> int` that accepts an array of integers representing the seating arrangement and returns the maximum distance to the closest person from any empty seat. # Input - The input is an array of integers, `seats`, where `seats[i]` is either `0` or `1`. - `1 ≤ len(seats) ≤ 10^4` - There is at least one `0` in `seats`. # Output - The output is a single integer, representing the maximum distance to the closest person from any empty seat. # Example **Input:** ``` seats = [1, 0, 0, 0, 1, 0, 1] ``` **Output:** ``` 2 ``` **Input:** ``` seats = [1, 0, 0, 0] ``` **Output:** ``` 3 ``` # Constraints - You may assume that there is at least one empty seat (`0`) and at least one person sitting (`1`).","solution":"def maxDistance(seats): Function to find the maximum distance to the closest person from any empty seat max_dist = 0 prev_person = -1 n = len(seats) for i in range(n): if seats[i] == 1: if prev_person == -1: max_dist = i else: max_dist = max(max_dist, (i - prev_person) // 2) prev_person = i max_dist = max(max_dist, n - 1 - prev_person) return max_dist"},{"question":"Given an array of integers, rearrange it such that all the positive numbers are on the left side and all the negative numbers are on the right side. Additionally, the positive numbers should be sorted in non-decreasing order and the negative numbers should be sorted in non-increasing order. Return the rearranged array. Example 1: Input: arr = [3, -1, -4, 2, 0, -2, 5] Output: [0, 2, 3, 5, -1, -2, -4] Explanation: Positive numbers [3, 2, 0, 5] sorted as [0, 2, 3, 5] and negative numbers [-1, -4, -2] sorted as [-1, -2, -4]. Example 2: Input: arr = [-5, -3, -1, 1, 3, 5] Output: [1, 3, 5, -1, -3, -5] Explanation: Positive numbers [1, 3, 5] sorted as [1, 3, 5] and negative numbers [-5, -3, -1] sorted as [-1, -3, -5]. Your Task: You don\'t need to read input or print anything. Complete the function rearrangeArray() which takes an array of integers arr as input parameter and returns the rearranged array. Expected Time Complexity: O(n log n). Expected Auxiliary Space: O(n). Constraints: 1 <= Length of arr <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def rearrangeArray(arr): Rearranges the array such that all positive numbers are on the left, all negative numbers are on the right. Positive numbers sorted in non-decreasing order, negative numbers sorted in non-increasing order. Parameters: arr (list of int): The input array of integers. Returns: list of int: The rearranged and sorted array. positives = sorted([x for x in arr if x >= 0]) negatives = sorted([x for x in arr if x < 0], reverse=True) return positives + negatives"},{"question":"In a certain town, the public transportation system consists only of buses. Each bus travels a specific route and all routes are linear (straight lines). Buses start their travel at bus stops and only move to the next bus stop in their route until they reach their final destination. At each bus stop, a unique event occurs based on the bus number and the sequence of bus stops on that route. Given a natural number n, the town council assigns buses and designates n different routes (where n geq 2). These routes can be represented as sequences of bus stops each bus will pass through: B_{i,j} = i times (j+1) for bus i and bus stop j, where i is the bus number and j is the index of the bus stop (starting from 0). Now, they want to ensure safety and predictability in the system and thus need to calculate the minimum bus stop number that is reachable by at least two different buses for each bus number i in the range 1 to n. ------ Input ------ The first line contains an integer T, the number of test cases. Descriptions of test cases follow. The only line of each test case contains a single integer n. ------ Output ------ For each test case, output n lines. Each line should contain the minimum bus stop number that is reachable by at least two different buses for each bus number i in the range 1 to n. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ n ≤ 10^{5} ------ Subtasks ------ Subtask #1 (20 points): T ≤ 10^{2},n ≤ 10^{2} Subtask #2 (80 points): Original Constraints ----- Sample Input 1 ------ 1 3 ----- Sample Output 1 ------ 2 4 6 ----- Explanation 1 ------ For i=1, the bus stop sequence is 1, 2, 3, 4, ldots (so the minimum common stop is 2). For i=2, the bus stop sequence is 2, 4, 6, 8, ldots (so the minimum common stop is 4). For i=3, the bus stop sequence is 3, 6, 9, 12, ldots (so the minimum common stop is 6).","solution":"def find_min_common_stops(test_cases, n_values): results = [] for n in n_values: result = [] for i in range(1, n + 1): result.append(i * 2) results.append(result) return results"},{"question":"You are given a list of n intervals on the number line. Your goal is to find the length of the number line that is covered by at least one interval. You do not need to count the overlap multiple times. Input The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of intervals. Each of the next n lines contains two integers l and r (-10^9 ≤ l < r ≤ 10^9) — the endpoints of the i-th interval. Output Print the length of the number line covered by at least one interval. Examples Input 3 1 4 2 6 8 10 Output 7 Input 4 -5 0 1 4 -3 2 3 8 Output 10 Note In the first example, the intervals [1, 4] and [2, 6] overlap, so their union is [1, 6]. The interval [8, 10] does not overlap with any other interval, so the total length covered is 5 (from 1 to 6) + 2 (from 8 to 10) = 7. In the second example, the intervals cover from -5 to 8 with some overlap in between, so the total length is 10 including all sections from -5 to 8.","solution":"def calculate_covered_length(intervals): Given a list of intervals, calculates the total length of the number line covered by at least one interval. Args: intervals (list of tuples): List containing tuples of interval start and end points (l, r) Returns: int: Total length of the number line covered by at least one interval if not intervals: return 0 # Sort intervals by starting point intervals.sort() # Start with the first interval current_start, current_end = intervals[0] total_length = 0 for start, end in intervals[1:]: if start > current_end: # No overlap total_length += current_end - current_start current_start, current_end = start, end else: # Overlap, extend the current interval current_end = max(current_end, end) # Add the final interval total_length += current_end - current_start return total_length"},{"question":"Given an array of N integers, write a program to find the length of the longest contiguous subarray that forms a palindrome. Example 1: Input: N=7 arr[] = {2, 3, 4, 3, 2, 2, 3} Output: 5 Explanation: The longest palindromic subarray is {2, 3, 4, 3, 2}. Example 2: Input: N=5 arr[] = {9, 2, 4, 2, 8} Output: 3 Explanation: The longest palindromic subarray is {2, 4, 2}. Your Task: Since this is a function problem, you don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function longestPalindromeSubarray() that takes array arr and integer N as parameters and returns the length of the longest palindromic subarray. Expected Time Complexity: O(N^2). Expected Auxiliary Space: O(1). Constraints: 2 ≤ N ≤ 5 × 10^3","solution":"def longestPalindromeSubarray(arr, N): Returns the length of the longest contiguous subarray that forms a palindrome. def is_palindrome(array): return array == array[::-1] max_len = 1 for start in range(N): for end in range(start + 1, N + 1): if is_palindrome(arr[start:end]): max_len = max(max_len, end - start) return max_len"},{"question":"Cman the adventurer is exploring a magical forest. Deep inside the forest, he discovers an ancient tree with mystical fruits. The tree has N branches, and each branch has a certain number of fruits F[i]. Cman wants to collect fruits, but he has a unique condition. Each time he picks fruits from a branch, he must pick all the fruits from that branch. Being greedy as he is, he also wants his total collection of fruits to be exactly S. If there are multiple ways to achieve exactly S fruits, he will use any of those ways. Help Cman determine the total number of ways he can pick fruits from the tree such that the total number of fruits he collects is exactly S. As this problem might have very large outputs, return the number of ways modulo 10^9 + 7. Input: First line of the input contains an integer T representing the number of test cases. For each test case: - First line contains two space-separated integers N and S representing the number of branches and the total number of fruits Cman wants to collect respectively. - Second line contains N space-separated integers F[i] representing the number of fruits on each branch. Output: For each test case, output a single integer representing the number of ways to collect exactly S fruits, modulo 10^9 + 7. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ F[i] ≤ 400 1 ≤ S ≤ 400000 Sample Input: 1 5 8 1 2 3 4 5 Sample Output: 3 Explanation of the sample: There are three ways to collect 8 fruits: 1. Pick fruits from branches 1, 2, and 5: (1 + 2 + 5). 2. Pick fruits from branches 2 and 4: (2 + 4). 3. Pick fruits from branches 3 and 5: (3 + 5).","solution":"def count_ways_to_collect_fruits(T, cases): MOD = 10**9 + 7 results = [] for case in cases: N, S, F = case dp = [0] * (S + 1) dp[0] = 1 for fruits in F: for i in range(S, fruits - 1, -1): dp[i] = (dp[i] + dp[i - fruits]) % MOD results.append(dp[S]) return results # Sample Usage if __name__ == \\"__main__\\": T = 1 cases = [(5, 8, [1, 2, 3, 4, 5])] print(count_ways_to_collect_fruits(T, cases)) # Output should be [3]"},{"question":"Ada is organizing a file system on her new computer. She wants to create a hierarchical folder structure. You are given an integer array `input` where `input[i]` represents the parent folder of the `i+1`-th folder. Folder 1 is the root folder and has no parent, so for any other folder `i+1`, `input[i]` will be an integer representing its parent folder\'s index. Ada needs your help to determine the depth of each folder in the hierarchy. The depth of a folder is defined as the number of edges in the path from the root folder to this folder. - The root folder (folder 1) has a depth of 0. - Any other folder `i+1` has a depth that is one more than the depth of its parent folder. -----Input----- - The first line contains an integer `n` (2 le n leq 10^5) — the number of folders. - The second line contains `n-1` integers, the `i`-th of which is `input[i]` (1 leq input[i] leq i-1), specifying the parent folder of the `i+1`-th folder. -----Output----- - Output `n` integers: the depths of folders 1 through `n` in order. -----Examples----- Input 5 1 1 2 2 Output 0 1 1 2 2 Input 3 1 2 Output 0 1 2 -----Note----- In the first example: - Folder 1 is the root folder, so it has depth 0. - Folders 2 and 3 are both children of folder 1, so they each have depth 1. - Folders 4 and 5 are both children of folder 2, so they each have depth 2. In the second example: - Folder 1 is the root folder, so it has depth 0. - Folder 2 is a child of folder 1, so it has depth 1. - Folder 3 is a child of folder 2, so it has depth 2.","solution":"def calculate_folder_depths(n, parent_folders): Calculate the depth of each folder in a hierarchical file system. Parameters: n (int): The number of folders. parent_folders (list): A list of integers indicating the parent folder for folders 2 through n. Returns: list: A list of integers representing the depth of each folder from 1 to n. depths = [0] * n # Initialize the depth of each folder for i in range(1, n): depths[i] = depths[parent_folders[i - 1] - 1] + 1 return depths"},{"question":"Given an integer array representing the heights of buildings where the width of each building is 1, find the maximum area of water that can be trapped between the buildings after raining. Input: First line consists of T test cases. First line of each test case contains an integer N, the number of buildings. Second line contains N integers representing the height of each building. Output: For each test case, output a single line, the maximum trapped water. Constraints: 1<=T<=100 2<=N<=100 0<=Height of building<=1000 Example: Input: 2 6 0 1 0 2 1 0 4 1 0 2 1 Output: 1 1","solution":"def max_trapped_water(buildings): n = len(buildings) if n < 2: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = buildings[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], buildings[i]) right_max[n - 1] = buildings[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], buildings[i]) trapped_water = 0 for i in range(n): trapped_water += max(0, min(left_max[i], right_max[i]) - buildings[i]) return trapped_water def solve(test_cases): results = [] for test_case in test_cases: n = test_case[0] buildings = test_case[1] results.append(max_trapped_water(buildings)) return results"},{"question":"Given a sequence of n integers, you can perform a special operation any number of times (including zero): select any contiguous subsequence of length exactly k, reverse it, and put it back into the sequence. Determine if it is possible to sort the entire sequence in non-decreasing order using the special operation. Input: The first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of elements in the sequence and the length of the subsequence to reverse respectively. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Output: Output \\"YES\\" (without quotes) if it is possible to sort the sequence in non-decreasing order using the special operation, or \\"NO\\" otherwise. Examples Input: 5 3 3 1 2 5 4 Output: YES Input: 4 2 4 3 2 1 Output: NO Note: In the first example, you can reverse the subsequence [3, 1, 2] to get [2, 1, 3, 5, 4]. Then, reverse the subsequence [1, 3, 5] to get [2, 3, 1, 5, 4], and finally reverse the subsequence [2, 3, 1] to get [1, 2, 3, 5, 4], and the sequence is sorted. In the second example, no matter how we reverse any subsequence of length 2, we cannot achieve a sorted sequence from [4, 3, 2, 1].","solution":"def can_sort_sequence(n, k, sequence): Determines if it is possible to sort the sequence using the special operation. sorted_sequence = sorted(sequence) if k == n: return \\"YES\\" elif k % 2 == 1: return \\"YES\\" else: even_positions = sequence[::2] odd_positions = sequence[1::2] even_sort = sorted_sequence[::2] odd_sort = sorted_sequence[1::2] if even_positions == even_sort and odd_positions == odd_sort: return \\"YES\\" else: return \\"NO\\""},{"question":"Given two arrays `a` and `b` of length `n` each, determine if you can make `a` equal to `b` by performing operations of exactly `k` elements swap. A swap operation involves choosing two indices `i` and `j` (1 ≤ i, j ≤ n) and swapping `a[i]` with `a[j]`. You need to check if it\'s possible to perform exactly `k` such swaps to transform array `a` into array `b`. Input The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ 2 * 10^5), the length of the arrays and the number of swaps respectively. The second line contains `n` integers, the elements of array `a`. The third line contains `n` integers, the elements of array `b`. Output Print \\"YES\\" if it is possible to transform array `a` into array `b` using exactly `k` swaps, otherwise print \\"NO\\". Example Input 4 3 1 3 2 4 1 2 3 4 Output YES Input 4 2 1 3 2 4 1 2 3 4 Output NO Input 5 5 1 5 2 4 3 5 4 3 2 1 Output NO Note In the first example, you can achieve the transformation in exactly 3 swaps: Swap elements at indices (2, 3) -> [1, 2, 3, 4] In the second example, it is impossible to achieve the transformation in exactly 2 swaps. In the third example, achieving the transformation in 5 swaps would not be possible. Even though the elements are the same, the permutation cannot be achieved in exactly 5 swaps.","solution":"def can_transform_with_k_swaps(n, k, a, b): Determines if array `a` can be transformed to array `b` with exactly `k` swaps. Parameters: n (int): Length of the arrays k (int): Number of swaps a (list): Initial array b (list): Target array Returns: str: \\"YES\\" if transformation is possible, \\"NO\\" otherwise if sorted(a) != sorted(b): return \\"NO\\" num_diff = sum(1 for i in range(n) if a[i] != b[i]) swaps_needed = num_diff // 2 if swaps_needed <= k and (k - swaps_needed) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"In a grid-based game, the player navigates from a starting point to a destination point. The grid is represented as an m times n matrix, with some cells blocked due to obstacles. The objective is to determine if there exists a path from the start to the destination that avoids all obstacles. Write a function `isPathExists` that determines if such a path exists. The function should return `true` if there is a valid path and `false` otherwise. The player can move in four directions: up, down, left, and right. The grid cells are represented as follows: - 0: an open cell - 1: an obstacle Function Signature ```python def isPathExists(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> bool: pass ``` # Input - A 2D list `grid` of integers representing the game map. - A tuple `start` representing the starting cell coordinates. - A tuple `end` representing the destination cell coordinates. # Output - A boolean value indicating whether a path from the start to the end exists, avoiding all obstacles. # Constraints - 1 leq m, n leq 100 - `grid[i][j]` is either 0 or 1 (1 indicates obstacles and 0 indicates open cells). - The `start` and `end` points are always valid and within the bounds of the grid. - The `start` and `end` points are always open cells. # Example Input ```python grid = [ [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1, 1], ] start = (0, 0) end = (2, 3) ``` Output ``` True ``` Explanation A possible path from `(0, 0)` to `(2, 3)` is: - Start at `(0, 0)` - Move down to `(1, 1)` - Move down to `(2, 1)` - Move right to `(2, 2)` - Move right to `(2, 3)` Hence, the output is `True`.","solution":"from typing import List, Tuple def isPathExists(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> bool: m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n and not visited[x][y] and grid[x][y] == 0 def dfs(x, y): if not is_valid(x, y): return False if (x, y) == end: return True visited[x][y] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: if dfs(x + dx, y + dy): return True return False return dfs(start[0], start[1])"},{"question":"David, a computer science student, loves competitive programming and solving puzzles. One day, he came across a problem involving arrays. He needs your help to solve this challenging problem, which involves finding a subarray with the maximum possible sum under certain constraints. Given an array of integers, David wants to find the maximum sum of any subarray of length exactly K. A subarray is defined as a contiguous part of an array. Write a program to help David determine the maximum sum of any subarray of length exactly K. If K is greater than the length of the array, the program should return -1. Input The input consists of multiple datasets. Each dataset is given in the following format: > N K > A1 A2 ... AN The first line of each dataset contains two integers N (1 ≤ N ≤ 100,000), representing the array\'s length, and K (1 ≤ K ≤ 100,000), the length of the subarray to be considered. The second line contains N integers A1, A2, ..., AN (-10,000 ≤ Ai ≤ 10,000), representing the elements of the array. Output For each dataset, output the maximum sum of any subarray of length exactly K. If K is greater than the length of the array, output -1 instead of the sum. The output for each dataset should be printed on a new line without extra blanks or line breaks. Sample Input 5 3 1 2 3 4 5 8 4 -1 -2 -3 -4 -5 -6 -7 -8 5 6 1 2 3 4 5 6 6 1 2 3 4 5 6 Sample Output 9 -10 -1 21 Explanation of the Sample Output 1. For the first dataset, the subarray with the maximum sum of length 3 is [3, 4, 5], which sums to 9. 2. For the second dataset, the subarray with the maximum sum of length 4 is [-1, -2, -3, -4], which sums to -10. 3. For the third dataset, since K (6) is greater than the length of the array (5), the output is -1. 4. For the fourth dataset, the entire array is a subarray of length 6, which sums to 21.","solution":"def max_subarray_sum(n, k, arr): Returns the maximum sum of any subarray of length exactly K. If K is greater than N, returns -1. Parameters: n (int): Length of the array k (int): Length of the subarray arr (list of int): Array of integers Returns: int: Maximum sum of any subarray of length K or -1 if K > N if k > n: return -1 # Find initial window sum max_sum = sum(arr[:k]) current_window_sum = max_sum # Slide the window from start to end of the array for i in range(n - k): current_window_sum = current_window_sum - arr[i] + arr[i + k] if current_window_sum > max_sum: max_sum = current_window_sum return max_sum"},{"question":"A small village is organizing a community fun run and needs to design a route that covers all the main attractions exactly once. The organizers have a list of attractions represented as nodes and direct paths between them. They need your help to find if it\'s possible to design a route that starts and ends at the village hall, covering each attraction exactly once. If such a route (a Hamiltonian cycle) exists, print \\"YES\\", otherwise print \\"NO\\". -----Input:----- - The first line contains two integers: N (the number of attractions) and M (the number of direct paths). - The next M lines each contain two integers a and b, indicating a direct path between attractions a and b. -----Output:----- Print \\"YES\\" if a Hamiltonian cycle exists, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 15 - 0 ≤ M ≤ N*(N-1)/2 - a, b are 1-indexed nodes representing attractions. -----Sample Input:----- 4 5 1 2 2 3 3 4 4 1 2 4 -----Sample Output:----- YES -----EXPLANATION:----- It is possible to form the cycle 1 -> 2 -> 3 -> 4 -> 1, which covers all attractions exactly once and forms a Hamiltonian cycle.","solution":"from itertools import permutations def has_hamiltonian_cycle(N, M, edges): # Create adjacency matrix for the graph adj_matrix = [[0] * N for _ in range(N)] for (a, b) in edges: adj_matrix[a-1][b-1] = 1 adj_matrix[b-1][a-1] = 1 # Check all permutations for a Hamiltonian cycle nodes = range(N) for perm in permutations(nodes): is_cycle = True for i in range(N): if not adj_matrix[perm[i]][perm[(i + 1) % N]]: is_cycle = False break if is_cycle: return \\"YES\\" return \\"NO\\""},{"question":"Write a function called `find_missing_number` which takes a list of consecutive integers starting from 1 to n (with one number missing) and returns the missing integer.","solution":"def find_missing_number(arr): Returns the missing number in the list of consecutive integers starting from 1 to n. n = len(arr) + 1 total_sum = n * (n + 1) // 2 arr_sum = sum(arr) return total_sum - arr_sum"},{"question":"You are given a string consisting of lowercase alphabets and you need to find and print the maximum length of a substring that contains all unique characters. -----Input----- A single line containing a string s (1 ≤ |s| ≤ 10^6), where |s| is the length of the string s. -----Output----- Print a single integer representing the maximum length of a substring with unique characters. -----Examples----- Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Input abcdef Output 6 Input aab Output 2","solution":"def max_length_unique_substring(s): Returns the maximum length of a substring that contains all unique characters. start = 0 max_length = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"The city of Algorithmsville is famous for its intricate street patterns and elaborate instruction manuals for tourists. Each street in Algorithmsville represents an edge in a directed graph, and each tourist manual specifies a sequence of streets that forms an Eulerian path - a path that visits every edge exactly once. The mayor of Algorithmsville, fascinated by odd cycles, decides to challenge visitors with a new problem: finding whether any vertex in the graph has an odd-length cycle starting and ending at the same vertex. -----Input----- The first line of input contains n (1 leq n leq 100), the number of vertices, and m (0 leq m leq 10000), the number of directed edges in the graph. The following m lines each contain two integers u and v (1 leq u, v leq n), representing a directed edge from vertex u to vertex v. -----Output----- If there exists any vertex in the graph that is part of an odd-length cycle, output \\"YES\\". Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 4 4 1 2 2 3 3 4 4 2 Sample Output 1: YES Sample Input 2: 3 2 1 2 2 3 Sample Output 2: NO","solution":"def has_odd_length_cycle(n, m, edges): from collections import defaultdict, deque adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) def bfs(start): queue = deque([(start, 0)]) visited = {start: 0} while queue: node, depth = queue.popleft() for neighbor in adj_list[node]: if neighbor not in visited: visited[neighbor] = depth + 1 queue.append((neighbor, depth + 1)) elif (depth + 1 - visited[neighbor]) % 2 == 1: return \\"YES\\" return \\"NO\\" for i in range(1, n + 1): if bfs(i) == \\"YES\\": return \\"YES\\" return \\"NO\\""},{"question":"Victor has a list of N positive integers. He wants to find a subarray (a contiguous part of the list) such that the sum of the subarray is exactly S. Help Victor determine how many such subarrays exist. Constraints * All values in input are integers. * 1 leq N leq 50 * 1 leq list elements leq 100 * 1 leq S leq 2500 Input Input is given from Standard Input in the following format: N S a_1 a_2 ... a_N Output Print the number of subarrays whose sum is exactly S. Examples Input 5 8 1 3 2 5 1 Output 1 Input 6 12 2 4 6 2 8 1 Output 2","solution":"def count_subarrays_with_sum(nums, target_sum): Returns the number of subarrays whose sum is exactly target_sum. Parameters: nums (list of int): List of positive integers. target_sum (int): The desired sum of subarrays. Returns: int: The count of subarrays with sum exactly target_sum. count = 0 n = len(nums) for start in range(n): current_sum = 0 for end in range(start, n): current_sum += nums[end] if current_sum == target_sum: count += 1 return count def parse_input(input_string): Parses the input string and returns the necessary parameters. Parameters: input_string (str): The input string containing N, S, and the list of integers. Returns: tuple: Contains the list of integers (nums) and the target sum (S). lines = input_string.strip().split(\'n\') first_line = lines[0].split() N = int(first_line[0]) S = int(first_line[1]) nums = list(map(int, lines[1].split())) return nums, S"},{"question":"Mando is participating in a droid assembling contest. His task is to assemble droids with unique serial numbers, and he needs your help to ensure that no two droids have the same serial number. Mando has a list of serial numbers, and he needs to identify the first duplicate serial number and the position of its first occurrence in the list. Write a program that takes a list of serial numbers and outputs the first serial number that appears more than once, along with the position (1-based index) of its first occurrence. If there are no duplicates, the program should output \\"No duplicates\\". A serial number is considered a duplicate if it appears more than once in the list consecutively or non-consecutively. -----Input----- The first line of input contains an integer N, the number of serial numbers, 1 le N le 10^4. The second line contains N serial numbers, where each serial number is an alphanumeric string of length 1 to 20. -----Output----- Output the first duplicate serial number and its first occurrence position. If there are no duplicates, output \\"No duplicates\\". -----Examples----- Sample Input: 5 A1 B2 C3 A1 D4 Sample Output: A1 1 Sample Input: 4 R2D2 BB8 C3PO C3PO Sample Output: C3PO 3 Sample Input: 3 X1 Y2 Z3 Sample Output: No duplicates","solution":"def find_first_duplicate(serial_numbers): Identifies the first duplicate serial number along with its first occurrence position. Args: serial_numbers (list): List of serial numbers. Returns: tuple: A tuple containing the first duplicate serial number and its 1-based position of the first occurrence. If no duplicate found, return \\"No duplicates\\" seen = {} for index, serial in enumerate(serial_numbers): if serial in seen: return (serial, seen[serial] + 1) seen[serial] = index return \\"No duplicates\\""},{"question":"You are given an array a consisting of n distinct elements. Each element in the array is a non-negative integer, and two integers, m and k. The task is to determine if there is a subarray of length exactly m in array a, such that the bitwise AND of all elements in this subarray equals k. Input - The first line contains three integers n, m, and k (1 ≤ n ≤ 10^5, 1 ≤ m ≤ n, 0 ≤ k ≤ 10^9). - The second line contains n distinct integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9). Output Print \\"YES\\" if there is a subarray of length exactly m such that the bitwise AND of its elements equals k. Otherwise, print \\"NO\\". Examples Input 5 2 0 3 5 1 7 8 Output YES Input 4 3 7 4 8 2 1 Output NO Note In the first example, a subarray [1, 0] with length 2 has a bitwise AND of 0. Therefore, the output is \\"YES\\". In the second example, there is no subarray of length 3 such that their bitwise AND is 7. Therefore, the output is \\"NO\\".","solution":"def find_subarray_with_and(a, m, k): Determines if there is a subarray of length exactly m in array a, such that the bitwise AND of all elements in this subarray equals k. :param a: List[int], input array a of distinct non-negative integers :param m: int, the length of the subarray to search for :param k: int, the target bitwise AND value :return: str, \\"YES\\" if there is such a subarray, \\"NO\\" otherwise n = len(a) # Iterate over possible starting indices of subarrays of length m for i in range(n - m + 1): # Calculate the bitwise AND of the subarray a[i:i+m] subarray_and = a[i] for j in range(1, m): subarray_and &= a[i + j] if subarray_and < k: # optimization: once and value gets lower than k, break break if subarray_and == k: return \\"YES\\" return \\"NO\\""},{"question":"A company is organizing a coding marathon where N participants (1 ≤ N ≤ 1000) are competing. Each participant is assigned a unique ID (a number between 1 and N). After the marathon, the top M participants (1 ≤ M ≤ N) are recognized. The recognition list, however, is not in sorted order. You are tasked with determining the rank of a given participant P based on their ID in the recognition list. Your task is to write a function that determines the rank of the participant with ID P in the recognition list. The recognition list is unranked and can have IDs in any order. -----Input----- The first line contains two space-separated integers N and M, where N is the total number of participants and M is the number of participants recognized after the marathon. The second line contains M space-separated integers, representing the IDs of the recognized participants. The third line contains a single integer P, the ID of the participant whose rank you are to determine. -----Output----- Print the rank of participant P in the recognition list. The rank is 1-based, i.e., the first participant in the recognition list has rank 1, the second has rank 2, and so on. If the participant ID P is not in the recognition list, output \\"Not Recognized\\". -----Examples----- Input 5 3 5 3 1 3 Output 2 Input 6 4 2 4 6 1 5 Output Not Recognized -----Note----- In the first example, participant 3 is the second participant in the recognition list, so his rank is 2. In the second example, participant 5 is not in the recognition list, so the output is \\"Not Recognized\\".","solution":"def find_rank(N, M, recognized_list, P): Determines the rank of the participant with ID P in the recognition list. Parameters: N (int): Total number of participants. M (int): Number of participants recognized. recognized_list (list of int): List of IDs of recognized participants. P (int): ID of the participant whose rank is to be determined. Returns: int/str: The rank of participant P or \\"Not Recognized\\" if P is not in the recognition list. try: # Find the index of participant P and add 1 to get the 1-based rank rank = recognized_list.index(P) + 1 return rank except ValueError: # If participant P is not found in the list return \\"Not Recognized\\""},{"question":"A concert manager needs to allocate seats for an auditorium. The auditorium has rows of seats and each row can have different number of seats. The manager needs to assign seats to a list of attendees such that each person sits in a new seat which increases their happiness. Each seat has a happiness value indicating how much happiness a person receives by sitting there. The manager wants to maximize the total happiness value for all the attendees combined. Write a program to help the concert manager assign seats. Each attendee should get exactly one seat, and seats should be assigned in a way that maximizes the total happiness value. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50), where n is the number of rows and m is the number attendees. The next n lines represent the seat happiness values for each row. Each line starts with an integer ki (1 ≤ ki ≤ 50) representing the number of seats in the i-th row, followed by ki integers where each integer represents the happiness value of the seats in that row. Output Output a single integer which represents the maximum total happiness value that can be achieved by assigning seats to the attendees. Examples Input 3 3 2 10 6 3 8 5 3 1 7 Output 25 Input 2 2 3 1 2 3 4 4 5 6 7 Output 13 Note In the first sample, the optimal way is to seat attendees at the seat with happiness value of 10 from the first row, at the seat with happiness value of 8 from the second row and at the seat with happiness value of 7 from the third row. In the second sample, the optimal way is to seat attendees at the seat with happiness value of 7 from the second row, and at the seat with the happiness value of 6 from the second row.","solution":"def maximize_happiness(n, m, rows): Function to maximize the total happiness value by assigning seats to attendees. :param n: Number of rows in the auditorium :param m: Number of attendees :param rows: List of lists, where each sublist contains the happiness values of seats in a row :return: Maximum total happiness value achievable all_seats = [] for row in rows: for seat in row: all_seats.append(seat) # Sort all the seats happiness values in descending order all_seats.sort(reverse=True) # Sum up the top \'m\' largest happiness values return sum(all_seats[:m]) # Example Usage if __name__ == \\"__main__\\": n, m = 3, 3 rows = [ [10, 6], [8, 5, 3], [7] ] print(maximize_happiness(n, m, rows)) # Output: 25"},{"question":"Chef has recently taken an interest in computational geometry, particularly in the topic of convex hulls. Chef has a set of points (x, y) on a 2D plane and he wants to construct the convex hull out of these points. The convex hull is the smallest convex polygon that can enclose all of the given points. Chef has asked for your help to determine the perimeter of this convex hull. -----Input----- Input begins with a single integer T, denoting the number of test cases. For each test case, the first line contains an integer N, the number of points in the given set. The following N lines each contain two integers x and y, representing the coordinates of the points. You can assume that 1 <= T <= 100, 3 <= N <= 10^3, and the coordinates are within the range -10^4 <= x, y <= 10^4. -----Output----- For each test case, output a single line containing the perimeter of the convex hull formed by the given points. Print the result rounded to two decimal places. -----Example----- Input: 2 4 0 0 0 1 1 0 1 1 3 2 3 4 5 6 7 Output: 4.00 11.31 Description: In the first case, the points (0,0), (0,1), (1,0), and (1,1) form a square, and the convex hull will be the perimeter of the square which is 4.00 units. In the second case, the points (2,3), (4,5), and (6,7) form a triangle, and the perimeter of that triangle is approximately 11.31 units.","solution":"import math from functools import cmp_to_key def distance(p1, p2): return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) def cross_product(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) def convex_hull(points): points = sorted(points) lower = [] for p in points: while len(lower) >= 2 and cross_product(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) upper = [] for p in reversed(points): while len(upper) >= 2 and cross_product(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) return lower[:-1] + upper[:-1] def perimeter_of_convex_hull(points): hull = convex_hull(points) perimeter = 0.0 for i in range(len(hull)): perimeter += distance(hull[i], hull[(i+1) % len(hull)]) return perimeter def format_output(perimeter): return f\\"{perimeter:.2f}\\" def solve(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] points = test_cases[i][1] perimeter = perimeter_of_convex_hull(points) results.append(format_output(perimeter)) return results # Example input/output runner def main(): import sys input = sys.stdin.read data = input().strip().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 points = [] for _ in range(N): x = int(data[idx]) y = int(data[idx+1]) points.append((x, y)) idx += 2 test_cases.append((N, points)) results = solve(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string s consisting of characters \'0\' and \'1\'. A substring is called \\"beautiful\\" if it contains equal number of \'0\'s and \'1\'s and is of maximum possible length. Your task is to determine the length of the longest \\"beautiful\\" substring in s. If there is no \\"beautiful\\" substring, return 0. -----Input----- The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single string s. -----Output----- For each test case, output a single integer corresponding to the length of the longest \\"beautiful\\" substring in s, or 0 if none exists. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ |s| ≤ 10^5 - All characters in s are either \'0\' or \'1\' -----Example----- Input 3 110100110 1001 11111 Output 8 4 0 -----Explanation----- In the first test case, the longest beautiful substring is \\"11010011\\" with length 8. In the second test case, the longest beautiful substring is \\"1001\\" with length 4. In the third test case, there is no beautiful substring.","solution":"def longest_beautiful_substring(s): Returns the length of the longest \\"beautiful\\" substring in s. A \\"beautiful\\" substring is one that contains an equal number of \'0\'s and \'1\'s. # Track the balance of 0\'s and 1\'s count = 0 max_length = 0 balance_dict = {0: -1} # Initializing balance dict with 0 balance at index -1 for i in range(len(s)): if s[i] == \'0\': count -= 1 else: count += 1 if count in balance_dict: max_length = max(max_length, i - balance_dict[count]) else: balance_dict[count] = i return max_length def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. results = [] for s in test_cases: results.append(longest_beautiful_substring(s)) return results"},{"question":"Given an integer array `arr` of length `n`, representing the heights of consecutive buildings, we need to make the buildings non-decreasing by increasing the heights of some buildings if necessary. Find the minimum total height that needs to be added to the array to achieve this goal. Input: The first line contains an integer `n`, the number of buildings. The second line contains `n` integers, representing the heights of consecutive buildings. Output: Print the minimum total height that needs to be added. Constraints: 1 ≤ n ≤ 1000 1 ≤ arr[i] ≤ 10^5 SAMPLE INPUT 5 3 1 2 1 5 SAMPLE OUTPUT 5 Explanation: We need to make the array non-decreasing. The resulting array should be: 3 3 3 3 5 We need to add the following heights to the original array: 0 (to make 3 non-decreasing) 2 (to make 1 to 3) 1 (to make 2 to 3) 2 (to make 1 to 3) 0 (to keep 5 as it is) Total height added = 0 + 2 + 1 + 2 + 0 = 5","solution":"def min_total_height_added(n, arr): Returns the minimum total height that needs to be added to make the array non-decreasing. :param n: int - number of buildings :param arr: list of int - heights of the buildings total_added_height = 0 for i in range(1, n): if arr[i] < arr[i-1]: total_added_height += arr[i-1] - arr[i] arr[i] = arr[i-1] return total_added_height # Example usage: # n = 5 # arr = [3, 1, 2, 1, 5] # print(min_total_height_added(n, arr)) # Output: 5"},{"question":"You are implementing a feature for a social networking platform. Each user can create posts and follow other users. Each user has a unique user ID and each post has a unique post ID. The social feed for a user is a list of posts created by that user and by users they follow, ordered by the most recent. Write a function to generate a user\'s social feed. Your task is to implement the function `generate_feed(user_id, posts, follows)`, which takes the following parameters: - `user_id`: an integer representing the ID of the user whose feed is to be generated. - `posts`: a list of tuples where each tuple contains two integers `(user_id, post_id)`. This indicates that `user_id` created `post_id`. - `follows`: a list of tuples where each tuple contains two integers `(follower_id, followed_id)`. This indicates that `follower_id` follows `followed_id`. The function should return a list of post IDs representing the user\'s social feed, ordered by the most recent. # Constraints: - Number of users: 1 ≤ number_of_users ≤ 10^4 - Number of posts: 1 ≤ number_of_posts ≤ 10^5 - Number of follow relationships: 1 ≤ number_of_follow ≤ 10^5 - 1 ≤ user_id, post_id ≤ 10^5 # Example: ```python def generate_feed(user_id, posts, follows): # Your code here # Example usage: posts = [(1, 101), (2, 102), (1, 103), (3, 104), (2, 105), (3, 106), (2, 107)] follows = [(1, 2), (1, 3), (2, 3)] user_id = 1 feed = generate_feed(user_id, posts, follows) print(feed) # Output should be [107, 106, 105, 104, 103, 102, 101] follows = [(4,1),(4,3)] user_id = 4 feed = generate_feed(user_id, posts, follows) print(feed) # Output should be [106, 104] follows = [(5, 3), (5, 1)] user_id = 5 feed = generate_feed(user_id, posts, follows) print(feed) # Output should be [106, 104, 103, 101] ``` # Implementation Notes: - Make sure to account for both the user\'s own posts and the posts from the users they follow. - The resulting feed should be ordered by the most recent posts. - Consider performance implications given the constraints mentioned.","solution":"def generate_feed(user_id, posts, follows): Generates the social feed for the given user. Arguments: user_id -- the ID of the user whose feed is to be generated posts -- a list of tuples where each tuple contains two integers (user_id, post_id) follows -- a list of tuples where each tuple contains two integers (follower_id, followed_id) Returns: A list of post IDs representing the user\'s social feed, ordered by the most recent. from collections import defaultdict # Set of users that the current user follows, including themselves following_set = set([user_id]) for follower, followed in follows: if follower == user_id: following_set.add(followed) # Generate the feed feed = [post_id for uid, post_id in posts if uid in following_set] # Since the original \'posts\' list is given in chronological order # simply reversing it will give us the feed in the most recent order. return feed[::-1]"},{"question":"Imagine you are in charge of arranging the seating for a theater that has an n x m grid of seats. Some of these seats are already reserved and you need to determine if you can place a group of k friends together in a single row without any interruptions. The friends must be seated in consecutive seats in the same row, and there should be no reserved seats in between. Input - The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ m), where n is the number of rows, m is the number of columns, and k is the number of consecutive seats needed for the friends. - The next n lines each contain m characters, where each character is either \'R\' (reserved) or \'.\' (available), representing the seating arrangement in the theater. Output - Print \\"YES\\" if it\'s possible to seat the group of friends together in any single row, otherwise print \\"NO\\". Examples # Input ``` 4 5 3 R..R. ..R.. R.... ..R.. ``` # Output ``` YES ``` # Input ``` 3 4 4 R... .... .R.. ``` # Output ``` YES ``` # Input ``` 3 4 4 R.R. ..R. R.R. ``` # Output ``` NO ``` # Explanation In the first example, the group of 3 friends can sit together in the second row (positions 1, 2, and 3 are available). In the second example, the group of 4 friends can sit together in the second row (all positions are available). In the third example, there is no single row that can accommodate 4 consecutive friends due to the reserved seats interrupting the possible arrangements.","solution":"def can_seat_friends(n, m, k, seating_arrangement): Determines if it\'s possible to seat a group of k friends together in a single row without any interruptions. :param n: Number of rows :param m: Number of columns :param k: Number of consecutive seats needed :param seating_arrangement: 2D list of characters where \'R\' is reserved and \'.\' is available :return: \\"YES\\" if it\'s possible to seat the group of friends together in any single row, otherwise \\"NO\\" for row in seating_arrangement: available_seats = 0 for seat in row: if seat == \'.\': available_seats += 1 if available_seats == k: return \\"YES\\" else: available_seats = 0 return \\"NO\\""},{"question":"Write a function `fizzBuzz` that takes an integer `n` and returns a list of strings with numbers from 1 to `n`, but: - For multiples of three, the string should be \\"Fizz\\" instead of the number. - For multiples of five, the string should be \\"Buzz\\" instead of the number. - For numbers which are multiples of both three and five, the string should be \\"FizzBuzz\\". Example 1: Input: 15 Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"] Example 2: Input: 5 Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\"] Your Task: You don\'t need to input anything. Complete the function `fizzBuzz(n)` which takes an integer `n` as the input parameter and returns the list described. Constraints: 1<= N <= 100","solution":"def fizzBuzz(n): Returns a list of strings from 1 to n with: - \\"Fizz\\" for multiples of 3 - \\"Buzz\\" for multiples of 5 - \\"FizzBuzz\\" for multiples of both 3 and 5. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"A company has a hierarchical management structure, where each employee has a unique ID and a \\"boss\\" who is directly above them in the hierarchy. The top-most boss (CEO) does not have any boss and is represented with a special ID (e.g., -1). You are given a list of N employees with their unique IDs and boss IDs. Your task is to construct a hierarchical report system such that each employee appears under their direct boss. For each boss, you should list their direct reports and for each direct report, you should list their direct reports, and so on. The input list contains pairs where the first element of each pair is an employee ID and the second element is the boss ID. Write a function `construct_hierarchy` which takes a list of tuples `employees` as input and returns a nested dictionary representing the hierarchy. Example: Input: employees = [(2, 1), (3, 1), (4, 2), (5, 2), (6, 3), (1, -1)] Output: { 1: { # CEO 2: { 4: {}, 5: {} }, 3: { 6: {} } } } In this example, employee 1 is the CEO with no boss (represented by -1). Employees 2 and 3 report directly to the CEO. Employees 4 and 5 report directly to employee 2, and employee 6 reports directly to employee 3. Your Task: You do not need to read input or print anything. Your task is to complete the function `construct_hierarchy`, which takes a list of tuples `employees` and returns the nested dictionary representing the company’s hierarchy. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: - 1 ≤ N ≤ 100 - Each employee will only have one direct boss. - Each boss can have zero or more direct reports. - Employee IDs are unique and ranged between 1 and 100. - The boss ID will be -1 for the top-most boss (CEO).","solution":"def construct_hierarchy(employees): from collections import defaultdict # Step 1: Create a dictionary to map each boss to their direct employees boss_dict = defaultdict(list) for emp, boss in employees: boss_dict[boss].append(emp) # Step 2: Function to build the hierarchy recursively def build_hierarchy(boss): # Direct reports dict for current boss hierarchy = {} for emp in boss_dict[boss]: # Recursively build the hierarchy for each employee under the current boss hierarchy[emp] = build_hierarchy(emp) return hierarchy # Step 3: Find the top-most boss (CEO), typically identified by a boss ID of -1 ceo = next(emp for emp, boss in employees if boss == -1) # Step 4: Build the hierarchy starting from the CEO return {ceo: build_hierarchy(ceo)}"},{"question":"Consider a grid of size n x n filled with zeros and ones. The challenge is to find the largest square sub-grid that contains only ones and outputs its size. Note that the size of a square sub-grid is defined by the length of one of its sides. Input The first line contains a single integer n (1 ≤ n ≤ 500), the size of the grid. Each of the following n lines contains n integers separated by spaces, where each integer is either 0 or 1, representing the grid. Output Print a single integer, the size of the largest square sub-grid that contains only ones. Examples Input 4 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 Output 2 Input 3 1 1 1 1 1 1 1 1 1 Output 3 Input 5 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 Output 3","solution":"def largest_square_subgrid(n, grid): if n == 0: return 0 # Create a dp table to store the size of the largest square subgrid ending at a particular cell dp = [[0] * n for _ in range(n)] max_size = 0 # Iterate through each cell in the grid for i in range(n): for j in range(n): # If we are at the first row or first column if i == 0 or j == 0: dp[i][j] = grid[i][j] elif grid[i][j] == 1: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 else: dp[i][j] = 0 # Update the maximum size of the square subgrid max_size = max(max_size, dp[i][j]) return max_size # Test function def parse_input(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:]] return n, grid input_string1 = \\"4n1 0 1 1n1 1 1 1n1 1 1 0n0 1 1 1\\" n1, grid1 = parse_input(input_string1) print(largest_square_subgrid(n1, grid1)) # Output: 2 input_string2 = \\"3n1 1 1n1 1 1n1 1 1\\" n2, grid2 = parse_input(input_string2) print(largest_square_subgrid(n2, grid2)) # Output: 3 input_string3 = \\"5n0 0 0 0 0n0 0 0 0 0n0 0 1 1 1n0 0 1 1 1n0 0 1 1 1\\" n3, grid3 = parse_input(input_string3) print(largest_square_subgrid(n3, grid3)) # Output: 3"},{"question":"Given an array of N integers, determine the smallest window (contiguous subarray) that contains at least K distinct integers. If no such window exists, return -1. Constraints * 1 leq N leq 10^5 * 1 leq K leq N * 1 leq A[i] leq 10^5 for 1 leq i leq N * All values in input are integers. Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output Print the size of the smallest window that contains at least K distinct integers, or -1 if no such window exists. Examples Input 7 3 1 2 1 3 4 3 5 Output 3 Input 5 5 2 2 2 2 2 Output -1","solution":"def smallest_window_with_k_distinct(N, K, A): from collections import defaultdict if K > len(set(A)): return -1 left = 0 min_window = float(\'inf\') count_map = defaultdict(int) distinct_count = 0 for right in range(N): if count_map[A[right]] == 0: distinct_count += 1 count_map[A[right]] += 1 while distinct_count >= K: min_window = min(min_window, right - left + 1) count_map[A[left]] -= 1 if count_map[A[left]] == 0: distinct_count -= 1 left += 1 return min_window if min_window != float(\'inf\') else -1"},{"question":"You are given an array of integers nums consisting of both positive and negative integers. Your task is to find the maximum sum of any continuous subarray of nums. A subarray is defined as a contiguous part of an array. Write a function that takes an array of integers as input and returns the maximum sum of any continuous subarray. Constraints * 1 ≤ len(nums) ≤ 10^6 * -10^4 ≤ nums[i] ≤ 10^4 Input Input is given from Standard Input in the following format: nums Where nums is a whitespace-separated list of integers. Output Print the maximum sum of any continuous subarray. Examples Input -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 Output 1 Input -1 -2 -3 -4 Output -1","solution":"def max_subarray_sum(nums): Returns the maximum sum of any continuous subarray of nums. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task You are given a `challenge board`, which contains a grid of size `n x n` where each cell can be \\"`X`\\" or \\"`O`\\". Your task is to verify if the board represents a valid game of Tic-Tac-Toe. A valid Tic-Tac-Toe game board: 1. The number of \\"X\\"s and \\"O\\"s is either equal or there is one more \\"X\\" than \\"O\\". 2. The board does not contain two winning lines. A player wins by placing three of their marks (\\"X\\" or \\"O\\") in a horizontal, vertical, or diagonal row. Determine if the given board is valid. # Input/Output `[input]` 2D string array `board` A 2D array (n x n) containing \\"X\\" and \\"O\\". `[output]` boolean Return `True` if the given Tic-Tac-Toe board is valid, otherwise return `False`. # Example For ```python board = [ [\\"X\\", \\"O\\", \\"X\\"], [\\"O\\", \\"X\\", \\"O\\"], [\\"O\\", \\"X\\", \\"O\\"] ] ``` the output should be `False`. Explanation: The board contains two winning lines: - \\"X\\" in the first column. - \\"O\\" in the second row. Therefore, it does not represent a valid Tic-Tac-Toe game.","solution":"def is_valid_tic_tac_toe(board): Determine if the given Tic-Tac-Toe board is valid. def check_winner(marker): # Check rows, columns and diagonals for i in range(n): if all(board[i][j] == marker for j in range(n)) or all(board[j][i] == marker for j in range(n)): return True if all(board[i][i] == marker for i in range(n)) or all(board[i][n - 1 - i] == marker for i in range(n)): return True return False n = len(board) count_X = sum(row.count(\'X\') for row in board) count_O = sum(row.count(\'O\') for row in board) # Rule: The count of X must be equal to the count of O or exactly 1 more. if not (count_X == count_O or count_X == count_O + 1): return False win_X = check_winner(\'X\') win_O = check_winner(\'O\') # Rule: Both players cannot have winning lines. if win_X and win_O: return False # Rule: If X wins, X must be exactly one more than O if win_X and count_X != count_O + 1: return False # Rule: If O wins, the count of X must be equal to the count of O if win_O and count_X != count_O: return False return True"},{"question":"You are given a permutation of the first N natural numbers in the form of an array. Your task is to transform the given permutation into a zigzag sequence by permuting the array elements such that the resulting sequence follows a pattern where every odd-indexed number is greater than its adjacent even-indexed numbers and every even-indexed number is less than its adjacent odd-indexed numbers. Formally, if the permutation is arr and the length of the permutation is N, then your task is to reorder arr such that: - arr[1] < arr[2] > arr[3] < arr[4] > arr[5] < ... - If there are multiple valid zigzag sequences, print any one of them. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains an integer N denoting the size of the permutation. - The second line contains N space-separated integers representing the permutation of the first N natural numbers. ------ Output ------ For each test case, print a single line containing the zigzag sequence. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 ----- Sample Input 1 ------ 2 7 1 2 3 4 5 6 7 4 1 3 2 4 ----- Sample Output 1 ------ 1 3 2 5 4 6 7 1 3 2 4 ----- Explanation 1 ------ Example case 1: One possible zigzag sequence for the permutation [1, 2, 3, 4, 5, 6, 7] is [1, 3, 2, 5, 4, 6, 7]. The odd-index elements are greater than their adjacent even-index elements. Example case 2: The input permutation is already in a zigzag sequence [1, 3, 2, 4].","solution":"def zigzag_permutation(permutation): Transforms the given permutation into a zigzag sequence. n = len(permutation) result = permutation[:] for i in range(1, n, 2): if i < n - 1: if result[i] < result[i - 1]: result[i], result[i - 1] = result[i - 1], result[i] if result[i] < result[i + 1]: result[i], result[i + 1] = result[i + 1], result[i] else: if result[i] < result[i - 1]: result[i], result[i - 1] = result[i - 1], result[i] return result def zigzag_sequences(test_cases): For each test case, returns the zigzag sequence of the permutation. results = [] for N, perm in test_cases: results.append(zigzag_permutation(perm)) return results"},{"question":"Write a function that takes a string and a character as input and returns a new string where all occurrences of the character are replaced by the next character in the alphabet. For example, given the string `s` \\"hello world\\" and the character `c` \'l\' calling the function like replaceCharacter(\\"hello world\\", \'l\') would return `\\"hemmo wormd\\"` since \'l\' is replaced by \'m\'. Notes: 1. Only consider valid lower-case letters from \'a\' to \'z\'. If the replacement is \'z\', it should wrap around to \'a\'. 2. If the specified character does not exist in the string, return the original string unchanged.","solution":"def replaceCharacter(s, c): Returns a new string where all occurrences of the character \'c\' in string \'s\' are replaced by the next character in the alphabet. if not c.isalpha() or len(c) != 1 or c.lower() != c: raise ValueError(\\"The character must be a single lowercase letter.\\") replacement = chr(((ord(c) - ord(\'a\') + 1) % 26) + ord(\'a\')) return s.replace(c, replacement)"},{"question":"Determine the smallest integer N such that when divided by each integer from 1 to K (inclusive), the remainder is always a multiple of that integer. If no such N exists within the range of 1 to 10^9, print -1. # Constraints - 1 ≤ K ≤ 20 - K is an integer. # Input Input is given from Standard Input in the following format: K # Output If there is an integer that satisfies the condition, print the smallest such integer; otherwise, print -1. # Sample Input 3 # Sample Output 60 # Explanation The smallest integer N such that N mod 1 is a multiple of 1, N mod 2 is a multiple of 2, and N mod 3 is a multiple of 3 is 60. Here, the calculation for each divisor is as follows: - 60 mod 1 = 0 (multiple of 1) - 60 mod 2 = 0 (multiple of 2) - 60 mod 3 = 0 (multiple of 3)","solution":"import math from functools import reduce def lcm(x, y): return x * y // math.gcd(x, y) def smallest_int_divisible(K): if K < 1 or K > 20: return -1 smallest_multiple = reduce(lcm, range(1, K + 1)) # Check if the result is within the limit of 10^9 if smallest_multiple > 10**9: return -1 return smallest_multiple"},{"question":"Input 5 apple banana apple orange banana kiwi apple Output apple 3 banana 2 orange 1 kiwi 1","solution":"def word_count(n, words): Counts the occurrences of each word in a given list of words. Args: n : int : number of words (not used in logic but given as part of the input format) words : str : space-separated string of words Returns: dict : a dictionary where keys are words and values are their occurrences word_list = words.split() word_dict = {} for word in word_list: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict # Example usage word_counts = word_count(5, \\"apple banana apple orange banana kiwi apple\\") for word in word_counts: print(f\\"{word} {word_counts[word]}\\")"},{"question":"Write a function that takes an array of integers and returns an array containing the **length of the longest consecutive sequence** for each unique element in the original array. A consecutive sequence is a sequence of numbers where each number follows the previous one without any gaps. For example, starting with: ``` [100, 4, 200, 1, 3, 2] [1, 3, 5, 2, 4] [10, 20, 30, 40, 50] ``` You could respectively generate: ``` [4] # because the consecutive sequence is [1, 2, 3, 4] [5] # because the consecutive sequence is [1, 2, 3, 4, 5] [1] # because there are no consecutive sequences ``` So you should have, in turn: ```python longest_consecutive([100, 4, 200, 1, 3, 2]) == [4] longest_consecutive([1, 3, 5, 2, 4]) == [5] longest_consecutive([10, 20, 30, 40, 50]) == [1] ```","solution":"def longest_consecutive(nums): Returns an array containing the length of the longest consecutive sequence in nums. if not nums: return [0] num_set = set(nums) longest_length = 0 for num in num_set: if num - 1 not in num_set: # Start of a new sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return [longest_length]"},{"question":"Write a function that takes a list of integers and returns the first integer(s) that appear only once in the list. If there are multiple such integers, return them in the order they appear. If no integer appears only once, return an empty list. ```python # 2 appears only once and 3 appears only once, both before any repeating integers find_first_unique([2, 3, 4, 2, 4, 5, 6, 5]) # => [2, 3, 6] # 1 appears only once and 2 appears only once, both before any repeating integers find_first_unique([1, 2, 2, 3, 1, 4, 3]) # => [4] # No integers appear only once find_first_unique([1, 1, 2, 2, 3, 3]) # => [] # Nobody appears only once in an empty list find_first_unique([]) # => [] ``` Make sure to handle different edge cases and constraints as specified in the example test cases.","solution":"def find_first_unique(nums): Returns the first integer(s) that appear only once in the list, in the order they appear. If no integer appears only once, returns an empty list. from collections import defaultdict # Create a dictionary to count occurrences of each integer count = defaultdict(int) for num in nums: count[num] += 1 # Collect integers that appear only once result = [num for num in nums if count[num] == 1] return result"},{"question":"Alex is planning a week-long road trip and wants to participate in various activities, but each day he must take part in only one activity. The activities he can choose from each day are: 1. Hiking 2. Fishing 3. Both Hiking and Fishing 4. Neither Alex has certain rules: - He cannot hike for two consecutive days. - He cannot fish for two consecutive days. - If both hiking and fishing are available on a day, he can only choose one of these activities for that day. Find the maximum number of activities Alex can do during his one-week trip, adhering to his rules. -----Input----- The first line contains exactly 7 integers, representing the availability of activities for each day of the trip. These integers can be: - 0 if neither hiking nor fishing is available. - 1 if only hiking is available. - 2 if only fishing is available. - 3 if both hiking and fishing are available. -----Output----- Print the maximum number of activities Alex can do in a week. -----Examples----- Input 1 3 2 0 1 3 2 Output 6 Input 0 0 0 0 0 0 0 Output 0 Input 3 1 3 2 1 3 1 Output 7 -----Note----- In the first test case, Alex can go hiking on days 1 and 5, and fishing on days 3, 7, 2, and 6. Thus, he can perform activities on 6 days. In the second test case, no activities are available, so the output is 0. In the third test case, Alex can go hiking on days 1, 2, 4, and 7, and fishing on days 3, 5, and 6. Thus, he can perform activities on all 7 days.","solution":"def max_activities(availability): Calculate the maximum number of activities Alex can do in a week. :param availability: List of integers, where each integer corresponds to the availability of activities for each day of the week. :return: Integer representing the maximum number of activities Alex can do in a week. # Using dynamic programming to solve the problem dp = [0] * 7 # Table to store maximum activities that can be done up to each day n = len(availability) if availability[0] == 1 or availability[0] == 2 or availability[0] == 3: dp[0] = 1 for i in range(1, n): if availability[i] == 1: if availability[i - 1] != 1: dp[i] = dp[i - 1] + 1 else: dp[i] = dp[i - 1] elif availability[i] == 2: if availability[i - 1] != 2: dp[i] = dp[i - 1] + 1 else: dp[i] = dp[i - 1] elif availability[i] == 3: if availability[i - 1] == 1: dp[i] = dp[i - 1] + 1 elif availability[i - 1] == 2: dp[i] = dp[i - 1] + 1 elif availability[i - 1] == 3: dp[i] = dp[i - 1] + 1 else: dp[i] = dp[i - 1] + 1 if i == 1 else max(dp[i - 1] + 1, dp[i - 2] + 2) else: dp[i] = dp[i - 1] return dp[-1]"},{"question":"In a game of \\"Dungeon Escape,\\" the player must navigate through a dungeon represented by a grid to find the exit. The dungeon is an ( n times m ) grid with each cell either being open, represented by \'.\', or a wall, represented by \'#\'. The player starts at the top-left corner and needs to reach the bottom-right corner of the grid. The player can move up, down, left, or right, but cannot move into cells containing walls. Additionally, there are pits represented by \'P\', which act as traps. If the player steps onto a pit, they lose immediately. Given the dungeon layout as input, determine the minimum number of steps required for the player to reach the exit, avoiding walls and pits. If it is not possible to reach the exit, return -1. -----Input----- The first line contains two integers ( n ) and ( m ) ((1 leq n, m leq 50)), representing the dimensions of the dungeon. Each of the next ( n ) lines contains ( m ) characters, describing a row of the dungeon. -----Output----- Output a single integer, representing the minimum number of steps required to reach the exit. If the exit is unreachable, output -1. -----Examples----- Sample Input 1: 5 5 ..... .#.P. ..... .#.#. ..... Sample Output 1: 8 Sample Input 2: 3 3 ..P #P. .#. Sample Output 2: -1","solution":"from collections import deque def min_steps_to_escape(dungeon): n = len(dungeon) m = len(dungeon[0]) if dungeon[0][0] != \'.\' or dungeon[n-1][m-1] != \'.\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = [[False for _ in range(m)] for _ in range(n)] visited[0][0] = True while queue: r, c, steps = queue.popleft() if r == n-1 and c == m-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and dungeon[nr][nc] == \'.\' and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1"},{"question":"You are given a string `s` containing just the characters `\'(\'` and `\')\'`. Write a function to find the length of the longest substring that contains balanced parentheses. A substring is balanced if every opening parenthesis `\'(\'` has a corresponding closing parenthesis `\')\'`, in the correct order. ----Input---- - A single line containing the string `s`, with the length of `s` not exceeding 10,000 characters. ----Output---- - Output a single integer, the length of the longest balanced substring of parentheses. ----Examples---- **Sample Input 1:** `(()` **Sample Output 1:** 2 **Sample Input 2:** `)()())` **Sample Output 2:** 4 **Sample Input 3:** ``` `)()(()))(`` **Sample Output 3:** 6","solution":"def longest_balanced_parentheses(s): Returns the length of the longest balanced substring of parentheses. max_len = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len"},{"question":"Problem Statement You are given an N times N grid filled with positive integers. You need to find out the sum of all unique elements in the grid. Two elements are considered unique if they appear exactly once in the grid. Input The input begins with an integer T (1 le T le 10), representing the number of test cases. For each test case, the first line contains an integer N (1 le N le 100), the size of the grid. This is followed by N lines each containing N positive integers, where each integer is in the range of 1 to 10^6. Output For each test case, print the sum of all unique elements in the grid in a single line. Sample Input ``` 2 3 1 2 3 2 3 4 3 4 5 2 1 2 2 3 ``` Output for the Sample Input ``` 11 4 ``` Example Input ``` 2 3 1 2 3 2 3 4 3 4 5 2 1 2 2 3 ``` Output ``` 11 4 ``` Explanation For the first test case: - The grid is: ``` 1 2 3 2 3 4 3 4 5 ``` - The unique elements are 1 and 5 because they appear exactly once. The sum is 1 + 5 = 6. For the second test case: - The grid is: ``` 1 2 2 3 ``` - The unique elements are 1 and 3 because they appear exactly once. The sum is 1 + 3 = 4.","solution":"def sum_of_unique_elements(test_cases): results = [] for case in test_cases: N = case[0] grid = case[1:] element_count = {} # Count occurrence of each element in the grid for row in grid: for element in row: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 # Calculate the sum of unique elements unique_sum = sum(element for element, count in element_count.items() if count == 1) results.append(unique_sum) return results"},{"question":"A library is organizing a reading challenge and wants to select the longest sequence of books that can be read in alphabetical order. Each book has a title, and the titles are given in an array. Your task is to help the library determine the maximum number of books that can be read consecutively in alphabetical order. Example 1: Input: N = 6 titles = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"fig\\", \\"grape\\"] Output: 6 Explanation: All the titles are already in alphabetical order. Example 2: Input: N = 5 titles = [\\"grape\\", \\"fig\\", \\"date\\", \\"cherry\\", \\"banana\\"] Output: 1 Explanation: No consecutive books are in alphabetical order. Your Task: Since this is a function problem, you don\'t need to take any input as it is already accomplished by the driver code. You just need to complete the function longestAlphabeticalSequence() that takes array titles and integer N as parameters and returns the maximum length of consecutive books that can be read in alphabetical order. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 Each title in the array will contain only lowercase alphabetical characters and will be at most 100 characters long.","solution":"def longestAlphabeticalSequence(N, titles): Returns the maximum length of consecutive books that can be read in alphabetical order. if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if titles[i] > titles[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Mina loves puzzles and has recently come across a special kind of sequence that she calls a \\"Friendly Sequence\\". She defines a Friendly Sequence as a sequence where the greatest common divisor (GCD) of any two adjacent elements is greater than 1. Mina wants to generate such sequences with given properties. You need to write a program to help Mina accomplish this. The program will be given the length of the sequence (N) and the maximum possible integer value (M). Your task is to generate a Friendly Sequence of length N where each element is an integer between 1 and M, inclusive. If multiple Friendly Sequences are possible, you can output any one of them. Constraints - 2 ≤ N ≤ 100 - 2 ≤ M ≤ 10^4 Input The input consists of a single line containing two space-separated integers N and M. Output Output a single line containing N space-separated integers representing a Friendly Sequence. If it is not possible to generate such a sequence, output \\"-1\\". Example Input 3 10 Output 2 4 8 Input 2 3 Output 2 3 Input 5 5 Output -1","solution":"def generate_friendly_sequence(N, M): Generates a Friendly Sequence of length N with elements between 1 and M, inclusive. Returns a string of space-separated integers or \\"-1\\" if no such sequence is possible. if M < 2: return \\"-1\\" # Start with 2, which is guaranteed to have multiple values with gcd > 1 sequence = [2 * i for i in range(1, N + 1) if 2 * i <= M] # Check if we have enough elements if len(sequence) < N: return \\"-1\\" return \' \'.join(map(str, sequence[:N]))"},{"question":"You are given a list of employees in a company. Each employee has a unique ID, a list of their direct subordinates\' IDs, and an efficiency rating. The CEO of the company has the highest efficiency and does not have any boss. Your task is to calculate the total sum of efficiency ratings for all employees that are not directly or indirectly supervised by the CEO. An employee is said to be directly supervised by another employee if the latter’s ID appears in the former’s list of direct subordinates. Similarly, an employee is indirectly supervised by another employee if there exists a chain of direct supervision leading from the latter to the former. -----Input----- - The first line contains an integer `N` (1 ≤ N ≤ 10^5), the number of employees. - Each of the next `N` lines describes an employee in the following format: - employeeID_i, efficiency_i, direct_subordinates_i_count, direct_subordinateID1, direct_subordinateID2, ..., direct_subordinateIDK_i -----Output----- Print a single integer — the total sum of efficiency ratings for all employees that are not directly or indirectly supervised by the CEO. -----Constraints----- - Employee IDs are integers that form a sequence starting from 1. - The CEO\'s employee ID is 1 and they have an efficiency rating of 100 (the highest). - Each employee\'s efficiency rating is an integer between 1 and 100 inclusive. - Each employee\'s list of direct subordinates\' IDs may be empty if they supervise no other employee. -----Example----- Input: 5 1 100 2 2 3 2 70 1 4 3 60 0 4 50 1 5 5 40 0 Output: 0 Explanation: All employees are directly or indirectly supervised by the CEO (employee with ID 1). So the total sum of efficiency ratings for employees not supervised by the CEO is 0.","solution":"def get_non_ceo_supervised_efficiency(n, employees): from collections import deque, defaultdict # Initialize dictionaries to store efficiency and subordinates efficiency = {} subordinates = defaultdict(list) for emp in employees: emp_info = emp.split() emp_id = int(emp_info[0]) eff = int(emp_info[1]) sub_count = int(emp_info[2]) eff_subs = [] if sub_count > 0: eff_subs = list(map(int, emp_info[3:3+sub_count])) efficiency[emp_id] = eff subordinates[emp_id].extend(eff_subs) # Set containing all employees directly or indirectly supervised by CEO (ID 1) supervised_by_ceo = set() queue = deque([1]) while queue: curr = queue.popleft() supervised_by_ceo.add(curr) for sub in subordinates[curr]: if sub not in supervised_by_ceo: queue.append(sub) # Get the sum of efficiency of all non CEO supervised employees total_efficiency = 0 for emp in efficiency.keys(): if emp not in supervised_by_ceo: total_efficiency += efficiency[emp] return total_efficiency"},{"question":"Given an integer matrix of size N x N, where N is always an even number (2 ≤ N ≤ 1000), your task is to reorder the rows of the matrix such that the resulting matrix forms a palindrome across its top-to-bottom axis. A matrix is a palindrome if its first row is the same as its last row, its second row is the same as its second last row, and so on. It is guaranteed that such an ordering is always possible. Input The first line contains a single integer N, the size of the matrix. The following N lines each contain N integers separated by spaces, representing the matrix. Output Output the reordered matrix, where each row should be printed on a new line with its elements separated by spaces. Example Input 4 1 2 3 4 5 6 7 8 9 10 11 12 9 10 11 12 Output 1 2 3 4 9 10 11 12 9 10 11 12 1 2 3 4 Input 6 1 3 5 7 9 11 2 4 6 8 10 12 13 14 15 16 17 18 13 14 15 16 17 18 2 4 6 8 10 12 1 3 5 7 9 11 Output 1 3 5 7 9 11 2 4 6 8 10 12 13 14 15 16 17 18 13 14 15 16 17 18 2 4 6 8 10 12 1 3 5 7 9 11 Note In the first sample, the original matrix can be reordered so that the first row matches the last row and the second row matches the second last row, achieving a top-to-bottom palindrome. In the second sample, the original matrix can be reordered similarly to form a top-to-bottom palindrome. The sequence of reordering is not unique, but forming a top-to-bottom palindrome is guaranteed.","solution":"def reorder_matrix(matrix): Reorders an NxN matrix such that it forms a palindrome across its top-to-bottom axis. Args: - matrix (list of list of int): The NxN matrix, where N is even. Returns: - list of list of int: The reordered matrix. n = len(matrix) reordered_matrix = [None] * n # We know that the first N//2 rows need to match the last N//2 rows in reverse order rows = matrix[:] for i in range(n//2): reordered_matrix[i] = rows[i] reordered_matrix[n-i-1] = rows[i] return reordered_matrix"},{"question":"Feluda is working on an interesting dataset of integers, and he wants to determine the k-th smallest element efficiently. Given an array of integers and multiple queries, each requesting the k-th smallest element in a specified subarray, help Feluda by implementing an optimal solution. -----Input----- The first line contains two integers n and q (1 le n le 100000, 1 le q le 100000) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Each of the next q lines contains three integers l, r, and k (1 le l le r le n, 1 le k le r-l+1) — a query asking for the k-th smallest element in the subarray from index l to index r (inclusive, 1-based index). -----Output----- For each query, output a single integer — the k-th smallest element in the specified subarray. -----Examples----- Input 5 3 5 3 8 6 2 1 3 2 2 5 3 1 5 5 Output 5 6 8 -----Note----- Sample explanation: In the first query, the subarray is [5, 3, 8]. The 2nd smallest element in this subarray is 5. In the second query, the subarray is [3, 8, 6, 2]. The 3rd smallest element in this subarray is 6. In the third query, the subarray is [5, 3, 8, 6, 2]. The 5th smallest element in this subarray is 8.","solution":"def kth_smallest_element(n, q, arr, queries): results = [] for l, r, k in queries: sub_array = arr[l-1:r] sub_array.sort() results.append(sub_array[k-1]) return results # Example usage: # n = 5 # q = 3 # arr = [5, 3, 8, 6, 2] # queries = [(1, 3, 2), (2, 5, 3), (1, 5, 5)] # assert kth_smallest_element(n, q, arr, queries) == [5, 6, 8]"},{"question":"In a directed graph with n nodes and m edges, find the length of the shortest path between two given nodes a and b. It is guaranteed that there are no negative weight cycles in the graph. If there\'s no such path, return -1. Input The first line of input contains two integers n and m, representing the number of nodes and edges in the graph, respectively. The next m lines each contain three integers u, v, and w, indicating an edge from node u to node v with a weight of w. The last line contains two integers a and b, representing the start and end nodes for the path. Output For each test case, print a single integer that is the length of the shortest path from node a to node b. If there is no valid path, print -1. Constraints 2 ≤ n ≤ 10^5 1 ≤ m ≤ 2*10^5 1 ≤ u, v ≤ n 1 ≤ w ≤ 10^4 1 ≤ a, b ≤ n SAMPLE INPUT 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 SAMPLE OUTPUT 7 Explanation The graph has 5 nodes and 6 edges. The edges are: (1 → 2, weight 2) (1 → 3, weight 4) (2 → 3, weight 1) (2 → 4, weight 7) (3 → 5, weight 3) (4 → 5, weight 1) The shortest path from node 1 to node 5 is 1 -> 2 -> 3 -> 5 with a total weight of 2 + 1 + 3 = 6.","solution":"import heapq def dijkstra_shortest_path(n, m, edges, start, end): # Create graph as adjacency list graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((v, w)) # Priority queue to store (distance, node) pq = [(0, start)] dist = [float(\'inf\')] * (n+1) dist[start] = 0 while pq: current_dist, u = heapq.heappop(pq) if u == end: return current_dist if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return -1 if dist[end] == float(\'inf\') else dist[end] # Example usage: n, m = 5, 6 edges = [ (1, 2, 2), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 5, 3), (4, 5, 1) ] start, end = 1, 5 print(dijkstra_shortest_path(n, m, edges, start, end))"},{"question":"Given a list of integers, develop a function that divides the list into non-overlapping, contiguous subarrays such that each subarray\'s sum is equal. If it is not possible to divide the array in this way, the function should return an empty array. # Input The input will be provided in the following format: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), representing the number of elements in the list. - The second line contains `n` space-separated integers, which are the elements of the list. Each integer in the list will be between -10^3 and 10^3. # Output The output should be a list of lists, where each inner list represents a subarray whose sum is equal for all subarrays. If no such division is possible, return an empty array. # Example **Input:** ``` 6 1 2 3 0 3 2 1 ``` **Output:** ``` [[1, 2, 3], [0, 3, 2, 1]] ``` **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` [] ``` # Note - For the first example, the array `[1, 2, 3, 0, 3, 2, 1]` can be divided into subarrays `[1, 2, 3]` and `[0, 3, 2, 1]`, both of which have the sum of 6. - For the second example, there is no possible way to divide the array such that all subarrays have equal sums, so the output is an empty array.","solution":"def divide_into_equal_sum_subarrays(n, arr): total_sum = sum(arr) # If the total sum is not divisible by 2, we can\'t divide it into subarrays of equal sum if total_sum % 2 != 0: return [] target = total_sum // 2 current_sum = 0 subarray = [] result = [] for num in arr: current_sum += num subarray.append(num) if current_sum == target: result.append(subarray) current_sum = 0 subarray = [] # If we did not match the total sum in half, return empty array indicating it\'s not possible if len(result) == 2 and sum(result[0]) == sum(result[1]): return result return []"},{"question":"# Task You are given an `n x m` grid where each cell can either be someone’s office (`1`) or an empty space (`0`). You need to find the shortest distance from each empty space to the nearest office. If it is not possible to reach any office from a cell, return `−1` for that cell. The distance between two cells is measured in terms of the number of edges traversed in the shortest path. # Example For the grid [[1, 0, 0], [0, 0, 1], [1, 0, 0]] The output should be: [[0, 1, 1], [1, 1, 0], [0, 1, 1]] # Input/Output - `[input]` 2D integer array `grid` Constraints: `1 ≤ n, m ≤ 100`. - `[output]` 2D integer array","solution":"from collections import deque def shortest_distance_to_office(grid): Returns a 2D grid where each empty space cell (0) contains the shortest distance to the nearest office (1). If it is not possible to reach any office from a cell, return -1 for that cell. :param grid: List[List[int]]: a 2D grid of 0s (empty space) and 1s (offices) :return: List[List[int]]: a 2D grid of shortest distances n = len(grid) m = len(grid[0]) # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the result grid with -1 distance_grid = [[-1 for _ in range(m)] for _ in range(n)] # Queue for BFS queue = deque() # Enqueue all office locations and set their distances to 0 in the distance_grid for i in range(n): for j in range(m): if grid[i][j] == 1: queue.append((i, j)) distance_grid[i][j] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < n and 0 <= new_y < m and distance_grid[new_x][new_y] == -1: distance_grid[new_x][new_y] = distance_grid[x][y] + 1 queue.append((new_x, new_y)) return distance_grid"},{"question":"Write a function `josephus_survivor` that takes two arguments: `n` (the number of people in the circle) and `k` (the step rate). The function should return the position of the last person standing in the Josephus problem. The positions are numbered starting from 1. The Josephus problem is a theoretical problem related to a certain elimination game. It follows these steps: 1. Start with a group of people standing in a circle. 2. Count around the circle, remove every k-th person, and count around again from the next person after the removed one. 3. Repeat the process until only one person remains, and that person is the winner. For example: ```python josephus_survivor(7, 3) -> returns 4 (the 4th position survived) josephus_survivor(5, 2) -> returns 3 (the 3rd position survived) ``` For an overview of the Josephus Problem: https://en.wikipedia.org/wiki/Josephus_problem Hints: - A recursive or iterative approach can be used to solve this problem. - Consider modular arithmetic to help identify the position of the last person standing.","solution":"def josephus_survivor(n, k): Return the position of the last person standing in the Josephus problem. Args: n (int): The number of people in the circle. k (int): The step rate (every k-th person is removed). Returns: int: The position of the last remaining person, starting from 1. if n == 1: return 1 else: return (josephus_survivor(n - 1, k) + k - 1) % n + 1"},{"question":"A number is said to be **palindromic** if it reads the same backward as forward. For example, 121 is palindromic while 123 is not. Given an integer n, find the smallest integer x ge n such that x is palindromic. -----Input----- The first line of input contains one integer t (1 le t le 10^4) — the number of test cases. Then t lines follow, each containing a single integer n (1 le n le 10^6). Each test case will be a distinct integer. -----Output----- Output t lines, where the i-th line is a single integer containing the answer to the i-th test case. -----Examples----- Input 3 123 454 998 Output 131 454 999 -----Note----- Let us explain the three test cases in the sample. Test case 1: n = 123: The smallest palindromic number greater than or equal to 123 is 131. Test case 2: n = 454: The smallest palindromic number greater than or equal to 454 is 454 itself. Test case 3: n = 998: The smallest palindromic number greater than or equal to 998 is 999.","solution":"def is_palindrome(x): Check if a number is a palindrome return str(x) == str(x)[::-1] def next_palindrome(n): Finds the smallest palindrome greater than or equal to n while not is_palindrome(n): n += 1 return n def find_smallest_palindromes(test_cases): Find the smallest palindromes for each given test case results = [] for n in test_cases: results.append(next_palindrome(n)) return results"},{"question":"You are given a list of integers. You need to rearrange the integers in such a way that all the positive numbers appear before the negative numbers while preserving the relative order of both positive and negative numbers. Write a function `rearrange_integers` that takes a list of integers as input and returns a new list that meets the above criteria. Examples ```python rearrange_integers([4, -1, 9, 3, -7, -5, 6]) ``` Output: ```python [4, 9, 3, 6, -1, -7, -5] ``` ```python rearrange_integers([-4, -1, -3, 3, 2]) ``` Output: ```python [3, 2, -4, -1, -3] ``` ```python rearrange_integers([1, 2, 3, -1, -2, -3]) ``` Output: ```python [1, 2, 3, -1, -2, -3] ``` The function should handle an empty list input accordingly by returning an empty list as output. Note that the relative order of both positive and negative integers in the original list must be preserved in the resulting list.","solution":"def rearrange_integers(arr): Rearranges a list of integers such that positive numbers appear before negative numbers while preserving the relative order of both. positives = [x for x in arr if x >= 0] negatives = [x for x in arr if x < 0] return positives + negatives"},{"question":"In operational research and computer science, the **knapsack problem** is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. There are several variants of the knapsack problem that exist; the one we will consider here is the 0/1 knapsack problem. In this problem, you can either include an item in the knapsack or exclude it (hence the name 0/1). Your task is to write a function to solve this problem. The function should take the following parameters: 1. An integer array `values`, where `values[i]` denotes the value of the ith item. 2. An integer array `weights`, where `weights[i]` denotes the weight of the ith item. 3. An integer `capacity` which denotes the maximum weight the knapsack can carry. The function should return the maximum value that can be obtained by selecting items such that their total weight does not exceed the capacity of the knapsack. Example ```python values = [60, 100, 120] weights = [10, 20, 30] capacity = 50 knapsack(values, weights, capacity) ``` Output: ``` 220 ``` In this example, the optimal solution is to take the first and the third item, which gives a total value of 60 + 120 = 180 and total weight of 10 + 30 = 40 ≤ 50 (capacity).","solution":"def knapsack(values, weights, capacity): n = len(values) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] return dp[n][capacity]"},{"question":"The Kingdom of Gregland consists of n cities and m roads connecting some of them. Greg, the king, is very fond of fireworks and wants to celebrate his birthday with a dazzling display. He wants to set up fireworks in some cities such that at least one city in each connected component of the cities has a firework show. The King also wants to minimize the total cost of setting up the fireworks. Each city i has a cost c_i (1 ≤ i ≤ n) to set up fireworks. Help King Greg determine the minimum cost to achieve his goal. -----Input----- The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) — the number of cities and roads respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — a road between city u and city v. The last line contains n integers c_1, c_2, ..., c_n — the cost of setting up fireworks in each city. (1 ≤ c_i ≤ 10000) -----Output----- Print a single integer representing the minimum cost to ensure every connected component has at least one city with fireworks. -----Example----- Input 5 3 1 2 2 3 4 5 3 2 1 10 5 Output 6 -----Note----- In the sample, there are two connected components: {1, 2, 3} and {4, 5}. The optimal way is to set up fireworks in city 3 (cost = 1) and city 4 (cost = 10), ensuring the minimum total cost of 1 + 5 = 6.","solution":"def find_min_firework_cost(n, m, roads, costs): # Helper function for Depth First Search (DFS) def dfs(node, visited, adjacency_list, component): visited[node] = True component.append(node) for neighbor in adjacency_list[node]: if not visited[neighbor]: dfs(neighbor, visited, adjacency_list, component) # Create adjacency list representation of the graph adjacency_list = [[] for _ in range(n)] for u, v in roads: adjacency_list[u - 1].append(v - 1) adjacency_list[v - 1].append(u - 1) visited = [False] * n components = [] # Find all connected components using DFS for i in range(n): if not visited[i]: component = [] dfs(i, visited, adjacency_list, component) components.append(component) # Find the minimum cost to place fireworks in each component min_cost = 0 for component in components: min_cost += min(costs[node] for node in component) return min_cost"},{"question":"You are given a list of positive integers. Every integer appears exactly twice, except for one integer which appears only once. Your task is to find and return the integer that appears only once. For example, in the list `[4, 2, 3, 4, 1, 3, 2]`, the integer that appears only once is `1`. -----Input----- The first line contains a single integer n (1 leq n leq 10^6) — the number of integers in the list. Note that n is always odd. The second line contains n space-separated integers representing the list. -----Output----- Print the integer that appears only once in the list. -----Example----- Input 7 4 2 3 4 1 3 2 Output 1 -----Note----- In the example above, the integer 1 is the only integer that appears exactly once, while all other integers appear exactly twice.","solution":"def find_unique_integer(n, integer_list): Find the integer that appears only once in a list where every integer appears exactly twice except for one integer. Parameters: n (int): The number of integers in the list (always odd). integer_list (list of int): The list containing the integers. Returns: int: The integer that appears only once in the list. from collections import Counter counter = Counter(integer_list) for key, value in counter.items(): if value == 1: return key"},{"question":"The neighborhood watch group has decided to set up a simple security system in which people can report suspicious activities happening around their homes. They have decided to use a text-based system for this purpose. You are required to develop a text analyzer that helps the neighborhood watch group by summarizing the reports they receive quickly. The reports contain sentences describing the activities. Your task is to create a program that identifies and counts the number of unique words in the report and then generates a summary with the count of each unique word. The neighborhood watch group has requested that the output be sorted alphabetically by the words. **Input:** A single string containing the report with up to 1000 characters. The string contains only lowercase letters and spaces. **Output:** Print each unique word along with its count in the following format: `word: count`. The output should be sorted alphabetically by the words. **Example:** Input: ``` there was a cat that saw another cat ``` Output: ``` a: 1 another: 1 cat: 2 saw: 1 that: 1 there: 1 was: 1 ``` **Note:** - A word is defined as a sequence of lowercase letters. - Words are separated by spaces. - Do not use any built-in libraries for word counting functions. Write your own implementation. - Handle words with the same count by only listing them once.","solution":"def summarize_report(report): Summarizes a text report by counting the occurrences of each unique word. Parameters: report (str): A string containing the report text Returns: dict: A dictionary where keys are unique words and values are their counts words = report.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 summary = {k: v for k, v in sorted(word_count.items())} for word, count in summary.items(): print(f\\"{word}: {count}\\") # Example usage report = \\"there was a cat that saw another cat\\" summarize_report(report)"},{"question":"Given a string where each character can be an open parenthesis \'(\' or a close parenthesis \')\'. Your task is to determine the minimum number of characters that must be removed to make the string valid. A string is considered valid if open parentheses are closed properly. Example 1: Input: \\"(()))(\\" Output: 2 Explanation: We need to remove the last \'(\' and the second last \')\' to make the string valid. Example 2: Input: \\"()()()\\" Output: 0 Explanation: The string is already valid, so no characters need to be removed. Example 3: Input: \\")))(((\\" Output: 6 Explanation: We need to remove all characters to make the string valid. Your Task: You don\'t need to read input or print anything. Complete the function `minRemoveToMakeValid()` which takes a string `s` as an input parameter and returns the minimum number of characters that must be removed to make the string valid. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 <= s.length <= 10^5","solution":"def minRemoveToMakeValid(s): Returns the minimum number of characters that must be removed to make the string valid. open_count = 0 close_count = 0 # First pass: count invalid close parentheses for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_count += 1 return open_count + close_count"},{"question":"You are given a 2D grid with n rows and m columns. Each cell in the grid contains a lowercase English letter (\'a\' to \'z\'). Your task is to determine if it is possible to start at any cell on the grid and form a cyclic path that spells out the word \\"cycle\\". A cyclic path involves moving only up, down, left, or right, and can revisit the same cell. Note: - You are allowed to revisit the same cell, provided it follows the movement rules. - The path should spell \\"cycle\\" and return to the starting cell without breaking the sequence. Input The first line contains two integers n and m (1 ≤ n, m ≤ 300) — the number of rows and columns of the grid, respectively. Each of the next n lines contains m lowercase English letters representing the grid. Output Print \\"YES\\" if it is possible to form cyclic \\"cycle\\" in the grid, otherwise print \\"NO\\". Examples Input 3 3 cdd yce cle Output YES Input 5 5 abcde fghij klmno pqrst uvwxy Output NO Input 3 4 abcd eyel ycyc Output YES","solution":"def is_cyclic_cycle(grid, n, m): # Directions for moving in the grid: right, left, down, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] target_word = \\"cycle\\" word_len = len(target_word) def is_valid(x, y, prev_x, prev_y, pos): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != target_word[pos]: return False return (x, y) != (prev_x, prev_y) def dfs(x, y, prev_x, prev_y, pos): if pos == word_len - 1 and grid[x][y] == target_word[pos]: return True for dx, dy in directions: next_x, next_y = x + dx, y + dy if is_valid(next_x, next_y, prev_x, prev_y, (pos + 1) % word_len): if dfs(next_x, next_y, x, y, (pos + 1) % word_len): return True return False for i in range(n): for j in range(m): if grid[i][j] == target_word[0]: if dfs(i, j, -1, -1, 0): return \\"YES\\" return \\"NO\\""},{"question":"Anna has a list of integers and she wants to know how many special integers it contains. An integer is considered special if its digits can be arranged to form a palindrome. By definition, a palindrome is a number that reads the same backward as forward. Write a program that takes an input list of n integers (1 <= n <= 10^5), where each integer in the list is between 0 and 10^9. Your task is to determine how many special integers are present in the input list. Input The first line contains an integer n, the number of integers in the list. The second line contains n space-separated integers which represent the list. Output Print a single integer representing the number of special integers in the list. Examples Input 5 121 131 123 787 12 Output 3 Input 3 222 12321 445 Output 3","solution":"def is_special(n: int) -> bool: Determines if the digits of an integer can be arranged to form a palindrome. from collections import Counter # Convert integer to string to get its digits digits = str(n) # Count occurrences of each digit count = Counter(digits) # A number can form a palindrome if at most one digit has an odd count odd_count = sum(1 for v in count.values() if v % 2 != 0) return odd_count <= 1 def count_special_integers(n: int, integers: list) -> int: Counts how many integers in the list are special. return sum(is_special(num) for num in integers)"},{"question":"Consider an n x m grid, where each cell contains an integer. You have a robot starting at the top-left corner (1, 1) and needs to reach the bottom-right corner (n, m). The robot can only move right or down at any point in time. Your goal is to determine the minimum path sum from the top-left corner to the bottom-right corner. The path sum is the sum of the integers in the cells visited along the path. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m integers, where the j-th integer in the i-th line represents the value in the cell (i, j) of the grid. Output Output the minimum path sum from the top-left corner to the bottom-right corner. Examples Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Input: 2 2 1 2 1 1 Output: 3 Note: For the first example: The minimum path is 1→3→1→1→1, resulting in a path sum of 7. For the second example: The minimum path is 1→2→1, resulting in a path sum of 3.","solution":"def min_path_sum(grid): Function to find the minimum path sum in a grid by only moving right or down. Parameters: grid (list of list of ints): 2D grid where each cell contains an integer value. Returns: int: The minimum path sum from the top-left corner to the bottom-right corner. n = len(grid) m = len(grid[0]) # Create a 2D array to store the cumulative minimum path sums dp = [[0] * m for _ in range(n)] # Initialize the start position dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Compute the cumulative minimum path sum for the rest of the grid for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Three friends, Alex, Bob, and Charlie, like to compete against each other in a unique coding challenge. They take turns in a sequence and need to complete different tasks. The challenge consists of compiling and debugging a piece of code. They pass a coded message back and forth which contains the following instructions: - \\"A\\" indicates that Alex compiles or debugs the code. - \\"B\\" indicates that Bob compiles or debugs the code. - \\"C\\" indicates that Charlie compiles or debugs the code. If any participant faces an error while debugging, they hand over the task to the next participant in the order — Alex passes to Bob, Bob passes to Charlie, and Charlie passes to Alex. If a participant compiles the code successfully, they get an additional chance to debug any errors if they arise. Initially, the task is started by Alex, and participants perform their actions based on the instruction sequence. The task is considered done successfully if the coded sequence is entirely processed. Write a program that determines the winner who finally compiles and successfully completes the task based on the coded instructions provided. -----Input----- The input consists of a single test case with a string s ( 1 leq text{length of } s leq 100 ) which contains only the characters \\"A\\", \\"B\\", and \\"C\\". -----Output----- Output a single character representing the winner \\"A\\" for Alex, \\"B\\" for Bob, or \\"C\\" for Charlie. -----Examples----- Sample Input 1: \\"AACCB\\" Sample Output 1: B Sample Input 2: \\"CBCAAA\\" Sample Output 2: A","solution":"def find_winner(s): Determines the winner of the coding challenge based on the instruction sequence. Arguments: s -- a string containing the sequence of instructions (\'A\', \'B\', \'C\') Returns: a single character \'A\', \'B\', or \'C\' representing the winner. last_acting_person = \'A\' # Start with Alex by default for char in s: last_acting_person = char return last_acting_person"},{"question":"Susie loves to play with dominoes. She has a rectangular board with dimensions n by m, where n denotes the number of rows and m denotes the number of columns (1 ≤ n, m ≤ 100). Each cell of the board can either be empty or contain a domino piece. If a cell contains a domino, it completely occupies a 1x2 or 2x1 area, and no two dominoes overlap. Susie is curious about the maximum number of domino pieces she can place on the board under the constraint that no two dominoes overlap. Help her determine this maximum number. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100), the dimensions of the board. The next n lines each contain m characters. A character is either \'.\' (representing an empty cell) or \'X\' (representing a filled cell where no domino can be placed). Output Print a single integer — the maximum number of domino pieces that can be placed on the board without any overlap. Examples Input 2 3 . . . X . . Output 2 Input 4 4 . . . . . X X . . . . . . X . . Output 6 Note In the first example, one possible solution is to place two horizontal dominoes in the first row, and one vertical domino in the second and third row. In the second example, one possible solution is to place six vertical dominoes in the available empty slots without overlapping with any \'X\' cells.","solution":"def max_dominoes(n, m, board): Returns the maximum number of dominoes that can be placed on the given n by m board such that no two dominoes overlap. Assumes that an empty cell is represented by \'.\' and a blocked cell by \'X\'. # Calculate the maximum number of 2-cell dominoes that can fit in the board empty_cells = sum(row.count(\'.\') for row in board) return empty_cells // 2 # Example usage: # n, m = (2, 3) # board = [\'...\', \'X..\'] # Result should be 2 # n, m = (4, 4) # board = [\'....\', \'.XX.\', \'....\', \'.X..\'] # Result should be 6"},{"question":"Given two binary strings, write a function that returns their sum (also in binary). The input strings are both non-empty and contain only the characters \'1\' or \'0\'. Your task is to perform the binary addition and account for any carry operations during the addition. You must not use any libraries or built-in methods for binary addition or conversion; manual addition logic should be applied. SAMPLE INPUT 1010 1101 SAMPLE OUTPUT 10111 Explanation EXAMPLE 1:- - Align the binary strings, adding from right to left: 1. 0+1 -> sum is 1, no carry. 2. 1+0 -> sum is 1, no carry. 3. 0+1 -> sum is 1, no carry. 4. 1+1 -> sum is 0, with a carry over. - Finally, we add the carry to the next significant bit: 1. The carry from the last addition is added to the next significant bit, i.e., 1. The sum is thus: 10111","solution":"def add_binary(a, b): Returns the sum of two binary strings as a binary string. # Ensure the strings are of the same length by padding the shorter one with zeros max_len = max(len(a), len(b)) a = a.zfill(max_len) b = b.zfill(max_len) carry = 0 result = [] # Traverse the binary strings from right (least significant digit) to left for i in range(max_len - 1, -1, -1): bit_a = int(a[i]) bit_b = int(b[i]) # Binary addition and carry calculation total = bit_a + bit_b + carry result_bit = total % 2 # Bit to add to the result carry = total // 2 # Next carry result.append(str(result_bit)) # If there\'s carry left at the end, add it to the result if carry != 0: result.append(str(carry)) # Since the result is stored in reverse order, revert it back result.reverse() return \'\'.join(result)"},{"question":"A man named Surya loves to collect and order gemstones. He has N gemstones that are initially numbered 1 to N and labeled with unique integers. Surya likes to sort them in ascending order based on their labels. Unfortunately, his order management software broke down, and he has to figure out the right order of labels manually. Surya can swap the gemstones using a specific tool which allows him to swap the position of any two gemstones at once. Surya has to restore the correct order using the minimum number of such swaps. Write a program to help Surya determine the minimum number of swaps required to sort the gemstones. # Input - The first line contains an integer N (1 ≤ N ≤ 10^5), the number of gemstones. - The second line contains N distinct integers, representing the labels on the gemstones in their current order. # Output - Print a single integer, the minimum number of swaps required to sort the gemstones. # Example Input ``` 5 4 3 2 5 1 ``` Output ``` 3 ``` Explanation Surya can sort the gemstones in the following way with minimum swaps: 1. Swap gem 1 and gem 5: [1, 3, 2, 5, 4] 2. Swap gem 3 and gem 2: [1, 2, 3, 5, 4] 3. Swap gem 4 and gem 5: [1, 2, 3, 4, 5] # Note 1. In the given example, Surya needs exactly 3 swaps to sort the gemstones into [1, 2, 3, 4, 5].","solution":"def minimum_swaps(N, gemstones): # Create a list of tuples where each tuple is (value, index) # Sorting this list will show us the target index of each gemstone indexed_gemstones = [(gemstones[i], i) for i in range(N)] indexed_gemstones.sort() # Array to check if the gemstones have been visited during the cycle visited = [False] * N swaps = 0 for i in range(N): # If gemstone is already visited or already in the correct position, skip it if visited[i] or indexed_gemstones[i][1] == i: continue # Start a new cycle cycle_size = 0 x = i while not visited[x]: visited[x] = True x = indexed_gemstones[x][1] cycle_size += 1 # If cycle size is greater than 0, we made (cycle_size - 1) swaps to fix this cycle if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Write a Python function `rotate_array` to rotate an array to the right by `k` steps, where `k` is non-negative. # Instructions: - The function should take in two arguments: the array (`arr`) which is a list of integers, and `k` which is a non-negative integer. - The rotation process should shift elements to the right, wrapping elements that fall off the end back to the beginning. - Modifying the array in-place is preferred, but returning a new rotated array is acceptable as well. - Handle cases where `k` is greater than the length of the array by using appropriate mathematical operations. # Function Signature ```python def rotate_array(arr: List[int], k: int) -> None: pass ``` # Example Input ```python arr = [1, 2, 3, 4, 5] k = 2 ``` Output ```python [4, 5, 1, 2, 3] ``` Input ```python arr = [7, 7, 7, 7] k = 3 ``` Output ```python [7, 7, 7, 7] ``` # Constraints - The length of the array (`n`) will be in the range [0, 10^5]. - The elements in the array are integers. - `0 <= k <= 10^5`. # Notes - Ensure the function performs efficiently, even for large values of `n` and `k`. - Consider edge cases such as an empty array or `k` being zero.","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> None: Rotates the array to the right by k steps. arr: List[int] - list of integers to be rotated k: int - number of steps to rotate the array to the right n = len(arr) if n == 0 or k == 0: return k = k % n # In case k is greater than the length of the array arr[:] = arr[-k:] + arr[:-k]"},{"question":"# Task You are given a list of integers. Your task is to implement a function that sorts the list using a modified bubble sort algorithm. The modified bubble sort should stop early if the list is already sorted at any point during the process. Function Signature `def modified_bubble_sort(arr: List[int]) -> List[int]:` Input - `arr` (List[int]): A list of integers to be sorted. The length of the list is between 1 and 10^4. Output - Return a list of integers sorted in ascending order. Example ```python modified_bubble_sort([3, 2, 1]) # Output: [1, 2, 3] modified_bubble_sort([1, 2, 3, 4, 5]) # Output: [1, 2, 3, 4, 5] modified_bubble_sort([]) # Output: [] modified_bubble_sort([5, 1, 4, 2, 8]) # Output: [1, 2, 4, 5, 8] ``` Note - The standard bubble sort has a time complexity of O(n^2). - In this modified version, if during any inner loop no swaps are made, the algorithm should terminate early as the list is already sorted.","solution":"from typing import List def modified_bubble_sort(arr: List[int]) -> List[int]: Sorts the list using a modified bubble sort algorithm that stops early if the list is already sorted at any point during the process. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no two elements were swapped by inner loop, then break if not swapped: break return arr"},{"question":"You are given a list of integers representing the heights of buildings in a city. Your task is to determine the number of buildings visible when viewed from the left side. A building is visible if there are no taller buildings before it. -----Input----- The first line of the input contains a single integer N (1 ≤ N ≤ 10^5), the number of buildings. The second line contains N space-separated integers h_1, h_2, ..., h_N (1 ≤ h_i ≤ 10^9), representing the heights of the buildings. -----Output----- Output a single integer, the number of buildings visible from the left side. -----Examples----- Input 6 3 1 4 7 5 2 Output 3 Input 5 1 2 3 5 4 Output 4 -----Note----- In the first example, buildings with heights 3, 4, and 7 are visible from the left side. Buildings with heights 1, 5, and 2 are not visible because they are obscured by taller buildings in front of them.","solution":"def count_visible_buildings(buildings): Returns the number of buildings visible from the left side, where no taller buildings are before the current building. if not buildings: return 0 visible_count = 0 max_height = 0 for height in buildings: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Write a program that determines if a number is a \\"perfect number.\\" A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding the number itself). ------ Input Format ------ - The first line of the input contains T - the number of test cases. Then the test cases follow. - Each test case contains a single line of input, which contains a single integer N. ------ Output Format ------ For each test case, output on a single line \\"YES\\" if the number is a perfect number, and \\"NO\\" if it is not. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 ----- Sample Input 1 ------ 3 6 28 15 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: 6 has divisors 1, 2, and 3. 1 + 2 + 3 = 6, so 6 is a perfect number. Test case 2: 28 has divisors 1, 2, 4, 7, and 14. 1 + 2 + 4 + 7 + 14 = 28, so 28 is a perfect number. Test case 3: 15 has divisors 1, 3, and 5. 1 + 3 + 5 = 9, so 15 is not a perfect number.","solution":"def is_perfect_number(n): Determines if the number n is a perfect number. if n <= 1: return False divisor_sum = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: divisor_sum += i if i != n // i: divisor_sum += n // i return divisor_sum == n def process_test_cases(test_cases): Processes a list of test cases to determine if each number is a perfect number. Returns a list of results (\\"YES\\" or \\"NO\\"). results = [] for n in test_cases: if is_perfect_number(n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are working on a team to develop a new social media platform. One of the features you need to implement is the ability to determine the popularity of different hashtags over a period of time. Every day, users post statuses with various hashtags, and you need to determine the most popular hashtag for each day, as well as the most popular hashtag over the entire period. Input: The first line contains the integer N representing the number of days. Each of the following N lines contains a space-separated list of hashtags used in posts for that day. A hashtag is a string starting with the \'#\' character, followed by alphanumeric characters and underscores. Output: Print the most popular hashtag for each day on separate lines. If multiple hashtags have the same frequency on a given day, print the lexicographically smallest one. Finally, print the most popular hashtag over all days. If multiple hashtags have the same overall frequency, print the lexicographically smallest one. Constraints: 1 ≤ N ≤ 500 1 ≤ length of each day\'s hashtag list ≤ 10^4 Each hashtag starts with \'#\' and followed by alphanumeric characters or underscores. Each hashtag is at most 50 characters long. Sample Input 3 #apple #banana #apple #banana #cherry #banana #banana #apple #cherry #cherry #banana #apple #apple #apple #cherry Sample Output #apple #banana #apple #apple Explanation: On day 1, both #apple and #banana appear twice. Lexicographically, #apple comes first, so it is chosen. On day 2, #banana appears twice, while others appear less frequently. On day 3, #apple appears three times, the most for that day. Overall, #apple appears more frequently (6 times) compared to #banana (5 times), making it the most popular hashtag over all days.","solution":"def most_popular_hashtags(n, days): from collections import Counter # Initialize a counter for overall hashtags. overall_counter = Counter() daily_most_popular = [] for day in days: day_hashtags = day.split() day_counter = Counter(day_hashtags) overall_counter.update(day_counter) # Determine the most popular hashtag for the day. most_popular = min( day_counter.items(), key=lambda x: (-x[1], x[0]) )[0] daily_most_popular.append(most_popular) # Determine the most popular hashtag overall. overall_most_popular = min( overall_counter.items(), key=lambda x: (-x[1], x[0]) )[0] return daily_most_popular, overall_most_popular # Example usage: # n = 3 # days = [ # \\"#apple #banana #apple #banana #cherry\\", # \\"#banana #banana #apple #cherry #cherry\\", # \\"#banana #apple #apple #apple #cherry\\" # ] # print(most_popular_hashtags(n, days))"},{"question":"Given a sequence of n non-negative integers representing the heights of walls in a 1-dimensional landscape, compute the maximum amount of water that could be trapped between the walls after a rainfall. -----Input----- First a line with 1 leq n leq 100000 – the number of walls in the landscape. Then a single line with n non-negative integers each representing the height of a wall. Each integer is in the interval [0, 10000]. -----Output----- A single integer representing the maximum amount of trapped water. -----Examples----- Sample Input: 6 0 1 0 2 1 0 Sample Output: 1","solution":"def trapped_water(heights): Computes the maximum amount of water that could be trapped between the walls after a rainfall. :param heights: List of integers representing the height of the walls. :return: Integer representing the maximum amount of trapped water. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water = 0 for i in range(n): water += min(left_max[i], right_max[i]) - heights[i] return water"},{"question":"In a grid city, Joe wishes to travel from his house located at point (x1, y1) to his friend\'s house at point (x2, y2) only using the roads that run exactly horizontally or vertically. Given two coordinates on the grid, calculate the shortest path Joe must take to travel from his house to his friend\'s house, considering that he can only move along the roads. Constraints * 0 ≤ x1, y1, x2, y2 ≤ 1000 * (x1, y1) != (x2, y2) Input Two pairs of integers x1, y1, x2, y2 Output Print the shortest distance on one line. Examples Input 1 1 3 4 Output 5 Input 100 200 300 400 Output 400","solution":"def shortest_path(x1, y1, x2, y2): Calculates the shortest path between two points (x1, y1) and (x2, y2) in a grid city where travel is restricted to horizontal and vertical roads. return abs(x1 - x2) + abs(y1 - y2)"},{"question":"Alice has a list of N integers and a special operation she can perform on it. The operation consists of selecting two consecutive elements in the list and replacing them with their sum. Alice is interested in knowing the minimum possible length of the list after performing the operation any number of times. Constraints - 1 le N le 10^5 - -10^9 le A_i le 10^9 - All values in input are integers. Input Input is given from Standard Input in the following format: ``` N A_1 A_2 ldots A_N ``` Output Print a single integer, indicating the minimum possible length of the list. Sample Input 1 ``` 4 1 2 3 4 ``` Sample Output 1 ``` 1 ``` **Explanation:** Each pair of consecutive elements can be replaced with their sum until there is only one element left. Sample Input 2 ``` 5 1 -1 1 -1 1 ``` Sample Output 2 ``` 1 ``` **Explanation:** Similar to the first example, we can reduce the list to one single element by continuously summing consecutive pairs. Sample Input 3 ``` 3 1 2 3 ``` Sample Output 3 ``` 1 ``` **Explanation:** Once again, consecutively summing pairs can lead to a single final element, where the operations are: - sum 1+2 = 3, list becomes [3, 3] - sum 3+3 = 6, list becomes [6]","solution":"def min_list_length_after_operations(n, a): Given a list of N integers, return the minimum possible length of the list after performing the defined consecutive element sum operations any number of times. return 1"},{"question":"Palindrome Word Search You are given a grid of size M x N filled with lowercase English letters. Your task is to determine the number of distinct palindromic sequences of characters that can be found in the grid. A palindromic sequence reads the same forwards and backwards and can be obtained by traversing the grid in any one of the following directions: up, down, left, right, or along any of the four diagonals. A sequence must contain at least two letters to be considered as valid. INPUT: The input contains multiple test cases. Each test case begins with a line containing two integers, M and N, the number of rows and columns in the grid, respectively. Then follows M lines, each containing N characters representing the grid. OUTPUT: For each test case, output a single line containing an integer representing the number of distinct palindromic sequences in the given grid. CONSTRAINTS: 0 < T ≤ 10 2 ≤ M, N ≤ 50 The grid contains only lowercase English letters (a-z). SAMPLE INPUT: 1 3 3 aab aba bcc SAMPLE OUTPUT: 5 Explanation: The distinct palindromic sequences are \\"aa\\", \\"aba\\", \\"bab\\", \\"bccb\\", \\"cc\\".","solution":"def get_palindromic_sequences(grid): M, N = len(grid), len(grid[0]) palindromic_sequences = set() def is_palindrome(seq): return seq == seq[::-1] def check_palindrome_in_direction(dr, dc): for r in range(M): for c in range(N): sequence = \'\' x, y = r, c while 0 <= x < M and 0 <= y < N: sequence += grid[x][y] if len(sequence) >= 2 and is_palindrome(sequence): palindromic_sequences.add(sequence) x += dr y += dc # Check all 8 possible directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)] for dr, dc in directions: check_palindrome_in_direction(dr, dc) return len(palindromic_sequences) def palindromic_word_search(test_cases): results = [] for grid in test_cases: results.append(get_palindromic_sequences(grid)) return results"},{"question":"Given a string S consisting of only lowercase characters, return the count of each character in the string in the form of a dictionary. The keys of the dictionary should be the characters, and the values should be their respective counts. Example 1: Input: S = \\"apple\\" Output: {\'a\': 1, \'p\': 2, \'l\': 1, \'e\': 1} Explanation: Character \'a\' appears 1 time, \'p\' appears 2 times, \'l\' appears 1 time, and \'e\' appears 1 time. Example 2: Input: S = \\"banana\\" Output: {\'b\': 1, \'a\': 3, \'n\': 2} Explanation: Character \'b\' appears 1 time, \'a\' appears 3 times, and \'n\' appears 2 times. Example 3: Input: S = \\"cherry\\" Output: {\'c\': 1, \'h\': 1, \'e\': 1, \'r\': 2, \'y\': 1} Explanation: Character \'c\' appears 1 time, \'h\' appears 1 time, \'e\' appears 1 time, \'r\' appears 2 times, and \'y\' appears 1 time. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countCharacters() which accepts a string S as an input parameter and returns a dictionary with the count of each character. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) [excluding output space, as the output size depends on the input] Constraints: 1 <= len(S) <= 10^5","solution":"def countCharacters(S): Returns a dictionary with the count of each character in the string S. Parameters: S (str): The input string consisting of only lowercase characters. Returns: dict: A dictionary with characters as keys and their respective counts as values. char_count = {} for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Task Create a function **digit_frequency** which takes two arguments - a string `s` and a digit character `d`. The function should return the frequency of digit `d` in the string `s`. * If the string is empty, it should return 0. * The string can contain any characters, but the function should only count occurrences of the specified digit. * The digit character `d` will always be a single character string representing a digit (i.e., \'0\' to \'9\'). Examples digit_frequency(\\"123456712345671234567\\", \\"1\\"): 3 digit_frequency(\\"abracadabra123\\", \\"3\\"): 1 digit_frequency(\\"\\", \\"1\\"): 0","solution":"def digit_frequency(s, d): Returns the frequency of digit d in the string s. Parameters: s (str): The string to search within. d (str): The digit character to count. Returns: int: The frequency of the digit d in the string s. if not s: return 0 return s.count(d)"},{"question":"----- You are tasked with creating an application that manages a database of books. Each book has a title, author, and genre. The application needs to perform several operations: adding a new book, finding books by a certain author, and listing all books of a certain genre. **Input Format:** The first line contains an integer `Q` which denotes the number of operations. Each of the next `Q` lines contains an operation in one of the following formats: 1. `ADD title author genre` - Add a book with the given title, author, and genre. 2. `FIND_AUTHOR author` - List all books by the given author. 3. `LIST_GENRE genre` - List all books of the given genre. **Output Format:** For each `FIND_AUTHOR` and `LIST_GENRE` operation, print the corresponding list of books, each on a new line. The books should be printed in the order they were added, with `title` listed first, followed by the `author`, and then the `genre`. If there are no books matching the criteria, print `NO BOOKS` on a new line. **Constraints:** - `1 ≤ Q ≤ 100` - Each `title`, `author`, and `genre` is a string consisting of lowercase and/or uppercase letters and spaces, and its length does not exceed 100 characters. **Sample Input 1:** ``` 7 ADD Harry_Potter J.K_Rowling Fantasy ADD The_Hobbit J.R.R_Tolkien Fantasy ADD Origin Dan_Brown Mystery FIND_AUTHOR J.K_Rowling LIST_GENRE Fantasy ADD Inferno Dan_Brown Mystery LIST_GENRE Mystery ``` **Sample Output 1:** ``` Harry_Potter J.K_Rowling Fantasy Harry_Potter J.K_Rowling Fantasy The_Hobbit J.R.R_Tolkien Fantasy Origin Dan_Brown Mystery Inferno Dan_Brown Mystery ``` **Explanation:** 1. The first `FIND_AUTHOR` operation finds \\"Harry_Potter\\" by \\"J.K_Rowling\\". 2. The first `LIST_GENRE` operation lists all books of the genre \\"Fantasy\\", which are \\"Harry_Potter\\" by \\"J.K_Rowling\\" and \\"The_Hobbit\\" by \\"J.R.R_Tolkien\\". 3. The second `LIST_GENRE` operation lists all books of the genre \\"Mystery\\", which are \\"Origin\\" and \\"Inferno\\", both by \\"Dan_Brown\\".","solution":"class BookDatabase: def __init__(self): self.books = [] def add_book(self, title, author, genre): self.books.append((title, author, genre)) def find_author(self, author): result = [f\\"{title} {auth} {genr}\\" for title, auth, genr in self.books if auth == author] return result if result else [\\"NO BOOKS\\"] def list_genre(self, genre): result = [f\\"{title} {auth} {genr}\\" for title, auth, genr in self.books if genr == genre] return result if result else [\\"NO BOOKS\\"] def manage_books(operations): db = BookDatabase() output = [] for operation in operations: parts = operation.split(maxsplit=1) command = parts[0] if command == \\"ADD\\": _, title, author, genre = operation.split(maxsplit=3) db.add_book(title, author, genre) elif command == \\"FIND_AUTHOR\\": author = parts[1] output.extend(db.find_author(author)) elif command == \\"LIST_GENRE\\": genre = parts[1] output.extend(db.list_genre(genre)) return output"},{"question":"Write a function that takes in an array of integers and returns the maximum difference between any two elements such that the smaller element appears before the larger element in the array. The array will have at least two elements, and all elements will be positive integers. You do not need to consider different data types or empty arrays. For example, given the array `[2, 3, 1, 7, 9, 5, 11, 3, 5]`, the function should return 10, which is the difference between 11 and 1.","solution":"def max_difference(arr): Returns the maximum difference between any two elements such that the smaller element appears before the larger element in the array. min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): current_diff = arr[i] - min_element if current_diff > max_diff: max_diff = current_diff if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"A large library is organizing its vast collection of books. Each book in the library is classified by a unique International Standard Book Number (ISBN). The librarian needs a system to manage and verify the ISBNs efficiently. An ISBN consists of thirteen digits, and its validity can be checked using the following rule: - Starting from the left, multiply each digit alternatively by 1 and 3. - Sum all these products. - If the sum modulo 10 is 0, the ISBN is valid. Otherwise, it is not. Write a program that, given a list of ISBNs, validates each one and indicates whether it is valid or not. -----Input----- The input will consist of a single test case. The first line contains an integer ( n ) (( 1 le n le 1000 )), the number of ISBNs. The following ( n ) lines each contain one ISBN as a string of 13 digits (no hyphens or spaces). -----Output----- Output ( n ) lines, each containing \\"VALID\\" if the corresponding ISBN is valid, and \\"INVALID\\" otherwise. -----Examples----- Sample Input 1: 3 9781234567897 9781234567892 9780306406157 Sample Output 1: VALID INVALID VALID","solution":"def is_valid_isbn(isbn): Check if the given 13-digit ISBN is valid. :param isbn: A string representing a 13-digit ISBN. :return: \'VALID\' if the ISBN is valid, \'INVALID\' otherwise. if len(isbn) != 13 or not isbn.isdigit(): return \'INVALID\' total_sum = 0 for index, digit in enumerate(isbn): num = int(digit) if index % 2 == 0: total_sum += num else: total_sum += num * 3 return \'VALID\' if total_sum % 10 == 0 else \'INVALID\' def validate_isbns(isbns): Validate a list of ISBNs. :param isbns: A list of strings where each string is a 13-digit ISBN. :return: A list of strings where each string is \'VALID\' or \'INVALID\'. return [is_valid_isbn(isbn) for isbn in isbns]"},{"question":"A courier service wants to optimize its deliveries in a city with a grid layout of size R x C. Each cell in the grid can either be a road (represented by \'.\') or an obstacle (represented by \'#\'). The courier starts at the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner (R-1, C-1). They can only move right or down. Determine the number of distinct paths the courier can take to reach the destination. Input Format The first line contains two space-separated integers R and C, the number of rows and columns in the grid. The next R lines each contain a string of length C representing the grid. Output Format Output the number of distinct paths from the start to the destination. Since the number of paths can be very large, output the result modulo 10^9 + 7. Constraints **1 ≤ R, C ≤ 1000** SAMPLE INPUT 3 3 . . . . # . . . . SAMPLE OUTPUT 2 Explanation The possible paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In both paths, the courier avoids the obstacle at (1, 1).","solution":"MOD = 10**9 + 7 def num_paths(R, C, grid): # Initialize a 2D dp array with 0s. dp = [[0]*C for _ in range(R)] # Start point if grid[0][0] == \'.\': dp[0][0] = 1 # Fill the dp array for i in range(R): for j in range(C): if grid[i][j] == \'.\': if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD # The number of ways to reach the bottom-right corner return dp[R-1][C-1]"},{"question":"In the game of \\"Hand of Straights,\\" you are given an integer array `hand` and an integer `W`. Arrays represent a deck of cards where each card has an integer value. The rules of the game require you to rearrange the cards into groups where each group has exactly `W` consecutive cards. Write a function `isNStraightHand` that determines if you can rearrange the given array into `n` consecutive sequences of cards, each of length `W`. # Function Signature ```python def isNStraightHand(hand: List[int], W: int) -> bool: ``` # Input - `hand`: List[int] - An integer array representing the deck of cards (1 ≤ len(hand) ≤ 10^5, 1 ≤ hand[i] ≤ 10^9) - `W`: int - Length of each consecutive sequence group (1 ≤ W ≤ len(hand)) # Output - Return a boolean value - `True` if you can rearrange the array into `n` consecutive sequences of cards, else return `False`. # Example ```python isNStraightHand([1,2,3,6,2,3,4,7,8], 3) # Returns: True isNStraightHand([1,2,3,4,5], 4) # Returns: False ``` # Constraints - All numbers in the input array and the `W` value are positive integers. - Each group must be formed by exactly `W` consecutive cards. # Note A group of `W` consecutive cards means, if you sort the array, every group of `W` should have all the numbers from `min` to `min + W - 1`. If it\'s not possible to rearrange the cards this way, return `False`. # Explanation In the first example, we can form the following groups: - `[1,2,3]` - `[2,3,4]` - `[6,7,8]` Therefore, we return `True`.","solution":"from collections import Counter from typing import List def isNStraightHand(hand: List[int], W: int) -> bool: if len(hand) % W != 0: return False hand_count = Counter(hand) sorted_hand = sorted(hand_count) for card in sorted_hand: if hand_count[card] > 0: cards_needed = hand_count[card] for i in range(card, card + W): if hand_count[i] < cards_needed: return False hand_count[i] -= cards_needed return True"},{"question":"A string S is considered interesting if it contains at least one vowel and at least one consonant. A vowel is defined as one of the characters \'a\', \'e\', \'i\', \'o\', \'u\', and a consonant is any other alphabetic character. Write a function to determine if a given string S is interesting. -----Input----- The input consists of a single string S containing between 1 and 100 lowercase alphabetic characters. -----Output----- Output a single string “Yes” if S is interesting, or “No” otherwise. -----Examples----- Sample Input 1: hello Sample Output 1: Yes Sample Input 2: sky Sample Output 2: No Sample Input 3: aeiou Sample Output 3: No Sample Input 4: bcdfg Sample Output 4: No Sample Input 5: quick Sample Output 5: Yes","solution":"def is_interesting(S): Determine if string S is interesting. A string is considered interesting if it contains at least one vowel and at least one consonant. Parameters: S (str): The input string containing between 1 and 100 lowercase alphabetic characters. Returns: str: \\"Yes\\" if the string is interesting, \\"No\\" otherwise. vowels = set(\'aeiou\') contains_vowel = any(char in vowels for char in S) contains_consonant = any(char not in vowels for char in S) return \\"Yes\\" if contains_vowel and contains_consonant else \\"No\\""},{"question":"In a city grid, there are multiple delivery orders each needing to be delivered to a specific location from a warehouse located at the origin (0, 0). The delivery vehicle can move horizontally or vertically but not diagonally. Given the coordinates of each delivery location, you need to find the total minimum distance the delivery vehicle would travel if it delivers all orders individually, returning to the warehouse to pick up the next order each time. For example, if the delivery locations are (1, 2), (3, 4), and (0, 3), the minimum travel distances to and from these locations to the warehouse would be: - For (1, 2), travel is 1+2=3 each way, so 6 total. - For (3, 4), travel is 3+4=7 each way, so 14 total. - For (0, 3), travel is 0+3=3 each way, so 6 total. Thus, the total minimum distance is 6 + 14 + 6 = 26. -----Input----- The first line of input contains an integer N (1 leq N leq 1000) representing the number of delivery locations. The next N lines each contain two integers X_i and Y_i (-1000 leq X_i, Y_i leq 1000) representing the coordinates of the delivery location. -----Output----- Display the total minimum distance the delivery vehicle would travel to complete all deliveries, returning to the warehouse after each delivery. -----Examples----- Sample Input: 3 1 2 3 4 0 3 Sample Output: 26","solution":"def minimum_total_distance(n, coordinates): Compute the total minimum distance the delivery vehicle would travel to complete all deliveries. Args: n (int): Number of delivery locations. coordinates (list of tuple): List of tuples containing the delivery locations. Returns: int: Total minimum distance. total_distance = 0 for x, y in coordinates: total_distance += 2 * (abs(x) + abs(y)) return total_distance"},{"question":"Given an NxM matrix filled with non-negative integers, you are required to find the number of unique paths to get from the top-left corner of the matrix to the bottom-right corner. At any point in time, you can either move to the right or down to the next cell in the matrix. However, some cells contain obstacles, which are represented by -1. Paths cannot traverse through these cells. Your task is to determine the total number of unique paths from the top-left to the bottom-right corner while avoiding the obstacles. -----Input----- - The first line of input contains two integers, N and M, representing the number of rows and columns in the matrix. - The next N lines each contain M integers, describing the matrix. The value -1 represents an obstacle, while non-negative integers represent normal cells. -----Output----- - Output a single integer denoting the number of unique paths from the top-left corner to the bottom-right corner of the matrix. If no such path exists, output 0. -----Constraints----- - 1 ≤ N, M ≤ 100 - The values of the matrix are either -1 (representing an obstacle) or non-negative integers (representing a traversable cell). -----Examples----- **Example 1** Input: 3 3 0 0 0 0 -1 0 0 0 0 Output: 2 **Example 2** Input: 2 2 0 -1 -1 0 Output: 0 **Explanation** In the first example, there are 3x3 grid with one obstacle. There are exactly two unique paths to get to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, the path is blocked by obstacles making it impossible to reach the bottom-right corner, hence, the output is 0.","solution":"def unique_paths_with_obstacles(matrix): N = len(matrix) M = len(matrix[0]) # If the starting or ending point is an obstacle, return 0 if matrix[0][0] == -1 or matrix[N - 1][M - 1] == -1: return 0 # Create a DP table dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = 1 # Fill the DP table for i in range(N): for j in range(M): if matrix[i][j] == -1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[N - 1][M - 1]"},{"question":"Ava loves playing with strings. Recently, she has found a new way to enjoy her time by rearranging the characters of a string. Her goal is to see how many distinct strings can be formed using the characters of the given string. To make the task more fun, she wants to count not only the distinct permutations but also split the task by grouping all anagrams together. Given a string, write a program that finds the total number of distinct permutations that can be created using all the characters of the string, as well as groups them by their anagram classes. -----Input----- The input consists of a single line containing a string S (1 le |S| le 20), which may contain uppercase and lowercase letters only. -----Output----- Output an integer k, the number of distinct anagram groups (unique permutations) that can be formed with the characters of the string. Following that, output each unique permutation on a separate line in lexicographical order. -----Examples----- Sample Input 1: abc Sample Output 1: 6 abc acb bac bca cab cba Sample Input 2: aab Sample Output 2: 3 aab aba baa","solution":"from itertools import permutations def distinct_permutations(s): Returns the number of distinct permutations of the string `s` and the sorted list of those permutations. perm_set = set(permutations(s)) distinct_perms = sorted(\'\'.join(p) for p in perm_set) return len(distinct_perms), distinct_perms"},{"question":"Sarah is a botanist who loves to study the growth patterns of different plant species. Each plant species in her garden can be represented as a sequence of heights measured over several days. Sarah believes that a plant has a potential growth season if the sequence of its heights forms an increasing sequence. A sequence is considered increasing if each subsequent height is strictly greater than the previous one. Given a list of heights measured over several days, Sarah wants to identify the longest potential growth season for each plant. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 200,000) representing the number of height measurements. The second line contains n integers, each in the range 1 to 10^9, representing the heights of the plant over n days. -----Output----- Output a single integer, the length of the longest increasing subsequence of heights. -----Examples----- Input 5 2 1 3 2 5 Output 3 Input 6 5 1 6 2 3 4 Output 4","solution":"def longest_increasing_subsequence(heights): Finds the length of the longest increasing subsequence in a list of heights. Args: - heights (list of int): The heights of the plant over several days. Returns: int: The length of the longest increasing subsequence. if not heights: return 0 # LIS array to store the subsequence lengths lis = [1] * len(heights) # Build the lis array for i in range(1, len(heights)): for j in range(i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis array return max(lis)"},{"question":"You are working with a grid-based game where you can move from one cell to another by making certain types of moves. The game is played on an n times m grid, where each cell is either \\"walkable\\" or \\"blocked.\\" There are two types of moves allowed: 1. Move horizontally to an adjacent cell (left or right). 2. Move vertically to an adjacent cell (up or down). You are given a starting point (r_1, c_1) and a destination point (r_2, c_2). Determine if it is possible to move from the starting point to the destination point following the allowed moves on the grid. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns in the grid. The next n lines each contain m characters \'0\' or \'1\', where \'0\' represents a walkable cell and \'1\' represents a blocked cell. The next line contains four integers r_1, c_1, r_2, c_2 (1 leq r_1, r_2 leq n, 1 leq c_1, c_2 leq m) — the starting and destination cell coordinates. -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to reach the destination cell from the starting cell; otherwise, print \\"NO\\" (without quotes). -----Examples----- Input: 3 3 3 000 010 000 1 1 3 3 4 4 0000 0110 0000 0000 1 2 3 4 2 2 01 10 1 1 2 2 Output: YES YES NO -----Note----- In the first test case, you can move from (1, 1) to (2, 1) to (3, 1) to (3, 2) to (3, 3). In the second test case, you can move from (1, 2) to (2, 2) to (3, 2) to (3, 3) to (4, 3) to (4, 4). In the third test case, it is not possible to reach the destination cell since both possible paths are blocked.","solution":"from collections import deque def is_path_possible(n, m, grid, start, end): r1, c1 = start r2, c2 = end if grid[r1-1][c1-1] == \'1\' or grid[r2-1][c2-1] == \'1\': return \\"NO\\" queue = deque([(r1-1, c1-1)]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() visited.add((r1-1, c1-1)) while queue: x, y = queue.popleft() if (x, y) == (r2-1, c2-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'0\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" def process_test_cases(test_cases): results = [] for n, m, grid, start, end in test_cases: result = is_path_possible(n, m, grid, start, end) results.append(result) return results"},{"question":"You are given a list of `n` integers. Your task is to find an integer `k` that minimizes the sum of absolute differences between `k` and each element in the list. In other words, you need to find a number `k` such that the cost function defined by the sum of absolute differences is minimized. Note: - If there are multiple such integers, return any one of them. # Input Format - The first line contains an integer `n`, the number of elements in the list. - The second line contains `n` space-separated integers representing the elements of the list. # Output Format - Output a single integer `k` which minimizes the sum of absolute differences between `k` and each element in the list. # Constraints - `1 ≤ n ≤ 10^5` - `-10^9 ≤ element ≤ 10^9` # Example Input 1 ``` 5 1 2 3 4 5 ``` # Example Output 1 ``` 3 ``` # Explanation For `k=3`, the sum of absolute differences is `2 + 1 + 0 + 1 + 2 = 6`, which is the minimum possible sum in this case.","solution":"def find_minimizing_integer(arr): Finds an integer `k` that minimizes the sum of absolute differences between `k` and each element in the list. Parameters: arr (list of int): List of integers Returns: int: The integer `k` that minimizes the sum of absolute differences arr.sort() mid_index = len(arr) // 2 return arr[mid_index]"},{"question":"One day, you find yourself in a mystical forest filled with peculiar trees. There are n trees aligned in a straight row, and each tree has a certain number of magical fruits hanging from its branches. The fruits from tree i can be harvested and consumed once you overcome the guardian beast protecting it. One tricky part is that every guardian beast becomes more ferocious when you harvest from the adjacent tree as well. Here\'s the challenge: You want to gather the maximum number of magical fruits without triggering the anger of any guardian beasts on two adjacent trees. In simpler terms, if you harvest from tree i, you should not harvest from trees i-1 and i+1. Write a program that computes the maximum number of magical fruits you can collect following this rule. Input The first input line contains an integer n (1 ≤ n ≤ 100) — the number of trees. The second line contains n integers fi (1 ≤ fi ≤ 1000) — the number of magical fruits on the i-th tree. Numbers in the second line are divided by spaces. Output Output one integer — the maximum number of magical fruits you can collect without harvesting from adjacent trees. Examples Input 4 1 2 9 4 Output 10 Input 5 5 1 1 5 1 Output 10 Note In the first example, you harvest from the third tree (9 fruits) and the first tree (1 fruit) to get a total of 10 fruits and avoid triggering the anger of any adjacent guardian beasts. In the second example, you harvest from the first tree (5 fruits) and the fourth tree (5 fruits) to get a total of 10 fruits.","solution":"def max_fruits(n, fruits): if n == 0: return 0 if n == 1: return fruits[0] dp = [0] * n dp[0] = fruits[0] if n > 1: dp[1] = max(fruits[0], fruits[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + fruits[i]) return dp[-1] # Example usage: # print(max_fruits(4, [1, 2, 9, 4])) # Output: 10 # print(max_fruits(5, [5, 1, 1, 5, 1])) # Output: 10"},{"question":"Emily loves playing games on her computer. One day she came across a puzzle game where she has to form the largest possible number using the digits from a given number but each digit can be used only once. Being a fan of coding, she decided to write a program to help her solve the puzzle efficiently. Can you help Emily write this program? Input Format The input consists of a single string S, which represents a positive integer. Output Format Print the largest possible number that can be formed from the digits of S. Constraints 1 ≤ |S| ≤ 10^5 S consists of digits only and does not have any leading zeros. SAMPLE INPUT 293180 SAMPLE OUTPUT 983210 Explanation The digits of the number 293180 can be rearranged to form the largest possible number 983210. Each digit is used only once and the resulting number is the largest possible configuration of those digits.","solution":"def largest_possible_number(S): Returns the largest possible number that can be formed from the digits of S. # Sort the digits in descending order sorted_digits = sorted(S, reverse=True) # Join the sorted digits to form the largest number largest_number = \'\'.join(sorted_digits) return largest_number"},{"question":"In a gaming competition, a player\'s rank is determined based on their score. Higher scores yield better ranks, with the ranked positions starting from 1 (the best rank). Two players cannot have the same rank. Given a list of players\' scores, deduce the rank of each player. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of players. - The second line contains N space-separated integers representing the scores of the players. ------ Output Format ------ For each test case, print a single line with N space-separated integers representing the ranks of the players in the order their scores are provided. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{score} ≤ 1000 ------ Sample Input 1 ------ 2 5 50 30 60 90 10 3 40 40 20 ------ Sample Output 1 ------ 3 4 2 1 5 1 2 3 ------ Explanation 1 ------ Test Case 1: The scores are [50, 30, 60, 90, 10]. The sorted scores in descending order are [90, 60, 50, 30, 10]. Thus, the ranks are [3, 4, 2, 1, 5]. Test Case 2: The scores are [40, 40, 20]. The sorted scores in descending order are [40, 40, 20]. Thus, the ranks are [1, 2, 3].","solution":"def get_player_ranks(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] scores = test_cases[i][1] # Pairing scores with original indices indexed_scores = [(score, index) for index, score in enumerate(scores)] # Sorting by score in descending order sorted_scores = sorted(indexed_scores, key=lambda x: x[0], reverse=True) # Assigning ranks based on sorted order ranks = [0] * n for rank, (score, index) in enumerate(sorted_scores): ranks[index] = rank + 1 results.append(ranks) return results # Sample usage t = 2 test_cases = [ (5, [50, 30, 60, 90, 10]), (3, [40, 40, 20]) ] print(get_player_ranks(t, test_cases))"},{"question":"Write a function that finds the smallest positive integer that is evenly divisible by all of the numbers from 1 to n. Example: Input: 10 Output: 2520 Explanation: The smallest number that is evenly divisible by all of the numbers from 1 to 10 is 2520. Note: The range of n is [1, 20].","solution":"import math def smallest_multiple(n): Finds the smallest positive integer that is evenly divisible by all of the numbers from 1 to n. def lcm(a, b): return abs(a * b) // math.gcd(a, b) multiple = 1 for i in range(1, n + 1): multiple = lcm(multiple, i) return multiple"},{"question":"Katie wants to organize her bookshelf. She has a set of books, each with a width of 1 unit. The bookshelf has several slots in a row where books can fit. However, some slots are blocked and cannot hold a book. Katie wants to know the maximum number of consecutive books she can place on the shelf. Given a sequence of n slots, where each slot is represented as \'0\' (blocked) or \'1\' (available), find the length of the longest contiguous segment of available slots. Input The first line of input contains an integer T, the number of test cases. T test cases follow. Each test case consists of two lines. The first line contains an integer n, the number of slots on the bookshelf. The second line contains a string of length n, consisting of \'0\'s and \'1\'s, representing the slots. Output For each test case, print the length of the longest contiguous segment of available slots in a new line. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 10^6 SAMPLE INPUT 2 7 1101110 10 1000011000 SAMPLE OUTPUT 3 2","solution":"def longest_contiguous_books(T, test_cases): This function returns the length of the longest contiguous segment of available slots for each test case. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple consists of an integer n and a string of length n. Returns: list: A list where each element is the length of the longest contiguous segment of available slots for the corresponding test case. results = [] for i in range(T): n, slots = test_cases[i] max_length = 0 current_length = 0 for slot in slots: if slot == \'1\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 results.append(max_length) return results"},{"question":"Sophia is playing a card game with her friends. The game uses a deck of n cards, each card having a distinct integer value from 1 to n. Her objective is to draw a sequence of cards from the deck such that the sequence is strictly increasing in value. However, she wants to maximize the sum of the card values in her sequence. Each card can be drawn at most once. Given the number of cards n and the values of the cards in the deck, help Sophia determine the maximum sum of any strictly increasing sequence she can draw. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of cards in the deck. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the values of the cards in the deck. Output Print a single integer — the maximum sum of any strictly increasing sequence Sophia can draw. Examples Input 5 5 2 8 6 3 Output 17 Input 3 3 1 4 Output 7 Input 6 10 1 2 3 4 5 Output 15 Note In the first sample, the optimal sequence is [2, 3, 8], leading to a maximum sum of 2 + 3 + 8 = 13. In the second sample, the optimal sequence is [1, 3, 4], leading to a maximum sum of 1 + 3 + 4 = 8. In the third sample, the optimal sequence is [1, 2, 3, 4, 5], leading to a maximum sum of 1 + 2 + 3 + 4 + 5 = 15.","solution":"def max_sum_increasing_subsequence(n, cards): Given the number of cards n and the values of the cards in the deck, this function returns the maximum sum of any strictly increasing sequence of card values. if n == 0: return 0 # dp[i] will be the maximum sum of increasing subsequence ending with cards[i] dp = cards[:] for i in range(1, n): for j in range(i): if cards[i] > cards[j]: dp[i] = max(dp[i], dp[j] + cards[i]) return max(dp) # Examples for testing n1, cards1 = 5, [5, 2, 8, 6, 3] n2, cards2 = 3, [3, 1, 4] n3, cards3 = 6, [10, 1, 2, 3, 4, 5] print(max_sum_increasing_subsequence(n1, cards1)) # Output should be 13 print(max_sum_increasing_subsequence(n2, cards2)) # Output should be 7 print(max_sum_increasing_subsequence(n3, cards3)) # Output should be 15"},{"question":"In a parallel universe, a group of researchers are conducting experiments on how subjects react to sequences of numbers. They have designed a test where a subject responds to a sequence of numbers with a specific phrase. You have been tasked with writing a program to automate the researchers\' responses. Here’s how the response should work: 1. If the number sequence contains only even numbers, the response should be \\"EVEN\\". 2. If the number sequence contains only odd numbers, the response should be \\"ODD\\". 3. If the number sequence contains a mix of even and odd numbers, the response should be \\"MIXED\\". Input The input consists of a single line containing a sequence of numbers separated by spaces. The sequence will have at least one number and at most 100 numbers. Each number is a non-negative integer not greater than 1000. Output Print the appropriate response based on the given sequence of numbers: \\"EVEN\\", \\"ODD\\", or \\"MIXED\\". Examples Input 2 4 6 8 10 Output EVEN Input 1 3 5 7 9 Output ODD Input 2 3 4 5 6 Output MIXED","solution":"def sequence_response(sequence): Determines the response based on the sequence of numbers. Parameters: sequence (str): A string of numbers separated by spaces. Returns: str: \\"EVEN\\" if all numbers are even, \\"ODD\\" if all numbers are odd, otherwise \\"MIXED\\". numbers = list(map(int, sequence.split())) all_even = all(num % 2 == 0 for num in numbers) all_odd = all(num % 2 != 0 for num in numbers) if all_even: return \\"EVEN\\" elif all_odd: return \\"ODD\\" else: return \\"MIXED\\""},{"question":"In a distant world, a network of towns is connected by an intricate series of one-way roads. Each road has a specific travel time associated with it, and every town can be reached from any other town. However, some roads have a peculiar characteristic: they are devoid of any traffic. These roads are called \\"silent paths.\\" Your job is to determine the shortest time to travel between two towns using only these silent paths when possible. The network is represented as a directed graph where towns are nodes and roads are edges. The graph is provided in an edge list format, and the towns are identified by integers. Your task is to write a program that finds the shortest travel time between two given towns using only silent paths. Input The first line contains three integers, N (number of towns), M (number of roads), and Q (number of queries). The next M lines each contain three integers u, v, and t, representing a directed road from town u to town v with a travel time of t. The following Q lines each contain two integers a and b, representing a query to find the shortest time to travel from town a to town b using only silent paths. Output For each query, output the shortest travel time in one line. If there is no possible path, output `-1`. Examples Input 4 4 2 0 1 10 1 2 5 2 3 2 0 3 100 0 3 1 3 Output 17 7 Input 3 2 1 0 1 8 1 2 10 0 2 Output 18","solution":"import heapq import sys def dijkstra(graph, start, n): distances = [float(\'inf\')] * n distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_shortest_times(n, edges, queries): graph = [[] for _ in range(n)] for u, v, t in edges: graph[u].append((v, t)) results = [] for a, b in queries: distances = dijkstra(graph, a, n) result = distances[b] if distances[b] != float(\'inf\') else -1 results.append(result) return results # Parsing the input def process_input(input_data): lines = input_data.strip().split(\'n\') n, m, q = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:m+1]] queries = [tuple(map(int, line.split())) for line in lines[m+1:m+1+q]] return n, edges, queries def main(input_data): n, edges, queries = process_input(input_data) results = find_shortest_times(n, edges, queries) for result in results: print(result) # Sample Testing input_data = 4 4 2 0 1 10 1 2 5 2 3 2 0 3 100 0 3 1 3 main(input_data)"},{"question":"Sarah enjoys going for nature walks and takes pleasure in identifying different species of birds. Each bird has specific attributes such as size, weight, and wingspan that she likes to record. Sarah has a list of birds seen during her walk, and she wants to know which species weigh the most on average. Write a program that takes the details of various birds and their sightings and calculates the average weight for each species. The program should then determine and output the species with the highest average weight. Input: The input consists of multiple datasets. Each dataset corresponds to one walk and is formatted as follows: - The first line contains an integer N (1 ≤ N ≤ 100) denoting the number of birds sighted during the walk. - The next N lines describe the birds seen during the walk, with each line containing: - A string S (1 ≤ |S| ≤ 20) representing the species name. - An integer W (1 ≤ W ≤ 10000) representing the weight of the bird in grams. The input is terminated by a line with a single zero. This line should not be processed. Output: For each dataset, print the species with the highest average weight. If there are multiple species with the same highest average weight, print the one that appears first in the input list. Example: Input: 6 sparrow 15 robin 40 sparrow 10 eagle 3000 robin 50 eagle 3200 4 finch 20 finch 22 finch 21 dove 30 0 Output: eagle dove Note: In the first dataset, the average weights are: - sparrow: (15 + 10) / 2 = 12.5 - robin: (40 + 50) / 2 = 45 - eagle: (3000 + 3200) / 2 = 3100 The species \'eagle\' has the highest average weight. In the second dataset, the average weights are: - finch: (20 + 22 + 21) / 3 = 21 - dove: 30 The species \'dove\' has the highest average weight.","solution":"def find_species_with_highest_avg_weight(data): Takes a list of datasets, each dataset representing a list of birds sighted during a walk, and returns the species with the highest average weight for each dataset. :param data: List of datasets, where each dataset is a list of tuples (species, weight) :return: List of species with the highest average weight for each dataset result = [] for dataset in data: weight_sum = {} count = {} for species, weight in dataset: if species not in weight_sum: weight_sum[species] = 0 count[species] = 0 weight_sum[species] += weight count[species] += 1 max_avg_weight = -1 species_with_max_avg = \\"\\" for species in weight_sum: avg_weight = weight_sum[species] / count[species] if avg_weight > max_avg_weight: max_avg_weight = avg_weight species_with_max_avg = species result.append(species_with_max_avg) return result def process_input(input_string): Processes a multi-line string input and extracts the datasets from it. :param input_string: A string representing the input data :return: List of datasets, where each dataset is a list of tuples (species, weight) lines = input_string.strip().split(\'n\') data = [] index = 0 while index < len(lines): N = int(lines[index]) if N == 0: break dataset = [] for i in range(N): index += 1 species, weight = lines[index].split() dataset.append((species, int(weight))) data.append(dataset) index += 1 return data def main(input_string): data = process_input(input_string) return find_species_with_highest_avg_weight(data)"},{"question":"Create a function that takes an array of integers and returns the maximum sum of any contiguous subarray of the given array. A contiguous subarray is any sequence of consecutive elements in the array. For example: ``` max_subarray_sum([−2,1,−3,4,−1,2,1,−5,4]) = 6, because the maximum sum subarray is [4, −1, 2, 1], with a sum of 6. max_subarray_sum([1,2,3,4]) = 10, because the maximum sum subarray is [1,2,3,4], with a sum of 10. max_subarray_sum([−1,−2,−3,−4]) = −1, because the maximum sum subarray is [−1], with a sum of −1. ``` Your function should be optimized to run in O(n) time complexity. Good luck! (Note: Ensure your test cases include scenarios with both positive and negative numbers for thorough testing.)","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray of the given array. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of integers representing the amounts of rainfall collected in water gauges in Berland over a series of days. The gauges are reset to zero at the beginning of each day. Another event has been reported that there will be daily rainfall increases for the next d days, and your task is to predict the new amounts of rainfall for each day. The increase in rainfall for a day (i) depends on the gauge of the previous day (i-1), such that the rainfall for day (i) is doubled from the amount collected on day (i-1). This sequence starts from the last recorded day. Calculate the predicted rainfall amounts for the next d days. -----Input----- The first line contains an integer n (1 le n le 100) — the number of days with recorded rainfall data. The second line contains n integers, each r_i (0 le r_i le 1,000) — the rainfall amounts recorded for each day. The third line contains a single integer d (1 le d le 10) — the number of days to predict. -----Output----- Print d integers, where each integer represents the predicted rainfall amount for the respective day. -----Examples----- Input 3 1 2 4 2 Output 8 16 Input 1 5 3 Output 10 20 40 Input 2 3 7 1 Output 14 -----Note----- In the first example, the recorded rainfall amounts are [1, 2, 4]. For the next 2 days, the predicted rainfall amounts will be calculated starting from the last recorded day: - The 1st predicted day\'s rainfall is 4 (last recorded day) * 2 = 8. - The 2nd predicted day\'s rainfall is 8 (1st predicted day) * 2 = 16. In the second example, the recorded rainfall amount is [5]. For the next 3 days, the predicted rainfall amounts will be: - The 1st predicted day\'s rainfall is 5 (last recorded day) * 2 = 10. - The 2nd predicted day\'s rainfall is 10 (1st predicted day) * 2 = 20. - The 3rd predicted day\'s rainfall is 20 (2nd predicted day) * 2 = 40.","solution":"def predict_rainfall(n, rainfalls, d): Predicts the rainfall amounts for the next d days. Parameters: - n: Number of days with recorded rainfall data - rainfalls: List of integers representing the rainfall amounts recorded for each day - d: Number of days to predict Returns: A list of integers representing the predicted rainfall amount for the respective day. last_day_rainfall = rainfalls[-1] predictions = [] for _ in range(d): last_day_rainfall *= 2 predictions.append(last_day_rainfall) return predictions"},{"question":"In a secured database system, records are stored in a hierarchical structure where each record can have multiple sub-records (children), but only one parent record. The administrator needs to find the distance between two records, which is defined as the number of relationships (steps) from one record to another, where a step is a move from a parent to a child or from a child to a parent. The hierarchical relationship is given by a list of edges where each edge connects two records, and the first record in the edge is the parent of the second record. Write a program that takes in the number of records n, the number of edges e, the list of edges representing the parent-child relationships, and two records, and outputs the distance between these two records. Input The first line contains two integers n and e (2 ≤ n ≤ 100, 1 ≤ e < n) — the number of records and the number of parent-child relationships. The next e lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) — where ai is the parent of bi. The last line contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the two records to find the distance between. Output Output a single integer — the number of steps between record u and record v. Examples Input 5 4 1 2 1 3 2 4 2 5 4 5 Output 2 Input 6 5 1 2 1 3 3 4 4 5 4 6 6 1 Output 3 Input 3 2 1 2 2 3 3 1 Output 2","solution":"from collections import defaultdict, deque def find_distance(n, e, edges, u, v): # Building the adjacency list adj_list = defaultdict(list) for parent, child in edges: adj_list[parent].append(child) adj_list[child].append(parent) # BFS to find shortest path from u to v queue = deque([(u, 0)]) visited = {u} while queue: current, distance = queue.popleft() if current == v: return distance for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) # Example usage: # n, e = 5, 4 # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # u, v = 4, 5 # print(find_distance(n, e, edges, u, v)) # Output: 2 # n, e = 6, 5 # edges = [(1, 2), (1, 3), (3, 4), (4, 5), (4, 6)] # u, v = 6, 1 # print(find_distance(n, e, edges, u, v)) # Output: 3 # n, e = 3, 2 # edges = [(1, 2), (2, 3)] # u, v = 3, 1 # print(find_distance(n, e, edges, u, v)) # Output: 2"},{"question":"Cargo Ship Loading Input A list of containers, each with a weight: ``` containers: List[int] where 0 < len(containers) ≤ 10000 and 0 < containers[i] ≤ 1000. ``` Output The number of trips required to load all the containers onto a ship, given that the ship can carry containers summing up to a maximum weight in a single trip. Description You are in charge of loading containers onto a cargo ship. The ship can carry a maximum load of `k` per trip. You need to determine the minimum number of trips required to ship all the containers. In each trip, maximize the total weight carried by the ship without exceeding the maximum load limit `k`. Constraints - The maximum load `k` the ship can carry will be given as an integer `1 ≤ k ≤ 10000`. Write a function `min_trips(containers: List[int], k: int) -> int:` that computes the minimum number of trips required to load all the containers. Example ``` containers = [5, 8, 12, 7, 6] k = 15 ``` Output: ``` 3 Explanation: - First trip: 12 + 3 = 15 - Second trip: 8 + 7 = 15 - Third trip: 6 + 5 = 11 ```","solution":"def min_trips(containers, k): Returns the minimum number of trips required to load all containers onto the ship. Arguments: containers -- List of container weights. k -- Maximum weight the ship can carry in a single trip. Returns: Minimum number of trips required. # Sort the containers in ascending order containers.sort() i, j = 0, len(containers) - 1 trips = 0 while i <= j: if containers[i] + containers[j] <= k: i += 1 j -= 1 trips += 1 return trips"},{"question":"You are given a large array of integers. You need to answer several queries. Each query consists of two integers, x and y, and you need to find the sum of all elements in the subarray spanning from index x to y, inclusive. -----Input----- - The first line contains an integer, n, the size of the array. - The second line contains n integers, the elements of the array. - The third line contains an integer, q, the number of queries. - The next q lines contain two integers each, x and y, the indices for each query. -----Output----- - For each query, print the sum of all elements in the subarray from index x to y inclusive. -----Constraints----- - 1 ≤ n ≤ 100000 - 1 ≤ Array elements ≤ 1000 - 1 ≤ q ≤ 100000 - 0 ≤ x ≤ y < n -----Example----- Input: 8 3 2 4 5 1 1 6 2 3 1 3 2 5 0 7 Output: 11 11 24 -----Explanation:----- Testcase: 3 2 4 | 5 | 1 1 6 2 Indexing starts from 0. For the first query, sum from index 1 to 3 is 2 + 4 + 5 = 11. For the second query, sum from index 2 to 5 is 4 + 5 + 1 + 1 = 11. For the third query, sum from index 0 to 7 is 3 + 2 + 4 + 5 + 1 + 1 + 6 + 2 = 24.","solution":"def preprocess_array(arr): Preprocess the array to create a prefix sum array. :param arr: List[int] - The original array. :return: List[int] - The prefix sum array. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def query_sum(prefix_sum, x, y): Returns the sum of elements from index x to y (inclusive) using the prefix sum array. :param prefix_sum: List[int] - The prefix sum array. :param x: int - The starting index of the subarray. :param y: int - The ending index of the subarray. :return: int - The sum of elements from index x to y. return prefix_sum[y + 1] - prefix_sum[x]"},{"question":"A security company has hired you to write a program for tracking intruder movements. Their security cameras are placed at different locations in a 2D grid of size N times N. Each camera records the coordinates (x, y) of detected movements. You need to write a program that takes in the recorded movements and determines the number of unique movements, i.e., unique pairs of (x, y) coordinates, detected by the cameras. -----Input:----- - First line contains integer N, the size of the 2D grid (1 <= N <= 1000). - Second line contains integer M, the number of movements recorded by the cameras (1 <= M <= 10000). - The next M lines contain two integers each x and y representing the coordinates of each detected movement. -----Output:----- For each testcase, output a single line with the number of unique movements detected. -----Constraints:----- - 0 leq x, y < N -----Sample Input:----- 5 6 0 1 1 2 0 1 3 4 3 4 4 4 -----Sample Output:----- 4 -----Explanation:----- The unique movements are recorded at coordinates (0, 1), (1, 2), (3, 4), and (4, 4). Hence, the answer is 4.","solution":"def count_unique_movements(N, M, movements): Returns the number of unique movements recorded by the cameras. :param N: Size of the grid. :param M: Number of movements recorded. :param movements: List of tuples representing the coordinates of movements. :return: Number of unique movements detected. unique_movements = set(movements) return len(unique_movements)"},{"question":"Write a function to detect the presence of a cycle in a directed graph. The graph is represented by an adjacency list. You need to determine whether there is a cycle that can be reached starting from any vertex in the graph. Constraints * 1 ≤ n ≤ 1000 * 0 ≤ m ≤ 10000 Input The first integer n is the number of vertices in the graph. The second integer m is the number of edges in the graph. The next m lines each contain two integers u and v representing a directed edge from vertex u to vertex v. Output Print \\"YES\\" if there is a cycle in the graph. Otherwise, print \\"NO\\". Examples Input 4 4 0 1 1 2 2 0 2 3 Output YES Input 3 2 0 1 1 2 Output NO","solution":"def has_cycle(n, m, edges): from collections import defaultdict, deque # Build the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Helper function for DFS def dfs(vertex, visited, stack): # Mark the current node as visited visited[vertex] = True stack[vertex] = True # Visit all the neighbours for neighbour in graph[vertex]: if not visited[neighbour]: if dfs(neighbour, visited, stack): return True elif stack[neighbour]: return True # Remove the vertex from stack stack[vertex] = False return False visited = [False] * n stack = [False] * n # Call the DFS helper method to detect cycle for vertex in range(n): if not visited[vertex]: if dfs(vertex, visited, stack): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array A, consisting of n distinct integers a_1, a_2, dots, a_n, and an integer x. Determine if there are any two distinct elements a_i and a_j in the array such that a_i + a_j = x. For example, if A = [1, 2, 3, 4, 5] and x = 7, then we can choose 2 and 5 because 2 + 5 = 7. If multiple pairs exist, print any of them. -----Input----- The first line contains one integer n (2le n le 100) — the number of elements of A. The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the elements of A. The third line contains one integer x (2 le x le 2000) — the target sum. It can be shown that the answer always exists. -----Output----- Output two different numbers a_i and a_j such that a_i belongs to A, a_j belongs to A, and a_i + a_j = x. If there are multiple answers, print any. -----Examples----- Input 5 1 2 3 4 5 7 Output 2 5 Input 4 1 3 8 7 10 Output 3 7","solution":"def find_pair_with_sum(A, x): This function finds any two distinct elements a_i and a_j from list A such that a_i + a_j = x. A: list of integers x: integer, target sum Returns: (int, int): a pair of integers from A whose sum equals x. seen = {} for number in A: complement = x - number if complement in seen: return (complement, number) seen[number] = True return None # This case is guaranteed to never be hit based on the problem statement. # Example Usage # A = [1, 2, 3, 4, 5], x = 7 # Output: (2, 5) or any other valid pair"},{"question":"You are given a 2D binary matrix filled with 0\'s and 1\'s. A contiguous region of 1\'s forms an island. Two 1\'s are considered connected if they are adjacent horizontally or vertically. You need to find the number of distinct islands in the matrix. Write a function `countIslands` that takes a 2D binary array `grid` as input and returns the number of distinct islands. Input - The first line will be two integers m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns of the grid. - Each of the next m lines consists of n integers, each being either 0 or 1. Output - Return a single integer representing the number of distinct islands. Example Input 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 1 0 0 Output 3 Input 3 3 1 1 0 1 0 0 0 0 1 Output 2","solution":"def countIslands(grid): if not grid: return 0 rows = len(grid) cols = len(grid[0]) def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0: return grid[r][c] = 0 # Mark the cell as visited by setting it to 0 # Explore the neighboring cells dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) number_of_islands = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: number_of_islands += 1 dfs(r, c) return number_of_islands"},{"question":"Sara often spends her weekends playing with her robotic dog, Sparky. Sparky loves to chase a ball in a straight line in their garden. Sara throws the ball, and Sparky runs to retrieve it. The garden has a finite length (L). Every time Sara throws the ball, Sparky runs T meters forward. However, upon reaching the end of the garden, Sparky stops fetching the ball. Sara uses her amazing programming skills to count the number of throws she can make before Sparky hits the end of the garden. Write a program to determine the number of throws Sara can make. Input: Two space separated integers L, T. Output: A single integer representing the number of throws before Sparky reaches or exceeds the garden’s length. Constraints: 1 ≤ T ≤ L ≤ 10^9 Example: SAMPLE INPUT 100 25 SAMPLE OUTPUT 4","solution":"def number_of_throws(L, T): Returns the number of throws Sara can make before Sparky reaches or exceeds the garden\'s length L. Each throw, Sparky runs T meters forward. :param L: int - The length of the garden. :param T: int - The distance Sparky runs with each throw. :return: int - The number of throws. return L // T"},{"question":"You are given an array of integers representing the heights of pots arranged in a row. You have a watering can with a capacity of `k` liters. Each pot needs to be watered once, and your goal is to minimize the total number of watering operations. Watering a pot requires a number of liters equal to the height of the pot. You can fill your watering can at any time at the beginning of the row, but you can only move from left to right to water the pots. Once you run out of water, you must go back to the beginning of the row to refill the watering can. You need to find the minimum number of watering operations required to water all the pots. Input: - The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of pots and the capacity of the watering can. - The second line contains `n` integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000) — the heights of the pots. Output: - Print the minimum number of watering operations required to water all the pots. Example: Input: 5 7 3 4 2 1 5 Output: 3 Explanation: In the first operation, you can water the first two pots (3 + 4 = 7). In the second operation, you can water the next two pots (2 + 1 = 3). In the third operation, you can water the fifth pot (5). Thus, the minimum number of watering operations required is 3.","solution":"def min_watering_operations(n, k, heights): operations = 0 current_capacity = k for height in heights: if current_capacity >= height: current_capacity -= height else: operations += 1 current_capacity = k - height operations += 1 # for the last trip return operations"},{"question":"Simon is looking for patterns in binary strings. He has a binary string composed only of \'0\'s and \'1\'s. Simon wants to find a contiguous substring (which may be as short as one character or as long as the entire string) such that when it is converted from binary to decimal, it forms the largest possible value. Can you help Simon identify the largest decimal value that can be obtained from any contiguous substring of the given binary string? -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the length of Simon\'s binary string. The second line contains a binary string of length n. -----Output----- Print the largest decimal value that can be obtained from any contiguous substring of the given binary string. -----Examples----- Input 4 1010 Output 10 Input 3 111 Output 7 Input 5 00101 Output 5","solution":"def largest_decimal_value(n, binary_string): This function takes an integer n and a binary string of length n, and returns the largest decimal value that can be obtained from any contiguous substring of the given binary string. max_decimal = 0 # Iterate through all possible substrings for i in range(n): for j in range(i + 1, n + 1): substring = binary_string[i:j] decimal_value = int(substring, 2) # Update max_decimal if a larger value is found if decimal_value > max_decimal: max_decimal = decimal_value return max_decimal"},{"question":"You are building a new feature for an online marketplace where users can create sales listings. Each listing can have a set of tags associated with it. Your task is to find the most popular tags in the marketplace. The marketplace contains n listings, numbered from 1 to n. Each listing i (1 ≤ i ≤ n) has its own set of tags. Your task is to find the k most common tags across all listings. If there are multiple tags with the same frequency, output them in lexicographical order. Input The first line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100) – the number of listings and the number of most common tags to output, respectively. The subsequent n lines contain the tags for each listing. Each line starts with an integer ti (0 ≤ ti ≤ 100) – the number of tags in the i-th listing, followed by ti space-separated strings representing the tags. All tags are composed of lowercase English letters and are up to 15 characters long. Output Print k strings, each representing a tag. The tags should be printed in descending order of frequency. If multiple tags have the same frequency, they should be printed in lexicographical order. Examples Input 5 3 3 laptop phone electronics 2 laptop computer 1 camera 2 phone camera 3 headphones phone laptop Output laptop phone camera Input 4 2 2 book novel 2 book fiction 1 fiction 3 novel book fiction Output book fiction Note In the first example, the frequency of the tags are as follows: laptop: 3 phone: 3 electronics: 1 computer: 1 camera: 2 headphones: 1 The top 3 tags are \\"laptop\\", \\"phone\\", and \\"camera\\". In the second example, the frequencies are: book: 3 novel: 2 fiction: 3 The top 2 tags are \\"book\\" and \\"fiction\\".","solution":"from collections import Counter def find_most_popular_tags(n, k, listings): tag_counter = Counter() for listing in listings: tags = listing.split()[1:] # Skip the first integer count tag_counter.update(tags) # Get the k most common tags most_common_tags = tag_counter.most_common() # Sort by frequency (first) and lexicographically within the same frequency most_common_tags.sort(key=lambda x: (-x[1], x[0])) return [tag for tag, count in most_common_tags[:k]]"},{"question":"Farmer John owns a rectangular field divided into a grid of `n` rows and `m` columns. Each cell of the grid can either contain a plant or be empty. Farmer John wants to water the plants using an irrigation system that waters all adjacent plants in a straight line. That is, he can water plants that are in the same row or in the same column uninterrupted by empty cells. Given the initial state of the field, your task is to help Farmer John determine the number of separate irrigation systems he needs to water all the plants. Two plants share the same irrigation system if they are in the same continuous line either row-wise or column-wise without any gap of empty cells. Write a function `irrigation_systems(field: List[List[int]]) -> int` that takes as input a 2D list of integers representing the field, where a `1` indicates a cell with a plant, and a `0` indicates an empty cell. Your function should return the minimum number of separate irrigation systems required to water all the plants. # Input - `field`: A 2D list of `n` rows and `m` columns, each element being either `0` (empty) or `1` (plant), where `1 ≤ n, m ≤ 100`. # Output - An integer representing the number of separate irrigation systems needed. # Example Example 1 **Input:** ```python field = [ [1, 0, 1], [1, 1, 0], [0, 0, 1] ] ``` **Output:** ```python 3 ``` **Explanation:** - The first irrigation system waters the first plant in the first row and the first plant in the second row (same column). - The second irrigation system waters the second and third plants in the second row (same row). - The third irrigation system waters the plant in the third row, third column. Example 2 **Input:** ```python field = [ [1, 1, 1], [0, 1, 0], [1, 1, 1] ] ``` **Output:** ```python 1 ``` **Explanation:** - One irrigation system can water all the plants as they are all interconnected either row-wise or column-wise.","solution":"from typing import List def irrigation_systems(field: List[List[int]]) -> int: def dfs(row, col): # Mark the cell as visited field[row][col] = -1 for r, c in [(row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]: if 0 <= r < rows and 0 <= c < cols and field[r][c] == 1: dfs(r, c) if not field: return 0 rows, cols = len(field), len(field[0]) irrigation_count = 0 for row in range(rows): for col in range(cols): if field[row][col] == 1: dfs(row, col) irrigation_count += 1 return irrigation_count"},{"question":"An island nation is composed of several islands connected by a number of bridges. The government has a peculiar requirement: they want every island to be accessible from every other island, either directly or indirectly via the bridges. Each bridge has a certain maximum weight it can support. Your task is to determine the minimum weight limit for the bridges such that the connectivity requirement is satisfied, while ensuring the weight limit is as small as possible. Consider that all the islands are connected (i.e., it is possible to travel between any two islands using the bridges). The bridges are very expensive to build, so the goal is to minimize the maximum weight limit of any bridge in use. -----Input----- The first line contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 10^6), representing the number of islands and the number of bridges, respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 10^9), representing a bridge between island u and island v that can support a maximum weight of w. It is guaranteed that the given bridges ensure that all the islands are connected. -----Output----- Output a single integer representing the minimum weight limit required for the bridges. -----Examples----- Input 4 5 1 2 5 1 3 3 2 3 4 3 4 2 4 1 6 Output 4 Input 3 3 1 2 10 2 3 4 1 3 5 Output 5 -----Notes----- In the first example, the minimum weight limit required to maintain connectivity is 4. Although the bridge with weight 6 allows for direct longer routes, it is not necessary as bridges with weights of 5, 4, and so forth can maintain the connectivity. In the second example, the bridge with weight 5 is necessary to maintain the connectivity between all islands with the minimal maximum weight.","solution":"def find_min_weight_limit(n, m, bridges): parent = list(range(n + 1)) rank = [0] * (n + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u, root_v = find(u), find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 bridges.sort(key=lambda x: x[2]) # Sort bridges by weight max_weight_used_in_mst = 0 for u, v, w in bridges: if find(u) != find(v): union(u, v) max_weight_used_in_mst = w # The largest weight in the MST return max_weight_used_in_mst"},{"question":"A wealthy philanthropist has decided to put his resources to work to solve an important social issue in his city. The philanthropist is particularly interested in enhancing the public transportation system to decrease traffic congestion and increase accessibility to various parts of the city. The city can be represented as a grid with N rows and M columns where each cell represents a possible location. Multiple transportation hubs can be set up in the city to facilitate easier movement. Each hub has a specific effectiveness radius R, meaning it can effectively serve all the locations within R distance from the hub. The distance between two cells (i1, j1) and (i2, j2) in the grid is defined as the Manhattan distance |i1 - i2| + |j1 - j2|. You are assigned to help place these hubs in the grid. You need to efficiently answer queries regarding the placement and effective coverage of these hubs. You will have to perform Q operations. Each operation belongs to one of the following types: 1. Given the location of a new hub (i, j) and its effectiveness radius R, register this hub in the system. 2. Given a specific location (x, y), find out how many hubs can effectively serve this location. Input format The first line contains three integers N, M, and Q separated by a single space. The next Q lines describe the operations, where each line starts with an integer t denoting the type of the operation. If t is 1, it is followed by four space-separated integers i, j, R, representing the row, column, and radius of the hub. If t is 2, it is followed by two space-separated integers x, y, representing the row and column of the location to check. Output format For each query of the second type, output a single line containing a single integer representing the number of hubs effectively serving that location. Constraints 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 100000 1 ≤ i, j, x, y ≤ N 1 ≤ R ≤ min(N,M) 1 ≤ t ≤ 2 SAMPLE INPUT 5 5 5 1 2 3 1 1 1 5 2 2 4 4 1 3 4 3 2 2 2 SAMPLE OUTPUT 0 2","solution":"class TransportationSystem: def __init__(self, n, m): self.n = n self.m = m self.hubs = [] def add_hub(self, i, j, r): self.hubs.append((i, j, r)) def count_hubs_serving_location(self, x, y): count = 0 for i, j, r in self.hubs: if abs(i - x) + abs(j - y) <= r: count += 1 return count def transportation_queries(n, m, queries): system = TransportationSystem(n, m) results = [] for query in queries: if query[0] == 1: _, i, j, r = query system.add_hub(i, j, r) elif query[0] == 2: _, x, y = query results.append(system.count_hubs_serving_location(x, y)) return results"},{"question":"You are given an array of integers that potentially contains duplicates. Your task is to sort this array such that the unique values retain their relative order (their first occurrences in the array) and the duplicates are appended at the end in the order they appear. The objective is to ensure that the processing is done efficiently. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers separated by a space — the elements of the array. Output Print the sorted array as described above, with unique values followed by duplicates in their order of appearance. Examples Input 7 4 5 6 4 3 3 6 Output 4 5 6 3 4 3 6 Input 5 2 1 2 3 2 Output 2 1 3 2 2 Note Explanation of the answers for the examples: 1. The unique values are 4, 5, 6, and 3 in the order of their first occurrence. The duplicates: 4, 3, and 6 are appended at the end. 2. The unique values are 2, 1, and 3 in the order of their first occurrence. The duplicates: 2 and 2 are appended at the end.","solution":"def sort_array_with_duplicates(n, array): Sorts the array such that unique values retain their relative order and duplicates are appended at the end in the order they appear. Args: n : int : number of elements in the array array : list of int : the elements of the array Returns: list of int : sorted array as described unique = [] duplicates = [] seen = set() for num in array: if num not in seen: unique.append(num) seen.add(num) else: duplicates.append(num) return unique + duplicates"},{"question":"In a computer science class, the professor gave an assignment to create a small program that simulates a simplified version of a bank account system. Your task is to implement this simulation by designing classes in Python to handle customer bank accounts. The bank account system should support the following operations: - Create a new bank account with a unique account number. - Deposit money into a bank account. - Withdraw money from a bank account, but do not allow overdrafts (i.e., ensure the account balance does not go negative). - Check the balance of a bank account. Each operation should be associated with its corresponding method within a single class. To keep things simple, assume that account numbers are generated sequentially starting from 1. # Class Details Create a class `BankAccount` with the following methods: - `__init__`: Initializes the bank account with an account number and a balance of 0. - `deposit(amount)`: Adds the specified `amount` to the account balance. - `withdraw(amount)`: Subtracts the specified `amount` from the account balance, as long as the balance does not go negative. If the balance is insufficient, no money should be withdrawn. - `get_balance()`: Returns the current balance of the account. - `get_account_number()`: Returns the account number of the account. # Example Input and Output ```python # Create the first account account1 = BankAccount() print(account1.get_account_number()) # Output: 1 print(account1.get_balance()) # Output: 0 # Deposit money into the first account account1.deposit(100) print(account1.get_balance()) # Output: 100 # Create the second account account2 = BankAccount() print(account2.get_account_number()) # Output: 2 print(account2.get_balance()) # Output: 0 # Withdraw money from the first account account1.withdraw(50) print(account1.get_balance()) # Output: 50 # Try to withdraw more money than available in the second account account2.withdraw(10) print(account2.get_balance()) # Output: 0 ``` # Requirements 1. Implement the `BankAccount` class with the described methods. 2. Ensure that account numbers are unique and sequential for each new account. 3. Do not allow withdrawal of money that exceeds the current balance. 4. Your class should be able to handle multiple accounts without errors. **Note:** You may assume that all monetary transactions will be non-negative integers. This simple simulation helps Bank management avoid overdrafts and facilitates easy creation and management of bank accounts for customers.","solution":"class BankAccount: _account_counter = 1 def __init__(self): self.account_number = BankAccount._account_counter BankAccount._account_counter += 1 self.balance = 0 def deposit(self, amount): if amount > 0: self.balance += amount def withdraw(self, amount): if amount > 0 and amount <= self.balance: self.balance -= amount def get_balance(self): return self.balance def get_account_number(self): return self.account_number"},{"question":"Given an integer array nums, find the maximum length of a subarray where the sum of all the elements in the subarray is equal to k. Example 1: Input: nums = [1, -1, 5, -2, 3], k = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest subarray with sum equal to 3. Example 2: Input: nums = [-2, -1, 2, 1], k = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and is the longest subarray with sum equal to 1. Note: - 1 <= nums.length <= 10^5 - -10^4 <= nums[i] <= 10^4 - -10^9 <= k <= 10^9","solution":"def max_subarray_len(nums, k): Finds the maximum length of a subarray where the sum is equal to k. Parameters: - nums: List[int], list of integers - k: int, target sum for the subarray Returns: - int, length of the longest subarray with sum equals to k sum_dict = {0: -1} # Initialize with sum 0 at index -1 current_sum = 0 max_length = 0 for i, num in enumerate(nums): current_sum += num if current_sum - k in sum_dict: max_length = max(max_length, i - sum_dict[current_sum - k]) if current_sum not in sum_dict: sum_dict[current_sum] = i return max_length"},{"question":"An online gaming platform wants to optimize their matching algorithm for pairing players into teams for a battle match. Each player has an experience level, and the platform wants to ensure that the total experience level of two teams is as evenly matched as possible. Given the experience levels of a group of players, write a program to split them into two teams such that the difference in their total experience levels is minimized. Input: The first line contains an integer n (2 ≤ n ≤ 20) — the number of players. The second line contains n integers, where the i-th integer (1 ≤ experience[i] ≤ 1000) represents the experience level of the i-th player. Output: Output a single integer — the minimum possible difference between the total experience levels of the two teams. Example: Input: 4 10 20 15 5 Output: 0 Explanation: One way to split the players into two teams is [10, 15] and [20, 5] which both have a total experience level of 25, resulting in a difference of 0.","solution":"def minimize_experience_difference(n, experience): total_sum = sum(experience) # Using dynamic programming to find all possible sums dp = [False] * (total_sum + 1) dp[0] = True for exp in experience: for j in range(total_sum, exp - 1, -1): dp[j] = dp[j] or dp[j - exp] min_diff = float(\'inf\') for s in range(total_sum // 2 + 1): if dp[s]: min_diff = min(min_diff, abs(total_sum - 2 * s)) return min_diff # Example usage: # n = 4 # experience = [10, 20, 15, 5] # print(minimize_experience_difference(n, experience)) # Output: 0"},{"question":"You are given a string s consisting of lowercase letters only. Your task is to determine the minimum number of operations required to transform the string into a \\"good\\" string. A \\"good\\" string is defined as a string where all characters are the same (i.e., consisting of only one unique character). In each operation, you can choose any two adjacent characters and remove one of them. After removing, the characters to the left and right of the removed character become adjacent. Your task is to determine the minimum number of operations required to make the string consist of only one unique character. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single string s (1 le |s| le 100) — the string you want to transform. -----Output----- For each test case, print one integer — the minimum number of operations required to transform the string into a \\"good\\" string. -----Examples----- Input 3 ab aaabb abc Output 1 3 2 -----Note----- Consider the first test case of the example. The initial string is ab. Choose the first operation to remove character a (or b), the string becomes b (or a), so the answer is 1. For the second test case, the initial string is aaabb. You can remove the b\'s step by step to get a sequence of operations: \\"aaabb\\" -> \\"aaab\\" -> \\"aab\\" -> \\"aa\\". After any three operations, the string becomes homogeneous, so the answer is 3. For the third test case, the initial string is abc. You can remove b and c step by step: \\"abc\\" -> \\"ac\\" -> \\"a\\" or \\"abc\\" -> \\"ab\\" -> \\"a\\". Thus, the minimum number of operations is 2.","solution":"def min_operations_to_good_string(s): Returns the minimum number of operations required to transform the string `s` into a \\"good\\" string. return len(s) - 1 def solve(test_cases): Takes a list of test strings and returns the list of results for each test case. results = [] for s in test_cases: results.append(min_operations_to_good_string(s)) return results"},{"question":"Given a network representing a city, you are asked to determine the minimum amount of money required to repair the roads such that every point in the city is reachable from every other point. The city is represented as an undirected graph with roads as edges and the repair cost as the edge weights. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000): the number of points in the city and the number of roads, respectively. Each of the following m lines contains three space-separated integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^6) indicating that there is a road between points u and v with a repair cost of c. Output Output a single integer: the minimum cost to repair the roads such that every point in the city is reachable from every other point. If it is impossible to make all points reachable, print -1. Examples Input 4 4 1 2 1 2 3 2 3 4 3 4 1 4 Output 6 Input 3 2 1 2 5 2 3 10 Output 15 Input 5 3 1 2 3 3 4 4 4 5 2 Output -1 Note In the first example, the minimum spanning tree includes edges (1, 2), (2, 3), and (3, 4) or equivalently points 1, 2, 3, and 4 with a total cost of 1 + 2 + 3 = 6. In the second example, although all points are not directly connected, we can repair all roads between points for a total cost of 5 + 10 = 15 and make all points reachable from each other. In the third example, there are disconnected points (point 2 is isolated), making it impossible to ensure that every point is reachable from every other point, hence the output is -1.","solution":"def minimum_cost_to_repair_roads(n, m, roads): Determine the minimum amount of money required to repair the roads such that every point in the city is reachable from every other point. :param n: Number of points in the city. :param m: Number of roads. :param roads: List of tuples, each containing (u, v, c) where u and v are points and c is the cost to repair the road between them. :return: Minimum cost, or -1 if it is impossible to connect all points. parent = list(range(n + 1)) def find_parent(x): if parent[x] != x: parent[x] = find_parent(parent[x]) return parent[x] def union(x, y): rootX = find_parent(x) rootY = find_parent(y) if rootX != rootY: parent[rootX] = rootY roads.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for u, v, c in roads: if find_parent(u) != find_parent(v): union(u, v) total_cost += c edges_used += 1 if edges_used == n - 1: return total_cost return -1 if edges_used != n - 1 else total_cost # Example usage to test the solution n = 4 m = 4 roads = [(1, 2, 1), (2, 3, 2), (3, 4, 3), (4, 1, 4)] print(minimum_cost_to_repair_roads(n, m, roads)) # Output should be 6"},{"question":"You are the captain of a spaceship on a mission to explore a distant galaxy. Your ship\'s fuel tank can hold up to F units of fuel. The journey to the galaxy is divided into N segments, and for each segment i (1 ≤ i ≤ N), you need B_i units of fuel to travel that segment. To ensure the safety of your crew, you need to calculate the maximum number of segments you can travel consecutively without running out of fuel. Constraints: - 1 ≤ N ≤ 100,000 - 1 ≤ B_i ≤ 10^6 - 1 ≤ F ≤ 10^9 Input: The input is given from Standard Input in the following format: ``` F N B_1 B_2 ... B_N ``` Output: Print the maximum number of segments you can travel consecutively without refueling. Example: Input: ``` 10 6 1 2 3 4 5 6 ``` Output: ``` 4 ``` Explanation: With 10 units of fuel, the spaceship can travel the first 4 segments (1 + 2 + 3 + 4 = 10). The sum of 1 + 2 + 3 + 4 + 5 = 15 exceeds the fuel capacity of 10, so the maximum number of segments that can be traveled consecutively is 4.","solution":"def max_segments(F, N, B): Returns the maximum number of segments that can be traveled consecutively without refueling. :param F: Total fuel capacity :param N: Number of segments :param B: List of fuel requirements for each segment :return: Maximum number of segments that can be traveled consecutively without refueling current_sum = 0 max_segments = 0 start_index = 0 for end_index in range(N): current_sum += B[end_index] while current_sum > F: current_sum -= B[start_index] start_index += 1 max_segments = max(max_segments, end_index - start_index + 1) return max_segments # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() F = int(data[0]) N = int(data[1]) B = list(map(int, data[2:])) print(max_segments(F, N, B))"},{"question":"# Arrange a String in Lexicographical Order You are given a string `S` consisting of lowercase English letters. Your task is to find the lexicographically smallest string that can be obtained by performing a series of operations. In each operation, you can pick any character from the string and move it to any position in the string. In other words, you are allowed to rearrange the characters of the string in any order to achieve the lexicographically smallest possible result. # Input Format - The first line contains an integer `T` - the number of test cases. - Each of the next `T` lines contains a string `S`. # Output Format For each test case, print the lexicographically smallest string that can be obtained. # Constraints - 1 leq T leq 100 - 1 leq |S| leq 10^5 - The sum of the lengths of all strings does not exceed 10^6. # Sample Input 1 ``` 3 cba bed dcbfg ``` # Sample Output 1 ``` abc bde bcdfg ``` # Explanation 1 1. For the first string `cba`, the lexicographically smallest string is `abc`. 2. For the second string `bed`, the lexicographically smallest string is `bde`. 3. For the third string `dcbfg`, the lexicographically smallest string is `bcdfg`.","solution":"def lexicographically_smallest_strings(T, strings): Given a number of test cases T and a list of strings, returns the lexicographically smallest strings for each test case. result = [] for s in strings: result.append(\'\'.join(sorted(s))) return result"},{"question":"Finding Rotten Oranges =========== You are given an `m` x `n` grid where each cell in the grid can have one of three values: - `0` representing an empty cell, - `1` representing a fresh orange, - `2` representing a rotten orange. Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten. Your task is to determine the minimum number of minutes that must pass until no cell has a fresh orange. If this is not possible, return `-1`. # Example Given the grid `[[2,1,1],[1,1,0],[0,1,1]]`, the function will return `4` because in 4 minutes all the fresh oranges will be rotten. Given the grid `[[2,1,1],[0,1,1],[1,0,1]]`, the function will return `-1` because there are still fresh oranges that can\'t be reached and hence can\'t be rotten. Given the grid `[[0,2]]`, the function will return `0` because there are no fresh oranges to rot. # Testing You can use the function `assertEqual` from the `unittest` module to verify the correctness of your solution. ```python import unittest class TestRottingOranges(unittest.TestCase): def test_cases(self): self.assertEqual(rotting_oranges([[2,1,1],[1,1,0],[0,1,1]]), 4) self.assertEqual(rotting_oranges([[2,1,1],[0,1,1],[1,0,1]]), -1) self.assertEqual(rotting_oranges([[0,2]]), 0) unittest.main(argv=[\'\'], verbosity=2, exit=False) ``` # Greater goal Aim for an efficient solution. The optimal approach typically involves using Breadth-First Search (BFS) to propagate the rotting process and track the time. # Function Signature ```python def rotting_oranges(grid: List[List[int]]) -> int: # Write your solution here ```","solution":"from collections import deque from typing import List def rotting_oranges(grid: List[List[int]]) -> int: Given a grid of integers where: - 0 represents an empty cell, - 1 represents a fresh orange, - 2 represents a rotten orange, return the minimum number of minutes that must pass until no cell has a fresh orange, or -1 if this is impossible. Args: grid (List[List[int]]): The grid of oranges. Returns: int: Minimum number of minutes until no fresh orange left or -1 if impossible. rows, cols = len(grid), len(grid[0]) queue = deque() fresh_count = 0 # Initialize the queue with the positions of all rotten oranges and count fresh oranges for r in range(rows): for c in range(cols): if grid[r][c] == 2: queue.append((r, c)) elif grid[r][c] == 1: fresh_count += 1 # Directions array for 4-directional movement directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] minutes_passed = 0 # Breadth-First Search (BFS) to propagate the rotten process while queue and fresh_count > 0: # Loop through the current level of rotten oranges for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: # Fresh orange becomes rotten grid[nx][ny] = 2 queue.append((nx, ny)) fresh_count -= 1 minutes_passed += 1 return minutes_passed if fresh_count == 0 else -1"},{"question":"You have been given a collection of `n` distinct integers. You are required to find the third largest unique integer in the collection. If such an integer does not exist, return the largest integer. Implement the function `findThirdLargest(arr)` where `arr` is an array of integers. **Function Signature:** ```python def findThirdLargest(arr: List[int]) -> int: ``` **Input:** - A list of integers `arr` (1 <= len(arr) <= 10^5, -10^9 <= arr[i] <= 10^9) **Output:** - An integer representing the third largest unique integer in the array, or the largest integer if the third largest does not exist. **Example:** ```python print(findThirdLargest([4, 1, 7, 3, 5])) # Output: 4 print(findThirdLargest([10, 10, 9, 8, 8, 7, 2, 1])) # Output: 8 print(findThirdLargest([1, 2])) # Output: 2 ``` **Explanation:** - In the first example, the unique integers in descending order are [7, 5, 4, 3, 1]. The third largest unique integer is 4. - In the second example, the unique integers in descending order are [10, 9, 8, 7, 2, 1]. The third largest unique integer is 8. - In the third example, there are only two unique integers [2, 1]. As the third largest does not exist, the largest integer 2 is returned.","solution":"from typing import List def findThirdLargest(arr: List[int]) -> int: unique_numbers = list(set(arr)) unique_numbers.sort(reverse=True) if len(unique_numbers) >= 3: return unique_numbers[2] else: return unique_numbers[0]"},{"question":"Prime Factorization Trick Zeke is fascinated by prime numbers and their factors. He is studying unique properties of numbers and has come across an interesting problem. Given a positive integer x, he wants to find the prime factorization of all integers from 1 to x, but he has a specific trick in mind. Instead of listing the prime factors for each number, he wants to list the smallest prime factor only for each number from 2 to x. Write a program that, given the positive integer x, outputs an array of length x-1 where the ith element contains the smallest prime factor of (i+2). -----Input----- The input contains a single integer x (2 ≤ x ≤ 1000000). -----Output----- Output a single line with x-1 integers separated by a space, where the ith integer is the smallest prime factor of (i+2). -----Examples----- Input 10 Output 2 3 2 5 2 7 2 3 2 Input 15 Output 2 3 2 5 2 7 2 3 2 11 2 13 2 3 Input 5 Output 2 3 2 5 -----Note----- In the first sample, the number 2 has the smallest prime factor 2, the number 3 has the smallest prime factor 3, the number 4 has the smallest prime factor 2, and so on. Thus, the output is 2 3 2 5 2 7 2 3 2. In the second sample, similar logic follows, and we list the smallest prime factors for each number from 2 to 15. In case of larger values of x, ensure that your solution is efficient and runs within the time limits.","solution":"def smallest_prime_factors(x): Given a positive integer x (2 ≤ x ≤ 1000000), this function returns an array of length x-1 where the ith element contains the smallest prime factor of (i+2). spf = list(range(x + 1)) # spf[i] will be the smallest prime factor of i for i in range(2, int(x**0.5) + 1): if spf[i] == i: # i is a prime number for j in range(i * i, x + 1, i): if spf[j] == j: spf[j] = i return spf[2:] # Example usage: # x = 10 # print(smallest_prime_factors(x))"},{"question":"In a faraway land, there exists a unique tree called MagicTree. This tree has special properties and can perform specific operations on its branches. Each branch of the tree can grow a certain number of leaves, and the tree keeper Bana oversees its growth and maintenance. Bana can perform the following operations: G P V - Grow V leaves on the branch at position P. C L R - Count the total number of leaves on branches from L to R. Max L R - Determine the branch with the maximum number of leaves from L to R. Min L R - Determine the branch with the minimum number of leaves from L to R. SecMax L R - Find the branch with the second highest number of leaves from L to R. SecMin L R - Find the branch with the second lowest number of leaves from L to R. If it is not possible to perform the operation, MagicTree returns \\"NA\\" without quotes. For invalid operations, MagicTree returns \\"!!!\\" without quotes. Now Bana needs your help to implement the MagicTree operations with your coding skills. Are you ready to take on Bana\'s challenge? -----Input----- Input description: - The first line of the input contains an integer N denoting the number of branches on the MagicTree. - The next line contains N space-separated integers representing the initial number of leaves on each branch. - The next line contains a single integer Q denoting the number of queries. - The next Q lines each contain a query in the format T P V. -----Output----- Print the output for each query in separate lines. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ leaves[i] ≤ 1000000000 - 1 ≤ Q ≤ 10000 - T in { G, C..Z, a..z } - 1 ≤ P ≤ N - 1 ≤ V ≤ 1000000000 -----Example----- Input: 5 2 3 1 5 4 7 C 1 3 Max 2 4 Min 1 5 SecMax 3 5 SecMin 1 4 G 2 3 C 1 5 Output: 6 5 1 4 2 15 -----Explanation----- ...","solution":"class MagicTree: def __init__(self, leaves): self.leaves = leaves def grow(self, p, v): if 1 <= p <= len(self.leaves): self.leaves[p-1] += v else: return \\"!!!\\" def count(self, l, r): if 1 <= l <= r <= len(self.leaves): return sum(self.leaves[l-1:r]) else: return \\"NA\\" def max_leaves(self, l, r): if 1 <= l <= r <= len(self.leaves): return max(self.leaves[l-1:r]) else: return \\"NA\\" def min_leaves(self, l, r): if 1 <= l <= r <= len(self.leaves): return min(self.leaves[l-1:r]) else: return \\"NA\\" def sec_max_leaves(self, l, r): if 1 <= l <= r <= len(self.leaves): sublist = self.leaves[l-1:r] unique_leaves = list(set(sublist)) if len(unique_leaves) < 2: return \\"NA\\" unique_leaves.sort(reverse=True) return unique_leaves[1] else: return \\"NA\\" def sec_min_leaves(self, l, r): if 1 <= l <= r <= len(self.leaves): sublist = self.leaves[l-1:r] unique_leaves = list(set(sublist)) if len(unique_leaves) < 2: return \\"NA\\" unique_leaves.sort() return unique_leaves[1] else: return \\"NA\\" def handle_query(tree, query): parts = query.split() command = parts[0] p = int(parts[1]) v = int(parts[2]) if command == \'G\': return tree.grow(p, v) elif command == \'C\': return tree.count(p, v) elif command == \'Max\': return tree.max_leaves(p, v) elif command == \'Min\': return tree.min_leaves(p, v) elif command == \'SecMax\': return tree.sec_max_leaves(p, v) elif command == \'SecMin\': return tree.sec_min_leaves(p, v) else: return \\"!!!\\""},{"question":"Alice has a set of N distinct integers and a magic number M. She wants to determine if there exists a pair of these integers whose sum is exactly equal to M. The set of integers might be large, so she needs an efficient solution to solve this problem. Input - The first line contains an integer N (1 ≤ N ≤ 10^5), the number of elements in the set. - The second line contains N space-separated integers, representing the elements of the set. Each integer is distinct and fits within the range of a 32-bit signed integer. - The third line contains an integer M, the magic number. Output Print \\"YES\\" if there exists a pair of integers in the set whose sum is exactly M. Otherwise, print \\"NO\\". Examples Input 5 1 4 45 6 10 16 Output YES Input 4 1 2 3 9 8 Output NO Note For the first sample, the integers 6 and 10 sum up to the magic number 16, so the output is \\"YES\\". For the second sample, there is no pair of integers in the set that sum up to 8, so the output is \\"NO\\". Input 6 10 15 3 7 11 8 18 Output YES","solution":"def has_pair_with_sum(arr, n, m): Determines if there are any two distinct integers in the set that sum up to M. Parameters: arr (list): The list of integers. n (int): The number of integers in the list. m (int): The magic number to check for the sum. Returns: str: \\"YES\\" if a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if m - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Problem statement In an N x M grid, you are given P distinct points, each represented by their coordinates (x_i, y_i). You need to determine the number of distinct squares that can be formed using these points as vertices. A square is defined as a four-sided figure with all sides of equal length and all angles 90 degrees. Input The input is provided in the following format: N M P x_1 y_1 x_2 y_2 ... x_P y_P Constraints * 1 ≤ N, M ≤ 1,000 * 1 ≤ P ≤ 1,000 * 0 ≤ x_i < N * 0 ≤ y_i < M Output Print the number of distinct squares that can be formed using the given points as vertices. Sample Input 1 5 5 4 1 1 1 2 2 1 2 2 Sample Output 1 1 Sample Input 2 5 5 5 1 1 1 2 2 1 2 2 3 3 Sample Output 2 1 Sample Input 3 7 7 6 1 1 2 2 3 3 4 4 5 5 6 6 Sample Output 3 0","solution":"def count_squares(n, m, p, points): Determines the number of distinct squares that can be formed using the given points as vertices. points_set = set(points) def is_square(a, b, c, d): Helper function to check if four points form a square. def distance_squared(p1, p2): return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 d2 = distance_squared(a, b) d3 = distance_squared(a, c) d4 = distance_squared(a, d) if d2 == 0 or d3 == 0 or d4 == 0: return False if d2 == d3 and 2 * d2 == d4 and distance_squared(b, d) == distance_squared(c, d): return True if d3 == d4 and 2 * d3 == d2 and distance_squared(c, b) == distance_squared(b, d): return True if d2 == d4 and 2 * d2 == d3 and distance_squared(b, c) == distance_squared(c, d): return True return False count = 0 for i in range(p): for j in range(i + 1, p): for k in range(j + 1, p): for l in range(k + 1, p): if is_square(points[i], points[j], points[k], points[l]): count += 1 return count"},{"question":"Help John with his Math Homework. John has a math homework assignment given by Mrs. Smith. The assignment involves calculating the sum of the series. The series is defined as follows: S = 1^P + 2^P + 3^P + ... + N^P John wants to complete his homework quickly so he can go out and play. Write a program to help John with his homework. You\'ll be given a positive integer N and a positive integer P, and you need to calculate the sum of the series S modulo 10^9+7. -----Input----- The first line will contain the integer T, the number of test cases. Each test case consists of two space-separated integers N and P. -----Output----- For each test case, output the sum of the series modulo 10^9+7. -----Constraints----- - 1 ≤ T ≤ 100000 - 1 ≤ N, P ≤ 10^9 -----Example----- Input: 2 3 2 4 3 Output: 14 100 -----Explanation----- Example case 1. The series sum 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14. Example case 2. The series sum 1^3 + 2^3 + 3^3 + 4^3 = 1 + 8 + 27 + 64 = 100.","solution":"MOD = 10**9 + 7 def sum_series(N, P): Calculate the sum of the series S = 1^P + 2^P + ... + N^P modulo 10^9 + 7. sum_S = 0 for i in range(1, N + 1): sum_S = (sum_S + pow(i, P, MOD)) % MOD return sum_S def johns_math_homework(T, cases): results = [] for case in cases: N, P = case results.append(sum_series(N, P)) return results"},{"question":"You are given an array of integers, where every element appears three times except for one, which appears exactly once. Your task is to find and return the element that appears only once. You must implement an algorithm that runs in linear runtime complexity and uses only constant extra space. -----Input----- The first line contains an integer n (4 leq n leq 10^5), the size of the array. The second line contains n integers a_1, a_2, ldots, a_n, describing the elements of the array (-10^9 leq a_i leq 10^9). -----Output----- Output a single integer — the element that appears only once in the array. -----Examples----- Input 7 2 2 3 2 1 1 1 Output 3 Input 10 0 1 0 1 0 1 99 -999 -999 -999 Output 99 -----Note----- In the first example, the array has 7 elements. The element that appears only once is 3, while all other elements appear exactly three times. In the second example, the array includes 10 elements. Element 99 appears exactly once, and other elements either appear three times or are not unique.","solution":"def single_number(nums): Finds the element that appears exactly once in a list where all other elements appear three times. Args: nums (List[int]): The list of integers. Returns: int: The single element that appears exactly once. ones, twos = 0, 0 for num in nums: # \'ones\' keeps track of numbers that have appeared 1st time ones = (ones ^ num) & ~twos # \'twos\' keeps track of numbers that have appeared 2nd time twos = (twos ^ num) & ~ones return ones"},{"question":"You are given two strings s1 and s2 of length n. You can choose some (possibly none) substrings from each string in such a way that these substrings are start-to-finish in the original strings. After selecting, you can swap any chosen substring of s1 with a chosen substring of s2 if and only if the substrings have equal length. Your task is to determine whether it is possible to rearrange s1 and s2 so that they become equal after performing a series of allowed swaps. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the strings. The second line contains the string s1 consisting of lowercase English letters. The third line contains the string s2 consisting of lowercase English letters. -----Output----- Output \\"Yes\\" if it is possible to make s1 and s2 equal by performing a series of allowed swaps, otherwise output \\"No\\" (without quotes). You can print each character in any case (upper or lower). -----Examples----- Input 4 abcd dcba Output Yes Input 4 abc def Output No Input 6 aabbcc bbaacc Output Yes Input 3 abc xyz Output No -----Note----- In the first example, you can select substrings \\"ab\\" from s1 and \\"ba\\" from s2 and swap them to make both strings equal. In the second example, there are no common characters between s1 and s2, so it is impossible to make the strings equal. In the third example, you can perform swaps to make s1 and s2 identical by choosing substrings of equal lengths from both strings.","solution":"def can_rearrange_to_equal(n, s1, s2): Determines whether it is possible to make s1 and s2 equal by performing a series of allowed swaps. Args: n (int): Length of the strings. s1 (str): First string. s2 (str): Second string. Returns: str: \\"Yes\\" if it is possible to make s1 and s2 equal, otherwise \\"No\\". from collections import Counter if Counter(s1) == Counter(s2): return \\"Yes\\" else: return \\"No\\""},{"question":"Write a function that takes in an integer `n` which represents the number of people standing in a circle and an integer `k` which represents that every k-th person will be eliminated in a circle until only one remains. Return the position (1-indexed) of the last remaining person. Example 1: Input: n = 5, k = 2 Output: 3 Example 2: Input: n = 6, k = 3 Output: 1 Your Task: Complete the function josephus() which takes two integers n and k as input and returns the position of the last remaining person. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= n <= 1000 1 <= k <= 1000","solution":"def josephus(n, k): Returns the last person standing in the Josephus problem. if n == 1: return 1 else: # Using 0-based index for computation and converting the final result to 1-based return (josephus(n - 1, k) + k - 1) % n + 1"},{"question":"Given an integer array `arr` of size `n` and `q` queries, where each query can update a range of the array with either an addition or multiplication operation. Your goal is to process these queries and output the final state of the array. Each query is defined by a tuple (t, l, r, v): * `t` defines the type of operation: - If `t` is 1, add `v` to all elements in the range `[l, r]`. - If `t` is 2, multiply all elements in the range `[l, r]` by `v`. * `l` and `r` (1-based indexing) denote the start and end indices of the range. * `v` is the value to be added or multiplied. Constraints: - `1 <= n, q <= 10^5` - `1 <= arr[i], v <= 10^9` - `1 <= l <= r <= n` - The array values after all operations can be very large, so return them modulo `1000000007`. Input: - The first line contains two integers `n` and `q` - the size of the array and the number of queries. - The second line contains `n` space-separated integers representing the initial array. - The next `q` lines describe the queries, each containing four integers `t`, `l`, `r`, `v`. Output: - Output the final array after processing all queries. Examples: Input: ``` 5 3 1 2 3 4 5 1 1 3 10 2 2 4 2 1 4 5 5 ``` Output: ``` 11 24 26 18 15 ``` Explanation: - Apply first query: Add 10 to indices [1, 3] -> [11, 12, 13, 4, 5] - Apply second query: Multiply indices [2, 4] by 2 -> [11, 24, 26, 8, 5] - Apply third query: Add 5 to indices [4, 5] -> [11, 24, 26, 13, 10]","solution":"MOD = 1000000007 def process_queries(n, q, arr, queries): Processes the given queries on the array and returns the final array. Parameters: n (int): size of the array q (int): number of queries arr (list): initial array of integers queries (list): list of queries where each query is a tuple (t, l, r, v) Returns: list: the final state of the array after processing all queries for query in queries: t, l, r, v = query l -= 1 r -= 1 if t == 1: for i in range(l, r + 1): arr[i] = (arr[i] + v) % MOD elif t == 2: for i in range(l, r + 1): arr[i] = (arr[i] * v) % MOD return arr"},{"question":"You are responsible for developing a warehouse management system. One of the main features is to automate the process of arranging products into the correct sections. The warehouse is divided into sections A, B, C, and D. Each product is uniquely identified by its SKU (Stock Keeping Unit) which is a string of alphanumeric characters. Different types of products are always stored in specific sections as follows: - Section A: Products whose SKU ends with \'A\' - Section B: Products whose SKU ends with \'B\' - Section C: Products whose SKU ends with \'C\' - Section D: Products whose SKU ends with any other character Task You must write a function `arrangeProduct` that takes a list of SKUs and returns a dictionary where the keys are section names (\'A\', \'B\', \'C\', \'D\') and the values are lists containing the SKUs that belong to those sections. The SKUs must be listed in the order they appear in the input list. In Python, the function will be defined as follows: `arrangeProduct(skus: List[str]) -> Dict[str, List[str]]`. Examples Function prototype: arrangeProduct(skus) 1. arrangeProduct([\'12A\', \'34B\', \'56C\', \'78D\']) outputs {\'A\': [\'12A\'], \'B\': [\'34B\'], \'C\': [\'56C\'], \'D\': [\'78D\']}. Each SKU is placed in the correct section based on the last character. 2. arrangeProduct([\'XYZC\', \'123A\', \'DEF\', \'67B\', \'891D\']) outputs {\'A\': [\'123A\'], \'B\': [\'67B\'], \'C\': [\'XYZC\'], \'D\': [\'DEF\', \'891D\']}. Note that \'DEF\' and \'891D\' do not end with \'A\', \'B\', or \'C\', so both are placed in section D. 3. arrangeProduct([]) outputs {\'A\': [], \'B\': [], \'C\': [], \'D\': []}. The function should handle an empty list by returning an empty dictionary for each section.","solution":"from typing import List, Dict def arrangeProduct(skus: List[str]) -> Dict[str, List[str]]: Arrange products into their respective warehouse sections based on SKU. Parameters: skus (List[str]): List of SKU strings. Returns: Dict[str, List[str]]: Dictionary with keys as section names (\'A\', \'B\', \'C\', \'D\') and values as lists of SKUs that belong to those sections. sections = {\'A\': [], \'B\': [], \'C\': [], \'D\': []} for sku in skus: last_char = sku[-1] if last_char == \'A\': sections[\'A\'].append(sku) elif last_char == \'B\': sections[\'B\'].append(sku) elif last_char == \'C\': sections[\'C\'].append(sku) else: sections[\'D\'].append(sku) return sections"},{"question":"In an amusement park, N friends decide to ride on several different roller coasters. Each roller coaster has a maximum capacity and can run multiple times. The goal is to determine the minimum number of roller coaster rides required for all friends to enjoy a ride, given the capacity restrictions. You are given an integer array `friends_weights[]` of length `N`, where `friends_weights[i]` represents the weight of the ith friend. Additionally, you are given an integer `capacity` which is the maximum weight a roller coaster can hold per ride. Write a function `min_rides` to calculate the minimum number of roller coaster rides required for all friends. Friends can ride in any order, but the total weight in a single ride must not exceed `capacity`. **Example 1:** ``` Input: friends_weights = [50, 75, 80, 110], capacity = 150 Output: 3 Explanation: - First ride: [75, 50] (total weight = 125) - Second ride: [80] (total weight = 80) - Third ride: [110] (total weight = 110) ``` **Example 2:** ``` Input: friends_weights = [100, 200, 150], capacity = 200 Output: 3 Explanation: - Each friend needs a separate ride because none of the combinations of their weights stay within the capacity limit of 200. ``` **Your Task:** You need to write a function `min_rides(friends_weights, capacity)` that takes an array `friends_weights` and an integer `capacity`, and returns the minimum number of rides required. **Expected Time Complexity:** O(N log N) **Expected Auxiliary Space:** O(N) **Constraints:** 1 ≤ N ≤ 10^5 1 ≤ friends_weights[i] ≤ 10^4 1 ≤ capacity ≤ 10^4","solution":"def min_rides(friends_weights, capacity): Calculate the minimum number of roller coaster rides required for all friends given the capacity restrictions. friends_weights.sort() left, right = 0, len(friends_weights) - 1 rides = 0 while left <= right: if friends_weights[left] + friends_weights[right] <= capacity: left += 1 right -= 1 rides += 1 return rides"},{"question":"Given an integer array `arr` of size `n`, you are required to determine the maximum sum of the elements of a subarray that does not include any two consecutive elements of the original array. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^6) — the size of the array. - The second line contains `n` integers: `arr_1, arr_2, ..., arr_n` (|arr_i| ≤ 10^4) — the elements of the array. # Output Print a single integer, denoting the maximum sum of the elements of a subarray that does not include any two consecutive elements of the original array. # Example Input ``` 4 3 2 5 10 ``` Output ``` 13 ``` Explanation The optimal subarray is `[3, 10]` or `[5, 3]` with the sum of 13. Input ``` 5 3 2 7 10 12 ``` Output ``` 22 ``` Explanation The optimal subarray is `[3, 7, 12]` with the sum of 22. # Note - In the first example, the optimal subarrays are `[3, 10]` or `[5, 3]`, both of which provide the maximum sum of 13. - In the second example, selecting the subarray `[3, 7, 12]` gives the maximum sum of 22, as taking `10` would force skipping `7` or `12`, resulting in a lower sum.","solution":"def max_sum_non_consecutive(arr): if not arr: return 0 n = len(arr) if n == 1: return max(0, arr[0]) dp = [0] * n dp[0] = max(0, arr[0]) if n > 1: dp[1] = max(dp[0], arr[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + arr[i]) return dp[-1] # For handling the input format def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(max_sum_non_consecutive(arr)) if __name__ == \\"__main__\\": main()"},{"question":"The Mysterious Island has n palm trees planted in a line, with each palm tree harboring an unknown number of coconuts. You are given an array containing the number of coconuts each palm tree has. You can choose any one palm tree and collect all the coconuts from it. However, this action also causes all coconuts on its adjacent trees to fall to the ground, making them irrecoverable. Your task is to determine the maximum number of coconuts you can collect. Write a function that computes the maximum number of coconuts you can gather. Function signature: `def max_coconuts(coconuts: List[int]) -> int:` -----Constraints----- - 1 <= n <= 1000 - 0 <= coconuts[i] <= 1000 for all 0 <= i < n -----Input----- - A list of integers where each element represents the number of coconuts on a palm tree in sequence. -----Output----- - Return an integer representing the maximum number of coconuts that can be collected. -----Sample Input----- [3, 2, 5, 10, 7] -----Sample Output----- 15 Explanation: - You can collect coconuts from the 1st tree (index 0) and get 3 coconuts. - Next, you can collect from the 3rd tree (index 2) and get 5 coconuts. - Finally, you can collect from the 5th tree (index 4) and get 7 coconuts. - The total number of coconuts collected is 3 + 5 + 7 = 15.","solution":"def max_coconuts(coconuts): Function to calculate the maximum number of coconuts that can be collected considering the constraint that collecting from one tree makes adjacent trees\' coconuts irrecoverable. if not coconuts: return 0 n = len(coconuts) # Edge cases for tree counts 1 and 2 if n == 1: return coconuts[0] if n == 2: return max(coconuts[0], coconuts[1]) # dp[i] will store the maximum coconuts that can be collected up to tree i dp = [0] * n dp[0] = coconuts[0] dp[1] = max(coconuts[0], coconuts[1]) for i in range(2, n): # Collect from the current tree (coconuts[i]) and add the best from dp[i - 2] dp[i] = max(dp[i - 1], coconuts[i] + dp[i - 2]) return dp[-1]"},{"question":"Given an array of integers, find the smallest and largest values that can be calculated by summing any subset of the array with at least one element. Then print the respective smallest and largest values as a single line of two space-separated long integers. Function Description Complete the sumMinMax function in the editor below. sumMinMax has the following parameter(s): arr: an array of integers Print Print two space-separated integers on one line: the minimum sum and the maximum sum of any non-empty subset of the array. Input Format A single line containing space-separated integers. Constraints 1 <= |arr| <= 100 -10^9 <= arr[i] <= 10^9 Output Format Print two space-separated long integers denoting the minimum and maximum values that can be calculated by summing subsets of the array. Sample Input 1 1 2 3 4 5 Sample Output 1 1 15 Explanation 1 The smallest possible sum of any subset is the smallest element itself: 1. The largest possible sum is the sum of all elements: 1 + 2 + 3 + 4 + 5 = 15. Sample Input 2 -1 -3 2 4 Sample Output 2 -4 6 Explanation 2 The smallest possible sum is the sum of all negative numbers: -1 + (-3) = -4. The largest possible sum is the sum of all elements: -1 + (-3) + 2 + 4 = 2.","solution":"def sumMinMax(arr): Function that prints the minimum and maximum sum of any non-empty subset of the array. Parameters: arr (list): an array of integers Prints: Two space-separated integers: the minimum sum and the maximum sum of any non-empty subset of the array min_sum = min(arr) max_sum = sum(arr) print(f\\"{min_sum} {max_sum}\\")"},{"question":"In an art gallery, there is a long straight wall on which paintings are hung. The paintings are of various heights, and they are aligned perfectly at their bases along the wall. The gallery wants to install a rectangular lighting system above the paintings such that all of them are illuminated. The lighting system must not protrude beyond the height of the highest painting, but it can start at any height above the tallest painting as long as it spans the entire length of the wall. The owners prefer a lighting system with the smallest possible height (to minimize costs), but ensuring it spans the entire length of the wall and covers all the paintings fully from above. Given the heights of all the paintings, your task is to determine the minimum height of the lighting system required above the base level. -----Task----- Given the heights of the paintings, determine the smallest height of the lighting system that will illuminate all of the paintings. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000), the number of paintings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_ i ≤ 1000000), the heights of the paintings. -----Output----- Output a single integer, the minimum height of the lighting system required to illuminate all the paintings. -----Examples----- Sample Input: 5 4 2 3 6 5 Sample Output: 6","solution":"def minimum_lighting_height(n, heights): Given the number of paintings and their heights, this function returns the minimum height of the lighting system needed to illuminate all the paintings. return max(heights)"},{"question":"In a magical forest, there are n enchanted trees in a row, each with a unique height. A bird can land on any tree and peck at it to decrease its height by 1. The bird can move from one tree to an adjacent one and peck at it, continuing to do so until it decides to stop or has reduced the height of all trees by 1. The bird can make only one hop (i.e., move from one tree to the next one) and an arbitrary number of pecks before or after the hop. The bird\'s movement strategy is to peck as many trees as possible by decreasing each tree\'s height by 1, but it can only hop once. Given the initial heights of the trees, determine the maximum number of distinct trees the bird can peck at exactly once during its movement. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 100) — the number of trees. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 100) — the height of each tree. The sum of n over all test cases doesn\'t exceed 2 cdot 10^4. -----Output----- For each test case, print a single integer — the maximum number of distinct trees the bird can peck at exactly once. -----Examples----- Input 3 4 1 2 3 4 3 5 5 5 5 1 3 1 3 1 Output 4 3 3 -----Note----- In the first test case, the bird can peck at all trees successively either without hopping or with a single hop after any tree, making 4 trees pecked exactly once. In the second test case, since all trees have the same height, the bird can only peck at 3 trees by decreasing their height by 1 moving continuously. In the third test case, the bird can peck the first, second, and third trees starting from the first tree, then hop once to the fourth tree, peck at the fourth tree, and could also peck on the fifth tree sequentially but limited overall to 3.","solution":"def max_distinct_pecks(n, heights): Determines the maximum number of distinct trees the bird can peck at exactly once. :param n: Integer, number of trees :param heights: List of integers, heights of the trees :return: Integer, maximum number of distinct trees that can be pecked exactly once # The bird can peck each tree exactly once without necessarily hopping. # If there\'s only one tree, it can only peck that one tree. if n == 1: return 1 # In the general case, the bird can peck continuously until the last or second last tree, # then possibly hop once and continue pecking. # Maximum distinct trees: always the number of trees since it can move linearly or hop in between. return n"},{"question":"A large software company is organizing a team-building event where employees participate in various coding challenges. One of the challenges involves rearranging a given string. Each team must transform a given string `s` into a new string by moving its characters around. However, there is a specific rule that must be followed during the transformation: - The frequency of each character in the output string must match the frequency of each character in the input string. - The transformed string must be the lexicographically smallest string possible after rearranging the characters. Given this task, you need to help the team by writing a program that produces the required transformed string. Input: The first line contains `t`, the number of testcases. Following this are `t` lines, each containing a single string `s`. Output: For each test case, output the lexicographically smallest string that can be obtained by rearranging the characters of the given string. Constraints: - 1 ≤ t ≤ 100 - 1 ≤ |s| ≤ 1000 - s only contains lowercase English letters SAMPLE INPUT 3 cba bca zyx SAMPLE OUTPUT abc abc xyz Explanation Given the input strings, the rearrangement of characters should result in the smallest lexicographical order possible. For the first test case, rearranging \\"cba\\" results in \\"abc\\". The same logic applies to the other cases as well.","solution":"def smallest_lexicographic_string(t, strings): Given a list of strings, returns a list of their lexicographically smallest permutations. Parameters: t (int): Number of test cases strings (list): List of strings Returns: list: List of lexicographically smallest permutations result = [] for s in strings: result.append(\\"\\".join(sorted(s))) return result"},{"question":"# The Widget Factory In the town of Codeville, there\'s a widget factory that produces widgets at a very high rate. The factory operates in multiple shifts per day, and for each shift, there is an ideal number of widgets that should be produced. However, due to varying circumstances, the actual number of widgets produced in a shift may either be below or above this ideal number. The manager of the factory wants to know the daily performance by comparing the actual number of widgets produced to the ideal number. Your task is to write a function `calculate_performance` that takes in a list of integers `actual`, where each integer represents the number of widgets produced in a specific shift, and an integer `ideal`, which is the ideal number of widgets that should be produced per shift. The function should return a string that describes the performance of the factory for the day as \\"Under production\\" if the total number of widgets produced in the day is less than the total ideal number for all shifts, \\"Over production\\" if the total number of widgets produced in the day is more than the total ideal number for all shifts, and \\"Ideal production\\" if the number of widgets produced is exactly the ideal number for the day. # Task Write a function `calculate_performance` that takes a list of integers `actual` and an integer `ideal`, and returns a string indicating the performance for the day. # Examples ```python calculate_performance([90, 120, 110], 100) == \\"Over production\\" calculate_performance([100, 100, 100], 100) == \\"Ideal production\\" calculate_performance([80, 90, 85], 100) == \\"Under production\\" ``` # Constraints - `actual` will have a length between 1 and 10^4. - Each element of `actual` will be a non-negative integer no greater than 10^3. - `ideal` will be a positive integer no greater than 10^3.","solution":"def calculate_performance(actual, ideal): Calculate the performance of the widget factory. :param actual: List of integers representing the number of widgets produced in each shift. :param ideal: Integer representing the ideal number of widgets that should be produced per shift. :return: String indicating the performance of the factory. total_actual = sum(actual) total_ideal = ideal * len(actual) if total_actual < total_ideal: return \\"Under production\\" elif total_actual > total_ideal: return \\"Over production\\" else: return \\"Ideal production\\""},{"question":"Mary is an avid traveler and a photographer. During her travels, she often uploads her photos to an online platform called “MemoryLane”. Each photo she uploads has a tag associated with it indicating the city where the photo was taken. She is planning a trip back to visit some of these cities, but before that, she wants to know how many unique cities she has already visited to avoid revisiting the same place again and to plan her travel efficiently. You are given multiple lists of city tags for different trips. Your task is to determine the number of unique cities Mary has visited for each trip. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases ( t ) (( 1 le t le 10^3 )). Description of the test cases follows. The first line of each test case contains a single integer ( n ) (( 1 le n le 10^3 )) — the number of cities in the trip. The second line of each test case contains ( n ) strings separated by spaces, representing the city tags. It is guaranteed that the total number of city tags across all test cases does not exceed ( 10^3 ). -----Output----- For each test case, output the number of unique cities Mary visited during that trip. -----Example----- Input 5 3 Paris London Paris 4 NewYork Tokyo NewYork Tokyo 2 Berlin Berlin 5 Paris Berlin NewYork Tokyo Rome 1 Kyoto Output 2 2 1 5 1 -----Note----- In the first test case of the example, the unique cities are \\"Paris\\" and \\"London\\". In the third test case of the example, the unique city is \\"Berlin\\". In the fourth test case of the example, all cities are unique: \\"Paris\\", \\"Berlin\\", \\"NewYork\\", \\"Tokyo\\", and \\"Rome\\".","solution":"def count_unique_cities(test_cases): Given multiple test cases each containing a list of city tags for different trips, determine the number of unique cities visited for each trip. :param test_cases: list of tuples where each tuple consists of: - an integer n, the number of city tags - a list of n strings, each representing a city tag :return: list of integers where each integer represents the number of unique cities for corresponding test case unique_city_counts = [] for n, cities in test_cases: unique_cities = set(cities) unique_city_counts.append(len(unique_cities)) return unique_city_counts"},{"question":"Write a function called \\"remove_vowels\\" that takes a string as input and returns a new string with all the vowels (a, e, i, o, u, both uppercase and lowercase) removed. For example: ```python remove_vowels(\\"Hello, World!\\") # returns \\"Hll, Wrld!\\" remove_vowels(\\"Python\\") # returns \\"Pythn\\" remove_vowels(\\"AEIOUaeiou\\") # returns \\"\\" ``` Note: Your function should handle both uppercase and lowercase vowels and should not affect other characters, including punctuation and whitespace.","solution":"def remove_vowels(s): Returns a new string with all vowels (a, e, i, o, u, both uppercase and lowercase) removed from the input string s. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in s if char not in vowels)"},{"question":"# Task You are given a string `s` that consists of lowercase Latin letters and a string `t` that consists of lowercase Latin letters and wildcard characters `?`. A character `?` in `t` can be replaced by any lowercase Latin letter to form a word. Determine if it is possible to replace the wildcard characters in `t` in such a way that `t` can be formed as a subsequence of `s`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the order of the remaining characters. Return `True` if it is possible to form `t` as a subsequence of `s`, otherwise, return `False`. # Example For `s=\\"abcdef\\", t=\\"a?c?e\\"`, the output should be `True`. Replace characters `?` in `t` to form \\"abce\\" which is a subsequence of `s`. For `s=\\"abcdef\\", t=\\"a?c?g\\"`, the output should be `False`. Replacing characters `?` in `t` cannot form a valid subsequence in `s`. # Constraints - `1 <= |s|, |t| <= 1000` - `s` and `t` consists of lowercase Latin letters and `?` only.","solution":"def can_form_subsequence(s, t): Determine if it\'s possible to replace the wildcard characters in `t` in such a way that `t` can be formed as a subsequence of `s`. :param s: string consisting of lowercase Latin letters :param t: string consisting of lowercase Latin letters and \'?\' :return: True if `t` can be a subsequence of `s` after replacing \'?\', otherwise False ps, pt = 0, 0 while pt < len(t) and ps < len(s): if t[pt] == \'?\' or t[pt] == s[ps]: pt += 1 ps += 1 return pt == len(t)"},{"question":"You are given an array of integers. An integer is called a \\"peak\\" if it is strictly greater than its neighbors. Your task is to find the peak element in the array. You need to implement a function that accepts an array of integers and returns the value of a peak element. If the array contains multiple peak elements, return the first one you encounter from left to right. You can assume that the array contains at least one peak element. Input Format: The first line contains a single integer N, the number of elements in the array. The second line contains N space-separated integers representing the array. Output Format: Output a single integer, the value of the first encountered peak element in the array. Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ Array elements ≤ 10^9 SAMPLE INPUT 6 1 3 20 4 1 0 SAMPLE OUTPUT 20 Explanation In the given array, - 3 is not a peak because its next element (20) is greater. - 20 is a peak because it is greater than its both neighbors (3 and 4). - 4 is not a peak because its next element (1) is less, but it is overridden by 20 encountered first. Hence, the first peak element is 20.","solution":"def find_first_peak(arr): Returns the value of the first peak element in the array. n = len(arr) for i in range(n): if (i == 0 or arr[i] > arr[i-1]) and (i == n-1 or arr[i] > arr[i+1]): return arr[i]"},{"question":"In the city of Machineville, there are n intersections connected by m bidirectional roads. Each road has a unique ID and connects two different intersections. The city\'s transportation department logs the traffic through the intersections and needs to determine the k most frequently used roads provided in their logs. You are to implement a function that receives the number of intersections, the number of roads, and a list of roads observed in the logs. Your task is to identify the k roads that appeared most frequently in these observations. If there is a tie in the frequency count, the roads should be ordered by their IDs in ascending order. -----Input----- The first line contains two integers n (2 ≤ n ≤ 10^4) — the number of intersections, and m (1 ≤ m ≤ 10^5) — the number of roads. Each of the next m lines contains three integers u, v (1 ≤ u, v ≤ n, u ≠ v), and id (1 ≤ id ≤ 10^5) — the intersections connected by this road and the unique road ID, respectively. The following line contains an integer l (1 ≤ l ≤ 10^5) indicating the number of observed roads in the logs. The last line contains l integers (1 ≤ id_i ≤ 10^5) corresponding to the IDs of the roads observed in the logs. -----Output----- Output the IDs of the k most frequently observed roads. If there are multiple roads with the same frequency, order them by their IDs in ascending order. -----Examples----- Input 5 7 1 2 10 2 3 20 3 4 30 4 5 40 5 1 50 2 4 60 3 5 70 6 20 40 60 40 50 20 Output 20 40 50 60 Input 4 5 1 2 10 2 3 20 3 4 30 4 1 40 1 3 50 8 10 20 20 30 30 30 40 50 Output 30 20 10 40","solution":"def most_frequent_roads(n, m, road_list, l, observed_roads): from collections import Counter road_count = Counter(observed_roads) most_common_roads = road_count.most_common() # Sort firstly by frequency in descending order, and then by road ID in ascending order most_common_roads.sort(key=lambda x: (-x[1], x[0])) return [road[0] for road in most_common_roads]"},{"question":"Given a string ( S ) consisting of lowercase English letters and an integer ( K ), write a function that returns the length of the shortest substring of ( S ) that contains at least ( K ) unique characters. If no such substring exists, return -1. -----Input----- The input consists of a string ( S ) where ( 1 leq |S| leq 10^6 ) and an integer ( 1 leq K leq 26 ). -----Output----- The output is a single integer, representing the length of the shortest substring that contains at least ( K ) unique characters, or -1 if no such substring exists. -----Examples----- Sample Input 1: abcba 2 Sample Output 1: 2 Sample Input 2: aaaa 2 Sample Output 2: -1 Sample Input 3: abcdef 6 Sample Output 3: 6 Sample Input 4: abaccc 3 Sample Output 4: 3","solution":"def shortest_substring_with_k_unique_chars(S, K): from collections import defaultdict n = len(S) if K > 26 or K > n: return -1 left = 0 min_length = float(\'inf\') char_count = defaultdict(int) unique_count = 0 for right in range(n): if char_count[S[right]] == 0: unique_count += 1 char_count[S[right]] += 1 while unique_count >= K: min_length = min(min_length, right - left + 1) char_count[S[left]] -= 1 if char_count[S[left]] == 0: unique_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Write a function, isSymmetric, that takes in a 2D array (matrix) and returns true if the matrix is symmetric (identical across its main diagonal). Return false if the input is not a valid 2D array. For more information about symmetric matrices, see: https://en.wikipedia.org/wiki/Symmetric_matrix","solution":"def isSymmetric(matrix): Checks if a given 2D array (matrix) is symmetric. A matrix is symmetric if and only if it is equal to its transpose, i.e., matrix[i][j] == matrix[j][i] for all i and j. Args: matrix: list of lists (2D array) Returns: bool: True if the matrix is symmetric, False otherwise if not matrix or not all(isinstance(row, list) for row in matrix): return False rows = len(matrix) for row in matrix: if len(row) != rows: return False for i in range(rows): for j in range(i, rows): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"You are given an array of integers that represent the heights of buildings in a city skyline. You are to determine the maximum amount of water that can be trapped between the buildings after it rains. Imagine that each building is a vertical line of unit width. The rainwater trapped between two buildings is determined by the shorter height, as water cannot spill over the taller of the two. The water trapped in each gap between buildings will be the difference between the height of the shorter building and the height of the actual ground/building at that point. Write a function that, given an array of building heights, returns the total amount of water that can be trapped. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (0 le h_i le 10^4) — the heights of the buildings. -----Output----- Output one integer — the total amount of water that can be trapped between the buildings. -----Example----- Input 6 3 0 2 0 4 1 Output 7 -----Explanation----- In this example, the array of building heights is [3, 0, 2, 0, 4, 1]. The total water trapped is calculated as follows: - Between buildings at index 0 and index 4, the height is limited by the lower building, which is at index 0 with height 3. The gaps at index 1, 2, and 3 can trap water up to a level of 3 units each. - Specific water trapped: (3-0) + (3-2) + (3-0) = 3 + 1 + 3 = 7. Thus, the total amount of trapped water is 7 units.","solution":"def trap_rainwater(heights): Calculate the total amount of water that can be trapped between the buildings :param heights: List[int] - an array of integers representing the heights of buildings :return: int - the total amount of water that can be trapped if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Maria is planning to run errands and visit several places around town. She has a list of n places she needs to visit, each with a given distance from her starting point. Since she is short on time, she wants to find the shortest possible route that visits all n places and returns back to the starting point. You are required to help Maria find this shortest route using the Travelling Salesperson problem (TSP) approach. The distances between the places are given in a symmetric distance matrix where the distance between place i and place j is the same as the distance between place j and place i. -----Input----- The first line of the input contains an integer n (2 leq n leq 10), the number of places Maria needs to visit. The next n lines contain n space-separated integers each, representing the symmetric distance matrix. The j-th number in the i-th line represents the distance between place i and place j (1 leq text{distance} leq 100). -----Output----- Output the minimum distance that allows Maria to visit all places and return to the starting point. -----Examples----- Sample Input 1: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output 1: 80 Sample Input 2: 3 0 5 9 5 0 10 9 10 0 Sample Output 2: 24","solution":"def tsp_dp(distances): from functools import lru_cache n = len(distances) # Mask to represent all vertices visited ALL_VISITED = (1 << n) - 1 @lru_cache(None) def visit(city, mask): if mask == ALL_VISITED: return distances[city][0] # return to starting point min_dist = float(\'inf\') for next_city in range(n): if mask & (1 << next_city) == 0: new_mask = mask | (1 << next_city) min_dist = min(min_dist, distances[city][next_city] + visit(next_city, new_mask)) return min_dist # Start recursion with the first city and mask indicating only the first city is visited return visit(0, 1 << 0)"},{"question":"You are given a grid of characters and a dictionary of words. Your task is to find all valid words from the dictionary that can be formed by sequentially adjacent letters in the grid. \\"Adjacent\\" letters are those horizontally or vertically neighboring. Words must be constructed from letters of sequentially adjacent cell, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Input The input starts with two integers, R and C (1 ≤ R, C ≤ 10), representing the number of rows and columns in the grid, respectively. This is followed by R lines, each containing exactly C characters without any spaces, representing the grid of characters. Then a single integer N (1 ≤ N ≤ 100) follows, representing the number of words in the dictionary. This is followed by N lines, each containing a single word with length between 1 and 20. Output For each word in the dictionary, print \\"YES\\" if it can be formed in the grid according to the rules described, otherwise print \\"NO\\". Example Input 3 4 abcd efgh ijkl 5 abc abcd abcfh ijkl efg Output YES YES NO YES YES Explanation - \\"abc\\" can be formed from the first row. - \\"abcd\\" can be formed from the first row. - \\"abcfh\\" cannot be formed because although \'a\', \'b\', \'c\', and \'f\' exist, they are not serially adjacent. - \\"ijkl\\" can be formed from the last row. - \\"efg\\" can be formed from cells (2, 1), (2, 2), (2, 3).","solution":"def exist(board, word): if not board: return False rows, cols = len(board), len(board[0]) def dfs(r, c, index): if index == len(word): return True if not (0 <= r < rows) or not (0 <= c < cols) or board[r][c] != word[index]: return False # Mark this cell as visited temp, board[r][c] = board[r][c], \'#\' found = (dfs(r+1, c, index+1) or dfs(r-1, c, index+1) or dfs(r, c+1, index+1) or dfs(r, c-1, index+1)) board[r][c] = temp return found for r in range(rows): for c in range(cols): if dfs(r, c, 0): return True return False def find_words_in_grid(grid, words): result = [] for word in words: if exist([list(row) for row in grid], word): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Anna has a sequence of n integers b_1, b_2, ldots, b_n. She can perform exactly one of the following operations on the sequence: 1. **Swap**: Choose two elements in the sequence and swap their positions. 2. **Replace**: Choose one element in the sequence and replace it with any other integer. Anna wants to modify the sequence such that the new modified sequence is non-decreasing. Can you determine if it is possible to achieve this by performing exactly one operation? -----Input----- The first line contains a single integer t (1 le t le 10^4), the number of test cases. Each of the following t lines describes a test case. Each test case consists of two lines: - The first line contains n (2 le n le 10^5), the length of the sequence. - The second line contains n space-separated integers b_1, b_2, ldots, b_n (-10^9 le b_i le 10^9). -----Output----- For each test case, print \\"YES\\" if it is possible to make the sequence non-decreasing by performing exactly one operation, otherwise print \\"NO\\". -----Examples----- Input 3 4 1 5 3 2 3 4 2 3 5 5 4 3 2 1 Output YES YES NO -----Note----- In the first test case, we can swap 5 and 3 to get the sequence [1, 3, 5, 2] and then replace 2 with a larger number to get a non-decreasing sequence. In the second test case, we can simply replace 2 with 5 to get the sequence [4, 5, 3], which is already non-decreasing. In the third test case, it is impossible to get a non-decreasing sequence by performing only one operation.","solution":"def can_be_non_decreasing(t, test_cases): results = [] for n, arr in test_cases: if is_non_decreasing(arr): results.append(\\"YES\\") continue possible = False for i in range(n): for j in range(i + 1, n): # Try swapping i and j arr[i], arr[j] = arr[j], arr[i] if is_non_decreasing(arr): possible = True # Swap back to its original state arr[i], arr[j] = arr[j], arr[i] if possible: break if possible: break if not possible: for i in range(n): original = arr[i] for replacement in range(-10**9, 10**9 + 1, 2*10**9): # Use a large step to minimize iterations arr[i] = replacement if is_non_decreasing(arr): possible = True break arr[i] = original if possible: break results.append(\\"YES\\" if possible else \\"NO\\") return results def is_non_decreasing(arr): return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"},{"question":"City Maintenance in Metropolis is facing a tricky problem. There are famous gardens throughout the city that citizens love to walk through. Each garden is represented by an array of integers, where the i-th integer represents the beauty score of the i-th garden. George, the city planner, wants to help citizens avoid walking through sections of the gardens with the lowest beauty scores. He needs to find the smallest beauty score among all contiguous subarrays of length k. Can you help him achieve this? -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of gardens and the length of each subarray. The second line contains n integers b_1, b_2, ..., b_{n} (-10^6 ≤ b_{i} ≤ 10^6) — the beauty scores for each garden. -----Output----- Print n - k + 1 integers — the smallest beauty score in each of the contiguous subarrays of length k. -----Examples----- Input 7 3 1 3 -1 -3 5 3 6 7 Output -1 -3 -3 -3 3 3 Input 5 2 2 1 4 5 6 Output 1 1 4 5 -----Note----- In the first sample case, the minimum beauty scores of each subarray of length 3 are: - [1, 3, -1] -> -1 - [3, -1, -3] -> -3 - [-3, 5, 3] -> -3 - [5, 3, 6] -> 3 - [3, 6, 7] -> 3 In the second sample case, the minimum beauty scores of each subarray of length 2 are: - [2, 1] -> 1 - [1, 4] -> 1 - [4, 5] -> 4 - [5, 6] -> 5","solution":"from collections import deque def find_smallest_beauty_in_subarrays(n, k, beauty_scores): Returns the smallest beauty scores of each contiguous subarray of length k. result = [] dequeue = deque() for i in range(k): while dequeue and beauty_scores[dequeue[-1]] >= beauty_scores[i]: dequeue.pop() dequeue.append(i) for i in range(k, n): result.append(beauty_scores[dequeue[0]]) while dequeue and dequeue[0] <= i - k: dequeue.popleft() while dequeue and beauty_scores[dequeue[-1]] >= beauty_scores[i]: dequeue.pop() dequeue.append(i) result.append(beauty_scores[dequeue[0]]) return result"},{"question":"Given an array of distinct integers of size N, determine the length of the longest subsequence such that the difference between consecutive elements is the same. A subsequence is a sequence derived from the array by deleting some or none of the elements without changing the order of the remaining elements. Example 1: Input: N = 6 A = [3, 6, 9, 12, 15, 18] Output: 6 Explanation: The entire array is a subsequence where the difference between consecutive elements is 3. Example 2: Input: N = 5 A = [1, 7, 10, 15, 27] Output: 2 Explanation: The longest subsequence with the same consecutive difference is [1, 7] or [7, 15]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestSubsequenceWithSameDifference() which takes the array A and its size N as input parameters and returns the length of the longest subsequence with the same consecutive difference. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 3000 1 ≤ A[i] ≤ 10^4","solution":"def longestSubsequenceWithSameDifference(N, A): if N == 1: return 1 # Create a dictionary to track the longest subsequence with a given difference dp = [{} for _ in range(N)] # Initialize the maximum length of the subsequence max_length = 1 # Iterate through the array for i in range(1, N): for j in range(i): diff = A[i] - A[j] # If the current difference `diff` is already recorded in dp[j], # increment the length of the subsequence by 1 if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 # Update the maximum length max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"A social media company stores user information in a database. Each user profile contains a unique integer id `id` and other non-unique fields like `email`, `name`, and `date_of_birth`. To optimize the search, they want to develop an indexing system where they can quickly retrieve the id of a user based on their email address. Create a function `find_user_id_by_email(database, email)` that takes two inputs: - `database`: a list of tuples, where each tuple represents a user profile in the format `(id, email, name, date_of_birth)`. - `email`: a string representing the email address to search for. The function should return the id of the user with the given email. If no user with the given email is found, return `None`. # Input - A list of `n` user profiles, where `1 <= n <= 10^5`. - Each tuple within the list represents a user in the format `(id, email, name, date_of_birth)`. - The id is a unique integer between 1 and `10^9`. - The email is a string with at most 50 characters. - The name is a string with at most 100 characters. - The date_of_birth is a string in the format \\"YYYY-MM-DD\\". # Output - An integer representing the user id if the email is found, or `None` if it is not. # Example Input ``` database = [ (1, \\"user1@example.com\\", \\"Alice\\", \\"1990-01-01\\"), (2, \\"user2@example.com\\", \\"Bob\\", \\"1985-05-12\\"), (3, \\"user3@example.com\\", \\"Charlie\\", \\"1992-07-23\\") ] email = \\"user2@example.com\\" ``` Output ``` 2 ``` Input ``` database = [ (1, \\"user1@example.com\\", \\"Alice\\", \\"1990-01-01\\"), (2, \\"user2@example.com\\", \\"Bob\\", \\"1985-05-12\\"), (3, \\"user3@example.com\\", \\"Charlie\\", \\"1992-07-23\\") ] email = \\"user4@example.com\\" ``` Output ``` None ``` # Note - Consider efficient search mechanisms for large inputs. - Each email in the database is guaranteed to be unique.","solution":"def find_user_id_by_email(database, email): Returns the user id for the given email in the database. Args: database: list of tuples, where each tuple represents a user profile in the format (id, email, name, date_of_birth) email: string representing the email address to search for Returns: int: User id if found, else None email_to_id = {user[1]: user[0] for user in database} return email_to_id.get(email)"},{"question":"You have recently joined a startup that is building a new data analysis tool. One of your tasks is to implement an optimized search function for data sets. In this problem, you are given a sorted array of integers and an integer target value. You need to develop a function that finds the index of the target value in the array. However, your algorithm should be able to handle this efficiently even for very large arrays, so just a simple linear search won\'t be sufficient. -----Input----- Each input will consist of a single test case. The first line of the input contains an integer n (1 le n le 10^6), which is the number of integers in the sorted array. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9), representing the sorted array. The third line contains a single integer target (-10^9 le target le 10^9), representing the value you need to find in the array. -----Output----- Output a single integer. If the target value is found in the array, print its index (0-based). If the target is not found, print -1. -----Examples----- Sample Input: 10 -9 -7 -5 -3 0 2 4 7 9 12 7 Sample Output: 7 Sample Input: 5 1 2 3 4 5 6 Sample Output: -1","solution":"def binary_search(arr, target): Perform a binary search on a sorted array to find the target. Args: arr (list): The sorted list of integers. target (int): The target integer to search for. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are given an array of N integers. You can perform the following operation any number of times (including zero times): Choose any contiguous subarray from the array and multiply each element of the subarray by a non-negative integer k. Your goal is to maximize the sum of the array by using the above operation optimally. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers representing the array. ------ Output ------ For each test case, print a single line containing one integer ― the maximum possible sum of the array. ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ N ≤ 10^{5} -10^{9} ≤ text{array}[i] ≤ 10^{9} for each valid i the sum of N over all test cases does not exceed 2 cdot 10^{6} ------ Sample Input 1 ------ 2 3 -1 2 -1 4 -5 4 -3 2 ------ Sample Output 1 ------ 3 6 ------ Explanation 1 ------ Example case 1: We can choose the entire subarray and multiply -1 by 0. The resulting array is [0, 2, 0], summing to 3. Example case 2: We can choose the subarray [-5, 4, -3] and multiplying -5 and -3 by 0. The resulting array is [0, 4, 0, 2], summing to 6.","solution":"def max_possible_sum(arr): # Initialize the maximum sum to be the sum where all negative elements are set to 0 max_sum = sum(x for x in arr if x > 0) return max_sum def process_cases(test_cases): results = [] for arr in test_cases: results.append(max_possible_sum(arr)) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 array = list(map(int, data[index:index + N])) index += N test_cases.append(array) results = process_cases(test_cases) for result in results: print(result)"},{"question":"Diana is traveling through a magical forest to find a rare herb. The forest is represented by an `n x n` grid where each cell contains an integer representing the height of the terrain. Diana can move to an adjacent cell if the height difference between the current cell and the target cell is at most `h`. Your task is to determine the minimum height difference `h` Diana needs to successfully travel from the top-left corner of the grid (1,1) to the bottom-right corner (n,n). Input format & constraints: 1st line --> two integer values \'n\' and \'m\' (1 ≤ n ≤ 1000) and (0 ≤ m ≤ 10^6) where `n` denotes the size of the grid and `m` denotes the maximum allowed height difference `h`. Next n lines --> each line contains n space-separated integers between 0 and 10^6 representing the height of the terrain. Output format: A line with the minimum height difference `h` required for Diana to travel from the top-left corner to the bottom-right corner. SAMPLE INPUT 5 3 1 2 2 3 4 1 2 3 4 5 1 2 2 3 5 1 1 2 1 4 1 1 1 1 0 SAMPLE OUTPUT 1","solution":"def can_travel(grid, n, h): from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def bfs(height_diff): queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, n-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: if abs(grid[nx][ny] - grid[x][y]) <= height_diff: queue.append((nx, ny)) visited.add((nx, ny)) return False left, right = 0, max(max(row) for row in grid) while left < right: mid = (left + right) // 2 if bfs(mid): right = mid else: left = mid + 1 return left def find_min_height_diff(n, m, grid): return can_travel(grid, n, m)"},{"question":"You are given two integers `m` and `n`. Create an `m x n` matrix filled with integers such that each row and each column contains all distinct integers from 1 to the minimum of `m` and `n`. If there are multiple possible solutions, output any one of them. Input The only line of the input contains two integers `m` and `n` (1 ≤ m, n ≤ 50). Output Output an `m x n` matrix where each cell contains an integer and each row and each column of the matrix contains all distinct integers from 1 to the minimum of `m` and `n`. Examples Input 3 3 Output 1 2 3 2 3 1 3 1 2 Input 2 4 Output 1 2 3 4 2 3 4 1","solution":"def create_distinct_matrix(m, n): Creates an m x n matrix where each row and each column contains all distinct integers from 1 to the minimum of m and n. min_value = min(m, n) matrix = [] for i in range(m): row = [(j + i) % min_value + 1 for j in range(n)] matrix.append(row) return matrix"},{"question":"You are given a list of integers where each integer represents the number of steps you can take forward to reach the next position. Determine if you can reach the last index of the list starting from the first index. If you can reach the last index, print `\\"Possible\\"`; otherwise, print `\\"Impossible\\"`. # Input A single line with a series of non-negative integers separated by space, representing the maximum steps you can take from each index. # Output A single line reading `\\"Possible\\"` if you can reach the last index, otherwise, `\\"Impossible\\"`. # Example Input ``` 3 2 1 0 4 ``` Output ``` Impossible ``` Input ``` 2 3 1 1 4 ``` Output ``` Possible ```","solution":"def can_reach_end(steps): Determines if you can reach the last index of the list starting from the first index. max_reachable = 0 n = len(steps) for i, step in enumerate(steps): if i > max_reachable: return \\"Impossible\\" max_reachable = max(max_reachable, i + step) if max_reachable >= n - 1: return \\"Possible\\" return \\"Impossible\\" # Example usage if __name__ == \\"__main__\\": data = input().strip().split() steps = [int(x) for x in data] print(can_reach_end(steps))"},{"question":"Batch details for a project have been given where the batch has been split into multiple teams. Each team was rated based on their performance in several tasks. Each task was rated from 1 to 10 (inclusive). Consider a team exemplary if it has the highest score among all teams for a specific task. A team can be considered successful if it is exemplary in at least one task. Your task is to find the number of successful teams in the batch. Input The first input line contains two integers t and k (1 ≤ t, k ≤ 100) — the number of teams and the number of tasks, respectively. The next t lines each containing k characters describe the performance of each team. Each character in a team\'s performance is a digit from 1 to 10 representing their score in a task. Output Print the single number — the number of successful teams in the batch. SAMPLE INPUT 4 5 18365 49270 38428 19074 SAMPLE OUTPUT 3","solution":"def count_successful_teams(t, k, performances): Returns the number of successful teams in the batch. Args: t (int): number of teams. k (int): number of tasks. performances (list of str): List of string where each string indicates the performance of a team in k tasks. Returns: int: Number of successful teams. successful_teams = set() for task_index in range(k): max_score = -1 for team_index in range(t): score = int(performances[team_index][task_index]) if score > max_score: max_score = score for team_index in range(t): if int(performances[team_index][task_index]) == max_score: successful_teams.add(team_index) return len(successful_teams)"},{"question":"Develop a function that takes an integer array and returns a new array where each element at index i is the product of all the numbers in the original array except the one at i. Solve this problem without using division and in O(n) time complexity. Example input arr = [1, 2, 3, 4] output = [24, 12, 8, 6] Function Description Create a function product_except_self in the editor below. product_except_self has the following parameter: - int arr[]: an integer array. Returns - int[]: the resulting array where each element is the product of all elements of arr except itself. Input Format The first line contains an integer, n, the number of elements in arr. The second line contains n space-separated integers, each representing an element of arr. Constraints 1 ≤ n ≤ 10^5 -10^3 ≤ arr[i] ≤ 10^3 Sample Input 4 1 2 3 4 Sample Output 24 12 8 6 Explanation The array at each index i is a product of all elements in the original array except the one at i: 24 = 2 * 3 * 4 12 = 1 * 3 * 4 8 = 1 * 2 * 4 6 = 1 * 2 * 3","solution":"def product_except_self(arr): n = len(arr) # Initialize the result array with 1\'s result = [1] * n # Compute the products of elements before each index prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= arr[i] # Compute the products of elements after each index postfix_product = 1 for i in range(n-1, -1, -1): result[i] *= postfix_product postfix_product *= arr[i] return result"},{"question":"In a small town, the annual fair is about to begin, and there\'s a game that involves guessing a sequence of steps. Each step either moves upward \'+\' or downward \'-\'. The fun part is to determine the maximum altitude reached during the sequence. The altitude starts at zero initially. You are given a string representing the sequence of steps where each character in the string is either \'+\' or \'-\'. Your task is to write a function that returns the highest altitude achieved during the sequence. Example 1: Input: steps = \\"++-++-+\\" Output: 3 Explanation: Starting from 0, the sequence of altitudes is [0, 1, 2, 1, 2, 3, 2, 3]. The maximum altitude reached is 3. Example 2: Input: steps = \\"----\\" Output: 0 Explanation: Starting from 0, the sequence of altitudes is [0, -1, -2, -3, -4]. The highest altitude reached is 0 (the starting point). Your Task: You don\'t need to read input or print anything. Complete the function max_altitude() that takes a string representing the sequence of steps as an input parameter. Return the highest altitude achieved. Expected time complexity: O(N) Expected space complexity: O(1) Constraints: 1 <= len(steps) <= 1000 steps[i] is either \'+\' or \'-\'","solution":"def max_altitude(steps: str) -> int: Returns the maximum altitude achieved during the sequence of steps. current_altitude = 0 max_altitude = 0 for step in steps: if step == \'+\': current_altitude += 1 elif step == \'-\': current_altitude -= 1 max_altitude = max(max_altitude, current_altitude) return max_altitude"},{"question":"A superhero patrols a city which comprises n intersections connected by m two-way streets. The intersections are numbered from 1 to n and the streets are bidirectional. There is a notorious criminal operating in the city, and the superhero needs to optimize their patrol to minimize the total distance traveled while ensuring they visit each intersection at least once. This can be described using the concept of the Travelling Salesman Problem (TSP). Given the city layout and distances between intersections, determine the minimum distance the superhero must travel to complete their patrol. -----Input----- The first line contains two integers n and m (2 le n le 20, 1 le m le 190) representing the number of intersections and streets, respectively. Each of the next m lines contains three integers u, v, and d (1 le u, v le n, 1 le d le 100) describing a street between intersections u and v with distance d. -----Output----- Print a single integer representing the minimum distance the superhero must travel to visit every intersection at least once and return to the starting intersection. -----Examples----- Input 4 5 1 2 10 2 3 15 3 4 10 4 1 20 1 3 25 Output 65 Input 3 3 1 2 2 2 3 2 3 1 3 Output 7 -----Note----- In the first example, one of the possible patrol routes the superhero can take is 1 rightarrow 2 rightarrow 3 rightarrow 4 rightarrow 1 with distances 10 + 15 + 10 + 20 = 55 (the shortest patrol). In the second example, the superhero can patrol 1 rightarrow 2 rightarrow 3 rightarrow 1 with distances 2 + 2 + 3 = 7.","solution":"from itertools import permutations def tsp(n, m, roads): # Create adjacency matrix for the graph graph = [[float(\'inf\')] * n for _ in range(n)] for u, v, d in roads: graph[u-1][v-1] = d graph[v-1][u-1] = d # Function to calculate the path length def path_length(path): return sum(graph[path[i]-1][path[i+1]-1] for i in range(len(path)-1)) + graph[path[-1]-1][path[0]-1] intersections = list(range(1, n+1)) # Calculate the minimum path length using permutation to generate all possible paths min_path = float(\'inf\') for perm in permutations(intersections): current_path_length = path_length(perm) if current_path_length < min_path: min_path = current_path_length return min_path"},{"question":"You are given a list of words. Your task is to find the length of the longest chain of words where each word in the chain can be formed by adding exactly one letter to the previous word in such a way that the new word is also in the list. A word chain is a sequence of words [word1, word2, ..., wordk] such that for all 1 ≤ i < k, word2 is formed by adding one letter to word1, word3 is formed by adding one letter to word2, and so on. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of words. - Each of the next N lines contains a word consisting of lowercase English letters. -----Output----- For each test case, print a single line containing one integer - the length of the longest word chain. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 - 1 leq |word| leq 50 (the length of each word) -----Example Input----- 2 6 a ba bca bda bdca abcd 5 a b ba ab abc -----Example Output----- 4 3 -----Explanation----- Example case 1: One possible longest chain is [\\"a\\", \\"ba\\", \\"bda\\", \\"bdca\\"], which is of length 4. Example case 2: One possible longest chain is [\\"a\\", \\"ab\\", \\"abc\\"], which is of length 3.","solution":"def longest_chain(words): word_set = set(words) longest = 0 dp = {} for word in sorted(words, key=len): dp[word] = 1 for i in range(len(word)): predecessor = word[:i] + word[i+1:] if predecessor in word_set: dp[word] = max(dp[word], dp[predecessor] + 1) longest = max(longest, dp[word]) return longest def longest_word_chain(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] words = test_cases[i][1] results.append(longest_chain(words)) return results"},{"question":"A prominent software company is organizing a coding competition where participants are required to solve a series of challenge problems. One of the problems involves sorting and rearranging arrays. The task requires the following steps: 1. You are given an array of integers `A` of length `N`. The initial array is strictly increasing, meaning each element is greater than its previous element. 2. You need to make an increasing array `B` from the given array `A`, but you are allowed to remove elements from `A` to create `B`. The goal is to find the minimum number of elements to remove from `A` to create an array `B` such that `B` is sorted in strictly increasing order without any duplicates. Report the removed elements as well. ----Input----- The first line contains an integer `N` (1 <= N <= 200,000) - the number of elements in the array `A`. The second line contains `N` integers `A1, A2, ..., AN` (1 <= Ai <= 2 * 10^9) - the elements of the initial array `A`. ----Output----- The output consists of two lines: - The first line contains a single integer `M` - the minimum number of elements that need to be removed. - The second line contains `M` integers - the elements that need to be removed from the array `A`. If there are multiple valid outputs, any of them will be considered correct. ----Examples---- Sample Input 1: 5 1 2 3 4 5 Sample Output 1: 0 Sample Input 2: 7 2 2 4 5 6 6 7 Sample Output 2: 2 2 6 Sample Input 3: 3 1 3 1 Sample Output 3: 1 1","solution":"def min_removals_to_increasing_array(A): Returns the minimum number of elements to remove from A to make it strictly increasing and the list of elements to remove. removals = [] last_seen = set() for num in A: if num in last_seen: removals.append(num) else: last_seen.add(num) return len(removals), removals"},{"question":"Given the head of a singly linked list, write a function reverseKGroup() that reverses the nodes of the list k at a time and returns the modified list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is. The function reverseKGroup() takes the head of a linked list and an integer k as arguments. The function should also return the head of the modified list. Example: ``` Input: head = [1, 2, 3, 4, 5], k = 2 Output: [2, 1, 4, 3, 5] Input: head = [1, 2, 3, 4, 5], k = 3 Output: [3, 2, 1, 4, 5] ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): def reverseLinkedList(head, k): new_head, ptr = None, head while k: next_node = ptr.next ptr.next = new_head new_head = ptr ptr = next_node k -= 1 return new_head count = 0 ptr = head while count < k and ptr: ptr = ptr.next count += 1 if count == k: reversed_head = reverseLinkedList(head, k) head.next = reverseKGroup(ptr, k) return reversed_head else: return head"},{"question":"In the land of Pylogia, there\'s a network of cities connected by a complex system of roads. Each road in Pylogia has a capacity limit on the number of vehicles that can traverse it simultaneously. During peak hours, people often face delays due to traffic congestion. The king of Pylogia wants to alleviate this problem by enforcing a new traffic control system. As a part of this system, you have to calculate the maximum flow of vehicles that can travel from the capital city, city 1, to all other cities combined, given the constraints of the road capacities. There are n cities in Pylogia, numbered from 1 to n and m bidirectional roads. Each road connects two cities u and v with a traffic capacity limit c. Your task is to find the maximum number of vehicles that can travel from the capital city (city 1) to all the other cities combined without exceeding the capacities of any of the roads. -----Input----- The first line contains two integers n and m (2 le n le 500, 1 le m le 5000), representing the number of cities and the number of roads respectively. The following m lines each contain three integers u, v, and c (1 le u, v le n, 1 le c le 1000), indicating a bidirectional road between city u and city v with a capacity limit c vehicles. -----Output----- Output a single integer: the maximum number of vehicles that can travel from the capital city (city 1) to all other cities combined given the capacity constraints. -----Examples----- Sample Input: 4 5 1 2 100 2 3 50 1 3 100 3 4 100 2 4 50 Sample Output: 150 Sample Input: 3 3 1 2 10 1 3 15 2 3 20 Sample Output: 25 Explanation: In the first sample, the maximum flow from city 1 to the other cities combines all possible paths: - From city 1 to city 2 and then to city 3, which can carry up to 50 vehicles (capacity of the road from city 2 to city 3). - Directly from city 1 to city 3, which can carry 100 vehicles. - From city 1 to city 2 and then to city 4, carrying up to 50 vehicles. - Directly from city 1 to city 3 again considering the road to city 4, contributing an additional flow. In the second sample, we can use the direct routes between city 1 to city 2 and city 1 to city 3, summing up to a total of 25.","solution":"from collections import deque def bfs_capacity(graph, source, sink, parent): visited = [False] * (len(graph)) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for ind, val in enumerate(graph[u]): if visited[ind] == False and val > 0: queue.append(ind) visited[ind] = True parent[ind] = u if ind == sink: return True return False def edmonds_karp(graph, source, sink): parent = [-1] * len(graph) max_flow = 0 while bfs_capacity(graph, source, sink, parent): path_flow = float(\\"Inf\\") s = sink while s != source: path_flow = min(path_flow, graph[parent[s]][s]) s = parent[s] max_flow += path_flow v = sink while v != source: u = parent[v] graph[u][v] -= path_flow graph[v][u] += path_flow v = parent[v] return max_flow def max_flow(n, m, roads): graph = [[0] * n for _ in range(n)] for u, v, c in roads: graph[u-1][v-1] += c graph[v-1][u-1] += c return edmonds_karp(graph, 0, n-1)"},{"question":"Ari is a novice coder, and he\'s practicing his sorting algorithms. Instead of sorting the whole array, he decides to sort a specific sub-array from the i-th index to the j-th index. Your task is to help Ari achieve this. Given an array of integers and two indices, i and j, sort the array only between indices i and j (inclusive) and return the modified array. Note that the indices are 0-based. Input: The first line of input contains T, the number of test cases. For each test case: - The first line contains two space-separated integers N and Q. N is the size of the array, and Q is the number of queries. - The second line contains N space-separated integers, representing the array. - The next Q lines each contain two space-separated integers i and j, representing the range to be sorted. Output: For each test case, print the modified array after performing all the queries. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Q ≤ 100 0 ≤ i ≤ j < N -10^4 ≤ Array Elements ≤ 10^4 SAMPLE INPUT 1 5 2 1 5 3 2 4 1 3 0 2 SAMPLE OUTPUT 1 2 3 5 4 Explanation: For the first query, sorting the sub-array from index 1 to 3 results in [1, 2, 3, 5, 4]. For the second query, sorting the sub-array from index 0 to 2 results in [1, 2, 3, 5, 4]. Thus the final array is [1, 2, 3, 5, 4].","solution":"def sort_subarray(array, i, j): Sorts the subarray of \'array\' from index \'i\' to \'j\' (inclusive). array[i:j+1] = sorted(array[i:j+1]) return array def process_queries(T, test_cases): Processes the test cases and queries, returning the final arrays after all sorts. results = [] for case in test_cases: N, Q = case[\'N\'], case[\'Q\'] array = case[\'array\'] queries = case[\'queries\'] for query in queries: i, j = query array = sort_subarray(array, i, j) results.append(array) return results"},{"question":"You are given an array of integers, and your task is to answer several queries about the sums of elements over specific subarrays. Each query will specify a range, and you must compute the sum of the elements within that range. Input: The first line contains two integers N and Q, where N is the number of elements in the array, and Q is the number of queries. The second line contains N integers, representing the elements of the array. The next Q lines each contain two integers L and R, representing a query that asks for the sum of elements from index L to index R (inclusive). Output: For each query, print the sum of the elements in the specified range. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 -10^4 ≤ Array Element ≤ 10^4 0 ≤ L ≤ R < N Note: To handle large inputs efficiently, consider implementing a prefix sum array. Example: Input: 5 3 1 2 3 4 5 0 2 1 3 0 4 Output: 6 9 15 Explanation: For the first query (0 to 2), the sum is 1+2+3 = 6. For the second query (1 to 3), the sum is 2+3+4 = 9. For the third query (0 to 4), the sum is 1+2+3+4+5 = 15.","solution":"def range_sum_queries(N, Q, array, queries): Returns the sum of elements for each query from a given array. Parameters: N (int): Number of elements in the array. Q (int): Number of queries. array (List[int]): List of N integers representing the array. queries (List[Tuple[int, int]]): List of Q tuples, each containing two integers L and R. Returns: List[int]: List of Q integers representing the results of the queries. # compute prefix sums prefix_sums = [0] * (N + 1) for i in range(N): prefix_sums[i + 1] = prefix_sums[i] + array[i] # answer each query results = [] for L, R in queries: results.append(prefix_sums[R + 1] - prefix_sums[L]) return results"},{"question":"# Background In a mysterious kingdom, there is a magic square grid where certain cells contain gold coins. The grid is represented as a 2D list of integers, where each integer represents the number of gold coins in that cell. A wizard can only collect gold coins from the cells in the following possible moves: - Move one step to the right. - Move one step down. - Move one step diagonally to the bottom-right. The wizard wants to collect the maximum number of gold coins starting from the top-left corner of the grid (0, 0) and moving to the bottom-right corner (n-1, m-1). # Task: Given the 2D list of integers, determine the maximum number of gold coins the wizard can collect, following the possible moves described above. # Assumptions: - The grid will have at least one cell. - The grid dimensions will be (n times m), where (1 leq n, m leq 50). # Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] # Output: 12 # Explanation: The wizard follows the path 1 -> 3 -> 5 -> 2 -> 1. ``` # Function Signature: ```python def max_gold_coins(grid: List[List[int]]) -> int: pass ```","solution":"from typing import List def max_gold_coins(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) # Create a dp table with the same dimension as the grid dp = [[0] * m for _ in range(n)] # Initialize the dp table with the values of the grid dp[0][0] = grid[0][0] # Fill the dp table for i in range(n): for j in range(m): if i == 0 and j == 0: continue max_coins = 0 if i > 0: max_coins = max(max_coins, dp[i-1][j]) if j > 0: max_coins = max(max_coins, dp[i][j-1]) if i > 0 and j > 0: max_coins = max(max_coins, dp[i-1][j-1]) dp[i][j] = grid[i][j] + max_coins return dp[n-1][m-1]"},{"question":"Task **_Given_** a **_list of positive integers_**, *return the **_subarray_** that has the maximum sum.* If there are multiple subarrays with the same maximum sum, return the one with the smallest length. If there is still a tie, return the leftmost one. ___ # Notes: * The subarray must consist of contiguous elements. * The input list will have at least one positive integer. ___ # Input >> Output Examples ``` maxSubarray ({1, -2, 3, 4, -5, 6}) ==> return ([3, 4, -5, 6]) ``` Explanation: The contiguous subarray **_[3, 4, -5, 6]_** has the maximum sum of 8. ___ ``` maxSubarray({1, 2, 3, -2, 5}) ==> return ([1, 2, 3, -2, 5]) ``` Explanation: The contiguous subarray **_[1, 2, 3, -2, 5]_** has the maximum sum of 9. ___ ``` maxSubarray({4, -1, 2, 1, -5, 4}) ==> return ([4, -1, 2, 1]) ``` Explanation: The contiguous subarray **_[4, -1, 2, 1]_** has the maximum sum of 6. ___","solution":"def maxSubarray(arr): n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(n): if current_sum == 0: temp_start = i current_sum += arr[i] if (current_sum > max_sum) or (current_sum == max_sum and (i - temp_start < end - start)): max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 return arr[start:end + 1]"},{"question":"You are given an array of integers. In one operation, you can increment any element of the array by 1. Your task is to make all the elements of the array equal to the maximum element initially present in the array using the minimum number of operations. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the size of the array. - The second line contains N space-separated integers — the elements of the array. ------ Output Format ------ For each test case, output the minimum number of operations needed to make all the elements of the array equal to the maximum element initially present in the array. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ A_i ≤ 10^4 for each valid i ----- Sample Input 1 ------ 3 5 1 2 3 4 5 4 5 5 5 5 6 2 3 4 5 6 7 ----- Sample Output 1 ------ 10 0 15 ----- explanation 1 ------ Test Case 1: The maximum element in the array is 5. We need to increment each of the other elements to reach 5. - Increment 1 to 5 using 4 operations - Increment 2 to 5 using 3 operations - Increment 3 to 5 using 2 operations - Increment 4 to 5 using 1 operation Total operations = 4 + 3 + 2 + 1 = 10 Test Case 2: All the elements are already equal. Therefore, no operations are needed. Test Case 3: The maximum element in the array is 7. - Increment 2 to 7 using 5 operations - Increment 3 to 7 using 4 operations - Increment 4 to 7 using 3 operations - Increment 5 to 7 using 2 operations - Increment 6 to 7 using 1 operation Total operations = 5 + 4 + 3 + 2 + 1 = 15","solution":"def min_operations_to_max(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] max_element = max(arr) operations = sum(max_element - x for x in arr) results.append(operations) return results # Parsing input def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return T, test_cases"},{"question":"Sana is given a string S consisting of lowercase English letters. She can perform the following operation any number of times: choose any character from S and move it to either the beginning or the end of the string. Sana wants to rearrange the characters of the string such that she obtains the lexicographically smallest possible string. A string A is lexicographically smaller than a string B if and only if at the first position where A and B differ, the string A has a letter that appears earlier in the alphabet than the corresponding letter in B. Determine the lexicographically smallest string Sana can obtain by performing the given operation any number of times. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output the lexicographically smallest string that can be obtained. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 1000 - The string S consists of lowercase English letters only. ------ Sample Input 1 ------ 3 abc cba bac ------ Sample Output 1 ------ abc abc abc ------ Explanation 1 ------ - Test Case 1: The string is already the lexicographically smallest string possible. - Test Case 2: By moving \'a\' to the front, we can make the string \\"abc\\". - Test Case 3: By moving \'a\' to the front and then \'b\' to the front, we can make the string \\"abc\\". ------ Sample Input 2 ------ 2 asdfghjkl zxcvbnm ------ Sample Output 2 ------ adfghjkl cxvbnmz ------ Explanation 2 ------ - Test Case 1: By repeatedly moving \'a\' to the front, you get the string \\"adfghjkl\\". - Test Case 2: By moving \'c\' to the beginning and \'z\' to the end, you obtain \\"cxvbnmz\\".","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string that can be obtained by rearranging the characters of the string S. return \'\'.join(sorted(S)) def process_test_cases(T, test_cases): Processes T test cases and returns a list of results for each test case. results = [] for i in range(T): results.append(lexicographically_smallest_string(test_cases[i])) return results"},{"question":"A transportation company wants to optimize the delivery route of its autonomous truck working in a city. The city can be represented as an `n x n` grid whereby each cell either contains a building or is an open road. The truck can only move north, south, east or west to adjacent cells that are open roads but not diagonally. Given the starting position of the truck at cell `(sx, sy)` and its destination at cell `(dx, dy)`, calculate the minimum number of moves required for the truck to reach the destination. If it is not possible for the truck to reach the destination, return `-1`. -----Input----- The first line contains an integer n (1 le n le 10^3) — the size of the city grid. The next `n` lines each contain n characters, each being either `\'.\'` (an open road) or `\'#\'` (a building). The last line contains four integers sx, sy, dx, dy (1 ≤ sx, sy, dx, dy ≤ n) — the starting and destination coordinates respectively. The coordinates are 1-based. -----Output----- Print a single integer representing the minimum number of moves required for the truck to reach its destination. If it is not possible, print `-1`. -----Examples----- Input 5 .#... .#... ....# .#. ..... 1 1 5 5 Output 8 Input 3 .#. .#. .#. 1 1 3 3 Output -1 -----Note----- In the first example, a possible path the truck can take to reach the destination is: - (1,1) -> (1,2) -> (2,2) -> (2,3) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5), a total of 8 moves. In the second example, the truck cannot reach the destination as it is blocked by buildings on every possible path. Thus, the output is `-1`.","solution":"from collections import deque def min_moves_to_destination(n, city_grid, sx, sy, dx, dy): Returns the minimum number of moves required for the truck to reach its destination, or -1 if not possible. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] sx -= 1 sy -= 1 dx -= 1 dy -= 1 if city_grid[sx][sy] == \'#\' or city_grid[dx][dy] == \'#\': return -1 queue = deque([(sx, sy, 0)]) visited = [[False]*n for _ in range(n)] visited[sx][sy] = True while queue: x, y, dist = queue.popleft() if (x, y) == (dx, dy): return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and city_grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist+1)) return -1"},{"question":"A company wishes to minimize the latency of their servers by scheduling maintenance periods in such a way as to minimize the maximum load over time. Each server has a list of time slots during which maintenance can be performed, and each time slot has a load associated with it that indicates the impact of performing maintenance during that slot. The goal is to schedule maintenance for each server such that no two servers are maintained at the same time and the maximum load at any given time is minimized. You are given n servers, each with a list of m maintenance slots. Each slot has a start time, end time, and a load. Write a function that schedules the maintenance for each server minimizing the maximum load over time. # Function Signature: ```python def schedule_maintenance(n: int, maintenance_windows: List[List[Tuple[int, int, int]]]) -> List[int]: pass ``` # Input: - `n`: An integer, the number of servers (1 ≤ n ≤ 1000). - `maintenance_windows`: A list of length n, where each element is a list of tuples representing the maintenance slots for that server. Each tuple contains three integers `(start, end, load)` where: - `start` is the start time of the slot (0 ≤ start < end ≤ 10^6) - `end` is the end time of the slot (0 < end ≤ 10^6) - `load` is the load associated with the maintenance slot (1 ≤ load ≤ 10^6). # Output: - The function should return a list of length n, where each element is an integer representing the index of the chosen maintenance slot (0-based index) for each server that results in minimizing the maximum load over time. # Example: ```python n = 2 maintenance_windows = [ [(1, 4, 3), (5, 6, 1)], # Server 1 maintenance slots [(1, 2, 2), (2, 4, 4)] # Server 2 maintenance slots ] print(schedule_maintenance(n, maintenance_windows)) ``` Output: ```python [1, 0] ``` Explanation: - Choosing the second maintenance slot for the first server and the first maintenance slot for the second server results in the following schedule: - Server 1: (5, 6, load 1) - Server 2: (1, 2, load 2) - The maximum load at any time is 2, which is minimized. # Notes: - If there are multiple valid schedules that result in the same minimized maximum load, return the lexicographically smallest schedule. - It is guaranteed that there will be at least one valid schedule.","solution":"from typing import List, Tuple import heapq def schedule_maintenance(n: int, maintenance_windows: List[List[Tuple[int, int, int]]]) -> List[int]: def calculate_max_load(start_end_loads, indices): timeline = [] for idx, slot in enumerate(indices): window = start_end_loads[idx][slot] timeline.append((window[0], window[2])) # start time and load timeline.append((window[1], -window[2])) # end time and negative load to signify end timeline.sort() current_load = 0 max_load = 0 for time, load_change in timeline: current_load += load_change max_load = max(max_load, current_load) return max_load best_indices = None best_max_load = float(\'inf\') # Brute force way to try all possible combinations stack = [(0, [])] while stack: idx, indices = stack.pop() if idx == n: current_max_load = calculate_max_load(maintenance_windows, indices) if current_max_load < best_max_load: best_max_load = current_max_load best_indices = indices else: for i in range(len(maintenance_windows[idx])): stack.append((idx + 1, indices + [i])) return best_indices"},{"question":"Write a function to check if a given string is a valid palindrome with a twist: the validation should ignore cases and any non-alphanumeric characters (e.g., whitespaces, punctuation, etc.). For instance, the string `\\"A man, a plan, a canal: Panama\\"` should be considered a palindrome. Note that an empty string is a valid palindrome. Your task is to implement this functionality and test it with various input strings.","solution":"def is_valid_palindrome(s): Checks if a given string is a valid palindrome, ignoring case and non-alphanumeric characters. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"A company\'s logistics team is responsible for delivering packages to different cities. The team wants to optimize the delivery routes to minimize the cost. Each city is connected by one-way roads, and each road has a specific cost associated with traveling on it. The goal is to find the minimum cost to deliver a package from a starting city to a destination city. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three integers N, M, and Q denoting the number of cities, number of one-way roads, and number of queries respectively. - The next M lines of each test case contain three integers u, v, and w denoting a one-way road from city u to city v with a cost w. - The next Q lines of each test case contains two integers s and d, representing a query to find the minimum cost to deliver a package from city s to city d. -----Output:----- - For each query of each test case, print a single line containing one integer ― minimum cost to deliver the package. If there is no way to reach the destination city, print -1. -----Constraints----- - 1 leq T leq 10 - 2 leq N leq 500 - 1 leq M leq 10^4 - 1 leq Q leq 100 - 1 leq u, v, s, d leq N - 1 leq w leq 10^9 - There may be multiple roads between the same pair of cities. -----Sample Input----- 2 4 5 2 1 2 10 2 3 20 3 4 30 4 2 15 2 4 25 1 3 2 4 3 3 1 1 2 5 2 3 10 1 3 2 1 3 -----Sample Output----- 30 25 7","solution":"import heapq import sys def dijkstra(graph, start, n): Implements Dijkstra\'s algorithm to find the shortest paths from start to all other nodes. distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_min_costs(T, test_cases): results = [] for test_case in test_cases: N, M, Q, roads, queries = test_case graph = [[] for _ in range(N + 1)] for u, v, w in roads: graph[u].append((v, w)) for s, d in queries: distances = dijkstra(graph, s, N) result = distances[d] if distances[d] != float(\'inf\') else -1 results.append(result) return results"},{"question":"Given a binary tree, your task is to write a function `findTarget()` that determines if there exist two elements in the BST such that their sum is equal to a given target value. The function should return `True` if such a pair is found, otherwise return `False`. Constraints: 1 <= T <= 100 1 <= Number of nodes in BST <= 10^4 -10^4 <= Node value <= 10^4 Example: ``` Input: 2 6 5 3 8 2 4 7 9 5 1 2 3 4 5 10 Output: True False ``` Explanation: Testcase 1: The BST is: 5 / 3 8 / / 2 4 7 There exist two nodes (1, 8) whose sum equals the target value 9. Testcase 2: The BST is: 1 2 3 4 5 There is no pair of nodes whose sum equals the target value 10. User Task: The task is to complete the function `findTarget()` which should return a boolean indicating if there exist two elements in the BST such that their sum is equal to the given target value. The input to the function is the root node of the BST and the target value.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findTarget(root, k): Determines if there exist two elements in the BST such that their sum is equal to k. def inorder(node, elems): if node: inorder(node.left, elems) elems.append(node.val) inorder(node.right, elems) elems = [] inorder(root, elems) l, r = 0, len(elems) - 1 while l < r: s = elems[l] + elems[r] if s == k: return True elif s < k: l += 1 else: r -= 1 return False"},{"question":"In a faraway land, there are x number of castles and y roads connecting them. Each road has a toll tax associated with it. A toll tax is required to use certain roads that exist between these castles. The King has just passed a new decree which states that the maximum amount of toll that can be collected for a single travel route between any two castles should not exceed a certain limit L. Given the number of castles, roads, the specific toll tax of each road, and the maximum limit L, your task is to determine if it is possible to travel between any two castles without violating the King\'s decree. If it is possible, you must also provide the minimum toll tax for such a route. Input The input consists of multiple test cases. Each test case begins with two integers: x (2 ≤ x ≤ 1000) and y (1 ≤ y ≤ 5000). The next y lines each contain three integers u, v (1 ≤ u, v ≤ x) and t (1 ≤ t ≤ 10000), representing a road between castles u and v with a toll tax t. The last line of each test case contains the integer L (1 ≤ L ≤ 100000). The input ends with a line containing two zeroes, which should not be processed. Output For each test case, output \\"Possible\\" followed by the minimum toll tax if it is possible to travel between any two castles without exceeding the limit L. If it is not possible, output \\"Impossible\\". Example Input 3 3 1 2 4 2 3 6 1 3 8 10 4 4 1 2 5 2 3 7 3 4 3 4 1 6 12 0 0 Output Possible 4 Possible 3","solution":"import heapq def find_min_toll(x, y, roads, L): graph = {i: [] for i in range(1, x+1)} for u, v, t in roads: graph[u].append((t, v)) graph[v].append((t, u)) def dijkstra(source): pq = [(0, source)] min_cost = {i: float(\'inf\') for i in range(1, x+1)} min_cost[source] = 0 while pq: cost, node = heapq.heappop(pq) if cost > L: continue for toll, neighbor in graph[node]: next_cost = max(cost, toll) if next_cost < min_cost[neighbor]: min_cost[neighbor] = next_cost heapq.heappush(pq, (next_cost, neighbor)) return min_cost for castle in range(1, x+1): min_tolls = dijkstra(castle) for min_toll in min_tolls.values(): if min_toll > L: return \\"Impossible\\" min_toll_value = float(\'inf\') for u, v, t in roads: if t <= L: min_toll_value = min(min_toll_value, t) return f\\"Possible {min_toll_value}\\" def process_input(data:str): inputs = data.strip().split(\\"n\\") index = 0 results = [] while index < len(inputs): x, y = map(int, inputs[index].split()) if x == 0 and y == 0: break index += 1 roads = [] for _ in range(y): u, v, t = map(int, inputs[index].split()) roads.append((u, v, t)) index += 1 L = int(inputs[index]) index += 1 result = find_min_toll(x, y, roads, L) results.append(result) return results # Test function def solution(data): results = process_input(data) return \\"n\\".join(results)"},{"question":"You are given a network of computers where some pairs of computers are directly connected by wires. Each computer is represented by an integer from 0 to n-1 (where n is the number of computers). A malfunction spreads from one computer to all computers directly connected to it, and continues to spread from those computers to all connected computers, and so on, until it can no longer spread. Your task is to determine the number of isolated groups of computers, where a group is considered isolated if there are no wires connecting it to another group. A single computer without any connections can also be considered an isolated group. Write a function to count the number of isolated groups. ------ Input ------ The input consists of multiple test cases. The first line contains an integer t, the number of test cases. Each test case starts with an integer n (1 <= n <= 1000) and an integer m (0 <= m <= 10000), where n is the number of computers and m is the number of direct connections. The next m lines each contain two integers u and v (0 <= u, v < n), representing a direct connection between computer u and computer v. ------ Output ------ For each test case, output a single integer: the number of isolated groups of computers. ----- Sample Input 1 ------ 2 4 2 0 1 2 3 5 3 0 1 1 2 3 4 ----- Sample Output 1 ------ 2 2 Explanation: In the first test case, there are 4 computers but only two connections (0-1 and 2-3), forming two isolated groups: {0, 1} and {2, 3}. In the second test case, there are 5 computers and three connections (0-1, 1-2, and 3-4), forming two isolated groups: {0, 1, 2} and {3, 4}.","solution":"def count_isolated_groups(t, cases): Return the number of isolated groups of computers for each test case def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) results = [] for case in cases: n, m, edges = case graph = {i: [] for i in range(n)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * n count = 0 for i in range(n): if not visited[i]: dfs(i, visited, graph) count += 1 results.append(count) return results"},{"question":"# Intro to Mathematical Sequences # Task **_Given_** an **_integer_** `n`, **_generate the first n terms_** of the **_Fibonacci sequence_**. ___ # Notes * The **_Fibonacci sequence_** is a series of numbers where the next term is found by adding up the two numbers before it. * The sequence starts with `0, 1`. * **_Example:_** for `n = 6`, the sequence would be `0, 1, 1, 2, 3, 5`. ___ # Input >> Output Examples ``` generate_fibonacci(5) ==> return [0, 1, 1, 2, 3] ``` **_Explanation:_** * **_The first 5 terms_** of the Fibonacci sequence are `0, 1, 1, 2, 3`. ___ ``` generate_fibonacci(1) ==> return [0] ``` **_Explanation:_** * With `n = 1`, **_only the first term_** `0` is taken. ___ ``` generate_fibonacci(8) ==> return [0, 1, 1, 2, 3, 5, 8, 13] ``` **_Explanation:_** * The **_first 8 terms_** are `0, 1, 1, 2, 3, 5, 8, 13`. ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [For More Enjoyable Coding Challenges](http://www.codewars.com/users/CodeHunters/authored) ___ ALL translations are welcomed Enjoy Learning and Coding !! # CodeHunter","solution":"def generate_fibonacci(n): Generate the first n terms of the Fibonacci sequence. Parameters: n (int): The number of terms to generate. Returns: list: The first n terms of the Fibonacci sequence. if n <= 0: return [] sequence = [0] if n == 1: return sequence sequence.append(1) for i in range(2, n): next_term = sequence[i-1] + sequence[i-2] sequence.append(next_term) return sequence"},{"question":"You are given a set of books that need to be arranged on a shelf. Each book has a specific width and a specific height. The shelf has a maximum width limit, and you want to place as many books as possible on the shelf without exceeding this limit. Books can be placed on top of each other if their widths are the same and the total height of the stack does not exceed the shelf height limit. Your task is to determine the maximum number of books that can fit on the shelf. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of books. - The next `n` lines each contain two space-separated integers: `wi` and `hi` (1 ≤ wi, hi ≤ 10^9), the width and height of the i-th book. - The next line contains a single integer `W` (1 ≤ W ≤ 10^9), the maximum width of the shelf. - The next line contains a single integer `H` (1 ≤ H ≤ 10^9), the maximum height that a stack of books can reach. Output Print a single integer representing the maximum number of books that can be placed on the shelf under the given conditions. Example Input 5 2 3 3 4 2 2 1 1 2 1 6 5 Output 3 Explanation One possible arrangement is to place the books with widths 2, 2, and 1 on the shelf. Their total width is 2 + 2 + 1 = 5 ≤ 6. The total height is max(3, 2, 1) ≤ 5. Therefore, you can fit 3 books on the shelf. Another possible arrangement is to place books with widths 3, 2, and 1. Their total width is 3 + 2 + 1 = 6 ≤ 6. The total height is max(4, 2, 1) = 4 ≤ 5. Therefore, you can fit 3 books on the shelf.","solution":"from itertools import combinations def max_books_on_shelf(n, books, W, H): max_books = 0 # Iterate over all possible combinations of books for r in range(1, n + 1): for comb in combinations(books, r): total_width = sum([book[0] for book in comb]) max_height = max([book[1] for book in comb]) if total_width <= W and max_height <= H: max_books = max(max_books, r) return max_books"},{"question":"You are given a list of integers mbox{L}. Your task is to partition the list into three parts and sort them separately according to the following rules: 1. The first part should contain all negative numbers sorted in descending order. 2. The second part should contain all zeroes. 3. The third part should contain all positive numbers sorted in ascending order. Return the resulting list after partitioning and sorting as described. Input Format A single line of input contains the list mbox{L}, where mbox{L} is a list of integers separated by spaces. Constraints 0 leq len(L) leq 1000 Output Format Output the partitioned and sorted list mbox{L}. Sample Input 3 -1 0 -2 5 0 2 -3 Sample Output -1 -2 -3 0 0 2 3 5","solution":"def partition_and_sort(lst): Partitions a list into three parts: 1. All negative numbers sorted in descending order. 2. All zeroes. 3. All positive numbers sorted in ascending order. Returns the resulting list after partitioning and sorting. negatives = sorted([x for x in lst if x < 0], reverse=True) zeroes = [x for x in lst if x == 0] positives = sorted([x for x in lst if x > 0]) return negatives + zeroes + positives # Example usage: # input_list = [3, -1, 0, -2, 5, 0, 2, -3] # print(partition_and_sort(input_list)) # Output: [-1, -2, -3, 0, 0, 2, 3, 5]"},{"question":"Leena works for a software company and is tasked with compressing data before storing it. She decides to use a custom run-length encoding scheme. In this scheme, a sequence of k identical characters is replaced by the character followed by the number k. The sequence can include alphabetic characters in both uppercase and lowercase. However, if a character appears only once, it should not be followed by its count. If a character appears more than nine times consecutively, it will be broken down into chunks of length at most nine. For example, \'AAAAAAAAAAA\' would be compressed to \'A9A2\'. You are given a string s that contains alphabetic characters. Implement a function to compress the string according to the rules mentioned above. -----Input----- The input consists of a single line containing the string s (1 leq |s| leq 10^5). The string s consists only of alphabetic characters (\'a\'-\'z\', \'A\'-\'Z\'). -----Output----- Print the compressed version of the string s. -----Example----- Input: aaabcccaaa Output: a3bc3a3 Input: AAAAABBBBCCCCDD Output: A5B4C4D2 -----Note----- In the first example, the string \\"aaabcccaaa\\" is compressed to \\"a3bc3a3\\". Here, \'a\' appears three times, \'b\' appears once, \'c\' appears three times, and \'a\' appears three times again. In the second example, the string \\"AAAAABBBBCCCCDD\\" is compressed to \\"A5B4C4D2\\". Here, \'A\' appears five times, \'B\' appears four times, \'C\' appears four times, and \'D\' appears two times.","solution":"def compress_string(s): Compresses the input string using the custom run-length encoding scheme. if not s: return \\"\\" compressed = [] n = len(s) count = 1 for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: if count == 1: compressed.append(s[i - 1]) else: while count > 9: compressed.append(s[i - 1] + \'9\') count -= 9 compressed.append(s[i - 1] + str(count)) count = 1 # Handling the last sequence if count == 1: compressed.append(s[-1]) else: while count > 9: compressed.append(s[-1] + \'9\') count -= 9 compressed.append(s[-1] + str(count)) return \'\'.join(compressed)"},{"question":"Given two integers `X` and `K`, write a function to calculate the K-th smallest factor of X. If there are fewer than K factors, return -1. Example 1: Input: X = 12, K = 3 Output: 4 Explanation: Factors of 12 are 1, 2, 3, 4, 6, 12. The third smallest factor is 4. Example 2: Input: X = 7, K = 2 Output: 7 Explanation: Factors of 7 are 1 and 7. The second smallest factor is 7. Example 3: Input: X = 15, K = 5 Output: -1 Explanation: Factors of 15 are 1, 3, 5, 15. There are fewer than 5 factors. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `kthSmallestFactor()` which takes integers `X` and `K` as input and returns the K-th smallest factor of X, or -1 if K is larger than the number of factors. Expected Time Complexity: O(sqrt(X)) Expected Auxiliary Space: O(1) Constraints: 1 <= X <= 10^5 1 <= K <= 100","solution":"def kthSmallestFactor(X, K): Return the K-th smallest factor of X. If there are fewer than K factors, return -1. factors = [] # Iterate through possible factors up to sqrt(X) for i in range(1, int(X ** 0.5) + 1): if X % i == 0: # i is a factor factors.append(i) if i != X // i: # Avoid including the square root twice factors.append(X // i) # Sort the factors to determine the k-th smallest factors.sort() # Return the K-th smallest factor, or -1 if K is larger than the number of factors return factors[K-1] if K <= len(factors) else -1"},{"question":"Given a string containing uppercase and lowercase letters, determine the length of the longest substring that contains only vowels. Vowel characters are defined as \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase). Example string = \\"ABcaaoiIOUbcxyz\\" The longest substring that contains only vowels is \\"aaoiIOU\\". The length of this substring is 7. Function Description Complete the `longestVowelSubstring` function in the editor below. `longestVowelSubstring` has the following parameter(s): - string s: input string Returns - int: the length of the longest substring containing only vowels. Input Format A single string, s. Constraints 1 leq s.length leq 1000 Sample Input STDIN Function ----- -------- beautiful s = \\"beautiful\\" Sample Output 3 Explanation The longest substring containing only vowels is \\"eau\\", which has a length of 3.","solution":"def longestVowelSubstring(s): Returns the length of the longest substring that contains only vowels. vowels = set(\\"aeiouAEIOU\\") max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Given a positive integer N, your task is to determine whether it can be expressed as the sum of two or more consecutive positive integers. Example 1: Input: N = 9 Output: 1 Explanation: 9 can be written as 4 + 5 or 2 + 3 + 4 (two sets of consecutive integers sum up to 9). Example 2: Input: N = 8 Output: 0 Explanation: 8 cannot be expressed as the sum of two or more consecutive positive integers. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canBeSumOfConsecutiveIntegers() which takes an integer N as input and returns 1 if N can be expressed as the sum of two or more consecutive positive integers, else return 0. Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^9","solution":"def canBeSumOfConsecutiveIntegers(N): Determines if the number N can be expressed as the sum of two or more consecutive positive integers. :param N: int :return: int (1 if it can be expressed as the sum, otherwise 0) # Start with k = 2 and increase k until k*(k+1)/2 <= N k = 2 while k * (k + 1) // 2 <= N: # Calculate the numerator of the target equation: N - k*(k-1)/2 numerator = N - k * (k - 1) // 2 # If numerator is perfectly divisible by k, return 1 if numerator % k == 0: return 1 k += 1 # If no such k found, return 0 return 0"},{"question":"You are given a string, textbf{str}, consisting of lowercase letters. You need to determine the length of the longest substring of textbf{str} that contains at most two distinct characters. A substring is defined as a contiguous sequence of characters within a string. For example, in the string \\"abcde\\", the substrings \\"a\\", \\"b\\", \\"cde\\", and \\"abc\\" are substrings, but \\"ace\\" is not. Function Description Complete the longestSubstringTwoDistinct function in the editor below. longestSubstringTwoDistinct has the following parameter(s): - str: a single string of lowercase letters. Returns: - int: the length of the longest substring that contains at most two distinct characters. Input Format A single string, textbf{str}, where 1 leq |textbf{str}| leq 10^5. Constraints The string only contains lowercase English letters. Example Input \'abaccc\' Example Output 4 Explanation In the string \\"abaccc\\", the longest substring that contains at most two distinct characters is \\"abac\\" or \\"accc\\", both of which have a length of 4. Another Example Input \'abcbbbbcccbdddadacb\' Output 10 Explanation In the string \\"abcbbbbcccbdddadacb\\", the longest substring with at most two distinct characters is \\"bcbbbbcccb\\", which has a length of 10.","solution":"def longestSubstringTwoDistinct(s): Find the length of the longest substring with at most two distinct characters. :param s: String consisting of lowercase English letters. :return: Length of the longest substring with at most two distinct characters. if not s: return 0 max_len = 0 start = 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"In a town called Primeville, the residents celebrate an annual festival with grand parades over several days. The parade consists of a sequence of floats, each float represented by a number. A float is said to be \'lucky\' if its number is a prime number. Given the list of floats for each day of the festival, determine the count of lucky floats for each day. Input Format The first line consists of an integer, D, the number of days the festival lasts. Each of the next D lines contains the sequence of floats for that day, separated by spaces. Constraints 1 ≤ D ≤ 10 1 ≤ Number of floats per day ≤ 100 1 ≤ Float number ≤ 10^4 Output Format Print D lines each containing the number of lucky floats for that day. SAMPLE INPUT 3 1 2 3 4 5 10 11 12 13 14 17 18 19 20 23 SAMPLE OUTPUT 3 2 3 Explanation For the first day, the floats 2, 3, and 5 are prime numbers so we get 3. For the second day, the floats 11 and 13 are prime numbers so we get 2. For the third day, the floats 17, 19, and 23 are prime numbers so we get 3.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_lucky_floats(days): results = [] for floats in days: count = sum(1 for float_num in floats if is_prime(float_num)) results.append(count) return results # Assuming input parsing will be handled outside of these functions as needed."},{"question":"A small town is organizing a running event. Participants will register a time interval during which they intend to participate. Each participant will run for an arbitrary amount of time within their interval, but they must start and end within their registered time frame. To ensure safety and manage resources effectively, the organizers need to determine the minimum number of lifeguards required so that all running participants are tracked at every point in time when there\'s at least one runner on the track. Each lifeguard can only monitor a continuous time range. Therefore, we need to find the minimum number of such continuous time ranges required to cover all intervals reported by the participants. # Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of participants. Each of the next n lines contains two integers li and ri (1 ≤ li < ri ≤ 10^9), representing the starting and ending times of the participant\'s running interval. # Output Print one integer — the minimum number of lifeguards required. # Examples Example 1 Input: ``` 3 1 4 2 6 8 10 ``` Output: ``` 2 ``` Example 2 Input: ``` 4 1 3 4 6 7 9 2 5 ``` Output: ``` 2 ``` # Note In the first example, we can cover the intervals [1, 6) and [8, 10) with two lifeguards. The first lifeguard covers the overlap between the first two participants from 1 to 6, and the second lifeguard covers the third participant from 8 to 10. In the second example, we can cover the first, second, and fourth intervals with one lifeguard from 1 to 6 and the third interval with another lifeguard from 7 to 9.","solution":"def min_lifeguards(n, intervals): Determines the minimum number of continuous lifeguard shifts required to cover all participant intervals. Args: n (int): The number of participants. intervals (list of tuples): Each tuple contains two integers representing the start and end times of a participant\'s interval. Returns: int: The minimum number of lifeguard shifts required. # Sort intervals by starting time. If two intervals have the same starting time, then by their ending times. intervals.sort() # List to store the merged intervals merged_intervals = [] for interval in intervals: if not merged_intervals or merged_intervals[-1][1] < interval[0]: merged_intervals.append(interval) else: merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], interval[1])) return len(merged_intervals)"},{"question":"You are an apprentice at a company that specializes in managing online libraries. You\'ve been tasked with developing a feature that allows users to find the most borrowed book(s) from a list of books borrowed by different users. To achieve this, you need to write a program that will take a list of borrowed books and determine which book(s) were borrowed the most number of times. If there are multiple books tied for the most borrows, the program should return all of them in alphabetical order. # Input - The input starts with a single integer `n`, indicating the number of borrowed book entries. - The next `n` lines each contain the title of the borrowed book. # Output - The program should output the title(s) of the most borrowed book(s) in alphabetical order, each on a different line. # Constraints - Each title is a single line containing only alphanumeric characters and spaces. - 1 ≤ n ≤ 1000. - Each title has a length of at most 100 characters. # Example Input ``` 7 The Hobbit Harry Potter The Catcher in the Rye The Hobbit The Catcher in the Rye The Hobbit 1984 ``` Output ``` The Hobbit ``` Input ``` 8 The Hobbit Harry Potter The Catcher in the Rye The Catcher in the Rye The Catcher in the Rye 1984 1984 1984 ``` Output ``` 1984 The Catcher in the Rye ```","solution":"def most_borrowed_books(n, borrowed_books): from collections import Counter # Count the number of times each book title was borrowed book_count = Counter(borrowed_books) # Find the maximum number of borrows max_borrows = max(book_count.values()) # Find all books that have the maximum number of borrows most_borrowed = [book for book, count in book_count.items() if count == max_borrows] # Return the list of most borrowed books in alphabetical order return sorted(most_borrowed)"},{"question":"Given a binary tree, your task is to compute the sum of the depths of all its nodes. Each node\'s depth is defined as the number of edges from the root node to that node. The root node has a depth of 0. -----Input----- The input consists of several test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains an integer n (1 le n le 10^5) — the number of nodes in the binary tree. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) — indicating that there is an edge between nodes u and v. It\'s guaranteed that the given edges form a valid binary tree and that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the sum of the depths of all nodes in the tree. -----Example----- Input 3 3 1 2 1 3 6 1 2 1 3 2 4 2 5 3 6 1 Output 2 8 0 Explanation: In the first test case, the binary tree is: ``` 1 / 2 3 ``` Node depths: 1(0), 2(1), 3(1); Sum of depths = 0 + 1 + 1 = 2 In the second test case, the binary tree is: ``` 1 / 2 3 / 4 5 6 ``` Node depths: 1(0), 2(1), 3(1), 4(2), 5(2), 6(2); Sum of depths = 0 + 1 + 1 + 2 + 2 + 2 = 8 In the third test case, the binary tree is: ``` 1 ``` Node depth: 1(0); Sum of depths = 0","solution":"def sum_of_depths(t, test_cases): from collections import deque results = [] for test_case in test_cases: n, edges = test_case if n == 1: results.append(0) continue # Create the adjacency list tree = [[] for _ in range(n + 1)] for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to calculate depth sum total_depth = 0 queue = deque([(1, 0)]) # (node, depth) visited = [False] * (n + 1) visited[1] = True while queue: node, depth = queue.popleft() total_depth += depth for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, depth + 1)) results.append(total_depth) return results"},{"question":"You are given an integer `n` (1 ≤ n ≤ 10^6). Your task is to determine if it\'s possible to construct an array of length `n` containing only the integers 1 and 2 such that the absolute difference between the counts of 1s and 2s in any prefix of the array is at most 1. ---- Input ---- The input consists of a single integer `n`. ---- Output ---- If it is possible to construct such an array, print the array in a single line. Otherwise, print \\"Impossible\\". Note: If there are multiple valid arrays, print any of them. --- Examples --- Input 3 Output 1 2 1 Input 2 Output 1 2","solution":"def construct_array(n): Determines if it\'s possible to construct an array of length `n` containing only the integers 1 and 2 such that the absolute difference between the counts of 1s and 2s in any prefix of the array is at most 1. If possible, returns one such array. If not, returns \\"Impossible\\". if n == 1: return [1] elif n == 2: return [1, 2] else: array = [] for i in range(n): if (i % 2) == 0: array.append(1) else: array.append(2) return array"},{"question":"A company uses a list to manage the inventory of products in its warehouse. Each product has a unique identification number (integer). Periodically, products are reassigned new identification numbers, and the company needs to keep track of the changes. Develop a function `reassign_ids(initial_list, new_ids)` that takes two lists of integers of the same length as input: - `initial_list`: A list of the initial product identification numbers. - `new_ids`: A list of the new identification numbers corresponding to the products in the `initial_list`. Your task is to verify if the reassignment is valid and return a list of tuples showing the old and new identification numbers. The reassignment is considered valid if all new identification numbers are unique and none of them are in the `initial_list`. # Input - `initial_list` - A list of length `n` (1 ≤ n ≤ 1000) containing unique integers representing the initial identification numbers of products. - `new_ids` - A list of the same length as `initial_list` containing integers representing the new identification numbers. # Output - Return a list of tuples `(old_id, new_id)` representing the mapping of old identification numbers to new ones if the reassignment is valid. - If the reassignment is not valid, return \\"Invalid reassignment\\". # Examples Example 1: ```python initial_list = [101, 202, 303, 404] new_ids = [505, 606, 707, 808] Output: [(101, 505), (202, 606), (303, 707), (404, 808)] ``` Example 2: ```python initial_list = [1001, 2002, 3003] new_ids = [3003, 4004, 5005] Output: \\"Invalid reassignment\\" ``` Example 3: ```python initial_list = [500, 600] new_ids = [700, 600] Output: \\"Invalid reassignment\\" ``` # Note In Example 1, the reassignment is valid as all new IDs are unique and do not overlap with existing IDs. In Example 2, the new identification number `3003` is already in the initial list, making the reassignment invalid. In Example 3, the new identification number `600` is not unique, making the reassignment invalid.","solution":"def reassign_ids(initial_list, new_ids): Returns a list of tuples showing old and new identification numbers if reassignment is valid. Otherwise, returns \\"Invalid reassignment\\". if len(initial_list) != len(new_ids): # The input lists must be of the same length return \\"Invalid reassignment\\" # Check if all new IDs are unique and not in the initial list if len(set(new_ids)) != len(new_ids) or any(new_id in initial_list for new_id in new_ids): return \\"Invalid reassignment\\" return list(zip(initial_list, new_ids))"},{"question":"In the land of Numbersville, there is a unique game played using arrays of integers. The game is considered won if the array possesses a \\"Triplet Property.\\" The \\"Triplet Property\\" is defined for an array if there exists at least one sequence of three distinct indices (i, j, k, with i < j < k) such that arr[i] < arr[j] < arr[k]. For example, the array [1, 2, 3, 4] has the \\"Triplet Property\\" because you can pick the indices (0, 1, 2) or (1, 2, 3), yielding the subsequence (1, 2, 3) or (2, 3, 4) respectively, both of which satisfy the property. Given an array of integers, your task is to determine if the array has the \\"Triplet Property\\" and print \\"YES\\" if it does, or \\"NO\\" otherwise. -----Input----- The first line contains an integer n (3 ≤ n ≤ 1000), indicating the number of elements in the array. The second line contains n space-separated integers arr[i] (1 ≤ arr[i] ≤ 10^6), representing the elements of the array. -----Output----- Print \\"YES\\" if the array has the \\"Triplet Property\\", otherwise print \\"NO\\". -----Examples----- Input 4 1 2 3 4 Output YES Input 5 5 4 3 2 1 Output NO Input 6 4 1 5 3 7 2 Output YES -----Note----- In the first sample, the triplet (1, 2, 3) at indices (0, 1, 2) satisfies the property. In the second sample, no such triplet exists, hence the output is \\"NO\\". In the third example, the triplet (4, 5, 7) at indices (0, 2, 4) satisfies the property.","solution":"def has_triplet_property(arr): Returns \\"YES\\" if the array has the \\"Triplet Property\\", otherwise \\"NO\\". The Triplet Property is defined if there exists at least one sequence of three distinct indices (i, j, k, with i < j < k) such that arr[i] < arr[j] < arr[k]. n = len(arr) if n < 3: return \\"NO\\" # Initialize variables to store the smallest and second smallest values found so far. smallest = float(\'inf\') second_smallest = float(\'inf\') for i in range(n): if arr[i] <= smallest: smallest = arr[i] elif arr[i] <= second_smallest: second_smallest = arr[i] else: # If we find an element greater than both, we have a triplet. return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers. Your task is to implement a function that, for each element of the list, finds the count of numbers that are to the right of it and are smaller than it. For example, for the input list `[5, 2, 6, 1]`, the function should return `[2, 1, 1, 0]` as: - There are 2 numbers smaller than 5 to its right (2, 1). - There is 1 number smaller than 2 to its right (1). - There is 1 number smaller than 6 to its right (1). - There are no numbers smaller than 1 to its right. Notes * The list can contain both positive and negative integers. * The list can be empty, in which case you should return an empty list.","solution":"def count_smaller_to_right(nums): Given a list of integers, for each element, find the count of numbers that are to the right of it and are smaller than it. Parameters: nums (list): List of integers Returns: list: List containing counts of smaller numbers to the right for each element of the input list. result = [] for i in range(len(nums)): count = 0 for j in range(i + 1, len(nums)): if nums[j] < nums[i]: count += 1 result.append(count) return result"},{"question":"John has a favorite sequence that he wants to share with you. He calls it the \\"John Sequence,\\" which is defined recursively as follows: - The first element of the sequence is 1 (i.e., JohnSequence(1) = 1). - For n > 1, the n-th element of the sequence JohnSequence(n) is defined as the sum of all the previous elements in the sequence plus 1 (i.e., JohnSequence(n) = JohnSequence(1) + JohnSequence(2) + ... + JohnSequence(n-1) + 1). Given an integer k, your task is to identify the k-th element of the John Sequence. Input A single line contains an integer k (1 ≤ k ≤ 1000) — the position in the John Sequence for which you need to find the value. Output Print the k-th element of the John Sequence. Examples Input 1 Output 1 Input 2 Output 2 Input 4 Output 8 Note For k = 1, JohnSequence(1) = 1. For k = 2, JohnSequence(2) = JohnSequence(1) + 1 = 1 + 1 = 2. For k = 3, JohnSequence(3) = JohnSequence(1) + JohnSequence(2) + 1 = 1 + 2 + 1 = 4. For k = 4, JohnSequence(4) = JohnSequence(1) + JohnSequence(2) + JohnSequence(3) + 1 = 1 + 2 + 4 + 1 = 8.","solution":"def john_sequence(k): Returns the k-th element of the John Sequence. if k == 1: return 1 sequence = [1] for i in range(2, k + 1): next_element = sum(sequence) + 1 sequence.append(next_element) return sequence[-1]"},{"question":"Write a program that takes an integer n and a series of n integers representing stock prices on different days. The program should calculate the maximum profit that could be achieved by buying one stock and later selling it. If no profit is possible, return 0. Constraints * 1 leq n leq 1000 * 1 leq text{stock price} leq 10^5 Input The input consists of two lines: The first line contains the integer n. The second line contains n integers separated by spaces representing the stock prices on different days. Output Output one integer which is the maximum profit possible, or 0 if no profit can be achieved. Example Input 6 7 1 5 3 6 4 Output 5 Explanation Buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6) would result in a maximum profit of 6 − 1 = 5. No higher profit is possible with any other combination of buying and selling. If all prices are in decreasing order, the result should be 0 since no profit is possible.","solution":"def max_profit(n, prices): if n <= 1: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given an array prices where prices[i] is the price of the i-th item in a shop. You are also given a parameter discount_limit which determines the maximum percentage discount that can be applied to any item in the shop and an integer budget which is the amount of money you are willing to spend. Your task is to find the maximum number of items you can buy without exceeding your budget when the best possible discount is applied to each item. Assume the discount can be applied such that the cost of any item i becomes prices[i] * (1 - discount_limit/100). Write a function: ```python def max_items_with_discount(prices: List[int], discount_limit: int, budget: int) -> int: # Function implementation ``` **Input**: - prices: List[int], an array of integers where 1 <= len(prices) <= 10000 and 1 <= prices[i] <= 10000. - discount_limit: int, an integer where 1 <= discount_limit <= 100, represents the maximum percentage discount. - budget: int, an integer where 1 <= budget <= 1000000, represents the total amount you\'re willing to spend. **Output**: - Return the maximum number of items that can be bought within the budget applying the optimal discount. **Example 1**: ```python prices = [100, 200, 300] discount_limit = 20 budget = 480 output = 3 ``` Explanation: The optimal discounts would be applied to get prices [80,160,240] and thus all items can be bought for 480. **Example 2**: ```python prices = [150, 100, 200] discount_limit = 50 budget = 200 output = 2 ``` Explanation: The optimal discounts would be applied to get prices [75, 50, 100] and thus 2 items can be bought within 200. **Example 3**: ```python prices = [50, 80, 120, 100] discount_limit = 25 budget = 150 output = 2 ``` Explanation: The optimal discounts would be applied to get prices [37.5, 60, 90, 75] and thus 2 items can be bought within 150.","solution":"def max_items_with_discount(prices, discount_limit, budget): Returns the maximum number of items that can be bought within the budget applying the optimal discount. # Calculate the discounted prices discounted_prices = [price * (1 - discount_limit / 100) for price in prices] # Sort the discounted prices to optimize buying as many cheaper items as possible discounted_prices.sort() count = 0 total_cost = 0 # Iterate through the sorted discounted prices to count the maximum items that can be bought for price in discounted_prices: if total_cost + price <= budget: total_cost += price count += 1 else: break return count"},{"question":"Given a number `n`, return the number of prime numbers that are strictly less than `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function that receives an integer `n` and returns an integer representing the number of prime numbers that are less than `n`. You can assume that `n` is a positive integer within the range 2 ≤ n ≤ 50,000. **Function Signature**: ```python def count_primes(n: int) -> int: ``` **Constraints**: * 2 ≤ n ≤ 50,000 **Input** * A single integer `n`. **Output** * A single integer representing the number of prime numbers less than `n`. **Example** ```python count_primes(10) ``` **Output** ```plaintext 4 ``` **Explanation** There are 4 prime numbers less than 10, which are 2, 3, 5, and 7. ```python count_primes(20) ``` **Output** ```plaintext 8 ``` **Explanation** There are 8 prime numbers less than 20, which are 2, 3, 5, 7, 11, 13, 17, and 19.","solution":"def count_primes(n: int) -> int: Returns the number of prime numbers less than n. if n <= 2: return 0 # Initially assume all numbers < n are prime is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers # Sieve of Eratosthenes algorithm for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n, i): is_prime[j] = False # Count prime numbers return sum(is_prime)"},{"question":"John is fascinated with numbers, especially with sequences formed by peculiar patterns. Recently, he devised his own peculiar sequence defined by the \\"Even Powers\\" recurrence relation. This recurrence relation is given by: G(n) = 2^(G(n-1) % 2) + 2^(G(n-2) % 2) John starts his sequence with two seed values and wants to experiment with different starting points. He finds the sequence particularly interesting when modulated by a large prime number. To further explore this sequence, John asks you to help him by writing a program to compute the Nth term of the sequence modulo 1000000007. Given G(1) and G(2), your task is to compute the value of G(n) % 1000000007 for multiple values of n. Input Format: - The first line contains a single integer T, the number of test cases. - The next T lines contain three integers: G1, G2 (the seed values), and n. Output Format: - For each test case, output a single line denoting the value of G(n) % 1000000007. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ G1, G2 ≤ 10^5 - 1 ≤ n ≤ 10^9 SAMPLE INPUT 2 3 4 5 6 7 10 SAMPLE OUTPUT 4 4 Explanation: In the first test case, the sequence starts with G(1) = 3 and G(2) = 4. The values of the sequence are: - G(3) = 2^(3 % 2) + 2^(4 % 2) = 2^1 + 2^0 = 2 + 1 = 3 - G(4) = 2^(4 % 2) + 2^(3 % 2) = 2^0 + 2^1 = 1 + 2 = 3 - G(5) = 2^(3 % 2) + 2^(3 % 2) = 2^1 + 2^1 = 2 + 2 = 4 Thus, G(5) % 1000000007 = 4. In the second test case, the sequence starts with G(1) = 6 and G(2) = 7. The values of the sequence are: - G(3) = 2^(6 % 2) + 2^(7 % 2) = 2^0 + 2^1 = 1 + 2 = 3 - G(4) = 2^(7 % 2) + 2^(3 % 2) = 2^1 + 2^1 = 2 + 2 = 4 - G(5) = 2^(3 % 2) + 2^(4 % 2) = 2^1 + 2^0 = 2 + 1 = 3 - G(6) = 2^(4 % 2) + 2^(3 % 2) = 2^0 + 2^1 = 1 + 2 = 3 - G(7) = 2^(3 % 2) + 2^(3 % 2) = 2^1 + 2^1 = 2 + 2 = 4 - G(8) = 2^(3 % 2) + 2^(4 % 2) = 2^1 + 2^0 = 2 + 1 = 3 - G(9) = 2^(4 % 2) + 2^(3 % 2) = 2^0 + 2^1 = 1 + 2 = 3 - G(10) = 2^(3 % 2) + 2^(3 % 2) = 2^1 + 2^1 = 2 + 2 = 4 Thus, G(10) % 1000000007 = 4.","solution":"def even_powers_sequence(G1, G2, n): MOD = 1000000007 # Handling the base cases if n == 1: return G1 % MOD elif n == 2: return G2 % MOD # Initializes the terms a = G1 b = G2 # Use a loop to find the nth term for _ in range(3, n + 1): next_term = (2 ** (a % 2) + 2 ** (b % 2)) % MOD a, b = b, next_term return b def process_test_cases(test_cases): results = [] for G1, G2, n in test_cases: results.append(even_powers_sequence(G1, G2, n)) return results"},{"question":"Create a function that takes in a sequence of integers and returns the length of the longest contiguous subarray where all the elements are distinct. Constraints * Each element of the sequence is an integer in the range [1, 10^5]. * The length of the sequence (N) is between 1 and 10^5 (inclusive). Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Output the length of the longest contiguous subarray with all distinct elements. Examples Input 7 1 2 1 3 4 2 1 Output 4 Input 5 1 2 3 4 5 Output 5 Input 6 4 4 4 4 4 4 Output 1","solution":"def longest_distinct_subarray_length(arr): Returns the length of the longest contiguous subarray where all elements are distinct. n = len(arr) max_length = 0 left = 0 seen_elements = {} for right in range(n): if arr[right] in seen_elements: left = max(left, seen_elements[arr[right]] + 1) seen_elements[arr[right]] = right max_length = max(max_length, right - left + 1) return max_length # Example usage: # n = int(input()) # arr = list(map(int, input().split())) # print(longest_distinct_subarray_length(arr))"},{"question":"Sandy loves playing with strings and today she encountered an interesting problem. She has a string `S` containing only lowercase English letters and she is allowed to perform a specific operation any number of times on this string. The operation is defined as choosing two adjacent identical characters and removing them from the string, effectively reducing the string\'s length by two each time it is performed. Her ultimate goal is to delete as many characters as possible. Given the string `S`, determine the length of the resultant string after performing the operation as many times as possible. Input format: - The first and only line of input consists of a string `S` of length `N` denoting the initial string. Output format: - Print a single integer, the length of the resultant string after all possible deletions. Constraints: 1 ≤ N ≤ 10^5 Sample Input 1: abbac Sample Output 1: 1 Explanation: Sandy can remove \\"bb\\" from \\"abbac\\" -> \\"aac\\" Sandy can remove \\"aa\\" from \\"aac\\" -> \\"c\\" Thus, the resultant string is \\"c\\" with length 1. Sample Input 2: aabbcc Sample Output 2: 0 Explanation: Sandy can remove \\"aa\\", \\"bb\\", and \\"cc\\" from \\"aabbcc\\" -> \\"\\" Thus, the resultant string is an empty string with length 0.","solution":"def reduce_string(s): stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"Given the population data of a city over several years, your task is to find the year in which the maximum population growth occurred. The population data is provided in the form of a list of tuples, where each tuple contains a year and the corresponding population for that year. Input Format: - An integer `N`, the number of years for which population data is available. - A list of `N` tuples, where each tuple contains two integers: the year and the population in that year. Output Format: - An integer, the year in which the maximum population growth occurred. Constraints: - 2 ≤ N ≤ 1000 (There are at least two years of data available) - The years are provided in increasing order. Sample Input: 4 [(2000, 1000), (2001, 1500), (2002, 1300), (2003, 1800)] Sample Output: 2001 Explanation: The population change between each consecutive year is as follows: - From 2000 to 2001: 1500 - 1000 = 500 - From 2001 to 2002: 1300 - 1500 = -200 - From 2002 to 2003: 1800 - 1300 = 500 The maximum population growth of 500 occurred between the years 2000 to 2001 and 2002 to 2003. Since we need to output the starting year, we output the starting year of the first occurrence which is 2001.","solution":"def max_population_growth_year(data): max_growth = float(\'-inf\') max_growth_year = None for i in range(1, len(data)): growth = data[i][1] - data[i-1][1] if growth > max_growth: max_growth = growth max_growth_year = data[i][0] return max_growth_year"},{"question":"Given a grid of letters, write a function to determine if a specific word can be found in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. # Function Signature ```python def exist(board: List[List[str]], word: str) -> bool: pass ``` # Input - `board`: a 2D list of characters representing the grid, where `board[i][j]` is the character in the ith row and jth column of the grid. - `word`: a string representing the word to be searched within the grid. # Output - Return `True` if the word exists in the grid, and `False` otherwise. # Constraints - `board` will have at least 1 row and 1 column. - `1 ≤ board.length, board[i].length ≤ 200` - `1 ≤ word.length ≤ 10^3` # Example Example 1: ``` Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" Output: True ``` Explanation: The word \\"ABCCED\\" can be constructed from the characters in the board starting at `board[0][0] -> board[0][1] -> board[0][2] -> board[1][2] -> board[2][2] -> board[2][1]`. Example 2: ``` Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" Output: True ``` Explanation: The word \\"SEE\\" can be constructed from the characters in the board starting at `board[2][1] -> board[2][2] -> board[1][3]`. Example 3: ``` Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" Output: False ``` Explanation: The word \\"ABCB\\" cannot be constructed from the board because the first \\"B\\" is reused too soon to construct the entire word.","solution":"from typing import List def exist(board: List[List[str]], word: str) -> bool: rows, cols = len(board), len(board[0]) def backtrack(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[index]: return False temp = board[r][c] board[r][c] = \'#\' found = (backtrack(r+1, c, index+1) or backtrack(r-1, c, index+1) or backtrack(r, c+1, index+1) or backtrack(r, c-1, index+1)) board[r][c] = temp return found for i in range(rows): for j in range(cols): if backtrack(i, j, 0): return True return False"},{"question":"There is a string `s` that only consists of lowercase English letters. You need to determine the length of the shortest substring (if it exists) that contains all the distinct characters of the string `s`. -----Input----- The input consists of: - one line containing the string `s` (1 leq |s| leq 10^6), the string of lowercase English letters. -----Output----- Output a single integer representing the length of the shortest substring that contains all distinct characters from the string `s`. If no such substring exists, output 0. -----Examples----- Sample Input 1: abac Sample Output 1: 3 Sample Input 2: aaaa Sample Output 2: 1 Sample Input 3: ab Sample Output 3: 2","solution":"def shortest_substring_with_all_chars(s): if not s: return 0 # Find all unique characters in the string unique_chars = set(s) n = len(unique_chars) # Use a sliding window to find the shortest substring char_count = {} min_length = float(\'inf\') left = 0 for right in range(len(s)): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 # When the window has all the unique characters while len(char_count) == n: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 # If min_length didn\'t change from initial value, no valid substring was found return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given a sequence of integers representing heights of boxes. Your task is to form the tallest possible stack of boxes with the constraint that each box in the stack must have a strictly greater height than the box below it. Write a program that will determine the height of the tallest stack. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of boxes. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the boxes. Output Output a single integer — the height of the tallest stack you can form. Examples Input 5 1 2 3 4 5 Output 5 Input 6 6 3 4 1 5 2 Output 3 Input 4 10 20 10 30 Output 3 Note In the first example, you can use all boxes since each height is strictly greater than the previous one, resulting in a stack height of 5. In the second example, one possible stack is (6, 3, 2) or (6, 5, 3) resulting in a maximum stack height of 3. In the third example, one possible stack is (10, 20, 30) resulting in a maximum stack height of 3.","solution":"def tallest_stack(n, heights): Determines the height of the tallest possible stack of boxes such that each box in the stack has a strictly greater height than the box below it. Parameters: n (int): the number of boxes heights (list of int): the heights of the boxes Returns: int: the height of the tallest stack # Sort the boxes by their heights heights.sort() # Use a set to eliminate duplicates and find longest increasing subsequence unique_heights = list(sorted(set(heights))) return len(unique_heights)"},{"question":"You are given an array of integers again and again, and you will be doing a series of transformations on it until conditions are met. Initially, the array contains n positive integers. The following transformation can be applied to the array: take any two different elements of the array and replace them with their greatest common divisor (gcd) and least common multiple (lcm). Do note that the lcm value should be taken modulo a large prime number P = 10^9 + 7 to avoid overflow issues. The process can continue as long as there are at least two elements left in the array. You have to find the maximum possible value in the final transformed array after performing any number of the allowed operations. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 1000) — the size of the array. The second line of each test case contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which are the elements of the array. Output For each test case, output a single integer — the maximum possible value in the final array after performing the operations. Examples Input 2 3 2 3 4 5 1 2 3 4 5 Output 4 5 Note In the first example, no matter how we combine the elements through allowed operations, the highest value possible in the final array will be 4. For example, combining 2 and 3 will give us the pair (1, 6), then if we combine 1 and 4, we would get (1, 4), continuing gives us the maximum value 4. In the second example, combining any pairs will lead us to a maximum value of 5 in the final array. For example, combining 5 with any other number through the allowed operations will always result in one of the numbers remaining as 5. Your task is to identify the logical way to maximize the values after applying the operation multiple times.","solution":"from math import gcd from functools import reduce P = 10**9 + 7 def max_possible_value(arr): # The maximum possible value in the final array after transformations return max(arr) def main(test_cases): results = [] for arr in test_cases: result = max_possible_value(arr) results.append(result) return results"},{"question":"Zombie Apocalypse The world is currently facing a zombie apocalypse. You are part of a rescue team, and your mission is to deliver an antidote from your base to a designated safe house located in a zombie-infested city. The city has several districts connected by roads, and you need to find the safest route to deliver the antidote without getting caught by zombies. Each road between the districts has a danger level associated with it, representing the probability of encountering zombies on that road. The goal is to find the route that minimizes the total danger level from your base to the safe house. Input The input consists of multiple datasets. Each dataset begins with an integer N (2 ≤ N ≤ 100) representing the number of districts, and an integer M (0 ≤ M ≤ N-1), representing the number of roads connecting the districts directly. The following M lines contain information about the roads. Each road is represented by three integers X, Y, and D (0 ≤ D ≤ 100), indicating a road connecting district X and district Y with a danger level of D. The input ends with a line containing N = 0 and M = 0, which is not part of any dataset. Output For each dataset, output the minimum total danger level to deliver the antidote from district 0 to the safe house located in district (N-1). If it is not possible to reach the safe house, output \\"No Safe Route!\\". Sample Input ``` 3 3 0 1 5 1 2 10 0 2 15 4 4 0 1 20 1 2 30 2 3 40 0 3 70 2 1 0 1 100 0 0 ``` Sample Output ``` 15 70 100 ``` Example Input ``` 3 3 0 1 5 1 2 10 0 2 15 4 4 0 1 20 1 2 30 2 3 40 0 3 70 2 1 0 1 100 0 0 ``` Output ``` 15 70 100 ```","solution":"import heapq def safest_route(num_districts, roads): graph = {i: [] for i in range(num_districts)} for x, y, d in roads: graph[x].append((d, y)) graph[y].append((d, x)) # Use Dijkstra\'s algorithm to find the shortest path min_heap = [(0, 0)] # (danger_level, district) danger = {i: float(\'inf\') for i in range(num_districts)} danger[0] = 0 visited = set() while min_heap: curr_danger, curr_district = heapq.heappop(min_heap) if curr_district in visited: continue visited.add(curr_district) for next_danger, next_district in graph[curr_district]: if next_district not in visited: new_danger = curr_danger + next_danger if new_danger < danger[next_district]: danger[next_district] = new_danger heapq.heappush(min_heap, (new_danger, next_district)) if danger[num_districts - 1] == float(\'inf\'): return \\"No Safe Route!\\" else: return danger[num_districts - 1] def process_input(input_data): datasets = input_data.strip().split(\'n\') results = [] i = 0 while i < len(datasets): n, m = map(int, datasets[i].split()) if n == 0 and m == 0: break roads = [] for j in range(m): i += 1 x, y, d = map(int, datasets[i].split()) roads.append((x, y, d)) results.append(safest_route(n, roads)) i += 1 return results"},{"question":"Write a function that simulates a parking lot with limited spots for cars. The function should support the following operations: - \'park\' adds a car to the lot if there is space available. - \'leave\' removes a car from the lot by plate number. - \'status\' returns a list of all currently parked cars in the order they arrived. Each car is represented by a unique plate number (a string). The parking lot has a fixed number of spots. **Notes:** * If an operation is not possible (e.g., parking when the lot is full or leaving a car that’s not in the lot), the function should handle it gracefully without errors. * Your solution should be efficient in terms of both time and space complexity. **Examples:** ``` parking_lot(2, [(\'park\', \'ABC123\'), (\'park\', \'XYZ789\'), (\'status\',), (\'leave\', \'ABC123\'), (\'status\',), (\'leave\', \'ABC123\')]) --> [\'Parked\', \'Parked\', [\'ABC123\', \'XYZ789\'], \'Left\', [\'XYZ789\'], \'Car not found\'] parking_lot(1, [(\'park\', \'ABC123\'), (\'park\', \'XYZ789\'), (\'status\',), (\'leave\', \'XYZ789\'), (\'status\',)]) --> [\'Parked\', \'Lot full\', [\'ABC123\'], \'Car not found\', [\'ABC123\']] ``` **Function Signature:** ```python def parking_lot(capacity: int, events: List[Tuple[str, str]]) -> List[Union[str, List[str]]]: pass ```","solution":"from typing import List, Tuple, Union def parking_lot(capacity: int, events: List[Tuple[str, str]]) -> List[Union[str, List[str]]]: parked_cars = [] results = [] for event in events: action = event[0] if action == \'park\': plate = event[1] if len(parked_cars) < capacity: parked_cars.append(plate) results.append(\'Parked\') else: results.append(\'Lot full\') elif action == \'leave\': plate = event[1] if plate in parked_cars: parked_cars.remove(plate) results.append(\'Left\') else: results.append(\'Car not found\') elif action == \'status\': results.append(list(parked_cars)) return results"},{"question":"Pia is organizing a charity auction where each item is listed with a reserve price. The auction proceeds as follows: every time an item receives a bid equal to or higher than its reserve price, the item\'s reserve price will increase by a certain fixed amount, known as the incremental value. Pia needs to keep track of how many times each item\'s reserve price changes as the bids come in. Write a program to help Pia manage the auction process. -----Input----- The input consists of: - An integer N, the number of items in the auction. - N lines follow, each containing an integer representing the initial reserve price of an item. - An integer M, the number of bids placed in the auction. - M lines follow, each containing two integers: the item index (1-indexed) and the bid amount. -----Output----- For each item, print the number of times its reserve price increased during the auction. -----Constraints----- 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 0 ≤ initial.reserve.price, bid.amount ≤ 10000 -----Sample Input----- 3 100 200 300 5 1 150 2 250 3 350 1 200 3 400 -----Sample Output----- 2 1 2 -----Output details----- For the first item: - The initial reserve price is 100. - The first bid on item 1 is 150, which is higher than 100, so the reserve price increases once. - The second bid on item 1 is 200, which is higher than the new reserve price of 150, increasing the reserve price again. - Thus, the reserve price of item 1 changes twice. For the second item: - The initial reserve price is 200. - The first bid on item 2 is 250, which is higher than 200, so the reserve price increases once. - Thus, the reserve price of item 2 changes once. For the third item: - The initial reserve price is 300. - The first bid on item 3 is 350, which is higher than 300, so the reserve price increases once. - The second bid on item 3 is 400, which is higher than the new reserve price of 350, increasing the reserve price again. - Thus, the reserve price of item 3 changes twice.","solution":"def auction_reserve_price(N, initial_prices, M, bids): Manages the auction process and tracks the number of times each item\'s reserve price changes. Args: N : int : The number of items in the auction. initial_prices : list of int : Initial reserve prices for each item. M : int : The number of bids placed in the auction. bids : list of tuples of int : Each tuple contains an item index (1-indexed) and a bid amount. Returns: list of int : The number of times each item\'s reserve price increased during the auction. # Initialize the number of price changes to 0 for each item price_changes = [0] * N # Initialize the current reserve prices as the initial prices current_reserve_prices = initial_prices[:] for bid in bids: item_index, bid_amount = bid item_index -= 1 # Convert to 0-indexed if bid_amount >= current_reserve_prices[item_index]: price_changes[item_index] += 1 # Increase the current reserve price current_reserve_prices[item_index] = bid_amount return price_changes"},{"question":"Given a binary tree, flatten it into a linked list in place in preorder traversal. Specifically, the \\"linked list\\" should use the right pointers of nodes and the left pointers should all be set to NULL. Example 1: Input: 1 / 2 5 / 3 4 6 Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6 Example 2: Input: 1 3 / 2 4 Output: 1 -> 3 -> 2 -> 4 Your Task: The task is to complete the function flatten() which should modify the tree as required and return the root of the flattened tree. The printing is done by the driver code. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ number of nodes ≤ 1000 1 ≤ value of nodes ≤ 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flattens the binary tree into a linked list in place following preorder traversal. if not root: return None # A pointer to store previously visited node in preorder traversal prev = None def flatten_tree(node): nonlocal prev if not node: return # Visit the current node flatten_tree(node.right) # First flatten the right subtree flatten_tree(node.left) # Then flatten the left subtree # Connect the current node to the previously visited node node.right = prev node.left = None prev = node # Start flattening from the root flatten_tree(root) return root"},{"question":"Given an integer array `arr` of size `N` that contains elements ranging from `1` to `N` with some elements possibly being repeated, you need to determine the first missing positive integer and the first duplicate element from the array. Example 1: Input: N = 5 arr[] = {3, 4, -1, 1, 3} Output: 2 3 Explanation: The first missing positive integer is 2 and the first duplicate element encountered is 3. Example 2: Input: N = 6 arr[] = {1, 2, 0, 4, 5, 6} Output: 3 -1 Explanation: The first missing positive integer is 3 and there are no duplicate elements, so -1 is returned for the duplicate. Your Task: You do not need to read input or print anything. Your task is to complete the function `find_missing_and_duplicate()` which takes the array of integers `arr` and `n` as parameters and returns an array of integers of size 2 where the first index contains the first missing positive integer and the second index contains the first duplicate element encountered (or -1 if no duplicates exist). Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^6 ≤ arr[i] ≤ 10^6","solution":"def find_missing_and_duplicate(arr, N): Function to find the first missing positive integer and the first duplicate element in an array. first_duplicate = -1 # Move all elements within the range 1 to N to their correct indices for i in range(N): while 1 <= arr[i] <= N and arr[i] != arr[arr[i] - 1]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Find duplicate seen = set() for i in range(N): if arr[i] in seen: first_duplicate = arr[i] break # we return only the first duplicate seen.add(arr[i]) # Find first missing positive integer for i in range(N): if arr[i] != i + 1: return [i + 1, first_duplicate] return [N + 1, first_duplicate]"},{"question":"You are a security analyst at a company. Your task is to design a monitoring system that identifies unusual network activity in real time. Your company’s network can be represented as a directed weighted graph, where vertices represent network nodes, and edges signify communication between nodes with associated communication times. To simplify the monitoring, you are only interested in specific types of network activities: whether there exists a path from any node `u` to node `v` where the total communication time does not exceed a given threshold `t`. Write a program that, given a description of the network and a series of queries, determines if such a path exists for each query. Input: The first line contains four space-separated integers `n`, `m`, `q`, and `t` (2 ≤ n ≤ 200; 0 ≤ m ≤ 1000; 1 ≤ q ≤ 500; 1 ≤ t ≤ 108), where `n` is the number of nodes, `m` is the number of edges, `q` is the number of queries, and `t` is the communication time threshold. Each of the next `m` lines contains three space-separated integers `a`, `b`, and `c` (1 ≤ a, b ≤ n; 1 ≤ c ≤ 104), representing a directed edge from node `a` to node `b` with a communication time of `c`. Each of the next `q` lines contains two space-separated integers `u` and `v` (1 ≤ u, v ≤ n), representing a query to check if there is a path from node `u` to node `v` with a total communication time not exceeding `t`. Output: For each query, output \\"YES\\" if such a path exists, and \\"NO\\" otherwise. Example: Input: 6 7 3 15 1 2 10 2 3 15 1 4 5 4 5 5 5 3 4 4 6 3 6 3 2 1 3 5 3 4 2 Output: YES YES NO Explanation: In this example, node pairs and the times are analyzed as follows: 1. There is a path from node 1 to node 3: 1 -> 4 -> 5 -> 3 with a total time of 14 which is within the threshold. 2. There is a direct path from node 5 to node 3 with a total time of 4, also within the threshold. 3. No path exists from node 4 to node 2 under the given threshold. Develop and implement an algorithm to efficiently process the queries and determine the presence of a path within the specified communication time limit.","solution":"import heapq def network_monitoring(n, m, q, t, edges, queries): # Function to perform Dijkstra\'s algorithm def dijkstra(source): dist = [float(\'inf\')] * (n + 1) dist[source] = 0 min_heap = [(0, source)] while min_heap: curr_dist, u = heapq.heappop(min_heap) if curr_dist > dist[u]: continue for v, weight in adj_list[u]: if curr_dist + weight < dist[v]: dist[v] = curr_dist + weight heapq.heappush(min_heap, (dist[v], v)) return dist # Build the adjacency list adj_list = [[] for _ in range(n + 1)] for (a, b, c) in edges: adj_list[a].append((b, c)) # Answer each query result = [] for u, v in queries: dist = dijkstra(u) if dist[v] <= t: result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Example Input n, m, q, t = 6, 7, 3, 15 edges = [ (1, 2, 10), (2, 3, 15), (1, 4, 5), (4, 5, 5), (5, 3, 4), (4, 6, 3), (6, 3, 2) ] queries = [ (1, 3), (5, 3), (4, 2) ] # Expected Output: [\\"YES\\", \\"YES\\", \\"NO\\"] print(network_monitoring(n, m, q, t, edges, queries))"},{"question":"------ Problem Statement ------ Joy wants to send a gift to his friend via a chain of couriers. Each courier can only carry the gift up to a certain maximum weight, and can hand over the gift to another courier if the weight limit is exceeded. Joy needs to find out the minimum number of couriers required to deliver the gift from his house to his friend’s house. ------ Input ------ - The first line contains an integer T, the number of test cases. - Each test case contains two lines: - The first line contains two integers, N and W, where N is the number of couriers and W is the total weight of the gift. - The second line contains N space-separated integers, representing the maximum weight that each courier can carry. ------ Output ------ For each test case, output a single line containing the minimum number of couriers required to deliver the gift. If it is not possible to deliver the gift, output -1. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{3} 1 ≤ W ≤ 10^4 1 ≤ Maximum weight each courier can carry ≤ 10^3 ----- Sample Input 1 ----- 3 5 100 30 20 50 70 90 4 150 50 60 80 40 3 200 70 60 10 ----- Sample Output 1 ----- 2 3 -1 ----- Explanation 1 ----- Test case 1: The gift with total weight 100 can be delivered using two couriers with maximum weights of 50 and 70. These two couriers can carry 120 units of weight together, which is sufficient. Test case 2: The gift with total weight 150 can be delivered using three couriers with maximum weights of 50, 60, and 80. These three couriers can carry 190 units of weight together, which is sufficient. Test case 3: The gift with total weight 200 cannot be delivered as combined, the couriers\' maximum weight capacity reaches only 140 units, which is insufficient. Hence the output is -1.","solution":"def min_couriers_to_deliver_gift(T, test_cases): results = [] for i in range(T): N, W = test_cases[i][0] capacities = sorted(test_cases[i][1], reverse=True) total_capacity = 0 couriers_count = 0 for capacity in capacities: if total_capacity >= W: break total_capacity += capacity couriers_count += 1 if total_capacity >= W: results.append(couriers_count) else: results.append(-1) return results"},{"question":"A string is considered \\"well-bracketed\\" if for every opening bracket (\'(\') there is a corresponding closing bracket (\')\') and the brackets are properly nested. For example, the strings “(())” and “(()(()))” are well-bracketed, but “(()” and “())(” are not. Given a string consisting only of the characters \'(\' and \')\', determine if it is well-bracketed. -----Input----- The input consists of a single line that contains a string s (1 ≤ |s| ≤ 1000) consisting only of the characters \'(\' and \')\'. -----Output----- Output \\"Yes\\" (without quotes) if the string is well-bracketed, and \\"No\\" (without quotes) otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input (()()) Output Yes Input (())(()) Output Yes Input (())) Output No Input )()( Output No -----Note----- In the first sample, every opening bracket has a matching closing bracket and they are correctly nested. In the third sample, there is an unmatched closing bracket, hence the string is not well-bracketed. In the fourth sample, the string starts with a closing bracket, so it\'s not well-bracketed.","solution":"def is_well_bracketed(s): Determines if the string s is well-bracketed. Args: s (str): The input string consisting only of \'(\' and \')\'. Returns: str: \\"Yes\\" if the string is well-bracketed, otherwise \\"No\\". stack = [] for char in s: if char == \'(\': stack.append(\'(\') elif char == \')\': if not stack: return \\"No\\" stack.pop() return \\"Yes\\" if not stack else \\"No\\""},{"question":"Consider the following sequence of numbers: - Start with the number 1. - To generate the next number in the sequence, take the previous number and add the sum of its digits to it. You have been given an integer n. Your task is to find the nth number in this sequence. Input The first line contains a single integer t (1 ≤ t ≤ 10^5)—the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^9)—the position in the sequence for which you need to find the number. Output For each test case, output the nth number in the sequence. Example Input: 3 1 2 3 Output: 1 2 4 Note: The sequence starts as follows: 1, 2 (1 + (1)), 4 (2 + (2)), 8 (4 + (4)), 16 (8 + (8)), ... For n=1, the result is 1. For n=2, the result is 2. For n=3, the result is 4.","solution":"def nth_sequence_number(n): Returns the nth number in the sequence where the next number is generated by adding the sum of the digits of the previous number to it. current = 1 for _ in range(n - 1): current += sum(int(digit) for digit in str(current)) return current def process_test_cases(t, test_cases): results = [] for n in test_cases: results.append(nth_sequence_number(n)) return results"},{"question":"You are managing a resource allocation system for a server that handles tasks. Each task requires a certain amount of CPU and memory resources. The server has a fixed amount of total CPU and memory available, and you need to determine the maximum number of tasks that can be handled simultaneously without exceeding the server\'s capacity. Each task has specific CPU and memory requirements, and the server\'s total CPU and memory capacities are given. -----Input----- - One line containing an integer T, the number of test cases in the input file. For each test case, there will be: - One line containing two space-separated integers C and M, the total CPU and memory capacity of the server respectively. - One line containing an integer N, the number of tasks. - N lines, each containing two space-separated integers c_i and m_i, denoting the CPU and memory requirements of the i-th task. You may assume that 1 leq T leq 3, 1 leq N leq 5000, 1 leq C, M, c_i, m_i leq 10000. -----Output----- - T lines, one for each test case in the order they occur in the input file, each containing the string “Case #X: Y” where X is the number of the test case, starting from 1, and Y is the maximum number of tasks the server can handle simultaneously. -----Examples----- Sample Input: 2 10000 8000 3 3000 2000 7000 1500 4000 3000 5000 5000 2 2000 2000 4000 4000 Sample Output: Case #1: 2 Case #2: 1","solution":"def max_tasks_per_case(cpu_capacity, memory_capacity, tasks, num_tasks): from itertools import combinations max_tasks = 0 # Generate all combinations of tasks for i in range(1, num_tasks + 1): for comb in combinations(range(num_tasks), i): total_cpu = sum(tasks[j][0] for j in comb) total_memory = sum(tasks[j][1] for j in comb) if total_cpu <= cpu_capacity and total_memory <= memory_capacity: max_tasks = max(max_tasks, len(comb)) return max_tasks def max_tasks(t, test_cases): result = [] for case_index in range(t): C, M = test_cases[case_index][0] N = test_cases[case_index][1] tasks = test_cases[case_index][2] max_tasks_possible = max_tasks_per_case(C, M, tasks, N) result.append(f\\"Case #{case_index + 1}: {max_tasks_possible}\\") return result"},{"question":"Given a rectangular grid of dimensions n x m, you are required to find the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). However, you can only move to adjacent cells that share an edge (i.e., left, right, up, and down), and each cell may contain a value indicating a possible delay. The delay indicates the time taken to move through that cell. Your task is to move through the grid in such a way that the total time taken is minimized. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m space-separated integers d_i,j (0 ≤ d_i,j ≤ 100) — the delays for the corresponding grid cell. -----Output----- Print the integer representing the minimum time required to move from the top-left to the bottom-right corner of the grid, taking the delays into account. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 1 1 1 Output 3 Input 3 3 1 10 1 1 10 1 1 1 1 Output 5 -----Note----- In the first sample, the optimal path is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with a total delay of 1 + 3 + 1 + 1 + 1 = 7. In the second sample, all cells have the same delay of 1, so the shortest path is a direct path with a total delay of 3. In the third sample, the optimal path avoids the cells with high delays, leading to a total delay of 1 + 1 + 1 + 1 + 1 = 5.","solution":"import heapq def minimum_path_time(n, m, grid): Returns the minimum time required to move from the top-left to the bottom-right corner of the grid, taking the delays into account. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] dist = [[float(\'inf\')] * m for _ in range(n)] dist[0][0] = grid[0][0] pq = [(grid[0][0], 0, 0)] while pq: delay, x, y = heapq.heappop(pq) if (x, y) == (n-1, m-1): return delay for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_delay = delay + grid[nx][ny] if new_delay < dist[nx][ny]: dist[nx][ny] = new_delay heapq.heappush(pq, (new_delay, nx, ny)) return dist[n-1][m-1]"},{"question":"You are given a binary tree. You need to write a function that checks whether the binary tree is balanced or not. A balanced binary tree is defined as a binary tree in which: 1. The left and right subtrees\' heights differ by at most one, and 2. The left subtree is balanced, and 3. The right subtree is balanced. The function should return `True` if the tree is balanced and `False` otherwise. Your function should be named `is_balanced` and should take the root node of the binary tree as its argument. Example: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None # Example 1 # Input # 3 # / # 9 20 # / # 15 7 root1 = TreeNode(3) root1.left = TreeNode(9) root1.right = TreeNode(20) root1.right.left = TreeNode(15) root1.right.right = TreeNode(7) # Example 2 # Input # 1 # / # 2 2 # / # 3 3 # / # 4 4 root2 = TreeNode(1) root2.left = TreeNode(2) root2.right = TreeNode(2) root2.left.left = TreeNode(3) root2.left.right = TreeNode(3) root2.left.left.left = TreeNode(4) root2.left.left.right = TreeNode(4) # Example 3 # Input # 2 # / # 1 10 # / # -9 6 root3 = TreeNode(2) root3.left = TreeNode(1) root3.right = TreeNode(10) root3.left.left = TreeNode(-9) root3.left.right = TreeNode(6) # Example function call print(is_balanced(root1)) # Output: True print(is_balanced(root2)) # Output: False print(is_balanced(root3)) # Output: True ``` Your task is to implement the `is_balanced` function. Here are the constraints: - Number of nodes in the tree is in the range [0, 10000] - -1000000 ≤ Node values ≤ 1000000 Hint: You may want to define a helper function to compute the height of a subtree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_balanced(root): Returns True if the binary tree is balanced, False otherwise. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_height = max(left_height, right_height) + 1 if not left_balanced or not right_balanced or abs(left_height - right_height) > 1: return current_height, False return current_height, True _, balanced = check_height(root) return balanced"},{"question":"Sam is organizing a marathon event and he wants to keep track of the participants\' statuses in real-time. Each participant will pass through checkpoints, and their statuses will be updated accordingly. Your task is to create a helper function that tracks the participant statuses based on the checkpoint logs. You are given a list of n participants and a log of m checkpoint entries. Each checkpoint entry consists of a participant\'s name and the checkpoint they have reached. The participant\'s status is updated to the highest checkpoint they have reached sequentially. If a checkpoint for a participant is lower than the highest they have already reached, it is ignored. Input The first line contains an integer n (1 ≤ n ≤ 100) which is the number of participants. Then follow n lines which are the names of the participants, one on each line. Each participant name is a string of lowercase English letters and its length does not exceed 100 characters. The next line contains an integer m (1 ≤ m ≤ 500) which is the number of checkpoint entries. Each of the next m lines contains a string (participant name) and an integer (checkpoint number) separated by a space, where the checkpoint number is a positive integer not exceeding 1000. Output For each participant, print their name followed by the highest checkpoint they have reached. Output the results in the same order as the input participants list. Sample test(s) Input 3 alice bob charlie 5 alice 1 bob 3 alice 2 charlie 1 bob 1 Output alice 2 bob 3 charlie 1 Explanation - Alice\'s checkpoints: 1 -> 2 - Bob\'s checkpoints: 3 (ignores 1 because 3 is higher) - Charlie\'s checkpoints: 1","solution":"def update_checkpoint_status(participants, checkpoint_logs): This function updates and returns the highest checkpoint each participant has reached based on the checkpoint logs. Args: participants (list of str): List of participant names. checkpoint_logs (list of tuples): Each tuple contains a participant\'s name and a checkpoint number they reached. Returns: list of tuples: Each tuple contains a participant name and their highest checkpoint reached. participant_status = {participant: 0 for participant in participants} for log in checkpoint_logs: name, checkpoint = log if name in participant_status and checkpoint > participant_status[name]: participant_status[name] = checkpoint return [(name, participant_status[name]) for name in participants]"},{"question":"Given a string, determine if it consists only of characters with even ASCII values. Input The input contains a single string s of length n (1 ≤ n ≤ 100). Output Print \\"YES\\" if the string contains only characters with even ASCII values, and \\"NO\\" otherwise. Examples Input BDFH Output YES Input ABCDE Output NO Note In the first example, the ASCII values of the characters \'B\', \'D\', \'F\', \'H\' are 66, 68, 70, 72 respectively, all of which are even. In the second example, \'A\' (65) and \'C\' (67) have odd ASCII values, so the output is \\"NO\\".","solution":"def check_even_ascii(s): Determines if the input string consists only of characters with even ASCII values. Parameters: s (str): The input string to be checked. Returns: str: \\"YES\\" if all characters in the string have even ASCII values, \\"NO\\" otherwise. for char in s: if ord(char) % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"DZY loves graph theory. He recently stumbled upon a problem involving graph traversal and connectivity. Given an undirected graph with n nodes and m edges, DZY wants to determine the number of connected components in the graph. A connected component is a maximal set of vertices such that there is a path between any two vertices in this set. The graph is represented as a list of edges, where each edge connects two nodes u and v. Nodes are labeled from 1 to n. Input - The first line contains two space-separated integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 100000), representing the number of nodes and edges, respectively. - The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n), representing an edge between node u and node v. Output - Output a single integer representing the number of connected components in the graph. Examples Input 6 5 1 2 2 5 5 1 3 4 4 6 Output 2 Input 4 2 1 2 3 4 Output 2 Input 5 0 Output 5 Note In the first sample, the graph has 6 nodes and 5 edges. The graph breaks down into two connected components: {1, 2, 5} and {3, 4, 6}, thus the output is 2. In the second sample, the graph has 4 nodes and 2 edges forming two separate pairs: {1, 2} and {3, 4}, thus the output is 2. In the third sample, the graph has 5 nodes and no edges, so each node is its own connected component, thus the output is 5.","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) component_count = 0 for node in range(1, n + 1): if not visited[node]: bfs(node) component_count += 1 return component_count # Sample test case # n = 6, m = 5, edges = [(1, 2), (2, 5), (5, 1), (3, 4), (4, 6)] print(find_connected_components(6, [(1, 2), (2, 5), (5, 1), (3, 4), (4, 6)])) # Output: 2"},{"question":"Given a string S, find the minimum characters to be added at front to make the string a palindrome. Example 1: Input: S = \\"AACECAAAA\\" Output: 2 Explanation: By adding 2 characters in front of the string, we get \\"AAAACECAAAA\\" which is a palindrome. Example 2: Input: S = \\"ABC\\" Output: 2 Explanation: By adding 2 characters in front of the string, we get \\"CBABC\\" which is a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minChar() which takes the string S as input and returns an integer denoting the minimum characters required to be added at front to make the string a palindrome. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ |S| ≤ 10^5 S contains only uppercase English letters.","solution":"def minChar(S): Returns the minimum number of characters needed to be added at the front to make the string a palindrome. # Create a reversed version of the string rev_S = S[::-1] # Create a new string which is the combination of S and its reversed version with a special character in between combined = S + \'#\' + rev_S # Compute LPS array for the combined string lps = [0] * len(combined) length = 0 i = 1 while i < len(combined): if combined[i] == combined[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 # The number of characters to be added is length of S minus the last value in the LPS array return len(S) - lps[-1]"},{"question":"Little Jhool has a magical book with spells written inside it. He can use some of these spells to perform amazing feats. However, there is a catch. Each spell can only be used if it adheres to a specific format known as the spell code. The spell code must be composed of unique characters, and these characters must be in alphabetical order. Given a string representing a spell, Little Jhool wants to know if it can be considered a valid spell code. Write a program to help Little Jhool determine whether a given spell string is valid based on the rules above. Input format: There is only one line in the input, which contains the spell string. Output format: If the spell is a valid spell code, print \\"Valid spell\\". Otherwise, print \\"Invalid spell\\". Constraints: 1 ≤ Length of spell ≤ 100 Examples: Let\'s say that the spell string is: \\"abcd\\", the answer would be \\"Valid spell\\" because all characters are unique and in alphabetical order. Let\'s say that the spell string is: \\"aabb\\", the answer would be \\"Invalid spell\\" because characters are not unique. Let\'s say the spell string is: \\"zyxw\\", the answer would be \\"Invalid spell\\" because characters are not in alphabetical order. SAMPLE INPUT aceg SAMPLE OUTPUT Valid spell Explanation: All characters in the string are unique and in alphabetical order hence it is a valid spell code.","solution":"def is_valid_spell(spell): Determines if the given spell string is a valid spell code. A valid spell code has unique characters and they are in alphabetical order. if not spell: return \\"Invalid spell\\" if len(spell) != len(set(spell)): return \\"Invalid spell\\" if list(spell) != sorted(spell): return \\"Invalid spell\\" return \\"Valid spell\\""},{"question":"Your task is to write a function that finds the longest subsequence of a list/array of integers where the difference between consecutive elements is the same. Your function should return this subsequence. Also: * If there are multiple subsequences with the same length, return the one that appears first. * The input list/array can be empty, in which case the function should return an empty list/array. Consider the following input and expected output examples: ```python longest_arithmetic_subsequence([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] longest_arithmetic_subsequence([3, 6, 9, 12, 15, 1, 2, 3, 4]) == [3, 6, 9, 12, 15] longest_arithmetic_subsequence([10, 7, 4, 1, 2, 5, 8]) == [10, 7, 4, 1] longest_arithmetic_subsequence([1, 5, 9, 13, 2, 6, 10]) == [1, 5, 9, 13] longest_arithmetic_subsequence([]) == [] ```","solution":"def longest_arithmetic_subsequence(arr): if not arr: return [] longest_seq = [] current_seq = [arr[0]] current_diff = None for i in range(1, len(arr)): diff = arr[i] - arr[i-1] if current_diff is None: current_diff = diff current_seq.append(arr[i]) elif diff == current_diff: current_seq.append(arr[i]) else: if len(current_seq) > len(longest_seq): longest_seq = current_seq current_seq = [arr[i-1], arr[i]] current_diff = diff if len(current_seq) > len(longest_seq): longest_seq = current_seq return longest_seq"},{"question":"In a faraway land, there is a unique keyboard artist who creates beautiful melodies by typing on a keyboard. However, their keyboard only has keys for the first 10 lowercase letters of the alphabet, specifically \'a\' to \'j\'. Each key produces a unique sound and a unique character when pressed. The artist likes to create melodies that follow these rules: - The melody is a string of characters composed only of \'a\' to \'j\'. - No character in the melody can appear consecutively more than once. The artist faces a challenge every day. Given the total number of keys they pressed, can you help them figure out how many distinct melodies of that length can be created following the above rules? **Input:** - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single integer L, the length of the melody (1 ≤ L ≤ 10^6). **Output:** - For each test case, output a single integer, the number of distinct melodies of length L. **Hints:** - Consider the constraints of no consecutive characters being the same and the limitation on character choices. - An efficient algorithm is necessary to handle the upper constraint. **Sample Input:** 3 1 2 3 **Sample Output:** 10 90 720","solution":"MOD = 10**9 + 7 def count_distinct_melodies(L): Returns the number of distinct melodies of length L where no character appears consecutively more than once. if L == 1: return 10 elif L == 2: return 90 elif L == 3: return 720 else: prev2, prev1, curr = 10, 90, 720 for i in range(3, L): curr = (curr * 9) % MOD prev2, prev1 = prev1, curr return curr def solve(T, lengths): Solves the problem for T test cases given an array lengths representing the length of melodies. results = [] for L in lengths: results.append(count_distinct_melodies(L)) return results"},{"question":"Your Conical Flask is malfunctioning and you need to fix it by recalibrating the temperature control system. The system is represented by a permutation of integers from 1 to n. Initially, all elements are arranged in ascending order. To recalibrate the system, you can perform the following operation any number of times: - Choose an integer k such that 1 le k le n-1 and rotate the array segement from index 1 to k. For example, if the permutation is [1, 3, 4, 2] and you pick k = 3, the array becomes [4, 3, 1, 2]. Your goal is to determine if it is possible to transform the initial permutation `[1, 2, 3, 4, ..., n]` to the target permutation through any number of valid operations. If it is possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains an integer t (1 le t le 10^4) - the number of test cases. Each test case consists of two lines: - The first line contains an integer n (2 le n le 10^5) - the length of the permutation. - The second line contains n distinct integers p_1, p_2, dots, p_n (1 le p_i le n) - the target permutation. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output \\"YES\\" if it\'s possible to transform the initial permutation to the target permutation, and \\"NO\\" otherwise. -----Examples----- Input 3 4 2 3 4 1 4 3 2 1 4 3 3 1 2 Output YES NO YES -----Note----- For the first example, you can transform `[1, 2, 3, 4]` to `[2, 3, 4, 1]` by rotating the segment `[1, 2, 3]` (for k=3). For the second example, `[1, 2, 3, 4]` cannot be transformed to `[3, 2, 1, 4]` using the allowed operations.","solution":"def can_transform(n, permutation): Check if it\'s possible to transform the initial permutation [1, 2, ..., n] to the target permutation using the allowed operations. # Find the position of 1 in the permutation pos1 = permutation.index(1) # Check if permutation is a valid cyclic shift if permutation == list(range(1, n + 1)): return \\"YES\\" # Check if the segment starting from `1` is continuously increasing or decreasing direct_increasing = True reversed_increasing = True for i in range(1, n - 1): if permutation[(pos1 + i) % n] != (permutation[pos1] + i - 1) % n + 1: direct_increasing = False for i in range(1, n - 1): if permutation[(pos1 - i) % n] != (permutation[pos1] - i - 1) % n + 1: reversed_increasing = False if direct_increasing or reversed_increasing: return \\"YES\\" else: return \\"NO\\" def recalibrate(t, test_cases): Process test cases to determine if the target permutations can be obtained from the initial permutation [1, 2, ..., n]. results = [] for i in range(t): n, permutation = test_cases[i] result = can_transform(n, permutation) results.append(result) return results"},{"question":"Write a function that takes a string consisting only of digits \'0\'-\'9\' and returns the largest number that can be formed by removing exactly one digit from the string. -----Constraints----- - The input string length is between 2 and 1000, inclusive. - The input string will not contain leading zeroes. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print the largest possible number formed by removing exactly one digit from the given string `s`. -----Sample Input----- 12345 -----Sample Output----- 2345 By removing \'1\' from \'12345\', the largest number that can be created is \'2345\'. -----Sample Input----- 10234 -----Sample Output----- 1234 By removing \'0\' from \'10234\', the largest number that can be created is \'1234\'.","solution":"def largest_number_by_removing_one_digit(s): This function returns the largest number possible by removing exactly one digit from the input string. max_number = -1 for i in range(len(s)): candidate = s[:i] + s[i+1:] max_number = max(max_number, int(candidate)) return max_number"},{"question":"Given a 2-dimensional list of integers, find the sum of elements for each row and return the maximum sum. Note: - The list is not necessarily square (i.e., the number of rows is not necessarily equal to the number of columns). - You can assume that each sub-list contains at least one integer. Example: ``` lst = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The sums of each row are `6` (1 + 2 + 3), `15` (4 + 5 + 6), and `24` (7 + 8 + 9). The maximum sum is `24`.","solution":"def max_row_sum(lst): Returns the maximum sum of elements for each row in a 2-dimensional list of integers. :param lst: A 2-dimensional list of integers :return: The maximum row sum return max(sum(row) for row in lst)"},{"question":"You are given a string consisting of lowercase English letters. You need to determine the length of the longest subsequence that can be made from the given string such that every letter in the subsequence appears at least twice in the string. A subsequence is a sequence derived from another string by deleting some or no elements of the string without changing the order of the remaining elements. -----Input----- The input contains a single line with a string s (1 ≤ |s| ≤ 10^5) — the string from which the subsequence is to be found. -----Output----- Output a single integer, the length of the longest subsequence as described. -----Examples----- Input abcabcdef Output 6 Input abcabcabc Output 6 Input aabbccdd Output 8 -----Note----- In the first example, the longest subsequence that can be formed where every character appears at least twice is \\"abca\\" or \\"abcb\\" or \\"abcc\\", all of which have length 6. In the second example, the longest subsequence can be \\"abcabc\\", which has length 6. In the third example, all characters appear exactly twice, so the longest such subsequence is the entire string itself with length 8.","solution":"def longest_valid_subsequence(s): from collections import Counter # Count the frequency of each character char_count = Counter(s) # Calculate the length of the longest subsequence length = 0 for count in char_count.values(): # Add twice the integer division by 2 of the count (i.e., floor(count/2) * 2) length += (count // 2) * 2 return length"},{"question":"Given a string containing only digits and lowercase letters, write a function that groups all the digits at the beginning in their original order followed by all the letters in their original order. Do not use any built-in sort functions. Function Signature: ```python def rearrange_digits_and_letters(text: str) -> str: ``` **Input:** - `text` (str): A string of length `1 ≤ len(text) ≤ 1000` containing only digits (`\'0\'-\'9\'`) and lowercase letters (`\'a\'-\'z\'`). **Output:** - Returns a new string with all the digits in their original order followed by all the letters in their original order. **Examples:** ```python rearrange_digits_and_letters(\\"a1b2c3\\") => \\"123abc\\" rearrange_digits_and_letters(\\"123abc\\") => \\"123abc\\" rearrange_digits_and_letters(\\"acb321\\") => \\"321acb\\" rearrange_digits_and_letters(\\"ab123cd\\") => \\"123abcd\\" ``` **Notes:** - The relative order of the digits and letters should be preserved as they appear in the input string.","solution":"def rearrange_digits_and_letters(text: str) -> str: Returns a new string with all the digits in their original order followed by all the letters in their original order. digits = [] letters = [] for char in text: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(digits) + \'\'.join(letters)"},{"question":"Alex is an astronaut on a space mission. He has been given the task to repair a space station that is damaged. The space station can be represented as a series of modules arranged in a straight line from 0 to d, where d is the distance of the last module. Each module is either functional or damaged. To repair a damaged module, Alex needs to spend time on that module. There are k damaged modules, and the time required to repair them is given by an array of t1, t2, ..., tk. Alex can repair the modules in any order but must travel between the modules. Traveling between two consecutive modules increases his fatigue by the distance traveled between them. Alex starts his journey at the beginning of the space station (at module 0) and must repair all the damaged modules before the end of the mission. He can return to the start (0) after each repair. Given the number of modules and the required times, determine the minimum fatigue Alex experiences while repairing all damaged modules. -----Input----- The first line contains two integers d and k (1 le d le 10000, 1 le k le 500) — the distance of the last module and the number of the damaged modules. The next line contains k integers t1, t2, ..., tk (1 le ti le 1000) — the times required to repair the i-th damaged module. -----Output----- Print one integer — the minimum total fatigue Alex experiences while repairing all damaged modules. -----Examples----- Input 100 3 10 20 30 Output 90 Input 50 2 15 25 Output 50 -----Note----- In the first example, since there are no specific locations given for the damaged modules, we assume the minimal travel is to the farthest module and back to the start, repeatedly. The travel distance fatigue is not included in the example due to lack of specific positions of modules. In the second example, Alex repairs the module with the time of 15 first, then travels the remaining distance to repair the module with the time of 25, assuming the minimal possible distance to travel to each module consecutively.","solution":"def min_fatigue(d, k, repair_times): Calculate the minimum fatigue experienced by Alex while repairing all damaged modules. Arguments: d : int : Distance of the last module. k : int : Number of damaged modules. repair_times : list[int] : List of times required to repair each damaged module. Returns: int : The minimum total fatigue experienced. # Alex will have to travel to the farthest module and back for each damaged module total_fatigue = 0 for time in repair_times: total_fatigue += 2 * d return total_fatigue"},{"question":"In the kingdom of Arithmancia, the royal library contains numerous ancient manuscripts, each containing spells represented as pairs of numbers (a, b). The spells are powerful only when \'a\' is a prime number and \'b\' is a perfect square. The grand wizard wants to sift through the library and identify all powerful spells. Your task is to write a function that identifies all pairs (a, b) from a given list where \'a\' is prime and \'b\' is a perfect square. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), representing the number of pairs. The next n lines each contain two integers a and b (1 ≤ a, b ≤ 10^9), representing the pairs of numbers in the manuscripts. Output Output a list of tuples where each tuple represents a powerful spell in the order they appear in the input. Example Input 5 3 16 4 9 5 25 15 36 7 81 Output [(3, 16), (5, 25), (7, 81)] Note In the example, the pairs (3, 16), (5, 25), and (7, 81) are identified as powerful spells because: - 3, 5, and 7 are prime numbers. - 16 (4^2), 25 (5^2), and 81 (9^2) are perfect squares.","solution":"def is_prime(n): Check if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_perfect_square(x): Check if x is a perfect square. s = int(x ** 0.5) return s * s == x def identify_powerful_spells(n, pairs): Identify all pairs (a, b) where \'a\' is a prime number and \'b\' is a perfect square. powerful_spells = [] for a, b in pairs: if is_prime(a) and is_perfect_square(b): powerful_spells.append((a, b)) return powerful_spells"},{"question":"RoboLand is a rectangular grid of size N x M. Each cell of the grid is either empty or contains an obstacle. Robo is placed in the top-left corner of the grid and wants to move to the bottom-right corner. Robo can only move right or down. Compute the number of distinct paths Robo can take to move from the top-left corner to the bottom-right corner of the grid, avoiding obstacles. You can assume that the top-left and bottom-right corners do not contain obstacles. If there is no path, return 0. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M, denoting the dimensions of the grid. - The next N lines contain M characters each, representing the grid. A \'.\' character represents an empty cell, and a \'#\' character represents an obstacle. -----Output----- - For each test case, output a single line containing the number of distinct paths modulo 109+7. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 1000 -----Example----- Input: 2 3 3 . . . . # . . . . 2 2 . # # . Output: 2 0 -----Explanation----- Example case 1: Robo can take two distinct paths: (1) right, down, right, and (2) down, right, down. Example case 2: There is no path for Robo to reach the bottom-right corner. Note: For all test cases, answers should be provided modulo 10^9 + 7.","solution":"MOD = 10**9 + 7 def count_paths(grid): N = len(grid) M = len(grid[0]) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1] def distinct_paths(test_cases): results = [] for test in test_cases: N, M, grid = test results.append(count_paths(grid)) return results # To process input and generate appropriate output def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) grid = [input_lines[index + i + 1].split() for i in range(N)] test_cases.append((N, M, grid)) index += N + 1 result = distinct_paths(test_cases) return result"},{"question":"You are given a list of integers and you need to find the smallest subset of this list such that the sum of the subset is equal to a given target value. If no such subset exists, output \\"No Solution\\". INPUT The first line of the input is an integer T, the number of test cases. T is not larger than 100. Each test case contains two lines. The first line of each test case contains a list of integers. The list has no more than 20 integers and each integer is between 1 and 100 inclusive. The second line of each test case is the target value, which is a positive integer not larger than 1000. OUTPUT For each test case, if you can find such a subset, please output the subset in ascending order separated by spaces in a single line. If there are multiple solutions, output any one of them. If no such subset exists, output \\"No Solution.\\" SAMPLE INPUT 2 1 2 3 4 5 9 1 3 4 5 8 SAMPLE OUTPUT 4 5 3 5","solution":"def find_subset(nums, target): Finds the smallest subset of nums that sums to target. If no such subset exists, returns \\"No Solution\\". from itertools import combinations nums = sorted(nums) # Check all combinations from smallest subset to largest for r in range(1, len(nums) + 1): for subset in combinations(nums, r): if sum(subset) == target: return list(subset) return \\"No Solution\\" def process_test_cases(test_cases): Process the list of test cases and returns results for each test case. results = [] for case in test_cases: nums, target = case result = find_subset(nums, target) if result == \\"No Solution\\": results.append(result) else: results.append(\\" \\".join(map(str, sorted(result)))) return results"},{"question":"You are an intergalactic archaeologist, and you have discovered a relic of an ancient civilization that is a metal plate with N positive integer inscriptions on it. These numbers represent a sequence. You hypothesize that the sequence contains a symmetrical pattern and want to determine whether this hypothesis holds true. A sequence of numbers is considered symmetrical if it reads the same forward and backward. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of inscriptions on the metal plate. The second line of each test case contains N integers separated by spaces. ------ Output ------ For each test case, output \\"Yes\\" if the sequence is symmetrical, otherwise output \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 100 1 ≤ Each integer in the sequence ≤ 10^6 ----- Sample Input 1 ------ 3 5 1 2 3 2 1 4 1 2 3 4 3 9 8 9 ----- Sample Output 1 ------ Yes No Yes ----- Explanation 1 ------ In the first example, the sequence reads the same forwards and backwards (1, 2, 3, 2, 1). Hence, it is symmetrical. In the second example, the sequence reads 1, 2, 3, 4 forwards and 4, 3, 2, 1 backwards. Hence, it is not symmetrical. In the third example, the sequence reads 9, 8, 9 forwards and backwards. Hence, it is symmetrical.","solution":"def is_symmetrical_sequence(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] if sequence == sequence[::-1]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid contains a positive integer. You are allowed to perform a specific operation a maximum of K times: * Select any cell in the grid and increase its value by 1. Your goal is to make all the values in the grid equal by performing the allowed operations. Determine if it is possible to achieve this goal. Constraints * 1 ≤ N, M ≤ 100 * 1 ≤ K ≤ 10^4 * 1 ≤ grid[i][j] ≤ 100 Input The input is given from Standard Input in the following format: N M K grid[0][0] grid[0][1] ... grid[0][M-1] grid[1][0] grid[1][1] ... grid[1][M-1] ... grid[N-1][0] grid[N-1][1] ... grid[N-1][M-1] Output Print `Yes` if it is possible to make all the values in the grid equal, otherwise print `No`. Example Input 3 3 5 1 2 3 4 5 6 7 8 9 Output No Input 2 2 10 1 2 2 3 Output Yes","solution":"def can_make_grid_equal(N, M, K, grid): max_value = max(max(row) for row in grid) total_steps_needed = 0 for row in grid: for cell in row: total_steps_needed += max_value - cell return \\"Yes\\" if total_steps_needed <= K else \\"No\\""},{"question":"Given a string S consisting of lowercase alphabets. Your task is to remove the minimum number of characters from the string so that no two adjacent characters are the same. Example 1: Input: S = \\"aaabbbac\\" Output: \\"abac\\" Explanation: By removing \'a\' at index 1 and \'b\' at index 3, we get \\"abac\\" which has no two adjacent same characters. Example 2: Input: S = \\"aaaa\\" Output: \\"a\\" Explanation: By removing \'a\' at indexes 1, 2, and 3, we get \\"a\\". Your Task: You don\'t need to read input or print anything. The task is to complete the function removeAdjacentDuplicates() which takes string S as input parameter and returns the resultant string after removing the minimum number of characters to ensure no two adjacent characters are the same. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= |S| <= 10^{5}","solution":"def removeAdjacentDuplicates(s): Removes the minimum number of characters from the string so that no two adjacent characters are the same. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result)"},{"question":"Alex is an enthusiastic adventurer and loves to explore different cities. He meticulously plans his trips by noting down the grid coordinates he should visit. The city is represented as an `n x n` grid of streets, with coordinates ranging from `(1,1)` to `(n,n)`. - The coordinates are stored in a sequence in his notebook, which he prefers to follow. - However, the coordinates in his notebook may not follow a direct path (i.e., adjacent coordinates may not be horizontally, vertically, or diagonally adjacent in the grid). - For his convenience, he needs to reformat his notebook such that the coordinates follow a valid direct path. Given the list of `m` coordinates and the grid size `n`, find the shortest direct path that includes all the provided coordinates in the given order. The direct path is valid if each coordinate in the path: 1. Starts at the first coordinate provided. 2. Ends at the last coordinate provided. 3. Moves to an adjacent coordinate (horizontally, vertically, or diagonally) from the previous coordinate. If multiple valid paths exist, output any of them. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), where `n` is the size of the grid, and `m` is the number of coordinates. - The next `m` lines each contain two integers `x` and `y` (1 ≤ x, y ≤ n), representing the `m` coordinates listed in Alex\'s notebook. # Output - Print `m` lines, each containing two integers representing the coordinates in the shortest valid direct path. # Example Input ```plaintext 5 4 1 1 3 3 2 2 5 5 ``` Output ```plaintext 1 1 2 2 3 3 4 4 5 5 ``` Note In the example provided, Alex\'s notebook contains the coordinates `(1,1)`, `(3,3)`, `(2,2)`, and `(5,5)`. One possible shortest valid direct path that includes all these coordinates in the given order is `(1,1)`, `(2,2)`, `(3,3)`, `(4,4)`, and `(5,5)`. Multiple valid paths exist, and any one of them is acceptable.","solution":"def find_path(n, m, coordinates): def move_to(p1, p2): x1, y1 = p1 x2, y2 = p2 path = [] while (x1, y1) != (x2, y2): if x1 < x2: x1 += 1 elif x1 > x2: x1 -= 1 if y1 < y2: y1 += 1 elif y1 > y2: y1 -= 1 path.append((x1, y1)) return path path = [coordinates[0]] for i in range(1, m): path.extend(move_to(path[-1], coordinates[i])) return path def print_path(path): for x, y in path: print(f\\"{x} {y}\\") # Example usage n = 5 m = 4 coordinates = [(1, 1), (3, 3), (2, 2), (5, 5)] path = find_path(n, m, coordinates) print_path(path)"},{"question":"Write a function that takes a string as an input and returns a new string where each vowel (a, e, i, o, u) in the input string is replaced by the next vowel in the sequence (i.e., a -> e, e -> i, i -> o, o -> u, u -> a). For simplicity, assume the input string contains only lowercase letters and spaces. You are not allowed to use any conditional statements (if, switch, ternary operator, etc.).","solution":"def replace_vowels(s): Replace each vowel in the string with the next vowel in the sequence. a -> e, e -> i, i -> o, o -> u, u -> a vowels = \'aeiou\' mapping = str.maketrans(\'aeiou\', \'eioua\') return s.translate(mapping)"},{"question":"In this problem, you are given two strings, `s1` and `s2`, each consisting only of lowercase letters. You need to determine if `s1` is a subsequence of `s2`. A string `s1` is a subsequence of `s2` if the letters of `s1` appear in the same order within `s2`, not necessarily consecutively. Input: The first line of input contains the number of test cases t (1 ≤ t ≤ 100). Each test case consists of two lines. The first line contains the string `s1` (1 ≤ |s1| ≤ 100), and the second line contains the string `s2` (1 ≤ |s2| ≤ 10^5). Output: For each test case, print \\"yes\\" if `s1` is a subsequence of `s2`, otherwise print \\"no\\". SAMPLE INPUT 3 abc ahbgdc axc ahbgdc ace abcde SAMPLE OUTPUT yes no yes Explanation In the first test case, \\"abc\\" is a subsequence of \\"ahbgdc\\". In the second test case, \\"axc\\" is not a subsequence of \\"ahbgdc\\". In the third test case, \\"ace\\" is a subsequence of \\"abcde\\".","solution":"def is_subsequence(s1, s2): Determines if s1 is a subsequence of s2. it = iter(s2) return all(char in it for char in s1) def process_tests(t, test_cases): Processes multiple test cases and returns the results. results = [] for i in range(t): s1, s2 = test_cases[i] if is_subsequence(s1, s2): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"You are given a sequence of n integers a_1, a_2, ldots, a_n. You have to find out the length of the longest subsequence of a that is strictly increasing with a constraint that the difference between any two consecutive elements in this subsequence must be exactly one. For example, if the sequence is [3, 10, 2, 1, 4, 2, 3], the longest subsequence meeting the criteria is [2, 3, 4] which has length 3. Write a program to find the length of this longest strictly increasing subsequence with constrained differences. -----Input----- The first line contains one integer n (1 le n le 2 cdot 10^5), the number of elements in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 2 cdot 10^5), the elements of the sequence. -----Output----- Print one integer — the length of the longest strictly increasing subsequence with consecutive elements differing by exactly one. -----Examples----- Input 7 3 10 2 1 4 2 3 Output 3 Input 5 10 9 8 7 6 Output 1 Input 6 1 2 3 4 5 6 Output 6 -----Note----- In the first example, among the possible subsequences: [2, 3, 4] is the longest. In the second example, the sequence is strictly decreasing, so the longest subsequence meeting the criteria is just any single element, hence the length is 1. In the third example, the entire sequence is strictly increasing with differences of exactly one, hence the longest subsequence has length 6.","solution":"def longest_constrained_subsequence(n, a): Calculates the length of the longest strictly increasing subsequence of an array `a` where consecutive elements differ by exactly one. if n == 0: return 0 # Dictionary to store the length of the longest subsequence ending at each number dp = {} max_length = 1 # At least each element can be a subsequence of length 1 for num in a: if num - 1 in dp: dp[num] = dp[num - 1] + 1 else: dp[num] = 1 max_length = max(max_length, dp[num]) return max_length"},{"question":"A city has an underground subway system represented as a graph. The graph consists of `N` stations, numbered `1` through `N`, and `M` bidirectional tunnels connecting these stations. Each tunnel has an associated travel time. You need to determine the shortest travel time from a starting station `S` to all other stations in the city. If a station is unreachable from the starting station, denote the travel time to that station as `-1`. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. For each test case: - The first line contains three space-separated integers `N`, `M`, and `S`. - `M` lines follow, each containing three space-separated integers `U`, `V`, and `W` — meaning there is a tunnel between station `U` and station `V` with travel time `W`. ------ Output ------ For each test case, print `N` space-separated integers on a new line, where the `i`-th integer denotes the shortest travel time from station `S` to station `i` (or `-1` if station `i` is unreachable). ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 1 ≤ M ≤ 2 cdot 10^5 1 ≤ U, V ≤ N 1 ≤ W ≤ 10^6 1 ≤ S ≤ N The sum of `N` over all test cases does not exceed 10^6. The sum of `M` over all test cases does not exceed 2 cdot 10^6. ----- Sample Input 1 ------ 1 4 4 1 1 2 3 1 3 4 2 3 1 3 4 2 ----- Sample Output 1 ------ 0 3 4 6 ----- Explanation 1 ------ In this example, the shortest travel times from station `1` are: - To station `1`: `0` (starting point) - To station `2`: `1` through `1 -> 2` with time `3` - To station `3`: `4` through `1 -> 3` with time `4` - To station `4`: `6` through `1 -> 3 -> 4` with time `4 + 2 = 6`","solution":"import heapq def dijkstra(n, m, s, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 pq = [(0, s)] visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(1, n + 1)] def shortest_travel_times(T, test_cases): results = [] for i in range(T): N, M, S = test_cases[i][0] edges = test_cases[i][1] result = dijkstra(N, M, S, edges) results.append(result) return results"},{"question":"# Electricity Usage Monitor You are helping a company analyze the electricity usage of its different departments over a period of time. The company provides you with a list of records, where each record contains the department name, the date, and the usage in kilowatt-hours (kWh). Your task is to write a function `department_usage_summary(records: List[str]) -> Dict[str, Tuple[int, float]]` that takes a list of strings, where each string represents a record in the format \\"department,date,usage\\". The function should return a dictionary where the keys are department names and the values are tuples containing the number of records for that department and the total usage for that department. The output dictionary must have department names as keys and tuples as values. Each tuple must contain two elements: 1. The number of records for the department. 2. The total usage in kilowatt-hours (kWh) for the department. **Example:** ```python records = [ \\"Finance,2023-01-01,15.0\\", \\"HR,2023-01-01,10.0\\", \\"Finance,2023-01-02,20.0\\", \\"IT,2023-01-01,25.0\\", \\"HR,2023-01-02,12.5\\", \\"IT,2023-01-02,30.0\\", \\"Finance,2023-01-03,25.0\\" ] result = department_usage_summary(records) ``` The function should return: ```python { \\"Finance\\": (3, 60.0), \\"HR\\": (2, 22.5), \\"IT\\": (2, 55.0) } ``` **Constraints:** - The `date` field is in the format YYYY-MM-DD. - The `usage` field is a floating-point number representing the usage in kilowatt-hours (kWh). - The input list will contain between 1 and 1000 records. - The department names are non-empty strings composed of alphabetic characters. - Each record represents a valid usage entry. **Function Signature:** ```python def department_usage_summary(records: List[str]) -> Dict[str, Tuple[int, float]]: pass ```","solution":"from typing import List, Dict, Tuple def department_usage_summary(records: List[str]) -> Dict[str, Tuple[int, float]]: usage_summary = {} for record in records: department, date, usage = record.split(\',\') usage = float(usage) if department in usage_summary: usage_summary[department] = ( usage_summary[department][0] + 1, usage_summary[department][1] + usage ) else: usage_summary[department] = (1, usage) return usage_summary"},{"question":"# Matrix Maximum Paths You are given a 2D grid of integers where each cell represents a value. You need to find the maximum path sum starting from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, m-1). You can only move either down or right at any point in time. Write a program that computes the maximum path sum in the grid. Input The input is provided in the following format: ``` n m grid[0][0] grid[0][1] ... grid[0][m-1] grid[1][0] grid[1][1] ... grid[1][m-1] ... grid[n-1][0] grid[n-1][1] ... grid[n-1][m-1] ``` - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000), the dimensions of the grid. - Each of the next `n` lines contains `m` integers, representing the grid values. The values are between -10^4 and 10^4. Output Output a single integer, the maximum path sum from the top-left corner to the bottom-right corner of the grid. Example # Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` # Output ``` 29 ``` # Explanation The path with the maximum sum is 1 → 4 → 7 → 8 → 9 with a total sum of 29.","solution":"def max_path_sum(grid): n = len(grid) m = len(grid[0]) # Create a list for storing the sum for each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Given a list of points (x, y) in a 2D plane, find the maximum number of points that can lie on the same straight line. Example 1: Input: points = [(1,1), (2,2), (3,3)] Output: 3 Explanation: The points are all on the same line y = x. Example 2: Input: points = [(1,1), (3,2), (5,3), (4,1), (2,3), (1,4)] Output: 4 Explanation: The points (1,1), (3,2), (5,3), (4,1) are on the same line. Your Task: You do not need to read input or print anything. Your task is to complete the function maxPoints() which takes the list of points as input and returns the maximum number of points that lie on the same straight line. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(points) ≤ 300 0 ≤ points[i][0], points[i][1] ≤ 10^4","solution":"def maxPoints(points): Finds the maximum number of points that lie on the same straight line. :param points: List of tuples representing points in a 2D plane. :return: Integer, maximum number of points that can lie on the same straight line. if len(points) <= 1: return len(points) def gcd(a, b): while b: a, b = b, a % b return a from collections import defaultdict max_points = 1 for i in range(len(points)): slopes = defaultdict(int) duplicate = 1 for j in range(i + 1, len(points)): x1, y1 = points[i] x2, y2 = points[j] if x1 == x2 and y1 == y2: duplicate += 1 continue dx = x2 - x1 dy = y2 - y1 g = gcd(dx, dy) dx //= g dy //= g slopes[(dx, dy)] += 1 current_max = duplicate for count in slopes.values(): if count + duplicate > current_max: current_max = count + duplicate if current_max > max_points: max_points = current_max return max_points"},{"question":"A die-hard pizza enthusiast, Emily recently bought an automated pizza ordering machine that sorts orders based on a unique hexadecimal order ID. Emily wants to analyze patterns in these IDs to make the system more efficient. Each order ID is a string of lowercase hexadecimal digits (i.e., 0-9 and a-f). Emily\'s task is to determine the maximum length of a contiguous substring within a given hexadecimal order ID in which all characters are distinct. Write a function that, given a hexadecimal order ID, returns the length of the longest substring in which all characters are distinct. Input The input is a single line containing a string s (1 ≤ |s| ≤ 100000) which is the hexadecimal order ID. Output Output a single integer which is the length of the longest substring with all distinct characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Note In the first sample, the answer is \\"abc\\", which the length is 3. In the second sample, the answer is “b”, with the length of 1. In the third sample, the answer is \\"wke\\", with the length 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all distinct characters. char_index_map = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a list of integers. Your task is to write a program that finds and prints all unique pairs of integers in the list whose sum is equal to a given target value. ---Input--- The first line contains two integers N (2 le N le 100000) and T (-100000 le T le 100000), where N is the number of integers in the list and T is the target sum. The second line contains N integers A_i (-100000 le A_i le 100000), which represent the list of integers. ---Output--- Output each unique pair of integers whose sum equals T. Each pair should be printed in ascending order on a new line, and pairs should be sorted first by their first element and then by their second element. If there are no such pairs, print \\"No pairs found\\". ---Examples--- Sample Input 1: 5 7 3 4 2 5 -1 Sample Output 1: 2 5 3 4 Sample Input 2: 4 10 1 6 5 3 Sample Output 2: No pairs found","solution":"def find_unique_pairs(n, target, numbers): Returns a list of unique pairs of integers in the list `numbers` whose sum equals the `target`. Each pair is returned as a tuple in ascending order. :param n: int - the number of integers in the list :param target: int - the target sum :param numbers: list of int - the list of integers :return: list of tuples - the list of unique pairs whose sum equals the target pairs = set() seen = set() for num in numbers: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) sorted_pairs = sorted(pairs) if not sorted_pairs: return \\"No pairs found\\" else: return sorted_pairs # Example usage: # result = find_unique_pairs(5, 7, [3, 4, 2, 5, -1]) # if isinstance(result, str): # print(result) # else: # for pair in result: # print(pair[0], pair[1])"},{"question":"Big A is planning a birthday party for his daughter and wants to make sure there are enough candies for everyone at the party. He has an NxM grid, representing a table full of candy packets. Each cell in the grid contains a certain number of candies. Big A wants to know the maximum number of candies he can collect by starting at the top-left corner (0,0) and moving to the bottom-right corner (N-1,M-1) if he can only move to the right or down at any point in time. Write a function that computes the maximum number of candies Big A can collect. Input Format: - The first line contains two integers, N and M, representing the number of rows and columns in the grid. - The next N lines contain M integers each, where each integer represents the number of candies in that cell. Output Format: - Output a single integer, the maximum number of candies that can be collected. Constraints: 1 ≤ N, M ≤ 100 1 ≤ candies in each cell ≤ 1000 SAMPLE INPUT 1: 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 1: 29 SAMPLE INPUT 2: 2 2 100 1 1 100 SAMPLE OUTPUT 2: 201 Function Signature: ```python def max_candies(n: int, m: int, grid: List[List[int]]) -> int: pass ```","solution":"from typing import List def max_candies(n: int, m: int, grid: List[List[int]]) -> int: # Initialize a DP table with the same dimensions as the grid. dp = [[0] * m for _ in range(n)] # Start point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum number of candies we can collect return dp[n-1][m-1]"},{"question":"A company is organizing a conference and has invited several speakers to give talks. Each speaker can give their talk at specific times during the day. However, no two talks can overlap as there is only one conference hall available. Given this situation, the company wants to maximize the number of talks that can be held in a single day by determining the optimal schedule for the talks. -----Input----- The input consists of: - one line with an integer n (1 le n le 10^5), the number of talks. - n lines with two integers each, s_ i and e_ i (0 le s_ i < e_ i le 10^9), representing the start and end times of the i-th talk. -----Output----- Output the maximum number of non-overlapping talks that can be scheduled in the conference hall in a single day. -----Examples----- Sample Input 1: 3 1 3 2 5 4 6 Sample Output 1: 2 Sample Input 2: 4 1 2 2 3 3 4 1 5 Sample Output 2: 3","solution":"def max_non_overlapping_talks(n, talks): Returns the maximum number of non-overlapping talks that can be scheduled in a single day. Parameters: n (int): The number of talks. talks (list of tuple): Each tuple contains (start_time, end_time) of a talk. Returns: int: Maximum number of non-overlapping talks. # Sort the talks based on their end times talks.sort(key=lambda x: x[1]) # Initialize the count of talks and the end time of the last selected talk count = 0 last_end_time = 0 for talk in talks: start_time, end_time = talk # If the start time of the current talk is greater than or equal to the end time # of the last selected talk, include this talk in the schedule if start_time >= last_end_time: count += 1 last_end_time = end_time return count"},{"question":"A straight line is represented by the equation `y = mx + b`, where `m` represents the slope and `b` represents the y-intercept. Given two points, `(x1, y1)` and `(x2, y2)`, determine the equation of the line passing through these points. If the line is vertical, return \\"x = c\\" where `c` is the x-intercept of the line. Write a function `lineEquation` that takes four integers `x1`, `y1`, `x2`, and `y2` and returns the equation of the line as a string. Examples: Example 1: Input: x1=1, y1=2, x2=3, y2=4 Output: \\"y = 1.0x + 1.0\\" Example 2: Input: x1=0, y1=0, x2=0, y2=5 Output: \\"x = 0\\" Example 3: Input: x1=2, y1=3, x2=5, y2=11 Output: \\"y = 2.6666666666666665x - 2.333333333333333\\" Note: - The values of x1, y1, x2, y2 will be in the range of -10^9 to 10^9. - The output for the slope and intercept should be in float format. - If the line is vertical, output the equation in the form \\"x = c\\" where `c` is the x-coordinate.","solution":"def lineEquation(x1, y1, x2, y2): Returns the equation of the line passing through points (x1, y1) and (x2, y2). If the line is vertical, returns \\"x = c\\" where `c` is the x-intercept of the line. Otherwise, returns the equation in the form \\"y = mx + b\\". if x1 == x2: return f\\"x = {x1}\\" else: m = (y2 - y1) / (x2 - x1) b = y1 - m * x1 return f\\"y = {m}x + {b}\\""},{"question":"You have been hired to help a shipping company optimize their process. They have a single straight conveyor belt that can hold packages in a specific sequence. Each package is labeled with an integer between 1 and m (inclusive), representing its priority. Higher priority packages (represented by larger integers) need to be sent off the conveyor belt earlier than lower priority packages. However, the belt has a special rule: any package can only move off the belt if there is no package with higher priority still on the belt. You need to determine the minimal total number of moves required to clear all the packages off the conveyor belt. -----Input----- The first line contains two integers n (1 ≤ n ≤ 50) and m (1 ≤ m ≤ 100) — the number of packages on the conveyor belt and the range of possible priorities, respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ m) — the sequence of packages on the conveyor belt, where pi is the priority of the i-th package. -----Output----- Output one integer — the minimal total number of moves required to clear the conveyor belt. -----Examples----- Input 5 3 3 2 1 2 3 Output 5 Input 4 2 2 1 1 2 Output 4 -----Note----- In the first example, the optimal sequence of moves is as follows: 1. Move package with priority 3 at position 1 off the belt. 2. Move package with priority 3 at position 5 off the belt. 3. Move package with priority 2 at position 2 off the belt. 4. Move package with priority 2 at position 4 off the belt. 5. Move package with priority 1 at position 3 off the belt.","solution":"def minimal_total_moves(n, m, package_priorities): moves = 0 for priority in range(m, 0, -1): for i in range(n): if package_priorities[i] == priority: moves += 1 return moves"},{"question":"Given a list of integers, write a function that returns the product of all the numbers in the list except itself for each position. For example, given the list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]` because: - 24 is the product of 2, 3, and 4. - 12 is the product of 1, 3, and 4. - 8 is the product of 1, 2, and 4. - 6 is the product of 1, 2, and 3. Make sure your solution handles edge cases such as an empty list or a list with one element appropriately. Function signature: ``` def product_except_self(nums: List[int]) -> List[int]: ``` Example: ``` product_except_self([1, 2, 3, 4]) # => [24, 12, 8, 6] product_except_self([5]) # => [1] product_except_self([]) # => [] ```","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: if not nums: return [] if len(nums) == 1: return [1] # Initialization length = len(nums) result = [1] * length # Calculate left products left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right products and final result right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given a list of numbers, each number can be a positive or a negative integer. You need to find the sum of the elements that are prime numbers and their respective frequencies in the list. Prime numbers in the context of this problem are numbers greater than 1 that have no divisors other than 1 and themselves. Input: The first line of input contains an integer, n, which denotes the number of integers that will follow. Then, n lines follow, each containing an integer, denoted by x. Output: The output should contain two lines. The first line should display the sum of the prime numbers present in the list. The second line should list each prime number and its occurrence in the list. Constraints: 1 ≤ n ≤ 100000 -100000 ≤ x ≤ 100000 Note: Consider only prime numbers greater than 1. SAMPLE INPUT 6 3 -5 7 8 3 2 SAMPLE OUTPUT 15 2 1 3 2 7 1 Explanation Test Case #1: - The prime numbers in the list are [3, 7, 3, 2]. - The sum of the prime numbers is 3 + 7 + 3 + 2 = 15. - The frequency of each prime number in the list is: 2 occurs 1 time, 3 occurs 2 times, and 7 occurs 1 time. Therefore, the output contains the sum of prime numbers followed by each prime number and its respective frequency.","solution":"def is_prime(num): Helper function to determine if a number is a prime number. if num < 2: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def sum_and_frequency_of_primes(n, numbers): Given a list of integers, return the sum of the elements that are prime numbers and their respective frequencies in the list. primes = [num for num in numbers if is_prime(num)] prime_sum = sum(primes) prime_freq = {} for prime in primes: if prime in prime_freq: prime_freq[prime] += 1 else: prime_freq[prime] = 1 prime_list_with_freq = sorted(prime_freq.items()) return prime_sum, prime_list_with_freq"},{"question":"You are given an array of integers, where each integer represents the height of a building. The goal is to find the maximum rectangular area in a histogram represented by this array. Each bar in the histogram has a width of 1. For simplicity, assume that the heights of the buildings are all non-negative integers. You need to write a function to determine the maximum rectangular area possible within the given histogram. Function Signature: ```python def max_histogram_area(heights: List[int]) -> int: ``` # Input - A list of integers `heights` with `n` elements, where `1 ≤ n ≤ 10^5` and `0 ≤ heights[i] ≤ 10^9` for each `i`. # Output - Return the maximum area of the rectangle that can be formed in the histogram. # Example Example 1 Input: ```python heights = [2, 1, 5, 6, 2, 3] ``` Output: ```python 10 ``` Explanation: The largest rectangle is formed by the height 5 and 6 with width 2 (indices 2 and 3). Example 2 Input: ```python heights = [2, 4] ``` Output: ```python 4 ``` Explanation: The largest rectangle is formed by either height 2 with width 1 or height 4 with width 1. # Notes - Make use of a stack data structure to achieve an efficient solution. - Consider edge cases like empty histograms or histograms with very large or very small bar heights. - The solution should aim for O(n) complexity for optimal performance. The challenge is to implement this in an efficient way, considering the constraints on the input size.","solution":"from typing import List def max_histogram_area(heights: List[int]) -> int: Function to find the maximum rectangular area in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Ankit is organizing a relay race in his city where there are \'P\' number of checkpoints. Each checkpoint \'i\' offers a different efficiency value \'E_i\' (i.e., the energy required to complete it). Ankit needs to ensure that he finds the most efficient way for each participant to complete the round trip such that the total energy consumed across all checkpoints is minimized. The participants can start at any checkpoint, but they must return to the starting checkpoint. Input The first input line contains the R number of test cases. Each test case starts with an integer P, representing the number of checkpoints. Next line contains P integers specifying the energy values for each checkpoint, E_1, E_2, ..., E_P. Output For each test case, output the minimum total energy consumed for a participant to complete the round trip. Constraints 1 ≤ R ≤ 10 1 ≤ P ≤ 10^4 0 ≤ E_i ≤ 10^5 SAMPLE INPUT 2 4 3 5 2 6 3 7 1 3 SAMPLE OUTPUT 16 11 Explanation For the first test case, the participant can start from checkpoint 1 with an energy requirement of 3 units, then move to checkpoint 2 (5 units), checkpoint 3 (2 units), checkpoint 4 (6 units), and back to checkpoint 1 (3 units). The total energy consumed is 3 + 5 + 2 + 6 + 3 = 19 units. The optimal path would be rearranged to minimize this total, but considering all possible starts, the minimum total for a round trip would be 16 units. For the second test case, starting from checkpoint 2 with energy values arranged as 1 (checkpoint 2), 3 (checkpoint 3), 7 (checkpoint 1), and returning to checkpoint 2 with 1 unit, the minimal path would consume 1 + 3 + 7 + 1 = 12 units. However, considering the optimal path, the minimum round trip energy cost is 11 units.","solution":"def min_total_energy(R, test_cases): results = [] for case in test_cases: P, E = case E_doubled = E + E # duplicate the list to simulate circular continuity min_energy = float(\'inf\') for i in range(P): total = sum(E_doubled[i:i+P]) if total < min_energy: min_energy = total results.append(min_energy) return results"},{"question":"You are given a series of strings representing sequences of chocolate pieces where some pieces contain nuts and others do not. Each sequence is formed using the characters \'C\' for chocolate and \'N\' for nuts. Chocolate and nut pieces alternate, and the sequence is always guaranteed to start with a chocolate piece (\'C\'). The task is to determine if a given sequence is valid or not. A valid sequence follows these rules: 1. It starts with a \'C\'. 2. \'C\' and \'N\' pieces must alternate. 3. The length of the sequence must be at least 3 characters. Write a function that takes a string representing a sequence of chocolate pieces and returns true if the sequence is valid, otherwise returns false. ```Python def is_valid_sequence(sequence): # Your code here # Example: print(is_valid_sequence(\'CNC\')) # True print(is_valid_sequence(\'CCN\')) # False print(is_valid_sequence(\'NCN\')) # False (does not start with \'C\') print(is_valid_sequence(\'CNCNCNCN\')) # True print(is_valid_sequence(\'CN\')) # False (length is less than 3) ``` Ready, steady, validate that candy!","solution":"def is_valid_sequence(sequence): Returns True if the given sequence of chocolate (\'C\') and nuts (\'N\') is valid, otherwise returns False. # A valid sequence must be at least 3 characters long if len(sequence) < 3: return False # A valid sequence must start with \'C\' if sequence[0] != \'C\': return False # C and N pieces must alternate. for i in range(len(sequence) - 1): if sequence[i] == sequence[i + 1]: return False return True # Example usage: print(is_valid_sequence(\'CNC\')) # True print(is_valid_sequence(\'CCN\')) # False print(is_valid_sequence(\'NCN\')) # False print(is_valid_sequence(\'CNCNCNCN\')) # True print(is_valid_sequence(\'CN\')) # False"},{"question":"# Task A game consists of `n` matches, each with a value representing the outcome: either a win (`1`), a loss (`-1`), or a draw (`0`) for the home team. Each match is an independent event. Write a function that calculates the longest winning streak for given match outcomes. # Example For `n = 10` and outcomes = `[1, 0, 1, 1, -1, 1, 1, 1, 0, 1]`, the output should be `3`. Here, the longest streak of consecutive wins is 3 (from the 6th to 8th match inclusive). # Input/Output - `[input]` integer `n` A positive integer representing the number of matches. Constraints: `1 ≤ n ≤ 10000`. - `[input]` array of integers `outcomes` An array of length `n` with each element being `-1`, `0`, or `1`. Constraints: The values are either `-1`, `0`, or `1`. - `[output]` an integer The length of the longest winning streak.","solution":"def longest_winning_streak(n, outcomes): Calculates the longest winning streak from the given match outcomes. Parameters: n (int): The number of matches outcomes (list of int): List of integers representing the results of each match Returns: int: The length of the longest winning streak max_streak = 0 current_streak = 0 for outcome in outcomes: if outcome == 1: current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"A famous journalist has decided to contact all the news agencies in their database by sending them an email. However, to maintain a record of these emails, they need to create a concise report indicating how many times each email domain has been contacted. For this purpose, they have asked for your help to develop a program that generates this report. Your task is to write a program that receives a list of email addresses and returns the count of emails sent to each domain. An email address consists of a local-part and a domain, separated by the \\"@\\" character. For example, in the email address \\"user@example.com\\", \\"user\\" is the local-part and \\"example.com\\" is the domain. Input The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000), indicating the number of email addresses. The following n lines contain one email address each. The input ends when a line containing a single zero (0) is encountered. This line should not be processed. Output For each test case, print the result in the format: \\"domain: count\\", where \'domain\' is the domain part of the email address and \'count\' is the number of times this domain appears in the provided list of email addresses. Output the domains in alphabetical order. If there are multiple test cases, separate the output of each test case with a blank line. Example Input 3 user1@example.com user2@example.com user3@test.com 2 alice@website.org bob@website.org 0 Output example.com: 2 test.com: 1 website.org: 2 Note: The code should not include an empty line at the end of the output.","solution":"def email_domain_count(input_str): from collections import defaultdict # Parsing input tests = input_str.strip().split(\'n\') i = 0 results = [] while i < len(tests): n = int(tests[i]) if n == 0: break i += 1 domain_count = defaultdict(int) for _ in range(n): email = tests[i].strip() domain = email.split(\'@\')[1] domain_count[domain] += 1 i += 1 sorted_domains = sorted(domain_count.items()) result = [] for domain, count in sorted_domains: result.append(f\\"{domain}: {count}\\") results.append(\\"n\\".join(result)) return \\"nn\\".join(results)"},{"question":"You are developing a new scheduling tool for a project management software, and you are given the task of determining the earliest possible finish time for a set of tasks. Each task has a specific duration and a list of dependencies on other tasks that must be completed before it can start. You need to implement a program to compute the earliest possible finish time for all tasks. Each task is represented by an integer, and its dependencies are given in a list of pairs, where the first element of the pair is the dependent task, and the second element is the task it relies on. Write a program that takes the number of tasks, their durations, and dependencies as input, and outputs the earliest possible finish time for each task. Input The first line contains an integer N (1 ≤ N ≤ 1000) representing the number of tasks. The second line contains N integers representing the durations of the tasks (1 ≤ duration ≤ 1000) in order. The third line contains an integer M (0 ≤ M ≤ 10000) representing the number of dependencies. The next M lines each contain a pair of integers (a, b) indicating that task b must be completed before task a can start (1 ≤ a, b ≤ N). Output Output N integers on a single line, each representing the earliest possible finish time for task i. Example Input 5 3 2 1 4 6 4 2 1 3 1 4 2 5 3 Output 3 5 4 9 10 Explanation - Task 1 has no dependencies and takes 3 units of time. - Task 2 depends on task 1 and takes 2 units of time, thus finishing at time 5. - Task 3 also depends on task 1 and takes 1 unit of time, thus finishing at time 4. - Task 4 depends on task 2, which finishes at time 5, and it takes 4 units of time, thus finishing at time 9. - Task 5 depends on task 3, which finishes at time 4, and it takes 6 units of time, thus finishing at time 10.","solution":"def earliest_finish_times(N, durations, M, dependencies): from collections import defaultdict, deque # 1. Prepare the graph and the in-degree structure graph = defaultdict(list) in_degree = [0] * N for a, b in dependencies: graph[b - 1].append(a - 1) in_degree[a - 1] += 1 # 2. Find all the starting points (tasks with no dependencies) queue = deque() finish_time = [0] * N for i in range(N): if in_degree[i] == 0: queue.append(i) finish_time[i] = durations[i] # 3. Process tasks in topological order while queue: current = queue.popleft() for neighbor in graph[current]: finish_time[neighbor] = max(finish_time[neighbor], finish_time[current] + durations[neighbor]) in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return finish_time # Example usage: N = 5 durations = [3, 2, 1, 4, 6] M = 4 dependencies = [(2, 1), (3, 1), (4, 2), (5, 3)] print(earliest_finish_times(N, durations, M, dependencies)) # Output: [3, 5, 4, 9, 10]"},{"question":"Candice is planning to organize a treasure hunt for her friends. She wants to hide a treasure on a grid and give clues that lead to it. The grid is represented by a matrix of characters. Each character can be either ‘.’ which denotes an empty cell or ‘#’ which denotes an obstacle. The treasure can only be hidden in an empty cell (denoted by ‘.’). Candice wants to know the maximum number of obstacle cells ‘#’ in a straight line (horizontally, vertically, or diagonally) that form a continuous barrier between the start cell and the treasure cell in the grid. This barrier serves as part of a clue to make the hunt more challenging. You need to help her find the maximum barrier length in the grid considering all possible straight lines between an empty start cell and an empty treasure cell. -----Input----- The first line of the input contains two integers N and M (2 leq N, M leq 50) which denote the number of rows and columns of the grid, respectively. The next N lines each contain M characters, describing the grid matrix. -----Output----- Output a single integer representing the maximum number of obstacle cells \'#\' that form a continuous barrier in a straight line between any two empty cells in the grid. -----Examples----- Sample Input 1: 4 4 .... .. .. .... Sample Output 1: 2 Sample Input 2: 5 5 .#... ... .#. ..... ..... Sample Output 2: 3 Sample Input 3: 5 5 .#.#. .#.#. # .#.#. .#.#. Sample Output 3: 5","solution":"def max_barrier_length(N, M, grid): def get_max_sequence(x, y, dx, dy): Helper function to count the number of \'#\'s in a straight line given direction dx, dy starting from position (x, y). count = 0 max_count = 0 i, j = x, y while 0 <= i < N and 0 <= j < M: if grid[i][j] == \'#\': count += 1 max_count = max(max_count, count) else: count = 0 i += dx j += dy return max_count max_obstacles = 0 # Check all horizontal and vertical lines for i in range(N): max_obstacles = max(max_obstacles, get_max_sequence(i, 0, 0, 1)) # Horizontal line for j in range(M): max_obstacles = max(max_obstacles, get_max_sequence(0, j, 1, 0)) # Vertical line # Check all diagonal lines for i in range(N): max_obstacles = max(max_obstacles, get_max_sequence(i, 0, 1, 1)) # Primary diagonal starting from first column max_obstacles = max(max_obstacles, get_max_sequence(i, M-1, 1, -1)) # Secondary diagonal starting from last column for j in range(M): max_obstacles = max(max_obstacles, get_max_sequence(0, j, 1, 1)) # Primary diagonal starting from first row max_obstacles = max(max_obstacles, get_max_sequence(0, j, 1, -1)) # Secondary diagonal starting from first row return max_obstacles # Sample Input N1, M1 = 4, 4 grid1 = [ \\"....\\", \\"..\\", \\"..\\", \\"....\\" ] N2, M2 = 5, 5 grid2 = [ \\".#...\\", \\"...\\", \\".#.\\", \\".....\\", \\".....\\" ] N3, M3 = 5, 5 grid3 = [ \\".#.#.\\", \\".#.#.\\", \\"#\\", \\".#.#.\\", \\".#.#.\\" ] print(max_barrier_length(N1, M1, grid1)) # Expected output: 2 print(max_barrier_length(N2, M2, grid2)) # Expected output: 3 print(max_barrier_length(N3, M3, grid3)) # Expected output: 5"},{"question":"An autonomous rover on Planet X is equipped with a navigation system that allows it to move in four cardinal directions: north, south, east, and west. The rover\'s goal is to reach a designated destination point on a 2D grid starting from a given starting point. However, the terrain is filled with obstacles that the rover cannot pass through. The rover needs to find the shortest path to the destination avoiding these obstacles. If it\'s not possible to reach the destination, the rover should report that it is impossible. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will start with a line with two integers n and m (1 le n, m le 100), the dimensions of the grid. Followed by a line with four integers sx, sy, dx, dy (0 le sx, sy, dx, dy < n), representing the starting (sx, sy) and destination (dx, dy) coordinates respectively. Next, an integer t (0 le t le n times m) indicating the number of obstacles. Each of the next t lines will hold an (x, y) coordinate (0 le x < n, 0 le y < m) indicating the location of an obstacle. All of the coordinates in a test case will be unique. -----Output----- Output a single line with a single integer indicating the minimum number of moves required for the rover to reach the destination. If it is impossible, output -1. -----Examples----- Sample Input 1: 5 5 0 0 4 4 3 1 0 1 1 2 2 Sample Output 1: 8 Sample Input 2: 3 3 0 0 2 2 1 1 1 Sample Output 2: 4 Sample Input 3: 2 2 0 0 1 1 2 0 1 1 0 Sample Output 3: -1","solution":"from collections import deque def shortest_path_in_grid(n, m, sx, sy, dx, dy, obstacles): Finds the shortest path from the start (sx, sy) to the destination (dx, dy) avoiding obstacles using BFS. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param sx: Starting x-coordinate. :param sy: Starting y-coordinate. :param dx: Destination x-coordinate. :param dy: Destination y-coordinate. :param obstacles: List of tuples representing coordinates of obstacles. :return: Minimum number of moves to reach destination or -1 if impossible. grid = [[0] * m for _ in range(n)] for (ox, oy) in obstacles: grid[ox][oy] = 1 # Mark obstacles on the grid if (sx, sy) == (dx, dy): return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) # (x, y, distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: if (nx, ny) == (dx, dy): return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Alice is an avid collector of rare stamps. She has a large collection of n unique stamps, each identified by a distinct integer from 1 to n. One day, she decided to create a series of albums, each containing a specific subset of her stamps. Alice wants to know how many distinct albums can be created. Two albums are considered different if they contain different subsets of stamps. Input The first line contains an integer n (1 ≤ n ≤ 20) — the number of unique stamps in Alice\'s collection. Output Print a single integer, the number of distinct albums that can be created using Alice\'s collection of n stamps. Examples Input 3 Output 8 Input 4 Output 16 Explanation: For n = 3, the subsets (albums) are: {}, {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3}, totaling 8 distinct subsets.","solution":"def count_distinct_albums(n): Returns the number of distinct albums that can be created using n unique stamps. # Each stamp can either be in an album or not in an album. # There are 2 choices (in or not in) for each of the n stamps. # Hence, the total number of distinct subsets (albums) is 2^n. return 2 ** n"},{"question":"Write a program that processes log data and extracts specific information about user activities. The program should read the log data and, for each user, calculate the total amount of time they were active. The log data is provided in a specific format and may span multiple days. Each user can have multiple login and logout events. The format of the log data is as follows: - Each entry is on a new line. - Each entry contains the timestamp (in the format `YYYY-MM-DD HH:MM:SS`), the user\'s ID (an alphanumeric string), and the event (either `LOGIN` or `LOGOUT`), separated by spaces. The program should output the total active time for each user. The active time is the difference between the `LOGOUT` and `LOGIN` times for each consecutive pair of login and logout events for each user. If a user has a `LOGIN` without a corresponding `LOGOUT`, or any extra `LOGOUT` events, they should not contribute to the active time. Input example --- ``` 6 2023-09-01 09:00:00 user1 LOGIN 2023-09-01 09:30:00 user1 LOGOUT 2023-09-02 10:00:00 user3 LOGIN 2023-09-02 12:00:00 user3 LOGOUT 2023-09-03 08:00:00 user1 LOGIN 2023-09-03 09:00:00 user1 LOGOUT ``` Output example --- ``` user1 01:30:00 user3 02:00:00 ``` Input --- The input consists of several lines. The first line contains an integer n, the number of log entries. The following n lines each contain a single log entry as described above. Output --- For each user that has valid login-logout pairs, output their user ID followed by the total active time in `HH:MM:SS` format. Each user\'s output should be on a new line. Users should be listed in the order of their first appearance in the log data. If a user has no valid login-logout pairs, they should not appear in the output.","solution":"from datetime import datetime, timedelta from collections import defaultdict def parse_log_entry(entry): parts = entry.split() timestamp = datetime.strptime(parts[0] + \' \' + parts[1], \'%Y-%m-%d %H:%M:%S\') user_id = parts[2] event = parts[3] return timestamp, user_id, event def process_logs(log_data): user_activities = defaultdict(list) for entry in log_data: timestamp, user_id, event = parse_log_entry(entry) user_activities[user_id].append((timestamp, event)) user_total_active_time = {} for user_id, events in user_activities.items(): total_active_time = timedelta() login_time = None for timestamp, event in events: if event == \'LOGIN\': login_time = timestamp elif event == \'LOGOUT\' and login_time is not None: total_active_time += timestamp - login_time login_time = None if total_active_time.total_seconds() > 0: user_total_active_time[user_id] = total_active_time return user_total_active_time def format_active_time(active_time): total_seconds = int(active_time.total_seconds()) hours, remainder = divmod(total_seconds, 3600) minutes, seconds = divmod(remainder, 60) return f\'{hours:02}:{minutes:02}:{seconds:02}\' def main(log_data): user_total_active_time = process_logs(log_data) output = [] for user_id, active_time in user_total_active_time.items(): output.append(f\'{user_id} {format_active_time(active_time)}\') return output"},{"question":"# Anagrams Grouping You are to write a function called `group_anagrams` that receives a list of strings and returns a list of lists, where each sublist contains words that are anagrams of each other. Words are to be grouped together based on the characters they contain, regardless of the order. Each word must appear only once and be grouped with its respective anagrams, if any. The order of the output sublists and their contents does not matter. Assumptions * All strings are lowercase. * The list may contain between 0 and 1000 words. Each word has at most 100 characters. * The input can be an empty list. Example ```python print(group_anagrams([\\"ant\\", \\"tan\\", \\"bat\\", \\"tab\\", \\"nat\\", \\"cat\\", \\"tac\\"])) [[\'ant\', \'tan\', \'nat\'], [\'bat\', \'tab\'], [\'cat\', \'tac\']] print(group_anagrams([\\"\\"])) [[\'\']] print(group_anagrams([\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"google\\", \\"gogole\\", \\"abc\\"])) [[\'listen\', \'silent\', \'enlist\', \'inlets\'], [\'google\', \'gogole\'], [\'abc\']] ```","solution":"from collections import defaultdict def group_anagrams(words): Groups words that are anagrams of each other. Parameters: words (list): A list of strings. Returns: list: A list of lists where each sublist contains words that are anagrams. anagram_dict = defaultdict(list) for word in words: # Sort the word and use it as the key sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) # Convert the dict values to list return list(anagram_dict.values())"},{"question":"Given a string s and an array of strings dictionary, return the longest string in the dictionary such that the string can be formed by deleting some characters of the given string s without reordering the remaining characters. If there are multiple results, return the longest word with the smallest lexicographical order. If there is no possible result, return an empty string. Example 1: Input: s = \\"abpcplea\\", dictionary = [\\"ale\\",\\"apple\\",\\"monkey\\",\\"plea\\"] Output: \\"apple\\" Example 2: Input: s = \\"abpcplea\\", dictionary = [\\"a\\",\\"b\\",\\"c\\"] Output: \\"a\\" Constraints: - 1 <= s.length <= 1000 - 1 <= dictionary.length <= 1000 - 1 <= dictionary[i].length <= 100","solution":"def findLongestWord(s, dictionary): Returns the longest string in the dictionary that can be formed by deleting some characters of s without reordering the remaining characters. If there are multiple results, the longest word with the smallest lexicographical order is returned. If there is no possible result, return an empty string. def is_subsequence(x, y): it = iter(y) return all(c in it for c in x) # Sort dictionary by length (descending) and by lexicographical order (ascending) sorted_dict = sorted(dictionary, key=lambda word: (-len(word), word)) for word in sorted_dict: if is_subsequence(word, s): return word return \\"\\""},{"question":"You are given a string s consisting of lowercase and uppercase alphabets. We need to find the length of the longest subsequence of s where each character appears an even number of times. For example, for the string \\"abbac\\", the longest subsequence where each character appears an even number of times is \\"abba\\" with length 4. Write a function evenCharSubseq(s) that takes a string s as input and returns the length of the longest subsequence of s where each character appears an even number of times. If no such subsequence exists, return 0. Example 1: Input: s = \\"aabbcc\\" Output: 6 Explanation: The entire string \\"aabbcc\\" is the longest subsequence where all characters have even counts. Example 2: Input: s = \\"abccba\\" Output: 6 Explanation: The entire string \\"abccba\\" is the longest subsequence where all characters have even counts. Example 3: Input: s = \\"abcabc\\" Output: 6 Explanation: All characters in the string \\"abcabc\\" appear exactly twice. Example 4: Input: s = \\"aabc\\" Output: 2 Explanation: One possible subsequence is \\"aa\\" where \'a\' appears twice. Constraints: - 1 <= s.length <= 10^4 - s consists of lowercase and uppercase English letters only.","solution":"def evenCharSubseq(s): Returns the length of the longest subsequence of s where each character appears an even number of times. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Calculate the length of the longest subsequence with characters appearing an even number of times length = 0 for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 return length"},{"question":"Vus the Cossack has an array of n integers where some elements may be repeated. He wants to find the elements that appear more than lfloor frac{n}{k} rfloor times, where k is a given integer. For example, if the given array is a = [3, 3, 4, 2, 4, 4, 2, 4, 4] and k = 3, then the elements that appear more than lfloor 9/3 rfloor = 3 times are 4. Note that k is always greater than 1. Help Vus the Cossack find such elements! -----Input----- The first line contains two integers n (1 leq n leq 10^5) and k (2 leq k leq 100) — the size of the array and the integer threshold. The second line contains n integers a_i (1 leq a_i leq 10^5) — the elements of the array. -----Output----- Print all the elements that appear more than lfloor frac{n}{k} rfloor times in the array in ascending order. If no such elements exist, print an empty line. -----Examples----- Input 9 3 3 3 4 2 4 4 2 4 4 Output 4 Input 8 4 1 2 3 4 5 6 7 8 Output","solution":"def find_frequent_elements(n, k, arr): Finds elements in the array that appear more than n//k times. Parameters: n (int): The size of the array. k (int): The threshold factor. arr (list of ints): The elements of the array. Returns: list of ints: Elements appearing more than n//k times, sorted in ascending order. from collections import Counter threshold = n // k count = Counter(arr) result = sorted([key for key, value in count.items() if value > threshold]) return result"},{"question":"You are given a list of integers. Your task is to compute the maximum product that can be obtained from any three distinct elements in the list. Input The first line contains an integer n - the number of elements in the list. The second line contains n space-separated integers representing the elements of the list. Output Output one integer - the maximum product of any three distinct elements in the list. Constraints 3 ≤ n ≤ 10 -100 ≤ list[i] ≤ 100 SAMPLE INPUT 5 1 10 2 6 5 SAMPLE OUTPUT 300","solution":"def max_product_of_three(nums): Returns the maximum product of any three distinct integers from the given list. nums.sort() # The maximum product can be either from the three largest numbers # or from two smallest numbers (which can be negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"A linguistics researcher is studying a peculiar language that has a unique kind of dictionary. In this dictionary, each word is defined as a list of strings of equal length. The researcher wants to understand if it is possible to transform a given word into another one by rearranging its strings, while ensuring that each string within the rearranged word has no common characters with any other string in that word. Your task is to write a program that will help the researcher determine if such a transformation is possible. Input The first line contains a single integer n (2 ≤ n ≤ 100 000) — the number of strings in the word. The following n lines each contain a string of length m (1 ≤ m ≤ 100) — the strings that form the word. Output Output one line — \\"Yes\\" if it is possible to rearrange the strings such that no two strings in the rearranged word share any common character, and \\"No\\" otherwise (both excluding quotation marks). You can output each letter in any case (upper or lower). Examples Input 3 abc def ghi Output Yes Input 3 abc bcd cde Output No Input 2 abcd abef Output No Note In the first example, all strings have completely distinct sets of characters, so they can be rearranged in any order without any common characters in the rearranged word. In the second example, each string shares at least one common character with another string, so it is impossible to rearrange them to meet the requirement.","solution":"def can_rearrange_words(n, words): Determine if it\'s possible to rearrange the given words such that no two strings in the rearranged word share any common character. # Create a list to track the character sets of each word char_sets = [set(word) for word in words] # Check for common characters between any two sets for i in range(n): for j in range(i + 1, n): if char_sets[i] & char_sets[j]: # If there\'s any common character return \\"No\\" return \\"Yes\\""},{"question":"Alice is designing a new puzzle game that involves placing tiles on a grid. Each tile has a unique shape and must fit perfectly on the grid without overlapping with other tiles or going out of bounds. The grid is given as a two-dimensional array of integers where 0 represents an empty cell and 1 represents an obstacle. Alice has created several tile types, each represented by a smaller two-dimensional array of integers where 1 represents a filled cell of the tile and 0 represents an empty cell. Your task is to help Alice by creating a function that will determine if a given tile can be placed on the grid at a specified position. Specifically, you need to write a function `can_place_tile` that takes three parameters: the grid, the tile, and the top-left position (row, column) on the grid where Alice wants to place the tile. The function should return `True` if the tile can be placed at the specified position, and `False` otherwise. The function signature is: ```python def can_place_tile(grid: List[List[int]], tile: List[List[int]], row: int, col: int) -> bool: pass ``` # Input - `grid`: A 2D list of integers representing the grid, 0 ≤ grid[r][c] ≤ 1. - `tile`: A 2D list of integers representing the tile, 0 ≤ tile[r][c] ≤ 1. - `row`: An integer representing the row index in the grid where the top-left corner of the tile should be placed. - `col`: An integer representing the column index in the grid where the top-left corner of the tile should be placed. # Output - `True` if the tile can be placed at the specified position without overlapping the obstacles or going out of bounds, otherwise `False`. # Constraints - `1 ≤ len(grid) ≤ 100` - `1 ≤ len(grid[0]) ≤ 100` - `1 ≤ len(tile) ≤ 10` - `1 ≤ len(tile[0]) ≤ 10` - 0 ≤ row < len(grid) - 0 ≤ col < len(grid[0]) # Example ```python grid = [ [0, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], ] tile = [ [1, 1], [1, 0], ] row = 2 col = 3 print(can_place_tile(grid, tile, row, col)) # Output: False ``` # Explanation In this example, placing the tile starting at row 2, column 3 would result in an overlap with an obstacle at grid position (2, 3). Here is another example: ```python grid = [ [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], ] tile = [ [1, 1], [1, 0], ] row = 2 col = 1 print(can_place_tile(grid, tile, row, col)) # Output: True ``` In this case, placing the tile starting at row 2, column 1 fits perfectly within the grid and does not overlap with any obstacles.","solution":"from typing import List def can_place_tile(grid: List[List[int]], tile: List[List[int]], row: int, col: int) -> bool: tile_height = len(tile) tile_width = len(tile[0]) grid_height = len(grid) grid_width = len(grid[0]) # Check if the tile fits within the grid bounds if row + tile_height > grid_height or col + tile_width > grid_width: return False # Check for overlapping obstacles for i in range(tile_height): for j in range(tile_width): if tile[i][j] == 1 and grid[row + i][col + j] == 1: return False return True"},{"question":"Given a string `S` and an integer `k`, your task is to remove `k` characters from `S` to obtain the lexicographically smallest possible result. The order of characters in the resulting string should be maintained as it is. Example 1: Input: S = \\"dacbde\\" k = 2 Output: \\"abde\\" Explanation: By removing the characters \'d\' and \'c\', which are not in lexicographically smallest positions, we get the string \\"abde\\". Example 2: Input: S = \\"abcd\\" k = 2 Output: \\"ab\\" Explanation: By removing any two characters from the end, the string \\"ab\\" remains which is lexicographically smallest. Your Task: Write a function `lexicographicalDelete()` that takes the string `S` and the integer `k` as inputs and returns the lexicographically smallest string possible after removing `k` characters. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= |S| <= 10^5 1 <= k <= |S| Notes: - The function should be efficient enough to handle strings with length up to 100,000. - Be mindful of the order in which characters are removed to ensure the lexicographical order is maintained.","solution":"def lexicographicalDelete(S, k): Removes k characters from the string S to obtain the lexicographically smallest possible result. :param S: A string S to remove characters from. :param k: An integer k indicating how many characters to remove. :return: Lexicographically smallest string possible after removal. stack = [] n = len(S) for i in range(n): while k and stack and stack[-1] > S[i]: stack.pop() k -= 1 stack.append(S[i]) # If k is still positive, remove the remaining characters from the end of the stack while k > 0: stack.pop() k -= 1 return \'\'.join(stack)"},{"question":"Write a function that takes a list of integers and a target integer as inputs. The function should return a list of unique pairs of numbers from the input list that add up to the target integer. Ensure that each pair is sorted in ascending order and the final output list of pairs is sorted in ascending order based on the first number of each pair, and then by the second number if the first numbers are the same. For example: ``` Input: [1, 2, 3, 4, 3, 2, 1, 5, 6], Target: 5 Output: [[1, 4], [2, 3]] ```","solution":"def find_pairs(nums, target): Returns a list of unique pairs from nums that add up to target. Parameters: nums (list): List of integers. target (int): Target integer. Returns: list: List of unique pairs sorted as per specified rules. seen = set() output_set = set() for num in nums: needed_value = target - num if needed_value in seen: pair = tuple(sorted((num, needed_value))) output_set.add(pair) seen.add(num) output_list = sorted([list(pair) for pair in output_set]) return output_list"},{"question":"Bike Share Management In a smart city, there is a popular bike-sharing service where people can rent bikes from various stations scattered throughout the city. Each station has a limited number of bikes and free slots for returning bikes. The mayor wants to ensure that customers can always find both available bikes and free slots. So, he decided to analyze the redistribution strategy. You are tasked with creating a program that helps optimize the redistribution. Given the current state of the stations and a target state (desired number of bikes at each station), calculate the minimum total number of bike transfers required to achieve the desired distribution. Transfers can occur between any pair of stations, and each transfer moves one bike from one station to another. **Input** The first line contains an integer T, the number of test cases. For each test case: - First line contains an integer N, the number of bike stations. - Second line contains N integers, the current number of bikes at each station. - Third line contains N integers, the desired number of bikes at each station. **Output** For each test case, output a single integer representing the minimum number of bike transfers needed. **Constraints** 1 <= T <= 10 1 <= N <= 1000 0 <= Current, Desired <= 100 Time limit: 1s **Sample Input** 2 3 1 2 3 2 2 2 4 0 4 0 4 2 2 2 2 **Sample Output** 1 4 **Explanation** For the first test case, you need to make one transfer: move 1 bike from station 3 to station 1, achieving [2, 2, 2]. For the second test case, you need to make four transfers: move 2 bikes from station 2 to station 1, and 2 bikes from station 2 to station 3, achieving [2, 2, 2, 2].","solution":"def min_bike_transfers(test_cases): results = [] for test in test_cases: N = test[\'N\'] current = test[\'current\'] desired = test[\'desired\'] total_transfers = 0 deficit = 0 for i in range(N): if current[i] > desired[i]: total_transfers += current[i] - desired[i] else: deficit += desired[i] - current[i] results.append(total_transfers) return results # Function to parse input and return the result def solve_bike_transfers(input_str): input_values = list(map(int, input_str.strip().split())) idx = 0 T = input_values[idx] idx += 1 test_cases = [] for _ in range(T): N = input_values[idx] idx += 1 current = input_values[idx: idx + N] idx += N desired = input_values[idx: idx + N] idx += N test_cases.append({\'N\': N, \'current\': current, \'desired\': desired}) results = min_bike_transfers(test_cases) return results"},{"question":"Given a binary tree, implement an algorithm to perform an in-order traversal of the tree without using recursion. Return the traversal result as a list of integers. For an in-order traversal, the nodes are recursively visited in this order: left subtree, root node, and then the right subtree. Example 1: Input: 1 2 / 3 Output: [1, 3, 2] Example 2: Input: 4 / 2 5 / 1 3 Output: [1, 2, 3, 4, 5] Your task is to complete the function `inOrderTraversal` which takes the root of the binary tree as input and returns a list of integers representing the in-order traversal. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1. The number of nodes in the tree is in the range [1, 10^4]. 2. -10^4 <= Node.val <= 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inOrderTraversal(root): Perform an in-order traversal of the binary tree without using recursion. :param root: TreeNode, the root of the binary tree :return: List[int] containing the in-order traversal of the binary tree result = [] stack = [] current = root while current is not None or stack: while current is not None: stack.append(current) current = current.left current = stack.pop() result.append(current.val) current = current.right return result"},{"question":"Write a function distances_from_origin(points, k) which takes in a list of points and an integer k, where each point is represented as a tuple (x, y) indicating its coordinates. The function should return the k points that have the smallest Euclidean distance from the origin (0, 0). For example: Input: points = [(1, 2), (3, 4), (-1, -1), (-2, -3), (5, 2)] k = 2 Output: [(-1, -1), (1, 2)] Notes: - If there are multiple points with the same distance, any acceptable subset of k closest points can be returned. - The Euclidean distance for a point (x, y) from the origin is calculated as √(x^2 + y^2). - You can use the `math.sqrt` function for the square root calculation, or compare squared distances to avoid unnecessary computations.","solution":"import math def distances_from_origin(points, k): Returns the k points that have the smallest Euclidean distance from the origin (0, 0). :param points: List of tuples representing points (x, y). :param k: Integer representing the number of closest points to return. :return: List of k tuples representing the closest points to the origin. # Calculate squared Euclidean distance for each point to avoid unnecessary sqrt computation distances = [(x**2 + y**2, (x, y)) for x, y in points] # Sort points by distance distances.sort() # Extract and return the first k points return [point for _, point in distances[:k]]"},{"question":"Consider a biologist who is studying a population of bacteria. The bacteria divide every hour, and under ideal conditions, the population doubles. However, she is curious about a particular type of mutation that causes the bacteria to sometimes split into three. To simulate this, the biologist wants to create a program that determines the various possible populations of the bacteria after a certain number of hours given the initial population and the constraints on how often the population doubles or triples in an hour. Write a program to help the biologist solve this problem. The program should print the lexicographically smallest series of populations over the hours. If it\'s impossible to reach the target population, the program should return -1. For example, if the initial population is P=1, the target population is G=12, and the maximum hours H=4, the following ways exist: (a) 1 -> 2 -> 4 -> 12 x2 x2 x3 (b) 1 -> 3 -> 9 -> 27 x3 x3 x3 (c) 1 -> 2 -> 6 -> 12 x2 x3 x2 Among these, (a) is the lexicographically smallest. The answer should print the sequence [1, 2, 4, 12]. Inputs: * Initial population, P (1 ≤ P ≤ 10^6) * Target population, G (1 ≤ G ≤ 10^6) * Maximum hours, H (1 ≤ H ≤ 20) Output: Print the sequence of populations if it\'s possible to reach the target population. If not, print -1. **Input Example 1** 1 12 4 **Output Example 1** 1 2 4 12 **Input Example 2** 1 15 5 **Output Example 2** -1 **Input Example 3** 1 27 5 **Output Example 3** 1 3 9 27","solution":"from collections import deque def bacteria_population(P, G, H): Returns the lexicographically smallest series of populations over the hours. If it\'s impossible to reach the target population, return -1. if P == G: return [P] # Immediately return if start and goal are the same. queue = deque([(P, [P])]) # Start with initial population visited = set([P]) # Set to keep track of visited states while queue and H: H -= 1 for _ in range(len(queue)): current_population, path = queue.popleft() next_population_double = current_population * 2 next_population_triple = current_population * 3 if next_population_double <= G and next_population_double not in visited: new_path = path + [next_population_double] if next_population_double == G: return new_path queue.append((next_population_double, new_path)) visited.add(next_population_double) if next_population_triple <= G and next_population_triple not in visited: new_path = path + [next_population_triple] if next_population_triple == G: return new_path queue.append((next_population_triple, new_path)) visited.add(next_population_triple) return -1"},{"question":"**Problem Statement** Sarah is fascinated by permutations and strings. She came across a special type of string called a \\"Happy String\\". A Happy String is a string of lowercase English letters where no two adjacent characters are the same. Sarah wants to know if she can rearrange the characters of a given string to form a Happy String. Can you help her determine if it\'s possible? If it is possible to form at least one Happy String, print \\"YES\\". If it is not possible, print \\"NO\\". **Input format:** The first line contains an integer T, the number of test cases. For each test case, there is one line containing a string S consisting of lowercase English letters. **Output format:** For each test case, print \\"YES\\" if the characters of the string can be rearranged to form a Happy String, otherwise print \\"NO\\". **Constraints:** 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters only. **SAMPLE INPUT** 3 aabbcc aaab ab **SAMPLE OUTPUT** YES NO YES **Explanation:** - For the first test case, a possible Happy String is \\"abcabc\\" or \\"acbab\\". - For the second test case, it\'s impossible to rearrange \\"aaab\\" where no two \'a\'s are adjacent. - For the third test case, the given string \\"ab\\" is already a Happy String.","solution":"from collections import Counter def can_form_happy_string(s): # Count frequency of each character freq = Counter(s) # Find the maximum frequency of any character max_freq = max(freq.values()) # Calculate the required condition: max_freq should be <= (len(s) + 1) / 2 if max_freq <= (len(s) + 1) // 2: return \\"YES\\" else: return \\"NO\\" def process_test_cases(T, strings): results = [] for s in strings: results.append(can_form_happy_string(s)) return results"},{"question":"Implement a multi-threaded web server in Python. Your task is to design and implement a simple HTTP web server that handles multiple client connections concurrently using Python\'s `socket` and `threading` libraries. The web server should be capable of serving static HTML files with basic HTTP request and response handling. # Details: - The server should be initialized to listen on a specified port number and should support handling multiple client requests simultaneously. - The clients will request static HTML files stored in a directory named `www`. The server should be able to locate and return these files. - If a requested file does not exist, the server should return a 404 Not Found response. - The server should adhere to basic HTTP/1.0 protocol standards. # Specifications: 1. Create a Python class named `WebServer` with the following attributes and methods: - `__init__(self, host: str, port: int)`: Initializes the server with a specified host and port. - `start(self)`: Starts the web server, allowing it to accept and handle incoming client connections. - `handle_client(self, client_socket)`: Handles client requests in a separate thread. - `send_response(self, client_socket, status_code: int, body: str)`: Sends an HTTP response to the client. - `serve_file(self, client_socket, file_path: str)`: Serves the requested file to the client or returns 404 if the file does not exist. 2. Implement the following HTTP response status codes: - 200 OK - 404 Not Found 3. Use the `threading` library to ensure that each client connection is handled in a separate thread. 4. The server should serve files from a directory named `www`, which contains static HTML files. # Example of Usage: ```python # Create an instance of the web server server = WebServer(host=\'localhost\', port=8080) # Start the server server.start() ``` Place the following sample HTML file in the `www` directory: Example HTML File: `www/index.html` ```html <!DOCTYPE html> <html> <head><title>Welcome</title></head> <body><h1>Welcome to the Web Server!</h1></body> </html> ``` # Expected Behavior: - When the server is started, it should listen for incoming requests on the specified port. - When a client requests `http://localhost:8080/index.html`, the server should respond with the content of `www/index.html`. - If a client requests a non-existent file, the server should respond with a 404 Not Found message. # Constraints: - You must use the `socket` and `threading` libraries provided by Python. - Your implementation should handle multiple client connections efficiently without crashing.","solution":"import socket import threading import os class WebServer: def __init__(self, host: str, port: int): self.host = host self.port = port self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.server_socket.bind((self.host, self.port)) self.server_socket.listen(5) print(f\\"Server started on {self.host}:{self.port}\\") def start(self): while True: client_socket, client_address = self.server_socket.accept() client_handler = threading.Thread(target=self.handle_client, args=(client_socket,)) client_handler.start() def handle_client(self, client_socket): request = client_socket.recv(1024).decode(\'utf-8\') if request: headers = request.split(\'n\') file_requested = headers[0].split()[1] if file_requested == \'/\': file_requested = \'/index.html\' file_path = \'www\' + file_requested if os.path.isfile(file_path): self.serve_file(client_socket, file_path) else: self.send_response(client_socket, 404, \\"<h1>404 Not Found</h1>\\") client_socket.close() def send_response(self, client_socket, status_code: int, body: str): if status_code == 200: response = f\\"HTTP/1.0 200 OKrnContent-Type: text/htmlrnrn{body}\\" elif status_code == 404: response = f\\"HTTP/1.0 404 Not FoundrnContent-Type: text/htmlrnrn{body}\\" client_socket.sendall(response.encode(\'utf-8\')) def serve_file(self, client_socket, file_path: str): with open(file_path, \'r\') as file: content = file.read() self.send_response(client_socket, 200, content) # Example Usage if __name__ == \\"__main__\\": server = WebServer(host=\'localhost\', port=8080) server.start()"},{"question":"Given an integer, find the sum of all smaller integers that are coprime to it, including 1. Two integers are coprime if their greatest common divisor (gcd) is 1. If the integer is less than or equal to 1, return `0`. ``` For example: Given integer = 10... sum_of_coprimes(10) = 1 + 3 + 7 + 9 = 20. The numbers 1, 3, 7, and 9 are coprime to 10. sum_of_coprimes(15) = 1 + 2 + 4 + 7 + 8 + 11 + 13 + 14 = 60. The numbers 1, 2, 4, 7, 8, 11, 13, and 14 are coprime to 15. sum_of_coprimes(1) = 0. There are no integers less than 1 that can be summed. sum_of_coprimes(-5) = 0. Since the input is less than or equal to 1, return 0. ``` You may assume the input is a non-zero integer. The function should return an integer representing the sum of all integers less than the provided integer that are coprime to it.","solution":"from math import gcd def sum_of_coprimes(n): Returns the sum of all integers less than n that are coprime with n. If n is less than or equal to 1, it returns 0. if n <= 1: return 0 return sum(i for i in range(1, n) if gcd(i, n) == 1)"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the length of the shortest contiguous subarray whose sum is greater than or equal to `k`. If no such subarray exists, return `-1`. ```Python For example: find_min_length([2, 3, 1, 2, 4, 3], 7) should return 2 because the subarray [4, 3] has the minimal length under the problem constraint. find_min_length([1, 4, 4], 8) should return 2 because the subarray [4, 4] has the minimal length under the problem constraint. find_min_length([1, 1, 1, 1, 1, 1, 1], 11) should return -1 because no subarray sums to 11 or more. ``` # Constraints: - The input list will have at most length 10000. - Each element in the input list will be a positive integer. - The value of `k` will be a positive integer. You need to implement the function `find_min_length(nums: List[int], k: int) -> int` that returns the desired result based on the described requirements.","solution":"def find_min_length(nums, k): n = len(nums) min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += nums[end_index] while current_sum >= k: min_length = min(min_length, end_index - start_index + 1) current_sum -= nums[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"# Story Lisa is playing a game where she is navigating through a 2D grid. She starts from a given position and follows a sequence of moves described by a series of steps in the four cardinal directions: up (\'U\'), down (\'D\'), left (\'L\'), and right (\'R\'). Each move takes her one unit in the respective direction. The aim of the game is to determine if Lisa will eventually return to her starting position after completing all the moves in the sequence. Task Write a function `will_return_to_start(moves)` to determine if the sequence of moves will bring Lisa back to her starting position on the grid. **Input**: - A string `moves` representing the sequence of moves Lisa will make, where each character is one of \'U\', \'D\', \'L\', \'R\'. **Output**: - Return `True` if Lisa returns to her starting position after executing the entire sequence of moves, `False` otherwise. Examples ``` will_return_to_start(\\"UDLR\\") == True ``` Lisa returns to her starting position after performing the sequence of moves: up, down, left, and right. ``` will_return_to_start(\\"UUDDLRLR\\") == True ``` Lisa returns to her starting position after performing sequential up moves twice, down moves twice, left and right moves each twice. ``` will_return_to_start(\\"UUDD\\") == False ``` Lisa does not return to her starting position, as the vertical movements cancel each other out, but there is no horizontal movement. ``` will_return_to_start(\\"\\") == True ``` With no movement, Lisa remains at her starting position.","solution":"def will_return_to_start(moves): Determines if the sequence of moves will bring Lisa back to her starting position on the grid. :param moves: A string representing the sequence of moves (\'U\', \'D\', \'L\', \'R\'). :return: True if Lisa returns to her starting position, False otherwise. # Initialize starting position x, y = 0, 0 # Iterate through each move and update position for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 # Lisa returns to starting position if both coordinates are zero return x == 0 and y == 0"},{"question":"You are part of a team developing a new game called \\"Kingdom Treasure Hunt\\". In this game, players collect treasures in various kingdoms. Each treasure has a certain value, and players can accumulate values by collecting treasures. However, there is a catch: The total value of collected treasures cannot exceed a certain limit, as the player\'s character cannot carry more than this limit. Your task is to help the players decide which treasures to collect in order to maximize the total value without exceeding the weight limit. For simplicity, consider that each treasure\'s weight is equal to its value. -----Input----- - The first line contains two integers n and W separated by a space, where 1 leq n leq 1000 is the number of treasures, and 1 leq W leq 100000 is the maximum weight the player can carry. - The second line contains n space-separated integers representing the values (and weights) of the treasures, where each value is a positive integer less than 1000. -----Output----- - Output a single integer, the maximum total value the player can collect without exceeding the weight limit W. -----Examples----- Sample Input 1: 5 10 1 4 8 5 3 Sample Output 1: 10 Sample Input 2: 4 7 4 5 6 3 Sample Output 2: 7 Sample Input 3: 3 50 10 20 30 Sample Output 3: 50","solution":"def maximize_treasure_value(n, W, treasure_values): dp = [0] * (W + 1) for value in treasure_values: for w in range(W, value - 1, -1): dp[w] = max(dp[w], dp[w - value] + value) return dp[W] def parse_input_and_solve(input_str): lines = input_str.strip().split(\\"n\\") n, W = map(int, lines[0].strip().split()) treasure_values = list(map(int, lines[1].strip().split())) return maximize_treasure_value(n, W, treasure_values)"},{"question":"Create a class `Matrix` that supports basic (2D) matrix operations. In your class, you should support the following operations, given Matrix `m` and Matrix `n`: ```python m + n # returns a new Matrix that is the result of adding them m - n # same, but with subtraction m * n # returns a new Matrix that is the product of the given matrices m.transpose() # returns a new Matrix that is the transpose of the given matrix m == n # returns true if they are identical in terms of dimensions and values m.to_list() # returns a list of lists representation of the matrix str(m) # returns a string representation of the matrix, row by row ``` Each `Matrix` should be created from a 2D list of numbers, and internally, your class should ensure valid matrix operations conforming to mathematical rules. For operations that are not possible (like adding matrices of different dimensions), raise a `ValueError`.","solution":"class Matrix: def __init__(self, data): self.data = data self.rows = len(data) self.cols = len(data[0]) if data else 0 def __add__(self, other): if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices must have the same dimensions to add\\") result = [[self.data[i][j] + other.data[i][j] for j in range(self.cols)] for i in range(self.rows)] return Matrix(result) def __sub__(self, other): if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices must have the same dimensions to subtract\\") result = [[self.data[i][j] - other.data[i][j] for j in range(self.cols)] for i in range(self.rows)] return Matrix(result) def __mul__(self, other): if self.cols != other.rows: raise ValueError(\\"Number of columns of the first matrix must equal the number of rows of the second matrix\\") result = [[sum(self.data[i][k] * other.data[k][j] for k in range(self.cols)) for j in range(other.cols)] for i in range(self.rows)] return Matrix(result) def transpose(self): result = [[self.data[j][i] for j in range(self.rows)] for i in range(self.cols)] return Matrix(result) def __eq__(self, other): return self.data == other.data def to_list(self): return self.data def __str__(self): return \\"n\\".join([\\"t\\".join(map(str, row)) for row in self.data])"},{"question":"Write a function `arithmetic_expression_evaluator(expression)` that takes a string parameter `expression` and evaluates it as a mathematical expression. The input expressions can contain positive integers, the operators `+`, `-`, `*`, and `/`, and parentheses `()`. The function should return the result of the expression as a float or an integer, depending on the content of the input. You need to follow the standard rules of operator precedence: 1. Parentheses have the highest precedence and can be nested. 2. Multiplication `*` and division `/` are evaluated next. 3. Addition `+` and subtraction `-` are evaluated last. You may assume that all the input expressions are valid. # Examples: ```python arithmetic_expression_evaluator(\\"3+5/2\\") => 5.5 arithmetic_expression_evaluator(\\"(2+3)*4\\") => 20 arithmetic_expression_evaluator(\\"10 + 2 * 6\\") => 22 arithmetic_expression_evaluator(\\"100 * 2 + 12\\") => 212 arithmetic_expression_evaluator(\\"100 * ( 2 + 12 ) / 14\\") => 100.0 ``` # Constraints: - The input string expression will be non-empty and contain only valid characters as mentioned above. - Python\'s `eval` function is not allowed. Note: You may implement any algorithm necessary to correctly evaluate the expression. Consider converting the expression to Reverse Polish Notation or using a stack-based approach to handle the operators and their precedence.","solution":"def arithmetic_expression_evaluator(expression): def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a / b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(expression)"},{"question":"Nick loves gardening and has a spacious plot of land represented by a rectangular grid of size n times m. He enjoys planting different types of flowers and decided to plant exactly one flower in each cell of the grid. Each flower is represented by an integer, where different integers represent different types of flowers. One day, to make his garden more visually appealing, Nick decided to change the arrangement of flowers so that no two adjacent cells (horizontally or vertically) contain the same type of flower. With this new requirement, he wondered if it\'s possible to reassign the flower types such that the garden meets the criteria. Your task is to help Nick determine if it\'s possible to rearrange the flowers in the grid to satisfy the condition mentioned above. -----Input----- The input starts with an integer t – the number of test cases (1 ≤ t ≤ 100). For each test case: - The first line contains two integers n and m – the number of rows and columns in the grid (1 ≤ n, m ≤ 100). - The next n lines each contain m integers describing the initial arrangement of flower types in the grid. -----Output----- For each test case, if it is possible to rearrange the flowers such that no two adjacent cells contain the same type of flower, print ‘YES’. Otherwise, print ‘NO’. -----Examples----- Sample Input: 2 2 2 1 2 3 4 2 3 1 2 3 3 1 2 Sample Output: YES YES","solution":"def can_rearrange_garden(t, test_cases): results = [] for n, m, grid in test_cases: # It\'s always possible to rearrange if n*m <= 4 because we can use 2 different flowers in a chessboard pattern. if min(n, m) == 1: # If there\'s at least one row or column, it\'s straightforward results.append(\\"YES\\") continue if n == 2 and m == 2: # Special case for 2x2 grid results.append(\\"YES\\") continue # For larger grids, we can always use a chessboard pattern for any combination of n and m. results.append(\\"YES\\") return results"},{"question":"Jake is trying to debug his program that processes a large list of integers. He wants to identify a subarray of contiguous elements that has the maximum possible sum. Create a function to help Jake find this subarray. **Input** - The input consists of two lines. - The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. - The second line contains n integers separated by spaces, representing the elements of the list. Each integer can be positive, negative, or zero with an absolute value not exceeding 1000. **Output** - Print a single integer — the maximum possible sum of any subarray. **Examples** Input 6 -2 1 -3 4 -1 2 1 -5 4 Output 6 [Explanation: The subarray (4, -1, 2, 1) has the maximum sum 6] Input 5 -1 -2 -3 -4 -5 Output -1 [Explanation: The subarray (-1) has the maximum sum -1 as all elements are negative.] Input 8 2 -3 4 -1 -2 1 5 -3 Output 7 [Explanation: The subarray (4, -1, -2, 1, 5) has the maximum sum 7]","solution":"def max_subarray_sum(arr): This function finds the maximum sum of any contiguous subarray within the given array. :param arr: List of integers :return: Integer - maximum subarray sum max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A group of friends decided to organize a \\"Secret Santa\\" gift exchange where each participant randomly draws the name of another participant to whom they will give a gift. The rules they follow are: 1. Each participant must give one gift and receive one gift. 2. A participant cannot give themselves a gift. Write a function that simulates the \\"Secret Santa\\" drawing, taking a list of participant names and returning a dictionary where each key is a participant\'s name and the value is the name of the participant they should give a gift to. If there are multiple valid drawings, any of them is acceptable. If no valid drawing is possible, the function should return None. # Input - A list of strings representing the names of participants (2 ≤ len(names) ≤ 100), where each element is a unique name. # Output - A dictionary representing the \\"Secret Santa\\" drawing where each key is a participant\'s name, and the value is another participant\'s name indicating whom they should give a gift to. If no valid drawing is possible, return None. # Example Input ```python [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Diana\\"] ``` Output ```python { \\"Alice\\": \\"Charlie\\", \\"Bob\\": \\"Diana\\", \\"Charlie\\": \\"Alice\\", \\"Diana\\": \\"Bob\\" } ``` Input ```python [\\"Alice\\", \\"Bob\\"] ``` Output ```python { \\"Alice\\": \\"Bob\\", \\"Bob\\": \\"Alice\\" } ``` # Implementation Considerations - Generate the mapping such that no participant is assigned to themselves. - Use randomization to ensure different valid pairings are possible upon multiple executions of the function. - You may use the `random` module in Python for shuffling the participants\' list or other random operations to generate pairings. # Function Signature ```python def secret_santa(participants: List[str]) -> Dict[str, str]: ```","solution":"import random def secret_santa(participants): Generates a Secret Santa assignment such that no one is assigned to themselves. Parameters: participants (list): A list of participants\' names. Returns: dict: A dictionary where keys are the participants\' names and values are the names of the participants they should give a gift to or None if a valid assignment is not possible. if len(participants) < 2: return None shuffled = participants[:] valid_drawing = False while not valid_drawing: random.shuffle(shuffled) valid_drawing = all(a != b for a, b in zip(participants, shuffled)) return {p: s for p, s in zip(participants, shuffled)}"},{"question":"Tom has a task to implement a function that takes a string and determines if it is a valid IPv4 address or not. An IPv4 address is a string in the form \\"a.b.c.d\\", where a, b, c, and d are integers between 0 and 255. Leading zeros are not allowed, and each of a, b, c, and d should consist of only digits. For example: - \\"192.168.0.1\\" is a valid IPv4 address. - \\"256.256.256.256\\" is not a valid IPv4 address. - \\"192.168.01.1\\" is not a valid IPv4 address. - \\"192.168.0\\" is not a valid IPv4 address. - \\"abc.def.ghi.jkl\\" is not a valid IPv4 address. - \\"172.16.254.1\\" is a valid IPv4 address. Here are a few sample cases to test your function: ```python is_valid_ipv4(\\"192.168.0.1\\"); # returns True is_valid_ipv4(\\"256.256.256.256\\"); # returns False is_valid_ipv4(\\"192.168.01.1\\"); # returns False is_valid_ipv4(\\"192.168.0\\"); # returns False is_valid_ipv4(\\"abc.def.ghi.jkl\\"); # returns False is_valid_ipv4(\\"172.16.254.1\\"); # returns True ``` Write a function to determine if the given string is a valid IPv4 address. ```python def is_valid_ipv4(ip: str) -> bool: pass ```","solution":"def is_valid_ipv4(ip: str) -> bool: Determines if the given string is a valid IPv4 address. parts = ip.split(\\".\\") # An IPv4 address should have exactly 4 parts separated by \\".\\" if len(parts) != 4: return False for part in parts: # Each part should consist only of digits if not part.isdigit(): return False # Each part should not have leading zeros unless it\'s exactly \\"0\\" if part != \\"0\\" and part.startswith(\\"0\\"): return False # Each part should be in the range 0 to 255 num = int(part) if num < 0 or num > 255: return False return True"},{"question":"Juliana is organizing a warehouse filled with boxes of different weights. To make it easier to transport the boxes, she decides to group them onto pallets. Each pallet can hold a maximum weight of W units. She wants to minimize the number of pallets needed to carry all the boxes. Juliana can only place boxes on a pallet if their current total weight does not exceed the pallet\'s weight capacity W. ------Input------ The first line contains a single integer W (1 ≤ W ≤ 1 000) — the maximum weight a pallet can hold. The second line contains an integer n (1 ≤ n ≤ 1 000) — the number of boxes in the warehouse. The third line contains n integers w_i (1 ≤ w_i ≤ W) — the weights of the boxes. ------Output------ Print the minimum number of pallets needed to transport all the boxes. ------Example------ Input 10 4 2 4 4 6 Output 2 Input 15 6 5 8 3 12 4 2 Output 3 ------Note------ In the first example, one optimal way to group the boxes is to put boxes with weights [2, 4, 4] on one pallet (total weight 10) and the box with weight [6] on another pallet. In the second example, an optimal way to group the boxes is to use three pallets: [5, 8], [12, 3], and [2, 4].","solution":"def min_pallets_needed(W, n, weights): Returns the minimum number of pallets needed to transport all the boxes. W: int - The maximum weight a pallet can hold. n: int - The number of boxes in the warehouse. weights: list of int - The weights of the boxes. weights.sort(reverse=True) pallets = 0 while weights: current_pallet_weight = 0 remaining_boxes = [] for weight in weights: if current_pallet_weight + weight <= W: current_pallet_weight += weight else: remaining_boxes.append(weight) weights = remaining_boxes pallets += 1 return pallets"},{"question":"Chotu is very interested in different string manipulations and often plays around with various string operations. One day, while working with strings, Chotu thought about a fun problem. He decided to reverse the order of characters within each word in a given string, while keeping the words in the original order. Given a string S consisting of different words separated by spaces, write a function that returns a new string where the characters within each word are reversed but the order of words remains the same. Input - The input consists of a single line containing the string S. - The length of S is at most 1000. - S contains only printable ASCII characters and spaces, and there will be no leading or trailing spaces. Output - Output a single line containing the modified string. Constraints - 1 ≤ length of S ≤ 1000 Example Input: This is an example Output: sihT si na elpmaxe Explanation For the given input \\"This is an example\\": - \\"This\\" becomes \\"sihT\\" - \\"is\\" becomes \\"si\\" - \\"an\\" becomes \\"na\\" - \\"example\\" becomes \\"elpmaxe\\" Therefore, the output is \\"sihT si na elpmaxe\\".","solution":"def reverse_words_in_string(s): Given a string s, return a new string where the characters within each word are reversed but the order of words remains the same. return \' \'.join(word[::-1] for word in s.split())"},{"question":"Problem You are given a list of integers representing the stock prices of a company over N days, and you want to perform several operations on this list. Each operation is described by three integers x, y, z : - Set the price on the y-th day to be z (When x = 1 ) - Find and report the sum of the prices from the y-th day to the z-th day (When x = 2 ) - Find and report the maximum price from the y-th day to the z-th day (When x = 3 ) - Find and report the minimum price from the y-th day to the z-th day (When x = 4 ) Constraints The input satisfies the following conditions: - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq price_i leq 10^9 - 1 leq x_i leq 4 - 1 leq y_i leq N (when 1 leq x_i leq 1 ) - 1 leq y_i leq N and y_i leq z_i leq N (when 2 leq x_i leq 4 ) Input The input is given in the following format: N price_1 , price_2 , ldots , price_N Q x_1 , y_1 , z_1 x_2 , y_2 , z_2 ... x_Q , y_Q , z_Q Output Every time an operation of x = 2 , x = 3 , or x = 4 is given by input, the result is output on one line. Example Input 6 10 20 30 40 50 60 8 2 2 5 3 1 6 4 3 5 1 5 25 3 4 6 4 2 4 2 1 3 4 1 6 Output 140 60 30 60 20 60","solution":"def stock_operations(prices, operations): results = [] for op in operations: x, y, z = op if x == 1: prices[y-1] = z elif x == 2: results.append(sum(prices[y-1:z])) elif x == 3: results.append(max(prices[y-1:z])) elif x == 4: results.append(min(prices[y-1:z])) return results"},{"question":"Alice and Bob are playing a game that involves a sequence of parentheses. The objective of the game is to find whether the sequence is well-formed or not. A sequence of parentheses is considered well-formed if each opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs are correctly nested. Alice gives Bob a sequence of parentheses and asks Bob to determine if the sequence is well-formed. Can you help Bob write a function to solve this problem? Input The first line contains a single integer t — the number of test cases. Each of the next t lines contains a sequence of parentheses consisting of characters \'(\' and \')\'. The length of each sequence does not exceed 105. Output For each test case, print \\"YES\\" if the sequence is well-formed, and \\"NO\\" otherwise. Examples Input 3 () (())) (()) Output YES NO YES Note In the first test case, the sequence \\"()\\" is well-formed. In the second test case, the sequence \\"(()))\\" is not well-formed because there is one closing parenthesis without a corresponding opening parenthesis. In the third test case, the sequence \\"(())\\" is well-formed.","solution":"def is_well_formed_parentheses(sequence): Returns \\"YES\\" if the sequence of parentheses is well-formed, otherwise \\"NO\\". stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if stack: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def check_sequences(t, sequences): Accepts number of test cases t and a list of sequences. Returns a list of results for each sequence indicating if they are well-formed or not. results = [] for seq in sequences: results.append(is_well_formed_parentheses(seq)) return results"},{"question":"You are given a string `s` and a set of words `wordSet`. The goal is to determine whether the string `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordSet`. Write a function `wordBreak(s: str, wordSet: Set[str]) -> bool` that returns `True` if `s` can be segmented into a sequence of one or more of the given words from `wordSet`, and `False` otherwise. # Input - A string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 300). - A set of words `wordSet` (1 ≤ |wordSet| ≤ 1000) where each word consists of lowercase English letters and has length between 1 and 20. # Output - Return `True` if the string `s` can be segmented as described, otherwise return `False`. # Example Example 1: # Input: ``` s = \\"leetcode\\" wordSet = {\\"leet\\", \\"code\\"} ``` # Output: ``` True ``` Example 2: # Input: ``` s = \\"applepenapple\\" wordSet = {\\"apple\\", \\"pen\\"} ``` # Output: ``` True ``` Example 3: # Input: ``` s = \\"catsandog\\" wordSet = {\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"} ``` # Output: ``` False ``` # Note: In the first example, `\\"leetcode\\"` can be segmented as `\\"leet code\\"`. In the second example, `\\"applepenapple\\"` can be segmented as `\\"apple pen apple\\"`. In the third example, `\\"catsandog\\"` cannot be fully segmented into words from `wordSet`.","solution":"from typing import Set def wordBreak(s: str, wordSet: Set[str]) -> bool: Determines if the string s can be segmented into a space-separated sequence of one or more dictionary words from wordSet. n = len(s) dp = [False] * (n + 1) dp[0] = True # base case: an empty string can be segmented for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in wordSet: dp[i] = True break return dp[n]"},{"question":"Given an array of integers, return a new array where each element at index `i` is the product of all the numbers in the original array except the one at `i`. For example, given `[1, 2, 3, 4]`, the new array should be `[24, 12, 8, 6]`. To get these products, you must not use the division operation. Instead, you can follow this process: 1. Build an array `left_products` where `left_products[i]` contains the product of all the elements to the left of index `i`. Initialize `left_products[0]` to 1. 2. Build an array `right_products` where `right_products[i]` contains the product of all the elements to the right of index `i`. Initialize `right_products[length - 1]` to 1. 3. Construct the new array by multiplying `left_products[n]` and `right_products[n]` for each index `n`. # Example: Given the same array `[1, 2, 3, 4]`: 1. Compute `left_products`: ``` left_products[0] = 1 left_products[1] = 1 * 1 = 1 left_products[2] = 1 * 2 = 2 left_products[3] = 2 * 3 = 6 Resulting in: [1, 1, 2, 6] ``` 2. Compute `right_products`: ``` right_products[3] = 1 right_products[2] = 4 * 1 = 4 right_products[1] = 3 * 4 = 12 right_products[0] = 2 * 12 = 24 Resulting in: [24, 12, 4, 1] ``` 3. Compute the product array: ``` product[0] = left_products[0] * right_products[0] = 1 * 24 = 24 product[1] = left_products[1] * right_products[1] = 1 * 12 = 12 product[2] = left_products[2] * right_products[2] = 2 * 4 = 8 product[3] = left_products[3] * right_products[3] = 6 * 1 = 6 Resulting in: [24, 12, 8, 6] ``` # Task: Write a function `product_array(nums)` that takes an array of integers and returns an array of products as described above. # Examples: ``` product_array([1, 2, 3, 4]) => [24, 12, 8, 6] product_array([2, 3, 4, 5]) => [60, 40, 30, 24] product_array([1, 1, 1, 1]) => [1, 1, 1, 1] ``` # Notes: - The function should handle an input array of any length `n`, including an empty array or an array with one element. - The function should not use division. - Consider edge cases where the array might contain zeros.","solution":"def product_array(nums): This function returns a new array where each element at index i is the product of all the numbers in the original array except the one at i. n = len(nums) if n == 0: return [] if n == 1: return [1] # Initialize the left and right product arrays left_products = [1] * n right_products = [1] * n result = [0] * n # Build the left products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Build the right products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Build the result array for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a function that takes an integer n as an argument and returns the product of all prime numbers less than or equal to n. Assume n will always be a positive integer greater than 1. For example: primeProduct(5) should return 30, because the prime numbers less than or equal to 5 are 2, 3, and 5, and their product is 30. primeProduct(7) should return 210, because the prime numbers less than or equal to 7 are 2, 3, 5, and 7, and their product is 210. Your function must be optimized to handle larger values of n efficiently.","solution":"def primeProduct(n): Returns the product of all prime numbers less than or equal to n. def is_prime(x): if x < 2: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True product = 1 for num in range(2, n + 1): if is_prime(num): product *= num return product"},{"question":"Sarah works in a logistics company and is responsible for categorizing packages based on their weights. The company has set the following rules for categorizing the packages: - Lightweight: weight ≤ 5 kg - Medium-weight: 5 kg < weight ≤ 20 kg - Heavyweight: weight > 20 kg Your task is to write a program that determines the category for each package based on its weight. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of packages. - The next N lines each contain a single integer W, denoting the weight of a package. ------ Output Format ------ For each package, output its category on a new line. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ W ≤ 100 ----- Sample Input 1 ------ 5 3 8 21 15 5 ----- Sample Output 1 ------ Lightweight Medium-weight Heavyweight Medium-weight Lightweight ----- Explanation 1 ------ Test case 1: The weight is ≤ 5 kg. Thus, the package is categorized as \\"Lightweight\\". Test case 2: The weight is greater than 5 kg and ≤ 20 kg. Thus, the package is categorized as \\"Medium-weight\\". Test case 3: The weight is greater than 20 kg. Thus, the package is categorized as \\"Heavyweight\\". Test case 4: The weight is greater than 5 kg and ≤ 20 kg. Thus, the package is categorized as \\"Medium-weight\\". Test case 5: The weight is ≤ 5 kg. Thus, the package is categorized as \\"Lightweight\\".","solution":"def categorize_packages(weights): Categorizes packages based on their weights. Parameters: weights (list of int): List of weights of the packages. Returns: list of str: List of categories each corresponding to the weight. categories = [] for weight in weights: if weight <= 5: categories.append(\'Lightweight\') elif weight <= 20: categories.append(\'Medium-weight\') else: categories.append(\'Heavyweight\') return categories def main(input_lines): Main function to process input and output the categories. Parameters: input_lines (list of str): List of input lines where the first line is the number of packages Prints: Corresponding category for each package. N = int(input_lines[0]) weights = [int(input_lines[i + 1]) for i in range(N)] categories = categorize_packages(weights) for category in categories: print(category) # Example of usage: # input_lines = [ # \'5\', # \'3\', # \'8\', # \'21\', # \'15\', # \'5\' # ] # main(input_lines)"},{"question":"Given an array of positive integers representing the heights of candles on a birthday cake, determine the maximum number of candles that can be blown out with one breath. To blow out a candle, all candles must be of the same maximum height. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers H_1, H_2, ldots, H_N representing the heights of the candles. -----Output----- For each test case, print a single line containing one integer ― the maximum number of candles that can be blown out in one breath. -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - 1 le H_i le 10000 for each valid i -----Example Input----- 2 4 3 2 1 3 5 4 4 1 3 4 -----Example Output----- 2 3 -----Explanation----- Example case 1: The tallest candles have a height of 3. There are two of these, so two candles can be blown out in one breath. Example case 2: The tallest candles have a height of 4. There are three of these, so three candles can be blown out in one breath.","solution":"def max_candles_blown_out(T, test_cases): Given a number of test cases containing heights of candles, returns the maximum number of candles of the same maximum height that can be blown out for each test case. Parameters: T (int): Number of test cases. test_cases (list of list of int): List containing each test case where the first entry is the number of candles and the second entry is a list of heights. Returns: list of int: List containing the result for each test case. results = [] for case in test_cases: N, heights = case max_height = max(heights) max_candles = heights.count(max_height) results.append(max_candles) return results"},{"question":"A group of friends gathers to play their favorite card game. The rules are simple: they use a deck of cards where each card has a rank and suit. The game will only be played if there are no duplicate cards in the deck, meaning each card must have a unique combination of rank and suit. You are given a list of cards represented as strings. Each string contains two characters: the first character is the rank and the second character is the suit. The ranks are the digits \'2\' through \'9\' and the letters \'T\', \'J\', \'Q\', \'K\', \'A\' representing ten, jack, queen, king, and ace, respectively. The suits are represented by the letters \'H\', \'D\', \'C\', and \'S\' for hearts, diamonds, clubs, and spades, respectively. Your task is to determine if the deck of cards provided is valid, meaning it contains no duplicates. If the deck is valid, output \\"Valid deck\\"; otherwise, output \\"Invalid deck\\". ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 52) — the number of cards in the deck. The next n lines contain a string consisting of two characters representing each card. ----- Output ----- Output a single line with either \\"Valid deck\\" if no duplicates are found or \\"Invalid deck\\" if any duplicate cards are present. ----- Examples ----- Input 4 AS 10D KH JC Output Valid deck Input 5 3H 3H 7C 9D QS Output Invalid deck Input 2 2H 2D Output Valid deck","solution":"def check_deck_validity(n, cards): Determines if the given deck of cards is valid (no duplicates). Args: n (int): The number of cards in the deck. cards (List[str]): A list of strings representing the cards in the deck. Returns: str: \\"Valid deck\\" if the deck has no duplicate cards, otherwise \\"Invalid deck\\". unique_cards = set(cards) if len(unique_cards) == n: return \\"Valid deck\\" else: return \\"Invalid deck\\""},{"question":"You are given an integer array `arr` of size `n`. Your task is to write a program that finds the sum of all subarrays of the given array. A subarray is a contiguous part of an array. The program should calculate the sum of each possible subarray and output the total sum. Input The first line contains the number of test cases, T. The following lines contain: - The first line of each test case contains a single integer n, the size of the array. - The second line contains n space-separated integers representing the elements of the array `arr`. Output For each test case, print a single integer representing the sum of all subarrays of the given array. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 100 -10^3 ≤ arr[i] ≤ 10^3 SAMPLE INPUT 2 3 1 2 3 4 1 2 3 4 SAMPLE OUTPUT 20 50 Explanation **Test Case 1:** The subarrays of [1, 2, 3] are: [1], [2], [3], [1, 2], [2, 3], [1, 2, 3] Their sums are: 1, 2, 3, 3, 5, 6 Total sum = 1 + 2 + 3 + 3 + 5 + 6 = 20 **Test Case 2:** The subarrays of [1, 2, 3, 4] are: [1], [2], [3], [4], [1, 2], [2, 3], [3, 4], [1, 2, 3], [2, 3, 4], [1, 2, 3, 4] Their sums are: 1, 2, 3, 4, 3, 5, 7, 6, 9, 10 Total sum = 1 + 2 + 3 + 4 + 3 + 5 + 7 + 6 + 9 + 10 = 50","solution":"def sum_of_subarrays(arr): n = len(arr) total_sum = 0 for i in range(n): subarray_sum = 0 for j in range(i, n): subarray_sum += arr[j] total_sum += subarray_sum return total_sum def process_test_cases(t, cases): results = [] for i in range(t): n = cases[i][0] arr = cases[i][1] results.append(sum_of_subarrays(arr)) return results"},{"question":"Given a string S consisting of lowercase letters, find the smallest character that appears consecutively at least K times. If no such character exists, return \'None\'. Example 1: Input: S = \\"aaabbbcccbbaaa\\" K = 3 Output: \\"a\\" Explanation: The character \'a\' appears consecutively 3 times. Example 2: Input: S = \\"xyzzyxxxy\\" K = 2 Output: \\"x\\" Explanation: The character \'x\' is the smallest character that appears consecutively at least 2 times. Example 3: Input: S = \\"abcdef\\" K = 2 Output: \\"None\\" Explanation: No character appears consecutively 2 times. Your Task: You do not need to read input or print anything. Your task is to complete the function `smallestConsecutiveCharacter()` which takes the string S and an integer K as input parameters and returns the smallest character that appears consecutively at least K times, or the string \\"None\\" if no such character exists. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(S) ≤ 10^5 1 ≤ K ≤ len(S)","solution":"def smallestConsecutiveCharacter(S, K): Returns the smallest character that appears consecutively at least K times in string S. If no such character exists, returns \'None\'. n = len(S) min_char = None i = 0 while i < n: count = 1 while i + 1 < n and S[i] == S[i + 1]: count += 1 i += 1 if count >= K: if min_char is None or S[i] < min_char: min_char = S[i] i += 1 return min_char if min_char is not None else \\"None\\""},{"question":"Sum of Unique Numbers Write a function, `uniqueSum` that takes a list of numbers as an argument and returns the sum of all unique numbers in the list. A number is considered unique if it appears exactly once in the list. **Examples:** ```python uniqueSum([1, 2, 2, 3, 4]) # returns 8 (1 + 3 + 4) uniqueSum([4, 4, 4, 4]) # returns 0 (no unique numbers) uniqueSum([1, 1, 2, 3, 5]) # returns 10 (2 + 3 + 5) uniqueSum([]) # returns 0 (no numbers in the list) ``` **Notes:** - The input list will only contain integers and can be empty. - If there are no unique numbers, the function should return 0.","solution":"def uniqueSum(nums): Returns the sum of all unique numbers in the list. A number is considered unique if it appears exactly once in the list. from collections import Counter counts = Counter(nums) unique_numbers = [num for num, count in counts.items() if count == 1] return sum(unique_numbers)"},{"question":"Sam is organizing a charity event and plans to distribute food to the attendees. Each attendee can belong to one of three different categories: VIPs, Regulars, and Newcomers. Sam wants to ensure that the distribution of food is fair, adhering to the minimum required amounts for each category. The details are as follows: - Each VIP must receive at least 150 grams of food. - Each Regular must receive at least 80 grams of food. - Each Newcomer must receive at least 40 grams of food. You are given Y grams of food and the count of attendees in each category. You need to help Sam determine if it is possible to distribute the food according to the stated requirements. If possible, print the amount of food given to each category. If not, print \\"Not Possible\\". INPUT First line contains N, the number of test cases (1 ≤ N ≤ 100). Each of the following N lines contains the total amount of food available Y (1 ≤ Y ≤ 5000000), followed by three integers representing the number of VIPs, Regulars, and Newcomers, respectively. OUTPUT For each test case, if the distribution is possible, print the amount of food given to VIPs, Regulars, and Newcomers, respectively. If not, print \\"Not Possible\\". SAMPLE INPUT 2 2000 5 10 15 1000 3 7 20 SAMPLE OUTPUT 750 800 450 Not Possible EXPLANATION In the first case, you have 2000 grams of food and must distribute it among 5 VIPs, 10 Regulars, and 15 Newcomers: - VIPs require 5 * 150 = 750 grams - Regulars require 10 * 80 = 800 grams - Newcomers require 15 * 40 = 600 grams The total required is 750 + 800 + 600 = 2150 grams. Since this exceeds the available 2000 grams, the distribution is not initially possible. However, by continuously checking group priorities (first VIPs, then Regulars, then Newcomers), and allocating any remaining food, if all groups meet at least their minimum requirement, the final distribution works out. In the second case, you have only 1000 grams of food and need: - VIPs: 3 * 150 = 450 grams - Regulars: 7 * 80 = 560 grams - Newcomers: 20 * 40 = 800 grams The total requirement is 450 + 560 + 800 = 1810 grams which exceeds 1000 grams, making it \\"Not Possible\\".","solution":"def distribute_food(test_cases): results = [] for case in test_cases: Y, VIPs, Regulars, Newcomers = case required_vips = VIPs * 150 required_regulars = Regulars * 80 required_newcomers = Newcomers * 40 total_required = required_vips + required_regulars + required_newcomers if total_required <= Y: results.append(f\\"{required_vips} {required_regulars} {required_newcomers}\\") else: results.append(\\"Not Possible\\") return results"},{"question":"You have been tasked with arranging students\' names in alphabetical order. Each student has a first name and a last name. Your program should sort the names first by the last name. If two students have the same last name, they should be sorted by their first names. Input The input will consist of multiple lines, each containing a first name and a last name separated by a space. The input is terminated by a line consisting only of \'#\'. Output For each test case, output the sorted list of names. Each name should appear on a new line in the format \\"First Last\\". Constraints - Each name (first and last) will contain only alphabetic characters and will have a length between 1 and 100. - The number of names will not exceed 100. Example Input John Doe Jane Smith Alice Johnson Bob Brown # Output Bob Brown John Doe Alice Johnson Jane Smith","solution":"def sort_names(input_lines): Sorts a list of names by last name first, and then by first name if last names are the same. :param input_lines: List of strings where each string is \\"First Last\\" name. The last item is \'#\'. :return: Sorted list of names in the format [\\"First Last\\", ...] names = [] for line in input_lines: if line.strip() == \'#\': break names.append(line.strip()) names.sort(key=lambda name: (name.split()[1], name.split()[0])) return names"},{"question":"You are given a grid with n rows and m columns. Yeshea starts at the top-left corner of the grid, and her goal is to reach the bottom-right corner. She can only move right or down. However, there are some cells in the grid that contain obstacles, and she cannot move into these cells. Formally, the grid can be represented as an n times m matrix, where an empty cell is denoted by a `0`, and a cell with an obstacle is denoted by a `1`. Yeshea wants to find the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Since the number of paths can be large, you need to return it modulo 10^9 + 7. Write a program to determine the number of distinct paths Yeshea can take from the top-left to the bottom-right of the grid. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. The next n lines each contain m characters, where each character is either `0` (an empty cell) or `1` (a cell containing an obstacle). -----Output----- Output a single integer — the number of distinct paths that Yeshea can take from the top-left to the bottom-right of the grid, modulo 10^9 + 7. If there are no such paths, return 0. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 Input 3 3 1 0 0 0 0 0 0 0 0 Output 0 -----Note----- In the first test case, the possible paths are: (0,0) → (0,1) → (0,2) → (1,2) → (2,2) (0,0) → (1,0) → (2,0) → (2,1) → (2,2) In the second test case, the only possible path is: (0,0) → (1,0) → (2,0) → (2,1) → (2,2)","solution":"def num_paths(grid, n, m): MOD = 10**9 + 7 # If starting or ending cell is blocked, no paths if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: continue if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1] # Function to convert input strings to the expected format def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") n, m = map(int, input_lines[0].split()) grid = [list(map(int, line.split())) for line in input_lines[1:]] return grid, n, m"},{"question":"Given an integer array nums[] and an integer k, check if there are two distinct indices i and j in the array such that nums[i] == nums[j] and the absolute difference between i and j is at most k. Example 1: Input: nums = [1,2,3,1], k = 3 Output: true Explanation: There are two 1\'s in the array which are at indices 0 and 3. The absolute difference between indices 0 and 3 is 3, which is at most k. Example 2: Input: nums = [1,0,1,1], k = 1 Output: true Explanation: There are two 1\'s in the array which are at indices 2 and 3. The absolute difference between indices 2 and 3 is 1, which is at most k. Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: false Explanation: The only repeated values are 1, 2, and 3, but the differences between the repeated values are all greater than k. Your Task: This is a function problem. The input is already taken care of by the driver code. You need to complete the function containsNearbyDuplicate() that takes an integer array nums[] and an integer k as input and returns a boolean value indicating whether there are two distinct indices i and j such that nums[i] == nums[j] and the absolute difference between i and j is at most k. The driver code takes care of the printing. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 ≤ nums.length ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 0 ≤ k ≤ 10^5","solution":"def containsNearbyDuplicate(nums, k): Returns true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and the absolute difference between i and j is at most k. index_map = {} # stores the last seen index of each element for i, num in enumerate(nums): if num in index_map: if i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"A company wants to track the usage of its services by different users over time. They decide to log user activity in the form of timestamped records. Your task is to implement a system that can process these logs and provide useful insights. Your program must support the following operations: 1. Add a new activity log for a user. 2. Get the total number of activities performed by a specific user within a given time range. 3. Get the total number of activities performed across all users within a given time range. Input The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of queries. The next n lines describe the queries. Each query can be one of the following three types: 1. \\"add user timestamp\\" - This indicates an activity log for \\"user\\" at \\"timestamp\\". User is a non-empty string and timestamp is an integer (0 ≤ timestamp ≤ 1,000,000). 2. \\"get user start_time end_time\\" - This asks for the total number of activities performed by \\"user\\" in the time range from \\"start_time\\" to \\"end_time\\" (inclusive). start_time and end_time are integers (0 ≤ start_time ≤ end_time ≤ 1,000,000). 3. \\"get_total start_time end_time\\" - This asks for the total number of activities by all users in the time range from \\"start_time\\" to \\"end_time\\" (inclusive). start_time and end_time are integers (0 ≤ start_time ≤ end_time ≤ 1,000,000). Output For each \\"get\\" query, output the respective count in a new line. Example Input 8 add alice 1 add bob 2 add alice 3 add alice 5 get alice 1 3 get bob 1 5 get_total 1 5 get_total 2 3 Output 2 1 4 2 Explanation - The first four lines add activity logs for users \'alice\' and \'bob\'. - The first \\"get\\" query asks for the number of activities performed by \'alice\' between time 1 and 3, inclusive, which is 2 activities (time 1 and 3). - The second \\"get\\" query asks for the number of activities performed by \'bob\' between time 1 and 5, inclusive, which is 1 activity (time 2). - The first \\"get_total\\" query asks for the total number of activities by all users between time 1 and 5, inclusive, which amounts to 4 activities. - The second \\"get_total\\" query asks for the total number of activities by all users between time 2 and 3, inclusive, which amounts to 2 activities (time 2 for \'bob\' and time 3 for \'alice\').","solution":"from collections import defaultdict class ActivityLog: def __init__(self): self.user_logs = defaultdict(list) self.total_logs = [] def add(self, user, timestamp): self.user_logs[user].append(timestamp) self.total_logs.append(timestamp) def get(self, user, start_time, end_time): return sum(1 for timestamp in self.user_logs[user] if start_time <= timestamp <= end_time) def get_total(self, start_time, end_time): return sum(1 for timestamp in self.total_logs if start_time <= timestamp <= end_time) def process_queries(n, queries): log = ActivityLog() result = [] for query in queries: parts = query.split() if parts[0] == \\"add\\": user = parts[1] timestamp = int(parts[2]) log.add(user, timestamp) elif parts[0] == \\"get\\": user = parts[1] start_time = int(parts[2]) end_time = int(parts[3]) result.append(log.get(user, start_time, end_time)) elif parts[0] == \\"get_total\\": start_time = int(parts[1]) end_time = int(parts[2]) result.append(log.get_total(start_time, end_time)) return result"},{"question":"Tom is working on a data science project and needs to perform data normalization on a list of integers. For this project, normalization is defined as scaling the values of the list to fit within the range 0 to 1. The formula to normalize a value x_i from the list is: [ text{norm}(x_i) = frac{x_i - text{min}(X)}{text{max}(X) - text{min}(X)} ] Where: - ( X ) is the list of integers. - ( text{min}(X) ) and ( text{max}(X) ) are the minimum and maximum values in the list, respectively. Write a program to normalize a list of integers. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. The second line contains n space-separated integers ( x_1, x_2, ..., x_n ) (-1000 ≤ ( x_i ) ≤ 1000). -----Output----- Print n space-separated numbers, each representing the normalized value of the corresponding number in the original list with 6 decimal places. -----Examples----- Input 5 1 2 3 4 5 Output 0.000000 0.250000 0.500000 0.750000 1.000000 Input 4 -10 0 10 20 Output 0.000000 0.333333 0.666667 1.000000 -----Note----- In the first case, the minimum value in the list is 1 and the maximum value is 5. Normalizing the values, we get: - norm(1) = (1 - 1) / (5 - 1) = 0.000000 - norm(2) = (2 - 1) / (5 - 1) = 0.250000 - norm(3) = (3 - 1) / (5 - 1) = 0.500000 - norm(4) = (4 - 1) / (5 - 1) = 0.750000 - norm(5) = (5 - 1) / (5 - 1) = 1.000000","solution":"def normalize_list(n, values): Normalize the list of integers to fit within the range 0 to 1. Parameters: n (int): The number of elements in the list. values (list of int): The list of integers to be normalized. Returns: list of float: The normalized values. min_val = min(values) max_val = max(values) if min_val == max_val: return [0.0] * n # Edge case: all elements are the same. normalized_values = [(x - min_val) / (max_val - min_val) for x in values] return normalized_values def format_normalized_list(normalized_values): Format the list of normalized values to 6 decimal places for output. Parameters: normalized_values (list of float): The list of normalized values to format. Returns: str: The formatted string of normalized values. return \' \'.join(f\\"{value:.6f}\\" for value in normalized_values)"},{"question":"A company has a hierarchical organizational structure where each employee has a unique ID number. The company\'s CEO is at the top of the hierarchy and has an ID of 1. Each employee (except the CEO) has exactly one direct manager. An employee\'s direct managers can have other employees as subordinates. You are given the following information to map out the company structure and determine which employees report directly to each manager. Your task is to find out, for each employee, the number of subordinates they have. A subordinate is defined as anyone who reports directly or indirectly to the employee. -----Input----- The first line contains the integer N (1 leq N leq 100000), the number of employees in the company (including the CEO). The next N-1 lines contain two integers each: A and B (1 leq A, B leq N), denoting that employee A is the direct manager of employee B. -----Output----- Output N integers on a single line. For each employee, output the number of subordinates they have, starting from employee ID 1 to employee ID N. -----Examples----- Sample Input 1: 5 1 2 1 3 3 4 3 5 Sample Output 1: 4 0 2 0 0 Sample Input 2: 6 1 2 1 3 2 4 2 5 3 6 Sample Output 2: 5 2 1 0 0 0 Description: - In Sample Input 1, employee 1 manages employees 2 and 3 directly, and employees 4 and 5 indirectly through employee 3. Therefore, employee 1 has 4 subordinates. - In Sample Input 2, employee 1 has 5 subordinates in total. Employee 2 has 2 subordinates (employees 4 and 5). Employee 3 has 1 subordinate (employee 6).","solution":"def count_subordinates(N, employee_relations): from collections import defaultdict, deque # Convert the given relations into an adjacency list (directed graph) tree = defaultdict(list) for A, B in employee_relations: tree[A].append(B) # Prepare an array to store the count of subordinates subordinates_count = [0] * (N + 1) def dfs(node): count = 0 for child in tree[node]: count += 1 + dfs(child) subordinates_count[node] = count return count # Start DFS from the root (CEO, who has an ID of 1) dfs(1) # Returning the result without the placeholder zero index return subordinates_count[1:]"},{"question":"A company is conducting interviews for Software Development Engineer positions, and the hiring team wants to test the candidates on their algorithmic and problem-solving skills. One of the challenges they have prepared involves understanding how well candidates can handle nested data structures and compute specific kinds of operations on them. The problem goes as follows: You are given a list of `N` nested dictionaries, where each dictionary contains keys that are names of employees and values that represent their direct subordinates in similar nested dictionary format. Each employee has an associated value indicating the performance score for that employee. Your task is to write a function that can calculate the total performance score of a specified employee and all their subordinates, recursively down the hierarchy. Input: The first line contains the integer `N`, the number of nested dictionaries. The next `N` lines describe each dictionary. Each dictionary description will start with an integer `M`, the number of direct subordinates for that employee, followed by `M` pairs of space-separated strings and integers representing the employee\'s subordinate\'s name and associated performance score. The last lines contain queries and each query is a single string representing the name of the employee for whom you have to calculate the total performance score for them and all their subordinates. Output: For each query, print the total performance score for that employee and all their subordinates. Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 20 1 ≤ performance score ≤ 1000 Example: Input: 3 2 Alice 95 Bob 90 1 Charlie 80 0 2 Alice Bob Output: 265 90 Explanation: The nested dictionary structure for this problem can be visualized as: { \'Alice\': {\'performance\': 95, \'subordinates\': {\'Bob\': 90, \'Charlie\': {\'performance\': 80, \'subordinates\': {}}}}, \'Bob\': {\'performance\': 90, \'subordinates\': {}}, \'Charlie\': {\'performance\': 80, \'subordinates\': {}} } The total performance score for \'Alice\' is 95 (Alice) + 90 (Bob) + 80 (Charlie) = 265. The total performance score for \'Bob\' is 90.","solution":"def calculate_total_score(employee, hierarchy): This function calculates the total performance score of a specified employee and all their subordinates recursively. :param employee: The name of the employee to calculate the score for. :param hierarchy: The nested dictionary representing the hierarchy structure. :return: The total performance score. # If employee not found in hierarchy if employee not in hierarchy: return 0 # Get the performance score of the employee total_score = hierarchy[employee][\'performance\'] # Recursively add the performance scores of subordinates for subordinate in hierarchy[employee][\'subordinates\']: total_score += calculate_total_score(subordinate, hierarchy) return total_score def build_hierarchy(nested_list): This function builds the hierarchy dictionary from the nested list input. :param nested_list: List of dictionaries in string format. :return: A dictionary representing the hierarchy. hierarchy = {} for record in nested_list: parts = record.split() employee = parts[0] performance = int(parts[1]) subordinates = parts[2:] hierarchy[employee] = {\'performance\': performance, \'subordinates\': {}} for i in range(0, len(subordinates), 2): subordinate = subordinates[i] subordinate_performance = int(subordinates[i+1]) hierarchy[employee][\'subordinates\'][subordinate] = {\'performance\': subordinate_performance, \'subordinates\': {}} return hierarchy def solution(N, input_list, queries): nested_list = input_list[:N] records = list(map(str.strip, nested_list)) hierarchy = build_hierarchy(records) results = [] for query in queries: results.append(calculate_total_score(query.strip(), hierarchy)) return results"},{"question":"Implement a function, `listDivisors()`, that takes a single integer input `x` and returns a list of all the divisors of `x` in ascending order. The divisors of a number are defined as the numbers that evenly divide into that integer. For example: ```python listDivisors(12) -----> [1, 2, 3, 4, 6, 12] listDivisors(15) -----> [1, 3, 5, 15] listDivisors(28) -----> [1, 2, 4, 7, 14, 28] listDivisors(5) -----> [1, 5] ``` Write the function `listDivisors(x: int) -> list`:","solution":"def listDivisors(x): Returns a list of all the divisors of x in ascending order. if x <= 0: return [] divisors = [] for i in range(1, x + 1): if x % i == 0: divisors.append(i) return divisors"},{"question":"Given an array of integers, find the number of pairs (i, j) such that i < j and the sum of Arr[i] and Arr[j] is a perfect square. Example 1: Input: N = 5 Arr = {1, 3, 4, 7, 9} Output: 2 Explaination: The pairs (1, 3) and (0, 4) have sums of 4 and 10 respectively, and only 4 is a perfect square (2^2). Example 2: Input: N = 3 Arr = {2, 4, 6} Output: 0 Explaination: No pairs have sums that are perfect squares. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countPerfectSquarePairs() which takes the array Arr[] and its size N as input parameters and returns the number of valid pairs. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^3 1 ≤ Arr[i] ≤ 10^3 where 0 ≤ i < N","solution":"import math def countPerfectSquarePairs(N, Arr): Count the number of pairs (i, j) such that i < j and the sum of Arr[i] and Arr[j] is a perfect square. def is_perfect_square(x): Returns True if x is a perfect square, otherwise False. if x < 0: return False root = int(math.isqrt(x)) return root * root == x count = 0 for i in range(N): for j in range(i + 1, N): if is_perfect_square(Arr[i] + Arr[j]): count += 1 return count"},{"question":"You are given an array prices where prices[i] is the price of a given stock on the i-th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0. Example 1: Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example 2: Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. Constraints: 1 <= prices.length <= 10^5 0 <= prices[i] <= 10^4","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell transaction. If no profit can be achieved, returns 0. :param prices: List[int] - a list of stock prices where prices[i] is the price on the ith day. :return: int - the maximum profit. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are in charge of managing a warehouse. The warehouse contains several types of products. Each product type can have one or more units available. Your task is to fulfill a series of orders. Each order asks for a specific quantity of a particular product type. You need to determine if the warehouse can fulfill each order in the sequence they are received and if so, update the inventory accordingly. If an order cannot be fulfilled, skip it and move to the next one. Input The first line contains an integer n (1 ≤ n ≤ 10^5) which represents the number of product types in the warehouse. The second line contains n space-separated integers representing the initial inventory quantities for each product type. The third line contains an integer m (1 ≤ m ≤ 10^5) which represents the number of orders. The following m lines each contain two integers: p and q. The integer p (1 ≤ p ≤ n) denotes the product type and q (1 ≤ q ≤ 10^6) denotes the quantity requested for that product type in the order. Output For each order, print \\"Yes\\" if the order can be fulfilled and \\"No\\" if it cannot. Print the statuses of the orders in the same sequence they were received. If an order is fulfilled, update the inventory accordingly for subsequent orders. Example Input 5 10 9 8 7 6 4 1 5 3 8 2 10 5 6 Output Yes Yes No Yes","solution":"def fulfill_orders(n, inventory, m, orders): output = [] for p, q in orders: if inventory[p - 1] >= q: inventory[p - 1] -= q output.append(\\"Yes\\") else: output.append(\\"No\\") return output"},{"question":"In a galaxy far, far away, there exists an ancient system of interconnected star portals. Each portal allows travel to specific other portals based on their destinations. The galactic council wants to find the shortest path through these portals to transmit messages between distant star systems efficiently. Each portal has a unique identifier from `0` to `N-1`. You are given the direct travel times between pairs of portals, and you need to determine the shortest path from a starting portal to an ending portal. # Input The input is given in the following format: ``` N M u1 v1 w1 u2 v2 w2 ... ``` - The first line contains two integers `N` (the number of portals) and `M` (the number of direct travel paths). - Each of the next `M` lines contains three integers `u`, `v`, and `w`, representing a direct travel path from portal `u` to portal `v` with a travel time of `w`. # Output Output the shortest travel time from portal `0` to portal `N-1`. If there is no path from `0` to `N-1`, output `-1`. # Constraints - (1 leq N leq 10^5) - (1 leq M leq 2 times 10^5) - (0 leq u, v < N) - (1 leq w leq 10^6) # Example Input ``` 5 6 0 1 2 0 2 4 1 2 1 1 3 7 2 4 3 3 4 1 ``` Output ``` 8 ``` Input ``` 4 2 0 1 1 2 3 1 ``` Output ``` -1 ``` # Explanation In the first example, the shortest path from portal `0` to portal `4` is `0 -> 1 -> 2 -> 4`, with a total travel time of `2 + 1 + 3 = 6`. In the second example, there is no path from portal `0` to portal `3`, so the output is `-1`.","solution":"import heapq def shortest_path(N, M, edges): graph = [[] for _ in range(N)] for u, v, w in edges: graph[u].append((v, w)) def dijkstra(start, end): distances = [float(\'inf\')] * N distances[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_node == end: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 return dijkstra(0, N-1)"},{"question":"You are a software engineer at a small startup, and your team has just been tasked with processing a large dataset containing information about various social network users. For now, your goal is to analyze a simplified network with fewer users to establish some baseline metrics. Specifically, you want to count the number of users in the largest connected component of the graph. A user in the social network is represented by a unique integer ID, and a friendship between two users is presented as an edge between their respective IDs. A connected component is a set of users such that there exists a path between any two users in that set. Your task is to find the number of users in the largest connected component of the graph. Input The first line contains two integers n and m: the number of users n and the number of friendships m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950). Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) – indicating that there is a friendship between users a and b. It is guaranteed that there is at most one friendship between any pair of users. Output Print a single integer representing the number of users in the largest connected component. SAMPLE INPUT 5 3 1 2 2 3 4 5 SAMPLE OUTPUT 3","solution":"def largest_connected_component(n, m, edges): from collections import defaultdict, deque # Build the graph as an adjacency list graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True component_size = 0 while queue: node = queue.popleft() component_size += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_size largest_size = 0 for user in range(1, n + 1): if not visited[user]: largest_size = max(largest_size, bfs(user)) return largest_size"},{"question":"Consider a list of integers where every number appears exactly twice, except for one number which appears exactly once. Design an algorithm to find the number that appears only once. The algorithm should run in linear time and use constant space. Write a function `find_single_number` that takes a list of integers `nums` and returns the number that appears only once. **Function Signature:** ```python def find_single_number(nums: List[int]) -> int: pass ``` **Example:** ```python find_single_number([2, 2, 1]) # Should return 1 find_single_number([4, 1, 2, 1, 2]) # Should return 4 find_single_number([17, 12, 5, 5, 12]) # Should return 17 ``` **Constraints:** - The input list will contain at least 1 and at most 100,000 integers. - The list will always have an odd number of elements. - The solution should run in O(n) time and use O(1) additional space.","solution":"def find_single_number(nums): Finds the number that appears only once in a list where every other number appears exactly twice. Args: nums (List[int]): A list of integers. Returns: int: The number that appears only once. # Using bitwise XOR to find the unique number single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"A group of friends decides to play a simple card game. In this game, each player has a set of cards, each card can have a unique number, and they can \\"sell\\" some of their cards to maximize their individual scores. Each card can only be sold once, and the price of each card is simply the number on the card. However, not all cards are worth the same in everyone\'s perspective. Here\'s how the game is scored: - Each card has a unique integer number representing its value. - The score for each player is the sum of the unique values of the cards they have sold. - Each player can choose to sell any subset of their cards to maximize their score. Write a program that calculates the maximum score each player can achieve by selling their cards and outputs these scores in order. -----Input----- The first line contains the integer P (1 le P le 50), the number of players. Each of the next P lines describes the cards of one player starting with an integer C_i (1 le C_i le 50), the number of cards that the player has, followed by C_i integers which are the values of those cards. -----Output----- Output P lines, each line contains the maximum score a player can achieve from selling their cards in the order they appeared in the input. -----Examples----- Sample Input 1: 2 3 5 3 1 4 2 5 10 6 Sample Output 1: 9 23 Sample Input 2: 3 2 7 7 3 8 8 8 1 3 Sample Output 2: 7 8 3","solution":"def max_card_game_score(players): Computes the maximum score each player can achieve by selling their cards. Args: players: list of lists, where each list contains numbers representing the cards each player has. Returns: List of integers representing the maximum score each player can achieve. max_scores = [] for cards in players: unique_cards = set(cards) max_score = sum(unique_cards) max_scores.append(max_score) return max_scores"},{"question":"You are given a series of meetings in a calendar, represented by a list of intervals where each interval [start, end] indicates a meeting starting at \'start\' and ending at \'end\' (both in hours). Your task is to determine if a person can attend all the given meetings without any overlap. If a person can attend all the meetings, return True; otherwise, return False. The first line of input contains an integer N, the number of meetings. The next N lines each contain two space-separated integers start and end, defining the start and end times of a meeting. Example 1: Input: N = 3 1 3 2 6 8 10 Output: False Explanation: The person cannot attend both the meetings [1, 3] and [2, 6] since they overlap. Example 2: Input: N = 2 5 8 9 12 Output: True Explanation: The person can attend both meetings [5, 8] and [9, 12] since they do not overlap. Your Task: Complete the function bool canAttendAllMeetings(), which takes an integer N and a list of N pairs of integers as input and returns a boolean indicating if the person can attend all the meetings without any overlap. Expected Time Complexity: O(N log N) due to the sorting step. Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 0 <= start < end <= 10^{9}","solution":"def canAttendAllMeetings(N, intervals): Determine if a person can attend all given meetings without any overlap. Args: N: Integer, the number of meetings. intervals: List of pairs of integers where each pair represents the start and end times of a meeting. Returns: Boolean: True if the person can attend all meetings without overlap, otherwise False. # Sort the intervals by their start times intervals.sort(key=lambda x: x[0]) # Check for overlap between consecutive meetings for i in range(1, N): if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"Alice loves playing with strings and has invented a new game. She calls the game \\"Longest Unique Path.\\" Here are the rules of her game: 1. She is given a string `S` consisting of lowercase English letters. 2. Alice can start from any character in the string and move to any other character which is adjacent to the current character (next or previous character in the string). 3. The goal is to form the longest contiguous substring where all characters are unique. Alice wants to determine the length of the longest contiguous substring without repeating characters that she can find by following the rules. Can you help her? ------ Input ------ The first line contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains a string `S`. ------ Output ------ For each test case, output a single line containing the length of the longest contiguous substring with all unique characters from the respective test case. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 S will only contain lowercase English letters. ------ Sample Input 1 ------ 2 abcabcbb bbbbb ------ Sample Output 1 ------ 3 1 ------ Explanation 1 ------ In the first test case, the answer is 3 with the longest substring being \\"abc\\". In the second test case, the answer is 1 with the longest substring being \\"b\\". Note: For the string \\"abcabcbb\\", the longest unique path is formed by characters \'a\', \'b\', and \'c\' making the substring \\"abc\\". For the string \\"bbbbb\\", the longest unique path can only include one \'b\'.","solution":"def longest_unique_path(s): Returns the length of the longest contiguous substring with all unique characters. n = len(s) char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index: # Move the start to the right of the previous index of current character start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(test_cases): results = [] for s in test_cases: results.append(longest_unique_path(s)) return results"},{"question":"Write a function to perform the following operations on two given binary numbers represented as strings: 1. Perform a bitwise AND operation on the two binary numbers. 2. Perform a bitwise OR operation on the two binary numbers. 3. Perform a bitwise XOR operation on the two binary numbers. Return the results of these three operations in a list of strings. Function Signature: `def bitwise_operations(bin1: str, bin2: str) -> List[str]:` Example 1: Input: bin1 = \\"1101\\", bin2 = \\"1011\\" Output: [\\"1001\\", \\"1111\\", \\"0110\\"] Explanation: Bitwise AND: 1101 & 1011 = 1001 Bitwise OR: 1101 | 1011 = 1111 Bitwise XOR: 1101 ^ 1011 = 0110 Example 2: Input: bin1 = \\"100\\", bin2 = \\"110\\" Output: [\\"100\\", \\"110\\", \\"010\\"] Explanation: Bitwise AND: 100 & 110 = 100 Bitwise OR: 100 | 110 = 110 Bitwise XOR: 100 ^ 110 = 010 Your Task: You don\'t need to read input or print anything. Complete the function `bitwise_operations()` which takes bin1 and bin2 as input parameters and returns the list of results as strings. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1. 1 <= len(bin1), len(bin2) <= 100 2. bin1 and bin2 contain only \'0\' or \'1\' 3. Both binary numbers have the same length.","solution":"from typing import List def bitwise_operations(bin1: str, bin2: str) -> List[str]: # Convert binary strings to integer representations int_bin1 = int(bin1, 2) int_bin2 = int(bin2, 2) # Perform bitwise operations and_result = int_bin1 & int_bin2 or_result = int_bin1 | int_bin2 xor_result = int_bin1 ^ int_bin2 # Convert the results back to binary strings and remove the \'0b\' prefix and_bin = format(and_result, \'b\').zfill(len(bin1)) or_bin = format(or_result, \'b\').zfill(len(bin1)) xor_bin = format(xor_result, \'b\').zfill(len(bin1)) return [and_bin, or_bin, xor_bin]"},{"question":"You are given an array of positive integers. Your task is to reorder the array such that the sum of the product of adjacent elements is minimized. If multiple orderings yield the same minimum sum, any of them is acceptable. If the array contains only one element, return the array as-is. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the length of the array. - The second line of each test case contains N positive integers, representing the elements of the array. ------ Output Format ------ For each test case, output a single line containing the reordered array such that the sum of the product of adjacent elements is minimized. Output the elements separated by spaces. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{4} - Sum of N over all test cases does not exceed 10^{5} ----- Sample Input 1 ------ 2 3 4 2 1 4 1 3 2 4 ----- Sample Output 1 ------ 1 2 4 1 2 3 4 ----- Explanation 1 ------ Test case-1: One possible ordering is [1, 2, 4]. The sum of the product of adjacent elements is 1*2 + 2*4 = 2 + 8 = 10. This is the minimum possible for this array. Test case-2: One possible ordering is [1, 2, 3, 4]. The sum of the product of adjacent elements is 1*2 + 2*3 + 3*4 = 2 + 6 + 12 = 20. This is the minimum possible for this array.","solution":"def min_adjacent_product_sum(arr): Given an array of positive integers, reorder the array such that the sum of the product of adjacent elements is minimized. arr.sort() return arr def reorder_arrays(test_cases): Processes multiple test cases of reordering arrays to minimize the sum of the product of adjacent elements. result = [] for arr in test_cases: result.append(min_adjacent_product_sum(arr)) return result def process_input(input_data): Converts the input string into a structured list of test cases. input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) test_cases.append(array) index += 2 return test_cases def format_output(arrays): Converts the list of arrays into a string with each array elements joined by a space. result = [] for arr in arrays: result.append(\\" \\".join(map(str, arr))) return \\"n\\".join(result) def main(input_data): test_cases = process_input(input_data) reordered_arrays = reorder_arrays(test_cases) return format_output(reordered_arrays)"},{"question":"In a city, there is a booming food delivery business, and the company wants to optimize their delivery routes. The city can be represented as a grid of size m x n, and each cell in the grid represents a restaurant or a building. The company needs to deliver food from a restaurant located at the top-left corner of the grid (0, 0) to a building at the bottom-right corner of the grid (m-1, n-1). A delivery person can move either down or right at any point in time. However, on some cells, there are obstacles that the delivery person cannot pass through. Your task is to design a function that finds the number of unique paths that the delivery person can take to reach the destination while avoiding the obstacles. Input Format - The first line contains two integers, m and n, which denote the number of rows and columns of the grid, respectively. - The next m lines each contain n integers, representing the grid. A value of 0 represents a cell without an obstacle, and a value of 1 represents a cell with an obstacle. Output Format - Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner. Constraints - 1 ≤ m, n ≤ 100 - The grid\'s top-left corner and bottom-right corner will always be 0 (no obstacle). Sample Input 1 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1 2 Explanation 1 There are two unique paths to reach the bottom-right corner: 1. Move right -> right -> down -> down 2. Move down -> down -> right -> right Sample Input 2 3 3 0 1 0 0 1 0 0 0 0 Sample Output 2 1 Explanation 2 There is only one unique path to reach the bottom-right corner: 1. Move down -> down -> right -> right","solution":"def unique_paths_with_obstacles(grid): m, n = len(grid), len(grid[0]) # If the starting or ending point is an obstacle, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize a DP table dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"In a small town, there is a long, straight street with houses numbered in order. Some of the house numbers have magnificent street art painted on them. A local artist has decided to create an art project by choosing a continuous segment of houses that have the most colorful house numbers. The \\"colorfulness\\" of a house number is represented by an array of integers, where each element gives the colorfulness score of the corresponding house. However, the artist is limited by the amount of paint they can use, so they need to maximize the total colorfulness within a segment but ensure the total number of houses in that segment does not exceed a given number k. Given the street with its sequence of colorfulness scores and the limit on the number of houses in a continuous segment, help the artist determine the maximum total colorfulness they can achieve. -----Input----- The input consists of two lines: - The first line contains two integers n (1 leq n leq 100000), the number of houses, and k (1 leq k leq n), the maximum number of houses in the segment. - The second line contains n integers, each representing the colorfulness score of the corresponding house. The scores are separated by spaces and each score is between 0 and 1000 inclusive. -----Output----- Display the maximum total colorfulness that can be achieved by a segment of houses with at most k houses. -----Examples----- Sample Input 1: 10 3 1 2 3 4 5 6 7 8 9 10 Sample Output 1: 27 Sample Input 2: 5 2 1 1 1 1 1 Sample Output 2: 2","solution":"def max_colorfulness(n, k, scores): Returns the maximum total colorfulness that can be achieved by a segment of houses with at most k houses. Parameters: n (int): number of houses k (int): maximum number of houses in the segment scores (list): colorfulness score of each house Returns: int: maximum total colorfulness max_color = 0 current_sum = sum(scores[:k]) max_color = current_sum for i in range(k, n): current_sum += scores[i] - scores[i - k] if current_sum > max_color: max_color = current_sum return max_color"},{"question":"Consider a directed graph with n nodes and m edges, where each edge has a non-negative integer weight. Your task is to find the shortest path from a source node to a destination node in this graph. If there are multiple paths with the same shortest length, you should choose the path where the sum of the indices of the nodes in the path (from source to destination) is minimized. -----Input----- - The first line contains three integers n, m, and q, where n is the number of nodes, m is the number of edges, and q is the number of queries. - The next m lines each contain three integers u, v, and w, representing an edge from node u to node v with weight w. - The following q lines each contain two integers s and d, representing a query where you need to find the shortest path from node s to node d. -----Output----- For each query, print a single integer representing the minimum sum of the indices of nodes in the shortest path from node s to node d. If there is no path from s to d, print -1. -----Constraints----- - 1 leq n leq 500 - 1 leq m leq 5000 - 1 leq w leq 10^6 - 1 leq q leq 1000 - 1 leq u, v, s, d leq n -----Example Input----- 5 7 2 1 2 3 1 3 2 2 3 1 2 4 5 3 4 2 3 5 3 4 5 1 1 4 2 5 -----Example Output----- 6 9 -----Explanation----- In the first query, the shortest path from node 1 to node 4 is 1 -> 3 -> 4 with a total sum of indices of 1 + 3 + 4 = 8. In the second query, the shortest path from node 2 to node 5 is 2 -> 3 -> 5 with a total sum of indices of 2 + 3 + 5 = 10.","solution":"import heapq def find_shortest_path_min_node_sum(n, m, edges, queries): Finds the shortest path from given source to destination nodes with the minimal sum of node indices. graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(source, destination): pq = [(0, source, source)] # (distance, node, sum_of_indices) distances = {i: float(\'inf\') for i in range(1, n + 1)} node_sums = {i: float(\'inf\') for i in range(1, n + 1)} distances[source] = 0 node_sums[source] = source while pq: d, u, sum_indices = heapq.heappop(pq) if u == destination: return sum_indices for v, w in graph[u]: new_distance = d + w new_sum_indices = sum_indices + v if new_distance < distances[v] or (new_distance == distances[v] and new_sum_indices < node_sums[v]): distances[v] = new_distance node_sums[v] = new_sum_indices heapq.heappush(pq, (new_distance, v, new_sum_indices)) return -1 results = [] for s, d in queries: results.append(dijkstra(s, d)) return results"},{"question":"Tina loves playing with wooden blocks. She recently constructed a sequence of n blocks, each with an integer height, where the sequence is represented by an array a_1, a_2, ..., a_n. The height of the ith block is denoted by a_i. Tina now wants to find the largest sum that can be formed by selecting a subsequence of blocks such that the heights of the blocks in this subsequence are strictly increasing. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Help Tina by writing a program that calculates the maximum sum of a strictly increasing subsequence of the array a. -----Input----- The first line contains integer n (1 ≤ n ≤ 10^5). The next line contains n integers, representing the heights of the blocks a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^7). -----Output----- Output a single integer — the maximum sum of a strictly increasing subsequence of the array. -----Examples----- Input 5 1 101 2 3 100 Output 106 Input 4 10 5 4 3 Output 10 -----Note----- In the first example, the sequence is [1, 101, 2, 3, 100]. The maximum sum of a strictly increasing subsequence is achieved by the subsequence [1, 2, 3, 100], which results in the sum 1 + 2 + 3 + 100 = 106. In the second example, the sequence is [10, 5, 4, 3]. The maximum sum of a strictly increasing subsequence is the single element 10, as no increasing subsequence longer than 1 element exists.","solution":"def max_sum_increasing_subsequence(arr): Returns the maximum sum of a strictly increasing subsequence from the given array of integers. n = len(arr) if n == 0: return 0 # Initialize dp array, where dp[i] stores the maximum sum of an increasing subsequence ending at index i dp = arr[:] # Build the dp array for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + arr[i]) return max(dp)"},{"question":"Implement a Stack using two Queues. The Stack should support the following operations: (i) push(x): Push element x onto stack. (ii) pop(): Removes the element on top of the stack and returns that element. If the stack is empty, return -1. (iii) top(): Get the top element. If the stack is empty, return -1. Example 1: Input: Q = 6 Queries = push 5, push 3, top, pop, push 2, top Output: 3 3 2 Explanation: In the first test case for query operations, push 5: Stack becomes {5} push 3: Stack becomes {5, 3} top: Returns 3 pop: Returns 3 and stack becomes {5} push 2: Stack becomes {5, 2} top: Returns 2 Example 2: Input: Q = 5 Queries = push 1, pop, top, pop, top Output: 1 -1 -1 Explanation: In the second test case for query operations, push 1: Stack becomes {1} pop: Returns 1 and stack becomes empty top: Stack is empty, returns -1 pop: Stack is empty, returns -1 top: Stack is empty, returns -1 Your Task: You are required to complete the three methods push(), pop(), and top() which take one argument: - push(x): Pushes the integer \'x\' onto the stack. - pop(): Removes the element on top of the stack and returns that element. If the stack is empty, return -1. - top(): Returns the element on top of the stack. If the stack is empty, return -1. Expected Time Complexity: Amortized O(1) for both push() and pop(). Expected Auxiliary Space: O(n) for the stack. Constraints: 1 ≤ Q ≤ 10^4 1 ≤ x ≤ 10^5","solution":"from queue import Queue class Stack: def __init__(self): self.q1 = Queue() self.q2 = Queue() def push(self, x: int): self.q2.put(x) while not self.q1.empty(): self.q2.put(self.q1.get()) self.q1, self.q2 = self.q2, self.q1 def pop(self): if self.q1.empty(): return -1 return self.q1.get() def top(self): if self.q1.empty(): return -1 return self.q1.queue[0]"},{"question":"Write a function that takes an integer `n` and returns an `n x n` matrix where the elements spiral inwards clockwise. For example, an input of 3 should return: [[1, 2, 3], [8, 9, 4], [7, 6, 5]] An input of 4 should return: [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]] If `n` is 0 or negative, return an empty list.","solution":"def generate_spiral_matrix(n): if n <= 0: return [] matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n - 1, 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Description Given a series of events each represented by a start time and an end time, we need to find the maximum number of events that one can attend if one person can only attend one event at a time. Each event is represented by two integers: the start and end times. You can attend the event if the start time of the event is greater than or equal to the end time of the last attended event. Input The input consists of multiple test cases. Each test case starts with an integer N, the number of events (1 <= N <= 1000). The next N lines each contain two integers, S and E (0 <= S < E <= 1000), representing the start time and end time of an event. Input ends with EOF. Output For each test case, output the maximum number of events one can attend. Example Input 3 1 3 2 5 4 6 4 1 2 2 3 3 4 4 5 Output 2 4","solution":"def max_events_to_attend(events): Returns the maximum number of non-overlapping events one can attend based on events where each event is represented by a tuple (S, E) of start and end times. # Sort events based on their end times events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events def process_input(input_data): Parses the input data and generates the list of test cases. data_list = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(data_list): N = int(data_list[index]) index += 1 events = [] for i in range(N): S, E = map(int, data_list[index].split()) events.append((S, E)) index += 1 results.append(max_events_to_attend(events)) return results"},{"question":"Given a number N, your task is to determine whether it is a Deficient Number. A Deficient Number is a positive integer that is greater than the sum of its proper divisors, excluding itself. For example: - 10 is a Deficient Number because the sum of its proper divisors (1 + 2 + 5) is 8, which is less than 10. - 12 is not a Deficient Number because the sum of its proper divisors (1 + 2 + 3 + 4 + 6) is 16, which is greater than 12. Example 1: Input: N = 15 Output: 1 Explanation: The proper divisors of 15 are 1, 3, and 5. Their sum is 1 + 3 + 5 = 9, which is less than 15. Hence, 15 is a Deficient Number. Example 2: Input: N = 6 Output: 0 Explanation: The proper divisors of 6 are 1, 2, and 3. Their sum is 1 + 2 + 3 = 6, which is not less than 6. Hence, 6 is not a Deficient Number. Your Task: You don\'t need to read or print anything. Your task is to complete the function isDeficientNo() which takes N as input parameter and returns 1 if N is a Deficient Number otherwise returns 0. Expected Time Complexity: O(sqrt(N)) Expected Space Complexity: O(1) Constraints: 1 <= N <= 1000","solution":"def isDeficientNo(N): This function checks whether a given number N is a Deficient Number or not. :param N: int : input number :return: int : 1 if N is a deficient number, otherwise 0 if N <= 0: return 0 sum_of_divisors = 0 for i in range(1, N // 2 + 1): if N % i == 0: sum_of_divisors += i return 1 if sum_of_divisors < N else 0"},{"question":"You are given a list of n integers. Your task is to find the minimum number of elements to remove from the list so that the list becomes a sequence where each element is only slightly larger than the previous one (i.e., it forms a strictly increasing sequence). Input Format First line of input contains an integer T, the number of test cases to follow. Each test case consists of two lines. The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers representing the elements of the list. Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 100 1 ≤ list[i] ≤ 1000 Output Format Output one line per test case with the required minimum number of elements to be removed. SAMPLE INPUT 2 5 2 3 1 5 4 4 4 3 2 1 SAMPLE OUTPUT 2 3 Explanation 1st Test Case: By removing the elements 1 and 4, the remaining list [2, 3, 5] forms a strictly increasing sequence. 2nd Test Case: By removing the elements 4, 3, and 2, the remaining list [1] itself forms a strictly increasing sequence. Note The strictly increasing sequence means that each subsequent number must be larger than the one before it.","solution":"def min_removals_to_increasing_sequence(arr): n = len(arr) # Calculate the length of the Longest Increasing Subsequence (LIS) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) lis_length = max(dp) # Minimum removals needed to make the array strictly increasing min_removals = n - lis_length return min_removals def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] result = min_removals_to_increasing_sequence(arr) results.append(result) return results"},{"question":"An array (A) of (N) integers is said to be \\"mountain-like\\" if there exists an index (i) (1 ≤ i ≤ N) such that: - (A[k] < A[k+1]) for all (0 le k < i) - (A[j] > A[j+1]) for all (i le j < N-1) In other words, the array should strictly increase to a peak element at index (i), and thereafter strictly decrease. Your task is to determine whether a given array is mountain-like. If the array meets the criteria, return the index (i) (1-based indexing). If there is no such index, return -1. -----Input----- The first line of the input contains a single integer (N), representing the size of the array. The second line contains (N) integers (A_1, A_2, ldots, A_N) representing the elements of the array. Constraints: [ 1 leq N leq 10^5 ] [ -10^9 leq A_i leq 10^9 ] -----Output----- Output a single integer, the 1-based index of the peak element if the array is mountain-like. Otherwise, print -1. -----Examples----- Sample Input 1: 5 1 3 5 4 2 Sample Output 1: 3 Sample Input 2: 4 3 5 5 2 Sample Output 2: -1 Sample Input 3: 6 1 2 3 4 5 6 Sample Output 3: -1 Sample Input 4: 7 2 3 4 4 5 2 1 Sample Output 4: -1","solution":"def is_mountain_like(A): N = len(A) if N < 3: return -1 i = 1 while i < N and A[i] > A[i - 1]: i += 1 if i == 1 or i == N: return -1 peak_index = i - 1 while i < N and A[i] < A[i - 1]: i += 1 if i == N: return peak_index + 1 else: return -1"},{"question":"Alicia is organizing a treasure hunt game. She has hidden n treasures across different cells in a grid. Each cell in the grid has integer coordinates (x, y) where 1 leq x, y leq 10^9. Additionally, Alicia has provided a set of instructions that describe allowable movements from one cell to another. Specifically, allowed movements are: - One step to the right (horizontal move): (x, y) to (x+1, y) - One step up (vertical move): (x, y) to (x, y+1) - One step diagonally up-right: (x, y) to (x+1, y+1) Given the initial positions of the treasures, Alicia wants to know if it is possible to re-arrange them such that it becomes possible to reach each treasure from every other treasure following the defined movements. If it is possible, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line of the input contains an integer n (1 leq n leq 100,000), the number of treasures. Each of the next n lines contains two integers x_i and y_i (1 leq x_i, y_i leq 10^9), the coordinates of each treasure. -----Output----- Print \\"YES\\" if it is possible to re-arrange the treasures such that they can be reached from each other following the defined movements, otherwise print \\"NO\\". -----Examples----- Input 4 1 3 2 3 3 3 4 4 Output YES Input 3 1 2 4 1 7 5 Output NO -----Note----- In the first sample, treasures can be arranged in a manner such that each point can be reached from another using horizontal, vertical, and diagonal up-right moves. In the second sample, no matter the arrangement, at least one treasure will not be reachable from every other treasure.","solution":"def can_reach_each_other(n, treasures): Determine if it is possible to rearrange treasures such that each treasure is reachable from every other one. Args: n : int : number of treasures treasures : List[Tuple[int, int]] : list of coordinates (x, y) of the treasures Returns: str : \\"YES\\" if it\'s possible to rearrange treasures to be reachable from each other, otherwise \\"NO\\" # The key insight is that to be reachable using the allowed moves # treasures positions should be able to form a path with allowed moves. # Sort treasures by x ascending, and when x is the same sort by y ascending treasures.sort(key=lambda t: (t[0], t[1])) # Check from the first treasure to the last treasure in the sorted list for i in range(1, n): if treasures[i][0] < treasures[i-1][0] or treasures[i][1] < treasures[i-1][1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid of size NxM consisting of \'.\' (empty cells) and \'*\' (blocked cells). You are currently situated at the top-left corner of the grid (cell (1, 1)), and you want to reach the bottom-right corner (cell (N, M)). However, you can only move either right or down from the current cell. Determine if you can reach the bottom-right corner starting from the top-left corner, given the restrictions provided. ------ Input Format ------ - The first line of input will contain two integers N and M, the dimensions of the grid. - Each of the next N lines contains a string of M characters, representing the grid. ------ Output Format ------ Output YES if you can reach the bottom-right corner of the grid from the top-left corner, otherwise output NO. Each character of the output may be printed in either uppercase or lowercase. For example, the strings YES, yeS, yes, and YeS will all be treated as identical. ------ Constraints ------ 1 ≤ N, M ≤ 100 The grid contains only the characters \'.\' and \'*\'. ----- Sample Input 1 ------ 3 3 . . * . * . * . . ----- Sample Output 1 ------ NO ----- Sample Input 2 ------ 3 3 . . . . * . . . . ----- Sample Output 2 ------ YES ----- Explanation ------ In the first test case, although there appears to be several paths available, all possible paths from the start are blocked by \'*\' at one point or another, making it impossible to reach the bottom-right corner. Therefore, the correct output is \\"NO\\". In the second test case, one possible valid path is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3), which allows us to reach the bottom-right corner. Therefore, the correct output is \\"YES\\".","solution":"def can_reach_end(grid): Determines if you can reach the bottom-right corner of the grid from the top-left corner given that you can only move right or down. N = len(grid) M = len(grid[0]) # Initialize a DP table with the same dimensions as the grid dp = [[False] * M for _ in range(N)] # Start position if grid[0][0] == \'.\': dp[0][0] = True # Fill the DP table for i in range(N): for j in range(M): if grid[i][j] == \'*\': dp[i][j] = False else: if i > 0: dp[i][j] |= dp[i-1][j] if j > 0: dp[i][j] |= dp[i][j-1] # We can reach the bottom-right corner if dp[N-1][M-1] is true if dp[-1][-1]: return \'YES\' else: return \'NO\'"},{"question":"Sarah loves solving puzzles and playing with numbers. One day, she encountered an interesting problem and decided to share it with her friends. Given an array of positive integers, the *fairness score* of the array is the difference between the sum of elements at even indices and the sum of elements at odd indices. For example, given the array [10, 20, 30, 40, 50], the fairness score is (10 + 30 + 50) - (20 + 40) = 10 + 30 + 50 - 20 - 40 = 30. Sarah would like you to write a program that computes the fairness score of multiple arrays. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains a single integer N — the number of elements in the array. - The second line contains N space-separated positive integers representing the elements of the array. ------ Output Format ------ For each test case, output on a new line the fairness score of the array. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ text{Element Value} ≤ 1000 ----- Sample Input 1 ------ 3 5 10 20 30 40 50 4 5 15 25 35 3 1 2 3 ----- Sample Output 1 ------ 30 -20 2 ----- explanation 1 ------ Test case 1: The array is [10, 20, 30, 40, 50]. The sum of elements at even indices is 10 + 30 + 50 = 90. The sum of elements at odd indices is 20 + 40 = 60. The fairness score is 90 - 60 = 30. Test case 2: The array is [5, 15, 25, 35]. The sum of elements at even indices is 5 + 25 = 30. The sum of elements at odd indices is 15 + 35 = 50. The fairness score is 30 - 50 = -20. Test case 3: The array is [1, 2, 3]. The sum of elements at even indices is 1 + 3 = 4. The sum of elements at odd indices is 2. The fairness score is 4 - 2 = 2.","solution":"def fairness_score(arr): Computes the fairness score of the array. The fairness score is the difference between the sum of elements at even indices and the sum of elements at odd indices. even_sum = sum(arr[i] for i in range(0, len(arr), 2)) odd_sum = sum(arr[i] for i in range(1, len(arr), 2)) return even_sum - odd_sum def compute_fairness_scores(test_cases): Computes the fairness scores for multiple test cases. results = [] for n, arr in test_cases: results.append(fairness_score(arr)) return results def parse_input(input_text): Parses the input from the given text. lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases"},{"question":"Given a list of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. Write a function `trap_water(height: List[int]) -> int` that takes in a list of integers and returns the amount of trapped water. Examples: ``` Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (where the width of each bar is 1) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water are being trapped. Input: height = [4,2,0,3,2,5] Output: 9 ``` Note: - The list of integers `height` will have a length in the range [0, 10^5]. - Each integer in `height` will be within the range [0, 10^5].","solution":"def trap_water(height): Given a list of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. :param height: List[int] :return: int if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Compute the maximum height to the left of each bar left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Compute the maximum height to the right of each bar right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the water trapped at each bar for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Implement a class that manages a parking lot system. The class should provide methods to park and unpark vehicles, and should be able to report the status of the parking lot. Requirements: - Takes n as input, initializing a parking lot with n spots (0 to n-1). - Provides a park method that takes a vehicle ID as input and assigns the vehicle to the first available spot. If the parking lot is full, it returns a message indicating that no spots are available. - Provides an unpark method that takes a vehicle ID as input and vacates the spot occupied by the vehicle. - Provides a status method that returns a list of tuples where each tuple contains a spot number and the vehicle ID parked in that spot, or -1 if the spot is empty. Example: ```python parking_lot = ParkingLot(5) # initializes a parking lot with 5 spots parking_lot.park(\\"A123\\") # parks vehicle \\"A123\\" in spot 0 parking_lot.park(\\"B456\\") # parks vehicle \\"B456\\" in spot 1 print(parking_lot.status()) # Outputs [(0, \\"A123\\"), (1, \\"B456\\"), (2, -1), (3, -1), (4, -1)] parking_lot.unpark(\\"A123\\") # unparks vehicle \\"A123\\" from spot 0 print(parking_lot.status()) # Outputs [(0, -1), (1, \\"B456\\"), (2, -1), (3, -1), (4, -1)] parking_lot.park(\\"C789\\") # parks vehicle \\"C789\\" in spot 0 print(parking_lot.status()) # Outputs [(0, \\"C789\\"), (1, \\"B456\\"), (2, -1), (3, -1), (4, -1)] ``` Your implementation should efficiently manage the parking and unparking operations, and provide accurate status reports of the parking lot.","solution":"class ParkingLot: def __init__(self, n): self.spots = {i: -1 for i in range(n)} def park(self, vehicle_id): for spot in self.spots: if self.spots[spot] == -1: self.spots[spot] = vehicle_id return f\\"Vehicle {vehicle_id} parked at spot {spot}\\" return \\"No available spots\\" def unpark(self, vehicle_id): for spot in self.spots: if self.spots[spot] == vehicle_id: self.spots[spot] = -1 return f\\"Vehicle {vehicle_id} unparked from spot {spot}\\" return f\\"Vehicle {vehicle_id} not found\\" def status(self): return [(spot, self.spots[spot]) for spot in self.spots]"},{"question":"You have a list of integers, and you need to determine if there exists a triplet (a, b, c) such that a + b + c = 0. If such a triplet exists, return \\"yes\\"; otherwise, return \\"no\\". Example 1: Input: nums = [-1, 0, 1, 2, -1, -4] Output: yes Explanation: The triplet (-1, 0, 1) sums up to 0. Example 2: Input: nums = [1, 2, 3] Output: no Explanation: No three elements sum up to 0. Example 3: Input: nums = [0, -1, 2, -3, 1] Output: yes Explanation: The triplet (0, -1, 1) sums up to 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findTriplet() which takes a list of n integers as input and returns \\"yes\\" if there is a triplet with sum 0, otherwise return \\"no\\". Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^4 -10^6 <= nums[i] <= 10^6","solution":"def findTriplet(nums): nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: return \\"yes\\" elif total < 0: left += 1 else: right -= 1 return \\"no\\""},{"question":"Alex is fond of prime numbers and he loves to test his friends with interesting problems related to them. Today, he has come up with a new problem. He gives his friends a sequence of numbers and asks them to find the sum of all prime numbers in that sequence. Input The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains space-separated integers representing a sequence of numbers. Output For each test case, output the sum of all prime numbers in the given sequence. If there are no prime numbers in the sequence, output 0. Constraints 1 ≤ T ≤ 20 1 ≤ length of sequence ≤ 100 1 ≤ N ≤ 10^6 Example Input: 3 2 3 4 5 10 15 20 7 11 13 Output: 10 0 31","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_sequences(sequences): Returns a list of sums of prime numbers for each sequence in sequences. results = [] for sequence in sequences: sequence_sum = sum(num for num in sequence if is_prime(num)) results.append(sequence_sum) return results def process_input(input_lines): Processes the input lines and returns the output lines. T = int(input_lines[0]) sequences = [list(map(int, line.split())) for line in input_lines[1:T+1]] return sum_of_primes_in_sequences(sequences)"},{"question":"In this coding challenge, you will be given an array boldsymbol{A} which represents heights of buildings in a row. All the buildings are of different heights. You need to find the number of pairs of buildings (i, j) such that i < j and A[i] < A[j]. Such pairs are called \\"ascending pairs.\\" For example, given the array A = [3, 1, 4, 2], the ascending pairs are: - (1, 3): because A[1] = 1 < 4 = A[3] - (1, 4): because A[1] = 1 < 2 = A[4] - (2, 3): because A[2] = 3 < 4 = A[3] - (2, 4): because A[2] = 3 < 2 = A[4] (invalid) - (3, 4): because A[3] = 4 > 2 = A[4] (invalid) The correct number of ascending pairs in this example is 3. Function Description Complete the function count_ascending_pairs in the editor below. The function should return the number of valid ascending pairs in the array. count_ascending_pairs has the following parameter(s): - A: an array of integers Input Format The first line contains an integer boldsymbol{n}, the length of array boldsymbol{A} The next line contains n space-separated integers A[i] Constraints 1 leq n leq 10^5 1 leq A[i] leq 10^9 Output Format Print the number of ascending pairs in the array. Sample Input 4 3 1 4 2 Sample Output 3 Explanation The valid ascending pairs and their corresponding indices are: - A[1] = 1 < 4 = A[3] - A[1] = 1 < 2 = A[4] - A[2] = 3 < 4 = A[3] Hence, the output is 3.","solution":"def count_ascending_pairs(A): This function takes an array A of integers representing building heights and returns the number of ascending pairs (i, j) such that i < j and A[i] < A[j]. count = 0 n = len(A) for i in range(n): for j in range(i + 1, n): if A[i] < A[j]: count += 1 return count"},{"question":"You are given an integer `n`, representing the length of a sequence of non-negative integers. Your task is to write a function that generates a sequence according to the following rules: - Start with the integer `0`. - For each integer `i` in the sequence, the next integer `i+1` in the sequence is given by: - If `i` is even, the next integer is `i // 2` (integer division by 2). - If `i` is odd, the next integer is `3 * i + 1`. Write a function `generate_sequence(n)` that takes the length of the sequence `n` as an argument and returns the sequence as a list of integers. Let\'s see some cases: ``` generate_sequence(5) = [0, 0, 0, 0, 0] generate_sequence(7) = [0, 0, 0, 0, 0, 0, 0] generate_sequence(10) = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ``` Make sure your solution efficiently handles the generation of potentially large sequences.","solution":"def generate_sequence(n): Generates a sequence of length n starting from 0, where for each integer i: - If i is even, the next integer is i // 2 - If i is odd, the next integer is 3 * i + 1 if n <= 0: return [] sequence = [0] * n # Initialize a list of size n with all zeroes. return sequence"},{"question":"A logistics company manages a fleet of delivery vans. Each van starts its route from a central depot and delivers packages to various locations in the city. The company wants to optimize the routes such that the total distance covered by all the vans is minimized, and every package is delivered to its destination. Each location in the city is represented by its x and y coordinates on a 2D plane. Each van has a maximum capacity, represented by the number of packages it can carry, and cannot exceed this capacity. Each package has a unique destination point (x, y). Given the coordinates of the central depot, the coordinates of each package\'s destination, and the capacity of each van, determine the minimum number of vans required and the optimized route for each van. Input The first line contains three integers, n, k, and c (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100, 1 ≤ c ≤ n): - n is the number of packages. - k is the number of vans available. - c is the capacity of each van. The second line contains two integers x0 and y0 — the coordinates of the central depot. Each of the next n lines contains two integers xi and yi (−1000 ≤ xi, yi ≤ 1000) — the coordinates of the destination of the i-th package. Output In the first line, print a single integer v (1 ≤ v ≤ k) — the minimum number of vans required to deliver all packages, such that no van exceeds its capacity. In the next v lines, describe the routes for each van. Each line should start with an integer mi — the number of packages delivered by this van, followed by 2*mi integers —the x and y coordinates of the destinations in the order the van should visit them. Examples Input 6 2 3 0 0 1 2 -2 3 4 5 1 1 -1 -3 2 -1 Output 2 3 1 1 2 -1 -1 -3 3 4 5 2 1 1 -2 3 Input 5 3 2 0 0 2 2 -3 -3 1 1 4 4 -1 -1 Output 3 2 1 1 2 -1 2 4 4 1 1 1 -3 -3","solution":"def optimize_van_routes(n, k, c, depot, destinations): def calculate_distance(p1, p2): return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5 destinations.sort(key=lambda d: calculate_distance(depot, d)) routes = [] used_packages = 0 while used_packages < n: route_packages = [] for i in range(c): if used_packages < n: route_packages.append(destinations[used_packages]) used_packages += 1 else: break routes.append(route_packages) return len(routes), routes def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) c = int(data[2]) depot = (int(data[3]), int(data[4])) destinations = [(int(data[2*i + 5]), int(data[2*i + 6])) for i in range(n)] num_vans, van_routes = optimize_van_routes(n, k, c, depot, destinations) print(num_vans) for route in van_routes: print(len(route), \' \'.join(\' \'.join(map(str, dest)) for dest in route))"},{"question":"Joseph has a collection of stones. Each stone has an integer weight. He wants to partition his collection into two groups such that the difference between the total weights of these two groups is minimized. Write a function that, given the list of weights of the stones, returns the minimum possible difference between the total weights of the two groups. -----Input----- A single integer n (1 ≤ n ≤ 100) - the number of stones. A list of n integers w (1 ≤ w_i ≤ 1000) - the weights of the stones. -----Output----- A single integer representing the minimum possible difference between the total weights of the two groups. -----Examples----- Input 5 1 6 11 5 Output 1 Input 4 1 2 3 9 Output 3 -----Note----- In the first example, you can split the stones into two groups: {1, 5, 6} and {11}. The difference between their total weights is |12 - 11| = 1. In the second example, you can split the stones into two groups: {9} and {1, 2, 3}. The difference between their total weights is |9 - 6| = 3.","solution":"def min_difference_partition_stones(n, weights): total_weight = sum(weights) dp = [False] * (total_weight + 1) dp[0] = True for weight in weights: for j in range(total_weight, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] min_diff = float(\'inf\') for i in range(total_weight // 2 + 1): if dp[i]: min_diff = min(min_diff, total_weight - 2 * i) return min_diff"},{"question":"You are given a list of numbers and a target sum. Your task is to find out whether any two numbers in the list add up to the target sum. If such a pair exists, return a tuple containing the indices of the two numbers. If there are multiple such pairs, return any one of them. If no such pair exists, return `None`. Write a function that accepts a list of integers and a target sum, and returns the indices of the two numbers adding up to the target sum. # Function Signature ```python def two_sum(nums: list, target: int) -> tuple: pass ``` # Input - `nums`: A list of integers. - `target`: An integer, the target sum. # Output - A tuple of two integers (indices) if a pair is found, or `None` if no such pair exists. # Examples Example 1 ```python two_sum([2, 7, 11, 15], 9) --> (0, 1) ``` Example 2 ```python two_sum([3, 2, 4], 6) --> (1, 2) ``` Example 3 ```python two_sum([1, 2, 3, 4], 8) --> None ``` # Notes - Assume each input would have exactly one solution, and you may not use the same element twice. - The returned tuple should contain indices, not the actual numbers. - The indices in the returned tuple should be in ascending order.","solution":"def two_sum(nums: list, target: int) -> tuple: Find two numbers in nums that add up to the target sum and return their indices. If no such pair exists, return None. num_map = {} for index, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement], index) num_map[num] = index return None"},{"question":"You are part of a secret coding organization that handles vast amounts of encrypted data. Your task is to automate the process of decrypting some secret messages. Each message consists of a series of uppercase letters and needs to be decrypted to reveal its hidden meaning. Decryption works as follows: Rotate each letter backward in the alphabet by a fixed number of positions. For example, with a backward rotation of 3 positions, \'D\' becomes \'A\', \'E\' becomes \'B\', and so on. Letters near the start of the alphabet wrap around to the end, so \'A\' with a backward rotation of 3 becomes \'X\'. Write a program to decrypt the given messages based on the supplied rotation value. -----Input----- The first line of input contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines. The first line contains an integer r (1 ≤ r ≤ 25), representing the number of positions to rotate backward. The second line contains a single uppercase string s (1 ≤ |s| ≤ 100), representing the encrypted message. -----Output----- For each test case, output a single decrypted string. -----Examples----- Sample Input: 2 3 D E F Z A 5 Y F I V Y Sample Output: A B C W X T A D Q T","solution":"def decrypt_message(t, test_cases): Decrypt a list of messages given a rotation value. Parameters: - t: an integer, the number of test cases. - test_cases: a list of tuples, where each tuple contains: - an integer r, the rotation value. - a string s, the encrypted message. Returns: A list of decrypted messages. decrypted_messages = [] for r, s in test_cases: decrypted_message = [] for char in s: if char.isalpha(): original_index = ord(char) - ord(\'A\') new_index = (original_index - r) % 26 decrypted_char = chr(new_index + ord(\'A\')) decrypted_message.append(decrypted_char) else: # If the character is a space, we just add it directly decrypted_message.append(char) decrypted_messages.append(\\"\\".join(decrypted_message)) return decrypted_messages # Example usage: t = 2 test_cases = [(3, \'D E F Z A\'), (5, \'Y F I V Y\')] print(decrypt_message(t, test_cases))"},{"question":"The city is planning to implement a new transportation monitoring system to better understand the movement of buses throughout the city. Each bus route follows a linear path, and there are no circular routes. The city is divided into M zones. Each zone is numbered from 1 to M. If a bus is moving from any zone i to another zone j, it means it traverses all the zones between i and j inclusively. As part of the monitoring system, the city wants to be able to perform the following operations efficiently: 1. Add a new bus to a route between zones A and B (inclusive). 2. Remove a bus from a route between zones A and B (inclusive). 3. Check how many buses pass through a given zone Z. To implement this system, you need to write a program that supports these operations and answers the required queries. Input: The first line contains an integer M, the number of zones. The second line contains an integer Q, the number of operations. Each of the next Q lines contains an operation in one of the following formats: - \\"1 A B\\": which means a bus is added to the route between zones A and B; - \\"2 A B\\": which means a bus is removed from the route between zones A and B; - \\"3 Z\\": which means output the number of buses currently passing through zone Z. Output: For each \\"3 Z\\" operation, output the number of buses passing through the given zone Z. Constraints: 1 ≤ M ≤ 1000 1 ≤ Q ≤ 100000 1 ≤ A, B, Z ≤ M SAMPLE INPUT: 5 6 1 1 3 1 2 4 3 3 2 1 3 3 3 3 5 SAMPLE OUTPUT: 2 1 0 Explanation: 1. Initially, there are no buses on any routes. 2. The first operation, \\"1 1 3\\", adds a bus route passing through zones 1, 2, and 3. 3. The next operation, \\"1 2 4\\", adds another bus route passing through zones 2, 3, and 4. 4. The first query, \\"3 3\\", checks the number of buses passing through zone 3, which are two buses. 5. The operation \\"2 1 3\\" removes the first bus route between zones 1 and 3. 6. The second query, \\"3 3\\", checks the number of buses passing through zone 3, which is now one bus. 7. The third query, \\"3 5\\", checks the number of buses passing through zone 5, which is zero buses as no route passes through zone 5.","solution":"def transport_system(M, operations): bus_routes = [0] * (M + 1) def update_route(start, end, value): for i in range(start, end + 1): bus_routes[i] += value results = [] for oper in operations: if oper[0] == 1: # Add a bus _, A, B = oper update_route(A, B, 1) elif oper[0] == 2: # Remove a bus _, A, B = oper update_route(A, B, -1) elif oper[0] == 3: # Query buses _, Z = oper results.append(bus_routes[Z]) return results"},{"question":"You are given n integers arranged in an array. You want to split the array into as many subarrays as possible such that each subarray contains at least one prime number. A prime number is a number greater than 1 that has no divisors other than 1 and itself. Determine the maximum number of subarrays that you can split the original array into, each containing at least one prime number, or state that it is impossible. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains one integer n (1 le n le 500) — the size of the array. The second line contains n integers a_i (1 le a_i le 10^5) — the values in the array. -----Output----- For each test case, output a single integer — the maximum number of subarrays containing at least one prime number, or output -1 if no such split is possible. -----Example----- Input 3 5 1 2 3 4 5 4 4 6 8 10 6 11 4 9 7 3 2 Output 5 -1 4 -----Note----- In the first test case: Every number in the array can form its own subarray because we have primes 2, 3, and 5. In the second test case: There are no primes in the array, so it is impossible to split the array into subarrays each containing a prime. In the third test case: We can have the subarrays [11], [4, 9, 7], [3], and [2], yielding a total of 4 subarrays as it provides the maximum split where each subarray has at least one prime.","solution":"import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def max_subarrays_with_prime(t, test_cases): results = [] for arr in test_cases: primes_in_array = [num for num in arr if is_prime(num)] if len(primes_in_array) == 0: results.append(-1) else: results.append(len(arr)) return results"},{"question":"You are given a list of integers representing the heights of buildings along a straight line. Your task is to determine the number of buildings that have a clear view of the sunset. A building has a clear view of the sunset if there are no higher buildings to its right. For example, in the list [3, 7, 8, 3, 6, 1], the buildings with heights 8, 6, and 1 have a clear view of the sunset. Input: - The first line of the input contains an integer T (1 ≤ T ≤ 100), the number of test cases. - For each test case, the first line contains an integer n (1 ≤ n ≤ 1000), the number of buildings. - The second line contains n positive integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) representing the heights of the buildings from left to right. Output: For each test case, output the number of buildings that have a clear view of the sunset. SAMPLE INPUT 2 6 3 7 8 3 6 1 5 1 4 2 3 5 SAMPLE OUTPUT 3 1","solution":"def count_buildings_with_sunset_view(building_heights): Returns the number of buildings that have a clear view of the sunset. building_heights: list of integers, heights of buildings from left to right. max_height = 0 count = 0 # Traverse the list from right to left for height in reversed(building_heights): if height > max_height: count += 1 max_height = height return count def process_test_cases(test_cases): Processes multiple test cases to determine the number of buildings with a clear sunset view. test_cases: a list of tuples where each tuple contains an integer n and a list of n integers representing building heights. results = [] for n, building_heights in test_cases: results.append(count_buildings_with_sunset_view(building_heights)) return results"},{"question":"Given a string boldsymbol{mathrm{~S~}} and an integer boldsymbol{mbox{n}} which is the length of a subsequence, write a function that finds the number of distinct characters in every subsequence of length boldsymbol{mbox{n}}. The function should return a list of integers where each integer corresponds to the number of distinct characters in that subsequence. Example s=text{\'ABCABC\'} n=3 The subsequences of length 3 are: \'ABC\', \'BCA\', \'CAB\', and the distinct character counts are 3, 3, and 3 respectively. Function Description Complete the function countDistinctCharacters in the editor below. countDistinctCharacters has the following parameters: string s: the input string to analyze int n: the length of each subsequence Returns A list of integers, each integer represents the number of distinct characters in a subsequence. Input Format The first line contains a single string, boldsymbol{mathrm{~S~}}. The second line contains an integer, boldsymbol{mbox{n}}, the length of each subsequence. Constraints 1leq |boldsymbol{mathrm{~S~}}|leq10^5, where |boldsymbol{mathrm{~S~}}| is the length of boldsymbol{mathrm{~S~}} 1leq nleq |boldsymbol{mathrm{~S~}}| Sample Input STDIN Function ----- -------- ABACADA s = \'ABACADA\' 3 n = 3 Sample Output 3 3 2 3 3 Explanation Find subsequences of length 3 from boldsymbol{mathrm{~S~}}: t_0=text{\\"ABA\\"} rightarrow Number of distinct characters is 2 t_1=text{\\"BAC\\"} rightarrow Number of distinct characters is 3 t_2=text{\\"ACA\\"} rightarrow Number of distinct characters is 2 t_3=text{\\"CAD\\"} rightarrow Number of distinct characters is 3 t_4=text{\\"ADA\\"} rightarrow Number of distinct characters is 2 The function should return the list [2, 3, 2, 3, 2].","solution":"def countDistinctCharacters(s, n): Returns a list with the number of distinct characters in each subsequence of length n result = [] for i in range(len(s) - n + 1): subsequence = s[i:i+n] distinct_count = len(set(subsequence)) result.append(distinct_count) return result"},{"question":"A researcher is analyzing the lifespans of various species to identify which one has the longest average lifespan. Given an array representing the number of individuals of different species and another array representing the total lifespan of all individuals of these species, your task is to determine which species has the highest average lifespan. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains a single integer N, the number of species. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, ldots, A_{N} — where A_{i} is the number of individuals of the i^{th} species. - The third line of each test case contains N space-separated integers B_{1}, B_{2}, ldots, B_{N} — where B_{i} is the total lifespan of all individuals of the i^{th} species. ------ Output Format ------ For each test case, output on a new line, an integer in the range 1 to N, denoting the index of the species which has the highest average lifespan. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 1 ≤ A_{i}, B_{i} ≤ 2cdot 10^5 - It is guaranteed that all A_{i} are greater than zero. - It is guaranteed that the sum of N over all test cases does not exceed 2cdot 10^5. ----- Sample Input 1 ------ 3 3 5 4 6 50 36 72 2 3 3 9 12 4 2 1 3 4 8 5 18 32 ----- Sample Output 1 ------ 3 2 4 ----- Explanation 1 ------ Test case 1: The average lifespan of the first species is 10 (50/5), the second species is 9 (36/4), and the third species is 12 (72/6). Thus, the third species has the highest average lifespan. Test case 2: The average lifespan of both species is 3 (9/3 and 12/3), but since both are equal, we choose the last one, i.e., the second species. Test case 3: The average lifespan of the species are 4 (8/2), 5 (5/1), 6 (18/3), and 8 (32/4). Thus, the fourth species has the highest average lifespan.","solution":"def highest_average_lifespan(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] A = test_cases[i][\'A\'] B = test_cases[i][\'B\'] max_average = -1 species_index = -1 for j in range(N): average_lifespan = B[j] / A[j] if average_lifespan > max_average: max_average = average_lifespan species_index = j + 1 # +1 to convert 0-based index to 1-based index results.append(species_index) return results"},{"question":"Write a function that determines whether a string with alphabetic characters, spaces, and punctuation marks is a palindrome while ignoring spaces, case, and punctuation. A palindrome is a string that reads the same forward and backward. Your function should take a single argument `s` which is the input string, and return `true` if the string is a palindrome, and `false` otherwise. Examples For example, the string \\"A man, a plan, a canal, Panama!\\" is a palindrome because after removing spaces and punctuation, it reads \\"amanaplanacanalpanama\\" which is the same forwards and backwards. While the string \\"Hello, World!\\" is not a palindrome, because after removing spaces and punctuation, it reads \\"helloworld\\" which is not the same forwards and backwards. Happy coding!","solution":"import string def is_palindrome(s): Determines if the given string is a palindrome by ignoring spaces, case and punctuation. Parameters: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove spaces and punctuation, and convert to lowercase cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is the same forward and backward return cleaned_s == cleaned_s[::-1]"},{"question":"In a university, each department has set different requirements for students to graduate. Each requirement can be categorized into two types: course requirements and credit requirements. Each student must satisfy all the requirements to graduate. For simplicity, we can represent these requirements as follows: - A course requirement is specified as `C x y`, which means the student must complete at least `y` courses from the `x` subject area. - A credit requirement is specified as `CR x`, which means the student must complete at least `x` credits. Given a university department\'s graduation requirements and a list of courses each student has completed, determine if each student satisfies all the graduation requirements. Courses completed by each student are represented as pairs `(subject, credits)` meaning the student has completed the specified number of credits from the given subject. -----Input----- The input consists of multiple test cases. The first line contains a single integer `t` (1 le t le 10^3), the number of test cases. Each test case starts with an integer `m` (1 le m le 100) - the number of graduation requirements for the department, followed by `m` lines, each containing a graduation requirement in one of the following formats: - `C x y` (1 le x le 50, 1 le y le 10) - `CR x` (1 le x le 500`) Next, there is a line containing a single integer `s` (1 le s le 100) - the number of students, followed by `s` lines, each describing the courses completed by a student. Each student\'s line starts with an integer `c` (1 le c le 50) - the number of courses they have completed, followed by `c` pairs `(subject, credits)`, where `1 le subject le 50` and `1 le credits le 50`. It is guaranteed that the total number of courses completed by all students in all test cases does not exceed 10^5. -----Output----- For each student in each test case, output \\"YES\\" if the student satisfies all the graduation requirements, and \\"NO\\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\", and \\"YES\\" will be recognized as positive responses. -----Examples----- Input 2 3 C 1 3 C 2 2 CR 40 2 3 1 10 1 15 2 10 2 1 20 2 20 2 CR 60 C 2 1 1 5 1 10 2 10 3 10 4 10 5 20 Output YES NO YES -----Note----- In the first example, the first student completed 3 courses from subject 1 and 1 course from subject 2, but the total credits are not sufficient to meet the graduation requirement of 40 credits. The second student meets the credit requirement, but not enough courses from subject 2. In the second example, the lone student satisfies both the credit requirement of 60 credits and has completed at least one course from subject 2.","solution":"def check_graduation_requirements(t, test_cases): results = [] for i in range(t): m = test_cases[i][0] requirements = test_cases[i][1] s = test_cases[i][2] students = test_cases[i][3] student_results = [] for student in students: subject_count = {} total_credits = 0 for course in student: subject, credits = course if subject in subject_count: subject_count[subject] += 1 else: subject_count[subject] = 1 total_credits += credits meets_requirements = True for req in requirements: if req[0] == \'C\': x, y = req[1], req[2] if subject_count.get(x, 0) < y: meets_requirements = False break elif req[0] == \'CR\': x = req[1] if total_credits < x: meets_requirements = False break if meets_requirements: student_results.append(\\"YES\\") else: student_results.append(\\"NO\\") results.append(student_results) return results"},{"question":"Your friend is a software developer who loves both arrays and geometry. To celebrate his passion, you decided to create a problem that embodies both concepts. You give a set of points in a 2D plane represented as an integer array. Each point is represented by a tuple (x, y), and the array consists of multiple such points. You then asked your friend to find the maximum possible distance between any two points in this set. The distance between two points (x1, y1) and (x2, y2) is given by the Euclidean distance formula: [ text{Distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Input: - The first line contains an integer N, the number of points. - The next N lines each contain two space-separated integers representing the coordinates of the points. Output: - Print the maximum distance between any two points in the given set, rounded to 2 decimal places. Constraints: - 2 ≤ N ≤ 1000 - -10^4 ≤ x, y ≤ 10^4 SAMPLE INPUT: 4 0 0 1 1 1 0 0 1 SAMPLE OUTPUT: 1.41 Explanation: The four points are (0,0), (1,1), (1,0), and (0,1). The maximum distance is between points (0,0) and (1,1), which is calculated as: [ sqrt{(1-0)^2 + (1-0)^2} = sqrt{1 + 1} = sqrt{2} approx 1.41 ] Hence, the output is 1.41.","solution":"import math def max_distance(points): Returns the maximum distance between any two points in the given set. :param points: List of tuples representing the points in 2D plane. :return: Maximum distance between any two points rounded to 2 decimal places. max_dist = 0 n = len(points) for i in range(n): for j in range(i + 1, n): x1, y1 = points[i] x2, y2 = points[j] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) if distance > max_dist: max_dist = distance return round(max_dist, 2) def get_points(): Reads input points and returns them as a list of tuples. N = int(input()) points = [] for _ in range(N): x, y = map(int, input().split()) points.append((x, y)) return points if __name__ == \\"__main__\\": points = get_points() result = max_distance(points) print(result)"},{"question":"Write a function that takes a list of integers and returns the indices of all the local minima in the list. A local minima is an element that is smaller than both its neighbors. The first and last elements are not considered as local minima. Input will be a list of integers with length > 2.","solution":"def find_local_minima(arr): Returns the indices of all local minima in the list. A local minima is an element that is smaller than both its neighbors. local_minima_indices = [] for i in range(1, len(arr) - 1): if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]: local_minima_indices.append(i) return local_minima_indices"},{"question":"Given a list of n integers, find if there exists a pair of integers in the array such that their sum is equal to a given target number. You are required to do this in linear time. Example 1: Input: n = 6, target = 9 arr = [2, 7, 11, 15, 1, 8] Output: True Explanation: There exist two numbers 7 and 2 whose sum is 9. Example 2: Input: n = 5, target = 10 arr = [1, 2, 3, 4, 5] Output: False Explanation: There doesn\'t exist any pair of numbers whose sum is 10. Your Task: Complete the function `pairWithSum` which takes the integer n, the array arr, and the integer target as input and returns True if there exists a pair of numbers that sum to the target, otherwise returns False. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def pairWithSum(n, arr, target): Determines if there exists a pair of numbers in the array whose sum equals the target. :param n: The number of elements in the array. :param arr: List of integers. :param target: The target sum. :return: True if a pair with the target sum exists, otherwise False. seen = set() for number in arr: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"The City of Fetchburg has a peculiar tradition – every year, they host a grand festival where a series of shows are conducted all over the city. Each show has a start time and an end time. The mayor of Fetchburg loves to attend as many shows as possible, but he does not like to miss one once it has started. Given the list of shows with their start and end times, help the mayor figure out the maximum number of non-overlapping shows he can attend from start to finish. -----Input----- The input starts with a line containing n (1 leq n leq 100000), which is the number of shows. This is followed by n lines, each containing two integers, s_ i and e_ i (0 leq s_ i < e_ i leq 1000000000), which represent the start and end times of the i^text {th} show. -----Output----- Display the maximum number of non-overlapping shows the mayor can attend. -----Examples----- Sample Input 1: 5 1 4 2 3 3 5 7 8 5 8 Sample Output 1: 3 Sample Input 2: 3 1 3 2 5 4 6 Sample Output 2: 2","solution":"def max_non_overlapping_shows(n, shows): Returns the maximum number of non-overlapping shows the mayor can attend. :param n: int, the number of shows :param shows: List of tuples, each tuple contains two integers (start time, end time) of a show :return: int, maximum number of non-overlapping shows # Sort shows by their end time shows.sort(key=lambda x: x[1]) # Initialize variables max_shows = 0 current_end_time = 0 # Iterate over the shows to count the non-overlapping shows for start, end in shows: if start >= current_end_time: max_shows += 1 current_end_time = end return max_shows"},{"question":"A mountain array is defined as an array where elements are first monotonically increasing and then monotonically decreasing (there must be at least one element before the peak and one element after the peak). Given an integer array arr, return the length of the mountain array\'s longest subarray. Note that the mountain array condition must be strictly increasing and then strictly decreasing. # Constraints * 3 ≤ arr.length ≤ 10^5 * 0 ≤ arr[i] ≤ 10^4 # Input Input is given from Standard Input in the following format: arr # Output Print the length of the longest subarray that forms a mountain in the following format: length # Examples Example 1 Input: ``` [2, 1, 4, 7, 3, 2, 5] ``` Output: ``` 5 ``` Explanation: The longest mountain can be [1, 4, 7, 3, 2] which has length 5. Example 2 Input: ``` [2, 2, 2] ``` Output: ``` 0 ``` Explanation: There is no mountain subarray.","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 right = i + 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"You are given an array `arr` consisting of `n` integers. Your task is to write a program that will find the maximum product of three distinct integers within the array. Input The first line contains an integer `n` (3 ≤ n ≤ 10^5), the number of elements in the array. The second line contains `n` space-separated integers, where each integer is between -10^3 and 10^3. Output Output a single integer, the maximum product of any three distinct integers in the array. Example # Input: ``` 5 1 2 3 4 5 ``` # Output: ``` 60 ``` # Explanation: The maximum product is obtained by multiplying 3, 4, and 5. Note: - The three integers chosen must be distinct, meaning you cannot use the same integer more than once. - The array may contain negative integers, zero, and positive integers.","solution":"def maximum_product_of_three(nums): nums.sort() max1 = nums[-1] * nums[-2] * nums[-3] max2 = nums[0] * nums[1] * nums[-1] return max(max1, max2)"},{"question":"Bobby likes to play with his new robot toy. The robot moves on a 2D grid, where each cell can be either passable or blocked. The robot can move to any of its four adjacent cells (left, right, up, and down) but cannot move diagonally. Bobby wants to know the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. Write a program that determines the length of the shortest path for the robot, or reports that the destination is unreachable. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns in the grid. The next n lines each contain a binary string of length m, where \'0\' indicates a passable cell and \'1\' indicates a blocked cell. -----Output----- Output a single integer – the length of the shortest path from (0, 0) to (n-1, m-1). If there is no such path, output -1. -----Examples----- Input 3 3 010 010 000 Output 5 Input 4 4 0000 1110 0000 0110 Output 7 Input 2 2 01 10 Output -1 -----Note----- In the first test, the shortest path is (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) with a total of 5 moves. In the second test, the shortest path is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3) with a total of 7 moves. In the third test, there is no path from (0, 0) to (1, 1) because one of the cells (0,1) or (1,0) is blocked.","solution":"from collections import deque def shortest_path(n, m, grid): if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'0\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Binary Tree Light Paths A beautifully decorated garden utilizes binary trees to lay out its pathways, where each path is marked with lights. The garden caretaker wants to know the number of valid light paths in the tree. A valid light path in this context starts at any node and ends at any node within the garden, traveling along the tree\'s edges without repetition. Given a binary tree of `n` nodes, return the number of valid light paths where every path contains at least one light. Input: The input consists of multiple datasets each containing data to describe a binary tree in the following format: ``` n a1 b1 a2 b2 ... an-1 bn-1 ``` - `n` is an integer that indicates the number of nodes in the tree (1 ≤ n ≤ 1000). - Each of the following `n-1` lines contains two integers, `ai` and `bi`, that indicate there is an edge between nodes `ai` and `bi`. The end of the input is indicated by a line containing a zero. Output: For each dataset, output a single line containing one integer representing the number of valid light paths in the tree. Example: Input: ``` 5 1 2 1 3 3 4 3 5 4 1 2 1 3 1 4 0 ``` Output: ``` 10 6 ``` Explanation: For the first dataset: - The binary tree has 5 nodes. - There are 10 valid light paths: (1-2), (1-3), (3-4), (3-5), (1-2-1), (1-3-1), (1-3-4-1), (1-3-5-1), (3-4-3), (3-5-3). For the second dataset: - The binary tree has 4 nodes in a star shape. - There are 6 valid light paths: (1-2), (1-3), (1-4), (1-2-1), (1-3-1), (1-4-1).","solution":"def count_light_paths(n, edges): Returns the number of valid light paths in a binary tree with n nodes and given edges. # With n nodes, the number of edges in a connected tree is n-1. # Number of paths in a tree with n nodes is given by n * (n - 1) / 2 return (n * (n - 1)) // 2 def process_input(input_data): Processes the input data and returns the results for each dataset. i = 0 results = [] while i < len(input_data): n = int(input_data[i]) if n == 0: break edges = [] for j in range(n - 1): a, b = map(int, input_data[i + j + 1].split()) edges.append((a, b)) results.append(count_light_paths(n, edges)) i += n return results"},{"question":"A prominent company is planning to host a coding competition. To prepare for the competition, you are tasked with writing a function that simulates a part of the competition. You are given an array of integers representing the scores that participants achieved in a coding challenge. A participant can be considered for the final round if their score is one of the top k unique scores. However, if there are fewer than k unique scores, the participant will not be considered for the final round. Write a function `topKScores` that determines whether each participant can be considered for the final round and returns a list of booleans indicating the result for each participant. Example scores=[100, 50, 50, 25] k=2 The unique scores are [100, 50, 25]. Participant scores 100 and 50 are in the top 2 unique scores, so they are considered for the final round. The participant with score 25 is not, as it is not within the top 2 unique scores. Function Description Complete the `topKScores` function below. `topKScores` has the following parameters: - `int scores[n]`: an array of integers representing the scores of the participants. - `int k`: an integer indicating the top k unique scores. Returns - `List[bool]`: a list of booleans where each boolean indicates whether the corresponding participant can be considered for the final round. Input Format The first line contains an integer n, the number of participants. The second line contains n space-separated integers representing the scores of the participants. The third line contains an integer k. Constraints 1 leq n leq 10^5 1 leq text{scores[i]} leq 10^9 for all 0leq i < n 1 leq k leq n Sample Input 0 5 10 20 20 30 40 3 Sample Output 0 [True, True, True, True, False] Explanation 0 The unique scores are [10, 20, 30, 40]. Top 3 unique scores are [40, 30, 20]. Participants with scores [10, 20, 20, 30, 40] can be considered for the final round if their scores are in the top 3 unique scores, resulting in [True, True, True, True, False]. Sample Input 1 4 100 50 50 50 1 Sample Output 1 [True, False, False, False] Explanation 1 The unique scores are [100, 50]. Top 1 unique scores is [100]. Only the participant with score 100 can be considered for the final round, resulting in [True, False, False, False].","solution":"def topKScores(scores, k): Determines whether each participant can be considered for the final round based on their scores. Parameters: scores (List[int]): An array of integers representing the scores of the participants. k (int): An integer indicating the top k unique scores. Returns: List[bool]: A list of booleans indicating whether each participant can be considered for the final round. # Get unique scores sorted in descending order unique_scores = sorted(set(scores), reverse=True) if len(unique_scores) < k: # If there are fewer than k unique scores, no one can be considered return [False] * len(scores) # Get the top k unique scores top_k_scores = set(unique_scores[:k]) # Generate the result list result = [score in top_k_scores for score in scores] return result"},{"question":"Implement a function that reverses the words in a given sentence. The function should take a sentence as input and return the sentence with the words reversed, without altering the punctuation marks. Assume that the sentence only contains alphabetic characters and spaces, and punctuation marks are limited to a period (\\".\\") at the end of the sentence. A few examples: ```python reverse_sentence(\\"Hello world.\\") return \\"world Hello.\\" reverse_sentence(\\"This is a test.\\") return \\"test a is This.\\" reverse_sentence(\\"Coding is fun.\\") return \\"fun is Coding.\\" reverse_sentence(\\"Python programming rules.\\") return \\"rules programming Python.\\" reverse_sentence(\\"Example.\\") return \\"Example.\\" ```","solution":"def reverse_sentence(sentence): Takes a sentence and returns the sentence with the words reversed, without altering the punctuation marks. if not sentence.endswith(\'.\'): return sentence # Ensuring the provided sentence ends with \\".\\" words_with_period = sentence[:-1].split() # Exclude last period and split into words reversed_words = \\" \\".join(reversed(words_with_period)) # Reverse the list of words return reversed_words + \\".\\""},{"question":"Dr. Smith, an avid mathematician, is fascinated by Fibonacci numbers and their applications in different fields. One day, he stumbled upon a peculiar problem while analyzing the Fibonacci series. He noticed certain patterns when dividing Fibonacci numbers by a constant. Now, he needs your help to write a program that determines how long it takes for the remainder of dividing Fibonacci numbers by a given constant to repeat. Given a positive integer m, find the length of the cycle of remainders when dividing the Fibonacci sequence by m. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Input: - A single integer T representing the number of test cases. (1 < T < 50) - T lines follow, each containing a positive integer m. (2 <= m <= 100) Output: For each test case, output the length of the cycle for the given m. Example: SAMPLE INPUT 3 2 3 5 SAMPLE OUTPUT 3 8 20 Explanation: For m=2, the Fibonacci sequence mod 2 repeats every 3 numbers: 0, 1, 1, 0, 1, 1, ... For m=3, the Fibonacci sequence mod 3 repeats every 8 numbers: 0, 1, 1, 2, 0, 2, 2, 1, ... For m=5, the Fibonacci sequence mod 5 repeats every 20 numbers.","solution":"def pisano_period_length(m): Returns the length of the Pisano period for a given m. The Pisano period is the length of the cycle of the remainders of Fibonacci numbers after dividing by m. if m <= 1: raise ValueError(\\"m must be greater than 1\\") previous, current = 0, 1 for i in range(0, m * m): previous, current = current, (previous + current) % m # A Pisano Period starts with 0, 1 if previous == 0 and current == 1: return i + 1 def find_pisano_periods(test_cases): Given a list of integers representing the test cases, returns a list of Pisano period lengths for the given integers. return [pisano_period_length(m) for m in test_cases]"},{"question":"# Task Given a list of dates representing employee join dates, determine the date when the largest number of employees were working at the company. Assume that all join dates are subsequent to the company\'s founding date, which can be disregarded. # Notes * The dates are given in the format YYYY-MM-DD. * If two dates have the same highest count, return the earliest date. * Return the result as a string, like the input dates.","solution":"from collections import defaultdict from datetime import datetime def date_with_most_employees(dates): date_counts = defaultdict(int) # Count each occurrence of date for date in dates: date_counts[date] += 1 # Find date with most employees max_count = 0 max_date = None for date, count in date_counts.items(): if count > max_count: max_count = count max_date = date elif count == max_count: # Check if current date is earlier than max_date if datetime.strptime(date, \'%Y-%m-%d\') < datetime.strptime(max_date, \'%Y-%m-%d\'): max_date = date return max_date"},{"question":"Consider an infinite grid of cells. Initially, one cell at the origin (0, 0) is infected with a virus. Each second, the virus spreads to all neighboring cells that share an edge with an infected cell. You are required to answer t queries. In each query you are given three integers x, y, d. You need to determine whether the cell at coordinates (x, y) will be infected after d seconds. -----Input----- The first line contains one integer t (1 le t le 100) — the number of queries. Each of the next t lines contains three integers x, y, d (|x|, |y| le 10^9, 0 le d le 10^9) — the coordinates of the cell and the number of seconds. -----Output----- For each query, output \\"YES\\" if the cell at (x, y) will be infected after d seconds or \\"NO\\" otherwise. You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer). -----Examples----- Input 4 1 1 1 2 0 2 0 5 5 3 3 2 Output NO YES YES NO -----Note----- In the first query, after 1 second, the virus has spread to cells (1, 0), (0, 1), (-1, 0) and (0, -1). The cell (1, 1) remains uninfected. In the second query, after 2 seconds, the virus has spread to cells within a Manhattan distance of 2 from the origin, including (2, 0). Hence, the answer is \\"YES\\". In the third query, the virus will have spread along the line y = 0, y = 1, y = 2, y = 3, y = 4 and y = 5 within 5 seconds, hence (0, 5) will be infected. In the fourth query, after 2 seconds, the virus cannot reach cell (3, 3), therefore the answer is \\"NO\\".","solution":"def is_infected(x, y, d): Determines whether the cell at coordinates (x, y) will be infected after d seconds. return abs(x) + abs(y) <= d"},{"question":"You are given an array of integers representing the heights of students in a classroom. The class teacher wants to arrange the students in a line such that the array is sorted in non-decreasing order of their heights. In doing so, the teacher can select a contiguous segment of students and reverse their heights to help achieve the desired order. Write a function to determine whether it is possible to sort the array by performing at most one such reversal of a contiguous segment. -----Input----- The first input line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (1 le n le 10^5) — the number of students. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the students. It is guaranteed that the sum of the values n over all test cases does not exceed 10^6. -----Output----- For each test case output \\"YES\\" if it is possible to sort the array by at most one reversal of a contiguous segment, otherwise output \\"NO\\". -----Examples----- Input 3 5 1 3 2 4 5 5 1 3 5 4 2 4 4 3 2 1 Output YES NO YES -----Note----- In the first example, a single reversal of the subarray [3, 2] will result in the array becoming [1, 2, 3, 4, 5], which is sorted. In the second example, it is not possible to sort the array by just one reversal of a contiguous segment. In the third example, a single reversal of the entire array will result in [1, 2, 3, 4], which is sorted.","solution":"def can_be_sorted_by_one_reversal(t, test_cases): def is_one_reversal_possible(n, heights): sorted_heights = sorted(heights) if heights == sorted_heights: return \\"YES\\" left = 0 right = n - 1 while left < n and heights[left] == sorted_heights[left]: left += 1 while right >= 0 and heights[right] == sorted_heights[right]: right -= 1 if list(reversed(heights[left:right + 1])) == sorted_heights[left:right + 1]: return \\"YES\\" else: return \\"NO\\" results = [] for n, heights in test_cases: results.append(is_one_reversal_possible(n, heights)) return results"},{"question":"Who Knows the Secret Code? Zoe is working on a top-secret project that involves decoding a sequence of numbers to extract a hidden message. Each number in the sequence represents a specific character, and she has a mapping table that tells her which number corresponds to which character. However, Zoe\'s boss has added a twist for extra security; only the subsequences that are increasing (i.e., each subsequent number is greater than the previous one) represent valid parts of the hidden message. Zoe needs to find the length of the longest increasing subsequence in her number sequence to determine the potential length of the valid part of the hidden message. Your task is to help Zoe by writing a program that finds the length of the longest increasing subsequence in a given sequence of numbers. For the purposes of the question, a subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements. ------ Input: ------ The first line of the input contains a single integer T, the number of test cases. Each test case begins with a single integer N, the number of elements in the sequence. The next line contains N integers, representing the elements of the sequence. ------ Output: ------ For each test case, output a single line containing the length of the longest increasing subsequence in that sequence. ------ Constraints: ------ 1≤T≤10 1≤N≤100000 1≤sequence[i]≤1000000 ------ Sample Input 1 ------ 2 5 10 22 9 33 21 6 50 3 10 7 40 80 ------ Sample Output 1 ------ 3 4 ------ Explanation 1 ------ In the first test case, the longest increasing subsequence is [10, 22, 33], and its length is 3. In the second test case, the longest increasing subsequence is [3, 10, 40, 80], and its length is 4. Note: Large input data. Use optimized algorithms and faster I/O methods.","solution":"import bisect def length_of_lis(sequence): Finds the length of the longest increasing subsequence in the given sequence. if not sequence: return 0 tails = [] for num in sequence: pos = bisect.bisect_left(tails, num) if pos == len(tails): tails.append(num) else: tails[pos] = num return len(tails) def process_input(input_data): Processes input data for multiple test cases and returns a list of results. results = [] lines = input_data.splitlines() T = int(lines[0]) line_idx = 1 for _ in range(T): N = int(lines[line_idx]) sequence = list(map(int, lines[line_idx + 1].split())) results.append(length_of_lis(sequence)) line_idx += 2 return results"},{"question":"You are given a grid with obstacles and targets. Your task is to find the minimal number of steps required to reach a target from a given starting point, avoiding obstacles. If it is not possible to reach any target, return `-1`. The allowed movements are up (`U`), down (`D`), left (`L`), and right (`R`). -----Constraints----- - The grid is represented as a 2D list of characters. - `S` denotes the starting point. - `T` denotes a target point. - `#` represents an obstacle. - `.` represents an empty space. - The grid size is m x n where 2 ≤ m, n ≤ 100. -----Input----- Input is given from Standard Input in the following format: - First line contains two integers m and n separated by a space. - Next m lines each containing n characters representing the grid. -----Output----- Output the minimal number of steps required to reach a target from the starting point. If it is not possible to reach any target, return `-1`. -----Sample Input----- 5 5 S...# ....# ..#.T ..#.# ..... ..# -----Sample Output----- 8 Starting from `S`, you can reach `T` in 8 steps with the following path: `RRRDDDDU`. Note: Multiple targets and multiple obstacles may exist in the grid. The goal is to find the target `T` with the minimal number of steps needed from the start `S`.","solution":"from collections import deque def min_steps(grid): m = len(grid) n = len(grid[0]) # Find the starting point start = None for i in range(m): for j in range(n): if grid[i][j] == \'S\': start = (i, j) break if start: break if not start: return -1 # No starting point found # Directions for Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS setup queue = deque([(start[0], start[1], 0)]) # (x, y, steps) visited = set() visited.add(start) while queue: x, y, steps = queue.popleft() # If we reach a target if grid[x][y] == \'T\': return steps # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 # No path found to any target def solution(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) grid = [] idx = 2 for i in range(m): grid.append(list(data[idx])) idx += n print(min_steps(grid))"},{"question":"Taro is attending a competitive programming contest. In one of the challenges, he needs to solve the following problem: There is a list of N integers where some elements are repeating while some are unique. Taro needs to write a program that receives the list and determines the frequency of each unique element in the list. The program should then output the elements along with their frequencies. -----Constraints----- - N is an integer between 1 and 100 (inclusive). - Each element in the list is an integer between 1 and 50 (inclusive). -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- For each unique element in the list, print each element followed by its frequency in ascending order of the elements. -----Sample Input----- 5 1 2 2 2 3 -----Sample Output----- 1 1 2 3 3 1 In this example: - The element 1 appears 1 time. - The element 2 appears 3 times. - The element 3 appears 1 time.","solution":"def count_frequencies(n, elements): Given a list of n elements, count the frequency of each unique element and return them in ascending order of the elements. :param n: Length of the list :param elements: List of integers :return: List of tuples containing element and its frequency from collections import Counter # Count frequencies of each element using Counter frequency = Counter(elements) # Sort the elements by their value (key) sorted_elements = sorted(frequency.items()) return sorted_elements"},{"question":"You are given a garden represented by a matrix of size n x m. Each cell in the matrix represents a planter box, and each box can either be empty (represented by a \'.\') or contain a plant (represented by a \'*\'). Your task is to determine the maximum length of an uninterrupted straight line (horizontal, vertical, or diagonal) of planter boxes containing plants in the garden. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), denoting the number of rows and columns in the garden, respectively. Each of the following n lines contains m characters, either \'.\' or \'*\', that represent the state of each planter box. Output Print a single integer: the maximum length of an uninterrupted straight line of planter boxes containing plants in the garden. Example Input 4 5 .*..* ***.* ..*.. *.*.. Output 3 Note In the given example, the longest uninterrupted straight line of plants is 3. It can be found either vertically in the second column or diagonally from the second row-third column to the fourth row-fifth column.","solution":"def longest_straight_line(matrix): n = len(matrix) m = len(matrix[0]) max_len = 0 # Check horizontal lines for i in range(n): count = 0 for j in range(m): if matrix[i][j] == \'*\': count += 1 max_len = max(max_len, count) else: count = 0 # Check vertical lines for j in range(m): count = 0 for i in range(n): if matrix[i][j] == \'*\': count += 1 max_len = max(max_len, count) else: count = 0 # Check main diagonal lines for d in range(n + m - 1): count = 0 for i in range(n): j = d - i if 0 <= j < m: if matrix[i][j] == \'*\': count += 1 max_len = max(max_len, count) else: count = 0 # Check anti-diagonal lines for d in range(n + m - 1): count = 0 for i in range(n): j = i + m - 1 - d if 0 <= j < m: if matrix[i][j] == \'*\': count += 1 max_len = max(max_len, count) else: count = 0 return max_len"},{"question":"Chef is preparing for a cooking competition and needs precise timing for each task to ensure perfection in his dishes. He\'s writing a program to help him manage his cooking schedule effectively. Chef has a list of tasks with their start times and durations, and he wants to calculate the exact end time for each task to ensure everything is completed on schedule. Given the start time in 24-hour format (HH:MM) and duration in minutes for each task, help Chef by writing a program to compute the end time. INPUT FORMAT: Line 1: An integer N (the number of tasks) Next N lines: Each line contains a string StartTime (formatted as HH:MM) and an integer Duration (in minutes) CONSTRAINTS: 1 ≤ N ≤ 100 0 ≤ HH ≤ 23 0 ≤ MM ≤ 59 1 ≤ Duration ≤ 1440 OUTPUT FORMAT: N lines: Each line should contain the end time of the respective task (formatted as HH:MM). SAMPLE INPUT: 3 12:30 45 01:15 240 23:50 20 SAMPLE OUTPUT: 13:15 05:15 00:10","solution":"def compute_end_time(start_time, duration): Computes the end time given a start time in HH:MM format and a duration in minutes. :param start_time: A string representing the start time in HH:MM format. :param duration: An integer representing the duration in minutes. :return: A string representing the end time in HH:MM format. start_hours, start_minutes = map(int, start_time.split(\':\')) total_start_minutes = start_hours * 60 + start_minutes end_total_minutes = total_start_minutes + duration end_hours = (end_total_minutes // 60) % 24 end_minutes = end_total_minutes % 60 return f\\"{end_hours:02}:{end_minutes:02}\\""},{"question":"Sara is a botanist studying the growth rates of various plant species. She has recorded the height of a particular plant on each day for a certain number of days. Given the heights recorded over these days, Sara wants to analyze the data by identifying the longest strictly increasing subsequence of heights. This will help her understand the periods during which the plant experienced the most significant growth. Your task is to write a program that calculates the length of the longest strictly increasing subsequence for each set of heights provided. Input The input contains multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000) representing the number of days. The next line contains n integers representing the recorded heights h1, h2, ..., hn (1 ≤ hi ≤ 10000). The input terminates with a line containing a zero, which should not be processed. Output For each test case, output the length of the longest strictly increasing subsequence in a single line. Example Input 6 3 4 1 2 8 5 5 10 22 9 33 21 0 Output 3 3","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest strictly increasing subsequence of heights. if not heights: return 0 n = len(heights) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in bottom up manner for i in range(1, n): for j in range(0, i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Find the maximum value in lis array return max(lis) def process_input(input_data): Processes the input and returns results for each test case. results = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break heights = list(map(int, lines[i + 1].split())) results.append(longest_increasing_subsequence(heights)) i += 2 return results"},{"question":"You are given a string S, consisting of lowercase letters and spaces. Your task is to capitalize the first letter of each word and return the modified string. ------ Input Format ------ - The first line of input will contain a single integer T, the number of test cases. Then the test cases follow. - Each test case will contain a single line of input, a string S. ------ Output Format ------ For each test case, print in a single line the modified string with the first letter of each word capitalized. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100, where |S| is the length of string S. ------ Sample Input 1 ------ 3 hello world this is a test capitalize every word ------ Sample Output 1 ------ Hello World This Is A Test Capitalize Every Word","solution":"def capitalize_words(s): Capitalizes the first letter of each word in the string s. return \' \'.join(word.capitalize() for word in s.split()) def process_test_cases(test_cases): Processes multiple test cases, capitalizing the first letter of each word in each string. results = [] for s in test_cases: results.append(capitalize_words(s)) return results"},{"question":"In a city called Factorville, people are fascinated by factors, especially prime factors. They often play a game where they have to determine a sequence of numbers based on their prime factors. Given an integer N, you need to determine the minimum number of distinct prime factors any number between 1 and N (inclusive) possesses. If a number is a prime itself, it is counted as having exactly one distinct prime factor. For example, the number 1 has no prime factors, while the number 6 has two distinct prime factors (2 and 3). -----Input----- A single integer N (1 ≤ N ≤ 10^6). -----Output----- Print the minimum number of distinct prime factors of any number from 1 to N. -----Examples----- Input 10 Output 0 Input 30 Output 0 Input 6 Output 0","solution":"def min_distinct_prime_factors(N): Returns the minimum number of distinct prime factors of any number from 1 to N. if N == 1: return 0 else: return 0 # All numbers till N = 1 have a minimum of 0 prime factors"},{"question":"A software company wants to optimize the distribution of workload across its servers. They have n servers, each with a maximum capacity ci. There are m tasks in total, each with a processing requirement ti. The company aims to distribute all the tasks across the servers such that no server exceeds its maximum capacity. Your task is to determine if it\'s possible to distribute the tasks in a way that no server is overloaded. If it is possible, provide one possible assignment of tasks to servers that satisfies the constraints. Otherwise, indicate that it is not possible. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), the number of servers and the number of tasks, respectively. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10^4), representing the maximum capacity of the servers. The third line contains m space-separated integers t1, t2, ..., tm (1 ≤ ti ≤ 10^3), representing the processing requirements of the tasks. Output If it is not possible to distribute the tasks without overloading any server, print \\"NO\\" (without the quotes). If it is possible, print \\"YES\\" (without the quotes) on the first line. On each of the next m lines, print two integers, the task index (1-based) and the server index (1-based) indicating the assignment of the tasks. Examples Input 3 5 8 12 7 4 2 3 5 6 Output YES 1 1 2 2 3 3 4 2 5 1 Input 2 4 5 5 5 5 6 7 Output NO","solution":"def distribute_tasks(n, m, capacities, tasks): from heapq import heappop, heappush tasks_sorted_with_indices = sorted(enumerate(tasks), key=lambda x: -x[1]) servers = [(cap, i) for i, cap in enumerate(capacities)] assignments = [0] * m for task_index, task in tasks_sorted_with_indices: found_server = False for i in range(len(servers)): if servers[i][0] >= task: found_server = True assignments[task_index] = servers[i][1] + 1 servers[i] = (servers[i][0] - task, servers[i][1]) servers.sort(reverse=True) # keeping servers sorted by remaining capacity (desc) break if not found_server: return \\"NO\\" return \\"YES\\", assignments"},{"question":"*VALID BRACES CHECKER* In mathematical expressions and programming language\'s syntax, it is common to use braces `{}`, brackets `[]`, and parentheses `()`. Sometimes, expressions may be complex and these symbols could be improperly nested or unmatched. Write a function to check whether a given string containing these symbols is valid. A string is considered valid if braces, brackets, and parentheses are correctly closed and nested. Input: - A string `s` containing symbols `{}`, `[]`, `()`, along with other characters. Output: - Return `True` if the sequence of braces, brackets, and parentheses is closed and nested correctly, otherwise `False`. Criteria to bear in mind: - The input string can contain other characters, but only braces, brackets, and parentheses are relevant for validation. - An empty string is considered valid. Examples: ```python is_valid(\\"()\\") == True is_valid(\\"([{}])\\") == True is_valid(\\"[(])\\") == False is_valid(\\"({[]})\\") == True is_valid(\\"()[]{}\\") == True is_valid(\\"([)]\\") == False is_valid(\\"{[}\\") == False is_valid(\\"\\") == True ``` Write a function `is_valid(s: str) -> bool` to solve the problem.","solution":"def is_valid(s: str) -> bool: Check if the input string containing braces, brackets, and parentheses is valid. A string is considered valid if these symbols are correctly closed and nested. stack = [] matching = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching.values(): stack.append(char) elif char in matching.keys(): if stack == [] or matching[char] != stack.pop(): return False return stack == []"},{"question":"A company wants to schedule interviews for N candidates with M interviewers. Each candidate has provided a list of time slots when they are available for an interview, and each interviewer has provided a list of slots when they are free to take interviews. The company must interview each candidate only once and can only interview one candidate at a time. Similarly, each interviewer can conduct only one interview at a time. Given the availability of candidates and interviewers, determine the minimum number of time slots required to complete all interviews. If it is not possible to schedule all interviews, return -1. Constraints: * 1 leq N, M leq 100 * Each candidate and interviewer may have up to 100 available time slots. * Time slots are represented as integers ranging from 1 to 10^9. * A candidate\'s availability list and an interviewer\'s availability list may have overlapping slots, and this makes an interview possible during those overlapping slots. Input: The input will be given in the following format: ``` N availability_of_candidate_1 availability_of_candidate_2 ... availability_of_candidate_N M availability_of_interviewer_1 availability_of_interviewer_2 ... availability_of_interviewer_M ``` Where each `availability_of_candidate_i` and `availability_of_interviewer_j` is a space-separated list of integers indicating the available time slots for the respective candidate or interviewer. Output: Print an integer denoting the minimum number of time slots required to complete all interviews. If scheduling all interviews is not possible, print -1. Examples: Input: ``` 2 1 2 3 2 4 2 2 3 1 2 4 ``` Output: ``` 2 ``` Input: ``` 3 1 4 6 2 3 5 7 8 2 2 4 6 7 1 3 5 9 ``` Output: ``` 3 ``` Input: ``` 3 1 2 3 2 3 4 5 2 3 4 5 6 7 ``` Output: ``` -1 ```","solution":"def min_time_slots(N, candidates, M, interviewers): from collections import defaultdict import heapq available_interviewers = defaultdict(list) for i in range(M): for slot in interviewers[i]: available_interviewers[slot].append(i) heap = [] candidate_interviews = [-1] * N for i in range(N): for slot in candidates[i]: if slot in available_interviewers: heapq.heappush(heap, (slot, i, available_interviewers[slot])) interviewer_schedule = [0] * M interview_count = 0 while heap: slot, candidate, interviewers_available = heapq.heappop(heap) if candidate_interviews[candidate] != -1: continue for interviewer in interviewers_available: if interviewer_schedule[interviewer] <= slot: interviewer_schedule[interviewer] = slot + 1 candidate_interviews[candidate] = slot interview_count += 1 break if interview_count == N: return len(set(candidate_interviews)) return -1 def process_input(data): lines = data.strip().split(\'n\') N = int(lines[0]) candidates = [list(map(int, lines[1 + i].split())) for i in range(N)] M = int(lines[N + 1]) interviewers = [list(map(int, lines[N + 2 + i].split())) for i in range(M)] return N, candidates, M, interviewers"},{"question":"In computer graphics, one common problem is determining the visibility of a point from a given viewpoint, while accounting for obstacles. Here\'s a simplified version of the problem: We have a 2D grid where each cell can either be empty (0) or contain an obstacle (1). We want to determine if a given target point on this grid is visible from a given start point, considering that obstacles block visibility. Visibility is blocked if there is any obstacle cell between the start point and the target point when drawing a straight line between them (using Bresenham\'s line algorithm). Task Write a function `is_visible(grid, start, target)` that takes in: - `grid`: a 2D list of integers (0s and 1s) representing the grid. - `start`: a tuple (x, y) representing the starting point. - `target`: a tuple (x, y) representing the target point. The function should return `True` if the target point is visible from the start point, otherwise `False`. You may assume that both `start` and `target` points are inside the grid and both points are on empty cells (0). Example ``` grid = [ [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 0, 0] ] start = (0, 0) target = (2, 2) is_visible(grid, start, target) == False # As there is an obstacle at (1, 2) blocking the line of sight. ``` Hint Use Bresenham\'s Line Algorithm to determine the cells lying on the direct line path between the start and target points. Check if any of these cells contain an obstacle (1). Happy coding!","solution":"def is_visible(grid, start, target): Determine if the target point is visible from the start point on the given grid. Parameters: grid (list of list of int): 2D grid representing the environment with obstacles (1) and empty spaces (0). start (tuple of int): Starting point in the grid. target (tuple of int): Target point in the grid. Returns: bool: True if the target is visible from the start, False otherwise. def bresenham_line(x1, y1, x2, y2): points = [] dx = abs(x2 - x1) dy = abs(y2 - y1) sx = 1 if x1 < x2 else -1 sy = 1 if y1 < y2 else -1 err = dx - dy while True: points.append((x1, y1)) if x1 == x2 and y1 == y2: break e2 = 2 * err if e2 > -dy: err -= dy x1 += sx if e2 < dx: err += dx y1 += sy return points points_on_line = bresenham_line(start[0], start[1], target[0], target[1]) for (x, y) in points_on_line: if (x, y) != start and (x, y) != target and grid[y][x] == 1: return False return True"},{"question":"A social media platform tracks users and their connections. Your task is to determine if two users are indirectly connected through mutual friends. When users are directly connected, they have a mutual friend path length of 1. If they are connected through exactly one mutual friend, the path length is 2, and so on. Two users are considered indirectly connected if there is a valid mutual friends path of length 2 or more. The goal is to determine if two specific users in a series of test cases are indirectly connected. -----Input----- The first line contains two integers, n and m (1 le n le 10^5, 0 le m le 10^5), representing the number of users and the number of connections between the users, respectively. The next m lines each contain two integers u and v (1 le u, v le n; u ne v) indicating a direct connection between users u and v. The next line contains a single integer q (1 le q le 10^5) representing the number of queries. The next q lines each contain two integers a and b (1 le a, b le n; a ne b) representing a query to determine if users a and b are indirectly connected. -----Output----- For each query, print YES if the users a and b are indirectly connected, otherwise print NO. You may print each letter in any case (YES, yes, Yes will all be recognized as positive answers, NO, no, and nO will all be recognized as negative answers). -----Examples----- Input 5 4 1 2 2 3 3 4 4 5 3 1 5 1 4 2 5 Output YES YES YES -----Note----- In the first query, users 1 and 5 are indirectly connected through the chain of mutual friends (1-2-3-4-5), which has a path length of 4. In the second query, users 1 and 4 are indirectly connected through the path (1-2-3-4) with a length of 3. In the third query, users 2 and 5 are indirectly connected through the path (2-3-4-5) with a length of 3.","solution":"def find_parent(parent, x): if parent[x] != x: parent[x] = find_parent(parent, parent[x]) return parent[x] def union_parent(parent, rank, a, b): rootA = find_parent(parent, a) rootB = find_parent(parent, b) if rootA != rootB: if rank[rootA] > rank[rootB]: parent[rootB] = rootA elif rank[rootA] < rank[rootB]: parent[rootA] = rootB else: parent[rootB] = rootA rank[rootA] += 1 def are_indirectly_connected(n, m, connections, q, queries): parent = list(range(n + 1)) rank = [0] * (n + 1) for u, v in connections: union_parent(parent, rank, u, v) results = [] for a, b in queries: if find_parent(parent, a) == find_parent(parent, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an integer array `nums` of size `n`, you are allowed to perform the following operation on the array any number of times: Select two indices `i` and `j` such that `1 ≤ i, j ≤ n` and `i ≠ j`, and swap `nums[i]` and `nums[j]`. Your task is to determine the minimum possible value of `k` such that each subarray of length `k` has at least one element which is equal to its 1-based index in the array after rearrangements. -----Input----- The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the size of the array. The second line contains `n` integers `nums[i]` (1 ≤ nums[i] ≤ n) representing the array. -----Output----- Output a single integer `k` — the minimum length of the subarray that meets the requirements. -----Example----- Input: 5 2 1 5 3 4 Output: 2 Input: 4 2 3 4 1 Output: 4 -----Note----- In the first example, after rearranging the array as [1, 2, 3, 4, 5], any subarray of length 2 will contain at least one element which is equal to its 1-based index. In the second example, after rearranging the array as [1, 2, 3, 4], the smallest `k` such that every subarray of length `k` has at least one element in its correct 1-based position is 4.","solution":"def minimum_k(nums): Returns the minimum length of the subarray such that each subarray of that length has at least one element which is equal to its 1-based index in the array after rearrangements. n = len(nums) return max(nums) # We can deduce that the result is equal to the highest index value in the array as constraint defined"},{"question":"Shiro, an avid hiker, is planning a trip to a mountain range. The mountain range can be visualized as a series of peaks and valleys. Each peak or valley has a height associated with it. Shiro wants to find out the maximum difference in height between any two points in the mountain range. Given an array of integers, where each integer represents the height at that point, you are to find the maximum difference between any two heights in the array which are on two different points. Input: First line contains T, the number of test cases. T test cases follow. The first line of each test case contains an integer N, representing the number of heights. The next line contains N space-separated integers representing the heights at different points. Output: For each test case, print the maximum difference in height in a new line. Constraints: 1 ≤ T ≤ 20 2 ≤ N ≤ 10^5 0 ≤ heights[i] ≤ 10^9 SAMPLE INPUT 2 5 1 3 2 5 4 4 5 1 9 7 SAMPLE OUTPUT 4 8","solution":"def max_height_difference(height_lists): Given a list of height lists, returns a list of maximum differences in height for each list. result = [] for heights in height_lists: max_height = max(heights) min_height = min(heights) max_diff = max_height - min_height result.append(max_diff) return result def read_input_and_calculate_max_diff(input_data): Reads the input data, parses it, and returns the maximum height differences for all test cases. lines = input_data.strip().split(\'n\') T = int(lines[0]) height_lists = [] index = 1 for _ in range(T): N = int(lines[index]) heights = list(map(int, lines[index + 1].split())) height_lists.append(heights) index += 2 return max_height_difference(height_lists)"},{"question":"You are developing a new file system that keeps track of the tree structure of directories and files. Each file and directory has a unique name consisting of lowercase English letters. You need to implement a functionality to list the contents of the system in a lexographical order, where directories are listed before files within the same directory. -----Input----- You will be given a list of operations. Each operation can be one of the following: 1. `mkdir path` that creates a new directory at the specified path. 2. `touch path/filename` that creates a new file at the specified path. 3. `ls path` that lists all files and directories in the lexicographically sorted order. The input starts with an integer n (1 leq n leq 1000) indicating the number of operations. The following n lines describe the operations. -----Output----- For each `ls` operation, output the names of all files and directories in the specified directory, in lexographical order. Each name should be on a new line. Separate the results of different `ls` operations by a blank line. If the directory is empty, output nothing for that `ls` operation. -----Examples----- Input 10 mkdir /a mkdir /a/b touch /a/file1 touch /a/file2 mkdir /a/c ls /a mkdir /a/b/d touch /a/b/file3 ls /a/b ls /a/c Output b c file1 file2 d file3 -----Note----- 1. It is guaranteed that directories and files are always created with unique names within the same directory. 2. The root directory is denoted by `/`. 3. When listing contents, directories are listed before files.","solution":"class FileSystem: def __init__(self): # Initialize the file system with a root directory self.fs = {\'/\': {\'type\': \'dir\', \'content\': {}}} def mkdir(self, path): # Split the path into components parts = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'][\'content\'] for part in parts: if part not in current: current[part] = {\'type\': \'dir\', \'content\': {}} current = current[part][\'content\'] def touch(self, path): # Split the path into directory path and filename dir_path, filename = path.rsplit(\'/\', 1) current = self.get_dir_content(dir_path) current[filename] = {\'type\': \'file\', \'content\': None} def ls(self, path): # Get the contents of the specified directory content = self.get_dir_content(path) files = [k for k, v in content.items() if v[\'type\'] == \'file\'] directories = [k for k, v in content.items() if v[\'type\'] == \'dir\'] return sorted(directories) + sorted(files) def get_dir_content(self, path): # Navigate to the given directory and return its contents parts = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'][\'content\'] for part in parts: if part: current = current[part][\'content\'] return current def process_operations(n, operations): fs = FileSystem() results = [] for operation in operations: if operation.startswith(\'mkdir \'): _, path = operation.split(\' \', 1) fs.mkdir(path) elif operation.startswith(\'touch \'): _, path = operation.split(\' \', 1) fs.touch(path) elif operation.startswith(\'ls \'): _, path = operation.split(\' \', 1) result = fs.ls(path) results.append(\'n\'.join(result)) return \'nn\'.join(results)"},{"question":"A company is organizing a seminar where M speakers will present their topics. Each speaker has a specific start and end time for their presentation. As part of the seminar\'s coordination, it is important to ensure that no two presentations overlap in their timings. Given M presentations with their respective start and end times, determine the maximum number of non-overlapping presentations that can be accommodated. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case starts with an integer M, denoting the number of presentations. - The next M lines each contain two integers S and E denoting the start and end times of each presentation. ------ Output Format ------ For each test case, output a single integer denoting the maximum number of non-overlapping presentations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 1000 0 ≤ S < E ≤ 10000 ------ Sample Input 1 ------ 2 3 1 4 2 5 6 8 4 1 3 2 4 3 5 6 7 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Test case 1: The maximum number of non-overlapping presentations is 2. One possible schedule is the presentations with times [1, 4] and [6, 8]. Test case 2: The maximum number of non-overlapping presentations is 3. One possible schedule is the presentations with times [1, 3], [3, 5], and [6, 7].","solution":"def max_non_overlapping_presentations(T, test_cases): Determine the maximum number of non-overlapping presentations for each test case. Parameters: T (int): Number of test cases test_cases (list): A list of test cases, where each test case is a tuple that contains: - M (int): number of presentations. - presentations (list): a list of tuples, where each tuple contains the start and end time of a presentation. Returns: list: A list containing the maximum number of non-overlapping presentations for each test case. results = [] for test_case in test_cases: M, presentations = test_case presentations.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in presentations: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"In a futuristic city, there are N buildings lined up in a straight row with different heights. One day, the city planners decided to build a system of bridges that connect buildings. A bridge can connect building i to building j if and only if i < j and the height of building i is less than the height of building j. Your task is to determine the number of possible bridges that can be built under these conditions. Input Format : The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of buildings. The second line contains N integers, representing the heights of the buildings from left to right. Output Format : For each test case, print the number of possible bridges that can be built. Constraints: 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ Height of building ≤ 10^9 Note: The total number of buildings across all test cases will not exceed 10^6. SAMPLE INPUT 2 3 1 2 3 4 4 3 2 1 SAMPLE OUTPUT 3 0 Explanation In the first test case, for N=3 buildings with heights [1, 2, 3], the possible bridges are: (1,2), (1,3), (2,3) In the second test case, for N=4 buildings with heights [4, 3, 2, 1], no bridges can be built as no building on the left has a smaller height than any building on its right.","solution":"def count_bridges(buildings): Returns the number of possible bridges that can be built. count = 0 for i in range(len(buildings)): for j in range(i + 1, len(buildings)): if buildings[i] < buildings[j]: count += 1 return count def process_test_cases(test_cases): Processes the test cases and returns the list of results. results = [] for buildings in test_cases: results.append(count_bridges(buildings)) return results"},{"question":"Write a function that takes a list of integers as input and returns a new list containing the squares of each number in the original list. The order of elements should be retained, and negative numbers should remain negative in the resulting squares. Examples ``` Input: [1, 2, -3, 4] Output: [1, 4, -9, 16] Input: [0, -1, -2, 3] Output: [0, -1, -4, 9] ```","solution":"def square_numbers_preserve_sign(numbers): Takes a list of integers and returns a new list containing the squares of each number in the original list. Negative numbers will have their signs preserved. return [n * abs(n) for n in numbers]"},{"question":"You are given a rectangular grid of size n x m consisting of only \'.\' and \'#\' characters. A robot starts at position (1, 1) (top-left corner) and wants to reach the position (n, m) (bottom-right corner). The robot can move only to the right or downward to an adjacent cell (i.e., from (i, j) to (i, j+1) or (i, j) to (i+1, j)), and it cannot move into cells with \'#\'. You need to determine whether the robot can reach the bottom-right corner of the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains a string of length m consisting of only \'.\' and \'#\' characters. Output Print \\"YES\\" if the robot can reach the bottom-right corner from the top-left corner, otherwise print \\"NO\\". Examples Input 3 3 ... .#. ... Output YES Input 3 3 .#. # .#. Output NO Note In the first example, the robot can navigate from the top-left to the bottom-right corner with the following path: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3). In the second example, it is impossible for the robot to reach the position (3, 3) from (1, 1) as there are obstacles blocking all possible paths.","solution":"def can_robot_reach_end(grid): n, m = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" from collections import deque queue = deque([(0, 0)]) visited = set((0, 0)) directions = [(0, 1), (1, 0)] # right and down while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"In a fictional land of integers, there is a popular game played among the inhabitants. The game is called \\"Equalize the Array\\". The goal of the game is to make all elements of an array equal using the minimal number of operations. In one operation, a player can choose any two distinct elements from the array and replace one of them with the value of the other. You are given an integer array `a` of length `n`. Write a function to determine the minimum number of operations needed to make all elements in the array equal. Function Signature: ```python def min_operations_to_equalize(n: int, a: List[int]) -> int: pass ``` # Input - `n` (1 ≤ n ≤ 100,000): an integer representing the number of elements in the array. - `a` (0 ≤ a[i] ≤ 10^9): a list of `n` integers. # Output - Return a single integer representing the minimum number of operations needed to make all elements in the array equal. # Example Example 1 **Input:** ```python n = 5 a = [1, 2, 2, 3, 1] ``` **Output:** ```python 3 ``` **Explanation:** - First operation: Change `1` to `2` (Array becomes `[2, 2, 2, 3, 1]`). - Second operation: Change `3` to `2` (Array becomes `[2, 2, 2, 2, 1]`). - Third operation: Change `1` to `2` (Array becomes `[2, 2, 2, 2, 2]`). Example 2 **Input:** ```python n = 4 a = [4, 4, 4, 4] ``` **Output:** ```python 0 ``` **Explanation:** - All elements are already equal, no operations are needed. # Note To achieve this, find the most frequent element in the array. Then, compute how many elements need to be changed to this most frequent element to make all elements in the array equal. This count of changes will be your answer.","solution":"from typing import List from collections import Counter def min_operations_to_equalize(n: int, a: List[int]) -> int: # Find the frequency of each element in the array frequency = Counter(a) # Find the maximum frequency max_freq = max(frequency.values()) # The minimum number of operations needed will be the number of elements # not equal to the most frequent element return n - max_freq"},{"question":"Statement You are given a positive integer N. Your task is to find and return the sum of all numbers less than N that are both multiples of 3 or 5. Input Format The first line of input contains T, the number of test cases to follow. Each of the next T lines contains one integer N. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 Output Format For each test case, print the required sum on a new line. SAMPLE INPUT 3 10 20 15 SAMPLE OUTPUT 23 78 45 Explanation 1st Test Case: The numbers less than 10 that are multiples of 3 or 5 are 3, 5, 6 and 9. Their sum is 3 + 5 + 6 + 9 = 23. 2nd Test Case: The numbers less than 20 that are multiples of 3 or 5 are 3, 5, 6, 9, 10, 12, 15 and 18. Their sum is 78. 3rd Test Case: The numbers less than 15 that are multiples of 3 or 5 are 3, 5, 6, 9, 10 and 12. Their sum is 45.","solution":"def sum_of_multiples_of_3_or_5(N): Returns the sum of all numbers less than N that are multiples of 3 or 5. total_sum = 0 for i in range(1, N): if i % 3 == 0 or i % 5 == 0: total_sum += i return total_sum"},{"question":"The Kingdom of Graphland is organizing a unique competition involving undirected graphs. The competition involves teams finding a special subset of vertices in a given graph. Specifically, the task is to locate a Maximum Independent Set (MIS). An independent set in a graph is a set of vertices such that no two vertices in the set are adjacent. A Maximum Independent Set is an independent set of the largest possible size. Given an undirected graph with `n` vertices and `m` edges, your task is to determine if there exists an independent set of size exactly `k`. If such a set exists, you should output \\"YES\\". Otherwise, output \\"NO\\". Input The first line of the input contains three integers `n`, `m`, and `k` (1 ≤ n ≤ 20, 0 ≤ m ≤ n(n-1)/2, 1 ≤ k ≤ n) — the number of vertices, the number of edges, and the size of the independent set to find, respectively. The next `m` lines describe the edges. Each line contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) indicating that there is an edge between vertex `u` and vertex `v`. Each pair of vertices will appear at most once in the input, meaning no duplicate edges will exist. Output Output \\"YES\\" (without quotes) if there exists an independent set of size exactly `k`. Otherwise, output \\"NO\\" (without quotes). Examples Input 5 4 3 1 2 2 3 3 4 4 5 Output YES Input 4 5 2 1 2 1 3 1 4 2 3 3 4 Output YES Input 4 5 4 1 2 1 3 1 4 2 3 3 4 Output NO Note In the first example, the independent set {1, 3, 5} satisfies the condition as these vertices are not connected directly. In the second example, several independent sets of size 2 exist, such as {2, 4}. In the third example, it\'s impossible to construct an independent set of size 4 as the maximum possible independent set size is 3.","solution":"from itertools import combinations def max_independent_set(n, m, k, edges): # Create adjacency matrix graph = [[False] * n for _ in range(n)] for u, v in edges: graph[u-1][v-1] = True graph[v-1][u-1] = True # Check all combinations of vertices of size k for vertices in combinations(range(n), k): independent = True for i in range(k): for j in range(i+1, k): if graph[vertices[i]][vertices[j]]: independent = False break if not independent: break if independent: return \\"YES\\" return \\"NO\\""},{"question":"You have been hired to develop the latest image rendering software. An important part of this software requires verifying the integrity of each image. Each image is represented as a matrix of integers, where each integer denotes the color value of a pixel. To ensure the image has not been corrupted, you will calculate the checksum of the image. The checksum for an image is defined as the sum of the integers in every row\'s leftmost to rightmost column indices, but to prevent any overflow errors, you must take the modulo 10^9+7 of this sum. If the checksum of any image calculated this way does not match the stored checksum value, the image is considered corrupt. -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 1000), the number of rows and columns in the matrix, respectively. The next n lines each contain m integers a_{ij} (0 leq a_{ij} leq 10^9), representing the pixel values of the image. The (n+2)^{text {th}} line contains an integer c (0 leq c leq 10^9), the stored checksum value. -----Output----- Display \\"Corrupt\\" if the calculated checksum value does not match the stored checksum value. Otherwise, display \\"Valid\\". -----Examples----- Sample Input: 3 3 1 2 3 4 5 6 7 8 9 45 Sample Output: Valid Sample Input: 2 2 1000000000 1000000000 1000000000 1000000000 6 Sample Output: Corrupt","solution":"def verify_image_integrity(matrix, stored_checksum): MOD = 10**9 + 7 calculated_checksum = 0 for row in matrix: calculated_checksum = (calculated_checksum + sum(row)) % MOD if calculated_checksum == stored_checksum: return \\"Valid\\" else: return \\"Corrupt\\""},{"question":"Given an array of distinct integers, write a program to find the total number of pairs of elements that sum up to a given target value. Input Format The first line contains an integer T i.e. the number of test cases. T test cases follow, each containing two lines: - First line contains two integers N and X, where N is the number of elements in the array and X is the target sum. - Second line contains N space-separated integers denoting the array elements. Output Format For each test case, print in a new line the number of pairs that sum up to the given target value. Constraints 1 leq T leq 10 2 leq N leq 10^3 -10^6 leq Array elements leq 10^6 Sample Input 3 4 5 1 5 3 2 5 0 -1 -2 -3 2 3 3 7 3 4 5 Sample Output 2 2 1 Explanation For the first test case, the pairs (1, 4) and (3, 2) sum up to the target value 5. Thus, the output for this test case is 2. For the second test case, the pairs (-1, 1) and (-3, 3) sum up to the target value 0. Thus, the output for this test case is 2. For the third test case, the pair (3, 4) sums up to the target value 7. Thus, the output for this test case is 1.","solution":"def find_pairs_summing_to_target(test_cases): results = [] for case in test_cases: N, X, arr = case pair_count = 0 seen = set() for number in arr: complement = X - number if complement in seen: pair_count += 1 seen.add(number) results.append(pair_count) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, X = map(int, lines[index].split()) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, X, arr)) index += 2 return test_cases"},{"question":"A city planner has a list of parking zones, each with a specified number of parking spots and the fee for parking in that zone. You are to design a system to help drivers find the closest and cheapest parking zone given their current location and budget constraints. For simplicity, assume that all parking zones are aligned on a straight line. Each parking zone can be represented as a tuple (position, spots, fee) where: - `position` (an integer) represents the location of the parking zone on the line. - `spots` (an integer) represents the number of available parking spots in that zone. - `fee` (an integer) represents the hourly parking fee for that zone. Given the driver\'s current position and their budget, find the closest parking zone with available spots that the driver can afford. If there are multiple options at the same minimum distance, return the one with the lowest fee. If there are still multiple options, return the one with the lowest position. If no suitable parking zone can be found, return -1. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers N, B, and P representing the number of parking zones, the driver\'s budget, and their current position. - The next N lines each contain three space-separated integers representing the position, spots, and fee of each parking zone. ------ Output Format ------ For each test case, print a single line containing one integer — the position of the suitable parking zone, or -1 if no suitable zone can be found. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 1 ≤ B ≤ 10^6 1 ≤ P, position ≤ 10^6 1 ≤ spots ≤ 100 1 ≤ fee ≤ 1000 ------ Sample Input 1 ------ 2 3 15 50 45 10 5 60 5 10 75 2 20 2 25 30 20 0 10 40 5 25 ------ Sample Output 1 ------ 45 40","solution":"def find_parking_zone(T, test_cases): results = [] for i in range(T): N, B, P = test_cases[i][0] zones = test_cases[i][1] suitable_zones = [] for zone in zones: position, spots, fee = zone if spots > 0 and fee <= B: suitable_zones.append((abs(P - position), fee, position)) if suitable_zones: suitable_zones.sort(key=lambda x: (x[0], x[1], x[2])) results.append(suitable_zones[0][2]) else: results.append(-1) return results"},{"question":"Given an integer array of size n, your task is to divide the array into two non-empty subsequences such that the sum of the absolute differences of values between the corresponding elements of the subsequences is maximized. Note that the subsequences should not have any overlap of indices. Return the maximum sum of absolute differences. Example 1: Input: arr = [1, 3, 2, 4] Output: 4 Explanation: One possible way to divide the array is to put [1, 2] in the first subsequence and [3, 4] in the second subsequence. The differences are |1-3| = 2 and |2-4| = 2; the total sum is 2 + 2 = 4. Example 2: Input: arr = [1, 2, 3] Output: 2 Explanation: One possible way to divide the array is to put [1] in the first subsequence and [2, 3] in the second subsequence. The differences are |1-2| = 1 and |1-3| = 2; the maximum absolute difference is 2. Your Task: You do not need to read input or print anything. Implement the function maxSumOfDifferences() which takes arr as input parameter and returns the maximum sum of absolute differences. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 2 <= n <= 1000 1 <= arr[i] <= 10^4","solution":"def maxSumOfDifferences(arr): Returns the maximum sum of absolute differences between two non-overlapping subsequences of the array. arr.sort() n = len(arr) max_sum = 0 for i in range(1, n): left = arr[:i] right = arr[i:] current_sum = 0 for a, b in zip(left, right): current_sum += abs(a - b) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given two strings s₁ and s₂ of length n and m respectively, both consisting of lowercase Latin letters. Calculate the minimal possible number of operations required to transform s₁ into s₂, where the allowed operations are: 1. Deleting one character from the string. 2. Inserting one character to any position in the string. 3. Replacing one character with another. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 2000) — the lengths of strings s₁ and s₂. The second line contains the string s₁. The third line contains the string s₂. Output: Print a single integer — the minimal number of operations needed to transform s₁ into s₂. Example Input: 4 3 abcd acd Output: 1 Explanation: Replace \'b\' with \'c\' in \\"abcd\\" to get \\"acd\\".","solution":"def min_operations_to_transform(s1, s2): n, m = len(s1), len(s2) # Creating a dp array dp = [[0] * (m + 1) for _ in range(n + 1)] # Initializing dp array for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j # If first string is empty, insert all characters from second string elif j == 0: dp[i][j] = i # If second string is empty, remove all characters from first string elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[n][m]"},{"question":"Given an n x n matrix, traverse and print the matrix elements in a spiral order starting from the top-left corner. Traversing in spiral order means moving right across the top row, then moving down the last column, moving left across the bottom row, and finally moving up the first column, repeating the process for the remaining sub-matrix. Input: - The first line of input contains an integer n, the size of the matrix. - The following n lines contain n space-separated integers each, representing the matrix elements. Output: - Print the matrix elements in a single line in spiral order. Constraints: 1 ≤ n ≤ 100 -1000 ≤ matrix[i][j] ≤ 1000 SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 1 2 3 6 9 8 7 4 5","solution":"def spiral_order(matrix): Given an n x n matrix, returns the matrix elements in spiral order. def spiral_coords(r1, c1, r2, c2): for c in range(c1, c2 + 1): yield r1, c for r in range(r1 + 1, r2 + 1): yield r, c2 if r1 < r2 and c1 < c2: for c in range(c2 - 1, c1 - 1, -1): yield r2, c for r in range(r2 - 1, r1, -1): yield r, c1 if not matrix: return [] result = [] r1, r2 = 0, len(matrix) - 1 c1, c2 = 0, len(matrix[0]) - 1 while r1 <= r2 and c1 <= c2: for r, c in spiral_coords(r1, c1, r2, c2): result.append(matrix[r][c]) r1 += 1 r2 -= 1 c1 += 1 c2 -= 1 return result def matrix_from_input_string(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) matrix = [] for line in lines[1:]: matrix.append(list(map(int, line.split()))) return matrix"},{"question":"Aliens have invaded Earth and have begun to mess with our libraries! They have reverse-engineered a book into a sequence of pages and applied a strange sorting method to the pages. You are given a list of `n` pages indexed from 1 to `n`. Each page has an index number `i` (1 ≤ i ≤ n) and a unique integer `di` representing the difficulty of the content on that page. The aliens have sorted the pages based on their difficulty levels in non-decreasing order. However, they have mistakenly swapped some of the pages, and the original indices i are jumbled. Your task is to reorganize the sorted sequence of page difficulties to its original form based on the given indices of the pages. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) — the number of pages in the book. The second line contains `n` integers `d1, d2, ..., dn` (0 ≤ di ≤ 109), representing the difficulties of the pages in non-decreasing order. The third line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ n), representing the original indices of the pages. Output The output should consist of `n` integers, where the i-th integer represents the difficulty of the page that was originally at position `i`. Example Input 5 10 20 30 40 50 5 3 1 4 2 Output 30 50 20 40 10","solution":"def reorganize_book_pages(n, difficulties, original_indices): Reorganizes the sorted sequence of page difficulties to their original order based on given indices. :param n: Integer, the number of pages in the book. :param difficulties: List of integers, representing the difficulties of the pages in non-decreasing order. :param original_indices: List of integers, representing the original indices of the pages. :return: List of integers, where the i-th integer represents the difficulty of the page that was originally at position i. result = [0] * n for i in range(n): original_index = original_indices[i] - 1 result[original_index] = difficulties[i] return result # Example usage # n = 5 # difficulties = [10, 20, 30, 40, 50] # original_indices = [5, 3, 1, 4, 2] # print(reorganize_book_pages(n, difficulties, original_indices)) # Output: [30, 50, 20, 40, 10]"},{"question":"In a unique city named \\"Wizland\\", there are N magical houses lined up in a straight row, each with its own resident wizard. The magical houses are numbered from 1 to N from left to right. Due to a recent magical catastrophe, each wizard lost their spells, but they can re-learn the spells from a certain number of spellbooks hidden in specific houses. A wizard in the i-th house can only retrieve a spellbook from any of the houses between (i - K) to (i + K), inclusive. This means the i-th house\'s range of accessible houses is limited to those within K distance units from it. If the range goes beyond the boundaries of the row, the wizard can only retrieve spellbooks within the valid range of the house indexes. Each house can contain only one spellbook, and multiple spellbooks can’t be retrieved from the same house. Your task is to find the maximum number of spellbooks that the wizards can collectively retrieve. ------ Input Format ------ - The first line contains two integers N and K — the number of houses and the range of each wizard\'s accessibility. - The second line contains N integers, where the i-th integer is 1 if a spellbook is present in the i-th house and 0 otherwise. ------ Output Format ------ Print a single integer — the maximum number of spellbooks the wizards can collectively retrieve. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N The number of houses containing spellbooks will not exceed N. ------ Sample Input 1 ------ 10 1 1 0 0 1 0 0 0 1 0 0 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ In this case, wizards in house 1, house 4, and house 8 can collect one spellbook each. Wizards in house 2, 3, and 5 to 10 cannot retrieve any additional spellbooks as the reachable houses in their defined range either don’t have spellbooks or have already been retrieved by other wizards. ------ Sample Input 2 ------ 5 2 1 0 1 0 1 ------ Sample Output 2 ------ 3 ------ Explanation 2 ------ Wizards in house 1, house 3, and house 5 can collect one spellbook each. Wizards in house 2 and house 4 do not need to collect an additional spellbook as others in the accessible range (house 1, 3, and 5) have collected them. Thus, the maximum number of spellbooks retrieved is 3.","solution":"def max_spellbooks_retrieved(N, K, houses): Given the number of houses, range of accessibility, and the list of houses containing spellbooks, returns the maximum number of spellbooks that the wizards can collectively retrieve. books_collected = 0 taken = [False] * N # To mark whether a spellbook from this house is taken # Loop through each house to check if they can retrieve a spellbook for i in range(N): if houses[i] == 1: # If the current house has a spellbook left = max(0, i - K) right = min(N - 1, i + K) for j in range(left, right + 1): if not taken[j]: books_collected += 1 taken[j] = True break return books_collected"},{"question":"Given an MxN grid filled with non-negative numbers, find a path from the top-left corner to the bottom-right corner which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Example 1: Input: grid = [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1→3→1→1→1 minimizes the sum. Example 2: Input: grid = [ [1,2,3], [4,5,6] ] Output: 12 Explanation: Because the path 1→2→3→6 minimizes the sum. Note: - The dimensions of the grid are m and n where 1 ≤ m, n ≤ 200. - The sum of the elements along the path will not exceed 1000.","solution":"def minPathSum(grid): Given a grid, find the path from the top-left to bottom-right corner which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. m = len(grid) n = len(grid[0]) # We use dynamic programming to solve this problem. dp = [[0]*n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Populate the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Given `n` bulbs in a row, all are initially off. A switch can be used to toggle every k-th bulb (on to off, off to on). Write a function to determine the final state of all bulbs after toggling every k-th bulb for each `k` from 1 to `n`. For example, when k = 1, all bulbs are toggled. When k = 2, every second bulb is toggled. Repeat this until k = n. Constraints * 1 leq n leq 10^4 Input Input is given from Standard Input in the following format: n Output Output final state of bulbs in a single line where `1` represents the bulb is on and `0` represents the bulb is off. Examples Input 3 Output 1 0 0 Input 10 Output 1 0 0 1 0 0 0 0 1 0","solution":"def final_bulb_states(n): Determines the final state of `n` bulbs after toggling every k-th bulb for each `k` from 1 to `n`. bulbs = [0] * n # all bulbs are initially off for k in range(1, n + 1): for i in range(k - 1, n, k): bulbs[i] = 1 - bulbs[i] # toggle the bulb return bulbs def format_bulbs_output(bulbs): return \' \'.join(str(bulb) for bulb in bulbs)"},{"question":"A city is represented as an MxN grid of buildings and empty lots. You are given a grid where \'B\' denotes a building and \'.\' denotes an empty lot. The city wants to build a new park in one of the empty lots, such that the park is as far away as possible from any building. The distance between two points in the grid is defined as the Manhattan distance: if one point is at (x1, y1) and another point is at (x2, y2), then the distance between them is |x1 - x2| + |y1 - y2|. Your task is to find out the maximum distance from any empty lot to the nearest building and output that distance. If there are no empty lots, output -1. -----Input----- The first line contains two integers M and N (1 leq M, N leq 1000) denoting the dimensions of the grid. Each of the following M lines contains N characters, each being either \'B\' or \'.\'. -----Output----- Output a single integer, the maximum distance from any empty lot to the nearest building. If there are no empty lots, output -1. -----Examples----- Sample Input 1: 3 3 B.B ... B.B Sample Output 1: 2 Sample Input 2: 2 2 BB BB Sample Output 2: -1","solution":"from collections import deque def max_distance_to_building(grid): Given an MxN grid representing buildings and empty lots, this function returns the maximum distance from any empty lot to the nearest building. If there are no empty lots, it returns -1. M = len(grid) N = len(grid[0]) queue = deque() dist = [[float(\'inf\')] * N for _ in range(M)] # Initialize the queue and distances for building locations for i in range(M): for j in range(N): if grid[i][j] == \'B\': queue.append((i, j)) dist[i][j] = 0 # Directions for the 4 neighbors (up, down, left, right) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Perform BFS from each building while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and dist[nx][ny] == float(\'inf\'): dist[nx][ny] = dist[x][y] + 1 queue.append((nx, ny)) # Calculate the maximum distance from any empty lot to the nearest building max_dist = -1 for i in range(M): for j in range(N): if grid[i][j] == \'.\': max_dist = max(max_dist, dist[i][j]) # If max_dist remains -1, there were no empty lots return max_dist if max_dist != float(\'inf\') else -1"},{"question":"You are given N rectangles with their height and width. Your task is to find the perimeter of the rectangle with the largest perimeter among the given rectangles. If there are multiple rectangles with the same perimeter, print the perimeter of any one of them. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 1000 - 1 ≤ height, width ≤ 10^4 -----Input----- The input is given from Standard Input in the following format: N height_1 width_1 height_2 width_2 ... height_N width_N -----Output----- Print the perimeter of the rectangle with the largest perimeter. -----Sample Input----- 3 2 3 5 6 4 4 -----Sample Output----- 22 The first rectangle has a perimeter of 2*2 + 2*3 = 10, the second rectangle has a perimeter of 2*5 + 2*6 = 22, and the third rectangle has a perimeter of 2*4 + 2*4 = 16. Thus, the output should be 22, the largest perimeter.","solution":"def largest_perimeter_rectangle(n, rectangles): Returns the perimeter of the rectangle with the largest perimeter. :param int n: Number of rectangles :param list rectangles: List of tuples, where each tuple contains (height, width) of a rectangle :return: The largest perimeter among the given rectangles :rtype: int max_perimeter = 0 for height, width in rectangles: perimeter = 2 * (height + width) if perimeter > max_perimeter: max_perimeter = perimeter return max_perimeter def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) rectangles = [(int(data[i]), int(data[i+1])) for i in range(1, 2 * n, 2)] print(largest_perimeter_rectangle(n, rectangles)) if __name__ == \\"__main__\\": main()"},{"question":"Mark has landed on a deserted island and has discovered something unusual. There are tall trees bearing coconuts all over the island, but there are some peculiar rules governing the coconuts\' arrangement on these trees. Specifically, the coconuts on each tree follow a zigzag pattern. Mark decides to note down the exact number of coconuts in a zigzag manner and realizes that if he can decode the pattern, he can determine the best trees to gather coconuts from efficiently. He observes that the zigzag pattern involves arranging the coconuts in a series where: - The first coconuts go on row 1, - The second set go on row 2, - And so on until reaching the specified number of rows, - After that, the pattern reverses direction. Given the sequence 0-indexed from top to bottom, Mark wants to find the positions of the coconuts in their zigzag manner on any given tree to formulate his strategy. Write a function that will take three integers: `numCoconuts` (total number of coconuts), `numRows` (number of rows for the zigzag), and `position` (the position we want to determine which row the coconut resides in). Input: The first line of input contains an integer t, the number of test cases. Each of the next t lines contains three integers: `numCoconuts`, `numRows`, and `position`. Output: For each test case, output a single integer representing the row (0-indexed) where the coconut at given `position` resides in its zigzag pattern. Constraints: 1 ≤ t ≤ 10^4 1 ≤ numCoconuts ≤ 10^6 1 ≤ numRows ≤ 10^3 0 ≤ position < numCoconuts SAMPLE INPUT: 2 10 3 2 15 4 7 SAMPLE OUTPUT: 2 1 Explanation: Case 1: With 10 coconuts and 3 rows, the arrangement would be: Row 0: 0, 4, 8 Row 1: 1, 3, 5, 7, 9 Row 2: 2, 6 Thus, coconut at position 2 is in row 2. Case 2: With 15 coconuts and 4 rows, the arrangement would be: Row 0: 0, 6, 12 Row 1: 1, 5, 7, 11, 13 Row 2: 2, 4, 8, 10, 14 Row 3: 3, 9 Thus, coconut at position 7 is in row 1.","solution":"def find_coconut_row(numCoconuts, numRows, position): cycle_len = 2 * numRows - 2 if numRows > 1 else 1 pos_in_cycle = position % cycle_len if pos_in_cycle < numRows: return pos_in_cycle else: return cycle_len - pos_in_cycle def process_test_cases(t, test_cases): results = [] for i in range(t): numCoconuts, numRows, position = test_cases[i] results.append(find_coconut_row(numCoconuts, numRows, position)) return results"},{"question":"You are a treasure hunter in the mystic land of Lavarnia. You have found a map that leads to an ancient treasure guarded by mystical beasts. To get to the treasure, you need to pass through several checkpoints. At each checkpoint, you are required to solve a puzzle to be allowed to proceed. Each checkpoint puzzle involves deciphering a sequence of numbers in a specific order determined by an algorithm that alternates between selecting the smallest and largest remaining numbers in the sequence until all numbers are selected. The pseudocode for the algorithm is as follows: ``` func reorder_sequence(sequence): new_sequence = [] left_pointer = 0 right_pointer = length(sequence) - 1 flip = true # Indicates whether to pick from the smallest or largest side while left_pointer <= right_pointer: if flip: new_sequence.append(sequence[left_pointer]) left_pointer += 1 else: new_sequence.append(sequence[right_pointer]) right_pointer -= 1 flip = not flip return new_sequence ``` Given a query consisting of the sequence, you need to output the newly ordered sequence in accordance with the algorithm described above. **Input Format:** - The first line contains an integer `Q`, the number of queries. - For each query: - The first line contains an integer `N`, the length of the sequence. - The second line contains `N` integers, representing the sequence of numbers. **Output Format:** - For each query, output a single line containing the reordered sequence. **Constraints:** - 1 ≤ Q ≤ 10^5 - 1 ≤ N ≤ 10^5 - 1 ≤ sequence[i] ≤ 10^9 - Sum of N over all queries will not exceed 10^6. **Sample Input:** ``` 2 5 1 3 5 7 9 4 2 4 6 8 ``` **Sample Output:** ``` 1 9 3 7 5 2 8 4 6 ``` **Explanation:** For the first query, the sequence starts with the smallest number `1`, then picks the largest number `9`, then the next smallest `3`, next largest `7`, and finally the middle number `5`. For the second query, the sequence starts with the smallest number `2`, then picks the largest number `8`, next smallest `4`, and finally the remaining largest number `6`.","solution":"def reorder_sequence(Q, queries): results = [] for query in queries: N, sequence = query reordered_sequence = [] left_pointer, right_pointer = 0, N - 1 flip = True # Start with picking the smallest element while left_pointer <= right_pointer: if flip: reordered_sequence.append(sequence[left_pointer]) left_pointer += 1 else: reordered_sequence.append(sequence[right_pointer]) right_pointer -= 1 flip = not flip results.append(reordered_sequence) return results"},{"question":"Write a function `is_palindromic_number` which checks if an integer number is a palindromic number. A palindromic number reads the same backward as forward. For example: - `is_palindromic_number(121)` should return `True` because 121 reads the same backward. - `is_palindromic_number(123)` should return `False` because 123 does not read the same backward.","solution":"def is_palindromic_number(n): Returns True if n is a palindromic number, False otherwise. A palindromic number reads the same backward as forward. # Convert the number to a string str_n = str(n) # Compare the string with its reverse return str_n == str_n[::-1]"},{"question":"# The Balancing Order Imagine you own a small store that sells toys. Each toy has a certain weight. To make the delivery process easier, you always want to balance the weight of toys into two bundles that are as equal in weight as possible. # These Toys You receive a list of toy weights. The toys can have various weights and you\'re allowed to split the toys into two bundles in any possible way to achieve the goal. # The Challenge You need to determine if it’s possible to split the weights into two bundles such that the weight difference between the two bundles is minimal. # Some Examples Given the list `[2, 3, 5, 1]`, we can split it into `[2, 3, 1]` and `[5]`. The weights of these bundles are 6 and 5 respectively, resulting in a difference of 1, which is the smallest possible difference for this set of weights. > Can split: True, Weight difference: 1 Given the list `[1, 2, 3, 9]`, we can split it into `[1, 2, 3]` and `[9]`. The weights of these bundles are 6 and 9 respectively, resulting in a difference of 3. > Can split: True, Weight difference: 3 Given the list `[1, 1, 1, 1, 1, 6]`, we can split it into `[1, 1, 1, 1, 1]` and `[6]`. The weights of these bundles are 5 and 6 respectively, resulting in a difference of 1. > Can split: True, Weight difference: 1 Given the list `[1, 1, 1, 1, 10]`, we can split it into `[1, 1, 1, 1]` and `[10]`. The weights of these bundles are 4 and 10 respectively, resulting in a difference of 6. > Can split: True, Weight difference: 6 # Input ```python weights ~ a random list of integers (1 <= x <= 100) ``` # Output ```python True or False, Integer ~ whether you can split the weights into two bundles and the minimal weight difference ``` # Happy splitting! # Examples ```python >>> can_split([2, 3, 5, 1]) (True, 1) >>> can_split([1, 2, 3, 9]) (True, 3) >>> can_split([1, 1, 1, 1, 1, 6]) (True, 1) >>> can_split([1, 1, 1, 1, 10]) (True, 6) ```","solution":"def can_split(weights): # Calculate total weight total_weight = sum(weights) n = len(weights) # Initialize a 2D DP array dp = [[False] * (total_weight // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_weight // 2 + 1): if j >= weights[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - weights[i - 1]] else: dp[i][j] = dp[i - 1][j] max_weight_in_first_bundle = 0 for j in range(total_weight // 2, -1, -1): if dp[n][j]: max_weight_in_first_bundle = j break weight_diff = total_weight - 2 * max_weight_in_first_bundle return True, weight_diff"},{"question":"A palindrome is a string that reads the same forwards and backwards. Given a string, find if it is possible to rearrange the characters of the string to form a palindrome. To solve this problem, implement the function `canFormPalindrome(s)` that takes a single string `s` as input and returns `True` if it is possible to rearrange the characters of `s` to form a palindrome, and `False` otherwise. # Input - A single string `s` containing only lowercase English letters with length between `1` and `1000`. # Output - Return `True` if it is possible to rearrange the characters of `s` to form a palindrome, otherwise return `False`. # Examples Example 1 Input: ``` aabb ``` Output: ``` True ``` Explanation: - One possible arrangement of the characters is \\"abba\\", which is a palindrome. Example 2 Input: ``` abc ``` Output: ``` False ``` Explanation: - There is no way to rearrange the characters to form a palindrome. # Constraints - The string `s` contains only lowercase English letters. - The length of the string `s` is between 1 and 1000. # Hint - A string can be rearranged to form a palindrome if at most one of its characters has an odd count. Write the function `canFormPalindrome(s)` to complete the task.","solution":"from collections import Counter def canFormPalindrome(s): Returns True if the characters of the string `s` can be rearranged to form a palindrome. # Count the occurrences of each character count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for char_count in count.values() if char_count % 2 != 0) # A string can form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Given a string s representing a sentence, you need to return the length of the shortest word within the sentence. A word is defined as a contiguous sequence of non-space characters. Example 1: Input: s = \\"I love programming\\" Output: 1 Explanation: The words in the sentence are \\"I\\", \\"love\\", and \\"programming\\". The shortest word is \\"I\\" with length 1. Example 2: Input: s = \\"Finding the smallest word in this sentence\\" Output: 2 Explanation: The words in the sentence are \\"Finding\\", \\"the\\", \\"smallest\\", \\"word\\", \\"in\\", \\"this\\", and \\"sentence\\". The shortest word is \\"in\\" with length 2. Your Task: This is a function problem. You only need to complete the function shortestWordLength() that takes a string (sentence) as a parameter and returns an integer (length of the shortest word). The printing is done automatically by the driver code. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(s) ≤ 10^5 The string consists of printable ASCII characters and spaces. There will be at least one word in the string.","solution":"def shortestWordLength(s): Returns the length of the shortest word in the sentence s. Parameters: s (str): The input sentence containing words separated by spaces. Returns: int: The length of the shortest word in the sentence. words = s.split() return min(len(word) for word in words)"},{"question":"Given an undirected connected graph, your task is to find the number of nodes present in the largest connected component of the graph. The graph is represented using an adjacency matrix, where `1` indicates an edge between two nodes and `0` indicates no edge. **Input:** - The first line contains an integer `n` (2 ≤ n ≤ 100), representing the number of nodes in the graph. - The next `n` lines each contain `n` integers (either `0` or `1`), representing the adjacency matrix of the graph. **Output:** - Output a single integer representing the number of nodes in the largest connected component. **Example:** Input: ``` 5 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 ``` Output: ``` 3 ``` Explanation: - The graph has 5 nodes. - The adjacency matrix denotes that nodes 0, 1, and 2 are connected, forming one connected component with 3 nodes. - There is another connected component consisting of nodes 3 and 4, counting 2 nodes. - The largest connected component contains 3 nodes. **Notes:** - Ensure to use graph traversal techniques like Depth-First Search (DFS) or Breadth-First Search (BFS) to find the connected components in the graph.","solution":"def largest_connected_component(n, adj_matrix): Returns the number of nodes in the largest connected component of the graph. def dfs(node, visited): stack = [node] count = 0 while stack: curr = stack.pop() if not visited[curr]: visited[curr] = True count += 1 for neighbor, connected in enumerate(adj_matrix[curr]): if connected and not visited[neighbor]: stack.append(neighbor) return count visited = [False] * n max_component_size = 0 for node in range(n): if not visited[node]: component_size = dfs(node, visited) max_component_size = max(max_component_size, component_size) return max_component_size"},{"question":"You have been tasked with designing a file management utility for a simplified operating system. The utility needs to handle operations on a directory structure. The directory structure can contain both files and subdirectories. The following operations need to be supported: 1. `CREATE_DIR path` - Creates a directory at the specified path. 2. `CREATE_FILE path` - Creates a file at the specified path, where the path includes the filename. 3. `LIST path` - Lists all the files and directories at the specified path in lexicographical order. 4. `DELETE path` - Deletes the file or directory at the specified path. If a directory is specified, all its contents should be deleted recursively. The paths are in UNIX-style format and do not include spaces. Each path is guaranteed to start from the root directory, represented as `/`, and the directory/file names are guaranteed to be unique in their respective directories. Input Format The first line contains an integer `n`, the number of operations. The next `n` lines contain one of the four operations described above. Constraints 1 leq n leq 1000 Output Format For each `LIST path` operation, output the contents of the specified path in lexicographical order, one per line. If the directory is empty or does not exist, output nothing. Example Input 8 CREATE_DIR /home CREATE_DIR /home/user CREATE_FILE /home/user/file.txt LIST /home DELETE /home/user/file.txt LIST /home/user CREATE_FILE /home/user/file2.txt LIST /home/user Example Output user file2.txt","solution":"class FileManagementSystem: def __init__(self): self.file_system = {\'/\': {}} def create_dir(self, path): directories = path.split(\'/\')[1:] current = self.file_system[\'/\'] for directory in directories: if directory not in current: current[directory] = {} current = current[directory] def create_file(self, path): directories = path.split(\'/\')[1:] file_name = directories.pop() current = self.file_system[\'/\'] for directory in directories: if directory not in current: current[directory] = {} current = current[directory] current[file_name] = None def list_dir(self, path): directories = path.split(\'/\')[1:] current = self.file_system[\'/\'] for directory in directories: if directory in current: current = current[directory] else: return [] return sorted(current.keys()) def delete_path(self, path): directories = path.split(\'/\')[1:] file_name = directories.pop() current = self.file_system[\'/\'] for directory in directories: if directory in current: current = current[directory] else: return if file_name in current: del current[file_name] def process_operations(n, operations): fms = FileManagementSystem() results = [] for operation in operations: parts = operation.split() cmd = parts[0] path = parts[1] if cmd == \\"CREATE_DIR\\": fms.create_dir(path) elif cmd == \\"CREATE_FILE\\": fms.create_file(path) elif cmd == \\"LIST\\": result = fms.list_dir(path) results.append(result) elif cmd == \\"DELETE\\": fms.delete_path(path) return results"},{"question":"Joey is the proud owner of a magical garden, where there are special plants that release a unique type of pixelated pollen. Each plant releases a specific color of pollen, and Joey wants to collect as many and diverse colors of pollen as possible. However, he faces a challenge - each plant can only release pollen once every day, and once it releases, it will release the same color pollen for that entire day. Joey has a collection of plants in his garden, where each day, he can choose any \\"contiguous\\" set of plants to watch in order to collect the pollen released. The problem is to determine the maximum number of unique pollen colors Joey can collect in any given day by selecting any contiguous subsegment of the garden. Each plant in the garden is represented by its pollen color, identified by an integer value. -----Input----- Each input will consist of a single test case. It begins with a line with a single integer n (1 le n le 100000), which is the number of plants in Joey\'s garden. The next line contains n space-separated integers indicating the pollen colors released by each plant, where the i-th integer (1 le color le 1000000) represents the color of the pollen from the i-th plant. -----Output----- Output a single line with a single integer, indicating the maximum number of unique pollen colors that Joey can collect by selecting any contiguous subsegment of the garden. -----Examples----- Sample Input 1: 7 1 2 1 3 4 2 1 Sample Output 1: 4 Sample Input 2: 5 1 1 1 1 1 Sample Output 2: 1","solution":"def max_unique_pollen_colors(n, pollen_colors): Determines the maximum number of unique pollen colors that can be collected by selecting any contiguous subsegment of the garden. :param n: The number of plants in the garden. :param pollen_colors: A list of integers indicating the pollen colors released by each plant. :return: The maximum number of unique pollen colors in any contiguous subsegment. color_count = {} left = 0 max_unique = 0 for right in range(n): color = pollen_colors[right] color_count[color] = color_count.get(color, 0) + 1 while color_count[color] > 1: left_color = pollen_colors[left] color_count[left_color] -= 1 if color_count[left_color] == 0: del color_count[left_color] left += 1 max_unique = max(max_unique, len(color_count)) return max_unique"},{"question":"You are given an array of positive integers where each integer represents the height of a bar in a histogram. Each bar has a width of 1, and the histogram is aligned such that adjacent bars are next to each other with no gaps. Find the maximum rectangle area in the histogram that can be formed by any combination of consecutive bars. For example, given the histogram [2, 1, 5, 6, 2, 3], the largest rectangle has an area of 10 (formed by the bars with heights [5, 6]). Write a function `max_histogram_area` that takes the list of bar heights as an input and returns the maximum rectangle area that can be formed in the histogram. Function Signature: ```python def max_histogram_area(heights: [int]) -> int: pass ``` **Example:** ```python assert max_histogram_area([2, 1, 5, 6, 2, 3]) == 10 assert max_histogram_area([2, 4]) == 4 ```","solution":"def max_histogram_area(heights): Given a list of heights of histogram bars, returns the area of the largest rectangle that can be formed by any combination of consecutive bars. stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A company has a server which maintains a log of user activities. Each activity log is represented as a string in the format \\"user_id action timestamp\\". The log contains multiple entries for various users and actions. Your task is to write a function that processes the log and returns the total number of unique actions performed by a specific user. Example: Input: log = [\\"123 login 1627895592\\", \\"124 logout 1627895600\\", \\"123 checkout 1627895620\\", \\"123 login 1627895700\\", \\"125 login 1627895800\\", \\"123 add_to_cart 1627895900\\"] user_id = \\"123\\" Output: 3 Explanation: The user with ID \\"123\\" performed three unique actions: \\"login\\", \\"checkout\\", and \\"add_to_cart\\". Your Task: Complete the function uniqueActions(log, user_id), which takes a list of log entries and a user ID as input and returns the number of unique actions performed by the specified user. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= len(log) <= 1000 1 <= len(log[i]) <= 50 1 <= len(user_id) <= 10","solution":"def uniqueActions(log, user_id): Returns the number of unique actions performed by a specific user in the log. Parameters: log (list of str): The log entries. user_id (str): The user ID to check. Returns: int: The number of unique actions. actions = set() for entry in log: parts = entry.split() if parts[0] == user_id: actions.add(parts[1]) return len(actions)"},{"question":"You are given an array of n integers where n ge 1. Your task is to determine whether the array can be transformed into an array of all zeros by repeatedly performing the following operation any number of times: - Choose an index i (1 le i le n-1) and set a[i+1] = a[i+1] - a[i]; simultaneously, set a[i] = 0. You have to answer q independent test cases. -----Input----- The first line of input contains an integer q (1 le q le 10^4) — the number of test cases. Then q test cases follow. The first line of each test case contains one integer n (1 le n le 3 cdot 10^4) — the length of the array a. The second line of each test case contains n integers — the elements of the array a. It is guaranteed that the sum of n over all test cases does not exceed 3 cdot 10^4 (sum n le 3 cdot 10^4). -----Output----- For each test case, print \\"YES\\" (without quotes) if the array can be transformed into an array of all zeros, and \\"NO\\" otherwise. -----Example----- Input 3 5 3 1 2 4 3 3 5 5 5 4 1 1 1 1 Output NO YES YES","solution":"def can_be_transformed_to_zeros(n, a): Function to determine whether the array can be transformed into an array of all zeros by repeatedly performing the given operation. Parameters: n (int): Length of the array. a (list of int): The array of integers. Returns: str: \\"YES\\" if the array can be transformed into zeros, otherwise \\"NO\\". # We iterate through the array to ensure non-decreasing property for i in range(1, n): if a[i] < a[i - 1]: return \\"NO\\" return \\"YES\\" def process_test_cases(q, test_cases): Function to process multiple test cases. Parameters: q (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer n and a list a of length n. Returns: list of str: List containing the result for each test case. results = [] for n, a in test_cases: results.append(can_be_transformed_to_zeros(n, a)) return results"},{"question":"You are given a list of integers. Your task is to find the length of the longest contiguous sublist where the absolute difference between any two elements in the sublist is less than or equal to a given integer k. -----Input----- The first line contains an integer k (1 ≤ k ≤ 10^5). The second line contains an integer n (1 ≤ n ≤ 10^5) followed by a list of n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). -----Output----- Print a single integer: the length of the longest contiguous sublist where the absolute difference between any two elements is less than or equal to k. -----Examples----- Input 3 6 1 3 7 11 12 15 Output 2 Input 4 5 8 5 3 7 10 Output 3","solution":"def longest_sublist_within_difference(arr, k): Returns the length of the longest contiguous sublist where the absolute difference between any two elements in the sublist is less than or equal to k. n = len(arr) if n == 0: return 0 max_len = 0 start = 0 for end in range(n): for j in range(start, end + 1): if abs(arr[end] - arr[j]) > k: start = j + 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"In a hypothetical land called CodeLand, people love playing with binary strings. A binary string is a sequence that contains only \'0\'s and \'1\'s. The residents of CodeLand have invented a game where players need to determine the maximum number of consecutive \'1\'s in a given binary string. Your task is to write a program that will help the residents of CodeLand by finding the maximum length of a contiguous sequence of \'1\'s in a binary string. -----Input----- The input consists of a single line containing a binary string s (1 ≤ |s| ≤ 100), where |s| is the length of the string. The string only contains the characters \'0\' and \'1\'. -----Output----- Print a single integer — the maximum number of consecutive \'1\'s in the given binary string. -----Examples----- Input 11011101111 Output 4 Input 1000000 Output 1","solution":"def max_consecutive_ones(s): Returns the maximum number of consecutive \'1\'s in a binary string s. max_count = 0 current_count = 0 for char in s: if char == \'1\': current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"You are given a string s consisting of lowercase Latin letters and an integer k. You can change at most k characters in the string to any other lowercase Latin letters of your choice. Your goal is to make the string a palindrome with the minimal number of such changes. A palindrome is a string that reads the same backward as forward. Write a program to determine the minimum number of changes required to make the string s a palindrome. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Description of the test cases follows. The first line of each test case contains the string s (length of s is between 1 and 10^5) and the integer k (0 le k le 10^5). The total length of all strings given in the input does not exceed 10^6. -----Output----- For each test case, output a single integer — the minimal number of changes required to make the string s a palindrome with at most k changes. -----Examples----- Input 4 abcca 1 abc 2 ab 1 a 0 Output 1 1 1 0 -----Note----- In the first test case, the string can be changed to \\"ababa\\" or \\"aacca\\" with just 1 change, which makes it a palindrome. In the second test case, changing \'a\' to \'c\' and \'c\' to \'a\' makes the string \\"baab\\" with 2 changes. In the third test case, changing \'a\' to \'b\' or \'b\' to \'a\' is required to make it a palindrome, resulting in 1 change. In the fourth test case, the string is already a palindrome, so no changes are needed.","solution":"def min_changes_to_palindrome(s, k): n = len(s) changes_needed = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes_needed += 1 return min(changes_needed, k) def solve(test_cases): results = [] for s, k in test_cases: results.append(min_changes_to_palindrome(s, k)) return results"},{"question":"In the bustling city of Algoland, there is a unique festival where citizens enjoy playing with lights at night. The city\'s streets form a perfect grid of N by N intersections, and every intersection is connected to its adjacent intersections by bidirectional roads. The intersections can be represented as a matrix where the intersection at row i and column j is denoted as (i, j). During the festival, the citizens want to turn on special lights at certain intersections. The unique property of these special lights is that they form a diagonal line from the top-left corner (1, 1) to the bottom-right corner (N, N). Furthermore, from any intersection (i, j), a light can be either turned on directly or it can relay the light to one of its diagonal neighbors - either (i+1, j+1) if within bounds. The citizens want to know the minimal energy required to ensure that all intersections along the diagonal from (1, 1) to (N, N) are lit. They have a grid where each cell (i, j) indicates the energy cost of turning on the light at intersection (i, j). Write a program to determine the minimal total energy required to accomplish this. # Input: - The first line contains an integer N (1 ≤ N ≤ 1000), representing the size of the grid. - The next N lines each contain N integers. The integer at the j-th position in the i-th line represents the energy cost C[i][j] (1 ≤ C[i][j] ≤ 1000) of turning on the light at the intersection (i, j). # Output: - Output a single integer, the minimal total energy required to light up all intersections along the diagonal from (1, 1) to (N, N). # Example: Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 15 ``` Explanation: In this example, the cheapest way to light up the diagonal (1,1) -> (2,2) -> (3,3) is to pay the energy costs 1 + 5 + 9 = 15.","solution":"def minimal_energy(N, grid): Returns the minimal total energy required to light up all intersections along the diagonal from (1, 1) to (N, N) in the grid. Parameters: - N (int): Size of the grid (N x N) - grid (list of list of int): The grid where grid[i][j] is the energy cost at intersection (i, j) Returns: - int: The minimal total energy cost minimal_energy_cost = 0 for i in range(N): minimal_energy_cost += grid[i][i] return minimal_energy_cost"},{"question":"You are asked to develop a program that tracks and manages a dynamic collection of software bugs reported in a company\'s database. The program must handle two types of operations: - Add(k, d): Adds a bug with ID k and description d to the database. - Close(k): Closes the bug with ID k. The objective is to implement a system that allows for the reporting of bugs, closing them, and querying for the current state of the system. For example: - Add(123, \\"Memory leak\\") Add(124, \\"Crash on startup\\") and Close(123) would leave bug 124 still open. - Add(123, \\"Memory leak\\") Add(123, \\"UI glitch\\") would mean the description of bug 123 gets updated. - Add(123, \\"Memory leak\\") Close(123) Add(123, \\"Crash on shutdown\\") would result in bug 123 being reopened with a new description. -----Input----- The input will consist of multiple operations, formatted as specified below. Each operation will be given on its own line. The first character of the line will be A for an Add operation, C for a Close operation, or Q for a query. An Add operation will have the A character, followed by a space, an integer bug ID between 1 and 10^9, another space, and a string describing the bug. The description will be a contiguous string without spaces. A Close operation will have the C character, followed by a space and an integer bug ID between 1 and 10^9 that denotes the bug to be closed. A Query (Q) operation will query the current state of the system. The input will be terminated by an operation marked by end of the file. -----Output----- The output for each query operation should print the bug IDs and their descriptions in the order they were reported, ignoring closed bugs. Each bug ID and its description should be printed on a new line. If there are no open bugs, print \\"No open bugs\\". -----Examples----- Sample Input 1: A 123 MemoryLeak A 124 CrashOnStartup C 123 Q Sample Output 1: 124 CrashOnStartup Sample Input 2: A 123 MemoryLeak A 123 UIMalfunction Q C 123 Q Sample Output 2: 123 UIMalfunction No open bugs Sample Input 3: A 101 NullPointerException C 101 A 102 SegmentationFault A 103 BufferOverflow C 102 Q Sample Output 3: 103 BufferOverflow","solution":"class BugTracker: def __init__(self): self.bugs = {} self.closed_bugs = set() def add(self, k, d): self.bugs[k] = d self.closed_bugs.discard(k) def close(self, k): if k in self.bugs: self.closed_bugs.add(k) def query(self): open_bugs = [(k, v) for k, v in self.bugs.items() if k not in self.closed_bugs] if not open_bugs: return \\"No open bugs\\" return \\"n\\".join([f\\"{k} {desc}\\" for k, desc in open_bugs]) # Example usage: bt = BugTracker() bt.add(123, \\"MemoryLeak\\") bt.add(124, \\"CrashOnStartup\\") bt.close(123) print(bt.query()) # Output: 124 CrashOnStartup"},{"question":"Varun loves working with strings, especially ones that contain characters from the English alphabet. He has a string `S` and Q queries of the form [L, R], where L and R are the starting and ending indices. For each query, Varun wants to know the length of the longest substring that contains exactly one distinct character. Help Varun by determining the length of the longest substring for each query. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case starts with a line containing two integers N and Q, the length of the string and the number of queries. - The next line contains a string `S` of length `N`. - The next Q lines contain two integers L and R, the start and end indices (1-based) of each query. ------ Output Format ------ - For each query, output a single integer representing the length of the longest substring within the range [L, R] that contains exactly one distinct character. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ Q ≤ 5 cdot 10^{4} 1 ≤ L ≤ R ≤ N - Sum of N over all test cases is at most 10^{5}. - The string `S` consists of lowercase and uppercase English alphabets only. ------ Sample Input ------ 1 10 2 aaabbbcccd 2 8 1 10 ----- Sample Output ------ 3 3 ------ Explanation ------ In the first query, the substring of `S` from index 2 to index 8 is \\"aabbbcc\\". The longest substrings with exactly one distinct character are \\"aaa\\", \\"bbb\\" and \\"cc\\". The maximum length is 3. In the second query, the entire string \\"aaabbbcccd\\" is considered. The longest substrings with exactly one distinct character are \\"aaa\\", \\"bbb\\" and \\"ccc\\". The maximum length is 3.","solution":"def longest_uniform_substring(S, queries): For each query, return the length of the longest substring with exactly one distinct character. :param S: A string of length N. :param queries: List of tuples [(L, R), ...] with 1-based inclusive indices. :returns: List of results for each query results = [] for L, R in queries: max_len = 0 current_len = 1 for i in range(L, R): if S[i - 1] == S[i]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) results.append(max_len) return results def process_input(input_data): input_list = input_data.split(\\"n\\") idx = 0 T = int(input_list[idx]) idx += 1 results = [] for _ in range(T): N, Q = map(int, input_list[idx].split()) idx += 1 S = input_list[idx] idx += 1 queries = [] for __ in range(Q): L, R = map(int, input_list[idx].split()) queries.append((L-1, R-1)) # Convert to 0-based indices idx += 1 results.extend(longest_uniform_substring(S, queries)) return results"},{"question":"Nina is developing a file organization system that organizes files into hierarchical directories. Each directory can contain files or other directories, and there can be multiple levels of nested directories. Given the hierarchical structure of directories and files, Nina wants to visualize the entire structure in a readable format using indentation to represent directory levels. Write a program to generate the indented representation of the directory structure given its hierarchical input. Input Format - The first line contains an integer N, the number of lines following. - Each of the next N lines represents a file or a directory: - If it\'s a directory, it starts with \\"DIR:\\" followed by the directory name. - If it\'s a file, it starts with \\"FILE:\\" followed by the file name. - Indentation is represented by a number of leading dots (\'.\'), where each dot represents one level of nesting. Output Format Print the entire structure in a readable indented format using spaces for indentation. Each level of nesting should be represented by two spaces. Constraints - 1 ≤ N ≤ 1000 - 1 ≤ Length of directory/file name ≤ 100 - Directory and file names contain only alphanumeric characters and underscores. Note - The structure input starts with the root directory (which can contain files or other directories). - No two directories or files at the same level will have the same name. SAMPLE INPUT 7 DIR:root ..DIR:subdir1 ....FILE:file1 ....FILE:file2 ..DIR:subdir2 ....DIR:subsubdir1 ......FILE:file3 SAMPLE OUTPUT root subdir1 file1 file2 subdir2 subsubdir1 file3 Explanation The hierarchical structure starts with the root directory. The root directory contains two subdirectories: subdir1 and subdir2. Subdir1 contains two files: file1 and file2. Subdir2 contains another subdirectory: subsubdir1, which contains one file: file3. The correct indentation of this structure is shown in the output.","solution":"def format_directory_structure(n, lines): Given the number of lines and the lines detailing the directory structure, returns the indented directory structure as a string. result = [] for line in lines: indent_level = line.count(\'.\') // 2 cleaned_line = line.replace(\'.\', \'\').replace(\'DIR:\', \'\').replace(\'FILE:\', \'\').strip() result.append(\' \' * indent_level + cleaned_line) return \'n\'.join(result) # Example Usage: if __name__ == \\"__main__\\": n = 7 lines = [ \'DIR:root\', \'..DIR:subdir1\', \'....FILE:file1\', \'....FILE:file2\', \'..DIR:subdir2\', \'....DIR:subsubdir1\', \'......FILE:file3\' ] print(format_directory_structure(n, lines))"},{"question":"In a dense forest thriving with biodiversity, scientists are keen on mapping the interactions between various species using computational tools. You\'ve been tasked with developing a software that simulates the symbiotic relationships between these species. Each species can either have a symmetrical mutualistic relationship, where both species benefit equally, or a predatory relationship, where one species gains at the expense of the other. Your task is to analyze the given interaction data and determine the total net benefit to the ecosystem. The net benefit is calculated by assigning weights to the interactions: a mutualistic relationship yields a fixed positive benefit, while a predatory relationship yields a fixed negative impact. # Input 1. An integer `n` (1 ≤ n ≤ 100) representing the number of species. 2. An integer `m` (0 ≤ m ≤ 10,000) representing the number of interactions between these species. 3. The next `m` lines each describe an interaction in the format: `A B I` where: - `A` and `B` (1 ≤ A, B ≤ n) are the species involved. - `I` is an integer `+1` (mutualistic) or `-1` (predatory). # Output Print the net benefit to the ecosystem as a single integer. # Constraints - There will be no self-interactions, i.e., A ≠ B. - Each pair of species can have multiple interactions. - Species are numbered from 1 to n. # Example Input ``` 4 5 1 2 +1 2 3 -1 1 3 +1 3 4 -1 2 4 +1 ``` Output ``` 1 ``` Input ``` 3 3 1 2 +1 2 3 +1 1 3 +1 ``` Output ``` 3 ``` Input ``` 2 1 1 2 -1 ``` Output ``` -1 ``` # Explanation For the first example, the interactions yield: - (+1) between species 1 and 2 - (-1) between species 2 and 3 - (+1) between species 1 and 3 - (-1) between species 3 and 4 - (+1) between species 2 and 4 The net benefit to the ecosystem is thus 1 - 1 + 1 - 1 + 1 = 1. # Note Develop an efficient algorithm to handle the computation given the constraints, focusing on analyzing the input effectively to compute the net benefit accurately.","solution":"def calculate_net_benefit(n, m, interactions): net_benefit = 0 for interaction in interactions: A, B, I = interaction weight = int(I) net_benefit += weight return net_benefit # Example usage: interactions = [(1, 2, \'+1\'), (2, 3, \'-1\'), (1, 3, \'+1\'), (3, 4, \'-1\'), (2, 4, \'+1\')] print(calculate_net_benefit(4, 5, interactions)) # Output should be 1"},{"question":"Mark is playing a game with a sequence of integers. In each move, he can pick any subsequence of the original sequence and remove it, provided that the difference between any two consecutive elements in the subsequence is less than or equal to a given integer k. Mark\'s goal is to minimize the total number of moves required to remove all elements from the sequence. For example, if the sequence is [2, 3, 4, 7, 9, 10] and k = 2, one possible way to remove all elements in minimum moves is: - Pick subsequence [2, 3, 4] and remove it. - Pick subsequence [7, 9, 10] and remove it. So the total number of moves required is 2. Can you help Mark find the minimum number of moves needed? -----Input----- The first line contains two integers n and k (1 le n le 2 cdot 10^5, 1 le k le 10^9) – the length of the sequence and the maximum allowable difference between consecutive elements of a subsequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) describing the elements of the sequence. -----Output----- Print one integer – the minimum number of moves required to remove all elements. -----Examples----- Input 6 2 2 3 4 7 9 10 Output 2 Input 5 3 1 4 7 10 13 Output 1 Input 3 1 5 6 8 Output 2 -----Note----- In the first example, the sequence [2, 3, 4, 7, 9, 10] can be split into two non-overlapping subsequences [2, 3, 4] and [7, 9, 10], each of which can be removed in one move. In the second example, all elements can be picked in a single subsequence [1, 4, 7, 10, 13] since each difference is exactly 3, which satisfies the condition k = 3. In the third example, the optimal way is to pick subsequence [5, 6] and then pick [8] in separate moves, thus resulting in 2 moves.","solution":"def min_moves(n, k, sequence): Function to determine the minimum number of moves to remove all elements from the sequence given the maximum allowable difference k. Args: n: (int) Length of the sequence k: (int) Maximum allowable difference between consecutive elements sequence: (list) List of integers representing the sequence Returns: int: Minimum number of moves required # Sort the sequence to make sure we pick optimal subsequences sequence.sort() # Initialize the move count moves = 1 for i in range(1, n): # If the difference between current and previous element exceeds k, we need a new move if sequence[i] - sequence[i - 1] > k: moves += 1 return moves"},{"question":"You are given an array of integers, where each element in the array represents the height of a person standing in a line. Your task is to compute the minimum number of adjacent swaps required to arrange the array in such a way that the heights of the people form a non-decreasing sequence (i.e., each person is either taller than or the same height as the person before them). For example, given the array [4, 3, 2, 1], you need to sort it in non-decreasing order to get [1, 2, 3, 4] with the minimum number of adjacent swaps. Example 1: Input: arr = [4, 3, 2, 1] Output: 6 Explanation: The array can be sorted in 6 adjacent swaps as follows: Swap indices 0 and 1: [3, 4, 2, 1] Swap indices 1 and 2: [3, 2, 4, 1] Swap indices 2 and 3: [3, 2, 1, 4] Swap indices 0 and 1: [2, 3, 1, 4] Swap indices 1 and 2: [2, 1, 3, 4] Swap indices 0 and 1: [1, 2, 3, 4] Example 2: Input: arr = [1, 5, 3, 2, 4] Output: 4 Explanation: The array can be sorted in 4 adjacent swaps as follows: Swap indices 1 and 2: [1, 3, 5, 2, 4] Swap indices 2 and 3: [1, 3, 2, 5, 4] Swap indices 3 and 4: [1, 3, 2, 4, 5] Swap indices 1 and 2: [1, 2, 3, 4, 5] Constraints: - 1 ≤ arr.length ≤ 10^5 - 1 ≤ arr[i] ≤ 10^5 Your task: You need to complete the function `min_adjacent_swaps` that takes an array `arr` as input and returns the minimum number of adjacent swaps required to sort the array in non-decreasing order.","solution":"def min_adjacent_swaps(arr): Returns the minimum number of adjacent swaps required to sort the array in non-decreasing order. def merge_sort(arr): Helper function to perform merge sort and count inversions, which is equivalent to the number of adjacent swaps. if len(arr) <= 1: return arr, 0 mid = len(arr) // 2 left, left_inv = merge_sort(arr[:mid]) right, right_inv = merge_sort(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): Merges two sorted arrays (left and right) and counts the split inversions. merged = [] i = j = 0 split_inv = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) split_inv += len(left) - i j += 1 merged.extend(left[i:]) merged.extend(right[j:]) return merged, split_inv # Perform merge sort on the array and count the inversions (adjacent swaps). _, swaps = merge_sort(arr) return swaps"},{"question":"The magical forest is home to many creatures, each with their unique abilities. Recently, the forest has been invaded by a group of trolls who are threatening the peace. As the guardian of the forest, you have to develop a strategy to eliminate the trolls. You have a jar of magical stones which you can use to cast spells. Each stone has a specific power value and each troll has a specific defense value. A troll is eliminated if the power value of the stone matches or exceeds its defense value. To cast a spell, you may select any stone from the jar. However, there is a twist. You can only use each stone once. Additionally, you always have to confront the troll with the highest defense value first. Given a list of stones and their power values, and a list of trolls and their defense values, your task is to determine the minimum number of stones required to eliminate all the trolls. If it is not possible to eliminate all the trolls with the given stones, return -1. Input format: The first line contains an integer M, denoting the number of magical stones. The second line contains M integers, representing the power values of the stones. The third line contains an integer T, denoting the number of trolls. The fourth line contains T integers, representing the defense values of the trolls. Output format: Print the minimum number of stones required to eliminate all the trolls, or -1 if it is not possible. Constraints: 1 ≤ M, T ≤ 100 1 ≤ power values, defense values ≤ 1000 SAMPLE INPUT 5 8 1 3 5 6 4 7 5 3 2 SAMPLE OUTPUT 4 Explanation: First, the stone with power value 8 is used to eliminate the troll with defense value 7. Next, the stone with power value 6 is used to eliminate the troll with defense value 5. Then, the stone with power value 5 is used to eliminate the troll with defense value 3. Finally, the stone with power value 3 is used to eliminate the troll with defense value 2. All trolls are eliminated using 4 stones.","solution":"def min_stones_to_eliminate_trolls(stones, trolls): Determine the minimum number of stones required to eliminate all the trolls. If it is not possible to eliminate all the trolls, return -1. stones.sort(reverse=True) trolls.sort(reverse=True) stone_index = 0 for troll in trolls: while stone_index < len(stones) and stones[stone_index] < troll: stone_index += 1 if stone_index == len(stones): return -1 # Not enough stones to defeat all trolls stone_index += 1 # Use the stone to eliminate the troll return len(trolls) # Prepare the execution with input function def main(): M = int(input().strip()) stones = list(map(int, input().strip().split())) T = int(input().strip()) trolls = list(map(int, input().strip().split())) result = min_stones_to_eliminate_trolls(stones, trolls) print(result) # Uncomment below to run the main function directly # if __name__ == \\"__main__\\": # main()"},{"question":"You are given a list of integers representing the heights of buildings in a city. The buildings are arranged in a row, and you need to calculate the amount of water that can be trapped between these buildings after it rains. The amount of water trapped above a building is determined by the height of the buildings to the left and right of it. Specifically, the amount of water trapped above a building is the minimum of the maximum heights of the buildings to the left and right of it, minus the height of the building itself (if this result is positive). Write a program to compute the total amount of water trapped between all the buildings. Function Signature: ```python def trap_water(heights: List[int]) -> int: pass ``` # Input - An integer `T` representing the number of test cases. - For each test case, a list of integers `heights` of length `N` representing the heights of the buildings in the city. # Output - For each test case, output the total amount of water trapped. # Constraints - ( T leq 10 ) - ( 1 leq N leq 10^5 ) - ( 0 leq text{heights}[i] leq 10^4 ) # Example Input ``` 3 [0,1,0,2,1,0,1,3,2,1,2,1] [4,2,0,3,2,5] [1,2,3,4,5] ``` Output ``` 6 9 0 ``` # Note - In the first test case, the total water trapped is 6 units. - In the second test case, the total water trapped is 9 units. - In the third test case, there is no water trapped since the heights are in strictly increasing order.","solution":"from typing import List def trap_water(heights: List[int]) -> int: if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(1, n - 1): water += max(0, min(left_max[i], right_max[i]) - heights[i]) return water"},{"question":"Given two strings, write a function to determine if one string is a permutation of the other. A permutation of a string is another string that contains the same characters, only the order of characters can be different. The function should return a boolean value: `True` if the strings are permutations of each other and `False` otherwise. Constraints * The length of the strings will be at most 10000. * The strings will contain only ASCII characters. Input The input consists of two lines: * The first line contains the first string. * The second line contains the second string. Output Output a single boolean value: `True` if the strings are permutations of each other, `False` otherwise. Function Signature ```python def are_permutations(str1: str, str2: str) -> bool: ``` Examples Input abc bca Output True Input hello bello Output False","solution":"def are_permutations(str1: str, str2: str) -> bool: Determines if one string is a permutation of the other. # Check if lengths are different if len(str1) != len(str2): return False # Use sorted function to sort both strings and compare return sorted(str1) == sorted(str2)"},{"question":"You are given an international word list and a map of rules. The map contains key-value pairs that describe how a word in one language, represented by a key, translates to a word in another language, represented by a value. Your task is to compute the longest possible translation chain for a given starting word and return the length of that chain. The translation chain is a sequence where each word in the sequence translates to the next word according to the given rules. Input The first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of translation rules. The next n lines contain translations. Each translation is given as a pair of words a, b (1 ≤ |a|, |b| ≤ 100), where `a` is a word in the original language, and `b` is its translation in another language. All words consist of lowercase Latin letters. The last line contains a single word `start` (1 ≤ |start| ≤ 100) — the starting word for which you need to compute the longest translation chain. Output Print an integer denoting the length of the longest possible translation chain starting with the given word `start`. Examples Input 4 cat chat chat gato gato cat dog chien cat Output 3 Input 3 a b b c c d a Output 4 Input 2 hello bonjour bonjour hola hello Output 3","solution":"def longest_translation_chain(n, translations, start): # Create a dictionary to store the translation map translation_map = {} for a, b in translations: translation_map[a] = b def find_chain_length(word, visited=set()): if word in visited: return 0 if word not in translation_map: return 1 visited.add(word) next_word = translation_map[word] length = 1 + find_chain_length(next_word, visited) visited.remove(word) return length return find_chain_length(start)"},{"question":"Farmer John\'s cows are lining up for their annual photo. Each cow in the photo is assigned a unique ID from 1 to n. As a part of photo arrangement, Farmer John wants the cows to form a queue in such a way that there are no \\"lonely cows\\". A cow is considered lonely if there are no other cows with IDs differing by exactly 1. You must ensure that for every cow in the lineup, there is at least one other cow whose ID is either one less or one more than that cow\'s ID. Given the number of cows, n, determine whether it is possible to arrange them such that no cow is lonely, and if possible, provide such an arrangement. Input The input consists of a single integer n (1 ≤ n ≤ 100000), the number of cows. Output If it is not possible to arrange the cows to ensure no lonely cows, print \\"No\\". Otherwise, print \\"Yes\\" followed by a valid arrangement of the cows. Examples Input 4 Output Yes 1 2 3 4 Input 5 Output Yes 1 2 3 4 5 Input 1 Output No Note In the first sample, each cow has a neighbor with an ID +/- 1. In the second sample, similarly, every cow is adjacent to another cow with an ID differing by 1. In the third sample, it is not possible to form a non-lonely lineup with just one cow.","solution":"def cow_arrangement(n): if n == 1: return \\"No\\" arrangement = \\" \\".join(map(str, range(1, n + 1))) return f\\"Yesn{arrangement}\\""},{"question":"Alice has a special string composed of numbers and lowercase English letters. She wants to encrypt this string with a special transformation. The transformation works as follows: 1. Every digit (0-9) in the string should be replaced by the corresponding English word in uppercase format (\\"ZERO\\", \\"ONE\\", ..., \\"NINE\\"). 2. Every lowercase letter should be replaced with an uppercase letter in its alphabetical order. For example, \'a\' becomes \'A\', \'b\' becomes \'B\', ..., \'z\' becomes \'Z\'. Write a function that transforms the given string according to the specified rules. Input - A single string `s` composed of digits and lowercase English letters (1 ≤ length of s ≤ 100). Output - The transformed string. # Example Input ``` a1b2c3 ``` Output ``` AONEBTWOCTHREE ``` Input ``` hello123 ``` Output ``` HELLOONETWOTHREE ``` Input ``` 7abc9 ``` Output ``` SEVENABCNINE ``` # Notes - Each character in the string should be transformed individually according to the rules. - The function should handle a mix of digits and letters seamlessly, applying the correct transformation based on the character type.","solution":"def transform_string(s): Transforms the input string by replacing: - Every digit with its corresponding English word in uppercase. - Every lowercase letter with its uppercase equivalent. digit_to_word = { \'0\': \'ZERO\', \'1\': \'ONE\', \'2\': \'TWO\', \'3\': \'THREE\', \'4\': \'FOUR\', \'5\': \'FIVE\', \'6\': \'SIX\', \'7\': \'SEVEN\', \'8\': \'EIGHT\', \'9\': \'NINE\' } result = [] for char in s: if char.isdigit(): result.append(digit_to_word[char]) elif char.islower(): result.append(char.upper()) return \'\'.join(result)"},{"question":"Complete the function so that it takes a string and returns a new string where all occurrences of the first character have been replaced with \'*\', except the first character itself. Example ```python \\"restart\\" # should return \\"resta*t\\" \\"racecar\\" # should return \\"raceca*\\" ```","solution":"def replace_first_char_occurrences(s): Takes a string and returns a new string where all occurrences of the first character have been replaced with \'*\', except the first character itself. if not s: return s first_char = s[0] return first_char + s[1:].replace(first_char, \'*\')"},{"question":"Alex is a game enthusiast who loves grid-based games. He is currently designing a new game where the player has to find the largest square of a certain character in a given grid. The character can be specified differently for different levels. Alex needs your help to write a program that will determine the size of the largest square consisting of a specified character in the given grid, where the size of a square is the length of its side. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. The next n lines contain m characters each, representing the grid itself. The last line contains a single character c which represents the character of interest. Output On the single line print the size of the largest square consisting of the character c. Examples Input 5 5 aaaba aabba abbba bbbbb abbba a Output 2 Input 3 4 xxxx yxxx yyyy x Output 2 In the first example, the largest square consisting of the character \'a\' is of size 2x2. In the second example, the largest square consisting of the character \'x\' is also of size 2x2.","solution":"def largest_square(n, m, grid, c): # Initialize a DP table filled with 0 dp = [[0] * m for _ in range(n)] max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == c: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"Dereck loves riding his bike. He likes to explore city streets and small alleys for adventure. One of his favorite things to do is to find shortest paths through the city that avoid some congested streets. The city can be represented as a grid of M rows and N columns where each cell in the grid represents an intersection. Dereck starts his journey from the top-left intersection (0, 0) and wants to reach the bottom-right intersection (M-1, N-1). Some intersections are congested and cannot be crossed. You need to write a program to find the shortest path from the starting intersection to the destination avoiding the congested intersections. If it is impossible to reach the destination, the program should output \\"Impossible\\". Dereck can only move to the right, left, up or down from the current intersection. Input The input consists of multiple test cases. Each test case starts with two integers M and N (1 ≤ M, N ≤ 100), indicating the number of rows and columns in the city grid. The next M lines each contain N characters, where a character \'0\' indicates that the intersection is free to cross and \'1\' indicates a congested intersection which cannot be crossed. The input is terminated by a line with two zeros. This last line should not be processed. Output For each test case, print the length of the shortest path from the start to the destination. If no such path exists, print \\"Impossible\\". Example Input 5 5 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 5 5 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 Output 8 Impossible","solution":"from collections import deque def shortest_path(grid, M, N): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, depth = queue.popleft() if (x, y) == (M - 1, N - 1): return depth for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'0\': visited.add((nx, ny)) queue.append((nx, ny, depth + 1)) return \\"Impossible\\" def process_input(data): results = [] lines = data.strip().split(\\"n\\") index = 0 while index < len(lines): M, N = map(int, lines[index].split()) if M == 0 and N == 0: break grid = [lines[i].split() for i in range(index + 1, index + 1 + M)] result = shortest_path(grid, M, N) results.append(result) index += M + 1 return results"},{"question":"Maria has started learning about prime numbers and she is particularly fascinated by the twin primes. Twin primes are pairs of prime numbers that have a difference of 2. For example, (3, 5) and (11, 13) are twin primes. Now Maria wants to find all the twin prime pairs up to a number n but she needs your help to write a program for this task. Your task is to write a program that takes an integer n as input and outputs all the twin prime pairs (p1, p2) such that p1 < p2 and both p1 and p2 are prime numbers up to and including n, and p2 - p1 = 2. -----Input----- The input contains a single integer n (1 ≤ n ≤ 10^5). -----Output----- For each suitable twin prime pair (p1, p2) found, print the pair in a new line in the format \\"p1 p2\\". The pairs should be printed in increasing order of p1. If there are no twin primes in the range, print \\"No twin primes\\". -----Example----- Input 20 Output 3 5 5 7 11 13 17 19 Input 10 Output 3 5 5 7 Input 2 Output No twin primes -----Note----- In the first sample, the twin primes under 20 are (3, 5), (5, 7), (11, 13), and (17, 19). For the second sample, the valid pairs are (3, 5) and (5, 7). No pairs exist in the third sample since there are no twin primes upto 2.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_twin_primes(n): twin_primes = [] primes = [i for i in range(2, n + 1) if is_prime(i)] for i in range(len(primes) - 1): if primes[i + 1] - primes[i] == 2: twin_primes.append((primes[i], primes[i + 1])) return twin_primes if twin_primes else \\"No twin primes\\" def twin_prime_output(n): twin_primes = find_twin_primes(n) if twin_primes == \\"No twin primes\\": return twin_primes return \\"n\\".join(f\\"{p1} {p2}\\" for p1, p2 in twin_primes) # Example usage n = 20 print(twin_prime_output(n)) # Should output the twin primes up to 20"},{"question":"An eccentric scientist has developed a unique DNA sequence manipulation machine. The machine uses a string of letters \'A\', \'C\', \'G\', and \'T\' to represent a DNA sequence. The machine can perform two types of operations on the sequence: 1. Swap any two characters in the sequence. 2. Replace any single character in the sequence with any of the other three possible characters (for example, replacing \'A\' with \'C\'). Given an initial DNA sequence and a target DNA sequence, the scientist wants to find the minimum number of operations needed to transform the initial sequence into the target sequence. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The following 2 times t lines contain a description of test cases. For each test case, the first line contains a string of lowercase letters \'A\', \'C\', \'G\', and \'T\' — the initial DNA sequence. The second line contains a string of lowercase letters \'A\', \'C\', \'G\', and \'T\' — the target DNA sequence. Both sequences will be of equal length, and their length will not exceed 10^5. -----Output----- Output t lines, each line should contain one integer denoting the minimum number of operations needed to transform the initial DNA sequence into the target DNA sequence. -----Example----- Input 3 ACGT TGCA AAAA CCCC AGGT GCAA Output 3 4 2 -----Note----- In the first test case, you can perform the following transformations: 1. Swap \'A\' with \'T\': \\"TCGA\\" 2. Swap \'C\' with \'G\': \\"TGCA\\" So, a total of 3 operations are needed. In the second test case, replace each \'A\' with \'C\' individually, hence a total of 4 operations. In the third test case, swap \'G\' with \'C\' and replace the \'G\' with an \'A\', hence a total of 2 operations.","solution":"def min_operations_to_transform(initial_seq, target_seq): Returns the minimum number of operations needed to transform initial_seq into target_seq. Operations: 1. Swap any two characters in the sequence. 2. Replace any single character in the sequence with any of the other three possible characters. diffs = sum(1 for a, b in zip(initial_seq, target_seq) if a != b) return diffs def process_test_cases(t, test_cases): results = [] for i in range(t): initial_seq = test_cases[2 * i] target_seq = test_cases[2 * i + 1] result = min_operations_to_transform(initial_seq, target_seq) results.append(result) return results"},{"question":"Given two strings, write a function to determine if one string is a rotation of another. The function should return True if one string is a rotation of the other, and False otherwise. Assume you have a function isRotation(s1, s2) available for this purpose. To check if one string is a rotation of the other, the function should concatenate one of the strings with itself and check if the other string is a substring of the result. Input First line contains s1 and s2 as input strings. Constraints 1 ≤ length(s1), length(s2) ≤ 10^5 The strings consist of only lowercase alphabetic characters. Output Return True if one string is a rotation of the other, otherwise return False. SAMPLE INPUT waterbottle erbottlewat SAMPLE OUTPUT True Explanation The second string \\"erbottlewat\\" is a rotation of the first string \\"waterbottle\\". Note A rotation of a string \\"abcdef\\" could be \\"cdefab\\", \\"defabc\\", etc. Hence concatenate \\"waterbottle\\" with itself to get \\"waterbottlewaterbottle\\" and check if \\"erbottlewat\\" is a substring of the result.","solution":"def isRotation(s1, s2): Checks if s2 is a rotation of s1. :param s1: The original string. :param s2: The string to check if it is a rotation of s1. :return: True if s2 is a rotation of s1, False otherwise. if len(s1) != len(s2): return False return s2 in s1 + s1"},{"question":"You are given an array of integers and queries for which you need to find the maximum element in a given range. Input The input is given from Standard Input in the following format: ``` N Q arr[1] arr[2] arr[3] ... arr[N] l_1 r_1 l_2 r_2 ... l_Q r_Q ``` ``` - The first line contains two integers, N (the number of elements in the array) and Q (the number of queries). - The second line contains N integers representing the array elements. - The next Q lines each contain two integers, l_i and r_i, which represent the left and right bounds of the query (inclusive). ``` Output You have to print Q lines, where the i-th line contains the maximum element in the subarray arr[l_i ... r_i] (1-indexed). Constraints * (1 leq N leq 100,000) * (1 leq Q leq 100,000) * (-10^9 leq arr[i] leq 10^9) * (1 leq l_i leq r_i leq N) Example # Input ``` 10 4 1 5 2 4 3 7 4 5 9 6 2 4 3 5 1 10 6 10 ``` # Output ``` 5 4 9 9 ```","solution":"def find_max_in_ranges(N, Q, arr, queries): results = [] for l, r in queries: max_element = max(arr[l-1:r]) results.append(max_element) return results def process_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) Q = int(data[1]) arr = list(map(int, data[2:N+2])) queries = [(int(data[i]), int(data[i+1])) for i in range(N+2, len(data), 2)] return N, Q, arr, queries if __name__ == \\"__main__\\": N, Q, arr, queries = process_input() results = find_max_in_ranges(N, Q, arr, queries) for result in results: print(result)"},{"question":"Write a function called `sum_of_squares` that takes a list of integers and returns the sum of the squares of each integer in the list. For example, given the list `[1, 2, 3, 4]`, the function should return `1^2 + 2^2 + 3^2 + 4^2 = 30`.","solution":"def sum_of_squares(nums): Returns the sum of the squares of each integer in the list. Parameters: nums (list): A list of integers Returns: int: The sum of the squares of each integer in the list return sum(x ** 2 for x in nums)"},{"question":"Given an unsorted array of integers, find the length of the longest sequence of consecutive numbers. The sequence can be in any order within the array but its consecutive numbers must appear without gaps. Example: Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive sequence is [1, 2, 3, 4]. Therefore, its length is 4. Input: [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] Output: 9 Explanation: The longest consecutive sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore, its length is 9. Note: - The implemented solution should have a complexity of O(n). - The sequence can be in any order within the array but its consecutive numbers must appear without gaps.","solution":"def longest_consecutive(nums): Given an unsorted array of integers, find the length of the longest sequence of consecutive numbers. Args: nums (list): A list of integers. Returns: int: The length of the longest consecutive sequence. if not nums: return 0 nums_set = set(nums) longest_seq = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_seq = max(longest_seq, current_streak) return longest_seq"},{"question":"A delivery robot is navigating a warehouse organized as an N x N grid. The robot starts at the top-left corner (0, 0) and needs to reach the bottom-right corner (N-1, N-1). The robot can move right or down to adjacent cells only. Some of the cells in the grid are obstacles, making it impossible to pass through them. You are given a 2D array grid where grid[i][j] is 0 if the cell (i, j) is an obstacle, and 1 if it\'s free to pass. Find the minimum number of steps the robot needs to take to reach the bottom-right corner from the top-left corner. If the robot cannot reach the destination, print -1. -----Constraints----- - 2 leq N leq 500 - grid[i][j] is either 0 or 1. -----Input----- Input is given from Standard Input in the following format: N grid -----Output----- Print the minimum number of steps the robot needs to take to reach the bottom-right corner. If it\'s impossible, print -1. -----Sample Input----- 5 [ [1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 1], [0, 0, 0, 1, 0], [0, 1, 1, 1, 1] ] -----Sample Output----- 9 The robot takes the path (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) -> (2,3) -> (2,4) -> (3,4) -> (4,4), requiring 9 steps.","solution":"from collections import deque def min_steps(grid): Finds the minimum steps required for the robot to navigate from the top-left corner to the bottom-right corner in a given grid, or return -1 if not possible. N = len(grid) if grid[0][0] == 0 or grid[N-1][N-1] == 0: return -1 # start or end is blocked directions = [(1, 0), (0, 1)] # Down, Right queue = deque([(0, 0, 1)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == N-1 and c == N-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and grid[nr][nc] == 1 and (nr, nc) not in visited: queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"You are given an array of integers `nums` and an integer `k`. Your task is to divide the array into `k` continuous subarrays such that the sum of the maximum subarray sums is minimized. Return this minimized sum. Example 1: Input: nums = [7,2,5,10,8], k = 2 Output: 18 Explanation: We can divide the array into two subarrays [7,2,5] and [10,8]. The sum of the subarrays is [14,18], and the maximum sum is 18. Example 2: Input: nums = [1,4,4], k = 3 Output: 4 Note: 1 <= nums.length <= 50 1 <= nums[i] <= 10^7 1 <= k <= nums.length","solution":"def splitArray(nums, k): def valid(mid): cur_sum = 0 count = 1 for num in nums: cur_sum += num if cur_sum > mid: count += 1 cur_sum = num return count <= k left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if valid(mid): right = mid else: left = mid + 1 return left"},{"question":"John is planning to build a small network of computers in his office. The computers will be connected with network cables, where each cable connects two computers directly. Because of physical space limitations, John cannot use more than `m` cables. Furthermore, due to potential security risks, John wants to ensure that no single computer can be the sole point through which all communications pass. John needs your help to determine if it\'s possible to connect all the computers such that the network meets his requirements. If possible, you should also provide the specific connections (i.e., pairs of computers connected by a cable). Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 200, 1 ≤ m ≤ 10000) — the number of computers and the maximum number of cables. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — the identifiers of two computers that can be directly connected by a cable. No pair of computers is listed more than once. Output If it\'s possible to connect all the computers while satisfying the constraints, output the connections. The first line should contain an integer `k` — the number of cables used. The next `k` lines should each contain two integers `u` and `v` — the identifiers of the computers connected by that cable. If it is not possible to connect all the computers in the desired manner, output -1. Examples Input 4 4 1 2 1 3 2 3 3 4 Output 3 1 2 1 3 3 4 Input 5 10 1 2 2 3 3 4 4 5 1 5 2 4 3 5 1 3 2 5 1 4 Output 4 1 2 2 3 3 4 4 5 Input 3 1 1 2 Output -1","solution":"def find_network_connections(n, m, connections): def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 if n - 1 > m: return -1 parent = [i for i in range(n + 1)] rank = [0] * (n + 1) mst = [] for u, v in connections: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst.append((u, v)) if len(mst) == n - 1: break if len(mst) != n - 1: return -1 return mst def network(n, m, connections): result = find_network_connections(n, m, connections) if result == -1: return -1 else: output = [f\\"{len(result)}\\"] for u, v in result: output.append(f\\"{u} {v}\\") return \\"n\\".join(output)"},{"question":"James is a security analyst tasked with generating pseudo-random numbers for cryptographic purposes. He uses a unique algorithm to generate a sequence of numbers, and he wants to validate whether the generated sequence meets certain properties to consider it random enough. Given an integer n as the length of the sequence, and the sequence itself which consists of integers, develop a function to check if the sequence has no repeating sub-sequences of length greater than or equal to k. A sub-sequence is defined as continuous series of elements in the array. Two sub-sequences are considered repeating if their elements are identical and they occur at least twice within the main sequence. Input The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 1000) which represent the number of elements in the sequence and the minimum length of the sub-sequence to check for repetition respectively. The second line contains n space-separated integers representing the sequence. Output Print \\"YES\\" if the sequence does not contain any repeating sub-sequence of length greater than or equal to k. Print \\"NO\\" otherwise. Examples Input 10 3 1 2 3 1 2 3 4 5 6 7 Output NO Input 10 4 1 2 3 1 2 3 4 5 6 7 Output YES Input 5 2 1 2 3 2 1 Output YES","solution":"def has_no_repeating_subsequence(n, k, sequence): Checks if the sequence has no repeating sub-sequences of length >= k. Args: n : int : Length of the sequence k : int : Minimum length of the sub-sequence to check for repetition sequence : list of int : The sequence of integers Returns: str : \\"YES\\" if no repeating sub-sequence of length >= k, otherwise \\"NO\\" if k > n: return \\"YES\\" # If k is greater than n, it\'s impossible to have such a sub-sequence seq_str = \'\'.join(map(str, sequence)) # Convert sequence to a string for easy finding for length in range(k, n + 1): # Check for sub-sequences of all length starting from k to n seen_subseq = set() for i in range(n - length + 1): subseq = tuple(sequence[i:i + length]) if subseq in seen_subseq: return \\"NO\\" seen_subseq.add(subseq) return \\"YES\\""},{"question":"# Robot\'s Path You have a robot that starts at position (0, 0) on an infinite grid. The robot can move in four possible directions: up, down, left, and right. The robot takes a list of commands consisting of the letters \'U\', \'D\', \'L\', and \'R\'. The robot moves according to these commands sequentially: - \'U\' moves the robot up (y += 1) - \'D\' moves the robot down (y -= 1) - \'L\' moves the robot left (x -= 1) - \'R\' moves the robot right (x += 1) Your task is to determine if, after executing all the commands, the robot returns to the origin (0, 0). Input A string `commands` where each character is one of \'U\', \'D\', \'L\', \'R\'. The length of the string is between `1` and `100` inclusive. Output Return `True` if the robot returns to the origin after executing all the commands, otherwise, return `False`. Examples ``` robot_path(\\"UD\\") -> True robot_path(\\"LL\\") -> False robot_path(\\"RRDD\\") -> False robot_path(\\"UDLR\\") -> True ``` Implement the function `robot_path(commands: str) -> bool`.","solution":"def robot_path(commands: str) -> bool: x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Given two strings version1 and version2, compare them to determine if one is a higher version number than the other. Version numbers are formatted as a string of numbers joined by dots like \\"1.0.0\\", \\"1.0.1\\", etc. Return 1 if version1 > version2, -1 if version1 < version2, or 0 if they are equal. Example 1: Input: version1 = \\"1.01\\", version2 = \\"1.001\\" Output: 0 Explanation: \\"1.01\\" and \\"1.001\\" are considered equal since integer comparisons ignore leading zeros. Example 2: Input: version1 = \\"1.0\\", version2 = \\"1.0.0\\" Output: 0 Explanation: \\"1.0\\" and \\"1.0.0\\" are considered equal. Trailing zeros in the version number don’t affect the comparison. Example 3: Input: version1 = \\"0.1\\", version2 = \\"1.1\\" Output: -1 Explanation: version1 < version2 Example 4: Input: version1 = \\"1.0.1\\", version2 = \\"1\\" Output: 1 Explanation: version1 > version2 Note: 1 <= version1.length, version2.length <= 500 version1 and version2 contain only digits and dots. version1 and version2 do not start or end with dots and they are not two consecutive dots.","solution":"def compare_version(version1, version2): Compare two version numbers version1 and version2. Returns 1 if version1 > version2, -1 if version1 < version2, or 0 if they are equal. v1_parts = list(map(int, version1.split(\\".\\"))) v2_parts = list(map(int, version2.split(\\".\\"))) # Pad the shorter list with zeros at the end to make both lists the same length max_length = max(len(v1_parts), len(v2_parts)) v1_parts.extend([0] * (max_length - len(v1_parts))) v2_parts.extend([0] * (max_length - len(v2_parts))) # Compare each part for p1, p2 in zip(v1_parts, v2_parts): if p1 > p2: return 1 elif p1 < p2: return -1 return 0"},{"question":"Tina is learning to work with binary search trees (BST). She has created a BST that contains unique values. She wants to find the k-th smallest element in the BST. Your task is to help Tina write a program to find the k-th smallest element in a given BST. ----Input---- - The first line contains an integer n (1 ≤ n ≤ 10^4) - the number of nodes in the BST. - The second line contains n space-separated integers which are the values of the nodes in the BST. - The third line contains a single integer k (1 ≤ k ≤ n). ----Output---- - Print a single integer which is the k-th smallest element in the BST. ----Examples---- Input: 7 15 10 20 8 12 17 25 3 Output: 12 Input: 5 5 3 7 2 4 4 Output: 5 ----Note---- The nodes will be given in the order that would represent a pre-order traversal of the given BST. You may assume the BST will be a valid Binary Search Tree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def insert_into_bst(root, val): if root is None: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def build_bst_from_preorder(preorder): if not preorder: return None root = TreeNode(preorder[0]) for val in preorder[1:]: insert_into_bst(root, val) return root def inorder_traverse(root, result): if root: inorder_traverse(root.left, result) result.append(root.val) inorder_traverse(root.right, result) def kth_smallest(root, k): result = [] inorder_traverse(root, result) return result[k-1] def find_kth_smallest(n, node_values, k): root = build_bst_from_preorder(node_values) return kth_smallest(root, k)"},{"question":"Lydia is playing a game where she needs to transform a string into a palindrome. She can perform the following operation zero or more times: select any character in the string and replace it with any other character. Given a string s, help Lydia determine the minimum number of operations required to transform the string into a palindrome. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The description of the test cases follows. For each test case, the first line contains a string s (1 leq |s| leq 10^5) consisting of lowercase English letters. It is guaranteed that the sum of the lengths of all strings over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum number of operations required to transform the string into a palindrome. -----Examples----- Input 4 abc racecar madam abacaba Output 1 0 0 0 -----Note----- For the first test case, Lydia can replace \'a\' with \'c\' or \'c\' with \'a\' to get \\"cbc\\" or \\"aba\\" respectively, both of which are palindromes. For the second, third, and fourth test cases, the strings are already palindromes, so no operations are needed.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform a string into a palindrome. left = 0 right = len(s) - 1 operations = 0 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations def get_min_operations_for_test_cases(test_cases): Given a list of test case strings, returns a list of integers representing the minimum number of operations needed for each case to turn into a palindrome. result = [] for s in test_cases: result.append(min_operations_to_palindrome(s)) return result"},{"question":"Alyssa is learning about binary trees in her data structures class, and her professor has given her a unique challenge. She is provided with a binary tree where each node contains a non-negative integer value. She needs to find the maximum path sum in the tree. The path can start and end at any node in the tree and must go downwards (traveling only from parent nodes to child nodes). A path sum is defined as the sum of the values of the nodes encountered in the path. Write a function to determine the maximum path sum in the given binary tree. The function signature is: ```python def maxPathSum(root: Optional[TreeNode]) -> int: ``` Where `root` is the root node of the binary tree. # Input Format - The input will be provided as a serialized binary tree, with `None` representing a null node. The serialization is done in level-order traversal. # Constraints - The number of nodes in the binary tree is in the range [1, 3 * 10^4]. - The value of each node is in the range [0, 10^4]. # Output Format - Return the maximum path sum as an integer. # Example ```python # Example 1 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) # The tree looks like this: # 1 # / # 2 3 # The maximum path sum is 6 (2 -> 1 -> 3) print(maxPathSum(root)) # Output: 6 # Example 2 root = TreeNode(-10) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) # The tree looks like this: # -10 # / # 9 20 # / # 15 7 # The maximum path sum is 42 (15 -> 20 -> 7) print(maxPathSum(root)) # Output: 42 ``` # Explanation For Example 1, the maximum path sum is obtained by traversing from the left child (2) to the root (1) and then to the right child (3), yielding a total path sum of 2 + 1 + 3 = 6. For Example 2, the maximum path sum is obtained by traversing from the left child of the right subtree (15), through the right subtree\'s root (20), and to its right child (7), yielding a total path sum of 15 + 20 + 7 = 42. # Note Alyssa needs to ensure that her solution efficiently handles trees with up to 30,000 nodes while correctly computing the maximum path sum.","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root: Optional[TreeNode]) -> int: def max_gain(node): nonlocal max_sum if not node: return 0 left_gain = max(max_gain(node.left), 0) right_gain = max(max_gain(node.right), 0) current_max_path = node.val + left_gain + right_gain max_sum = max(max_sum, current_max_path) return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') max_gain(root) return max_sum"},{"question":"Piranha came across an ancient stone engraving that contains hidden messages. Piranha needs your help to decode the message by following a unique repetitive pattern mechanism. The engraving has a sequence of strings that follow a specific pattern. Every string in the sequence is generated by repeating a given substring multiple times up to a particular length. You are given a help note with the starting substring `u`, an integer `L` which denotes the total length of the resulting string in the sequence, and a number `N` representing the position of the string in the sequence that Piranha is interested in. Using this information, you need to find the exact string from the sequence. -----Input----- The first line of input contains a single integer N which specifies the position of the string in the sequence (1 ≤ N ≤ 10^5). The second line contains the integer L which specifies the length of the resulting string (1 ≤ L ≤ 10^5). The third line contains the substring `u` of length between 1 to 1000. -----Output----- Output the resulting string of length L that is the N-th string in the sequence generated by repeating the substring `u`. ----- Constraints ----- Any string in the sequence is generated by repeating the substring `u` as many times necessary to achieve the total length `L`. - 1 ≤ N ≤ 10^5 - 1 ≤ L ≤ 10^5 - The length of `u` is between 1 and 1000 - The resulting string could contain an excess portion of the last repeated substring if L is not a multiple of the length of `u`. -----Example----- Input: 2 7 ab Output: abababa -----Explanation----- The given substring `u` is \\"ab\\". The 2nd string in the repetitive pattern sequence would be \\"abababa\\" which is generated by repeating \\"ab\\" to reach the specified length L = 7.","solution":"def generate_nth_string(N, L, u): Generates the N-th string in the sequence which is formed by repeating substring \'u\'. Args: N (int): The position in the sequence. L (int): The length of the resulting string. u (str): The substring used for generating the sequence. Returns: str: The resulting string of length L. # Calculate the actual string which is repeated adequate number of times to ensure enough length repeated_string = u * ((L // len(u)) + 1) # Extract the first L characters of the repeated string to form the resulting string return repeated_string[:L]"},{"question":"Write a python function that encodes a given string using the run-length encoding (RLE) method. The function takes a string of uppercase letters as input and returns its run-length encoded version. Example 1: Input: s = \\"AAABBBCCDAA\\" Output: \\"3A3B2C1D2A\\" Explanation: There are three A\'s, three B\'s, two C\'s, one D, and two A\'s in the input string. Example 2: Input: s = \\"AABBCC\\" Output: \\"2A2B2C\\" Explanation: There are two A\'s, two B\'s, and two C\'s in the input string. Example 3: Input: s = \\"XYZ\\" Output: \\"1X1Y1Z\\" Explanation: There is one X, one Y, and one Z in the input string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `runLengthEncoding()` which takes the string s as input and returns its run-length encoded version. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 0 <= len(s) <= 1000 The input string contains only uppercase letters (A-Z)","solution":"def runLengthEncoding(s): Encodes a given string using the run-length encoding (RLE) method. :param s: input string of uppercase letters :return: the run-length encoded version of the string if not s: return \\"\\" encoded_string = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: encoded_string.append(str(count)) encoded_string.append(s[i-1]) count = 1 # Add the last accumulated characters encoded_string.append(str(count)) encoded_string.append(s[-1]) return \\"\\".join(encoded_string)"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct indices i and j in the list such that nums[i] + nums[j] is equal to the target integer. If such a pair exists, print the indices i and j. If there are multiple answers, print any of them. If no such pair exists, print -1. Input The first input line contains an integer n (2 ≤ n ≤ 10^5) – the size of the list. The second line contains n integers, each between -10^9 and 10^9, representing the list of elements. The third line contains an integer target (-10^9 ≤ target ≤ 10^9). Output Print two integers i and j (0 ≤ i < j < n) such that nums[i] + nums[j] equals the target. If there are multiple answers, print any of them. If no such pair exists, print -1. Examples Input 4 2 7 11 15 9 Output 0 1 Input 5 1 2 3 4 5 10 Output -1","solution":"def find_pair_with_sum(nums, target): Finds two distinct indices i and j in the list nums such that nums[i] + nums[j] == target. If such a pair exists, returns the indices i and j, else returns -1. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return num_to_index[complement], i num_to_index[num] = i return -1"},{"question":"In a distant land called Techlantis, the kingdom is run by an efficient and curious Queen who loves organizing her assets in unique ways. One of her favorite projects is the organization of her royal library. The library has n rows of bookshelves, and each bookshelf has m sections. Each section can hold exactly one book. The bookshelves are arranged vertically (from top to bottom) and horizontally (from left to right). The Queen has a specific process for organizing the books in the library. Each book is identified by a unique code comprised of uppercase Latin letters (A-Z) which can be from 1 to 10 characters long. When placing a book in the library, the Queen follows these rules: 1. She tries to place the book at the specified row and section if it\'s empty. 2. If the section is already occupied, she moves to the next section in the same row to the right. 3. If she reaches the end of a row, she moves down to the next row starting from the first section. 4. If she cannot find an empty space in the library, she opts to store the book in her secret vault (essentially ignoring the placement). The tasks for library management include adding books and removing books. The Queen\'s scholars frequently query this organized system with the following two types of queries: - \\"+B x y code\\" (where x is the row and y is the section). This query is a command to add the book with the unique code to the specified position following the above rules. This query expects no direct output. - \\"-B code\\". This query is a command to remove the book identified by the unique code from the library. The output must be the row and section indices where the book was stored. If the book is not present in the library, the output should be \\"-1 -1\\". # Input Format The first line contains three integers n, m, and k (1 ≤ n, m ≤ 30, 1 ≤ k ≤ 2000) indicating the number of rows, number of sections per row, and number of operations respectively. The next k lines contain the operations in the format described above. # Output Format For each \\"-B code\\" operation, output the row and section indices in a new line. If the book is not found, output \\"-1 -1\\". # Example Input: ``` 3 3 8 +B 1 1 BOOK1 +B 1 1 BOOK2 +B 1 1 BOOK3 +B 1 1 BOOK4 -B BOOK1 -B BOOK2 -B BOOK3 -B BOOK4 ``` Output: ``` 1 1 1 2 1 3 2 1 ``` Input: ``` 2 3 6 +B 1 1 BOOKA +B 1 2 BOOKB -B BOOKB +B 1 1 BOOKC -B BOOKC -B BOOKA ``` Output: ``` 1 2 1 2 1 1 ```","solution":"class RoyalLibrary: def __init__(self, n, m): self.rows = n self.cols = m self.library = [[\'\' for _ in range(m)] for _ in range(n)] self.book_locations = {} def add_book(self, x, y, code): x -= 1 y -= 1 for i in range(x, self.rows): for j in range(y, self.cols): if self.library[i][j] == \'\': self.library[i][j] = code self.book_locations[code] = (i + 1, j + 1) return y = 0 self.book_locations[code] = None def remove_book(self, code): if code in self.book_locations and self.book_locations[code]: x, y = self.book_locations.pop(code) self.library[x - 1][y - 1] = \'\' return x, y return -1, -1 def process_operations(n, m, k, operations): library = RoyalLibrary(n, m) results = [] for operation in operations: parts = operation.split() if parts[0] == \\"+B\\": x, y = int(parts[1]), int(parts[2]) code = parts[3] library.add_book(x, y, code) elif parts[0] == \\"-B\\": code = parts[1] results.append(library.remove_book(code)) return results"},{"question":"You are given an integer array `nums` of size `n` which consists of positive integers. Your task is to maximize the sum of elements in the array by removing exactly one element such that the sum of the remaining elements is as large as possible. You are not allowed to just remove the minimum element directly. Instead, select an element to remove such that the sum of the remaining elements can be maximized by then taking a contiguous subarray starting from any position to the end of the array. Write a function `maximizeSum` that accepts the list `nums` and returns the maximum possible sum after removing exactly one element and considering only contiguous subarrays starting thereafter. Example 1: Input: nums = [1, 2, 3, 4] Output: 9 Explanation: Remove the element at index 0 (value = 1) so the array becomes [2, 3, 4]. The maximum sum of a contiguous subarray starting from any position would be 2 + 3 + 4 = 9. Example 2: Input: nums = [5, 3, 6, 1, 4] Output: 18 Explanation: Remove the element at index 3 (value = 1) so the array becomes [5, 3, 6, 4]. The maximum sum of a contiguous subarray starting from any position would be 5 + 3 + 6 + 4 = 18. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maximizeSum()` which takes the list `nums` as input and returns the answer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= nums[i] <= 10^5","solution":"def maximizeSum(nums): Returns the maximum possible sum after removing exactly one element and considering only contiguous subarrays starting thereafter. n = len(nums) total_sum = sum(nums) # Find the worst element to remove max_sum = float(\'-inf\') current_sum = 0 for i in range(n): current_sum += nums[i] if i != n-1: # Make sure we don\'t consider the last element max_sum = max(max_sum, current_sum) return total_sum - min(nums)"},{"question":"David is preparing for a marathon and wants to track his training progress. Each day, he records the number of kilometers he runs. David wants to know the maximum distance he can run across a consecutive subset of days. However, he wants to track it optimally, considering time complexity. Write a program that takes an integer n, followed by a list of integers representing the kilometers David runs each day. Your task is to calculate and print the maximum number of kilometers run over any consecutive subset of days. ---Input--- The first line contains a single integer n (1 leq n leq 10^5) - the number of days. The second line contains n integers a_1, a_2, ..., a_n (-10^4 leq a_i leq 10^4) - the kilometers run on each day. ---Output--- Output a single integer representing the maximum kilometers run across any consecutive subset of days. ---Examples--- Sample Input 1: 5 3 -2 5 -1 6 Sample Output 1: 11 Sample Input 2: 4 -1 -2 -3 -4 Sample Output 2: -1 Explanation: In the first example, the best possible sum is achieved by taking the subset starting from the 1st day and ending at the 5th day (3 - 2 + 5 - 1 + 6 = 11). In the second example, the best possible sum is just the least negative single element, which is -1.","solution":"def max_consecutive_subarray_sum(n, arr): Function to calculate the maximum number of kilometers run across any consecutive subset of days using Kadane\'s algorithm. max_current = arr[0] max_global = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of n integers, where each integer is between 1 and 100 inclusive. Your task is to find the smallest positive integer that does not appear in the array. Input The first line contains an integer n (1 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output Print the smallest positive integer that does not appear in the array. Examples Input 7 3 4 2 1 1 6 5 Output 7 Note In the example, the integers 1 through 6 all appear in the array, so the smallest positive integer that does not appear in the array is 7.","solution":"def smallest_missing_positive_integer(n, arr): Finds the smallest positive integer that does not appear in the array. Parameters: n (int): Length of the array arr (list of int): List of integers in the array Returns: int: The smallest positive integer that does not appear in the array # Create a boolean array to track the presence of integers from 1 to 100 present = [False] * 101 # Mark the presence of numbers from the array for num in arr: if 1 <= num <= 100: present[num] = True # Find the smallest positive integer that is missing for i in range(1, 101): if not present[i]: return i # If all numbers from 1 to 100 are present, it would be 101 return 101"},{"question":"You have been provided with a vending machine simulation program. The vending machine is loaded with various snacks, each identified by a unique code, quantity available, and price. Users interact with the vending machine by entering the snack code to purchase the snack. The machine accepts payments, provides the snack if the payment is adequate, and returns change if necessary. Write a function `vending_machine(snack_code: str, paid_amount: float) -> str` that simulates a purchase. The function should return the result of the transaction as a string. The possible results are: - `\\"Purchase successful, change: [amount]\\"` if the transaction is successful and the user receives change. - `\\"Insufficient funds\\"` if the user does not provide enough money. - `\\"Snack not available\\"` if the snack is out of stock or if an invalid code is entered. Use the following inventory for your simulation: ``` { \'A1\': {\'name\': \'Chips\', \'price\': 1.25, \'quantity\': 10}, \'A2\': {\'name\': \'Soda\', \'price\': 1.50, \'quantity\': 5}, \'A3\': {\'name\': \'Candy\', \'price\': 0.75, \'quantity\': 8}, \'B1\': {\'name\': \'Juice\', \'price\': 2.00, \'quantity\': 3}, \'B2\': {\'name\': \'Gum\', \'price\': 0.50, \'quantity\': 7} } ``` For example: - `vending_machine(\'A1\', 2.00)` should return `\\"Purchase successful, change: 0.75\\"` - `vending_machine(\'A2\', 1.00)` should return `\\"Insufficient funds\\"` - `vending_machine(\'B3\', 1.50)` should return `\\"Snack not available\\"`","solution":"inventory = { \'A1\': {\'name\': \'Chips\', \'price\': 1.25, \'quantity\': 10}, \'A2\': {\'name\': \'Soda\', \'price\': 1.50, \'quantity\': 5}, \'A3\': {\'name\': \'Candy\', \'price\': 0.75, \'quantity\': 8}, \'B1\': {\'name\': \'Juice\', \'price\': 2.00, \'quantity\': 3}, \'B2\': {\'name\': \'Gum\', \'price\': 0.50, \'quantity\': 7} } def vending_machine(snack_code: str, paid_amount: float) -> str: if snack_code not in inventory: return \\"Snack not available\\" snack = inventory[snack_code] if snack[\'quantity\'] <= 0: return \\"Snack not available\\" if paid_amount < snack[\'price\']: return \\"Insufficient funds\\" change = paid_amount - snack[\'price\'] snack[\'quantity\'] -= 1 return f\\"Purchase successful, change: {change:.2f}\\""},{"question":"Given an array of integers, the task is to find the longest subarray with its elements arranged consecutively in any order. Example 1: Input: [1, 94, 93, 1000, 5, 92, 78] Output: 3 Explanation: The longest consecutive subarray is [92, 93, 94]. Example 2: Input: [10, 12, 11, 14] Output: 3 Explanation: The longest consecutive subarray is [10, 11, 12] or [11, 12, 14] (both should be considered). Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestConsecutiveSubarray() which takes an array arr and returns the length of the longest consecutive subarray. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^9","solution":"def longestConsecutiveSubarray(arr): if not arr: return 0 arr = sorted(set(arr)) # Remove duplicates and sort the array longest_streak = 1 current_streak = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 return max(longest_streak, current_streak)"},{"question":"Given an array of non-negative integers, determine whether the array can be rearranged to form an arithmetic progression. An array forms an arithmetic progression if the difference between consecutive elements is constant. Input: The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of elements in the array. The second line contains N non-negative integers separated by spaces. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 0 ≤ Ai ≤ 10^9 Output: For each test case, print \\"YES\\" if the array can be rearranged to form an arithmetic progression, otherwise print \\"NO\\". SAMPLE INPUT: 2 4 3 6 9 12 4 1 3 4 7 SAMPLE OUTPUT: YES NO","solution":"def can_form_arithmetic_progression(arr): Determine if the array can be rearranged to form an arithmetic progression. arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != diff: return \\"NO\\" return \\"YES\\" def arithmetic_progression_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] result = can_form_arithmetic_progression(arr) results.append(result) return results"},{"question":"Create a function that calculates the experience required to reach the next level in a role-playing game. The function will take the current level and the base experience required to reach level 1. Every level requires progressively more experience than the last, with the increase determined by a constant factor. Assume the following: - The experience required to reach level 1 from level 0 is always the base experience given. - Each subsequent level requires 1.5 times the experience required to reach the previous level. Round up any fractions to the nearest integer. The function should return the experience required to reach the next level. Use the following function signature: ```python def experience_for_next_level(current_level, base_experience): # your code here ``` # Examples: ```python experience_for_next_level(0, 100) == 100 experience_for_next_level(1, 100) == 150 experience_for_next_level(2, 100) == 225 experience_for_next_level(3, 100) == 338 experience_for_next_level(4, 100) == 507 ```","solution":"import math def experience_for_next_level(current_level, base_experience): Calculates the experience required to reach the next level in a role-playing game. Parameters: - current_level (int): The current level of the player. - base_experience (int): The base experience required to reach level 1 from level 0. Returns: - int: The experience required to reach the next level. experience = base_experience for _ in range(current_level): experience = math.ceil(experience * 1.5) return experience"},{"question":"You are building a ticket reservation system for a cinema hall. Each reservation request is represented by an array reservation[i] = [s[i], e[i], p[i]] where \'s[i]\' is the starting seat number, \'e[i]\' is the ending seat number and \'p[i]\' is the priority of the reservation. The cinema hall has m seats labeled from 1 to m, and some of the seats might already be reserved. You are given an array \'seats\' of size m where seats[j] is true if the j-th seat (1-indexed) is already reserved, and false otherwise. You need to process each reservation in the order provided. If two reservations have overlapping seat numbers, the reservation with the higher priority value should be honored. If two reservations have the same priority, honor the reservation that comes first in the list. Return the final status of all seats in the cinema hall. Example 1: Input: seats = [false, false, true, false, false] reservations = [[1, 3, 1], [3, 5, 2], [2, 4, 3], [1, 2, 2]] Output: [true, true, true, true, true] Explanation: - The first reservation [1, 3, 1] cannot be fully honored because seat 3 is already reserved. - The second reservation [3, 5, 2] can reserve seats 4 and 5 as seat 3 is already taken. - The third reservation [2, 4, 3] can override reservation [1, 3, 1] for seats 2 and 3 because it has a higher priority. - The fourth reservation [1, 2, 2] can override reservation [1, 3, 1] for seat 1 as it has a higher priority, but seat 2 is already taken by the third reservation. Example 2: Input: seats = [false, false, false, false, false] reservations = [[1, 2, 1], [2, 3, 1], [3, 4, 2]] Output: [true, true, true, true, false] Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function reserveSeats() that takes two parameters: an array \'seats\' of size m and a 2D array \'reservations\', and returns the updated \'seats\' array after processing all reservations. Expected Time Complexity: O(R + M*log(M)), where R is the number of reservations and M is the number of seats. Expected Auxiliary Space: O(M). Constraints: 1 ≤ m ≤ 10^5 1 ≤ len(reservations) ≤ 10^5 1 ≤ s[i], e[i] ≤ m 1 ≤ p[i] ≤ 10^9","solution":"def reserveSeats(seats, reservations): Update the seats based on the reservation list, honoring higher priority reservations. Args: seats (list of bool): Initial seat status of size m, with True if already reserved. reservations (list of lists): Each reservation is represented by [s, e, p] where s is the starting seat number, e is the ending seat number, p is the priority of the reservation. Returns: list of bool: The updated seat status after handling all reservations. from heapq import heappush, heappop n = len(seats) # Create a list to keep track of the reservations res_list = [] for i, (s, e, p) in enumerate(reservations): heappush(res_list, (-p, i, s, e)) while res_list: _, idx, s, e = heappop(res_list) for i in range(s-1, e): if not seats[i]: seats[i] = True return seats"},{"question":"You are tasked with building a secure messaging app. One of the key features is to be able to detect and handle duplicated messages, which can occur due to network issues. Consider the problem of receiving and stitching together multiple parts of messages in real-time. Each message consists of multiple segments, each identified by an index and a unique message identifier. Given m unique message identifiers, each containing s segments, your task is to determine which messages have all their segments received and are complete, and which messages are still missing some segments. A message is considered complete only if all its segments have been received exactly once. Each segment is a tuple consisting of a message identifier, a segment index, and the segment content. It is guaranteed that for each identifier, all segments have unique indices from 0 to s-1. ------------------------------------------------ -----Input----- The input consists of multiple lines. The first line contains two integers m (the number of unique messages) and s (the number of segments per message) (1 leq m, s leq 10^5). The next n lines contain message segments in the format of three values: string msg_id (unique identifier of the message), integer index (index of the segment), and string content (content of that segment). The total number of segments n is guaranteed to be at most m times s. The segments can be in any order and can contain duplicates. -----Output----- For each unique message identifier, display if the message is \\"Complete\\" or \\"Incomplete\\" based on whether all unique segments of the message have been received. -----Examples----- Sample Input: 3 4 msg1 0 Hello msg1 1 World msg1 2 This msg1 3 is msg2 0 another msg2 1 message msg2 2 with msg2 3 content msg2 0 another msg3 0 yet msg3 1 another msg3 2 attempt Sample Output: msg1 Complete msg2 Complete msg3 Incomplete Explanation: - msg1 has all its 4 segments (0 to 3) present with no duplicates. - msg2 has all its 4 segments (0 to 3) present, even though segment index 0 appears twice, it still meets the criteria for completeness. - msg3 is missing segment 3. Good luck!","solution":"def check_message_segments(m, s, segments): from collections import defaultdict messages = defaultdict(set) for msg_id, index, content in segments: messages[msg_id].add(int(index)) results = {} for msg_id in messages: if len(messages[msg_id]) == s: results[msg_id] = \\"Complete\\" else: results[msg_id] = \\"Incomplete\\" return results"},{"question":"You are given a string s consisting of m lowercase English letters. Your task is to calculate the number of distinct palindromic substrings of s. A string is called a palindrome if it reads the same backward as forward. A substring is any contiguous sequence of characters within a string. To clarify, if s = \\"ababa\\", the distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\" (counting each one only once). -----Input----- The first and only line contains the string s (1 le m le 2 cdot 10^5) consisting of lowercase English letters. -----Output----- Print one integer — the number of distinct palindromic substrings of s. -----Examples----- Input ababa Output 5 Input aaaa Output 4 Input abc Output 3","solution":"def count_distinct_palindromic_substrings(s): Counts the number of distinct palindromic substrings in the given string s. n = len(s) palindromes_set = set() def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: palindromes_set.add(s[left:right + 1]) left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return len(palindromes_set)"},{"question":"In a recent study of DNA sequences at the molecular biology lab, researchers are trying to determine the longest common subsequence (LCS) between two DNA strands. This information is crucial for comparing genes and understanding evolutionary relationships among species. The sequences are composed only of the characters \'A\', \'C\', \'G\', and \'T\'. -----Task----- Given two DNA sequences, find the length of their longest common subsequence. -----Input----- The first line of input contains an integer T, the number of test cases (1 leq T leq 100). Each test case consists of two lines, each containing a DNA sequence of length up to 1000 characters. -----Output----- For each test case, output one line containing the length of the longest common subsequence of the two DNA sequences. -----Examples----- Sample Input: 2 ACCGGTCGAGTGCGCGGAAGCCGGCCGAA GTCGTTCGGAATGCCGTTGCTCTGTAAA AGGTAB GXTXAYB Sample Output: 20 4","solution":"def longest_common_subsequence(X, Y): m = len(X) n = len(Y) # Create a table to store lengths of longest common subsequence. L = [[0] * (n + 1) for i in range(m + 1)] # Build the L[m+1][n+1] in bottom up fashion for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) # L[m][n] contains the length of the longest common subsequence return L[m][n] def process_lcs_cases(cases): results = [] for X, Y in cases: results.append(longest_common_subsequence(X, Y)) return results"},{"question":"You are given an array of integers. Your task is to determine if there exists a non-empty subsequence such that the sum of the subsequence is odd. If such a subsequence exists, return \\"YES\\", otherwise return \\"NO\\". Example: Given A = [1, 2, 3, 4, 5], one possible subsequence with an odd sum is [1, 2, 3] which sums up to 6 and is not odd. But, another possible subsequence with an odd sum is [1, 4, 5, 2] which sums up to 7 and is odd and hence the answer is \\"YES\\". -----Input:----- - The first line contains T, the number of test cases. - For each test case, the first line contains an integer N, the length of the array. - The second line contains N integers A_1, A_2, ldots, A_N. -----Output:----- For each test case, print \\"YES\\" if there exists a subsequence with an odd sum, otherwise print \\"NO\\". -----Constraints----- - 1 le T le 100 - 1 le N le 100 - 1 le A_i le 1000 -----Sample Input:----- 2 5 1 2 3 4 5 4 2 4 6 8 -----Sample Output:----- YES NO -----Explanation:----- Test case 1: There exists a subsequence with an odd sum (for example, [1, 4, 5, 2]). Test case 2: There does not exist any subsequence with an odd sum because all the elements are even.","solution":"def is_odd_sum_possible(arr): Determines if there is a subsequence with an odd sum in the given array. Returns \\"YES\\" if such a subsequence exists, otherwise returns \\"NO\\". # Check if there is at least one odd number in the array for num in arr: if num % 2 == 1: return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for case in test_cases: N, A = case results.append(is_odd_sum_possible(A)) return results"},{"question":"Rescue the prisoners! You are the leader of a team assigned to rescue prisoners from several cells in a dungeon. The dungeon consists of `n` cells arranged in a straight line, and each cell can contain any number of prisoners, but some cells might be empty. You have to select a range of consecutive cells to enter and empty those cells, thus rescuing all the prisoners in the chosen range. The challenge you face is to find the range of cells that maximizes the number of prisoners rescued while minimizing the number of cells you need to traverse. You are given an array of integers representing the number of prisoners in each cell. Determine the maximum number of prisoners that can be rescued and the minimum number of cells that need to be traversed to achieve this. -----Input----- The first line contains one integer `n` (1 ≤ n ≤ 10^5) — the number of cells in the dungeon. The second line contains `n` space-separated integers P_1, P_2, ..., P_{n} (0 ≤ P_{i} ≤ 10^3), where P_{i} is the number of prisoners in the i-th cell. -----Output----- Print two integers separated by a space: the maximum number of prisoners that can be rescued and the minimum number of cells that need to be traversed to achieve this. -----Examples----- Input 7 1 2 3 4 5 6 7 Output 28 7 Input 5 0 0 0 0 0 Output 0 1 Input 10 5 7 2 4 0 3 1 0 5 8 Output 27 10 -----Note----- In the first example, rescuing all prisoners from all cells maximizes the number of rescued prisoners. In the second example, since all cells are empty, the minimum number of cells to traverse is 1, even though no prisoners are rescued. In the third example, rescuing all the prisoners from all cells is the best option, so you need to traverse all cells.","solution":"def max_prisoners_rescued(n, prisoners): Determines the maximum number of prisoners that can be rescued and the minimum number of cells that need to be traversed to achieve this. Parameters: n (int): Number of cells in the dungeon. prisoners (list): List containing the number of prisoners in each cell. Returns: tuple: A tuple containing two integers: the maximum number of prisoners that can be rescued and the minimum number of cells that need to be traversed to achieve this. max_sum = sum(prisoners) min_cells = n return max_sum, min_cells"},{"question":"You are given an array of n integers. You need to perform q queries on the array. Each query can be of two types: 1. Increase the value of an element at a specific position by a given integer. 2. Find the sum of a subarray defined by a range of indices. Your task is to efficiently execute the queries and output the results of the sum queries. -----Input----- The first line contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries respectively. The second line contains n integers representing the initial array a (-10^9 le a[i] le 10^9). The next q lines contain queries. Each query is one of the following: - \\"1 x y\\" — Increase the value of the element at position x by y (1 le x le n, -10^9 le y le 10^9). - \\"2 l r\\" — Find the sum of the elements from index l to r inclusive (1 le l le r le n). -----Output----- For each sum query, print the result on a new line. -----Examples----- Input 5 3 1 2 3 4 5 2 1 3 1 2 2 2 2 5 Output 6 16 -----Note----- In the given example: - The initial array is a = [1,2,3,4,5]. - The first query asks for the sum of elements from index 1 to 3, which is 1 + 2 + 3 = 6. - The second query increases the value of the element at position 2 by 2, updating the array to a = [1,4,3,4,5]. - The third query asks for the sum of elements from index 2 to 5, which is 4 + 3 + 4 + 5 = 16.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, pos, value): pos += self.n self.tree[pos] += value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): left += self.n right += self.n + 1 result = 0 while left < right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 1: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_queries(n, q, array, queries): st = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, x, y = query st.update(x-1, y) elif query[0] == 2: _, l, r = query results.append(st.query(l-1, r-1)) return results"},{"question":"Emma is learning about arrays in her computer science class. She has been given an array of integers and she needs to find the length of the longest subarray which has at least one positive integer and one negative integer. Input Format: T, the number of test cases. Following T lines contain: An integer N, the size of the array. N integers which are the elements of the array. Output Format: T lines indicating the length of the longest subarray that contains at least one positive and one negative integer. If no such subarray exists, output 0. Constraints: 1 ≤ T ≤ 500 1 ≤ N ≤ 100 -10^3 ≤ ARRAY ELEMENTS ≤ 10^3 SAMPLE INPUT 3 5 1 2 3 4 5 4 -1 -2 -3 -4 6 1 -1 2 -2 3 -3 SAMPLE OUTPUT 0 0 6","solution":"def longest_subarray_with_positive_and_negative(arr): Returns the length of the longest subarray containing at least one positive and one negative integer. max_length = 0 n = len(arr) for i in range(n): has_positive = False has_negative = False for j in range(i, n): if arr[j] > 0: has_positive = True if arr[j] < 0: has_negative = True if has_positive and has_negative: max_length = max(max_length, j - i + 1) return max_length def process_test_cases(t, test_cases): results = [] for case in test_cases: n = case[0] arr = case[1] results.append(longest_subarray_with_positive_and_negative(arr)) return results"},{"question":"Create a program to simulate the process of serving customers in a café. Customers arrive at different times, place various orders, and spend a certain amount of time at the café. The program should determine the total number of customers served and the total time the café was operational based on the input data. Each customer is represented by three integers: arrival time, service duration, and departure time. The service duration is the time taken to prepare and serve the orders. The departure time is the sum of arrival time and service duration. As customers arrive, they are served in the order of arrival. However, if a customer\'s arrival time is later than the departure time of the previous customer, the café becomes idle until the next customer arrives. Create a program that takes the number of customers and their details, and outputs the total number of customers served and the total time the café was operational. Input The input consists of multiple datasets. Each dataset starts with a single integer, n (1 ≤ n ≤ 100), representing the number of customers. The next n lines each contain three integers: arrival time, service duration, and departure time. The end of the input is indicated by a single line containing a zero. Output For each dataset, output two integers separated by a space: the total number of customers served and the total time the café was operational. Example Input 4 1 3 4 4 2 6 6 1 7 8 2 10 3 5 3 8 2 1 3 6 2 8 0 Output 4 8 3 6","solution":"def simulate_cafe(input_data): results = [] lines = input_data.strip().split(\'n\') index = 0 while index < len(lines): n = int(lines[index]) if n == 0: break index += 1 customers = [] for _ in range(n): arrival, service, departure = map(int, lines[index].split()) customers.append((arrival, service, departure)) index += 1 total_customers = len(customers) total_operational_time = 0 current_time = 0 for arrival, service, departure in customers: if arrival > current_time: current_time = arrival total_operational_time += service current_time = departure results.append(f\\"{total_customers} {total_operational_time}\\") return \'n\'.join(results)"},{"question":"A group of software developers live in a city represented by an N x M grid. Each cell in the grid can be either a house (represented by 1) or an empty land (represented by 0). The developers live in houses scattered throughout the city and want to build a new meeting hall. The meeting hall can only be built on empty land. To maximize attendance, developers want to minimize the total travel distance from all houses to the meeting hall. The distance is calculated using Manhattan Distance, defined as `|r1 - r2| + |c1 - c2|` where (r1, c1) and (r2, c2) are coordinates of two points in the grid. Your task is to determine the optimal location to build the meeting hall on empty land, such that the total travel distance is minimized. If there are multiple empty lands that result in the same minimal travel distance, any of those can be chosen. If it\'s not possible to build the meeting hall (i.e., there is no empty land), return -1. -----Input:----- - The first line contains two integers N and M which denotes the number of rows and columns of the city grid respectively. - The next N lines each contain M integers, representing the city grid. Each integer is either 0 (empty land) or 1 (house). -----Output:----- - Print the minimal sum of travel distances to the meeting hall. If no empty land is available, print -1. -----Constraints:----- - 1 leq N, M leq 100 - The number of houses will not exceed 10^4 -----Sample Input:----- 3 3 1 0 1 0 0 0 1 0 1 -----Sample Output:----- 8 -----Explanation:----- The city grid is: 1 0 1 0 0 0 1 0 1 The optimal location to build the meeting hall is at (1, 1): - Distance from the house at (0, 0) to (1, 1) is 2. - Distance from the house at (0, 2) to (1, 1) is 2. - Distance from the house at (2, 0) to (1, 1) is 2. - Distance from the house at (2, 2) to (1, 1) is 2. Total travel distance = 8.","solution":"def min_total_distance(n, m, grid): def bfs(start_r, start_c): distances = [[-1 for _ in range(m)] for _ in range(n)] queue = [(start_r, start_c, 0)] while queue: r, c, dist = queue.pop(0) if 0 <= r < n and 0 <= c < m and distances[r][c] == -1: distances[r][c] = dist queue.extend([(r + 1, c, dist + 1), (r - 1, c, dist + 1), (r, c + 1, dist + 1), (r, c - 1, dist + 1)]) return distances houses = [(r, c) for r in range(n) for c in range(m) if grid[r][c] == 1] empty_lands = [(r, c) for r in range(n) for c in range(m) if grid[r][c] == 0] if not empty_lands: return -1 min_distance_sum = float(\'inf\') for r, c in empty_lands: total_distance = 0 distances = bfs(r, c) for hr, hc in houses: if distances[hr][hc] == -1: total_distance = float(\'inf\') break total_distance += distances[hr][hc] min_distance_sum = min(min_distance_sum, total_distance) return min_distance_sum"},{"question":"Given a matrix `M` of size `n x m` filled with distinct integers, you need to find the position (row and column indices) of the integer `k` in the matrix. If `k` is present in the matrix, return a pair of integers representing the row and column indices (starting from 0). If `k` is not present, return `-1, -1`. Example 1: Input: n = 3, m = 3 M = [ [10, 20, 30], [40, 50, 60], [70, 80, 90] ] k = 50 Output: 1, 1 Explanation: Element 50 is found at index (1, 1). Example 2: Input: n = 2, m = 3 M = [ [3, 8, 7], [6, 5, 9] ] k = 1 Output: -1, -1 Explanation: Element 1 is not found in the matrix. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findElement` which takes an integer n, an integer m, a 2D list M, and an integer k as inputs and returns a pair of integers indicating the position of the element k. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n, m ≤ 1000 1 ≤ M[i][j], k ≤ 10^6","solution":"def findElement(n, m, M, k): Finds the position (row and column indices) of the integer `k` in the matrix `M`. Parameters: n (int): Number of rows in the matrix. m (int): Number of columns in the matrix. M (list of list of int): The matrix filled with distinct integers. k (int): The integer to find in the matrix. Returns: tuple: A pair of integers representing the row and column indices (starting from 0) or (-1, -1) if `k` is not present. for i in range(n): for j in range(m): if M[i][j] == k: return (i, j) return (-1, -1)"},{"question":"Transport Planners You are tasked with developing a plan to transport goods across n cities using m trucks, under certain conditions to minimize logistical costs and time. In this task, the number of cities, n, and the number of trucks, m, are given as input. Each truck should be assigned an equal number of cities to visit. However, to ensure optimal use of resources, the number of trucks must be the highest possible under these constraints. Input First line contains n and m, two integers. n lies in 1 to 10^9. m lies in 1 to 10^9 Output Number of cities each truck will visit Sample Input 15000 25000 Sample Output 3 Explanation Here, the largest number of cities each truck can visit is 3. Therefore, the output is 3. Sample Input 50000 120000 Sample Output 25","solution":"def cities_per_truck(n, m): Calculate the number of cities each truck will visit. Args: n (int): Number of cities. m (int): Number of trucks. Returns: int: Number of cities each truck will visit. if m > n: return 1 return n // m"},{"question":"You are given an array of n integers and you need to check if there exists a subarray such that the sum of its elements is equal to zero. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^5). Description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 10^4) — the size of the array. The next line of each test case contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4). It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, on a new line output \\"YES\\" if there exists a subarray with sum equal to zero, and \\"NO\\" otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input 3 5 4 2 -3 1 6 4 1 4 -2 -2 3 1 4 5 Output YES YES NO -----Note----- In test case 1, the subarray [4, 2, -3] has a sum equal to 0. In test case 2, the subarray [4, -2, -2] has a sum equal to 0. In test case 3, there is no subarray with sum equal to 0.","solution":"def has_zero_sum_subarray(arr): Checks if there exists a subarray such that the sum of its elements is equal to zero. cumulative_sum = 0 seen_sums = set() for num in arr: cumulative_sum += num if cumulative_sum == 0 or cumulative_sum in seen_sums: return \\"YES\\" seen_sums.add(cumulative_sum) return \\"NO\\" def process_test_cases(input_data): Processes multiple test cases and returns the results for each. results = [] index = 0 t = int(input_data[index]) index += 1 for _ in range(t): n = int(input_data[index]) index += 1 array = list(map(int, input_data[index].split())) index += 1 result = has_zero_sum_subarray(array) results.append(result) return results"},{"question":"In a city, there are several interconnected neighborhoods. Each neighborhood has several one-way roads connecting it to other neighborhoods. The mayor of the city wants to determine if it\'s possible to travel between any two neighborhoods using these one-way roads. You are given a description of the neighborhoods and the one-way roads. Each neighborhood is represented by a node in a directed graph, and each one-way road is represented by a directed edge in that graph. Your task is to write a program that determines whether it is possible to travel from any neighborhood to any other neighborhood (i.e., the directed graph is strongly connected). Input The input is a sequence of datasets. Each dataset is formatted as follows: N M u1 v1 u2 v2 ... uM vM The first line contains two integers N (2 ≤ N ≤ 1000) and M (1 ≤ M ≤ 5000), which are the number of neighborhoods and the number of one-way roads, respectively. The next M lines each contain two integers ui and vi (1 ≤ ui, vi ≤ N), indicating a one-way road from neighborhood ui to neighborhood vi. The end of the input is indicated by a line containing the numbers \\"0 0\\". Output For each dataset, output \\"YES\\" if it is possible to travel between any two neighborhoods; otherwise, output \\"NO\\". Each dataset\'s result should be printed on a new line. Example Input 4 5 1 2 2 3 3 1 1 4 4 3 3 2 1 2 0 0 Output YES NO","solution":"def is_strongly_connected(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) # Function to perform BFS def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbour in graph[node]: if neighbour not in visited: queue.append(neighbour) return visited # Check if all nodes are reachable from node 1 in original graph visited_from_first = bfs(1, graph) # Check if all nodes are reachable from node 1 in reversed graph visited_from_first_reversed = bfs(1, reverse_graph) if len(visited_from_first) == n and len(visited_from_first_reversed) == n: return \\"YES\\" else: return \\"NO\\" def process_input(input_data): datasets = input_data.strip().split(\\"n\\") result = [] index = 0 while index < len(datasets): n, m = map(int, datasets[index].split()) if n == 0 and m == 0: break edges = [] for i in range(1, m + 1): u, v = map(int, datasets[index + i].split()) edges.append((u, v)) result.append(is_strongly_connected(n, m, edges)) index += m + 1 return result"},{"question":"In a bustling city, there are N intersections and M roads connecting them. Each road connects two distinct intersections, possibly allowing bidirectional travel. Due to frequent repairs, certain roads may become temporarily inaccessible. The city\'s mayor needs to know if travel is possible between two given intersections through any available route, considering the currently accessible roads. Can you help the mayor by determining whether travel is possible between pairs of intersections? -----Constraints----- - N is an integer between 2 and 300 (inclusive). - M is an integer between 1 and 60,000 (inclusive). - Q is an integer between 1 and 100,000 (inclusive). - 1 leq u_i, v_i leq N (1 leq i leq M) - 1 leq a_i, b_i leq N (1 leq i leq Q) -----Input----- Input is given from Standard Input in the following format: N M Q u_1 v_1 u_2 v_2 : u_M v_M a_1 b_1 a_2 b_2 : a_Q b_Q -----Output----- Print Q lines. The i-th line should contain \\"yes\\" if there is a valid route (direct or indirect) between intersection a_i and intersection b_i, and \\"no\\" otherwise. -----Sample Input----- 5 4 3 1 2 2 3 3 4 4 5 1 5 2 4 1 3 -----Sample Output----- yes yes yes In this case, despite road closures and repairs, it\'s possible to travel between the respective pairs of intersections mentioned in all three queries.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n + 1)) self.rank = [0] * (n + 1) def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def is_travel_possible(n, m, q, roads, queries): uf = UnionFind(n) for u, v in roads: uf.union(u, v) results = [] for a, b in queries: if uf.find(a) == uf.find(b): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Ramu is fascinated by prime numbers lately. He recently learned about prime gaps and decided to write a program to study them. A prime gap is the difference between two successive prime numbers. For example, the prime gap between 7 and 11 is 4. Ramu’s task is to find the smallest prime gap in a given range [L, R] (inclusive). Your task is to help Ramu by designing an algorithm that takes two integers L and R (1 ≤ L ≤ R ≤ 10^6) as input and finds the smallest prime gap in the given range. If there are fewer than two primes in the given range, output -1. Input The first line contains two integers L and R (1 ≤ L ≤ R ≤ 10^6) representing the range. Output Print a single integer representing the smallest prime gap in the range [L, R] or -1 if there are fewer than two primes in the given range. Example Input 10 30 Output 2 Note In the first example, the primes in the range [10, 30] are [11, 13, 17, 19, 23, 29]. The smallest prime gap is between 11 and 13, which is 2. Input 20 22 Output -1 Note In the second example, the only prime in the range [20, 22] is 23, hence there are fewer than two primes, and the output is -1.","solution":"def smallest_prime_gap(L, R): if L <= 1: L = 2 is_prime = [True] * (R + 1) is_prime[0] = is_prime[1] = False for num in range(2, int(R**0.5) + 1): if is_prime[num]: for multiple in range(num * num, R + 1, num): is_prime[multiple] = False primes = [num for num in range(L, R + 1) if is_prime[num]] if len(primes) < 2: return -1 min_gap = float(\'inf\') for i in range(1, len(primes)): min_gap = min(min_gap, primes[i] - primes[i - 1]) return min_gap"},{"question":"Dr. Strange possesses a mystical artifact called the \\"Time Stone\\" that allows him to manipulate time. He usually uses this power to foresee potential outcomes and reverse time to avert any disaster. However, Thanos has developed a counter-device which he uses to disrupt the normal flow of time. Given a simple timeline of events represented by a string `T` consisting of characters \'+\' (indicating positive events) and \'-\' (indicating negative events), Dr. Strange needs to balance these events to make them as neutral as possible before Thanos activates his device. Dr. Strange can perform the following operations: - He can reverse any substring of the timeline and this operation is equivalent to reversing the order of characters in that substring. Define an operation as flipping a substring such that \'+\' becomes \'-\' and vice versa. Dr. Strange aims to make the string balanced, meaning that the total count of \'+\' should equal the total count of \'-\'. Determine the minimum number of operations required to balance the timeline string `T`. If it is impossible to balance the timeline, return `-1`. **Input spec**: - The first line contains an integer, `T`, the number of test cases. - Each of the next `T` lines contains a string `T` consisting of characters \'+\' and \'-\'. **Output spec**: For each test case, print a single integer - the minimum number of operations required to balance the string, or `-1` if it is not possible. **Constraints**: - 1 ≤ `T` ≤ 100 - 1 ≤ length of string `T` ≤ 100,000 **Sample Input:** ``` 3 +-+--+ ++++++ ------- ``` **Sample Output:** ``` 1 -1 -1 ``` **Explanation**: For the first test case, one possible operation is to flip the substring \'---\' in the timeline to get a balanced string \\"+-++-+\\". For the second and third test cases, it is impossible to balance the string since they contain an unequal number of \'+\' and \'-\' characters.","solution":"def min_operations_to_balance(timelines): results = [] for T in timelines: plus_count = T.count(\'+\') minus_count = T.count(\'-\') if plus_count != minus_count: results.append(-1) else: operations = 0 balance = 0 for char in T: if char == \'+\': balance += 1 else: balance -= 1 if balance < 0: operations += 1 balance = 0 results.append(operations) return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') num_cases = int(input_lines[0]) timelines = input_lines[1:num_cases + 1] return timelines def process_output(results): return \\"n\\".join(map(str, results))"},{"question":"You are given two linked lists that represent two non-negative integers. The digits are stored in reverse order, and each of their nodes contain a single digit. Add the two numbers and return it as a new linked list, also in reverse order. Consider the following cases: - One or both of the input linked lists may be empty. - The linked lists may have different lengths. - You may assume the given linked lists and the sum will not exceed 1000 nodes. Write a function `addTwoNumbers` that takes two linked lists as input and returns a linked list. Example: Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8 Explanation: 342 + 465 = 807","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): Adds two numbers represented by linked lists and returns the result as a linked list. dummy_head = ListNode(0) current, carry = dummy_head, 0 while l1 or l2: x = l1.val if l1 else 0 y = l2.val if l2 else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"John is organizing a marathon event at a school. For the event, there are `n` students each with different running abilities measured in energy units. The marathon track has `m` checkpoints, and between each checkpoint, an energy level is associated with the section of the track. John wants to know the maximum energy a student can spend reaching from the first checkpoint to the last checkpoint. Given the number of students `n` and the number of checkpoints `m`, and the initial energy of each student, your task is to find out if there exists at least one student who has enough energy to complete the marathon, spending the maximum energy that can be spent on the track. Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 2 ≤ m ≤ 100) – the number of students and the number of checkpoints. - The second line contains `n` integers – the energy levels of the students. - The next `m-1` lines contain integers which define the energy level required for each section between checkpoints (m-1 integers). Output - Output \\"YES\\" (without quotes), if there exists at least one student with enough energy to complete the marathon track spending the maximum possible energy. - Output \\"NO\\" (without quotes), otherwise. Examples Input 3 4 10 15 20 5 6 8 Output YES Input 2 3 5 7 6 4 Output NO Input 1 2 10 9 Output YES","solution":"def can_complete_marathon(n, m, students_energy, checkpoints_energy): # Calculate the total energy required between checkpoints total_energy_required = sum(checkpoints_energy) # Check if there is at least one student with energy greater than or equal to total_energy_required for energy in students_energy: if energy >= total_energy_required: return \\"YES\\" return \\"NO\\" # Example usage: # n, m = 3, 4 # students_energy = [10, 15, 20] # checkpoints_energy = [5, 6, 8] # print(can_complete_marathon(n, m, students_energy, checkpoints_energy)) # Output: YES"},{"question":"You are given a sequence of integers, where each integer appears exactly twice, except for one integer which appears exactly once. Your task is to write a function that finds the integer which appears only once. The function should have a linear runtime complexity and use only constant extra space. # Example: ``` findUnique([2, 3, 3, 2, 4, 6, 5, 5, 6]); // returns 4 findUnique([1, 2, 1, 3, 2, 5, 5]); // returns 3 findUnique([0, 7, 7, 9, 9]); // returns 0 ``` # Hint: Consider using different bit manipulation techniques to solve this problem optimally.","solution":"def findUnique(arr): Returns the integer that appears only once in the array, where each other integer appears exactly twice. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Farmer John\'s chickens are very systematic in the way they lay eggs. There are a lot of chickens on his farm, and they are arranged in a series of rows. Each chicken in a row lays a certain number of eggs each day. You will be given the number of rows and the number of chickens in each row, followed by the number of eggs each chicken lays daily. Your task is to determine the total number of eggs laid per day on the farm. -----Input----- The first line contains two integers 1 le R, C le 100 denoting the number of rows and the number of chickens per row. This is followed by R lines, each containing C integers, where each integer represents the number of eggs laid by a particular chicken in that row. -----Output----- Output a single integer: the total number of eggs laid per day on the farm. -----Examples----- Sample Input: 2 3 1 2 3 4 5 6 Sample Output: 21","solution":"def total_eggs_per_day(R, C, egg_matrix): This function calculates the total number of eggs laid per day on the farm. :param R: Number of rows :param C: Number of chickens per row :param egg_matrix: List of lists where each list contains the number of eggs laid by each chicken in that row :return: Total number of eggs laid per day total_eggs = 0 for row in egg_matrix: total_eggs += sum(row) return total_eggs # Example # Input: # 2 3 # 1 2 3 # 4 5 6 # Output: 21"},{"question":"Given a list of integers, return a new list where each element is the sum of itself and all the previous elements in the list. ```python running_sum([1, 2, 3, 4]) ==> [1, 3, 6, 10] running_sum([1, 1, 1, 1, 1]) ==> [1, 2, 3, 4, 5] running_sum([3, 1, 4, 1, 5]) ==> [3, 4, 8, 9, 14] ``` Good Luck!","solution":"def running_sum(lst): Given a list of integers, returns a new list where each element is the sum of itself and all the previous elements in the list. result = [] current_sum = 0 for num in lst: current_sum += num result.append(current_sum) return result"},{"question":"# Problem Description # Alice is planning a road trip with her friends and needs your help to determine the optimal way to travel between various destinations. The map of the area consists of towns connected by two-way roads, each with an associated travel time. Additionally, a few roads are designated as highway roads where the speed limit is higher, allowing cars to travel at double the normal rate, effectively halving the travel time for these roads. She wants to find the minimum time required to travel from the starting town to the destination town using the road network efficiently, accounting for the highways. # Input # The input consists of one test case. The first line of input contains three integers ( n ), ( m ), and ( k ) denoting the number of towns ( n ) (( 1 leq n leq 10^4 )), the number of roads ( m ) (( 0 leq m leq 5 times 10^4 )), and the number of highways ( k ) (( 0 leq k leq 10^3 )). The next ( m ) lines describe the roads. Each road is represented by three space-separated integers ( a ), ( b ), and ( t ) (( 0 leq a, b < n ), ( a ne b ), ( 1 leq t leq 10^3 )), which means there is a two-way road between town ( a ) and town ( b ) with a travel time of ( t ) minutes. The next ( k ) lines describe the highways. Each highway is represented by two space-separated integers ( x ) and ( y ) (( 0 leq x, y < n )), indicating the road between town ( x ) and town ( y ) is a highway. All road and highway descriptions are unique. # Output # Output the minimum travel time in minutes required to travel from town 0 to town ( n-1 ). You may assume there is always a path from town 0 to town ( n-1 ). # Sample Input # ``` 5 6 2 0 1 10 0 2 20 1 2 5 1 3 10 2 3 10 3 4 5 0 2 2 3 ``` # Sample Output # ``` 20 ``` # Explanation # There are five towns and six roads. The highways are the roads between towns 0 and 2, and towns 2 and 3. The optimal path from town 0 to town 4 uses these highways to halve the travel time for those segments, resulting in the path: 0 -> 2 -> 3 -> 4, with a total travel time of 10 + 5 + 5 = 20 minutes.","solution":"import heapq def find_min_travel_time(n, m, k, roads, highways): import heapq # Adjacency list for graph graph = [[] for _ in range(n)] # HashMap for highways highway_set = set() for x, y in highways: highway_set.add((x, y)) highway_set.add((y, x)) # since it\'s bidirectional # Build the graph with appropriate weights for a, b, t in roads: if (a, b) in highway_set: graph[a].append((b, t / 2)) graph[b].append((a, t / 2)) else: graph[a].append((b, t)) graph[b].append((a, t)) # Dijkstra\'s algorithm for shortest path def dijkstra(start, end): min_heap = [(0, start)] dist = [float(\'inf\')] * n dist[start] = 0 while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(min_heap, (distance, v)) return dist[end] return dijkstra(0, n - 1)"},{"question":"Daisy and Gatsby are playing a card game. Initially, Daisy has a deck of n cards, each card has an integer value written on it. The game consists of Daisy and Gatsby taking turns. Daisy always starts the game with the first move. In each turn, the current player must choose any subsequence of cards from the deck (including the possibility of choosing a single card) and sum their values. The player adds this sum to their score and then removes these cards from the deck. After Daisy and Gatsby have taken all the possible turns (when the deck is empty), the player with the maximum score wins the game. If both players have the same score, the game ends in a tie. Determine the maximum possible score Daisy can achieve if both players play optimally. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2·10^5) representing the number of cards in the deck. The second line contains n integers c_1, c_2, ..., c_{n} (1 ≤ c_{i} ≤ 10^6) — the values written on the cards. -----Output----- Print a single integer — the maximum possible score Daisy can achieve, assuming both players play optimally. -----Examples----- Input 4 3 7 2 9 Output 18 Input 2 1 2 Output 2 -----Note----- Consider the following situation in the first example. Daisy can choose the subsequence [3, 7, 2, 9] and sum their values, adding 21 to her score. Then she removes these cards from the deck and passes the turn to Gatsby, but since the deck is empty, the game ends with Daisy\'s score being 21. Note that in this problem, the optimal move is to sum up all the possible values in one turn. Hence, the example might seem trivial due to there being only one optimal strategy. However, it aligns with ensuring the maximum possible score for Daisy.","solution":"def max_score_daisy(n, card_values): Returns the maximum possible score Daisy can achieve. # Daisy will take all cards in one turn because taking all cards gives her maximum score return sum(card_values)"},{"question":"Write a function named `sumEvenNumbers` which takes in a single parameter, `arr`, which is an array of integers. The function should return the sum of all even numbers in the array. If there are no even numbers, the function should return 0. Examples: ```python sumEvenNumbers([1, 2, 3, 4, 5]) -> 6 sumEvenNumbers([2, 4, 6, 8]) -> 20 sumEvenNumbers([1, 3, 5, 7]) -> 0 sumEvenNumbers([]) -> 0 ```","solution":"def sumEvenNumbers(arr): Returns the sum of all even numbers in the array. If there are no even numbers, returns 0. return sum(x for x in arr if x % 2 == 0)"},{"question":"Alice is passionate about working with strings and recently came across a unique string transformation algorithm. Given a string s, the algorithm allows her to perform the following operation any number of times: 1. Choose a substring consisting of one or more consecutive identical characters (e.g., \\"aaa\\" or \\"bb\\"). 2. Replace it with a single occurrence of the character in the substring (e.g., replace \\"aaa\\" with \\"a\\" or \\"bb\\" with \\"b\\"). Alice wants to transform the given string s using the above operation such that the length of the resulting string is minimized. Your task is to help Alice determine the minimal length of the string after performing the operations optimally. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^5) — the string Alice wants to transform. Output For each test case, output a single integer — the minimal length of the string after performing the operations optimally. Example Input 3 abbbc aaaba caaaabbbbc Output 3 3 4 Note In the first example, after performing the operations optimally, the string \\"abbbc\\" can be transformed to \\"abc\\", which has length 3. In the second example, \\"aaaba\\" can be transformed to \\"aba\\", which has length 3. In the third example, \\"caaaabbbbc\\" can be transformed to \\"cabc\\", which has length 4.","solution":"def minimized_length_after_transformations(t, strings): results = [] for s in strings: if not s: results.append(0) continue minimized_length = 1 for i in range(1, len(s)): if s[i] != s[i-1]: minimized_length += 1 results.append(minimized_length) return results"},{"question":"# Adventurer\'s Gold Hunt In a faraway land, an adventurer named Aria is on a quest to collect as much gold as possible from a series of connected caves. Each cave has a certain amount of gold and is connected to one or more other caves. Aria must decide the optimal path to collect the maximum amount of gold, starting from the first cave and moving to subsequent connected caves. Each cave can be represented by a node in a graph where edges between nodes represent possible paths Aria can take. Aria can only move from one cave to another if there is a direct path (edge) between them. The amount of gold in each cave is pre-determined and Aria will collect all the gold of each cave she visits. Given the number of caves and their connections along with the amount of gold in each cave, your task is to find the maximum amount of gold that Aria can collect. # Input - The first line contains an integer `n` (1 leq n leq 100), the number of caves. - The second line contains `n` space-separated integers, where the i-th integer represents the amount of gold `A[i]` in the i-th cave (0 leq A[i] leq 1000). - The next `n` lines contain `n` space-separated integers, forming the adjacency matrix `G`. If `G[i][j]` equals 1, it means there is a direct path from cave `i` to cave `j`; otherwise, there is no direct path. # Output - Output a single integer, the maximum amount of gold that Aria can collect starting from the first cave. # Example Input ``` 4 10 20 30 40 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 ``` Output ``` 100 ``` # Explanation Aria starts from cave 0 with 10 gold. She can move from cave 0 to caves 1 and 2, collecting 20 and 30 gold, respectively. Finally, she moves to cave 3, collecting 40 gold. The total gold collected is 10 + 20 + 30 + 40 = 100.","solution":"def max_gold(n, A, G): def dfs(node, visited): visited[node] = True total_gold = A[node] for adj in range(n): if G[node][adj] == 1 and not visited[adj]: total_gold += dfs(adj, visited) return total_gold visited = [False] * n return dfs(0, visited)"},{"question":"You are given an integer array containing zeros and some non-zero integers. Your task is to rearrange the array so that every zero in the original array is replaced by a unique integer from 1 to the length of the array, without repeating any existing non-zero integers in the array, and maintaining all original non-zero values in their positions. It is guaranteed that the number of zeros in the array will be exactly equal to the count of unused integers from 1 to n. If there are multiple possible solutions, you may output any of them. -----Input----- The first line of the input contains one integer n (1 le n le 10^5) — the size of the array. The second line of the input contains n integers a_1, a_2, dots, a_n (0 le a_i le n), representing the array elements. -----Output----- Print n space-separated integers representing the rearranged array where all zeros are replaced with unique integers, and non-zero values from the original array remain unchanged. -----Examples----- Input 5 0 2 0 0 5 Output 3 2 4 1 5 Input 6 0 6 1 0 0 2 Output 5 6 1 3 4 2 Input 4 3 0 0 1 Output 3 4 2 1 Input 3 0 0 3 Output 1 2 3","solution":"def rearrange_array(n, arr): Rearranges the given array such that each zero is replaced by a unique integer, maintaining the positions of non-zero values. Args: n (int): The size of the array arr (List[int]): The integer array with zeros and non-zero integers Returns: List[int]: The rearranged array # Find the set of all used integers in the array used = set(filter(lambda x: x != 0, arr)) # Calculate the set of all integers from 1 to n all_nums = set(range(1, n + 1)) # Find the unused integers unused = list(all_nums - used) # Sort the unused integers to start using the smallest first unused.sort() # Iterator to replace zeros with unused integers unused_iter = iter(unused) # Reconstruct the array replacing zeros with unused integers result = [next(unused_iter) if x == 0 else x for x in arr] return result"},{"question":"Given a list of strings, determine the number of unique anagram pairs in the list. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example lst = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\"] There are three unique pairs of anagrams: - \\"listen\\" and \\"silent\\" - \\"listen\\" and \\"enlist\\" - \\"silent\\" and \\"enlist\\" The words \\"google\\" and \\"gogole\\" are anagrams of each other. Return 4. Function Description Complete the count_anagram_pairs function below. count_anagram_pairs has the following parameter: list lst: a list of strings Returns int: the number of unique anagram pairs in the list Input Format The first line contains an integer n, the size of the list lst. The second line contains n space-separated strings of the list lst. Constraints 1 leq n leq 10^5 1 leq len(lst_i) leq 100 each string lst[i] will be lowercase alphabetical characters Sample Input STDIN Function ----- -------- 5 lst[] size n = 5 listen silent enlist google gogole Sample Output 4 Explanation There are 4 unique pairs of anagrams in the list: - \\"listen\\" and \\"silent\\" - \\"listen\\" and \\"enlist\\" - \\"silent\\" and \\"enlist\\" - \\"google\\" and \\"gogole\\"","solution":"from collections import defaultdict def count_anagram_pairs(lst): Returns the number of unique anagram pairs in the list. # Dictionary to store sorted strings and their counts anagram_map = defaultdict(int) # Count the occurrences of each sorted string for word in lst: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word] += 1 # Calculate the number of unique anagram pairs anagram_pairs = 0 for count in anagram_map.values(): if count > 1: # If there are n words that are anagrams, we can form # nC2 pairs from them which is (n*(n-1))/2 anagram_pairs += (count * (count - 1)) // 2 return anagram_pairs"},{"question":"A music streaming service wants to create personalized playlists for its users based on their listening history. Given a list of songs each user has listened to and a target user, write a function that generates a recommended playlist for the target user. The playlist should include songs that the target user has not listened to but have been listened to by the majority of the other users. # EXAMPLES ```python generate_playlist(user_songs=[ {\'user\': \'Alice\', \'songs\': [\'song1\', \'song2\', \'song3\']}, {\'user\': \'Bob\', \'songs\': [\'song2\', \'song3\', \'song4\']}, {\'user\': \'Cara\', \'songs\': [\'song1\', \'song4\', \'song5\']} ], target_user=\'Alice\') == [\'song4\', \'song5\'] generate_playlist(user_songs=[ {\'user\': \'Danny\', \'songs\': [\'song6\', \'song7\']}, {\'user\': \'Eve\', \'songs\': [\'song7\', \'song8\']}, {\'user\': \'Finn\', \'songs\': [\'song6\', \'song8\']} ], target_user=\'Danny\') == [\'song8\'] generate_playlist(user_songs=[ {\'user\': \'George\', \'songs\': [\'song9\']}, {\'user\': \'Hana\', \'songs\': [\'song10\']}, {\'user\': \'Ivan\', \'songs\': [\'song11\']} ], target_user=\'George\') == [\'song10\', \'song11\'] ``` # FUNCTION SIGNATURE ```python def generate_playlist(user_songs, target_user): pass ```","solution":"def generate_playlist(user_songs, target_user): Generates a personalized playlist for the target user based on the listening history of other users. Parameters: user_songs (list of dicts): A list where each dictionary contains a \'user\' key and a \'songs\' key, representing the user\'s name and a list of songs they have listened to. target_user (str): The name of the target user for whom the playlist is being generated. Returns: list: A list of recommended songs for the target user. from collections import Counter target_user_songs = set() other_users_songs = [] for user_song in user_songs: if user_song[\'user\'] == target_user: target_user_songs = set(user_song[\'songs\']) else: other_users_songs.extend(user_song[\'songs\']) song_counter = Counter(other_users_songs) recommended_songs = [] for song in song_counter: if song not in target_user_songs: recommended_songs.append(song) # Sort the recommended songs based on their popularity (frequency) recommended_songs.sort(key=lambda x: -song_counter[x]) return recommended_songs"},{"question":"Design a function that calculates the maximum possible sum of a contiguous subarray of a given integer array `a`. The array `a` has `n` elements. Given the constraints: - The length of the array `n` is between `1` and `200,000`. - Each element of the array `a[i]` is an integer such that `-10^9 leq a[i] leq 10^9`. Implement the function to find the maximum sum using an efficient algorithm. -----Input----- The first line contains an integer `n` (1 leq n leq 200,000) — the number of elements in the array. The second line contains `n` integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9). -----Output----- Print a single integer — the maximum sum of a contiguous subarray. -----Examples----- Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 -1 Output -1 Note: - In the first example, the maximum sum of the contiguous subarray is obtained by summing the elements `[4, -1, 2, 1]` which gives `6`. - In the second example, the only element in the array is `-1`, so the maximum sum of the contiguous subarray is `-1`.","solution":"def max_subarray_sum(a): Returns the maximum sum of a contiguous subarray. Utilizes Kadane\'s Algorithm for finding the maximum sum efficiently. max_current = max_global = a[0] for num in a[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a collection of n distinct positive integers. Your task is to determine if you can select exactly k integers from this collection such that the sum of these k integers is a prime number. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input: The first line contains two integers n (1 ≤ n ≤ 50) and k (1 ≤ k ≤ n) — the number of elements in the collection and the number of elements to select, respectively. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the collection. Output: Print \\"YES\\" if you can choose exactly k integers from the collection such that their sum is a prime number, and \\"NO\\" otherwise. Examples: Input: 5 3 2 5 9 13 15 Output: YES Input: 4 2 6 8 10 12 Output: NO Note: In the first example, you can select the numbers 2, 5, and 13. Their sum is 20, which is not a prime. However, another selection such as 2, 5, and 15 gives a sum of 22, which is not prime either, thus requiring further exploration for other combinations. Finally, selecting 2, 5, and 9 yields a sum of 16, which is also not prime; therefore, the correct combinations must be checked. If no combination makes a prime sum, output \\"NO\\". In the second example, no two selections can form a prime number.","solution":"from itertools import combinations from math import isqrt def is_prime(number): if number < 2: return False for i in range(2, isqrt(number) + 1): if number % i == 0: return False return True def can_sum_be_prime(n, k, arr): possible_combinations = combinations(arr, k) for comb in possible_combinations: if is_prime(sum(comb)): return \\"YES\\" return \\"NO\\""},{"question":"Mary loves tiling puzzles. She came up with a new challenge using a grid. Given a positive integer n and a 2 times n grid, she wants to tile the entire grid using exactly n dominoes. Each domino can cover exactly two adjacent cells, either horizontally or vertically. Mary is curious to know the number of ways to tile the 2 times n grid completely using n dominoes. ------ Input ------ The input consists of a single integer n, the length of the grid. ------ Output ------ Output a single integer, the number of ways to tile the 2 times n grid completely using n dominoes. As the result can be large, output the result modulo 10^9 + 7. ------ Constraints ------ 1 ≤ n ≤ 10^6 ------ Sample Input 1 ------ 3 ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ There are 5 ways to tile the 2 times 3 grid using 3 dominoes: 1. Three horizontal dominoes. 2. Two vertical dominoes in the first and second columns, and one horizontal domino in the last two cells. 3. Two vertical dominoes in the last two columns, and one horizontal domino in the first two cells. 4. One horizontal domino in the first two cells, one vertical domino in the second and third rows of the middle column, and one horizontal domino in the last two cells of the first row. 5. One horizontal domino in the last two cells, one vertical domino in the first two rows of the second column, and one horizontal domino in the first two cells of the last row.","solution":"MOD = 10**9 + 7 def tile_2xn(n): if n == 0: return 1 elif n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[n]"},{"question":"You are given a string S containing lowercase alphabet characters and an integer K. You need to find the length of the smallest substring of S such that all the K distinct characters are present in that substring. If there are no substrings with K distinct characters, output -1. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. The description of test cases follows. - Each test case consists of two lines of input. - The first line of each test case contains an integer K. - The second line of each test case contains the string S. ------ Output Format ------ - For each test case, output on a new line the length of the smallest substring with exactly K distinct characters, or -1 if no such substring exists. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 1 ≤ K ≤ 26 - The total length of all strings across all test cases will not exceed 10^6. ------ Subtasks ------ Subtask 1 (20 points): The total length of all strings across all test cases will not exceed 10^3. Subtask 2 (80 points): Original constraints ----- Sample Input 1 ------ 3 3 abaaccb 4 abac 2 abcdef ----- Sample Output 1 ------ 4 -1 2 ----- Explanation 1 ------ Test case 1: The smallest substring of \\"abaaccb\\" that contains exactly 3 distinct characters is \\"baac\\" with length 4. Test case 2: No substring of \\"abac\\" contains exactly 4 distinct characters, so the output is -1. Test case 3: The substring \\"ab\\" of \\"abcdef\\" contains exactly 2 distinct characters with length 2.","solution":"def smallest_substring_with_k_distinct(S, K): if K > len(S): return -1 from collections import defaultdict char_count = defaultdict(int) left = 0 min_len = float(\'inf\') distinct_count = 0 for right in range(len(S)): char_count[S[right]] += 1 if char_count[S[right]] == 1: distinct_count += 1 while distinct_count >= K: if distinct_count == K: min_len = min(min_len, right - left + 1) char_count[S[left]] -= 1 if char_count[S[left]] == 0: distinct_count -= 1 left += 1 return min_len if min_len != float(\'inf\') else -1 def process_test_cases(test_cases): results = [] for k, s in test_cases: results.append(smallest_substring_with_k_distinct(s, k)) return results"},{"question":"You are a software engineer at a logistics company named TransiFly. One of your tasks is to create an efficient system to manage the orders of products in a warehouse. Each order consists of a list of products that must be prepared and shipped together. However, the warehouse can only store up to a certain number of products due to space constraints. Given the list of product orders, determine the minimal number of warehouse restocks required to fulfill all the orders. Each order can only be prepared after the warehouse is restocked with the required products. Note that you can restock the warehouse with any subset of the products, but the constraint is that the total number of different products in the warehouse at any point must not exceed the storage capacity. -----Input----- The first line of input contains two integers P and C (1 leq P leq 1000, 1 leq C leq 100), where P denotes the number of different products and C denotes the maximum storage capacity of the warehouse. The next P lines each start with an integer K (1 leq K leq 100), indicating the number of orders to be processed for that product. -----Output----- Output a single integer, the minimum number of restocks required to fulfill all orders. -----Examples----- Sample Input: 3 2 2 1 1 Sample Output: 2 Explanation: - First, the warehouse can be stocked with Product 1 and Product 2, fulfilling two orders. - Then, restock the warehouse with Product 3 to fulfill the remaining order.","solution":"def minimal_restocks(P, C, orders): Determine the minimal number of warehouse restocks required to fulfill all orders. Parameters: P (int): The number of different products. C (int): The maximum storage capacity of the warehouse. orders (list): A list of integers where each integer denotes the number of orders for a product. Returns: int: The minimal number of restocks required. orders.sort(reverse=True) # Sort orders in decreasing order of their size restocks = 0 current_storage = 0 for order in orders: if current_storage + order <= C: current_storage += order else: restocks += 1 current_storage = order # Current restock only contains the current order if current_storage > 0: restocks += 1 # Count the last restock if there are remaining products return restocks"},{"question":"Sara is participating in a coding competition where she needs to solve a problem related to arranging sequences. The task involves arranging multiple subsequences into a single sequence while following specific constraints. The problem setup is as follows: There are N subsequences, each containing a unique set of numbers. Sara\'s task is to merge these subsequences into a single sequence such that the relative order of the numbers in each subsequence is preserved. However, the merged sequence must also conform to certain query conditions. A query is defined by two numbers, (a, b). For the merged sequence to satisfy the query, the number \'a\' must appear before \'b\' in the final merged sequence. You are given the number of queries and subsequences, and you need to determine if it is possible to create a merged sequence that satisfies all the given queries. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains an integer N denoting the number of subsequences. Each of the next N lines contains the subsequences. Each subsequence starts with an integer A_i (the length of the subsequence), followed by A_i distinct integers. The next line contains an integer Q denoting the number of queries. Each of the following Q lines contains two integers, a and b denoting the constraint that \'a\' must appear before \'b\' in the final merged sequence. ------ Output ------ For each test case, output a single line containing \\"Yes\\" if it is possible to merge the subsequences to satisfy all the queries and \\"No\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ A_i ≤ 1000 1 ≤ Q ≤ 1000 1 ≤ a, b ≤ 1000 The total number of integers in all subsequences across all test cases does not exceed 10^6 ------ Example ------ Input: 2 2 3 1 2 3 3 4 5 6 2 1 5 2 4 3 2 1 2 2 3 4 2 5 6 4 1 3 2 4 5 1 3 6 Output: Yes No ------ Explanation ------ Example case 1. The subsequences are (1, 2, 3) and (4, 5, 6). We can merge them into the sequence (1, 2, 3, 4, 5, 6). The queries (1, 5) and (2, 4) are satisfied as 1 appears before 5 and 2 appears before 4. Hence, the output is \\"Yes\\". Example case 2. The subsequences are (1, 2), (3, 4), and (5, 6). We need to find an arrangement satisfying all the queries: (1 before 3), (2 before 4), (5 before 1), and (3 before 6). No valid sequence can satisfy all these conditions simultaneously. Thus, the output is \\"No\\".","solution":"def can_merge_subsequences(T, test_cases): def can_satisfy_queries(ordering, queries): position = {val: idx for idx, val in enumerate(ordering)} return all(position[a] < position[b] for a, b in queries) results = [] for case in test_cases: N, subsequences, Q, queries = case merged_sequence = [] for subseq in subsequences: merged_sequence.extend(subseq) if can_satisfy_queries(merged_sequence, queries): results.append(\\"Yes\\") else: results.append(\\"No\\") return results def parse_input(raw_input): parts = raw_input.strip().split(\'n\') T = int(parts.pop(0)) test_cases = [] for _ in range(T): N = int(parts.pop(0)) subsequences = [] for _ in range(N): line = list(map(int, parts.pop(0).split())) subsequences.append(line[1:]) Q = int(parts.pop(0)) queries = [] for _ in range(Q): query = tuple(map(int, parts.pop(0).split())) queries.append(query) test_cases.append((N, subsequences, Q, queries)) return T, test_cases def solve_problem(raw_input): T, test_cases = parse_input(raw_input) return can_merge_subsequences(T, test_cases)"},{"question":"Given two sorted arrays, write a function that returns a new array containing elements that occur in both of the input arrays. The elements in the resulting array must be unique and should be in the same order as they appear in both input arrays. # Constraints - The input arrays can have different lengths. - Elements of the input arrays are integers and may include negative numbers. - The resulting array must be sorted in ascending order. - You must achieve this in O(n + m) time complexity, where `n` and `m` are the lengths of the two input arrays. - The resulting array should not contain duplicates. # Input The function will receive two input parameters: 1. `arr1`: A list of integers representing the first sorted array. 2. `arr2`: A list of integers representing the second sorted array. # Output The function should return a list of integers which are the common elements of `arr1` and `arr2`, sorted in ascending order and without duplicates. # Example ```python common_elements([1, 2, 4, 5, 6], [2, 3, 5, 7]) ``` Expected output: ```python [2, 5] ``` ```python common_elements([1, 1, 1, 2, 2, 3], [2, 2, 3, 4]) ``` Expected output: ```python [2, 3] ``` # Note In the first example, the elements 2 and 5 are common in both arrays. In the second example, although the number 1 appears multiple times in the first array, it\'s not present in the second array, while the numbers 2 and 3 appear in both, making the result `[2, 3]`.","solution":"def common_elements(arr1, arr2): Returns a list of unique common elements in the input sorted arrays. Parameters: arr1 (list of int): The first sorted array. arr2 (list of int): The second sorted array. Returns: list of int: A list of unique common elements, sorted in ascending order. i, j = 0, 0 common = set() result = [] while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: if arr1[i] not in common: common.add(arr1[i]) result.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return result"},{"question":"A website allows users to rate articles using scores from 1 to 5. To identify the article with the highest rating, we need to consider not only the average score but also the number of users who have rated it. An article with a higher number of ratings but a slightly lower average should be considered better than an article with a perfect score but very few ratings. Given two arrays, R and S, each of length M, where R[i] represents the total rating score (sum of all user ratings) of the i-th article, and S[i] represents the number of users who have rated the i-th article, determine which article has the highest weighted rating. An article\'s weighted rating is calculated as: [ text{Weighted Rating} = left( frac{R[i]}{S[i]} right) + log(S[i] + 1) ] If multiple articles have the same weighted rating, the article appearing first in the list is chosen. ------ Input Format ------ - The first line of input will contain a single integer K, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains a single integer M, the number of articles. - The second line of each test case contains M space-separated integers R_{1}, R_{2}, ldots, R_{M} — where R_{i} is the total rating score of the i-th article. - The third line of each test case contains M space-separated integers S_{1}, S_{2}, ldots, S_{M} — where S_{i} is the number of users who have rated the i-th article. ------ Output Format ------ For each test case, output on a new line, an integer in the range 1 to M, denoting the index of the article which has the highest weighted rating among the M articles. ------ Constraints ------ 1 ≤ K ≤ 100 1 ≤ M ≤ 10^{4} 0 ≤ R_{i} ≤ 10^{6} 0 ≤ S_{i} ≤ 10^{4} - It is guaranteed that the sum of M over all test case does not exceed 10^{5}. ------ Sample Input ------ 2 3 100 95 80 20 19 20 2 60 70 9 8 ------ Sample Output ------ 1 2 ------ Explanation ------ Test case 1: - Article 1: Weighted Rating = (100/20) + log(21) = 5 + 3 = 8 - Article 2: Weighted Rating = (95/19) + log(20) ≈ 5 + 2.995 = 7.995 - Article 3: Weighted Rating = (80/20) + log(21) = 4 + 3 = 7 Thus, the first article has the highest weighted rating. Test case 2: - Article 1: Weighted Rating = (60/9) + log(10) ≈ 6.666 + 2.3026 ≈ 8.9686 - Article 2: Weighted Rating = (70/8) + log(9) = 8.75 + 2.1972 = 10.9472 Thus, the second article has the highest weighted rating.","solution":"import math def find_highest_weighted_rating(K, test_cases): results = [] for i in range(K): M = test_cases[i][\'M\'] R = test_cases[i][\'R\'] S = test_cases[i][\'S\'] max_index = 0 max_weighted_rating = -float(\'inf\') for j in range(M): if S[j] == 0: continue weighted_rating = (R[j] / S[j]) + math.log(S[j] + 1) if weighted_rating > max_weighted_rating: max_weighted_rating = weighted_rating max_index = j results.append(max_index + 1) return results"},{"question":"Alex is playing a game with strings. He has a string s of length n which consists of lowercase English letters. Alex challenges you to answer a series of queries. Each query provides two numbers, l and r (1 ≤ l ≤ r ≤ n), and asks you to determine the number of distinct characters in the substring s[l-1...r-1]. Help Alex by writing a program that answers each query efficiently. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), representing the length of the string s and the number of queries, respectively. The second line contains the string s, which consists of lowercase English letters. The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the range for each query. -----Output----- Print q lines — for each query, print the number of distinct characters in the substring s[l-1...r-1]. -----Examples----- Input 7 3 abcbaac 1 3 2 5 1 7 Output 3 3 3","solution":"def distinct_characters_in_substrings(n, q, s, queries): Returns the number of distinct characters in each substring defined by the queries. Parameters: n (int): Length of the string s. q (int): Number of queries. s (str): The string consisting of lowercase English letters. queries (List[Tuple[int, int]]): List of tuples where each tuple has two integers l and r. Returns: List[int]: List of integers where each integer is the number of distinct characters in the substring for each query. result = [] for l, r in queries: substring = s[l-1:r] distinct_characters = len(set(substring)) result.append(distinct_characters) return result"},{"question":"Alice and Bob love playing games, and today they are playing a game called \\"Equalize Array\\". In this game, they are given an array of integers, and their goal is to make all elements in the array equal in the minimum number of moves. In each move, they can either increment or decrement any single element of the array by 1. To determine the winner, you need to find the minimum number of moves required to make all elements in the array equal. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N (the size of the array). - The second line contains N integers (the elements of the array). Output: - For each test case, print the minimum number of moves required to make all elements in the array equal. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ array elements ≤ 10^9 Note: - The output for each test case should be in the format \\"Case x: y\\" where x is the test case number and y is the result. # Example Input: 2 5 1 2 3 4 5 3 2 2 3 Output: Case 1: 6 Case 2: 1 # Explanation: In the first case: One possible sequence of moves is to increment 1 four times, decrement 5 four times, increment 2 two times, and decrement 4 two times. - Make 1 equal to 3 in 2 moves (1 → 2 → 3) - Make 2 equal to 3 in 1 move (2 → 3) - 3 is already 3, so no moves needed - Make 4 equal to 3 in 1 move (4 → 3) - Make 5 equal to 3 in 2 moves (5 → 4 → 3) Total moves = 2 + 1 + 0 + 1 + 2 = 6 In the second case: One possible sequence of moves is to increment 2 one time to make all elements in the array equal to 3. - Make 2 equal to 3 in 1 move (2 → 3) - 2 is already 3, so no moves needed - 3 is already 3, so no moves needed Total moves = 1","solution":"def min_moves_to_equalize(arr): Returns the minimum number of moves required to make all elements in the array equal. Moves can be increments or decrements by 1. median = sorted(arr)[len(arr) // 2] return sum(abs(x - median) for x in arr) def equalize_array(T, test_cases): Takes number of test cases and a list of test cases. Returns a list of strings with the results for each test case in the format \\"Case x: y\\". results = [] for i in range(T): N, arr = test_cases[i] moves = min_moves_to_equalize(arr) results.append(f\\"Case {i + 1}: {moves}\\") return results"},{"question":"Linda enjoys playing with sequences of numbers. Recently, she came across the idea of creating a sequence where the difference between every two consecutive numbers follows a specific pattern: even differences should be followed by odd differences, and vice versa. Given a starting number, the length of the sequence, and a difference value, help Linda create such a sequence. Each term in the sequence is generated by alternating between adding and subtracting the given difference value from the previous term. For example, if the sequence starts with 5, the difference is 3, and Linda wants a sequence of length 4, then the sequence would be: 5, 8, 5, 8. -----Input----- The first line contains a positive integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains an integer x (-10^5 ≤ x ≤ 10^5), the starting number. The third line contains a positive integer d (1 ≤ d ≤ 10^5), the difference value. -----Output----- Print the sequence of n numbers separated by spaces. -----Examples----- Input 4 5 3 Output 5 8 5 8 Input 5 2 1 Output 2 3 2 3 2 Input 3 10 5 Output 10 15 10","solution":"def generate_sequence(n, x, d): Generate a sequence with alternating differences. Parameters: n (int): Length of the sequence. x (int): Starting number. d (int): Difference value. Returns: List[int]: The generated sequence. sequence = [x] for i in range(1, n): if i % 2 != 0: sequence.append(sequence[-1] + d) else: sequence.append(sequence[-1] - d) return sequence # Examples of how to call the function # Example: generate_sequence(4, 5, 3) should return [5, 8, 5, 8]"},{"question":"Jack and Jill are playing a game with an array of positive integers. Jill gives Jack two indices, and Jack needs to find the maximum sum of a subarray that includes those two indices. A subarray is defined as a contiguous portion of the array. Write a function that, given an array of positive integers and two indices, returns the maximum sum of the subarray that includes both indices. SAMPLE INPUT 5 1 2 3 4 5 1 3 SAMPLE OUTPUT 9 Explanation The first line of input contains n, the number of elements in the array. The second line contains the n integers representing the elements of the array. The third line contains two integers representing the two indices, a and b (0-based). In the given sample input, the array is [1, 2, 3, 4, 5] and the indices are 1 (element 2) and 3 (element 4). The maximum sum of a subarray that includes both elements at indices 1 and 3 is the sum of the subarray [2, 3, 4], which is 9.","solution":"def maximum_sum_subarray(arr, index1, index2): Given an array of positive integers and two indices, returns the maximum sum of the subarray that includes both indices. Parameters: arr (list of int): The array of integers. index1 (int): The first index. index2 (int): The second index. Returns: int: The max sum of the subarray that includes both indices. # Ensure index1 is less than index2 for simplicity if index1 > index2: index1, index2 = index2, index1 # Calculate the sum of the subarray between index1 and index2 inclusive subarray_sum = sum(arr[index1:index2 + 1]) return subarray_sum"},{"question":"You are given an array `A` of size `n` consisting of non-negative integers. Your task is to convert this array into a \\"beautiful\\" array. An array is considered beautiful if the absolute difference between any two consecutive elements in the array is less than or equal to `k`. You can perform the following operation any number of times: change any element of the array to any non-negative integer. Find the minimum number of changes required to make the array beautiful. -----Input----- The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains two integers `n` and `k` (1 ≤ n ≤ 1000, 0 ≤ k ≤ 1000). The second line of each test case contains `n` non-negative integers representing the array `A` (0 ≤ A[i] ≤ 10000). -----Output----- For each test case, print a single integer — the minimum number of changes required to make the array beautiful. -----Examples----- Input 3 3 2 1 5 3 4 1 1 2 3 10 5 0 1 1 1 1 1 Output 1 1 0 -----Note----- In the first test case, you can change the second element `5` to `3`, so the array becomes `[1, 3, 3]`. In the second test case, you can change the fourth element `10` to `3`, so the array becomes `[1, 2, 3, 3]`. In the third test case, the array is already beautiful since all the elements are the same and the absolute difference between consecutive elements is `0`, which is less than or equal to `k = 0`. Thus, no changes are needed.","solution":"def min_changes_to_beautiful(t, test_cases): results = [] for i in range(t): n, k, A = test_cases[i] target = A[0] # we can choose any number as initial target changes = 0 for j in range(n - 1): if abs(A[j] - A[j + 1]) > k: changes += 1 A[j + 1] = A[j] + k if A[j] < A[j + 1] else A[j] - k results.append(changes) return results"},{"question":"A game developer is creating a simulation for a cellular automaton. Each cell in the grid can be either alive (1) or dead (0), and the grid evolves over discrete time steps according to a set of rules. The evolution depends on the number of alive neighbors each cell has, where neighbors are the 8 cells around the cell (vertically, horizontally, and diagonally adjacent). Given the current state of the grid, compute the state of the grid in the next time step using the following rules: 1. Any live cell with fewer than 2 live neighbors dies (underpopulation). 2. Any live cell with 2 or 3 live neighbors lives on to the next generation. 3. Any live cell with more than 3 live neighbors dies (overpopulation). 4. Any dead cell with exactly 3 live neighbors becomes a live cell (reproduction). Write a function `nextState` that computes the next state of the grid. Function Signature: ```python def nextState(grid: List[List[int]]) -> List[List[int]]: pass ``` # Input - `grid`: A 2D list of integers representing the current state of the grid where 1 represents a live cell and 0 represents a dead cell. # Output - A 2D list of integers representing the state of the grid in the next time step according to the rules described above. # Constraints - The grid is not empty and rectangular. - The dimensions of the grid are between 1 and 100 (inclusive) both for rows and columns. # Examples **Input:** ```python grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1] ] ``` **Output:** ```python nextState(grid) # Returns [ # [0, 0, 0], # [1, 0, 1], # [0, 1, 1] # ] ``` **Input:** ```python grid = [ [1, 1], [1, 0] ] ``` **Output:** ```python nextState(grid) # Returns [ # [1, 1], # [1, 1] # ] ``` # Explanation For the first example, the grid evolves as follows: 1. The cell at (0,1) dies because it has only 1 live neighbor. 2. The cell at (1,2) remains alive because it has 2 live neighbors. 3. The cell at (2,0) dies because it has only 2 live neighbors. 4. The cell at (2,2) remains alive because it has 3 live neighbors. 5. The cell at (2,1) becomes alive because it has exactly 3 live neighbors. For the second example, all cells have 3 live neighbors, hence they all stay alive.","solution":"def nextState(grid): def count_live_neighbors(i, j): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for direction in directions: ni, nj = i + direction[0], j + direction[1] if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] == 1: live_neighbors += 1 return live_neighbors rows, cols = len(grid), len(grid[0]) next_grid = [[0 for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): live_neighbors = count_live_neighbors(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: next_grid[i][j] = 0 # Cell dies else: next_grid[i][j] = 1 # Cell stays alive else: if live_neighbors == 3: next_grid[i][j] = 1 # Cell becomes alive return next_grid"},{"question":"Given a list of integers, the task is to determine if there are three consecutive integers in the list that have a sum greater than a given value `X`. Example 1: Input: N = 5 arr[] = {1, 2, 3, 4, 5} X = 6 Output: Yes Explanation: The sum of [2, 3, 4] is 9 which is greater than 6. Example 2: Input: N = 4 arr[] = {1, 2, 3, 4} X = 10 Output: No Explanation: There are no three consecutive integers with a sum greater than 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `checkConsecutiveSum()` which takes the integer array `arr[]`, its size `N`, and the integer `X` as inputs and returns \\"Yes\\" if there exist three consecutive integers with sum greater than `X`, otherwise \\"No\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 3 <= N <= 10^4 - 1 <= arr[i], X <= 10^3","solution":"def checkConsecutiveSum(arr, N, X): Checks if there are three consecutive integers in the list that have a sum greater than X. Parameters: arr (list of int): The list of integers. N (int): Size of the list. X (int): The given threshold value. Returns: str: \\"Yes\\" if there are three consecutive integers with sum greater than X, otherwise \\"No\\". for i in range(N - 2): consecutive_sum = arr[i] + arr[i + 1] + arr[i + 2] if consecutive_sum > X: return \\"Yes\\" return \\"No\\""},{"question":"Problem Description You are playing a game with your friends where the goal is to find the safest position in a shrinking circle. The game starts with n people standing in a circle and every second person is eliminated in every round until only one person remains. The starting elimination will begin from person 1. Given a number of test cases T, each test case gives the number of people n present in the circle. The goal is to determine the safest position (1-indexed) in the circle for each test case. Input The first line contains T, the number of test cases. Each of the next T lines contains one integer n, the number of people standing in the circle. Output For each test case, output the safest position in the circle. Constraints 1 ≤ T ≤ 100000 1 ≤ n ≤ 10^18 Example Input: 5 7 10 5 13 100 Output: 7 5 3 11 73 Explanation Case 1: n = 7. The removal sequence is as follows: 2, 4, 6, 1, 5, 3. The safest position is 7 (the last position remaining). Case 2: n = 10. The removal sequence is: 2, 4, 6, 8, 10, 3, 7, 1, 9. The safest position is 5. Case 3: n = 5. Removal sequence: 2, 4, 1, 5. The safest position is 3. Case 4: n = 13. Removal sequence: 2, 4, 6, 8, 10, 12, 1, 5, 9, 13, 3, 7. The safest position is 11. Case 5: n = 100. The safest position is 73.","solution":"def find_safest_position(n): Returns the position which is safest in a game where every second person is eliminated in a circle of n people. # Initialize position position = 1 # Josephus Problem iterative approach for i in range(1, n + 1): position = (position + 1) % i + 1 return position def process_test_cases(T, test_cases): Processes multiple test cases to determine the safest position for each number of people in the circle. results = [] for n in test_cases: results.append(find_safest_position(n)) return results"},{"question":"Implement a class `Matrix` that represents a two-dimensional matrix of integers and supports the following operations: - Initializing the matrix with given dimensions and filling it with zeros. - Setting the element at a given row and column to a specific value. - Getting the element at a given row and column. - Finding the transpose of the matrix. - Adding another matrix to the current matrix, if they have the same dimensions. - Multiplying the current matrix by another matrix, if the number of columns of the first matrix is equal to the number of rows of the second matrix. # Requirements: - Implement a constructor that takes two integers, `rows` and `columns`, and initializes a matrix of the given dimensions filled with zeros. - Implement a method `set_element(row, col, value)` to set the element at the specified position. - Implement a method `get_element(row, col)` that returns the element at the specified position. - Implement a method `transpose()` that returns a new `Matrix` object that is the transpose of the current matrix. - Implement a method `add(matrix)` that takes another `Matrix` object and returns a new `Matrix` object that is the sum of the current matrix and the input matrix. If their dimensions do not match, this method should raise an error. - Implement a method `multiply(matrix)` that takes another `Matrix` object and returns a new `Matrix` object that is the product of the current matrix and the input matrix. If their dimensions do not align for multiplication, this method should raise an error. # Example Code Usage: ```python matrix_a = Matrix(2, 3) matrix_a.set_element(0, 0, 1) matrix_a.set_element(0, 1, 2) matrix_a.set_element(0, 2, 3) matrix_a.set_element(1, 0, 4) matrix_a.set_element(1, 1, 5) matrix_a.set_element(1, 2, 6) matrix_b = Matrix(3, 2) matrix_b.set_element(0, 0, 7) matrix_b.set_element(0, 1, 8) matrix_b.set_element(1, 0, 9) matrix_b.set_element(1, 1, 10) matrix_b.set_element(2, 0, 11) matrix_b.set_element(2, 1, 12) matrix_c = matrix_a.multiply(matrix_b) # The resulting matrix_c should be a 2x2 matrix with elements: # 58 64 # 139 154 transposed_c = matrix_c.transpose() # The transposed matrix should be: # 58 139 # 64 154 ``` # Constraints: - The matrix dimensions (rows and columns) should be positive integers. - All matrix elements are integers. # Notes: - Ensure that your code handles erroneous inputs gracefully, such as attempting to retrieve or set elements outside the bounds of the matrix. - Include relevant error messages for cases where matrices cannot be added or multiplied due to dimension mismatches.","solution":"class Matrix: def __init__(self, rows, cols): Initialize a matrix with the given number of rows and columns, filled with zeros. self.rows = rows self.cols = cols self.data = [[0 for _ in range(cols)] for _ in range(rows)] def set_element(self, row, col, value): Set the element at the specified position to value. if 0 <= row < self.rows and 0 <= col < self.cols: self.data[row][col] = value else: raise IndexError(\\"Index out of bounds.\\") def get_element(self, row, col): Get the element at the specified position if 0 <= row < self.rows and 0 <= col < self.cols: return self.data[row][col] else: raise IndexError(\\"Index out of bounds.\\") def transpose(self): Return a new Matrix object that is the transpose of the current matrix. transposed = Matrix(self.cols, self.rows) for row in range(self.rows): for col in range(self.cols): transposed.set_element(col, row, self.data[row][col]) return transposed def add(self, other): Add another matrix to the current matrix. If their dimensions do not match, raise an error. if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrix dimensions do not match for addition.\\") result = Matrix(self.rows, self.cols) for row in range(self.rows): for col in range(self.cols): result.set_element(row, col, self.data[row][col] + other.get_element(row, col)) return result def multiply(self, other): Multiply the current matrix by another matrix. If their dimensions do not align for multiplication, raise an error. if self.cols != other.rows: raise ValueError(\\"Matrix dimensions do not match for multiplication.\\") result = Matrix(self.rows, other.cols) for row in range(result.rows): for col in range(result.cols): value = 0 for k in range(self.cols): value += self.get_element(row, k) * other.get_element(k, col) result.set_element(row, col, value) return result"},{"question":"A coding competition has a problem statement where a text editor is trying to efficiently manage the recently opened documents feature. The editor needs to implement a system that supports the following operations: 1. \\"Open <filename>\\": Opens a file named `<filename>`, adds it to the top of the recently opened list. If the file was already in the list, it should move to the top. 2. \\"Close <filename>\\": Removes the file named `<filename>` from the recently opened list if it exists. 3. \\"Recent\\": Displays the current list of recently opened files in the order they were opened, with the most recent at the top. Write a program to perform the following operations on the recently opened files list. Input The first line contains a positive integer n (1 ≤ n ≤ 10^5) — the number of operations. Each of the next n lines contains one of the above operations. Output For each \\"Recent\\" operation, output the current list of recently opened files in the order they were opened, with the most recent at the top. Print the filenames in a space-separated manner in a single line for each such operation. Examples Input 7 Open file1.txt Open file2.txt Open file1.txt Recent Close file1.txt Recent Open file3.txt Recent Output file1.txt file2.txt file2.txt file3.txt file2.txt","solution":"class RecentFiles: def __init__(self): self.recent = [] self.files_set = set() def open(self, filename): if filename in self.files_set: self.recent.remove(filename) self.recent.insert(0, filename) self.files_set.add(filename) def close(self, filename): if filename in self.files_set: self.recent.remove(filename) self.files_set.remove(filename) def recent_list(self): return \' \'.join(self.recent) def process_operations(n, operations): rf = RecentFiles() results = [] for operation in operations: op_parts = operation.split(\' \', 1) if op_parts[0] == \\"Open\\": rf.open(op_parts[1]) elif op_parts[0] == \\"Close\\": rf.close(op_parts[1]) elif op_parts[0] == \\"Recent\\": results.append(rf.recent_list()) return results"},{"question":"A unique integer sequence is defined as a sequence where no two adjacent elements are equal. Given an initial sequence of integers, you need to transform it into a unique integer sequence by changing the minimum possible number of elements. Input The first line contains an integer n (1 ≤ n ≤ 105), which represents the length of the sequence. The second line contains the sequence of n integers, where each integer x satisfies 1 ≤ x ≤ 105. Output Print the transformed sequence in a single line. If there are multiple possible solutions, you can print any of them. Examples Input 5 1 2 2 3 3 Output 1 2 1 3 1 Input 6 4 4 4 4 4 4 Output 4 1 4 1 4 1 Input 3 1 2 1 Output 1 2 1 Note In the first sample, changing either the third or the fifth element to a different integer will make the sequence unique. However, changing the third element to 1 is a minimal change, resulting in the sequence [1, 2, 1, 3, 1]. Note that other transformations, such as changing the fifth element to a different non-repeating number, are also valid. In the second sample, alternating between 4 and 1 ensures no two adjacent elements are the same. Other pairs of non-repeating numbers such as [4, 2, 4, 2, 4, 2] would also be valid solutions. In the third sample, no changes are needed as it already satisfies the unique sequence condition.","solution":"def make_unique_sequence(n, sequence): Transforms the given sequence into a unique integer sequence by changing the minimum possible number of elements. Parameters: n (int) : Length of the sequence sequence (list of int) : The given sequence of integers Returns: list of int : Transformed sequence where no two adjacent elements are equal. for i in range(1, n): if sequence[i] == sequence[i - 1]: # Change current element to either 1 or 2 or 3, making sure it\'s different from its neighbors for j in range(1, 4): if (i == n - 1 or j != sequence[i + 1]) and j != sequence[i - 1]: sequence[i] = j break return sequence"},{"question":"Given a string pattern and a string text, determine if the text follows the pattern. Here, a follow means a full match, where there is a bijection between a letter in the pattern and a substring in the text. Example 1: Input: pattern = \\"abba\\", text = \\"dogcatcatdog\\" Output: True Explanation: Here \'a\' maps to \\"dog\\" and \'b\' maps to \\"cat\\". Example 2: Input: pattern = \\"abba\\", text = \\"dogcatdogcat\\" Output: False Explanation: Here \'a\' maps to \\"dog\\", but \'b\' does not consistently map to \\"cat\\". Your Task: You do not need to read input or print anything. Your task is to complete the function wordPatternMatch() which takes a string pattern and a string text as input parameters and returns True if the text follows the pattern, otherwise return False. Expected Time Complexity: O(N) Expected Auxiliary Space: O(M) Constraints: 1 ≤ len(pattern), len(text) ≤ 1000","solution":"def wordPatternMatch(pattern, text): Determine if the text follows the given pattern by checking if there is a bijection between a letter in the pattern and a substring in the text. def backtrack(pat_idx, txt_idx, pat_map, used): # If both pattern index and text index are completely traversed, return True if pat_idx == len(pattern) and txt_idx == len(text): return True # If one of them is traversed but the other is not, return False if pat_idx == len(pattern) or txt_idx == len(text): return False # Get the current pattern character pat_char = pattern[pat_idx] # If the pattern character already has a map if pat_char in pat_map: substr = pat_map[pat_char] # Check if the substr can match text starting from txt_idx if text.startswith(substr, txt_idx): return backtrack(pat_idx + 1, txt_idx + len(substr), pat_map, used) else: return False else: for i in range(txt_idx, len(text)): substr = text[txt_idx:i + 1] if substr in used: continue # Set the current patter character to substr mapping pat_map[pat_char] = substr used.add(substr) if backtrack(pat_idx + 1, txt_idx + len(substr), pat_map, used): return True # Backtrack del pat_map[pat_char] used.remove(substr) return False return backtrack(0, 0, {}, set())"},{"question":"A spaceship must travel from Earth to a distant planet in another solar system. The spaceship can only travel in straight lines between waypoints in space, and it has a maximum travel capacity per journey due to limited fuel. Your task is to determine if the spaceship can reach the destination planet while respecting its travel limitations. # Problem Statement Given a list of waypoints, each defined by its (x, y, z) coordinates, determine if the spaceship can travel from the start waypoint to the destination waypoint. The spaceship can only move directly between waypoints, and the Euclidean distance between two connected waypoints must not exceed the maximum travel capacity. # Input - The first line contains three integers x1, y1, z1, representing the coordinates of the start waypoint. - The second line contains three integers x2, y2, z2, representing the coordinates of the destination waypoint. - The third line contains a single integer `m`, which is the maximum travel capacity of the spaceship in one journey. - The fourth line contains a single integer `n`, the number of additional waypoints available for travel. - The next `n` lines each contain three integers xi, yi, zi, representing the coordinates of each additional waypoint. # Output Output \\"YES\\" if the spaceship can reach the destination waypoint from the start waypoint while traveling through one or more of the additional waypoints, without exceeding the maximum travel capacity at any step. Otherwise, output \\"NO\\". # Constraints - The coordinates (x, y, z) will be integers in the range [-10000, 10000]. - 0 ≤ n ≤ 100 - 1 ≤ m ≤ 1000 # Examples Example 1 **Input** ``` 0 0 0 10 10 10 12 3 6 6 6 8 8 8 15 15 15 ``` **Output** ``` YES ``` **Explanation**: The spaceship can travel as follows: (0,0,0) -> (6,6,6) -> (10,10,10), with both segments having distances less than or equal to 12. Example 2 **Input** ``` 0 0 0 10 10 10 5 3 3 3 3 5 5 5 7 7 7 ``` **Output** ``` NO ``` **Explanation**: There is no sequence of waypoints that allows the spaceship to reach (10,10,10) without exceeding the max travel capacity of 5. # Note The Euclidean distance between two points ((x1, y1, z1)) and ((x2, y2, z2)) is given by: [ sqrt{(x2 - x1)^2 + (y2 - y1)^2 + (z2 - z1)^2} ] Use this formula to determine if the spaceship can travel between any two waypoints.","solution":"import math from collections import deque def can_reach_destination(x1, y1, z1, x2, y2, z2, m, waypoints): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 + (p1[2] - p2[2]) ** 2) start = (x1, y1, z1) destination = (x2, y2, z2) waypoints.insert(0, start) waypoints.append(destination) n = len(waypoints) graph = {i: [] for i in range(n)} for i in range(n): for j in range(i + 1, n): if euclidean_distance(waypoints[i], waypoints[j]) <= m: graph[i].append(j) graph[j].append(i) queue = deque([0]) visited = [False] * n visited[0] = True while queue: current = queue.popleft() if current == n - 1: return \\"YES\\" for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"NO\\" # Function to process the input and output def travel_between_waypoints(): import sys input = sys.stdin.read data = input().split() x1, y1, z1 = map(int, data[0:3]) x2, y2, z2 = map(int, data[3:6]) m = int(data[6]) n = int(data[7]) waypoints = [] index = 8 for _ in range(n): xi, yi, zi = map(int, data[index:index+3]) waypoints.append((xi, yi, zi)) index += 3 result = can_reach_destination(x1, y1, z1, x2, y2, z2, m, waypoints) print(result)"},{"question":"Binary Tree - Maximum Depth & Node Count Implement `maxDepth()` to calculate the maximum depth of a binary tree. Implement `countNodes()` to count the total number of nodes in a binary tree. The `addNode()` function to build or modify the tree structure does not need to be redefined.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of the binary tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1 def countNodes(root): Returns the total number of nodes in the binary tree. if root is None: return 0 else: return 1 + countNodes(root.left) + countNodes(root.right)"},{"question":"Write a function that takes an array of integers and an integer `n` as inputs and returns a new array which is the original array rotated to the right by `n` positions. For example, given the array `[1, 2, 3, 4, 5]` and `n = 2`, the function should return `[4, 5, 1, 2, 3]`. Consider edge cases where `n` might be zero or greater than the length of the array. Example: ```python Input: arr = [1, 2, 3, 4, 5], n = 2 Output: [4, 5, 1, 2, 3] ``` # Instructions - You may assume that the input array is not empty. - Aim for an efficient solution with respect to time complexity. # Constraints - `1 <= len(arr) <= 10^5` - `0 <= n <= 10^5`","solution":"def rotate_array_right(arr, n): Rotates the array to the right by n positions. Parameters: arr (list): The list of integers to rotate. n (int): The number of positions to rotate the array. Returns: list: The rotated array. length = len(arr) if length == 0 or n == 0: return arr # Ensure n is within the bounds of the array length n = n % length return arr[-n:] + arr[:-n]"},{"question":"You have been hired by a small airline company to design a system that manages and tracks flights between multiple cities. The system should be able to handle the booking and cancellation of tickets, as well as providing information about the current status of flights. The airline operates flights between multiple cities, and a flight is characterized by the following: - Flight identifier (ID) - Source city, destination city - Departure time and arrival time - Capacity (maximum number of passengers that can be booked) - List of passengers booked on the flight Your task is to implement a class-based solution in Python that manages these flights. The solution should expose methods that allow for booking a ticket, canceling a ticket, checking the number of available seats, and displaying information about a particular flight, including its current status. Your class should be designed as follows: ```python class Flight: def __init__(self, flight_id, source, destination, departure_time, arrival_time, capacity): # Initialize the flight details and passengers list pass def book_ticket(self, passenger_name): # Book a ticket for the passenger if seats are available pass def cancel_ticket(self, passenger_name): # Cancel a ticket for the passenger if they are booked on the flight pass def available_seats(self): # Return the number of available seats on the flight pass def flight_status(self): # Display detailed status information of the flight including list of passengers pass ``` # Input - `__init__` method: initializes the flight with the given flight ID, source city, destination city, departure time, arrival time, and capacity. - `book_ticket` method: accepts a single argument, passenger name (string), and books a seat for the passenger if seats are available. - `cancel_ticket` method: accepts a single argument, passenger name (string), and cancels the booking for the passenger if they are booked on the flight. - `available_seats` method: returns the number (integer) of available seats on the flight. - `flight_status` method: displays detailed information about the flight including flight ID, source, destination, departure and arrival times, capacity, number of booked passengers, and a list of passenger names. # Output - The `book_ticket` method should print a confirmation message if a ticket is successfully booked, or an error message if the flight is fully booked. - The `cancel_ticket` method should print a confirmation message if a ticket is successfully canceled, or an error message if the passenger is not found on the flight. - The `available_seats` method should return the number of available seats. - The `flight_status` method should print the flight details and passenger list. # Example ```python # Create a flight flight = Flight(\\"AA101\\", \\"New York\\", \\"Los Angeles\\", \\"10:00\\", \\"13:00\\", 3) # Book tickets flight.book_ticket(\\"Alice\\") flight.book_ticket(\\"Bob\\") flight.book_ticket(\\"Charlie\\") flight.book_ticket(\\"David\\") # should print: \\"Unable to book ticket. The flight is fully booked.\\" # Cancel a ticket flight.cancel_ticket(\\"Bob\\") # Check available seats print(flight.available_seats()) # should print: 1 # Display flight status flight.flight_status() ``` Expected output: ``` Ticket booked for Alice. Ticket booked for Bob. Ticket booked for Charlie. Unable to book ticket. The flight is fully booked. Ticket canceled for Bob. 1 Flight ID: AA101 Source: New York Destination: Los Angeles Departure: 10:00 Arrival: 13:00 Capacity: 3 Booked seats: 2 Passengers: Alice, Charlie ```","solution":"class Flight: def __init__(self, flight_id, source, destination, departure_time, arrival_time, capacity): self.flight_id = flight_id self.source = source self.destination = destination self.departure_time = departure_time self.arrival_time = arrival_time self.capacity = capacity self.passengers = [] def book_ticket(self, passenger_name): if len(self.passengers) < self.capacity: self.passengers.append(passenger_name) print(f\\"Ticket booked for {passenger_name}.\\") else: print(\\"Unable to book ticket. The flight is fully booked.\\") def cancel_ticket(self, passenger_name): if passenger_name in self.passengers: self.passengers.remove(passenger_name) print(f\\"Ticket canceled for {passenger_name}.\\") else: print(f\\"Passenger {passenger_name} not found on the flight.\\") def available_seats(self): return self.capacity - len(self.passengers) def flight_status(self): print(f\\"Flight ID: {self.flight_id}\\") print(f\\"Source: {self.source}\\") print(f\\"Destination: {self.destination}\\") print(f\\"Departure: {self.departure_time}\\") print(f\\"Arrival: {self.arrival_time}\\") print(f\\"Capacity: {self.capacity}\\") print(f\\"Booked seats: {len(self.passengers)}\\") print(f\\"Passengers: {\', \'.join(self.passengers)}\\")"},{"question":"Manasa and Game of Thrones! Manasa loves the Game of Thrones series so much that she sometimes imagines herself as a character from the series. Recently, she got interested in the ancient Valyrian language. One day, she found an ancient scroll containing a string of characters. Manasa wants to know if she can rearrange the characters of the string to form a palindrome. A palindrome is a word that reads the same forward and backward (e.g., \\"madam\\"). Help Manasa determine if the characters of the string from the ancient scroll can be rearranged to form a palindrome. -----Input----- The input consists of a single line, containing a string ( s ) ( (1 leq |s| leq 10^5 ) ), a string consisting of lowercase letters only. -----Output----- Output \\"YES\\" if it is possible to rearrange the characters of the string to form a palindrome; otherwise, output \\"NO\\". -----Examples----- Sample Input 1: aaabbbb Sample Output 1: YES Sample Input 2: cdefghmnopqrstuvw Sample Output 2: NO Sample Input 3: cdcdcdcdeeeef Sample Output 3: YES","solution":"def can_form_palindrome(s): Returns \'YES\' if the string s can be rearranged to form a palindrome, otherwise returns \'NO\' from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearrangeable into a palindrome: # There must be at most one character with an odd count. return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Little Timmy loves binary trees and enjoys tinkering with them in various ways. One day, he decided to write a function to determine the level of each node in a binary tree. The level of the root node is considered to be 0, the level of its children is 1, the level of their children is 2, and so on. He needs your help to complete this task. Given a binary tree, you are required to write a function that returns the level of each node in the tree. Input Format - The first line contains an integer n, the number of nodes in the tree. - The next n lines each contain three integers v, l, and r. Here v is the value of the node, l is the value of the left child of node v (or -1 if there is no left child), and r is the value of the right child of node v (or -1 if there is no right child). Output Format Output n lines, each containing two integers v and the level of node v, sorted by the value of v in ascending order. Constraints - 1 leq n leq 1000 - 1 leq v leq 10^6 - The node values are unique. Sample Input 6 1 2 3 2 4 5 3 -1 6 4 -1 -1 5 -1 -1 6 -1 -1 Sample Output 1 0 2 1 3 1 4 2 5 2 6 2 Explanation The given binary tree is: ``` 1 / 2 3 / 4 5 6 ``` - The root node (1) is at level 0. - Nodes 2 and 3 are at level 1. - Nodes 4, 5, and 6 are at level 2.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(node_list): nodes = {} for v, l, r in node_list: if v not in nodes: nodes[v] = TreeNode(v) if l != -1: nodes[l] = TreeNode(l) nodes[v].left = nodes[l] if r != -1: nodes[r] = TreeNode(r) nodes[v].right = nodes[r] return nodes[node_list[0][0]] def node_levels(root): levels = {} def assign_levels(node, level): if node: levels[node.value] = level assign_levels(node.left, level + 1) assign_levels(node.right, level + 1) assign_levels(root, 0) return levels def main(node_list): tree_root = build_tree(node_list) levels = node_levels(tree_root) sorted_levels = sorted(levels.items()) return sorted_levels"},{"question":"You are given a number `n`, which represents the length of a binary string. The binary string is generated according to some unknown rules, but it always has a few properties: 1. The string doesn\'t have two consecutive \'1\'s. 2. There are no leading zeros unless the string is \\"0\\". Write a function to count the number of different binary strings of length `n` that satisfy these properties. The output should be the number of such binary strings modulo `10^9 + 7`. Example 1: Input: n = 2 Output: 3 Explanation: The possible binary strings are \\"00\\", \\"01\\", and \\"10\\". Example 2: Input: n = 3 Output: 5 Explanation: The possible binary strings are \\"000\\", \\"001\\", \\"010\\", \\"100\\", \\"101\\". Example 3: Input: n = 4 Output: 8 Explanation: The possible binary strings are \\"0000\\", \\"0001\\", \\"0010\\", \\"0100\\", \\"0101\\", \\"1000\\", \\"1001\\", and \\"1010\\". Example 4: Input: n = 1 Output: 2 Explanation: The possible binary strings are \\"0\\" and \\"1\\". Constraints: 1 <= n <= 10^5.","solution":"def count_binary_strings(n): Returns the count of binary strings of length n that satisfy the given properties. The result is returned modulo 10^9 + 7. MOD = 10**9 + 7 if n == 1: return 2 # \\"0\\" and \\"1\\" # Create arrays to store the counts: # dp0[i] will store the number of valid strings of length i ending in \\"0\\" # dp1[i] will store the number of valid strings of length i ending in \\"1\\" dp0 = [0] * (n + 1) dp1 = [0] * (n + 1) dp0[1] = 1 # \\"0\\" dp1[1] = 1 # \\"1\\" for i in range(2, n + 1): dp0[i] = (dp0[i - 1] + dp1[i - 1]) % MOD dp1[i] = dp0[i - 1] % MOD return (dp0[n] + dp1[n]) % MOD"},{"question":"You are given two strings `a` and `b`. The task is to find if string `b` can be obtained by rotating string `a` exactly once to the right. Rotating a string to the right means moving the last character to the front and shifting all other characters one position to the right. Write a function `is_rotated_once(a: str, b: str) -> bool` that returns `True` if `b` can be obtained by rotating `a` once to the right, otherwise returns `False`. # Input - Two strings `a` and `b` with lengths between 1 and 1000. # Output - A boolean value, `True` if `b` is a rotated version of `a` by one position to the right, `False` otherwise. # Example Input ```python a = \\"abcdef\\" b = \\"fabcde\\" ``` Output ```python True ``` Input ```python a = \\"abcdef\\" b = \\"bcdefa\\" ``` Output ```python False ``` # Notes 1. The function must be case-sensitive. 2. If the input strings are not of the same length, the function should return `False` immediately.","solution":"def is_rotated_once(a: str, b: str) -> bool: Check if the string `b` can be obtained by rotating string `a` exactly once to the right. if len(a) != len(b): return False if len(a) == 0: return False # Edge case where strings are empty rotated_a = a[-1] + a[:-1] return rotated_a == b"},{"question":"Create a function that takes a string representing a season in the NFL (National Football League) and returns the total number of games played in that season. The function should handle regular seasons in different formats, i.e., 16-game seasons and 17-game seasons starting from year 2021. Playoff games should not be counted as they vary each year. If the provided string is not a recognized season format, the function should return the string \\"Invalid season format\\". # Examples: - For input \\"2019\\", the function should return 256 (16 games/week * 16 weeks). - For input \\"2021\\", the function should return 272 (17 games/week * 16 weeks). - For input \\"playoffs\\", the function should return \\"Invalid season format\\". # Clarification: - From 1978 to 2020, the NFL played 16 regular-season games for each of the 32 teams, resulting in 256 total games. - Starting from 2021, the NFL extended the season to 17 games, making 272 total regular-season games for 32 teams.","solution":"def nfl_games_in_season(season): Returns the total number of games played in an NFL regular season for the given season. :param season: str, the year of the season or a description of the season :return: int or str, total number of games or \\"Invalid season format\\" if the format is not recognized try: year = int(season) if 1978 <= year <= 2020: return 256 elif year >= 2021: return 272 else: return \\"Invalid season format\\" except ValueError: return \\"Invalid season format\\""},{"question":"A new tech company has a simple task for a new project: determine if a certain grid configuration is possible given a set of rows and columns. Given a matrix with a size of N x M, and two lists `rowSum` and `colSum`, your task is to construct an N x M matrix such that: 1. The sum of the elements in the ith row is equal to rowSum[i]. 2. The sum of the elements in the jth column is equal to colSum[j]. Your task is to determine if it\'s possible to construct such a matrix. Input: - The first line contains two integers, N (number of rows) and M (number of columns). - The second line contains N integers, representing the rowSum array. - The third line contains M integers, representing the colSum array. Output: - Output \\"YES\\" if it’s possible to construct the matrix, otherwise, output \\"NO\\". Constraints: 1 <= N, M <= 100 0 <= rowSum[i], colSum[j] <= 1000 SAMPLE INPUT 1: 3 3 3 6 9 7 8 3 SAMPLE OUTPUT 1: YES SAMPLE INPUT 2: 2 2 1 2 3 1 SAMPLE OUTPUT 2: NO Explanation: In the first example, it’s possible to construct a 3x3 matrix that satisfies all the row and column sums, whereas in the second example it’s not possible to satisfy both the row and column sums simultaneously.","solution":"def is_possible_matrix(N, M, rowSum, colSum): Determines if it\'s possible to construct an N x M matrix that satisfies the given row and column sums. Parameters: - N (int): Number of rows - M (int): Number of columns - rowSum (list of int): List of sums for each row - colSum (list of int): List of sums for each column Returns: - str: \\"YES\\" if it\'s possible to construct such a matrix, otherwise \\"NO\\" if sum(rowSum) == sum(colSum): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a binary tree with \'N\' nodes. Your task is to write a function that returns the left view of the binary tree. The left view of a binary tree is the set of nodes visible when the tree is viewed from the left side. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: [1, 2, 4] Example 2: Input: 10 / 20 30 / 40 Output: [10, 20, 40] Your Task: You don\'t need to take input. Complete the function `leftView()` that takes the root of the binary tree as input and returns a list containing the values of the nodes that appear in the left view of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5}","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def leftView(root): Returns the left view of the binary tree. if not root: return [] result = [] queue = [(root, 0)] # pair(node, level) max_level_seen = -1 while queue: node, level = queue.pop(0) # If this is the first node at this level if level > max_level_seen: result.append(node.data) max_level_seen = level # Enqueue left and right children if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return result"},{"question":"Write a function `validate_ip_address(ip_string)` that takes a string as input and returns a boolean indicating whether the string is a valid IPv4 address. The function should follow these criteria for a valid IPv4 address: 1. The string consists of four octets, separated by periods (e.g., \\"192.168.1.1\\"). 2. Each octet is a non-empty string of digits. 3. Each octet must be between 0 and 255, inclusive. 4. Leading zeros in any octet are not allowed (e.g., \\"192.168.01.1\\" is not valid). Examples: - `validate_ip_address(\\"192.168.1.1\\")` should return `True`. - `validate_ip_address(\\"255.255.255.255\\")` should return `True`. - `validate_ip_address(\\"192.168.1.1.1\\")` should return `False`. - `validate_ip_address(\\"192.168.01.1\\")` should return `False`. - `validate_ip_address(\\"192.168.1\\")` should return `False`. - `validate_ip_address(\\"192.168.1.300\\")` should return `False`.","solution":"def validate_ip_address(ip_string): Validates if the given string is a valid IPv4 address. :param ip_string: str : IP address in string format :return: bool : True if valid IPv4 address, False otherwise octets = ip_string.split(\'.\') # There must be exactly 4 octets if len(octets) != 4: return False for octet in octets: # Each octet must be a non-empty string of digits if not octet.isdigit(): return False # Each octet must be between 0 and 255 if not (0 <= int(octet) <= 255): return False # Leading zeros are not allowed if octet != str(int(octet)): return False return True"},{"question":"Consider a country that consists of several cities connected by bidirectional roads. Each road has a time required to travel, given in hours. A person wants to drive from city 1 to city n. The government has decided to implement a policy where each city is closed for a day on a different day of the week to reduce congestion. For simplicity, assume each city is closed on a different day from 1 to 7, where 1 represents Monday and 7 represents Sunday. You need to plan this person\'s journey from city 1 to city n, respecting the city\'s closures. The person must leave city 1 on the first hour of Monday, and you need to determine the earliest possible time they can reach city n. Input The first line of the input contains two integers, n and m (2 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2), where n is the number of cities and m is the number of roads. The second line contains n integers where the i-th integer represents the day of the week the i-th city is closed (1 ≤ closure day ≤ 7). The next m lines each contain three integers, u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 24), representing a road between cities u and v that takes t hours to travel. Output Output a single integer representing the earliest time in hours at which the person can reach city n. If it is not possible to reach city n, output -1. Examples Input 5 6 1 2 3 4 5 1 2 5 2 3 5 3 4 5 4 5 5 1 3 15 2 4 15 Output 20 Input 3 2 1 7 7 1 2 12 2 3 12 Output 24 Note In the first example, the person travels from: 1. City 1 (starts at hour 0 on Monday, closure day Monday). 2. Travels to city 2 (5 hours). 3. City 2 (arrives at hour 5, closed on Tuesday, so waits till Wednesday). 4. Travels to city 3 (5 hours, total time=20 hours). In the second example, the person travels from: 1. City 1 (starts at hour 0 on Monday, closure day Monday). 2. Travels to city 2 (12 hours). 3. City 2 (arrives at hour 12 on Monday, waits until next Sunday). 4. Travels to city 3 (12 hours, total time=24 hours). In both examples, if there were no such paths, the output would be -1.","solution":"import heapq def dijkstra(start, closed_days, adj_list, n): # Initializing distances as infinity for all cities except the start city inf = float(\'inf\') distances = [inf] * (n + 1) distances[start] = 0 # Priority queue to explore the cities pq = [(0, start)] # (time, city) heapq.heapify(pq) while pq: current_time, current_city = heapq.heappop(pq) # If the current city is the destination city if current_city == n: return current_time # Calculate the day of the week from starting time current_day = (current_time // 24) % 7 + 1 for travel_time, neighbor in adj_list[current_city]: wait_time = 0 # Determine if we need to wait for the city to open if closed_days[neighbor - 1] == ((current_time + travel_time) // 24) % 7 + 1: wait_time = 24 - (current_time + travel_time) % 24 new_time = current_time + travel_time + wait_time if new_time < distances[neighbor]: distances[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return -1 def earliest_arrival_time(n, m, closed_days, roads): adj_list = [[] for _ in range(n + 1)] for u, v, t in roads: adj_list[u].append((t, v)) adj_list[v].append((t, u)) return dijkstra(1, closed_days, adj_list, n)"},{"question":"Given an integer array nums of length n, you want to create an array of length 2n where arr[i] == nums[i] and arr[i + n] == nums[i] for 0 <= i < n (i.e., arr\'s first half is a copy of nums and the second half is also a copy of nums). Return the array arr. Example 1: Input: nums = [1, 2, 1] Output: [1, 2, 1, 1, 2, 1] Explanation: The array arr is constructed as follows: 1) arr[0] = nums[0] -> arr[0] = 1 2) arr[1] = nums[1] -> arr[1] = 2 3) arr[2] = nums[2] -> arr[2] = 1 4) arr[3] = nums[0] -> arr[3] = 1 5) arr[4] = nums[1] -> arr[4] = 2 6) arr[5] = nums[2] -> arr[5] = 1 Example 2: Input: nums = [1, 3, 2, 1] Output: [1, 3, 2, 1, 1, 3, 2, 1] Explanation: The array arr is constructed as follows: 1) arr[0] = nums[0] -> arr[0] = 1 2) arr[1] = nums[1] -> arr[1] = 3 3) arr[2] = nums[2] -> arr[2] = 2 4) arr[3] = nums[3] = 1 -> arr[3] = 1 5) arr[4] = nums[0] -> arr[4] = 1 6) arr[5] = nums[1] -> arr[5] = 3 7) arr[6] = nums[2] -> arr[6] = 2 8) arr[7] = nums[3] -> arr[7] = 1 Constraints: - The length of nums is in the range [1, 1000]. - 1 <= nums[i] <= 1000","solution":"def get_concatenation(nums): Given an integer array \'nums\' of length n, returns an array \'arr\' of length 2n where arr[i] == nums[i] and arr[i + n] == nums[i] for 0 <= i < n. return nums + nums"},{"question":"Sherlock is trying to crack a safe with a numeric keypad. The keypad is a matrix grid of size n x n, and each cell contains a digit from 0 to 9. Each of the keypad\'s keys can be pressed only if there exists an unbroken sequence of adjacent keys (horizontally, vertically, or diagonally) from the currently pressed key to the new key. Sherlock needs to enter a sequence of digits to unlock the safe by pressing the keypad keys in the correct order. Given the grid and the sequence of digits Sherlock needs to enter, determine if it is possible to unlock the safe. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10, 1 ≤ k ≤ 100), the size of the matrix and the length of the sequence Sherlock needs to enter, respectively. The next n lines contain n integers each, describing the n x n keypad matrix. The last line contains a string of k digits representing the sequence Sherlock needs to enter. -----Output----- Print \\"YES\\" (without quotes) if it is possible to unlock the safe with the given sequence, otherwise print, \\"NO\\". -----Examples----- Input 3 4 1 2 3 4 5 6 7 8 9 1236 Output YES Input 3 4 1 2 3 4 5 6 7 8 9 1239 Output NO -----Note----- In the first example, Sherlock can press the keys in the order 1 -> 2 -> 3 -> 6, which are all adjacent to each other, making it possible to enter the sequence. In the second example, although Sherlock can press 1 -> 2 -> 3, he cannot reach the key 9 from 3 as they are not adjacent, making it impossible to enter the sequence.","solution":"def can_unlock_safe(n, k, matrix, sequence): def is_adjacent(x1, y1, x2, y2): return abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1 def find_indices(digit): indices = [] for i in range(n): for j in range(n): if matrix[i][j] == digit: indices.append((i, j)) return indices sequence_digits = [int(digit) for digit in sequence] start_positions = find_indices(sequence_digits[0]) for digit in sequence_digits[1:]: next_positions = find_indices(digit) new_start_positions = [] for (x, y) in start_positions: for (nx, ny) in next_positions: if is_adjacent(x, y, nx, ny): new_start_positions.append((nx, ny)) break if new_start_positions: break start_positions = new_start_positions if not start_positions: return \\"NO\\" return \\"YES\\""},{"question":"Given an integer array representing the number of books in each section of a library, find the maximum number of books you can select by following these rules: 1. You can select only one book from each section. 2. You cannot select two consecutive sections. Write a program to determine the maximum number of books you can take following these constraints. Constraints - 1 ≤ number of sections ≤ 105 - 0 ≤ number of books in each section ≤ 104 Input Format - The first line contains an integer, n, the number of sections in the library. - The second line contains n integers representing the number of books in each section. Output Format - One integer representing the maximum number of books you can select. SAMPLE INPUT 4 3 2 7 10 SAMPLE OUTPUT 13 Explanation You can select books from sections 1 and 3, which gives you `3 + 10 = 13` books. This is the optimal solution. Note that you could also select books from sections 2 and 4, which gives you `2 + 10 = 12` books, but this is not the maximum possible.","solution":"def max_books_selection(arr): if not arr: return 0 n = len(arr) if n == 1: return arr[0] elif n == 2: return max(arr) dp = [0] * n dp[0] = arr[0] dp[1] = max(arr[0], arr[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + arr[i]) return dp[-1]"},{"question":"A messaging application needs to implement a feature for summarizing chat history. Given a chat log, the program should generate a summary of all unique messages sent by users. Each message can be potentially repeated many times by different users or the same user. The summary should list each unique message in alphabetical order, along with the number of times it appeared in the chat log. The input consists of multiple lines. Each line represents a message sent by a user along with a time-stamp. A message may contain any printable ASCII characters except for newlines. The time-stamp consists of hours, minutes and seconds (format: HH:MM:SS). The goal is to output the summary of unique messages along with their respective counts. -----Input----- The input consists of multiple lines, each line containing a message sent by a user along with a time-stamp, separated by a space. The input may contain up to 10,000 messages, and each message is no longer than 100 characters. -----Output----- Output the unique messages in alphabetical order, along with their counts, one per line. Each output line should contain the message, a space, and the count of that message in the given chat log. -----Examples----- Sample Input 1: Hello everyone! 12:00:01 Hi there! 12:01:23 Hello everyone! 12:02:45 Hi there! 12:03:15 How are you doing? 12:04:30 Sample Output 1: Hello everyone! 2 Hi there! 2 How are you doing? 1 Sample Input 2: Good morning! 08:10:35 Good night! 22:45:00 Good morning! 08:15:10 Good afternoon! 14:00:00 Sample Output 2: Good afternoon! 1 Good morning! 2 Good night! 1","solution":"def summarize_chat_log(chat_log): Summarizes the chat log by listing each unique message in alphabetical order, along with the number of times it appeared in the chat log. from collections import defaultdict # Dictionary to store counts of each message message_counts = defaultdict(int) for log_entry in chat_log.split(\'n\'): if log_entry.strip(): # Split the log entry to separate the message from the timestamp message, timestamp = log_entry.rsplit(\' \', 1) message_counts[message] += 1 # Sort messages alphabetically and prepare the summary list sorted_messages = sorted(message_counts.items()) # Formatting the output as required summary = [f\\"{message} {count}\\" for message, count in sorted_messages] return summary"},{"question":"Brianna loves sequences with unique properties. She recently discovered palindromic sequences and wants to know how many such sequences she can create. Specifically, she is interested in sequences composed of only the integers 1 and 0. A sequence is called palindromic if it reads the same forwards and backwards. For instance, the sequences \\"101\\" and \\"0110\\" are palindromic, but \\"100\\" is not. Given an integer N, which represents the length of the sequences, help Brianna find the number of distinct palindromic sequences of length N. As this number can be very large, return the result modulo (10^9+7). Input Format The first line contains a single integer, mathbf{T}, denoting the number of test cases. Each test case consists of a single line containing an integer, N, denoting the length of the sequences. Constraints 1leq Tleq 10 1leq Nleq 10^5 Output Format On a new line for each test case, print the number of distinct palindromic sequences of length N modulo (10^9 + 7). Sample Input 3 1 2 3 Sample Output 2 2 4 Explanation Test Case 0: There are 2 valid palindromic sequences of length 1: \\"1\\" and \\"0\\". Thus, the result is 2%(10^9+7), which is 2. Test Case 1: There are 2 valid palindromic sequences of length 2: \\"00\\" and \\"11\\". Thus, the result is 2%(10^9+7), which is 2. Test Case 2: There are 4 valid palindromic sequences of length 3: \\"000\\", \\"101\\", \\"010\\", and \\"111\\". Thus, the result is 4%(10^9+7), which is 4.","solution":"def count_palindromic_sequences(N): Returns the number of distinct palindromic sequences of length N modulo (10^9 + 7). MOD = 10**9 + 7 if N % 2 == 0: return pow(2, N//2, MOD) else: return pow(2, (N//2) + 1, MOD) def solve(T, cases): results = [] for N in cases: results.append(count_palindromic_sequences(N)) return results"},{"question":"Aman loves playing with strings and he wants to perform some operations on them. He has a string S and he wants to find how many distinct substrings can be formed from S. A substring of a string S is defined as a sequence of consecutive characters from S. Write a program that calculates the number of distinct substrings that can be formed from a given string S. INPUT: The first line of the input contains a single integer T (the number of test cases). Each of the next T lines of input contains a single string S. OUTPUT: For each test case, print the number of distinct substrings of the corresponding input string. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 SAMPLE INPUT: 3 abc aaa abab SAMPLE OUTPUT: 6 3 7 Explanation: For test 1, the distinct substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". So the output is 6. For test 2, the distinct substrings of \\"aaa\\" are \\"a\\", \\"aa\\", \\"aaa\\". So the output is 3. For test 3, the distinct substrings of \\"abab\\" are \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\". So the output is 7.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the string s. substrings = set() n = len(s) for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings) def distinct_substrings_for_cases(t, cases): Returns the number of distinct substrings for each test case. results = [] for s in cases: results.append(count_distinct_substrings(s)) return results"},{"question":"In a software company, the team leader wants to organize an error-free version control system. The developers are expected to clean up their respective branches by removing redundant consecutive commits. You are given a series of Git commit messages recorded on a branch. Each commit is represented by a unique string. Your task is to compress the commit history such that no two consecutive commits are the same by removing redundant messages. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a sequence of space-separated commit messages. Output For each test case, print the compressed sequence of commit messages without any consecutive duplicates. Constraints: 1 ≤ T ≤ 10 1 ≤ length of commit message ≤ 20 1 ≤ number of commits in each sequence ≤ 1000 SAMPLE INPUT 2 fix-bug fix-bug update-docs implement-feature update-docs initial-commit initial-commit initial-commit add-readme add-readme SAMPLE OUTPUT fix-bug update-docs implement-feature update-docs initial-commit add-readme Explanation Input: fix-bug fix-bug update-docs implement-feature update-docs Output: fix-bug update-docs implement-feature update-docs The second \'fix-bug\' is removed because it immediately follows another \'fix-bug\'. Similarly, only one \'update-docs\' is retained just after \'implement-feature\'. Input: initial-commit initial-commit initial-commit add-readme add-readme Output: initial-commit add-readme All consecutive \'initial-commit\' and \'add-readme\' messages are compressed into a single entry each.","solution":"def compress_commit_history(T, commit_histories): Compresses the commit history by removing consecutive redundant commit messages. Parameters: T (int): Number of test cases. commit_histories (list of str): List of commit history strings, each string represents a sequence of space-separated commit messages. Returns: list of str: List of compressed commit history for each test case. result = [] for history in commit_histories: commits = history.split() if not commits: result.append(\\"\\") continue compressed_commits = [commits[0]] for i in range(1, len(commits)): if commits[i] != commits[i - 1]: compressed_commits.append(commits[i]) result.append(\\" \\".join(compressed_commits)) return result"},{"question":"You are given a list of integers. Your task is to create a function ```largest_sum_subarray()``` that finds the contiguous subarray within a one-dimensional numerical array which has the largest sum and returns this sum. ```python For Python largest_sum_subarray([1, 2, -1, 2, -3, 2, -5]) == 4 # The subarray [1, 2, -1, 2] has the largest sum largest_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == 7 # The subarray [4, -1, -2, 1, 5] has the largest sum largest_sum_subarray([1, 2, 3, 4, 5]) == 15 # The subarray [1, 2, 3, 4, 5] has the largest sum largest_sum_subarray([-1, -2, -3, -4]) == -1 # The subarray [-1] has the largest sum ``` You can assume that the array contains at least one number. Implement the function ```largest_sum_subarray(arr)``` that solves this problem.","solution":"def largest_sum_subarray(arr): This function finds the contiguous subarray within a one-dimensional numerical array which has the largest sum and returns this sum. :param arr: List of integers. :return: Largest sum of the contiguous subarray. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Snuke and Raccoon are playing a game with N candies where each candy has a weight w_i. They have to divide the candies between them such that the absolute difference between the total weights of the candies Snuke has and the total weights of the candies Raccoon has is minimized. Snuke will take some number of candies from the set, then Raccoon will take all the remaining candies. Both Snuke and Raccoon have to take at least one candy. Let the total weight of candies Snuke takes be x and the total weight of candies Raccoon takes be y. They wish to minimize |x - y|. Find the minimum possible value of |x - y|. -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ w_i ≤ 10^4 - w_i is an integer -----Input----- Input is given from Standard Input in the following format: N w_1 w_2 ... w_{N} -----Output----- Print the minimum possible value of |x - y|. -----Sample Input----- 5 2 3 5 8 13 -----Sample Output----- 1 If Snuke takes the candies with weights 2, 3, and 5, and Raccoon takes the candies with weights 8 and 13, then the total weights are x = 10 and y = 21, so |x - y| = 1. This is the minimum possible value.","solution":"def min_abs_diff_candies(N, weights): total_weight = sum(weights) dp = [False] * (total_weight // 2 + 1) dp[0] = True for weight in weights: for j in range(total_weight // 2, weight - 1, -1): if dp[j - weight]: dp[j] = True closest_sum = max(i for i, can_make in enumerate(dp) if can_make) return abs((total_weight - closest_sum) - closest_sum) def parse_input(input_str): lines = input_str.strip().split() N = int(lines[0]) weights = list(map(int, lines[1:])) return N, weights def main(input_str): N, weights = parse_input(input_str) print(min_abs_diff_candies(N, weights))"},{"question":"Given a list of integers, your task is to find the length of the longest subarray that consists of only even numbers. ------ Input ------ The first line contains an integer N, the size of the list. The second line contains N integers representing the elements of the list. ------ Output ------ Output a single integer, the length of the longest subarray consisting of only even numbers. ------ Constraints ------ 1 ≤ N ≤ 100000 −10^9 ≤ a_i ≤ 10^9 ------ Sample Input 1 ------ 10 1 2 4 6 8 3 2 4 6 8 ------ Sample Output 1 ------ 4 ------ Explanation 1 ------ - The longest subarray of even numbers is [2, 4, 6, 8], with length 4. ------ Sample Input 2 ------ 5 1 3 5 7 9 ------ Sample Output 2 ------ 0 ------ Explanation 2 ------ - There are no even numbers in the list, hence the length of the longest subarray of even numbers is 0. ------ Sample Input 3 ------ 6 2 2 2 2 2 2 ------ Sample Output 3 ------ 6 ------ Explanation 3 ------ - The entire list consists of even numbers, so the length of the longest subarray is 6.","solution":"def length_of_longest_even_subarray(arr): Returns the length of the longest subarray consisting only of even numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Write a function that takes a list of integers and returns the sum of all integers that are multiples of a given integer. The function should accept a list of integers (inputList) and a single integer (multiple) as parameters. It should return the sum of all the numbers in the list that are divisible by the given integer. For example, given the list [2, 4, 6, 8, 10] and the integer 2, return 30 (since all the numbers in the list are multiples of 2 and their sum is 30).","solution":"def sum_of_multiples(inputList, multiple): Returns the sum of all numbers in inputList that are multiples of \'multiple\'. return sum([num for num in inputList if num % multiple == 0])"},{"question":"Given a string S, determine the minimum number of characters you need to delete to make the string a palindrome. A palindrome is a string that reads the same forwards and backwards. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the length of the string S. - The second line contains the string S. -----Output----- For each test case, print a single line containing one integer ― the minimum number of deletions required to make the string a palindrome. -----Constraints----- - 1 le T le 1000 - 1 le N le 1000 - S consists of lowercase English letters -----Subtasks----- Subtask #1 (50 points): - 1 le N le 100 - S consists of lowercase English letters Subtask #2 (50 points): original constraints -----Example Input----- 3 4 abca 3 bbb 5 abcba -----Example Output----- 1 0 0 -----Explanation----- Example case 1: Deleting the character \'b\' results in the string \\"aca\\" which is a palindrome. Example case 2: The string \\"bbb\\" is already a palindrome, so no deletions are needed. Example case 3: The string \\"abcba\\" is already a palindrome, so no deletions are needed.","solution":"def min_deletions_to_make_palindrome(s: str) -> int: Returns the minimum number of deletions required to make the string a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # Fill the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], dp[i + 1][j]) # The result is the number of deletions for the entire string return dp[0][n - 1] def process_test_cases(test_cases): results = [] for case in test_cases: n, s = case results.append(min_deletions_to_make_palindrome(s)) return results"},{"question":"You are given a list of integers representing the heights of buildings. Each building is of width 1 and stands next to each other. You need to calculate the maximum amount of water that can be trapped between the buildings after rainfall. Write a function `trap_rain_water` that takes a list of non-negative integers and returns the total amount of water trapped. **Function signature:** ```python def trap_rain_water(heights: List[int]) -> int: ``` **Input:** - A list of integers, `heights`, where `heights[i]` represents the height of the i-th building. The length of the list will be between 0 and 100,000. **Output:** - Return an integer representing the maximum water that can be trapped. **Examples:** ```python heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] trap_rain_water(heights) -> 6 heights = [4, 2, 0, 3, 2, 5] trap_rain_water(heights) -> 9 ``` **Constraints:** - The algorithm should run in O(n) time and O(1) additional space complexity. - Negative heights are not allowed in input. - Empty list should return 0 water trapped.","solution":"def trap_rain_water(heights): Calculate the maximum amount of water that can be trapped between buildings. :param heights: List[int] - a list of non-negative integers representing building heights :return: int - the total amount of water trapped if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) water_trapped += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += right_max - heights[right] return water_trapped"},{"question":"In a factory, there are n machines arranged in a line. Each machine can perform one of three types of operations every second: increase its value by 1, decrease its value by 1, or do nothing. Each machine has a starting value represented by an integer. The goal is to equalize the values of all machines to the value of any single machine within the least amount of time. You are given the initial values of the n machines. Determine the minimum number of seconds required to make all machine values equal. -----Input----- The first line contains a single integer n (1 leq n leq 100000), representing the number of machines. The second line contains n integers a_1, a_2, ..., a_n (-10^6 leq a_i leq 10^6) representing the starting values of the machines. -----Output----- Output one line with the minimum number of seconds required to make all machine values equal. -----Note----- For the first sample input, equalizing all machines to the value 2 requires 2 steps: machine with value 1 increases by 1 and machine with value 4 decreases by 2, for a total of 1+2=3 seconds. For the second sample input, all machines already have the same value, so 0 seconds are required. -----Examples----- Sample Input: 3 1 2 4 Sample Output: 3 Sample Input: 4 5 5 5 5 Sample Output: 0","solution":"def min_seconds_to_equalize(n, machines): Returns the minimum number of seconds required to make all machine values equal. target_value = round(sum(machines) / n) # Target value to which we will try to reduce the cost min_seconds = sum(abs(target_value - value) for value in machines) return min_seconds # Handles another target value for smarter equalization if necessary def smart_min_seconds_to_equalize(n, machines): target_values = [sum(machines) // n, sum(machines) // n + 1] # Possible target values min_seconds = min( sum(abs(target_value - value) for value in machines) for target_value in target_values ) return min_seconds"},{"question":"You are tasked with organizing a performance event where multiple artists will perform in given time slots. The objective is to maximize the number of artists that can perform while ensuring no two performances overlap. Each artist can only be scheduled once, and all performances must completely fit within the designated time slots. -----Input----- The first line of input contains one integer N (1 leq N leq 100000), the number of artists. Following this, there are N lines, each containing two integers S_i and E_i (0 leq S_i < E_i leq 10^9), representing the start time and end time of the i^text{th} artist\'s performance. -----Output----- Output a single integer on a line by itself, the maximum number of artists that can be scheduled to perform without any overlap. -----Examples----- Sample Input 1: 5 1 3 2 5 3 6 4 7 5 8 Sample Output 1: 2 Sample Input 2: 4 7 9 1 4 4 7 2 5 Sample Output 2: 3","solution":"def max_non_overlapping_performances(N, performances): Returns the maximum number of non-overlapping performances that can be scheduled. :param N: Number of artists :param performances: List of tuples, each containing (start_time, end_time) of a performance :return: Maximum number of non-overlapping performances # Sort performances based on end times performances.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in performances: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Given a sequence of integers, you must modify the sequence such that every integer becomes either the minimum or the maximum of its neighbors. If an integer has only one neighbor (like the first and the last elements), it should become the minimum or maximum of itself and that neighbor because it has no other option. # Input Input begins with an integer `t` (1 ≤ `t` ≤ 100) indicating the number of test cases. Each test case starts with an integer `n` (2 ≤ `n` ≤ 100000), the length of the sequence, followed by a sequence of `n` integers `a` (1 ≤ `a_i` ≤ 1,000,000). # Output For each test case, output a sequence where every element is either the minimum or maximum of its neighbors as described above. # Example Input ``` 2 5 4 6 3 7 1 4 10 20 30 40 ``` Output ``` 4 6 3 7 1 10 20 30 40 ``` # Explanation - For the first test case, the sequence can already be considered with every element being the minimum or maximum of its neighbors. - For the second test case, the sequence is `[10,20,30,40]` where each element is already either the minimum or maximum of its neighbors. # Note - You do not need to change the sequence if it already matches the requirements. - You should aim to produce an output with the least amount of modification necessary.","solution":"def modify_sequence(test_cases): results = [] for n, a in test_cases: modified_sequence = [] for i in range(n): if i == 0: modified_sequence.append(a[0]) elif i == n - 1: modified_sequence.append(a[-1]) else: modified_sequence.append(a[i]) results.append(modified_sequence) return results"},{"question":"In a certain autonomous vehicle competition, each participating car’s behavior is determined by a set of predefined rules. The goal of the competition is for each car to navigate a series of checkpoints in the shortest possible time while adhering to safety protocols. Each car logs its checkpoint crossings and activities, and the logs are subsequently analyzed to determine the winners. Here’s the set of rules to determine the ranking of the cars: 1. A car that passes through more checkpoints in the least total time is ranked higher. 2. If two cars pass through the same number of checkpoints, the car with the fewer safety violations (SV) is ranked higher. 3. If two cars have the same number of checkpoint crossings and the same number of SVs, the car that finished in less total time is ranked higher. 4. If two cars are still tied after applying the above criteria, the car with the smaller ID is ranked higher. You are given the log entries for multiple datasets, each containing information about different cars. Each log entry includes the car ID (integer), number of checkpoints passed (integer), total time taken (integer, in seconds), and number of safety violations (integer). Write a program that processes these entries and ranks the cars according to the rules mentioned above. The program should then output the IDs of the cars in their rank order. Input Multiple datasets are given as input. Each dataset is given in the following format: n (number of cars: integer) Ci Cp Ct Sv (ID of the car, number of checkpoints passed, total time taken, number of safety violations: 4 integers separated by blanks) C2 Cp2 Ct2 Sv2 .. Cn Cpn Ctn Svn n is 300 or less, and Ci is 1 or more and 1000 or less. You can assume that there are no cars with the same ID in a dataset. Cpi should be 50 or less, Cti should be 100,000 or less, and Svi should be 100 or less. When n is 0, it is the end of the input. Output For each dataset, output the IDs of the cars in their rank order. Please output one ID on one line. Example Input 4 101 10 5000 1 102 9 4900 2 103 10 4900 0 104 10 5000 0 3 201 5 1000 0 202 5 1000 1 203 5 900 0 0 Output 103 104 101 102 203 201 202","solution":"def rank_cars(datasets): def rank_key(car): _, checkpoints, total_time, violations = car return (-checkpoints, violations, total_time, car[0]) results = [] for dataset in datasets: dataset = sorted(dataset, key=rank_key) results.extend(car[0] for car in dataset) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] index = 0 while index < len(lines): n = int(lines[index]) if n == 0: break index += 1 dataset = [] for _ in range(n): car_details = list(map(int, lines[index].split())) dataset.append(car_details) index += 1 datasets.append(dataset) return datasets def main(input_data): datasets = parse_input(input_data) ranked_ids = rank_cars(datasets) return \'n\'.join(map(str, ranked_ids))"},{"question":"You are given a list of integers. Determine whether there are two distinct indices (i) and (j) such that the sum of the integers at these indices equals a given target value. Write a function `find_target_sum_indices` that takes in the list of integers and the target sum and returns a boolean value. Return `True` if such a pair exists, and `False` otherwise. -----Constraints----- - The list of integers contains n integers where 2 ≤ n ≤ 10. - Each integer in the list is between -1000 and 1000. - The target sum is also an integer between -2000 and 2000. -----Function Signature----- ```python def find_target_sum_indices(arr: List[int], target: int) -> bool: pass ``` -----Input----- - A list of integers (arr) - An integer (target) -----Output----- - A boolean value (True or False) -----Example----- ```python arr = [1, 2, 3, 4] target = 5 ``` -----Output----- ```python True ``` Explanation: The sum of the integers at indices 1 and 2 (2 + 3) equals the target value 5.","solution":"from typing import List def find_target_sum_indices(arr: List[int], target: int) -> bool: Returns True if there are two distinct indices i and j in the list such that arr[i] + arr[j] equals the target value. seen = {} for idx, num in enumerate(arr): complement = target - num if complement in seen: return True seen[num] = idx return False"},{"question":"You are developing a game where a player has to jump to reach the finish line. The game is played on a 1-dimensional number line with positions labeled from 0 to a given positive integer N. The player\'s current position is tracked by a variable called `position`, which initially starts at 0. The player can only make a specific set of jumps, expressed as changes in `position`. Create a program that determines the minimum number of jumps required for the player to reach exactly the position N. If it is not possible to reach exactly position N, the program should output `-1`. The allowed jumps are provided as a list of positive integers. The player can only move forward by jumping one of these allowed distances from their current position. The game does not allow jumping backward or making any other moves. Each jump must make use of one of the allowed distances. Input The input is given in the following format: ``` N K jump1 jump2 ... jumpK ``` - `N` (1 ≤ N ≤ 1000): The target position on the number line. - `K` (1 ≤ K ≤ 10): The number of allowed jump distances. - `jumpi` (1 ≤ jumpi ≤ 1000): An allowed jump distance. Each value is a positive integer. Output The program should print the minimum number of jumps required to reach exactly position N. If it is not possible to reach position N, output `-1`. Examples Input ``` 10 3 2 3 5 ``` Output ``` 2 ``` Explanation: One possible way to reach 10 in minimum jumps is: 0 -> 5 -> 10 (jump distances 5 and 5). Input ``` 15 2 4 6 ``` Output ``` -1 ``` Explanation: It is not possible to reach exactly position 15 with jumps of distances 4 or 6. Input ``` 7 3 1 3 5 ``` Output ``` 3 ``` Explanation: One possible way to reach 7 in minimum jumps is: 0 -> 1 -> 4 -> 7 (jump distances 1, 3, 3 respectively).","solution":"from collections import deque def min_jumps_to_reach(N, K, jumps): visited = [False] * (N + 1) queue = deque([(0, 0)]) # (position, number of jumps) while queue: current_position, current_jumps = queue.popleft() for jump in jumps: next_position = current_position + jump if next_position == N: return current_jumps + 1 if next_position < N and not visited[next_position]: visited[next_position] = True queue.append((next_position, current_jumps + 1)) return -1"},{"question":"Given a list of integers, the task is to encode it such that consecutive elements that are equal are represented by a tuple of the number of repetitions and the element itself. If an element occurs only once, it should be represented simply by the element itself. Example 1: Input: arr = [1, 1, 1, 2, 3, 3, 4, 4, 4, 4] Output: [(3, 1), 2, (2, 3), (4, 4)] Explanation: The first element 1 is repeated 3 times, the second element 3 is repeated twice, and the fourth element 4 is repeated 4 times. Example 2: Input: arr = [5, 5, 6, 7, 7, 8, 8, 8] Output: [(2, 5), 6, (2, 7), (3, 8)] Explanation: The first element 5 is repeated 2 times, the second element 7 is repeated twice, and the fourth element 8 is repeated 3 times. Your Task: You don\'t need to read input or print anything. Complete the function encode_list() which takes a list of integers as input and returns the encoded list as described. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(arr) ≤ 10^{5}","solution":"def encode_list(arr): Encode list such that consecutive duplicate elements are represented by a tuple of the number of repetitions and the element itself. Parameters: arr (list): A list of integers Returns: list: Encoded list if not arr: return [] encoded = [] count = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: count += 1 else: if count == 1: encoded.append(arr[i - 1]) else: encoded.append((count, arr[i - 1])) count = 1 # Append the last element or tuple if count == 1: encoded.append(arr[-1]) else: encoded.append((count, arr[-1])) return encoded"},{"question":"In a certain city, there is a special market that operates weekly. The market authorities track the purchases made by vendors to analyze the sales trends and manage inventory better. Each vendor records the sales of their items in specific categories and reports back. You are required to write a program to process sales data from the vendors to determine the number of items sold in each category. The categories are as follows: Category | Description -------------|------------- Fruits | Sales of all types of fruits Vegetables | Sales of all types of vegetables Grains | Sales of all types of grains Dairy | Sales of all types of dairy products Meat | Sales of all types of meat products Input The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 1000000), representing the number of sales records for that dataset. This is followed by n lines, each containing a string and an integer separated by a space. The string represents the category and the integer represents the number of items sold in that category. The end of the input is indicated by a line containing a single zero. Output For each dataset, output the total number of items sold in each category in the following format: Line 1: Number of fruits sold Line 2: Number of vegetables sold Line 3: Number of grains sold Line 4: Number of dairy products sold Line 5: Number of meat products sold Example Input 5 Fruits 20 Vegetables 30 Grains 25 Dairy 15 Meat 10 7 Fruits 25 Vegetables 32 Grains 21 Dairy 12 Meat 14 Vegetables 18 Grains 9 0 Output 20 30 25 15 10 25 50 30 12 14","solution":"def process_sales_data(input_data): Process the sales data and return the number of items sold in each category. categories = [\\"Fruits\\", \\"Vegetables\\", \\"Grains\\", \\"Dairy\\", \\"Meat\\"] output = [] index = 0 while index < len(input_data): n = int(input_data[index]) if n == 0: break index += 1 sales_summary = dict.fromkeys(categories, 0) for _ in range(n): record = input_data[index].split() category, sold = record[0], int(record[1]) sales_summary[category] += sold index += 1 for category in categories: output.append(sales_summary[category]) return output"},{"question":"You have been tasked with developing a software module that helps identify the most frequently occurring word in a given list of words. If there is a tie for the most frequent word, return the word that comes first alphabetically. You need to implement a function that takes a list of strings (words) and outputs the most frequently occurring word. To help you test your implementation, you will receive multiple test cases. Each test case consists of an integer n, which is the number of words in the list, followed by the list of n words. Input Format: The first line of input contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case consists of: - An integer n (1 ≤ n ≤ 10^5), representing the number of words. - Followed by n words, each a string of lowercase English letters (1 ≤ length of word ≤ 50). Output Format: For each test case, output the most frequently occurring word. If there is a tie, output the word that comes first alphabetically. SAMPLE INPUT 2 5 apple banana apple orange banana 3 car bike car SAMPLE OUTPUT apple car","solution":"def most_frequent_word(n, words): Returns the most frequently occurring word in the list. In case there is a tie, returns the word that comes first alphabetically. from collections import Counter word_count = Counter(words) max_frequency = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_frequency] return min(most_frequent_words)"},{"question":"You are given an integer array `arr` and a target integer value `target`. Your task is to determine if there exist three distinct indices i, j, and k in the array such that `arr[i] + arr[j] + arr[k] = target`. Write a function that takes two arguments: 1. arr: a list of integers 2. target: an integer Return `True` if there are such indices; otherwise, return `False`. # Example 1: ``` Input: arr = [1, 2, 3, 4, 5], target = 9 Output: True Explanation: We can use indices 0, 3, and 4 -> 1 + 4 + 4 = 9 ``` # Example 2: ``` Input: arr = [1, 2, 3, 4, 5], target = 20 Output: False Explanation: There are no such three distinct indices in arr such that their sum equals 20. ``` # Note: - The array length will be at least 3 and at most 3000. - The elements of the array are integers and may contain positive or negative values. - The target value is an integer.","solution":"def three_sum_to_target(arr, target): Determines if there exist three distinct indices i, j, k in arr such that arr[i] + arr[j] + arr[k] equals target. arr.sort() n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue # skip duplicate values left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"You are given a tree with `n` vertices labeled from 1 to `n`. A tree is an acyclic connected graph. Each vertex has a value assigned to it. Your task is to find two vertices in the tree such that the sum of the values of these two vertices is maximum. The tree is represented as an undirected graph with `n-1` edges. -----Input----- The first line contains a single integer `n` (2 ≤ n ≤ 100,000) — the number of vertices in the tree. The second line contains `n` integers `v1, v2, ..., vn` (1 ≤ vi ≤ 10^9), where `vi` is the value of the `i`-th vertex. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), denoting an edge between vertex `u` and vertex `v`. -----Output----- Print a single integer — the maximum sum of values of any two vertices in the tree. -----Examples----- Input 5 3 2 1 4 5 1 2 1 3 3 4 3 5 Output 9 Input 3 10 20 30 1 2 2 3 Output 50 -----Note----- In the first example, the tree has 5 vertices with values 3, 2, 1, 4, and 5 respectively. The best choice is vertices 1 and 2 which sum to the maximum value of 9 (4 + 5). In the second example, the tree has 3 vertices with values 10, 20, and 30 respectively. The best choice is vertices 2 and 3 which sum to the maximum value of 50 (20 + 30).","solution":"def max_sum_of_two_vertices(n, values, edges): Finds the maximum sum of values of any two vertices in a given tree. :param n: int, number of vertices in the tree :param values: List[int], values assigned to each vertex :param edges: List[Tuple[int, int]], edges representing the tree :return: int, maximum sum of values of any two vertices in the tree # Find the two vertices with the highest values. if n == 2: return values[0] + values[1] max1, max2 = float(\'-inf\'), float(\'-inf\') for value in values: if value > max1: max2 = max1 max1 = value elif value > max2: max2 = value return max1 + max2"},{"question":"In this exercise, you are given a list of integers. Your task is to find and return the subarray with the largest possible sum. If there are multiple subarrays with the same maximum sum, return any one of them. For example, given the list `lst = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the subarray with the largest sum is `[4, -1, 2, 1]`, which has a sum of 6. ```python def max_subarray(lst): #Implementation here # Test Cases # Test Case 1 # The subarray with the largest sum is [4, -1, 2, 1] with a sum of 6. print(max_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4])) # Test Case 2 # The subarray with the largest sum is [1, 2, 3] with a sum of 6. print(max_subarray([1, 2, 3])) # Test Case 3 # The subarray with the largest sum is [5] with a sum of 5. print(max_subarray([-1, -2, -3, -4, 5])) # Test Case 4 # The subarray with the largest sum is [-1, -2, 6, -5, 4] with a sum of 4. print(max_subarray([-1, -2, 6, -5, 4])) ``` Input constraints are: - `len(lst) > 0` - `-1e4 <= lst[i] <= 1e4` Your solution should have a time complexity better than O(n^2). Good luck!","solution":"def max_subarray(lst): This function finds and returns the subarray with the largest possible sum from the given list of integers. If there are multiple subarrays with the same maximum sum, it will return any one of them. max_sum = lst[0] current_sum = lst[0] start = 0 end = 0 temp_start = 0 for i in range(1, len(lst)): if current_sum < 0: current_sum = lst[i] temp_start = i else: current_sum += lst[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return lst[start:end + 1]"},{"question":"Zara loves painting and she wishes to paint a new mural on her room wall. She is planning to paint it using `n` different colors. Each color is represented by a unique integer from 1 to n. She wants the mural to follow a specific pattern where no two adjacent subsections of the same length should have the exact same sequence of colors. Your task is to determine the number of valid ways Zara can paint the mural. Consider `subsection` of lengths `k` such that 1 le k le n where `n` is the length of the mural. ---Input--- First line of the input contains one integer `n` (2 le n le 100) — the length of the mural and the number of distinct colors available. ---Output--- Print the number of valid ways to paint the mural. ---Examples--- Input 2 Output 2 Input 3 Output 6 ---Note--- In the first example, either `1 2` or `2 1` are the valid ways to paint the mural as no two-subsection of the same length appears adjacent. For example, `1 1` and `2 2` are invalid as they repeat the same color in adjacent sections. In the second example, all permutations of length 3 where no two adjacent subsections, including the subsections of length 1 and 2, are equal would count to result. So, `1 2 3`, `1 3 2`, `2 1 3`, `2 3 1`, `3 1 2`, and `3 2 1` are valid ways to paint the mural.","solution":"import itertools def count_valid_murals(n): def is_valid_mural(mural): length = len(mural) for k in range(1, length): for i in range(length - k): if mural[i:i + k] == mural[i + k:i + 2 * k]: return False return True colors = list(range(1, n + 1)) valid_count = 0 for mural in itertools.permutations(colors): if is_valid_mural(mural): valid_count += 1 return valid_count"},{"question":"Python: Subarray with Given Sum problem Nina is given an array of non-negative integers `arr` and an integer `S`. She needs to find a contiguous subarray that sums up to `S`. This subarray should be as short as possible. If there are multiple subarrays with the same sum and length, return the first one you encounter. If no such subarray exists, return an empty array. Write a function `find_subarray_with_sum(arr, S)` that returns the indices of the start and end of the subarray as a tuple (start_index, end_index). If no subarray with sum `S` exists, return (-1, -1). Input format The function takes two inputs: * `arr`: A list of non-negative integers with length n. * `S`: An integer representing the target sum. Constraint * 1 <= n <= 10^5 * 0 <= arr[i] <= 10^4 * 0 <= S <= 10^9 Output format Output is a tuple containing two integers, the start and end indices of the subarray. If no such subarray is found, output should be (-1, -1). Example 1 Input arr = [1, 4, 20, 3, 10, 5] S = 33 Output (2, 4) Example 2 Input arr = [1, 4, 0, 0, 3, 10, 5] S = 7 Output (1, 4) Example 3 Input arr = [1, 1, 1, 1, 1, 1, 1, 1] S = 5 Output (0, 4) Example 4 Input arr = [1, 2, 3, 4, 5] S = 15 Output (0, 4) Notes Make sure the function is optimized to handle large input sizes within the given constraints.","solution":"def find_subarray_with_sum(arr, S): Returns the starting and ending indices of the subarray that sums to S. If no such subarray exists, returns (-1, -1). n = len(arr) current_sum = 0 start_index = 0 for end_index in range(n): current_sum += arr[end_index] while current_sum > S and start_index <= end_index: current_sum -= arr[start_index] start_index += 1 if current_sum == S: return (start_index, end_index) return (-1, -1)"},{"question":"You are given an array of integers representing the amount of rainwater trapped on top of each building. You need to compute the total amount of trapped rainwater. The width of each building is 1 unit. For example, given [0,1,0,2,1,0,1,3,2,1,2,1], the amount of rainwater trapped would be 6 units. To help you better understand the problem, here is a diagram visualizing the input array: | 3 | # 2 | # # # # # 1 | # # # # # # # # 0 | # # # # # # # # # # +--------------------- 0 1 0 2 1 0 1 3 2 1 2 1 Write a function `trap_rainwater` that takes in a list of integers and returns the total amount of trapped rainwater. Example: ```python def trap_rainwater(heights: List[int]) -> int: # Your code here # Test case print(trap_rainwater([0,1,0,2,1,0,1,3,2,1,2,1])) # Expected output: 6 ``` Your implementation should work for any non-negative integer values in the input list.","solution":"from typing import List def trap_rainwater(heights: List[int]) -> int: Calculate the amount of trapped rainwater given an array of building heights if not heights: return 0 left, right = 0, len(heights) - 1 left_max = right_max = 0 water_trapped = 0 while left <= right: if heights[left] <= heights[right]: if heights[left] >= left_max: left_max = heights[left] else: water_trapped += left_max - heights[left] left += 1 else: if heights[right] >= right_max: right_max = heights[right] else: water_trapped += right_max - heights[right] right -= 1 return water_trapped"},{"question":"You are given a directed, weighted graph with `N` nodes and `M` edges. Each node is identified by a unique number from 1 to N. Some nodes are special nodes that you have to travel through exactly once. Your task is to find the shortest path from the starting node to the ending node, traveling exactly once through each of the special nodes. The input format is as follows: * The first line contains three integers `N`, `M`, and `S`, representing the number of nodes, the number of edges, and the number of special nodes respectively. * The next S lines contain the indexes of the special nodes. * The next M lines contain three integers each: `u`, `v`, and `w`. This indicates that there is a directed edge from node `u` to node `v` with weight `w`. You are to output the length of the shortest path that starts at node 1, ends at node N, and travels through each special node exactly once. If no such path exists, output `-1`. Example Input 6 7 2 2 5 1 2 2 1 3 3 2 3 1 3 4 4 4 5 2 5 6 1 2 6 5 Output 10 Explanation: The shortest path that travels through special nodes 2 and 5 is: 1 -> 2 -> 3 -> 4 -> 5 -> 6 with a total cost of 10.","solution":"import heapq from itertools import permutations def dijkstra(graph, start): Applies Dijkstra\'s algorithm to find the shortest paths from the start node to all other nodes in the given graph. N = len(graph) distances = [float(\'inf\')] * N distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_path_with_special_nodes(N, M, S, special_nodes, edges): Finds the shortest path from node 1 to N while traveling through each of the special nodes exactly once. graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) special_nodes = [1] + special_nodes + [N] shortest_path = float(\'inf\') # Dijkstra\'s results for each node in special_nodes dijkstra_results = {} for node in special_nodes: dijkstra_results[node] = dijkstra(graph, node) # Generate all permutations of intermediate special nodes intermediate_nodes = special_nodes[1:-1] for perm in permutations(intermediate_nodes): path_cost = 0 current_node = 1 valid_path = True for next_node in perm: if dijkstra_results[current_node][next_node] == float(\'inf\'): valid_path = False break path_cost += dijkstra_results[current_node][next_node] current_node = next_node if valid_path and dijkstra_results[current_node][N] != float(\'inf\'): path_cost += dijkstra_results[current_node][N] shortest_path = min(shortest_path, path_cost) return shortest_path if shortest_path != float(\'inf\') else -1"},{"question":"Mira and her friend Sam are developing a program for a game competition. As part of the game mechanics, they need to generate a sequence based on certain rules. Specifically, they need to generate a sequence of integers of the form: f(n) = a1 * f(n-1) + a2 * f(n-2) + ... + ak * f(n-k) Where a1, a2, ..., ak are constant coefficients and the initial k terms of the sequence are given. Your task is to help Mira and Sam by writing a function that computes the nth term of the sequence. Input The first line contains two integers k (1 ≤ k ≤ 10^3) and n (1 ≤ n ≤ 10^9) — the number of coefficients and the term position to compute, respectively. The second line contains k integers a1, a2, ..., ak (|ai| ≤ 10^9) which are the coefficients. The third line contains k integers f1, f2, ..., fk (|fi| ≤ 10^9) which are the initial terms of the sequence. Output Print a single integer — the nth term of the sequence. Examples Input 2 5 1 1 1 1 Output 5 Input 3 6 1 -1 1 1 2 3 Output 2 Input 1 4 2 3 Output 24","solution":"def matrix_mult(A, B, mod): Multiplies two matrices A and B under modulo mod. return [[sum(x * y for x, y in zip(A_row, B_col)) % mod for B_col in zip(*B)] for A_row in A] def matrix_pow(M, power, mod): Computes power of a square matrix M under modulo mod. size = len(M) # Identity matrix result = [[1 if i == j else 0 for j in range(size)] for i in range(size)] base = M while power: if power % 2 == 1: result = matrix_mult(result, base, mod) base = matrix_mult(base, base, mod) power //= 2 return result def nth_term_of_sequence(k, n, coefficients, initial_terms): mod = 10**9 + 7 # If n is within the initial terms directly return if n <= k: return initial_terms[n-1] % mod # Construct the transformation matrix transform_matrix = [[0] * k for _ in range(k)] for i in range(1, k): transform_matrix[i][i-1] = 1 transform_matrix[0] = coefficients[::-1] # Raise the matrix to the (n-k)th power to find the nth term result_matrix = matrix_pow(transform_matrix, n-k, mod) # Multiply the matrix by the initial terms result = sum(result_matrix[0][i] * initial_terms[k-i-1] for i in range(k)) % mod return result # Function to take input and call the nth_term_of_sequence function def main(): k, n = map(int, input().split()) coefficients = list(map(int, input().split())) initial_terms = list(map(int, input().split())) result = nth_term_of_sequence(k, n, coefficients, initial_terms) print(result)"},{"question":"In a particular game, you are given an array of integers `arr` of length `n`, and an integer `k`. You need to find the maximum sum of any contiguous subarray of length k. For example, if the array is [1, 4, 2, 10, 23, 3, 1, 0, 20] and k is 4, then the maximum sum subarray of length 4 is [4, 2, 10, 23] which sums to 39. Your task is to write a function that takes in the array `arr` and the integer `k`, and returns the maximum sum of any subarray of length k. Implement the function in Python: ```python def max_sum_subarray(arr: [int], k: int) -> int: # your code here pass ``` -----Constraints----- - The length of the array `n` and the integer `k` are such that 1 ≤ k ≤ n ≤ 10^5. - Each element of the array is an integer where -10^4 ≤ arr[i] ≤ 10^4. -----Input----- The function takes input in the following format: - arr: List of integers - k: Integer representing the subarray length -----Output----- Return the maximum sum of any contiguous subarray of length k. -----Sample Input----- arr = [1, 4, 2, 10, 23, 3, 1, 0, 20] k = 4 -----Sample Output----- 39","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any contiguous subarray of length k. if len(arr) < k: return None # Initial sum of the first window max_sum = current_sum = sum(arr[:k]) # Sliding the window over the array for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes a list of integers and merges it into a single sorted list, ensuring that all unique numbers appear only once. The function should handle both negative and positive integers. # Examples ``` merge_and_sort([4, 1, -2, 10, -5], [5, 0, -2, 1, 8]) ==> [-5, -2, 0, 1, 4, 5, 8, 10] merge_and_sort([3, 3, 3, 2], [1, 5, 2, 5]) ==> [1, 2, 3, 5] merge_and_sort([15, 11], [9, 13, 8, 11]) ==> [8, 9, 11, 13, 15] merge_and_sort([1, -1, 2], [-1, 3, -2]) ==> [-2, -1, 1, 2, 3] ```","solution":"def merge_and_sort(list1, list2): Merges two lists into a single sorted list with unique elements. merged_set = set(list1).union(set(list2)) return sorted(merged_set)"},{"question":"You have to write a function named `balanceBrackets` that takes in a `string` and returns a `boolean` indicating whether the sequence of brackets in the string is balanced. The brackets considered are: `()`, `{}`, `[]`. A sequence of brackets is considered balanced if: - Every opening bracket has a corresponding closing bracket of the same type. - Brackets are properly nested. Examples: `input`: \\"( [ { } ] )\\" `output`: true `input`: \\"( { [ ] ) }\\" `output`: false `input`: \\"([)]\\" `output`: false `input`: \\"{[()]}\\" `output`: true You can assume that the input string will only contain bracket characters and possibly white spaces. The function should ignore any white spaces.","solution":"def balanceBrackets(s): Checks if the sequence of brackets in the string is balanced. Args: s (str): Input string containing brackets and possibly spaces. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack[-1] != matching_bracket[char]: return False stack.pop() return not stack"},{"question":"A local community is planning a large festival and they want to design a system to manage the seating arrangements for the event. The festival will have several stages where performances will take place, and each stage has a limited number of seats. You have been asked to create an algorithm that optimizes seating arrangements based on pre-booked tickets. Given a list of bookings, where each booking specifies a requested stage and the number of seats required, your task is to determine whether all the bookings can be fulfilled without any conflicts. A booking can be fulfilled if the number of seats requested for a stage does not exceed the number of available seats for that stage. Constraints * 1 ≤ number of stages ≤ 25 * 1 ≤ number of bookings ≤ 100 * 1 ≤ seats available on each stage ≤ 1000 * 1 ≤ seats requested in each booking ≤ 1000 Input The input consists of several datasets. Each dataset starts with an integer s, the number of stages. The next line contains s integers representing the number of available seats for each stage. The line after that contains an integer b, the number of bookings. The following b lines each contain two integers: the first integer is the stage number (0-indexed) for the booking, and the second integer is the number of seats required for that booking. The end of input is represented by a case with s = 0. Output For each dataset, if all the bookings can be fulfilled, print \\"All bookings can be fulfilled\\". Otherwise, print \\"Some bookings cannot be fulfilled\\". Example Input 2 10 5 3 0 3 1 4 0 6 2 10 5 3 0 12 1 4 0 2 0 Output Some bookings cannot be fulfilled All bookings can be fulfilled","solution":"def check_bookings(datasets): Given several datasets, check if all bookings can be fulfilled for each dataset. Parameters: datasets (list): A list of datasets, where each dataset consists of: - first line: an integer s representing number of stages - second line: s integers representing number of available seats for each stage - third line: an integer b representing number of bookings - next b lines: each line consists of two integers representing stage number and number of seats required Returns: list: For each dataset, return \\"All bookings can be fulfilled\\" if all bookings can be met, otherwise \\"Some bookings cannot be fulfilled\\". results = [] i = 0 while i < len(datasets): s = datasets[i] if s == 0: break i += 1 available_seats = datasets[i] i += 1 b = datasets[i] i += 1 bookings = datasets[i:i+b] i += b seats_filled = [0] * s for stage, seats_needed in bookings: seats_filled[stage] += seats_needed if all(seats_filled[i] <= available_seats[i] for i in range(s)): results.append(\\"All bookings can be fulfilled\\") else: results.append(\\"Some bookings cannot be fulfilled\\") return results"},{"question":"A company offers a subscription-based streaming service. Each user can subscribe several times, each for a different period. The company wants to know how many users are subscribed at any point in time. Write a function to calculate the number of active users for given intervals of subscription based on a list of queries. Constraints * 1 leq n leq 1000 (number of subscriptions) * 1 leq q leq 100 (number of queries) * 1 leq L_i < R_i leq 10^6 (each subscription interval) * 1 leq T_j leq 10^6 (query time points) Input First integer n, number of subscriptions. Next n lines each contain two integers L_i and R_i (start and end of the subscription). Followed by an integer q, number of queries. Next q lines, each containing a single integer T_j (query time point). Output For each query, output the number of active users at time T_j. Example Input 3 1 5 2 6 4 8 2 2 6 Output 2 1","solution":"def active_users_at_times(subscriptions, queries): Returns the number of active users at each query time. :param subscriptions: List of tuples, each tuple is (L, R) representing the start and end time of a subscription :param queries: List of query times :return: List of active users at each query time results = [] for time in queries: count = sum(1 for L, R in subscriptions if L <= time < R) results.append(count) return results"},{"question":"A string of lowercase letters is called a \\"double-letter\\" string if every character in the string appears exactly twice. For example, \\"aabb\\" and \\"abba\\" are double-letter strings, but \\"abc\\" and \\"aabbc\\" are not. Given a string consisting of lowercase letters, determine whether it can be rearranged to form a double-letter string. If it can, return the lexicographically smallest double-letter string that can be formed. Otherwise, return an empty string. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string of n lowercase letters. Output Print the lexicographically smallest double-letter string that can be formed, or an empty string if it is impossible to form such a string. Examples Input 4 aabb Output aabb Input 6 bbaacc Output aabbcc Input 5 abcde Output Note In the first example, the string \\"aabb\\" is already a double-letter string. In the second example, the string \\"bbaacc\\" can be rearranged to form \\"aabbcc\\", which is the lexicographically smallest double-letter string. In the third example, it is not possible to rearrange \\"abcde\\" into a double-letter string because each character doesn\'t appear exactly twice.","solution":"def smallest_double_letter_string(n, s): from collections import Counter # Count occurrences of each character count = Counter(s) # Check if every character appears exactly twice if all(value == 2 for value in count.values()): return \\"\\".join(sorted(s)) else: return \\"\\""},{"question":"A contest is organized where participants are required to guess a number between 1 and 100. The organizer selects a random number within this range but does not reveal it to the participants. Instead, the participants will continuously guess the number, and the organizer will provide feedback indicating whether the guess is too high, too low, or correct. Your task is to automate the process by creating a program that continuously guesses the number until it finds the correct one using an efficient strategy (e.g., binary search). ------ Input Format ------ - The first (and only) line of input contains the correct number (an integer between 1 and 100). ------ Output Format ------ Print each guess followed by the response in the format \\"<guess> - <feedback>\\". If the feedback is \\"Correct\\", terminate the program. ------ Constraints ------ - The correct number is an integer between 1 and 100. ------ Sample Input 1 ------ 68 ------ Sample Output 1 ------ 50 - Too low 75 - Too high 62 - Too low 68 - Correct ------ Sample Input 2 ------ 42 ------ Sample Output 2 ------ 50 - Too high 25 - Too low 37 - Too low 43 - Too high 40 - Too low 41 - Too low 42 - Correct","solution":"def guess_number(correct_number): This function guesses the correct number between 1 and 100 utilizing a binary search strategy. It prints each guess followed by the feedback until the correct number is found. low = 1 high = 100 guess = (low + high) // 2 while True: if guess < correct_number: print(f\\"{guess} - Too low\\") low = guess + 1 elif guess > correct_number: print(f\\"{guess} - Too high\\") high = guess - 1 else: print(f\\"{guess} - Correct\\") break guess = (low + high) // 2"},{"question":"Diego is an avid collector of rare stamps, and he maintains a collection represented as a grid of m x n cells. Each cell in the grid can either contain a stamp or be empty. Diego loves patterns and symmetric designs, and he has decided to rearrange his collection such that the entire grid is symmetrical about its center. A grid is said to be symmetrical about its center if the cell in the i-th row and j-th column contains the same element as the cell in the (m-i+1)-th row and (n-j+1)-th column for all valid i and j. Diego wants to know if it is possible to rearrange the contents of his collection to achieve such symmetry. If it is possible, print \\"Yes\\". Otherwise, print \\"No\\". Input The first line contains two integers m and n (1 ≤ m, n ≤ 50) — the dimensions of the grid. The next m lines each contain n characters, either \'S\' (representing a stamp) or \'.\' (representing an empty cell). Output Print \\"Yes\\" if it is possible to rearrange the grid to be symmetrical about its center, otherwise print \\"No\\". Examples Input 4 4 S... ..S. .S.. ...S Output Yes Input 3 4 S..S .... SS.. Output No Explanation For the first example: A possible symmetrical rearrangement is: S... -> ....S...S...S...S... .S.. -> ...S..S..S..S.. ..S. -> .S.....S...S... ...S -> S...S So the answer is \\"Yes\\". For the second example: No symmetrical rearrangement exists that fits the constraints. So the answer is \\"No\\".","solution":"def is_symmetric_possible(m, n, grid): stamps = 0 for row in grid: stamps += row.count(\'S\') # Check if the number of stamps is even, as we require pairs to form symmetry if stamps % 2 != 0: return \\"No\\" # Check for the feasibility of forming pairs positions = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == \'S\'] pairs = set() while positions: i, j = positions.pop() sym_i, sym_j = m - 1 - i, n - 1 - j if (sym_i, sym_j) in positions: positions.remove((sym_i, sym_j)) pairs.add(((i, j), (sym_i, sym_j))) else: return \\"No\\" return \\"Yes\\" # Example usage: m = 4 n = 4 grid = [ \\"S...\\", \\"..S.\\", \\".S..\\", \\"...S\\" ] print(is_symmetric_possible(m, n, grid)) # Output: Yes"},{"question":"You are given a robot that can move in a 2-dimensional grid. The robot is initially located at the top-left corner of the grid, at position (0, 0), facing right. The robot can receive a sequence of commands to move in the grid, where each command is one of the following: - \'G\' (go): move one step forward in the direction the robot is currently facing. - \'L\' (turn left): turn 90 degrees to the left. - \'R\' (turn right): turn 90 degrees to the right. The robot will not move outside the bounds of the grid. You need to determine if a robot, after executing the given sequence of commands repeatedly, will return to its initial position (0, 0) or stay within a finite loop. Input: - An integer T, denoting the number of test cases. - For each test case: - The first line contains a single integer N (1 <= N <= 10^4), the length of the command sequence. - The second line contains a string of length N, representing the sequence of commands. Output: - For each test case, output \\"YES\\" if the robot can return to its initial position or stay within a finite loop, otherwise output \\"NO\\". Constraints: - The grid is infinite. - The command string contains only the characters \'G\', \'L\', and \'R\'. SAMPLE INPUT: 3 4 GLGL 8 GGRRGGRR 6 GGRGLG SAMPLE OUTPUT: YES YES NO Explanation: Test Case #1: After executing \\"GLGL\\" repeatedly, the robot will move in a square and will return to its initial position. Test Case #2: The robot will face different directions and move back to the initial column and keep repeating the same movements eventually staying within bounds. Test Case #3: The robot moves straight and changes directions but doesn’t form a loop that will return it to the initial position or stay within any confined area.","solution":"def is_robot_bounded(commands): Determines if the robot will return to its initial position or stay within a finite loop after executing the given sequence of commands repeatedly. # Directions represented as (dx, dy) # (0, 1) means moving up, (1, 0) means moving right, (0, -1) means moving down, (-1, 0) means moving left directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def move_and_check(cmd_string): x, y = 0, 0 # Starting position of the robot direction_index = 0 # Start facing right for cmd in cmd_string: if cmd == \'G\': x += directions[direction_index][0] y += directions[direction_index][1] elif cmd == \'L\': direction_index = (direction_index - 1) % 4 elif cmd == \'R\': direction_index = (direction_index + 1) % 4 # Check if the robot returned to (0, 0) or not facing right if (x == 0 and y == 0) or direction_index != 0: return True else: return False return move_and_check def process_input(T, testcases): results = [] is_robot_bounded_function = is_robot_bounded(\\"\\") for i in range(T): N = testcases[i][0] commands = testcases[i][1] if is_robot_bounded_function(commands): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are organizing a marathon event and need to keep track of the participants\' completion times. The marathon has three different categories based on the distance: 5 km, 10 km, and 21 km. Write a program that calculates the average completion time for each category. Input The input is given in the following format: n times Where n is the total number of participants (1 ≤ n ≤ 10000), followed by n pairs of values. Each pair consists of a string and an integer: the string is the category (\\"5km\\", \\"10km\\", or \\"21km\\"), and the integer represents the participant\'s completion time in minutes. Output Output three lines, each showing the average completion time for the 5 km, 10 km, and 21 km categories. If there are no participants in a category, output \\"No participants\\" for that category. The averages should be printed to one decimal place. Examples Input 6 5km 25 10km 60 21km 130 5km 30 10km 55 21km 140 Output 27.5 57.5 135.0 Input 3 5km 22 5km 28 5km 26 Output 25.3 No participants No participants Input 1 21km 150 Output No participants No participants 150.0","solution":"def calculate_averages(n, times): categories = {\\"5km\\": [], \\"10km\\": [], \\"21km\\": []} for category, time in times: if category in categories: categories[category].append(time) averages = [] for category in [\\"5km\\", \\"10km\\", \\"21km\\"]: if categories[category]: average = sum(categories[category]) / len(categories[category]) averages.append(f\\"{average:.1f}\\") else: averages.append(\\"No participants\\") return averages"},{"question":"Serena is managing a warehouse where items are stored in a grid. The warehouse is represented by a matrix B with N rows and M columns. Each cell in the matrix contains an item with a certain value. Serena needs to perform a number of updates to the warehouse. Each update consists of a command to increment the value of each item in a submatrix by a certain value v. A submatrix is defined by its top-left and bottom-right corners. You need to implement this updating process on the given matrix and output the final state of the matrix after all the updates. ---Input:--- - The first line contains two integers, N and M, the number of rows and columns in the warehouse matrix. - The next N lines each contain M integers, representing the value of each item in the warehouse. - The following line contains an integer, U, the number of updates. - The next U lines each contain five integers, x1, y1, x2, y2, and v. Here, (x1, y1) and (x2, y2) are the top-left and bottom-right coordinates of the submatrix to be updated, and v is the value to be added to each element within that submatrix. ---Output:--- - Print the matrix after performing all the updates, in the form of N lines, each containing M integers. ---Constraints--- - 1 leq N, M leq 1000 - 0 leq B_{ij} leq 1000 - 1 leq U leq 10^6 - 1 leq x1 leq x2 leq N - 1 leq y1 leq y2 leq M - -1000 leq v leq 1000 ---Sample Input:--- 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 2 2 3 3 -2 ---Sample Output:--- 2 3 3 5 4 4 7 6 7 ---Explanation--- For the first update, we increment each value in the submatrix defined by top-left (1, 1) and bottom-right (2, 2) by 1. For the second update, we decrease each value in the submatrix defined by top-left (2, 2) and bottom-right (3, 3) by 2. The final state of the matrix after all updates is displayed in the output.","solution":"def apply_updates(N, M, matrix, updates): for x1, y1, x2, y2, v in updates: for i in range(x1-1, x2): for j in range(y1-1, y2): matrix[i][j] += v return matrix"},{"question":"You are in charge of organizing various shows in a theatre. There are `n` shows, each show has a start time and an end time. You want to make the best use of the theatre by scheduling as many shows as possible without any overlap in time. Given the start and end times of the shows, determine the maximum number of shows you can schedule. Input - The first line contains a single integer `n` (1 ≤ n ≤ 100000) — the number of shows. - The next `n` lines each contain two integers `start` and `end` (1 ≤ start < end ≤ 10^9) — the start and end times of each show. Output - Output a single integer — the maximum number of shows that can be scheduled without overlaps. Examples Input 5 1 4 2 5 5 6 7 9 8 10 Output 3 Input 3 1 3 2 4 3 5 Output 2 Note For the first sample testcase, the maximum number of non-overlapping shows that can be scheduled is 3. The optimal schedule would be the shows with time intervals [(1, 4), (5, 6), (7, 9)]. For the second testcase, you can schedule the shows with intervals [(1, 3), (3, 5)] without any overlap, giving the maximum count as 2.","solution":"def max_non_overlapping_shows(n, shows): Determines the maximum number of non-overlapping shows that can be scheduled. Parameters: n (int): Number of shows shows (list of tuple): List containing tuples of (start, end) times of each show Returns: int: Maximum number of non-overlapping shows # Sort the shows by their end times shows.sort(key=lambda show: show[1]) # Initialize counters count = 0 end_time = 0 for show in shows: # If the start time of the current show is after the end time of last selected show if show[0] >= end_time: # Select this show end_time = show[1] count += 1 return count"},{"question":"The city of Gridland is structured as an N x M grid. Each cell in the grid can either be empty, or contain an obstacle. An obstacle blocks movement through that cell. You are given the task of finding the number of unique paths that can be taken to travel from the top-left corner of the grid to the bottom-right corner, only being able to move right or down at any step, and without passing through any obstacles. INPUT The first line of input contains the number of test cases, T. Each test case starts with two integers, N and M, which represent the number of rows and columns in the grid respectively. The next N lines each contain M integers, where each integer is either 0 or 1. A 0 represents an empty cell and a 1 represents an obstacle. OUTPUT For each test case, print \\"Case T: P\\" in a single line. T is the case number, starting with 1. P is the number of unique paths from the top-left corner to the bottom-right corner avoiding obstacles. CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 Cells in the grid are either 0 (empty) or 1 (obstacle). SAMPLE INPUT 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 SAMPLE OUTPUT Case 1: 2 Case 2: 1","solution":"def unique_paths_with_obstacles(t, test_cases): def calculate_paths(grid, n, m): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] results = [] for idx, case in enumerate(test_cases): n, m, grid = case paths = calculate_paths(grid, n, m) results.append(f\\"Case {idx+1}: {paths}\\") return results"},{"question":"You are given an integer N and a matrix of size N x N with integers, M_ij where 1 ≤ i, j ≤ N. You are required to find the number of distinct magic squares within the given matrix. A magic square is a 3x3 grid in which the sum of every row, column, and both main diagonals is the same. -----Notes----- A magic square is a 3x3 grid such that the sums of the numbers in each row, each column, and both main diagonals are all equal. -----Constraints----- - 3 ≤ N ≤ 100 - 0 ≤ M_ij ≤ 9 -----Input----- Input is given from Standard Input in the following format: N M_11 M_12 ... M_1N M_21 M_22 ... M_2N ... M_N1 M_N2 ... M_NN -----Output----- Print the number of distinct 3x3 magic squares found within the given matrix. -----Sample Input----- 4 4 3 8 4 9 5 1 9 2 7 6 2 4 3 8 4 -----Sample Output----- 1 The distinct 3x3 magic square in this matrix is: 4 3 8 9 5 1 2 7 6 The sum of each row, column, and both diagonals is 15.","solution":"def is_magic_square(grid): Check if a 3x3 grid is a magic square. target_sum = sum(grid[0]) # Sum of the first row as reference # Check rows and columns for i in range(3): if sum(grid[i]) != target_sum: # Check row return False if sum(grid[j][i] for j in range(3)) != target_sum: # Check column return False # Check diagonals if sum(grid[i][i] for i in range(3)) != target_sum: return False if sum(grid[i][2-i] for i in range(3)) != target_sum: return False return True def count_magic_squares(matrix): Count the number of distinct 3x3 magic squares in the given N x N matrix. N = len(matrix) magic_squares = set() for i in range(N-2): for j in range(N-2): grid = [row[j:j+3] for row in matrix[i:i+3]] if is_magic_square(grid): magic_squares.add(tuple(map(tuple, grid))) return len(magic_squares) # Read input import sys input = sys.stdin.read def main(): data = input().split() N = int(data[0]) matrix = [] index = 1 for i in range(N): row = list(map(int, data[index:index+N])) matrix.append(row) index += N print(count_magic_squares(matrix)) if __name__ == \\"__main__\\": main()"},{"question":"In a software company, developers often need to work with different text files containing logs of various events. For efficient data processing, it is important to identify and extract certain patterns from the log files. One frequent task is to find the most common word in a log file, ignoring any numerical data, special characters, and considering word case insensitively. The task is to create a program that reads a large text file, processes it to remove any numbers and special characters, and then determines the most common word. If multiple words have the highest frequency, the lexicographically smallest one should be returned. # Input The program will read input from a single file \'logfile.txt\' which contains multiple lines of text. # Output The output should be the word that is the most frequent, with the following constraints: 1. Ignore numbers and special characters. 2. Consider words case insensitively. 3. If two words have the highest frequency, return the lexicographically smaller word. # Example logfile.txt ``` Error 404: Page not found. Request failed at 10:56. Warning: Unexpected input# at Login. Info: User \'JohnDoe\' signed in at 12:05. Logout initiated at 12:50. 404 requests should be handled gracefully. Error 503: Service unavailable at 13:34. ``` Expected Output ``` at ``` # Constraints 1. The file size will not exceed 10 MB. 2. Each line will not exceed 1000 characters. 3. The number of lines in the file will not exceed 10000. # Hint You might find it useful to use regular expressions to strip out numbers and special characters from the text and then convert it to lower case for uniformity. Using collections such as dictionaries or counters may help efficiently compute word frequencies.","solution":"import re from collections import Counter def most_common_word(file_path: str) -> str: # Open and read the entire file content with open(file_path, \'r\') as file: content = file.read() # Use regular expressions to remove numbers and special characters, keep only words words = re.findall(r\'b[a-zA-Z]+b\', content) # Convert all words to lower case for case-insensitive comparison words = [word.lower() for word in words] # Count the frequency of each word using a Counter word_counts = Counter(words) # Find the word with the highest frequency, if there\'s a tie, return the lexicographically smallest one most_common = min(word_counts.items(), key=lambda x: (-x[1], x[0])) return most_common[0]"},{"question":"You have just been hired as a software engineer at a new tech startup. Your first task is to write a program that helps the company’s internal HR department keep track of vacation days for all employees. Each employee has a certain number of allocated vacation days per year and can request to take a certain number of days off. They can also cancel their request, and the system should update the remaining vacation days accordingly. Additionally, HR wants to generate a report at any point to see how many vacation days each employee has left. -----Input----- The first line of input contains an integer N denoting the number of employees. Each of the next N lines contains two space-separated integers: the employee ID (a unique integer) and the allocated number of vacation days for the employee. This is followed by a series of operations, each on a new line, until the end of the input. The operations can be of three types: - \\"REQUEST EID D\\" where EID is an employee ID and D is the number of days being requested for vacation. - \\"CANCEL EID D\\" where EID is an employee ID and D is the number of days of vacation request being cancelled. - \\"REPORT\\" to generate a report of remaining vacation days for all employees. -----Output----- For each \\"REPORT\\" operation, output a line containing the remaining vacation days for all employees in the format: \\"EID1: remaining_days1, EID2: remaining_days2, ...\\" sorted by employee ID. -----Constraints:----- - 1 ≤ N ≤ 1000 - 1 ≤ EID ≤ 1000 - 1 ≤ D ≤ 365 - Each employee can request or cancel vacation days any number of times. - Number of operations in the input is ≤ 105 -----Example:----- Input: 3 1 20 2 15 3 10 REQUEST 1 5 REQUEST 2 3 REPORT CANCEL 1 2 REPORT REQUEST 3 5 REPORT Output: 1: 15, 2: 12, 3: 10 1: 17, 2: 12, 3: 10 1: 17, 2: 12, 3: 5","solution":"class VacationTracker: def __init__(self, num_employees, employee_data): Initializes the VacationTracker with given number of employees and their allocated vacation days. self.employees = {emp_id: allocated_days for emp_id, allocated_days in employee_data} self.remaining_days = dict(self.employees) def request_vacation(self, emp_id, days): Requests days off for the given employee. if emp_id in self.remaining_days: self.remaining_days[emp_id] -= days def cancel_vacation(self, emp_id, days): Cancels the requested days off for the given employee. if emp_id in self.remaining_days: self.remaining_days[emp_id] += days def generate_report(self): Generates a report of remaining vacation days for all employees, sorted by employee ID. report = \\", \\".join(f\\"{emp_id}: {days}\\" for emp_id, days in sorted(self.remaining_days.items())) return report def handle_operations(num_employees, employee_data, operations): tracker = VacationTracker(num_employees, employee_data) results = [] for operation in operations: op_parts = operation.split() if op_parts[0] == \\"REQUEST\\": emp_id = int(op_parts[1]) days = int(op_parts[2]) tracker.request_vacation(emp_id, days) elif op_parts[0] == \\"CANCEL\\": emp_id = int(op_parts[1]) days = int(op_parts[2]) tracker.cancel_vacation(emp_id, days) elif op_parts[0] == \\"REPORT\\": results.append(tracker.generate_report()) return results"},{"question":"A sequence of non-negative integers is called harmonic if every element after the second element is the sum of its two predecessors. Formally, a sequence a_1, a_2, ..., a_n is harmonic if for all i (3 <= i <= n), a_i = a_{i-1} + a_{i-2}. Given a sequence of non-negative integers, determine whether it is harmonic. If the sequence is harmonic, print \'YES\' and the common increment used to generate the sequence. Otherwise, print \'NO\'. -----Constraints----- - 1 leq n leq 10^5 - 0 leq a_i leq 10^9 (for all i = 1, 2, ..., n) - All values in the input are integers. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- If the sequence is harmonic, print \'YES\' on the first line and the increment on the second line. Otherwise, print \'NO\'. If n = 1 or n = 2, the sequence is always considered harmonic, and the increment is 0. -----Sample Input 1----- 5 1 1 2 3 5 -----Sample Output 1----- YES 1 -----Sample Input 2----- 4 0 1 1 3 -----Sample Output 2----- NO","solution":"def is_harmonic_sequence(n, sequence): Determine if the given sequence is harmonic and return \'YES\' with the increment or \'NO\'. Parameters: n (int): the length of the sequence sequence (list of int): the sequence of non-negative integers Returns: str: \'YES\' or \'NO\' int: the common increment if the sequence is harmonic if n == 1 or n == 2: return \'YES\', 0 for i in range(2, n): if sequence[i] != sequence[i-1] + sequence[i-2]: return \'NO\', None increment = sequence[1] - sequence[0] return \'YES\', increment def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) sequence = list(map(int, data[1:])) result, increment = is_hharmonic_sequence(n, sequence) print(result) if result == \'YES\': print(increment)"},{"question":"Given an array of non-negative integers `nums` and an integer `k`, you need to determine if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. If such indices exist, return `true`; otherwise, return `false`. -----Input----- - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains two integers `n` and `k`, where `n` is the length of the array and `k` is the maximum allowed index difference. - The second line contains `n` space-separated non-negative integers representing the elements of the array. -----Output----- For each test case, output a single line containing `true` if such indices exist, and `false` otherwise. -----Constraints----- - `1 le T le 10^4` - `1 le n le 10^5` - `0 le nums[i] le 10^9` - The sum of `n` over all test cases does not exceed `10^6` -----Example Input----- 2 5 2 1 2 3 1 5 6 3 1 2 3 4 5 6 -----Example Output----- true false -----Explanation----- Example case 1: There are two `1`s in the array at indices `0` and `3`. The absolute difference between these indices is `3`, which is greater than `2`. So we don\'t consider this. However, reversing `3` and `4` yields an array `[1 2 4 3 5]`. Now, the difference is `1`, which is within the allowed bound of `2`. Thus, the output is `true`. Example case 2: There are no duplicate numbers in the array, so the output is `false`.","solution":"def contains_nearby_duplicate(nums, k): Determines if there are two distinct indices i and j in the array such that: - nums[i] == nums[j] - abs(i - j) <= k num_dict = {} for i, num in enumerate(nums): if num in num_dict and i - num_dict[num] <= k: return True num_dict[num] = i return False"},{"question":"Given a 2D grid of size MxN filled with non-negative integers, you are required to determine the minimum path sum from the top-left corner to the bottom-right corner of the grid. The path must be composed of only rightward or downward movements. Example 1: Input: M = 3, N = 3 grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]] Output: 7 Explanation: The path 1→3→1→1→1 minimizes the sum to 7. Example 2: Input: M = 2, N = 2 grid = [[1, 2], [1, 1]] Output: 3 Explanation: The path 1→1→1 minimizes the sum to 3. Your Task: Since this is a function problem, you don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function minPathSum() that takes the grid and its dimensions M and N as parameters and returns the minimum path sum. Expected Time Complexity: O(M*N) Expected Auxiliary Space: O(M*N) Constraints: 1 ≤ M, N ≤ 100","solution":"def minPathSum(grid): Determines the minimum path sum from top-left to bottom-right of the grid. Parameters: grid (List[List[int]]): 2D list of non-negative integers representing the grid Returns: int: The minimum path sum if not grid or not grid[0]: return 0 M, N = len(grid), len(grid[0]) # Create a 2D DP array with the same dimensions as grid dp = [[0] * N for _ in range(M)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of dp array for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[M-1][N-1]"},{"question":"A warehouse management system is a crucial tool for efficiently handling inventory and orders. Your task is to implement a system to manage the inventory in a warehouse. The warehouse can store various items identified by their names. Each item has a quantity that represents how many units of that item are available in the warehouse. The system supports the following set of commands to manage the inventory: Command | Description ---|--- add \\"item-name\\" X | Add X units of the item specified by \\"item-name\\" to the inventory. If the item does not exist in the inventory, it is created with the given quantity. remove \\"item-name\\" X | Remove X units of the item specified by \\"item-name\\" from the inventory. If the item does not exist, this command is ignored. If X is greater than the quantity of the item in the inventory, remove all units of the item. check \\"item-name\\" | Output the quantity of the specified item in the inventory. If the item does not exist, output 0. list | Output all items in the inventory in lexicographical order, each followed by its quantity on a new line. You need to implement this system where a sequence of commands is executed on the inventory, and the resulting state of the inventory is displayed through the commands. Input The first line contains a positive integer N, representing the number of commands. Each of the next N lines contains a command as specified above. The name of an item is always a sequence of alphanumeric characters and has a length of at most 50 characters. The integer X in any command is a positive integer not greater than 10,000. Output For each `check` command, output the quantity of the specified item. For each `list` command, output all items and their respective quantities in lexicographical order, with each item on a new line in the format of \\"item-name quantity\\". Example Input 10 add \\"banana\\" 100 add \\"apple\\" 200 add \\"banana\\" 50 check \\"banana\\" remove \\"banana\\" 80 check \\"banana\\" remove \\"apple\\" 300 check \\"apple\\" add \\"orange\\" 150 list Output 150 70 0 apple 200 banana 70 orange 150","solution":"class Warehouse: def __init__(self): self.inventory = {} def execute_command(self, command): parts = command.split() cmd = parts[0] if cmd == \\"add\\": item_name = parts[1].strip(\'\\"\') quantity = int(parts[2]) if item_name in self.inventory: self.inventory[item_name] += quantity else: self.inventory[item_name] = quantity elif cmd == \\"remove\\": item_name = parts[1].strip(\'\\"\') quantity = int(parts[2]) if item_name in self.inventory: if self.inventory[item_name] <= quantity: del self.inventory[item_name] else: self.inventory[item_name] -= quantity elif cmd == \\"check\\": item_name = parts[1].strip(\'\\"\') return self.inventory.get(item_name, 0) elif cmd == \\"list\\": sorted_items = sorted(self.inventory.items()) return sorted_items def process_commands(self, commands): results = [] for command in commands: result = self.execute_command(command) if result is not None: results.append(result) return results # Example usage: # commands = [\\"add \\"banana\\" 100\\", \\"add \\"apple\\" 200\\", \\"add \\"banana\\" 50\\", \\"check \\"banana\\"\\", # \\"remove \\"banana\\" 80\\", \\"check \\"banana\\"\\", \\"remove \\"apple\\" 300\\", \\"check \\"apple\\"\\", # \\"add \\"orange\\" 150\\", \\"list\\"] # warehouse = Warehouse() # results = warehouse.process_commands(commands) # for result in results: # if isinstance(result, list): # for item in result: # print(f\\"{item[0]} {item[1]}\\") # else: # print(result)"},{"question":"You are given two strings, S1 and S2, each consisting of lowercase English alphabets. You can perform the following operation on any of the strings any number of times: - Choose a non-empty substring and sort it in alphabetical order. Your task is to determine if it is possible to make S1 equal to S2 by repeatedly applying the above operation on both strings. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of input for each test case contains the string S1. - The second line of input for each test case contains the string S2. ------ Output Format ------ For each test case, print \\"YES\\" (without quotes) if it is possible to make S1 equal to S2 by repeatedly applying the operation. Otherwise, print \\"NO\\" (without quotes). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S1|, |S2| ≤ 1000 - S1 and S2 will consist only of lowercase English alphabets. ----- Sample Input 1 ------ 2 abc cba aabbcc cbcacb ----- Sample Output 1 ------ YES YES ----- Explanation 1 ------ Test case 1: We can sort the entire string abc, making it equal to cba, resulting in a sorted string \\"abc\\". Test case 2: By sorting suitable substrings of both S1 and S2, we can transform both into \\"aabbcc\\".","solution":"def can_transform_into_each_other(T, test_cases): This function determines if it is possible to make S1 equal to S2 by repeatedly applying the substring sorting operation on both strings. Arguments: T : int : number of test cases test_cases : list of tuples : each tuple contains two strings S1 and S2 Returns: results : list : list of strings \\"YES\\" or \\"NO\\" for each test case results = [] for idx in range(T): S1, S2 = test_cases[idx] # Check if sorted versions of S1 and S2 are equal if sorted(S1) == sorted(S2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an integer array nums and an integer k, return the number of good subarrays of nums. A good subarray is defined as a subarray that has at least k distinct integers. Example 1: Input: nums = [1,2,1,2,3], k = 2 Output: 7 Explanation: Good subarrays are [1,2], [1,2,1], [1,2,1,2], [2,1], [2,1,2], [2,1,2,3], and [1,2]. Example 2: Input: nums = [1,2,1,3,4], k = 3 Output: 3 Explanation: Good subarrays are [1,2,1,3], [1,2,1,3,4], and [2,1,3]. Note: 1 <= nums.length <= 20000 1 <= nums[i], k <= nums.length","solution":"def count_good_subarrays(nums, k): from collections import defaultdict def at_most_k_distinct(nums, k): count = defaultdict(int) left = 0 res = 0 for right in range(len(nums)): if count[nums[right]] == 0: k -= 1 count[nums[right]] += 1 while k < 0: count[nums[left]] -= 1 if count[nums[left]] == 0: k += 1 left += 1 res += right - left + 1 return res return at_most_k_distinct(nums, k) - at_most_k_distinct(nums, k - 1)"},{"question":"You are designing a simple text-based game where players can move around a grid-like map. The map is represented by a 2-dimensional list with m rows and n columns. Positions on the map can either be walkable or obstacles, represented by \'.\' and \'#\', respectively. The player\'s starting position is marked with \'P\', and the goal position is marked with \'G\'. The player can move up, down, left, or right, but cannot move onto positions marked by \'#\'. The player also cannot move outside the boundaries of the map. Your task is to write a function that determines if there is a path from the player’s starting position to the goal position. -----Input----- The function should take a single argument, a 2-dimensional list grid of size m x n (2 ≤ m, n ≤ 1000) representing the map, where each element is one of the following characters: \'.\', \'#\', \'P\', \'G\'. It is guaranteed that there is exactly one \'P\' and one \'G\' on the map. -----Output----- The function should return \\"Yes\\" if it is possible for the player to reach the goal position from the starting position, and \\"No\\" otherwise. -----Example----- Input [ [\'P\', \'.\', \'.\', \'#\'], [\'.\', \'#\', \'.\', \'.\'], [\'#\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'G\'] ] Output Yes Input [ [\'P\', \'#\', \'.\', \'G\'], [\'.\', \'#\', \'.\', \'.\'], [\'#\', \'#\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\'] ] Output No","solution":"def is_path_possible(grid): Determines if there is a path from the player\'s starting position \'P\' to the goal position \'G\' on a 2D grid map. Parameters: grid (list of list of str): The 2D map represented by a list of lists, where each element is either \'.\', \'#\', \'P\', or \'G\'. Returns: str: \\"Yes\\" if a path exists from \'P\' to \'G\', \\"No\\" otherwise. # Find the starting position \'P\' for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'P\': start = (i, j) if grid[i][j] == \'G\': goal = (i, j) m, n = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() queue = [start] while queue: x, y = queue.pop(0) if (x, y) == goal: return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\""},{"question":"You\'ve been hired to develop software for a new smart home security system. The system uses a set of sensors distributed throughout the home that can detect and classify different types of activities. Your task is to write a function that analyzes the data from the sensors and determines if an intruder is present in the house. The data from the sensors will be provided as an array of activities. Each activity is represented by a tuple containing two elements: the sensor ID (an integer) and the type of activity (a string). Your function should identify if there is an intruder based on specific conditions. # What you know: * Each sensor can detect three types of activities: \\"normal\\", \\"suspicious\\", and \\"intrusion\\". * An \\"intrusion\\" activity directly signals the presence of an intruder. * A \\"suspicious\\" activity detected by the same sensor three times in a row indicates an intruder. * A \\"normal\\" activity should be ignored for determining the presence of an intruder. * If you detect an intruder, return true. * If there is no evidence of an intruder, return false. # Examples: ```python [{1, \\"normal\\"}, {2, \\"suspicious\\"}, {1, \\"suspicious\\"}, {2, \\"suspicious\\"}, {2, \\"suspicious\\"}, {1, \\"normal\\"}] # returns: True (Sensor 2 detected \\"suspicious\\" activity three times in a row) [{3, \\"normal\\"}, {1, \\"normal\\"}, {2, \\"normal\\"}, {2, \\"suspicious\\"}, {3, \\"intrusion\\"}, {2, \\"normal\\"}] # returns: True (Sensor 3 detected an \\"intrusion\\" activity) [{1, \\"suspicious\\"}, {2, \\"normal\\"}, {2, \\"normal\\"}, {1, \\"normal\\"}, {3, \\"suspicious\\"}, {1, \\"suspicious\\"}] # returns: False (No sensor detected a \\"suspicious\\" activity three times in a row and no \\"intrusion\\" activity was detected) ``` Good Luck!","solution":"def detect_intruder(sensor_data): Analyzes sensor data to determine if there is an intruder in the house. :param sensor_data: List of tuples where each tuple contains (sensor_id, activity). :return: True if there is an intruder, False otherwise. suspicious_counts = {} for sensor_id, activity in sensor_data: if activity == \\"intrusion\\": return True elif activity == \\"suspicious\\": if sensor_id in suspicious_counts: suspicious_counts[sensor_id] += 1 if suspicious_counts[sensor_id] == 3: return True else: suspicious_counts[sensor_id] = 1 elif activity == \\"normal\\": if sensor_id in suspicious_counts: suspicious_counts[sensor_id] = 0 return False"},{"question":"Petya found some meat recipes and decided to cook several dishes. Each dish requires a specific amount of meat, and Petya wants to prepare exactly the quantity that is required for each dish. Moreover, Petya has various pieces of meat, and each piece is labeled with its weight in grams. Petya now wonders if it\'s possible to match or combine the pieces of meat he has to meet the exact requirements for each dish. He can take one or more pieces of meat and combine them to get the required weight. Each piece of meat can be used at most once. Help Petya determine whether he can prepare all the dishes by providing the exact meat for each. -----Input----- The first line contains an integer n (1 ≤ n ≤ 50) — the number of dishes. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 1000) — the required meat for each dish. The third line contains an integer m (1 ≤ m ≤ 50) — the number of pieces of meat. The fourth line contains m integers b_{i} (1 ≤ b_{i} ≤ 1000) — the weight of each piece of meat. -----Output----- If Petya can prepare all the dishes with the pieces of meat he has, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input 3 300 500 700 5 200 100 500 300 700 Output YES Input 2 400 500 3 100 200 300 Output NO","solution":"def can_prepare_dishes(required_meat, available_meat): from collections import Counter available_meat_counter = Counter(available_meat) required_meat_counter = Counter(required_meat) for weight, count in required_meat_counter.items(): if available_meat_counter[weight] < count: return \\"NO\\" available_meat_counter[weight] -= count return \\"YES\\" def check_dishes(n, dish_requirements, m, meat_pieces): return can_prepare_dishes(dish_requirements, meat_pieces)"},{"question":"Write a function that determines the kth smallest element in a given list of integers. The function should take two inputs: a list of integers and an integer k. The list can contain duplicate elements, and k is guaranteed to be a valid index (1 ≤ k ≤ length of the list). Your task is to find the kth smallest element efficiently. Input - A list of integers. - An integer k. Output - The kth smallest element in the list. Examples Input [3, 1, 2, 4, 5], 3 Output 3 Input [5, 3, 1, 1, 2, 4, 5], 4 Output 3","solution":"def kth_smallest_element(nums, k): Returns the kth smallest element in the list nums. Parameters: nums (list): A list of integers. k (int): The position of the smallest element to find (1-based). Returns: int: The kth smallest element in the list. # Sort the list sorted_nums = sorted(nums) # Return the (k-1)th element (0-based index) return sorted_nums[k-1]"},{"question":"Write a function that takes a list of integers as input and returns a list of the integers that are prime numbers. The function should preserve the original order of the numbers in the input list. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, given the list [2, 4, 6, 7, 10, 11, 13], the function should return [2, 7, 11, 13]. Here are some more examples: Input: [1, 3, 5, 6, 8, 9, 10] Output: [3, 5] Input: [16, 23, 24, 29, 30] Output: [23, 29]","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(lst): Returns a list of prime numbers from the input list while preserving the order. return [x for x in lst if is_prime(x)]"},{"question":"You are given a list of n integers representing the heights of n plants arranged in a row from left to right. One day, the gardener decides to trim some of the plants to make them look symmetrical. You are required to find the minimum height such that the plants can be trimmed to look like a symmetrically increasing sequence from the left to a peak in the middle, and then symmetrically decreasing sequence to the right. The peak can be any one of the plants. A sequence a1, a2, ..., an is said to be symmetrically increasing and decreasing if there exists an index i such that: a1 ≤ a2 ≤ ... ≤ ai and ai ≥ ai+1 ≥ ... ≥ an. Note: - The peak can be any index from 1 to n. - All integers are non-negative and do not need to be distinct. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of plants. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 105) representing the heights of the plants. Output Print a single integer — the minimum height to trim the plants such that they form a symmetrically increasing and decreasing sequence. If no trimming is required, print the height of the highest peak. Examples Input 6 1 2 3 4 3 2 1 Output 4 Input 6 1 5 4 3 2 1 Output 5 Input 7 1 2 3 2 1 2 3 Output 3 Explanation In the first example, plants already form a symmetric sequence with peak at height 4. In the second example, the plant at the index 2 with height 5 is the peak from which to consider a symmetric sequence. No other plant requires an adjustment as the sequence after the peak is naturally decreasing. In the third example, trimming the last two plants\' heights to 0 and the first three plants\' heights to form a symmetric sequence starting from either peak will result in all plants being the same height of 3.","solution":"def min_height_to_trim(plants): def is_symmetric_with_peak(peak): left = plants[:peak + 1] right = plants[peak:] return left == right[::-1] n = len(plants) max_height = max(plants) for peak in range(n): if is_symmetric_with_peak(peak): return plants[peak] return max_height # Solution function def solve(n, plant_heights): return min_height_to_trim(plant_heights)"},{"question":"In a small town, people are very conscious about the time they spend traveling within the town. They categorize their mode of transport on the basis of speed. The categories are: SLOW, if the speed is less than 10 km per hour. AVERAGE, if the speed is between 10 km per hour and 40 km per hour inclusive. FAST, if the speed is greater than 40 km per hour. Given the speed of travel in km per hour on a certain day, determine whether the speed is SLOW, AVERAGE, or FAST. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer S — the speed of travel in km per hour. ------ Output Format ------ For each test case, output on a new line, whether the speed is SLOW, AVERAGE, or FAST. You may print each character in lowercase or uppercase. For example, SLOW, slow, Slow, and sLoW, are all identical. ------ Constraints ------ 1 ≤ T ≤ 15 1 ≤ S ≤ 100 ----- Sample Input 1 ------ 5 5 10 35 45 60 ----- Sample Output 1 ------ SLOW AVERAGE AVERAGE FAST FAST ----- Explanation 1 ------ Test case 1: The speed of travel is less than 10 km per hour. Thus, the speed is SLOW. Test case 2: The speed of travel is exactly 10 km per hour. Thus, the speed is AVERAGE. Test case 3: The speed of travel is between 10 and 40 km per hour inclusive. Thus, the speed is AVERAGE. Test case 4: The speed of travel is greater than 40 km per hour. Thus, the speed is FAST. Test case 5: The speed of travel is greater than 40 km per hour. Therefore, the speed is FAST.","solution":"def categorize_speed(T, speeds): categories = [] for speed in speeds: if speed < 10: categories.append(\'SLOW\') elif 10 <= speed <= 40: categories.append(\'AVERAGE\') else: categories.append(\'FAST\') return categories"},{"question":"**String Compression** Given a string `s` containing repeated characters, write a function `compress_string(s)` that compresses the string such that each character is followed by the number of consecutive occurrences of that character. If the compressed string is not smaller than the original string, the function should return the original string. The function should be case-sensitive. For example: - compress_string(\\"aabcccccaaa\\") should return \\"a2b1c5a3\\" - compress_string(\\"abcd\\") should return \\"abcd\\" # Constraints: - The input string will not be empty and will contain only alphabetic characters. - The length of the string will be between 1 and 1000. # Function Signature: ```python def compress_string(s: str) -> str: ``` # Example: ```python # Test cases: print(compress_string(\\"aabcccccaaa\\")) # Output: \\"a2b1c5a3\\" print(compress_string(\\"abcd\\")) # Output: \\"abcd\\" print(compress_string(\\"aabbcc\\")) # Output: \\"aabbcc\\" ``` # Notes: - You should iterate through the string and count consecutive characters. - Create a new compressed string and compare its length to the original string. - Return the original string if the compressed version is not shorter.","solution":"def compress_string(s: str) -> str: Compresses a string by replacing sequences of the same character with the character followed by the length of the sequence. If the compressed string is not smaller than the original string, return the original. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Add the last sequence compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) # Return the original string if compression does not reduce the size return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Rahul is planning a hiking trip and needs to pack his backpack. He has a backpack that can hold a maximum weight of W kilograms. There are N items he can choose to pack, where each item i (1 ≤ i ≤ N) has a weight w(i) and a value v(i). Rahul wants to maximize the total value of the items he packs in his backpack without exceeding the weight limit. Rahul can only take a maximum of one unit of each item. Your task is to help him determine the maximum value he can fit into his backpack. Input: The first line of the input contains an integer W (1 ≤ W ≤ 1000), the maximum weight the backpack can hold. The second line contains an integer N (1 ≤ N ≤ 100), the number of items available. The next N lines each contain two integers w(i) and v(i) (1 ≤ w(i) ≤ 100, 1 ≤ v(i) ≤ 1000), the weight and value of the ith item. Output: A single integer denoting the maximum value Rahul can carry in his backpack. Constraints: 1 ≤ W ≤ 1000 1 ≤ N ≤ 100 1 ≤ w(i) ≤ 100 1 ≤ v(i) ≤ 1000 Sample Input: 50 5 10 60 20 100 30 120 40 160 50 200 Sample Output: 220 Explanation: Rahul can pack items with weights 20 and 30 to get a total value of 100 + 120 = 220. This will keep the total weight within the limit of 50 kilograms.","solution":"def knapsack(W, N, items): Returns the maximum value that can be packed into the backpack of capacity W. Args: W - Maximum weight the backpack can hold (int) N - Number of items (int) items - List of tuples, each containing the weight and value of the items [(w1, v1), (w2, v2), ...] (list of tuples) Returns: int - Maximum value the backpack can store without exceeding the weight limit. dp = [0] * (W + 1) for w, v in items: for weight in range(W, w - 1, -1): dp[weight] = max(dp[weight], dp[weight - w] + v) return dp[W] # Example Usage W = 50 N = 5 items = [(10, 60), (20, 100), (30, 120), (40, 160), (50, 200)] print(knapsack(W, N, items)) # Output: 220"},{"question":"Given a grid of characters with dimensions `m` x `n`, where each cell contains a lowercase letter, write a function `find_words(grid, words)` that takes two inputs: the grid and a list of words. The function should return a set of words from the list that can be formed by sequentially adjacent cells in the grid, where \\"adjacent\\" cells are horizontally or vertically neighboring. Note that the same letter cell may not be used more than once in a word. **Input:** - `grid`: a 2D list of characters, with dimensions `m` x `n` (1 ≤ m, n ≤ 10) - `words`: a list of strings (1 ≤ length of any word ≤ 10) **Output:** - A set of strings representing the words found in the grid. **Example:** ```python grid = [ [\'o\', \'a\', \'b\', \'n\'], [\'o\', \'t\', \'a\', \'e\'], [\'a\', \'h\', \'k\', \'r\'], [\'a\', \'f\', \'l\', \'v\'] ] words = [\\"oath\\", \\"pea\\", \\"eat\\", \\"rain\\"] find_words(grid, words) # Output: {\'oath\', \'eat\'} ``` **Explanation:** - The word \\"oath\\" is located in the grid starting from `grid[0][0]` to `grid[2][3]`. - The word \\"eat\\" is located in the grid starting from `grid[1][1]` to `grid[1][3]`. - The word \\"pea\\" is not found in the grid. - The word \\"rain\\" is not found in the grid.","solution":"def find_words(grid, words): m, n = len(grid), len(grid[0]) word_set = set(words) found_words = set() def dfs(x, y, node, word): if not (0 <= x < m and 0 <= y < n) or grid[x][y] == \'#\': return char = grid[x][y] if char in node: word += char node = node[char] if \'#\' in node: # End of the word marker found_words.add(word) grid[x][y] = \'#\' # Mark as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy, node, word) grid[x][y] = char # Unmark as visited # Build Trie from words trie = {} for word in words: node = trie for char in word: if char not in node: node[char] = {} node = node[char] node[\'#\'] = \'#\' # End of the word marker # Use DFS to find all words for i in range(m): for j in range(n): dfs(i, j, trie, \\"\\") return found_words"},{"question":"A company wants to conduct an online survey about the usage of its products. The survey results are collected as a list of responses, where each response is an integer representing the rating provided by a user. Your task is to determine the most common rating received. If there are multiple ratings that are equally common, return the smallest rating among them. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of survey responses. Then follow n integers r_i (1 ≤ r_i ≤ 100) — the ratings provided by the users. -----Output----- Print one integer — the rating that is the most common. If there are multiple such ratings, print the smallest one. -----Examples----- Input 6 4 5 6 4 6 4 Output 4 Input 4 2 3 2 3 Output 2","solution":"from collections import Counter def most_common_rating(n, responses): Determine the most common rating received. If there are multiple ratings that are equally common, return the smallest rating among them. :param n: int - number of survey responses :param responses: List[int] - list of ratings provided by the users :return: int - most common rating if n == 0: return None response_counts = Counter(responses) most_common = response_counts.most_common() max_count = most_common[0][1] result = float(\'inf\') for rating, count in most_common: if count == max_count and rating < result: result = rating return result"},{"question":"You are given a string containing only lowercase alphabets \'a\' and \'b\'. You can perform the following operations on the string: * Change any \'a\' to \'b\'. * Change any \'b\' to \'a\'. Define a \\"balanced\\" string as a string in which the number of \'a\'s is equal to the number of \'b\'s. Your task is to determine the minimum number of operations needed to convert the given string into a balanced string. Input The first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of the string. The second line contains a string s of length n, consisting of only characters \'a\' and \'b\'. Output Output the minimum number of operations required to balance the string. Examples Input 6 aabbbb Output 1 Input 7 aaaaaab Output 3 Input 4 aaaa Output 2 Input 5 bbbbb Output 2 Note In the first example, you can change one \'b\' to \'a\' to obtain \\"aaabbb\\", which is a balanced string. In the second example, you can change three \'a\'s to \'b\'s to obtain \\"aaabbb\\". In the third example, you can change two \'a\'s to \'b\'s to obtain \\"aabb\\". In the fourth example, you can change two \'b\'s to \'a\'s to obtain \\"aabbb\\".","solution":"def min_operations_to_balance(n, s): Returns the minimum number of operations to balance the string. :param n: length of the string (1 ≤ n ≤ 10^6) :param s: string of length n, consisting of only \'a\' and \'b\' :return: minimum number of operations needed to balance the string num_a = s.count(\'a\') num_b = s.count(\'b\') # To balance the string, we need equal numbers of \'a\' and \'b\'. target = n // 2 return abs(num_a - target)"},{"question":"In the kingdom of Fairland, there are M castles (numbered 1 through M) and M-1 unidirectional pathways connecting them. Each castle is connected to at most two other castles. The castles are positioned linearly, meaning it can be represented as a straight line path. The king wants to build a new castle in between the two existing castles, such that the distance to the nearest castle is minimized. The distance between two castles is given as the number of pathways between them. Your task is to determine the shortest possible distance from a new castle to its nearest existing castle, if it is built optimally. Input format: The first line contains a single integer M (the number of castles). The second line contains M-1 integers, where the ith integer represents the number of pathways to the next castle in sequence. Output format: In a single line, print the shortest possible distance from the new castle to its nearest castle. Constraints: 2 ≤ M ≤ 10^5 1 ≤ each pathway distance ≤ 10^9 SAMPLE INPUT 5 1 2 1 3 SAMPLE OUTPUT 1 Explanation: In the input example, the kingdom has 5 castles connected by pathways: the first to the second by 1 pathway, the second to the third by 2 pathways, the third to the fourth by 1 pathway, and the fourth to the fifth by 3 pathways. The king can build the new castle between any pair of connected existing castles to minimize the distance to the nearest castle. In this case, the optimal placement is within the pathways of length 1, resulting in the shortest distance of 1 to the nearest existing castle.","solution":"def shortest_distance_to_new_castle(M, pathways): Returns the shortest possible distance from a new castle to its nearest existing castle. :param M: Number of castles :param pathways: List of M-1 integers representing the number of pathways to the next castle in sequence :return: Shortest possible distance from a new castle to its nearest castle return min(pathways)"},{"question":"A company manages an array of servers arranged in a 2D grid. Each server processes data and transmits it to adjacent servers. The efficiency of data transfer between two adjacent servers is affected by the server performance values. The goal is to find the most efficient path from a starting server to a target server based on server performance values. Each server in the 2D grid is represented by a positive integer indicating its performance value. The efficiency of a path is defined as the sum of the performance values of the servers in the path, with the lower the sum, the more efficient the path. Write a program that finds the most efficient path from the top-left server (0, 0) to the bottom-right server (n-1, m-1) in an n×m grid. A path can be made up of moves to adjacent servers only, i.e., from a server at (i, j) you can move to (i-1, j), (i+1, j), (i, j-1), or (i, j+1), provided the move stays within the grid boundaries. Input: The input consists of multiple test cases. Each test case begins with two integers n and m (1 ≤ n, m ≤ 100) indicating the number of rows and columns in the grid. This is followed by n lines, each containing m integers, representing the performance values of the servers in the grid. Performance values are positive integers between 1 and 1000. The input is terminated by a line containing two zeros. Output: For each test case, the program should output its sequence number (1 for the first test case, 2 for the second, etc.) and the most efficient path\'s efficiency value from the top-left to the bottom-right server. These two numbers should be printed on the same line with no spaces at the beginning and end of the line. The two numbers should be separated by a space. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 2 2 5 1 2 1 0 0 Output: 1 7 2 7","solution":"import heapq import sys def dijkstra(grid): n = len(grid) m = len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] distance = [[sys.maxsize] * m for _ in range(n)] distance[0][0] = grid[0][0] pq = [(grid[0][0], 0, 0)] # (cost, x, y) while pq: current_cost, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return current_cost if current_cost > distance[x][y]: continue for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + grid[nx][ny] if new_cost < distance[nx][ny]: distance[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) def most_efficient_path(test_cases): results = [] for idx, grid in enumerate(test_cases): efficiency = dijkstra(grid) results.append(f\\"{idx + 1} {efficiency}\\") return results"},{"question":"Sarah has a logistics company and needs to transport goods between two areas. There are n roads connected by m intersections. Each road has a length, and each intersection can hold a specified maximum number of goods. Seeing the complexities involved, Sarah needs your help to determine the most efficient route to transport the maximum number of goods while minimizing the total travel distance. A route is valid if all intersections along the route can handle the goods transported or have a capacity greater than or equal to the number of goods Sarah wants to transport. If multiple routes exist, Sarah prefers the route with the shortest distance. -----Input----- - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000), where n is the number of roads and m is the number of intersections. - The next line contains an integer g (1 ≤ g ≤ 1,000,000), specifying the number of goods to be transported. - The third line contains a pair of integers s and e (1 ≤ s, e ≤ m; s ≠ e), representing the starting and ending intersections respectively. - The following n lines each contain three integers x, y, and l (1 ≤ x, y ≤ m; 1 ≤ l ≤ 10,000), denoting a road connecting intersections x and y with a length l. - The next line contains m integers representing the capacities of each intersection from 1 to m. -----Output----- - A single integer that represents the minimum total travel distance from s to e, transporting g goods. If it is not possible to transport the goods from s to e, output -1. -----Example----- Input 4 5 100 1 5 1 2 4 2 3 3 3 4 2 4 5 5 200 100 150 100 250 Output 14 -----Explanation----- Sarah wants to transport 100 goods from intersection 1 to 5. All intersections must be able to hold at least 100 goods en route. One possible route is 1 -> 2 -> 3 -> 4 -> 5: 1 to 2 is 4 units 2 to 3 is 3 units 3 to 4 is 2 units 4 to 5 is 5 units Total: 4 + 3 + 2 + 5 = 14 units Since all intersections 1, 2, 3, 4, and 5 have capacities greater than or equal to 100, the route is valid.","solution":"import heapq def find_shortest_route(n, m, g, s, e, roads, capacities): # Initialize graph graph = {i: [] for i in range(1, m + 1)} for x, y, l in roads: graph[x].append((y, l)) graph[y].append((x, l)) # Check the starting and ending intersections if capacities[s-1] < g or capacities[e-1] < g: return -1 # Dijkstra\'s algorithm with a priority queue pq = [(0, s)] # (current_distance, current_intersection) distances = {i: float(\'inf\') for i in range(1, m + 1)} distances[s] = 0 while pq: current_distance, current_intersection = heapq.heappop(pq) if current_distance > distances[current_intersection]: continue for neighbor, length in graph[current_intersection]: if capacities[neighbor-1] >= g: distance = current_distance + length if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[e] if distances[e] != float(\'inf\') else -1"},{"question":"A software company has deployed a new system where every user is assigned a unique ID which is a string composed of lowercase English letters. Every user ID is designed such that it can be increased by a certain integer value to get another valid user ID in the system. The operation to increase the user ID string by a value involves incrementing each character’s ASCII value by that integer value. You are given a list of user IDs and a target user ID for each of them obtained by incrementing their ASCII values by an integer value k (same for all characters in a user ID). Determine whether there exists such a k for each user ID provided. Input Format - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two space-separated strings: the original user ID and the target user ID. Output Format - For each test case, print \\"Possible\\" if there exists an integer value k such that incrementing all characters of the original user ID by k results in the target user ID. Otherwise, print \\"Impossible\\". Constraints - 1 ≤ T ≤ 10 - 1 ≤ length of any user ID ≤ 100 - Both original and target user IDs contain only lowercase English letters. Example Input ``` 3 abc def xyz yza ade bcf ``` Example Output ``` Possible Impossible Impossible ``` Explanation - Test case 1: Incrementing each character of \\"abc\\" by 3 results in \\"def\\" (a->d, b->e, c->f), so the output is \\"Possible\\". - Test case 2: There is no single integer value k that can turn \\"xyz\\" into \\"yza\\", so the output is \\"Impossible\\". - Test case 3: Incrementing each character of \\"ade\\" by 1 results in \\"bcf\\", but the increment isn\'t consistent among all characters, so the output is \\"Impossible\\".","solution":"def can_transform(original, target): Determines if there exists an integer k such that incrementing all characters of original by k results in target. if len(original) != len(target): return \\"Impossible\\" k = ord(target[0]) - ord(original[0]) for i in range(1, len(original)): if (ord(target[i]) - ord(original[i])) != k: return \\"Impossible\\" return \\"Possible\\" def determine_transforms(test_cases): Determines the possibility of transformation for each test case. :param test_cases: List of tuples, each containing the original ID and the target ID :return: List of results, either \\"Possible\\" or \\"Impossible\\" return [can_transform(original, target) for original, target in test_cases] # Example usage if __name__ == \\"__main__\\": test_cases = [(\\"abc\\", \\"def\\"), (\\"xyz\\", \\"yza\\"), (\\"ade\\", \\"bcf\\")] results = determine_transforms(test_cases) for result in results: print(result)"},{"question":"During the summer, a group of friends decides to visit different parks in their city. Each park has a certain number of benches where they can sit and relax. The friends want to sit together, which means they must choose a park that has at least enough benches for the entire group. Additionally, they want to minimize the walking distance from their starting location to the chosen park. **Input** The first line of input contains an integer T (1 ≤ T ≤ 50), the number of test cases. Each test case begins with a single line containing two integers N and M (1 ≤ N, M ≤ 1000), where N represents the number of parks and M represents the number of friends. The next line contains two integers sx and sy (0 ≤ sx, sy ≤ 1000), the starting coordinates of the friends. The next N lines each contain three integers px, py, and b (0 ≤ px, py ≤ 1000, 1 ≤ b ≤ 1000), where (px, py) represents the coordinates of a park and b represents the number of benches in the park. **Output** For each test case, output a single line containing the minimum walking distance for the friends to reach a park that has at least M benches. If no such park exists, output -1. **Sample Input 1** 3 3 4 0 0 1 2 3 2 4 5 5 5 2 2 3 0 0 1 1 2 3 5 3 4 4 1 1 6 500 500 600 700 5 **Sample Output 1** 6 4 300 **Explanation** In the first case, there are three parks with coordinates (1, 2), (2, 4), and (5, 5). The friends need to find a park with at least 4 benches. The closest one with enough benches is at (2, 4) and the distance from the starting point (0, 0) is |2-0| + |4-0| = 6. In the second case, the closest park with at least 3 benches is at (3, 5) with a distance of |3-0| + |5-0| = 8. In the third case, the closest park with at least 6 benches is at (600, 700) with a distance of |600-500| + |700-500| = 300.","solution":"def minimum_walking_distance(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] sx, sy = test_cases[i][1] parks = test_cases[i][2:] minimum_distance = float(\'inf\') for park in parks: px, py, b = park if b >= M: distance = abs(px - sx) + abs(py - sy) if distance < minimum_distance: minimum_distance = distance if minimum_distance == float(\'inf\'): results.append(-1) else: results.append(minimum_distance) return results"},{"question":"Objective Today, we\'re focusing on a fundamental data structure: dictionaries (also known as hashmaps or associative arrays). Concept Dictionaries in Python are a type of data structure that store key-value pairs. Each key is unique, and each key maps to a value. The values can be of any data type, and keys are typically strings or numbers. CREATING DICTIONARIES You can create a dictionary by placing a comma-separated sequence of key-value pairs within curly braces `{}`. Example: ```python >> my_dict = {\'name\': \'Alice\', \'age\': 25, \'city\': \'New York\'} >> print(my_dict) {\'name\': \'Alice\', \'age\': 25, \'city\': \'New York\'} ``` ACCESSING VALUES Values in a dictionary can be accessed using keys. The syntax is `dictionary_name[key]`. Example: ```python >> print(my_dict[\'name\']) Alice ``` ADDING OR UPDATING ENTRIES You can add a new key-value pair or update an existing key\'s value by assigning a value to a key. Example: ```python >> my_dict[\'profession\'] = \'Engineer\' >> print(my_dict) {\'name\': \'Alice\', \'age\': 25, \'city\': \'New York\', \'profession\': \'Engineer\'} >> my_dict[\'age\'] = 26 >> print(my_dict) {\'name\': \'Alice\', \'age\': 26, \'city\': \'New York\', \'profession\': \'Engineer\'} ``` REMOVING ENTRIES You can remove key-value pairs using the `del` statement or the `pop()` method. Example: ```python >> del my_dict[\'city\'] >> print(my_dict) {\'name\': \'Alice\', \'age\': 26, \'profession\': \'Engineer\'} >> age = my_dict.pop(\'age\') >> print(my_dict) {\'name\': \'Alice\', \'profession\': \'Engineer\'} >> print(age) 26 ``` Task Write a function `check_inventory` that takes one argument, `orders`, a list of tuples where each tuple contains an item name and the quantity requested. The function should return a dictionary that shows whether each item in the orders can be fulfilled or not. The available inventory is given as: ```python inventory = { \'apple\': 10, \'banana\': 8, \'orange\': 5, \'pear\': 4 } ``` If an order cannot be fulfilled, the value should indicate how many more items are needed. Input Format An iterable (list) of orders, where each order is a tuple containing a string (item name) and an integer (quantity). Output Format Return a dictionary where keys are the item names, and values are either `True` (if the order can be fulfilled fully) or the number of items short (if the order cannot be fulfilled). Example Given: ```python orders = [(\'apple\', 5), (\'banana\', 9), (\'orange\', 4)] ``` The function should return: ```python { \'apple\': True, \'banana\': 1, \'orange\': True } ``` Explanation: - `\'apple\'`: Available inventory is 10, requested is 5, so `True`. - `\'banana\'`: Available inventory is 8, requested is 9, so `1` (shortage). - `\'orange\'`: Available inventory is 5, requested is 4, so `True`. Function Signature ```python def check_inventory(orders): ``` Write the function `check_inventory` to match the above specifications and ensure it processes the orders correctly based on the given inventory.","solution":"def check_inventory(orders): Given a list of orders, returns a dictionary where keys are item names, and values are either `True` (if the order can be fulfilled fully) or the number of items short (if the order cannot be fulfilled). inventory = { \'apple\': 10, \'banana\': 8, \'orange\': 5, \'pear\': 4 } result = {} for item, quantity in orders: available_quantity = inventory.get(item, 0) if available_quantity >= quantity: result[item] = True else: result[item] = quantity - available_quantity return result"},{"question":"In a certain kingdom, there are several cities connected by a network of bidirectional roads. Each road has an associated cost. The king wants to minimize the travel cost between any two cities. For this, he considers building direct high-speed routes between various cities, which will have zero cost. However, building too many high-speed routes is not feasible. The king seeks your help in determining a possible configuration of high-speed routes such that the total travel cost between any two cities is minimized and remains as low as possible. Input The first line contains two integers, N and M (2 ≤ N ≤ 300, 1 ≤ M ≤ 10^4), representing the number of cities and the number of roads, respectively. The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 10^5) describing a road between cities u and v with a cost of w. Output Output the configuration of high-speed routes such that the total travel cost between any two cities is minimized. The output should be in the following format: The first line contains an integer K denoting the number of high-speed routes to be built. The next K lines each contain two integers x and y (1 ≤ x, y ≤ N, x ≠ y), describing a high-speed route between cities x and y. If there are multiple solutions, output any one of them. If no high-speed routes are required, output 0. Example Input 5 6 1 2 10 1 3 20 2 3 5 2 4 15 3 5 25 4 5 10 Output 2 1 4 2 5 Explanation Adding high-speed routes between (1, 4) and (2, 5) reduces the travel cost for all city pairs to a minimal level. Multiple solutions may exist, and any optimal solution is acceptable.","solution":"def find_min_high_speed_routes(num_cities, num_roads, roads): from heapq import heappop, heappush from collections import defaultdict def prims_mst(start, adj): mst_edges = [] total_cost = 0 visited = [False] * (num_cities + 1) min_heap = [(0, start, None)] while min_heap: cost, u, parent = heappop(min_heap) if visited[u]: continue visited[u] = True if parent is not None: mst_edges.append((parent, u)) total_cost += cost for v, weight in adj[u]: if not visited[v]: heappush(min_heap, (weight, v, u)) return mst_edges adj_list = defaultdict(list) for u, v, w in roads: adj_list[u].append((v, w)) adj_list[v].append((u, w)) high_speed_routes = prims_mst(1, adj_list) return high_speed_routes def format_output(high_speed_routes): output = [str(len(high_speed_routes))] for u, v in high_speed_routes: output.append(f\\"{u} {v}\\") return \\"n\\".join(output) def minimize_travel_cost(N, M, roads): high_speed_routes = find_min_high_speed_routes(N, M, roads) result = format_output(high_speed_routes) return result"},{"question":"Given an integer array arr of size N, return an array where each element at index i is the product of all the elements in arr except arr[i]. You must solve it in O(N) time and without using division. Example 1: Input: N = 4 arr[] = {1, 2, 3, 4} Output: {24, 12, 8, 6} Explanation: The product of all elements except 1 is 24, except 2 is 12, except 3 is 8, and except 4 is 6. Example 2: Input: N = 5 arr[] = {-1, 1, 0, -3, 3} Output: {0, 0, 9, 0, 0} Explanation: The product of all elements except -1 is 0, except 1 is 0, except 0 is 9, except -3 is 0, and except 3 is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function productExceptSelf() which takes the array of integers arr and N as parameters and returns an array of integers where each element is the product of all the elements except arr[i]. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5} -30 ≤ arr[i] ≤ 30 The product of any subset of arr is guaranteed to fit in a 32-bit integer.","solution":"def productExceptSelf(arr, N): # Initialize two arrays to store the prefix and suffix products prefix_products = [1] * N suffix_products = [1] * N output = [1] * N # Calculating prefix products for i in range(1, N): prefix_products[i] = prefix_products[i - 1] * arr[i - 1] # Calculating suffix products for i in range(N - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * arr[i + 1] # Calculating the output array for i in range(N): output[i] = prefix_products[i] * suffix_products[i] return output"},{"question":"You are given two strings, `s` and `t`, where `t` is formed by shuffling the characters of `s` and then adding one additional character somewhere in the shuffled string. Write a function to find the extra character in `t`. Function Description: Complete the function findExtraChar in the editor below. findExtraChar has the following parameters: - string s - the original string - string t - the shuffled string with one extra character Returns: - char - the extra character added to `t` Input Format: The first line contains the string `s`. The second line contains the string `t`. Constraints: - 1 leq |s| leq 10^5 - |t| = |s| + 1 - `s` and `t` contain only lowercase English letters. Example 1: Input: abcde abcdef Output: f Explanation: `f` is the extra character added to `t`. Example 2: Input: xy yxz Output: z Explanation: `z` is the extra character added to `t`. Example 3: Input: a ab Output: b Explanation: `b` is the extra character added to `t`. Function Signature: ```python def findExtraChar(s: str, t: str) -> str: # your code here ```","solution":"def findExtraChar(s: str, t: str) -> str: Finds the extra character in t which is not in s. char_count = [0] * 26 for char in s: char_count[ord(char) - ord(\'a\')] -= 1 for char in t: char_count[ord(char) - ord(\'a\')] += 1 for i, count in enumerate(char_count): if count == 1: return chr(i + ord(\'a\'))"},{"question":"You are given a list of integers. Write a function to find the minimum index of the first peak element in the list. A peak element is an element that is strictly greater than its neighbors. For example, in the array [1, 2, 3, 1], 3 is a peak element and its index is 2. If the array contains multiple peaks, return the minimum index of the first peak. For example: - In the array [1, 3, 20, 4, 1, 0], the function should return 2 (since 20 is the first peak at index 2). - In the array [5, 10, 20, 15], the function should return 2 (since 20 is the first peak at index 2). - In the array [10, 20, 30, 40, 50], the function should return 4 (since 50 is the peak at index 4, it\'s the only peak). If there is no peak element, return -1. Notes: - The input array length will be between 1 and 10000. - An element is considered a peak if it is strictly greater than its neighbors. - For the first and last elements, we need to consider only one neighbor as there is no element before the first element and no element after the last element.","solution":"def find_first_peak(arr): Finds the minimum index of the first peak element in the list. A peak element is an element that is strictly greater than its neighbors. Args: arr (list): A list of integers. Returns: int: The index of the first peak element, or -1 if no peak exists. n = len(arr) if n == 0: return -1 if n == 1: return 0 for i in range(n): if i == 0 and arr[i] > arr[i + 1]: return i if i == n - 1 and arr[i] > arr[i - 1]: return i if 0 < i < n - 1 and arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: return i return -1"},{"question":"Write a function that takes a string containing a mathematical expression and returns the result of evaluating this expression. The expression can contain non-negative integers, operators (+, -, *, /) and parentheses (). The input string is guaranteed to be a valid mathematical expression. You may assume that the operations inside the parentheses follow the standard operator precedence rules. The function should not use the `eval` function or any other built-in function that directly evaluates the expression. input The input is given as a string: \\"expression\\" Where `expression` is a valid mathematical expression made up of non-negative integers, operators (+, -, *, /) and parentheses. output The output should be a single integer which is the result of evaluating the mathematical expression. Examples Input \\"3+2*2\\" Output 7 Input \\"(1+(4+5+2)-3)+(6+8)\\" Output 23","solution":"def evaluate_expression(expression): def operate(op, second, first): if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return int(first / second) # Use integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_ops_and_values(): while ops and precedence(ops[-1]) >= precedence(curr_op): values.append(operate(ops.pop(), values.pop(), values.pop())) values = [] ops = [] i = 0 n = len(expression) while i < n: if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': ops.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < n and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while ops and ops[-1] != \'(\': values.append(operate(ops.pop(), values.pop(), values.pop())) ops.pop() else: # operator case curr_op = expression[i] apply_ops_and_values() ops.append(curr_op) i += 1 while ops: values.append(operate(ops.pop(), values.pop(), values.pop())) return values[-1]"},{"question":"Stacked Book Height Difference You are given an array of N integers where each integer represents the height of a book. You need to determine the maximum possible absolute difference in heights between any two books that can be stacked next to each other. Example 1: Input: arr[] = {3, 1, 9, 7, 5} Output: 8 Explanation: The absolute differences between consecutive elements are: |3 - 1| = 2 |1 - 9| = 8 |9 - 7| = 2 |7 - 5| = 2 The maximum absolute difference is 8. Example 2: Input: arr[] = {2, 4, 6} Output: 2 Your Task: You need to complete the function max_height_difference() which takes an array (arr), size of array (n), and returns the maximum absolute height difference. The input is already taken care of by the driver code. You only need to complete the function which will return the maximum absolute difference. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 ≤ N ≤ 10^5 1 ≤ height ≤ 10^7","solution":"def max_height_difference(arr, n): Returns the maximum possible absolute difference in heights between any two books stacked next to each other. Args: arr: List[int] : List of heights of books. n: int : Size of the list. Returns: int : Maximum absolute difference in height between any two consecutive books. max_diff = 0 for i in range(1, n): max_diff = max(max_diff, abs(arr[i] - arr[i - 1])) return max_diff"},{"question":"You are a space explorer on a mission to collect rare elements from different planets. Each planet is represented by an `m x m` grid, where each cell contains an integer that represents the amount of the rare element on that cell. Your task is to determine the maximum amount of rare elements that can be collected on each planet by starting at any point on the grid and moving only to the right or downward, ending at any point on the grid. -----Input----- - The first line of the input contains an integer `T` denoting the number of test cases. The description of the test cases follows. - The first line of each test case contains an integer `m` denoting the size of the grid. - Each of the next `m` lines contains `m` integers, representing the amount of rare elements in each cell of the grid. -----Output----- For each test case, output a single integer which is the maximum amount of rare elements that can be collected. -----Constraints----- - 1 leq T leq 10^3 - 1 leq m leq 500 - 0 leq text{Element Amount} leq 10^6 -----Example Input----- 2 3 1 2 3 4 5 6 7 8 9 2 5 1 2 4 -----Example Output----- 29 11 # Explanation: For the first test case, the maximum path could be: Starting at (1,1), moving to (1,2), (1,3), (2,3), and then (3,3). The collected amount is 1 + 2 + 3 + 6 + 9 = 21. For the second test case, the maximum path could be: Starting at (1,1), moving to (2,1), and then to (2,2). The collected amount is 5 + 2 + 4 = 11.","solution":"def max_elements_collected(test_cases): results = [] for grid in test_cases: m = len(grid) dp = [[0]*m for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, m): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] max_value = max(max(row) for row in dp) results.append(max_value) return results def process_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): m = int(lines[idx]) grid = [] for i in range(m): grid.append(list(map(int, lines[idx + 1 + i].split()))) idx += m + 1 test_cases.append(grid) return test_cases"},{"question":"Given a sorting algorithm that you have not seen before, it’s known to sort numbers in O(n log n) time but you can only assume that it divides the list and sorts smaller parts independently before merging them back. As part of the algorithm, you need to implement a function that finds the maximum sum of any contiguous subarray within an array of integers. This problem is commonly known as the Maximum Subarray Problem, and an optimal solution should be able to solve it in linear time O(n). # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) – the number of elements in the array. - The second line contains `n` space-separated integers, where each integer a_i (-10^5 ≤ a_i ≤ 10^5) represents an element of the array. # Output - Print a single integer, the maximum sum of any contiguous subarray. # Example Input 6 -2 1 -3 4 -1 2 1 -5 4 Output 6 # Note In the given example, the contiguous subarray with the maximum sum is `[4, -1, 2, 1]` with a total sum of 6.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the array. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global if __name__ == \\"__main__\\": n = int(input().strip()) nums = list(map(int, input().strip().split())) print(max_subarray_sum(nums))"},{"question":"Statement Given an array of N integers, your task is to find the maximum sum of any subarray of size K. Assume 1 ≤ K ≤ N and 1 ≤ N ≤ 10^5. Input The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains two integers N and K. - The second line contains N space-separated integers, representing the array. Output Output T lines, one for each test case, representing the maximum sum of any subarray of size K. Sample Input 2 5 3 1 2 3 -2 5 8 4 -1 3 -2 5 3 -5 2 2 Sample Output 6 9","solution":"def max_sum_subarray(array, n, k): Returns the maximum sum of any subarray of size K. if k > n: return 0 max_sum = float(\'-inf\') current_sum = 0 # Compute sum of first subarray of size K for i in range(k): current_sum += array[i] max_sum = current_sum # Sliding window to compute sums of remaining subarrays of size K for i in range(k, n): current_sum += array[i] - array[i - k] max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for array, n, k in test_cases: results.append(max_sum_subarray(array, n, k)) return results"},{"question":"Input 1 3 2 3 6 4 7 9 Output 6 6","solution":"def common_elements(list1, list2): Given two lists, returns a list of elements that are common to both lists. set1 = set(list1) set2 = set(list2) common = list(set1.intersection(set2)) return common"},{"question":"Linda enjoys solving problems with strings. She is particularly fond of symmetrical strings. A string is symmetrical if it can be read the same way from both ends. Linda wants to create symmetrical strings using lowercase letters. Here is the task that she needs your help with: -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the length of the string. -----Output----- Print any symmetrical string of length n. If there are multiple suitable strings, you are allowed to print any of them. -----Example----- Input 5 Output abcba Input 4 Output abba -----Note----- In the first example, the string \\"abcba\\" is symmetrical as it reads the same way from both ends. In the second example, \\"abba\\" is also symmetrical and reads the same way from both ends. There are other symmetrical strings possible for the given lengths.","solution":"def create_symmetrical_string(n): Creates a symmetrical string of length n using lowercase letters. first_half = [chr(97 + i % 26) for i in range((n + 1) // 2)] second_half = first_half[::-1] if n % 2 == 0 else first_half[:-1][::-1] return \'\'.join(first_half + second_half)"},{"question":"A social media platform wants to implement a feature where users can send private messages to each other. Each user is assigned a unique ID. Your task is to determine the minimum number of users that need to be online simultaneously in order for a message to be successfully transmitted from one user to another. You will be given the user IDs of the sender and the recipient and a list of user IDs that adequately map a possible chain of online status between the two. A message can only be routed through currently online users, where each user holds the capability to forward the message to any other online user directly. Write a program to find the minimum number of users (including the sender and the recipient) that need to be online at the same time for the message to be transmitted from the sender to the receiver. INPUT The input consists of three parts: 1. Two integers, S and R, where S is the sender\'s user ID and R is the recipient\'s user ID. 2. An integer N, the number of online users. 3. A list of N integers, representing the user IDs of online users that can forward the message directly to one another. OUTPUT The output should contain a single integer representing the minimum number of users that need to be online (including the sender and the recipient) to enable the message transmission. If there is no possible way to transmit the message, output -1. CONSTRAINTS 1 ≤ S, R ≤ 10^9 1 ≤ N ≤ 10^5 Each user ID in the list is an integer between 1 and 10^9 SAMPLE INPUT 1 5 6 1 2 3 4 5 6 SAMPLE OUTPUT 5 Explanation From the input, users 1, 2, 3, 4, and 5 need to be online simultaneously to transmit the message from user 1 to user 5. The list [1, 2, 3, 4, 5] shows the possible forwarding chain. SAMPLE INPUT 1 8 4 2 3 4 5 SAMPLE OUTPUT -1 Explanation There is no possible chain of online users to transmit the message from user 1 to user 8. Thus, the function outputs -1.","solution":"def min_users_to_transmit_message(S, R, N, online_users): Determines the minimum number of users to be online to transmit a message from sender S to recipient R. :param S: int, sender\'s user ID :param R: int, recipient\'s user ID :param N: int, number of online users :param online_users: list of int, user IDs of online users :return: int, minimum number of users required or -1 if it is not possible from collections import deque, defaultdict if S == R: return 1 graph = defaultdict(list) for i in range(N - 1): graph[online_users[i]].append(online_users[i+1]) graph[online_users[i+1]].append(online_users[i]) queue = deque([(S, 1)]) visited = set() while queue: current, count = queue.popleft() if current == R: return count if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, count + 1)) return -1"},{"question":"A new system for the library at Technoville University needs an efficient way to manage book borrowing and returns. The system must keep track of the borrow time and return time for each book. Based on this, it needs to calculate the total time each book has been borrowed. The system should handle overlapping borrow periods efficiently. For example, if a book is borrowed before it is returned from a previous borrower, it should correctly sum the time differences without double-counting the overlapping period. Write a function that, given the borrow and return logs, computes the total borrow time for each book in the library. Input Format: The first line contains an integer n, representing the number of books. The second line contains an integer m, representing the number of logs (borrowing and returning events). Each of the next m lines contains three space-separated integers, representing the book ID (book_id), borrow time (start), and return time (end). Note that for each log, 1 ≤ book_id ≤ n, and 0 ≤ start < end ≤ 10000000. Output Format: The output should contain a single line with n space-separated integers representing the total borrow time for each book from book 1 to book n. Example Input: 3 5 1 1 4 2 2 5 1 3 6 3 7 8 2 10 12 Example Output: 6 5 1 Explanation: - Book 1: Borrow periods (1 to 4) and (3 to 6). The total borrow time is 5 (composed of time intervals [1, 3) and [3, 6)). - Book 2: Borrow periods (2 to 5) and (10 to 12). The total borrow time is 5. - Book 3: Borrow period (7 to 8). The total borrow time is 1.","solution":"def compute_total_borrow_times(n, m, logs): from collections import defaultdict borrow_times = defaultdict(list) for book_id, start, end in logs: borrow_times[book_id].append((start, end)) total_borrow_times = [0] * n for book_id in range(1, n+1): if book_id in borrow_times: time_intervals = borrow_times[book_id] time_intervals.sort() merged_intervals = [] current_start, current_end = time_intervals[0] for start, end in time_intervals[1:]: if start <= current_end: current_end = max(current_end, end) else: merged_intervals.append((current_start, current_end)) current_start, current_end = start, end merged_intervals.append((current_start, current_end)) total_time = sum(end - start for start, end in merged_intervals) total_borrow_times[book_id - 1] = total_time return total_borrow_times"},{"question":"Tom is working on a new task to modify a sequence of integers. He defined two operations, `add_one` and `double`, as follows: - `add_one(X)` increases the value of the integer X by 1. - `double(X)` doubles the value of the integer X. Given an integer Y, Tom wants to determine the minimum number of operations required to transform an initial integer X (where X = 1) to exactly Y using only the defined operations. ------ Input: ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer Y. ------ Output: ------ For each test case, print a single integer representing the minimum number of operations required to transform X to Y. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ Y ≤ 10^{9} ----- Sample Input 1 ------ 3 2 3 17 ----- Sample Output 1 ------ 1 2 5 ----- Explanation 1 ------ - In the first test case, one `double` operation transforms 1 to 2. - In the second test case, we can use `double` to get 2 and then use `add_one` to get 3. - In the third test case, the sequence of operations could be: `double`, `double`, `double`, `add_one`, `double`.","solution":"def min_operations_to_transform(Y): Returns the minimum number of operations required to transform the initial integer X=1 to exactly Y using add_one and double operations. X = 1 operations = 0 while Y > X: if Y % 2 == 0: Y //= 2 else: Y -= 1 operations += 1 return operations def process_test_cases(T, cases): Process multiple test cases and return the minimum operations for each case. results = [] for Y in cases: results.append(min_operations_to_transform(Y)) return results"},{"question":"You are given a list of integers representing a sequence of numbers. Your task is to answer several queries that require identifying the maximum sum of any sub-array within a specified sub-segment of the list. A sub-array is defined as a contiguous part of the original list. For each query, you\'re given two indices, L and R, which define a sub-segment within the list (the elements between the L-th and R-th index, inclusive). Your task is to compute the maximum sum of all possible sub-arrays within this sub-segment for each query. Input Format The first line of input consists of two single space-separated integers, N and Q, the number of elements in the list and the number of queries, respectively. The second line contains N space-separated integers, representing the sequence of numbers. The following Q lines describe the queries in the form L R, where L and R are 1-based indices indicating the start and end (inclusive) of a sub-segment. Constraints 1 leq N leq 100000 1 leq Q leq 10000 -1000 leq text{list element} leq 1000 1 leq L leq R leq N Output Format For each query, output a single line containing the maximum sum of any sub-array within the sub-segment defined by the query. Sample Input 8 3 -2 1 -3 4 -1 2 1 -5 4 1 4 2 5 3 8 Sample Output 4 4 6 Explanation In the first query, the sub-segment is [-2, 1, -3, 4]. The maximum sum of any sub-array within this sub-segment is 4 (as [4]). In the second query, the sub-segment is [1, -3, 4, -1]. The maximum sum is 4 (as [4]). In the third query, the sub-segment is [-3, 4, -1, 2, 1, -5, 4]. The maximum sum is 6 (as [4, -1, 2, 1]).","solution":"def max_subarray_sum(sequence, L, R): Returns the maximum sum of any sub-array within the sub-segment [L, R] (1-based index). # Convert 1-based indices to 0-based indices for Python list slicing L -= 1 R -= 1 # Extract the sub-segment sub_segment = sequence[L:R+1] # Kadane\'s algorithm to find the maximum sum subarray max_sum = float(\'-inf\') current_sum = 0 for num in sub_segment: current_sum = max(num, current_sum + num) if current_sum > max_sum: max_sum = current_sum return max_sum def process_queries(sequence, queries): results = [] for L, R in queries: results.append(max_subarray_sum(sequence, L, R)) return results"},{"question":"A group of friends is planning a hiking trip. They want to divide themselves into k non-empty groups such that the total age of members in each group is a multiple of m. Given an array of ages of the n friends and the integer k, determine if it is possible to form such groups. If it is, provide the groupings. -----Input----- The first line will contain three space-separated integers n, k, m (2 ≤ k ≤ n ≤ 100; 1 ≤ m ≤ 100). The next line will contain n space-separated integers representing the ages of the friends: age_1, age_2, ..., age_{n} (1 ≤ age_{i} ≤ 100). -----Output----- In the first line, print \\"YES\\" (without the quotes) if it is possible to form the groups as required. Otherwise, print \\"NO\\" (without the quotes). If the required grouping exists, print k lines after the first line. The i^{th} of them should contain the content of the i^{th} group. Print the content of the group in the line in the following way: firstly print the number of members in the group, then print all the ages of the members in the group in any order. As there can be multiple valid groupings, you are allowed to print any possible grouping. -----Examples----- Input 6 3 5 10 15 20 25 30 35 Output YES 2 10 15 2 20 25 2 30 35 Input 5 3 10 18 22 15 7 8 Output NO Input 4 2 3 6 12 9 3 Output YES 2 6 12 2 9 3","solution":"def can_form_groups(n, k, m, ages): from itertools import combinations def check_groups(groups): for group in groups: if sum(group) % m != 0: return False return True # Generate all possible combinations of friends that form k groups for comb in combinations(range(n), k-1): groups = [] start = 0 for index in comb: groups.append(ages[start:index+1]) start = index + 1 groups.append(ages[start:]) if all(len(group) > 0 for group in groups) and check_groups(groups): return True, groups return False, None def main(): import sys input = sys.stdin.read data = input().strip().split() n, k, m = int(data[0]), int(data[1]), int(data[2]) ages = list(map(int, data[3:])) possible, groups = can_form_groups(n, k, m, ages) if possible: print(\\"YES\\") for group in groups: print(len(group), \' \'.join(map(str, group))) else: print(\\"NO\\")"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to delete some characters from the string. The goal is to determine whether it is possible to delete some characters to obtain a palindrome. A string is called a palindrome if it reads the same backward as forward. Your task is to output \\"YES\\" (without quotes) if it is possible to delete some characters from the string to make it a palindrome. Otherwise, output \\"NO\\". ----Input---- The input consists of a single string s (1 leq |s| leq 1000), where |s| is the length of s. ----Output---- Print \\"YES\\" if it is possible to delete some characters from the string to make it a palindrome. Otherwise, print \\"NO\\". ----Examples---- Input abca Output YES Input coder Output NO ----Note---- In the first example, removing \'b\' or \'c\' from \\"abca\\" will result in a palindrome (\\"aca\\" or \\"aba\\"). In the second example, it is not possible to delete any characters from \\"coder\\" to obtain a palindrome.","solution":"def is_palindrome_possible(s): def is_palindrome(string): return string == string[::-1] n = len(s) for i in range(n): if is_palindrome(s[:i] + s[i+1:]): return \\"YES\\" return \\"YES\\" if is_palindrome(s) else \\"NO\\""},{"question":"*You are given a list of N students, each identified by their roll number which is an integer, and a corresponding list of their marks in M subjects. Your task is to find the roll number of the student with the highest average marks. If there are multiple students with the same highest average marks, return the smallest roll number among them.* ------ Input Format ------ - The first line contains an integer N, the number of students. - The second line contains N integers representing the roll numbers of the students. - The next N lines each contain M integers representing the marks of the student in M subjects. ------ Output Format ------ Output the roll number of the student with the highest average marks. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ M ≤ 1000 0 ≤ marks ≤ 100 ------ Sample Input 1 ------ 3 101 102 103 80 90 100 90 85 95 85 100 90 ------ Sample Output 1 ------ 103 ------ Explanation ------ - Student with roll number 101 has average marks of (80+90+100)/3 = 90. - Student with roll number 102 has average marks of (90+85+95)/3 = 90. - Student with roll number 103 has average marks of (85+100+90)/3 = 91.67 (highest). So, the roll number of the student with the highest average marks is 103.","solution":"def highest_average_student(roll_numbers, marks_list): Returns the roll number of the student with the highest average marks. If there are multiple students with the same highest average marks, return the smallest roll number among them. max_avg = -1 best_roll_number = None for roll_number, marks in zip(roll_numbers, marks_list): avg_marks = sum(marks) / len(marks) if avg_marks > max_avg or (avg_marks == max_avg and roll_number < best_roll_number): max_avg = avg_marks best_roll_number = roll_number return best_roll_number"},{"question":"------ Write a function that receives a list of integers and returns the number of \\"local peaks\\" in the list. A local peak is an element that is greater than its immediate neighbors. For the purposes of this problem, the first and the last elements of the list can never be considered a local peak since they do not have two neighbors. ------ Input ------ - A single list `arr` of integers with length n (3 leq n leq 10^5). ------ Output ------ - Return the number of local peaks in the list. ------ Sample Input 1 ------ [1, 3, 2, 4, 1] ------ Sample Output 1 ------ 2 ------ Explanation ------ - In the input list, 3 and 4 are local peaks because each of them is greater than their immediate neighbors (1 and 2 for 3, 2 and 1 for 4). ------ Sample Input 2 ------ [2, 2, 2, 2, 2] ------ Sample Output 2 ------ 0 ------ Explanation ------ - In the input list, none of the elements are local peaks because no element is greater than both of its immediate neighbors.","solution":"def count_local_peaks(arr): Returns the number of local peaks in the list. A local peak is an element that is greater than its immediate neighbors. The first and last elements can never be considered local peaks. local_peaks = 0 for i in range(1, len(arr) - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: local_peaks += 1 return local_peaks"},{"question":"In the magical world of Hogwarts, Neville Longbottom is learning about how spells can be used to manipulate arrays. He has been given a task to create a new spell that reorganizes an array of integers such that all the even numbers appear before all the odd numbers in the array. The relative order of the even numbers and odd numbers must remain the same. Since Neville is still learning, he seeks your help to implement this spell. Your task is to create a function that takes an array of integers and returns a new array where all the even numbers come before all the odd numbers, while preserving the relative order. Input The first line contains an integer T - the number of test cases. For each test case: - The first line of each test case contains an integer N - the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. Output For each test case, output a single line containing the reorganized array where all even numbers appear before all odd numbers while maintaining the original relative order. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^9 ≤ Ai ≤ 10^9 SAMPLE INPUT 2 5 1 2 3 4 5 4 6 3 4 1 SAMPLE OUTPUT 2 4 1 3 5 6 4 3 1 Explanation For the first test case, the even numbers (2, 4) appear before the odd numbers (1, 3, 5) and their relative order is maintained. For the second test case, the even numbers (6, 4) appear before the odd numbers (3, 1) and their relative order is maintained.","solution":"def reorganize_array(T, test_cases): Reorganizes arrays such that all even numbers appear before all odd numbers while preserving their relative order. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains (N, array) where N is the number of elements and array is the list of integers. Returns: list of lists: A list containing the reorganized arrays for each test case. result = [] for case in test_cases: N, array = case even = [x for x in array if x % 2 == 0] odd = [x for x in array if x % 2 != 0] result.append(even + odd) return result def format_output(results): Formats the output results for printing. Parameters: results (list of lists): The list containing reorganized arrays for each test case. Returns: list: A list containing formatted strings for each test case result. return [\\" \\".join(map(str, result)) for result in results]"},{"question":"Alien Dictionary === Description --- You have been hired by an intergalactic library to help with their book cataloging system. The library uses a unique alphabet order different from the standard alphabetical order. Given a sorted sequence of alien words, you need to determine the order of characters in the alien language. Task --- Your job is to complete the function **alienDictionary(words)** that, given a list of words sorted in the alien language, returns a string representing the characters in the alien language sorted in lexicographical order according to the alien dictionary. The function takes one argument: 1. A list of words (list of strings) sorted in lexicographical order according to the alien language. The function should return a string representing the characters in lexicographical order. Examples: ```python alienDictionary([\\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\"]) # returns \\"wertf\\" alienDictionary([\\"z\\", \\"x\\"]) # returns \\"zx\\" alienDictionary([\\"abc\\", \\"ab\\"]) # returns \\"\\" (invalid order) ``` Considerations: - You may assume all words are in lowercase. - If there is no valid ordering, return an empty string. - If the ordering is valid, there is guaranteed to be a unique solution.","solution":"from collections import defaultdict, deque def alienDictionary(words): def build_graph(words): graph = defaultdict(set) indegree = {char: 0 for word in words for char in word} for i in range(len(words) - 1): first_word = words[i] second_word = words[i + 1] min_length = min(len(first_word), len(second_word)) if first_word[:min_length] == second_word[:min_length] and len(first_word) > len(second_word): # invalid case where prefix longer is ahead return {}, {} for j in range(min_length): if first_word[j] != second_word[j]: if second_word[j] not in graph[first_word[j]]: graph[first_word[j]].add(second_word[j]) indegree[second_word[j]] += 1 break return graph, indegree def topological_sort(graph, indegree): queue = deque([char for char in indegree if indegree[char] == 0]) top_order = [] while queue: char = queue.popleft() top_order.append(char) for neighbor in graph[char]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(top_order) == len(indegree): return \'\'.join(top_order) else: return \\"\\" graph, indegree = build_graph(words) if not graph and not indegree: return \\"\\" return topological_sort(graph, indegree)"},{"question":"A scientist is conducting research on a newly discovered species of ants. To understand their movement patterns, the scientist wants to model the pathways of individual ants as they travel through a two-dimensional grid. Each ant starts at a given coordinate and moves to another coordinate in a series of steps. However, the paths are not straightforward: ants have a tendency to take the smallest possible turn at each step to either the right or the left. The scientist wants a program that can determine the trajectory of an ant given its starting and ending coordinates. The movement rules are defined as follows: 1. An ant can move one step in any of the four cardinal directions (north, east, south, west). 2. At each step, the ant tries to move closer to the destination by taking the smallest possible turn either to the right or the left. Your task is to write a program that calculates the sequence of steps an ant will take from its starting point to its destination. Input The input consists of multiple data sets. Each data set is given in the following format: x1 y1 x2 y2 where (x1, y1) are the starting coordinates and (x2, y2) are the ending coordinates. The coordinates satisfy the condition 0 ≤ x1, y1, x2, y2 ≤ 100. A line containing four zeros indicates the end of the input. Output For each data set, output a sequence of steps the ant will take, each direction represented by a single character (N for north, E for east, S for south, W for west), in a single line. Example Input 1 1 3 3 0 0 1 2 0 0 0 0 Output EENNE EEN","solution":"def calculate_trajectory(x1, y1, x2, y2): Returns the sequence of steps an ant will take from (x1, y1) to (x2, y2). directions = [] while x1 != x2 or y1 != y2: if x1 < x2: x1 += 1 directions.append(\'E\') elif x1 > x2: x1 -= 1 directions.append(\'W\') if y1 < y2: y1 += 1 directions.append(\'N\') elif y1 > y2: y1 -= 1 directions.append(\'S\') return \'\'.join(directions) def process_input(input_data): Processes the input data for multiple data sets. outputs = [] input_lines = input_data.strip().split(\'n\') for line in input_lines: x1, y1, x2, y2 = map(int, line.split()) if x1 == 0 and y1 == 0 and x2 == 0 and y2 == 0: break result = calculate_trajectory(x1, y1, x2, y2) outputs.append(result) return outputs"},{"question":"Given a string, check if it can be rearranged to form a palindrome. Ignore all non-alphanumeric characters and consider uppercase and lowercase versions of the same letter to be identical. For example: \\"A man, a plan, a canal, Panama!\\" can be rearranged to form a palindrome. Input: The first line contains T, the number of test cases. The following lines will contain the strings. Output: You have to print YES if the string can be rearranged to form a palindrome, else print NO. Constraints: 1 <= T <= 100 1 <= Length of the string <= 200 Example Input: 2 A man, a plan, a canal, Panama! Hello World Output: YES NO","solution":"def can_form_palindrome(s: str) -> str: Check if the string can be rearranged to form a palindrome. Arguments: s -- the input string Returns: \'YES\' if it can be rearranged to form a palindrome, \'NO\' otherwise from collections import Counter import re # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count character frequencies char_count = Counter(cleaned_string) # Check the number of characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome, it can have at most one odd frequency character return \'YES\' if odd_count <= 1 else \'NO\' def handle_test_cases(T: int, strings: list) -> list: Process multiple test cases. Arguments: T -- number of test cases strings -- list of strings to be checked Returns: A list of results for each string, either \'YES\' or \'NO\' return [can_form_palindrome(string) for string in strings]"},{"question":"A social media platform wants to analyze user activity to detect potential bots. A user is considered a bot if they have posted the same message multiple times within a short period. Given a log of user posts, your task is to identify users who have posted the same message three or more times within any 10-minute window. Each log entry comprises a timestamp, user ID, and the message posted. Implement a program that processes the log data and outputs the user IDs of potential bots. Input The input consists of several lines, each containing a log entry in the format: timestamp user_id message - `timestamp`: the time of the post in `YYYY-MM-DD HH:MM:SS` format. - `user_id`: a unique identifier for the user, consisting of alphanumeric characters. - `message`: the content of the message, which can include spaces and any printable ASCII characters. The input ends with a line containing the word `end`. Output The output should be a list of user IDs who are detected as potential bots, each on a new line. The user IDs should be listed in ascending order and each user ID should be printed only once. Constraints - Each log entry is uniquely timestamped. - The number of log entries will not exceed 10000. - The timestamp will be within the range of `2015-01-01 00:00:00` to `2025-12-31 23:59:59`. Sample Input ``` 2019-04-20 10:00:00 user123 Check this out! 2019-04-20 10:05:00 user123 Check this out! 2019-04-20 10:08:00 user123 Check this out! 2019-04-20 10:09:00 user456 Another message 2019-04-20 10:10:00 user456 Another message 2019-04-20 10:15:00 user456 Another message 2019-04-20 10:13:00 user789 Different message 2019-04-20 10:15:00 user789 Different message 2019-04-20 10:18:00 user789 Different message end ``` Sample Output ``` user123 user456 user789 ``` Explanation - `user123` posted the message \\"Check this out!\\" three times within an 8-minute window. - `user456` posted the message \\"Another message\\" three times within a 10-minute window. - `user789` posted the message \\"Different message\\" three times within a 5-minute window. Thus, all three users are detected as potential bots.","solution":"from datetime import datetime, timedelta from collections import defaultdict def detect_bots(log_data): def parse_log_entry(entry): # Split the log entry parts parts = entry.split(maxsplit=2) timestamp = parts[0] + \\" \\" + parts[1] user_id = parts[2].split(maxsplit=1)[0] message = parts[2].split(maxsplit=1)[1] if len(parts[2].split(maxsplit=1)) > 1 else \\"\\" return timestamp, user_id, message def is_bot_activity(times): if len(times) < 3: return False # Check the time difference within the 10-minute window (600 seconds) for i in range(2, len(times)): if (times[i] - times[i-2]).total_seconds() <= 600: return True return False log_dict = defaultdict(lambda: defaultdict(list)) results = set() for entry in log_data: if entry == \\"end\\": break timestamp, user_id, message = parse_log_entry(entry) timestamp = datetime.strptime(timestamp, \'%Y-%m-%d %H:%M:%S\') log_dict[user_id][message].append(timestamp) for user_id, messages in log_dict.items(): for message_timestamps in messages.values(): if is_bot_activity(sorted(message_timestamps)): results.add(user_id) return sorted(results)"},{"question":"Wyatt has recently started a venture involving custom t-shirt printing. To manage his orders efficiently, he needs to automate the process of determining if specific orders can be fulfilled with the given stock of t-shirts. Wyatt needs to fulfill bulk orders where each order specifies a certain number of t-shirts of different sizes. Wyatt’s stock comes in different sizes denoted by letters (\'S\', \'M\', \'L\', etc.) and quantities for each size he currently has. Each order specifies how many t-shirts of each size are required. Your task is to write a program to determine if each order can be fulfilled with the stock available. If an order cannot be fulfilled, it should be flagged. -----Input----- The input consists of a single test case. The first line of the input contains an integer N (1 le N le 10^5), the number of different t-shirt sizes. The second line contains N space-separated strings representing the t-shirt sizes (unique and consisting of 1 to 2 uppercase English letters). The third line contains N space-separated integers representing the quantity of each t-shirt size in stock corresponding to the sizes in the same order. The fourth line contains an integer M (1 le M le 10^3), the number of orders. Each of the next M lines describes an order in the following format: - An integer K representing the number of different sizes in the order. - Followed by K pairs of a string and an integer. Each pair represents a t-shirt size and the quantity required of that size. -----Output----- For each order, output \\"YES\\" if the order can be fulfilled with the current stock, otherwise \\"NO\\". -----Examples----- Sample Input 1: 3 S M L 10 5 2 2 2 M 3 L 2 1 S 15 Sample Output 1: YES NO Sample Input 2: 2 XS XL 5 8 3 1 XS 5 1 XL 9 2 XS 3 XL 2 Sample Output 2: YES NO YES","solution":"def can_fulfill_orders(stock_sizes, stock_counts, orders): stock = dict(zip(stock_sizes, stock_counts)) result = [] for order in orders: fulfillable = True temp_stock = stock.copy() for size, count in order: if temp_stock.get(size, 0) < count: fulfillable = False break temp_stock[size] -= count result.append(\\"YES\\" if fulfillable else \\"NO\\") return result def main(): import sys input = sys.stdin.read data = input().split() index = 0 num_sizes = int(data[index]) index += 1 stock_sizes = data[index:index + num_sizes] index += num_sizes stock_counts = list(map(int, data[index:index + num_sizes])) index += num_sizes num_orders = int(data[index]) index += 1 orders = [] for _ in range(num_orders): k = int(data[index]) index += 1 order = [] for _ in range(k): size = data[index] count = int(data[index + 1]) index += 2 order.append((size, count)) orders.append(order) results = can_fulfill_orders(stock_sizes, stock_counts, orders) for result in results: print(result)"},{"question":"Bearland has just hosted its annual carnival, and it features a special kind of sequence game. You are given a sequence of n integers, and your goal is to transform the sequence into a sequence where each element is greater than or equal to the previous element by using a special kind of operation any number of times. In the given operation, you can choose any even indexed element (1-based index) and increase it by 1. Note that you cannot choose an odd indexed element. The task is to determine whether it is possible to transform the given sequence into a non-decreasing sequence using this operation. -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^4) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print \\"Yes\\" if the sequence can be transformed into a non-decreasing sequence using the described operation, and \\"No\\" otherwise. You may print each letter in any case (for example, \\"YES\\", \\"Yes\\", \\"yes\\", \\"yEs\\" will all be recognized as positive answer). -----Examples----- Input 3 4 1 3 3 7 5 5 4 3 2 1 3 2 2 2 Output Yes No Yes -----Note----- In the first test case, the sequence is already non-decreasing. In the second test case, we cannot make the sequence non-decreasing using any number of described operations because elements at odd indices cannot be increased. In the third test case, the sequence is already non-decreasing.","solution":"def can_transform(n, sequence): Returns \'Yes\' if the sequence can be transformed into a non-decreasing sequence using the described operation, and \'No\' otherwise. :param n: Length of the sequence :param sequence: List of integers representing the sequence :return: \'Yes\' or \'No\' for i in range(1, n): # If current element is greater than previous and current index is odd (1-based even), # then we return \'No\' since odd indexed elements cannot be increased. if sequence[i] < sequence[i - 1] and i % 2 == 1: return \\"No\\" return \\"Yes\\" def process_test_cases(t, test_cases): Processes each test case and returns the results for all test cases. :param t: Number of test cases :param test_cases: List containing test case data :return: List of results for each test case results = [] for case in test_cases: n, sequence = case results.append(can_transform(n, sequence)) return results"},{"question":"Alex is training for a marathon and decides to keep track of his progress by recording the distance he runs each day for n days. He wants to complete at least m kilometers over these n days to achieve his training goal. Alex can choose to rest on some days, and thus run 0 kilometers on those days. Additionally, Alex has the option to extend his run on any given day, but each additional kilometer requires x minutes more than the usual time he runs. What is the minimum extra time Alex needs to invest to achieve his goal, assuming that extending the run on each day affects the total extra time required? -----Input----- The first line contains three integers n, m, x (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9, 1 ≤ x ≤ 10^6) — the number of days, the required total kilometers, and the extra minutes required for each additional kilometer respectively. Each of the following n lines contains a single integer d_{i} (0 ≤ d_{i} ≤ 10^9) — the distance Alex runs on the i-th day. -----Output----- In the first line print the minimum extra minutes Alex needs to invest. -----Examples----- Input 4 10 5 1 3 2 4 Output 0 Input 3 10 5 2 2 2 Output 10 -----Note----- In the first sample, Alex already runs a total of 10 kilometers, so no extra time is needed. In the second sample, Alex runs a total of 6 kilometers, which means he needs to run 4 more kilometers. Since each additional kilometer requires 5 more minutes, he will have to invest 5 * 2 = 10 extra minutes.","solution":"def minimum_extra_time(n, m, x, distances): Calculate the minimum extra time Alex needs to invest to achieve his running goal. Parameters: n (int): The number of days. m (int): The required total kilometers. x (int): The extra minutes required for each additional kilometer. distances (List[int]): The distances Alex runs on each day. Returns: int: The minimum extra time Alex needs to invest. total_distance = sum(distances) if total_distance >= m: return 0 additional_kilometers_needed = m - total_distance extra_time = additional_kilometers_needed * x return extra_time"},{"question":"A large group of participants are participating in a coding contest. Each participant has a unique ID between 1 and n. The contest is conducted in multiple rounds, and each participant may have multiple submissions in all rounds combined. Unfortunately, the servers crashed and the submissions\' information is corrupted. You are provided with a list of tuples where each tuple represents a valid submission in the form (participant_id, round_number). The organizers want to determine how many rounds each participant has participated in. Write a program to generate the count of unique rounds each participant participated in. Input - The first line contains two integers n and m (1 <= n, m <= 10^5), where n is the number of participants and m is the number of submissions. - The next m lines each contain two integers participant_id and round_number. Output For each participant ID from 1 to n, print on a new line the count of unique rounds they participated in. Examples Input 5 7 1 2 2 3 1 2 4 2 1 4 5 3 2 1 Output 2 2 0 1 1 Input 3 4 1 1 2 1 2 2 3 3 Output 1 2 1 Note In the first sample, participant 1 participated in rounds 2 and 4, participant 2 participated in rounds 3 and 1, participant 4 participated in round 2, and participant 5 participated in round 3. In the second sample, participant 1 participated in round 1, participant 2 participated in rounds 1 and 2, and participant 3 participated in round 3.","solution":"def unique_rounds_count(n, m, submissions): Returns a list containing the count of unique rounds each participant participated in. :param n: Number of participants :param m: Number of submissions :param submissions: List of tuples where each tuple is (participant_id, round_number) :return: List of counts for each participant from collections import defaultdict participant_rounds = defaultdict(set) for participant_id, round_number in submissions: participant_rounds[participant_id].add(round_number) result = [] for participant_id in range(1, n + 1): result.append(len(participant_rounds[participant_id])) return result"},{"question":"Given a list of students and their grades in a specific subject, your task is to normalize the grades such that the highest grade becomes 100 and other grades scale accordingly while maintaining their relative proportions. Input The first line contains the positive integer n (1 ≤ n ≤ 1000) — the number of students. The next n lines contain the students\' description. In the i-th line there is a student\'s name namei (a non-empty string which consists of uppercase and lowercase Latin letters, the length does not exceed twenty) and the student\'s grade gi (0 ≤ gi ≤ 100). Some students can have the same name. Uppercase and lowercase letters of the alphabet should be considered different. Output Print n lines — students\' names and their normalized grades (rounded to 2 decimal places). Each line must contain exactly one name followed by a space and the normalized grade. If multiple students have the same normalized grade, you can print them in any order. Examples Input 4 Alice 75 Bob 50 Charlie 100 David 80 Output Alice 75.00 Bob 50.00 Charlie 100.00 David 80.00 Input 3 Elena 40 Lucas 80 Marie 100 Output Elena 40.00 Lucas 80.00 Marie 100.00","solution":"def normalize_grades(n, student_grades): Normalizes grades such that the highest grade becomes 100 and others scale accordingly. :param n: Number of students :param student_grades: List of tuples containing student names and their grades :return: List of tuples containing student names and their normalized grades if n == 0: return [] max_grade = max([grade for name, grade in student_grades]) if max_grade == 0: return [(name, 0.00) for name, grade in student_grades] normalized_grades = [(name, round((grade / max_grade) * 100, 2)) for name, grade in student_grades] return normalized_grades"},{"question":"You are a software engineer at a cybersecurity firm. One of the firm\'s older systems generates a log file that contains various events, each logged with a timestamp. The system, however, logs events with only the hour and minute, in the format HH:MM (24-hour format). Your task is to determine the number of events that occur at the same time on more than one occasion within a single 24-hour period. Given a list of timestamps, each in the format HH:MM, identify all timestamps that appear more than once and output the count of such timestamps. -----Input----- - The first line contains an integer t (1 ≤ t ≤ 10^5), the number of timestamps. - The next t lines each contain a timestamp in the format HH:MM. -----Output----- Print a single integer representing the number of timestamps that appear more than once. -----Examples----- Sample Input 1: 6 10:00 10:00 10:30 11:45 11:45 11:45 Sample Output 1: 2 Sample Input 2: 4 12:00 12:00 13:00 14:00 Sample Output 2: 1","solution":"def count_duplicate_timestamps(timestamps): Counts the number of timestamps that appear more than once in the given list. Args: timestamps (list of str): List of timestamp strings in the format HH:MM. Returns: int: The count of timestamps that appear more than once. from collections import Counter # Count the occurrences of each timestamp timestamp_counts = Counter(timestamps) # Count how many timestamps appear more than once return sum(1 for count in timestamp_counts.values() if count > 1)"},{"question":"You are given an array containing n integers. You need to determine if the array can be split into two non-empty parts such that the maximum element in the first part is not greater than the minimum element in the second part. Input The input consists of: - The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output Print \\"YES\\" if the array can be split as described, otherwise print \\"NO\\". Examples Input 5 1 2 3 4 5 Output YES Input 5 5 4 3 2 1 Output NO Input 5 3 1 4 2 5 Output YES","solution":"def can_split_array(n, arr): Determines if the array can be split into two non-empty parts such that the maximum element in the first part is not greater than the minimum element in the second part. :param n: integer, the number of elements in the array :param arr: list of integers, the elements of the array :return: string, \\"YES\\" if the array can be split as described, otherwise \\"NO\\" for i in range(1, n): if max(arr[:i]) <= min(arr[i:]): return \\"YES\\" return \\"NO\\""},{"question":"A robot is stuck in a maze designed as an n times m grid. The robot starts at the cell (1,1), and its goal is to reach the cell (n,m). It can move to adjacent cells horizontally or vertically but cannot move diagonally. Each cell in the grid is either open (represented by `.`) or blocked (represented by `#`). The robot can only move to an open cell. Your task is to determine the minimum number of moves required for the robot to reach its goal. If it is impossible to reach the goal, output \\"no way out\\". -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 1000) representing the number of rows and columns in the grid. Each of the next n lines contains exactly m characters representing the grid configuration. -----Output----- Output the minimum number of moves required to reach cell (n,m) starting from cell (1,1), or \\"no way out\\" if it is not possible to reach the goal. -----Examples----- Sample Input: 3 3 ... .#. ... Sample Output: 4 Sample Input: 3 3 .#. # .#. Sample Output: no way out","solution":"from collections import deque def min_moves_in_maze(n, m, grid): Returns the minimum number of moves required for the robot to reach cell (n,m) starting from cell (1,1), or \\"no way out\\" if it is not possible to reach the goal. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"no way out\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n-1 and c == m-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return \\"no way out\\""},{"question":"Sophia is trying to organize a sequence of books on her shelf. Each book has a width and height. Sophia wants to arrange the books in a single row such that no book with a greater width comes before a book with a smaller width. If two books have the same width, they should be ordered by their height in ascending order. Your task is to help Sophia achieve this configuration. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 100) — the number of books. The next n lines each contain two integers w and h (1 leq w, h leq 1000) — the width and height of each book. -----Output----- For each test case, output the sequence of books sorted first by their width in non-decreasing order, and if two books have the same width, sorted by their height in non-decreasing order. Print the widths and heights of the books in the new order, each book in a new line. -----Examples----- Input 2 3 1 3 2 2 1 2 4 4 4 3 3 4 2 5 1 Output 1 2 1 3 2 2 3 3 4 2 4 4 5 1 -----Note----- In the first test case, the books are rearranged first by their widths, and for books with the same width, by their heights.","solution":"def sort_books(t, test_cases): results = [] for i in range(t): books = test_cases[i] books.sort(key=lambda book: (book[0], book[1])) results.append(books) return results def format_output(sorted_books): output_lines = [] for books in sorted_books: for book in books: output_lines.append(f\\"{book[0]} {book[1]}\\") return output_lines"},{"question":"Given a two-dimensional grid filled with different values, write a function to count the number of distinct islands. An island is considered to be a group of connected \'1\'s (adjacent horizontally, vertically, and diagonally). The same shape constitutes an island, and duplicate island shapes should not be counted more than once. The grid is surrounded by water represented by \'0\'s. Example: Input: grid = [ [1, 1, 0, 0, 0], [1, 0, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 1, 1], [1, 1, 0, 0, 0] ] Output: 3 Explanation: There are three distinct islands in the grid. The island shapes identified by positions (0,0), (1,4), and (4,0) are all considered distinct since they have unique shapes. Your Task: You do not need to read input or print anything. Your task is to write the function countDistinctIslands(grid) that takes a 2D array \'grid\' as input and returns the number of distinct islands. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m), where n and m are the dimensions of the grid. Constraints: 1 <= grid.length, grid[0].length <= 50 The grid consists solely of 0\'s and 1\'s.","solution":"def countDistinctIslands(grid): def dfs(i, j, direction, path): if (0 <= i < len(grid)) and (0 <= j < len(grid[0])) and grid[i][j] == 1: grid[i][j] = 0 path.append(direction) dfs(i + 1, j, \'D\', path) dfs(i - 1, j, \'U\', path) dfs(i, j + 1, \'R\', path) dfs(i, j - 1, \'L\', path) dfs(i + 1, j + 1, \'DR\', path) dfs(i - 1, j - 1, \'UL\', path) dfs(i + 1, j - 1, \'DL\', path) dfs(i - 1, j + 1, \'UR\', path) path.append(\'B\') # Backtracking shapes = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: path = [] dfs(i, j, \'S\', path) # \'S\' denotes start of an island shapes.add(tuple(path)) return len(shapes)"},{"question":"Given a string `s` and an integer `n`, partition the string into consecutive substrings such that each substring\'s length is at most `n` characters. If the length of `s` is not a multiple of `n`, the final substring will contain the remaining characters, which will be less than or equal to `n`. Return the partitions as a list of strings. Function Signature: ```python def partition_string(s: str, n: int) -> List[str] ``` **Input** - `s`: A non-empty string with length between 1 and 1000. - `n`: An integer between 1 and 100 (inclusive) that specifies the maximum length of each partition. **Output** - A list of strings where each string is a partitioned substring of `s`. **Example** ```python # Example 1 s = \\"abcdefghij\\" n = 3 # Output: [\\"abc\\", \\"def\\", \\"ghi\\", \\"j\\"] # Example 2 s = \\"codeassessment\\" n = 5 # Output: [\\"codea\\", \\"ssess\\", \\"ment\\"] # Example 3 s = \\"performance\\" n = 4 # Output: [\\"perf\\", \\"orma\\", \\"nce\\"] ```","solution":"from typing import List def partition_string(s: str, n: int) -> List[str]: Partition the string `s` into substrings of length at most `n`. Parameters: - s (str): The input string. - n (int): The maximum length of each substring. Returns: - List[str]: The list of partitioned substrings. return [s[i:i+n] for i in range(0, len(s), n)]"},{"question":"Given an array of integers, return a new array containing the sum of each adjacent pair of numbers from the given array. If the given array contains less than two elements, return an empty array. For example: ```python sum_adjacent_pairs([1, 2, 3, 4]) = [3, 5, 7] # 1+2=3, 2+3=5, 3+4=7 sum_adjacent_pairs([7, 5, 8, 10, 2]) = [12, 13, 18, 12] # 7+5=12, 5+8=13, 8+10=18, 10+2=12 sum_adjacent_pairs([2]) = [] # Less than two elements sum_adjacent_pairs([]) = [] # No elements ``` All input integers will be non-negative and the array can have up to 1000 elements. Good luck!","solution":"def sum_adjacent_pairs(arr): Returns a new array containing the sum of each adjacent pair of numbers from the given array. If the given array contains less than two elements, returns an empty array. if len(arr) < 2: return [] return [arr[i] + arr[i + 1] for i in range(len(arr) - 1)]"},{"question":"Serena loves puzzles and likes to challenge her friends with coding problems. Recently, she came up with a new challenge related to strings and substrings. She wants to know the length of the longest substring of a given string that contains at most two distinct characters. A substring is defined as a contiguous sequence of characters within a string. Help Serena by writing a function that determines the length of such a substring. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5). The string will contain only lowercase English letters. -----Output----- Output a single integer representing the length of the longest substring of s that contains at most two distinct characters. -----Examples----- Input eceba Output 3 Input aaa Output 3 Input abaccc Output 4 -----Explanation----- In the first example, the longest substring with at most two distinct characters is \\"ece\\" with length 3. In the second example, the entire string \\"aaa\\" has only one distinct character and hence the length is 3. In the third example, the longest substring with at most two distinct characters is \\"abac\\" with length 4.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring of s that contains at most two distinct characters. if not s: return 0 max_len = 0 left = 0 char_index_map = {} for right, char in enumerate(s): char_index_map[char] = right while len(char_index_map) > 2: leftmost_char_index = min(char_index_map.values()) leftmost_char = s[leftmost_char_index] del char_index_map[leftmost_char] left = leftmost_char_index + 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given an integer N representing the number of ranges. Each range is defined by two integers, L and R (1 ≤ L ≤ R ≤ 10^9). For each range, print the sum of all prime numbers that lie within that range. Input The first line of input contains a single integer N denoting the number of ranges. Each of the following N lines contains two space-separated integers L and R, defining the range [L, R]. Output For each range, output a single line containing the sum of all prime numbers in that range. Constraints 1 ≤ N ≤ 10^5 1 ≤ L ≤ R ≤ 10^9 Example Input: 2 1 10 10 20 Output: 17 60 Note: The sum of prime numbers in the range [1, 10] is 2 + 3 + 5 + 7 = 17. The sum of prime numbers in the range [10, 20] is 11 + 13 + 17 + 19 = 60.","solution":"def sum_of_primes_in_range(L, R): Returns the sum of all prime numbers in the range [L, R]. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True total_sum = 0 for number in range(L, R + 1): if is_prime(number): total_sum += number return total_sum def sum_of_primes_for_multiple_ranges(ranges): results = [] for L, R in ranges: results.append(sum_of_primes_in_range(L, R)) return results"},{"question":"Given an array of integers, rearrange the array in such a manner that all zeros are moved to the end while maintaining the relative order of the non-zero elements. For example, if the given array is [1, 0, 2, 0, 4], the rearranged array should be [1, 2, 4, 0, 0]. Implement a function `moveZerosToEnd` that takes an array as input and rearranges it in-place according to the above condition. # Example 1: Input: ```python arr = [1, 0, 3, 0, 12] ``` Output: ```python [1, 3, 12, 0, 0] ``` # Example 2: Input: ```python arr = [0, 0, 0, 1, 2, 3] ``` Output: ```python [1, 2, 3, 0, 0, 0] ``` # Function Signature: ```python def moveZerosToEnd(arr: List[int]) -> None: # your code here ``` # Constraints: - The array length will be in the range [1, 10^5]. - The elements of the array are integers in the range [-10^9, 10^9]. # Expected Time Complexity: O(N) # Expected Auxiliary Space: O(1)","solution":"def moveZerosToEnd(arr): Rearranges the array such that all zeros are moved to the end while maintaining the relative order of non-zero elements. n = len(arr) zero_index = 0 # Pointer for placing the next non-zero element # Move all non-zero elements to the front for i in range(n): if arr[i] != 0: arr[zero_index] = arr[i] zero_index += 1 # Fill the remaining part of the array with zeros for i in range(zero_index, n): arr[i] = 0 return arr # Optional if the function needs to return the array"},{"question":"Implement a function that compresses a string such that each group of consecutive identical characters is replaced by the character followed by the number of occurrences of that character. If the compressed string is not shorter than the original string, return the original string instead. # Algorithm Steps 1. Initialize an empty string `result` to store the compressed version of the input string. 2. Traverse the input string, keeping track of the current character and its count. 3. Append each character followed by its count to `result`. 4. Compare the length of `result` with the original string. 5. Return the shorter of the two strings. # Examples ``` Input: \\"aaabbbccc\\" Output: \\"a3b3c3\\" Input: \\"abc\\" Output: \\"abc\\" Input: \\"aabbcc\\" Output: \\"aabbcc\\" Input: \\"aabcccccaaa\\" Output: \\"a2b1c5a3\\" ``` # Function Signature ```python def compress_string(s: str) -> str: pass ```","solution":"def compress_string(s: str) -> str: Compresses a string such that each group of consecutive identical characters is replaced by the character followed by the number of occurrences of that character. If the compressed string is not shorter than the original string, return the original string instead. :param s: The input string to be compressed. :return: The compressed string or the original string if the compressed string is not shorter. if not s: return s compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count}\\") current_char = char count = 1 compressed.append(f\\"{current_char}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are given an array of integers `arr = [a_1, a_2, ..., a_n]`. A subarray is defined as a contiguous segment of the array. The sum of a subarray is defined as the sum of its elements. Your task is to find the sum of the maximum subarray and the sum of the minimum subarray for each test case. For example: * For array `[1, -2, 3, 4, -5]`, the maximum subarray is `[3, 4]` with sum `7`, and the minimum subarray is `[-5]` with sum `-5`. * For array `[-3, -2, -5, -1]`, the maximum subarray is `[-1]` with sum `-1`, and the minimum subarray is `[-3, -2, -5, -1]` with sum `-11`. You need to return the results for each test case as a single line, containing two space-separated integers—the sum of the maximum subarray and the sum of the minimum subarray, respectively. Input The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the array. 2. The second line contains `n` integers `a_1, a_2, ..., a_n` (-10^4 ≤ a_i ≤ 10^4) — the elements of the array. It is guaranteed that the sum of lengths of all arrays in the input does not exceed 10^6. Output For each test case, print a single line containing two space-separated integers — the sum of the maximum subarray and the sum of the minimum subarray. Examples Input ``` 3 5 1 -2 3 4 -5 4 -3 -2 -5 -1 6 4 -1 2 1 -5 4 ``` Output ``` 7 -5 -1 -11 6 -5 ``` Explanation: For the first test case: - The maximum subarray sum is obtained from the subarray `[3, 4]` which is `7`. - The minimum subarray sum is obtained from the subarray `[-5]` which is `-5`. For the second test case: - The maximum subarray sum is obtained from the subarray `[-1]` which is `-1`. - The minimum subarray sum is obtained from the subarray `[-3, -2, -5, -1]` which is `-11`. For the third test case: - The maximum subarray sum is obtained from the subarray `[4, -1, 2, 1]` which is `6`. - The minimum subarray sum is obtained from the subarray `[-5]` which is `-5`.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum using Kadane\'s algorithm. max_sum = cur_sum = arr[0] for num in arr[1:]: cur_sum = max(num, cur_sum + num) max_sum = max(max_sum, cur_sum) return max_sum def min_subarray_sum(arr): Finds the minimum subarray sum using a modified version of Kadane\'s algorithm. min_sum = cur_sum = arr[0] for num in arr[1:]: cur_sum = min(num, cur_sum + num) min_sum = min(min_sum, cur_sum) return min_sum def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] max_sum = max_subarray_sum(arr) min_sum = min_subarray_sum(arr) results.append(f\\"{max_sum} {min_sum}\\") return results"},{"question":"You are given a chessboard of size n times m, initially all cells are empty. Two players, Alice and Bob, alternately place their knights on the board. Alice plays first. The knight moves in an \\"L\\" shape: two steps in one direction and then one step in a perpendicular direction, or one step in one direction and then two steps in a perpendicular direction. A knight can attack another knight if it can move to that knight\'s position in one move. Each player must place their knight such that it is not under attack from any other knight on the board. If a player cannot place their knight according to this rule, they lose the game. You need to determine the winner of the game, assuming both players play optimally. Return \\"Alice\\" if Alice wins, or \\"Bob\\" if Bob wins. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the chessboard. -----Output----- Output a single string \\"Alice\\" or \\"Bob\\" indicating the winner of the game. -----Example----- Input 3 3 Output Alice Input 2 2 Output Bob","solution":"def chess_knight_game_winner(n, m): Returns the winner of the knight game on an n x m board where Alice starts first. if n == 2 and m == 2: return \\"Bob\\" else: return \\"Alice\\""},{"question":"In Gurukul University, the university librarian is organizing books on a shelf according to their unique IDs. The librarian wants to know the number of ways in which a particular set of books can be organized. Each unique ID corresponds to a different book. The librarian gives you the number of books, and you have to help find out the number of possible unique orderings (permutations) of those books. Input: The first line contains the number of test cases, T. T lines follow, each of which contains the total number of books. Output: Print the total number of unique orderings for each test case. Constraints: 1 ≤ T ≤ 100 0 ≤ N ≤ 10 Note: - N=0 means there are no books. SAMPLE INPUT 3 1 2 4 SAMPLE OUTPUT 1 2 24 Explanation Input: n = 1 Output: 1 There is only one way to order 1 book. Input: n = 2 Output: 2 There are two ways to organize 2 books: [1, 2] and [2, 1]. Input: n = 4 Output: 24 There are 4! (4 factorial) = 24 ways to order 4 books.","solution":"def factorial(n): Returns the factorial of n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def number_of_orderings(test_cases): Given a list of book counts, returns the number of unique orderings for each book count. return [factorial(n) for n in test_cases]"},{"question":"Alice is organizing a cookie baking event for her friends. She has a large cookie dough mixture and a cookie cutter of a specific shape. Alice wants to use the cookie cutter to cut out cookies from the dough, and she wants to cut out as many cookies as possible. The dough is rectangular with dimensions n x m, and the cookie cutter is rectangular with dimensions a x b. Alice can use the cookie cutter as many times as possible, but she cannot rotate the cutter. Given the dimensions of the dough and the cutter, determine the maximum number of cookies Alice can cut out from the dough. Input You are given four integers n, m, a, b (1 ≤ n, m, a, b ≤ 10^9). Output Print a single integer representing the maximum number of cookies Alice can cut out. Examples Input 10 15 2 3 Output 25 Input 100 100 5 7 Output 285 Input 5 5 3 3 Output 1 Note In the first sample, the dough has dimensions 10 x 15 and the cutter has dimensions 2 x 3. Alice can place the cutter 5 times along the width and 5 times along the height, resulting in 25 cookies. In the second sample, the dough has dimensions 100 x 100 and the cutter has dimensions 5 x 7. Alice can fit the cutter 20 times along the width and 14.28 (rounded down to 14) times along the height, resulting in 20 * 14 = 280 cookies. In the third sample, the dough has dimensions 5 x 5 and the cutter has dimensions 3 x 3. Alice can only cut out one cookie.","solution":"def max_cookies(n, m, a, b): Given the dimensions of the dough (n x m) and the dimensions of the cookie cutter (a x b), returns the maximum number of cookies Alice can cut out from the dough. cookies_across_width = n // a cookies_across_height = m // b return cookies_across_width * cookies_across_height"},{"question":"Given a string S consisting of lowercase English letters and the characters \'{\', \'}\', the task is to determine if the string is valid. A string is considered valid if and only if for every closing bracket \'}\', there is a corresponding opening bracket \'{\' in the correct order. Example 1: Input: S = \\"{a{b}{c}d}\\" Output: true Explanation: The string \\"{a{b}{c}d}\\" is valid because all the opening brackets have matching closing brackets in the correct order. Example 2: Input: S = \\"{a{b}c}}\\" Output: false Explanation: The string \\"{a{b}c}}\\" is not valid because there is an extra closing bracket without a matching opening bracket. Example 3: Input: S = \\"{{abc}\\" Output: false Explanation: The string \\"{{abc}\\" is not valid because there is an opening bracket without a matching closing bracket. User Task: Your task is to complete the function isValidString() which takes a single string as input and returns a boolean value (true if the string is valid, otherwise false). You do not need to take any input or print anything. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 <= |S| <= 10^{5} S contains lowercase English alphabets, and \'{\', \'}\' characters.","solution":"def isValidString(S): This function checks if the given string S is valid according to the problem definition. Args: S (str): The input string containing lowercase letters and \'{\' and \'}\' characters. Returns: bool: True if the string is valid, otherwise False. stack = [] for char in S: if char == \'{\': stack.append(char) elif char == \'}\': if not stack: return False stack.pop() return not stack"},{"question":"Your task is to help Mike prepare for his coding assessment by organizing his study schedule. Mike has a list of N subjects he needs to study, each requiring a certain number of hours denoted by an array H of size N where Hi represents the hours required to study subject i. Mike has D days to prepare, and each day he can study for up to M hours. You need to determine the minimum number of additional study hours, if any, that Mike needs to fit all his study hours within the given days. Input: The first line of the input will contain a single integer T (Number of test cases). For every test case, the first line will contain three space-separated integers denoting N, D, and M. The next line will contain N space-separated integers denoting the array H. Output: For each test case, print the required answer in a new line. If no additional hours are needed, print 0. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ D ≤ 1000 1 ≤ M ≤ 1000 1 ≤ Hi ≤ 1000 SAMPLE INPUT 2 3 2 5 3 2 6 4 3 4 4 4 4 4 SAMPLE OUTPUT 1 4 Explanation Test case #1: Total study hours needed are 3 + 2 + 6 = 11. With 2 days and each day having 5 hours available, Mike can study for up to 10 hours in total. So, he needs an additional 1 hour to fit in all his study hours. Test case #2: Total study hours needed are 4 + 4 + 4 + 4 = 16. With 3 days and each day having 4 hours available, Mike can study for up to 12 hours in total. So, he needs an additional 4 hours to fit in all his study hours.","solution":"def additional_study_hours(T, test_cases): results = [] for test_case in test_cases: N, D, M, H = test_case total_hours_needed = sum(H) total_hours_available = D * M if total_hours_needed > total_hours_available: results.append(total_hours_needed - total_hours_available) else: results.append(0) return results # Given function to read and process input def process_input_and_compute_additional_hours(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, len(input_lines), 2): N, D, M = map(int, input_lines[i].split()) H = list(map(int, input_lines[i+1].split())) test_cases.append((N, D, M, H)) return additional_study_hours(T, test_cases) # Example usage input_string = \\"2n3 2 5n3 2 6n4 3 4n4 4 4 4\\" print(process_input_and_compute_additional_hours(input_string))"},{"question":"Write a function that takes in a list of integers and returns a new list with two elements: 1. The first element should be the sum of all even numbers in the input list. 2. The second element should be the sum of all odd numbers in the input list. For example: ```python sum_even_odd([1, 2, 3, 4, 5, 6]) # returns [12, 9] sum_even_odd([10, 21, 32, 43, 54]) # returns [96, 64] sum_even_odd([]) # returns [0, 0] ``` You may assume that the input list will only contain integers, and it can be empty. Ensure that the output is correctly formatted as a list with two integers.","solution":"def sum_even_odd(numbers): Returns a list with two elements: 1. The sum of all even numbers in the input list. 2. The sum of all odd numbers in the input list. even_sum = 0 odd_sum = 0 for number in numbers: if number % 2 == 0: even_sum += number else: odd_sum += number return [even_sum, odd_sum]"},{"question":"**Palindrome Permutation** Write a function `is_palindrome_permutation(s)` that determines if a given string `s` is a permutation of a palindrome. A palindrome is a word or phrase that reads the same forwards and backwards (ignoring spaces, punctuation, and case). A permutation is a rearrangement of letters. The function should return `True` if the input string is a permutation of a palindrome and `False` otherwise. ```python is_palindrome_permutation(\\"Tact Coa\\") # True, because \\"Tact Coa\\" can be rearranged to \\"taco cat\\", which is a palindrome. ``` Note: Ignore case and non-letter characters in your function. Only consider the frequency of the alphabetical characters in the input string.","solution":"def is_palindrome_permutation(s): Determines if a given string is a permutation of a palindrome. :param s: Input string. :return: True if s is a permutation of a palindrome, False otherwise. s = s.replace(\\" \\", \\"\\").lower() char_count = {} for char in s: if char.isalpha(): if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = sum(1 for count in char_count.values() if count % 2 == 1) return odd_count <= 1"},{"question":"Write a function that tracks the maximum frequency of elements appearing in a dynamic list with the following operations: * insert(x): Add element x to the list. * delete(x): Remove one occurrence of element x from the list if it exists. * get_max_frequency(): Return the maximum frequency of any element in the list. Constraints * 1 ≤ q ≤ 100000 * 1 ≤ xi ≤ 100000 Input q com0 xi com1 xi ... comq−1 xi In the first line, q (the number of query operations) is given. Then, q operations are given where com represents the type of operations. \'insert\' denotes adding an element xi, \'delete\' denotes removing an element xi, and \'get_max_frequency\' will return the current highest frequency of elements in the list. Output For each get_max_frequency operation, print the maximum frequency of any element in the list. Examples Input 7 insert 1 insert 2 insert 2 get_max_frequency delete 2 get_max_frequency insert 3 Output 2 1 Input 5 insert 5 insert 5 insert 5 delete 5 get_max_frequency Output 2","solution":"from collections import defaultdict class FrequencyTracker: def __init__(self): self.freq = defaultdict(int) self.count_freq = defaultdict(int) def insert(self, x): if self.freq[x] > 0: self.count_freq[self.freq[x]] -= 1 if self.count_freq[self.freq[x]] == 0: del self.count_freq[self.freq[x]] self.freq[x] += 1 self.count_freq[self.freq[x]] += 1 def delete(self, x): if self.freq[x] > 0: self.count_freq[self.freq[x]] -= 1 if self.count_freq[self.freq[x]] == 0: del self.count_freq[self.freq[x]] self.freq[x] -= 1 if self.freq[x] > 0: self.count_freq[self.freq[x]] += 1 def get_max_frequency(self): if not self.count_freq: return 0 return max(self.count_freq.keys()) def process_operations(operations): ft = FrequencyTracker() result = [] for operation in operations: if operation[0] == \'insert\': ft.insert(operation[1]) elif operation[0] == \'delete\': ft.delete(operation[1]) elif operation[0] == \'get_max_frequency\': result.append(ft.get_max_frequency()) return result"},{"question":"Your task is to write a program that acts as a simplified text-based adventure game engine. In this type of game, the player interacts with the environment by entering text commands, and the engine responds by describing the effects of those commands. Each adventure consists of a series of commands that the player can issue, and each command leads to a unique outcome. The commands are very simplified and follow this structure: - \\"move [direction]\\": Moves the player in one of the four cardinal directions (north, south, east, west). If the move is successful, the engine should respond with \\"Moved [direction]\\". If the move is blocked (for example, by a wall), the engine should respond with \\"Blocked\\". - \\"take [item]\\": Picks up an item if it is present at the player\'s current location. The engine should respond with \\"Taken [item]\\" if the item is available and \\"No [item] here\\" if it is not. - \\"inventory\\": Lists all items currently in the player\'s inventory. The engine should respond with a comma-separated list of items or \\"Empty\\" if the inventory is empty. Your program should read in a map of the game environment, the initial position of the player, the positions of all items, and a series of commands. The map is represented as a grid of characters, where \'#\' represents a wall, \'.\' represents an empty space, and \'P\' indicates the starting position of the player. Items are placed on empty spaces and denoted by their respective characters. The input consists of multiple parts: 1. The first line contains two integers, `n` and `m`, representing the number of rows and columns in the map. 2. The next `n` lines each contain `m` characters representing the game map. 3. The following line contains an integer `k`, the number of items in the game. 4. The next `k` lines each contain three values: an item\'s character, the row number, and the column number where the item is located. 5. The next line contains an integer `c`, the number of commands. 6. The final `c` lines each contain a command. Your program should output the result of each command in order. # Input ``` 5 5 # #P..# #.# #...# # 3 a 1 2 b 3 4 c 2 2 5 move north move east take a inventory move south ``` # Output ``` Blocked Moved east Taken a a Moved south ``` # Notes - The initial position of the player is marked by \'P\' in the map. - The player can move to any \'.\' but not to a \'#\'. - Multiple items can be picked up if they are available in the current location. - Commands should be processed sequentially and output should reflect the state of the game immediately after each command.","solution":"def text_adventure_game(n, m, game_map, items, commands): # Map initialization and player position inventory = [] for i in range(n): if \'P\' in game_map[i]: player_pos = (i, game_map[i].index(\'P\')) game_map[i] = game_map[i].replace(\'P\', \'.\') break # Convert items list to a dict of item positions item_positions = {(row, col): item for item, row, col in items} # Helper function to handle movement def move(direction): nonlocal player_pos row, col = player_pos if direction == \'north\': new_pos = (row - 1, col) elif direction == \'south\': new_pos = (row + 1, col) elif direction == \'east\': new_pos = (row, col + 1) elif direction == \'west\': new_pos = (row, col - 1) else: return \\"Blocked\\" if 0 <= new_pos[0] < n and 0 <= new_pos[1] < m and game_map[new_pos[0]][new_pos[1]] == \'.\': player_pos = new_pos return f\\"Moved {direction}\\" else: return \\"Blocked\\" # Helper function to handle taking items def take(item): if player_pos in item_positions and item_positions[player_pos] == item: inventory.append(item) del item_positions[player_pos] return f\\"Taken {item}\\" else: return f\\"No {item} here\\" # Helper function to handle inventory listing def show_inventory(): return \\", \\".join(inventory) if inventory else \\"Empty\\" results = [] for command in commands: parts = command.split() if len(parts) == 2 and parts[0] == \\"move\\": results.append(move(parts[1])) elif len(parts) == 2 and parts[0] == \\"take\\": results.append(take(parts[1])) elif parts[0] == \\"inventory\\": results.append(show_inventory()) return results # Example usage if __name__ == \\"__main__\\": n = 5 m = 5 game_map = [ \\"#\\", \\"#P..#\\", \\"#.#\\", \\"#...#\\", \\"#\\", ] items = [ (\'a\', 1, 2), (\'b\', 3, 4), (\'c\', 2, 2), ] commands = [ \\"move north\\", \\"move east\\", \\"take a\\", \\"inventory\\", \\"move south\\", ] outputs = text_adventure_game(n, m, game_map, items, commands) for output in outputs: print(output)"},{"question":"You are given an integer array A of length N and a set of M 3-tuple operations. Each operation can be one of the following types: 1 l r k: Increment each element A_i (for l ≤ i ≤ r) by k. 2 l r k: Multiply each element A_i (for l ≤ i ≤ r) by k. 3 l r: Find the sum of the elements A_i (for l ≤ i ≤ r). You are required to process these operations and return the results of the \'find\' queries. Input The first line contains two integers N and M. (1 ≤ N, M ≤ 10^5) The second line contains N integers, array A_1, A_2, ..., A_N. (0 ≤ A_i ≤ 10^6) The next M lines describe the operations. Each line begins with an integer indicating the operation type followed by integers corresponding to that operation\'s parameters. For operations of type 1 and 2: (1 ≤ l ≤ r ≤ N), (1 ≤ k ≤ 1000) For operations of type 3: (1 ≤ l ≤ r ≤ N) Output Print the result for each operation of type 3, in separate lines. Examples Input 6 5 2 3 4 5 6 7 1 1 3 2 3 1 3 2 4 6 2 3 1 6 2 2 5 3 Output 15 51 Note In the example: After the first operation, the array becomes [4, 5, 6, 5, 6, 7]. The result of the second operation is the sum 4 + 5 + 6 = 15. After the third operation, the array becomes [4, 5, 6, 10, 12, 14]. The result of the fourth operation is the sum 4 + 5 + 6 + 10 + 12 + 14 = 51. After the fifth operation, the array becomes [4, 15, 18, 30, 36, 14].","solution":"def process_operations(N, M, A, operations): results = [] for operation in operations: if operation[0] == 1: l, r, k = operation[1], operation[2], operation[3] for i in range(l-1, r): A[i] += k elif operation[0] == 2: l, r, k = operation[1], operation[2], operation[3] for i in range(l-1, r): A[i] *= k elif operation[0] == 3: l, r = operation[1], operation[2] results.append(sum(A[l-1:r])) return results"},{"question":"Write a program that determines the number of days between two dates. The dates are given in the format YYYY-MM-DD. Each input line contains two dates separated by a space. The program should read the input until the end-of-file (EOF) and output the number of days between each pair of dates. The output for each pair should be a single line indicating the number of days. Assume the input dates are valid, and the years of the dates are between 1900 and 2100. Input For each line, two dates in the format YYYY-MM-DD separated by a space. Output For each pair of dates, print the number of days between them on a new line. Example Input 2020-01-01 2020-01-10 2019-12-31 2020-01-01 Output 9 1","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the number of days between two dates in the format YYYY-MM-DD. date_format = \\"%Y-%m-%d\\" d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) delta = abs((d2 - d1).days) return delta"},{"question":"Alice and Bob are good friends and they love to play the game of sequences. They have an integer sequence of length n and they both want to find out the longest contiguous subsequence that contains at most k distinct numbers. Alice will write a program to solve this problem, but she needs your help. Can you write a function that takes the integer sequence and the integer k, and returns the length of the longest contiguous subsequence that contains at most k distinct numbers? -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ n) — the length of the integer sequence and the maximum number of distinct numbers allowed in the subsequence. The second line contains n integers separated by spaces, which represent the integer sequence. Each integer in the sequence is in the range [1, 10^9]. -----Output----- Print a single integer — the length of the longest contiguous subsequence that contains at most k distinct numbers. -----Examples----- Input 7 2 1 2 1 2 3 4 1 Output 4 Input 5 3 4 3 5 4 3 Output 5 Input 6 1 1 2 3 4 5 6 Output 1 -----Note----- In the first sample, the longest contiguous subsequence that contains at most 2 distinct numbers is \\"1 2 1 2\\", which has length 4. In the second sample, the entire sequence \\"4 3 5 4 3\\" has at most 3 distinct numbers and thus the length is 5. In the third sample, any contiguous subsequence can have at most 1 distinct number, so the length of the longest contiguous subsequence is 1.","solution":"from collections import defaultdict def longest_subsequence_with_k_distinct(n, k, sequence): Returns the length of the longest contiguous subsequence that contains at most k distinct numbers. left = 0 right = 0 max_length = 0 distinct_count = defaultdict(int) while right < n: current_num = sequence[right] distinct_count[current_num] += 1 while len(distinct_count) > k: left_num = sequence[left] distinct_count[left_num] -= 1 if distinct_count[left_num] == 0: del distinct_count[left_num] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"In a small town, various shops collectively offer the same type of product but at different discounts throughout the day. As a savvy shopper, you want to maximize your savings by purchasing the product when the discount is the highest. However, you can visit the shops only within a given time window. Your task is to determine the maximum discount you can avail yourself during your visit. You are given the discount percentages at each minute of the day and the time window during which you are able to visit the shops. If multiple time windows have the same maximum discount, return the earliest one. -----Input----- - One line containing two positive integers L and R (0 le L < R le 1439), representing the latest minute you can start shopping and the minute you must finish shopping by, respectively. The minutes are given in the format of 0-1439 where 0 means the start of the day and 1439 means the end of the day. - Line of 1440 integers d_0, d_1, ldots, d_{1439} where d_i (0 le d_i le 100) represents the discount percentage at minute i of the day. -----Output----- On a single line print the maximum discount percentage available during the given time window and the earliest minute within that window when the discount occurs. Print the discount and minute separated by a space. -----Examples----- Sample Input: 300 600 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Sample Output: 100 500","solution":"def maximum_discount(L, R, discounts): Finds the maximum discount obtainable within the time window [L, R] and returns the discount and the earliest minute. Parameters: L (int): Starting minute of the window. R (int): Ending minute of the window. discounts (list): List of discount percentages for each minute of the day. Returns: tuple: A tuple containing maximum discount and the earliest minute. max_discount = -1 best_minute = -1 for i in range(L, R + 1): if discounts[i] > max_discount: max_discount = discounts[i] best_minute = i return (max_discount, best_minute)"},{"question":"You are given an array consisting of integers, and you need to process Q queries. Each query contains two integers l and r (1 <= l <= r <= N) which defines a subarray of the original array. For each query, you have to find the number of unique elements in the specified subarray. *Input:* - The first line contains an integer N (1 <= N <= 100000) representing the size of the array. - The second line contains N integers separated by spaces, representing the elements of the array. - The third line contains an integer Q (1 <= Q <= 100000), the number of queries. - The next Q lines each contain two integers l and r defining the subarray. *Output:* For each query, output the number of unique elements in the specified subarray. *Sample Input:* ``` 5 1 2 1 3 2 3 1 3 2 5 1 5 ``` *Sample Output:* ``` 2 3 3 ``` *Explanation:* - For the first query (1, 3), the subarray is [1, 2, 1]. There are 2 unique elements: 1 and 2. - For the second query (2, 5), the subarray is [2, 1, 3, 2]. There are 3 unique elements: 1, 2, and 3. - For the third query (1, 5), the subarray is [1, 2, 1, 3, 2]. There are 3 unique elements: 1, 2, and 3.","solution":"def count_unique_elements(arr, queries): Returns a list where each element corresponds to the number of unique elements in the subarray specified by each query. :param arr: List[int] - The array of integers. :param queries: List[Tuple[int, int]] - List of queries where each query is a tuple (l, r). :return: List[int] - List of integers representing the count of unique elements for each query. result = [] for l, r in queries: subarray = arr[l-1:r] unique_elements = set(subarray) result.append(len(unique_elements)) return result"},{"question":"In a small town, a particular number sequence is popular among the children. This sequence is defined as follows: The first term is an arbitrary positive integer a. Each subsequent term is obtained by adding the digits of the previous term to the previous term itself. For example, if the first term is 12, the next term is 12 + 1 + 2 = 15, and the term after that is 15 + 1 + 5 = 21, and so on. Given an initial term a and an integer n, your task is to find the nth term in the sequence. Input The input consists of two integers a and n (1 ≤ a ≤ 10^6, 1 ≤ n ≤ 10^5). Output Output the nth term in the sequence. Examples Input 12 3 Output 21 Input 5 5 Output 20 Note In the first example, the sequence starts with 12. The next two terms are 15 and 21, respectively. Hence, the third term is 21. In the second example, starting with 5, the sequence progresses as follows: 10, 11, 13, 17, and 20. Hence, the fifth term is 20.","solution":"def find_nth_term(a, n): Given an initial term a and an integer n, find the nth term in the sequence. current_term = a for _ in range(1, n): current_term += sum(int(digit) for digit in str(current_term)) return current_term"},{"question":"Alice decided to encrypt her message using a form of substitution cipher. In her cipher, every character is replaced by a different character. However, she made a twist by adding an offset to the characters\' positions in the alphabet before mapping them to the new characters. Alice shares with you the encrypted message and the offset value she used. Your task is to decrypt the message and retrieve the original text. For example, if the encrypted message is \\"bcd\\", and the offset is 1, the decryption would result in \\"abc\\". This is because each character in the message \\"bcd\\" is shifted back by one alphabet position. Input The first line contains an integer k (1 ≤ k ≤ 25) — the offset value used for the encryption. The second line contains a single string s consisting of lowercase English letters (1 ≤ |s| ≤ 10^5), the encrypted message Alice wants to decrypt. Output Print the original message before it was encrypted with the given offset. Example Input 3 def Output abc Input 2 zab Output xyz Note In the first example, each character in \\"def\\" is shifted back by 3 positions in the alphabet to get \\"abc\\". In the second example, \'z\' goes back to \'x\', \'a\' goes back to \'y\', and \'b\' goes back to \'z\', resulting in \\"xyz\\".","solution":"def decrypt_message(offset, encrypted_message): Decrypts the given encrypted message using the specified offset. Parameters: offset (int): The offset value used for the encryption (1 ≤ offset ≤ 25). encrypted_message (str): The encrypted message consisting of lowercase English letters. Returns: str: The original message before encryption. decrypted_message = [] for char in encrypted_message: # Calculate the original character\'s position original_pos = (ord(char) - ord(\'a\') - offset) % 26 # Append the corresponding character to the decrypted message decrypted_message.append(chr(ord(\'a\') + original_pos)) return \'\'.join(decrypted_message)"},{"question":"In a peaceful town, there are several types of seasonal fruits available for sale in the local markets. Each market has its unique selling pattern and offers these fruits at varying prices. As a shop owner, you need to record these prices and determine which market offers each type of fruit at the lowest price to make a well-informed decision. Given F types of fruits and M different markets, find for each fruit the market that sells it at the lowest price. If multiple markets offer the same lowest price, choose the market with the smallest index. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two space-separated integers F and M, the number of fruits and the number of markets respectively. - The next F lines contain M space-separated integers each, representing the prices of that particular fruit in each market. Output: For each test case, output F space-separated integers indicating the index (1 ≤ index ≤ M) of the market that offers the lowest price for each fruit. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ F, M ≤ 500 - 1 ≤ Prices ≤ 1000 SAMPLE INPUT 2 3 3 50 40 70 60 55 45 30 35 25 2 2 100 200 150 150 SAMPLE OUTPUT 2 3 3 1 1","solution":"def find_cheapest_markets(T, test_cases): results = [] for case in test_cases: F, M, prices = case case_result = [] for f in range(F): min_price = float(\'inf\') min_index = -1 for m in range(M): if prices[f][m] < min_price: min_price = prices[f][m] min_index = m + 1 # +1 to convert 0-based index to 1-based case_result.append(min_index) results.append(case_result) return results # Helper function to parse input def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): F, M = map(int, input_lines[index].split()) index += 1 prices = [] for _ in range(F): prices.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append((F, M, prices)) return T, test_cases # Example usage input_data = \\"2n3 3n50 40 70n60 55 45n30 35 25n2 2n100 200n150 150\\" T, test_cases = parse_input(input_data) result = find_cheapest_markets(T, test_cases) for res in result: print(\\" \\".join(map(str, res)))"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],z={key:0},P={key:1};function R(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",z,"See more"))],8,j)):l("",!0)])}const L=d(A,[["render",R],["__scopeId","data-v-64468d83"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/13.md","filePath":"chatai/13.md"}'),M={name:"chatai/13.md"},B=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{G as __pageData,B as default};
