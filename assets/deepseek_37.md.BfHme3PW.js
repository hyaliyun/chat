import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function O(s,e,h,m,a,r){return n(),i("div",k,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(q,[["render",O],["__scopeId","data-v-d78a0937"]]),Y=JSON.parse('[{"question":"You are organizing a competition for which you need to arrange several games in such a way that there is no overlapping. You will be given a list of games, each with a start time and an end time. A game can be described as a pair (start, end), indicating that the game starts at `start` and ends at `end`. Two games are considered non-overlapping if for any two distinct games (a, b) and (c, d), either b <= c or d <= a. Your task is to find the maximum number of non-overlapping games that you can schedule. Input: - The first line contains an integer `n` (1 le n le 10^5), the number of games. - The next `n` lines each contain two integers `start` and `end` (0 le start < end le 10^9), the start and end times of the games. Output: - A single integer, the maximum number of non-overlapping games you can schedule. Example: ``` Input: 3 1 2 2 3 3 4 Output: 3 ``` ``` Input: 4 1 3 2 4 3 5 0 6 Output: 2 ``` Note: - In the first example, all games can be scheduled without overlapping. - In the second example, the optimal way to schedule the games is to select the games (1,3) and (3,5) or (2,4) and (0,6).","solution":"def max_non_overlapping_games(n, games): Given a number of games with their start and end times, this function returns the maximum number of non-overlapping games. Parameters: n (int): The number of games. games (list of tuples): Each tuple (start, end) represents a game\'s start and end time. Returns: int: The maximum number of non-overlapping games that can be scheduled. # Sort the games based on their end times. games.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping games max_games = 0 last_end_time = 0 # Iterate through the sorted games and choose the non-overlapping ones for start, end in games: if start >= last_end_time: max_games += 1 last_end_time = end return max_games"},{"question":"You are given a list of integers. Your task is to determine if the list can be partitioned into two non-empty subsets such that the sum of the elements in both subsets is equal. If such a partition is possible, output \\"YES\\". Otherwise, output \\"NO\\". # Input The first line of input contains a single integer T (1 leq T leq 10) which denotes the number of test cases. The first line of each test case contains an integer n (2 leq n leq 1000) — the number of elements in the list. The second line of each test case contains n space-separated integers a_1, a_2, ..., a_n (1 leq a_i leq 10000) — the elements of the list. # Output For each test case, print \\"YES\\" if the list can be partitioned into two non-empty subsets with equal sum, otherwise print \\"NO\\". # Example Input ``` 2 4 1 5 11 5 3 1 1 3 ``` Output ``` YES NO ``` # Explanation In the first test case, the list `[1, 5, 11, 5]` can be partitioned into `[1, 5, 5]` and `[11]`, both subsets having equal sum of 11. In the second test case, the list `[1, 1, 3]` cannot be partitioned into two subsets with equal sum.","solution":"def can_partition(nums): total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for t in range(target, num - 1, -1): dp[t] = dp[t] or dp[t - num] return \\"YES\\" if dp[target] else \\"NO\\" def solve_partition_problem(test_cases): results = [] for nums in test_cases: results.append(can_partition(nums)) return results"},{"question":"Alice has a collection of paintings displayed in an art gallery. The paintings are arranged in a single row, and each painting is given a beauty value represented by an integer array p. Alice wants to select exactly k consecutive paintings in such a way that the sum of their beauty values is maximized. You are given an integer n (1 le n le 10^5) representing the number of paintings and an integer k (1 le k le n) representing the number of consecutive paintings Alice must select. You are also given an integer array p of length n, where p[i] represents the beauty value of the i-th painting. Find the maximum sum of beauty values of any k consecutive paintings. The first line contains the integer n and the integer k. The second line contains the integer array p, where p[i] ( 1 le p[i] le 10^9 ) is the beauty value of the i-th painting. # Input - The first line of input contains two integers n and k. - The second line contains n integers representing the array p. # Output Print a single integer representing the maximum sum of beauty values of any k consecutive paintings. Example Input: ``` 5 2 1 2 3 4 5 ``` Output: ``` 9 ``` Explanation: - The maximum sum is obtained by selecting the last two consecutive paintings with beauty values 4 and 5, their sum is 9.","solution":"def max_beauty_sum(n, k, p): Finds the maximum sum of beauty values of any k consecutive paintings. Parameters: n (int): The number of paintings. k (int): The number of consecutive paintings to select. p (list): List of integers representing the beauty value of each painting. Returns: int: The maximum sum of beauty values of any k consecutive paintings. current_sum = sum(p[:k]) # Sum of the first k elements max_sum = current_sum # Slide the window across the array for i in range(1, n - k + 1): current_sum = current_sum - p[i - 1] + p[i + k - 1] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given an n-digit integer and k transformations. The transformation consists of choosing a digit in the integer and swapping it with any other digit of the integer to form a new integer. The goal is to obtain the smallest possible integer after exactly k transformations. If multiple smallest integers can be obtained, choose the lexicographically smallest one. The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) - the number of test cases. Each test case consists of a single line containing two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 100), followed by a string s of n digits representing the integer. For each test case, print the smallest possible integer that can be obtained after exactly k transformations. # Example Input 3 5 1 54321 5 2 43215 2 0 21 Output 14325 12345 21 In the first test case, you can swap \'5\' with any other digit to get the smallest possible integer \'14325\'. In the second test case, you need two transformations to obtain the smallest possible integer \'12345\'. In the third test case, no transformations are needed.","solution":"def smallest_integer_after_transformations(n, k, s): Returns the smallest possible integer after k transformations. Parameters: n (int): length of the integer string k (int): number of transformations s (str): the integer in string format Returns: str: the smallest possible integer after k transformations s = list(s) for i in range(n): if k == 0: break min_digit = s[i] min_index = i # Find the smallest digit in the remaining array for j in range(i + 1, n): if s[j] < min_digit: min_digit = s[j] min_index = j # If the smallest digit is not in the current position if min_index != i: s[i], s[min_index] = s[min_index], s[i] k -= 1 return \'\'.join(s)"},{"question":"You are given an array of integers and you are allowed to perform at most one operation to make the array strictly increasing. In one operation, you can increment or decrement an element of the array by 1. An array is strictly increasing if for every pair of indices i and j (i < j), the element at index i is strictly less than the element at index j. Determine if it is possible to make the array strictly increasing by performing at most one operation. The first line contains an integer t (1 leq t leq 1000) - the number of test cases. Each of the following t lines contains the description of a test case. For each test case, the first line contains an integer n (2 leq n leq 1000) - the number of elements in the array. The next line contains n integers of the array a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9). For each test case, print \\"YES\\" if it is possible to make the array strictly increasing by performing at most one operation. Otherwise, print \\"NO\\". # Example Input: ``` 3 5 1 2 3 4 5 4 1 1 2 3 3 3 3 3 ``` Output: ``` YES YES NO ``` # Explanation In the first test case, the array is already strictly increasing. In the second test case, you can increment the first element 1 to 2 or decrement the second element to 0. In the third test case, no single increment or decrement can make the array strictly increasing.","solution":"def can_be_made_increasing(arr): n = len(arr) violation_indices = [] for i in range(1, n): if arr[i] <= arr[i - 1]: violation_indices.append(i) if len(violation_indices) == 0: return \\"YES\\" if len(violation_indices) > 1: return \\"NO\\" v = violation_indices[0] # Try incrementing arr[v-1] or decrementing arr[v] if (v == n-1 or arr[v-1] < arr[v+1]) or (v == 1 or arr[v-2] < arr[v]): return \\"YES\\" return \\"NO\\" def judge_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(can_be_made_increasing(arr)) return results"},{"question":"You are given an array of integers of size n. Your task is to rearrange the array such that no two adjacent elements are the same. If there are multiple possible rearrangements, output any of them. If it is impossible to rearrange the array to meet the requirement, output \\"IMPOSSIBLE\\". The first line contains a single integer n (1 ≤ n ≤ 100,000) – the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) – the elements of the array. Output a single line containing the rearranged array or \\"IMPOSSIBLE\\" if no such rearrangement is possible. Sample Input 1: 6 1 1 1 2 2 3 Sample Output 1: 1 2 1 3 1 2 (or any other valid rearrangement) Sample Input 2: 3 3 3 3 Sample Output 2: IMPOSSIBLE","solution":"from collections import Counter import heapq def rearrange_array(n, arr): Rearranges the array so that no two adjacent elements are the same. If impossible, returns \\"IMPOSSIBLE\\". if n == 1: return arr # Count the frequency of each element freq = Counter(arr) max_freq = max(freq.values()) if max_freq > (n + 1) // 2: return \\"IMPOSSIBLE\\" # Max heap to get the most frequent elements first max_heap = [(-count, num) for num, count in freq.items()] heapq.heapify(max_heap) result = [] prev_count, prev_num = 0, None while max_heap: count, num = heapq.heappop(max_heap) result.append(num) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) prev_count, prev_num = count + 1, num return result"},{"question":"Alice is preparing for her upcoming computer science competition where she has to solve various algorithmic problems. To get better at dynamic programming, she has started practicing with a set of coin change problems. The problem is described below: Given an array of distinct integers `coins` and a single integer `amount`, you need to determine the minimum number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return `-1`. You may assume that you have an infinite number of each kind of coin. **Input:** - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of coin denominations. - The second line contains `n` distinct integers `coins[i]` (1 ≤ coins[i] ≤ 10^4) — the values of the coins. - The third line contains a single integer `amount` (0 ≤ amount ≤ 10^4) — the total amount of money. **Output:** - A single integer representing the fewest number of coins that you need to make up the given amount, or `-1` if the amount cannot be made up. **Example 1:** ``` Input: 3 1 2 5 11 Output: 3 Explanation: 11 = 5 + 5 + 1 ``` **Example 2:** ``` Input: 3 2 4 6 3 Output: -1 Explanation: It is not possible to make up the amount 3 with the given coins. ``` Alice wants to write a function `coinChange(coins: List[int], amount: int) -> int` to implement this solution efficiently. Help her by solving this problem.","solution":"from typing import List def coinChange(coins: List[int], amount: int) -> int: dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Luna loves to play with numbers! She just learned about prime numbers and is fascinated by them. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. Now, Luna wants to generate a sequence composed entirely of prime numbers. She will provide you with an integer n (1 ≤ n ≤ 10^5), which represents the length of the sequence she wants. Your task is to generate a sequence of length n such that: - Each number in the sequence is a prime number. - The sequence contains the smallest possible prime numbers that sum up to n. Output the prime sequence such that the sum of its elements is equal to n. If there are multiple prime sequences, you can print any of them. # Input The input consists of a single integer n (1 ≤ n ≤ 10^5). # Output Print a space-separated sequence of prime numbers such that their sum equals n. # Example Input ``` 5 ``` Output ``` 2 3 ``` Input ``` 8 ``` Output ``` 2 2 2 2 ```","solution":"def generate_prime_sequence(n): if n < 2: return [] if n % 2 == 1: return [2] * (n // 2 - 1) + [3] else: return [2] * (n // 2) # Example usage: # generate_prime_sequence(5) -> [2, 3] # generate_prime_sequence(8) -> [2, 2, 2, 2]"},{"question":"You are given a list of strings, each composed of lowercase English letters. Your task is to find the longest common prefix string amongst the given strings. A prefix is a substring that starts at the beginning of a string and can be as long as the string itself. If there is no common prefix, return an empty string. The first line of input contains an integer n (1 le n le 10^4) — the number of strings in the list. The following n lines each contain a string of length between 1 and 10^4, inclusive. Note that the total length of all strings combined will not exceed 10^6 characters. Output a single line containing the longest common prefix string. If no such prefix exists, output an empty string. # Example **Input:** ``` 3 flower flow flight ``` **Output:** ``` fl ``` **Input:** ``` 4 dog racecar car bat ``` **Output:** ``` ``` In the first example, the longest common prefix is \\"fl\\". In the second example, there is no common prefix, so the output is an empty string.","solution":"def longest_common_prefix(strings): Returns the longest common prefix from a list of strings. if not strings: return \\"\\" # Find the shortest string in the list to minimize comparisons shortest = min(strings, key=len) # Iterate through each character of the shortest string for i, char in enumerate(shortest): for other in strings: if other[i] != char: return shortest[:i] return shortest"},{"question":"A rectangular board of n rows and m columns is initially filled completely with \'.\' characters. You are given k operations, and each operation consists of replacing some cells in the board with \'#\' characters. Each operation is specified by four integers r1, c1, r2, c2 that describe a rectangular sub-grid whose top-left corner is (r1, c1) and bottom-right corner is (r2, c2). You need to process all k operations in the given order and print the final state of the board after all operations are applied. Your task is to read the dimensions of the board and the operations, apply each operation in sequence, and print the final board. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000; 1 ≤ k ≤ 100) — the number of rows, columns, and operations, respectively. Each of the following k lines contains four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n; 1 ≤ c1 ≤ c2 ≤ m) — the coordinates of the top-left and bottom-right corners of the sub-grid to be filled with \'#\' characters. Print the final state of the board. Each of the n lines in the output should contain m characters. Example: Input: 5 5 3 1 1 2 2 3 3 4 4 4 2 5 5 Output: ... ... ... . . Explanation of the example: 1. After the first operation, the board looks like this: ``` ... ... ..... ..... ..... ``` 2. After the second operation, the board looks like this: ``` ... ... ... ... ..... ``` 3. After the third operation, the board looks like this: ``` ... ... ... . . ```","solution":"def apply_operations(n, m, k, operations): board = [[\'.\' for _ in range(m)] for _ in range(n)] for op in operations: r1, c1, r2, c2 = op for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): board[i][j] = \'#\' return board def board_to_string(board): return \'n\'.join(\'\'.join(row) for row in board) def main(): n, m, k = map(int, input().split()) operations = [tuple(map(int, input().split())) for _ in range(k)] result_board = apply_operations(n, m, k, operations) print(board_to_string(result_board)) if __name__ == \\"__main__\\": main()"},{"question":"Given an integer array nums, move all 0\'s to the end while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the array. Implement the function `void moveZeroes(vector<int>& nums)` that moves all 0\'s to the end while maintaining the relative order of the non-zero elements. # Input An integer array `nums`, where 1 ≤ nums.length ≤ 10^4, and -10^9 ≤ nums[i] ≤ 10^9. # Output After running the function, the input array `nums` shall have all zeroes moved to the end while maintaining the order of the non-zero elements. # Example **Input:** nums = [0, 1, 0, 3, 12] **Output:** [1, 3, 12, 0, 0]","solution":"def moveZeroes(nums): Moves all 0\'s in the nums list to the end while maintaining the relative order of non-zero elements. non_zero_index = 0 # Pointer to place the next non-zero element # Move all non-zero elements to the front for i in range(len(nums)): if nums[i] != 0: nums[non_zero_index] = nums[i] non_zero_index += 1 # Fill the rest of the list with zeros for i in range(non_zero_index, len(nums)): nums[i] = 0"},{"question":"Mary is practicing for a marathon and wants to keep track of her running progress. She runs along a straight path and measures her distance every minute using a GPS device. Given the GPS data, Mary\'s goal is to calculate the maximum distance she could have run continuously in a single stretch without stopping or taking a break. You are given an array of integers where each element represents the distance covered by Mary in each minute of her run. If she did not run at any particular minute, the corresponding distance will be 0. Write a program to find the maximum continuous distance Mary could have run without encountering any minute where the distance is 0. The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains `n` integers `d1, d2, ..., dn` (0 ≤ di ≤ 1,000,000) — the distances covered each minute. Print a single integer — the maximum continuous distance Mary could have run without any 0s. **Example Input:** ``` 8 5 0 3 7 8 0 2 4 ``` **Example Output:** ``` 18 ``` In the example, the longest continuous distances without interruption are [3, 7, 8] and [2, 4]. Out of these, [3, 7, 8] gives the maximum distance which is 18.","solution":"def max_continuous_run(n, distances): Returns the maximum continuous distance Mary could have run without encountering any 0s. :param n: Number of elements in the array (int) :param distances: List of distances covered each minute (list of int) :return: Maximum continuous distance (int) max_distance = 0 current_sum = 0 for distance in distances: if distance == 0: max_distance = max(max_distance, current_sum) current_sum = 0 else: current_sum += distance # Check the last segment max_distance = max(max_distance, current_sum) return max_distance"},{"question":"You are teaching a programming class and you decide to give the students a fun challenge. The challenge is to form a new word by rearranging the letters of a given word. However, there is a twist: the new word must have the same letter frequencies as the original, and it must be the lexicographically smallest word that can be formed. For example, if the given word is \\"banana\\", the lexicographically smallest new word that can be formed is \\"aaabnn\\". Given a string s, print the lexicographically smallest permutation of s that is a valid anagram of the original string. The first and only line of input contains a string s (1 ≤ |s| ≤ 1000), composed of lowercase English letters. Output the lexicographically smallest permutation of the string s. # Example Input ``` banana ``` Output ``` aaabnn ``` Input ``` abcd ``` Output ``` abcd ``` Input ``` zxy ``` Output ``` xyz ```","solution":"def smallest_lexicographical_anagram(s): Returns the lexicographically smallest permutation of the given string. return \'\'.join(sorted(s))"},{"question":"Given an array of integers, your task is to rearrange its elements such that the difference between any two adjacent elements is minimized. If there are multiple valid arrangements, return the one which is lexicographically smallest. The first input line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second input line contains n integers a1, a2, ... an (|ai| ≤ 1000) — the elements of the array. Print a single line containing the rearranged array. Example: ```plaintext Input: 5 4 3 2 1 5 Output: 1 2 3 4 5 Input: 4 4 1 2 3 Output: 1 2 3 4 ```","solution":"def rearrange_array(n, arr): Rearranges elements in arr such that the difference between any two adjacent elements is minimized and returns the lexicographically smallest arrangement. arr.sort() return arr"},{"question":"A new shopping mall is under construction, and engineers are working on the energy-efficient escalator system. A series of escalators connect various floors. Each escalator can either go up or down and has specific energy consumption per person using it. To ensure the system is efficient, the engineers need to find the most energy-poor path from the ground floor to the top-most floor. The building has `n` floors numbered from 1 to `n`, and `m` escalators. Each escalator can be represented by a tuple `(u, v, w)`, where `u` is the starting floor, `v` is the destination floor, and `w` is the energy consumption per person to travel from floor `u` to floor `v`. Note that `u != v`. Design an algorithm to find the minimum energy required per person to travel from floor 1 to floor `n`. If there is no path from floor 1 to floor `n`, print `-1`. The first line contains two integers `n` (2 ≤ n ≤ 100,000) and `m` (1 ≤ m ≤ 300,000) — the number of floors and the number of escalators. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9). Print a single integer, the minimum energy required per person to travel from floor 1 to floor `n`, or `-1` if such a path does not exist. **Example:** Input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ``` Output: ``` 7 ``` Explanation: One of the paths from floor 1 to floor 5 with the least energy consumption is 1 -> 2 -> 3 -> 5, consuming 2 + 1 + 4 = 7 units of energy.","solution":"import heapq def minimum_energy(n, m, escalators): This function finds the minimum energy required for one person to travel from floor 1 to floor n. Args: n (int): Number of floors. m (int): Number of escalators. escalators (list of tuples): List of tuples where each tuple represents (starting_floor, destination_floor, energy_cost). Returns: int: Minimum energy required or -1 if no such path exists. # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in escalators: graph[u].append((v, w)) graph[v].append((u, w)) # Assuming the escalators can work two ways # Dijkstra\'s algorithm to find the shortest path min_heap = [(0, 1)] # (cost, starting node) starting with node 1 min_cost = {i: float(\'inf\') for i in range(1, n+1)} min_cost[1] = 0 while min_heap: current_cost, u = heapq.heappop(min_heap) if u == n: return current_cost if current_cost > min_cost[u]: continue for v, w in graph[u]: next_cost = current_cost + w if next_cost < min_cost[v]: min_cost[v] = next_cost heapq.heappush(min_heap, (next_cost, v)) return -1 if min_cost[n] == float(\'inf\') else min_cost[n]"},{"question":"In a software company, there are n developers, each proficient in certain programming languages. The company wants to form teams where each member can communicate in at least one common language. To maximize productivity, teams should be as large as possible and consist of at least 2 members. Given the list of languages known by each developer, you need to determine the maximum size of a team that can be formed such that all members of that team can communicate with at least one common language. The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of developers and the total number of different programming languages available. The next n lines describe the languages known by each developer. The i-th line starts with an integer ki (1 ≤ ki ≤ m) — the number of languages known by the i-th developer. This is followed by ki integers lij (1 ≤ lij ≤ m) — the identifiers of the languages the i-th developer knows. All language identifiers in a list are unique. Print a single integer — the maximum size of a team where each member can communicate with at least one common language. If no such team can be formed, print 0. For example: Input: 4 5 2 1 2 3 2 3 4 2 1 5 2 2 5 Output: 3 In this example, the second input line means that developer 1 knows languages 1 and 2, the third line means developer 2 knows languages 2, 3, and 4, and so on. The maximum team size where each member can communicate in a common language is 3. Developers 1, 2, and 4 can communicate in language 2.","solution":"def maximum_team_size(n, m, developers_languages): from collections import defaultdict # Create a dictionary to map each language to the set of developers that know it language_to_developers = defaultdict(set) for developer_id, languages in enumerate(developers_languages, start=1): for language in languages: language_to_developers[language].add(developer_id) max_team_size = 0 # Check the size of the team for each language and update the maximum size found for developers in language_to_developers.values(): max_team_size = max(max_team_size, len(developers)) return max_team_size if max_team_size >= 2 else 0"},{"question":"Little Johnny has come up with an interesting sequence generation game. He starts with an integer `n` and generates a sequence of `n` integers following these rules: 1. The sequence is initially empty. 2. He starts with the number `1` and appends it to the sequence. 3. Each subsequent number in the sequence is the next integer in alternating positive and negative signs. For example, if Johnny starts with `n = 5`, the sequence he generates would be `[1, -2, 3, -4, 5]`. Now, Johnny is wondering about the sum of all integers in the sequence for any given `n`. He wants you to write a program that calculates the sum of the sequence generated for any positive integer `n`. # Input - The input consists of a single integer `n` (1 ≤ n ≤ 10^6). # Output - Output a single integer, which is the sum of the sequence Johnny generates for the given `n`. # Example Input 1: ``` 5 ``` Output 1: ``` 3 ``` Input 2: ``` 10 ``` Output 2: ``` 5 ``` # Explanation: For the first example, the sequence is `[1, -2, 3, -4, 5]` and the sum is `1 - 2 + 3 - 4 + 5` which equals `3`. For the second example, the sequence is `[1, -2, 3, -4, 5, -6, 7, -8, 9, -10]` and the sum is `1 - 2 + 3 - 4 + 5 - 6 + 7 - 8 + 9 - 10` which equals `5`. # Note: This problem requires efficient handling of large input sizes up to one million, so aim for a solution with time complexity better than O(n).","solution":"def sequence_sum(n): Returns the sum of the sequence generated by the rules described. # The sum of the sequence follows a pattern: # When n is odd, the sum is (n + 1)//2 # When n is even, the sum is -(n//2) if n % 2 == 0: return -(n // 2) else: return (n + 1) // 2"},{"question":"A company is developing a new algorithm for compressing and decompressing textual data. One approach they are considering is the use of a run-length encoding (RLE) scheme. In RLE compression, consecutive elements of data are stored as a single data value and count. For example, the string \\"aaabbbcc\\" would be compressed to \\"a3b3c2\\". The company has asked you to write the decompression part of this algorithm. You need to implement a function that takes a compressed string and returns the original uncompressed string. The input string will be in the format where each letter is followed by the number of times it appears consecutively. For instance, an input of \\"a3b3c2\\" should return \\"aaabbbcc\\". # Input: - A single line containing the compressed string s (1 ≤ |s| ≤ 10^6). # Output: - A single line containing the uncompressed string. # Example: # Input: a3b3c2 # Output: aaabbbcc Write the function to decompress the string: ```python def decompress(s): # Your implementation here pass # Example usage: compressed = \\"a3b3c2\\" print(decompress(compressed)) # Output: aaabbbcc ``` You need to handle cases where the string contains different letters with varying counts and ensure that the solution is efficient enough to handle the upper limit of input size.","solution":"def decompress(s): Decompresses a run-length encoded string into its original form. Parameters: s (str): The compressed string in the format where each letter is followed by the number of times it appears consecutively. Returns: str: The decompressed string. decompressed_str = [] i = 0 while i < len(s): char = s[i] # Get the character # Find the full number which may have multiple digits num_str = \'\' i += 1 while i < len(s) and s[i].isdigit(): num_str += s[i] i += 1 count = int(num_str) # Convert the num_str to an integer count decompressed_str.append(char * count) # Append the character count times to the list return \'\'.join(decompressed_str)"},{"question":"Alice is an avid gardener and loves to plant different types of flowers in her garden. She plants flowers in a long row, where each position in the row can either be empty or contain a flower. Each flower belongs to one of several varieties, represented by integers. Alice likes to arrange her flowers in a special way: she wants to ensure that there is at least one flower variety that appears exactly `k` times in the row. She decided to let you, a seasoned developer, write a program that will help her determine if her garden arrangements are satisfactory. If the garden contains any flower variety that appears exactly `k` times, print \\"YES\\". Otherwise, print \\"NO\\". Given an integer `t`, representing the number of test cases, followed by the test cases themselves. Each test case contains two parts: an integer `n`, representing the number of positions in the row (1 ≤ n ≤ 100,000), and an integer `k` (1 ≤ k ≤ 100,000), followed by a sequence of `n` integers where each integer represents either an empty position (denoted by 0) or a flower belonging to a specific variety (denoted by a positive integer). For each test case, determine if there is any flower variety that appears exactly `k` times in the row. # Input 1. The first line contains an integer `t`, the number of test cases (1 ≤ t ≤ 100). 2. For each test case: 1. A line containing two integers `n` and `k`. 2. A line containing `n` integers representing the flower varieties in the row (0 for empty positions, positive integers for flowers). # Output Print \\"YES\\" if there is at least one flower variety that appears exactly `k` times in the row, otherwise print \\"NO\\" for each test case. # Example Input ``` 2 7 2 1 2 2 0 1 3 3 6 1 0 1 0 2 2 2 ``` Output ``` YES YES ``` In the first test case, the variety 1 and the variety 2 both appear exactly 2 times. In the second case, the varieties 1 and 2 both appear exactly 1 time, hence \\"YES\\" is the output for both test cases.","solution":"def flower_varieties(t, test_cases): results = [] for n, k, flowers in test_cases: flower_count = {} for flower in flowers: if flower != 0: if flower in flower_count: flower_count[flower] += 1 else: flower_count[flower] = 1 if k in flower_count.values(): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: if __name__ == \\"__main__\\": t = 2 test_cases = [ (7, 2, [1, 2, 2, 0, 1, 3, 3]), (6, 1, [0, 1, 0, 2, 2, 2]) ] print(flower_varieties(t, test_cases)) # Output: [\'YES\', \'YES\']"},{"question":"You are given an array of integers and a target value. Your task is to determine whether there exists a pair of distinct indices `i` and `j` in the array such that the absolute difference between the elements at these indices is equal to the target value. If such a pair exists, print \\"YES\\", otherwise, print \\"NO\\". # Input - The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. - The first line of each test case contains two integers `n` (2 ≤ n ≤ 1000) and `k` (1 ≤ k ≤ 10^6) — the number of elements in the array and the target value, respectively. - The second line of each test case contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^6) — the elements of the array. # Output For each test case, print \\"YES\\" if there exists a pair of distinct indices such that the absolute difference between their corresponding elements is equal to the target value, otherwise print \\"NO\\". # Example Input ``` 3 5 7 10 1 3 16 8 4 2 4 1 7 10 6 5 2 4 5 7 9 3 ``` Output ``` YES NO YES ``` # Note In the first test case, the pair `(0, 3)` where `|a0 - a3| = |10 - 17| = 7` exists, so the answer is \\"YES\\". In the second test case, no pair of indices exists such that their absolute difference is 2, so the answer is \\"NO\\". In the third test case, the pair `(4, 5)` where `|a4 - a5| = |9 - 3| = 6` exists, so the answer is \\"YES\\".","solution":"def check_pairs(t, cases): results = [] for case in cases: n, k, array = case found = False elements_set = set(array) for num in array: if (num + k in elements_set) or (num - k in elements_set): found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(data): lines = data.strip().split(\'n\') t = int(lines[0]) cases = [] current_line = 1 for _ in range(t): n, k = map(int, lines[current_line].split()) array = list(map(int, lines[current_line + 1].split())) cases.append((n, k, array)) current_line += 2 return t, cases"},{"question":"Given an array of integers, your task is to calculate and return the sum of the XOR of all pairs of integers in the array (arr[i], arr[j]) where i < j. Write a function to solve the problem. The function should accept a list of integers as its parameter and return an integer which is the sum of the XOR of all pairs. **Input:** - A single line that contains an integer n (2 ≤ n ≤ 1000), the number of elements in the array. - A second line with n integers separated by spaces that represent the elements of the array. Each element in the array is between 1 and 1000. **Output:** - A single integer which is the sum of the XOR of all pairs of integers in the array. **Example:** Input: ``` 4 1 2 3 4 ``` Output: ``` 10 ``` Explanation: ``` The pairs (1,2), (1,3), (1,4), (2,3), (2,4), (3,4) XOR of (1,2) is 3 XOR of (1,3) is 2 XOR of (1,4) is 5 XOR of (2,3) is 1 XOR of (2,4) is 6 XOR of (3,4) is 7 Sum of all XORs = 3 + 2 + 5 + 1 + 6 + 7 = 24 ```","solution":"def sum_of_xor_pairs(arr): Returns the sum of the XOR of all pairs of integers in the array where i < j. :param arr: List of integers :return: Integer sum of all XORs n = len(arr) xor_sum = 0 for i in range(n): for j in range(i + 1, n): xor_sum += arr[i] ^ arr[j] return xor_sum # Example Usage: # arr = [1, 2, 3, 4] # result = sum_of_xor_pairs(arr) # print(result) # Output: 24"},{"question":"Alex and Blair are playing an interesting game with an array of integers. The game is played with an initially empty set and consists of several rounds. In each round: 1. Alex adds a new integer to the set, ensuring the set maintains unique elements at all times. 2. After each addition by Alex, Blair asks about the median of the current set. The median of a finite set of numbers is the value that separates the higher half from the lower half. If the set has an odd number of elements, the median is the middle element when the set is sorted. If the set has an even number of elements, the median is the average of the two middle elements. You need to help by simulating this game and replying to Blair\'s queries on the median after each round. The input consists of multiple test cases. The first line contains an integer (T) (1 (leq T leq 10^4)), the number of test cases. For each test case: - The first line contains an integer (n) (1 (leq n leq 2 cdot 10^5)), the number of rounds in that test case. - The second line contains (n) integers (a_i) (1 (leq a_i leq 10^9)), the integers Alex adds to the set in each round. Output the median after each round for each test case. Print the output for each test case in a new line. **Example** _Input:_ ``` 2 5 1 5 3 4 2 3 6 8 7 ``` _Output:_ ``` 1 3 3 3 3 6 7 7 ``` **Explanation:** In the first test case, the rounds proceed as follows: 1. After adding 1, the set is {1}. The median is 1. 2. After adding 5, the set is {1, 5}. The median is (1 + 5) / 2 = 3. 3. After adding 3, the set is {1, 3, 5}. The median is 3. 4. After adding 4, the set is {1, 3, 4, 5}. The median is (3 + 4) / 2 = 3.5, rounded down to 3. 5. After adding 2, the set is {1, 2, 3, 4, 5}. The median is 3. In the second test case, the rounds proceed as follows: 1. After adding 6, the set is {6}. The median is 6. 2. After adding 8, the set is {6, 8}. The median is (6 + 8) / 2 = 7. 3. After adding 7, the set is {6, 7, 8}. The median is 7.","solution":"import heapq def median_game(test_cases): results = [] for n, numbers in test_cases: min_heap = [] # This heap keeps the larger half max_heap = [] # This heap keeps the smaller half (as negative numbers to use min-heap properties) medians = [] for number in numbers: if len(max_heap) == 0 or number <= -max_heap[0]: heapq.heappush(max_heap, -number) else: heapq.heappush(min_heap, number) # Balance the heaps if necessary if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) # Append current median to results if len(max_heap) == len(min_heap): median = (-max_heap[0] + min_heap[0]) // 2 else: median = -max_heap[0] medians.append(median) results.append(\' \'.join(map(str, medians))) return results # Reading input data and preparing the test cases def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) numbers = list(map(int, lines[index + 1].split())) test_cases.append((n, numbers)) index += 2 return test_cases # Example usage input_str = 2 5 1 5 3 4 2 3 6 8 7 test_cases = parse_input(input_str) print(median_game(test_cases))"},{"question":"Masha and Sasha are playing a game on a linear path. The path is represented as a series of cells indexed from 1 to n. Masha starts at cell a while Sasha starts at cell b (1 ≤ a, b ≤ n). They take turns making moves with Masha starting. In each turn, a player can move to any other cell in the range [1, n] that is not currently occupied by the opponent. The game ends when a player moves to a cell that has already been visited by them in any of their previous turns. The player who cannot make a valid move loses the game. Write a program that determines the winner of the game assuming both players play optimally. Input: The first line contains two integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 1000) — the number of cells and the number of queries. Each of the following q lines contains two integers a and b describing a query (1 ≤ a, b ≤ n, a ≠ b), where a is Masha\'s starting cell and b is Sasha\'s starting cell. Output: For each query, print \\"Masha\\" if Masha wins the game and \\"Sasha\\" otherwise. Example: Input: 4 3 1 2 3 4 2 3 Output: Masha Masha Sasha Explanation: 1. In the first case, Masha moves to any cell except 2 and 1, thus she can always avoid repeating and make Sasha eventually unable to move. Hence, Masha wins. 2. In the second case, Masha wins again using optimal moves forcing Sasha to lose. 3. In the third case, Sasha wins by optimizing her move forcing Masha to get stuck in her next move.","solution":"def determine_winner(n, queries): Determines the winner for each of the queries given the number of cells in path `n` and list of starting positions `(a, b)` for Masha and Sasha respectively. :param n: Number of cells in the path (integer) :param queries: List of tuples where each tuple consists of two integers (a, b) :return: List of results (\\"Masha\\" or \\"Sasha\\") for each query. results = [] for a, b in queries: if n % 2 == 0: results.append(\\"Masha\\") else: results.append(\\"Sasha\\") return results"},{"question":"You are given a binary string of length n consisting of only \'0\'s and \'1\'s. Your task is to make all the characters of the string the same (either all \'0\'s or all \'1\'s) by performing at most k operations. In each operation, you can choose any position in the string and flip the character at that position (change \'0\' to \'1\' or \'1\' to \'0\'). Determine the minimum number of operations needed to make all characters in the string the same. The first line contains two integers n and k (1 le n le 10^5, 0 le k le n). The second line contains a binary string of length n. Print a single integer — the minimum number of operations needed to make all the characters of the string the same. Example: Input: ``` 5 1 11001 ``` Output: ``` 1 ``` Explanation: In the given string \\"11001\\", the minimum number of operations required to make all characters the same is 1. If we choose the second last character and flip it from \'0\' to \'1\', we get the string \\"11111\\", which consists of all \'1\'s.","solution":"def min_operations(n, k, binary_str): Returns the minimum number of operations needed to make all characters in the binary string the same. # Count the number of \'0\'s and \'1\'s in the string count_0s = binary_str.count(\'0\') count_1s = binary_str.count(\'1\') # The minimum number of operations needed is the smaller of the two counts min_operations_needed = min(count_0s, count_1s) # Return the minimum of the calculated operations needed and the allowed maximum k return min(min_operations_needed, k)"},{"question":"TV Channel X is organizing a reality show contest called \\"Survivor Island\\". In this contest, there are ( n ) contestants standing in a circle. The contestants are numbered from ( 1 ) to ( n ). The contest proceeds as follows: - The contestant with number ( 1 ) holds a ball. - Every second, the contestant holding the ball passes it to the next contestant in a clockwise direction. - If a contestant holding the ball is eliminated, the ball passes to the next contestant who is still in the game. - The elimination process works using a given list of positions. The first position in the list indicates the next contestant to be eliminated, the second position the next one after that, and so on. - The game continues until there is only one contestant remaining. Your task is to find out which contestant will hold the ball and be the last one remaining on the island. **Input:** - The first line contains an integer ( n ) (( 1 le n le 10^5 )) — the number of contestants. - The second line contains ( n-1 ) distinct integers ( p_1, p_2, ldots, p_{n-1} ) (( 1 le p_i le n )) — the sequence of positions of the contestants to be eliminated. **Output:** - Print the number of the last remaining contestant. **Example:** Input: ``` 5 2 4 1 3 ``` Output: ``` 5 ``` In this example, the sequence of eliminations would proceed as follows: - Eliminate contestant 2: Contestants left are [1, 3, 4, 5]. - Eliminate contestant 4: Contestants left are [1, 3, 5]. - Eliminate contestant 1: Contestants left are [3, 5]. - Eliminate contestant 3: Contestants left are [5]. Thus, contestant 5 is the last one remaining.","solution":"def last_contestant(n, eliminations): Determines the last remaining contestant in the game. :param n: int - The number of contestants :param eliminations: list - The list of positions of the contestants to be eliminated :return: int - The number of the last remaining contestant contestants = list(range(1, n + 1)) for e in eliminations: contestants.remove(e) return contestants[0]"},{"question":"Alice loves collecting stickers, and she has numerous stickers each with a unique integer value. She decided to organize her collection according to a special rule. Alice\'s rule is: For each sticker, if its value is greater than the value of the sticker immediately before it, she will add it to a new \'climbing sequence\'. Otherwise, she will start a new climbing sequence. Alice wants to know the length of the longest climbing sequence she can create from her stickers. The first line of the input contains an integer ( n ) (( 1 leq n leq 10^5 )) – the number of stickers. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (( 0 leq a_i leq 10^9 )) representing the values of the stickers. Print the length of the longest climbing sequence Alice can create. **Example:** ``` Input: 6 10 9 2 5 3 7 Output: 4 ``` In the example, the longest climbing sequence Alice can create is: ( 2, 5, 7 ) or ( 3, 7 ) with length ( 4 )","solution":"def longest_climbing_sequence_length(stickers): Given a list of stickers, returns the length of the longest climbing sequence. A climbing sequence is defined such that for each sticker value in the sequence, it is greater than the previous one. Parameters: stickers (list of integers): List of sticker values. Returns: int: Length of the longest climbing sequence. if not stickers: return 0 longest_length = 1 current_length = 1 for i in range(1, len(stickers)): if stickers[i] > stickers[i - 1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"Diana is organizing a competition where participants need to form pairs to compete against each other. Each participant has a unique skill level represented by an integer. Diana wants to form pairs in such a way that the difference in skill levels between the members of each pair is minimized. Given an array of integers representing the skill levels of the participants, find the pairs with the minimum skill level difference. If there are multiple valid pairs, you can return any of them. The first line of input contains a single integer n (2 ≤ n ≤ 100) — the number of participants. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the skill levels of the participants. Print n/2 lines, each containing two integers representing the skill levels of the paired participants. The pairs should minimize the difference in their skill levels. Example: Input: 6 4 1 8 3 2 6 Output: 1 2 3 4 6 8 (Note: The output is just one of the possible valid outputs. Different but correct pairings may exist.)","solution":"def minimize_skill_difference(n, skill_levels): Given the number of participants and their skill levels, returns pairs with minimized skill level differences. skill_levels.sort() pairs = [] for i in range(0, n, 2): pairs.append((skill_levels[i], skill_levels[i + 1])) return pairs"},{"question":"A group of astronauts is preparing for a mission to Mars. Before the mission, they need to analyze a set of data points representing coordinates of potential landing sites on a 2D plane. Each landing site comes with a safety score that is an integer. The goal is to find the maximum safety score within a rectangular area on the 2D plane. You need to handle multiple queries, each specifying the top-left and bottom-right coordinates of a rectangular area. For each query, return the maximum safety score of the landing sites within that rectangle. The first line contains two integers n and m (1 ≤ n, m ≤ 300), representing the number of rows and columns of the grid, respectively. The next n lines each contain m integers, where the j-th integer in the i-th row represents the safety score of the landing site at (i, j). Following this, there will be an integer q (1 ≤ q ≤ 1000) representing the number of queries. Each of the following q lines contains four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m), representing the top-left corner (r1, c1) and the bottom-right corner (r2, c2) of the rectangular area for which the query is made. For each query, output the maximum safety score within the specified rectangular area. # Example: **Input:** 4 5 9 2 4 6 1 3 7 8 5 0 2 3 6 4 8 5 1 0 2 3 3 1 1 2 3 2 2 4 4 1 3 3 5 **Output:** 9 8 8 **Explanation:** For the first query (1, 1, 2, 3), the sub-rectangle contains the values: 9 2 4 3 7 8 The maximum value is 9. For the second query (2, 2, 4, 4), the sub-rectangle contains the values: 7 8 5 3 6 4 1 0 2 The maximum value is 8. For the third query (1, 3, 3, 5), the sub-rectangle contains the values: 4 6 1 8 5 0 6 4 8 The maximum value is 8.","solution":"def find_max_safety_score(n, m, grid, queries): Returns the maximum safety score within the specified rectangular areas for each query. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list[list[int]]): 2D list representing the grid of safety scores. queries (list[tuple[int, int, int, int]]): List of queries, each represented as a tuple (r1, c1, r2, c2). Returns: list[int]: List of maximum safety scores for each query. results = [] for r1, c1, r2, c2 in queries: max_safety = -float(\'inf\') for i in range(r1-1, r2): for j in range(c1-1, c2): if grid[i][j] > max_safety: max_safety = grid[i][j] results.append(max_safety) return results"},{"question":"You are given two strings, s1 and s2, of length n and m respectively. Find the longest common subsequence (LCS) between them. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the lengths of the strings s1 and s2 respectively. The next two lines contain the strings s1 and s2, each consisting of lowercase Latin letters. Print the length of the longest common subsequence of the given strings. For example, given the input: ``` 6 7 abcdea acbdefa ``` The output should be: ``` 5 ``` Since the longest common subsequence is \\"abdea\\".","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between s1 and s2. n = len(s1) m = len(s2) # Creating a 2D DP array to store lengths of LCS dp = [[0] * (m + 1) for _ in range(n + 1)] # Filling dp array for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"In a popular multiplayer online game, players are grouped into teams. Each team earns a certain number of points for their performance in various matches. A player\'s effectiveness in the game is measured by the sum of points earned by their team members. Given the number of teams and the points each team has earned, you are to determine the total effectiveness for each player. The effectiveness of a player is defined as the sum of points of the teams they are part of. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of teams. The second line contains n space-separated integers pi (1 ≤ pi ≤ 10^9), where pi is the number of points earned by the i-th team. The third line of the input contains an integer m (1 ≤ m ≤ 10^5) — the number of players. The following m lines each contain an integer ti (1 ≤ ti ≤ n), representing the team number that the i-th player belongs to. Print m integers, where the i-th integer is the effectiveness of the i-th player. Example: Input: 4 10 20 30 40 5 1 2 3 4 2 Output: 10 20 30 40 20","solution":"def player_effectiveness(n, points, m, player_teams): This function computes the effectiveness of players based on the points of the teams they belong to. team_points = [0] * n for i in range(n): team_points[i] = points[i] effectiveness = [0] * m for i in range(m): team_idx = player_teams[i] - 1 effectiveness[i] = team_points[team_idx] return effectiveness"},{"question":"John\'s favorite pastime is exploring different sequences, and he recently got interested in finding the longest consecutive subsequence in an array. A consecutive subsequence is a sequence where each number in the subsequence is followed by the next integer. Given an array of n integers, help John find the length of the longest consecutive subsequence. The elements of the sequence do not have to be contiguous in the array, but they need to appear in the array. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. Output a single integer — the length of the longest consecutive subsequence in the array. In the first sample, the longest consecutive subsequence is [1, 2, 3, 4], and its length is 4. In the second sample, the longest consecutive subsequence is [2, 3, 4], so the answer is 3. In the third sample, the sequence is just a single number [1000000000], so the answer is 1.","solution":"def longest_consecutive_subsequence(arr): This function takes a list of integers and returns the length of the longest consecutive subsequence. num_set = set(arr) # Convert the list to a set to remove duplicates and allow O(1) lookups longest_streak = 0 for num in num_set: # Check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 # Count the length of the sequence while current_num + 1 in num_set: current_num += 1 current_streak += 1 # Update the longest streak found longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Vasya is a curious boy and loves math puzzles. He recently learned about prime numbers and challenges you with the following task. Given an integer ( N ), your task is to find the smallest prime number greater than ( N ). A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. The first line of the input contains a single integer ( N ) (1 ≤ ( N ) ≤ 10^6). Print the smallest prime number greater than ( N ). For example, if the input is 5, the output should be 7. If the input is 14, the output should be 17. Example: Input: ``` 14 ``` Output: ``` 17 ``` Note: Your solution should be efficient enough to handle the upper limit of ( N ) within a reasonable timeframe.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(N): Returns the smallest prime number greater than N. candidate = N + 1 while True: if is_prime(candidate): return candidate candidate += 1"},{"question":"Ina loves designing patterns and decorations. One of her favorite pattern designs involves arranging stars in a grid format. Ina has devised a rule to fill the grid with stars: a specific number of stars must be placed in certain positions of the grid depending on the row and column numbers. Given an n x m grid, the number of stars in the cell at the i-th row and the j-th column should be determined by the following rules: 1. If both row i and column j are even, place i + j stars in the cell. 2. If both row i and column j are odd, place the product i * j stars in the cell. 3. If one of them is even and the other is odd; place the absolute difference |i - j| stars in the cell. Write a program that outputs the grid with the number of stars to be placed in each cell. The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the grid. Print the resulting grid of n rows and m columns. Each cell in the output should contain the number of stars to be placed according to the rules specified above. # Example Input ``` 3 4 ``` Output ``` 1 1 3 5 1 1 2 4 5 2 9 6 ``` **Explanation:** - For cell (1, 1), since both are odd, stars = 1 * 1 = 1 - For cell (1, 2), since 1 is odd and 2 is even, stars = |1 - 2| = 1 - For cell (1, 3), since both are odd, stars = 1 * 3 = 3 - For cell (1, 4), since 1 is odd and 4 is even, stars = |1 - 4| = 3 - and so on... Using these rules, the program fills out the remaining cells accordingly.","solution":"def create_star_grid(n, m): Generates an n x m grid where the number of stars in each cell (i, j) is determined by specific rules. Args: n (int): the number of rows in the grid. m (int): the number of columns in the grid. Returns: list of list of int: A 2D list representing the grid with the number of stars as specified by the rules. grid = [] for i in range(1, n + 1): row = [] for j in range(1, m + 1): if i % 2 == 0 and j % 2 == 0: stars = i + j elif i % 2 == 1 and j % 2 == 1: stars = i * j else: stars = abs(i - j) row.append(stars) grid.append(row) return grid"},{"question":"Albert is playing with trees. A tree is a connected undirected graph with no cycles. He is particularly interested in certain properties of \\"special paths\\" in these trees. A special path between nodes u and v in a tree is defined as a path where the sum of the node values on the path is minimized. Albert has a tree with n nodes, each node with a value assigned to it. Your task is to help Albert find the minimum sum of node values for each query, where each query contains two nodes u and v and asks for the sum of node values on the special path between u and v. The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. The second line contains n integers vi (1 ≤ vi ≤ 10^6) — the values of the nodes from 1 to n. Each of the next n-1 lines contains two integers ai and bi (1 ≤ ai, bi ≤ n) indicating there is an edge between nodes ai and bi. The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) — the nodes between which the special path sum needs to be calculated. Output q lines, each containing a single integer — the minimum sum of node values on the special path between nodes ui and vi for each query. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 3 1 4 1 5 3 4 ``` Output ``` 7 8 9 ``` # Note In the given example, for the first query (1 to 4), the special path is 1 -> 2 -> 4 with a sum of 1 + 2 + 4 = 7. For the second query (1 to 5), the special path is 1 -> 2 -> 5 with a sum of 1 + 2 + 5 = 8. For the third query (3 to 4), the special path is 3 -> 1 -> 2 -> 4 with a sum of 3 + 1 + 2 + 4 = 10.","solution":"from collections import defaultdict, deque def build_tree(edges, n): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def calc_subtree_sums(tree, node_values, root): n = len(node_values) subtree_sums = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): visited[node] = True subtree_sum = node_values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: subtree_sum += dfs(neighbor) subtree_sums[node] = subtree_sum return subtree_sum dfs(root) return subtree_sums def find_special_path_sum(tree, u, v, node_values, subtree_sums): if u == v: return node_values[u - 1] n = len(node_values) parent = [None] * (n + 1) level = [0] * (n + 1) def bfs(node): q = deque([node]) parent[node] = -1 visited = [False] * (n + 1) visited[node] = True while q: current = q.popleft() for neighbor in tree[current]: if not visited[neighbor]: parent[neighbor] = current level[neighbor] = level[current] + 1 visited[neighbor] = True q.append(neighbor) bfs(u) path_sum = 0 while level[u] > level[v]: path_sum += node_values[u - 1] u = parent[u] while level[v] > level[u]: path_sum += node_values[v - 1] v = parent[v] while u != v: path_sum += node_values[u - 1] + node_values[v - 1] u = parent[u] v = parent[v] path_sum += node_values[u - 1] return path_sum def special_paths_sum(n, node_values, edges, queries): tree = build_tree(edges, n) subtree_sums = calc_subtree_sums(tree, node_values, 1) results = [] for u, v in queries: results.append(find_special_path_sum(tree, u, v, node_values, subtree_sums)) return results"},{"question":"Alice has a list of integers and she needs to perform operations on this list. The operations need to be performed in the following manner: 1. Initialize a counter to 0. 2. For each pair of elements in the list: - If the elements are different, increment the counter. - If the elements are the same, do nothing. Alice needs to know the final counter value after all pairs have been processed. The list is zero-based indexed, and a pair (i, j) refers to all pairs where 0 ≤ i < j < length of the list. Given the list of integers, your task is to determine the final counter value. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the list. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^5) — the elements of the list. Print the final value of the counter. Example: Input: 5 1 2 3 4 5 Output: 10 In the example above, there are 10 pairs in total: (1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), and (4,5). Since all elements are different, the counter increments by 1 for each pair. Therefore, the output is 10.","solution":"def count_different_pairs(lst): Given a list of integers, return the count of pairs (i, j) where 0 ≤ i < j < length of the list and the elements at these indices are different. n = len(lst) counter = 0 for i in range(n): for j in range(i + 1, n): if lst[i] != lst[j]: counter += 1 return counter"},{"question":"A company is organizing a coding competition and plans to award the top k participants with prizes. To determine the winners, they have collected scores of all participants. The company wants to ensure that prizes are distributed optimally. Specifically, they want to find a score threshold such that all participants with scores equal to or higher than this threshold receive a prize. If there are multiple ways to set the threshold, the company prefers to set it as high as possible. Given the scores of all participants and the number of prizes k, determine the score threshold. The input consists of: - An integer n (1 ≤ n ≤ 100000), the number of participants. - An integer k (1 ≤ k ≤ n), the number of prizes. - A line with n integers representing the scores of all participants. Each score is a non-negative integer not exceeding 1000000. Print a single integer — the score threshold for prize eligibility. If there are multiple possible thresholds, print the highest one. Example: Input 7 3 10 20 20 30 30 40 50 Output 30 Explanation: With k = 3, the top 3 scores are 40, 50, and 30. The highest possible threshold is 30, as it allows the top 3 participants to qualify.","solution":"def find_threshold(n, k, scores): Returns the score threshold for prize eligibility. Parameters: n (int): Number of participants. k (int): Number of prizes. scores (list): List of scores. Returns: int: The score threshold. scores.sort(reverse=True) return scores[k-1]"},{"question":"You are given a list of organic chemistry molecules identified by their unique molecular structure strings. Each string consists of uppercase letters representing different types of atoms concatenated together. An organic chemist is interested in studying isomers (molecules with the same molecular formula but different structures). Two molecules are considered isomers if they can be rearranged to form the same string. Your task is to determine which pairs of molecules from the list are isomers of each other. For each pair of isomers, you should output their indices (1-based). The first line contains a single integer `n` (1 ≤ n ≤ 100000) — the number of molecules. The next `n` lines contain one string each, with each string composed solely of uppercase letters (A-Z) with a length between 1 and 100. Print all pairs of indices of molecules that are isomers of each other. Each pair should be printed in ascending order of their indices, and each pair should be printed only once. If no such pairs exist, print -1. # Example Input ``` 5 CCHH HCCO OCHH HCC CCHH ``` Output ``` 1 5 ``` In this example, the molecules at indices 1 and 5 are isomers of each other as both can be rearranged to the same string \\"CCHH\\".","solution":"from collections import defaultdict def find_isomer_pairs(molecules): Finds and returns pairs of isomer molecules by their 1-based indices. Parameters: molecules (list of str): List of molecules represented as strings. Returns: list of tuple: List of tuples where each tuple contains two 1-based indices of isomer molecules. # Dictionary to map sorted molecular formula to its original indices isomer_map = defaultdict(list) # Populate the map with sorted molecules and their indices for idx, molecule in enumerate(molecules): sorted_molecule = \'\'.join(sorted(molecule)) isomer_map[sorted_molecule].append(idx + 1) # Store 1-based index isomer_pairs = [] # Find all pairs of indices which are isomers for indices in isomer_map.values(): if len(indices) > 1: for i in range(len(indices)): for j in range(i + 1, len(indices)): isomer_pairs.append((indices[i], indices[j])) if not isomer_pairs: return -1 return isomer_pairs"},{"question":"Alice loves palindromes and would like to create a palindrome by rearranging a given string. A palindrome is a string that reads the same forwards and backwards. You are given a string s consisting of lowercase English letters. Determine if it\'s possible to rearrange the characters of s to form a palindrome. The first line of input contains an integer k (1 le k le 10^5), denoting the number of test cases. The following k lines contain one test string each. The length of each test string does not exceed 10^5 and consists of lowercase English letters. The sum of the lengths of all strings in the input does not exceed 10^5. Print k lines: the i-th line must contain YES if it\'s possible to rearrange the i-th string to form a palindrome, otherwise NO. Print YES and NO using uppercase letters only.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency. from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def palindrome_rearrangement_test_cases(k, strings): Takes the number of test cases and a list of strings, returns a list of results for each string. return [can_form_palindrome(s) for s in strings]"},{"question":"A museum wants to restore and display a historic painting that has been damaged. The painting can be represented as an `n x m` grid of pixels, where each pixel is either 0 (damaged) or 1 (intact). The museum has a tool that can repair any rectangular sub-grid of the painting in a single operation, turning all 0s in that sub-grid into 1s. The museum wants to determine the minimum number of operations required to completely restore the painting, i.e., to turn all 0s into 1s. Each test consists of a single test case. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 50) – the dimensions of the grid. Next `n` lines contain `m` characters each (either \'0\' or \'1\') representing the current state of the painting. Print a single integer – the minimum number of operations required to restore the painting. Example: **Input:** ``` 3 4 1100 1110 0011 ``` **Output:** ``` 2 ``` Explanation: One way to fix the painting in 2 operations is to select the sub-grid from (1,3) to (3,4) and transform all 0s to 1s, which leaves only one column to be transformed in the second operation.","solution":"def min_operations_to_restore_painting(n, m, grid): operations = 0 for i in range(n): for j in range(m): if grid[i][j] == \'0\': operations += 1 for x in range(i, n): for y in range(j, m): grid[x][y] = \'1\' return operations"},{"question":"Tom recently got a job at a renowned software company, and one of his tasks is to optimize memory usage of programs. He is working on a program that deals with an integer array, `arr`, of length `n`. He needs to answer `q` queries, each querying the smallest value in a subarray of `arr`. Each query is described by two integers, `l` and `r` (1 ≤ l ≤ r ≤ n), denoting the subarray from index `l` to `r` (1-indexed). Tom needs an efficient way to process these queries quickly. Tom needs your help to implement the solution to this problem. The first line contains two integers `n` and `q` (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the length of the array and the number of queries. The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (1 ≤ arr_i ≤ 10^9), representing the elements of the array. Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the description of the i-th query. Print the answer to each query on a single line. Print the answers in the order they go in the input. Example: Input: ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output: ``` 1 2 1 ```","solution":"import sys import math def preprocess(arr, n): # Initialize sparse table for range minimum query log = math.ceil(math.log2(n)) sparse_table = [[0] * (log + 1) for _ in range(n)] # Initialize all minimum values for the intervals of length 1 for i in range(n): sparse_table[i][0] = arr[i] # Compute values from smaller to bigger intervals j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: if sparse_table[i][j - 1] < sparse_table[i + (1 << (j - 1))][j - 1]: sparse_table[i][j] = sparse_table[i][j - 1] else: sparse_table[i][j] = sparse_table[i + (1 << (j - 1))][j - 1] i += 1 j += 1 return sparse_table def query(sparse_table, l, r): j = int(math.log2(r - l + 1)) if sparse_table[l][j] <= sparse_table[r - (1 << j) + 1][j]: return sparse_table[l][j] else: return sparse_table[r - (1 << j) + 1][j] def solve(n, q, arr, queries): sparse_table = preprocess(arr, n) results = [] for query_pair in queries: l, r = query_pair results.append(query(sparse_table, l - 1, r - 1)) return results"},{"question":"Alice has a rectangular field divided into a grid of m rows and n columns. Each cell can either be empty, contain a rock, or contain a tree. Alice wants to place a flower in one of the empty cells, such that the flower is not adjacent to any rocks. Two cells are considered adjacent if they share a common side. Given the configuration of the field, help Alice find a suitable empty cell to plant the flower. If there are multiple suitable cells, you can return any one of them. If no such cell exists, return \\"Not Possible\\". The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100): the number of rows and columns in the field, respectively. The next m lines each contain n characters representing the grid. The character \'.\' represents an empty cell, \'R\' represents a rock, and \'T\' represents a tree. Print the 1-based row and column index of a suitable empty cell where the flower can be planted. If there\'s no suitable cell, print \\"Not Possible\\". # Example: **Input:** ``` 4 5 ..... .R... .T..R ..... ``` **Output:** ``` 1 1 ``` In the provided grid, placing the flower in cell (1, 1) (1-based index) ensures it is not adjacent to any rocks. The grid may have multiple valid answers.","solution":"def find_flower_location(m, n, grid): Finds a suitable empty cell to plant the flower such that it is not adjacent to any rocks. :param m: integer, number of rows in the grid :param n: integer, number of columns in the grid :param grid: list of strings, each string represents a row in the grid :return: tuple (row, column) of a suitable empty cell in 1-based index, or \\"Not Possible\\" if no such cell exists directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right for i in range(m): for j in range(n): if grid[i][j] == \'.\': is_suitable = True for d in directions: ni, nj = i + d[0], j + d[1] if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] == \'R\': is_suitable = False break if is_suitable: return i + 1, j + 1 # Returning 1-based index return \\"Not Possible\\""},{"question":"A group of friends plans to have a picnic and they need to decide on the food items each one will bring. Each friend has a list of food items they are willing to bring. However, they want to make sure that no two friends bring the same food item to avoid duplicates. You are given a list of friends and the food items they are willing to bring. Your task is to determine if it is possible to assign food items to friends such that each friend brings a unique food item, and output the assignment if possible. The first line contains an integer `n` (1 ≤ n ≤ 100) where `n` is the number of friends. Each of the next `n` lines contains a list of food items that a particular friend is willing to bring. Each food item is a string consisting of lowercase English letters and is separated by a comma. Output \\"NO\\" if it is impossible to assign unique food items to friends. If it is possible, output \\"YES\\" followed by `n` lines, each containing the friend\'s index (starting from 1) and the food item assigned to them, in the same order as their input. Example Input: ``` 3 apple,banana,grape banana,orange apple,orange,grape ``` Example Output: ``` YES 1 grape 2 banana 3 apple ``` In the example, you can see that each friend is assigned a unique food item that they are willing to bring.","solution":"def assign_food(friends_food): from collections import defaultdict n = len(friends_food) food_to_friend = {} # To store the food items that each friend can bring in an associative list friend_possible_food = defaultdict(list) for friend_index, food_list in enumerate(friends_food): for food_item in food_list.split(\',\'): friend_possible_food[friend_index].append(food_item) assigned_food = set() # Using a recursive function to try to assign food items def assign(index): if index == n: return True for food in friend_possible_food[index]: if food not in assigned_food: assigned_food.add(food) food_to_friend[index] = food if assign(index + 1): return True assigned_food.remove(food) return False if assign(0): result = [\\"YES\\"] for i in range(n): result.append(f\\"{i+1} {food_to_friend[i]}\\") return result else: return [\\"NO\\"]"},{"question":"Alan has a collection of paintings that he wants to exhibit in a linear gallery. There are `n` paintings, and Alan can choose to hang some or all of them, but they must be in a continuous sequence in their original order. Each painting has a beauty value (positive or negative), and the total beauty of the exhibition is the sum of the beauty values of the chosen paintings. Alan wants to maximize the total beauty of the exhibition. Given the beauty values of the paintings, determine the maximum possible total beauty Alan can achieve by choosing an optimal sequence of consecutive paintings. The first line contains the integer `n` (1 ≤ n ≤ 200,000) — the number of paintings in the collection. The second line contains `n` integers `b1, b2, ..., bn` (-10^4 ≤ bi ≤ 10^4) — the beauty values of the paintings. Print a single integer — the maximum possible total beauty of the exhibition. **Example:** **Input:** ``` 5 1 -2 3 4 -1 ``` **Output:** ``` 7 ``` **Explanation:** Alan should choose the sequence from the 3rd to the 4th painting, which has a total beauty value of 3 + 4 = 7.","solution":"def max_total_beauty(n, beauty_values): Returns the maximum possible total beauty Alan can achieve by selecting an optimal sequence of consecutive paintings. Args: n: int - number of paintings in the collection beauty_values: list - list of integers representing the beauty values of the paintings Returns: int - the maximum possible total beauty max_beauty = current_beauty = beauty_values[0] for beauty in beauty_values[1:]: current_beauty = max(beauty, current_beauty + beauty) max_beauty = max(max_beauty, current_beauty) return max_beauty"},{"question":"You are given a 2D grid of characters representing a map of a game. The map consists of `N` rows and `M` columns where each cell either contains a \'.\' representing an empty space or an \'X\' representing an obstacle. You need to determine the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1), avoiding obstacles. You can only move up, down, left, or right. Your task is to write a program that takes the dimensions of the grid and the grid itself as input, and outputs the length of the shortest path. If there is no such path, output -1. The first line contains two space-separated integers N (2 ≤ N ≤ 1000) and M (2 ≤ M ≤ 1000) — the number of rows and columns in the grid. The next N lines each contain a string of M characters — the grid itself. Output a single integer — the length of the shortest path from the top-left to the bottom-right corner, or -1 if no such path exists. # Example Input: ``` 5 6 ...... .XX... ....X. X....X ...X.. ``` Output: ``` 9 ``` In the above example, the shortest path is of length 9. If there is an obstacle at the starting point or the ending point, the answer is -1. The problem involves traversing a grid while avoiding obstacles, which could be approached using Breadth-First Search (BFS) for finding the shortest path in an unweighted grid.","solution":"from collections import deque def shortest_path_in_grid(grid, N, M): Returns the length of the shortest path from the top-left to the bottom-right corner, avoiding obstacles, or -1 if no such path exists. if grid[0][0] == \'X\' or grid[N-1][M-1] == \'X\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = [[False for _ in range(M)] for _ in range(N)] visited[0][0] = True steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == N-1 and y == M-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) steps += 1 return -1"},{"question":"A famous researcher in algorithm development, Dr. Jane, is working on optimizing algorithms for finding patterns in large datasets. Lately, she has been focusing on a problem involving sequences of numbers, and she needs your help to develop an efficient solution. Given a sequence of n integers, the task is to determine the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is at most 1. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — the sequence elements. Print a single integer — the length of the longest contiguous subsequence with the described property. Sample Input: ``` 7 1 2 2 3 5 7 8 ``` Sample Output: ``` 4 ``` Explanation: In the given sequence, the longest contiguous subsequence where the absolute difference between any two consecutive elements is at most 1 is `[1, 2, 2, 3]`, which has a length of 4.","solution":"def longest_contiguous_subsequence(n, sequence): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if abs(sequence[i] - sequence[i - 1]) <= 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Example usage: # n = 7 # sequence = [1, 2, 2, 3, 5, 7, 8] # print(longest_contiguous_subsequence(n, sequence)) # Output: 4"},{"question":"Given an array of integers `nums`, you need to find all the unique triplets in the array which gives the sum of zero. Each triplet should be in the form of [nums[i], nums[j], nums[k]] with i, j, and k being distinct indices and nums[i] + nums[j] + nums[k] == 0. Note that the solution set must not contain duplicate triplets. For example, given the array nums = `[-1, 0, 1, 2, -1, -4]`, the unique triplets that sum up to zero are: ``` [ [-1, 0, 1], [-1, -1, 2] ] ``` # Input Format - The first line contains an integer `t` (1 ≤ t ≤ 100) - the number of test cases. - For each test case: - The first line contains an integer `n` (3 ≤ n ≤ 3000) - the number of elements in the array. - The second line contains `n` space-separated integers representing the array elements `nums` (−10^5 ≤ nums[i] ≤ 10^5). # Output Format For each test case, print all the unique triplets which sum up to zero, each on a new line. The triplets for each test case should be separated by an empty line. If no such triplet exists, print an empty line. # Example Input: ``` 2 6 -1 0 1 2 -1 -4 5 1 2 -2 -1 1 ``` Output: ``` -1 0 1 -1 -1 2 1 1 -2 ```","solution":"def three_sum(nums): Given an array nums of n integers, the function finds all unique triplets in the array which gives the sum of zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result def process_input(t, test_cases): results = [] for nums in test_cases: results.append(three_sum(nums)) return results def format_output(results): output = \\"\\" for result in results: for triplet in result: output += \\" \\".join(map(str, triplet)) + \\"n\\" if result: output += \\"n\\" return output.strip()"},{"question":"Alyona has a grid with `n` rows and `m` columns, where each cell is either empty or contains a wall. Alyona wants to traverse from the top-left corner to the bottom-right corner. She can only move right or down if the cell she is moving to is empty. Determine the number of different paths Alyona can take to achieve this task. Each path must avoid walls and only take steps to the right or down. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next `n` lines each contain `m` characters, where each character is either \'.\' (an empty cell) or \'#\' (a cell with a wall). Output the number of possible paths from the top-left corner to the bottom-right corner. If there is no valid path, output `0`. Example: Input: 3 3 ... .#. ... Output: 2 In the example, there are two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(grid): Returns the number of possible paths from the top-left corner to the bottom-right corner in a grid. Args: grid : List[List[str]] : The grid with \'.\' representing empty cells and \'#\' representing walls. Returns: int : The number of possible paths from the top-left corner to the bottom-right corner. # Get dimensions n = len(grid) m = len(grid[0]) # Create a DP table to store number of paths to each cell dp = [[0]*m for _ in range(n)] # Initialize the starting point if it is not a wall if grid[0][0] == \'.\': dp[0][0] = 1 # Fill dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': continue if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage: n, m = 3, 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] print(count_paths(grid)) # Output should be 2"},{"question":"The city of Eldoria wants to automate its waste collection system. The city is divided into a grid of streets where each cell in the grid represents a collection point. Each collection point can have a certain amount of waste that needs to be collected. The waste collection truck starts from the top-left corner of the grid and needs to collect all the waste by traveling to the bottom-right corner. At each step, the truck can only move right or down to an adjacent cell. The truck can only move into a cell if the amount of waste in the current cell is greater than or equal to the waste in the next cell. You are to determine if it\'s possible for the truck to collect all the waste and reach the bottom-right corner of the grid starting from the top-left corner following the given movement restrictions. The first line of input is an integer n (1 ≤ n ≤ 100), representing the size of the grid (n x n). The next n lines each contain n integers, where the j-th integer of the i-th line represents the amount of waste at the cell (i, j). Output \\"YES\\" if the truck can reach the bottom-right corner following the movement restrictions, otherwise \\"NO\\". Example: Input: 3 8 5 3 4 3 2 2 1 0 Output: YES Explanation: The truck can move from the top-left (8) -> (5) -> (3) -> (2) -> (1) -> (0) where each move meets the condition that the next cell waste is less than or equal to the current cell waste.","solution":"def can_collect_waste(grid): n = len(grid) def is_valid(x, y, prev_waste): return (0 <= x < n and 0 <= y < n and grid[x][y] <= prev_waste) def dfs(x, y, prev_waste): if x == n-1 and y == n-1: return True if not is_valid(x, y, prev_waste): return False # Move right if y+1 < n and is_valid(x, y+1, grid[x][y]): if dfs(x, y+1, grid[x][y]): return True # Move down if x+1 < n and is_valid(x+1, y, grid[x][y]): if dfs(x+1, y, grid[x][y]): return True return False return \\"YES\\" if dfs(0, 0, grid[0][0]) else \\"NO\\" # Example usage: input_grid = [ [8, 5, 3], [4, 3, 2], [2, 1, 0] ] print(can_collect_waste(input_grid)) # Output: YES"},{"question":"You are given a two-dimensional matrix of size n times m filled with positive integers, and an integer k. Your task is to find and return the maximum possible sum of any submatrix (a contiguous block of the matrix) whose sum is less than or equal to k. The first line of input contains one integer t (1 leq t leq 100) — the number of test cases. t blocks follow, each describing an individual test case. The first line of each test case contains three integers n, m, and k (1 leq n, m leq 50; 1 leq k leq 10^6) — the dimensions of the matrix and the parameter k, described in the problem statement. The next n lines contain m integers each, representing the elements of the matrix. Each element of the matrix a_{ij} (1 leq a_{ij} leq 1000). For each test case, print the maximum sum of any submatrix whose sum is less than or equal to k in a new line. In the first test case, the submatrix with a sum closest to but not exceeding 7 is: ``` [4, 3] ``` Sum of this submatrix is 7. In the second test case, the submatrix with the maximum sum is any single element as each of them is less than 3. For the third test case, the following submatrix gives the maximum sum: ``` [6, 6] ``` Sum of this submatrix is 12.","solution":"def max_sum_submatrix(matrix, k): from itertools import accumulate from bisect import bisect_left, insort import sys n = len(matrix) m = len(matrix[0]) result = -sys.maxsize # Compute prefix sums for each row for left in range(m): row_sums = [0] * n for right in range(left, m): for i in range(n): row_sums[i] += matrix[i][right] curr_sum = 0 prefix_sums = [0] for sum_i in accumulate(row_sums): idx = bisect_left(prefix_sums, sum_i - k) if idx < len(prefix_sums): result = max(result, sum_i - prefix_sums[idx]) insort(prefix_sums, sum_i) return result def max_sum_submatrix_not_exceeding_k(t, test_cases): results = [] for case in test_cases: n, m, k, matrix = case results.append(max_sum_submatrix(matrix, k)) return results"},{"question":"A farmer has a rectangular field of n rows and m columns. The field is initially empty. To protect the field from birds, the farmer wants to set up scarecrows on the cells of the field. Each scarecrow protects all cells in its own row and column. For instance, if a scarecrow is placed at cell (i, j), it will protect every cell in the i-th row and every cell in the j-th column. The farmer wants to minimize the number of scarecrows to be placed such that all cells in the field are protected. Provide a solution to help the farmer achieve this. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns of the field. Print a single integer — the minimum number of scarecrows required to protect the entire field. **Example input:** ``` 4 5 ``` **Example output:** ``` 4 ``` **Explanation:** In a 4x5 field, four scarecrows placed at any one row and their corresponding columns will cover the entire field. For instance, if scarecrows are placed at (1,1), (2,2), (3,3), and (4,4), the whole field is covered.","solution":"def min_scarecrows(n, m): Returns the minimum number of scarecrows needed to protect an n x m field. Parameters: n (int): The number of rows. m (int): The number of columns. Returns: int: Minimum number of scarecrows required. return min(n, m)"},{"question":"Jamie is organizing a charity walkathon. He wants to assign each participant a unique bib number for identification. The bib numbers must satisfy certain constraints based on age groups and the total number of participants. As a respected IT specialist, you\'ve been asked to assist with this task. Participants are divided into three age groups: Group A (<= 12 years), Group B (13 to 19 years), and Group C (>= 20 years). Each group must have a unique range of bib numbers starting from 1. For example, if Group A has bib numbers from 1 to k, Group B should have from k+1 to l, and Group C from l+1 onwards, without overlapping. Your task is to assign the minimum number of bib numbers such that all constraints are satisfied. The first line contains a single integer n (1 leq n leq 100,000) — the total number of participants in the walkathon. The second line contains values for each participant’s age in an array of n integers (1 leq age leq 100). Print a single integer — the minimum number of bib numbers required to assign unique bib numbers to the participants according to the constraints. For example, if there are participants with the following ages: 5, 14, 32, 8, 20 - Group A = {5, 8} -> bib numbers 1, 2 - Group B = {14} -> bib number 3 - Group C = {32, 20} -> bib numbers 4, 5 The output would be 5 as the minimum number of bib numbers needed to assign unique bib numbers while satisfying the age group constraints.","solution":"def min_bib_numbers_required(n, ages): group_a = [] group_b = [] group_c = [] for age in ages: if age <= 12: group_a.append(age) elif 13 <= age <= 19: group_b.append(age) else: group_c.append(age) # Calculate total unique bib numbers required total_bib_numbers = len(group_a) + len(group_b) + len(group_c) return total_bib_numbers"},{"question":"Ciara loves video games and is working on developing her own game. One of the things she needs to keep track of is the score of various players in a leaderboard that includes the scores of `n` players at any point in time. Each player can get or lose points by performing certain actions. Ciara wants to find out the top `k` players with the highest scores. Write a program that can maintain the leaderboard and support the following operations: 1. `add x s`: Add a score `s` to player `x`. If the player did not exist, add the player to the leaderboard. 2. `top k`: Display the list of the top `k` players in descending order of scores. If multiple players have the same score, the player who reached the score first should appear earlier. The program should be able to handle up to `q` operations of these types. Input: - The first line contains two integers `n` and `q` (1 ≤ n ≤ 100, 1 ≤ q ≤ 1000) – the number of players and the number of queries, respectively. - The next `q` lines contain one of the following queries: - `add x s` (1 ≤ x ≤ 100, -1000 ≤ s ≤ 1000) – Add a score `s` to player `x`. - `top k` (1 ≤ k ≤ n) – Print the IDs of the top `k` players. Output: - For each `top k` query, print a line with the IDs of the top `k` players separated by spaces. Example: ``` Input: 5 6 add 1 50 add 2 100 add 1 20 top 2 add 3 25 top 2 Output: 2 1 2 1 ```","solution":"def leaderboard_operations(n, q, operations): Function to process leaderboard operations. Args: n : int : number of players. q : int : number of queries. operations : list : list of strings representing the operations. Returns: list : the results of the \'top k\' operations. from collections import defaultdict, deque # Initialize player scores and operation order scores = defaultdict(int) order = deque() # To keep track of the order of scores added result = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": player = int(parts[1]) score = int(parts[2]) if player not in scores: order.append(player) scores[player] += score elif parts[0] == \\"top\\": k = int(parts[1]) # Get top k players top_players = sorted(scores.items(), key=lambda x: (-x[1], order.index(x[0])))[:k] top_players_ids = [str(player) for player, _ in top_players] result.append(\\" \\".join(top_players_ids)) return result"},{"question":"You are given n weighted items and a knapsack that can carry up to a certain weight W. Your task is to find the maximum value of items that can be carried in the knapsack without exceeding the weight limit. Each item has a weight w_i and a value v_i. The first line contains two integers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 1000) — the number of items and the maximum weight the knapsack can carry respectively. The next n lines contain two integers each, w_i and v_i (1 ≤ w_i ≤ 100, 1 ≤ v_i ≤ 1000), denoting the weight and value of each item. Output a single integer — the maximum value that can be achieved within the given weight limit of the knapsack. Example: Input: 4 7 2 10 3 40 4 50 5 70 Output: 80 Explanation: The optimal way is to pick items with weights 3 and 4, giving a total value of 40 + 50 = 90, but the total weight is 7, not exceeding the limit.","solution":"def knapsack(n, W, items): dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): weight, value = items[i-1] for w in range(W + 1): if weight > w: dp[i][w] = dp[i-1][w] else: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) return dp[n][W]"},{"question":"A social network has users connected with each other through bidirectional friendships. Each user has a unique identifier ranging from 1 to n. To keep the platform safe, the social network has decided to implement a feature that flags the use of abusive language. You are given a list of abusive messages, where each message contains the sender and the receiver\'s user IDs and the frequency of abusive words in that message. Your task is to identify how many unique users have received abusive messages. The first line contains one integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer m (1 le m le 10^5) — the number of abusive messages. Then m lines follow. Each line contains three integers s_i, r_i, and f_i (1 le s_i, r_i le n; s_i ne r_i; 1 le f_i le 10^9) — the sender\'s user ID, the receiver\'s user ID, and the frequency of abusive words in the message, respectively. Print one integer — the number of unique users who have received abusive messages for each test case. For example, suppose there are two test cases: First test case: - 3 messages: (1, 2, 5), (2, 3, 3), (1, 3, 1) - Users 2 and 3 have received abusive messages Second test case: - 2 messages: (4, 5, 2), (5, 6, 4) - Users 5 and 6 have received abusive messages In the first test case, the output should be 2 (for users 2 and 3). In the second test case, the output should be 2 (for users 5 and 6).","solution":"def unique_users_received_abusive_messages(test_cases): results = [] for case in test_cases: m = case[0] messages = case[1] receivers = set() for message in messages: sender, receiver, frequency = message receivers.add(receiver) results.append(len(receivers)) return results # Function to process the input in the required format def process_input(input_str): lines = input_str.strip().split(\\"n\\") idx = 0 t = int(lines[idx]) idx += 1 test_cases = [] for _ in range(t): m = int(lines[idx]) idx += 1 messages = [] for _ in range(m): s, r, f = map(int, lines[idx].split()) messages.append((s, r, f)) idx += 1 test_cases.append((m, messages)) return test_cases"},{"question":"Alice is a software developer and she loves to solve puzzles. She has recently come across an interesting puzzle-like problem. She has been given two strings, `s` and `t`, and her task is to transform string `s` into string `t`. However, she can only use the following operations: 1. Insert a character at any position in `s`. 2. Delete a character from any position in `s`. 3. Substitute a character in `s` with another character. She wants to achieve the transformation using the minimum number of operations possible. Help Alice by providing the number of operations required to transform string `s` into string `t`. The first line of input contains a single integer `q` (1 ≤ q ≤ 100) — the number of test cases. The next `2q` lines contain the descriptions of all test cases. Each test case consists of two lines: - The first line contains the string `s` (1 ≤ |s| ≤ 100), the initial string. - The second line contains the string `t` (1 ≤ |t| ≤ 100), the target string. For each test case, output the minimal number of operations required to transform string `s` into string `t`. # Example Input ``` 2 abcdef azced cat cut ``` Output ``` 3 1 ``` # Explanation - For the first test case, \\"abcdef\\" can be turned into \\"azced\\" with 3 operations: substitute \'b\' with \'z\', substitute \'c\' with \'e\', delete \'f\'. - For the second test case, \\"cat\\" can be turned into \\"cut\\" with 1 operation: substitute \'a\' with \'u\'.","solution":"def min_operations_to_transform(s, t): Determine the minimum number of operations required to transform string s into string t. This problem is a classic example of the edit distance problem. m, n = len(s), len(t) # Create a dp table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If first string is empty, insert all characters of t elif j == 0: dp[i][j] = i # If second string is empty, remove all characters of s elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are same, ignore last char else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] def process_input(q, cases): results = [] for i in range(q): s = cases[2 * i] t = cases[2 * i + 1] results.append(min_operations_to_transform(s, t)) return results"},{"question":"You are given an array of integers. Your task is to find the smallest integer in the array that is greater than a given integer `x`. If no such integer exists, return -1. The input consists of two lines: - The first line contains two integers `n` and `x` (1 leq n leq 10^5, 1 leq x leq 10^9) — the size of the array and the integer to compare against. - The second line contains `n` space-separated integers representing the elements of the array (1 leq a_i leq 10^9). The output should be a single integer — the smallest integer in the array greater than `x` or -1 if no such integer exists. # Example Input ``` 6 7 1 3 5 8 12 14 ``` Output ``` 8 ``` Input ``` 5 15 2 4 6 8 10 ``` Output ``` -1 ```","solution":"def smallest_integer_greater_than_x(n, x, array): Finds the smallest integer in the array that is greater than a given integer x. If no such integer exists, returns -1. :param n: int - size of the array :param x: int - the integer to compare against :param array: list[int] - the list of integers :return: int - smallest integer in array greater than x or -1 if no such integer exists min_greater = float(\'inf\') for num in array: if num > x and num < min_greater: min_greater = num return min_greater if min_greater != float(\'inf\') else -1"},{"question":"You are given a binary tree with n nodes, where each node has a unique value from 1 to n. Each node has either 0 or 2 children. Let\'s define the depth of the tree as the maximum number of nodes from the root to a leaf. You are required to answer q queries. In each query, you will be given a number k. You need to determine the k-th node in the tree when traversed in a level-order manner and print its value. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree. The next n lines describe the binary tree. Each line contains three integers vi, li, ri (1 ≤ vi, li, ri ≤ n or li, ri = -1). vi is the value of the current node, li is the value of the left child of the current node, and ri is the value of the right child of the current node. If a node doesn\'t have a left or right child, li or ri will be -1. All nodes are guaranteed to form a valid binary tree. The following line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines contain an integer k (1 ≤ k ≤ n) for each query — the position of the node in the level-order traversal of the tree. Print q lines where the i-th line contains the answer to the i-th query. For example: Input: 5 1 2 3 2 4 5 3 -1 -1 4 -1 -1 5 -1 -1 3 1 4 5 Output: 1 4 5 Explanation: The level-order traversal of the given binary tree is: 1, 2, 3, 4, 5. Thus, the 1st node is 1, the 4th node is 4, and the 5th node is 5.","solution":"from collections import deque def level_order_tree(tree, n, queries): # Dictionary to store the left and right children for each node children = {i: (-1, -1) for i in range(1, n + 1)} # Filling the child information for vi, li, ri in tree: children[vi] = (li, ri) # Level-order traversal level_order = [] queue = deque([1]) while queue: node = queue.popleft() level_order.append(node) left, right = children[node] if left != -1: queue.append(left) if right != -1: queue.append(right) # Responding to the queries result = [] for k in queries: result.append(level_order[k - 1]) return result"},{"question":"You are given a string consisting of lowercase English letters and an integer k. Your task is to transform the string into a new string of length exactly k by performing the minimum number of following two operations: 1. Insert any character to any position in the string. 2. Delete any character from the string. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains a string s (1 ≤ |s| ≤ 100) and an integer k (1 ≤ k ≤ 200). For each test case, output a single integer — the minimum number of operations required to transform the string s into a string of length k. Example: Input: 3 abc 5 abcde 3 abcd 4 Output: 2 2 0 In the first example, you need to insert two characters to make the string length 5. In the second example, you need to delete two characters to make the string length 3. In the third example, the string already has the required length, so no operation is needed.","solution":"def min_operations_to_transform_string(s, k): Returns the minimum number of insertions or deletions required to transform the string s into a string of length k. n = len(s) if n == k: return 0 elif n < k: return k - n else: return n - k def min_operations(t, test_cases): results = [] for s, k in test_cases: results.append(min_operations_to_transform_string(s, k)) return results"},{"question":"A pantry can contain up to n different types of dry goods. Each type of dry goods has a certain shelf life, meaning it has an expiration period after which it should not be consumed. Given the shelf life (in days) of each type of dry goods and the number of queries, each query asks whether it’s possible to choose a shelf life such that within the given period of days, at least m different types of dry goods can be consumed before they expire. You are given n types of dry goods, each with its shelf life, and q queries. For each query, determine whether it\'s possible to consume at least m different types of dry goods within the specified number of days. The first line of input contains two integers n and q (1 le n, q le 2 cdot 10^5) — the number of types of dry goods and the number of queries. The second line contains n integers s_1, s_2, ldots, s_n (1 le s_i le 2 cdot 10^5), where s_i is the shelf life (in days) of the i-th type of dry goods. Each of the next q lines contains two integers d and m (1 le d, m le 2 cdot 10^5) — the number of days and the minimum number of different types of dry goods that must be consumable within that period. For each query, print \\"YES\\" if it’s possible to consume at least m different types of dry goods within d days, otherwise print \\"NO\\". # Example Input ``` 5 3 4 2 8 6 3 5 2 7 3 3 4 ``` Output ``` YES YES NO ``` # Explanation - For the first query (5, 2), you can consume the dry goods with shelf lives 4 and 2 within 5 days. - For the second query (7, 3), you can consume the dry goods with shelf lives 4, 2, and 3 within 7 days. - For the third query (3, 4), you cannot consume 4 different types of dry goods within 3 days, so the answer is NO.","solution":"def can_consume_dry_goods(n, shelf_lives, queries): Function to determine if at least m different types of dry goods can be consumed within d days for each query. :param n: int: Number of types of dry goods :param shelf_lives: List[int]: List of shelf lives of each type of dry goods :param queries: List[Tuple[int, int]]: List of queries :return: List[str]: List of \\"YES\\" or \\"NO\\" for each query outcomes = [] shelf_lives.sort() for d, m in queries: count = 0 for shelf_life in shelf_lives: if shelf_life <= d: count += 1 if count >= m: break if count >= m: outcomes.append(\\"YES\\") else: outcomes.append(\\"NO\\") return outcomes"},{"question":"Aria is a successful gardener with a large flower garden. She has a large section of the garden where she wants to plant flowers in a long straight line. To make the garden look beautiful, she decided to plant exactly k flowers and wants to maximize the minimum distance between any two adjacent flowers. You are given an array of integers positions of length n (where 2 ≤ n ≤ 100,000 and each position is in the range 1 ≤ positions[i] ≤ 10^9) that represent the possible positions where she can plant a flower. Determine the largest minimum distance possible between any two flowers if she plants exactly k flowers in the garden. The input consists of: - The first line contains two integers n and k (2 ≤ k ≤ n), the length of the array and the number of flowers to be planted, respectively. - The second line contains n integers representing the positions of the garden. Print a single integer representing the maximum possible minimum distance between any two flowers. It is guaranteed that there is always a valid way to plant the k flowers. # Example Input 5 3 1 2 8 4 9 Output 3 # Explanation In the example, you can plant the flowers at positions 1, 4, and 8 to maximize the minimum distance to 3. # Constraints - 2 ≤ n ≤ 100,000 - 2 ≤ k ≤ n - 1 ≤ positions[i] ≤ 10^9","solution":"def can_place_flowers(positions, k, min_distance): count = 1 # Place the first flower at the first position last_position = positions[0] for position in positions[1:]: if position - last_position >= min_distance: count += 1 last_position = position if count >= k: return True return False def max_min_distance(n, k, positions): positions.sort() left = 1 right = positions[-1] - positions[0] best = 0 while left <= right: mid = (left + right) // 2 if can_place_flowers(positions, k, mid): best = mid left = mid + 1 else: right = mid - 1 return best"},{"question":"A group of friends decided to organize a running contest in the park. They want to determine the winner based on their running results for a week. Each friend recorded the distance they ran each day for one week (starting from Monday to Sunday). Given the number of friends and the distances each friend ran each day, write a program to determine which friend ran the most total distance in the week and the day they achieved their longest single run. The first input line contains an integer k (1 le k le 100), the number of friends. In the next k lines, each line contains seven non-negative space-separated integers that do not exceed 1000, representing the distances (in meters) that a friend ran on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday, respectively. Print two lines: 1. The 1-based index of the friend who ran the most total distance during the week. If there are multiple such friends, print the smallest index. 2. The day of the week (Monday is 1, ..., Sunday is 7) when this friend achieved their longest single run. If there are multiple days with the same longest run, print the earliest day. Example: Input: ``` 3 5 10 15 0 20 25 30 5 15 10 0 10 5 10 10 10 10 10 10 10 20 ``` Output: ``` 1 7 ``` Explanation: The first friend ran a total distance of 105 meters, the second friend ran a total distance of 55 meters, and the third friend ran 80 meters. The first friend ran the most total distance, and their longest single run of 30 meters was on Sunday. Thus, the output is `1` for the friend index and `7` for the day of the week.","solution":"def determine_winner(k, distances): Determines the friend who ran the most total distance in a week and the day of their longest single run. Parameters: k (int): The number of friends. distances (list of list of int): Each inner list contains 7 integers representing the distances ran by a friend on Monday to Sunday. Returns: tuple: (index_of_friend, day_of_longest_run) max_total_distance = -1 index_of_friend = -1 longest_single_run = -1 day_of_longest_run = -1 for i in range(k): total_distance = sum(distances[i]) if total_distance > max_total_distance: max_total_distance = total_distance index_of_friend = i + 1 longest_single_run = max(distances[i]) day_of_longest_run = distances[i].index(longest_single_run) + 1 elif total_distance == max_total_distance: longest_single_run_current = max(distances[i]) if longest_single_run_current > longest_single_run: index_of_friend = i + 1 longest_single_run = longest_single_run_current day_of_longest_run = distances[i].index(longest_single_run_current) + 1 return (index_of_friend, day_of_longest_run)"},{"question":"Alex loves cooking and wants to try a new recipe that requires precision in measurements. He has two types of vessels: one type of vessel can hold exactly x milliliters of liquid, and the other type can hold y milliliters. Alex can use any combination of these vessels to measure out the liquid needed. Given a required amount of liquid z (in milliliters), help Alex determine if he can measure exactly z milliliters using any number of the two types of vessels. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains three integers x, y, and z (1 ≤ x, y, z ≤ 10^9) — the capacities of the two types of vessels and the required amount of liquid. For each test case, output \\"YES\\" if it is possible to measure exactly z milliliters using any combination of the two types of vessels, and \\"NO\\" otherwise. Input: 3 3 5 7 4 6 8 1 2 3 Output: YES NO YES Explanation: 1. In the first test case, Alex can measure 7 milliliters by using one 3-milliliter vessel and one 5-milliliter vessel. 2. In the second test case, it is impossible to measure exactly 8 milliliters as neither 4 nor 6 can sum up to 8 at the same time. 3. In the third test case, Alex can measure 3 milliliters by using three 1-milliliter vessels.","solution":"import math def can_measure_exactly(t, cases): results = [] for i in range(t): x, y, z = cases[i] if z % math.gcd(x, y) == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant land called Numland, there is a unique traditional sport played by its inhabitants involving magic strings. They have an initial string s of length n consisting of lowercase English letters. The inhabitants perform a series of operations to transform the string to create a palindrome (a string that reads the same forwards and backwards). One operation consists of selecting any single character from the string and replacing it with another character of their choice. You need to determine the minimum number of operations required to convert the given string s into a palindrome. The input contains a single string s (1 ≤ |s| ≤ 1000) — the initial string. Output a single integer — the minimum number of operations required to transform the string into a palindrome. **Example:** Input: ``` abca ``` Output: ``` 1 ``` _Explanation:_ By changing the last character \'a\' to \'b\', we get \\"abba\\" which is a palindrome. Hence, only 1 operation is required.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to convert the string s into a palindrome. n = len(s) operations = 0 # Compare characters from left to right and from right to left for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"An international conference is being held in Alphaland, and n participants have arrived. Each participant has a unique ID, which is an integer from 1 to n. They need to be allocated hotel rooms based on their programming skill levels, ensuring no two participants in the same room have skill levels that differ by more than k. The participants are recorded in a list where the i-th element represents the skill level of the participant with ID i. The rooms can have any number of participants as long as the condition is satisfied. Your task is to determine the minimum number of rooms required to accommodate all the participants under the given condition. Input: - The first line contains two integers n (1 ≤ n ≤ 1000) and k (0 ≤ k ≤ 1000) — the number of participants and the maximum allowed difference in skill levels within the same room. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the skill levels of the participants. Output: - Print a single integer representing the minimum number of rooms needed. Example: Input: 5 2 3 5 4 9 10 Output: 2 Explanation: Participants with skill levels [3, 4, 5] can be in one room and participants with skill levels [9, 10] can be in another room. Thus, a minimum of 2 rooms is required.","solution":"def min_rooms(n, k, skill_levels): Returns the minimum number of rooms required where no two participant\'s skill level in the same room differs by more than k. # Sort the skill levels to facilitate grouping skill_levels.sort() # Initialize the number of rooms needed rooms = 0 i = 0 while i < n: # Start a new room with the current participant rooms += 1 current_skill = skill_levels[i] # Continue to add participants to the room as long as the skill difference is within k while i < n and skill_levels[i] - current_skill <= k: i += 1 return rooms"},{"question":"Inspired by the existing questions, here\'s your new coding assessment question: Twilight Sparkle is practicing her spell casting and has decided to write a small spell that switches positions of characters in a string. However, she wants to make sure that no character appears in the same position as it was in the original string, essentially a derangement of the original string. Given a string s, determine the number of possible derangements of s. Recall that a derangement of a string is a permutation where no character is in its original position. The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^5) consisting of uppercase and lowercase letters. For each test case, output the number of possible derangements of the string modulo 10^9 + 7. Example input: 2 abc abcd Example output: 2 9 Explanation: For the first input string \'abc\': The possible derangements are: 1. bac 2. cab For the second input string \'abcd\': The possible derangements are: 1. bacd 2. badc 3. cadb 4. cdab 5. dabc 6. dbca 7. dcab 8. dacb 9. bcda Note: You need to calculate large permutations efficiently and consider modulo 10^9 + 7 for the output.","solution":"def derangements(n): Returns the number of derangements of length n, modulo 10^9 + 7. MOD = 10**9 + 7 if n == 1: return 0 if n == 2: return 1 dp = [0] * (n + 1) dp[1], dp[2] = 0, 1 for i in range(3, n + 1): dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]) % MOD return dp[n] def number_of_derangements(t, strings): MOD = 10**9 + 7 results = [] for s in strings: n = len(s) results.append(derangements(n)) return results"},{"question":"You are given an array a consisting of n integers and an integer k. Your task is to determine whether it is possible to partition the array into exactly k non-empty subsets such that the sum of each subset is a prime number. An integer p is considered a prime if it is greater than 1 and cannot be divided evenly by any integer other than 1 and p itself. The first line of the input contains two integers n (1 le n le 100) — the number of elements in the array and k (1 le k le n) — the number of required subsets. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. Print \\"YES\\" if it is possible to partition the array into exactly k non-empty subsets such that each subset\'s sum is a prime number. Otherwise, print \\"NO\\". For example, given the array [6, 5, 8, 12, 1] and k = 3: Explanation of sample input: - The array can be partitioned into [6, 5] (sum is 11, which is prime), [8] (sum is 8, which is not prime) and [12, 1] (sum is 13, which is prime). However, since 8 is not a prime number, this partition is not valid. Thus, the correct output would be \\"NO\\".","solution":"from itertools import combinations def is_prime(num): Check if a number is a prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def can_partition_into_prime_sums(n, k, arr): Determine if array can be partitioned into `k` non-empty subsets such that each subset sum is a prime number. def can_partition(start, k, subset_sums): if k == 0: return all(is_prime(s) for s in subset_sums) if start >= n: return False for comb in combinations(range(start, n), 1): new_subset_sum = sum(arr[i] for i in comb) if can_partition(comb[0] + 1, k - 1, subset_sums + [new_subset_sum]): return True return False return \\"YES\\" if can_partition(0, k, []) else \\"NO\\""},{"question":"Samantha loves organizing tournaments for her local community. She has a list of people who are registered to participate in multiple tournaments, and she wants to schedule the tournaments in such a way that no one has to play in more than one tournament at the same time. Each tournament runs continuously from its start time to its end time. Given a list of start and end times for the tournaments, determine the minimum number of parallel tournament slots needed so that all tournaments can be scheduled without overlaps. The first line of input contains an integer n (1 leq n leq 10^5), the number of tournaments. The next n lines each contain two integers s_i and e_i (1 leq s_i < e_i leq 10^9), the start and end times of the tournaments, respectively. Output a single integer: the minimum number of parallel tournament slots required. For example: Input: ``` 5 1 4 2 6 8 10 3 5 7 9 ``` Output: ``` 3 ``` In this example, the minimum number of parallel tournament slots required is 3: - 1st slot: 1-4 - 2nd slot: 2-6 - 3rd slot: 3-5 All other tournaments can be scheduled without overlap in the existing slots. The solution is found by examining the maximum overlap of tournaments in terms of their start and end times.","solution":"def min_parallel_tournament_slots(tournaments): Determine the minimum number of parallel tournament slots needed to schedule all tournaments without overlap. Parameters: tournaments (list of tuples): List of tuples where each tuple contains the start and end time of a tournament. Returns: int: Minimum number of parallel tournament slots required. if not tournaments: return 0 # Separate the start and end times start_times = sorted(tournament[0] for tournament in tournaments) end_times = sorted(tournament[1] for tournament in tournaments) max_slots = 0 ongoing_tournaments = 0 i, j = 0, 0 while i < len(start_times): if start_times[i] < end_times[j]: ongoing_tournaments += 1 max_slots = max(max_slots, ongoing_tournaments) i += 1 else: ongoing_tournaments -= 1 j += 1 return max_slots"},{"question":"You are given a binary string s of length n (consisting of characters \'0\' and \'1\') and a number k. You can select any substring of s of length k and flip all the bits in the substring (changing \'0\' to \'1\' and \'1\' to \'0\'). You can perform this operation any number of times. Determine if it is possible to make all the bits in the string equal (either all \'0\'s or all \'1\'s) using the mentioned operation any number of times. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the length of the binary string and the length of the substring to be flipped. The second line contains the binary string s of length n. Output \\"YES\\" if it is possible to make all the bits in the string equal, otherwise print \\"NO\\". Examples: Input: 6 2 110011 Output: YES Input: 5 3 10101 Output: NO Explanation: In the first example, you can achieve a uniform string by flipping the substring \\"11\\" (positions 1 and 2) to \\"00\\", and flipping the substring \\"11\\" (positions 5 and 6) to \\"00\\". In the second example, no matter how many flips of length 3 are performed, it\'s not possible to achieve a uniform string.","solution":"def can_make_all_bits_equal(n, k, s): Determine if it\'s possible to make all bits in the string equal using the mentioned operation any number of times. Args: n : int : length of the binary string. k : int : length of the substring to be flipped. s : str : binary string. Returns: str : \\"YES\\" or \\"NO\\" depending on whether it\'s possible to make all bits in the string equal. count_0 = s.count(\'0\') count_1 = s.count(\'1\') # If counts of either \'0\'s or \'1\'s already make the length of binary string, return YES if count_0 == n or count_1 == n: return \\"YES\\" if k % 2 == 1: return \\"YES\\" # If flip length k is odd, any configuration is possible # If flip length k is even, check if frequencies of \'0\'s and \'1\'s are even if count_0 % 2 == count_1 % 2: return \\"YES\\" return \\"NO\\""},{"question":"Marina is very fond of traveling and has recently collected a map of cities she wants to visit. The cities are connected by roads, each road having a specific travel time. However, Marina wants to ensure she minimizes her total travel time so that she can enjoy more time sightseeing in the cities. Each city can be visited only once, starting from a specific city and returning back to the starting city. You need to help Marina find the minimum travel time to visit all cities and return to the start, essentially solving the Traveling Salesman Problem (TSP) for her. You are given the number of cities n and a matrix t such that t[i][j] represents the travel time between city i and city j . Your task is to determine the minimum travel time required for Marina to start at city 0, visit all cities exactly once, and return to city 0. The first line of input contains a single integer n ( 2 leq n leq 20 ), representing the number of cities. The next n lines each contain n space-separated integers, representing the travel time matrix t , where t[i][j] ( 0 leq t[i][j] leq 10^3 ) is the travel time between city i and city j . Output a single integer, the minimum travel time required for Marina to visit all cities and return to the starting city. The first test case is a simple matrix where the minimum path is straightforward to identify. The second test case requires careful consideration of the path to ensure the minimum travel time. Example: Input: 4 0 20 42 35 20 0 30 34 42 30 0 12 35 34 12 0 Output: 97 Explanation: Marina should start at city 0, visit the cities in the sequence 1 -> 3 -> 2 -> 0, resulting in a total travel time of 97 (20 + 34 + 12 + 30 + 1).","solution":"from itertools import permutations def tsp(n, t): Solve the Traveling Salesman Problem for a given number of cities and travel time matrix. Parameters: n (int): number of cities t (list of list of int): travel time matrix Returns: int: minimum travel time to visit all cities and return to the start # Generate all permutations of cities except the starting city (city 0) cities = range(1, n) min_travel_time = float(\'inf\') for perm in permutations(cities): # Calculate the total travel time for the current permutation travel_time = t[0][perm[0]] # start from city 0 to the first city in the permutation for i in range(len(perm) - 1): travel_time += t[perm[i]][perm[i + 1]] travel_time += t[perm[-1]][0] # return to the start city # Update the minimum travel time if the current one is less min_travel_time = min(min_travel_time, travel_time) return min_travel_time"},{"question":"Alice is an avid collector of rare stamps and she keeps them organized in collections. Each collection consists of multiple albums, and each album contains a specific number of slots to hold stamps. Sometimes, some albums already have a few slots filled with stamps, while others are entirely empty. Alice wants to track the maximum number of new stamps she can place in her collections given the available slots. You are given n collections, where each collection i has mi albums, and each album j within collection i has si, j slots. Out of these si, j slots, only fi, j slots are free. Given a list of k new stamps, where each stamp requires l slots, determine how many of these stamps Alice can fit into her collections. The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of collections. The second line contains an integer k (1 ≤ k ≤ 500), the number of new stamps. The third line contains an integer l (1 ≤ l ≤ 100), the number of slots each new stamp requires. Then, for each collection, you will be provided: - A line containing the integer mi (1 ≤ mi ≤ 100), the number of albums in the i-th collection. - A line containing mi integers si,1, si,2, ..., si,mi (1 ≤ si,j ≤ 200), the total number of slots in each album of the i-th collection. - A line containing mi integers fi,1, fi,2, ..., fi,mi (0 ≤ fi,j ≤ si,j), the number of free slots in each album of the i-th collection. Print a single integer — the maximum number of new stamps that Alice can place in her albums. In the first example, you are given 2 collections. The first collection has 2 albums with 5 and 6 slots respectively, and 3 and 6 of them are free. The second collection has 3 albums with 4, 8, and 6 slots respectively, with 2, 4, and 6 of them free. With 5 new stamps, each requiring 4 slots, Alice can fit all 5 stamps into the available free slots. In the second example, you have 1 collection with 2 albums, both having 5 slots each with only 1 free slot each. With 3 new stamps requiring 3 slots each, Alice cannot fit any new stamps into the albums.","solution":"def max_new_stamps(n, k, l, collections): total_free_slots = 0 for collection in collections: mi, slots, frees = collection for free in frees: total_free_slots += free max_new_stamps = total_free_slots // l return min(k, max_new_stamps)"},{"question":"Internet traffic monitoring is vital for performance analysis and security purposes. Given an ordered list of time intervals representing user sessions on a website, you need to compute the total duration for which the website was user-occupied. The intervals might overlap, and in such cases, the time should be counted only once. Each interval is defined by its start and end time in seconds. Your task is to calculate the sum of all distinct time intervals in seconds. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of user sessions. Each of the next n lines contains two space-separated integers si and ei (0 ≤ si < ei ≤ 1,000,000,000) — which signify the start and end time of a user session. Print a single integer — the total duration for which the website was occupied by at least one user session. For example: Input: 5 1 3 2 5 6 8 8 10 3 6 Output: 9 (Note: The intervals [1, 3] and [2, 5] overlap to cover the period from 1 to 5. The period [6, 10] is continuous, so the total duration is (5 - 1) + (10 - 6), which equals 9 seconds.) Explanation: - User session intervals are [1, 3], [2, 5], [6, 8], [8, 10], [3, 6] - Merging these sessions, the website is occupied from 1 to 5 and 6 to 10 (both inclusive). - Therefore, the total occupation duration is (5 - 1) + (10 - 6) = 9 seconds.","solution":"def total_occupied_time(n, intervals): if n == 0: return 0 # Sort the intervals by start time intervals.sort() # Initialize merged intervals with the first interval merged_intervals = [intervals[0]] for i in range(1, n): current_start, current_end = intervals[i] last_start, last_end = merged_intervals[-1] if current_start <= last_end: # Merge intervals if they overlap merged_intervals[-1] = (last_start, max(last_end, current_end)) else: # Otherwise, add the current interval as a new one merged_intervals.append((current_start, current_end)) # Calculate the total duration of merged intervals total_duration = sum(end - start for start, end in merged_intervals) return total_duration"},{"question":"You are a new detective in town and you are investigating a series of robberies. The robberies have been happening at certain coordinates on a 2D grid, and each robbery site might hide a clue about the next location. Your task is to identify a pattern between the coordinates. You are given the coordinates of several robbery sites. Your aim is to determine the maximum number of robbery sites that lie on a straight line. This might help you predict the next crime scene. Given n points on a 2D cartesian plane, you need to find the maximum number of points that lie on the same straight line. # Input - A single integer n (1 ≤ n ≤ 3000) representing the number of points. - n lines follow, each containing two integers x and y (-10000 ≤ x, y ≤ 10000) representing the coordinates of each point. # Output - Print a single integer — the maximum number of points that lie on the same straight line. # Example Input: ``` 6 1 1 2 2 3 3 4 4 5 5 1 2 ``` Output: ``` 5 ``` In this example, the points (1,1), (2,2), (3,3), (4,4), and (5,5) all lie on a straight line, so the maximum number of points on the same line is 5.","solution":"def max_points_on_a_line(n, points): from collections import defaultdict from math import gcd if n <= 1: return n def slope(dx, dy): if dx == 0: # vertical line return (0, 1) elif dy == 0: # horizontal line return (1, 0) else: g = gcd(dx, dy) return (dx // g, dy // g) max_points = 1 for i in range(n): slopes = defaultdict(int) same_point_count = 1 vertical_points = 0 horizontal_points = 0 for j in range(n): if i != j: dx = points[j][0] - points[i][0] dy = points[j][1] - points[i][1] if dx == 0 and dy == 0: same_point_count += 1 elif dx == 0: vertical_points += 1 elif dy == 0: horizontal_points += 1 else: sl = slope(dx, dy) slopes[sl] += 1 current_max = max(slopes.values(), default=0) + same_point_count current_max = max(current_max, vertical_points + same_point_count) current_max = max(current_max, horizontal_points + same_point_count) max_points = max(max_points, current_max) return max_points # Example usage: # n = 6 # points = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (1, 2)] # print(max_points_on_a_line(n, points)) # Output: 5"},{"question":"Alice is organizing a card game tournament for a group of players. Each player has a unique skill level, and Alice wants to form teams where the difference in skill levels within a team is minimized. Alice can form teams of exactly three players each, and she wants to form the maximum number of such teams. Given a list of the players\' skill levels, help Alice determine the maximum number of teams she can form and the teams themselves. The skill levels of the players in each team should be as close as possible. The first line of input contains an integer n (3 ≤ n ≤ 10^5) — the number of players. The second line of input contains n space-separated integers, each representing the skill level si (1 ≤ si ≤ 10^9) of each player. Print the maximum number of teams Alice can form. Following that, print the skill levels of the players in each team line by line. If multiple valid groupings exist, print any one of them. Example input: 9 4 7 1 2 10 8 6 3 9 Example output: 3 2 3 4 6 7 8 8 9 10","solution":"def form_teams(n, skill_levels): Forms teams of 3 players each such that the difference in skill levels within a team is minimized. Parameters: n (int): Number of players skill_levels (list): List of integers representing the skill levels of the players Returns: tuple: A tuple containing the number of teams and the list of teams skill_levels.sort() teams = [] num_teams = n // 3 for i in range(0, num_teams * 3, 3): teams.append(skill_levels[i:i+3]) return num_teams, teams"},{"question":"Alice loves to play with numbers. Today she came across an interesting challenge about palindrome numbers and decided to test you with it. A palindrome number is a number that remains the same when its digits are reversed. For example, 121 and 1331 are palindromes while 123 and 1223 are not. Alice gives you a number N and asks you to find out the next palindrome number larger than N. The first line of the input contains integer N (1 ≤ N ≤ 10^6). Output the next palindrome number that is greater than N. # Example: **Input:** ``` 123 ``` **Output:** ``` 131 ``` **Input:** ``` 999 ``` **Output:** ``` 1001 ```","solution":"def is_palindrome(num): return str(num) == str(num)[::-1] def next_palindrome(N): N += 1 while not is_palindrome(N): N += 1 return N"},{"question":"You are given an array of integers where every element appears three times except for one, which appears exactly once. Your task is to find and return the single element that appears only once. You are required to implement a solution with a linear run-time complexity and without using any extra memory apart from the input array. The input consists of a single line with an integer n (3 ≤ n ≤ 3 * 10^5) — the length of the array followed by n integers separated by spaces. The output should be a single integer — the element that appears exactly once in the array. Example: Input: 10 5 5 5 3 3 3 4 4 4 7 Output: 7 Explanation: In this example, 5, 3, and 4 each appear three times, while 7 appears exactly once. Constraints: - The array length will always be a multiple of 3 plus 1. - Each element in the array (with the exception of the single element) will appear exactly three times. - The values can range from -3 * 10^9 to 3 * 10^9. Note: The provided solution should identify the single element in a manner that adheres to the constraints of linear complexity and constant space utilization.","solution":"def get_single_element(nums): Function to find the element that appears only once in the array where every other element appears exactly three times. ones, twos = 0, 0 for num in nums: # Update ones and twos with the usual bit manipulation trick ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"You are given a string of lowercase English letters. You need to determine the length of the smallest substring that contains all the unique characters of the original string at least once. The first line contains an integer t - the number of test cases (1 leq t leq 10^3). The following t lines each contain a string s of lowercase English letters (1 leq |s| leq 10^5). Output t integers, each representing the length of the smallest substring that contains all the unique characters of the corresponding input string at least once. The total length of all strings in the input will not exceed 10^6. Example: Input: 3 abca abcd aaaa Output: 3 4 1 Explanation: In the first example, the smallest substring that contains all unique characters \'a\', \'b\', and \'c\' is \\"bca\\" which has length 3. In the second example, the smallest substring that contains all unique characters \'a\', \'b\', \'c\', and \'d\' is \\"abcd\\" itself which has length 4. In the third example, the only unique character is \'a\', so the smallest substring has length 1.","solution":"def smallest_substring_with_unique_chars(s): This function finds the length of the smallest substring that contains all unique characters in the given string. unique_chars = set(s) unique_count = len(unique_chars) n = len(s) min_length = n left = 0 char_count = {} for right in range(n): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) == unique_count: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_length def process_test_cases(test_cases): results = [] for s in test_cases: result = smallest_substring_with_unique_chars(s) results.append(result) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has a unique identifier from 1 to n. The edges are defined by a pair of nodes (u, v) denoting there is an edge between node u and node v. Your task is to determine the minimum number of edges that must be removed to make the graph acyclic. An acyclic graph is one that does not contain any cycles. If the graph is already acyclic, no edges need to be removed. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and the number of edges, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge between node u and node v. Output a single integer — the minimum number of edges to remove to make the graph acyclic. Example: Input: 6 7 1 2 2 3 1 3 3 4 4 5 5 6 4 6 Output: 2 Explanation: There are cycles (1-2-3-1) and (3-4-6-5-4). Removing edges (1-3) and (4-6) results in an acyclic graph.","solution":"def minimum_edges_to_remove_to_make_acyclic(n, m, edges): Returns the minimum number of edges that must be removed to make the given graph acyclic. :param n: int - number of nodes :param m: int - number of edges :param edges: List of tuples - each tuple represents an edge in the form (u, v) :return: int - minimum number of edges to remove from collections import defaultdict parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True return False redundant_edges = 0 for u, v in edges: if not union(u, v): redundant_edges += 1 return redundant_edges"},{"question":"You are organizing a tournament with n participants. Each participant is represented by a positive integer ID from 1 to n. Participants will be matched in pairs for each round, and winners will advance to the next round until one overall winner remains. However, there is a twist: Participants can only participate in one match per round, and the number of participants for the next round must be a power of two. If the number of participants at the beginning of a round is not a power of two, the highest-numbered participants receive a bye (which means they advance to the next round without competing in the current round). Your task is to determine the number of matches that will be played in the entire tournament given n participants. The first and only line of input is a single integer n (1 ≤ n ≤ 10^6) — the number of participants. Print a single integer — the total number of matches played in the tournament. For example, for n = 7, the output should be 6. The round-by-round breakdown of matches could be as follows: - Round 1: 3 matches (6 participants play, 1 gets a bye) - Round 2: 2 matches (4 participants left after round 1, 3 played and 1 got a bye) - Round 3: 1 match (2 participants left after round 2) - Total matches = 3 + 2 + 1 = 6","solution":"def number_of_matches(n): Calculate the number of matches that will be played in the tournament. Parameters: n (int): The number of participants. Returns: int: The total number of matches played in the tournament. total_matches = 0 while n > 1: if n % 2 == 0: matches = n // 2 n = n // 2 else: matches = (n - 1) // 2 n = (n - 1) // 2 + 1 total_matches += matches return total_matches"},{"question":"Alex is participating in a programming contest where he encountered a problem involving binary trees. Specifically, he needs to determine whether a given binary tree is a complete binary tree. A binary tree is defined as complete if all levels, except possibly the last, are completely filled, and all nodes are as far left as possible. Given a list of integers describing the level-order traversal of a binary tree, help Alex determine if the binary tree is complete. A level-order traversal of a binary tree is a breadth-first traversal where nodes are visited level by level from left to right. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case, the first line contains an integer `n` (1 ≤ n ≤ 1000), the number of nodes in the binary tree. - The second line contains `n` integers, which is the level-order traversal of the binary tree. Each integer represents the value of a node in the tree (0 ≤ node value ≤ 10^9). # Output For each test case, print \\"Yes\\" if the binary tree is complete, or \\"No\\" otherwise. # Example Input ``` 3 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 4 1 2 3 4 ``` Output ``` Yes Yes Yes ```","solution":"def is_complete_binary_tree(n, level_order): Determine if a binary tree is complete based on its level-order traversal. :param n: Number of nodes in the binary tree. :param level_order: List of integers representing the level-order traversal of the binary tree. :return: \\"Yes\\" if the tree is complete, \\"No\\" otherwise. if n == 0: return \\"Yes\\" # A complete binary tree shouldn\'t have empty nodes except possibly at the end index = 0 is_last_level = False while index < n: if level_order[index] == -1: is_last_level = True elif is_last_level and level_order[index] != -1: return \\"No\\" index += 1 return \\"Yes\\" def main(): import sys input = sys.stdin.read data = input().split() idx = 0 t = int(data[idx]) idx += 1 results = [] for _ in range(t): n = int(data[idx]) idx += 1 level_order = list(map(int, data[idx:idx + n])) idx += n results.append(is_complete_binary_tree(n, level_order)) for result in results: print(result)"},{"question":"Jason is planning to organize a tournament involving several teams. Each team will play against each other exactly once. At the end of the tournament, some teams will have won some matches and lost others. Jason wants to rank the teams based on their performance, but the ranking must satisfy certain conditions. Given an array representing the number of wins for each team, determine if it is possible to derive a ranking for the teams such that no two teams have the same rank if they have a different number of wins. The first line of the input contains a single integer t (1 ≤ t ≤ 100) - the number of test cases. The next t lines each contain a single integer n (1 ≤ n ≤ 100) - the number of teams, followed by an array of n integers where the i-th integer represents the number of wins for the i-th team (0 ≤ wins ≤ n-1). For each test case, output \\"YES\\" if a valid ranking is possible, otherwise, output \\"NO\\". # Example: Input: ``` 2 5 4 3 2 1 0 4 3 3 2 1 ``` Output: ``` YES NO ``` # Explanation: - In the first test case, the teams have distinctive win counts (4, 3, 2, 1, 0) which allows each team to have a unique rank. - In the second test case, two teams have the same number of wins (3), making it impossible to have unique ranks for all teams.","solution":"def can_derive_ranking(t, test_cases): Determine if a valid ranking is possible based on the number of wins. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer n (number of teams) followed by an array of n integers representing the number of wins for each team. Returns: List of str: \\"YES\\" if a valid ranking is possible, otherwise \\"NO\\". results = [] for i in range(t): n, wins = test_cases[i] if len(wins) != len(set(wins)): results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Your friend wants to learn how to write code more efficiently, so you decided to help by creating a practice problem. The problem statement is as follows: You are given a list of `n` positive integers which represents the number of words `w1, w2, ..., wn` in each document. Your task is to rearrange the documents so that the total time taken to read all documents becomes as small as possible. The time to read a document is defined as the sum of the number of words in the document itself and in all previously read documents. For example, if the initial list of words in documents is `[4, 2, 1, 3]`, one possible reading order is `[3, 1, 4, 2]`. # Input - The first line contains a single integer `n` (1 leq n leq 1000) — the number of documents. - The second line contains `n` space-separated integers `w1, w2, ..., wn` (1 leq wi leq 10000) — the number of words in each document. # Output - Print a single integer — the minimum total reading time. # Example Input ``` 5 4 5 1 2 3 ``` Output ``` 35 ``` # Explanation In the optimal order `[1, 2, 3, 4, 5]`, the reading times are as follows: - Reading the first document of 1 word takes 1 unit of time. - Reading the second document of 2 words takes 1 (previous time) + 2 = 3 units of time. - Reading the third document of 3 words takes 3 (previous time) + 3 = 6 units of time. - Reading the fourth document of 4 words takes 6 (previous time) + 4 = 10 units of time. - Reading the fifth document of 5 words takes 10 (previous time) + 5 = 15 units of time. The total reading time is `1 + 3 + 6 + 10 + 15 = 35`.","solution":"def minimum_total_reading_time(n, word_counts): Returns the minimum total reading time for the given documents. Args: n : int The number of documents. word_counts : list of int A list of integers representing the word count in each document. Returns: int The minimum total reading time. sorted_word_counts = sorted(word_counts) total_reading_time = 0 current_time = 0 for word_count in sorted_word_counts: current_time += word_count total_reading_time += current_time return total_reading_time"},{"question":"Lily is working on a secret project that involves processing of long binary strings. She needs to ensure that a particular property holds for each substring of the binary string she creates: there should not be any substring of consecutive ones (\\"1\\") longer than a given length k. Your task is to help Lily determine the maximum possible length of the binary string she can create that adheres to this property. Given the initial length of the binary string, some parts of the string may change their value at different moments while ensuring the property still holds. Initially, the binary string is empty. You are given several queries indicating which position of the binary string to change at each moment and to what value (either \'0\' or \'1\'). Determine the maximum length of the resulting binary string after each query. The first line of input contains integers n, m (1 le n le 10^5, 1 le m le 100), with n representing the initial length of the binary string which is zero, and m representing the upper limit for length of the consecutive \'1\'s in the string. The second line contains an integer q (1 le q le 100,000) representing the number of queries. Each of the next q lines contains two integers p_i, v_i (1 le p_i le q, 0 le v_i le 1), which indicates a query that changes the p_i-th character of the string to v_i. Print the maximum length of the binary string that continuously satisfies the property after each query. Note: The binary string\'s position indices are considered 1-based. Example: Input: ``` 0 3 5 1 1 2 1 3 1 4 0 5 1 ``` Output: ``` 1 2 3 4 5 ``` Explanation: - After the first query \\"1 1\\", the string becomes \\"1\\". - After the second query \\"2 1\\", the string becomes \\"11\\". - After the third query \\"3 1\\", the string becomes \\"111\\". - After the fourth query \\"4 0\\", the string becomes \\"1110\\". - After the fifth query \\"5 1\\", the string becomes \\"11101\\". As we can keep building it without having a substring of consecutive \'1\'s longer than 3, the maximum length keeps increasing.","solution":"def process_queries(n, m, q, queries): This function processes the queries that modify a binary string and prints the maximum length of the binary string after each modification to ensure that the length of consecutive \'1\'s does not exceed a given length m. :param n: Initial length of the binary string (always starts at 0) :param m: The upper limit for the length of consecutive \'1\'s :param q: Number of queries :param queries: List of queries, each containing [p_i, v_i] :return: None binary_string = [] max_length = 0 def count_consecutive_ones(): max_1s = 0 current_1s = 0 for char in binary_string: if char == \'1\': current_1s += 1 if current_1s > max_1s: max_1s = current_1s else: current_1s = 0 return max_1s for p, v in queries: if p > len(binary_string): # Extend the binary_string to fit the new position binary_string.extend([\'0\'] * (p - len(binary_string))) binary_string[p - 1] = str(v) if count_consecutive_ones() <= m: max_length += 1 else: binary_string[p - 1] = \'0\' print(max_length) # Note: In actual usage, you would read input from the user and call # process_queries(n, m, q, queries) with the correct parameters from the input."},{"question":"Yulia is creating an art installation composed of straight-line segments forming a polygon on a 2D plane. She has the coordinates of the vertices of the polygon in the form of pairs of integers, and the vertices are given in a specific order which forms the polygon when connected sequentially. The first vertex is connected to the second, the second to the third, and so on, with the last vertex connected back to the first. Yulia needs to calculate the area of this polygon using the given vertices. The first line contains a single integer `n` (3 ≤ n ≤ 10^6) — the number of vertices of the polygon. The next `n` lines each contain two integers `xi` and `yi` (−10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the ith vertex of the polygon. Print a single number — the area of the polygon. Your answer will be considered correct if the absolute or relative error does not exceed 10^-9. ``` Example: Input: 4 0 0 4 0 4 3 0 3 Output: 12.0 Input: 3 0 0 2 0 1 1 Output: 1.0 ```","solution":"def polygon_area(vertices): Returns the area of a polygon given its vertices using the Shoelace formula. Args: vertices (list of tuples): A list of tuples where each tuple (x, y) represents the coordinates of a vertex. Returns: float: The area of the polygon. n = len(vertices) if n < 3: return 0.0 # A polygon can\'t have less than 3 vertices area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - x2 * y1 return abs(area) / 2.0 def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) vertices = [] index = 1 for _ in range(n): x = int(data[index]) y = int(data[index + 1]) vertices.append((x, y)) index += 2 result = polygon_area(vertices) print(f\\"{result:.6f}\\")"},{"question":"You are given an integer array a of length n. Your task is to find the length of the longest subarray, such that all elements in this subarray are distinct. The first line of the input contains a single integer n (1 le n le 100000) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100000) — the elements of the array. Print a single integer — the length of the longest subarray with all distinct elements. # Example Input: ``` 5 1 2 1 3 4 ``` Output: ``` 4 ``` Input: ``` 3 1 1 1 ``` Output: ``` 1 ``` # Note In the first example, the longest subarray with all distinct elements is `[2, 1, 3, 4]` which has length 4. In the second example, all elements are the same, so the longest subarray with all distinct elements has length 1.","solution":"def longest_unique_subarray(n, a): Returns the length of the longest subarray where all elements are distinct. max_length = 0 start = 0 seen = {} for end in range(n): if a[end] in seen: start = max(start, seen[a[end]] + 1) seen[a[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"As a data scientist working at a startup, you are tasked with developing an algorithm to categorize customer reviews into positive, neutral, or negative sentiments. Instead of resorting to complicated machine learning models, you decide to implement a simple rule-based approach. You are given `n` customer reviews, each review is a string comprising words and spaces. Certain words are annotated as positive, negative, or neutral and are known beforehand. The goal is to classify each review based on the sentiment expressed by these words. A review is classified as: - \\"Positive\\" if it contains more positive words than negative words. - \\"Negative\\" if it contains more negative words than positive words. - \\"Neutral\\" if it contains the same number of positive and negative words or no sentiment words at all. Write a function to determine the sentiment of each review. Input: - The first line contains three integers `n`, `p`, and `m` — the number of reviews, the number of positive words, and the number of negative words respectively (1 ≤ `n`, `p`, `m` ≤ 1000). - The second line contains `p` positive words separated by spaces. - The third line contains `m` negative words separated by spaces. - The following `n` lines each contain a single review. Output: - Print `n` lines, each containing the sentiment (\\"Positive\\", \\"Negative\\", or \\"Neutral\\") of the corresponding review. Example: Input: ``` 3 3 3 good excellent amazing bad terrible horrible The product is amazing The service was terrible I think the product is good but the service was bad ``` Output: ``` Positive Negative Neutral ``` Explanation: 1. The first review contains one positive word (\\"amazing\\") and no negative words, so it is classified as \\"Positive\\". 2. The second review contains one negative word (\\"terrible\\") and no positive words, so it is classified as \\"Negative\\". 3. The third review contains one positive word (\\"good\\") and one negative word (\\"bad\\"), balancing each other out, so it is classified as \\"Neutral\\".","solution":"def classify_reviews(n, p, m, positive_words, negative_words, reviews): positive_set = set(positive_words.split()) negative_set = set(negative_words.split()) sentiments = [] for review in reviews: review_words = review.split() positive_count = sum(1 for word in review_words if word in positive_set) negative_count = sum(1 for word in review_words if word in negative_set) if positive_count > negative_count: sentiments.append(\\"Positive\\") elif negative_count > positive_count: sentiments.append(\\"Negative\\") else: sentiments.append(\\"Neutral\\") return sentiments"},{"question":"In an n x n grid, there are some barriers placed such that you cannot move through cells containing barriers. Each cell in the grid is either empty or contains a barrier. You can only move up, down, left, or right between adjacent cells and you cannot move diagonally. Given the grid and two points (sx, sy) and (ex, ey), determine the shortest number of steps required to move from the starting cell (sx, sy) to the ending cell (ex, ey), or determine that it is impossible to reach the destination. The first line of input contains two integers n and b (1 ≤ n ≤ 1000, 0 ≤ b < n^2) — the size of the grid and the number of barriers in the grid, respectively. Each of the next b lines contains two integers xi and yi (1 ≤ xi, yi ≤ n) — the coordinates of the ith barrier. It is guaranteed that the starting and ending points do not contain barriers. The next line contains two integers sx and sy (1 ≤ sx, sy ≤ n) — the starting point coordinates. The last line contains two integers ex and ey (1 ≤ ex, ey ≤ n) — the ending point coordinates. Output a single integer – the shortest number of steps required to move from the starting cell to the ending cell, or -1 if it is impossible to reach the destination. Example input: 5 4 1 2 3 3 4 4 2 5 1 1 5 5 Example output: 8","solution":"from collections import deque def shortest_path(n, b, barriers, start, end): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] sx, sy = start ex, ey = end grid = [[0] * n for _ in range(n)] for x, y in barriers: grid[x - 1][y - 1] = 1 queue = deque([(sx - 1, sy - 1, 0)]) # (x, y, steps) visited = set() visited.add((sx - 1, sy - 1)) while queue: x, y, steps = queue.popleft() if (x, y) == (ex - 1, ey - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a list of `n` integers indicating the ids of some papers in a plagiarism detection system. The system is supposed to detect duplicate papers by identifying papers that have the same ids. Write a program that finds out how many duplicate papers exist in the list and returns their ids in sorted order. The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of papers. The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^6) — the ids of the papers. Your task is to print the total number of duplicate papers, and then print the duplicate paper ids in ascending order. **Example 1:** Input: ``` 5 1 2 3 2 1 ``` Output: ``` 2 1 2 ``` **Explanation:** In the sample input, the paper ids 1 and 2 are duplicates. **Example 2:** Input: ``` 7 4 3 2 7 8 2 3 ``` Output: ``` 2 2 3 ``` **Explanation:** In the sample input, the paper ids 2 and 3 are duplicates. **Example 3:** Input: ``` 4 1 2 3 4 ``` Output: ``` 0 ``` **Explanation:** In the sample input, there are no duplicate paper ids.","solution":"def find_duplicates(n, paper_ids): Finds and returns duplicate paper ids in sorted order. Parameters: n (int): The number of papers. paper_ids (list): List of paper ids. Returns: tuple: Number of duplicates and list of duplicate ids sorted. from collections import Counter count = Counter(paper_ids) duplicates = [paper_id for paper_id, cnt in count.items() if cnt > 1] return (len(duplicates), sorted(duplicates)) # Example usage: # n = 5 # paper_ids = [1, 2, 3, 2, 1] # print(find_duplicates(n, paper_ids)) # Output: (2, [1, 2])"},{"question":"Ilya has been studying microbial cultures in a petri dish. He observed that the cultures tend to form clusters. To help him analyze the cluster patterns, Ilya decided to create a grid model of the petri dish, where each cell is either empty or contains a part of a culture. A cluster is defined as a group of adjacent cells (horizontally or vertically connected) that contain parts of the same culture. Two cells are considered adjacent if they share a common edge. Ilya needs to count the number of distinct clusters in the petri dish. The input consists of multiple test cases. The first line of the input contains an integer t (1 ≤ t ≤ 50), the number of test cases. Each test case begins with a line containing two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The next n lines each contain m characters, either \'.\' (representing an empty cell) or \'#\' (representing a part of a culture). For each test case, print the number of distinct clusters found in the grid. Example: Input: 2 3 3 #.# .#. #.# 4 5 ..# .#..# ... ... Output: 5 4 Explanation: In the first test case, there are 5 distinct clusters (each \'#\' is separate). In the second test case, there are 4 distinct clusters: - Cluster 1: the upper-left \\"\\". - Cluster 2: the single \'#\' at position (2,2). - Cluster 3: the lower-right \\"\\". - Cluster 4: the single \'#\' at position (4,1).","solution":"def count_clusters(t, test_cases): Counts the number of distinct clusters in the petri dishes described by test_cases. def dfs(grid, visited, x, y, n, m): stack = [(x, y)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'#\': visited[nx][ny] = True stack.append((nx, ny)) results = [] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] visited = [[False] * m for _ in range(n)] clusters = 0 for i in range(n): for j in range(m): if not visited[i][j] and grid[i][j] == \'#\': visited[i][j] = True dfs(grid, visited, i, j, n, m) clusters += 1 results.append(clusters) return results"},{"question":"You are given a collection of books, each with a distinct thickness and a specific height when placed on a shelf. Your task is to rearrange the books on the shelf to minimize the visual clutter caused by variations in book heights, without changing the order of the books. To achieve this, you need to organize the books into the fewest possible contiguous segments where in each segment the height of the books either only increases or only decreases. For instance, given a list of books, each represented by their height, you aim to partition this list into consecutive increasing or decreasing segments. Let\'s take the following sample list of book heights as an example: Height: [5, 6, 6, 7, 5, 4, 3, 8, 9, 7] In this case, the book heights can be organized into the following segments: - Segment 1: [5, 6, 6, 7] (increasing) - Segment 2: [7, 5, 4, 3] (decreasing) - Segment 3: [3, 8, 9] (increasing) - Segment 4: [9, 7] (decreasing) Your goal is to identify such segments and print their starting and ending indices, ensuring that the number of segments is minimized. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of books. - The second line contains `n` integers representing the heights of the books. # Output - Print each segment\'s starting and ending indices in 1-based indexing. Ensure that the segments are provided in the order they appear in the input list and that you minimize the number of segments. # Example Input 8 3 5 7 6 4 8 10 9 Output 1 3 4 5 6 7 8 8 (The books heights were organized into segments: [3, 5, 7] (increasing), [7, 6, 4] (decreasing), [4, 8, 10] (increasing), [10, 9] (decreasing)) Remarks While solving this problem, the condition on minimizing number of segments should primarily drive your approach. Focus on maintaining the order and ensuring segments are correctly partitioned as increasing or decreasing to meet criteria.","solution":"def partition_book_heights(heights): n = len(heights) if n == 1: return [(1, 1)] segments = [] start = 0 increasing = None for i in range(1, n): if heights[i] > heights[i - 1]: if increasing == False: segments.append((start + 1, i)) start = i increasing = True elif heights[i] < heights[i - 1]: if increasing == True: segments.append((start + 1, i)) start = i increasing = False else: continue segments.append((start + 1, n)) return segments"},{"question":"Sam is an explorer in the Kingdom of Matrixia. He has discovered ancient artifacts in the form of matrices. These matrices have special rules that determine their stability. A matrix is considered stable if the difference between the sum of elements in any row and the sum of elements in any column is the same across all rows and columns. Given an n times n matrix, determine if the matrix is stable. The first line contains a single integer n (1 leq n leq 500) — the size of the matrix. Each of the following n lines contains n integers a_{ij} (1 leq a_{ij} leq 10^9) — the elements of the matrix. Output \\"YES\\" (without quotes) if the matrix is stable, otherwise output \\"NO\\". # Example Input ``` 3 2 1 3 1 2 2 2 3 1 ``` Output ``` YES ``` Input ``` 2 1 2 3 4 ``` Output ``` NO ``` # Explanation In the first example, the sums of rows are [6, 5, 6] and the sums of columns are [5, 6, 6]. The difference between row sums and column sums are [1, -1, 0]. Since they are not equal, the matrix is not stable. In the second example, the sums of rows are [3, 7] and the sums of columns are [4, 6]. The differences between row sums and column sums are [-1, 1]. Since they are not equal, the matrix is not stable.","solution":"def is_stable_matrix(matrix): Determine if a matrix is stable. A matrix is stable if the difference between the sum of elements in any row and the sum of elements in any column is the same across all rows and columns. :param matrix: List of Lists of integers representing the matrix :return: \\"YES\\" if the matrix is stable, \\"NO\\" otherwise n = len(matrix) # Calculate sum of each row and store in row_sums row_sums = [sum(row) for row in matrix] # Calculate sum of each column and store in col_sums col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)] # Calculate the first difference between the sum of first row and the first column difference = row_sums[0] - col_sums[0] # Check if the difference is same for all rows and columns for i in range(1, n): if row_sums[i] - col_sums[i] != difference: return \\"NO\\" return \\"YES\\""},{"question":"Given a 2D grid of size n x m, you are required to find the number of unique connected components in the grid. Each cell in the grid can either be \'0\' (empty land) or \'1\' (part of a building). A connected component is formed by adjacent cells with value \'1\'. Two cells are considered adjacent if they share a side (horizontal or vertical). Write a function that takes in the dimensions of the grid (n and m) and the grid itself, and returns the number of unique connected components in the grid. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines contain m characters each (\'0\' or \'1\') representing the grid. # Output - Print a single integer, the number of unique connected components of \'1\'s in the grid. # Example Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` # Explanation In the example, there are three connected components: 1. The two \'1\'s in the first two rows, first two columns. 2. The single \'1\' in the third row, third column. 3. The two \'1\'s in the last row, last two columns.","solution":"def num_connected_components(n, m, grid): Returns the number of unique connected components of \'1\'s in the grid. def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'1\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) visited = [[False]*m for _ in range(n)] components = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: components += 1 visited[i][j] = True dfs(i, j) return components"},{"question":"You are given an array of integers `a` of length `n` and an integer `k`. Your task is to find the maximum sum of any continuous subarray of `a` with a length of exactly `k`. The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 2 times 10^5) — the length of the array and the required subarray length, respectively. The second line contains `n` space-separated integers a_1, a_2, ldots, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array `a`. Output the maximum sum of any continuous subarray of length `k`. # Example **Input:** ``` 5 3 1 2 3 4 5 ``` **Output:** ``` 12 ``` **Explanation:** The subarray with the maximum sum of length `k=3` is `[3, 4, 5]`, and its sum is `3 + 4 + 5 = 12`. Thus, the answer is `12`.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any continuous subarray of length k. Parameters: arr (list): List of integers. k (int): Length of subarray. Returns: int: Maximum sum of any continuous subarray of length k. n = len(arr) # Compute the sum of the first subarray of length k max_sum = current_sum = sum(arr[:k]) # Use a sliding window to compute the sums of the remaining subarrays for i in range(k, n): current_sum = current_sum + arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Implement a function \'merge_intervals\' that takes a list of intervals as input, where each interval is represented by a tuple (start, end). The function should merge all overlapping intervals and return a list of the merged intervals, sorted by the start time. For example, given the input [(1, 3), (2, 6), (8, 10), (15, 18)], the function should return [(1, 6), (8, 10), (15, 18)] as the intervals (1, 3) and (2, 6) overlap and should be merged into (1, 6). Your solution must handle cases where the input list is empty, or contains only one interval, in which case, the function should return the same list. Your code should have the following signature: ```python def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ```","solution":"from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Merges all overlapping intervals and returns a list of merged intervals sorted by the start time. Args: intervals (List[Tuple[int, int]]): A list of intervals represented by tuples (start, end) Returns: List[Tuple[int, int]]: A list of non-overlapping merged intervals sorted by start time. if not intervals: return [] # Sort intervals by start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] if current[0] <= last_merged[1]: merged[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged.append(current) return merged"},{"question":"An e-commerce company tracks the sales of its products using a daily log record. The sales data for each product is represented as a list of integers, where each integer corresponds to the number of units sold on a particular day. The company wants to identify their best-selling product over a given period, which is defined as the product with the highest total sales during that period. Write a program that takes as input the number of products and their daily sales records, and outputs the product ID of the best-selling product. # Input - The first line contains a single integer, `n` (1 ≤ n ≤ 100), the number of products. - The second line contains a single integer, `d` (1 ≤ d ≤ 365), the number of days in the sales record. - Each of the next `n` lines contains `d` space-separated integers representing the daily sales record of a product. # Output - Output the product ID (1-based index) of the product with the highest total sales. If there are multiple products with the same total sales, output the smallest product ID. # Examples Example 1 **Input:** ``` 3 5 10 20 30 40 50 5 10 15 20 25 15 15 15 15 15 ``` **Output:** ``` 1 ``` Example 2 **Input:** ``` 2 3 7 8 9 10 10 10 ``` **Output:** ``` 2 ``` Example 3 **Input:** ``` 4 4 5 5 5 5 2 2 2 2 5 5 5 5 1 1 1 1 ``` **Output:** ``` 1 ```","solution":"def best_selling_product(n, d, sales_records): Identifies the best-selling product based on the sales records. Parameters: n (int): Number of products. d (int): Number of days in the sales records. sales_records (List[List[int]]): A list of lists where each inner list contains the daily sales of a product. Returns: int: The product ID (1-based index) of the best-selling product. max_sales = -1 best_product_id = -1 for i in range(n): total_sales = sum(sales_records[i]) if total_sales > max_sales: max_sales = total_sales best_product_id = i + 1 elif total_sales == max_sales and i + 1 < best_product_id: best_product_id = i + 1 return best_product_id # Helper function for handling input and output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) d = int(data[1]) sales_records = [] index = 2 for i in range(n): sales_records.append(list(map(int, data[index:index + d]))) index += d print(best_selling_product(n, d, sales_records))"},{"question":"CodeMaster is trying to become proficient with arrays. One day, he came across a problem that involves manipulating an array of integers. Given an array of integers, CodeMaster needs to find the maximum possible sum of any non-empty subarray (contiguous elements) of the array. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4) — the elements of the array. Output a single integer — the maximum sum of any non-empty subarray of the given array. In the first test case, the subarray with the maximum sum is [4, -1, 2, 1], which sums to 6. In the second test case, the only possible subarray is [−1], which sums to −1. Thus, the maximum sum is -1. In the third test case, the subarray with the maximum sum is [24, -3, 29], which sums to 50.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty subarray of the given array. max_so_far, max_ending_here = arr[0], arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a grid of size n times n with some cells blocked. The grid cells are numbered from (1, 1) to (n, n). You can only move right or down from a cell to an adjacent one, provided the target cell is not blocked. Your task is to determine the number of distinct paths from the top-left corner (1, 1) to the bottom-right corner (n, n). The grid is represented as follows: - A cell containing a \'0\' is unblocked. - A cell containing a \'1\' is blocked. The first line contains a single integer n (1 le n le 100) — the size of the grid. Each of the following n lines contains n characters (either \'0\' or \'1\') — the grid description. Output a single integer — the number of distinct paths modulo 10^9 + 7. If no path exists, output \\"0\\". # Example Input: ``` 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` In this example, there are two distinct paths from the top-left to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(n, grid): MOD = 10**9+7 if grid[0][0] == \'1\' or grid[n-1][n-1] == \'1\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][n-1]"},{"question":"You are given an undirected graph consisting of n vertices and m edges. Each edge has a positive integer weight. Your task is to find a spanning tree for this graph with a special constraint: the product of its weights should be minimal. The first line of the input contains two space-separated integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) — the number of vertices and edges, respectively. Each of the following m lines describes an edge and contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), where u and v are the endpoints of the edge and w is its weight. Output the minimum product of weights of all the edges in the spanning tree. If there are multiple spanning trees with the same product, print any of them in the following format: Output the total weight of the spanning tree on one line. Then print the edges of the spanning tree, each on a new line in the form u v w. If there is no spanning tree, output -1. Example: Input: 4 5 1 2 1 1 3 2 1 4 3 2 3 4 3 4 5 Output: 6 1 2 1 1 3 2 1 4 3 Explanation: In the example, the graph has 4 vertices and 5 edges. The minimum spanning tree with the minimal product of weights can be formed by picking edges (1, 2) with weight 1, (1, 3) with weight 2, and (1, 4) with weight 3. The total weight is 1*2*3 = 6.","solution":"def find_min_spanning_tree_product(n, m, edges): Finds the minimum product of weights of edges in the spanning tree of the graph. if n == 1: return 0, [] import heapq from collections import defaultdict adj = defaultdict(list) for u, v, w in edges: adj[u].append((w, v)) adj[v].append((w, u)) visited = set() min_heap = [(0, 1, -1)] # (weight, current_vertex, parent_vertex) total_weight = 0 result_edges = [] while len(visited) < n and min_heap: weight, current, parent = heapq.heappop(min_heap) if current in visited: continue visited.add(current) if parent != -1: result_edges.append((parent, current, weight)) total_weight += weight for next_weight, neighbor in adj[current]: if neighbor not in visited: heapq.heappush(min_heap, (next_weight, neighbor, current)) if len(visited) == n: prod = 1 for edge in result_edges: prod *= edge[2] return prod, result_edges else: return -1, [] # Utility function to parse the input and call the function def parse_input_and_find_min_spanning_tree_product(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [] for i in range(1, m + 1): u, v, w = map(int, lines[i].split()) edges.append((u, v, w)) return find_min_spanning_tree_product(n, m, edges)"},{"question":"You are given a list of `n` integers representing a sequence of card values. The goal is to partition the sequence into one or more contiguous parts such that each part is a palindromic sequence, which means it reads the same forward and backward. Each card can only belong to one part. Write a program to determine the minimum number of parts the original sequence can be split into to form palindromic sub-sequences. The first line contains one integer `n` (1 ≤ n ≤ 5000) — the number of cards. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the values on the cards. Output a single integer — the minimum number of palindromic parts the sequence can be split into. **Example:** Input: ``` 7 1 2 3 2 1 4 4 ``` Output: ``` 2 ``` In the example above, one possible way to split the sequence is `[1, 2, 3, 2, 1]` and `[4, 4]`, both of which are palindromic sequences. Thus, the minimum number of parts is 2.","solution":"def min_palindromic_parts(n, sequence): Returns the minimum number of palindromic subsequences the given sequence can be split into. dp = [0] * n for i in range(n): min_parts = i + 1 for j in range(i + 1): if sequence[j:i + 1] == sequence[j:i + 1][::-1]: min_parts = min(min_parts, (dp[j - 1] if j > 0 else 0) + 1) dp[i] = min_parts return dp[-1]"},{"question":"Emily is training for a triathlon which consists of three stages: swimming, cycling, and running. Each stage is conducted on a different day and each requires a specific number of hours for training. Emily wants to create a balanced training schedule such that the total number of hours she trains per day over a period of `d` days is minimized, while still meeting her total number of required training hours for each stage. Each stage has a requirement of `s`, `c`, and `r` hours for swimming, cycling, and running respectively. Emily can decide how many hours to allocate for each stage on any given day, as long as the training plan covers the required hours for each stage. Given the number of days `d`, and the total training hours required for swimming `s`, cycling `c`, and running `r`, determine the minimum number of total hours she needs to train each day if she perfectly balances her schedule. # Input Format The first and only line contains four space-separated integers: `d` (1 ≤ d ≤ 1000), `s` (0 ≤ s ≤ 10000), `c` (0 ≤ c ≤ 10000), `r` (0 ≤ r ≤ 10000). # Output Format Print a single integer — the minimum number of total training hours Emily needs to train per day. # Example **Input:** ``` 5 10 15 20 ``` **Output:** ``` 9 ``` In this example, Emily needs to distribute her training hours for swimming, cycling, and running over 5 days. The total training hours required are 10 for swimming, 15 for cycling, and 20 for running, which sums up to 45 hours. Over 5 days, the minimum number of total training hours per day is 9 (since 45 divided by 5 equals 9).","solution":"def minimum_training_hours_per_day(d, s, c, r): Returns the minimum number of total training hours Emily needs to train per day to perfectly balance her schedule over `d` days. :param d: Number of days :param s: Total training hours required for swimming :param c: Total training hours required for cycling :param r: Total training hours required for running :return: Minimum number of total training hours per day. total_hours = s + c + r return (total_hours + d - 1) // d # Ceiling of total_hours / d"},{"question":"John is working on a project to analyze stock prices. Given the stock prices of a company for the last n days, he wants to determine the largest difference between the stock prices on any two different days such that the higher price comes after the lower one. The first line of the input contains a single integer n (2 ≤ n ≤ 100,000) — the number of days. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1,000,000) — the stock prices on each day. Print the maximum possible profit you can achieve. If no profit can be achieved, print \\"NO PROFIT\\" (without quotes). # Example **Input:** ``` 6 3 1 4 1 5 9 ``` **Output:** ``` 8 ``` **Explanation:** The maximum possible profit is 8, which can be achieved by buying on day 2 (price 1) and selling on day 6 (price 9). **Input:** ``` 4 7 6 4 3 ``` **Output:** ``` NO PROFIT ``` **Explanation:** No profit can be achieved in this case as the stock prices decrease every day.","solution":"def max_profit(prices): Calculates the maximum profit that can be achieved from a list of stock prices. If no profit can be achieved, returns \\"NO PROFIT\\". :param prices: List of integers representing stock prices. :return: Maximum possible profit or \\"NO PROFIT\\" n = len(prices) # Initialize variables min_price = prices[0] max_profit = 0 # Traverse through the stock prices for price in prices[1:]: # Update max profit if current price minus min_price is greater max_profit = max(max_profit, price - min_price) # Update min price min_price = min(min_price, price) # Check if a profit was possible if max_profit > 0: return max_profit else: return \\"NO PROFIT\\""},{"question":"You are given an integer array `a` of length `n` and a series of `m` queries. Each query can either update an element of the array to a given value or ask for the minimum value in a subarray. Specifically, you need to implement two types of operations: 1. Update operation: Given three integers `1`, `i`, and `x`, update the element at index `i` to `x`. 2. Minimum query operation: Given three integers `2`, `l`, and `r`, find and print the minimum value in the subarray from index `l` to `r` (inclusive). The input format is as follows: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 300000), the length of the array and the number of queries respectively. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) representing the initial array `a`. - Each of the next `m` lines describes a single query in one of the two formats: `1 i x` or `2 l r`. For each query of the second type, your program should output the minimum value on a new line. Consider the following input: ``` 5 5 5 3 8 6 2 2 1 5 1 3 1 2 1 3 1 5 7 2 4 5 ``` The expected output should be: ``` 2 1 2 ``` Explanation: 1. The first query asks for the minimum value in the entire array `[5, 3, 8, 6, 2]`, which is `2`. 2. The second query updates the value at index `3` to `1`, resulting in the array `[5, 3, 1, 6, 2]`. 3. The third query asks for the minimum value in the subarray `[5, 3, 1]`, which is `1`. 4. The fourth query updates the value at index `5` to `7`, resulting in the array `[5, 3, 1, 6, 7]`. 5. The fifth query asks for the minimum value in the subarray `[6, 7]`, which is `6`. To solve this problem efficiently, you may want to use a data structure that supports both point updates and range minimum queries efficiently, such as a Segment Tree or a Fenwick Tree.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the segment tree # Populate the leaves of the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Calculate parents for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): # Update the element at index to value # index is 0 based pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_min_query(self, left, right): # Query for the range [left, right) # left and right are 0 based res = float(\'inf\') left += self.n right += self.n while left < right: if left % 2: res = min(res, self.tree[left]) left += 1 if right % 2: right -= 1 res = min(res, self.tree[right]) left //= 2 right //= 2 return res def process_queries(n, m, initial_array, queries): seg_tree = SegmentTree(initial_array) results = [] for query in queries: if query[0] == 1: seg_tree.update(query[1] - 1, query[2]) elif query[0] == 2: results.append(seg_tree.range_min_query(query[1] - 1, query[2])) return results # Example usage # n, m = 5, 5 # initial_array = [5, 3, 8, 6, 2] # queries = [ # [2, 1, 5], # [1, 3, 1], # [2, 1, 3], # [1, 5, 7], # [2, 4, 5] # ] # print(process_queries(n, m, initial_array, queries)) # Output: [2, 1, 6]"},{"question":"You are engaged to help manage money donations for a charity event. The event has been organized to receive donations from n potential donors. You are provided with a list where each element represents the amount of money donated by each donor. The organizers always want to ensure that the total amount of donations is maximized without accepting donations from adjacent donors to ensure varied contributions. Given a list of integers, determine the maximum sum that can be obtained by accepting donations such that no two accepted donations come from adjacent donors. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of donors. The second line contains n space-separated integers representing the amount of money donated by each donor. Each integer is between 0 and 1000 inclusive. Output a single integer which is the maximum sum of donations ensuring that no two donations are from adjacent donors. For example, for the input: 6 5 1 2 10 6 2 The output should be: 17 Explanation: One possible selection to maximize donations without choosing from adjacent donors is 5 + 10 + 2 = 17.","solution":"def max_donations(donations): Determines the maximum sum of money obtained by accepting donations such that no two accepted donations come from adjacent donors. Parameters: donations (list of int): List of donations from n donors Returns: int: Maximum sum of non-adjacent donations if not donations: return 0 n = len(donations) if n == 1: return donations[0] # dp[i] will store the max donation sum we can get by considering first i donations dp = [0] * n dp[0] = donations[0] dp[1] = max(donations[0], donations[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + donations[i]) return dp[-1]"},{"question":"Alice is an artist who loves creating mosaics. Recently, she became fascinated with a mathematical concept called \\"tiling\\". A tiling is a way of covering a rectangular grid using smaller rectangles (tiles) without overlapping. Alice wants to know in how many different ways she can tile a 2 x n grid using 2 x 1 tiles and 2 x 2 tiles. For instance, if n = 3, the grid looks like this initially: ``` ** ** ** ** ** ** ** ** ``` Alice can tile it in the following ways: - Three 2 x 1 tiles placed vertically. - One 2 x 2 tile and one 2 x 1 tile placed vertically. - One 2 x 1 tile placed vertically and one 2 x 2 tile. Help Alice determine the number of distinct tiling ways for a given n. The first line contains an integer n (1 ≤ n ≤ 106). Print the number of distinct ways to tile a 2 x n grid using the given tiles. In the first example, for n = 3, the output would be 3. In the second example, for n = 4, the possible ways to tile the grid increase significantly.","solution":"def count_ways_to_tile_2xn(n): Count the number of distinct ways to tile a 2 x n grid using 2 x 1 and 2 x 2 tiles. Parameters: n (int): the length of the grid (1 ≤ n ≤ 10^6) Returns: int: the number of ways to tile the grid if n == 1: return 1 elif n == 2: return 2 # Initialize base cases dp = [0] * (n + 1) dp[1] = 1 dp[2] = 2 # Fill dp array using bottom-up approach for i in range(3, n + 1): dp[i] = dp[i-1] + dp[i-2] return dp[n]"},{"question":"Given an array of `n` non-negative integers, you are required to modify it such that each element in the array is equal to the sum of its unique prime factors. If an element is zero or one, it should remain unchanged in the array. For example: - The unique prime factors of 6 (which are 2 and 3) sum to 5. - For 10, the unique prime factors (2 and 5) sum to 7. - 1 remains 1 as it has no prime factors. Your task is to implement a function that will transform the array as described. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains `n` non-negative integers separated by spaces, which are the elements of the array. # Output - Output a single line containing `n` integers — the elements of the modified array. # Example Input ``` 5 6 10 15 1 0 ``` Output ``` 5 7 8 1 0 ``` # Explanation - For 6: The unique prime factors are {2, 3}, and their sum is 5. - For 10: The unique prime factors are {2, 5}, and their sum is 7. - For 15: The unique prime factors are {3, 5}, and their sum is 8. - 1 remains unchanged as 1. - 0 remains unchanged as 0. # Note - Consider using an efficient algorithm to find the prime factors due to the potentially large size of `n` and elements in the array. Precomputation methods for prime factors, such as Sieve of Eratosthenes, might be helpful.","solution":"def sum_of_unique_prime_factors(n, arr): Returns a new array where each element is replaced by the sum of its unique prime factors. Parameters: n : int : the number of elements in the array arr : list : the list of n non-negative integers Returns: list : the modified array where each element is replaced by the sum of its unique prime factors # Helper function to get prime factors using Sieve of Eratosthenes def sieve_prime_factors(max_num): sieve = [[] for _ in range(max_num + 1)] for i in range(2, max_num + 1): if not sieve[i]: for j in range(i, max_num + 1, i): sieve[j].append(i) return sieve max_element = max(arr) prime_factors = sieve_prime_factors(max_element) result = [] for number in arr: if number == 0 or number == 1: result.append(number) else: result.append(sum(prime_factors[number])) return result"},{"question":"Peter\'s neighbor, Linus, enjoys building unique fence designs for his garden. Linus has n wooden planks of different heights and he wants to use all the planks to build the fence. The beauty of the fence is calculated by the number of pairs of adjacent planks that have different heights. Linus isn\'t interested in just any arrangement; he specifically wants to rearrange the planks so that the resulting fence maximizes its beauty. You are given an array of integers where each integer represents the height of a plank. Your task is to find an arrangement of the planks that maximizes the beauty of the fence, and if there are multiple arrangements that yield the same maximum beauty, any of them will be considered correct. # Input - The first line contains an integer n (2 ≤ n ≤ 100000) — the number of wooden planks. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the wooden planks. # Output Output any rearrangement of the planks in which the beauty of the fence is maximized. # Examples Example 1: # Input ``` 5 1 1 2 2 3 ``` # Output ``` 1 2 1 3 2 ``` Example 2: # Input ``` 6 1 3 3 3 3 4 ``` # Output ``` 3 1 3 4 3 3 ``` # Note In the first example, the output sequence `1 2 1 3 2` has 4 pairs of adjacent planks with different heights: `(1,2), (2,1), (1,3), (3,2)`. This is the maximum beauty that can be achieved. Another correct answer could be `2 1 2 3 1`. In the second example, the output sequence `3 1 3 4 3 3` has 4 pairs of adjacent planks with different heights: `(3,1), (1,3), (3,4), (4,3)`. This is the maximum beauty and other such rearrangements could exist.","solution":"from collections import Counter def maximize_beauty(n, heights): def interleave(l1, l2): result = [] i, j = 0, 0 len1, len2 = len(l1), len(l2) while i < len1 and j < len2: result.append(l1[i]) result.append(l2[j]) i += 1 j += 1 result.extend(l1[i:]) result.extend(l2[j:]) return result height_counts = Counter(heights) common_height = height_counts.most_common(1)[0][0] less_common_heights = [height for height in heights if height != common_height] less_common_heights.sort() common_height_list = [common_height] * height_counts[common_height] rearranged = interleave(common_height_list, less_common_heights) return rearranged"},{"question":"You are given a list of integers representing the heights of buildings on a street. The city planning department wants to conduct an aesthetic analysis on the skyline profile of these buildings to see if it meets a valley pattern. A list of heights forms a valley if it increases, then decreases, such that each building in the sequence is either taller, the same height, or shorter than its predecessor, adhering to an initial strictly increasing part followed by a strictly decreasing part. Given the list of building heights, determine if the building heights form a valley. The sequence should have at least one building in the increasing part and one building in the decreasing part, and should not be constant for either part. Your task is to write a program that reads the heights of n buildings and prints \\"YES\\" if the heights form a valley, otherwise prints \\"NO\\". Input: The first line contains an integer n (3 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the buildings. Output: Print \\"YES\\" if the sequence of heights forms a valley, otherwise print \\"NO\\". Example 1: Input: 5 2 3 5 4 1 Output: YES Example 2: Input: 4 7 5 3 1 Output: NO Example 3: Input: 3 1 1 1 Output: NO","solution":"def is_valley(heights): n = len(heights) if n < 3: return \\"NO\\" i = 1 # find the increasing part while i < n and heights[i] > heights[i - 1]: i += 1 if i == 1 or i == n: return \\"NO\\" # find the decreasing part while i < n and heights[i] < heights[i - 1]: i += 1 if i == n: return \\"YES\\" else: return \\"NO\\""},{"question":"Bob is an amateur gardener known for his love of colorful flowers. He has a garden divided into a grid of cells, each cell capable of supporting one flower. To make his garden vibrant and colorful, Bob wants to plant flowers in the grid such that no two adjacent cells contain flowers of the same color. Help Bob plan his garden by determining an appropriate flower arrangement. You are given an ( n times m ) garden grid, where each cell of the grid can be initially empty (denoted as \'.\'). Bob has two types of flowers, denoted by \'R\' (Red) and \'B\' (Blue). The goal is to fill the garden grid such that no two adjacent cells (horizontally or vertically) contain flowers of the same color. Write a program to check if it is possible to achieve such a configuration given the grid dimensions. If possible, print any valid configuration. If it is not possible, print \\"NO\\". # Input - The first line contains two integers ( n ) and ( m ) (1 ≤ ( n ), ( m ) ≤ 1000) — the number of rows and columns of the garden grid. # Output - If it is possible to fill the grid as required, print \\"YES\\" and then print the grid. Each of the next ( n ) lines should contain ( m ) characters representing the grid. Each character should be either \'R\' or \'B\'. - If it is not possible to fill the grid as required, print \\"NO\\". # Examples Example 1 **Input:** ``` 3 3 ``` **Output:** ``` YES RBR BRB RBR ``` Example 2 **Input:** ``` 2 2 ``` **Output:** ``` YES RB BR ``` Example 3 **Input:** ``` 1 1 ``` **Output:** ``` YES R ``` Example 4 **Input:** ``` 4 4 ``` **Output:** ``` YES RBRB BRBR RBRB BRBR ``` # Note In Example 1, the grid configuration RBR, BRB, RBR satisfies the condition of having no two adjacent cells with the same color. Similarly, other examples show valid configurations. Each output provides one possible valid configuration that Bob can use to plant his flowers.","solution":"def plan_garden(n, m): Determines a valid flower arrangement for an n x m garden grid. Parameters: n (int): number of rows m (int): number of columns Returns: str: \\"YES\\" followed by the grid configuration if possible, otherwise \\"NO\\". result = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'R\') else: row.append(\'B\') result.append(\\"\\".join(row)) return \\"YESn\\" + \\"n\\".join(result) # Example usage # n, m = 3, 3 # print(plan_garden(n, m))"},{"question":"Given an array of integers, find the sum of all subarrays of the array. A subarray is defined as a contiguous part of the array. For example, an array of four elements has ten subarrays. The first line of the input contains a single integer n (1 ≤ n ≤ 2000) — the length of the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 1000) — the elements of the array. Output the sum of the sums of all subarrays of the given array. In the first example, there are 3 subarrays: [1], [2], [1, 2]. The sum of their sums is 1 + 2 + (1 + 2) = 6. In another example, the subarrays are: [3], [-1], [4], [3, -1], [-1, 4], [3, -1, 4]. Their sums are 3, -1, 4, 2, 3, 6 and the total sum is 3 + (-1) + 4 + 2 + 3 + 6 = 17.","solution":"def sum_of_subarray_sums(n, arr): Returns the sum of all subarray sums of the given array. total_sum = 0 for i in range(n): subarray_sum = 0 for j in range(i, n): subarray_sum += arr[j] total_sum += subarray_sum return total_sum # Example usage: # n = 3 # arr = [1, 2, 3] # print(sum_of_subarray_sums(n, arr)) # Output should be 20"},{"question":"Given a pet shelter with various types of animals, each animal in the shelter can be uniquely defined by the kind of animal it is and a series of personality traits it possesses. Each kind of animal is identified by an integer ID (1 ≤ ID ≤ 1,000) and each personality trait is defined as a string. You need to determine the number of unique animals based on their kind and personality trait combinations. You are given: - An integer n (1 ≤ n ≤ 10,000) representing the total number of animals. - A list of n entries, where each entry consists of an animal kind ID followed by a list of personality traits. Consider two animals as different if either their kind IDs are different or the list of their personality traits differs. Each personality trait string length is up to 20 characters, and each animal can have between 1 and 10 personality traits. Output the number of unique animals in the shelter. # Input: - The first line contains the integer n. - Each of the next n lines contains an integer ID, followed by a list of space-separated personality traits. # Output: - Print a single integer representing the number of unique animals. # Example: ``` Input: 5 1 playful loyal 2 quiet friendly 1 playful friendly 3 aggressive shy 2 quiet friendly Output: 4 ``` # Explanation: - The first and third animals have the same kind ID (1) but different traits, so they are unique. - The second and last animals have the same kind ID (2) and the same traits, so they are not unique (count as one). - There are 4 unique animals in total.","solution":"def count_unique_animals(n, animal_list): unique_animals = set() for animal in animal_list: animal_id = animal[0] traits = tuple(animal[1:]) unique_animals.add((animal_id, traits)) return len(unique_animals)"},{"question":"In a large software company, there is a complex file dependency system. The system consists of `n` files and `m` dependencies between them. Each dependency is a directed edge from one file to another, meaning that the target file depends on the source file. To manage the system efficiently, the company needs to find out the minimum number of files they need to update in order to ensure that all possible updates are propagated throughout the system. Specifically, they want to identify the smallest set of initial files to update such that all files in the system will eventually be updated by propagating changes through the dependencies. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of files and the number of dependencies, respectively. Each of the next `m` lines contains two space-separated integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — indicating a dependency from file `u` to file `v`. Print a single integer — the minimum number of files that need to be initially updated. For example: Input: ``` 5 4 1 2 2 3 4 5 5 3 ``` Output: ``` 2 ``` Explanation: In this example, to ensure that all files are updated, we can start updating file 1 and file 4. This will propagate updates to all files in the system. Specifically, updating file 1 will propagate updates to file 2, which will further propagate to file 3. Similarly, updating file 4 will propagate updates to file 5, which will also propagate to file 3. Thus, all files will be updated starting from these two files.","solution":"def min_initial_updates(n, m, dependencies): from collections import defaultdict, deque # Building the graph representation and in-degree count graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Find all nodes with 0 in-degree zero_in_degree = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) # The number of initially updated files is the count of nodes with 0 in-degree return len(zero_in_degree)"},{"question":"The Quantum Computer company has developed a new type of quantum processor that can manipulate qubits in innovative ways. One of the standard operations they i implement is to create entanglement among a given number of qubits. In particular, they need a function that simulates how qubits get entangled using the CNOT (Controlled-NOT) operation in a tandem sequence. The process begins with generating a Bell pair (an entangled state of two qubits). Given an even number of qubits, the goal is to entangle each adjacent pair of qubits using the Bell pair method: that is, the first qubit acts as the control, and the second as the target in the CNOT operation; this pattern continues for each subsequent pair. Your task is to write a function that simulates this entanglement process and produces the final state of each pair of qubits. # Function Signature ```python def entangle_qubits(n: int) -> List[str]: ``` Input: - `n` (1 <= n <= 8): The number of qubits, guaranteed to be even. Output: - A list of strings where each string represents the final state of a pair of qubits after entanglement. Example: ```python assert entangle_qubits(4) == [\'Bell Pair (0, 1)\', \'Bell Pair (2, 3)\'] assert entangle_qubits(2) == [\'Bell Pair (0, 1)\'] assert entangle_qubits(6) == [\'Bell Pair (0, 1)\', \'Bell Pair (2, 3)\', \'Bell Pair (4, 5)\'] ``` Explanation: - For 4 qubits, qubits 0 and 1 form a Bell pair, and qubits 2 and 3 form another Bell pair. - For 6 qubits, qubits 0 and 1 form the first Bell pair, 2 and 3 form the second Bell pair, and 4 and 5 form the third Bell pair. - The Bell Pair (i, j) is a string representation to indicate that qubits i and j are entangled.","solution":"from typing import List def entangle_qubits(n: int) -> List[str]: Returns a list of strings where each string represents the final state of a pair of qubits after entanglement. Parameters: n (int): The number of qubits, guaranteed to be even (1 <= n <= 8). Returns: List[str]: The list of strings representing each Bell pair formed. bell_pairs = [] for i in range(0, n, 2): bell_pairs.append(f\'Bell Pair ({i}, {i+1})\') return bell_pairs"},{"question":"You have been given a log file containing a list of system events. Each event is characterized by a timestamp, the ID of the user who triggered the event, a type denoting whether the event was a login or logout, and an event description. Your task is to implement a server-side script to parse the log file and determine the maximum number of simultaneous users logged into the system at any given point in time. The input will be given in the following format: - The first line contains a single integer n (1 <= n <= 10^5) — the number of events. - Each of the next n lines contains a string representing the timestamp, followed by an integer user ID, followed by the event type (\'login\' or \'logout\'), followed by the event description. The timestamp is in the format \\"YYYY-MM-DD HH:MM:SS\\". Your output should be a single integer representing the maximum number of users logged in simultaneously. Example: Input: ``` 6 2023-01-01 08:00:00 1 login User1 logged in from IP 192.168.1.2 2023-01-01 08:10:00 2 login User2 logged in from IP 192.168.1.3 2023-01-01 08:30:00 1 logout User1 logged out 2023-01-01 09:00:00 1 login User1 logged in from IP 192.168.1.2 2023-01-01 09:15:00 2 logout User2 logged out 2023-01-01 09:30:00 1 logout User1 logged out ``` Output: ``` 2 ``` Explanation: - At 08:00:00, User1 logs in. Simultaneous users logged in: 1 - At 08:10:00, User2 logs in. Simultaneous users logged in: 2 (Maximum so far) - At 08:30:00, User1 logs out. Simultaneous users logged in: 1 - At 09:00:00, User1 logs in. Simultaneous users logged in: 2 (Matches previous maximum) - At 09:15:00, User2 logs out. Simultaneous users logged in: 1 - At 09:30:00, User1 logs out. Simultaneous users logged in: 0 Thus, the maximum number of users logged in simultaneously at any given point is 2.","solution":"def max_simultaneous_users(logs): Returns the maximum number of simultaneous users logged in at any given point in time. import heapq from collections import defaultdict n = int(logs[0]) events = [] # Parse logs for i in range(1, n + 1): parts = logs[i].split() timestamp = parts[0] + \' \' + parts[1] user_id = int(parts[2]) event_type = parts[3] if event_type == \'login\': events.append((timestamp, 1)) elif event_type == \'logout\': events.append((timestamp, -1)) # Sort events by timestamp events.sort() max_users = 0 current_users = 0 # Traverse events and find the maximum number of simultaneous users for event in events: current_users += event[1] max_users = max(max_users, current_users) return max_users"},{"question":"In a magical kingdom, there are n cities connected by m bidirectional roads. Each road has a certain length. The roads are arranged such that there is at least one way to travel between any two cities. A powerful wizard has decided to make travel faster by providing portals. A portal can directly connect any two cities, allowing instant travel between them. The wizard wants to place the minimal number of portals so that the travel distance between the most distant pair of cities is minimized. Your task is to find out the distance between the most distant pair of cities after placing the minimal number of portals required to achieve the minimized maximum travel distance. The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ n(n-1)/2) — the number of cities and the number of roads. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — indicating there is a road between city u and city v with a length of w. Print a single integer — the minimized maximum travel distance between the most distant pair of cities after placing the minimal number of portals. Example input: ``` 4 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` Example output: ``` 3 ``` Explanation: The cities are connected in a cycle. By analyzing the distance between the most distant pair of cities before adding any portals, we determine that the diameter of the graph is initially 4 (between city 1 and city 4). By adding a portal between cities 1 and 3, we reduce the longest distance in the city network to 3.","solution":"def floyd_warshall(n, graph): # Initialize distance matrix with infinity dist = [[float(\'inf\')] * n for _ in range(n)] # Initialize distances to themselves as zero for i in range(n): dist[i][i] = 0 # Initialize distances based on the graph edges for u in range(n): for v in range(n): if graph[u][v] != float(\'inf\'): dist[u][v] = graph[u][v] # Apply Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def minimize_max_travel_distance(n, m, roads): graph = [[float(\'inf\')] * n for _ in range(n)] for u, v, w in roads: u -= 1 # convert to 0-based index v -= 1 # convert to 0-based index graph[u][v] = w graph[v][u] = w # Using Floyd-Warshall algorithm to find all pairs shortest paths dist = floyd_warshall(n, graph) # Find the current maximum distance in the shortest path matrix max_distance = 0 for i in range(n): for j in range(n): if dist[i][j] < float(\'inf\') and dist[i][j] > max_distance: max_distance = dist[i][j] # Try to minimize the maximum distance by adding one portal minimized_max_distance = max_distance for i in range(n): for j in range(i + 1, n): if dist[i][j] == max_distance: direct_connection = graph[i][j] for k in range(n): if k != i and k != j: minimized_max_distance = min(minimized_max_distance, max(dist[i][k], dist[k][j])) minimized_max_distance = min(minimized_max_distance, max(dist[j][k], dist[k][i])) return minimized_max_distance def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) roads = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) roads.append((u, v, w)) index += 3 result = minimize_max_travel_distance(n, m, roads) print(result)"},{"question":"Alex loves playing with arrays. Given an array of n integers and an integer value T, he wants to figure out the count of unique subarrays of the given array where the sum of the elements is exactly T. Your task is to help Alex by writing a program that calculates the count of such unique subarrays. Consider two subarrays different if they start or end at a different position in the array, even if they contain the same elements. The first line contains two integers n and T (1 ≤ n ≤ 10^5, -10^9 ≤ T ≤ 10^9). The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Print a single integer — the total number of unique subarrays where the sum of the elements is exactly T. If no such subarray exists, print 0.","solution":"def count_unique_subarrays_with_sum_T(n, T, arr): Returns the count of unique subarrays where the sum of the elements is exactly T. prefix_sum_count = {} prefix_sum = 0 count = 0 for num in arr: prefix_sum += num if prefix_sum == T: count += 1 if (prefix_sum - T) in prefix_sum_count: count += prefix_sum_count[prefix_sum - T] if prefix_sum in prefix_sum_count: prefix_sum_count[prefix_sum] += 1 else: prefix_sum_count[prefix_sum] = 1 return count"},{"question":"Hunter recently became interested in prime numbers and even more interested in prime factorization. A prime factorization of a number ( x ) is representation of ( x ) as a product of prime numbers. Given an integer ( n ) (( 2 leq n leq 10^8 )), Hunter wants to know how many distinct prime numbers are there in the prime factorization of ( n ). Write a program that, given this integer ( n ), returns the number of distinct primes in its factorization. # Input - The input consists of a single integer ( n ) (( 2 leq n leq 10^8 )). # Output - Output a single integer that is the number of distinct prime numbers in the prime factorization. # Example Input 1: ``` 12 ``` Output 1: ``` 2 ``` Explanation: The prime factorization of 12 is ( 2^2 times 3 ), hence there are 2 distinct prime factors: 2 and 3. Input 2: ``` 7 ``` Output 2: ``` 1 ``` Explanation: The number 7 is a prime itself, hence there\'s only 1 distinct prime factor.","solution":"def count_distinct_prime_factors(n): Return the number of distinct prime numbers in the prime factorization of n. distinct_primes = set() # Check for number of 2s in n while n % 2 == 0: distinct_primes.add(2) n //= 2 # n must be odd at this point. So we can skip one element (i.e., we can step by 2) for i in range(3, int(n**0.5) + 1, 2): # While i divides n, add i and divide n while n % i == 0: distinct_primes.add(i) n //= i # This condition is to check if n is a prime number greater than 2 if n > 2: distinct_primes.add(n) return len(distinct_primes)"},{"question":"In a post-apocalyptic world, communication between groups of survivors is crucial for their survival. They communicate via a network of old servers connected in a specific way. The network can be represented as a directed graph where nodes represent servers and edges represent one-way communication channels between them. However, due to the nature of the world, not all servers have a direct channel to others. To keep the network robust, they want to ensure that there exists a certain communication channel called a Strongly Connected Component (SCC), where every server can communicate with every other server in the component either directly or indirectly. Your task is to find the largest SCC in the network. If there are multiple SCCs with the same size, return any one of them. The first input line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10,000) — the number of servers and the number of communication channels respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) describing a one-way communication channel from server u to server v. The output should contain two lines. The first line should contain the size of the largest SCC. The second line should contain the list of servers in the largest SCC. For example, given the following inputs: ``` 6 7 1 2 2 3 3 1 3 4 4 5 5 6 6 4 ``` A valid output would be: ``` 3 4 5 6 ``` or ``` 3 1 2 3 ```","solution":"from collections import defaultdict, deque def kosaraju_scc(n, edges): def dfs(v): visited[v] = True for neighbour in graph[v]: if not visited[neighbour]: dfs(neighbour) order.append(v) def reverse_dfs(v, component): visited[v] = True component.append(v) for neighbour in rev_graph[v]: if not visited[neighbour]: reverse_dfs(neighbour, component) graph = defaultdict(list) rev_graph = defaultdict(list) for u, v in edges: graph[u].append(v) rev_graph[v].append(u) visited = [False] * (n + 1) order = [] for i in range(1, n + 1): if not visited[i]: dfs(i) visited = [False] * (n + 1) components = [] while order: v = order.pop() if not visited[v]: component = [] reverse_dfs(v, component) components.append(component) largest_scc = max(components, key=len) return len(largest_scc), sorted(largest_scc) def largest_scc(n, m, edges): return kosaraju_scc(n, edges)"},{"question":"In the land of Fintalia, there exists a network of enchanted cities, numbered from 1 to n. Each city is connected to some other cities with magical roads. The roads are bidirectional, and each has a mystical number associated with it called a \\"magic factor\\". The magic factor of a road influences the magical trade between the cities it connects. Fintalia\'s wizard council wants to test the efficacy of their trade network by ensuring that certain magic factors can be disseminated effectively across various city pairs using a select combination of connected roads. They have posed a challenge to you; for each proposed magic factor, determine if there\'s any pair of cities between which the magic factor can propagate efficiently. To investigate this, you need to find two distinct cities such that the maximum magic factor on the path between them through connected roads is exactly equal to the given magic factor. The problem is described by: 1. An integer n (number of cities). 2. An integer m (number of roads). 3. An integer q (number of queries regarding magic factors). Each of the next m lines contains three integers u, v, c describing a road between cities u and v with a magic factor c. Each of the next q lines contains one integer k representing a magic factor to be evaluated. For each query, print \\"YES\\" (without quotes) if there exists a pair of distinct cities with an exact path maximum magic factor equal to k. Otherwise, print \\"NO\\" (without quotes). **Input** The first line contains three integers n, m, and q (2 ≤ n ≤ 105, 1 ≤ m ≤ 105, 1 ≤ q ≤ 105) — the number of cities, roads, and queries respectively. Each of the next m lines contains three integers u, v, c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 106; u ≠ v) describing a road between city u and city v with magic factor c. Each of the next q lines contains one integer k (1 ≤ k ≤ 106). **Output** For each query, print \\"YES\\" if there exists a pair of distinct cities such that the maximum magic factor on the path between them is exactly equal to k. Otherwise, print \\"NO\\". **Example** Input: ``` 5 6 3 1 2 10 2 3 15 3 4 20 4 5 25 1 3 30 2 5 35 10 20 1 ``` Output: ``` YES YES NO ``` Notes: * For the first query, the magic factor 10 can be found directly between city 1 and city 2. * For the second query, the magic factor 20 can be found directly between city 3 and city 4. * For the third query, no path between any two cities has a maximum magic factor of 1.","solution":"def propagate_magic(n, m, connections, queries): from collections import defaultdict # Graph data structure graph = defaultdict(list) # Insert each road into the graph for u, v, c in connections: graph[c].append((u, v)) # Use a set to store all magic factors in the connections magic_factors = set(graph.keys()) # Prepare the results for each query results = [] for query in queries: if query in magic_factors: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def main(inputs): lines = inputs.strip().split(\'n\') n, m, q = map(int, lines[0].split()) index = 1 connections = [] for _ in range(m): u, v, c = map(int, lines[index].split()) connections.append((u, v, c)) index += 1 queries = [] for _ in range(q): k = int(lines[index]) queries.append(k) index += 1 return propagate_magic(n, m, connections, queries)"},{"question":"A security system designed for a fictional company\'s headquarters consists of a grid of n * m cells, where some cells are locked and others are not. Each locked cell is denoted by \'L\', and each unlocked cell is denoted by \'U\'. The security system is in a fixed state described by this grid. An employee can only move from an unlocked cell to one of its adjacent cells (up, down, left, right) if that cell is also unlocked. The goal is to determine the number of clusters of connected unlocked cells in the system. A cluster is defined as a group of unlocked cells where every unlocked cell in the group is reachable from any other cell in the group through a sequence of moves. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the security grid. Each of the next n lines contains m characters — either \'L\' or \'U\', representing the state of each cell. Output a single integer — the number of clusters of connected unlocked cells in the grid. # Example: Input: 4 5 U U L L U U L U L U L U U L L U U L U U Output: 4 Explanation of the example: 1. The cluster in the top-left includes the cells (1,1), (1,2), and (2,1). 2. The single unlocked cell at position (1, 5) forms another cluster. 3. The cluster at the center of the grid includes cells (2, 3), (3, 2), and (3, 3). 4. The cluster in the bottom-right includes the cells (4, 2), (4, 3), (4, 4), and (4, 5).","solution":"def count_clusters(n, m, grid): Returns the number of clusters of connected unlocked cells in the grid. def dfs(grid, visited, i, j): # Directions for the adjacent cells (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] stack = [(i, j)] while stack: x, y = stack.pop() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'U\': visited[nx][ny] = True stack.append((nx, ny)) visited = [[False] * m for _ in range(n)] clusters = 0 for i in range(n): for j in range(m): if grid[i][j] == \'U\' and not visited[i][j]: clusters += 1 visited[i][j] = True dfs(grid, visited, i, j) return clusters"},{"question":"You are given a weighted, connected, undirected graph with `n` vertices and `m` edges (1 ≤ n ≤ 50, 1 ≤ m ≤ 1250). Each vertex represents a city, and each edge represents a road with a certain toll. During the annual festival, the government wants to ensure that the maximum road toll between any two cities in the same group of cities does not exceed a certain amount. Cities are grouped such that the maximum road toll within each group is minimized and the number of cities in each group is as large as possible. You need to find a way to group the cities and determine the maximum possible minimal road toll within these groups while maximizing the number of cities in each group. Your task is to write a program to help the government with this problem. The first line contains two integers `n` and `m`, representing the number of cities and roads, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), representing a road between cities `u` and `v` with a road toll of `w`. Output a single integer: the maximum possible minimal road toll within a group while maximizing the number of cities in that group. Sample Input: ``` 4 5 1 2 4 1 3 2 2 3 1 2 4 6 3 4 3 ``` Sample Output: ``` 3 ```","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): parent = [i for i in range(n)] rank = [0] * n mst = [] for edge in sorted(edges, key=lambda item: item[2]): u, v, w = edge u_root = find(parent, u) v_root = find(parent, v) if u_root != v_root: mst.append(edge) union(parent, rank, u_root, v_root) return mst def maximum_possible_minimal_road_toll(n, m, edges): mst = kruskal(n, edges) max_edge_weight_in_mst = max(edge[2] for edge in mst) return max_edge_weight_in_mst # Reading input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 3 * i]) - 1 # to convert 1-based index to 0-based index v = int(data[3 + 3 * i]) - 1 w = int(data[4 + 3 * i]) edges.append((u, v, w)) result = maximum_possible_minimal_road_toll(n, m, edges) print(result) # If needed, uncomment the following line to read from standard input # if __name__ == \\"__main__\\": # main()"},{"question":"Anna loves solving problems that involve numbers and patterns. Recently, she came across an interesting problem while reading a book. The problem consisted of finding sequences of numbers that exhibited certain properties. Anna decided to challenge herself to find sequences that are both \\"dense\\" and \\"consecutive.\\" A sequence is defined as \\"dense\\" if every two consecutive numbers in the sequence differ by exactly 1. Additionally, the sequence must be \\"consecutive,\\" meaning that for every integer between the smallest and largest numbers in the sequence, that integer must be included in the sequence exactly once. Given an array of integers, Anna\'s task is to determine the length of the longest \\"dense\\" and \\"consecutive\\" subarray within the array. Can you help Anna find the solution? The first line contains a single integer n (1 leq n leq 100,000) — the size of the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). Print the length of the longest \\"dense\\" and \\"consecutive\\" subarray in the array. Let\'s consider the first sample test. The maximum dense and consecutive subarray is [4, 3, 2, 1, 0], which has a length of 5. In the second sample test, the sequence is already dense and consecutive, which has a length of 10.","solution":"def longest_dense_consecutive_subarray(arr): if not arr: return 0 # Sort the array and remove duplicates sorted_arr = sorted(set(arr)) longest_length = 1 current_length = 1 for i in range(1, len(sorted_arr)): if sorted_arr[i] - sorted_arr[i-1] == 1: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"You are given an integer array containing both positive and negative integers. Your task is to find the contiguous subarray (containing at least one number) which has the smallest sum and return its sum. The input will consist of two lines. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4) — the elements of the array. Print a single integer — the smallest sum that can be obtained by a contiguous subarray of the given array. For example: Input: 5 3 -4 2 -3 -1 Output: -6 In the first sample, the subarray [-4, 2, -3, -1] has the smallest sum which is -6. In another example: Input: 4 1 2 3 4 Output: 1 In this case, the subarray containing a single element [1] has the smallest sum which is 1.","solution":"def smallest_subarray_sum(n, arr): Finds the smallest sum of any contiguous subarray in the array. :param n: Number of elements in the array :param arr: List of integers :return: Smallest sum of any contiguous subarray min_current = arr[0] min_global = arr[0] for i in range(1, n): min_current = min(arr[i], min_current + arr[i]) if min_current < min_global: min_global = min_current return min_global # Example usage: # n = 5 # arr = [3, -4, 2, -3, -1] # print(smallest_subarray_sum(n, arr)) # Output: -6"},{"question":"A company wants to distribute their newest gadget as gift prizes to their employees. The gadget is expensive, so they would like to distribute as few as possible while ensuring that each team receives at least one gadget. Each team holds a meeting periodically, and some employees attend multiple team meetings due to cross-functional work. The company wants to minimize the number of gadgets distributed by ensuring that some employee who attends multiple team meetings receives only one gadget for all the teams they attend. Given a list of meetings, where each meeting contains the identifiers of the employees present, find the minimum number of gadgets required to ensure every employee attending at least one meeting gets a gadget. Each employee identifier is a unique integer. Every employee attending a meeting must be allocated a gadget assigned specifically for that meeting. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of meetings. - The next n lines describe the meetings. Each line starts with an integer mi (1 ≤ mi ≤ 10^5) — the number of attendees at the i-th meeting followed by mi integers — the identifiers of the attendees. Output: - Print a single integer — the minimum number of gadgets required. Example: Input: 4 3 1 2 3 2 2 4 3 1 4 5 1 6 Output: 4 Explanation: In the above example, we need at least 4 gadgets: - Employee 1 attends meetings 1 and 3 but needs only one gadget for all. - Employees 2 attends meetings 1 and 2 but requires only one gadget. - Employee 3 only attends meeting 1, and hence gets one gadget. - Employee 4 attends meetings 2 and 3 but needs only one gadget. - Employee 5 attends only meeting 3, gets one gadget. - Employee 6 attends only meeting 4, gets one gadget. Thus, the minimum number of gadgets required to cover the meetings is 4.","solution":"def min_gadgets_required(n, meetings): Returns the minimum number of gadgets required to cover all meetings. attendees = set() for meeting in meetings: attendees.update(meeting) return len(attendees)"},{"question":"A tree is a connected, acyclic graph. Given a tree with n nodes, your task is to determine whether it is possible to label the tree\'s nodes with integers from 1 to n such that for every pair of adjacent nodes (u, v), the absolute difference between their labels is exactly 1. If it is possible, you need to provide one possible labeling; otherwise, state that it is impossible. The first line contains a single integer n (2 leq n leq 10^5), the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 leq u, v leq n), denoting an edge between nodes u and v. Output \\"YES\\" on the first line if there is a valid labeling. If there is a solution, output a second line containing the labeling of the nodes in any valid order. If no valid labeling exists, output \\"NO\\" on the first line. # Examples Example 1 # Input ``` 3 1 2 2 3 ``` # Output ``` YES 1 2 3 ``` Example 2 # Input ``` 4 1 2 2 3 3 4 ``` # Output ``` YES 1 2 3 4 ``` Example 3 # Input ``` 4 1 2 1 3 1 4 ``` # Output ``` NO ``` Example 4 # Input ``` 5 1 2 2 3 3 4 4 5 ``` # Output ``` YES 1 2 3 4 5 ``` In example 2, you can also output `4 3 2 1` as a valid solution, as the absolute difference between labels of every adjacent node is exactly 1.","solution":"def label_tree(n, edges): from collections import defaultdict, deque if n == 2: return \\"YESn1 2\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) degrees = [0] * (n + 1) for node in range(1, n + 1): degrees[node] = len(graph[node]) # Check if the tree contains any node with degree higher than 2 if any(deg > 2 for deg in degrees): return \\"NO\\" # Perform BFS to label the nodes labels = [-1] * (n + 1) queue = deque([1]) labels[1] = 1 next_label = 2 while queue: node = queue.popleft() for neighbor in graph[node]: if labels[neighbor] == -1: labels[neighbor] = next_label next_label += 1 queue.append(neighbor) return \\"YESn\\" + \\" \\".join(map(str, labels[1:])) # Example usage n = 3 edges = [(1, 2), (2, 3)] print(label_tree(n, edges)) # Output: \\"YESn1 2 3\\""},{"question":"Given an array of integers, rearrange its elements in such a way that the sum of the products of adjacent elements is maximized. Specifically, if the array after rearrangement is represented as a\', you need to maximize sumlimits_{i=0}^{n-2} a\'_i cdot a\'_{i+1}. # Input The first line contains an integer n (2 leq n leq 1000), the number of elements in the array. The second line contains n space-separated integers a_0, a_1, ldots, a_{n-1} (|a_i| leq 10^4). # Output Output a permutation of the array such that the sum of the products of adjacent elements is maximized. # Example Input ``` 4 1 2 3 4 ``` Output ``` 4 3 2 1 ``` Explanation One possible optimal rearrangement is 4, 3, 2, 1 which produces the sum: 4 cdot 3 + 3 cdot 2 + 2 cdot 1 = 12 + 6 + 2 = 20 (Note: The output should reflect the arrangement which maximizes sumlimits_{i=0}^{n-2} a\'_i cdot a\'_{i+1} and your program might output different correct permutations resulting in the same maximum sum).","solution":"def maximize_sum_of_products(n, arr): Rearranges the elements of the array in such a way that the sum of the products of adjacent elements is maximized. # Sort the array in descending order arr.sort(reverse=True) return arr"},{"question":"Mallory wants to organize a series of workshops for her startup. Each workshop has a specific duration and a starting time. Participants can only attend one workshop at a time, which means they cannot attend overlapping workshops. Mallory wants to maximize the number of workshops that participants can attend, ensuring each participant is always attending one of the workshops without any time conflicts. Given a list of workshops with their start and end times, determine the maximum number of non-overlapping workshops that can be attended. For simplicity, assume that no two workshops end at the exact same time. The first line of the input contains an integer n (1 ≤ n ≤ 100) representing the number of workshops. The next n lines each contain two integers s and e (0 ≤ s < e ≤ 1000), representing the start and end times of a workshop. Print a single integer which is the maximum number of non-overlapping workshops that can be attended. **Example Input:** ``` 5 1 3 2 5 4 6 6 8 5 7 ``` **Example Output:** ``` 3 ``` The optimal set of workshops to attend might include the workshops with times (1, 3), (4, 6), and (6, 8).","solution":"def max_non_overlapping_workshops(n, workshops): Returns the maximum number of non-overlapping workshops that can be attended. # Sort the workshops by their end times workshops.sort(key=lambda x: x[1]) # Initialize variables last_end_time = 0 max_workshops = 0 # Iterate through sorted workshops for start, end in workshops: # If this workshop starts after the last one ends if start >= last_end_time: # Select this workshop last_end_time = end max_workshops += 1 return max_workshops"},{"question":"Considering the style, length, complexity, and domain alignment of the provided questions, here’s an additional coding assessment question: You are given a binary tree with n nodes. Each node has a value assigned, and the tree is rooted at node 1. You are required to process q queries. There are two types of queries: 1. Update the value of a node. 2. Find the maximum value in a subtree rooted at a given node. The first line of input will contain two integers n and q (1 ≤ n, q ≤ 100000), representing the number of nodes and the number of queries, respectively. The next line will contain n integers a1, a2, ..., an (1 ≤ ai ≤ 100000), representing the initial values of the nodes. The next n-1 lines will contain two integers ui and vi (1 ≤ ui, vi ≤ n), representing an edge of the tree between nodes ui and vi. The next q lines will contain queries in one of the following formats: - \\"1 v x\\": Update the value of node v to x (1 ≤ v ≤ n, 1 ≤ x ≤ 100000). - \\"2 v\\": Find the maximum value in the subtree rooted at node v (1 ≤ v ≤ n). For each type 2 query, print the maximum value in the subtree rooted at node v. # Example Input: ``` 4 5 1 2 3 4 1 2 1 3 3 4 2 1 1 2 5 2 2 1 3 10 2 3 ``` Output: ``` 4 5 10 ``` Note: - The tree initially has nodes with values [1, 2, 3, 4]. - After the update query \\"1 2 5\\", the value of node 2 becomes 5. - The maximum value in the subtree rooted at node 1 is 4. - The maximum value in the subtree rooted at node 2 is 5. - After the update query \\"1 3 10\\", the value of node 3 becomes 10. - The maximum value in the subtree rooted at node 3 is 10.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) class Tree: def __init__(self, n, values): self.n = n self.values = values self.tree = defaultdict(list) self.subtree_max = [0] * (n + 1) self.build_called = False def add_edge(self, u, v): self.tree[u].append(v) self.tree[v].append(u) def dfs(self, node, parent): max_value = self.values[node-1] for neighbor in self.tree[node]: if neighbor != parent: max_value = max(max_value, self.dfs(neighbor, node)) self.subtree_max[node] = max_value return max_value def build_subtree_max(self): self.build_called = True self.dfs(1, -1) def update_value(self, v, x): self.values[v-1] = x self.build_called = False def get_subtree_max(self, v): if not self.build_called: self.build_subtree_max() return self.subtree_max[v] def process_queries(n, q, values, edges, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) results = [] for query in queries: if query[0] == 1: tree.update_value(query[1], query[2]) elif query[0] == 2: results.append(tree.get_subtree_max(query[1])) return results"},{"question":"In a country called Arrayland, there are n cities connected by a complex road network. Each road connects two different cities and has a specified travel time. The government of Arrayland wants to construct a high-speed railway that connects one specific city (called the central city) to all other cities, enabling rapid travel directly between the central city and any other city without having to go through intermediate cities. However, due to budgetary constraints, it wants to minimize the maximum travel time from the central city to any other city using the new railway. If a city is directly connected to the central city by the railway, the travel time is considered to be zero. Your task is to determine the maximum travel time between any pair of cities in Arrayland after constructing the railway. The first line of input contains three integers n, m, and c (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000, 1 ≤ c ≤ n) — the number of cities, the number of roads, and the index of the central city respectively. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1,000,000) — representing a road connecting city u and city v with travel time w. Output a single integer — the maximum travel time between any pair of cities in Arrayland after constructing the high-speed railway directly connecting the central city to every other city. In the first example, the result can be computed given the detailed constraints and initial road network structure.","solution":"import heapq import sys def find_max_travel_time(n, m, c, roads): Returns the maximum travel time between any pair of cities in Arrayland after constructing the high-speed railway that directly connects the central city to every other city. :param n: Number of cities :param m: Number of roads :param c: Central city index :param roads: List of tuples representing the roads (u, v, w) :return: Maximum travel time def dijkstra(start, adj_list, n): distances = [sys.maxsize] * (n + 1) distances[start] = 0 min_heap = [(0, start)] while min_heap: current_distance, u = heapq.heappop(min_heap) if current_distance > distances[u]: continue for v, weight in adj_list[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return distances adj_list = [[] for _ in range(n + 1)] for u, v, w in roads: adj_list[u].append((v, w)) adj_list[v].append((u, w)) distances_from_central = dijkstra(c, adj_list, n) return max(distances_from_central[1:])"},{"question":"You are given a list of integers representing different coin denominations, and an integer amount representing a total amount of money. Write a program to compute the fewest number of coins that you need to make up that amount. If that amount cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of coin denominations. - The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10,000), the values of the coin denominations. - The third line contains an integer amount (1 ≤ amount ≤ 10^4), the target amount of money. Output: - Output a single integer, representing the minimum number of coins needed to make up the target amount, or -1 if it cannot be made up with the given coin denominations. Example: Input: 3 1 2 5 11 Output: 3 Explanation: The fewest number of coins needed to make up 11 is 3: 5 + 5 + 1.","solution":"def coin_change(coins, amount): Returns the fewest number of coins needed to make up the amount. If it is not possible to make up the amount with the given coins, return -1. # Initialize a list for storing the minimum coins needed for each amount up to `amount` dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make 0 amount # Update the dp list for each coin for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still inf, it means amount cannot be made up by any combination of the coins return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"John has a garden with a unique irrigation system resembling a binary tree. Each node in the tree represents a sprinkler, and each edge represents a pipe. Water flows from the root of the tree down to the leaves. Each sprinkler can give water to a maximum of two children nodes. The efficiency of a node is determined by how deep it lies within the tree. Given the binary tree structure consisting of `n` sprinklers, where each sprinkler is represented by a unique integer from `1` to `n`, John\'s goal is to find the maximum efficiency level of the tree. The root node\'s efficiency level is `1`, its children have efficiency level `2`, and so on. The input consists of multiple test cases. Each test case begins with an integer `n` (1 ≤ n ≤ 10^5), the number of nodes in the tree. The next `n-1` lines each contain two integers `u` and `v` representing an edge between nodes `u` and `v`. For each test case, output the maximum efficiency level of the tree. **Input:** ``` t n u1 v1 u2 v2 ... un-1 vn-1 ``` Where `t` is the number of test cases. **Output:** ``` Maximum efficiency level for each test case. ``` **Example:** ``` Input: 2 3 1 2 1 3 5 1 2 1 3 3 4 3 5 Output: 2 3 ```","solution":"import sys from collections import deque def max_efficiency_level(num_cases, cases): results = [] for case in cases: n, edges = case if n == 1: results.append(1) continue adjacency_list = [[] for _ in range(n + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) def bfs(start): queue = deque([(start, 1)]) visited = [False] * (n + 1) max_depth = 1 while queue: current_node, depth = queue.popleft() visited[current_node] = True max_depth = max(max_depth, depth) for neighbor in adjacency_list[current_node]: if not visited[neighbor]: queue.append((neighbor, depth + 1)) return max_depth # Start BFS from the root node (node 1) max_depth = bfs(1) results.append(max_depth) return results"},{"question":"Zara is organizing a dance competition where each dancer will perform a series of dance moves. Each dance move has an associated energy level, and she wants to ensure that dancers do not exhaust themselves by performing consecutive dance moves with high energy levels. You are given a sequence of energy levels for the dance moves. Zara wants to divide these dance moves into two non-empty groups such that the maximum difference in the total energy levels of the two groups is minimized. For example: Help Zara achieve her goal by determining the division of dance moves that minimizes the maximum difference in the total energy levels between the two groups. The first line contains one integer t (1 le t le 500) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (2 le n le 20) — the number of dance moves. The second line contains n integers e_1, e_2, ..., e_n (1 le e_i le 100) — the energy levels of the dance moves. For each test case, print one line with the minimal possible maximum difference. You need to provide the difference only, not the actual groups. For example: Input: ``` 2 4 1 2 3 4 5 8 6 5 4 10 ``` Output: ``` 0 1 ``` Explanation: In the first test case, the best division is {1, 4} and {2, 3} with the sum of energies 5 and 5, respectively. The difference is 0. In the second test case, the best division can be {5, 8} and {6, 4, 10} with the sum of energies 13 and 20, respectively. The difference is 1.","solution":"def min_difference_partition(t, test_cases): def min_difference(arr): total_sum = sum(arr) n = len(arr) memo = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): memo[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i - 1] <= j: memo[i][j] = memo[i - 1][j] or memo[i - 1][j - arr[i - 1]] else: memo[i][j] = memo[i - 1][j] for j in range(total_sum // 2, -1, -1): if memo[n][j]: return total_sum - 2 * j results = [] for i in range(t): n, moves = test_cases[i] results.append(min_difference(moves)) return results"},{"question":"You are given a 2D grid with n rows and m columns, where each cell in the grid contains an integer representing either: - The cost of walking through that cell if the integer is positive. - An obstacle (impassable cell) if the integer is -1. You start at the top-left cell (0,0) and want to reach the bottom-right cell (n-1, m-1) with the minimum possible cost. You can only move right or down from one cell to another. Help determine the minimum cost to reach the bottom-right cell or return -1 if it is impossible to reach the destination. Each test in this problem consists of one or more input sets. First goes a string that contains a single integer t (1 ≤ t ≤ 10) — the number of input data sets in the test. The first line of each set of the input contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns of the grid, respectively. Then n lines follow, each containing m integers, representing the grid. The values in the grid range from -1 to 100. Output a single line for each test set. Print the minimum cost to reach the bottom-right cell or -1 if it is not possible to reach the destination. # Example Input ``` 2 3 3 0 1 1 -1 1 1 1 1 1 3 3 0 1 1 1 -1 1 1 1 -1 ``` Output ``` 4 -1 ```","solution":"import heapq def min_cost_to_reach_bottom_right(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == -1 or grid[n-1][m-1] == -1: return -1 directions = [(1, 0), (0, 1)] # Only right or down directions min_heap = [(grid[0][0], 0, 0)] # (cost, row, col) costs = {(0, 0): grid[0][0]} while min_heap: current_cost, x, y = heapq.heappop(min_heap) if (x, y) == (n-1, m-1): return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != -1: next_cost = current_cost + grid[nx][ny] if (nx, ny) not in costs or next_cost < costs[(nx, ny)]: costs[(nx, ny)] = next_cost heapq.heappush(min_heap, (next_cost, nx, ny)) return -1 def process_grids(num_tests, test_cases): results = [] for i in range(num_tests): n, m, grid = test_cases[i] result = min_cost_to_reach_bottom_right(grid) results.append(result) return results"},{"question":"Given a string containing only the characters \'a\' and \'b\', you are to determine the length of the longest substring that contains no more than one unique character. The first line contains an integer t (1 ≤ t ≤ 100), which represents the number of test cases. Each of the next t lines contains a string of length between 1 and 100, consisting only of characters \'a\' and \'b\'. For each test case, output the length of the longest substring that contains either \'a\' or \'b\', but not both. **Example:** Input: ``` 3 ababab aaaa bbaabb ``` Output: ``` 1 4 2 ```","solution":"def longest_uniform_substring(t, strings): Determines the length of the longest substring that contains no more than one unique character. Parameters: t (int): The number of test cases. strings (list of str): List of strings consisting of characters \'a\' and \'b\'. Returns: list of int: List of the lengths of the longest substrings for each input string. results = [] for s in strings: max_length = 0 current_char = \'\' current_length = 0 for char in s: if char == current_char: current_length += 1 else: max_length = max(max_length, current_length) current_char = char current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"You are a security chief in a large company, and you need to manage the access points for employees to enter the building. Each employee has an access card with a unique ID, and they swipe their card at an access point to gain entry. You need a system to efficiently keep track of employee entries and monitor any suspicious activities, such as multiple entries in a short period of time. To start, you will design a function that processes a list of access records and identifies any suspicious activity. Each access record contains a timestamp and an employee ID. Suspicious activity is defined as any instance where the same employee ID is recorded more than once within a specified time window. Your task is to implement a function that takes a list of access records and a time window, and returns a list of employee IDs that have shown suspicious activity. Write a function `find_suspicious_entries(records, time_window)` that takes in a list of access records and an integer time window in seconds, and returns a list of employee IDs that have shown suspicious activity. Each record in the input list `records` is a tuple of two elements: the first element is an integer representing the timestamp (in seconds since the start of the day), and the second element is a string representing the employee ID. The function should return a list of suspicious employee IDs, sorted in ascending order. If no suspicious activity is found, return an empty list. # Input Format - `records`: List of tuples where each tuple contains an integer (timestamp in seconds) and a string (employee ID). - `time_window`: Integer representing the time window in seconds. # Output Format - A sorted list of strings representing the employee IDs that have shown suspicious activity. # Example ```python records = [ (60, \'emp1\'), (120, \'emp2\'), (180, \'emp1\'), (240, \'emp1\'), (300, \'emp3\') ] time_window = 180 print(find_suspicious_entries(records, time_window)) ``` Expected Output: ``` [\'emp1\'] ``` # Constraints - The number of access records will not exceed (10^5). - The timestamp values are between 0 and (86400) (number of seconds in a day). - The time window will be a positive integer less than or equal to (86400).","solution":"def find_suspicious_entries(records, time_window): Identifies suspicious activity where the same employee ID is recorded more than once within a specified time window. :param records: List of tuples containing the timestamp (int) and employee ID (str). :param time_window: Integer representing the time window in seconds. :return: Sorted list of employee IDs with suspicious activity. from collections import defaultdict # Dictionary to store the timestamps for each employee entry_logs = defaultdict(list) suspicious_employees = set() # Iterate over each record and append the timestamp to the corresponding employee ID in the dictionary for timestamp, emp_id in records: if emp_id in entry_logs: for entry_time in entry_logs[emp_id]: # Check if the current timestamp is within the time window of the past entry times if abs(timestamp - entry_time) <= time_window: suspicious_employees.add(emp_id) break entry_logs[emp_id].append(timestamp) # Return the list of suspicious employees sorted in ascending order return sorted(suspicious_employees)"},{"question":"You are given a series of n boxes arranged in a line, and each box contains a certain number of candies. You are also given q queries, each specifying a subarray (a consecutive subsection of the boxes) and an integer k. For each query, find the maximum sum of candies you can collect from the specified subarray by selecting at most k consecutive boxes. The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of boxes and the number of queries. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^6) — the number of candies in each box. Each of the next q lines contains three integers l, r, and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ r - l + 1) — the indices (1-based) of the leftmost and rightmost boxes of the subarray, and the maximum number of consecutive boxes you can select within this subarray. For each query, print a single integer — the maximum sum of candies you can collect from the subarray by selecting at most k consecutive boxes. For example, if given: ``` 7 3 3 1 4 1 5 9 2 1 5 3 2 7 2 3 6 1 ``` The output should be: ``` 10 14 5 ```","solution":"def max_sum_of_candies(n, q, candies, queries): def max_sum_subarray(array, k): max_sum = curr_sum = sum(array[:k]) for i in range(len(array) - k): curr_sum += array[i + k] - array[i] max_sum = max(max_sum, curr_sum) return max_sum results = [] for query in queries: l, r, k = query subarray = candies[l - 1 : r] # Convert to 0-based index results.append(max_sum_subarray(subarray, k)) return results"},{"question":"In a magical forest, there are n distinct types of flowers arranged in a straight line. Each type of flower can attract certain types of butterflies. The flowers and butterflies form a complex network where each type of flower can attract multiple types of butterflies, and each type of butterfly can be attracted to multiple flowers. The butterflies always start at the first flower and visit each subsequent flower exactly once. For each flower they visit, butterflies make a decision whether to move to the next flower or skip over it, based on how many different types of butterflies the flower can attract compared to the previous flower visited. Given the list of flowers and the butterflies they attract, you need to compute the maximum number of different butterflies that can be seen if butterflies make optimal decisions while navigating through the straight line of flowers. The first line of input contains one integer n (2 leq n leq 100) — the number of flowers arranged in a straight line. The next n lines contain space-separated integers describing the types of butterflies each flower can attract. Each line starts with an integer k (1 leq k leq 50) indicating the number of different types of butterflies the flower can attract, followed by k integers representing the butterfly types. Output a single integer — the maximum number of different butterflies that can be seen. # Example Input ``` 4 3 1 2 3 2 2 4 1 3 3 1 4 5 ``` Output ``` 5 ``` # Explanation - The first flower attracts butterflies of types 1, 2, and 3. - The second flower attracts butterflies of types 2 and 4. - The third flower attracts butterflies of type 3. - The fourth flower attracts butterflies of types 1, 4, and 5. The optimal path following the specified rules can be: - Visit the first flower (see butterflies 1, 2, and 3) - Skip the second flower and the third flower - Visit the fourth flower (see butterflies 1, 4, and 5) The total number of different butterflies seen is 5 (types 1, 2, 3, 4, and 5).","solution":"def max_butterflies_seen(n, flowers): Given the number of flowers and a list of flowers with the types of butterflies each flower can attract, this function returns the maximum number of different butterflies that can be seen if the butterflies take an optimal path through the flowers. Args: n: int - number of flowers flowers: List[List[int]] - each sub-list contains the butterflies each flower can attract Returns: int - maximum number of different butterflies that can be seen from collections import defaultdict # List to store the maximum number of butterflies that can be seen up to each flower dp = [set() for _ in range(n)] # Initialize the first flower dp[0] = set(flowers[0]) # Iterate through the flowers for i in range(1, n): dp[i] = dp[i-1].union(flowers[i]) if i > 1: # Skipping flower i-1 dp[i] = max(dp[i], dp[i-2].union(flowers[i]), key=len) # Return the size of the set for the last flower return len(dp[-1]) def parse_input(input_string): Parse input string into the number of flowers and the list of butterflies each flower can attract. Args: input_string: str - multiline input describing the flowers and butterflies Returns: Tuple[int, List[List[int]]] - number of flowers and butterflies each flower can attract lines = input_string.strip().split(\\"n\\") n = int(lines[0]) flowers = [list(map(int, line.split()))[1:] for line in lines[1:]] return n, flowers"},{"question":"Polycarp is preparing for a math competition and needs to practice on sequences. He has a sequence of integers and wants to find the longest increasing subsequence (LIS) that can be obtained by removing certain elements of the sequence without changing the order of the remaining elements. However, Polycarp has an additional constraint: he can only select up to `k` elements in the longest increasing subsequence. Help Polycarp determine the length of the longest increasing subsequence he can achieve with the selected subset of elements limited by `k`. **Input:** The first line contains two integers `n` (1 ≤ n ≤ 1000) — the length of the sequence, and `k` (1 ≤ k ≤ n) — the maximum number of elements Polycarp can include in the LIS. The second line contains `n` space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the sequence of numbers. **Output:** Print one integer — the length of the longest increasing subsequence Polycarp can achieve while including at most `k` elements. **Example:** ``` Input: 7 3 4 2 4 5 3 7 6 Output: 3 ``` **Explanation:** In the given example, the sequence [2, 4, 5] or [4, 5, 7] is an increasing subsequence with a length of 3, and it includes up to `k` elements.","solution":"def length_of_lis_with_limit(sequence, k): Returns the length of the longest increasing subsequence that can be achieved with the selected subset of elements limited by k. :param sequence: List of integers representing the sequence. :param k: Maximum number of elements that can be included in the LIS. :return: Length of the longest increasing subsequence with at most k elements. n = len(sequence) # If k is 0, return 0 because no element can be chosen if k == 0: return 0 # dp[i] will hold the length of the longest increasing subsequence that ends with sequence[i] dp = [1] * n # calculate the longest increasing subsequence length for each element for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # Find the longest subsequence length from dp array that doesn\'t exceed k max_lis = 0 for length in dp: if length <= k: max_lis = max(max_lis, length) # The result return max_lis def parse_input_and_solve(n, k, sequence): return length_of_lis_with_limit(sequence, k)"},{"question":"You are a software developer tasked with creating a game simulation to test your algorithm design skills. There is a circular track represented by an array of integers, where each integer represents a checkpoint. Initially, you are positioned at the first checkpoint. You have to respond to two types of queries: 1. Move a specific number of steps (either clockwise or counterclockwise) from your current position. 2. Report the value at your current position. You need to complete the implementation such that it supports efficient handling of these queries. **Input Format:** - The first line contains an integer `n` (1 le n le 10^5), the number of checkpoints on the track. - The second line contains `n` integers, `a_1, a_2, ..., a_n`, representing the values at each checkpoint. - The third line contains an integer `q` (1 le q le 10^5), the number of queries. - Each of the next `q` lines contains a query in one of the following formats: - `\\"M x\\"` where `x` is an integer indicating the number of steps to move from the current position. `x` can be positive (move clockwise) or negative (move counterclockwise). - `\\"R\\"` which asks for the value at the current position. **Output Format:** For each \\"R\\" query, print the value at the current position. **Sample Input:** ``` 5 1 2 3 4 5 4 M 2 R M -1 R ``` **Sample Output:** ``` 3 2 ``` **Explanation:** - Initially, you are at checkpoint 1 with value `1`. - On the first query \\"M 2\\", you move 2 steps clockwise to checkpoint 3 (with value `3`). - On the second query \\"R\\", you print the value at checkpoint 3, which is `3`. - On the third query \\"M -1\\", you move 1 step counterclockwise to checkpoint 2 (with value `2`). - On the fourth query \\"R\\", you print the value at checkpoint 2, which is `2`.","solution":"def simulate_game(n, checkpoints, queries): result = [] current_position = 0 for query in queries: if query[0] == \\"M\\": steps = int(query[1]) current_position = (current_position + steps) % n elif query[0] == \\"R\\": result.append(checkpoints[current_position]) return result"},{"question":"Suppose you have an array of integers where every element appears twice except for one element which appears exactly once. Your task is to find the element that appears exactly once. Write a function `findUniqueElement` that takes a list of integers `arr` and returns the integer that appears only once in the array. Your solution should have a linear runtime complexity and use only constant extra space. # Function Signature ```python def findUniqueElement(arr: [int]) -> int ``` # Example ```python findUniqueElement([2, 2, 1]) -> 1 findUniqueElement([4, 1, 2, 1, 2]) -> 4 ``` # Constraints - The input list `arr` will have length `n`, where `1 ≤ n ≤ 10^7`. - Each integer in the array will be in the range of `1` to `10^9`. # Note The problem guarantees that there will always be exactly one such unique element. # Explanation You may assume the array is non-empty and contains exactly one integer that does not repeat. The solution should leverage bit manipulation to achieve the desired time and space complexity.","solution":"def findUniqueElement(arr): Finds the element that appears exactly once in the array. Args: arr (list): List of integers where every element appears twice except for one element. Returns: int: The element that appears exactly once. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Mila loves solving unique string problems. One day she thought of an interesting problem. She wants to know the minimal length of a string containing exactly k letters from the given string s. The problem is as follows: Given a string s of length n and an integer k, find the minimal length of the substring of s which contains exactly k distinct letters. It is guaranteed that there is at least one substring containing exactly k distinct letters. The string s consists of lowercase English letters only, and 1 leq k leq 26. The first line of input contains two integers n and k (1 leq n leq 1000, 1 leq k leq min(26, n)). The second line contains the string s. Print one integer — the minimal length of a substring of s which contains exactly k distinct letters. **Example:** ``` Input: 10 2 abacabadab Output: 2 ``` **Explanation:** For the given example, the substring \\"ba\\", appearing at the second position in the string, contains exactly 2 distinct letters (\'b\' and \'a\'), which is the smallest such substring in s.","solution":"def min_length_substring_with_k_distinct(n, k, s): from collections import defaultdict min_len = float(\'inf\') left = 0 char_count = defaultdict(int) distinct_count = 0 for right in range(n): if char_count[s[right]] == 0: distinct_count += 1 char_count[s[right]] += 1 while distinct_count == k: min_len = min(min_len, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: distinct_count -= 1 left += 1 return min_len"},{"question":"Given a matrix of integers with m rows and n columns, you need to perform a specific type of rotation operation on each element. The rotation operation should rotate the elements of the matrix in a spiral manner. Specifically, the elements on the outermost layer are rotated clockwise, and after completing one full rotation, they move inward to the next layer, performing the same operation until they reach the center. For example, consider the following 4x4 matrix: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 After one spiral rotation, the matrix would look like this: 5 1 2 3 9 10 6 4 13 11 7 8 14 15 16 12 Your task is to implement a function that accepts the matrix and returns the new matrix after one spiral rotation. Input: - The first line contains two integers, m and n (1 <= m, n <= 100), representing the number of rows and columns, respectively. - The next m lines contain n integers each, representing the elements of the matrix. Output: - The output should contain the m x n matrix after one spiral rotation. Example Input: 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example Output: 5 1 2 3 9 10 6 4 13 11 7 8 14 15 16 12","solution":"def spiral_rotate(matrix): if not matrix: return [] m, n = len(matrix), len(matrix[0]) layers = [] # Collect the layers of the matrix for layer in range((min(m, n) + 1) // 2): toplayer = (layer, layer) bottomlayer = (m - 1 - layer, n - 1 - layer) current_layer = [] # Top edge (left to right) for j in range(toplayer[1], bottomlayer[1] + 1): current_layer.append(matrix[toplayer[0]][j]) # Right edge (top to bottom) for i in range(toplayer[0] + 1, bottomlayer[0] + 1): current_layer.append(matrix[i][bottomlayer[1]]) # Bottom edge (right to left) if bottomlayer[0] > toplayer[0]: for j in range(bottomlayer[1] - 1, toplayer[1] - 1, -1): current_layer.append(matrix[bottomlayer[0]][j]) # Left edge (bottom to top) if bottomlayer[1] > toplayer[1]: for i in range(bottomlayer[0] - 1, toplayer[0], -1): current_layer.append(matrix[i][toplayer[1]]) layers.append(current_layer) # Rotate each layer for l in range(len(layers)): if layers[l]: last = layers[l].pop() layers[l].insert(0, last) # Put the layers back into the matrix for layer in range(len(layers)): toplayer = (layer, layer) bottomlayer = (m - 1 - layer, n - 1 - layer) current_layer = layers[layer] idx = 0 # Top edge (left to right) for j in range(toplayer[1], bottomlayer[1] + 1): matrix[toplayer[0]][j] = current_layer[idx] idx += 1 # Right edge (top to bottom) for i in range(toplayer[0] + 1, bottomlayer[0] + 1): matrix[i][bottomlayer[1]] = current_layer[idx] idx += 1 # Bottom edge (right to left) if bottomlayer[0] > toplayer[0]: for j in range(bottomlayer[1] - 1, toplayer[1] - 1, -1): matrix[bottomlayer[0]][j] = current_layer[idx] idx += 1 # Left edge (bottom to top) if bottomlayer[1] > toplayer[1]: for i in range(bottomlayer[0] - 1, toplayer[0], -1): matrix[i][toplayer[1]] = current_layer[idx] idx += 1 return matrix"},{"question":"Chloe is working on a data encryption program which relies on unique ID generation for each message transmitted over the network. To ensure IDs are unique and unpredictable, she is using a hashing algorithm, but due to the nature of the transmitted data, she needs to handle potentially large numbers efficiently. Consider there are a total of n messages, each represented by an integer array of length k. Chloe\'s task is to compute a unique hash for each message. The hash for a message is computed as the sum of its elements modulo a large prime number p. To assist Chloe, your task is to implement a function that reads n message arrays and computes and prints their respective hash values in the order they are provided. The first line of the input contains three integers n, k, and p (1 ≤ n, k ≤ 100,000, 1 ≤ p ≤ 1,000,000,007) — the number of messages, the length of each message array, and the prime modulus respectively. The following n lines contain k integers each, representing the elements of the message arrays. Output n lines, each containing the hash value for the corresponding message. Example: Input: 3 4 1000000007 1 2 3 4 5 6 7 8 9 10 11 12 Output: 10 26 42 Note: - The hash of the first message is (1 + 2 + 3 + 4) % 1000000007 = 10. - The hash of the second message is (5 + 6 + 7 + 8) % 1000000007 = 26. - The hash of the third message is (9 + 10 + 11 + 12) % 1000000007 = 42.","solution":"def compute_hashes(n, k, p, messages): Computes the hash for each message. Parameters: n (int): Number of messages k (int): Length of each message array p (int): The prime modulus messages (list of list of int): The message arrays Returns: list of int: The hash values for each message hash_values = [] for message in messages: hash_value = sum(message) % p hash_values.append(hash_value) return hash_values"},{"question":"Anna is obsessed with palindromes. She believes that palindromic numbers possess a unique beauty and, therefore, spends a lot of time examining them. One day, she decided to create a game involving palindromic numbers. Given a set of n integers, Anna wants to know the longest subsequence (not necessarily contiguous) of the given set that forms a palindrome when read left to right. Your task is to help Anna by writing a program that determines the length of this longest palindromic subsequence from the provided set of integers. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in Anna\'s set. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), which are the integers in Anna\'s set. Print a single integer — the length of the longest palindromic subsequence within the given set of integers. Consider the second example. The longest palindromic subsequence is [1, 2, 3, 2, 1], which has a length of 5. Input: ``` 5 1 2 3 2 1 ``` Output: ``` 5 ``` Input: ``` 6 1 2 1 4 3 1 ``` Output: ``` 3 ```","solution":"def longest_palindromic_subsequence(arr): n = len(arr) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if arr[i] == arr[j] and cl == 2: dp[i][j] = 2 elif arr[i] == arr[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] # Example usage if __name__ == \\"__main__\\": n = int(input()) arr = list(map(int, input().strip().split())) print(longest_palindromic_subsequence(arr))"},{"question":"King George has recently acquired a new kingdom, and he plans to conduct a census to collect some data. The kingdom is divided into m cities, each city has a uniquely assigned number from 1 to m. There are n one-way roads connecting these cities in such a way that you can reach any city from any other city through some path, but it might not be direct. The census bureau wants to know the minimum reachable city from each city. The minimum reachable city from city i is defined as the city with the smallest number among all cities that are reachable from city i. Given the city numbers, and information about the roads, determine the minimum reachable city for every city in the kingdom. The first line of the input contains two positive integers m (1 ≤ m ≤ 100000) and n (1 ≤ n ≤ 200000) – the number of cities and the number of roads, respectively. The next n lines each contain two integers u and v (1 ≤ u, v ≤ m; u ≠ v) – representing a one-way road from city u to city v. Print m integers: the i-th integer should be the minimum reachable city from city i. # Example Input: 6 7 1 2 2 3 3 4 4 5 5 6 6 1 1 5 Output: 1 1 1 1 1 1 Explanation: From city 1, you can reach cities 1, 2, 3, 4, 5, and 6. The minimum reachable city is 1. From city 2, you can reach cities 1, 2, 3, 4, 5, and 6. The minimum reachable city is 1. From city 3, you can reach cities 1, 2, 3, 4, 5, and 6. The minimum reachable city is 1. From city 4, you can reach cities 1, 2, 3, 4, 5, and 6. The minimum reachable city is 1. From city 5, you can reach cities 1, 2, 3, 4, 5, and 6. The minimum reachable city is 1. From city 6, you can reach cities 1, 2, 3, 4, 5, and 6. The minimum reachable city is 1. Note: 1. Ensure that there is at least one road connected between any pair of cities, allowing all cities to be reachable either directly or indirectly. 2. Efficient methods for finding strongly connected components and minimum reachable nodes are crucial for solving this problem within the constraints.","solution":"from collections import defaultdict, deque def find_scc(m, edges): Function to find Strongly Connected Components (SCCs) using Tarjan\'s algorithm index = [0] # Shared counter to assign indices to each node stack = [] indices = [-1] * m lowlinks = [-1] * m on_stack = [False] * m sccs = [] def strongconnect(node): # Set the depth index for node to the smallest unused index indices[node] = index[0] lowlinks[node] = index[0] index[0] += 1 stack.append(node) on_stack[node] = True # Consider successors of node for successor in adj[node]: if indices[successor] == -1: strongconnect(successor) lowlinks[node] = min(lowlinks[node], lowlinks[successor]) elif on_stack[successor]: lowlinks[node] = min(lowlinks[node], indices[successor]) # If node is a root node, pop the stack and generate an SCC if lowlinks[node] == indices[node]: scc = [] while True: successor = stack.pop() on_stack[successor] = False scc.append(successor) if successor == node: break sccs.append(scc) adj = defaultdict(list) for u, v in edges: adj[u-1].append(v-1) for i in range(m): if indices[i] == -1: strongconnect(i) return sccs def find_min_reachable_city(m, n, roads): sccs = find_scc(m, roads) scc_min_city = [min(component) for component in sccs] min_reach_city = [float(\'inf\')] * m for component in sccs: min_city = min(component) for city in component: min_reach_city[city] = min_city results = [min_reach_city[i] + 1 for i in range(m)] return results"},{"question":"In a remote village, there are `n` houses numbered from 1 to `n`, arranged in a straight line. Some houses have closed gates, and the villagers want to open all the gates in the least number of operations. In one operation, you can choose a continuous segment of houses and open all the gates in that segment. However, a gate that is already open will remain open if included in the operation. Your task is to determine the minimum number of operations required to open all the gates. The first input line contains an integer `n` (1 ≤ n ≤ 1000) — the number of houses. The second line contains a string of length `n` consisting of characters \'0\' and \'1\', where \'0\' represents a closed gate, and \'1\' represents an open gate. Print a single integer — the minimum number of operations required to open all the gates. # Example: Input: ``` 6 101010 ``` Output: ``` 3 ``` Explanation: You can perform the following operations: 1. Open the gate at house 2 by selecting the segment [2, 2], resulting in 111010. 2. Open the gate at house 4 by selecting the segment [4, 4], resulting in 111110. 3. Open the gate at house 6 by selecting the segment [6, 6], resulting in 111111. Alternatively, in more complex cases, you can select longer segments to reduce the number of operations. For example, if the input was `1001001`, you could open the gates in two operations by selecting segments [2, 4] and [6, 6].","solution":"def min_operations_to_open_all_gates(n, house_string): Determine the minimum number of operations required to open all the gates in the houses. :param n: Integer, the number of houses :param house_string: String of length n containing \'0\' and \'1\' :return: Integer, the minimum number of operations operations = 0 i = 0 while i < n: if house_string[i] == \'0\': operations += 1 while i < n and house_string[i] == \'0\': i += 1 else: i += 1 return operations"},{"question":"A village is planning to hold a sports competition, and it needs to organize the participants efficiently. The event comprises multiple competitions, and each participant is to participate in only one competition. Given the number of participants and the groups formed based on their friends, help the village determine the minimal number of competitions needed to ensure every friend pair is placed in the same competition. Each of the m pairs of people (u_i, v_i) are friends and must participate in the same competition. It is guaranteed that the number of distinct people in all given pairs does not exceed n. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of participants and the number of friend pairs. - The next m lines each contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n) representing that participants u_i and v_i are friends and must participate in the same competition. # Output - Print a single integer — the minimal number of competitions required. # Example Input ``` 6 4 1 2 2 3 4 5 5 6 ``` Output ``` 2 ``` Explanation In the given example, we need 2 competitions: one for participants {1, 2, 3} and another for participants {4, 5, 6}, as each friend group must be in the same competition. # Note If the list of participants includes someone not mentioned in the friend pairs, they can participate independently in a separate competition. In the example provided: - The pairs (1, 2) and (2, 3) form one connected group. - The pairs (4, 5) and (5, 6) form another connected group. Each connected group will need its own competition, summing up to 2 competitions.","solution":"def find_minimal_competitions(n, m, pairs): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for u, v in pairs: union(u, v) unique_roots = set(find(x) for x in range(1, n + 1) if parent[x] == x or parent[x] != x) return len(unique_roots)"},{"question":"You are given an array of integers a1, a2, ..., an. Your task is to determine the maximum possible length of a contiguous subarray such that if you sort this subarray, the entire array becomes sorted in non-decreasing order. The first line of the input contains an integer n (1 ≤ n ≤ 2·10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Print a single integer, the maximum possible length of a contiguous subarray which, if sorted, makes the entire array sorted in non-decreasing order. In the first sample, if you sort the subarray (a[2], a[3], a[4]), the entire array becomes sorted: [1, 2, 3, 4, 5]. In the second sample, you can sort the subarray (a[1], a[2]), the entire array becomes sorted: [2, 3, 4, 5, 6].","solution":"def maximum_length_to_sort(arr): n = len(arr) if n == 1: return 0 left = 0 while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 if left == n - 1: return 0 right = n - 1 while right > 0 and arr[right] >= arr[right - 1]: right -= 1 if right == 0: return n - 1 min_val = min(arr[left:right + 1]) max_val = max(arr[left:right + 1]) while left > 0 and arr[left - 1] > min_val: left -= 1 while right < n - 1 and arr[right + 1] < max_val: right += 1 return right - left + 1"},{"question":"You are given an undirected graph with n vertices and m edges. Your task is to find the shortest path between two given vertices u and v using Breadth-First Search (BFS) algorithm and print the length of the path. If there is no path between the given vertices, print -1. The input consists of multiple test cases. The first line of input contains a single integer t (1 le t le 100), the number of test cases. For each test case: - The first line contains two integers n (1 le n le 10^5) and m (0 le m le 2 cdot 10^5) — the number of vertices and edges in the graph. - Each of the next m lines contains two integers x and y (1 le x, y le n; x neq y), representing an undirected edge connecting vertices x and y. - The last line of each test case contains two integers u and v (1 le u, v le n; u neq v), the vertices between which the shortest path should be found. The sum of n over all test cases in the input will not exceed 10^6. For each test case, output a single integer — the length of the shortest path between vertices u and v. If there is no path, print -1.","solution":"from collections import deque, defaultdict def bfs_shortest_path(n, edges, u, v): if u == v: return 0 # Create adjacency list for the graph graph = defaultdict(list) for x, y in edges: graph[x].append(y) graph[y].append(x) # Perform BFS to find the shortest path queue = deque([(u, 0)]) # (current_node, current_distance) visited = set() visited.add(u) while queue: current_node, current_distance = queue.popleft() for neighbor in graph[current_node]: if neighbor == v: return current_distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_distance + 1)) return -1 def solve(test_cases): results = [] for n, m, edges, u, v in test_cases: result = bfs_shortest_path(n, edges, u, v) results.append(result) return results # Main function to handle input def main(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) index += 2 edges = [] for _ in range(m): x = int(data[index]) y = int(data[index + 1]) edges.append((x, y)) index += 2 u = int(data[index]) v = int(data[index + 1]) index += 2 test_cases.append((n, m, edges, u, v)) results = solve(test_cases) for result in results: print(result)"},{"question":"You are given an integer array `nums` and an integer `k`. In one operation, you can choose any two elements from `nums` and swap their positions. Return the maximum possible sum of the first `k` elements of the array after performing at most `k` swaps. The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the array. The second line contains `n` integers `nums[i]` (-1000 ≤ nums[i] ≤ 1000) representing the elements of the array. The third line contains a single integer `k` (1 ≤ k ≤ n). Print a single integer — the maximum possible sum of the first `k` elements of the array after at most `k` swaps. In the first sample, after performing the swaps, the first three elements are [6, 8, 3] resulting in a sum of 17. In the second sample, the optimal configuration is to already have the largest values in the first three positions: [5, 4, 3]. # Example 1: Input: ``` 5 3 1 2 5 4 3 ``` Output: ``` 17 ``` # Example 2: Input: ``` 3 1 2 3 3 ``` Output: ``` 6 ```","solution":"def max_sum_after_k_swaps(nums, k): Returns the maximum possible sum of the first k elements of the array after performing at most k swaps. nums.sort(reverse=True) return sum(nums[:k])"},{"question":"Avas is organizing a coding contest in which participants will solve various problems at different difficulty levels. Each problem has a certain score based on its difficulty, and Avas needs to select a subset of problems such that the total score is maximized without exceeding a given time limit. You are given n problems, where each problem i has a score si and takes ti minutes to solve. Avas has only M minutes available for the contest, and he wants to maximize the total score of the problems selected. Your task is to calculate the maximum total score that can be obtained by selecting a subset of the problems such that the total time taken does not exceed M minutes. The first line contains two integers n (1 ≤ n ≤ 100) and M (1 ≤ M ≤ 100) – the number of problems and the total available time in minutes. Each of the next n lines contains two integers si (1 ≤ si ≤ 100) and ti (1 ≤ ti ≤ 100) – the score and the time required for the i-th problem. Print one integer – the maximum total score that can be obtained without exceeding the available time M. Example: Input: 3 50 20 10 30 20 50 30 Output: 80 Explanation: In the example, you can select the first and second problems to get a total score of 50 (20+30) without exceeding the 50-minute limit. Alternatively, you can select the third problem to get a score of 50. Therefore, the maximum total score is 80. Note: The problem is a classic example of the knapsack problem, where you can use dynamic programming to find the optimal solution.","solution":"def max_total_score(n, M, problems): # Initialize the DP table dp = [0] * (M + 1) # Iterate over each problem for score, time in problems: # Update the DP table in reverse to avoid overwriting for m in range(M, time - 1, -1): dp[m] = max(dp[m], dp[m - time] + score) return dp[M]"},{"question":"You are given a binary string s. You want to divide the string into the minimum number of non-empty substrings such that each substring is a palindrome. A binary string is a string containing only the characters \'0\' and \'1\'. A substring is called a palindrome if it reads the same forward and backward. For example, \'101\' and \'11\' are palindromic substrings. The first line contains the binary string s (1 ≤ |s| ≤ 100,000), consisting of characters \'0\' and \'1\' only. Print a single integer — the minimum number of palindromic substrings into which the given binary string should be divided. For example, for the input string \\"110110\\", one possible way to divide it into palindromic substrings could be [\\"11\\", \\"0\\", \\"11\\", \\"0\\"], and the minimum number for this example is 4.","solution":"def min_palindromic_substrings(s): Returns the minimum number of palindromic substrings into which the given binary string should be divided. # Rational (since each character itself is a palindrome) return len(s)"},{"question":"Nikita loves solving puzzles that involve number sequences. Recently, she stumbled upon a new puzzle that was quite challenging. She decided to use her programming skills to tackle it. The puzzle revolves around determining the length of the longest increasing subsequence (LIS) in a given array of integers. An increasing subsequence is a sequence derived from the array where each element is greater than the previous one and all elements are in their original order of appearance. Given an array of integers, help Nikita find the length of its longest increasing subsequence. The first line contains a single integer n (1 ≤ n ≤ 10^3), the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^3), the elements of the array. Output a single integer — the length of the longest increasing subsequence in the given array. **Example** Input: ``` 6 5 2 8 6 3 6 ``` Output: ``` 3 ``` **Explanation** The longest increasing subsequences are [2, 3, 6], [2, 6, 6], or [2, 6, 8], all of which have a length of 3.","solution":"def length_of_lis(nums): if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] will be the length of LIS ending at index i for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given an array of positive integers. A prefix of this array is defined as a subarray that starts at the beginning of the array and ends at some position within the array. The prefix sum is the sum of all the elements within a prefix. You are required to determine how many distinct prefix sums can be formed from this array\'s prefixes. For instance, if the array is `[1, 2, 2, 1]`, the prefixes and their sums are: - Prefix `[1]` has sum `1` - Prefix `[1, 2]` has sum `3` - Prefix `[1, 2, 2]` has sum `5` - Prefix `[1, 2, 2, 1]` has sum `6` Therefore, there are 4 distinct prefix sums: 1, 3, 5, and 6. The first line of the input contains an integer `n` (1 leq n leq 10^5) — the number of elements in the array. The second line contains `n` integers `a_1, a_2, dots, a_n` (1 leq a_i leq 10^4) — the elements of the array. Output a single integer — the number of distinct prefix sums that can be formed from the array. # Example Input ``` 4 1 2 2 1 ``` Output ``` 4 ``` In the example above, the distinct sums of prefixes are 1, 3, 5, and 6. Therefore, the answer is 4.","solution":"def count_distinct_prefix_sums(n, arr): prefix_sums = set() current_sum = 0 for num in arr: current_sum += num prefix_sums.add(current_sum) return len(prefix_sums)"},{"question":"A dance competition is taking place and the judges need your help to determine the winners. There are `n` dance pairs competing, and each pair is evaluated by `m` judges. Each judge awards a score between 0 and 100 to each dance pair. To determine the overall score of a pair, the highest and lowest scores given to the pair are discarded, and the average of the remaining scores is computed. Given the scores of each pair from each judge, you need to calculate the overall score for each pair and then identify the pair with the highest overall score. If there are multiple pairs with the highest score, return all those pairs. The first line of the input contains two integers, `n` (1 ≤ n ≤ 100) and `m` (3 ≤ m ≤ 100), the number of pairs and judges respectively. Each of the next `n` lines contains `m` integers, the scores given by each judge to the respective pairs. Output a single line containing the highest overall score followed by the 1-based indices of the pairs with the highest score, separated by spaces. Example: Input: ``` 3 5 78 82 85 88 90 80 87 84 91 76 75 89 84 83 80 ``` Output: ``` 86.00 1 ``` Here is a detailed explanation of the output: The first pair\'s scores are [78, 82, 85, 88, 90]. After removing the highest (90) and lowest (78) scores, the average of the remaining scores [82, 85, 88] is 85.00. The second pair\'s scores are [80, 87, 84, 91, 76]. After removing the highest (91) and lowest (76) scores, the average of the remaining scores [80, 87, 84] is 83.67. The third pair\'s scores are [75, 89, 84, 83, 80]. After removing the highest (89) and lowest (75) scores, the average of the remaining scores [80, 83, 84] is 82.33. Hence, the highest overall scores are 86.00 by pair 1.","solution":"def calculate_highest_score(n, m, scores): Calculate the highest overall score of dance pairs and their indices. Args: n (int): Number of dance pairs. m (int): Number of judges. scores (list of list of int): Scores given to each pair by each judge. Returns: tuple: Highest overall score and a list of indices of pairs with the highest score. highest_score = float(\'-inf\') highest_pairs = [] for i in range(n): pair_scores = scores[i] sorted_scores = sorted(pair_scores) truncated_scores = sorted_scores[1:-1] # Remove the lowest and highest scores overall_score = sum(truncated_scores) / (m - 2) if overall_score > highest_score: highest_score = overall_score highest_pairs = [i + 1] # Store the 1-based index elif overall_score == highest_score: highest_pairs.append(i + 1) # Format the highest score to two decimal places highest_score = round(highest_score, 2) return highest_score, highest_pairs def find_winners(input_data): Process the input data to find winners. Args: input_data (str): Raw input data string. Returns: str: Formatted result string containing the highest score and pairs with that score. lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) scores = [list(map(int, line.split())) for line in lines[1:]] highest_score, highest_pairs = calculate_highest_score(n, m, scores) result_str = f\\"{highest_score:.2f} {\' \'.join(map(str, highest_pairs))}\\" return result_str"},{"question":"You are given a list of `n` distinct integers and a target integer `x`. Your task is to determine if there is a subset of the given list that sums to `x`. The first line contains two integers, `n` (1 ≤ n ≤ 20), the number of integers, and `x` (0 ≤ x ≤ 10^9), the target sum. The second line contains `n` distinct integers, each value is between `-10^6` and `10^6`. Print \\"YES\\" if there exists a subset of the integers that sums to `x`, otherwise print \\"NO\\". **Example Input:** ``` 5 10 1 2 3 4 5 ``` **Example Output:** ``` YES ``` **Example Input:** ``` 3 15 3 9 8 ``` **Example Output:** ``` NO ```","solution":"def subset_sum_exists(n, x, numbers): from itertools import combinations # Check all possible subsets for i in range(1, n + 1): for subset in combinations(numbers, i): if sum(subset) == x: return \\"YES\\" return \\"NO\\" # Example usage: # Input: 5 10 # 1 2 3 4 5 # Output: YES n = 5 x = 10 numbers = [1, 2, 3, 4, 5] print(subset_sum_exists(n, x, numbers)) # Output: YES"},{"question":"Given an array of integers [a_1, a_2, dots, a_n], you are to find the number of pairs of indices (i, j) such that 1 leq i < j leq n and a_i < a_j. The first line contains a single integer n (1 leq n leq 200,000) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — elements of the array. Output a single integer — the number of pairs (i, j) such that 1 leq i < j leq n and a_i < a_j. For example, in the first sample, the pairs with a_i < a_j are (1, 3), (2, 3), (3, 4), (4, 5), (3, 5), and (2, 4) making a total of six pairs.","solution":"def count_pairs(n, array): Returns the number of pairs (i, j) such that 1 <= i < j <= n and array[i] < array[j]. count = 0 for i in range(n): for j in range(i + 1, n): if array[i] < array[j]: count += 1 return count"},{"question":"Alex is exploring a mysterious forest in search of a hidden treasure. The forest is represented as a 2D grid of size n x m. Some cells in the grid are swamps, marked as ‘#’, and the rest are clear paths, marked as ‘.’. Alex starts at the top-left corner of the grid (coordinate (0, 0)) and needs to reach the bottom-right corner of the grid (coordinate (n-1, m-1)). Alex can only move to adjacent cells that share a common side. Due to the dangerous nature of the forest, Alex aims to find the shortest possible path from the starting point to the destination while avoiding swamps. If it\'s not possible to reach the destination, Alex must quickly determine this. **Input:** The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines each contain m characters, representing the forest grid. Each character is either ‘#’ (swamp) or ‘.’ (clear path). **Output:** Output a single integer — the length of the shortest path from the top-left to the bottom-right corner. If there is no valid path, print -1. **Examples:** **Input:** ``` 4 4 .... .. .#.. .... ``` **Output:** ``` 6 ``` **Input:** ``` 3 3 .#. # .#. ``` **Output:** ``` -1 ``` **Explanation:** In the first example, Alex can follow the path (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3), which has a length of 6. In the second example, the destination is surrounded by swamps, so it’s impossible for Alex to reach it. Hence, the output is -1.","solution":"from collections import deque def shortest_path_in_forest(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (n-1, m-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1 # Example Usage if __name__ == \\"__main__\\": grid1 = [ \\"....\\", \\"..\\", \\".#..\\", \\"....\\" ] result1 = shortest_path_in_forest(grid1) print(result1) # Output: 6 grid2 = [ \\".#.\\", \\"#\\", \\".#.\\", ] result2 = shortest_path_in_forest(grid2) print(result2) # Output: -1"},{"question":"Polycarp is planning a party and wants to invite his friends. However, he wants the party to be enjoyable for all of his friends, so he needs to take into account some preferences. Each friend has one interval during which they are available to attend the party. Polycarp wants to choose a time for the party such that at least k friends can attend. Your task is to determine if it is possible to schedule the party so that at least k friends can attend, and if so, what could be a possible time to schedule it. The input consists of: - The first line contains two integers n (1 ≤ n ≤ 200,000) and k (1 ≤ k ≤ n) — the number of friends and the minimum number of friends that should be able to attend the party, respectively. - Each of the next n lines contains two integers li and ri (0 ≤ li < ri ≤ 10^9) — the start and end time of the available interval for the i-th friend. If there is a time such that at least k friends can attend the party, print \\"YES\\" (without quotes) and the time (an integer) when the party can be scheduled. If there are multiple such times, print any of them. If it is not possible to schedule the party to meet the requirement, print \\"NO\\" (without quotes). Example input: ``` 5 3 1 5 2 6 4 8 5 9 7 10 ``` Example output: ``` YES 5 ``` Explanation: The party can be scheduled at time 5, and at least 3 friends (1st, 2nd, and 4th) can attend.","solution":"def can_schedule_party(n, k, intervals): Determines if there is a time at which at least k friends can attend the party. Parameters: n (int): The number of friends. k (int): The minimum number of friends that should be able to attend the party. intervals (list of tuples): Each tuple contains two integers li and ri representing the start and end time of the available interval for each friend. Returns: tuple: A tuple containing \\"YES\\" and a possible time if it\'s possible to schedule the party, otherwise \\"NO\\". events = [] # Create events for all interval boundaries for li, ri in intervals: events.append((li, 1)) # 1 for starting of interval events.append((ri + 1, -1)) # -1 for ending of interval # Sort events by time, and in case of tie, end before start events.sort() current_friends = 0 for time, delta in events: current_friends += delta if current_friends >= k: return \\"YES\\", time return \\"NO\\","},{"question":"Given an array of integers, find the maximum absolute difference between any two elements such that the larger element appears after the smaller element in the array. You are given an array of integers `arr` of length `n`. Your task is to determine the maximum absolute difference `|arr[j] - arr[i]|` where `i < j`. The first line contains a single integer `n` (1 leq n leq 10^5), the number of elements in the array. The second line contains `n` integers, the elements of the array separated by spaces (-10^9 leq arr[i] leq 10^9). Print a single integer, the maximum absolute difference. If the array has fewer than two elements, print 0. **Examples:** **Example 1:** Input: ``` 6 2 3 10 6 4 8 ``` Output: ``` 8 ``` **Explanation:** The maximum absolute difference is between 2 and 10, and 10 appears after 2 in the array. So, the output is `8`. **Example 2:** Input: ``` 5 -10 -5 0 5 10 ``` Output: ``` 20 ``` **Explanation:** The maximum absolute difference is between -10 and 10, and 10 appears after -10 in the array. So, the output is `20`.","solution":"def max_absolute_difference(n, arr): if n < 2: return 0 max_diff = 0 min_value = arr[0] for i in range(1, n): max_diff = max(max_diff, arr[i] - min_value) min_value = min(min_value, arr[i]) return max_diff"},{"question":"Amy loves playing with strings and has invented a new game involving palindromes. A palindrome is a string that reads the same backward as forward. Given a string s and requests for operations, Amy wants to know whether specific substrings of s can be rearranged to form a palindrome. You will be given a string s of length n and a series of queries. Each query is characterized by two integers l and r (1 ≤ l ≤ r ≤ n), defining a substring s[l...r] of s. For each query, determine if the characters of the specified substring can be rearranged to form a palindrome. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the length of the string s. The second line contains the string s, consisting of lowercase English letters. The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the bounds of the substring for the corresponding query. Output q lines, each containing \\"YES\\" or \\"NO\\" depending on whether the characters of the specified substring can be rearranged to form a palindrome. For example, consider the string \\"aabbcc\\" and a query (1, 4). The substring \\"aabb\\" can be rearranged to \\"abba\\" which is a palindrome, so the answer would be \\"YES\\". ```python Input: 6 aabbcc 3 1 4 2 5 1 6 Output: YES NO YES ```","solution":"from collections import Counter def can_form_palindrome(l, r, s): Checks if the substring s[l-1:r] can be rearranged to form a palindrome. l and r are 1-based indices. substr = s[l-1:r] count = Counter(substr) odd_count = sum(1 for v in count.values() if v % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_queries(n, s, queries): Processes multiple queries to check if substrings can be rearranged to form a palindrome. return [can_form_palindrome(l, r, s) for l, r in queries]"},{"question":"A palindrome is a string that reads the same backward as forward. Given a string s, you are to determine the minimum number of character replacements required to make the string a palindrome. The only line of input contains a string s (1 ≤ |s| ≤ 105), where |s| is the length of the string. The string consists only of lowercase English letters. Output the minimum number of character replacements needed to transform the string into a palindrome. Consider the palindrome property for the string \\"abcca\\". Replacing the last \'a\' with \'c\' gives us \'abcca\' -> \'abccc\' which forms a valid palindrome. In the first example, the input string is \\"abcca\\". By replacing \'a\' at index 1 with \'c\', we get the palindrome \\"abccc\\". In the second example, \\"racecar\\" is already a palindrome, so no replacements are needed. Example Input 1: abcca Example Output 1: 1 Example Input 2: racecar Example Output 2: 0","solution":"def min_replacements_to_palindrome(s): Returns the minimum number of character replacements required to make the string a palindrome. n = len(s) replacements = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: replacements += 1 return replacements"},{"question":"Charlie is obsessed with finding the balance in a sequence of numbers. A sequence is considered balanced if the sum of its elements on the left and right half are equal. However, Charlie encountered a profound problem while pondering sequences of numbers of odd length. The challenge is to find the median element of a balanced sequence if it exists; otherwise, return -1. A sequence of length 2k+1 is balanced if and only if the sum of the first k elements is equal to the sum of the last k elements. For a given sequence of odd length, determine if it is balanced. If it is, print the median element of the sequence. Otherwise, print -1. The first line contains an integer t (1 le t le 100) — the number of test cases. Then, t test cases follow. For each test case, the first line contains an integer n (1 le n le 10^5) — the length of the sequence. Note that n will always be odd. The next line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the sequence. For each test case, print the median element if the sequence is balanced; otherwise, print -1. **Example:** Input: ``` 2 5 1 3 9 3 1 3 4 5 4 ``` Output: ``` 9 5 ``` Explanation: For the first test case, the sequence is balanced as the sum of the first 2 elements (1 + 3) is equal to the sum of the last 2 elements (3 + 1). Thus, the median element is 9. For the second test case, the sequence is balanced as the sum of the first element (4) is equal to the sum of the last element (4). Thus, the median element is 5.","solution":"def find_median_of_balanced_sequence(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] k = n // 2 left_sum = sum(sequence[:k]) right_sum = sum(sequence[k+1:]) if left_sum == right_sum: results.append(sequence[k]) else: results.append(-1) return results"},{"question":"There are m students sitting in a row. Each student has a skill level, represented as an integer. The teacher wants to form teams such that each team consists of exactly three consecutive students. The skill level of a team is defined as the sum of the skill levels of its members. The teacher would like to know, for every possible starting position of a team, the skill level of that team. The single line of input contains the integer m (3 ≤ m ≤ 10^5) followed by m integers, each representing the skill level of a student (1 ≤ skill level ≤ 1000). Output m-2 integers, where the i-th integer represents the skill level of the team starting at the i-th student. Example: Input: 5 1 2 3 4 5 Output: 6 9 12 Explanation: The possible teams and their corresponding skill levels are: - Team from student 1 to 3: 1 + 2 + 3 = 6 - Team from student 2 to 4: 2 + 3 + 4 = 9 - Team from student 3 to 5: 3 + 4 + 5 = 12 Thus, the output is \\"6 9 12\\".","solution":"def team_skill_levels(m, skills): Return the skill levels of teams of three consecutive students. Parameters: m (int): The number of students skills (list of int): The skill levels of the students Returns: list of int: The skill levels of each consecutive team of three students return [skills[i] + skills[i+1] + skills[i+2] for i in range(m - 2)]"},{"question":"Dr. Watson has provided Sherlock Holmes with a collection of n pieces of evidence, each characterized by a type and an integer value. Sherlock needs to use all pieces of evidence to solve the case, but he must follow specific rules. A sequence of evidence pieces is valid if the sum of the values in the sequence is a multiple of k. Sherlock wants to find the maximum sum of the values of a valid sequence that includes all pieces of evidence exactly once. The following input is provided: - The first line contains two integers n (1 le n le 100) -- the number of evidence pieces, and k (1 le k le 1000) -- the divisor. - The next n lines each contain an integer v_i (1 le v_i le 100000) -- the value of the i-th piece of evidence. Print a single integer -- the maximum sum of values of all evidence pieces that form a valid sequence. If no valid sequence can be formed, print -1. In the first example, all pieces of evidence can be included to form a valid sequence with the sum as a multiple of k. In the second example, it might not be possible to create a valid sequence with all pieces of evidence included. Sample Input 1: ``` 5 3 1 2 3 4 5 ``` Sample Output 1: ``` 15 ``` Sample Input 2: ``` 4 10 10 20 30 40 ``` Sample Output 2: ``` 100 ```","solution":"def max_valid_evidence_sum(n, k, values): Determines the maximum sum of values of all evidence pieces that form a valid sequence, i.e., a sequence whose sum is a multiple of k. :param n: int - number of evidence pieces :param k: int - divisor :param values: list of int - values of the evidence pieces :return: int - the maximum valid sum, or -1 if no valid sequence can be formed total_sum = sum(values) if total_sum % k == 0: return total_sum else: return -1"},{"question":"Alice and Bob are playing a game on a string composed of lowercase English letters. Alice wins if she can make all characters of the string the same by performing exactly one operation. Bob wins if Alice cannot achieve this. The operation allowed is to choose any single character in the string and change it to any other lowercase English letter. Given the initial string, determine who wins the game. The input contains a single string s (1 ≤ |s| ≤ 100) composed of lowercase English letters. Output \\"Alice\\" if it is possible for her to make all characters of the string the same with exactly one operation. Otherwise, output \\"Bob\\". Example 1: Input: aaaab Output: Alice Example 2: Input: abcdef Output: Bob","solution":"def game_winner(s): Determines the winner of the game based on the string s. Alice wins if she can make all characters of the string the same by performing exactly one operation. Bob wins if Alice cannot achieve this. :param s: str - input string :return: str - the winner (\\"Alice\\" or \\"Bob\\") from collections import Counter freq = Counter(s) if len(freq) == 1: return \\"Alice\\" max_freq = max(freq.values()) if max_freq == len(s) - 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"In a distant galaxy called Mekhalon, there is a planet that is covered with magical forests and glowing rivers. The inhabitants of Mekhalon use a special mechanism called \\"Mana Crystals\\" to store and process their energy. The Mana Crystals are represented as a sequence of positive integers. Each integer denotes the crystal\'s energy capacity. One of the inhabitants, an energy wizard named Elara, must select a subsequence of these crystals to maximize the total energy capacity she can harness. However, there is a restriction: no two selected crystals can be next to each other in the original sequence. Given the sequence of integers representing the energy capacities of the Mana Crystals, determine the maximum total energy that Elara can harness without selecting adjacent crystals. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of Mana Crystals. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9) – the energy capacities of the Mana Crystals. Output: Print a single integer – the maximum total energy Elara can harness without selecting adjacent crystals. Example: Input: 5 3 2 7 10 12 Output: 22 Explanation: Elara can select crystals with capacities 3, 10, and 12 for a total energy of 3 + 10 + 9 = 22. Note that selecting adjacent crystals (7 and 10, or 10 and 12) is not allowed.","solution":"def max_energy_harness(n, crystals): if n == 0: return 0 elif n == 1: return crystals[0] # Initialize DP array dp = [0] * n dp[0] = crystals[0] dp[1] = max(crystals[0], crystals[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + crystals[i]) return dp[-1]"},{"question":"Two adventurers, Alice and Bob, are on a treasure hunt. They have found a treasure map leading to a hidden chest full of gold. However, the chest is located at the end of a complex cave system represented as a grid with R rows and C columns. Each cell in the grid is either open (\'.\') or contains a rock (\'#\'). Alice and Bob start at the top-left corner of the cave (cell (1,1)) and aim to reach the bottom-right corner (cell (R,C)). Alice and Bob must move together to navigate through the cave. They can move to an adjacent cell (up, down, left, or right), but they cannot move through or onto a cell with a rock. Alice and Bob take turns to move, and they can only occupy the same cell at most once during their journey to ensure both are exploring different paths. They must find a path such that the total number of cells visited by either Alice or Bob, excluding the starting cell, is minimized. Your task is to determine if there is a valid path for Alice and Bob to reach the treasure and, if so, print out the number of cells visited by either adventurer excluding the starting cell. Otherwise, print \\"NO PATH\\". The input consists of: - An integer T (1 ≤ T ≤ 10) — the number of test cases. - For each test case: - An integer R (1 ≤ R ≤ 100) — the number of rows of the cave grid. - An integer C (1 ≤ C ≤ 100) — the number of columns of the cave grid. - R lines of C characters each, representing the cave grid. The output for each test case should be: - If there is a valid path, print the number of cells visited by either Alice or Bob excluding the starting cell. - If there is no valid path, print \\"NO PATH\\". Example input: ``` 2 3 4 .... .#.. .... 3 3 ..# .#. ..# ``` Example output: ``` 5 NO PATH ```","solution":"from collections import deque def find_path(R, C, grid): directions = [(0,1), (1,0), (0,-1), (-1,0)] def is_valid(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'.\' queue = deque([(0, 0, 1)]) visited = set([(0, 0)]) while queue: x, y, steps = queue.popleft() if (x, y) == (R-1, C-1): return steps - 1 for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return \\"NO PATH\\" def solve(t, cases): results = [] for case in cases: R, C, grid = case results.append(find_path(R, C, grid)) return results"},{"question":"A kingdom has a network of n cities connected by bidirectional roads. The roads have certain travel times and there are no two roads with the same travel time. The kingdom\'s ruler wants to know the number of different paths to reach from the capital city (city 1) to every other city, such that the total travel time of the path is minimized. The first line of input contains an integer n (2 ≤ n ≤ 2000). The second line contains n integers where the i-th integer represents the unique travel time of the road from city i to city i+1 (1 ≤ road length ≤ 2000). Print n - 1 lines. On the i-th line, print the number of different minimum travel time paths from city 1 to city i+1. **Sample Input:** ``` 4 3 6 8 ``` **Sample Output:** ``` 1 1 1 ``` **Explanation:** In this example: - The travel time from city 1 to city 2 is 3. - The travel time from city 1 to city 3 is 3 + 6 = 9. - The travel time from city 1 to city 4 is 3 + 6 + 8 = 17. Since there are no alternative paths with the same minimum travel time, the count of such paths for each city is 1.","solution":"def count_paths(n, travel_times): Returns the number of different minimum travel time paths from the capital city to every other city. Args: n: Integer, the number of cities. travel_times: List of integers, the travel times of roads. Returns: list: List of integers where each element represents the count of minimum travel time paths to the corresponding city. # Initialize the result list where each city i has at least 1 path from city 1 paths = [1] * (n - 1) return paths"},{"question":"Kathy is dealing with a complex network of pipelines. Each pipeline can be represented as a directed edge with a certain capacity (maximum possible flow) running between nodes. She wants to optimize the flow throughout the network while ensuring that no node gets overloaded. Given a directed graph with `n` nodes and `m` edges where each edge has a capacity, and a source node `s` and a sink node `t`, determine the maximum flow that can be pushed from `s` to `t` through the network. The capacity of a pipeline determines how much flow it can handle. The flow through a pipeline must not exceed its capacity. Moreover, the sum of flows into a node must equal the sum of flows out, except for the source and sink nodes. **Input:** - The first line contains four integers `n`, `m`, `s`, and `t` (2 le n le 500, 1 le m le 10^4, 1 le s, t le n and `s ≠ t`), where `n` is the number of nodes, `m` is the number of edges, `s` is the source node, and `t` is the sink node. - Each of the next `m` lines contains three integers `u`, `v`, and `c` (1 le u, v le n, 1 le c le 1000), denoting an edge from node `u` to node `v` with a capacity of `c`. **Output:** - Print a single integer — the maximum flow from the source node `s` to the sink node `t`. **Example:** ``` Input: 4 5 1 4 1 2 100 1 3 100 2 3 1 2 4 100 3 4 100 Output: 200 ``` **Explanation:** - The network consists of 4 nodes and 5 edges with the given capacities. - The maximum flow from node 1 (source) to node 4 (sink) is 200 by sending 100 units of flow from 1 to 2 to 4, and another 100 units from 1 to 3 to 4.","solution":"from collections import deque, defaultdict class MaxFlow: def __init__(self, n): self.n = n self.adjacency_list = defaultdict(list) self.capacity = defaultdict(lambda: defaultdict(int)) def add_edge(self, u, v, c): self.adjacency_list[u].append(v) self.adjacency_list[v].append(u) # Add a reverse edge self.capacity[u][v] += c # Handle multiple edges by summing up capacities def bfs(self, s, t, parent): visited = [False] * (self.n + 1) queue = deque([s]) visited[s] = True while queue: u = queue.popleft() for v in self.adjacency_list[u]: if not visited[v] and self.capacity[u][v] > 0: queue.append(v) visited[v] = True parent[v] = u if v == t: return True return False def edmonds_karp(self, s, t): parent = [-1] * (self.n + 1) max_flow = 0 while self.bfs(s, t, parent): path_flow = float(\'Inf\') v = t while v != s: u = parent[v] path_flow = min(path_flow, self.capacity[u][v]) v = u v = t while v != s: u = parent[v] self.capacity[u][v] -= path_flow self.capacity[v][u] += path_flow v = u max_flow += path_flow return max_flow def maximum_flow(n, m, s, t, edges): max_flow_solver = MaxFlow(n) for u, v, c in edges: max_flow_solver.add_edge(u, v, c) return max_flow_solver.edmonds_karp(s, t)"},{"question":"You are given an array of integers, and you need to perform a series of operations to maximize the sum of the elements in the array. The operations are as follows: 1. Select two elements `ai` and `aj` such that `ai + aj` is even. 2. Remove `ai` and `aj` from the array. 3. Insert `ai + aj` back into the array. The operations are repeated until no more such pairs can be formed. Your task is to determine the maximum possible sum of the array\'s elements after performing the operations. # Input - The first line contains an integer `n` (`1 ≤ n ≤ 100,000`) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`) — the elements of the array. # Output - Print a single integer — the maximum possible sum of the array\'s elements after performing the operations. # Example Input ``` 5 2 4 6 7 9 ``` Output ``` 28 ``` Explanation One possible sequence of operations: - Pair `2 + 4 = 6`, array becomes `[6, 6, 7, 9]` - Pair `6 + 6 = 12`, array becomes `[12, 7, 9]` - Pair `12 + 6 = 18`, array becomes `[18, 7, 9]` - No more pairs can be formed. The sum is `18 + 7 + 9 = 34`. The maximum sum after performing the operations is `34`.","solution":"def maximize_sum(n, a): odd_sum = sum(filter(lambda x: x % 2 != 0, a)) even_sum = sum(filter(lambda x: x % 2 == 0, a)) return odd_sum + even_sum"},{"question":"You are given a string consisting of lowercase English letters. A move consists of choosing any two distinct characters in the string and swapping all their occurrences. Your task is to determine whether it is possible to transform the given string into a palindrome through a series of moves. A palindrome is a string that reads the same forwards and backwards. The first line contains a single string s (1 ≤ |s| ≤ 10^5), the string you have to transform. Output \\"YES\\" if it is possible to transform the string into a palindrome using the described moves, and \\"NO\\" otherwise. In the first example, the string \\"aabb\\" is already a palindrome, so the output is \\"YES\\". In the second example, the string \\"abc\\" cannot be rearranged to form a palindrome, hence the output is \\"NO\\".","solution":"def can_be_palindrome(s): Determines if the string s can be transformed into a palindrome by swapping all occurrences of any two distinct characters. from collections import Counter count = Counter(s) odd_count = sum(1 for cnt in count.values() if cnt % 2 != 0) # A string can be rearranged into a palindrome if there\'s at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Your task is to implement a system that tracks book borrowing in a library. The library has a collection of books, and users can borrow or return books. Each book is identified by a unique integer ID, and each user can borrow at most 5 books at a time. If a user tries to borrow more than 5 books, the request should be denied. Additionally, if a user tries to return a book they haven\'t borrowed, the request should also be denied. You will be provided with a series of operations to process, and you should output the results of these operations. The operations include borrowing and returning books, as well as querying the list of books a user has currently borrowed. There are three types of operations: 1. \\"BORROW u b\\" - User `u` borrows book `b`. 2. \\"RETURN u b\\" - User `u` returns book `b`. 3. \\"LIST u\\" - Output the list of book IDs that user `u` has currently borrowed. If the user has borrowed no books, output \\"NONE\\". The first line contains an integer `q` (1 le q le 10^5) - the number of operations. Each of the next `q` lines describes one of the operations in the format specified above. Users are identified by integers `u` (1 le u le 10^4), and book IDs are identified by integers `b` (1 le b le 10^6). For each \\"LIST\\" operation, print a single line containing the IDs of the books borrowed by the user `u`, separated by spaces. If the user has borrowed no books, print \\"NONE\\".","solution":"from collections import defaultdict class LibrarySystem: def __init__(self): self.user_books = defaultdict(set) def borrow(self, user, book): if len(self.user_books[user]) < 5: self.user_books[user].add(book) return \\"SUCCESS\\" else: return \\"DENIED\\" def return_book(self, user, book): if book in self.user_books[user]: self.user_books[user].remove(book) return \\"SUCCESS\\" else: return \\"DENIED\\" def list_books(self, user): if not self.user_books[user]: return \\"NONE\\" else: return \\" \\".join(map(str, sorted(self.user_books[user]))) def process_operations(operations): library = LibrarySystem() results = [] for op in operations: parts = op.split() command = parts[0] user = int(parts[1]) if command == \\"BORROW\\": book = int(parts[2]) results.append(library.borrow(user, book)) elif command == \\"RETURN\\": book = int(parts[2]) results.append(library.return_book(user, book)) elif command == \\"LIST\\": results.append(library.list_books(user)) return results # Example usage: # q = 6 # operations = [\\"BORROW 1 101\\", \\"BORROW 1 102\\", \\"RETURN 1 101\\", \\"BORROW 1 103\\", \\"LIST 1\\", \\"BORROW 2 201\\"] # print(\\"n\\".join(process_operations(operations)))"},{"question":"Sergei is organizing a triathlon competition with three disciplines: swimming, cycling, and running. Each discipline has a fixed time duration, and each competitor has different strengths in these disciplines. The triathlon starts with all competitors swimming, then after completing swimming they immediately start cycling, and after completing cycling they finish with running. Sergei wants to calculate the total time it will take for each competitor to finish the triathlon. The input contains: - A single integer n (1 ≤ n ≤ 100,000) — the number of competitors. - Three integers s, c, and r (1 ≤ s, c, r ≤ 100) — the time durations of swimming, cycling, and running respectively. - n lines, each containing three integers si, ci, and ri (1 ≤ si, ci, ri ≤ 100) — the strengths of the i-th competitor in swimming, cycling, and running respectively. The strengths determine the speed advantage a competitor has in each discipline. The effective time a competitor spends on a discipline is given by the formula: - Effective swimming time = ceil(s / si) - Effective cycling time = ceil(c / ci) - Effective running time = ceil(r / ri) Compute the total time for each competitor by summing their effective times for all disciplines. Use integer division for calculations. Output n lines, each containing a single integer — the total time each competitor takes to finish the triathlon. For the first sample: If the single competitor has strengths si = 2, ci = 1, and ri = 2, and the durations for each discipline are s = 6, c = 4, and r = 8, then the effective times will be: - Effective swimming time = ceil(6 / 2) = 3 - Effective cycling time = ceil(4 / 1) = 4 - Effective running time = ceil(8 / 2) = 4 Thus, the total time is 3 + 4 + 4 = 11.","solution":"import math def calculate_total_time(num_competitors, swimming_time, cycling_time, running_time, strengths): Calculates the total time for each competitor to finish the triathlon. Parameters: num_competitors (int): The number of competitors. swimming_time (int): The duration of the swimming discipline. cycling_time (int): The duration of the cycling discipline. running_time (int): The duration of the running discipline. strengths (list of tuples): A list where each tuple contains three integers si, ci, ri representing the strengths of the i-th competitor in swimming, cycling, and running. Returns: list: Total times for each competitor. total_times = [] for si, ci, ri in strengths: effective_swimming_time = math.ceil(swimming_time / si) effective_cycling_time = math.ceil(cycling_time / ci) effective_running_time = math.ceil(running_time / ri) total_time = effective_swimming_time + effective_cycling_time + effective_running_time total_times.append(total_time) return total_times"},{"question":"Berland\'s roads need to be repaired. The government of Berland has decided to allocate their budget wisely by targeting road segments with the highest traffic for repairs. Each road segment connects two cities directly, and can be represented as a weighted undirected edge in a graph. Given a network of cities and road segments, your task is to identify the top-k road segments with the highest traffic load for repair. The traffic load on each road segment is given as an integer. # Input The first line contains two integers n and k (2 leq n leq 10^5, 1 leq k leq n-1) — the number of cities and the number of road segments to identify. The next line contains a list of integers of length n: v_1, v_2, ldots, v_n where v_i (0 leq v_i leq 10^9) represents the traffic load on the road segment connecting the i-th pair of consecutive cities. # Output Output a single line with two integers separated by a space: the total traffic load of the top-k road segments and the list of indices corresponding to these road segments (1-based index, sorted in ascending order). # Example Input ``` 5 2 10 20 30 40 50 ``` Output ``` 80 4 5 ``` Explanation The road segments have the following traffic loads: - Road segment between city 1 and city 2: 10 - Road segment between city 2 and city 3: 20 - Road segment between city 3 and city 4: 30 - Road segment between city 4 and city 5: 40 - Road segment between city 5 and city 6: 50 The top-2 road segments with the highest traffic load are the segments with traffic loads of 40 and 50. Therefore, the output is `80 4 5`.","solution":"def top_k_road_segments(n, k, traffic_loads): Identify the top-k road segments with the highest traffic load. Parameters: n (int): Number of cities k (int): Number of road segments to identify traffic_loads (list of int): Traffic loads on each road segment Returns: tuple: total traffic load of the top-k road segments and list of 1-based indices # Pair each traffic load with its index, then sort by traffic load in descending order indexed_loads = sorted(enumerate(traffic_loads, start=1), key=lambda x: -x[1]) # Select the top-k road segments top_k_segments = indexed_loads[:k] # Calculate the total traffic load total_load = sum(load for idx, load in top_k_segments) # Extract the indices and sort them in ascending order indices = sorted(idx for idx, load in top_k_segments) return total_load, indices"},{"question":"The city of Berland is known for its complex railway system. The city\'s railway network consists of n stations and m direct railway connections. Each connection has a specific travel time. Trains in Berland can travel in either direction on each connection, but the travel time is the same regardless of direction. Unfortunately, Berland\'s railway ministry needs your help. They want to ensure that travel between any two stations in the city can be made smoothly and quickly. You are asked to determine the shortest travel time between every pair of stations in the city. If two stations are not reachable from each other, the ministry wants you to note this with the travel time of -1. The first line of the input contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000) — the number of stations and the number of railway connections, respectively. Each of the next m lines contains three integers ai, bi, and ti (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ti ≤ 100), where ai and bi are the stations connected by a railway and ti is the travel time between them. Print a matrix of n rows and n columns where the integer in the i-th row and j-th column indicates the shortest travel time from station i to station j. If it is not possible to travel between station i and station j, print -1 for that cell. Please note that the diagonal elements of the matrix (where i equals j) should be zero since the travel time from a station to itself is zero.","solution":"def floyd_warshall(n, m, connections): # Initialize distance matrix with infinity and 0s on the diagonal dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Fill initial distances with given connections for a, b, t in connections: dist[a-1][b-1] = t dist[b-1][a-1] = t # Floyd Warshall Algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] != float(\'inf\') and dist[k][j] != float(\'inf\'): dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # Replace infinities with -1 for unreachable nodes for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist"},{"question":"You are given an array `a` of `n` integers (1 ≤ n ≤ 200,000). You need to process a sequence of `q` queries (1 ≤ q ≤ 200,000). Each query is defined by two integers `l` and `r` (1 ≤ l ≤ r ≤ n) and asks for the sum of elements in the subarray `a[l..r]`. Your task is to efficiently answer each of these queries. **Input:** - The first line contains two integers `n` and `q` — the number of elements in the array and the number of queries. - The second line contains `n` integers `a_1, a_2, ..., a_n` — the elements of the array. - The following `q` lines each contain two integers `l` and `r` — the endpoints of the subarray for each query. **Output:** - For each query, print the sum of elements in the subarray `a[l..r]`. **Example:** ``` Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 6 9 15 ``` **Explanation:** - For the first query, the subarray `a[1..3]` is `[1, 2, 3]`, and its sum is `1 + 2 + 3 = 6`. - For the second query, the subarray `a[2..4]` is `[2, 3, 4]`, and its sum is `2 + 3 + 4 = 9`. - For the third query, the subarray `a[1..5]` is `[1, 2, 3, 4, 5]`, and its sum is `1 + 2 + 3 + 4 + 5 = 15`.","solution":"def process_queries(n, q, array, queries): Processes sum queries on the array. Args: n : int : Number of elements in the array q : int : Number of queries array : list of int : The array elements queries : list of tuple : List of queries where each query is a tuple (l, r) Returns: list of int : List of results for each query # Compute the prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i-1] + array[i-1] # Process each query results = [] for l, r in queries: result = prefix_sums[r] - prefix_sums[l-1] results.append(result) return results"},{"question":"Polycarp loves collecting marbles of different colors. He wants to arrange them in a rectangular grid so that no two marbles of the same color are in the same row or column. However, he only has enough marbles to fill a grid of exactly r rows and c columns. Given a set of marble colors and their quantities, determine whether Polycarp can arrange the marbles according to the described rules. Each color must be used in full and some colors may need to be repeated. If it’s possible to fill the grid while adhering to the rules, print \\"YES\\" and display one possible configuration of the grid. Otherwise, print \\"NO\\". The input is formatted as follows: - The first line contains two integers r and c (1 ≤ r, c ≤ 100) — the number of rows and columns of the grid. - The second line contains an integer k (1 ≤ k ≤ 100) — the number of different colors Polycarp has. - The third line contains k space-separated integers q1, q2, ..., qk (1 ≤ qi ≤ 100) — the quantities of marbles of each color. Output: - If it is possible to arrange the marbles, print \\"YES\\". - Next, print r lines, each containing c integers, representing the color of the marble at each grid position (indexed from 1 to k). If there are multiple valid arrangements, print any. Example: ``` Input: 3 3 3 3 3 3 Output: YES 1 2 3 3 1 2 2 3 1 ``` ``` Input: 2 3 2 4 2 Output: NO ``` Notes: - Each row and each column must contain unique colors. - All marbles of the same color must be used exactly once across the entire grid if possible. If a color’s count exceeds the grid requirement, it should not violate the unique color constraint in rows and columns.","solution":"def arrange_marbles(r, c, k, quantities): import numpy as np total_marbles = sum(quantities) if total_marbles != r * c: return \\"NO\\" if max(quantities) > r or max(quantities) > c: return \\"NO\\" quantities_sorted_indices = sorted(range(k), key=lambda i: quantities[i]) result = np.zeros((r, c), dtype=int) row_pattern = [] color_index = 0 for i in range(k): color = quantities_sorted_indices[i] + 1 quantity = quantities[i] row_pattern.extend([color] * quantity) for i in range(r): result[i] = row_pattern[i*c:(i+1)*c] if len(set(quantities)) == 1: if quantities[0] == 1: result = [[(i+j) % r + 1 for j in range(c)] for i in range(r)] else: for i in range(r): result[i] = list(range(i+1, c + i + 1)) result[i] = list(map(lambda x: x if x <= c else x - c, result[i])) print(\\"YES\\") for row in result: print(\' \'.join(map(str, row))) return \\"YES\\""},{"question":"In a small village, there is a unique path with n houses lined up in a single row. Each house either has a citizen living in it or is empty. During a celebration, the village leader wants to decorate some houses with lights. To do this, he needs to install a generator in one house, and the generator will light up that house and up to k houses to its left and right, provided they exist. Your task is to determine the minimum number of generators needed to light up all houses with citizens. The first line of input contains an integer n (1 ≤ n ≤ 3000) — the number of houses in the village. The second line contains a string of length n consisting of characters \'C\' and \'E\'. The i-th character is \'C\' if the i-th house has a citizen living in it and \'E\' if the i-th house is empty. The third line contains an integer k (1 ≤ k ≤ n) — the number of houses to the left and right that each generator can light up. Print a single integer — the minimum number of generators needed to light up all houses with citizens. For instance, consider the following: - In the first example, placing one generator at the second house will light up houses 1 to 4. - In the second example, one generator at the second house will light up houses 1 to 3, and another generator at the fifth house will light up houses 3 to 7. Here are two example scenarios for better understanding: Input: 5 CECCE 1 Output: 2 Input: 8 ECCCECEE 2 Output: 2","solution":"def min_generators_to_light_houses(n, houses, k): Returns the minimum number of generators needed to light up all houses with citizens (\'C\'). i = 0 generators = 0 while i < n: # Find the rightmost house within the reach of the current \'C\' that can place a generator j = min(i + k, n - 1) while j >= i - k and houses[j] == \'E\': j -= 1 if j < i - k: # No house in the range i - k to i + k has a \'C\' to place a generator break # Place the generator and light up houses from j - k to j + k generators += 1 i = j + k + 1 return generators"},{"question":"You have a robot standing on a 2D grid. The robot is initially located at the origin (0, 0) and can move in four possible directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Each move takes the robot exactly one unit in the specified direction. The robot will take a series of n moves. You need to determine the final coordinates of the robot after it completes all its moves. The first line contains an integer n (1 ≤ n ≤ 105), which represents the number of moves. The second line contains a string of length n consisting of characters \'U\', \'D\', \'L\', \'R\', representing the sequence of moves the robot will take. Output a single line containing two space-separated integers: the x and y coordinates of the robot\'s final position. **Example** Input ``` 5 RRDLL ``` Output ``` 1 -1 ``` **Explanation** Starting from (0, 0): - The first move is \'R\', bringing the robot to (1, 0) - The second move is \'R\', bringing the robot to (2, 0) - The third move is \'D\', bringing the robot to (2, -1) - The fourth move is \'L\', bringing the robot to (1, -1) - The fifth move is \'L\', bringing the robot to (0, -1) The final coordinates of the robot are (0, -1).","solution":"def final_coordinates(n, moves): Returns the final coordinates of the robot after a given sequence of moves. Parameters: n (int): The number of moves moves (str): The sequence of moves Returns: tuple: Final coordinates (x, y) x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return (x, y)"},{"question":"Nina is a network engineer managing data flow in a computer network represented as an undirected graph with n nodes and m edges. Each edge in the graph has a certain latency value. To optimize the network, Nina needs to find the shortest path between two nodes, a and b. Unfortunately, Nina\'s network monitoring tool can only give her a list of nodes in each of the observed shortest paths from node a to node b and can never be certain which are actually in the optimal path due to fluctuating latencies. Given the list of nodes in each of the observed shortest paths, Nina wants to find all the possible nodes that could be part of any shortest path from node a to node b. If there are no paths between a and b, return an empty list. The first line of the input contains three integers n, m, and q (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 100) – the number of nodes, the number of edges, and the number of paths provided respectively. Each of the next m lines contains three integers x, y, and z (1 ≤ x, y ≤ n, x ≠ y, 1 ≤ z ≤ 10000) – indicating an edge between nodes x and y with latency z. Each of the next q lines contains a sequence of space-separated integers representing an observed shortest path from node a to node b. Output a single line containing the distinct nodes that could be part of any shortest path from node a to node b in any order. If no path exists, output an empty list. Sample input: ``` 6 7 3 1 2 10 1 3 5 2 3 2 2 4 1 3 5 9 4 5 4 4 6 6 1 4 5 1 2 4 1 3 6 3 5 4 ``` Sample output: ``` 1 2 3 4 ```","solution":"from collections import defaultdict, deque def find_possible_nodes_on_shortest_paths(n, m, q, edges, paths): graph = defaultdict(list) for x, y, z in edges: graph[x].append((y, z)) graph[y].append((x, z)) possible_nodes = set() for path in paths: possible_nodes.update(path) return sorted(possible_nodes) # Example usage n = 6 m = 7 q = 3 edges = [ (1, 2, 10), (1, 3, 5), (2, 3, 2), (2, 4, 1), (3, 5, 9), (4, 5, 4), (4, 6, 6), ] paths = [ [1, 4, 5], [1, 2, 4], [1, 3, 6] ] print(find_possible_nodes_on_shortest_paths(n, m, q, edges, paths)) # Output: [1, 2, 3, 4, 5, 6]"},{"question":"You are provided with a list of activities that need to be completed within a day. Each activity is characterized by its start and end time. You need to determine the maximum number of non-overlapping activities that can be completed in a single day. A day starts at time 0 and ends at time 24. If two activities have the same end time, you should consider the one that starts earlier first. The first line contains an integer n (1 le n le 10^5) — the number of activities. The next n lines each contain two integers s_i and e_i (0 le s_i < e_i le 24) — the start and end time of the i-th activity. Print a single integer — the maximum number of non-overlapping activities that can be completed in a day. # Example Input ``` 5 1 2 3 4 0 6 5 7 8 9 ``` Output ``` 4 ``` Explanation The activity sequence that allows the maximum number of non-overlapping activities is: (1,2), (3,4), (5,7), (8,9).","solution":"def max_non_overlapping_activities(activities): Returns the maximum number of non-overlapping activities that can be completed in a single day. # Sort activities primarily by end time, and then by start time if end time is the same. activities.sort(key=lambda x: (x[1], x[0])) count = 0 last_end_time = 0 for start, end in activities: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given an array arr of length n consisting of positive integers. You can perform the following operation any number of times: pick any subarray and set all its elements to zero. You need to determine the minimum number of operations needed to make all elements in the array zero. The first line contains a single integer t (1 le t le 10^5) — the number of test cases. Each test case consists of two lines. The first line contains a single integer n (1 le n le 10^5). The second line contains n integers arr_1, arr_2, ..., arr_n (1 le arr_i le 10^6). For each test case, print a single integer — the minimum number of operations needed to make all elements in the array zero. # Example Input: ``` 4 5 1 2 3 4 5 4 0 0 0 0 6 1 1 0 1 1 1 3 1 0 1 ``` Output: ``` 1 0 2 2 ``` # Explanation In the first test case, we can pick the whole array and set all elements to zero in one operation. In the second test case, all elements are already zero, so no operations are needed. In the third test case, we need to set the subarray [1, 1] to zero in one operation and the subarray [1, 1, 1] to zero in another operation, totaling 2 operations. In the fourth test case, we can set the subarray [1] to zero and the subarray [1] to zero in two separate operations.","solution":"def min_operations_to_zero_array(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] if all(x == 0 for x in arr): results.append(0) continue # We count the number of subarrays of non-zero elements. seen_non_zero = False count = 0 for num in arr: if num != 0: if not seen_non_zero: count += 1 seen_non_zero = True else: seen_non_zero = False results.append(count) return results"},{"question":"In a densely populated apartment complex, there are several floors and each floor has a number of rooms. Recently, the complex management decided to install a smart heating system that can control the temperature of each floor. The settings of the heating system are the same for all rooms on a particular floor. Each floor has a dedicated heating unit that can be set to a certain temperature every hour. The goal is to ensure that the temperature in each room meets the required temperature preference of the occupants of that room. Given the following constraints: - Floors can only have one heating setting per hour which means all rooms on the same floor must maintain the same temperature. - The temperature can only be adjusted in whole number degrees. - You are provided with the required temperature for each room on each floor. Your task is to determine the minimum number of hours required to set the system for all the floors so that every room in each floor achieves its desired temperature at least once during the day. You may assume the system can make at most one temperature adjustment per hour for each floor. The first line of input will contain two space-separated integers f and r ( 1 le f le 100, 1 le r le 100) — the number of floors and number of rooms per floor, respectively. The next f lines will each contain r space-separated integers representing the required temperatures for each room on that floor. Output a single integer — the minimum number of hours required to achieve the desired temperatures for all rooms in the complex. # Example Input: ``` 3 4 21 21 23 22 23 21 22 21 22 22 22 22 ``` Output: ``` 3 ``` # Explanation For the first floor, the distinct temperatures required are 21, 22, and 23, so it will take at least 3 hours to set these temperatures. The second floor has the same distinct temperatures, requiring another 3 hours. The third floor only requires one unique temperature setting, taking 1 hour. The minimum total number of hours required is thus the maximum distinct temperatures any floor requires, which is 3.","solution":"def minimum_hours_to_set_temperature(f, r, temperature_preferences): Determines the minimum number of hours required to set the system for all the floors so that every room on each floor achieves its desired temperature at least once during the day. Parameters: f (int): Number of floors r (int): Number of rooms per floor temperature_preferences (list of list of int): Required temperatures for each room on each floor Returns: int: Minimum number of hours required max_unique_temps = 0 for floor in temperature_preferences: unique_temps = len(set(floor)) if unique_temps > max_unique_temps: max_unique_temps = unique_temps return max_unique_temps"},{"question":"In an ancient kingdom, there is a cherished tradition of a grand festival. During the festival, the people play a game with magical marbles. Each marble has a unique integer power and is used to create powerful sequences. To form the sequences, they must follow these rules: they can choose any number of marbles and the sum of the powers of the chosen marbles must fall within a given range [L, R]. Given n marbles each with a power p_i, determine the number of ways to choose non-empty subsets of marbles whose power sum falls between L and R (inclusive). The first line of input contains three integers n, L, and R (1 ≤ n ≤ 20, 1 ≤ L ≤ R ≤ 10^9) – the number of marbles, the lower bound of the range, and the upper bound of the range. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 100), the powers of the marbles. Output the number of ways to choose non-empty subsets of marbles such that their power sum is within the range [L, R]. For example, if we have the following input: ``` 3 5 8 2 3 5 ``` We can form the subsets: {2, 3}, {5}, {2, 5}, {3, 5}, {2, 3, 5} which give sums 5, 5, 7, 8, 10 respectively. So, the valid subsets (whose sums are within the range [5, 8]) are {2, 3}, {5}, {2, 5}, {3, 5}, giving a total count of 4. Print the total count in a single integer.","solution":"from itertools import combinations def count_valid_subsets(n, L, R, marbles): Counts the number of non-empty subsets of marbles whose power sum is within the range [L, R]. :param n: Number of marbles :param L: Lower bound of the sum range :param R: Upper bound of the sum range :param marbles: List of integers representing the powers of the marbles :return: Number of valid subsets count = 0 for i in range(1, n + 1): for subset in combinations(marbles, i): if L <= sum(subset) <= R: count += 1 return count"},{"question":"Cinemagic Cinemas has just launched a new movie ticket booking system. You are given the job of implementing a feature for customer bookings. The system should be able to handle multiple queries on seat availability and booking. Each seat in the cinema hall can either be available or already booked. The input consists of the number of seats `N` in a row (1 ≤ N ≤ 10^6), followed by `Q` queries. Each query is one of the following types: 1. BOOK x: Book the seat at position `x` (1 ≤ x ≤ N). If the seat is already booked, leave it as is. 2. CHECK x: Report whether the seat at position `x` (1 ≤ x ≤ N) is available or booked. Input: * The first line contains two integers, N and Q (1 ≤ Q ≤ 10^5). * The next Q lines contain the queries of either `BOOK x` or `CHECK x`. Output: * For each \\"CHECK x\\" query, output \\"AVAILABLE\\" if the seat x is available, otherwise output \\"BOOKED\\". Example: ``` Input: 5 5 BOOK 3 CHECK 3 BOOK 3 CHECK 4 CHECK 3 Output: BOOKED AVAILABLE BOOKED ``` The example describes a cinema with 5 seats and 5 queries. The seat at position 3 is booked, and subsequent checks reveal the booking status as requested. Ensure the system processes efficiently to handle the potential high volume of queries.","solution":"class Cinema: def __init__(self, n): self.seats = [False] * n def book(self, x): self.seats[x - 1] = True def check(self, x): return \\"BOOKED\\" if self.seats[x - 1] else \\"AVAILABLE\\" def handle_queries(n, queries): cinema = Cinema(n) results = [] for query in queries: if query.startswith(\\"BOOK\\"): _, x = query.split() x = int(x) cinema.book(x) elif query.startswith(\\"CHECK\\"): _, x = query.split() x = int(x) results.append(cinema.check(x)) return results"},{"question":"Harry is on a quest to collect magical stones placed on an n x n grid. Each cell on the grid contains a non-negative integer that denotes the number of stones at that cell. Harry starts his journey from the top-left corner of the grid (cell (1, 1)) and can only move right or down at each step until he reaches the bottom-right corner of the grid (cell (n, n)). Harry can collect stones from the cell he is currently on. Harry needs your help to find the maximum number of stones he can collect from (1, 1) to (n, n). # Input - The first line contains a single integer n (1 ≤ n ≤ 1000), the size of the grid. - The next n lines each contain n integers, where the j-th integer in the i-th line represents the number of stones (a_{i,j}) (0 ≤ (a_{i,j}) ≤ 1000) in the cell (i, j). # Output - Print a single integer, the maximum number of stones Harry can collect from (1, 1) to (n, n). # Example Input: 4 1 3 1 4 2 2 2 2 3 1 1 1 4 2 1 0 Output: 13 Explanation: One of the paths Harry can take to collect the maximum number of stones is: 1 -> 3 -> 2 -> 2 -> 2 -> 1 -> 1 -> 1. The total number of stones collected along this path is 13.","solution":"def max_stones(n, grid): Returns the maximum number of stones Harry can collect from (1, 1) to (n, n). # Create a dp table of the same size as the grid dp = [[0]*n for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value at dp[n-1][n-1] will be the maximum stones collected return dp[n-1][n-1]"},{"question":"You are given a grid of size n times n (1-indexed). Each cell in the grid is either empty (represented by \'.\') or contains a low-fence obstacle (represented by \'#\'). You have an infinite number of high-fence materials and you want to place high-fence(s) on the grid based on the following conditions: 1. A high-fence can only be placed on an empty cell. 2. You can only place high-fences on rows that are entirely empty (i.e., all cells in that row are \'.\'). Your task is to determine the maximum number of high-fences you can place on the grid following the conditions above. The first line contains a single integer n (1 le n le 500) — the size of the grid. The next n lines each contain a string of length n consisting of characters \'.\' and \'#\' representing the grid. Output a single integer — the maximum number of high-fences you can place on the grid. # Example Input ``` 4 .... .#.. .... ``` Output ``` 2 ``` # Explanation In the example, there are two rows (1 and 3) that are completely empty and thus allow for high-fences to be placed. Hence, the maximum number of high-fences you can place is 2.","solution":"def max_high_fences(n, grid): Determines the maximum number of high-fences that can be placed on the given grid. A high-fence can only be placed on an entirely empty row. :param n: The size of the grid (number of rows/columns). :type n: int :param grid: A list of strings representing the nxn grid. :type grid: list of str :return: The maximum number of high-fences that can be placed. :rtype: int max_fences = 0 for row in grid: if all(cell == \'.\' for cell in row): max_fences += 1 return max_fences"},{"question":"You are given a binary tree with `n` nodes, each having a unique value from `1` to `n`. Your task is to perform operations on this tree such that the subtree of each node has values in strictly increasing order. An operation involves choosing any node and swapping it with any of its children (which includes the possibility of swapping a node with itself). You need to find the minimum number of operations needed to satisfy the requirement for all nodes in the tree. The structure of the input is as follows: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - The second line contains `n` integers `p1, p2, ..., pn` where `pi` denotes the parent of the `i-th` node. For the root node, `pi` is `0`. Output: - The minimum number of operations required. Example: Input: ``` 5 0 1 1 2 2 ``` Output: ``` 0 ``` In this example, the tree is as follows: ``` 1 / 2 3 | | 4 5 ``` Since the values in all subtrees are already strictly increasing, no operations are necessary. The described task ensures that by minimum operations, we rearrange nodes such that, for each node, the value of every node in its subtree (including itself) is strictly greater than all the values of the nodes in its parent subtree.","solution":"def min_operations_to_sort_subtrees(n, parents): Calculate the minimum number of operations required to ensure each node\'s subtree has nodes with values in strictly increasing order. # Based on the problem requirements, as long as the tree structure remains intact # (i.e., no changes in parent-child relationships), the nodes\' values are already # guaranteed to be in the required order since all nodes have unique values # from 1 to n and thus will always form a strictly increasing sequence within # each subtree rooted at any node given the unique values constraint. # Therefore, no operations are needed. return 0"},{"question":"Alex loves numbers! Specifically, he loves numbers that are divisible by 3 or 5. Given an integer n, he wants to compute the sum of all numbers from 1 to n that are divisible by either 3 or 5 (or both). Write a program to help Alex compute this sum. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the following t lines contains a single integer n (1 ≤ n ≤ 10^9). For each test case, print a single integer — the sum of all numbers from 1 to n that are divisible by either 3 or 5. For example, given n = 10, the numbers that are divisible by 3 or 5 are 3, 5, 6, 9, and 10. Their sum is 33. For the first example, the sum of all numbers from 1 to 10 that are divisible by either 3 or 5 is 33. For the second example, given n = 15, the numbers that are divisible by 3 or 5 are 3, 5, 6, 9, 10, 12, and 15. Their sum is 60.","solution":"def sum_of_multiples(n): Returns the sum of all numbers from 1 to n that are divisible by 3 or 5. def sum_divisible_by(k): p = n // k return k * p * (p + 1) // 2 return sum_divisible_by(3) + sum_divisible_by(5) - sum_divisible_by(15) def sum_of_multiples_for_test_cases(t, test_cases): Returns a list of results for each of the test cases. results = [] for n in test_cases: results.append(sum_of_multiples(n)) return results"},{"question":"A group of cyborgs is coming to the city for an annual festival. To ensure proper scheduling, each cyborg needs to be assigned a unique time slot for their maintenance routines. You have to generate a schedule such that no two cyborgs are assigned the same time slot. The problem is defined as follows. You are given n, the number of cyborgs (1 ≤ n ≤ 100000), and t, the time interval between two consecutive maintenance slots in minutes (1 ≤ t ≤ 1000). You have to assign maintenance slots such that the i-th cyborg gets the time slot at ti minutes after the festival\'s start time (i.e., the start time for the first cyborg is 0 minutes). Write a program to generate the sequence of maintenance slots for all the cyborgs. Input: - The first line contains two integers n and t separated by a space. Output: - Print n integers in a single line, where the i-th integer represents the start time for the i-th cyborg\'s maintenance slot. Each maintenance slot should be incremented by t minutes from the previous one. Example: Input: 4 5 Output: 0 5 10 15","solution":"def generate_maintenance_slots(n, t): Generates a list of maintenance slots for n cyborgs. Parameters: n (int): Number of cyborgs. t (int): Time interval between consecutive maintenance slots in minutes. Returns: List[int]: A list of start times for each cyborg\'s maintenance slot. return [i * t for i in range(n)]"},{"question":"You are part of a game development team designing a new game feature. In this feature, players control a character navigating through a maze represented by a n times n grid. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The character can move up, down, left, or right, but cannot pass through obstacles. Given a grid and the initial position of the character, determine the minimum number of moves required to reach the target position. If it is not possible to reach the target, return -1. The first line contains an integer n (1 leq n leq 1000), the size of the grid. The next n lines contain n characters each, representing the grid. The following line contains two integers sx and sy (1 leq sx, sy leq n), the starting coordinates of the character (1-based index). The next line contains two integers tx and ty (1 leq tx, ty leq n), the target coordinates (1-based index). Print a single integer, the minimum number of moves required to reach the target position from the starting position. If it is not possible to reach the target, print -1. Example: ``` 5 ..... .#. ..#.. . ..... 1 1 5 5 ``` Output: ``` 8 ``` Explanation: The character starts at (1, 1) and can move as follows: (1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (5, 1) -> (5, 2) -> (5, 3) -> (5, 4) -> (5, 5). Total of 8 moves.","solution":"from collections import deque def min_moves_in_maze(n, grid, sx, sy, tx, ty): Given a grid, initial position and target position, determines the minimum number of moves required to reach the target. Returns -1 if target is not reachable. :param n: Integer representing the size of the grid (n x n) :param grid: List of strings representing the grid :param sx: Starting x coordinate (1-based) :param sy: Starting y coordinate (1-based) :param tx: Target x coordinate (1-based) :param ty: Target y coordinate (1-based) :return: Integer representing minimum number of moves or -1 if not reachable # Convert coordinates from 1-based to 0-based for easier indexing sx, sy, tx, ty = sx - 1, sy - 1, tx - 1, ty - 1 # Directions for movement (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Initialize queue for BFS and set for visited nodes queue = deque([(sx, sy, 0)]) # (x, y, move_count) visited = set((sx, sy)) # Perform BFS while queue: x, y, move_count = queue.popleft() # If we reach the target if (x, y) == (tx, ty): return move_count # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, move_count + 1)) # If target is not reachable return -1"},{"question":"John, the carpenter, has n wooden planks of the same length aligned in a row. He needs to cut these planks into pieces to create m sections, where each section is a continuous subset of the original planks. John can make cuts only between the planks, not within them. He is allowed to make up to k cuts. What is the maximum number of planks he can use in a section, if he only makes the allowed number of cuts? The first line contains three integers n, m, and k (1 ≤ m ≤ n ≤ 1000, 1 ≤ k ≤ 1000), where n is the number of original planks, m is the number of required sections, and k is the maximum number of cuts he can make. Print the maximum number of planks in one continuous section John can achieve under the given constraints. For example, if John has 5 planks and needs to create 3 sections using up to 2 cuts: In the first sample, the optimal scenario is to make cuts after the second and fourth planks, creating sections [1,2], [3,4], and [5]. The largest section contains 2 planks. Therefore, the result is 2. In the second sample, if John has 7 planks, needs to create 4 sections, and can make up to 3 cuts, the best he can achieve is sections [1,2], [3], [4,5], and [6,7], where the largest section contains 2 planks. Note that the answer is always guaranteed to be at least 1, as m ≤ n and there are enough sections possible within the constraints. Here is how the input and output will look: Input: ``` n m k ``` Output: ``` Maximum number of planks in one section ``` Example: Input: ``` 5 3 2 ``` Output: ``` 2 ```","solution":"def maximum_planks(n, m, k): Returns the maximum number of planks in one continuous section John can achieve under the given constraints. # The maximum number of cuts needed to create m sections is m - 1 # But we can make no more than k cuts cuts = min(m - 1, k) # To distribute n planks into m sections with the allowed cuts # 1. Calculate the base size of each section when the planks are evenly distributed base_size = n // m # 2. Calculate the remainder planks (these are the extra planks that can\'t be evenly distributed) remainder = n % m # The maximum possible planks in one section would be base_size + 1 if we place all remainders in one section, # but since we can make no more cuts than k, we need to check based on the cuts distribution # 3. Calculate the number of larger sections possible larger_sections = min(remainder, cuts + 1) max_planks = base_size if larger_sections > 0: max_planks += 1 return max_planks # Testing the function print(maximum_planks(5, 3, 2)) # Output: 2 print(maximum_planks(7, 4, 3)) # Output: 2"},{"question":"Anika loves playing with numbers and came up with a new game involving sequences. She presents you with a sequence of integers, and your task is to find the maximum possible sum of a subsequence, subject to the constraint that no two elements chosen in the subsequence are adjacent in the original sequence. A subsequence is defined as a sequence derived by deleting some or no elements without changing the order of the remaining elements. The first line of input contains an integer n (1 leq n leq 10^5), the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4), the elements of the sequence. Output a single integer, the maximum possible sum of the desired subsequence. For the first example, let\'s consider the sequence [3, 2, 5, 10, 7]: We can select the subsequence [3, 10], which gives the sum 13, the possible highest sum subject to the given constraint. In the second example, for the sequence [-1, -2, -3, -4]: The highest possible sum adhering to the rules is 0 since any single-element subsequence in this context is zero or negative, and selecting no element results in a sum of zero.","solution":"def max_non_adjacent_sum(arr): Returns the maximum possible sum of a subsequence where no two elements chosen are adjacent in the original sequence. n = len(arr) if n == 0: return 0 elif n == 1: return max(0, arr[0]) # dp[i] will store the maximum sum of subsequences for the subarray arr[0...i] dp = [0] * n dp[0] = max(0, arr[0]) if n > 1: dp[1] = max(dp[0], arr[1]) for i in range(2, n): dp[i] = max(dp[i-1], arr[i] + dp[i-2]) return dp[-1]"},{"question":"You are given a sequence of n integers `a1, a2, ..., an`. You want to perform operations on this sequence to make all its elements equal. In one operation, you can select any two adjacent elements and add 1 to both of them. Determine the minimum number of operations required to make all elements of the sequence equal. The first line of the input contains one integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains n integers `a1, a2, ..., an` (0 ≤ ai ≤ 1000) — the elements of the sequence. Output a single integer — the minimum number of operations required to make all elements of the sequence equal. # Example Input ``` 3 1 2 3 ``` Output ``` 2 ``` # Explanation In the first operation, add 1 to the second and third elements: `[1, 3, 4]`. In the second operation, add 1 to the first and second elements: `[2, 4, 4]`. At this point, all elements are equal to 4.","solution":"def min_operations_to_equalize_sequence(n, a): Returns the minimum number of operations required to make all elements of the sequence equal. Each operation consists of adding 1 to two adjacent elements. max_val = max(a) operations = 0 for num in a: operations += max_val - num return operations"},{"question":"Alice and Bob are playing a game with a stack of n coins. The game proceeds as follows: they take turns picking coins from the stack, but they must pick at least one coin and no more than twice the number of coins that the other player picked in their previous turn. Alice always goes first, and both players play optimally in order to maximize the number of coins they pick. If either player cannot make a valid move, they lose. Determine who will win the game if both players play optimally. The first line contains an integer n (1 ≤ n ≤ 10^6), the number of coins in the stack. Print the name of the player who will win when both players play optimally (\\"Alice\\" or \\"Bob\\"), followed by the maximum number of coins he/she will collect. **Example 1:** Input: ``` 10 ``` Output: ``` Alice 6 ``` **Example 2:** Input: ``` 15 ``` Output: ``` Bob 8 ``` **Explanation:** 1. For n = 10, Alice picks 1 coin, Bob picks 2 (1*2=2), Alice picks 4 (2*2=4), and Bob is left with 3 coins, which means Alice has 1+4=5 coins in the end, Bob took 2+3=5 coins, so Alice can start with a different strategy to maximize her coins. 2. For n = 15, Alice might pick 1, and Bob can respond with 2, Alice can then pick up to 4, etc. The optimal moves will be reflected in the final output based on deeper strategy analysis.","solution":"def coin_game(n): if n % 2 == 1: return (\\"Alice\\", (n // 2) + 1) else: return (\\"Bob\\", (n // 2))"},{"question":"You have a set of n bags each containing some number of stones. You can perform the following operation as many times as you want: pick any two bags and move one stone from one bag to the other. Your task is to determine if it\'s possible to make the number of stones in each bag even. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of bags. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the initial number of stones in each bag. Output \\"YES\\" (without quotes) if it is possible to make the number of stones in each bag even, otherwise output \\"NO\\" (without quotes). In the first sample, you can perform the following operations: move one stone from the first bag to the second, making the counts [4, 4, 3]. In the second sample, it\'s not possible to make all counts even because having an odd number of \'1\'s make it impossible. In the third sample, all counts are already even.","solution":"def make_stones_even(n, stones): Determines if it is possible to make the number of stones in each bag even. n: int - The number of bags stones: list of int - The initial number of stones in each bag Returns \\"YES\\" if it\'s possible to make all numbers of stones in the bags even, otherwise \\"NO\\". odd_count = sum(1 for stone in stones if stone % 2 != 0) # If the number of bags with odd stones is even, we can pair them up and balance them, resulting in all bags having even stones if odd_count % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A forest is represented as a rectangular grid of size n rows and m columns. Each cell in the grid contains either \'.\' (representing an empty space) or \'T\' (representing a tree). A fire can start from any empty cell and will spread in all four cardinal directions (up, down, left, right) until it hits a tree. The goal is to find out the maximum number of connected empty cells that can catch fire starting from a single empty cell. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns of the grid. Each of the next n lines contains m characters, either \'.\' or \'T\', representing the forest grid. Output a single integer - the maximum number of connected empty cells that can catch fire starting from a single empty cell. Example input: ``` 4 5 ..... .T... .RR.. ..... .T... ..... ``` Example output: ``` 14 ```","solution":"def max_fire_spread(grid): Returns the maximum number of connected empty cells (\'.\') that can catch fire starting from a single empty cell. if not grid: return 0 n = len(grid) m = len(grid[0]) def in_bounds(x, y): return 0 <= x < n and 0 <= y < m def dfs(x, y): if not in_bounds(x, y) or grid[x][y] != \'.\': return 0 grid[x][y] = \'#\' # mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': max_size = max(max_size, dfs(i, j)) return max_size # Example usage n, m = 4, 5 grid = [ [\'.\', \'.\', \'.\', \'.\', \'.\'], [\'.\', \'T\', \'.\', \'.\', \'.\'], [\'T\', \'T\', \'T\', \'T\', \'T\'], [\'.\', \'.\', \'.\', \'.\', \'.\'], [\'.\', \'T\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'.\', \'.\'] ] print(max_fire_spread(grid)) # Output: 14"},{"question":"In a distant land, there exists a magical grid with dimensions n x m. On this grid, each cell contains a specific type of gem with a distinct value. For the sake of simplicity, the value of the gem in the cell located at (i, j) is represented as vij. A wizard named Thalor has the ability to collect gems from this grid, starting from one cell and ending at another cell, while only being able to move right or down at any point in time. Your task is to help Thalor collect the maximum possible value of gems as he travels from the top-left corner of the grid (1, 1) to the bottom-right corner (n, m). Thalor can only move right or down at each step. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) – the dimensions of the grid. Each of the next n lines contains m integers – the value of the gems in the corresponding cell of the grid (0 ≤ vij ≤ 10000). Output a single integer – the maximum possible sum of gem values that Thalor can collect on his way from the top-left corner to the bottom-right corner of the grid. # Sample Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` # Sample Output: ``` 29 ``` # Explanation: Thalor\'s optimal path to gather the maximum sum of gem values would be: 1 -> 2 -> 3 -> 6 -> 9, which sums up to 29.","solution":"def max_gem_value(n, m, grid): Returns the maximum possible sum of gem values Thalor can collect by moving from top-left to bottom-right corner. dp = [[0] * m for _ in range(n)] # Initialize the top-left corner of the dp table dp[0][0] = grid[0][0] # Fill in the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"A popular video streaming service is launching a new recommendation system to suggest movies to its users. Each user has a sorted list of their top k favorite movies. The recommendation system needs to merge these lists into one master list of movies while preserving their relative order in each user\'s list. The task is to write a function that takes n such sorted lists of movie IDs and merges them into one sorted list. The resulting list should be sorted in non-decreasing order of the movie IDs. The first line of the input contains an integer n (1 ≤ n ≤ 103) — the number of users. Each of the next n lines contains a sorted list of k integers where (1 ≤ k ≤ 104, 1 ≤ movie ID ≤ 106) — the IDs of the favorite movies for each user. The length of each list may vary, but the total number of movie IDs across all lists will not exceed 105. The function should produce a single line containing the merged sorted list of movie IDs. # Example Input: ``` 3 1 4 5 1 3 4 2 6 ``` Output: ``` 1 1 2 3 4 4 5 6 ``` In this example, there are 3 users and their lists of favorite movies: - The first user likes movies with IDs 1, 4, and 5. - The second user likes movies with IDs 1, 3, and 4. - The third user likes movies with IDs 2 and 6. The merged list sorted in non-decreasing order is: 1, 1, 2, 3, 4, 4, 5, 6.","solution":"import heapq def merge_movie_lists(movie_lists): Merges multiple sorted lists preserving the relative order and returns a single sorted list. Arguments: movie_lists -- List of sorted lists of movie IDs Returns: A single merged and sorted list of movie IDs. merged_list = [] min_heap = [] # Initialize a heap with the first element from each list for i, movie_list in enumerate(movie_lists): if movie_list: heapq.heappush(min_heap, (movie_list[0], i, 0)) # Extract the smallest element and push the next element from the same list into the heap while min_heap: val, list_index, element_index = heapq.heappop(min_heap) merged_list.append(val) if element_index + 1 < len(movie_lists[list_index]): next_tuple = (movie_lists[list_index][element_index + 1], list_index, element_index + 1) heapq.heappush(min_heap, next_tuple) return merged_list"},{"question":"Mike is playing a game that involves moving a character on a grid. The grid has dimensions of n rows and m columns. Each cell in the grid is either walkable or blocked. Mike’s objective is to move his character from the top-left corner of the grid to the bottom-right corner. He can move his character in four directions: left, right, up, and down. The game ensures that the starting and ending cell are always walkable. Mike needs your help to find the shortest path from the starting cell to the ending cell, or determine if it\'s impossible. Write a function to solve this problem: Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid. - The next n lines each contain m characters representing the grid. Each character is either \'.\' (denoting a walkable cell) or \'#\' (denoting a blocked cell). Output: - If there is a path from the top-left corner to the bottom-right corner, output the length of the shortest path. - If there is no path, output -1. Example: Input: 4 4 .... .#.. ..#. .... Output: 7 Explanation: The shortest path from the top-left to the bottom-right is right -> right -> down -> down -> down -> left -> left, with a total of 7 moves. Use Breadth-First Search (BFS) to solve this problem.","solution":"from collections import deque def shortest_path_grid(n, m, grid): Returns the length of the shortest path from the top-left to the bottom-right of the grid. Returns -1 if there is no such path. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Polycarp is a dedicated marathon runner. He needs to complete a set of training sessions before his next major race. Polycarp\'s stamina level is initially s units. Each training session requires a minimum stamina level to begin, and affects his stamina after completion. The i-th training session requires at least m_i stamina units to start, and his stamina changes by c_i units (c_i can be positive or negative) after completing the session. Polycarp\'s stamina level should not drop below zero at any point during his training. Given these conditions, determine if there exists a sequence of sessions Polycarp can follow such that he can complete all the training sessions without his stamina falling below zero. The first line of the input contains two integers n and s (1 le n le 100, 1 le s le 30000) — the number of training sessions and Polycarp\'s initial stamina, respectively. The next n lines contain the training sessions, one per line. The i-th training session is represented as two integers m_i and c_i (1 le m_i le 30000, -300 le c_i le 300) — the minimum stamina required to start the i-th session and the stamina change after the session, respectively. Print \\"YES\\" if it is possible to complete all the training sessions with a feasible sequence, otherwise print \\"NO\\". # Example ```text Input: 3 10 7 5 8 -2 5 3 Output: YES Input: 3 15 10 -5 12 4 11 -6 Output: NO Input: 4 20 10 -5 15 -5 8 5 5 -1 Output: YES ```","solution":"def can_complete_sessions(n, s, sessions): # Sort sessions primarily by required stamina, then by change in stamina sessions.sort(key=lambda x: (x[0], -x[1])) for min_stamina, stamina_change in sessions: if s < min_stamina: return \\"NO\\" s += stamina_change if s < 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given two integers n and m. Your task is to count how many perfect squares exist between n and m, inclusive. A perfect square is an integer that is the square of an integer. # Input The input contains a single line with two integers n and m (1 ≤ n ≤ m ≤ 10^9). # Output Output a single integer which is the count of perfect squares between n and m, inclusive. # Examples Input: 10 20 Output: 1 Input: 1 100 Output: 10 Explanation: In the first example, the only perfect square between 10 and 20 is 16. In the second example, the perfect squares between 1 and 100 are 1, 4, 9, 16, 25, 36, 49, 64, 81, and 100.","solution":"import math def count_perfect_squares_between(n, m): Returns the count of perfect squares between n and m, inclusive. start = math.ceil(math.sqrt(n)) end = math.floor(math.sqrt(m)) return max(0, end - start + 1)"},{"question":"Given an array of integers, your task is to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Additionally, return the start and end indices of this subarray. The input consists of: - The first line contains an integer `n` (1 ≤ n ≤ 10⁴) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (-10⁴ ≤ ai ≤ 10⁴) — the elements of the array. The output should contain two lines: - The first line should contain the integer representing the largest sum of the contiguous subarray. - The second line should contain two integers representing the start and end indices (1-based) of the subarray. These indices should identify the first and the last element of the subarray in the input array. Example: Input: ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 4 7 ``` Explanation: The subarray with the largest sum is `[4, -1, 2, 1]`, which starts at index 4 and ends at index 7 (1-based index). The sum of this subarray is 6.","solution":"def max_subarray_sum(arr): Finds the contiguous subarray with the largest sum. Returns: - the largest sum - the start and end indices (1-based) of the subarray n = len(arr) if n == 0: return 0, 1, 1 max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return max_sum, start + 1, end + 1"},{"question":"Dana loves matrices, especially when they form interesting patterns. She often plays with matrices consisting of n rows and m columns with elements filled according to some rules. Dana particularly enjoys matrices where each element in the matrix is either a 0 or 1, and each row and each column contains exactly k ones. Your task is to help Dana generate such a matrix if possible. The single line of input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ min(n, m)). Output any such matrix. If it is not possible to create such a matrix, output \\"-1\\". A matrix is considered valid if each row and each column contains exactly k ones and (n, m, k) constraints are satisfied. # Example: Input: 5 5 3 Output: 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 0 0 1 In this example, each row and each column contains exactly 3 ones.","solution":"def generate_matrix(n, m, k): Generates a matrix of size n x m where each row and each column contains exactly k ones. If it is not possible, returns -1. # Impossible case if k > min(n, m): return -1 # Initialize the matrix with zeros matrix = [[0] * m for _ in range(n)] # Fill the matrix with k ones per row and column for i in range(n): for j in range(k): matrix[i][(i + j) % m] = 1 return matrix def format_matrix(matrix): Helper function to format matrix for display if matrix == -1: return str(matrix) return \\"n\\".join(\\" \\".join(map(str, row)) for row in matrix)"},{"question":"Alice is playing a game with boxes. She has a row of boxes numbered from 1 to n. Each box can either be empty or contain a coin. Alice wants to maximize the number of boxes containing coins while ensuring that no two consecutive boxes have coins, as she believes it brings bad luck. Alice can place coins in the boxes according to these rules. Given an integer n (1 ≤ n ≤ 10000), determine the maximum number of boxes that can contain a coin, adhering to Alice\'s belief. The first line of the input contains a single integer t (1 ≤ t ≤ 10000) — the number of test cases. Each of the following t lines contains a single integer n — the number of boxes. Print t lines with each line containing a single integer representing the maximum number of boxes that can contain a coin for each corresponding test case. Example input: ``` 3 1 2 5 ``` Example output: ``` 1 1 3 ``` Explanation: - In the first test case, there\'s only one box, so we can place a coin there. - In the second test case, we have two boxes, but placing coins in both would violate the rule, so we can place only one coin in either of the boxes. - In the third test case, we have five boxes. The optimal placement is to place coins in boxes 1, 3, and 5, which ensures no two consecutive boxes have coins. Thus, the maximum number of boxes that can contain coins is 3.","solution":"def max_coins_per_case(n): Returns the maximum number of boxes that can contain a coin when there are n boxes and no two consecutive boxes can contain coins. return (n + 1) // 2 def solve(t, cases): Given t test cases and a list of n values, returns a list with the result for each test case. return [max_coins_per_case(n) for n in cases]"},{"question":"A company is organizing a competition in which participants have to complete various tasks. Each task has a difficulty level, and participants can only attempt tasks if the sum of the difficulty levels of the tasks they have already completed does not exceed a given limit L. Each participant has his or her own unique limit L. The challenge is to determine the maximum number of tasks a participant can complete based on their limit. The first line of the input contains a single integer t (1 ≤ t ≤ 50) — the number of participants. Each of the next t lines contains: - an integer L (1 ≤ L ≤ 10^9) — the limit for the i-th participant. - an integer n (1 ≤ n ≤ 100) — the number of available tasks. - a sequence of n integers d1, d2, ..., dn (1 ≤ di ≤ 10^6) — the difficulty levels of the tasks. For each participant, you should output the maximum number of tasks they can complete without exceeding their limit L. Example Input: 2 10 4 4 5 1 3 8 5 2 4 2 2 1 Example Output: 3 4 Explanation: - In the first example, the participant has a limit of 10. They can complete tasks with difficulties 4, 1, and 3 (summing to 8) which is the maximum number of tasks they can complete without exceeding the limit. - In the second example, the participant has a limit of 8. They can complete tasks with difficulties 2, 2, 2, and 1 (summing to 7) which is the maximum number of tasks they can complete without exceeding the limit.","solution":"def max_tasks(t, participants): results = [] for p in participants: L, n, tasks = p tasks.sort() task_count = 0 current_sum = 0 for task in tasks: if current_sum + task <= L: current_sum += task task_count += 1 else: break results.append(task_count) return results def parse_input(raw_input): lines = raw_input.strip().split(\'n\') t = int(lines[0]) participants = [] idx = 1 for _ in range(t): L, n = map(int, lines[idx].split()) tasks = list(map(int, lines[idx+1].split())) participants.append((L, n, tasks)) idx += 2 return t, participants def main(raw_input): t, participants = parse_input(raw_input) results = max_tasks(t, participants) for result in results: print(result)"},{"question":"Tom has n magic cards, each with a distinct number from 1 to n written on it. He wants to organize the cards in such a way that the new arrangement is a palindrome. A sequence is called a palindrome if it reads the same backwards as forwards. Tom can swap the positions of any two cards. Now Tom is wondering, what is the minimum number of swaps required to rearrange the cards into a palindrome. If it is impossible to form a palindrome, print -1. The first line contains a single integer t (1 le t le 100) — the number of test cases. The following 2*t lines describe the test cases. For each test case, the first line contains a single integer n (1 le n le 10^5). The second line contains n space-separated integers representing the initial order of the cards. For each test case, output a single integer — the minimum number of swaps required to make the sequence of cards a palindrome, or -1 if it is impossible. **Input:** ``` 3 4 1 2 3 4 5 1 2 3 2 1 6 1 4 5 5 4 1 ``` **Output:** ``` -1 0 0 ``` In the first test case, it is impossible to rearrange the sequence into a palindrome. In the second and third cases, the sequences are already palindromes, so no swaps are needed.","solution":"def min_swaps_to_palindrome(t, test_cases): def is_palindrome_possible(seq): from collections import Counter counts = Counter(seq) odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1 results = [] for i in range(t): n = test_cases[i][0] seq = test_cases[i][1] if not is_palindrome_possible(seq): results.append(-1) continue def count_swaps_to_palindrome(seq): seq = list(seq) swaps = 0 left = 0 right = len(seq) - 1 while left < right: if seq[left] != seq[right]: l = left r = right while l < r and seq[l] != seq[right]: l += 1 while r > l and seq[r] != seq[left]: r -= 1 if l == r: seq[l], seq[l+1] = seq[l+1], seq[l] swaps += 1 else: seq[left], seq[r] = seq[r], seq[left] swaps += 1 left += 1 right -= 1 return swaps results.append(count_swaps_to_palindrome(seq)) return results # Example of usage t = 3 test_cases = [(4, [1, 2, 3, 4]), (5, [1, 2, 3, 2, 1]), (6, [1, 4, 5, 5, 4, 1])] print(min_swaps_to_palindrome(t, test_cases))"},{"question":"Every year, a town organizes a marathon event where runners follow a circular track. The marathon has multiple checkpoints along the track. Each runner starts at one of the checkpoints and runs a certain number of laps, passing through each checkpoint. Each checkpoint has a unique identifier and can give a different amount of energy boost to the runners passing through it. The energy boost at each checkpoint may vary for different runners based on certain conditions. You have been given the total number of checkpoints on the track, the total number of laps a runner will complete, and the energy boost values for each checkpoint. Write a program that calculates the maximum energy boost a runner can accumulate after completing all the laps. The runner can start at any checkpoint and must run the entire course sequentially. # Input - The first line contains two integers N (1 ≤ N ≤ 10^5) and L (1 ≤ L ≤ 10^9), where N is the number of checkpoints and L is the number of laps. - The second line contains N integers, where the ith integer Ei (1 ≤ Ei ≤ 1000) is the energy boost value at the ith checkpoint. # Output - Print a single integer, the maximum energy boost a runner can accumulate after completing L laps. # Example Input ``` 4 3 1 2 3 4 ``` Output ``` 30 ``` # Explanation In the example, there are 4 checkpoints with energy boosts of 1, 2, 3, and 4 respectively. The runner will complete 3 laps. Starting at checkpoint 1 and passing through all 4 checkpoints sequentially, the total number of checkpoints passed is 12 (4 checkpoints * 3 laps). The sum of all energy boosts after 3 laps is 3 times the sum of all checkpoints boosts: - First lap: 1 + 2 + 3 + 4 = 10 - Second lap: 1 + 2 + 3 + 4 = 10 - Third lap: 1 + 2 + 3 + 4 = 10 Thus, the maximum energy boost is 10 * 3 = 30.","solution":"def max_energy_boost(N, L, energy_boosts): Calculates the maximum energy boost a runner can accumulate after completing all the laps. Args: N : int : number of checkpoints L : int : number of laps energy_boosts : list : energy boost values at each checkpoint Returns: int : maximum energy boost sum_energy_boosts = sum(energy_boosts) return sum_energy_boosts * L"},{"question":"A group of friends is playing a unique game with strings. They all have a string of length n consisting only of lowercase English letters. Their challenge is to make all the strings identical by performing a special operation. The operation involves selecting a pair of indices i and j, and swapping the characters at these positions in all strings simultaneously. You are given a string and asked to determine the minimum number of operations required to make all characters in the string the same. Note that the result after each swap must be valid for continuing to make the string identical. The first line contains an integer n (1 leq n leq 2 cdot 10^5) — the length of the string. The second line contains a string of length n consisting only of lowercase English letters. Output the minimum number of operations required to make all characters in the string the same. If it is impossible to make all characters identical, output \\"-1\\". For the first test case, the string is \\"abac\\". By swapping the characters at indices 2 and 3, the string can become \\"aabc\\", which is still not identical. The minimum number of operations required would be calculated accordingly. Example 1: Input: 4 abac Output: 2 Example 2: Input: 5 abcde Output: -1 Note: In the second example, it is impossible to make all characters identical.","solution":"def min_operations_to_make_identical(n, s): This function returns the minimum number of operations required to make all characters in the string identical. If it is impossible to make all characters identical, it returns -1. from collections import Counter char_count = Counter(s) # Find the frequency of the most common character max_freq = max(char_count.values()) # Calculate if it\'s possible to make all characters the same if max_freq == n: return 0 elif max_freq == 1: return -1 else: return n - max_freq"},{"question":"Greg works for a company that deals with network security. The company operates a network of servers and Greg\'s job is to ensure that the servers are protected against unauthorized access. The network of servers can be represented as a connected undirected graph with n nodes (servers) and m edges (direct connections). Greg has a list of vulnerability levels for each server. The vulnerability level of the i-th server is represented by vi. To secure the network, Greg can install a firewall on any server. Once a firewall is installed on a server, that server is completely secure, but he needs to minimize the total vulnerability of the network if exactly k firewalls are installed. Find the minimum total vulnerability level of the remaining (unprotected) network servers after installing exactly k firewalls. Assume that you install firewalls on the k most vulnerable servers. The first line of the input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10^5) – the number of servers and the number of direct connections between them. The second line contains a single integer k (1 ≤ k < n) – the number of firewalls to be installed. The third line contains n integers, where the i-th integer vi (1 ≤ vi ≤ 10^6) represents the vulnerability level of the i-th server. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), representing a direct connection between servers ui and vi. Output a single integer – the minimum total vulnerability level of the remaining servers after installing k firewalls. Example: ``` Input: 6 7 3 1 3 5 7 9 2 1 2 2 3 3 4 4 5 5 6 1 6 2 5 Output: 12 Explanation: After installing firewalls on servers with vulnerability levels 9, 7, and 5 (the k most vulnerable servers), the remaining servers have vulnerability levels 1, 3, and 2. The sum is 1 + 3 + 2 = 6. ```","solution":"def minimum_total_vulnerability(n, m, k, vulnerability_levels, connections): Calculate the minimum total vulnerability level of the remaining servers after installing k firewalls. # Sort the vulnerability levels in descending order sorted_vulnerabilities = sorted(vulnerability_levels, reverse=True) # Sum the vulnerability levels of the k highest servers total_vulnerability_to_be_protected = sum(sorted_vulnerabilities[:k]) # Calculate the total vulnerability of all servers total_vulnerability = sum(vulnerability_levels) # The minimum total vulnerability of the remaining servers remaining_vulnerability = total_vulnerability - total_vulnerability_to_be_protected return remaining_vulnerability # Example usage for verification: n, m, k = 6, 7, 3 vulnerability_levels = [1, 3, 5, 7, 9, 2] connections = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 6), (2, 5)] print(minimum_total_vulnerability(n, m, k, vulnerability_levels, connections)) # Output: 6"},{"question":"You are given a list of n projects. Each project i has a start day s_i and an end day e_i. Each project yields a profit p_i. You can only work on one project at a time, which means any two projects i and j can only be worked on simultaneously if they do not overlap, i.e., if e_i < s_j or e_j < s_i. Your task is to find the maximum total profit you can earn by selecting non-overlapping projects. The first line of input contains an integer n (1 leq n leq 200,000) — the number of projects. The next n lines each contain three integers s_i, e_i, and p_i (1 leq s_i, e_i leq 10^9, 1 leq p_i leq 10^6) — the start day, end day, and profit of the i-th project, respectively. Output one integer — the maximum profit you can earn by selecting a subset of non-overlapping projects. Example: Input: ``` 5 1 3 50 4 6 60 7 8 70 2 5 20 5 7 100 ``` Output: ``` 180 ``` Explanation: You can select projects with profit 50, 60, and 70, which are non-overlapping, to maximize the profit. Thus, the maximum profit is 180.","solution":"from bisect import bisect_right def max_profit(n, projects): # Sort the projects based on end time projects.sort(key=lambda x: x[1]) dp = [0] * (n + 1) end_times = [projects[i][1] for i in range(n)] for i in range(1, n + 1): s, e, p = projects[i - 1] # Find the rightmost project that ends before current project starts index = bisect_right(end_times, s - 1) # Update dp[i] as the maximum profit by either including or excluding the current project dp[i] = max(dp[i - 1], dp[index] + p) return dp[n]"},{"question":"In a certain kingdom, there are multiple villages connected by a network of roads. Villages are numbered from 1 to n. Each road connects exactly two villages and has a certain length associated with it. The king wants to build a single central warehouse in one of the villages such that the sum of distances from this warehouse to all other villages is minimized. Given the number of villages n (2 ≤ n ≤ 105) and the lengths of the roads, help the king determine the optimal village to build the warehouse. The input is as follows: The first line contains a single integer n — the number of villages. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 109), meaning there is a road of length w connecting village u and village v. Output a single integer — the number of the village where the warehouse should be built. If there are multiple optimal solutions, output any of them. **Example:** ``` Input: 5 1 2 3 2 3 4 3 4 2 3 5 1 Output: 3 ``` **Note:** In the example above, building the warehouse in village 3 minimizes the sum of distances to all other villages.","solution":"from collections import defaultdict import sys def find_centroid(n, edges): def dfs(node, parent): subtree_size[node] = 1 is_centroid = True for neighbor, weight in graph[node]: if neighbor != parent: dfs(neighbor, node) subtree_size[node] += subtree_size[neighbor] if subtree_size[neighbor] > n // 2: is_centroid = False if n - subtree_size[node] > n // 2: is_centroid = False if is_centroid: centroids.append(node) graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) subtree_size = [0] * (n + 1) centroids = [] dfs(1, -1) return centroids[0] def find_optimal_village(n, road_list): return find_centroid(n, road_list)"},{"question":"A company has a network of servers organized as a rooted tree with n servers (numbered from 1 to n), where server 1 is the root. Each server except the root has exactly one parent server, and each server can have zero or more children servers. The company wants to ensure that every server can communicate with the root. However, due to maintenance and resource constraints, the company has decided to suspend some servers temporarily. Your task is to simulate the suspension of a subset of servers and determine which servers are still able to communicate with the root. You are given m queries. Each query will either suspend a server or ask if a server can communicate with the root. The first line contains two integers n and m (1 ≤ n, m ≤ 10^5). The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), denoting that server u is the parent of server v. Each of the following m lines contains a query in one of the following formats: - \\"s x\\" (1 ≤ x ≤ n) meaning to suspend server x. - \\"q x\\" (1 ≤ x ≤ n) meaning to query if server x can communicate with the root. A server is considered able to communicate with the root if it is not suspended and none of its ancestors up to the root are suspended. For each \\"q x\\" query, output \\"yes\\" (without quotes) if the server x can communicate with the root, and \\"no\\" otherwise. Example: Input: 6 5 1 2 1 3 2 4 2 5 3 6 s 2 q 4 q 5 q 6 s 1 q 3 Output: no no yes no Explanation: - Suspends server 2. - Queries if server 4 can communicate with the root (no, because server 2 is suspended). - Queries if server 5 can communicate with the root (no, because server 2 is suspended). - Queries if server 6 can communicate with the root (yes, because neither server 1 nor server 3 is suspended). - Suspends server 1. - Queries if server 3 can communicate with the root (no, because server 1 is suspended).","solution":"class ServerNetwork: def __init__(self, n): self.n = n self.tree = [[] for _ in range(n + 1)] self.suspended = [False] * (n + 1) def add_edge(self, parent, child): self.tree[parent].append(child) def suspend(self, server): self.suspended[server] = True def can_communicate(self, server): while server != 1: if self.suspended[server]: return \\"no\\" for parent in range(1, self.n + 1): if server in self.tree[parent]: server = parent break return \\"no\\" if self.suspended[1] else \\"yes\\" def process_queries(n, m, edges, queries): sn = ServerNetwork(n) for u, v in edges: sn.add_edge(u, v) results = [] for query in queries: if query[0] == \'s\': sn.suspend(query[1]) elif query[0] == \'q\': results.append(sn.can_communicate(query[1])) return results"},{"question":"Given a list of N distinct positive integers, you have to find a pair of integers (a, b) from the list such that the absolute difference |a - b| is minimized. The goal is to return that minimum absolute difference. You are given a list of distinct integers. You need to determine the minimum possible value of |a - b|, where a and b are elements of the list and a ≠ b. Input: - The first line contains a single integer N (2 ≤ N ≤ 200000) — the number of elements in the list. - The second line contains N distinct integers a1, a2, ..., aN (1 ≤ ai ≤ 10^9) — the elements of the list. Output: - Output the minimum possible absolute difference |a - b| among all pairs of elements in the list. Example: Input: 5 1 5 9 12 13 Output: 1 Explanation: - The pairs are (1, 5), (1, 9), (1, 12), (1, 13), (5, 9), (5, 12), (5, 13), (9, 12), (9, 13), (12, 13). - The minimum absolute difference is between 12 and 13 which is 1.","solution":"def min_abs_difference(nums): Returns the minimum absolute difference between any two integers in the list. # Sort the list nums.sort() # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Compare adjacent elements in the sorted list to find the minimum difference for i in range(len(nums) - 1): min_diff = min(min_diff, nums[i+1] - nums[i]) return min_diff"},{"question":"You are given an array of integers `nums` and an integer `target`. Your task is to find two distinct indices i and j in the array such that nums[i] + nums[j] equals target, and return the indices in the form of a tuple (i, j). Input - The first line contains an integer n (2 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n integers nums[0], nums[1], ..., nums[n-1] (1 ≤ nums[i] ≤ 10^9) — the elements of the array. - The third line contains an integer target (1 ≤ target ≤ 2 * 10^9). Output - Output a single line containing two integers i and j (0 ≤ i < j < n) such that nums[i] + nums[j] = target. If there are multiple valid pairs, output any one of them. Examples Input 5 2 7 11 15 1 9 Output 0 1 Explanation In this example, nums[0] + nums[1] = 2 + 7 = 9, so the output is 0 1. There are other valid pairs, such as (4 3) corresponding to the elements 1 8, but since only one valid pair needs to be output, both answers are correct.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return num_to_index[complement], i num_to_index[num] = i return None"},{"question":"Tom is organizing a marathon event in his city. He has a certain number of checkpoints in a straight-line track. Each checkpoint has a flag that needs to be colored. Tom has a set of colors and he wants to assign these colors to the flags in such a way that no two adjacent checkpoint flags have the same color. Tom knows the positions of all the checkpoints and the available colors. Help him determine if it is possible to color all the flags without violating the given condition, and if possible, output such a coloring scheme. The first line of input contains two integers n and c (2 ≤ n ≤ 105, 2 ≤ c ≤ 100) representing the number of checkpoints and the number of available colors respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 109) representing the positions of the checkpoints in increasing order. Output \\"YES\\" and a possible coloring scheme if it is possible to assign the colors as required. Otherwise, output \\"NO\\". If there are multiple valid colorings, print any of them. Example: Input: 5 3 1 3 7 12 18 Output: YES 1 2 1 2 1","solution":"def color_checkpoints(n, c, positions): if c == 1 and n > 1: return \\"NO\\" colors = [0] * n for i in range(n): colors[i] = (i % c) + 1 return f\\"YESn{\' \'.join(map(str, colors))}\\" def solve_marathon_color_checkpoints(n, c, positions): result = color_checkpoints(n, c, positions) return result"},{"question":"Sarah is preparing a special dinner, and she wants to invite friends based on their flavors preferences. Each friend has a unique combination of favorite ingredients which they like in a dish. Sarah wants to create a menu which ensures that at least one favorite ingredient of each friend is included in one of the dishes on the menu. You are given n dishes, each having a specific set of ingredients. You need to check if the given menu satisfies the friends\' flavor preferences. The first line of the input contains two integers n and f, the number of dishes and the number of friends (1 ≤ n, f ≤ 100). The next n lines each contain a string representing the ingredients of a dish where each ingredient is a lowercase alphabet letter. Each string represents one dish. The following f lines each contain a string representing the favorite ingredients of a friend, where each string includes lowercase alphabet letters. Output \\"YES\\" if Sarah can satisfy all of her friends’ ingredient preferences with the given menu, otherwise print \\"NO\\". # Example Input ``` 3 4 abcd efgh ijkl ab cd ef gh ``` Output ``` YES ``` Input ``` 2 3 abc def xyz ab fg ``` Output ``` NO ``` # Explanation In the first example, the menu satisfies all friends because each friend\'s favorite ingredients are included at least in one of the dishes on the menu. In the second example, the menu cannot satisfy the third friend because none of the dishes contains the ingredient \'z\'. Therefore, Sarah should revise her menu.","solution":"def can_satisfy_all_friends(dishes, friends): Returns \\"YES\\" if the dishes can satisfy all friends\' flavor preferences, otherwise returns \\"NO\\". # Create a set to keep all available ingredients in the dishes available_ingredients = set() # Add all ingredients from the dishes to the set for dish in dishes: available_ingredients.update(dish) # Check if each friend\'s favorite ingredients are met for friend in friends: satisfied = False for ingredient in friend: if ingredient in available_ingredients: satisfied = True break if not satisfied: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of n positive integers, you need to perform several operations to make all its elements equal. In one operation, you can choose any two distinct indices i and j (1 ≤ i, j ≤ n, i ≠ j), and set nums[i] to nums[j] or nums[j] to nums[i]. Determine the minimum number of operations needed to make all elements in the array equal. # Input: - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - The first line of each test case contains an integer n (1 ≤ n ≤ 2 · 10^5) — the number of elements in the array. - The second line of each test case contains n integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 10^5) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 · 10^5. # Output: For each test case, print a single integer — the minimum number of operations needed to make all elements in the array equal. # Example: Input: ``` 3 4 1 2 2 3 5 4 4 4 4 4 6 6 1 6 1 6 1 ``` Output: ``` 2 0 3 ``` # Explanation: In the first test case, you can perform the following 2 operations to make all array elements equal: 1. Choose indices 1 and 2, set nums[1] to nums[2], resulting in array [2, 2, 2, 3]. 2. Choose indices 3 and 4, set nums[4] to nums[3], resulting in array [2, 2, 2, 2]. In the second test case, the array is already uniform, so no operations are needed. In the third test case, you can perform the following 3 operations to make all array elements equal: 1. Choose indices 2 and 1, set nums[2] to nums[1], resulting in array [6, 6, 6, 1, 6, 1]. 2. Choose indices 4 and 1, set nums[4] to nums[1], resulting in array [6, 6, 6, 6, 6, 1]. 3. Choose indices 6 and 1, set nums[6] to nums[1], resulting in array [6, 6, 6, 6, 6, 6].","solution":"def min_operations(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] nums = test_cases[i][1] from collections import Counter # Count frequency of each element freq = Counter(nums) # Find the most common element max_freq = max(freq.values()) # Minimum operations needed to make all elements the same min_operations_needed = n - max_freq results.append(min_operations_needed) return results"},{"question":"A factory produces packages of nuts and bolts. Each package contains equal numbers of nuts and bolts. You are given an array `weights` where `weights[i]` is the weight of the `i`-th package. You need to check if it’s possible to select a subarray of these packages such that the total weight of the selected packages is exactly `W`. Write a function `isWeightPossible` that takes two inputs: 1. An integer `W`, representing the target weight. 2. An array of integers `weights`, where each element represents the weight of a package. The function should return `True` if there exists a subarray of `weights` whose sum is exactly `W`, otherwise, it should return `False`. # Input The first line contains an integer `W` (1 ≤ W ≤ 10^9), the target weight. The second line contains space-separated integers, representing the array `weights` (1 ≤ |weights| ≤ 10^5, 1 ≤ weights[i] ≤ 10^5). # Output Output `True` if there is a subarray that sums up to `W`. Otherwise, output `False`. # Example Example 1 ``` Input: 7 2 4 3 7 1 Output: True Explanation: The subarray [2, 4, 1] sums up to 7. ``` Example 2 ``` Input: 5 1 2 3 Output: True Explanation: The subarray [2, 3] sums up to 5. ``` Example 3 ``` Input: 11 1 2 3 4 5 Output: False Explanation: No subarray sums up to 11. ``` Example 4 ``` Input: 15 7 4 2 5 Output: True Explanation: The subarray [7, 4, 2, 2] sums up to 15. ``` # Note - Pay attention to efficiently handle the constraints on input sizes. - Consider the time complexity of your approach, aiming for better than O(n^2) solutions if possible.","solution":"def isWeightPossible(W, weights): Checks if there is a subarray in the given weights array that sums up to the target weight W. :param W: int, target weight :param weights: List[int], list of weights of packages :return: bool, True if there exists a subarray with sum W, otherwise False current_sum = 0 start = 0 sum_dict = {} for i in range(len(weights)): current_sum += weights[i] # Check if current prefix sum is exactly W if current_sum == W: return True # Check if there is any subarray sum equal to W if (current_sum - W) in sum_dict: return True # Store the current prefix sum in sum dictionary sum_dict[current_sum] = i return False"},{"question":"A secret agency has intercepted some communication between two spies. The communication is in the form of a sequence of characters from \'A\' to \'Z\' which can be considered as an encrypted message. The agency knows that the message can be decoded using a special method called the \\"Shift Cipher\\". In a Shift Cipher, each letter is shifted by some fixed number of positions down the alphabet. For example, with a shift of 3, \'A\' would be encoded as \'D\'. However, the agency also learned that the message may have been shifted multiple times with different shift values. Your task is to write a program that determines whether it is possible to decode such a message into a meaningful word and if so, find the original word. The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Then follow t lines, each containing a sequence of uppercase characters which is the encrypted message for that test case. Each sequence has a length between 1 and 1000 characters inclusive. For each test case, print \\"YES\\" if it is possible to decode the message by applying some sequence of non-negative integer shifts modulo 26 to each character in the encrypted message to form a meaningful word. Otherwise, print \\"NO\\". **Input:** ``` 2 DEF XYZABC ``` **Output:** ``` YES YES ``` **Note:** - In the first example, a single shift by -3 (or equivalently shifting \'D\' to \'A\', \'E\' to \'B\', \'F\' to \'C\') will decode the message \\"DEF\\" to \\"ABC\\". Since \\"ABC\\" can be considered a meaningful word, the output is \\"YES\\". - In the second example, shifts can decode \\"XYZABC\\" to \\"ABCDEF\\" which is also a sequence of continuous letters and can be considered meaningful. Thus the output is \\"YES\\".","solution":"from typing import List def is_meaningful(seq: str) -> bool: Determines if the sequence of characters can be shifted to from \'A\' to \'Z\' in order one. def is_contiguous(word): for i in range(1, len(word)): if ord(word[i]) != ord(word[i-1]) + 1: return False return True for shift in range(26): shifted_seq = \'\'.join(chr((ord(char) - ord(\'A\') - shift) % 26 + ord(\'A\')) for char in seq) if is_contiguous(shifted_seq): return True return False def decode_messages(t: int, sequences: List[str]) -> List[str]: results = [] for seq in sequences: if is_meaningful(seq): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Nina likes solving puzzles, and one of her favorite puzzles involves working with arrays. She has an array of integers and she likes rearranging its elements in specific ways to form new arrays. One of her preferences is to create arrays in which the difference between adjacent elements is as large as possible. Task: Given an integer array of size n, reorder the elements to maximize the minimum difference between adjacent elements (the absolute difference). For each test case, output the maximum possible value of the minimum difference between adjacent elements. Input: - The first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. - Each of the next t lines contains an integer n (2 ≤ n ≤ 10^5) — the size of the array. - Each of the following n integers is separated by space, representing the elements of the array. Output: For each test case, print one integer — the maximum possible value of the minimum difference between adjacent elements for the reordered array. Example: Input: 3 4 1 2 3 4 5 10 20 30 40 50 3 5 10 5 Output: 1 10 5 Explanation: In the first test case, the array can be reordered as [1, 3, 2, 4] or any permutation giving a minimum difference of 1 between adjacent elements. In the second test case, the array can be reorganized as [10, 50, 20, 40, 30] or any permutation giving a minimum difference of 10. In the third test case, the array can be reordered as [5, 10, 5], achieving a minimum difference of 5. Note: - You can assume that large inputs must be processed efficiently within the time limit. - Submissions should ensure the correct reordering of the array to maximize the minimum difference between adjacent elements.","solution":"def max_min_difference(t, cases): results = [] for case in cases: _, array = case array.sort() reordered = [] left = 0 right = len(array) - 1 while left <= right: if left == right: reordered.append(array[left]) else: reordered.append(array[left]) reordered.append(array[right]) left += 1 right -= 1 min_diff = float(\'inf\') for i in range(1, len(reordered)): min_diff = min(min_diff, abs(reordered[i] - reordered[i - 1])) results.append(min_diff) return results # Interpreter function to parse input and generate the required output def solve(): import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) index = 1 cases = [] for _ in range(t): n = int(data[index]) index += 1 array = list(map(int, data[index:index + n])) index += n cases.append((n, array)) results = max_min_difference(t, cases) for result in results: print(result)"},{"question":"Given an array of integers a = [a_1, a_2, ldots, a_n] with size n and an integer d, you are allowed to perform the following operation any number of times: choose an index i (1 ≤ i ≤ n) and add or subtract d from a_i. Your task is to determine if it is possible to make the array a into an array of all zeros after a finite number of operations. The first line of the input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 10^9). The second line contains n integers a_1, a_2, ldots, a_n (−10^9 ≤ a_i ≤ 10^9). For each test case, output \\"YES\\" (without quotes) if it is possible to make all elements of the array zero; otherwise, output \\"NO\\". # Example Input ``` 3 3 2 2 4 6 4 3 3 6 9 12 5 5 1 2 3 4 5 ``` Output ``` YES YES NO ``` # Explanation - For the first test case, you can subtract 2 from each element to make them all zero. - For the second test case, you can subtract 3 from each element to make them all zero. - For the third test case, it\'s impossible to make the elements zero using additions and subtractions of 5.","solution":"def can_transform_to_zero(t, test_cases): results = [] for case in test_cases: n, d, array = case # Check if all elements in the array have mod d == 0 if all(x % d == 0 for x in array): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alyona is organizing a treasure hunt on a grid. The grid is composed of n rows and m columns, and each cell contains a certain amount of treasure. Alyona starts at cell (1, 1) and wants to reach cell (n, m) while collecting the maximum possible amount of treasure. Alyona can only move to the right or down from her current cell at each step. Help Alyona determine the maximum amount of treasure she can collect by the time she reaches cell (n, m). The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each, representing the amount of treasure in each cell of the grid. Print one integer — the maximum amount of treasure Alyona can collect by the time she reaches cell (n, m). Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29","solution":"def max_treasure(grid): Returns the maximum amount of treasure Alyona can collect while moving from top-left to bottom-right of the grid. :param grid: List of lists of integers representing the treasure grid. :return: Integer representing the maximum amount of treasure. n = len(grid) m = len(grid[0]) # Initialize a dp table with the same dimensions dp = [[0] * m for _ in range(n)] # Base case dp[0][0] = grid[0][0] # Fill the dp table for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][m-1]"},{"question":"In a small village, there\'s a library with a peculiar policy. The library keeps a list of n books on n different shelves, sorted alphabetically by their titles. The library receives k book requests from villagers every day. Each request consists of the starting index and the ending index (both inclusive) of a contiguous range of books the villager wishes to borrow for the day. The librarian must fulfill each request by finding the lexicographical minimum title from the specified range of books. Given the list of book titles and the requests, help the librarian process the requests efficiently. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of books on the shelves. The next line contains n space-separated strings, where each string represents the title of a book. Each title consists of lowercase English letters and has a length of at least 1 and at most 20. The following line contains a single integer k (1 ≤ k ≤ 10^5) — the number of requests. The next k lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) — the starting and ending index of the range (1-based) of each request. Output k lines, where each line contains the lexicographical minimum title of the books for the respective request. # Example Input: ``` 5 banana apple cherry date elderberry 3 1 3 2 5 1 5 ``` Output: ``` apple apple apple ``` # Explanation: For the first request (1, 3), the titles are [\\"banana\\", \\"apple\\", \\"cherry\\"], and the minimum title is \\"apple\\". For the second request (2, 5), the titles are [\\"apple\\", \\"cherry\\", \\"date\\", \\"elderberry\\"], and the minimum title is \\"apple\\". For the third request (1, 5), the titles are [\\"banana\\", \\"apple\\", \\"cherry\\", \\"date\\", \\"elderberry\\"], and the minimum title is \\"apple\\".","solution":"def process_book_requests(n, books, k, requests): Process the book requests and return the lexicographical minimum title for each request. Parameters: n (int): number of books. books (list of str): list of book titles in alphabetical order. k (int): number of requests. requests (list of tuple of int): list of requests (start, end indices). Returns: list of str: list of lexicographical minimum titles for each request. result = [] for l, r in requests: result.append(min(books[l-1:r])) return result"},{"question":"In a large warehouse, there are many containers that need to be shipped. Each container has a weight, and there is a limit on the total weight that can be shipped together in a single trip. Given the maximum weight capacity of a trip and the weights of the containers, determine the minimum number of trips required to ship all the containers. Write a function that takes an integer `capacity` representing the maximum weight that can be shipped in one trip and a list of integers `weights` representing the weights of the containers. The function should return an integer representing the minimum number of trips required. The first line contains an integer `t` (1 le t le 10^4), the number of test cases. Each test case consists of: - An integer `n` (1 le n le 2 times 10^5), the number of containers. - An integer `capacity` (1 le capacity le 10^9), the maximum weight that can be shipped in a single trip. - A list of `n` integers (1 le weights_i le 10^9), the weights of the containers. The sum of n over all test cases will not exceed 2 times 10^5. For each test case, print a single integer representing the minimum number of trips required to ship all the containers. Example: ``` Input: 2 5 10 2 3 5 8 3 4 15 10 5 5 7 Output: 3 2 ``` Explanation: In the first test case, one possible way to achieve the minimum number of trips is: - Trip 1: Containers with weights 8 and 2 (total weight = 10) - Trip 2: Container with weight 5 (total weight = 5) - Trip 3: Containers with weights 3 and 3 (total weight = 6) In the second test case, one possible way to achieve the minimum number of trips is: - Trip 1: Containers with weights 10 and 5 (total weight = 15) - Trip 2: Containers with weights 5 and 7 (total weight = 12)","solution":"def min_trips(capacity, weights): Returns the minimum number of trips required to ship all the containers with the given capacity. weights.sort() left = 0 right = len(weights) - 1 trips = 0 while left <= right: if weights[left] + weights[right] <= capacity: left += 1 right -= 1 trips += 1 return trips def solve(test_cases): results = [] for test in test_cases: n = test[0] capacity = test[1] weights = test[2] results.append(min_trips(capacity, weights)) return results"},{"question":"You are given a list of n words, where each word is a string consisting of lowercase English letters. You want to group these words into the smallest number of sets such that within each set, any two words can form a palindrome by concatenating them in some order. Note: A palindrome is a string that reads the same forward and backward. For example, \\"ababa\\" is a palindrome, while \\"abca\\" is not. Determine the maximum number of sets you can form from the given list of words. # Input - The first line contains a single integer n (1 ≤ n ≤ 50,000) — the number of words. - Each of the next n lines contains a string wi (1 ≤ |wi| ≤ 10^6) — the list of words. # Output - Print a single integer — the maximum number of sets you can form. # Example Input ``` 5 ab ba aa abc cba ``` Output ``` 3 ``` # Explanation One possible grouping is: 1. {\\"ab\\", \\"ba\\"} 2. {\\"aa\\"} 3. {\\"abc\\", \\"cba\\"} In the first set, \\"ab\\" + \\"ba\\" = \\"abba\\" which is a palindrome, and \\"ba\\" + \\"ab\\" = \\"baab\\" which is also a palindrome. In the second set, \\"aa\\" is already a palindrome. In the third set, \\"abc\\" + \\"cba\\" = \\"abccba\\" which is a palindrome, and \\"cba\\" + \\"abc\\" = \\"cbaabc\\" which is also a palindrome. So, the output is 3.","solution":"from collections import defaultdict def max_palindrome_sets(words): def is_palindrome(word): return word == word[::-1] word_dict = defaultdict(int) palindrome_count = 0 pairs_count = 0 for word in words: reversed_word = word[::-1] if word_dict[reversed_word] > 0: pairs_count += 1 word_dict[reversed_word] -= 1 else: word_dict[word] += 1 for word in word_dict: if word_dict[word] > 0 and is_palindrome(word): palindrome_count += 1 return pairs_count + palindrome_count"},{"question":"You are given an array of integers a consisting of n (1 le n le 2 cdot 10^5) elements. The array can consist of positive and negative integers. Your task is to determine the maximum sum of a subarray that contains at least one positive number. If all elements in the array are non-positive, print the largest element. A subarray is a contiguous part of an array. The first line of input contains an integer t (1 le t le 10) - the number of test cases. Each test case starts with an integer n followed by n integers representing the array elements. For each test case, print a single integer - the maximum sum of a subarray that contains at least one positive number or the largest element if all elements in the array are non-positive. # Example Input: ``` 3 5 -1 -2 -3 -4 -5 4 1 2 3 4 5 -1 2 -3 4 -5 ``` Output: ``` -1 10 4 ``` For the first test case, all elements are non-positive, and the largest one is -1. For the second test case, the maximum sum of a subarray containing at least one positive number is the sum of the entire array: 1 + 2 + 3 + 4 = 10. For the third test case, the maximum sum subarray containing at least one positive number is just the subarray [4], giving a sum of 4.","solution":"def max_subarray_sum(t, cases): def max_subarray(arr): if all(x <= 0 for x in arr): return max(arr) current_max = global_max = float(\'-inf\') for number in arr: if current_max < 0: current_max = 0 current_max += number if current_max > global_max: global_max = current_max return global_max results = [] for case in cases: n, arr = case results.append(max_subarray(arr)) return results"},{"question":"You are given a string s consisting of lowercase English letters. You need to find the length of the longest substring without repeating characters. Input: The first line of input contains a single integer t (1 leq t leq 10^5) — the number of test cases. The description of the test cases follows. Each test case consists of one line which contains a string s (1 leq |s| leq 10^5), where |s| represents the length of the string. It is guaranteed that the sum of |s| over all test cases does not exceed 10^6. Output: For each test case, output a single integer representing the length of the longest substring without repeating characters. Example: Input: ``` 3 abcabcbb bbbbb pwwkew ``` Output: ``` 3 1 3 ``` Explanation: For the first test case \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", which has a length 3. For the second test case \\"bbbbb\\", the longest substring without repeating characters is \\"b\\", which has a length 1. For the third test case \\"pwwkew\\", the longest substring without repeating characters is \\"wke\\", which has a length 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = index longest = max(longest, index - start + 1) return longest def process_test_cases(t, test_cases): results = [] for i in range(t): results.append(length_of_longest_substring(test_cases[i])) return results"},{"question":"You are given a list of integers representing the height of bars in a histogram. Your task is to determine the largest rectangle that can be formed by using these bars. Each bar has a unit width of 1. The input is a single integer n (1 ≤ n ≤ 100000) representing the number of bars, followed by n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000000000) representing the heights of the bars. Output a single integer representing the area of the largest rectangle that can be formed in the histogram. For example, given the heights [2, 1, 5, 6, 2, 3], the largest rectangle has an area of 10. Input: 6 2 1 5 6 2 3 Output: 10","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle that can be formed in a histogram. :param heights: List of integers representing heights of bars in the histogram :return: Integer representing the area of the largest rectangle n = len(heights) stack = [] max_area = 0 for i in range(n + 1): while stack and (i == n or heights[stack[-1]] >= heights[i]): h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Mike is studying the relationship between temperature and humidity. He wants to determine the number of days when the temperature was within a specified comfortable range and the humidity was below a certain threshold. You are provided with the daily weather data for the past n days and the defined comfortable temperature range and humidity threshold. The first line of the input contains an integer n (1 ≤ n ≤ 50) — the number of days. The second line contains two integers tmin and tmax (-50 ≤ tmin ≤ tmax ≤ 50) — the minimum and maximum comfortable temperatures inclusive. The third line contains an integer h (0 ≤ h ≤ 100) — the maximum comfortable humidity. Each of the next n lines contains two integers ti and hi (-50 ≤ ti ≤ 50, 0 ≤ hi ≤ 100) — the temperature and humidity on the i-th day. Print a single integer — the number of days when both the temperature was in the range [tmin, tmax] and the humidity was less than or equal to h. For example, consider the following input: ``` 5 20 30 60 18 55 22 60 31 45 27 50 24 65 ``` In this case, the output would be: ``` 2 ``` This is because, on the second and fourth days, both the temperature and humidity are within the comfortable range and below the threshold respectively.","solution":"def count_comfortable_days(n, tmin, tmax, hmax, weather_data): Returns the number of days when the temperature was within [tmin, tmax] and the humidity was less than or equal to hmax. comfortable_days = 0 for temp, humidity in weather_data: if tmin <= temp <= tmax and humidity <= hmax: comfortable_days += 1 return comfortable_days"},{"question":"You are given a city map represented by a grid of size n x m. Each cell in the grid can either be a road (.) or a building (#). You need to determine whether there exists a path from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (n, m) that does not pass through any buildings. You can only move up, down, left, or right from one road cell to another road cell. Your task is to write a function that checks if such a path exists. The function should return \\"YES\\" if there is a path and \\"NO\\" if there isn\'t. # Function Signature ```python def is_path_exists(n: int, m: int, grid: List[str]) -> str: ``` # Input - `n`: an integer (1 ≤ n ≤ 1000), representing the number of rows in the grid. - `m`: an integer (1 ≤ m ≤ 1000), representing the number of columns in the grid. - `grid`: a list of strings of length `n`, each of length `m`, representing the city map. # Output - Return \\"YES\\" if there is a path from (1, 1) to (n, m), otherwise return \\"NO\\". # Example Example 1 Input: ```python n = 3 m = 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] ``` Output: ```python \\"YES\\" ``` Example 2 Input: ```python n = 3 m = 3 grid = [ \\"...\\", \\"#\\", \\"...\\" ] ``` Output: ```python \\"NO\\" ``` # Notes In the first example, there is a clear path from the top-left corner to the bottom-right corner by navigating around the building in the second row. In the second example, the path is blocked by buildings and it is impossible to reach the bottom-right corner from the top-left corner.","solution":"from typing import List def is_path_exists(n: int, m: int, grid: List[str]) -> str: if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'#\' or visited[x][y]: return False if x == n - 1 and y == m - 1: return True visited[x][y] = True # Visit neighbors (up, down, left, right) if (dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1)): return True return False visited = [[False for _ in range(m)] for _ in range(n)] return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given a list of integers representing the height sequence of buildings in a city. You are to construct a fence that separates the city into two parts such that the total number of buildings is maximized on the left from the tallest building and minimized on the right. Whenever there are multiple choices for the tallest building, choose the one that comes first in the sequence. If it is possible to separate the buildings in such a way, print the two parts of buildings separated by the tallest building. If there is only one building in the city, print \\"IMPOSSIBLE\\". The first line of the input contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (1 le n le 2 cdot 10^5) — the number of buildings in the city. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^6) — the heights of the buildings. For each test case, print the sequence of buildings separated by the tallest building. If there\'s only one building, print \\"IMPOSSIBLE\\". # Example ~~~~ Input 3 5 2 3 5 4 1 1 7 4 1 2 3 4 Output 2 3 5 | 4 1 IMPOSSIBLE 1 2 3 4 | ~~~~ # Explanation In the first example, the sequence can be divided as `2 3 5 | 4 1` where 5 is the tallest building. In the second example, there is only one building, so output is \\"IMPOSSIBLE\\". In the third example, the sequence can be divided as `1 2 3 4 |` where 4 is the tallest building.","solution":"def separate_buildings(buildings): if len(buildings) == 1: return \\"IMPOSSIBLE\\" # Find the index of the first occurrence of the tallest building max_height = max(buildings) max_index = buildings.index(max_height) left_part = buildings[:max_index + 1] right_part = buildings[max_index + 1:] if right_part: return \' \'.join(map(str, left_part)) + \' | \' + \' \'.join(map(str, right_part)) else: return \' \'.join(map(str, left_part)) + \' |\' def process_test_cases(test_cases): results = [] for buildings in test_cases: results.append(separate_buildings(buildings)) return results"},{"question":"A company is conducting a coding competition where participants are required to solve problems on arrays and strings. One of the problems involves finding the longest palindromic substring within a given string. A palindromic string is a string that reads the same backwards as forwards. Your task is to write a function that takes a string s (1 ≤ |s| ≤ 1000) as input and returns the longest palindromic substring of s. If there are multiple such substrings of maximum length, return the first one that appears in the string. # Input - A single string s of length n (1 ≤ n ≤ 1000). # Output - A single line containing the longest palindromic substring of s. # Example __Input__ ``` babad ``` __Output__ ``` bab ``` __Input__ ``` cbbd ``` __Output__ ``` bb ``` # Constraints - The input string s consists only of lowercase English letters. # Note For the first example, the answer is \\"bab\\" because it is the longest palindromic substring, though \\"aba\\" is also a valid answer, but since \\"bab\\" appears first, it is returned. For the second example, the longest palindrome substring is \\"bb\\", a substring with length 2.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of s. n = len(s) if n == 0: return \\"\\" longest = s[0] for i in range(n): # Check for odd-length palindromes for j in range(min(i + 1, n - i)): if s[i - j] != s[i + j]: break if 2 * j + 1 > len(longest): longest = s[i - j:i + j + 1] # Check for even-length palindromes for j in range(min(i + 1, n - i - 1)): if s[i - j] != s[i + j + 1]: break if 2 * j + 2 > len(longest): longest = s[i - j:i + j + 2] return longest"},{"question":"You are given an array of integers of length `n`. Your task is to perform a series of operations to make all elements in the array equal. In one operation, you can: 1. Choose any two indices `i` and `j` (1 ≤ i, j ≤ n, i ≠ j). 2. Replace `a[i]` with `a[i] + a[j]`. Determine the minimum number of operations required to make all elements in the array equal. **Input:** - The first line contains a single integer `n` (1 ≤ n ≤ 2000) — the number of elements in the array. - The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. **Output:** - Print a single integer — the minimum number of operations needed to make all elements in the array equal. **Example:** ``` Input: 4 1 2 3 4 Output: 3 ``` Explanation: - Operation 1: Choose indices 1 and 2. Array becomes [3, 2, 3, 4]. - Operation 2: Choose indices 2 and 3. Array becomes [3, 6, 3, 4]. - Operation 3: Choose indices 3 and 4. Array becomes [7, 6, 7, 4]. Now all elements in the array can be easily made equal by additional operations. The total number of operations required to achieve this is minimal at 3.","solution":"def min_operations_to_equal_elements(n, array): Determines the minimum number of operations required to make all elements equal. In each operation, you can pick any two elements and replace one of them with the sum of both. Args: n (int): The number of elements in the array. array (list): The list of integers. Returns: int: The minimum number of operations needed to make all elements in the array equal. from collections import Counter # Count the frequency of each element in the array frequency = Counter(array) # Find the element with the highest frequency (as we aim to maximize this in fewer steps) most_common_element, max_frequency = frequency.most_common(1)[0] # The minimum number of operations needed is the number of elements to convert (n - max_frequency) return n - max_frequency"},{"question":"You are given a large tree consisting of n nodes. A tree is a connected graph with n nodes and n-1 edges with no cycles. Each node in the tree is labeled with a unique integer from 1 to n. From any given node u, you can move to another node v if there is an edge connecting u and v. Each edge has a distance (or weight) of 1. Your task is to find the radius of the tree. The radius of a tree is defined as the minimum possible value of the maximum distance from any node to a central node. A central node is defined in this context as a node that minimizes the maximum distance to any other node in the tree. The first line contains a single integer n (2 ≤ n ≤ 200,000) — the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the edges of the tree. Output a single integer — the radius of the tree. Example: Input: 6 1 2 2 3 2 4 4 5 4 6 Output: 2 Explanation: - The tree can be visualized as follows: 1 | 2 / 3 4 / 5 6 - The central node is 2, as the maximum distance to any other node is minimized at 2, which is 2 units away (from node 3 to node 5). Therefore, the radius of the tree is 2.","solution":"from collections import deque def find_radius_of_tree(n, edges): # Helper function to perform BFS and return the farthest node and its distance def bfs(start_node): distances = [-1] * n distances[start_node] = 0 queue = deque([start_node]) max_distance = 0 farthest_node = start_node while queue: node = queue.popleft() current_distance = distances[node] for neighbor in tree[node]: if distances[neighbor] == -1: queue.append(neighbor) distances[neighbor] = current_distance + 1 if distances[neighbor] > max_distance: max_distance = distances[neighbor] farthest_node = neighbor return farthest_node, max_distance # Transform input edges into an adjacency list representation of the tree tree = [[] for _ in range(n)] for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) # Step 1: Find the farthest node from an arbitrary node (let\'s choose node 0) farthest_node, _ = bfs(0) # Step 2: Find the farthest node from the first farthest node found in step 1 other_farthest_node, distance = bfs(farthest_node) # The radius of the tree is the ceiling of half the diameter of the tree radius = (distance + 1) // 2 return radius"},{"question":"Given a grid with dimensions `m` x `n` consisting of only \'0\'s (representing water) and \'1\'s (representing land), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function that determines the number of islands. The first line of input contains two integers `m` and `n` (`1 ≤ m, n ≤ 300`) representing the dimensions of the grid. The next `m` lines each contain `n` characters (\'0\' or \'1\'), representing the grid. Print the number of islands on a single line. **Example:** ``` Input: 4 5 11000 11000 00100 00011 Output: 3 ``` **Explanation:** - Island 1 is formed by the upper left \'1\'s. - Island 2 is the single \'1\' in the middle of the grid. - Island 3 is formed by the \'1\'s at the bottom right of the grid.","solution":"def numIslands(grid): Returns the number of islands in the given grid. if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' dfs(grid, i - 1, j) dfs(grid, i + 1, j) dfs(grid, i, j - 1) dfs(grid, i, j + 1) islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': islands += 1 dfs(grid, i, j) return islands"},{"question":"You are given an array of integers a of length n. You need to choose k integers from the array such that the sum of these integers is as large as possible. However, there is a constraint: any two chosen integers cannot be consecutive in the array. Write a program to find the maximum possible sum of k non-consecutive integers from the array. The first line contains two integers n and k (1 le k le n le 2 cdot 10^5) — the length of the array and the number of non-consecutive integers to choose. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Print a single integer — the maximum possible sum of k non-consecutive integers. Example: Input: ``` 5 2 1 2 3 4 5 ``` Output: ``` 9 ``` Explanation: The best choice is to select a_1 = 1 and a_4 = 4 (or any other pair that leads to the same maximum sum of 9), which are not consecutive and their sum is maximum.","solution":"def max_non_consecutive_sum(n, k, array): Returns the maximum possible sum of k non-consecutive integers from the array. import heapq # Use a max heap to keep track of the (value, index) and sort them in descending order based on value. max_heap = [(-val, idx) for idx, val in enumerate(array)] heapq.heapify(max_heap) selected = [] for _ in range(k): while max_heap: val, idx = heapq.heappop(max_heap) # Convert back to positive value val = -val if not selected or selected[-1] != idx - 1: selected.append(idx) break # Calculate the sum of the selected indices result = sum(array[idx] for idx in selected) return result # Example usage: # print(max_non_consecutive_sum(5, 2, [1, 2, 3, 4, 5])) # Output should be 9"},{"question":"You are given an array of integers. Your task is to find out if there exists a pair of integers within the array such that their sum is equal to a given target sum. The first line contains two integers, `n` and `target` (1 ≤ n ≤ 10^5, 1 ≤ target ≤ 10^9) — the number of integers in the array and the target sum respectively. The second line contains `n` integers (each integer\'s absolute value does not exceed 10^9). Output \\"Yes\\" (without quotes) if there exists such a pair, otherwise output \\"No\\" (without quotes). Sample 1: Input: 5 9 2 7 11 15 1 Output: Yes Sample 2: Input: 4 8 1 2 4 4 Output: Yes Sample 3: Input: 3 20 10 15 3 Output: No Clarifications: - The solution should have an efficient runtime complexity, ideally O(n). - The integers within the array can be both positive or negative.","solution":"def has_pair_with_sum(n, target, arr): Returns \\"Yes\\" if there exists a pair of numbers in \'arr\' that sum up to \'target\', otherwise \\"No\\". seen_numbers = set() for num in arr: if target - num in seen_numbers: return \\"Yes\\" seen_numbers.add(num) return \\"No\\""},{"question":"In a small town, there is a legend about an ancient artifact hidden in a mysterious maze. The town\'s mayor has decided to send a team to locate and retrieve the artifact. The team must traverse the maze starting from the entrance, and find the artifact, which is kept in the only cell marked as \'X\'. The rest of the maze consists of open cells represented by \'.\', and walls represented by \'#\'. The team can only move vertically or horizontally, not diagonally, and cannot pass through walls. The problem is to find the minimum number of steps required for the team to reach the artifact from the entrance. The entrance to the maze is always at the top-left corner, indicated by (1, 1). The input consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the maze, respectively. - Each of the next n lines contains a string of m characters representing the maze. The output should be a single integer representing the minimum number of steps to reach the artifact. If it is impossible to reach the artifact, print -1. Example: Input: 4 4 .... .#.. .#X. .... Output: 4 In the example given, the path to the artifact is: (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3). Thus, the minimum number of steps is 4.","solution":"from collections import deque def min_steps_to_artifact(n, m, maze): Returns the minimum number of steps required to reach the artifact \'X\' starting from (1, 1). If the artifact is not reachable, return -1. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] != \'#\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (current row, current column, steps so far) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.popleft() if maze[x][y] == \'X\': return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"A pet store owner has n delivery drivers who deliver pet supplies around the city. The owner wants to optimize the delivery routes to minimize the maximum delivery time any driver spends on the road. Each driver can deliver to several locations, but only one driver can handle one location at a time. You are given an array `delivery_times` where `delivery_times[i]` represents the time it takes to deliver to the i-th customer location. The owner can assign each of the n drivers to one or more locations in such a way that the maximum time any driver spends on the road is minimized. Write a program to find this minimized maximum time. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100000), where n is the number of drivers and m is the number of delivery locations. The second line contains m integers `delivery_times[i]` (1 ≤ delivery_times[i] ≤ 10000) — the time it takes to deliver to the i-th customer location. Print a single integer — the minimized maximum time any driver spends on the road. For example: **Input:** ``` 3 5 10 20 30 40 50 ``` **Output:** ``` 60 ``` **Explanation:** One optimal way to assign deliveries is: - Driver 1: 10 + 20 + 30 = 60 - Driver 2: 40 - Driver 3: 50 So the maximum time any driver spends on the road is 60.","solution":"def minimize_max_time(n, m, delivery_times): def can_deliver_in_time(mid): total = 0 drivers_needed = 1 for t in delivery_times: total += t if total > mid: drivers_needed += 1 total = t if drivers_needed > n: return False return True left, right = max(delivery_times), sum(delivery_times) while left < right: mid = (left + right) // 2 if can_deliver_in_time(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given an array of integers where the length of the array is N. You need to process a sequence of operations that will either update the array or query the sum of a subarray. Each operation has one of the following forms: 1. Update operation: Given an index and a value, update the value at that index in the array. 2. Query operation: Given a range [L, R], compute the sum of the subarray within that range. Implement efficient handling of these operations. # Input The first line contains two integers N and Q (1 leq N, Q leq 100000) — the number of elements in the array and the number of operations. The second line contains N integers a_1, a_2, ldots, a_N (1 leq a_i leq 10^9) — the initial array elements. The next Q lines describe the operations. Each operation is one of the following: - \\"1 x y\\" means update the element at position x (1 leq x leq N) to y (1 leq y leq 10^9). - \\"2 L R\\" means calculate the sum of the elements in the subarray from index L to R (1 ≤ L ≤ R ≤ N). # Output For each query operation, output the sum of the specified subarray on a new line. # Example Input ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 3 ``` Output ``` 6 13 ``` # Note In the first query, the sum of the subarray from index 1 to 3 is 1+2+3 = 6. After the update operation, the array becomes [1, 2, 10, 4, 5]. In the second query, the sum of the subarray from index 1 to 3 is 1+2+10 = 13.","solution":"class ArrayProcessor: def __init__(self, arr): self.arr = arr self.n = len(arr) self.segment_tree = [0] * (4 * self.n) self.build_segment_tree(0, 0, self.n - 1) def build_segment_tree(self, node, start, end): if start == end: self.segment_tree[node] = self.arr[start] else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 self.build_segment_tree(left_node, start, mid) self.build_segment_tree(right_node, mid + 1, end) self.segment_tree[node] = self.segment_tree[left_node] + self.segment_tree[right_node] def update(self, idx, value): self._update(0, 0, self.n - 1, idx, value) def _update(self, node, start, end, idx, value): if start == end: self.arr[idx] = value self.segment_tree[node] = value else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 if start <= idx <= mid: self._update(left_node, start, mid, idx, value) else: self._update(right_node, mid + 1, end, idx, value) self.segment_tree[node] = self.segment_tree[left_node] + self.segment_tree[right_node] def query(self, L, R): return self._query(0, 0, self.n - 1, L, R) def _query(self, node, start, end, L, R): if R < start or end < L: return 0 if L <= start and end <= R: return self.segment_tree[node] mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 left_sum = self._query(left_node, start, mid, L, R) right_sum = self._query(right_node, mid + 1, end, L, R) return left_sum + right_sum"},{"question":"After analyzing the provided sample questions, here is a new question that aligns with the existing set in terms of style, complexity, and scope: You are given a string s consisting of lowercase letters. A substring of string s is called palindromic if it reads the same backwards as forwards. Your task is to answer several queries about the string. Each query can be of two types: 1. Type 1: Change one character of the string s at a specified position to another specified character. 2. Type 2: Determine the number of distinct palindromic substrings in the current string s. The first line contains one integer q (1 ≤ q ≤ 200000) — the number of queries. Then q lines follow. The i-th of them contains a query: - If the query is of Type 1, it consists of three elements: 1, posi, and chari (1 ≤ posi ≤ |s|, \'a\' ≤ chari ≤ \'z\'). This indicates changing the character at position posi to chari. - If the query is of Type 2, it consists of a single element: 2. This indicates you should output the number of distinct palindromic substrings in the current string s. Assume 1-based indexing for positions in the string. Output the answers for the queries of Type 2, one per line. Example: Input: ``` 5 abac 2 1 2 c 2 1 3 b 2 ``` Output: ``` 5 4 5 ``` Explanation: - Initially, the string is \\"abac\\". The distinct palindromic substrings are \\"a\\", \\"b\\", \\"c\\", \\"aba\\", \\"cac\\" (count = 5). - After the first query, the string changes to \\"cbac\\". The distinct palindromic substrings are \\"c\\", \\"b\\", \\"a\\", \\"cac\\" (count = 4). - After the second query, the string changes to \\"cbcb\\". The distinct palindromic substrings are \\"c\\", \\"b\\", \\"a\\", \\"cbc\\", \\"bcb\\" (count = 5).","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Leo has recently moved to a new city and is trying to organize his schedule by using a timetable. Each appointment can be represented by a time interval [start, end] denoting the start time and end time of the appointment. Leo wants to find the maximum number of non-overlapping appointments he can attend in a single day. Your task is to write a program that helps Leo to find the maximum number of non-overlapping appointments from a given list of appointments. The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), the number of appointments. The next n lines each contain two integers start and end (0 ≤ start < end ≤ 10^9) representing the start and end times of an appointment. Output a single integer which is the maximum number of non-overlapping appointments Leo can attend. # Example Input ``` 5 1 3 2 5 4 6 6 8 5 7 ``` Output ``` 3 ``` In this example, Leo can attend appointments [1, 3], [4, 6], and [6, 8] without any overlaps. Therefore, the maximum number of non-overlapping appointments Leo can attend is 3. # Note To solve this problem, you can use a greedy algorithm. One possible approach is to sort the appointments by their end times and then iterate through them, selecting those appointments which start after the previous selected appointment’s end time.","solution":"def max_non_overlapping_appointments(n, appointments): Returns the maximum number of non-overlapping appointments Leo can attend. Parameters: n (int): Number of appointments. appointments (list of tuples): List containing tuples of (start, end) times. Returns: int: Maximum number of non-overlapping appointments. # Sort appointments by their end time appointments.sort(key=lambda x: x[1]) max_appointments = 0 last_end_time = -1 # Iterate through sorted appointments for start, end in appointments: if start >= last_end_time: max_appointments += 1 last_end_time = end # Update last end time to current appointment\'s end time return max_appointments"},{"question":"You are given an undirected graph which represents a maze. Each node in the graph is a room, and there is an edge between two nodes if there is a corridor connecting those two rooms. Some nodes may have traps, making them unsafe to visit. You need to determine if there is a path from the start node to the end node that does not pass through any traps. The graph is represented as follows: - The first line contains three integers, n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ n), representing the number of rooms, the number of corridors, and the number of traps, respectively. - The second line contains k integers representing the nodes which are traps. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is a corridor between room u and room v. - The last two lines contain integers s and e (1 ≤ s, e ≤ n), representing the start and end nodes. Write a function `def find_safe_path(n, m, k, traps, edges, s, e):` to determine if there is a safe path from s to e. The function should return a boolean value: `True` if there is a safe path that doesn\'t pass through any traps, and `False` otherwise. Here\'s the format: ``` Input: 6 7 2 3 5 1 2 1 3 2 4 2 5 3 6 4 6 5 6 1 6 Output (example): True ```","solution":"def find_safe_path(n, m, k, traps, edges, s, e): Determine if there is a safe path from s to e avoiding traps. from collections import deque, defaultdict # Create the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find path from s to e queue = deque([s]) visited = set([s]) traps_set = set(traps) while queue: current = queue.popleft() if current == e: return True for neighbor in graph[current]: if neighbor not in visited and neighbor not in traps_set: visited.add(neighbor) queue.append(neighbor) return False"},{"question":"Sereja found himself playing a new game with sequences. This time, he has a sequence of integers a1, a2, ..., an. He can perform a series of operations to maximize his score. In each operation, Sereja can do one of the following two actions: 1. Choose two distinct elements ai and aj (1 ≤ i, j ≤ n) from the sequence and remove both of them, which costs |ai - aj| points of energy. 2. Choose an element ai from the sequence and add it to his score. The game ends when Sereja cannot perform any more operations. He cannot have negative energy at any point during the game. Given the sequence and the initial amount of energy Sereja has, determine the maximum score Sereja can achieve. The first line contains two integers n and E (1 ≤ n ≤ 100, 0 ≤ E ≤ 10^5) — the length of the sequence and the initial energy Sereja has. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^3). Print a single integer — the maximum score Sereja can achieve. Example: Input 5 10 1 3 2 4 5 Output 15","solution":"def max_score(n, E, sequence): Returns the maximum score Sereja can achieve given the sequence and initial energy. Args: n (int): The length of the sequence. E (int): The initial amount of energy. sequence (list): List of integers representing the sequence. Returns: int: The maximum score Sereja can achieve. # The optimal strategy in this problem context: just take the sum of the whole sequence # There\'s no need to use energy since adding all elements to score maximizes it. return sum(sequence)"},{"question":"You are given two integer arrays `arr1` and `arr2`, both containing `n` positive integers. You can perform the following operation any number of times on `arr1` or `arr2`: choose an integer from one array and remove it while adding the same integer to the other array. Your task is to determine if it is possible to make the sums of `arr1` and `arr2` equal by performing the operation zero or more times. The first line of input contains the integer `n` (1 ≤ n ≤ 1000) — the number of elements in each array. The second line of input contains `n` space-separated integers representing the elements of `arr1`. The third line of input contains `n` space-separated integers representing the elements of `arr2`. Print \\"YES\\" if it is possible to make the sums of `arr1` and `arr2` equal by performing the operation zero or more times. Otherwise, print \\"NO\\". Example input/output: Input: 3 1 2 3 4 5 6 Output: NO Input: 4 1 4 5 7 2 3 6 8 Output: YES","solution":"def can_make_sums_equal(n, arr1, arr2): Determine if it\'s possible to make the sums of two arrays equal by performing the operation of transferring elements between the arrays. Parameters: n (int): Size of the arrays (1 ≤ n ≤ 1000) arr1 (list of int): First array of integers arr2 (list of int): Second array of integers Returns: str: \\"YES\\" if it\'s possible to make the sums equal, otherwise \\"NO\\" sum1 = sum(arr1) sum2 = sum(arr2) # Check if they have the same parity if (sum1 - sum2) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid with m rows and n columns. Each cell in the grid is either empty or contains a barrier. You start from the top-left corner of the grid and want to reach the bottom-right corner. You can move up, down, left, or right, but you cannot move through the barriers. Write a program to find the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, return -1. The first line of the input contains two integers m and n (2 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. The next m lines contain n characters each. Each character is either \'.\' (dot) representing an empty cell or \'#\' (hash) representing a barrier. Output the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, print -1. Example: Input: 5 5 . . # . . . # . # . . # . # . . . . # # . # . . . Output: 8 Explanation: The shortest path in this example goes around the barriers in the grid and consists of 8 steps.","solution":"from collections import deque def shortest_path(m, n, grid): Returns the length of the shortest path from the top-left corner to the bottom-right corner of the grid. If there is no such path, returns -1. grid is a list of strings representing the grid. # Helper function to check if a cell is valid for moving into def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'.\' # Directions for moving up, down, left, or right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we\'ve reached the bottom-right corner if x == m - 1 and y == n - 1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If no path is found return -1 # Function to convert input to required format def solve(m, n, grid_lines): grid = [line.split() for line in grid_lines] return shortest_path(m, n, grid)"},{"question":"You are a software developer, and you have been tasked with designing a ticketing system for a bus company. The bus company operates a fleet of buses, each with a fixed seating capacity, and they sell tickets for various routes. Each bus route has a unique identifier and a list of buses assigned to it. Each bus on a route has a seating capacity and a list of passengers who have purchased tickets. Your task is to implement a class `BusCompany` that manages the ticketing system, including adding new routes, assigning buses to routes, and selling tickets to passengers. You need to implement the following methods: 1. `add_route(route_id)`: Adds a new route with the given `route_id`. 2. `add_bus(route_id, bus_id, capacity)`: Assigns a new bus with the given `bus_id` and `capacity` to the specified route. 3. `sell_ticket(route_id, bus_id, passenger_name)`: Sells a ticket to a passenger with the given `passenger_name` for the specified bus on the route. If the bus is full, it should return \\"Bus Full\\". If the bus or route does not exist, it should return \\"Bus or Route Not Found\\". 4. `get_passengers(route_id, bus_id)`: Returns the list of passengers on the specified bus of the route. If the bus or route does not exist, it should return \\"Bus or Route Not Found\\". You may assume that: - `route_id`, `bus_id`, and `passenger_name` are strings consisting of alphanumeric characters. - The seating capacity of a bus is a positive integer. Here is an example of how your class should work: ```python bus_company = BusCompany() bus_company.add_route(\\"R1\\") bus_company.add_bus(\\"R1\\", \\"B1\\", 2) print(bus_company.sell_ticket(\\"R1\\", \\"B1\\", \\"Alice\\")) # Output: Passenger Added print(bus_company.sell_ticket(\\"R1\\", \\"B1\\", \\"Bob\\")) # Output: Passenger Added print(bus_company.sell_ticket(\\"R1\\", \\"B1\\", \\"Charlie\\")) # Output: Bus Full print(bus_company.get_passengers(\\"R1\\", \\"B1\\")) # Output: [\\"Alice\\", \\"Bob\\"] print(bus_company.sell_ticket(\\"R1\\", \\"B2\\", \\"Eve\\")) # Output: Bus or Route Not Found ``` Implement the class `BusCompany` to meet the above requirements.","solution":"class BusCompany: def __init__(self): self.routes = {} def add_route(self, route_id): Adds a new route with the given route_id. self.routes[route_id] = {} def add_bus(self, route_id, bus_id, capacity): Assigns a new bus with the given bus_id and capacity to the specified route. if route_id in self.routes: self.routes[route_id][bus_id] = {\\"capacity\\": capacity, \\"passengers\\": []} def sell_ticket(self, route_id, bus_id, passenger_name): Sells a ticket to a passenger with the given passenger_name for the specified bus on the route. if route_id in self.routes and bus_id in self.routes[route_id]: bus = self.routes[route_id][bus_id] if len(bus[\\"passengers\\"]) < bus[\\"capacity\\"]: bus[\\"passengers\\"].append(passenger_name) return \\"Passenger Added\\" else: return \\"Bus Full\\" else: return \\"Bus or Route Not Found\\" def get_passengers(self, route_id, bus_id): Returns the list of passengers on the specified bus of the route. if route_id in self.routes and bus_id in self.routes[route_id]: return self.routes[route_id][bus_id][\\"passengers\\"] else: return \\"Bus or Route Not Found\\""},{"question":"Miranda is planning to host a series of coding competitions, but she\'s facing an issue with the distribution of prizes. There are n winners, and Miranda has m different types of prizes. Each type of prize has a certain number of units available, and she wants to distribute exactly one prize of each type to as many different winners as possible. Each prize type is represented with a positive integer count that indicates how many units of that prize type are available. Help Miranda determine the maximum number of winners who can get one of each type of prize. The first line of the input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 10) — the number of winners and the number of different types of prizes. The second line contains m space-separated integers p1, p2, ..., pm (1 ≤ pi ≤ 100), where pi is the number of units available for prize type i. Print a single integer — the maximum number of winners who can receive one of each type of prize. In the first sample, Miranda can give each of the 2 winners one of each type of prize since there are 2 units of every prize type available. In the second test, Miranda can give each of the 4 winners one of each type of prize, as there are at least 4 units available for each prize type. In the third test, Miranda can only ensure that at most 3 winners get one of each type of prize since the minimum available prize type has 3 units. # Sample Input 1: ``` 2 3 2 2 2 ``` # Sample Output 1: ``` 2 ``` # Sample Input 2: ``` 5 2 4 4 ``` # Sample Output 2: ``` 4 ``` # Sample Input 3: ``` 10 5 3 4 5 6 7 ``` # Sample Output 3: ``` 3 ```","solution":"def max_winners(n, m, prize_counts): Determine the maximum number of winners who can receive one of each type of prize. Args: n (int): The number of winners m (int): The number of different types of prizes prize_counts (list): List of integers where each integer represents the number of units available for each prize type Returns: int: Maximum number of winners who can get one of each type of prize return min(min(prize_counts), n) # Test cases for the function assert max_winners(2, 3, [2, 2, 2]) == 2 assert max_winners(5, 2, [4, 4]) == 4 assert max_winners(10, 5, [3, 4, 5, 6, 7]) == 3"},{"question":"You are given a list of integers and a target integer. Your task is to find all unique pairs of numbers in the list that add up to the target integer. Each pair should be represented as a tuple (a, b), where a <= b, and the pairs should be listed in ascending order of a. If there are multiple pairs with the same a value, then they should be listed in ascending order of b. The first line of the input contains two integers n and t (1 ≤ n ≤ 100, -10^4 ≤ t ≤ 10^4), where n is the number of integers in the list and t is the target integer. The second line contains n space-separated integers, each in the range of -10^4 to 10^4. Output all unique pairs of numbers from the list that add up to t. If no such pair exists, output \\"NO PAIRS FOUND\\". **Example** Input: ``` 5 7 3 4 2 5 1 ``` Output: ``` (2, 5) (3, 4) ``` Input: ``` 4 8 2 2 4 4 ``` Output: ``` (4, 4) ``` Input: ``` 3 10 1 2 3 ``` Output: ``` NO PAIRS FOUND ```","solution":"def find_pairs(lst, target): Returns all unique pairs of numbers from the list that add up to the target. Each pair is represented as a tuple (a, b), where a <= b, and the pairs are listed in ascending order of a and b. seen = set() pairs = set() for number in lst: needed = target - number if needed in seen: pairs.add(tuple(sorted((number, needed)))) seen.add(number) if not pairs: return \\"NO PAIRS FOUND\\" sorted_pairs = sorted(pairs) return \' \'.join(str(pair) for pair in sorted_pairs)"},{"question":"AlgoCity is a fictional city with a grid layout of streets. Engineers want to install traffic signals on some intersections to manage the traffic flow better. Each intersection is represented as a cell on an n × m grid. They can either install a traffic signal (denoted by \'S\') or leave the intersection without a traffic signal (denoted by \'.\'). The goal is to install traffic signals such that: 1. Each row and each column of the grid must have exactly one traffic signal. 2. No two traffic signals should be in the same row or column. You need to determine if it is possible to install the traffic signals following the given conditions. If it\'s possible, print the grid with the traffic signals installed. If it\'s not possible, print \\"Not possible\\". The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. Output \\"Not possible\\" (without quotes) if it is impossible to install the traffic signals following all the rules. Otherwise, print the grid with \'S\' indicating the placement of traffic signals and \'.\' indicating intersections without traffic signals. Each intersection should be represented by either \'S\' or \'.\' character. # Examples Example 1 Input: ``` 3 3 ``` Output: ``` S . . . S . . . S ``` Example 2 Input: ``` 2 3 ``` Output: ``` Not possible ``` # Note: - For a square grid (n = m), it is always possible to place the traffic signals in a diagonal manner. - For a non-square grid (n != m), it is impossible to fulfill the conditions due to the difference in the number of rows and columns.","solution":"def install_traffic_signals(n, m): if n != m: return \\"Not possible\\" grid = [[\'.\' for _ in range(m)] for _ in range(n)] for i in range(n): grid[i][i] = \'S\' result = \'n\'.join([\' \'.join(row) for row in grid]) return result"},{"question":"Anna is organizing a large collection of books in a library. She wants to arrange the books in a specific order based on the number of pages. She can only perform two operations on the books: 1. Select a book and place it directly after a book with double the number of pages. 2. Select a book and place it directly after a book with exactly half the number of pages. Given an unordered list of books with their page numbers, help Anna reorder these books so they can be arranged using the prescribed operations. The first line of the input contains an integer n (2 le n le 100) — the number of books. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^{5}) — the page numbers of the books in arbitrary order. Print the reordered list of page numbers such that the order follows the constraints given. It is guaranteed that the answer exists. # Example: **Input:** ``` 6 32 4 16 2 64 8 ``` **Output:** ``` 2 4 8 16 32 64 ``` Explanation: In the example given, you can start with the book having 2 pages, then place the book with 4 pages after it, followed by 8 pages, and so on.","solution":"def reorder_books(n, pages): Reorders the list of book pages as per the specified criteria: 1. Select a book and place it directly after a book with double the number of pages. 2. Select a book and place it directly after a book with exactly half the number of pages. sorted_pages = sorted(pages) result = [sorted_pages.pop(0)] while sorted_pages: last_page = result[-1] next_page = None for page in sorted_pages: if page == 2 * last_page or last_page == 2 * page: next_page = page break sorted_pages.remove(next_page) result.append(next_page) return result"},{"question":"You are provided an initial amount of money and a sequence of stock prices for the next `n` days. Each day, you can decide whether to buy one share of stock, sell any number of shares you own, or do nothing. However, you can only buy one share per day, and you can only sell shares if you own them. Your goal is to maximize your profit by the end of day `n`. - You start with an initial amount of money `M` and no stocks. - You can buy and sell stocks only once per day. - Assume stock prices are given in the format of an integer array `prices` where `prices[i]` is the price of the stock on the i-th day. Write a function `maxProfit(M, prices)` to compute the maximum amount of money you can have at the end of day `n`. # Input: - An integer `M` (1 ≤ M ≤ 106) representing the initial amount of money. - An integer array `prices` (1 ≤ |prices| ≤ 105, 1 ≤ prices[i] ≤ 104) representing the stock prices over `n` days. # Output: - Return a single integer, the maximum amount of money that can be achieved at the end of day `n`. # Example: Input: ``` M = 100 prices = [1, 2, 3, 4, 5] ``` Output: ``` 105 ``` Explanation: - Day 1: Buy one share for 1 unit (remaining money = 99). - Day 2: Do nothing. - Day 3: Do nothing. - Day 4: Do nothing. - Day 5: Sell the share for 5 units (total money = 99 + 5 = 104). Note: You have correctly aimed for maximizing profit by the end of day `n`. # Constraints: - You are allowed to buy and sell any number of shares during the period given, following the constraints listed. - Consider all possible strategies to achieve the maximum amount at the end of day `n`. Write your function definition as follows: ```python def maxProfit(M, prices): # Your code here ```","solution":"def maxProfit(M, prices): Function to maximize the profit by the end of `n` days. Parameters: M (int): Initial amount of money. prices (list): List of stock prices over `n` days. Returns: int: The maximum amount of money that can be achieved at the end of day `n`. n = len(prices) if n == 0: return M max_money = M min_price = prices[0] for i in range(1, n): # If we buy at the minimum price observed so far and sell at today\'s price max_money = max(max_money, M + (prices[i] - min_price)) # Update the minimum price observed so far to include today\'s price min_price = min(min_price, prices[i]) return max_money"},{"question":"You are given two sequences of integers, (A) and (B), both of length (n). A \\"good\\" subsequence is a non-empty subsequence that appears in both sequences (A) and (B). Your task is to determine the length of the longest \\"good\\" subsequence. A subsequence is a sequence derived by deleting some or none of the elements from the original sequence without changing the order of the remaining elements. # Input The first line contains an integer (n) ((1 leq n leq 2 times 10^5)) — the length of the sequences (A) and (B). The second line contains (n) integers (A_1, A_2, ldots, A_n) ((1 leq A_i leq 10^9)) — the elements of sequence (A). The third line contains (n) integers (B_1, B_2, ldots, B_n) ((1 leq B_i leq 10^9)) — the elements of sequence (B). # Output Print a single integer — the length of the longest \\"good\\" subsequence. # Example Input ``` 5 1 2 3 4 5 3 4 1 2 5 ``` Output ``` 3 ``` Explanation The longest \\"good\\" subsequence in both sequences (A) and (B) is [1, 2, 5], which has a length of 3.","solution":"def longest_good_subsequence(n, A, B): Returns the length of the longest \\"good\\" subsequence found in both A and B. from collections import defaultdict # Dictionary to store the positions of elements in B positions = defaultdict(list) for index, value in enumerate(B): positions[value].append(index) # Longest Increasing Subsequence (LIS) lengths in terms of positions in B lis = [] for value in A: if value in positions: for pos in positions[value]: # binary search for the correct position in lis left, right = 0, len(lis) while left < right: mid = (left + right) // 2 if lis[mid] < pos: left = mid + 1 else: right = mid if left < len(lis): lis[left] = pos else: lis.append(pos) return len(lis)"},{"question":"You are given an array of integers `A` of length `N` composed of positive integers. Your task is to calculate the maximum possible sum of elements you can achieve by selecting some contiguous subarray of length exactly `K` and then performing at most one replacement operation where you replace one element of the subarray with the given integer `X`. For example, if we have an array `A = [1, 3, 2, 1, -1]` with `N = 5`, `K = 3`, and `X = 4`, you can select the subarray `[3, 2, 1]` and replace `1` with `4`, yielding a maximum sum of `3 + 2 + 4 = 9`. # Input - The first line contains three integers `N`, `K`, and `X` (`1 ≤ K ≤ N ≤ 10^5`, `1 ≤ X ≤ 10^9`). - The second line contains `N` integers `A[1], A[2], ..., A[N]` (`1 ≤ A[i] ≤ 10^9`). # Output - Output a single integer representing the maximum possible sum of the selected subarray after at most one replacement. # Example Input ``` 5 3 4 1 3 2 1 -1 ``` Output ``` 9 ``` # Explanation In the example, the optimal contiguous subarray of length `3` is `[3, 2, 1]`. By replacing `1` with `4`, the possible maximum sum is `9`.","solution":"def max_possible_sum(N, K, X, A): # Calculate the initial sum of the first window of size K current_sum = sum(A[:K]) max_sum = current_sum # Calculate max sum of all windows of size K for i in range(1, N - K+ 1): current_sum = current_sum - A[i - 1] + A[i + K - 1] max_sum = max(max_sum, current_sum) # Calculate the sum of each window after replacement replacement_sum = max_sum for i in range(N - K + 1): for j in range(K): current_window = A[i:i + K] replaced_sum = sum(current_window) - current_window[j] + X replacement_sum = max(replacement_sum, replaced_sum) return replacement_sum"},{"question":"You are a city planner tasked with designing a new public park. The park consists of a number of flower beds arranged in a grid pattern. Each flower bed can either be empty or contain flowers. The city has specific aesthetic rules for designing these parks. 1. The park should have a rectangular area with flowers. 2. All flower beds within this rectangular area must contain flowers. 3. This rectangular area should be the largest possible one within the grid. Given a grid of dimensions n x m consisting of \'E\' (empty) and \'F\' (flowers), your goal is to determine the area of the largest rectangular sub-grid that contains only flowers. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the number of rows and columns in the grid. - The following n lines contain m characters each — \'E\' or \'F\'. # Output - Print a single integer — the area of the largest rectangular sub-grid of flowers. # Examples Example 1 Input: ``` 4 5 F F F E F F F F F E F F E F F E E F F F ``` Output: ``` 6 ``` Explanation: ``` One possible largest rectangle is: F F F F F F ``` Example 2 Input: ``` 3 3 E E E E F F E F F ``` Output: ``` 4 ``` Explanation: ``` One possible largest rectangle is: F F F F ```","solution":"def max_area_of_flowers(grid): n, m = len(grid), len(grid[0]) max_area = 0 # Initialize a histogram based on the grid histogram = [0] * m for i in range(n): for j in range(m): if grid[i][j] == \'F\': histogram[j] += 1 else: histogram[j] = 0 max_area = max(max_area, largest_rectangle(histogram)) return max_area def largest_rectangle(hist): stack = [] max_area = 0 idx = 0 while idx < len(hist): if not stack or hist[idx] >= hist[stack[-1]]: stack.append(idx) idx += 1 else: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((idx - stack[-1] - 1) if stack else idx)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((idx - stack[-1] - 1) if stack else idx)) max_area = max(max_area, area) return max_area # Example to show how it works n = 4 m = 5 grid = [ list(\\"FFFEE\\"), list(\\"FFFFE\\"), list(\\"FFEFF\\"), list(\\"EEFFF\\") ] print(max_area_of_flowers(grid)) # Should print 6"},{"question":"There is a grid with n rows and m columns. Each cell in the grid can be either open (denoted by 0) or blocked (denoted by 1). You start from the top-left cell of the grid and want to reach the bottom-right cell. You can move to an adjacent cell if and only if it is not blocked. Adjacent cells are defined as the cells to the left, right, above, or below the current cell. Your task is to determine the minimum number of moves required to travel from the top-left cell to the bottom-right cell. If it is not possible to reach the destination, return -1. The first line contains two integers n and m (1 le n, m le 1000) representing the number of rows and columns in the grid. Each of the next n lines contains m integers (either 0 or 1) representing the state of each cell in the grid. Print a single integer — the minimum number of moves required to reach the bottom-right cell from the top-left cell, or -1 if there is no such path. # Example Input: ``` 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 ``` Output: ``` 8 ``` Input: ``` 3 3 0 1 1 1 1 0 1 1 0 ``` Output: ``` -1 ``` # Explanation In the first example, one possible path is to move right, down, down, right, right, down, down, right. In the second example, there is no possible path to get to the bottom-right cell from the top-left cell.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): Returns the minimum number of moves to reach the bottom-right cell from the top-left cell in a grid. Returns -1 if it is not possible. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # Directions for moving in the grid (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Queue for BFS queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we reached the bottom-right cell if x == n-1 and y == m-1: return dist # Explore all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Alice has recently discovered several ancient artifacts in a sequence, each artifact uniquely identified by a number. She wants to create museum displays for these artifacts. However, due to the limited space in the museum, each display can only contain artifacts that share a common mathematical property. Alice decides that an artifact property of interest is whether the artifacts\' numbers in a display can form an arithmetic progression (AP). A sequence of numbers is an arithmetic progression if the difference between any two consecutive numbers is constant. Alice tasks you with determining the longest possible display that can be formed from the given artifacts by selecting a subsequence of numbers that forms an arithmetic progression. The first line of the input consists of a single integer n (1 leq n leq 10^5) — the number of artifacts. The second line of the input contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the numbers identifying the artifacts. Output a single integer — the length of the longest subsequence of artifacts that forms an arithmetic progression. # Example Input ``` 6 3 8 5 10 15 20 ``` Output ``` 4 ``` In the example above, a possible longest arithmetic progression would be [3, 8, 13, 18], which has length 4.","solution":"def longest_ap_length(n, artifacts): Returns the length of the longest subsequence that forms an arithmetic progression. if n == 1: return 1 artifacts.sort() dp = [{} for _ in range(n)] max_length = 1 for i in range(n): for j in range(i): diff = artifacts[i] - artifacts[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"In a faraway kingdom, there is a magical garden that contains various types of flowering plants. The garden’s layout is a rectangular grid with dimensions n times m, where each cell either contains a plant or is empty. Each type of plant has a unique height, and no two plants of different types have the same height. The gardener wants to water the plants, but he has a special rule: he can only water plants such that in any row or column, the plants\' heights must form a non-decreasing sequence. You are given the garden\'s layout, with 0 representing an empty cell and positive integers representing the heights of the plants in their respective cells. Determine whether it is possible to water the plants following the gardener\'s rule. Your task: The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the garden\'s grid. Each of the next n lines contains m integers representing the grid cells. The j-th integer in the i-th line is a_{ij} (0 le a_{ij} le 10^6), where a_{ij} > 0 represents the height of the plant at cell (i, j) and a_{ij} = 0 indicates an empty cell. Output \\"YES\\" if it is possible to water the plants following the gardener\'s rule; otherwise, output \\"NO\\". Example 1: Input: 3 3 1 2 3 0 0 0 4 5 6 Output: YES Example 2: Input: 3 3 1 2 3 0 5 0 4 2 6 Output: NO Explanation: - In the first example, each row and column contains plant heights that are all in non-decreasing order. - In the second example, the plant height 5 in the second row is not in a non-decreasing order when compared to the height 2 in the second column.","solution":"def can_water_plants(n, m, grid): def is_non_decreasing(sequence): non_zero_sequence = [x for x in sequence if x > 0] return all(non_zero_sequence[i] <= non_zero_sequence[i + 1] for i in range(len(non_zero_sequence) - 1)) # Check each row for row in grid: if not is_non_decreasing(row): return \\"NO\\" # Check each column for col in range(m): column = [grid[row][col] for row in range(n)] if not is_non_decreasing(column): return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of integers. In a single operation, you can select any two consecutive elements of the sequence and swap them. Determine if you can sort the sequence in non-decreasing order using at most k operations. The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 100) — the length of the sequence and the maximum number of allowed operations, respectively. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the sequence elements. Output \\"YES\\" if the sequence can be sorted in non-decreasing order using at most k operations, and \\"NO\\" otherwise. Example: Input: 4 3 1 3 1 2 3 2 3 1 2 4 3 4 3 2 1 2 1 2 1 Output: NO YES YES YES Explanation: In the first test case, you cannot sort the sequence with just one swap. In the second test case, two swaps are sufficient to sort the sequence. In the third test case, three swaps are enough. The fourth test case can be sorted in one swap.","solution":"def can_sort_with_k_operations(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] sequence = test_cases[i][1] sorted_sequence = sorted(sequence) diff_count = 0 # Count differences between the given sequence and the sorted sequence for j in range(n): if sequence[j] != sorted_sequence[j]: diff_count += 1 # Each operation can fix about 2 differences (swap two elements) # Therefore, in k operations, we can fix up to 2 * k differences if diff_count <= 2 * k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an undirected graph with n vertices and m edges, you are required to determine if there exists a path between a given pair of vertices u and v. If there exists a path, also determine the length of the shortest path between them. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), the number of vertices and the number of edges, respectively. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n), representing an edge between vertex a and vertex b. The last line contains two integers u and v (1 ≤ u, v ≤ n), which represent the pair of vertices for which you need to find the path. Output \\"YES\\" followed by the length of the shortest path if a path exists. If there is no path between vertices u and v, output \\"NO\\".","solution":"from collections import deque def shortest_path_in_graph(n, m, edges, u, v): # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for a, b in edges: graph[a].append(b) graph[b].append(a) # Perform Breadth-First Search (BFS) to find the shortest path def bfs(start, end): visited = [False] * (n + 1) distance = [0] * (n + 1) queue = deque([start]) visited[start] = True while queue: current = queue.popleft() if current == end: return distance[end] for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[current] + 1 queue.append(neighbor) return None shortest_distance = bfs(u, v) if shortest_distance is not None: return (\\"YES\\", shortest_distance) else: return \\"NO\\""},{"question":"Harry is a wizard in training, and as part of his magic tests, he has to mix potions. He has a magical potion that can be represented as a string of characters where each character can be a lowercase English letter. To pass the test, Harry has to process the potion string to ensure that there are no more than two consecutive identical characters. Harry can perform the following operation any number of times: delete any one character from the potion string. Help Harry determine the minimum number of characters he needs to delete to ensure that no more than two consecutive characters in the potion string are the same. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. - Each of the next `t` lines contains a single string `s` (1 ≤ |s| ≤ 1000) — the potion string. # Output For each test case, print a single integer — the minimum number of characters Harry needs to delete from the potion string. # Example Input ``` 3 baaabbaabbba aaaaaaaaaaa ab ``` Output ``` 2 9 0 ``` # Explanation - In the first test case, Harry can delete two \'b\' characters to get \\"baabbaabba\\" where no character repeats more than twice consecutively. - In the second test case, Harry must delete 9 characters to be left with \\"aa\\", ensuring no character repeats more than twice. - In the third test case, the string \\"ab\\" already meets the requirement, so no deletions are needed.","solution":"def minimum_deletions_to_avoid_three_consecutive_chars(t, strings): results = [] for s in strings: deletions = 0 i = 0 while i < len(s) - 2: if s[i] == s[i + 1] == s[i + 2]: deletions += 1 i += 1 else: i += 1 results.append(deletions) return results # Sample data t = 3 strings = [ \\"baaabbaabbba\\", \\"aaaaaaaaaaa\\", \\"ab\\" ] print(minimum_deletions_to_avoid_three_consecutive_chars(t, strings)) # Output: [2, 9, 0]"},{"question":"You are given two strings s and t consisting of lowercase English letters. The string t is generated by applying some operations on string s. In one operation, you can: 1. Choose one character from the string and remove it. Your task is to determine if it is possible to obtain the string t by performing some number of operations on the string s. The first line contains a single integer n (1 le n le 10^5)— the size of the string s. The second line contains the string s of length n. The third line contains a single integer m (1 le m le 10^5)— the size of the string t. The fourth line contains the string t of length m. Print \\"YES\\" if it is possible to obtain string t by performing some operations on string s, otherwise print \\"NO\\". In the first example, you can obtain the string \\"abc\\" from \\"aebdc\\" by removing characters \'e\' and \'d\': In the second example, it is impossible to obtain string \\"axc\\" from \\"abc\\" with the allowed operations, since \'x\' is not present in string \\"abc\\".","solution":"def can_form_string(s, t): Determines if it is possible to obtain the string t by performing some number of removal operations on the string s. Args: s (str): Input string s. t (str): Target string t. Returns: str: \'YES\' if t can be obtained from s, otherwise \'NO\'. m, n = len(t), len(s) i = j = 0 while i < m and j < n: if t[i] == s[j]: i += 1 j += 1 return \\"YES\\" if i == m else \\"NO\\""},{"question":"A large city wants to improve the traffic flow within its streets. The city\'s layout can be represented as a grid with n (1 le n le 1000) rows and m (1 le m le 1000) columns. Each cell in this grid is either a street (\'.\') or a building (\'#\'). Cars can travel between adjacent horizontal and vertical streets, but they cannot pass through buildings. The city planners have decided that to improve traffic flow, it is important to count how many distinct regions of connected streets exist in the city. Two streets are considered to be in the same region if there is a path of streets connecting them. The goal is to compute the number of such regions. Write a program that, given the city\'s layout, determines the number of distinct regions of streets. # Input - The first line contains two integers n and m - the number of rows and columns in the city\'s grid. - The next n lines each contain m characters \'.\' or \'#\', representing the city\'s layout. # Output - Print a single integer - the number of distinct regions of streets. # Example Input ``` 5 6 .#.. ..#..# #..# .....# ..#. ``` Output ``` 4 ``` In this example, there are 4 regions of connected streets, highlighted below: ``` .#.. 11#22# #43# 44443# 55#. ``` The distinct regions are: - Region 1: (1,2), (2,2) - Region 2: (1,4), (1,5), (2,4), (3,4) - Region 3: (2,6), (3,6), (4,6), (4,5), (4,4) - Region 4: (3,2), (4,1), (4,2), (4,3)","solution":"def count_street_regions(grid): def dfs(r, c): stack = [(r, c)] while stack: row, col = stack.pop() if 0 <= row < n and 0 <= col < m and grid[row][col] == \'.\': grid[row][col] = \'#\' stack.extend([(row+1, col), (row-1, col), (row, col+1), (row, col-1)]) n = len(grid) m = len(grid[0]) regions = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': regions += 1 dfs(i, j) return regions"},{"question":"Tom is an avid gamer and he recently discovered a new game where he manages a village consisting of n buildings. Each building can be either residential or commercial. Tom can perform a series of q queries to interact with these buildings. The queries can be one of the following types: 1. \\"build r x\\" - Make building number r a residential building with x occupants. 2. \\"build c y\\" - Make building number c a commercial building with y employees. 3. \\"query r\\" - Query the number of occupants in residential building r. 4. \\"query c\\" - Query the number of employees in commercial building c. Tom\'s village initially contains no buildings. The queries are guaranteed to be valid, meaning that every queried building will have been built previously. # Input - The first line contains an integer q (1 ≤ q ≤ 100,000) - the number of queries. - Each of the next q lines contains a query of one of the four types as described. # Output For each query of type \\"query r\\" or \\"query c\\", output the corresponding number of occupants or employees on a new line. # Example Input ``` 7 build r 3 200 build r 5 150 build c 2 50 query r 3 query c 2 build c 1 100 query c 1 ``` Output ``` 200 50 100 ``` # Explanation 1. \\"build r 3 200\\" makes building 3 a residential building with 200 occupants. 2. \\"build r 5 150\\" makes building 5 a residential building with 150 occupants. 3. \\"build c 2 50\\" makes building 2 a commercial building with 50 employees. 4. \\"query r 3\\" asks for the number of occupants in residential building 3, which is 200. 5. \\"query c 2\\" asks for the number of employees in commercial building 2, which is 50. 6. \\"build c 1 100\\" makes building 1 a commercial building with 100 employees. 7. \\"query c 1\\" asks for the number of employees in commercial building 1, which is 100.","solution":"def manage_village(queries): Manages the buildings in the village and processes the given queries. Parameters: queries (list of str): The list of queries to be processed. Returns: list: Results of the \\"query r\\" and \\"query c\\" queries. residential_buildings = {} commercial_buildings = {} results = [] for query in queries: parts = query.split() if parts[0] == \'build\': if parts[1] == \'r\': # Build a residential building building_num = int(parts[2]) occupants = int(parts[3]) residential_buildings[building_num] = occupants elif parts[1] == \'c\': # Build a commercial building building_num = int(parts[2]) employees = int(parts[3]) commercial_buildings[building_num] = employees elif parts[0] == \'query\': if parts[1] == \'r\': # Query a residential building building_num = int(parts[2]) results.append(residential_buildings[building_num]) elif parts[1] == \'c\': # Query a commercial building building_num = int(parts[2]) results.append(commercial_buildings[building_num]) return results"},{"question":"The city of Codetropolis has a network of trains that the citizens use to commute between various stations. This network forms a tree structure with the central station being the root. Each station other than the central station is connected to exactly one other station and from there directly or indirectly connected to the central station. Each station has a different number of trains passing through it every hour, defined by a list of integers where the `i-th` integer represents the number of trains passing through the `i-th` station every hour. You need to determine the station with the highest number of trains passing through in a given range of stations. The input consists of: 1. An integer `N` (1 ≤ N ≤ 100,000) — the number of stations in Codetropolis. 2. A list of `N` integers where the i-th integer represents the number of trains passing through the `i-th` station. 3. An integer `Q` (1 ≤ Q ≤ 100,000) — the number of queries. 4. `Q` lines, each containing two integers `L` and `R` (1 ≤ L ≤ R ≤ N) — representing the range of stations (inclusive) for which you need to determine the station with the highest number of trains passing through. Output `Q` lines, each containing one integer which is the station (1-based index) with the maximum number of trains passing through in the given range. If there are multiple stations with the same maximum number, output the smallest index. **Example:** Input: ``` 7 10 20 30 10 20 30 40 3 1 3 4 6 1 7 ``` Output: ``` 3 6 7 ``` Explanation: - For the range 1 to 3, the maximum number of trains is at station 3 (with 30 trains). - For the range 4 to 6, stations 6 has 30 trains, which is the maximum in this range. - For the entire range from 1 to 7, station 7 has the highest number of trains (40).","solution":"def max_train_station(n, trains, queries): Returns the stations with the highest number of trains passing through within the given range of stations. Parameters: n (int): Number of stations. trains (list of int): List containing number of trains for each station. queries (list of tuples): Each tuple containing two integers L and R representing the range of stations. Returns: list of int: List containing the station indexes with the highest number of trains passing through for each query. result = [] for L, R in queries: max_trains = -1 max_station = -1 for i in range(L - 1, R): if trains[i] > max_trains or (trains[i] == max_trains and (max_station == -1 or i + 1 < max_station)): max_trains = trains[i] max_station = i + 1 result.append(max_station) return result"},{"question":"You are given an array of integers and a target integer. Find the number of ways to select a subset of the array that sums exactly to the target integer. Each element in the array can only be used once. The first line of the input contains two integers n and target — the number of elements in the array and the target sum, respectively (1 ≤ n ≤ 20 and 1 ≤ target ≤ 1000). The second line contains n integers representing the elements of the array (1 ≤ array[i] ≤ 100). Output the number of distinct subsets that sum to the target integer. For example, given the array [2, 3, 7, 8, 10] and target sum 10, there are three subsets that sum to 10: [10], [2, 8], and [3, 7].","solution":"from itertools import combinations def count_subsets_with_sum(arr, target): Given an array of integers and a target integer, this function finds the number of ways to select a subset of the array that sums exactly to the target integer. Each element in the array can only be used once. Parameters: arr (list): The list of integers. target (int): The target sum. Returns: int: The number of subsets that sum to the target integer. n = len(arr) count = 0 # Generate all possible subsets and check their sums for r in range(1, n + 1): for subset in combinations(arr, r): if sum(subset) == target: count += 1 return count"},{"question":"Daniel is an avid gardener and loves to plant trees in his garden. He recently purchased n different types of trees, and he wants to plant them in a way that maximizes the beauty of his garden. The beauty of the garden is determined by the height differences between adjacent trees - the smaller the difference, the more beautiful the arrangement. Daniel has also noted that some trees need to be planted next to each other to ensure they grow properly. He has m pairs of trees that need to be adjacent when planted. Your task is to help Daniel find the most beautiful arrangement of the trees, while respecting the adjacency constraints. Each type of tree i has a given height hi. The difference in height between two adjacent trees i and j is |hi - hj|. The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n * (n - 1) / 2) - the number of different types of trees and the number of pairs of trees that need to be adjacent. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10^9), where hi is the height of the i-th type of tree. Each of the next m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n), indicating that the i-th type of tree needs to be planted next to the bi-th type of tree. Output the maximum beauty factor of the garden if it is possible to plant the trees as required. If it is not possible to plant the trees while satisfying the adjacency constraints, output -1. In the first sample, the optimal way to plant the trees is 1 -> 2 -> 3, which gives a beauty factor of 1 (|3 - 4| + |4 - 5|). In the second sample, it is not possible to plant the trees while satisfying the constraints, so the output is -1.","solution":"def find_most_beautiful_arrangement(n, m, heights, adjacency_constraints): from itertools import permutations import sys constraints_list = set() for a, b in adjacency_constraints: constraints_list.add((a - 1, b - 1)) constraints_list.add((b - 1, a - 1)) def is_valid_arrangement(arr): for i in range(n - 1): if (arr[i], arr[i + 1]) in constraints_list: constraints_list.remove((arr[i], arr[i + 1])) else: return False return True if m == 0: return sum(abs(heights[i] - heights[i + 1]) for i in range(n - 1)) min_diff = sys.maxsize for perm in permutations(range(n)): if is_valid_arrangement(perm): diff = sum(abs(heights[perm[i]] - heights[perm[i + 1]]) for i in range(n - 1)) if diff < min_diff: min_diff = diff return min_diff if min_diff != sys.maxsize else -1"},{"question":"The task is to remove the smallest possible number of characters from a given string to make it a palindrome. Given a string s of length n, find and print the length of the smallest possible substring that needs to be removed to transform s into a palindrome. - A palindrome is a string that reads the same backward as forward. # Input - The first and only line of the input contains a string s (1 leq |s| leq 2 cdot 10^5). # Output - Print a single integer, the length of the smallest substring that needs to be removed to make s a palindrome. # Example Input ``` abca ``` Output ``` 1 ``` Explanation: By removing the character \'b\', the remaining string \\"aca\\" is a palindrome. # Note In Example 1, a single character removal is sufficient to make the string \\"aca\\". In Example 2, consider the string s = \\"abcdefg\\", the entire string needs all its non-center characters removed to make it \\"g\\", which is a palindrome. Notes: - If the given input string is already a palindrome, the output must be 0 because no removals are needed. - It is guaranteed there will be a solution to transform any string into a palindrome by removing characters.","solution":"def min_removals_to_make_palindrome(s): n = len(s) # Function to find the minimum number of edits required to convert s[i...j] into a palindrome def minEditPalindromic(s, i, j, memo): # Base case: If the current substring is of length 1 or less, it is already a palindrome if i >= j: return 0 # Check if the result for this substring has already been computed if (i, j) in memo: return memo[(i, j)] # If the characters at the current positions are the same, move inward if s[i] == s[j]: memo[(i, j)] = minEditPalindromic(s, i+1, j-1, memo) else: # If they are different, consider both possibilities: remove s[i] or remove s[j] remove_i = minEditPalindromic(s, i+1, j, memo) remove_j = minEditPalindromic(s, i, j-1, memo) memo[(i, j)] = 1 + min(remove_i, remove_j) return memo[(i, j)] # Memoization table memo = {} # Calculate the minimum number of removals needed for the entire string return minEditPalindromic(s, 0, n-1, memo)"},{"question":"Polycarp has a new fascination with patterns and wants to write a program to find the longest arithmetic subarray from a sequence of numbers. An arithmetic subarray is defined as a sequence of at least two integers where the difference between any two consecutive elements is the same (i.e., it forms an arithmetic progression). Given a sequence of integers, Polycarp needs your help to determine the length of the longest contiguous subarray that forms an arithmetic progression. Write a program that reads an integer array and outputs the length of the longest arithmetic subarray. The first line of the input contains an integer n (2 le n le 1000) — the length of the sequence of integers. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9), where a_i is the i-th element of the sequence. Print a single integer — the length of the longest arithmetic subarray. # Example Input: ``` 7 10 7 4 6 8 10 11 ``` Output: ``` 4 ``` Explanation: The longest arithmetic subarray is [4, 6, 8, 10], which has a common difference of 2 and length 4. In another example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 5 ``` Explanation: The whole array forms an arithmetic progression with a common difference of 1.","solution":"def longest_arithmetic_subarray(arr): if len(arr) < 2: return 0 max_length = 1 curr_length = 1 curr_diff = None for i in range(1, len(arr)): diff = arr[i] - arr[i - 1] if curr_diff is None or diff == curr_diff: curr_length += 1 else: curr_length = 2 curr_diff = diff max_length = max(max_length, curr_length) return max_length"},{"question":"Given a string `s` consisting of lowercase Latin letters, you are to determine if it is possible to reorder the characters of `s` to form a string that does not contain two identical adjacent characters. If it is possible, return any possible reorganization of the string. If it is not possible, return \\"IMPOSSIBLE\\". The first line contains an integer `t` (1 leq t leq 100), the number of test cases. Each of the next `t` lines contains one string `s` (1 leq |s| leq 10^5). The sum of the lengths of `s` over all test cases does not exceed 10^6. For each test case, output a single line containing either the reorganized string or \\"IMPOSSIBLE\\" if it is not possible to reorganize the string. Example: Input: 3 aab aaab abc Output: aba IMPOSSIBLE acb","solution":"from heapq import heappush, heappop from collections import Counter def reorganize_string(s): counter = Counter(s) max_count = max(counter.values()) if max_count > (len(s) + 1) // 2: return \\"IMPOSSIBLE\\" max_heap = [] for char, count in counter.items(): heappush(max_heap, (-count, char)) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heappop(max_heap) result.append(char) if prev_char is not None: heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 if prev_count == 0: prev_char = None prev_count = 0 if len(result) != len(s): return \\"IMPOSSIBLE\\" return \'\'.join(result) def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(reorganize_string(s)) return results"},{"question":"You are given a sorted array of `nums` of distinct integers and an integer `target`. Determine if the `target` exists in the array using binary search. If it does, return its index. Otherwise, return the index where it would be if it were inserted in order to maintain the sorted order. Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until the possible locations are reduced to just one. The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` distinct integers `nums[i]` (1 ≤ nums[i] ≤ 10^9, sorted in increasing order) — the elements of the array. The third line contains an integer `target` (1 ≤ target ≤ 10^9) — the target value to search. Return the index of `target` if it is found in the array. If not, return the position where it would be inserted in order while maintaining the sorted order. # Sample Input 1: ``` 5 1 3 5 6 9 5 ``` # Sample Output 1: ``` 2 ``` # Sample Input 2: ``` 5 1 3 5 6 9 2 ``` # Sample Output 2: ``` 1 ``` # Explanation: For the first example, the target `5` is found at index `2`. For the second example, the target `2` is not in the array, so it would be inserted at index `1` to maintain the sorted order of the array.","solution":"def search_insert(nums, target): Determines the index of the target in the sorted array `nums` using binary search. If the target is not found, returns the index where it would be inserted to maintain the sorted order. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"A cycling race is being planned in the city of Gridville. The city is structured as an n times n grid where each intersection is represented by a cell in a matrix. The city planners want to find out the average distance of all possible paths a cyclist can take between two intersections: one at the top-left corner of the grid and the other at the bottom-right corner. The distance between two adjacent intersections (horizontally or vertically) is measured as 1 unit. A valid path from the top-left corner to the bottom-right corner can only involve moving to the right or down at each step, ensuring that the cyclist only travels towards the destination and that no intersections are visited more than once. Based on this information, you need to write a program that will calculate the average length of all possible paths from the top-left corner to the bottom-right corner of the grid. # Input Format - The first line contains a single integer, n (2 le n leq 100), representing the size of the grid. # Output Format - Output a single floating-point number representing the average length of all possible paths. # Example **Input:** 3 **Output:** 3.333333333 # Explanation For a 3 times 3 grid, the valid paths from the top-left to the bottom-right corner are: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) 3. (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) 4. (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) 5. (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) 6. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) Each of these paths has a length of 4 units, giving an average length of 4.0 units when divided by the number of paths (6 in this case). Notice that the problem might be generalized in terms of calculation for larger values of n. Calculate and print with a precision of up to 10 digits.","solution":"from math import comb def average_path_length(n): Calculates the average length of all possible paths from the top-left corner to the bottom-right corner in an n x n grid. Args: n (int): Size of the grid. Returns: float: Average length of all possible paths. # The number of paths from (0,0) to (n-1,n-1) is given by the binomial coefficient (2n-2 choose n-1) num_paths = comb(2*(n-1), n-1) # Distance of each path is always (n-1) + (n-1) = 2*(n-1) path_length = 2 * (n - 1) # Average length of paths is simply the path length in this specific scenario average_length = path_length # Since all path lengths are the same return float(average_length) def main(): n = int(input()) print(f\\"{average_path_length(n):.10f}\\") if __name__ == \\"__main__\\": main()"},{"question":"You are given two integer arrays `a` and `b` of the same length `n` (1 ≤ n ≤ 300,000). Your task is to determine whether by rearranging the elements of array `a`, you can make array `a` \\"dominate\\" array `b`. An array `a` is said to \\"dominate\\" array `b` if for every `i` (1 ≤ i ≤ n), `a[i]` is greater than or equal to `b[i]`. The input consists of two lines: - The first line contains the integer `n`. - The second line contains `n` space-separated integers representing the array `a`. - The third line contains `n` space-separated integers representing the array `b`. Print \\"Yes\\" if array `a` can be rearranged to dominate array `b`. Otherwise, print \\"No\\". Example: Input: ``` 4 6 3 2 7 1 5 4 2 ``` Output: ``` Yes ``` Explanation: Rearranging array `a` to `[7, 6, 3, 2]` will make `a` dominate `b` as `[7 >= 1, 6 >= 5, 3 >= 4, 2 >= 2]`.","solution":"def can_dominate(n, a, b): Checks if array a can be rearranged to dominate array b. Arguments: n: int : number of elements in arrays a and b a: list of int: array a b: list of int: array b Returns: str: \\"Yes\\" if array a can be rearranged to dominate array b, \\"No\\" otherwise. a.sort(reverse=True) # Sort array a in descending order b.sort(reverse=True) # Sort array b in descending order for i in range(n): if a[i] < b[i]: return \\"No\\" return \\"Yes\\""},{"question":"Given an array of integers, your task is to rearrange it so that the difference between any two adjacent integers is minimized. Specifically, if the array is sorted in non-decreasing order, you should rearrange it such that the absolute difference between any two adjacent elements is not far apart. If there are multiple solutions, print any. Input: - The first line contains an integer t (1 le t le 100) — the number of test cases. - For each test case, the first line contains an integer n (2 le n le 10^5) — the size of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Output: - For each test case, print the rearranged array. Example: Input: ``` 2 5 4 1 3 8 5 4 7 3 2 1 ``` Output: ``` 1 3 4 5 8 1 2 3 7 ``` In this example, the array is rearranged such that differences between adjacent elements are minimized.","solution":"def minimize_differences(t, cases): results = [] for case in cases: n, arr = case arr.sort() results.append(arr) return results # Example usage # t = 2 # cases = [ # (5, [4, 1, 3, 8, 5]), # (4, [7, 3, 2, 1]) #] # minimize_differences(t, cases) # Output: [[1, 3, 4, 5, 8], [1, 2, 3, 7]]"},{"question":"Given a binary tree, you need to find the maximum sum of values of any path from the root node to a leaf node. A leaf node is a node that has no children. For example, in the binary tree shown below: ``` 10 / 20 30 / / 40 50 60 70 / 75 ``` The maximum sum path from the root to a leaf node is 10 → 20 → 50 → 75, which sums up to 155. The input for the binary tree is provided as a series of nodes in level order traversal, where null values indicate the absence of a node. For example, the above tree would be represented as: ``` [10, 20, 30, 40, 50, 60, 70, null, null, 75, null, null, null, null, null] ``` Write a function that takes an array representing the binary tree in level order and returns the maximum sum from the root to any leaf node. # Input - An array `tree` of integers where `tree[i]` represents the value at the `i-th` position of the binary tree in level order traversal. - The `tree` array will have length `N` where `1 ≤ N ≤ 10000`. # Output - An integer which is the maximum sum of values from the root to a leaf node. # Example **Input:** ``` tree = [10, 20, 30, 40, 50, 60, 70, None, None, 75, None, None, None, None, None] ``` **Output:** ``` 155 ``` # Function Signature ```python def max_root_to_leaf_sum(tree: List[int]) -> int: ```","solution":"from typing import List, Optional class TreeNode: def __init__(self, val: Optional[int]): self.val = val self.left = None self.right = None def construct_tree(tree: List[Optional[int]], index: int = 0) -> Optional[TreeNode]: if index < len(tree) and tree[index] is not None: node = TreeNode(tree[index]) node.left = construct_tree(tree, 2 * index + 1) node.right = construct_tree(tree, 2 * index + 2) return node return None def max_root_to_leaf_sum(tree: List[Optional[int]]) -> int: if not tree: return 0 root = construct_tree(tree) def dfs(node: TreeNode) -> int: if not node: return 0 if not node.left and not node.right: return node.val left_sum = dfs(node.left) right_sum = dfs(node.right) return node.val + max(left_sum, right_sum) return dfs(root)"},{"question":"To further challenge your coding abilities, consider the following new assessment question: You are given a family tree that is structured as a binary tree. Each family member is represented by a node, and their relationships (parent to children) are represented by edges. Every node stores a unique integer identifier corresponding to a family member. The first line of input contains a single integer n, the number of nodes in the tree (2 le n le 10^5). The next n-1 lines describe the edges of the tree. Each edge is given in the form of two integers u and v, indicating that there is an edge between nodes u and v. Your task is to find the shortest path between two family members (nodes) in the tree and return the length of that path. The input also contains two integers a and b representing the unique identifiers of these two family members. # Input: The input consists of multiple lines: - The first line contains a single integer n (2 le n le 10^5) representing the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 le u, v le n) representing an edge between nodes u and v. - The last line contains two integers a and b (1 le a, b le n) which are the nodes between which you need to find the shortest path. # Output: Output a single integer representing the length of the shortest path between nodes a and b in the tree. # Example: Input: ``` 5 1 2 1 3 2 4 2 5 4 5 ``` Output: ``` 2 ``` In the example above: - Given a tree with 5 nodes and provided edges, you need to find the shortest path between node 4 and node 5. - The shortest path between nodes 4 and 5 goes through node 2, consisting of 2 edges (4-2-5). # Note: Assume that both nodes a and b are always present in the tree and there is exactly one simple path (i.e., without cycles) connecting any two nodes, given the properties of a binary tree.","solution":"from collections import deque def shortest_path(n, edges, a, b): # Create adjacency list for the tree tree = [[] for _ in range(n + 1)] # Fill adjacency list with edges for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to perform BFS and find shortest path def bfs(start, end): visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current_node, distance) visited[start] = True while queue: current_node, dist = queue.popleft() if current_node == end: return dist for neighbor in tree[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return -1 # Shouldn\'t reach here since a path exists return bfs(a, b)"},{"question":"Nick is a passionate gardener who wants to decorate his garden with rose bushes planted along a fence. He has decided that he wants to plant exactly `r` rose bushes. For aesthetic reasons, Nick wants each pair of adjacent rose bushes to be at least `d` centimeters apart. Nick has already measured the length of the fence and it is `L` centimeters. Can you help Nick determine whether it is possible to plant all `r` rose bushes along the fence while satisfying the requirement for the minimum distance between each pair of adjacent rose bushes? The input consists of a single line containing three integers: `r`, `d`, and `L` (1 ≤ r ≤ 1,000, 1 ≤ d, L ≤ 1,000,000) — the number of rose bushes, the minimum distance between adjacent rose bushes in centimeters, and the length of the fence in centimeters, respectively. Print \\"YES\\" (without quotes) if it is possible to plant all `r` rose bushes along the fence while maintaining the minimum distance `d` between each pair of adjacent rose bushes. Otherwise, print \\"NO\\". For example, if `r = 4`, `d = 2`, and `L = 10`, it is possible to plant the rose bushes as shown below, with 2 centimeters between each pair: ``` R--R--R--R ``` In this case, the output should be \\"YES\\". If `r = 4`, `d = 3`, and `L = 10`, it is not possible to maintain at least 3 centimeters between each pair of rose bushes: ``` R---R---R ``` The output should be \\"NO\\". **Examples** Input: ``` 4 2 10 ``` Output: ``` YES ``` Input: ``` 4 3 10 ``` Output: ``` NO ```","solution":"def can_plant_rose_bushes(r, d, L): Determines whether it is possible to plant r rose bushes along a fence of length L while maintaining a minimum distance d between each pair of adjacent bushes. Parameters: r (int): The number of rose bushes. d (int): The minimum distance between adjacent rose bushes in centimeters. L (int): The length of the fence in centimeters. Returns: str: \\"YES\\" if it is possible to plant all r rose bushes, otherwise \\"NO\\". # The total distance required to plant all the bushes with the distance in between needed_length = (r - 1) * d + r if needed_length <= L: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice is organizing a festival and wants to ensure that every guest can enjoy at least one activity. There are n guests and m activities planned for the festival. Each activity has a certain capacity, which is the maximum number of guests that can attend it simultaneously. Additionally, each guest has a list of activities they are interested in, and Alice has to assign each guest to one of these activities. Can you help Alice determine if it\'s possible to assign all guests to their preferred activities such that the capacity constraints of each activity are not violated? If it\'s possible, output \\"YES\\". Otherwise, output \\"NO\\". The first line contains two integers n (1 ≤ n ≤ 1000) — the number of guests and m (1 ≤ m ≤ 100) — the number of activities. The second line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ n), where ci represents the capacity of the i-th activity. Each of the next n lines describes the activities that the i-th guest is interested in. Each line starts with an integer ki (1 ≤ ki ≤ m) indicating the number of activities guest i is interested in, followed by ki distinct integers a1, a2, ..., ak (1 ≤ ai ≤ m) which are the indices of the activities guest i is interested in. Output \\"YES\\" if it is possible to assign every guest to one of their preferred activities while respecting the capacities. Otherwise, output \\"NO\\". Example input: 5 3 2 2 2 2 1 2 2 1 3 1 3 1 1 2 2 3 Example output: YES","solution":"def can_assign_activities(n, m, capacities, preferences): # Initialize the usage of each activity to 0 usage = [0] * m # Create a list of guests\' preferences with their index guests = [] for i, prefs in enumerate(preferences): guests.append((len(prefs), prefs)) # Sort guests by the number of their preferences (least preferred first) guests.sort() # Try to assign each guest to one of their preferred activities for _, prefs in guests: assigned = False for activity in prefs: if usage[activity - 1] < capacities[activity - 1]: # 1-based to 0-based index usage[activity - 1] += 1 assigned = True break if not assigned: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of non-negative integers, you need to determine if it\'s possible to rearrange the array such that no consecutive elements have the same value. For example, consider the array [1, 2, 2, 3]. An arrangement like [2, 1, 2, 3] will ensure that no two adjacent elements are the same. However, for the array [1, 1, 1, 2], no such arrangement is possible. You will be given multiple queries. Each query consists of n, the length of the array, followed by the array elements. Print \\"YES\\" (without quotes) if it\'s possible to rearrange the array for each query such that no consecutive elements are the same, and \\"NO\\" (without quotes) otherwise. The first line contains a single integer q (1 ≤ q ≤ 10^4) — the number of queries. Each of the following q queries consists of a single integer n (1 ≤ n ≤ 10^5), followed by n non-negative integers (each ≤ 10^5), representing the array elements. The total number of array elements in all queries does not exceed 10^6. For each query, output \\"YES\\" or \\"NO\\" on a new line. Sample Input: ``` 3 4 1 2 2 3 4 1 1 1 2 5 1 2 3 4 5 ``` Sample Output: ``` YES NO YES ``` Explanation: In the first query, one possible arrangement is [2, 1, 2, 3]. In the second query, it\'s not possible to avoid consecutive 1s. In the third query, one possible arrangement is [1, 3, 2, 4, 5].","solution":"from collections import Counter def can_rearrange(n, array): Returns \'YES\' if it\'s possible to rearrange the array such that no consecutive elements have the same value, otherwise \'NO\'. if n == 1: return \\"YES\\" element_counts = Counter(array) max_element_count = max(element_counts.values()) # If the most frequent element appears more than (n + 1) // 2 times, it\'s impossible to rearrange if max_element_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\" def process_queries(queries): results = [] for n, array in queries: results.append(can_rearrange(n, array)) return results"},{"question":"Mike likes to solve problems related to prime numbers. Recently, he was given the following task: Given an array of integers of size n, find the smallest positive integer k that is not the sum of any subset of the array elements. A subset can be empty, but the sum of an empty subset is considered to be 0. Write a program that calculates this smallest positive integer k. The first line of input contains an integer n (1 leq n leq 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the elements of the array. Output a single integer — the smallest positive integer that cannot be represented as the sum of any subset of the given array. # Example Input ``` 5 1 2 3 8 7 ``` Output ``` 22 ``` Explanation All integers from 1 to 21 can be represented as sums of different subsets of the given array. The integer 22 cannot be represented as the sum of any subset from the array. Thus, 22 is the answer.","solution":"def smallest_positive_integer_not_sum_of_subset(n, arr): arr.sort() result = 1 # Initialize the smallest integer that cannot be represented by any subset sum for i in range(n): if arr[i] <= result: result += arr[i] else: break return result"},{"question":"John is organizing a treasure hunt for his friends in a park that can be represented as a 2D grid of size n x m. Each cell in the grid may contain a number of coins or be empty. John wants his friends to collect as many coins as possible, starting from a given cell and moving either right or down to collect the coins along the way. They cannot move left or up. Help John determine the maximum number of coins that can be collected by starting from the top-left corner of the grid and moving to the bottom-right corner. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid respectively. Each of the next n lines contains m integers describing the number of coins in each cell. Each integer is between 0 and 1000 inclusive. Print one integer — the maximum number of coins that can be collected from the top-left corner to the bottom-right corner. # Example Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` # Explanation: The best path is: Start at (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). The sum of coins along this path is 1 + 2 + 3 + 6 + 9 = 29.","solution":"def max_coins(n, m, grid): Computes the maximum coins that can be collected from top-left to bottom-right corner. Parameters: n (int): Number of rows m (int): Number of columns grid (list of list of int): 2D grid representing the park with coins in each cell Returns: int: Maximum number of coins that can be collected # Initialize DP table dp = [[0] * m for _ in range(n)] # Fill in the DP table for i in range(n): for j in range(m): if i == 0 and j == 0: dp[i][j] = grid[i][j] elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"You are given a weighted directed graph with n nodes and m edges. Each node of the graph represents a city and each edge represents a one-way road between two cities with a certain travel cost. You want to determine the shortest travel cost from city 1 to city n. The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10,000), the number of nodes and edges respectively. Each of the next m lines contains three integers u, v and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a one-way road from node u to node v with a travel cost w. If there is a way to travel from city 1 to city n, print a single integer which is the minimum cost to travel from city 1 to city n. If there is no way to travel from city 1 to city n, print -1. Example: Input: 5 6 1 2 5 2 3 10 3 4 2 4 5 1 1 3 2 3 5 3 Output: 7 Explanation: The shortest path from city 1 to city 5 is: 1 -> 3 -> 5 with a total cost of 2 + 3 = 5.","solution":"import heapq def shortest_path(n, m, edges): def dijkstra(graph, start, end): distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) return dijkstra(graph, 1, n)"},{"question":"In a fantasy role-playing game, there is a large kingdom with n cities connected by m bidirectional roads. Each city i has a certain amount of gold gi (1 ≤ gi ≤ 1000). The roads allow characters to travel between cities. The king wants to secure the kingdom by ensuring there is a safe route between any two cities that passes through monitored cities. The kingdom has q requests to evaluate the effectiveness of different configurations by verifying if a path between two cities, say city u and city v, exists such that the path only passes through cities with gold values greater than or equal to a certain threshold g*. You are required to handle these requests efficiently. The first line of the input contains three integers n, m, and q (1 ≤ n, m, q ≤ 200000). The second line contains n integers g1, g2, ..., gn, representing the amount of gold in each city. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n), indicating a bidirectional road between cities ui and vi. Each of the next q lines contains three integers u, v, and g* (1 ≤ u, v ≤ n, 1 ≤ g* ≤ 1000), representing a request to check if there is a path between cities u and v passing only through cities that have at least g* gold. For each query, output \\"YES\\" if such a path exists, or \\"NO\\" if it does not. Example Input: 5 5 3 1 2 2 4 3 1 2 1 3 3 4 4 5 2 5 1 5 3 2 4 2 1 3 5 Output: NO YES NO","solution":"def fantasy_paths(n, m, q, gold, roads, queries): from collections import defaultdict, deque def bfs(graph, start, end, threshold): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node == end: return \\"YES\\" for neighbor in graph[node]: if neighbor not in visited and gold[neighbor] >= threshold: visited.add(neighbor) queue.append(neighbor) return \\"NO\\" def build_graph(threshold): graph = defaultdict(list) for u, v in roads: if gold[u] >= threshold and gold[v] >= threshold: graph[u].append(v) graph[v].append(u) return graph result = [] for u, v, g_threshold in queries: current_graph = build_graph(g_threshold) result.append(bfs(current_graph, u, v, g_threshold)) return result def process_input(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) m = int(data[index + 1]) q = int(data[index + 2]) index += 3 gold = list(map(int, data[index:index + n])) index += n roads = [] for _ in range(m): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 roads.append((u, v)) index += 2 queries = [] for _ in range(q): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 g_threshold = int(data[index + 2]) queries.append((u, v, g_threshold)) index += 3 result = fantasy_paths(n, m, q, gold, roads, queries) for r in result: print(r)"},{"question":"You are given two strings s and t of equal length. Your task is to determine if it is possible to make the strings equal by performing the following operation any number of times (including zero times): Choose any index i (1 ≤ i ≤ n-1) and swap s_i with s_{i+1}. Note that you can only swap adjacent characters of the string s. Output \\"YES\\" if it is possible to make strings s and t equal using the allowed operation; otherwise, output \\"NO\\". The only line of input contains two strings s and t of equal length n (1 ≤ n ≤ 100). Output a single line containing \\"YES\\" if it is possible to make the strings equal, otherwise \\"NO\\". Example: Input: ``` converse conserve ``` Output: ``` YES ``` Explanation: We can swap the adjacent characters \\"v\\" and \\"e\\" in the string \\"converse\\" to obtain \\"conserve\\".","solution":"def can_be_equal_by_swapping(s, t): Determine if two strings s and t of equal length can be made equal by swapping adjacent characters any number of times in s. return sorted(s) == sorted(t)"},{"question":"A town is trying to improve its parking infrastructure by introducing smart parking using sensors. The town has a linear street with several parking slots, some of which are currently occupied, and others are available. The town is represented by a sequence of integers where each integer either represents an occupied slot (1) or an available slot (0). The goal is to determine the longest contiguous segment of available slots for parking. You are given a binary string of length `n`, where each character is either \'0\' or \'1\'. We want to find the length of the longest contiguous segment of \'0\'s in the string. If there are no \'0\'s in the string, then the output should be 0. # Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^6) — the length of the binary string. The second line contains a binary string of length n. # Output Print a single integer — the length of the longest contiguous segment of \'0\'s in the string. # Examples Example 1 **Input:** ``` 10 1000010001 ``` **Output:** ``` 4 ``` **Explanation:** There are two segments of zeros: one of length 4 and one of length 3. The longest segment has length 4. Example 2 **Input:** ``` 5 11111 ``` **Output:** ``` 0 ``` **Explanation:** There are no \'0\'s in the string, so the output is 0.","solution":"def find_longest_segment_of_zeros(n, binary_string): Returns the length of the longest contiguous segment of \'0\'s in the binary string. longest = 0 current_length = 0 for char in binary_string: if char == \'0\': current_length += 1 if current_length > longest: longest = current_length else: current_length = 0 return longest"},{"question":"Alice loves watching movies and has a collection of her favorite movies listed in a specific order. She decides to rewatch them but with a slight twist - she wants to shuffle them such that no movie remains in its original position to enjoy a new experience without any predictability about the movies\' sequence. You are given an integer n representing the number of her favorite movies and a list of integers [1, 2, ..., n] where each integer represents a unique movie in her collection. Your task is to generate a new list where no integer appears in its original position. Write a function: ```python def shuffle_movies(n: int, movies: List[int]) -> List[int]: ``` # Input Format - The first line contains an integer `n` (1 ≤ n ≤ 10^5) - the number of movies. - The second line contains `n` space-separated integers - the list of movies in their original order. # Output Format - Print a single line containing `n` space-separated integers - the new order of movies such that no movie appears in its original position. # Sample Input ``` 4 1 2 3 4 ``` # Sample Output ``` 2 1 4 3 ``` # Explanation In the given sample, the output list [2, 1, 4, 3] satisfies the condition that no movie retains its position from the original list: - Movie 1 is not at index 1 - Movie 2 is not at index 2 - Movie 3 is not at index 3 - Movie 4 is not at index 4 Note that there are multiple correct outputs possible. Any solution where no movie is in its original position is acceptable.","solution":"from typing import List import random def shuffle_movies(n: int, movies: List[int]) -> List[int]: Returns a permutation of movies such that no movie remains in its original position. shuffled = movies[:] while True: random.shuffle(shuffled) if all(shuffled[i] != movies[i] for i in range(n)): return shuffled"},{"question":"Aaron is a renowned mathematician and has recently come up with an interesting problem related to sequences. Given a sequence of integers, he wants to find the length of the longest subsequence that is strictly increasing. A subsequence is considered strictly increasing if the elements are in strictly increasing order. For example, given the sequence [10, 22, 9, 33, 21, 50, 41, 60, 80], one of the longest strictly increasing subsequence is [10, 22, 33, 50, 60, 80] and its length is 6. Your task is to help Aaron by writing a program to find the length of the longest strictly increasing subsequence for a given sequence of integers. The first line of input contains an integer n (1 leq n leq 2000), the number of elements in the sequence. The second line contains n space-separated integers representing the elements of the sequence. Output a single integer, the length of the longest strictly increasing subsequence in the input sequence. Example 1: Input: 9 10 22 9 33 21 50 41 60 80 Output: 6 Example 2: Input: 6 5 8 3 7 9 1 Output: 3","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest strictly increasing subsequence in the given sequence. if not sequence: return 0 n = len(sequence) lis = [1] * n for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Berland\'s new city square has been built and it\'s time to set up the optimal layout for a festival. The city square has the shape of a perfect rectangle and contains a grid of w rows and h columns, where each cell in the grid is a square of 1x1 meters. The festival organizers can place different stations in the grid, but there is a catch—they want to minimize the \\"travel chaos\\" by ensuring that the placement of any two stations is as balanced as possible. The travel chaos is defined as the maximum Manhattan distance between any two stations placed on the grid. Given the dimensions of the city square grid (w and h), your task is to place two stations in such a way that the travel chaos is minimized. The Manhattan distance between two cells (x1, y1) and (x2, y2) in a grid is defined as |x1 - x2| + |y1 - y2|. The input contains two integers, w and h (1 ≤ w, h ≤ 10^6), which are the width and height of the grid, respectively. Print the coordinates of the two stations such that the travel chaos (Manhattan distance) between them is minimized. If there are multiple solutions, you can print any. Example Input: 4 5 Output: (2, 2) (3, 2) Explanation: - The travel chaos (Manhattan distance) between (2, 2) and (3, 2) is 1, which is the minimum achievable distance on a grid of this size. Input: 3 3 Output: (1, 1) (1, 2) Explanation: - The travel chaos (Manhattan distance) between (1, 1) and (1, 2) is 1, which is the minimum achievable distance on a grid of this size.","solution":"def find_stations(w, h): Finds the coordinates of two stations such that the Manhattan distance between them is minimized. Args: w (int): width of the grid h (int): height of the grid Returns: tuple of tuple: coordinates of the two stations if w > h: return (1, 1), (1, 2) else: return (1, 1), (2, 1)"},{"question":"A drone delivery company operates in a city represented as a grid of size n x m. Each cell in the grid can either be a building represented by \'B\' or an empty space represented by \'E\'. The company needs to deliver parcels from a drone station located at cell (sx, sy) to a customer\'s location at cell (cx, cy). Drones can move vertically or horizontally to adjacent cells but cannot go through buildings. Find the minimum number of moves required for a drone to travel from (sx, sy) to (cx, cy). If it is not possible to reach the customer\'s location, return -1. The first input line contains two integers n and m (1 ≤ n, m ≤ 1000), the size of the grid. The next n lines each contain m characters (\'B\' or \'E\'). The following line contains four integers sx, sy, cx, and cy (0 ≤ sx, sy, cx, cy < n, m), representing the coordinates of the drone station and the customer\'s location. Output the minimum number of moves or -1 if the delivery is not possible.","solution":"from collections import deque def min_moves(grid, sx, sy, cx, cy): Returns the minimum number of moves required for the drone to move from (sx, sy) to (cx, cy) in the given grid. If it is not possible to reach (cx, cy), returns -1. n = len(grid) m = len(grid[0]) # Directions for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue with the starting position queue = deque([(sx, sy, 0)]) # (current_x, current_y, distance) # Visited set to keep track of visited cells visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() # If we reached the customer\'s location if (x, y) == (cx, cy): return dist # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'E\' and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If we exhaust the queue and do not find a path return -1 # Example for calling the function n = 5 m = 5 grid = [ \\"EEBEE\\", \\"EEEEE\\", \\"EBEEE\\", \\"EEEEE\\", \\"EEEEE\\" ] sx, sy, cx, cy = 0, 0, 4, 4 print(min_moves(grid, sx, sy, cx, cy)) # Output should be the minimum moves or -1 if not possible"},{"question":"A distant group of islands is represented as a set of n nodes connected by m bridges, forming an undirected graph. Each node represents an island, and each bridge has a specific maintenance cost associated with it. The government plans to minimize the total maintenance cost by selectively removing some bridges, ensuring that the remaining bridges still connect all the islands together (i.e., the graph remains a single connected component or tree). The task is to compute the minimum total maintenance cost required to keep all the islands connected. The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 2 cdot 10^5), representing the number of islands and the number of bridges respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6), indicating that there is a bridge connecting islands u and v with a maintenance cost of w. It is guaranteed that the graph is originally connected. Output a single integer representing the minimum total maintenance cost required to connect all islands. Example: ``` Input: 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 Output: 6 ``` Explanation: The optimal way to connect all islands while minimizing the total maintenance cost is to use the bridges with weights 1, 2, and 3. The total cost will be 1 + 2 + 3 = 6.","solution":"def minimum_maintenance_cost(n, m, bridges): Returns the minimum maintenance cost required to keep all islands connected. Uses Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) of the given graph. # Helper function to find the parent of a node def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to union two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) # Attach smaller rank tree under root of higher rank tree if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x # If the ranks are the same, make one root and increment its rank by one else: parent[root_y] = root_x rank[root_x] += 1 # Kruskal\'s algorithm to find the MST bridges.sort(key=lambda x: x[2]) # Sort all bridges by cost parent = [i for i in range(n)] rank = [0] * n total_cost = 0 edge_count = 0 for u, v, w in bridges: u -= 1 # Convert to 0 based index v -= 1 # Convert to 0 based index root_u = find(parent, u) root_v = find(parent, v) # If including this edge does not form a cycle if root_u != root_v: total_cost += w edge_count += 1 union(parent, rank, root_u, root_v) # If we\'ve included n-1 edges, stop early if edge_count == n - 1: break return total_cost"},{"question":"Yelena wants to organize her bookshelf. She has a collection of n books. Each book has a certain thickness. To make her shelf aesthetics pleasing, she decides to stack the books in such a way that the thickness of each book in a stack is strictly less than the thickness of the book directly above it. Help Yelena determine the minimum number of stacks required to organize all her books. The first line contains an integer n - the number of books (1 ≤ n ≤ 1000). The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) - the thickness of each book. Output a single integer - the minimum number of stacks required. In the first sample case, Yelena can stack all 3 books directly on top of each other since each subsequent book is thinner. In the second sample case, Yelena needs 3 stacks since no two books have disparate thickness to adhere to the given stacking rule.","solution":"def min_stacks_required(n, thicknesses): Returns the minimum number of stacks required to organize the books. Parameters: n (int): The number of books thicknesses (list of int): The thicknesses of the books Returns: int: The minimum number of stacks required stacks = [] for t in thicknesses: placed = False for stack in stacks: if stack[-1] > t: stack.append(t) placed = True break if not placed: stacks.append([t]) return len(stacks)"},{"question":"Monica has a collection of n toys displayed in a straight line on a shelf, where each toy has a unique rank according to its size. Monica believes that toy arrangements should follow a certain pattern to look appealing. She defines a \\"jump\\" in ranks as an adjacent pair of toys where the rank of the second toy is strictly greater than the rank of the first toy. Monica wants to determine the number of valid jumps for a given toy arrangement and rearrange the toys to minimize the number of jumps. If there are several valid ways to arrange the toys with the minimal number of jumps, any such arrangement is acceptable. Given the current arrangement of toys by their ranks, determine the number of valid jumps in the arrangement and output the rearranged toys with the minimal number of jumps. The first line of input contains a single integer n (1 ≤ n ≤ 100000) representing the number of toys. The second line contains n distinct integers representing the ranks of the toys. Output the number of valid jumps in the minimized arrangement and the rearranged toy ranks. Example input: ``` 5 3 1 4 2 5 ``` Example output: ``` 2 1 2 3 4 5 ``` Explanation: - In the initial arrangement \\"3 1 4 2 5\\", there are 3 valid jumps: (1, 4), (2, 5), and (4, 5). - The rearranged toy ranks \\"1 2 3 4 5\\" have only 2 valid jumps: (1, 2) and (2, 3).","solution":"def minimize_jumps(n, toy_ranks): Returns the minimized number of jumps and the rearranged toy ranks. # Sort the toy ranks in non-decreasing order sorted_toy_ranks = sorted(toy_ranks) # Calculate the number of jumps in the sorted list (which is n-1) minimized_jumps = max(0, n - 1) return minimized_jumps, sorted_toy_ranks"},{"question":"A new software program is being designed to track and manage worker shifts in a factory. Each worker can only work in one shift per day. There are three available shifts: morning, afternoon, and night. The factory management team needs to calculate how many workers are required at minimum to ensure that all shifts are covered every day for a given number of days. You are provided the demand of workers for each shift per day. Your task is to determine the minimum number of workers needed to cover all shifts over the entire period. Input: - The first line contains a single integer `d` (1 ≤ d ≤ 1000) — the number of days for which shifts need to be covered. - Each of the next `d` lines contains three integers `m_i`, `a_i`, and `n_i` (0 ≤ m_i, a_i, n_i ≤ 10^3) — the number of workers needed for the morning, afternoon, and night shifts respectively on day `i`. Output: - Print a single integer representing the minimum number of workers required to cover all shifts over the given days. Example Input: ``` 3 2 1 1 1 3 2 1 2 1 ``` Example Output: ``` 5 ``` Explanation: - On day 1, 2 workers are needed for the morning shift, 1 for the afternoon shift, and 1 for the night shift. - On day 2, 1 worker is needed for the morning shift, 3 for the afternoon shift, and 2 for the night shift. - On day 3, 1 worker is needed for the morning shift, 2 for the afternoon shift, and 1 for the night shift. To cover all shifts across all days, we need: - Maximum demand for the morning shift: 2 workers (from day 1) - Maximum demand for the afternoon shift: 3 workers (from day 2) - Maximum demand for the night shift: 2 workers (from day 2) Thus, the minimum number of workers required is the sum of maximum workers needed for each shift: `2 + 3 + 2 = 7` workers. However, since each worker can only work one shift per day, assigning shifts strategically can reduce the number of workers required. For this input, the optimal result considering all constraints is actually 5 workers.","solution":"def min_workers_required(d, demands): Calculate the minimum number of workers required to cover all shifts. :param d: int - the number of days :param demands: List[Tuple[int, int, int]] - list of tuples containing (morning, afternoon, night) demands per day :return: int - minimum number of workers required morning_max = 0 afternoon_max = 0 night_max = 0 for day in demands: morning_max = max(morning_max, day[0]) afternoon_max = max(afternoon_max, day[1]) night_max = max(night_max, day[2]) return morning_max + afternoon_max + night_max"},{"question":"Diana enjoys solving puzzles and has recently taken up the challenge of decrypting encoded messages. She has mastered replacing characters with their corresponding numerical positions in the alphabet (A=1, B=2, ..., Z=26) but now she faces a more difficult problem. Given an encoded message as a string of digits, Diana needs to determine the number of ways to decode it back into an alphabetical string. Each digit or pair of digits can be decoded into a letter if it is within the range 1 to 26. For instance, \'1\' can be decoded as \'A\', \'12\' can be decoded as \'L\', and \'26\' can be decoded as \'Z\'. However, \'27\' cannot be decoded into any letter since there are only 26 letters in the alphabet. Help Diana find out how many different ways there are to decode the given message. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the encoded message. The second line contains a string of n digits. Print a single integer — the number of different ways to decode the entire message. Since the result can be large, return it modulo 10^9 + 7. For example, for a message \\"123\\", the valid decodings are \\"ABC\\", \\"LC\\", and \\"AW\\". Thus, the output should be 3. In another example, for the message \\"10\\", the valid decoding is \\"J\\". So, the output should be 1.","solution":"MOD = 10**9 + 7 def num_decodings(s: str) -> int: n = len(s) if n == 0 or s[0] == \'0\': return 0 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): if s[i - 1] != \'0\': dp[i] = dp[i - 1] % MOD two_digit = int(s[i - 2:i]) if 10 <= two_digit <= 26: dp[i] = (dp[i] + dp[i - 2]) % MOD return dp[n]"},{"question":"Consider a grid of size n times m where each cell contains a number representing calories burned by performing a workout at that cell. You are to navigate from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (n, m)), collecting as many calories as possible. You can only move either right or down at each step. Your task is to determine the maximum calories one can collect by reaching the bottom-right corner of the grid. # Input The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and the number of columns in the grid. Each of the next n lines contains m integers, each representing the calories burned in that cell. The calories burned in each cell are between 0 and 1000. # Output Print a single integer — the maximum calories one can collect by reaching the bottom-right corner of the grid. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` Explanation You can follow the path 1 -> 3 -> 5 -> 2 -> 1 collecting a total of 12 calories. The diagram below represents this path: ``` 1 3 1 1 5 1 4 2 1 ``` With the path being illustrated as follows (max calories path marked with X): ``` X X 1 1 X 1 4 X X ```","solution":"def max_calories(n, m, grid): # Initialize dp table dp = [[0] * m for _ in range(n)] # Set the first cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Ilya the Coder is facing a sequence problem that he wants to solve efficiently. He has a sequence of n integers and he needs to process m queries about this sequence. Each query can be of two types: 1. Update: Given an index and a value, update the element at the given index to the new value. 2. Sum: Given a range, calculate the sum of elements within that range (inclusive). Ilya wants to perform these operations as efficiently as possible given the constraints. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100000) — the number of elements in the sequence and the number of queries, respectively. The second line contains n integers — the initial elements of the sequence. The next m lines contain the queries. Each query can be one of the following two types: - \\"1 x y\\" which means to update the element at index x (1-based) to y. - \\"2 l r\\" which means to output the sum of the elements from index l to index r (1-based, inclusive). Output the result of each sum query in the order they appear in the input. Example: Input: ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` Output: ``` 6 14 ```","solution":"def process_queries(n, m, sequence, queries): Process a series of update and sum range queries on a sequence of integers. Parameters: - n (int): number of elements in the sequence. - m (int): number of queries. - sequence (list of int): initial elements of the sequence. - queries (list of tuples): queries to be processed. Returns: - list of int: results for the sum range queries. results = [] for query in queries: if query[0] == 1: # Update query _, index, value = query sequence[index - 1] = value # 1-based to 0-based index elif query[0] == 2: # Sum query _, l, r = query results.append(sum(sequence[l - 1:r])) # 1-based to 0-based index return results"},{"question":"You are given a string representing a mathematical expression. The string can include integers, the addition operator \'+\', the multiplication operator \'*\', and parentheses \'()\'. The expression is guaranteed to be valid and fully parenthesized. Your task is to evaluate the expression and output the result. The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the expression string. The second line contains a string of length n representing the mathematical expression. Output a single integer which is the result of evaluating the expression. Example: Input: 7 (2+3)*4 Output: 20","solution":"def evaluate_expression(n, expression): Evaluates a mathematical expression with addition, multiplication, and parentheses. Args: n (int): The length of the expression string. expression (str): The mathematical expression to evaluate. Returns: int: The result of evaluating the expression. return eval(expression) # Example usage: # n = 7 # expression = \\"(2+3)*4\\" # print(evaluate_expression(n, expression)) # Output: 20"},{"question":"Amanda has a list of strings consisting of lowercase English letters. She wants to find the length of the longest subsequence which is common across all strings in the list. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function that takes a list of strings and returns the length of the longest common subsequence. The input consists of: - The first line containing a single integer n (1 leq n leq 100) — the number of strings. - The next n lines each containing a string s_i (1 leq |s_i| leq 100) — the strings. Output a single integer denoting the length of the longest common subsequence among all strings in the list. For example, consider the following inputs: ``` 3 abcde abfce abgde ``` The longest common subsequence for the example above is \\"abe\\", which has length 3. So, the output should be: ``` 3 ```","solution":"from functools import lru_cache def longest_common_subsequence(strings): def lcs(X, Y): m = len(X) n = len(Y) L = [[None] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0 : L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L[m][n] def find_lcs_for_all_strings(strings): result_subseq = strings[0] for i in range(1, len(strings)): result_subseq_length = lcs(result_subseq, strings[i]) temp_lcs = \\"\\" m, n = len(result_subseq), len(strings[i]) L = [[0] * (n + 1) for _ in range(m + 1)] for x in range(m + 1): for y in range(n + 1): if x == 0 or y == 0: L[x][y] = 0 elif result_subseq[x-1] == strings[i][y-1]: L[x][y] = L[x-1][y-1] + 1 else: L[x][y] = max(L[x-1][y], L[x][y-1]) x, y = m, n while x > 0 and y > 0: if result_subseq[x-1] == strings[i][y-1]: temp_lcs = result_subseq[x-1] + temp_lcs x -= 1 y -= 1 elif L[x-1][y] > L[x][y-1]: x -= 1 else: y -= 1 result_subseq = temp_lcs return len(result_subseq) return find_lcs_for_all_strings(strings)"},{"question":"A sequence of integers is said to be an arithmetic progression if the difference between any two consecutive elements is the same throughout the sequence. Given a sequence of integers, Petya wants to find the length of the longest contiguous subsequence which forms an arithmetic progression. Write a program to help Petya find this subsequence length. Input: The first line contains a single integer n (2 leq n leq 10^5) — the number of integers in the sequence. The second line contains n integers a_{1}, a_{2}, ldots, a_{n} (-10^9 leq a_{i} leq 10^9). Output: Print a single integer representing the length of the longest contiguous subsequence which forms an arithmetic progression. Example: Input: 7 10 20 30 50 60 70 80 Output: 4 Explanation: The longest contiguous subsequence which forms an arithmetic progression is `50 60 70 80` with a common difference of 10. In another example: Input: 5 1 7 13 19 25 Output: 5 Explanation: The entire sequence `1 7 13 19 25` forms an arithmetic progression with a common difference of 6, so its length is 5.","solution":"def longest_arithmetic_subsequence_length(n, sequence): if n == 2: return n max_length = 2 current_length = 2 current_diff = sequence[1] - sequence[0] for i in range(2, n): diff = sequence[i] - sequence[i - 1] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 2 if current_length > max_length: max_length = current_length return max_length"},{"question":"You are given an undirected graph with n nodes and m edges. Your task is to find the number of connected components in the graph and determine the size of the largest connected component. A connected component of an undirected graph is a maximal set of nodes such that each pair of nodes is connected by a path, and which is connected to no additional nodes in the rest of the graph. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of nodes and the number of edges in the graph. The following m lines describe the edges. Each of these lines contains two distinct integers u and v (1 ≤ u, v ≤ n) — the nodes that the edge connects. It is guaranteed that there will be no multiple edges between any pair of nodes. Print two integers: the number of connected components in the graph and the size of the largest connected component. **Example 1:** Input: ``` 6 3 1 2 2 3 4 5 ``` Output: ``` 3 3 ``` **Explanation:** In the example graph, we have three connected components: 1. The first connected component is {1, 2, 3} with 3 nodes. 2. The second connected component is {4, 5} with 2 nodes. 3. The third connected component is {6} with 1 node. Therefore, there are 3 connected components, and the size of the largest connected component is 3.","solution":"def find_connected_components_and_largest(graph, n, m): def dfs(node, visited, adj_list): stack = [node] size = 0 while stack: v = stack.pop() if v not in visited: visited.add(v) size += 1 for neighbor in adj_list[v]: if neighbor not in visited: stack.append(neighbor) return size adj_list = {i: [] for i in range(1, n+1)} for u, v in graph: adj_list[u].append(v) adj_list[v].append(u) visited = set() num_components = 0 largest_component_size = 0 for node in range(1, n+1): if node not in visited: num_components += 1 component_size = dfs(node, visited, adj_list) largest_component_size = max(largest_component_size, component_size) return num_components, largest_component_size"},{"question":"Given an array of integers, find the minimum number of operations required to make all the elements of the array equal. In one operation, you can choose any two adjacent elements and replace them with their sum. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output a single integer — the minimum number of operations required to make all the elements of the array equal. Example: Input: 4 1 2 3 4 Output: 3 Explanation: In the first step, replace 1 and 2 with 3: Array: 3 3 4 In the second step, replace 3 and 3 with 6: Array: 6 4 In the third step, replace 6 and 4 with 10: Array: 10","solution":"def min_operations_to_equal_elements(n, arr): Given an array of integers, find the minimum number of operations required to make all the elements of the array equal. In one operation, you can choose any two adjacent elements and replace them with their sum. Parameters: n (int): Length of the array (1 ≤ n ≤ 1000) arr (list of int): The array of integers (1 ≤ ai ≤ 1000) Returns: int: Minimum number of operations required if n == 1: return 0 return n - 1"},{"question":"You are given an m x n grid where each cell represents a part of a city. Each cell can either be walkable (represented by \'.\') or an obstacle (represented by \'#\'). You start at the top-left cell (0, 0) and aim to reach the bottom-right cell (m-1, n-1). You can only move up, down, left, or right, and you cannot move through obstacles. Your task is to determine the minimal number of steps required to go from the top-left cell to the bottom-right cell. If there is no path, return -1. # Input - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) – the dimensions of the grid. - The following m lines contain n characters each – the grid itself consisting of \'.\' and \'#\'. # Output Print the minimal number of steps required to reach the bottom-right cell from the top-left cell. If there is no path, print -1. # Examples Example 1 **Input:** ``` 3 3 ... .#. ... ``` **Output:** ``` 4 ``` **Explanation:** 1. Start from (0, 0) 2. Move to (0, 1) 3. Move to (0, 2) 4. Move to (1, 2) 5. Move to (2, 2) -> Reached the destination. Example 2 **Input:** ``` 3 3 ... # ... ``` **Output:** ``` -1 ``` **Explanation:** There is no path from (0, 0) to (2, 2) due to the blocking row of obstacles. In the first example, the minimal number of steps is 4, and in the second one, there is no valid path hence output is -1.","solution":"from collections import deque def min_steps_to_reach_end(m, n, grid): if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # If we\'ve reached the bottom-right corner if x == m-1 and y == n-1: return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are a developer for a cutting-edge finance platform. Your task is to analyze an investment series and determine possible ranges of profitability. Here\'s the breakdown: You are given a list of integers, where each integer represents the daily profit (or loss) of a particular investment. Your job is to determine the maximum sum of elements in any contiguous subarray of this list. For example, consider the array `[-2,1,-3,4,-1,2,1,-5,4]`. The contiguous subarray with the maximum sum is `[4,-1,2,1]`, which has a sum of `6`. You need to write a program that reads multiple test cases and outputs the maximum sum for each test case. **Input:** 1. The first line contains an integer T (1 ≤ T ≤ 1000) — the number of test cases. 2. For each test case: - The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the series. - The second line contains `n` integers separated by spaces: the daily profit/loss values for the investment. **Output:** For each test case, output a single integer — the maximum sum of any contiguous subarray for the given series. **Example:** Input: ``` 3 9 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 4 -1 -2 -3 -4 ``` Output: ``` 6 15 -1 ``` Constraints: - Sum of `n` for all test cases does not exceed 10^6 Your task is to implement this functionality efficiently, ensuring that the solution handles large inputs within the time limits.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray in the given array arr. current_max = arr[0] global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list of integers. Parameters: test_cases (list): A list of tuples, where each tuple contains an integer `n` and a list of `n` integers representing the daily profit/loss values. Returns: list: A list of integers, where each integer is the result for the corresponding test case. results = [] for n, arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"Lucy is planning to plant flowers in her garden. She has an initial garden represented by a 2D grid of size n x m where each position can either be empty (represented by \'.\') or have a flower (represented by \'f\'). Lucy wants to maximize the number of new flowers she plants under the following rule: for each new flower planted, all cells in its row and column must remain empty except the cell where the flower is planted. Given the initial state of the garden, determine the maximum number of new flowers Lucy can plant. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50), where n is the number of rows and m is the number of columns of the garden grid. The following n lines contain m characters each, representing the initial garden layout. Output a single integer indicating the maximum number of new flowers that can be planted in the garden. **Example:** Input: ``` 3 3 ... .f. ... ``` Output: ``` 2 ``` Explanation: Lucy can plant new flowers in the cells (1, 0) and (2, 2), or any other combination that adheres to the rule mentioned above to achieve the maximum number.","solution":"def max_new_flowers(n, m, garden): Determines the maximum number of new flowers that can be planted in the garden while adhering to the rule that all cells in the row and column of a newly planted flower must be empty. flowers = 0 rows_occupied = set() cols_occupied = set() # first identify all the rows and columns which are already occupied by flowers for r in range(n): for c in range(m): if garden[r][c] == \'f\': rows_occupied.add(r) cols_occupied.add(c) # determine where we can place new flowers for r in range(n): if r not in rows_occupied: rows_occupied.add(r) for c in range(m): if c not in cols_occupied and garden[r][c] == \'.\': cols_occupied.add(c) flowers += 1 break return flowers"},{"question":"You have a network of n computers connected by m bidirectional communication channels. Each communication channel connects two computers and has an associated latency, represented by an integer. Latency is the time it takes for a message to travel through that channel. You need to find the minimum latency required to send a message from the first computer (node 1) to the last computer (node n). Given the details of this network, determine the minimum time required to send a message from computer 1 to computer n. If it is not possible to send a message from computer 1 to computer n, output -1. The first line of the input contains two space-separated integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of computers and the number of communication channels. Each of the next m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ w ≤ 1000) — indicating there is a communication channel connecting computers u and v with latency w. Output a single integer — the minimum time required to send the message from computer 1 to computer n, or -1 if it is not possible. Example: Input: 4 4 1 2 1 2 3 2 3 4 1 1 4 4 Output: 3 In the example above, the minimum latency path is 1 -> 2 -> 3 -> 4 with a total latency of 1 + 2 + 1 = 4. The direct path from 1 to 4 has a latency of 4, so the minimum is 3.","solution":"import heapq def min_latency(n, m, edges): # Create adjacency list representation of the graph graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path from node 1 to node n pq = [(0, 1)] # priority queue of (latency, node) min_latency = [float(\'inf\')] * (n + 1) min_latency[1] = 0 while pq: current_latency, u = heapq.heappop(pq) if current_latency > min_latency[u]: continue for v, w in graph[u]: if current_latency + w < min_latency[v]: min_latency[v] = current_latency + w heapq.heappush(pq, (current_latency + w, v)) return min_latency[n] if min_latency[n] != float(\'inf\') else -1 # Example usage edges = [(1, 2, 1), (2, 3, 2), (3, 4, 1), (1, 4, 4)] print(min_latency(4, 4, edges)) # Output should be 4"},{"question":"Henry has a growing passion for analyzing integer sequences. He has recently focused his attention on finding the longest subsequence where the difference between consecutive elements is consistently either (1) or (-1). Can you help Henry with this task? You are given an integer array (A) of size (n) representing the sequence. Your task is to find the length of the longest contiguous subsequence where the difference between consecutive elements is consistently either (1) or (-1). The first line of input contains an integer (n) ((1 le n le 10^5)), the size of the array. The second line contains (n) integers (A_1, A_2, ldots, A_n) ((1 le A_i le 10^6)) representing the elements of the array. Your program should output a single integer, the length of the longest contiguous subsequence that satisfies Henry\'s condition. # Example: **Input:** ``` 7 1 2 3 2 1 2 3 ``` **Output:** ``` 7 ``` **Input:** ``` 10 5 6 7 8 5 4 3 2 3 4 ``` **Output:** ``` 6 ``` **Explanation:** In the first example, the entire sequence forms a contiguous subsequence where the difference between consecutive elements is consistently either (1) or (-1). Therefore, the output is (7). In the second example, the subsequence from position (4) to position (9) (8, 5, 4, 3, 2, 3) has the properties Henry is looking for, so the output is (6).","solution":"def longest_contiguous_subsequence(arr): Finds the length of the longest contiguous subsequence where the difference between consecutive elements is consistently either 1 or -1. :param arr: List of integers :return: Length of the longest contiguous subsequence if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"A mysterious square artifact has been discovered in an ancient temple. The artifact is a grid of size n x n containing integers. Each cell in the grid can rotate the value based on specific rules. A \\"rotation\\" can be defined as moving the integer in the current cell to one of its nearest neighbor cells (up, down, left, or right). However, due to an ancient enchantment, not every cell can rotate its value in every direction. The rules for each cell i, j are given by two matrices - R and C. The matrix R specifies row-wise rotations: if R[i][j] is 1, the value in cell (i, j) can move to cell (i, j±1). The matrix C specifies column-wise rotations: if C[i][j] is 1, the value in cell (i, j) can move to cell (i±1, j). Given the constraints, determine if it is possible to rearrange the values in the grid such that after a series of legal rotations, the grid matches a target configuration. Both the current configuration and the target configuration will be provided. The first line contains an integer n (2 ≤ n ≤ 300) - the size of the grid. The next n lines each contain n space-separated integers representing the current configuration of the grid. The next n lines each contain n space-separated integers representing the target configuration of the grid. The next n lines each contain n space-separated integers (either 0 or 1) representing the row rotation rules matrix R. The next n lines each contain n space-separated integers (either 0 or 1) representing the column rotation rules matrix C. Print \\"YES\\" (without quotes) if the rearrangement to the target configuration is possible under the given rules, and \\"NO\\" otherwise.","solution":"def can_rearrange(n, current, target, R, C): # Initialize a graph to represent the cells and their connections from collections import defaultdict, deque # A function to add edges to the graph based on the rules def add_edges(i, j, graph): if R[i][j] == 1: if j > 0: graph[(i, j)].add((i, j - 1)) graph[(i, j - 1)].add((i, j)) if j < n - 1: graph[(i, j)].add((i, j + 1)) graph[(i, j + 1)].add((i, j)) if C[i][j] == 1: if i > 0: graph[(i, j)].add((i - 1, j)) graph[(i - 1, j)].add((i, j)) if i < n - 1: graph[(i, j)].add((i + 1, j)) graph[(i + 1, j)].add((i, j)) # Build the graph from the given rotation rules graph = defaultdict(set) for i in range(n): for j in range(n): add_edges(i, j, graph) # A function to perform BFS and find all connected components def bfs(start, visited): queue = deque([start]) component = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) component.append(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return component # Discover all connected components visited = set() components = [] for i in range(n): for j in range(n): if (i, j) not in visited: component = bfs((i, j), visited) components.append(component) # For each component, check if the values can be rearranged to match the target configuration for component in components: current_values = [current[i][j] for i, j in component] target_values = [target[i][j] for i, j in component] if sorted(current_values) != sorted(target_values): return \\"NO\\" return \\"YES\\""},{"question":"Martin is developing a new game where the main character needs to jump across a series of platforms. Each platform has a certain height, and the player can only jump from one platform to another if the destination platform is not higher than a certain value above the starting platform. The game developers need to determine the maximum height difference the main character can jump across and still be able to reach the last platform starting from the first one. You are given an array of integers representing the heights of the platforms, and a maximum height difference. Your task is to determine whether it is possible for the player to reach the last platform from the first one, by making valid jumps according to the maximum allowed height difference. The first line of input contains two integers n and d (1 ≤ n ≤ 100000, 0 ≤ d ≤ 1000) where n is the number of platforms and d is the maximum allowed height difference between consecutive platforms. The second line of input contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 100000), representing the heights of the platforms. Output \\"YES\\" if it is possible to reach the last platform from the first one by making valid jumps, and \\"NO\\" otherwise. Example: Input: 5 3 1 4 2 3 5 Output: YES In this example, the character can jump from: - Platform 1 (height 1) to platform 2 (height 4) (difference = 3) - Platform 2 (height 4) to platform 3 (height 2) (difference = 2) - Platform 3 (height 2) to platform 4 (height 3) (difference = 1) - Platform 4 (height 3) to platform 5 (height 5) (difference = 2) The character can reach the last platform, so the output is \\"YES\\".","solution":"def can_reach_last_platform(n, d, heights): Determines if the player can reach the last platform given the maximum allowed height difference. Parameters: n (int): The number of platforms. d (int): The maximum allowed height difference. heights (list): The heights of the platforms. Returns: str: \\"YES\\" if the player can reach the last platform, otherwise \\"NO\\". for i in range(n - 1): if abs(heights[i + 1] - heights[i]) > d: return \\"NO\\" return \\"YES\\""},{"question":"Emma\'s flower garden is in the shape of a grid with `n` rows and `m` columns. She wants to plant flowers in such a way that no two flowers are adjacent. Two flowers are considered adjacent if they share a common side (left, right, top, or bottom). Given the dimensions of the garden, calculate the maximum number of flowers that Emma can plant under these conditions. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden. Output a single integer: the maximum number of flowers that can be planted in the garden without any two flowers being adjacent. # Sample Input 1 ``` 3 3 ``` # Sample Output 1 ``` 5 ``` # Sample Input 2 ``` 2 2 ``` # Sample Output 2 ``` 2 ``` # Explanation In the first example, Emma can plant flowers in a way that looks like this, where \'F\' denotes a flower and \'.\' denotes an empty spot: ``` F . F . F . F . F ``` In the second example, Emma can plant flowers in this arrangement: ``` F . . F ``` There are no two flowers adjacent to each other in either grid arrangement.","solution":"def max_flowers(n, m): Returns the maximum number of flowers that can be planted in a n x m grid garden such that no two flowers are adjacent. if n % 2 == 0 or m % 2 == 0: return (n * m) // 2 else: return (n * m) // 2 + 1"},{"question":"You are given a grid with n rows and m columns filled with integers, where 1 leq n, m leq 1000. Your task is to perform multiple operations on this grid. Each operation is defined by three integers r, c, and v meaning that you should add the value v to the element at row r and column c. The operations are independent, meaning that the result of one operation does not affect the other upcoming operations initially. After performing all the operations, you need to output the maximum value in the grid. # Input The first line contains three integers n, m, and k (1 leq n, m leq 1000 and 1 leq k leq 10^6) — the number of rows, the number of columns, and the number of operations to perform respectively. The next k lines contain three integers r, c, and v (1 leq r leq n, 1 leq c leq m, 1 leq v leq 1000) — representing an operation to add value v to the cell at row r and column c. # Output Output a single integer — the maximum value in the grid after performing all the operations. # Example Input ``` 3 3 4 1 1 5 1 2 7 3 3 2 2 2 3 ``` Output ``` 7 ``` # Note In this example, the grid is initially: ``` 0 0 0 0 0 0 0 0 0 ``` After the operations, it will look like this: ``` 5 7 0 0 3 0 0 0 2 ``` The maximum value in the grid is 7.","solution":"def max_value_in_grid(n, m, operations): Returns the maximum value in the grid after performing all the operations. Parameters: n (int): number of rows m (int): number of columns operations (list of tuples): list of operations, where each operation is represented by (r, c, v) Returns: int: the maximum value in the grid after operations # Initialize the grid with zeros grid = [[0] * m for _ in range(n)] # Perform each operation for (r, c, v) in operations: grid[r-1][c-1] += v # Find the maximum value in the grid max_value = max(max(row) for row in grid) return max_value"},{"question":"Given a sequence of integers, you need to locate the longest contiguous subarray that must be sorted (in non-decreasing order) so that the entire array becomes sorted when this subarray is sorted. You are provided with an array of n integers where the array may contain duplicates. Your task is to determine the starting and ending indices of the subarray that needs to be sorted to make the entire array sorted in non-decreasing order. Indices are 1-based. Write a program that, given an array of integers, finds this subarray. If the array is already sorted, return the indices as 1 and 1. The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the array. Output the 1-based start and end indices of the subarray. If the array is already sorted, output 1 1. Here is the explanation for the sample input provided. For example, given the array [1, 3, 5, 4, 2, 6], we need to sort the subarray from indices 2 to 5 to make the entire array sorted. So the output will be 2 5. Note: The subarray should be the smallest such subarray possible. Sample Input: 8 1 3 5 4 2 6 7 8 Sample Output: 2 5","solution":"def find_subarray_to_sort(arr): This function finds the smallest subarray that must be sorted so that the entire array becomes sorted. n = len(arr) start, end = 0, n - 1 # Find the first element which is out of the sorting order from the start while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # If the array is already sorted if start == n - 1: return (1, 1) # Find the first element which is out of the sorting order from the end while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # Find the min and max elements in the arr[start:end+1] subarray_min = min(arr[start:end + 1]) subarray_max = max(arr[start:end + 1]) # Extend the subarray to include any number which is greater than the min in the subarray while start > 0 and arr[start - 1] > subarray_min: start -= 1 # Extend the subarray to include any number which is less than the max in the subarray while end < n - 1 and arr[end + 1] < subarray_max: end += 1 # Return 1-based indices return (start + 1, end + 1)"},{"question":"Given an undirected graph with n vertices and m edges, your task is to find the number of connected components in the graph, and for each connected component, print its size. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950), where n is the number of vertices and m is the number of edges. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is an edge between vertex u and vertex v. There are no repeated edges, and the graph may be disconnected. Output the number of connected components, followed by the sizes of each connected component in ascending order. If there are multiple connected components of the same size, any order is acceptable. # Example Input: ``` 6 5 1 2 2 3 3 4 5 6 3 4 ``` # Example Output: ``` 2 4 2 ``` # Explanation: In the example given, there are two connected components: - Component 1: vertices {1, 2, 3, 4}, size is 4. - Component 2: vertices {5, 6}, size is 2.","solution":"def find_connected_components(n, m, edges): from collections import defaultdict, deque # Create the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Helper function to perform BFS def bfs(start, visited): queue = deque([start]) visited[start] = True component_size = 0 while queue: node = queue.popleft() component_size += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_size visited = [False] * (n + 1) component_sizes = [] for i in range(1, n + 1): if not visited[i]: size = bfs(i, visited) component_sizes.append(size) component_sizes.sort() return len(component_sizes), component_sizes"},{"question":"You are given a string s consisting of lowercase Roman alphabet characters. You can perform a sequence of operations: in each operation, you select one character from the string and remove it. You aim to create the longest contiguous subsequence where all characters are in strictly ascending lexicographical order. Determine the length of the longest contiguous subsequence that satisfies the condition. The first line contains one integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 100). For each test case, print one integer — the length of the longest contiguous subsequence of the given string that consists of strictly ascending lexicographical order characters. For example: Input: ``` 3 abcdef zyx abcdbca ``` Output: ``` 6 1 4 ``` Explanation: - In the first test case, the entire string \\"abcdef\\" is already strictly ascending. - In the second test case, you can choose any single character, for example, \\"z\\", so the answer is 1. - In the third test case, \\"abcd\\" is the longest contiguous subsequence with strictly ascending order characters.","solution":"def longest_ascending_subseq_len(s): max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] > s[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len def process_test_cases(t, test_cases): results = [] for i in range(t): s = test_cases[i] results.append(longest_ascending_subseq_len(s)) return results"},{"question":"In a programming contest, there is a fun challenge that every participant must solve. Each participant is given a string that consists of lowercase English letters. The challenge is to determine the minimal number of moves needed to make the string a palindrome. In one move, you can choose any character of the string and change it to any other character. A string is a palindrome if it reads the same forward and backward. Write a function to solve the problem. The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^4) — the string that needs to be transformed into a palindrome. For each test case, output the minimal number of moves necessary to make the given string a palindrome. For instance, consider the string \\"abc\\". The minimal number of moves required is 1, as you can change the \'c\' to \'a\' to get \\"aba\\" or \'a\' to \'c\' to get \\"cbc\\". Example: Input: 3 abc aabb abccba Output: 1 2 0 Explanation: - For the first case, you can change either \'b\' or \'c\' to \'a\' to make it \\"aba\\" or \\"cbc\\". - For the second case, you can change both \'a\'s to \'b\' to make it \\"bbbb\\" or either \'b\'s to \'a\' to make it \\"aaaa\\". - For the third case, the string is already a palindrome. So, no moves are required.","solution":"def minimal_moves_to_palindrome(t, test_cases): Returns the minimal number of moves to make the string a palindrome. results = [] for s in test_cases: left = 0 right = len(s) - 1 moves = 0 while left < right: if s[left] != s[right]: moves += 1 left += 1 right -= 1 results.append(moves) return results"},{"question":"John is organizing a coding competition. There are k problems in the competition, each problem has a difficulty level, such that the i-th problem has a difficulty level of d_i. John wants to select an optimal subset of problems from the list such that he maximizes the difficulty level sum without exceeding a maximum allowed sum L. Given the number of problems and their respective difficulty levels, determine the maximum sum of difficulty levels of the problems that can be selected without exceeding L. The first line contains two integers k and L (1 le k le 1000, 1 le L le 10^5) — the number of problems and the maximum allowed sum of difficulty levels, respectively. The second line contains k integers d_1, d_2, ..., d_k (1 le d_i le 1000) — the difficulty levels of the problems. Print a single integer, which is the maximum possible sum of the difficulty levels not exceeding L. In the first example, the optimal subset can be the problems with difficulty levels 4, 3, and 2. In the second example, the optimal subset can be the problem with difficulty 10. In the third example, the optimal subset can be the problems with difficulty levels 1, 2, and 7.","solution":"def max_difficulty_subset(k, L, difficulties): Returns the maximum sum of difficulty levels of the problems that can be selected without exceeding L. # Using 0/1 Knapsack Dynamic Programming approach dp = [0] * (L + 1) for difficulty in difficulties: for j in range(L, difficulty - 1, -1): dp[j] = max(dp[j], dp[j - difficulty] + difficulty) return dp[L] # Example usage k = 5 L = 10 difficulties = [1, 2, 4, 5, 6] print(max_difficulty_subset(k, L, difficulties)) # Output: 10"},{"question":"Alex the beekeeper has a set of beehives arranged on a two-dimensional grid. The beehives, denoted as circular patches with centers at integer coordinates, have variable radii. Alex wants to place specially designed bee feeders at integer coordinate points such that the feeders are inside these beehives. To optimize the placement and reduce costs, Alex wants to minimize the number of feeders used while ensuring that each beehive has at least one feeder inside. Your task is to determine the minimum number of feeders required and their possible positions to meet Alex\'s requirements. The first line contains an integer number t (1 ≤ t ≤ 50) — the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 100) — the number of beehives. The next n lines describe the beehives. Each line contains three integers xi, yi and ri (1 ≤ ri ≤ 100) — the coordinates of the center and radius of the i-th beehive. Print answers for all test cases separately. For each test case, print the minimum number of feeders needed in the first line. In the next lines, print the coordinates of each feeder in the format xi yi. If there are multiple solutions, you can print any of them.","solution":"def find_feeders(t, cases): results = [] for i in range(t): n = cases[i][0] beehives = cases[i][1] feeders = set() for x, y, r in beehives: found_feeder = False for xi in range(x - r, x + r + 1): if found_feeder: break for yi in range(y - r, y + r + 1): if (xi - x)**2 + (yi - y)**2 <= r**2: feeders.add((xi, yi)) found_feeder = True break results.append(list(feeders)) return results"},{"question":"Jessica is planning to celebrate her birthday today and is setting up string lights in her garden. She wants to create a dazzling light pattern using a given number of lights, arranged in rows in a binary matrix. A binary matrix is a 2D grid consisting only of 0s and 1s, where 1 represents an ON light and 0 represents an OFF light. She specifically loves alternating patterns and wants to maximize the number of 1s while ensuring that no two adjacent cells (horizontally or vertically) contain 1s. Given the number of rows `r` and columns `c` in the matrix, help Jessica design the binary matrix so that the number of 1s is maximized and the desired pattern rules are followed. The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each test case contains two space-separated integers: `r` and `c` (1 ≤ r, c ≤ 50). For each test case, print `r` lines of the matrix ensuring that: - No two adjacent cells contain the value 1. - The number of 1s is maximized while adhering to the above condition. For instance, if `r = 3` and `c = 3`, a valid output could be: ``` 1 0 1 0 1 0 1 0 1 ``` and for `r = 2` and `c = 2`, a valid output could be: ``` 1 0 0 1 ``` If multiple valid matrices exist that satisfy the conditions, you can output any of them.","solution":"def create_light_pattern(r, c): Creates an r x c binary matrix with maximum number of 1s such that no two adjacent cells (horizontally or vertically) contain 1s. matrix = [[0]*c for _ in range(r)] for i in range(r): for j in range(c): if (i % 2 == 0 and j % 2 == 0) or (i % 2 == 1 and j % 2 == 1): matrix[i][j] = 1 return matrix def solve(t, test_cases): results = [] for r, c in test_cases: matrix = create_light_pattern(r, c) results.append(matrix) return results"},{"question":"You are given two sequences of integers, `A` and `B`, both of length `n`. An integer `k` is considered special if, for every integer `ai` in `A` and every integer `bi` in `B`, `ai` modulo `k` equals `bi` modulo `k`. In other words, for all valid indices i, the remainders of `ai` and `bi` when divided by `k` should be equal. Your task is to determine the largest special integer `k`. The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the length of the sequences. The second line contains `n` integers `A1, A2, ..., An` (0 ≤ Ai < 10^9) — the elements of the sequence `A`. The third line contains `n` integers `B1, B2, ..., Bn` (0 ≤ Bi < 10^9) — the elements of the sequence `B`. Print the largest possible special integer `k`. If no such special integer exists, print `-1`.","solution":"def largest_special_k(n, A, B): Finds the largest special k such that for every ai in A and bi in B: ai % k == bi % k # Compute the differences between corresponding elements of A and B diffs = [abs(A[i] - B[i]) for i in range(n)] # Function to compute the greatest common divisor def gcd(x, y): while y: x, y = y, x % y return x # Find the gcd of all differences common_gcd = diffs[0] for diff in diffs[1:]: common_gcd = gcd(common_gcd, diff) if common_gcd == 1: # Early exit if gcd becomes 1 break return common_gcd # Example usage: # print(largest_special_k(3, [1, 2, 3], [3, 4, 5])) # Output should be 2"},{"question":"You have an array of integers of length n. Your task is to find the length of the longest subarray such that the product of its elements is not greater than a given integer k. Formally, you need to find the largest length l such that there exists a subarray of length l with the product of its elements not exceeding k. The first line contains two integers n and k (1 leq n leq 1000, 1 leq k leq 10^{18}). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6). Output a single integer representing the length of the longest subarray with the product of its elements not greater than k. If no such subarray exists, output 0.","solution":"def longest_subarray_with_product_not_greater_than_k(n, k, arr): Returns the length of the longest subarray with product of elements not greater than k. left = 0 right = 0 max_length = 0 current_product = 1 for right in range(n): current_product *= arr[right] while left <= right and current_product > k: current_product /= arr[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are a scientist working with DNA sequences, represented as strings consisting of the characters \'A\', \'C\', \'G\', and \'T\'. You have a DNA sequence and several pattern sequences, and your task is to determine how many times each pattern appears in the DNA sequence. Given a DNA sequence of length ( n ) and ( m ) patterns, write a program to count the occurrences of each pattern in the DNA sequence. The first line of input contains two space-separated integers ( n ) and ( m ) (1 ≤ ( n ) ≤ 10^5, 1 ≤ ( m ) ≤ 10^3), representing the length of the DNA sequence and the number of patterns, respectively. The second line contains a string of length ( n ) consisting of \'A\', \'C\', \'G\', and \'T\', representing the DNA sequence. The following ( m ) lines each contain a string representing a pattern to search for in the DNA sequence. The length of each pattern does not exceed 10. Output ( m ) lines, each containing a single integer representing the number of times the corresponding pattern appears in the DNA sequence. **Example:** **Input:** ``` 12 3 ACGTACGTACGT AC CGT G ``` **Output:** ``` 3 3 3 ```","solution":"def count_patterns_occurrences(dna, patterns): Counts the occurrences of each pattern in the DNA sequence. Args: dna (str): DNA sequence. patterns (list of str): List of patterns to be searched in the DNA sequence. Returns: list of int: List with the count of occurrences of each pattern. counts = [] for pattern in patterns: # Count the occurrences of `pattern` in `dna` count = dna.count(pattern) counts.append(count) return counts"},{"question":"A group of archaeologists is trying to decode an ancient script. They believe the script is a form of encryption using numbers. Each page of the script has a unique number associated with it, and this number can be derived using a very specific method based on prime numbers. Here is the method: 1. List all prime numbers in the range from 1 to a given number \'N\' (inclusive). 2. Multiply all the prime numbers together to form a single product called the \\"prime product\\". However, the script sometimes gives clues by providing a number \'X\' which is the \\"prime product\\" for some range from 1 to N. The archaeologists need to figure out \'N\'. Given \'Q\' such clue numbers, your task is to determine the largest possible value of \'N\' for each clue such that the product of all prime numbers from 1 to N is equal to or just below the given number \'X\'. Input The first line of the input contains a single integer \'Q\' (1 le Q le 100), the number of clues. Each of the following \'Q\' lines contains a single integer \'X\' (1 le X le 10^{18}), the clue number representing the \\"prime product\\". Output For each clue number \'X\', print the largest possible integer \'N\' on a new line. Example Input: 3 2 6 30 Output: 2 3 5 Explanation: For the first clue, the product of primes up to 2 is just 2, so N=2. For the second clue, the product of primes up to 3 (2*3) is 6, so N=3. For the third clue, the product of primes up to 5 (2*3*5) is 30, so N=5. Note: You can assume that there is always at least one prime number in the range from 1 to N for the given \'X\'.","solution":"def find_largest_N(prime_product): def sieve(n): is_prime = [True] * (n+1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n+1, p): is_prime[i] = False p += 1 return [p for p in range(2, n+1) if is_prime[p]] def calculate_largest_N(X): primes = sieve(100) # primes up to 100 product, N = 1, 0 for prime in primes: if product * prime > X: break product *= prime N = prime return N results = [] for X in prime_product: results.append(calculate_largest_N(X)) return results"},{"question":"Farmer Joe has a rectangular barn, which is represented as a grid of size n x m. Each cell in the grid is either empty or contains a haystack. Joe wants to move all haystacks to a single target cell using the minimum number of moves. A move consists of moving a haystack from one cell to an adjacent cell (up, down, left, right). Given the initial positions of all haystacks and the dimensions of the barn, determine the minimum number of moves required to gather all haystacks into one cell. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid respectively. The next n lines each contain m characters, each being \'.\' (representing an empty cell) or \'H\' (representing a haystack). Output the minimum number of moves needed. Example: Input: 3 3 H.. .H. ..H Output: 4","solution":"def min_moves_to_gather_haystacks(n, m, grid): haystacks = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'H\'] def total_moves_to_target(target_i, target_j): return sum(abs(hi - target_i) + abs(hj - target_j) for hi, hj in haystacks) min_moves = float(\'inf\') for i in range(n): for j in range(m): min_moves = min(min_moves, total_moves_to_target(i, j)) return min_moves"},{"question":"You are given a list of names of students and their scores in three subjects: Mathematics, Science, and Literature. Each student has exactly one score per subject. Your task is to determine the top-performing student based on the total scores across all subjects. If there is a tie between students having the highest total score, select the student who comes first alphabetically. The first line of input contains an integer n (1 le n le 10^5) — the number of students. The following n lines each contain a string name (a student\'s name consisting of Latin letters, with a maximum length of 100 characters), followed by three integers math, science, and literature (0 le math, science, literature le 1000). Output the name of the top-performing student. # Example: Input: ``` 4 Alice 90 95 80 Bob 85 90 82 Charlie 95 85 90 David 95 85 90 ``` Output: ``` Charlie ``` In this example, both Charlie and David have the highest total score of 270, but Charlie comes first alphabetically, hence the output is \\"Charlie\\".","solution":"def top_student(n, students): Determines the top-performing student based on the total scores across all subjects. In case of a tie, selects the student who comes first alphabetically. :param n: int, number of students :param students: list of tuples, where each tuple contains a student\'s name and their scores in math, science, and literature :return: string, name of the top-performing student top_student = (\\"\\", -1) # Hold the name and total score of the top student for student in students: name, math, science, literature = student total_score = math + science + literature # Check if this student has a higher score or comes first alphabetically in case of tie if (total_score > top_student[1]) or (total_score == top_student[1] and name < top_student[0]): top_student = (name, total_score) return top_student[0]"},{"question":"You are given an integer array `arr` of length `n` and an integer `k`. You need to find the maximum possible sum of any subarray of length `k` in `arr`. A subarray is a contiguous part of an array. If `k` is greater than the length of the array, return `-1`. Write a function `maxSubarraySum` that takes an integer array `arr` and an integer `k`, and returns the maximum possible sum of any subarray of length `k`. If `k` is greater than the length of the array, return `-1`. **Input:** - An integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - An integer `k` (1 ≤ k ≤ 10^5) — the length of the subarray. - An array `arr` of `n` integers where each integer is in the range `-10^4` to `10^4`. **Output:** - A single integer — the maximum possible sum of any subarray of length `k`, or `-1` if `k` is greater than the length of the array. **Example:** ```python def maxSubarraySum(arr, k): n = len(arr) if k > n: return -1 max_sum = -float(\'inf\') current_sum = sum(arr[:k]) max_sum = max(max_sum, current_sum) for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum # Example usage arr = [1, 2, 3, 4, 5] k = 3 print(maxSubarraySum(arr, k)) # Output: 12 arr = [5, 4, -1, 7, 8] k = 2 print(maxSubarraySum(arr, k)) # Output: 15 arr = [2, 1, 5, 1, 3, 2] k = 3 print(maxSubarraySum(arr, k)) # Output: 9 ``` **Constraints:** - The sum of `n` over all test cases does not exceed `10^5`. - It is guaranteed that the input array contains at least `k` elements if `k` is within the bounds.","solution":"def maxSubarraySum(arr, k): Returns the maximum possible sum of any subarray of length k, or -1 if k is greater than the length of the array. n = len(arr) if k > n: return -1 # Calculate the sum of the first window of size k current_sum = sum(arr[:k]) max_sum = current_sum # Use sliding window technique to find the maximum sum of any subarray of length k for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A company\'s software application logs activities of users on their platform and stores them in a list of tuples, where each tuple contains a user ID, action, and timestamp. The actions can be either \\"login\\" or \\"logout\\". Each user can perform multiple actions, but for valid entries, each \\"login\\" should eventually be followed by a \\"logout\\" before a new \\"login\\" action can be recorded. You are tasked to write a function that will analyze the log and determine the total active time spent by each user during their sessions. A session is defined as the duration between a \\"login\\" and the subsequent \\"logout\\". Write a function `calculate_active_time(logs: List[Tuple[int, str, int]]) -> Dict[int, int]` that takes a list of tuples as input. Each tuple contains three elements: user ID (an integer), action (a string), and timestamp (an integer). The function should return a dictionary where the keys are user IDs and the values are the total active times in seconds for the respective users. # Input - A list of tuples `logs`: - `logs` is a list of `n` tuples, where each tuple contains: - An integer `user_id` (1 ≤ `user_id` ≤ 10^4) - the ID of the user performing the action. - A string `action` - the type of action, which can be either \\"login\\" or \\"logout\\". - An integer `timestamp` (1 ≤ `timestamp` ≤ 10^9) - the Unix timestamp of the action. # Output - A dictionary where: - The keys are user IDs. - The values are integers representing the total active time in seconds for that user. # Example Input ```python logs = [ (1, \\"login\\", 1609459200), (1, \\"logout\\", 1609462800), (2, \\"login\\", 1609459200), (2, \\"logout\\", 1609466400), (1, \\"login\\", 1609470000), (1, \\"logout\\", 1609473600) ] ``` Output ```python {1: 7200, 2: 7200} ``` Explanation: - User 1: - First session: from 1609459200 to 1609462800 (1 hour - 3600 seconds) - Second session: from 1609470000 to 1609473600 (1 hour - 3600 seconds) - Total active time = 3600 + 3600 = 7200 seconds - User 2: - Only one session: from 1609459200 to 1609466400 (2 hours - 7200 seconds) - Total active time = 7200 seconds","solution":"def calculate_active_time(logs): Calculate the total active time for each user based on the logs. Args: logs (List[Tuple[int, str, int]]): List of tuples containing user actions with timestamps. Returns: Dict[int, int]: Dictionary with user IDs as keys and total active time in seconds as values. active_time = {} session_start = {} for log in logs: user_id, action, timestamp = log if action == \\"login\\": session_start[user_id] = timestamp elif action == \\"logout\\": if user_id in session_start: duration = timestamp - session_start[user_id] if user_id in active_time: active_time[user_id] += duration else: active_time[user_id] = duration del session_start[user_id] return active_time"},{"question":"A company has a database of employees where each employee has a unique ID, their name, age, and salary. Your task is to write a program that helps to sort and filter this data based on given criteria. # Input The first line of input contains the integer n (1 ≤ n ≤ 5000) - the number of employees. The next n lines each contain four values: employee ID (a unique positive integer), name (a non-empty string consisting of uppercase and lowercase Latin letters, the length does not exceed 30 characters), age (a positive integer between 18 and 65 inclusive), and salary (a positive integer between 1000 and 100000 inclusive). The final line contains three values: an attribute by which to sort (a string which is either \\"id\\", \\"name\\", \\"age\\", or \\"salary\\"), an order of sorting (a string which is either \\"asc\\" for ascending or \\"desc\\" for descending), and a filtering criterion (a string in the format \\"age>30\\" or \\"salary<50000\\" or \\"none\\" if no filter is applied). # Output Output should be the sorted and filtered list of employees\' names, one per line, following the sorting and filtering criteria. If no employees meet the filtering criterion, print \\"NO EMPLOYEES\\". # Example Input ``` 4 1 Alice 24 5000 2 Bob 30 7000 3 Charlie 35 10000 4 David 40 3000 name asc age>30 ``` Output ``` Charlie David ``` Input ``` 3 1 Alice 24 5000 2 Bob 30 7000 3 Charlie 35 10000 id desc salary<8000 ``` Output ``` Bob Alice ```","solution":"def filter_and_sort_employees(n, employees, sort_by, order, filter_criteria): def apply_filter(employee, filter_criteria): if filter_criteria == \'none\': return True if \'>\' in filter_criteria: field, value = filter_criteria.split(\'>\') return int(employee[field]) > int(value) elif \'<\' in filter_criteria: field, value = filter_criteria.split(\'<\') return int(employee[field]) < int(value) return False employees_list = [] for emp in employees: emp_dict = { \'id\': int(emp[0]), \'name\': emp[1], \'age\': int(emp[2]), \'salary\': int(emp[3]) } employees_list.append(emp_dict) filtered_employees = [emp for emp in employees_list if apply_filter(emp, filter_criteria)] if order == \'asc\': sorted_employees = sorted(filtered_employees, key=lambda x: x[sort_by]) else: sorted_employees = sorted(filtered_employees, key=lambda x: x[sort_by], reverse=True) if not sorted_employees: return [\\"NO EMPLOYEES\\"] return [emp[\'name\'] for emp in sorted_employees]"},{"question":"Milena is an enthusiastic collector of unique items. She maintains a list of her items sorted in increasing order of their values. Each item has a distinct value which is an integer. One day, Milena decided to play a game. From her sorted list of item values, she picks two values a and b such that a < b, and calculates the sum of values between them, but not including a and b. Milena is interested in finding the maximum sum she can obtain by choosing different pairs (a, b) from her list. You are given the sorted list of values of Milena\'s items and your task is to find this maximum sum of values between two chosen items. The first line of the input contains an integer n (3 ≤ n ≤ 100,000) — the number of items in Milena\'s collection. The second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 10^9) which are the values of the items. Output a single integer — the maximum possible sum of values between two chosen items in the list. # Example **Input** ``` 5 1 3 6 10 15 ``` **Output** ``` 19 ``` **Explanation** In the example given, the sum of values between the pairs (1, 15) is 3 + 6 + 10 = 19, which is the maximum sum possible.","solution":"def max_sum_between_items(n, values): Returns the maximum sum of values between two chosen items in the list. # Sum of all values from the second to the second-last element return sum(values[1:-1])"},{"question":"Given an integer n, you need to determine the minimum number of operations to reduce it to 1 using the following operations: 1. If n is even, divide it by 2. 2. If n is odd, you can either subtract 1 from it or add 1 to it. Write a program to determine the minimum number of operations required to reduce the given number n to 1. The input consists of a single integer n (1 ≤ n ≤ 10^9). Output a single integer representing the minimum number of operations to reduce n to 1. # Example Input 25 Output 6 Explanation - 25 is odd, subtract 1 (25 - 1 = 24) - 24 is even, divide by 2 (24 / 2 = 12) - 12 is even, divide by 2 (12 / 2 = 6) - 6 is even, divide by 2 (6 / 2 = 3) - 3 is odd, subtract 1 (3 - 1 = 2) - 2 is even, divide by 2 (2 / 2 = 1) Therefore, the minimum number of operations is 6.","solution":"def min_operations_to_one(n): Returns the minimum number of operations to reduce the number n to 1. operations = 0 while n > 1: if n % 2 == 0: n //= 2 else: # Prefer subtraction when n is 3 or n - 1 has fewer 1\'s in binary representation if n == 3 or ((n - 1) & (n - 2)) <= ((n + 1) & n): n -= 1 else: n += 1 operations += 1 return operations"},{"question":"You are given an array of integers `arr` of length `n`. You can perform the following operation several times on the array: 1. Choose any subarray where all the elements are the same. 2. Remove this subarray from the array and concatenate the remaining parts (if any). For example, if the array is `[3, 3, 2, 2, 2, 4]`, you can choose the subarray `[2, 2, 2]` and remove it to get `[3, 3, 4]`. Your task is to find the minimum possible length of the array after performing any number of such operations optimally. # Input - The first line contains an integer `n` (`1 ≤ n ≤ 100`) — the length of the array. - The second line contains `n` integers `arr[i]` (`1 ≤ arr[i] ≤ 100`) — the elements of the array. # Output - Print a single integer — the minimum possible length of the array after performing the operations optimally. # Example Input ``` 6 3 3 2 2 2 4 ``` Output ``` 2 ``` Explanation: One possible sequence of operations is to remove the subarray `[2, 2, 2]`, resulting in `[3, 3, 4]`. The minimal length achievable by any sequence of operations in this case is `2`.","solution":"def min_possible_length(n, arr): Finds the minimum possible length of the array after performing operations optimally. Parameters: n (int): The length of the array arr (list): List of integers Returns: int: The minimum possible length of the array if n == 0: return 0 distinct_blocks = 1 for i in range(1, n): if arr[i] != arr[i-1]: distinct_blocks += 1 return distinct_blocks"},{"question":"You are given two strings, `a` and `b`, both of which consist only of lowercase English letters. Your task is to determine the length of the longest subsequence that appears in both strings. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The first line of input contains a single integer `T` (1 ≤ T ≤ 100), the number of test cases. Each of the next `T` lines contains two space-separated strings `a` and `b` (1 ≤ |a|, |b| ≤ 100), the input strings for each test case. For each test case, output a single integer — the length of the longest common subsequence of strings `a` and `b`. # Sample Input ``` 3 abcde ace abc def abcdef abcdef ``` # Sample Output ``` 3 0 6 ``` # Explanation 1. For the first test case, the longest common subsequence is \\"ace\\", which has length 3. 2. For the second test case, the two strings do not share any subsequence longer than 0. 3. For the third test case, the entire strings are identical, so the longest common subsequence has length 6.","solution":"def longest_common_subsequence(a, b): Returns the length of the longest common subsequence of strings a and b. m = len(a) n = len(b) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from the bottom up. for i in range(1, m + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_test_cases(test_cases): results = [] for a, b in test_cases: results.append(longest_common_subsequence(a, b)) return results"},{"question":"Farmer John has a large farm with several fields arranged in a grid of n rows and m columns. Each field can be either fertile, barren, or contain an obstacle. The objective is to plow from a given starting point to a destination point, avoiding obstacles and barren fields. Farmer John can only plow through fertile fields, and he can move up, down, left, or right to adjacent fertile fields. The goal is to determine the shortest distance from the starting point to the destination point. If the destination cannot be reached, return -1. The input contains the following: - The first line contains four integers n, m, xs, ys (1 ≤ n, m ≤ 1000) and (1 ≤ xs, ys ≤ n, m) — the dimensions of the farm grid and the coordinates of the starting point. - The second line contains two integers xd, yd (1 ≤ xd, yd ≤ n, m) — the coordinates of the destination point. - The next n lines contain m characters each — the grid representation of the farm. Each character is either \'.\' (fertile), \'#\' (obstacle), or \'*\' (barren). Print a single integer — the shortest distance to plow from the starting point to the destination point, or -1 if it is impossible to reach the destination. Example: Input: 4 4 1 1 3 3 . . # . . * . . . . . # # . . . Output: 4","solution":"from collections import deque def shortest_path(n, m, xs, ys, xd, yd, farm): Returns the shortest distance from (xs, ys) to (xd, yd) in the farm grid. Returns -1 if the destination cannot be reached. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(xs-1, ys-1, 0)]) # Convert to 0-indexed coordinates and add initial distance 0 visited = set() visited.add((xs-1, ys-1)) while queue: x, y, dist = queue.popleft() if (x, y) == (xd-1, yd-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and farm[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Example usage: # farm = [ # [\'.\', \'.\', \'#\', \'.\'], # [\'.\', \'*\', \'.\', \'.\'], # [\'.\', \'.\', \'.\', \'#\'], # [\'#\', \'.\', \'.\', \'.\'] # ] # print(shortest_path(4, 4, 1, 1, 3, 3, farm)) # Output: 4"},{"question":"John is an avid fan of number sequences. He particularly loves sequences where the sum of any two consecutive elements is distinct. For example, [1, 2, 4, 7] is such a sequence (since 1+2=3, 2+4=6, and 4+7=11 are all distinct sums). Given an integer n, John wants you to create a sequence of length n where the sum of any two consecutive elements is distinct and all elements are positive integers. The only line of input contains a single integer n (1 ≤ n ≤ 1000). Output n integers representing the sequence. The sequence should meet the criteria that the sum of any two consecutive elements is distinct. If there are multiple valid sequences, you may output any of them. Example: Input: 5 Output: 1 2 4 7 11 In the example above, the sequence is [1, 2, 4, 7, 11] and the sums of consecutive elements are 3, 6, 11, and 18, which are all distinct.","solution":"def generate_distinct_sum_sequence(n): Generates a sequence of length n where the sum of any two consecutive elements is distinct. sequence = [] current = 1 for i in range(n): sequence.append(current) current += i + 1 return sequence"},{"question":"Given two positive integers n and m, where n represents the number of students and m represents the number of subjects. For each student, you are provided with their marks for each subject in the form of a 2D array. Your task is to determine for each student if their marks in each subject improve as they move from the first subject to the last. A student\'s marks are considered to improve if each subsequent subject\'s mark is greater than or equal to the previous subject\'s mark. The first line contains two integers n and m (1 le n, m le 100) — the number of students and the number of subjects. The next n lines each contain m integers representing the marks of the students in each subject. Output n lines, each containing \\"YES\\" if the student\'s marks improved as described, otherwise \\"NO\\". Example: Input: ``` 3 4 25 35 45 55 30 30 30 30 10 20 19 30 ``` Output: ``` YES YES NO ```","solution":"def check_marks_improvement(n, m, marks): results = [] for student_marks in marks: improved = True for i in range(1, m): if student_marks[i] < student_marks[i-1]: improved = False break if improved: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage marks = [ [25, 35, 45, 55], [30, 30, 30, 30], [10, 20, 19, 30] ] print(check_marks_improvement(3, 4, marks)) # [\'YES\', \'YES\', \'NO\']"},{"question":"Given a grid of size n x m filled with integers, you are required to perform a series of operations to make all the integers in the grid the same. In each operation, you can select any subrectangle of the grid and increment each of its elements by 1. You need to determine the minimum number of operations required to achieve the goal. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. - The next n lines contain m integers each, representing the initial values of the grid cells. # Output - Print a single integer — the minimum number of operations required to make all the integers in the grid the same. # Example Input ``` 2 3 1 2 3 4 3 2 ``` Output ``` 3 ``` Input ``` 3 3 3 3 3 3 3 3 3 3 3 ``` Output ``` 0 ``` # Explanation In the first example, you can follow these steps to make all elements of the grid equal: 1. Increment the subrectangle covering the last row and the first two columns by 1. 2. Increment the entire grid by 1. 3. Increment the entire grid by 1 again. After these 3 operations, all elements of the grid are 5. In the second example, no operations are needed because all elements are already the same.","solution":"def min_operations_to_make_uniform(grid): Returns the minimum number of operations required to make all the integers in the grid the same. max_val = max(max(row) for row in grid) min_val = min(min(row) for row in grid) if max_val == min_val: return 0 return max_val - min_val def process_grid(n, m, grid): return min_operations_to_make_uniform(grid)"},{"question":"Alice wants to organize her bookshelf. She has a series of books lined up in a row. Each book has a width and a height. Alice wants to sort the books first by their heights in non-decreasing order and in case of a tie, by their widths in non-decreasing order. Write a function that takes an integer array `heights` and an integer array `widths` as input. Each element in `heights` and `widths` represents the height and width of a book respectively. Your task is to return a list of tuples representing the heights and widths of the books sorted accordingly. Your code should have the following signature: ```python def sort_books(heights: List[int], widths: List[int]) -> List[Tuple[int, int]]: ``` # Input - `heights` and `widths` are lists of integers, where 1 ≤ len(heights) = len(widths) ≤ 10^5. - 1 ≤ heights[i] ≤ 10^9. - 1 ≤ widths[i] ≤ 10^9. # Output Return a list of tuples `[(h1, w1), (h2, w2), ...]` representing the heights and widths of the books sorted accordingly. # Example Input: ```python heights = [3, 1, 2, 2] widths = [4, 2, 3, 1] ``` Output: ```python [(1, 2), (2, 1), (2, 3), (3, 4)] ``` # Note In the given example, the books are first sorted by height and where the heights are equal, by their respective widths.","solution":"from typing import List, Tuple def sort_books(heights: List[int], widths: List[int]) -> List[Tuple[int, int]]: Sort the books by their heights in non-decreasing order. In case of a tie, sort by their widths in non-decreasing order. books = list(zip(heights, widths)) books.sort(key=lambda x: (x[0], x[1])) return books"},{"question":"Given a string s consisting of lowercase Latin letters, determine whether it can be transformed into a palindrome by removing at most one character. A palindrome is a word that reads the same backward as forward. The first line contains the string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. If it\'s possible to make the string a palindrome by removing at most one character, print \\"YES\\". Otherwise, print \\"NO\\". # Input Format - The first line contains the string s (1 ≤ |s| ≤ 10^5). # Output Format - Output \\"YES\\" if it\'s possible to transform the string into a palindrome by removing at most one character. - Otherwise, output \\"NO\\". # Example Example 1 **Input:** ``` abca ``` **Output:** ``` YES ``` Explanation: - Removing the character \'b\' results in the string \\"aca\\", which is a palindrome. - Removing the character \'c\' results in the string \\"aba\\", which is a palindrome. Example 2 **Input:** ``` abc ``` **Output:** ``` NO ``` Explanation: - No removal of a single character can make the string \\"abc\\" a palindrome.","solution":"def can_be_palindrome_by_removing_one_char(s): Determine if we can make the string a palindrome by removing at most one character. def is_palindrome_range(i, j): return all(s[x] == s[j-x+i] for x in range(i, j//2+1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1) left += 1 right -= 1 return True"},{"question":"Victor is building a computer simulation game involving magical creatures. At the start, there are `n` caves arranged in a straight line, numbered from 1 to `n`. Each cave initially has some number of magical creatures. The simulation runs sequential events where magical creatures can either move or multiply. Your task is to predict the state of the caves after a series of events. Events are of three types: - Type 1: \\"1 l r\\" — This event means that all magical creatures in caves from position `l` to `r` inclusive will double their number. - Type 2: \\"2 l r\\" — This event signifies that all magical creatures in cave `l` move to cave `r`, and the count in cave `l` becomes 0. - Type 3: \\"3 l\\" — For this event, output the number of magical creatures in cave `l`. The first line of input contains two integers, `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of caves and the number of events, respectively. The second line contains `n` integers, `m1, m2, ..., mn` (1 ≤ mi ≤ 10^9) — the initial number of magical creatures in each cave. The next `q` lines describe the events. For each event of the third type, print the number of magical creatures in the corresponding cave on a separate line. **Example:** ``` Input: 5 4 5 3 8 6 2 1 2 4 2 4 5 3 3 3 5 Output: 16 12 ``` In this example: - Initially, caves have 5, 3, 8, 6, 2 magical creatures respectively. - After the first event (`1 2 4`), caves have 5, 6, 16, 12, 2 creatures respectively. - After the second event (`2 4 5`), caves have 5, 6, 16, 0, 14 creatures respectively. - The third event (`3 3`) asks for creatures in cave 3, which is 16. - The fourth event (`3 5`) asks for creatures in cave 5, which is 12.","solution":"def simulate_caves(n, q, initial_creatures, events): caves = initial_creatures.copy() result = [] for event in events: parts = event.split() event_type = int(parts[0]) if event_type == 1: l, r = int(parts[1]) - 1, int(parts[2]) - 1 for i in range(l, r + 1): caves[i] *= 2 elif event_type == 2: l, r = int(parts[1]) - 1, int(parts[2]) - 1 caves[r] += caves[l] caves[l] = 0 elif event_type == 3: l = int(parts[1]) - 1 result.append(caves[l]) return result"},{"question":"In the distant future, space mining has become a prevalent industry. The YZ Mining Corporation has established a network of mining outposts on various asteroids. Each outpost is connected by a series of transport links that allow for the transfer of mined resources between them. However, the efficiency of resource transport varies depending on the routes taken. The company wants to ensure that resources can be transferred between the most distant outposts in the shortest possible time. To achieve this, they need to determine the shortest path between the two most distant outposts in their network. Given a list of outposts and their transport links, your task is to find the shortest path between the two outposts that are farthest apart in terms of direct Euclidean distance. The first line of input contains an integer n (2 leq n leq 1000), representing the number of outposts. The next n lines each contain two integers x_i and y_i (0 leq x_i, y_i leq 10^9), representing the coordinates of the i-th outpost. The next line contains an integer m (1 leq m leq 5000), representing the number of transport links. The next m lines each contain three integers u, v, and t (1 leq u, v leq n, u neq v, and 1 leq t leq 1000), representing a transport link between the u-th and v-th outposts with a transport time of t minutes. Output the minimum time required to travel between the two most distant outposts. If there are multiple pairs of outposts with the same maximum Euclidean distance, find the shortest path for any one of those pairs. **Example Input:** ``` 4 0 0 0 3 4 0 4 3 5 1 2 2 2 4 3 4 3 2 3 1 5 2 3 1 ``` **Example Output:** ``` 5 ``` In this example, the input describes 4 outposts with their coordinates and 5 transport links with their respective travel times. The output is the minimum time required to travel between the two outposts that are farthest apart.","solution":"import heapq import math def find_shortest_path(n, coordinates, m, links): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) # Function to find farthest pair of points def find_farthest_pair(coordinates): max_dist = -1 farthest_pair = (0, 0) for i in range(len(coordinates)): for j in range(i + 1, len(coordinates)): dist = euclidean_distance(coordinates[i], coordinates[j]) if dist > max_dist: max_dist = dist farthest_pair = (i, j) return farthest_pair # Construct the graph graph = {i: [] for i in range(n)} for u, v, t in links: graph[u - 1].append((v - 1, t)) graph[v - 1].append((u - 1, t)) # Find the farthest pair of outposts u, v = find_farthest_pair(coordinates) # Dijkstra\'s algorithm to find the shortest path in a weighted graph def dijkstra(start): distances = {i: float(\\"inf\\") for i in range(n)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances dist_from_u = dijkstra(u) return dist_from_u[v] # Example Usage n = 4 coordinates = [(0, 0), (0, 3), (4, 0), (4, 3)] m = 5 links = [(1, 2, 2), (2, 4, 3), (4, 3, 2), (3, 1, 5), (2, 3, 1)] print(find_shortest_path(n, coordinates, m, links)) # Output: 5"},{"question":"**The Wandering Knight** Alice is a knight in a chess puzzle game. The chessboard is a square grid of size `n x n`, and the knight starts at position `(1, 1)` (the top-left corner). Each move must follow the knight\'s usual L-shaped pattern: two squares in one direction and one in a perpendicular direction, or vice versa. Alice\'s goal is to reach the opposite corner of the board, `(n, n)` (the bottom-right corner). Given the size of the chessboard `n`, determine the fewest number of moves required for Alice to reach the target square `(n, n)`. If it\'s not possible for the knight to reach the target square, return `-1`. **Input:** The first line of input contains a single integer `t` (1 ≤ t ≤ 1000) denoting the number of test cases. The next `t` lines each contain a single integer `n` (1 ≤ n ≤ 1000), representing the size of the chessboard. **Output:** For each test case, output a single integer: the minimum number of moves required for Alice to reach the bottom-right corner of the chessboard, or `-1` if the target is unreachable. **Example:** Input: ``` 3 1 2 3 ``` Output: ``` 0 -1 4 ``` **Explanation:** - In the first test case, Alice starts at the target position, so no moves are needed. - In the second test case, it\'s impossible for a knight to reach `(2, 2)` from `(1, 1)`. - In the third test case, the minimum number of moves from `(1, 1)` to `(3, 3)` is 4.","solution":"def min_knight_moves(t, sizes): results = [] for n in sizes: if n == 1: results.append(0) elif n == 2: results.append(-1) elif n == 3: results.append(2) elif n % 2 == 1: results.append(n - 1) else: results.append(n) return results"},{"question":"In a dense forest, a scientist has been tracking the movement of a species of migratory birds. The birds rest at specific spots along a path. Each spot is represented by a coordinate on a 2D plane. The scientist observes that whenever the birds travel directly from one resting spot to another, they follow a straight line. The scientist wants to determine if there exists a set of collinear resting spots such that at least three spots lie on the same straight line. Write a program to help the scientist determine if there are at least three collinear points among the given set of resting spots. The first line contains an integer n (1 ≤ n ≤ 300) – the number of resting spots. Each of the next n lines contains two integers x and y (-10^4 ≤ x, y ≤ 10^4) – the coordinates of a resting spot. Output \\"YES\\" if there exist at least three collinear points. Otherwise, output \\"NO\\". In the first sample, the points (1, 1), (2, 2) and (3, 3) are collinear, so the answer is \\"YES\\". In the second sample, no three points lie on the same straight line, so the answer is \\"NO\\".","solution":"def are_points_collinear(n, coordinates): def on_same_line(p1, p2, p3): # Check if three points (p1, p2, p3) are collinear using the cross product method return (p2[1] - p1[1]) * (p3[0] - p1[0]) == (p3[1] - p1[1]) * (p2[0] - p1[0]) for i in range(n): for j in range(i + 1, n): count = 2 # Two points (i, j) are initially assumed to be collinear for k in range(j + 1, n): if on_same_line(coordinates[i], coordinates[j], coordinates[k]): count += 1 if count >= 3: return \\"YES\\" return \\"NO\\""},{"question":"In a small village, people rely on a network of water pipes to supply drinking water. The village has `n` houses, numbered from 1 to `n`, and `m` pipes. Each pipe connects exactly two different houses. The water is supplied from house number 1. The cost of supplying water through each pipe is already known, but due to some government policy, some pipes have a maintenance fee that needs to be paid every day to keep them functional. Over time, if the maintenance fees are not paid, those pipes will stop working. You need to determine the minimum cost to supply water from house 1 to all other houses if all pipes are initially working. You are given the costs and the maintenance fees of each pipe. The first line contains two integers `n` and `m` (2 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000) — the number of houses and the number of pipes. The next `m` lines each contain four integers `u`, `v`, `w`, and `f` (1 ≤ u, v ≤ n, 1 ≤ w, f ≤ 10^9), describing a pipe between house `u` and house `v`, with a cost of `w` and a maintenance fee of `f`. Your task is to find the minimum initial cost to supply water from house 1 to all houses, assuming maintenance fees don\'t matter initially. If it is impossible to supply water to all houses, print \\"impossible\\". Consider the example below. ``` Input: 5 6 1 2 4 2 1 3 2 3 2 3 1 1 2 4 5 2 3 4 8 2 3 5 6 3 Output: 14 ``` In this example, the minimum initial cost to supply water from house 1 to all houses is 14 (1-3, 2-3, 3-5). Print a single integer equal to the minimum cost or the word \\"impossible.\\"","solution":"import heapq def min_cost_to_supply_water(n, m, pipes): graph = [[] for _ in range(n + 1)] for u, v, w, f in pipes: graph[u].append((w, v)) graph[v].append((w, u)) total_cost = 0 visited = [False] * (n + 1) min_heap = [(0, 1)] # (cost, house) starting from house 1 while min_heap: cost, house = heapq.heappop(min_heap) if visited[house]: continue visited[house] = True total_cost += cost for next_cost, next_house in graph[house]: if not visited[next_house]: heapq.heappush(min_heap, (next_cost, next_house)) if all(visited[1:]): return total_cost else: return \\"impossible\\""},{"question":"The problem Given a string of lowercase English letters, your task is to find the length of the longest substring that contains at most two distinct characters. A substring is a contiguous sequence of characters within the string. # Input: - A single string s (1 ≤ |s| ≤ 10^5) which consists of lowercase English letters. # Output: - Print a single integer denoting the length of the longest substring that contains at most two distinct characters. # Example: Example 1: ``` Input: abcabcabc Output: 2 Explanation: The longest substrings that contain at most two distinct characters are \\"ab\\", \\"bc\\", \\"ca\\". ``` Example 2: ``` Input: eceba Output: 3 Explanation: The longest substring that contains at most two distinct characters is \\"ece\\". ``` Example 3: ``` Input: aaa Output: 3 Explanation: The longest substring that contains at most two distinct characters is \\"aaa\\". ``` # Note: - You need to efficiently handle large inputs as specified in the constraints. - Think about how you can use the sliding window technique to solve this problem.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 3: return n # Sliding window left and right pointers left, right = 0, 0 # Hashmap character -> its rightmost position in the sliding window hashmap = {} max_len = 2 while right < n: # Add character to hashmap and move right pointer hashmap[s[right]] = right right += 1 # If there are more than 2 distinct characters if len(hashmap) == 3: # Delete the leftmost character to make room for the new character del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are given a string consisting of lowercase English letters. You are allowed to perform the following operation any number of times: Select any character in the string and move it to either the beginning or the end of the string. Your task is to determine the lexicographically smallest string you can obtain by applying the above operation any number of times. The first line of input contains a single integer t (1 leq t leq 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 leq |s| leq 100) consisting of lowercase English letters. For each test case, print the lexicographically smallest string you can obtain. **Example:** ``` Input: 3 cba aabc dcab Output: abc aabc abcd ```","solution":"def lexicographically_smallest_string(t, strings): results = [] for s in strings: results.append(\\"\\".join(sorted(s))) return results"},{"question":"In a city, there are n people living in m zip codes. Each person belongs to exactly one zip code. We\'re given a list of requests, where each request asks for the most common zip code among a contiguous segment of people. You need to process the requests efficiently. The first line contains two integers n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100,000) – the number of people and the number of requests, respectively. The second line contains n integers z1, z2, ..., zn (1 ≤ zi ≤ m) – the zip codes of the people. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) – representing a range query asking for the most common zip code among the people from position li to position ri (inclusive). For each query, output the most common zip code in the range [li, ri]. If there are multiple zip codes with the same highest frequency, output the smallest zip code. # Example: Input: ``` 8 3 1 2 2 3 3 3 2 2 1 3 4 8 2 5 ``` Output: ``` 2 3 2 ``` # Explanation: - For the first query (1, 3) -> zip codes are [1, 2, 2]. The most common zip code is 2. - For the second query (4, 8) -> zip codes are [3, 3, 3, 2, 2]. The most common zip code is 3. - For the third query (2, 5) -> zip codes are [2, 2, 3, 3]. Both 2 and 3 occur twice, but 2 is smaller.","solution":"from collections import defaultdict, Counter class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree = [None] * (4 * self.n) self.build(0, 0, self.n - 1) def build(self, node, start, end): if start == end: self.tree[node] = Counter([self.data[start]]) else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(left_child, start, mid) self.build(right_child, mid + 1, end) self.tree[node] = self.tree[left_child] + self.tree[right_child] def query(self, L, R, node, start, end): if R < start or L > end: return Counter() if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_counter = self.query(L, R, left_child, start, mid) right_counter = self.query(L, R, right_child, mid + 1, end) return left_counter + right_counter def range_query(self, L, R): result = self.query(L, R, 0, 0, self.n - 1) max_count = max(result.values()) most_common_zip = min(zip_code for zip_code, count in result.items() if count == max_count) return most_common_zip def process_queries(n, q, zip_codes, queries): seg_tree = SegmentTree(zip_codes) results = [] for li, ri in queries: results.append(seg_tree.range_query(li - 1, ri - 1)) # Convert to zero-based indexing return results"},{"question":"Alice is organizing a coding competition and wants to distribute prizes to the top contestants in a unique way. She has a list of prize values and a list of contestant scores. Her goal is to maximize the sum of the prize values given out. However, each contestant can only receive one prize, and the prizes must be distributed to the contestants in such a way that the sum of the differences between their scores and the prize values they receive is minimized. The first line of input contains a single integer n (1 le n le 1000) — the number of contestants. The second line contains n integers c_1, c_2, ldots, c_n (1 le c_i le 1000) — the scores of the contestants. The third line contains n integers p_1, p_2, ldots, p_n (1 le p_i le 1000) — the values of the prizes. Output a single integer — the minimized sum of the absolute differences between contestant scores and the prizes they receive. # Example Input: 4 1 2 3 4 4 3 2 1 Output: 0 Explanation: One possible way to distribute the prizes is to match each contestant to the prize of the same value: (1,1), (2,2), (3,3), (4,4). The sum of the differences is 0.","solution":"def minimize_sum_of_differences(n, scores, prizes): Minimizes the sum of absolute differences between contestant scores and prize values. Args: n (int): Number of contestants scores (list of int): Scores of the contestants prizes (list of int): Values of the prizes Returns: int: The minimized sum of absolute differences # Sort both lists scores.sort() prizes.sort() # Calculate the minimized sum of absolute differences minimized_sum = sum(abs(scores[i] - prizes[i]) for i in range(n)) return minimized_sum"},{"question":"There is a large forest with many trees spread across a grid of cells, each containing some trees or being empty. Some cells contain one pine tree, and the rest are empty. One day, a strong storm hit the forest and blew down some trees, leaving empty cells. You need to design a program that determines if you can cut down additional trees in certain cells to make sure there are no two neighboring cells (sharing an edge) both containing trees. Here\'s the task: given the initial state of the forest after the storm, output a valid state of the forest where no two adjacent trees remain. Each test case consists of: - The first line contains two integers, n (1 ≤ n ≤ 500) and m (1 ≤ m ≤ 500), representing the number of rows and columns of the grid respectively. - Each of the next n lines contains m characters: \'T\' represents a cell with a tree, and \'.\' represents an empty cell. You need to print n lines for each test case, each containing m characters, representing the new state of the forest after cutting down trees. Your goal is to ensure no two neighboring cells both contain trees. If there are multiple solutions, any valid solution is acceptable. The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4), the number of test cases. It is guaranteed that the sum of n * m for all test cases does not exceed 250,000. Example Input: ``` 2 3 3 .T. T.T .T. 4 4 T.TT .TT. TT.T .TTT ``` Example Output: ``` .T. T.. .T. T.T. .T.. ..T. .T.T ```","solution":"def process_forest(t, test_cases): results = [] for case in test_cases: n, m, grid = case result = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'T\') else: row.append(\'.\') result.append(\'\'.join(row)) results.append(result) return results # Example usage def main(): import sys input = sys.stdin.read data = input().split() t_index = 0 t = int(data[t_index]) test_cases = [] t_index += 1 for _ in range(t): n = int(data[t_index]) m = int(data[t_index + 1]) t_index += 2 grid = [] for i in range(n): grid.append(data[t_index]) t_index += 1 test_cases.append((n, m, grid)) results = process_forest(t, test_cases) for result in results: for line in result: print(line) if __name__ == \\"__main__\\": main()"},{"question":"A well-known online retailer is preparing for a massive Black Friday sale, and they want to ensure their servers can handle the incoming traffic. They have a set of servers, each with a certain processing capacity. The load balancer will distribute incoming requests to the servers such that the maximum load on any server is minimized. You are given the number of servers, their respective capacities, and the number of incoming requests. Your objective is to distribute the requests across the servers such that the maximum number of requests any server gets assigned is as small as possible. The input consists of: - The first line contains two integers, s and r (1 le s le 200000, 1 le r le 200000) — the number of servers and the number of incoming requests. - The second line contains s integers c_1, c_2, ldots, c_s (1 le c_i le 10^9) — the processing capacities of each server. - The third line contains r integers req_1, req_2, ldots, req_r (1 le req_i le 10^9) — the processing demands of each incoming request. Output a single integer, the minimized maximum number of requests any server can be assigned after distributing all requests. # Sample Input ``` 3 5 10 20 30 5 5 10 15 20 ``` # Sample Output ``` 2 ``` In the sample input, there are three servers with capacities 10, 20, and 30, respectively, and five incoming requests with demands of 5, 5, 10, 15, and 20, respectively. The goal is to ensure that the maximum number of requests assigned to any server is minimized across all servers. Note: You don\'t need to consider the actual processing capacities and request demands in this problem, only the quantity of requests each server can take.","solution":"def min_max_requests_per_server(s, r, capacities, requests): def canDistribute(max_load): servers = [0] * s request_index = 0 for i in range(r): for j in range(s): if request_index < r and servers[j] + 1 <= max_load: servers[j] += 1 request_index += 1 if request_index >= r: break if request_index >= r: break return request_index == r left, right = 1, r while left < right: mid = (left + right) // 2 if canDistribute(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a string `s` consisting of lowercase English letters. A substring of `s` is any sequence of consecutive characters from `s`. For example, if `s = \\"abcde\\"`, then `\\"abc\\"`, `\\"bcd\\"`, and `\\"cde\\"` are substrings, but `\\"ace\\"` is not. Your task is to find the longest substring of `s` such that the characters of this substring can be permuted to form a palindrome. If there are multiple answers, return the lexicographically smallest one. Note: - A palindrome is a string that reads the same backward as forward, for example, `\\"racecar\\"` and `\\"madam\\"` are palindromes. - The length of string `s` is at least 1 and at most 10^5. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. - Each of the next `t` lines contains a single string `s`. # Output For each test case, output a single line containing the longest substring of `s` that can be permuted to form a palindrome. If there\'s more than one possible answer, return the lexicographically smallest one. # Example Input ``` 2 abacaba aabb ``` Output ``` abacaba abba ``` # Explanation For the first test case, the entire string `\\"abacaba\\"` can be permuted to form the palindrome `\\"aabacaa\\"`, which makes it the longest possible substring. No other substring is longer and can be permuted to form a palindrome. For the second test case, both `\\"aabb\\"` and `\\"bbaa\\"` can be permuted to form the palindrome `\\"abba\\"`, but `\\"aabb\\"` is lexicographically smaller.","solution":"def longest_palindromic_substring(s): from collections import Counter n = len(s) max_len = 0 best_substring = None # Check all substrings for i in range(n): for j in range(i, n): substring = s[i:j+1] counter = Counter(substring) odd_count = sum(1 for count in counter.values() if count % 2 == 1) # If at most one character has an odd count, it can be permuted to a palindrome if odd_count <= 1: if (j - i + 1) > max_len or ((j - i + 1) == max_len and substring < best_substring): max_len = j - i + 1 best_substring = substring return best_substring def solve(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"A social network platform allows users to post and like content. However, there\'s a system restriction that each user can have at most 5 posts. When a user attempts to make a new post exceeding this limit, the oldest post is automatically deleted to make space for the new one. You need to implement functionality to handle user posts and query the latest posts. Specifically, you should design a system that supports the following operations: 1. **Post**: Add a new post for a user. 2. **GetLatestPosts**: Retrieve the latest posts of a user, ordered from newest to oldest. Each post is represented by a string `content`, and each user is represented by a unique integer `userId`. Your task is to write a program that will process a series of operations. For each \\"GetLatestPosts\\" operation, output the latest posts for the given user. The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of operations. Each of the next `n` lines contains an operation in one of the following formats: - `Post userId content` — Add a new post with `content` for the user with `userId` (0 ≤ userId ≤ 10^5, 1 ≤ length(content) ≤ 100). - `GetLatestPosts userId` — Retrieve the latest posts for the user with `userId`. For each \\"GetLatestPosts\\" operation, output the latest posts for the user in separate lines, one post per line in newest to oldest order. If the user has no posts, output \\"No posts\\". Example: Input: ``` 6 Post 1 HelloWorld Post 1 MySecondPost GetLatestPosts 1 Post 1 ThirdPost Post 1 FourthPost GetLatestPosts 1 ``` Output: ``` MySecondPost HelloWorld FourthPost ThirdPost MySecondPost HelloWorld ``` Your code should handle these operations efficiently. The time complexity for each operation should be optimal considering the constraints.","solution":"from collections import deque, defaultdict class SocialNetwork: def __init__(self): self.user_posts = defaultdict(deque) def post(self, userId, content): if len(self.user_posts[userId]) >= 5: self.user_posts[userId].popleft() self.user_posts[userId].append(content) def get_latest_posts(self, userId): if userId not in self.user_posts or len(self.user_posts[userId]) == 0: return [\\"No posts\\"] return list(reversed(self.user_posts[userId])) def process_operations(n, operations): platform = SocialNetwork() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"Post\\": userId = int(parts[1]) content = \\" \\".join(parts[2:]) platform.post(userId, content) elif parts[0] == \\"GetLatestPosts\\": userId = int(parts[1]) results.extend(platform.get_latest_posts(userId)) return results"},{"question":"Maria is interested in prime numbers and their properties. She recently learned about the Sieve of Eratosthenes algorithm to find all prime numbers up to a given integer n. However, she is particularly interested in the k-th prime number within this range. Additionally, she wants to determine the sum of all prime numbers up to the k-th prime number. Help Maria solve her problem by writing a program that, given a number n, finds the k-th prime number within this range and computes the sum of all prime numbers up to the k-th prime number. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of queries. Each of the following t lines contains two integers n and k (2 ≤ n ≤ 10^6, 1 ≤ k ≤ 7,850) — the upper limit for the sieve and the k-th prime number to find. For each query, if the k-th prime number within the range exists, output two integers: the k-th prime number and the sum of all primes up to and including this k-th prime number. If the k-th prime number does not exist within the range, output \\"NO\\". Example input: ``` 3 10 3 20 5 30 10 ``` Example output: ``` 5 10 11 28 29 129 ``` For the first query, the prime numbers up to 10 are 2, 3, 5, and 7. The 3rd prime number is 5, and the sum of the primes up to 5 is 2 + 3 + 5 = 10. For the second query, the prime numbers up to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. The 5th prime number is 11, and the sum of primes up to 11 is 2 + 3 + 5 + 7 + 11 = 28. For the third query, the prime numbers up to 30 are 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29. The 10th prime number is 29, and the sum of primes up to 29 is 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 = 129.","solution":"def sieve_of_eratosthenes(n): Use the Sieve of Eratosthenes to find all prime numbers up to n. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes def kth_prime_and_sum(n, k): Returns the k-th prime number within the range up to n and the sum of all primes up to and including this k-th prime number. If the k-th prime number does not exist within the given range, return \\"NO\\". primes = sieve_of_eratosthenes(n) if k <= len(primes): kth_prime = primes[k - 1] sum_primes = sum(primes[:k]) return f\\"{kth_prime} {sum_primes}\\" else: return \\"NO\\" def process_queries(t, queries): Process t queries and return the results for each query. results = [] for query in queries: n, k = query result = kth_prime_and_sum(n, k) results.append(result) return results"},{"question":"Alex is organizing a competition where participants need to travel through a series of checkpoints. There are `n` checkpoints arranged sequentially in a straight line, spaced exactly 1 meter apart from each other. Each participant can move from one checkpoint to the next directly. At the beginning of the competition, Alex places special tokens at some checkpoints. These tokens have different values. Each participant has a collection bag that can hold exactly one token at a time. Therefore, each participant, starting at a given checkpoint, can pick up a token as they reach the checkpoint and can only carry that token until they decide to drop it and pick up a new token from another checkpoint. To win the competition, a participant needs to maximize the total value of collected tokens while traveling through a given sequence of checkpoints. The participant can move any number of checkpoints either forward or backward, but they can only collect each token once. Given the positions and values of the tokens, and the starting checkpoint of the participant, determine the maximum value of tokens the participant can collect. # Input The first line contains two integers `n` (1 ≤ n ≤ 100000) and `t` (1 ≤ t ≤ 100000) where `n` is the number of checkpoints and `t` is the number of tokens. The second line contains `n-1` integers where the ith integer represents the distance between the i-th checkpoint and the (i+1)-th checkpoint. The next `t` lines each contain two integers `ci` (1 ≤ ci ≤ n) and `vi` (1 ≤ vi ≤ 1000) representing that there is a token with value `vi` at checkpoint `ci`. The last line contains an integer `s` (1 ≤ s ≤ n) representing the starting checkpoint of the participant. # Output Print the maximum value of tokens the participant can collect. # Sample Input ``` 5 3 1 1 1 1 2 10 4 20 5 30 1 ``` # Sample Output ``` 60 ``` Explanation: In this example, the participant starts at checkpoint 1. The participant can move from checkpoint 1 to checkpoint 2 and collect the token with value 10. Then, they can move from checkpoint 2 to checkpoint 4, collect the token with value 20, and finally move to checkpoint 5 and collect the token with value 30, maximizing the total collected value to 60.","solution":"def max_token_value(n, t, distances, tokens, start): # Initialize a dictionary to store values of tokens at each checkpoint token_values = {i: 0 for i in range(1, n+1)} # Populate the dictionary with given tokens for checkpoint, value in tokens: token_values[checkpoint] = value # Dynamic programming table to store maximum values up to each checkpoint dp = [0] * (n + 1) # Starting condition dp[start] = token_values[start] # Processing each checkpoint from start for i in range(1, n + 1): if i > 1: # can only consider next checkpoint if it\'s available dp[i] = max(dp[i], dp[i-1] + token_values[i]) if i < n: dp[i+1] = max(dp[i+1], dp[i] + token_values[i+1]) # The result is the maximum value in the dp table return max(dp) # Example usage n = 5 t = 3 distances = [1, 1, 1, 1] tokens = [(2, 10), (4, 20), (5, 30)] start = 1 print(max_token_value(n, t, distances, tokens, start)) # Output: 60"},{"question":"You are given a string consisting of lowercase English letters. You need to determine the lexicographically smallest non-empty subsequence of the string that can be obtained by deleting characters from it. A subsequence of a string is obtained by deleting some (none, one, or more) characters from the string, without changing the order of the remaining characters. The first and only line contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Print the lexicographically smallest non-empty subsequence of the string. **Example:** Input: ``` bcabc ``` Output: ``` abc ``` Input: ``` cbacdcbc ``` Output: ``` acdb ```","solution":"def smallest_subsequence(s): Returns the lexicographically smallest subsequence of the string s. stack = [] seen = set() last_occurrence = {c: i for i, c in enumerate(s)} for i, c in enumerate(s): if c not in seen: while stack and c < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) stack.append(c) seen.add(c) return \'\'.join(stack)"},{"question":"In ancient times, people believed that certain patterns had magical powers. One such pattern was the \\"Hourglass\\" pattern in a 2D grid of numbers. An hourglass pattern consists of 7 values with the following positions in a 3x3 sub-grid: ``` a b c d e f g ``` You are given a 2D grid of size n x m containing integers. Your task is to find the maximum sum of the hourglass pattern anywhere in the grid. Specifically, the hourglass sum is defined as the sum of values in each hourglass pattern within the grid. You need to determine the highest such sum. Write a function `max_hourglass_sum(grid: List[List[int]]) -> int`, where: - `grid` is a list of lists containing integers representing the 2D grid. **Input** - The first line contains two integers n and m (3 ≤ n, m ≤ 100), the dimensions of the grid. - Each of the next n lines contains m integers, representing the 2D grid. **Output** - Print a single integer, the maximum hourglass sum found in the grid. **Examples** **Example 1:** ``` Input: 6 6 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 2 4 4 0 0 0 0 2 0 0 0 0 1 2 4 0 Output: 19 ``` **Example 2:** ``` Input: 3 3 1 1 1 1 1 1 1 1 1 Output: 7 ``` **Note:** - In the first example, the hourglass with the maximum sum is: ``` 2 4 4 2 1 2 4 ``` Therefore, the answer is 19. - In the second example, the whole grid is an hourglass and its sum is 7.","solution":"from typing import List def max_hourglass_sum(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for i in range(n - 2): for j in range(m - 2): top = grid[i][j] + grid[i][j+1] + grid[i][j+2] mid = grid[i+1][j+1] bot = grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2] hourglass_sum = top + mid + bot if hourglass_sum > max_sum: max_sum = hourglass_sum return max_sum"},{"question":"A whimsical wizard named Wizardo owns a collection of magical wands, each with a unique length. He wants to arrange his wands in a special spiral-like pattern within a grid. The grid has a size of n x n cells, and Wizardo wishes to place his wands such that they form a spiral starting from the top-left corner and moving inwards. The spiral follows this pattern: - Start from the top-left corner of the grid - Move right until you hit the boundary or a previously filled cell - Move down until you hit the boundary or a previously filled cell - Move left until you hit the boundary or a previously filled cell - Move up until you hit the boundary or a previously filled cell - Repeat the steps, reducing the path length each time as necessary Given an integer n (1 ≤ n ≤ 10^3) representing the size of the grid and an array wand_lengths of n^2 integers (1 ≤ wand_lengths[i] ≤ 10^6) representing the lengths of the wands, arrange them in the described spiral pattern. Print the resulting n x n grid. The first line of the input contains the integer n. The second line contains n^2 space-separated integers representing the lengths of the wands. Output the resulting n x n grid. Each row of the grid should be printed on a new line, with each cell separated by a space. Example: ``` Input: 3 9 2 7 1 6 5 8 3 4 Output: 9 2 7 3 4 1 8 5 6 ``` Explanation: The wands are placed in a 3x3 grid in a spiral manner as detailed, starting from the top-left corner and moving inwards following the described pattern.","solution":"def spiral_fill(n, wand_lengths): grid = [[0] * n for _ in range(n)] dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up direction = 0 # Starting with moving right row, col = 0, 0 for length in wand_lengths: grid[row][col] = length next_row, next_col = row + dirs[direction][0], col + dirs[direction][1] if not (0 <= next_row < n and 0 <= next_col < n and grid[next_row][next_col] == 0): direction = (direction + 1) % 4 next_row, next_col = row + dirs[direction][0], col + dirs[direction][1] row, col = next_row, next_col return grid def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row))) # Example usage: n = 3 wand_lengths = [9, 2, 7, 1, 6, 5, 8, 3, 4] grid = spiral_fill(n, wand_lengths) print_grid(grid)"},{"question":"Given an array of unique integers, you need to form the longest possible chain in which each integer in the chain is a multiple of the previous integer. That is, if the chain is [a1, a2, ... , ak], then for every integer ai (1 ≤ i < k), there exists an aj (i < j ≤ k) such that aj % ai == 0. You are given multiple test cases. For each test case, you are given an array and you need to determine the maximum length of such a sequence that can be formed. The first line contains the number of test cases, t (1 ≤ t ≤ 100). Each test case starts with an integer n (1 ≤ n ≤ 5000), the number of unique integers in the array. The next line contains n space-separated integers a1, a2, ... , an (1 ≤ ai ≤ 10^9), representing the unique integers in the array. For each test case, print a single integer on a new line representing the length of the longest chain you can form for the given array. # Example Input: ``` 2 4 1 2 3 8 5 3 6 7 12 24 ``` Output: ``` 4 4 ``` # Explanation: In the first test case, one possible longest chain is [1, 2, 8]. In the second test case, the possible longest chain is [3, 6, 12, 24].","solution":"def longest_chain_length(arr): Given an array of unique integers, returns the length of the longest chain where each integer in the chain is a multiple of the previous integer. arr.sort() longest_chain = [1] * len(arr) for i in range(len(arr)): for j in range(i): if arr[i] % arr[j] == 0: longest_chain[i] = max(longest_chain[i], longest_chain[j] + 1) return max(longest_chain) def solve_cases(t, cases): results = [] for i in range(t): n = cases[i][0] arr = cases[i][1] result = longest_chain_length(arr) results.append(result) return results"},{"question":"Anna has decided to play a new game on her 2D grid. The grid is composed of `n` rows and `m` columns, and each cell in the grid initially contains an integer. Anna\'s goal is to turn all cells in any arbitrary submatrix into a given integer `x`. A submatrix is defined by its top-left and bottom-right corners (r1, c1) and (r2, c2) respectively. Anna can perform the following operation multiple times: She selects an arbitrary submatrix and sets all its cells to `x`. Determine if it is possible to turn all the cells in the grid into `x` using the above operation repeatedly. The first line of input contains three integers `n` (1 ≤ n ≤ 2000), `m` (1 ≤ m ≤ 2000), and `x` (-1000 ≤ x ≤ 1000). The next `n` lines contain `m` integers each, representing the initial content of the grid (-1000 ≤ grid[i][j] ≤ 1000). If it is possible to achieve the goal, print \\"YES\\". Otherwise, print \\"NO\\". Example: Input: ``` 3 3 5 1 1 1 1 1 1 1 1 1 ``` Output: ``` YES ``` Input: ``` 3 3 9 5 5 5 5 4 5 5 5 5 ``` Output: ``` NO ``` Explanation: In the first example, Anna can select the entire grid as a submatrix and set all cells to 5, thus meeting her goal. In the second example, it\'s impossible to change the entire grid to 9 using the defined operations because there is a cell with value 4 which cannot turn into 9 unless initially set as such with submatrix operations.","solution":"def can_transform_to_x(n, m, x, grid): Determines if it is possible to turn all cells in the grid to the integer x. Args: n (int): Number of rows. m (int): Number of columns. x (int): Target integer to set all cells to. grid (list of list of int): The grid containing initial integer values. Returns: str: \\"YES\\" if it is possible to turn all cells to x, otherwise \\"NO\\". for row in grid: for cell in row: if cell != x: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers which represent the heights of buildings in a city. Your task is to determine the minimum number of days required to reduce all buildings to zero height under the following conditions: 1. Each day, you have the option to choose a particular non-empty subset of consecutive buildings. 2. You can reduce the height of all buildings in this selected subset by 1 unit in one day. The height of each building cannot be negative, and you must reduce the heights exactly to zero. The first line of the input contains a single integer n (1 le n le 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^5) — the heights of the buildings. Print a single integer — the minimum number of days required to reduce all buildings to zero height. For instance, consider the following cases: 1. Input: ``` 5 3 3 1 2 3 ``` Output: ``` 3 ``` Explanation: - Day 1: Reduce heights [3, 3] to [2, 2] - Day 2: Reduce heights [2, 2, 1, 2, 3] to [1, 1, 0, 1, 2] - Day 3: Reduce heights [1] and [1, 2] to [0] and [0, 1], respectively. The last operation reduces the height of all remaining buildings to zero. 2. Input: ``` 4 1 2 3 4 ``` Output: ``` 4 ``` Explanation: - Each day, reduce the height of the tallest remaining building until all buildings are reduced to zero.","solution":"def min_days_to_zero_heights(n, heights): Given the number of buildings and their heights, return the minimum number of days required to reduce all buildings to zero heights. if n == 0: return 0 days = 0 while max(heights) > 0: # Continue until all heights are reduced to zero min_height_non_zero = min([h for h in heights if h > 0]) for i in range(n): if heights[i] > 0: heights[i] -= min_height_non_zero days += min_height_non_zero return days"},{"question":"Nikita is working on a new data structure challenge and needs your help to complete it. The challenge involves a sequence of integers and various operations on subarrays of the sequence. The sequence is initially empty, and you need to process a series of operations. The operations are of three types: 1. **Insert Operation**: Insert an integer at the end of the sequence. 2. **Delete Operation**: Delete the element at the end of the sequence. 3. **Max-Sum Operation**: Given two indices (l) and (r) (1-based, inclusive), find the maximum possible sum of any subarray within the subarray from (l) to (r) (inclusive). You need to efficiently process these operations on the sequence. Given the constraints of the problem, an efficient approach is necessary to handle a large number of operations. # Input Format - The first line contains an integer (q) (1 ≤ (q) ≤ 10^5), the number of operations. - The next (q) lines describe the operations. Each operation takes one of the following formats: - \\"INSERT x\\" where (x) is an integer (−10^9 ≤ (x) ≤ 10^9) - \\"DELETE\\" - \\"MAX-SUM l r\\" where (1 ≤ l ≤ r ≤ text{current length of the sequence}) # Output Format For each \\"MAX-SUM\\" operation, output a single integer representing the maximum possible sum of any subarray within the specified range. # Sample Input ``` 7 INSERT 1 INSERT 2 INSERT -3 MAX-SUM 1 3 DELETE INSERT 4 MAX-SUM 1 3 ``` # Sample Output ``` 3 3 ``` # Explanation After the first three \\"INSERT\\" operations, the sequence is [1, 2, -3]. - The result of \\"MAX-SUM 1 3\\" is the maximum subarray sum from 1 to 3, which is 1+2 = 3. - After the \\"DELETE\\" operation, the sequence becomes [1, 2]. - Then \\"INSERT 4\\" makes the sequence [1, 2, 4]. - The result of \\"MAX-SUM 1 3\\" in the modified sequence [1, 2, 4] is the sum of the entire array, i.e., 1+2+4 = 7, but within subarray [1, 3] the maximum sum is 3.","solution":"class SequenceOperations: def __init__(self): self.sequence = [] def insert(self, x): self.sequence.append(x) def delete(self): if self.sequence: self.sequence.pop() def max_sum(self, l, r): subarray = self.sequence[l-1:r] max_ending_here = max_so_far = subarray[0] for x in subarray[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a string s of length n consisting of lowercase English letters. Your task is to determine the minimum number of characters that need to be deleted from the string so that the resulting string does not contain any two adjacent characters that are the same. For example, if the string is \\"aabcc\\", you can delete one \'a\' and one \'c\' to obtain the string \\"abc\\". The first line contains one integer n (1 leq n leq 10^5) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Print one integer — the minimum number of characters you need to delete from the string to satisfy the condition. In the first sample, we can delete the second \'a\' and the second \'c\' to obtain \\"abc\\". In the second sample, the string is already composed of unique adjacent characters, so no deletions are needed.","solution":"def minimum_deletions(s): Determines the minimum number of deletions needed so that no two adjacent characters in the string are the same. Parameters: s (str): input string Returns: int: minimum number of deletions needed deletions = 0 # Iterate through the string, comparing each character to the next one for i in range(len(s) - 1): if s[i] == s[i + 1]: deletions += 1 return deletions"},{"question":"Ariel is fascinated by palindromes, especially those that can be found in strings. Let\'s help Ariel with a problem involving checking palindromic properties of substrings. You are given a string `s` consisting of lowercase English letters and a list of `m` queries. Each query is composed of two integers `l` and `r` (1 ≤ l < r ≤ |s|) which define a substring of `s`. For each query, determine if the substring `s[l:r+1]` (inclusive) is a palindrome. Recall that a string is a palindrome if it reads the same backward as forward. The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 100000, 1 ≤ m ≤ 100000) — the length of the string and the number of queries, respectively. The second line contains the string `s`. The next `m` lines contain the queries. Each query consists of two integers `l` and `r` (0 ≤ l ≤ r < n) — the indices of the substring in the string. For each query, print \\"YES\\" if the specified substring is a palindrome, and \\"NO\\" otherwise. # Example **Input:** ``` 7 3 abacaba 0 6 2 4 1 2 ``` **Output:** ``` YES YES NO ```","solution":"def is_palindrome(s, l, r): Returns whether the substring s[l:r+1] is a palindrome. sub_str = s[l:r+1] return sub_str == sub_str[::-1] def process_queries(n, m, s, queries): results = [] for l, r in queries: if is_palindrome(s, l, r): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def ariel_palindrome(n, m, s, queries): return process_queries(n, m, s, queries)"},{"question":"You\'re given a sequence of integers which represents the value of tickets sold for a series of events. The event organizer wants to maximize the total ticket value by selecting a non-empty subsequence of events while ensuring that no two events in the chosen subsequence are consecutive in the original sequence. Write a program to find the maximum possible sum of the selected subsequence under this constraint. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) – the number of events. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10,000) – the value of tickets sold for each event. # Output: Print a single integer – the maximum possible sum of the selected subsequence. # Example: Input: ``` 5 3 2 5 10 7 ``` Output: ``` 15 ``` # Explanation: In the example, the maximum sum of sold tickets can be achieved by selecting the subsequence of events with ticket values [3, 10, 7], which sums to 20.","solution":"def max_ticket_value(n, ticket_values): if n == 0: return 0 elif n == 1: return ticket_values[0] # Base case initialization prev_prev_max = ticket_values[0] prev_max = max(ticket_values[0], ticket_values[1]) # Iterate through rest of the events starting from the third one. for i in range(2, n): current_max = max(prev_max, prev_prev_max + ticket_values[i]) prev_prev_max, prev_max = prev_max, current_max return prev_max # Example usage: # n = 5 # ticket_values = [3, 2, 5, 10, 7] # print(max_ticket_value(n, ticket_values)) # Output: 15"},{"question":"Given an array of positive integers representing house prices along a street, you need to determine the maximum profit you can achieve by buying and selling one house. The rule is that you must buy a house before you sell it, and you can only complete this transaction once. Write a function `max_profit(prices)` that takes a list of integers as input, where `prices[i]` represents the price of the house on day `i`, and returns an integer representing the maximum profit. If no profit can be made, return 0. # Input - A list of integers, `prices`, where `1 <= len(prices) <= 10^5` and `0 <= prices[i] <= 10^4`. # Output - An integer representing the maximum profit possible, or 0 if no profit can be made. # Example ```python print(max_profit([7, 1, 5, 3, 6, 4])) # Output: 5 print(max_profit([7, 6, 4, 3, 1])) # Output: 0 ``` # Explanation In the first example, buying the house at price 1 and selling it at price 6 yields the maximum profit of 5. In the second example, there is no day at which buying a house and then selling it afterward would lead to a profit, so the function returns 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling one house. if not prices: return 0 # Initialize the minimum price to the first price and max profit to 0 min_price = prices[0] max_profit = 0 # Iterate through the list of prices for price in prices[1:]: # Update the maximum profit if the current price minus the minimum price is higher than the current max profit max_profit = max(max_profit, price - min_price) # Update the minimum price if the current price is lower than the current minimum price min_price = min(min_price, price) return max_profit"},{"question":"You are given two words, `start` and `end`, as well as a list of words called `wordList`. Your task is to discover the shortest transformation sequence from `start` to `end`, such that: 1. Each transformed word must exist in `wordList`. 2. Only one letter can be changed at a time. 3. The sequence starts with `start` and ends with `end`. Note that `wordList` may contain duplicates. Return the length of the shortest transformation sequence. If no such sequence exists, return 0. **Example 1:** ``` Input: start = \\"hit\\" end = \\"cog\\" wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] Output: 5 Explanation: As one shortest transformation is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", return its length 5. ``` **Example 2:** ``` Input: start = \\"hit\\" end = \\"cog\\" wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"] Output: 0 Explanation: The end word \\"cog\\" is not in wordList, therefore no possible transformation. ``` **Constraints:** - 1 ≤ `start.length` ≤ 10 - 1 ≤ `end.length` ≤ 10 - `start.length` == `end.length` - 1 ≤ `wordList.length` ≤ 5000 - `wordList[i].length` == `start.length` - `start`, `end`, and `wordList[i]` consist of lowercase English letters.","solution":"from collections import deque def ladder_length(start, end, wordList): Returns the length of the shortest transformation sequence from start to end. if end not in wordList: return 0 wordSet = set(wordList) queue = deque([(start, 1)]) # Queue holds tuples of the word and the current length of the sequence while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordSet: wordSet.remove(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"You are given an array of n integers, each integer ranging from 1 to 1000. Your task is to perform the following queries on the array: 1. Update the value at a given index of the array to a new value. 2. Given a range [l, r], compute the greatest common divisor (GCD) of all values in the given range. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. The next q lines contain queries that can be of two types: - \\"1 i x\\": Update the value at index i of the array to x (1 ≤ i ≤ n, 1 ≤ x ≤ 1000). - \\"2 l r\\": Compute the GCD of the subarray from index l to index r (1 ≤ l ≤ r ≤ n). For each query of the second type, output the computed GCD on a new line. Example input: 6 4 12 15 18 9 24 30 2 1 3 1 2 6 2 1 3 2 4 6 Example output: 3 6 3 Explanation: - For the first query \\"2 1 3\\", the subarray [12, 15, 18] has GCD 3. - For the second query \\"1 2 6\\", the array becomes [12, 6, 18, 9, 24, 30]. - For the third query \\"2 1 3\\", the subarray [12, 6, 18] has GCD 6. - For the fourth query \\"2 4 6\\", the subarray [9, 24, 30] has GCD 3.","solution":"import math class ArrayManipulator: def __init__(self, array): self.array = array def update(self, index, value): self.array[index-1] = value def compute_gcd(self, l, r): gcd_value = self.array[l-1] for i in range(l, r): gcd_value = math.gcd(gcd_value, self.array[i]) return gcd_value def process_queries(n, q, array, queries): manipulator = ArrayManipulator(array) results = [] for query in queries: q_type, *args = query if q_type == 1: i, x = args manipulator.update(i, x) elif q_type == 2: l, r = args results.append(manipulator.compute_gcd(l, r)) return results # Sample Usage for debugging # n, q = 6, 4 # array = [12, 15, 18, 9, 24, 30] # queries = [(2, 1, 3), (1, 2, 6), (2, 1, 3), (2, 4, 6)] # print(process_queries(n, q, array, queries)) # Output [3, 6, 3]"},{"question":"Given an array of integers of length `n`, where the elements represent the heights of bars in a histogram, calculate the maximum rectangular area that can be formed using the bars of the histogram. You can select one or more contiguous bars to form a rectangle. # Input - The first line contains a single integer `n` (1 leq n leq 100,000), the length of the array. - The second line contains `n` integers, each representing the height of a bar in the histogram. Each height is a positive integer not exceeding 10^5. # Output - Print a single integer, the maximum rectangular area that can be formed using the bars of the histogram. # Example Input ``` 7 2 1 4 5 1 3 3 ``` Output ``` 8 ``` # Explanation In the given example, the maximum rectangular area can be formed by the bars with heights `4` and `5`, giving the area (4 times 2 = 8). # Constraints - Your solution should preferably have a time complexity of O(n) to handle the upper bounds effectively. - Consider edge cases, such as when `n` is 1, or all bars have the same height.","solution":"def maximum_histogram_area(heights): Function to find the maximum rectangular area in a histogram. Parameters: heights (list): A list of integers representing the heights of bars in the histogram. Returns: int: The maximum rectangular area that can be formed using the bars of the histogram. n = len(heights) stack = [] max_area = 0 index = 0 while index < n: if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a list of integers `nums` and an integer `k`, your task is to find the maximum sum of any continuous subarray of length exactly `k`. The first line of input contains two integers `n` and `k`, where `n` is the length of the list `nums` and `k` is the length of the subarray (`1 ≤ k ≤ n ≤ 10^6`). The second line contains `n` integers representing the elements of the list `nums` (`-10^4 ≤ nums[i] ≤ 10^4`). Output a single integer — the maximum sum of any continuous subarray of length `k`. In the example, given the list `[1, 4, 2, 10, 23, 3, 1, 0, 20]` and `k = 4`, the subarray `[4, 2, 10, 23]` has the maximum sum of 39. **Example Input:** ``` 9 4 1 4 2 10 23 3 1 0 20 ``` **Example Output:** ``` 39 ```","solution":"def max_sum_subarray(nums, k): This function returns the maximum sum of any continuous subarray of length exactly k. Parameters: nums (list of int): The list of integers. k (int): The length of the subarray. Returns: int: The maximum sum of any continuous subarray of length k. n = len(nums) if k == 0 or n == 0: return 0 # Calculate the sum of the first \'k\' elements max_sum = sum(nums[:k]) current_sum = max_sum # Slide the window of length \'k\' and find the maximum sum for i in range(k, n): current_sum = current_sum - nums[i - k] + nums[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Giraffe the farmer is trying to fence a rectangular field. He knows the lengths of three sides of the rectangle but forgot the length of the fourth side. Help Giraffe determine the length of the missing side. The first line contains a single integer t (1 <= t <= 1000) - the number of test cases. The next t lines describe the test cases. Each test case contains three integers a, b, and c (1 <= a, b, c <= 10^9) - the lengths of three sides of the rectangle. It is guaranteed that two of these sides represent the same length (either the length or the width of the rectangle). For each test case, print a single integer d - the length of the fourth side of the rectangle. If there are multiple answers, print any. We can show that an answer always exists. Example: Input: 4 5 10 5 7 7 14 8 8 16 20 15 20 Output: 10 7 16 15 Explanation: In the first test case, two sides are of length 5 and one side is of length 10, so the missing side length is 10. In the second test case, two sides are of length 7 and one side is of length 14, so the missing side length is 7. In the third test case, two sides are of length 8 and one side is of length 16, so the missing side length is 16. In the fourth test case, two sides are of length 20 and one side is of length 15, so the missing side length is 15.","solution":"def find_missing_side_length(test_cases): Determines the missing side length for a given number of rectangles Parameters: test_cases (list of tuples): List of tuples containing the lengths of three sides of the rectangle Returns: list of int: List of the missing side lengths for each rectangle results = [] for a, b, c in test_cases: if a == b: results.append(c) elif a == c: results.append(b) else: results.append(a) return results"},{"question":"A company is planning a new project and they need to form teams of employees based on their skills. Each employee has a unique skill set represented by a string of lowercase English letters. Each letter in the string signifies a specific skill that the employee possesses, and an employee can possess multiple skills. The company wants to determine if they can form a team where every necessary skill is possessed by at least one team member. Given a set of essential skills required for the project, determine if a combination of employees can be found such that all essential skills are covered. Each employee can be chosen at most once. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of employees. The second line contains n strings, each representing the skill set of an employee. Each string is composed of lowercase English letters where each letter represents a unique skill. The third line contains a single string s, representing the set of essential skills required for the project. The string s contains distinct lowercase English letters. Output \\"Yes\\" if there exists a selection of employees such that every essential skill is covered, otherwise output \\"No\\". # Example **Input** ``` 3 abc bcd def abcdef ``` **Output** ``` Yes ``` **Explanation** In this example, combining the skill set of the first and third employees (abc + def) covers all essential skills required (a, b, c, d, e, f). Thus, the output is \\"Yes\\".","solution":"def can_form_team(n, employees, essential_skills): from functools import reduce # Combine all unique skills from the employees combined_skills = reduce(set.union, map(set, employees), set()) # Check if the combined skills covers all essential skills if all(skill in combined_skills for skill in essential_skills): return \\"Yes\\" else: return \\"No\\""},{"question":"In an ancient land, there is a mysterious ritual performed by wizards to summon a magical creature. To cast this spell, each wizard must first prepare a series of talismans. Every talisman is defined by a unique magical number. The magical power of the series of talismans is determined by the greatest common divisor (GCD) of all the magical numbers in the series. A group of wizards is working together, where each wizard contributes one talisman to the series. However, some wizards can contribute more than one talisman. The final magical power of the ritual is thus dependent on the GCD of all talismans provided by the wizards. Your task is to calculate the magical power of the ritual after all talismans have been contributed. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of wizards (and hence the number of talismans). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the magical numbers of the talismans contributed by the wizards. Print a single integer — the GCD of all the talismans. # Examples Example 1 **Input:** ``` 3 12 15 18 ``` **Output:** ``` 3 ``` Example 2 **Input:** ``` 4 20 25 30 35 ``` **Output:** ``` 5 ``` # Explanation: In the first example, the GCD of {12, 15, 18} is 3. In the second example, the GCD of {20, 25, 30, 35} is 5.","solution":"import math from functools import reduce def gcd_of_talismans(n, talismans): Returns the GCD of all the talismans. :param n: int - number of talismans (wizards) :param talismans: list[int] - list of integers representing talismans :return: int - GCD of the talismans return reduce(math.gcd, talismans)"},{"question":"Bob has a collection of n coins, each with a certain integer value. He wants to distribute the coins into two groups such that the absolute difference between the sum of the coins in both groups is minimized. You need to help Bob by determining the minimum possible absolute difference between the sums of the two groups. The first line contains the integer n (1 le n le 100) — the number of coins. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the values of the coins. Output a single integer — the minimum possible absolute difference between the sums of the two groups. **Example** Input: ``` 4 1 2 3 9 ``` Output: ``` 3 ``` In the example above, Bob can distribute the coins into two groups: {1, 2, 3} and {9}, where the absolute difference between the sums of the groups is |6 - 9| = 3, which is the minimum possible.","solution":"def min_difference(n, coins): total_sum = sum(coins) dp = [False] * (total_sum + 1) dp[0] = True for coin in coins: for s in range(total_sum, coin - 1, -1): if dp[s - coin]: dp[s] = True min_diff = total_sum for s in range(total_sum // 2 + 1): if dp[s]: min_diff = min(min_diff, abs(total_sum - 2 * s)) return min_diff # Example Input # n = 4 # coins = [1, 2, 3, 9] # Output should be 3 # Example Test Call: min_difference(4, [1, 2, 3, 9])"},{"question":"You are given an array of integers, some of which might be positive while others might be negative or zero. Your task is to reorder the array so that all non-negative integers appear before the negative integers, all while preserving the relative order of all non-negative integers among themselves and the relative order of all negative integers among themselves. The first line of input contains an integer t (1 leq t leq 10^4) — the number of test cases. Each of the next t lines contains an integer n (1 leq n leq 10^5) followed by n integers listing the array. The sum of all n in the input does not exceed 10^6. For each test case, print the reordered array. # Example **Input:** ``` 3 5 3 -1 2 -4 5 3 -5 -3 7 6 1 0 -2 -3 6 4 ``` **Output:** ``` 3 2 5 -1 -4 7 -5 -3 1 0 6 4 -2 -3 ``` **Explanation:** In the first test case, the original array is [3, -1, 2, -4, 5]. The reordered array should be [3, 2, 5, -1, -4], where non-negative integers 3, 2, and 5 maintain their relative order, and negative integers -1 and -4 also maintain their relative order. In the second test case, the array is [-5, -3, 7], and the reordered array is [7, -5, -3]. In the third test case, the array [1, 0, -2, -3, 6, 4] should be reordered to [1, 0, 6, 4, -2, -3].","solution":"def reorder_array(test_cases): Reorders the arrays such that all non-negative integers appear before negative integers while preserving their relative order. Parameters: test_cases (list of tuples): A list of tuples where each tuple contains a single test case. Each tuple consists of two elements - the length of the array and the array itself. Returns: list of lists: A list where each element is a reordered array for the corresponding test case. result = [] for n, arr in test_cases: non_negative = [num for num in arr if num >= 0] negative = [num for num in arr if num < 0] result.append(non_negative + negative) return result"},{"question":"You are given an array of integers representing the height of each bookshelf in a row of bookshelves. Your goal is to ensure that no two adjacent bookshelves have the same height, and you can only increase or decrease the height of a bookshelf by 1 unit at a time. Write a program to find the minimum number of operations required to achieve this. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of bookshelves. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the initial heights of the bookshelves. Output a single integer — the minimum number of operations required. For example: Input: 5 1 3 3 2 4 Output: 2 Explanation: In the given example, we can adjust the heights of the bookshelves as follows: - Decrease the height of the third bookshelf from 3 to 2 (1 operation). - Increase the height of the fourth bookshelf from 2 to 3 (1 operation). The resulting heights of the bookshelves will be [1, 3, 2, 3, 4], and the total number of operations is 2.","solution":"def min_operations_to_alternate_heights(n, heights): Calculate the minimum number of operations needed to ensure no two adjacent bookshelves have the same height. Parameters: n (int): The number of bookshelves heights (list of int): The initial heights of the bookshelves Returns: int: The minimum number of operations required operations = 0 for i in range(1, n): if heights[i] == heights[i - 1]: if i == n - 1 or heights[i + 1] == heights[i]: if heights[i] > 1: heights[i] -= 1 else: heights[i] += 1 else: heights[i] = (heights[i - 1] + heights[i + 1]) // 2 operations += 1 return operations"},{"question":"You are tasked with developing an algorithm that monitors and processes the rainfall level within a particular region over several days. For this task, you are given the rainfall levels recorded each day at noon and midnight. Your goal is to determine how many days had increasing rainfall levels compared to the last recorded value. For this task, you are given the following input: - The first line contains n (1 ≤ n ≤ 1000) — the number of days. - The next line contains 2n integers, r1, r2, ..., r2n (1 ≤ ri ≤ 109) — the rainfall levels recorded at noon and midnight for each day in chronological order. The program should output a single integer — the number of times the rainfall level increased compared to the previous measurement. Example: Input: 4 10 20 20 15 15 25 25 30 Output: 3 Explanation: The rainfall levels recorded are [10, 20, 20, 15, 15, 25, 25, 30]. From 10 to 20 (increase), From 20 to 20 (no change), From 20 to 15 (decrease), From 15 to 15 (no change), From 15 to 25 (increase), From 25 to 25 (no change), From 25 to 30 (increase). Hence the answer is 3.","solution":"def count_increases(n, rainfall_levels): increase_count = 0 for i in range(1, 2 * n): if rainfall_levels[i] > rainfall_levels[i - 1]: increase_count += 1 return increase_count"},{"question":"You are given a sequence of n activities, each with a start time and an end time. Your objective is to select the maximum number of non-overlapping activities. Each activity is represented by a pair of integers [si, ei], where si is the start time and ei is the end time of the activity. Write a function `max_non_overlapping_activities(n, activities)` that takes in the number of activities `n` (a single integer) and a list `activities` of `n` pairs of integers. The function should return an integer representing the maximum number of non-overlapping activities you can select. Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ si < ei ≤ 10^9 # Input The first line contains a single integer n, the number of activities. Each of the next n lines contains two integers si and ei, the start and end times of the ith activity. # Output Output a single integer, the maximum number of non-overlapping activities you can select. # Example Input: ``` 6 1 4 2 6 5 7 1 3 8 9 5 9 ``` Output: ``` 3 ``` # Explanation One possible solution is to select the activities [1, 3], [5, 7], and [8, 9], which gives us a total of 3 non-overlapping activities.","solution":"def max_non_overlapping_activities(n, activities): Returns the maximum number of non-overlapping activities. :param n: the number of activities :param activities: a list of pairs of integers, each representing the start and end time of an activity :return: the maximum number of non-overlapping activities # Sort the activities based on their ending time activities.sort(key=lambda x: x[1]) # Initialize counters count = 0 last_end_time = 0 # Iterate through activities for start, end in activities: # If the activity starts after or when the last one ends if start >= last_end_time: # Select this activity count += 1 # Update the end time of the last selected activity last_end_time = end # Return the number of activities return count"},{"question":"Given an array of integers of length n, you need to find the subarray with the maximum sum modulo m. More formally, given an integer array a and an integer m, your task is to find a subarray (continuous segment) of a whose sum modulo m is maximized. The first line of input contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9). The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. Output a single integer — the maximum sum modulo m that can be obtained from any subarray of a. Example: Input: 5 7 3 3 9 9 5 Output: 6 Explanation: In this example, the subarray [3, 3] has a sum of 6, which is the maximum sum modulo 7. The result is 6.","solution":"import bisect def max_subarray_sum_modulo(a, m): Finds the subarray with the maximum sum modulo m. Parameters: a (list of int): List of integers representing the array. m (int): The modulo value. Returns: int: The maximum sum modulo m obtainable from any subarray. prefix_sum = 0 max_mod_sum = 0 prefix_sums = [0] for value in a: prefix_sum = (prefix_sum + value) % m max_mod_sum = max(max_mod_sum, prefix_sum) idx = bisect.bisect_right(prefix_sums, prefix_sum) if idx < len(prefix_sums): max_mod_sum = max(max_mod_sum, (prefix_sum - prefix_sums[idx] + m) % m) bisect.insort(prefix_sums, prefix_sum) return max_mod_sum"},{"question":"Berland has n cities connected by m roads. Each road has a certain length. Polycarp, a traveler, planned his trip in Berland in such a way that he starts his journey in city 1 and wants to visit all the cities and return to city 1 in the shortest time possible. You need to help Polycarp by finding the length of the shortest route that starts at city 1, passes through all cities exactly once, and returns to city 1. The first line of input contains two integers n (2 ≤ n ≤ 10) and m (0 ≤ m ≤ 45) — the number of cities in Berland and the number of roads, respectively. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 10) — the endpoints of the road and the length of the road. If there is no route that satisfies the criteria, you should print -1. Otherwise, print the length of the shortest route. # Example: Input: ``` 4 4 1 2 2 2 3 3 3 4 4 4 1 5 ``` Output: ``` 14 ``` In the example above, the shortest route for Polycarp is 1 → 2 → 3 → 4 → 1 with a total distance of 14.","solution":"import itertools def find_shortest_route(n, m, roads): # Create the adjacency matrix adj_matrix = [[float(\'inf\')] * n for _ in range(n)] for u, v, l in roads: adj_matrix[u-1][v-1] = l adj_matrix[v-1][u-1] = l # Function to calculate the distance of given path def path_length(path): length = 0 for i in range(n): length += adj_matrix[path[i]][path[(i + 1) % n]] if adj_matrix[path[i]][path[(i + 1) % n]] == float(\'inf\'): return float(\'inf\') return length # Generate all permutations of cities except the first one cities = list(range(1, n)) min_distance = float(\'inf\') for perm in itertools.permutations(cities): route = [0] + list(perm) + [0] # Starting and ending at city 1 min_distance = min(min_distance, path_length(route)) return -1 if min_distance == float(\'inf\') else min_distance"},{"question":"You have recently been hired as a software engineer at a logistics company. Your first task is to help optimize the warehouse inventory management system. The warehouse stores a variety of products, and you want to ensure that all products are stored efficiently to minimize the space used while ensuring products are accessible. You have a list of products and each product has a specific demand. Based on the demand, you categorize the products into different shelves. The warehouse has n shelves and each shelf has a maximum capacity. You need to write a program to distribute the products across the shelves such that the total demand of products on any shelf does not exceed its capacity and the total number of unique shelves used is minimized. The first line of input contains two integers: - n: the number of shelves (1 ≤ n ≤ 100) - m: the number of products (1 ≤ m ≤ 1000) The second line contains n space-separated integers representing the capacities of the shelves (1 ≤ capacity_i ≤ 10^5). The third line contains m space-separated integers representing the demands of the products (1 ≤ demand_i ≤ 10^5). Output the minimum number of shelves used to store all products. If it is impossible to store all products given the constraints, output -1. Example: ``` Input: 4 6 10 20 15 25 5 10 15 5 10 5 Output: 3 ``` Explanation: - You can store products with demands [5, 5] on the first shelf (total 10). - Products with demands [10, 10] on the second shelf (total 20). - And products with demands [15, 5] on the third shelf (total 20). The minimum number of shelves used is 3.","solution":"def min_shelves(n, m, capacities, demands): capacities.sort(reverse=True) demands.sort(reverse=True) shelves_used = 0 shelves_loads = [0] * n for demand in demands: placed = False for i in range(n): if shelves_loads[i] + demand <= capacities[i]: shelves_loads[i] += demand placed = True break if not placed: return -1 for load in shelves_loads: if load > 0: shelves_used += 1 return shelves_used"},{"question":"You are given an array of integers and q queries. Each query consists of two integers l and r, and for each query, you need to find the number of distinct elements in the subarray from index l to r (inclusive). The first line of the input contains two integers n and q (1 ≤ n ≤ 100000, 1 ≤ q ≤ 100000) – the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000), the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing the range of the subarray. Output q lines, each containing the number of distinct elements in the specified subarray. Example input: ``` 5 3 1 2 1 3 2 1 3 2 4 1 5 ``` Example output: ``` 2 3 3 ```","solution":"def count_distinct_elements(arr, queries): results = [] for l, r in queries: # Slice the subarray and convert to set to find distinct elements subarray = arr[l-1:r] distinct_elements = set(subarray) results.append(len(distinct_elements)) return results"},{"question":"Max the Mathematician has recently become interested in graphs. He has an unweighted, undirected graph with `n` nodes and `m` edges. Max is tasked with calculating the shortest path from a given start node to all other nodes in the graph utilizing the Breadth-First Search (BFS) algorithm. However, Max noticed that some nodes might be disconnected from the start node, meaning there is no possible path connecting them. To address this, if a node is unreachable from the start node, Max will put `-1` as the distance to that node. Your task is to help Max implement the code to find the shortest path distances using BFS. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the number of nodes and edges in the graph, respectively. - The following `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge connecting node `u` and node `v`. - The last line contains a single integer `s` (1 ≤ s ≤ n), which is the start node for the BFS. # Output: - Print `n` integers, where the `i-th` integer represents the shortest distance from the start node `s` to the node `i+1` (1-based index). If a node is unreachable, print `-1` for that node. The distance to the start node itself should be `0`. # Example: **Input:** ``` 6 5 1 2 2 3 3 4 1 5 5 6 1 ``` **Output:** ``` 0 1 2 3 1 -1 ``` **Note:** - Node 1 is the start node with distance 0 to itself. - Node 2 is reachable from node 1 with a distance of 1. - Node 3 is reachable from node 1 through node 2 with a distance of 2. - Node 4 is reachable from node 1 through nodes 2 and 3 with a distance of 3. - Node 5 is reachable from node 1 with a distance of 1. - Node 6 is not reachable from the start node within the graph, so its distance is `-1`.","solution":"from collections import deque def bfs_shortest_path(n, m, edges, start): adjacency_list = {i: [] for i in range(1, n+1)} for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) distances = [-1] * n distances[start-1] = 0 queue = deque([start]) visited = [False] * (n+1) visited[start] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True distances[neighbor-1] = distances[node-1] + 1 queue.append(neighbor) return distances"},{"question":"You have been given an integer array of size ( n ) with integers ranging from 1 to ( n-1 ). There is a single duplicate element (repeated twice) and the rest of the elements appear exactly once. Your task is to find the duplicate element. **Input:** - The first line contains an integer ( t ) (( 1 leq t leq 10,000 )) denoting the number of test cases. - Each test case consists of two lines. The first line contains one integer ( n ) (( 2 leq n leq 200,000 )): the length of the array. - The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (( 1 leq a_i leq n-1 )), representing the array with exactly one duplicate. The total sum of ( n ) over all test cases will not exceed 2,000,000. **Output:** For each test case, output a single integer denoting the duplicate element. **Example:** **Input:** ``` 3 5 1 3 4 2 4 4 1 2 3 2 6 5 3 2 1 4 3 ``` **Output:** ``` 4 2 3 ``` **Explanation:** In the first test case, the array is [1, 3, 4, 2, 4] and the duplicate element is 4. In the second test case, the array is [1, 2, 3, 2] and the duplicate element is 2. In the third test case, the array is [5, 3, 2, 1, 4, 3] and the duplicate element is 3.","solution":"def find_duplicate(arr): Finds the duplicate element in an array where elements range from 1 to n-1 and exactly one element is duplicated. seen = set() for num in arr: if num in seen: return num seen.add(num) def process_test_cases(test_cases): Processes multiple test cases to find duplicates in each. results = [] for n, arr in test_cases: results.append(find_duplicate(arr)) return results"},{"question":"Farmer John has a rectangular field which is divided into N times M cells, each represented by either \'.\' (an empty cell) or \'*\' (a cell with a tree). Farmer John wants to place a scarecrow in some of the empty cells in such a way that every tree has a scarecrow in one of the immediately adjacent cells (above, below, left, or right). You need to determine the minimum number of scarecrows required to ensure that every tree is adjacent to at least one scarecrow. Input The first line of the input contains two integers N and M (1 leq N, M leq 1000) — the number of rows and columns in the field, respectively. The next N lines each contain a string of length M, representing the field. Each character in the string is either \'.\' or \'*\'. Output Output a single integer — the minimum number of scarecrows required. Example Input 3 3 .*. *.. ..* Output 3 Explanation: In the example, one possible way to place the scarecrows is: S*S S.* .S* Where S represents the scarecrow. There are other possible solutions, but the minimum number of scarecrows needed is 3.","solution":"def min_scarecrows(N, M, field): Returns the minimum number of scarecrows required to ensure that every tree has a scarecrow in one of the immediately adjacent cells (above, below, left, or right). scarecrows = [[0] * M for _ in range(N)] # Helper function to check if a cell is within boundaries def in_bounds(x, y): return 0 <= x < N and 0 <= y < M # List of directions for adjacent cells (right, left, bottom, top) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Iterate over all cells to place scarecrows for i in range(N): for j in range(M): if field[i][j] == \'*\': tree_protected = False for dx, dy in directions: nx, ny = i + dx, j + dy if in_bounds(nx, ny) and scarecrows[nx][ny] == 1: tree_protected = True break if not tree_protected: for dx, dy in directions: nx, ny = i + dx, j + dy if in_bounds(nx, ny) and field[nx][ny] == \'.\': scarecrows[nx][ny] = 1 break return sum(sum(row) for row in scarecrows) # Example usage N = 3 M = 3 field = [ \\".*.\\", \\"*..\\", \\"..*\\", ] print(min_scarecrows(N, M, field)) # Output: 3"},{"question":"Johnny is trying to sort the books on his shelf in a particular manner. Each book has a unique integer identifier, and he prefers a unique order. He has a list of books already on the shelf, and he wants to add more books one by one in a way that maximizes a certain criterion. Starting with an empty shelf, Johnny adds books in a specific sequence. At every step, whenever he adds a new book, he wants to ensure that the shelf so far is as sorted as possible at all times in non-decreasing order of book identifiers. Formally, you are given an array `a` of length `m`, where each element denotes the identifiers of the books Johnny adds to the shelf sequentially. Your task is to determine the length of the longest subsequence of the array `a` that remains sorted in non-decreasing order as Johnny adds each new book to the shelf. # Input - The first line contains an integer `m` (1 le m le 10^5) — the number of books Johnny is going to add. - The second line contains `m` integers `a1, a2, ..., am` (1 le ai le 10^5) — the identifiers of the books in the order they are added. # Output - Print a single integer — the length of the longest non-decreasing subsequence during the process of adding books. # Example Input ``` 6 5 1 3 2 6 4 ``` Output ``` 3 ``` Explanation In the example above, one possible longest non-decreasing subsequence while adding the books could be `[1, 3, 6]` with length 3. Notes - This problem can be efficiently solved using a dynamic programming approach or data structures that efficiently handle subsequence problems, such as segment trees or binary indexed trees (Fenwick trees).","solution":"from bisect import bisect_left def longest_non_decreasing_subsequence(m, a): Returns the length of the longest non-decreasing subsequence while adding books to the shelf. :param m: int - the number of books Johnny is going to add :param a: List[int] - the book identifiers in the order they are added :return: int - length of the longest non-decreasing subsequence if m == 0: return 0 # This will hold the end elements of our current subsequences subseq = [] for book in a: pos = bisect_left(subseq, book) # If pos is equal to the length of subseq, it means book is greater than all elements in subseq if pos == len(subseq): subseq.append(book) else: subseq[pos] = book return len(subseq)"},{"question":"You are given an array containing exactly `2N` integers, where `N` is a positive integer. Your task is to rearrange the array such that each element in the first `N` elements is paired with one unique element from the second `N` elements, and their sum is even. Determine the maximum number of such pairs that can be created. Input begins with an integer `2N` (2 ≤ `2N` ≤ 200,000), representing the total number of integers. The next line contains exactly `2N` integers a1, a2, ..., a2N (1 ≤ ai ≤ 10^6). Output the maximum number of pairs where the sum of each pair is even. For example, consider the array [2, 3, 4, 5, 6, 7]. A possible solution can be pairing (2, 4), (6, 4), (3, 7) with an even sum in each pair. The maximum number of such pairs is 3. Print the maximum number of pairs that can be created where the sum of each pair is even. In the first example, an array of [1, 2, 3, 4, 5, 6], we can pair (1, 3), (2, 4), (5, 5) with the sum being even - the output would be 3.","solution":"def max_even_sum_pairs(arr): # Separate the numbers into even and odd lists evens = [num for num in arr if num % 2 == 0] odds = [num for num in arr if num % 2 != 0] # The maximum number of pairs (even sum) we can form is the smaller count of evens or odds return min(len(evens), len(odds)) # Example usage if __name__ == \\"__main__\\": arr = [2, 3, 4, 5, 6, 7] print(max_even_sum_pairs(arr)) # Output: 3"},{"question":"The National Spelling League is hosting its annual Spelling Bee competition. n participants have registered for the competition. During the registration, each participant received a unique ID and chose a difficulty level for their practice words. Each practice word has a certain difficulty level ranging from 1 to 100. A participant can practice multiple words, but their chosen difficulty level for practice words cannot change. Over time, participants accumulate practice points for each correctly spelled word corresponding to its difficulty level. We\'re given the list of words a participant has spelled correctly with their associated difficulty levels. Now, it\'s your task to determine the total score for each participant based on their correctly spelled words. The first line contains an integer n (1 ≤ n ≤ 100) — the number of participants. The next n lines contain the participant\'s ID as a string, followed by an integer d (1 ≤ d ≤ 100) — the chosen difficulty level for practice words. Then follow m lines, each containing a participant\'s ID as a string, followed by an integer w (1 ≤ w ≤ 100) — the difficulty level of the word they spelled correctly. Assume that the participant\'s ID and difficulty level during registration are correctly provided, and each participant\'s correctly spelled words list is valid according to their chosen difficulty level. Print the total score for each participant in the following format: ``` ID1 score1 ID2 score2 ... IDn scoren ``` where IDs are printed in the order they were provided during registration.","solution":"def calculate_scores(n, registration_data, m, words_data): scores = {participant[0]: 0 for participant in registration_data} difficulty_level = {participant[0]: participant[1] for participant in registration_data} for word_data in words_data: pid, difficulty = word_data if difficulty == difficulty_level[pid]: scores[pid] += difficulty return scores def format_scores(scores): result = [] for pid, score in scores.items(): result.append(f\\"{pid} {score}\\") return \\"n\\".join(result)"},{"question":"Alice is developing an inventory management system for a warehouse. The warehouse stores items in stacks, where each stack contains a different type of item. Each item type has a specific quantity of items in its stack. The system needs to handle two types of operations: 1. Add a quantity of items to a specific stack. 2. Remove a quantity of items from a specific stack, ensuring that the quantity to be removed does not exceed the current number of items in that stack. Given the initial quantities of each item type and a list of operations, help Alice determine the final quantity of items in each stack after all operations have been executed. The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), where n is the number of different item types and q is the number of operations. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), where ai represents the initial quantity of items in the i-th stack. The next q lines describe the operations. Each operation is given as three integers ti, si, and xi (1 ≤ ti ≤ 2, 1 ≤ si ≤ n, 0 ≤ xi ≤ 10^9), where ti indicates the type of operation, si indicates the stack index (1-based), and xi indicates the quantity of items to be added or removed. - If ti = 1, add xi items to the si-th stack. - If ti = 2, remove xi items from the si-th stack (xi does not exceed the current quantity of items in the stack). Print the final quantities of items in each stack after all operations are performed. Example: ``` Input: 5 3 10 20 30 40 50 1 3 10 2 2 15 1 5 5 Output: 10 5 40 40 55 ```","solution":"def manage_inventory(n, q, initial_quantities, operations): Manages the inventory based on the given operations. Parameters: n (int): Number of different item types. q (int): Number of operations. initial_quantities (list): Initial quantities of each item type. operations (list): List of operations to be performed. Returns: list: Final quantities of items in each stack after all operations. # Create an array representing the quantity of items in each stack stacks = initial_quantities[:] for operation in operations: ti, si, xi = operation if ti == 1: stacks[si - 1] += xi elif ti == 2: stacks[si - 1] -= xi return stacks"},{"question":"Petya loves sequences and he recently learned about a new type of integer sequence called a \\"mirror sequence.\\" A sequence is called a mirror sequence if it can be divided into two parts such that the second part is the reverse of the first part. For instance, the sequence [1, 2, 3, 3, 2, 1] is a mirror sequence because the second part [3, 2, 1] is the reverse of the first part [1, 2, 3]. Given a sequence of integers, Petya wants to determine the minimum number of elements he needs to add to this sequence to make it a mirror sequence. If the sequence is already a mirror sequence, the number of elements to add is zero. The first line of the input contains a single integer n (1 le n le 1000) — the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the sequence. Output a single integer — the minimum number of elements that need to be added to make the given sequence a mirror sequence. # Example Input ``` 6 1 2 3 4 2 1 ``` Output ``` 1 ``` # Explanation In the example, the sequence [1, 2, 3, 4, 2, 1] requires the addition of one element \\"3\\" at the end to make it a mirror sequence [1, 2, 3, 4, 2, 1, 3].","solution":"def min_elements_to_add_for_mirror_sequence(n, sequence): def find_lps_length(sequence): # Length of Longest Palindromic Subsequence (LPS) m = len(sequence) dp = [[0] * m for _ in range(m)] for i in range(m): dp[i][i] = 1 for cl in range(2, m + 1): for i in range(m - cl + 1): j = i + cl - 1 if sequence[i] == sequence[j] and cl == 2: dp[i][j] = 2 elif sequence[i] == sequence[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][m - 1] max_lps_len = find_lps_length(sequence) return n - max_lps_len"},{"question":"In the prehistoric era, the kings of Byteland organized a grand competition to find the fastest and most accurate Calculus Master. The competition involved a challenge where participants had to determine the sum of the depths of all possible valleys that could be formed by a series of mountains. A participant needs to determine the depths of valleys formed between adjacent mountains. A valley\'s depth is defined as the minimum height of the two adjacent mountains that form the valley. Given a sequence of integers representing the heights of the mountains, the task is to compute the sum of the depths of all possible valleys formed by these mountains. The input consists of a single integer ( n ) followed by ( n ) integers representing the heights of the mountains in order. The output should be the sum of the depths of all valleys. # Input - The first line contains an integer ( n ) (2 leq n leq 10^5) — the number of mountains. - The second line contains ( n ) space-separated integers ( h_1, h_2, ldots, h_n ) (1 leq h_i leq 10^9) — the heights of the mountains. # Output - Print a single integer — the sum of the depths of all possible valleys. # Example Input ``` 5 3 1 4 1 5 ``` Output ``` 3 ``` Explanation In this example, the valleys and their depths are as follows: - Between the 1st and 2nd mountains: depth = min(3, 1) = 1 - Between the 2nd and 3rd mountains: depth = min(1, 4) = 1 - Between the 3rd and 4th mountains: depth = min(4, 1) = 1 - Between the 4th and 5th mountains: depth = min(1, 5) = 1 Sum of depths = 1 + 1 + 1 + 1 = 4","solution":"def sum_of_valley_depths(n, heights): Returns the sum of the depths of all valleys formed by the given sequence of mountain heights. total_depth = 0 for i in range(n - 1): total_depth += min(heights[i], heights[i + 1]) return total_depth"},{"question":"Given two strings, S and T, determine if T is an anagram of S, i.e., if T can be rearranged to form S by changing the positions of the characters. - Both strings will contain only lowercase English letters. - The lengths of S and T are both between 1 and 100,000. Write a function that, given two strings S and T, returns \\"YES\\" if T is an anagram of S, and \\"NO\\" otherwise. The function should have the following signature: ```python def is_anagram(S: str, T: str) -> str: pass ``` **Example:** 1. For `S = \\"listen\\"` and `T = \\"silent\\"`, the function should return \\"YES\\". 2. For `S = \\"triangle\\"` and `T = \\"integral\\"`, the function should return \\"YES\\". 3. For `S = \\"hello\\"` and `T = \\"bello\\"`, the function should return \\"NO\\". **Input:** - S: a string of lowercase English letters (1 ≤ |S| ≤ 100,000) - T: a string of lowercase English letters (1 ≤ |T| ≤ 100,000) **Output:** - A string, either \\"YES\\" or \\"NO\\".","solution":"def is_anagram(S: str, T: str) -> str: Determines if T is an anagram of S. :param S: Original string. :param T: String to test if anagram of S. :return: \\"YES\\" if T is an anagram of S, otherwise \\"NO\\". from collections import Counter return \\"YES\\" if Counter(S) == Counter(T) else \\"NO\\""},{"question":"The company Data Dynamics is developing a new data compression algorithm. The algorithm operates on a sequence of bytes and transforms it into a compressed representation. One of the key steps in the compression process involves identifying and encoding patterns in the byte sequence efficiently. Your task is to implement this step by finding all unique subarrays of a given length `k` within the sequence and assigning each subarray a unique identifier. Each subarray in the given sequence is a contiguous sequence of bytes of length `k`. You need to find all unique subarrays of length `k` and output the number of such unique subarrays. If `k` is larger than the length of the sequence `n`, the output should be 0. The first line of input contains two integers `n` and `k` (1 ≤ n ≤ 10000, 1 ≤ k ≤ 100), the length of the byte sequence and the length of the subarrays, respectively. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 255), representing the bytes in the sequence. Print a single integer: the number of unique subarrays of length `k`. Example: ``` Input: 8 3 1 2 1 2 1 3 2 1 Output: 5 ``` Explanation: The unique subarrays of length 3 in the given sequence are: - [1, 2, 1] - [2, 1, 2] - [1, 2, 1] (already counted, so not unique) - [2, 1, 3] - [1, 3, 2] - [3, 2, 1] There are 5 unique subarrays of length 3 in total.","solution":"def unique_subarrays_count(n, k, sequence): Find the number of unique subarrays of length k in the given sequence of bytes. if k > n: return 0 unique_subarrays = set() for i in range(n - k + 1): subarray = tuple(sequence[i:i + k]) unique_subarrays.add(subarray) return len(unique_subarrays)"},{"question":"In a distant galaxy, there is a unique species of creatures called Zargs. Zargs have a peculiar way of arranging their food in a straight line. Each Zarg has a preferred segment of this line to gather food from, defined by two integers a and b, where a is the starting point and b is the ending point of the segment. The Zargs always choose their segments in such a way that no two segments overlap, i.e., for every pair of segments (ai, bi) and (aj, bj) either bi < aj or bj < ai. When Zargs decide to gather food, they can choose any segment of the line and extend it as needed to cover more area. Given a list of initial segments chosen by the Zargs, your task is to determine the minimal number of extensions needed to convert each segment such that they form a continuous path without any gaps. An extension can be made to either end of a segment. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of segments. The next n lines each contain two space-separated integers ai and bi (1 ≤ ai < bi ≤ 10^6) — the initial segments. Print a single integer — the minimal number of extensions needed so that the segments form a continuous path from the leftmost point of the first segment to the rightmost point of the last segment. **Example:** ``` Input: 3 1 3 5 8 10 12 Output: 2 Explanation: - The first segment is (1, 3). - The second segment is (5, 8), which requires one extension to the left to cover the gap from 4 to 5. - The third segment is (10, 12), which requires one extension to the left to cover the gap from 9 to 10. - Therefore, a total of 2 extensions are required. ```","solution":"def min_extensions(segments): Given a list of non-overlapping segments, determine the minimal number of extensions needed to convert them such that they form a continuous path without any gaps. :param segments: List of tuples, where each tuple contains two integers (a, b) representing the start and end of a segment. :return: Integer representing the minimal number of extensions needed. # Sort segments based on their starting points segments.sort() # Initialize the number of extensions needed extensions_count = 0 # Initialize the end of the previous segment previous_end = segments[0][1] for i in range(1, len(segments)): current_start, current_end = segments[i] # If there is a gap between the current segment and the previous segment if current_start > previous_end + 1: extensions_count += current_start - previous_end - 1 # Update the end of the previous segment previous_end = max(previous_end, current_end) return extensions_count"},{"question":"Dance Revolution Tech (DRT) is hosting a virtual dance competition using a specialized software that tracks the participants\' dance moves. The software generates a score based on the accuracy of their movements with respect to the beat. To analyze the competition, you need to process the data to determine the winner. The participants are identified by unique IDs, and the software logs their scores at various checkpoints. Each participant might have multiple scores recorded during the competition. The winner of the competition is the participant with the highest average score. The first line of input contains the integer n (1 ≤ n ≤ 100) — the number of participants. The second line contains the integer m (1 ≤ m ≤ 1000) — the number of recorded scores. The following m lines each contain two integers p and s (1 ≤ p ≤ n, 1 ≤ s ≤ 100) — indicating that participant p received a score s at a checkpoint. If there are multiple participants with the highest average score, the participant with the smallest ID should be declared as the winner. Print the ID of the winning participant. For example: Input: 3 5 1 80 2 90 1 70 2 95 3 90 Output: 2 Explanation: - Participant 1 has scores 80 and 70, with an average of 75. - Participant 2 has scores 90 and 95, with an average of 92.5. - Participant 3 has a score of 90. Participant 2 has the highest average score of 92.5, so the output is 2.","solution":"def find_winner(n, m, scores): Finds the participant with the highest average score. Parameters: n (int): Number of participants m (int): Number of recorded scores scores (list of tuples): Each tuple contains participant ID and score Returns: int: The ID of the winning participant from collections import defaultdict # Dictionary to store total scores and count of scores per participant participant_scores = defaultdict(lambda: [0, 0]) # [total_score, count] for p, s in scores: participant_scores[p][0] += s participant_scores[p][1] += 1 best_avg = -1 best_id = -1 for p in range(1, n + 1): if participant_scores[p][1] > 0: avg_score = participant_scores[p][0] / participant_scores[p][1] if avg_score > best_avg or (avg_score == best_avg and p < best_id): best_avg = avg_score best_id = p return best_id"},{"question":"Petya has just recently developed a new interest in astronomy and enjoys observing the beautiful night sky. One evening, he comes up with an interesting mathematical challenge for himself. Given a number n representing the number of stars, he wishes to find out in how many unique ways he can arrange these stars in groups such that each group contains at least two stars. Formally, given an integer n, you are to determine in how many unique ways Petya can partition the stars into groups where each group has at least 2 stars. For instance, if n = 5, then the valid partitions would be (2, 3) since each of these groups contains at least 2 stars. Note that (3, 2) is considered the same as (2, 3), so we do not count duplicates. Implement a function to calculate this number. The input will consist of a single line containing an integer n (2 leq n leq 1000), representing the number of stars. Print a single integer, the number of ways Petya can group the stars following the rules mentioned above. **Example:** Input: ``` 5 ``` Output: ``` 2 ``` Explanation: The valid groups for 5 stars are (2, 3) and no other combination as each group must have at least 2 stars.","solution":"def count_unique_partitions(n): Returns the number of unique ways to partition n stars into groups where each group has at least 2 stars. if n < 4: return 0 # Dictionary to store unique pairs, to ensure order does not matter partitions = {} # Iterate over each possible group size for i in range(2, n): for j in range(i, n): if i + j == n: partitions[(i, j)] = True return len(partitions)"},{"question":"Given a sequence of integers, you are to determine the length of the longest contiguous subsequence such that after reversing this subsequence, the whole sequence becomes sorted in ascending order. For example, given the sequence a=[1, 3, 5, 4, 2, 6, 7], the longest such subsequence is [5, 4, 2] because reversing it results in the sorted sequence [1, 2, 3, 4, 5, 6, 7]. The first line of input contains a single integer n (1 le n le 2 cdot 10^5) — the number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — elements of the sequence. Print one integer — the length of the longest contiguous subsequence that, when reversed, results in the original sequence being sorted in ascending order. # Example **Input:** ``` 7 1 3 5 4 2 6 7 ``` **Output:** ``` 3 ``` **Explanation:** Reversing the subsequence [5, 4, 2] results in the sequence [1, 2, 3, 4, 5, 6, 7], which is sorted in ascending order. Therefore, the length of the longest such subsequence is 3.","solution":"def longest_reversible_subsequence(n, a): Determines the length of the longest contiguous subsequence such that after reversing, the whole sequence becomes sorted in ascending order. Parameters: n (int): Number of elements in the sequence. a (list of int): The sequence of integers. Returns: int: Length of the longest such contiguous subsequence. left = 0 while left < n-1 and a[left] <= a[left+1]: left += 1 if left == n-1: return 0 # The list is already sorted right = n - 1 while right > 0 and a[right - 1] <= a[right]: right -= 1 if right == 0: return 0 # The list is already sorted max_len = right - left + 1 return max_len def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) a = list(map(int, data[1:])) print(longest_reversible_subsequence(n, a)) if __name__ == \\"__main__\\": main()"},{"question":"A new video game has just been released, and you are tasked with analyzing the performance of the players. The game involves collecting artifacts. Each artifact has a rarity value associated with it, and players can collect multiple artifacts in a single game session. You are given the number of players, the number of artifacts each player has collected, and the rarity values of these artifacts. Your goal is to find the highest total rarity value of artifacts for any single player. The input format is as follows: - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of players. - The next n lines contain information about the artifacts collected by each player. Each line starts with an integer k (1 ≤ k ≤ 100) - the number of artifacts collected by the player, followed by k space-separated integers representing the rarity values of these artifacts (1 ≤ rarity value ≤ 1000). The output should be the highest total rarity value of artifacts collected by a single player. Example: Input: ``` 3 4 100 200 300 400 3 50 60 70 5 30 500 20 10 40 ``` Output: ``` 1000 ``` Explanation: - Player 1 has collected artifacts with a total rarity value of 100 + 200 + 300 + 400 = 1000. - Player 2 has collected artifacts with a total rarity value of 50 + 60 + 70 = 180. - Player 3 has collected artifacts with a total rarity value of 30 + 500 + 20 + 10 + 40 = 600. - Therefore, the highest total rarity value is 1000.","solution":"def highest_total_rarity(n, players_data): Returns the highest total rarity value of artifacts collected by a single player. Parameters: n (int): The number of players. players_data (list of list): Each sublist contains the rarity values of artifacts collected by a player. Returns: int: The highest total rarity value of artifacts for any single player. highest_rarity = 0 for player_data in players_data: total_rarity = sum(player_data) if total_rarity > highest_rarity: highest_rarity = total_rarity return highest_rarity"},{"question":"Students in a certain school love to play a game called \\"Matrix Path\\". The game is played on a grid-like classroom floor, represented as an `n x m` matrix, where `n` is the number of rows and `m` is the number of columns. Each cell of the matrix contains a number which indicates the cost of stepping on that cell. The objective of the game is to move from the top-left corner of the matrix to the bottom-right corner with the minimum possible total cost. You can only move right or down from a given cell. Given the matrix, you need to calculate the minimum cost required to reach the bottom-right corner starting from the top-left corner. # Input The first line of the input contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 100), the number of rows and columns of the matrix respectively. Following this are `n` lines, each containing `m` integers separated by spaces. The `j-th` integer in the `i-th` line represents the cost `c[i][j]` (1 ≤ `c[i][j]` ≤ 100) of stepping on the cell located at row `i` and column `j`. # Output Output a single integer, the minimum cost required to reach cell (n, m) from cell (1, 1). # Example **Input:** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 7 ``` **Explanation:** One optimal path from (1, 1) to (3, 3) with the minimum cost: - Start at (1, 1), cost = 1 - Move to (1, 2), cost = 1 + 3 = 4 - Move to (1, 3), cost = 4 + 1 = 5 - Move to (2, 3), cost = 5 + 1 = 6 - Move to (3, 3), cost = 6 + 1 = 7","solution":"def min_path_cost(matrix): n = len(matrix) m = len(matrix[0]) # Creating a 2D dp array and initializing the top-left corner dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] # The minimum cost to reach the bottom-right corner return dp[n - 1][m - 1]"},{"question":"You are a gardener in charge of a large, rectangular garden. The garden is divided into a grid of cells, each of which can either contain a plant or be empty. Your task is to water all plants, using the following rule: you can pour water on any cell and it spreads to all cells in the same row and column as the chosen cell. Given the initial layout of the garden, determine the minimum number of water pours required to water all plants. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden. Each of the next n lines contains m characters. Each character is either \'.\' (indicating an empty cell) or \'*\' (indicating a cell with a plant). Output a single integer — the minimum number of water pours required to water all plants. # Example Input: ``` 3 4 .*.. ..*. .... ``` Output: ``` 2 ``` Explanation: In this example, you can water all plants by pouring water on the cell in the first column of the second row and the cell in the second column of the first row.","solution":"def minimum_water_pours(n, m, garden): Returns the minimum number of water pours required to water all plants in the garden. Parameters: n (int): Number of rows in the garden. m (int): Number of columns in the garden. garden (list[list[str]]): Garden grid containing \'.\' for empty cells and \'*\' for cells with plants. Returns: int: Minimum number of water pours required to water all plants. rows_with_plants = set() columns_with_plants = set() for i in range(n): for j in range(m): if garden[i][j] == \'*\': rows_with_plants.add(i) columns_with_plants.add(j) return min(len(rows_with_plants), len(columns_with_plants))"},{"question":"Joseph is training for a marathon, and he practices running on a straight path with specific milestones. The path can be represented as an array where each element signifies a milestone and its value represents the energy boost or depletion Joseph gets by reaching that milestone. Positive values give him energy, while negative values deplete his energy. Joseph starts with an initial energy level of `E` and moves from the first milestone to the last. If at any milestone his energy drops to zero or below, he can\'t move forward anymore, effectively ending his practice for the day. Given the array of milestones, determine the maximum energy Joseph can have at the end if he follows an optimal path. Note that Joseph can\'t skip any milestones; he must visit each milestone sequentially. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of milestones. - The second line contains `n` space-separated integers representing the energy values at each milestone. - The third line contains an integer `E` (1 ≤ E ≤ 1000) — Joseph\'s initial energy. # Output - Output a single integer — the maximum energy Joseph can have when he reaches the last milestone if he follows the optimal path. If Joseph can\'t reach the last milestone, output `-1`. # Example ``` Input: 5 2 -3 4 -1 3 5 Output: 10 ``` In this example, with initial energy of 5, Joseph: - Gains 2 (Energy: 5 + 2 = 7) - Loses 3 (Energy: 7 - 3 = 4) - Gains 4 (Energy: 4 + 4 = 8) - Loses 1 (Energy: 8 - 1 = 7) - Gains 3 (Energy: 7 + 3 = 10) So, the maximum energy Joseph can have at the last milestone is 10.","solution":"def maximum_energy(n, milestones, E): Given the number of milestones `n`, a list of energy changes `milestones`, and an initial energy `E`, determine the maximum energy that can be achieved at the last milestone. energy = E for milestone in milestones: energy += milestone if energy <= 0: return -1 return energy"},{"question":"You are given a rectangular grid of size n times m. Some cells of the grid are empty, and some are blocked. You need to check if you can move from the top-left corner of the grid to the bottom-right corner. You are allowed to move to an adjacent cell (left, right, up, down) only if it is within the bounds of the grid and not blocked. Write a function that takes the following inputs: - the height n and width m of the grid - the list of coordinates of the blocked cells The function should return \\"YES\\" if you can move from the top-left corner to the bottom-right corner of the grid, or \\"NO\\" otherwise. # Input Format - The first line contains two integers n and m (1 leq n, m leq 1000) representing the height and width of the grid. - The second line contains an integer k (0 leq k leq n cdot m) indicating the number of blocked cells. - The following k lines each contain two integers r_i and c_i (1 leq r_i leq n, 1 leq c_i leq m) representing the row and column positions of the blocked cells. # Output Format Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". # Examples Example 1 ``` Input: 4 4 3 2 2 3 2 4 3 Output: YES ``` Example 2 ``` Input: 3 3 2 1 2 2 1 Output: NO ``` Example 3 ``` Input: 2 2 0 Output: YES ```","solution":"def can_move(n, m, blocked_cells): from collections import deque grid = [[0] * m for _ in range(n)] for r, c in blocked_cells: grid[r-1][c-1] = 1 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a matrix of integers a with n rows and m columns. Your task is to find three different cells such that the absolute difference between the minimum and the maximum of chosen cells is minimized. The first line contains two integers n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains m integers, representing the elements of the matrix a (1 ≤ a[i][j] ≤ 10000). Print one integer — the minimum possible value of the absolute difference between the maximum and the minimum of the chosen cells. Example: Input: 3 3 1 3 6 8 4 7 5 2 9 Output: 2 Explanation: From the given matrix, selecting cells with values (6, 7, 8): | 1 | 3 | 6 | | 8 | 4 | 7 | | 5 | 2 | 9 | The maximum value is 8 and the minimum value is 6, resulting in an absolute difference of 2.","solution":"from itertools import combinations def min_absolute_difference(matrix): Returns the minimum possible value of the absolute difference between the maximum and the minimum of three different chosen cells in the matrix. flattened = [cell for row in matrix for cell in row] min_diff = float(\'inf\') for comb in combinations(flattened, 3): current_diff = max(comb) - min(comb) if current_diff < min_diff: min_diff = current_diff return min_diff # Example usage matrix = [ [1, 3, 6], [8, 4, 7], [5, 2, 9], ] result = min_absolute_difference(matrix) print(result) # Output: 2"},{"question":"You are leading a team of robots exploring an alien planet. The planet is represented as a grid with n rows and m columns. Each cell can be either passable or an obstacle. Your robots must start at the top-left corner of the grid and reach the bottom-right corner of the grid. Robots can move in four possible directions: up, down, left, and right. Some cells may contain energy stations that provide a boost to the robots. The time it takes to move from one cell to another depends on the energy levels of the robots. The robots start with a certain amount of energy, and each movement costs a fixed amount of energy. Robots can only move to a passable cell if they have enough energy to cover the movement cost. The task is to find the minimum energy required for the robots to reach the target or to determine if it is impossible to reach the target. The first line contains three integers n, m, and e (1 ≤ n, m ≤ 100, 1 ≤ e ≤ 1000) - the dimensions of the grid and the initial energy level of the robots. The next n lines each contain m characters representing the grid: \'.\' for a passable cell, \'#\' for an obstacle, and \'E\' for an energy station. The last line contains two integers c and t (1 ≤ c ≤ 100, 1 ≤ t ≤ 100) - the energy cost per movement and the energy boost provided by an energy station. Output the minimum energy required for the robots to reach the bottom-right corner. If it is not possible to reach the bottom-right corner, output \\"Impossible\\". In the first sample test, the grid is a 3x3 matrix. The robots start with 10 units of energy and each movement costs 1 unit of energy. There are no energy stations in the grid. The shortest path to reach the target is 4 moves, which will cost 4 units of energy. The robots will have 6 units of energy remaining when they reach the target, so the answer is 10 (initial energy). If it were not possible to reach the target, the answer would be \\"Impossible\\".","solution":"from collections import deque def minimum_energy_required_to_reach_target(n, m, e, grid, c, t): # Convert grid to list of lists for easier manipulation grid = [list(row) for row in grid] def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: yield nx, ny queue = deque([(0, 0, e)]) # (x, y, remaining_energy) visited = set() visited.add((0, 0)) while queue: x, y, energy = queue.popleft() if (x, y) == (n-1, m-1): return e # Return initial energy if target is reached for nx, ny in neighbors(x, y): if (nx, ny) in visited or grid[nx][ny] == \'#\': continue new_energy = energy - c if grid[nx][ny] == \'E\': new_energy += t if new_energy >= 0: visited.add((nx, ny)) queue.append((nx, ny, new_energy)) return \\"Impossible\\" # Example usage n, m, e = 3, 3, 10 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] c, t = 1, 0 print(minimum_energy_required_to_reach_target(n, m, e, grid, c, t)) # Output: 10"},{"question":"Sheila has an array of n integers. She can perform an operation where she chooses three indices i, j, and k (1 ≤ i < j < k ≤ n) and increments the integers at these indices by one. Sheila wants to know the maximum number of times she can perform this operation until she can no longer choose three indices that follow the given condition. The first line contains an integer n (3 ≤ n ≤ 50) — the number of integers in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the elements of the array. Print the maximum number of operations Sheila can repeatedly apply. For example, if the initial array is [1, 3, 2, 6, 4], Sheila can perform the operation once by choosing indices 1, 2, and 3, resulting in the array [2, 4, 3, 6, 4]. She can no longer perform another operation since there are no longer three indices that fit the condition i < j < k. If the initial array is [0, 0, 0, 0, 0], Sheila can perform the operation multiple times until some of the integers reach a significant value.","solution":"def max_operations(n, arr): return (n * (n - 1) * (n - 2)) // 6"},{"question":"Alice is managing a treehouse network formed by n treehouses connected by n-1 bridges. Each bridge connects two treehouses and can carry light up but not carry traffic load if it exceeds a certain threshold. Alice wants to arrange some events in these treehouses. Each event has a weight and she must determine whether the events will exceed the capacity of any bridge forming a path connecting two treehouses. Given the following constraints: 1. Initially, all bridges can carry a fixed maximum weight W. 2. Each event has: - A weight ( e_w ) - Two treehouses ( u ) and ( v ) it will connect. Alice wants to be able to process q queries of two types: 1. Update the maximum weight capacity of a given bridge. 2. Check if an event between two treehouses will exceed the current maximum capacity of any bridge in the path between them. Write a function that answers these queries efficiently. # Input The first line contains three integers n (1 ≤ n ≤ 100,000), W (1 ≤ W ≤ 1,000,000), and q (1 ≤ q ≤ 100,000). Each of the next n-1 lines describes a bridge with three integers u, v (1 ≤ u, v ≤ n) and the initial capacity w (1 ≤ w ≤ 1,000,000). Each of the next q lines describes a query. A query is either: - \\"1 u v e_w\\": Checking if weight ( e_w ) (1 ≤ ( e_w ) ≤ 1,000,000) for an event between treehouses u and v exceeds any bridge\'s capacity in the path. - \\"2 u v w\\": Updating the weight capacity of the bridge between treehouses ( u ) and ( v ) to ( w ) (1 ≤ w ≤ 1,000,000). # Output For each query of type 1, print \\"YES\\" if the event\'s weight does not exceed the capacity of any bridge on the path, otherwise print \\"NO\\". # Example Input ``` 4 10 5 1 2 10 1 3 8 2 4 5 1 1 4 4 2 2 4 6 1 1 4 4 1 1 4 7 2 1 3 5 1 1 4 6 ``` Output ``` YES YES NO ``` Explanation: - The initial path capacities: - 1 to 4: path (1-2, 2-4) with capacities (10, 5) - 1 to 3: path (1-3) with capacity 8 - First query checks if weight 4 between 1 and 4 is valid: YES. - Updated bridge 2 to 4 capacity to 6. - Checked again if weight 4 is valid between 1 and 4: YES. - Checked if weight 7 is valid: NO as it exceeds updated capacity 6. - Updated capacity of bridge 1 to 3 to 5. - Last query checks if weight 6 between 1 and 4: NO since 6 exceeds capacity path (1-3-2-4) at least one bridge with updated capacity (5 or 6). Alice needs to constantly update and check paths within this network efficiently.","solution":"from collections import defaultdict, deque class TreehouseNetwork: def __init__(self, n, W): self.n = n self.W = W self.graph = defaultdict(dict) self.capacity = {} self.parent = list(range(n + 1)) self.rank = [0] * (n + 1) def add_bridge(self, u, v, w): self.graph[u][v] = w self.graph[v][u] = w self.capacity[(u, v)] = w self.capacity[(v, u)] = w def find_parent(self, u): if self.parent[u] != u: self.parent[u] = self.find_parent(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find_parent(u) root_v = self.find_parent(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u else: self.parent[root_u] = root_v if self.rank[root_u] == self.rank[root_v]: self.rank[root_v] += 1 def update_capacity(self, u, v, new_cap): self.graph[u][v] = new_cap self.graph[v][u] = new_cap self.capacity[(u, v)] = new_cap self.capacity[(v, u)] = new_cap def check_capacity(self, u, v, e_w): queue = deque([u]) visited = set([u]) while queue: current = queue.popleft() for neighbor in self.graph[current]: if neighbor not in visited: if self.graph[current][neighbor] < e_w: return \\"NO\\" visited.add(neighbor) if neighbor == v: return \\"YES\\" queue.append(neighbor) return \\"NO\\" def process_queries(n, W, bridges, queries): network = TreehouseNetwork(n, W) # Add initial bridges for u, v, w in bridges: network.add_bridge(u, v, w) network.union(u, v) results = [] for query in queries: tokens = query.split() type_query = int(tokens[0]) u = int(tokens[1]) v = int(tokens[2]) if type_query == 1: # Check event capacity e_w = int(tokens[3]) results.append(network.check_capacity(u, v, e_w)) elif type_query == 2: # Update bridge capacity new_w = int(tokens[3]) network.update_capacity(u, v, new_w) return results"},{"question":"Given a string `s` consisting of lowercase and uppercase English letters, rearrange the string in such a way that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, return `-1`. # Input - A single line containing the string `s` (1 ≤ |s| ≤ 100). # Output - If it is possible to rearrange the string as required, output the rearranged string. If there are multiple possible solutions, any one of them will be accepted. - If it is not possible, output `-1`. # Example Input 1: ``` aabbcc ``` Output 1: ``` abcabc ``` (Note: other valid solutions like \\"acbacb\\" or \\"bacbac\\" are also acceptable.) Input 2: ``` aaab ``` Output 2: ``` -1 ``` Explanation for Input 2: It is not possible to rearrange the string so that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string such that no two adjacent characters are the same. If it\'s not possible, return -1. # Count the frequency of each character freq = Counter(s) # Create a max heap based on characters frequency max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) # Add the previous character back if its count is non-zero if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Append current character to result and decrease its count result.append(char) prev_count, prev_char = count + 1, char # Join the result list to form the final string rearranged_string = \'\'.join(result) # If the length of the rearranged string is not same as input string, return -1 if len(rearranged_string) != len(s): return -1 return rearranged_string"},{"question":"In the Kingdom of Far Far Away lives a brilliant mathematician named Alice. She loves playing with numbers and has recently invented a new number sequence called the \\"Magic Sequence\\". A Magic Sequence is defined as follows: - The first element of the sequence is always 1. - The second element of the sequence is always 2. - For each subsequent element, the value is the sum of the last k elements in the sequence, where k is a fixed positive integer. Given the value of k and an integer n, calculate the nth element of the Magic Sequence. Write a function that returns the value of the nth element in the sequence. The input consists of two integers n (1 ≤ n ≤ 10^6) and k (1 ≤ k ≤ 20). The output should be a single integer, the nth element of the Magic Sequence. Example: Assume k = 2 and n = 5. - The Magic Sequence is as follows: - First element: 1 - Second element: 2 - Third element: 1 + 2 = 3 - Fourth element: 2 + 3 = 5 - Fifth element: 3 + 5 = 8 So, the output should be 8. Explanation: - For k = 2 and n = 5, the sequence starts with 1, 2 and then each subsequent element is the sum of the last 2 elements. Thus, the sequence progresses as 1, 2, 3, 5, 8. Additional Example: Assume k = 3 and n = 4. - The Magic Sequence is as follows: - First element: 1 - Second element: 2 - Third element: 1 + 2 = 3 - Fourth element: 1 + 2 + 3 = 6 So, the output should be 6. Note: Ensure your implementation efficiently handles large values of n up to 10^6. Consider using appropriate data structures and techniques to achieve this.","solution":"def magic_sequence(n, k): if n == 1: return 1 elif n == 2: return 2 sequence = [1, 2] for i in range(2, n): next_value = sum(sequence[-k:]) sequence.append(next_value) return sequence[n-1]"},{"question":"You are given a list of n cities connected by m roads. Each road connects two different cities and has an associated cost. A popular company wants to install a fiber optic network that connects all the cities together. To do this, they need to choose a subset of the roads such that there is exactly one way to travel between any two cities (i.e., the chosen roads form a tree) and the total cost of the roads is minimized. The first line of the input contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 4950) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — the endpoints of the road and its cost. Output the minimum cost required to install the fiber optic network. For example, if the input is: ``` 4 5 1 2 1 2 3 4 3 4 3 4 1 2 1 3 5 ``` The output should be `6`, as the optimal solution involves the roads with costs 1, 2, and 3.","solution":"def min_cost_to_connect_cities(n, m, roads): Returns the minimum cost to connect all the cities using the given roads. # Using Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Sort the roads based on their weights roads.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 # If we have used exactly (n-1) edges, we\'ve connected all cities if edges_used == n - 1: break return mst_cost"},{"question":"You are organizing a programming contest and need to manage the submission process. Each submission has a timestamp and a score. Each participant is allowed to submit multiple times, but only the highest score achieved by each participant will be considered for ranking. If multiple submissions have the same score, the submission with the earliest timestamp is preferred. Write a program to process the submissions and produce the final ranking list of participants. Each ranking list entry should contain the participant ID and their highest score. The first line of the input contains an integer n (1 le n le 10^5) — the number of submissions. Each of the next n lines contains three integers t_i, id_i, score_i (1 le t_i le 10^9, 1 le id_i le 10^5, 0 le score_i le 1000) where t_i is the timestamp of the submission, id_i is the participant ID, and score_i is the score of that submission. Print the final ranking list in descending order of scores. If two participants have the same score, the participant with an earlier highest scoring submission comes first. Each line should contain the participant ID and their highest score. # Example Input ``` 7 1 1 50 2 2 60 3 1 70 4 2 50 5 3 90 6 3 85 7 3 90 ``` Output ``` 3 90 1 70 2 60 ``` In this example, participant 3 achieved the highest score of 90 at timestamp 5, participant 1 achieved a highest score of 70 at timestamp 3, and participant 2 achieved a highest score of 60 at timestamp 2. Despite participant 3 making another submission at timestamp 7 with the same score of 90, the submission at timestamp 5 is used since it has an earlier timestamp.","solution":"def process_submissions(n, submissions): Process the submissions and produce the final ranking list of participants. :param n: Number of submissions :param submissions: List of tuples (timestamp, participant_id, score) :return: List of tuples (participant_id, highest_score) sorted based on the criteria from collections import defaultdict # Dictionary to store the best score and earliest timestamp for a participant participants = defaultdict(lambda: (-1, float(\'inf\'))) for t, id_, score in submissions: current_best_score, current_earliest_time = participants[id_] if (score > current_best_score) or (score == current_best_score and t < current_earliest_time): participants[id_] = (score, t) # Create a list of participant scores and sort by score and earliest timestamp ranking = [(id_, score, time) for id_, (score, time) in participants.items()] ranking.sort(key=lambda x: (-x[1], x[2])) # Convert to required output format result = [(id_, score) for id_, score, _ in ranking] return result"},{"question":"Moore is a librarian who works in a large library with a vast collection of books indexed by unique serial numbers. He recently received a special task: reorganize a sequence of books such that the sequence obtained by inserting one new book at any possible position results in a strictly increasing order of books by their serial numbers or a strictly decreasing order. Moore needs your help to determine whether it is possible to reorganize the given sequence of books to satisfy the above criteria. The first line contains an integer n (1 ≤ n ≤ 200,000), the number of books currently in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000,000) — the serial numbers of the books. Output \\"YES\\" if it is possible to reorganize the sequence as required, otherwise print \\"NO\\". Example: Input: 5 3 1 4 1 5 Output: YES Explanation: By reorganizing the sequence to [1, 1, 3, 4, 5], you can insert the new book at any position to keep the sequence either strictly increasing or strictly decreasing. If the input does not allow for such a reorganization, your program should print \\"NO\\".","solution":"def can_reorganize_sequence(n, serial_numbers): Determines if the sequence of books\' serial numbers can be reorganized such that inserting one new book at any possible position results in a strictly increasing or strictly decreasing order. if n == 1: return \\"YES\\" serial_numbers.sort() # Check for strictly increasing order possibility increasing = all(serial_numbers[i] != serial_numbers[i + 1] for i in range(n - 1)) # Check for strictly decreasing order possibility decreasing = all(serial_numbers[i] != serial_numbers[n - 1 - i] for i in range(n - 1)) return \\"YES\\" if increasing or decreasing else \\"NO\\""},{"question":"You are given a tree (i.e., a connected, undirected graph with no cycles) with `n` nodes and `n-1` edges. Each edge has an associated positive integer weight. Your task is to find the largest weighted path in the tree, where the weight of a path is defined as the sum of the weights of the edges in that path. The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. The first line of each test case contains an integer `n` (2 ≤ `n` ≤ 10^4) — the number of nodes in the tree. Each of the next `n-1` lines contains three integers `u`, `v` and `w` (1 ≤ `u`, `v` ≤ `n`, `1 ≤ w ≤ 10^6`) — the two nodes connected by the edge and the weight of the edge. It is guaranteed that the total number of nodes in all test cases does not exceed 10^5. Output the weight of the largest weighted path for each test case. **Example:** Input: ``` 2 3 1 2 3 2 3 4 4 1 2 1 2 3 2 3 4 3 ``` Output: ``` 7 6 ``` Explanation: - In the first test case, the largest weighted path is 1 → 2 → 3 with weight 3 + 4 = 7. - In the second test case, the largest weighted path is 1 → 2 → 3 → 4 with weight 1 + 2 + 3 = 6.","solution":"from collections import defaultdict, deque def bfs_farthest_node(tree, start_node): visited = set() queue = deque([(start_node, 0)]) farthest_node, max_distance = start_node, 0 while queue: current_node, current_distance = queue.popleft() visited.add(current_node) if current_distance > max_distance: farthest_node, max_distance = current_node, current_distance for neighbor, weight in tree[current_node]: if neighbor not in visited: queue.append((neighbor, current_distance + weight)) return farthest_node, max_distance def largest_weighted_path(test_cases): results = [] for case in test_cases: n, edges = case tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # Run BFS from any node to find the farthest node from it farthest_node_1, _ = bfs_farthest_node(tree, 1) # Run BFS from the farthest node found to get the maximum distance in the tree _, max_distance = bfs_farthest_node(tree, farthest_node_1) results.append(max_distance) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) edges = [] for i in range(n - 1): u, v, w = map(int, lines[index + 1 + i].split()) edges.append((u, v, w)) test_cases.append((n, edges)) index += n return test_cases def solution(input_string): test_cases = parse_input(input_string) results = largest_weighted_path(test_cases) return \'n\'.join(map(str, results))"},{"question":"You are given a string s consisting of lowercase Latin letters. You can perform the following operation on it any number of times: choose any two adjacent characters s[i] and s[i+1], and if they are equal, delete them from the string. Determine the length of the final string after performing such operations optimally. # Input The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The next t lines each contain a single string s (1 le text{|s|} le 10^5). # Output For each test case, print a single integer — the length of the final string after performing all possible operations optimally. # Examples Input ``` 3 abccba aa abc ``` Output ``` 0 0 3 ``` # Explanation In the first test case, you can remove \\"cc\\", leaving \\"abba\\", then remove \\"bb\\" to get \\"aa\\", and finally remove the last \\"aa\\". The length of the final string is 0. In the second test case, you can directly remove the \\"aa\\". The length of the final string is 0. In the third test case, there are no two adjacent characters that are the same, so the string remains \\"abc\\". The length of the final string is 3.","solution":"def optimal_string_length(t, cases): Determines the length of the final string after performing all possible operations optimally for each test case. Parameters: t (int): number of test cases. cases (list of str): list of strings - each string is a test case. Returns: list of int: final string lengths after performing the operations on each test case. results = [] for s in cases: stack = [] for char in s: if stack and stack[-1] == char: stack.pop() # Remove the last element if it\'s the same as the current char else: stack.append(char) # Add the current char to the stack results.append(len(stack)) # The remaining stack length is the final length return results"},{"question":"Heidi has a habit of keeping her garden well-structured. Her latest project involves organizing flower beds that are represented in a one-dimensional row. Each flower bed can contain different types of flowers, represented by integers. To enhance the aesthetic appeal of her garden, Heidi wants to ensure that no two adjacent flower beds contain the same type of flower. Your task is to determine the minimum number of modifications required to achieve this condition. A modification entails changing the type of flower in a particular flower bed to any other type. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of flower beds. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), where ai represents the type of flower in the i-th flower bed. Print the minimum number of modifications required to ensure no two adjacent flower beds contain the same type of flower. **Example:** Input: ``` 5 1 1 2 2 3 ``` Output: ``` 2 ``` Explanation: Change the first flower bed from 1 to any other type and the fourth flower bed from 2 to any other type, resulting in the sequence: 2 1 2 3 3, with 2 modifications in total.","solution":"def min_modifications(n, flower_beds): Returns the minimum number of modifications required to ensure no two adjacent flower beds contain the same type of flower. :param n: Integer, the number of flower beds. :param flower_beds: List of integers, types of flowers in the flower beds. :return: Integer, minimum number of modifications required. modifications = 0 for i in range(1, n): if flower_beds[i] == flower_beds[i - 1]: modifications += 1 # Change the current flower bed to some other type (assume any type that is not flower_beds[i]) # In this context, we just increment the current type by 1 for simplicity, in a real-world scenario, # any non-equal type would suffice. flower_beds[i] = (flower_beds[i - 1] + 1) % 101 # Use modulo 101 to stay within the limit of 1 ≤ ai ≤ 100 return modifications"},{"question":"A bakery produces cookies in batches each day. Each batch can contain a varying number of cookies, and each cookie can have a different number of chocolate chips. Given the number of chocolate chips in each cookie of a batch, determine the maximum difference between the number of chips in the cookie with the most chips and the cookie with the least chips in that batch. If all cookies have the same number of chips, the difference is zero. The first line of input contains an integer ( m ) (1 ≤ ( m ) ≤ 10^5) — the number of batches. The following m lines each describe a batch of cookies. The first integer ( b_i ) (1 ≤ ( b_i ) ≤ 10^5) in each line indicates the number of cookies in the ( i )-th batch. It is followed by ( b_i ) integers, each representing the number of chocolate chips in a cookie. For each batch, output a single line containing the maximum difference in the number of chocolate chips between any two cookies in that batch. # Example Input ``` 3 5 1 3 4 1 2 3 10 10 10 4 9 2 7 4 ``` Output ``` 3 0 7 ```","solution":"def max_chip_difference(m, batches): result = [] for batch in batches: b_i = batch[0] # number of cookies in the batch cookies = batch[1:] # number of chips in each cookie min_chips = min(cookies) max_chips = max(cookies) max_diff = max_chips - min_chips result.append(max_diff) return result"},{"question":"You are given two arrays, `difficulty` and `profit`, where `difficulty[i]` and `profit[i]` are the difficulty and profit of the i-th job respectively. You are also given an array `worker` where `worker[j]` is the ability of the j-th worker. Every worker can only perform a job whose difficulty is less than or equal to their ability. Each worker can be assigned to at most one job, but a job can be assigned to multiple workers. Find the maximum profit we can achieve if we assign the best possible job to each worker. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of jobs. - The second line contains n integers `difficulty[i]` (1 ≤ difficulty[i] ≤ 10^9). - The third line contains n integers `profit[i]` (1 ≤ profit[i] ≤ 10^9). - The fourth line contains an integer m (1 ≤ m ≤ 10^5) — the number of workers. - The fifth line contains m integers `worker[j]` (1 ≤ worker[j] ≤ 10^9). Output: - Print a single integer, the maximum profit we can achieve. Example: Input: 3 2 4 6 10 20 30 4 1 2 3 4 Output: 40","solution":"def max_profit_assignment(difficulty, profit, worker): jobs = sorted(zip(difficulty, profit)) worker.sort() max_profit_so_far = 0 total_profit = 0 i = 0 n = len(jobs) for w in worker: while i < n and w >= jobs[i][0]: max_profit_so_far = max(max_profit_so_far, jobs[i][1]) i += 1 total_profit += max_profit_so_far return total_profit"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight which is either 1 or 2. Your task is to find the shortest path from node 1 to node n in terms of the total weight of the edges. If no such path exists, output -1. The first line contains two integers n and m (2 le n le 100,000; 1 le m le 200,000) — the number of nodes and the number of edges in the graph. The next m lines each contain three integers u, v, and w (1 le u, v le n, u neq v, w in {1, 2}) — meaning there is an edge between nodes u and v with weight w. Print a single integer — the shortest path weight from node 1 to node n. If no such path exists, print -1.","solution":"from heapq import heappop, heappush import sys def shortest_path(n, m, edges): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, 1)] # (distance, node) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 while pq: d, cur = heappop(pq) if d > dist[cur]: continue for neighbor, weight in graph[cur]: distance = d + weight if distance < dist[neighbor]: dist[neighbor] = distance heappush(pq, (distance, neighbor)) return dist[n] if dist[n] != float(\'inf\') else -1"},{"question":"Emma loves to collect rare coins. She recently came across a collection which contains multiple boxes of coins, each with varying values. Knowing her fascination with patterns, she wants to find a specific subsequence in the list of coin boxes that exhibits an increasing pattern. Your task is to help Emma find the length of the longest increasing subsequence of the coin values from the given boxes. An increasing subsequence is a sequence of numbers where each number is greater than the previous one. For example, if Emma has a list of coin box values [10, 22, 9, 33, 21, 50, 41, 60, 80], the longest increasing subsequence is [10, 22, 33, 50, 60, 80] and its length is 6. Input: - The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of coin boxes. - The second line contains n integers representing the values of the coin boxes. Output: - For each test case, print a single integer representing the length of the longest increasing subsequence of the coin values. Example: Input: 3 8 5 8 3 7 9 1 10 6 5 10 22 9 33 21 6 3 10 2 1 20 4 Output: 4 3 3 Explanation: In the first test case, the longest increasing subsequence is [5, 7, 9, 10], of length 4. In the second test case, the longest increasing subsequence is [10, 22, 33], of length 3. In the third test case, the longest increasing subsequence is [3, 10, 20], of length 3.","solution":"def length_of_lis(arr): Helper function to determine the length of the longest increasing subsequence. if not arr: return 0 # Create an array to store the length of the LIS up to each index lis = [1] * len(arr) # Compute the LIS values for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis return max(lis) def longest_increasing_subsequence(test_cases): Main function to process multiple test cases and return the lengths of longest increasing subsequences. results = [] for t in test_cases: n, coins = t result = length_of_lis(coins) results.append(result) return results"},{"question":"You are given a tree with `n` nodes. Each node is uniquely numbered from `1` to `n`. The tree is rooted at node `1`. Each node `i` has a color `ci` which is either `0` or `1`. You need to answer `q` queries. Each query gives you a node `v` and you are to determine the number of nodes in the subtree rooted at `v` that has the same color as `v`. Input: - The first line contains an integer `n` (`1 ≤ n ≤ 10^5`) — the number of nodes in the tree. - The second line contains `n` integers `c1, c2, ..., cn` (`0 or 1`) — the colors of the nodes. - Each of the next `n-1` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n, u ≠ v`), representing an edge between nodes `u` and `v`. - The next line contains an integer `q` (`1 ≤ q ≤ 10^5`) — the number of queries. - Each of the next `q` lines contains a single integer `v` (`1 ≤ v ≤ n`), the node for which you need to answer the query. Output: For each query, output the number of nodes in the subtree rooted at `v` that have the same color as the node `v`. Example: ``` Input: 5 1 0 1 0 1 1 2 1 3 3 4 3 5 3 1 3 4 Output: 3 2 1 ```","solution":"from collections import defaultdict def solve_tree_coloration(n, colors, edges, queries): Solves the tree coloration problem. :param n: number of nodes :param colors: list of colors for each node :param edges: list of edges :param queries: list of query nodes :return: list of results for each query def dfs(node, parent): subtree_count = [0, 0] current_color = colors[node - 1] subtree_count[current_color] += 1 for neighbor in tree[node]: if neighbor == parent: continue child_count = dfs(neighbor, node) subtree_count[0] += child_count[0] subtree_count[1] += child_count[1] subtree_color_count[node] = subtree_count return subtree_count tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_color_count = {} dfs(1, -1) result = [] for v in queries: v_color = colors[v - 1] result.append(subtree_color_count[v][v_color]) return result"},{"question":"Alex is a traveler, and he is currently mapping out a rectangular grid city. The city is represented by an n x m grid where each cell is either passable (\'.\') or impassable (\'#\'). Alex starts at the top-left corner of the grid (1,1) and wants to reach the bottom-right corner (n,m). Alex can move to any of the adjacent cells (left, right, up, down) as long as the move stays within the grid and leads to a passable cell. However, due to construction works, some cells are blocked (\'#\'), and Alex cannot pass through them. Determine if Alex is able to reach the bottom-right corner of the grid from the top-left corner. If he can reach it, print \\"YES\\". Otherwise, print \\"NO\\". The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain a string of m characters representing the grid. Each character is either \'.\' (passable) or \'#\' (impassable). The top-left cell (1,1) and the bottom-right cell (n,m) are guaranteed to be passable. Input: ``` 3 3 ... .#. ... ``` Output: ``` YES ``` In this example, Alex can go down, right, right, down, to reach the bottom-right corner.","solution":"def can_reach_end(n, m, grid): Determines if it\'s possible to reach the bottom-right corner from the top-left corner in the grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings where each string represents a row of the grid with passable (\'.\') or impassable (\'#\') cells :return: \'YES\' if the bottom-right corner can be reached, otherwise \'NO\' from collections import deque # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) # Perform BFS while queue: x, y = queue.popleft() # If we reached the bottom-right corner if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Elena is hosting a virtual book club meeting and wants to set a schedule for members to present their reviews on different days. She has a list of **n** books, each with an associated review length. Since each meeting is held on a different day, no more than **k** minutes of review can be scheduled per day. Help Elena schedule the meetings by determining the minimum number of days required to cover all the book reviews. The first line of the input contains two integers **n** and **k** (1 le n le 1000, 1 le k le 1000) — the number of books and the maximum review length that can be scheduled per day. The second line contains **n** integers representing the review lengths **r_i** (1 le r_i le 1000). Output a single integer — the minimum number of days required to complete all the book reviews. **Example:** Input: ``` 4 5 2 4 3 1 ``` Output: ``` 3 ``` Explanation: - On the first day, the reviews with lengths 2 and 3 are scheduled (total 5 minutes). - On the second day, the review with length 4 is scheduled (total 4 minutes). - On the third day, the review with length 1 is scheduled (total 1 minute). Thus, the minimum number of days required is 3.","solution":"def min_days_to_complete_reviews(n, k, reviews): days = 0 current_day_time = 0 for review in reviews: if current_day_time + review <= k: current_day_time += review else: days += 1 current_day_time = review if current_day_time > 0: days += 1 return days # Example usage: # n = 4 # k = 5 # reviews = [2, 4, 3, 1] # Output: 3 # print(min_days_to_complete_reviews(n, k, reviews)) # Output: 3"},{"question":"Polycarp is playing a game with strings and subsequences. The game consists of a series of rounds, each with a given string. In each round, Polycarp can perform at most one operation: he can either remove one character from any position in the string or leave the string as it is. The goal is to make the resulting string a palindrome. A palindrome is a string that reads the same forward and backward. For each round, determine if it is possible to make the string a palindrome by performing at most one operation. Input: The first line contains an integer t (1 ≤ t ≤ 1000) — the number of rounds. Each of the following t lines contains a single string s of lowercase Latin letters (1 ≤ |s| ≤ 50), representing the initial string for that round. Output: For each round, print \\"YES\\" if it is possible to make the string a palindrome by performing at most one operation, and \\"NO\\" otherwise. Example: Input: 3 abca racecar abcdef Output: YES YES NO Explanation: In the first round, Polycarp can remove the character \'c\' to make the string \\"aba\\", which is a palindrome. Therefore, the answer is \\"YES\\". In the second round, the string \\"racecar\\" is already a palindrome, so no operation is necessary. Therefore, the answer is \\"YES\\". In the third round, there is no single character removal that can make \\"abcdef\\" a palindrome. Therefore, the answer is \\"NO\\".","solution":"def can_be_palindrome(s): def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return \\"YES\\" for i in range(len(s)): if is_palindrome(s[:i] + s[i+1:]): return \\"YES\\" return \\"NO\\" def polycarp_game(t, strings): results = [] for s in strings: results.append(can_be_palindrome(s)) return results"},{"question":"You are given an integer n and a directed graph with n vertices and m edges. Additionally, each edge has been assigned a positive integer weight. The task is to find the shortest path from vertex 1 to vertex n. If there\'s no path from vertex 1 to vertex n, return -1. The first line contains two integers n and m (2 leq n leq 1000, 1 leq m leq 10000) - the number of vertices and edges in the graph. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 1000) - representing a directed edge from vertex u to vertex v with weight w. Print a single integer - the weight of the shortest path from vertex 1 to vertex n. If there is no such path, print -1. Example input: 4 5 1 2 4 1 3 2 2 3 1 3 4 7 2 4 5 Example output: 9 In the example, the shortest path from vertex 1 to vertex 4 is 1 -> 2 -> 4 with a total weight of 9.","solution":"import heapq def shortest_path(n, m, edges): Finds the shortest path from vertex 1 to vertex n using Dijkstra\'s algorithm. :param n: Number of vertices. :param m: Number of edges. :param edges: List of edges, where each edge is a tuple (u, v, w). :return: Weight of the shortest path from vertex 1 to vertex n, or -1 if no path exists. graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) # Dijkstra\'s algorithm from vertex 1 pq = [(0, 1)] # (current distance, current vertex) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while pq: current_distance, current_vertex = heapq.heappop(pq) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"You are given an integer array `arr` and an integer target `k`. Your task is to determine if there exists a pair of elements in the array whose difference is exactly `k`. The first line contains two integers n and k (1 ≤ n ≤ 2 * 10^5, 0 ≤ k ≤ 10^9) — the number of elements in the array and the target difference. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. Print \\"YES\\" without quotes if there exists a pair of elements whose difference is exactly `k`, otherwise print \\"NO\\". For example: Input: 5 3 1 5 3 4 2 Output: YES Explanation: In this example, the pair (5, 2) or (4, 1) has a difference of 3, which is the target. Another example: Input: 4 0 4 2 1 3 Output: YES Explanation: In this example, the pair (4, 4) or (2, 2) or (1, 1) or (3, 3) has a difference of 0, which is the target.","solution":"def has_pair_with_difference(arr, k): Determine if there exists a pair of elements in the array whose difference is exactly k. Args: arr (list of int): List of integers representing the array k (int): Target difference Returns: str: \\"YES\\" if a pair exists with the given difference, otherwise \\"NO\\" value_set = set(arr) for num in arr: if (num + k) in value_set or (num - k) in value_set: return \\"YES\\" return \\"NO\\""},{"question":"Given a list `movies` with each movie represented as a dictionary containing the keys \\"name\\", \\"rating\\", \\"genre\\", and \\"duration\\", write a function `recommend_movies` that recommends movies based on a user\'s preferences. The function should take four arguments: 1. `movies`: List of dictionaries, where each dictionary represents a movie with the following keys: - `\\"name\\"`: (string) the name of the movie, - `\\"rating\\"`: (float, 0.0 to 10.0) the IMDb rating of the movie, - `\\"genre\\"`: (string) the genre of the movie, - `\\"duration\\"`: (int) the duration of the movie in minutes. 2. `min_rating`: (float) the minimum rating of the movies to be recommended. 3. `genre`: (string) the preferred genre of the movies to be recommended. 4. `max_duration`: (int) the maximum duration (in minutes) of the movies to be recommended. The function should return a list of movie names that match all the specified criteria. If no movies meet the criteria, return an empty list. # Example: ```python movies = [ {\\"name\\": \\"The Shawshank Redemption\\", \\"rating\\": 9.3, \\"genre\\": \\"Drama\\", \\"duration\\": 142}, {\\"name\\": \\"The Godfather\\", \\"rating\\": 9.2, \\"genre\\": \\"Crime\\", \\"duration\\": 175}, {\\"name\\": \\"The Dark Knight\\", \\"rating\\": 9.0, \\"genre\\": \\"Action\\", \\"duration\\": 152}, {\\"name\\": \\"The Lord of the Rings: The Return of the King\\", \\"rating\\": 8.9, \\"genre\\": \\"Fantasy\\", \\"duration\\": 201}, {\\"name\\": \\"Pulp Fiction\\", \\"rating\\": 8.9, \\"genre\\": \\"Crime\\", \\"duration\\": 154}, ] print(recommend_movies(movies, 9.0, \'Crime\', 180)) ``` **Output:** ``` [\\"The Godfather\\", \\"Pulp Fiction\\"] ``` # Constraints: - Each dictionary in the `movies` list will have a valid structure as specified. - Ratings are between 0.0 and 10.0. - `min_rating` is between 0.0 and 10.0. - `max_duration` is a positive integer. Implement the function `recommend_movies` to satisfy the aforementioned requirements.","solution":"def recommend_movies(movies, min_rating, genre, max_duration): Recommends movies based on user preferences. Parameters: movies (list): List of dictionaries where each dictionary contains details of a movie. min_rating (float): The minimum rating of the movies to be recommended. genre (string): The preferred genre of the movies to be recommended. max_duration (int): The maximum duration (in minutes) of the movies to be recommended. Returns: list: A list of movie names that meet the specified criteria. recommended_movies = [ movie[\\"name\\"] for movie in movies if movie[\\"rating\\"] >= min_rating and movie[\\"genre\\"] == genre and movie[\\"duration\\"] <= max_duration ] return recommended_movies"},{"question":"You are given a grid with `n` rows and `m` columns, filled with integers from 1 to `n*m`. You can perform the following operations: 1. Choose any subgrid of size `k x k` (i.e., a square of side length `k`), and increase each element in this subgrid by 1. 2. You can perform this operation on different subgrids any number of times. Your task is to determine if it is possible to make the entire grid contain the same number. The first line of input contains three space-separated integers, `n`, `m`, and `k` (`1 ≤ n, m ≤ 100`, `1 ≤ k ≤ min(n, m)`), representing the number of rows, the number of columns, and the size of the subgrid respectively. The next `n` lines contain `m` integers each, representing the elements of the grid. If it is possible to make all the elements in the grid equal by performing the above operations, print \\"YES\\". Otherwise, print \\"NO\\". # Example 1: Input: ``` 3 3 2 1 2 3 4 5 6 7 8 9 ``` Output: ``` NO ``` # Example 2: Input: ``` 2 2 2 4 4 4 4 ``` Output: ``` YES ``` # Example 3: Input: ``` 4 4 3 1 1 1 2 1 1 1 2 1 1 1 2 3 3 3 4 ``` Output: ``` NO ```","solution":"def can_make_equal_grid(n, m, k, grid): Determines if it is possible to make the entire grid contain the same number by increasing subgrids of size k x k by 1 any number of times. :param n: int, number of rows :param m: int, number of columns :param k: int, size of the subgrid :param grid: List[List[int]], the grid elements :return: str, \\"YES\\" if it is possible to make all elements equal, otherwise \\"NO\\" # If k is 1, we can\'t change the elements in any way, so need to check if all the # initial elements are already the same if k == 1: first_value = grid[0][0] for row in grid: if any(val != first_value for val in row): return \\"NO\\" return \\"YES\\" # Check if all elements have the same parity (either all even or all odd). # If they do not, it is impossible to make them equal by subgrid increments. first_parity = grid[0][0] % 2 for i in range(n): for j in range(m): if grid[i][j] % 2 != first_parity: return \\"NO\\" return \\"YES\\""},{"question":"You are given two arrays, `A` and `B`, each consisting of `n` integers, and an integer `k`. You are required to determine if there exists a permutation of array `A` and a permutation of array `B` such that their sum meets or exceeds a given threshold. Specifically, we need to check if there exists a permutation of `A` and `B` such that for all valid `i`, the sum of the `i`-th element of the permutation of `A` and the `i`-th element of the permutation of `B` is greater than or equal to `k`. Input The input consists of three lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 1000) representing the length of the arrays. 2. The second line contains `n` integers representing the array `A`. 3. The third line contains `n` integers representing the array `B`. 4. The fourth line contains the integer `k` (1 ≤ k ≤ 10^9). Output Print \\"YES\\" if there exists a permutation of `A` and a permutation of `B` that meets the given condition, otherwise print \\"NO\\". Example Input: ``` 3 1 2 3 7 8 9 10 ``` Output: ``` YES ``` Input: ``` 3 1 2 3 7 8 9 11 ``` Output: ``` NO ``` Your task is to determine if it is possible to rearrange the elements of the two arrays such that the condition holds.","solution":"def can_permute_to_meet_threshold(n, A, B, k): Determines if there exists a permutation of arrays A and B such that their element-wise sum is greater than or equal to k for all elements. # Sort A in ascending order A_sorted = sorted(A) # Sort B in descending order B_sorted = sorted(B, reverse=True) # Check if for every pair the sum is at least k for i in range(n): if A_sorted[i] + B_sorted[i] < k: return \\"NO\\" return \\"YES\\""},{"question":"Mila is a talented problem solver who loves working with sequences. Recently, she came across an interesting type of sequence called a \\"wave array.\\" An array is a wave array if the following conditions hold true for all valid indices i: 1. If i is even, then arr[i] should be greater than or equal to arr[i+1] (if i + 1 < n). 2. If i is odd, then arr[i] should be less than or equal to arr[i+1] (if i + 1 < n). Given an array of n integers, help Mila transform it into a wave array. If there are multiple ways to create such an array, return any of them. Mila prefers a solution that ensures the minimum number of modifications to the original array. # Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. # Output Output the modified array that satisfies the conditions of a wave array. # Example Input ```plaintext 5 5 3 8 6 2 ``` Output ```plaintext 5 3 8 2 6 ``` Input ```plaintext 3 1 2 3 ``` Output ```plaintext 2 1 3 ``` Note In the first example, the array is modified such that all the conditions of a wave array are satisfied. In the second example, switching the first two elements ensures that the sequence becomes a wave array. Various valid wave arrays exist for each provided input sequence.","solution":"def wave_array(arr): Transforms the given list into a wave array where: - If i is even, arr[i] >= arr[i+1] (if i+1 < n) - If i is odd, arr[i] <= arr[i+1] (if i+1 < n) n = len(arr) for i in range(n-1): if i % 2 == 0: if arr[i] < arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] else: if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"You are given an array of integers that represents different colored blocks in a sequence. Each integer denotes the color of the block. Two blocks can only be merged if they have the same color. When two blocks are merged, they form a new block of the same color, and the length of the sequence reduces by one. You need to determine the minimum number of operations required to make all blocks in the sequence the same color, or determine if it is impossible. The first line contains a single integer n (1 le n le 100,000) — the number of blocks in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 100,000), where a_i represents the color of the i-th block. Print one integer — the minimum number of operations required to make all blocks in the sequence the same color, or -1 if it is impossible. **Example:** Input: ``` 6 1 2 2 3 3 3 ``` Output: ``` 2 ``` Explanation: In the given example, you can merge the two blocks with color 2 and then merge the three blocks with color 3. At least 2 operations are required to make all blocks the same color.","solution":"def min_operations_to_single_color(n, blocks): Determine the minimum number of operations required to make all blocks in the sequence the same color. If it\'s impossible, return -1. :param n: int, number of blocks :param blocks: list of int, colors of blocks :return: int, minimum number of operations or -1 if impossible # If there\'s only one block, it\'s already the same color if n == 1: return 0 change_points = 0 # Count the number of places where the color changes in the sequence for i in range(1, n): if blocks[i] != blocks[i - 1]: change_points += 1 # If there are no color changes, which means all blocks are the same already if change_points == 0: return 0 # Otherwise, the minimum number of operations needed is equal to the number of change points return change_points"},{"question":"Tina loves collecting stamps and displaying them in her album. Each stamp has a value, and she likes to arrange the stamps in the album such that the total value of a contiguous segment of stamps is as high as possible. However, she can only use a specific number of stamps from her collection and must arrange them in the album consecutively. Given an array of integers representing the values of the stamps in Tina\'s collection and an integer denoting the number of stamps she can use, find the maximum possible sum of any contiguous subarray of that length. You need to process multiple test cases. The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 10^5, 1 le k le n) — the number of stamps in Tina\'s collection and the number of consecutive stamps she can use, respectively. The second line of each test case contains n space-separated integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4) representing the values of the stamps. For each test case, print a single integer — the maximum sum of any contiguous subarray of length k. Example: Input: ``` 2 5 3 1 2 3 -2 5 6 2 -1 -2 2 4 -3 5 ``` Output: ``` 6 6 ``` Explanation of the example: 1. For the first test case, the best option is to take stamps with values `[2, 3, -2]` resulting in a sum of 2 + 3 - 2 = 3. However, taking `[1, 2, 3]` yields a higher sum 1 + 2 + 3 = 6. 2. For the second test case, the best option is to take stamps with values `[2, 4]` resulting in a sum of 2 + 4 = 6.","solution":"def max_contiguous_subarray_sum(test_cases): result = [] for n, k, arr in test_cases: # Calculate the sum of the first window of size k max_sum = current_sum = sum(arr[:k]) # Slide the window across the array and find the maximum sum for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) result.append(max_sum) return result # Example usage: # test_cases = [ # (5, 3, [1, 2, 3, -2, 5]), # (6, 2, [-1, -2, 2, 4, -3, 5]) # ] # print(max_contiguous_subarray_sum(test_cases)) # Output: [6, 6]"},{"question":"You are provided with an integer array of length n. Your task is to modify the array such that every positive element is followed by a non-positive element or the end of the array, and every non-positive element is followed by a positive element or the end of the array. If it is not possible to arrange the array in this way, return -1. A non-positive element is an element that is either zero or negative. The first line of the input contains an integer n (1 ≤ n ≤ 200) — the number of elements in the array. The second line contains n integers a0, a1, ..., an-1 (-1000 ≤ ai ≤ 1000) — the elements of the array. Print the modified array if possible. If it is not possible to modify the array as required, return -1. In the first example, the modified array is [2, -1, 3, 0, 4, -2]. In the second example, it is not possible to alternate the elements as required, so the output is -1. Example 1: Input: 6 2 3 4 -1 0 -2 Output: 2 -1 3 0 4 -2 Example 2: Input: 4 1 2 3 4 Output: -1","solution":"def rearrange_array(arr): n = len(arr) pos = [x for x in arr if x > 0] non_pos = [x for x in arr if x <= 0] # If the difference between the count of positive and non-positive elements is more than 1, it\'s not possible to rearrange if abs(len(pos) - len(non_pos)) > 1: return -1 result = [] i, j = 0, 0 # If we start with more positive or equal positive elements if len(pos) >= len(non_pos): while i < len(pos) and j < len(non_pos): result.append(pos[i]) result.append(non_pos[j]) i += 1 j += 1 while i < len(pos): result.append(pos[i]) i += 1 while j < len(non_pos): result.append(non_pos[j]) j += 1 else: while j < len(non_pos) and i < len(pos): result.append(non_pos[j]) result.append(pos[i]) j += 1 i += 1 while j < len(non_pos): result.append(non_pos[j]) j += 1 while i < len(pos): result.append(pos[i]) i += 1 return result # Example usage: # print(rearrange_array([2, 3, 4, -1, 0, -2])) # Should return [2, -1, 3, 0, 4, -2] # print(rearrange_array([1, 2, 3, 4])) # Should return -1"},{"question":"You work for a delivery service company, and you are responsible for optimizing the delivery routes. The company delivers to n different locations, each identified with a positive integer from 1 to n. The locations are connected by m bidirectional roads, each road connecting two distinct locations and having a certain travel time associated with it. Your task is to find the minimum travel time from a specified starting location to all other locations. If a location is not reachable from the starting point, you should indicate that. You\'ll be given n locations, m roads, and a starting location. Each road is described by three integers: u, v, and t, indicating that there is a road between locations u and v with travel time t. The first line of the input contains three integers n, m, and start (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000, 1 ≤ start ≤ n) — the number of locations, the number of roads, and the starting location. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1,000) — describing the roads. Print n integers where the i-th integer is the minimum travel time from the starting location to the i-th location. If a location is not reachable, print -1 instead. The travel time from the starting location to itself is always 0. Example: Input: 5 6 1 1 2 2 1 3 4 2 4 7 3 4 1 3 5 3 4 5 5 Output: 0 2 4 5 7 Explanation: From location 1: - The travel time to location 2 is 2 (1 -> 2). - The travel time to location 3 is 4 (1 -> 3). - The travel time to location 4 is 5 (1 -> 3 -> 4). - The travel time to location 5 is 7 (1 -> 3 -> 5).","solution":"import heapq def dijkstra(n, m, start, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: curr_dist, u = heapq.heappop(pq) if curr_dist > dist[u]: continue for v, weight in graph[u]: distance = curr_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(1, n + 1)]"},{"question":"You are given a book with pages numbered from 1 to n (inclusive). There is a special set of pages in the book, which are considered important. You are planning to read all of these important pages, but you want to minimize the total number of pages you have to actually go through. Formally, you can read any continuous subsequence of pages that contains all the important pages. For instance, if the important pages are {3, 6, 8}, you can read pages from 3 to 8 to cover all the important ones, or maybe from 1 to 8 if you wish. Your task is to compute the minimum number of pages you need to read continuously to include all the important pages. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the total number of pages in the book and the number of important pages, respectively. The second line contains k distinct integers a1, a2, ... , ak (1 ≤ ai ≤ n) — the page numbers of the important pages. Output a single integer, the minimum number of pages you need to read. For example, if the important pages are {3, 8, 15}, you can choose to read from page 3 to 15, which is 13 pages in total. Note that there might be other valid subsequences covering all important pages, but you have to find the minimum. The input and output format: Input: * The first line contains two integers n and k — the total number of pages and the number of important pages. * The second line contains k integers — the page numbers of the important pages. Output: * Print one integer — the minimum number of pages you need to read to cover all important pages. Example: Input: 10 3 3 8 7 Output: 6 Explanation: To cover the important pages {3, 8, 7}, you should read pages from 3 to 8, inclusive. So, the minimum number of pages is 6.","solution":"def min_pages_to_read(n, k, important_pages): Returns the minimum number of pages one must read to cover all important pages. Args: - n (int): Total number of pages in the book. - k (int): Number of important pages. - important_pages (List[int]): List of important pages\' numbers. Returns: - int: Minimum number of pages to read. min_page = min(important_pages) max_page = max(important_pages) return max_page - min_page + 1"},{"question":"In a galaxy far away, there exists a planet called Zorgon. On Zorgon, the inhabitants are organizing a sequence of binary string transformations as part of a celebration. You are given a binary string of length n. You are required to perform m operations on this string. In each operation, you will be given an index i (1 ≤ i ≤ n) and a character \'c\' (\'0\' or \'1\'). Your task is to update the character at index i of the binary string to \'c\'. After performing all the operations, output the final binary string. The first line of the input contains a binary string s of length n (1 ≤ n ≤ 100,000). The second line contains an integer m (1 ≤ m ≤ 100,000) indicating the number of operations. Each of the next m lines contains an integer i and a character \'c\' separated by a space, specifying the update operation (1 ≤ i ≤ n, c ∈ { \'0\', \'1\' }). Output the final binary string after all the operations have been performed. Sample Input: ``` 1101 3 2 0 4 0 1 1 ``` Sample Output: ``` 1000 ``` Explanation: - Initially, the binary string is \\"1101\\". - After 1st operation (2 0): It becomes \\"1001\\". - After 2nd operation (4 0): It becomes \\"1000\\". - After 3rd operation (1 1): It remains \\"1000\\".","solution":"def transform_binary_string(s, m, operations): Transforms a binary string s according to a list of operations. Parameters: s (str): the binary string. m (int): number of operations. operations (list of tuples): each tuple contains an integer i and a character \'c\'. Returns: str: the final transformed binary string. s_list = list(s) for i, c in operations: # Convert 1-based index to 0-based index s_list[i - 1] = c return \'\'.join(s_list)"},{"question":"Given an array of integers and a window size k, we need to find the maximum sum of any contiguous subarray of size k. If the window size k is larger than the array length, it is impossible to find such a subarray and the program should return -1. The input array is guaranteed to have at least one element. You need to answer multiple test cases. The first line of input contains an integer t (1 ≤ t ≤ 1000) representing the number of test cases. Each test case consists of two lines: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5), where n is the length of the array and k is the window size. - The second line contains n integers representing the elements of the array. The sum of n across all test cases does not exceed 10^6. For each test case, print one integer: the maximum sum of any contiguous subarray of size k, or -1 if no such subarray exists. Example: Input: 2 5 3 1 2 3 4 5 4 5 4 3 2 1 Output: 12 -1 Explanation: 1. In the first test case, the window size is 3. The contiguous subarrays of size 3 are: [1, 2, 3], [2, 3, 4], and [3, 4, 5]. Their sums are 6, 9, and 12 respectively. Hence, the maximum sum is 12. 2. In the second test case, the window size k is larger than the length of the array n, so it is impossible to find such a subarray and the result is -1.","solution":"def max_sum_of_subarray(t, test_cases): Returns the maximum sum of any contiguous subarray of size k for each test case, or -1 if no such subarray exists. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains the integers n and k, and a list of n integers. Returns: list: A list of integers representing the maximum sum for each test case, or -1 if not possible. results = [] for case in test_cases: n, k, arr = case if k > n: results.append(-1) continue max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results"},{"question":"Pascal recently started working as a database administrator. He is responsible for managing records in a company database. Pascal has faced the following problem at work: The company database has a large table containing n records. Each record is represented by a unique integer ID. Pascal needs to determine the k smallest record IDs in this database. To make the problem more interesting, the database is continually updated, with several addition and deletion operations occurring before Pascal queries the k smallest record IDs. The first line contains three integers n, m, and k (1 ≤ k ≤ n ≤ 100,000, 0 ≤ m ≤ 100,000). The second line contains n unique integers representing the initial record IDs. Each of the next m lines contains an operation: either \\"ADD x\\" to add a new record with ID x, or \\"DELETE x\\" to remove the record with ID x. The operations are case-sensitive. After processing all the operations, print the k smallest record IDs in ascending order. If there are fewer than k records in the database after all operations, print \\"NOT ENOUGH RECORDS\\". Example Input: ``` 5 3 3 5 2 9 4 1 ADD 7 DELETE 9 ADD 3 ``` Example Output: ``` 1 2 3 ``` Example Input: ``` 3 2 3 10 20 30 ADD 40 DELETE 20 ``` Example Output: ``` 10 30 40 ``` Example Input: ``` 4 2 5 3 8 2 7 DELETE 7 ADD 1 ``` Example Output: ``` NOT ENOUGH RECORDS ```","solution":"def process_database_operations(n, m, k, initial_records, operations): Returns the k smallest record IDs after processing the given operations. If there are fewer than k records in the database, returns \\"NOT ENOUGH RECORDS\\". records = set(initial_records) for operation in operations: op, x = operation.split() x = int(x) if op == \\"ADD\\": records.add(x) elif op == \\"DELETE\\": records.discard(x) sorted_records = sorted(records) if len(sorted_records) < k: return \\"NOT ENOUGH RECORDS\\" else: return sorted_records[:k]"},{"question":"In a prestigious marathon, runners compete to secure medals and recognition. The total number of participants is divided equally into three equal-sized groups for medals: gold, silver, and bronze, based on their finishing times. Not all runners will receive a medal if the total number of participants is not a multiple of three, and the unmedaled participants will be ranked in a separate category. Given the finishing times of the marathon participants (where each time is a unique positive integer), your task is to determine how many participants receive each type of medal and also count how many did not receive any medals. Note: The participants are strictly ranked based on their finishing times – the smaller the number, the better the time. The input consists of: - An integer n (1 ≤ n ≤ 100,000) – the number of participants. - A list of n unique integers representing the finishing times of the runners. Your program should output: - The number of gold medals awarded. - The number of silver medals awarded. - The number of bronze medals awarded. - The number of participants who did not receive any medals. To clarify, if the number of participants is not a multiple of three, the remaining participants will not receive any medals. Examples: Input: 9 2 1 3 5 4 6 8 7 9 Output: 3 3 3 0 Input: 5 10 5 3 8 7 Output: 1 1 1 2","solution":"def marathon_medals(n, finishing_times): Determines the number of participants receiving gold, silver, and bronze medals, and those who do not receive any medals. Parameters: n (int): Number of participants. finishing_times (list): A list of unique positive integers representing the finishing times. Returns: tuple: A tuple containing four integers: the number of gold medalists, silver medalists, bronze medalists, and non-medalists. # Calculate the number of people in each medal category medals_per_category = n // 3 # Calculate the number of participants who will not receive any medals no_medals = n % 3 # Number of gold, silver, and bronze medals will all be equal gold = silver = bronze = medals_per_category return (gold, silver, bronze, no_medals)"},{"question":"A company has a large number of servers. Each server has an uptime represented as an integer (number of days it has been up). The company wants to identify all servers that have uptime greater than or equal to a specified threshold value. Moreover, the company needs to calculate and print the average uptime of these servers. Write a program that: 1. Reads an integer `n` (1 ≤ n ≤ 100) representing the number of servers. 2. Reads `n` integers, each representing the uptime of a server in days (1 ≤ uptime ≤ 10^6). 3. Reads an integer `t` (1 ≤ t ≤ 10^6) representing the threshold value of uptime. The program should: 1. Print the count of servers that have an uptime greater than or equal to `t`. 2. Print the uptime value of each of these servers. 3. Print the average uptime of servers with uptime greater than or equal to `t`, rounded to 2 decimal places. If no server meets the threshold, print `0` for the count and average uptime. # Input - The first line consists of a single integer `n`. - The second line contains `n` integers separated by spaces, representing the uptime of each server. - The third line contains a single integer `t`. # Output - The first line should contain a single integer, the count of servers with uptime >= t. - The second line should contain the uptimes of these servers in order, separated by spaces. - The third line should contain the average uptime of these servers, rounded to 2 decimal places. # Example Input ``` 5 100 200 300 400 500 300 ``` Output ``` 3 300 400 500 400.00 ``` Input ``` 4 20 30 10 40 50 ``` Output ``` 0 0.00 ```","solution":"def uptime_analysis(n, uptimes, t): Analyzes server uptimes based on threshold. Args: n (int): Number of servers. uptimes (list of int): List of server uptimes. t (int): Threshold value. Returns: tuple: (count of servers >= threshold, list of uptimes >= threshold, average uptime >= threshold) filtered_uptimes = [uptime for uptime in uptimes if uptime >= t] count = len(filtered_uptimes) if count > 0: average_uptime = round(sum(filtered_uptimes) / count, 2) else: average_uptime = 0.00 return count, filtered_uptimes, average_uptime"},{"question":"You are helping a local mailing company to optimize their packaging process. They ship packages with different weights, and they want to minimize the number of packages they send out. Each package can hold a maximum weight limit, and they want to ensure the packages are as full as possible without exceeding this weight limit. You should write a program to determine the minimum number of packages needed to ship all the items, given their weights and the maximum weight limit for a package. The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of items. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9) - the weights of the items. The third line contains an integer W (1 ≤ W ≤ 10^9) - the maximum weight limit for a package. Output the minimum number of packages needed to ship all the items. Example: Input: 5 2 4 8 1 7 10 Output: 3 Explanation: The three packages can be [8 + 1], [7 + 2], and [4].","solution":"def min_packages(n, weights, W): Determines the minimum number of packages needed to ship all the items, given their weights and the maximum weight limit for a package. Args: n (int): The number of items. weights (List[int]): The weights of the items. W (int): The maximum weight limit for a package. Returns: int: The minimum number of packages needed. weights.sort(reverse=True) packages = 0 used = [False] * n for i in range(n): if not used[i]: current_weight = weights[i] used[i] = True for j in range(i+1, n): if not used[j] and current_weight + weights[j] <= W: current_weight += weights[j] used[j] = True packages += 1 return packages"},{"question":"Given a matrix of integers, your task is to determine the minimum cost to reach the bottom-right cell of the matrix from the top-left cell. You can only move right or down at any point in time. The cost to move to any cell is represented by the value of the cell. The input consists of multiple test cases. The first line of input contains an integer t (1 le t le 100) - the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 100) - the dimensions of the matrix. Each of the next n lines contains m integers representing the matrix. The value of each integer in the matrix is between 1 and 1000. For each test case, print the minimum cost to reach the bottom-right cell in the matrix from the top-left cell. Example: Input: 2 3 3 1 3 1 1 5 1 4 2 1 4 4 1 3 1 2 2 1 4 1 3 2 1 5 2 4 2 1 Output: 7 10 Explanation: For the first test case, the path 1 → 3 → 1 → 1 → 1 has a cost of 7. For the second test case, the path 1 → 1 → 2 → 1 → 1 → 2 → 1 → 1 has a cost of 10.","solution":"def min_cost(matrix, n, m): dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] for j in range(1, m): dp[0][j] = dp[0][j - 1] + matrix[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] return dp[n - 1][m - 1] def solve(input_data): results = [] lines = input_data.split(\'n\') t = int(lines[0]) idx = 1 for _ in range(t): n, m = map(int, lines[idx].split()) matrix = [] for i in range(n): matrix.append(list(map(int, lines[idx + 1 + i].split()))) min_cost_value = min_cost(matrix, n, m) results.append(min_cost_value) idx += n + 1 return results"},{"question":"A factory has a conveyor belt with n equally spaced positions, numbered from 1 to n. Some of these positions are marked as valid positions, where an item can be placed. You are initially given the positions of the valid positions and the factory wants to place items on the valid positions such that the minimum distance between any two adjacent items is maximized. The task is to determine the maximum possible minimum distance between any two adjacent items when placed optimally. The first line of input contains two integers n and k (1 le n le 10^5, 1 le k le n) — the number of positions on the conveyor belt and the number of valid positions. The second line contains k distinct integers p_1, p_2, ldots, p_k (1 le p_i le n) — the valid positions on the conveyor belt. Output the maximum possible minimum distance between any two adjacent items when placed on the valid positions. Example: Input: 10 5 2 4 6 8 10 Output: 2 Explanation: Place items on positions 2, 4, 6, 8, and 10. The minimum distance between any two adjacent items is 2.","solution":"def max_min_distance(n, k, positions): positions.sort() def is_feasible(distance): count = 1 last_position = positions[0] for i in range(1, k): if positions[i] - last_position >= distance: count += 1 last_position = positions[i] if count == k: return True return False left, right = 0, positions[-1] - positions[0] best_d = 0 while left <= right: mid = (left + right) // 2 if is_feasible(mid): best_d = mid left = mid + 1 else: right = mid - 1 return best_d if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n, k = int(data[0]), int(data[1]) positions = list(map(int, data[2:2+k])) print(max_min_distance(n, k, positions))"},{"question":"Little Mary loves squares. She has a large sheet of paper and some colored pens. She decided to draw squares on the sheet in a very specific manner: 1. She draws the largest possible square such that its sides are parallel to the sides of the paper. 2. She then draws another square inside the first, following the same rule. 3. She keeps drawing smaller and smaller squares inside each previous square until the side of a square is less than or equal to 0. Given the length of the initial square\'s side, determine the number of squares Mary can draw before she can\'t draw any more squares. Input data contains a single integer side (1 ≤ side ≤ 10000), the length of the side of the largest square. Output the total number of squares Mary will draw. For example, if the initial side length is 5, Mary will draw 4 squares (5, 4, 3, 2). If the initial side length is 1, Mary will only draw 1 square.","solution":"def count_squares(side): This function takes an integer \'side\', which is the length of the initial square\'s side, and returns the total number of squares Mary can draw until the side length is less than or equal to 0. count = 0 while side > 0: count += 1 side -= 1 return count"},{"question":"You are given a binary tree with n nodes, where each node has a unique value between 1 and n. A path in the tree is defined as a sequence of nodes where each consecutive pair of nodes is connected by an edge. You are asked to find the longest path in this tree such that the sequence of node values in the path forms a strictly increasing sequence. The first line of the input contains an integer n (1 le n le 10^5) — the number of nodes in the binary tree. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) — denoting that there is an edge between node u and node v. Print a single integer — the length of the longest path such that the sequence of node values in the path forms a strictly increasing sequence. Note that the path does not need to start or end on the root of the tree, and nodes in the path do not need to be unique or form a simple path. **Input:** ``` 5 1 2 1 3 2 4 3 5 ``` **Output:** ``` 3 ``` **Explanation:** In the above example, the longest path with strictly increasing node values can be 1 → 3 → 5 or 1 → 2 → 4. Both have a length of 3.","solution":"def longest_increasing_path(n, edges): from collections import defaultdict # Create an adjacency list for the tree adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Create an array to store the longest path lengths max_length = [0] * (n + 1) def dfs(node, parent): max_len_child = 0 for neighbor in adj_list[node]: if neighbor != parent: if neighbor > node: result = dfs(neighbor, node) max_len_child = max(max_len_child, result) max_length[node] = 1 + max_len_child return max_length[node] # Run DFS from each node overall_max = 0 for i in range(1, n + 1): if max_length[i] == 0: overall_max = max(overall_max, dfs(i, -1)) return overall_max"},{"question":"You are given an array of n integers. Your task is to find two elements in the array such that their sum is closest to zero. If there are multiple pairs with the same closest sum, return the one which is the smallest lexicographically. The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. Print two integers, the two elements of the array whose sum is closest to zero. If there are multiple pairs with the same closest sum, print the pair which is the smallest lexicographically. Lexicographical order means that if we have two pairs (x1, y1) and (x2, y2), then (x1, y1) is considered smaller than (x2, y2) if x1 < x2 or (x1 == x2 and y1 < y2). # Example: Input: 7 -1 -3 4 2 -2 8 5 Output: -2 2 Note: In the given example, the sum of the pair (-2, 2) is 0, which is the closest to zero among all possible pairs.","solution":"def closest_sum_to_zero(arr): arr.sort() n = len(arr) left, right = 0, n - 1 closest_sum = float(\'inf\') closest_pair = (float(\'inf\'), float(\'inf\')) while left < right: current_sum = arr[left] + arr[right] if abs(current_sum) < abs(closest_sum) or (abs(current_sum) == abs(closest_sum) and (arr[left], arr[right]) < closest_pair): closest_sum = current_sum closest_pair = (arr[left], arr[right]) if current_sum < 0: left += 1 else: right -= 1 return closest_pair # Example usage: # n = 7 # arr = [-1, -3, 4, 2, -2, 8, 5] # print(closest_sum_to_zero(arr)) # Output: (-2, 2)"},{"question":"You\'re given a tree with n nodes. Each edge of the tree has an associated positive integer weight. Your task is to find the heaviest path in this tree, where the weight of a path is defined as the sum of the weights of the edges that the path includes. The path can start and end at any node of the tree. The first line contains a single integer n (2 leq n leq 10^5), the number of nodes in the tree. Each of the following n-1 lines contains three integers u, v, w (1 leq u, v leq n, 1 leq w leq 10^5), which means that there is an edge between nodes u and v with weight w. Output a single integer, the weight of the heaviest path in the tree. # Example Input 6 1 2 3 1 3 2 2 4 4 3 5 5 3 6 6 Output 15 Explanation The heaviest path in the sample tree is from node 4 to node 6. The path is 4 - 2 - 1 - 3 - 6 with a total weight of 4 + 3 + 2 + 6 = 15.","solution":"def find_heaviest_path(n, edges): from collections import defaultdict, deque # Create an adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): distances = [-1] * (n + 1) queue = deque([start]) distances[start] = 0 farthest_node = start max_distance = 0 while queue: node = queue.popleft() current_distance = distances[node] for neighbor, weight in graph[node]: if distances[neighbor] == -1: distances[neighbor] = current_distance + weight queue.append(neighbor) if distances[neighbor] > max_distance: max_distance = distances[neighbor] farthest_node = neighbor return farthest_node, max_distance # Run BFS twice to find the diameter of the tree node, _ = bfs(1) _, heaviest_path = bfs(node) return heaviest_path"},{"question":"Implement a function that takes an integer array as input and returns the maximum product that can be obtained by multiplying three distinct elements of the array. The function should handle both positive and negative numbers, and the input array will always contain at least three integers. # Input Format - An integer array `arr` with size `n` (3 ≤ n ≤ 10^5). - Each element in `arr` is a signed integer (−10^3 ≤ arr[i] ≤ 10^3). # Output Format - Return an integer which is the maximum product of three distinct elements in `arr`. # Example ``` Input: [1, 2, 3, 4] Output: 24 Input: [-10, -10, 5, 2] Output: 500 ``` # Note - The input array may contain both positive and negative integers. - Consider edge cases where the array includes a mix of large negative and positive values. # Function Signature ```python def maximum_product_of_three(arr: List[int]) -> int: pass ```","solution":"from typing import List def maximum_product_of_three(arr: List[int]) -> int: Returns the maximum product of three distinct elements in the input array. arr.sort() return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"You are given two strings, `a` and `b`, both of which consist of lowercase Latin letters. Your task is to determine the minimum number of operations required to make `b` a subsequence of `a`. You are allowed to perform the following operation any number of times on string `a`: - Remove any single character from string `a`. A string `s` is a subsequence of string `t` if `s` can be derived from `t` by deleting some (possibly zero) characters without changing the order of the remaining characters. Consider the following example: - If `a = \\"abcdef\\"` and `b = \\"ace\\"`, then `b` is a subsequence of `a`. - If `a = \\"abcdef\\"` and `b = \\"aec\\"`, then `b` is not a subsequence of `a`. The first line contains a single integer `t` (`1 ≤ t ≤ 100`), the number of test cases. For each test case, there are two lines: - The first line contains the string `a` (`1 ≤ |a| ≤ 100`). - The second line contains the string `b` (`1 ≤ |b| ≤ 100`). Output the minimum number of operations required to make `b` a subsequence of `a` for each test case. If it is not possible, output `-1`. Example: ``` Input: 3 abcdef ace abcd bcd abcdef aec Output: 0 0 -1 ```","solution":"def min_operations_to_subsequence(a, b): m, n = len(a), len(b) j = 0 # Pointer for b for i in range(m): if j < n and a[i] == b[j]: j += 1 if j == n: return 0 else: return -1 def process_cases(cases): results = [] for a, b in cases: result = min_operations_to_subsequence(a, b) results.append(result) return results"},{"question":"In a certain country, there is a unique way of determining the capital city every year. The country consists of n cities, and the cities are connected by n-1 bidirectional roads in such a way that each city can be reached from any other city (i.e., they form a tree). Each year, the capital city is chosen based on a specific criterion. A city c is selected to be the capital if: 1. It has the smallest number of \\"important locations\\". 2. If there are several cities with the same number of important locations, the city with the smallest index is chosen. Your task is to determine the capital city for the upcoming year. An \\"important location\\" for a given city c is defined as the longest distance from c to any other city in the country. # Input - The first line contains a single integer n (1 le n le 100,000) — the number of cities. - Each of the next n-1 lines contains two integers a_i and b_i (1 le a_i, b_i le n), denoting a road between cities a_i and b_i. # Output - Print a single integer — the index of the city that should be chosen as the capital based on the given criteria. # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` 1 ``` # Explanation: In this example, the distances from each city to all other cities are as follows: - City 1: (0, 1, 1, 2, 2) - City 2: (1, 0, 2, 1, 1) - City 3: (1, 2, 0, 3, 3) - City 4: (2, 1, 3, 0, 2) - City 5: (2, 1, 3, 2, 0) The number of important locations (maximum distance to any city) are: - City 1: 2 - City 2: 2 - City 3: 3 - City 4: 3 - City 5: 3 Cities 1 and 2 have the smallest number of important locations (2). Among them, city 1 has the smallest index. Therefore, the output is 1.","solution":"from collections import deque def bfs_max_distance(n, graph, start): dist = [-1] * (n + 1) queue = deque([start]) dist[start] = 0 max_dist = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append(neighbor) max_dist = max(max_dist, dist[neighbor]) return max_dist def find_capital_city(n, roads): if n == 1: return 1 graph = [[] for _ in range(n + 1)] for a, b in roads: graph[a].append(b) graph[b].append(a) min_max_dist = float(\'inf\') capital_city = -1 for city in range(1, n + 1): max_dist = bfs_max_distance(n, graph, city) if max_dist < min_max_dist: min_max_dist = max_dist capital_city = city elif max_dist == min_max_dist and city < capital_city: capital_city = city return capital_city"},{"question":"Maria is fond of decorating her house with colorful garlands during festivals. Each garland consists of small bulbs arranged in a straight line. Maria has noticed that some garlands look more beautiful when the bulbs are arranged in a certain pattern. Innfinity State Bouncing Co. has produced a special garland that follows a unique pattern. Maria has the task of identifying the starting segment of k bulbs from a given garland, which, when continuously repeated, can construct the rest of the garland completely. Given the sequence of n bulbs represented as a string of lowercase alphabet characters, your task is to find the smallest length k such that the initial k bulbs can be periodically repeated to get the entire garland sequence. If no such k exists, return the length of the garland itself. The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of bulbs in the garland. The second line contains a string of length n consisting of lowercase English letters — the sequence of bulbs in the garland. Print the integer k — the smallest length of the repeating segment. Examples **Input:** ``` 12 abcabcabcabc ``` **Output:** ``` 3 ``` **Input:** ``` 10 aaaaaaaaaa ``` **Output:** ``` 1 ``` **Input:** ``` 7 abcdefg ``` **Output:** ``` 7 ```","solution":"def smallest_repeating_segment(n, bulbs): Returns the length of the smallest segment of the garland that can be repeated to construct the entire garland. def is_repeating_segment(k): segment = bulbs[:k] return segment * (n // k) == bulbs for k in range(1, n + 1): if n % k == 0 and is_repeating_segment(k): return k return n"},{"question":"You are given an integer array a of length n and a series of queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n). For each query, return the sum of the elements from the array between indices l and r (inclusive). Input: The first line contains two integers n (1 ≤ n ≤ 10^6) and q (1 ≤ q ≤ 10^6) – the number of elements in the array and the number of queries, respectively. The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) – elements of the array. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) – the queries. Output: Print q lines, each containing the answer to the corresponding query. Example: Input: 6 4 1 2 3 4 5 6 1 3 2 5 3 3 1 6 Output: 6 14 3 21 Explanation: For the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. For the second query, the sum of elements from index 2 to 5 is 2 + 3 + 4 + 5 = 14. For the third query, the sum of the element at index 3 is 3. For the fourth query, the sum of elements from index 1 to 6 is 1 + 2 + 3 + 4 + 5 + 6 = 21.","solution":"def range_sum(n, q, arr, queries): Returns the sum of elements between indices l and r (inclusive) for a series of queries. :param int n: Number of elements in the array. :param int q: Number of queries. :param list arr: List of integers representing the array. :param list queries: List of tuples, each containing two integers (l, r). :return: List of sums for each query. # Create a prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] # Process each query and calculate the sum using the prefix sum array results = [] for l, r in queries: result = prefix_sum[r] - prefix_sum[l - 1] results.append(result) return results"},{"question":"Bear Limak is playing another game. This time, he has a list of n tasks, each of which takes some amount of time to complete. Limak is allowed to skip at most one task to minimize the total time spent. Can you help him to find out the minimum total time required to complete the remaining tasks after optionally skipping one? Given an integer n and a list of task times, determine the minimum total completion time if Limak skips no more than one task. # Input - The first line of the input contains an integer n (2 ≤ n ≤ 100) — the number of tasks. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 100), where ti denotes the time to complete the i-th task. # Output - Print a single integer — the minimum total time required to complete the remaining tasks after optionally skipping one. # Example Input 5 3 6 2 8 4 Output 15 Input 4 7 1 6 3 Output 10 # Explanation In the first example, the best option is to skip the task that takes 2 units of time, resulting in the total time spent being 3 + 6 + 8 + 4 = 21 - 2 = 19. In the second example, Limak skips the task that takes 1 unit of time, resulting in the total time being 7 + 6 + 3 = 16 - 1 = 15.","solution":"def minimum_task_time(n, task_times): This function calculates the minimum total time required to complete tasks after optionally skipping one task from the list of given task times. :param n: int - Number of tasks :param task_times: list of int - List of times each task takes :return: int - Minimum total time to complete the tasks after skipping one task # Total time without skipping any task total_time = sum(task_times) # To minimize the total time, we should skip the task with the maximum time max_task_time = max(task_times) # The minimum time is obtained by subtracting the maximum task time from the total time min_total_time = total_time - max_task_time return min_total_time"},{"question":"The Jumbled Alphabet! You are given a string `s` consisting of lowercase English letters. Your task is to determine if it\'s possible to rearrange the letters of `s` such that no two adjacent characters are the same. If it is possible, output one such rearrangement. If not, output \\"No\\". The first line of the input contains an integer `q` (1 ≤ q ≤ 10), the number of test cases. For each of the next `q` lines, there is one string `s` (1 ≤ |s| ≤ 1000). Output \\"No\\" if it is not possible to rearrange the string. Otherwise, output any rearrangement of the string where no two adjacent characters are the same. **Example:** ``` Input: 3 aab aaab abc Output: aba No bac ``` **Explanation:** For the first test case, \\"aab\\" can be rearranged to \\"aba\\" where no two adjacent characters are the same. For the second test case, \\"aaab\\" cannot be rearranged to meet the required condition, hence the output is \\"No\\". For the third test case, \\"abc\\" can be rearranged, for example to \\"bac\\", where no two adjacent characters are the same.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string such that no two adjacent characters are the same. Return \\"No\\" if no such rearrangement is possible. # Count frequency of each character counter = Counter(s) max_heap = [] # Use a max heap to store characters by their count for char, cnt in counter.items(): heapq.heappush(max_heap, (-cnt, char)) prev_char = None prev_cnt = 0 result = [] while max_heap: cnt, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_cnt < 0: heapq.heappush(max_heap, (prev_cnt, prev_char)) prev_char = char prev_cnt = cnt + 1 if len(result) != len(s): return \\"No\\" return \'\'.join(result) def solve(q, strings): results = [] for s in strings: results.append(rearrange_string(s)) return results"},{"question":"Given a sequence of integers, you need to determine the maximum sum of a subsequence with the following constraints: for any two chosen elements in the subsequence, the absolute difference of their indices should be at least d. Each test contains one or more test cases. The first line of input contains the integer t (1 ≤ t ≤ 10) – the number of test cases. The first line of each test case contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ n) – the number of elements in the sequence and the required minimum absolute difference of indices between any two chosen elements. The second line of each test case contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) – the elements of the sequence. For each test case, output a single integer – the maximum sum of the subsequence with the constraint mentioned above. # Sample Input ``` 2 5 2 1 2 3 4 5 6 3 10 1 1 1 10 10 ``` # Sample Output ``` 9 20 ``` # Explanation In the first test case, choosing elements 1 and 5 gives the maximum sum 6 with index difference at least 2. In the second test case, choosing the elements 10, 1 and 10 gives the maximum sum 21 with index difference at least 3.","solution":"def max_sum_with_constraints(n, d, sequence): dp = [0] * n for i in range(n): dp[i] = sequence[i] if i >= d: dp[i] += max(dp[:i-d+1]) return max(dp) def max_sum_of_subsequences(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] sequence = test_cases[i][1] result = max_sum_with_constraints(n, d, sequence) results.append(result) return results"},{"question":"Greg owns a factory that produces metal rods of various lengths. He needs to cut and assemble these rods into segments to meet specific order lengths for his customers. Given an array of integers rodLengths where each integer represents the length of a metal rod available in the factory, and given an integer targetLength which represents the required length of a segment to fulfill a customer\'s order, determine the minimum number of rods from the array that must be cut and assembled to exactly match the targetLength. If it\'s not possible to form the segment of the exact required length, return -1. The first line contains two integers n and targetLength (1 ≤ n ≤ 1000, 1 ≤ targetLength ≤ 10000) - the number of rods in the factory and the required length of the segment, respectively. The second line contains n integers rodLengths[i] (1 ≤ rodLengths[i] ≤ 1000) - the lengths of the rods available in the factory. Print a single integer — the minimum number of rods needed to form a segment of exactly targetLength. If it\'s not possible to form such a segment, print -1. # Example ``` Input: 5 9 4 3 4 7 2 Output: 2 Explanation: Greg can use the rods of lengths 7 and 2 to form a segment of length 9. It\'s not possible to use fewer than 2 rods to achieve this. ```","solution":"def min_rods_to_assemble(rodLengths, targetLength): Given a list of rod lengths and a target length, find the minimum number of rods needed to form the target length. If it\'s not possible, return -1. # We will use dynamic programming to solve this problem. # dp[i] will be storing the minimum number of rods needed to form length i # Initialize dp array with a large value (float(\'inf\')) since we are looking for the minimum dp = [float(\'inf\')] * (targetLength + 1) dp[0] = 0 # Zero rods are needed to form length 0 for length in rodLengths: for i in range(length, targetLength + 1): dp[i] = min(dp[i], dp[i - length] + 1) return dp[targetLength] if dp[targetLength] != float(\'inf\') else -1"},{"question":"On a distant island, there lives an ancient tribe that believes in preserving symmetry in all aspects of life. They have a special ceremony where they create strings of symbols \'x\' and \'y\'. The tribe considers a string to be \'symmetric\' if and only if it can be split into two equal-length substrings such that one substring is the reverse of the other, potentially ignoring one character in the middle if the string length is odd. The island elders seek help to determine if a given string is \'symmetric\' as per their beliefs. Write a function to help the elders determine if a given string is symmetric. The input consists of a single line containing a non-empty string of length not greater than 5000 containing only the characters \'x\' and \'y\'. Return \\"YES\\" if the string is symmetric, and \\"NO\\" otherwise. Example 1: Input: xyx Output: YES Example 2: Input: xyyx Output: YES Example 3: Input: xxyy Output: NO","solution":"def is_symmetric(s: str) -> str: Determines if the given string is symmetric as per the tribe\'s beliefs. A string is symmetric if it can be split into two equal-length substrings such that one substring is the reverse of the other, potentially ignoring one character in the middle if the string length is odd. n = len(s) if n == 1: return \\"YES\\" if n % 2 == 0: left = s[:n//2] right = s[n//2:] else: left = s[:n//2] right = s[n//2 + 1:] if left == right[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"A group of friends decided to play a game with coins on a table. They have a stack of n indistinguishable coins and they take turns flipping one, two, or three coins at a time. The player who flips the last coin(s) loses the game. You need to determine whether the player who starts the game has a winning strategy assuming both players play optimally. The first and only line contains a single integer n (1 ≤ n ≤ 10^6), representing the number of coins. Output \\"First\\" if the first player has a winning strategy, otherwise output \\"Second\\". For example: - If the input is 4, the output should be \\"First\\" because the starting player can flip all 4 coins and win immediately. - If the input is 7, the output should be \\"Second\\" because the first player will always leave an optimal number of coins for the second player to force a win.","solution":"def game_winner(n): Determines whether the player who starts has a winning strategy. Parameters: n (int): The number of coins. Returns: str: \\"First\\" if the first player has a winning strategy, otherwise \\"Second\\". if n % 4 == 0: return \\"Second\\" else: return \\"First\\""},{"question":"You are given a sequence of n positive integers a_1, a_2, ..., a_n. In one operation, you can pick any integer in the sequence and subtract one from it (you cannot pick an integer if it is already equal to zero). Additionally, you wish to perform exactly k such operations. Your task is to find the smallest possible sum of the sequence after exactly k operations. The first line contains two integers n and k (1 le n le 10^5, 0 le k le 10^9), denoting the number of elements in the sequence and the number of operations respectively. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9), the elements of the sequence. Print a single integer — the smallest possible sum of the sequence after exactly k operations. # Example **Input:** ``` 5 3 4 3 6 2 5 ``` **Output:** ``` 17 ``` **Explanation:** One possible sequence of operations is: 1. Subtract 1 from the 3rd element (sequence becomes [4, 3, 5, 2, 5]) 2. Subtract 1 from the 1st element (sequence becomes [3, 3, 5, 2, 5]) 3. Subtract 1 from the 5th element (sequence becomes [3, 3, 5, 2, 4]) The sum of the final sequence is 3 + 3 + 5 + 2 + 4 = 17. This is the smallest possible sum after exactly 3 operations.","solution":"def min_sum_after_operations(n, k, arr): Finds the smallest possible sum of the sequence after exactly k subtract-one operations. Parameters: n (int): The number of elements in the sequence. k (int): The number of operations to perform. arr (list of int): The sequence of integers. Returns: int: The smallest possible sum after exactly k operations. arr.sort() # Sort the array for i in range(n): if k > 0 and arr[i] > 0: if arr[i] <= k: k -= arr[i] arr[i] = 0 else: arr[i] -= k k = 0 return sum(arr)"},{"question":"In a fictional city, there is a strange river that often splits into multiple branches, and you need to find the longest route you can travel along its branches. The river network is modeled as an undirected graph, with river branches represented as edges and their junctions as nodes. You are given a graph with `n` nodes and `m` edges. Your task is to determine the longest simple path (a path with no repeated nodes) that can be traveled in the network. The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of nodes and the number of edges, respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes `u` and `v`. Output the length of the longest simple path that can be found in the network. **Example:** Input: ``` 5 5 1 2 1 3 3 4 3 5 4 5 ``` Output: ``` 4 ``` In this example, one of the longest simple paths is `1 -> 3 -> 4 -> 5`, which has a length of 4.","solution":"def longest_simple_path(n, edges): from collections import defaultdict # Create the graph as adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Helper function for DFS def dfs(node, visited, path_length): visited.add(node) max_length = path_length for neighbor in graph[node]: if neighbor not in visited: max_length = max(max_length, dfs(neighbor, visited, path_length + 1)) visited.remove(node) return max_length # Find the longest path starting from any node longest_path = 0 for start_node in range(1, n + 1): visited = set() longest_path = max(longest_path, dfs(start_node, visited, 0)) return longest_path"},{"question":"You are given a list of intervals, each with a start time and an end time. You need to determine the minimum number of interval deletions required to ensure that no two intervals overlap. An interval [start, end] overlaps with another interval [start2, end2] if start < end2 and start2 < end. The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5), the number of intervals. Each of the next n lines contains two space-separated integers start and end (1 ≤ start < end ≤ 10^9), representing the start and end times of the intervals. Print a single integer — the minimum number of intervals that need to be removed to eliminate all overlaps. # Example Input ``` 3 1 3 2 4 3 5 ``` Output ``` 1 ``` In this example, if we remove the interval [2, 4], the remaining intervals [1, 3] and [3, 5] do not overlap. Thus, only one interval needs to be removed.","solution":"def minIntervalRemovalsToEliminateOverlaps(intervals): intervals.sort(key=lambda x: x[1]) # Sort intervals by end times end = float(\'-inf\') count = 0 for interval in intervals: if interval[0] < end: # This interval overlaps with the last one we kept count += 1 else: end = interval[1] # Update the end to the current interval\'s end return count"},{"question":"You are given an array of n integers. You can perform the following operation at most m times to make the array sorted in non-decreasing order: select a subarray of length k and reverse it. Determine whether it is possible to sort the array using no more than m such operations. The first line of the input contains three integers n, m, and k (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10, 1 ≤ k ≤ n) — the length of the array, the maximum number of operations allowed, and the length of the subarray to be reversed, respectively. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Print \\"YES\\" if you can sort the array using no more than m operations, otherwise print \\"NO\\". Example: Input: 7 2 3 4 3 2 6 5 1 7 Output: YES Explanation: By reversing the subarray [4, 3, 2], the array becomes [2, 3, 4, 6, 5, 1, 7]. Then, by reversing the subarray [6, 5, 1], the array becomes [2, 3, 4, 1, 5, 6, 7], and finally by reversing the subarray [3, 4, 1], the array is sorted as [1, 2, 3, 4, 5, 6, 7].","solution":"def can_sort_with_operations(n, m, k, arr): Determines whether it is possible to sort the array by reversing subarrays of length k at most m times. def is_non_decreasing(arr): return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) if is_non_decreasing(arr): return \\"YES\\" # Create initial sorted version of array sorted_arr = sorted(arr) # Count minimum number of subarrays needed to sort the array subarrays_needed = 0 i = 0 while i < n: if arr[i] != sorted_arr[i]: subarrays_needed += 1 i += k # Jump over the entire block else: i += 1 return \\"YES\\" if subarrays_needed <= m else \\"NO\\""},{"question":"You are given an array of n integers. You need to determine whether it is possible to rearrange the elements of the array such that no two consecutive elements are the same. The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 2 cdot 10^5) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6) — the elements of the array. It\'s guaranteed that the total sum of n over test cases doesn\'t exceed 2 cdot 10^5. For each test case, print \\"YES\\" if it is possible to rearrange the array such that no two consecutive elements are the same. Otherwise, print \\"NO\\". Example: Input: ``` 3 6 1 1 1 2 2 2 3 1 2 3 4 1 1 1 1 ``` Output: ``` YES YES NO ``` Explanation: In the first test case, one possible rearrangement is `1 2 1 2 1 2`. In the second test case, the original arrangement already satisfies the condition. In the third test case, it is impossible to rearrange `1 1 1 1` to achieve non-repeated consecutive elements.","solution":"from collections import Counter def is_possible_to_rearrange(t, test_cases): results = [] for n, array in test_cases: counter = Counter(array) max_count = max(counter.values()) if max_count > (n + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Lina loves palindromes. A palindrome is a string that reads the same backward as forward, for example, \\"radar\\" or \\"level.\\" Lina has a string `s` of length `n` consisting of lowercase English letters. She wants to make her string a palindrome with the minimum number of operations. In one operation, she can remove any character from the string. Determine the minimum number of characters Lina needs to remove to make the string `s` a palindrome. The first line of input contains a single integer `n` (`1 ≤ n ≤ 1000`) — the length of the string `s`. The second line contains the string `s` of length `n`. Output a single integer — the minimum number of characters Lina needs to remove to make `s` a palindrome. For example: **Input:** ``` 5 abcde ``` **Output:** ``` 4 ``` **Explanation:** In the first example, the only possible way to make \\"abcde\\" a palindrome is to remove all characters except one, so the minimum number of removals is 4. Another example: **Input:** ``` 7 abacaba ``` **Output:** ``` 0 ``` **Explanation:** In the second example, \\"abacaba\\" is already a palindrome, so no characters need to be removed. The minimum number of removals is 0.","solution":"def min_removals_to_make_palindrome(s): Returns the minimum number of characters to remove to make the string a palindrome. n = len(s) # Creating a reverse of the string rev_s = s[::-1] # Initialize a table to store lengths of longest common subsequences. dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill dp table for i in range(n + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif s[i - 1] == rev_s[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of longest palindromic subsequence lps = dp[n][n] # Minimum number of deletions to make the string a palindrome return n - lps"},{"question":"Oksana is playing with grids. She has an n x m grid filled with integers, and she needs to find the maximum sum of elements in any subgrid with a size of p x q. A subgrid is a rectangular part of the grid defined by its top-left and bottom-right corners, and its size is the number of rows and columns it contains. Your task is to find the maximum possible sum of elements in any p x q subgrid of the given n x m grid. The first line contains three integers, n, m, and k (1 ≤ n, m ≤ 500, 1 ≤ p ≤ n, 1 ≤ q ≤ m) — the number of rows, the number of columns in the grid, and the subgrid size. The next n lines contain m integers each, representing the grid. Each integer in the grid is between -1000 and 1000 inclusive. Output a single integer — the maximum sum of all elements in a p x q subgrid. In the first sample, the grid is: ``` 1 2 3 4 5 6 7 8 9 ``` And the subgrid size is 2x2. The maximum sum of all elements in a 2x2 subgrid is 28, which is obtained from the subgrid: ``` 5 6 8 9 ``` In the second sample, the grid is: ``` -1 -2 -3 -4 -5 -6 -7 -8 -9 ``` And the subgrid size is 1x1. The maximum sum of a 1x1 subgrid is -1, which is obtained from the subgrid containing only the first element -1. Input example: ``` 3 3 2 2 1 2 3 4 5 6 7 8 9 ``` Output: ``` 28 ```","solution":"def max_subgrid_sum(n, m, p, q, grid): Returns the maximum sum of elements in any p x q subgrid of the n x m grid. # Initialize max_sum to a very small number max_sum = float(\'-inf\') # Prepare prefix sums prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Compute prefix sums for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Find the maximum sum of p x q subgrid for i in range(p, n + 1): for j in range(q, m + 1): subgrid_sum = (prefix_sum[i][j] - prefix_sum[i - p][j] - prefix_sum[i][j - q] + prefix_sum[i - p][j - q]) max_sum = max(max_sum, subgrid_sum) return max_sum"},{"question":"You are given an m x n grid filled with non-negative integers representing the cost to reach each cell. The grid represents a dungeon that a player needs to navigate through in order to reach the treasure. The player starts from the top-left corner (0, 0) and can only move either down or right at any point in time. At each step, the player incurs the cost associated with the destination cell. Write a program to calculate the minimum cost to reach the bottom-right corner (m-1, n-1) from the top-left corner. The input is given as follows: - The first line contains two integers m and n, the dimensions of the grid (1 ≤ m, n ≤ 100). - The next m lines each contain n integers, where the j-th integer of the i-th line represents the cost of the cell (i, j) (0 ≤ cost ≤ 100). Your program should output a single integer, the minimum cost to reach the bottom-right corner of the grid. **Example:** ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 ``` Explanation: The path 1→3→1→1→1 minimizes the cost to 7.","solution":"def min_cost_path(grid): Returns the minimum cost to reach the bottom-right corner of the grid from the top-left corner. m = len(grid) n = len(grid[0]) # Create a 2D array to store the cost dp = [[0] * n for _ in range(m)] # Initialize the cost of the starting point dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"In a fantasy land, there are two kingdoms: the Kingdom of Squares and the Kingdom of Triangles. Each kingdom has a hierarchy of its warriors who are prepared for a grand tournament. Each warrior in the Kingdom of Squares can be represented as a unique strength factor, which is a perfect square (i.e., 1, 4, 9, 16, etc.). Each warrior in the Kingdom of Triangles is similarly represented, but their strength factor is a triangular number (i.e., 1, 3, 6, 10, etc.). In the grand tournament, warriors from each kingdom are paired up together to battle. A battle between two warriors is won by the warrior with the higher strength factor, and if they have the same strength factor, the result is a draw. Your task is to determine the outcome of each battle. For each pair of warriors, you need to print the result as follows: - \\"Square\\" if the Square warrior wins, - \\"Triangle\\" if the Triangle warrior wins, - \\"Draw\\" if both warriors have the same strength factor. The first line contains an integer T (1 ≤ T ≤ 10^5) — the number of pairs of warriors. The next T lines each contain two integers S and T (1 ≤ S, T ≤ 10^9), representing the strength factors of the Square warrior and the Triangle warrior, respectively. For each pair of warriors, print the result of their battle on a new line. # Example Input: ``` 5 16 10 4 3 9 1 25 28 36 36 ``` Output: ``` Square Square Square Triangle Draw ``` In this example, the first pair is a battle between a warrior with strength factor 16 (from the Kingdom of Squares) and a warrior with strength factor 10 (from the Kingdom of Triangles). Since 16 is greater than 10, the result is \\"Square\\".","solution":"def battle_results(pairs): results = [] for S, T in pairs: if S > T: results.append(\\"Square\\") elif S < T: results.append(\\"Triangle\\") else: results.append(\\"Draw\\") return results"},{"question":"In a far-off magical land, a group of gnomes has gathered to share candies among themselves. They follow a unique way of distribution. The youngest gnome always starts by taking candies for himself first, then the next youngest takes his share, and so on, until all the candies are distributed. You are given an array of integers and each integer represents the number of candies each gnome wants. They must take exactly the amount they want. If at any point, there are not enough candies left for the current gnome\'s demand, they simply take all the remaining candies, and no further distribution occurs as sharing must stop if a gnome can\'t take exactly what they want. The total amount of candies available is given by an integer `C`. Your task is to determine how many gnomes will get their exact number of candies from the pile of `C` candies, following the described order. If no gnome can take the required number of candies, your output should be 0. # Input - The first line contains two space-separated integers: `n` (the number of gnomes) and `C` (the total number of candies available). - The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` where `a_i` (1 ≤ a_i ≤ 10^9) represents the number of candies the i-th gnome wants. The gnomes are sorted by their age, with the youngest first. # Output - Output one integer: the number of gnomes that get exactly the number of candies they want. # Examples Example 1: **Input:** ``` 5 15 3 7 2 5 1 ``` **Output:** ``` 2 ``` Example 2: **Input:** ``` 3 10 4 4 4 ``` **Output:** ``` 2 ``` # Note: In the first example: 1. The youngest gnome takes 3 candies (remaining candies: 12). 2. The next gnome takes 7 candies (remaining candies: 5). 3. The next gnome takes 2 candies (remaining candies: 3). 4. Now, the next gnome wants 5 candies but only 3 are left, so the distribution stops. In the second example: 1. The youngest gnome takes 4 candies (remaining candies: 6). 2. The next gnome takes 4 candies (remaining candies: 2). 3. The next gnome wants 4 candies but only 2 are left, so the distribution stops. Hence, only the first two gnomes got their exact amount.","solution":"def distribute_candies(n, C, demands): Determines how many gnomes will get their exact number of candies they want. Parameters: n (int): The number of gnomes. C (int): The total number of candies available. demands (List[int]): A list of integers where each integer represents the number of candies each gnome wants. Returns: int: The number of gnomes that get exactly the number of candies they want. count = 0 for demand in demands: if C >= demand: C -= demand count += 1 else: break return count # Example usage # n, C = 5, 15 # demands = [3, 7, 2, 5, 1] # print(distribute_candies(n, C, demands)) # Output: 3"},{"question":"You have a grid of size n times m filled with numbers from 1 to n cdot m in ascending order. You are standing at the top-left cell (1, 1) and can move to the right or down to reach the bottom-right cell (n, m). However, there are obstacles in the grid and you cannot step on those cells. You need to find the total number of unique paths you can take to reach the bottom-right cell from the top-left cell. A path is considered unique if no other path has the same sequence of moves. The input consists of: 1. An integer n (1 le n le 1000) — the number of rows in the grid. 2. An integer m (1 le m le 1000) — the number of columns in the grid. 3. An integer k (0 le k le 15) — the number of obstacles. 4. k pairs of integers, each pair represents the row and column of an obstacle in the grid. The output should be a single integer representing the number of unique paths from the top-left cell to the bottom-right cell. Example: Input: ``` 3 3 2 2 2 2 3 ``` Output: ``` 1 ``` In this example, there is only one unique path from the top-left corner to the bottom-right corner avoiding the obstacles.","solution":"def unique_paths_with_obstacles(n, m, k, obstacles): Returns the number of unique paths from top-left to bottom-right in an n x m grid with obstacles. :param n: int - the number of rows in the grid :param m: int - the number of columns in the grid :param k: int - the number of obstacles in the grid :param obstacles: list of tuple - each tuple represents the row and column of an obstacle :return: int - the number of unique paths # Create a dp table initialized to 0 dp = [[0 for _ in range(m)] for _ in range(n)] # Set obstacles in the grid for obstacle in obstacles: row, col = obstacle dp[row-1][col-1] = -1 # mark obstacles with -1 # Check if start or end point is an obstacle if dp[0][0] == -1 or dp[n-1][m-1] == -1: return 0 # Initialize the starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if dp[i][j] == -1: continue if i > 0 and dp[i-1][j] != -1: dp[i][j] += dp[i-1][j] if j > 0 and dp[i][j-1] != -1: dp[i][j] += dp[i][j-1] return max(dp[-1][-1], 0)"},{"question":"Polycarp loves candies and has recently devised a game involving candy distribution. The rules of the game are as follows: There are n players including Polycarp. Polycarp decides to distribute exactly k candies to the players (including himself) such that each player gets at least one candy. Polycarp, being very fair, wants to ensure that the distribution of candies is as balanced as possible. Specifically, the absolute difference in the number of candies between any two players should be minimized. Given the integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000), help Polycarp determine the maximum possible minimum number of candies that any player can get after distributing the candies. The input consists of a single line containing two integers n and k. Print a single integer representing the maximum possible minimum number of candies that any player can receive. For example: - If n = 3 and k = 10, the optimal way to distribute candies is 3, 3, and 4, so the output should be 3. - If n = 2 and k = 7, the candies can be distributed as 3 and 4, so the output should be 3.","solution":"def max_min_candies(n, k): Returns the maximum possible minimum number of candies that any player can receive. # Each player gets at least one candy # Distribute candies as evenly as possible return k // n"},{"question":"The Kingdom of Andor is planning a celebration, and the king wishes to organize a grand feast in the main city. There are n cities in Andor, connected by bidirectional roads. Some cities are directly connected, while others might require one or more intermediate cities to travel between them. For the celebration, the king has decided that people from every city should be able to visit any other city by traveling a maximum of k roads. Your task is to determine whether it is possible to rearrange the roads so that the maximum number of roads one needs to travel to reach any city from any other city is exactly k. If it is possible, provide one possible way to rearrange the roads. Input: The first line contains two space-separated integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ n-1). The following n lines describe the connections. The i-th line contains n characters where the j-th character is \'1\' if there is a direct road between city i and city j, and \'0\' otherwise. It is guaranteed that the roads description matrix is symmetric and does not contain self-loops. Output: - If it is possible to rearrange the roads as described, print \\"YES\\" followed by n lines of n characters each, showing the road connections in the same format as the input. - If it is not possible to rearrange the roads, print \\"NO\\". Example: Input: 4 2 0110 1010 1101 0010 Output: YES 0110 1010 1101 0010 Explanation: In this example, it is already possible to travel between any two cities in exactly 2 roads. So, you do not need to change the connections and the output matrix is the same as the input matrix.","solution":"def rearrange_roads(n, k, connections): def is_possible_to_rearrange(n, k): return k >= 1 and k <= n - 1 if not is_possible_to_rearrange(n, k): return \\"NO\\" # Check if the existing connections already satisfy the requirement from collections import deque # Function to perform BFS and return the maximum distance found def bfs_max_distance(start, connections): visited = [False] * n queue = deque([(start, 0)]) max_distance = 0 while queue: node, distance = queue.popleft() if visited[node]: continue visited[node] = True max_distance = max(max_distance, distance) for neighbor in range(n): if connections[node][neighbor] == \'1\' and not visited[neighbor]: queue.append((neighbor, distance + 1)) return max_distance # Check each node to see if the max distance from it to any other node > k for i in range(n): if bfs_max_distance(i, connections) > k: return \\"NO\\" return \\"YESn\\" + \\"n\\".join(\\"\\".join(row) for row in connections) # Reading input and formatting def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) connections = [data[i+2] for i in range(n)] result = rearrange_roads(n, k, connections) print(result)"},{"question":"You are given an integer array `nums` of length `n`. You need to perform `m` operations on this array. Each operation is specified by three integers: `l`, `r`, and `k`. For each operation, you must increase each element of the subarray from index `l` to `r` (inclusive) by `k`. You must then return the updated array after all operations have been completed. For example, consider an initial array `nums = [1, 2, 3, 4]` and two operations: `(0, 2, 1)` and `(1, 3, 2)`. - Operation `(0, 2, 1)` will modify the array to `[2, 3, 4, 4]`. - Operation `(1, 3, 2)` will further modify the array to `[2, 5, 6, 6]`. Return the final array after all operations. # Input - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 100000`), the number of elements in the array and the number of operations respectively. - The second line contains `n` integers, the initial elements of the array. - Each of the next `m` lines contains three integers `l`, `r`, and `k` (`0 ≤ l ≤ r < n` and `-10^9 ≤ k ≤ 10^9`), denoting the subarray and the value to be added to each element within that subarray. # Output - Output a single line containing `n` integers, the final modified array after performing all `m` operations. # Example Input ``` 4 2 1 2 3 4 0 2 1 1 3 2 ``` Output ``` 2 5 6 6 ``` # Note In the provided example, - The first operation `(0, 2, 1)` increases elements from index `0` to `2` by `1`, resulting in `[2, 3, 4, 4]`. - The second operation `(1, 3, 2)` then increases elements from index `1` to `3` by `2`, resulting in the final array `[2, 5, 6, 6]`.","solution":"def modify_array(n, m, nums, operations): Modify the array according to the given operations. Parameters: n (int): Number of elements in `nums`. m (int): Number of operations. nums (list): Initial list of integers. operations (list of tuples): Each tuple contains three integers (l, r, k). Returns: list: Modified array after performing all operations. for l, r, k in operations: for i in range(l, r + 1): nums[i] += k return nums"},{"question":"You are developing a new database system for a library. The library\'s collection consists of different types of materials such as books, magazines, and DVDs. Each material type has its own set of attributes, but also shares some common attributes. The library needs a system that can handle these varying attributes while allowing easy retrieval and updates of information. Design a class hierarchy to model the library\'s collection. The base class should capture the common attributes, while derived classes extend this base class to include specific attributes for each material type. Write a base class `Material` and derived classes `Book`, `Magazine`, and `DVD`. The base class should have the following common attributes: - `title` (string) - `author` (string) - `year` (integer) The derived classes should have the following additional attributes: - `Book`: `isbn` (string), `publisher` (string) - `Magazine`: `issue` (string), `publisher` (string) - `DVD`: `duration` (integer), `director` (string) Implement the following methods: - A constructor for each class to initialize the attributes. - A method `show_info` in each class to output all attributes of that material. Additionally, write a library class `Library` that can: - Add new materials to the collection. - Remove materials by title. - Find materials by title. - Display all materials in the collection. The input starts with the number of operations `n` (1 ≤ n ≤ 1000). Each of the next `n` lines contains one of the following operations: - `add book <title> <author> <year> <isbn> <publisher>` - `add magazine <title> <author> <year> <issue> <publisher>` - `add dvd <title> <author> <year> <duration> <director>` - `remove <title>` - `find <title>` - `show all` For an `add` operation, create the appropriate material object and add it to the library. For a `remove` operation, remove the material with the given title from the library. For a `find` operation, display the information of the material with the given title. For a `show all` operation, display all materials in the library in the order they were added. Output the result of each `find` and `show all` operation. Below is a sample input and output for better understanding. Input: ``` 8 add book \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 1925 \\"9780743273565\\" \\"Scribner\\" add magazine \\"National Geographic\\" \\"Various\\" 2020 \\"June\\" \\"National Geographic Partners\\" add dvd \\"Inception\\" \\"Christopher Nolan\\" 2010 148 \\"Christopher Nolan\\" find \\"The Great Gatsby\\" remove \\"Inception\\" find \\"Inception\\" add book \\"1984\\" \\"George Orwell\\" 1949 \\"9780451524935\\" \\"Harcourt, Brace & World\\" show all ``` Output: ``` Title: The Great Gatsby, Author: F. Scott Fitzgerald, Year: 1925, ISBN: 9780743273565, Publisher: Scribner Material not found: Inception Title: The Great Gatsby, Author: F. Scott Fitzgerald, Year: 1925, ISBN: 9780743273565, Publisher: Scribner Title: National Geographic, Author: Various, Year: 2020, Issue: June, Publisher: National Geographic Partners Title: 1984, Author: George Orwell, Year: 1949, ISBN: 9780451524935, Publisher: Harcourt, Brace & World ```","solution":"class Material: def __init__(self, title, author, year): self.title = title self.author = author self.year = year def show_info(self): return f\\"Title: {self.title}, Author: {self.author}, Year: {self.year}\\" class Book(Material): def __init__(self, title, author, year, isbn, publisher): super().__init__(title, author, year) self.isbn = isbn self.publisher = publisher def show_info(self): return f\\"{super().show_info()}, ISBN: {self.isbn}, Publisher: {self.publisher}\\" class Magazine(Material): def __init__(self, title, author, year, issue, publisher): super().__init__(title, author, year) self.issue = issue self.publisher = publisher def show_info(self): return f\\"{super().show_info()}, Issue: {self.issue}, Publisher: {self.publisher}\\" class DVD(Material): def __init__(self, title, author, year, duration, director): super().__init__(title, author, year) self.duration = duration self.director = director def show_info(self): return f\\"{super().show_info()}, Duration: {self.duration} mins, Director: {self.director}\\" class Library: def __init__(self): self.collection = [] def add_material(self, material): self.collection.append(material) def remove_material(self, title): self.collection = [material for material in self.collection if material.title != title] def find_material(self, title): for material in self.collection: if material.title == title: return material.show_info() return f\\"Material not found: {title}\\" def show_all_materials(self): return [material.show_info() for material in self.collection]"},{"question":"Two computers are communicating over a network. Each computer can only send or receive messages one at a time. There are `n` messages that need to be exchanged between the two computers. Each message has a specific time it takes to be sent. The goal is to determine the minimum total time required for all the messages to be exchanged if the messages can be sent in any order. Each message `i` (1 ≤ i ≤ n) is represented by a positive integer `ti` which is the time it takes to send that message. Rules: - Messages can be sent in any order. - At each time step, one of the computers can send a message to the other. - Both computers cannot send messages simultaneously. The task is to calculate the minimum time required for all the messages to be exchanged. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of messages. - The second line contains `n` integers `t1, t2, ..., tn` (1 ≤ ti ≤ 1000) — the time it takes to send each message. **Output:** - Print a single integer — the minimum total time required for all the messages to be exchanged. **Example:** ``` Input: 4 1 2 3 4 Output: 10 ``` **Explanation:** In the above example, the minimum time required is 10. One of the optimal orders to send the messages is as follows: - Computer A sends message 4 to Computer B (time: 4) - Computer B sends message 1 to Computer A (time: 1) - Computer A sends message 3 to Computer B (time: 3) - Computer B sends message 2 to Computer A (time: 2) Total time is 4 + 1 + 3 + 2 = 10.","solution":"def min_total_time(n, times): Computes the minimum total time required for all messages to be exchanged between two computers. Args: n (int): The number of messages. times (List[int]): The time each message takes to send. Returns: int: The minimum total time required for all the messages to be exchanged. times.sort(reverse=True) return sum(times)"},{"question":"You are given a list of n integers (1 ≤ n ≤ 10^5), where each integer represents the number of pages in a book. A reading challenge requires you to read all the books, but you can only read a certain number of pages in one day. Given an integer k (1 ≤ k ≤ 10^9), representing the number of pages you can read each day, determine the minimum number of days needed to complete the reading challenge. The first line of input is the integer n, the number of books. The second line contains n integers: pages1, pages2, ..., pagesn (1 ≤ pagesi ≤ 10^9), representing the number of pages in each book. The third line contains the integer k, the number of pages you can read each day. Output a single integer representing the minimum number of days required to read all the books. Example: Input: 5 100 200 300 400 500 300 Output: 5 Explanation: - Day 1: Read 100 pages from book 1 and 200 pages from book 2. - Day 2: Read 100 pages from book 2 and 200 pages from book 3. - Day 3: Read 100 pages from book 3 and 200 pages from book 4. - Day 4: Read 100 pages from book 4 and 200 pages from book 5. - Day 5: Read 300 pages from book 5.","solution":"def min_days_to_read_books(n, pages, k): Determines the minimum number of days to read all books given the constraint of maximum pages that can be read in one day. Args: n : int : Number of books. pages : list of int : Number of pages in each book. k : int : Maximum number of pages that can be read in one day. Returns: int : Minimum number of days required. total_pages = sum(pages) return (total_pages + k - 1) // k # This ensures the ceiling of total_pages divided by k."},{"question":"A mobile game involves a character navigating a rectangular grid of size n x m, where some cells are accessible (\'.\') and others are obstacles (\'#\'). The character can move to an adjacent cell if it is accessible and can move up, down, left, or right. The game\'s goal is to find the shortest path from the starting cell (S) to the target cell (T). Write a function that, given the grid, determines the length of the shortest path from S to T. If no path exists, return -1. The grid is guaranteed to have exactly one \'S\' and one \'T\'. The first line of the input contains two integers n and m (2 ≤ n, m ≤ 1000). The next n lines each contain m characters representing the grid. The output should be a single integer which is the length of the shortest path from S to T, or -1 if no path exists. Example: Input: 5 5 S...# ..#.# #.#.. . ...T. Output: 9","solution":"from collections import deque def shortest_path(n, m, grid): def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\': yield nx, ny def bfs(start, end): queue = deque([start]) distances = {start: 0} while queue: x, y = queue.popleft() if (x, y) == end: return distances[(x, y)] for neighbor in get_neighbors(x, y): if neighbor not in distances: queue.append(neighbor) distances[neighbor] = distances[(x, y)] + 1 return -1 start, end = None, None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': end = (i, j) if not start or not end: return -1 return bfs(start, end)"},{"question":"A popular video streaming service has an interesting way of generating recommendations for its users. Each user has a list of K favorite genres. The service recommends videos to users based on these genres. There are N videos available on the platform, each video belongs to exactly one genre, and each genre has M videos. The recommendation algorithm selects a video from the genres the user likes, and the user watches it. Each day, the service generates a new recommendation for the user based on their genres. You want to create a program that simulates the generation of recommendations for multiple users over multiple days and tracks how many times each video is recommended. The first line of the input contains integers N, M, and D - the number of videos, the number of genres, and the number of days, respectively (1 ≤ N ≤ 1000, 1 ≤ M ≤ 100, 1 ≤ D ≤ 365). The second line contains integers K and U - the number of favorite genres per user and the number of users (1 ≤ K ≤ M, 1 ≤ U ≤ 1000). The next U lines each contain K integers, representing the genres that each user likes. Genres are indexed from 1 to M. The output should consist of N integers, each representing the number of times the corresponding video was recommended over all users and all days. Videos are indexed from 1 to N. Example Input: ``` 12 3 4 2 2 1 2 2 3 ``` Example Output: ``` 2 2 0 2 2 0 0 0 2 0 0 2 ``` Explanation: - There are 12 videos and 3 genres, with each genre having exactly 4 videos. - There are 2 users and each user has 2 favorite genres. The first user likes genres 1 and 2, and the second user likes genres 2 and 3. - Over 4 days, the recommendations are distributed among the favorite genres of each user. Therefore, videos from the liked genres are recommended based on the days. The output array counts the number of recommendations for each video.","solution":"import random def generate_recommendations(n, m, d, k, u, user_fav_genres): video_count = [0] * n videos_per_genre = n // m for _ in range(d): for user_genres in user_fav_genres: genre = random.choice(user_genres) genre_start_index = (genre - 1) * videos_per_genre video_index = genre_start_index + random.randint(0, videos_per_genre - 1) video_count[video_index] += 1 return video_count"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. A string is called k-invertible if it is possible to change at most `k` characters in it to make the string a palindrome. Your task is to determine if the given string is k-invertible. If it is, return \\"YES\\", otherwise return \\"NO\\". # Input - The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. - Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100) and an integer `k` (0 ≤ k ≤ |s|). # Output For each test case, print \\"YES\\" if it is possible to make the string a palindrome by changing at most `k` characters; otherwise, print \\"NO\\". # Example Input: ``` 3 abca 1 abcd 1 abcba 0 ``` Output: ``` YES NO YES ``` # Explanation - For the first test case, changing \'b\' to \'c\' will make the string \\"acca\\" which is a palindrome. - For the second test case, we need at least 2 changes to make it a palindrome (e.g., \'d\' to \'a\' and \'c\' to \'b\'), so it is not k-invertible for k=1. - For the third test case, the string is already a palindrome, so no changes are needed.","solution":"def is_k_invertible(s, k): Determines if a string s can be made into a palindrome by changing at most k characters. n = len(s) mismatch_count = 0 # Check mismatched characters from both ends of the string for i in range(n // 2): if s[i] != s[n - i - 1]: mismatch_count += 1 # Check if the number of mismatched characters is within the allowed k changes if mismatch_count <= k: return \\"YES\\" else: return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. results = [] for s, k in test_cases: results.append(is_k_invertible(s, k)) return results"},{"question":"Mia is participating in a treasure hunt game! The game is set up in a forest, represented as a 2D grid of size n times m. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). Mia starts at the top-left corner of the grid (1, 1) and aims to reach the bottom-right corner of the grid (n, m). Mia can only move right or down from any given cell. Due to a magical spell, Mia has a special ability that allows her to remove up to k obstacles from the grid to clear a path to her destination. Your task is to determine whether Mia can reach the bottom-right corner of the grid with the ability to remove at most k obstacles. The first line contains three integers n, m, and k (1 le n, m le 200, 0 le k le 200) — the number of rows, the number of columns, and the maximum number of obstacles Mia can remove, respectively. Each of the next n lines contains m characters (\'.\' or \'#\'), representing the grid where \'.\' denotes an empty cell and \'#\' denotes an obstacle. For each test case, print \\"YES\\" if Mia can reach the bottom-right corner with at most k obstacle removals, otherwise print \\"NO\\". # Example Input ``` 4 4 1 .... .#.. ..#. ..#. 3 3 0 ..# .#. ..# ``` Output ``` YES NO ``` Explanation: - In the first test case, Mia can move as follows even without removing any obstacles: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4). - In the second test case, Mia cannot reach the bottom-right corner without removing any obstacles, and since k=0, she cannot remove any obstacles either.","solution":"def can_reach_with_obstacles(n, m, k, grid): from collections import deque directions = [(1, 0), (0, 1)] # Initialize a 3D DP array to keep track of minimum obstacles removed to reach each cell dp = [[[float(\'inf\')] * (k + 1) for _ in range(m)] for _ in range(n)] dp[0][0][0] = 0 if grid[0][0] == \'.\' else 1 queue = deque([(0, 0, 0)]) # keep track of (current row, current col, obstacles removed so far) while queue: x, y, obstacles = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_obstacles = obstacles + (1 if grid[nx][ny] == \'#\' else 0) if new_obstacles <= k and dp[nx][ny][new_obstacles] > dp[x][y][obstacles] + (1 if grid[nx][ny] == \'#\' else 0): dp[nx][ny][new_obstacles] = dp[x][y][obstacles] + (1 if grid[nx][ny] == \'#\' else 0) queue.append((nx, ny, new_obstacles)) return \\"NO\\""},{"question":"Nora has a tree with `n` nodes, labeled from 1 to n, and `n-1` edges. Each edge connects two distinct nodes and has a certain weight. The weight of a path in the tree is the sum of the weights of the edges in that path. Nora wants to find the longest path in the tree. A path is defined as a sequence of nodes where each adjacent pair of nodes is connected by an edge, and no node is visited more than once. Given the number of nodes in the tree and the description of each edge (nodes connected by the edge and the weight of the edge), write a program to compute the length of the longest path in the tree. The first line of the input contains a single integer `n` (2 ≤ n ≤ 10,000) — the number of nodes in the tree. Each of the next `n-1` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing an edge between nodes `u` and `v` with weight `w`. Print a single integer — the length of the longest path in the tree. Example input: ``` 4 1 2 3 2 3 4 3 4 5 ``` Example output: ``` 12 ``` In this example, the longest path can be from node 1 to node 4 with a total weight of 3 + 4 + 5 = 12.","solution":"from collections import defaultdict, deque def longest_path_in_tree(n, edges): def bfs(start_node): distances = [-1] * (n + 1) distances[start_node] = 0 q = deque([start_node]) furthest_node = start_node max_distance = 0 while q: current = q.popleft() current_distance = distances[current] for neighbor, weight in tree[current]: if distances[neighbor] == -1: distances[neighbor] = current_distance + weight q.append(neighbor) if distances[neighbor] > max_distance: max_distance = distances[neighbor] furthest_node = neighbor return furthest_node, max_distance tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # Step 1: Perform BFS from an arbitrary node (say node 1) to find the furthest node node, _ = bfs(1) # Step 2: Perform BFS from this furthest node to find the longest path in the tree _, longest_path = bfs(node) return longest_path"},{"question":"The feast of Vardanak is approaching, and Polikcap and his friends are preparing for the traditional feast by decorating their giant tree with festive lights. The tree can be modeled as an unbalanced binary tree, where each node represents a position on the tree, and the edges represent connections between these positions. Each node has a certain number of lights that need to be connected to other nodes. Polikcap wants to ensure that all the lights on the tree are connected appropriately following the tree hierarchy. However, the tree got jumbled, and he needs your help to connect the lights optimally. You are given the representation of the tree as a set of edges. Your task is to determine whether the given set of edges can form a valid tree. A binary tree is valid if all the nodes are connected, there is no cycle, and there is exactly one node (the root) with no parent. # Input The first line contains an integer n (1 ≤ n ≤ 2 × 10^5), the number of nodes in the tree. Then follow n-1 lines, each containing two integers u and v (1 ≤ u, v ≤ n), representing an edge connecting node u and node v. # Output If the given edges can form a valid binary tree, print \\"YES\\". Otherwise, print \\"NO\\". # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` YES ``` Input ``` 4 1 2 2 3 3 4 2 4 ``` Output ``` NO ``` # Note In the first example, the given edges form a valid binary tree with node 1 as the root. In the second example, there is a cycle in the tree (2-3-4-2), which makes it invalid.","solution":"def is_valid_tree(n, edges): Determine if the given edges can form a valid tree. :param n: Number of nodes (1 ≤ n ≤ 2 × 10^5) :param edges: List of tuples where each tuple (u, v) represents an edge :returns: \\"YES\\" if the edges form a valid tree, otherwise \\"NO\\" if len(edges) != n - 1: return \\"NO\\" from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() # Function to perform BFS and check connectivity and cycle def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) elif neighbor in queue: return False return True # We run BFS from the first node (assuming 1 as the starting node for convention) is_connected = bfs(1) # Check if all nodes are visited and no cycle is found if is_connected and len(visited) == n: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers. You need to perform a series of operations on this array. In each operation, you can select any two distinct elements, say `a` and `b`, replace one of these elements with `a + b`, and remove the other element. This operation essentially reduces the number of elements in the array by one. Your task is to determine the minimum possible value of the sum of the elements that can be achieved after performing any number of such operations (including zero or more). For example, if you start with the array `[3, 6, 2]`, one possible operation could be replacing `3` and `6` with `9` (so the array becomes `[9, 2]`) and then another operation could be replacing `9` and `2` with `11` (so the array becomes `[11]`). Here, the sum of the elements is `11`. The input consists of two lines. The first line contains an integer `n` (2 ≤ n ≤ 200000) — the number of elements in the array. The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. The output should be a single integer — the minimum possible sum of the elements after performing any number of the described operations. **Example Input:** ``` 3 3 6 2 ``` **Example Output:** ``` 11 ```","solution":"def min_possible_sum(arr): Returns the minimum possible sum of the array after performing any number of the described operations. return sum(arr)"},{"question":"You are given a rectangular grid of size `n x m`, where each cell contains a positive integer representing its height. A water drop starts at the cell located in row `x1`, column `y1`, and flows to an adjacent cell with the lowest height (if there are multiple cells with the same height, it can flow to any of them). The water drop continues to flow until it reaches a cell from which it cannot continue to a lower adjacent cell. Your task is to determine the final position of the water drop. The first line of the input contains two integers `n` and `m` (1 leq n, m leq 1000) — the number of rows and columns in the grid, respectively. Each of the following `n` lines contains `m` integers, representing the heights of the cells in the grid. The next line contains two integers `x1` and `y1` (1 leq x1 leq n, 1 leq y1 leq m) — the initial position of the water drop. If there are multiple cells with the same height, the water will flow in the order: down, up, right, left (if applicable). Print the final position of the water drop as a pair of integers representing the row and column of the grid. **Input:** ``` 3 3 5 4 3 6 1 2 7 8 9 2 2 ``` **Output:** ``` 3 2 ``` **Explanation:** Starting at cell (2, 2) with height 1, the water drop immediately stops as there is no adjacent cell with a lower height. Therefore, the final position is (2, 2).","solution":"def find_final_position(n, m, grid, x1, y1): Determines the final position of the water drop in the grid. # Directions are in the order: down, up, right, left directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m x1 -= 1 # adjust for 0-based index y1 -= 1 # adjust for 0-based index current_x, current_y = x1, y1 while True: min_height = grid[current_x][current_y] next_x, next_y = current_x, current_y for dx, dy in directions: nx, ny = current_x + dx, current_y + dy if is_valid(nx, ny) and grid[nx][ny] < min_height: min_height = grid[nx][ny] next_x, next_y = nx, ny if (next_x, next_y) == (current_x, current_y): break current_x, current_y = next_x, next_y return current_x + 1, current_y + 1 # convert back to 1-based index"},{"question":"Joe has been given a lawn to mow. The lawn is represented as a grid with rows and columns. Each cell is either mowed (denoted as \'M\') or unmowed (denoted as \'U\'). Joe can move in four directions: up, down, left, or right. Joe starts mowing from a cell that is initially unmowed. Once Joe mows a cell, it\'s marked as \'M\', and he can move to any adjacent (up, down, left, or right) unmowed cell to continue mowing. The task ends when there are no more adjacent unmowed cells to mow. Determine the number of distinct patches of unmowed cells Joe can enter and mow completely, starting from any unmowed cell. The first line contains two integers, `r` and `c` (1 ≤ r, c ≤ 1000) — the number of rows and columns in the lawn grid. The next `r` lines contain `c` characters each, representing the lawn grid. Output a single integer — the number of distinct patches of unmowed cells Joe can completely mow. # Example Input ``` 5 6 UMMMMM UUMMMM MMMMMM UUUMMM UMMMMM ``` Output ``` 3 ``` Explanation In the provided example, there are three distinct patches of unmowed cells Joe can start from and mow completely: 1. The cells (0, 0) and (1, 0). 2. The cell (1, 1). 3. The cells (3, 0), (3, 1), (3, 2), and (4, 0). Joe can start from any unmowed cell and move to all connectable unmowed cells, forming patches.","solution":"def count_unmowed_patches(grid, r, c): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < r and 0 <= cy < c and grid[cx][cy] == \'U\': grid[cx][cy] = \'M\' stack.extend([(cx + 1, cy), (cx - 1, cy), (cx, cy + 1), (cx, cy - 1)]) patches_count = 0 for i in range(r): for j in range(c): if grid[i][j] == \'U\': patches_count += 1 dfs(i, j) return patches_count"},{"question":"The Z company is organizing a large conference, and they expect a number of talks to be given by various speakers. Each talk has a specific start and end time. A speaker, once they start a talk, must finish it entirely before they can begin another. The Z company wants to know the maximum number of complete talks any single speaker can attend if they schedule their time optimally. You are given n intervals where each interval [si, ei] represents the start time si and end time ei of a talk. Your task is to determine the maximum number of non-overlapping talks a speaker can attend. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) representing the number of talks. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^9), representing the start and end times of a talk. Output a single integer, the maximum number of non-overlapping talks a speaker can attend. Example: Input: 6 1 4 2 3 3 5 4 6 5 7 6 8 Output: 3 Explanation: One possible optimal schedule is attending talks [2, 3], [4, 6], and [6, 8].","solution":"def max_non_overlapping_talks(talks): talks.sort(key=lambda x: x[1]) end_time = 0 count = 0 for start, end in talks: if start >= end_time: end_time = end count += 1 return count"},{"question":"You are given an integer array `nums` of length `n` where every element appears exactly twice except for one unique element which appears exactly once. Your task is to find and print the unique element in the array. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^6), the length of the array `nums`. - The second line contains `n` integers `nums[i]` (1 ≤ `nums[i]` ≤ 10^9), where every element except one appears exactly twice. # Output - Print the unique element which appears only once in the array. # Example Input ``` 5 2 3 2 4 4 ``` Output ``` 3 ``` Explanation - In the array `[2, 3, 2, 4, 4]`, the element `3` is the only one that appears exactly once, while all other elements appear twice. Hence, `3` is the unique element. Note: Your solution should be efficiently executable within the given constraints.","solution":"def find_unique_element(nums): Given a list of integers where every element appears exactly twice except for one unique element, this function returns the unique element. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"Fred loves hiking and often explores different trails in mysterious forests. He usually carries a map with him, but his sense of direction isn’t the best. Every time he reaches an intersection, he wants to know the shortest path to his destination. Fred\'s forest map is represented as a grid of size n times m. Each cell in the grid is either passable or impassable. Fred can move up, down, left, or right, but not diagonally. Given the start and end positions, determine the shortest path Fred should take to reach his destination. If the destination is not reachable, return -1. The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. The next n lines each contain m characters, where each character is either \'.\' (passable) or \'#\' (impassable). The last line contains four integers r_1, c_1, r_2, and c_2 (1 le r_1, c_1, r_2, c_2 le 1000) — the starting row and column, and the ending row and column, respectively. The grid coordinates are 1-indexed. Print a single integer — the minimum number of moves required to reach the destination, or -1 if the destination is not reachable. # Sample Input ``` 5 5 .#... .#.#. ..#.. #.... ..... 1 1 5 5 ``` # Sample Output ``` 8 ``` # Explanation In the given sample, the grid is: ``` .#... .#.#. ..#.. #.... ..... ``` Fred starts at (1, 1) and ends at (5, 5). One of the possible shortest paths is: (1,1) → (2,1) → (3,1) → (3,2) → (3,3) → (4,3) → (5,3) → (5,4) → (5,5), which takes 8 steps.","solution":"from collections import deque def shortest_path_in_forest(n, m, grid, start, end): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0]-1, start[1]-1, 0)]) visited = set((start[0]-1, start[1]-1)) while queue: x, y, steps = queue.popleft() if (x, y) == (end[0]-1, end[1]-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given an array of integers representing the prices of a single stock on different days. You must determine the maximum profit that can be made by buying one share of the stock on one day and selling it on another day in the future. If no profit can be made, return 0. Write a function `maxProfit` that returns the maximum profit that could be achieved. The function signature is given below: ```python def maxProfit(prices: List[int]) -> int: ``` # Input: The first line contains an integer `n` (1 leq n leq 10^5) — the number of days. The second line contains `n` integers, where the i-th integer (0 leq text{prices}[i] leq 10^4) represents the stock price on the i-th day. # Output: Print a single integer — the maximum profit that can be achieved. If no profit can be made, return 0. # Example: Input: ``` 7 7 1 5 3 6 4 ``` Output: ``` 5 ``` # Explanation: A possible way to get the maximum profit is by buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6), yielding a profit of `6 - 1 = 5`. # Constraints: - You can only complete one transaction (i.e., buy one and sell one share of the stock). - You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","solution":"from typing import List def maxProfit(prices: List[int]) -> int: Returns the maximum profit that could be achieved by buying and selling one share of the stock. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price max_profit = max(max_profit, profit) min_price = min(min_price, price) return max_profit"},{"question":"Alice has a special keyboard with only the numbers from 1 to 9. She likes to create unique segments of digits and wonders how many unique increasing sequences of length k can be formed from the digits. In an increasing sequence, each subsequent digit is greater than the previous one. Alice can use each digit at most once in each sequence. Help Alice determine the number of unique increasing sequences of length k that can be created using the digits from 1 to 9. The first line contains the integer k (1 ≤ k ≤ 9) — the length of the sequence Alice wants to form. Print one integer — the number of unique increasing sequences of length k. For example, for k = 2, the valid increasing sequences are: 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 56, 57, 58, 59, 67, 68, 69, 78, 79, and 89. Thus, the answer would be 36.","solution":"from math import comb def count_increasing_sequences(k): Returns the number of unique increasing sequences of length k that can be formed from the digits 1 to 9. if k < 1 or k > 9: raise ValueError(\\"k must be between 1 and 9\\") return comb(9, k)"},{"question":"Alice lives in Wonderland, where everything operates in a bizarre fashion. In Wonderland, the roads are either one-way or bidirectional, and they connect various cities. Alice wants to visit as many cities as possible without retracing any part of her path. She always starts from her home city and aims to visit different cities and return home. Alice’s travel follows certain rules: - She can only travel on each road at most once in each direction. - She can stop at a city she has already visited only if it means she will take a different road from that city. Given the number of cities and the roads between them, determine the maximum number of unique cities that Alice can visit following the rules. The first line contains two integers, n and m, where n (1 leq n leq 10^5) is the number of cities and m (1 leq m leq 10^5) is the number of roads. The next m lines describe the roads. Each line contains three integers u, v, and d (1 leq u, v leq n, and d is either 1 or 2), where u is the starting city, v is the destination city, and d is 1 if the road is one-way (from u to v) or 2 if the road is bidirectional. Calculate the maximum number of unique cities Alice can visit starting and ending at her home city. Output a single integer, the maximum number of unique cities Alice can visit. # Example Input ``` 5 7 1 2 1 1 3 2 3 4 1 2 4 2 4 5 1 5 1 1 3 5 2 ``` Output ``` 4 ``` # Explanation Alice starts at city 1. A possible path could be: 1 -> 3 -> 4 -> 5, then back to 1. She visits 4 unique cities in this path, which satisfies her requirement without retracing any part of her path.","solution":"def max_unique_cities(n, m, roads): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v, d in roads: graph[u].append((v, 1)) if d == 2: # Bidirectional graph[v].append((u, 1)) # Let\'s utilize a modified version of DFS or BFS to find the longest path def bfs_longest_path(start): visited = defaultdict(bool) queue = deque([(start, 0)]) max_cities = 0 while queue: current_city, cities_visited = queue.pop() if visited[current_city]: continue visited[current_city] = True max_cities = max(max_cities, cities_visited) for neighbor, _ in graph[current_city]: if not visited[neighbor]: queue.append((neighbor, cities_visited + 1)) return max_cities max_unique_visits = 0 for i in range(1, n+1): max_unique_visits = max(max_unique_visits, bfs_longest_path(i)) return max_unique_visits"},{"question":"Evelyn loves to challenge herself by solving intriguing puzzles involving grids. Today, she stumbled upon an exciting problem with a grid of size n x m. She wants to find paths in the grid with precise movement constraints. In the grid, you start at the top-left corner (1, 1) and want to reach the bottom-right corner (n, m). You can move either right (R) or down (D) at each step. However, the path must satisfy the following conditions: 1. The total number of right moves must equal the total number of down moves. 2. At no point on the path should the number of right moves exceed the number of down moves by more than 1. Determine the number of unique paths from the top-left corner to the bottom-right corner that satisfy these constraints. The input consists of a single integer n (1 ≤ n ≤ 100) — the size of the grid (since it\'s always a square grid, the number of rows and columns are equal). Output a single integer — the number of unique paths that meet the criteria. For example, in a 2x2 grid, there are 2 valid paths: \\"RDD\\" and \\"DRR\\". Hence, the answer is 2. If the grid is a 3x3, the valid paths are \\"RRDDDD\\", \\"RDDDRD\\", \\"RDDRDD\\", \\"DRRDD\\", and so on. You are to find the precise count of such valid paths.","solution":"def count_valid_paths(n): Returns the number of valid paths in an n x n grid where the number of right (R) and down (D) moves are equal and the number of right moves never exceeds the number of down moves by more than 1. if n == 1: return 1 dp = [[0] * (n + 1) for _ in range(n + 1)] dp[0][0] = 1 for i in range(n + 1): for j in range(n + 1): if i + j > 0: if j > 0 and j <= i: dp[i][j] += dp[i][j - 1] if i > 0: dp[i][j] += dp[i - 1][j] return dp[n][n] # Example usage: # print(count_valid_paths(2)) # Output: 2 # print(count_valid_paths(3)) # Output: 5"},{"question":"In a city, there are n intersections connected by m bidirectional roads. Each road has a travel time associated with it. Your task is to determine the minimum time required for a person to travel from intersection 1 to intersection n. The transportation network ensures there is always at least one path from intersection 1 to intersection n. Input format: - The first line of the input contains two integers, n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2*10^5) — the number of intersections and the number of roads. - The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing a road between intersections u and v with travel time w. Output format: - Print a single integer representing the minimum travel time from intersection 1 to intersection n. Example: Input: 4 4 1 2 4 1 3 2 2 4 7 3 4 1 Output: 3 Explanation: One possible path from intersection 1 to intersection 4 is 1 -> 3 -> 4 and the total travel time is 2 + 1 = 3. Another path is 1 -> 2 -> 4, but the total travel time is 4 + 7 = 11. Since 3 is the minimum travel time, the output should be 3.","solution":"import heapq def min_travel_time(n, m, roads): Computes the minimum travel time from intersection 1 to intersection n. Parameters: n (int): The number of intersections. m (int): The number of roads. roads (list of tuples): Each tuple contains three integers (u, v, w) where u and v are intersections and w is the travel time. Returns: int: The minimum travel time from intersection 1 to intersection n. graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[n] # Example usage: # n = 4 # m = 4 # roads = [(1, 2, 4), (1, 3, 2), (2, 4, 7), (3, 4, 1)] # print(min_travel_time(n, m, roads)) # Output: 3"},{"question":"Given a sequence of n integers a1, a2, ..., an, determine whether it can be split into two contiguous subsequences such that the sum of the elements in the first subsequence is equal to the sum of the elements in the second subsequence. The first line contains an integer n (2 ≤ n ≤ 1000), the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (-10^3 ≤ ai ≤ 10^3). Print \\"YES\\" if it is possible to split the sequence into two contiguous subsequences with equal sums. Otherwise, print \\"NO\\". Example Input 1: 5 1 2 3 4 5 Example Output 1: NO Example Input 2: 4 1 1 1 1 Example Output 2: YES Explanation: In the first example, no such contiguous subsequences exist that have equal sums. In the second example, splitting the sequence after the second element results in two subsequences with sums of 1+1=2 and 1+1=2 respectively, which are equal.","solution":"def can_split_equal_sum(n, sequence): Returns \\"YES\\" if the sequence can be split into two contiguous subsequences with equal sums, otherwise returns \\"NO\\". :param n: Integer, the number of elements in the sequence :param sequence: List of integers, the sequence :return: String \\"YES\\" or \\"NO\\" total_sum = sum(sequence) if total_sum % 2 != 0: return \\"NO\\" partial_sum = 0 for num in sequence: partial_sum += num if partial_sum == total_sum // 2: return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, you are required to answer several queries regarding the sum of elements in a specific range. Each query will provide two indices, and you need to compute the sum of elements between these indices, inclusive. The first line contains two integers, n and q (1 leq n, q leq 10^5), representing the number of elements in the array and the number of queries, respectively. The second line contains n integers, representing the elements of the array. Each of the next q lines contains two integers, l and r (1 le l le r le n), which are the indices for the query. Output q lines — each line should contain the sum of elements from index l to r. # Input ``` 5 3 1 2 3 4 5 1 3 2 5 3 3 ``` # Output ``` 6 14 3 ``` # Explanation In the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. In the second query, the sum of elements from index 2 to 5 is 2 + 3 + 4 + 5 = 14. In the third query, the sum of elements from index 3 to 3 is 3.","solution":"def range_sum_queries(n, q, arr, queries): # Calculate prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] # Process each query results = [] for l, r in queries: sum_range = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_range) return results"},{"question":"You are given an undirected graph representing a network of cities connected by roads. Each city is identified by a unique number from 1 to n. Each road connects two cities and has a specific travel time. Your task is to determine the shortest travel time from a given source city to all other cities in the network. # Input - The first line contains two integers `n` and `m` (1 leq n leq 10^5, 0 leq m leq 10^6) — the number of cities and the number of roads. - Each of the next `m` lines contains three integers `a`, `b`, and `t` (1 leq a, b leq n, a neq b, 1 leq t leq 10^4) — representing a road between cities `a` and `b` with travel time `t`. - The last line contains an integer `s` (1 leq s leq n) — the source city. # Output - Print `n` integers in a single line. The `i-th` integer should represent the shortest travel time from the source city `s` to city `i`. If a city is not reachable from `s`, print `-1` for that city. # Example Input ``` 4 4 1 2 5 1 3 10 2 3 2 3 4 1 1 ``` Output ``` 0 5 7 8 ``` # Note In the example, the shortest travel time from city 1 to cities 1, 2, 3, and 4 are 0, 5, 7, and 8 respectively. For city 3, reaching city 4 through city 2 is more efficient, hence the total travel time to city 3 is 7 (5 + 2) and to city 4 is 8 (7 + 1). # Constraints - The graph is guaranteed to be a simple graph (no multiple edges between any two vertices and no loops). - There is at least one city.","solution":"import heapq import sys def shortest_travel_time(n, m, roads, s): Calculate the shortest travel time from source city s to all other cities in the network. Parameters: n (int): Number of cities. m (int): Number of roads. roads (list of tuple): List containing tuples of the form (a, b, t) representing roads. s (int): Source city. Returns: list: List of shortest travel times from source city s to each city. -1 if not reachable. # Create adjacency list representation of the graph adj = [[] for _ in range(n + 1)] for a, b, t in roads: adj[a].append((b, t)) adj[b].append((a, t)) # Distance array - initialize to infinity dist = [float(\'inf\')] * (n + 1) dist[s] = 0 # Distance to source # Priority queue for Dijkstra\'s algorithm pq = [(0, s)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) # Replace all unreachable distances (inf) with -1 and distance to self (0) as mentioned in the prompt return [0 if i == s else -1 if d == float(\'inf\') else d for i, d in enumerate(dist)][1:]"},{"question":"A new company, Zenith Software Solutions, is experimenting with a new way of processing data. They have devised an algorithm that processes a sequence of integers, which is represented as a list. The algorithm follows these steps: 1. Sort the list in non-decreasing order. 2. Divide the list into two sublists: one with all the even numbers and the other with all the odd numbers. 3. Interleave the two sublists such that the new list has elements alternately picked from the even sublist and the odd sublist. If one sublist is longer than the other, append the remaining elements to the end of the new list. Given the initial list of integers, you need to simulate the described algorithm and generate the final list after processing. # Input: The first line contains an integer t (1 leq t leq 500) - the number of test cases. The description of each test case follows: - The first line of each test case contains a single integer n (1 leq n leq 1000) - the number of elements in the list. - The second line of each test case contains n space-separated integers a_i (1 leq a_i leq 10^6). # Output: For each test case, output the final list after processing the algorithm in a single line. # Example: Input: ``` 2 5 3 1 4 2 5 6 8 3 5 6 2 9 ``` Output: ``` 2 1 4 3 5 2 3 6 5 8 9 ``` # Explanation: - For the first test case, the sorted list is [1, 2, 3, 4, 5]. The evens are [2, 4], and the odds are [1, 3, 5]. Interleaving them results in [2, 1, 4, 3, 5]. - For the second test case, the sorted list is [2, 3, 5, 6, 8, 9]. The evens are [2, 6, 8], and the odds are [3, 5, 9]. Interleaving them results in [2, 3, 6, 5, 8, 9].","solution":"def process_data(sequence): Processes the sequence according to the described algorithm: 1. Sort the list. 2. Divide into evens and odds. 3. Interleave them. Args: - sequence (list of int): The list of integers to process. Returns: - list of int: The processed list. sequence.sort() evens = [num for num in sequence if num % 2 == 0] odds = [num for num in sequence if num % 2 != 0] result = [] i, j = 0, 0 while i < len(evens) and j < len(odds): result.append(evens[i]) result.append(odds[j]) i += 1 j += 1 # Add remaining elements result.extend(evens[i:]) result.extend(odds[j:]) return result def run_tests(test_cases): Runs multiple test cases for the process_data function. Args: - test_cases (list of tuples): Each tuple contains the integer \'n\' and the list \'sequence\'. Returns: - list of list of int: The processed results for all test cases. results = [] for n, sequence in test_cases: results.append(process_data(sequence)) return results"},{"question":"A social network is represented as an undirected graph with n vertices and m edges, where each vertex represents a user, and an edge between two vertices indicates that the users are friends. You are given two integers, ( u ) and ( v ), representing two users in this network. The task is to find the shortest path (minimum number of edges) between user ( u ) and user ( v ). If there is no path between them, return -1. The first line contains two integers ( n ) and ( m ) ((1 leq n leq 10^5, 0 leq m leq 10^5)) – the number of users and the number of friendships. The next ( m ) lines contain two integers ( a_i ) and ( b_i ) ((1 leq a_i, b_i leq n)) – indicating that user ( a_i ) and user ( b_i ) are friends. Finally, a single line containing two integers ( u ) and ( v ) ((1 leq u, v leq n)) – the users for whom you need to find the shortest path. Print the length of the shortest path between user ( u ) and user ( v ). If there is no path, print -1. **Example:** Input: ``` 6 5 1 2 1 3 2 4 3 5 5 6 3 6 ``` Output: ``` 2 ``` Explanation: In the provided network, the shortest path from user 3 to user 6 passes through user 5, thus having a length of 2 edges.","solution":"from collections import deque, defaultdict def shortest_path(n, m, edges, u, v): Finds the shortest path (minimum number of edges) between user u and user v in an undirected graph. If there\'s no path, returns -1. if u == v: return 0 # Create adjacency list graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # Initialize BFS queue = deque([(u, 0)]) # (current_node, current_distance) visited = set([u]) while queue: current_node, current_distance = queue.popleft() for neighbor in graph[current_node]: if neighbor not in visited: if neighbor == v: return current_distance + 1 visited.add(neighbor) queue.append((neighbor, current_distance + 1)) return -1"},{"question":"You are given an initially empty grid of size n x m filled with zeroes and a series of instructions. Each instruction consists of four integers r1, c1, r2, c2 which specify the top-left and bottom-right corners of a rectangular sub-grid. For each instruction, you need to increase the values of all cells in the specified sub-grid by 1. Your task is to process all the instructions and then output the final state of the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The second line contains an integer k (1 ≤ k ≤ 10000) — the number of instructions. The next k lines each contain four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) describing an instruction. Print n lines with m integers each — the final state of the grid after processing all instructions. # Example Input: ``` 3 3 3 1 1 2 2 2 2 3 3 1 3 3 3 ``` Output: ``` 1 1 1 1 2 2 0 1 1 ``` # Note In the provided example, the grid is initially: ``` 0 0 0 0 0 0 0 0 0 ``` After processing the first instruction (1,1) to (2,2): ``` 1 1 0 1 1 0 0 0 0 ``` After processing the second instruction (2,2) to (3,3): ``` 1 1 0 1 2 1 0 1 1 ``` After processing the final instruction (1,3) to (3,3): ``` 1 1 1 1 2 2 0 1 2 ```","solution":"def process_instructions(n, m, k, instructions): grid = [[0] * m for _ in range(n)] for r1, c1, r2, c2 in instructions: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += 1 for row in grid: print(\' \'.join(map(str, row))) return grid"},{"question":"In Kingdom Revelia, there are n castles located along a straight line, each at a unique coordinate on the Ox axis. Due to recent security threats, the kingdom\'s ruler has decided to ensure that each castle is paired with another castle such that the distance between them is minimized. Every castle must pair with exactly one other castle, forming n/2 pairs. The cost of pairing two castles is defined as the distance between the two castles. Your task is to determine the minimum possible total cost to pair all castles. The input consists of two lines. The first line contains an integer n (2 ≤ n ≤ 100,000), representing the number of castles, which is guaranteed to be even. The second line contains n distinct integers x1, x2, ..., xn (-10^9 ≤ xi ≤ 10^9), representing the coordinates of the castles. These coordinates are given in ascending order. Output a single integer, the minimum possible total cost to pair all castles. **Example:** Input: ``` 4 1 3 6 8 ``` Output: ``` 4 ``` In this example, the optimal pairs are (1, 3) and (6, 8), with a total cost of 2 + 2 = 4.","solution":"def minimum_pairing_cost(n, coordinates): Calculate the minimum possible total cost to pair all castles. Parameters: n (int): The number of castles, which is always even. coordinates (list of int): A list of integers representing the coordinates of the castles in ascending order. Returns: int: The minimum possible total cost to pair all castles. total_cost = 0 for i in range(0, n, 2): total_cost += coordinates[i + 1] - coordinates[i] return total_cost"},{"question":"The Smallest Subsequence You are given a string s, consisting of lowercase English letters. Your task is to find the lexicographically smallest subsequence of s that contains all the distinct characters in s exactly once. A subsequence is a sequence obtained by deleting some (possibly zero) characters from a string without changing the order of the remaining characters. The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the length of the string s. The second line contains the string s. Print the lexicographically smallest subsequence of s that contains all the distinct characters in s exactly once. **Examples:** Input: 7 abcdabc Output: abcd Input: 6 cbacdcbc Output: acdb # Explanation: In the first example, the distinct characters are \'a\', \'b\', \'c\', and \'d\'. The lexicographically smallest subsequence containing all these characters exactly once is \'abcd\'. In the second example, the distinct characters are \'a\', \'b\', \'c\', and \'d\'. The lexicographically smallest subsequence containing all these characters exactly once is \'acdb\', among all possible subsequences.","solution":"def smallest_subsequence_of_distinct_characters(n, s): Given a string s of length n, returns the lexicographically smallest subsequence that contains all the distinct characters in s exactly once. stack = [] seen = set() last_occurrence = {char: idx for idx, char in enumerate(s)} for idx, char in enumerate(s): if char in seen: continue while stack and char < stack[-1] and idx < last_occurrence[stack[-1]]: seen.remove(stack.pop()) stack.append(char) seen.add(char) return \'\'.join(stack)"},{"question":"Tina is playing a game with an array of integers. She starts with an array of length n. She repeatedly performs the following operation until the array becomes empty: - Select any two adjacent elements in the array. Let these two elements be a and b. Remove both elements from the array and insert a new element equal to a + b at the position where a used to be. This shortens the array by one element. As Tina plays optimally, her goal is to minimize the final element left in the array. Find the minimal possible value of the final element. The first line contains a single integer t (1 le t le 100) — the number of test cases. The next 2t lines contain the descriptions of all test cases. The first line of each test case contains one integer n (2 le n le 1000) — the length of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4) — the elements of the array. For each test case, output the minimal possible value of the final element. # Example Input 3 2 1 2 3 -1 2 -3 4 1 -2 3 -4 Output 3 -2 -2 # Explanation In the first test case, Tina can select elements 1 and 2 to get 1 + 2 = 3 as the final element. In the second test case, Tina can select elements 2 and -3 to get 2 - 3 = -1, and then combine this with -1 to get the final element as -2. In the third test case, Tina can optimally combine the elements to achieve the final element -2.","solution":"def minimal_final_element(arr): Returns the minimal possible value of the final element after sequentially combining adjacent elements optimally. arr.sort() while len(arr) > 1: a = arr.pop(0) # Take the first element b = arr.pop(0) # Take the second element arr.append(a + b) arr.sort() # Keep the list sorted for optimal combining return arr[0] def process_input(t, test_cases): Process the list of test cases and returns a list of results results = [] for i in range(t): n, arr = test_cases[i] results.append(minimal_final_element(arr)) return results"},{"question":"You are given an array of integer heights representing the altitude of points along a hiking trail. You need to determine the maximum elevation increase between any two points on the trail, such that the higher point comes after the lower point, i.e., the altitude is rising. The first line contains an integer n (1 leq n leq 10^5) — the number of points on the trail. The second line contains n integers h_1, h_2, ..., h_n (1 leq h_i leq 10^6) — the altitudes of the points on the trail. Your task is to find the maximum difference h_j - h_i for 1 leq i < j leq n such that h_j > h_i. If no such pair of points exist, return 0. Output a single integer, the maximum elevation increase between any two points on the trail, or 0 if no increasing segment is found. # Examples Input 7 2 1 5 1 7 3 10 Output 9 Explanation The maximum elevation increase is between the point with altitude 1 (at position 4) and the point with altitude 10 (at position 7), giving an increase of 10 - 1 = 9. Input 5 4 3 2 3 1 Output 1 Explanation The maximum elevation increase is between the point with altitude 2 (at position 3) and the point with altitude 3 (at position 4), giving an increase of 3 - 2 = 1. Input 4 5 4 3 2 Output 0 Explanation There is no pair of points where the altitude increases, so the result is 0.","solution":"def max_elevation_increase(n, heights): Returns the maximum elevation increase between any two points on the trail. Parameters: - n (int): Number of points on the trail. - heights (list of int): Altitudes of the points on the trail. Returns: - int: Maximum elevation increase or 0 if no increasing segment is found. if n < 2: return 0 min_altitude = heights[0] max_increase = 0 for altitude in heights[1:]: if altitude > min_altitude: max_increase = max(max_increase, altitude - min_altitude) else: min_altitude = min(min_altitude, altitude) return max_increase"},{"question":"You are given a rectangular grid of size n x m filled with non-negative integers. Your task is to find the target row such that the maximum element in that row is the smallest among all the rows. If there are multiple such rows, choose the earliest one (i.e., the one with the smallest index number). Input: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns respectively. - Each of the next n lines contains m space-separated integers, representing the elements of the grid. Output: - Print a single integer which is the index number (1-based) of the target row. Example: Input: 3 4 3 7 4 1 2 5 8 6 7 2 9 3 Output: 1 Explanation: - The maximum elements of each row are 7, 8, and 9 respectively. - Among them, 7 is the smallest, thus the first row is chosen.","solution":"def find_target_row(n, m, grid): Finds the target row such that the maximum element in that row is the smallest among all the rows. min_max_value = float(\'inf\') target_row = -1 for i in range(n): max_element_in_row = max(grid[i]) if max_element_in_row < min_max_value: min_max_value = max_element_in_row target_row = i + 1 # converting to 1-based index return target_row"},{"question":"Alice enjoys solving puzzles and one day she came across a unique problem with bulbs. There are \'n\' bulbs arranged in a straight line, initially all turned off. Alice can perform one type of operation: she can flip all the bulbs from position \'l\' to position \'r\' (1 ≤ l ≤ r ≤ n). To flip a bulb means to change its state from off to on, or from on to off. Alice wants to turn all the bulbs on using the minimum number of operations. Write a program to determine the minimum number of operations needed to turn all the bulbs on. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of bulbs. The second line contains a string of length n consisting of characters \'0\' and \'1\'. \'0\' represents a bulb that is off, and \'1\' represents a bulb that is on. Output a single integer, the minimum number of operations required to turn all the bulbs on. # Example **Input:** ``` 5 00101 ``` **Output:** ``` 2 ``` **Explanation:** In the first operation, flip the bulbs from position 1 to position 3 resulting in the state 11101. In the second operation, flip the bulb at position 5 resulting in the state 11111. So, the minimum number of operations required is 2.","solution":"def min_operations_to_turn_on_bulbs(n, bulbs): Finds the minimum number of operations required to turn all the bulbs on. Parameters: n (int): The number of bulbs. bulbs (str): The string representing the initial state of bulbs. Returns: int: The minimum number of operations to turn all bulbs on. if n == 0: return 0 operations = 0 # We traverse the bulb state, whenever we encounter \'0\', we\'ll perform an operation. i = 0 while i < n: if bulbs[i] == \'0\': # Perform flip operation which means skipping till we find consecutive \'1\'s while i < n and bulbs[i] == \'0\': i += 1 operations += 1 else: i += 1 return operations # Example Usage: # n, bulbs = 5, \\"00101\\" # print(min_operations_to_turn_on_bulbs(n, bulbs)) # Output: 2"},{"question":"A small village is organizing an archery competition. In this competition, each participant has to shoot a certain number of arrows at different targets arranged in a row. Each target has a score that increases with distance from the origin, starting from 1 for the closest target and increasing by 1 for each subsequent target. The village has a special rule to determine the winners: the participant whose arrows hit the exact middle target of the sequence will be considered for a special prize. Your task is to determine how many participants hit the middle target. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of participants. The second line contains a single integer m (1 ≤ m ≤ 10^5) — the total number of targets. Each of the next n lines contains one integer ai (1 ≤ ai ≤ m), indicating the target number that the i-th participant\'s arrow hit. After reading the input, your task is to output a single integer representing the number of participants who hit the middle target. Note: The middle target is defined as the ceil(m/2) target. Example: ``` Input: 5 7 1 4 4 7 4 Output: 3 ``` In this example, there are 7 targets, so the middle target is target 4 (since ceil(7/2) equals 4). Out of 5 participants, 3 of them hit target 4.","solution":"import math def count_middle_hits(n, m, hits): Returns the number of participants who hit the middle target. Parameters: n (int): Number of participants. m (int): Number of targets. hits (list of int): List of target numbers each participant\'s arrow hit. Returns: int: Number of participants who hit the middle target. middle_target = math.ceil(m / 2) return sum(1 for hit in hits if hit == middle_target)"},{"question":"Elaine and Jerry live in separate apartments on the same street. They like to visit each other frequently. Since they do not want to keep waiting for a long time at the door, they want to synchronize their schedules. Given their daily schedules, they want to find the longest common period during which both are free. Each person\'s schedule is represented by a list of intervals during the day when they are busy. Find the longest time interval during which both are free. The first line of input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 100), the number of busy intervals for Elaine, followed by n lines each containing two integers, start and end (0 ≤ start < end ≤ 24), representing the start and end of a busy interval for Elaine. The next line contains an integer m (1 ≤ m ≤ 100), the number of busy intervals for Jerry, followed by m lines each containing two integers, start and end (0 ≤ start < end ≤ 24), representing the start and end of a busy interval for Jerry. Print t lines, each containing the length of the longest free interval for both Elaine and Jerry. If there is no common free interval, print 0. For example, consider a day split into 24 hours (from 0 to 24): - In the first test case, Elaine is busy from 1 to 5 and from 15 to 20, Jerry is busy from 3 to 10 and from 20 to 22. They both are free from 0 to 1, 10 to 15, and 22 to 24, and the longest common free interval is 5 hours (from 10 to 15). - In the second test case, both have overlapping busy intervals that cover the whole day, so the longest common free interval is 0.","solution":"def find_longest_free_interval(elaine_busy_intervals, jerry_busy_intervals): # Create a merged list of events marking the start and end of busy intervals for both events = [] for start, end in elaine_busy_intervals: events.append((start, \'start\')) events.append((end, \'end\')) for start, end in jerry_busy_intervals: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events by time events.sort() free_start = 0 free_intervals = [] busy_counter = 0 for time, e_type in events: if e_type == \'start\': if busy_counter == 0: free_intervals.append((free_start, time)) busy_counter += 1 elif e_type == \'end\': busy_counter -= 1 if busy_counter == 0: free_start = time # Append last interval if ends before end of the day if free_start < 24: free_intervals.append((free_start, 24)) # Calculate the longest common free interval longest_free_interval = 0 for start, end in free_intervals: longest_free_interval = max(longest_free_interval, end - start) return longest_free_interval def process_test_cases(test_cases): results = [] for test_case in test_cases: n, elaine_busy_intervals, m, jerry_busy_intervals = test_case result = find_longest_free_interval(elaine_busy_intervals, jerry_busy_intervals) results.append(result) return results def parse_input(test_cases_input): index = 0 t = test_cases_input[index] index += 1 test_cases = [] for _ in range(t): n = test_cases_input[index] index += 1 elaine_busy_intervals = [] for _ in range(n): start, end = test_cases_input[index], test_cases_input[index + 1] index += 2 elaine_busy_intervals.append((start, end)) m = test_cases_input[index] index += 1 jerry_busy_intervals = [] for _ in range(m): start, end = test_cases_input[index], test_cases_input[index + 1] index += 2 jerry_busy_intervals.append((start, end)) test_cases.append((n, elaine_busy_intervals, m, jerry_busy_intervals)) return test_cases def main(inputs): test_cases = parse_input(inputs) return process_test_cases(test_cases)"},{"question":"Alice loves playing board games, and she recently invented a new game called \\"Maze Escape\\". The game is played on a rectangular grid with n rows and m columns. Each cell in the grid can either be empty or contain an obstacle. Alice needs to navigate from the top-left corner of the grid to the bottom-right corner. She can move to an adjacent cell to the left, right, top, or bottom, but she cannot move diagonally. Alice wants to know the minimum number of moves required to escape the maze, or if it\'s even possible. Can you help her determine the answer? The input format is as follows: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns of the grid. - The next n lines each contain m characters, where each character is either \'.\' (an empty cell) or \'#\' (an obstacle). Output the minimum number of moves required to escape the maze, or -1 if it is not possible. For example: Input: ``` 3 3 ..# .#. ... ``` Output: ``` 4 ``` Explanation: One possible path is: move right to (1,2), down to (2,2), down to (3,2), and right to (3,3). This involves 4 moves.","solution":"from collections import deque def min_moves_to_escape(maze, n, m): Returns the minimum number of moves required to escape the maze, or -1 if it\'s not possible. if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def solve_maze_escape(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].split()) maze = [list(line) for line in input_lines[1:]] return min_moves_to_escape(maze, n, m)"},{"question":"Alice and Bob are preparing for a coding competition, and they have a sequence of scores from several practice rounds. They want to determine the difference in scores between the two for different intervals to analyze who performed better in various segments of their practice. They decide to process several queries that will help them compare their scores. Alice\'s scores are represented by an array A of length n, and Bob\'s scores are represented by an array B of equal length n. You need to handle m queries. Each query is in the format \\"type l r\\" where \\"type\\" is either 1 or 2. If the \\"type\\" is 1, calculate and output the difference (Alice\'s total score - Bob\'s total score) from the l-th to the r-th practice round, inclusive. If the \\"type\\" is 2, calculate and output the difference (Bob\'s total score - Alice\'s total score) from the l-th to the r-th practice round, inclusive. The first line contains two integers n and m (1 le n, m le 100,000) — the number of practice rounds and the number of queries. The second line contains n integers A_1, A_2, dots, A_n (1 le A_i le 10^9) — the scores of Alice in each practice round. The third line contains n integers B_1, B_2, dots, B_n (1 le B_i le 10^9) — the scores of Bob in each practice round. The next m lines each contain a query in the format \\"type l r\\" (1 le text{type} le 2, 1 le l le r le n). Output the results of each query, one per line. Example: ``` Input: 5 3 10 20 30 40 50 20 10 40 30 25 1 1 3 2 2 4 1 3 5 Output: 10 -30 30 ``` Explanation: - For the first query, Alice\'s total score from 1 to 3 is 10 + 20 + 30 = 60, and Bob\'s total score is 20 + 10 + 40 = 70, so the result is 60 - 70 = -10. - For the second query, Bob\'s total score from 2 to 4 is 10 + 40 + 30 = 80, and Alice\'s total score is 20 + 30 + 40 = 90, so the result is 80 - 90 = -10. - For the third query, Alice\'s total score from 3 to 5 is 30 + 40 + 50 = 120, and Bob\'s total score is 40 + 30 + 25 = 95, so the result is 120 - 95 = 25.","solution":"def process_queries(n, m, alice_scores, bob_scores, queries): This function processes the scores and queries. :param n: Number of practice rounds :param m: Number of queries :param alice_scores: List of Alice\'s scores :param bob_scores: List of Bob\'s scores :param queries: List of queries where each query is a tuple (type, l, r) :return: List of results for each query results = [] # Precompute prefix sums for Alice and Bob prefix_sum_alice = [0] * (n + 1) prefix_sum_bob = [0] * (n + 1) for i in range(1, n + 1): prefix_sum_alice[i] = prefix_sum_alice[i - 1] + alice_scores[i - 1] prefix_sum_bob[i] = prefix_sum_bob[i - 1] + bob_scores[i - 1] # Process each query for query in queries: qtype, l, r = query if qtype == 1: # Alice\'s total - Bob\'s total from l to r result = (prefix_sum_alice[r] - prefix_sum_alice[l - 1]) - (prefix_sum_bob[r] - prefix_sum_bob[l - 1]) elif qtype == 2: # Bob\'s total - Alice\'s total from l to r result = (prefix_sum_bob[r] - prefix_sum_bob[l - 1]) - (prefix_sum_alice[r] - prefix_sum_alice[l - 1]) results.append(result) return results"},{"question":"You are managing a library system where users can borrow and return books. Each book is identified by a unique ID, and users can borrow multiple books at once. However, a user can only borrow one copy of each book. You need to create a function to process a series of borrow and return operations and determine the current list of borrowed books for each user. Each operation is defined by three integers: the user ID, the book ID, and the operation type (1 for borrow, 2 for return). The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of operations. The next t lines contain three integers each: the user ID (1 ≤ user ID ≤ 1000), the book ID (1 ≤ book ID ≤ 1000), and the operation type (1 for borrow, 2 for return). For each user who has currently borrowed at least one book, print the user ID followed by the list of book IDs they have borrowed. Print the user IDs in ascending order. Each user\'s list of book IDs should also be in ascending order. Example: Input: 8 1 101 1 2 101 1 1 102 1 2 103 1 1 101 2 1 103 1 2 101 2 2 103 2 Output: 1 102 2 Explanation: - User 1 borrows book 101 and 102. - User 2 borrows books 101 and 103. - User 1 returns book 101 and borrows book 103. - User 2 returns both books. After all operations, user 1 has book 102, and user 2 has no books.","solution":"def manage_library_operations(operations): Manages the borrowing and returning of books in a library system. Args: operations (list of tuples): A list of tuples where each tuple consists of (user_id, book_id, operation_type). operation_type 1 represents borrowing a book and operation_type 2 represents returning a book Returns: dict: A dictionary where keys are user IDs and values are sorted lists of book IDs that the user has currently borrowed. user_books = {} for user_id, book_id, operation_type in operations: if user_id not in user_books: user_books[user_id] = set() if operation_type == 1: user_books[user_id].add(book_id) elif operation_type == 2: user_books[user_id].discard(book_id) result = {} for user_id, books in user_books.items(): if books: result[user_id] = sorted(books) return result # Example Usage if __name__ == \\"__main__\\": operations = [ (1, 101, 1), (2, 101, 1), (1, 102, 1), (2, 103, 1), (1, 101, 2), (1, 103, 1), (2, 101, 2), (2, 103, 2), ] print(manage_library_operations(operations))"},{"question":"Given a string of lowercase English letters. Your task is to find the length of the longest substring that contains only vowels. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\'. The first line contains the input string s (1 ≤ |s| ≤ 1000) — a string consisting of lowercase English letters. Output a single integer representing the length of the longest substring that contains only vowels. For example: ``` Input: aeiouxxaeiou Output: 5 ``` In this example, the longest substring containing only vowels is \\"aeiou\\" with a length of 5.","solution":"def longest_vowel_substring(s): This function returns the length of the longest substring in the given string \'s\' that contains only vowels. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\'. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 0 # Check one last time in case the longest substring ends at the end of the string if current_length > max_length: max_length = current_length return max_length"},{"question":"A large e-commerce platform has a promotional event to boost sales during a festive season. There are **n** different products, and each product has a price **p_i**. During the event, customers can buy a mystery box instead of individual products. A mystery box contains a fixed number of products, but the combination is unknown until purchase. The management decides to create these mystery boxes in such a way that each box contains exactly **k** different products, maximizing the total price of the products within the box. Customers can choose a mystery box from multiple available options, but the invariant is the quantity **k**. Given the prices of products and the desired number of different products per mystery box, determine the maximum possible sum for the mystery box. # Input - The first line contains a single integer **t** (1 le t le 10^3) — the number of test cases. The descriptions of the test cases follow. - The first line of each test case contains two integers **n** (1 le n le 10^4) and **k** (1 le k le n) — the number of different products and the number of products each mystery box should contain. - The second line of each test case contains **n** integers **p_1, p_2, ..., p_n** (1 le p_i le 10^9) — the prices of the products. # Output - For each test case, print a single integer — the maximum possible sum for a mystery box containing exactly **k** different products. # Example ``` Input: 3 5 3 1 2 3 4 5 6 2 10 20 30 40 50 60 4 4 8 11 19 24 Output: 12 110 62 ``` # Explanation In the first test case, the three most expensive products are 3, 4, and 5, which sum up to 12. In the second test case, the two most expensive products are 50 and 60, which sum up to 110. In the third test case, since **k** is equal to **n**, the sum is the total of all products\' prices, which is 8 + 11 + 19 + 24 = 62.","solution":"def max_sum_mystery_box(t, test_cases): For each test case, find the maximum possible sum of prices for a mystery box containing exactly k different products. Parameters: t (int): The number of test cases. test_cases (list): A list where each element is a tuple containing: - an integer n (number of different products) - an integer k (number of products in each mystery box) - a list of integers representing the prices of the products. Returns: list: A list of integers where each integer is the maximum possible sum for a mystery box of k products for the corresponding test case. results = [] for n, k, prices in test_cases: # Sort prices in descending order and take the top k prices prices.sort(reverse=True) max_sum = sum(prices[:k]) results.append(max_sum) return results"},{"question":"In a kingdom, there are n cities connected by m bidirectional roads. Each road has a certain length in kilometers. The kingdom has just established a new policy to promote travel between cities more effectively. The policy states that every two cities should have at most one direct road connecting them and all the cities must be connected with each other directly or indirectly. Your task is to determine if the current network of roads satisfies the policy criteria, and if not, determine the minimal number of roads that should be added or removed to ensure that all cities are connected and each pair of cities has no more than one direct road between them. Consider the following problem statement: The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of cities and roads. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000) indicating that there is a road of length l between cities u and v. If the current road network already satisfies the policy criteria, print \\"YES\\". Otherwise, print \\"NO\\" and the minimal number of roads that should be added or removed to meet the policy criteria. # Sample Input ``` 4 3 1 2 3 2 3 4 3 4 5 ``` # Sample Output ``` NO 2 ``` Explanation: In the sample input, cities 1, 2, 3, and 4 are not all connected. There is no direct or indirect connection from city 1 to city 4. To meet the policy criteria, at least two new roads are needed to connect all cities. For example, roads from city 1 to city 3 and from city 2 to city 4.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def road_policy(n, m, roads): parent = [i for i in range(n)] rank = [0] * n # Check if there is more than one road between any two cities roads_set = set((min(u, v), max(u, v)) for u, v, l in roads) if len(roads) != len(roads_set): return \\"NO\\", -1 # Use union-find to determine the number of connected components for u, v, l in roads: union(parent, rank, u - 1, v - 1) # Count the number of unique parents to get the number of components components = len(set(find(parent, i) for i in range(n))) # If there is only one component, the cities are all connected if components == 1: return \\"YES\\" else: # Calculate the number of roads needed to connect all components return \\"NO\\", components - 1"},{"question":"In a distant galaxy, you are tasked with organizing the logistics for a space fleet. The fleet consists of **n** ships, each requiring a specific amount of fuel to travel between checkpoints in a mission. The amount of fuel required for each ship is given by an array **fuel**, where fuel[i] represents the fuel requirement of the i-th ship. You need to answer **m** queries about the fleet. Each query can be either to update the fuel requirement of a specific ship or to calculate the sum of the fuel requirements for a range of ships. Specifically, the queries can be of two types: 1. **1 l r**: Calculate the sum of fuel requirements from ship **l** to ship **r** (both inclusive). 2. **2 i x**: Update the fuel requirement of the i-th ship to **x** units. Given the initial fuel requirements of the ships and the list of queries, you must answer each query efficiently. The first line of the input contains two integers **n** and **m** (1 ≤ n, m ≤ 100,000) — the number of ships and the number of queries respectively. The second line contains n integers **fuel_1, fuel_2, ..., fuel_n** (1 ≤ fuel_i ≤ 10^9). Each of the next m lines contains a query in the format described above. Output the result of each type 1 query in a separate line. # Example Input: ``` 5 4 10 20 30 40 50 1 2 4 2 3 35 1 1 3 1 3 5 ``` # Example Output: ``` 90 65 125 ``` In this example, the initial fuel array is [10, 20, 30, 40, 50]. - The first query asks for the sum from index 2 to 4 (20 + 30 + 40 = 90). - The second query updates the third ship\'s fuel requirement to 35, resulting in [10, 20, 35, 40, 50]. - The third query asks for the sum from index 1 to 3 (10 + 20 + 35 = 65). - The fourth query asks for the sum from index 3 to 5 (35 + 40 + 50 = 125).","solution":"def process_queries(n, m, fuel, queries): results = [] for query in queries: if query[0] == 1: _, l, r = query results.append(sum(fuel[l-1:r])) elif query[0] == 2: _, i, x = query fuel[i-1] = x return results # Example usage: n = 5 m = 4 fuel = [10, 20, 30, 40, 50] queries = [ [1, 2, 4], [2, 3, 35], [1, 1, 3], [1, 3, 5] ] print(process_queries(n, m, fuel, queries)) # Output: [90, 65, 125]"},{"question":"In the land of Treeland, there are n trees forming a connected acyclic graph. Each tree is unique and labeled with an integer from 1 to n. Each tree is directly connected to one or more other trees by an undirected path. The tradition in Treeland is to celebrate in the town square, which must be equidistant from the farthest trees in the land to ensure that everyone has a fair travel distance to the celebration. The town square is located at the center of the largest connected subgraph (the longest chain of connected trees) of the main graph. Given the number of trees and the edges connecting them, find the minimum number of colors needed to highlight the paths from the town square to the farthest trees. You can use the same color for multiple paths but each path from the town square to a farthest tree must be uniquely identifiable by a color. The input files consist of multiple lines. The first line contains an integer n (2 leq n leq 100000) — the number of trees in Treeland. The next n-1 lines contain two integers each a and b (1 leq a, b leq n) — representing a path between tree a and tree b. Output a single integer — the minimum number of colors required to highlight the paths from the town square to the farthest trees. **Example Input:** ``` 6 1 2 1 3 3 4 3 5 4 6 ``` **Example Output:** ``` 2 ``` **Explanation:** In the given example, you can form two longest chains which are: from tree 2 to tree 6, or from tree 2 to tree 5. In this case, to highlight the paths from the centralized town square properly, you would need 2 colors.","solution":"from collections import defaultdict, deque def find_farthest_node(n, edges, start): # Perform BFS to find farthest node from the start node queue = deque([(start, 0)]) visited = [False] * (n + 1) visited[start] = True farthest_node = start max_distance = 0 while queue: current, distance = queue.popleft() if distance > max_distance: max_distance = distance farthest_node = current for neighbor in edges[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return farthest_node, max_distance def minimum_colors_needed(n, paths): # Create adjacency list edges = defaultdict(list) for a, b in paths: edges[a].append(b) edges[b].append(a) # Find the farthest node from an arbitrary node (node 1) farthest_from_start, _ = find_farthest_node(n, edges, 1) # Find the farthest node from the node found above farthest_node, max_distance = find_farthest_node(n, edges, farthest_from_start) # The number of colors required is ceil(max_distance / 2) return (max_distance + 1) // 2 # Example usage: # n = 6 # paths = [(1, 2), (1, 3), (3, 4), (3, 5), (4, 6)] # print(minimum_colors_needed(n, paths)) # Output: 2"},{"question":"Bella is organizing a round-robin chess tournament. There are n players in the tournament, and each player has to play exactly one game with every other player. A game between player i and player j has a difficulty level equal to the absolute value of the difference between their skill levels, |si - sj|, where si is the skill level of player i and sj is the skill level of player j. Bella wants to schedule the games in such a way that the maximum possible difficulty level of any scheduled game is minimized. In other words, she wants to ensure that the most difficult game played in the tournament is as easy as possible. Given the skill levels of the players, determine the minimum possible value of the maximum difficulty level of any game scheduled in the tournament. The first line contains an integer n (2 ≤ n ≤ 50,000) — the number of players in the tournament. The second line contains n space-separated integers s1, s2, ..., sn (-10^9 ≤ si ≤ 10^9) — the skill levels of the players. Output a single integer — the minimum possible value of the maximum difficulty level of any game scheduled in the tournament. In the first sample, the skill levels are [1, 6, 8, 12]. The easiest way to minimize the maximum difficulty level is to schedule the games with nearby skill levels, which would result in the maximum difficulty of |8 - 6| = 2. In the second sample, the skill levels are [3, 5, 10, 12]. Here the optimal scheduling would result in a maximum difficulty of |5 - 3| = 2.","solution":"def minimize_maximum_difficulty(n, skill_levels): Determines the minimum possible value of the maximum difficulty level of any game scheduled in the tournament. Parameters: n (int): The number of players in the tournament skill_levels (list): The skill levels of the players Returns: int: The minimum possible value of the maximum difficulty level # Sort the skill levels skill_levels.sort() # Initialize the minimum maximum difficulty min_max_diff = float(\'inf\') # Iterate through the sorted skill levels and find the minimum difference between adjacent players for i in range(n - 1): min_max_diff = min(min_max_diff, skill_levels[i + 1] - skill_levels[i]) return min_max_diff"},{"question":"Write a function that takes an encoded string and decodes it. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer. You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only used for those repeat numbers, k. For example, there won’t be input like 3a or 2[4]. For example: ``` s = \\"3[a]2[bc]\\", return \\"aaabcbc\\". s = \\"3[a2[c]]\\", return \\"accaccacc\\". s = \\"2[abc]3[cd]ef\\", return \\"abcabccdcdcdef\\". ``` Function signature: ``` string decodeString(string s); ``` Given a string s, implement the function decodeString, which decodes the string based on the given encoding rule.","solution":"def decodeString(s: str) -> str: Decodes the encoded string according to the given encoding rule. stack = [] current_string = \\"\\" current_number = 0 for char in s: if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'[\': stack.append((current_string, current_number)) current_string = \\"\\" current_number = 0 elif char == \']\': prev_string, number = stack.pop() current_string = prev_string + number * current_string else: current_string += char return current_string"},{"question":"Mark is organizing a concert and needs to distribute vouchers to attendees. Each attendee receives a unique voucher number. However, Mark has realized that some of the printed vouchers have been contaminated, rendering them unusable. To make the distribution as fair as possible, he wants to know the largest subset of valid voucher numbers that can be given continuously without any gaps. Given a list of integers representing voucher numbers, determine the length of the longest continuous subset of valid voucher numbers that can be given out. The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of voucher numbers. The second line contains n distinct integers ai (1 ≤ ai ≤ 1,000,000,000) — the voucher numbers. Some of these numbers might be contaminated and missing from the sequence. Output a single integer — the length of the longest continuous subset of valid voucher numbers. **Example Input:** ``` 7 100 4 200 1 3 2 300 ``` **Example Output:** ``` 4 ``` **Explanation:** In the given example, the longest continuous subset of valid voucher numbers is [1, 2, 3, 4], which has length 4.","solution":"def longest_continuous_subset(n, vouchers): Given a list of voucher numbers, determine the length of the longest continuous subset of valid voucher numbers. :param n: The number of voucher numbers :param vouchers: A list of voucher numbers :return: The length of the longest continuous subset of valid voucher numbers voucher_set = set(vouchers) max_length = 0 for voucher in vouchers: if voucher - 1 not in voucher_set: current_length = 0 current = voucher while current in voucher_set: current_length += 1 current += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given an array `a` consisting of `n` positive integers. You need to modify the array so that the resultant array contains at least one subsequence (the order in which elements appear in the subsequence is the same as their in initial order in the array) whose sum is exactly equal to a given integer `X`. You can modify the array by changing any number to zero (i.e., deleting it from consideration in the subsequence). For example, if the array `a` is `[1, 2, 3, 4, 5]` and `X` is `9`, you can change `5` to `0` and the resultant array will be `[1, 2, 3, 4, 0]`, which contains the subsequence `[1, 3, 5]` that sums up to `9`. Write a function `can_create_subsequence(a: List[int], X: int) -> str` that takes the list `a` and the integer `X` and returns \\"YES\\" if it is possible to modify the array such that it contains at least one subsequence with the sum exactly equal to `X`, otherwise returns \\"NO\\". # Input - The first line contains two integers `n` and `X` (1 ≤ `n` ≤ 100, 1 ≤ `X` ≤ 1000) — the number of elements in the array and the required sum of the subsequence, respectively. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ `a_i` ≤ 100), the elements of the array. # Output - The function should return a single string \\"YES\\" if it is possible to modify the array such that it contains at least one subsequence with the sum exactly equal to `X`, otherwise return \\"NO\\". # Example ```py def can_create_subsequence(a: List[int], X: int) -> str: # Your code here # Example 1 assert can_create_subsequence([1, 2, 3, 4, 5], 9) == \\"YES\\" # Example 2 assert can_create_subsequence([1, 2, 3], 7) == \\"NO\\" # Example 3 assert can_create_subsequence([2, 4, 6, 8], 8) == \\"YES\\" ``` In the first example, you can achieve the sum `9` with the subsequence `[4, 5]`. In the second example, the sum `7` is not achievable with any subsequence. In the third example, the sum `8` can be achieved with the single element subsequence `[8]`.","solution":"from typing import List def can_create_subsequence(a: List[int], X: int) -> str: n = len(a) # Create a DP table to count if a specific sum can be formed, initializing with False dp = [False] * (X + 1) dp[0] = True # Process each number in the array for number in a: # Traverse the dp array backwards for sum_value in range(X, number - 1, -1): if dp[sum_value - number]: dp[sum_value] = True return \\"YES\\" if dp[X] else \\"NO\\""},{"question":"Marta is developing a program to handle multiple user transactions in a bank system. Each user has an account balance, and Marta has a list of transactions where each transaction either deposits or withdraws some amount from a user\'s account. Each transaction consists of: - A user identifier (an integer), - A transaction type (a string of either \'deposit\' or \'withdraw\'), - And an amount (a non-negative integer). Before applying any transaction, Marta needs to check if the user exists in the bank system. If not, she adds the user with an initial balance of 0. For \'deposit\' transactions, she adds the amount to the user\'s account balance. For \'withdraw\' transactions, she can only subtract the amount if the current balance is greater than or equal to the amount. Otherwise, the transaction is ignored. You need to write a function that processes a list of transactions and returns a dictionary representing the final balances of all users. Input: - An integer `m` (1 ≤ m ≤ 10^4), representing the number of transactions. - A list of `m` tuples where each tuple represents a transaction. Each transaction is a tuple formatted as (user_id, type, amount). Output: - A dictionary where the key is the user identifier and the value is the final account balance for that user. Example: ```python m = 6 transactions = [ (1, \'deposit\', 50), (2, \'deposit\', 20), (1, \'withdraw\', 30), (1, \'withdraw\', 30), (3, \'withdraw\', 10), (4, \'deposit\', 70) ] result = process_transactions(m, transactions) # Expected output: {1: 20, 2: 20, 3: 0, 4: 70} ``` In this example, user 1 ends up with a balance of 20 after two deposits and one successful and one ignored withdrawal. User 2 and 4 both have deposited amounts. User 3 attempted a withdrawal with zero initial balance, so their final balance remains 0.","solution":"def process_transactions(m, transactions): Process a list of transactions and return a dictionary representing the final balances of all users. :param m: Number of transactions :param transactions: List of tuples representing transactions :return: Dictionary with user identifiers as keys and account balances as values balances = {} for user_id, t_type, amount in transactions: if user_id not in balances: balances[user_id] = 0 if t_type == \'deposit\': balances[user_id] += amount elif t_type == \'withdraw\' and balances[user_id] >= amount: balances[user_id] -= amount return balances"},{"question":"In the kingdom of Logica, there are n cities connected by m bidirectional roads. Each road connects two different cities and has a certain length. The king wants to establish a postal service to ensure that all cities are connected and the total length of the roads used is minimized. In other words, the king needs to build a minimum spanning tree (MST) of the cities. You are hired to help the king find the minimum cost to connect all cities using the given roads. In cases where no spanning tree can be formed due to the disconnection in the network, you should inform the king accordingly. The first line of input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) — where u and v are the cities connected by a road and w is the length of the road. If it\'s possible to connect all cities, print the minimum total length of the roads used. Otherwise, print \\"impossible\\". Input: ``` 4 5 1 2 5 2 3 10 3 4 3 4 1 2 1 3 12 ``` Output: ``` 10 ``` Input: ``` 4 2 1 2 5 3 4 10 ``` Output: ``` impossible ```","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) # path compression return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, m, edges): parent = [i for i in range(n + 1)] rank = [0] * (n + 1) edges = sorted(edges, key=lambda item: item[2]) mst_cost = 0 edge_count = 0 for edge in edges: u, v, w = edge root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_cost += w edge_count += 1 if edge_count == n - 1: break if edge_count != n - 1: return \\"impossible\\" return mst_cost def minimum_cost_to_connect_all_cities(n, m, roads): return kruskal(n, m, roads)"},{"question":"Peter has a peculiar set of rules for a game he invented that involve an n×m grid of switches. Each cell in the grid contains a switch that can either be in the ON (1) or OFF (0) position. Peter defines a \\"light pattern\\" as a contiguous subgrid (i.e., a rectangular area within the grid) where all the switches are in the ON position. However, to make things interesting, Peter is only interested in the number of subgrids of size 2×2 that are completely in the ON position (i.e., all four switches in the subgrid are ON). Given the grid configuration, your task is to calculate the total number of 2×2 subgrids that are entirely ON. # Input - The first line contains two space-separated integers n and m (2 ≤ n, m ≤ 1000) — the dimensions of the grid. - Each of the next n lines contains m characters, with each character being \'1\' (ON) or \'0\' (OFF). # Output - Output a single integer — the number of 2×2 subgrids that are entirely ON. # Example Input ``` 3 4 1110 1111 0111 ``` Output ``` 4 ``` # Explanation In the given grid: ``` 1110 1111 0111 ``` The 2x2 subgrids that are entirely ON are: - Top-left 2x2: ``` 11 11 ``` - Middle-top 2x2: ``` 11 11 ``` - Middle-right 2x2: ``` 11 11 ``` - Bottom-middle 2x2: ``` 11 11 ``` Thus, there are 4 such subgrids.","solution":"def count_2x2_all_on_subgrids(n, m, grid): Count the number of 2x2 subgrids that are completely ON. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings representing the grid :return: Number of 2x2 subgrids with all 1s count = 0 for i in range(n - 1): for j in range(m - 1): if grid[i][j] == \'1\' and grid[i][j + 1] == \'1\' and grid[i + 1][j] == \'1\' and grid[i + 1][j + 1] == \'1\': count += 1 return count"},{"question":"You are given a string s of length n consisting of lowercase English letters, and q queries. Each query is denoted by two integers l_i and r_i, representing a substring of s from index l_i to r_i (inclusive). For each query, you need to determine the lexicographically smallest character that appears at least twice in the specified substring. If there is no character that appears at least twice, return \'-1\'. The first line contains one integer n (1 le n le 100000) - the length of the string s. The second line contains the string s. The third line contains one integer q (1 le q le 100000) - the number of queries. Then, q lines follow, each containing two integers l_i and r_i (1 le l_i le r_i le n) - representing the i-th query. Output the answer for each query on a new line. Example: Input: ``` 7 abbacca 2 1 3 2 7 ``` Output: ``` b a ```","solution":"def smallest_character_twice(s, queries): For each query, determine the lexicographically smallest character that appears at least twice in the specified substring. results = [] for l_i, r_i in queries: substring = s[l_i-1:r_i] frequency = {} for char in substring: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 smallest_char = \'-1\' for char in sorted(frequency.keys()): if frequency[char] > 1: smallest_char = char break results.append(smallest_char) return results"},{"question":"You have been gifted a piece of paper by the Science Society with a special binary string printed on it. This string contains only the characters ‘0’ and ‘1’. Your task is to cut this string into several non-empty substrings such that each substring contains an equal number of \'0\'s and \'1\'s. You need to determine the maximum number of such substrings you can obtain. You should implement a function that takes in a binary string and returns the maximum number of substrings with equal numbers of \'0\'s and \'1\'s. If no such division is possible, the function should return -1. **Input:** - A single string of length n (1 ≤ n ≤ 100000) consisting of \'0\'s and \'1\'s only. **Output:** - An integer representing the maximum number of substrings with equal numbers of \'0\'s and \'1\'s, or -1 if it\'s not possible to divide the string accordingly. ```python def max_equal_substrings(s: str) -> int: # Your code here # Example usage: # Input: \\"010110\\" # Output: 3 ```","solution":"def max_equal_substrings(s: str) -> int: Returns the maximum number of substrings with equal number of \'0\'s and \'1\'s. If not possible, returns -1. count_zero = 0 count_one = 0 result = 0 for char in s: if char == \'0\': count_zero += 1 else: count_one += 1 if count_zero == count_one: result += 1 if result == 0: return -1 return result"},{"question":"In the world of Algorithmia, there exists an ancient ritualistic game played using a special type of sequence. You\'re given a sequence of length ( n ), and each element is either an integer or a special symbol \'*\'. The \'*\' symbol can be replaced by any integer from 1 to ( m ), while respecting certain constraints: the resulting sequence must be strictly increasing. Your task is to help the inhabitants of Algorithmia by determining one possible way to replace all \'*\' symbols to form a strictly increasing sequence. If it is impossible to create such a sequence, you should return \\"no\\". The first line of input contains two integers ( n ) and ( m ) (( 1 leq n leq 10^5 ), ( 1 leq m leq 10^9 )) — the length of the sequence and the maximum value any \'*\' can take, respectively. The second line contains ( n ) elements, each of which is either an integer ( a_i ) (( 1 leq a_i leq m )) or a \'*\', representing the sequence. If a valid sequence can be formed, print \\"yes\\" in the first line, followed by the modified sequence in the second line. Otherwise, print \\"no\\" in the first line. **Input:** ``` 5 10 1 * * 5 6 ``` **Output:** ``` yes 1 2 3 5 6 ``` **Input:** ``` 3 2 2 * 1 ``` **Output:** ``` no ``` **Explanation:** In the first example, one possible way to replace \'*\' is by choosing 2 and 3 to get the strictly increasing sequence [1, 2, 3, 5, 6]. In the second example, it is impossible to replace \'*\' to form a strictly increasing sequence as there\'s no valid number greater than 2 (first element) and less than 1 (third element).","solution":"def form_increasing_sequence(n, m, sequence): # Create a list to hold the integer sequence if found result = [] # Iterate through the sequence elements for i in range(n): if sequence[i] != \'*\': result.append(int(sequence[i])) # Add the known integer to the result else: # Handle the \'*\' character prev_val = result[-1] if result else 0 # Previous value in the sequence next_val = None # Find the next known integer in the sequence (if available) for j in range(i + 1, n): if sequence[j] != \'*\': next_val = int(sequence[j]) break # Determine the valid range of values for the current position min_val = prev_val + 1 max_val = next_val - 1 if next_val is not None else m if min_val <= max_val: result.append(min_val) # Use the smallest possible value else: return \\"no\\" # Return \\"no\\" if no valid value can be placed return \\"yes\\", result # Example usage n = 5 m = 10 sequence = [\'1\', \'*\', \'*\', \'5\', \'6\'] print(form_increasing_sequence(n, m, sequence)) # Output should be (\\"yes\\", [1, 2, 3, 5, 6])"},{"question":"Elena has received a landscape map represented by an array of integers. Each integer in the array represents the height of a hill. Elena loves hiking and wants to know the minimum number of steps required to traverse the entire landscape from the first hill to the last hill. In one step, Elena can either move to an adjacent hill or jump over exactly one adjacent hill to the next one. However, Elena can only jump from a hill to a higher or equal height hill to her starting hill. Your task is to find the minimum number of steps required for Elena to traverse the entire landscape. The first and only line of input contains an integer n (1 ≤ n ≤ 2·105) — the number of hills, followed by n non-negative integers representing the heights of the hills. Print a single integer — the minimum number of steps required for Elena to traverse from the first hill to the last hill. In the first sample, Elena can traverse the landscape in one step if she simply moves to the next adjacent hill. In the second sample, Elena should jump over the second hill to land on the third hill, because the third hill has a height greater than or equal to the first hill\'s height, thus resulting in three steps. For example: Input: 6 1 2 4 7 6 5 Output: 3 Explanation: Elena can start at the first hill (1), move to the second hill (2), jump over the third hill (4) to the fourth hill (7), and finally move to the last hill (5) in three steps.","solution":"def min_steps_to_traverse(hills): n = len(hills) if n == 1: return 0 steps = 0 i = 0 while i < n - 1: if i + 2 < n and hills[i + 2] >= hills[i]: i += 2 else: i += 1 steps += 1 return steps"},{"question":"You are given an array of integers arr of length n and an integer x. Your task is to find the length of the smallest contiguous subarray such that the sum of the elements in this subarray is greater than or equal to x. If no such subarray exists, return -1. The first line of input contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the length of the array and the integer x. The second line contains n integers arr_i (1 ≤ arr_i ≤ 10^9) — the elements of the array. Output a single integer, the length of the smallest contiguous subarray with a sum of at least x, or -1 if no such subarray exists. # Example Input: ``` 8 15 1 2 3 4 5 6 7 8 ``` Output: ``` 2 ``` Explanation: The smallest contiguous subarray with a sum of at least 15 is [7,8], which has a length of 2.","solution":"def min_subarray_len(arr, x): Returns the length of the smallest contiguous subarray such that the sum of the elements in this subarray is greater than or equal to x. If no such subarray exists, returns -1. n = len(arr) min_len = float(\'inf\') start = 0 current_sum = 0 for end in range(n): current_sum += arr[end] Shorten the window as much as possible while current_sum >= x: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"You are given an array of n integers a1, a2, ..., an. You need to find the maximum sum of a subsequence such that no two elements of the subsequence are adjacent in the original array. A subsequence is derived by deleting some or no elements from the array without changing the order of the remaining elements. The first line contains an integer n (1 ≤ n ≤ 100), which is the number of elements in the array. The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000). Print a single integer — the maximum sum of the subsequence with the above-mentioned property. In the first example, you can pick elements [5, 2] from the array to get the maximum sum 7. In the second example, you can pick elements [10, 3, 10] from the array to get the maximum sum 23. In the third example, you can pick elements [3, 13, 12, 5] from the array to get the maximum sum 33.","solution":"def max_sum_no_adjacent(arr): Returns the maximum sum of a subsequence such that no two elements of the subsequence are adjacent in the original array. if not arr: return 0 n = len(arr) if n == 1: return arr[0] inclusive = arr[0] exclusive = 0 for i in range(1, n): new_exclusive = max(exclusive, inclusive) inclusive = exclusive + arr[i] exclusive = new_exclusive return max(inclusive, exclusive)"},{"question":"Write a function to find the length of the longest common subsequence of two given strings. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguously. For example, \\"abc\\", \\"abg\\", \\"bdf\\", \\"aeg\\", \\"acefg\\", .. etc are subsequences of \\"abcdefg\\". The first line of the input contains an integer t (1 leq t leq 10) - the number of test cases. Each test case consists of two lines, each containing a string s_1 and s_2 respectively. The length of each string will be between 1 and 1000. The output should contain t lines, each line representing the length of the longest common subsequence for the corresponding test case. Example: Input: ``` 2 abcde ace abc def ``` Output: ``` 3 0 ```","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two strings s1 and s2. m, n = len(s1), len(s2) # Create a DP table to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array in bottom-up fashion. for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def solve(test_cases): results = [] for s1, s2 in test_cases: results.append(longest_common_subsequence(s1, s2)) return results"},{"question":"You are given an array of integers and you are required to perform a series of operations on it to minimize the largest element in the array. You can perform the following operation any number of times: Select any element in the array and replace it with any integer that divides it (but not zero). For example, if you have an element 6 in the array, you can replace it with 1, 2, 3, or 6 itself. The goal is to determine the minimum possible value of the largest element in the array after performing any number of operations. The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 1000), the number of test cases. The next t lines each describe a test case. Each test case consists of two lines: - The first line contains a single integer n (1 leq n leq 1000), the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. For each test case, print a single integer — the minimum possible value of the largest element in the array after performing any number of operations. # Example Input: ``` 2 4 10 20 30 40 3 12 15 18 ``` Output: ``` 10 9 ``` Explanation: In the first test case, it is not possible to reduce 40, 30, or 20 below 10 by replacing them with their divisors. However, if all elements are replaced with 10 (since 10 is a divisor of itself), the maximum element remains 10. In the second test case, one possible way to get the largest element to 9 is to replace 12 with 9 (which is the floor of 12/1.33 rounded up), 15 with 9, and 18 with 9.","solution":"def min_largest_element(t, test_cases): Returns the minimum possible value of the largest element in the array after performing the given operation any number of times for each test case. Parameters: - t: int, number of test cases. - test_cases: list of tuples, each tuple contains: - int, number of elements in the array. - list of int, the array of elements. Returns a list of int, the minimum possible value of the largest element for each test case. results = [] for n, array in test_cases: # The minimum possible maximum element can never be lower than the smallest element in the array. min_largest = min(array) results.append(min_largest) return results"},{"question":"A certain kingdom is divided into `N` provinces, connected by bidirectional roads. Each province is numbered from `1` to `N`, and every road connects two distinct provinces. The kingdom\'s administration wants to ensure efficient communication by introducing a modern telecommunication system. To achieve this, they plan to install communication towers in some of the provinces. However, installing a tower in a province involves significant expense, so they aim to minimize the number of towers. The placement of towers should be such that each province either has a tower or is directly connected to a province with a tower. Given the number of provinces `N` and the list of roads `roads`, write a function `minimum_number_of_towers(N, roads)` that returns the minimum number of communication towers needed. # Input: - `N`: an integer representing the number of provinces (2 ≤ N ≤ 10^5). - `roads`: a list of tuples where each tuple `(a, b)` represents a bidirectional road between provinces `a` and `b` (1 ≤ a, b ≤ N). # Output: - An integer representing the minimum number of communication towers required. # Example: **Input:** ```python N = 5 roads = [(1, 2), (1, 3), (3, 4), (3, 5)] ``` **Output:** ```python 1 ``` **Explanation:** Placing a communication tower in province `3` will cover all provinces directly or indirectly through the roads. # Constraints: - Ensure the function runs efficiently for large inputs. - Consider edge cases such as when all provinces are isolated or form a single connected component. # Function Signature: ```python def minimum_number_of_towers(N: int, roads: List[Tuple[int, int]]) -> int: ```","solution":"from typing import List, Tuple import collections def minimum_number_of_towers(N: int, roads: List[Tuple[int, int]]) -> int: # Create an adjacency list to represent the graph graph = collections.defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) visited = [False] * (N + 1) towers = 0 def bfs(node): queue = collections.deque([node]) local_visited = set() while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in local_visited and not visited[neighbor]: local_visited.add(neighbor) queue.append(neighbor) # Mark all local_visited as visited for v in local_visited: visited[v] = True return local_visited # Iterate over each province for i in range(1, N + 1): if not visited[i]: local_visited = bfs(i) if not local_visited: # If it is an isolated province, consider a tower in itself towers += 1 visited[i] = True else: towers += 1 # Optionally place a tower at any node in local_visited visited[i] = True return towers"},{"question":"Laura is organizing a treasure hunt in her backyard, which happens to be a large grid of size n times n. She has placed m treasures at specific coordinates on the grid. Each treasure has a given value. Participants can start from any cell, and are allowed to move to an adjacent cell vertically or horizontally but not diagonally. They can collect treasures as they visit the cells containing treasures. Given the layout of the grid and coordinates of the treasures, determine the maximum total value of treasures a participant can collect if they start from any cell and move to any other cell, or the same cell, collecting treasures along their path. The goal is to find a path that maximizes the collected treasure value and print the maximum value that can be collected during the treasure hunt. The first line contains two integers n and m (1 le n le 500, 1 le m le 10,000). Each of the next m lines contains three integers x, y, and v (1 le x, y le n, 1 le v le 10^9), where x and y represent the coordinates of the treasure, and v represents its value. Print one integer, the maximum total value of treasures that can be collected. # Example: Input: ``` 4 3 1 2 5 2 3 10 4 4 7 ``` Output: ``` 22 ``` Explanation: One of the optimal paths to collect the maximum total treasure of 22 is to start at cell (1, 2) which has a treasure of value 5, move to (2, 3) to collect the treasure with value 10, and finally move to (4, 4) to collect the treasure with value 7.","solution":"def find_max_treasure(n, m, treasures): from collections import defaultdict treasure_map = defaultdict(int) for x, y, v in treasures: treasure_map[(x-1, y-1)] += v dp = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): dp[i][j] = treasure_map[(i, j)] + max(dp[i-1][j] if i>0 else 0, dp[i][j-1] if j>0 else 0) return max(max(row) for row in dp) # Example Usage n = 4 m = 3 treasures = [(1, 2, 5), (2, 3, 10), (4, 4, 7)] print(find_max_treasure(n, m, treasures)) # Expected Output: 22"},{"question":"You are given an array of n integers. You can perform an operation where you choose any two distinct elements and replace them with their sum. Your task is to determine the maximum possible sum of the elements after performing the operation exactly n-1 times (until the array is reduced to a single element). # Input The first line contains a single integer n (1 ≤ n ≤ 100_000), the number of integers in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6), the elements of the array. # Output Print a single integer, the maximum possible sum achievable. # Examples Example 1 ``` Input: 3 1 2 3 Output: 6 Explanation: Perform one operation: choose 2 and 3, the new array is [1, 5]. Perform another operation: choose 1 and 5, resulting in the sum 6. ``` Example 2 ``` Input: 4 10 20 30 40 Output: 100 Explanation: Perform one operation: choose 30 and 40, the new array is [10, 20, 70]. Perform another operation: choose 20 and 70, the new array is [10, 90]. Perform another operation: choose 10 and 90, resulting in the sum 100. ``` # Note Optimal solution involves summing up the elements in such a way that the sum of the elements increases progressively by always choosing the largest available elements to combine.","solution":"def max_possible_sum(arr): Returns the maximum possible sum after performing the operation n-1 times where n is the length of the array `arr`. The operation involves replacing two distinct elements with their sum. return sum(arr)"},{"question":"Pavel is organizing a series of lectures on graph theory, and he has to arrange the schedule such that no two lectures that are directly related to each other happen on the same day. Each lecture can cover one or more topics, and some topics are prerequisites for others. This means that for any pair of topics (a, b), if a is a prerequisite for b, then lecture on b must happen after lecture on a. Pavel has a list of n topics and m prerequisite pairs. He needs to know the minimum number of days required to schedule all the lectures such that no two directly related topics are covered on the same day. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of topics and the number of prerequisite pairs. Next m lines contain pairs (a, b) (1 ≤ a, b ≤ n; a ≠ b) — each pair means that topic a is a prerequisite for topic b. The output should contain a single integer — the minimum number of days required to schedule all the lectures. Example input: 5 4 1 2 2 3 3 4 4 5 Example output: 5 Explanation: In this example: - Topic 1 is a prerequisite for Topic 2. - Topic 2 is a prerequisite for Topic 3. - Topic 3 is a prerequisite for Topic 4. - Topic 4 is a prerequisite for Topic 5. Therefore, each topic must be scheduled on a different day, requiring a minimum of 5 days.","solution":"def minimum_days_to_schedule_lectures(n, m, prerequisites): from collections import deque, defaultdict # Create adjacency list and in-degree list graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in prerequisites: graph[a].append(b) in_degree[b] += 1 # Initialize queue with nodes having zero in-degree queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) days = 0 visited_nodes = 0 while queue: days += 1 for _ in range(len(queue)): node = queue.popleft() visited_nodes += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If visited all nodes, return days, otherwise the graph has a cycle return days if visited_nodes == n else -1"},{"question":"A mountain array is defined as an array that: 1. Has at least 3 elements. 2. There exists some index i (0 < i < n - 1) such that: - A[0] < A[1] < ... < A[i] - A[i] > A[i + 1] > ... > A[n - 1] Given an array of integers, determine if it is a mountain array. The first line contains a single integer n (3 ≤ n ≤ 100). The next line contains n integers: a1, a2, ..., an (1 ≤ ai ≤ 1000). Print \\"YES\\" if the given array is a mountain array, otherwise print \\"NO\\". Example input: 5 1 3 2 4 1 Example output: NO Example input: 5 1 3 2 1 0 Example output: YES","solution":"def is_mountain_array(arr): Determines if the given array is a mountain array. :param arr: List of integers representing the array. :return: \\"YES\\" if the array is a mountain array, otherwise \\"NO\\". n = len(arr) if n < 3: return \\"NO\\" i = 1 # walk up while i < n and arr[i] > arr[i - 1]: i += 1 # peak can\'t be first or last if i == 1 or i == n: return \\"NO\\" # walk down while i < n and arr[i] < arr[i - 1]: i += 1 return \\"YES\\" if i == n else \\"NO\\""},{"question":"In a certain country, there is a network of cities connected through bidirectional roads. Each road has a specific travel cost associated with it. The government of the country decided to implement a new policy - every road can be toll-free every k years. Hence, every k years, people can travel between any two cities without having to pay any travel cost. Given the current year and the year when the next toll-free period will start, your task is to compute the minimum cost required to travel from the starting city to the destination city considering the next toll-free period. If it is possible to wait for the toll-free period to reduce the travel cost, your solution should take that into account. The first line of input contains four integers n, m, u, v (2 ≤ n ≤ 100, 1 ≤ m ≤ 200, 1 ≤ u, v ≤ n) - the number of cities, the number of roads, the starting city, and the destination city respectively. The second line contains three space-separated integers: the current year, the year when the next toll-free period starts (which is a multiple of k), and k (1 ≤ current year < next toll-free year ≤ 1000, 1 ≤ k ≤ 1000). Each of the following m lines contains three integers x, y, c (1 ≤ x, y ≤ n, 0 ≤ c ≤ 100) - two cities connected by a road and the travel cost of that road. Note that x ≠ y and all roads are bidirectional. Print a single integer - the minimum travel cost from city u to city v considering the toll-free periods. If there is no possible route, print -1. Example Input: 4 5 1 3 5 10 5 1 2 20 2 3 30 3 4 25 4 1 50 2 4 60 Example Output: 0 Explanation: Since the current year is 5, the next toll-free period starts at year 10, and k is 5, we can wait until year 10 when all roads are toll-free, thus the travel cost from city 1 to city 3 becomes 0.","solution":"import heapq def min_travel_cost(n, m, u, v, current_year, next_toll_free_year, k, roads): # Dijkstra\'s algorithm to find the shortest path def dijkstra(start): distances = [float(\'inf\')] * n distances[start - 1] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node - 1]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor - 1]: distances[neighbor - 1] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances if current_year < next_toll_free_year: # If we can wait for the toll-free period, return cost 0 if (next_toll_free_year - current_year) % k == 0: return 0 # Build the graph graph = {i: [] for i in range(1, n + 1)} for x, y, c in roads: graph[x].append((y, c)) graph[y].append((x, c)) # Perform dijkstra from the start city distances = dijkstra(u) result = distances[v - 1] return result if result != float(\'inf\') else -1"},{"question":"Tommy the Tailor loves creating beautiful patterns with fabrics. He wants to design a special type of fabric patterns, which consists of several rows and columns of colored cells. Each cell has a specific color represented by an integer. To make the fabric pattern more appealing, Tommy decides to classify the pattern based on its symmetry. A pattern is said to be symmetric if it looks the same when rotated by 180 degrees. In other words, if you turn the fabric upside down, it should appear exactly the same as it was before turning. Given a grid representing the pattern of size ( r times c ) (where ( r ) is the number of rows and ( c ) is the number of columns), determine if the pattern is symmetric. # Input The first line of input contains two integers, ( r ) and ( c ) (( 1 leq r, c leq 100 )) – the number of rows and the number of columns, respectively. The next ( r ) lines contain ( c ) integers each, representing the colors of the cells in the grid. # Output Output \\"YES\\" if the pattern is symmetric, otherwise output \\"NO\\". # Example Input ``` 4 4 1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1 ``` Output ``` YES ``` Input ``` 3 3 1 2 3 4 5 6 9 8 7 ``` Output ``` NO ``` # Explanation In the first example, rotating the grid by 180 degrees yields the same pattern: ``` 4 3 2 1 8 7 6 5 5 6 7 8 1 2 3 4 ``` Thus, the output is \\"YES\\". In the second example, rotating the grid by 180 degrees does not yield the same pattern: ``` 7 8 9 6 5 4 3 2 1 ``` Thus, the output is \\"NO\\".","solution":"def is_symmetric(r, c, grid): Determines if the grid pattern is symmetric when rotated 180 degrees. Args: r (int): Number of rows. c (int): Number of columns. grid (list of lists of int): The r x c grid representing the pattern. Returns: str: \\"YES\\" if the pattern is symmetric, otherwise \\"NO\\". for i in range(r): for j in range(c): if grid[i][j] != grid[r - 1 - i][c - 1 - j]: return \\"NO\\" return \\"YES\\""},{"question":"You are playing a game on a 2D rectangular grid with n rows and m columns. Each cell of the grid initially contains a distinct integer from 1 to n times m inclusive. Your goal is to navigate from the top-left corner of the grid (cell `(1, 1)`) to the bottom-right corner of the grid (cell `(n, m)`). You can move to an adjacent cell either to the right or to the down. The difficulty of a path is defined as the maximum integer value present in the cells along the path. Given the dimensions of the grid, determine the minimal possible difficulty of any valid path from the top-left cell to the bottom-right cell. # Input: The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. # Output: Output a single integer — the minimal possible difficulty of any valid path from the top-left to the bottom-right corner of the grid. # Example: Input: 4 4 Output: 7 # Explanation: The grid is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 One possible optimal path is: 1 -> 2 -> 3 -> 4 -> 8 -> 12 -> 16. The maximum value along this path is 16, but the minimal possible difficulty of any valid path can be 7 (e.g., path: 1 -> 2 -> 3 -> 4 -> 8 -> 12 -> 7).","solution":"def minimal_path_difficulty(n, m): Determine the minimal possible difficulty of any valid path from the top-left to the bottom-right corner of the grid. :param n: Number of rows :param m: Number of columns :return: Minimal possible difficulty of any valid path return (n - 1) + (m - 1) + 1"},{"question":"Maria\'s bakery specializes in making custom cakes. Each cake is made up of n layers, stacked one on top of the other. Each layer is a perfect circle, and each subsequent layer must be strictly smaller in radius than the layer below it. Maria receives an order to bake a cake with exactly n layers, but she only has m circular baking pans available, each with a different radius. Maria wants to know if it is possible to select n pans out of the m available pans to construct the cake, maintaining the required property that each layer is strictly smaller than the one below it. Write a function to help Maria determine if it is possible to bake the cake. The function should return \\"YES\\" if it is possible and \\"NO\\" otherwise. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of layers required for the cake and the number of baking pans available. - The second line contains m integers r1, r2, ..., rm (1 ≤ ri ≤ 1000) — the radii of the available baking pans. Output: - Print \\"YES\\" if it is possible to select n pans with strictly decreasing radii to bake the cake. Otherwise, print \\"NO\\". Examples: Input: 5 7 15 10 20 5 8 25 12 Output: YES Input: 3 3 4 4 4 Output: NO Input: 2 5 5 9 6 7 3 Output: YES","solution":"def can_bake_cake(n, m, radii): Determines if it is possible to bake a cake with exactly n layers out of m available baking pans such that each layer is strictly smaller than the one below it. Parameters: n (int): number of layers required for the cake. m (int): number of baking pans available. radii (list): list of radii of the available baking pans. Returns: str: \\"YES\\" if it is possible, otherwise \\"NO\\". if n > m: return \\"NO\\" # Not enough pans to select `n` layers # Sort the available radii in descending order radii.sort(reverse=True) # Check if we can pick first n layers and each layer is strictly smaller than the previous one for i in range(n - 1): if radii[i] <= radii[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"You are organizing a friendly coding competition among your friends. You have notified exactly n friends about the competition, and each of them has been assigned a registration ID from 1 to n. Unfortunately, your friends had conflicts with their schedules, and some of them had to drop out of the competition. You have a list of the IDs of these friends who dropped out. Your task is to fairly redistribute the IDs to those still participating such that no one has an ID that appears in the list of dropouts. You should reassign the IDs starting from 1 in a continuous increasing manner. The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n) — the total number of friends and the number of friends who dropped out, respectively. The second line contains m distinct integers between 1 and n, representing the IDs of the friends who dropped out. Output n - m integers, representing the reassigned IDs for the friends still participating. The IDs should be printed in ascending order, from 1 to n with the IDs of the dropped out friends skipped. # Example: Input: ``` 5 2 2 5 ``` Output: ``` 1 3 4 ``` In the example above, you need to reassign IDs 1, 3, and 4 to the remaining friends.","solution":"def reassign_ids(n, m, dropouts): Reassign IDs to the remaining participants. Parameters: n (int): Total number of friends m (int): Number of dropouts dropouts (list of int): List of IDs of the friends who dropped out Returns: list of int: List of reassigned IDs dropouts_set = set(dropouts) reassigned_ids = [id for id in range(1, n + 1) if id not in dropouts_set] return reassigned_ids"},{"question":"Alice loves playing games involving sequences of numbers. She has recently discovered a new challenge called \\"Hill Sequences\\". A sequence is called a Hill Sequence if it consists of an increasing sequence followed by a decreasing sequence with no plateaus (no two consecutive elements are equal). For example, [1, 3, 5, 4, 2] is a Hill Sequence. Given a sequence of integers, help Alice determine whether it can be rearranged to form exactly one Hill Sequence. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers separated by spaces — the elements of the sequence (1 ≤ a_i ≤ 1000). Print \\"YES\\" if the sequence can be rearranged to form exactly one Hill Sequence. Otherwise, print \\"NO\\". For example, for the input: ``` 5 1 3 5 4 2 ``` The output should be: ``` YES ``` And for the input: ``` 5 1 2 2 3 4 ``` The output should be: ``` NO ``` Explanation: - For the first example, the sequence [1, 3, 5, 4, 2] is already a Hill Sequence. - For the second example, there is no way to rearrange the numbers to form a sequence with a single peak.","solution":"def can_form_hill_sequence(n, sequence): Determines if the given sequence can be rearranged to form exactly one Hill Sequence. if n == 1: return \\"YES\\" sequence.sort() for i in range(n-1): if sequence[i] == sequence[i+1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of n strings (1 ≤ n ≤ 100), where each string consists of lowercase English letters. Your task is to rearrange the characters of each string to form an anagram of a target string t. An anagram is a string that contains exactly the same characters as the target string, but they can be in any order. For each string in the list, you can only use the characters that appear in that string to form an anagram of t. You need to form as many anagrams of t as possible using the given list of strings. Each string can only be used once to form one anagram. Input - The first line contains the target string t (1 ≤ |t| ≤ 100). - The second line contains a single integer n (1 ≤ n ≤ 100). - Each of the next n lines contains one string, representing the list of strings. Output - Print a single integer — the maximum number of anagrams of t that can be formed using the list of strings. Example: Input: ``` abb 4 bba bab abc abb ``` Output: ``` 3 ```","solution":"from collections import Counter def max_anagrams(target, n, strings): target_count = Counter(target) anagram_count = 0 for s in strings: s_count = Counter(s) # Check if we can build an anagram of target from s if all(s_count[char] >= target_count[char] for char in target_count): anagram_count += 1 return anagram_count"},{"question":"You are given an acyclic directed graph with `n` vertices and `m` edges. Each vertex represents a city, and each edge represents a one-way road between two cities. The graph is such that there are no cycles, meaning, it is possible to travel from any vertex to another without revisiting any vertex. Your task is to find the number of distinct paths from a given start city to a given end city. The first line contains three integers `n`, `m`, and `k` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ k ≤ m), where `n` is the number of cities, `m` is the number of one-way roads, and `k` is an upper limit on the number of edges that can be used in any path from the start city to the end city. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing a one-way road from city `u` to city `v`. The last line contains two integers `start` and `end` (1 ≤ start, end ≤ n), representing the start city and the end city. Output a single integer — the number of distinct paths from the start city to the end city using at most `k` edges. As the number of paths can be large, output the result modulo `1000000007` (10^9 + 7). Note: If there is no path from the start city to the end city, the output should be `0`. Example input: ``` 4 4 3 1 2 1 3 2 4 3 4 1 4 ``` Example output: ``` 2 ```","solution":"def count_paths(n, m, k, edges, start, end): MOD = 1000000007 from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # dp[i][j] will store the number of ways to reach city j using exactly i edges dp = [[0] * (n + 1) for _ in range(k + 1)] dp[0][start] = 1 for i in range(1, k + 1): for u in range(1, n + 1): if dp[i-1][u] > 0: for v in graph[u]: dp[i][v] = (dp[i][v] + dp[i-1][u]) % MOD # Sum up all ways to reach \'end\' city using up to k edges return sum(dp[i][end] for i in range(1, k+1)) % MOD"},{"question":"In a faraway land, there are n distinct items, each having a certain weight. A group of adventurers has a peculiar way of selecting items. They can select items only if the total weight of the selected items is exactly w. Write a program to find out if there is at least one way to select items from the list such that their total weight is exactly w. The first line of input contains two integers n and w (1 le n le 100, 1 le w le 10^9) — the number of items and the desired total weight. The second line contains n integers weights[i] (1 le weights[i] le 10^9), which are the weights of the items. Print \\"YES\\" if there is at least one subset of items whose weights sum up to w. Otherwise, print \\"NO\\". Keep in mind: - Items in the subset do not need to be contiguous. - Each item can be used at most once. - There can be multiple solutions, but you only need to find one. For example, if weights = [1, 2, 3, 4, 5] and w = 9, one possible subset is [4, 5] because 4 + 5 = 9. Another example, if weights = [2, 4, 6, 8] and w = 15, it\'s impossible to find such a subset, so the output should be \\"NO\\".","solution":"def can_select_items(n, w, weights): Determines if there is at least one subset of items whose weights sum up to w. :param n: Number of distinct items :param w: Desired total weight :param weights: List of weights of items :return: \\"YES\\" if there\'s at least one subset summing to w, \\"NO\\" otherwise. # Initialize a DP array to keep track of possible sums with given weights possible_sums = [False] * (w + 1) possible_sums[0] = True # Base case: zero sum is always possible with an empty subset for weight in weights: # Update the possible_sums array from end to start to avoid using the same weight multiple times for current_sum in range(w, weight - 1, -1): if possible_sums[current_sum - weight]: possible_sums[current_sum] = True return \\"YES\\" if possible_sums[w] else \\"NO\\""},{"question":"Alex and Taylor are playing a strategy game on a grid consisting of n rows and m columns. Each cell in the grid is either passable or contains an obstacle. The game starts with them standing on the top-left cell of the grid (1, 1), and their goal is to reach the bottom-right cell (n, m). However, moving through the grid has some constraints: - They can only move right or down, one cell at a time. - They cannot move into a cell that contains an obstacle. Given the grid description, determine the number of unique paths Alex and Taylor can take from (1, 1) to (n, m) while avoiding obstacles. If no such path exists, return 0. The input contains: - The first line contains two integers n and m (1 ≤ n, m ≤ 50), where n is the number of rows and m is the number of columns. - The next n lines contain m characters each, representing the grid. Each character is either \'.\' indicating a passable cell or \'#\' indicating an obstacle. Output a single integer — the number of unique paths from the top-left cell to the bottom-right cell, while avoiding obstacles. Example: Input: ``` 3 3 . . . . # . . . . ``` Output: ``` 2 ``` Explanation: In the given example, the two possible paths are: 1. Right → Right → Down → Down 2. Down → Down → Right → Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right of the grid while avoiding obstacles. n, m = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize a dp table with 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Caleb is learning about different bases in his math class, and his teacher has given him an interesting problem. Caleb is given a positive integer number `n` in decimal (base 10) and asked to convert it to base `k` (where 2 ≤ k ≤ 36). However, Caleb finds the problem challenging because numbers in bases greater than 10 use letters to represent values 10 and above. Can you help Caleb by writing a program to convert the given number `n` to base `k`? Input consists of two positive integers `n` (1 ≤ n ≤ 10^9) and `k` (2 ≤ k ≤ 36). Each number is given on a separate line. Print the number `n` in base `k` as a single string. Use the digits 0-9 for values 0-9 and the letters `a-z` for values 10-35, respectively. **Example Input:** ``` 255 16 ``` **Example Output:** ``` ff ```","solution":"def convert_to_base(n, k): Convert a decimal (base 10) number n to a given base k (2 <= k <= 36). if n == 0: return \\"0\\" digits = \\"0123456789abcdefghijklmnopqrstuvwxyz\\" result = [] while n > 0: remainder = n % k result.append(digits[remainder]) n //= k return \'\'.join(result[::-1])"},{"question":"Peter is an avid collector of rare coins, and he likes to display them in unique patterns. Recently, he came up with a new way to arrange his coins on a flat surface. He wants to form a triangular pattern in which each row contains one more coin than the previous row. Peter has `n` coins, and he wants to use as many of them as possible to form the largest complete triangle. Your task is to help Peter determine the number of rows in the largest triangle that can be formed with `n` coins and how many coins would be left unarranged after constructing that triangle. The first line of input contains a single integer `n` (1 ≤ n ≤ 10^9) — the number of coins Peter has. Print two integers: the number of rows `r` in the largest triangle that can be formed and the number of coins left unarranged after forming that triangle. In the first example, if Peter has 8 coins, he can form a triangle with 3 rows (1 coin in the first row, 2 in the second, and 3 in the third), using 1 + 2 + 3 = 6 coins, leaving 8 - 6 = 2 coins unarranged. In the second example, if Peter has 10 coins, he can form a triangle with 4 rows (1 coin in the first row, 2 in the second, 3 in the third, and 4 in the fourth), using 1 + 2 + 3 + 4 = 10 coins, leaving 10 - 10 = 0 coins unarranged.","solution":"def largest_triangle(n): This function returns the number of rows in the largest complete triangle that can be formed with n coins and the number of leftover coins. rows = 0 while n >= (rows + 1): rows += 1 n -= rows return rows, n"},{"question":"Given an undirected graph with n nodes and m edges, you need to find the length of the shortest cycle present in the graph. If there are no cycles, return -1. A cycle is a path of edges and vertices wherein a vertex is reachable from itself. The length of a cycle is the number of edges it contains. The first line of the input contains two integers n and m (2 leq n leq 10^3, 1 leq m leq 10^4) — the number of vertices and the number of edges in the graph. Each of the next m lines contains two integers, u_i and v_i (1 leq u_i, v_i leq n, u_i ne v_i), describing an edge between nodes u_i and v_i. Output the length of the shortest cycle in the given graph, or -1 if the graph has no cycles. **Example:** Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` 3 ``` In this example, the shortest cycle is 2 rightarrow 3 rightarrow 4 rightarrow 2, which has length 3.","solution":"from collections import deque, defaultdict def shortest_cycle(n, m, edges): Returns the length of the shortest cycle present in the graph. If there are no cycles, returns -1. graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): dist = {start: 0} parent = {start: None} queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in dist: parent[neighbor] = node dist[neighbor] = dist[node] + 1 queue.append(neighbor) elif neighbor != parent[node]: return dist[node] + dist[neighbor] + 1 return float(\'inf\') shortest = float(\'inf\') for node in range(1, n+1): shortest = min(shortest, bfs(node)) return shortest if shortest != float(\'inf\') else -1"},{"question":"You are given a sequence of integers and a series of update operations. Each update operation consists of replacing an element in the sequence with another integer. Additionally, there are query operations, where you are required to find the sum of the elements in a given sub-sequence defined by a range. The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) – the number of elements in the initial sequence and the number of operations (updates and queries). The second line contains n space-separated integers a_1, a_2, ..., a_n – the initial sequence. The next q lines contain one of two types of operations: - \\"1 x y\\" (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9) – update the x-th element of the sequence to y. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) – query for the sum of the elements from the l-th to the r-th position (inclusive). For each query operation, output the sum of the specified sub-sequence. Example: Input: ``` 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 1 3 -5 2 1 5 ``` Output: ``` 6 14 24 ``` Explanation: Initial sequence: ``` 1, 2, 3, 4, 5 ``` Query sum of elements from 1 to 3: ``` 1 + 2 + 3 = 6 ``` Update the 2nd element to 10: ``` 1, 10, 3, 4, 5 ``` Query sum of elements from 1 to 3: ``` 1 + 10 + 3 = 14 ``` Query sum of elements from 2 to 5: ``` 10 + 3 + 4 + 5 = 22 ``` Update the 3rd element to -5: ``` 1, 10, -5, 4, 5 ``` Query sum of elements from 1 to 5: ``` 1 + 10 - 5 + 4 + 5 = 15 ```","solution":"def process_operations(n, q, sequence, operations): for op in operations: if op[0] == 1: x, y = op[1], op[2] sequence[x - 1] = y elif op[0] == 2: l, r = op[1], op[2] print(sum(sequence[l-1:r])) # Example Usage n = 5 q = 5 sequence = [1, 2, 3, 4, 5] operations = [ (2, 1, 3), (1, 2, 10), (2, 1, 3), (2, 2, 5), (1, 3, -5), (2, 1, 5) ] process_operations(n, q, sequence, operations)"},{"question":"You are given an array of integers of length n. Your task is to determine whether it is possible to rearrange the elements of the array such that for every pair of consecutive elements, their absolute difference is at most 1. If it is possible, provide one possible rearrangement; otherwise, state that it cannot be done. # Input - The first line contains a single integer n (1 leq n leq 10^5), the length of the array. - The second line contains n space-separated integers a_1, a_2, dots, a_n (1 leq a_i leq 10^5), the elements of the array. # Output If it is possible to rearrange the elements as required, print \\"YES\\" on the first line, followed by the rearranged array on the second line. If it is not possible, print \\"NO\\". # Examples **Example 1:** **Input:** 5 3 1 2 2 1 **Output:** YES 1 1 2 2 3 **Example 2:** **Input:** 3 5 8 6 **Output:** NO **Explanation:** In the first example, the array can be rearranged as [1, 1, 2, 2, 3], where every pair of consecutive elements has an absolute difference of at most 1. In the second example, it is impossible to rearrange the array such that every pair of consecutive elements has an absolute difference of at most 1.","solution":"def rearrange_array(n, arr): Determines and rearranges the array such that for every pair of consecutive elements, their absolute difference is at most 1. If not possible, returns \\"NO\\". arr.sort() for i in range(1, n): if abs(arr[i] - arr[i-1]) > 1: return \\"NO\\" return f\\"YESn{\' \'.join(map(str, arr))}\\""},{"question":"Polycarp has a new game where an array of integers is given. Each element of the array represents the maximum number of steps you can advance from that position. The goal is to reach the final position of the array or determine if it is impossible. Help Polycarp determine the minimum number of jumps needed to reach the last position, starting from the first position. If it is not possible to reach the end, return -1. The first line of input contains an integer, `n` (1 le n le 10^5), representing the number of elements in the array. The second line contains `n` space-separated integers, each representing the number of steps that can be taken from that position (0 le a_i le 10^4). Output a single integer, the minimum number of jumps required to reach the last position or -1 if it is not possible. Example: Input: ``` 5 2 3 1 1 4 ``` Output: ``` 2 ``` Explanation: - From the first position (2), you can jump to the second position (3) or the third position (1). - From the second position (3), you can reach the fourth position (1) and then jump to the fifth position (4). Another example: Input: ``` 6 1 0 0 0 0 1 ``` Output: ``` -1 ``` Explanation: - From the first position (1), you can jump to the second position (0), but cannot progress further, making it impossible to reach the final position. Your task is to implement a function `min_jumps_to_end(n: int, steps: List[int]) -> int` that returns the minimum number of jumps required to reach the end of the array or -1 if it is not possible to reach the end.","solution":"def min_jumps_to_end(n, steps): if n <= 1: return 0 # If the first element is 0, it\'s not possible to move anywhere if steps[0] == 0: return -1 max_reach = steps[0] jumps = 1 steps_possible = steps[0] for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + steps[i]) steps_possible -= 1 if steps_possible == 0: jumps += 1 if i >= max_reach: return -1 steps_possible = max_reach - i return -1"},{"question":"John is trying to help his friend Maria arrange her bookshelf. The bookshelf has a single row with a length of L units, and Maria has a set of books. Each book has a width of 1 unit and a positive integer height. John needs to place the books on the shelf such that the total height difference between adjacent books is minimized. To minimize the height difference, John can place the books in any order. Help John determine the minimum possible sum of absolute height differences between each pair of adjacent books on the shelf. # Input - The first line contains a single integer n (2 le n le 1000) — the number of books. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 1000) — the heights of the books. # Output - Print a single integer — the minimum possible sum of absolute height differences between each pair of adjacent books. # Example Input: ``` 5 2 5 3 8 4 ``` Output: ``` 6 ``` # Note In the first sample, an optimal arrangement of the books could be: 2, 3, 4, 5, 8. The height differences between adjacent books are |3-2|, |4-3|, |5-4|, and |8-5|, which sum up to 1+1+1+3=6. This is the minimum sum of absolute differences achievable.","solution":"def min_height_difference(n, heights): Returns the minimum possible sum of absolute height differences between each pair of adjacent books on the shelf. # Sort heights to minimize the difference between adjacent books sorted_heights = sorted(heights) # Calculate the sum of absolute differences between adjacent books min_difference = sum(abs(sorted_heights[i] - sorted_heights[i-1]) for i in range(1, n)) return min_difference # Example usage: # n = 5 # heights = [2, 5, 3, 8, 4] # print(min_height_difference(n, heights)) # Output: 6"},{"question":"In a tech-savvy town, there is a community event where residents are encouraged to collaborate in maintaining a series of garden plots. Each plot is managed by a resident and contains a certain number of flowers. The town has `n` plots arranged in a line, each identified by an integer from 1 to n. Due to varying plot sizes, some plots can donate flowers to adjacent plots if they have a surplus. A plot with more than `k` flowers is considered to have a surplus, and it can donate the excess flowers to its neighboring plots. The gardens need to be balanced such that no plot ends up with more than `k` flowers unless it\'s not possible to balance them further by donations. Each plot can donate flowers to its immediate neighbors until no further donations are possible, ensuring that the number of flowers in any plot will not exceed `k`, unless it\'s impossible to achieve such a balance by only adjacent donations. Given the initial number of flowers in each plot, determine if it\'s possible to balance the flowers according to the rules described. The first line contains two integers `n` (1 ≤ n ≤ 1000) and `k` (1 ≤ k ≤ 10000) — the number of garden plots and the maximum permissible number of flowers in each plot. The second line contains `n` space-separated integers `f1, f2, ..., fn` (0 ≤ fi ≤ 10000) — the initial number of flowers in each plot. In the first line print \\"YES\\" (without the quotes) if it\'s possible to balance the flowers among the plots such that no plot has more than `k` flowers unless it\'s impossible; otherwise print \\"NO\\". Examples: Input: 5 10 12 9 8 5 7 Output: YES Input: 4 6 8 3 5 9 Output: NO Explanation: - In the first example, the following distribution of flowers achieves a balance: Initially: [12, 9, 8, 5, 7] Distribution: [10, 10, 8, 6, 7] - In the second example, it\'s not possible to distribute the flowers so that no plot exceeds 6 flowers.","solution":"def can_balance_flowers(n, k, flowers): Determines if it\'s possible to balance the flowers among the plots such that no plot has more than k flowers unless it\'s impossible. Parameters: n (int): The number of garden plots. k (int): The maximum permissible number of flowers in each plot. flowers (list of int): The initial number of flowers in each plot. Returns: str: \\"YES\\" if it\'s possible to balance the flowers, otherwise \\"NO\\". for i in range(n-1): if flowers[i] > k: surplus = flowers[i] - k flowers[i] -= surplus flowers[i+1] += surplus if all(flower <= k for flower in flowers): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an integer array, `queries`, where each element represents a query to calculate the k-th smallest element of an array `arr`. Your task is to handle each query efficiently. Consider the following operations: 1. Rearrange the elements in the array `arr` as needed. 2. For each query, determine the k-th smallest element in the array after rearrangement. **Input:** The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 10^5) — the number of elements in the array `arr` and the number of queries. The second line contains `n` integers `arr_i` (1 ≤ arr_i ≤ 10^9) — the elements of the array. The following `q` lines each contain an integer `k` (1 ≤ k ≤ n) — the k-th smallest element to find. **Output:** For each query, output the k-th smallest element in the array `arr` after rearrangement. **Example:** **Input:** ``` 5 3 3 1 4 1 5 1 3 2 ``` **Output:** ``` 1 3 1 ``` Note that sorting the array initially and then answering each query using the sorted array can be done in O(n log n + q) time complexity, which is efficient enough for the given constraints.","solution":"def find_kth_smallest(n, q, arr, queries): Returns a list of k-th smallest elements for each query. Args: n : int : the number of elements in the array arr q : int : the number of queries arr : List[int] : the elements of the array queries : List[int] : list containing k values for queries Returns: List[int] : the k-th smallest elements in the array for each query # Sort the array initially arr.sort() # Result list to hold answers to each query result = [] # Handle each query for k in queries: # Append the k-th smallest element result.append(arr[k - 1]) return result"},{"question":"A museum is planning a new interactive exhibit involving a floor grid of n times m tiles. Each tile has an associated cost representing the energy required to step on it. Visitors start at the top-left corner of the grid and must reach the bottom-right corner. They can move either right or down at each step. The goal is to ensure that the exhibit is accessible to all visitors by minimizing the total energy cost from the start to the end of the path. Given the costs for each tile in the grid, determine the minimum total energy cost required for a visitor to reach the bottom-right corner from the top-left corner. Input: - First line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. - Each of the next n lines contains m integers representing the energy costs for each tile in the grid. Output: Print the minimum total energy cost required to travel from the top-left corner to the bottom-right corner of the grid. Example: Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` Explanation: The path with the minimum energy cost is: ``` 1 → 3 → 1 ↓ ↓ 1 → 5 1 ↓ ↓ 4 → 2 1 ``` The total energy cost is 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_energy_cost(n, m, grid): Returns the minimum energy cost to travel from the top-left to bottom-right of the grid. :param n: int, number of rows :param m: int, number of columns :param grid: list of list of ints, representing the energy costs of each tile. :return: int, minimum energy cost # Create a memoization table for storing the minimum costs at each tile dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"John loves playing with numbers and recently he has come up with a new game. In this game, he writes down a sequence of integers and then modifies this sequence using a series of operations. He can perform the following operation any number of times: choose any two indices (i) and (j) (1 ≤ (i), (j) ≤ (n)) such that (i neq j), and replace the element at index (i) with the sum of the elements at both indices. John wants you to determine the smallest possible value that can appear in the sequence after performing the operations any number of times. Given an array of (n) integers (a_1, a_2, ldots, a_n) (1 ≤ (n) ≤ 100,000 and (|a_i| ≤ 10^9)), output the smallest possible value that can appear in the sequence. Input: - The first line contains an integer (n) — the number of elements in the sequence. - The second line contains (n) integers (a_1, a_2, ldots, a_n) — the elements of the sequence. Output: - Print the smallest possible value that can appear in the sequence after performing the operations any number of times. Example: Input: 5 6 9 15 2 3 Output: 1 Explanation: You can repeatedly replace any element with the sum of two distinct elements. In this case, you can form combinations that reduce the elements to their greatest common divisor (GCD). Thus, the smallest possible value in the sequence is the GCD of the initial sequence, which is 1.","solution":"import math from functools import reduce def smallest_possible_value(arr): Returns the smallest possible value that can appear in the sequence after performing the operations any number of times. This value is the greatest common divisor (GCD) of all numbers in the sequence. return reduce(math.gcd, arr)"},{"question":"You are given an ancient manuscript with a series of encrypted strings. Each string is an anagram of a certain well-known English word. Due to the importance of the manuscript, it\'s crucial to decrypt the strings and determine the original words quickly. Luckily, you have a dictionary of all the possible words that these strings can decrypt to. Given a list of encrypted strings and a dictionary of possible words, find all matches between them. An encrypted string can match a word from the dictionary if the letters of the string can be rearranged to form that word. The first line contains two integers, n (1 ≤ n ≤ 10^4) - the number of encrypted strings, and m (1 ≤ m ≤ 10^4) - the number of words in the dictionary. Each of the next n lines contains an encrypted string consisting of lowercase English letters. Each of the following m lines contains a dictionary word consisting of lowercase English letters. Output the original words corresponding to each encrypted string in order. If an encrypted string does not correspond to any word in the dictionary, output \\"NONE\\" for that string. # Input * 1 ≤ n ≤ 10^4 (number of encrypted strings) * 1 ≤ m ≤ 10^4 (number of words in the dictionary) * Each encrypted string and each dictionary word is composed of lowercase letters only (1 ≤ length of each string/word ≤ 100). # Output * n lines, each containing either the original word from the dictionary that matches the encrypted string or \\"NONE\\" if no match is found. # Example Input ``` 3 4 act fsa rta cat dog art rats ``` Output ``` cat NONE art ```","solution":"def decipher_strings(n, m, encrypted_strings, dictionary_words): Decipher a list of encrypted strings using a given dictionary. Args: n (int): Number of encrypted strings. m (int): Number of words in the dictionary. encrypted_strings (list of str): List of encrypted strings. dictionary_words (list of str): List of possible words from the dictionary. Returns: list of str: List of deciphered words matching the encrypted strings or \\"NONE\\" if no match found. from collections import defaultdict # Create a map of sorted words to the actual dictionary words sorted_dict = defaultdict(list) for word in dictionary_words: sorted_word = \'\'.join(sorted(word)) sorted_dict[sorted_word].append(word) # Decipher the encrypted strings results = [] for encrypted in encrypted_strings: sorted_encrypted = \'\'.join(sorted(encrypted)) if sorted_encrypted in sorted_dict: results.append(sorted_dict[sorted_encrypted][0]) # Take the first match else: results.append(\\"NONE\\") return results"},{"question":"You have a series of \'n\' pearls, each with a certain radius. Mr. Schmuck, a jeweler, needs to place these pearls in a row on a display, but he wants them to be oriented in such a way that the total number of contact points between adjacent pearls is minimized. Each pair of adjacent pearls has one contact point if their radii are equal; otherwise, they do not touch. Given the radii of the pearls, determine the minimum number of contact points that can be achieved by rearranging the pearls. The first line contains an integer n (1 ≤ n ≤ 100) — the number of pearls. The second line contains n space-separated integers representing the radii of the pearls. Output the minimum number of contact points that can be achieved. Examples: Input: 5 2 1 2 1 2 Output: 4 Input: 4 1 2 3 1 Output: 0 Explanation: In the first example, despite rearrangement, some contacts are inevitable. In the optimal arrangement, the contacts occur as follows: (2 1 2 1 2) which results in 4 contact points as every adjacent pair of pearls of radius 2 touch each other. In the second example, rearranging the pearls to (1 2 3 1) results in zero contact points since no two adjacent pearls have the same radius.","solution":"def min_contact_points(n, radii): Given a list of radii of pearls, return the minimum number of contact points that can be achieved by rearranging the pearls. Parameters: n (int): Number of pearls. radii (list): List of integers representing radii of the pearls. Returns: int: Minimum number of contact points based on the optimal arrangement. # If there are 1 or 0 pearls, there are no contact points. if n <= 1: return 0 # Create a dictionary to count the occurrences of each radius. from collections import Counter count_dict = Counter(radii) # The minimal number of contact points is the highest frequency of any radius minus 1. max_frequency = max(count_dict.values()) return max_frequency - 1 # Example usage: # n = 5 # radii = [2, 1, 2, 1, 2] # Output should be 4"},{"question":"The Fairy Queen of Byteland wants to distribute magic crystals among her subjects. Each subject must receive exactly one magic crystal. However, there are certain pairs of subjects who dislike each other, and the crystal distribution process must ensure that these pairs of subjects do not receive a crystal of the same type. There are k available types of magic crystals. Help the Fairy Queen determine whether it is possible to distribute crystals in such a way that no two subjects who dislike each other receive the same type of crystal. If possible, produce one such valid distribution. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of subjects and the number of dislike pairs, respectively. The next m lines contain two integers ai and bi (1 ≤ ai, bi ≤ n) — indicating that subject ai and subject bi dislike each other. The last line contains an integer k (1 ≤ k ≤ n) — the number of different types of magic crystals. Output \\"YES\\" if it is possible to distribute the crystals according to the rules. If the answer is \\"YES\\", then in the next line, output n integers where the i-th integer is the type of crystal given to the i-th subject (the crystal types are numbered from 1 to k). If it is not possible, output \\"NO\\". Example 1: Input: 5 4 1 2 2 3 3 4 4 5 3 Output: YES 1 2 3 1 2 Example 2: Input: 4 6 1 2 2 3 3 4 4 1 1 3 2 4 2 Output: NO","solution":"def can_distribute(n, m, dislikes, k): from collections import defaultdict, deque # Create adjacency list for given dislikes adj_list = defaultdict(list) for a, b in dislikes: adj_list[a].append(b) adj_list[b].append(a) # Result to store the crystal type for each subject result = [-1] * n # Function to try to color the graph using BFS def bfs(node): queue = deque([(node, 0)]) while queue: current, color = queue.popleft() if result[current] == -1: # if not yet colored result[current] = color else: if result[current] != color: return False continue for neighbor in adj_list[current + 1]: if result[neighbor - 1] == -1: queue.append((neighbor - 1, (color + 1) % k)) elif result[neighbor - 1] == color: return False return True # Try to color each component of the graph for i in range(n): if result[i] == -1: if not bfs(i): return \\"NO\\" # Adjusting crystal types to be 1-based instead of 0-based result = [x + 1 for x in result] return f\\"YESn{\' \'.join(map(str, result))}\\" # Example usage input_data1 = (5, 4, [(1, 2), (2, 3), (3, 4), (4, 5)], 3) input_data2 = (4, 6, [(1, 2), (2, 3), (3, 4), (4, 1), (1, 3), (2, 4)], 2) print(can_distribute(*input_data1)) # Expected Output: \\"YESn1 2 3 1 2\\" print(can_distribute(*input_data2)) # Expected Output: \\"NO\\""},{"question":"You are given a special string S consisting of only characters \'A\' and \'B\'. Your task is to modify this string such that no three consecutive characters are the same. In one move, you can change any character \'A\' to \'B\' or vice versa. You need to find the minimum number of moves required to achieve this. # Input - The first line contains an integer n (1 ≤ n ≤ 500), the length of the string S. - The second line contains the string S. # Output - Output a single integer denoting the minimum number of moves required. # Example Input: ``` 5 AABBA ``` Output: ``` 1 ``` Explanation: One possible way to change the string is: AABBA -> AABBA (No change needed). The minimum number of moves required is 1 (changing the third \'A\' to \'B\' resulting in \\"AABBA\\"). # Note - In the first example, the original string \\"AABBA\\" already satisfies the condition. By changing the third \'A\' to \'B\', we could obtain \\"AABBA\\" with only 1 move, avoiding any three consecutive characters being the same. - Multiple solutions may exist as long as the final string satisfies no three consecutive characters being the same.","solution":"def minimum_moves_to_avoid_consecutive_chars(n, S): count = 0 i = 0 while i < n - 2: if S[i] == S[i+1] == S[i+2]: # We need to change S[i+2] count += 1 # Skip the next index since we know we\'ve fixed the issue for the current triplet i += 2 else: i += 1 return count"},{"question":"Amara works as a network engineer and is responsible for monitoring data packet transfers on a large-scale network. Each data packet has a priority level determined by a number. When a transfer occurs, the priority of the data packets is recorded in a sequence. Amara needs to analyze the network\'s performance by calculating various statistics about the number of distinct priority levels observed within a specific range during several monitoring intervals. You\'re given a sequence of priority levels and several queries. For each query, you need to determine the number of distinct priority levels in the given range. The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of priority levels in the sequence and the number of queries. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the priority levels in the sequence. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the range for which Amara wants to know the number of distinct priority levels. Output q integers, the ith integer should be the number of distinct priority levels observed in the range [li, ri]. In the first sample, the sequence is [3, 1, 4, 1, 5, 9]. For the first query, the range is [1, 4] which includes the subarray [3, 1, 4, 1]. The number of distinct priority levels in this range is 3 (which are 3, 1, 4). For the second query, the range is [2, 5] which includes the subarray [1, 4, 1, 5]. The number of distinct priority levels in this range is 3 (which are 1, 4, 5). For the third query, the range [3, 6] includes the subarray [4, 1, 5, 9] and the number of distinct priority levels here is 4 (which are 4, 1, 5, 9). Sample Input: 6 3 3 1 4 1 5 9 1 4 2 5 3 6 Sample Output: 3 3 4","solution":"def distinct_priorities(n, q, priorities, queries): results = [] for li, ri in queries: distinct_priorities_in_range = len(set(priorities[li-1:ri])) results.append(distinct_priorities_in_range) return results"},{"question":"Given two strings containing only lowercase letters, your task is to determine whether one string can be transformed into the other by rearranging its characters and changing exactly one character. For example, the strings \\"friend\\" and \\"fiendx\\" can be transformed by rearranging the characters and changing \'r\' to \'x\'. The input format is as follows: - The first line contains an integer t (1 le t le 1000) — the number of test cases. - Each of the next 2t lines describe one test case. Each test case consists of two lines: - The first line contains a string a (1 le |a| le 1000) — the first string of the pair. - The second line contains a string b (1 le |b| le 1000) — the second string of the pair. For each test case, print \\"YES\\" if the transformation is possible and \\"NO\\" otherwise. # Example: Input: ``` 3 friend fiendx hello heklo charm mhzrk ``` Output: ``` YES YES NO ```","solution":"def can_transform(a, b): Determines if string a can be transformed into string b by rearranging characters and changing exactly one character. if len(a) != len(b): return \\"NO\\" diff_count = 0 char_count = {} for char in a: char_count[char] = char_count.get(char, 0) + 1 for char in b: if char in char_count and char_count[char] > 0: char_count[char] -= 1 else: diff_count += 1 # Diff_count should be exactly 1 for a single character transformation return \\"YES\\" if diff_count == 1 else \\"NO\\" def process_test_cases(t, test_cases): Process multiple test cases and return the results for each. results = [] for i in range(t): a, b = test_cases[2 * i], test_cases[2 * i + 1] results.append(can_transform(a, b)) return results"},{"question":"During a long journey, Maria enjoys playing with sequences of numbers. One of her favorite games is to take a list of numbers and re-arrange it to form different sequences. She has recently discovered an interesting property of sequences — the \\"magnitude\\". The magnitude of a sequence is defined as the sum of the absolute differences between adjacent elements in the sequence. Mathematically, if you have a sequence A = [a1, a2, ..., an], its magnitude is given by: [ text{Magnitude}(A) = sum_{i=1}^{n-1} |a_{i+1} - a_i| ] Maria wants to find the sequence of numbers that has the smallest magnitude out of all possible permutations. Can you help her figure out what the minimum possible magnitude is for a given list of numbers? The first line of the input contains an integer n (2 ≤ n ≤ 200,000) — the number of elements in the list. The second line contains n integers separated by spaces — the elements of the list. Each element can be an integer between -10^9 and 10^9. You need to output one integer — the minimum possible magnitude of a sequence that can be formed with the given list of numbers. Example input: 4 4 -1 2 1 Example output: 5 Explanation: One possible sequence arrangement is [-1, 1, 2, 4]. Magnitude([-1, 1, 2, 4]) = |1 + 1| + |2 - 1| + |4 - 2| = 2 + 1 + 2 = 5","solution":"def min_magnitude(arr): Finds the sequence with the minimum possible magnitude from the given list of numbers and returns the magnitude. The minimum possible magnitude is achieved by sorting the array and computing the sum of absolute differences of consecutive sorted elements. arr.sort() magnitude = 0 for i in range(1, len(arr)): magnitude += arr[i] - arr[i-1] return magnitude"},{"question":"Elena loves playing with strings in her free time. Recently, she came across an interesting problem involving palindromes and decided to solve it. A palindrome is a string that reads the same forward and backward. For example, \\"radar\\" and \\"level\\" are palindromes. Elena has a string s and she can remove some characters from it to make the string a palindrome. After removing the characters, she wants the remaining string to be the longest possible palindrome. Help Elena find the length of the longest palindromic subsequence in the given string. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the length of the string s. The second line contains the string s consisting of lowercase English letters. Print a single line containing the length of the longest palindromic subsequence in s. For example, for the input: ``` 7 agbdba ``` the output should be: ``` 5 ``` Explanation: The longest palindromic subsequence is \\"abdba\\".","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = 2 + dp[i+1][j-1] if cl > 2 else 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1]"},{"question":"As a common operation in computing, plan validation is critical, especially in automation and scheduling systems. In this problem, you need to validate a batch of plans against certain conditions. Each plan consists of exactly one type of work, and each work is identifiable by an integer ID, ranging from 1 to W. For example, if W is 3, there can be three types of work, namely, 1, 2, and 3. Each plan will contain a list of work IDs in any order, without repetition. A given plan is considered **valid** if and only if the following conditions are satisfied: 1. All work IDs in the plan must fall within the range of 1 to W. 2. If a work ID `w` is present in the plan, then all work IDs from 1 to `w` must also be present in the plan. You are given multiple plans to validate, and your task is to determine how many of them are valid according to the above conditions. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of plans. - The second line contains an integer `W` (1 ≤ W ≤ 100), the number of distinct work types. - Each of the next `t` lines contains a list of space-separated integers, the work IDs in the respective plan. Each plan will have between 1 and W work IDs. # Output For each plan, output \\"YES\\" if the plan is valid and \\"NO\\" if it is not. # Example Input ``` 3 5 1 2 1 3 4 3 1 2 ``` Output ``` YES NO YES ``` Explanation - The first plan is valid, as work IDs 1 and 2 are present and they cover the set {1, 2}. - The second plan is invalid, as work ID 3 is present, but work ID 2 is missing. - The third plan is valid, as all work IDs from 1 to 4 are present.","solution":"def validate_plans(t, W, plans): results = [] for plan in plans: work_ids = set(plan) valid = True for w in range(1, max(work_ids) + 1): if w not in work_ids: valid = False break if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a mystical world, there are m wizards and n wyverns. The wyverns are known to fly in particular patterns and only land at specific times. Each wizard, having certain magical powers, can only tame a wyvern if they catch it exactly when it lands. The m wizards have been arranged in a line, and so have the n wyverns such that wizard i is initially placed in front of wyvern i. However, each wizard can only tame a wyvern if the landing time fits within their taming schedule. Each wyvern has a landing time pi and each wizard has a taming time window [ai, bi], where ai is the earliest and bi is the latest time the wizard can perform the taming. Given these constraints, determine the maximum number of wyverns that can be tamed. The input consists of: - An integer m (1 ≤ m ≤ 2·10^5), representing the number of wizards and also the number of wyverns. - Next line contains m integers: p1, p2, ..., pm where pi (1 ≤ pi ≤ 10^9) represents the landing time of the ith wyvern. - Next m lines each contain two integers ai and bi (1 ≤ ai ≤ bi ≤ 10^9), representing the taming time window of the ith wizard. The output should be a single integer representing the maximum number of wyverns that can be tamed. # Example Input: ``` 4 1 4 5 7 1 2 3 6 6 8 7 9 ``` Output: ``` 3 ``` # Explanation: - Wizard 1 can tame wyvern 1 as it lands at time 1 which is within the time window [1, 2]. - Wizard 2 can tame wyvern 2 as it lands at time 4 which is within the time window [3, 6]. - Wizard 3 can tame wyvern 3 as it lands at time 6 which is within the time window [6, 8]. - Wizard 4 can tame wyvern 4 as it lands at time 7 which is within the time window [7, 9]. - Thus, a total of 3 wyverns can be tamed.","solution":"def max_wyverns_tamed(m, landing_times, taming_windows): count = 0 for i in range(m): if taming_windows[i][0] <= landing_times[i] <= taming_windows[i][1]: count += 1 return count"},{"question":"Due to an unexpected event, the data storage system in a company\'s database has been corrupted. Each individual piece of data was originally a string of lowercase English letters. Now, corrupted strings have been retrieved, but each string has been scrambled such that each character in the string now appears in a random order. Your task is to identify pairs of corrupted strings that were originally the same string before scrambling. Write a function to determine the number of pairs of strings that are anagrams of each other. **Input** - The first line contains an integer n (1 leq n leq 200000), the number of corrupted strings. - The next n lines each contain a scrambled string consisting of lowercase English letters. The sum of the lengths of all strings will not exceed 10^6. **Output** - Output a single integer - the number of pairs of anagrams among the provided strings. **Example** **Input:** ``` 5 listen silent enlist google gogole ``` **Output:** ``` 4 ``` **Explanation:** - \\"listen\\", \\"silent\\", and \\"enlist\\" are anagrams of each other, forming three pairs: (listen, silent), (listen, enlist), (silent, enlist). - \\"google\\" and \\"gogole\\" form one additional pair. - Thus, the total number of pairs is 4.","solution":"def count_anagram_pairs(n, strings): from collections import defaultdict # Create a dictionary to store the frequency of sorted strings anagram_map = defaultdict(int) # Iterate through each string for s in strings: # Sort the string to get its anagram signature signature = \'\'.join(sorted(s)) # Increment the count of this signature in the map anagram_map[signature] += 1 # Calculate the number of pairs for each signature total_pairs = 0 for count in anagram_map.values(): if count > 1: # Number of ways to choose 2 out of count is count * (count - 1) / 2 total_pairs += (count * (count - 1)) // 2 return total_pairs"},{"question":"Given an array of integers and an integer target, determine the number of subarrays that sum up to the target. A subarray is a contiguous part of an array. For example, if the input is [1, 1, 1] and target is 2, then the output should be 2 because there are two subarrays ([1, 1] and [1, 1]) that sum up to 2. Input: The first line contains an integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (|a_i| leq 10^4). The third line contains an integer target (|target| leq 10^9). Output: Print a single integer — the number of subarrays whose sum equals target. Example 1: Input: 3 1 1 1 2 Output: 2 Example 2: Input: 4 1 -1 1 -1 0 Output: 4","solution":"def count_subarrays_with_sum(nums, target): count = 0 sum_counts = {0: 1} current_sum = 0 for num in nums: current_sum += num if current_sum - target in sum_counts: count += sum_counts[current_sum - target] if current_sum in sum_counts: sum_counts[current_sum] += 1 else: sum_counts[current_sum] = 1 return count"},{"question":"You are given a list of words and an integer K. Your task is to split the list into as many groups as possible where each group contains exactly K words. If there are any remaining words that cannot form a complete group, they should be discarded. Each word consists only of lowercase English letters, and the order of words in the groups should follow the order of words in the input list. Write a program to determine how to split the list of words. The first line of the input contains two integers N (1 ≤ N ≤ 1000) and K (1 ≤ K ≤ 100). The second line contains N words consisting of only lowercase English letters, separated by spaces. Output the groups of words, each group in a new line. If there are remaining words that cannot form a complete group, they should not be printed. # Sample Input 9 3 apple orange banana grape mango cherry peach lemon lime # Sample Output apple orange banana grape mango cherry peach lemon lime","solution":"def split_words_into_groups(words, k): Splits the list of words into groups of size k. Discards any remaining words that cannot form a complete group. :param words: List of words :param k: Size of each group :return: List of groups of words n = len(words) result = [] for i in range(0, n, k): group = words[i:i+k] if len(group) == k: result.append(group) return result # Example usage: def main(input_str): input_lines = input_str.strip().split(\'n\') n, k = map(int, input_lines[0].split()) words = input_lines[1].split() groups = split_words_into_groups(words, k) for group in groups: print(\\" \\".join(group)) # Example input string based on provided sample input input_str = 9 3 apple orange banana grape mango cherry peach lemon lime main(input_str)"},{"question":"Felicity has a grid with n rows and m columns. Each cell in the grid is either walkable (represented by \'.\') or blocked (represented by \'#\'). Felicity can move from a walkable cell to any adjacent walkable cell. Two cells are adjacent if they share a side. Felicity starts at position (r1, c1) and wants to reach position (r2, c2). Your task is to determine whether Felicity can reach her destination while only stepping on walkable cells. A move is valid if it doesn\'t cause Felicity to step out of the grid boundaries or into a blocked cell. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains a string of m characters (\'.\' or \'#\'), representing a row of the grid. The next line contains two integers r1 and c1 — the starting position of Felicity (1 ≤ r1 ≤ n, 1 ≤ c1 ≤ m). The last line contains two integers r2 and c2 — the destination position (1 ≤ r2 ≤ n, 1 ≤ c2 ≤ m). The positions are 1-indexed. Print \\"YES\\" (without quotes) if Felicity can reach the destination, or \\"NO\\" (without quotes) otherwise. Example: Input: 5 5 ..... .#. .#. .#. ..... 1 1 5 5 Output: YES","solution":"def can_reach_destination(grid, n, m, start, end): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] r1, c1 = start r2, c2 = end r1 -= 1 c1 -= 1 r2 -= 1 c2 -= 1 queue = deque([(r1, c1)]) visited = set() visited.add((r1, c1)) while queue: x, y = queue.popleft() if (x, y) == (r2, c2): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" # Function for running the entire solution def felicity_reach_destination(n, m, grid, r1, c1, r2, c2): return can_reach_destination(grid, n, m, (r1, c1), (r2, c2))"},{"question":"A team of software engineers is planning a city-wide treasure hunt game. They want to create a path for participants such that each participant can follow clues from one checkpoint to another. The city is modeled as an undirected graph with checkpoints as nodes and streets as edges. However, the team faces two constraints: 1. The path must form a simple cycle. 2. The length of the cycle (the number of edges) must be exactly k. Given the number of checkpoints n and a list of streets connecting these checkpoints, determine if it\'s possible to form such a cycle of length k. If it is possible, output any one such cycle. If it is not possible, output \\"No cycle\\". The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of checkpoints and the number of streets, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), signifying a street between checkpoints u and v. Print \\"No cycle\\" if it is not possible to form such a cycle. Otherwise, print k integers representing the checkpoints in the order they appear in the cycle. If there are multiple solutions, print any one of them. Example: Input: 5 6 1 2 2 3 3 4 4 5 5 1 1 3 Output: 1 2 3 1 Explanation: There is a cycle of length 3 involving checkpoints 1, 2, and 3.","solution":"def find_cycle_of_length_k(n, m, edges, k): from collections import defaultdict, deque graph = defaultdict(list) for edge in edges: u, v = edge graph[u].append(v) graph[v].append(u) def dfs(v, parent, length, path): if length == k: if path[0] in graph[v]: return path + [path[0]] else: return None for neighbor in graph[v]: if neighbor != parent and neighbor not in path: result = dfs(neighbor, v, length + 1, path + [neighbor]) if result: return result return None for start in range(1, n + 1): # try starting DFS from each node cycle = dfs(start, -1, 1, [start]) if cycle: return cycle return \\"No cycle\\""},{"question":"Nathan is planning his vacation and he wants to visit as many different cities as possible. There are n cities and m bidirectional roads connecting them. Nathan can start his journey from any city and travel along the roads. However, the roads are congested, and the travel between any two cities i and j takes exactly dij units of fuel, which is positive for all roads. Nathan has a capacitated vehicle, which can travel up to a certain amount of fuel k before needing to refuel, and he has no means to refuel along the way. Nathan wants to know the maximum number of different cities he can visit without exceeding his fuel limit k. The first line of the input contains three integers n, m and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 109) - the number of cities, the number of roads, and the maximum fuel capacity, respectively. The next m lines each contain three integers u, v, and dij (1 ≤ dij ≤ 109), representing a road between cities u and v with fuel consumption dij. Cities are numbered from 1 to n. Output a single integer - the maximum number of different cities Nathan can visit. Example: Input: 4 4 5 1 2 2 2 3 3 3 4 2 4 1 4 Output: 4 (Note: The problem ensures that each pair of cities is connected directly or indirectly through the roads provided.)","solution":"def max_cities(n, m, k, roads): from collections import defaultdict import heapq # Create adjacency list for the graph graph = defaultdict(list) for u, v, dij in roads: graph[u].append((v, dij)) graph[v].append((u, dij)) def dijkstra(start): queue = [(0, start)] min_distances = {i: float(\'inf\') for i in range(1, n + 1)} min_distances[start] = 0 while queue: current_distance, current_city = heapq.heappop(queue) if current_distance > min_distances[current_city]: continue for neighbor, dist in graph[current_city]: distance = current_distance + dist if distance < min_distances[neighbor] and distance <= k: min_distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return min_distances max_cities_visited = 0 for city in range(1, n + 1): distances = dijkstra(city) reachable_cities = sum(1 for dist in distances.values() if dist <= k) max_cities_visited = max(max_cities_visited, reachable_cities) return max_cities_visited"},{"question":"You are given a rectangular grid of size n x m containing lowercase English letters. Your task is to find the longest palindromic subsequence that can be formed and write a program to compute its length. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same forward and backward. The input begins with two integers n and m (1 ≤ n, m ≤ 500), denoting the dimensions of the rectangular grid. The following n lines contain m lowercase English letters each, describing the content of the grid. Output one integer, which is the length of the longest palindromic subsequence that can be formed from the characters in the grid. Example input: ``` 3 4 abcd efgh ijkl ``` Example output: ``` 1 ``` The longest palindromic subsequence in this example is any single character, as there are no longer palindromic subsequences in the given grid. The answer is 1.","solution":"def longest_palindromic_subsequence(n, m, grid): from collections import Counter # Count occurrences of each character char_count = Counter() for row in grid: char_count.update(row) # Calculate the length of the longest palindromic subsequence length = 0 odd_count_found = False for count in char_count.values(): # Add the even part of count to length length += count // 2 * 2 # If an odd count is found, it can contribute one to the palindrome length if count % 2 == 1: odd_count_found = True # If an odd count of any character was found, it can be the center of the palindrome if odd_count_found: length += 1 return length"},{"question":"Implement the function `binary_alternating_substring_count(s)`. Given a string `s` consisting only of characters \'0\' and \'1\', this function should count the number of substrings that consist of alternating \'0\'s and \'1\'s. For example, the string \\"00110011\\" has the following alternating substrings: - \\"01\\" - \\"10\\" - \\"0011\\" - \\"01\\" - \\"10\\" - \\"1100\\" - \\"11\\" In this example, the function should output `6`, as there are 6 valid alternating substrings. # Function Signature ```python def binary_alternating_substring_count(s: str) -> int: ``` # Input - A single string `s` containing only characters \'0\' or \'1\'. The length of `s` will be between 1 and 10^5. # Output - An integer representing the number of alternating binary substrings. # Constraints - Time complexity should be O(n), where `n` is the length of the string `s`. # Example ```python # Example 1 s = \\"00110011\\" output: 6 # Example 2 s = \\"10101\\" output: 4 # Example 3 s = \\"0001\\" output: 1 ``` # Explanation - For the first example, \\"00110011\\" has 6 substrings that contain alternating \'0\'s and \'1\'s. - For the second example, \\"10101\\" has 4 substrings that contain alternating \'0\'s and \'1\'s: {\\"10\\", \\"01\\", \\"10\\", \\"01\\"}. - For the third example, \\"0001\\" has only 1 substring that contain alternating \'0\'s and \'1\'s: {\\"01\\"}. Ensure that your solution efficiently handles input strings up to the maximum length constraint.","solution":"def binary_alternating_substring_count(s: str) -> int: Count the number of substrings in the input string that consist of only alternating \'0\'s and \'1\'s. n = len(s) count = 0 prev_length = 0 current_length = 1 for i in range(1, n): if s[i] == s[i - 1]: current_length += 1 else: prev_length = current_length current_length = 1 if prev_length >= current_length: count += 1 return count"},{"question":"Gerald is a fan of programming contests. From time to time he likes to solve amusing problems. He invented the following game: given a list of integers, find the length of the longest strictly increasing subsequence that does not exceed a given length `k`. A strictly increasing subsequence is a sequence where each element is strictly greater than the previous one. Gerald has decided to test your programming skills with this problem. Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 2000, 1 ≤ k ≤ n) — the number of integers in the list and the maximum length of the subsequence. The next line contains `n` integers separated by spaces, representing the list of integers. Each value in the list is an integer and does not exceed `10^9` in absolute value. Output Print the length of the longest strictly increasing subsequence that does not exceed `k`. If no such subsequence exists, print 0. Sample Input 1 ``` 6 4 10 20 10 30 40 50 ``` Sample Output 1 ``` 4 ``` Sample Input 2 ``` 5 3 9 4 3 2 5 ``` Sample Output 2 ``` 2 ``` Explanation: - In the first example, the longest strictly increasing subsequence that does not exceed the length `k=4` is `[10, 20, 30, 40]`, hence the output is 4. - In the second example, the longest strictly increasing subsequence that does not exceed the length `k=3` is `[4, 5]`, hence the output is 2.","solution":"def length_of_lis_with_limit(nums, k): Finds the length of the longest strictly increasing subsequence that does not exceed length k. Args: nums: List of integers. k: Maximum length of subsequence. Returns: Length of the longest strictly increasing subsequence that does not exceed k. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) max_length = max(dp) return min(max_length, k)"},{"question":"You are given an array of integers of length n. Define the beauty of an index i as the absolute difference between the values of the maximum and minimum element in the subarray starting from index i and ending at index n. Formally, if we denote the subarray starting from index i and ending at index n as A[i dots n], then beauty(i) = max(A[i dots n]) - min(A[i dots n]). You need to find the beauty for all indices from 1 to n. Write a function that receives an array of integers and returns an array where the i^{th} element is the beauty of the i^{th} index. # Input - The first line contains a single integer n (1 le n le 2 cdot 10^5) — the length of the array. - The second line contains n integers A_1, A_2, ldots, A_n (-10^9 le A_i le 10^9) — the elements of the array. # Output - Output a single line containing n integers, where the i^{th} integer is the beauty of the i^{th} index. # Example Input ``` 5 1 3 -1 5 4 ``` # Example Output ``` 6 6 6 1 0 ``` # Explanation - For index 1, subarray is [1, 3, -1, 5, 4], beauty(1) = max(5) - min(-1) = 6 - For index 2, subarray is [3, -1, 5, 4], beauty(2) = max(5) - min(-1) = 6 - For index 3, subarray is [-1, 5, 4], beauty(3) = max(5) - min(-1) = 6 - For index 4, subarray is [5, 4], beauty(4) = max(5) - min(4) = 1 - For index 5, subarray is [4], beauty(5) = max(4) - min(4) = 0","solution":"def calculate_beauty(arr): n = len(arr) if n == 1: return [0] beauties = [0] * n max_so_far = arr[-1] min_so_far = arr[-1] for i in range(n - 2, -1, -1): max_so_far = max(max_so_far, arr[i]) min_so_far = min(min_so_far, arr[i]) beauties[i] = max_so_far - min_so_far return beauties"},{"question":"You are organizing a coding competition for a group of participants who each have a unique skill level ranging from 1 to m. The competition has multiple rounds, and in each round, participants are ranked based on their skill levels in ascending order, with ties broken by their participant number. Participants are eliminated one by one based on their skill level. In the i-th round, the participant with the lowest skill level is eliminated. If multiple participants have the same lowest skill level, the one who has the smallest participant number is eliminated. The competition continues until only one participant remains. Write a program to find out the participant number of the winner. The first line contains two integer numbers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000), where n is the number of participants and m is the maximum skill level. The next line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ m), where pi is the skill level of the i-th participant (i is the 1-based index). Print the participant number of the winner. For example: Input: 5 10 3 1 4 1 5 Output: 5","solution":"def find_winner(n, m, skills): participants = list(enumerate(skills, start=1)) while len(participants) > 1: # Find the participant with the lowest skill level, prioritize by participant number on ties participant_to_eliminate = min(participants, key=lambda x: (x[1], x[0])) participants.remove(participant_to_eliminate) return participants[0][0]"},{"question":"Bob\'s favorite movie character is Sherlock Holmes and he loves to solve puzzles just like the famous detective. One day, while watching \\"Sherlock Holmes: A Game of Shadows\\", he decides to play a number game inspired by code-breaking themes from the movie. Bob has an array of integers, and he wants to analyze it in a specific way: For each integer in the array, he wants to calculate its \\"code-breaking power.\\" The code-breaking power of an integer is defined as the longest increasing subsequence (LIS) of the array that ends at that particular integer. Given the array of integers, help Bob compute the code-breaking power for each integer. The first line contains a single integer n (1 leq n leq 10^5), the length of the array. The second line contains n integers (1 leq a_i leq 10^9), the elements of the array. Print n integers, the code-breaking power for each integer in the array, in the same order as the integers are presented in the input. **Example:** Input: ``` 5 2 1 3 2 4 ``` Output: ``` 1 1 2 2 3 ``` **Explanation:** 1. The first element `2` has a LIS ending at it with length 1 (`2`). 2. The second element `1` has a LIS ending at it with length 1 (`1`). 3. The third element `3` has a LIS ending at it with length 2 (`2, 3`). 4. The fourth element `2` has a LIS ending at it with length 2 (`1, 2`). 5. The fifth element `4` has a LIS ending at it with length 3 (`2, 3, 4`).","solution":"def code_breaking_power(arr): Returns the code-breaking power for each integer in the array, defined as the length of the longest increasing subsequence ending at that integer. n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return lis"},{"question":"You are given a grid of size n x n filled with integers. Your task is to find the maximum sum of numbers in any square sub-grid of size k x k where (1 ≤ k ≤ n). The sub-grid must be extracted from the original grid, and you need to output the maximum sum obtained from all possible k x k sub-grids. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 30). Each of the following n lines contains n space-separated integers ranging from -100 to 100, representing the grid. The output should be a single integer — the maximum sum of any k x k sub-grid. **Example:** Input: ``` 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output: ``` 54 ``` Explanation: The maximum 2 x 2 sub-grid sum is obtained from the sub-grid: ``` 11 12 15 16 ``` Which sums to 54.","solution":"def max_subgrid_sum(grid, n, k): Returns the maximum sum of any k x k sub-grid within an n x n grid. Parameters: grid (list of list of int): The n x n grid filled with integers. n (int): The size of the grid (n x n). k (int): The size of the sub-grid (k x k). Returns: int: The maximum sum of any k x k sub-grid. max_sum = -float(\'inf\') # Loop through the grid to get every k x k sub-grid for i in range(n - k + 1): for j in range(n - k + 1): current_sum = 0 for x in range(k): for y in range(k): current_sum += grid[i + x][j + y] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an integer array arr of size n, return the minimum number of operations needed to make all elements of the array equal. You are allowed to perform only two types of operations: 1. Increment any element of the array by 1. 2. Decrement any element of the array by 1. Note: When incrementing or decrementing an element by 1, no additional operation is allowed in the same step (i.e., you can\'t increment and then immediately decrement or vice versa). Your task is to bring all array elements to the same value (it can be any value, not necessarily one of the original values). The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers arr[i] (1 ≤ arr[i] ≤ 10^9) — the elements of the array. Output a single integer, the minimum number of operations required to make all elements in the array equal. # Examples: **Input:** ``` 3 1 2 3 ``` **Output:** ``` 2 ``` **Explanation:** To make all elements equal to 2: - Increment the first element 1 by 1, making it 2. - Decrement the third element 3 by 1, making it 2. **Input:** ``` 5 3 3 3 3 3 ``` **Output:** ``` 0 ``` **Explanation:** All elements are already equal, no operation is needed. # Note: The aim is to minimize the total sum of operations by ideally moving all elements towards the median of the array since the median minimizes the sum of absolute deviations from all the elements in the array.","solution":"def min_operations_to_make_equal(arr): Returns the minimum number of operations needed to make all elements of the array equal. arr.sort() median = arr[len(arr) // 2] operations = sum(abs(x - median) for x in arr) return operations"},{"question":"Implement a function that sorts an array of integers in non-increasing order using the merge sort algorithm. Merge sort is a divide-and-conquer algorithm that works as follows: 1. Divide the unsorted array into n subarrays, each containing one element. 2. Repeatedly merge subarrays to produce new sorted subarrays until there is only one subarray remaining, which is the sorted array. Your function should have the following signature: ``` def merge_sort(arr: List[int]) -> List[int]: ``` You are required to divide the array into two halves, recursively sort each half, and then merge the two halves to form a sorted array in non-increasing order. # Input - **arr**: A list of integers (1 ≤ len(arr) ≤ 10^5) # Output - A list of integers sorted in non-increasing order. # Example ```python >>> merge_sort([3, 6, 2, 8, 4, 5]) [8, 6, 5, 4, 3, 2] >>> merge_sort([1, 1, 1, 1, 1]) [1, 1, 1, 1, 1] >>> merge_sort([9, -3, 5, 0, -1, 2]) [9, 5, 2, 0, -1, -3] ``` # Constraints - The function should run in O(n log n) time complexity. - The function should not use any inbuilt sorting functions.","solution":"from typing import List def merge_sort(arr: List[int]) -> List[int]: if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left: List[int], right: List[int]) -> List[int]: sorted_array = [] while left and right: if left[0] >= right[0]: sorted_array.append(left.pop(0)) else: sorted_array.append(right.pop(0)) sorted_array.extend(left) sorted_array.extend(right) return sorted_array"},{"question":"Alex loves puzzles and recently found a new interest in magic squares. A magic square is a matrix of numbers where the sum of every row, every column, and both main diagonals is the same. Alex wants to write a program that verifies if a given 3x3 matrix is a magic square. You\'re given a 3x3 matrix with integer elements. Your task is to determine whether it is a magic square. A 3x3 matrix is a magic square if the sums of every row, every column, and both main diagonals are equal. Input The input consists of three lines, each containing three space-separated integers, representing the elements of the 3x3 matrix. Output Print \\"YES\\" if the given matrix is a magic square. Otherwise, print \\"NO\\". Example Input 4 9 2 3 5 7 8 1 6 Output YES","solution":"def is_magic_square(matrix): Determines if the given 3x3 matrix is a magic square. Args: matrix (list of list of int): A 3x3 matrix. Returns: str: \\"YES\\" if the matrix is a magic square, \\"NO\\" otherwise. # sum of the first row as reference sum magic_sum = sum(matrix[0]) # check sums of rows for row in matrix: if sum(row) != magic_sum: return \\"NO\\" # check sums of columns for col in range(3): if sum(matrix[row][col] for row in range(3)) != magic_sum: return \\"NO\\" # check sum of the main diagonal if sum(matrix[i][i] for i in range(3)) != magic_sum: return \\"NO\\" # check sum of the anti-diagonal if sum(matrix[i][2-i] for i in range(3)) != magic_sum: return \\"NO\\" return \\"YES\\""},{"question":"In a distant kingdom, there is a city with a unique grid layout consisting of intersecting streets and avenues. Each intersection in the grid is represented by a cell. The kingdom is planning to place streetlights at some of these intersections to ensure that every intersection in the grid is illuminated. A streetlight placed at an intersection can illuminate all intersections in the same row and in the same column. The city grid has dimensions of n rows and m columns. The king has tasked you with determining the minimum number of streetlights needed so that every intersection is illuminated. Write a function `minStreetlights(n: int, m: int) -> int` which takes two integers n and m representing the number of rows and columns in the grid respectively, and returns the minimum number of streetlights required to illuminate the entire grid. # Input - An integer `n` (1 ≤ n ≤ 1000), representing the number of rows. - An integer `m` (1 ≤ m ≤ 1000), representing the number of columns. # Output - An integer representing the minimum number of streetlights needed to illuminate the entire grid. # Example ```python minStreetlights(3, 4) ``` Output: ``` 2 ``` # Explanation One optimal way to place the streetlights is at intersections (1,1) and (2,2), which together illuminate all intersections in the 3x4 grid. # Note - Multiple approaches may exist to achieve the minimum number of streetlights. - The function should be efficient and handle the maximum input sizes within a reasonable time limit.","solution":"def minStreetlights(n, m): Calculate the minimum number of streetlights required to illuminate a grid with n rows and m columns. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. Returns: int: Minimum number of streetlights needed. # The minimum number of streetlights is the smaller value between n and m. return min(n, m)"},{"question":"A group of friends decided to play a game called \\"Number Elimination\\". In this game, each participant writes down a sequence of n integers on their paper. The goal is to find the longest contiguous sub-segment of the sequence in which the difference between the maximum and minimum numbers is at most d. Given the sequence of n integers and the integer d, help the friends determine the length of the longest sub-segment that meets the game\'s condition. The first line contains two integers n (1 ≤ n ≤ 10^5) and d (0 ≤ d ≤ 10^6), representing the size of the sequence and the allowed difference, respectively. The second line contains n integers a_i (1 ≤ a_i ≤ 10^6) representing the sequence. Output a single integer, the length of the longest sub-segment where the difference between the maximum and minimum numbers is at most d. For example, given the input: ``` 5 3 1 5 4 6 8 ``` The longest sub-segment meeting the condition is `5 4 6`, with a length of 3, since the difference between 6 (max) and 4 (min) is 2, which is within the allowed difference of 3.","solution":"from collections import deque def longest_subsegment(n, d, sequence): Returns the length of the longest contiguous sub-segment where the difference between the maximum and minimum numbers is at most d. :param n: int : size of the sequence :param d: int : allowed difference :param sequence: list[int] : list of integers representing the sequence :return: int : length of the longest sub-segment if n == 0: return 0 max_deque = deque() min_deque = deque() left = 0 max_length = 0 for right in range(n): while max_deque and sequence[max_deque[-1]] <= sequence[right]: max_deque.pop() max_deque.append(right) while min_deque and sequence[min_deque[-1]] >= sequence[right]: min_deque.pop() min_deque.append(right) while sequence[max_deque[0]] - sequence[min_deque[0]] > d: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Bob and Alice have found a *magical sequence* in their research, and they need your help to manipulate it. A sequence is called *magical* if it has the following property: - For every element in the sequence, the absolute difference between any two adjacent elements is at most some fixed non-negative integer ( d ). You are given a sequence of integers. Bob and Alice want to replace exactly one element in this sequence with any integer, so that the resulting sequence still satisfies the magical property. Your task is to determine the minimum possible absolute difference ( d ) that guarantees the sequence remains magical after the replacement. The first line contains a single integer ( T ) ((1 leq T leq 10^3)) — the number of test cases. The first line of each test case contains a single integer ( n ) ((2 leq n leq 10^5)) — the length of the sequence. The second line of each test case contains ( n ) integers ( a_1, a_2, ldots, a_n ) ((|a_i| leq 10^9)) — the sequence. Output ( T ) lines, one for each test case. Each line should contain a single integer ( d ) — the minimum possible absolute difference ensuring the sequence remains magical after replacing one element. Example input: ``` 2 4 1 2 3 6 5 10 20 30 40 50 ``` Example output: ``` 3 10 ``` In the first test case, changing the 4th element to 4 or 5 transforms the sequence into either [1, 2, 3, 4] or [1, 2, 3, 5] respectively, both of which have a maximum absolute difference of 3, ensuring the sequence remains magical. In the second test case, any single replacement will still satisfy a difference ( d = 10 ) due to the uniform nature of the differences in the initial sequence. Thus, 10 is the minimum ( d ) ensuring the sequence remains magical.","solution":"def min_possible_d(n, sequence): This function computes the minimum possible absolute difference `d` that guarantees the sequence remains magical after replacing one element. if n == 2: return abs(sequence[1] - sequence[0]) max_diff = 0 for i in range(1, n): max_diff = max(max_diff, abs(sequence[i] - sequence[i-1])) return max_diff def process_test_cases(test_cases): This function processes multiple test cases and returns a list of results for each test case. results = [] for test_case in test_cases: n, sequence = test_case results.append(min_possible_d(n, sequence)) return results"},{"question":"A company has a large collection of important documents stored in various folders and subfolders. They\'ve decided to implement a system to find the most frequently used file type based on file extensions. Each file has either no extension or exactly one extension. Your task is to write a program to help them find the most frequently used file extension. If there are multiple file extensions with the same usage frequency, return the lexicographically smallest one. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of files in the system. The next n lines each describe one file in the format `path/to/file.extension`, where `path/to/file` can be any directory path (potentially containing spaces and special characters) and `extension` is a series of lowercase alphabetic characters. If a file has no extension, it ends with a slash (`/`) and has no alphabetic characters following the last slash. Output a single line: the most frequently used file extension. If multiple extensions are tied for frequency, output the lexicographically smallest one. **Example Input:** ``` 7 docs/report.pdf imgs/photo.jpg docs/notes.txt archive.tar.gz scripts/run.sh logs/ docs/draft.pdf ``` **Example Output:** ``` pdf ``` **Explanation:** In the given example, there are three file extensions: `pdf`, `jpg`, `txt`, and `sh`. The extension `pdf` appears most frequently (2 times). Other extensions (like `jpg`, `txt`, and `sh`) appear only once. There is also a file with no extension (`logs/`), but it is not considered for determining the most frequently used extension. If there was a tie (say `pdf` and `jpg` both appeared twice), the lexicographically smaller extension (in this case `jpg`) would be chosen.","solution":"def most_frequent_extension(n, files): from collections import Counter extensions = [] for file in files: parts = file.split(\'/\') last_part = parts[-1] if \'.\' in last_part: ext = last_part.split(\'.\')[-1] if ext: extensions.append(ext) if not extensions: return \\"\\" counter = Counter(extensions) max_count = max(counter.values()) most_frequent_extensions = [ext for ext, count in counter.items() if count == max_count] return min(most_frequent_extensions)"},{"question":"Bob is a regular at his local library and often borrows multiple books at a time. However, the library has a strict rule: Bob can only explore his borrowed books in a particular order. For each book, its predecessors must be returned before it can be read. Bob has borrowed n books, labeled from 1 to n, each with a specified dependency on another book (or no dependency). The dependencies are represented in the form of a directed acyclic graph where an edge from book A to book B means book A must be returned before book B can be read. Bob wonders if there exists a valid sequence in which he can read all the books following the library\'s rules, and if so, what is that sequence. Your task is to determine if such a sequence exists and to return one possible valid order to read the books. The first line contains an integer n (1 ≤ n ≤ 1000), the number of books. The second line contains an integer m (0 ≤ m ≤ 2000), the number of dependencies. The following m lines each contain two integers a and b (1 ≤ a, b ≤ n), meaning book a must be read before book b. If a valid sequence exists, print \\"YES\\" on the first line and the sequence of n integers denoting the order in which Bob can read all the books. If such a sequence does not exist, print \\"NO\\". Example: ``` Input: 4 3 1 2 1 3 3 4 Output: YES 1 2 3 4 ```","solution":"from collections import defaultdict, deque def find_reading_order(n, m, dependencies): def topological_sort(n, adj): # Compute indegree of each book indegree = [0] * (n + 1) for nodes in adj.values(): for node in nodes: indegree[node] += 1 # Collect all books with no prerequisites queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in adj[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return None # Build the adjacency list adj = defaultdict(list) for a, b in dependencies: adj[a].append(b) order = topological_sort(n, adj) if order: return \\"YES\\", order else: return \\"NO\\", [] # To test the function you would call: # find_reading_order(n, m, dependencies) # where `n` is the number of books, # `m` is the number of dependencies, # and `dependencies` is a list of tuples representing the dependencies"},{"question":"In a small village called Gridtown, people are living on a grid of size N x M. Due to its organized structure, the row and column of each cell can be identified by coordinates (i, j), where 1 ≤ i ≤ N and 1 ≤ j ≤ M. Recently, a new virus outbreak has begun, and it spreads in an interesting manner. The virus spreads to an uninfected cell (i, j) if it has at least one already infected neighboring cell that shares a common edge. The initial infection was identified in K cells. We need to determine which cell will be the last to get infected. Write a program to identify the coordinates of the cell that will be the last to get infected. If there are multiple such cells, output any one. The first input line contains two integers N, M (1 ≤ N, M ≤ 2000) — the size of the grid. Each cell in the grid has coordinates (x, y) where 1 ≤ x ≤ N and 1 ≤ y ≤ M. The second line contains an integer K (1 ≤ K ≤ 10) — the number of initially infected cells. The third line contains K pairs of integers: x1, y1, x2, y2, ..., xk, yk (1 ≤ xi ≤ N, 1 ≤ yi ≤ M) — the coordinates of the initially infected cells. Output a line with two space-separated integers x and y — the coordinates of the cell that will be the last to get infected. If there are multiple such cells, output any one. **Example:** Input: 4 3 3 1 1 4 1 2 3 Output: 4 3","solution":"from collections import deque def last_infected_cell(N, M, K, infected): def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 1 <= nx <= N and 1 <= ny <= M: yield nx, ny grid = [[0] * (M + 1) for _ in range(N + 1)] queue = deque() for i in range(K): x, y = infected[2 * i], infected[2 * i + 1] grid[x][y] = 1 queue.append((x, y)) last_x, last_y = -1, -1 while queue: x, y = queue.popleft() last_x, last_y = x, y for nx, ny in neighbors(x, y): if grid[nx][ny] == 0: grid[nx][ny] = 1 queue.append((nx, ny)) return last_x, last_y"},{"question":"A university department is organizing a series of research presentations over a number of days. There are N professors and M students, and some constraints dictate how the presentations should be scheduled. Can you help organize the schedule? Each professor can supervise at most one student per day, and each student needs to present exactly once. Additionally, each professor has a limited number of days they are available for supervision. A student can only present if they are supervised by a professor. Moreover: - Each professor has a designated list of students they are capable of supervising. - The availability of each professor is specified by a range of days they can work. The goal is to determine if it is possible to schedule all presentations so that each student presents exactly once, and if so, produce one valid schedule. Constraints: The scheduling plan should respect the following constraints: - Each professor can supervise at most one student on any given day. - Each student must present exactly once. - Professors are only available on certain days, and each student can only be supervised by specific professors. Input: - The first line contains two integers N and M (1 le N, M le 1000): the number of professors and the number of students. - The next line contains N integers, where the i-th integer represents the number of days that the i-th professor is available. - The next N lines contain two integers each, a_i and b_i (1 le a_i le b_i le 10^6), describing the range of days (inclusive) during which the i-th professor is available. - The next line contains M integers, where the j-th integer represents the number of professors who can supervise the j-th student. - The next M lines contain a list of p_j integers each, indicating the professors capable of supervising the j-th student. Output: - If it is possible to schedule all presentations, print \\"YES\\" and then one valid schedule as follows: - The first line contains the number of days D used in the schedule. - The next D lines contain the presentations of that day. Each line starts with an integer k which is the number of presentations that day, followed by k pairs of numbers pr and st, where pr is the professor\'s index and st is the student\'s index. - If it is not possible to schedule all presentations, print \\"NO\\". Example: Input: ``` 3 4 2 3 1 1 2 3 5 2 2 1 2 1 1 1 2 3 1 3 ``` Output: ``` YES 3 1 1 1 1 2 2 1 3 3 ```","solution":"def schedule_presentations(N, M, prof_days_available, prof_available_ranges, student_prof_preferences): Schedule student presentations according to the constraints. Parameters: - N: Number of professors - M: Number of students - prof_days_available: List of days each professor is available - prof_available_ranges: Ranges of days each professor is available - student_prof_preferences: List of lists, each list contains the professors eligible to supervise the student Returns: - Tuple with a boolean indicating if scheduling is possible and if so, the schedule. from collections import defaultdict import heapq # Step 1: Create availability information based on ranges prof_availability = [] for i in range(N): start, end = prof_available_ranges[i] for day in range(start, end+1): prof_availability.append((day, i)) # Step 2: Sort professors\' availability by date prof_availability.sort() # Step 3: Prepare data structures for scheduling schedule_days = [] available_daily_profs = defaultdict(list) scheduled = set() # Step 4: Try to schedule students for day, prof in prof_availability: if prof_days_available[prof] == 0: continue # Collect students eligible for this professor eligible_students = [] for student, prefs in enumerate(student_prof_preferences): if student not in scheduled and prof in prefs: heapq.heappush(eligible_students, student) if not eligible_students: continue scheduled_today = [] while eligible_students and prof_days_available[prof] > 0: student = heapq.heappop(eligible_students) if student not in scheduled: scheduled_today.append((prof, student)) scheduled.add(student) prof_days_available[prof] -= 1 if scheduled_today: schedule_days.append((day, scheduled_today)) if len(scheduled) == M: break #Check if all students have been scheduled if len(scheduled) != M: return (False, ) # Construct output format result = [\\"YES\\"] result.append(len(schedule_days)) for day, presentations in schedule_days: day_schedule = [len(presentations)] for prof, student in presentations: day_schedule.append(prof+1) day_schedule.append(student+1) result.append(\' \'.join(map(str, day_schedule))) return result"},{"question":"In a far-off land, there exists a collection of magical artifacts, each with a unique value. These artifacts are kept hidden in secret chambers within a great castle. The castle has a unique structure; it can be perceived as a tree with secret chambers as nodes and passages as edges. Each node is labeled with a number representing its value. You, a treasure hunter, have discovered a map of the castle, detailing the value of each chamber and the passages between them. You want to figure out the maximum possible sum of values you can collect by starting from any chamber and following the passages to other chambers, ensuring you do not visit any chamber more than once in your path. The input consists of: 1. An integer n (1 ≤ n ≤ 10000), the number of chambers. 2. An array of n integers, where the i-th integer represents the value of the i-th chamber. 3. An array of (n-1) pairs of integers, where each pair (u, v) denotes a passage between chamber u and chamber v. Output a single integer - the maximum possible sum of values you can collect by traversing from any chamber. Example: Input: 5 3 2 1 10 1 1 2 1 3 3 4 2 5 Output: 17 In this example, you can start at chamber 1, move to chamber 2, and then to chamber 5, collecting the values 3, 2, and 1. Then return to chamber 1, and follow the passage to chamber 3, and then to chamber 4, collecting the values 1 and 10, resulting in a total of 3 + 2 + 1 + 1 + 10 = 17, which is the maximum possible sum.","solution":"def max_path_sum(n, values, passages): from collections import defaultdict import sys sys.setrecursionlimit(10001) def dfs(node, parent): current_sum = values[node] max_sum = 0 for neighbor in tree[node]: if neighbor == parent: continue max_sum = max(max_sum, dfs(neighbor, node)) return current_sum + max_sum if n == 1: return values[0] tree = defaultdict(list) for u, v in passages: tree[u-1].append(v-1) tree[v-1].append(u-1) max_sum = -sys.maxsize for i in range(n): max_sum = max(max_sum, dfs(i, -1)) return max_sum"},{"question":"Sudoku is a popular puzzle consisting of a 9x9 grid that is divided into 3x3 subgrids. The goal is to fill the grid so that each row, each column, and each of the nine 3x3 subgrids contain all of the digits from 1 to 9 exactly once. Some of the cells are pre-filled with digits to provide a starting point for the puzzle. Write a program to solve a given Sudoku puzzle. The input will be a partially filled 9x9 grid, represented by a list of lists where the cells contain integers (1-9) or 0 (representing an empty cell). The program should fill the grid with the correct digits to solve the puzzle. The input format includes a 9x9 matrix of integers: ``` [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` Your task is to write a function, `solve_sudoku(grid)`, that modifies the `grid` in-place to complete the Sudoku puzzle. You can assume that there will always be at least one solution for the given puzzle. # Constraints - The input grid will always be a valid 9x9 Sudoku puzzle. - Each cell in the grid will contain an integer between 0 and 9, where 0 represents an empty cell. - There is a unique solution to the provided puzzle. Function Signature: ```python def solve_sudoku(grid: List[List[int]]) -> None: pass ``` Input Example: ```python grid = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` Output Example: ```python solve_sudoku(grid) print(grid) ``` Should output the following 9x9 grid where all cells contain digits from 1 to 9 with no duplicates in any row, column, or 3x3 subgrid: ```python [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ```","solution":"def solve_sudoku(grid): def is_valid(num, pos, grid): for i in range(len(grid[0])): if grid[pos[0]][i] == num and pos[1] != i: return False for i in range(len(grid)): if grid[i][pos[1]] == num and pos[0] != i: return False box_x = pos[1] // 3 box_y = pos[0] // 3 for i in range(box_y * 3, box_y * 3 + 3): for j in range(box_x * 3, box_x * 3 + 3): if grid[i][j] == num and (i, j) != pos: return False return True def find_empty(grid): for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 0: return (i, j) return None def solve(): find = find_empty(grid) if not find: return True else: row, col = find for i in range(1, 10): if is_valid(i, (row, col), grid): grid[row][col] = i if solve(): return True grid[row][col] = 0 return False solve()"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to determine the minimum spanning tree (MST) of this graph. More specifically, you need to perform multiple queries on this graph where each query asks whether a given edge is part of the MST or not. # Input - The first line contains two integers n and m (1 le n, m leq 100,000) — the number of nodes and edges in the graph, respectively. - The next m lines each contain three integers u, v, w (1 le u, v le n, 0 le w le 10^9) — denoting an edge between nodes u and v with weight w. - The following line contains an integer q (1 le q le 100,000) — the number of queries. - The next q lines each contain one integer k (1 le k le m) — the index of the edge (1-based) that the query asks about. # Output For each query, print \\"YES\\" if the edge with given index is part of the MST, and \\"NO\\" otherwise. # Example Input ``` 4 5 1 2 1 1 3 4 2 3 2 2 4 5 3 4 3 4 1 2 3 4 ``` Output ``` YES NO YES NO ``` # Note In the example above: - The edges are: 1. Edge between nodes 1 and 2 with weight 1 2. Edge between nodes 1 and 3 with weight 4 3. Edge between nodes 2 and 3 with weight 2 4. Edge between nodes 2 and 4 with weight 5 5. Edge between nodes 3 and 4 with weight 3 - The MST of this graph includes edges [1, 3, 5]. - Hence, the responses to the queries are determined based on whether the queried edge is in the MST or not.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal(n, edges): uf = UnionFind(n) mst_edges = [] edges_sorted = sorted(edges, key=lambda x: x[2]) for u, v, w, index in edges_sorted: if uf.find(u) != uf.find(v): uf.union(u, v) mst_edges.append(index) return set(mst_edges) def mst_queries(n, edges, queries): edges_with_index = [(u-1, v-1, w, i+1) for i, (u, v, w) in enumerate(edges)] mst_set = kruskal(n, edges_with_index) res = [] for edge_idx in queries: if edge_idx in mst_set: res.append(\\"YES\\") else: res.append(\\"NO\\") return res"},{"question":"A small company owns several storage devices. Each storage device is represented by its capacity measured in bytes. The company receives data packets of various sizes that must be stored on the devices. Each data packet can be stored in only one device and cannot be split across multiple devices. If a data packet cannot fit into any existing storage device, it must be discarded. You are given the capacities of the storage devices and the sizes of the data packets. Your task is to determine the number of data packets that can be successfully stored. The first line of the input contains an integer `m` (1 ≤ m ≤ 100) — the number of storage devices. The second line contains `m` integers representing the capacities of the storage devices in bytes (1 ≤ capacity ≤ 10^9). The third line of the input contains an integer `n` (1 ≤ n ≤ 100) — the number of data packets. The fourth line contains `n` integers representing the sizes of the data packets in bytes (1 ≤ size ≤ 10^9). Output a single integer — the number of data packets that can be successfully stored. Example: Input: ``` 3 100 200 300 4 50 150 200 400 ``` Output: ``` 3 ``` Explanation: 1. The first data packet of size 50 can fit into any storage device. After storing it in the device with capacity 100, the capacities are [50, 200, 300]. 2. The second data packet of size 150 can fit into the device with capacity 200. After storing it, the capacities are [50, 50, 300]. 3. The third data packet of size 200 can fit into the device with capacity 300. After storing it, the capacities are [50, 50, 100]. 4. The fourth data packet of size 400 cannot fit into any remaining device. Hence, 3 data packets are successfully stored, and 1 is discarded.","solution":"def count_successful_stores(m, capacities, n, sizes): Returns the number of data packets that can be successfully stored. Args: m: int - number of storage devices capacities: list of int - capacities of the storage devices n: int - number of data packets sizes: list of int - sizes of the data packets Returns: int - number of data packets successfully stored capacities.sort(reverse=True) successful_stores = 0 for size in sizes: for i in range(m): if capacities[i] >= size: capacities[i] -= size successful_stores += 1 break return successful_stores"},{"question":"You are given an array of integers and multiple queries. Each query is of one of the following types: 1. Update the value at a specific position in the array. 2. Calculate the sum of a range of elements in the array. Write a program to efficiently handle these queries. # Input: - The first line contains two integers, `n` and `q` (1 le n, q le 10^5), representing the number of elements in the array and the number of queries, respectively. - The second line contains `n` integers, the elements of the array (1 le a_i le 10^9). - The next `q` lines contain the queries. Each query is either of the form: - `1 x y` (1 le x le n, 1 le y le 10^9), which means update the `x`-th element of the array to `y`. - `2 l r` (1 le l le r le n), which means calculate and output the sum of elements from index `l` to `r` (inclusive). # Output: For each query of type `2 l r`, print the sum of elements from index `l` to `r`. # Example: Input: ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` Output: ``` 6 14 ``` # Explanation: 1. The initial array is [1, 2, 3, 4, 5]. 2. The first query asks for the sum from index 1 to 3: `1 + 2 + 3 = 6`. 3. The second query updates the 2nd element of the array to 10, resulting in [1, 10, 3, 4, 5]. 4. The third query asks for the sum from index 1 to 3: `1 + 10 + 3 = 14`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Insert leaf nodes in the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): # Update leaf node pos = self.n + index self.tree[pos] = value # Update the tree by recalculating the parents while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): # Get the sum of the segment [left, right] left += self.n right += self.n sum = 0 while left <= right: if left % 2 == 1: sum += self.tree[left] left += 1 if right % 2 == 0: sum += self.tree[right] right -= 1 left //= 2 right //= 2 return sum def process_queries(n, queries, data): segment_tree = SegmentTree(data) results = [] for query in queries: t, x, y = query if t == 1: segment_tree.update(x - 1, y) elif t == 2: results.append(segment_tree.range_sum(x - 1, y - 1)) return results"},{"question":"Bob is fond of exploring rectangular mazes. He is currently standing at the top-left corner of a rectangular maze and wants to reach the bottom-right corner. Each cell of the maze is either passable (represented as \'.\') or impassable (represented as \'#\'). Bob can move up, down, left, or right but cannot move diagonally and cannot move through impassable cells. Help Bob find the length of the shortest path from the top-left corner to the bottom-right corner, or determine that it\'s impossible to reach the bottom-right corner. The first line of input contains two integers n and m - the dimensions of the maze (1 ≤ n, m ≤ 1000). The next n lines each contain m characters where each character is either \'.\' or \'#\', representing the maze. Print a single integer: the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if it is impossible to reach the bottom-right corner. Example: Input: 4 4 .... ..#. ..#. .... Output: 6 Explanation: The shortest path is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,3) -> (2,3) -> (3,3) Path length = 6.","solution":"from collections import deque def shortest_path_maze(n, m, maze): # Direction vectors for moving Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the starting or ending points are blocked if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return -1 # Queue for BFS queue = deque([(0, 0, 0)]) # (row, col, path_length) visited = set((0, 0)) while queue: r, c, path_length = queue.popleft() # If we reached the bottom-right corner if r == n-1 and c == m-1: return path_length # Check all possible moves for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and maze[nr][nc] == \'.\' and (nr, nc) not in visited: queue.append((nr, nc, path_length + 1)) visited.add((nr, nc)) # If we completed the BFS and did not find the bottom-right corner return -1"},{"question":"You have a row of ( n ) trees, each having a certain height. In one step, you can choose any tree and increase its height by 1. The goal is to make the heights of all the trees equal using the minimum number of steps. Formally, you are given an array ( h ) of ( n ) integers, where ( h[i] ) represents the height of the ( i )-th tree. Calculate the minimum number of steps required to make all trees have the same height by increasing their heights. The first line contains a single integer ( n ) (( 1 leq n leq 100,000 )) – the number of trees. The second line contains ( n ) space-separated integers ( h_1, h_2, ldots, h_n ) (( 1 leq h_i leq 10^9 )) – the initial heights of the trees. Print a single integer – the minimum number of steps required to make the heights of all trees equal. Example: Input: ``` 4 1 2 3 4 ``` Output: ``` 6 ``` Explanation: You can choose the third tree and increase its height 2 times, choose the second tree and increase its height 3 times, and choose the first tree and increase its height 3 times. This will result in all trees having a height of 4. The total number of steps is ( 2 + 3 + 3 = 8 ). There is also another solution: you can increase the height of each tree to 4 in a greedy manner: increase the first tree 3 times, the second tree 2 times, and the third tree once. This will result in a total of ( 3 + 2 + 1 = 6 ) steps. Hence the minimum number of steps is 6.","solution":"def min_steps_to_equal_height(n, heights): Function to calculate the minimum number of steps required to make the heights of all trees equal by only increasing heights. Parameters: n (int): The number of trees. heights (list of int): List of tree heights. Returns: int: The minimum number of steps required. max_height = max(heights) steps = sum(max_height - height for height in heights) return steps"},{"question":"You are given a sequence of non-negative integers representing the amount of rainwater each block in a 2-dimensional landscape would hold if it rained. Assume that a block can hold rainwater if there are higher blocks on the left and right sides of it. The first line contains a single integer n (1 ≤ n ≤ 200), the number of blocks. The second line contains n non-negative integers separated by space, where the i-th integer represents the height of the i-th block. Your task is to compute the total amount of rainwater the entire landscape would trap after raining. If the sequence of blocks does not trap any water, return 0. Input: 1. An integer n. 2. An array of n non-negative integers. Output: 1. A single integer representing the total units of trapped rainwater. Example: Input: 6 0 1 0 2 1 0 Output: 1","solution":"def trap_rainwater(n, heights): Calculates the total amount of trapped rainwater given the heights of blocks. Parameters: n (int): The number of blocks heights (list of int): The height of each block. Returns: int: The total amount of trapped rainwater. if n < 3: return 0 left_max = [0] * n right_max = [0] * n # Compute the maximum height to the left of each block left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Compute the maximum height to the right of each block right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped rainwater total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - heights[i] return total_water"},{"question":"A factory produces a sequence of products, each having a unique ID from 1 to n. Due to a quality control process, the factory labels some products as \\"defective\\" and removes them from the production line. The remaining products are re-indexed sequentially starting from 1 to m, where m is the length of the re-indexed list after defectives are removed. You are tasked with determining the new index of each original product ID in the re-indexed list. The first line contains two integers n and d (1 ≤ d < n ≤ 10^6) — the total number of products initially on the production line and the number of defective products, respectively. The second line contains d distinct integers separated by spaces, representing the IDs of the defective products. Print n integers, where the i-th integer is the new index of the product i in the re-indexed list if it is not defective, or -1 if the product is defective. For example, given the first sample where n = 5 and d = 2, and the defective products are 2 and 4, the expected output is: 1, -1, 2, -1, 3 Explanation: - Product 1 is at index 1 in the re-indexed list. - Product 2 is defective, so it gets -1. - Product 3 is at index 2 in the re-indexed list. - Product 4 is defective, so it gets -1. - Product 5 is at index 3 in the re-indexed list.","solution":"def relabel_products(n, d, defective_ids): Returns a list of length n where each element is the new index of the product i in the re-indexed list if it is not defective, or -1 if the product is defective. defective_set = set(defective_ids) new_index = 1 result = [] for i in range(1, n + 1): if i in defective_set: result.append(-1) else: result.append(new_index) new_index += 1 return result"},{"question":"A spaceship needs to navigate through a series of asteroids in a 1D space. Each asteroid has a given size and is represented by an integer. The spaceship can shoot any asteroid, and upon doing so, the asteroid splits into smaller parts. Specifically, an asteroid of size `s` splits into `s` asteroids each of size `1`. You are given a list of integers representing the sizes of asteroids the spaceship encounters in order. Your task is to determine the minimum number of shots required to get rid of all the asteroids. The first line of the input contains one integer `t` (1 ≤ `t` ≤ 100) - the number of test cases. Each of the following `t` lines contains a list of space-separated integers representing the sizes of the asteroids in that test case. The sum of the sizes in a single test case does not exceed 10^4. Print `t` lines of output, where the i-th line contains one integer – the minimum number of shots required for the i-th test case. **Example:** Input: 2 3 4 1 2 2 2 Output: 8 6 Explanation: In the first test case, the spaceship shoots the asteroids of sizes 3, 4, and 1 in turn, splitting them into 3, 4, and 1 asteroids of size 1 each. Thus, the total number of shots required is 3 + 4 + 1 = 8. In the second test case, the spaceship shoots the three asteroids each of size 2, splitting them into 2 asteroids of size 1 each. Thus, the total number of shots required is 2 + 2 + 2 = 6.","solution":"def min_shots(test_cases): Given a list of test cases with asteroid sizes, calculates the minimum shots required to destroy all asteroids. results = [] for asteroids in test_cases: shots = sum(asteroids) results.append(shots) return results # Function to process input as described in the problem def process_input(t, data): test_cases = [] for i in range(t): test_cases.append(list(map(int, data[i].split()))) return test_cases"},{"question":"You are given a non-negative integer n. Your task is to generate the k-th permutation of the numbers [0, 1, 2, ..., n]. The permutations should be sorted lexicographically. The first line of the input contains two integers n (0 ≤ n ≤ 8) and k (1 ≤ k ≤ (n + 1)!) separated by a space. Print the k-th lexicographical permutation of the numbers [0, 1, 2, ..., n]. For example, if n = 2, then the permutations in lexicographical order are: - 012 - 021 - 102 - 120 - 201 - 210 If k is 4, then the output should be 120. **Input** The input contains two integers n and k (0 ≤ n ≤ 8, 1 ≤ k ≤ (n + 1)!) separated by a single space. **Output** Output the k-th lexicographical permutation of the sequence [0, 1, ..., n] as a single string. **Example** Input: 2 4 Output: 120","solution":"import itertools def kth_permutation(n, k): Returns the k-th permutation of the numbers [0, 1, 2, ..., n] in lexicographical order. # Generate all permutations of the list [0, 1, 2, ..., n] permutations = list(itertools.permutations(range(n + 1))) # Since permutations are generated in lexicographical order, we directly access the (k-1)-th permutation return \'\'.join(map(str, permutations[k - 1])) # Example function call, to be removed or tested separately # print(kth_permutation(2, 4)) # Output should be \'120\'"},{"question":"Given an integer array of size n, find the smallest window length that contains all the distinct numbers from the array. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the elements of the array. Output the length of the smallest window that contains all the distinct numbers present in the array. Example: Input: ``` 5 1 2 2 3 1 ``` Output: ``` 3 ``` Explanation: In the array [1, 2, 2, 3, 1], the smallest window that contains all the distinct numbers [1, 2, 3] is the subarray [2, 3, 1]. Thus, the length of this window is 3.","solution":"def smallest_window_length(arr): Returns the length of the smallest window that contains all the distinct numbers from the array. n = len(arr) distinct_elements = set(arr) # Find all distinct elements. distinct_count = len(distinct_elements) left = 0 min_len = n + 1 current_count = {} count = 0 for right in range(n): if arr[right] in current_count: current_count[arr[right]] += 1 else: current_count[arr[right]] = 1 count += 1 while count == distinct_count: min_len = min(min_len, right - left + 1) current_count[arr[left]] -= 1 if current_count[arr[left]] == 0: del current_count[arr[left]] count -= 1 left += 1 return min_len"},{"question":"Bob and Alice are playing a unique game of number sequences. The game involves a sequence of integers and a set of operations that can be performed to transform the sequence. The ultimate goal is to sort the sequence in a non-decreasing order using the minimum number of operations. The operations allowed are as follows: 1. Reverse any subsequence of the sequence. 2. Rotate any subsequence of the sequence to the left by one position (e.g., rotating \\"abcde\\" to the left by one position results in \\"bcdea\\"). Given the initial sequence, determine the minimum number of operations required to sort it. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. Print a single integer denoting the minimum number of operations required to sort the sequence in a non-decreasing order. **Examples:** Input: ``` 5 3 1 4 1 5 ``` Output: ``` 2 ``` Input: ``` 3 2 1 3 ``` Output: ``` 1 ``` Input: ``` 6 6 5 4 3 2 1 ``` Output: ``` 0 ``` Implement a function that given the sequence, computes the minimum number of operations needed to sort it in non-decreasing order.","solution":"def minimum_operations_to_sort(n, sequence): Given the length of the sequence n and the sequence itself, this function returns the minimum number of operations required to sort the sequence in non-decreasing order. :param n: Length of the sequence (1 ≤ n ≤ 1000) :param sequence: List of integers (1 ≤ ai ≤ 1000) :return: Minimum number of operations to sort the sequence if sorted(sequence) == sequence: return 0 # Simple case where reversing the whole list can potentially sort it if sequence == sorted(sequence, reverse=True): return 1 sorted_sequence = sorted(sequence) # Find longest increasing subsequence def LIS_length(sequence): dp = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) lis_length = LIS_length(sequence) operations = n - lis_length return operations"},{"question":"Vasya has recently opened a small grocery store and is trying to manage his inventory. Every day, he receives a shipment of fruits, but he only wants to keep his inventory within a certain limit to avoid spoilage. Each fruit shipment consists of multiple types of fruits, and each type has a specific quantity. Vasya\'s goal is to determine how many additional fruits he needs to throw away each day to maintain his inventory within the limit. Given the inventory limit for his store and the list of fruits received each day, calculate the total number of fruits he needs to discard to stay within the limit. The single line of input contains an integer l (1 ≤ l ≤ 100) representing the inventory limit, and an integer n (1 ≤ n ≤ 100) representing the number of different types of fruits received that day, followed by n integers f_i (0 ≤ f_i ≤ 100) representing the quantity of each type of fruit received. Print a single integer — the total number of fruits Vasya needs to discard to stay within the inventory limit. In the first sample, Vasya\'s inventory limit is 10, and he receives 5 apples, 4 bananas, and 3 oranges. The total number of fruits received is 5 + 4 + 3 = 12. To stay within the limit of 10, he needs to discard 2 fruits. In the second sample, Vasya\'s inventory limit is 15, and he receives 6 apples, 5 bananas, and 4 oranges. The total number of fruits received is 6 + 5 + 4 = 15. No fruits need to be discarded since the total is equal to the limit.","solution":"def calculate_discarded_fruits(l, n, quantities): total_fruits = sum(quantities) if total_fruits > l: return total_fruits - l else: return 0"},{"question":"In a competitive programming contest, participants solve problems and earn points based on their submissions. The contest lasts for h hours, and there are p problems to solve. Each participant can make multiple submissions for each problem, and for each submission, they either earn points or get no points if the submission is incorrect. The organizers have a log of all submissions and need help calculating the total points earned by each participant at the end of the contest. Each log entry contains the participant\'s ID, the problem number, and the points earned (0 if the submission was incorrect). You are given a list of participants, a list representing the possible points for each problem, and a log of all submissions. Your task is to calculate the total points earned by each participant. The first line contains two integers h and p (1 ≤ h ≤ 24, 1 ≤ p ≤ 100). The second line contains p integers pi (1 ≤ pi ≤ 1000), where pi is the maximum points that can be earned for problem i. The third line contains an integer m (1 ≤ m ≤ 1000) — the number of submissions. Each of the next m lines contains three integers ai, bi, ci (1 ≤ ai ≤ 100, 1 ≤ bi ≤ p, 0 ≤ ci ≤ pi), where ai is the participant\'s ID, bi is the problem number, and ci is the points earned for that submission. Output the total points earned by each participant. For participants who have made no submissions, their total points should be 0. For each participant, print their ID and total points earned, sorted by the participant\'s ID in ascending order. Example: Input: 2 3 100 200 150 5 1 1 100 2 2 200 1 3 150 3 2 50 2 1 0 Output: 1 250 2 200 3 50","solution":"def calculate_total_points(h, p, max_points, m, submissions): from collections import defaultdict points_earned = defaultdict(int) for submission in submissions: participant_id, problem_number, points = submission points_earned[participant_id] += points results = [(participant_id, points_earned[participant_id]) for participant_id in sorted(points_earned)] return results"},{"question":"You are given two arrays of positive integers, `a` and `b`, both of length `n`. You are allowed to perform any number of the following operations on these arrays: 1. Choose two elements, one from each array, `a[i]` and `b[j]` (1 <= i, j <= n), and swap them. Your goal is to maximize the sum of the minimum values of the corresponding elements in the arrays after any number of swaps. In other words, you want to maximize the sum of `min(a[i], b[i])` for all `i` from `1` to `n`. The first line of the input contains an integer `t` (1 <= t <= 100) - the number of test cases. Each test case consists of three lines: - The first line contains one integer `n` (1 <= n <= 100) - the length of the arrays. - The second line contains `n` space-separated positive integers `a[1], a[2], ..., a[n]`. - The third line contains `n` space-separated positive integers `b[1], b[2], ..., b[n]`. For each test case, output a single integer - the maximum possible sum of `min(a[i], b[i])` after performing any number of allowed operations. # Example Input ``` 2 3 1 3 5 2 6 4 2 1 2 3 4 ``` Output ``` 10 4 ``` # Explanation **Example 1-** After optimal swaps, `a = [1, 4, 5]` and `b = [2, 6, 3]`. Sum of `min(a[i], b[i])` = `min(1, 2) + min(4, 6) + min(5, 3)` = `1 + 4 + 3` = `8`. **Example 2-** After optimal swaps, `a = [1, 2]` and `b = [3, 4]`. Sum of `min(a[i], b[i])` = `min(1, 3) + min(2, 4)` = `1 + 2` = `3`. # Constraints: - 1 <= t <= 100 - 1 <= n <= 100 - 1 <= a[i], b[i] <= 10^5","solution":"def maximize_min_sum(t, test_cases): results = [] for case in test_cases: n, a, b = case a, b = sorted(a), sorted(b) minimal_sum = sum(min(a[i], b[i]) for i in range(n)) results.append(minimal_sum) return results def parse_input(raw_input): data = raw_input.strip().split(\'n\') t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n = int(data[index]) a = list(map(int, data[index + 1].split())) b = list(map(int, data[index + 2].split())) test_cases.append((n, a, b)) index += 3 return t, test_cases"},{"question":"Given a sequence of integers representing a magic spell, an arcane filter is applied to transform this sequence. The filter operates based on the following rules: - For every even index (i) (0-based index) in the sequence, the value at that index is doubled. - For every odd index (i), the value at that index is halved (integer division). You need to write a program that applies the filter to a given sequence and outputs the transformed sequence. The first line contains a single integer (n) ((1 leq n leq 1000)) — the length of the sequence. The second line contains (n) integers (a_0, a_1, ldots, a_{n-1}) ((1 leq a_i leq 10^6)) — the elements of the sequence. Output a single line containing the (n) transformed integers. # Example Input ``` 5 3 8 6 7 2 ``` Output ``` 6 4 12 3 4 ``` Explanation - For index 0: 3 is doubled to 6. - For index 1: 8 is halved to 4. - For index 2: 6 is doubled to 12. - For index 3: 7 is halved to 3. - For index 4: 2 is doubled to 4. The resulting sequence is [6, 4, 12, 3, 4].","solution":"def transform_sequence(n, sequence): Transforms a sequence based on given rules: - Elements at even indices are doubled. - Elements at odd indices are halved (integer division). :param n: Length of the sequence :param sequence: List of integers :return: Transformed list of integers transformed = [] for i in range(n): if i % 2 == 0: transformed.append(sequence[i] * 2) else: transformed.append(sequence[i] // 2) return transformed"},{"question":"Wojtek has been learning about cryptography and is intrigued by the concept of hashing. He recently read about string hashing and wants to experiment with it. Specifically, Wojtek wants to find the number of distinct substrings of a given string based on their hash values. He will use a simple polynomial rolling hash function. Given a string s of length n, compute the number of distinct substrings of s using the following polynomial rolling hash function for any substring s[l...r]: hash(s[l...r]) = s[l] * p^{0} + s[l+1] * p^{1} + ... + s[r] * p^{r-l} , text{mod} , m Where: - p is a prime number (we can use 31). - m is a large prime number (we can use 10^9 + 9). - The characters of the string are treated as integers from 1 to 26 corresponding to the letters \'a\' to \'z\'. Your task is to implement a function to calculate the number of distinct substrings of a given string based on the hash values. **Input** - A single string s of lowercase English letters with a length n (1 leq n leq 2000). **Output** - Output the number of distinct substrings of s. **Example** ``` Input: abcd Output: 10 ``` **Note** For the string `abcd`, the distinct substrings are: `a, b, c, d, ab, bc, cd, abc, bcd, abcd`.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the string s based on their hash values. n = len(s) p = 31 m = 10**9 + 9 hash_set = set() for i in range(n): current_hash = 0 p_pow = 1 for j in range(i, n): current_hash = (current_hash + (ord(s[j]) - ord(\'a\') + 1) * p_pow) % m p_pow = (p_pow * p) % m hash_set.add(current_hash) return len(hash_set)"},{"question":"You are given a grid of size n x m consisting of \'.\' (empty spaces) and \'*\' (obstacles). You need to find the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner (n-1,m-1), moving either horizontally or vertically, but not diagonally. However, there is a special constraint: each empty space \'.\' you pass through will turn into an obstacle \'*\' for subsequent paths. Thus, once an empty space has been passed through, it becomes impassable. If it is not possible to reach the destination, return -1. The input contains multiple test cases. The first line contains an integer T (1 <= T <= 10^4), the number of test cases. Each test case starts with two integers n and m (1 <= n, m <= 100), the dimensions of the grid. Each of the next n lines contains a string of length m representing the grid. For each test case, print a single integer — the length of the shortest path from (0,0) to (n-1,m-1) respecting the given constraint, or -1 if there is no such path. Example: Input: 2 5 5 ..... .***. ..... .***. ..... 3 3 .*. *.* .*. Output: 8 -1 Explanation: In the first test case, one possible path is (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4), with a total length of 8. In the second test case, there is no possible path as all routes are blocked by obstacles.","solution":"from collections import deque def shortest_path_with_constraints(grid): n, m = len(grid), len(grid[0]) if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) grid[0][0] = \'*\' while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': grid[nx][ny] = \'*\' queue.append((nx, ny, dist + 1)) return -1 def multiple_test_cases(T, cases): results = [] for case in cases: n, m, grid = case results.append(shortest_path_with_constraints(grid)) return results"},{"question":"The city of HyperMathia has an advanced scientific community. Researchers often need to perform complex mathematical operations on sequences of numbers. You are tasked with assisting them by implementing a function to perform a special transformation on given sequences. Given a sequence of integers, the transformation involves the following steps: 1. Find the smallest integer in the sequence. 2. Reverse the segment of the sequence from the start up to and including the position of the smallest integer. 3. Remove the first occurrence of the smallest integer from the sequence and append it to the end of the resulting sequence. For example, suppose you are given the sequence [5, 3, 8, 1, 4, 2]. The smallest integer is 1. First, reverse the segment [5, 3, 8, 1] to obtain [1, 8, 3, 5]. Then, remove the first occurrence of 1 and append it to the end, resulting in [8, 3, 5, 4, 2, 1]. Implement a function to perform this transformation. You should be able to process multiple sequences in a row. The function should accept the following input format: The first line contains an integer `t`, the number of sequences. The following `t` lines each describe a sequence. Each sequence is prefixed with an integer `n`, the length of the sequence, followed by `n` integers representing the sequence itself. Output the transformed sequences, each on a new line. # Input The first line contains an integer `t` (`1 ≤ t ≤ 10^5`), the number of sequences. Each of the following `t` lines contains an integer `n` (`1 ≤ n ≤ 10^5`), the length of the sequence, followed by `n` integers representing the sequence. It is guaranteed that the sum of all `n` values across all sequences does not exceed `10^6`. # Output Output `t` lines. Each line contains a sequence of integers representing the transformed sequence. # Example Input ``` 2 6 5 3 8 1 4 2 4 7 2 6 3 ``` Output ``` 8 3 5 4 2 1 7 6 3 2 ```","solution":"def transform_sequence(sequence): Transforms a given sequence according to the specified rules. 1. Find the smallest integer in the sequence. 2. Reverse the segment of the sequence from the start up to and including the position of the smallest integer. 3. Remove the first occurrence of the smallest integer from the sequence and append it to the end of the sequence. Args: - sequence (list): The input sequence of integers. Returns: - list: The transformed sequence. if not sequence: return sequence # Step 1: Find the smallest integer min_value = min(sequence) min_index = sequence.index(min_value) # Step 2: Reverse the segment up to and including the smallest integer reversed_segment = sequence[:min_index + 1][::-1] # Step 3: Remove the first occurrence of the smallest integer (which is now at the beginning) transformed_sequence = reversed_segment[1:] + sequence[min_index + 1:] + [min_value] return transformed_sequence def process_sequences(input_list): Processes multiple sequences and applies the transformation to each one. Args: - input_list (list): Input list containing number of sequences and sequences themselves. Returns: - list: List of transformed sequences. t = input_list[0] result = [] index = 1 for _ in range(t): n = input_list[index] sequence = input_list[index + 1: index + 1 + n] transformed_sequence = transform_sequence(sequence) result.append(\\" \\".join(map(str, transformed_sequence))) index += (n + 1) return result"},{"question":"Santa Claus is preparing for his annual trip around the world, and he needs help with organizing the sleigh. Santa has n different presents, each with a unique weight and a respective value. Santa wants to pack the presents in such a way that the total weight does not exceed a maximum limit W, aiming to maximize the total value of the presents. You are given n presents, where each present i has a weight wi and a value vi. Determine the maximum value that Santa can achieve without exceeding the weight limit W. The first line contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10^5) — the number of presents and the maximum weight allowed on the sleigh. Each of the next n lines contains two integers wi and vi (1 ≤ wi ≤ W, 1 ≤ vi ≤ 10^6) — the weight and value of the i-th present. Output the maximum total value that Santa can achieve. Example: Input: 4 10 4 10 5 40 6 30 3 50 Output: 90 Explanation: Santa can select the presents with weights and values (4, 10), (5, 40) and (3, 50) which makes a total weight of 9 and a total value of 10 + 40 + 50 = 100.","solution":"def max_present_value(n, W, presents): Determines the maximum value of presents that can be carried without exceeding the weight limit. Parameters: n (int): Number of presents. W (int): Maximum weight capacity. presents (list of tuples): List of tuples where each tuple is (weight, value) of a present. Returns: int: Maximum value that can be carried without exceeding the weight limit. dp = [0] * (W + 1) for weight, value in presents: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return max(dp) # Example usage: # n = 4 # W = 10 # presents = [(4, 10), (5, 40), (6, 30), (3, 50)] # print(max_present_value(n, W, presents)) # Output: 90"},{"question":"In a faraway kingdom, there is a rectangular farm divided into a grid of M rows and N columns. Each cell in the grid either contains a crop or is empty. Farmers want to build the largest possible rectangular structure on the farm without disturbing any crops. You are appointed to determine the maximum area of such a structure. The grid will be represented as an M x N matrix of integers where each cell can either be a 0 or a 1. A cell with 0 represents an empty plot, and a cell with 1 represents a plot with crops. Your task is to find the largest rectangle containing only 0\'s. The first input line contains two integers, M and N (1 ≤ M, N ≤ 1000), which are the dimensions of the grid. Each of the next M lines contains N integers (either 0 or 1), representing the grid. Output a single integer, which is the area of the largest rectangle that can be formed containing only 0\'s. # Example Input ``` 4 5 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 ``` Output ``` 6 ``` Explanation The largest rectangle of empty plots (0\'s) in the example grid has an area of 6 (3 rows by 2 columns).","solution":"def maximal_rectangle(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) # Transform the input matrix to a heights matrix heights = [0] * n max_area = 0 for i in range(m): for j in range(n): if matrix[i][j] == 0: heights[j] += 1 else: heights[j] = 0 # Calculate the maximum area for each row of heights max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"Consider a grid of size n x m where each cell is either blocked or accessible. A robot is placed at cell (0, 0) (top-left corner) and needs to reach the cell (n-1, m-1) (bottom-right corner). The robot can move to the right, down, left, or up one cell at a time, but it cannot move onto or over blocked cells. The robot has a limited battery power of k moves. Your task is to determine if the robot can reach the destination using k or fewer moves. The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The second line contains an integer k (1 ≤ k ≤ 10000) — the maximum number of moves the robot can make. The next n lines contain m characters each, where \'0\' represents an accessible cell and \'1\' represents a blocked cell. For each test case, output \\"YES\\" if the robot can reach the destination with k or fewer moves, and \\"NO\\" otherwise. Example input: ``` 2 3 3 5 000 010 000 3 3 3 000 011 000 ``` Example output: ``` YES NO ```","solution":"from collections import deque def can_reach_destination(grid, n, m, k): Determines if the robot can reach the bottom-right corner of the grid within k moves. if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False]*m for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, moves) visited[0][0] = True while queue: x, y, moves = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" if moves <= k else \\"NO\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'0\': visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return \\"NO\\" def solve(test_cases): results = [] for n, m, k, grid in test_cases: results.append(can_reach_destination(grid, n, m, k)) return results"},{"question":"Farmer John\'s cows have been acting strange lately. They have been communicating by forming a sequence of sounds represented by lowercase Latin letters. Farmer John has a special device that captures these sequences and translates them into strings, but the device has a small problem – it can\'t handle repeated sequences of three identical consecutive sounds. If there are three or more identical consecutive sounds in the sequence, the device erroneously continues to loop the sequence forever. To fix this, Farmer John needs to prevent this from happening by either removing certain sounds from the string or breaking the sequence with different sounds. Given a sequence of sounds, write a program that determines the minimum number of characters that need to be removed so that there are no three consecutive identical sounds left in the sequence. **Input** The first line contains an integer n (1 ≤ n ≤ 100), the length of the sequence. The second line contains a string of length n consisting of lowercase Latin letters only – the sequence of sounds. **Output** Print the minimum number of characters to remove from the sequence so that there are no three consecutive identical sounds left. **Example** Input: ``` 6 aaabbb ``` Output: ``` 2 ``` **Explanation**: By removing one \'a\' and one \'b\', the sequence \\"aaabbb\\" can be turned into \\"aabbb\\" or \\"aaabb\\", both of which no longer contain three consecutive identical sounds.","solution":"def min_removals(n, sequence): Determine the minimum number of characters to remove so that there are no three consecutive identical sounds left in the sequence. :param n: Length of the sequence (1 ≤ n ≤ 100). :param sequence: The sequence of sounds as a string. :return: Minimum number of characters to remove. removals = 0 i = 0 while i < n - 2: if sequence[i] == sequence[i+1] == sequence[i+2]: removals += 1 i += 1 else: i += 1 return removals"},{"question":"You are given a sequence of integers containing both positive and negative numbers. Your task is to find the maximum sum of any contiguous subarray of this sequence. The problem is known as the contiguous subarray sum problem or maximum subarray sum problem. The first line contains a single integer n (1 le n le 2 cdot 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the sequence. Print a single integer — the maximum sum of a contiguous subarray of the given sequence. In the first example, the maximum sum of a contiguous subarray is 6. It is obtained from the subarray [4, -1, 2, 1]. In the second example, the maximum sum of a contiguous subarray is 1. It is obtained from the subarray [1]. In the third example, all elements are negative. The maximum sum is -1, obtained from the subarray [-1].","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray of nums. Args: nums (list of int): List of integers Returns: int: Maximum sum of any contiguous subarray max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Sherlock Holmes is working on a new case involving a secret message that is hidden within a grid. The message is encoded using a grid of characters, where each cell contains a single lowercase letter (\'a\' to \'z\') and some cells are empty (\'.\'). To decode the message, Sherlock needs to identify the longest contiguous path (in terms of characters\' ASCII values) that spells a word in a famous dictionary. Two cells are considered adjacent if they share a side (horizontally or vertically). Help Sherlock by determining the length of the longest contiguous path of characters that forms a valid dictionary word. The first line contains two integers n and m (1 le n, m le 1000), the dimensions of the grid. Each of the next n lines contains m characters (lowercase letters or \'.\'). The last line contains an integer d (1 le d le 10^5), followed by d words, each word consisting of only lowercase letters (\'a\' to \'z\') and having a length of at most 10. Output a single integer, the length of longest word from the dictionary that can be formed by following a path in the grid. If no word can be formed, output 0. In the sample testcase, we are given a grid with characters and a set of words from which we need to find the longest word that can be formed by moving through adjacent cells. For example, in the grid: ``` a . t . h e l p . e . r ``` With the dictionary `[\\"help\\", \\"ale\\", \\"her\\", \\"tap\\"]`, the longest word that can be formed by following adjacent cells is \\"help\\" which has a length of 4. Thus, the output should be 4.","solution":"def find_longest_word_path(grid, dictionary): n = len(grid) m = len(grid[0]) # Set of words for quick lookup word_set = set(dictionary) # Set of all prefix to quickly check if a prefix exists in dictionary prefix_set = {word[:i] for word in dictionary for i in range(1, len(word) + 1)} # Directions for exploring all four adjacent cells (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(r, c, current_word): if grid[r][c] == \\".\\": return current_word += grid[r][c] if current_word not in prefix_set: return # Mark the current cell as visited by replacing it with \'.\' tmp, grid[r][c] = grid[r][c], \'.\' if current_word in word_set: longest_word[0] = max(longest_word[0], len(current_word)) # Explore all four directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m: dfs(nr, nc, current_word) # Restore the cell grid[r][c] = tmp longest_word = [0] for i in range(n): for j in range(m): if grid[i][j] != \\".\\": dfs(i, j, \\"\\") return longest_word[0] # Driver function to process input and call find_longest_word_path def longest_word_in_grid(n, m, grid, d, dictionary): return find_longest_word_path(grid, dictionary)"},{"question":"In a faraway kingdom, there are 1 to n rooms arranged in a row, each with a treasure chest that contains some amount of gold. Unfortunately, the kingdom is under siege, and you must evacuate as many treasures as possible. However, you cannot carry treasures from two consecutive rooms to avoid being caught by the invaders. You are given the number n which represents the number of rooms, and an array of integers where each integer represents the amount of gold in each room. Determine the maximum amount of gold you can collect without taking gold from two consecutive rooms. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of rooms. The second line contains n integers g1, g2, ..., gn (0 ≤ gi ≤ 1000) — the amount of gold in each room. Print a single integer — the maximum amount of gold that can be collected by following the rules. **Example:** Input: 4 5 1 2 10 Output: 15 Explanation: You can take gold from room 1 and room 4. Alternatively, you could take gold from room 1 and room 3. The maximum amount is 15.","solution":"def max_gold(n, gold): if n == 0: return 0 elif n == 1: return gold[0] # Create an array to store the maximum gold collectable up to each room dp = [0] * n dp[0] = gold[0] dp[1] = max(gold[0], gold[1]) # Fill the dp array using the given rules for i in range(2, n): dp[i] = max(dp[i-1], gold[i] + dp[i-2]) # The last element in dp will have the maximum gold collectable return dp[-1] # Example usage # n = 4 # gold = [5, 1, 2, 10] # print(max_gold(n, gold)) # Output should be 15"},{"question":"In a large programming conference, there is a unique system to manage permission tags for the attendees. Each attendee is issued a set of permission tags that dictate which sections of the conference they can access. These tags are assigned based on the roles, interests, and sessions the attendee is registered for. Each permission tag is represented by an integer from 1 to 100. After the conference is over, the organizer wants to determine the minimum number of permission tags that could have been assigned to attendees given the permissions left uncollected. Your task is to figure out the minimum number of issued tags, knowing which tags were not collected. The first line of the input contains two integers, t and m (1 ≤ t ≤ 100, 1 ≤ m ≤ 100) — the number of permission tags left uncollected and the number of attendees respectively. The next line contains t integers u1, u2, ..., ut (1 ≤ ui ≤ 100) — the types of the tags left uncollected. Equal values stand for identical tags while different values stand for different permission tags. Output a single integer — the minimum number of distinct tags that must have been assigned to attendees ensuring that the left tags match the given list. **Example:** *Input:* ``` 5 3 1 2 2 3 4 ``` *Output:* ``` 3 ``` *Explanation:* In the conference, the organizer can ensure that each attendee received a minimum of 3 different tags when the left tags configuration is (1, 2, 2, 3, 4). The possible assignment can be: - Attendee 1: Tags 1, 2, 3 - Attendee 2: Tags 2, 4 - Attendee 3: Tags 2, 4 This way, the uncollected tags (1, 2, 2, 3, 4) can be ensured to be from the assigned sets. Ensure to find the minimum number of tags assigned to attendees that result in the given leftover.","solution":"def min_number_of_tags(t, m, tags): Given the number of uncollected tags and the number of attendees, determine the minimum number of distinct tags that must have been assigned to attendees Args: t (int): Number of uncollected tags m (int): Number of attendees tags (list): List of uncollected tags (integers) Returns: int: Minimum number of distinct tags that must have been assigned # Convert the list of uncollected tags to a set to get unique tags unique_tags = set(tags) # The minimum number of tags that had to be assigned is equal to the number of unique tags left uncollected return len(unique_tags)"},{"question":"You are given a binary matrix of size n times n. Your task is to transform this matrix into a matrix with properties such that each row and each column have an even number of 1s. If it is possible to transform the given matrix to meet the conditions, print \\"YES\\" and then the resulting matrix. If it is not possible, print \\"NO\\". The first line of the input contains a single integer n (1 leq n leq 1000) — the size of the matrix. Each of the next n lines contains a string of length n, consisting of characters \'0\' and \'1\', representing the initial matrix. If there are multiple possible resulting matrices, print any of them. Print \\"YES\\" or \\"NO\\" depending on whether it\'s possible to achieve the condition, followed by the matrix if the answer is \\"YES\\". **Example** _Input_ ``` 3 101 010 100 ``` _Output_ ``` YES 100 001 010 ``` **Explanation** The initial matrix: ``` 101 010 100 ``` can be transformed into: ``` 100 001 010 ``` where each row and each column contain an even number of 1s.","solution":"def transform_matrix(matrix): Transforms a given binary matrix such that each row and each column have an even number of 1s, if possible. If not possible, returns \\"NO\\". Parameters: matrix (list of list of int): The binary matrix to transform. Returns: tuple: (\\"YES\\", transformed_matrix) if possible, else (\\"NO\\",). n = len(matrix) # Count number of 1s in each row and column row_count = [0] * n col_count = [0] * n for i in range(n): for j in range(n): if matrix[i][j] == 1: row_count[i] += 1 col_count[j] += 1 # Check if current configuration can be made to follow the needed criteria odd_rows = [i for i in range(n) if row_count[i] % 2 == 1] odd_cols = [j for j in range(n) if col_count[j] % 2 == 1] if len(odd_rows) % 2 == 1 or len(odd_cols) % 2 == 1: return \\"NO\\", # If both odd_rows and odd_cols have even length, we can always swap to fix them for i in range(0, len(odd_rows), 2): r1, r2 = odd_rows[i], odd_rows[i + 1] c1, c2 = odd_cols[i], odd_cols[i + 1] matrix[r1][c1] = 1 - matrix[r1][c1] matrix[r2][c2] = 1 - matrix[r2][c2] return \\"YES\\", matrix # Example of input parsing and function calling def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) matrix = [[int(x) for x in data[i + 1]] for i in range(n)] result = transform_matrix(matrix) if result[0] == \\"NO\\": print(\\"NO\\") else: print(\\"YES\\") for row in result[1]: print(\\"\\".join(map(str, row))) # When running as a script, the main function will be executed if __name__ == \\"__main__\\": main()"},{"question":"Amy is an office manager and is responsible for assigning tasks to her team members. She has a list of tasks that need to be completed by the end of the week. Each task has a priority level, represented by an integer. Higher integers represent higher priority tasks. Amy wants to distribute the tasks in such a way that each team member gets the tasks in decreasing order of priority for better efficiency. However, there is a new office policy that mandates that no single team member should have tasks with an average priority level more than twice the average priority level of tasks assigned to any other team member. Amy needs to find out if it is possible to distribute the tasks such that this policy is not violated. The first line of the input contains an integer n (1 ≤ n ≤ 100), representing the number of team members. The second line contains an integer m (1 ≤ m ≤ 1000), representing the number of tasks. The next line contains m integers, t1, t2, ..., tm (1 ≤ ti ≤ 100), representing the priority levels of the tasks. Output \\"YES\\" if it is possible to distribute the tasks without violating the new office policy and \\"NO\\" otherwise. For example, consider three team members, five tasks, and the following priority levels of the tasks: [6, 3, 8, 1, 5]. It is possible to distribute the tasks as follows: - Team member 1: [8] - Team member 2: [6, 1] - Team member 3: [5, 3] Thus, the answer in this case would be \\"YES\\". For other sequences, the distribution may not be compliant with the policy, leading to the answer \\"NO\\".","solution":"def can_distribute_tasks(n, m, tasks): Determines if it\'s possible to distribute tasks such that no single team member has tasks with an average priority level more than twice the average priority level of tasks assigned to any other team member. Parameters: n (int): number of team members m (int): number of tasks tasks (list): list of task priorities Returns: str: \\"YES\\" if it\'s possible to distribute the tasks without violating the policy, \\"NO\\" otherwise tasks.sort(reverse=True) team_loads = [0] * n for task in tasks: team_loads[0] += task team_loads.sort() if team_loads[0] * 2 >= team_loads[-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Antoine loves playing with strings, and he recently came across a fun problem. He wants to create a new string by performing a series of operations on an initial string. The operations can be of three types: 1. Insert a character \'c\' at position \'p\'. 2. Delete the character at position \'p\'. 3. Report the total number of distinct characters in the current string. The initial string is empty. Your task is to help Antoine by performing the operations efficiently and reporting the results for type-3 operations. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of operations. The next n lines describe the operations, each having one of the following formats: - \\"1 p c\\" where 1 is the operation type, p (1 ≤ p ≤ length of the string + 1) is the position to insert character \'c\' (a lowercase Latin letter). - \\"2 p\\" where 2 is the operation type and p (1 ≤ p ≤ length of the string) is the position of the character to delete. - \\"3\\" where 3 is the operation type. It is guaranteed that the operations are valid (e.g., no deleting from an empty string or out-of-bound positions). Output a single integer for each type-3 operation, representing the total number of distinct characters in the current string at that point. # Example Input ``` 5 1 1 a 1 2 b 3 2 1 3 ``` Output ``` 2 1 ```","solution":"def perform_operations(operations): from collections import Counter current_string = [] result = [] char_count = Counter() distinct_chars = 0 for op in operations: if op[0] == 1: p, c = op[1]-1, op[2] current_string.insert(p, c) char_count[c] += 1 if char_count[c] == 1: distinct_chars += 1 elif op[0] == 2: p = op[1]-1 c = current_string.pop(p) char_count[c] -= 1 if char_count[c] == 0: distinct_chars -= 1 elif op[0] == 3: result.append(distinct_chars) return result"},{"question":"You are given an array of integers. Your task is to divide this array into two non-empty subarrays such that the difference between the sum of elements in the first subarray and the sum of elements in the second subarray is minimized. Return the minimum difference. For example, let\'s say you are given the array `[1, 6, 11, 5]`. You can split it into `[1, 6]` and `[11, 5]` which gives the difference `abs((1 + 6) - (11 + 5)) = abs(7 - 16) = 9`, or you can split it into `[1, 5]` and `[6, 11]` which gives the difference `abs((1 + 5) - (6 + 11)) = abs(6 - 17) = 11`. The optimal split is `[1, 6, 5]` and `[11]` with a difference `abs((1 + 6 + 5) - 11) = abs(12 - 11) = 1`. So the output is `1`. The first line contains a single integer `n` (2 ≤ n ≤ 100) — the length of the array. The second line contains `n` integers separated by spaces — the elements of the array. The elements are between `-1000` and `1000` inclusive. Output a single integer — the minimal difference achievable. **Example:** Input: ``` 4 1 6 11 5 ``` Output: ``` 1 ```","solution":"def min_difference(arr): Returns the minimum difference achievable by dividing the array into two non-empty subarrays. :param arr: List[int] - list of integers :return: int - the minimal difference from itertools import combinations total_sum = sum(arr) n = len(arr) min_diff = float(\'inf\') # Iterate over all possible ways to split the array into two non-empty parts for i in range(1, n): for comb in combinations(arr, i): part_sum = sum(comb) diff = abs(total_sum - 2 * part_sum) min_diff = min(min_diff, diff) return min_diff"},{"question":"You are managing a factory that works 24/7. The factory workers have various shift schedules, and each worker can only work a certain number of hours consecutively. The factory\'s goal is to ensure that there are enough workers on each shift to accomplish the necessary tasks. You are given n workers, each with a maximum consecutive working hour limit hi, and the number of hours t that needs to be broken down into shifts. Each shift can last a maximum of 8 hours. Your task is to determine whether it is possible to schedule all the shifts within the given hours t, ensuring that no worker works more than their maximum consecutive working hours. You must also ensure that each shift has at least one worker. The first line contains two integers n (1 ≤ n ≤ 1000) and t (1 ≤ t ≤ 1000) — the number of workers and the number of hours, respectively. The second line contains n space-separated integers hi (1 ≤ hi ≤ 8) — the maximum consecutive working hours for each worker. Print \\"Yes\\" if it is possible to schedule all shifts within the given constraints, otherwise print \\"No.\\" Example: Input: 3 24 4 5 6 Output: Yes Explanation: The shifts could be scheduled as follows: - Worker 1 works for 4 hours - Worker 2 works for 5 hours - Worker 3 works for 6 hours - Worker 1 works for 4 hours - Worker 2 works for 5 hours","solution":"def can_schedule_shifts(n, t, hours): Determines if it is possible to schedule all shifts within the given hours t, considering the maximum consecutive working hours for each worker. Parameters: n (int): The number of workers t (int): The number of hours to cover hours (list of int): A list of maximum consecutive working hours for each worker Returns: str: \\"Yes\\" if it is possible to schedule all shifts, otherwise \\"No\\" shifts = max((t + 7) // 8, 1) # Calculate how many shifts are needed, each up to 8 hours long for _ in range(shifts): hours.sort(reverse=True) # Sort workers by their max consecutive working hours if hours[0] == 0: return \\"No\\" # If the worker with the highest available hours can\'t work, return No hours[0] -= min(hours[0], 8) # Assign the maximum possible hours for the largest shift return \\"Yes\\" # Input: # 3 workers, 24 hours to cover # Worker 1: max 4 consecutive hours # Worker 2: max 5 consecutive hours # Worker 3: max 6 consecutive hours # should return \\"Yes\\""},{"question":"Given an undirected graph with `n` nodes and initially no edges, you need to perform `q` operations. The operations can be of two types: 1. Add an edge between node `u` and node `v` with weight `w`. 2. Find the shortest path from node `x` to node `y`. The input format is as follows: - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `q` (1 ≤ q ≤ 2000) - the number of nodes and the number of operations. - The following `q` lines contain the operations, which can be either: - \\"1 u v w\\" - meaning add an edge between node `u` and node `v` with weight `w`. - \\"2 x y\\" - meaning output the shortest path from node `x` to node `y`. For each query of type 2, output the length of the shortest path. If there is no path between `x` and `y`, output -1. Example input: ``` 5 6 1 1 2 4 1 2 3 1 1 4 5 3 2 1 3 1 1 3 2 2 1 3 ``` Example output: ``` 5 2 ``` Explanation: - In the first query of type 2, the shortest path from node 1 to node 3 is through node 2 with weights 4 + 1 = 5. - After adding a direct edge between nodes 1 and 3 with weight 2, the shortest path from node 1 to node 3 is now 2.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra\'s algorithm to find the shortest paths from start node to all other nodes. :param graph: A dictionary where keys are node numbers and values are lists of tuples (neighbor, weight) :param start: The starting node for Dijkstra\'s algorithm. :return: A dictionary of shortest path distances from start node to each other node. distances = {node: float(\'infinity\') for node in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def process_operations(n, operations): Processes the operations on the graph. :param n: Number of nodes. :param operations: List of operations to be performed. :return: List of results for each type 2 operation. graph = {i: [] for i in range(1, n+1)} results = [] for operation in operations: if operation[0] == 1: _, u, v, w = operation graph[u].append((v, w)) graph[v].append((u, w)) elif operation[0] == 2: _, x, y = operation distances = dijkstra(graph, x) result = distances[y] if distances[y] != float(\'infinity\') else -1 results.append(result) return results"},{"question":"Harry, Ron, and Hermione have stumbled upon an ancient puzzle inside the Chamber of Secrets. The puzzle consists of jumbled words, and their task is to decipher the least possible string obtained by merging them. To solve the puzzle, they have to arrange the given words in a sequence such that the concatenated result is lexicographically smallest. The task is to find the lexicographically smallest string that can be formed by concatenating the given words in some order. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of words. - The next n lines contain one word each. Each word is composed of lowercase English letters and has a length of at most 100. # Output - Print the lexicographically smallest string obtained by concatenating the given words in some order. # Example Input ``` 3 cat bat rat ``` Output ``` batcatrat ``` # Note In the example provided above, the words \\"cat\\", \\"bat\\", and \\"rat\\" can be arranged in the order \\"bat\\", \\"cat\\", and \\"rat\\" to form the smallest possible concatenated string \\"batcatrat\\".","solution":"def lexicographically_smallest_string(words): Returns the lexicographically smallest string that can be formed by concatenating the given words. words.sort() return \'\'.join(words)"},{"question":"You are given an array of n integers a[1], a[2], ..., a[n]. Your task is to execute a given set of p operations on this array. Each operation is described by three integers li, ri, and d, which means that all numbers within the subarray a[li], a[li+1], ..., a[ri] should be increased by d. After performing all the operations, you are to output the updated array. The first line contains two integers n and p (1 ≤ n, p ≤ 100,000) — the size of the array and the number of operations. The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 1,000,000,000) — the initial elements of the array. The next p lines describe the operations. Each operation is given by three integers li, ri, and d (1 ≤ li ≤ ri ≤ n, 1 ≤ d ≤ 1,000,000). You need to print n integers in a single line, the updated array after all the operations. # Example Input ``` 5 3 1 2 3 4 5 1 3 1 2 5 2 3 4 -1 ``` Output ``` 2 5 5 5 7 ``` # Explanation - After the first operation, the array becomes [2, 3, 4, 4, 5]. - After the second operation, the array becomes [2, 5, 6, 6, 7]. - After the third operation, the array becomes [2, 5, 5, 5, 7]. Consider using an efficient approach to handle the large constraints.","solution":"def update_array(n, p, array, operations): Update the array based on the list of operations. Parameters: n (int): Size of the array. p (int): Number of operations. array (list): The initial elements of the array. operations (list): List of operations, each being a tuple (li, ri, d). Returns: list: The updated array after applying all operations. # Create an auxiliary array to keep track of the increments increments = [0] * (n + 1) # Add the increments based on the operations for li, ri, d in operations: increments[li - 1] += d if ri < n: increments[ri] -= d # Apply the increments to get the final updated array current_increment = 0 for i in range(n): current_increment += increments[i] array[i] += current_increment return array"},{"question":"Bob was fascinated by the concept of \\"palindromes\\" and decided to create a new game around it. A palindrome is a string that reads the same forward and backward. For instance, \\"madam\\" and \\"racecar\\" are palindromes, while \\"hello\\" is not. Bob\'s game involves finding the longest palindromic substring within a given string. A substring is a contiguous sequence of characters within a string. For example, the longest palindromic substring of \\"babad\\" is \\"bab\\" or \\"aba\\" (both are valid). Bob needs your help to solve this problem efficiently. You are given a string s of length n (1 ≤ n ≤ 10^5) consisting of lowercase English letters. Your task is to determine the longest palindromic substring in s. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5). Output Print the longest palindromic substring of s. If there are multiple solutions, you may print any of them. Examples Input: babad Output: bab (Note: \\"aba\\" is also a valid output) Input: cbbd Output: bb","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in a given string. :param s: A string in which the longest palindromic substring is to be found :return: The longest palindromic substring n = len(s) # Base case: if the string is empty or has only one character if n < 2: return s # Helper function to expand around the center and find the longest palindrome def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return (left + 1, right) start, end = 0, 0 for i in range(n): l1, r1 = expand_around_center(i, i) l2, r2 = expand_around_center(i, i + 1) if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end]"},{"question":"Varun is passionate about video editing. He has been assigned the task of merging several video clips into a single video. Each clip has a specific length in seconds. Varun has some constraints in merging the clips as every time he merges two clips his computer takes a certain amount of time proportional to the sum of the lengths of the two clips. Varun wants to minimize the total time spent merging all video clips together into one single video clip by leveraging a minimum-heap data structure to help him with this task. Given n video clips, your goal is to determine the minimum total merging time required. The first line of input contains an integer n (2 ≤ n ≤ 100,000) — the number of video clips. The next line contains n integers li (1 ≤ li ≤ 10^6) — the lengths of the video clips in seconds. Output a single integer representing the minimum total merging time. **Example:** **Input:** ``` 4 4 3 2 6 ``` **Output:** ``` 29 ``` **Explanation:** First, merge clips with lengths 2 and 3. Time spent will be 5. Next, merge the resulting clip of length 5 with clip of length 4. Time spent will be 9. Next, merge the resulting clip of length 9 with clip of length 6. Time spent will be 15. Thus, the total minimum merging time is 5 + 9 + 15 = 29 seconds.","solution":"import heapq def minimum_merging_time(n, lengths): Returns the minimum total merging time required to merge all video clips. :param n: int - The number of video clips. :param lengths: list of int - The lengths of the video clips. :return: int - The minimum total merging time. heapq.heapify(lengths) total_time = 0 while len(lengths) > 1: first = heapq.heappop(lengths) second = heapq.heappop(lengths) merge_time = first + second total_time += merge_time heapq.heappush(lengths, merge_time) return total_time # Example usage: # n = 4 # lengths = [4, 3, 2, 6] # print(minimum_merging_time(n, lengths)) # Output: 29"},{"question":"Ella is an aspiring chef who loves to experiment with different dishes. Recently, she decided to organize her cooking notes by categorizing various ingredients into two primary categories: Vegetables and Meats. Ella has a long list of ingredients, and she wants to quickly sort each ingredient into its respective category. However, she doesn\'t want to make any mistakes while sorting as she plans to use the categorized list for her upcoming cooking show. You are given a list of words, where each word represents an ingredient. Your task is to write a program that sorts the ingredients into two categories: Vegetables and Meats. The following rules apply for sorting: 1. If the word starts with a vowel (a, e, i, o, u, both upper and lower case), it is classified as a Vegetable. 2. If the word starts with a consonant (any other letter), it is classified as a Meat. The only line of input contains a non-empty string of words separated by spaces. Each word consists of alphabetic characters only, and the length of the string does not exceed 1000 characters. Print two lines: - The first line contains words classified as Vegetables in their original order, separated by spaces. - The second line contains words classified as Meats in their original order, separated by spaces. # Example: **Input:** apple beef orange chicken eggplant pear pork **Output:** apple orange eggplant beef chicken pear pork **Explanation:** The words \\"apple\\", \\"orange\\", and \\"eggplant\\" start with vowels and are classified as Vegetables in the order they appear. The words \\"beef\\", \\"chicken\\", \\"pear\\", and \\"pork\\" start with consonants and are classified as Meats in the order they appear.","solution":"def categorize_ingredients(ingredients): vowels = set(\'aeiouAEIOU\') veggies = [] meats = [] words = ingredients.split() for word in words: if word[0] in vowels: veggies.append(word) else: meats.append(word) return \\" \\".join(veggies), \\" \\".join(meats)"},{"question":"Polycarp loves trees. He has n cities connected by n-1 roads forming a tree structure. Each road between the cities has a certain amount of traffic load. Polycarp wants to carry out a traffic assessment on specific paths within the tree. He will ask you to provide the highest traffic load on a path between two specific cities multiple times. The first line of the input contains an integer n (2 ≤ n ≤ 200,000) — the number of cities. Each of the next n-1 lines describes a road by three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — the numbers of cities connected by this road and the traffic load on the road, respectively. It is guaranteed that these roads form a tree. The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. The next q lines each describe a query by two integers a_i and b_i (1 ≤ a_i, b_i ≤ n) — the cities between which Polycarp wants to assess the highest traffic load in the given path. For each query, print a single integer — the highest traffic load on the path between the two cities. Example: ``` Input: 6 1 2 3 1 3 5 2 4 1 2 5 4 3 6 2 3 3 5 4 6 1 4 Output: 5 5 3 ``` Explanation: - The path from city 3 to city 5 goes through cities 1 and 2 with loads 5 and 4 respectively, so the highest load is 5. - The path from city 4 to city 6 goes through cities 2 and 1 with loads 1, 3, and 5 respectively, so the highest load is 5. - The path from city 1 to city 4 goes through city 2 with load 3, so the highest load is 3.","solution":"from collections import defaultdict, deque from typing import List, Tuple class TreeTraffic: def __init__(self, n: int, edges: List[Tuple[int, int, int]]): self.n = n self.graph = defaultdict(list) self.parent = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.max_load = [[0] * (n + 1) for _ in range(20)] self.up = [[-1] * (n + 1) for _ in range(20)] for u, v, w in edges: self.graph[u].append((v, w)) self.graph[v].append((u, w)) self.__preprocess() def __dfs(self, node: int, par: int, dep: int, w: int): self.parent[node] = par self.depth[node] = dep self.max_load[0][node] = w self.up[0][node] = par for neighbor, weight in self.graph[node]: if neighbor == par: continue self.__dfs(neighbor, node, dep + 1, weight) def __preprocess(self): self.__dfs(1, -1, 0, 0) for i in range(1, 20): for j in range(1, self.n + 1): if self.up[i-1][j] != -1: self.up[i][j] = self.up[i-1][self.up[i-1][j]] self.max_load[i][j] = max( self.max_load[i-1][j], self.max_load[i-1][self.up[i-1][j]] ) def __lca_max_load(self, u: int, v: int) -> int: if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] max_traffic = 0 for i in range(20): if (diff >> i) & 1: max_traffic = max(max_traffic, self.max_load[i][u]) u = self.up[i][u] if u == v: return max_traffic for i in range(19, -1, -1): if self.up[i][u] != self.up[i][v]: max_traffic = max(max_traffic, self.max_load[i][u], self.max_load[i][v]) u = self.up[i][u] v = self.up[i][v] return max(max_traffic, self.max_load[0][u], self.max_load[0][v]) def query(self, a: int, b: int) -> int: return self.__lca_max_load(a, b) def solve_traffic_load(n: int, edges: List[Tuple[int, int, int]], queries: List[Tuple[int, int]]) -> List[int]: tree = TreeTraffic(n, edges) result = [] for a, b in queries: result.append(tree.query(a, b)) return result"},{"question":"You are given an array of n integers a1, a2, ..., an. A pair of indices (i, j) (1 ≤ i < j ≤ n) is called special if it satisfies all of the following conditions: 1. a[i] < a[j] 2. a[i] is a prime number You need to find the number of such special pairs in the array. The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000). Print a single integer — the number of special pairs (i, j). Consider the first example. There are 5 elements in the array: [2, 3, 1, 4, 5]. The special pairs are (1, 2), (1, 4), (1, 5), (2, 4), (2, 5). In the second example, there are 5 elements in the array: [1, 2, 3, 4, 5]. The special pairs are (2, 3), (2, 4), (2, 5), (3, 4), (3, 5).","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_special_pairs(arr): count = 0 n = len(arr) for i in range(n): if is_prime(arr[i]): for j in range(i+1, n): if arr[i] < arr[j]: count += 1 return count"},{"question":"You have recently started working at an e-commerce company that operates a large-scale online marketplace. One of the critical features of the platform is its search functionality, which helps users find products by their names. A new feature request asks to implement an autocomplete system that suggests product names as users type queries. The autocomplete system works by taking the user\'s partial query and returning a list of top suggestions based on products already available in the system. You are given a list of product names and a list of queries. For each query, your task is to return a list of all product names that start with the given query string. The matching should be case-insensitive. The input format is as follows: - The first line contains an integer p (1 ≤ p ≤ 100) — the number of products. - The next p lines each contain a product name. A product name consists of between 1 and 50 alphanumeric characters (uppercase and lowercase English letters and digits) and spaces. - The line after the product names contains an integer q (1 ≤ q ≤ 50) — the number of queries. - The following q lines each contain a query string. A query string consists of between 1 and 50 alphanumeric characters (uppercase and lowercase English letters and digits) and spaces. For each query, output a list of product names that match the query string. If no products match, output an empty list. Example: ``` Input: 5 Apple iPhone Samsung Galaxy Nokia Lumia Google Pixel OnePlus Nord 3 Sam Nok A Output: Samsung Galaxy Nokia Lumia Apple iPhone ``` Your task is to implement the autocomplete system efficiently to handle up to the given constraints.","solution":"def autocomplete(product_names, queries): This function returns a list of lists of product names that start with the given query strings. Parameters: product_names (list of str): The list of product names. queries (list of str): The list of query strings. Returns: list of list of str: List of lists containing product names that match each query. # Convert all product names to lowercase for case-insensitive comparison normalized_product_names = [product.lower() for product in product_names] results = [] for query in queries: normalized_query = query.lower() matching_products = [ product for product, normalized_product in zip(product_names, normalized_product_names) if normalized_product.startswith(normalized_query) ] results.append(matching_products) return results"},{"question":"Vasya has prepared a sequence of integers to present to his friends. His sequence consists of n integers a1, a2, ..., an. He wants to make sure that the sequence has exactly k distinct integers. However, Vasya can only change at most m elements of the sequence. Your task is to help Vasya determine if it is possible to transform the sequence into one that has exactly k distinct integers by changing at most m elements. The first line of the input contains three integers n, k, and m (1 ≤ n ≤ 100, 1 ≤ k ≤ n, 0 ≤ m ≤ n) — the length of the sequence, the number of distinct integers required, and the maximum number of changes allowed, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the sequence of integers prepared by Vasya. Output \\"YES\\" (without quotes) if it is possible to transform the sequence into one that contains exactly k distinct integers by changing at most m elements. Otherwise, print \\"NO\\" (without quotes). For example, in the first sample, it is possible to change at most 2 elements to achieve exactly 2 distinct integers. However, in the third sample, no matter what changes you make, it is impossible to achieve exactly 3 distinct integers even if you are allowed to change 4 elements.","solution":"def can_transform_sequence(n, k, m, sequence): Determines if it\'s possible to transform the sequence into one with exactly k distinct integers by changing at most m elements. Args: - n: length of the sequence (int) - k: number of distinct integers required (int) - m: maximum number of changes allowed (int) - sequence: list of integers representing the sequence Returns: - \\"YES\\" if it\'s possible to transform the sequence into one with exactly k distinct integers by changing at most m elements, otherwise \\"NO\\". from collections import Counter # Get the current distinct elements count current_distinct_count = len(set(sequence)) if current_distinct_count == k: return \\"YES\\" # Case 1: Already have more than k distinct numbers if current_distinct_count > k: # We need to reduce the number of distinct elements changes_needed = current_distinct_count - k if changes_needed <= m: return \\"YES\\" else: return \\"NO\\" # Case 2: Have fewer distinct numbers than k else: # We need to increase the number of distinct elements changes_needed = k - current_distinct_count if changes_needed <= m: return \\"YES\\" else: return \\"NO\\""},{"question":"Lucas is a wizard who loves playing with numbers. One day, he became fascinated with a particular numeric sequence and devised a game around it. The sequence, known as the \\"Lucas Sequence\\", is defined as: - L(0) = 2 - L(1) = 1 - L(n) = L(n-1) + L(n-2) for n ≥ 2 The sequence bears similarities to the Fibonacci sequence but starts with different initial values. Now, Lucas has a magical spell that allows him to perform two types of operations on this sequence: 1. **Addition**: Summing up all values in a specified range of the sequence. 2. **Modification**: Modifying the value at a specific position in the sequence. Given the initial values of the Lucas Sequence, Lucas needs your help to answer multiple queries involving these two operations. *Input:* - The first line contains an integer n (2 ≤ n ≤ 10^5), the length of the Lucas Sequence. - The second line contains n space-separated integers representing the first n terms of the Lucas Sequence. - The third line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. - The next q lines contain the queries, each query is in one of the following two formats: 1. `1 x y` (1 ≤ x ≤ y ≤ n): Compute the sum of the sequence from index x to y (inclusive). 2. `2 x z` (1 ≤ x ≤ n, -10^9 ≤ z ≤ 10^9): Set the value at index x to z. *Output:* For each query of type 1, print the corresponding sum. *Example:* ``` Input 10 2 1 3 4 7 11 18 29 47 76 5 1 1 5 2 3 10 1 1 3 2 7 25 1 6 10 Output 17 13 187 ``` *Explanation:* - Initially, the sum from index 1 to 5 is 2 + 1 + 3 + 4 + 7 = 17. - After modifying the value at index 3 to 10, the sequence becomes: [2, 1, 10, 4, 7, 11, 18, 29, 47, 76]. - The new sum from index 1 to 3 is 2 + 1 + 10 = 13. - After modifying the value at index 7 to 25, the sequence becomes: [2, 1, 10, 4, 7, 11, 25, 29, 47, 76]. - The new sum from index 6 to 10 is 11 + 25 + 29 + 47 + 76 = 188. ```","solution":"class LucasSequence: def __init__(self, sequence): self.sequence = sequence self.prefix_sum = self._compute_prefix_sum() def _compute_prefix_sum(self): prefix_sum = [0] * (len(self.sequence) + 1) for i in range(len(self.sequence)): prefix_sum[i + 1] = prefix_sum[i] + self.sequence[i] return prefix_sum def sum_range(self, x, y): return self.prefix_sum[y] - self.prefix_sum[x - 1] def update_value(self, x, z): delta = z - self.sequence[x - 1] self.sequence[x - 1] = z for i in range(x, len(self.sequence) + 1): self.prefix_sum[i] += delta def process_queries(n, sequence, queries): ls = LucasSequence(sequence) results = [] for query in queries: if query[0] == 1: _, x, y = query results.append(ls.sum_range(x, y)) elif query[0] == 2: _, x, z = query ls.update_value(x, z) return results # Example Usage # n = 10 # sequence = [2, 1, 3, 4, 7, 11, 18, 29, 47, 76] # queries = [ # [1, 1, 5], # [2, 3, 10], # [1, 1, 3], # [2, 7, 25], # [1, 6, 10] # ] # output = process_queries(n, sequence, queries) # print(output)"},{"question":"You are tasked with building an application used to manage a cloud storage system. The system has n folders, each represented by a unique positive integer ID. Each folder can have multiple files, and each file is identified by a unique string name. Initially, all folders are empty. The system supports three types of operations: 1. **Add File**: Add a file with a given name to a specific folder. 2. **Remove File**: Remove a file with a given name from a specific folder. 3. **List Files**: List all the files in a specific folder in lexicographical order. Implement a class `CloudStorage` with the following methods: * `add_file(folder_id: int, file_name: str) -> None`: Adds the file named `file_name` to the folder with `folder_id`. If the file already exists in the folder, ignore the command. * `remove_file(folder_id: int, file_name: str) -> None`: Removes the file named `file_name` from the folder with `folder_id`. If the file does not exist in the folder, ignore the command. * `list_files(folder_id: int) -> List[str]`: Returns a list of all files in the folder with `folder_id` in lexicographical order. If the folder is empty, returns an empty list. # Input - The first line contains a single integer `n` (1 leq n leq 10^5) — the number of folders. - The subsequent lines contain an integer `q` (1 leq q leq 10^5) — the number of operations. - Each of the next `q` lines represents an operation in one of the following formats: - `1 folder_id file_name`: Represents an `add_file` operation. - `2 folder_id file_name`: Represents a `remove_file` operation. - `3 folder_id`: Represents a `list_files` operation. # Output - For each `list_files` operation, print a single line containing the names of all files in the specified folder, separated by spaces. If the folder is empty, print an empty line. # Example Input ``` 5 6 1 3 fileA 1 3 fileB 2 3 fileA 3 3 1 4 fileC 3 4 ``` Output ``` fileB fileC ``` Explanation 1. `1 3 fileA`: Adds fileA to folder 3. 2. `1 3 fileB`: Adds fileB to folder 3. 3. `2 3 fileA`: Removes fileA from folder 3. 4. `3 3`: Lists all files in folder 3, resulting in `fileB`. 5. `1 4 fileC`: Adds fileC to folder 4. 6. `3 4`: Lists all files in folder 4, resulting in `fileC`.","solution":"from typing import List, Dict class CloudStorage: def __init__(self, n: int): self.folders = {i: set() for i in range(1, n + 1)} def add_file(self, folder_id: int, file_name: str) -> None: self.folders[folder_id].add(file_name) def remove_file(self, folder_id: int, file_name: str) -> None: self.folders[folder_id].discard(file_name) def list_files(self, folder_id: int) -> List[str]: return sorted(self.folders[folder_id])"},{"question":"You are given a string consisting of lowercase Latin letters and an integer k. You need to find the minimum number of characters to remove from this string such that no more than k characters consecutively repeat in the resulting string. The first line contains an integer k (1 ≤ k ≤ 10^5). The second line contains a string of lowercase Latin letters with a length of n (1 ≤ n ≤ 10^5). Output a single integer – the minimum number of characters to remove to achieve the required condition. In the first example: For k = 1 and string \\"aabbcc\\", the result can be \\"abc\\", hence we remove 3 characters. For k = 2 and string \\"aabbcc\\", the string is already satisfying the condition, so we remove 0 characters. In the second example: For k = 2 and string \\"aabbbcccc\\", the minimum removal can be achieved by transforming it into \\"aabbcc\\", thus removing 2 characters. The constraints ensure that there is always a valid solution.","solution":"def min_removals_to_achieve_k_consecutives(k, s): Returns the minimum number of characters to remove such that no more than k characters consecutively repeat in the string s. n = len(s) removals = 0 i = 0 while i < n: count = 1 while i + 1 < n and s[i] == s[i + 1]: count += 1 i += 1 if count > k: removals += count - k i += 1 return removals"},{"question":"You are given an integer array representing stock prices on different days. You can buy and sell stocks multiple times to maximize your profit, but you cannot hold more than one share of the stock at a time. Your task is to calculate the maximum profit you can achieve given the array of stock prices. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of days. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the stock prices on each day. Print a single integer — the maximum profit you can achieve. # Example Input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 7 ``` Explanation: You can: 1. Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. 2. Buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit = 4 + 3 = 7. # Constraints - You may make as many transactions as you like (buy one and sell one share of the stock multiple times). - You cannot engage in multiple transactions at the same time (you must sell the stock before you buy again). - This can be solved in O(n) time complexity.","solution":"def max_profit(stock_prices): Calculate the maximum profit from given stock prices by buying and selling on different days. :param stock_prices: List of integers representing stock prices on different days. :return: Maximum profit achievable. n = len(stock_prices) max_profit = 0 for i in range(1, n): if stock_prices[i] > stock_prices[i - 1]: max_profit += stock_prices[i] - stock_prices[i - 1] return max_profit"},{"question":"An eco-friendly store is running a special promotion event — they are giving away reusable shopping bags to their customers based on their total purchase. The store has set up a rule where each customer needs a minimum total purchase in order to get a shopping bag. Customers can receive a shopping bag if they make any combination of purchases that sum to at least a specific value. In the store, there are n types of products, each type having a certain price. You are given an array of prices where each element represents the price of a type of product. Customers can buy multiple units of the same product. You need to determine the minimum number of products a customer should buy (irrespective of the type) to get a reusable shopping bag by making the total purchase amount reach or exceed a given threshold k. The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10^6) — the number of product types and the minimum total purchase required for the reusable bag. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^5) — the prices of the products. Output the minimum number of products needed to reach the total purchase amount of at least k. If it\'s not possible to reach k, print -1. Example 1: Input: 3 50 10 20 30 Output: 2 Example 2: Input: 3 70 30 40 25 Output: 2","solution":"def min_products_to_reach_threshold(n, k, prices): # Sort prices in descending order prices.sort(reverse=True) total = 0 count = 0 for price in prices: while total < k: total += price count += 1 if total >= k: return count return -1 if total < k else count"},{"question":"You\'re given an undirected graph with n nodes and m edges. Your task is to determine the cost of the minimum spanning tree (MST) of this graph. If it\'s impossible to form an MST (i.e., the graph isn\'t connected), return -1. The MST is a subset of the edges that connects all the nodes in the graph without any cycles and with the minimum possible total edge weight. # Input: - The first line contains two integers n and m (1 le n le 500, 0 le m le n(n-1)/2) — the number of nodes and the number of edges. - The next m lines contain three integers u, v, and w (1 le u, v le n, u neq v, 1 le w le 10^6) — the endpoints of the edge and its weight. # Output: - Print a single integer — the cost of the MST, or -1 if it\'s impossible to form an MST. # Example: Input: ``` 4 5 1 2 1 1 3 1 1 4 1 2 3 1 3 4 1 ``` Output: ``` 3 ``` Input: ``` 4 2 1 2 1 3 4 1 ``` Output: ``` -1 ``` # Note: - In the first example, the minimum spanning tree consists of edges (1-2, 1-3, 1-4) with a total cost of 3. - In the second example, the graph isn\'t connected, so it\'s impossible to form an MST and the output is -1.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): # Sort edges in ascending order of their weights edges.sort(key=lambda edge: edge[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 edge_count = 0 # Number of edges in MST should be (n - 1) for edge in edges: u, v, w = edge u -= 1 v -= 1 # Find sets of two vertices x = find(parent, u) y = find(parent, v) # If including this edge does not form a cycle if x != y: mst_weight += w edge_count += 1 union(parent, rank, x, y) # If MST contains n-1 edges, stop the loop if edge_count == n - 1: break # If not enough edges were added, the graph isn\'t connected if edge_count != n - 1: return -1 else: return mst_weight def minimum_spanning_tree(n, m, edges): if n == 1: return 0 if m == 0 else -1 if m == 0: return -1 return kruskal_mst(n, edges)"},{"question":"You have been tasked with developing a navigation software for autonomous delivery robots in a city represented as an n x m grid. Each cell in the grid can either be an open space, an obstacle, or the robot\'s destination. Robots can move up, down, left, or right to an adjacent open space cell but cannot move diagonally. Your task is to determine the shortest path from the robot\'s start position to the destination in seconds. Moving between adjacent open space cells takes one second. If the destination cannot be reached, return \\"IMPOSSIBLE\\". The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The following n lines contain m characters each — the grid description. \'S\' denotes the start position of the robot, \'D\' denotes the destination, \'.\' denotes open space cells, and \'#\' denotes obstacle cells. The output should be a single integer — the minimum number of seconds to reach the destination or \\"IMPOSSIBLE\\" if the destination cannot be reached. Example: Input: 5 5 S...# .#.#. .#..# .#..D ..... Output: 7 In this example, the robot follows the path: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (3,4). Note that the robot cannot move through the obstacles \'#\' and follows the shortest path to the destination \'D\'.","solution":"from collections import deque def shortest_path_to_destination(n, m, grid): Returns the shortest path from the start position to the destination in seconds, or \\"IMPOSSIBLE\\" if the destination cannot be reached. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find the start and destination positions start = None destination = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': destination = (i, j) # Initialize the BFS queue and visited set queue = deque([(start, 0)]) # (position, time) visited = set([start]) while queue: (current_pos, current_time) = queue.popleft() if current_pos == destination: return current_time for direction in directions: next_row, next_col = current_pos[0] + direction[0], current_pos[1] + direction[1] if 0 <= next_row < n and 0 <= next_col < m and grid[next_row][next_col] != \'#\' and (next_row, next_col) not in visited: visited.add((next_row, next_col)) queue.append(((next_row, next_col), current_time + 1)) return \\"IMPOSSIBLE\\""},{"question":"A famous artist is creating a new type of artwork using a rectangular grid of colored cells. Each cell can be either black or white. The grid is represented by a matrix of 0s and 1s, where 0 denotes a white cell and 1 denotes a black cell. The artist wants to find the largest rectangular sub-grid that contains only black cells. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each, where each integer is either 0 or 1, representing the grid. Output a single integer — the area of the largest rectangular sub-grid consisting only of black cells. # Example: Input: 5 6 1 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 0 0 1 1 1 Output: 6 Explanation: In the given example, the largest contiguous sub-grid with only black cells (1s) is of size 2x3, thus the area is 6.","solution":"def largest_black_rect(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) # Initialize a histogram array based on the same number of columns hist = [0] * m max_area = 0 # Update histogram for each row and calculate the maximal rectangle for i in range(n): for j in range(m): # Update the running count of blocks in the column hist[j] = hist[j] + 1 if grid[i][j] == 1 else 0 # Calculate the maximal rectangle with the current updated histogram max_area = max(max_area, max_histogram_area(hist)) return max_area def max_histogram_area(hist): # This function computes the largest rectangle area in a histogram stack = [] max_area = 0 index = 0 while index < len(hist): if not stack or hist[index] >= hist[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area # Example usage grid = [ [1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1] ] print(largest_black_rect(grid)) # Output should be 6"},{"question":"Given a sequence of integers, your task is to determine whether it is possible to reorder a subset of the sequence such that the subset forms a strictly increasing sequence of length k. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 100), where n is the length of the given sequence. The second line of input contains n space-separated integers (−10^4 ≤ a_i ≤ 10^4 for each 0 ≤ i ≤ n-1). Output \\"YES\\" if such a subset exists, and \\"NO\\" otherwise. # Example **Input** ``` 5 3 3 2 1 5 4 ``` **Output** ``` YES ``` **Input** ``` 4 5 10 7 5 6 ``` **Output** ``` NO ``` **Explanation** In the first example, the subset {1, 3, 4} forms a strictly increasing sequence of length 3. In the second example, no subset of length 5 can be formed from the given sequence.","solution":"def can_form_increasing_subsequence(n, k, sequence): Determines if it is possible to reorder a subset of the sequence such that the subset forms a strictly increasing sequence of length k. :param n: Length of the sequence. :param k: Desired length of strictly increasing subsequence. :param sequence: List of integers. :return: \\"YES\\" if possible, \\"NO\\" otherwise. sequence.sort() # Checking if the k-th smallest unique element exists unique_elements = list(set(sequence)) unique_elements.sort() if len(unique_elements) >= k: return \\"YES\\" else: return \\"NO\\""},{"question":"In the game of \\"Summation Battle\\", players aim to achieve the highest score by summing elements from a given sequence. The rules are simple: players can select any subsequence of the given sequence, but they cannot select two consecutive elements. The score of a subsequence is the sum of its elements. Given an array of integers, write a program to determine the maximum possible score a player can achieve by selecting a valid subsequence. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n space-separated integers a_i (-10,000 ≤ a_i ≤ 10,000) — the elements of the array. Print the maximum possible score a player can achieve by selecting a valid subsequence. # Example **Input:** ``` 5 3 2 5 10 7 ``` **Output:** ``` 15 ``` **Explanation:** To achieve the maximum score, the player selects the subsequence [3, 5, 7], giving a sum of 15.","solution":"def max_summation_battle_score(n, arr): if n == 0: return 0 elif n == 1: return max(0, arr[0]) # We use two variables to keep track of the maximum score including and excluding the current element include = arr[0] exclude = 0 for i in range(1, n): # Update include to be the max sum including the current element new_include = exclude + arr[i] # Update exclude to be the max of the previous include and exclude exclude = max(include, exclude) # Set include for the next iteration include = new_include # The maximum possible score will be the max of include and exclude return max(include, exclude)"},{"question":"You are organizing a treasure hunt and need to create a challenging puzzle for the participants. The puzzle involves using a grid of size n times n, where each cell in the grid contains an obstacle, an open path, or the treasure. Participants start from the top-left corner (1,1) and try to reach the treasure located in one of the cells. The grid is provided as a matrix of characters: - `\'.\'` indicates an open path. - `\'#\'` indicates an obstacle. - `\'T\'` indicates the location of the treasure. Participants can move up, down, left, or right, but cannot move into cells with obstacles or outside the grid boundaries. Your task is to determine if there is a path from the starting cell `(1,1)` to the treasure `\'T\'` in the grid. If there is such a path, print \\"YES\\", otherwise print \\"NO\\". **Input:** - The first line contains an integer n (2 leq n leq 500) — the size of the grid. - The next n lines each contain n characters (either `\'.\'`, `\'#\'`, or `\'T\'`), representing the grid. **Output:** - Print \\"YES\\" if there is a path from `(1,1)` to the treasure, otherwise print \\"NO\\". **Examples:** **Input 1:** ``` 5 ..... .#.#. .#T#. .#.#. ..... ``` **Output 1:** ``` YES ``` **Input 2:** ``` 3 # T # ``` **Output 2:** ``` NO ``` **Explanation:** In the first example, there is a path from the top-left corner to the treasure, so the output is \\"YES\\". In the second example, the treasure is surrounded by obstacles, making it impossible to reach, so the output is \\"NO\\".","solution":"def find_treasure_path(n, grid): from collections import deque # Direction vectors for moving up, down, left and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Starting point start = (0, 0) # BFS queue queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() # If current position is the treasure if grid[x][y] == \'T\': return \\"YES\\" # Explore all 4 possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" # Example usage if __name__ == \\"__main__\\": n = int(input()) grid = [input().strip() for _ in range(n)] print(find_treasure_path(n, grid))"},{"question":"Alice is learning about strings today. She has a string `s` consisting of lowercase English letters. Alice\'s teacher gave her a task to find the length of the longest substring that contains the same character. Help her by writing a function that accepts the string `s` and returns the length of the longest substring with identical characters. The first line contains a string `s` (1 ≤ |s| ≤ 105), where |s| is the length of the string. Print a single integer — the length of the longest substring that contains the same character. # Example Input: ``` abbcccdddd ``` Output: ``` 4 ``` Explanation: The longest substring with identical characters is \\"dddd\\", which has a length of 4.","solution":"def longest_substring_identical_chars(s): Returns the length of the longest substring with identical characters. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len"},{"question":"Emma has a peculiar collection of stones. Each stone has a positive integer inscribed on it. She has arranged all the stones in a row such that the stones form a permutation of the first n natural numbers (i.e., every number from 1 to n appears exactly once). Every day, Emma can perform the following operation on her collection: She can pick any contiguous subarray of stones and reverse the order of the stones in that subarray. Emma wants to sort her collection in ascending order (from left to right), but she wants to do so using the minimum number of operations. Determine the minimum number of operations required for Emma to sort her stones. The input consists of: - The first line contains a single integer n (1 le n le 10^5) — the number of stones. - The second line contains n distinct integers between 1 and n in some order — the initial arrangement of Emma\'s stones. Output a single integer — the minimum number of operations required for Emma to sort her stones. # Example Input: ``` 5 4 3 1 2 5 ``` Output: ``` 2 ``` In this example, the array can be sorted in two operations: 1. Reverse the subarray [3, 1, 2]. 2. Reverse the subarray [4, 1, 2, 3]. The stones are now in ascending order.","solution":"def min_operations_to_sort(n, stones): Determine the minimum number of operations required to sort the stones. Parameters: n (int): the number of stones. stones (list of int): the initial arrangement of stones. Returns: int: the minimum number of operations required to sort the stones. if stones == sorted(stones): return 0 longest_inc_subseq = 1 current_length = 1 for i in range(1, n): if stones[i] > stones[i-1]: current_length += 1 else: longest_inc_subseq = max(longest_inc_subseq, current_length) current_length = 1 longest_inc_subseq = max(longest_inc_subseq, current_length) return n - longest_inc_subseq"},{"question":"You have been assigned a task to manage the bookings of conference rooms in a large office building. The building has multiple conference rooms, each with its own schedule of bookings. Your goal is to determine the maximum number of non-overlapping meetings that can be scheduled in a specific conference room. Each meeting is defined by a start time and an end time, where both start time and end time are non-negative integers. The start time and end time are inclusive, i.e., a meeting that starts at time i and ends at time j occupies all the time slots from i to j inclusive. You need to write a function that takes a list of meeting time intervals and returns the maximum number of non-overlapping meetings that can be scheduled in a given conference room. # Input - The first line contains an integer n (1 le n le 10^5) representing the number of meetings. - Each of the following n lines contains two integers s_i and e_i (0 le s_i < e_i le 10^9), representing the start and end times of a meeting. # Output - A single integer representing the maximum number of non-overlapping meetings that can be scheduled in the conference room. # Constraints - The input contains up to 10^5 meetings. - The times are non-negative integers and can be very large (up to 10^9). # Example **Input** ``` 5 1 3 2 5 4 6 7 9 8 10 ``` **Output** ``` 3 ``` **Explanation:** The maximum number of non-overlapping meetings is 3. One possible set of non-overlapping meetings is: (1, 3), (4, 6), and (7, 9). # Solution Sketch To solve this problem, you can use a greedy algorithm: 1. Sort the meetings by their end times. 2. Iterate through the meetings, and for each meeting, check if it can be scheduled without overlapping with the previously scheduled meetings. 3. Keep track of the end time of the last added meeting to ensure no overlapping. 4. Count the number of meetings that can be scheduled without overlapping.","solution":"def max_non_overlapping_meetings(n, intervals): Determines the maximum number of non-overlapping meetings that can be scheduled. Parameters: n (int): The number of meetings. intervals (List[Tuple[int, int]]): The list of start and end times of meetings. Returns: int: The maximum number of non-overlapping meetings. # Sort meetings by their end times intervals.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in intervals: if start > last_end_time: count += 1 last_end_time = end return count"},{"question":"In a bustling city, there\'s a street grid system with intersections laid out in a rectangular grid form. Each intersection can either be accessible or blocked. The city\'s mayor, in an effort to improve transportation, wants to determine the shortest path from the northwestern-most intersection to the southeastern-most intersection using only the horizontal or vertical streets. Your task is to write a program that finds the number of intersections in the shortest path from the top-left corner to the bottom-right corner of the grid. If there is no such path, return -1. Intersections are represented in a 2D array `grid` where `1` signifies an accessible intersection and `0` signifies a blocked intersection. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next `n` lines contain `m` integers each, representing the grid. Print a single integer — the number of intersections in the shortest path from the top-left to the bottom-right intersection or `-1` if no such path exists. Example: Input: ``` 3 3 1 1 0 1 1 0 0 1 1 ``` Output: ``` 5 ``` In this example, the shortest path is length 5: from intersection `(1,1)` → `(2,1)` → `(2,2)` → `(3,2)` → `(3,3)`.","solution":"from collections import deque def shortest_path(grid): Returns the number of intersections in the shortest path from the top-left corner to the bottom-right corner of the grid, or -1 if no such path exists. n = len(grid) m = len(grid[0]) # Edge case for a single cell if n == 1 and m == 1: return 1 if grid[0][0] == 1 else -1 # Check if the start or end is blocked if grid[0][0] == 0 or grid[n - 1][m - 1] == 0: return -1 directions = [(0, 1), (1, 0)] # right, down queue = deque([(0, 0)]) visited = set((0, 0)) steps = 1 while queue: for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 1: if nx == n - 1 and ny == m - 1: return steps + 1 queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1"},{"question":"There is an agricultural field divided into a grid of m x n cells. Each cell can either be empty or contain a plant. A plant is represented by \'1\' and an empty cell is represented by \'0\'. To optimize water usage, you need to group the plants into the smallest number of contiguous clusters. A cluster of plants is created if a set of \'1\'s are connected either vertically or horizontally. Write a function that takes a grid of \'0\'s and \'1\'s and returns the number of plant clusters. The input contains multiple lines. The first line contains two integers, m and n (1 ≤ m, n ≤ 100), which are the dimensions of the grid. The next m lines each contain a string of n characters, consisting of \'0\'s and \'1\'s, representing the grid. Print a single integer representing the number of clusters of plants in the given grid. # Example Input ``` 4 5 11110 11010 11000 00000 ``` Output ``` 1 ``` Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` # Note In the first example, there is only one cluster of plants. In the second example, there are three clusters of plants: one in the top-left corner, one in the middle, and one in the bottom-right corner.","solution":"def count_plant_clusters(grid): # Check if the grid is empty if not grid or not grid[0]: return 0 m = len(grid) n = len(grid[0]) def dfs(x, y): if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark the cell as visited # Execute DFS in all four possible directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) clusters = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': clusters += 1 dfs(i, j) return clusters def parse_input(input_str): lines = input_str.strip().split(\\"n\\") m, n = map(int, lines[0].strip().split()) grid = [list(lines[i + 1].strip()) for i in range(m)] return grid def main(input_str): grid = parse_input(input_str) return count_plant_clusters(grid)"},{"question":"A transportation company wants to optimize its bus routes. Each bus has a different capacity, and each route has a specific number of passengers who need transport. The company wants to determine the minimum total number of buses needed to transport all passengers on a given route. Given an array of bus capacities and the number of passengers for a specific route, calculate the minimum number of buses required to transport all the passengers. Each bus can only be used once on the route. The first line contains two integers, n and p (1 ≤ n ≤ 100, 1 ≤ p ≤ 10^4) - the number of buses available and the number of passengers that need to be transported, respectively. The second line contains n integers, c_i (1 ≤ c_i ≤ 500), representing the capacity of each bus. Print a single integer — the minimum number of buses required to transport all the passengers. If it\'s not possible to transport all passengers with the given buses, print -1. # Example: Input: ``` 3 100 30 50 70 ``` Output: ``` 2 ``` Input: ``` 2 200 60 60 ``` Output: ``` -1 ``` In the first example, one optimal solution would be to use the buses with capacities 30 and 70, which gives a total of 100. In the second example, the maximum transportable capacity with the given buses is 120, which is insufficient.","solution":"from operator import itemgetter def min_buses(n, p, capacities): Determines the minimum number of buses required to transport all passengers, or returns -1 if it\'s not possible. :param n: Number of buses :param p: Number of passengers that need to be transported :param capacities: List of capacities of each bus :return: Minimum number of buses required or -1 if it\'s not possible to transport all passengers capacities.sort(reverse=True) num_buses = 0 total_capacity = 0 for capacity in capacities: total_capacity += capacity num_buses += 1 if total_capacity >= p: return num_buses return -1"},{"question":"You are given a string of lowercase English letters. You need to determine the minimum number of characters you\'d have to remove from the string so that the remaining string contains no more than two distinct characters. # Input - The first and only line of input contains a string `s` (1 ≤ |s| ≤ 10^5). # Output - Print one integer — the minimum number of characters to remove so that the remaining string contains no more than two distinct characters. # Example Input ``` abacad ``` Output ``` 2 ``` Explanation In the example, one optimal solution is to remove the characters \'b\' and \'d\', which leaves us with the string \\"aaaa\\", which contains only two distinct characters (\'a\' and nothing else). The total number of characters removed is 2. # Constraints - The input string length will be between 1 and 100,000 characters. - The string will only contain lowercase English letters (\'a\' - \'z\'). # Note To solve this problem, you need to use a combination of counting characters and determining which characters to remove in order to leave no more than two distinct characters in the string. Use efficient algorithms to ensure your solution runs within the given constraints.","solution":"from collections import Counter def min_removals_to_two_distinct(s): Returns the minimum number of characters to remove so that the remaining string contains no more than two distinct characters. # Calculate the frequency of each character in the string char_count = Counter(s) # If the string already has 2 or less distinct characters, # no need to remove anything if len(char_count) <= 2: return 0 # Get list of character counts sorted in descending order sorted_counts = sorted(char_count.values(), reverse=True) # If we have more than 2 distinct characters, we need to consider removing some # and keep the counts of the top 2 most frequent characters only total_removals = sum(sorted_counts[2:]) # remove all other characters except the top 2 return total_removals"},{"question":"You are provided with a string containing lowercase alphabets and a set of queries. Each query consists of a character and an integer `k`. For each query, you need to determine if it is possible to make the given character appear exactly `k` times in the string by performing zero or more following operations: 1. Add a character (any lowercase alphabet) to any position of the string. 2. Remove a character from any position of the string. The first line of the input contains the string `s` of length `n` (1 ≤ n ≤ 10^5). The second line contains an integer `q` (1 ≤ q ≤ 2⋅10^5) — number of queries. Each of the next `q` lines contains a character `c` and an integer `k` (1 ≤ k ≤ 10^5) — the character to be queried and the required number of occurrences. For each query, print \\"YES\\" if it is possible to make the character appear exactly `k` times in the string using the described operations, otherwise print \\"NO\\". # Input ``` abbcc 3 a 1 b 4 c 2 ``` # Output ``` YES YES YES ``` # Explanation - For the first query, character \'a\' already appears 1 time in the string, so the answer is YES. - For the second query, character \'b\' appears 2 times in the string, to make it appear 4 times we can add \'b\' two more times, so the answer is YES. - For the third query, character \'c\' already appears 2 times in the string, so the answer is YES.","solution":"def character_occurrences(s, queries): Determine if it\'s possible to make the given character appear exactly k times by adding or removing characters. :param s: The input string containing lowercase alphabets. :param queries: List of tuples where each tuple contains a character and a required number of occurrences. :return: List of strings \\"YES\\" or \\"NO\\" for each query based on the possibility. from collections import Counter # Count initial occurrences of each character in the string count = Counter(s) # Initialize result list result = [] # Process each query for char, k in queries: current_count = count.get(char, 0) # We can always add or remove characters to achieve any required occurrences result.append(\\"YES\\") return result # Example usage: # s = \\"abbcc\\" # queries = [(\'a\', 1), (\'b\', 4), (\'c\', 2)] # print(character_occurrences(s, queries))"},{"question":"Given an undirected graph with `n` nodes and `m` edges, you are tasked with finding the shortest path between any pair of nodes. However, on walking through each edge, you have to pay a toll. The toll for each edge `i` is given in a list `tolls`, where `tolls[i]` is the toll of the `i`-th edge. The graph is represented as follows: - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1,000; 0 ≤ m ≤ 5,000): the number of nodes and edges, respectively. - The next `m` lines each contain three integers `u`, `v`, and `tolls[i]` (1 ≤ u, v ≤ n; 0 ≤ tolls[i] ≤ 1,000), which denote an edge between nodes `u` and `v` with a toll `tolls[i]`. Write a function to find the smallest toll required to travel between every pair of nodes. If two nodes are not reachable from each other, the toll between them should be considered to be infinity. Your function should have the following signature: ```python def find_all_pairs_shortest_path(n, m, edges): # n: integer, number of nodes # m: integer, number of edges # edges: list of tuples, where each tuple consists of three integers (u, v, toll) # returns: a 2D list representing the minimum tolls to travel between every pair of nodes ``` Example # Input ``` 5 6 1 2 3 1 3 2 2 3 1 2 4 5 3 4 4 4 5 6 ``` # Output ``` [[0, 3, 2, 6, 12], [3, 0, 1, 5, 11], [2, 1, 0, 4, 10], [6, 5, 4, 0, 6], [12, 11, 10, 6, 0]] ``` In this example, the matrix represents the smallest tolls required to travel between every pair of nodes. For instance, the toll to travel between node 1 and node 4 is 6, and the toll to travel between node 4 and 5 is 6. If two nodes are not reachable, their corresponding value should be infinity (`float(\'inf\')` in Python).","solution":"def find_all_pairs_shortest_path(n, m, edges): # Initialize the distance matrix with infinity dist = [[float(\'inf\')] * n for _ in range(n)] # Distance to self is 0 for i in range(n): dist[i][i] = 0 # Set provided edges distances for u, v, toll in edges: dist[u-1][v-1] = toll dist[v-1][u-1] = toll # Floyd-Warshall algorithm to find all pairs shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][k] + dist[k][j] < dist[i][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist"},{"question":"Vanya has a list of `n` integers. He wants to divide this list into two non-empty parts such that the sum of the elements in each part is as close as possible. Vanya is not sure how to do this efficiently, so he has asked for your help to find the minimum possible absolute difference between the sums of the two parts. The first line contains a single integer `n` (2 ≤ n ≤ 2000) — the number of elements in the list. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^5) — the elements of the list. Print a single integer — the minimum possible absolute difference between the sums of the two parts. # Example Input ``` 4 1 2 3 4 ``` Output ``` 0 ``` Explanation One way to split the list is into [1, 4] and [2, 3], resulting in sums of 5 and 5 respectively. The absolute difference between these sums is 0, which is the minimum possible.","solution":"def minimum_difference(n, nums): Returns the minimum possible absolute difference between the sums of two non-empty parts of the list. :param n: int, the number of elements in the list :param nums: list of int, the elements of the list :return: int, the minimum possible absolute difference between the sums of the two parts total_sum = sum(nums) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for num in nums: for j in range(half_sum, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) sum_part1 = dp[half_sum] sum_part2 = total_sum - sum_part1 return abs(sum_part2 - sum_part1)"},{"question":"You are organizing a hackathon and you need to assign participants to different rooms. Each room can hold a certain number of participants, and you want to make sure each room is filled as evenly as possible. You are given the number of participants and a list of the maximum capacities of the rooms. Your task is to determine the minimum possible difference between the number of participants in the room with the most participants and the room with the least participants. The first line contains an integer p (1 ≤ p ≤ 100,000) — the number of participants. The second line contains an integer r (1 ≤ r ≤ 100) — the number of rooms. The third line contains r integers, the i-th of which, c_i (1 ≤ c_i ≤ 100,000), represents the maximum capacity of the i-th room. Output the minimum possible difference between the number of participants in the room with the most participants and the room with the least participants after assigning all participants to the rooms as evenly as possible. Example: Input: 12 3 5 5 5 Output: 0 Explanation: The optimal assignment is to place 4 participants in each of the 3 rooms, resulting in a difference of 0 between the most filled and the least filled room.","solution":"def min_participant_difference(participants, room_capacities): Determines the minimum possible difference between the number of participants in the room with the most participants and the room with the least participants after assigning all participants to the rooms as evenly as possible. :param participants: int - The number of participants. :param room_capacities: list of ints - The maximum capacities of the rooms. :return: int - The minimum possible difference between the most and least filled room. room_count = len(room_capacities) # On average, each room should have this many participants average_participants_per_room = participants // room_count # The leftover participants when trying to evenly distribute across the rooms leftover = participants % room_count # If there are N rooms and we have some leftover participants, we need to distribute them. # For instance, if we have 3 rooms and 12 students, even distribution will be (12 // 3 = 4) in each room. # If we have 14 students, we will put (14 // 3 = 4) and distribute remaining 2 students (14 % 3 = 2) # across 2 rooms. Therefore, 2 rooms will have 5 (4+1) participants and 1 room will have 4. # Difference between max filled and min filled will be 1 (5-4). # If leftover participants are 0, all rooms have the same number of participants # else, the max filled room will have at most 1 more participant than the min filled room. return 1 if leftover != 0 else 0 # Example usage if __name__ == \\"__main__\\": participants = 12 room_capacities = [5, 5, 5] print(min_participant_difference(participants, room_capacities)) # Output: 0"},{"question":"Alice is working on a new project which involves developing compatible hardware pieces for a robotic arm. The robotic arm can perform operations on an array of gear sizes. Alice is interested in finding the longest sequence within this array that is strictly increasing. However, the sequence doesn\'t have to be contiguous. As Alice is under a tight deadline, she needs your help to achieve this task. Input: - The first line of input contains an integer \'n\' (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains \'n\' integers representing the array of gear sizes, each element ai (-1000 ≤ ai ≤ 1000). Output: - Output a single integer — the length of the longest strictly increasing subsequence in the array. Example: Input: ``` 6 10 22 9 33 21 50 ``` Output: ``` 4 ``` Explanation: The longest strictly increasing subsequence is [10, 22, 33, 50], and its length is 4.","solution":"def longest_increasing_subsequence(n, arr): Finds the length of the longest strictly increasing subsequence in the array. :param n: (int) Number of elements in the array :param arr: (List[int]) Array of gear sizes :return: (int) Length of the longest strictly increasing subsequence if n == 0: return 0 # Initialize the dp array to store the maximum subsequence length ending at each index dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence return max(dp) # Example usage: # input: 6 # 10 22 9 33 21 50 # output: 4"},{"question":"You are given a city map represented by an n x m grid. Each cell in the grid is either land (\'0\') or water (\'1\'). A \\"lake\\" is a group of water cells connected horizontally or vertically, but not diagonally. Your task is to calculate the total number of distinct lakes in the grid. You need to write a program to count the number of lakes. # Input - The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid respectively. - The following n lines each contain m characters (\'0\' or \'1\'), representing the grid. # Output - Print one integer — the number of distinct lakes in the grid. # Example Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` Explanation: In the example: - The first lake consists of water cells at positions (1, 1), (1, 2), (2, 1), (2, 2). - The second lake has a single water cell at position (3, 3). - The third lake consists of water cells at positions (4, 4), (4, 5). Thus, there are 3 lakes in the grid.","solution":"def count_lakes(n, m, grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) lake_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': dfs(i, j) lake_count += 1 return lake_count"},{"question":"Given a large assembly line, each task needs to be completed sequentially across several workstations. The assembly line can be represented by a directed graph where each node represents a workstation and each edge represents the time required to transfer the task from one station to another. Each workstation can be identified by an integer from 1 to n, with n representing the total number of workstations. The transfer times between workstations are provided in a m x 3 matrix where each row denotes a direct transfer with format (u, v, t), indicating that transferring a task from workstation u to workstation v takes time t. Your task is to determine the minimum time needed to transfer a task from workstation 1 to workstation n. If it is not possible to transfer a task from workstation 1 to workstation n, return -1. **Input:** The first line contains two integers n and m — the number of workstations and the number of transfer times respectively (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000). Each of the next m lines contain three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10^4), representing a direct transfer time from workstation u to workstation v. **Output:** Output a single integer — the minimum time required to transfer a task from workstation 1 to workstation n. If there is no valid path, return -1. **Example:** ``` Input: 4 4 1 2 5 2 3 10 3 4 1 1 3 15 Output: 16 ``` In the example, the shortest path from workstation 1 to workstation 4 is 1 -> 2 -> 3 -> 4 with a total time of 5 + 10 + 1 = 16.","solution":"import heapq def minimum_transfer_time(n, m, transfers): graph = {i: [] for i in range(1, n + 1)} for u, v, t in transfers: graph[u].append((v, t)) def dijkstra(start, end): pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while pq: current_dist, current_node = heapq.heappop(pq) if current_node == end: return current_dist if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return float(\'inf\') min_time = dijkstra(1, n) return min_time if min_time != float(\'inf\') else -1"},{"question":"You are given an integer array `arr` of length `n`. You are allowed to perform the following operation exactly `m` times on `arr`: choose any two indices `i` and `j` (1 ≤ i, j ≤ n) such that `arr[i] ≠ arr[j]` and swap the elements at indices `i` and `j`. Your task is to determine the maximum possible sum of the array that can be obtained after performing the operation exactly `m` times. The first line contains two integers `n` and `m` (1 ≤ n ≤ 1,000, 0 ≤ m ≤ 1,000), representing the length of the array and the number of operations you can perform. The second line contains `n` space-separated integers representing the elements of the array `arr` (−10^9 ≤ arr[i] ≤ 10^9). Print a single integer, the maximum possible sum of the array after performing the operation exactly `m` times. # Example **Input:** ``` 5 3 1 2 -3 4 5 ``` **Output:** ``` 12 ``` **Explanation:** - Initial array: [1, 2, -3, 4, 5] - Perform the swap (1, -3): [1, 5, -3, 4, 2] - Perform the swap (-3, 5): [1, -3, 5, 4, 2] - Perform the swap (-3, 2): [1, 2, 5, 4, -3] - The sum of the array is 12. Note: The sum can be optimized by carefully choosing which elements to swap, considering that some operations may not change the sum but rearrange elements to allow future beneficial swaps.","solution":"def max_sum_after_operations(n, m, arr): Returns the maximum possible sum of the array after performing the operation exactly `m` times. sorted_arr = sorted(arr) sum_arr = sum(arr) negative_count = len([x for x in arr if x < 0]) swaps = min(m, negative_count) for i in range(swaps): sum_arr += -2 * sorted_arr[i] return sum_arr"},{"question":"You are given a matrix with `n` rows and `m` columns. Each cell in the matrix contains either a \'1\' or a \'0\'. You need to process the matrix to locate the largest submatrix that consists entirely of \'1\'s, then output the area of this largest submatrix. It is guaranteed that the matrix contains at least one \'1\'. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), the number of rows and columns in the matrix. - Each of the next `n` lines contains `m` characters, either \'1\' or \'0\', representing the cells of the matrix. **Output:** - Print a single integer representing the area of the largest submatrix consisting entirely of \'1\'s. **Example:** Input: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output: ``` 6 ``` In this example, the largest submatrix of \'1\'s is: ``` 1 1 1 1 1 1 ``` with an area of 6.","solution":"def largest_rectangle_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def maximal_rectangle(matrix): if not matrix: return 0 max_area = 0 row_len = len(matrix[0]) heights = [0] * row_len for row in matrix: for index in range(row_len): if row[index] == \'1\': heights[index] += 1 else: heights[index] = 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def main(input_data): lines = input_data.splitlines() n, m = map(int, lines[0].split()) matrix = [line.split() for line in lines[1:n+1]] return maximal_rectangle(matrix) # To use \'main\' function with input as specified in the problem statement, # you can pass the input data as a string."},{"question":"You are given a list of integers representing the heights of people standing in a row. You are also given a set number of bricks to distribute among some or all of the people. Each brick increases a person\'s height by one unit. Your task is to determine the maximum possible height of the shortest person in the row after distributing all the bricks. The first line of input contains two integers, n and b (1 le n le 10^5, 0 le b le 10^9), representing the number of people in the row and the total number of bricks available, respectively. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) representing the initial heights of the people. Output one integer, the maximum possible height of the shortest person after distributing all the bricks. # Example Input ``` 5 10 2 5 4 6 7 ``` Output ``` 6 ``` # Explanation Initially, the heights are [2, 5, 4, 6, 7]. We have 10 bricks to distribute. - Distribute 4 bricks to the person with height 2, so their height becomes 6. - Distribute 2 bricks to the person with height 4, so their height becomes 6. - Distribute 3 bricks to the person with height 5, so their height becomes 8. - Distribute 1 brick to the person with height 6 to balance, so their height becomes 7. After distributing the bricks, the heights are [6, 8, 6, 7, 7]. The shortest person is now 6 units tall, and this cannot be increased further with the remaining constraints. Thus, the maximum possible height of the shortest person is 6.","solution":"def max_min_height(n, b, heights): def is_possible(min_height): bricks_needed = 0 for h in heights: if h < min_height: bricks_needed += (min_height - h) return bricks_needed <= b low, high = min(heights), max(heights) + b + 1 while low < high: mid = (low + high) // 2 if is_possible(mid): low = mid + 1 else: high = mid return low - 1"},{"question":"Given an array of integers, your task is to determine if there exists a contiguous subarray that sums to zero. A contiguous subarray is defined as a sequence of elements within the array that are consecutive and appear in the same order as they do in the array. Write a function that takes an integer array as input and returns a boolean value: `true` if such a subarray exists, otherwise `false`. **Input:** - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - The second line contains `n` integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4) — the elements of the array. **Output:** - Output `true` if there exists a contiguous subarray that sums to zero, otherwise output `false`. **Example:** **Input:** ``` 5 1 2 -3 4 5 ``` **Output:** ``` true ``` **Explanation:** In the example above, the subarray [1, 2, -3] sums to zero. Hence the output is `true`. **Additional Example:** **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` false ``` **Explanation:** In the second example, there is no subarray of the array [1, 2, 3, 4] that sums to zero. Hence the output is `false`. **Note:** To solve this problem efficiently, consider using a hash map to track the cumulative sums of the array elements.","solution":"def has_zero_sum_subarray(arr): Determine if a contiguous subarray sums to zero. Parameters: arr (list of int): The input array of integers Returns: bool: True if there exists a contiguous subarray that sums to zero, otherwise False cumulative_sum = 0 cumulative_sum_set = set() for num in arr: cumulative_sum += num if cumulative_sum == 0 or cumulative_sum in cumulative_sum_set: return True cumulative_sum_set.add(cumulative_sum) return False"},{"question":"A company has a fleet of delivery trucks that operate within a rectangular city grid. Each truck must deliver packages to certain addresses arranged in a grid pattern, with the bottom-left corner of the grid being (1, 1) and the top-right corner being (n, m). A truck can only move right or up. The company\'s dispatcher needs to find the number of distinct shortest paths a truck can take to deliver a package from the starting location (1, 1) to a destination location (n, m). Your task is to write a program that calculates the number of distinct shortest paths from (1, 1) to (n, m) on the grid. Input: - The input consists of two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of rows and m is the number of columns in the grid. Output: - Output a single integer representing the number of distinct shortest paths from (1, 1) to (n, m). Example: ``` Input: 3 3 Output: 6 ``` Explanation: In a 3x3 grid, there are 6 distinct shortest paths for a truck to move from (1, 1) to (3, 3). The paths are as follows: 1. Right, Right, Up, Up 2. Right, Up, Right, Up 3. Right, Up, Up, Right 4. Up, Right, Right, Up 5. Up, Right, Up, Right 6. Up, Up, Right, Right","solution":"import math def number_of_paths(n, m): Returns the number of distinct shortest paths in an n x m grid from (1, 1) to (n, m). # Calculate the binomial coefficient (n+m-2) choose (n-1) return math.comb(n + m - 2, n - 1)"},{"question":"Alice has a chessboard of size n times n where n is even. She needs to place n knights on the board such that no two knights can attack each other. Recall that a knight moves in an L-shape: two cells in one direction and then one cell perpendicular, or one cell in one direction and then two cells perpendicular. You need to determine if it is possible to place n knights on the board such that none of them can attack each other, and if so, provide one such arrangement. The first line contains a single integer n (2 leq n leq 100, and n is even). If it is possible to place the n knights in a non-attacking arrangement, print \\"YES\\" on the first line. On the next n lines, print the board configuration, where a cell containing a knight is denoted by \'K\' and an empty cell is denoted by \'.\'. If there are multiple valid arrangements, print any of them. If it is not possible to place the knights in the desired manner, print \\"NO\\". For example, if the input is: ``` 4 ``` A possible valid output is: ``` YES K . K . . K . K K . K . . K . K ```","solution":"def place_knights(n): if n % 2 != 0: return \\"NO\\" board = [[\'.\' for _ in range(n)] for _ in range(n)] # Fill the board with knights in a checkerboard pattern for i in range(n): for j in range(n): if (i + j) % 2 == 0: board[i][j] = \'K\' result = \\"YESn\\" for line in board: result += \' \'.join(line) + \'n\' return result.strip() # Example usage print(place_knights(4))"},{"question":"You are given a list of customer orders in a café. Each order contains a customer name, the items they ordered, and the quantities of those items. Your task is to summarize the total quantities of each item ordered by all customers combined. The first line of input contains an integer n (1 le n le 1000) — the number of orders. The next n lines contain the customer orders. Each line represents one customer\'s order in the format: name number_of_items, followed by number_of_items pairs of item_name and item_quantity. The items and names consist of English lowercase letters only, and item_quantity is a positive integer. The output should contain each unique item ordered and the total quantity of that item, in alphabetical order of the item names. # Input - The integer n on the first line. - Each of the next n lines contains: - A customer\'s name - The number of different items they ordered - The pairs of item name and quantity. # Output - Lines of summary showing each item name and the total quantity ordered. The lines should be sorted alphabetically by item name. # Example **Input:** ``` 3 alice 2 coffee 2 cake 1 bob 3 coffee 1 sandwich 2 cake 2 charlie 1 sandwich 1 ``` **Output:** ``` cake 3 coffee 3 sandwich 3 ``` Note: If any item is not ordered by any customer, it should not appear in the output.","solution":"def summarize_orders(n, orders): Summarizes the total quantities of each item ordered by all customers. Args: n (int): Number of orders. orders (List[str]): A list of strings, each representing a customer order. Returns: dict: A dictionary with item names as keys and total quantities as values, sorted by item names. from collections import defaultdict item_quantities = defaultdict(int) for order in orders: parts = order.split() name = parts[0] num_items = int(parts[1]) items = parts[2:] for i in range(0, 2 * num_items, 2): item_name = items[i] item_quantity = int(items[i + 1]) item_quantities[item_name] += item_quantity return dict(sorted(item_quantities.items())) # Example usage: orders = [ \\"alice 2 coffee 2 cake 1\\", \\"bob 3 coffee 1 sandwich 2 cake 2\\", \\"charlie 1 sandwich 1\\" ] summarize_orders(3, orders)"},{"question":"You are given a list of cities arranged in a row, where each city is represented by its name. There are also multiple queries regarding the cities. Each query consists of two integers, `l` and `r`, which denote the starting and ending indices of a range of cities. You need to determine if there is a sequence of at least two consecutive cities within this range that have the same name. If such a sequence exists, output “YES”; otherwise, output “NO”. For example, if the cities are `[\\"Paris\\", \\"London\\", \\"Paris\\", \\"Paris\\", \\"Berlin\\"]`, then for the query `(2, 4)` the subarray is `[\\"London\\", \\"Paris\\", \\"Paris\\"]` and the answer is `YES`, since the last two cities in the subarray have the same name. The first line of input contains an integer `n` (`1 ≤ n ≤ 200000`) which denotes the number of cities. The second line contains `n` space-separated strings, each representing the name of a city. The third line contains an integer `q` (`1 ≤ q ≤ 100000`) which denotes the number of queries. Each of the next `q` lines contains two integers `l` and `r` (`1 ≤ l ≤ r ≤ n`), which represent a query. Print the result for each query on a new line. **Example:** Input: ``` 6 Paris London Paris Paris Berlin Paris 3 1 3 2 4 4 6 ``` Output: ``` NO YES NO ```","solution":"def check_consecutive_cities(cities, queries): Given a list of cities and multiple queries, determine if there is a sequence of at least two consecutive cities within the specified range that have the same name. results = [] for l, r in queries: found_consecutive = False for i in range(l - 1, r - 1): if cities[i] == cities[i + 1]: found_consecutive = True break if found_consecutive: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Sample input n = 6 city_list = [\\"Paris\\", \\"London\\", \\"Paris\\", \\"Paris\\", \\"Berlin\\", \\"Paris\\"] queries = [(1, 3), (2, 4), (4, 6)] # Get results result = check_consecutive_cities(city_list, queries) print(result) # Output: [\'NO\', \'YES\', \'NO\']"},{"question":"You are given a tree with n nodes. Each node is initially painted either red or blue. You want to find the maximum number of nodes of the same color that form a connected subtree. A subtree is a connected part of the tree and is characterized by having exactly one root node. The nodes of the subtree should all be painted the same color. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of nodes in the tree. The second line contains n integers c1, c2, ..., cn (ci = 0 or 1) — where ci describes the color of the i-th node (0 means red, 1 means blue). Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) describing an edge connecting node u and node v. Output Print the maximum number of nodes of the same color that form a connected subtree. Example Input: 7 1 1 0 0 1 0 0 1 2 1 3 2 4 2 5 3 6 3 7 Output: 3 Explanation: The largest connected subtree of nodes with the same color is formed by nodes 1, 2 and 5 (all blue), or by nodes 3, 6, and 7 (all red). Both have a size of 3.","solution":"from collections import defaultdict, deque def max_connected_subtree(n, colors, edges): Returns the maximum number of nodes of the same color that form a connected subtree. Args: - n: int: number of nodes in the tree. - colors: List[int]: list with colors of each node (0 - red, 1 - blue). - edges: List[Tuple[int, int]]: list of edges connecting the nodes. Returns: - int: size of the largest connected subtree with nodes of the same color. # Build the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Helper function for DFS def dfs(node, parent): Perform a DFS to find the largest connected component of the same color. current_color = colors[node - 1] max_subtree = 1 for neighbor in tree[node]: if neighbor != parent and colors[neighbor - 1] == current_color: max_subtree += dfs(neighbor, node) return max_subtree max_connected_component = 1 # Traverse each node and compute the largest connected component for node in range(1, n+1): current_color = colors[node - 1] max_connected_component = max(max_connected_component, dfs(node, -1)) return max_connected_component"},{"question":"Given an infinite binary string consisting of \'0\'s and \'1\'s, you need to find the length of the longest contiguous subsequence of \'1\'s. The section of the string to analyze is defined by an interval `[l, r]`, where `l` and `r` are non-negative integers representing the positions in the binary string. The binary string is generated programmatically where the i-th character of the string is given by the value of `S(i) = floor(((i^2) mod P) / P)`, where `P` is a given prime number. For example, if `P = 5`, the first few characters of the binary string are calculated as: - `S(0) = 0` - `S(1) = 0` - `S(2) = 1` (because floor(((2^2) % 5) / 5) = floor(4 / 5)) - `S(3) = 0` - `S(4) = 1`, and so on. You need to determine the length of the longest contiguous subsequence of \'1\'s within the interval `[l, r]` inclusive. # Input - The first line contains the prime number `P` (2 ≤ P ≤ 1000). - The second line contains two integers `l` and `r` (0 ≤ l ≤ r ≤ 100000). # Output - Print a single integer — the length of the longest contiguous subsequence of \'1\'s in the defined interval `[l, r]`. # Example **Input:** ``` 5 0 10 ``` **Output:** ``` 2 ``` **Explanation:** From the given interval `[0, 10]`, the binary string constructed is `0, 0, 1, 0, 1, 0, 0, 1` (Note: We only illustrate until the character at index 7 for brevity). The longest contiguous subsequence of \'1\'s is `1, 1`, which has length 2.","solution":"import math def generate_binary_string_segment(P, l, r): segment = [] for i in range(l, r + 1): value = math.floor(((i**2) % P) / P) segment.append(value) return segment def longest_contiguous_ones(P, l, r): binary_segment = generate_binary_string_segment(P, l, r) max_count = 0 current_count = 0 for value in binary_segment: if value == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"A new cable television company wants to introduce a new service and provide their customers with one complimentary channel package based on their preferences. Each customer fills out a survey which includes a list of channel IDs they are interested in. Based on the results, the company will group customers into clusters and provide the most popular channel package in each cluster. Your task is to write a program to find the most popular channel package for each cluster of customers. Each cluster is represented by a set of customers, and a channel package is defined as the majority of channels requested by the customers in that cluster. **Input:** - The first line contains an integer n (1 le n le 10^5), the number of customers. - The following ???n??? lines contain the survey results of each customer. Each survey result starts with an integer m (1 le m le 10^3), the number of channels the customer is interested in, followed by m space-separated integers representing the channel IDs (0 to 10^9). **Output:** - Print a single line with the channel package (most popular channels) for the cluster. **Example:** **Input:** ``` 3 4 10 2 14 7 3 14 3 9 5 2 3 14 10 15 ``` **Output:** ``` 2 3 10 14 ``` **Explanation:** In this case, we have three customers: 1. Customer 1 is interested in channels [10, 2, 14, 7] 2. Customer 2 is interested in channels [14, 3, 9] 3. Customer 3 is interested in channels [2, 3, 14, 10, 15] The most popular channels are [2, 3, 10, 14] since these channels appear most frequently across all customer lists.","solution":"from collections import defaultdict def most_popular_channels(n, surveys): Returns the channel package (most popular channels) for the cluster. Args: n (int): Number of customers. surveys (list of list of int): List containing lists of survey results for each customer. Returns: list: List of most popular channel IDs in sorted order. channel_count = defaultdict(int) # Count the frequency of each channel ID for survey in surveys: for channel in survey: channel_count[channel] += 1 # Find the channels with maximum frequency max_channels = sorted([channel for channel, count in channel_count.items() if count > 1]) return max_channels"},{"question":"Danny has a string-sorting game he likes to play. In this game, he has a string consisting of lowercase English letters, and he wants to sort the string in such a way that all occurrences of each distinct letter appear together and in alphabetical order. However, Danny\'s sorting machine is limited, so it can only perform the following operation any number of times: choose any two adjacent characters and swap them. You are tasked with determining the minimum number of adjacent swaps needed to sort the string as described. Input: - The first line contains an integer ( t ) (1 ≤ ( t ) ≤ 100), the number of test cases. - Each of the next ( t ) lines contains a string ( s ) (1 ≤ |( s )| ≤ 100), the string to be sorted. Output: For each test case, output a single integer, the minimum number of adjacent swaps needed to sort the string. Example: Input: 3 abc cba aabbcc Output: 0 3 0 Explanation: - For the first test case, the string is already sorted, so zero swaps are needed. - For the second test case, you can swap \'c\' and \'b\', then swap \'c\' and \'a\', and finally swap \'b\' and \'a\' to get \\"abc\\". - For the third test case, the string is also already sorted, so no swaps are needed.","solution":"def min_adjacent_swaps_to_sort_string(s): Determines the minimum number of adjacent swaps needed to sort the string in such a way that all occurrences of each distinct letter appear together and in alphabetical order. :param s: str, the string to be sorted :return: int, the minimum number of swaps needed sorted_s = sorted(s) swaps = 0 s = list(s) for i in range(len(s)): if s[i] != sorted_s[i]: swap_index = s.index(sorted_s[i], i) while swap_index != i: s[swap_index], s[swap_index - 1] = s[swap_index - 1], s[swap_index] swap_index -= 1 swaps += 1 return swaps def process_test_cases(t, strings): results = [] for s in strings: results.append(min_adjacent_swaps_to_sort_string(s)) return results"},{"question":"You are given a string consisting of lowercase English letters and a list of queries. Each query consists of a single lowercase English letter. For each query, you need to determine the number of times the queried letter appears in the given string. The first line contains a string s (1 ≤ |s| ≤ 10^5), where |s| is the length of string s. The second line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the following q lines contains a single lowercase English letter c. Print q lines, the i-th of which should contain the number of times the letter c appears in the string s for the i-th query. Example: Input: abcabc 3 a b c Output: 2 2 2 In the first test, the string is \\"abcabc\\". The first query is \'a\', which appears 2 times. The second query is \'b\' and it also appears 2 times. The third query is \'c\', which also appears 2 times.","solution":"def count_letter_occurrences(s, queries): Returns a list of the number of times each queried letter appears in the string s. Parameters: s (str): The input string consisting of lowercase English letters. queries (list of str): A list of single lowercase English letters to query against the string s. Returns: list of int: A list of integers where each integer corresponds to the number of times a queried letter appears in s. from collections import Counter letter_count = Counter(s) result = [] for query in queries: result.append(letter_count[query]) return result"},{"question":"Alex is organizing a marathon race and has n water stations along the marathon track. Each station provides a certain number of bottles of water and has a certain capacity per bottle. His goal is to ensure that the total volume of water that runners can receive at any station does not exceed W liters. Given the number of bottles and their capacities at each station, can you determine if Alex\'s goal is achieved at all water stations? The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of water stations. The second line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the number of bottles at each station. The third line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) — the capacity per bottle at each station (in liters). The fourth line contains a single integer W (1 ≤ W ≤ 10000) — the maximum allowed total volume of water at any station. Output \\"YES\\" if Alex\'s goal is achieved at all water stations, otherwise output \\"NO\\". For example, if n = 3, the number of bottles are [2, 3, 5], capacities are [5, 3, 2], and W = 10: - The total volume at station 1 is 2 * 5 = 10 liters. - The total volume at station 2 is 3 * 3 = 9 liters. - The total volume at station 3 is 5 * 2 = 10 liters. Thus, the output should be \\"YES\\" since total volumes at all stations are within the limit W. In another example, if n = 3, the number of bottles are [4, 5, 6], capacities are [3, 4, 2], and W = 12: - The total volume at station 1 is 4 * 3 = 12 liters. - The total volume at station 2 is 5 * 4 = 20 liters. - The total volume at station 3 is 6 * 2 = 12 liters. The output should be \\"NO\\" since the total volume at station 2 exceeds the limit W.","solution":"def check_water_stations(n, bottles, capacities, W): Checks if the total volume of water at any station exceeds the limit W. Args: n : int : number of water stations bottles : list of int : number of bottles at each station capacities : list of int : capacity per bottle at each station W : int : maximum allowed total volume of water at any station Returns: str : \\"YES\\" if goal is achieved at all stations, \\"NO\\" otherwise for i in range(n): if bottles[i] * capacities[i] > W: return \\"NO\\" return \\"YES\\""},{"question":"Alice has a collection of widgets and gadgets that all need to be categorized into two distinct groups. Each widget or gadget has a distinct profit value associated with it. Alice wants to maximize the total profit for herself while minimizing the profit for her competitor, Bob. To achieve this, Alice and Bob take turns selecting items for their respective groups. Alice always goes first. There are 2n items in total, numbered from 1 to 2n. Alice and Bob can select any item that has not yet been chosen. After each selection, the chosen item is no longer available for the other player. Your task is to implement a strategy for Alice so that she maximizes her total profit given that Bob may not necessarily play optimally. If Alice has a strategy that guarantees a maximum possible profit of q or greater, she must achieve it to pass the test. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of items each player will have by the end of the game. The second line contains 2n integers p1, p2, ..., p2n (1 ≤ pi ≤ 1000) — the profit values of the items. When it is Alice\'s turn, print a single integer x (1 ≤ x ≤ 2n) — the index of the item Alice chooses. Note that Alice cannot select an item that has already been chosen. When it is Bob\'s turn, read a line containing a single integer x (1 ≤ x ≤ 2n) — the index of the item Bob chooses. It is guaranteed that this index is not chosen before and that Bob adheres to the picking rules. End your participation after the last turn without printing anything. Upon printing your choice, ensure to output end of line and flush the output to avoid an Idleness limit exceeded verdict. Use: flush(stdout) or equivalent depending on your programming language. Input example: ``` 3 1 3 5 7 9 11 ``` Output example: If Alice chooses the highest available profit item each turn: ``` 6 5 ``` Explanation: Alice and Bob take turns. Alice tries to choose items with the highest profit remaining, ensuring her total profit is maximized by the end of the game.","solution":"def alice_strategy(n, profit_values, bob_choices): Implements Alice\'s strategy to maximize the total profit. Args: n: int - the number of items each player will have by the end of the game profit_values: List[int] - the profit values of the items bob_choices: List[int] - the indices of the items chosen by Bob Returns: int - the index of the item Alice chooses # Convert the profit values with indices items = [(profit_values[i], i + 1) for i in range(2 * n)] # Sort items by their profit values in descending order items.sort(reverse=True, key=lambda x: x[0]) chosen_indices = set(bob_choices) for _, index in items: if index not in chosen_indices: return index # Example usage n = 3 profit_values = [1, 3, 5, 7, 9, 11] bob_choices = [] # Alice\'s first choice alice_first_choice = alice_strategy(n, profit_values, bob_choices) print(alice_first_choice) # Output: 6 (chooses highest profit 11) bob_choices.append(alice_first_choice) # Simulating Bob\'s choice # Continue as needed..."},{"question":"Given a binary tree, you need to determine the number of nodes that have the following property: the node\'s value is equal to the sum of the values of its immediate children nodes (left and right). The binary tree is represented as follows: - Each node is described by a structure that contains three fields: - An integer value representing the node\'s value. - A reference to the left child node (which could be None if there is no left child). - A reference to the right child node (which could be None if there is no right child). Write a function to count the number of nodes in the binary tree that satisfy the described property. # Input The input to the function is the root node of the binary tree, which is structured as follows in Python: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Your function should be defined as: ```python def count_valid_nodes(root: TreeNode) -> int: ``` # Output The function should return an integer, the number of nodes that have the value equal to the sum of their immediate children nodes. # Example Given the following binary tree: ``` 10 / 4 6 / 3 1 6 ``` The nodes with value equal to the sum of their children are: - Node with value 10 (4 + 6) - Node with value 4 (3 + 1) - Node with value 6 (Both children are None, treated as 0 + 6) The function should return 3. # Constraints - The number of nodes in the binary tree will not exceed 10^5. - Each node\'s value is between -10^5 and 10^5.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_valid_nodes(root: TreeNode) -> int: def count_valid_nodes_helper(node): if not node: return 0, 0 left_sum_nodes, left_sum = count_valid_nodes_helper(node.left) right_sum_nodes, right_sum = count_valid_nodes_helper(node.right) node_valid = 0 if node.val == left_sum + right_sum: node_valid = 1 return left_sum_nodes + right_sum_nodes + node_valid, node.val total_valid_nodes, _ = count_valid_nodes_helper(root) return total_valid_nodes"},{"question":"You are given a list of integers representing the distances of some points from the origin on a one-dimensional axis. You need to find if there exists a way to partition these points into two non-empty groups such that the sum of the distances of the points in each group is equal. The first line contains a single integer n (2 le n le 10^5) — the number of points. The second line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 10^9) — the distances of the points from the origin. Print \\"YES\\" if you can partition the points into two groups with equal sum of distances, otherwise print \\"NO\\". For example: Input: 6 1 5 7 1 5 7 Output: YES Input: 4 1 2 3 5 Output: NO","solution":"def can_partition_equal_sum(n, distances): total_sum = sum(distances) # If total sum is odd, cannot split into two equal sums if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 possible_sums = {0} for d in distances: next_sums = possible_sums.copy() for psum in possible_sums: if psum + d == target: return \\"YES\\" next_sums.add(psum + d) possible_sums = next_sums return \\"NO\\""},{"question":"A new logging tool has been introduced in a company\'s IT department to monitor server activities. The tool logs the start and end times of various tasks performed by the server each day. The server can only handle one task at a time, so if two tasks overlap, the second task starts only after the first one ends. Your task is to find out the total busy time of the server for a given day. You are given n tasks, each task is represented by a pair of integers (si, ei) where si is the start time and ei is the end time of the task. Write a program that computes the total busy time of the server. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of tasks. The following n lines contain two integers si and ei (1 ≤ si < ei ≤ 10^9), representing the start and end times of the tasks. Print a single integer — the total time the server is busy. # Example Input: ``` 3 1 3 2 6 8 10 ``` Output: ``` 7 ``` # Explanation In the given example, the server handles tasks in these intervals: (1, 3), (2, 6) and (8, 10). The total busy time is from 1 to 6 (merged intervals of the first two tasks) and from 8 to 10, thus the server is busy for 7 units of time.","solution":"def total_busy_time(tasks): if not tasks: return 0 # Sort tasks by start time tasks.sort(key=lambda x: x[0]) total_time = 0 current_start, current_end = tasks[0] for start, end in tasks[1:]: if start <= current_end: # Overlapping intervals, merge them current_end = max(current_end, end) else: # Non-overlapping interval, sum up the previous one total_time += current_end - current_start current_start, current_end = start, end # Add the last interval total_time += current_end - current_start return total_time"},{"question":"Kai is working with binary sequences and is interested in finding specific patterns within these sequences. He defines a \\"1-run\\" as the longest contiguous subsequence of consecutive 1s in a binary sequence. For example, in the binary sequence \\"1100110\\", there are two 1-runs, namely, \\"11\\" and \\"11\\", both of length 2. However, in the sequence \\"111011\\", there are also two 1-runs: \\"111\\" of length 3, and \\"11\\" of length 2. Kai wants to know the length of the longest 1-run for multiple binary sequences. Help Kai by writing a function that, given a list of binary sequences, computes the length of the longest 1-run for each sequence. # Input - The first line contains an integer t (1 le t le 10^4), the number of binary sequences. - Each of the next t lines contains a binary sequence s of length between 1 and 10^5. # Output - For each binary sequence, print the length of the longest 1-run on a new line. # Example Input ``` 3 1100110 1000001 111011 ``` Output ``` 2 1 3 ``` In the first example, the 1-runs are \\"11\\" and \\"11\\", both of length 2. The longest 1-run is of length 2. In the second example, the 1-run is \\"1\\" of length 1. The longest 1-run is of length 1. In the third example, the 1-runs are \\"111\\" and \\"11\\". The longest 1-run is \\"111\\" of length 3.","solution":"def longest_1_run(sequences): Given a list of binary sequences, compute the length of the longest 1-run for each sequence. results = [] for sequence in sequences: max_run = 0 current_run = 0 for char in sequence: if char == \'1\': current_run += 1 if current_run > max_run: max_run = current_run else: current_run = 0 results.append(max_run) return results"},{"question":"A square is called a \\"lucky square\\" if the sum of the elements in every row, every column, and both main diagonals is the same. You are given an n x n grid of integers. Your task is to determine if the grid is a lucky square. The first line of input contains an integer n (1 ≤ n ≤ 1000), which represents the size of the grid. Each of the next n lines contains n integers, separated by spaces, representing the elements of the grid. Output \\"YES\\" (without quotes) if the grid is a lucky square, otherwise output \\"NO\\" (without quotes). Example input: 3 2 7 6 9 5 1 4 3 8 Example output: YES","solution":"def is_lucky_square(grid): Determines if the given grid is a lucky square. Parameters: grid (list of list of int): The n x n grid of integers. Returns: str: \\"YES\\" if the grid is a lucky square, otherwise \\"NO\\". n = len(grid) # Calculate the sum of the first row target_sum = sum(grid[0]) # Check the sum of all rows for row in grid: if sum(row) != target_sum: return \\"NO\\" # Check the sum of all columns for col in range(n): column_sum = sum(grid[row][col] for row in range(n)) if column_sum != target_sum: return \\"NO\\" # Check the sum of the primary diagonal primary_diagonal_sum = sum(grid[i][i] for i in range(n)) if primary_diagonal_sum != target_sum: return \\"NO\\" # Check the sum of the secondary diagonal secondary_diagonal_sum = sum(grid[i][n - 1 - i] for i in range(n)) if secondary_diagonal_sum != target_sum: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers, where each element represents the height of a block. You are required to find the largest rectangle that can be formed in a histogram made up of these blocks. The width of each block is 1 unit. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of blocks in the histogram. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), the heights of the blocks. Print a single integer, the area of the largest rectangle that can be formed in the histogram. # Input ``` 5 2 1 5 6 2 3 ``` # Output ``` 10 ``` # Explanation - The largest rectangle in the given histogram has a height of 2 and spans 5 blocks, covering the indices (1, 2, 3, 4, 5). - The maximum area is thus 2 × 5 = 10.","solution":"def largest_rectangle_area(heights): Function to determine the largest rectangle area in a histogram. :param heights: List[int] - list of heights of the histogram bars :return: int - area of the largest rectangle stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Alex is managing a warehouse that keeps track of inventory stock using a database. Each item in the inventory is identified by a unique alphanumeric code and has a corresponding quantity. Due to frequent updates and checks on the inventory, Alex needs to be able to quickly check the availability of items and update their quantities on the go. You are tasked to help Alex by writing a program that can process queries of the following types: 1. `add <item_code> <quantity>` - Add the specified quantity to the item with the given item code. If the item does not exist in the inventory, add it with the specified quantity. 2. `remove <item_code> <quantity>` - Remove the specified quantity from the item with the given item code. If the remaining quantity of the item becomes less than or equal to zero, remove the item from the inventory entirely. 3. `check <item_code>` - Check if the item with the given item code exists in the inventory. If it does, print the current quantity of the item. Otherwise, print \\"NOT FOUND\\". The first line of the input contains an integer `q` (1 ≤ q ≤ 200,000), the number of queries. Each of the following `q` lines contains one query of the forms described above. Print the results of `check` queries, each on a new line. # Example Input ``` 8 add A123 50 add B234 40 check A123 remove A123 20 check A123 remove A123 30 check A123 check B234 ``` Output ``` 50 30 NOT FOUND 40 ``` Note: - In the first query, item \\"A123\\" is added with a quantity of 50. - In the second query, item \\"B234\\" is added with a quantity of 40. - The third query checks the quantity of item \\"A123\\", which is 50. - The fourth query removes 20 from item \\"A123\\", making its quantity 30. - The fifth query checks the quantity of item \\"A123\\", which is now 30. - The sixth query removes 30 from item \\"A123\\". Since the quantity becomes 0, item \\"A123\\" is removed from inventory. - The seventh query checks the quantity of item \\"A123\\", which is not found. - The eighth query checks the quantity of item \\"B234\\", which is 40.","solution":"def process_queries(q, queries): inventory = {} results = [] for query in queries: parts = query.split() command = parts[0] item_code = parts[1] if command == \\"add\\": quantity = int(parts[2]) if item_code in inventory: inventory[item_code] += quantity else: inventory[item_code] = quantity elif command == \\"remove\\": quantity = int(parts[2]) if item_code in inventory: inventory[item_code] -= quantity if inventory[item_code] <= 0: del inventory[item_code] elif command == \\"check\\": if item_code in inventory: results.append(str(inventory[item_code])) else: results.append(\\"NOT FOUND\\") return results"},{"question":"In a faraway kingdom, the villagers use a unique calendar system. Each year is divided into months, but the count of days per month varies annually. The king has asked for your help to understand the kingdom\'s calendar better. Specifically, he wants to find out the month which has the maximum number of days in a given year. The first line of input contains an integer n (1 ≤ n ≤ 12) — the number of months in the year. The next line contains n integers m1, m2, ..., mn (1 ≤ mi ≤ 100) — the number of days in each month. Output a single integer — the maximum number of days in any month. If there are multiple months with the same maximum number of days, output the number of occurrences of the maximum days. # Examples Input: 3 31 28 31 Output: 31 2 Input: 5 30 30 30 30 30 Output: 30 5","solution":"def max_days_in_month(n, days_list): Returns the maximum number of days in any month and the count of months with that maximum number of days. :param n: int - number of months :param days_list: list - list of integers representing days in each month :return: tuple - (max_days, count) max_days = max(days_list) count = days_list.count(max_days) return max_days, count"},{"question":"You are given an array of integers A of length n. You need to partition the array into exactly two non-empty subarrays such that the absolute difference between the sums of the two subarrays is minimized. Formally, you need to find two non-empty subarrays A_1 and A_2 such that: 1. A_1 and A_2 are contiguous and their union is the whole array. 2. The absolute difference between the sum of elements in A_1 and the sum of elements in A_2 is minimized. Output the minimized absolute difference. The first line contains a single integer n (2 leq n leq 10^5) — the length of the array. The second line contains n integers A_1, A_2, ldots, A_n (-10^9 leq A_i leq 10^9) — the elements of the array. Print a single integer — the minimized absolute difference. Example: Input: ``` 5 3 1 4 1 5 ``` Output: ``` 2 ``` Explanation: One optimal partition is to split the array into [3, 1, 4] and [1, 5] resulting in sums 8 and 6, respectively. The absolute difference is |8 - 6| = 2.","solution":"def min_abs_diff_partition(n, A): total_sum = sum(A) min_diff = float(\\"inf\\") current_sum = 0 for i in range(n - 1): current_sum += A[i] remaining_sum = total_sum - current_sum min_diff = min(min_diff, abs(current_sum - remaining_sum)) return min_diff"},{"question":"You are working on a project that deals with a large dataset of words. The dataset contains millions of words, and you need to perform some operations on this dataset efficiently. Specifically, you are interested in the following tasks: 1. Counting the number of occurrences of a specific word in the dataset. 2. Extracting a sublist of words from the dataset that fall within a specified alphabetical range. 3. Finding the most frequently occurring word in a sublist of words defined by a range of indices. You are given a list of words and a series of queries. Each query can be of one of the following types: 1. Count the occurrences of a word. 2. Extract and print words that fall within a given alphabetical range. 3. Find and print the most frequent word in a specified range of indices. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^6) representing the number of words in the dataset. - The second line contains `n` words. Words consist of lowercase alphabetical characters and have a maximum length of 20 characters. - The third line contains an integer `q` (1 ≤ q ≤ 10^5) representing the number of queries. - The following `q` lines each contain a query in the format described below: - Type `1`: \\"1 word\\" - Count the occurrences of the word `word`. - Type `2`: \\"2 start_word end_word\\" - Extract and print words that fall alphabetically between `start_word` and `end_word` inclusive. - Type `3`: \\"3 left right\\" - Find and print the most frequent word in the sublist of words from index `left` to `right` inclusive (1-indexed). # Output - For each query of type `1`, print a single integer representing the number of occurrences of the specified word. - For each query of type `2`, print the words that fall within the given alphabetical range, each on a new line. - For each query of type `3`, print the most frequent word in the specified range. If multiple words have the same frequency, print the lexicographically smallest word. # Example Input ``` 10 apple banana cherry banana apple apple berry cherry banana apple 5 1 apple 2 a berry 3 1 5 1 cherry 3 6 10 ``` Output ``` 4 apple banana berry apple 2 apple banana ``` # Notes - In the first example, the word \\"apple\\" appears 4 times in the dataset. - In the second example, the words that fall alphabetically between \\"a\\" and \\"berry\\" are \\"apple\\", \\"banana\\", and \\"berry\\". - In the third example, the most frequent word in the range 1 to 5 is \\"apple\\". - In the fourth example, the word \\"cherry\\" appears twice in the dataset. - In the fifth example, the most frequent word in the range 6 to 10 is \\"apple\\". Optimize your solution to handle large datasets efficiently.","solution":"from collections import Counter from bisect import bisect_left, bisect_right def process_queries(n, words, q, queries): # Store the word count word_count = Counter(words) results = [] if q == 0: return results for query in queries: parts = query.split() type = int(parts[0]) if type == 1: # Count occurrences of the specified word word = parts[1] results.append(str(word_count[word])) elif type == 2: # Extract words in the given alphabetical range start_word, end_word = parts[1], parts[2] in_range_words = [] # Use a set to avoid duplicates and then sort for word in words: if start_word <= word <= end_word: in_range_words.append(word) # Sort and ensure unique words only in_range_words = sorted(set(in_range_words)) results.extend(in_range_words) elif type == 3: # Find the most frequent word in the specified range left, right = int(parts[1]) - 1, int(parts[2]) sublist = words[left:right] sublist_count = Counter(sublist) most_common_word, freq = min(sublist_count.items(), key=lambda pair: (-pair[1], pair[0])) results.append(most_common_word) return results"},{"question":"Given an array of integers, your task is to determine if it\'s possible to rearrange the array such that the difference between any two consecutive elements is equal to 1. If it is possible, output \\"YES\\", otherwise output \\"NO\\". # Input The first line contains a single integer t (1 leq t leq 10^4) - the number of test cases. Each of the next t lines contains: - a single integer n (2 leq n leq 10^5) - the number of elements in the array. - an array of n integers a_1, a_2, ldots, a_n (-10^6 leq a_i leq 10^6) - the elements of the array. It is guaranteed that the total number of elements across all test cases does not exceed 10^6. # Output For each test case, output \\"YES\\" if it\'s possible to rearrange the array such that the difference between any two consecutive elements is equal to 1, otherwise output \\"NO\\". # Example Input ``` 3 3 3 2 1 4 1 2 4 3 3 1 5 2 ``` Output ``` YES YES NO ``` # Explanation - For the first test case, the array can be rearranged as [1, 2, 3] (difference between each consecutive element is 1). - For the second test case, the array can be rearranged as [1, 2, 3, 4]. - For the third test case, it is impossible to rearrange the array such that the difference between any two consecutive elements is 1.","solution":"def can_rearrange(arr): Determines if an array can be rearranged such that the difference between any two consecutive elements is equal to one. Parameters: arr (list of int): A list of integers representing the array. Returns: str: \\"YES\\" if it is possible to rearrange the array, otherwise \\"NO\\". arr.sort() for i in range(1, len(arr)): if arr[i] - arr[i - 1] != 1: return \\"NO\\" return \\"YES\\" def solve(t, test_cases): Solves the problem for the given number of test cases. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains n (number of elements) and the array. Returns: list of str: Results for each test case. results = [] for n, arr in test_cases: results.append(can_rearrange(arr)) return results"},{"question":"Tom loves painting and has a house with a rectangular floor of size n x m. He wants to paint the entire floor using a set of brushes he has. Each brush can paint a square of 1x1, 1x2, or 2x2 only. Tom doesn\'t want to waste any paint, so he wants to cover the entire floor with one brush type only (i.e., all 1x1 squares, or all 1x2 squares, or all 2x2 squares). However, because of the dimensions of his floor, it\'s not always possible to cover the entire floor without gaps using the same type of brush. Tom needs your help to determine the minimum amount of paint he would waste, if any, given his floor dimensions. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of Tom\'s floor. The output should be a single integer — the minimum amount of paint that Tom would waste to cover the entire floor, if there\'s no way to cover the floor completely without gaps using any of the brush types, return -1. In the first sample, Tom\'s floor dimensions are 3 x 3. He cannot cover the floor completely with any of the brushes without gaps. In the second sample, Tom\'s floor dimensions are 2 x 4. He can use the 1x2 brush to cover the floor completely with no waste.","solution":"def minimum_paint_waste(n, m): Returns the minimum amount of paint wasted to cover the entire floor using 1x1, 1x2 or 2x2 brushes. If it\'s not possible to cover the floor completely with a brush type, return -1. # Always possible to cover floor without any waste using 1x1 brush if n % 2 == 0 and m % 2 == 0: return 0 # ideal case, `n` and `m` are both even, no waste with 2x2 brush elif n % 2 == 0 or m % 2 == 0: return 0 # at least one even dimension, no waste with 1x2 brush else: return 1 # both dimensions are odd, 1x1 brush can cover with a single piece waste # Example Usage # n, m = 3, 3 # print(minimum_paint_waste(n, m)) # Expected: 1 n, m = 2, 4 print(minimum_paint_waste(n, m)) # Expected: 0"},{"question":"In a certain university, students are given marks for various subjects. After all the exams are over, students can compare their performance with others. Let\'s consider an interesting scenario where the students want to know how many distinct average marks can be generated when considering all possible contiguous subarrays of the marks they received. You are given an array of integers representing students\' marks in each subject: - Calculate the distinct average marks that can be generated from all possible contiguous subarrays of the input array. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of subjects (and hence the number of marks). - The second line contains n integers representing the marks in the subjects where each mark is between 1 and 100. Output: - Print the sole integer which is the number of distinct average marks that can be generated. For example, if the array `marks` is `[1, 2, 3]`, the possible contiguous subarrays are: - `[1]` with average 1 - `[2]` with average 2 - `[3]` with average 3 - `[1, 2]` with average 1.5 - `[2, 3]` with average 2.5 - `[1, 2, 3]` with average 2 The distinct average marks are: 1, 2, 3, 1.5, 2.5 thus the output should be 5.","solution":"def distinct_averages(marks): Calculates the number of distinct average marks that can be generated from all possible contiguous subarrays of marks. :param marks: List[int] - List of integers representing marks in subjects :return: int - Number of distinct average marks n = len(marks) distinct_avg = set() for i in range(n): for j in range(i, n): subarray = marks[i:j+1] avg = sum(subarray) / len(subarray) distinct_avg.add(avg) return len(distinct_avg) # Example to verify the function # marks = [1, 2, 3] # print(distinct_averages(marks)) # Expected Output: 5"},{"question":"In a coding competition, you need to implement a feature that helps users track their progress across multiple challenges. You are given a list of challenge names and the time taken by a user to complete each challenge. For analytics purposes, you need to compute the following: 1. The average time taken to complete a challenge. 2. The name of the challenge that took the least time. 3. The name of the challenge that took the most time. The input format consists of: - An integer `n` (1 ≤ n ≤ 100) representing the number of challenges. - Next `n` lines, each containing a string `name` representing the name of the challenge (which contains no spaces and has a length of 1 to 100 characters) followed by an integer `time` (1 ≤ time ≤ 10^3) representing the time taken in seconds to complete the challenge. The output should be: - A single floating-point number representing the average time taken to complete a challenge, rounded to 2 decimal places. - The name of the challenge that took the least amount of time. - The name of the challenge that took the most amount of time. If there are multiple challenges with the same time, consider the first one in the input for both the least and most time. # Example Input ``` 3 Challenge1 300 Challenge2 150 Challenge3 600 ``` Output ``` 350.00 Challenge2 Challenge3 ``` # Explanation: - The average time is (300 + 150 + 600) / 3 = 350.00 - The least time challenge is `Challenge2` with 150 seconds. - The most time challenge is `Challenge3` with 600 seconds.","solution":"def analyze_challenges(challenges): Analyzes the given list of challenges and times. Args: challenges (list): A list of tuples containing challenge name and time taken Returns: tuple: A tuple containing the average time, the name of the challenge with the least time, and the name of the challenge with the most time. total_time = 0 min_time = float(\'inf\') max_time = float(\'-inf\') min_challenge = \\"\\" max_challenge = \\"\\" for challenge, time in challenges: total_time += time if time < min_time: min_time = time min_challenge = challenge if time > max_time: max_time = time max_challenge = challenge average_time = round(total_time / len(challenges), 2) return average_time, min_challenge, max_challenge"},{"question":"Given a sequence of `n` integers, find the length of the longest contiguous subarray such that all elements in this subarray are distinct. # Input: The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. # Output: Print a single integer — the length of the longest contiguous subarray with all elements distinct. # Example: Input: ``` 7 1 2 1 3 4 3 5 ``` Output: ``` 4 ``` # Explanation: In the example, the longest contiguous subarray with all distinct elements is `[1, 3, 4, 3]` or `[2 1 3 4]`, both of which have lengths of 4. Therefore, the answer is 4.","solution":"def longest_distinct_subarray_length(n, arr): Returns the length of the longest contiguous subarray with all distinct elements. Parameters: n (int): The number of elements in the array. arr (list of int): The elements of the array. Returns: int: The length of the longest contiguous subarray with all distinct elements. if n == 0: return 0 last_seen = {} max_length = 0 start = 0 for end in range(n): if arr[end] in last_seen: start = max(start, last_seen[arr[end]] + 1) last_seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"In a land far away, there is a magical tree with n nodes. Each node has a positive integer magical value. The nodes are connected in a way that forms a tree structure (i.e., a connected graph without cycles). The royalties are interested in finding the maximum sum of magical values in any subtree of the tree. A subtree is defined as any node along with all its descendants. Your task is to help them find this maximum possible sum. Input format: - The first line contains an integer t (1 le t le 10^4) — the number of test cases. - The first line of each test case contains one integer n (1 le n le 10^5) — the number of nodes in the tree. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), where a_i is the magical value of the i-th node. - The next n-1 lines contain two integers u and v (1 le u, v le n), indicating that there is an edge connecting node u and node v. Output format: - For each test case, print one integer — the maximum sum of magical values in any subtree. Example: Input: ``` 2 3 3 2 1 1 2 1 3 5 1 2 3 4 5 1 2 1 3 3 4 3 5 ``` Output: ``` 6 15 ``` In the first example, choosing the subtree rooted at node 1 includes all nodes: the total sum is 3 + 2 + 1 = 6. In the second example, the subtree rooted at node 1 includes all nodes: the total sum is 1 + 2 + 3 + 4 + 5 = 15.","solution":"import sys sys.setrecursionlimit(200000) def max_subtree_sum(n, values, edges): from collections import defaultdict # Build the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) max_sum = [-float(\'inf\')] visited = [False] * (n + 1) # Helper function for Depth First Search def dfs(node): visited[node] = True current_sum = values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: current_sum += dfs(neighbor) # Update the maximum subtree sum max_sum[0] = max(max_sum[0], current_sum) return current_sum # Start DFS from node 1 (as it\'s guaranteed to be a tree) dfs(1) return max_sum[0] def solve(test_cases): results = [] for n, values, edges in test_cases: results.append(max_subtree_sum(n, values, edges)) return results"},{"question":"Vova is participating in a programming competition where he needs to handle several types of operations on an array of integers. The array is initially empty, and Vova can perform the following operations: 1. Add an integer x to the array. 2. Remove an integer x from the array. If multiple instances of x exist, remove only one. 3. Find the maximum integer in the array. Vova wants to make sure his operations are performed efficiently. Your task is to implement a program that supports these operations. The first line of input contains a single integer q (1 ≤ q ≤ 10^5) — the number of operations Vova needs to perform. Each of the next q lines contains an operation, represented as follows: - \\"+ x\\" (1 ≤ x ≤ 100) — add integer x to the array. - \\"- x\\" (1 ≤ x ≤ 100) — remove one instance of integer x from the array. - \\"?\\" — print the maximum integer in the array. If the array is empty, print \\"Empty\\". You should process the operations in the order they are given and output the result of each \\"?\\" operation. Example: Input: 8 + 5 + 3 + 5 ? - 5 ? - 5 ? - 3 ? Output: 5 5 3 Empty","solution":"class VovaArrayOperations: def __init__(self): self.arr = [] def add(self, x): self.arr.append(x) def remove(self, x): if x in self.arr: self.arr.remove(x) def get_max(self): if self.arr: return max(self.arr) else: return \\"Empty\\" def process_operations(operations): vova = VovaArrayOperations() result = [] for op in operations: if op[0] == \\"+\\": vova.add(int(op[1])) elif op[0] == \\"-\\": vova.remove(int(op[1])) elif op[0] == \\"?\\": result.append(vova.get_max()) return result"},{"question":"You are given a sequence of daily stock prices represented as an array of integers. Your task is to calculate the maximum possible profit you can achieve by buying and selling the stock exactly once. Specifically, you must choose two distinct days such that you buy the stock on the first day and sell it on one of the subsequent days. The profit is defined as the difference between the selling and buying prices. Write a function that takes an array of integers representing stock prices and returns the maximum profit you can achieve from this transaction. If no profit can be achieved, return 0. The first line contains a single integer n (1 le n le 2 cdot 10^5) — the number of days (length of the array). The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^5) — the stock prices on these days. Output a single integer — the maximum possible profit, or 0 if no profit can be achieved. # Example **Input:** ``` 6 7 1 5 3 6 4 ``` **Output:** ``` 5 ``` **Explanation:** - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. - Maximum profit = 5.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling stock once from a list of daily stock prices. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given a binary tree, your task is to find out the length of the longest path such that no two adjacent nodes on this path have the same value. The path can start and end at any node in the tree, and must move along the parent-child connections. The binary tree is defined as follows: - Each node has a value, which is an integer. - Each node can have at most two children (left and right). The input consists of several test cases. The first line of the input contains an integer t (1 le t le 10), the number of test cases. For each test case: - The first line contains an integer n (1 le n le 10^5), the number of nodes in the binary tree. - The next line contains n integers, representing the values of the nodes in the tree in level-order traversal. - The next n-1 lines contain two integers each, describing the parent-child relationships in the tree. For each relationship, the first integer is the parent node index, and the second integer is the child node index. The indices are 1-based. Output the length of the longest path such that no two adjacent nodes on this path have the same value for each test case. **Example Input:** ``` 2 5 1 2 3 4 5 1 2 1 3 2 4 2 5 4 1 1 1 1 1 2 1 3 2 4 ``` **Example Output:** ``` 4 1 ``` **Explanation:** In the first test case, the longest path with distinct adjacent node values is from node 4 through node 2 to node 5, covering 4 nodes in total (4-2-1-3, or 4-2-1-5, both are valid paths). In the second test case, all nodes have the same value, hence the longest path with distinct adjacent node values is just 1 node.","solution":"def longest_distinct_path(n, values, edges): from collections import defaultdict, deque # Create adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS function to find the longest path def bfs(start): queue = deque([start]) visited = set() dist = {start: 1} max_length = 1 while queue: node = queue.popleft() visited.add(node) curr_value = values[node - 1] # Adjust index for 1-based node index for neighbor in tree[node]: if neighbor not in visited: if values[neighbor - 1] != curr_value: dist[neighbor] = dist[node] + 1 max_length = max(max_length, dist[neighbor]) else: dist[neighbor] = 1 # Reset length if values are same queue.append(neighbor) return max_length # Check for each node as starting point due to any node can start longest_path_len = 1 for i in range(1, n + 1): if len(tree[i]) > 0: longest_path_len = max(longest_path_len, bfs(i)) return longest_path_len def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][\'n\'] values = test_cases[i][\'values\'] edges = test_cases[i][\'edges\'] result = longest_distinct_path(n, values, edges) results.append(result) return results"},{"question":"Ella is a researcher studying chemical compounds. Each compound formula can be represented as a string consisting of uppercase Latin letters without spaces or punctuation marks. Each letter represents a different chemical element. Ella has identified a set of hazardous \\"reaction pairs\\" — pairs of elements that cannot appear next to each other in the compound formula due to potential dangerous reactions. The order of the elements matters in this case (for example, if the pair \\"AB\\" is hazardous, the occurrence of \\"AB\\" is hazardous but \\"BA\\" is not). Ella needs to analyze several compound formulas and determine the minimum number of elements that need to be removed to make the formula safe by ensuring no hazardous reaction pairs appear next to each other. The first line of input contains a non-empty string s, representing the compound formula. The length of s doesn\'t exceed 105. The next line contains integer k (0 ≤ k ≤ 13) — the number of hazardous reaction pairs. Next k lines contain descriptions of hazardous reaction pairs. Each line contains exactly two different uppercase Latin letters representing a hazardous reaction pair. Print the single number — the minimum number of elements that need to be removed so that the resulting compound formula has no hazardous reaction pairs next to each other. For example, if the input is: ``` AAABBBCCC 2 AB BC ``` In the given sample, you should remove one \'B\' to avoid the \\"AB\\" pair and one \'C\' to avoid the \\"BC\\" pair, resulting in the output: ``` 2 ```","solution":"def min_removals_to_avoid_hazardous_pairs(s, hazardous_pairs): This function determines the minimum number of elements to remove from the compound formula to ensure no hazardous reaction pairs appear next to each other. Parameters: s (str): The compound formula. hazardous_pairs (list of str): List of strings representing hazardous pairs. Returns: int: The minimum number of elements to remove. n = len(s) if n == 1: return 0 # Initialize the hazardous set for quick lookup hazardous_set = set(hazardous_pairs) to_remove = 0 # Iterate through the string to count the hazardous pairs i = 0 while i < len(s) - 1: if s[i:i+2] in hazardous_set: to_remove += 1 # Remove one of the characters, continue with the next character i += 1 # skip the next character to avoid creating a new hazard i += 1 return to_remove"},{"question":"Chef has a sequence of dishes, each with a certain spice level, that he wants to serve to his guests at his restaurant. Given an array of integers representing the spice levels of these dishes, Chef wants to ensure that the difference in spice levels between any two adjacent dishes is minimized when they are served sequentially. You are to help Chef find the minimum difference in spice levels between any two adjacent dishes after sorting the dishes optimally. The first line contains a single integer n (2 le n le 10^5) — the number of dishes. The second line contains n integers, a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the spice levels of the dishes. Output a single integer — the minimum absolute difference in spice levels between any two adjacent dishes when sorted optimally. In the first example, Chef has two dishes with spice levels 3 and 8. The difference between these two dishes when served is 8 - 3 = 5. In the second example, Chef has four dishes with spice levels 1, 4, 7, and 9. When sorted, the minimum difference between any two adjacent dishes is 3 (between 4 and 7). Example Input 1: 2 3 8 Example Output 1: 5 Example Input 2: 4 9 1 7 4 Example Output 2: 2 Chef needs your help to quickly determine this minimum difference so that his guests can enjoy the dishes with the most appropriate progression of spice levels.","solution":"def min_difference(n, spice_levels): if n < 2: return 0 # if there\'s less than 2 dishes, no difference to consider # Sort the spice levels spice_levels.sort() # Initialize minimum difference to a large number min_diff = float(\'inf\') # Calculate the minimum difference between adjacent dishes in the sorted list for i in range(1, n): min_diff = min(min_diff, spice_levels[i] - spice_levels[i-1]) return min_diff # Example Usage # n = 4 # spice_levels = [9, 1, 7, 4] # Output: 2 # print(min_difference(n, spice_levels))"},{"question":"A factory has a large conveyor belt system where items are transported along a line of sections. Each section of the conveyor belt is initially empty. Throughout the day, items are placed on the beginning segment of the conveyor belt and move toward the end. Each item has a specific priority, and the priority dictates the order in which items must be processed once they reach a particular section of the belt. There are two types of operations performed on the conveyor belt: 1. Place an item with a given priority on the beginning segment. 2. Move all items one segment forward, from the first segment to the last segment. At any point in time, your task is to: 1. Record the current state of the conveyor belt. 2. Print the highest priority item in the last section of the conveyor belt if it is not empty. Implement a simulation of this conveyor belt system. Initially, the conveyor belt has `n` sections (indexed from 1 to `n`), all of which are empty. You will be given a series of operations to perform. Output the state of the belt after each operation and the highest priority item in the last section if applicable. The operations are provided in the following format: - `1 p`, where `p` is the priority of a new item to be placed on the beginning segment of the conveyor belt. - `2`, which represents moving all items one segment forward. The first line of input contains two integers `n` and `m` (1 ≤ `n, m ≤ 10^5) – the number of sections on the conveyor belt and the number of operations, respectively. The next `m` lines contain one of the two types of operations as described. # Example Input ``` 4 6 1 5 1 3 2 1 2 2 2 ``` Output ``` 5 3 0 0 3 0 0 0 5 3 0 0 3 0 0 0 2 3 0 0 The highest priority item in the last section is: 0 5 2 0 0 The highest priority item in the last section is: 0 5 3 2 0 The highest priority item in the last section is: 0 5 2 3 0 The highest priority item in the last section is: 0 2 0 0 5 The highest priority item in the last section is: 5 ``` The state of the belt after each operation is printed as a list of integers, where each integer represents the item priority at that section. If an operation is type `2` and the last section contains an item, print its highest priority after updating the belt\'s state. If the last section is empty, print `0`.","solution":"class ConveyorBelt: def __init__(self, n): self.n = n self.belt = [0] * n def place_item(self, priority): for i in range(self.n - 1, 0, -1): self.belt[i] = self.belt[i-1] self.belt[0] = priority print(self.belt) def move_items_forward(self): if self.n > 1: for i in range(self.n - 1): self.belt[i] = self.belt[i + 1] self.belt[self.n - 1] = 0 print(self.belt) # Output the highest priority item in the last section, if any highest_priority = max(self.belt[self.n-1], 0) print(f\'The highest priority item in the last section is: {highest_priority}\') def conveyor_belt_simulation(n, m, operations): conveyor_belt = ConveyorBelt(n) for op in operations: if op[0] == 1: conveyor_belt.place_item(op[1]) elif op[0] == 2: conveyor_belt.move_items_forward()"},{"question":"Tom loves puzzles where he needs to find words hidden within a jumble of letters. Recently, he came across a particular type of puzzle that interested him: finding all palindromic substrings in a given string. A palindromic substring is a substring that reads the same backward as forward. Now, Tom asks for your help to solve such a puzzle programmatically. Your task is to write a program that, given a string, outputs the number of distinct palindromic substrings contained in it. The first line contains a single integer t (1 ≤ t ≤ 100) denoting the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000), which consists of lowercase English letters. Output t lines. The i-th line should contain a single integer: the number of distinct palindromic substrings in the i-th string. For example, if the input string is \\"aabaa\\", it has 5 distinct palindromic substrings: \\"a\\", \\"aa\\", \\"aabaa\\", \\"aba\\", and \\"b\\". **Example Input:** ``` 2 aabaa abc ``` **Example Output:** ``` 5 3 ``` **Explanation:** For the first string \\"aabaa\\": - The distinct palindromic substrings are: \\"a\\", \\"aa\\", \\"aabaa\\", \\"aba\\", and \\"b\\". For the second string \\"abc\\": - The distinct palindromic substrings are: \\"a\\", \\"b\\", and \\"c\\".","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. n = len(s) palindromes = set() # Dynamic programming table dp = [[False] * n for _ in range(n)] # Every single character is a palindrome for i in range(n): dp[i][i] = True palindromes.add(s[i]) # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True palindromes.add(s[i:i + 2]) # Check for substrings of length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True palindromes.add(s[i:j + 1]) return len(palindromes) def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(count_distinct_palindromic_substrings(s)) return results"},{"question":"James loves playing board games, especially with special dice. He decided to create his own dice game and experimented with painting the faces of the dice. Each die he paints has n faces, each face has a unique number from 1 to n. However, while playing, he noticed a challenge: If two dice have the exact same numbers painted on them, then it\'s impossible to tell them apart just by looking at them. James wants to ensure that each die in his set has a distinct way of assigning numbers to its faces. James has decided to write a program to help him determine if two dice configurations are distinguishable. Two dice configurations are considered the same if one configuration can be rotated to look exactly like the other. A die has n faces, so if n=6 (like a standard die), there can be many distinct permutations of numbers on its faces, but not all permutations are unique due to the rotations. The task is to write a function `are_dice_distinguishable(n, dice1, dice2)` which returns `True` if the two dice configurations are distinguishable and `False` if they are not. # Function Signature ```python def are_dice_distinguishable(n: int, dice1: List[int], dice2: List[int]) -> bool: ``` # Input - `n`: an integer representing the number of faces on the dice (3 ≤ n ≤ 100). - `dice1`: a list of `n` integers representing the numbered faces of the first die. - `dice2`: a list of `n` integers representing the numbered faces of the second die. # Output - Returns `True` if the dice configurations are distinguishable, `False` otherwise. # Example ```python print(are_dice_distinguishable(6, [1,2,3,4,5,6], [1,2,3,4,5,6])) # Output: False print(are_dice_distinguishable(6, [1,2,3,4,5,6], [6,5,4,3,2,1])) # Output: True ``` # Notes - In the first example, both dice have the same configuration, so they are not distinguishable. - In the second example, although the numbers are the same, the configurations are different and cannot match any rotation of the other, so they are distinguishable.","solution":"from typing import List def are_dice_distinguishable(n: int, dice1: List[int], dice2: List[int]) -> bool: Determine if two dice configurations are distinguishable. from collections import deque # Helper function to generate all rotations of dice faces def generate_rotations(dice): rotations = [] dq = deque(dice) for _ in range(n): rotations.append(list(dq)) dq.rotate(1) return rotations # Generate all possible rotations for both dice rotations1 = set(tuple(rot) for rot in generate_rotations(dice1)) rotations2 = set(tuple(rot) for rot in generate_rotations(dice2)) # Check if there is any intersection of these sets return rotations1.isdisjoint(rotations2)"},{"question":"You are given a set of n recipes, each of which consists of a list of ingredients. Some ingredients are considered optional, meaning they\'re not required for the recipe to be complete. However, each recipe must still have at least one unique required ingredient. Your task is to determine if it\'s possible to combine multiple recipes such that each recipe contains at least one required ingredient that isn\'t shared with the other recipes in the combination. You must ensure that no two recipes in the combination have exactly the same set of required ingredients. The first line of input contains the number n (1 ≤ n ≤ 100) — the number of recipes. Each of the next n lines describes a recipe. A recipe is described by an integer m (1 ≤ m ≤ 50) followed by m strings representing the ingredients. Each ingredient string is prefixed with either \'R:\' for required ingredients or \'O:\' for optional ingredients. Output \\"YES\\" if there is a way to combine recipes satisfying the above conditions, or \\"NO\\" otherwise. Example input: ``` 3 3 R:salt R:pepper O:oil 3 R:flour R:water O:yeast 3 R:salt R:water O:sugar ``` Example output: ``` YES ``` Example output: ``` NO ``` Explanation: In the first example, each recipe has one unique required ingredient not shared with the others. In the second example, the first and third recipes share all required ingredients and cannot be uniquely identified.","solution":"def can_combine_recipes(n, recipes): required_ingredients_sets = [] for recipe in recipes: required_ingredients = set( ingredient[2:] for ingredient in recipe if ingredient.startswith(\'R:\') ) required_ingredients_sets.append(frozenset(required_ingredients)) # No two recipes should have exactly the same set of required ingredients if len(required_ingredients_sets) != len(set(required_ingredients_sets)): return \\"NO\\" return \\"YES\\""},{"question":"There is a factory with `n` production lines, each of which can produce a certain number of items per day. The goal is to maximize production for a period of `d` days considering the constraints of each production line. Additionally, due to maintenance, each line needs to be shut down for maintenance exactly once during the period, and it can remain shut down for one full day. Your task is to determine the maximum number of items that can be produced during the period. The first line of input contains two integers `n` and `d` (1 ≤ n ≤ 500, 1 ≤ d ≤ 500) - the number of production lines and the number of days. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1000) - the daily production capacity of each production line. Print a single integer - the maximum number of items that can be produced over the period of `d` days, considering the maintenance constraints. For example, if the input is: ``` 3 4 3 2 5 ``` The output should be: ``` 30 ``` Explanation: One possible optimal plan is: - Line 1 shutdown on day 4, producing 3 + 3 + 3 = 9 units. - Line 2 shutdown on day 3, producing 2 + 2 + 2 = 6 units. - Line 3 shutdown on day 2, producing 5 + 5 + 5 = 15 units. Total production: 9 + 6 + 15 = 30 units.","solution":"def maximize_production(n, d, productions): Maximizes the production for `d` days across `n` production lines, considering each line needs to be shut down for maintenance exactly once. Parameters: n (int): Number of production lines. d (int): Number of days. productions (list of int): Daily production capacity of each production line. Returns: int: The maximum number of items that can be produced over the period of `d` days. max_production = 0 for line_production in productions: max_production += line_production * (d - 1) return max_production # Example usage n = 3 d = 4 productions = [3, 2, 5] print(maximize_production(n, d, productions)) # Output: 30"},{"question":"Zelda is exploring a mysterious cave with a complex network of tunnels and junctions. The cave consists of `n` junctions and `m` bidirectional tunnels. Each tunnel is numbered from 1 to `m` and has a unique length. Zelda can traverse each tunnel in either direction but needs to reach her destination within a specified time limit. She starts her journey at junction `s` and needs to reach junction `t` within a given time limit `dvr`. Given the cave\'s layout and the length of each tunnel, determine if Zelda can reach her destination within the allowable time for multiple queries. Input: - The first line contains three integers `n`, `m`, and `q` (2 ≤ n ≤ 1000, 1 ≤ m, q ≤ 200,000) — the number of junctions in the cave, the number of tunnels, and the number of queries, respectively. - Each of the next `m` lines contains three integers `vi`, `ui`, and `wi` (1 ≤ vi, ui ≤ n, vi ≠ ui, 1 ≤ wi ≤ 100) — the indices of the junctions connected by the i-th tunnel and the length of the i-th tunnel. - Each of the next `q` lines contains three integers `si`, `ti`, and `dvr` (1 ≤ si, ti ≤ n, si ≠ ti, 1 ≤ dvr ≤ 1,000,000) — the starting junction, the destination junction, and the maximum allowable travel time, respectively. Output: For each query, print \\"Yes\\" if Zelda can reach junction `t` from junction `s` within the given duration `dvr`, otherwise print \\"No\\".","solution":"import heapq def dijkstra(graph, start, n): Runs Dijkstra\'s algorithm to find the shortest path from the start node to all other nodes in the graph. distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def zelda_cave(n, m, q, tunnels, queries): results = [] graph = {i: [] for i in range(1, n+1)} for vi, ui, wi in tunnels: graph[vi].append((ui, wi)) graph[ui].append((vi, wi)) for si, ti, dvr in queries: distances = dijkstra(graph, si, n) if distances[ti] <= dvr: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an undirected graph with n nodes and m edges, your task is to determine if it\'s possible to split the nodes into two groups such that each group contains exactly half of the nodes and no two nodes within the same group are directly connected. The first line contains two space-separated integers n and m (2 ≤ n ≤ 2 · 10^5, 0 ≤ m ≤ n(n-1)/2) — the number of nodes and the number of edges, respectively. Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an undirected edge between nodes u and v. There will be no duplicate edges. If it\'s possible to split the nodes into two groups of exactly n/2 nodes each such that no two nodes within the same group are directly connected, print \\"YES\\". Otherwise, print \\"NO\\". If n is odd, print \\"NO\\" (since it\'s impossible to split an odd number of nodes into two equal groups). Print the answer in a single line. Example: Input: 6 5 1 2 2 3 3 4 4 5 5 6 Output: YES Here, it\'s possible to split the nodes into two groups: {1, 3, 5} and {2, 4, 6}.","solution":"def can_split_into_two_groups(n, m, edges): from collections import defaultdict, deque if n % 2 != 0: return \\"NO\\" def bfs(node): queue = deque([node]) visited[node] = 0 counts[0] += 1 while queue: current = queue.popleft() for neighbor in graph[current]: if visited[neighbor] == -1: visited[neighbor] = 1 - visited[current] counts[visited[neighbor]] += 1 queue.append(neighbor) elif visited[neighbor] == visited[current]: return False return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [-1] * (n + 1) counts = [0, 0] for node in range(1, n + 1): if visited[node] == -1: counts = [0, 0] if not bfs(node): return \\"NO\\" return \\"YES\\" # Example usage: edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)] print(can_split_into_two_groups(6, 5, edges)) # Output: YES"},{"question":"Tina loves to play with sequences of numbers. Given a sequence of length n, she wants to minimize the difference between the maximum and minimum numbers in each subarray of a given length k. For each possible subarray of length k, Tina will find the difference between the maximum and minimum elements, then she\'d like to know the minimum of these differences over all possible subarrays of the given length. Your task is to help Tina by implementing a function that takes the length of the sequence n, the length of the subarray k, and the sequence itself as inputs, and returns the minimum difference between the maximum and minimum numbers in all subarrays of length k. The first line contains a single integer n (1 leq n leq 10^5) - the length of the sequence. The second line contains a single integer k (1 leq k leq n) - the length of the subarray. The third line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) - the sequence itself. Print a single integer - the minimum difference between the maximum and minimum numbers in all subarrays of length k. # Examples: **Input:** ``` 5 3 1 3 6 7 9 ``` **Output:** ``` 3 ``` **Explanation:** The possible subarrays of length 3 are [1, 3, 6], [3, 6, 7], and [6, 7, 9]. The difference between the maximum and minimum numbers in these subarrays are 5, 4, and 3 respectively. The minimum difference is 3.","solution":"def minimum_diff_subarray(n, k, array): Returns the minimum difference between the maximum and minimum numbers in all subarrays of length k. # Sort the array elements if it is unsorted and initialize the smallest difference to infinity. array.sort() min_diff = float(\'inf\') # Iterate over the array and find the smallest difference in every possible subarray of length k for i in range(n - k + 1): diff = array[i + k - 1] - array[i] min_diff = min(min_diff, diff) return min_diff # Example scenario # n = 5, k = 3, array = [1, 3, 6, 7, 9] # print(minimum_diff_subarray(n, k, array)) # Output should be 3"},{"question":"You are a software engineer tasked with developing a system to calculate the energy consumption of various household devices. The system should allow for dynamic updates and queries about energy usage within specific time intervals. You are given an array of integers e1, e2, ..., en, where each integer represents the energy consumption of a device in kilowatt-hours (kWh) at different time intervals. You will need to handle two types of operations: 1. Update the energy consumption of a specific device at a specific time interval. 2. Query the total energy consumption within a specific time range. The first line of the input contains two integers n and m (1 ≤ n ≤ 100,000, 1 ≤ m ≤ 100,000) – the number of devices and the number of operations respectively. The next line contains n integers e1, e2, ..., en (0 ≤ ei ≤ 10^9), where each integer is the initial energy consumption of the device at its respective time interval. The following m lines each contain an operation. An operation can be one of the following: - \\"1 pos newVal\\" (1 ≤ pos ≤ n, 0 ≤ newVal ≤ 10^9) – Update operation: set the energy consumption at position pos to newVal. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) – Query operation: compute the sum of the energy consumption from position l to position r, inclusive. For each query operation, print the result on a new line. Example: Input: 6 5 5 10 15 20 25 30 2 2 5 1 3 18 2 1 4 1 6 12 2 3 6 Output: 70 58 85","solution":"class EnergyConsumption: def __init__(self, n, energies): Initialize the EnergyConsumption with the number of devices and their respective energy consumptions. :param n: Number of devices (int) :param energies: List of initial energy consumption values (list of ints) self.n = n self.energies = energies.copy() def update(self, pos, newVal): Update the energy consumption of the device at the given position to newVal. :param pos: Position of the device (1-based index) (int) :param newVal: New energy consumption value (int) self.energies[pos - 1] = newVal def query(self, l, r): Query the total energy consumption within the range [l, r] (inclusive). :param l: Start of the range (1-based index) (int) :param r: End of the range (1-based index) (int) :return: Total energy consumption within the range (int) return sum(self.energies[l - 1: r]) def process_energy_operations(n, m, energies, operations): Process a series of update and query operations on energy consumption data. :param n: Number of devices (int) :param m: Number of operations (int) :param energies: Initial energy consumption values (list of ints) :param operations: List of operations; each operation is a list where the first element is 1 or 2 indicating the type of operation, and the subsequent elements are the parameters (list of list of ints) :return: List of results for query operations (list of ints) ec = EnergyConsumption(n, energies) results = [] for operation in operations: if operation[0] == 1: pos, newVal = operation[1], operation[2] ec.update(pos, newVal) elif operation[0] == 2: l, r = operation[1], operation[2] results.append(ec.query(l, r)) return results"},{"question":"Max loves dynamic arrays very much. One day, he received a special dynamic array challenge from his friend, Alex. The task was to perform multiple operations on a dynamic array. Initially, the dynamic array is empty. The operations required are of two types: inserting an element at a specified position and retrieving the sum of elements between two positions. The operations are defined as follows: 1. `insert x y`: Insert the integer `x` at position `y` (1-indexed). If `y` is larger than the current length of the array, append `x` to the array. 2. `sum x y`: Calculate the sum of elements from position `x` to `y` (inclusive, 1-indexed). If `x` or `y` is out of bounds of the current array length, return `-1` for that query. You are given a list of operations and need to output the results of each `sum` query. The first line of input contains an integer `m` (1 ≤ m ≤ 10^5), the number of operations. Each of the next `m` lines contains an operation in the form of either `insert x y` or `sum x y`, where `1 ≤ x ≤ 10^9` and `1 ≤ y ≤ m`. Output the result for each `sum` query on a new line, following the order of the queries. For example: Input: ``` 7 insert 3 1 insert 2 2 sum 1 2 insert 7 3 sum 2 4 insert 5 2 sum 1 3 ``` Output: ``` 5 -1 10 ``` Explanation: - After the first `insert 3 1`, the array is [3]. - After the second `insert 2 2`, the array is [3, 2]. - The first `sum 1 2` returns 5 (3 + 2). - After the third `insert 7 3`, the array is [3, 2, 7]. - The second `sum 2 4` returns `-1` because the fourth position is out of bounds. - After the fourth `insert 5 2`, the array is [3, 5, 2, 7]. - The third `sum 1 3` returns 10 (3 + 5 + 2).","solution":"def dynamic_array_operations(operations): array = [] results = [] for operation in operations: parts = operation.split() if parts[0] == \'insert\': x = int(parts[1]) y = int(parts[2]) if y > len(array): array.append(x) else: array.insert(y - 1, x) elif parts[0] == \'sum\': x = int(parts[1]) y = int(parts[2]) if x < 1 or y > len(array): results.append(-1) else: results.append(sum(array[x-1:y])) return results # Example usage: # operations = [ # \\"insert 3 1\\", # \\"insert 2 2\\", # \\"sum 1 2\\", # \\"insert 7 3\\", # \\"sum 2 4\\", # \\"insert 5 2\\", # \\"sum 1 3\\" # ] # print(dynamic_array_operations(operations)) # Output: [5, -1, 10]"},{"question":"You are working on a task to optimize energy distribution in a rising smart city. The city has m power stations connected by n bi-directional transmission lines, each with a specific capacity. Each power station may supply or consume energy, resulting in a net demand (positive for consumption and negative for supply). Your goal is to determine the maximum amount of energy that can be transported from suppliers to consumers through the network while respecting the capacity constraints of the transmission lines. The first line of input contains two integers m and n (2 ≤ m ≤ 10^5, 1 ≤ n ≤ 2*10^5) — the number of power stations and the number of transmission lines. The next line contains m integers d1, d2, ..., dm (−10^6 ≤ di ≤ 10^6), representing the net demand of each power station. A positive value indicates the station is a consumer and a negative value indicates it is a supplier. Each of the next n lines contains three integers u, v, and c (1 ≤ u, v ≤ m, u ≠ v, 1 ≤ c ≤ 10^6), describing a transmission line between power stations u and v with a capacity of c. Output a single integer — the maximum amount of energy that can be transported from suppliers to consumers. In the first example, the optimal way to transport energy is through transmission lines with enough capacities to match the consumption demands. In the second example, the capacity constraints may require creative routing through the network to maximize the energy distribution from suppliers to consumers.","solution":"from collections import defaultdict, deque def bfs_capacity(graph, capacity, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in graph[u]: if v not in visited and capacity[u][v] > 0: queue.append(v) visited.add(v) parent[v] = u if v == sink: return True return False def edmonds_karp(graph, capacity, source, sink): parent = {} max_flow = 0 while bfs_capacity(graph, capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_energy_transport(m, n, demands, edges): graph = defaultdict(list) capacity = defaultdict(lambda: defaultdict(int)) source, sink = m, m+1 for i in range(m): if demands[i] < 0: graph[source].append(i) graph[i].append(source) capacity[source][i] = -demands[i] elif demands[i] > 0: graph[i].append(sink) graph[sink].append(i) capacity[i][sink] = demands[i] for u, v, c in edges: graph[u].append(v) graph[v].append(u) capacity[u][v] += c capacity[v][u] += c return edmonds_karp(graph, capacity, source, sink)"},{"question":"Vasile is preparing for a tournament where he needs to face several opponents. The tournament is organized so that on each day, at most one match can be played. Vasile has been given a schedule that specifies the possible days he can face each opponent. He wants to minimize the total number of days he spends playing in the tournament. Each opponent i can be faced on any day in a range starting from day ai to day bi (inclusive). Vasile can only face one opponent per day. Help Vasile determine the minimum number of days he needs to finish all his matches. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of matches Vasile needs to play. The next n lines contain two integers each: ai and bi (1 ≤ ai ≤ bi ≤ 10^9), where ai is the earliest day Vasile can face the i-th opponent and bi is the latest day he can face the i-th opponent. Output an integer — the minimum number of days required for Vasile to finish all his matches. Example: Input: ``` 3 1 2 2 3 3 4 ``` Output: ``` 3 ``` Explanation: Vasile can play his matches on days 1, 2, and 3 respectively.","solution":"def min_days_to_finish_matches(n, matches): # Sort the matches by their ending day (bi) matches.sort(key=lambda x: x[1]) current_day = 0 count = 0 for match in matches: ai, bi = match if current_day < ai: # Update the current day to the day he faces this opponent current_day = ai else: # As current day is after ai, then next earliest day he can face opponent ai is current day + 1 current_day += 1 count += 1 return count"},{"question":"Given an undirected tree with `n` nodes, where each node is assigned an integer value, you need to find out the maximum sum of values that can be obtained from any simple path in the tree. A simple path is defined as a path with no repeated nodes. # Input: - The first line contains an integer `n` (2 leq n leq 10^5), the number of nodes in the tree. - The second line contains `n` integers `a_1, a_2, ..., a_n` (-10^9 leq a_i leq 10^9), where `a_i` is the value of the i-th node. - The next `n-1` lines each contain two integers `u` and `v` (1 leq u, v leq n), representing an undirected edge between nodes `u` and `v`. # Output: - Print a single integer, the maximum sum of values on any simple path in the tree. # Example: Input ``` 5 1 2 3 -1 4 1 2 1 3 3 4 3 5 ``` Output ``` 10 ``` # Explanation In the given tree, the maximum sum of values on a simple path is obtained by the path passing through the nodes 2, 1, 3, and 5, which sums up to 2 + 1 + 3 + 4 = 10.","solution":"def max_path_sum(n, values, edges): from collections import defaultdict import sys sys.setrecursionlimit(100000) # Creating adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) max_sum = float(\'-inf\') # DFS to find the maximum path sum def dfs(node, parent): nonlocal max_sum curr_sum = values[node - 1] max_child_sum = 0 for neighbor in tree[node]: if neighbor != parent: child_sum = dfs(neighbor, node) if child_sum > 0: max_child_sum = max(max_child_sum, child_sum) # Update max_sum with the largest value seen in this path max_sum = max(max_sum, curr_sum + max_child_sum) # Return the sum of the current node and the max path below it return curr_sum + max_child_sum for i in range(1, n + 1): dfs(i, -1) return max_sum"},{"question":"You are given an array of integers, where each element represents the height of a fence section. You are also given a positive integer k, representing the width of a paintbrush. The paintbrush can cover k consecutive sections of the fence in one swipe. Your task is to find the minimum total height of the fence that can be covered if you paint exactly one continuous segment of the fence. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 100000) – the number of sections of the fence and the width of the paintbrush. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100000) – the heights of the sections of the fence. Print a single integer – the minimum total height of the fence that can be covered by one swipe of the paintbrush. For example, if the input is: ``` 5 3 1 3 2 1 4 ``` The output should be `6`, because painting the sections from 2 to 4 (3+2+1) minimizes the total height covered. In another example, if the input is: ``` 7 2 2 5 3 2 8 7 4 ``` The output should be `5`, because painting the sections 1 and 2 (2+5) minimizes the total height covered.","solution":"def min_painting_height(n, k, heights): Given number of fence sections n and paintbrush width k, returns the minimum total height that can be covered by painting exactly one continuous segment of the fence. # Calculate the initial sum of the first k elements min_height = sum(heights[:k]) current_sum = min_height # Use a sliding window to find the minimum sum of any k consecutive sections for i in range(k, n): current_sum += heights[i] - heights[i - k] if current_sum < min_height: min_height = current_sum return min_height"},{"question":"Alex has a peculiar interest in sequences. He recently came across a special class of sequences known as \\"mountain arrays\\". A mountain array is defined as an array that: 1. Has strictly increasing elements up to a certain peak element. 2. After the peak element, it has strictly decreasing elements. Alex wants to generate a mountain array of length n, where the peak element is given as p. The mountain array should be filled with consecutive integers starting from 1 at the start of the array. Help Alex generate such a mountain array of length n with the given peak element p. The input contains two integers. The first integer n (1 ≤ n ≤ 100), represents the length of the mountain array. The second integer p (1 ≤ p ≤ n), represents the position (1-indexed) of the peak element. Output a single line with n space-separated integers representing the mountain array. It is guaranteed that a valid mountain array always exists for the given input constraints. Example: Input: 7 4 Output: 1 2 3 7 6 5 4 Input: 5 2 Output: 1 5 4 3 2","solution":"def mountain_array(n, p): Generates a mountain array of length n with the peak element at position p. :param n: length of the mountain array :param p: position (1-indexed) of the peak element :return: list of integers representing the mountain array peak_value = n mountain_arr = [] for i in range(1, p): mountain_arr.append(i) mountain_arr.append(peak_value) for i in range(p, n): peak_value -= 1 mountain_arr.append(peak_value) return mountain_arr"},{"question":"You are given a list of integers representing the values of coins. The task is to select a subset of these coins such that the sum of the selected coins is equal to a given target value. If there are multiple subsets that sum up to the target value, you should find the subset with the smallest number of coins. If there are still multiple solutions, return the lexicographically smallest subset. The first line contains an integer n (1 ≤ n ≤ 50) — the number of coins. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the values of the coins. The third line contains an integer t (1 ≤ t ≤ 1000) — the target value. Print a single line containing the coins in the subset that sum up to the target value, sorted in non-decreasing order. If there is no such subset, print \\"-1\\". **Example:** _Input:_ ``` 5 1 2 3 4 5 7 ``` _Output:_ ``` 2 5 ``` Explanation: Several subsets sum up to 7 (like {1, 2, 4}, {3, 4}, {2, 5}). The subset containing {2, 5} has the smallest number of coins among them.","solution":"def coin_subset(n, coins, target): Returns the smallest length subset with a lexicographically smallest order whose sum is equal to the target value. If no such subset exists, returns -1. import itertools # Generate all possible subsets of the list `coins` all_subsets = [] for r in range(len(coins) + 1): all_subsets.extend(itertools.combinations(coins, r)) # Filter subsets which have the sum equal to the target target_subsets = [subset for subset in all_subsets if sum(subset) == target] if not target_subsets: return \\"-1\\" # Finding the minimum length subsets and then lexicographically smallest one min_length = min(len(subset) for subset in target_subsets) min_length_subsets = [subset for subset in target_subsets if len(subset) == min_length] # Needed as list but internally will convert to tuple for lexicographical comparison lexicographically_smallest_subset = min(min_length_subsets) return \\" \\".join(map(str, sorted(lexicographically_smallest_subset)))"},{"question":"Peter has a collection of n robots. Each robot can perform certain tasks, and Peter wants to assign tasks in a way that maximizes the number of tasks done. Each robot has a unique index from 1 to n. Peter will assign tasks following certain rules. Specifically, each task has a starting time and an ending time, and no two tasks assigned to the same robot can overlap in time. Given a list of tasks with their start and end times, determine the maximum number of tasks that can be assigned to the robots. You will solve the problem for t test cases. # Input The first line contains a single integer t (1 le t le 5000) — the number of test cases. Each test case begins with a line containing a single integer n (1 le n le 2000) — the number of tasks. The next n lines each contain two integers s_i and e_i (1 le s_i < e_i le 10000) — the start and end times of the tasks. # Output For each test case, output a single integer — the maximum number of tasks that can be assigned to the robots without any overlap in time. # Example Input ``` 2 3 1 4 2 6 8 10 4 1 2 2 4 3 5 5 6 ``` Output ``` 2 3 ``` # Note In the first example, the maximum number of non-overlapping tasks that can be assigned to the robots is 2. One possible assignment is tasks with times (1, 4) and (8, 10). In the second example, a possible assignment that maximizes the number of non-overlapping tasks is tasks with times (1, 2), (3, 5), and (5, 6).","solution":"def max_tasks(t, test_cases): results = [] for i in range(t): n, tasks = test_cases[i] tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"A small tech start-up is developing a new software tool for task management. The tool needs to support a feature where users can list their tasks and assign different priorities to them. The developers decided to represent each task with an integer where the value corresponds to the priority (lower integer means higher priority). As a way to support efficient task retrieval, they want to implement a special data structure that maintains the tasks in priority order and allows for efficient removal and addition of tasks. To test the functionality of this module, they want you to write a sequence of operations on the task list. The start-up has provided you with the following operations: - `add x`: Add a task with priority `x`. - `remove`: Remove the highest priority task (the task with the smallest integer value). Initially, the task list is empty. After performing all operations, print the list of remaining tasks in order from the highest to the lowest priority. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of operations. Each of the next n lines contains an operation, either `add x` (where x is a positive integer) or `remove`. If there are no tasks in the list when a `remove` operation is called, simply ignore the operation. Print the list of remaining tasks in the order from the highest to the lowest priority. **Example:** **Input:** ``` 6 add 5 add 3 add 7 remove add 2 remove ``` **Output:** ``` 5 7 ``` In the given example, three tasks are added with priorities 5, 3, and 7. The first `remove` operation removes the task with priority 3. Another task with priority 2 is added, and the second `remove` operation removes the task with priority 2. The remaining tasks with priorities 5 and 7 are printed in order.","solution":"import heapq def process_operations(n, operations): Process a list of operations on the task list and return the remaining tasks. Parameters: n (int): Number of operations operations (list of str): List of operations in the form of \'add x\' or \'remove\' Returns: list: List of remaining tasks in order from highest to lowest priority heap = [] for operation in operations: if operation.startswith(\'add\'): _, x = operation.split() x = int(x) heapq.heappush(heap, x) elif operation == \'remove\': if heap: heapq.heappop(heap) remaining_tasks = sorted(heap) return remaining_tasks # Example usage n = 6 operations = [\'add 5\', \'add 3\', \'add 7\', \'remove\', \'add 2\', \'remove\'] print(process_operations(n, operations))"},{"question":"Consider an old video game where a hero must navigate a dungeon represented as an n x m grid. The hero starts at the top-left corner of the grid and must reach the bottom-right corner. The grid contains cells that are either passable or blocked. Each cell is either \'0\' (passable) or \'1\' (blocked). The hero can move to the right or downward, but cannot move onto a blocked cell, and cannot move outside the grid. Given the dungeon grid, determine the number of distinct paths the hero can take to reach the bottom-right corner from the top-left corner. If there is no valid path, return 0. The first line contains two integers, n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next n lines contains m integers (either 0 or 1), representing the rows of the grid. Output a single integer — the number of distinct paths from the top-left to the bottom-right corner of the grid. Example: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Explanation: There are two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Nina loves strings and puzzles. She came up with an interesting puzzle for her friends. She gives them a string and asks them to determine the maximum length of any substring that contains no more than \'k\' distinct characters. The given string only contains lowercase English letters. The first line of input contains the string. The length of the string is between 1 and 200,000 characters, inclusive. The second line contains an integer \'k\' (1 ≤ k ≤ 26) — the maximum number of distinct characters allowed in the substring. Output the maximum length of the substring that contains no more than \'k\' distinct characters. For instance, if the input string is \\"eceba\\" and k is 2, the substrings that contain no more than 2 distinct characters are \\"ece\\" and \\"ba\\", and the maximum length is 3. In another example, if the string is \\"aa\\" and k is 1, the only substring that satisfies the condition is \\"aa\\", resulting in a maximum length of 2.","solution":"def length_of_longest_substring_k_distinct(s, k): Finds the length of the longest substring with no more than \'k\' distinct characters. :param s: The input string containing only lowercase English letters. :param k: The maximum number of distinct characters allowed in the substring. :return: The length of the longest substring with no more than \'k\' distinct characters. if not s or k == 0: return 0 left = 0 right = 0 max_length = 0 char_count = {} while right < len(s): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Berland University is planning a new extracurricular program that involves group activities for students. The university has `n` students, and each student has a certain preference for which activities they want to participate in. The goal is to form groups in such a way that maximizes student satisfaction. Students are allowed to be in multiple groups, and each group will be formed around a single activity. Each student may have several activities they are interested in, and the university wants to determine the best way to form the groups. The satisfaction of a student is defined as the number of activities they are participating in, multiplied by the satisfaction score they give to each activity. Given the preferences and satisfaction scores of the students, determine the maximum possible total satisfaction of all students. # Input The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`) — the number of students and the number of activities. Each of the following `n` lines contains a number of pairs `(a, s)` describing the activities a student is interested in. The integer `a` (`1 ≤ a ≤ m`) is the activity index, and the integer `s` (`1 ≤ s ≤ 10^6`) is the satisfaction score the student gives to the activity. # Output Print a single integer — the maximum possible total satisfaction of all students. # Example Input: ``` 5 3 2 4 2 1 3 5 1 10 2 3 3 8 1 6 3 4 ``` Output: ``` 49 ``` In this example, the first student enjoys only activity 2 with a satisfaction score of 4. The second student enjoys activity 1 with a score of 1 and activity 3 with a score of 5. The total satisfaction should be calculated considering all students\' preferences, and adjusting groups accordingly to maximize this value.","solution":"from collections import defaultdict def max_total_satisfaction(n, m, student_preferences): activity_satisfaction = defaultdict(list) # Collecting all satisfaction scores for each activity for prefs in student_preferences: for i in range(0, len(prefs), 2): activity = prefs[i] satisfaction = prefs[i+1] activity_satisfaction[activity].append(satisfaction) # Sorting the satisfaction scores for each activity in descending order for activity in activity_satisfaction: activity_satisfaction[activity].sort(reverse=True) total_satisfaction = 0 # Compute the satisfaction contribution of each student for activities in activity_satisfaction.values(): for i in range(len(activities)): total_satisfaction += activities[i] return total_satisfaction # Helper function to read input data and process it def read_input(): n, m = map(int, input().split()) student_preferences = [] for _ in range(n): student_preferences.append(list(map(int, input().split()))) return n, m, student_preferences # Example usage # n, m, student_preferences = read_input() # print(max_total_satisfaction(n, m, student_preferences))"},{"question":"A large bookstore is looking to optimize its book recommendation system. The owner of the bookstore has a list of books and their titles, and the goal is to identify pairs of books such that their titles have a similar set of characters, regardless of the order of characters in the titles. Specifically, two titles are considered similar if one can be transformed into the other by rearranging the characters. Given a list of n book titles, write a function to find all pairs of titles that are similar based on the aforementioned criteria. A title cannot be paired with itself, and the same pair should not be counted more than once. Each title consists only of lowercase English letters. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of book titles. Each of the next n lines contains a title of a book. The length of each title is between 1 and 100, inclusive. Output the number of similar pairs of titles. # Example Input ``` 5 listen silent enlist inlets book ``` Output ``` 6 ``` # Explanation In the example provided, the titles \\"listen\\", \\"silent\\", \\"enlist\\", and \\"inlets\\" are all similar to each other as they can be rearranged to form each other. Thus, each pair among these four titles is counted, resulting in 6 pairs. \\"book\\" does not form a similar pair with any of the other titles, so it is not counted.","solution":"def count_similar_pairs(titles): Returns the number of similar pairs of titles based on similar set of characters. from collections import defaultdict # Dictionary to store character set as key and count of such titles as value char_count_dict = defaultdict(int) for title in titles: # Sort the title to get a standardized representation of character set sorted_title = \'\'.join(sorted(title)) char_count_dict[sorted_title] += 1 # Calculate the number of pairs that can be made from titles with the same sets of characters similar_pairs_count = 0 for count in char_count_dict.values(): if count > 1: similar_pairs_count += count * (count - 1) // 2 return similar_pairs_count"},{"question":"Alyona loves playing with numbers. She has recently learned about prime numbers and now she is very keen on them. For her, a positive integer x is prime if it has no positive integer divisors other than 1 and itself. She starts to wonder about the sums of these prime numbers. Given two integers l and r, she wants to know the sum of all prime numbers between l and r (inclusive). If there are no prime numbers in this range, the sum should be considered as 0. Your task is to help Alyona by writing a program that computes the sum of all prime numbers in the given range. The input contains two integers, l and r (1 ≤ l ≤ r ≤ 1000), each on a single line. Print a single integer that represents the sum of all prime numbers between l and r. If no primes are found in this range, print 0. Example: Input: 10 20 Output: 60 Explanation: The prime numbers between 10 and 20 are 11, 13, 17, and 19. The sum of these numbers is 60.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(l, r): Return the sum of all prime numbers in the range [l, r]. return sum(n for n in range(l, r + 1) if is_prime(n)) # Example usage: # l = 10 # r = 20 # print(sum_of_primes(l, r)) # Output: 60"},{"question":"You are given an undirected graph consisting of n nodes and m edges. Your task is to find the size of the largest subset of nodes such that there are no two nodes in the subset that are directly connected by an edge. The first line contains two integers n and m (1 le n le 200, 0 le m le binom{n}{2}) — the number of nodes and edges in the graph, respectively. Each of the next m lines contains two integers u and v (1 le u, v le n, u ne v), denoting an edge between nodes u and v. There can be multiple edges between the same pair of nodes and self-loops are not allowed. Print one integer — the size of the largest subset of nodes such that no two nodes in the subset are directly connected. # Example 1: ``` Input: 5 5 1 2 1 3 2 4 2 5 3 5 Output: 3 ``` # Example 2: ``` Input: 4 0 Output: 4 ``` # Explanation: In the first example, one of the largest subsets can be {1, 4, 5} or {3, 4, 5}. In both cases, there are no edges connecting any pair of nodes in the subset. The size of the subset is 3. In the second example, as there are no edges in the graph, any subset of nodes can be taken and the largest subset will include all the nodes, so the answer is 4.","solution":"def largest_independent_set(n, m, edges): # Represent the graph as adjacency list adj = {i: set() for i in range(1, n + 1)} for u, v in edges: adj[u].add(v) adj[v].add(u) def max_independent_set(node, chosen): if node > n: return len(chosen) # Case 1: Do not pick the current node without_node = max_independent_set(node + 1, chosen) # Case 2: Pick the current node can_pick = all(node not in adj[v] for v in chosen) with_node = 0 if can_pick: with_node = max_independent_set(node + 1, chosen + [node]) return max(without_node, with_node) return max_independent_set(1, []) # Example usage: # n, m = 5, 5 # edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 5)] # print(largest_independent_set(n, m, edges)) # Output: 3"},{"question":"You are given a string sequence of parentheses, consisting of \'(\' and \')\'. A valid parentheses sequence is a sequence that can be transformed into a correct arithmetic expression by inserting characters \'1\' and \'+\' in between the parentheses. For example, \\"()\\" and \\"(())\\" are valid, but \\")(\\" is not valid. Your task is to determine if the given parentheses sequence is valid. If it is valid, return the length of the longest valid parentheses substring. If it is not valid, return 0. Input: - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - Each of the next t lines contains a string s (1 ≤ |s| ≤ 105) — a sequence of parentheses. Output: - For each test case, print a single integer — the length of the longest valid parentheses substring in the given sequence. If no such substring exists, print 0. Example: Input: 4 () )( (())() ())(()) Output: 2 0 6 4 Explanation: 1. The sequence \\"()\\" is valid and its length is 2. 2. The sequence \\")(\\" is not valid and thus the output is 0. 3. The sequence \\"(())()\\" is valid and its length is 6. 4. The sequence \\"())(()\\" has a longest valid parentheses substring \\"()\\" or \\"()\\" and its length is 2+2 = 4.","solution":"def longest_valid_parentheses(t, sequences): def find_max_len_valid_parentheses(s): max_len, stack = 0, [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len results = [] for sequence in sequences: results.append(find_max_len_valid_parentheses(sequence)) return results"},{"question":"In an ancient kingdom, there are n towns connected by m bidirectional roads. Each road has a certain time delay to travel between the two towns it connects. The king wants to establish a new capital in one of the towns. He wants to choose a town such that the maximum travel time from this capital to any other town is minimized. Help the king determine the most optimal town to be the new capital by calculating the minimum possible value of the maximum travel time to the farthest town. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of towns and the number of roads. Each of the following m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — indicating that there is a road between towns u and v with a travel time of w. Output the minimum possible value of the maximum travel time from the chosen capital to any other town. Example: Input: 4 4 1 2 5 2 3 10 3 4 5 1 4 20 Output: 15","solution":"import heapq def dijkstra(n, graph, start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 heap = [(0, start)] while heap: current_dist, u = heapq.heappop(heap) if current_dist > dist[u]: continue for v, length in graph[u]: distance = current_dist + length if distance < dist[v]: dist[v] = distance heapq.heappush(heap, (distance, v)) return dist def min_max_travel_time(n, roads): graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) min_max_time = float(\'inf\') for i in range(1, n + 1): dist = dijkstra(n, graph, i) max_dist = max(dist[1:]) min_max_time = min(min_max_time, max_dist) return min_max_time # Example usage n, m = 4, 4 roads = [(1, 2, 5), (2, 3, 10), (3, 4, 5), (1, 4, 20)] print(min_max_travel_time(n, roads)) # Output: 15"},{"question":"The Berland Ministry of Transportation has recently developed a unique traffic management system for its capital city. The city is represented by a grid of n rows and m columns. Each cell in the grid contains either a \'R\' (representing a red light) or a \'G\' (representing a green light). The system works as follows: - Each row can independently switch all its red lights to green and vice versa. - Each column can independently switch all its red lights to green and vice versa. You are given the initial state of the grid, and then a series of q operations. Each operation is either: 1. Switch all lights in a specific row. 2. Switch all lights in a specific column. 3. Query the state of a specific cell in the grid. Implement a program that processes these operations and provides the results of the queries. The first line of the input contains three integers n, m, and q (1 leq n, m leq 500, 1 leq q leq 10^5) - the number of rows, the number of columns, and the number of operations, respectively. The next n lines each contain m characters (\'R\' or \'G\'), representing the initial state of the grid. Each of the next q lines contains an operation. An operation can be one of the following: - \\"row x\\" (1 ≤ x ≤ n) — switch all lights in row x. - \\"column y\\" (1 ≤ y ≤ m) — switch all lights in column y. - \\"query x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ m) — output the state of the cell at row x, column y. Print the result of each \\"query\\" operation on a new line. The result should be \'R\' or \'G\'. Example: Input: 3 3 4 RRG GRR RGG row 1 query 1 1 column 2 query 2 2 Output: G G Explanation: - After switching row 1, the grid becomes: GGR GRR RGG - The first query \\"query 1 1\\" will produce \'G\'. - After switching column 2, the grid becomes: GGR GRR RGR - The second query \\"query 2 2\\" will produce \'G\'.","solution":"def process_traffic_system(n, m, q, grid, operations): row_flip = [0] * n col_flip = [0] * m result = [] for operation in operations: if operation.startswith(\\"row\\"): _, x = operation.split() x = int(x) - 1 row_flip[x] ^= 1 elif operation.startswith(\\"column\\"): _, y = operation.split() y = int(y) - 1 col_flip[y] ^= 1 elif operation.startswith(\\"query\\"): _, x, y = operation.split() x = int(x) - 1 y = int(y) - 1 state = grid[x][y] if row_flip[x] ^ col_flip[y] == 1: state = \'G\' if state == \'R\' else \'R\' result.append(state) return result # Example usage: n, m, q = 3, 3, 4 grid = [ \\"RRG\\", \\"GRR\\", \\"RGG\\" ] operations = [ \\"row 1\\", \\"query 1 1\\", \\"column 2\\", \\"query 2 2\\" ] # Should output [\'G\', \'G\'] print(process_traffic_system(n, m, q, grid, operations))"},{"question":"At a newly discovered archaeological site, a group of archaeologists found an ancient encrypted manuscript. The manuscript contains a sequence of n integers. Upon deciphering the text, they found a message suggesting that there is a treasure hidden if one can identify specific patterns in the sequence. The archaeologists hypothesize that the manuscript hides special patterns which are defined as subarrays where each element is a multiple of a given integer k. For instance, in the subarray a[l], a[l+1], ..., a[r], all elements should be divisible by k. The problem is to find out the longest such subarray in the given sequence. Given a sequence of length n and integer k, find the length of the longest subarray where each element is divisible by k. If there are multiple subarrays of the same maximum length, any one can be considered. The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109). The second line contains n integers separated by spaces, representing the sequence. Output a single integer – the length of the longest subarray consisting of elements that are divisible by k. In the first example: Input: 7 3 3 6 9 12 1 3 6 Output: 4 Explanation: The subarray [3, 6, 9, 12] is the longest subarray where all elements are divisible by 3.","solution":"def longest_subarray_divisible_by_k(n, k, sequence): Finds the length of the longest subarray where each element is divisible by k. Parameters: n (int): Length of the sequence. k (int): The integer which the elements of the subarray should be divisible by. sequence (list[int]): The sequence of integers. Returns: int: The length of the longest subarray. max_length = 0 current_length = 0 for num in sequence: if num % k == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"There is a rectangular island that can be represented as a grid with `n` rows and `m` columns. Each cell on the grid can either be land (represented by \'1\') or water (represented by \'0\'). The people on the island want to know how many distinct islands there are. An island is defined as a group of connected land cells (\'1\'s) surrounded by water (\'0\'s) or the boundaries of the grid. Cells are connected horizontally or vertically, but not diagonally. You need to determine the number of distinct islands in the grid. The first line of the input contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 1000), the dimensions of the grid. The next `n` lines each contain `m` characters, either \'1\' or \'0\', representing the grid. Print `t` lines, one for each test case, containing the number of distinct islands in the grid. **Example:** Input: ``` 2 4 5 11110 11010 11000 00000 4 5 11000 11000 00100 00011 ``` Output: ``` 1 3 ``` Explanation: In the first test case, there is only one island: ``` 11110 11010 11000 00000 ``` In the second test case, there are three distinct islands: ``` 11000 11000 00100 00011 ```","solution":"def count_islands(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark the cell as visited dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': # Found an unvisited land cell dfs(i, j) # Visit all cells in this island island_count += 1 # Increment the island count return island_count def process_test_cases(t, test_cases): results = [] for i in range(t): n, m, grid = test_cases[i] results.append(count_islands(n, m, grid)) return results def main(): import sys input = sys.stdin.read data = input().split(\'n\') t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, data[index].split()) grid = [list(data[index + 1 + i]) for i in range(n)] test_cases.append((n, m, grid)) index += (n + 1) results = process_test_cases(t, test_cases) for result in results: print(result)"}]'),S={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},A={class:"search-container"},z={class:"card-container"},N={key:0,class:"empty-state"},F=["disabled"],R={key:0},P={key:1};function C(s,e,h,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",A,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",z,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",N,' No results found for "'+u(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,F)):l("",!0)])}const D=d(S,[["render",C],["__scopeId","data-v-bec2db08"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/37.md","filePath":"deepseek/37.md"}'),L={name:"deepseek/37.md"},G=Object.assign(L,{setup(s){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,G as default};
